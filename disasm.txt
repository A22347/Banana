
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 05 c3 00 00       	call   c000c325 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 03 f4 01 00       	call   c001f428 <_init>
c0000025:	c3                   	ret    
c0000026:	bb b2 ff 01 c0       	mov    ebx,0xc001ffb2
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb bc ff 01 c0    	cmp    ebx,0xc001ffbc
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 ac 3d 02 c0       	mov    eax,0xc0023dac
c0000049:	3d ac 3d 02 c0       	cmp    eax,0xc0023dac
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 ac 3d 02 c0       	push   0xc0023dac
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 ac 3d 02 c0       	mov    eax,0xc0023dac
c0000075:	2d ac 3d 02 c0       	sub    eax,0xc0023dac
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 ac 3d 02 c0       	push   0xc0023dac
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 4c 3f 02 c0 00 	cmp    BYTE PTR ds:0xc0023f4c,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb c4 ff 01 c0       	mov    ebx,0xc001ffc4
c00000bb:	81 eb c0 ff 01 c0    	sub    ebx,0xc001ffc0
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be c0 ff 01 c0       	mov    esi,0xc001ffc0
c00000ca:	a1 50 3f 02 c0       	mov    eax,ds:0xc0023f50
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 50 3f 02 c0       	mov    ds:0xc0023f50,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 50 3f 02 c0       	mov    eax,ds:0xc0023f50
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 ac 3d 02 c0       	push   0xc0023dac
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 4c 3f 02 c0 01 	mov    BYTE PTR ds:0xc0023f4c,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 54 3f 02 c0       	push   0xc0023f54
c000012c:	68 ac 3d 02 c0       	push   0xc0023dac
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <prepareTramp>:
c0000150:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000157:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c000015e:	50                   	push   eax
c000015f:	0f 20 d8             	mov    eax,cr3
c0000162:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000167:	58                   	pop    eax
c0000168:	c3                   	ret    

c0000169 <voodooXADD>:
c0000169:	55                   	push   ebp
c000016a:	89 e5                	mov    ebp,esp
c000016c:	60                   	pusha  
c000016d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000170:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0000173:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0000176:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0000179:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c000017c:	89 35 17 02 00 c0    	mov    DWORD PTR ds:0xc0000217,esi
c0000182:	89 25 13 02 00 c0    	mov    DWORD PTR ds:0xc0000213,esp
c0000188:	60                   	pusha  
c0000189:	b0 90                	mov    al,0x90
c000018b:	b9 20 00 00 00       	mov    ecx,0x20
c0000190:	bf ea 01 00 c0       	mov    edi,0xc00001ea
c0000195:	f3 aa                	rep stos BYTE PTR es:[edi],al
c0000197:	61                   	popa   
c0000198:	60                   	pusha  
c0000199:	89 d6                	mov    esi,edx
c000019b:	bf ea 01 00 c0       	mov    edi,0xc00001ea
c00001a0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00001a2:	61                   	popa   
c00001a3:	60                   	pusha  
c00001a4:	89 d6                	mov    esi,edx
c00001a6:	bf fa 01 00 c0       	mov    edi,0xc00001fa
c00001ab:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00001ad:	61                   	popa   
c00001ae:	b1 90                	mov    cl,0x90
c00001b0:	85 db                	test   ebx,ebx
c00001b2:	74 06                	je     c00001ba <voodooXADD.skipChange>
c00001b4:	8a 8b e9 01 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffe17]

c00001ba <voodooXADD.skipChange>:
c00001ba:	88 8b ea 01 00 c0    	mov    BYTE PTR [ebx-0x3ffffe16],cl
c00001c0:	80 ab eb 01 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffe15],0x3a
c00001c7:	88 8b fa 01 00 c0    	mov    BYTE PTR [ebx-0x3ffffe06],cl
c00001cd:	80 ab fb 01 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffe05],0xbe
c00001d4:	89 c4                	mov    esp,eax
c00001d6:	81 c4 10 00 00 00    	add    esp,0x10
c00001dc:	5f                   	pop    edi
c00001dd:	5e                   	pop    esi
c00001de:	5d                   	pop    ebp
c00001df:	5b                   	pop    ebx
c00001e0:	5b                   	pop    ebx
c00001e1:	5a                   	pop    edx
c00001e2:	59                   	pop    ecx
c00001e3:	58                   	pop    eax
c00001e4:	8b 25 17 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000217

c00001ea <voodooXADD.helper>:
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	90                   	nop
c00001f7:	90                   	nop
c00001f8:	90                   	nop
c00001f9:	90                   	nop
c00001fa:	90                   	nop
c00001fb:	90                   	nop
c00001fc:	90                   	nop
c00001fd:	90                   	nop
c00001fe:	90                   	nop
c00001ff:	90                   	nop
c0000200:	90                   	nop
c0000201:	90                   	nop
c0000202:	90                   	nop
c0000203:	90                   	nop
c0000204:	90                   	nop
c0000205:	90                   	nop
c0000206:	90                   	nop
c0000207:	90                   	nop
c0000208:	90                   	nop
c0000209:	90                   	nop
c000020a:	8b 25 13 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000213
c0000210:	61                   	popa   
c0000211:	c9                   	leave  
c0000212:	c3                   	ret    

c0000213 <voodooXADD.oldStack>:
c0000213:	00 00                	add    BYTE PTR [eax],al
	...

c0000217 <voodooXADD.newStack>:
c0000217:	00 00                	add    BYTE PTR [eax],al
	...

c000021b <doTPAUSE>:
c000021b:	fb                   	sti    
c000021c:	31 c0                	xor    eax,eax
c000021e:	31 d2                	xor    edx,edx
c0000220:	66 0f ae f0          	tpause eax
c0000224:	c3                   	ret    

c0000225 <hasLegacyFPU>:
c0000225:	0f 20 c2             	mov    edx,cr0
c0000228:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c000022e:	0f 22 c2             	mov    cr0,edx
c0000231:	db e3                	fninit 
c0000233:	dd 3d 48 02 00 c0    	fnstsw WORD PTR ds:0xc0000248
c0000239:	31 c0                	xor    eax,eax
c000023b:	66 81 3d 48 02 00 c0 00 00 	cmp    WORD PTR ds:0xc0000248,0x0
c0000244:	75 01                	jne    c0000247 <hasLegacyFPU.nofpu>

c0000246 <hasLegacyFPU.hasfpu>:
c0000246:	40                   	inc    eax

c0000247 <hasLegacyFPU.nofpu>:
c0000247:	c3                   	ret    

c0000248 <testword>:
c0000248:	aa                   	stos   BYTE PTR es:[edi],al
c0000249:	55                   	push   ebp

c000024a <is486>:
c000024a:	0f 09                	wbinvd 
c000024c:	31 c0                	xor    eax,eax
c000024e:	40                   	inc    eax
c000024f:	c3                   	ret    
c0000250:	90                   	nop
c0000251:	90                   	nop
c0000252:	90                   	nop
c0000253:	90                   	nop
c0000254:	90                   	nop
c0000255:	90                   	nop
c0000256:	90                   	nop
c0000257:	90                   	nop
c0000258:	90                   	nop
c0000259:	90                   	nop
c000025a:	90                   	nop
c000025b:	90                   	nop
c000025c:	90                   	nop
c000025d:	90                   	nop
c000025e:	90                   	nop
c000025f:	90                   	nop
c0000260:	90                   	nop
c0000261:	90                   	nop
c0000262:	90                   	nop
c0000263:	90                   	nop
c0000264:	90                   	nop
c0000265:	90                   	nop
c0000266:	90                   	nop
c0000267:	90                   	nop
c0000268:	90                   	nop
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	90                   	nop
c000026f:	90                   	nop
c0000270:	90                   	nop
c0000271:	90                   	nop
c0000272:	90                   	nop
c0000273:	90                   	nop
c0000274:	90                   	nop
c0000275:	90                   	nop
c0000276:	90                   	nop
c0000277:	90                   	nop
c0000278:	90                   	nop
c0000279:	90                   	nop
c000027a:	90                   	nop
c000027b:	90                   	nop
c000027c:	90                   	nop
c000027d:	31 c0                	xor    eax,eax
c000027f:	c3                   	ret    

c0000280 <goToVM86>:
c0000280:	fa                   	cli    
c0000281:	55                   	push   ebp
c0000282:	89 e5                	mov    ebp,esp
c0000284:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000287:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c000028a:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000028d:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0000290:	25 ff ff 00 00       	and    eax,0xffff
c0000295:	81 e3 ff ff 00 00    	and    ebx,0xffff
c000029b:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00002a1:	81 e2 ff ff 00 00    	and    edx,0xffff
c00002a7:	52                   	push   edx
c00002a8:	51                   	push   ecx
c00002a9:	68 02 02 02 00       	push   0x20202
c00002ae:	53                   	push   ebx
c00002af:	50                   	push   eax
c00002b0:	cf                   	iret   

c00002b1 <goToUsermode>:
c00002b1:	fa                   	cli    
c00002b2:	55                   	push   ebp
c00002b3:	89 e5                	mov    ebp,esp
c00002b5:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00002b8:	66 b8 23 00          	mov    ax,0x23
c00002bc:	66 8e d8             	mov    ds,ax
c00002bf:	66 8e c0             	mov    es,ax
c00002c2:	66 8e e0             	mov    fs,ax
c00002c5:	66 8e e8             	mov    gs,ax
c00002c8:	89 e0                	mov    eax,esp
c00002ca:	68 23 00 00 00       	push   0x23
c00002cf:	50                   	push   eax
c00002d0:	68 02 02 00 00       	push   0x202
c00002d5:	68 1b 00 00 00       	push   0x1b
c00002da:	53                   	push   ebx
c00002db:	cf                   	iret   

c00002dc <switchToThreadASMFirstTime>:
c00002dc:	9c                   	pushf  
c00002dd:	fa                   	cli    
c00002de:	50                   	push   eax
c00002df:	53                   	push   ebx
c00002e0:	51                   	push   ecx
c00002e1:	52                   	push   edx
c00002e2:	56                   	push   esi
c00002e3:	57                   	push   edi
c00002e4:	55                   	push   ebp
c00002e5:	e9 11 00 00 00       	jmp    c00002fb <commonThreadSwitch>

c00002ea <switchToThreadASM>:
c00002ea:	9c                   	pushf  
c00002eb:	50                   	push   eax
c00002ec:	53                   	push   ebx
c00002ed:	51                   	push   ecx
c00002ee:	52                   	push   edx
c00002ef:	56                   	push   esi
c00002f0:	57                   	push   edi
c00002f1:	55                   	push   ebp
c00002f2:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c00002f8:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c00002fb <commonThreadSwitch>:
c00002fb:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00002ff:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000305:	8b 06                	mov    eax,DWORD PTR [esi]
c0000307:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000030a:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000030d:	0f 20 d9             	mov    ecx,cr3
c0000310:	39 c8                	cmp    eax,ecx
c0000312:	74 03                	je     c0000317 <commonThreadSwitch.doneVAS>
c0000314:	0f 22 d8             	mov    cr3,eax

c0000317 <commonThreadSwitch.doneVAS>:
c0000317:	85 d2                	test   edx,edx
c0000319:	74 4e                	je     c0000369 <commonThreadSwitch.notFirstTime>
c000031b:	fa                   	cli    
c000031c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000031f:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c0000324:	60                   	pusha  
c0000325:	e8 d2 eb 00 00       	call   c000eefc <mapVASFirstTime>
c000032a:	61                   	popa   
c000032b:	89 c4                	mov    esp,eax
c000032d:	56                   	push   esi
c000032e:	52                   	push   edx
c000032f:	e8 30 81 01 00       	call   c0018464 <changeTSS>
c0000334:	5a                   	pop    edx
c0000335:	5e                   	pop    esi
c0000336:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c000033d:	81 fa 01 00 00 00    	cmp    edx,0x1
c0000343:	74 39                	je     c000037e <commonThreadSwitch.cameOffAFork>
c0000345:	5d                   	pop    ebp
c0000346:	5f                   	pop    edi
c0000347:	5e                   	pop    esi
c0000348:	59                   	pop    ecx
c0000349:	59                   	pop    ecx
c000034a:	5b                   	pop    ebx
c000034b:	58                   	pop    eax
c000034c:	81 c4 04 00 00 00    	add    esp,0x4
c0000352:	6a 02                	push   0x2
c0000354:	9d                   	popf   
c0000355:	52                   	push   edx
c0000356:	e8 1c 85 01 00       	call   c0018877 <taskStartupFunction>
c000035b:	5a                   	pop    edx
c000035c:	50                   	push   eax
c000035d:	ff d2                	call   edx
c000035f:	e8 c2 8a 01 00       	call   c0018e26 <taskReturned>
c0000364:	e9 fb ff ff ff       	jmp    c0000364 <commonThreadSwitch.doneVAS+0x4d>

c0000369 <commonThreadSwitch.notFirstTime>:
c0000369:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c000036c:	56                   	push   esi
c000036d:	52                   	push   edx
c000036e:	e8 f1 80 01 00       	call   c0018464 <changeTSS>
c0000373:	5a                   	pop    edx
c0000374:	5e                   	pop    esi
c0000375:	5d                   	pop    ebp
c0000376:	5f                   	pop    edi
c0000377:	5e                   	pop    esi
c0000378:	5a                   	pop    edx
c0000379:	59                   	pop    ecx
c000037a:	5b                   	pop    ebx
c000037b:	58                   	pop    eax
c000037c:	9d                   	popf   
c000037d:	c3                   	ret    

c000037e <commonThreadSwitch.cameOffAFork>:
c000037e:	31 c0                	xor    eax,eax
c0000380:	31 d2                	xor    edx,edx
c0000382:	8b 66 1c             	mov    esp,DWORD PTR [esi+0x1c]
c0000385:	e9 a2 02 00 00       	jmp    c000062c <offAForkJumpThingy>

c000038a <detectCPUID>:
c000038a:	9c                   	pushf  
c000038b:	9c                   	pushf  
c000038c:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000393:	9d                   	popf   
c0000394:	9c                   	pushf  
c0000395:	58                   	pop    eax
c0000396:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000399:	9d                   	popf   
c000039a:	25 00 00 20 00       	and    eax,0x200000
c000039f:	c3                   	ret    

c00003a0 <asmQuickAcquireLock>:
c00003a0:	55                   	push   ebp
c00003a1:	89 e5                	mov    ebp,esp
c00003a3:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003a6 <asmQuickAcquireLock.retry>:
c00003a6:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003ab:	72 02                	jb     c00003af <asmQuickAcquireLock.spin_with_pause>
c00003ad:	fa                   	cli    
c00003ae:	c3                   	ret    

c00003af <asmQuickAcquireLock.spin_with_pause>:
c00003af:	f3 90                	pause  
c00003b1:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c00003b7:	75 f6                	jne    c00003af <asmQuickAcquireLock.spin_with_pause>
c00003b9:	e9 e8 ff ff ff       	jmp    c00003a6 <asmQuickAcquireLock.retry>

c00003be <asmQuickReleaseLock>:
c00003be:	55                   	push   ebp
c00003bf:	89 e5                	mov    ebp,esp
c00003c1:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c00003c8:	5d                   	pop    ebp
c00003c9:	c3                   	ret    

c00003ca <asmAcquireLock>:
c00003ca:	55                   	push   ebp
c00003cb:	89 e5                	mov    ebp,esp
c00003cd:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003d0 <asmAcquireLock.retry>:
c00003d0:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003d5:	72 05                	jb     c00003dc <asmAcquireLock.spin_with_pause>
c00003d7:	9c                   	pushf  
c00003d8:	58                   	pop    eax
c00003d9:	fa                   	cli    
c00003da:	5d                   	pop    ebp
c00003db:	c3                   	ret    

c00003dc <asmAcquireLock.spin_with_pause>:
c00003dc:	f3 90                	pause  
c00003de:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c00003e4:	75 f6                	jne    c00003dc <asmAcquireLock.spin_with_pause>
c00003e6:	e9 e5 ff ff ff       	jmp    c00003d0 <asmAcquireLock.retry>

c00003eb <asmReleaseLock>:
c00003eb:	55                   	push   ebp
c00003ec:	89 e5                	mov    ebp,esp
c00003ee:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00003f1:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00003f4:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00003fa:	52                   	push   edx
c00003fb:	9d                   	popf   
c00003fc:	5d                   	pop    ebp
c00003fd:	c3                   	ret    

c00003fe <loadGDT>:
c00003fe:	0f 01 15 90 43 02 c0 	lgdtd  ds:0xc0024390
c0000405:	66 b8 10 00          	mov    ax,0x10
c0000409:	66 8e d8             	mov    ds,ax
c000040c:	66 8e c0             	mov    es,ax
c000040f:	66 8e e0             	mov    fs,ax
c0000412:	66 8e e8             	mov    gs,ax
c0000415:	66 8e d0             	mov    ss,ax
c0000418:	e9 00 00 00 00       	jmp    c000041d <flush2>

c000041d <flush2>:
c000041d:	c3                   	ret    

c000041e <isr0>:
c000041e:	fa                   	cli    
c000041f:	68 00 00 00 00       	push   0x0
c0000424:	68 00 00 00 00       	push   0x0
c0000429:	e9 a2 01 00 00       	jmp    c00005d0 <int_common_stub>

c000042e <isr1>:
c000042e:	fa                   	cli    
c000042f:	6a 00                	push   0x0
c0000431:	6a 01                	push   0x1
c0000433:	e9 98 01 00 00       	jmp    c00005d0 <int_common_stub>

c0000438 <isr2>:
c0000438:	fa                   	cli    
c0000439:	6a 00                	push   0x0
c000043b:	6a 02                	push   0x2
c000043d:	e9 8e 01 00 00       	jmp    c00005d0 <int_common_stub>

c0000442 <isr3>:
c0000442:	fa                   	cli    
c0000443:	6a 00                	push   0x0
c0000445:	6a 03                	push   0x3
c0000447:	e9 84 01 00 00       	jmp    c00005d0 <int_common_stub>

c000044c <isr4>:
c000044c:	fa                   	cli    
c000044d:	6a 00                	push   0x0
c000044f:	6a 04                	push   0x4
c0000451:	e9 7a 01 00 00       	jmp    c00005d0 <int_common_stub>

c0000456 <isr5>:
c0000456:	fa                   	cli    
c0000457:	6a 00                	push   0x0
c0000459:	6a 05                	push   0x5
c000045b:	e9 70 01 00 00       	jmp    c00005d0 <int_common_stub>

c0000460 <isr6>:
c0000460:	fa                   	cli    
c0000461:	6a 00                	push   0x0
c0000463:	6a 06                	push   0x6
c0000465:	e9 66 01 00 00       	jmp    c00005d0 <int_common_stub>

c000046a <isr7>:
c000046a:	fa                   	cli    
c000046b:	6a 00                	push   0x0
c000046d:	6a 07                	push   0x7
c000046f:	e9 5c 01 00 00       	jmp    c00005d0 <int_common_stub>

c0000474 <isr8>:
c0000474:	fa                   	cli    
c0000475:	6a 08                	push   0x8
c0000477:	e9 54 01 00 00       	jmp    c00005d0 <int_common_stub>

c000047c <isr9>:
c000047c:	fa                   	cli    
c000047d:	6a 00                	push   0x0
c000047f:	6a 09                	push   0x9
c0000481:	e9 4a 01 00 00       	jmp    c00005d0 <int_common_stub>

c0000486 <isr10>:
c0000486:	fa                   	cli    
c0000487:	6a 0a                	push   0xa
c0000489:	e9 42 01 00 00       	jmp    c00005d0 <int_common_stub>

c000048e <isr11>:
c000048e:	fa                   	cli    
c000048f:	6a 0b                	push   0xb
c0000491:	e9 3a 01 00 00       	jmp    c00005d0 <int_common_stub>

c0000496 <isr12>:
c0000496:	fa                   	cli    
c0000497:	6a 0c                	push   0xc
c0000499:	e9 32 01 00 00       	jmp    c00005d0 <int_common_stub>

c000049e <isr13>:
c000049e:	fa                   	cli    
c000049f:	6a 0d                	push   0xd
c00004a1:	e9 2a 01 00 00       	jmp    c00005d0 <int_common_stub>

c00004a6 <isr14>:
c00004a6:	fa                   	cli    
c00004a7:	6a 0e                	push   0xe
c00004a9:	e9 22 01 00 00       	jmp    c00005d0 <int_common_stub>

c00004ae <isr15>:
c00004ae:	fa                   	cli    
c00004af:	6a 00                	push   0x0
c00004b1:	6a 0f                	push   0xf
c00004b3:	e9 18 01 00 00       	jmp    c00005d0 <int_common_stub>

c00004b8 <isr16>:
c00004b8:	fa                   	cli    
c00004b9:	6a 00                	push   0x0
c00004bb:	6a 10                	push   0x10
c00004bd:	e9 0e 01 00 00       	jmp    c00005d0 <int_common_stub>

c00004c2 <isr17>:
c00004c2:	fa                   	cli    
c00004c3:	6a 00                	push   0x0
c00004c5:	6a 11                	push   0x11
c00004c7:	e9 04 01 00 00       	jmp    c00005d0 <int_common_stub>

c00004cc <isr18>:
c00004cc:	fa                   	cli    
c00004cd:	6a 00                	push   0x0
c00004cf:	6a 12                	push   0x12
c00004d1:	e9 fa 00 00 00       	jmp    c00005d0 <int_common_stub>

c00004d6 <isr96>:
c00004d6:	fa                   	cli    
c00004d7:	6a 00                	push   0x0
c00004d9:	6a 60                	push   0x60
c00004db:	e9 20 01 00 00       	jmp    c0000600 <syscall_common_stub>

c00004e0 <irq0>:
c00004e0:	fa                   	cli    
c00004e1:	6a 00                	push   0x0
c00004e3:	6a 20                	push   0x20
c00004e5:	e9 e6 00 00 00       	jmp    c00005d0 <int_common_stub>

c00004ea <irq1>:
c00004ea:	fa                   	cli    
c00004eb:	6a 00                	push   0x0
c00004ed:	6a 21                	push   0x21
c00004ef:	e9 dc 00 00 00       	jmp    c00005d0 <int_common_stub>

c00004f4 <irq2>:
c00004f4:	fa                   	cli    
c00004f5:	6a 00                	push   0x0
c00004f7:	6a 22                	push   0x22
c00004f9:	e9 d2 00 00 00       	jmp    c00005d0 <int_common_stub>

c00004fe <irq3>:
c00004fe:	fa                   	cli    
c00004ff:	6a 00                	push   0x0
c0000501:	6a 23                	push   0x23
c0000503:	e9 c8 00 00 00       	jmp    c00005d0 <int_common_stub>

c0000508 <irq4>:
c0000508:	fa                   	cli    
c0000509:	6a 00                	push   0x0
c000050b:	6a 24                	push   0x24
c000050d:	e9 be 00 00 00       	jmp    c00005d0 <int_common_stub>

c0000512 <irq5>:
c0000512:	fa                   	cli    
c0000513:	6a 00                	push   0x0
c0000515:	6a 25                	push   0x25
c0000517:	e9 b4 00 00 00       	jmp    c00005d0 <int_common_stub>

c000051c <irq6>:
c000051c:	fa                   	cli    
c000051d:	6a 00                	push   0x0
c000051f:	6a 26                	push   0x26
c0000521:	e9 aa 00 00 00       	jmp    c00005d0 <int_common_stub>

c0000526 <irq7>:
c0000526:	fa                   	cli    
c0000527:	6a 00                	push   0x0
c0000529:	6a 27                	push   0x27
c000052b:	e9 a0 00 00 00       	jmp    c00005d0 <int_common_stub>

c0000530 <irq8>:
c0000530:	fa                   	cli    
c0000531:	6a 00                	push   0x0
c0000533:	6a 28                	push   0x28
c0000535:	e9 96 00 00 00       	jmp    c00005d0 <int_common_stub>

c000053a <irq9>:
c000053a:	fa                   	cli    
c000053b:	6a 00                	push   0x0
c000053d:	6a 29                	push   0x29
c000053f:	e9 8c 00 00 00       	jmp    c00005d0 <int_common_stub>

c0000544 <irq10>:
c0000544:	fa                   	cli    
c0000545:	6a 00                	push   0x0
c0000547:	6a 2a                	push   0x2a
c0000549:	e9 82 00 00 00       	jmp    c00005d0 <int_common_stub>

c000054e <irq11>:
c000054e:	fa                   	cli    
c000054f:	6a 00                	push   0x0
c0000551:	6a 2b                	push   0x2b
c0000553:	e9 78 00 00 00       	jmp    c00005d0 <int_common_stub>

c0000558 <irq12>:
c0000558:	fa                   	cli    
c0000559:	6a 00                	push   0x0
c000055b:	6a 2c                	push   0x2c
c000055d:	e9 6e 00 00 00       	jmp    c00005d0 <int_common_stub>

c0000562 <irq13>:
c0000562:	fa                   	cli    
c0000563:	6a 00                	push   0x0
c0000565:	6a 2d                	push   0x2d
c0000567:	e9 64 00 00 00       	jmp    c00005d0 <int_common_stub>

c000056c <irq14>:
c000056c:	fa                   	cli    
c000056d:	6a 00                	push   0x0
c000056f:	6a 2e                	push   0x2e
c0000571:	e9 5a 00 00 00       	jmp    c00005d0 <int_common_stub>

c0000576 <irq15>:
c0000576:	fa                   	cli    
c0000577:	6a 00                	push   0x0
c0000579:	6a 2f                	push   0x2f
c000057b:	e9 50 00 00 00       	jmp    c00005d0 <int_common_stub>

c0000580 <irq16>:
c0000580:	fa                   	cli    
c0000581:	6a 00                	push   0x0
c0000583:	6a 30                	push   0x30
c0000585:	e9 46 00 00 00       	jmp    c00005d0 <int_common_stub>

c000058a <irq17>:
c000058a:	fa                   	cli    
c000058b:	6a 00                	push   0x0
c000058d:	6a 31                	push   0x31
c000058f:	e9 3c 00 00 00       	jmp    c00005d0 <int_common_stub>

c0000594 <irq18>:
c0000594:	fa                   	cli    
c0000595:	6a 00                	push   0x0
c0000597:	6a 32                	push   0x32
c0000599:	e9 32 00 00 00       	jmp    c00005d0 <int_common_stub>

c000059e <irq19>:
c000059e:	fa                   	cli    
c000059f:	6a 00                	push   0x0
c00005a1:	6a 33                	push   0x33
c00005a3:	e9 28 00 00 00       	jmp    c00005d0 <int_common_stub>

c00005a8 <irq20>:
c00005a8:	fa                   	cli    
c00005a9:	6a 00                	push   0x0
c00005ab:	6a 34                	push   0x34
c00005ad:	e9 1e 00 00 00       	jmp    c00005d0 <int_common_stub>

c00005b2 <irq21>:
c00005b2:	fa                   	cli    
c00005b3:	6a 00                	push   0x0
c00005b5:	6a 35                	push   0x35
c00005b7:	e9 14 00 00 00       	jmp    c00005d0 <int_common_stub>

c00005bc <irq22>:
c00005bc:	fa                   	cli    
c00005bd:	6a 00                	push   0x0
c00005bf:	6a 36                	push   0x36
c00005c1:	e9 0a 00 00 00       	jmp    c00005d0 <int_common_stub>

c00005c6 <irq23>:
c00005c6:	fa                   	cli    
c00005c7:	6a 00                	push   0x0
c00005c9:	6a 37                	push   0x37
c00005cb:	e9 00 00 00 00       	jmp    c00005d0 <int_common_stub>

c00005d0 <int_common_stub>:
c00005d0:	60                   	pusha  
c00005d1:	1e                   	push   ds
c00005d2:	06                   	push   es
c00005d3:	0f a0                	push   fs
c00005d5:	0f a8                	push   gs
c00005d7:	66 b8 10 00          	mov    ax,0x10
c00005db:	66 8e d8             	mov    ds,ax
c00005de:	66 8e c0             	mov    es,ax
c00005e1:	66 8e e0             	mov    fs,ax
c00005e4:	66 8e e8             	mov    gs,ax
c00005e7:	89 e1                	mov    ecx,esp
c00005e9:	51                   	push   ecx
c00005ea:	b9 d5 0d 01 c0       	mov    ecx,0xc0010dd5
c00005ef:	ff d1                	call   ecx
c00005f1:	59                   	pop    ecx
c00005f2:	0f a9                	pop    gs
c00005f4:	0f a1                	pop    fs
c00005f6:	07                   	pop    es
c00005f7:	1f                   	pop    ds
c00005f8:	61                   	popa   
c00005f9:	81 c4 08 00 00 00    	add    esp,0x8
c00005ff:	cf                   	iret   

c0000600 <syscall_common_stub>:
c0000600:	60                   	pusha  
c0000601:	1e                   	push   ds
c0000602:	06                   	push   es
c0000603:	0f a0                	push   fs
c0000605:	0f a8                	push   gs
c0000607:	66 b8 10 00          	mov    ax,0x10
c000060b:	66 8e d8             	mov    ds,ax
c000060e:	66 8e c0             	mov    es,ax
c0000611:	66 8e e0             	mov    fs,ax
c0000614:	66 8e e8             	mov    gs,ax
c0000617:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c000061d:	89 61 1c             	mov    DWORD PTR [ecx+0x1c],esp
c0000620:	89 e1                	mov    ecx,esp
c0000622:	51                   	push   ecx
c0000623:	fb                   	sti    
c0000624:	b9 d5 0d 01 c0       	mov    ecx,0xc0010dd5
c0000629:	ff d1                	call   ecx
c000062b:	59                   	pop    ecx

c000062c <offAForkJumpThingy>:
c000062c:	0f a9                	pop    gs
c000062e:	0f a1                	pop    fs
c0000630:	07                   	pop    es
c0000631:	1f                   	pop    ds
c0000632:	61                   	popa   
c0000633:	81 c4 08 00 00 00    	add    esp,0x8
c0000639:	cf                   	iret   

c000063a <memcmp>:
c000063a:	56                   	push   esi
c000063b:	53                   	push   ebx
c000063c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000640:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000644:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000648:	01 d6                	add    esi,edx
c000064a:	39 f2                	cmp    edx,esi
c000064c:	74 0e                	je     c000065c <memcmp+0x22>
c000064e:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0000651:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000654:	38 c8                	cmp    al,cl
c0000656:	75 08                	jne    c0000660 <memcmp+0x26>
c0000658:	42                   	inc    edx
c0000659:	43                   	inc    ebx
c000065a:	eb ee                	jmp    c000064a <memcmp+0x10>
c000065c:	31 c0                	xor    eax,eax
c000065e:	eb 02                	jmp    c0000662 <memcmp+0x28>
c0000660:	29 c8                	sub    eax,ecx
c0000662:	5b                   	pop    ebx
c0000663:	5e                   	pop    esi
c0000664:	c3                   	ret    

c0000665 <memmove>:
c0000665:	56                   	push   esi
c0000666:	53                   	push   ebx
c0000667:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000066b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000066f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0000673:	39 c8                	cmp    eax,ecx
c0000675:	73 12                	jae    c0000689 <memmove+0x24>
c0000677:	8d 34 0a             	lea    esi,[edx+ecx*1]
c000067a:	89 c3                	mov    ebx,eax
c000067c:	39 f1                	cmp    ecx,esi
c000067e:	74 1a                	je     c000069a <memmove+0x35>
c0000680:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000682:	43                   	inc    ebx
c0000683:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c0000686:	41                   	inc    ecx
c0000687:	eb f3                	jmp    c000067c <memmove+0x17>
c0000689:	76 0f                	jbe    c000069a <memmove+0x35>
c000068b:	85 d2                	test   edx,edx
c000068d:	74 0b                	je     c000069a <memmove+0x35>
c000068f:	8a 5c 11 ff          	mov    bl,BYTE PTR [ecx+edx*1-0x1]
c0000693:	88 5c 10 ff          	mov    BYTE PTR [eax+edx*1-0x1],bl
c0000697:	4a                   	dec    edx
c0000698:	eb f1                	jmp    c000068b <memmove+0x26>
c000069a:	5b                   	pop    ebx
c000069b:	5e                   	pop    esi
c000069c:	c3                   	ret    

c000069d <memcpy>:
c000069d:	57                   	push   edi
c000069e:	56                   	push   esi
c000069f:	53                   	push   ebx
c00006a0:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00006a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00006a8:	89 da                	mov    edx,ebx
c00006aa:	89 d9                	mov    ecx,ebx
c00006ac:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00006b0:	83 e2 fc             	and    edx,0xfffffffc
c00006b3:	c1 e9 02             	shr    ecx,0x2
c00006b6:	89 c7                	mov    edi,eax
c00006b8:	fc                   	cld    
c00006b9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00006bb:	8d 0c 16             	lea    ecx,[esi+edx*1]
c00006be:	01 c2                	add    edx,eax
c00006c0:	01 de                	add    esi,ebx
c00006c2:	39 f1                	cmp    ecx,esi
c00006c4:	74 09                	je     c00006cf <memcpy+0x32>
c00006c6:	8a 19                	mov    bl,BYTE PTR [ecx]
c00006c8:	42                   	inc    edx
c00006c9:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00006cc:	41                   	inc    ecx
c00006cd:	eb f3                	jmp    c00006c2 <memcpy+0x25>
c00006cf:	5b                   	pop    ebx
c00006d0:	5e                   	pop    esi
c00006d1:	5f                   	pop    edi
c00006d2:	c3                   	ret    

c00006d3 <memset>:
c00006d3:	53                   	push   ebx
c00006d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00006d8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00006dc:	89 c2                	mov    edx,eax
c00006de:	01 c1                	add    ecx,eax
c00006e0:	39 ca                	cmp    edx,ecx
c00006e2:	74 0a                	je     c00006ee <memset+0x1b>
c00006e4:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c00006e8:	42                   	inc    edx
c00006e9:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00006ec:	eb f2                	jmp    c00006e0 <memset+0xd>
c00006ee:	5b                   	pop    ebx
c00006ef:	c3                   	ret    

c00006f0 <strlen>:
c00006f0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00006f4:	31 c0                	xor    eax,eax
c00006f6:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00006fa:	74 03                	je     c00006ff <strlen+0xf>
c00006fc:	40                   	inc    eax
c00006fd:	eb f7                	jmp    c00006f6 <strlen+0x6>
c00006ff:	c3                   	ret    

c0000700 <strpbrk>:
c0000700:	53                   	push   ebx
c0000701:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000705:	8a 08                	mov    cl,BYTE PTR [eax]
c0000707:	84 c9                	test   cl,cl
c0000709:	74 14                	je     c000071f <strpbrk+0x1f>
c000070b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000070f:	8a 1a                	mov    bl,BYTE PTR [edx]
c0000711:	84 db                	test   bl,bl
c0000713:	74 07                	je     c000071c <strpbrk+0x1c>
c0000715:	38 cb                	cmp    bl,cl
c0000717:	74 08                	je     c0000721 <strpbrk+0x21>
c0000719:	42                   	inc    edx
c000071a:	eb f3                	jmp    c000070f <strpbrk+0xf>
c000071c:	40                   	inc    eax
c000071d:	eb e6                	jmp    c0000705 <strpbrk+0x5>
c000071f:	31 c0                	xor    eax,eax
c0000721:	5b                   	pop    ebx
c0000722:	c3                   	ret    

c0000723 <strtok>:
c0000723:	56                   	push   esi
c0000724:	53                   	push   ebx
c0000725:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0000729:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000072d:	85 db                	test   ebx,ebx
c000072f:	75 0e                	jne    c000073f <strtok+0x1c>
c0000731:	8b 1d 6c 3f 02 c0    	mov    ebx,DWORD PTR ds:0xc0023f6c
c0000737:	85 db                	test   ebx,ebx
c0000739:	75 04                	jne    c000073f <strtok+0x1c>
c000073b:	31 db                	xor    ebx,ebx
c000073d:	eb 2e                	jmp    c000076d <strtok+0x4a>
c000073f:	56                   	push   esi
c0000740:	53                   	push   ebx
c0000741:	e8 ba ff ff ff       	call   c0000700 <strpbrk>
c0000746:	5a                   	pop    edx
c0000747:	a3 6c 3f 02 c0       	mov    ds:0xc0023f6c,eax
c000074c:	59                   	pop    ecx
c000074d:	a1 6c 3f 02 c0       	mov    eax,ds:0xc0023f6c
c0000752:	39 d8                	cmp    eax,ebx
c0000754:	75 07                	jne    c000075d <strtok+0x3a>
c0000756:	43                   	inc    ebx
c0000757:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c000075b:	eb e2                	jmp    c000073f <strtok+0x1c>
c000075d:	85 c0                	test   eax,eax
c000075f:	74 da                	je     c000073b <strtok+0x18>
c0000761:	8d 50 01             	lea    edx,[eax+0x1]
c0000764:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000767:	89 15 6c 3f 02 c0    	mov    DWORD PTR ds:0xc0023f6c,edx
c000076d:	89 d8                	mov    eax,ebx
c000076f:	5b                   	pop    ebx
c0000770:	5e                   	pop    esi
c0000771:	c3                   	ret    

c0000772 <strcpy>:
c0000772:	53                   	push   ebx
c0000773:	31 d2                	xor    edx,edx
c0000775:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000779:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000077d:	8d 1c 10             	lea    ebx,[eax+edx*1]
c0000780:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c0000783:	84 c9                	test   cl,cl
c0000785:	74 06                	je     c000078d <strcpy+0x1b>
c0000787:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c000078a:	42                   	inc    edx
c000078b:	eb ec                	jmp    c0000779 <strcpy+0x7>
c000078d:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000790:	5b                   	pop    ebx
c0000791:	c3                   	ret    

c0000792 <strncpy>:
c0000792:	56                   	push   esi
c0000793:	53                   	push   ebx
c0000794:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000798:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000079c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00007a0:	89 c3                	mov    ebx,eax
c00007a2:	85 c9                	test   ecx,ecx
c00007a4:	74 1a                	je     c00007c0 <strncpy+0x2e>
c00007a6:	46                   	inc    esi
c00007a7:	43                   	inc    ebx
c00007a8:	8a 56 ff             	mov    dl,BYTE PTR [esi-0x1]
c00007ab:	49                   	dec    ecx
c00007ac:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c00007af:	84 d2                	test   dl,dl
c00007b1:	75 ef                	jne    c00007a2 <strncpy+0x10>
c00007b3:	31 d2                	xor    edx,edx
c00007b5:	39 d1                	cmp    ecx,edx
c00007b7:	74 07                	je     c00007c0 <strncpy+0x2e>
c00007b9:	c6 04 13 00          	mov    BYTE PTR [ebx+edx*1],0x0
c00007bd:	42                   	inc    edx
c00007be:	eb f5                	jmp    c00007b5 <strncpy+0x23>
c00007c0:	5b                   	pop    ebx
c00007c1:	5e                   	pop    esi
c00007c2:	c3                   	ret    

c00007c3 <strcmp>:
c00007c3:	31 c9                	xor    ecx,ecx
c00007c5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00007c9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00007cd:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c00007d1:	0f b6 14 0a          	movzx  edx,BYTE PTR [edx+ecx*1]
c00007d5:	38 d0                	cmp    al,dl
c00007d7:	75 08                	jne    c00007e1 <strcmp+0x1e>
c00007d9:	41                   	inc    ecx
c00007da:	84 c0                	test   al,al
c00007dc:	75 e7                	jne    c00007c5 <strcmp+0x2>
c00007de:	31 c0                	xor    eax,eax
c00007e0:	c3                   	ret    
c00007e1:	29 d0                	sub    eax,edx
c00007e3:	c3                   	ret    

c00007e4 <strchr>:
c00007e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00007e8:	8a 10                	mov    dl,BYTE PTR [eax]
c00007ea:	84 d2                	test   dl,dl
c00007ec:	74 09                	je     c00007f7 <strchr+0x13>
c00007ee:	3a 54 24 08          	cmp    dl,BYTE PTR [esp+0x8]
c00007f2:	74 05                	je     c00007f9 <strchr+0x15>
c00007f4:	40                   	inc    eax
c00007f5:	eb f1                	jmp    c00007e8 <strchr+0x4>
c00007f7:	31 c0                	xor    eax,eax
c00007f9:	c3                   	ret    

c00007fa <strncmp>:
c00007fa:	56                   	push   esi
c00007fb:	53                   	push   ebx
c00007fc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000800:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000804:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000808:	01 d6                	add    esi,edx
c000080a:	39 f2                	cmp    edx,esi
c000080c:	74 12                	je     c0000820 <strncmp+0x26>
c000080e:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0000811:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000814:	38 c8                	cmp    al,cl
c0000816:	75 0c                	jne    c0000824 <strncmp+0x2a>
c0000818:	42                   	inc    edx
c0000819:	84 c0                	test   al,al
c000081b:	74 03                	je     c0000820 <strncmp+0x26>
c000081d:	43                   	inc    ebx
c000081e:	eb ea                	jmp    c000080a <strncmp+0x10>
c0000820:	31 c0                	xor    eax,eax
c0000822:	eb 02                	jmp    c0000826 <strncmp+0x2c>
c0000824:	29 c8                	sub    eax,ecx
c0000826:	5b                   	pop    ebx
c0000827:	5e                   	pop    esi
c0000828:	c3                   	ret    

c0000829 <strcat>:
c0000829:	53                   	push   ebx
c000082a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000082e:	89 c1                	mov    ecx,eax
c0000830:	8d 51 01             	lea    edx,[ecx+0x1]
c0000833:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000837:	74 04                	je     c000083d <strcat+0x14>
c0000839:	89 d1                	mov    ecx,edx
c000083b:	eb f3                	jmp    c0000830 <strcat+0x7>
c000083d:	31 d2                	xor    edx,edx
c000083f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0000843:	8a 1c 13             	mov    bl,BYTE PTR [ebx+edx*1]
c0000846:	88 1c 11             	mov    BYTE PTR [ecx+edx*1],bl
c0000849:	42                   	inc    edx
c000084a:	84 db                	test   bl,bl
c000084c:	75 f1                	jne    c000083f <strcat+0x16>
c000084e:	5b                   	pop    ebx
c000084f:	c3                   	ret    

c0000850 <strncat>:
c0000850:	56                   	push   esi
c0000851:	53                   	push   ebx
c0000852:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000856:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000085a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000085e:	89 c2                	mov    edx,eax
c0000860:	85 db                	test   ebx,ebx
c0000862:	74 23                	je     c0000887 <strncat+0x37>
c0000864:	8d 72 01             	lea    esi,[edx+0x1]
c0000867:	80 7e ff 00          	cmp    BYTE PTR [esi-0x1],0x0
c000086b:	74 04                	je     c0000871 <strncat+0x21>
c000086d:	89 f2                	mov    edx,esi
c000086f:	eb f3                	jmp    c0000864 <strncat+0x14>
c0000871:	8d 34 19             	lea    esi,[ecx+ebx*1]
c0000874:	41                   	inc    ecx
c0000875:	42                   	inc    edx
c0000876:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c0000879:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c000087c:	84 db                	test   bl,bl
c000087e:	74 07                	je     c0000887 <strncat+0x37>
c0000880:	39 f1                	cmp    ecx,esi
c0000882:	75 f0                	jne    c0000874 <strncat+0x24>
c0000884:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0000887:	5b                   	pop    ebx
c0000888:	5e                   	pop    esi
c0000889:	c3                   	ret    

c000088a <strstr>:
c000088a:	57                   	push   edi
c000088b:	56                   	push   esi
c000088c:	53                   	push   ebx
c000088d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000891:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0000895:	57                   	push   edi
c0000896:	e8 55 fe ff ff       	call   c00006f0 <strlen>
c000089b:	59                   	pop    ecx
c000089c:	89 c6                	mov    esi,eax
c000089e:	85 c0                	test   eax,eax
c00008a0:	74 1f                	je     c00008c1 <strstr+0x37>
c00008a2:	53                   	push   ebx
c00008a3:	e8 48 fe ff ff       	call   c00006f0 <strlen>
c00008a8:	5a                   	pop    edx
c00008a9:	39 f0                	cmp    eax,esi
c00008ab:	72 12                	jb     c00008bf <strstr+0x35>
c00008ad:	56                   	push   esi
c00008ae:	57                   	push   edi
c00008af:	53                   	push   ebx
c00008b0:	e8 85 fd ff ff       	call   c000063a <memcmp>
c00008b5:	83 c4 0c             	add    esp,0xc
c00008b8:	85 c0                	test   eax,eax
c00008ba:	74 05                	je     c00008c1 <strstr+0x37>
c00008bc:	43                   	inc    ebx
c00008bd:	eb e3                	jmp    c00008a2 <strstr+0x18>
c00008bf:	31 db                	xor    ebx,ebx
c00008c1:	89 d8                	mov    eax,ebx
c00008c3:	5b                   	pop    ebx
c00008c4:	5e                   	pop    esi
c00008c5:	5f                   	pop    edi
c00008c6:	c3                   	ret    

c00008c7 <toupper>:
c00008c7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008cb:	0f b6 d0             	movzx  edx,al
c00008ce:	f6 82 e0 ff 01 c0 02 	test   BYTE PTR [edx-0x3ffe0020],0x2
c00008d5:	74 03                	je     c00008da <toupper+0x13>
c00008d7:	83 e8 20             	sub    eax,0x20
c00008da:	c3                   	ret    

c00008db <tolower>:
c00008db:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008df:	0f b6 d0             	movzx  edx,al
c00008e2:	f6 82 e0 ff 01 c0 01 	test   BYTE PTR [edx-0x3ffe0020],0x1
c00008e9:	74 03                	je     c00008ee <tolower+0x13>
c00008eb:	83 c0 20             	add    eax,0x20
c00008ee:	c3                   	ret    

c00008ef <simple_strtoul>:
c00008ef:	55                   	push   ebp
c00008f0:	57                   	push   edi
c00008f1:	56                   	push   esi
c00008f2:	53                   	push   ebx
c00008f3:	83 ec 08             	sub    esp,0x8
c00008f6:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00008fa:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00008fe:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000901:	f6 82 e0 ff 01 c0 08 	test   BYTE PTR [edx-0x3ffe0020],0x8
c0000908:	74 03                	je     c000090d <simple_strtoul+0x1e>
c000090a:	41                   	inc    ecx
c000090b:	eb f1                	jmp    c00008fe <simple_strtoul+0xf>
c000090d:	80 fa 09             	cmp    dl,0x9
c0000910:	74 f8                	je     c000090a <simple_strtoul+0x1b>
c0000912:	80 fa 2d             	cmp    dl,0x2d
c0000915:	75 0b                	jne    c0000922 <simple_strtoul+0x33>
c0000917:	41                   	inc    ecx
c0000918:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000920:	eb 0e                	jmp    c0000930 <simple_strtoul+0x41>
c0000922:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000092a:	80 fa 2b             	cmp    dl,0x2b
c000092d:	75 01                	jne    c0000930 <simple_strtoul+0x41>
c000092f:	41                   	inc    ecx
c0000930:	85 f6                	test   esi,esi
c0000932:	75 22                	jne    c0000956 <simple_strtoul+0x67>
c0000934:	be 0a 00 00 00       	mov    esi,0xa
c0000939:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c000093c:	75 5a                	jne    c0000998 <simple_strtoul+0xa9>
c000093e:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000942:	50                   	push   eax
c0000943:	e8 93 ff ff ff       	call   c00008db <tolower>
c0000948:	5a                   	pop    edx
c0000949:	83 f8 78             	cmp    eax,0x78
c000094c:	74 03                	je     c0000951 <simple_strtoul+0x62>
c000094e:	41                   	inc    ecx
c000094f:	eb 16                	jmp    c0000967 <simple_strtoul+0x78>
c0000951:	83 c1 02             	add    ecx,0x2
c0000954:	eb 22                	jmp    c0000978 <simple_strtoul+0x89>
c0000956:	8d 46 fe             	lea    eax,[esi-0x2]
c0000959:	83 f8 22             	cmp    eax,0x22
c000095c:	0f 87 b7 00 00 00    	ja     c0000a19 <simple_strtoul+0x12a>
c0000962:	83 fe 08             	cmp    esi,0x8
c0000965:	75 0c                	jne    c0000973 <simple_strtoul+0x84>
c0000967:	be 08 00 00 00       	mov    esi,0x8
c000096c:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c000096f:	75 27                	jne    c0000998 <simple_strtoul+0xa9>
c0000971:	eb 1f                	jmp    c0000992 <simple_strtoul+0xa3>
c0000973:	83 fe 10             	cmp    esi,0x10
c0000976:	75 20                	jne    c0000998 <simple_strtoul+0xa9>
c0000978:	be 10 00 00 00       	mov    esi,0x10
c000097d:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c0000980:	75 16                	jne    c0000998 <simple_strtoul+0xa9>
c0000982:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000986:	50                   	push   eax
c0000987:	e8 4f ff ff ff       	call   c00008db <tolower>
c000098c:	5d                   	pop    ebp
c000098d:	83 f8 78             	cmp    eax,0x78
c0000990:	74 03                	je     c0000995 <simple_strtoul+0xa6>
c0000992:	41                   	inc    ecx
c0000993:	eb 03                	jmp    c0000998 <simple_strtoul+0xa9>
c0000995:	83 c1 02             	add    ecx,0x2
c0000998:	31 ed                	xor    ebp,ebp
c000099a:	31 db                	xor    ebx,ebx
c000099c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00009a3:	8a 11                	mov    dl,BYTE PTR [ecx]
c00009a5:	84 d2                	test   dl,dl
c00009a7:	74 27                	je     c00009d0 <simple_strtoul+0xe1>
c00009a9:	0f b6 fa             	movzx  edi,dl
c00009ac:	f6 87 e0 ff 01 c0 04 	test   BYTE PTR [edi-0x3ffe0020],0x4
c00009b3:	74 05                	je     c00009ba <simple_strtoul+0xcb>
c00009b5:	83 ef 30             	sub    edi,0x30
c00009b8:	eb 22                	jmp    c00009dc <simple_strtoul+0xed>
c00009ba:	0f be d2             	movsx  edx,dl
c00009bd:	52                   	push   edx
c00009be:	e8 04 ff ff ff       	call   c00008c7 <toupper>
c00009c3:	5f                   	pop    edi
c00009c4:	0f b6 d0             	movzx  edx,al
c00009c7:	f6 82 e0 ff 01 c0 01 	test   BYTE PTR [edx-0x3ffe0020],0x1
c00009ce:	75 09                	jne    c00009d9 <simple_strtoul+0xea>
c00009d0:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c00009d5:	75 2d                	jne    c0000a04 <simple_strtoul+0x115>
c00009d7:	eb 57                	jmp    c0000a30 <simple_strtoul+0x141>
c00009d9:	8d 78 c9             	lea    edi,[eax-0x37]
c00009dc:	39 f7                	cmp    edi,esi
c00009de:	73 f0                	jae    c00009d0 <simple_strtoul+0xe1>
c00009e0:	31 d2                	xor    edx,edx
c00009e2:	89 f8                	mov    eax,edi
c00009e4:	f7 d0                	not    eax
c00009e6:	f7 f6                	div    esi
c00009e8:	39 d8                	cmp    eax,ebx
c00009ea:	72 0e                	jb     c00009fa <simple_strtoul+0x10b>
c00009ec:	0f af de             	imul   ebx,esi
c00009ef:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00009f6:	01 fb                	add    ebx,edi
c00009f8:	eb 07                	jmp    c0000a01 <simple_strtoul+0x112>
c00009fa:	bd 01 00 00 00       	mov    ebp,0x1
c00009ff:	31 db                	xor    ebx,ebx
c0000a01:	41                   	inc    ecx
c0000a02:	eb 9f                	jmp    c00009a3 <simple_strtoul+0xb4>
c0000a04:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000a07:	09 d8                	or     eax,ebx
c0000a09:	75 1f                	jne    c0000a2a <simple_strtoul+0x13b>
c0000a0b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a0f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000a13:	31 db                	xor    ebx,ebx
c0000a15:	89 38                	mov    DWORD PTR [eax],edi
c0000a17:	eb 17                	jmp    c0000a30 <simple_strtoul+0x141>
c0000a19:	31 db                	xor    ebx,ebx
c0000a1b:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0000a20:	74 14                	je     c0000a36 <simple_strtoul+0x147>
c0000a22:	31 ed                	xor    ebp,ebp
c0000a24:	85 c9                	test   ecx,ecx
c0000a26:	75 e3                	jne    c0000a0b <simple_strtoul+0x11c>
c0000a28:	31 db                	xor    ebx,ebx
c0000a2a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a2e:	89 08                	mov    DWORD PTR [eax],ecx
c0000a30:	4d                   	dec    ebp
c0000a31:	75 03                	jne    c0000a36 <simple_strtoul+0x147>
c0000a33:	83 cb ff             	or     ebx,0xffffffff
c0000a36:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a3b:	75 02                	jne    c0000a3f <simple_strtoul+0x150>
c0000a3d:	f7 db                	neg    ebx
c0000a3f:	83 c4 08             	add    esp,0x8
c0000a42:	89 d8                	mov    eax,ebx
c0000a44:	5b                   	pop    ebx
c0000a45:	5e                   	pop    esi
c0000a46:	5f                   	pop    edi
c0000a47:	5d                   	pop    ebp
c0000a48:	c3                   	ret    

c0000a49 <largebin_index>:
c0000a49:	89 c2                	mov    edx,eax
c0000a4b:	c1 ea 08             	shr    edx,0x8
c0000a4e:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000a54:	77 10                	ja     c0000a66 <largebin_index+0x1d>
c0000a56:	0f bd d2             	bsr    edx,edx
c0000a59:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000a5c:	d3 e8                	shr    eax,cl
c0000a5e:	83 e0 03             	and    eax,0x3
c0000a61:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000a65:	c3                   	ret    
c0000a66:	b8 5f 00 00 00       	mov    eax,0x5f
c0000a6b:	c3                   	ret    

c0000a6c <malloc_init_state>:
c0000a6c:	53                   	push   ebx
c0000a6d:	8d 50 34             	lea    edx,[eax+0x34]
c0000a70:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000a76:	89 d1                	mov    ecx,edx
c0000a78:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000a7b:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000a7e:	83 c2 08             	add    edx,0x8
c0000a81:	39 da                	cmp    edx,ebx
c0000a83:	75 f3                	jne    c0000a78 <malloc_init_state+0xc>
c0000a85:	8b 10                	mov    edx,DWORD PTR [eax]
c0000a87:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000a91:	83 e2 03             	and    edx,0x3
c0000a94:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000a9e:	83 ca 48             	or     edx,0x48
c0000aa1:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000aab:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000ab5:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000abc:	89 10                	mov    DWORD PTR [eax],edx
c0000abe:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000ac1:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000acb:	5b                   	pop    ebx
c0000acc:	c3                   	ret    

c0000acd <malloc_consolidate>:
c0000acd:	8b 10                	mov    edx,DWORD PTR [eax]
c0000acf:	85 d2                	test   edx,edx
c0000ad1:	0f 84 d8 00 00 00    	je     c0000baf <malloc_consolidate+0xe2>
c0000ad7:	55                   	push   ebp
c0000ad8:	83 e2 fd             	and    edx,0xfffffffd
c0000adb:	57                   	push   edi
c0000adc:	89 c5                	mov    ebp,eax
c0000ade:	56                   	push   esi
c0000adf:	8d 78 34             	lea    edi,[eax+0x34]
c0000ae2:	53                   	push   ebx
c0000ae3:	83 ec 10             	sub    esp,0x10
c0000ae6:	89 10                	mov    DWORD PTR [eax],edx
c0000ae8:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000aec:	c1 ea 03             	shr    edx,0x3
c0000aef:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000af3:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000af7:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000afa:	85 d2                	test   edx,edx
c0000afc:	0f 84 98 00 00 00    	je     c0000b9a <malloc_consolidate+0xcd>
c0000b02:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000b09:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000b0c:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000b0f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000b13:	89 f9                	mov    ecx,edi
c0000b15:	83 e1 fe             	and    ecx,0xfffffffe
c0000b18:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000b1b:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000b1e:	83 e3 fc             	and    ebx,0xfffffffc
c0000b21:	83 e7 01             	and    edi,0x1
c0000b24:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000b27:	75 14                	jne    c0000b3d <malloc_consolidate+0x70>
c0000b29:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000b2b:	29 fa                	sub    edx,edi
c0000b2d:	01 f9                	add    ecx,edi
c0000b2f:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000b32:	89 fb                	mov    ebx,edi
c0000b34:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000b37:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000b3a:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000b3d:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000b40:	74 40                	je     c0000b82 <malloc_consolidate+0xb5>
c0000b42:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000b45:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000b48:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000b4c:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000b4f:	83 e7 01             	and    edi,0x1
c0000b52:	75 0e                	jne    c0000b62 <malloc_consolidate+0x95>
c0000b54:	01 d9                	add    ecx,ebx
c0000b56:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000b59:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000b5c:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000b5f:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000b62:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000b65:	89 ce                	mov    esi,ecx
c0000b67:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000b6a:	83 ce 01             	or     esi,0x1
c0000b6d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000b70:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000b73:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000b76:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000b7a:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000b7d:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000b80:	eb 0c                	jmp    c0000b8e <malloc_consolidate+0xc1>
c0000b82:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000b85:	83 c9 01             	or     ecx,0x1
c0000b88:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000b8b:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000b8e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000b92:	85 d2                	test   edx,edx
c0000b94:	0f 85 6f ff ff ff    	jne    c0000b09 <malloc_consolidate+0x3c>
c0000b9a:	83 c5 04             	add    ebp,0x4
c0000b9d:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000ba1:	0f 85 50 ff ff ff    	jne    c0000af7 <malloc_consolidate+0x2a>
c0000ba7:	83 c4 10             	add    esp,0x10
c0000baa:	5b                   	pop    ebx
c0000bab:	5e                   	pop    esi
c0000bac:	5f                   	pop    edi
c0000bad:	5d                   	pop    ebp
c0000bae:	c3                   	ret    
c0000baf:	e9 b8 fe ff ff       	jmp    c0000a6c <malloc_init_state>

c0000bb4 <dlfree>:
c0000bb4:	57                   	push   edi
c0000bb5:	56                   	push   esi
c0000bb6:	53                   	push   ebx
c0000bb7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000bbb:	85 db                	test   ebx,ebx
c0000bbd:	0f 84 e2 00 00 00    	je     c0000ca5 <dlfree+0xf1>
c0000bc3:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000bc6:	8b 0d 80 3f 02 c0    	mov    ecx,DWORD PTR ds:0xc0023f80
c0000bcc:	89 f0                	mov    eax,esi
c0000bce:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000bd1:	83 e0 fc             	and    eax,0xfffffffc
c0000bd4:	39 c1                	cmp    ecx,eax
c0000bd6:	72 24                	jb     c0000bfc <dlfree+0x48>
c0000bd8:	83 c9 03             	or     ecx,0x3
c0000bdb:	c1 e8 03             	shr    eax,0x3
c0000bde:	89 0d 80 3f 02 c0    	mov    DWORD PTR ds:0xc0023f80,ecx
c0000be4:	83 e8 02             	sub    eax,0x2
c0000be7:	8b 0c 85 84 3f 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdc07c]
c0000bee:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000bf0:	89 14 85 84 3f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc07c],edx
c0000bf7:	e9 a9 00 00 00       	jmp    c0000ca5 <dlfree+0xf1>
c0000bfc:	83 e6 02             	and    esi,0x2
c0000bff:	0f 85 a0 00 00 00    	jne    c0000ca5 <dlfree+0xf1>
c0000c05:	83 c9 01             	or     ecx,0x1
c0000c08:	8d 34 02             	lea    esi,[edx+eax*1]
c0000c0b:	89 0d 80 3f 02 c0    	mov    DWORD PTR ds:0xc0023f80,ecx
c0000c11:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000c14:	83 e1 fc             	and    ecx,0xfffffffc
c0000c17:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000c1b:	75 13                	jne    c0000c30 <dlfree+0x7c>
c0000c1d:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000c20:	29 da                	sub    edx,ebx
c0000c22:	01 d8                	add    eax,ebx
c0000c24:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000c27:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000c2a:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000c2d:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000c30:	39 35 ac 3f 02 c0    	cmp    DWORD PTR ds:0xc0023fac,esi
c0000c36:	74 40                	je     c0000c78 <dlfree+0xc4>
c0000c38:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000c3c:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000c3f:	80 e3 01             	and    bl,0x1
c0000c42:	75 0e                	jne    c0000c52 <dlfree+0x9e>
c0000c44:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000c47:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000c4a:	01 c8                	add    eax,ecx
c0000c4c:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000c4f:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000c52:	8b 0d bc 3f 02 c0    	mov    ecx,DWORD PTR ds:0xc0023fbc
c0000c58:	c7 42 0c b4 3f 02 c0 	mov    DWORD PTR [edx+0xc],0xc0023fb4
c0000c5f:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000c62:	89 15 bc 3f 02 c0    	mov    DWORD PTR ds:0xc0023fbc,edx
c0000c68:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000c6b:	89 c1                	mov    ecx,eax
c0000c6d:	83 c9 01             	or     ecx,0x1
c0000c70:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c73:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000c76:	eb 10                	jmp    c0000c88 <dlfree+0xd4>
c0000c78:	01 c8                	add    eax,ecx
c0000c7a:	89 c1                	mov    ecx,eax
c0000c7c:	83 c9 01             	or     ecx,0x1
c0000c7f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c82:	89 15 ac 3f 02 c0    	mov    DWORD PTR ds:0xc0023fac,edx
c0000c88:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000c8d:	76 16                	jbe    c0000ca5 <dlfree+0xf1>
c0000c8f:	f6 05 80 3f 02 c0 02 	test   BYTE PTR ds:0xc0023f80,0x2
c0000c96:	74 0d                	je     c0000ca5 <dlfree+0xf1>
c0000c98:	5b                   	pop    ebx
c0000c99:	b8 80 3f 02 c0       	mov    eax,0xc0023f80
c0000c9e:	5e                   	pop    esi
c0000c9f:	5f                   	pop    edi
c0000ca0:	e9 28 fe ff ff       	jmp    c0000acd <malloc_consolidate>
c0000ca5:	5b                   	pop    ebx
c0000ca6:	5e                   	pop    esi
c0000ca7:	5f                   	pop    edi
c0000ca8:	c3                   	ret    

c0000ca9 <sYSMALLOc>:
c0000ca9:	55                   	push   ebp
c0000caa:	57                   	push   edi
c0000cab:	56                   	push   esi
c0000cac:	53                   	push   ebx
c0000cad:	89 d3                	mov    ebx,edx
c0000caf:	83 ec 2c             	sub    esp,0x2c
c0000cb2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000cb6:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000cbc:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000cbf:	8d 42 ff             	lea    eax,[edx-0x1]
c0000cc2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000cc6:	74 1f                	je     c0000ce7 <sYSMALLOc+0x3e>
c0000cc8:	89 d8                	mov    eax,ebx
c0000cca:	e8 fe fd ff ff       	call   c0000acd <malloc_consolidate>
c0000ccf:	83 ec 0c             	sub    esp,0xc
c0000cd2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000cd6:	83 e8 07             	sub    eax,0x7
c0000cd9:	50                   	push   eax
c0000cda:	e8 30 02 00 00       	call   c0000f0f <dlmalloc>
c0000cdf:	83 c4 10             	add    esp,0x10
c0000ce2:	e9 20 02 00 00       	jmp    c0000f07 <sYSMALLOc+0x25e>
c0000ce7:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000cea:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000cf0:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000cf3:	83 e0 fc             	and    eax,0xfffffffc
c0000cf6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000cfa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000cfe:	83 c0 10             	add    eax,0x10
c0000d01:	01 c1                	add    ecx,eax
c0000d03:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000d07:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000d0e:	74 04                	je     c0000d14 <sYSMALLOc+0x6b>
c0000d10:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000d14:	f7 da                	neg    edx
c0000d16:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000d1a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000d1e:	21 d1                	and    ecx,edx
c0000d20:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000d24:	7f 07                	jg     c0000d2d <sYSMALLOc+0x84>
c0000d26:	31 c0                	xor    eax,eax
c0000d28:	e9 da 01 00 00       	jmp    c0000f07 <sYSMALLOc+0x25e>
c0000d2d:	83 ec 0c             	sub    esp,0xc
c0000d30:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000d34:	e8 4a b1 00 00       	call   c000be83 <sbrk>
c0000d39:	83 c4 10             	add    esp,0x10
c0000d3c:	89 c6                	mov    esi,eax
c0000d3e:	83 f8 ff             	cmp    eax,0xffffffff
c0000d41:	74 e3                	je     c0000d26 <sYSMALLOc+0x7d>
c0000d43:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000d47:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000d4b:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000d4e:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000d54:	39 f1                	cmp    ecx,esi
c0000d56:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000d5c:	75 13                	jne    c0000d71 <sYSMALLOc+0xc8>
c0000d5e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000d62:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000d66:	83 c8 01             	or     eax,0x1
c0000d69:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000d6c:	e9 3e 01 00 00       	jmp    c0000eaf <sYSMALLOc+0x206>
c0000d71:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000d77:	88 d0                	mov    al,dl
c0000d79:	83 e0 01             	and    eax,0x1
c0000d7c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000d81:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000d85:	0f 95 c0             	setne  al
c0000d88:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000d8c:	39 f1                	cmp    ecx,esi
c0000d8e:	76 12                	jbe    c0000da2 <sYSMALLOc+0xf9>
c0000d90:	84 c0                	test   al,al
c0000d92:	74 0e                	je     c0000da2 <sYSMALLOc+0xf9>
c0000d94:	83 e2 fe             	and    edx,0xfffffffe
c0000d97:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000d9d:	e9 83 00 00 00       	jmp    c0000e25 <sYSMALLOc+0x17c>
c0000da2:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000da7:	74 7c                	je     c0000e25 <sYSMALLOc+0x17c>
c0000da9:	84 c0                	test   al,al
c0000dab:	74 0c                	je     c0000db9 <sYSMALLOc+0x110>
c0000dad:	89 f0                	mov    eax,esi
c0000daf:	29 c8                	sub    eax,ecx
c0000db1:	01 e8                	add    eax,ebp
c0000db3:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000db9:	89 f2                	mov    edx,esi
c0000dbb:	83 e2 07             	and    edx,0x7
c0000dbe:	74 0c                	je     c0000dcc <sYSMALLOc+0x123>
c0000dc0:	b8 08 00 00 00       	mov    eax,0x8
c0000dc5:	29 d0                	sub    eax,edx
c0000dc7:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000dca:	eb 04                	jmp    c0000dd0 <sYSMALLOc+0x127>
c0000dcc:	89 f5                	mov    ebp,esi
c0000dce:	31 c0                	xor    eax,eax
c0000dd0:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000dd4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000dd8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000ddc:	01 c1                	add    ecx,eax
c0000dde:	83 ec 0c             	sub    esp,0xc
c0000de1:	01 f1                	add    ecx,esi
c0000de3:	01 ca                	add    edx,ecx
c0000de5:	29 c8                	sub    eax,ecx
c0000de7:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000deb:	01 c2                	add    edx,eax
c0000ded:	52                   	push   edx
c0000dee:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000df2:	e8 8c b0 00 00       	call   c000be83 <sbrk>
c0000df7:	83 c4 10             	add    esp,0x10
c0000dfa:	83 f8 ff             	cmp    eax,0xffffffff
c0000dfd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000e01:	75 0f                	jne    c0000e12 <sYSMALLOc+0x169>
c0000e03:	83 ec 0c             	sub    esp,0xc
c0000e06:	6a 00                	push   0x0
c0000e08:	e8 76 b0 00 00       	call   c000be83 <sbrk>
c0000e0d:	83 c4 10             	add    esp,0x10
c0000e10:	eb 30                	jmp    c0000e42 <sYSMALLOc+0x199>
c0000e12:	39 c6                	cmp    esi,eax
c0000e14:	76 33                	jbe    c0000e49 <sYSMALLOc+0x1a0>
c0000e16:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000e1a:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000e21:	01 f0                	add    eax,esi
c0000e23:	eb 1d                	jmp    c0000e42 <sYSMALLOc+0x199>
c0000e25:	83 ec 0c             	sub    esp,0xc
c0000e28:	89 f5                	mov    ebp,esi
c0000e2a:	6a 00                	push   0x0
c0000e2c:	e8 52 b0 00 00       	call   c000be83 <sbrk>
c0000e31:	89 c2                	mov    edx,eax
c0000e33:	29 f2                	sub    edx,esi
c0000e35:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000e39:	83 c4 10             	add    esp,0x10
c0000e3c:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000e42:	31 d2                	xor    edx,edx
c0000e44:	83 f8 ff             	cmp    eax,0xffffffff
c0000e47:	74 66                	je     c0000eaf <sYSMALLOc+0x206>
c0000e49:	29 e8                	sub    eax,ebp
c0000e4b:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000e4e:	01 d0                	add    eax,edx
c0000e50:	83 c8 01             	or     eax,0x1
c0000e53:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000e56:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000e5c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000e61:	74 4c                	je     c0000eaf <sYSMALLOc+0x206>
c0000e63:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000e67:	83 e8 0c             	sub    eax,0xc
c0000e6a:	83 e0 f8             	and    eax,0xfffffff8
c0000e6d:	89 c2                	mov    edx,eax
c0000e6f:	83 ca 01             	or     edx,0x1
c0000e72:	83 f8 0f             	cmp    eax,0xf
c0000e75:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000e78:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000e80:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000e88:	76 25                	jbe    c0000eaf <sYSMALLOc+0x206>
c0000e8a:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000e90:	83 ec 0c             	sub    esp,0xc
c0000e93:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000e9d:	83 c7 08             	add    edi,0x8
c0000ea0:	57                   	push   edi
c0000ea1:	e8 0e fd ff ff       	call   c0000bb4 <dlfree>
c0000ea6:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000eac:	83 c4 10             	add    esp,0x10
c0000eaf:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000eb5:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000ebb:	73 06                	jae    c0000ec3 <sYSMALLOc+0x21a>
c0000ebd:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000ec3:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000ec9:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000ecf:	73 06                	jae    c0000ed7 <sYSMALLOc+0x22e>
c0000ed1:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000ed7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000eda:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000edd:	83 e2 fc             	and    edx,0xfffffffc
c0000ee0:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000ee4:	0f 82 3c fe ff ff    	jb     c0000d26 <sYSMALLOc+0x7d>
c0000eea:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000eee:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000ef1:	29 fa                	sub    edx,edi
c0000ef3:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000ef6:	83 ca 01             	or     edx,0x1
c0000ef9:	89 fb                	mov    ebx,edi
c0000efb:	83 c0 08             	add    eax,0x8
c0000efe:	83 cb 01             	or     ebx,0x1
c0000f01:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0000f04:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0000f07:	83 c4 2c             	add    esp,0x2c
c0000f0a:	5b                   	pop    ebx
c0000f0b:	5e                   	pop    esi
c0000f0c:	5f                   	pop    edi
c0000f0d:	5d                   	pop    ebp
c0000f0e:	c3                   	ret    

c0000f0f <dlmalloc>:
c0000f0f:	55                   	push   ebp
c0000f10:	57                   	push   edi
c0000f11:	56                   	push   esi
c0000f12:	53                   	push   ebx
c0000f13:	83 ec 1c             	sub    esp,0x1c
c0000f16:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0000f1a:	83 f8 df             	cmp    eax,0xffffffdf
c0000f1d:	0f 87 70 03 00 00    	ja     c0001293 <dlmalloc+0x384>
c0000f23:	83 c0 0b             	add    eax,0xb
c0000f26:	be 10 00 00 00       	mov    esi,0x10
c0000f2b:	83 f8 0f             	cmp    eax,0xf
c0000f2e:	76 05                	jbe    c0000f35 <dlmalloc+0x26>
c0000f30:	83 e0 f8             	and    eax,0xfffffff8
c0000f33:	89 c6                	mov    esi,eax
c0000f35:	8b 3d 80 3f 02 c0    	mov    edi,DWORD PTR ds:0xc0023f80
c0000f3b:	f7 c7 01 00 00 00    	test   edi,0x1
c0000f41:	75 17                	jne    c0000f5a <dlmalloc+0x4b>
c0000f43:	85 ff                	test   edi,edi
c0000f45:	0f 85 05 03 00 00    	jne    c0001250 <dlmalloc+0x341>
c0000f4b:	b8 80 3f 02 c0       	mov    eax,0xc0023f80
c0000f50:	e8 78 fb ff ff       	call   c0000acd <malloc_consolidate>
c0000f55:	e9 f6 02 00 00       	jmp    c0001250 <dlmalloc+0x341>
c0000f5a:	39 f7                	cmp    edi,esi
c0000f5c:	72 1f                	jb     c0000f7d <dlmalloc+0x6e>
c0000f5e:	89 f2                	mov    edx,esi
c0000f60:	c1 ea 03             	shr    edx,0x3
c0000f63:	83 ea 02             	sub    edx,0x2
c0000f66:	8b 04 95 84 3f 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdc07c]
c0000f6d:	85 c0                	test   eax,eax
c0000f6f:	74 0c                	je     c0000f7d <dlmalloc+0x6e>
c0000f71:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0000f74:	89 0c 95 84 3f 02 c0 	mov    DWORD PTR [edx*4-0x3ffdc07c],ecx
c0000f7b:	eb 30                	jmp    c0000fad <dlmalloc+0x9e>
c0000f7d:	89 f0                	mov    eax,esi
c0000f7f:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000f85:	77 2e                	ja     c0000fb5 <dlmalloc+0xa6>
c0000f87:	c1 e8 03             	shr    eax,0x3
c0000f8a:	8d 14 c5 b4 3f 02 c0 	lea    edx,[eax*8-0x3ffdc04c]
c0000f91:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000f95:	8d 5a f8             	lea    ebx,[edx-0x8]
c0000f98:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0000f9b:	39 c3                	cmp    ebx,eax
c0000f9d:	74 2e                	je     c0000fcd <dlmalloc+0xbe>
c0000f9f:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0000fa2:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0000fa7:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000faa:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0000fad:	83 c0 08             	add    eax,0x8
c0000fb0:	e9 e0 02 00 00       	jmp    c0001295 <dlmalloc+0x386>
c0000fb5:	e8 8f fa ff ff       	call   c0000a49 <largebin_index>
c0000fba:	83 e7 02             	and    edi,0x2
c0000fbd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000fc1:	74 0a                	je     c0000fcd <dlmalloc+0xbe>
c0000fc3:	b8 80 3f 02 c0       	mov    eax,0xc0023f80
c0000fc8:	e8 00 fb ff ff       	call   c0000acd <malloc_consolidate>
c0000fcd:	8d 46 10             	lea    eax,[esi+0x10]
c0000fd0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000fd4:	8b 1d c0 3f 02 c0    	mov    ebx,DWORD PTR ds:0xc0023fc0
c0000fda:	81 fb b4 3f 02 c0    	cmp    ebx,0xc0023fb4
c0000fe0:	0f 84 13 01 00 00    	je     c00010f9 <dlmalloc+0x1ea>
c0000fe6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0000fe9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0000fec:	83 e7 fc             	and    edi,0xfffffffc
c0000fef:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000ff5:	77 4c                	ja     c0001043 <dlmalloc+0x134>
c0000ff7:	3d b4 3f 02 c0       	cmp    eax,0xc0023fb4
c0000ffc:	75 45                	jne    c0001043 <dlmalloc+0x134>
c0000ffe:	39 1d b0 3f 02 c0    	cmp    DWORD PTR ds:0xc0023fb0,ebx
c0001004:	75 3d                	jne    c0001043 <dlmalloc+0x134>
c0001006:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000100a:	73 37                	jae    c0001043 <dlmalloc+0x134>
c000100c:	8d 04 33             	lea    eax,[ebx+esi*1]
c000100f:	89 fa                	mov    edx,edi
c0001011:	a3 bc 3f 02 c0       	mov    ds:0xc0023fbc,eax
c0001016:	a3 c0 3f 02 c0       	mov    ds:0xc0023fc0,eax
c000101b:	a3 b0 3f 02 c0       	mov    ds:0xc0023fb0,eax
c0001020:	29 f2                	sub    edx,esi
c0001022:	c7 40 08 b4 3f 02 c0 	mov    DWORD PTR [eax+0x8],0xc0023fb4
c0001029:	c7 40 0c b4 3f 02 c0 	mov    DWORD PTR [eax+0xc],0xc0023fb4
c0001030:	83 ce 01             	or     esi,0x1
c0001033:	89 d1                	mov    ecx,edx
c0001035:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001038:	83 c9 01             	or     ecx,0x1
c000103b:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000103e:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001041:	eb 15                	jmp    c0001058 <dlmalloc+0x149>
c0001043:	a3 c0 3f 02 c0       	mov    ds:0xc0023fc0,eax
c0001048:	39 fe                	cmp    esi,edi
c000104a:	c7 40 08 b4 3f 02 c0 	mov    DWORD PTR [eax+0x8],0xc0023fb4
c0001051:	75 0d                	jne    c0001060 <dlmalloc+0x151>
c0001053:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001058:	8d 43 08             	lea    eax,[ebx+0x8]
c000105b:	e9 35 02 00 00       	jmp    c0001295 <dlmalloc+0x386>
c0001060:	89 f8                	mov    eax,edi
c0001062:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001068:	77 19                	ja     c0001083 <dlmalloc+0x174>
c000106a:	c1 e8 03             	shr    eax,0x3
c000106d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001070:	83 c2 0d             	add    edx,0xd
c0001073:	8d 2c 95 78 3f 02 c0 	lea    ebp,[edx*4-0x3ffdc088]
c000107a:	8b 14 95 80 3f 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc080]
c0001081:	eb 46                	jmp    c00010c9 <dlmalloc+0x1ba>
c0001083:	e8 c1 f9 ff ff       	call   c0000a49 <largebin_index>
c0001088:	8d 14 00             	lea    edx,[eax+eax*1]
c000108b:	83 c2 0d             	add    edx,0xd
c000108e:	8d 0c 95 80 3f 02 c0 	lea    ecx,[edx*4-0x3ffdc080]
c0001095:	8b 14 95 80 3f 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc080]
c000109c:	8d 69 f8             	lea    ebp,[ecx-0x8]
c000109f:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00010a3:	89 d5                	mov    ebp,edx
c00010a5:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00010a9:	74 1e                	je     c00010c9 <dlmalloc+0x1ba>
c00010ab:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00010ae:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00010b1:	77 12                	ja     c00010c5 <dlmalloc+0x1b6>
c00010b3:	83 cf 01             	or     edi,0x1
c00010b6:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00010b9:	76 05                	jbe    c00010c0 <dlmalloc+0x1b1>
c00010bb:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00010be:	eb f6                	jmp    c00010b6 <dlmalloc+0x1a7>
c00010c0:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00010c3:	eb 04                	jmp    c00010c9 <dlmalloc+0x1ba>
c00010c5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00010c9:	89 c7                	mov    edi,eax
c00010cb:	88 c1                	mov    cl,al
c00010cd:	c1 ff 05             	sar    edi,0x5
c00010d0:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00010d4:	bf 01 00 00 00       	mov    edi,0x1
c00010d9:	d3 e7                	shl    edi,cl
c00010db:	89 f8                	mov    eax,edi
c00010dd:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00010e1:	09 04 bd b4 42 02 c0 	or     DWORD PTR [edi*4-0x3ffdbd4c],eax
c00010e8:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00010eb:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00010ee:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00010f1:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00010f4:	e9 db fe ff ff       	jmp    c0000fd4 <dlmalloc+0xc5>
c00010f9:	81 fe ff 00 00 00    	cmp    esi,0xff
c00010ff:	76 78                	jbe    c0001179 <dlmalloc+0x26a>
c0001101:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001105:	8d 04 c5 b4 3f 02 c0 	lea    eax,[eax*8-0x3ffdc04c]
c000110c:	8d 48 f8             	lea    ecx,[eax-0x8]
c000110f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001112:	39 ca                	cmp    edx,ecx
c0001114:	74 63                	je     c0001179 <dlmalloc+0x26a>
c0001116:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001119:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000111c:	83 e3 fc             	and    ebx,0xfffffffc
c000111f:	39 de                	cmp    esi,ebx
c0001121:	77 52                	ja     c0001175 <dlmalloc+0x266>
c0001123:	89 df                	mov    edi,ebx
c0001125:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001128:	29 f7                	sub    edi,esi
c000112a:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000112d:	01 d3                	add    ebx,edx
c000112f:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001132:	83 ff 0f             	cmp    edi,0xf
c0001135:	8d 42 08             	lea    eax,[edx+0x8]
c0001138:	77 09                	ja     c0001143 <dlmalloc+0x234>
c000113a:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c000113e:	e9 52 01 00 00       	jmp    c0001295 <dlmalloc+0x386>
c0001143:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001146:	83 ce 01             	or     esi,0x1
c0001149:	89 0d bc 3f 02 c0    	mov    DWORD PTR ds:0xc0023fbc,ecx
c000114f:	89 0d c0 3f 02 c0    	mov    DWORD PTR ds:0xc0023fc0,ecx
c0001155:	c7 41 08 b4 3f 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0023fb4
c000115c:	c7 41 0c b4 3f 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0023fb4
c0001163:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001166:	89 fa                	mov    edx,edi
c0001168:	83 ca 01             	or     edx,0x1
c000116b:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000116e:	89 3b                	mov    DWORD PTR [ebx],edi
c0001170:	e9 20 01 00 00       	jmp    c0001295 <dlmalloc+0x386>
c0001175:	89 c2                	mov    edx,eax
c0001177:	eb 99                	jmp    c0001112 <dlmalloc+0x203>
c0001179:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000117d:	b8 01 00 00 00       	mov    eax,0x1
c0001182:	41                   	inc    ecx
c0001183:	89 cb                	mov    ebx,ecx
c0001185:	8d 14 cd ac 3f 02 c0 	lea    edx,[ecx*8-0x3ffdc054]
c000118c:	c1 eb 05             	shr    ebx,0x5
c000118f:	d3 e0                	shl    eax,cl
c0001191:	8b 3c 9d b4 42 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdbd4c]
c0001198:	39 f8                	cmp    eax,edi
c000119a:	77 04                	ja     c00011a0 <dlmalloc+0x291>
c000119c:	85 c0                	test   eax,eax
c000119e:	75 26                	jne    c00011c6 <dlmalloc+0x2b7>
c00011a0:	43                   	inc    ebx
c00011a1:	83 fb 02             	cmp    ebx,0x2
c00011a4:	0f 87 a6 00 00 00    	ja     c0001250 <dlmalloc+0x341>
c00011aa:	8b 3c 9d b4 42 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdbd4c]
c00011b1:	85 ff                	test   edi,edi
c00011b3:	74 eb                	je     c00011a0 <dlmalloc+0x291>
c00011b5:	89 d8                	mov    eax,ebx
c00011b7:	c1 e0 06             	shl    eax,0x6
c00011ba:	8d 14 85 ac 3f 02 c0 	lea    edx,[eax*4-0x3ffdc054]
c00011c1:	b8 01 00 00 00       	mov    eax,0x1
c00011c6:	85 f8                	test   eax,edi
c00011c8:	75 07                	jne    c00011d1 <dlmalloc+0x2c2>
c00011ca:	83 c2 08             	add    edx,0x8
c00011cd:	01 c0                	add    eax,eax
c00011cf:	eb f5                	jmp    c00011c6 <dlmalloc+0x2b7>
c00011d1:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00011d4:	39 ca                	cmp    edx,ecx
c00011d6:	75 14                	jne    c00011ec <dlmalloc+0x2dd>
c00011d8:	89 c1                	mov    ecx,eax
c00011da:	83 c2 08             	add    edx,0x8
c00011dd:	f7 d1                	not    ecx
c00011df:	01 c0                	add    eax,eax
c00011e1:	21 cf                	and    edi,ecx
c00011e3:	89 3c 9d b4 42 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdbd4c],edi
c00011ea:	eb ac                	jmp    c0001198 <dlmalloc+0x289>
c00011ec:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00011ef:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00011f2:	83 e0 fc             	and    eax,0xfffffffc
c00011f5:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00011f8:	89 c3                	mov    ebx,eax
c00011fa:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00011fd:	29 f3                	sub    ebx,esi
c00011ff:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001202:	83 fb 0f             	cmp    ebx,0xf
c0001205:	8d 41 08             	lea    eax,[ecx+0x8]
c0001208:	77 09                	ja     c0001213 <dlmalloc+0x304>
c000120a:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c000120e:	e9 82 00 00 00       	jmp    c0001295 <dlmalloc+0x386>
c0001213:	8d 3c 31             	lea    edi,[ecx+esi*1]
c0001216:	81 fe ff 00 00 00    	cmp    esi,0xff
c000121c:	89 3d bc 3f 02 c0    	mov    DWORD PTR ds:0xc0023fbc,edi
c0001222:	89 3d c0 3f 02 c0    	mov    DWORD PTR ds:0xc0023fc0,edi
c0001228:	c7 47 08 b4 3f 02 c0 	mov    DWORD PTR [edi+0x8],0xc0023fb4
c000122f:	c7 47 0c b4 3f 02 c0 	mov    DWORD PTR [edi+0xc],0xc0023fb4
c0001236:	77 06                	ja     c000123e <dlmalloc+0x32f>
c0001238:	89 3d b0 3f 02 c0    	mov    DWORD PTR ds:0xc0023fb0,edi
c000123e:	83 ce 01             	or     esi,0x1
c0001241:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001244:	89 d9                	mov    ecx,ebx
c0001246:	83 c9 01             	or     ecx,0x1
c0001249:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c000124c:	89 1a                	mov    DWORD PTR [edx],ebx
c000124e:	eb 45                	jmp    c0001295 <dlmalloc+0x386>
c0001250:	a1 ac 3f 02 c0       	mov    eax,ds:0xc0023fac
c0001255:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001258:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000125b:	83 e2 fc             	and    edx,0xfffffffc
c000125e:	39 d1                	cmp    ecx,edx
c0001260:	77 1e                	ja     c0001280 <dlmalloc+0x371>
c0001262:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001265:	89 f3                	mov    ebx,esi
c0001267:	89 0d ac 3f 02 c0    	mov    DWORD PTR ds:0xc0023fac,ecx
c000126d:	83 cb 01             	or     ebx,0x1
c0001270:	29 f2                	sub    edx,esi
c0001272:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001275:	83 ca 01             	or     edx,0x1
c0001278:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000127b:	e9 2d fd ff ff       	jmp    c0000fad <dlmalloc+0x9e>
c0001280:	83 c4 1c             	add    esp,0x1c
c0001283:	89 f0                	mov    eax,esi
c0001285:	5b                   	pop    ebx
c0001286:	ba 80 3f 02 c0       	mov    edx,0xc0023f80
c000128b:	5e                   	pop    esi
c000128c:	5f                   	pop    edi
c000128d:	5d                   	pop    ebp
c000128e:	e9 16 fa ff ff       	jmp    c0000ca9 <sYSMALLOc>
c0001293:	31 c0                	xor    eax,eax
c0001295:	83 c4 1c             	add    esp,0x1c
c0001298:	5b                   	pop    ebx
c0001299:	5e                   	pop    esi
c000129a:	5f                   	pop    edi
c000129b:	5d                   	pop    ebp
c000129c:	c3                   	ret    

c000129d <iALLOc>:
c000129d:	55                   	push   ebp
c000129e:	89 c5                	mov    ebp,eax
c00012a0:	57                   	push   edi
c00012a1:	56                   	push   esi
c00012a2:	53                   	push   ebx
c00012a3:	83 ec 2c             	sub    esp,0x2c
c00012a6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00012aa:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00012ae:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00012b2:	83 3d 80 3f 02 c0 00 	cmp    DWORD PTR ds:0xc0023f80,0x0
c00012b9:	75 12                	jne    c00012cd <iALLOc+0x30>
c00012bb:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00012bf:	b8 80 3f 02 c0       	mov    eax,0xc0023f80
c00012c4:	e8 04 f8 ff ff       	call   c0000acd <malloc_consolidate>
c00012c9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00012cd:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00012d2:	74 12                	je     c00012e6 <iALLOc+0x49>
c00012d4:	85 ed                	test   ebp,ebp
c00012d6:	0f 84 64 01 00 00    	je     c0001440 <iALLOc+0x1a3>
c00012dc:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00012e4:	eb 33                	jmp    c0001319 <iALLOc+0x7c>
c00012e6:	85 ed                	test   ebp,ebp
c00012e8:	75 14                	jne    c00012fe <iALLOc+0x61>
c00012ea:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00012f2:	83 c4 2c             	add    esp,0x2c
c00012f5:	5b                   	pop    ebx
c00012f6:	5e                   	pop    esi
c00012f7:	5f                   	pop    edi
c00012f8:	5d                   	pop    ebp
c00012f9:	e9 11 fc ff ff       	jmp    c0000f0f <dlmalloc>
c00012fe:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c0001305:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c000130d:	83 f8 0f             	cmp    eax,0xf
c0001310:	76 07                	jbe    c0001319 <iALLOc+0x7c>
c0001312:	83 e0 f8             	and    eax,0xfffffff8
c0001315:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001319:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c000131e:	75 09                	jne    c0001329 <iALLOc+0x8c>
c0001320:	89 d0                	mov    eax,edx
c0001322:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001325:	31 f6                	xor    esi,esi
c0001327:	eb 3b                	jmp    c0001364 <iALLOc+0xc7>
c0001329:	8b 02                	mov    eax,DWORD PTR [edx]
c000132b:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001333:	83 c0 0b             	add    eax,0xb
c0001336:	83 f8 0f             	cmp    eax,0xf
c0001339:	76 07                	jbe    c0001342 <iALLOc+0xa5>
c000133b:	83 e0 f8             	and    eax,0xfffffff8
c000133e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001342:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001346:	0f af f5             	imul   esi,ebp
c0001349:	eb 25                	jmp    c0001370 <iALLOc+0xd3>
c000134b:	8b 18                	mov    ebx,DWORD PTR [eax]
c000134d:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001350:	bb 10 00 00 00       	mov    ebx,0x10
c0001355:	83 f9 0f             	cmp    ecx,0xf
c0001358:	76 05                	jbe    c000135f <iALLOc+0xc2>
c000135a:	83 e1 f8             	and    ecx,0xfffffff8
c000135d:	89 cb                	mov    ebx,ecx
c000135f:	01 de                	add    esi,ebx
c0001361:	83 c0 04             	add    eax,0x4
c0001364:	39 c7                	cmp    edi,eax
c0001366:	75 e3                	jne    c000134b <iALLOc+0xae>
c0001368:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001370:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001374:	8b 1d d4 42 02 c0    	mov    ebx,DWORD PTR ds:0xc00242d4
c000137a:	83 ec 0c             	sub    esp,0xc
c000137d:	c7 05 d4 42 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00242d4,0x0
c0001387:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000138b:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000138f:	50                   	push   eax
c0001390:	e8 7a fb ff ff       	call   c0000f0f <dlmalloc>
c0001395:	83 c4 10             	add    esp,0x10
c0001398:	89 1d d4 42 02 c0    	mov    DWORD PTR ds:0xc00242d4,ebx
c000139e:	85 c0                	test   eax,eax
c00013a0:	0f 84 92 00 00 00    	je     c0001438 <iALLOc+0x19b>
c00013a6:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00013a9:	8d 78 f8             	lea    edi,[eax-0x8]
c00013ac:	83 e3 fc             	and    ebx,0xfffffffc
c00013af:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00013b3:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00013b8:	74 1e                	je     c00013d8 <iALLOc+0x13b>
c00013ba:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00013be:	89 d9                	mov    ecx,ebx
c00013c0:	52                   	push   edx
c00013c1:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00013c5:	83 e9 04             	sub    ecx,0x4
c00013c8:	51                   	push   ecx
c00013c9:	6a 00                	push   0x0
c00013cb:	50                   	push   eax
c00013cc:	e8 02 f3 ff ff       	call   c00006d3 <memset>
c00013d1:	83 c4 10             	add    esp,0x10
c00013d4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00013d8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00013dd:	75 14                	jne    c00013f3 <iALLOc+0x156>
c00013df:	8d 04 37             	lea    eax,[edi+esi*1]
c00013e2:	29 f3                	sub    ebx,esi
c00013e4:	8d 48 08             	lea    ecx,[eax+0x8]
c00013e7:	83 cb 01             	or     ebx,0x1
c00013ea:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00013ee:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00013f1:	89 f3                	mov    ebx,esi
c00013f3:	31 c0                	xor    eax,eax
c00013f5:	4d                   	dec    ebp
c00013f6:	8d 4f 08             	lea    ecx,[edi+0x8]
c00013f9:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00013fd:	39 c5                	cmp    ebp,eax
c00013ff:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c0001402:	74 2c                	je     c0001430 <iALLOc+0x193>
c0001404:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001408:	85 c9                	test   ecx,ecx
c000140a:	75 15                	jne    c0001421 <iALLOc+0x184>
c000140c:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c000140f:	8d 71 0b             	lea    esi,[ecx+0xb]
c0001412:	b9 10 00 00 00       	mov    ecx,0x10
c0001417:	83 fe 0f             	cmp    esi,0xf
c000141a:	76 05                	jbe    c0001421 <iALLOc+0x184>
c000141c:	83 e6 f8             	and    esi,0xfffffff8
c000141f:	89 f1                	mov    ecx,esi
c0001421:	89 ce                	mov    esi,ecx
c0001423:	29 cb                	sub    ebx,ecx
c0001425:	83 ce 01             	or     esi,0x1
c0001428:	40                   	inc    eax
c0001429:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000142c:	01 cf                	add    edi,ecx
c000142e:	eb c6                	jmp    c00013f6 <iALLOc+0x159>
c0001430:	83 cb 01             	or     ebx,0x1
c0001433:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001436:	eb 08                	jmp    c0001440 <iALLOc+0x1a3>
c0001438:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001440:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001444:	83 c4 2c             	add    esp,0x2c
c0001447:	5b                   	pop    ebx
c0001448:	5e                   	pop    esi
c0001449:	5f                   	pop    edi
c000144a:	5d                   	pop    ebp
c000144b:	c3                   	ret    

c000144c <dlrealloc>:
c000144c:	55                   	push   ebp
c000144d:	57                   	push   edi
c000144e:	56                   	push   esi
c000144f:	53                   	push   ebx
c0001450:	83 ec 1c             	sub    esp,0x1c
c0001453:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001457:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000145b:	85 db                	test   ebx,ebx
c000145d:	75 10                	jne    c000146f <dlrealloc+0x23>
c000145f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001463:	83 c4 1c             	add    esp,0x1c
c0001466:	5b                   	pop    ebx
c0001467:	5e                   	pop    esi
c0001468:	5f                   	pop    edi
c0001469:	5d                   	pop    ebp
c000146a:	e9 a0 fa ff ff       	jmp    c0000f0f <dlmalloc>
c000146f:	83 f8 df             	cmp    eax,0xffffffdf
c0001472:	76 07                	jbe    c000147b <dlrealloc+0x2f>
c0001474:	31 db                	xor    ebx,ebx
c0001476:	e9 7c 01 00 00       	jmp    c00015f7 <dlrealloc+0x1ab>
c000147b:	83 c0 0b             	add    eax,0xb
c000147e:	bf 10 00 00 00       	mov    edi,0x10
c0001483:	83 f8 0f             	cmp    eax,0xf
c0001486:	76 05                	jbe    c000148d <dlrealloc+0x41>
c0001488:	83 e0 f8             	and    eax,0xfffffff8
c000148b:	89 c7                	mov    edi,eax
c000148d:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001490:	8d 6b f8             	lea    ebp,[ebx-0x8]
c0001493:	89 c6                	mov    esi,eax
c0001495:	83 e6 fc             	and    esi,0xfffffffc
c0001498:	a8 02                	test   al,0x2
c000149a:	75 d8                	jne    c0001474 <dlrealloc+0x28>
c000149c:	39 f7                	cmp    edi,esi
c000149e:	0f 86 15 01 00 00    	jbe    c00015b9 <dlrealloc+0x16d>
c00014a4:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c00014a8:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00014ab:	39 15 ac 3f 02 c0    	cmp    DWORD PTR ds:0xc0023fac,edx
c00014b1:	75 33                	jne    c00014e6 <dlrealloc+0x9a>
c00014b3:	83 e1 fc             	and    ecx,0xfffffffc
c00014b6:	01 f1                	add    ecx,esi
c00014b8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00014bc:	8d 4f 10             	lea    ecx,[edi+0x10]
c00014bf:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00014c3:	77 49                	ja     c000150e <dlrealloc+0xc2>
c00014c5:	01 fd                	add    ebp,edi
c00014c7:	83 e0 01             	and    eax,0x1
c00014ca:	09 f8                	or     eax,edi
c00014cc:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00014cf:	89 2d ac 3f 02 c0    	mov    DWORD PTR ds:0xc0023fac,ebp
c00014d5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00014d9:	29 f8                	sub    eax,edi
c00014db:	83 c8 01             	or     eax,0x1
c00014de:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00014e1:	e9 11 01 00 00       	jmp    c00015f7 <dlrealloc+0x1ab>
c00014e6:	89 c8                	mov    eax,ecx
c00014e8:	83 e0 fe             	and    eax,0xfffffffe
c00014eb:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00014f0:	75 1c                	jne    c000150e <dlrealloc+0xc2>
c00014f2:	83 e1 fc             	and    ecx,0xfffffffc
c00014f5:	01 f1                	add    ecx,esi
c00014f7:	39 cf                	cmp    edi,ecx
c00014f9:	77 13                	ja     c000150e <dlrealloc+0xc2>
c00014fb:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00014fe:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001501:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c0001504:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c0001507:	89 ce                	mov    esi,ecx
c0001509:	e9 ab 00 00 00       	jmp    c00015b9 <dlrealloc+0x16d>
c000150e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001512:	8d 47 f9             	lea    eax,[edi-0x7]
c0001515:	83 ec 0c             	sub    esp,0xc
c0001518:	50                   	push   eax
c0001519:	e8 f1 f9 ff ff       	call   c0000f0f <dlmalloc>
c000151e:	83 c4 10             	add    esp,0x10
c0001521:	89 c1                	mov    ecx,eax
c0001523:	85 c0                	test   eax,eax
c0001525:	0f 84 49 ff ff ff    	je     c0001474 <dlrealloc+0x28>
c000152b:	8d 40 f8             	lea    eax,[eax-0x8]
c000152e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001532:	39 c2                	cmp    edx,eax
c0001534:	75 0a                	jne    c0001540 <dlrealloc+0xf4>
c0001536:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001539:	83 e0 fc             	and    eax,0xfffffffc
c000153c:	01 c6                	add    esi,eax
c000153e:	eb 79                	jmp    c00015b9 <dlrealloc+0x16d>
c0001540:	83 ee 04             	sub    esi,0x4
c0001543:	83 fe 27             	cmp    esi,0x27
c0001546:	76 16                	jbe    c000155e <dlrealloc+0x112>
c0001548:	50                   	push   eax
c0001549:	56                   	push   esi
c000154a:	53                   	push   ebx
c000154b:	51                   	push   ecx
c000154c:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0001550:	e8 48 f1 ff ff       	call   c000069d <memcpy>
c0001555:	83 c4 10             	add    esp,0x10
c0001558:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000155c:	eb 43                	jmp    c00015a1 <dlrealloc+0x155>
c000155e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0001560:	83 fe 13             	cmp    esi,0x13
c0001563:	89 01                	mov    DWORD PTR [ecx],eax
c0001565:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0001568:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
c000156b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000156e:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0001571:	76 2e                	jbe    c00015a1 <dlrealloc+0x155>
c0001573:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001576:	83 fe 1b             	cmp    esi,0x1b
c0001579:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000157c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000157f:	89 41 10             	mov    DWORD PTR [ecx+0x10],eax
c0001582:	76 1d                	jbe    c00015a1 <dlrealloc+0x155>
c0001584:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0001587:	83 fe 23             	cmp    esi,0x23
c000158a:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000158d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0001590:	89 41 18             	mov    DWORD PTR [ecx+0x18],eax
c0001593:	76 0c                	jbe    c00015a1 <dlrealloc+0x155>
c0001595:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0001598:	89 41 1c             	mov    DWORD PTR [ecx+0x1c],eax
c000159b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c000159e:	89 41 20             	mov    DWORD PTR [ecx+0x20],eax
c00015a1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015a5:	83 ec 0c             	sub    esp,0xc
c00015a8:	53                   	push   ebx
c00015a9:	e8 06 f6 ff ff       	call   c0000bb4 <dlfree>
c00015ae:	83 c4 10             	add    esp,0x10
c00015b1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00015b5:	89 cb                	mov    ebx,ecx
c00015b7:	eb 3e                	jmp    c00015f7 <dlrealloc+0x1ab>
c00015b9:	89 f2                	mov    edx,esi
c00015bb:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00015be:	29 fa                	sub    edx,edi
c00015c0:	83 e1 01             	and    ecx,0x1
c00015c3:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c00015c7:	83 fa 0f             	cmp    edx,0xf
c00015ca:	77 0b                	ja     c00015d7 <dlrealloc+0x18b>
c00015cc:	09 ce                	or     esi,ecx
c00015ce:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00015d1:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00015d5:	eb 20                	jmp    c00015f7 <dlrealloc+0x1ab>
c00015d7:	01 fd                	add    ebp,edi
c00015d9:	83 ec 0c             	sub    esp,0xc
c00015dc:	09 cf                	or     edi,ecx
c00015de:	83 ca 01             	or     edx,0x1
c00015e1:	89 7b fc             	mov    DWORD PTR [ebx-0x4],edi
c00015e4:	83 c5 08             	add    ebp,0x8
c00015e7:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
c00015ea:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00015ee:	55                   	push   ebp
c00015ef:	e8 c0 f5 ff ff       	call   c0000bb4 <dlfree>
c00015f4:	83 c4 10             	add    esp,0x10
c00015f7:	83 c4 1c             	add    esp,0x1c
c00015fa:	89 d8                	mov    eax,ebx
c00015fc:	5b                   	pop    ebx
c00015fd:	5e                   	pop    esi
c00015fe:	5f                   	pop    edi
c00015ff:	5d                   	pop    ebp
c0001600:	c3                   	ret    

c0001601 <dlmemalign>:
c0001601:	55                   	push   ebp
c0001602:	57                   	push   edi
c0001603:	56                   	push   esi
c0001604:	53                   	push   ebx
c0001605:	83 ec 0c             	sub    esp,0xc
c0001608:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000160c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001610:	83 fa 08             	cmp    edx,0x8
c0001613:	77 10                	ja     c0001625 <dlmemalign+0x24>
c0001615:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0001619:	83 c4 0c             	add    esp,0xc
c000161c:	5b                   	pop    ebx
c000161d:	5e                   	pop    esi
c000161e:	5f                   	pop    edi
c000161f:	5d                   	pop    ebp
c0001620:	e9 ea f8 ff ff       	jmp    c0000f0f <dlmalloc>
c0001625:	bf 10 00 00 00       	mov    edi,0x10
c000162a:	83 fa 0f             	cmp    edx,0xf
c000162d:	76 13                	jbe    c0001642 <dlmemalign+0x41>
c000162f:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001632:	85 d1                	test   ecx,edx
c0001634:	75 04                	jne    c000163a <dlmemalign+0x39>
c0001636:	89 d7                	mov    edi,edx
c0001638:	eb 08                	jmp    c0001642 <dlmemalign+0x41>
c000163a:	39 d7                	cmp    edi,edx
c000163c:	73 04                	jae    c0001642 <dlmemalign+0x41>
c000163e:	01 ff                	add    edi,edi
c0001640:	eb f8                	jmp    c000163a <dlmemalign+0x39>
c0001642:	83 f8 df             	cmp    eax,0xffffffdf
c0001645:	76 07                	jbe    c000164e <dlmemalign+0x4d>
c0001647:	31 c0                	xor    eax,eax
c0001649:	e9 ce 00 00 00       	jmp    c000171c <dlmemalign+0x11b>
c000164e:	83 c0 0b             	add    eax,0xb
c0001651:	bd 10 00 00 00       	mov    ebp,0x10
c0001656:	83 f8 0f             	cmp    eax,0xf
c0001659:	76 05                	jbe    c0001660 <dlmemalign+0x5f>
c000165b:	83 e0 f8             	and    eax,0xfffffff8
c000165e:	89 c5                	mov    ebp,eax
c0001660:	83 ec 0c             	sub    esp,0xc
c0001663:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001667:	50                   	push   eax
c0001668:	e8 a2 f8 ff ff       	call   c0000f0f <dlmalloc>
c000166d:	83 c4 10             	add    esp,0x10
c0001670:	89 c1                	mov    ecx,eax
c0001672:	85 c0                	test   eax,eax
c0001674:	74 d1                	je     c0001647 <dlmemalign+0x46>
c0001676:	31 d2                	xor    edx,edx
c0001678:	8d 70 f8             	lea    esi,[eax-0x8]
c000167b:	f7 f7                	div    edi
c000167d:	85 d2                	test   edx,edx
c000167f:	74 62                	je     c00016e3 <dlmemalign+0xe2>
c0001681:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001685:	89 f8                	mov    eax,edi
c0001687:	f7 d8                	neg    eax
c0001689:	21 c3                	and    ebx,eax
c000168b:	83 eb 08             	sub    ebx,0x8
c000168e:	89 d8                	mov    eax,ebx
c0001690:	29 f0                	sub    eax,esi
c0001692:	83 f8 0f             	cmp    eax,0xf
c0001695:	77 02                	ja     c0001699 <dlmemalign+0x98>
c0001697:	01 fb                	add    ebx,edi
c0001699:	89 d8                	mov    eax,ebx
c000169b:	29 f0                	sub    eax,esi
c000169d:	89 c6                	mov    esi,eax
c000169f:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00016a2:	89 c2                	mov    edx,eax
c00016a4:	83 e2 fc             	and    edx,0xfffffffc
c00016a7:	29 f2                	sub    edx,esi
c00016a9:	a8 02                	test   al,0x2
c00016ab:	74 10                	je     c00016bd <dlmemalign+0xbc>
c00016ad:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00016b0:	83 ca 02             	or     edx,0x2
c00016b3:	8d 43 08             	lea    eax,[ebx+0x8]
c00016b6:	89 33                	mov    DWORD PTR [ebx],esi
c00016b8:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00016bb:	eb 5f                	jmp    c000171c <dlmemalign+0x11b>
c00016bd:	83 ec 0c             	sub    esp,0xc
c00016c0:	89 d0                	mov    eax,edx
c00016c2:	83 c8 01             	or     eax,0x1
c00016c5:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00016c8:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00016cd:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00016d0:	83 e0 01             	and    eax,0x1
c00016d3:	09 f0                	or     eax,esi
c00016d5:	89 de                	mov    esi,ebx
c00016d7:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00016da:	51                   	push   ecx
c00016db:	e8 d4 f4 ff ff       	call   c0000bb4 <dlfree>
c00016e0:	83 c4 10             	add    esp,0x10
c00016e3:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00016e6:	a8 02                	test   al,0x2
c00016e8:	75 2f                	jne    c0001719 <dlmemalign+0x118>
c00016ea:	83 e0 fc             	and    eax,0xfffffffc
c00016ed:	8d 55 10             	lea    edx,[ebp+0x10]
c00016f0:	39 c2                	cmp    edx,eax
c00016f2:	73 25                	jae    c0001719 <dlmemalign+0x118>
c00016f4:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00016f7:	83 ec 0c             	sub    esp,0xc
c00016fa:	29 e8                	sub    eax,ebp
c00016fc:	83 c2 08             	add    edx,0x8
c00016ff:	83 c8 01             	or     eax,0x1
c0001702:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c0001705:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001708:	83 e0 01             	and    eax,0x1
c000170b:	09 c5                	or     ebp,eax
c000170d:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001710:	52                   	push   edx
c0001711:	e8 9e f4 ff ff       	call   c0000bb4 <dlfree>
c0001716:	83 c4 10             	add    esp,0x10
c0001719:	8d 46 08             	lea    eax,[esi+0x8]
c000171c:	83 c4 0c             	add    esp,0xc
c000171f:	5b                   	pop    ebx
c0001720:	5e                   	pop    esi
c0001721:	5f                   	pop    edi
c0001722:	5d                   	pop    ebp
c0001723:	c3                   	ret    

c0001724 <dlcalloc>:
c0001724:	53                   	push   ebx
c0001725:	83 ec 14             	sub    esp,0x14
c0001728:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000172c:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001731:	50                   	push   eax
c0001732:	e8 d8 f7 ff ff       	call   c0000f0f <dlmalloc>
c0001737:	83 c4 10             	add    esp,0x10
c000173a:	89 c3                	mov    ebx,eax
c000173c:	85 c0                	test   eax,eax
c000173e:	74 77                	je     c00017b7 <dlcalloc+0x93>
c0001740:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001743:	89 d0                	mov    eax,edx
c0001745:	83 e0 fc             	and    eax,0xfffffffc
c0001748:	80 e2 02             	and    dl,0x2
c000174b:	75 5a                	jne    c00017a7 <dlcalloc+0x83>
c000174d:	83 e8 04             	sub    eax,0x4
c0001750:	83 f8 27             	cmp    eax,0x27
c0001753:	76 03                	jbe    c0001758 <dlcalloc+0x34>
c0001755:	51                   	push   ecx
c0001756:	eb 53                	jmp    c00017ab <dlcalloc+0x87>
c0001758:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000175e:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001765:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000176c:	83 f8 13             	cmp    eax,0x13
c000176f:	76 46                	jbe    c00017b7 <dlcalloc+0x93>
c0001771:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001778:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000177f:	83 f8 1b             	cmp    eax,0x1b
c0001782:	76 33                	jbe    c00017b7 <dlcalloc+0x93>
c0001784:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000178b:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001792:	83 f8 23             	cmp    eax,0x23
c0001795:	76 20                	jbe    c00017b7 <dlcalloc+0x93>
c0001797:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000179e:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00017a5:	eb 10                	jmp    c00017b7 <dlcalloc+0x93>
c00017a7:	83 e8 08             	sub    eax,0x8
c00017aa:	52                   	push   edx
c00017ab:	50                   	push   eax
c00017ac:	6a 00                	push   0x0
c00017ae:	53                   	push   ebx
c00017af:	e8 1f ef ff ff       	call   c00006d3 <memset>
c00017b4:	83 c4 10             	add    esp,0x10
c00017b7:	89 d8                	mov    eax,ebx
c00017b9:	83 c4 08             	add    esp,0x8
c00017bc:	5b                   	pop    ebx
c00017bd:	c3                   	ret    

c00017be <dlcfree>:
c00017be:	e9 f1 f3 ff ff       	jmp    c0000bb4 <dlfree>

c00017c3 <dlindependent_calloc>:
c00017c3:	83 ec 28             	sub    esp,0x28
c00017c6:	b9 03 00 00 00       	mov    ecx,0x3
c00017cb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00017cf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00017d3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00017d7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00017db:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00017df:	e8 b9 fa ff ff       	call   c000129d <iALLOc>
c00017e4:	83 c4 2c             	add    esp,0x2c
c00017e7:	c3                   	ret    

c00017e8 <dlindependent_comalloc>:
c00017e8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00017ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00017f0:	31 c9                	xor    ecx,ecx
c00017f2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00017f6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00017fa:	e9 9e fa ff ff       	jmp    c000129d <iALLOc>

c00017ff <dlvalloc>:
c00017ff:	83 ec 0c             	sub    esp,0xc
c0001802:	83 3d 80 3f 02 c0 00 	cmp    DWORD PTR ds:0xc0023f80,0x0
c0001809:	75 0a                	jne    c0001815 <dlvalloc+0x16>
c000180b:	b8 80 3f 02 c0       	mov    eax,0xc0023f80
c0001810:	e8 b8 f2 ff ff       	call   c0000acd <malloc_consolidate>
c0001815:	50                   	push   eax
c0001816:	50                   	push   eax
c0001817:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000181b:	ff 35 dc 42 02 c0    	push   DWORD PTR ds:0xc00242dc
c0001821:	e8 db fd ff ff       	call   c0001601 <dlmemalign>
c0001826:	83 c4 1c             	add    esp,0x1c
c0001829:	c3                   	ret    

c000182a <dlpvalloc>:
c000182a:	83 ec 0c             	sub    esp,0xc
c000182d:	83 3d 80 3f 02 c0 00 	cmp    DWORD PTR ds:0xc0023f80,0x0
c0001834:	75 0a                	jne    c0001840 <dlpvalloc+0x16>
c0001836:	b8 80 3f 02 c0       	mov    eax,0xc0023f80
c000183b:	e8 8d f2 ff ff       	call   c0000acd <malloc_consolidate>
c0001840:	a1 dc 42 02 c0       	mov    eax,ds:0xc00242dc
c0001845:	89 c1                	mov    ecx,eax
c0001847:	52                   	push   edx
c0001848:	f7 d9                	neg    ecx
c000184a:	52                   	push   edx
c000184b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000184f:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001853:	21 ca                	and    edx,ecx
c0001855:	52                   	push   edx
c0001856:	50                   	push   eax
c0001857:	e8 a5 fd ff ff       	call   c0001601 <dlmemalign>
c000185c:	83 c4 1c             	add    esp,0x1c
c000185f:	c3                   	ret    

c0001860 <dlmalloc_trim>:
c0001860:	b8 80 3f 02 c0       	mov    eax,0xc0023f80
c0001865:	e8 63 f2 ff ff       	call   c0000acd <malloc_consolidate>
c000186a:	31 c0                	xor    eax,eax
c000186c:	c3                   	ret    

c000186d <dlmalloc_usable_size>:
c000186d:	53                   	push   ebx
c000186e:	31 c0                	xor    eax,eax
c0001870:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001874:	85 c9                	test   ecx,ecx
c0001876:	74 24                	je     c000189c <dlmalloc_usable_size+0x2f>
c0001878:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c000187b:	f6 c2 02             	test   dl,0x2
c000187e:	74 08                	je     c0001888 <dlmalloc_usable_size+0x1b>
c0001880:	83 e2 fc             	and    edx,0xfffffffc
c0001883:	8d 42 f8             	lea    eax,[edx-0x8]
c0001886:	eb 14                	jmp    c000189c <dlmalloc_usable_size+0x2f>
c0001888:	89 d3                	mov    ebx,edx
c000188a:	31 c0                	xor    eax,eax
c000188c:	83 e3 fe             	and    ebx,0xfffffffe
c000188f:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001894:	74 06                	je     c000189c <dlmalloc_usable_size+0x2f>
c0001896:	83 e2 fc             	and    edx,0xfffffffc
c0001899:	8d 42 fc             	lea    eax,[edx-0x4]
c000189c:	5b                   	pop    ebx
c000189d:	c3                   	ret    

c000189e <dlmallinfo>:
c000189e:	55                   	push   ebp
c000189f:	57                   	push   edi
c00018a0:	56                   	push   esi
c00018a1:	53                   	push   ebx
c00018a2:	83 ec 08             	sub    esp,0x8
c00018a5:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00018a9:	83 3d ac 3f 02 c0 00 	cmp    DWORD PTR ds:0xc0023fac,0x0
c00018b0:	75 0a                	jne    c00018bc <dlmallinfo+0x1e>
c00018b2:	b8 80 3f 02 c0       	mov    eax,0xc0023f80
c00018b7:	e8 11 f2 ff ff       	call   c0000acd <malloc_consolidate>
c00018bc:	a1 ac 3f 02 c0       	mov    eax,ds:0xc0023fac
c00018c1:	31 ed                	xor    ebp,ebp
c00018c3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00018c6:	31 c9                	xor    ecx,ecx
c00018c8:	83 e0 fc             	and    eax,0xfffffffc
c00018cb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00018cf:	31 c0                	xor    eax,eax
c00018d1:	8b 14 85 84 3f 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdc07c]
c00018d8:	85 d2                	test   edx,edx
c00018da:	74 0e                	je     c00018ea <dlmallinfo+0x4c>
c00018dc:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00018df:	45                   	inc    ebp
c00018e0:	83 e6 fc             	and    esi,0xfffffffc
c00018e3:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00018e6:	01 f1                	add    ecx,esi
c00018e8:	eb ee                	jmp    c00018d8 <dlmallinfo+0x3a>
c00018ea:	40                   	inc    eax
c00018eb:	83 f8 0a             	cmp    eax,0xa
c00018ee:	75 e1                	jne    c00018d1 <dlmallinfo+0x33>
c00018f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018f4:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00018fb:	8d 14 01             	lea    edx,[ecx+eax*1]
c00018fe:	b8 b4 3f 02 c0       	mov    eax,0xc0023fb4
c0001903:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001906:	39 f0                	cmp    eax,esi
c0001908:	74 10                	je     c000191a <dlmallinfo+0x7c>
c000190a:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000190d:	ff 04 24             	inc    DWORD PTR [esp]
c0001910:	83 e7 fc             	and    edi,0xfffffffc
c0001913:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001916:	01 fa                	add    edx,edi
c0001918:	eb ec                	jmp    c0001906 <dlmallinfo+0x68>
c000191a:	83 c0 08             	add    eax,0x8
c000191d:	3d ac 42 02 c0       	cmp    eax,0xc00242ac
c0001922:	75 df                	jne    c0001903 <dlmallinfo+0x65>
c0001924:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001927:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c000192a:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c000192d:	a1 e8 42 02 c0       	mov    eax,ds:0xc00242e8
c0001932:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001935:	89 03                	mov    DWORD PTR [ebx],eax
c0001937:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c000193a:	8b 35 d0 42 02 c0    	mov    esi,DWORD PTR ds:0xc00242d0
c0001940:	29 d0                	sub    eax,edx
c0001942:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001945:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001948:	8b 35 e4 42 02 c0    	mov    esi,DWORD PTR ds:0xc00242e4
c000194e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001952:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001955:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001958:	8b 35 f4 42 02 c0    	mov    esi,DWORD PTR ds:0xc00242f4
c000195e:	89 d8                	mov    eax,ebx
c0001960:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001963:	83 c4 08             	add    esp,0x8
c0001966:	5b                   	pop    ebx
c0001967:	5e                   	pop    esi
c0001968:	5f                   	pop    edi
c0001969:	5d                   	pop    ebp
c000196a:	c2 04 00             	ret    0x4

c000196d <dlmalloc_stats>:
c000196d:	83 ec 30             	sub    esp,0x30
c0001970:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001974:	50                   	push   eax
c0001975:	e8 24 ff ff ff       	call   c000189e <dlmallinfo>
c000197a:	83 c4 30             	add    esp,0x30
c000197d:	c3                   	ret    

c000197e <dlmallopt>:
c000197e:	56                   	push   esi
c000197f:	b8 80 3f 02 c0       	mov    eax,0xc0023f80
c0001984:	53                   	push   ebx
c0001985:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001989:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000198d:	e8 3b f1 ff ff       	call   c0000acd <malloc_consolidate>
c0001992:	8d 46 04             	lea    eax,[esi+0x4]
c0001995:	83 f8 05             	cmp    eax,0x5
c0001998:	77 67                	ja     c0001a01 <dlmallopt+0x83>
c000199a:	ff 24 85 e4 00 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdff1c]
c00019a1:	83 fb 50             	cmp    ebx,0x50
c00019a4:	77 5b                	ja     c0001a01 <dlmallopt+0x83>
c00019a6:	ba 08 00 00 00       	mov    edx,0x8
c00019ab:	85 db                	test   ebx,ebx
c00019ad:	74 12                	je     c00019c1 <dlmallopt+0x43>
c00019af:	83 c3 0b             	add    ebx,0xb
c00019b2:	ba 10 00 00 00       	mov    edx,0x10
c00019b7:	83 fb 0f             	cmp    ebx,0xf
c00019ba:	76 05                	jbe    c00019c1 <dlmallopt+0x43>
c00019bc:	89 da                	mov    edx,ebx
c00019be:	83 e2 f8             	and    edx,0xfffffff8
c00019c1:	a1 80 3f 02 c0       	mov    eax,ds:0xc0023f80
c00019c6:	83 e0 03             	and    eax,0x3
c00019c9:	09 d0                	or     eax,edx
c00019cb:	a3 80 3f 02 c0       	mov    ds:0xc0023f80,eax
c00019d0:	eb 31                	jmp    c0001a03 <dlmallopt+0x85>
c00019d2:	89 1d c4 42 02 c0    	mov    DWORD PTR ds:0xc00242c4,ebx
c00019d8:	eb 06                	jmp    c00019e0 <dlmallopt+0x62>
c00019da:	89 1d c8 42 02 c0    	mov    DWORD PTR ds:0xc00242c8,ebx
c00019e0:	be 01 00 00 00       	mov    esi,0x1
c00019e5:	eb 1c                	jmp    c0001a03 <dlmallopt+0x85>
c00019e7:	89 1d cc 42 02 c0    	mov    DWORD PTR ds:0xc00242cc,ebx
c00019ed:	eb f1                	jmp    c00019e0 <dlmallopt+0x62>
c00019ef:	31 f6                	xor    esi,esi
c00019f1:	85 db                	test   ebx,ebx
c00019f3:	75 0e                	jne    c0001a03 <dlmallopt+0x85>
c00019f5:	c7 05 d4 42 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00242d4,0x0
c00019ff:	eb df                	jmp    c00019e0 <dlmallopt+0x62>
c0001a01:	31 f6                	xor    esi,esi
c0001a03:	89 f0                	mov    eax,esi
c0001a05:	5b                   	pop    ebx
c0001a06:	5e                   	pop    esi
c0001a07:	c3                   	ret    

c0001a08 <disk_status>:
c0001a08:	31 c0                	xor    eax,eax
c0001a0a:	c3                   	ret    

c0001a0b <disk_initialize>:
c0001a0b:	31 c0                	xor    eax,eax
c0001a0d:	c3                   	ret    

c0001a0e <disk_read>:
c0001a0e:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001a13:	0f b6 04 85 a0 58 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffda760]
c0001a1b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a1f:	e9 70 8b 01 00       	jmp    c001a594 <fatWrapperReadDisk>

c0001a24 <disk_write>:
c0001a24:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001a29:	0f b6 04 85 a0 58 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffda760]
c0001a31:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a35:	e9 a1 8b 01 00       	jmp    c001a5db <fatWrapperWriteDisk>

c0001a3a <disk_ioctl>:
c0001a3a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001a3f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001a43:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001a48:	0f b6 04 85 a0 58 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffda760]
c0001a50:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a54:	e9 c9 8b 01 00       	jmp    c001a622 <fatWrapperIoctl>

c0001a59 <ld_word>:
c0001a59:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a5d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001a60:	c1 e2 08             	shl    edx,0x8
c0001a63:	09 d0                	or     eax,edx
c0001a65:	c3                   	ret    

c0001a66 <ld_dword>:
c0001a66:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001a6a:	89 d1                	mov    ecx,edx
c0001a6c:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a70:	c1 e1 08             	shl    ecx,0x8
c0001a73:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001a76:	09 ca                	or     edx,ecx
c0001a78:	c1 e2 08             	shl    edx,0x8
c0001a7b:	09 d0                	or     eax,edx
c0001a7d:	c3                   	ret    

c0001a7e <ld_qword>:
c0001a7e:	57                   	push   edi
c0001a7f:	56                   	push   esi
c0001a80:	53                   	push   ebx
c0001a81:	31 db                	xor    ebx,ebx
c0001a83:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001a86:	89 df                	mov    edi,ebx
c0001a88:	89 ce                	mov    esi,ecx
c0001a8a:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001a8e:	0f a4 f7 08          	shld   edi,esi,0x8
c0001a92:	c1 e6 08             	shl    esi,0x8
c0001a95:	09 f2                	or     edx,esi
c0001a97:	89 d6                	mov    esi,edx
c0001a99:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001a9d:	0f a4 f7 08          	shld   edi,esi,0x8
c0001aa1:	c1 e6 08             	shl    esi,0x8
c0001aa4:	09 f2                	or     edx,esi
c0001aa6:	89 d6                	mov    esi,edx
c0001aa8:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001aac:	0f a4 f7 08          	shld   edi,esi,0x8
c0001ab0:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001ab3:	c1 e6 08             	shl    esi,0x8
c0001ab6:	89 fb                	mov    ebx,edi
c0001ab8:	09 f2                	or     edx,esi
c0001aba:	89 d1                	mov    ecx,edx
c0001abc:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001ac0:	c1 e1 08             	shl    ecx,0x8
c0001ac3:	89 da                	mov    edx,ebx
c0001ac5:	09 c8                	or     eax,ecx
c0001ac7:	5b                   	pop    ebx
c0001ac8:	5e                   	pop    esi
c0001ac9:	5f                   	pop    edi
c0001aca:	c3                   	ret    

c0001acb <st_word>:
c0001acb:	66 89 10             	mov    WORD PTR [eax],dx
c0001ace:	c3                   	ret    

c0001acf <st_dword>:
c0001acf:	89 10                	mov    DWORD PTR [eax],edx
c0001ad1:	c3                   	ret    

c0001ad2 <st_qword>:
c0001ad2:	89 10                	mov    DWORD PTR [eax],edx
c0001ad4:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001ad7:	c3                   	ret    

c0001ad8 <mem_cpy>:
c0001ad8:	85 c9                	test   ecx,ecx
c0001ada:	74 10                	je     c0001aec <mem_cpy+0x14>
c0001adc:	57                   	push   edi
c0001add:	01 c1                	add    ecx,eax
c0001adf:	56                   	push   esi
c0001ae0:	89 c7                	mov    edi,eax
c0001ae2:	89 d6                	mov    esi,edx
c0001ae4:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001ae5:	39 f9                	cmp    ecx,edi
c0001ae7:	75 fb                	jne    c0001ae4 <mem_cpy+0xc>
c0001ae9:	5e                   	pop    esi
c0001aea:	5f                   	pop    edi
c0001aeb:	c3                   	ret    
c0001aec:	c3                   	ret    

c0001aed <mem_set>:
c0001aed:	01 c1                	add    ecx,eax
c0001aef:	40                   	inc    eax
c0001af0:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001af3:	39 c8                	cmp    eax,ecx
c0001af5:	75 f8                	jne    c0001aef <mem_set+0x2>
c0001af7:	c3                   	ret    

c0001af8 <mem_cmp>:
c0001af8:	57                   	push   edi
c0001af9:	56                   	push   esi
c0001afa:	89 c6                	mov    esi,eax
c0001afc:	53                   	push   ebx
c0001afd:	46                   	inc    esi
c0001afe:	42                   	inc    edx
c0001aff:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001b03:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001b07:	29 fb                	sub    ebx,edi
c0001b09:	89 cf                	mov    edi,ecx
c0001b0b:	29 f7                	sub    edi,esi
c0001b0d:	01 c7                	add    edi,eax
c0001b0f:	74 04                	je     c0001b15 <mem_cmp+0x1d>
c0001b11:	85 db                	test   ebx,ebx
c0001b13:	74 e8                	je     c0001afd <mem_cmp+0x5>
c0001b15:	89 d8                	mov    eax,ebx
c0001b17:	5b                   	pop    ebx
c0001b18:	5e                   	pop    esi
c0001b19:	5f                   	pop    edi
c0001b1a:	c3                   	ret    

c0001b1b <chk_chr>:
c0001b1b:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001b1e:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001b21:	74 07                	je     c0001b2a <chk_chr+0xf>
c0001b23:	39 d1                	cmp    ecx,edx
c0001b25:	74 03                	je     c0001b2a <chk_chr+0xf>
c0001b27:	40                   	inc    eax
c0001b28:	eb f1                	jmp    c0001b1b <chk_chr>
c0001b2a:	89 c8                	mov    eax,ecx
c0001b2c:	c3                   	ret    

c0001b2d <dbc_1st>:
c0001b2d:	31 c0                	xor    eax,eax
c0001b2f:	c3                   	ret    

c0001b30 <dbc_2nd>:
c0001b30:	31 c0                	xor    eax,eax
c0001b32:	c3                   	ret    

c0001b33 <tchar2uni>:
c0001b33:	57                   	push   edi
c0001b34:	89 c7                	mov    edi,eax
c0001b36:	56                   	push   esi
c0001b37:	53                   	push   ebx
c0001b38:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001b3a:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001b3c:	8d 73 01             	lea    esi,[ebx+0x1]
c0001b3f:	84 c9                	test   cl,cl
c0001b41:	78 0a                	js     c0001b4d <tchar2uni+0x1a>
c0001b43:	0f b6 d1             	movzx  edx,cl
c0001b46:	89 f3                	mov    ebx,esi
c0001b48:	e9 9f 00 00 00       	jmp    c0001bec <tchar2uni+0xb9>
c0001b4d:	88 ca                	mov    dl,cl
c0001b4f:	83 e2 e0             	and    edx,0xffffffe0
c0001b52:	80 fa c0             	cmp    dl,0xc0
c0001b55:	75 0c                	jne    c0001b63 <tchar2uni+0x30>
c0001b57:	89 ca                	mov    edx,ecx
c0001b59:	b9 01 00 00 00       	mov    ecx,0x1
c0001b5e:	83 e2 1f             	and    edx,0x1f
c0001b61:	eb 2e                	jmp    c0001b91 <tchar2uni+0x5e>
c0001b63:	88 ca                	mov    dl,cl
c0001b65:	83 e2 f0             	and    edx,0xfffffff0
c0001b68:	80 fa e0             	cmp    dl,0xe0
c0001b6b:	75 0c                	jne    c0001b79 <tchar2uni+0x46>
c0001b6d:	89 ca                	mov    edx,ecx
c0001b6f:	b9 02 00 00 00       	mov    ecx,0x2
c0001b74:	83 e2 0f             	and    edx,0xf
c0001b77:	eb 18                	jmp    c0001b91 <tchar2uni+0x5e>
c0001b79:	88 ca                	mov    dl,cl
c0001b7b:	83 e2 f8             	and    edx,0xfffffff8
c0001b7e:	88 d0                	mov    al,dl
c0001b80:	83 ca ff             	or     edx,0xffffffff
c0001b83:	3c f0                	cmp    al,0xf0
c0001b85:	75 6c                	jne    c0001bf3 <tchar2uni+0xc0>
c0001b87:	89 ca                	mov    edx,ecx
c0001b89:	b9 03 00 00 00       	mov    ecx,0x3
c0001b8e:	83 e2 07             	and    edx,0x7
c0001b91:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001b95:	46                   	inc    esi
c0001b96:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001b99:	88 c8                	mov    al,cl
c0001b9b:	83 e0 c0             	and    eax,0xffffffc0
c0001b9e:	3c 80                	cmp    al,0x80
c0001ba0:	75 4e                	jne    c0001bf0 <tchar2uni+0xbd>
c0001ba2:	c1 e2 06             	shl    edx,0x6
c0001ba5:	83 e1 3f             	and    ecx,0x3f
c0001ba8:	09 ca                	or     edx,ecx
c0001baa:	39 de                	cmp    esi,ebx
c0001bac:	75 e7                	jne    c0001b95 <tchar2uni+0x62>
c0001bae:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001bb1:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001bb7:	77 37                	ja     c0001bf0 <tchar2uni+0xbd>
c0001bb9:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001bbf:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001bc5:	76 29                	jbe    c0001bf0 <tchar2uni+0xbd>
c0001bc7:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001bcd:	76 1d                	jbe    c0001bec <tchar2uni+0xb9>
c0001bcf:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001bd5:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001bdb:	c1 e1 06             	shl    ecx,0x6
c0001bde:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001be4:	09 ca                	or     edx,ecx
c0001be6:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001bec:	89 1f                	mov    DWORD PTR [edi],ebx
c0001bee:	eb 03                	jmp    c0001bf3 <tchar2uni+0xc0>
c0001bf0:	83 ca ff             	or     edx,0xffffffff
c0001bf3:	5b                   	pop    ebx
c0001bf4:	89 d0                	mov    eax,edx
c0001bf6:	5e                   	pop    esi
c0001bf7:	5f                   	pop    edi
c0001bf8:	c3                   	ret    

c0001bf9 <put_utf>:
c0001bf9:	53                   	push   ebx
c0001bfa:	83 f8 7f             	cmp    eax,0x7f
c0001bfd:	89 c3                	mov    ebx,eax
c0001bff:	b0 00                	mov    al,0x0
c0001c01:	77 11                	ja     c0001c14 <put_utf+0x1b>
c0001c03:	85 c9                	test   ecx,ecx
c0001c05:	0f 84 e5 00 00 00    	je     c0001cf0 <put_utf+0xf7>
c0001c0b:	88 1a                	mov    BYTE PTR [edx],bl
c0001c0d:	b0 01                	mov    al,0x1
c0001c0f:	e9 dc 00 00 00       	jmp    c0001cf0 <put_utf+0xf7>
c0001c14:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001c1a:	77 23                	ja     c0001c3f <put_utf+0x46>
c0001c1c:	83 f9 01             	cmp    ecx,0x1
c0001c1f:	0f 86 cb 00 00 00    	jbe    c0001cf0 <put_utf+0xf7>
c0001c25:	89 d8                	mov    eax,ebx
c0001c27:	83 e3 3f             	and    ebx,0x3f
c0001c2a:	c1 e8 06             	shr    eax,0x6
c0001c2d:	83 cb 80             	or     ebx,0xffffff80
c0001c30:	83 c8 c0             	or     eax,0xffffffc0
c0001c33:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001c36:	88 02                	mov    BYTE PTR [edx],al
c0001c38:	b0 02                	mov    al,0x2
c0001c3a:	e9 b1 00 00 00       	jmp    c0001cf0 <put_utf+0xf7>
c0001c3f:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001c45:	77 40                	ja     c0001c87 <put_utf+0x8e>
c0001c47:	83 f9 02             	cmp    ecx,0x2
c0001c4a:	0f 86 a0 00 00 00    	jbe    c0001cf0 <put_utf+0xf7>
c0001c50:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001c56:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001c5c:	0f 86 8e 00 00 00    	jbe    c0001cf0 <put_utf+0xf7>
c0001c62:	89 d8                	mov    eax,ebx
c0001c64:	c1 e8 0c             	shr    eax,0xc
c0001c67:	83 c8 e0             	or     eax,0xffffffe0
c0001c6a:	88 02                	mov    BYTE PTR [edx],al
c0001c6c:	89 d8                	mov    eax,ebx
c0001c6e:	83 e3 3f             	and    ebx,0x3f
c0001c71:	c1 e8 06             	shr    eax,0x6
c0001c74:	83 cb 80             	or     ebx,0xffffff80
c0001c77:	83 e0 3f             	and    eax,0x3f
c0001c7a:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001c7d:	83 c8 80             	or     eax,0xffffff80
c0001c80:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001c83:	b0 03                	mov    al,0x3
c0001c85:	eb 69                	jmp    c0001cf0 <put_utf+0xf7>
c0001c87:	83 f9 03             	cmp    ecx,0x3
c0001c8a:	76 64                	jbe    c0001cf0 <put_utf+0xf7>
c0001c8c:	89 d9                	mov    ecx,ebx
c0001c8e:	0f b7 c3             	movzx  eax,bx
c0001c91:	66 31 c9             	xor    cx,cx
c0001c94:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001c9a:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001ca0:	c1 e9 06             	shr    ecx,0x6
c0001ca3:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001ca9:	77 43                	ja     c0001cee <put_utf+0xf5>
c0001cab:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001cb1:	77 3b                	ja     c0001cee <put_utf+0xf5>
c0001cb3:	09 cb                	or     ebx,ecx
c0001cb5:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001cbb:	89 d8                	mov    eax,ebx
c0001cbd:	c1 e8 12             	shr    eax,0x12
c0001cc0:	83 c8 f0             	or     eax,0xfffffff0
c0001cc3:	88 02                	mov    BYTE PTR [edx],al
c0001cc5:	89 d8                	mov    eax,ebx
c0001cc7:	c1 e8 0c             	shr    eax,0xc
c0001cca:	83 e0 3f             	and    eax,0x3f
c0001ccd:	83 c8 80             	or     eax,0xffffff80
c0001cd0:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001cd3:	89 d8                	mov    eax,ebx
c0001cd5:	83 e3 3f             	and    ebx,0x3f
c0001cd8:	c1 e8 06             	shr    eax,0x6
c0001cdb:	83 cb 80             	or     ebx,0xffffff80
c0001cde:	83 e0 3f             	and    eax,0x3f
c0001ce1:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001ce4:	83 c8 80             	or     eax,0xffffff80
c0001ce7:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001cea:	b0 04                	mov    al,0x4
c0001cec:	eb 02                	jmp    c0001cf0 <put_utf+0xf7>
c0001cee:	31 c0                	xor    eax,eax
c0001cf0:	5b                   	pop    ebx
c0001cf1:	c3                   	ret    

c0001cf2 <clst2sect>:
c0001cf2:	89 c1                	mov    ecx,eax
c0001cf4:	83 ea 02             	sub    edx,0x2
c0001cf7:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001cfa:	83 e8 02             	sub    eax,0x2
c0001cfd:	39 d0                	cmp    eax,edx
c0001cff:	76 0d                	jbe    c0001d0e <clst2sect+0x1c>
c0001d01:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001d05:	f7 e2                	mul    edx
c0001d07:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001d0a:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001d0d:	c3                   	ret    
c0001d0e:	31 c0                	xor    eax,eax
c0001d10:	31 d2                	xor    edx,edx
c0001d12:	c3                   	ret    

c0001d13 <clmt_clust>:
c0001d13:	57                   	push   edi
c0001d14:	89 cf                	mov    edi,ecx
c0001d16:	56                   	push   esi
c0001d17:	89 d6                	mov    esi,edx
c0001d19:	53                   	push   ebx
c0001d1a:	0f ac fe 09          	shrd   esi,edi,0x9
c0001d1e:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001d21:	89 f2                	mov    edx,esi
c0001d23:	8b 00                	mov    eax,DWORD PTR [eax]
c0001d25:	c1 ef 09             	shr    edi,0x9
c0001d28:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001d2c:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001d2f:	89 f9                	mov    ecx,edi
c0001d31:	31 ff                	xor    edi,edi
c0001d33:	57                   	push   edi
c0001d34:	56                   	push   esi
c0001d35:	51                   	push   ecx
c0001d36:	52                   	push   edx
c0001d37:	e8 90 d4 01 00       	call   c001f1cc <__udivdi3>
c0001d3c:	83 c4 10             	add    esp,0x10
c0001d3f:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001d41:	85 d2                	test   edx,edx
c0001d43:	74 10                	je     c0001d55 <clmt_clust+0x42>
c0001d45:	39 d0                	cmp    eax,edx
c0001d47:	72 07                	jb     c0001d50 <clmt_clust+0x3d>
c0001d49:	29 d0                	sub    eax,edx
c0001d4b:	83 c3 08             	add    ebx,0x8
c0001d4e:	eb ef                	jmp    c0001d3f <clmt_clust+0x2c>
c0001d50:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001d53:	89 c2                	mov    edx,eax
c0001d55:	5b                   	pop    ebx
c0001d56:	89 d0                	mov    eax,edx
c0001d58:	5e                   	pop    esi
c0001d59:	5f                   	pop    edi
c0001d5a:	c3                   	ret    

c0001d5b <pick_lfn>:
c0001d5b:	55                   	push   ebp
c0001d5c:	57                   	push   edi
c0001d5d:	56                   	push   esi
c0001d5e:	89 d6                	mov    esi,edx
c0001d60:	53                   	push   ebx
c0001d61:	89 c3                	mov    ebx,eax
c0001d63:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001d66:	e8 ee fc ff ff       	call   c0001a59 <ld_word>
c0001d6b:	66 85 c0             	test   ax,ax
c0001d6e:	74 04                	je     c0001d74 <pick_lfn+0x19>
c0001d70:	31 c0                	xor    eax,eax
c0001d72:	eb 5c                	jmp    c0001dd0 <pick_lfn+0x75>
c0001d74:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001d77:	bd 01 00 00 00       	mov    ebp,0x1
c0001d7c:	83 e1 bf             	and    ecx,0xffffffbf
c0001d7f:	31 ff                	xor    edi,edi
c0001d81:	49                   	dec    ecx
c0001d82:	6b c9 0d             	imul   ecx,ecx,0xd
c0001d85:	0f b6 87 00 02 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffdfe00]
c0001d8c:	01 f0                	add    eax,esi
c0001d8e:	e8 c6 fc ff ff       	call   c0001a59 <ld_word>
c0001d93:	66 85 ed             	test   bp,bp
c0001d96:	74 11                	je     c0001da9 <pick_lfn+0x4e>
c0001d98:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001d9e:	77 d0                	ja     c0001d70 <pick_lfn+0x15>
c0001da0:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001da4:	89 c5                	mov    ebp,eax
c0001da6:	41                   	inc    ecx
c0001da7:	eb 04                	jmp    c0001dad <pick_lfn+0x52>
c0001da9:	66 40                	inc    ax
c0001dab:	75 c3                	jne    c0001d70 <pick_lfn+0x15>
c0001dad:	47                   	inc    edi
c0001dae:	83 ff 0d             	cmp    edi,0xd
c0001db1:	75 d2                	jne    c0001d85 <pick_lfn+0x2a>
c0001db3:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001db6:	74 13                	je     c0001dcb <pick_lfn+0x70>
c0001db8:	66 85 ed             	test   bp,bp
c0001dbb:	74 0e                	je     c0001dcb <pick_lfn+0x70>
c0001dbd:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001dc3:	77 ab                	ja     c0001d70 <pick_lfn+0x15>
c0001dc5:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001dcb:	b8 01 00 00 00       	mov    eax,0x1
c0001dd0:	5b                   	pop    ebx
c0001dd1:	5e                   	pop    esi
c0001dd2:	5f                   	pop    edi
c0001dd3:	5d                   	pop    ebp
c0001dd4:	c3                   	ret    

c0001dd5 <put_lfn>:
c0001dd5:	55                   	push   ebp
c0001dd6:	31 ed                	xor    ebp,ebp
c0001dd8:	57                   	push   edi
c0001dd9:	89 d7                	mov    edi,edx
c0001ddb:	56                   	push   esi
c0001ddc:	31 f6                	xor    esi,esi
c0001dde:	53                   	push   ebx
c0001ddf:	83 ec 08             	sub    esp,0x8
c0001de2:	89 04 24             	mov    DWORD PTR [esp],eax
c0001de5:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001de9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001ded:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001df3:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001df6:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001df9:	31 d2                	xor    edx,edx
c0001dfb:	e8 cb fc ff ff       	call   c0001acb <st_word>
c0001e00:	0f b6 d9             	movzx  ebx,cl
c0001e03:	4b                   	dec    ebx
c0001e04:	6b db 0d             	imul   ebx,ebx,0xd
c0001e07:	66 83 fe ff          	cmp    si,0xffff
c0001e0b:	74 08                	je     c0001e15 <put_lfn+0x40>
c0001e0d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001e10:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001e14:	43                   	inc    ebx
c0001e15:	0f b6 85 00 02 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffdfe00]
c0001e1c:	0f b7 d6             	movzx  edx,si
c0001e1f:	01 f8                	add    eax,edi
c0001e21:	e8 a5 fc ff ff       	call   c0001acb <st_word>
c0001e26:	66 85 f6             	test   si,si
c0001e29:	75 03                	jne    c0001e2e <put_lfn+0x59>
c0001e2b:	83 ce ff             	or     esi,0xffffffff
c0001e2e:	45                   	inc    ebp
c0001e2f:	83 fd 0d             	cmp    ebp,0xd
c0001e32:	75 d3                	jne    c0001e07 <put_lfn+0x32>
c0001e34:	66 46                	inc    si
c0001e36:	74 0a                	je     c0001e42 <put_lfn+0x6d>
c0001e38:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001e3b:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0001e40:	75 09                	jne    c0001e4b <put_lfn+0x76>
c0001e42:	88 c8                	mov    al,cl
c0001e44:	83 c8 40             	or     eax,0x40
c0001e47:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0001e4b:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0001e4f:	88 07                	mov    BYTE PTR [edi],al
c0001e51:	83 c4 08             	add    esp,0x8
c0001e54:	5b                   	pop    ebx
c0001e55:	5e                   	pop    esi
c0001e56:	5f                   	pop    edi
c0001e57:	5d                   	pop    ebp
c0001e58:	c3                   	ret    

c0001e59 <gen_numname>:
c0001e59:	57                   	push   edi
c0001e5a:	89 cf                	mov    edi,ecx
c0001e5c:	56                   	push   esi
c0001e5d:	b9 0b 00 00 00       	mov    ecx,0xb
c0001e62:	53                   	push   ebx
c0001e63:	89 c6                	mov    esi,eax
c0001e65:	83 ec 10             	sub    esp,0x10
c0001e68:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0001e6c:	e8 67 fc ff ff       	call   c0001ad8 <mem_cpy>
c0001e71:	83 fb 05             	cmp    ebx,0x5
c0001e74:	76 2d                	jbe    c0001ea3 <gen_numname+0x4a>
c0001e76:	66 8b 07             	mov    ax,WORD PTR [edi]
c0001e79:	66 85 c0             	test   ax,ax
c0001e7c:	74 25                	je     c0001ea3 <gen_numname+0x4a>
c0001e7e:	83 c7 02             	add    edi,0x2
c0001e81:	ba 10 00 00 00       	mov    edx,0x10
c0001e86:	01 db                	add    ebx,ebx
c0001e88:	89 c1                	mov    ecx,eax
c0001e8a:	66 d1 e8             	shr    ax,1
c0001e8d:	83 e1 01             	and    ecx,0x1
c0001e90:	01 cb                	add    ebx,ecx
c0001e92:	0f ba e3 10          	bt     ebx,0x10
c0001e96:	73 06                	jae    c0001e9e <gen_numname+0x45>
c0001e98:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0001e9e:	4a                   	dec    edx
c0001e9f:	75 e5                	jne    c0001e86 <gen_numname+0x2d>
c0001ea1:	eb d3                	jmp    c0001e76 <gen_numname+0x1d>
c0001ea3:	b8 07 00 00 00       	mov    eax,0x7
c0001ea8:	88 d9                	mov    cl,bl
c0001eaa:	83 e1 0f             	and    ecx,0xf
c0001ead:	8d 51 30             	lea    edx,[ecx+0x30]
c0001eb0:	80 fa 39             	cmp    dl,0x39
c0001eb3:	76 03                	jbe    c0001eb8 <gen_numname+0x5f>
c0001eb5:	8d 51 37             	lea    edx,[ecx+0x37]
c0001eb8:	8d 48 ff             	lea    ecx,[eax-0x1]
c0001ebb:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0001ebf:	89 da                	mov    edx,ebx
c0001ec1:	c1 ea 04             	shr    edx,0x4
c0001ec4:	83 fb 0f             	cmp    ebx,0xf
c0001ec7:	76 06                	jbe    c0001ecf <gen_numname+0x76>
c0001ec9:	89 c8                	mov    eax,ecx
c0001ecb:	89 d3                	mov    ebx,edx
c0001ecd:	eb d9                	jmp    c0001ea8 <gen_numname+0x4f>
c0001ecf:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0001ed4:	31 d2                	xor    edx,edx
c0001ed6:	8d 58 fe             	lea    ebx,[eax-0x2]
c0001ed9:	8d 04 16             	lea    eax,[esi+edx*1]
c0001edc:	39 ca                	cmp    edx,ecx
c0001ede:	73 18                	jae    c0001ef8 <gen_numname+0x9f>
c0001ee0:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001ee3:	3c 20                	cmp    al,0x20
c0001ee5:	74 11                	je     c0001ef8 <gen_numname+0x9f>
c0001ee7:	e8 41 fc ff ff       	call   c0001b2d <dbc_1st>
c0001eec:	85 c0                	test   eax,eax
c0001eee:	74 05                	je     c0001ef5 <gen_numname+0x9c>
c0001ef0:	39 d3                	cmp    ebx,edx
c0001ef2:	74 04                	je     c0001ef8 <gen_numname+0x9f>
c0001ef4:	42                   	inc    edx
c0001ef5:	42                   	inc    edx
c0001ef6:	eb e1                	jmp    c0001ed9 <gen_numname+0x80>
c0001ef8:	b0 20                	mov    al,0x20
c0001efa:	83 f9 07             	cmp    ecx,0x7
c0001efd:	77 05                	ja     c0001f04 <gen_numname+0xab>
c0001eff:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0001f03:	41                   	inc    ecx
c0001f04:	42                   	inc    edx
c0001f05:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0001f09:	83 fa 07             	cmp    edx,0x7
c0001f0c:	76 ea                	jbe    c0001ef8 <gen_numname+0x9f>
c0001f0e:	83 c4 10             	add    esp,0x10
c0001f11:	5b                   	pop    ebx
c0001f12:	5e                   	pop    esi
c0001f13:	5f                   	pop    edi
c0001f14:	c3                   	ret    

c0001f15 <sum_sfn>:
c0001f15:	31 c9                	xor    ecx,ecx
c0001f17:	31 d2                	xor    edx,edx
c0001f19:	d0 ca                	ror    dl,1
c0001f1b:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0001f1e:	41                   	inc    ecx
c0001f1f:	83 f9 0b             	cmp    ecx,0xb
c0001f22:	75 f5                	jne    c0001f19 <sum_sfn+0x4>
c0001f24:	88 d0                	mov    al,dl
c0001f26:	c3                   	ret    

c0001f27 <xdir_sum>:
c0001f27:	56                   	push   esi
c0001f28:	31 c9                	xor    ecx,ecx
c0001f2a:	53                   	push   ebx
c0001f2b:	31 d2                	xor    edx,edx
c0001f2d:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0001f31:	43                   	inc    ebx
c0001f32:	c1 e3 05             	shl    ebx,0x5
c0001f35:	83 fa 02             	cmp    edx,0x2
c0001f38:	74 0b                	je     c0001f45 <xdir_sum+0x1e>
c0001f3a:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0001f3e:	66 d1 c9             	ror    cx,1
c0001f41:	01 f1                	add    ecx,esi
c0001f43:	eb 05                	jmp    c0001f4a <xdir_sum+0x23>
c0001f45:	ba 03 00 00 00       	mov    edx,0x3
c0001f4a:	42                   	inc    edx
c0001f4b:	39 d3                	cmp    ebx,edx
c0001f4d:	77 e6                	ja     c0001f35 <xdir_sum+0xe>
c0001f4f:	89 c8                	mov    eax,ecx
c0001f51:	5b                   	pop    ebx
c0001f52:	5e                   	pop    esi
c0001f53:	c3                   	ret    

c0001f54 <xsum32>:
c0001f54:	d1 ca                	ror    edx,1
c0001f56:	0f b6 c0             	movzx  eax,al
c0001f59:	01 d0                	add    eax,edx
c0001f5b:	c3                   	ret    

c0001f5c <get_xfileinfo>:
c0001f5c:	55                   	push   ebp
c0001f5d:	31 c9                	xor    ecx,ecx
c0001f5f:	57                   	push   edi
c0001f60:	bd 40 00 00 00       	mov    ebp,0x40
c0001f65:	56                   	push   esi
c0001f66:	31 ff                	xor    edi,edi
c0001f68:	53                   	push   ebx
c0001f69:	89 c6                	mov    esi,eax
c0001f6b:	83 ec 0c             	sub    esp,0xc
c0001f6e:	89 d3                	mov    ebx,edx
c0001f70:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0001f77:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0001f7b:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0001f7e:	76 6d                	jbe    c0001fed <get_xfileinfo+0x91>
c0001f80:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0001f86:	76 0b                	jbe    c0001f93 <get_xfileinfo+0x37>
c0001f88:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0001f8c:	bf 01 00 00 00       	mov    edi,0x1
c0001f91:	eb 63                	jmp    c0001ff6 <get_xfileinfo+0x9a>
c0001f93:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0001f99:	75 03                	jne    c0001f9e <get_xfileinfo+0x42>
c0001f9b:	83 c5 02             	add    ebp,0x2
c0001f9e:	8d 04 2e             	lea    eax,[esi+ebp*1]
c0001fa1:	83 c5 02             	add    ebp,0x2
c0001fa4:	e8 b0 fa ff ff       	call   c0001a59 <ld_word>
c0001fa9:	ff 04 24             	inc    DWORD PTR [esp]
c0001fac:	66 85 c9             	test   cx,cx
c0001faf:	75 0d                	jne    c0001fbe <get_xfileinfo+0x62>
c0001fb1:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0001fb7:	66 81 fa ff 07       	cmp    dx,0x7ff
c0001fbc:	76 2b                	jbe    c0001fe9 <get_xfileinfo+0x8d>
c0001fbe:	c1 e1 10             	shl    ecx,0x10
c0001fc1:	ba ff 00 00 00       	mov    edx,0xff
c0001fc6:	0f b7 c0             	movzx  eax,ax
c0001fc9:	29 fa                	sub    edx,edi
c0001fcb:	09 c8                	or     eax,ecx
c0001fcd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001fd1:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0001fd5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001fd9:	e8 1b fc ff ff       	call   c0001bf9 <put_utf>
c0001fde:	84 c0                	test   al,al
c0001fe0:	74 a6                	je     c0001f88 <get_xfileinfo+0x2c>
c0001fe2:	0f b6 c0             	movzx  eax,al
c0001fe5:	01 c7                	add    edi,eax
c0001fe7:	31 c0                	xor    eax,eax
c0001fe9:	89 c1                	mov    ecx,eax
c0001feb:	eb 8a                	jmp    c0001f77 <get_xfileinfo+0x1b>
c0001fed:	85 ff                	test   edi,edi
c0001fef:	74 97                	je     c0001f88 <get_xfileinfo+0x2c>
c0001ff1:	66 85 c9             	test   cx,cx
c0001ff4:	75 92                	jne    c0001f88 <get_xfileinfo+0x2c>
c0001ff6:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0001ffb:	31 c0                	xor    eax,eax
c0001ffd:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0002001:	31 d2                	xor    edx,edx
c0002003:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c0002006:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c0002009:	80 e1 10             	and    cl,0x10
c000200c:	75 08                	jne    c0002016 <get_xfileinfo+0xba>
c000200e:	8d 46 38             	lea    eax,[esi+0x38]
c0002011:	e8 68 fa ff ff       	call   c0001a7e <ld_qword>
c0002016:	89 03                	mov    DWORD PTR [ebx],eax
c0002018:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000201b:	8d 46 0c             	lea    eax,[esi+0xc]
c000201e:	e8 36 fa ff ff       	call   c0001a59 <ld_word>
c0002023:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0002027:	8d 46 0e             	lea    eax,[esi+0xe]
c000202a:	e8 2a fa ff ff       	call   c0001a59 <ld_word>
c000202f:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0002033:	83 c4 0c             	add    esp,0xc
c0002036:	5b                   	pop    ebx
c0002037:	5e                   	pop    esi
c0002038:	5f                   	pop    edi
c0002039:	5d                   	pop    ebp
c000203a:	c3                   	ret    

c000203b <get_ldnumber>:
c000203b:	8b 10                	mov    edx,DWORD PTR [eax]
c000203d:	85 d2                	test   edx,edx
c000203f:	74 14                	je     c0002055 <get_ldnumber+0x1a>
c0002041:	56                   	push   esi
c0002042:	53                   	push   ebx
c0002043:	89 d3                	mov    ebx,edx
c0002045:	43                   	inc    ebx
c0002046:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002049:	80 f9 1f             	cmp    cl,0x1f
c000204c:	76 0d                	jbe    c000205b <get_ldnumber+0x20>
c000204e:	80 f9 3a             	cmp    cl,0x3a
c0002051:	75 f2                	jne    c0002045 <get_ldnumber+0xa>
c0002053:	eb 0a                	jmp    c000205f <get_ldnumber+0x24>
c0002055:	83 c9 ff             	or     ecx,0xffffffff
c0002058:	89 c8                	mov    eax,ecx
c000205a:	c3                   	ret    
c000205b:	31 c9                	xor    ecx,ecx
c000205d:	eb 24                	jmp    c0002083 <get_ldnumber+0x48>
c000205f:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002062:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002065:	80 f9 09             	cmp    cl,0x9
c0002068:	77 16                	ja     c0002080 <get_ldnumber+0x45>
c000206a:	83 c2 02             	add    edx,0x2
c000206d:	83 c9 ff             	or     ecx,0xffffffff
c0002070:	39 d3                	cmp    ebx,edx
c0002072:	75 0f                	jne    c0002083 <get_ldnumber+0x48>
c0002074:	89 f2                	mov    edx,esi
c0002076:	89 18                	mov    DWORD PTR [eax],ebx
c0002078:	0f be ca             	movsx  ecx,dl
c000207b:	83 e9 30             	sub    ecx,0x30
c000207e:	eb 03                	jmp    c0002083 <get_ldnumber+0x48>
c0002080:	83 c9 ff             	or     ecx,0xffffffff
c0002083:	89 c8                	mov    eax,ecx
c0002085:	5b                   	pop    ebx
c0002086:	5e                   	pop    esi
c0002087:	c3                   	ret    

c0002088 <crc32>:
c0002088:	56                   	push   esi
c0002089:	89 d6                	mov    esi,edx
c000208b:	53                   	push   ebx
c000208c:	b2 01                	mov    dl,0x1
c000208e:	bb 08 00 00 00       	mov    ebx,0x8
c0002093:	89 f1                	mov    ecx,esi
c0002095:	84 d1                	test   cl,dl
c0002097:	0f 95 c1             	setne  cl
c000209a:	0f b6 c9             	movzx  ecx,cl
c000209d:	31 c1                	xor    ecx,eax
c000209f:	89 c8                	mov    eax,ecx
c00020a1:	d1 e8                	shr    eax,1
c00020a3:	80 e1 01             	and    cl,0x1
c00020a6:	74 05                	je     c00020ad <crc32+0x25>
c00020a8:	35 20 83 b8 ed       	xor    eax,0xedb88320
c00020ad:	d1 e2                	shl    edx,1
c00020af:	4b                   	dec    ebx
c00020b0:	75 e1                	jne    c0002093 <crc32+0xb>
c00020b2:	5b                   	pop    ebx
c00020b3:	5e                   	pop    esi
c00020b4:	c3                   	ret    

c00020b5 <test_gpt_header>:
c00020b5:	55                   	push   ebp
c00020b6:	b9 10 00 00 00       	mov    ecx,0x10
c00020bb:	57                   	push   edi
c00020bc:	ba 00 01 02 c0       	mov    edx,0xc0020100
c00020c1:	56                   	push   esi
c00020c2:	31 ff                	xor    edi,edi
c00020c4:	53                   	push   ebx
c00020c5:	89 c3                	mov    ebx,eax
c00020c7:	e8 2c fa ff ff       	call   c0001af8 <mem_cmp>
c00020cc:	85 c0                	test   eax,eax
c00020ce:	75 55                	jne    c0002125 <test_gpt_header+0x70>
c00020d0:	89 c7                	mov    edi,eax
c00020d2:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00020d7:	83 ce ff             	or     esi,0xffffffff
c00020da:	31 d2                	xor    edx,edx
c00020dc:	83 fd 03             	cmp    ebp,0x3
c00020df:	76 05                	jbe    c00020e6 <test_gpt_header+0x31>
c00020e1:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00020e6:	89 f0                	mov    eax,esi
c00020e8:	45                   	inc    ebp
c00020e9:	e8 9a ff ff ff       	call   c0002088 <crc32>
c00020ee:	83 fd 4c             	cmp    ebp,0x4c
c00020f1:	89 c6                	mov    esi,eax
c00020f3:	75 e5                	jne    c00020da <test_gpt_header+0x25>
c00020f5:	8d 43 10             	lea    eax,[ebx+0x10]
c00020f8:	f7 d6                	not    esi
c00020fa:	e8 67 f9 ff ff       	call   c0001a66 <ld_dword>
c00020ff:	39 c6                	cmp    esi,eax
c0002101:	75 22                	jne    c0002125 <test_gpt_header+0x70>
c0002103:	8d 43 54             	lea    eax,[ebx+0x54]
c0002106:	e8 5b f9 ff ff       	call   c0001a66 <ld_dword>
c000210b:	83 c0 80             	add    eax,0xffffff80
c000210e:	75 15                	jne    c0002125 <test_gpt_header+0x70>
c0002110:	8d 43 50             	lea    eax,[ebx+0x50]
c0002113:	e8 4e f9 ff ff       	call   c0001a66 <ld_dword>
c0002118:	3d 80 00 00 00       	cmp    eax,0x80
c000211d:	0f 96 c0             	setbe  al
c0002120:	0f b6 c0             	movzx  eax,al
c0002123:	89 c7                	mov    edi,eax
c0002125:	5b                   	pop    ebx
c0002126:	89 f8                	mov    eax,edi
c0002128:	5e                   	pop    esi
c0002129:	5f                   	pop    edi
c000212a:	5d                   	pop    ebp
c000212b:	c3                   	ret    

c000212c <make_rand>:
c000212c:	56                   	push   esi
c000212d:	85 c0                	test   eax,eax
c000212f:	53                   	push   ebx
c0002130:	75 05                	jne    c0002137 <make_rand+0xb>
c0002132:	b8 01 00 00 00       	mov    eax,0x1
c0002137:	01 d1                	add    ecx,edx
c0002139:	bb 08 00 00 00       	mov    ebx,0x8
c000213e:	89 c6                	mov    esi,eax
c0002140:	d1 e8                	shr    eax,1
c0002142:	83 e6 01             	and    esi,0x1
c0002145:	85 f6                	test   esi,esi
c0002147:	74 05                	je     c000214e <make_rand+0x22>
c0002149:	35 00 00 00 a3       	xor    eax,0xa3000000
c000214e:	4b                   	dec    ebx
c000214f:	75 ed                	jne    c000213e <make_rand+0x12>
c0002151:	42                   	inc    edx
c0002152:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c0002155:	39 ca                	cmp    edx,ecx
c0002157:	75 e0                	jne    c0002139 <make_rand+0xd>
c0002159:	5b                   	pop    ebx
c000215a:	5e                   	pop    esi
c000215b:	c3                   	ret    

c000215c <validate>:
c000215c:	56                   	push   esi
c000215d:	53                   	push   ebx
c000215e:	89 d6                	mov    esi,edx
c0002160:	51                   	push   ecx
c0002161:	85 c0                	test   eax,eax
c0002163:	75 09                	jne    c000216e <validate+0x12>
c0002165:	b8 09 00 00 00       	mov    eax,0x9
c000216a:	31 c9                	xor    ecx,ecx
c000216c:	eb 2f                	jmp    c000219d <validate+0x41>
c000216e:	89 c3                	mov    ebx,eax
c0002170:	8b 00                	mov    eax,DWORD PTR [eax]
c0002172:	85 c0                	test   eax,eax
c0002174:	74 ef                	je     c0002165 <validate+0x9>
c0002176:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002179:	74 ea                	je     c0002165 <validate+0x9>
c000217b:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c000217f:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c0002183:	75 e0                	jne    c0002165 <validate+0x9>
c0002185:	83 ec 0c             	sub    esp,0xc
c0002188:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000218c:	50                   	push   eax
c000218d:	e8 76 f8 ff ff       	call   c0001a08 <disk_status>
c0002192:	83 c4 10             	add    esp,0x10
c0002195:	a8 01                	test   al,0x1
c0002197:	75 cc                	jne    c0002165 <validate+0x9>
c0002199:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c000219b:	31 c0                	xor    eax,eax
c000219d:	89 0e                	mov    DWORD PTR [esi],ecx
c000219f:	5a                   	pop    edx
c00021a0:	5b                   	pop    ebx
c00021a1:	5e                   	pop    esi
c00021a2:	c3                   	ret    

c00021a3 <sync_window>:
c00021a3:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00021a7:	0f 84 85 00 00 00    	je     c0002232 <sync_window+0x8f>
c00021ad:	55                   	push   ebp
c00021ae:	8d 68 54             	lea    ebp,[eax+0x54]
c00021b1:	57                   	push   edi
c00021b2:	56                   	push   esi
c00021b3:	53                   	push   ebx
c00021b4:	89 c3                	mov    ebx,eax
c00021b6:	83 ec 28             	sub    esp,0x28
c00021b9:	6a 01                	push   0x1
c00021bb:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00021be:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00021c1:	55                   	push   ebp
c00021c2:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00021c6:	50                   	push   eax
c00021c7:	e8 58 f8 ff ff       	call   c0001a24 <disk_write>
c00021cc:	83 c4 20             	add    esp,0x20
c00021cf:	ba 01 00 00 00       	mov    edx,0x1
c00021d4:	85 c0                	test   eax,eax
c00021d6:	75 50                	jne    c0002228 <sync_window+0x85>
c00021d8:	31 ff                	xor    edi,edi
c00021da:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00021dd:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00021e1:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00021e5:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00021e8:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00021eb:	89 c6                	mov    esi,eax
c00021ed:	89 d7                	mov    edi,edx
c00021ef:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00021f2:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00021f6:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00021f9:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00021fd:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0002201:	73 23                	jae    c0002226 <sync_window+0x83>
c0002203:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002207:	75 1d                	jne    c0002226 <sync_window+0x83>
c0002209:	83 ec 0c             	sub    esp,0xc
c000220c:	6a 01                	push   0x1
c000220e:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0002212:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0002216:	52                   	push   edx
c0002217:	50                   	push   eax
c0002218:	55                   	push   ebp
c0002219:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000221d:	50                   	push   eax
c000221e:	e8 01 f8 ff ff       	call   c0001a24 <disk_write>
c0002223:	83 c4 20             	add    esp,0x20
c0002226:	31 d2                	xor    edx,edx
c0002228:	83 c4 1c             	add    esp,0x1c
c000222b:	89 d0                	mov    eax,edx
c000222d:	5b                   	pop    ebx
c000222e:	5e                   	pop    esi
c000222f:	5f                   	pop    edi
c0002230:	5d                   	pop    ebp
c0002231:	c3                   	ret    
c0002232:	31 d2                	xor    edx,edx
c0002234:	89 d0                	mov    eax,edx
c0002236:	c3                   	ret    

c0002237 <move_window>:
c0002237:	56                   	push   esi
c0002238:	53                   	push   ebx
c0002239:	89 c3                	mov    ebx,eax
c000223b:	83 ec 14             	sub    esp,0x14
c000223e:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002241:	75 07                	jne    c000224a <move_window+0x13>
c0002243:	31 f6                	xor    esi,esi
c0002245:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002248:	74 59                	je     c00022a3 <move_window+0x6c>
c000224a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000224e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002252:	89 d8                	mov    eax,ebx
c0002254:	e8 4a ff ff ff       	call   c00021a3 <sync_window>
c0002259:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000225d:	89 c6                	mov    esi,eax
c000225f:	85 c0                	test   eax,eax
c0002261:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002265:	75 3c                	jne    c00022a3 <move_window+0x6c>
c0002267:	83 ec 0c             	sub    esp,0xc
c000226a:	8d 43 54             	lea    eax,[ebx+0x54]
c000226d:	6a 01                	push   0x1
c000226f:	51                   	push   ecx
c0002270:	52                   	push   edx
c0002271:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0002275:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002279:	50                   	push   eax
c000227a:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000227e:	50                   	push   eax
c000227f:	e8 8a f7 ff ff       	call   c0001a0e <disk_read>
c0002284:	83 c4 20             	add    esp,0x20
c0002287:	85 c0                	test   eax,eax
c0002289:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000228d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002291:	74 0a                	je     c000229d <move_window+0x66>
c0002293:	83 ca ff             	or     edx,0xffffffff
c0002296:	be 01 00 00 00       	mov    esi,0x1
c000229b:	89 d1                	mov    ecx,edx
c000229d:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c00022a0:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c00022a3:	89 f0                	mov    eax,esi
c00022a5:	83 c4 14             	add    esp,0x14
c00022a8:	5b                   	pop    ebx
c00022a9:	5e                   	pop    esi
c00022aa:	c3                   	ret    

c00022ab <check_fs>:
c00022ab:	53                   	push   ebx
c00022ac:	89 c3                	mov    ebx,eax
c00022ae:	83 ec 08             	sub    esp,0x8
c00022b1:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00022b5:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00022bc:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00022c3:	e8 6f ff ff ff       	call   c0002237 <move_window>
c00022c8:	ba 04 00 00 00       	mov    edx,0x4
c00022cd:	85 c0                	test   eax,eax
c00022cf:	0f 85 89 00 00 00    	jne    c000235e <check_fs+0xb3>
c00022d5:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00022db:	e8 79 f7 ff ff       	call   c0001a59 <ld_word>
c00022e0:	ba 03 00 00 00       	mov    edx,0x3
c00022e5:	66 3d 55 aa          	cmp    ax,0xaa55
c00022e9:	75 73                	jne    c000235e <check_fs+0xb3>
c00022eb:	ba 20 02 02 c0       	mov    edx,0xc0020220
c00022f0:	8d 43 54             	lea    eax,[ebx+0x54]
c00022f3:	b9 0b 00 00 00       	mov    ecx,0xb
c00022f8:	e8 fb f7 ff ff       	call   c0001af8 <mem_cmp>
c00022fd:	ba 01 00 00 00       	mov    edx,0x1
c0002302:	85 c0                	test   eax,eax
c0002304:	74 58                	je     c000235e <check_fs+0xb3>
c0002306:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c0002309:	8d 50 18             	lea    edx,[eax+0x18]
c000230c:	80 fa 01             	cmp    dl,0x1
c000230f:	76 09                	jbe    c000231a <check_fs+0x6f>
c0002311:	ba 02 00 00 00       	mov    edx,0x2
c0002316:	3c eb                	cmp    al,0xeb
c0002318:	75 44                	jne    c000235e <check_fs+0xb3>
c000231a:	ba ac 2e 02 c0       	mov    edx,0xc0022eac
c000231f:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c0002325:	b9 03 00 00 00       	mov    ecx,0x3
c000232a:	e8 c9 f7 ff ff       	call   c0001af8 <mem_cmp>
c000232f:	31 d2                	xor    edx,edx
c0002331:	85 c0                	test   eax,eax
c0002333:	74 29                	je     c000235e <check_fs+0xb3>
c0002335:	ba 2c 02 02 c0       	mov    edx,0xc002022c
c000233a:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002340:	b9 05 00 00 00       	mov    ecx,0x5
c0002345:	e8 ae f7 ff ff       	call   c0001af8 <mem_cmp>
c000234a:	31 d2                	xor    edx,edx
c000234c:	85 c0                	test   eax,eax
c000234e:	74 0e                	je     c000235e <check_fs+0xb3>
c0002350:	31 d2                	xor    edx,edx
c0002352:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002359:	0f 95 c2             	setne  dl
c000235c:	01 d2                	add    edx,edx
c000235e:	89 d0                	mov    eax,edx
c0002360:	83 c4 08             	add    esp,0x8
c0002363:	5b                   	pop    ebx
c0002364:	c3                   	ret    

c0002365 <find_volume>:
c0002365:	55                   	push   ebp
c0002366:	31 c9                	xor    ecx,ecx
c0002368:	57                   	push   edi
c0002369:	56                   	push   esi
c000236a:	89 d6                	mov    esi,edx
c000236c:	53                   	push   ebx
c000236d:	31 d2                	xor    edx,edx
c000236f:	83 ec 3c             	sub    esp,0x3c
c0002372:	89 c3                	mov    ebx,eax
c0002374:	e8 32 ff ff ff       	call   c00022ab <check_fs>
c0002379:	83 f8 02             	cmp    eax,0x2
c000237c:	74 0e                	je     c000238c <find_volume+0x27>
c000237e:	0f 87 5d 01 00 00    	ja     c00024e1 <find_volume+0x17c>
c0002384:	85 f6                	test   esi,esi
c0002386:	0f 84 55 01 00 00    	je     c00024e1 <find_volume+0x17c>
c000238c:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c0002393:	0f 85 dd 00 00 00    	jne    c0002476 <find_volume+0x111>
c0002399:	31 c9                	xor    ecx,ecx
c000239b:	ba 01 00 00 00       	mov    edx,0x1
c00023a0:	89 d8                	mov    eax,ebx
c00023a2:	e8 90 fe ff ff       	call   c0002237 <move_window>
c00023a7:	85 c0                	test   eax,eax
c00023a9:	74 0a                	je     c00023b5 <find_volume+0x50>
c00023ab:	b8 04 00 00 00       	mov    eax,0x4
c00023b0:	e9 2c 01 00 00       	jmp    c00024e1 <find_volume+0x17c>
c00023b5:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00023b8:	89 e8                	mov    eax,ebp
c00023ba:	e8 f6 fc ff ff       	call   c00020b5 <test_gpt_header>
c00023bf:	85 c0                	test   eax,eax
c00023c1:	75 0a                	jne    c00023cd <find_volume+0x68>
c00023c3:	b8 03 00 00 00       	mov    eax,0x3
c00023c8:	e9 14 01 00 00       	jmp    c00024e1 <find_volume+0x17c>
c00023cd:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00023d3:	e8 8e f6 ff ff       	call   c0001a66 <ld_dword>
c00023d8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00023dc:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00023e2:	e8 97 f6 ff ff       	call   c0001a7e <ld_qword>
c00023e7:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00023ef:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00023f3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00023f7:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00023ff:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002403:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0002407:	74 ba                	je     c00023c3 <find_volume+0x5e>
c0002409:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000240d:	31 c9                	xor    ecx,ecx
c000240f:	c1 e7 07             	shl    edi,0x7
c0002412:	89 d8                	mov    eax,ebx
c0002414:	89 fa                	mov    edx,edi
c0002416:	c1 ea 09             	shr    edx,0x9
c0002419:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c000241d:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002421:	e8 11 fe ff ff       	call   c0002237 <move_window>
c0002426:	85 c0                	test   eax,eax
c0002428:	75 81                	jne    c00023ab <find_volume+0x46>
c000242a:	81 e7 80 01 00 00    	and    edi,0x180
c0002430:	b9 10 00 00 00       	mov    ecx,0x10
c0002435:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0002439:	ba 10 02 02 c0       	mov    edx,0xc0020210
c000243e:	e8 b5 f6 ff ff       	call   c0001af8 <mem_cmp>
c0002443:	85 c0                	test   eax,eax
c0002445:	75 29                	jne    c0002470 <find_volume+0x10b>
c0002447:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c000244b:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c000244f:	e8 2a f6 ff ff       	call   c0001a7e <ld_qword>
c0002454:	89 d1                	mov    ecx,edx
c0002456:	89 c2                	mov    edx,eax
c0002458:	89 d8                	mov    eax,ebx
c000245a:	e8 4c fe ff ff       	call   c00022ab <check_fs>
c000245f:	85 f6                	test   esi,esi
c0002461:	75 07                	jne    c000246a <find_volume+0x105>
c0002463:	83 f8 01             	cmp    eax,0x1
c0002466:	77 08                	ja     c0002470 <find_volume+0x10b>
c0002468:	eb 77                	jmp    c00024e1 <find_volume+0x17c>
c000246a:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000246e:	74 71                	je     c00024e1 <find_volume+0x17c>
c0002470:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002474:	eb 89                	jmp    c00023ff <find_volume+0x9a>
c0002476:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000247a:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c0002480:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c0002486:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000248a:	89 cd                	mov    ebp,ecx
c000248c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0002490:	89 f8                	mov    eax,edi
c0002492:	83 c7 10             	add    edi,0x10
c0002495:	e8 cc f5 ff ff       	call   c0001a66 <ld_dword>
c000249a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000249e:	89 01                	mov    DWORD PTR [ecx],eax
c00024a0:	83 c1 04             	add    ecx,0x4
c00024a3:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00024a7:	75 e3                	jne    c000248c <find_volume+0x127>
c00024a9:	31 ff                	xor    edi,edi
c00024ab:	85 f6                	test   esi,esi
c00024ad:	74 03                	je     c00024b2 <find_volume+0x14d>
c00024af:	8d 7e ff             	lea    edi,[esi-0x1]
c00024b2:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00024b6:	85 d2                	test   edx,edx
c00024b8:	74 14                	je     c00024ce <find_volume+0x169>
c00024ba:	31 c9                	xor    ecx,ecx
c00024bc:	89 d8                	mov    eax,ebx
c00024be:	e8 e8 fd ff ff       	call   c00022ab <check_fs>
c00024c3:	83 f8 01             	cmp    eax,0x1
c00024c6:	76 19                	jbe    c00024e1 <find_volume+0x17c>
c00024c8:	85 f6                	test   esi,esi
c00024ca:	74 0f                	je     c00024db <find_volume+0x176>
c00024cc:	eb 13                	jmp    c00024e1 <find_volume+0x17c>
c00024ce:	85 f6                	test   esi,esi
c00024d0:	0f 85 ed fe ff ff    	jne    c00023c3 <find_volume+0x5e>
c00024d6:	b8 03 00 00 00       	mov    eax,0x3
c00024db:	47                   	inc    edi
c00024dc:	83 ff 03             	cmp    edi,0x3
c00024df:	76 d1                	jbe    c00024b2 <find_volume+0x14d>
c00024e1:	83 c4 3c             	add    esp,0x3c
c00024e4:	5b                   	pop    ebx
c00024e5:	5e                   	pop    esi
c00024e6:	5f                   	pop    edi
c00024e7:	5d                   	pop    ebp
c00024e8:	c3                   	ret    

c00024e9 <mount_volume>:
c00024e9:	55                   	push   ebp
c00024ea:	57                   	push   edi
c00024eb:	89 cf                	mov    edi,ecx
c00024ed:	56                   	push   esi
c00024ee:	53                   	push   ebx
c00024ef:	bb 0b 00 00 00       	mov    ebx,0xb
c00024f4:	83 ec 3c             	sub    esp,0x3c
c00024f7:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00024fd:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002501:	e8 35 fb ff ff       	call   c000203b <get_ldnumber>
c0002506:	85 c0                	test   eax,eax
c0002508:	0f 88 3a 05 00 00    	js     c0002a48 <mount_volume+0x55f>
c000250e:	8b 2c 85 20 43 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffdbce0]
c0002515:	89 c6                	mov    esi,eax
c0002517:	bb 0c 00 00 00       	mov    ebx,0xc
c000251c:	85 ed                	test   ebp,ebp
c000251e:	0f 84 24 05 00 00    	je     c0002a48 <mount_volume+0x55f>
c0002524:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002528:	83 e7 fe             	and    edi,0xfffffffe
c000252b:	89 2a                	mov    DWORD PTR [edx],ebp
c000252d:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c0002531:	74 32                	je     c0002565 <mount_volume+0x7c>
c0002533:	83 ec 0c             	sub    esp,0xc
c0002536:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c000253a:	50                   	push   eax
c000253b:	e8 c8 f4 ff ff       	call   c0001a08 <disk_status>
c0002540:	83 c4 10             	add    esp,0x10
c0002543:	a8 01                	test   al,0x1
c0002545:	75 1e                	jne    c0002565 <mount_volume+0x7c>
c0002547:	31 db                	xor    ebx,ebx
c0002549:	89 f9                	mov    ecx,edi
c000254b:	84 c9                	test   cl,cl
c000254d:	0f 84 f5 04 00 00    	je     c0002a48 <mount_volume+0x55f>
c0002553:	a8 04                	test   al,0x4
c0002555:	0f 84 ed 04 00 00    	je     c0002a48 <mount_volume+0x55f>
c000255b:	bb 0a 00 00 00       	mov    ebx,0xa
c0002560:	e9 e3 04 00 00       	jmp    c0002a48 <mount_volume+0x55f>
c0002565:	83 ec 0c             	sub    esp,0xc
c0002568:	89 f0                	mov    eax,esi
c000256a:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c000256e:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c0002571:	0f b6 f0             	movzx  esi,al
c0002574:	bb 03 00 00 00       	mov    ebx,0x3
c0002579:	56                   	push   esi
c000257a:	e8 8c f4 ff ff       	call   c0001a0b <disk_initialize>
c000257f:	83 c4 10             	add    esp,0x10
c0002582:	a8 01                	test   al,0x1
c0002584:	0f 85 be 04 00 00    	jne    c0002a48 <mount_volume+0x55f>
c000258a:	89 f9                	mov    ecx,edi
c000258c:	84 c9                	test   cl,cl
c000258e:	74 04                	je     c0002594 <mount_volume+0xab>
c0002590:	a8 04                	test   al,0x4
c0002592:	75 c7                	jne    c000255b <mount_volume+0x72>
c0002594:	31 d2                	xor    edx,edx
c0002596:	89 e8                	mov    eax,ebp
c0002598:	e8 c8 fd ff ff       	call   c0002365 <find_volume>
c000259d:	83 f8 04             	cmp    eax,0x4
c00025a0:	75 0a                	jne    c00025ac <mount_volume+0xc3>
c00025a2:	bb 01 00 00 00       	mov    ebx,0x1
c00025a7:	e9 9c 04 00 00       	jmp    c0002a48 <mount_volume+0x55f>
c00025ac:	83 f8 01             	cmp    eax,0x1
c00025af:	76 0a                	jbe    c00025bb <mount_volume+0xd2>
c00025b1:	bb 0d 00 00 00       	mov    ebx,0xd
c00025b6:	e9 8d 04 00 00       	jmp    c0002a48 <mount_volume+0x55f>
c00025bb:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00025be:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00025c1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00025c5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00025c9:	75 17                	jne    c00025e2 <mount_volume+0xf9>
c00025cb:	b8 0b 00 00 00       	mov    eax,0xb
c00025d0:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00025d5:	75 da                	jne    c00025b1 <mount_volume+0xc8>
c00025d7:	40                   	inc    eax
c00025d8:	83 f8 40             	cmp    eax,0x40
c00025db:	75 f3                	jne    c00025d0 <mount_volume+0xe7>
c00025dd:	e9 5a 02 00 00       	jmp    c000283c <mount_volume+0x353>
c00025e2:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00025e5:	e8 6f f4 ff ff       	call   c0001a59 <ld_word>
c00025ea:	66 3d 00 02          	cmp    ax,0x200
c00025ee:	75 c1                	jne    c00025b1 <mount_volume+0xc8>
c00025f0:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00025f3:	e8 61 f4 ff ff       	call   c0001a59 <ld_word>
c00025f8:	0f b7 c0             	movzx  eax,ax
c00025fb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00025ff:	85 c0                	test   eax,eax
c0002601:	75 0c                	jne    c000260f <mount_volume+0x126>
c0002603:	8d 45 78             	lea    eax,[ebp+0x78]
c0002606:	e8 5b f4 ff ff       	call   c0001a66 <ld_dword>
c000260b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000260f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002613:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002616:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c0002619:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c000261d:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002620:	48                   	dec    eax
c0002621:	3c 01                	cmp    al,0x1
c0002623:	77 8c                	ja     c00025b1 <mount_volume+0xc8>
c0002625:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c0002629:	89 c3                	mov    ebx,eax
c000262b:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c000262f:	66 85 c0             	test   ax,ax
c0002632:	0f 84 79 ff ff ff    	je     c00025b1 <mount_volume+0xc8>
c0002638:	8d 40 ff             	lea    eax,[eax-0x1]
c000263b:	85 d8                	test   eax,ebx
c000263d:	0f 85 6e ff ff ff    	jne    c00025b1 <mount_volume+0xc8>
c0002643:	8d 45 65             	lea    eax,[ebp+0x65]
c0002646:	e8 0e f4 ff ff       	call   c0001a59 <ld_word>
c000264b:	89 c7                	mov    edi,eax
c000264d:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002651:	a8 0f                	test   al,0xf
c0002653:	0f 85 58 ff ff ff    	jne    c00025b1 <mount_volume+0xc8>
c0002659:	8d 45 67             	lea    eax,[ebp+0x67]
c000265c:	e8 f8 f3 ff ff       	call   c0001a59 <ld_word>
c0002661:	0f b7 f0             	movzx  esi,ax
c0002664:	85 f6                	test   esi,esi
c0002666:	75 0a                	jne    c0002672 <mount_volume+0x189>
c0002668:	8d 45 74             	lea    eax,[ebp+0x74]
c000266b:	e8 f6 f3 ff ff       	call   c0001a66 <ld_dword>
c0002670:	89 c6                	mov    esi,eax
c0002672:	8d 45 62             	lea    eax,[ebp+0x62]
c0002675:	e8 df f3 ff ff       	call   c0001a59 <ld_word>
c000267a:	66 85 c0             	test   ax,ax
c000267d:	0f 84 2e ff ff ff    	je     c00025b1 <mount_volume+0xc8>
c0002683:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002688:	0f b7 c8             	movzx  ecx,ax
c000268b:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c0002690:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0002694:	89 fa                	mov    edx,edi
c0002696:	66 c1 ea 04          	shr    dx,0x4
c000269a:	0f b7 d2             	movzx  edx,dx
c000269d:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c00026a1:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00026a4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00026a8:	39 c6                	cmp    esi,eax
c00026aa:	0f 82 01 ff ff ff    	jb     c00025b1 <mount_volume+0xc8>
c00026b0:	29 c6                	sub    esi,eax
c00026b2:	31 d2                	xor    edx,edx
c00026b4:	89 f0                	mov    eax,esi
c00026b6:	f7 f3                	div    ebx
c00026b8:	39 de                	cmp    esi,ebx
c00026ba:	0f 82 f1 fe ff ff    	jb     c00025b1 <mount_volume+0xc8>
c00026c0:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00026c5:	0f 87 e6 fe ff ff    	ja     c00025b1 <mount_volume+0xc8>
c00026cb:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00026d0:	0f 86 63 03 00 00    	jbe    c0002a39 <mount_volume+0x550>
c00026d6:	bb 03 00 00 00       	mov    ebx,0x3
c00026db:	8d 70 02             	lea    esi,[eax+0x2]
c00026de:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00026e2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00026e6:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00026e9:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00026ec:	31 d2                	xor    edx,edx
c00026ee:	89 c8                	mov    eax,ecx
c00026f0:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00026f3:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00026f7:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00026fb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00026ff:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0002703:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002706:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002709:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000270d:	31 d2                	xor    edx,edx
c000270f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002713:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002717:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c000271a:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c000271d:	83 fb 03             	cmp    ebx,0x3
c0002720:	75 2b                	jne    c000274d <mount_volume+0x264>
c0002722:	8d 45 7e             	lea    eax,[ebp+0x7e]
c0002725:	e8 2f f3 ff ff       	call   c0001a59 <ld_word>
c000272a:	66 09 c7             	or     di,ax
c000272d:	0f 85 7e fe ff ff    	jne    c00025b1 <mount_volume+0xc8>
c0002733:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c0002739:	c1 e6 02             	shl    esi,0x2
c000273c:	e8 25 f3 ff ff       	call   c0001a66 <ld_dword>
c0002741:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002748:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000274b:	eb 30                	jmp    c000277d <mount_volume+0x294>
c000274d:	66 85 ff             	test   di,di
c0002750:	0f 84 5b fe ff ff    	je     c00025b1 <mount_volume+0xc8>
c0002756:	31 d2                	xor    edx,edx
c0002758:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000275c:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002760:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0002764:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002767:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c000276a:	83 fb 02             	cmp    ebx,0x2
c000276d:	75 04                	jne    c0002773 <mount_volume+0x28a>
c000276f:	01 f6                	add    esi,esi
c0002771:	eb 0a                	jmp    c000277d <mount_volume+0x294>
c0002773:	8d 04 76             	lea    eax,[esi+esi*2]
c0002776:	83 e6 01             	and    esi,0x1
c0002779:	d1 e8                	shr    eax,1
c000277b:	01 c6                	add    esi,eax
c000277d:	81 c6 ff 01 00 00    	add    esi,0x1ff
c0002783:	c1 ee 09             	shr    esi,0x9
c0002786:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000278a:	0f 87 21 fe ff ff    	ja     c00025b1 <mount_volume+0xc8>
c0002790:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002797:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c000279e:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c00027a2:	83 fb 03             	cmp    ebx,0x3
c00027a5:	75 7a                	jne    c0002821 <mount_volume+0x338>
c00027a7:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c00027ad:	e8 a7 f2 ff ff       	call   c0001a59 <ld_word>
c00027b2:	66 48                	dec    ax
c00027b4:	75 6b                	jne    c0002821 <mount_volume+0x338>
c00027b6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00027ba:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00027be:	83 c2 01             	add    edx,0x1
c00027c1:	89 e8                	mov    eax,ebp
c00027c3:	83 d1 00             	adc    ecx,0x0
c00027c6:	e8 6c fa ff ff       	call   c0002237 <move_window>
c00027cb:	85 c0                	test   eax,eax
c00027cd:	75 52                	jne    c0002821 <mount_volume+0x338>
c00027cf:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00027d3:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00027d9:	e8 7b f2 ff ff       	call   c0001a59 <ld_word>
c00027de:	66 3d 55 aa          	cmp    ax,0xaa55
c00027e2:	75 3d                	jne    c0002821 <mount_volume+0x338>
c00027e4:	8d 45 54             	lea    eax,[ebp+0x54]
c00027e7:	e8 7a f2 ff ff       	call   c0001a66 <ld_dword>
c00027ec:	3d 52 52 61 41       	cmp    eax,0x41615252
c00027f1:	75 2e                	jne    c0002821 <mount_volume+0x338>
c00027f3:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00027f9:	e8 68 f2 ff ff       	call   c0001a66 <ld_dword>
c00027fe:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002803:	75 1c                	jne    c0002821 <mount_volume+0x338>
c0002805:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c000280b:	e8 56 f2 ff ff       	call   c0001a66 <ld_dword>
c0002810:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0002813:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c0002819:	e8 48 f2 ff ff       	call   c0001a66 <ld_dword>
c000281e:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002821:	66 a1 00 43 02 c0    	mov    ax,ds:0xc0024300
c0002827:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000282a:	40                   	inc    eax
c000282b:	31 db                	xor    ebx,ebx
c000282d:	66 a3 00 43 02 c0    	mov    ds:0xc0024300,ax
c0002833:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002837:	e9 0c 02 00 00       	jmp    c0002a48 <mount_volume+0x55f>
c000283c:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002842:	e8 12 f2 ff ff       	call   c0001a59 <ld_word>
c0002847:	66 3d 00 01          	cmp    ax,0x100
c000284b:	0f 85 60 fd ff ff    	jne    c00025b1 <mount_volume+0xc8>
c0002851:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002858:	0f 85 53 fd ff ff    	jne    c00025b1 <mount_volume+0xc8>
c000285e:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002864:	e8 15 f2 ff ff       	call   c0001a7e <ld_qword>
c0002869:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000286d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002871:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002877:	e8 ea f1 ff ff       	call   c0001a66 <ld_dword>
c000287c:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c000287f:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002885:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002888:	fe c8                	dec    al
c000288a:	0f 85 21 fd ff ff    	jne    c00025b1 <mount_volume+0xc8>
c0002890:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002897:	bb 01 00 00 00       	mov    ebx,0x1
c000289c:	d3 e3                	shl    ebx,cl
c000289e:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c00028a2:	66 85 db             	test   bx,bx
c00028a5:	0f 84 06 fd ff ff    	je     c00025b1 <mount_volume+0xc8>
c00028ab:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c00028b1:	e8 b0 f1 ff ff       	call   c0001a66 <ld_dword>
c00028b6:	89 c6                	mov    esi,eax
c00028b8:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c00028bd:	0f 87 ee fc ff ff    	ja     c00025b1 <mount_volume+0xc8>
c00028c3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028c7:	8d 40 02             	lea    eax,[eax+0x2]
c00028ca:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028cd:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c00028d0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028d4:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028d7:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c00028dd:	e8 84 f1 ff ff       	call   c0001a66 <ld_dword>
c00028e2:	31 d2                	xor    edx,edx
c00028e4:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028e8:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028ec:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00028f0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00028f4:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00028f7:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00028fa:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002900:	e8 61 f1 ff ff       	call   c0001a66 <ld_dword>
c0002905:	31 d2                	xor    edx,edx
c0002907:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000290b:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000290f:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002913:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002916:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002919:	0f b7 c3             	movzx  eax,bx
c000291c:	31 d2                	xor    edx,edx
c000291e:	0f af f0             	imul   esi,eax
c0002921:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002925:	89 f0                	mov    eax,esi
c0002927:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c000292b:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c000292f:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002933:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002937:	39 c1                	cmp    ecx,eax
c0002939:	89 df                	mov    edi,ebx
c000293b:	19 d7                	sbb    edi,edx
c000293d:	0f 82 6e fc ff ff    	jb     c00025b1 <mount_volume+0xc8>
c0002943:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002949:	31 db                	xor    ebx,ebx
c000294b:	e8 16 f1 ff ff       	call   c0001a66 <ld_dword>
c0002950:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002957:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000295a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002962:	85 db                	test   ebx,ebx
c0002964:	75 39                	jne    c000299f <mount_volume+0x4b6>
c0002966:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000296a:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000296e:	0f 86 3d fc ff ff    	jbe    c00025b1 <mount_volume+0xc8>
c0002974:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002977:	31 ff                	xor    edi,edi
c0002979:	89 e8                	mov    eax,ebp
c000297b:	e8 72 f3 ff ff       	call   c0001cf2 <clst2sect>
c0002980:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002984:	01 c6                	add    esi,eax
c0002986:	89 e8                	mov    eax,ebp
c0002988:	11 d7                	adc    edi,edx
c000298a:	89 f2                	mov    edx,esi
c000298c:	89 f9                	mov    ecx,edi
c000298e:	e8 a4 f8 ff ff       	call   c0002237 <move_window>
c0002993:	85 c0                	test   eax,eax
c0002995:	0f 85 07 fc ff ff    	jne    c00025a2 <mount_volume+0xb9>
c000299b:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c000299f:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c00029a4:	74 0b                	je     c00029b1 <mount_volume+0x4c8>
c00029a6:	83 c3 20             	add    ebx,0x20
c00029a9:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00029af:	eb b1                	jmp    c0002962 <mount_volume+0x479>
c00029b1:	8d 75 54             	lea    esi,[ebp+0x54]
c00029b4:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c00029b8:	e8 a9 f0 ff ff       	call   c0001a66 <ld_dword>
c00029bd:	89 c3                	mov    ebx,eax
c00029bf:	83 f8 01             	cmp    eax,0x1
c00029c2:	0f 86 e9 fb ff ff    	jbe    c00025b1 <mount_volume+0xc8>
c00029c8:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00029cb:	0f 86 e0 fb ff ff    	jbe    c00025b1 <mount_volume+0xc8>
c00029d1:	8d 53 fe             	lea    edx,[ebx-0x2]
c00029d4:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00029d8:	0f af c2             	imul   eax,edx
c00029db:	31 d2                	xor    edx,edx
c00029dd:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c00029e0:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c00029e3:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c00029e6:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c00029e9:	31 c9                	xor    ecx,ecx
c00029eb:	89 da                	mov    edx,ebx
c00029ed:	89 e8                	mov    eax,ebp
c00029ef:	c1 ea 07             	shr    edx,0x7
c00029f2:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c00029f5:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c00029f8:	e8 3a f8 ff ff       	call   c0002237 <move_window>
c00029fd:	85 c0                	test   eax,eax
c00029ff:	0f 85 9d fb ff ff    	jne    c00025a2 <mount_volume+0xb9>
c0002a05:	89 d8                	mov    eax,ebx
c0002a07:	83 e0 7f             	and    eax,0x7f
c0002a0a:	8d 04 86             	lea    eax,[esi+eax*4]
c0002a0d:	e8 54 f0 ff ff       	call   c0001a66 <ld_dword>
c0002a12:	83 f8 ff             	cmp    eax,0xffffffff
c0002a15:	74 0a                	je     c0002a21 <mount_volume+0x538>
c0002a17:	43                   	inc    ebx
c0002a18:	39 d8                	cmp    eax,ebx
c0002a1a:	74 cd                	je     c00029e9 <mount_volume+0x500>
c0002a1c:	e9 90 fb ff ff       	jmp    c00025b1 <mount_volume+0xc8>
c0002a21:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002a28:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002a2f:	bb 04 00 00 00       	mov    ebx,0x4
c0002a34:	e9 e8 fd ff ff       	jmp    c0002821 <mount_volume+0x338>
c0002a39:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002a3e:	19 db                	sbb    ebx,ebx
c0002a40:	83 c3 02             	add    ebx,0x2
c0002a43:	e9 93 fc ff ff       	jmp    c00026db <mount_volume+0x1f2>
c0002a48:	83 c4 3c             	add    esp,0x3c
c0002a4b:	89 d8                	mov    eax,ebx
c0002a4d:	5b                   	pop    ebx
c0002a4e:	5e                   	pop    esi
c0002a4f:	5f                   	pop    edi
c0002a50:	5d                   	pop    ebp
c0002a51:	c3                   	ret    

c0002a52 <find_bitmap>:
c0002a52:	55                   	push   ebp
c0002a53:	57                   	push   edi
c0002a54:	89 c7                	mov    edi,eax
c0002a56:	56                   	push   esi
c0002a57:	8d 72 fe             	lea    esi,[edx-0x2]
c0002a5a:	53                   	push   ebx
c0002a5b:	83 ec 1c             	sub    esp,0x1c
c0002a5e:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002a61:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002a65:	83 e8 02             	sub    eax,0x2
c0002a68:	39 f0                	cmp    eax,esi
c0002a6a:	77 02                	ja     c0002a6e <find_bitmap+0x1c>
c0002a6c:	31 f6                	xor    esi,esi
c0002a6e:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002a72:	89 f3                	mov    ebx,esi
c0002a74:	31 ed                	xor    ebp,ebp
c0002a76:	31 c9                	xor    ecx,ecx
c0002a78:	89 da                	mov    edx,ebx
c0002a7a:	89 f8                	mov    eax,edi
c0002a7c:	c1 ea 0c             	shr    edx,0xc
c0002a7f:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002a82:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002a85:	e8 ad f7 ff ff       	call   c0002237 <move_window>
c0002a8a:	85 c0                	test   eax,eax
c0002a8c:	75 68                	jne    c0002af6 <find_bitmap+0xa4>
c0002a8e:	89 da                	mov    edx,ebx
c0002a90:	89 d9                	mov    ecx,ebx
c0002a92:	c1 ea 03             	shr    edx,0x3
c0002a95:	83 e1 07             	and    ecx,0x7
c0002a98:	b8 01 00 00 00       	mov    eax,0x1
c0002a9d:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002aa3:	d3 e0                	shl    eax,cl
c0002aa5:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002aa8:	83 e9 02             	sub    ecx,0x2
c0002aab:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002aaf:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002ab3:	43                   	inc    ebx
c0002ab4:	21 c1                	and    ecx,eax
c0002ab6:	d1 e0                	shl    eax,1
c0002ab8:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002abc:	77 09                	ja     c0002ac7 <find_bitmap+0x75>
c0002abe:	31 db                	xor    ebx,ebx
c0002ac0:	ba 00 02 00 00       	mov    edx,0x200
c0002ac5:	31 c0                	xor    eax,eax
c0002ac7:	84 c9                	test   cl,cl
c0002ac9:	75 10                	jne    c0002adb <find_bitmap+0x89>
c0002acb:	45                   	inc    ebp
c0002acc:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002ad0:	75 0f                	jne    c0002ae1 <find_bitmap+0x8f>
c0002ad2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ad6:	83 c0 02             	add    eax,0x2
c0002ad9:	eb 22                	jmp    c0002afd <find_bitmap+0xab>
c0002adb:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002adf:	31 ed                	xor    ebp,ebp
c0002ae1:	39 de                	cmp    esi,ebx
c0002ae3:	74 16                	je     c0002afb <find_bitmap+0xa9>
c0002ae5:	84 c0                	test   al,al
c0002ae7:	75 c6                	jne    c0002aaf <find_bitmap+0x5d>
c0002ae9:	42                   	inc    edx
c0002aea:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002af0:	77 84                	ja     c0002a76 <find_bitmap+0x24>
c0002af2:	b0 01                	mov    al,0x1
c0002af4:	eb b9                	jmp    c0002aaf <find_bitmap+0x5d>
c0002af6:	83 c8 ff             	or     eax,0xffffffff
c0002af9:	eb 02                	jmp    c0002afd <find_bitmap+0xab>
c0002afb:	31 c0                	xor    eax,eax
c0002afd:	83 c4 1c             	add    esp,0x1c
c0002b00:	5b                   	pop    ebx
c0002b01:	5e                   	pop    esi
c0002b02:	5f                   	pop    edi
c0002b03:	5d                   	pop    ebp
c0002b04:	c3                   	ret    

c0002b05 <change_bitmap>:
c0002b05:	55                   	push   ebp
c0002b06:	89 cd                	mov    ebp,ecx
c0002b08:	57                   	push   edi
c0002b09:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002b0c:	56                   	push   esi
c0002b0d:	89 c7                	mov    edi,eax
c0002b0f:	53                   	push   ebx
c0002b10:	89 c8                	mov    eax,ecx
c0002b12:	83 ec 1c             	sub    esp,0x1c
c0002b15:	31 d2                	xor    edx,edx
c0002b17:	89 ce                	mov    esi,ecx
c0002b19:	c1 e8 0c             	shr    eax,0xc
c0002b1c:	bb 01 00 00 00       	mov    ebx,0x1
c0002b21:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002b24:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002b27:	c1 ee 03             	shr    esi,0x3
c0002b2a:	83 e1 07             	and    ecx,0x7
c0002b2d:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002b33:	d3 e3                	shl    ebx,cl
c0002b35:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002b39:	89 c1                	mov    ecx,eax
c0002b3b:	89 d3                	mov    ebx,edx
c0002b3d:	83 c1 01             	add    ecx,0x1
c0002b40:	83 d3 00             	adc    ebx,0x0
c0002b43:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002b47:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002b4b:	89 d1                	mov    ecx,edx
c0002b4d:	89 c2                	mov    edx,eax
c0002b4f:	89 f8                	mov    eax,edi
c0002b51:	e8 e1 f6 ff ff       	call   c0002237 <move_window>
c0002b56:	89 c1                	mov    ecx,eax
c0002b58:	85 c0                	test   eax,eax
c0002b5a:	75 48                	jne    c0002ba4 <change_bitmap+0x9f>
c0002b5c:	31 d2                	xor    edx,edx
c0002b5e:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002b62:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002b66:	0f 95 c2             	setne  dl
c0002b69:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002b6d:	74 3c                	je     c0002bab <change_bitmap+0xa6>
c0002b6f:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002b73:	4d                   	dec    ebp
c0002b74:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002b78:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002b7c:	74 32                	je     c0002bb0 <change_bitmap+0xab>
c0002b7e:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002b82:	75 d8                	jne    c0002b5c <change_bitmap+0x57>
c0002b84:	8d 46 01             	lea    eax,[esi+0x1]
c0002b87:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002b8c:	89 c3                	mov    ebx,eax
c0002b8e:	31 f6                	xor    esi,esi
c0002b90:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002b94:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002b98:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002b9e:	74 99                	je     c0002b39 <change_bitmap+0x34>
c0002ba0:	89 de                	mov    esi,ebx
c0002ba2:	eb b8                	jmp    c0002b5c <change_bitmap+0x57>
c0002ba4:	b9 01 00 00 00       	mov    ecx,0x1
c0002ba9:	eb 05                	jmp    c0002bb0 <change_bitmap+0xab>
c0002bab:	b9 02 00 00 00       	mov    ecx,0x2
c0002bb0:	83 c4 1c             	add    esp,0x1c
c0002bb3:	89 c8                	mov    eax,ecx
c0002bb5:	5b                   	pop    ebx
c0002bb6:	5e                   	pop    esi
c0002bb7:	5f                   	pop    edi
c0002bb8:	5d                   	pop    ebp
c0002bb9:	c3                   	ret    

c0002bba <put_fat>:
c0002bba:	83 fa 01             	cmp    edx,0x1
c0002bbd:	0f 86 7b 01 00 00    	jbe    c0002d3e <put_fat+0x184>
c0002bc3:	55                   	push   ebp
c0002bc4:	57                   	push   edi
c0002bc5:	89 cf                	mov    edi,ecx
c0002bc7:	56                   	push   esi
c0002bc8:	b9 02 00 00 00       	mov    ecx,0x2
c0002bcd:	53                   	push   ebx
c0002bce:	89 c6                	mov    esi,eax
c0002bd0:	83 ec 1c             	sub    esp,0x1c
c0002bd3:	89 d3                	mov    ebx,edx
c0002bd5:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002bd8:	0f 86 68 01 00 00    	jbe    c0002d46 <put_fat+0x18c>
c0002bde:	8a 00                	mov    al,BYTE PTR [eax]
c0002be0:	3c 02                	cmp    al,0x2
c0002be2:	0f 84 c7 00 00 00    	je     c0002caf <put_fat+0xf5>
c0002be8:	77 09                	ja     c0002bf3 <put_fat+0x39>
c0002bea:	fe c8                	dec    al
c0002bec:	74 17                	je     c0002c05 <put_fat+0x4b>
c0002bee:	e9 53 01 00 00       	jmp    c0002d46 <put_fat+0x18c>
c0002bf3:	b9 02 00 00 00       	mov    ecx,0x2
c0002bf8:	3c 04                	cmp    al,0x4
c0002bfa:	0f 86 e1 00 00 00    	jbe    c0002ce1 <put_fat+0x127>
c0002c00:	e9 41 01 00 00       	jmp    c0002d46 <put_fat+0x18c>
c0002c05:	89 d5                	mov    ebp,edx
c0002c07:	31 c9                	xor    ecx,ecx
c0002c09:	d1 ed                	shr    ebp,1
c0002c0b:	89 f0                	mov    eax,esi
c0002c0d:	01 d5                	add    ebp,edx
c0002c0f:	89 ea                	mov    edx,ebp
c0002c11:	c1 ea 09             	shr    edx,0x9
c0002c14:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002c17:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002c1a:	e8 18 f6 ff ff       	call   c0002237 <move_window>
c0002c1f:	89 c1                	mov    ecx,eax
c0002c21:	85 c0                	test   eax,eax
c0002c23:	0f 85 1d 01 00 00    	jne    c0002d46 <put_fat+0x18c>
c0002c29:	8d 46 54             	lea    eax,[esi+0x54]
c0002c2c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002c30:	8d 45 01             	lea    eax,[ebp+0x1]
c0002c33:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002c39:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002c3d:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002c41:	89 f8                	mov    eax,edi
c0002c43:	83 e3 01             	and    ebx,0x1
c0002c46:	74 0d                	je     c0002c55 <put_fat+0x9b>
c0002c48:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002c4b:	89 fa                	mov    edx,edi
c0002c4d:	83 e0 0f             	and    eax,0xf
c0002c50:	c1 e2 04             	shl    edx,0x4
c0002c53:	09 d0                	or     eax,edx
c0002c55:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002c58:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002c5c:	31 c9                	xor    ecx,ecx
c0002c5e:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002c62:	c1 ea 09             	shr    edx,0x9
c0002c65:	89 f0                	mov    eax,esi
c0002c67:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002c6a:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002c6d:	e8 c5 f5 ff ff       	call   c0002237 <move_window>
c0002c72:	89 c1                	mov    ecx,eax
c0002c74:	85 c0                	test   eax,eax
c0002c76:	0f 85 ca 00 00 00    	jne    c0002d46 <put_fat+0x18c>
c0002c7c:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002c80:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002c86:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002c8a:	85 db                	test   ebx,ebx
c0002c8c:	74 07                	je     c0002c95 <put_fat+0xdb>
c0002c8e:	c1 ef 04             	shr    edi,0x4
c0002c91:	89 fa                	mov    edx,edi
c0002c93:	eb 0e                	jmp    c0002ca3 <put_fat+0xe9>
c0002c95:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002c98:	c1 ef 08             	shr    edi,0x8
c0002c9b:	83 e2 f0             	and    edx,0xfffffff0
c0002c9e:	83 e7 0f             	and    edi,0xf
c0002ca1:	09 fa                	or     edx,edi
c0002ca3:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002ca6:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002caa:	e9 97 00 00 00       	jmp    c0002d46 <put_fat+0x18c>
c0002caf:	31 c9                	xor    ecx,ecx
c0002cb1:	c1 ea 08             	shr    edx,0x8
c0002cb4:	89 f0                	mov    eax,esi
c0002cb6:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002cb9:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002cbc:	e8 76 f5 ff ff       	call   c0002237 <move_window>
c0002cc1:	89 c1                	mov    ecx,eax
c0002cc3:	85 c0                	test   eax,eax
c0002cc5:	75 7f                	jne    c0002d46 <put_fat+0x18c>
c0002cc7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002ccb:	01 db                	add    ebx,ebx
c0002ccd:	0f b7 d7             	movzx  edx,di
c0002cd0:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002cd6:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002cda:	e8 ec ed ff ff       	call   c0001acb <st_word>
c0002cdf:	eb 53                	jmp    c0002d34 <put_fat+0x17a>
c0002ce1:	31 c9                	xor    ecx,ecx
c0002ce3:	c1 ea 07             	shr    edx,0x7
c0002ce6:	89 f0                	mov    eax,esi
c0002ce8:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ceb:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002cee:	e8 44 f5 ff ff       	call   c0002237 <move_window>
c0002cf3:	89 c1                	mov    ecx,eax
c0002cf5:	85 c0                	test   eax,eax
c0002cf7:	75 4d                	jne    c0002d46 <put_fat+0x18c>
c0002cf9:	c1 e3 02             	shl    ebx,0x2
c0002cfc:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002d02:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002d05:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002d09:	74 1c                	je     c0002d27 <put_fat+0x16d>
c0002d0b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002d0f:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002d15:	89 d8                	mov    eax,ebx
c0002d17:	e8 4a ed ff ff       	call   c0001a66 <ld_dword>
c0002d1c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002d20:	25 00 00 00 f0       	and    eax,0xf0000000
c0002d25:	09 c7                	or     edi,eax
c0002d27:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d2b:	89 fa                	mov    edx,edi
c0002d2d:	89 d8                	mov    eax,ebx
c0002d2f:	e8 9b ed ff ff       	call   c0001acf <st_dword>
c0002d34:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002d38:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002d3c:	eb 08                	jmp    c0002d46 <put_fat+0x18c>
c0002d3e:	b9 02 00 00 00       	mov    ecx,0x2
c0002d43:	89 c8                	mov    eax,ecx
c0002d45:	c3                   	ret    
c0002d46:	83 c4 1c             	add    esp,0x1c
c0002d49:	89 c8                	mov    eax,ecx
c0002d4b:	5b                   	pop    ebx
c0002d4c:	5e                   	pop    esi
c0002d4d:	5f                   	pop    edi
c0002d4e:	5d                   	pop    ebp
c0002d4f:	c3                   	ret    

c0002d50 <fill_last_frag>:
c0002d50:	57                   	push   edi
c0002d51:	89 cf                	mov    edi,ecx
c0002d53:	56                   	push   esi
c0002d54:	89 d6                	mov    esi,edx
c0002d56:	53                   	push   ebx
c0002d57:	89 c3                	mov    ebx,eax
c0002d59:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002d5c:	85 c0                	test   eax,eax
c0002d5e:	74 21                	je     c0002d81 <fill_last_frag+0x31>
c0002d60:	89 f9                	mov    ecx,edi
c0002d62:	83 f8 01             	cmp    eax,0x1
c0002d65:	76 05                	jbe    c0002d6c <fill_last_frag+0x1c>
c0002d67:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002d6a:	29 c1                	sub    ecx,eax
c0002d6c:	8d 56 01             	lea    edx,[esi+0x1]
c0002d6f:	29 c2                	sub    edx,eax
c0002d71:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002d73:	e8 42 fe ff ff       	call   c0002bba <put_fat>
c0002d78:	85 c0                	test   eax,eax
c0002d7a:	75 05                	jne    c0002d81 <fill_last_frag+0x31>
c0002d7c:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002d7f:	eb d8                	jmp    c0002d59 <fill_last_frag+0x9>
c0002d81:	5b                   	pop    ebx
c0002d82:	5e                   	pop    esi
c0002d83:	5f                   	pop    edi
c0002d84:	c3                   	ret    

c0002d85 <fill_first_frag>:
c0002d85:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002d89:	75 2d                	jne    c0002db8 <fill_first_frag+0x33>
c0002d8b:	57                   	push   edi
c0002d8c:	56                   	push   esi
c0002d8d:	53                   	push   ebx
c0002d8e:	89 c3                	mov    ebx,eax
c0002d90:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002d93:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002d96:	01 d7                	add    edi,edx
c0002d98:	39 fa                	cmp    edx,edi
c0002d9a:	74 14                	je     c0002db0 <fill_first_frag+0x2b>
c0002d9c:	8d 72 01             	lea    esi,[edx+0x1]
c0002d9f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002da1:	89 f1                	mov    ecx,esi
c0002da3:	e8 12 fe ff ff       	call   c0002bba <put_fat>
c0002da8:	89 f2                	mov    edx,esi
c0002daa:	85 c0                	test   eax,eax
c0002dac:	74 ea                	je     c0002d98 <fill_first_frag+0x13>
c0002dae:	eb 0b                	jmp    c0002dbb <fill_first_frag+0x36>
c0002db0:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002db4:	31 c0                	xor    eax,eax
c0002db6:	eb 03                	jmp    c0002dbb <fill_first_frag+0x36>
c0002db8:	31 c0                	xor    eax,eax
c0002dba:	c3                   	ret    
c0002dbb:	5b                   	pop    ebx
c0002dbc:	5e                   	pop    esi
c0002dbd:	5f                   	pop    edi
c0002dbe:	c3                   	ret    

c0002dbf <get_fat>:
c0002dbf:	83 fa 01             	cmp    edx,0x1
c0002dc2:	0f 86 db 01 00 00    	jbe    c0002fa3 <get_fat+0x1e4>
c0002dc8:	55                   	push   ebp
c0002dc9:	b9 01 00 00 00       	mov    ecx,0x1
c0002dce:	57                   	push   edi
c0002dcf:	56                   	push   esi
c0002dd0:	53                   	push   ebx
c0002dd1:	83 ec 1c             	sub    esp,0x1c
c0002dd4:	8b 38                	mov    edi,DWORD PTR [eax]
c0002dd6:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002dd9:	0f 86 cc 01 00 00    	jbe    c0002fab <get_fat+0x1ec>
c0002ddf:	89 c3                	mov    ebx,eax
c0002de1:	89 d6                	mov    esi,edx
c0002de3:	8a 07                	mov    al,BYTE PTR [edi]
c0002de5:	3c 02                	cmp    al,0x2
c0002de7:	0f 84 99 00 00 00    	je     c0002e86 <get_fat+0xc7>
c0002ded:	77 09                	ja     c0002df8 <get_fat+0x39>
c0002def:	fe c8                	dec    al
c0002df1:	74 1a                	je     c0002e0d <get_fat+0x4e>
c0002df3:	e9 b3 01 00 00       	jmp    c0002fab <get_fat+0x1ec>
c0002df8:	3c 03                	cmp    al,0x3
c0002dfa:	0f 84 b5 00 00 00    	je     c0002eb5 <get_fat+0xf6>
c0002e00:	3c 04                	cmp    al,0x4
c0002e02:	0f 84 e3 00 00 00    	je     c0002eeb <get_fat+0x12c>
c0002e08:	e9 9e 01 00 00       	jmp    c0002fab <get_fat+0x1ec>
c0002e0d:	89 d3                	mov    ebx,edx
c0002e0f:	31 c9                	xor    ecx,ecx
c0002e11:	d1 eb                	shr    ebx,1
c0002e13:	89 f8                	mov    eax,edi
c0002e15:	01 d3                	add    ebx,edx
c0002e17:	89 da                	mov    edx,ebx
c0002e19:	c1 ea 09             	shr    edx,0x9
c0002e1c:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e1f:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e22:	e8 10 f4 ff ff       	call   c0002237 <move_window>
c0002e27:	85 c0                	test   eax,eax
c0002e29:	74 08                	je     c0002e33 <get_fat+0x74>
c0002e2b:	83 c9 ff             	or     ecx,0xffffffff
c0002e2e:	e9 78 01 00 00       	jmp    c0002fab <get_fat+0x1ec>
c0002e33:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0002e36:	31 c9                	xor    ecx,ecx
c0002e38:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002e3e:	89 ea                	mov    edx,ebp
c0002e40:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0002e44:	c1 ea 09             	shr    edx,0x9
c0002e47:	89 f8                	mov    eax,edi
c0002e49:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e4c:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e4f:	e8 e3 f3 ff ff       	call   c0002237 <move_window>
c0002e54:	85 c0                	test   eax,eax
c0002e56:	75 d3                	jne    c0002e2b <get_fat+0x6c>
c0002e58:	0f b6 c3             	movzx  eax,bl
c0002e5b:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e61:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0002e66:	c1 e3 08             	shl    ebx,0x8
c0002e69:	09 c3                	or     ebx,eax
c0002e6b:	89 d9                	mov    ecx,ebx
c0002e6d:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0002e73:	83 e6 01             	and    esi,0x1
c0002e76:	0f 84 2f 01 00 00    	je     c0002fab <get_fat+0x1ec>
c0002e7c:	89 d9                	mov    ecx,ebx
c0002e7e:	c1 e9 04             	shr    ecx,0x4
c0002e81:	e9 25 01 00 00       	jmp    c0002fab <get_fat+0x1ec>
c0002e86:	31 c9                	xor    ecx,ecx
c0002e88:	c1 ea 08             	shr    edx,0x8
c0002e8b:	89 f8                	mov    eax,edi
c0002e8d:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e90:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e93:	e8 9f f3 ff ff       	call   c0002237 <move_window>
c0002e98:	85 c0                	test   eax,eax
c0002e9a:	75 8f                	jne    c0002e2b <get_fat+0x6c>
c0002e9c:	01 f6                	add    esi,esi
c0002e9e:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0002ea4:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002ea8:	e8 ac eb ff ff       	call   c0001a59 <ld_word>
c0002ead:	0f b7 c8             	movzx  ecx,ax
c0002eb0:	e9 f6 00 00 00       	jmp    c0002fab <get_fat+0x1ec>
c0002eb5:	31 c9                	xor    ecx,ecx
c0002eb7:	c1 ea 07             	shr    edx,0x7
c0002eba:	89 f8                	mov    eax,edi
c0002ebc:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002ebf:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002ec2:	e8 70 f3 ff ff       	call   c0002237 <move_window>
c0002ec7:	85 c0                	test   eax,eax
c0002ec9:	0f 85 5c ff ff ff    	jne    c0002e2b <get_fat+0x6c>
c0002ecf:	c1 e6 02             	shl    esi,0x2
c0002ed2:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002ed8:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002edc:	e8 85 eb ff ff       	call   c0001a66 <ld_dword>
c0002ee1:	25 ff ff ff 0f       	and    eax,0xfffffff
c0002ee6:	e9 b4 00 00 00       	jmp    c0002f9f <get_fat+0x1e0>
c0002eeb:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0002eee:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002ef1:	89 d1                	mov    ecx,edx
c0002ef3:	09 c1                	or     ecx,eax
c0002ef5:	74 06                	je     c0002efd <get_fat+0x13e>
c0002ef7:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0002efb:	75 0f                	jne    c0002f0c <get_fat+0x14d>
c0002efd:	b9 01 00 00 00       	mov    ecx,0x1
c0002f02:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c0002f06:	0f 85 9f 00 00 00    	jne    c0002fab <get_fat+0x1ec>
c0002f0c:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0002f10:	89 f5                	mov    ebp,esi
c0002f12:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c0002f17:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0002f1a:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0002f1d:	80 f9 02             	cmp    cl,0x2
c0002f20:	75 35                	jne    c0002f57 <get_fat+0x198>
c0002f22:	83 c0 ff             	add    eax,0xffffffff
c0002f25:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0002f2a:	83 d2 ff             	adc    edx,0xffffffff
c0002f2d:	31 db                	xor    ebx,ebx
c0002f2f:	0f ac d0 09          	shrd   eax,edx,0x9
c0002f33:	53                   	push   ebx
c0002f34:	c1 ea 09             	shr    edx,0x9
c0002f37:	51                   	push   ecx
c0002f38:	52                   	push   edx
c0002f39:	50                   	push   eax
c0002f3a:	e8 8d c2 01 00       	call   c001f1cc <__udivdi3>
c0002f3f:	83 c4 10             	add    esp,0x10
c0002f42:	b9 01 00 00 00       	mov    ecx,0x1
c0002f47:	39 c5                	cmp    ebp,eax
c0002f49:	77 60                	ja     c0002fab <get_fat+0x1ec>
c0002f4b:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002f50:	74 59                	je     c0002fab <get_fat+0x1ec>
c0002f52:	8d 4e 01             	lea    ecx,[esi+0x1]
c0002f55:	eb 54                	jmp    c0002fab <get_fat+0x1ec>
c0002f57:	80 f9 03             	cmp    cl,0x3
c0002f5a:	75 05                	jne    c0002f61 <get_fat+0x1a2>
c0002f5c:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0002f5f:	77 f1                	ja     c0002f52 <get_fat+0x193>
c0002f61:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002f66:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0002f6a:	75 3f                	jne    c0002fab <get_fat+0x1ec>
c0002f6c:	31 c9                	xor    ecx,ecx
c0002f6e:	89 f2                	mov    edx,esi
c0002f70:	89 f8                	mov    eax,edi
c0002f72:	c1 ea 07             	shr    edx,0x7
c0002f75:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f78:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f7b:	e8 b7 f2 ff ff       	call   c0002237 <move_window>
c0002f80:	85 c0                	test   eax,eax
c0002f82:	0f 85 a3 fe ff ff    	jne    c0002e2b <get_fat+0x6c>
c0002f88:	c1 e6 02             	shl    esi,0x2
c0002f8b:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002f91:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002f95:	e8 cc ea ff ff       	call   c0001a66 <ld_dword>
c0002f9a:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0002f9f:	89 c1                	mov    ecx,eax
c0002fa1:	eb 08                	jmp    c0002fab <get_fat+0x1ec>
c0002fa3:	b9 01 00 00 00       	mov    ecx,0x1
c0002fa8:	89 c8                	mov    eax,ecx
c0002faa:	c3                   	ret    
c0002fab:	83 c4 1c             	add    esp,0x1c
c0002fae:	89 c8                	mov    eax,ecx
c0002fb0:	5b                   	pop    ebx
c0002fb1:	5e                   	pop    esi
c0002fb2:	5f                   	pop    edi
c0002fb3:	5d                   	pop    ebp
c0002fb4:	c3                   	ret    

c0002fb5 <dir_sdi>:
c0002fb5:	55                   	push   ebp
c0002fb6:	57                   	push   edi
c0002fb7:	56                   	push   esi
c0002fb8:	53                   	push   ebx
c0002fb9:	89 c3                	mov    ebx,eax
c0002fbb:	83 ec 1c             	sub    esp,0x1c
c0002fbe:	8b 38                	mov    edi,DWORD PTR [eax]
c0002fc0:	31 c0                	xor    eax,eax
c0002fc2:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0002fc5:	0f 94 c0             	sete   al
c0002fc8:	48                   	dec    eax
c0002fc9:	25 00 00 20 f0       	and    eax,0xf0200000
c0002fce:	05 00 00 00 10       	add    eax,0x10000000
c0002fd3:	39 d0                	cmp    eax,edx
c0002fd5:	77 0a                	ja     c0002fe1 <dir_sdi+0x2c>
c0002fd7:	b8 02 00 00 00       	mov    eax,0x2
c0002fdc:	e9 c4 00 00 00       	jmp    c00030a5 <dir_sdi+0xf0>
c0002fe1:	89 d6                	mov    esi,edx
c0002fe3:	f6 c2 1f             	test   dl,0x1f
c0002fe6:	75 ef                	jne    c0002fd7 <dir_sdi+0x22>
c0002fe8:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0002feb:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c0002fee:	85 c9                	test   ecx,ecx
c0002ff0:	75 2d                	jne    c000301f <dir_sdi+0x6a>
c0002ff2:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0002ff5:	77 1b                	ja     c0003012 <dir_sdi+0x5d>
c0002ff7:	89 f2                	mov    edx,esi
c0002ff9:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0002ffd:	c1 ea 05             	shr    edx,0x5
c0003000:	39 c2                	cmp    edx,eax
c0003002:	73 d3                	jae    c0002fd7 <dir_sdi+0x22>
c0003004:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0003007:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c000300a:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000300d:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003010:	eb 4b                	jmp    c000305d <dir_sdi+0xa8>
c0003012:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0003015:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0003019:	85 c0                	test   eax,eax
c000301b:	74 da                	je     c0002ff7 <dir_sdi+0x42>
c000301d:	89 c1                	mov    ecx,eax
c000301f:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0003023:	c1 e5 09             	shl    ebp,0x9
c0003026:	89 ca                	mov    edx,ecx
c0003028:	39 ee                	cmp    esi,ebp
c000302a:	72 1c                	jb     c0003048 <dir_sdi+0x93>
c000302c:	89 d8                	mov    eax,ebx
c000302e:	e8 8c fd ff ff       	call   c0002dbf <get_fat>
c0003033:	89 c1                	mov    ecx,eax
c0003035:	83 f8 ff             	cmp    eax,0xffffffff
c0003038:	74 66                	je     c00030a0 <dir_sdi+0xeb>
c000303a:	83 f8 01             	cmp    eax,0x1
c000303d:	76 98                	jbe    c0002fd7 <dir_sdi+0x22>
c000303f:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0003042:	76 93                	jbe    c0002fd7 <dir_sdi+0x22>
c0003044:	29 ee                	sub    esi,ebp
c0003046:	eb de                	jmp    c0003026 <dir_sdi+0x71>
c0003048:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000304c:	89 f8                	mov    eax,edi
c000304e:	e8 9f ec ff ff       	call   c0001cf2 <clst2sect>
c0003053:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003057:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000305a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000305d:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0003060:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0003063:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0003066:	89 d1                	mov    ecx,edx
c0003068:	09 c1                	or     ecx,eax
c000306a:	0f 84 67 ff ff ff    	je     c0002fd7 <dir_sdi+0x22>
c0003070:	89 f1                	mov    ecx,esi
c0003072:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000307a:	c1 e9 09             	shr    ecx,0x9
c000307d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003081:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003085:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003089:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000308c:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0003092:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003095:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003099:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000309c:	31 c0                	xor    eax,eax
c000309e:	eb 05                	jmp    c00030a5 <dir_sdi+0xf0>
c00030a0:	b8 01 00 00 00       	mov    eax,0x1
c00030a5:	83 c4 1c             	add    esp,0x1c
c00030a8:	5b                   	pop    ebx
c00030a9:	5e                   	pop    esi
c00030aa:	5f                   	pop    edi
c00030ab:	5d                   	pop    ebp
c00030ac:	c3                   	ret    

c00030ad <create_chain>:
c00030ad:	55                   	push   ebp
c00030ae:	89 c5                	mov    ebp,eax
c00030b0:	57                   	push   edi
c00030b1:	56                   	push   esi
c00030b2:	53                   	push   ebx
c00030b3:	83 ec 1c             	sub    esp,0x1c
c00030b6:	85 d2                	test   edx,edx
c00030b8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00030bc:	8b 30                	mov    esi,DWORD PTR [eax]
c00030be:	75 0e                	jne    c00030ce <create_chain+0x21>
c00030c0:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00030c3:	85 ff                	test   edi,edi
c00030c5:	74 39                	je     c0003100 <create_chain+0x53>
c00030c7:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c00030ca:	77 39                	ja     c0003105 <create_chain+0x58>
c00030cc:	eb 32                	jmp    c0003100 <create_chain+0x53>
c00030ce:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00030d2:	e8 e8 fc ff ff       	call   c0002dbf <get_fat>
c00030d7:	89 c3                	mov    ebx,eax
c00030d9:	83 f8 01             	cmp    eax,0x1
c00030dc:	77 0a                	ja     c00030e8 <create_chain+0x3b>
c00030de:	bb 01 00 00 00       	mov    ebx,0x1
c00030e3:	e9 ba 01 00 00       	jmp    c00032a2 <create_chain+0x1f5>
c00030e8:	83 f8 ff             	cmp    eax,0xffffffff
c00030eb:	0f 84 62 01 00 00    	je     c0003253 <create_chain+0x1a6>
c00030f1:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00030f4:	0f 87 a8 01 00 00    	ja     c00032a2 <create_chain+0x1f5>
c00030fa:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00030fe:	eb 05                	jmp    c0003105 <create_chain+0x58>
c0003100:	bf 01 00 00 00       	mov    edi,0x1
c0003105:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c0003109:	75 07                	jne    c0003112 <create_chain+0x65>
c000310b:	31 db                	xor    ebx,ebx
c000310d:	e9 90 01 00 00       	jmp    c00032a2 <create_chain+0x1f5>
c0003112:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003115:	75 74                	jne    c000318b <create_chain+0xde>
c0003117:	b9 01 00 00 00       	mov    ecx,0x1
c000311c:	89 fa                	mov    edx,edi
c000311e:	89 f0                	mov    eax,esi
c0003120:	e8 2d f9 ff ff       	call   c0002a52 <find_bitmap>
c0003125:	89 c3                	mov    ebx,eax
c0003127:	8d 40 ff             	lea    eax,[eax-0x1]
c000312a:	83 f8 fd             	cmp    eax,0xfffffffd
c000312d:	0f 87 6f 01 00 00    	ja     c00032a2 <create_chain+0x1f5>
c0003133:	83 ec 0c             	sub    esp,0xc
c0003136:	b9 01 00 00 00       	mov    ecx,0x1
c000313b:	6a 01                	push   0x1
c000313d:	89 da                	mov    edx,ebx
c000313f:	89 f0                	mov    eax,esi
c0003141:	e8 bf f9 ff ff       	call   c0002b05 <change_bitmap>
c0003146:	83 c4 10             	add    esp,0x10
c0003149:	83 f8 02             	cmp    eax,0x2
c000314c:	74 90                	je     c00030de <create_chain+0x31>
c000314e:	83 f8 01             	cmp    eax,0x1
c0003151:	0f 84 fc 00 00 00    	je     c0003253 <create_chain+0x1a6>
c0003157:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000315c:	75 09                	jne    c0003167 <create_chain+0xba>
c000315e:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c0003162:	e9 0c 01 00 00       	jmp    c0003273 <create_chain+0x1c6>
c0003167:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c000316b:	0f 85 e7 00 00 00    	jne    c0003258 <create_chain+0x1ab>
c0003171:	8d 57 01             	lea    edx,[edi+0x1]
c0003174:	39 da                	cmp    edx,ebx
c0003176:	0f 84 f7 00 00 00    	je     c0003273 <create_chain+0x1c6>
c000317c:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c000317f:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c0003183:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c0003186:	e9 cd 00 00 00       	jmp    c0003258 <create_chain+0x1ab>
c000318b:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c000318f:	75 41                	jne    c00031d2 <create_chain+0x125>
c0003191:	8d 5f 01             	lea    ebx,[edi+0x1]
c0003194:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003197:	77 05                	ja     c000319e <create_chain+0xf1>
c0003199:	bb 02 00 00 00       	mov    ebx,0x2
c000319e:	89 da                	mov    edx,ebx
c00031a0:	89 e8                	mov    eax,ebp
c00031a2:	e8 18 fc ff ff       	call   c0002dbf <get_fat>
c00031a7:	83 f8 01             	cmp    eax,0x1
c00031aa:	0f 84 2e ff ff ff    	je     c00030de <create_chain+0x31>
c00031b0:	83 f8 ff             	cmp    eax,0xffffffff
c00031b3:	0f 84 9a 00 00 00    	je     c0003253 <create_chain+0x1a6>
c00031b9:	85 c0                	test   eax,eax
c00031bb:	74 11                	je     c00031ce <create_chain+0x121>
c00031bd:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00031c0:	83 f8 01             	cmp    eax,0x1
c00031c3:	76 0d                	jbe    c00031d2 <create_chain+0x125>
c00031c5:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00031c8:	76 08                	jbe    c00031d2 <create_chain+0x125>
c00031ca:	89 c7                	mov    edi,eax
c00031cc:	eb 04                	jmp    c00031d2 <create_chain+0x125>
c00031ce:	85 db                	test   ebx,ebx
c00031d0:	75 38                	jne    c000320a <create_chain+0x15d>
c00031d2:	89 fb                	mov    ebx,edi
c00031d4:	43                   	inc    ebx
c00031d5:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00031d8:	77 0e                	ja     c00031e8 <create_chain+0x13b>
c00031da:	83 ff 01             	cmp    edi,0x1
c00031dd:	0f 86 28 ff ff ff    	jbe    c000310b <create_chain+0x5e>
c00031e3:	bb 02 00 00 00       	mov    ebx,0x2
c00031e8:	89 da                	mov    edx,ebx
c00031ea:	89 e8                	mov    eax,ebp
c00031ec:	e8 ce fb ff ff       	call   c0002dbf <get_fat>
c00031f1:	85 c0                	test   eax,eax
c00031f3:	74 15                	je     c000320a <create_chain+0x15d>
c00031f5:	83 f8 01             	cmp    eax,0x1
c00031f8:	0f 84 e0 fe ff ff    	je     c00030de <create_chain+0x31>
c00031fe:	40                   	inc    eax
c00031ff:	74 52                	je     c0003253 <create_chain+0x1a6>
c0003201:	39 fb                	cmp    ebx,edi
c0003203:	75 cf                	jne    c00031d4 <create_chain+0x127>
c0003205:	e9 01 ff ff ff       	jmp    c000310b <create_chain+0x5e>
c000320a:	83 c9 ff             	or     ecx,0xffffffff
c000320d:	89 da                	mov    edx,ebx
c000320f:	89 f0                	mov    eax,esi
c0003211:	e8 a4 f9 ff ff       	call   c0002bba <put_fat>
c0003216:	85 c0                	test   eax,eax
c0003218:	75 32                	jne    c000324c <create_chain+0x19f>
c000321a:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000321f:	74 11                	je     c0003232 <create_chain+0x185>
c0003221:	89 d9                	mov    ecx,ebx
c0003223:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003227:	89 f0                	mov    eax,esi
c0003229:	e8 8c f9 ff ff       	call   c0002bba <put_fat>
c000322e:	85 c0                	test   eax,eax
c0003230:	75 1a                	jne    c000324c <create_chain+0x19f>
c0003232:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0003235:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003238:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c000323b:	8d 51 fe             	lea    edx,[ecx-0x2]
c000323e:	39 d0                	cmp    eax,edx
c0003240:	77 04                	ja     c0003246 <create_chain+0x199>
c0003242:	48                   	dec    eax
c0003243:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003246:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c000324a:	eb 56                	jmp    c00032a2 <create_chain+0x1f5>
c000324c:	48                   	dec    eax
c000324d:	0f 85 8b fe ff ff    	jne    c00030de <create_chain+0x31>
c0003253:	83 cb ff             	or     ebx,0xffffffff
c0003256:	eb 4a                	jmp    c00032a2 <create_chain+0x1f5>
c0003258:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000325c:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c000325f:	41                   	inc    ecx
c0003260:	39 d9                	cmp    ecx,ebx
c0003262:	75 19                	jne    c000327d <create_chain+0x1d0>
c0003264:	b9 02 00 00 00       	mov    ecx,0x2
c0003269:	85 d2                	test   edx,edx
c000326b:	74 03                	je     c0003270 <create_chain+0x1c3>
c000326d:	8d 4a 01             	lea    ecx,[edx+0x1]
c0003270:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0003273:	85 c0                	test   eax,eax
c0003275:	0f 85 63 fe ff ff    	jne    c00030de <create_chain+0x31>
c000327b:	eb b5                	jmp    c0003232 <create_chain+0x185>
c000327d:	85 d2                	test   edx,edx
c000327f:	75 07                	jne    c0003288 <create_chain+0x1db>
c0003281:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003288:	89 d9                	mov    ecx,ebx
c000328a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000328e:	89 e8                	mov    eax,ebp
c0003290:	e8 bb fa ff ff       	call   c0002d50 <fill_last_frag>
c0003295:	85 c0                	test   eax,eax
c0003297:	75 b3                	jne    c000324c <create_chain+0x19f>
c0003299:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00032a0:	eb 90                	jmp    c0003232 <create_chain+0x185>
c00032a2:	83 c4 1c             	add    esp,0x1c
c00032a5:	89 d8                	mov    eax,ebx
c00032a7:	5b                   	pop    ebx
c00032a8:	5e                   	pop    esi
c00032a9:	5f                   	pop    edi
c00032aa:	5d                   	pop    ebp
c00032ab:	c3                   	ret    

c00032ac <remove_chain>:
c00032ac:	55                   	push   ebp
c00032ad:	57                   	push   edi
c00032ae:	56                   	push   esi
c00032af:	53                   	push   ebx
c00032b0:	83 ec 1c             	sub    esp,0x1c
c00032b3:	83 fa 01             	cmp    edx,0x1
c00032b6:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00032ba:	8b 18                	mov    ebx,DWORD PTR [eax]
c00032bc:	77 0a                	ja     c00032c8 <remove_chain+0x1c>
c00032be:	b8 02 00 00 00       	mov    eax,0x2
c00032c3:	e9 24 01 00 00       	jmp    c00033ec <remove_chain+0x140>
c00032c8:	89 d6                	mov    esi,edx
c00032ca:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00032cd:	76 ef                	jbe    c00032be <remove_chain+0x12>
c00032cf:	89 c7                	mov    edi,eax
c00032d1:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00032d6:	75 06                	jne    c00032de <remove_chain+0x32>
c00032d8:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00032dc:	eb 54                	jmp    c0003332 <remove_chain+0x86>
c00032de:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00032e1:	75 06                	jne    c00032e9 <remove_chain+0x3d>
c00032e3:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00032e7:	74 ef                	je     c00032d8 <remove_chain+0x2c>
c00032e9:	83 c9 ff             	or     ecx,0xffffffff
c00032ec:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00032f0:	89 d8                	mov    eax,ebx
c00032f2:	e8 c3 f8 ff ff       	call   c0002bba <put_fat>
c00032f7:	85 c0                	test   eax,eax
c00032f9:	74 dd                	je     c00032d8 <remove_chain+0x2c>
c00032fb:	e9 ec 00 00 00       	jmp    c00033ec <remove_chain+0x140>
c0003300:	83 f8 01             	cmp    eax,0x1
c0003303:	74 b9                	je     c00032be <remove_chain+0x12>
c0003305:	83 f8 ff             	cmp    eax,0xffffffff
c0003308:	74 6d                	je     c0003377 <remove_chain+0xcb>
c000330a:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000330d:	75 6f                	jne    c000337e <remove_chain+0xd2>
c000330f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0003312:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c0003315:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003318:	39 d0                	cmp    eax,edx
c000331a:	73 08                	jae    c0003324 <remove_chain+0x78>
c000331c:	40                   	inc    eax
c000331d:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003321:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003324:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003327:	39 e9                	cmp    ecx,ebp
c0003329:	75 64                	jne    c000338f <remove_chain+0xe3>
c000332b:	89 ee                	mov    esi,ebp
c000332d:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003330:	76 0f                	jbe    c0003341 <remove_chain+0x95>
c0003332:	89 f2                	mov    edx,esi
c0003334:	89 f8                	mov    eax,edi
c0003336:	e8 84 fa ff ff       	call   c0002dbf <get_fat>
c000333b:	89 c5                	mov    ebp,eax
c000333d:	85 c0                	test   eax,eax
c000333f:	75 bf                	jne    c0003300 <remove_chain+0x54>
c0003341:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003344:	0f 85 a0 00 00 00    	jne    c00033ea <remove_chain+0x13e>
c000334a:	eb 6c                	jmp    c00033b8 <remove_chain+0x10c>
c000334c:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c000334f:	84 c0                	test   al,al
c0003351:	75 7d                	jne    c00033d0 <remove_chain+0x124>
c0003353:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0003356:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c000335a:	0f 84 86 00 00 00    	je     c00033e6 <remove_chain+0x13a>
c0003360:	89 da                	mov    edx,ebx
c0003362:	89 f8                	mov    eax,edi
c0003364:	e8 56 fa ff ff       	call   c0002dbf <get_fat>
c0003369:	83 f8 01             	cmp    eax,0x1
c000336c:	0f 86 4c ff ff ff    	jbe    c00032be <remove_chain+0x12>
c0003372:	83 f8 ff             	cmp    eax,0xffffffff
c0003375:	75 4e                	jne    c00033c5 <remove_chain+0x119>
c0003377:	b8 01 00 00 00       	mov    eax,0x1
c000337c:	eb 6e                	jmp    c00033ec <remove_chain+0x140>
c000337e:	31 c9                	xor    ecx,ecx
c0003380:	89 f2                	mov    edx,esi
c0003382:	89 d8                	mov    eax,ebx
c0003384:	e8 31 f8 ff ff       	call   c0002bba <put_fat>
c0003389:	85 c0                	test   eax,eax
c000338b:	74 82                	je     c000330f <remove_chain+0x63>
c000338d:	eb 5d                	jmp    c00033ec <remove_chain+0x140>
c000338f:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003392:	75 1b                	jne    c00033af <remove_chain+0x103>
c0003394:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0003398:	89 d8                	mov    eax,ebx
c000339a:	83 ec 0c             	sub    esp,0xc
c000339d:	6a 00                	push   0x0
c000339f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00033a3:	e8 5d f7 ff ff       	call   c0002b05 <change_bitmap>
c00033a8:	83 c4 10             	add    esp,0x10
c00033ab:	85 c0                	test   eax,eax
c00033ad:	75 3d                	jne    c00033ec <remove_chain+0x140>
c00033af:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00033b3:	e9 73 ff ff ff       	jmp    c000332b <remove_chain+0x7f>
c00033b8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00033bd:	75 8d                	jne    c000334c <remove_chain+0xa0>
c00033bf:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00033c3:	eb 25                	jmp    c00033ea <remove_chain+0x13e>
c00033c5:	8d 53 01             	lea    edx,[ebx+0x1]
c00033c8:	89 c3                	mov    ebx,eax
c00033ca:	39 c2                	cmp    edx,eax
c00033cc:	74 88                	je     c0003356 <remove_chain+0xaa>
c00033ce:	eb 1a                	jmp    c00033ea <remove_chain+0x13e>
c00033d0:	3c 03                	cmp    al,0x3
c00033d2:	75 16                	jne    c00033ea <remove_chain+0x13e>
c00033d4:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00033d7:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00033db:	77 0d                	ja     c00033ea <remove_chain+0x13e>
c00033dd:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00033e0:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00033e4:	72 04                	jb     c00033ea <remove_chain+0x13e>
c00033e6:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00033ea:	31 c0                	xor    eax,eax
c00033ec:	83 c4 1c             	add    esp,0x1c
c00033ef:	5b                   	pop    ebx
c00033f0:	5e                   	pop    esi
c00033f1:	5f                   	pop    edi
c00033f2:	5d                   	pop    ebp
c00033f3:	c3                   	ret    

c00033f4 <dir_clear>:
c00033f4:	55                   	push   ebp
c00033f5:	57                   	push   edi
c00033f6:	56                   	push   esi
c00033f7:	89 c6                	mov    esi,eax
c00033f9:	53                   	push   ebx
c00033fa:	83 ec 1c             	sub    esp,0x1c
c00033fd:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003401:	e8 9d ed ff ff       	call   c00021a3 <sync_window>
c0003406:	85 c0                	test   eax,eax
c0003408:	0f 85 de 00 00 00    	jne    c00034ec <dir_clear+0xf8>
c000340e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003412:	89 f0                	mov    eax,esi
c0003414:	8d 6e 54             	lea    ebp,[esi+0x54]
c0003417:	e8 d6 e8 ff ff       	call   c0001cf2 <clst2sect>
c000341c:	b9 00 02 00 00       	mov    ecx,0x200
c0003421:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003425:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003429:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c000342c:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c000342f:	89 e8                	mov    eax,ebp
c0003431:	31 d2                	xor    edx,edx
c0003433:	e8 b5 e6 ff ff       	call   c0001aed <mem_set>
c0003438:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000343c:	c1 e3 09             	shl    ebx,0x9
c000343f:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0003445:	76 1f                	jbe    c0003466 <dir_clear+0x72>
c0003447:	bb 00 80 00 00       	mov    ebx,0x8000
c000344c:	eb 18                	jmp    c0003466 <dir_clear+0x72>
c000344e:	83 ec 0c             	sub    esp,0xc
c0003451:	53                   	push   ebx
c0003452:	e8 35 4e 00 00       	call   c000828c <ff_memalloc>
c0003457:	83 c4 10             	add    esp,0x10
c000345a:	89 c7                	mov    edi,eax
c000345c:	85 c0                	test   eax,eax
c000345e:	0f 85 8f 00 00 00    	jne    c00034f3 <dir_clear+0xff>
c0003464:	d1 eb                	shr    ebx,1
c0003466:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000346c:	77 e0                	ja     c000344e <dir_clear+0x5a>
c000346e:	31 db                	xor    ebx,ebx
c0003470:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003474:	39 d8                	cmp    eax,ebx
c0003476:	76 66                	jbe    c00034de <dir_clear+0xea>
c0003478:	83 ec 0c             	sub    esp,0xc
c000347b:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000347f:	6a 01                	push   0x1
c0003481:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003485:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003489:	55                   	push   ebp
c000348a:	50                   	push   eax
c000348b:	e8 94 e5 ff ff       	call   c0001a24 <disk_write>
c0003490:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c0003495:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c000349a:	83 c4 20             	add    esp,0x20
c000349d:	85 c0                	test   eax,eax
c000349f:	75 3d                	jne    c00034de <dir_clear+0xea>
c00034a1:	43                   	inc    ebx
c00034a2:	eb cc                	jmp    c0003470 <dir_clear+0x7c>
c00034a4:	83 ec 0c             	sub    esp,0xc
c00034a7:	31 d2                	xor    edx,edx
c00034a9:	55                   	push   ebp
c00034aa:	89 d8                	mov    eax,ebx
c00034ac:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00034b0:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00034b4:	52                   	push   edx
c00034b5:	50                   	push   eax
c00034b6:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00034ba:	57                   	push   edi
c00034bb:	50                   	push   eax
c00034bc:	e8 63 e5 ff ff       	call   c0001a24 <disk_write>
c00034c1:	83 c4 20             	add    esp,0x20
c00034c4:	85 c0                	test   eax,eax
c00034c6:	75 0a                	jne    c00034d2 <dir_clear+0xde>
c00034c8:	01 eb                	add    ebx,ebp
c00034ca:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00034ce:	39 d8                	cmp    eax,ebx
c00034d0:	77 d2                	ja     c00034a4 <dir_clear+0xb0>
c00034d2:	83 ec 0c             	sub    esp,0xc
c00034d5:	57                   	push   edi
c00034d6:	e8 c7 4d 00 00       	call   c00082a2 <ff_memfree>
c00034db:	83 c4 10             	add    esp,0x10
c00034de:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00034e2:	39 d8                	cmp    eax,ebx
c00034e4:	0f 95 c0             	setne  al
c00034e7:	0f b6 c0             	movzx  eax,al
c00034ea:	eb 19                	jmp    c0003505 <dir_clear+0x111>
c00034ec:	b8 01 00 00 00       	mov    eax,0x1
c00034f1:	eb 12                	jmp    c0003505 <dir_clear+0x111>
c00034f3:	89 d9                	mov    ecx,ebx
c00034f5:	31 d2                	xor    edx,edx
c00034f7:	c1 eb 09             	shr    ebx,0x9
c00034fa:	e8 ee e5 ff ff       	call   c0001aed <mem_set>
c00034ff:	89 dd                	mov    ebp,ebx
c0003501:	31 db                	xor    ebx,ebx
c0003503:	eb c5                	jmp    c00034ca <dir_clear+0xd6>
c0003505:	83 c4 1c             	add    esp,0x1c
c0003508:	5b                   	pop    ebx
c0003509:	5e                   	pop    esi
c000350a:	5f                   	pop    edi
c000350b:	5d                   	pop    ebp
c000350c:	c3                   	ret    

c000350d <dir_next>:
c000350d:	55                   	push   ebp
c000350e:	57                   	push   edi
c000350f:	56                   	push   esi
c0003510:	53                   	push   ebx
c0003511:	89 c3                	mov    ebx,eax
c0003513:	83 ec 1c             	sub    esp,0x1c
c0003516:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003518:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000351c:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000351f:	8d 78 20             	lea    edi,[eax+0x20]
c0003522:	31 c0                	xor    eax,eax
c0003524:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0003528:	0f 94 c0             	sete   al
c000352b:	48                   	dec    eax
c000352c:	25 00 00 20 f0       	and    eax,0xf0200000
c0003531:	05 00 00 00 10       	add    eax,0x10000000
c0003536:	39 f8                	cmp    eax,edi
c0003538:	77 0e                	ja     c0003548 <dir_next+0x3b>
c000353a:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003541:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003548:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000354b:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000354e:	b8 04 00 00 00       	mov    eax,0x4
c0003553:	89 ce                	mov    esi,ecx
c0003555:	09 d6                	or     esi,edx
c0003557:	0f 84 da 00 00 00    	je     c0003637 <dir_next+0x12a>
c000355d:	89 f8                	mov    eax,edi
c000355f:	25 ff 01 00 00       	and    eax,0x1ff
c0003564:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003568:	0f 85 b9 00 00 00    	jne    c0003627 <dir_next+0x11a>
c000356e:	83 c2 01             	add    edx,0x1
c0003571:	83 d1 00             	adc    ecx,0x0
c0003574:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0003577:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c000357a:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000357d:	85 d2                	test   edx,edx
c000357f:	75 29                	jne    c00035aa <dir_next+0x9d>
c0003581:	89 fa                	mov    edx,edi
c0003583:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003587:	c1 ea 05             	shr    edx,0x5
c000358a:	39 c2                	cmp    edx,eax
c000358c:	0f 82 95 00 00 00    	jb     c0003627 <dir_next+0x11a>
c0003592:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003599:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00035a0:	b8 04 00 00 00       	mov    eax,0x4
c00035a5:	e9 8d 00 00 00       	jmp    c0003637 <dir_next+0x12a>
c00035aa:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00035ae:	89 f9                	mov    ecx,edi
c00035b0:	48                   	dec    eax
c00035b1:	c1 e9 09             	shr    ecx,0x9
c00035b4:	85 c8                	test   eax,ecx
c00035b6:	75 6f                	jne    c0003627 <dir_next+0x11a>
c00035b8:	89 d8                	mov    eax,ebx
c00035ba:	e8 00 f8 ff ff       	call   c0002dbf <get_fat>
c00035bf:	89 c6                	mov    esi,eax
c00035c1:	83 f8 01             	cmp    eax,0x1
c00035c4:	77 07                	ja     c00035cd <dir_next+0xc0>
c00035c6:	b8 02 00 00 00       	mov    eax,0x2
c00035cb:	eb 6a                	jmp    c0003637 <dir_next+0x12a>
c00035cd:	83 f8 ff             	cmp    eax,0xffffffff
c00035d0:	75 07                	jne    c00035d9 <dir_next+0xcc>
c00035d2:	b8 01 00 00 00       	mov    eax,0x1
c00035d7:	eb 5e                	jmp    c0003637 <dir_next+0x12a>
c00035d9:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00035dc:	77 37                	ja     c0003615 <dir_next+0x108>
c00035de:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00035e3:	74 ad                	je     c0003592 <dir_next+0x85>
c00035e5:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00035e8:	89 d8                	mov    eax,ebx
c00035ea:	e8 be fa ff ff       	call   c00030ad <create_chain>
c00035ef:	89 c6                	mov    esi,eax
c00035f1:	b8 07 00 00 00       	mov    eax,0x7
c00035f6:	85 f6                	test   esi,esi
c00035f8:	74 3d                	je     c0003637 <dir_next+0x12a>
c00035fa:	83 fe 01             	cmp    esi,0x1
c00035fd:	74 c7                	je     c00035c6 <dir_next+0xb9>
c00035ff:	83 fe ff             	cmp    esi,0xffffffff
c0003602:	74 ce                	je     c00035d2 <dir_next+0xc5>
c0003604:	89 f2                	mov    edx,esi
c0003606:	89 e8                	mov    eax,ebp
c0003608:	e8 e7 fd ff ff       	call   c00033f4 <dir_clear>
c000360d:	85 c0                	test   eax,eax
c000360f:	75 c1                	jne    c00035d2 <dir_next+0xc5>
c0003611:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c0003615:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0003618:	89 f2                	mov    edx,esi
c000361a:	89 e8                	mov    eax,ebp
c000361c:	e8 d1 e6 ff ff       	call   c0001cf2 <clst2sect>
c0003621:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003624:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003627:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000362b:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c000362e:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003632:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003635:	31 c0                	xor    eax,eax
c0003637:	83 c4 1c             	add    esp,0x1c
c000363a:	5b                   	pop    ebx
c000363b:	5e                   	pop    esi
c000363c:	5f                   	pop    edi
c000363d:	5d                   	pop    ebp
c000363e:	c3                   	ret    

c000363f <load_xdir>:
c000363f:	55                   	push   ebp
c0003640:	57                   	push   edi
c0003641:	56                   	push   esi
c0003642:	89 c6                	mov    esi,eax
c0003644:	53                   	push   ebx
c0003645:	83 ec 1c             	sub    esp,0x1c
c0003648:	8b 00                	mov    eax,DWORD PTR [eax]
c000364a:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000364d:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003650:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003653:	e8 df eb ff ff       	call   c0002237 <move_window>
c0003658:	89 c3                	mov    ebx,eax
c000365a:	85 c0                	test   eax,eax
c000365c:	0f 85 0c 01 00 00    	jne    c000376e <load_xdir+0x12f>
c0003662:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003665:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003668:	0f 85 fb 00 00 00    	jne    c0003769 <load_xdir+0x12a>
c000366e:	89 f8                	mov    eax,edi
c0003670:	b9 20 00 00 00       	mov    ecx,0x20
c0003675:	e8 5e e4 ff ff       	call   c0001ad8 <mem_cpy>
c000367a:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c000367e:	40                   	inc    eax
c000367f:	c1 e0 05             	shl    eax,0x5
c0003682:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003686:	83 e8 60             	sub    eax,0x60
c0003689:	3d 00 02 00 00       	cmp    eax,0x200
c000368e:	0f 87 d5 00 00 00    	ja     c0003769 <load_xdir+0x12a>
c0003694:	31 d2                	xor    edx,edx
c0003696:	89 f0                	mov    eax,esi
c0003698:	e8 70 fe ff ff       	call   c000350d <dir_next>
c000369d:	89 c3                	mov    ebx,eax
c000369f:	83 f8 04             	cmp    eax,0x4
c00036a2:	0f 84 c1 00 00 00    	je     c0003769 <load_xdir+0x12a>
c00036a8:	85 c0                	test   eax,eax
c00036aa:	0f 85 be 00 00 00    	jne    c000376e <load_xdir+0x12f>
c00036b0:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00036b3:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00036b6:	8b 06                	mov    eax,DWORD PTR [esi]
c00036b8:	e8 7a eb ff ff       	call   c0002237 <move_window>
c00036bd:	89 c3                	mov    ebx,eax
c00036bf:	85 c0                	test   eax,eax
c00036c1:	0f 85 a7 00 00 00    	jne    c000376e <load_xdir+0x12f>
c00036c7:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00036ca:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00036cd:	0f 85 96 00 00 00    	jne    c0003769 <load_xdir+0x12a>
c00036d3:	8d 47 20             	lea    eax,[edi+0x20]
c00036d6:	b9 20 00 00 00       	mov    ecx,0x20
c00036db:	e8 f8 e3 ff ff       	call   c0001ad8 <mem_cpy>
c00036e0:	31 d2                	xor    edx,edx
c00036e2:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00036e6:	b9 0f 00 00 00       	mov    ecx,0xf
c00036eb:	83 c0 2c             	add    eax,0x2c
c00036ee:	f7 f1                	div    ecx
c00036f0:	c1 e0 05             	shl    eax,0x5
c00036f3:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00036f7:	77 70                	ja     c0003769 <load_xdir+0x12a>
c00036f9:	bd 40 00 00 00       	mov    ebp,0x40
c00036fe:	31 d2                	xor    edx,edx
c0003700:	89 f0                	mov    eax,esi
c0003702:	e8 06 fe ff ff       	call   c000350d <dir_next>
c0003707:	89 c3                	mov    ebx,eax
c0003709:	83 f8 04             	cmp    eax,0x4
c000370c:	74 5b                	je     c0003769 <load_xdir+0x12a>
c000370e:	85 c0                	test   eax,eax
c0003710:	75 5c                	jne    c000376e <load_xdir+0x12f>
c0003712:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003715:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003718:	8b 06                	mov    eax,DWORD PTR [esi]
c000371a:	e8 18 eb ff ff       	call   c0002237 <move_window>
c000371f:	89 c3                	mov    ebx,eax
c0003721:	85 c0                	test   eax,eax
c0003723:	75 49                	jne    c000376e <load_xdir+0x12f>
c0003725:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003728:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c000372b:	75 3c                	jne    c0003769 <load_xdir+0x12a>
c000372d:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003733:	77 0d                	ja     c0003742 <load_xdir+0x103>
c0003735:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003738:	b9 20 00 00 00       	mov    ecx,0x20
c000373d:	e8 96 e3 ff ff       	call   c0001ad8 <mem_cpy>
c0003742:	83 c5 20             	add    ebp,0x20
c0003745:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003749:	77 b3                	ja     c00036fe <load_xdir+0xbf>
c000374b:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003751:	77 1b                	ja     c000376e <load_xdir+0x12f>
c0003753:	89 f8                	mov    eax,edi
c0003755:	e8 cd e7 ff ff       	call   c0001f27 <xdir_sum>
c000375a:	89 c1                	mov    ecx,eax
c000375c:	8d 47 02             	lea    eax,[edi+0x2]
c000375f:	e8 f5 e2 ff ff       	call   c0001a59 <ld_word>
c0003764:	66 39 c1             	cmp    cx,ax
c0003767:	74 05                	je     c000376e <load_xdir+0x12f>
c0003769:	bb 02 00 00 00       	mov    ebx,0x2
c000376e:	83 c4 1c             	add    esp,0x1c
c0003771:	89 d8                	mov    eax,ebx
c0003773:	5b                   	pop    ebx
c0003774:	5e                   	pop    esi
c0003775:	5f                   	pop    edi
c0003776:	5d                   	pop    ebp
c0003777:	c3                   	ret    

c0003778 <load_obj_xdir>:
c0003778:	53                   	push   ebx
c0003779:	89 c3                	mov    ebx,eax
c000377b:	83 ec 08             	sub    esp,0x8
c000377e:	8b 02                	mov    eax,DWORD PTR [edx]
c0003780:	89 03                	mov    DWORD PTR [ebx],eax
c0003782:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0003785:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003788:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000378b:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000378e:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003791:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0003798:	30 c0                	xor    al,al
c000379a:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00037a1:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00037a4:	89 d8                	mov    eax,ebx
c00037a6:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00037a9:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c00037ac:	e8 04 f8 ff ff       	call   c0002fb5 <dir_sdi>
c00037b1:	85 c0                	test   eax,eax
c00037b3:	75 0b                	jne    c00037c0 <load_obj_xdir+0x48>
c00037b5:	89 d8                	mov    eax,ebx
c00037b7:	83 c4 08             	add    esp,0x8
c00037ba:	5b                   	pop    ebx
c00037bb:	e9 7f fe ff ff       	jmp    c000363f <load_xdir>
c00037c0:	83 c4 08             	add    esp,0x8
c00037c3:	5b                   	pop    ebx
c00037c4:	c3                   	ret    

c00037c5 <dir_read>:
c00037c5:	55                   	push   ebp
c00037c6:	bd 04 00 00 00       	mov    ebp,0x4
c00037cb:	57                   	push   edi
c00037cc:	56                   	push   esi
c00037cd:	be ff ff ff ff       	mov    esi,0xffffffff
c00037d2:	53                   	push   ebx
c00037d3:	89 c3                	mov    ebx,eax
c00037d5:	83 ec 1c             	sub    esp,0x1c
c00037d8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00037dc:	8b 38                	mov    edi,DWORD PTR [eax]
c00037de:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00037e3:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00037e6:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00037e9:	89 c8                	mov    eax,ecx
c00037eb:	09 d0                	or     eax,edx
c00037ed:	0f 84 25 01 00 00    	je     c0003918 <dir_read+0x153>
c00037f3:	89 f8                	mov    eax,edi
c00037f5:	e8 3d ea ff ff       	call   c0002237 <move_window>
c00037fa:	89 c5                	mov    ebp,eax
c00037fc:	85 c0                	test   eax,eax
c00037fe:	0f 85 23 01 00 00    	jne    c0003927 <dir_read+0x162>
c0003804:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003807:	8a 0a                	mov    cl,BYTE PTR [edx]
c0003809:	84 c9                	test   cl,cl
c000380b:	0f 84 11 01 00 00    	je     c0003922 <dir_read+0x15d>
c0003811:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003814:	75 48                	jne    c000385e <dir_read+0x99>
c0003816:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000381b:	74 10                	je     c000382d <dir_read+0x68>
c000381d:	80 f9 83             	cmp    cl,0x83
c0003820:	0f 85 dd 00 00 00    	jne    c0003903 <dir_read+0x13e>
c0003826:	31 ed                	xor    ebp,ebp
c0003828:	e9 08 01 00 00       	jmp    c0003935 <dir_read+0x170>
c000382d:	80 f9 85             	cmp    cl,0x85
c0003830:	0f 85 cd 00 00 00    	jne    c0003903 <dir_read+0x13e>
c0003836:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003839:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000383c:	89 d8                	mov    eax,ebx
c000383e:	e8 fc fd ff ff       	call   c000363f <load_xdir>
c0003843:	89 c5                	mov    ebp,eax
c0003845:	85 c0                	test   eax,eax
c0003847:	0f 85 da 00 00 00    	jne    c0003927 <dir_read+0x162>
c000384d:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003850:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003853:	83 e0 3f             	and    eax,0x3f
c0003856:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003859:	e9 d7 00 00 00       	jmp    c0003935 <dir_read+0x170>
c000385e:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003861:	83 e0 3f             	and    eax,0x3f
c0003864:	80 f9 2e             	cmp    cl,0x2e
c0003867:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000386b:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000386e:	0f 84 8a 00 00 00    	je     c00038fe <dir_read+0x139>
c0003874:	80 f9 e5             	cmp    cl,0xe5
c0003877:	0f 84 81 00 00 00    	je     c00038fe <dir_read+0x139>
c000387d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003881:	83 e0 1f             	and    eax,0x1f
c0003884:	83 f8 08             	cmp    eax,0x8
c0003887:	0f 94 c0             	sete   al
c000388a:	0f b6 c0             	movzx  eax,al
c000388d:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003891:	75 6b                	jne    c00038fe <dir_read+0x139>
c0003893:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003898:	75 44                	jne    c00038de <dir_read+0x119>
c000389a:	f6 c1 40             	test   cl,0x40
c000389d:	74 12                	je     c00038b1 <dir_read+0xec>
c000389f:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00038a2:	83 e1 bf             	and    ecx,0xffffffbf
c00038a5:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00038a9:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00038ac:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c00038af:	eb 06                	jmp    c00038b7 <dir_read+0xf2>
c00038b1:	89 f0                	mov    eax,esi
c00038b3:	38 c8                	cmp    al,cl
c00038b5:	75 47                	jne    c00038fe <dir_read+0x139>
c00038b7:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00038bb:	be ff ff ff ff       	mov    esi,0xffffffff
c00038c0:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00038c3:	75 3e                	jne    c0003903 <dir_read+0x13e>
c00038c5:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00038c9:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00038cc:	e8 8a e4 ff ff       	call   c0001d5b <pick_lfn>
c00038d1:	85 c0                	test   eax,eax
c00038d3:	74 2e                	je     c0003903 <dir_read+0x13e>
c00038d5:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00038d9:	8d 71 ff             	lea    esi,[ecx-0x1]
c00038dc:	eb 25                	jmp    c0003903 <dir_read+0x13e>
c00038de:	89 f0                	mov    eax,esi
c00038e0:	84 c0                	test   al,al
c00038e2:	75 11                	jne    c00038f5 <dir_read+0x130>
c00038e4:	89 d0                	mov    eax,edx
c00038e6:	e8 2a e6 ff ff       	call   c0001f15 <sum_sfn>
c00038eb:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c00038ef:	0f 84 31 ff ff ff    	je     c0003826 <dir_read+0x61>
c00038f5:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00038fc:	eb 37                	jmp    c0003935 <dir_read+0x170>
c00038fe:	be ff ff ff ff       	mov    esi,0xffffffff
c0003903:	31 d2                	xor    edx,edx
c0003905:	89 d8                	mov    eax,ebx
c0003907:	e8 01 fc ff ff       	call   c000350d <dir_next>
c000390c:	89 c5                	mov    ebp,eax
c000390e:	85 c0                	test   eax,eax
c0003910:	0f 84 cd fe ff ff    	je     c00037e3 <dir_read+0x1e>
c0003916:	eb 0f                	jmp    c0003927 <dir_read+0x162>
c0003918:	85 ed                	test   ebp,ebp
c000391a:	0f 84 06 ff ff ff    	je     c0003826 <dir_read+0x61>
c0003920:	eb 05                	jmp    c0003927 <dir_read+0x162>
c0003922:	bd 04 00 00 00       	mov    ebp,0x4
c0003927:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000392e:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003935:	83 c4 1c             	add    esp,0x1c
c0003938:	89 e8                	mov    eax,ebp
c000393a:	5b                   	pop    ebx
c000393b:	5e                   	pop    esi
c000393c:	5f                   	pop    edi
c000393d:	5d                   	pop    ebp
c000393e:	c3                   	ret    

c000393f <dir_alloc>:
c000393f:	55                   	push   ebp
c0003940:	89 d5                	mov    ebp,edx
c0003942:	57                   	push   edi
c0003943:	31 d2                	xor    edx,edx
c0003945:	56                   	push   esi
c0003946:	53                   	push   ebx
c0003947:	89 c3                	mov    ebx,eax
c0003949:	83 ec 0c             	sub    esp,0xc
c000394c:	8b 38                	mov    edi,DWORD PTR [eax]
c000394e:	e8 62 f6 ff ff       	call   c0002fb5 <dir_sdi>
c0003953:	85 c0                	test   eax,eax
c0003955:	75 4e                	jne    c00039a5 <dir_alloc+0x66>
c0003957:	31 f6                	xor    esi,esi
c0003959:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000395c:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000395f:	89 f8                	mov    eax,edi
c0003961:	e8 d1 e8 ff ff       	call   c0002237 <move_window>
c0003966:	85 c0                	test   eax,eax
c0003968:	75 3b                	jne    c00039a5 <dir_alloc+0x66>
c000396a:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000396d:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003970:	8a 12                	mov    dl,BYTE PTR [edx]
c0003972:	75 07                	jne    c000397b <dir_alloc+0x3c>
c0003974:	f7 d2                	not    edx
c0003976:	c0 ea 07             	shr    dl,0x7
c0003979:	eb 0d                	jmp    c0003988 <dir_alloc+0x49>
c000397b:	84 d2                	test   dl,dl
c000397d:	0f 94 c1             	sete   cl
c0003980:	80 fa e5             	cmp    dl,0xe5
c0003983:	0f 94 c2             	sete   dl
c0003986:	09 ca                	or     edx,ecx
c0003988:	84 d2                	test   dl,dl
c000398a:	74 07                	je     c0003993 <dir_alloc+0x54>
c000398c:	46                   	inc    esi
c000398d:	39 ee                	cmp    esi,ebp
c000398f:	75 04                	jne    c0003995 <dir_alloc+0x56>
c0003991:	eb 1c                	jmp    c00039af <dir_alloc+0x70>
c0003993:	31 f6                	xor    esi,esi
c0003995:	ba 01 00 00 00       	mov    edx,0x1
c000399a:	89 d8                	mov    eax,ebx
c000399c:	e8 6c fb ff ff       	call   c000350d <dir_next>
c00039a1:	85 c0                	test   eax,eax
c00039a3:	74 b4                	je     c0003959 <dir_alloc+0x1a>
c00039a5:	83 f8 04             	cmp    eax,0x4
c00039a8:	75 05                	jne    c00039af <dir_alloc+0x70>
c00039aa:	b8 07 00 00 00       	mov    eax,0x7
c00039af:	83 c4 0c             	add    esp,0xc
c00039b2:	5b                   	pop    ebx
c00039b3:	5e                   	pop    esi
c00039b4:	5f                   	pop    edi
c00039b5:	5d                   	pop    ebp
c00039b6:	c3                   	ret    

c00039b7 <store_xdir>:
c00039b7:	55                   	push   ebp
c00039b8:	57                   	push   edi
c00039b9:	89 c7                	mov    edi,eax
c00039bb:	56                   	push   esi
c00039bc:	53                   	push   ebx
c00039bd:	83 ec 0c             	sub    esp,0xc
c00039c0:	8b 00                	mov    eax,DWORD PTR [eax]
c00039c2:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c00039c5:	89 e8                	mov    eax,ebp
c00039c7:	e8 5b e5 ff ff       	call   c0001f27 <xdir_sum>
c00039cc:	0f b7 d0             	movzx  edx,ax
c00039cf:	8d 45 02             	lea    eax,[ebp+0x2]
c00039d2:	e8 f4 e0 ff ff       	call   c0001acb <st_word>
c00039d7:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c00039db:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c00039de:	89 f8                	mov    eax,edi
c00039e0:	e8 d0 f5 ff ff       	call   c0002fb5 <dir_sdi>
c00039e5:	89 c6                	mov    esi,eax
c00039e7:	85 f6                	test   esi,esi
c00039e9:	75 3d                	jne    c0003a28 <store_xdir+0x71>
c00039eb:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c00039ee:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c00039f1:	8b 07                	mov    eax,DWORD PTR [edi]
c00039f3:	e8 3f e8 ff ff       	call   c0002237 <move_window>
c00039f8:	89 c6                	mov    esi,eax
c00039fa:	85 c0                	test   eax,eax
c00039fc:	75 2a                	jne    c0003a28 <store_xdir+0x71>
c00039fe:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003a01:	b9 20 00 00 00       	mov    ecx,0x20
c0003a06:	89 ea                	mov    edx,ebp
c0003a08:	e8 cb e0 ff ff       	call   c0001ad8 <mem_cpy>
c0003a0d:	8b 07                	mov    eax,DWORD PTR [edi]
c0003a0f:	85 db                	test   ebx,ebx
c0003a11:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003a15:	74 11                	je     c0003a28 <store_xdir+0x71>
c0003a17:	31 d2                	xor    edx,edx
c0003a19:	89 f8                	mov    eax,edi
c0003a1b:	83 c5 20             	add    ebp,0x20
c0003a1e:	e8 ea fa ff ff       	call   c000350d <dir_next>
c0003a23:	4b                   	dec    ebx
c0003a24:	89 c6                	mov    esi,eax
c0003a26:	eb bf                	jmp    c00039e7 <store_xdir+0x30>
c0003a28:	89 f0                	mov    eax,esi
c0003a2a:	83 fe 02             	cmp    esi,0x2
c0003a2d:	76 05                	jbe    c0003a34 <store_xdir+0x7d>
c0003a2f:	b8 02 00 00 00       	mov    eax,0x2
c0003a34:	83 c4 0c             	add    esp,0xc
c0003a37:	5b                   	pop    ebx
c0003a38:	5e                   	pop    esi
c0003a39:	5f                   	pop    edi
c0003a3a:	5d                   	pop    ebp
c0003a3b:	c3                   	ret    

c0003a3c <dir_remove>:
c0003a3c:	57                   	push   edi
c0003a3d:	56                   	push   esi
c0003a3e:	53                   	push   ebx
c0003a3f:	89 c3                	mov    ebx,eax
c0003a41:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003a44:	8b 30                	mov    esi,DWORD PTR [eax]
c0003a46:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003a49:	83 fa ff             	cmp    edx,0xffffffff
c0003a4c:	74 09                	je     c0003a57 <dir_remove+0x1b>
c0003a4e:	e8 62 f5 ff ff       	call   c0002fb5 <dir_sdi>
c0003a53:	85 c0                	test   eax,eax
c0003a55:	75 41                	jne    c0003a98 <dir_remove+0x5c>
c0003a57:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003a5a:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003a5d:	89 f0                	mov    eax,esi
c0003a5f:	e8 d3 e7 ff ff       	call   c0002237 <move_window>
c0003a64:	85 c0                	test   eax,eax
c0003a66:	75 26                	jne    c0003a8e <dir_remove+0x52>
c0003a68:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a6b:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003a6e:	75 05                	jne    c0003a75 <dir_remove+0x39>
c0003a70:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003a73:	eb 03                	jmp    c0003a78 <dir_remove+0x3c>
c0003a75:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003a78:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003a7c:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003a7f:	73 17                	jae    c0003a98 <dir_remove+0x5c>
c0003a81:	31 d2                	xor    edx,edx
c0003a83:	89 d8                	mov    eax,ebx
c0003a85:	e8 83 fa ff ff       	call   c000350d <dir_next>
c0003a8a:	85 c0                	test   eax,eax
c0003a8c:	74 c9                	je     c0003a57 <dir_remove+0x1b>
c0003a8e:	83 f8 04             	cmp    eax,0x4
c0003a91:	75 05                	jne    c0003a98 <dir_remove+0x5c>
c0003a93:	b8 02 00 00 00       	mov    eax,0x2
c0003a98:	5b                   	pop    ebx
c0003a99:	5e                   	pop    esi
c0003a9a:	5f                   	pop    edi
c0003a9b:	c3                   	ret    

c0003a9c <create_name>:
c0003a9c:	55                   	push   ebp
c0003a9d:	89 d5                	mov    ebp,edx
c0003a9f:	57                   	push   edi
c0003aa0:	89 c7                	mov    edi,eax
c0003aa2:	56                   	push   esi
c0003aa3:	31 f6                	xor    esi,esi
c0003aa5:	53                   	push   ebx
c0003aa6:	83 ec 3c             	sub    esp,0x3c
c0003aa9:	8b 02                	mov    eax,DWORD PTR [edx]
c0003aab:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003aaf:	8b 07                	mov    eax,DWORD PTR [edi]
c0003ab1:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003ab4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003ab8:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003abc:	e8 72 e0 ff ff       	call   c0001b33 <tchar2uni>
c0003ac1:	89 c3                	mov    ebx,eax
c0003ac3:	83 f8 ff             	cmp    eax,0xffffffff
c0003ac6:	75 0a                	jne    c0003ad2 <create_name+0x36>
c0003ac8:	b8 06 00 00 00       	mov    eax,0x6
c0003acd:	e9 9e 02 00 00       	jmp    c0003d70 <create_name+0x2d4>
c0003ad2:	3d ff ff 00 00       	cmp    eax,0xffff
c0003ad7:	76 0c                	jbe    c0003ae5 <create_name+0x49>
c0003ad9:	c1 e8 10             	shr    eax,0x10
c0003adc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003ae0:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003ae4:	46                   	inc    esi
c0003ae5:	66 83 fb 1f          	cmp    bx,0x1f
c0003ae9:	76 4f                	jbe    c0003b3a <create_name+0x9e>
c0003aeb:	66 83 fb 5c          	cmp    bx,0x5c
c0003aef:	74 35                	je     c0003b26 <create_name+0x8a>
c0003af1:	66 83 fb 2f          	cmp    bx,0x2f
c0003af5:	74 2f                	je     c0003b26 <create_name+0x8a>
c0003af7:	66 83 fb 7f          	cmp    bx,0x7f
c0003afb:	77 11                	ja     c0003b0e <create_name+0x72>
c0003afd:	0f b7 d3             	movzx  edx,bx
c0003b00:	b8 32 02 02 c0       	mov    eax,0xc0020232
c0003b05:	e8 11 e0 ff ff       	call   c0001b1b <chk_chr>
c0003b0a:	85 c0                	test   eax,eax
c0003b0c:	75 ba                	jne    c0003ac8 <create_name+0x2c>
c0003b0e:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003b14:	77 b2                	ja     c0003ac8 <create_name+0x2c>
c0003b16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b1a:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003b1e:	46                   	inc    esi
c0003b1f:	eb 97                	jmp    c0003ab8 <create_name+0x1c>
c0003b21:	40                   	inc    eax
c0003b22:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003b26:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003b2a:	8a 10                	mov    dl,BYTE PTR [eax]
c0003b2c:	80 fa 2f             	cmp    dl,0x2f
c0003b2f:	74 f0                	je     c0003b21 <create_name+0x85>
c0003b31:	80 fa 5c             	cmp    dl,0x5c
c0003b34:	74 eb                	je     c0003b21 <create_name+0x85>
c0003b36:	31 db                	xor    ebx,ebx
c0003b38:	eb 02                	jmp    c0003b3c <create_name+0xa0>
c0003b3a:	b3 04                	mov    bl,0x4
c0003b3c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003b40:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003b43:	85 f6                	test   esi,esi
c0003b45:	74 18                	je     c0003b5f <create_name+0xc3>
c0003b47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b4b:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003b50:	66 83 f8 20          	cmp    ax,0x20
c0003b54:	74 06                	je     c0003b5c <create_name+0xc0>
c0003b56:	66 83 f8 2e          	cmp    ax,0x2e
c0003b5a:	75 03                	jne    c0003b5f <create_name+0xc3>
c0003b5c:	4e                   	dec    esi
c0003b5d:	eb e4                	jmp    c0003b43 <create_name+0xa7>
c0003b5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b63:	31 ed                	xor    ebp,ebp
c0003b65:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003b6b:	85 f6                	test   esi,esi
c0003b6d:	0f 84 55 ff ff ff    	je     c0003ac8 <create_name+0x2c>
c0003b73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b77:	8d 55 01             	lea    edx,[ebp+0x1]
c0003b7a:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003b7e:	66 83 f8 20          	cmp    ax,0x20
c0003b82:	75 04                	jne    c0003b88 <create_name+0xec>
c0003b84:	89 d5                	mov    ebp,edx
c0003b86:	eb eb                	jmp    c0003b73 <create_name+0xd7>
c0003b88:	85 ed                	test   ebp,ebp
c0003b8a:	75 06                	jne    c0003b92 <create_name+0xf6>
c0003b8c:	66 83 f8 2e          	cmp    ax,0x2e
c0003b90:	75 08                	jne    c0003b9a <create_name+0xfe>
c0003b92:	83 cb 03             	or     ebx,0x3
c0003b95:	eb 03                	jmp    c0003b9a <create_name+0xfe>
c0003b97:	4e                   	dec    esi
c0003b98:	74 0c                	je     c0003ba6 <create_name+0x10a>
c0003b9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b9e:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003ba4:	75 f1                	jne    c0003b97 <create_name+0xfb>
c0003ba6:	b9 0b 00 00 00       	mov    ecx,0xb
c0003bab:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003bae:	ba 20 00 00 00       	mov    edx,0x20
c0003bb3:	e8 35 df ff ff       	call   c0001aed <mem_set>
c0003bb8:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003bc0:	31 c9                	xor    ecx,ecx
c0003bc2:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003bc7:	8d 45 01             	lea    eax,[ebp+0x1]
c0003bca:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003bce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003bd2:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003bd6:	66 85 ed             	test   bp,bp
c0003bd9:	0f 84 30 01 00 00    	je     c0003d0f <create_name+0x273>
c0003bdf:	66 83 fd 20          	cmp    bp,0x20
c0003be3:	74 10                	je     c0003bf5 <create_name+0x159>
c0003be5:	66 83 fd 2e          	cmp    bp,0x2e
c0003be9:	75 13                	jne    c0003bfe <create_name+0x162>
c0003beb:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003bef:	0f 84 6b 01 00 00    	je     c0003d60 <create_name+0x2c4>
c0003bf5:	83 cb 03             	or     ebx,0x3
c0003bf8:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003bfc:	eb c9                	jmp    c0003bc7 <create_name+0x12b>
c0003bfe:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003c02:	73 0b                	jae    c0003c0f <create_name+0x173>
c0003c04:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003c08:	75 47                	jne    c0003c51 <create_name+0x1b5>
c0003c0a:	e9 51 01 00 00       	jmp    c0003d60 <create_name+0x2c4>
c0003c0f:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003c14:	75 10                	jne    c0003c26 <create_name+0x18a>
c0003c16:	83 cb 03             	or     ebx,0x3
c0003c19:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003c21:	e9 e9 00 00 00       	jmp    c0003d0f <create_name+0x273>
c0003c26:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003c2a:	74 0d                	je     c0003c39 <create_name+0x19d>
c0003c2c:	83 cb 03             	or     ebx,0x3
c0003c2f:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003c33:	0f 87 d6 00 00 00    	ja     c0003d0f <create_name+0x273>
c0003c39:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003c3e:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003c42:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003c4a:	b9 08 00 00 00       	mov    ecx,0x8
c0003c4f:	eb a7                	jmp    c0003bf8 <create_name+0x15c>
c0003c51:	66 83 fd 7f          	cmp    bp,0x7f
c0003c55:	76 68                	jbe    c0003cbf <create_name+0x223>
c0003c57:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003c5b:	88 da                	mov    dl,bl
c0003c5d:	83 ca 02             	or     edx,0x2
c0003c60:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003c64:	50                   	push   eax
c0003c65:	50                   	push   eax
c0003c66:	68 b5 01 00 00       	push   0x1b5
c0003c6b:	55                   	push   ebp
c0003c6c:	e8 48 46 00 00       	call   c00082b9 <ff_uni2oem>
c0003c71:	83 c4 10             	add    esp,0x10
c0003c74:	89 c5                	mov    ebp,eax
c0003c76:	a8 80                	test   al,0x80
c0003c78:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003c7c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003c80:	74 0c                	je     c0003c8e <create_name+0x1f2>
c0003c82:	83 e5 7f             	and    ebp,0x7f
c0003c85:	0f b6 ad 80 01 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffdfe80]
c0003c8c:	eb 2a                	jmp    c0003cb8 <create_name+0x21c>
c0003c8e:	66 3d ff 00          	cmp    ax,0xff
c0003c92:	76 24                	jbe    c0003cb8 <create_name+0x21c>
c0003c94:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003c98:	48                   	dec    eax
c0003c99:	39 c8                	cmp    eax,ecx
c0003c9b:	77 0c                	ja     c0003ca9 <create_name+0x20d>
c0003c9d:	83 cb 03             	or     ebx,0x3
c0003ca0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003ca4:	e9 4f ff ff ff       	jmp    c0003bf8 <create_name+0x15c>
c0003ca9:	89 e8                	mov    eax,ebp
c0003cab:	88 d3                	mov    bl,dl
c0003cad:	66 c1 e8 08          	shr    ax,0x8
c0003cb1:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003cb5:	41                   	inc    ecx
c0003cb6:	eb 4b                	jmp    c0003d03 <create_name+0x267>
c0003cb8:	88 d3                	mov    bl,dl
c0003cba:	66 85 ed             	test   bp,bp
c0003cbd:	74 19                	je     c0003cd8 <create_name+0x23c>
c0003cbf:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003cc3:	0f b7 d5             	movzx  edx,bp
c0003cc6:	b8 3b 02 02 c0       	mov    eax,0xc002023b
c0003ccb:	e8 4b de ff ff       	call   c0001b1b <chk_chr>
c0003cd0:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003cd4:	85 c0                	test   eax,eax
c0003cd6:	74 0a                	je     c0003ce2 <create_name+0x246>
c0003cd8:	83 cb 03             	or     ebx,0x3
c0003cdb:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003ce0:	eb 21                	jmp    c0003d03 <create_name+0x267>
c0003ce2:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003ce5:	66 83 f8 19          	cmp    ax,0x19
c0003ce9:	77 07                	ja     c0003cf2 <create_name+0x256>
c0003ceb:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003cf0:	eb 11                	jmp    c0003d03 <create_name+0x267>
c0003cf2:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003cf5:	66 83 f8 19          	cmp    ax,0x19
c0003cf9:	77 08                	ja     c0003d03 <create_name+0x267>
c0003cfb:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003d00:	83 ed 20             	sub    ebp,0x20
c0003d03:	89 e8                	mov    eax,ebp
c0003d05:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003d09:	41                   	inc    ecx
c0003d0a:	e9 e9 fe ff ff       	jmp    c0003bf8 <create_name+0x15c>
c0003d0f:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003d13:	75 04                	jne    c0003d19 <create_name+0x27d>
c0003d15:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003d19:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003d1e:	75 05                	jne    c0003d25 <create_name+0x289>
c0003d20:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003d25:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003d29:	83 e0 0c             	and    eax,0xc
c0003d2c:	3c 0c                	cmp    al,0xc
c0003d2e:	74 0b                	je     c0003d3b <create_name+0x29f>
c0003d30:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003d34:	83 e0 03             	and    eax,0x3
c0003d37:	3c 03                	cmp    al,0x3
c0003d39:	75 05                	jne    c0003d40 <create_name+0x2a4>
c0003d3b:	83 cb 02             	or     ebx,0x2
c0003d3e:	eb 19                	jmp    c0003d59 <create_name+0x2bd>
c0003d40:	f6 c3 02             	test   bl,0x2
c0003d43:	75 14                	jne    c0003d59 <create_name+0x2bd>
c0003d45:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003d4a:	74 03                	je     c0003d4f <create_name+0x2b3>
c0003d4c:	83 cb 10             	or     ebx,0x10
c0003d4f:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003d54:	74 03                	je     c0003d59 <create_name+0x2bd>
c0003d56:	83 cb 08             	or     ebx,0x8
c0003d59:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003d5c:	31 c0                	xor    eax,eax
c0003d5e:	eb 10                	jmp    c0003d70 <create_name+0x2d4>
c0003d60:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003d65:	0f 85 ce fe ff ff    	jne    c0003c39 <create_name+0x19d>
c0003d6b:	e9 a6 fe ff ff       	jmp    c0003c16 <create_name+0x17a>
c0003d70:	83 c4 3c             	add    esp,0x3c
c0003d73:	5b                   	pop    ebx
c0003d74:	5e                   	pop    esi
c0003d75:	5f                   	pop    edi
c0003d76:	5d                   	pop    ebp
c0003d77:	c3                   	ret    

c0003d78 <xname_sum>:
c0003d78:	56                   	push   esi
c0003d79:	53                   	push   ebx
c0003d7a:	89 c6                	mov    esi,eax
c0003d7c:	51                   	push   ecx
c0003d7d:	31 db                	xor    ebx,ebx
c0003d7f:	83 c6 02             	add    esi,0x2
c0003d82:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003d86:	66 85 c0             	test   ax,ax
c0003d89:	74 1f                	je     c0003daa <xname_sum+0x32>
c0003d8b:	83 ec 0c             	sub    esp,0xc
c0003d8e:	66 d1 cb             	ror    bx,1
c0003d91:	50                   	push   eax
c0003d92:	e8 1e 46 00 00       	call   c00083b5 <ff_wtoupper>
c0003d97:	83 c4 10             	add    esp,0x10
c0003d9a:	0f b6 d0             	movzx  edx,al
c0003d9d:	66 c1 e8 08          	shr    ax,0x8
c0003da1:	01 d3                	add    ebx,edx
c0003da3:	66 d1 cb             	ror    bx,1
c0003da6:	01 c3                	add    ebx,eax
c0003da8:	eb d5                	jmp    c0003d7f <xname_sum+0x7>
c0003daa:	89 d8                	mov    eax,ebx
c0003dac:	5a                   	pop    edx
c0003dad:	5b                   	pop    ebx
c0003dae:	5e                   	pop    esi
c0003daf:	c3                   	ret    

c0003db0 <create_xdir>:
c0003db0:	55                   	push   ebp
c0003db1:	b9 40 00 00 00       	mov    ecx,0x40
c0003db6:	57                   	push   edi
c0003db7:	bd 01 00 00 00       	mov    ebp,0x1
c0003dbc:	56                   	push   esi
c0003dbd:	31 ff                	xor    edi,edi
c0003dbf:	53                   	push   ebx
c0003dc0:	be 40 00 00 00       	mov    esi,0x40
c0003dc5:	89 c3                	mov    ebx,eax
c0003dc7:	83 ec 1c             	sub    esp,0x1c
c0003dca:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003dce:	31 d2                	xor    edx,edx
c0003dd0:	e8 18 dd ff ff       	call   c0001aed <mem_set>
c0003dd5:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003dd8:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003ddc:	31 c9                	xor    ecx,ecx
c0003dde:	8d 46 01             	lea    eax,[esi+0x1]
c0003de1:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003de5:	83 c6 02             	add    esi,0x2
c0003de8:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003dec:	66 85 ed             	test   bp,bp
c0003def:	74 12                	je     c0003e03 <create_xdir+0x53>
c0003df1:	0f b6 c1             	movzx  eax,cl
c0003df4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003df8:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003dfc:	66 83 fd 01          	cmp    bp,0x1
c0003e00:	80 d9 ff             	sbb    cl,0xff
c0003e03:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003e06:	0f b7 d5             	movzx  edx,bp
c0003e09:	83 c6 02             	add    esi,0x2
c0003e0c:	e8 ba dc ff ff       	call   c0001acb <st_word>
c0003e11:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003e17:	75 d3                	jne    c0003dec <create_xdir+0x3c>
c0003e19:	8d 47 01             	lea    eax,[edi+0x1]
c0003e1c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003e20:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003e24:	0f b6 c1             	movzx  eax,cl
c0003e27:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003e2c:	74 07                	je     c0003e35 <create_xdir+0x85>
c0003e2e:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0003e33:	eb a9                	jmp    c0003dde <create_xdir+0x2e>
c0003e35:	8d 47 02             	lea    eax,[edi+0x2]
c0003e38:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0003e3b:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0003e3e:	89 d0                	mov    eax,edx
c0003e40:	e8 33 ff ff ff       	call   c0003d78 <xname_sum>
c0003e45:	83 c4 1c             	add    esp,0x1c
c0003e48:	0f b7 d0             	movzx  edx,ax
c0003e4b:	8d 43 24             	lea    eax,[ebx+0x24]
c0003e4e:	5b                   	pop    ebx
c0003e4f:	5e                   	pop    esi
c0003e50:	5f                   	pop    edi
c0003e51:	5d                   	pop    ebp
c0003e52:	e9 74 dc ff ff       	jmp    c0001acb <st_word>

c0003e57 <cmp_lfn>:
c0003e57:	55                   	push   ebp
c0003e58:	57                   	push   edi
c0003e59:	89 d7                	mov    edi,edx
c0003e5b:	56                   	push   esi
c0003e5c:	53                   	push   ebx
c0003e5d:	83 ec 1c             	sub    esp,0x1c
c0003e60:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003e64:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003e67:	e8 ed db ff ff       	call   c0001a59 <ld_word>
c0003e6c:	66 85 c0             	test   ax,ax
c0003e6f:	74 07                	je     c0003e78 <cmp_lfn+0x21>
c0003e71:	31 c0                	xor    eax,eax
c0003e73:	e9 9a 00 00 00       	jmp    c0003f12 <cmp_lfn+0xbb>
c0003e78:	8a 1f                	mov    bl,BYTE PTR [edi]
c0003e7a:	bd 01 00 00 00       	mov    ebp,0x1
c0003e7f:	83 e3 3f             	and    ebx,0x3f
c0003e82:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0003e8a:	4b                   	dec    ebx
c0003e8b:	6b db 0d             	imul   ebx,ebx,0xd
c0003e8e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003e92:	0f b6 80 00 02 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdfe00]
c0003e99:	01 f8                	add    eax,edi
c0003e9b:	e8 b9 db ff ff       	call   c0001a59 <ld_word>
c0003ea0:	66 85 ed             	test   bp,bp
c0003ea3:	89 c6                	mov    esi,eax
c0003ea5:	74 3c                	je     c0003ee3 <cmp_lfn+0x8c>
c0003ea7:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0003ead:	77 c2                	ja     c0003e71 <cmp_lfn+0x1a>
c0003eaf:	83 ec 0c             	sub    esp,0xc
c0003eb2:	0f b7 c0             	movzx  eax,ax
c0003eb5:	50                   	push   eax
c0003eb6:	e8 fa 44 00 00       	call   c00083b5 <ff_wtoupper>
c0003ebb:	89 c5                	mov    ebp,eax
c0003ebd:	8d 43 01             	lea    eax,[ebx+0x1]
c0003ec0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0003ec4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0003ec8:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0003ecc:	89 04 24             	mov    DWORD PTR [esp],eax
c0003ecf:	e8 e1 44 00 00       	call   c00083b5 <ff_wtoupper>
c0003ed4:	83 c4 10             	add    esp,0x10
c0003ed7:	39 c5                	cmp    ebp,eax
c0003ed9:	75 96                	jne    c0003e71 <cmp_lfn+0x1a>
c0003edb:	89 f5                	mov    ebp,esi
c0003edd:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0003ee1:	eb 04                	jmp    c0003ee7 <cmp_lfn+0x90>
c0003ee3:	66 46                	inc    si
c0003ee5:	75 8a                	jne    c0003e71 <cmp_lfn+0x1a>
c0003ee7:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0003eeb:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0003ef0:	75 9c                	jne    c0003e8e <cmp_lfn+0x37>
c0003ef2:	f6 07 40             	test   BYTE PTR [edi],0x40
c0003ef5:	74 16                	je     c0003f0d <cmp_lfn+0xb6>
c0003ef7:	66 85 ed             	test   bp,bp
c0003efa:	74 11                	je     c0003f0d <cmp_lfn+0xb6>
c0003efc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003f00:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0003f05:	0f 94 c0             	sete   al
c0003f08:	0f b6 c0             	movzx  eax,al
c0003f0b:	eb 05                	jmp    c0003f12 <cmp_lfn+0xbb>
c0003f0d:	b8 01 00 00 00       	mov    eax,0x1
c0003f12:	83 c4 1c             	add    esp,0x1c
c0003f15:	5b                   	pop    ebx
c0003f16:	5e                   	pop    esi
c0003f17:	5f                   	pop    edi
c0003f18:	5d                   	pop    ebp
c0003f19:	c3                   	ret    

c0003f1a <dir_find>:
c0003f1a:	55                   	push   ebp
c0003f1b:	31 d2                	xor    edx,edx
c0003f1d:	57                   	push   edi
c0003f1e:	56                   	push   esi
c0003f1f:	53                   	push   ebx
c0003f20:	89 c3                	mov    ebx,eax
c0003f22:	83 ec 1c             	sub    esp,0x1c
c0003f25:	8b 30                	mov    esi,DWORD PTR [eax]
c0003f27:	e8 89 f0 ff ff       	call   c0002fb5 <dir_sdi>
c0003f2c:	89 04 24             	mov    DWORD PTR [esp],eax
c0003f2f:	85 c0                	test   eax,eax
c0003f31:	0f 85 9e 01 00 00    	jne    c00040d5 <dir_find+0x1bb>
c0003f37:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003f3a:	0f 85 8d 00 00 00    	jne    c0003fcd <dir_find+0xb3>
c0003f40:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003f43:	e8 30 fe ff ff       	call   c0003d78 <xname_sum>
c0003f48:	89 c7                	mov    edi,eax
c0003f4a:	31 d2                	xor    edx,edx
c0003f4c:	89 d8                	mov    eax,ebx
c0003f4e:	e8 72 f8 ff ff       	call   c00037c5 <dir_read>
c0003f53:	85 c0                	test   eax,eax
c0003f55:	0f 85 5e 01 00 00    	jne    c00040b9 <dir_find+0x19f>
c0003f5b:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0003f5e:	8d 41 24             	lea    eax,[ecx+0x24]
c0003f61:	e8 f3 da ff ff       	call   c0001a59 <ld_word>
c0003f66:	66 39 f8             	cmp    ax,di
c0003f69:	75 df                	jne    c0003f4a <dir_find+0x30>
c0003f6b:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0003f6e:	31 ed                	xor    ebp,ebp
c0003f70:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0003f74:	ba 40 00 00 00       	mov    edx,0x40
c0003f79:	89 e9                	mov    ecx,ebp
c0003f7b:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0003f7f:	0f 84 42 01 00 00    	je     c00040c7 <dir_find+0x1ad>
c0003f85:	f6 c2 1f             	test   dl,0x1f
c0003f88:	75 03                	jne    c0003f8d <dir_find+0x73>
c0003f8a:	83 c2 02             	add    edx,0x2
c0003f8d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003f91:	89 d0                	mov    eax,edx
c0003f93:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0003f96:	e8 be da ff ff       	call   c0001a59 <ld_word>
c0003f9b:	83 ec 0c             	sub    esp,0xc
c0003f9e:	0f b7 c0             	movzx  eax,ax
c0003fa1:	50                   	push   eax
c0003fa2:	e8 0e 44 00 00       	call   c00083b5 <ff_wtoupper>
c0003fa7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003fab:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003fae:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c0003fb2:	89 04 24             	mov    DWORD PTR [esp],eax
c0003fb5:	e8 fb 43 00 00       	call   c00083b5 <ff_wtoupper>
c0003fba:	83 c4 10             	add    esp,0x10
c0003fbd:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0003fc1:	75 87                	jne    c0003f4a <dir_find+0x30>
c0003fc3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003fc7:	45                   	inc    ebp
c0003fc8:	83 c2 02             	add    edx,0x2
c0003fcb:	eb ac                	jmp    c0003f79 <dir_find+0x5f>
c0003fcd:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003fd4:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c0003fd9:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003fde:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003fe1:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003fe4:	89 f0                	mov    eax,esi
c0003fe6:	e8 4c e2 ff ff       	call   c0002237 <move_window>
c0003feb:	85 c0                	test   eax,eax
c0003fed:	0f 85 c6 00 00 00    	jne    c00040b9 <dir_find+0x19f>
c0003ff3:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0003ff6:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c0003ff9:	84 c9                	test   cl,cl
c0003ffb:	0f 84 bd 00 00 00    	je     c00040be <dir_find+0x1a4>
c0004001:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0004004:	88 d0                	mov    al,dl
c0004006:	83 e0 3f             	and    eax,0x3f
c0004009:	80 f9 e5             	cmp    cl,0xe5
c000400c:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000400f:	0f 84 87 00 00 00    	je     c000409c <dir_find+0x182>
c0004015:	80 e2 08             	and    dl,0x8
c0004018:	74 06                	je     c0004020 <dir_find+0x106>
c000401a:	3c 0f                	cmp    al,0xf
c000401c:	75 7e                	jne    c000409c <dir_find+0x182>
c000401e:	eb 04                	jmp    c0004024 <dir_find+0x10a>
c0004020:	3c 0f                	cmp    al,0xf
c0004022:	75 4c                	jne    c0004070 <dir_find+0x156>
c0004024:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0004028:	75 7e                	jne    c00040a8 <dir_find+0x18e>
c000402a:	f6 c1 40             	test   cl,0x40
c000402d:	74 12                	je     c0004041 <dir_find+0x127>
c000402f:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0004032:	83 e1 bf             	and    ecx,0xffffffbf
c0004035:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0004039:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000403c:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000403f:	eb 06                	jmp    c0004047 <dir_find+0x12d>
c0004041:	89 f8                	mov    eax,edi
c0004043:	38 c8                	cmp    al,cl
c0004045:	75 5c                	jne    c00040a3 <dir_find+0x189>
c0004047:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000404b:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004050:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0004053:	75 53                	jne    c00040a8 <dir_find+0x18e>
c0004055:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004059:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000405c:	89 ea                	mov    edx,ebp
c000405e:	e8 f4 fd ff ff       	call   c0003e57 <cmp_lfn>
c0004063:	85 c0                	test   eax,eax
c0004065:	74 41                	je     c00040a8 <dir_find+0x18e>
c0004067:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c000406b:	8d 79 ff             	lea    edi,[ecx-0x1]
c000406e:	eb 38                	jmp    c00040a8 <dir_find+0x18e>
c0004070:	89 f8                	mov    eax,edi
c0004072:	84 c0                	test   al,al
c0004074:	75 0d                	jne    c0004083 <dir_find+0x169>
c0004076:	89 e8                	mov    eax,ebp
c0004078:	e8 98 de ff ff       	call   c0001f15 <sum_sfn>
c000407d:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0004081:	74 52                	je     c00040d5 <dir_find+0x1bb>
c0004083:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0004087:	75 13                	jne    c000409c <dir_find+0x182>
c0004089:	8d 53 3c             	lea    edx,[ebx+0x3c]
c000408c:	b9 0b 00 00 00       	mov    ecx,0xb
c0004091:	89 e8                	mov    eax,ebp
c0004093:	e8 60 da ff ff       	call   c0001af8 <mem_cmp>
c0004098:	85 c0                	test   eax,eax
c000409a:	74 39                	je     c00040d5 <dir_find+0x1bb>
c000409c:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00040a3:	bf ff ff ff ff       	mov    edi,0xffffffff
c00040a8:	31 d2                	xor    edx,edx
c00040aa:	89 d8                	mov    eax,ebx
c00040ac:	e8 5c f4 ff ff       	call   c000350d <dir_next>
c00040b1:	85 c0                	test   eax,eax
c00040b3:	0f 84 25 ff ff ff    	je     c0003fde <dir_find+0xc4>
c00040b9:	89 04 24             	mov    DWORD PTR [esp],eax
c00040bc:	eb 17                	jmp    c00040d5 <dir_find+0x1bb>
c00040be:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00040c5:	eb 0e                	jmp    c00040d5 <dir_find+0x1bb>
c00040c7:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00040ca:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c00040cf:	0f 85 75 fe ff ff    	jne    c0003f4a <dir_find+0x30>
c00040d5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00040d8:	83 c4 1c             	add    esp,0x1c
c00040db:	5b                   	pop    ebx
c00040dc:	5e                   	pop    esi
c00040dd:	5f                   	pop    edi
c00040de:	5d                   	pop    ebp
c00040df:	c3                   	ret    

c00040e0 <dir_register>:
c00040e0:	55                   	push   ebp
c00040e1:	57                   	push   edi
c00040e2:	56                   	push   esi
c00040e3:	be 06 00 00 00       	mov    esi,0x6
c00040e8:	53                   	push   ebx
c00040e9:	83 ec 6c             	sub    esp,0x6c
c00040ec:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00040f0:	0f 85 62 02 00 00    	jne    c0004358 <dir_register+0x278>
c00040f6:	8b 28                	mov    ebp,DWORD PTR [eax]
c00040f8:	31 ff                	xor    edi,edi
c00040fa:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00040fd:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c0004102:	74 03                	je     c0004107 <dir_register+0x27>
c0004104:	47                   	inc    edi
c0004105:	eb f6                	jmp    c00040fd <dir_register+0x1d>
c0004107:	89 c3                	mov    ebx,eax
c0004109:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c000410d:	0f 85 e1 00 00 00    	jne    c00041f4 <dir_register+0x114>
c0004113:	83 c7 0e             	add    edi,0xe
c0004116:	b9 0f 00 00 00       	mov    ecx,0xf
c000411b:	89 f8                	mov    eax,edi
c000411d:	31 d2                	xor    edx,edx
c000411f:	f7 f1                	div    ecx
c0004121:	8d 50 02             	lea    edx,[eax+0x2]
c0004124:	89 c7                	mov    edi,eax
c0004126:	89 d8                	mov    eax,ebx
c0004128:	e8 12 f8 ff ff       	call   c000393f <dir_alloc>
c000412d:	89 c6                	mov    esi,eax
c000412f:	85 c0                	test   eax,eax
c0004131:	0f 85 21 02 00 00    	jne    c0004358 <dir_register+0x278>
c0004137:	81 c7 01 00 00 08    	add    edi,0x8000001
c000413d:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004140:	c1 e7 05             	shl    edi,0x5
c0004143:	29 f8                	sub    eax,edi
c0004145:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004148:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c000414b:	a8 04                	test   al,0x4
c000414d:	0f 84 91 00 00 00    	je     c00041e4 <dir_register+0x104>
c0004153:	83 e0 fb             	and    eax,0xfffffffb
c0004156:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004159:	89 d8                	mov    eax,ebx
c000415b:	e8 25 ec ff ff       	call   c0002d85 <fill_first_frag>
c0004160:	85 c0                	test   eax,eax
c0004162:	0f 85 ee 01 00 00    	jne    c0004356 <dir_register+0x276>
c0004168:	83 c9 ff             	or     ecx,0xffffffff
c000416b:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000416e:	89 d8                	mov    eax,ebx
c0004170:	e8 db eb ff ff       	call   c0002d50 <fill_last_frag>
c0004175:	85 c0                	test   eax,eax
c0004177:	0f 85 d9 01 00 00    	jne    c0004356 <dir_register+0x276>
c000417d:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004181:	74 61                	je     c00041e4 <dir_register+0x104>
c0004183:	89 da                	mov    edx,ebx
c0004185:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004189:	e8 ea f5 ff ff       	call   c0003778 <load_obj_xdir>
c000418e:	85 c0                	test   eax,eax
c0004190:	0f 85 c0 01 00 00    	jne    c0004356 <dir_register+0x276>
c0004196:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c000419a:	31 c9                	xor    ecx,ecx
c000419c:	c1 e2 09             	shl    edx,0x9
c000419f:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c00041a2:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c00041a5:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00041a8:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00041ab:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00041ae:	83 c0 38             	add    eax,0x38
c00041b1:	e8 1c d9 ff ff       	call   c0001ad2 <st_qword>
c00041b6:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00041b9:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00041bc:	83 c0 28             	add    eax,0x28
c00041bf:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00041c2:	e8 0b d9 ff ff       	call   c0001ad2 <st_qword>
c00041c7:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00041ca:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00041cd:	83 c8 01             	or     eax,0x1
c00041d0:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00041d3:	8d 44 24 14          	lea    eax,[esp+0x14]
c00041d7:	e8 db f7 ff ff       	call   c00039b7 <store_xdir>
c00041dc:	85 c0                	test   eax,eax
c00041de:	0f 85 72 01 00 00    	jne    c0004356 <dir_register+0x276>
c00041e4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00041e7:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00041ea:	e8 c1 fb ff ff       	call   c0003db0 <create_xdir>
c00041ef:	e9 64 01 00 00       	jmp    c0004358 <dir_register+0x278>
c00041f4:	8d 40 3c             	lea    eax,[eax+0x3c]
c00041f7:	b9 0c 00 00 00       	mov    ecx,0xc
c00041fc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004200:	89 c2                	mov    edx,eax
c0004202:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004206:	e8 cd d8 ff ff       	call   c0001ad8 <mem_cpy>
c000420b:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0004210:	74 58                	je     c000426a <dir_register+0x18a>
c0004212:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c0004216:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c000421e:	83 ec 0c             	sub    esp,0xc
c0004221:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0004224:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004228:	8d 54 24 24          	lea    edx,[esp+0x24]
c000422c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004230:	e8 24 dc ff ff       	call   c0001e59 <gen_numname>
c0004235:	89 d8                	mov    eax,ebx
c0004237:	e8 de fc ff ff       	call   c0003f1a <dir_find>
c000423c:	83 c4 10             	add    esp,0x10
c000423f:	89 c6                	mov    esi,eax
c0004241:	85 c0                	test   eax,eax
c0004243:	75 15                	jne    c000425a <dir_register+0x17a>
c0004245:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004249:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c000424e:	75 ce                	jne    c000421e <dir_register+0x13e>
c0004250:	be 07 00 00 00       	mov    esi,0x7
c0004255:	e9 fe 00 00 00       	jmp    c0004358 <dir_register+0x278>
c000425a:	83 f8 04             	cmp    eax,0x4
c000425d:	0f 85 f5 00 00 00    	jne    c0004358 <dir_register+0x278>
c0004263:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0004267:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c000426a:	b9 01 00 00 00       	mov    ecx,0x1
c000426f:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0004274:	74 0f                	je     c0004285 <dir_register+0x1a5>
c0004276:	b9 0d 00 00 00       	mov    ecx,0xd
c000427b:	8d 47 0c             	lea    eax,[edi+0xc]
c000427e:	31 d2                	xor    edx,edx
c0004280:	f7 f1                	div    ecx
c0004282:	8d 48 01             	lea    ecx,[eax+0x1]
c0004285:	89 ca                	mov    edx,ecx
c0004287:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000428b:	89 d8                	mov    eax,ebx
c000428d:	e8 ad f6 ff ff       	call   c000393f <dir_alloc>
c0004292:	89 c6                	mov    esi,eax
c0004294:	85 c0                	test   eax,eax
c0004296:	0f 85 bc 00 00 00    	jne    c0004358 <dir_register+0x278>
c000429c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00042a0:	49                   	dec    ecx
c00042a1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00042a5:	74 6a                	je     c0004311 <dir_register+0x231>
c00042a7:	89 c8                	mov    eax,ecx
c00042a9:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00042ac:	c1 e0 05             	shl    eax,0x5
c00042af:	29 c2                	sub    edx,eax
c00042b1:	89 d8                	mov    eax,ebx
c00042b3:	e8 fd ec ff ff       	call   c0002fb5 <dir_sdi>
c00042b8:	89 c6                	mov    esi,eax
c00042ba:	85 c0                	test   eax,eax
c00042bc:	0f 85 96 00 00 00    	jne    c0004358 <dir_register+0x278>
c00042c2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00042c6:	e8 4a dc ff ff       	call   c0001f15 <sum_sfn>
c00042cb:	0f b6 f8             	movzx  edi,al
c00042ce:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00042d1:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00042d4:	89 e8                	mov    eax,ebp
c00042d6:	e8 5c df ff ff       	call   c0002237 <move_window>
c00042db:	89 c6                	mov    esi,eax
c00042dd:	85 c0                	test   eax,eax
c00042df:	75 77                	jne    c0004358 <dir_register+0x278>
c00042e1:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00042e6:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00042e9:	83 ec 0c             	sub    esp,0xc
c00042ec:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00042ef:	57                   	push   edi
c00042f0:	e8 e0 da ff ff       	call   c0001dd5 <put_lfn>
c00042f5:	31 d2                	xor    edx,edx
c00042f7:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00042fb:	89 d8                	mov    eax,ebx
c00042fd:	e8 0b f2 ff ff       	call   c000350d <dir_next>
c0004302:	83 c4 10             	add    esp,0x10
c0004305:	89 c6                	mov    esi,eax
c0004307:	85 c0                	test   eax,eax
c0004309:	75 4d                	jne    c0004358 <dir_register+0x278>
c000430b:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c000430f:	75 bd                	jne    c00042ce <dir_register+0x1ee>
c0004311:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0004314:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0004317:	89 e8                	mov    eax,ebp
c0004319:	e8 19 df ff ff       	call   c0002237 <move_window>
c000431e:	89 c6                	mov    esi,eax
c0004320:	85 c0                	test   eax,eax
c0004322:	75 34                	jne    c0004358 <dir_register+0x278>
c0004324:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004327:	b9 20 00 00 00       	mov    ecx,0x20
c000432c:	31 d2                	xor    edx,edx
c000432e:	e8 ba d7 ff ff       	call   c0001aed <mem_set>
c0004333:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004336:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000433a:	b9 0b 00 00 00       	mov    ecx,0xb
c000433f:	e8 94 d7 ff ff       	call   c0001ad8 <mem_cpy>
c0004344:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c0004347:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000434a:	83 e0 18             	and    eax,0x18
c000434d:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004350:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004354:	eb 02                	jmp    c0004358 <dir_register+0x278>
c0004356:	89 c6                	mov    esi,eax
c0004358:	83 c4 6c             	add    esp,0x6c
c000435b:	89 f0                	mov    eax,esi
c000435d:	5b                   	pop    ebx
c000435e:	5e                   	pop    esi
c000435f:	5f                   	pop    edi
c0004360:	5d                   	pop    ebp
c0004361:	c3                   	ret    

c0004362 <sync_fs>:
c0004362:	56                   	push   esi
c0004363:	53                   	push   ebx
c0004364:	53                   	push   ebx
c0004365:	89 c3                	mov    ebx,eax
c0004367:	e8 37 de ff ff       	call   c00021a3 <sync_window>
c000436c:	85 c0                	test   eax,eax
c000436e:	0f 85 b1 00 00 00    	jne    c0004425 <sync_fs+0xc3>
c0004374:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0004377:	0f 85 8e 00 00 00    	jne    c000440b <sync_fs+0xa9>
c000437d:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0004381:	0f 85 84 00 00 00    	jne    c000440b <sync_fs+0xa9>
c0004387:	b9 00 02 00 00       	mov    ecx,0x200
c000438c:	8d 73 54             	lea    esi,[ebx+0x54]
c000438f:	31 d2                	xor    edx,edx
c0004391:	89 f0                	mov    eax,esi
c0004393:	e8 55 d7 ff ff       	call   c0001aed <mem_set>
c0004398:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c000439e:	ba 55 aa 00 00       	mov    edx,0xaa55
c00043a3:	e8 23 d7 ff ff       	call   c0001acb <st_word>
c00043a8:	ba 52 52 61 41       	mov    edx,0x41615252
c00043ad:	89 f0                	mov    eax,esi
c00043af:	e8 1b d7 ff ff       	call   c0001acf <st_dword>
c00043b4:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00043ba:	ba 72 72 41 61       	mov    edx,0x61417272
c00043bf:	e8 0b d7 ff ff       	call   c0001acf <st_dword>
c00043c4:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00043c7:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c00043cd:	e8 fd d6 ff ff       	call   c0001acf <st_dword>
c00043d2:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00043d5:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00043db:	e8 ef d6 ff ff       	call   c0001acf <st_dword>
c00043e0:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00043e3:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00043e6:	83 c0 01             	add    eax,0x1
c00043e9:	83 d2 00             	adc    edx,0x0
c00043ec:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00043ef:	83 ec 0c             	sub    esp,0xc
c00043f2:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00043f5:	6a 01                	push   0x1
c00043f7:	52                   	push   edx
c00043f8:	50                   	push   eax
c00043f9:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00043fd:	56                   	push   esi
c00043fe:	50                   	push   eax
c00043ff:	e8 20 d6 ff ff       	call   c0001a24 <disk_write>
c0004404:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0004408:	83 c4 20             	add    esp,0x20
c000440b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000440f:	51                   	push   ecx
c0004410:	6a 00                	push   0x0
c0004412:	6a 00                	push   0x0
c0004414:	50                   	push   eax
c0004415:	e8 20 d6 ff ff       	call   c0001a3a <disk_ioctl>
c000441a:	83 c4 10             	add    esp,0x10
c000441d:	85 c0                	test   eax,eax
c000441f:	0f 95 c0             	setne  al
c0004422:	0f b6 c0             	movzx  eax,al
c0004425:	5a                   	pop    edx
c0004426:	5b                   	pop    ebx
c0004427:	5e                   	pop    esi
c0004428:	c3                   	ret    

c0004429 <create_partition>:
c0004429:	55                   	push   ebp
c000442a:	0f b6 c0             	movzx  eax,al
c000442d:	57                   	push   edi
c000442e:	56                   	push   esi
c000442f:	53                   	push   ebx
c0004430:	83 ec 60             	sub    esp,0x60
c0004433:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004437:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000443b:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000443f:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0004443:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c0004447:	50                   	push   eax
c0004448:	6a 01                	push   0x1
c000444a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000444e:	e8 e7 d5 ff ff       	call   c0001a3a <disk_ioctl>
c0004453:	83 c4 10             	add    esp,0x10
c0004456:	85 c0                	test   eax,eax
c0004458:	74 0a                	je     c0004464 <create_partition+0x3b>
c000445a:	b8 01 00 00 00       	mov    eax,0x1
c000445f:	e9 67 05 00 00       	jmp    c00049cb <create_partition+0x5a2>
c0004464:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004468:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000446c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004470:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0004474:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004479:	0f 86 ed 03 00 00    	jbe    c000486c <create_partition+0x443>
c000447f:	83 c0 df             	add    eax,0xffffffdf
c0004482:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000448a:	83 d2 ff             	adc    edx,0xffffffff
c000448d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004491:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0004495:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004499:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000449d:	83 c0 bd             	add    eax,0xffffffbd
c00044a0:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00044a7:	83 d2 ff             	adc    edx,0xffffffff
c00044aa:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00044ae:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00044b2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00044ba:	be 22 00 00 00       	mov    esi,0x22
c00044bf:	31 ff                	xor    edi,edi
c00044c1:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00044c9:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c00044d1:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00044d9:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00044dd:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00044e3:	75 0e                	jne    c00044f3 <create_partition+0xca>
c00044e5:	b9 00 02 00 00       	mov    ecx,0x200
c00044ea:	31 d2                	xor    edx,edx
c00044ec:	89 d8                	mov    eax,ebx
c00044ee:	e8 fa d5 ff ff       	call   c0001aed <mem_set>
c00044f3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00044f7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00044fb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00044ff:	0b 04 24             	or     eax,DWORD PTR [esp]
c0004502:	0f 84 23 01 00 00    	je     c000462b <create_partition+0x202>
c0004508:	89 f0                	mov    eax,esi
c000450a:	89 fa                	mov    edx,edi
c000450c:	05 ff 07 00 00       	add    eax,0x7ff
c0004511:	83 d2 00             	adc    edx,0x0
c0004514:	89 c1                	mov    ecx,eax
c0004516:	89 d7                	mov    edi,edx
c0004518:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c000451e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004522:	89 ce                	mov    esi,ecx
c0004524:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0004528:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000452c:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004530:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004533:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004537:	89 04 24             	mov    DWORD PTR [esp],eax
c000453a:	b8 64 00 00 00       	mov    eax,0x64
c000453f:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004542:	b8 00 00 00 00       	mov    eax,0x0
c0004547:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000454b:	72 41                	jb     c000458e <create_partition+0x165>
c000454d:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004551:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004555:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004559:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000455e:	01 c1                	add    ecx,eax
c0004560:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004564:	f7 24 24             	mul    DWORD PTR [esp]
c0004567:	6a 00                	push   0x0
c0004569:	01 ca                	add    edx,ecx
c000456b:	6a 64                	push   0x64
c000456d:	52                   	push   edx
c000456e:	50                   	push   eax
c000456f:	e8 58 ac 01 00       	call   c001f1cc <__udivdi3>
c0004574:	83 c4 10             	add    esp,0x10
c0004577:	05 ff 07 00 00       	add    eax,0x7ff
c000457c:	83 d2 00             	adc    edx,0x0
c000457f:	89 c1                	mov    ecx,eax
c0004581:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004585:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c000458b:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000458e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004591:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0004595:	01 f0                	add    eax,esi
c0004597:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000459b:	11 fa                	adc    edx,edi
c000459d:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00045a1:	19 d1                	sbb    ecx,edx
c00045a3:	73 2e                	jae    c00045d3 <create_partition+0x1aa>
c00045a5:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00045a9:	89 f8                	mov    eax,edi
c00045ab:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00045b2:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00045b6:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00045be:	73 6b                	jae    c000462b <create_partition+0x202>
c00045c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00045c4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00045c8:	29 f0                	sub    eax,esi
c00045ca:	19 fa                	sbb    edx,edi
c00045cc:	89 04 24             	mov    DWORD PTR [esp],eax
c00045cf:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00045d3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00045d7:	0b 04 24             	or     eax,DWORD PTR [esp]
c00045da:	74 4f                	je     c000462b <create_partition+0x202>
c00045dc:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00045df:	b9 10 00 00 00       	mov    ecx,0x10
c00045e4:	ba 10 02 02 c0       	mov    edx,0xc0020210
c00045e9:	e8 ea d4 ff ff       	call   c0001ad8 <mem_cpy>
c00045ee:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00045f2:	b9 10 00 00 00       	mov    ecx,0x10
c00045f7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00045fb:	e8 2c db ff ff       	call   c000212c <make_rand>
c0004600:	89 f2                	mov    edx,esi
c0004602:	89 f9                	mov    ecx,edi
c0004604:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004608:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c000460c:	e8 c1 d4 ff ff       	call   c0001ad2 <st_qword>
c0004611:	03 34 24             	add    esi,DWORD PTR [esp]
c0004614:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c0004618:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000461c:	89 f2                	mov    edx,esi
c000461e:	89 f9                	mov    ecx,edi
c0004620:	83 c2 ff             	add    edx,0xffffffff
c0004623:	83 d1 ff             	adc    ecx,0xffffffff
c0004626:	e8 a7 d4 ff ff       	call   c0001ad2 <st_qword>
c000462b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000462f:	83 e8 80             	sub    eax,0xffffff80
c0004632:	89 c5                	mov    ebp,eax
c0004634:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004638:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000463e:	75 6b                	jne    c00046ab <create_partition+0x282>
c0004640:	45                   	inc    ebp
c0004641:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004645:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c000464a:	e8 39 da ff ff       	call   c0002088 <crc32>
c000464f:	81 fd 00 02 00 00    	cmp    ebp,0x200
c0004655:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004659:	75 e5                	jne    c0004640 <create_partition+0x217>
c000465b:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000465f:	31 d2                	xor    edx,edx
c0004661:	83 ec 0c             	sub    esp,0xc
c0004664:	c1 ed 09             	shr    ebp,0x9
c0004667:	6a 01                	push   0x1
c0004669:	8d 45 02             	lea    eax,[ebp+0x2]
c000466c:	52                   	push   edx
c000466d:	50                   	push   eax
c000466e:	53                   	push   ebx
c000466f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004673:	e8 ac d3 ff ff       	call   c0001a24 <disk_write>
c0004678:	83 c4 20             	add    esp,0x20
c000467b:	85 c0                	test   eax,eax
c000467d:	0f 85 d7 fd ff ff    	jne    c000445a <create_partition+0x31>
c0004683:	83 ec 0c             	sub    esp,0xc
c0004686:	31 d2                	xor    edx,edx
c0004688:	6a 01                	push   0x1
c000468a:	89 e8                	mov    eax,ebp
c000468c:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0004690:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0004694:	52                   	push   edx
c0004695:	50                   	push   eax
c0004696:	53                   	push   ebx
c0004697:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000469b:	e8 84 d3 ff ff       	call   c0001a24 <disk_write>
c00046a0:	83 c4 20             	add    esp,0x20
c00046a3:	85 c0                	test   eax,eax
c00046a5:	0f 85 af fd ff ff    	jne    c000445a <create_partition+0x31>
c00046ab:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00046af:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00046b3:	3d 00 40 00 00       	cmp    eax,0x4000
c00046b8:	74 0d                	je     c00046c7 <create_partition+0x29e>
c00046ba:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00046be:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00046c2:	e9 12 fe ff ff       	jmp    c00044d9 <create_partition+0xb0>
c00046c7:	31 d2                	xor    edx,edx
c00046c9:	b9 00 02 00 00       	mov    ecx,0x200
c00046ce:	89 d8                	mov    eax,ebx
c00046d0:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00046d3:	e8 15 d4 ff ff       	call   c0001aed <mem_set>
c00046d8:	8d 7b 48             	lea    edi,[ebx+0x48]
c00046db:	b9 10 00 00 00       	mov    ecx,0x10
c00046e0:	ba 00 01 02 c0       	mov    edx,0xc0020100
c00046e5:	89 d8                	mov    eax,ebx
c00046e7:	e8 ec d3 ff ff       	call   c0001ad8 <mem_cpy>
c00046ec:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00046f0:	8d 43 58             	lea    eax,[ebx+0x58]
c00046f3:	f7 d2                	not    edx
c00046f5:	e8 d5 d3 ff ff       	call   c0001acf <st_dword>
c00046fa:	8d 43 18             	lea    eax,[ebx+0x18]
c00046fd:	31 c9                	xor    ecx,ecx
c00046ff:	89 04 24             	mov    DWORD PTR [esp],eax
c0004702:	ba 01 00 00 00       	mov    edx,0x1
c0004707:	e8 c6 d3 ff ff       	call   c0001ad2 <st_qword>
c000470c:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004710:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004714:	83 c2 ff             	add    edx,0xffffffff
c0004717:	89 e8                	mov    eax,ebp
c0004719:	83 d1 ff             	adc    ecx,0xffffffff
c000471c:	e8 b1 d3 ff ff       	call   c0001ad2 <st_qword>
c0004721:	31 c9                	xor    ecx,ecx
c0004723:	8d 43 28             	lea    eax,[ebx+0x28]
c0004726:	ba 22 00 00 00       	mov    edx,0x22
c000472b:	e8 a2 d3 ff ff       	call   c0001ad2 <st_qword>
c0004730:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0004734:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004738:	83 c2 de             	add    edx,0xffffffde
c000473b:	8d 43 30             	lea    eax,[ebx+0x30]
c000473e:	83 d1 ff             	adc    ecx,0xffffffff
c0004741:	31 f6                	xor    esi,esi
c0004743:	e8 8a d3 ff ff       	call   c0001ad2 <st_qword>
c0004748:	8d 43 54             	lea    eax,[ebx+0x54]
c000474b:	ba 80 00 00 00       	mov    edx,0x80
c0004750:	e8 7a d3 ff ff       	call   c0001acf <st_dword>
c0004755:	8d 43 50             	lea    eax,[ebx+0x50]
c0004758:	ba 80 00 00 00       	mov    edx,0x80
c000475d:	e8 6d d3 ff ff       	call   c0001acf <st_dword>
c0004762:	ba 02 00 00 00       	mov    edx,0x2
c0004767:	89 f8                	mov    eax,edi
c0004769:	e8 61 d3 ff ff       	call   c0001acf <st_dword>
c000476e:	8d 53 38             	lea    edx,[ebx+0x38]
c0004771:	b9 10 00 00 00       	mov    ecx,0x10
c0004776:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000477a:	e8 ad d9 ff ff       	call   c000212c <make_rand>
c000477f:	83 c8 ff             	or     eax,0xffffffff
c0004782:	46                   	inc    esi
c0004783:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004788:	e8 fb d8 ff ff       	call   c0002088 <crc32>
c000478d:	83 fe 5c             	cmp    esi,0x5c
c0004790:	75 f0                	jne    c0004782 <create_partition+0x359>
c0004792:	f7 d0                	not    eax
c0004794:	8d 73 10             	lea    esi,[ebx+0x10]
c0004797:	89 c2                	mov    edx,eax
c0004799:	89 f0                	mov    eax,esi
c000479b:	e8 2f d3 ff ff       	call   c0001acf <st_dword>
c00047a0:	83 ec 0c             	sub    esp,0xc
c00047a3:	6a 01                	push   0x1
c00047a5:	6a 00                	push   0x0
c00047a7:	6a 01                	push   0x1
c00047a9:	53                   	push   ebx
c00047aa:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00047ae:	e8 71 d2 ff ff       	call   c0001a24 <disk_write>
c00047b3:	83 c4 20             	add    esp,0x20
c00047b6:	85 c0                	test   eax,eax
c00047b8:	0f 85 9c fc ff ff    	jne    c000445a <create_partition+0x31>
c00047be:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00047c2:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00047c6:	83 c2 ff             	add    edx,0xffffffff
c00047c9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047cc:	83 d1 ff             	adc    ecx,0xffffffff
c00047cf:	e8 fe d2 ff ff       	call   c0001ad2 <st_qword>
c00047d4:	ba 01 00 00 00       	mov    edx,0x1
c00047d9:	31 c9                	xor    ecx,ecx
c00047db:	89 e8                	mov    eax,ebp
c00047dd:	e8 f0 d2 ff ff       	call   c0001ad2 <st_qword>
c00047e2:	89 f8                	mov    eax,edi
c00047e4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00047e8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00047ec:	31 ff                	xor    edi,edi
c00047ee:	e8 df d2 ff ff       	call   c0001ad2 <st_qword>
c00047f3:	89 f0                	mov    eax,esi
c00047f5:	31 d2                	xor    edx,edx
c00047f7:	e8 d3 d2 ff ff       	call   c0001acf <st_dword>
c00047fc:	83 c8 ff             	or     eax,0xffffffff
c00047ff:	47                   	inc    edi
c0004800:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c0004805:	e8 7e d8 ff ff       	call   c0002088 <crc32>
c000480a:	83 ff 5c             	cmp    edi,0x5c
c000480d:	75 f0                	jne    c00047ff <create_partition+0x3d6>
c000480f:	f7 d0                	not    eax
c0004811:	89 c2                	mov    edx,eax
c0004813:	89 f0                	mov    eax,esi
c0004815:	e8 b5 d2 ff ff       	call   c0001acf <st_dword>
c000481a:	83 ec 0c             	sub    esp,0xc
c000481d:	6a 01                	push   0x1
c000481f:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004823:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004827:	83 c0 ff             	add    eax,0xffffffff
c000482a:	83 d2 ff             	adc    edx,0xffffffff
c000482d:	52                   	push   edx
c000482e:	50                   	push   eax
c000482f:	53                   	push   ebx
c0004830:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004834:	e8 eb d1 ff ff       	call   c0001a24 <disk_write>
c0004839:	83 c4 20             	add    esp,0x20
c000483c:	85 c0                	test   eax,eax
c000483e:	0f 85 16 fc ff ff    	jne    c000445a <create_partition+0x31>
c0004844:	31 d2                	xor    edx,edx
c0004846:	89 d8                	mov    eax,ebx
c0004848:	b9 00 02 00 00       	mov    ecx,0x200
c000484d:	e8 9b d2 ff ff       	call   c0001aed <mem_set>
c0004852:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004858:	b9 10 00 00 00       	mov    ecx,0x10
c000485d:	ba 10 01 02 c0       	mov    edx,0xc0020110
c0004862:	e8 71 d2 ff ff       	call   c0001ad8 <mem_cpy>
c0004867:	e9 21 01 00 00       	jmp    c000498d <create_partition+0x564>
c000486c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004870:	b9 05 00 00 00       	mov    ecx,0x5
c0004875:	89 04 24             	mov    DWORD PTR [esp],eax
c0004878:	bf 08 00 00 00       	mov    edi,0x8
c000487d:	89 f8                	mov    eax,edi
c000487f:	31 d2                	xor    edx,edx
c0004881:	0f b6 f0             	movzx  esi,al
c0004884:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004887:	f7 f6                	div    esi
c0004889:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c000488e:	76 0a                	jbe    c000489a <create_partition+0x471>
c0004890:	d1 e7                	shl    edi,1
c0004892:	49                   	dec    ecx
c0004893:	75 e8                	jne    c000487d <create_partition+0x454>
c0004895:	bf ff ff ff ff       	mov    edi,0xffffffff
c000489a:	b9 00 02 00 00       	mov    ecx,0x200
c000489f:	31 d2                	xor    edx,edx
c00048a1:	89 d8                	mov    eax,ebx
c00048a3:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c00048a9:	e8 3f d2 ff ff       	call   c0001aed <mem_set>
c00048ae:	b9 64 00 00 00       	mov    ecx,0x64
c00048b3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00048b6:	31 d2                	xor    edx,edx
c00048b8:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00048c0:	f7 f1                	div    ecx
c00048c2:	b9 3f 00 00 00       	mov    ecx,0x3f
c00048c7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00048cb:	89 f8                	mov    eax,edi
c00048cd:	0f b6 c0             	movzx  eax,al
c00048d0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00048d4:	e9 80 00 00 00       	jmp    c0004959 <create_partition+0x530>
c00048d9:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00048dc:	29 cf                	sub    edi,ecx
c00048de:	89 ca                	mov    edx,ecx
c00048e0:	89 f0                	mov    eax,esi
c00048e2:	bd 3f 00 00 00       	mov    ebp,0x3f
c00048e7:	e8 e3 d1 ff ff       	call   c0001acf <st_dword>
c00048ec:	8d 46 04             	lea    eax,[esi+0x4]
c00048ef:	89 fa                	mov    edx,edi
c00048f1:	83 c6 10             	add    esi,0x10
c00048f4:	e8 d6 d1 ff ff       	call   c0001acf <st_dword>
c00048f9:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c00048fd:	31 d2                	xor    edx,edx
c00048ff:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004902:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004906:	89 c8                	mov    eax,ecx
c0004908:	01 f9                	add    ecx,edi
c000490a:	f7 f5                	div    ebp
c000490c:	89 d5                	mov    ebp,edx
c000490e:	31 d2                	xor    edx,edx
c0004910:	45                   	inc    ebp
c0004911:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004915:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004918:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c000491b:	89 c2                	mov    edx,eax
c000491d:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004920:	c1 ea 02             	shr    edx,0x2
c0004923:	83 e2 c0             	and    edx,0xffffffc0
c0004926:	09 ea                	or     edx,ebp
c0004928:	bd 3f 00 00 00       	mov    ebp,0x3f
c000492d:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004930:	31 d2                	xor    edx,edx
c0004932:	f7 f5                	div    ebp
c0004934:	89 d7                	mov    edi,edx
c0004936:	31 d2                	xor    edx,edx
c0004938:	47                   	inc    edi
c0004939:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c000493d:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004940:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004943:	89 c5                	mov    ebp,eax
c0004945:	c1 ed 02             	shr    ebp,0x2
c0004948:	83 e5 c0             	and    ebp,0xffffffc0
c000494b:	09 ef                	or     edi,ebp
c000494d:	89 fa                	mov    edx,edi
c000494f:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004952:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004957:	74 34                	je     c000498d <create_partition+0x564>
c0004959:	85 c9                	test   ecx,ecx
c000495b:	74 30                	je     c000498d <create_partition+0x564>
c000495d:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004960:	76 2b                	jbe    c000498d <create_partition+0x564>
c0004962:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004966:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000496a:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c000496d:	83 ff 64             	cmp    edi,0x64
c0004970:	76 4b                	jbe    c00049bd <create_partition+0x594>
c0004972:	89 f8                	mov    eax,edi
c0004974:	01 c8                	add    eax,ecx
c0004976:	0f 82 5d ff ff ff    	jb     c00048d9 <create_partition+0x4b0>
c000497c:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000497f:	0f 87 54 ff ff ff    	ja     c00048d9 <create_partition+0x4b0>
c0004985:	85 ff                	test   edi,edi
c0004987:	0f 85 51 ff ff ff    	jne    c00048de <create_partition+0x4b5>
c000498d:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004993:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004998:	e8 2e d1 ff ff       	call   c0001acb <st_word>
c000499d:	83 ec 0c             	sub    esp,0xc
c00049a0:	6a 01                	push   0x1
c00049a2:	6a 00                	push   0x0
c00049a4:	6a 00                	push   0x0
c00049a6:	53                   	push   ebx
c00049a7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00049ab:	e8 74 d0 ff ff       	call   c0001a24 <disk_write>
c00049b0:	83 c4 20             	add    esp,0x20
c00049b3:	85 c0                	test   eax,eax
c00049b5:	0f 95 c0             	setne  al
c00049b8:	0f b6 c0             	movzx  eax,al
c00049bb:	eb 0e                	jmp    c00049cb <create_partition+0x5a2>
c00049bd:	74 07                	je     c00049c6 <create_partition+0x59d>
c00049bf:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c00049c4:	eb ac                	jmp    c0004972 <create_partition+0x549>
c00049c6:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00049c9:	eb a7                	jmp    c0004972 <create_partition+0x549>
c00049cb:	83 c4 5c             	add    esp,0x5c
c00049ce:	5b                   	pop    ebx
c00049cf:	5e                   	pop    esi
c00049d0:	5f                   	pop    edi
c00049d1:	5d                   	pop    ebp
c00049d2:	c3                   	ret    

c00049d3 <get_fileinfo>:
c00049d3:	55                   	push   ebp
c00049d4:	57                   	push   edi
c00049d5:	56                   	push   esi
c00049d6:	53                   	push   ebx
c00049d7:	83 ec 1c             	sub    esp,0x1c
c00049da:	8b 30                	mov    esi,DWORD PTR [eax]
c00049dc:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c00049e0:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00049e4:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c00049e7:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c00049ea:	0f 84 dc 01 00 00    	je     c0004bcc <get_fileinfo+0x1f9>
c00049f0:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00049f3:	75 0f                	jne    c0004a04 <get_fileinfo+0x31>
c00049f5:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00049f8:	83 c4 1c             	add    esp,0x1c
c00049fb:	5b                   	pop    ebx
c00049fc:	5e                   	pop    esi
c00049fd:	5f                   	pop    edi
c00049fe:	5d                   	pop    ebp
c00049ff:	e9 58 d5 ff ff       	jmp    c0001f5c <get_xfileinfo>
c0004a04:	89 d3                	mov    ebx,edx
c0004a06:	89 c6                	mov    esi,eax
c0004a08:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004a0c:	74 6a                	je     c0004a78 <get_fileinfo+0xa5>
c0004a0e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004a16:	31 ed                	xor    ebp,ebp
c0004a18:	31 ff                	xor    edi,edi
c0004a1a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004a1e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004a22:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004a25:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004a29:	66 85 d2             	test   dx,dx
c0004a2c:	74 3e                	je     c0004a6c <get_fileinfo+0x99>
c0004a2e:	66 85 ed             	test   bp,bp
c0004a31:	75 0c                	jne    c0004a3f <get_fileinfo+0x6c>
c0004a33:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004a39:	66 3d ff 07          	cmp    ax,0x7ff
c0004a3d:	76 22                	jbe    c0004a61 <get_fileinfo+0x8e>
c0004a3f:	b9 ff 00 00 00       	mov    ecx,0xff
c0004a44:	89 e8                	mov    eax,ebp
c0004a46:	29 f9                	sub    ecx,edi
c0004a48:	c1 e0 10             	shl    eax,0x10
c0004a4b:	09 d0                	or     eax,edx
c0004a4d:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004a51:	e8 a3 d1 ff ff       	call   c0001bf9 <put_utf>
c0004a56:	84 c0                	test   al,al
c0004a58:	74 10                	je     c0004a6a <get_fileinfo+0x97>
c0004a5a:	0f b6 c0             	movzx  eax,al
c0004a5d:	31 d2                	xor    edx,edx
c0004a5f:	01 c7                	add    edi,eax
c0004a61:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004a66:	89 d5                	mov    ebp,edx
c0004a68:	eb b0                	jmp    c0004a1a <get_fileinfo+0x47>
c0004a6a:	31 ff                	xor    edi,edi
c0004a6c:	66 85 ed             	test   bp,bp
c0004a6f:	74 02                	je     c0004a73 <get_fileinfo+0xa0>
c0004a71:	31 ff                	xor    edi,edi
c0004a73:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004a78:	31 ff                	xor    edi,edi
c0004a7a:	31 c9                	xor    ecx,ecx
c0004a7c:	83 f9 0a             	cmp    ecx,0xa
c0004a7f:	0f 87 ad 00 00 00    	ja     c0004b32 <get_fileinfo+0x15f>
c0004a85:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004a88:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004a8b:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004a8f:	66 83 fa 20          	cmp    dx,0x20
c0004a93:	0f 84 92 00 00 00    	je     c0004b2b <get_fileinfo+0x158>
c0004a99:	66 83 fa 05          	cmp    dx,0x5
c0004a9d:	75 05                	jne    c0004aa4 <get_fileinfo+0xd1>
c0004a9f:	ba e5 00 00 00       	mov    edx,0xe5
c0004aa4:	83 ff 0b             	cmp    edi,0xb
c0004aa7:	77 0b                	ja     c0004ab4 <get_fileinfo+0xe1>
c0004aa9:	83 fd 09             	cmp    ebp,0x9
c0004aac:	75 06                	jne    c0004ab4 <get_fileinfo+0xe1>
c0004aae:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004ab3:	47                   	inc    edi
c0004ab4:	0f b7 c2             	movzx  eax,dx
c0004ab7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004abb:	e8 6d d0 ff ff       	call   c0001b2d <dbc_1st>
c0004ac0:	85 c0                	test   eax,eax
c0004ac2:	74 2f                	je     c0004af3 <get_fileinfo+0x120>
c0004ac4:	83 fd 08             	cmp    ebp,0x8
c0004ac7:	74 2a                	je     c0004af3 <get_fileinfo+0x120>
c0004ac9:	83 fd 0b             	cmp    ebp,0xb
c0004acc:	74 25                	je     c0004af3 <get_fileinfo+0x120>
c0004ace:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004ad1:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004ad5:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004ad9:	e8 52 d0 ff ff       	call   c0001b30 <dbc_2nd>
c0004ade:	85 c0                	test   eax,eax
c0004ae0:	74 11                	je     c0004af3 <get_fileinfo+0x120>
c0004ae2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004ae6:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004aeb:	c1 e2 08             	shl    edx,0x8
c0004aee:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004af1:	09 c2                	or     edx,eax
c0004af3:	0f b7 d2             	movzx  edx,dx
c0004af6:	50                   	push   eax
c0004af7:	50                   	push   eax
c0004af8:	68 b5 01 00 00       	push   0x1b5
c0004afd:	52                   	push   edx
c0004afe:	e8 46 38 00 00       	call   c0008349 <ff_oem2uni>
c0004b03:	83 c4 10             	add    esp,0x10
c0004b06:	66 85 c0             	test   ax,ax
c0004b09:	75 04                	jne    c0004b0f <get_fileinfo+0x13c>
c0004b0b:	31 ff                	xor    edi,edi
c0004b0d:	eb 23                	jmp    c0004b32 <get_fileinfo+0x15f>
c0004b0f:	b9 0c 00 00 00       	mov    ecx,0xc
c0004b14:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004b18:	29 f9                	sub    ecx,edi
c0004b1a:	0f b7 c0             	movzx  eax,ax
c0004b1d:	e8 d7 d0 ff ff       	call   c0001bf9 <put_utf>
c0004b22:	84 c0                	test   al,al
c0004b24:	74 e5                	je     c0004b0b <get_fileinfo+0x138>
c0004b26:	0f b6 c0             	movzx  eax,al
c0004b29:	01 c7                	add    edi,eax
c0004b2b:	89 e9                	mov    ecx,ebp
c0004b2d:	e9 4a ff ff ff       	jmp    c0004a7c <get_fileinfo+0xa9>
c0004b32:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004b37:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004b3b:	75 54                	jne    c0004b91 <get_fileinfo+0x1be>
c0004b3d:	85 ff                	test   edi,edi
c0004b3f:	75 0b                	jne    c0004b4c <get_fileinfo+0x179>
c0004b41:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004b45:	ba 01 00 00 00       	mov    edx,0x1
c0004b4a:	eb 33                	jmp    c0004b7f <get_fileinfo+0x1ac>
c0004b4c:	b1 08                	mov    cl,0x8
c0004b4e:	31 d2                	xor    edx,edx
c0004b50:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004b56:	84 c0                	test   al,al
c0004b58:	74 25                	je     c0004b7f <get_fileinfo+0x1ac>
c0004b5a:	66 83 f8 2e          	cmp    ax,0x2e
c0004b5e:	74 16                	je     c0004b76 <get_fileinfo+0x1a3>
c0004b60:	8d 78 bf             	lea    edi,[eax-0x41]
c0004b63:	66 83 ff 19          	cmp    di,0x19
c0004b67:	77 0f                	ja     c0004b78 <get_fileinfo+0x1a5>
c0004b69:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004b6c:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004b6f:	74 07                	je     c0004b78 <get_fileinfo+0x1a5>
c0004b71:	83 c0 20             	add    eax,0x20
c0004b74:	eb 02                	jmp    c0004b78 <get_fileinfo+0x1a5>
c0004b76:	b1 10                	mov    cl,0x10
c0004b78:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004b7c:	42                   	inc    edx
c0004b7d:	eb d1                	jmp    c0004b50 <get_fileinfo+0x17d>
c0004b7f:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004b84:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b87:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004b8b:	75 04                	jne    c0004b91 <get_fileinfo+0x1be>
c0004b8d:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004b91:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b94:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004b97:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004b9a:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b9d:	83 c0 1c             	add    eax,0x1c
c0004ba0:	e8 c1 ce ff ff       	call   c0001a66 <ld_dword>
c0004ba5:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004bac:	89 03                	mov    DWORD PTR [ebx],eax
c0004bae:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004bb1:	83 c0 16             	add    eax,0x16
c0004bb4:	e8 a0 ce ff ff       	call   c0001a59 <ld_word>
c0004bb9:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004bbd:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004bc0:	83 c0 18             	add    eax,0x18
c0004bc3:	e8 91 ce ff ff       	call   c0001a59 <ld_word>
c0004bc8:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004bcc:	83 c4 1c             	add    esp,0x1c
c0004bcf:	5b                   	pop    ebx
c0004bd0:	5e                   	pop    esi
c0004bd1:	5f                   	pop    edi
c0004bd2:	5d                   	pop    ebp
c0004bd3:	c3                   	ret    

c0004bd4 <ld_clust.isra.0>:
c0004bd4:	56                   	push   esi
c0004bd5:	89 c6                	mov    esi,eax
c0004bd7:	53                   	push   ebx
c0004bd8:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004bdb:	89 d3                	mov    ebx,edx
c0004bdd:	e8 77 ce ff ff       	call   c0001a59 <ld_word>
c0004be2:	0f b7 c8             	movzx  ecx,ax
c0004be5:	89 f0                	mov    eax,esi
c0004be7:	3c 03                	cmp    al,0x3
c0004be9:	75 0d                	jne    c0004bf8 <ld_clust.isra.0+0x24>
c0004beb:	8d 43 14             	lea    eax,[ebx+0x14]
c0004bee:	e8 66 ce ff ff       	call   c0001a59 <ld_word>
c0004bf3:	c1 e0 10             	shl    eax,0x10
c0004bf6:	09 c1                	or     ecx,eax
c0004bf8:	89 c8                	mov    eax,ecx
c0004bfa:	5b                   	pop    ebx
c0004bfb:	5e                   	pop    esi
c0004bfc:	c3                   	ret    

c0004bfd <st_clust.isra.1>:
c0004bfd:	56                   	push   esi
c0004bfe:	89 c6                	mov    esi,eax
c0004c00:	53                   	push   ebx
c0004c01:	89 d3                	mov    ebx,edx
c0004c03:	0f b7 d1             	movzx  edx,cx
c0004c06:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004c09:	e8 bd ce ff ff       	call   c0001acb <st_word>
c0004c0e:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004c11:	75 0f                	jne    c0004c22 <st_clust.isra.1+0x25>
c0004c13:	c1 e9 10             	shr    ecx,0x10
c0004c16:	8d 43 14             	lea    eax,[ebx+0x14]
c0004c19:	89 ca                	mov    edx,ecx
c0004c1b:	5b                   	pop    ebx
c0004c1c:	5e                   	pop    esi
c0004c1d:	e9 a9 ce ff ff       	jmp    c0001acb <st_word>
c0004c22:	5b                   	pop    ebx
c0004c23:	5e                   	pop    esi
c0004c24:	c3                   	ret    

c0004c25 <init_alloc_info.isra.2>:
c0004c25:	56                   	push   esi
c0004c26:	53                   	push   ebx
c0004c27:	89 c6                	mov    esi,eax
c0004c29:	89 d3                	mov    ebx,edx
c0004c2b:	51                   	push   ecx
c0004c2c:	8b 00                	mov    eax,DWORD PTR [eax]
c0004c2e:	83 c0 34             	add    eax,0x34
c0004c31:	e8 30 ce ff ff       	call   c0001a66 <ld_dword>
c0004c36:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004c39:	8b 06                	mov    eax,DWORD PTR [esi]
c0004c3b:	83 c0 38             	add    eax,0x38
c0004c3e:	e8 3b ce ff ff       	call   c0001a7e <ld_qword>
c0004c43:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004c46:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004c49:	8b 06                	mov    eax,DWORD PTR [esi]
c0004c4b:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004c4e:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004c55:	83 e0 02             	and    eax,0x2
c0004c58:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004c5b:	5b                   	pop    ebx
c0004c5c:	5b                   	pop    ebx
c0004c5d:	5e                   	pop    esi
c0004c5e:	c3                   	ret    

c0004c5f <follow_path>:
c0004c5f:	56                   	push   esi
c0004c60:	53                   	push   ebx
c0004c61:	89 c3                	mov    ebx,eax
c0004c63:	83 ec 14             	sub    esp,0x14
c0004c66:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004c6a:	8b 30                	mov    esi,DWORD PTR [eax]
c0004c6c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c70:	8a 10                	mov    dl,BYTE PTR [eax]
c0004c72:	80 fa 5c             	cmp    dl,0x5c
c0004c75:	75 07                	jne    c0004c7e <follow_path+0x1f>
c0004c77:	40                   	inc    eax
c0004c78:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004c7c:	eb ee                	jmp    c0004c6c <follow_path+0xd>
c0004c7e:	80 fa 2f             	cmp    dl,0x2f
c0004c81:	74 f4                	je     c0004c77 <follow_path+0x18>
c0004c83:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004c8a:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004c91:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004c94:	77 52                	ja     c0004ce8 <follow_path+0x89>
c0004c96:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004c9a:	31 d2                	xor    edx,edx
c0004c9c:	89 d8                	mov    eax,ebx
c0004c9e:	e8 12 e3 ff ff       	call   c0002fb5 <dir_sdi>
c0004ca3:	eb 7c                	jmp    c0004d21 <follow_path+0xc2>
c0004ca5:	89 d8                	mov    eax,ebx
c0004ca7:	e8 6e f2 ff ff       	call   c0003f1a <dir_find>
c0004cac:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004caf:	85 c0                	test   eax,eax
c0004cb1:	75 46                	jne    c0004cf9 <follow_path+0x9a>
c0004cb3:	80 e2 04             	and    dl,0x4
c0004cb6:	75 69                	jne    c0004d21 <follow_path+0xc2>
c0004cb8:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004cbc:	74 5e                	je     c0004d1c <follow_path+0xbd>
c0004cbe:	8a 06                	mov    al,BYTE PTR [esi]
c0004cc0:	3c 04                	cmp    al,0x4
c0004cc2:	75 41                	jne    c0004d05 <follow_path+0xa6>
c0004cc4:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004cc7:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004ccb:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004cce:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004cd1:	30 c0                	xor    al,al
c0004cd3:	09 d0                	or     eax,edx
c0004cd5:	89 da                	mov    edx,ebx
c0004cd7:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004cda:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004cdd:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004ce0:	8d 46 10             	lea    eax,[esi+0x10]
c0004ce3:	e8 3d ff ff ff       	call   c0004c25 <init_alloc_info.isra.2>
c0004ce8:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004cec:	89 d8                	mov    eax,ebx
c0004cee:	e8 a9 ed ff ff       	call   c0003a9c <create_name>
c0004cf3:	85 c0                	test   eax,eax
c0004cf5:	74 ae                	je     c0004ca5 <follow_path+0x46>
c0004cf7:	eb 28                	jmp    c0004d21 <follow_path+0xc2>
c0004cf9:	83 f8 04             	cmp    eax,0x4
c0004cfc:	75 23                	jne    c0004d21 <follow_path+0xc2>
c0004cfe:	80 e2 04             	and    dl,0x4
c0004d01:	74 19                	je     c0004d1c <follow_path+0xbd>
c0004d03:	eb 1c                	jmp    c0004d21 <follow_path+0xc2>
c0004d05:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004d08:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004d0e:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004d12:	e8 bd fe ff ff       	call   c0004bd4 <ld_clust.isra.0>
c0004d17:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004d1a:	eb cc                	jmp    c0004ce8 <follow_path+0x89>
c0004d1c:	b8 05 00 00 00       	mov    eax,0x5
c0004d21:	83 c4 14             	add    esp,0x14
c0004d24:	5b                   	pop    ebx
c0004d25:	5e                   	pop    esi
c0004d26:	c3                   	ret    

c0004d27 <f_mount>:
c0004d27:	53                   	push   ebx
c0004d28:	83 ec 18             	sub    esp,0x18
c0004d2b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004d2f:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004d33:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d37:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004d3b:	e8 fb d2 ff ff       	call   c000203b <get_ldnumber>
c0004d40:	89 c2                	mov    edx,eax
c0004d42:	b8 0b 00 00 00       	mov    eax,0xb
c0004d47:	85 d2                	test   edx,edx
c0004d49:	78 39                	js     c0004d84 <f_mount+0x5d>
c0004d4b:	8b 04 95 20 43 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdbce0]
c0004d52:	85 c0                	test   eax,eax
c0004d54:	74 03                	je     c0004d59 <f_mount+0x32>
c0004d56:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004d59:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d5d:	85 c0                	test   eax,eax
c0004d5f:	74 03                	je     c0004d64 <f_mount+0x3d>
c0004d61:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004d64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d68:	89 04 95 20 43 02 c0 	mov    DWORD PTR [edx*4-0x3ffdbce0],eax
c0004d6f:	31 c0                	xor    eax,eax
c0004d71:	84 db                	test   bl,bl
c0004d73:	74 0f                	je     c0004d84 <f_mount+0x5d>
c0004d75:	31 c9                	xor    ecx,ecx
c0004d77:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004d7b:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004d7f:	e8 65 d7 ff ff       	call   c00024e9 <mount_volume>
c0004d84:	83 c4 18             	add    esp,0x18
c0004d87:	5b                   	pop    ebx
c0004d88:	c3                   	ret    

c0004d89 <f_open>:
c0004d89:	55                   	push   ebp
c0004d8a:	bd 09 00 00 00       	mov    ebp,0x9
c0004d8f:	57                   	push   edi
c0004d90:	56                   	push   esi
c0004d91:	53                   	push   ebx
c0004d92:	83 ec 7c             	sub    esp,0x7c
c0004d95:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004d9c:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004da3:	85 db                	test   ebx,ebx
c0004da5:	0f 84 10 04 00 00    	je     c00051bb <f_open+0x432>
c0004dab:	89 fe                	mov    esi,edi
c0004dad:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004db1:	83 e6 3f             	and    esi,0x3f
c0004db4:	89 f0                	mov    eax,esi
c0004db6:	0f b6 c8             	movzx  ecx,al
c0004db9:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004dc0:	e8 24 d7 ff ff       	call   c00024e9 <mount_volume>
c0004dc5:	89 c5                	mov    ebp,eax
c0004dc7:	85 c0                	test   eax,eax
c0004dc9:	0f 85 e6 03 00 00    	jne    c00051b5 <f_open+0x42c>
c0004dcf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004dd3:	bd 11 00 00 00       	mov    ebp,0x11
c0004dd8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ddc:	83 ec 0c             	sub    esp,0xc
c0004ddf:	68 60 04 00 00       	push   0x460
c0004de4:	e8 a3 34 00 00       	call   c000828c <ff_memalloc>
c0004de9:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ded:	83 c4 10             	add    esp,0x10
c0004df0:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004df5:	0f 84 c0 03 00 00    	je     c00051bb <f_open+0x432>
c0004dfb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004dff:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004e03:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004e09:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004e0c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004e0f:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004e16:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004e1a:	e8 40 fe ff ff       	call   c0004c5f <follow_path>
c0004e1f:	89 c5                	mov    ebp,eax
c0004e21:	85 c0                	test   eax,eax
c0004e23:	75 0c                	jne    c0004e31 <f_open+0xa8>
c0004e25:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004e2a:	79 05                	jns    c0004e31 <f_open+0xa8>
c0004e2c:	bd 06 00 00 00       	mov    ebp,0x6
c0004e31:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0004e37:	0f 84 84 01 00 00    	je     c0004fc1 <f_open+0x238>
c0004e3d:	85 ed                	test   ebp,ebp
c0004e3f:	74 20                	je     c0004e61 <f_open+0xd8>
c0004e41:	83 fd 04             	cmp    ebp,0x4
c0004e44:	0f 85 58 03 00 00    	jne    c00051a2 <f_open+0x419>
c0004e4a:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004e4e:	83 ce 08             	or     esi,0x8
c0004e51:	e8 8a f2 ff ff       	call   c00040e0 <dir_register>
c0004e56:	89 c5                	mov    ebp,eax
c0004e58:	85 c0                	test   eax,eax
c0004e5a:	74 2f                	je     c0004e8b <f_open+0x102>
c0004e5c:	e9 41 03 00 00       	jmp    c00051a2 <f_open+0x419>
c0004e61:	bd 07 00 00 00       	mov    ebp,0x7
c0004e66:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0004e6b:	0f 85 31 03 00 00    	jne    c00051a2 <f_open+0x419>
c0004e71:	bd 08 00 00 00       	mov    ebp,0x8
c0004e76:	f7 c7 04 00 00 00    	test   edi,0x4
c0004e7c:	0f 85 20 03 00 00    	jne    c00051a2 <f_open+0x419>
c0004e82:	83 e7 08             	and    edi,0x8
c0004e85:	0f 84 65 01 00 00    	je     c0004ff0 <f_open+0x267>
c0004e8b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004e8f:	8a 02                	mov    al,BYTE PTR [edx]
c0004e91:	3c 04                	cmp    al,0x4
c0004e93:	0f 85 97 00 00 00    	jne    c0004f30 <f_open+0x1a7>
c0004e99:	8d 42 10             	lea    eax,[edx+0x10]
c0004e9c:	89 13                	mov    DWORD PTR [ebx],edx
c0004e9e:	89 da                	mov    edx,ebx
c0004ea0:	e8 80 fd ff ff       	call   c0004c25 <init_alloc_info.isra.2>
c0004ea5:	31 d2                	xor    edx,edx
c0004ea7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004eab:	b9 1e 00 00 00       	mov    ecx,0x1e
c0004eb0:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004eb3:	83 c0 02             	add    eax,0x2
c0004eb6:	e8 32 cc ff ff       	call   c0001aed <mem_set>
c0004ebb:	b9 1a 00 00 00       	mov    ecx,0x1a
c0004ec0:	31 d2                	xor    edx,edx
c0004ec2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ec6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004ec9:	83 c0 26             	add    eax,0x26
c0004ecc:	e8 1c cc ff ff       	call   c0001aed <mem_set>
c0004ed1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ed5:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0004ed8:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c0004edc:	ba 00 00 21 50       	mov    edx,0x50210000
c0004ee1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004ee4:	83 c0 08             	add    eax,0x8
c0004ee7:	e8 e3 cb ff ff       	call   c0001acf <st_dword>
c0004eec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ef0:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004ef3:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c0004ef7:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004efb:	e8 b7 ea ff ff       	call   c00039b7 <store_xdir>
c0004f00:	89 c5                	mov    ebp,eax
c0004f02:	85 c0                	test   eax,eax
c0004f04:	0f 85 98 02 00 00    	jne    c00051a2 <f_open+0x419>
c0004f0a:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004f0d:	85 d2                	test   edx,edx
c0004f0f:	0f 84 db 00 00 00    	je     c0004ff0 <f_open+0x267>
c0004f15:	31 c9                	xor    ecx,ecx
c0004f17:	89 d8                	mov    eax,ebx
c0004f19:	e8 8e e3 ff ff       	call   c00032ac <remove_chain>
c0004f1e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004f22:	89 c5                	mov    ebp,eax
c0004f24:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004f27:	48                   	dec    eax
c0004f28:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0004f2b:	e9 b8 00 00 00       	jmp    c0004fe8 <f_open+0x25f>
c0004f30:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0004f34:	89 ea                	mov    edx,ebp
c0004f36:	e8 99 fc ff ff       	call   c0004bd4 <ld_clust.isra.0>
c0004f3b:	ba 00 00 21 50       	mov    edx,0x50210000
c0004f40:	89 c7                	mov    edi,eax
c0004f42:	8d 45 0e             	lea    eax,[ebp+0xe]
c0004f45:	e8 85 cb ff ff       	call   c0001acf <st_dword>
c0004f4a:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004f4e:	31 c9                	xor    ecx,ecx
c0004f50:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0004f54:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f58:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004f5c:	e8 9c fc ff ff       	call   c0004bfd <st_clust.isra.1>
c0004f61:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004f65:	31 d2                	xor    edx,edx
c0004f67:	83 c0 1c             	add    eax,0x1c
c0004f6a:	e8 60 cb ff ff       	call   c0001acf <st_dword>
c0004f6f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f73:	85 ff                	test   edi,edi
c0004f75:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004f79:	74 75                	je     c0004ff0 <f_open+0x267>
c0004f7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f7f:	31 c9                	xor    ecx,ecx
c0004f81:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0004f84:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0004f87:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004f8b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004f8f:	89 fa                	mov    edx,edi
c0004f91:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f95:	e8 12 e3 ff ff       	call   c00032ac <remove_chain>
c0004f9a:	89 c5                	mov    ebp,eax
c0004f9c:	85 c0                	test   eax,eax
c0004f9e:	0f 85 fe 01 00 00    	jne    c00051a2 <f_open+0x419>
c0004fa4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004fa8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004fac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fb0:	4f                   	dec    edi
c0004fb1:	e8 81 d2 ff ff       	call   c0002237 <move_window>
c0004fb6:	89 c5                	mov    ebp,eax
c0004fb8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fbc:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0004fbf:	eb 27                	jmp    c0004fe8 <f_open+0x25f>
c0004fc1:	85 ed                	test   ebp,ebp
c0004fc3:	0f 85 d9 01 00 00    	jne    c00051a2 <f_open+0x419>
c0004fc9:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c0004fcd:	bd 04 00 00 00       	mov    ebp,0x4
c0004fd2:	a8 10                	test   al,0x10
c0004fd4:	0f 85 c8 01 00 00    	jne    c00051a2 <f_open+0x419>
c0004fda:	83 e7 02             	and    edi,0x2
c0004fdd:	74 11                	je     c0004ff0 <f_open+0x267>
c0004fdf:	bd 07 00 00 00       	mov    ebp,0x7
c0004fe4:	a8 01                	test   al,0x1
c0004fe6:	eb 02                	jmp    c0004fea <f_open+0x261>
c0004fe8:	85 ed                	test   ebp,ebp
c0004fea:	0f 85 b2 01 00 00    	jne    c00051a2 <f_open+0x419>
c0004ff0:	f7 c6 08 00 00 00    	test   esi,0x8
c0004ff6:	74 03                	je     c0004ffb <f_open+0x272>
c0004ff8:	83 ce 40             	or     esi,0x40
c0004ffb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004fff:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c0005002:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c0005005:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c0005008:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c000500b:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c000500f:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c0005012:	8a 02                	mov    al,BYTE PTR [edx]
c0005014:	3c 04                	cmp    al,0x4
c0005016:	75 2a                	jne    c0005042 <f_open+0x2b9>
c0005018:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000501c:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0005021:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005024:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0005028:	30 c0                	xor    al,al
c000502a:	09 c8                	or     eax,ecx
c000502c:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000502f:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005033:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005036:	8d 42 10             	lea    eax,[edx+0x10]
c0005039:	89 da                	mov    edx,ebx
c000503b:	e8 e5 fb ff ff       	call   c0004c25 <init_alloc_info.isra.2>
c0005040:	eb 1c                	jmp    c000505e <f_open+0x2d5>
c0005042:	89 fa                	mov    edx,edi
c0005044:	e8 8b fb ff ff       	call   c0004bd4 <ld_clust.isra.0>
c0005049:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000504c:	8d 47 1c             	lea    eax,[edi+0x1c]
c000504f:	e8 12 ca ff ff       	call   c0001a66 <ld_dword>
c0005054:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000505b:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000505e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005062:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005069:	89 03                	mov    DWORD PTR [ebx],eax
c000506b:	31 d2                	xor    edx,edx
c000506d:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005071:	b9 00 02 00 00       	mov    ecx,0x200
c0005076:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000507a:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c000507e:	89 f0                	mov    eax,esi
c0005080:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0005087:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c000508a:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c0005091:	8d 43 50             	lea    eax,[ebx+0x50]
c0005094:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c000509b:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00050a2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00050a6:	e8 42 ca ff ff       	call   c0001aed <mem_set>
c00050ab:	83 e6 20             	and    esi,0x20
c00050ae:	75 07                	jne    c00050b7 <f_open+0x32e>
c00050b0:	31 ed                	xor    ebp,ebp
c00050b2:	e9 eb 00 00 00       	jmp    c00051a2 <f_open+0x419>
c00050b7:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00050ba:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00050bd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00050c1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00050c5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00050c9:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00050cd:	74 e1                	je     c00050b0 <f_open+0x327>
c00050cf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00050d3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00050d7:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00050da:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00050dd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050e1:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00050e4:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00050e8:	31 ff                	xor    edi,edi
c00050ea:	c1 e5 09             	shl    ebp,0x9
c00050ed:	89 ee                	mov    esi,ebp
c00050ef:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00050f3:	89 f8                	mov    eax,edi
c00050f5:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00050f9:	73 22                	jae    c000511d <f_open+0x394>
c00050fb:	89 d8                	mov    eax,ebx
c00050fd:	e8 bd dc ff ff       	call   c0002dbf <get_fat>
c0005102:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0005106:	89 c2                	mov    edx,eax
c0005108:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c000510c:	83 f8 01             	cmp    eax,0x1
c000510f:	76 10                	jbe    c0005121 <f_open+0x398>
c0005111:	83 f8 ff             	cmp    eax,0xffffffff
c0005114:	75 d9                	jne    c00050ef <f_open+0x366>
c0005116:	bd 01 00 00 00       	mov    ebp,0x1
c000511b:	eb 09                	jmp    c0005126 <f_open+0x39d>
c000511d:	31 ed                	xor    ebp,ebp
c000511f:	eb 05                	jmp    c0005126 <f_open+0x39d>
c0005121:	bd 02 00 00 00       	mov    ebp,0x2
c0005126:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0005129:	85 ed                	test   ebp,ebp
c000512b:	75 75                	jne    c00051a2 <f_open+0x419>
c000512d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005131:	25 ff 01 00 00       	and    eax,0x1ff
c0005136:	0f 84 74 ff ff ff    	je     c00050b0 <f_open+0x327>
c000513c:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005140:	bd 02 00 00 00       	mov    ebp,0x2
c0005145:	89 c8                	mov    eax,ecx
c0005147:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000514b:	e8 a2 cb ff ff       	call   c0001cf2 <clst2sect>
c0005150:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005154:	89 d7                	mov    edi,edx
c0005156:	09 c7                	or     edi,eax
c0005158:	74 48                	je     c00051a2 <f_open+0x419>
c000515a:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000515e:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005162:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000516a:	0f ac fe 09          	shrd   esi,edi,0x9
c000516e:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0005172:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0005176:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005179:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000517d:	83 ec 0c             	sub    esp,0xc
c0005180:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0005183:	6a 01                	push   0x1
c0005185:	52                   	push   edx
c0005186:	50                   	push   eax
c0005187:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000518b:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000518f:	50                   	push   eax
c0005190:	e8 79 c8 ff ff       	call   c0001a0e <disk_read>
c0005195:	83 c4 20             	add    esp,0x20
c0005198:	85 c0                	test   eax,eax
c000519a:	0f 95 c0             	setne  al
c000519d:	0f b6 c0             	movzx  eax,al
c00051a0:	89 c5                	mov    ebp,eax
c00051a2:	83 ec 0c             	sub    esp,0xc
c00051a5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00051a9:	e8 f4 30 00 00       	call   c00082a2 <ff_memfree>
c00051ae:	83 c4 10             	add    esp,0x10
c00051b1:	85 ed                	test   ebp,ebp
c00051b3:	74 06                	je     c00051bb <f_open+0x432>
c00051b5:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00051bb:	83 c4 7c             	add    esp,0x7c
c00051be:	89 e8                	mov    eax,ebp
c00051c0:	5b                   	pop    ebx
c00051c1:	5e                   	pop    esi
c00051c2:	5f                   	pop    edi
c00051c3:	5d                   	pop    ebp
c00051c4:	c3                   	ret    

c00051c5 <f_read>:
c00051c5:	55                   	push   ebp
c00051c6:	57                   	push   edi
c00051c7:	56                   	push   esi
c00051c8:	53                   	push   ebx
c00051c9:	83 ec 2c             	sub    esp,0x2c
c00051cc:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00051d0:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00051d4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00051da:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00051de:	89 d8                	mov    eax,ebx
c00051e0:	e8 77 cf ff ff       	call   c000215c <validate>
c00051e5:	89 c5                	mov    ebp,eax
c00051e7:	85 c0                	test   eax,eax
c00051e9:	0f 85 4c 02 00 00    	jne    c000543b <f_read+0x276>
c00051ef:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00051f3:	85 ed                	test   ebp,ebp
c00051f5:	0f 85 40 02 00 00    	jne    c000543b <f_read+0x276>
c00051fb:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00051ff:	0f 84 31 02 00 00    	je     c0005436 <f_read+0x271>
c0005205:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005208:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000520b:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c000520e:	bf 00 00 00 00       	mov    edi,0x0
c0005213:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0005216:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c000521a:	89 d1                	mov    ecx,edx
c000521c:	19 f9                	sbb    ecx,edi
c000521e:	0f 83 cf 00 00 00    	jae    c00052f3 <f_read+0x12e>
c0005224:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005228:	e9 c6 00 00 00       	jmp    c00052f3 <f_read+0x12e>
c000522d:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005230:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005233:	89 d0                	mov    eax,edx
c0005235:	25 ff 01 00 00       	and    eax,0x1ff
c000523a:	0f 85 c9 01 00 00    	jne    c0005409 <f_read+0x244>
c0005240:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005244:	89 d6                	mov    esi,edx
c0005246:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000524a:	89 cf                	mov    edi,ecx
c000524c:	48                   	dec    eax
c000524d:	0f ac fe 09          	shrd   esi,edi,0x9
c0005251:	21 f0                	and    eax,esi
c0005253:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005257:	0f 84 a6 00 00 00    	je     c0005303 <f_read+0x13e>
c000525d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005261:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005264:	89 c8                	mov    eax,ecx
c0005266:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005269:	e8 84 ca ff ff       	call   c0001cf2 <clst2sect>
c000526e:	89 d7                	mov    edi,edx
c0005270:	09 c7                	or     edi,eax
c0005272:	0f 84 b4 00 00 00    	je     c000532c <f_read+0x167>
c0005278:	31 ff                	xor    edi,edi
c000527a:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000527e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005281:	01 c6                	add    esi,eax
c0005283:	11 d7                	adc    edi,edx
c0005285:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000528d:	0f 86 fd 00 00 00    	jbe    c0005390 <f_read+0x1cb>
c0005293:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005297:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000529b:	c1 e8 09             	shr    eax,0x9
c000529e:	89 04 24             	mov    DWORD PTR [esp],eax
c00052a1:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00052a5:	03 14 24             	add    edx,DWORD PTR [esp]
c00052a8:	39 c2                	cmp    edx,eax
c00052aa:	76 07                	jbe    c00052b3 <f_read+0xee>
c00052ac:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00052b0:	89 04 24             	mov    DWORD PTR [esp],eax
c00052b3:	83 ec 0c             	sub    esp,0xc
c00052b6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00052ba:	57                   	push   edi
c00052bb:	56                   	push   esi
c00052bc:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00052c0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00052c4:	50                   	push   eax
c00052c5:	e8 44 c7 ff ff       	call   c0001a0e <disk_read>
c00052ca:	83 c4 20             	add    esp,0x20
c00052cd:	85 c0                	test   eax,eax
c00052cf:	75 6e                	jne    c000533f <f_read+0x17a>
c00052d1:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00052d5:	78 7e                	js     c0005355 <f_read+0x190>
c00052d7:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00052da:	c1 e6 09             	shl    esi,0x9
c00052dd:	31 ff                	xor    edi,edi
c00052df:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00052e3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00052e7:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00052eb:	01 30                	add    DWORD PTR [eax],esi
c00052ed:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00052f0:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00052f3:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00052f8:	0f 85 2f ff ff ff    	jne    c000522d <f_read+0x68>
c00052fe:	e9 38 01 00 00       	jmp    c000543b <f_read+0x276>
c0005303:	89 c8                	mov    eax,ecx
c0005305:	09 d0                	or     eax,edx
c0005307:	75 05                	jne    c000530e <f_read+0x149>
c0005309:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000530c:	eb 19                	jmp    c0005327 <f_read+0x162>
c000530e:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c0005312:	74 09                	je     c000531d <f_read+0x158>
c0005314:	89 d8                	mov    eax,ebx
c0005316:	e8 f8 c9 ff ff       	call   c0001d13 <clmt_clust>
c000531b:	eb 0a                	jmp    c0005327 <f_read+0x162>
c000531d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005320:	89 d8                	mov    eax,ebx
c0005322:	e8 98 da ff ff       	call   c0002dbf <get_fat>
c0005327:	83 f8 01             	cmp    eax,0x1
c000532a:	77 0e                	ja     c000533a <f_read+0x175>
c000532c:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005330:	bd 02 00 00 00       	mov    ebp,0x2
c0005335:	e9 01 01 00 00       	jmp    c000543b <f_read+0x276>
c000533a:	83 f8 ff             	cmp    eax,0xffffffff
c000533d:	75 0e                	jne    c000534d <f_read+0x188>
c000533f:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005343:	bd 01 00 00 00       	mov    ebp,0x1
c0005348:	e9 ee 00 00 00       	jmp    c000543b <f_read+0x276>
c000534d:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005350:	e9 08 ff ff ff       	jmp    c000525d <f_read+0x98>
c0005355:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005358:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000535b:	29 f0                	sub    eax,esi
c000535d:	19 fa                	sbb    edx,edi
c000535f:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0005362:	89 d7                	mov    edi,edx
c0005364:	ba 00 00 00 00       	mov    edx,0x0
c0005369:	89 f9                	mov    ecx,edi
c000536b:	19 d1                	sbb    ecx,edx
c000536d:	0f 83 64 ff ff ff    	jae    c00052d7 <f_read+0x112>
c0005373:	89 c7                	mov    edi,eax
c0005375:	8d 53 50             	lea    edx,[ebx+0x50]
c0005378:	c1 e7 09             	shl    edi,0x9
c000537b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000537f:	b9 00 02 00 00       	mov    ecx,0x200
c0005384:	01 f8                	add    eax,edi
c0005386:	e8 4d c7 ff ff       	call   c0001ad8 <mem_cpy>
c000538b:	e9 47 ff ff ff       	jmp    c00052d7 <f_read+0x112>
c0005390:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005393:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005396:	89 04 24             	mov    DWORD PTR [esp],eax
c0005399:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000539d:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c00053a1:	75 05                	jne    c00053a8 <f_read+0x1e3>
c00053a3:	39 34 24             	cmp    DWORD PTR [esp],esi
c00053a6:	74 5b                	je     c0005403 <f_read+0x23e>
c00053a8:	8d 43 50             	lea    eax,[ebx+0x50]
c00053ab:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00053af:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00053b3:	79 2a                	jns    c00053df <f_read+0x21a>
c00053b5:	83 ec 0c             	sub    esp,0xc
c00053b8:	6a 01                	push   0x1
c00053ba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00053be:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00053c2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00053c6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00053ca:	50                   	push   eax
c00053cb:	e8 54 c6 ff ff       	call   c0001a24 <disk_write>
c00053d0:	83 c4 20             	add    esp,0x20
c00053d3:	85 c0                	test   eax,eax
c00053d5:	0f 85 64 ff ff ff    	jne    c000533f <f_read+0x17a>
c00053db:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00053df:	83 ec 0c             	sub    esp,0xc
c00053e2:	6a 01                	push   0x1
c00053e4:	57                   	push   edi
c00053e5:	56                   	push   esi
c00053e6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00053ea:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00053ee:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00053f2:	50                   	push   eax
c00053f3:	e8 16 c6 ff ff       	call   c0001a0e <disk_read>
c00053f8:	83 c4 20             	add    esp,0x20
c00053fb:	85 c0                	test   eax,eax
c00053fd:	0f 85 3c ff ff ff    	jne    c000533f <f_read+0x17a>
c0005403:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005406:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005409:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000540c:	ba 00 02 00 00       	mov    edx,0x200
c0005411:	25 ff 01 00 00       	and    eax,0x1ff
c0005416:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000541a:	29 c2                	sub    edx,eax
c000541c:	39 d6                	cmp    esi,edx
c000541e:	76 02                	jbe    c0005422 <f_read+0x25d>
c0005420:	89 d6                	mov    esi,edx
c0005422:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c0005426:	89 f1                	mov    ecx,esi
c0005428:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000542c:	e8 a7 c6 ff ff       	call   c0001ad8 <mem_cpy>
c0005431:	e9 a7 fe ff ff       	jmp    c00052dd <f_read+0x118>
c0005436:	bd 07 00 00 00       	mov    ebp,0x7
c000543b:	83 c4 2c             	add    esp,0x2c
c000543e:	89 e8                	mov    eax,ebp
c0005440:	5b                   	pop    ebx
c0005441:	5e                   	pop    esi
c0005442:	5f                   	pop    edi
c0005443:	5d                   	pop    ebp
c0005444:	c3                   	ret    

c0005445 <f_write>:
c0005445:	55                   	push   ebp
c0005446:	57                   	push   edi
c0005447:	56                   	push   esi
c0005448:	53                   	push   ebx
c0005449:	83 ec 2c             	sub    esp,0x2c
c000544c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005450:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005454:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000545a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000545e:	89 d8                	mov    eax,ebx
c0005460:	e8 f7 cc ff ff       	call   c000215c <validate>
c0005465:	89 c5                	mov    ebp,eax
c0005467:	85 c0                	test   eax,eax
c0005469:	0f 85 86 02 00 00    	jne    c00056f5 <f_write+0x2b0>
c000546f:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005473:	85 ed                	test   ebp,ebp
c0005475:	0f 85 7a 02 00 00    	jne    c00056f5 <f_write+0x2b0>
c000547b:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c000547f:	0f 84 6b 02 00 00    	je     c00056f0 <f_write+0x2ab>
c0005485:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005489:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000548c:	0f 84 43 01 00 00    	je     c00055d5 <f_write+0x190>
c0005492:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005495:	89 c1                	mov    ecx,eax
c0005497:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c000549b:	0f 83 34 01 00 00    	jae    c00055d5 <f_write+0x190>
c00054a1:	f7 d0                	not    eax
c00054a3:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00054a7:	e9 29 01 00 00       	jmp    c00055d5 <f_write+0x190>
c00054ac:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00054af:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00054b2:	89 d0                	mov    eax,edx
c00054b4:	25 ff 01 00 00       	and    eax,0x1ff
c00054b9:	0f 85 00 02 00 00    	jne    c00056bf <f_write+0x27a>
c00054bf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00054c3:	89 d6                	mov    esi,edx
c00054c5:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00054c9:	89 cf                	mov    edi,ecx
c00054cb:	48                   	dec    eax
c00054cc:	0f ac fe 09          	shrd   esi,edi,0x9
c00054d0:	21 f0                	and    eax,esi
c00054d2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00054d6:	0f 84 06 01 00 00    	je     c00055e2 <f_write+0x19d>
c00054dc:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054e0:	0f 88 6e 01 00 00    	js     c0005654 <f_write+0x20f>
c00054e6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00054ea:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00054ed:	89 c8                	mov    eax,ecx
c00054ef:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00054f3:	e8 fa c7 ff ff       	call   c0001cf2 <clst2sect>
c00054f8:	89 d1                	mov    ecx,edx
c00054fa:	09 c1                	or     ecx,eax
c00054fc:	0f 84 1c 01 00 00    	je     c000561e <f_write+0x1d9>
c0005502:	31 ff                	xor    edi,edi
c0005504:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005508:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000550c:	01 c6                	add    esi,eax
c000550e:	11 d7                	adc    edi,edx
c0005510:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005518:	0f 86 63 01 00 00    	jbe    c0005681 <f_write+0x23c>
c000551e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005522:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005526:	c1 e8 09             	shr    eax,0x9
c0005529:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000552d:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005531:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0005535:	39 c2                	cmp    edx,eax
c0005537:	76 08                	jbe    c0005541 <f_write+0xfc>
c0005539:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000553d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005541:	83 ec 0c             	sub    esp,0xc
c0005544:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005548:	57                   	push   edi
c0005549:	56                   	push   esi
c000554a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000554e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005552:	50                   	push   eax
c0005553:	e8 cc c4 ff ff       	call   c0001a24 <disk_write>
c0005558:	83 c4 20             	add    esp,0x20
c000555b:	85 c0                	test   eax,eax
c000555d:	0f 85 ce 00 00 00    	jne    c0005631 <f_write+0x1ec>
c0005563:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005566:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005569:	29 f0                	sub    eax,esi
c000556b:	19 fa                	sbb    edx,edi
c000556d:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005571:	89 d7                	mov    edi,edx
c0005573:	ba 00 00 00 00       	mov    edx,0x0
c0005578:	89 f9                	mov    ecx,edi
c000557a:	19 d1                	sbb    ecx,edx
c000557c:	73 1c                	jae    c000559a <f_write+0x155>
c000557e:	89 c7                	mov    edi,eax
c0005580:	b9 00 02 00 00       	mov    ecx,0x200
c0005585:	c1 e7 09             	shl    edi,0x9
c0005588:	8d 43 50             	lea    eax,[ebx+0x50]
c000558b:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c000558f:	89 fa                	mov    edx,edi
c0005591:	e8 42 c5 ff ff       	call   c0001ad8 <mem_cpy>
c0005596:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000559a:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000559e:	c1 e6 09             	shl    esi,0x9
c00055a1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00055a5:	31 ff                	xor    edi,edi
c00055a7:	01 30                	add    DWORD PTR [eax],esi
c00055a9:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00055ad:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00055b1:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00055b4:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00055b7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00055ba:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00055bd:	89 c1                	mov    ecx,eax
c00055bf:	39 f2                	cmp    edx,esi
c00055c1:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00055c4:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00055c7:	19 f9                	sbb    ecx,edi
c00055c9:	73 04                	jae    c00055cf <f_write+0x18a>
c00055cb:	89 f2                	mov    edx,esi
c00055cd:	89 f8                	mov    eax,edi
c00055cf:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00055d2:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00055d5:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00055da:	0f 85 cc fe ff ff    	jne    c00054ac <f_write+0x67>
c00055e0:	eb 2e                	jmp    c0005610 <f_write+0x1cb>
c00055e2:	89 c8                	mov    eax,ecx
c00055e4:	09 d0                	or     eax,edx
c00055e6:	75 0b                	jne    c00055f3 <f_write+0x1ae>
c00055e8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00055eb:	31 d2                	xor    edx,edx
c00055ed:	85 c0                	test   eax,eax
c00055ef:	75 28                	jne    c0005619 <f_write+0x1d4>
c00055f1:	eb 12                	jmp    c0005605 <f_write+0x1c0>
c00055f3:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00055f7:	74 09                	je     c0005602 <f_write+0x1bd>
c00055f9:	89 d8                	mov    eax,ebx
c00055fb:	e8 13 c7 ff ff       	call   c0001d13 <clmt_clust>
c0005600:	eb 0a                	jmp    c000560c <f_write+0x1c7>
c0005602:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005605:	89 d8                	mov    eax,ebx
c0005607:	e8 a1 da ff ff       	call   c00030ad <create_chain>
c000560c:	85 c0                	test   eax,eax
c000560e:	75 09                	jne    c0005619 <f_write+0x1d4>
c0005610:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005614:	e9 dc 00 00 00       	jmp    c00056f5 <f_write+0x2b0>
c0005619:	83 f8 01             	cmp    eax,0x1
c000561c:	75 0e                	jne    c000562c <f_write+0x1e7>
c000561e:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005622:	bd 02 00 00 00       	mov    ebp,0x2
c0005627:	e9 c9 00 00 00       	jmp    c00056f5 <f_write+0x2b0>
c000562c:	83 f8 ff             	cmp    eax,0xffffffff
c000562f:	75 0e                	jne    c000563f <f_write+0x1fa>
c0005631:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005635:	bd 01 00 00 00       	mov    ebp,0x1
c000563a:	e9 b6 00 00 00       	jmp    c00056f5 <f_write+0x2b0>
c000563f:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005642:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0005646:	0f 85 90 fe ff ff    	jne    c00054dc <f_write+0x97>
c000564c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000564f:	e9 88 fe ff ff       	jmp    c00054dc <f_write+0x97>
c0005654:	83 ec 0c             	sub    esp,0xc
c0005657:	8d 43 50             	lea    eax,[ebx+0x50]
c000565a:	6a 01                	push   0x1
c000565c:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000565f:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005662:	50                   	push   eax
c0005663:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005667:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000566b:	50                   	push   eax
c000566c:	e8 b3 c3 ff ff       	call   c0001a24 <disk_write>
c0005671:	83 c4 20             	add    esp,0x20
c0005674:	85 c0                	test   eax,eax
c0005676:	75 b9                	jne    c0005631 <f_write+0x1ec>
c0005678:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000567c:	e9 65 fe ff ff       	jmp    c00054e6 <f_write+0xa1>
c0005681:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c0005684:	75 05                	jne    c000568b <f_write+0x246>
c0005686:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005689:	74 2e                	je     c00056b9 <f_write+0x274>
c000568b:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000568e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005691:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c0005694:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c0005697:	73 20                	jae    c00056b9 <f_write+0x274>
c0005699:	83 ec 0c             	sub    esp,0xc
c000569c:	8d 43 50             	lea    eax,[ebx+0x50]
c000569f:	6a 01                	push   0x1
c00056a1:	57                   	push   edi
c00056a2:	56                   	push   esi
c00056a3:	50                   	push   eax
c00056a4:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00056a8:	50                   	push   eax
c00056a9:	e8 60 c3 ff ff       	call   c0001a0e <disk_read>
c00056ae:	83 c4 20             	add    esp,0x20
c00056b1:	85 c0                	test   eax,eax
c00056b3:	0f 85 78 ff ff ff    	jne    c0005631 <f_write+0x1ec>
c00056b9:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00056bc:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00056bf:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00056c2:	ba 00 02 00 00       	mov    edx,0x200
c00056c7:	25 ff 01 00 00       	and    eax,0x1ff
c00056cc:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00056d0:	29 c2                	sub    edx,eax
c00056d2:	39 d6                	cmp    esi,edx
c00056d4:	76 02                	jbe    c00056d8 <f_write+0x293>
c00056d6:	89 d6                	mov    esi,edx
c00056d8:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00056dc:	89 f1                	mov    ecx,esi
c00056de:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00056e2:	e8 f1 c3 ff ff       	call   c0001ad8 <mem_cpy>
c00056e7:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00056eb:	e9 b1 fe ff ff       	jmp    c00055a1 <f_write+0x15c>
c00056f0:	bd 07 00 00 00       	mov    ebp,0x7
c00056f5:	83 c4 2c             	add    esp,0x2c
c00056f8:	89 e8                	mov    eax,ebp
c00056fa:	5b                   	pop    ebx
c00056fb:	5e                   	pop    esi
c00056fc:	5f                   	pop    edi
c00056fd:	5d                   	pop    ebp
c00056fe:	c3                   	ret    

c00056ff <f_sync>:
c00056ff:	56                   	push   esi
c0005700:	53                   	push   ebx
c0005701:	83 ec 64             	sub    esp,0x64
c0005704:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0005708:	8d 54 24 10          	lea    edx,[esp+0x10]
c000570c:	89 d8                	mov    eax,ebx
c000570e:	e8 49 ca ff ff       	call   c000215c <validate>
c0005713:	85 c0                	test   eax,eax
c0005715:	0f 85 ba 01 00 00    	jne    c00058d5 <f_sync+0x1d6>
c000571b:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c000571e:	f6 c2 40             	test   dl,0x40
c0005721:	0f 84 ae 01 00 00    	je     c00058d5 <f_sync+0x1d6>
c0005727:	84 d2                	test   dl,dl
c0005729:	79 33                	jns    c000575e <f_sync+0x5f>
c000572b:	83 ec 0c             	sub    esp,0xc
c000572e:	8d 43 50             	lea    eax,[ebx+0x50]
c0005731:	6a 01                	push   0x1
c0005733:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005736:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005739:	50                   	push   eax
c000573a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000573e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005742:	50                   	push   eax
c0005743:	e8 dc c2 ff ff       	call   c0001a24 <disk_write>
c0005748:	83 c4 20             	add    esp,0x20
c000574b:	89 c2                	mov    edx,eax
c000574d:	b8 01 00 00 00       	mov    eax,0x1
c0005752:	85 d2                	test   edx,edx
c0005754:	0f 85 7b 01 00 00    	jne    c00058d5 <f_sync+0x1d6>
c000575a:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000575e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005762:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005765:	0f 85 11 01 00 00    	jne    c000587c <f_sync+0x17d>
c000576b:	89 d8                	mov    eax,ebx
c000576d:	e8 13 d6 ff ff       	call   c0002d85 <fill_first_frag>
c0005772:	85 c0                	test   eax,eax
c0005774:	0f 85 5b 01 00 00    	jne    c00058d5 <f_sync+0x1d6>
c000577a:	83 c9 ff             	or     ecx,0xffffffff
c000577d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005780:	89 d8                	mov    eax,ebx
c0005782:	e8 c9 d5 ff ff       	call   c0002d50 <fill_last_frag>
c0005787:	85 c0                	test   eax,eax
c0005789:	0f 85 46 01 00 00    	jne    c00058d5 <f_sync+0x1d6>
c000578f:	83 ec 0c             	sub    esp,0xc
c0005792:	68 60 04 00 00       	push   0x460
c0005797:	e8 f0 2a 00 00       	call   c000828c <ff_memalloc>
c000579c:	83 c4 10             	add    esp,0x10
c000579f:	89 c6                	mov    esi,eax
c00057a1:	b8 11 00 00 00       	mov    eax,0x11
c00057a6:	85 f6                	test   esi,esi
c00057a8:	0f 84 27 01 00 00    	je     c00058d5 <f_sync+0x1d6>
c00057ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057b2:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00057b8:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00057bb:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00057be:	89 da                	mov    edx,ebx
c00057c0:	8d 44 24 14          	lea    eax,[esp+0x14]
c00057c4:	e8 af df ff ff       	call   c0003778 <load_obj_xdir>
c00057c9:	85 c0                	test   eax,eax
c00057cb:	0f 85 95 00 00 00    	jne    c0005866 <f_sync+0x167>
c00057d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057d5:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00057d8:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00057dc:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00057df:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00057e2:	83 ca 01             	or     edx,0x1
c00057e5:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00057e8:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00057eb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057ee:	83 c0 34             	add    eax,0x34
c00057f1:	e8 d9 c2 ff ff       	call   c0001acf <st_dword>
c00057f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057fa:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057fd:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005800:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005803:	83 c0 38             	add    eax,0x38
c0005806:	e8 c7 c2 ff ff       	call   c0001ad2 <st_qword>
c000580b:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000580e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005812:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005815:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005818:	83 c0 28             	add    eax,0x28
c000581b:	e8 b2 c2 ff ff       	call   c0001ad2 <st_qword>
c0005820:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005824:	ba 00 00 21 50       	mov    edx,0x50210000
c0005829:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000582c:	83 c0 0c             	add    eax,0xc
c000582f:	e8 9b c2 ff ff       	call   c0001acf <st_dword>
c0005834:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005838:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000583b:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c000583f:	31 d2                	xor    edx,edx
c0005841:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005844:	83 c0 10             	add    eax,0x10
c0005847:	e8 83 c2 ff ff       	call   c0001acf <st_dword>
c000584c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005850:	e8 62 e1 ff ff       	call   c00039b7 <store_xdir>
c0005855:	85 c0                	test   eax,eax
c0005857:	75 0d                	jne    c0005866 <f_sync+0x167>
c0005859:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000585d:	e8 00 eb ff ff       	call   c0004362 <sync_fs>
c0005862:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005866:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000586a:	83 ec 0c             	sub    esp,0xc
c000586d:	56                   	push   esi
c000586e:	e8 2f 2a 00 00       	call   c00082a2 <ff_memfree>
c0005873:	83 c4 10             	add    esp,0x10
c0005876:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000587a:	eb 59                	jmp    c00058d5 <f_sync+0x1d6>
c000587c:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c000587f:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005882:	e8 b0 c9 ff ff       	call   c0002237 <move_window>
c0005887:	85 c0                	test   eax,eax
c0005889:	75 4a                	jne    c00058d5 <f_sync+0x1d6>
c000588b:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c000588e:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005892:	89 f2                	mov    edx,esi
c0005894:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005897:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005899:	e8 5f f3 ff ff       	call   c0004bfd <st_clust.isra.1>
c000589e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00058a1:	8d 46 1c             	lea    eax,[esi+0x1c]
c00058a4:	e8 26 c2 ff ff       	call   c0001acf <st_dword>
c00058a9:	8d 46 16             	lea    eax,[esi+0x16]
c00058ac:	ba 00 00 21 50       	mov    edx,0x50210000
c00058b1:	e8 19 c2 ff ff       	call   c0001acf <st_dword>
c00058b6:	8d 46 12             	lea    eax,[esi+0x12]
c00058b9:	31 d2                	xor    edx,edx
c00058bb:	e8 0b c2 ff ff       	call   c0001acb <st_word>
c00058c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058c4:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00058c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058cc:	e8 91 ea ff ff       	call   c0004362 <sync_fs>
c00058d1:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c00058d5:	83 c4 64             	add    esp,0x64
c00058d8:	5b                   	pop    ebx
c00058d9:	5e                   	pop    esi
c00058da:	c3                   	ret    

c00058db <f_close>:
c00058db:	53                   	push   ebx
c00058dc:	83 ec 24             	sub    esp,0x24
c00058df:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00058e3:	53                   	push   ebx
c00058e4:	e8 16 fe ff ff       	call   c00056ff <f_sync>
c00058e9:	83 c4 10             	add    esp,0x10
c00058ec:	85 c0                	test   eax,eax
c00058ee:	75 15                	jne    c0005905 <f_close+0x2a>
c00058f0:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00058f4:	89 d8                	mov    eax,ebx
c00058f6:	e8 61 c8 ff ff       	call   c000215c <validate>
c00058fb:	85 c0                	test   eax,eax
c00058fd:	75 06                	jne    c0005905 <f_close+0x2a>
c00058ff:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005905:	83 c4 18             	add    esp,0x18
c0005908:	5b                   	pop    ebx
c0005909:	c3                   	ret    

c000590a <f_lseek>:
c000590a:	55                   	push   ebp
c000590b:	57                   	push   edi
c000590c:	56                   	push   esi
c000590d:	53                   	push   ebx
c000590e:	83 ec 3c             	sub    esp,0x3c
c0005911:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005915:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005919:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000591d:	89 04 24             	mov    DWORD PTR [esp],eax
c0005920:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005924:	89 d8                	mov    eax,ebx
c0005926:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c000592a:	e8 2d c8 ff ff       	call   c000215c <validate>
c000592f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005933:	85 c0                	test   eax,eax
c0005935:	0f 85 7a 04 00 00    	jne    c0005db5 <f_lseek+0x4ab>
c000593b:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c000593f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005943:	85 c0                	test   eax,eax
c0005945:	0f 85 6a 04 00 00    	jne    c0005db5 <f_lseek+0x4ab>
c000594b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000594f:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005952:	74 0c                	je     c0005960 <f_lseek+0x56>
c0005954:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005957:	85 c0                	test   eax,eax
c0005959:	75 1f                	jne    c000597a <f_lseek+0x70>
c000595b:	e9 b5 01 00 00       	jmp    c0005b15 <f_lseek+0x20b>
c0005960:	83 c9 ff             	or     ecx,0xffffffff
c0005963:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005966:	89 d8                	mov    eax,ebx
c0005968:	e8 e3 d3 ff ff       	call   c0002d50 <fill_last_frag>
c000596d:	85 c0                	test   eax,eax
c000596f:	74 e3                	je     c0005954 <f_lseek+0x4a>
c0005971:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005975:	e9 3b 04 00 00       	jmp    c0005db5 <f_lseek+0x4ab>
c000597a:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c000597f:	0f 85 ac 00 00 00    	jne    c0005a31 <f_lseek+0x127>
c0005985:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005989:	0f 85 a2 00 00 00    	jne    c0005a31 <f_lseek+0x127>
c000598f:	8d 78 04             	lea    edi,[eax+0x4]
c0005992:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005995:	8b 00                	mov    eax,DWORD PTR [eax]
c0005997:	be 02 00 00 00       	mov    esi,0x2
c000599c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00059a0:	85 ed                	test   ebp,ebp
c00059a2:	74 73                	je     c0005a17 <f_lseek+0x10d>
c00059a4:	89 e9                	mov    ecx,ebp
c00059a6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00059ad:	ff 04 24             	inc    DWORD PTR [esp]
c00059b0:	89 ca                	mov    edx,ecx
c00059b2:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00059b6:	89 d8                	mov    eax,ebx
c00059b8:	e8 02 d4 ff ff       	call   c0002dbf <get_fat>
c00059bd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00059c1:	83 f8 01             	cmp    eax,0x1
c00059c4:	77 11                	ja     c00059d7 <f_lseek+0xcd>
c00059c6:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00059ca:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c00059d2:	e9 de 03 00 00       	jmp    c0005db5 <f_lseek+0x4ab>
c00059d7:	83 f8 ff             	cmp    eax,0xffffffff
c00059da:	75 11                	jne    c00059ed <f_lseek+0xe3>
c00059dc:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00059e0:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c00059e8:	e9 c8 03 00 00       	jmp    c0005db5 <f_lseek+0x4ab>
c00059ed:	8d 51 01             	lea    edx,[ecx+0x1]
c00059f0:	89 c1                	mov    ecx,eax
c00059f2:	39 c2                	cmp    edx,eax
c00059f4:	74 b7                	je     c00059ad <f_lseek+0xa3>
c00059f6:	83 c6 02             	add    esi,0x2
c00059f9:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c00059fd:	72 0b                	jb     c0005a0a <f_lseek+0x100>
c00059ff:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005a02:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005a05:	89 0f                	mov    DWORD PTR [edi],ecx
c0005a07:	83 c7 08             	add    edi,0x8
c0005a0a:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005a0e:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005a11:	76 04                	jbe    c0005a17 <f_lseek+0x10d>
c0005a13:	89 c5                	mov    ebp,eax
c0005a15:	eb 8d                	jmp    c00059a4 <f_lseek+0x9a>
c0005a17:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005a1a:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005a1e:	89 30                	mov    DWORD PTR [eax],esi
c0005a20:	0f 87 87 03 00 00    	ja     c0005dad <f_lseek+0x4a3>
c0005a26:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005a2c:	e9 84 03 00 00       	jmp    c0005db5 <f_lseek+0x4ab>
c0005a31:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005a34:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005a37:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005a3b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005a3f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005a43:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005a46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005a4a:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005a4e:	73 0f                	jae    c0005a5f <f_lseek+0x155>
c0005a50:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005a53:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005a57:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005a5b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005a5f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005a63:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005a67:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005a6a:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005a6d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a71:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005a75:	0f 84 3a 03 00 00    	je     c0005db5 <f_lseek+0x4ab>
c0005a7b:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005a7f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005a83:	83 c6 ff             	add    esi,0xffffffff
c0005a86:	89 d8                	mov    eax,ebx
c0005a88:	83 d7 ff             	adc    edi,0xffffffff
c0005a8b:	89 f2                	mov    edx,esi
c0005a8d:	89 f9                	mov    ecx,edi
c0005a8f:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005a93:	89 34 24             	mov    DWORD PTR [esp],esi
c0005a96:	e8 78 c2 ff ff       	call   c0001d13 <clmt_clust>
c0005a9b:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005a9f:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005aa2:	89 c2                	mov    edx,eax
c0005aa4:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005aa8:	89 c8                	mov    eax,ecx
c0005aaa:	e8 43 c2 ff ff       	call   c0001cf2 <clst2sect>
c0005aaf:	89 d7                	mov    edi,edx
c0005ab1:	09 c7                	or     edi,eax
c0005ab3:	0f 84 0d ff ff ff    	je     c00059c6 <f_lseek+0xbc>
c0005ab9:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005abd:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005ac3:	0f 84 ec 02 00 00    	je     c0005db5 <f_lseek+0x4ab>
c0005ac9:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005acd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005ad1:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005ad4:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005ad8:	0f ac fe 09          	shrd   esi,edi,0x9
c0005adc:	4d                   	dec    ebp
c0005add:	31 ff                	xor    edi,edi
c0005adf:	21 ee                	and    esi,ebp
c0005ae1:	01 c6                	add    esi,eax
c0005ae3:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005ae6:	11 d7                	adc    edi,edx
c0005ae8:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005aeb:	39 fa                	cmp    edx,edi
c0005aed:	75 08                	jne    c0005af7 <f_lseek+0x1ed>
c0005aef:	39 f0                	cmp    eax,esi
c0005af1:	0f 84 be 02 00 00    	je     c0005db5 <f_lseek+0x4ab>
c0005af7:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005afa:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005afe:	0f 89 80 02 00 00    	jns    c0005d84 <f_lseek+0x47a>
c0005b04:	83 ec 0c             	sub    esp,0xc
c0005b07:	6a 01                	push   0x1
c0005b09:	52                   	push   edx
c0005b0a:	50                   	push   eax
c0005b0b:	55                   	push   ebp
c0005b0c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005b10:	e9 5a 02 00 00       	jmp    c0005d6f <f_lseek+0x465>
c0005b15:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005b19:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005b1c:	74 16                	je     c0005b34 <f_lseek+0x22a>
c0005b1e:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005b23:	76 0f                	jbe    c0005b34 <f_lseek+0x22a>
c0005b25:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005b2c:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005b34:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005b37:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005b3a:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005b3d:	89 c7                	mov    edi,eax
c0005b3f:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005b43:	73 0d                	jae    c0005b52 <f_lseek+0x248>
c0005b45:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005b49:	75 07                	jne    c0005b52 <f_lseek+0x248>
c0005b4b:	89 14 24             	mov    DWORD PTR [esp],edx
c0005b4e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005b52:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005b55:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005b58:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005b5c:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005b63:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005b6a:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005b6d:	75 09                	jne    c0005b78 <f_lseek+0x26e>
c0005b6f:	31 f6                	xor    esi,esi
c0005b71:	31 ff                	xor    edi,edi
c0005b73:	e9 af 01 00 00       	jmp    c0005d27 <f_lseek+0x41d>
c0005b78:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005b7c:	89 d7                	mov    edi,edx
c0005b7e:	c1 e1 09             	shl    ecx,0x9
c0005b81:	09 c7                	or     edi,eax
c0005b83:	89 cd                	mov    ebp,ecx
c0005b85:	74 6d                	je     c0005bf4 <f_lseek+0x2ea>
c0005b87:	83 c0 ff             	add    eax,0xffffffff
c0005b8a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b8e:	83 d2 ff             	adc    edx,0xffffffff
c0005b91:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005b94:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005b98:	83 c0 ff             	add    eax,0xffffffff
c0005b9b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005b9f:	83 d2 ff             	adc    edx,0xffffffff
c0005ba2:	31 ff                	xor    edi,edi
c0005ba4:	57                   	push   edi
c0005ba5:	51                   	push   ecx
c0005ba6:	52                   	push   edx
c0005ba7:	50                   	push   eax
c0005ba8:	e8 1f 96 01 00       	call   c001f1cc <__udivdi3>
c0005bad:	83 c4 10             	add    esp,0x10
c0005bb0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005bb4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005bb8:	57                   	push   edi
c0005bb9:	55                   	push   ebp
c0005bba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005bbe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005bc2:	e8 05 96 01 00       	call   c001f1cc <__udivdi3>
c0005bc7:	83 c4 10             	add    esp,0x10
c0005bca:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005bce:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005bd2:	19 d1                	sbb    ecx,edx
c0005bd4:	72 1e                	jb     c0005bf4 <f_lseek+0x2ea>
c0005bd6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005bda:	89 e9                	mov    ecx,ebp
c0005bdc:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005bdf:	f7 d9                	neg    ecx
c0005be1:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005be4:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005be8:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005beb:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005bee:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005bf2:	eb 28                	jmp    c0005c1c <f_lseek+0x312>
c0005bf4:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005bf7:	85 c0                	test   eax,eax
c0005bf9:	75 1e                	jne    c0005c19 <f_lseek+0x30f>
c0005bfb:	31 d2                	xor    edx,edx
c0005bfd:	89 d8                	mov    eax,ebx
c0005bff:	e8 a9 d4 ff ff       	call   c00030ad <create_chain>
c0005c04:	83 f8 01             	cmp    eax,0x1
c0005c07:	0f 84 b9 fd ff ff    	je     c00059c6 <f_lseek+0xbc>
c0005c0d:	83 f8 ff             	cmp    eax,0xffffffff
c0005c10:	0f 84 c6 fd ff ff    	je     c00059dc <f_lseek+0xd2>
c0005c16:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005c19:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005c1c:	85 c0                	test   eax,eax
c0005c1e:	0f 84 4b ff ff ff    	je     c0005b6f <f_lseek+0x265>
c0005c24:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005c28:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005c30:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005c33:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005c37:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005c3a:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005c3d:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005c41:	0f 83 9d 00 00 00    	jae    c0005ce4 <f_lseek+0x3da>
c0005c47:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005c4b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005c4f:	29 34 24             	sub    DWORD PTR [esp],esi
c0005c52:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005c56:	01 f2                	add    edx,esi
c0005c58:	11 f9                	adc    ecx,edi
c0005c5a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005c5e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005c62:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005c65:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005c68:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005c6b:	f6 c1 02             	test   cl,0x2
c0005c6e:	74 35                	je     c0005ca5 <f_lseek+0x39b>
c0005c70:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005c74:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005c77:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005c7a:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005c7e:	73 16                	jae    c0005c96 <f_lseek+0x38c>
c0005c80:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c84:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c88:	88 ca                	mov    dl,cl
c0005c8a:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005c8d:	83 ca 40             	or     edx,0x40
c0005c90:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005c93:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005c96:	89 c2                	mov    edx,eax
c0005c98:	89 d8                	mov    eax,ebx
c0005c9a:	e8 0e d4 ff ff       	call   c00030ad <create_chain>
c0005c9f:	85 c0                	test   eax,eax
c0005ca1:	75 0b                	jne    c0005cae <f_lseek+0x3a4>
c0005ca3:	eb 30                	jmp    c0005cd5 <f_lseek+0x3cb>
c0005ca5:	89 c2                	mov    edx,eax
c0005ca7:	89 d8                	mov    eax,ebx
c0005ca9:	e8 11 d1 ff ff       	call   c0002dbf <get_fat>
c0005cae:	83 f8 ff             	cmp    eax,0xffffffff
c0005cb1:	0f 84 25 fd ff ff    	je     c00059dc <f_lseek+0xd2>
c0005cb7:	83 f8 01             	cmp    eax,0x1
c0005cba:	0f 86 06 fd ff ff    	jbe    c00059c6 <f_lseek+0xbc>
c0005cc0:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005cc4:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005cc7:	0f 86 f9 fc ff ff    	jbe    c00059c6 <f_lseek+0xbc>
c0005ccd:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005cd0:	e9 5b ff ff ff       	jmp    c0005c30 <f_lseek+0x326>
c0005cd5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005cdc:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005ce4:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005ce7:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005ceb:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005cee:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005cf1:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005cf4:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005cfa:	0f 84 6f fe ff ff    	je     c0005b6f <f_lseek+0x265>
c0005d00:	89 c2                	mov    edx,eax
c0005d02:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005d06:	e8 e7 bf ff ff       	call   c0001cf2 <clst2sect>
c0005d0b:	89 d7                	mov    edi,edx
c0005d0d:	09 c7                	or     edi,eax
c0005d0f:	0f 84 b1 fc ff ff    	je     c00059c6 <f_lseek+0xbc>
c0005d15:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d19:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005d1c:	0f ac fe 09          	shrd   esi,edi,0x9
c0005d20:	c1 ef 09             	shr    edi,0x9
c0005d23:	01 c6                	add    esi,eax
c0005d25:	11 d7                	adc    edi,edx
c0005d27:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005d2a:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005d2d:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005d30:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005d33:	19 d1                	sbb    ecx,edx
c0005d35:	73 0a                	jae    c0005d41 <f_lseek+0x437>
c0005d37:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005d3a:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005d3d:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005d41:	a9 ff 01 00 00       	test   eax,0x1ff
c0005d46:	74 6d                	je     c0005db5 <f_lseek+0x4ab>
c0005d48:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005d4b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005d4e:	39 fa                	cmp    edx,edi
c0005d50:	75 04                	jne    c0005d56 <f_lseek+0x44c>
c0005d52:	39 f0                	cmp    eax,esi
c0005d54:	74 5f                	je     c0005db5 <f_lseek+0x4ab>
c0005d56:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005d59:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005d5d:	79 25                	jns    c0005d84 <f_lseek+0x47a>
c0005d5f:	83 ec 0c             	sub    esp,0xc
c0005d62:	6a 01                	push   0x1
c0005d64:	52                   	push   edx
c0005d65:	50                   	push   eax
c0005d66:	55                   	push   ebp
c0005d67:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005d6b:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005d6f:	50                   	push   eax
c0005d70:	e8 af bc ff ff       	call   c0001a24 <disk_write>
c0005d75:	83 c4 20             	add    esp,0x20
c0005d78:	85 c0                	test   eax,eax
c0005d7a:	0f 85 5c fc ff ff    	jne    c00059dc <f_lseek+0xd2>
c0005d80:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005d84:	83 ec 0c             	sub    esp,0xc
c0005d87:	6a 01                	push   0x1
c0005d89:	57                   	push   edi
c0005d8a:	56                   	push   esi
c0005d8b:	55                   	push   ebp
c0005d8c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005d90:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005d94:	50                   	push   eax
c0005d95:	e8 74 bc ff ff       	call   c0001a0e <disk_read>
c0005d9a:	83 c4 20             	add    esp,0x20
c0005d9d:	85 c0                	test   eax,eax
c0005d9f:	0f 85 37 fc ff ff    	jne    c00059dc <f_lseek+0xd2>
c0005da5:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005da8:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005dab:	eb 08                	jmp    c0005db5 <f_lseek+0x4ab>
c0005dad:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005db5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005db9:	83 c4 3c             	add    esp,0x3c
c0005dbc:	5b                   	pop    ebx
c0005dbd:	5e                   	pop    esi
c0005dbe:	5f                   	pop    edi
c0005dbf:	5d                   	pop    ebp
c0005dc0:	c3                   	ret    

c0005dc1 <f_opendir>:
c0005dc1:	56                   	push   esi
c0005dc2:	b8 09 00 00 00       	mov    eax,0x9
c0005dc7:	53                   	push   ebx
c0005dc8:	83 ec 24             	sub    esp,0x24
c0005dcb:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005dcf:	85 db                	test   ebx,ebx
c0005dd1:	0f 84 e6 00 00 00    	je     c0005ebd <f_opendir+0xfc>
c0005dd7:	31 c9                	xor    ecx,ecx
c0005dd9:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005ddd:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005de1:	e8 03 c7 ff ff       	call   c00024e9 <mount_volume>
c0005de6:	85 c0                	test   eax,eax
c0005de8:	0f 85 c9 00 00 00    	jne    c0005eb7 <f_opendir+0xf6>
c0005dee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005df2:	83 ec 0c             	sub    esp,0xc
c0005df5:	89 03                	mov    DWORD PTR [ebx],eax
c0005df7:	68 60 04 00 00       	push   0x460
c0005dfc:	e8 8b 24 00 00       	call   c000828c <ff_memalloc>
c0005e01:	83 c4 10             	add    esp,0x10
c0005e04:	89 c6                	mov    esi,eax
c0005e06:	b8 11 00 00 00       	mov    eax,0x11
c0005e0b:	85 f6                	test   esi,esi
c0005e0d:	0f 84 aa 00 00 00    	je     c0005ebd <f_opendir+0xfc>
c0005e13:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e17:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005e1d:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005e20:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005e23:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005e27:	89 d8                	mov    eax,ebx
c0005e29:	e8 31 ee ff ff       	call   c0004c5f <follow_path>
c0005e2e:	85 c0                	test   eax,eax
c0005e30:	75 61                	jne    c0005e93 <f_opendir+0xd2>
c0005e32:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0005e36:	78 46                	js     c0005e7e <f_opendir+0xbd>
c0005e38:	b8 05 00 00 00       	mov    eax,0x5
c0005e3d:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0005e41:	74 50                	je     c0005e93 <f_opendir+0xd2>
c0005e43:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005e47:	8a 01                	mov    al,BYTE PTR [ecx]
c0005e49:	3c 04                	cmp    al,0x4
c0005e4b:	75 26                	jne    c0005e73 <f_opendir+0xb2>
c0005e4d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005e50:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005e53:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005e56:	30 d2                	xor    dl,dl
c0005e58:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0005e5c:	09 c2                	or     edx,eax
c0005e5e:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0005e61:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0005e64:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005e67:	89 da                	mov    edx,ebx
c0005e69:	8d 41 10             	lea    eax,[ecx+0x10]
c0005e6c:	e8 b4 ed ff ff       	call   c0004c25 <init_alloc_info.isra.2>
c0005e71:	eb 0b                	jmp    c0005e7e <f_opendir+0xbd>
c0005e73:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0005e76:	e8 59 ed ff ff       	call   c0004bd4 <ld_clust.isra.0>
c0005e7b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005e7e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e82:	31 d2                	xor    edx,edx
c0005e84:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005e88:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005e8c:	89 d8                	mov    eax,ebx
c0005e8e:	e8 22 d1 ff ff       	call   c0002fb5 <dir_sdi>
c0005e93:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005e97:	83 ec 0c             	sub    esp,0xc
c0005e9a:	56                   	push   esi
c0005e9b:	e8 02 24 00 00       	call   c00082a2 <ff_memfree>
c0005ea0:	83 c4 10             	add    esp,0x10
c0005ea3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005ea7:	83 f8 04             	cmp    eax,0x4
c0005eaa:	74 06                	je     c0005eb2 <f_opendir+0xf1>
c0005eac:	85 c0                	test   eax,eax
c0005eae:	74 0d                	je     c0005ebd <f_opendir+0xfc>
c0005eb0:	eb 05                	jmp    c0005eb7 <f_opendir+0xf6>
c0005eb2:	b8 05 00 00 00       	mov    eax,0x5
c0005eb7:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005ebd:	83 c4 24             	add    esp,0x24
c0005ec0:	5b                   	pop    ebx
c0005ec1:	5e                   	pop    esi
c0005ec2:	c3                   	ret    

c0005ec3 <f_closedir>:
c0005ec3:	53                   	push   ebx
c0005ec4:	83 ec 18             	sub    esp,0x18
c0005ec7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0005ecb:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005ecf:	89 d8                	mov    eax,ebx
c0005ed1:	e8 86 c2 ff ff       	call   c000215c <validate>
c0005ed6:	85 c0                	test   eax,eax
c0005ed8:	75 06                	jne    c0005ee0 <f_closedir+0x1d>
c0005eda:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005ee0:	83 c4 18             	add    esp,0x18
c0005ee3:	5b                   	pop    ebx
c0005ee4:	c3                   	ret    

c0005ee5 <f_readdir>:
c0005ee5:	57                   	push   edi
c0005ee6:	56                   	push   esi
c0005ee7:	53                   	push   ebx
c0005ee8:	83 ec 20             	sub    esp,0x20
c0005eeb:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005eef:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0005ef3:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005ef7:	89 d8                	mov    eax,ebx
c0005ef9:	e8 5e c2 ff ff       	call   c000215c <validate>
c0005efe:	85 c0                	test   eax,eax
c0005f00:	75 77                	jne    c0005f79 <f_readdir+0x94>
c0005f02:	85 ff                	test   edi,edi
c0005f04:	75 0b                	jne    c0005f11 <f_readdir+0x2c>
c0005f06:	31 d2                	xor    edx,edx
c0005f08:	89 d8                	mov    eax,ebx
c0005f0a:	e8 a6 d0 ff ff       	call   c0002fb5 <dir_sdi>
c0005f0f:	eb 68                	jmp    c0005f79 <f_readdir+0x94>
c0005f11:	83 ec 0c             	sub    esp,0xc
c0005f14:	68 60 04 00 00       	push   0x460
c0005f19:	e8 6e 23 00 00       	call   c000828c <ff_memalloc>
c0005f1e:	83 c4 10             	add    esp,0x10
c0005f21:	89 c6                	mov    esi,eax
c0005f23:	b8 11 00 00 00       	mov    eax,0x11
c0005f28:	85 f6                	test   esi,esi
c0005f2a:	74 4d                	je     c0005f79 <f_readdir+0x94>
c0005f2c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005f30:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005f36:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005f39:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005f3c:	31 d2                	xor    edx,edx
c0005f3e:	89 d8                	mov    eax,ebx
c0005f40:	e8 80 d8 ff ff       	call   c00037c5 <dir_read>
c0005f45:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0005f4a:	75 19                	jne    c0005f65 <f_readdir+0x80>
c0005f4c:	89 fa                	mov    edx,edi
c0005f4e:	89 d8                	mov    eax,ebx
c0005f50:	e8 7e ea ff ff       	call   c00049d3 <get_fileinfo>
c0005f55:	31 d2                	xor    edx,edx
c0005f57:	89 d8                	mov    eax,ebx
c0005f59:	e8 af d5 ff ff       	call   c000350d <dir_next>
c0005f5e:	83 f8 04             	cmp    eax,0x4
c0005f61:	75 02                	jne    c0005f65 <f_readdir+0x80>
c0005f63:	31 c0                	xor    eax,eax
c0005f65:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005f69:	83 ec 0c             	sub    esp,0xc
c0005f6c:	56                   	push   esi
c0005f6d:	e8 30 23 00 00       	call   c00082a2 <ff_memfree>
c0005f72:	83 c4 10             	add    esp,0x10
c0005f75:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005f79:	83 c4 20             	add    esp,0x20
c0005f7c:	5b                   	pop    ebx
c0005f7d:	5e                   	pop    esi
c0005f7e:	5f                   	pop    edi
c0005f7f:	c3                   	ret    

c0005f80 <f_stat>:
c0005f80:	57                   	push   edi
c0005f81:	31 c9                	xor    ecx,ecx
c0005f83:	56                   	push   esi
c0005f84:	53                   	push   ebx
c0005f85:	83 ec 50             	sub    esp,0x50
c0005f88:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0005f8c:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005f90:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005f94:	e8 50 c5 ff ff       	call   c00024e9 <mount_volume>
c0005f99:	89 c3                	mov    ebx,eax
c0005f9b:	85 c0                	test   eax,eax
c0005f9d:	75 67                	jne    c0006006 <f_stat+0x86>
c0005f9f:	83 ec 0c             	sub    esp,0xc
c0005fa2:	bb 11 00 00 00       	mov    ebx,0x11
c0005fa7:	68 60 04 00 00       	push   0x460
c0005fac:	e8 db 22 00 00       	call   c000828c <ff_memalloc>
c0005fb1:	83 c4 10             	add    esp,0x10
c0005fb4:	89 c6                	mov    esi,eax
c0005fb6:	85 c0                	test   eax,eax
c0005fb8:	74 4c                	je     c0006006 <f_stat+0x86>
c0005fba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005fbe:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005fc4:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005fc7:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005fca:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0005fce:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005fd2:	e8 88 ec ff ff       	call   c0004c5f <follow_path>
c0005fd7:	89 c3                	mov    ebx,eax
c0005fd9:	85 c0                	test   eax,eax
c0005fdb:	75 1d                	jne    c0005ffa <f_stat+0x7a>
c0005fdd:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0005fe2:	78 11                	js     c0005ff5 <f_stat+0x75>
c0005fe4:	85 ff                	test   edi,edi
c0005fe6:	74 12                	je     c0005ffa <f_stat+0x7a>
c0005fe8:	89 fa                	mov    edx,edi
c0005fea:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005fee:	e8 e0 e9 ff ff       	call   c00049d3 <get_fileinfo>
c0005ff3:	eb 05                	jmp    c0005ffa <f_stat+0x7a>
c0005ff5:	bb 06 00 00 00       	mov    ebx,0x6
c0005ffa:	83 ec 0c             	sub    esp,0xc
c0005ffd:	56                   	push   esi
c0005ffe:	e8 9f 22 00 00       	call   c00082a2 <ff_memfree>
c0006003:	83 c4 10             	add    esp,0x10
c0006006:	83 c4 50             	add    esp,0x50
c0006009:	89 d8                	mov    eax,ebx
c000600b:	5b                   	pop    ebx
c000600c:	5e                   	pop    esi
c000600d:	5f                   	pop    edi
c000600e:	c3                   	ret    

c000600f <f_getfree>:
c000600f:	55                   	push   ebp
c0006010:	31 c9                	xor    ecx,ecx
c0006012:	57                   	push   edi
c0006013:	56                   	push   esi
c0006014:	53                   	push   ebx
c0006015:	83 ec 5c             	sub    esp,0x5c
c0006018:	8d 54 24 24          	lea    edx,[esp+0x24]
c000601c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006020:	e8 c4 c4 ff ff       	call   c00024e9 <mount_volume>
c0006025:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006029:	85 c0                	test   eax,eax
c000602b:	0f 85 9d 01 00 00    	jne    c00061ce <f_getfree+0x1bf>
c0006031:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006035:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0006039:	89 02                	mov    DWORD PTR [edx],eax
c000603b:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c000603e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0006041:	8d 71 fe             	lea    esi,[ecx-0x2]
c0006044:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006048:	39 f2                	cmp    edx,esi
c000604a:	77 0b                	ja     c0006057 <f_getfree+0x48>
c000604c:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006050:	89 10                	mov    DWORD PTR [eax],edx
c0006052:	e9 77 01 00 00       	jmp    c00061ce <f_getfree+0x1bf>
c0006057:	8a 10                	mov    dl,BYTE PTR [eax]
c0006059:	80 fa 01             	cmp    dl,0x1
c000605c:	75 3a                	jne    c0006098 <f_getfree+0x89>
c000605e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0006062:	be 02 00 00 00       	mov    esi,0x2
c0006067:	31 db                	xor    ebx,ebx
c0006069:	89 f2                	mov    edx,esi
c000606b:	8d 44 24 28          	lea    eax,[esp+0x28]
c000606f:	e8 4b cd ff ff       	call   c0002dbf <get_fat>
c0006074:	83 f8 ff             	cmp    eax,0xffffffff
c0006077:	0f 84 28 01 00 00    	je     c00061a5 <f_getfree+0x196>
c000607d:	83 f8 01             	cmp    eax,0x1
c0006080:	0f 84 29 01 00 00    	je     c00061af <f_getfree+0x1a0>
c0006086:	83 d3 00             	adc    ebx,0x0
c0006089:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000608d:	46                   	inc    esi
c000608e:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c0006091:	77 d6                	ja     c0006069 <f_getfree+0x5a>
c0006093:	e9 25 01 00 00       	jmp    c00061bd <f_getfree+0x1ae>
c0006098:	80 fa 04             	cmp    dl,0x4
c000609b:	0f 85 88 00 00 00    	jne    c0006129 <f_getfree+0x11a>
c00060a1:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c00060a4:	31 ed                	xor    ebp,ebp
c00060a6:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00060a9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00060ad:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00060b1:	31 db                	xor    ebx,ebx
c00060b3:	85 ed                	test   ebp,ebp
c00060b5:	75 3f                	jne    c00060f6 <f_getfree+0xe7>
c00060b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00060bb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00060bf:	83 c0 01             	add    eax,0x1
c00060c2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00060c6:	83 d2 00             	adc    edx,0x0
c00060c9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00060cd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00060d1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00060d5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00060d9:	e8 59 c1 ff ff       	call   c0002237 <move_window>
c00060de:	85 c0                	test   eax,eax
c00060e0:	0f 85 d3 00 00 00    	jne    c00061b9 <f_getfree+0x1aa>
c00060e6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00060ea:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00060ee:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00060f2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00060f6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00060fa:	8d 4e f8             	lea    ecx,[esi-0x8]
c00060fd:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c0006101:	89 cf                	mov    edi,ecx
c0006103:	85 f6                	test   esi,esi
c0006105:	74 12                	je     c0006119 <f_getfree+0x10a>
c0006107:	88 c1                	mov    cl,al
c0006109:	83 e1 01             	and    ecx,0x1
c000610c:	80 f9 01             	cmp    cl,0x1
c000610f:	83 d3 00             	adc    ebx,0x0
c0006112:	d0 e8                	shr    al,1
c0006114:	4e                   	dec    esi
c0006115:	39 fe                	cmp    esi,edi
c0006117:	75 ea                	jne    c0006103 <f_getfree+0xf4>
c0006119:	45                   	inc    ebp
c000611a:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0006120:	85 f6                	test   esi,esi
c0006122:	75 8f                	jne    c00060b3 <f_getfree+0xa4>
c0006124:	e9 94 00 00 00       	jmp    c00061bd <f_getfree+0x1ae>
c0006129:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000612c:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c000612f:	31 f6                	xor    esi,esi
c0006131:	31 db                	xor    ebx,ebx
c0006133:	85 f6                	test   esi,esi
c0006135:	75 1b                	jne    c0006152 <f_getfree+0x143>
c0006137:	89 d7                	mov    edi,edx
c0006139:	89 cd                	mov    ebp,ecx
c000613b:	83 c7 01             	add    edi,0x1
c000613e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006142:	83 d5 00             	adc    ebp,0x0
c0006145:	e8 ed c0 ff ff       	call   c0002237 <move_window>
c000614a:	85 c0                	test   eax,eax
c000614c:	75 6b                	jne    c00061b9 <f_getfree+0x1aa>
c000614e:	89 fa                	mov    edx,edi
c0006150:	89 e9                	mov    ecx,ebp
c0006152:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006156:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000615a:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c000615e:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006161:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0006165:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006169:	75 11                	jne    c000617c <f_getfree+0x16d>
c000616b:	e8 e9 b8 ff ff       	call   c0001a59 <ld_word>
c0006170:	66 83 f8 01          	cmp    ax,0x1
c0006174:	83 d3 00             	adc    ebx,0x0
c0006177:	83 c6 02             	add    esi,0x2
c000617a:	eb 13                	jmp    c000618f <f_getfree+0x180>
c000617c:	e8 e5 b8 ff ff       	call   c0001a66 <ld_dword>
c0006181:	25 ff ff ff 0f       	and    eax,0xfffffff
c0006186:	83 f8 01             	cmp    eax,0x1
c0006189:	83 d3 00             	adc    ebx,0x0
c000618c:	83 c6 04             	add    esi,0x4
c000618f:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0006195:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006199:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000619d:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c00061a1:	75 90                	jne    c0006133 <f_getfree+0x124>
c00061a3:	eb 18                	jmp    c00061bd <f_getfree+0x1ae>
c00061a5:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00061ad:	eb 0e                	jmp    c00061bd <f_getfree+0x1ae>
c00061af:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00061b7:	eb 04                	jmp    c00061bd <f_getfree+0x1ae>
c00061b9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00061bd:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00061c1:	89 18                	mov    DWORD PTR [eax],ebx
c00061c3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00061c7:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00061ca:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00061ce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00061d2:	83 c4 5c             	add    esp,0x5c
c00061d5:	5b                   	pop    ebx
c00061d6:	5e                   	pop    esi
c00061d7:	5f                   	pop    edi
c00061d8:	5d                   	pop    ebp
c00061d9:	c3                   	ret    

c00061da <f_truncate>:
c00061da:	56                   	push   esi
c00061db:	53                   	push   ebx
c00061dc:	83 ec 14             	sub    esp,0x14
c00061df:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00061e3:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00061e7:	89 d8                	mov    eax,ebx
c00061e9:	e8 6e bf ff ff       	call   c000215c <validate>
c00061ee:	89 c6                	mov    esi,eax
c00061f0:	85 c0                	test   eax,eax
c00061f2:	0f 85 d2 00 00 00    	jne    c00062ca <f_truncate+0xf0>
c00061f8:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c00061fc:	85 f6                	test   esi,esi
c00061fe:	0f 85 c6 00 00 00    	jne    c00062ca <f_truncate+0xf0>
c0006204:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0006208:	0f 84 b7 00 00 00    	je     c00062c5 <f_truncate+0xeb>
c000620e:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006211:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0006214:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0006217:	89 d1                	mov    ecx,edx
c0006219:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c000621c:	0f 83 a8 00 00 00    	jae    c00062ca <f_truncate+0xf0>
c0006222:	09 c2                	or     edx,eax
c0006224:	75 15                	jne    c000623b <f_truncate+0x61>
c0006226:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0006229:	31 c9                	xor    ecx,ecx
c000622b:	89 d8                	mov    eax,ebx
c000622d:	e8 7a d0 ff ff       	call   c00032ac <remove_chain>
c0006232:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0006239:	eb 35                	jmp    c0006270 <f_truncate+0x96>
c000623b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000623e:	89 d8                	mov    eax,ebx
c0006240:	e8 7a cb ff ff       	call   c0002dbf <get_fat>
c0006245:	89 c2                	mov    edx,eax
c0006247:	b8 01 00 00 00       	mov    eax,0x1
c000624c:	83 fa ff             	cmp    edx,0xffffffff
c000624f:	74 1f                	je     c0006270 <f_truncate+0x96>
c0006251:	b8 02 00 00 00       	mov    eax,0x2
c0006256:	83 fa 01             	cmp    edx,0x1
c0006259:	74 15                	je     c0006270 <f_truncate+0x96>
c000625b:	31 c0                	xor    eax,eax
c000625d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006261:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c0006264:	76 0a                	jbe    c0006270 <f_truncate+0x96>
c0006266:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006269:	89 d8                	mov    eax,ebx
c000626b:	e8 3c d0 ff ff       	call   c00032ac <remove_chain>
c0006270:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0006273:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0006276:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006279:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000627c:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c000627f:	83 ca 40             	or     edx,0x40
c0006282:	85 c0                	test   eax,eax
c0006284:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0006287:	75 35                	jne    c00062be <f_truncate+0xe4>
c0006289:	84 d2                	test   dl,dl
c000628b:	79 3d                	jns    c00062ca <f_truncate+0xf0>
c000628d:	83 ec 0c             	sub    esp,0xc
c0006290:	8d 43 50             	lea    eax,[ebx+0x50]
c0006293:	6a 01                	push   0x1
c0006295:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0006298:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000629b:	50                   	push   eax
c000629c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00062a0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00062a4:	50                   	push   eax
c00062a5:	e8 7a b7 ff ff       	call   c0001a24 <disk_write>
c00062aa:	83 c4 20             	add    esp,0x20
c00062ad:	85 c0                	test   eax,eax
c00062af:	75 08                	jne    c00062b9 <f_truncate+0xdf>
c00062b1:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00062b5:	31 f6                	xor    esi,esi
c00062b7:	eb 11                	jmp    c00062ca <f_truncate+0xf0>
c00062b9:	b8 01 00 00 00       	mov    eax,0x1
c00062be:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00062c1:	89 c6                	mov    esi,eax
c00062c3:	eb 05                	jmp    c00062ca <f_truncate+0xf0>
c00062c5:	be 07 00 00 00       	mov    esi,0x7
c00062ca:	89 f0                	mov    eax,esi
c00062cc:	83 c4 14             	add    esp,0x14
c00062cf:	5b                   	pop    ebx
c00062d0:	5e                   	pop    esi
c00062d1:	c3                   	ret    

c00062d2 <f_unlink>:
c00062d2:	56                   	push   esi
c00062d3:	b9 02 00 00 00       	mov    ecx,0x2
c00062d8:	53                   	push   ebx
c00062d9:	81 ec e4 00 00 00    	sub    esp,0xe4
c00062df:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00062e3:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00062ea:	e8 fa c1 ff ff       	call   c00024e9 <mount_volume>
c00062ef:	85 c0                	test   eax,eax
c00062f1:	0f 85 55 01 00 00    	jne    c000644c <f_unlink+0x17a>
c00062f7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00062fb:	83 ec 0c             	sub    esp,0xc
c00062fe:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0006302:	68 60 04 00 00       	push   0x460
c0006307:	e8 80 1f 00 00       	call   c000828c <ff_memalloc>
c000630c:	83 c4 10             	add    esp,0x10
c000630f:	89 c3                	mov    ebx,eax
c0006311:	b8 11 00 00 00       	mov    eax,0x11
c0006316:	85 db                	test   ebx,ebx
c0006318:	0f 84 2e 01 00 00    	je     c000644c <f_unlink+0x17a>
c000631e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006322:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006328:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c000632b:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000632e:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c0006335:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006339:	e8 21 e9 ff ff       	call   c0004c5f <follow_path>
c000633e:	85 c0                	test   eax,eax
c0006340:	0f 85 f2 00 00 00    	jne    c0006438 <f_unlink+0x166>
c0006346:	b8 06 00 00 00       	mov    eax,0x6
c000634b:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c0006353:	0f 88 df 00 00 00    	js     c0006438 <f_unlink+0x166>
c0006359:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c000635e:	74 0a                	je     c000636a <f_unlink+0x98>
c0006360:	b8 07 00 00 00       	mov    eax,0x7
c0006365:	e9 ce 00 00 00       	jmp    c0006438 <f_unlink+0x166>
c000636a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000636e:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0006372:	8a 02                	mov    al,BYTE PTR [edx]
c0006374:	3c 04                	cmp    al,0x4
c0006376:	75 12                	jne    c000638a <f_unlink+0xb8>
c0006378:	8d 42 10             	lea    eax,[edx+0x10]
c000637b:	8d 54 24 20          	lea    edx,[esp+0x20]
c000637f:	e8 a1 e8 ff ff       	call   c0004c25 <init_alloc_info.isra.2>
c0006384:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006388:	eb 0e                	jmp    c0006398 <f_unlink+0xc6>
c000638a:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0006391:	e8 3e e8 ff ff       	call   c0004bd4 <ld_clust.isra.0>
c0006396:	89 c6                	mov    esi,eax
c0006398:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c000639d:	75 12                	jne    c00063b1 <f_unlink+0xdf>
c000639f:	8d 44 24 48          	lea    eax,[esp+0x48]
c00063a3:	e8 94 d6 ff ff       	call   c0003a3c <dir_remove>
c00063a8:	85 c0                	test   eax,eax
c00063aa:	74 6c                	je     c0006418 <f_unlink+0x146>
c00063ac:	e9 87 00 00 00       	jmp    c0006438 <f_unlink+0x166>
c00063b1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00063b5:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00063bc:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00063c3:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00063c6:	75 21                	jne    c00063e9 <f_unlink+0x117>
c00063c8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00063cc:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00063d0:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00063d7:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00063de:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00063e2:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00063e9:	31 d2                	xor    edx,edx
c00063eb:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00063f2:	e8 be cb ff ff       	call   c0002fb5 <dir_sdi>
c00063f7:	85 c0                	test   eax,eax
c00063f9:	75 3d                	jne    c0006438 <f_unlink+0x166>
c00063fb:	31 d2                	xor    edx,edx
c00063fd:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0006404:	e8 bc d3 ff ff       	call   c00037c5 <dir_read>
c0006409:	85 c0                	test   eax,eax
c000640b:	0f 84 4f ff ff ff    	je     c0006360 <f_unlink+0x8e>
c0006411:	83 f8 04             	cmp    eax,0x4
c0006414:	75 22                	jne    c0006438 <f_unlink+0x166>
c0006416:	eb 87                	jmp    c000639f <f_unlink+0xcd>
c0006418:	85 f6                	test   esi,esi
c000641a:	75 0b                	jne    c0006427 <f_unlink+0x155>
c000641c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006420:	e8 3d df ff ff       	call   c0004362 <sync_fs>
c0006425:	eb 11                	jmp    c0006438 <f_unlink+0x166>
c0006427:	31 c9                	xor    ecx,ecx
c0006429:	89 f2                	mov    edx,esi
c000642b:	8d 44 24 20          	lea    eax,[esp+0x20]
c000642f:	e8 78 ce ff ff       	call   c00032ac <remove_chain>
c0006434:	85 c0                	test   eax,eax
c0006436:	74 e4                	je     c000641c <f_unlink+0x14a>
c0006438:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000643c:	83 ec 0c             	sub    esp,0xc
c000643f:	53                   	push   ebx
c0006440:	e8 5d 1e 00 00       	call   c00082a2 <ff_memfree>
c0006445:	83 c4 10             	add    esp,0x10
c0006448:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000644c:	81 c4 e4 00 00 00    	add    esp,0xe4
c0006452:	5b                   	pop    ebx
c0006453:	5e                   	pop    esi
c0006454:	c3                   	ret    

c0006455 <f_mkdir>:
c0006455:	57                   	push   edi
c0006456:	b9 02 00 00 00       	mov    ecx,0x2
c000645b:	56                   	push   esi
c000645c:	53                   	push   ebx
c000645d:	83 c4 80             	add    esp,0xffffff80
c0006460:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006464:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c000646b:	e8 79 c0 ff ff       	call   c00024e9 <mount_volume>
c0006470:	89 c3                	mov    ebx,eax
c0006472:	85 c0                	test   eax,eax
c0006474:	0f 85 fe 01 00 00    	jne    c0006678 <f_mkdir+0x223>
c000647a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000647e:	bb 11 00 00 00       	mov    ebx,0x11
c0006483:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0006487:	83 ec 0c             	sub    esp,0xc
c000648a:	68 60 04 00 00       	push   0x460
c000648f:	e8 f8 1d 00 00       	call   c000828c <ff_memalloc>
c0006494:	83 c4 10             	add    esp,0x10
c0006497:	89 c7                	mov    edi,eax
c0006499:	85 c0                	test   eax,eax
c000649b:	0f 84 d7 01 00 00    	je     c0006678 <f_mkdir+0x223>
c00064a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064a5:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c00064ab:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c00064ae:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00064b1:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00064b8:	8d 44 24 34          	lea    eax,[esp+0x34]
c00064bc:	e8 9e e7 ff ff       	call   c0004c5f <follow_path>
c00064c1:	89 c3                	mov    ebx,eax
c00064c3:	85 c0                	test   eax,eax
c00064c5:	74 3e                	je     c0006505 <f_mkdir+0xb0>
c00064c7:	83 f8 04             	cmp    eax,0x4
c00064ca:	75 3e                	jne    c000650a <f_mkdir+0xb5>
c00064cc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064d0:	31 d2                	xor    edx,edx
c00064d2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00064d6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00064da:	e8 ce cb ff ff       	call   c00030ad <create_chain>
c00064df:	89 c6                	mov    esi,eax
c00064e1:	85 c0                	test   eax,eax
c00064e3:	74 0c                	je     c00064f1 <f_mkdir+0x9c>
c00064e5:	bb 02 00 00 00       	mov    ebx,0x2
c00064ea:	83 f8 01             	cmp    eax,0x1
c00064ed:	74 07                	je     c00064f6 <f_mkdir+0xa1>
c00064ef:	eb 2a                	jmp    c000651b <f_mkdir+0xc6>
c00064f1:	bb 07 00 00 00       	mov    ebx,0x7
c00064f6:	31 c9                	xor    ecx,ecx
c00064f8:	89 f2                	mov    edx,esi
c00064fa:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00064fe:	e8 a9 cd ff ff       	call   c00032ac <remove_chain>
c0006503:	eb 05                	jmp    c000650a <f_mkdir+0xb5>
c0006505:	bb 08 00 00 00       	mov    ebx,0x8
c000650a:	83 ec 0c             	sub    esp,0xc
c000650d:	57                   	push   edi
c000650e:	e8 8f 1d 00 00       	call   c00082a2 <ff_memfree>
c0006513:	83 c4 10             	add    esp,0x10
c0006516:	e9 5d 01 00 00       	jmp    c0006678 <f_mkdir+0x223>
c000651b:	bb 01 00 00 00       	mov    ebx,0x1
c0006520:	83 f8 ff             	cmp    eax,0xffffffff
c0006523:	74 d1                	je     c00064f6 <f_mkdir+0xa1>
c0006525:	89 f2                	mov    edx,esi
c0006527:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000652b:	e8 c4 ce ff ff       	call   c00033f4 <dir_clear>
c0006530:	89 c3                	mov    ebx,eax
c0006532:	85 c0                	test   eax,eax
c0006534:	75 c0                	jne    c00064f6 <f_mkdir+0xa1>
c0006536:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000653a:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000653d:	74 69                	je     c00065a8 <f_mkdir+0x153>
c000653f:	b9 0b 00 00 00       	mov    ecx,0xb
c0006544:	83 c0 54             	add    eax,0x54
c0006547:	ba 20 00 00 00       	mov    edx,0x20
c000654c:	e8 9c b5 ff ff       	call   c0001aed <mem_set>
c0006551:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006555:	ba 00 00 21 50       	mov    edx,0x50210000
c000655a:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c000655e:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c0006562:	83 c0 6a             	add    eax,0x6a
c0006565:	e8 65 b5 ff ff       	call   c0001acf <st_dword>
c000656a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000656e:	89 f1                	mov    ecx,esi
c0006570:	8d 50 54             	lea    edx,[eax+0x54]
c0006573:	e8 85 e6 ff ff       	call   c0004bfd <st_clust.isra.1>
c0006578:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000657c:	b9 20 00 00 00       	mov    ecx,0x20
c0006581:	8d 50 54             	lea    edx,[eax+0x54]
c0006584:	83 c0 74             	add    eax,0x74
c0006587:	e8 4c b5 ff ff       	call   c0001ad8 <mem_cpy>
c000658c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006590:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0006594:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c0006598:	8d 50 74             	lea    edx,[eax+0x74]
c000659b:	e8 5d e6 ff ff       	call   c0004bfd <st_clust.isra.1>
c00065a0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065a4:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00065a8:	8d 44 24 34          	lea    eax,[esp+0x34]
c00065ac:	e8 2f db ff ff       	call   c00040e0 <dir_register>
c00065b1:	89 c3                	mov    ebx,eax
c00065b3:	85 c0                	test   eax,eax
c00065b5:	0f 85 3b ff ff ff    	jne    c00064f6 <f_mkdir+0xa1>
c00065bb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065bf:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00065c2:	75 74                	jne    c0006638 <f_mkdir+0x1e3>
c00065c4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065c7:	ba 00 00 21 50       	mov    edx,0x50210000
c00065cc:	83 c0 0c             	add    eax,0xc
c00065cf:	e8 fb b4 ff ff       	call   c0001acf <st_dword>
c00065d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065d8:	89 f2                	mov    edx,esi
c00065da:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065dd:	83 c0 34             	add    eax,0x34
c00065e0:	e8 ea b4 ff ff       	call   c0001acf <st_dword>
c00065e5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065e9:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00065ed:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065f0:	c1 e2 09             	shl    edx,0x9
c00065f3:	83 c0 38             	add    eax,0x38
c00065f6:	e8 d4 b4 ff ff       	call   c0001acf <st_dword>
c00065fb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065ff:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0006603:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006606:	c1 e2 09             	shl    edx,0x9
c0006609:	83 c0 28             	add    eax,0x28
c000660c:	e8 be b4 ff ff       	call   c0001acf <st_dword>
c0006611:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006615:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006618:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c000661c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000661f:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c0006623:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006627:	e8 8b d3 ff ff       	call   c00039b7 <store_xdir>
c000662c:	89 c3                	mov    ebx,eax
c000662e:	85 c0                	test   eax,eax
c0006630:	0f 85 d4 fe ff ff    	jne    c000650a <f_mkdir+0xb5>
c0006636:	eb 30                	jmp    c0006668 <f_mkdir+0x213>
c0006638:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000663c:	ba 00 00 21 50       	mov    edx,0x50210000
c0006641:	83 c0 16             	add    eax,0x16
c0006644:	e8 86 b4 ff ff       	call   c0001acf <st_dword>
c0006649:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000664d:	89 f1                	mov    ecx,esi
c000664f:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0006653:	e8 a5 e5 ff ff       	call   c0004bfd <st_clust.isra.1>
c0006658:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000665c:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006660:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006664:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006668:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000666c:	e8 f1 dc ff ff       	call   c0004362 <sync_fs>
c0006671:	89 c3                	mov    ebx,eax
c0006673:	e9 92 fe ff ff       	jmp    c000650a <f_mkdir+0xb5>
c0006678:	83 ec 80             	sub    esp,0xffffff80
c000667b:	89 d8                	mov    eax,ebx
c000667d:	5b                   	pop    ebx
c000667e:	5e                   	pop    esi
c000667f:	5f                   	pop    edi
c0006680:	c3                   	ret    

c0006681 <f_rename>:
c0006681:	55                   	push   ebp
c0006682:	57                   	push   edi
c0006683:	56                   	push   esi
c0006684:	53                   	push   ebx
c0006685:	81 ec fc 00 00 00    	sub    esp,0xfc
c000668b:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0006692:	e8 a4 b9 ff ff       	call   c000203b <get_ldnumber>
c0006697:	b9 02 00 00 00       	mov    ecx,0x2
c000669c:	8d 54 24 14          	lea    edx,[esp+0x14]
c00066a0:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c00066a7:	e8 3d be ff ff       	call   c00024e9 <mount_volume>
c00066ac:	85 c0                	test   eax,eax
c00066ae:	0f 85 b5 02 00 00    	jne    c0006969 <f_rename+0x2e8>
c00066b4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066b8:	83 ec 0c             	sub    esp,0xc
c00066bb:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00066bf:	68 60 04 00 00       	push   0x460
c00066c4:	e8 c3 1b 00 00       	call   c000828c <ff_memalloc>
c00066c9:	83 c4 10             	add    esp,0x10
c00066cc:	89 c3                	mov    ebx,eax
c00066ce:	b8 11 00 00 00       	mov    eax,0x11
c00066d3:	85 db                	test   ebx,ebx
c00066d5:	0f 84 8e 02 00 00    	je     c0006969 <f_rename+0x2e8>
c00066db:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066df:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00066e5:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00066e8:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00066eb:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00066f2:	8d 44 24 58          	lea    eax,[esp+0x58]
c00066f6:	e8 64 e5 ff ff       	call   c0004c5f <follow_path>
c00066fb:	85 c0                	test   eax,eax
c00066fd:	0f 85 52 02 00 00    	jne    c0006955 <f_rename+0x2d4>
c0006703:	b8 06 00 00 00       	mov    eax,0x6
c0006708:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c0006710:	0f 85 3f 02 00 00    	jne    c0006955 <f_rename+0x2d4>
c0006716:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000671a:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000671d:	0f 85 05 01 00 00    	jne    c0006828 <f_rename+0x1a7>
c0006723:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006726:	b9 40 00 00 00       	mov    ecx,0x40
c000672b:	8d 44 24 18          	lea    eax,[esp+0x18]
c000672f:	e8 a4 b3 ff ff       	call   c0001ad8 <mem_cpy>
c0006734:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006739:	8d 54 24 58          	lea    edx,[esp+0x58]
c000673d:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006744:	e8 8f b3 ff ff       	call   c0001ad8 <mem_cpy>
c0006749:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006750:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006757:	e8 03 e5 ff ff       	call   c0004c5f <follow_path>
c000675c:	85 c0                	test   eax,eax
c000675e:	75 29                	jne    c0006789 <f_rename+0x108>
c0006760:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006764:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c000676b:	74 0a                	je     c0006777 <f_rename+0xf6>
c000676d:	b8 08 00 00 00       	mov    eax,0x8
c0006772:	e9 de 01 00 00       	jmp    c0006955 <f_rename+0x2d4>
c0006777:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c000677e:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006785:	75 e6                	jne    c000676d <f_rename+0xec>
c0006787:	eb 09                	jmp    c0006792 <f_rename+0x111>
c0006789:	83 f8 04             	cmp    eax,0x4
c000678c:	0f 85 c3 01 00 00    	jne    c0006955 <f_rename+0x2d4>
c0006792:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006799:	e8 42 d9 ff ff       	call   c00040e0 <dir_register>
c000679e:	85 c0                	test   eax,eax
c00067a0:	0f 85 af 01 00 00    	jne    c0006955 <f_rename+0x2d4>
c00067a6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067aa:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00067ad:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00067b0:	89 c5                	mov    ebp,eax
c00067b2:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c00067b5:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00067b9:	8d 46 24             	lea    eax,[esi+0x24]
c00067bc:	e8 98 b2 ff ff       	call   c0001a59 <ld_word>
c00067c1:	b9 40 00 00 00       	mov    ecx,0x40
c00067c6:	89 c7                	mov    edi,eax
c00067c8:	8d 54 24 18          	lea    edx,[esp+0x18]
c00067cc:	89 f0                	mov    eax,esi
c00067ce:	e8 05 b3 ff ff       	call   c0001ad8 <mem_cpy>
c00067d3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067d7:	89 e9                	mov    ecx,ebp
c00067d9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067dc:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00067df:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00067e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067e7:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00067ea:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00067ed:	0f b7 d7             	movzx  edx,di
c00067f0:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067f3:	83 c0 24             	add    eax,0x24
c00067f6:	e8 d0 b2 ff ff       	call   c0001acb <st_word>
c00067fb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067ff:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006802:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0006805:	a8 10                	test   al,0x10
c0006807:	75 06                	jne    c000680f <f_rename+0x18e>
c0006809:	83 c8 20             	or     eax,0x20
c000680c:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c000680f:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006816:	e8 9c d1 ff ff       	call   c00039b7 <store_xdir>
c000681b:	85 c0                	test   eax,eax
c000681d:	0f 84 1c 01 00 00    	je     c000693f <f_rename+0x2be>
c0006823:	e9 2d 01 00 00       	jmp    c0006955 <f_rename+0x2d4>
c0006828:	b9 20 00 00 00       	mov    ecx,0x20
c000682d:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006834:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006838:	e8 9b b2 ff ff       	call   c0001ad8 <mem_cpy>
c000683d:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006842:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006846:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000684d:	e8 86 b2 ff ff       	call   c0001ad8 <mem_cpy>
c0006852:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006859:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006860:	e8 fa e3 ff ff       	call   c0004c5f <follow_path>
c0006865:	85 c0                	test   eax,eax
c0006867:	75 27                	jne    c0006890 <f_rename+0x20f>
c0006869:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000686d:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006874:	0f 85 f3 fe ff ff    	jne    c000676d <f_rename+0xec>
c000687a:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006881:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006888:	0f 85 df fe ff ff    	jne    c000676d <f_rename+0xec>
c000688e:	eb 09                	jmp    c0006899 <f_rename+0x218>
c0006890:	83 f8 04             	cmp    eax,0x4
c0006893:	0f 85 bc 00 00 00    	jne    c0006955 <f_rename+0x2d4>
c0006899:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00068a0:	e8 3b d8 ff ff       	call   c00040e0 <dir_register>
c00068a5:	85 c0                	test   eax,eax
c00068a7:	0f 85 a8 00 00 00    	jne    c0006955 <f_rename+0x2d4>
c00068ad:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c00068b4:	b9 13 00 00 00       	mov    ecx,0x13
c00068b9:	8d 46 0d             	lea    eax,[esi+0xd]
c00068bc:	8d 54 24 25          	lea    edx,[esp+0x25]
c00068c0:	e8 13 b2 ff ff       	call   c0001ad8 <mem_cpy>
c00068c5:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00068c9:	a8 10                	test   al,0x10
c00068cb:	75 03                	jne    c00068d0 <f_rename+0x24f>
c00068cd:	83 c8 20             	or     eax,0x20
c00068d0:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00068d3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068d7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00068db:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c00068df:	74 5e                	je     c000693f <f_rename+0x2be>
c00068e1:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c00068e8:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c00068ec:	74 51                	je     c000693f <f_rename+0x2be>
c00068ee:	89 f2                	mov    edx,esi
c00068f0:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00068f4:	8a 07                	mov    al,BYTE PTR [edi]
c00068f6:	e8 d9 e2 ff ff       	call   c0004bd4 <ld_clust.isra.0>
c00068fb:	89 c2                	mov    edx,eax
c00068fd:	89 f8                	mov    eax,edi
c00068ff:	e8 ee b3 ff ff       	call   c0001cf2 <clst2sect>
c0006904:	89 c6                	mov    esi,eax
c0006906:	89 d1                	mov    ecx,edx
c0006908:	b8 02 00 00 00       	mov    eax,0x2
c000690d:	09 f2                	or     edx,esi
c000690f:	74 44                	je     c0006955 <f_rename+0x2d4>
c0006911:	89 f2                	mov    edx,esi
c0006913:	89 f8                	mov    eax,edi
c0006915:	e8 1d b9 ff ff       	call   c0002237 <move_window>
c000691a:	85 c0                	test   eax,eax
c000691c:	75 37                	jne    c0006955 <f_rename+0x2d4>
c000691e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006922:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006926:	75 17                	jne    c000693f <f_rename+0x2be>
c0006928:	8d 50 74             	lea    edx,[eax+0x74]
c000692b:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006932:	e8 c6 e2 ff ff       	call   c0004bfd <st_clust.isra.1>
c0006937:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000693b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000693f:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006943:	e8 f4 d0 ff ff       	call   c0003a3c <dir_remove>
c0006948:	85 c0                	test   eax,eax
c000694a:	75 09                	jne    c0006955 <f_rename+0x2d4>
c000694c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006950:	e8 0d da ff ff       	call   c0004362 <sync_fs>
c0006955:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006959:	83 ec 0c             	sub    esp,0xc
c000695c:	53                   	push   ebx
c000695d:	e8 40 19 00 00       	call   c00082a2 <ff_memfree>
c0006962:	83 c4 10             	add    esp,0x10
c0006965:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006969:	81 c4 fc 00 00 00    	add    esp,0xfc
c000696f:	5b                   	pop    ebx
c0006970:	5e                   	pop    esi
c0006971:	5f                   	pop    edi
c0006972:	5d                   	pop    ebp
c0006973:	c3                   	ret    

c0006974 <f_chmod>:
c0006974:	57                   	push   edi
c0006975:	b9 02 00 00 00       	mov    ecx,0x2
c000697a:	56                   	push   esi
c000697b:	53                   	push   ebx
c000697c:	83 ec 60             	sub    esp,0x60
c000697f:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006983:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006987:	8d 54 24 10          	lea    edx,[esp+0x10]
c000698b:	8d 44 24 70          	lea    eax,[esp+0x70]
c000698f:	e8 55 bb ff ff       	call   c00024e9 <mount_volume>
c0006994:	85 c0                	test   eax,eax
c0006996:	0f 85 af 00 00 00    	jne    c0006a4b <f_chmod+0xd7>
c000699c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069a0:	83 ec 0c             	sub    esp,0xc
c00069a3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00069a7:	68 60 04 00 00       	push   0x460
c00069ac:	e8 db 18 00 00       	call   c000828c <ff_memalloc>
c00069b1:	83 c4 10             	add    esp,0x10
c00069b4:	89 c6                	mov    esi,eax
c00069b6:	b8 11 00 00 00       	mov    eax,0x11
c00069bb:	85 f6                	test   esi,esi
c00069bd:	0f 84 88 00 00 00    	je     c0006a4b <f_chmod+0xd7>
c00069c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069c7:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00069cd:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00069d0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00069d3:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c00069d7:	8d 44 24 14          	lea    eax,[esp+0x14]
c00069db:	e8 7f e2 ff ff       	call   c0004c5f <follow_path>
c00069e0:	85 c0                	test   eax,eax
c00069e2:	75 53                	jne    c0006a37 <f_chmod+0xc3>
c00069e4:	b8 06 00 00 00       	mov    eax,0x6
c00069e9:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c00069ee:	75 47                	jne    c0006a37 <f_chmod+0xc3>
c00069f0:	89 f9                	mov    ecx,edi
c00069f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069f6:	83 e1 27             	and    ecx,0x27
c00069f9:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00069fc:	75 1d                	jne    c0006a1b <f_chmod+0xa7>
c00069fe:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006a01:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006a04:	21 cb                	and    ebx,ecx
c0006a06:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006a09:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006a0c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006a10:	e8 a2 cf ff ff       	call   c00039b7 <store_xdir>
c0006a15:	85 c0                	test   eax,eax
c0006a17:	75 1e                	jne    c0006a37 <f_chmod+0xc3>
c0006a19:	eb 13                	jmp    c0006a2e <f_chmod+0xba>
c0006a1b:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006a1f:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006a22:	21 cb                	and    ebx,ecx
c0006a24:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006a27:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006a2a:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006a2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a32:	e8 2b d9 ff ff       	call   c0004362 <sync_fs>
c0006a37:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006a3b:	83 ec 0c             	sub    esp,0xc
c0006a3e:	56                   	push   esi
c0006a3f:	e8 5e 18 00 00       	call   c00082a2 <ff_memfree>
c0006a44:	83 c4 10             	add    esp,0x10
c0006a47:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006a4b:	83 c4 60             	add    esp,0x60
c0006a4e:	5b                   	pop    ebx
c0006a4f:	5e                   	pop    esi
c0006a50:	5f                   	pop    edi
c0006a51:	c3                   	ret    

c0006a52 <f_utime>:
c0006a52:	56                   	push   esi
c0006a53:	b9 02 00 00 00       	mov    ecx,0x2
c0006a58:	53                   	push   ebx
c0006a59:	83 ec 64             	sub    esp,0x64
c0006a5c:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006a60:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006a64:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006a68:	e8 7c ba ff ff       	call   c00024e9 <mount_volume>
c0006a6d:	85 c0                	test   eax,eax
c0006a6f:	0f 85 b5 00 00 00    	jne    c0006b2a <f_utime+0xd8>
c0006a75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a79:	83 ec 0c             	sub    esp,0xc
c0006a7c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006a80:	68 60 04 00 00       	push   0x460
c0006a85:	e8 02 18 00 00       	call   c000828c <ff_memalloc>
c0006a8a:	83 c4 10             	add    esp,0x10
c0006a8d:	89 c3                	mov    ebx,eax
c0006a8f:	b8 11 00 00 00       	mov    eax,0x11
c0006a94:	85 db                	test   ebx,ebx
c0006a96:	0f 84 8e 00 00 00    	je     c0006b2a <f_utime+0xd8>
c0006a9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006aa0:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006aa6:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006aa9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006aac:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006ab0:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006ab4:	e8 a6 e1 ff ff       	call   c0004c5f <follow_path>
c0006ab9:	85 c0                	test   eax,eax
c0006abb:	75 59                	jne    c0006b16 <f_utime+0xc4>
c0006abd:	b8 06 00 00 00       	mov    eax,0x6
c0006ac2:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006ac7:	75 4d                	jne    c0006b16 <f_utime+0xc4>
c0006ac9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006acd:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006ad1:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006ad5:	c1 e2 10             	shl    edx,0x10
c0006ad8:	09 ca                	or     edx,ecx
c0006ada:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006add:	75 1a                	jne    c0006af9 <f_utime+0xa7>
c0006adf:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006ae2:	83 c0 0c             	add    eax,0xc
c0006ae5:	e8 e5 af ff ff       	call   c0001acf <st_dword>
c0006aea:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006aee:	e8 c4 ce ff ff       	call   c00039b7 <store_xdir>
c0006af3:	85 c0                	test   eax,eax
c0006af5:	75 1f                	jne    c0006b16 <f_utime+0xc4>
c0006af7:	eb 14                	jmp    c0006b0d <f_utime+0xbb>
c0006af9:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006afd:	83 c0 16             	add    eax,0x16
c0006b00:	e8 ca af ff ff       	call   c0001acf <st_dword>
c0006b05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b09:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b11:	e8 4c d8 ff ff       	call   c0004362 <sync_fs>
c0006b16:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b1a:	83 ec 0c             	sub    esp,0xc
c0006b1d:	53                   	push   ebx
c0006b1e:	e8 7f 17 00 00       	call   c00082a2 <ff_memfree>
c0006b23:	83 c4 10             	add    esp,0x10
c0006b26:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b2a:	83 c4 64             	add    esp,0x64
c0006b2d:	5b                   	pop    ebx
c0006b2e:	5e                   	pop    esi
c0006b2f:	c3                   	ret    

c0006b30 <f_getlabel>:
c0006b30:	55                   	push   ebp
c0006b31:	31 c9                	xor    ecx,ecx
c0006b33:	57                   	push   edi
c0006b34:	56                   	push   esi
c0006b35:	53                   	push   ebx
c0006b36:	83 ec 6c             	sub    esp,0x6c
c0006b39:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b3d:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006b44:	e8 a0 b9 ff ff       	call   c00024e9 <mount_volume>
c0006b49:	89 c6                	mov    esi,eax
c0006b4b:	85 c0                	test   eax,eax
c0006b4d:	0f 85 c1 01 00 00    	jne    c0006d14 <f_getlabel+0x1e4>
c0006b53:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006b5b:	0f 84 5f 01 00 00    	je     c0006cc0 <f_getlabel+0x190>
c0006b61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b65:	31 d2                	xor    edx,edx
c0006b67:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006b6b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006b73:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b77:	e8 39 c4 ff ff       	call   c0002fb5 <dir_sdi>
c0006b7c:	85 c0                	test   eax,eax
c0006b7e:	0f 85 2d 01 00 00    	jne    c0006cb1 <f_getlabel+0x181>
c0006b84:	ba 01 00 00 00       	mov    edx,0x1
c0006b89:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b8d:	e8 33 cc ff ff       	call   c00037c5 <dir_read>
c0006b92:	85 c0                	test   eax,eax
c0006b94:	0f 85 17 01 00 00    	jne    c0006cb1 <f_getlabel+0x181>
c0006b9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b9e:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006ba1:	74 09                	je     c0006bac <f_getlabel+0x7c>
c0006ba3:	31 db                	xor    ebx,ebx
c0006ba5:	31 c9                	xor    ecx,ecx
c0006ba7:	e9 c8 00 00 00       	jmp    c0006c74 <f_getlabel+0x144>
c0006bac:	31 ed                	xor    ebp,ebp
c0006bae:	31 db                	xor    ebx,ebx
c0006bb0:	31 ff                	xor    edi,edi
c0006bb2:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006bb6:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006bba:	39 fa                	cmp    edx,edi
c0006bbc:	76 4b                	jbe    c0006c09 <f_getlabel+0xd9>
c0006bbe:	47                   	inc    edi
c0006bbf:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006bc2:	01 d0                	add    eax,edx
c0006bc4:	e8 90 ae ff ff       	call   c0001a59 <ld_word>
c0006bc9:	66 85 ed             	test   bp,bp
c0006bcc:	75 0d                	jne    c0006bdb <f_getlabel+0xab>
c0006bce:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006bd4:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006bd9:	76 28                	jbe    c0006c03 <f_getlabel+0xd3>
c0006bdb:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006be2:	89 e9                	mov    ecx,ebp
c0006be4:	01 da                	add    edx,ebx
c0006be6:	c1 e1 10             	shl    ecx,0x10
c0006be9:	0f b7 c0             	movzx  eax,ax
c0006bec:	09 c8                	or     eax,ecx
c0006bee:	b9 04 00 00 00       	mov    ecx,0x4
c0006bf3:	e8 01 b0 ff ff       	call   c0001bf9 <put_utf>
c0006bf8:	84 c0                	test   al,al
c0006bfa:	74 0b                	je     c0006c07 <f_getlabel+0xd7>
c0006bfc:	0f b6 c0             	movzx  eax,al
c0006bff:	01 c3                	add    ebx,eax
c0006c01:	31 c0                	xor    eax,eax
c0006c03:	89 c5                	mov    ebp,eax
c0006c05:	eb ab                	jmp    c0006bb2 <f_getlabel+0x82>
c0006c07:	31 db                	xor    ebx,ebx
c0006c09:	66 85 ed             	test   bp,bp
c0006c0c:	74 02                	je     c0006c10 <f_getlabel+0xe0>
c0006c0e:	31 db                	xor    ebx,ebx
c0006c10:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006c17:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006c1b:	e9 a0 00 00 00       	jmp    c0006cc0 <f_getlabel+0x190>
c0006c20:	83 ff 0b             	cmp    edi,0xb
c0006c23:	74 11                	je     c0006c36 <f_getlabel+0x106>
c0006c25:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006c2a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c2e:	8d 79 02             	lea    edi,[ecx+0x2]
c0006c31:	c1 e0 08             	shl    eax,0x8
c0006c34:	09 c2                	or     edx,eax
c0006c36:	0f b7 d2             	movzx  edx,dx
c0006c39:	50                   	push   eax
c0006c3a:	50                   	push   eax
c0006c3b:	68 b5 01 00 00       	push   0x1b5
c0006c40:	52                   	push   edx
c0006c41:	e8 03 17 00 00       	call   c0008349 <ff_oem2uni>
c0006c46:	83 c4 10             	add    esp,0x10
c0006c49:	66 85 c0             	test   ax,ax
c0006c4c:	74 46                	je     c0006c94 <f_getlabel+0x164>
c0006c4e:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006c55:	0f b7 c0             	movzx  eax,ax
c0006c58:	01 da                	add    edx,ebx
c0006c5a:	b9 04 00 00 00       	mov    ecx,0x4
c0006c5f:	e8 95 af ff ff       	call   c0001bf9 <put_utf>
c0006c64:	84 c0                	test   al,al
c0006c66:	74 2c                	je     c0006c94 <f_getlabel+0x164>
c0006c68:	0f b6 c0             	movzx  eax,al
c0006c6b:	01 c3                	add    ebx,eax
c0006c6d:	83 ff 0b             	cmp    edi,0xb
c0006c70:	74 24                	je     c0006c96 <f_getlabel+0x166>
c0006c72:	89 f9                	mov    ecx,edi
c0006c74:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006c78:	8d 79 01             	lea    edi,[ecx+0x1]
c0006c7b:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006c80:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006c85:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c89:	e8 9f ae ff ff       	call   c0001b2d <dbc_1st>
c0006c8e:	85 c0                	test   eax,eax
c0006c90:	74 a4                	je     c0006c36 <f_getlabel+0x106>
c0006c92:	eb 8c                	jmp    c0006c20 <f_getlabel+0xf0>
c0006c94:	31 db                	xor    ebx,ebx
c0006c96:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006c9d:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006ca0:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006ca7:	74 17                	je     c0006cc0 <f_getlabel+0x190>
c0006ca9:	4b                   	dec    ebx
c0006caa:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006cad:	74 ee                	je     c0006c9d <f_getlabel+0x16d>
c0006caf:	eb 0f                	jmp    c0006cc0 <f_getlabel+0x190>
c0006cb1:	83 f8 04             	cmp    eax,0x4
c0006cb4:	75 5c                	jne    c0006d12 <f_getlabel+0x1e2>
c0006cb6:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006cbd:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006cc0:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006cc8:	74 4a                	je     c0006d14 <f_getlabel+0x1e4>
c0006cca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cce:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006cd1:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006cd4:	e8 5e b5 ff ff       	call   c0002237 <move_window>
c0006cd9:	89 c6                	mov    esi,eax
c0006cdb:	85 c0                	test   eax,eax
c0006cdd:	75 35                	jne    c0006d14 <f_getlabel+0x1e4>
c0006cdf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006ce3:	b8 43 00 00 00       	mov    eax,0x43
c0006ce8:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006cea:	80 f9 03             	cmp    cl,0x3
c0006ced:	74 0f                	je     c0006cfe <f_getlabel+0x1ce>
c0006cef:	31 c0                	xor    eax,eax
c0006cf1:	80 f9 04             	cmp    cl,0x4
c0006cf4:	0f 94 c0             	sete   al
c0006cf7:	48                   	dec    eax
c0006cf8:	83 e0 c3             	and    eax,0xffffffc3
c0006cfb:	83 c0 64             	add    eax,0x64
c0006cfe:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006d02:	e8 5f ad ff ff       	call   c0001a66 <ld_dword>
c0006d07:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006d0e:	89 07                	mov    DWORD PTR [edi],eax
c0006d10:	eb 02                	jmp    c0006d14 <f_getlabel+0x1e4>
c0006d12:	89 c6                	mov    esi,eax
c0006d14:	83 c4 6c             	add    esp,0x6c
c0006d17:	89 f0                	mov    eax,esi
c0006d19:	5b                   	pop    ebx
c0006d1a:	5e                   	pop    esi
c0006d1b:	5f                   	pop    edi
c0006d1c:	5d                   	pop    ebp
c0006d1d:	c3                   	ret    

c0006d1e <f_setlabel>:
c0006d1e:	56                   	push   esi
c0006d1f:	b9 02 00 00 00       	mov    ecx,0x2
c0006d24:	53                   	push   ebx
c0006d25:	83 ec 74             	sub    esp,0x74
c0006d28:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006d2c:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d33:	e8 b1 b7 ff ff       	call   c00024e9 <mount_volume>
c0006d38:	89 c6                	mov    esi,eax
c0006d3a:	85 c0                	test   eax,eax
c0006d3c:	0f 85 41 02 00 00    	jne    c0006f83 <f_setlabel+0x265>
c0006d42:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006d46:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006d49:	0f 85 8e 00 00 00    	jne    c0006ddd <f_setlabel+0xbf>
c0006d4f:	b9 16 00 00 00       	mov    ecx,0x16
c0006d54:	31 d2                	xor    edx,edx
c0006d56:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006d5a:	31 db                	xor    ebx,ebx
c0006d5c:	e8 8c ad ff ff       	call   c0001aed <mem_set>
c0006d61:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006d68:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006d6b:	0f 86 0a 01 00 00    	jbe    c0006e7b <f_setlabel+0x15d>
c0006d71:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d78:	e8 b6 ad ff ff       	call   c0001b33 <tchar2uni>
c0006d7d:	89 c6                	mov    esi,eax
c0006d7f:	3d ff ff 00 00       	cmp    eax,0xffff
c0006d84:	76 2a                	jbe    c0006db0 <f_setlabel+0x92>
c0006d86:	83 f8 ff             	cmp    eax,0xffffffff
c0006d89:	74 05                	je     c0006d90 <f_setlabel+0x72>
c0006d8b:	83 fb 09             	cmp    ebx,0x9
c0006d8e:	76 0a                	jbe    c0006d9a <f_setlabel+0x7c>
c0006d90:	be 06 00 00 00       	mov    esi,0x6
c0006d95:	e9 e9 01 00 00       	jmp    c0006f83 <f_setlabel+0x265>
c0006d9a:	89 c2                	mov    edx,eax
c0006d9c:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006da0:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006da3:	c1 ea 10             	shr    edx,0x10
c0006da6:	01 c8                	add    eax,ecx
c0006da8:	43                   	inc    ebx
c0006da9:	e8 1d ad ff ff       	call   c0001acb <st_word>
c0006dae:	eb 04                	jmp    c0006db4 <f_setlabel+0x96>
c0006db0:	85 c0                	test   eax,eax
c0006db2:	74 dc                	je     c0006d90 <f_setlabel+0x72>
c0006db4:	89 f2                	mov    edx,esi
c0006db6:	b8 57 01 02 c0       	mov    eax,0xc0020157
c0006dbb:	e8 5b ad ff ff       	call   c0001b1b <chk_chr>
c0006dc0:	85 c0                	test   eax,eax
c0006dc2:	75 cc                	jne    c0006d90 <f_setlabel+0x72>
c0006dc4:	83 fb 0a             	cmp    ebx,0xa
c0006dc7:	77 c7                	ja     c0006d90 <f_setlabel+0x72>
c0006dc9:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006dcc:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006dd0:	0f b7 d6             	movzx  edx,si
c0006dd3:	01 c8                	add    eax,ecx
c0006dd5:	43                   	inc    ebx
c0006dd6:	e8 f0 ac ff ff       	call   c0001acb <st_word>
c0006ddb:	eb 84                	jmp    c0006d61 <f_setlabel+0x43>
c0006ddd:	b9 0b 00 00 00       	mov    ecx,0xb
c0006de2:	ba 20 00 00 00       	mov    edx,0x20
c0006de7:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006deb:	31 db                	xor    ebx,ebx
c0006ded:	e8 fb ac ff ff       	call   c0001aed <mem_set>
c0006df2:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006df9:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006dfc:	76 60                	jbe    c0006e5e <f_setlabel+0x140>
c0006dfe:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006e05:	e8 29 ad ff ff       	call   c0001b33 <tchar2uni>
c0006e0a:	3d ff ff 00 00       	cmp    eax,0xffff
c0006e0f:	0f 87 7b ff ff ff    	ja     c0006d90 <f_setlabel+0x72>
c0006e15:	83 ec 0c             	sub    esp,0xc
c0006e18:	50                   	push   eax
c0006e19:	e8 97 15 00 00       	call   c00083b5 <ff_wtoupper>
c0006e1e:	5a                   	pop    edx
c0006e1f:	59                   	pop    ecx
c0006e20:	68 b5 01 00 00       	push   0x1b5
c0006e25:	50                   	push   eax
c0006e26:	e8 8e 14 00 00       	call   c00082b9 <ff_uni2oem>
c0006e2b:	83 c4 10             	add    esp,0x10
c0006e2e:	89 c6                	mov    esi,eax
c0006e30:	66 85 c0             	test   ax,ax
c0006e33:	0f 84 57 ff ff ff    	je     c0006d90 <f_setlabel+0x72>
c0006e39:	0f b7 d0             	movzx  edx,ax
c0006e3c:	b8 50 01 02 c0       	mov    eax,0xc0020150
c0006e41:	e8 d5 ac ff ff       	call   c0001b1b <chk_chr>
c0006e46:	85 c0                	test   eax,eax
c0006e48:	0f 85 42 ff ff ff    	jne    c0006d90 <f_setlabel+0x72>
c0006e4e:	66 81 fe ff 00       	cmp    si,0xff
c0006e53:	0f 87 14 01 00 00    	ja     c0006f6d <f_setlabel+0x24f>
c0006e59:	e9 fa 00 00 00       	jmp    c0006f58 <f_setlabel+0x23a>
c0006e5e:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0006e63:	0f 84 27 ff ff ff    	je     c0006d90 <f_setlabel+0x72>
c0006e69:	85 db                	test   ebx,ebx
c0006e6b:	74 0e                	je     c0006e7b <f_setlabel+0x15d>
c0006e6d:	8d 43 ff             	lea    eax,[ebx-0x1]
c0006e70:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0006e75:	75 04                	jne    c0006e7b <f_setlabel+0x15d>
c0006e77:	89 c3                	mov    ebx,eax
c0006e79:	eb ee                	jmp    c0006e69 <f_setlabel+0x14b>
c0006e7b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e7f:	31 d2                	xor    edx,edx
c0006e81:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0006e85:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0006e8d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006e91:	e8 1f c1 ff ff       	call   c0002fb5 <dir_sdi>
c0006e96:	89 c6                	mov    esi,eax
c0006e98:	85 c0                	test   eax,eax
c0006e9a:	0f 85 e3 00 00 00    	jne    c0006f83 <f_setlabel+0x265>
c0006ea0:	ba 01 00 00 00       	mov    edx,0x1
c0006ea5:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006ea9:	e8 17 c9 ff ff       	call   c00037c5 <dir_read>
c0006eae:	85 c0                	test   eax,eax
c0006eb0:	75 21                	jne    c0006ed3 <f_setlabel+0x1b5>
c0006eb2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006eb6:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006eba:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c0006ebd:	74 5d                	je     c0006f1c <f_setlabel+0x1fe>
c0006ebf:	85 db                	test   ebx,ebx
c0006ec1:	74 0b                	je     c0006ece <f_setlabel+0x1b0>
c0006ec3:	b9 0b 00 00 00       	mov    ecx,0xb
c0006ec8:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006ecc:	eb 70                	jmp    c0006f3e <f_setlabel+0x220>
c0006ece:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0006ed1:	eb 70                	jmp    c0006f43 <f_setlabel+0x225>
c0006ed3:	83 f8 04             	cmp    eax,0x4
c0006ed6:	75 7c                	jne    c0006f54 <f_setlabel+0x236>
c0006ed8:	85 db                	test   ebx,ebx
c0006eda:	0f 84 a3 00 00 00    	je     c0006f83 <f_setlabel+0x265>
c0006ee0:	ba 01 00 00 00       	mov    edx,0x1
c0006ee5:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006ee9:	e8 51 ca ff ff       	call   c000393f <dir_alloc>
c0006eee:	89 c6                	mov    esi,eax
c0006ef0:	85 c0                	test   eax,eax
c0006ef2:	0f 85 8b 00 00 00    	jne    c0006f83 <f_setlabel+0x265>
c0006ef8:	31 d2                	xor    edx,edx
c0006efa:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006efe:	b9 20 00 00 00       	mov    ecx,0x20
c0006f03:	e8 e5 ab ff ff       	call   c0001aed <mem_set>
c0006f08:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f0c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006f0f:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006f13:	75 18                	jne    c0006f2d <f_setlabel+0x20f>
c0006f15:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0006f18:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006f1c:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0006f1f:	b9 16 00 00 00       	mov    ecx,0x16
c0006f24:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006f28:	83 c0 02             	add    eax,0x2
c0006f2b:	eb 9b                	jmp    c0006ec8 <f_setlabel+0x1aa>
c0006f2d:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0006f31:	b9 0b 00 00 00       	mov    ecx,0xb
c0006f36:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006f3a:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006f3e:	e8 95 ab ff ff       	call   c0001ad8 <mem_cpy>
c0006f43:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f47:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006f4b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f4f:	e8 0e d4 ff ff       	call   c0004362 <sync_fs>
c0006f54:	89 c6                	mov    esi,eax
c0006f56:	eb 2b                	jmp    c0006f83 <f_setlabel+0x265>
c0006f58:	83 fb 0a             	cmp    ebx,0xa
c0006f5b:	0f 87 2f fe ff ff    	ja     c0006d90 <f_setlabel+0x72>
c0006f61:	89 f0                	mov    eax,esi
c0006f63:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006f67:	43                   	inc    ebx
c0006f68:	e9 85 fe ff ff       	jmp    c0006df2 <f_setlabel+0xd4>
c0006f6d:	83 fb 09             	cmp    ebx,0x9
c0006f70:	0f 87 1a fe ff ff    	ja     c0006d90 <f_setlabel+0x72>
c0006f76:	89 f0                	mov    eax,esi
c0006f78:	66 c1 e8 08          	shr    ax,0x8
c0006f7c:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006f80:	43                   	inc    ebx
c0006f81:	eb de                	jmp    c0006f61 <f_setlabel+0x243>
c0006f83:	89 f0                	mov    eax,esi
c0006f85:	83 c4 74             	add    esp,0x74
c0006f88:	5b                   	pop    ebx
c0006f89:	5e                   	pop    esi
c0006f8a:	c3                   	ret    

c0006f8b <f_forward>:
c0006f8b:	55                   	push   ebp
c0006f8c:	57                   	push   edi
c0006f8d:	56                   	push   esi
c0006f8e:	53                   	push   ebx
c0006f8f:	83 ec 2c             	sub    esp,0x2c
c0006f92:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006f96:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0006f9a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0006fa0:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0006fa4:	89 d8                	mov    eax,ebx
c0006fa6:	e8 b1 b1 ff ff       	call   c000215c <validate>
c0006fab:	89 c5                	mov    ebp,eax
c0006fad:	85 c0                	test   eax,eax
c0006faf:	0f 85 aa 01 00 00    	jne    c000715f <f_forward+0x1d4>
c0006fb5:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0006fb9:	85 ed                	test   ebp,ebp
c0006fbb:	0f 85 9e 01 00 00    	jne    c000715f <f_forward+0x1d4>
c0006fc1:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0006fc5:	0f 84 8f 01 00 00    	je     c000715a <f_forward+0x1cf>
c0006fcb:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0006fce:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0006fd1:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0006fd4:	bf 00 00 00 00       	mov    edi,0x0
c0006fd9:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0006fdc:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0006fe0:	89 d1                	mov    ecx,edx
c0006fe2:	19 f9                	sbb    ecx,edi
c0006fe4:	0f 83 cf 00 00 00    	jae    c00070b9 <f_forward+0x12e>
c0006fea:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0006fee:	e9 c6 00 00 00       	jmp    c00070b9 <f_forward+0x12e>
c0006ff3:	50                   	push   eax
c0006ff4:	50                   	push   eax
c0006ff5:	6a 00                	push   0x0
c0006ff7:	6a 00                	push   0x0
c0006ff9:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0006ffd:	83 c4 10             	add    esp,0x10
c0007000:	85 c0                	test   eax,eax
c0007002:	0f 84 57 01 00 00    	je     c000715f <f_forward+0x1d4>
c0007008:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000700b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000700f:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0007012:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c0007016:	89 d7                	mov    edi,edx
c0007018:	8d 4e ff             	lea    ecx,[esi-0x1]
c000701b:	89 c6                	mov    esi,eax
c000701d:	0f ac fe 09          	shrd   esi,edi,0x9
c0007021:	21 ce                	and    esi,ecx
c0007023:	89 c1                	mov    ecx,eax
c0007025:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c000702b:	0f 84 98 00 00 00    	je     c00070c9 <f_forward+0x13e>
c0007031:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007035:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007038:	89 c8                	mov    eax,ecx
c000703a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000703e:	e8 af ac ff ff       	call   c0001cf2 <clst2sect>
c0007043:	89 d7                	mov    edi,edx
c0007045:	09 c7                	or     edi,eax
c0007047:	0f 84 9e 00 00 00    	je     c00070eb <f_forward+0x160>
c000704d:	31 ff                	xor    edi,edi
c000704f:	8d 4b 50             	lea    ecx,[ebx+0x50]
c0007052:	01 c6                	add    esi,eax
c0007054:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007058:	11 d7                	adc    edi,edx
c000705a:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000705d:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007060:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007064:	39 fa                	cmp    edx,edi
c0007066:	0f 85 a2 00 00 00    	jne    c000710e <f_forward+0x183>
c000706c:	39 f0                	cmp    eax,esi
c000706e:	0f 85 9a 00 00 00    	jne    c000710e <f_forward+0x183>
c0007074:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007077:	ba 00 02 00 00       	mov    edx,0x200
c000707c:	25 ff 01 00 00       	and    eax,0x1ff
c0007081:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0007085:	29 c2                	sub    edx,eax
c0007087:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000708a:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000708d:	39 d1                	cmp    ecx,edx
c000708f:	76 02                	jbe    c0007093 <f_forward+0x108>
c0007091:	89 d1                	mov    ecx,edx
c0007093:	8d 73 50             	lea    esi,[ebx+0x50]
c0007096:	52                   	push   edx
c0007097:	01 c6                	add    esi,eax
c0007099:	52                   	push   edx
c000709a:	51                   	push   ecx
c000709b:	56                   	push   esi
c000709c:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00070a0:	83 c4 10             	add    esp,0x10
c00070a3:	85 c0                	test   eax,eax
c00070a5:	74 44                	je     c00070eb <f_forward+0x160>
c00070a7:	31 ff                	xor    edi,edi
c00070a9:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c00070ac:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00070af:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00070b3:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c00070b7:	01 07                	add    DWORD PTR [edi],eax
c00070b9:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00070be:	0f 85 2f ff ff ff    	jne    c0006ff3 <f_forward+0x68>
c00070c4:	e9 96 00 00 00       	jmp    c000715f <f_forward+0x1d4>
c00070c9:	85 f6                	test   esi,esi
c00070cb:	0f 85 60 ff ff ff    	jne    c0007031 <f_forward+0xa6>
c00070d1:	89 d7                	mov    edi,edx
c00070d3:	09 c7                	or     edi,eax
c00070d5:	75 05                	jne    c00070dc <f_forward+0x151>
c00070d7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00070da:	eb 0a                	jmp    c00070e6 <f_forward+0x15b>
c00070dc:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00070df:	89 d8                	mov    eax,ebx
c00070e1:	e8 d9 bc ff ff       	call   c0002dbf <get_fat>
c00070e6:	83 f8 01             	cmp    eax,0x1
c00070e9:	77 0b                	ja     c00070f6 <f_forward+0x16b>
c00070eb:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00070ef:	bd 02 00 00 00       	mov    ebp,0x2
c00070f4:	eb 69                	jmp    c000715f <f_forward+0x1d4>
c00070f6:	83 f8 ff             	cmp    eax,0xffffffff
c00070f9:	75 0b                	jne    c0007106 <f_forward+0x17b>
c00070fb:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00070ff:	bd 01 00 00 00       	mov    ebp,0x1
c0007104:	eb 59                	jmp    c000715f <f_forward+0x1d4>
c0007106:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0007109:	e9 23 ff ff ff       	jmp    c0007031 <f_forward+0xa6>
c000710e:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0007112:	79 20                	jns    c0007134 <f_forward+0x1a9>
c0007114:	83 ec 0c             	sub    esp,0xc
c0007117:	6a 01                	push   0x1
c0007119:	52                   	push   edx
c000711a:	50                   	push   eax
c000711b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000711f:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0007123:	50                   	push   eax
c0007124:	e8 fb a8 ff ff       	call   c0001a24 <disk_write>
c0007129:	83 c4 20             	add    esp,0x20
c000712c:	85 c0                	test   eax,eax
c000712e:	75 cb                	jne    c00070fb <f_forward+0x170>
c0007130:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0007134:	83 ec 0c             	sub    esp,0xc
c0007137:	6a 01                	push   0x1
c0007139:	57                   	push   edi
c000713a:	56                   	push   esi
c000713b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000713f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007143:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0007147:	50                   	push   eax
c0007148:	e8 c1 a8 ff ff       	call   c0001a0e <disk_read>
c000714d:	83 c4 20             	add    esp,0x20
c0007150:	85 c0                	test   eax,eax
c0007152:	0f 84 1c ff ff ff    	je     c0007074 <f_forward+0xe9>
c0007158:	eb a1                	jmp    c00070fb <f_forward+0x170>
c000715a:	bd 07 00 00 00       	mov    ebp,0x7
c000715f:	83 c4 2c             	add    esp,0x2c
c0007162:	89 e8                	mov    eax,ebp
c0007164:	5b                   	pop    ebx
c0007165:	5e                   	pop    esi
c0007166:	5f                   	pop    edi
c0007167:	5d                   	pop    ebp
c0007168:	c3                   	ret    

c0007169 <f_mkfs>:
c0007169:	55                   	push   ebp
c000716a:	57                   	push   edi
c000716b:	56                   	push   esi
c000716c:	53                   	push   ebx
c000716d:	bb 0b 00 00 00       	mov    ebx,0xb
c0007172:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007178:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c000717f:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0007186:	e8 b0 ae ff ff       	call   c000203b <get_ldnumber>
c000718b:	85 c0                	test   eax,eax
c000718d:	0f 88 ec 10 00 00    	js     c000827f <f_mkfs+0x1116>
c0007193:	8b 14 85 20 43 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbce0]
c000719a:	85 d2                	test   edx,edx
c000719c:	74 03                	je     c00071a1 <f_mkfs+0x38>
c000719e:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00071a1:	85 f6                	test   esi,esi
c00071a3:	75 05                	jne    c00071aa <f_mkfs+0x41>
c00071a5:	be 40 01 02 c0       	mov    esi,0xc0020140
c00071aa:	83 ec 0c             	sub    esp,0xc
c00071ad:	0f b6 c0             	movzx  eax,al
c00071b0:	bb 03 00 00 00       	mov    ebx,0x3
c00071b5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00071b9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00071bd:	e8 49 a8 ff ff       	call   c0001a0b <disk_initialize>
c00071c2:	83 c4 10             	add    esp,0x10
c00071c5:	a8 01                	test   al,0x1
c00071c7:	0f 85 b2 10 00 00    	jne    c000827f <f_mkfs+0x1116>
c00071cd:	bb 0a 00 00 00       	mov    ebx,0xa
c00071d2:	a8 04                	test   al,0x4
c00071d4:	0f 85 a5 10 00 00    	jne    c000827f <f_mkfs+0x1116>
c00071da:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00071dd:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00071e1:	85 c0                	test   eax,eax
c00071e3:	75 20                	jne    c0007205 <f_mkfs+0x9c>
c00071e5:	51                   	push   ecx
c00071e6:	8d 44 24 78          	lea    eax,[esp+0x78]
c00071ea:	50                   	push   eax
c00071eb:	6a 03                	push   0x3
c00071ed:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00071f1:	e8 44 a8 ff ff       	call   c0001a3a <disk_ioctl>
c00071f6:	83 c4 10             	add    esp,0x10
c00071f9:	85 c0                	test   eax,eax
c00071fb:	74 08                	je     c0007205 <f_mkfs+0x9c>
c00071fd:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007205:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007209:	8d 42 ff             	lea    eax,[edx-0x1]
c000720c:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007211:	77 04                	ja     c0007217 <f_mkfs+0xae>
c0007213:	85 c2                	test   edx,eax
c0007215:	74 08                	je     c000721f <f_mkfs+0xb6>
c0007217:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c000721f:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c0007222:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c0007226:	48                   	dec    eax
c0007227:	3c 01                	cmp    al,0x1
c0007229:	76 05                	jbe    c0007230 <f_mkfs+0xc7>
c000722b:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007230:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0007233:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007237:	48                   	dec    eax
c0007238:	3d ff 7f 00 00       	cmp    eax,0x7fff
c000723d:	77 07                	ja     c0007246 <f_mkfs+0xdd>
c000723f:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c0007244:	74 08                	je     c000724e <f_mkfs+0xe5>
c0007246:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c000724e:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007251:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c0007257:	77 07                	ja     c0007260 <f_mkfs+0xf7>
c0007259:	8d 43 ff             	lea    eax,[ebx-0x1]
c000725c:	85 d8                	test   eax,ebx
c000725e:	74 02                	je     c0007262 <f_mkfs+0xf9>
c0007260:	31 db                	xor    ebx,ebx
c0007262:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c000726d:	77 0a                	ja     c0007279 <f_mkfs+0x110>
c000726f:	bb 11 00 00 00       	mov    ebx,0x11
c0007274:	e9 06 10 00 00       	jmp    c000827f <f_mkfs+0x1116>
c0007279:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c0007280:	8b 36                	mov    esi,DWORD PTR [esi]
c0007282:	85 ed                	test   ebp,ebp
c0007284:	75 1e                	jne    c00072a4 <f_mkfs+0x13b>
c0007286:	83 ec 0c             	sub    esp,0xc
c0007289:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c0007290:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007295:	50                   	push   eax
c0007296:	e8 f1 0f 00 00       	call   c000828c <ff_memalloc>
c000729b:	83 c4 10             	add    esp,0x10
c000729e:	89 c5                	mov    ebp,eax
c00072a0:	85 c0                	test   eax,eax
c00072a2:	74 cb                	je     c000726f <f_mkfs+0x106>
c00072a4:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c00072ac:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00072b4:	52                   	push   edx
c00072b5:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00072b9:	50                   	push   eax
c00072ba:	6a 01                	push   0x1
c00072bc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00072c0:	e8 75 a7 ff ff       	call   c0001a3a <disk_ioctl>
c00072c5:	83 c4 10             	add    esp,0x10
c00072c8:	85 c0                	test   eax,eax
c00072ca:	0f 85 4a 0f 00 00    	jne    c000821a <f_mkfs+0x10b1>
c00072d0:	89 f1                	mov    ecx,esi
c00072d2:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00072da:	83 e1 0f             	and    ecx,0xf
c00072dd:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00072e5:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00072e9:	83 e6 08             	and    esi,0x8
c00072ec:	75 56                	jne    c0007344 <f_mkfs+0x1db>
c00072ee:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c00072f2:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00072f6:	83 ff 00             	cmp    edi,0x0
c00072f9:	76 20                	jbe    c000731b <f_mkfs+0x1b2>
c00072fb:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c0007300:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c0007308:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c000730e:	83 d7 ff             	adc    edi,0xffffffff
c0007311:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007315:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007319:	eb 21                	jmp    c000733c <f_mkfs+0x1d3>
c000731b:	ba 3f 00 00 00       	mov    edx,0x3f
c0007320:	39 f2                	cmp    edx,esi
c0007322:	19 f8                	sbb    eax,edi
c0007324:	73 1e                	jae    c0007344 <f_mkfs+0x1db>
c0007326:	83 c6 c1             	add    esi,0xffffffc1
c0007329:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007331:	83 d7 ff             	adc    edi,0xffffffff
c0007334:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007338:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c000733c:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007344:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007348:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c000734c:	89 04 24             	mov    DWORD PTR [esp],eax
c000734f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007353:	31 c0                	xor    eax,eax
c0007355:	ba 7f 00 00 00       	mov    edx,0x7f
c000735a:	89 c7                	mov    edi,eax
c000735c:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000735f:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007363:	0f 83 c5 0a 00 00    	jae    c0007e2e <f_mkfs+0xcc5>
c0007369:	89 df                	mov    edi,ebx
c000736b:	c1 ef 09             	shr    edi,0x9
c000736e:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007372:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c0007379:	c1 ef 09             	shr    edi,0x9
c000737c:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c0007381:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0007385:	74 29                	je     c00073b0 <f_mkfs+0x247>
c0007387:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c000738d:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c0007392:	0f 97 c2             	seta   dl
c0007395:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c0007398:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000739c:	0f 92 c0             	setb   al
c000739f:	08 c2                	or     dl,al
c00073a1:	75 5b                	jne    c00073fe <f_mkfs+0x295>
c00073a3:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00073a7:	83 e0 07             	and    eax,0x7
c00073aa:	3c 04                	cmp    al,0x4
c00073ac:	74 50                	je     c00073fe <f_mkfs+0x295>
c00073ae:	eb 1b                	jmp    c00073cb <f_mkfs+0x262>
c00073b0:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00073b5:	0f 87 73 0a 00 00    	ja     c0007e2e <f_mkfs+0xcc5>
c00073bb:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00073c1:	76 08                	jbe    c00073cb <f_mkfs+0x262>
c00073c3:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c00073cb:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00073cf:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c00073d3:	83 e0 01             	and    eax,0x1
c00073d6:	80 e1 02             	and    cl,0x2
c00073d9:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c00073dd:	74 0d                	je     c00073ec <f_mkfs+0x283>
c00073df:	84 c0                	test   al,al
c00073e1:	0f 84 53 09 00 00    	je     c0007d3a <f_mkfs+0xbd1>
c00073e7:	e9 12 08 00 00       	jmp    c0007bfe <f_mkfs+0xa95>
c00073ec:	bb 13 00 00 00       	mov    ebx,0x13
c00073f1:	84 c0                	test   al,al
c00073f3:	0f 85 05 08 00 00    	jne    c0007bfe <f_mkfs+0xa95>
c00073f9:	e9 39 0e 00 00       	jmp    c0008237 <f_mkfs+0x10ce>
c00073fe:	31 c0                	xor    eax,eax
c0007400:	ba ff 0f 00 00       	mov    edx,0xfff
c0007405:	89 c7                	mov    edi,eax
c0007407:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000740a:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c000740e:	0f 83 1a 0a 00 00    	jae    c0007e2e <f_mkfs+0xcc5>
c0007414:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c000741a:	77 39                	ja     c0007455 <f_mkfs+0x2ec>
c000741c:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007421:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0007429:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000742c:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007430:	73 08                	jae    c000743a <f_mkfs+0x2d1>
c0007432:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c000743a:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c000743f:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0007442:	b8 00 00 00 00       	mov    eax,0x0
c0007447:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000744b:	73 08                	jae    c0007455 <f_mkfs+0x2ec>
c000744d:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c0007455:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007459:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000745d:	83 c0 20             	add    eax,0x20
c0007460:	83 d2 00             	adc    edx,0x0
c0007463:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007467:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000746b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000746f:	31 d2                	xor    edx,edx
c0007471:	31 ff                	xor    edi,edi
c0007473:	52                   	push   edx
c0007474:	89 fb                	mov    ebx,edi
c0007476:	50                   	push   eax
c0007477:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000747b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000747f:	e8 48 7d 01 00       	call   c001f1cc <__udivdi3>
c0007484:	83 c4 10             	add    esp,0x10
c0007487:	c1 e0 02             	shl    eax,0x2
c000748a:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c000748e:	05 07 02 00 00       	add    eax,0x207
c0007493:	89 f1                	mov    ecx,esi
c0007495:	c1 e8 09             	shr    eax,0x9
c0007498:	83 c1 ff             	add    ecx,0xffffffff
c000749b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000749f:	83 d3 ff             	adc    ebx,0xffffffff
c00074a2:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00074a6:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c00074aa:	31 d2                	xor    edx,edx
c00074ac:	01 c8                	add    eax,ecx
c00074ae:	11 da                	adc    edx,ebx
c00074b0:	89 c1                	mov    ecx,eax
c00074b2:	f7 de                	neg    esi
c00074b4:	89 d0                	mov    eax,edx
c00074b6:	83 d7 00             	adc    edi,0x0
c00074b9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00074bd:	f7 df                	neg    edi
c00074bf:	21 f1                	and    ecx,esi
c00074c1:	21 f8                	and    eax,edi
c00074c3:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00074c7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00074cb:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00074cf:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00074d3:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c00074d7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00074da:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c00074de:	0f ac d0 01          	shrd   eax,edx,0x1
c00074e2:	89 df                	mov    edi,ebx
c00074e4:	d1 ea                	shr    edx,1
c00074e6:	39 c1                	cmp    ecx,eax
c00074e8:	19 d7                	sbb    edi,edx
c00074ea:	0f 83 3e 09 00 00    	jae    c0007e2e <f_mkfs+0xcc5>
c00074f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00074f4:	31 d2                	xor    edx,edx
c00074f6:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c00074fa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00074fe:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c0007502:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007505:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c0007509:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c000750d:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007511:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007515:	83 f8 0f             	cmp    eax,0xf
c0007518:	0f 86 10 09 00 00    	jbe    c0007e2e <f_mkfs+0xcc5>
c000751e:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c0007526:	0f 87 02 09 00 00    	ja     c0007e2e <f_mkfs+0xcc5>
c000752c:	31 d2                	xor    edx,edx
c000752e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007532:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000753a:	83 c0 07             	add    eax,0x7
c000753d:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0007545:	c1 e8 03             	shr    eax,0x3
c0007548:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000754f:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0007553:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007557:	c1 e0 09             	shl    eax,0x9
c000755a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000755e:	48                   	dec    eax
c000755f:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007563:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0007567:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c000756b:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c000756f:	31 d2                	xor    edx,edx
c0007571:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007575:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c000757c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007580:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0007585:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0007589:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000758d:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007591:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0007595:	31 ff                	xor    edi,edi
c0007597:	31 f6                	xor    esi,esi
c0007599:	31 db                	xor    ebx,ebx
c000759b:	85 ff                	test   edi,edi
c000759d:	74 05                	je     c00075a4 <f_mkfs+0x43b>
c000759f:	4f                   	dec    edi
c00075a0:	74 44                	je     c00075e6 <f_mkfs+0x47d>
c00075a2:	eb 4f                	jmp    c00075f3 <f_mkfs+0x48a>
c00075a4:	83 ec 0c             	sub    esp,0xc
c00075a7:	0f b7 c3             	movzx  eax,bx
c00075aa:	50                   	push   eax
c00075ab:	e8 05 0e 00 00       	call   c00083b5 <ff_wtoupper>
c00075b0:	83 c4 10             	add    esp,0x10
c00075b3:	89 c1                	mov    ecx,eax
c00075b5:	8d 53 01             	lea    edx,[ebx+0x1]
c00075b8:	66 39 c3             	cmp    bx,ax
c00075bb:	75 3e                	jne    c00075fb <f_mkfs+0x492>
c00075bd:	be 01 00 00 00       	mov    esi,0x1
c00075c2:	89 df                	mov    edi,ebx
c00075c4:	66 01 f7             	add    di,si
c00075c7:	75 07                	jne    c00075d0 <f_mkfs+0x467>
c00075c9:	83 fe 7f             	cmp    esi,0x7f
c00075cc:	77 31                	ja     c00075ff <f_mkfs+0x496>
c00075ce:	eb 16                	jmp    c00075e6 <f_mkfs+0x47d>
c00075d0:	83 ec 0c             	sub    esp,0xc
c00075d3:	0f b7 ff             	movzx  edi,di
c00075d6:	57                   	push   edi
c00075d7:	e8 d9 0d 00 00       	call   c00083b5 <ff_wtoupper>
c00075dc:	83 c4 10             	add    esp,0x10
c00075df:	39 c7                	cmp    edi,eax
c00075e1:	75 e6                	jne    c00075c9 <f_mkfs+0x460>
c00075e3:	46                   	inc    esi
c00075e4:	eb dc                	jmp    c00075c2 <f_mkfs+0x459>
c00075e6:	31 c0                	xor    eax,eax
c00075e8:	89 d9                	mov    ecx,ebx
c00075ea:	4e                   	dec    esi
c00075eb:	0f 95 c0             	setne  al
c00075ee:	43                   	inc    ebx
c00075ef:	89 c7                	mov    edi,eax
c00075f1:	eb 14                	jmp    c0007607 <f_mkfs+0x49e>
c00075f3:	89 f1                	mov    ecx,esi
c00075f5:	01 f3                	add    ebx,esi
c00075f7:	31 ff                	xor    edi,edi
c00075f9:	eb 0c                	jmp    c0007607 <f_mkfs+0x49e>
c00075fb:	89 d3                	mov    ebx,edx
c00075fd:	eb 08                	jmp    c0007607 <f_mkfs+0x49e>
c00075ff:	bf 02 00 00 00       	mov    edi,0x2
c0007604:	83 c9 ff             	or     ecx,0xffffffff
c0007607:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c000760b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000760e:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c0007612:	0f b6 c1             	movzx  eax,cl
c0007615:	e8 3a a9 ff ff       	call   c0001f54 <xsum32>
c000761a:	66 c1 e9 08          	shr    cx,0x8
c000761e:	89 c2                	mov    edx,eax
c0007620:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007623:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c0007627:	0f b7 c1             	movzx  eax,cx
c000762a:	e8 25 a9 ff ff       	call   c0001f54 <xsum32>
c000762f:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c0007634:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007638:	66 85 db             	test   bx,bx
c000763b:	74 1f                	je     c000765c <f_mkfs+0x4f3>
c000763d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007640:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c0007647:	83 c0 02             	add    eax,0x2
c000764a:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007650:	39 c2                	cmp    edx,eax
c0007652:	74 08                	je     c000765c <f_mkfs+0x4f3>
c0007654:	89 04 24             	mov    DWORD PTR [esp],eax
c0007657:	e9 3f ff ff ff       	jmp    c000759b <f_mkfs+0x432>
c000765c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000765f:	83 ec 0c             	sub    esp,0xc
c0007662:	05 01 02 00 00       	add    eax,0x201
c0007667:	c1 e8 09             	shr    eax,0x9
c000766a:	50                   	push   eax
c000766b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000766f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007673:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007677:	55                   	push   ebp
c0007678:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000767c:	e8 a3 a3 ff ff       	call   c0001a24 <disk_write>
c0007681:	83 c4 20             	add    esp,0x20
c0007684:	85 c0                	test   eax,eax
c0007686:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007689:	0f 85 8b 0b 00 00    	jne    c000821a <f_mkfs+0x10b1>
c000768f:	89 d0                	mov    eax,edx
c0007691:	31 d2                	xor    edx,edx
c0007693:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c0007697:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c000769b:	66 85 db             	test   bx,bx
c000769e:	74 04                	je     c00076a4 <f_mkfs+0x53b>
c00076a0:	31 c0                	xor    eax,eax
c00076a2:	eb b0                	jmp    c0007654 <f_mkfs+0x4eb>
c00076a4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00076a8:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c00076ac:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c00076b0:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c00076b6:	31 d2                	xor    edx,edx
c00076b8:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c00076c3:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00076c7:	c1 eb 09             	shr    ebx,0x9
c00076ca:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c00076d1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00076d5:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00076d9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00076dd:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00076e1:	8d 70 01             	lea    esi,[eax+0x1]
c00076e4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00076e8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00076ec:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c00076f3:	31 d2                	xor    edx,edx
c00076f5:	25 00 fe ff ff       	and    eax,0xfffffe00
c00076fa:	89 04 24             	mov    DWORD PTR [esp],eax
c00076fd:	89 c1                	mov    ecx,eax
c00076ff:	89 e8                	mov    eax,ebp
c0007701:	e8 e7 a3 ff ff       	call   c0001aed <mem_set>
c0007706:	31 c0                	xor    eax,eax
c0007708:	39 04 24             	cmp    DWORD PTR [esp],eax
c000770b:	76 10                	jbe    c000771d <f_mkfs+0x5b4>
c000770d:	83 fe 07             	cmp    esi,0x7
c0007710:	76 0b                	jbe    c000771d <f_mkfs+0x5b4>
c0007712:	40                   	inc    eax
c0007713:	83 ee 08             	sub    esi,0x8
c0007716:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c000771b:	eb eb                	jmp    c0007708 <f_mkfs+0x59f>
c000771d:	b2 01                	mov    dl,0x1
c000771f:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c0007723:	85 f6                	test   esi,esi
c0007725:	74 0c                	je     c0007733 <f_mkfs+0x5ca>
c0007727:	39 04 24             	cmp    DWORD PTR [esp],eax
c000772a:	76 07                	jbe    c0007733 <f_mkfs+0x5ca>
c000772c:	08 11                	or     BYTE PTR [ecx],dl
c000772e:	4e                   	dec    esi
c000772f:	d1 e2                	shl    edx,1
c0007731:	eb f0                	jmp    c0007723 <f_mkfs+0x5ba>
c0007733:	89 df                	mov    edi,ebx
c0007735:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007739:	76 04                	jbe    c000773f <f_mkfs+0x5d6>
c000773b:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000773f:	83 ec 0c             	sub    esp,0xc
c0007742:	57                   	push   edi
c0007743:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007747:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000774b:	55                   	push   ebp
c000774c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007750:	e8 cf a2 ff ff       	call   c0001a24 <disk_write>
c0007755:	83 c4 20             	add    esp,0x20
c0007758:	85 c0                	test   eax,eax
c000775a:	0f 85 ba 0a 00 00    	jne    c000821a <f_mkfs+0x10b1>
c0007760:	31 d2                	xor    edx,edx
c0007762:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c0007766:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c000776a:	29 fb                	sub    ebx,edi
c000776c:	0f 85 7a ff ff ff    	jne    c00076ec <f_mkfs+0x583>
c0007772:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007776:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000777e:	31 f6                	xor    esi,esi
c0007780:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007784:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007787:	31 d2                	xor    edx,edx
c0007789:	89 e8                	mov    eax,ebp
c000778b:	e8 5d a3 ff ff       	call   c0001aed <mem_set>
c0007790:	31 c9                	xor    ecx,ecx
c0007792:	85 db                	test   ebx,ebx
c0007794:	75 40                	jne    c00077d6 <f_mkfs+0x66d>
c0007796:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c000779b:	89 e8                	mov    eax,ebp
c000779d:	bb 02 00 00 00       	mov    ebx,0x2
c00077a2:	e8 28 a3 ff ff       	call   c0001acf <st_dword>
c00077a7:	8d 45 04             	lea    eax,[ebp+0x4]
c00077aa:	83 ca ff             	or     edx,0xffffffff
c00077ad:	e8 1d a3 ff ff       	call   c0001acf <st_dword>
c00077b2:	b9 08 00 00 00       	mov    ecx,0x8
c00077b7:	eb 1d                	jmp    c00077d6 <f_mkfs+0x66d>
c00077b9:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00077bc:	76 3b                	jbe    c00077f9 <f_mkfs+0x690>
c00077be:	43                   	inc    ebx
c00077bf:	83 fe 01             	cmp    esi,0x1
c00077c2:	89 da                	mov    edx,ebx
c00077c4:	77 03                	ja     c00077c9 <f_mkfs+0x660>
c00077c6:	83 ca ff             	or     edx,0xffffffff
c00077c9:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00077cd:	4e                   	dec    esi
c00077ce:	e8 fc a2 ff ff       	call   c0001acf <st_dword>
c00077d3:	83 c1 04             	add    ecx,0x4
c00077d6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00077da:	85 f6                	test   esi,esi
c00077dc:	75 db                	jne    c00077b9 <f_mkfs+0x650>
c00077de:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c00077e3:	77 14                	ja     c00077f9 <f_mkfs+0x690>
c00077e5:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00077e9:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c00077f0:	85 f6                	test   esi,esi
c00077f2:	74 05                	je     c00077f9 <f_mkfs+0x690>
c00077f4:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00077f7:	77 dd                	ja     c00077d6 <f_mkfs+0x66d>
c00077f9:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00077fd:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007801:	39 cf                	cmp    edi,ecx
c0007803:	76 02                	jbe    c0007807 <f_mkfs+0x69e>
c0007805:	89 cf                	mov    edi,ecx
c0007807:	83 ec 0c             	sub    esp,0xc
c000780a:	57                   	push   edi
c000780b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000780f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007813:	55                   	push   ebp
c0007814:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007818:	e8 07 a2 ff ff       	call   c0001a24 <disk_write>
c000781d:	83 c4 20             	add    esp,0x20
c0007820:	85 c0                	test   eax,eax
c0007822:	0f 85 f2 09 00 00    	jne    c000821a <f_mkfs+0x10b1>
c0007828:	31 d2                	xor    edx,edx
c000782a:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c000782e:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007832:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007836:	0f 85 48 ff ff ff    	jne    c0007784 <f_mkfs+0x61b>
c000783c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000783f:	31 d2                	xor    edx,edx
c0007841:	89 e8                	mov    eax,ebp
c0007843:	31 ff                	xor    edi,edi
c0007845:	e8 a3 a2 ff ff       	call   c0001aed <mem_set>
c000784a:	8d 45 34             	lea    eax,[ebp+0x34]
c000784d:	ba 02 00 00 00       	mov    edx,0x2
c0007852:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007856:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c000785a:	e8 70 a2 ff ff       	call   c0001acf <st_dword>
c000785f:	8d 45 38             	lea    eax,[ebp+0x38]
c0007862:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007866:	e8 64 a2 ff ff       	call   c0001acf <st_dword>
c000786b:	8d 45 44             	lea    eax,[ebp+0x44]
c000786e:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007872:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007876:	e8 54 a2 ff ff       	call   c0001acf <st_dword>
c000787b:	8d 45 54             	lea    eax,[ebp+0x54]
c000787e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007882:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007886:	83 c2 02             	add    edx,0x2
c0007889:	e8 41 a2 ff ff       	call   c0001acf <st_dword>
c000788e:	8d 45 58             	lea    eax,[ebp+0x58]
c0007891:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007895:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007899:	e8 31 a2 ff ff       	call   c0001acf <st_dword>
c000789e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00078a2:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c00078a7:	89 c6                	mov    esi,eax
c00078a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00078ad:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c00078b1:	89 04 24             	mov    DWORD PTR [esp],eax
c00078b4:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c00078b8:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c00078bb:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00078bf:	39 cb                	cmp    ebx,ecx
c00078c1:	76 02                	jbe    c00078c5 <f_mkfs+0x75c>
c00078c3:	89 cb                	mov    ebx,ecx
c00078c5:	83 ec 0c             	sub    esp,0xc
c00078c8:	53                   	push   ebx
c00078c9:	57                   	push   edi
c00078ca:	56                   	push   esi
c00078cb:	55                   	push   ebp
c00078cc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00078d0:	e8 4f a1 ff ff       	call   c0001a24 <disk_write>
c00078d5:	83 c4 20             	add    esp,0x20
c00078d8:	85 c0                	test   eax,eax
c00078da:	0f 85 3a 09 00 00    	jne    c000821a <f_mkfs+0x10b1>
c00078e0:	31 d2                	xor    edx,edx
c00078e2:	b9 00 02 00 00       	mov    ecx,0x200
c00078e7:	89 e8                	mov    eax,ebp
c00078e9:	e8 ff a1 ff ff       	call   c0001aed <mem_set>
c00078ee:	31 d2                	xor    edx,edx
c00078f0:	01 de                	add    esi,ebx
c00078f2:	11 d7                	adc    edi,edx
c00078f4:	29 1c 24             	sub    DWORD PTR [esp],ebx
c00078f7:	75 bf                	jne    c00078b8 <f_mkfs+0x74f>
c00078f9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00078fd:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007901:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007909:	b9 00 02 00 00       	mov    ecx,0x200
c000790e:	31 d2                	xor    edx,edx
c0007910:	89 e8                	mov    eax,ebp
c0007912:	e8 d6 a1 ff ff       	call   c0001aed <mem_set>
c0007917:	b9 0b 00 00 00       	mov    ecx,0xb
c000791c:	ba 20 02 02 c0       	mov    edx,0xc0020220
c0007921:	89 e8                	mov    eax,ebp
c0007923:	e8 b0 a1 ff ff       	call   c0001ad8 <mem_cpy>
c0007928:	8d 45 40             	lea    eax,[ebp+0x40]
c000792b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000792f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007933:	e8 9a a1 ff ff       	call   c0001ad2 <st_qword>
c0007938:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000793c:	8d 45 48             	lea    eax,[ebp+0x48]
c000793f:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007943:	e8 8a a1 ff ff       	call   c0001ad2 <st_qword>
c0007948:	8d 45 50             	lea    eax,[ebp+0x50]
c000794b:	ba 20 00 00 00       	mov    edx,0x20
c0007950:	e8 7a a1 ff ff       	call   c0001acf <st_dword>
c0007955:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007959:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000795d:	e8 6d a1 ff ff       	call   c0001acf <st_dword>
c0007962:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007966:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000796a:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c000796e:	e8 5c a1 ff ff       	call   c0001acf <st_dword>
c0007973:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007976:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000797a:	e8 50 a1 ff ff       	call   c0001acf <st_dword>
c000797f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007983:	8d 50 02             	lea    edx,[eax+0x2]
c0007986:	8d 45 60             	lea    eax,[ebp+0x60]
c0007989:	e8 41 a1 ff ff       	call   c0001acf <st_dword>
c000798e:	8d 45 64             	lea    eax,[ebp+0x64]
c0007991:	ba 00 00 21 50       	mov    edx,0x50210000
c0007996:	e8 34 a1 ff ff       	call   c0001acf <st_dword>
c000799b:	8d 45 68             	lea    eax,[ebp+0x68]
c000799e:	ba 00 01 00 00       	mov    edx,0x100
c00079a3:	e8 23 a1 ff ff       	call   c0001acb <st_word>
c00079a8:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c00079ac:	b8 0a 00 00 00       	mov    eax,0xa
c00079b1:	48                   	dec    eax
c00079b2:	74 05                	je     c00079b9 <f_mkfs+0x850>
c00079b4:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c00079b7:	eb f8                	jmp    c00079b1 <f_mkfs+0x848>
c00079b9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00079bd:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c00079c1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00079c5:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c00079c9:	74 05                	je     c00079d0 <f_mkfs+0x867>
c00079cb:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c00079ce:	eb f5                	jmp    c00079c5 <f_mkfs+0x85c>
c00079d0:	8d 45 78             	lea    eax,[ebp+0x78]
c00079d3:	ba eb fe 00 00       	mov    edx,0xfeeb
c00079d8:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c00079de:	31 db                	xor    ebx,ebx
c00079e0:	e8 e6 a0 ff ff       	call   c0001acb <st_word>
c00079e5:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c00079eb:	ba 55 aa 00 00       	mov    edx,0xaa55
c00079f0:	89 04 24             	mov    DWORD PTR [esp],eax
c00079f3:	e8 d3 a0 ff ff       	call   c0001acb <st_word>
c00079f8:	31 c9                	xor    ecx,ecx
c00079fa:	8d 41 96             	lea    eax,[ecx-0x6a]
c00079fd:	83 f8 01             	cmp    eax,0x1
c0007a00:	76 13                	jbe    c0007a15 <f_mkfs+0x8ac>
c0007a02:	83 f9 70             	cmp    ecx,0x70
c0007a05:	74 0e                	je     c0007a15 <f_mkfs+0x8ac>
c0007a07:	89 da                	mov    edx,ebx
c0007a09:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007a0e:	e8 41 a5 ff ff       	call   c0001f54 <xsum32>
c0007a13:	89 c3                	mov    ebx,eax
c0007a15:	41                   	inc    ecx
c0007a16:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007a1c:	75 dc                	jne    c00079fa <f_mkfs+0x891>
c0007a1e:	89 f0                	mov    eax,esi
c0007a20:	89 fa                	mov    edx,edi
c0007a22:	83 c0 01             	add    eax,0x1
c0007a25:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007a29:	83 d2 00             	adc    edx,0x0
c0007a2c:	83 ec 0c             	sub    esp,0xc
c0007a2f:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007a33:	6a 01                	push   0x1
c0007a35:	57                   	push   edi
c0007a36:	56                   	push   esi
c0007a37:	55                   	push   ebp
c0007a38:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a3c:	e8 e3 9f ff ff       	call   c0001a24 <disk_write>
c0007a41:	83 c4 20             	add    esp,0x20
c0007a44:	85 c0                	test   eax,eax
c0007a46:	0f 85 ce 07 00 00    	jne    c000821a <f_mkfs+0x10b1>
c0007a4c:	31 d2                	xor    edx,edx
c0007a4e:	b9 00 02 00 00       	mov    ecx,0x200
c0007a53:	89 e8                	mov    eax,ebp
c0007a55:	e8 93 a0 ff ff       	call   c0001aed <mem_set>
c0007a5a:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007a5f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a62:	e8 64 a0 ff ff       	call   c0001acb <st_word>
c0007a67:	89 f0                	mov    eax,esi
c0007a69:	89 fa                	mov    edx,edi
c0007a6b:	83 c0 09             	add    eax,0x9
c0007a6e:	83 d2 00             	adc    edx,0x0
c0007a71:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a74:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007a78:	31 c9                	xor    ecx,ecx
c0007a7a:	41                   	inc    ecx
c0007a7b:	89 da                	mov    edx,ebx
c0007a7d:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007a82:	e8 cd a4 ff ff       	call   c0001f54 <xsum32>
c0007a87:	89 c3                	mov    ebx,eax
c0007a89:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007a8f:	75 e9                	jne    c0007a7a <f_mkfs+0x911>
c0007a91:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007a95:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007a99:	83 c0 01             	add    eax,0x1
c0007a9c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007aa0:	83 d2 00             	adc    edx,0x0
c0007aa3:	83 ec 0c             	sub    esp,0xc
c0007aa6:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007aaa:	6a 01                	push   0x1
c0007aac:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007ab0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007ab4:	55                   	push   ebp
c0007ab5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ab9:	e8 66 9f ff ff       	call   c0001a24 <disk_write>
c0007abe:	83 c4 20             	add    esp,0x20
c0007ac1:	85 c0                	test   eax,eax
c0007ac3:	0f 85 51 07 00 00    	jne    c000821a <f_mkfs+0x10b1>
c0007ac9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007acd:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007ad1:	75 09                	jne    c0007adc <f_mkfs+0x973>
c0007ad3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007ad6:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007ada:	74 12                	je     c0007aee <f_mkfs+0x985>
c0007adc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007ae0:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007ae4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007ae8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007aec:	eb 8a                	jmp    c0007a78 <f_mkfs+0x90f>
c0007aee:	31 d2                	xor    edx,edx
c0007af0:	b9 00 02 00 00       	mov    ecx,0x200
c0007af5:	89 e8                	mov    eax,ebp
c0007af7:	e8 f1 9f ff ff       	call   c0001aed <mem_set>
c0007afc:	83 c6 0b             	add    esi,0xb
c0007aff:	83 d7 00             	adc    edi,0x0
c0007b02:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007b06:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007b0a:	31 c9                	xor    ecx,ecx
c0007b0c:	41                   	inc    ecx
c0007b0d:	89 da                	mov    edx,ebx
c0007b0f:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007b14:	e8 3b a4 ff ff       	call   c0001f54 <xsum32>
c0007b19:	89 c3                	mov    ebx,eax
c0007b1b:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007b21:	75 e9                	jne    c0007b0c <f_mkfs+0x9a3>
c0007b23:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007b26:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007b2a:	83 c6 01             	add    esi,0x1
c0007b2d:	83 d7 00             	adc    edi,0x0
c0007b30:	83 ec 0c             	sub    esp,0xc
c0007b33:	6a 01                	push   0x1
c0007b35:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007b39:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007b3d:	55                   	push   ebp
c0007b3e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007b42:	e8 dd 9e ff ff       	call   c0001a24 <disk_write>
c0007b47:	83 c4 20             	add    esp,0x20
c0007b4a:	85 c0                	test   eax,eax
c0007b4c:	0f 85 c8 06 00 00    	jne    c000821a <f_mkfs+0x10b1>
c0007b52:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007b56:	75 06                	jne    c0007b5e <f_mkfs+0x9f5>
c0007b58:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007b5c:	74 09                	je     c0007b67 <f_mkfs+0x9fe>
c0007b5e:	89 34 24             	mov    DWORD PTR [esp],esi
c0007b61:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007b65:	eb a3                	jmp    c0007b0a <f_mkfs+0x9a1>
c0007b67:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007b6b:	89 da                	mov    edx,ebx
c0007b6d:	01 e8                	add    eax,ebp
c0007b6f:	e8 5b 9f ff ff       	call   c0001acf <st_dword>
c0007b74:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007b79:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007b81:	75 e4                	jne    c0007b67 <f_mkfs+0x9fe>
c0007b83:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007b86:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007b8a:	83 c6 02             	add    esi,0x2
c0007b8d:	83 d7 00             	adc    edi,0x0
c0007b90:	83 ec 0c             	sub    esp,0xc
c0007b93:	6a 01                	push   0x1
c0007b95:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007b99:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007b9d:	55                   	push   ebp
c0007b9e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ba2:	e8 7d 9e ff ff       	call   c0001a24 <disk_write>
c0007ba7:	83 c4 20             	add    esp,0x20
c0007baa:	85 c0                	test   eax,eax
c0007bac:	0f 85 68 06 00 00    	jne    c000821a <f_mkfs+0x10b1>
c0007bb2:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007bb7:	74 0d                	je     c0007bc6 <f_mkfs+0xa5d>
c0007bb9:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007bc1:	e9 43 fd ff ff       	jmp    c0007909 <f_mkfs+0x7a0>
c0007bc6:	b1 07                	mov    cl,0x7
c0007bc8:	e9 e3 05 00 00       	jmp    c00081b0 <f_mkfs+0x1047>
c0007bcd:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007bd2:	0f 85 4f 02 00 00    	jne    c0007e27 <f_mkfs+0xcbe>
c0007bd8:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007bdd:	0f 86 22 02 00 00    	jbe    c0007e05 <f_mkfs+0xc9c>
c0007be3:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007be8:	0f 85 81 06 00 00    	jne    c000826f <f_mkfs+0x1106>
c0007bee:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007bf1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007bf5:	83 f8 40             	cmp    eax,0x40
c0007bf8:	0f 87 51 06 00 00    	ja     c000824f <f_mkfs+0x10e6>
c0007bfe:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007c02:	85 ff                	test   edi,edi
c0007c04:	75 1c                	jne    c0007c22 <f_mkfs+0xab9>
c0007c06:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007c09:	ba 20 01 02 c0       	mov    edx,0xc0020120
c0007c0e:	c1 e9 0c             	shr    ecx,0xc
c0007c11:	bf 01 00 00 00       	mov    edi,0x1
c0007c16:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007c19:	66 85 c0             	test   ax,ax
c0007c1c:	0f 85 95 01 00 00    	jne    c0007db7 <f_mkfs+0xc4e>
c0007c22:	31 d2                	xor    edx,edx
c0007c24:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007c27:	f7 f7                	div    edi
c0007c29:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007c2e:	0f 86 95 01 00 00    	jbe    c0007dc9 <f_mkfs+0xc60>
c0007c34:	83 c0 02             	add    eax,0x2
c0007c37:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007c3c:	01 c0                	add    eax,eax
c0007c3e:	05 ff 01 00 00       	add    eax,0x1ff
c0007c43:	be 01 00 00 00       	mov    esi,0x1
c0007c48:	c1 e8 09             	shr    eax,0x9
c0007c4b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007c4f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007c53:	c1 e0 05             	shl    eax,0x5
c0007c56:	c1 e8 09             	shr    eax,0x9
c0007c59:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007c5d:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007c62:	31 d2                	xor    edx,edx
c0007c64:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007c68:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007c6c:	89 f0                	mov    eax,esi
c0007c6e:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007c72:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007c76:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007c7a:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007c7e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007c82:	31 d2                	xor    edx,edx
c0007c84:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007c89:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007c8d:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007c91:	31 db                	xor    ebx,ebx
c0007c93:	01 c8                	add    eax,ecx
c0007c95:	11 da                	adc    edx,ebx
c0007c97:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007c9b:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007c9f:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007ca3:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007ca7:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007cab:	f7 da                	neg    edx
c0007cad:	21 d1                	and    ecx,edx
c0007caf:	29 d9                	sub    ecx,ebx
c0007cb1:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007cb6:	0f 85 20 01 00 00    	jne    c0007ddc <f_mkfs+0xc73>
c0007cbc:	31 db                	xor    ebx,ebx
c0007cbe:	01 ce                	add    esi,ecx
c0007cc0:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007cc4:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007cc8:	31 d2                	xor    edx,edx
c0007cca:	89 f8                	mov    eax,edi
c0007ccc:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007cd0:	c1 e0 04             	shl    eax,0x4
c0007cd3:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007cd7:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007cdb:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007cdf:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007ce3:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007ce6:	19 d3                	sbb    ebx,edx
c0007ce8:	0f 82 40 01 00 00    	jb     c0007e2e <f_mkfs+0xcc5>
c0007cee:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007cf1:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007cf5:	89 c8                	mov    eax,ecx
c0007cf7:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007cfc:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007d00:	29 f0                	sub    eax,esi
c0007d02:	29 d0                	sub    eax,edx
c0007d04:	31 d2                	xor    edx,edx
c0007d06:	f7 f7                	div    edi
c0007d08:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007d0d:	89 c3                	mov    ebx,eax
c0007d0f:	0f 85 b8 fe ff ff    	jne    c0007bcd <f_mkfs+0xa64>
c0007d15:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007d1a:	0f 87 1d 01 00 00    	ja     c0007e3d <f_mkfs+0xcd4>
c0007d20:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007d25:	0f 85 03 01 00 00    	jne    c0007e2e <f_mkfs+0xcc5>
c0007d2b:	83 ff 01             	cmp    edi,0x1
c0007d2e:	0f 86 fa 00 00 00    	jbe    c0007e2e <f_mkfs+0xcc5>
c0007d34:	d1 ef                	shr    edi,1
c0007d36:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007d3a:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007d3e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007d41:	85 db                	test   ebx,ebx
c0007d43:	75 2d                	jne    c0007d72 <f_mkfs+0xc09>
c0007d45:	89 cb                	mov    ebx,ecx
c0007d47:	ba 30 01 02 c0       	mov    edx,0xc0020130
c0007d4c:	c1 eb 11             	shr    ebx,0x11
c0007d4f:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007d57:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007d5a:	66 85 c0             	test   ax,ax
c0007d5d:	74 11                	je     c0007d70 <f_mkfs+0xc07>
c0007d5f:	83 c2 02             	add    edx,0x2
c0007d62:	39 d8                	cmp    eax,ebx
c0007d64:	77 0a                	ja     c0007d70 <f_mkfs+0xc07>
c0007d66:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007d6a:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007d6e:	eb e7                	jmp    c0007d57 <f_mkfs+0xbee>
c0007d70:	31 db                	xor    ebx,ebx
c0007d72:	31 d2                	xor    edx,edx
c0007d74:	89 c8                	mov    eax,ecx
c0007d76:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007d7a:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007d81:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007d86:	c1 ea 09             	shr    edx,0x9
c0007d89:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007d8e:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007d92:	0f 87 96 00 00 00    	ja     c0007e2e <f_mkfs+0xcc5>
c0007d98:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007d9c:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007da4:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007da8:	be 20 00 00 00       	mov    esi,0x20
c0007dad:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007db2:	e9 a6 fe ff ff       	jmp    c0007c5d <f_mkfs+0xaf4>
c0007db7:	83 c2 02             	add    edx,0x2
c0007dba:	39 c8                	cmp    eax,ecx
c0007dbc:	0f 87 60 fe ff ff    	ja     c0007c22 <f_mkfs+0xab9>
c0007dc2:	01 ff                	add    edi,edi
c0007dc4:	e9 4d fe ff ff       	jmp    c0007c16 <f_mkfs+0xaad>
c0007dc9:	8d 04 40             	lea    eax,[eax+eax*2]
c0007dcc:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007dd1:	40                   	inc    eax
c0007dd2:	d1 e8                	shr    eax,1
c0007dd4:	83 c0 03             	add    eax,0x3
c0007dd7:	e9 62 fe ff ff       	jmp    c0007c3e <f_mkfs+0xad5>
c0007ddc:	31 d2                	xor    edx,edx
c0007dde:	89 c8                	mov    eax,ecx
c0007de0:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007de4:	85 d2                	test   edx,edx
c0007de6:	74 0c                	je     c0007df4 <f_mkfs+0xc8b>
c0007de8:	49                   	dec    ecx
c0007de9:	46                   	inc    esi
c0007dea:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007def:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007df4:	89 c8                	mov    eax,ecx
c0007df6:	31 d2                	xor    edx,edx
c0007df8:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007dfc:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0007e00:	e9 c3 fe ff ff       	jmp    c0007cc8 <f_mkfs+0xb5f>
c0007e05:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007e0a:	77 31                	ja     c0007e3d <f_mkfs+0xcd4>
c0007e0c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007e11:	75 1b                	jne    c0007e2e <f_mkfs+0xcc5>
c0007e13:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007e16:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007e1a:	3d 80 00 00 00       	cmp    eax,0x80
c0007e1f:	0f 86 d9 fd ff ff    	jbe    c0007bfe <f_mkfs+0xa95>
c0007e25:	eb 07                	jmp    c0007e2e <f_mkfs+0xcc5>
c0007e27:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007e2c:	76 0a                	jbe    c0007e38 <f_mkfs+0xccf>
c0007e2e:	bb 0e 00 00 00       	mov    ebx,0xe
c0007e33:	e9 ff 03 00 00       	jmp    c0008237 <f_mkfs+0x10ce>
c0007e38:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007e3d:	31 d2                	xor    edx,edx
c0007e3f:	b9 00 02 00 00       	mov    ecx,0x200
c0007e44:	89 e8                	mov    eax,ebp
c0007e46:	e8 a2 9c ff ff       	call   c0001aed <mem_set>
c0007e4b:	b9 0b 00 00 00       	mov    ecx,0xb
c0007e50:	ba 42 02 02 c0       	mov    edx,0xc0020242
c0007e55:	89 e8                	mov    eax,ebp
c0007e57:	e8 7c 9c ff ff       	call   c0001ad8 <mem_cpy>
c0007e5c:	8d 45 0b             	lea    eax,[ebp+0xb]
c0007e5f:	ba 00 02 00 00       	mov    edx,0x200
c0007e64:	e8 62 9c ff ff       	call   c0001acb <st_word>
c0007e69:	89 f8                	mov    eax,edi
c0007e6b:	0f b7 d6             	movzx  edx,si
c0007e6e:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0007e71:	8d 45 0e             	lea    eax,[ebp+0xe]
c0007e74:	e8 52 9c ff ff       	call   c0001acb <st_word>
c0007e79:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c0007e7d:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e82:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c0007e85:	75 08                	jne    c0007e8f <f_mkfs+0xd26>
c0007e87:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007e8f:	8d 45 11             	lea    eax,[ebp+0x11]
c0007e92:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0007e96:	e8 30 9c ff ff       	call   c0001acb <st_word>
c0007e9b:	b8 ff ff 00 00       	mov    eax,0xffff
c0007ea0:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007ea4:	39 d0                	cmp    eax,edx
c0007ea6:	b8 00 00 00 00       	mov    eax,0x0
c0007eab:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c0007eaf:	72 0a                	jb     c0007ebb <f_mkfs+0xd52>
c0007eb1:	8d 45 13             	lea    eax,[ebp+0x13]
c0007eb4:	e8 12 9c ff ff       	call   c0001acb <st_word>
c0007eb9:	eb 08                	jmp    c0007ec3 <f_mkfs+0xd5a>
c0007ebb:	8d 45 20             	lea    eax,[ebp+0x20]
c0007ebe:	e8 0c 9c ff ff       	call   c0001acf <st_dword>
c0007ec3:	8d 45 18             	lea    eax,[ebp+0x18]
c0007ec6:	ba 3f 00 00 00       	mov    edx,0x3f
c0007ecb:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c0007ecf:	e8 f7 9b ff ff       	call   c0001acb <st_word>
c0007ed4:	8d 45 1a             	lea    eax,[ebp+0x1a]
c0007ed7:	ba ff 00 00 00       	mov    edx,0xff
c0007edc:	e8 ea 9b ff ff       	call   c0001acb <st_word>
c0007ee1:	8d 45 1c             	lea    eax,[ebp+0x1c]
c0007ee4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007ee8:	e8 e2 9b ff ff       	call   c0001acf <st_dword>
c0007eed:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007ef2:	75 57                	jne    c0007f4b <f_mkfs+0xde2>
c0007ef4:	8d 45 43             	lea    eax,[ebp+0x43]
c0007ef7:	ba 00 00 21 50       	mov    edx,0x50210000
c0007efc:	e8 ce 9b ff ff       	call   c0001acf <st_dword>
c0007f01:	8d 45 24             	lea    eax,[ebp+0x24]
c0007f04:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007f08:	e8 c2 9b ff ff       	call   c0001acf <st_dword>
c0007f0d:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0007f10:	ba 02 00 00 00       	mov    edx,0x2
c0007f15:	e8 b5 9b ff ff       	call   c0001acf <st_dword>
c0007f1a:	8d 45 30             	lea    eax,[ebp+0x30]
c0007f1d:	ba 01 00 00 00       	mov    edx,0x1
c0007f22:	e8 a4 9b ff ff       	call   c0001acb <st_word>
c0007f27:	8d 45 32             	lea    eax,[ebp+0x32]
c0007f2a:	ba 06 00 00 00       	mov    edx,0x6
c0007f2f:	e8 97 9b ff ff       	call   c0001acb <st_word>
c0007f34:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0007f38:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0007f3c:	8d 45 47             	lea    eax,[ebp+0x47]
c0007f3f:	b9 13 00 00 00       	mov    ecx,0x13
c0007f44:	ba 4e 02 02 c0       	mov    edx,0xc002024e
c0007f49:	eb 2f                	jmp    c0007f7a <f_mkfs+0xe11>
c0007f4b:	8d 45 27             	lea    eax,[ebp+0x27]
c0007f4e:	ba 00 00 21 50       	mov    edx,0x50210000
c0007f53:	e8 77 9b ff ff       	call   c0001acf <st_dword>
c0007f58:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0007f5d:	8d 45 16             	lea    eax,[ebp+0x16]
c0007f60:	e8 66 9b ff ff       	call   c0001acb <st_word>
c0007f65:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0007f69:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0007f6d:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0007f70:	b9 13 00 00 00       	mov    ecx,0x13
c0007f75:	ba 62 02 02 c0       	mov    edx,0xc0020262
c0007f7a:	e8 59 9b ff ff       	call   c0001ad8 <mem_cpy>
c0007f7f:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c0007f85:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007f8a:	89 f0                	mov    eax,esi
c0007f8c:	e8 3a 9b ff ff       	call   c0001acb <st_word>
c0007f91:	83 ec 0c             	sub    esp,0xc
c0007f94:	6a 01                	push   0x1
c0007f96:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007f9a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007f9e:	55                   	push   ebp
c0007f9f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007fa3:	e8 7c 9a ff ff       	call   c0001a24 <disk_write>
c0007fa8:	83 c4 20             	add    esp,0x20
c0007fab:	85 c0                	test   eax,eax
c0007fad:	0f 85 67 02 00 00    	jne    c000821a <f_mkfs+0x10b1>
c0007fb3:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007fb8:	0f 85 b7 00 00 00    	jne    c0008075 <f_mkfs+0xf0c>
c0007fbe:	83 ec 0c             	sub    esp,0xc
c0007fc1:	6a 01                	push   0x1
c0007fc3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007fc7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007fcb:	83 c0 06             	add    eax,0x6
c0007fce:	83 d2 00             	adc    edx,0x0
c0007fd1:	52                   	push   edx
c0007fd2:	50                   	push   eax
c0007fd3:	55                   	push   ebp
c0007fd4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007fd8:	e8 47 9a ff ff       	call   c0001a24 <disk_write>
c0007fdd:	83 c4 20             	add    esp,0x20
c0007fe0:	b9 00 02 00 00       	mov    ecx,0x200
c0007fe5:	31 d2                	xor    edx,edx
c0007fe7:	89 e8                	mov    eax,ebp
c0007fe9:	e8 ff 9a ff ff       	call   c0001aed <mem_set>
c0007fee:	ba 52 52 61 41       	mov    edx,0x41615252
c0007ff3:	89 e8                	mov    eax,ebp
c0007ff5:	e8 d5 9a ff ff       	call   c0001acf <st_dword>
c0007ffa:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0008000:	ba 72 72 41 61       	mov    edx,0x61417272
c0008005:	e8 c5 9a ff ff       	call   c0001acf <st_dword>
c000800a:	8d 53 ff             	lea    edx,[ebx-0x1]
c000800d:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c0008013:	e8 b7 9a ff ff       	call   c0001acf <st_dword>
c0008018:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c000801e:	ba 02 00 00 00       	mov    edx,0x2
c0008023:	e8 a7 9a ff ff       	call   c0001acf <st_dword>
c0008028:	ba 55 aa 00 00       	mov    edx,0xaa55
c000802d:	89 f0                	mov    eax,esi
c000802f:	e8 97 9a ff ff       	call   c0001acb <st_word>
c0008034:	83 ec 0c             	sub    esp,0xc
c0008037:	6a 01                	push   0x1
c0008039:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000803d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008041:	83 c0 07             	add    eax,0x7
c0008044:	83 d2 00             	adc    edx,0x0
c0008047:	52                   	push   edx
c0008048:	50                   	push   eax
c0008049:	55                   	push   ebp
c000804a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000804e:	e8 d1 99 ff ff       	call   c0001a24 <disk_write>
c0008053:	83 c4 14             	add    esp,0x14
c0008056:	6a 01                	push   0x1
c0008058:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000805c:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008060:	83 c0 01             	add    eax,0x1
c0008063:	83 d2 00             	adc    edx,0x0
c0008066:	52                   	push   edx
c0008067:	50                   	push   eax
c0008068:	55                   	push   ebp
c0008069:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000806d:	e8 b2 99 ff ff       	call   c0001a24 <disk_write>
c0008072:	83 c4 20             	add    esp,0x20
c0008075:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c000807c:	31 d2                	xor    edx,edx
c000807e:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0008084:	31 db                	xor    ebx,ebx
c0008086:	89 e8                	mov    eax,ebp
c0008088:	e8 60 9a ff ff       	call   c0001aed <mem_set>
c000808d:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c0008092:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008099:	0f 94 c3             	sete   bl
c000809c:	4b                   	dec    ebx
c000809d:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00080a3:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00080a9:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080ae:	75 21                	jne    c00080d1 <f_mkfs+0xf68>
c00080b0:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00080b5:	89 e8                	mov    eax,ebp
c00080b7:	e8 13 9a ff ff       	call   c0001acf <st_dword>
c00080bc:	8d 45 04             	lea    eax,[ebp+0x4]
c00080bf:	83 ca ff             	or     edx,0xffffffff
c00080c2:	e8 08 9a ff ff       	call   c0001acf <st_dword>
c00080c7:	8d 45 08             	lea    eax,[ebp+0x8]
c00080ca:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00080cf:	eb 04                	jmp    c00080d5 <f_mkfs+0xf6c>
c00080d1:	89 da                	mov    edx,ebx
c00080d3:	89 e8                	mov    eax,ebp
c00080d5:	e8 f5 99 ff ff       	call   c0001acf <st_dword>
c00080da:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00080de:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00080e2:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00080e6:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00080ea:	39 ce                	cmp    esi,ecx
c00080ec:	76 02                	jbe    c00080f0 <f_mkfs+0xf87>
c00080ee:	89 ce                	mov    esi,ecx
c00080f0:	83 ec 0c             	sub    esp,0xc
c00080f3:	56                   	push   esi
c00080f4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00080f8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00080fc:	55                   	push   ebp
c00080fd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008101:	e8 1e 99 ff ff       	call   c0001a24 <disk_write>
c0008106:	83 c4 20             	add    esp,0x20
c0008109:	85 c0                	test   eax,eax
c000810b:	0f 85 09 01 00 00    	jne    c000821a <f_mkfs+0x10b1>
c0008111:	31 d2                	xor    edx,edx
c0008113:	b9 00 02 00 00       	mov    ecx,0x200
c0008118:	89 e8                	mov    eax,ebp
c000811a:	e8 ce 99 ff ff       	call   c0001aed <mem_set>
c000811f:	31 d2                	xor    edx,edx
c0008121:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c0008125:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008129:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c000812d:	75 b3                	jne    c00080e2 <f_mkfs+0xf79>
c000812f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008132:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008139:	40                   	inc    eax
c000813a:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c000813e:	0f 87 65 ff ff ff    	ja     c00080a9 <f_mkfs+0xf40>
c0008144:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008149:	74 04                	je     c000814f <f_mkfs+0xfe6>
c000814b:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000814f:	89 fb                	mov    ebx,edi
c0008151:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c0008155:	76 04                	jbe    c000815b <f_mkfs+0xff2>
c0008157:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000815b:	83 ec 0c             	sub    esp,0xc
c000815e:	53                   	push   ebx
c000815f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008163:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008167:	55                   	push   ebp
c0008168:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000816c:	e8 b3 98 ff ff       	call   c0001a24 <disk_write>
c0008171:	83 c4 20             	add    esp,0x20
c0008174:	85 c0                	test   eax,eax
c0008176:	0f 85 9e 00 00 00    	jne    c000821a <f_mkfs+0x10b1>
c000817c:	31 d2                	xor    edx,edx
c000817e:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c0008182:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008186:	29 df                	sub    edi,ebx
c0008188:	75 c5                	jne    c000814f <f_mkfs+0xfe6>
c000818a:	b1 0c                	mov    cl,0xc
c000818c:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008191:	74 1d                	je     c00081b0 <f_mkfs+0x1047>
c0008193:	b8 ff ff 00 00       	mov    eax,0xffff
c0008198:	b1 06                	mov    cl,0x6
c000819a:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c000819e:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c00081a2:	72 0c                	jb     c00081b0 <f_mkfs+0x1047>
c00081a4:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00081a9:	0f 94 c1             	sete   cl
c00081ac:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00081b0:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00081b5:	75 4c                	jne    c0008203 <f_mkfs+0x109a>
c00081b7:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00081bb:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00081bf:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00081c6:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00081cd:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c00081d8:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c00081e3:	0f b6 c9             	movzx  ecx,cl
c00081e6:	83 ec 0c             	sub    esp,0xc
c00081e9:	55                   	push   ebp
c00081ea:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c00081f1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00081f5:	e8 2f c2 ff ff       	call   c0004429 <create_partition>
c00081fa:	83 c4 10             	add    esp,0x10
c00081fd:	89 c3                	mov    ebx,eax
c00081ff:	85 c0                	test   eax,eax
c0008201:	75 34                	jne    c0008237 <f_mkfs+0x10ce>
c0008203:	31 db                	xor    ebx,ebx
c0008205:	50                   	push   eax
c0008206:	6a 00                	push   0x0
c0008208:	6a 00                	push   0x0
c000820a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000820e:	e8 27 98 ff ff       	call   c0001a3a <disk_ioctl>
c0008213:	83 c4 10             	add    esp,0x10
c0008216:	85 c0                	test   eax,eax
c0008218:	74 1d                	je     c0008237 <f_mkfs+0x10ce>
c000821a:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008222:	75 0c                	jne    c0008230 <f_mkfs+0x10c7>
c0008224:	83 ec 0c             	sub    esp,0xc
c0008227:	55                   	push   ebp
c0008228:	e8 75 00 00 00       	call   c00082a2 <ff_memfree>
c000822d:	83 c4 10             	add    esp,0x10
c0008230:	bb 01 00 00 00       	mov    ebx,0x1
c0008235:	eb 48                	jmp    c000827f <f_mkfs+0x1116>
c0008237:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000823f:	75 3e                	jne    c000827f <f_mkfs+0x1116>
c0008241:	83 ec 0c             	sub    esp,0xc
c0008244:	55                   	push   ebp
c0008245:	e8 58 00 00 00       	call   c00082a2 <ff_memfree>
c000824a:	83 c4 10             	add    esp,0x10
c000824d:	eb 30                	jmp    c000827f <f_mkfs+0x1116>
c000824f:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008254:	0f 85 eb fa ff ff    	jne    c0007d45 <f_mkfs+0xbdc>
c000825a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000825e:	81 ff 80 00 00 00    	cmp    edi,0x80
c0008264:	0f 86 b8 f9 ff ff    	jbe    c0007c22 <f_mkfs+0xab9>
c000826a:	e9 bf fb ff ff       	jmp    c0007e2e <f_mkfs+0xcc5>
c000826f:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008274:	0f 85 c0 fa ff ff    	jne    c0007d3a <f_mkfs+0xbd1>
c000827a:	e9 af fb ff ff       	jmp    c0007e2e <f_mkfs+0xcc5>
c000827f:	81 c4 9c 00 00 00    	add    esp,0x9c
c0008285:	89 d8                	mov    eax,ebx
c0008287:	5b                   	pop    ebx
c0008288:	5e                   	pop    esi
c0008289:	5f                   	pop    edi
c000828a:	5d                   	pop    ebp
c000828b:	c3                   	ret    

c000828c <ff_memalloc>:
c000828c:	83 ec 0c             	sub    esp,0xc
c000828f:	83 ec 0c             	sub    esp,0xc
c0008292:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008296:	e8 9b 3d 00 00       	call   c000c036 <malloc>
c000829b:	83 c4 10             	add    esp,0x10
c000829e:	83 c4 0c             	add    esp,0xc
c00082a1:	c3                   	ret    

c00082a2 <ff_memfree>:
c00082a2:	83 ec 0c             	sub    esp,0xc
c00082a5:	83 ec 0c             	sub    esp,0xc
c00082a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00082ac:	e8 95 3d 00 00       	call   c000c046 <free>
c00082b1:	83 c4 10             	add    esp,0x10
c00082b4:	90                   	nop
c00082b5:	83 c4 0c             	add    esp,0xc
c00082b8:	c3                   	ret    

c00082b9 <ff_uni2oem>:
c00082b9:	83 ec 14             	sub    esp,0x14
c00082bc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00082c0:	66 89 04 24          	mov    WORD PTR [esp],ax
c00082c4:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00082cb:	c7 44 24 0c 80 05 02 c0 	mov    DWORD PTR [esp+0xc],0xc0020580
c00082d3:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00082d8:	77 0b                	ja     c00082e5 <ff_uni2oem+0x2c>
c00082da:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00082de:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00082e3:	eb 5b                	jmp    c0008340 <ff_uni2oem+0x87>
c00082e5:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00082ed:	77 51                	ja     c0008340 <ff_uni2oem+0x87>
c00082ef:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00082f5:	75 49                	jne    c0008340 <ff_uni2oem+0x87>
c00082f7:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00082fe:	eb 0b                	jmp    c000830b <ff_uni2oem+0x52>
c0008300:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008305:	40                   	inc    eax
c0008306:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000830b:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0008311:	77 1b                	ja     c000832e <ff_uni2oem+0x75>
c0008313:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0008318:	01 c0                	add    eax,eax
c000831a:	89 c2                	mov    edx,eax
c000831c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008320:	01 d0                	add    eax,edx
c0008322:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008325:	0f b7 c0             	movzx  eax,ax
c0008328:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000832c:	75 d2                	jne    c0008300 <ff_uni2oem+0x47>
c000832e:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008333:	83 e8 80             	sub    eax,0xffffff80
c0008336:	25 ff 00 00 00       	and    eax,0xff
c000833b:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008340:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008345:	83 c4 14             	add    esp,0x14
c0008348:	c3                   	ret    

c0008349 <ff_oem2uni>:
c0008349:	83 ec 18             	sub    esp,0x18
c000834c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008350:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008354:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008359:	66 89 04 24          	mov    WORD PTR [esp],ax
c000835d:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0008364:	c7 44 24 10 80 05 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020580
c000836c:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0008372:	77 0b                	ja     c000837f <ff_oem2uni+0x36>
c0008374:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008378:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000837d:	eb 2d                	jmp    c00083ac <ff_oem2uni+0x63>
c000837f:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008385:	75 25                	jne    c00083ac <ff_oem2uni+0x63>
c0008387:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c000838e:	77 1c                	ja     c00083ac <ff_oem2uni+0x63>
c0008390:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008395:	05 80 ff ff 7f       	add    eax,0x7fffff80
c000839a:	01 c0                	add    eax,eax
c000839c:	89 c2                	mov    edx,eax
c000839e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00083a2:	01 d0                	add    eax,edx
c00083a4:	66 8b 00             	mov    ax,WORD PTR [eax]
c00083a7:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00083ac:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00083b1:	83 c4 18             	add    esp,0x18
c00083b4:	c3                   	ret    

c00083b5 <ff_wtoupper>:
c00083b5:	83 ec 10             	sub    esp,0x10
c00083b8:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00083c0:	0f 87 3e 01 00 00    	ja     c0008504 <ff_wtoupper+0x14f>
c00083c6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00083ca:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00083cf:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c00083d6:	77 07                	ja     c00083df <ff_wtoupper+0x2a>
c00083d8:	b8 80 03 02 c0       	mov    eax,0xc0020380
c00083dd:	eb 05                	jmp    c00083e4 <ff_wtoupper+0x2f>
c00083df:	b8 c0 02 02 c0       	mov    eax,0xc00202c0
c00083e4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00083e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083ec:	8d 50 02             	lea    edx,[eax+0x2]
c00083ef:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00083f3:	66 8b 00             	mov    ax,WORD PTR [eax]
c00083f6:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00083fb:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0008401:	0f 84 f4 00 00 00    	je     c00084fb <ff_wtoupper+0x146>
c0008407:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000840c:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008411:	0f 82 e4 00 00 00    	jb     c00084fb <ff_wtoupper+0x146>
c0008417:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000841b:	8d 50 02             	lea    edx,[eax+0x2]
c000841e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008422:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008425:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000842a:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c000842f:	66 c1 e8 08          	shr    ax,0x8
c0008433:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008438:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c000843f:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008444:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008449:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c000844e:	01 ca                	add    edx,ecx
c0008450:	39 d0                	cmp    eax,edx
c0008452:	0f 8d 86 00 00 00    	jge    c00084de <ff_wtoupper+0x129>
c0008458:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000845d:	83 f8 08             	cmp    eax,0x8
c0008460:	0f 87 94 00 00 00    	ja     c00084fa <ff_wtoupper+0x145>
c0008466:	8b 04 85 80 02 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdfd80]
c000846d:	ff e0                	jmp    eax
c000846f:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0008474:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0008479:	29 c2                	sub    edx,eax
c000847b:	89 d0                	mov    eax,edx
c000847d:	01 c0                	add    eax,eax
c000847f:	89 c2                	mov    edx,eax
c0008481:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008485:	01 d0                	add    eax,edx
c0008487:	66 8b 00             	mov    ax,WORD PTR [eax]
c000848a:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000848f:	eb 4b                	jmp    c00084dc <ff_wtoupper+0x127>
c0008491:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008496:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c000849a:	83 e0 01             	and    eax,0x1
c000849d:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c00084a2:	eb 38                	jmp    c00084dc <ff_wtoupper+0x127>
c00084a4:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c00084aa:	eb 30                	jmp    c00084dc <ff_wtoupper+0x127>
c00084ac:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c00084b2:	eb 28                	jmp    c00084dc <ff_wtoupper+0x127>
c00084b4:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c00084ba:	eb 20                	jmp    c00084dc <ff_wtoupper+0x127>
c00084bc:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c00084c2:	eb 18                	jmp    c00084dc <ff_wtoupper+0x127>
c00084c4:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c00084ca:	eb 10                	jmp    c00084dc <ff_wtoupper+0x127>
c00084cc:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00084d2:	eb 08                	jmp    c00084dc <ff_wtoupper+0x127>
c00084d4:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00084db:	90                   	nop
c00084dc:	eb 1c                	jmp    c00084fa <ff_wtoupper+0x145>
c00084de:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00084e4:	0f 85 fe fe ff ff    	jne    c00083e8 <ff_wtoupper+0x33>
c00084ea:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00084ef:	01 c0                	add    eax,eax
c00084f1:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00084f5:	e9 ee fe ff ff       	jmp    c00083e8 <ff_wtoupper+0x33>
c00084fa:	90                   	nop
c00084fb:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008500:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008504:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008508:	83 c4 10             	add    esp,0x10
c000850b:	c3                   	ret    

c000850c <is_bad_src_ratio>:
c000850c:	83 ec 0c             	sub    esp,0xc
c000850f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008513:	89 04 24             	mov    DWORD PTR [esp],eax
c0008516:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000851a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000851e:	dd 04 24             	fld    QWORD PTR [esp]
c0008521:	dd 05 40 0b 02 c0    	fld    QWORD PTR ds:0xc0020b40
c0008527:	de d9                	fcompp 
c0008529:	df e0                	fnstsw ax
c000852b:	f6 c4 45             	test   ah,0x45
c000852e:	74 10                	je     c0008540 <is_bad_src_ratio+0x34>
c0008530:	dd 04 24             	fld    QWORD PTR [esp]
c0008533:	dc 1d 48 0b 02 c0    	fcomp  QWORD PTR ds:0xc0020b48
c0008539:	df e0                	fnstsw ax
c000853b:	f6 c4 45             	test   ah,0x45
c000853e:	75 07                	jne    c0008547 <is_bad_src_ratio+0x3b>
c0008540:	b8 01 00 00 00       	mov    eax,0x1
c0008545:	eb 05                	jmp    c000854c <is_bad_src_ratio+0x40>
c0008547:	b8 00 00 00 00       	mov    eax,0x0
c000854c:	83 c4 0c             	add    esp,0xc
c000854f:	c3                   	ret    

c0008550 <psrc_set_converter>:
c0008550:	56                   	push   esi
c0008551:	89 d6                	mov    esi,edx
c0008553:	53                   	push   ebx
c0008554:	89 c3                	mov    ebx,eax
c0008556:	83 ec 0c             	sub    esp,0xc
c0008559:	52                   	push   edx
c000855a:	50                   	push   eax
c000855b:	e8 33 24 00 00       	call   c000a993 <sinc_set_converter>
c0008560:	83 c4 10             	add    esp,0x10
c0008563:	85 c0                	test   eax,eax
c0008565:	74 25                	je     c000858c <psrc_set_converter+0x3c>
c0008567:	50                   	push   eax
c0008568:	50                   	push   eax
c0008569:	56                   	push   esi
c000856a:	53                   	push   ebx
c000856b:	e8 32 28 00 00       	call   c000ada2 <zoh_set_converter>
c0008570:	83 c4 10             	add    esp,0x10
c0008573:	85 c0                	test   eax,eax
c0008575:	74 15                	je     c000858c <psrc_set_converter+0x3c>
c0008577:	51                   	push   ecx
c0008578:	51                   	push   ecx
c0008579:	56                   	push   esi
c000857a:	53                   	push   ebx
c000857b:	e8 10 0a 00 00       	call   c0008f90 <linear_set_converter>
c0008580:	83 c4 10             	add    esp,0x10
c0008583:	ba 0a 00 00 00       	mov    edx,0xa
c0008588:	85 c0                	test   eax,eax
c000858a:	75 02                	jne    c000858e <psrc_set_converter+0x3e>
c000858c:	31 d2                	xor    edx,edx
c000858e:	89 d0                	mov    eax,edx
c0008590:	5a                   	pop    edx
c0008591:	5b                   	pop    ebx
c0008592:	5e                   	pop    esi
c0008593:	c3                   	ret    

c0008594 <src_delete>:
c0008594:	53                   	push   ebx
c0008595:	83 ec 08             	sub    esp,0x8
c0008598:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000859c:	85 db                	test   ebx,ebx
c000859e:	74 29                	je     c00085c9 <src_delete+0x35>
c00085a0:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00085a3:	85 c0                	test   eax,eax
c00085a5:	74 0c                	je     c00085b3 <src_delete+0x1f>
c00085a7:	83 ec 0c             	sub    esp,0xc
c00085aa:	50                   	push   eax
c00085ab:	e8 96 3a 00 00       	call   c000c046 <free>
c00085b0:	83 c4 10             	add    esp,0x10
c00085b3:	50                   	push   eax
c00085b4:	6a 3c                	push   0x3c
c00085b6:	6a 00                	push   0x0
c00085b8:	53                   	push   ebx
c00085b9:	e8 15 81 ff ff       	call   c00006d3 <memset>
c00085be:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00085c1:	e8 80 3a 00 00       	call   c000c046 <free>
c00085c6:	83 c4 10             	add    esp,0x10
c00085c9:	31 c0                	xor    eax,eax
c00085cb:	83 c4 08             	add    esp,0x8
c00085ce:	5b                   	pop    ebx
c00085cf:	c3                   	ret    

c00085d0 <src_process>:
c00085d0:	56                   	push   esi
c00085d1:	53                   	push   ebx
c00085d2:	53                   	push   ebx
c00085d3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00085d7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00085db:	85 f6                	test   esi,esi
c00085dd:	0f 84 e2 00 00 00    	je     c00086c5 <src_process+0xf5>
c00085e3:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c00085e7:	0f 84 df 00 00 00    	je     c00086cc <src_process+0xfc>
c00085ed:	83 7e 24 00          	cmp    DWORD PTR [esi+0x24],0x0
c00085f1:	0f 84 d5 00 00 00    	je     c00086cc <src_process+0xfc>
c00085f7:	81 7e 18 2b 02 00 00 	cmp    DWORD PTR [esi+0x18],0x22b
c00085fe:	0f 85 cf 00 00 00    	jne    c00086d3 <src_process+0x103>
c0008604:	85 db                	test   ebx,ebx
c0008606:	0f 84 ce 00 00 00    	je     c00086da <src_process+0x10a>
c000860c:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000860f:	0f 84 cc 00 00 00    	je     c00086e1 <src_process+0x111>
c0008615:	83 7b 04 00          	cmp    DWORD PTR [ebx+0x4],0x0
c0008619:	0f 84 c2 00 00 00    	je     c00086e1 <src_process+0x111>
c000861f:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0008622:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0008625:	e8 e2 fe ff ff       	call   c000850c <is_bad_src_ratio>
c000862a:	5a                   	pop    edx
c000862b:	85 c0                	test   eax,eax
c000862d:	59                   	pop    ecx
c000862e:	0f 85 b4 00 00 00    	jne    c00086e8 <src_process+0x118>
c0008634:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008638:	79 07                	jns    c0008641 <src_process+0x71>
c000863a:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008641:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c0008645:	79 07                	jns    c000864e <src_process+0x7e>
c0008647:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000864e:	8b 13                	mov    edx,DWORD PTR [ebx]
c0008650:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c0008653:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0008656:	39 ca                	cmp    edx,ecx
c0008658:	73 0b                	jae    c0008665 <src_process+0x95>
c000865a:	0f af 43 08          	imul   eax,DWORD PTR [ebx+0x8]
c000865e:	8d 04 82             	lea    eax,[edx+eax*4]
c0008661:	39 c1                	cmp    ecx,eax
c0008663:	eb 09                	jmp    c000866e <src_process+0x9e>
c0008665:	0f af 43 0c          	imul   eax,DWORD PTR [ebx+0xc]
c0008669:	8d 04 81             	lea    eax,[ecx+eax*4]
c000866c:	39 c2                	cmp    edx,eax
c000866e:	72 7f                	jb     c00086ef <src_process+0x11f>
c0008670:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008677:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000867e:	d9 05 60 0b 02 c0    	fld    DWORD PTR ds:0xc0020b60
c0008684:	dc 1e                	fcomp  QWORD PTR [esi]
c0008686:	df e0                	fnstsw ax
c0008688:	9e                   	sahf   
c0008689:	76 05                	jbe    c0008690 <src_process+0xc0>
c000868b:	dd 43 1c             	fld    QWORD PTR [ebx+0x1c]
c000868e:	dd 1e                	fstp   QWORD PTR [esi]
c0008690:	83 ec 10             	sub    esp,0x10
c0008693:	dd 06                	fld    QWORD PTR [esi]
c0008695:	dc 63 1c             	fsub   QWORD PTR [ebx+0x1c]
c0008698:	dd 1c 24             	fstp   QWORD PTR [esp]
c000869b:	e8 50 6d 01 00       	call   c001f3f0 <fabs>
c00086a0:	83 c4 10             	add    esp,0x10
c00086a3:	dd 05 50 0b 02 c0    	fld    QWORD PTR ds:0xc0020b50
c00086a9:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00086ad:	de d9                	fcompp 
c00086af:	df e0                	fnstsw ax
c00086b1:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00086b5:	9e                   	sahf   
c00086b6:	76 05                	jbe    c00086bd <src_process+0xed>
c00086b8:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c00086bb:	eb 03                	jmp    c00086c0 <src_process+0xf0>
c00086bd:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00086c0:	59                   	pop    ecx
c00086c1:	5b                   	pop    ebx
c00086c2:	5e                   	pop    esi
c00086c3:	ff e0                	jmp    eax
c00086c5:	b8 02 00 00 00       	mov    eax,0x2
c00086ca:	eb 28                	jmp    c00086f4 <src_process+0x124>
c00086cc:	b8 07 00 00 00       	mov    eax,0x7
c00086d1:	eb 21                	jmp    c00086f4 <src_process+0x124>
c00086d3:	b8 12 00 00 00       	mov    eax,0x12
c00086d8:	eb 1a                	jmp    c00086f4 <src_process+0x124>
c00086da:	b8 03 00 00 00       	mov    eax,0x3
c00086df:	eb 13                	jmp    c00086f4 <src_process+0x124>
c00086e1:	b8 04 00 00 00       	mov    eax,0x4
c00086e6:	eb 0c                	jmp    c00086f4 <src_process+0x124>
c00086e8:	b8 06 00 00 00       	mov    eax,0x6
c00086ed:	eb 05                	jmp    c00086f4 <src_process+0x124>
c00086ef:	b8 10 00 00 00       	mov    eax,0x10
c00086f4:	5a                   	pop    edx
c00086f5:	5b                   	pop    ebx
c00086f6:	5e                   	pop    esi
c00086f7:	c3                   	ret    

c00086f8 <src_callback_read>:
c00086f8:	55                   	push   ebp
c00086f9:	57                   	push   edi
c00086fa:	56                   	push   esi
c00086fb:	53                   	push   ebx
c00086fc:	83 ec 4c             	sub    esp,0x4c
c00086ff:	dd 44 24 64          	fld    QWORD PTR [esp+0x64]
c0008703:	8b 7c 24 6c          	mov    edi,DWORD PTR [esp+0x6c]
c0008707:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000870b:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000870f:	85 ff                	test   edi,edi
c0008711:	0f 8e 36 01 00 00    	jle    c000884d <src_callback_read+0x155>
c0008717:	85 db                	test   ebx,ebx
c0008719:	0f 84 2e 01 00 00    	je     c000884d <src_callback_read+0x155>
c000871f:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c0008726:	74 0c                	je     c0008734 <src_callback_read+0x3c>
c0008728:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c000872f:	e9 19 01 00 00       	jmp    c000884d <src_callback_read+0x155>
c0008734:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c0008738:	75 0c                	jne    c0008746 <src_callback_read+0x4e>
c000873a:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008741:	e9 07 01 00 00       	jmp    c000884d <src_callback_read+0x155>
c0008746:	51                   	push   ecx
c0008747:	6a 24                	push   0x24
c0008749:	6a 00                	push   0x0
c000874b:	8d 44 24 28          	lea    eax,[esp+0x28]
c000874f:	50                   	push   eax
c0008750:	e8 7e 7f ff ff       	call   c00006d3 <memset>
c0008755:	5e                   	pop    esi
c0008756:	5d                   	pop    ebp
c0008757:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000875b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000875f:	e8 a8 fd ff ff       	call   c000850c <is_bad_src_ratio>
c0008764:	83 c4 10             	add    esp,0x10
c0008767:	85 c0                	test   eax,eax
c0008769:	74 0c                	je     c0008777 <src_callback_read+0x7f>
c000876b:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c0008772:	e9 d6 00 00 00       	jmp    c000884d <src_callback_read+0x155>
c0008777:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000877b:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000877f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0008783:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0008787:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000878a:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000878e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008792:	31 f6                	xor    esi,esi
c0008794:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0008797:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000879b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00087a0:	75 30                	jne    c00087d2 <src_callback_read+0xda>
c00087a2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00087a6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00087aa:	52                   	push   edx
c00087ab:	52                   	push   edx
c00087ac:	8d 44 24 20          	lea    eax,[esp+0x20]
c00087b0:	50                   	push   eax
c00087b1:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00087b4:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c00087b7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00087bb:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00087bf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00087c3:	83 c4 10             	add    esp,0x10
c00087c6:	85 c0                	test   eax,eax
c00087c8:	75 08                	jne    c00087d2 <src_callback_read+0xda>
c00087ca:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c00087d2:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c00087d9:	50                   	push   eax
c00087da:	50                   	push   eax
c00087db:	8d 44 24 24          	lea    eax,[esp+0x24]
c00087df:	50                   	push   eax
c00087e0:	53                   	push   ebx
c00087e1:	e8 ea fd ff ff       	call   c00085d0 <src_process>
c00087e6:	83 c4 10             	add    esp,0x10
c00087e9:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c00087f0:	85 c0                	test   eax,eax
c00087f2:	75 42                	jne    c0008836 <src_callback_read+0x13e>
c00087f4:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c00087f8:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00087fb:	89 e9                	mov    ecx,ebp
c00087fd:	29 6c 24 24          	sub    DWORD PTR [esp+0x24],ebp
c0008801:	0f af ca             	imul   ecx,edx
c0008804:	c1 e1 02             	shl    ecx,0x2
c0008807:	01 4c 24 1c          	add    DWORD PTR [esp+0x1c],ecx
c000880b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000880f:	0f af d1             	imul   edx,ecx
c0008812:	29 4c 24 28          	sub    DWORD PTR [esp+0x28],ecx
c0008816:	c1 e2 02             	shl    edx,0x2
c0008819:	01 54 24 20          	add    DWORD PTR [esp+0x20],edx
c000881d:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008820:	83 7c 24 34 01       	cmp    DWORD PTR [esp+0x34],0x1
c0008825:	75 04                	jne    c000882b <src_callback_read+0x133>
c0008827:	85 c9                	test   ecx,ecx
c0008829:	74 0b                	je     c0008836 <src_callback_read+0x13e>
c000882b:	39 d7                	cmp    edi,edx
c000882d:	7e 09                	jle    c0008838 <src_callback_read+0x140>
c000882f:	89 d6                	mov    esi,edx
c0008831:	e9 65 ff ff ff       	jmp    c000879b <src_callback_read+0xa3>
c0008836:	89 f2                	mov    edx,esi
c0008838:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000883c:	85 c0                	test   eax,eax
c000883e:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008841:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0008845:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008848:	74 05                	je     c000884f <src_callback_read+0x157>
c000884a:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000884d:	31 d2                	xor    edx,edx
c000884f:	83 c4 4c             	add    esp,0x4c
c0008852:	89 d0                	mov    eax,edx
c0008854:	5b                   	pop    ebx
c0008855:	5e                   	pop    esi
c0008856:	5f                   	pop    edi
c0008857:	5d                   	pop    ebp
c0008858:	c3                   	ret    

c0008859 <src_set_ratio>:
c0008859:	53                   	push   ebx
c000885a:	b8 02 00 00 00       	mov    eax,0x2
c000885f:	83 ec 08             	sub    esp,0x8
c0008862:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008866:	dd 44 24 14          	fld    QWORD PTR [esp+0x14]
c000886a:	85 db                	test   ebx,ebx
c000886c:	74 33                	je     c00088a1 <src_set_ratio+0x48>
c000886e:	b8 07 00 00 00       	mov    eax,0x7
c0008873:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008877:	74 2c                	je     c00088a5 <src_set_ratio+0x4c>
c0008879:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c000887d:	74 2a                	je     c00088a9 <src_set_ratio+0x50>
c000887f:	50                   	push   eax
c0008880:	50                   	push   eax
c0008881:	dd 14 24             	fst    QWORD PTR [esp]
c0008884:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0008888:	e8 7f fc ff ff       	call   c000850c <is_bad_src_ratio>
c000888d:	5a                   	pop    edx
c000888e:	85 c0                	test   eax,eax
c0008890:	59                   	pop    ecx
c0008891:	75 07                	jne    c000889a <src_set_ratio+0x41>
c0008893:	dd 04 24             	fld    QWORD PTR [esp]
c0008896:	dd 1b                	fstp   QWORD PTR [ebx]
c0008898:	eb 11                	jmp    c00088ab <src_set_ratio+0x52>
c000889a:	b8 06 00 00 00       	mov    eax,0x6
c000889f:	eb 0a                	jmp    c00088ab <src_set_ratio+0x52>
c00088a1:	dd d8                	fstp   st(0)
c00088a3:	eb 06                	jmp    c00088ab <src_set_ratio+0x52>
c00088a5:	dd d8                	fstp   st(0)
c00088a7:	eb 02                	jmp    c00088ab <src_set_ratio+0x52>
c00088a9:	dd d8                	fstp   st(0)
c00088ab:	83 c4 08             	add    esp,0x8
c00088ae:	5b                   	pop    ebx
c00088af:	c3                   	ret    

c00088b0 <src_get_channels>:
c00088b0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00088b4:	b8 02 00 00 00       	mov    eax,0x2
c00088b9:	85 d2                	test   edx,edx
c00088bb:	74 14                	je     c00088d1 <src_get_channels+0x21>
c00088bd:	b8 07 00 00 00       	mov    eax,0x7
c00088c2:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c00088c6:	74 09                	je     c00088d1 <src_get_channels+0x21>
c00088c8:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c00088cc:	74 03                	je     c00088d1 <src_get_channels+0x21>
c00088ce:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00088d1:	c3                   	ret    

c00088d2 <src_reset>:
c00088d2:	53                   	push   ebx
c00088d3:	b8 02 00 00 00       	mov    eax,0x2
c00088d8:	83 ec 08             	sub    esp,0x8
c00088db:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00088df:	85 db                	test   ebx,ebx
c00088e1:	74 2e                	je     c0008911 <src_reset+0x3f>
c00088e3:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00088e6:	85 c0                	test   eax,eax
c00088e8:	74 09                	je     c00088f3 <src_reset+0x21>
c00088ea:	83 ec 0c             	sub    esp,0xc
c00088ed:	53                   	push   ebx
c00088ee:	ff d0                	call   eax
c00088f0:	83 c4 10             	add    esp,0x10
c00088f3:	d9 ee                	fldz   
c00088f5:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c00088fc:	dd 53 08             	fst    QWORD PTR [ebx+0x8]
c00088ff:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008906:	dd 1b                	fstp   QWORD PTR [ebx]
c0008908:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000890f:	31 c0                	xor    eax,eax
c0008911:	83 c4 08             	add    esp,0x8
c0008914:	5b                   	pop    ebx
c0008915:	c3                   	ret    

c0008916 <src_new>:
c0008916:	57                   	push   edi
c0008917:	56                   	push   esi
c0008918:	53                   	push   ebx
c0008919:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000891d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008921:	85 f6                	test   esi,esi
c0008923:	74 73                	je     c0008998 <src_new+0x82>
c0008925:	85 ff                	test   edi,edi
c0008927:	7f 08                	jg     c0008931 <src_new+0x1b>
c0008929:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c000892f:	eb 1e                	jmp    c000894f <src_new+0x39>
c0008931:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008937:	50                   	push   eax
c0008938:	50                   	push   eax
c0008939:	6a 3c                	push   0x3c
c000893b:	6a 01                	push   0x1
c000893d:	e8 24 37 00 00       	call   c000c066 <calloc>
c0008942:	83 c4 10             	add    esp,0x10
c0008945:	89 c3                	mov    ebx,eax
c0008947:	85 c0                	test   eax,eax
c0008949:	75 10                	jne    c000895b <src_new+0x45>
c000894b:	85 f6                	test   esi,esi
c000894d:	75 04                	jne    c0008953 <src_new+0x3d>
c000894f:	31 db                	xor    ebx,ebx
c0008951:	eb 4b                	jmp    c000899e <src_new+0x88>
c0008953:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008959:	eb 43                	jmp    c000899e <src_new+0x88>
c000895b:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c000895e:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c0008965:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008969:	e8 e2 fb ff ff       	call   c0008550 <psrc_set_converter>
c000896e:	85 c0                	test   eax,eax
c0008970:	74 18                	je     c000898a <src_new+0x74>
c0008972:	85 f6                	test   esi,esi
c0008974:	74 06                	je     c000897c <src_new+0x66>
c0008976:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c000897c:	83 ec 0c             	sub    esp,0xc
c000897f:	53                   	push   ebx
c0008980:	31 db                	xor    ebx,ebx
c0008982:	e8 bf 36 00 00       	call   c000c046 <free>
c0008987:	83 c4 10             	add    esp,0x10
c000898a:	83 ec 0c             	sub    esp,0xc
c000898d:	53                   	push   ebx
c000898e:	e8 3f ff ff ff       	call   c00088d2 <src_reset>
c0008993:	83 c4 10             	add    esp,0x10
c0008996:	eb 06                	jmp    c000899e <src_new+0x88>
c0008998:	85 ff                	test   edi,edi
c000899a:	7f 9b                	jg     c0008937 <src_new+0x21>
c000899c:	eb b1                	jmp    c000894f <src_new+0x39>
c000899e:	89 d8                	mov    eax,ebx
c00089a0:	5b                   	pop    ebx
c00089a1:	5e                   	pop    esi
c00089a2:	5f                   	pop    edi
c00089a3:	c3                   	ret    

c00089a4 <src_callback_new>:
c00089a4:	56                   	push   esi
c00089a5:	53                   	push   ebx
c00089a6:	53                   	push   ebx
c00089a7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00089ab:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00089af:	85 f6                	test   esi,esi
c00089b1:	75 0e                	jne    c00089c1 <src_callback_new+0x1d>
c00089b3:	31 db                	xor    ebx,ebx
c00089b5:	85 c0                	test   eax,eax
c00089b7:	74 47                	je     c0008a00 <src_callback_new+0x5c>
c00089b9:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c00089bf:	eb 3f                	jmp    c0008a00 <src_callback_new+0x5c>
c00089c1:	85 c0                	test   eax,eax
c00089c3:	74 06                	je     c00089cb <src_callback_new+0x27>
c00089c5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00089cb:	51                   	push   ecx
c00089cc:	50                   	push   eax
c00089cd:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00089d1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00089d5:	e8 3c ff ff ff       	call   c0008916 <src_new>
c00089da:	83 c4 10             	add    esp,0x10
c00089dd:	89 c3                	mov    ebx,eax
c00089df:	85 c0                	test   eax,eax
c00089e1:	74 1d                	je     c0008a00 <src_callback_new+0x5c>
c00089e3:	83 ec 0c             	sub    esp,0xc
c00089e6:	50                   	push   eax
c00089e7:	e8 e6 fe ff ff       	call   c00088d2 <src_reset>
c00089ec:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00089f0:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c00089f7:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00089fa:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00089fd:	83 c4 10             	add    esp,0x10
c0008a00:	89 d8                	mov    eax,ebx
c0008a02:	5a                   	pop    edx
c0008a03:	5b                   	pop    ebx
c0008a04:	5e                   	pop    esi
c0008a05:	c3                   	ret    

c0008a06 <src_get_name>:
c0008a06:	53                   	push   ebx
c0008a07:	83 ec 14             	sub    esp,0x14
c0008a0a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008a0e:	53                   	push   ebx
c0008a0f:	e8 59 1f 00 00       	call   c000a96d <sinc_get_name>
c0008a14:	83 c4 10             	add    esp,0x10
c0008a17:	85 c0                	test   eax,eax
c0008a19:	75 1d                	jne    c0008a38 <src_get_name+0x32>
c0008a1b:	83 ec 0c             	sub    esp,0xc
c0008a1e:	53                   	push   ebx
c0008a1f:	e8 60 23 00 00       	call   c000ad84 <zoh_get_name>
c0008a24:	83 c4 10             	add    esp,0x10
c0008a27:	85 c0                	test   eax,eax
c0008a29:	75 0d                	jne    c0008a38 <src_get_name+0x32>
c0008a2b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008a2f:	83 c4 08             	add    esp,0x8
c0008a32:	5b                   	pop    ebx
c0008a33:	e9 3a 05 00 00       	jmp    c0008f72 <linear_get_name>
c0008a38:	83 c4 08             	add    esp,0x8
c0008a3b:	5b                   	pop    ebx
c0008a3c:	c3                   	ret    

c0008a3d <src_get_description>:
c0008a3d:	53                   	push   ebx
c0008a3e:	83 ec 14             	sub    esp,0x14
c0008a41:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008a45:	53                   	push   ebx
c0008a46:	e8 35 1f 00 00       	call   c000a980 <sinc_get_description>
c0008a4b:	83 c4 10             	add    esp,0x10
c0008a4e:	85 c0                	test   eax,eax
c0008a50:	75 1d                	jne    c0008a6f <src_get_description+0x32>
c0008a52:	83 ec 0c             	sub    esp,0xc
c0008a55:	53                   	push   ebx
c0008a56:	e8 38 23 00 00       	call   c000ad93 <zoh_get_description>
c0008a5b:	83 c4 10             	add    esp,0x10
c0008a5e:	85 c0                	test   eax,eax
c0008a60:	75 0d                	jne    c0008a6f <src_get_description+0x32>
c0008a62:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008a66:	83 c4 08             	add    esp,0x8
c0008a69:	5b                   	pop    ebx
c0008a6a:	e9 12 05 00 00       	jmp    c0008f81 <linear_get_description>
c0008a6f:	83 c4 08             	add    esp,0x8
c0008a72:	5b                   	pop    ebx
c0008a73:	c3                   	ret    

c0008a74 <src_get_version>:
c0008a74:	b8 80 06 02 c0       	mov    eax,0xc0020680
c0008a79:	c3                   	ret    

c0008a7a <src_is_valid_ratio>:
c0008a7a:	50                   	push   eax
c0008a7b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008a7f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008a83:	e8 84 fa ff ff       	call   c000850c <is_bad_src_ratio>
c0008a88:	85 c0                	test   eax,eax
c0008a8a:	0f 94 c0             	sete   al
c0008a8d:	83 c4 0c             	add    esp,0xc
c0008a90:	0f b6 c0             	movzx  eax,al
c0008a93:	c3                   	ret    

c0008a94 <src_error>:
c0008a94:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008a98:	31 c0                	xor    eax,eax
c0008a9a:	85 d2                	test   edx,edx
c0008a9c:	74 03                	je     c0008aa1 <src_error+0xd>
c0008a9e:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008aa1:	c3                   	ret    

c0008aa2 <src_strerror>:
c0008aa2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008aa6:	31 c0                	xor    eax,eax
c0008aa8:	83 fa 17             	cmp    edx,0x17
c0008aab:	77 07                	ja     c0008ab4 <src_strerror+0x12>
c0008aad:	8b 04 95 e0 0a 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdf520]
c0008ab4:	c3                   	ret    

c0008ab5 <src_simple>:
c0008ab5:	56                   	push   esi
c0008ab6:	53                   	push   ebx
c0008ab7:	83 ec 18             	sub    esp,0x18
c0008aba:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008abe:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008ac2:	50                   	push   eax
c0008ac3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008ac7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008acb:	e8 46 fe ff ff       	call   c0008916 <src_new>
c0008ad0:	83 c4 10             	add    esp,0x10
c0008ad3:	85 c0                	test   eax,eax
c0008ad5:	75 06                	jne    c0008add <src_simple+0x28>
c0008ad7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008adb:	eb 25                	jmp    c0008b02 <src_simple+0x4d>
c0008add:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008ae4:	89 c3                	mov    ebx,eax
c0008ae6:	50                   	push   eax
c0008ae7:	50                   	push   eax
c0008ae8:	56                   	push   esi
c0008ae9:	53                   	push   ebx
c0008aea:	e8 e1 fa ff ff       	call   c00085d0 <src_process>
c0008aef:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008af2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008af6:	e8 99 fa ff ff       	call   c0008594 <src_delete>
c0008afb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008aff:	83 c4 10             	add    esp,0x10
c0008b02:	83 c4 14             	add    esp,0x14
c0008b05:	5b                   	pop    ebx
c0008b06:	5e                   	pop    esi
c0008b07:	c3                   	ret    

c0008b08 <src_short_to_float_array>:
c0008b08:	83 ec 0c             	sub    esp,0xc
c0008b0b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008b0f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008b13:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008b17:	85 c0                	test   eax,eax
c0008b19:	74 0f                	je     c0008b2a <src_short_to_float_array+0x22>
c0008b1b:	48                   	dec    eax
c0008b1c:	d9 05 64 0b 02 c0    	fld    DWORD PTR ds:0xc0020b64
c0008b22:	de 0c 42             	fimul  WORD PTR [edx+eax*2]
c0008b25:	d9 1c 81             	fstp   DWORD PTR [ecx+eax*4]
c0008b28:	eb ed                	jmp    c0008b17 <src_short_to_float_array+0xf>
c0008b2a:	83 c4 0c             	add    esp,0xc
c0008b2d:	c3                   	ret    

c0008b2e <src_float_to_short_array>:
c0008b2e:	56                   	push   esi
c0008b2f:	53                   	push   ebx
c0008b30:	52                   	push   edx
c0008b31:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008b35:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008b39:	85 db                	test   ebx,ebx
c0008b3b:	74 51                	je     c0008b8e <src_float_to_short_array+0x60>
c0008b3d:	4b                   	dec    ebx
c0008b3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b42:	d9 05 68 0b 02 c0    	fld    DWORD PTR ds:0xc0020b68
c0008b48:	d8 0c 98             	fmul   DWORD PTR [eax+ebx*4]
c0008b4b:	dc 15 58 0b 02 c0    	fcom   QWORD PTR ds:0xc0020b58
c0008b51:	df e0                	fnstsw ax
c0008b53:	9e                   	sahf   
c0008b54:	72 0a                	jb     c0008b60 <src_float_to_short_array+0x32>
c0008b56:	dd d8                	fstp   st(0)
c0008b58:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008b5e:	eb d9                	jmp    c0008b39 <src_float_to_short_array+0xb>
c0008b60:	d9 05 6c 0b 02 c0    	fld    DWORD PTR ds:0xc0020b6c
c0008b66:	d8 d9                	fcomp  st(1)
c0008b68:	df e0                	fnstsw ax
c0008b6a:	9e                   	sahf   
c0008b6b:	72 0a                	jb     c0008b77 <src_float_to_short_array+0x49>
c0008b6d:	dd d8                	fstp   st(0)
c0008b6f:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008b75:	eb c2                	jmp    c0008b39 <src_float_to_short_array+0xb>
c0008b77:	83 ec 10             	sub    esp,0x10
c0008b7a:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008b7d:	e8 8e 68 01 00       	call   c001f410 <lrint>
c0008b82:	83 c4 10             	add    esp,0x10
c0008b85:	c1 f8 10             	sar    eax,0x10
c0008b88:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008b8c:	eb ab                	jmp    c0008b39 <src_float_to_short_array+0xb>
c0008b8e:	58                   	pop    eax
c0008b8f:	5b                   	pop    ebx
c0008b90:	5e                   	pop    esi
c0008b91:	c3                   	ret    

c0008b92 <src_int_to_float_array>:
c0008b92:	83 ec 0c             	sub    esp,0xc
c0008b95:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008b99:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008b9d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008ba1:	85 c0                	test   eax,eax
c0008ba3:	74 0f                	je     c0008bb4 <src_int_to_float_array+0x22>
c0008ba5:	48                   	dec    eax
c0008ba6:	d9 05 70 0b 02 c0    	fld    DWORD PTR ds:0xc0020b70
c0008bac:	da 0c 82             	fimul  DWORD PTR [edx+eax*4]
c0008baf:	d9 1c 81             	fstp   DWORD PTR [ecx+eax*4]
c0008bb2:	eb ed                	jmp    c0008ba1 <src_int_to_float_array+0xf>
c0008bb4:	83 c4 0c             	add    esp,0xc
c0008bb7:	c3                   	ret    

c0008bb8 <src_float_to_int_array>:
c0008bb8:	56                   	push   esi
c0008bb9:	53                   	push   ebx
c0008bba:	52                   	push   edx
c0008bbb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008bbf:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008bc3:	85 db                	test   ebx,ebx
c0008bc5:	74 4f                	je     c0008c16 <src_float_to_int_array+0x5e>
c0008bc7:	4b                   	dec    ebx
c0008bc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bcc:	d9 05 68 0b 02 c0    	fld    DWORD PTR ds:0xc0020b68
c0008bd2:	d8 0c 98             	fmul   DWORD PTR [eax+ebx*4]
c0008bd5:	dc 15 58 0b 02 c0    	fcom   QWORD PTR ds:0xc0020b58
c0008bdb:	df e0                	fnstsw ax
c0008bdd:	9e                   	sahf   
c0008bde:	72 0b                	jb     c0008beb <src_float_to_int_array+0x33>
c0008be0:	dd d8                	fstp   st(0)
c0008be2:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008be9:	eb d8                	jmp    c0008bc3 <src_float_to_int_array+0xb>
c0008beb:	d9 05 6c 0b 02 c0    	fld    DWORD PTR ds:0xc0020b6c
c0008bf1:	d8 d9                	fcomp  st(1)
c0008bf3:	df e0                	fnstsw ax
c0008bf5:	9e                   	sahf   
c0008bf6:	72 0b                	jb     c0008c03 <src_float_to_int_array+0x4b>
c0008bf8:	dd d8                	fstp   st(0)
c0008bfa:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008c01:	eb c0                	jmp    c0008bc3 <src_float_to_int_array+0xb>
c0008c03:	83 ec 10             	sub    esp,0x10
c0008c06:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008c09:	e8 02 68 01 00       	call   c001f410 <lrint>
c0008c0e:	83 c4 10             	add    esp,0x10
c0008c11:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0008c14:	eb ad                	jmp    c0008bc3 <src_float_to_int_array+0xb>
c0008c16:	58                   	pop    eax
c0008c17:	5b                   	pop    ebx
c0008c18:	5e                   	pop    esi
c0008c19:	c3                   	ret    

c0008c1a <is_bad_src_ratio>:
c0008c1a:	83 ec 0c             	sub    esp,0xc
c0008c1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c21:	89 04 24             	mov    DWORD PTR [esp],eax
c0008c24:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008c28:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008c2c:	dd 04 24             	fld    QWORD PTR [esp]
c0008c2f:	dd 05 40 0b 02 c0    	fld    QWORD PTR ds:0xc0020b40
c0008c35:	de d9                	fcompp 
c0008c37:	df e0                	fnstsw ax
c0008c39:	f6 c4 45             	test   ah,0x45
c0008c3c:	74 10                	je     c0008c4e <is_bad_src_ratio+0x34>
c0008c3e:	dd 04 24             	fld    QWORD PTR [esp]
c0008c41:	dc 1d 48 0b 02 c0    	fcomp  QWORD PTR ds:0xc0020b48
c0008c47:	df e0                	fnstsw ax
c0008c49:	f6 c4 45             	test   ah,0x45
c0008c4c:	75 07                	jne    c0008c55 <is_bad_src_ratio+0x3b>
c0008c4e:	b8 01 00 00 00       	mov    eax,0x1
c0008c53:	eb 05                	jmp    c0008c5a <is_bad_src_ratio+0x40>
c0008c55:	b8 00 00 00 00       	mov    eax,0x0
c0008c5a:	83 c4 0c             	add    esp,0xc
c0008c5d:	c3                   	ret    

c0008c5e <fmod_one>:
c0008c5e:	83 ec 2c             	sub    esp,0x2c
c0008c61:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008c65:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008c69:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0008c6d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008c71:	83 ec 08             	sub    esp,0x8
c0008c74:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c78:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c7c:	e8 8f 67 01 00       	call   c001f410 <lrint>
c0008c81:	83 c4 10             	add    esp,0x10
c0008c84:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008c88:	db 44 24 04          	fild   DWORD PTR [esp+0x4]
c0008c8c:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008c90:	de e1                	fsubrp st(1),st
c0008c92:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0008c96:	d9 ee                	fldz   
c0008c98:	dc 5c 24 18          	fcomp  QWORD PTR [esp+0x18]
c0008c9c:	df e0                	fnstsw ax
c0008c9e:	f6 c4 45             	test   ah,0x45
c0008ca1:	75 0a                	jne    c0008cad <fmod_one+0x4f>
c0008ca3:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0008ca7:	d9 e8                	fld1   
c0008ca9:	de c1                	faddp  st(1),st
c0008cab:	eb 04                	jmp    c0008cb1 <fmod_one+0x53>
c0008cad:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0008cb1:	83 c4 2c             	add    esp,0x2c
c0008cb4:	c3                   	ret    

c0008cb5 <linear_vari_process>:
c0008cb5:	55                   	push   ebp
c0008cb6:	57                   	push   edi
c0008cb7:	56                   	push   esi
c0008cb8:	53                   	push   ebx
c0008cb9:	83 ec 2c             	sub    esp,0x2c
c0008cbc:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0008cc0:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0008cc4:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0008ccc:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0008cd0:	0f 8e 5e 02 00 00    	jle    c0008f34 <linear_vari_process+0x27f>
c0008cd6:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c0008cd9:	c7 44 24 18 05 00 00 00 	mov    DWORD PTR [esp+0x18],0x5
c0008ce1:	85 db                	test   ebx,ebx
c0008ce3:	0f 84 4b 02 00 00    	je     c0008f34 <linear_vari_process+0x27f>
c0008ce9:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0008cec:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008cf0:	74 19                	je     c0008d0b <linear_vari_process+0x56>
c0008cf2:	31 d2                	xor    edx,edx
c0008cf4:	39 c2                	cmp    edx,eax
c0008cf6:	7d 0c                	jge    c0008d04 <linear_vari_process+0x4f>
c0008cf8:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0008cfa:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c0008cfd:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c0008d01:	42                   	inc    edx
c0008d02:	eb f0                	jmp    c0008cf4 <linear_vari_process+0x3f>
c0008d04:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008d0b:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0008d0e:	0f af d0             	imul   edx,eax
c0008d11:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008d14:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0008d18:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0008d1f:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0008d22:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008d29:	dd 07                	fld    QWORD PTR [edi]
c0008d2b:	dd 14 24             	fst    QWORD PTR [esp]
c0008d2e:	50                   	push   eax
c0008d2f:	50                   	push   eax
c0008d30:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008d33:	e8 e2 fe ff ff       	call   c0008c1a <is_bad_src_ratio>
c0008d38:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0008d3c:	5a                   	pop    edx
c0008d3d:	59                   	pop    ecx
c0008d3e:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0008d43:	0f 85 e3 01 00 00    	jne    c0008f2c <linear_vari_process+0x277>
c0008d49:	dd 47 08             	fld    QWORD PTR [edi+0x8]
c0008d4c:	d9 e8                	fld1   
c0008d4e:	d8 d1                	fcom   st(1)
c0008d50:	df e0                	fnstsw ax
c0008d52:	9e                   	sahf   
c0008d53:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0008d57:	0f 86 99 00 00 00    	jbe    c0008df6 <linear_vari_process+0x141>
c0008d5d:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008d60:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0008d63:	0f 8d 8d 00 00 00    	jge    c0008df6 <linear_vari_process+0x141>
c0008d69:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008d6d:	d8 c1                	fadd   st,st(1)
c0008d6f:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c0008d72:	da 43 10             	fiadd  DWORD PTR [ebx+0x10]
c0008d75:	da 5b 0c             	ficomp DWORD PTR [ebx+0xc]
c0008d78:	df e0                	fnstsw ax
c0008d7a:	9e                   	sahf   
c0008d7b:	73 79                	jae    c0008df6 <linear_vari_process+0x141>
c0008d7d:	85 d2                	test   edx,edx
c0008d7f:	7e 38                	jle    c0008db9 <linear_vari_process+0x104>
c0008d81:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0008d85:	83 ec 10             	sub    esp,0x10
c0008d88:	dd 07                	fld    QWORD PTR [edi]
c0008d8a:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c0008d8d:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008d90:	e8 5b 66 01 00       	call   c001f3f0 <fabs>
c0008d95:	83 c4 10             	add    esp,0x10
c0008d98:	dc 1d b8 0b 02 c0    	fcomp  QWORD PTR ds:0xc0020bb8
c0008d9e:	df e0                	fnstsw ax
c0008da0:	9e                   	sahf   
c0008da1:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0008da5:	76 12                	jbe    c0008db9 <linear_vari_process+0x104>
c0008da7:	dd 07                	fld    QWORD PTR [edi]
c0008da9:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c0008dac:	d8 e1                	fsub   st,st(1)
c0008dae:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c0008db1:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c0008db4:	de c1                	faddp  st(1),st
c0008db6:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008db9:	31 c0                	xor    eax,eax
c0008dbb:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c0008dbe:	7e 1f                	jle    c0008ddf <linear_vari_process+0x12a>
c0008dc0:	d9 44 83 1c          	fld    DWORD PTR [ebx+eax*4+0x1c]
c0008dc4:	8b 2e                	mov    ebp,DWORD PTR [esi]
c0008dc6:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0008dc9:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0008dcd:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0008dd0:	d8 e1                	fsub   st,st(1)
c0008dd2:	40                   	inc    eax
c0008dd3:	d8 ca                	fmul   st,st(2)
c0008dd5:	de c1                	faddp  st(1),st
c0008dd7:	d9 1c 8a             	fstp   DWORD PTR [edx+ecx*4]
c0008dda:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0008ddd:	eb dc                	jmp    c0008dbb <linear_vari_process+0x106>
c0008ddf:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008de3:	dc 34 24             	fdiv   QWORD PTR [esp]
c0008de6:	de c1                	faddp  st(1),st
c0008de8:	e9 5f ff ff ff       	jmp    c0008d4c <linear_vari_process+0x97>
c0008ded:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008df1:	dc 34 24             	fdiv   QWORD PTR [esp]
c0008df4:	de c1                	faddp  st(1),st
c0008df6:	83 ec 10             	sub    esp,0x10
c0008df9:	dd 14 24             	fst    QWORD PTR [esp]
c0008dfc:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0008e00:	e8 59 fe ff ff       	call   c0008c5e <fmod_one>
c0008e05:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0008e08:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0008e0c:	d8 e1                	fsub   st,st(1)
c0008e0e:	d9 c9                	fxch   st(1)
c0008e10:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0008e14:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008e17:	e8 f4 65 01 00       	call   c001f410 <lrint>
c0008e1c:	83 c4 10             	add    esp,0x10
c0008e1f:	0f af e8             	imul   ebp,eax
c0008e22:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0008e26:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c0008e29:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c0008e2c:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c0008e2f:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0008e32:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c0008e35:	0f 8d 97 00 00 00    	jge    c0008ed2 <linear_vari_process+0x21d>
c0008e3b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0008e3f:	d9 c0                	fld    st(0)
c0008e41:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c0008e44:	da 44 24 10          	fiadd  DWORD PTR [esp+0x10]
c0008e48:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0008e4c:	db 44 24 10          	fild   DWORD PTR [esp+0x10]
c0008e50:	de d9                	fcompp 
c0008e52:	df e0                	fnstsw ax
c0008e54:	9e                   	sahf   
c0008e55:	76 7b                	jbe    c0008ed2 <linear_vari_process+0x21d>
c0008e57:	85 ed                	test   ebp,ebp
c0008e59:	7e 38                	jle    c0008e93 <linear_vari_process+0x1de>
c0008e5b:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0008e5f:	83 ec 10             	sub    esp,0x10
c0008e62:	dd 07                	fld    QWORD PTR [edi]
c0008e64:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c0008e67:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008e6a:	e8 81 65 01 00       	call   c001f3f0 <fabs>
c0008e6f:	83 c4 10             	add    esp,0x10
c0008e72:	dc 1d b8 0b 02 c0    	fcomp  QWORD PTR ds:0xc0020bb8
c0008e78:	df e0                	fnstsw ax
c0008e7a:	9e                   	sahf   
c0008e7b:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0008e7f:	76 12                	jbe    c0008e93 <linear_vari_process+0x1de>
c0008e81:	dd 07                	fld    QWORD PTR [edi]
c0008e83:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c0008e86:	d8 e1                	fsub   st,st(1)
c0008e88:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c0008e8b:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c0008e8e:	de c1                	faddp  st(1),st
c0008e90:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008e93:	31 c0                	xor    eax,eax
c0008e95:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0008e98:	39 c2                	cmp    edx,eax
c0008e9a:	0f 8e 4d ff ff ff    	jle    c0008ded <linear_vari_process+0x138>
c0008ea0:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0008ea2:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0008ea5:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0008ea9:	89 e9                	mov    ecx,ebp
c0008eab:	01 c5                	add    ebp,eax
c0008ead:	29 d1                	sub    ecx,edx
c0008eaf:	89 ca                	mov    edx,ecx
c0008eb1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008eb5:	01 c2                	add    edx,eax
c0008eb7:	40                   	inc    eax
c0008eb8:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c0008ebb:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0008ebe:	d9 04 a9             	fld    DWORD PTR [ecx+ebp*4]
c0008ec1:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0008ec4:	d8 e1                	fsub   st,st(1)
c0008ec6:	d8 ca                	fmul   st,st(2)
c0008ec8:	de c1                	faddp  st(1),st
c0008eca:	d9 1c 91             	fstp   DWORD PTR [ecx+edx*4]
c0008ecd:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0008ed0:	eb c3                	jmp    c0008e95 <linear_vari_process+0x1e0>
c0008ed2:	39 d1                	cmp    ecx,edx
c0008ed4:	7d 13                	jge    c0008ee9 <linear_vari_process+0x234>
c0008ed6:	89 d0                	mov    eax,edx
c0008ed8:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0008edb:	29 c8                	sub    eax,ecx
c0008edd:	99                   	cdq    
c0008ede:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0008ee1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008ee5:	da 44 24 08          	fiadd  DWORD PTR [esp+0x8]
c0008ee9:	dd 5f 08             	fstp   QWORD PTR [edi+0x8]
c0008eec:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0008eef:	85 c0                	test   eax,eax
c0008ef1:	7f 1b                	jg     c0008f0e <linear_vari_process+0x259>
c0008ef3:	dd 04 24             	fld    QWORD PTR [esp]
c0008ef6:	dd 1f                	fstp   QWORD PTR [edi]
c0008ef8:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0008efb:	99                   	cdq    
c0008efc:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0008eff:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0008f02:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008f05:	99                   	cdq    
c0008f06:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0008f09:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0008f0c:	eb 26                	jmp    c0008f34 <linear_vari_process+0x27f>
c0008f0e:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c0008f11:	31 d2                	xor    edx,edx
c0008f13:	29 c8                	sub    eax,ecx
c0008f15:	c1 e0 02             	shl    eax,0x2
c0008f18:	39 d1                	cmp    ecx,edx
c0008f1a:	7e d7                	jle    c0008ef3 <linear_vari_process+0x23e>
c0008f1c:	8b 2e                	mov    ebp,DWORD PTR [esi]
c0008f1e:	d9 44 05 00          	fld    DWORD PTR [ebp+eax*1+0x0]
c0008f22:	83 c0 04             	add    eax,0x4
c0008f25:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c0008f29:	42                   	inc    edx
c0008f2a:	eb ec                	jmp    c0008f18 <linear_vari_process+0x263>
c0008f2c:	c7 44 24 18 16 00 00 00 	mov    DWORD PTR [esp+0x18],0x16
c0008f34:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008f38:	83 c4 2c             	add    esp,0x2c
c0008f3b:	5b                   	pop    ebx
c0008f3c:	5e                   	pop    esi
c0008f3d:	5f                   	pop    edi
c0008f3e:	5d                   	pop    ebp
c0008f3f:	c3                   	ret    

c0008f40 <linear_reset>:
c0008f40:	83 ec 0c             	sub    esp,0xc
c0008f43:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008f47:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0008f4a:	85 c0                	test   eax,eax
c0008f4c:	74 20                	je     c0008f6e <linear_reset+0x2e>
c0008f4e:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c0008f51:	83 c0 1c             	add    eax,0x1c
c0008f54:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c0008f57:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c0008f5e:	c1 e2 02             	shl    edx,0x2
c0008f61:	51                   	push   ecx
c0008f62:	52                   	push   edx
c0008f63:	6a 00                	push   0x0
c0008f65:	50                   	push   eax
c0008f66:	e8 68 77 ff ff       	call   c00006d3 <memset>
c0008f6b:	83 c4 10             	add    esp,0x10
c0008f6e:	83 c4 0c             	add    esp,0xc
c0008f71:	c3                   	ret    

c0008f72 <linear_get_name>:
c0008f72:	31 c0                	xor    eax,eax
c0008f74:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0008f79:	75 05                	jne    c0008f80 <linear_get_name+0xe>
c0008f7b:	b8 74 0b 02 c0       	mov    eax,0xc0020b74
c0008f80:	c3                   	ret    

c0008f81 <linear_get_description>:
c0008f81:	31 c0                	xor    eax,eax
c0008f83:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0008f88:	75 05                	jne    c0008f8f <linear_get_description+0xe>
c0008f8a:	b8 88 0b 02 c0       	mov    eax,0xc0020b88
c0008f8f:	c3                   	ret    

c0008f90 <linear_set_converter>:
c0008f90:	53                   	push   ebx
c0008f91:	b8 0a 00 00 00       	mov    eax,0xa
c0008f96:	83 ec 08             	sub    esp,0x8
c0008f99:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008f9d:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c0008fa2:	75 6e                	jne    c0009012 <linear_set_converter+0x82>
c0008fa4:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0008fa7:	85 c0                	test   eax,eax
c0008fa9:	74 13                	je     c0008fbe <linear_set_converter+0x2e>
c0008fab:	83 ec 0c             	sub    esp,0xc
c0008fae:	50                   	push   eax
c0008faf:	e8 92 30 00 00       	call   c000c046 <free>
c0008fb4:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0008fbb:	83 c4 10             	add    esp,0x10
c0008fbe:	50                   	push   eax
c0008fbf:	50                   	push   eax
c0008fc0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008fc3:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0008fca:	50                   	push   eax
c0008fcb:	6a 01                	push   0x1
c0008fcd:	e8 94 30 00 00       	call   c000c066 <calloc>
c0008fd2:	83 c4 10             	add    esp,0x10
c0008fd5:	89 c2                	mov    edx,eax
c0008fd7:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0008fda:	85 d2                	test   edx,edx
c0008fdc:	b8 01 00 00 00       	mov    eax,0x1
c0008fe1:	74 2f                	je     c0009012 <linear_set_converter+0x82>
c0008fe3:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008fe6:	83 ec 0c             	sub    esp,0xc
c0008fe9:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0008fec:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c0008ff2:	c7 43 24 b5 8c 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0008cb5
c0008ff9:	c7 43 20 b5 8c 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0008cb5
c0009000:	c7 43 28 40 8f 00 c0 	mov    DWORD PTR [ebx+0x28],0xc0008f40
c0009007:	53                   	push   ebx
c0009008:	e8 33 ff ff ff       	call   c0008f40 <linear_reset>
c000900d:	83 c4 10             	add    esp,0x10
c0009010:	31 c0                	xor    eax,eax
c0009012:	83 c4 08             	add    esp,0x8
c0009015:	5b                   	pop    ebx
c0009016:	c3                   	ret    

c0009017 <is_bad_src_ratio>:
c0009017:	83 ec 0c             	sub    esp,0xc
c000901a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000901e:	89 04 24             	mov    DWORD PTR [esp],eax
c0009021:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009025:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009029:	dd 04 24             	fld    QWORD PTR [esp]
c000902c:	dd 05 40 0b 02 c0    	fld    QWORD PTR ds:0xc0020b40
c0009032:	de d9                	fcompp 
c0009034:	df e0                	fnstsw ax
c0009036:	f6 c4 45             	test   ah,0x45
c0009039:	74 10                	je     c000904b <is_bad_src_ratio+0x34>
c000903b:	dd 04 24             	fld    QWORD PTR [esp]
c000903e:	dc 1d 48 0b 02 c0    	fcomp  QWORD PTR ds:0xc0020b48
c0009044:	df e0                	fnstsw ax
c0009046:	f6 c4 45             	test   ah,0x45
c0009049:	75 07                	jne    c0009052 <is_bad_src_ratio+0x3b>
c000904b:	b8 01 00 00 00       	mov    eax,0x1
c0009050:	eb 05                	jmp    c0009057 <is_bad_src_ratio+0x40>
c0009052:	b8 00 00 00 00       	mov    eax,0x0
c0009057:	83 c4 0c             	add    esp,0xc
c000905a:	c3                   	ret    

c000905b <int_to_fp>:
c000905b:	c1 e0 0c             	shl    eax,0xc
c000905e:	c3                   	ret    

c000905f <fp_to_int>:
c000905f:	c1 f8 0c             	sar    eax,0xc
c0009062:	c3                   	ret    

c0009063 <fp_fraction_part>:
c0009063:	25 ff 0f 00 00       	and    eax,0xfff
c0009068:	c3                   	ret    

c0009069 <fp_to_double>:
c0009069:	83 ec 0c             	sub    esp,0xc
c000906c:	e8 f2 ff ff ff       	call   c0009063 <fp_fraction_part>
c0009071:	d9 05 48 0d 02 c0    	fld    DWORD PTR ds:0xc0020d48
c0009077:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000907b:	da 4c 24 04          	fimul  DWORD PTR [esp+0x4]
c000907f:	83 c4 0c             	add    esp,0xc
c0009082:	c3                   	ret    

c0009083 <calc_output_single>:
c0009083:	55                   	push   ebp
c0009084:	57                   	push   edi
c0009085:	89 c7                	mov    edi,eax
c0009087:	56                   	push   esi
c0009088:	53                   	push   ebx
c0009089:	89 d3                	mov    ebx,edx
c000908b:	83 ec 24             	sub    esp,0x24
c000908e:	89 de                	mov    esi,ebx
c0009090:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0009093:	e8 c3 ff ff ff       	call   c000905b <int_to_fp>
c0009098:	8b 6f 30             	mov    ebp,DWORD PTR [edi+0x30]
c000909b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000909f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00090a6:	29 c8                	sub    eax,ecx
c00090a8:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00090b0:	99                   	cdq    
c00090b1:	f7 fb                	idiv   ebx
c00090b3:	8b 57 34             	mov    edx,DWORD PTR [edi+0x34]
c00090b6:	0f af f0             	imul   esi,eax
c00090b9:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00090bd:	01 ce                	add    esi,ecx
c00090bf:	29 c2                	sub    edx,eax
c00090c1:	8d 14 97             	lea    edx,[edi+edx*4]
c00090c4:	89 f0                	mov    eax,esi
c00090c6:	e8 9e ff ff ff       	call   c0009069 <fp_to_double>
c00090cb:	89 f0                	mov    eax,esi
c00090cd:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c00090d1:	e8 89 ff ff ff       	call   c000905f <fp_to_int>
c00090d6:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c00090da:	83 c2 04             	add    edx,0x4
c00090dd:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c00090e1:	d8 e1                	fsub   st,st(1)
c00090e3:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00090e7:	de c9                	fmulp  st(1),st
c00090e9:	de c1                	faddp  st(1),st
c00090eb:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c00090f1:	29 de                	sub    esi,ebx
c00090f3:	dc 04 24             	fadd   QWORD PTR [esp]
c00090f6:	dd 1c 24             	fstp   QWORD PTR [esp]
c00090f9:	79 c9                	jns    c00090c4 <calc_output_single+0x41>
c00090fb:	89 d8                	mov    eax,ebx
c00090fd:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0009101:	29 c8                	sub    eax,ecx
c0009103:	d9 ee                	fldz   
c0009105:	89 c1                	mov    ecx,eax
c0009107:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000910b:	29 c8                	sub    eax,ecx
c000910d:	99                   	cdq    
c000910e:	f7 fb                	idiv   ebx
c0009110:	89 da                	mov    edx,ebx
c0009112:	0f af d0             	imul   edx,eax
c0009115:	8d 44 06 01          	lea    eax,[esi+eax*1+0x1]
c0009119:	01 d1                	add    ecx,edx
c000911b:	8d 14 87             	lea    edx,[edi+eax*4]
c000911e:	89 c8                	mov    eax,ecx
c0009120:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009124:	e8 40 ff ff ff       	call   c0009069 <fp_to_double>
c0009129:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000912d:	89 c8                	mov    eax,ecx
c000912f:	e8 2b ff ff ff       	call   c000905f <fp_to_int>
c0009134:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0009138:	29 d9                	sub    ecx,ebx
c000913a:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c000913e:	83 ea 04             	sub    edx,0x4
c0009141:	d8 e1                	fsub   st,st(1)
c0009143:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009147:	de c9                	fmulp  st(1),st
c0009149:	de c1                	faddp  st(1),st
c000914b:	d8 8a 48 08 00 00    	fmul   DWORD PTR [edx+0x848]
c0009151:	85 c9                	test   ecx,ecx
c0009153:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0009157:	de c1                	faddp  st(1),st
c0009159:	7f c3                	jg     c000911e <calc_output_single+0x9b>
c000915b:	dd 04 24             	fld    QWORD PTR [esp]
c000915e:	83 c4 24             	add    esp,0x24
c0009161:	de c1                	faddp  st(1),st
c0009163:	5b                   	pop    ebx
c0009164:	5e                   	pop    esi
c0009165:	5f                   	pop    edi
c0009166:	5d                   	pop    ebp
c0009167:	c3                   	ret    

c0009168 <calc_output_stereo>:
c0009168:	55                   	push   ebp
c0009169:	57                   	push   edi
c000916a:	89 c7                	mov    edi,eax
c000916c:	56                   	push   esi
c000916d:	53                   	push   ebx
c000916e:	89 d3                	mov    ebx,edx
c0009170:	83 ec 44             	sub    esp,0x44
c0009173:	89 de                	mov    esi,ebx
c0009175:	dd 44 24 58          	fld    QWORD PTR [esp+0x58]
c0009179:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000917c:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0009180:	e8 d6 fe ff ff       	call   c000905b <int_to_fp>
c0009185:	8b 6f 30             	mov    ebp,DWORD PTR [edi+0x30]
c0009188:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000918c:	d9 ee                	fldz   
c000918e:	29 c8                	sub    eax,ecx
c0009190:	dd 14 24             	fst    QWORD PTR [esp]
c0009193:	99                   	cdq    
c0009194:	f7 fb                	idiv   ebx
c0009196:	8b 57 34             	mov    edx,DWORD PTR [edi+0x34]
c0009199:	0f af f0             	imul   esi,eax
c000919c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00091a0:	01 ce                	add    esi,ecx
c00091a2:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c00091a5:	0f af c2             	imul   eax,edx
c00091a8:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00091ac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00091b0:	29 c2                	sub    edx,eax
c00091b2:	8d 14 97             	lea    edx,[edi+edx*4]
c00091b5:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c00091b9:	89 f0                	mov    eax,esi
c00091bb:	e8 a9 fe ff ff       	call   c0009069 <fp_to_double>
c00091c0:	89 f0                	mov    eax,esi
c00091c2:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00091c6:	e8 94 fe ff ff       	call   c000905f <fp_to_int>
c00091cb:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c00091cf:	83 c2 08             	add    edx,0x8
c00091d2:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c00091d6:	d8 e1                	fsub   st,st(1)
c00091d8:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00091dc:	de c9                	fmulp  st(1),st
c00091de:	de c1                	faddp  st(1),st
c00091e0:	d9 c0                	fld    st(0)
c00091e2:	d8 8a 3c 08 00 00    	fmul   DWORD PTR [edx+0x83c]
c00091e8:	dc 04 24             	fadd   QWORD PTR [esp]
c00091eb:	dd 1c 24             	fstp   QWORD PTR [esp]
c00091ee:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c00091f4:	29 de                	sub    esi,ebx
c00091f6:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c00091fa:	de c1                	faddp  st(1),st
c00091fc:	79 b7                	jns    c00091b5 <calc_output_stereo+0x4d>
c00091fe:	89 d8                	mov    eax,ebx
c0009200:	d9 ee                	fldz   
c0009202:	d9 ee                	fldz   
c0009204:	29 c8                	sub    eax,ecx
c0009206:	89 c1                	mov    ecx,eax
c0009208:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000920c:	29 c8                	sub    eax,ecx
c000920e:	99                   	cdq    
c000920f:	f7 fb                	idiv   ebx
c0009211:	89 da                	mov    edx,ebx
c0009213:	0f af d0             	imul   edx,eax
c0009216:	40                   	inc    eax
c0009217:	01 d1                	add    ecx,edx
c0009219:	0f af 44 24 10       	imul   eax,DWORD PTR [esp+0x10]
c000921e:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0009222:	8d 14 87             	lea    edx,[edi+eax*4]
c0009225:	eb 04                	jmp    c000922b <calc_output_stereo+0xc3>
c0009227:	d9 ca                	fxch   st(2)
c0009229:	d9 c9                	fxch   st(1)
c000922b:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000922f:	d9 c9                	fxch   st(1)
c0009231:	89 c8                	mov    eax,ecx
c0009233:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009237:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000923b:	e8 29 fe ff ff       	call   c0009069 <fp_to_double>
c0009240:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0009244:	89 c8                	mov    eax,ecx
c0009246:	e8 14 fe ff ff       	call   c000905f <fp_to_int>
c000924b:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c000924f:	29 d9                	sub    ecx,ebx
c0009251:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009255:	83 ea 08             	sub    edx,0x8
c0009258:	d8 e1                	fsub   st,st(1)
c000925a:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000925e:	de c9                	fmulp  st(1),st
c0009260:	de c1                	faddp  st(1),st
c0009262:	d9 c0                	fld    st(0)
c0009264:	d8 8a 4c 08 00 00    	fmul   DWORD PTR [edx+0x84c]
c000926a:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000926e:	de c1                	faddp  st(1),st
c0009270:	d9 c9                	fxch   st(1)
c0009272:	d8 8a 50 08 00 00    	fmul   DWORD PTR [edx+0x850]
c0009278:	85 c9                	test   ecx,ecx
c000927a:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c000927e:	de c1                	faddp  st(1),st
c0009280:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0009284:	7f a1                	jg     c0009227 <calc_output_stereo+0xbf>
c0009286:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000928a:	dd 04 24             	fld    QWORD PTR [esp]
c000928d:	de c3                	faddp  st(3),st
c000928f:	d9 ca                	fxch   st(2)
c0009291:	dc 4c 24 20          	fmul   QWORD PTR [esp+0x20]
c0009295:	d9 18                	fstp   DWORD PTR [eax]
c0009297:	de c1                	faddp  st(1),st
c0009299:	dc 4c 24 20          	fmul   QWORD PTR [esp+0x20]
c000929d:	d9 58 04             	fstp   DWORD PTR [eax+0x4]
c00092a0:	83 c4 44             	add    esp,0x44
c00092a3:	5b                   	pop    ebx
c00092a4:	5e                   	pop    esi
c00092a5:	5f                   	pop    edi
c00092a6:	5d                   	pop    ebp
c00092a7:	c3                   	ret    

c00092a8 <calc_output_quad>:
c00092a8:	55                   	push   ebp
c00092a9:	57                   	push   edi
c00092aa:	56                   	push   esi
c00092ab:	89 c6                	mov    esi,eax
c00092ad:	53                   	push   ebx
c00092ae:	89 d3                	mov    ebx,edx
c00092b0:	83 ec 5c             	sub    esp,0x5c
c00092b3:	dd 44 24 70          	fld    QWORD PTR [esp+0x70]
c00092b7:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00092ba:	dd 1c 24             	fstp   QWORD PTR [esp]
c00092bd:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c00092c1:	e8 95 fd ff ff       	call   c000905b <int_to_fp>
c00092c6:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c00092c9:	d9 ee                	fldz   
c00092cb:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00092cf:	dd 54 24 10          	fst    QWORD PTR [esp+0x10]
c00092d3:	29 c8                	sub    eax,ecx
c00092d5:	dd 54 24 18          	fst    QWORD PTR [esp+0x18]
c00092d9:	99                   	cdq    
c00092da:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c00092de:	f7 fb                	idiv   ebx
c00092e0:	89 da                	mov    edx,ebx
c00092e2:	0f af d0             	imul   edx,eax
c00092e5:	01 ca                	add    edx,ecx
c00092e7:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00092eb:	8b 56 34             	mov    edx,DWORD PTR [esi+0x34]
c00092ee:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00092f2:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c00092f5:	0f af c2             	imul   eax,edx
c00092f8:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c00092fc:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0009300:	29 c2                	sub    edx,eax
c0009302:	8d 14 96             	lea    edx,[esi+edx*4]
c0009305:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0009309:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000930d:	e8 57 fd ff ff       	call   c0009069 <fp_to_double>
c0009312:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009316:	dd 5c 24 40          	fstp   QWORD PTR [esp+0x40]
c000931a:	e8 40 fd ff ff       	call   c000905f <fp_to_int>
c000931f:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0009323:	83 c2 10             	add    edx,0x10
c0009326:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c000932a:	d8 e1                	fsub   st,st(1)
c000932c:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c0009330:	de c9                	fmulp  st(1),st
c0009332:	de c1                	faddp  st(1),st
c0009334:	d9 c0                	fld    st(0)
c0009336:	d8 8a 34 08 00 00    	fmul   DWORD PTR [edx+0x834]
c000933c:	dc 44 24 08          	fadd   QWORD PTR [esp+0x8]
c0009340:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0009344:	d9 c0                	fld    st(0)
c0009346:	d8 8a 38 08 00 00    	fmul   DWORD PTR [edx+0x838]
c000934c:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c0009350:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009354:	d9 c0                	fld    st(0)
c0009356:	d8 8a 3c 08 00 00    	fmul   DWORD PTR [edx+0x83c]
c000935c:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c0009360:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009364:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c000936a:	29 5c 24 20          	sub    DWORD PTR [esp+0x20],ebx
c000936e:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0009372:	de c1                	faddp  st(1),st
c0009374:	79 8f                	jns    c0009305 <calc_output_quad+0x5d>
c0009376:	89 d8                	mov    eax,ebx
c0009378:	d9 ee                	fldz   
c000937a:	29 c8                	sub    eax,ecx
c000937c:	d9 ee                	fldz   
c000937e:	89 c1                	mov    ecx,eax
c0009380:	d9 ee                	fldz   
c0009382:	d9 ee                	fldz   
c0009384:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009388:	29 c8                	sub    eax,ecx
c000938a:	99                   	cdq    
c000938b:	f7 fb                	idiv   ebx
c000938d:	89 da                	mov    edx,ebx
c000938f:	0f af d0             	imul   edx,eax
c0009392:	40                   	inc    eax
c0009393:	01 d1                	add    ecx,edx
c0009395:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000939a:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c000939e:	8d 14 86             	lea    edx,[esi+eax*4]
c00093a1:	eb 0a                	jmp    c00093ad <calc_output_quad+0x105>
c00093a3:	d9 cc                	fxch   st(4)
c00093a5:	d9 ca                	fxch   st(2)
c00093a7:	d9 c9                	fxch   st(1)
c00093a9:	d9 cb                	fxch   st(3)
c00093ab:	d9 c9                	fxch   st(1)
c00093ad:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c00093b1:	d9 c9                	fxch   st(1)
c00093b3:	89 c8                	mov    eax,ecx
c00093b5:	dd 5c 24 40          	fstp   QWORD PTR [esp+0x40]
c00093b9:	d9 c9                	fxch   st(1)
c00093bb:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00093bf:	d9 c9                	fxch   st(1)
c00093c1:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c00093c5:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00093c9:	e8 9b fc ff ff       	call   c0009069 <fp_to_double>
c00093ce:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c00093d2:	89 c8                	mov    eax,ecx
c00093d4:	e8 86 fc ff ff       	call   c000905f <fp_to_int>
c00093d9:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c00093dd:	29 d9                	sub    ecx,ebx
c00093df:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c00093e3:	83 ea 10             	sub    edx,0x10
c00093e6:	d8 e1                	fsub   st,st(1)
c00093e8:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c00093ec:	de c9                	fmulp  st(1),st
c00093ee:	de c1                	faddp  st(1),st
c00093f0:	d9 c0                	fld    st(0)
c00093f2:	d8 8a 54 08 00 00    	fmul   DWORD PTR [edx+0x854]
c00093f8:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00093fc:	de c1                	faddp  st(1),st
c00093fe:	d9 c1                	fld    st(1)
c0009400:	d8 8a 58 08 00 00    	fmul   DWORD PTR [edx+0x858]
c0009406:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c000940a:	de c1                	faddp  st(1),st
c000940c:	d9 c2                	fld    st(2)
c000940e:	d8 8a 5c 08 00 00    	fmul   DWORD PTR [edx+0x85c]
c0009414:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c0009418:	de c1                	faddp  st(1),st
c000941a:	d9 cb                	fxch   st(3)
c000941c:	d8 8a 60 08 00 00    	fmul   DWORD PTR [edx+0x860]
c0009422:	85 c9                	test   ecx,ecx
c0009424:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0009428:	de c1                	faddp  st(1),st
c000942a:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000942e:	0f 8f 6f ff ff ff    	jg     c00093a3 <calc_output_quad+0xfb>
c0009434:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009438:	de c4                	faddp  st(4),st
c000943a:	d9 cb                	fxch   st(3)
c000943c:	dc 0c 24             	fmul   QWORD PTR [esp]
c000943f:	d9 1f                	fstp   DWORD PTR [edi]
c0009441:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0009445:	de c2                	faddp  st(2),st
c0009447:	d9 c9                	fxch   st(1)
c0009449:	dc 0c 24             	fmul   QWORD PTR [esp]
c000944c:	d9 5f 04             	fstp   DWORD PTR [edi+0x4]
c000944f:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0009453:	de c3                	faddp  st(3),st
c0009455:	d9 ca                	fxch   st(2)
c0009457:	dc 0c 24             	fmul   QWORD PTR [esp]
c000945a:	d9 5f 08             	fstp   DWORD PTR [edi+0x8]
c000945d:	de c1                	faddp  st(1),st
c000945f:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009462:	d9 5f 0c             	fstp   DWORD PTR [edi+0xc]
c0009465:	83 c4 5c             	add    esp,0x5c
c0009468:	5b                   	pop    ebx
c0009469:	5e                   	pop    esi
c000946a:	5f                   	pop    edi
c000946b:	5d                   	pop    ebp
c000946c:	c3                   	ret    

c000946d <calc_output_hex>:
c000946d:	55                   	push   ebp
c000946e:	57                   	push   edi
c000946f:	89 c7                	mov    edi,eax
c0009471:	56                   	push   esi
c0009472:	53                   	push   ebx
c0009473:	89 d3                	mov    ebx,edx
c0009475:	83 ec 7c             	sub    esp,0x7c
c0009478:	dd 84 24 90 00 00 00 	fld    QWORD PTR [esp+0x90]
c000947f:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0009482:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009485:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000948c:	e8 ca fb ff ff       	call   c000905b <int_to_fp>
c0009491:	8b 6f 30             	mov    ebp,DWORD PTR [edi+0x30]
c0009494:	d9 ee                	fldz   
c0009496:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000949a:	dd 54 24 10          	fst    QWORD PTR [esp+0x10]
c000949e:	29 c8                	sub    eax,ecx
c00094a0:	dd 54 24 18          	fst    QWORD PTR [esp+0x18]
c00094a4:	99                   	cdq    
c00094a5:	dd 54 24 20          	fst    QWORD PTR [esp+0x20]
c00094a9:	f7 fb                	idiv   ebx
c00094ab:	dd 54 24 28          	fst    QWORD PTR [esp+0x28]
c00094af:	89 da                	mov    edx,ebx
c00094b1:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c00094b5:	0f af d0             	imul   edx,eax
c00094b8:	01 ca                	add    edx,ecx
c00094ba:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c00094be:	8b 57 34             	mov    edx,DWORD PTR [edi+0x34]
c00094c1:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00094c5:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c00094c8:	0f af c2             	imul   eax,edx
c00094cb:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c00094cf:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00094d3:	29 c2                	sub    edx,eax
c00094d5:	8d 14 97             	lea    edx,[edi+edx*4]
c00094d8:	dd 5c 24 58          	fstp   QWORD PTR [esp+0x58]
c00094dc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00094e0:	e8 84 fb ff ff       	call   c0009069 <fp_to_double>
c00094e5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00094e9:	dd 5c 24 50          	fstp   QWORD PTR [esp+0x50]
c00094ed:	e8 6d fb ff ff       	call   c000905f <fp_to_int>
c00094f2:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c00094f6:	83 c2 18             	add    edx,0x18
c00094f9:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c00094fd:	d8 e1                	fsub   st,st(1)
c00094ff:	dd 44 24 50          	fld    QWORD PTR [esp+0x50]
c0009503:	de c9                	fmulp  st(1),st
c0009505:	de c1                	faddp  st(1),st
c0009507:	d9 c0                	fld    st(0)
c0009509:	d8 8a 2c 08 00 00    	fmul   DWORD PTR [edx+0x82c]
c000950f:	dc 44 24 08          	fadd   QWORD PTR [esp+0x8]
c0009513:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0009517:	d9 c0                	fld    st(0)
c0009519:	d8 8a 30 08 00 00    	fmul   DWORD PTR [edx+0x830]
c000951f:	dc 44 24 28          	fadd   QWORD PTR [esp+0x28]
c0009523:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0009527:	d9 c0                	fld    st(0)
c0009529:	d8 8a 34 08 00 00    	fmul   DWORD PTR [edx+0x834]
c000952f:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c0009533:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0009537:	d9 c0                	fld    st(0)
c0009539:	d8 8a 38 08 00 00    	fmul   DWORD PTR [edx+0x838]
c000953f:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c0009543:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009547:	d9 c0                	fld    st(0)
c0009549:	d8 8a 3c 08 00 00    	fmul   DWORD PTR [edx+0x83c]
c000954f:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c0009553:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009557:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c000955d:	29 5c 24 30          	sub    DWORD PTR [esp+0x30],ebx
c0009561:	dd 44 24 58          	fld    QWORD PTR [esp+0x58]
c0009565:	de c1                	faddp  st(1),st
c0009567:	0f 89 6b ff ff ff    	jns    c00094d8 <calc_output_hex+0x6b>
c000956d:	d9 ee                	fldz   
c000956f:	d9 ee                	fldz   
c0009571:	89 d8                	mov    eax,ebx
c0009573:	29 c8                	sub    eax,ecx
c0009575:	dd 54 24 30          	fst    QWORD PTR [esp+0x30]
c0009579:	89 c1                	mov    ecx,eax
c000957b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000957f:	29 c8                	sub    eax,ecx
c0009581:	99                   	cdq    
c0009582:	f7 fb                	idiv   ebx
c0009584:	89 da                	mov    edx,ebx
c0009586:	0f af d0             	imul   edx,eax
c0009589:	40                   	inc    eax
c000958a:	01 d1                	add    ecx,edx
c000958c:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0009591:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c0009595:	dd 54 24 38          	fst    QWORD PTR [esp+0x38]
c0009599:	8d 14 87             	lea    edx,[edi+eax*4]
c000959c:	d9 ee                	fldz   
c000959e:	d9 ee                	fldz   
c00095a0:	d9 ca                	fxch   st(2)
c00095a2:	eb 08                	jmp    c00095ac <calc_output_hex+0x13f>
c00095a4:	d9 cc                	fxch   st(4)
c00095a6:	d9 cb                	fxch   st(3)
c00095a8:	d9 ca                	fxch   st(2)
c00095aa:	d9 c9                	fxch   st(1)
c00095ac:	dd 5c 24 68          	fstp   QWORD PTR [esp+0x68]
c00095b0:	89 c8                	mov    eax,ecx
c00095b2:	dd 5c 24 60          	fstp   QWORD PTR [esp+0x60]
c00095b6:	d9 ca                	fxch   st(2)
c00095b8:	dd 5c 24 58          	fstp   QWORD PTR [esp+0x58]
c00095bc:	dd 5c 24 50          	fstp   QWORD PTR [esp+0x50]
c00095c0:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c00095c4:	e8 a0 fa ff ff       	call   c0009069 <fp_to_double>
c00095c9:	dd 5c 24 40          	fstp   QWORD PTR [esp+0x40]
c00095cd:	89 c8                	mov    eax,ecx
c00095cf:	e8 8b fa ff ff       	call   c000905f <fp_to_int>
c00095d4:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c00095d8:	29 d9                	sub    ecx,ebx
c00095da:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c00095de:	83 ea 18             	sub    edx,0x18
c00095e1:	d8 e1                	fsub   st,st(1)
c00095e3:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c00095e7:	de c9                	fmulp  st(1),st
c00095e9:	de c1                	faddp  st(1),st
c00095eb:	d9 c0                	fld    st(0)
c00095ed:	d8 8a 5c 08 00 00    	fmul   DWORD PTR [edx+0x85c]
c00095f3:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c00095f7:	de c1                	faddp  st(1),st
c00095f9:	d9 c1                	fld    st(1)
c00095fb:	d8 8a 60 08 00 00    	fmul   DWORD PTR [edx+0x860]
c0009601:	dd 44 24 60          	fld    QWORD PTR [esp+0x60]
c0009605:	de c1                	faddp  st(1),st
c0009607:	d9 c2                	fld    st(2)
c0009609:	d8 8a 64 08 00 00    	fmul   DWORD PTR [edx+0x864]
c000960f:	dc 44 24 38          	fadd   QWORD PTR [esp+0x38]
c0009613:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0009617:	d9 c2                	fld    st(2)
c0009619:	d8 8a 68 08 00 00    	fmul   DWORD PTR [edx+0x868]
c000961f:	dc 44 24 30          	fadd   QWORD PTR [esp+0x30]
c0009623:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009627:	d9 c2                	fld    st(2)
c0009629:	d8 8a 6c 08 00 00    	fmul   DWORD PTR [edx+0x86c]
c000962f:	dd 44 24 50          	fld    QWORD PTR [esp+0x50]
c0009633:	de c1                	faddp  st(1),st
c0009635:	d9 cb                	fxch   st(3)
c0009637:	d8 8a 70 08 00 00    	fmul   DWORD PTR [edx+0x870]
c000963d:	85 c9                	test   ecx,ecx
c000963f:	dd 44 24 68          	fld    QWORD PTR [esp+0x68]
c0009643:	de c1                	faddp  st(1),st
c0009645:	dd 44 24 58          	fld    QWORD PTR [esp+0x58]
c0009649:	0f 8f 55 ff ff ff    	jg     c00095a4 <calc_output_hex+0x137>
c000964f:	d9 cb                	fxch   st(3)
c0009651:	dc 44 24 08          	fadd   QWORD PTR [esp+0x8]
c0009655:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009658:	d9 1e                	fstp   DWORD PTR [esi]
c000965a:	d9 c9                	fxch   st(1)
c000965c:	dc 44 24 28          	fadd   QWORD PTR [esp+0x28]
c0009660:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009663:	d9 5e 04             	fstp   DWORD PTR [esi+0x4]
c0009666:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000966a:	dc 44 24 38          	fadd   QWORD PTR [esp+0x38]
c000966e:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009671:	d9 5e 08             	fstp   DWORD PTR [esi+0x8]
c0009674:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0009678:	dc 44 24 30          	fadd   QWORD PTR [esp+0x30]
c000967c:	dc 0c 24             	fmul   QWORD PTR [esp]
c000967f:	d9 5e 0c             	fstp   DWORD PTR [esi+0xc]
c0009682:	d9 ca                	fxch   st(2)
c0009684:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c0009688:	dc 0c 24             	fmul   QWORD PTR [esp]
c000968b:	d9 5e 10             	fstp   DWORD PTR [esi+0x10]
c000968e:	de c1                	faddp  st(1),st
c0009690:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009693:	d9 5e 14             	fstp   DWORD PTR [esi+0x14]
c0009696:	83 c4 7c             	add    esp,0x7c
c0009699:	5b                   	pop    ebx
c000969a:	5e                   	pop    esi
c000969b:	5f                   	pop    edi
c000969c:	5d                   	pop    ebp
c000969d:	c3                   	ret    

c000969e <sinc_reset>:
c000969e:	56                   	push   esi
c000969f:	53                   	push   ebx
c00096a0:	51                   	push   ecx
c00096a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00096a5:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c00096a8:	85 db                	test   ebx,ebx
c00096aa:	74 51                	je     c00096fd <sinc_reset+0x5f>
c00096ac:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c00096b3:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00096ba:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c00096c1:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c00096c7:	d9 ee                	fldz   
c00096c9:	dd 53 28             	fst    QWORD PTR [ebx+0x28]
c00096cc:	dd 5b 20             	fstp   QWORD PTR [ebx+0x20]
c00096cf:	52                   	push   edx
c00096d0:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00096d3:	c1 e0 02             	shl    eax,0x2
c00096d6:	50                   	push   eax
c00096d7:	6a 00                	push   0x0
c00096d9:	56                   	push   esi
c00096da:	e8 f4 6f ff ff       	call   c00006d3 <memset>
c00096df:	83 c4 0c             	add    esp,0xc
c00096e2:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00096e5:	c1 e0 02             	shl    eax,0x2
c00096e8:	50                   	push   eax
c00096e9:	68 aa 00 00 00       	push   0xaa
c00096ee:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00096f1:	8d 04 86             	lea    eax,[esi+eax*4]
c00096f4:	50                   	push   eax
c00096f5:	e8 d9 6f ff ff       	call   c00006d3 <memset>
c00096fa:	83 c4 10             	add    esp,0x10
c00096fd:	58                   	pop    eax
c00096fe:	5b                   	pop    ebx
c00096ff:	5e                   	pop    esi
c0009700:	c3                   	ret    

c0009701 <calc_output_multi>:
c0009701:	55                   	push   ebp
c0009702:	57                   	push   edi
c0009703:	8d 78 44             	lea    edi,[eax+0x44]
c0009706:	56                   	push   esi
c0009707:	89 c6                	mov    esi,eax
c0009709:	53                   	push   ebx
c000970a:	8d 80 44 04 00 00    	lea    eax,[eax+0x444]
c0009710:	83 ec 4c             	sub    esp,0x4c
c0009713:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c0009717:	dd 44 24 64          	fld    QWORD PTR [esp+0x64]
c000971b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000971f:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0009723:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0009727:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000972b:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000972e:	e8 28 f9 ff ff       	call   c000905b <int_to_fp>
c0009733:	8b 6e 34             	mov    ebp,DWORD PTR [esi+0x34]
c0009736:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000973a:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c000973e:	99                   	cdq    
c000973f:	f7 7c 24 10          	idiv   DWORD PTR [esp+0x10]
c0009743:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009747:	0f af d0             	imul   edx,eax
c000974a:	0f af c3             	imul   eax,ebx
c000974d:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009751:	29 c5                	sub    ebp,eax
c0009753:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009757:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c000975b:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c0009762:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009766:	52                   	push   edx
c0009767:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000976b:	6a 00                	push   0x0
c000976d:	57                   	push   edi
c000976e:	e8 60 6f ff ff       	call   c00006d3 <memset>
c0009773:	83 c4 10             	add    esp,0x10
c0009776:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c000977a:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000977e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009782:	e8 e2 f8 ff ff       	call   c0009069 <fp_to_double>
c0009787:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000978b:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000978f:	e8 cb f8 ff ff       	call   c000905f <fp_to_int>
c0009794:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0009797:	89 d9                	mov    ecx,ebx
c0009799:	d9 04 82             	fld    DWORD PTR [edx+eax*4]
c000979c:	d9 44 82 04          	fld    DWORD PTR [edx+eax*4+0x4]
c00097a0:	d8 e1                	fsub   st,st(1)
c00097a2:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00097a6:	de c9                	fmulp  st(1),st
c00097a8:	de c1                	faddp  st(1),st
c00097aa:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c00097ae:	89 c8                	mov    eax,ecx
c00097b0:	bd 08 00 00 00       	mov    ebp,0x8
c00097b5:	99                   	cdq    
c00097b6:	f7 fd                	idiv   ebp
c00097b8:	4a                   	dec    edx
c00097b9:	83 fa 06             	cmp    edx,0x6
c00097bc:	77 07                	ja     c00097c5 <calc_output_multi+0xc4>
c00097be:	ff 24 95 c0 0b 02 c0 	jmp    DWORD PTR [edx*4-0x3ffdf440]
c00097c5:	49                   	dec    ecx
c00097c6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00097ca:	8d 04 cf             	lea    eax,[edi+ecx*8]
c00097cd:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00097d4:	d9 c1                	fld    st(1)
c00097d6:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00097da:	dc 00                	fadd   QWORD PTR [eax]
c00097dc:	dd 18                	fstp   QWORD PTR [eax]
c00097de:	49                   	dec    ecx
c00097df:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00097e3:	8d 04 cf             	lea    eax,[edi+ecx*8]
c00097e6:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00097ed:	d9 c1                	fld    st(1)
c00097ef:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00097f3:	dc 00                	fadd   QWORD PTR [eax]
c00097f5:	dd 18                	fstp   QWORD PTR [eax]
c00097f7:	49                   	dec    ecx
c00097f8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00097fc:	8d 04 cf             	lea    eax,[edi+ecx*8]
c00097ff:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009806:	d9 c1                	fld    st(1)
c0009808:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c000980c:	dc 00                	fadd   QWORD PTR [eax]
c000980e:	dd 18                	fstp   QWORD PTR [eax]
c0009810:	49                   	dec    ecx
c0009811:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009815:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009818:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000981f:	d9 c1                	fld    st(1)
c0009821:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009825:	dc 00                	fadd   QWORD PTR [eax]
c0009827:	dd 18                	fstp   QWORD PTR [eax]
c0009829:	49                   	dec    ecx
c000982a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000982e:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009831:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009838:	d9 c1                	fld    st(1)
c000983a:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c000983e:	dc 00                	fadd   QWORD PTR [eax]
c0009840:	dd 18                	fstp   QWORD PTR [eax]
c0009842:	49                   	dec    ecx
c0009843:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009847:	8d 04 cf             	lea    eax,[edi+ecx*8]
c000984a:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009851:	d9 c1                	fld    st(1)
c0009853:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009857:	dc 00                	fadd   QWORD PTR [eax]
c0009859:	dd 18                	fstp   QWORD PTR [eax]
c000985b:	49                   	dec    ecx
c000985c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009860:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009863:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000986a:	d9 c1                	fld    st(1)
c000986c:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009870:	dc 00                	fadd   QWORD PTR [eax]
c0009872:	dd 18                	fstp   QWORD PTR [eax]
c0009874:	49                   	dec    ecx
c0009875:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009879:	8d 04 cf             	lea    eax,[edi+ecx*8]
c000987c:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009883:	d9 c1                	fld    st(1)
c0009885:	85 c9                	test   ecx,ecx
c0009887:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c000988b:	dc 00                	fadd   QWORD PTR [eax]
c000988d:	dd 18                	fstp   QWORD PTR [eax]
c000988f:	0f 8f 19 ff ff ff    	jg     c00097ae <calc_output_multi+0xad>
c0009895:	dd d9                	fstp   st(1)
c0009897:	01 5c 24 0c          	add    DWORD PTR [esp+0xc],ebx
c000989b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000989f:	29 54 24 14          	sub    DWORD PTR [esp+0x14],edx
c00098a3:	0f 89 d1 fe ff ff    	jns    c000977a <calc_output_multi+0x79>
c00098a9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00098ad:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00098b1:	89 d1                	mov    ecx,edx
c00098b3:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00098b7:	29 c8                	sub    eax,ecx
c00098b9:	99                   	cdq    
c00098ba:	f7 7c 24 10          	idiv   DWORD PTR [esp+0x10]
c00098be:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00098c2:	0f af d0             	imul   edx,eax
c00098c5:	40                   	inc    eax
c00098c6:	01 d1                	add    ecx,edx
c00098c8:	0f af c3             	imul   eax,ebx
c00098cb:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00098cf:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c00098d2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00098d6:	50                   	push   eax
c00098d7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00098db:	6a 00                	push   0x0
c00098dd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098e1:	e8 ed 6d ff ff       	call   c00006d3 <memset>
c00098e6:	83 c4 10             	add    esp,0x10
c00098e9:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00098ed:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c00098f1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00098f5:	e8 6f f7 ff ff       	call   c0009069 <fp_to_double>
c00098fa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00098fe:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009902:	e8 58 f7 ff ff       	call   c000905f <fp_to_int>
c0009907:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000990a:	89 d9                	mov    ecx,ebx
c000990c:	d9 04 82             	fld    DWORD PTR [edx+eax*4]
c000990f:	d9 44 82 04          	fld    DWORD PTR [edx+eax*4+0x4]
c0009913:	d8 e1                	fsub   st,st(1)
c0009915:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0009919:	de c9                	fmulp  st(1),st
c000991b:	de c1                	faddp  st(1),st
c000991d:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0009921:	89 c8                	mov    eax,ecx
c0009923:	bd 08 00 00 00       	mov    ebp,0x8
c0009928:	99                   	cdq    
c0009929:	f7 fd                	idiv   ebp
c000992b:	4a                   	dec    edx
c000992c:	83 fa 06             	cmp    edx,0x6
c000992f:	77 07                	ja     c0009938 <calc_output_multi+0x237>
c0009931:	ff 24 95 dc 0b 02 c0 	jmp    DWORD PTR [edx*4-0x3ffdf424]
c0009938:	49                   	dec    ecx
c0009939:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000993d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009941:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009944:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000994b:	d9 c1                	fld    st(1)
c000994d:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009951:	dc 00                	fadd   QWORD PTR [eax]
c0009953:	dd 18                	fstp   QWORD PTR [eax]
c0009955:	49                   	dec    ecx
c0009956:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000995a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000995e:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009961:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009968:	d9 c1                	fld    st(1)
c000996a:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c000996e:	dc 00                	fadd   QWORD PTR [eax]
c0009970:	dd 18                	fstp   QWORD PTR [eax]
c0009972:	49                   	dec    ecx
c0009973:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009977:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000997b:	8d 04 c8             	lea    eax,[eax+ecx*8]
c000997e:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009985:	d9 c1                	fld    st(1)
c0009987:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c000998b:	dc 00                	fadd   QWORD PTR [eax]
c000998d:	dd 18                	fstp   QWORD PTR [eax]
c000998f:	49                   	dec    ecx
c0009990:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009994:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009998:	8d 04 c8             	lea    eax,[eax+ecx*8]
c000999b:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00099a2:	d9 c1                	fld    st(1)
c00099a4:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00099a8:	dc 00                	fadd   QWORD PTR [eax]
c00099aa:	dd 18                	fstp   QWORD PTR [eax]
c00099ac:	49                   	dec    ecx
c00099ad:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00099b1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00099b5:	8d 04 c8             	lea    eax,[eax+ecx*8]
c00099b8:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00099bf:	d9 c1                	fld    st(1)
c00099c1:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00099c5:	dc 00                	fadd   QWORD PTR [eax]
c00099c7:	dd 18                	fstp   QWORD PTR [eax]
c00099c9:	49                   	dec    ecx
c00099ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00099ce:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00099d2:	8d 04 c8             	lea    eax,[eax+ecx*8]
c00099d5:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00099dc:	d9 c1                	fld    st(1)
c00099de:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00099e2:	dc 00                	fadd   QWORD PTR [eax]
c00099e4:	dd 18                	fstp   QWORD PTR [eax]
c00099e6:	49                   	dec    ecx
c00099e7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00099eb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00099ef:	8d 04 c8             	lea    eax,[eax+ecx*8]
c00099f2:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00099f9:	d9 c1                	fld    st(1)
c00099fb:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00099ff:	dc 00                	fadd   QWORD PTR [eax]
c0009a01:	dd 18                	fstp   QWORD PTR [eax]
c0009a03:	49                   	dec    ecx
c0009a04:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009a08:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009a0c:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009a0f:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009a16:	d9 c1                	fld    st(1)
c0009a18:	85 c9                	test   ecx,ecx
c0009a1a:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009a1e:	dc 00                	fadd   QWORD PTR [eax]
c0009a20:	dd 18                	fstp   QWORD PTR [eax]
c0009a22:	0f 8f f9 fe ff ff    	jg     c0009921 <calc_output_multi+0x220>
c0009a28:	dd d9                	fstp   st(1)
c0009a2a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009a2e:	29 5c 24 0c          	sub    DWORD PTR [esp+0xc],ebx
c0009a32:	29 54 24 14          	sub    DWORD PTR [esp+0x14],edx
c0009a36:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0009a3b:	0f 8f ac fe ff ff    	jg     c00098ed <calc_output_multi+0x1ec>
c0009a41:	b9 08 00 00 00       	mov    ecx,0x8
c0009a46:	89 d8                	mov    eax,ebx
c0009a48:	99                   	cdq    
c0009a49:	f7 f9                	idiv   ecx
c0009a4b:	4a                   	dec    edx
c0009a4c:	83 fa 06             	cmp    edx,0x6
c0009a4f:	77 07                	ja     c0009a58 <calc_output_multi+0x357>
c0009a51:	ff 24 95 f8 0b 02 c0 	jmp    DWORD PTR [edx*4-0x3ffdf408]
c0009a58:	4b                   	dec    ebx
c0009a59:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009a5d:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009a60:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009a63:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009a67:	d8 c9                	fmul   st,st(1)
c0009a69:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009a6c:	4b                   	dec    ebx
c0009a6d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009a71:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009a74:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009a77:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009a7b:	d8 c9                	fmul   st,st(1)
c0009a7d:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009a80:	4b                   	dec    ebx
c0009a81:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009a85:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009a88:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009a8b:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009a8f:	d8 c9                	fmul   st,st(1)
c0009a91:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009a94:	4b                   	dec    ebx
c0009a95:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009a99:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009a9c:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009a9f:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009aa3:	d8 c9                	fmul   st,st(1)
c0009aa5:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009aa8:	4b                   	dec    ebx
c0009aa9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009aad:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009ab0:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009ab3:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009ab7:	d8 c9                	fmul   st,st(1)
c0009ab9:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009abc:	4b                   	dec    ebx
c0009abd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009ac1:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009ac4:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009ac7:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009acb:	d8 c9                	fmul   st,st(1)
c0009acd:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009ad0:	4b                   	dec    ebx
c0009ad1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009ad5:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009ad8:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009adb:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009adf:	d8 c9                	fmul   st,st(1)
c0009ae1:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009ae4:	4b                   	dec    ebx
c0009ae5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009ae9:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009aec:	85 db                	test   ebx,ebx
c0009aee:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009af1:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009af5:	d8 c9                	fmul   st,st(1)
c0009af7:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009afa:	0f 8f 46 ff ff ff    	jg     c0009a46 <calc_output_multi+0x345>
c0009b00:	dd d8                	fstp   st(0)
c0009b02:	83 c4 4c             	add    esp,0x4c
c0009b05:	5b                   	pop    ebx
c0009b06:	5e                   	pop    esi
c0009b07:	5f                   	pop    edi
c0009b08:	5d                   	pop    ebp
c0009b09:	c3                   	ret    

c0009b0a <double_to_fp>:
c0009b0a:	d9 05 4c 0d 02 c0    	fld    DWORD PTR ds:0xc0020d4c
c0009b10:	dc 4c 24 04          	fmul   QWORD PTR [esp+0x4]
c0009b14:	dd 5c 24 04          	fstp   QWORD PTR [esp+0x4]
c0009b18:	e9 f3 58 01 00       	jmp    c001f410 <lrint>

c0009b1d <fmod_one>:
c0009b1d:	83 ec 2c             	sub    esp,0x2c
c0009b20:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009b24:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009b28:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009b2c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009b30:	83 ec 08             	sub    esp,0x8
c0009b33:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b37:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b3b:	e8 d0 58 01 00       	call   c001f410 <lrint>
c0009b40:	83 c4 10             	add    esp,0x10
c0009b43:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009b47:	db 44 24 04          	fild   DWORD PTR [esp+0x4]
c0009b4b:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009b4f:	de e1                	fsubrp st(1),st
c0009b51:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009b55:	d9 ee                	fldz   
c0009b57:	dc 5c 24 18          	fcomp  QWORD PTR [esp+0x18]
c0009b5b:	df e0                	fnstsw ax
c0009b5d:	f6 c4 45             	test   ah,0x45
c0009b60:	75 0a                	jne    c0009b6c <fmod_one+0x4f>
c0009b62:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0009b66:	d9 e8                	fld1   
c0009b68:	de c1                	faddp  st(1),st
c0009b6a:	eb 04                	jmp    c0009b70 <fmod_one+0x53>
c0009b6c:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0009b70:	83 c4 2c             	add    esp,0x2c
c0009b73:	c3                   	ret    

c0009b74 <prepare_data>:
c0009b74:	55                   	push   ebp
c0009b75:	57                   	push   edi
c0009b76:	56                   	push   esi
c0009b77:	53                   	push   ebx
c0009b78:	83 ec 1c             	sub    esp,0x1c
c0009b7b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0009b7f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009b83:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c0009b87:	0f 89 57 01 00 00    	jns    c0009ce4 <prepare_data+0x170>
c0009b8d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0009b90:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0009b93:	85 d2                	test   edx,edx
c0009b95:	75 0d                	jne    c0009ba4 <prepare_data+0x30>
c0009b97:	8d 14 36             	lea    edx,[esi+esi*1]
c0009b9a:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0009b9d:	29 d0                	sub    eax,edx
c0009b9f:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c0009ba2:	eb 44                	jmp    c0009be8 <prepare_data+0x74>
c0009ba4:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c0009ba7:	8d 0c 37             	lea    ecx,[edi+esi*1]
c0009baa:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c0009bad:	39 c1                	cmp    ecx,eax
c0009baf:	7d 04                	jge    c0009bb5 <prepare_data+0x41>
c0009bb1:	29 d0                	sub    eax,edx
c0009bb3:	eb 2d                	jmp    c0009be2 <prepare_data+0x6e>
c0009bb5:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c0009bbb:	29 d7                	sub    edi,edx
c0009bbd:	01 f7                	add    edi,esi
c0009bbf:	51                   	push   ecx
c0009bc0:	29 f2                	sub    edx,esi
c0009bc2:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c0009bc9:	8d 14 90             	lea    edx,[eax+edx*4]
c0009bcc:	51                   	push   ecx
c0009bcd:	52                   	push   edx
c0009bce:	50                   	push   eax
c0009bcf:	e8 91 6a ff ff       	call   c0000665 <memmove>
c0009bd4:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0009bd7:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c0009bda:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c0009bdd:	29 f0                	sub    eax,esi
c0009bdf:	83 c4 10             	add    esp,0x10
c0009be2:	29 f0                	sub    eax,esi
c0009be4:	79 02                	jns    c0009be8 <prepare_data+0x74>
c0009be6:	31 c0                	xor    eax,eax
c0009be8:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0009beb:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0009bee:	29 ef                	sub    edi,ebp
c0009bf0:	39 c7                	cmp    edi,eax
c0009bf2:	7e 02                	jle    c0009bf6 <prepare_data+0x82>
c0009bf4:	89 c7                	mov    edi,eax
c0009bf6:	89 f8                	mov    eax,edi
c0009bf8:	99                   	cdq    
c0009bf9:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009bfc:	b8 15 00 00 00       	mov    eax,0x15
c0009c01:	29 d7                	sub    edi,edx
c0009c03:	0f 88 dd 00 00 00    	js     c0009ce6 <prepare_data+0x172>
c0009c09:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0009c0c:	8d 14 39             	lea    edx,[ecx+edi*1]
c0009c0f:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c0009c12:	0f 8f ce 00 00 00    	jg     c0009ce6 <prepare_data+0x172>
c0009c18:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c0009c1e:	50                   	push   eax
c0009c1f:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c0009c26:	50                   	push   eax
c0009c27:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009c2b:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c2d:	8d 04 a8             	lea    eax,[eax+ebp*4]
c0009c30:	50                   	push   eax
c0009c31:	8d 04 8a             	lea    eax,[edx+ecx*4]
c0009c34:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0009c38:	50                   	push   eax
c0009c39:	e8 5f 6a ff ff       	call   c000069d <memcpy>
c0009c3e:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0009c41:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c0009c44:	01 fd                	add    ebp,edi
c0009c46:	01 f9                	add    ecx,edi
c0009c48:	83 c4 10             	add    esp,0x10
c0009c4b:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c0009c4e:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c0009c51:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c0009c54:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009c58:	0f 85 86 00 00 00    	jne    c0009ce4 <prepare_data+0x170>
c0009c5e:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0009c61:	89 e8                	mov    eax,ebp
c0009c63:	8d 3c 36             	lea    edi,[esi+esi*1]
c0009c66:	29 c8                	sub    eax,ecx
c0009c68:	39 f8                	cmp    eax,edi
c0009c6a:	7d 78                	jge    c0009ce4 <prepare_data+0x170>
c0009c6c:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0009c70:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c0009c74:	74 6e                	je     c0009ce4 <prepare_data+0x170>
c0009c76:	8d 7e 04             	lea    edi,[esi+0x4]
c0009c79:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0009c7d:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c0009c80:	29 ef                	sub    edi,ebp
c0009c82:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0009c86:	7c 29                	jl     c0009cb1 <prepare_data+0x13d>
c0009c88:	8d 3c 30             	lea    edi,[eax+esi*1]
c0009c8b:	29 f1                	sub    ecx,esi
c0009c8d:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c0009c94:	55                   	push   ebp
c0009c95:	50                   	push   eax
c0009c96:	8d 04 8a             	lea    eax,[edx+ecx*4]
c0009c99:	50                   	push   eax
c0009c9a:	52                   	push   edx
c0009c9b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009c9f:	e8 c1 69 ff ff       	call   c0000665 <memmove>
c0009ca4:	83 c4 10             	add    esp,0x10
c0009ca7:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c0009caa:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c0009cad:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009cb1:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009cb4:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009cb7:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c0009cba:	83 c6 05             	add    esi,0x5
c0009cbd:	78 07                	js     c0009cc6 <prepare_data+0x152>
c0009cbf:	8d 3c 30             	lea    edi,[eax+esi*1]
c0009cc2:	39 cf                	cmp    edi,ecx
c0009cc4:	7e 04                	jle    c0009cca <prepare_data+0x156>
c0009cc6:	89 ce                	mov    esi,ecx
c0009cc8:	29 c6                	sub    esi,eax
c0009cca:	8d 04 82             	lea    eax,[edx+eax*4]
c0009ccd:	51                   	push   ecx
c0009cce:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c0009cd5:	51                   	push   ecx
c0009cd6:	6a 00                	push   0x0
c0009cd8:	50                   	push   eax
c0009cd9:	e8 f5 69 ff ff       	call   c00006d3 <memset>
c0009cde:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c0009ce1:	83 c4 10             	add    esp,0x10
c0009ce4:	31 c0                	xor    eax,eax
c0009ce6:	83 c4 1c             	add    esp,0x1c
c0009ce9:	5b                   	pop    ebx
c0009cea:	5e                   	pop    esi
c0009ceb:	5f                   	pop    edi
c0009cec:	5d                   	pop    ebp
c0009ced:	c3                   	ret    

c0009cee <sinc_multichan_vari_process>:
c0009cee:	55                   	push   ebp
c0009cef:	b8 05 00 00 00       	mov    eax,0x5
c0009cf4:	57                   	push   edi
c0009cf5:	56                   	push   esi
c0009cf6:	53                   	push   ebx
c0009cf7:	83 ec 3c             	sub    esp,0x3c
c0009cfa:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0009cfe:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0009d02:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c0009d05:	85 db                	test   ebx,ebx
c0009d07:	0f 84 5d 02 00 00    	je     c0009f6a <sinc_multichan_vari_process+0x27c>
c0009d0d:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0009d10:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009d13:	0f af d0             	imul   edx,eax
c0009d16:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0009d19:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c0009d1d:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0009d24:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0009d27:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0009d2e:	dd 06                	fld    QWORD PTR [esi]
c0009d30:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c0009d34:	55                   	push   ebp
c0009d35:	55                   	push   ebp
c0009d36:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009d39:	e8 d9 f2 ff ff       	call   c0009017 <is_bad_src_ratio>
c0009d3e:	89 c2                	mov    edx,eax
c0009d40:	58                   	pop    eax
c0009d41:	85 d2                	test   edx,edx
c0009d43:	59                   	pop    ecx
c0009d44:	b8 16 00 00 00       	mov    eax,0x16
c0009d49:	0f 85 1b 02 00 00    	jne    c0009f6a <sinc_multichan_vari_process+0x27c>
c0009d4f:	d9 05 50 0d 02 c0    	fld    DWORD PTR ds:0xc0020d50
c0009d55:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c0009d58:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c0009d5b:	dd 06                	fld    QWORD PTR [esi]
c0009d5d:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c0009d60:	d8 d1                	fcom   st(1)
c0009d62:	df e0                	fnstsw ax
c0009d64:	9e                   	sahf   
c0009d65:	76 0f                	jbe    c0009d76 <sinc_multichan_vari_process+0x88>
c0009d67:	dd d8                	fstp   st(0)
c0009d69:	d9 e8                	fld1   
c0009d6b:	d8 d9                	fcomp  st(1)
c0009d6d:	df e0                	fnstsw ax
c0009d6f:	9e                   	sahf   
c0009d70:	77 0f                	ja     c0009d81 <sinc_multichan_vari_process+0x93>
c0009d72:	dd d8                	fstp   st(0)
c0009d74:	eb 11                	jmp    c0009d87 <sinc_multichan_vari_process+0x99>
c0009d76:	dd d9                	fstp   st(1)
c0009d78:	d9 e8                	fld1   
c0009d7a:	d8 d9                	fcomp  st(1)
c0009d7c:	df e0                	fnstsw ax
c0009d7e:	9e                   	sahf   
c0009d7f:	76 04                	jbe    c0009d85 <sinc_multichan_vari_process+0x97>
c0009d81:	de f9                	fdivp  st(1),st
c0009d83:	eb 02                	jmp    c0009d87 <sinc_multichan_vari_process+0x99>
c0009d85:	dd d8                	fstp   st(0)
c0009d87:	83 ec 10             	sub    esp,0x10
c0009d8a:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009d8d:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009d90:	e8 7b 56 01 00       	call   c001f410 <lrint>
c0009d95:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c0009d98:	40                   	inc    eax
c0009d99:	dd 14 24             	fst    QWORD PTR [esp]
c0009d9c:	0f af c5             	imul   eax,ebp
c0009d9f:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009da3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009da7:	e8 71 fd ff ff       	call   c0009b1d <fmod_one>
c0009dac:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0009daf:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009db3:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009db6:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0009dba:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009dbe:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c0009dc2:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009dc5:	e8 46 56 01 00       	call   c001f410 <lrint>
c0009dca:	0f af e8             	imul   ebp,eax
c0009dcd:	d9 e8                	fld1   
c0009dcf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009dd3:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c0009dd7:	01 e8                	add    eax,ebp
c0009dd9:	dc 05 b8 0b 02 c0    	fadd   QWORD PTR ds:0xc0020bb8
c0009ddf:	99                   	cdq    
c0009de0:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009de4:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c0009de7:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0009dea:	83 c4 10             	add    esp,0x10
c0009ded:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009df0:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c0009df3:	7d 4b                	jge    c0009e40 <sinc_multichan_vari_process+0x152>
c0009df5:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009df8:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009dfb:	01 c8                	add    eax,ecx
c0009dfd:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c0009e00:	99                   	cdq    
c0009e01:	f7 f9                	idiv   ecx
c0009e03:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0009e07:	7d 09                	jge    c0009e12 <sinc_multichan_vari_process+0x124>
c0009e09:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0009e0c:	85 c0                	test   eax,eax
c0009e0e:	79 57                	jns    c0009e67 <sinc_multichan_vari_process+0x179>
c0009e10:	eb 70                	jmp    c0009e82 <sinc_multichan_vari_process+0x194>
c0009e12:	51                   	push   ecx
c0009e13:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009e17:	57                   	push   edi
c0009e18:	53                   	push   ebx
c0009e19:	e8 56 fd ff ff       	call   c0009b74 <prepare_data>
c0009e1e:	83 c4 10             	add    esp,0x10
c0009e21:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0009e24:	85 c0                	test   eax,eax
c0009e26:	0f 85 3e 01 00 00    	jne    c0009f6a <sinc_multichan_vari_process+0x27c>
c0009e2c:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009e2f:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009e32:	01 c8                	add    eax,ecx
c0009e34:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c0009e37:	99                   	cdq    
c0009e38:	f7 f9                	idiv   ecx
c0009e3a:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0009e3e:	7c c9                	jl     c0009e09 <sinc_multichan_vari_process+0x11b>
c0009e40:	dd 04 24             	fld    QWORD PTR [esp]
c0009e43:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c0009e46:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009e4a:	dd 1e                	fstp   QWORD PTR [esi]
c0009e4c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0009e4f:	99                   	cdq    
c0009e50:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009e53:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c0009e56:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009e59:	99                   	cdq    
c0009e5a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009e5d:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c0009e60:	31 c0                	xor    eax,eax
c0009e62:	e9 03 01 00 00       	jmp    c0009f6a <sinc_multichan_vari_process+0x27c>
c0009e67:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009e6b:	dd 04 24             	fld    QWORD PTR [esp]
c0009e6e:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c0009e71:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c0009e75:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c0009e79:	d9 c9                	fxch   st(1)
c0009e7b:	de d9                	fcompp 
c0009e7d:	df e0                	fnstsw ax
c0009e7f:	9e                   	sahf   
c0009e80:	73 be                	jae    c0009e40 <sinc_multichan_vari_process+0x152>
c0009e82:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c0009e86:	7e 31                	jle    c0009eb9 <sinc_multichan_vari_process+0x1cb>
c0009e88:	83 ec 10             	sub    esp,0x10
c0009e8b:	dd 06                	fld    QWORD PTR [esi]
c0009e8d:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c0009e90:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009e93:	e8 58 55 01 00       	call   c001f3f0 <fabs>
c0009e98:	83 c4 10             	add    esp,0x10
c0009e9b:	dc 1d 40 0d 02 c0    	fcomp  QWORD PTR ds:0xc0020d40
c0009ea1:	df e0                	fnstsw ax
c0009ea3:	9e                   	sahf   
c0009ea4:	76 13                	jbe    c0009eb9 <sinc_multichan_vari_process+0x1cb>
c0009ea6:	dd 06                	fld    QWORD PTR [esi]
c0009ea8:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c0009eab:	d8 e1                	fsub   st,st(1)
c0009ead:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c0009eb0:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c0009eb3:	de c1                	faddp  st(1),st
c0009eb5:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0009eb9:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c0009ebc:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009ec0:	d9 e8                	fld1   
c0009ec2:	d8 d9                	fcomp  st(1)
c0009ec4:	df e0                	fnstsw ax
c0009ec6:	9e                   	sahf   
c0009ec7:	77 04                	ja     c0009ecd <sinc_multichan_vari_process+0x1df>
c0009ec9:	dd d8                	fstp   st(0)
c0009ecb:	d9 e8                	fld1   
c0009ecd:	de c9                	fmulp  st(1),st
c0009ecf:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009ed3:	50                   	push   eax
c0009ed4:	50                   	push   eax
c0009ed5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009ed9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009edd:	e8 28 fc ff ff       	call   c0009b0a <double_to_fp>
c0009ee2:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0009ee6:	89 c5                	mov    ebp,eax
c0009ee8:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c0009eec:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009eef:	e8 16 fc ff ff       	call   c0009b0a <double_to_fp>
c0009ef4:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0009ef7:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c0009efa:	8d 14 8a             	lea    edx,[edx+ecx*4]
c0009efd:	89 c1                	mov    ecx,eax
c0009eff:	52                   	push   edx
c0009f00:	89 d8                	mov    eax,ebx
c0009f02:	dd 44 24 2c          	fld    QWORD PTR [esp+0x2c]
c0009f06:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c0009f09:	52                   	push   edx
c0009f0a:	52                   	push   edx
c0009f0b:	89 ea                	mov    edx,ebp
c0009f0d:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009f10:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009f13:	e8 e9 f7 ff ff       	call   c0009701 <calc_output_multi>
c0009f18:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0009f1b:	d9 e8                	fld1   
c0009f1d:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c0009f20:	dc 74 24 28          	fdiv   QWORD PTR [esp+0x28]
c0009f24:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c0009f28:	83 c4 10             	add    esp,0x10
c0009f2b:	dd 14 24             	fst    QWORD PTR [esp]
c0009f2e:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0009f32:	e8 e6 fb ff ff       	call   c0009b1d <fmod_one>
c0009f37:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0009f3a:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009f3e:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009f41:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0009f45:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009f49:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c0009f4d:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009f50:	e8 bb 54 01 00       	call   c001f410 <lrint>
c0009f55:	0f af e8             	imul   ebp,eax
c0009f58:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009f5c:	01 e8                	add    eax,ebp
c0009f5e:	99                   	cdq    
c0009f5f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c0009f62:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0009f65:	e9 80 fe ff ff       	jmp    c0009dea <sinc_multichan_vari_process+0xfc>
c0009f6a:	83 c4 3c             	add    esp,0x3c
c0009f6d:	5b                   	pop    ebx
c0009f6e:	5e                   	pop    esi
c0009f6f:	5f                   	pop    edi
c0009f70:	5d                   	pop    ebp
c0009f71:	c3                   	ret    

c0009f72 <sinc_hex_vari_process>:
c0009f72:	55                   	push   ebp
c0009f73:	b8 05 00 00 00       	mov    eax,0x5
c0009f78:	57                   	push   edi
c0009f79:	56                   	push   esi
c0009f7a:	53                   	push   ebx
c0009f7b:	83 ec 3c             	sub    esp,0x3c
c0009f7e:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0009f82:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0009f86:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c0009f89:	85 db                	test   ebx,ebx
c0009f8b:	0f 84 58 02 00 00    	je     c000a1e9 <sinc_hex_vari_process+0x277>
c0009f91:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0009f94:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009f97:	0f af d0             	imul   edx,eax
c0009f9a:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0009f9d:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c0009fa1:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0009fa8:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0009fab:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0009fb2:	dd 06                	fld    QWORD PTR [esi]
c0009fb4:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c0009fb8:	55                   	push   ebp
c0009fb9:	55                   	push   ebp
c0009fba:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009fbd:	e8 55 f0 ff ff       	call   c0009017 <is_bad_src_ratio>
c0009fc2:	89 c2                	mov    edx,eax
c0009fc4:	58                   	pop    eax
c0009fc5:	85 d2                	test   edx,edx
c0009fc7:	59                   	pop    ecx
c0009fc8:	b8 16 00 00 00       	mov    eax,0x16
c0009fcd:	0f 85 16 02 00 00    	jne    c000a1e9 <sinc_hex_vari_process+0x277>
c0009fd3:	d9 05 50 0d 02 c0    	fld    DWORD PTR ds:0xc0020d50
c0009fd9:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c0009fdc:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c0009fdf:	dd 06                	fld    QWORD PTR [esi]
c0009fe1:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c0009fe4:	d8 d1                	fcom   st(1)
c0009fe6:	df e0                	fnstsw ax
c0009fe8:	9e                   	sahf   
c0009fe9:	76 0f                	jbe    c0009ffa <sinc_hex_vari_process+0x88>
c0009feb:	dd d8                	fstp   st(0)
c0009fed:	d9 e8                	fld1   
c0009fef:	d8 d9                	fcomp  st(1)
c0009ff1:	df e0                	fnstsw ax
c0009ff3:	9e                   	sahf   
c0009ff4:	77 0f                	ja     c000a005 <sinc_hex_vari_process+0x93>
c0009ff6:	dd d8                	fstp   st(0)
c0009ff8:	eb 11                	jmp    c000a00b <sinc_hex_vari_process+0x99>
c0009ffa:	dd d9                	fstp   st(1)
c0009ffc:	d9 e8                	fld1   
c0009ffe:	d8 d9                	fcomp  st(1)
c000a000:	df e0                	fnstsw ax
c000a002:	9e                   	sahf   
c000a003:	76 04                	jbe    c000a009 <sinc_hex_vari_process+0x97>
c000a005:	de f9                	fdivp  st(1),st
c000a007:	eb 02                	jmp    c000a00b <sinc_hex_vari_process+0x99>
c000a009:	dd d8                	fstp   st(0)
c000a00b:	83 ec 10             	sub    esp,0x10
c000a00e:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a011:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a014:	e8 f7 53 01 00       	call   c001f410 <lrint>
c000a019:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c000a01c:	40                   	inc    eax
c000a01d:	dd 14 24             	fst    QWORD PTR [esp]
c000a020:	0f af c5             	imul   eax,ebp
c000a023:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a027:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a02b:	e8 ed fa ff ff       	call   c0009b1d <fmod_one>
c000a030:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a033:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a037:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a03a:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a03e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a042:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a046:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a049:	e8 c2 53 01 00       	call   c001f410 <lrint>
c000a04e:	0f af e8             	imul   ebp,eax
c000a051:	d9 e8                	fld1   
c000a053:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a057:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a05b:	01 e8                	add    eax,ebp
c000a05d:	dc 05 b8 0b 02 c0    	fadd   QWORD PTR ds:0xc0020bb8
c000a063:	99                   	cdq    
c000a064:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a068:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a06b:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a06e:	83 c4 10             	add    esp,0x10
c000a071:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a074:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a077:	7d 4b                	jge    c000a0c4 <sinc_hex_vari_process+0x152>
c000a079:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a07c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a07f:	01 c8                	add    eax,ecx
c000a081:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a084:	99                   	cdq    
c000a085:	f7 f9                	idiv   ecx
c000a087:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a08b:	7d 09                	jge    c000a096 <sinc_hex_vari_process+0x124>
c000a08d:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a090:	85 c0                	test   eax,eax
c000a092:	79 57                	jns    c000a0eb <sinc_hex_vari_process+0x179>
c000a094:	eb 70                	jmp    c000a106 <sinc_hex_vari_process+0x194>
c000a096:	51                   	push   ecx
c000a097:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a09b:	57                   	push   edi
c000a09c:	53                   	push   ebx
c000a09d:	e8 d2 fa ff ff       	call   c0009b74 <prepare_data>
c000a0a2:	83 c4 10             	add    esp,0x10
c000a0a5:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a0a8:	85 c0                	test   eax,eax
c000a0aa:	0f 85 39 01 00 00    	jne    c000a1e9 <sinc_hex_vari_process+0x277>
c000a0b0:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a0b3:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a0b6:	01 c8                	add    eax,ecx
c000a0b8:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a0bb:	99                   	cdq    
c000a0bc:	f7 f9                	idiv   ecx
c000a0be:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a0c2:	7c c9                	jl     c000a08d <sinc_hex_vari_process+0x11b>
c000a0c4:	dd 04 24             	fld    QWORD PTR [esp]
c000a0c7:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a0ca:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a0ce:	dd 1e                	fstp   QWORD PTR [esi]
c000a0d0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a0d3:	99                   	cdq    
c000a0d4:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a0d7:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a0da:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a0dd:	99                   	cdq    
c000a0de:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a0e1:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a0e4:	31 c0                	xor    eax,eax
c000a0e6:	e9 fe 00 00 00       	jmp    c000a1e9 <sinc_hex_vari_process+0x277>
c000a0eb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a0ef:	dd 04 24             	fld    QWORD PTR [esp]
c000a0f2:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a0f5:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c000a0f9:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000a0fd:	d9 c9                	fxch   st(1)
c000a0ff:	de d9                	fcompp 
c000a101:	df e0                	fnstsw ax
c000a103:	9e                   	sahf   
c000a104:	73 be                	jae    c000a0c4 <sinc_hex_vari_process+0x152>
c000a106:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a10a:	7e 31                	jle    c000a13d <sinc_hex_vari_process+0x1cb>
c000a10c:	83 ec 10             	sub    esp,0x10
c000a10f:	dd 06                	fld    QWORD PTR [esi]
c000a111:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a114:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a117:	e8 d4 52 01 00       	call   c001f3f0 <fabs>
c000a11c:	83 c4 10             	add    esp,0x10
c000a11f:	dc 1d 40 0d 02 c0    	fcomp  QWORD PTR ds:0xc0020d40
c000a125:	df e0                	fnstsw ax
c000a127:	9e                   	sahf   
c000a128:	76 13                	jbe    c000a13d <sinc_hex_vari_process+0x1cb>
c000a12a:	dd 06                	fld    QWORD PTR [esi]
c000a12c:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a12f:	d8 e1                	fsub   st,st(1)
c000a131:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a134:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a137:	de c1                	faddp  st(1),st
c000a139:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a13d:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a140:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a144:	d9 e8                	fld1   
c000a146:	d8 d9                	fcomp  st(1)
c000a148:	df e0                	fnstsw ax
c000a14a:	9e                   	sahf   
c000a14b:	77 04                	ja     c000a151 <sinc_hex_vari_process+0x1df>
c000a14d:	dd d8                	fstp   st(0)
c000a14f:	d9 e8                	fld1   
c000a151:	de c9                	fmulp  st(1),st
c000a153:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000a157:	50                   	push   eax
c000a158:	50                   	push   eax
c000a159:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a15d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a161:	e8 a4 f9 ff ff       	call   c0009b0a <double_to_fp>
c000a166:	89 c5                	mov    ebp,eax
c000a168:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a16c:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000a170:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a173:	e8 92 f9 ff ff       	call   c0009b0a <double_to_fp>
c000a178:	83 c4 0c             	add    esp,0xc
c000a17b:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a17e:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000a181:	8d 14 8a             	lea    edx,[edx+ecx*4]
c000a184:	89 c1                	mov    ecx,eax
c000a186:	52                   	push   edx
c000a187:	89 d8                	mov    eax,ebx
c000a189:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a18d:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a190:	52                   	push   edx
c000a191:	52                   	push   edx
c000a192:	89 ea                	mov    edx,ebp
c000a194:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a197:	e8 d1 f2 ff ff       	call   c000946d <calc_output_hex>
c000a19c:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000a1a0:	d9 e8                	fld1   
c000a1a2:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a1a6:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a1aa:	dd 14 24             	fst    QWORD PTR [esp]
c000a1ad:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000a1b1:	e8 67 f9 ff ff       	call   c0009b1d <fmod_one>
c000a1b6:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a1b9:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a1bd:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a1c0:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000a1c4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a1c8:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a1cc:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a1cf:	e8 3c 52 01 00       	call   c001f410 <lrint>
c000a1d4:	0f af e8             	imul   ebp,eax
c000a1d7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a1db:	01 e8                	add    eax,ebp
c000a1dd:	99                   	cdq    
c000a1de:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a1e1:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a1e4:	e9 85 fe ff ff       	jmp    c000a06e <sinc_hex_vari_process+0xfc>
c000a1e9:	83 c4 3c             	add    esp,0x3c
c000a1ec:	5b                   	pop    ebx
c000a1ed:	5e                   	pop    esi
c000a1ee:	5f                   	pop    edi
c000a1ef:	5d                   	pop    ebp
c000a1f0:	c3                   	ret    

c000a1f1 <sinc_quad_vari_process>:
c000a1f1:	55                   	push   ebp
c000a1f2:	b8 05 00 00 00       	mov    eax,0x5
c000a1f7:	57                   	push   edi
c000a1f8:	56                   	push   esi
c000a1f9:	53                   	push   ebx
c000a1fa:	83 ec 3c             	sub    esp,0x3c
c000a1fd:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000a201:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000a205:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000a208:	85 db                	test   ebx,ebx
c000a20a:	0f 84 58 02 00 00    	je     c000a468 <sinc_quad_vari_process+0x277>
c000a210:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000a213:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a216:	0f af d0             	imul   edx,eax
c000a219:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000a21c:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c000a220:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a227:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a22a:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000a231:	dd 06                	fld    QWORD PTR [esi]
c000a233:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c000a237:	55                   	push   ebp
c000a238:	55                   	push   ebp
c000a239:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a23c:	e8 d6 ed ff ff       	call   c0009017 <is_bad_src_ratio>
c000a241:	89 c2                	mov    edx,eax
c000a243:	58                   	pop    eax
c000a244:	85 d2                	test   edx,edx
c000a246:	59                   	pop    ecx
c000a247:	b8 16 00 00 00       	mov    eax,0x16
c000a24c:	0f 85 16 02 00 00    	jne    c000a468 <sinc_quad_vari_process+0x277>
c000a252:	d9 05 50 0d 02 c0    	fld    DWORD PTR ds:0xc0020d50
c000a258:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c000a25b:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a25e:	dd 06                	fld    QWORD PTR [esi]
c000a260:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a263:	d8 d1                	fcom   st(1)
c000a265:	df e0                	fnstsw ax
c000a267:	9e                   	sahf   
c000a268:	76 0f                	jbe    c000a279 <sinc_quad_vari_process+0x88>
c000a26a:	dd d8                	fstp   st(0)
c000a26c:	d9 e8                	fld1   
c000a26e:	d8 d9                	fcomp  st(1)
c000a270:	df e0                	fnstsw ax
c000a272:	9e                   	sahf   
c000a273:	77 0f                	ja     c000a284 <sinc_quad_vari_process+0x93>
c000a275:	dd d8                	fstp   st(0)
c000a277:	eb 11                	jmp    c000a28a <sinc_quad_vari_process+0x99>
c000a279:	dd d9                	fstp   st(1)
c000a27b:	d9 e8                	fld1   
c000a27d:	d8 d9                	fcomp  st(1)
c000a27f:	df e0                	fnstsw ax
c000a281:	9e                   	sahf   
c000a282:	76 04                	jbe    c000a288 <sinc_quad_vari_process+0x97>
c000a284:	de f9                	fdivp  st(1),st
c000a286:	eb 02                	jmp    c000a28a <sinc_quad_vari_process+0x99>
c000a288:	dd d8                	fstp   st(0)
c000a28a:	83 ec 10             	sub    esp,0x10
c000a28d:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a290:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a293:	e8 78 51 01 00       	call   c001f410 <lrint>
c000a298:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c000a29b:	40                   	inc    eax
c000a29c:	dd 14 24             	fst    QWORD PTR [esp]
c000a29f:	0f af c5             	imul   eax,ebp
c000a2a2:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a2a6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a2aa:	e8 6e f8 ff ff       	call   c0009b1d <fmod_one>
c000a2af:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a2b2:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a2b6:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a2b9:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a2bd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a2c1:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a2c5:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a2c8:	e8 43 51 01 00       	call   c001f410 <lrint>
c000a2cd:	0f af e8             	imul   ebp,eax
c000a2d0:	d9 e8                	fld1   
c000a2d2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a2d6:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a2da:	01 e8                	add    eax,ebp
c000a2dc:	dc 05 b8 0b 02 c0    	fadd   QWORD PTR ds:0xc0020bb8
c000a2e2:	99                   	cdq    
c000a2e3:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a2e7:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a2ea:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a2ed:	83 c4 10             	add    esp,0x10
c000a2f0:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a2f3:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a2f6:	7d 4b                	jge    c000a343 <sinc_quad_vari_process+0x152>
c000a2f8:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a2fb:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a2fe:	01 c8                	add    eax,ecx
c000a300:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a303:	99                   	cdq    
c000a304:	f7 f9                	idiv   ecx
c000a306:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a30a:	7d 09                	jge    c000a315 <sinc_quad_vari_process+0x124>
c000a30c:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a30f:	85 c0                	test   eax,eax
c000a311:	79 57                	jns    c000a36a <sinc_quad_vari_process+0x179>
c000a313:	eb 70                	jmp    c000a385 <sinc_quad_vari_process+0x194>
c000a315:	51                   	push   ecx
c000a316:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a31a:	57                   	push   edi
c000a31b:	53                   	push   ebx
c000a31c:	e8 53 f8 ff ff       	call   c0009b74 <prepare_data>
c000a321:	83 c4 10             	add    esp,0x10
c000a324:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a327:	85 c0                	test   eax,eax
c000a329:	0f 85 39 01 00 00    	jne    c000a468 <sinc_quad_vari_process+0x277>
c000a32f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a332:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a335:	01 c8                	add    eax,ecx
c000a337:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a33a:	99                   	cdq    
c000a33b:	f7 f9                	idiv   ecx
c000a33d:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a341:	7c c9                	jl     c000a30c <sinc_quad_vari_process+0x11b>
c000a343:	dd 04 24             	fld    QWORD PTR [esp]
c000a346:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a349:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a34d:	dd 1e                	fstp   QWORD PTR [esi]
c000a34f:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a352:	99                   	cdq    
c000a353:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a356:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a359:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a35c:	99                   	cdq    
c000a35d:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a360:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a363:	31 c0                	xor    eax,eax
c000a365:	e9 fe 00 00 00       	jmp    c000a468 <sinc_quad_vari_process+0x277>
c000a36a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a36e:	dd 04 24             	fld    QWORD PTR [esp]
c000a371:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a374:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c000a378:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000a37c:	d9 c9                	fxch   st(1)
c000a37e:	de d9                	fcompp 
c000a380:	df e0                	fnstsw ax
c000a382:	9e                   	sahf   
c000a383:	73 be                	jae    c000a343 <sinc_quad_vari_process+0x152>
c000a385:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a389:	7e 31                	jle    c000a3bc <sinc_quad_vari_process+0x1cb>
c000a38b:	83 ec 10             	sub    esp,0x10
c000a38e:	dd 06                	fld    QWORD PTR [esi]
c000a390:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a393:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a396:	e8 55 50 01 00       	call   c001f3f0 <fabs>
c000a39b:	83 c4 10             	add    esp,0x10
c000a39e:	dc 1d 40 0d 02 c0    	fcomp  QWORD PTR ds:0xc0020d40
c000a3a4:	df e0                	fnstsw ax
c000a3a6:	9e                   	sahf   
c000a3a7:	76 13                	jbe    c000a3bc <sinc_quad_vari_process+0x1cb>
c000a3a9:	dd 06                	fld    QWORD PTR [esi]
c000a3ab:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a3ae:	d8 e1                	fsub   st,st(1)
c000a3b0:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a3b3:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a3b6:	de c1                	faddp  st(1),st
c000a3b8:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a3bc:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a3bf:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a3c3:	d9 e8                	fld1   
c000a3c5:	d8 d9                	fcomp  st(1)
c000a3c7:	df e0                	fnstsw ax
c000a3c9:	9e                   	sahf   
c000a3ca:	77 04                	ja     c000a3d0 <sinc_quad_vari_process+0x1df>
c000a3cc:	dd d8                	fstp   st(0)
c000a3ce:	d9 e8                	fld1   
c000a3d0:	de c9                	fmulp  st(1),st
c000a3d2:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000a3d6:	50                   	push   eax
c000a3d7:	50                   	push   eax
c000a3d8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a3dc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a3e0:	e8 25 f7 ff ff       	call   c0009b0a <double_to_fp>
c000a3e5:	89 c5                	mov    ebp,eax
c000a3e7:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a3eb:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000a3ef:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a3f2:	e8 13 f7 ff ff       	call   c0009b0a <double_to_fp>
c000a3f7:	83 c4 0c             	add    esp,0xc
c000a3fa:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a3fd:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000a400:	8d 14 8a             	lea    edx,[edx+ecx*4]
c000a403:	89 c1                	mov    ecx,eax
c000a405:	52                   	push   edx
c000a406:	89 d8                	mov    eax,ebx
c000a408:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a40c:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a40f:	52                   	push   edx
c000a410:	52                   	push   edx
c000a411:	89 ea                	mov    edx,ebp
c000a413:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a416:	e8 8d ee ff ff       	call   c00092a8 <calc_output_quad>
c000a41b:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000a41f:	d9 e8                	fld1   
c000a421:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a425:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a429:	dd 14 24             	fst    QWORD PTR [esp]
c000a42c:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000a430:	e8 e8 f6 ff ff       	call   c0009b1d <fmod_one>
c000a435:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a438:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a43c:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a43f:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000a443:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a447:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a44b:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a44e:	e8 bd 4f 01 00       	call   c001f410 <lrint>
c000a453:	0f af e8             	imul   ebp,eax
c000a456:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a45a:	01 e8                	add    eax,ebp
c000a45c:	99                   	cdq    
c000a45d:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a460:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a463:	e9 85 fe ff ff       	jmp    c000a2ed <sinc_quad_vari_process+0xfc>
c000a468:	83 c4 3c             	add    esp,0x3c
c000a46b:	5b                   	pop    ebx
c000a46c:	5e                   	pop    esi
c000a46d:	5f                   	pop    edi
c000a46e:	5d                   	pop    ebp
c000a46f:	c3                   	ret    

c000a470 <sinc_stereo_vari_process>:
c000a470:	55                   	push   ebp
c000a471:	b8 05 00 00 00       	mov    eax,0x5
c000a476:	57                   	push   edi
c000a477:	56                   	push   esi
c000a478:	53                   	push   ebx
c000a479:	83 ec 3c             	sub    esp,0x3c
c000a47c:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000a480:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000a484:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000a487:	85 db                	test   ebx,ebx
c000a489:	0f 84 58 02 00 00    	je     c000a6e7 <sinc_stereo_vari_process+0x277>
c000a48f:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000a492:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a495:	0f af d0             	imul   edx,eax
c000a498:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000a49b:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c000a49f:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a4a6:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a4a9:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000a4b0:	dd 06                	fld    QWORD PTR [esi]
c000a4b2:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c000a4b6:	55                   	push   ebp
c000a4b7:	55                   	push   ebp
c000a4b8:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a4bb:	e8 57 eb ff ff       	call   c0009017 <is_bad_src_ratio>
c000a4c0:	89 c2                	mov    edx,eax
c000a4c2:	58                   	pop    eax
c000a4c3:	85 d2                	test   edx,edx
c000a4c5:	59                   	pop    ecx
c000a4c6:	b8 16 00 00 00       	mov    eax,0x16
c000a4cb:	0f 85 16 02 00 00    	jne    c000a6e7 <sinc_stereo_vari_process+0x277>
c000a4d1:	d9 05 50 0d 02 c0    	fld    DWORD PTR ds:0xc0020d50
c000a4d7:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c000a4da:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a4dd:	dd 06                	fld    QWORD PTR [esi]
c000a4df:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a4e2:	d8 d1                	fcom   st(1)
c000a4e4:	df e0                	fnstsw ax
c000a4e6:	9e                   	sahf   
c000a4e7:	76 0f                	jbe    c000a4f8 <sinc_stereo_vari_process+0x88>
c000a4e9:	dd d8                	fstp   st(0)
c000a4eb:	d9 e8                	fld1   
c000a4ed:	d8 d9                	fcomp  st(1)
c000a4ef:	df e0                	fnstsw ax
c000a4f1:	9e                   	sahf   
c000a4f2:	77 0f                	ja     c000a503 <sinc_stereo_vari_process+0x93>
c000a4f4:	dd d8                	fstp   st(0)
c000a4f6:	eb 11                	jmp    c000a509 <sinc_stereo_vari_process+0x99>
c000a4f8:	dd d9                	fstp   st(1)
c000a4fa:	d9 e8                	fld1   
c000a4fc:	d8 d9                	fcomp  st(1)
c000a4fe:	df e0                	fnstsw ax
c000a500:	9e                   	sahf   
c000a501:	76 04                	jbe    c000a507 <sinc_stereo_vari_process+0x97>
c000a503:	de f9                	fdivp  st(1),st
c000a505:	eb 02                	jmp    c000a509 <sinc_stereo_vari_process+0x99>
c000a507:	dd d8                	fstp   st(0)
c000a509:	83 ec 10             	sub    esp,0x10
c000a50c:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a50f:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a512:	e8 f9 4e 01 00       	call   c001f410 <lrint>
c000a517:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c000a51a:	40                   	inc    eax
c000a51b:	dd 14 24             	fst    QWORD PTR [esp]
c000a51e:	0f af c5             	imul   eax,ebp
c000a521:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a525:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a529:	e8 ef f5 ff ff       	call   c0009b1d <fmod_one>
c000a52e:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a531:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a535:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a538:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a53c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a540:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a544:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a547:	e8 c4 4e 01 00       	call   c001f410 <lrint>
c000a54c:	0f af e8             	imul   ebp,eax
c000a54f:	d9 e8                	fld1   
c000a551:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a555:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a559:	01 e8                	add    eax,ebp
c000a55b:	dc 05 b8 0b 02 c0    	fadd   QWORD PTR ds:0xc0020bb8
c000a561:	99                   	cdq    
c000a562:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a566:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a569:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a56c:	83 c4 10             	add    esp,0x10
c000a56f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a572:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a575:	7d 4b                	jge    c000a5c2 <sinc_stereo_vari_process+0x152>
c000a577:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a57a:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a57d:	01 c8                	add    eax,ecx
c000a57f:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a582:	99                   	cdq    
c000a583:	f7 f9                	idiv   ecx
c000a585:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a589:	7d 09                	jge    c000a594 <sinc_stereo_vari_process+0x124>
c000a58b:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a58e:	85 c0                	test   eax,eax
c000a590:	79 57                	jns    c000a5e9 <sinc_stereo_vari_process+0x179>
c000a592:	eb 70                	jmp    c000a604 <sinc_stereo_vari_process+0x194>
c000a594:	51                   	push   ecx
c000a595:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a599:	57                   	push   edi
c000a59a:	53                   	push   ebx
c000a59b:	e8 d4 f5 ff ff       	call   c0009b74 <prepare_data>
c000a5a0:	83 c4 10             	add    esp,0x10
c000a5a3:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a5a6:	85 c0                	test   eax,eax
c000a5a8:	0f 85 39 01 00 00    	jne    c000a6e7 <sinc_stereo_vari_process+0x277>
c000a5ae:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a5b1:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a5b4:	01 c8                	add    eax,ecx
c000a5b6:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a5b9:	99                   	cdq    
c000a5ba:	f7 f9                	idiv   ecx
c000a5bc:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a5c0:	7c c9                	jl     c000a58b <sinc_stereo_vari_process+0x11b>
c000a5c2:	dd 04 24             	fld    QWORD PTR [esp]
c000a5c5:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a5c8:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a5cc:	dd 1e                	fstp   QWORD PTR [esi]
c000a5ce:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a5d1:	99                   	cdq    
c000a5d2:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a5d5:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a5d8:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a5db:	99                   	cdq    
c000a5dc:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a5df:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a5e2:	31 c0                	xor    eax,eax
c000a5e4:	e9 fe 00 00 00       	jmp    c000a6e7 <sinc_stereo_vari_process+0x277>
c000a5e9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a5ed:	dd 04 24             	fld    QWORD PTR [esp]
c000a5f0:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a5f3:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c000a5f7:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000a5fb:	d9 c9                	fxch   st(1)
c000a5fd:	de d9                	fcompp 
c000a5ff:	df e0                	fnstsw ax
c000a601:	9e                   	sahf   
c000a602:	73 be                	jae    c000a5c2 <sinc_stereo_vari_process+0x152>
c000a604:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a608:	7e 31                	jle    c000a63b <sinc_stereo_vari_process+0x1cb>
c000a60a:	83 ec 10             	sub    esp,0x10
c000a60d:	dd 06                	fld    QWORD PTR [esi]
c000a60f:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a612:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a615:	e8 d6 4d 01 00       	call   c001f3f0 <fabs>
c000a61a:	83 c4 10             	add    esp,0x10
c000a61d:	dc 1d 40 0d 02 c0    	fcomp  QWORD PTR ds:0xc0020d40
c000a623:	df e0                	fnstsw ax
c000a625:	9e                   	sahf   
c000a626:	76 13                	jbe    c000a63b <sinc_stereo_vari_process+0x1cb>
c000a628:	dd 06                	fld    QWORD PTR [esi]
c000a62a:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a62d:	d8 e1                	fsub   st,st(1)
c000a62f:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a632:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a635:	de c1                	faddp  st(1),st
c000a637:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a63b:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a63e:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a642:	d9 e8                	fld1   
c000a644:	d8 d9                	fcomp  st(1)
c000a646:	df e0                	fnstsw ax
c000a648:	9e                   	sahf   
c000a649:	77 04                	ja     c000a64f <sinc_stereo_vari_process+0x1df>
c000a64b:	dd d8                	fstp   st(0)
c000a64d:	d9 e8                	fld1   
c000a64f:	de c9                	fmulp  st(1),st
c000a651:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000a655:	50                   	push   eax
c000a656:	50                   	push   eax
c000a657:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a65b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a65f:	e8 a6 f4 ff ff       	call   c0009b0a <double_to_fp>
c000a664:	89 c5                	mov    ebp,eax
c000a666:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a66a:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000a66e:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a671:	e8 94 f4 ff ff       	call   c0009b0a <double_to_fp>
c000a676:	83 c4 0c             	add    esp,0xc
c000a679:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a67c:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000a67f:	8d 14 8a             	lea    edx,[edx+ecx*4]
c000a682:	89 c1                	mov    ecx,eax
c000a684:	52                   	push   edx
c000a685:	89 d8                	mov    eax,ebx
c000a687:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a68b:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a68e:	52                   	push   edx
c000a68f:	52                   	push   edx
c000a690:	89 ea                	mov    edx,ebp
c000a692:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a695:	e8 ce ea ff ff       	call   c0009168 <calc_output_stereo>
c000a69a:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000a69e:	d9 e8                	fld1   
c000a6a0:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a6a4:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a6a8:	dd 14 24             	fst    QWORD PTR [esp]
c000a6ab:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000a6af:	e8 69 f4 ff ff       	call   c0009b1d <fmod_one>
c000a6b4:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a6b7:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a6bb:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a6be:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000a6c2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a6c6:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a6ca:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a6cd:	e8 3e 4d 01 00       	call   c001f410 <lrint>
c000a6d2:	0f af e8             	imul   ebp,eax
c000a6d5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a6d9:	01 e8                	add    eax,ebp
c000a6db:	99                   	cdq    
c000a6dc:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a6df:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a6e2:	e9 85 fe ff ff       	jmp    c000a56c <sinc_stereo_vari_process+0xfc>
c000a6e7:	83 c4 3c             	add    esp,0x3c
c000a6ea:	5b                   	pop    ebx
c000a6eb:	5e                   	pop    esi
c000a6ec:	5f                   	pop    edi
c000a6ed:	5d                   	pop    ebp
c000a6ee:	c3                   	ret    

c000a6ef <sinc_mono_vari_process>:
c000a6ef:	55                   	push   ebp
c000a6f0:	b8 05 00 00 00       	mov    eax,0x5
c000a6f5:	57                   	push   edi
c000a6f6:	56                   	push   esi
c000a6f7:	53                   	push   ebx
c000a6f8:	83 ec 3c             	sub    esp,0x3c
c000a6fb:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000a6ff:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000a703:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000a706:	85 db                	test   ebx,ebx
c000a708:	0f 84 57 02 00 00    	je     c000a965 <sinc_mono_vari_process+0x276>
c000a70e:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000a711:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a714:	0f af d0             	imul   edx,eax
c000a717:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000a71a:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c000a71e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a725:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a728:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000a72f:	dd 06                	fld    QWORD PTR [esi]
c000a731:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c000a735:	51                   	push   ecx
c000a736:	51                   	push   ecx
c000a737:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a73a:	e8 d8 e8 ff ff       	call   c0009017 <is_bad_src_ratio>
c000a73f:	5d                   	pop    ebp
c000a740:	89 c2                	mov    edx,eax
c000a742:	58                   	pop    eax
c000a743:	85 d2                	test   edx,edx
c000a745:	b8 16 00 00 00       	mov    eax,0x16
c000a74a:	0f 85 15 02 00 00    	jne    c000a965 <sinc_mono_vari_process+0x276>
c000a750:	d9 05 50 0d 02 c0    	fld    DWORD PTR ds:0xc0020d50
c000a756:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c000a759:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a75c:	dd 06                	fld    QWORD PTR [esi]
c000a75e:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a761:	d8 d1                	fcom   st(1)
c000a763:	df e0                	fnstsw ax
c000a765:	9e                   	sahf   
c000a766:	76 0f                	jbe    c000a777 <sinc_mono_vari_process+0x88>
c000a768:	dd d8                	fstp   st(0)
c000a76a:	d9 e8                	fld1   
c000a76c:	d8 d9                	fcomp  st(1)
c000a76e:	df e0                	fnstsw ax
c000a770:	9e                   	sahf   
c000a771:	77 0f                	ja     c000a782 <sinc_mono_vari_process+0x93>
c000a773:	dd d8                	fstp   st(0)
c000a775:	eb 11                	jmp    c000a788 <sinc_mono_vari_process+0x99>
c000a777:	dd d9                	fstp   st(1)
c000a779:	d9 e8                	fld1   
c000a77b:	d8 d9                	fcomp  st(1)
c000a77d:	df e0                	fnstsw ax
c000a77f:	9e                   	sahf   
c000a780:	76 04                	jbe    c000a786 <sinc_mono_vari_process+0x97>
c000a782:	de f9                	fdivp  st(1),st
c000a784:	eb 02                	jmp    c000a788 <sinc_mono_vari_process+0x99>
c000a786:	dd d8                	fstp   st(0)
c000a788:	83 ec 10             	sub    esp,0x10
c000a78b:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a78e:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a791:	e8 7a 4c 01 00       	call   c001f410 <lrint>
c000a796:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c000a799:	40                   	inc    eax
c000a79a:	dd 14 24             	fst    QWORD PTR [esp]
c000a79d:	0f af e8             	imul   ebp,eax
c000a7a0:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000a7a4:	e8 74 f3 ff ff       	call   c0009b1d <fmod_one>
c000a7a9:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a7ac:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a7b0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a7b4:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c000a7b8:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a7bb:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a7bf:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a7c3:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a7c6:	e8 45 4c 01 00       	call   c001f410 <lrint>
c000a7cb:	0f af 44 24 38       	imul   eax,DWORD PTR [esp+0x38]
c000a7d0:	d9 e8                	fld1   
c000a7d2:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a7d6:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a7da:	99                   	cdq    
c000a7db:	dc 05 b8 0b 02 c0    	fadd   QWORD PTR ds:0xc0020bb8
c000a7e1:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a7e4:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000a7e8:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a7eb:	83 c4 10             	add    esp,0x10
c000a7ee:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a7f1:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a7f4:	7d 44                	jge    c000a83a <sinc_mono_vari_process+0x14b>
c000a7f6:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a7f9:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a7fc:	01 c8                	add    eax,ecx
c000a7fe:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a801:	99                   	cdq    
c000a802:	f7 f9                	idiv   ecx
c000a804:	39 d5                	cmp    ebp,edx
c000a806:	7d 09                	jge    c000a811 <sinc_mono_vari_process+0x122>
c000a808:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a80b:	85 c0                	test   eax,eax
c000a80d:	79 52                	jns    c000a861 <sinc_mono_vari_process+0x172>
c000a80f:	eb 6b                	jmp    c000a87c <sinc_mono_vari_process+0x18d>
c000a811:	52                   	push   edx
c000a812:	55                   	push   ebp
c000a813:	57                   	push   edi
c000a814:	53                   	push   ebx
c000a815:	e8 5a f3 ff ff       	call   c0009b74 <prepare_data>
c000a81a:	83 c4 10             	add    esp,0x10
c000a81d:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a820:	85 c0                	test   eax,eax
c000a822:	0f 85 3d 01 00 00    	jne    c000a965 <sinc_mono_vari_process+0x276>
c000a828:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a82b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a82e:	01 c8                	add    eax,ecx
c000a830:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a833:	99                   	cdq    
c000a834:	f7 f9                	idiv   ecx
c000a836:	39 d5                	cmp    ebp,edx
c000a838:	7c ce                	jl     c000a808 <sinc_mono_vari_process+0x119>
c000a83a:	dd 04 24             	fld    QWORD PTR [esp]
c000a83d:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a840:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a844:	dd 1e                	fstp   QWORD PTR [esi]
c000a846:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a849:	99                   	cdq    
c000a84a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a84d:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a850:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a853:	99                   	cdq    
c000a854:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a857:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a85a:	31 c0                	xor    eax,eax
c000a85c:	e9 04 01 00 00       	jmp    c000a965 <sinc_mono_vari_process+0x276>
c000a861:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a865:	dd 04 24             	fld    QWORD PTR [esp]
c000a868:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a86b:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c000a86f:	db 44 24 10          	fild   DWORD PTR [esp+0x10]
c000a873:	d9 c9                	fxch   st(1)
c000a875:	de d9                	fcompp 
c000a877:	df e0                	fnstsw ax
c000a879:	9e                   	sahf   
c000a87a:	77 be                	ja     c000a83a <sinc_mono_vari_process+0x14b>
c000a87c:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a880:	7e 31                	jle    c000a8b3 <sinc_mono_vari_process+0x1c4>
c000a882:	83 ec 10             	sub    esp,0x10
c000a885:	dd 06                	fld    QWORD PTR [esi]
c000a887:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a88a:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a88d:	e8 5e 4b 01 00       	call   c001f3f0 <fabs>
c000a892:	83 c4 10             	add    esp,0x10
c000a895:	dc 1d 40 0d 02 c0    	fcomp  QWORD PTR ds:0xc0020d40
c000a89b:	df e0                	fnstsw ax
c000a89d:	9e                   	sahf   
c000a89e:	76 13                	jbe    c000a8b3 <sinc_mono_vari_process+0x1c4>
c000a8a0:	dd 06                	fld    QWORD PTR [esi]
c000a8a2:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a8a5:	d8 e1                	fsub   st,st(1)
c000a8a7:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a8aa:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a8ad:	de c1                	faddp  st(1),st
c000a8af:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a8b3:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a8b6:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a8ba:	d9 e8                	fld1   
c000a8bc:	d8 d9                	fcomp  st(1)
c000a8be:	df e0                	fnstsw ax
c000a8c0:	9e                   	sahf   
c000a8c1:	77 04                	ja     c000a8c7 <sinc_mono_vari_process+0x1d8>
c000a8c3:	dd d8                	fstp   st(0)
c000a8c5:	d9 e8                	fld1   
c000a8c7:	de c9                	fmulp  st(1),st
c000a8c9:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a8cd:	50                   	push   eax
c000a8ce:	50                   	push   eax
c000a8cf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8d7:	e8 2e f2 ff ff       	call   c0009b0a <double_to_fp>
c000a8dc:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a8e0:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a8e4:	dc 4c 24 20          	fmul   QWORD PTR [esp+0x20]
c000a8e8:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a8eb:	e8 1a f2 ff ff       	call   c0009b0a <double_to_fp>
c000a8f0:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000a8f4:	89 c1                	mov    ecx,eax
c000a8f6:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a8fa:	89 d8                	mov    eax,ebx
c000a8fc:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a8ff:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c000a903:	e8 7b e7 ff ff       	call   c0009083 <calc_output_single>
c000a908:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000a90b:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000a90e:	dc 4c 24 20          	fmul   QWORD PTR [esp+0x20]
c000a912:	d9 1c 90             	fstp   DWORD PTR [eax+edx*4]
c000a915:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000a918:	d9 e8                	fld1   
c000a91a:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a91e:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a922:	dd 14 24             	fst    QWORD PTR [esp]
c000a925:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a929:	e8 ef f1 ff ff       	call   c0009b1d <fmod_one>
c000a92e:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a931:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a935:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a939:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a93d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a940:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a944:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a948:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a94b:	e8 c0 4a 01 00       	call   c001f410 <lrint>
c000a950:	0f af 44 24 38       	imul   eax,DWORD PTR [esp+0x38]
c000a955:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a959:	99                   	cdq    
c000a95a:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a95d:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a960:	e9 86 fe ff ff       	jmp    c000a7eb <sinc_mono_vari_process+0xfc>
c000a965:	83 c4 3c             	add    esp,0x3c
c000a968:	5b                   	pop    ebx
c000a969:	5e                   	pop    esi
c000a96a:	5f                   	pop    edi
c000a96b:	5d                   	pop    ebp
c000a96c:	c3                   	ret    

c000a96d <sinc_get_name>:
c000a96d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a971:	31 c0                	xor    eax,eax
c000a973:	83 fa 02             	cmp    edx,0x2
c000a976:	77 07                	ja     c000a97f <sinc_get_name+0x12>
c000a978:	8b 04 95 20 0c 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdf3e0]
c000a97f:	c3                   	ret    

c000a980 <sinc_get_description>:
c000a980:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a984:	31 c0                	xor    eax,eax
c000a986:	83 fa 02             	cmp    edx,0x2
c000a989:	77 07                	ja     c000a992 <sinc_get_description+0x12>
c000a98b:	8b 04 95 14 0c 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdf3ec]
c000a992:	c3                   	ret    

c000a993 <sinc_set_converter>:
c000a993:	53                   	push   ebx
c000a994:	81 ec 58 08 00 00    	sub    esp,0x858
c000a99a:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000a9a1:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000a9a4:	85 c0                	test   eax,eax
c000a9a6:	74 13                	je     c000a9bb <sinc_set_converter+0x28>
c000a9a8:	83 ec 0c             	sub    esp,0xc
c000a9ab:	50                   	push   eax
c000a9ac:	e8 95 16 00 00       	call   c000c046 <free>
c000a9b1:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000a9b8:	83 c4 10             	add    esp,0x10
c000a9bb:	50                   	push   eax
c000a9bc:	68 44 08 00 00       	push   0x844
c000a9c1:	6a 00                	push   0x0
c000a9c3:	8d 44 24 18          	lea    eax,[esp+0x18]
c000a9c7:	50                   	push   eax
c000a9c8:	e8 06 5d ff ff       	call   c00006d3 <memset>
c000a9cd:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000a9d0:	83 c4 10             	add    esp,0x10
c000a9d3:	b8 0b 00 00 00       	mov    eax,0xb
c000a9d8:	81 fa 80 00 00 00    	cmp    edx,0x80
c000a9de:	7f 6e                	jg     c000aa4e <sinc_set_converter+0xbb>
c000a9e0:	83 fa 01             	cmp    edx,0x1
c000a9e3:	75 10                	jne    c000a9f5 <sinc_set_converter+0x62>
c000a9e5:	c7 43 24 ef a6 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000a6ef
c000a9ec:	c7 43 20 ef a6 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000a6ef
c000a9f3:	eb 4d                	jmp    c000aa42 <sinc_set_converter+0xaf>
c000a9f5:	83 fa 02             	cmp    edx,0x2
c000a9f8:	75 10                	jne    c000aa0a <sinc_set_converter+0x77>
c000a9fa:	c7 43 24 70 a4 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000a470
c000aa01:	c7 43 20 70 a4 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000a470
c000aa08:	eb 38                	jmp    c000aa42 <sinc_set_converter+0xaf>
c000aa0a:	83 fa 04             	cmp    edx,0x4
c000aa0d:	75 10                	jne    c000aa1f <sinc_set_converter+0x8c>
c000aa0f:	c7 43 24 f1 a1 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000a1f1
c000aa16:	c7 43 20 f1 a1 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000a1f1
c000aa1d:	eb 23                	jmp    c000aa42 <sinc_set_converter+0xaf>
c000aa1f:	83 fa 06             	cmp    edx,0x6
c000aa22:	75 10                	jne    c000aa34 <sinc_set_converter+0xa1>
c000aa24:	c7 43 24 72 9f 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0009f72
c000aa2b:	c7 43 20 72 9f 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0009f72
c000aa32:	eb 0e                	jmp    c000aa42 <sinc_set_converter+0xaf>
c000aa34:	c7 43 24 ee 9c 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0009cee
c000aa3b:	c7 43 20 ee 9c 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0009cee
c000aa42:	c7 43 28 9e 96 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000969e
c000aa49:	b8 0a 00 00 00       	mov    eax,0xa
c000aa4e:	81 c4 58 08 00 00    	add    esp,0x858
c000aa54:	5b                   	pop    ebx
c000aa55:	c3                   	ret    

c000aa56 <is_bad_src_ratio>:
c000aa56:	83 ec 0c             	sub    esp,0xc
c000aa59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa5d:	89 04 24             	mov    DWORD PTR [esp],eax
c000aa60:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aa64:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000aa68:	dd 04 24             	fld    QWORD PTR [esp]
c000aa6b:	dd 05 40 0b 02 c0    	fld    QWORD PTR ds:0xc0020b40
c000aa71:	de d9                	fcompp 
c000aa73:	df e0                	fnstsw ax
c000aa75:	f6 c4 45             	test   ah,0x45
c000aa78:	74 10                	je     c000aa8a <is_bad_src_ratio+0x34>
c000aa7a:	dd 04 24             	fld    QWORD PTR [esp]
c000aa7d:	dc 1d 48 0b 02 c0    	fcomp  QWORD PTR ds:0xc0020b48
c000aa83:	df e0                	fnstsw ax
c000aa85:	f6 c4 45             	test   ah,0x45
c000aa88:	75 07                	jne    c000aa91 <is_bad_src_ratio+0x3b>
c000aa8a:	b8 01 00 00 00       	mov    eax,0x1
c000aa8f:	eb 05                	jmp    c000aa96 <is_bad_src_ratio+0x40>
c000aa91:	b8 00 00 00 00       	mov    eax,0x0
c000aa96:	83 c4 0c             	add    esp,0xc
c000aa99:	c3                   	ret    

c000aa9a <fmod_one>:
c000aa9a:	83 ec 2c             	sub    esp,0x2c
c000aa9d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000aaa1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aaa5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000aaa9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000aaad:	83 ec 08             	sub    esp,0x8
c000aab0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aab4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aab8:	e8 53 49 01 00       	call   c001f410 <lrint>
c000aabd:	83 c4 10             	add    esp,0x10
c000aac0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000aac4:	db 44 24 04          	fild   DWORD PTR [esp+0x4]
c000aac8:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000aacc:	de e1                	fsubrp st(1),st
c000aace:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000aad2:	d9 ee                	fldz   
c000aad4:	dc 5c 24 18          	fcomp  QWORD PTR [esp+0x18]
c000aad8:	df e0                	fnstsw ax
c000aada:	f6 c4 45             	test   ah,0x45
c000aadd:	75 0a                	jne    c000aae9 <fmod_one+0x4f>
c000aadf:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000aae3:	d9 e8                	fld1   
c000aae5:	de c1                	faddp  st(1),st
c000aae7:	eb 04                	jmp    c000aaed <fmod_one+0x53>
c000aae9:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000aaed:	83 c4 2c             	add    esp,0x2c
c000aaf0:	c3                   	ret    

c000aaf1 <zoh_vari_process>:
c000aaf1:	55                   	push   ebp
c000aaf2:	57                   	push   edi
c000aaf3:	56                   	push   esi
c000aaf4:	53                   	push   ebx
c000aaf5:	83 ec 2c             	sub    esp,0x2c
c000aaf8:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c000aafc:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000ab00:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000ab08:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000ab0c:	0f 8e 34 02 00 00    	jle    c000ad46 <zoh_vari_process+0x255>
c000ab12:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000ab15:	c7 44 24 0c 05 00 00 00 	mov    DWORD PTR [esp+0xc],0x5
c000ab1d:	85 db                	test   ebx,ebx
c000ab1f:	0f 84 21 02 00 00    	je     c000ad46 <zoh_vari_process+0x255>
c000ab25:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ab28:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000ab2c:	74 19                	je     c000ab47 <zoh_vari_process+0x56>
c000ab2e:	31 d2                	xor    edx,edx
c000ab30:	39 c2                	cmp    edx,eax
c000ab32:	7d 0c                	jge    c000ab40 <zoh_vari_process+0x4f>
c000ab34:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000ab36:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c000ab39:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c000ab3d:	42                   	inc    edx
c000ab3e:	eb f0                	jmp    c000ab30 <zoh_vari_process+0x3f>
c000ab40:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000ab47:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000ab4a:	0f af d0             	imul   edx,eax
c000ab4d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000ab50:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000ab54:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000ab5b:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000ab5e:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000ab65:	dd 07                	fld    QWORD PTR [edi]
c000ab67:	dd 14 24             	fst    QWORD PTR [esp]
c000ab6a:	50                   	push   eax
c000ab6b:	50                   	push   eax
c000ab6c:	dd 1c 24             	fstp   QWORD PTR [esp]
c000ab6f:	e8 e2 fe ff ff       	call   c000aa56 <is_bad_src_ratio>
c000ab74:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ab78:	5a                   	pop    edx
c000ab79:	59                   	pop    ecx
c000ab7a:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000ab7f:	0f 85 b9 01 00 00    	jne    c000ad3e <zoh_vari_process+0x24d>
c000ab85:	dd 47 08             	fld    QWORD PTR [edi+0x8]
c000ab88:	d9 e8                	fld1   
c000ab8a:	d8 d1                	fcom   st(1)
c000ab8c:	df e0                	fnstsw ax
c000ab8e:	9e                   	sahf   
c000ab8f:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000ab93:	0f 86 85 00 00 00    	jbe    c000ac1e <zoh_vari_process+0x12d>
c000ab99:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000ab9c:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000ab9f:	7d 7d                	jge    c000ac1e <zoh_vari_process+0x12d>
c000aba1:	d9 c0                	fld    st(0)
c000aba3:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c000aba6:	da 43 10             	fiadd  DWORD PTR [ebx+0x10]
c000aba9:	da 5b 0c             	ficomp DWORD PTR [ebx+0xc]
c000abac:	df e0                	fnstsw ax
c000abae:	9e                   	sahf   
c000abaf:	73 6d                	jae    c000ac1e <zoh_vari_process+0x12d>
c000abb1:	85 d2                	test   edx,edx
c000abb3:	7e 38                	jle    c000abed <zoh_vari_process+0xfc>
c000abb5:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000abb9:	83 ec 10             	sub    esp,0x10
c000abbc:	dd 07                	fld    QWORD PTR [edi]
c000abbe:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c000abc1:	dd 1c 24             	fstp   QWORD PTR [esp]
c000abc4:	e8 27 48 01 00       	call   c001f3f0 <fabs>
c000abc9:	83 c4 10             	add    esp,0x10
c000abcc:	dc 1d b8 0b 02 c0    	fcomp  QWORD PTR ds:0xc0020bb8
c000abd2:	df e0                	fnstsw ax
c000abd4:	9e                   	sahf   
c000abd5:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000abd9:	76 12                	jbe    c000abed <zoh_vari_process+0xfc>
c000abdb:	dd 07                	fld    QWORD PTR [edi]
c000abdd:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c000abe0:	d8 e1                	fsub   st,st(1)
c000abe2:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c000abe5:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c000abe8:	de c1                	faddp  st(1),st
c000abea:	dd 1c 24             	fstp   QWORD PTR [esp]
c000abed:	31 c0                	xor    eax,eax
c000abef:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000abf2:	7e 13                	jle    c000ac07 <zoh_vari_process+0x116>
c000abf4:	d9 44 83 1c          	fld    DWORD PTR [ebx+eax*4+0x1c]
c000abf8:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000abfb:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000abfe:	40                   	inc    eax
c000abff:	d9 1c 8a             	fstp   DWORD PTR [edx+ecx*4]
c000ac02:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000ac05:	eb e8                	jmp    c000abef <zoh_vari_process+0xfe>
c000ac07:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000ac0b:	dc 34 24             	fdiv   QWORD PTR [esp]
c000ac0e:	de c1                	faddp  st(1),st
c000ac10:	e9 73 ff ff ff       	jmp    c000ab88 <zoh_vari_process+0x97>
c000ac15:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000ac19:	dc 34 24             	fdiv   QWORD PTR [esp]
c000ac1c:	de c1                	faddp  st(1),st
c000ac1e:	83 ec 10             	sub    esp,0x10
c000ac21:	dd 14 24             	fst    QWORD PTR [esp]
c000ac24:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000ac28:	e8 6d fe ff ff       	call   c000aa9a <fmod_one>
c000ac2d:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ac30:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c000ac34:	d8 e1                	fsub   st,st(1)
c000ac36:	d9 c9                	fxch   st(1)
c000ac38:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000ac3c:	dd 1c 24             	fstp   QWORD PTR [esp]
c000ac3f:	e8 cc 47 01 00       	call   c001f410 <lrint>
c000ac44:	83 c4 10             	add    esp,0x10
c000ac47:	0f af e8             	imul   ebp,eax
c000ac4a:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000ac4d:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000ac50:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000ac54:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000ac57:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000ac5a:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000ac5d:	0f 8d 82 00 00 00    	jge    c000ace5 <zoh_vari_process+0x1f4>
c000ac63:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c000ac67:	d9 c0                	fld    st(0)
c000ac69:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c000ac6c:	da 44 24 18          	fiadd  DWORD PTR [esp+0x18]
c000ac70:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000ac74:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000ac78:	de d9                	fcompp 
c000ac7a:	df e0                	fnstsw ax
c000ac7c:	9e                   	sahf   
c000ac7d:	72 66                	jb     c000ace5 <zoh_vari_process+0x1f4>
c000ac7f:	85 d2                	test   edx,edx
c000ac81:	7e 38                	jle    c000acbb <zoh_vari_process+0x1ca>
c000ac83:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000ac87:	83 ec 10             	sub    esp,0x10
c000ac8a:	dd 07                	fld    QWORD PTR [edi]
c000ac8c:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c000ac8f:	dd 1c 24             	fstp   QWORD PTR [esp]
c000ac92:	e8 59 47 01 00       	call   c001f3f0 <fabs>
c000ac97:	83 c4 10             	add    esp,0x10
c000ac9a:	dc 1d b8 0b 02 c0    	fcomp  QWORD PTR ds:0xc0020bb8
c000aca0:	df e0                	fnstsw ax
c000aca2:	9e                   	sahf   
c000aca3:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000aca7:	76 12                	jbe    c000acbb <zoh_vari_process+0x1ca>
c000aca9:	dd 07                	fld    QWORD PTR [edi]
c000acab:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c000acae:	d8 e1                	fsub   st,st(1)
c000acb0:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c000acb3:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c000acb6:	de c1                	faddp  st(1),st
c000acb8:	dd 1c 24             	fstp   QWORD PTR [esp]
c000acbb:	31 d2                	xor    edx,edx
c000acbd:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000acc0:	39 d0                	cmp    eax,edx
c000acc2:	0f 8e 4d ff ff ff    	jle    c000ac15 <zoh_vari_process+0x124>
c000acc8:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000accb:	29 c1                	sub    ecx,eax
c000accd:	89 c8                	mov    eax,ecx
c000accf:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000acd1:	01 d0                	add    eax,edx
c000acd3:	42                   	inc    edx
c000acd4:	d9 04 81             	fld    DWORD PTR [ecx+eax*4]
c000acd7:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000acda:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000acdd:	d9 1c 88             	fstp   DWORD PTR [eax+ecx*4]
c000ace0:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000ace3:	eb d8                	jmp    c000acbd <zoh_vari_process+0x1cc>
c000ace5:	39 e9                	cmp    ecx,ebp
c000ace7:	7d 13                	jge    c000acfc <zoh_vari_process+0x20b>
c000ace9:	89 e8                	mov    eax,ebp
c000aceb:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000acee:	29 c8                	sub    eax,ecx
c000acf0:	99                   	cdq    
c000acf1:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000acf4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000acf8:	da 44 24 10          	fiadd  DWORD PTR [esp+0x10]
c000acfc:	dd 5f 08             	fstp   QWORD PTR [edi+0x8]
c000acff:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000ad02:	85 c0                	test   eax,eax
c000ad04:	7f 1b                	jg     c000ad21 <zoh_vari_process+0x230>
c000ad06:	dd 04 24             	fld    QWORD PTR [esp]
c000ad09:	dd 1f                	fstp   QWORD PTR [edi]
c000ad0b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000ad0e:	99                   	cdq    
c000ad0f:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000ad12:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000ad15:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000ad18:	99                   	cdq    
c000ad19:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000ad1c:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000ad1f:	eb 25                	jmp    c000ad46 <zoh_vari_process+0x255>
c000ad21:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ad24:	31 d2                	xor    edx,edx
c000ad26:	29 e8                	sub    eax,ebp
c000ad28:	c1 e0 02             	shl    eax,0x2
c000ad2b:	39 d5                	cmp    ebp,edx
c000ad2d:	7e d7                	jle    c000ad06 <zoh_vari_process+0x215>
c000ad2f:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000ad31:	d9 04 01             	fld    DWORD PTR [ecx+eax*1]
c000ad34:	83 c0 04             	add    eax,0x4
c000ad37:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c000ad3b:	42                   	inc    edx
c000ad3c:	eb ed                	jmp    c000ad2b <zoh_vari_process+0x23a>
c000ad3e:	c7 44 24 0c 16 00 00 00 	mov    DWORD PTR [esp+0xc],0x16
c000ad46:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ad4a:	83 c4 2c             	add    esp,0x2c
c000ad4d:	5b                   	pop    ebx
c000ad4e:	5e                   	pop    esi
c000ad4f:	5f                   	pop    edi
c000ad50:	5d                   	pop    ebp
c000ad51:	c3                   	ret    

c000ad52 <zoh_reset>:
c000ad52:	83 ec 0c             	sub    esp,0xc
c000ad55:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ad59:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000ad5c:	85 c0                	test   eax,eax
c000ad5e:	74 20                	je     c000ad80 <zoh_reset+0x2e>
c000ad60:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000ad63:	83 c0 1c             	add    eax,0x1c
c000ad66:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000ad69:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000ad70:	c1 e2 02             	shl    edx,0x2
c000ad73:	51                   	push   ecx
c000ad74:	52                   	push   edx
c000ad75:	6a 00                	push   0x0
c000ad77:	50                   	push   eax
c000ad78:	e8 56 59 ff ff       	call   c00006d3 <memset>
c000ad7d:	83 c4 10             	add    esp,0x10
c000ad80:	83 c4 0c             	add    esp,0xc
c000ad83:	c3                   	ret    

c000ad84 <zoh_get_name>:
c000ad84:	31 c0                	xor    eax,eax
c000ad86:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000ad8b:	75 05                	jne    c000ad92 <zoh_get_name+0xe>
c000ad8d:	b8 54 0d 02 c0       	mov    eax,0xc0020d54
c000ad92:	c3                   	ret    

c000ad93 <zoh_get_description>:
c000ad93:	31 c0                	xor    eax,eax
c000ad95:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000ad9a:	75 05                	jne    c000ada1 <zoh_get_description+0xe>
c000ad9c:	b8 65 0d 02 c0       	mov    eax,0xc0020d65
c000ada1:	c3                   	ret    

c000ada2 <zoh_set_converter>:
c000ada2:	53                   	push   ebx
c000ada3:	b8 0a 00 00 00       	mov    eax,0xa
c000ada8:	83 ec 08             	sub    esp,0x8
c000adab:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000adaf:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000adb4:	75 6e                	jne    c000ae24 <zoh_set_converter+0x82>
c000adb6:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000adb9:	85 c0                	test   eax,eax
c000adbb:	74 13                	je     c000add0 <zoh_set_converter+0x2e>
c000adbd:	83 ec 0c             	sub    esp,0xc
c000adc0:	50                   	push   eax
c000adc1:	e8 80 12 00 00       	call   c000c046 <free>
c000adc6:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000adcd:	83 c4 10             	add    esp,0x10
c000add0:	50                   	push   eax
c000add1:	50                   	push   eax
c000add2:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000add5:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000addc:	50                   	push   eax
c000addd:	6a 01                	push   0x1
c000addf:	e8 82 12 00 00       	call   c000c066 <calloc>
c000ade4:	83 c4 10             	add    esp,0x10
c000ade7:	89 c2                	mov    edx,eax
c000ade9:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000adec:	85 d2                	test   edx,edx
c000adee:	b8 01 00 00 00       	mov    eax,0x1
c000adf3:	74 2f                	je     c000ae24 <zoh_set_converter+0x82>
c000adf5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000adf8:	83 ec 0c             	sub    esp,0xc
c000adfb:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000adfe:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000ae04:	c7 43 24 f1 aa 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000aaf1
c000ae0b:	c7 43 20 f1 aa 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000aaf1
c000ae12:	c7 43 28 52 ad 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ad52
c000ae19:	53                   	push   ebx
c000ae1a:	e8 33 ff ff ff       	call   c000ad52 <zoh_reset>
c000ae1f:	83 c4 10             	add    esp,0x10
c000ae22:	31 c0                	xor    eax,eax
c000ae24:	83 c4 08             	add    esp,0x8
c000ae27:	5b                   	pop    ebx
c000ae28:	c3                   	ret    
c000ae29:	90                   	nop

c000ae2a <Computer::close(int, int, void*)>:
c000ae2a:	57                   	push   edi
c000ae2b:	56                   	push   esi
c000ae2c:	53                   	push   ebx
c000ae2d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ae31:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ae35:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ae39:	83 ec 0c             	sub    esp,0xc
c000ae3c:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000ae42:	e8 61 58 00 00       	call   c00106a8 <Device::closeAll()>
c000ae47:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000ae4d:	83 c4 10             	add    esp,0x10
c000ae50:	8b 10                	mov    edx,DWORD PTR [eax]
c000ae52:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000ae56:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000ae5e:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000ae62:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae66:	5b                   	pop    ebx
c000ae67:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000ae6a:	5e                   	pop    esi
c000ae6b:	5f                   	pop    edi
c000ae6c:	ff e0                	jmp    eax

c000ae6e <Computer::Computer()>:
c000ae6e:	83 ec 0c             	sub    esp,0xc
c000ae71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae75:	83 ec 08             	sub    esp,0x8
c000ae78:	68 9c 0d 02 c0       	push   0xc0020d9c
c000ae7d:	50                   	push   eax
c000ae7e:	e8 9f 58 00 00       	call   c0010722 <Device::Device(char const*)>
c000ae83:	83 c4 10             	add    esp,0x10
c000ae86:	ba 64 0f 02 c0       	mov    edx,0xc0020f64
c000ae8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae8f:	89 10                	mov    DWORD PTR [eax],edx
c000ae91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae95:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000ae9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aea3:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000aead:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aeb1:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000aeb7:	83 ca 04             	or     edx,0x4
c000aeba:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000aec0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aec4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000aeca:	0f b6 d0             	movzx  edx,al
c000aecd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aed1:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000aed8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aedc:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000aee2:	0f b6 d0             	movzx  edx,al
c000aee5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aee9:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000aeee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aef2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000aef8:	8d 50 01             	lea    edx,[eax+0x1]
c000aefb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000aeff:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000af05:	0f b6 d0             	movzx  edx,al
c000af08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af0c:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000af10:	83 e1 3f             	and    ecx,0x3f
c000af13:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000af17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af1b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000af21:	0f b6 d0             	movzx  edx,al
c000af24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af28:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000af2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af33:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000af39:	0f b6 d0             	movzx  edx,al
c000af3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af40:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000af45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af49:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000af4f:	8d 50 01             	lea    edx,[eax+0x1]
c000af52:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000af56:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000af5c:	0f b6 d0             	movzx  edx,al
c000af5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af63:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000af67:	83 e1 3f             	and    ecx,0x3f
c000af6a:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000af6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af72:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000af78:	0f b6 d0             	movzx  edx,al
c000af7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af7f:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000af86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af8a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000af90:	0f b6 d0             	movzx  edx,al
c000af93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af97:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000af9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afa0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000afa6:	8d 50 01             	lea    edx,[eax+0x1]
c000afa9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000afad:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000afb3:	0f b6 d0             	movzx  edx,al
c000afb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afba:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000afbe:	83 e1 3f             	and    ecx,0x3f
c000afc1:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000afc5:	90                   	nop
c000afc6:	83 c4 0c             	add    esp,0xc
c000afc9:	c3                   	ret    

c000afca <Computer::setBootMessage(char const*)>:
c000afca:	c3                   	ret    
c000afcb:	90                   	nop

c000afcc <Computer::start()>:
c000afcc:	56                   	push   esi
c000afcd:	53                   	push   ebx
c000afce:	50                   	push   eax
c000afcf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000afd3:	e8 6c d8 00 00       	call   c0018844 <lockScheduler()>
c000afd8:	e8 9b db 00 00       	call   c0018b78 <schedule()>
c000afdd:	e8 64 d8 00 00       	call   c0018846 <unlockScheduler()>
c000afe2:	fb                   	sti    
c000afe3:	83 ec 0c             	sub    esp,0xc
c000afe6:	68 3b 07 00 00       	push   0x73b
c000afeb:	e8 48 40 00 00       	call   c000f038 <operator new(unsigned long)>
c000aff0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000aff7:	89 c6                	mov    esi,eax
c000aff9:	ff 35 d4 57 02 c0    	push   DWORD PTR ds:0xc00257d4
c000afff:	68 a5 0d 02 c0       	push   0xc0020da5
c000b004:	6a 01                	push   0x1
c000b006:	50                   	push   eax
c000b007:	e8 98 d6 00 00       	call   c00186a4 <Process::Process(bool, char const*, Process*, char**)>
c000b00c:	83 c4 20             	add    esp,0x20
c000b00f:	68 ff 00 00 00       	push   0xff
c000b014:	6a 00                	push   0x0
c000b016:	68 c3 b9 00 c0       	push   0xc000b9c3
c000b01b:	56                   	push   esi
c000b01c:	e8 4d d9 00 00       	call   c001896e <Process::createThread(void (*)(void*), void*, int)>
c000b021:	6a 7a                	push   0x7a
c000b023:	6a 00                	push   0x0
c000b025:	68 a7 91 01 c0       	push   0xc00191a7
c000b02a:	ff 35 d4 57 02 c0    	push   DWORD PTR ds:0xc00257d4
c000b030:	e8 39 d9 00 00       	call   c001896e <Process::createThread(void (*)(void*), void*, int)>
c000b035:	83 c4 20             	add    esp,0x20
c000b038:	a3 88 57 02 c0       	mov    ds:0xc0025788,eax
c000b03d:	c6 05 8d 43 02 c0 01 	mov    BYTE PTR ds:0xc002438d,0x1
c000b044:	e8 39 44 00 00       	call   c000f482 <initVFS()>
c000b049:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000b04f:	8b 10                	mov    edx,DWORD PTR [eax]
c000b051:	6a 00                	push   0x0
c000b053:	6a 00                	push   0x0
c000b055:	6a 00                	push   0x0
c000b057:	50                   	push   eax
c000b058:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000b05b:	e8 41 c0 00 00       	call   c00170a1 <setupSystemCalls()>
c000b060:	e8 1b 4f 00 00       	call   c000ff80 <loadClockSettings()>
c000b065:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b068:	e8 0f 56 00 00       	call   c001067c <Device::loadDriversForAll()>
c000b06d:	5a                   	pop    edx
c000b06e:	8b 1d 88 43 02 c0    	mov    ebx,DWORD PTR ds:0xc0024388
c000b074:	59                   	pop    ecx
c000b075:	6a 01                	push   0x1
c000b077:	68 b2 0d 02 c0       	push   0xc0020db2
c000b07c:	e8 f2 d1 00 00       	call   c0018273 <Thr::loadDLL(char const*, bool)>
c000b081:	5e                   	pop    esi
c000b082:	5a                   	pop    edx
c000b083:	53                   	push   ebx
c000b084:	50                   	push   eax
c000b085:	e8 af d3 00 00       	call   c0018439 <Thr::executeDLL(unsigned long, void*)>
c000b08a:	c7 04 24 28 1f 02 c0 	mov    DWORD PTR [esp],0xc0021f28
c000b091:	e8 91 40 00 00       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c000b096:	83 c4 10             	add    esp,0x10
c000b099:	83 ec 0c             	sub    esp,0xc
c000b09c:	6a 02                	push   0x2
c000b09e:	e8 2f dc 00 00       	call   c0018cd2 <blockTask(TaskState)>
c000b0a3:	83 c4 10             	add    esp,0x10
c000b0a6:	eb f1                	jmp    c000b099 <Computer::start()+0xcd>

c000b0a8 <firstTask()>:
c000b0a8:	83 ec 18             	sub    esp,0x18
c000b0ab:	ff 35 88 43 02 c0    	push   DWORD PTR ds:0xc0024388
c000b0b1:	e8 16 ff ff ff       	call   c000afcc <Computer::start()>

c000b0b6 <Computer::detectFeatures()>:
c000b0b6:	55                   	push   ebp
c000b0b7:	57                   	push   edi
c000b0b8:	56                   	push   esi
c000b0b9:	53                   	push   ebx
c000b0ba:	83 ec 1c             	sub    esp,0x1c
c000b0bd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b0c1:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000b0cb:	e8 ba 52 ff ff       	call   c000038a <detectCPUID>
c000b0d0:	85 c0                	test   eax,eax
c000b0d2:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b0d8:	0f 95 c2             	setne  dl
c000b0db:	83 e0 fd             	and    eax,0xfffffffd
c000b0de:	d1 e2                	shl    edx,1
c000b0e0:	09 d0                	or     eax,edx
c000b0e2:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b0e8:	a8 02                	test   al,0x2
c000b0ea:	75 46                	jne    c000b132 <Computer::detectFeatures()+0x7c>
c000b0ec:	f6 05 a1 43 02 c0 04 	test   BYTE PTR ds:0xc00243a1,0x4
c000b0f3:	74 07                	je     c000b0fc <Computer::detectFeatures()+0x46>
c000b0f5:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000b0fc:	e8 95 3d 01 00       	call   c001ee96 <x87Detect>
c000b101:	83 e0 01             	and    eax,0x1
c000b104:	c1 e0 04             	shl    eax,0x4
c000b107:	88 c2                	mov    dl,al
c000b109:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b10f:	83 e0 ef             	and    eax,0xffffffef
c000b112:	09 d0                	or     eax,edx
c000b114:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b11a:	a8 10                	test   al,0x10
c000b11c:	0f 85 10 01 00 00    	jne    c000b232 <Computer::detectFeatures()+0x17c>
c000b122:	84 c0                	test   al,al
c000b124:	0f 88 2b 01 00 00    	js     c000b255 <Computer::detectFeatures()+0x19f>
c000b12a:	83 c4 1c             	add    esp,0x1c
c000b12d:	5b                   	pop    ebx
c000b12e:	5e                   	pop    esi
c000b12f:	5f                   	pop    edi
c000b130:	5d                   	pop    ebp
c000b131:	c3                   	ret    
c000b132:	83 ec 0c             	sub    esp,0xc
c000b135:	6a 20                	push   0x20
c000b137:	e8 7d 95 00 00       	call   c00146b9 <cpuidCheckEDX(unsigned int)>
c000b13c:	83 e0 01             	and    eax,0x1
c000b13f:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000b146:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b14c:	83 e0 f7             	and    eax,0xfffffff7
c000b14f:	09 d0                	or     eax,edx
c000b151:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b157:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000b15e:	e8 56 95 00 00       	call   c00146b9 <cpuidCheckEDX(unsigned int)>
c000b163:	83 e0 01             	and    eax,0x1
c000b166:	88 c2                	mov    dl,al
c000b168:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000b16e:	83 e0 fe             	and    eax,0xfffffffe
c000b171:	09 d0                	or     eax,edx
c000b173:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000b179:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000b180:	e8 34 95 00 00       	call   c00146b9 <cpuidCheckEDX(unsigned int)>
c000b185:	c1 e0 07             	shl    eax,0x7
c000b188:	88 c2                	mov    dl,al
c000b18a:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000b190:	83 e0 7f             	and    eax,0x7f
c000b193:	09 d0                	or     eax,edx
c000b195:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000b19b:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000b1a2:	e8 12 95 00 00       	call   c00146b9 <cpuidCheckEDX(unsigned int)>
c000b1a7:	83 c4 10             	add    esp,0x10
c000b1aa:	83 e0 01             	and    eax,0x1
c000b1ad:	c1 e0 05             	shl    eax,0x5
c000b1b0:	88 c2                	mov    dl,al
c000b1b2:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b1b8:	83 e0 df             	and    eax,0xffffffdf
c000b1bb:	09 d0                	or     eax,edx
c000b1bd:	f7 05 a0 43 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc00243a0,0x401
c000b1c7:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b1cd:	0f 84 a8 00 00 00    	je     c000b27b <Computer::detectFeatures()+0x1c5>
c000b1d3:	83 ec 0c             	sub    esp,0xc
c000b1d6:	80 a3 e8 01 00 00 fe 	and    BYTE PTR [ebx+0x1e8],0xfe
c000b1dd:	8d 44 24 18          	lea    eax,[esp+0x18]
c000b1e1:	50                   	push   eax
c000b1e2:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000b1e6:	55                   	push   ebp
c000b1e7:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000b1eb:	57                   	push   edi
c000b1ec:	8d 74 24 18          	lea    esi,[esp+0x18]
c000b1f0:	56                   	push   esi
c000b1f1:	68 00 00 00 80       	push   0x80000000
c000b1f6:	e8 3b 94 00 00       	call   c0014636 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000b1fb:	83 c4 20             	add    esp,0x20
c000b1fe:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000b205:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000b209:	0f 86 dd fe ff ff    	jbe    c000b0ec <Computer::detectFeatures()+0x36>
c000b20f:	83 ec 0c             	sub    esp,0xc
c000b212:	50                   	push   eax
c000b213:	55                   	push   ebp
c000b214:	57                   	push   edi
c000b215:	56                   	push   esi
c000b216:	68 01 00 00 80       	push   0x80000001
c000b21b:	e8 16 94 00 00       	call   c0014636 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000b220:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000b22a:	83 c4 20             	add    esp,0x20
c000b22d:	e9 ba fe ff ff       	jmp    c000b0ec <Computer::detectFeatures()+0x36>
c000b232:	e8 19 3c 01 00       	call   c001ee50 <sseDetect>
c000b237:	88 c2                	mov    dl,al
c000b239:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b23f:	c1 e2 07             	shl    edx,0x7
c000b242:	83 e0 7f             	and    eax,0x7f
c000b245:	09 d0                	or     eax,edx
c000b247:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b24d:	84 c0                	test   al,al
c000b24f:	0f 89 d5 fe ff ff    	jns    c000b12a <Computer::detectFeatures()+0x74>
c000b255:	e8 e6 3b 01 00       	call   c001ee40 <avxDetect>
c000b25a:	83 e0 01             	and    eax,0x1
c000b25d:	c1 e0 05             	shl    eax,0x5
c000b260:	88 c2                	mov    dl,al
c000b262:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000b268:	83 e0 df             	and    eax,0xffffffdf
c000b26b:	09 d0                	or     eax,edx
c000b26d:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000b273:	83 c4 1c             	add    esp,0x1c
c000b276:	5b                   	pop    ebx
c000b277:	5e                   	pop    esi
c000b278:	5f                   	pop    edi
c000b279:	5d                   	pop    ebp
c000b27a:	c3                   	ret    
c000b27b:	83 ec 0c             	sub    esp,0xc
c000b27e:	68 00 02 00 00       	push   0x200
c000b283:	e8 31 94 00 00       	call   c00146b9 <cpuidCheckEDX(unsigned int)>
c000b288:	83 c4 10             	add    esp,0x10
c000b28b:	e9 43 ff ff ff       	jmp    c000b1d3 <Computer::detectFeatures()+0x11d>

c000b290 <Computer::displayFeatures()>:
c000b290:	53                   	push   ebx
c000b291:	83 ec 14             	sub    esp,0x14
c000b294:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b298:	68 d5 0d 02 c0       	push   0xc0020dd5
c000b29d:	e8 85 3e 00 00       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c000b2a2:	83 c4 10             	add    esp,0x10
c000b2a5:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c000b2ac:	0f 85 73 02 00 00    	jne    c000b525 <Computer::displayFeatures()+0x295>
c000b2b2:	b8 d2 0d 02 c0       	mov    eax,0xc0020dd2
c000b2b7:	83 ec 08             	sub    esp,0x8
c000b2ba:	50                   	push   eax
c000b2bb:	68 e8 0d 02 c0       	push   0xc0020de8
c000b2c0:	e8 62 3e 00 00       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c000b2c5:	83 c4 10             	add    esp,0x10
c000b2c8:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c000b2cf:	0f 85 8c 02 00 00    	jne    c000b561 <Computer::displayFeatures()+0x2d1>
c000b2d5:	b8 d2 0d 02 c0       	mov    eax,0xc0020dd2
c000b2da:	83 ec 08             	sub    esp,0x8
c000b2dd:	50                   	push   eax
c000b2de:	68 f9 0d 02 c0       	push   0xc0020df9
c000b2e3:	e8 3f 3e 00 00       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c000b2e8:	83 c4 10             	add    esp,0x10
c000b2eb:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c000b2f2:	0f 85 5f 02 00 00    	jne    c000b557 <Computer::displayFeatures()+0x2c7>
c000b2f8:	b8 d2 0d 02 c0       	mov    eax,0xc0020dd2
c000b2fd:	83 ec 08             	sub    esp,0x8
c000b300:	50                   	push   eax
c000b301:	68 0a 0e 02 c0       	push   0xc0020e0a
c000b306:	e8 1c 3e 00 00       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c000b30b:	83 c4 10             	add    esp,0x10
c000b30e:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c000b315:	0f 85 32 02 00 00    	jne    c000b54d <Computer::displayFeatures()+0x2bd>
c000b31b:	b8 d2 0d 02 c0       	mov    eax,0xc0020dd2
c000b320:	83 ec 08             	sub    esp,0x8
c000b323:	50                   	push   eax
c000b324:	68 1b 0e 02 c0       	push   0xc0020e1b
c000b329:	e8 f9 3d 00 00       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c000b32e:	83 c4 10             	add    esp,0x10
c000b331:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c000b338:	0f 85 05 02 00 00    	jne    c000b543 <Computer::displayFeatures()+0x2b3>
c000b33e:	b8 d2 0d 02 c0       	mov    eax,0xc0020dd2
c000b343:	83 ec 08             	sub    esp,0x8
c000b346:	50                   	push   eax
c000b347:	68 2c 0e 02 c0       	push   0xc0020e2c
c000b34c:	e8 d6 3d 00 00       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c000b351:	83 c4 10             	add    esp,0x10
c000b354:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c000b35b:	0f 85 d8 01 00 00    	jne    c000b539 <Computer::displayFeatures()+0x2a9>
c000b361:	b8 d2 0d 02 c0       	mov    eax,0xc0020dd2
c000b366:	83 ec 08             	sub    esp,0x8
c000b369:	50                   	push   eax
c000b36a:	68 3d 0e 02 c0       	push   0xc0020e3d
c000b36f:	e8 b3 3d 00 00       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c000b374:	83 c4 10             	add    esp,0x10
c000b377:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000b37e:	0f 85 ab 01 00 00    	jne    c000b52f <Computer::displayFeatures()+0x29f>
c000b384:	b8 d2 0d 02 c0       	mov    eax,0xc0020dd2
c000b389:	83 ec 08             	sub    esp,0x8
c000b38c:	50                   	push   eax
c000b38d:	68 4e 0e 02 c0       	push   0xc0020e4e
c000b392:	e8 90 3d 00 00       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c000b397:	83 c4 10             	add    esp,0x10
c000b39a:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c000b3a1:	0f 88 1b 02 00 00    	js     c000b5c2 <Computer::displayFeatures()+0x332>
c000b3a7:	b8 d2 0d 02 c0       	mov    eax,0xc0020dd2
c000b3ac:	83 ec 08             	sub    esp,0x8
c000b3af:	50                   	push   eax
c000b3b0:	68 5f 0e 02 c0       	push   0xc0020e5f
c000b3b5:	e8 6d 3d 00 00       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c000b3ba:	83 c4 10             	add    esp,0x10
c000b3bd:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000b3c4:	0f 85 a1 01 00 00    	jne    c000b56b <Computer::displayFeatures()+0x2db>
c000b3ca:	b8 d2 0d 02 c0       	mov    eax,0xc0020dd2
c000b3cf:	83 ec 08             	sub    esp,0x8
c000b3d2:	50                   	push   eax
c000b3d3:	68 70 0e 02 c0       	push   0xc0020e70
c000b3d8:	e8 4a 3d 00 00       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c000b3dd:	83 c4 10             	add    esp,0x10
c000b3e0:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000b3e7:	0f 85 cb 01 00 00    	jne    c000b5b8 <Computer::displayFeatures()+0x328>
c000b3ed:	b8 d2 0d 02 c0       	mov    eax,0xc0020dd2
c000b3f2:	83 ec 08             	sub    esp,0x8
c000b3f5:	50                   	push   eax
c000b3f6:	68 81 0e 02 c0       	push   0xc0020e81
c000b3fb:	e8 27 3d 00 00       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c000b400:	83 c4 10             	add    esp,0x10
c000b403:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000b40a:	0f 85 9e 01 00 00    	jne    c000b5ae <Computer::displayFeatures()+0x31e>
c000b410:	b8 d2 0d 02 c0       	mov    eax,0xc0020dd2
c000b415:	83 ec 08             	sub    esp,0x8
c000b418:	50                   	push   eax
c000b419:	68 92 0e 02 c0       	push   0xc0020e92
c000b41e:	e8 04 3d 00 00       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c000b423:	83 c4 10             	add    esp,0x10
c000b426:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c000b42d:	0f 85 71 01 00 00    	jne    c000b5a4 <Computer::displayFeatures()+0x314>
c000b433:	b8 d2 0d 02 c0       	mov    eax,0xc0020dd2
c000b438:	83 ec 08             	sub    esp,0x8
c000b43b:	50                   	push   eax
c000b43c:	68 a3 0e 02 c0       	push   0xc0020ea3
c000b441:	e8 e1 3c 00 00       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c000b446:	83 c4 10             	add    esp,0x10
c000b449:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c000b450:	0f 85 44 01 00 00    	jne    c000b59a <Computer::displayFeatures()+0x30a>
c000b456:	b8 d2 0d 02 c0       	mov    eax,0xc0020dd2
c000b45b:	83 ec 08             	sub    esp,0x8
c000b45e:	50                   	push   eax
c000b45f:	68 b4 0e 02 c0       	push   0xc0020eb4
c000b464:	e8 be 3c 00 00       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c000b469:	83 c4 10             	add    esp,0x10
c000b46c:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000b473:	0f 85 17 01 00 00    	jne    c000b590 <Computer::displayFeatures()+0x300>
c000b479:	b8 d2 0d 02 c0       	mov    eax,0xc0020dd2
c000b47e:	83 ec 08             	sub    esp,0x8
c000b481:	50                   	push   eax
c000b482:	68 c5 0e 02 c0       	push   0xc0020ec5
c000b487:	e8 9b 3c 00 00       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c000b48c:	83 c4 10             	add    esp,0x10
c000b48f:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000b496:	0f 85 ea 00 00 00    	jne    c000b586 <Computer::displayFeatures()+0x2f6>
c000b49c:	b8 d2 0d 02 c0       	mov    eax,0xc0020dd2
c000b4a1:	83 ec 08             	sub    esp,0x8
c000b4a4:	50                   	push   eax
c000b4a5:	68 d6 0e 02 c0       	push   0xc0020ed6
c000b4aa:	e8 78 3c 00 00       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c000b4af:	83 c4 10             	add    esp,0x10
c000b4b2:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c000b4b9:	0f 88 0d 01 00 00    	js     c000b5cc <Computer::displayFeatures()+0x33c>
c000b4bf:	b8 d2 0d 02 c0       	mov    eax,0xc0020dd2
c000b4c4:	83 ec 08             	sub    esp,0x8
c000b4c7:	50                   	push   eax
c000b4c8:	68 e7 0e 02 c0       	push   0xc0020ee7
c000b4cd:	e8 55 3c 00 00       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c000b4d2:	83 c4 10             	add    esp,0x10
c000b4d5:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000b4dc:	0f 85 9a 00 00 00    	jne    c000b57c <Computer::displayFeatures()+0x2ec>
c000b4e2:	b8 d2 0d 02 c0       	mov    eax,0xc0020dd2
c000b4e7:	83 ec 08             	sub    esp,0x8
c000b4ea:	50                   	push   eax
c000b4eb:	68 f8 0e 02 c0       	push   0xc0020ef8
c000b4f0:	e8 32 3c 00 00       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c000b4f5:	83 c4 10             	add    esp,0x10
c000b4f8:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000b4ff:	75 74                	jne    c000b575 <Computer::displayFeatures()+0x2e5>
c000b501:	b8 d2 0d 02 c0       	mov    eax,0xc0020dd2
c000b506:	83 ec 08             	sub    esp,0x8
c000b509:	50                   	push   eax
c000b50a:	68 09 0f 02 c0       	push   0xc0020f09
c000b50f:	e8 13 3c 00 00       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c000b514:	c7 44 24 20 06 25 02 c0 	mov    DWORD PTR [esp+0x20],0xc0022506
c000b51c:	83 c4 18             	add    esp,0x18
c000b51f:	5b                   	pop    ebx
c000b520:	e9 02 3c 00 00       	jmp    c000f127 <Dbg::kprintf(char const*, ...)>
c000b525:	b8 ce 0d 02 c0       	mov    eax,0xc0020dce
c000b52a:	e9 88 fd ff ff       	jmp    c000b2b7 <Computer::displayFeatures()+0x27>
c000b52f:	b8 ce 0d 02 c0       	mov    eax,0xc0020dce
c000b534:	e9 50 fe ff ff       	jmp    c000b389 <Computer::displayFeatures()+0xf9>
c000b539:	b8 ce 0d 02 c0       	mov    eax,0xc0020dce
c000b53e:	e9 23 fe ff ff       	jmp    c000b366 <Computer::displayFeatures()+0xd6>
c000b543:	b8 ce 0d 02 c0       	mov    eax,0xc0020dce
c000b548:	e9 f6 fd ff ff       	jmp    c000b343 <Computer::displayFeatures()+0xb3>
c000b54d:	b8 ce 0d 02 c0       	mov    eax,0xc0020dce
c000b552:	e9 c9 fd ff ff       	jmp    c000b320 <Computer::displayFeatures()+0x90>
c000b557:	b8 ce 0d 02 c0       	mov    eax,0xc0020dce
c000b55c:	e9 9c fd ff ff       	jmp    c000b2fd <Computer::displayFeatures()+0x6d>
c000b561:	b8 ce 0d 02 c0       	mov    eax,0xc0020dce
c000b566:	e9 6f fd ff ff       	jmp    c000b2da <Computer::displayFeatures()+0x4a>
c000b56b:	b8 ce 0d 02 c0       	mov    eax,0xc0020dce
c000b570:	e9 5a fe ff ff       	jmp    c000b3cf <Computer::displayFeatures()+0x13f>
c000b575:	b8 ce 0d 02 c0       	mov    eax,0xc0020dce
c000b57a:	eb 8a                	jmp    c000b506 <Computer::displayFeatures()+0x276>
c000b57c:	b8 ce 0d 02 c0       	mov    eax,0xc0020dce
c000b581:	e9 61 ff ff ff       	jmp    c000b4e7 <Computer::displayFeatures()+0x257>
c000b586:	b8 ce 0d 02 c0       	mov    eax,0xc0020dce
c000b58b:	e9 11 ff ff ff       	jmp    c000b4a1 <Computer::displayFeatures()+0x211>
c000b590:	b8 ce 0d 02 c0       	mov    eax,0xc0020dce
c000b595:	e9 e4 fe ff ff       	jmp    c000b47e <Computer::displayFeatures()+0x1ee>
c000b59a:	b8 ce 0d 02 c0       	mov    eax,0xc0020dce
c000b59f:	e9 b7 fe ff ff       	jmp    c000b45b <Computer::displayFeatures()+0x1cb>
c000b5a4:	b8 ce 0d 02 c0       	mov    eax,0xc0020dce
c000b5a9:	e9 8a fe ff ff       	jmp    c000b438 <Computer::displayFeatures()+0x1a8>
c000b5ae:	b8 ce 0d 02 c0       	mov    eax,0xc0020dce
c000b5b3:	e9 5d fe ff ff       	jmp    c000b415 <Computer::displayFeatures()+0x185>
c000b5b8:	b8 ce 0d 02 c0       	mov    eax,0xc0020dce
c000b5bd:	e9 30 fe ff ff       	jmp    c000b3f2 <Computer::displayFeatures()+0x162>
c000b5c2:	b8 ce 0d 02 c0       	mov    eax,0xc0020dce
c000b5c7:	e9 e0 fd ff ff       	jmp    c000b3ac <Computer::displayFeatures()+0x11c>
c000b5cc:	b8 ce 0d 02 c0       	mov    eax,0xc0020dce
c000b5d1:	e9 ee fe ff ff       	jmp    c000b4c4 <Computer::displayFeatures()+0x234>

c000b5d6 <Computer::rdmsr(unsigned int)>:
c000b5d6:	83 ec 0c             	sub    esp,0xc
c000b5d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b5dd:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000b5e4:	74 0a                	je     c000b5f0 <Computer::rdmsr(unsigned int)+0x1a>
c000b5e6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b5ea:	0f 32                	rdmsr  
c000b5ec:	83 c4 0c             	add    esp,0xc
c000b5ef:	c3                   	ret    
c000b5f0:	83 ec 0c             	sub    esp,0xc
c000b5f3:	68 1a 0f 02 c0       	push   0xc0020f1a
c000b5f8:	e8 f3 a2 00 00       	call   c00158f0 <Krnl::panic(char const*)>
c000b5fd:	83 c4 10             	add    esp,0x10
c000b600:	eb e4                	jmp    c000b5e6 <Computer::rdmsr(unsigned int)+0x10>

c000b602 <Computer::wrmsr(unsigned int, unsigned long long)>:
c000b602:	57                   	push   edi
c000b603:	56                   	push   esi
c000b604:	52                   	push   edx
c000b605:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b609:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000b60d:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000b611:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000b618:	74 0e                	je     c000b628 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000b61a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b61e:	89 f0                	mov    eax,esi
c000b620:	89 fa                	mov    edx,edi
c000b622:	0f 30                	wrmsr  
c000b624:	58                   	pop    eax
c000b625:	5e                   	pop    esi
c000b626:	5f                   	pop    edi
c000b627:	c3                   	ret    
c000b628:	83 ec 0c             	sub    esp,0xc
c000b62b:	68 20 0f 02 c0       	push   0xc0020f20
c000b630:	e8 bb a2 00 00       	call   c00158f0 <Krnl::panic(char const*)>
c000b635:	83 c4 10             	add    esp,0x10
c000b638:	eb e0                	jmp    c000b61a <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000b63a <Computer::nmiEnabled()>:
c000b63a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b63e:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000b644:	c3                   	ret    
c000b645:	90                   	nop

c000b646 <Computer::readCMOS(unsigned char)>:
c000b646:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b64a:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000b651:	19 c0                	sbb    eax,eax
c000b653:	83 e0 80             	and    eax,0xffffff80
c000b656:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000b65a:	e6 70                	out    0x70,al
c000b65c:	e4 71                	in     al,0x71
c000b65e:	c3                   	ret    
c000b65f:	90                   	nop

c000b660 <Computer::enableNMI(bool)>:
c000b660:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b664:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b668:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000b66e:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000b676:	eb ce                	jmp    c000b646 <Computer::readCMOS(unsigned char)>

c000b678 <Computer::open(int, int, void*)>:
c000b678:	56                   	push   esi
c000b679:	53                   	push   ebx
c000b67a:	83 ec 10             	sub    esp,0x10
c000b67d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b681:	f6 05 a0 43 02 c0 04 	test   BYTE PTR ds:0xc00243a0,0x4
c000b688:	68 68 22 00 00       	push   0x2268
c000b68d:	0f 94 05 c0 37 02 c0 	sete   BYTE PTR ds:0xc00237c0
c000b694:	e8 9f 39 00 00       	call   c000f038 <operator new(unsigned long)>
c000b699:	89 04 24             	mov    DWORD PTR [esp],eax
c000b69c:	89 c6                	mov    esi,eax
c000b69e:	e8 33 86 00 00       	call   c0013cd6 <ACPI::ACPI()>
c000b6a3:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000b6a9:	58                   	pop    eax
c000b6aa:	5a                   	pop    edx
c000b6ab:	56                   	push   esi
c000b6ac:	53                   	push   ebx
c000b6ad:	e8 80 4e 00 00       	call   c0010532 <Device::addChild(Device*)>
c000b6b2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b6b5:	e8 fc f9 ff ff       	call   c000b0b6 <Computer::detectFeatures()>
c000b6ba:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b6bd:	e8 ce fb ff ff       	call   c000b290 <Computer::displayFeatures()>
c000b6c2:	59                   	pop    ecx
c000b6c3:	5e                   	pop    esi
c000b6c4:	6a 01                	push   0x1
c000b6c6:	53                   	push   ebx
c000b6c7:	e8 94 ff ff ff       	call   c000b660 <Computer::enableNMI(bool)>
c000b6cc:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000b6d3:	e8 60 39 00 00       	call   c000f038 <operator new(unsigned long)>
c000b6d8:	89 04 24             	mov    DWORD PTR [esp],eax
c000b6db:	89 c6                	mov    esi,eax
c000b6dd:	e8 a2 90 00 00       	call   c0014784 <CPU::CPU()>
c000b6e2:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000b6e8:	58                   	pop    eax
c000b6e9:	5a                   	pop    edx
c000b6ea:	56                   	push   esi
c000b6eb:	53                   	push   ebx
c000b6ec:	e8 41 4e 00 00       	call   c0010532 <Device::addChild(Device*)>
c000b6f1:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000b6f7:	8b 10                	mov    edx,DWORD PTR [eax]
c000b6f9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000b6fd:	6a 00                	push   0x0
c000b6ff:	6a 00                	push   0x0
c000b701:	50                   	push   eax
c000b702:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000b705:	83 c4 20             	add    esp,0x20
c000b708:	e8 8d 53 00 00       	call   c0010a9a <setupFPU()>
c000b70d:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000b713:	85 c0                	test   eax,eax
c000b715:	74 1f                	je     c000b736 <Computer::open(int, int, void*)+0xbe>
c000b717:	83 ec 08             	sub    esp,0x8
c000b71a:	50                   	push   eax
c000b71b:	53                   	push   ebx
c000b71c:	e8 11 4e 00 00       	call   c0010532 <Device::addChild(Device*)>
c000b721:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000b727:	8b 10                	mov    edx,DWORD PTR [eax]
c000b729:	6a 00                	push   0x0
c000b72b:	6a 00                	push   0x0
c000b72d:	6a 00                	push   0x0
c000b72f:	50                   	push   eax
c000b730:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000b733:	83 c4 20             	add    esp,0x20
c000b736:	83 ec 0c             	sub    esp,0xc
c000b739:	68 a8 b0 00 c0       	push   0xc000b0a8
c000b73e:	e8 2b d3 00 00       	call   c0018a6e <setupMultitasking(void (*)())>
c000b743:	83 c4 14             	add    esp,0x14
c000b746:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000b74b:	5b                   	pop    ebx
c000b74c:	5e                   	pop    esi
c000b74d:	c3                   	ret    

c000b74e <Computer::disableNMI()>:
c000b74e:	6a 00                	push   0x0
c000b750:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000b754:	e8 07 ff ff ff       	call   c000b660 <Computer::enableNMI(bool)>
c000b759:	58                   	pop    eax
c000b75a:	5a                   	pop    edx
c000b75b:	c3                   	ret    

c000b75c <Computer::writeCMOS(unsigned char, unsigned char)>:
c000b75c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b760:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000b767:	19 c0                	sbb    eax,eax
c000b769:	83 e0 80             	and    eax,0xffffff80
c000b76c:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000b770:	e6 70                	out    0x70,al
c000b772:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b776:	e6 71                	out    0x71,al
c000b778:	c3                   	ret    
c000b779:	90                   	nop

c000b77a <Computer::handleNMI()>:
c000b77a:	56                   	push   esi
c000b77b:	53                   	push   ebx
c000b77c:	83 ec 10             	sub    esp,0x10
c000b77f:	e4 92                	in     al,0x92
c000b781:	89 c6                	mov    esi,eax
c000b783:	e4 61                	in     al,0x61
c000b785:	68 26 0f 02 c0       	push   0xc0020f26
c000b78a:	88 c3                	mov    bl,al
c000b78c:	e8 96 39 00 00       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c000b791:	83 c4 10             	add    esp,0x10
c000b794:	83 e6 10             	and    esi,0x10
c000b797:	75 0d                	jne    c000b7a6 <Computer::handleNMI()+0x2c>
c000b799:	f6 c3 40             	test   bl,0x40
c000b79c:	75 1d                	jne    c000b7bb <Computer::handleNMI()+0x41>
c000b79e:	84 db                	test   bl,bl
c000b7a0:	78 2d                	js     c000b7cf <Computer::handleNMI()+0x55>
c000b7a2:	58                   	pop    eax
c000b7a3:	5b                   	pop    ebx
c000b7a4:	5e                   	pop    esi
c000b7a5:	c3                   	ret    
c000b7a6:	83 ec 0c             	sub    esp,0xc
c000b7a9:	68 37 0f 02 c0       	push   0xc0020f37
c000b7ae:	e8 3d a1 00 00       	call   c00158f0 <Krnl::panic(char const*)>
c000b7b3:	83 c4 10             	add    esp,0x10
c000b7b6:	f6 c3 40             	test   bl,0x40
c000b7b9:	74 e3                	je     c000b79e <Computer::handleNMI()+0x24>
c000b7bb:	83 ec 0c             	sub    esp,0xc
c000b7be:	68 44 0f 02 c0       	push   0xc0020f44
c000b7c3:	e8 28 a1 00 00       	call   c00158f0 <Krnl::panic(char const*)>
c000b7c8:	83 c4 10             	add    esp,0x10
c000b7cb:	84 db                	test   bl,bl
c000b7cd:	79 d3                	jns    c000b7a2 <Computer::handleNMI()+0x28>
c000b7cf:	c7 44 24 10 4e 0f 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020f4e
c000b7d7:	5a                   	pop    edx
c000b7d8:	5b                   	pop    ebx
c000b7d9:	5e                   	pop    esi
c000b7da:	e9 11 a1 00 00       	jmp    c00158f0 <Krnl::panic(char const*)>
c000b7df:	90                   	nop

c000b7e0 <Computer::setDiskActivityLight(int, bool)>:
c000b7e0:	56                   	push   esi
c000b7e1:	53                   	push   ebx
c000b7e2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b7e6:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000b7eb:	77 1b                	ja     c000b808 <Computer::setDiskActivityLight(int, bool)+0x28>
c000b7ed:	e4 92                	in     al,0x92
c000b7ef:	bb 40 00 00 00       	mov    ebx,0x40
c000b7f4:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000b7f8:	89 da                	mov    edx,ebx
c000b7fa:	d3 e2                	shl    edx,cl
c000b7fc:	89 f1                	mov    ecx,esi
c000b7fe:	f7 d2                	not    edx
c000b800:	d3 e3                	shl    ebx,cl
c000b802:	21 d0                	and    eax,edx
c000b804:	09 d8                	or     eax,ebx
c000b806:	e6 92                	out    0x92,al
c000b808:	5b                   	pop    ebx
c000b809:	5e                   	pop    esi
c000b80a:	c3                   	ret    
c000b80b:	90                   	nop

c000b80c <GDTEntry::setBase(unsigned int)>:
c000b80c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b810:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000b814:	89 c1                	mov    ecx,eax
c000b816:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000b81a:	c1 e9 10             	shr    ecx,0x10
c000b81d:	c1 e8 18             	shr    eax,0x18
c000b820:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000b823:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000b826:	c3                   	ret    
c000b827:	90                   	nop

c000b828 <GDTEntry::setLimit(unsigned int)>:
c000b828:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000b82c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b830:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000b833:	66 89 01             	mov    WORD PTR [ecx],ax
c000b836:	83 e2 f0             	and    edx,0xfffffff0
c000b839:	c1 e8 10             	shr    eax,0x10
c000b83c:	83 e0 0f             	and    eax,0xf
c000b83f:	09 d0                	or     eax,edx
c000b841:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000b844:	c3                   	ret    
c000b845:	90                   	nop

c000b846 <GDT::GDT()>:
c000b846:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b84a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000b850:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b854:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000b85a:	90                   	nop
c000b85b:	c3                   	ret    

c000b85c <GDT::addEntry(GDTEntry)>:
c000b85c:	53                   	push   ebx
c000b85d:	83 ec 0c             	sub    esp,0xc
c000b860:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000b864:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b866:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000b86d:	52                   	push   edx
c000b86e:	50                   	push   eax
c000b86f:	68 88 0f 02 c0       	push   0xc0020f88
c000b874:	e8 ae 38 00 00       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c000b879:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b87b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000b87f:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000b883:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000b887:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000b88b:	8d 50 01             	lea    edx,[eax+0x1]
c000b88e:	c1 e0 03             	shl    eax,0x3
c000b891:	89 13                	mov    DWORD PTR [ebx],edx
c000b893:	83 c4 18             	add    esp,0x18
c000b896:	5b                   	pop    ebx
c000b897:	c3                   	ret    

c000b898 <GDT::getNumberOfEntries()>:
c000b898:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b89c:	8b 00                	mov    eax,DWORD PTR [eax]
c000b89e:	c3                   	ret    
c000b89f:	90                   	nop

c000b8a0 <GDT::flush()>:
c000b8a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b8a4:	8b 10                	mov    edx,DWORD PTR [eax]
c000b8a6:	83 c0 04             	add    eax,0x4
c000b8a9:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000b8b0:	a3 92 43 02 c0       	mov    ds:0xc0024392,eax
c000b8b5:	66 89 15 90 43 02 c0 	mov    WORD PTR ds:0xc0024390,dx
c000b8bc:	e9 3d 4b ff ff       	jmp    c00003fe <loadGDT>
c000b8c1:	90                   	nop

c000b8c2 <GDT::setup()>:
c000b8c2:	55                   	push   ebp
c000b8c3:	57                   	push   edi
c000b8c4:	56                   	push   esi
c000b8c5:	53                   	push   ebx
c000b8c6:	83 ec 3c             	sub    esp,0x3c
c000b8c9:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000b8cd:	6a 00                	push   0x0
c000b8cf:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000b8d3:	53                   	push   ebx
c000b8d4:	e8 33 ff ff ff       	call   c000b80c <GDTEntry::setBase(unsigned int)>
c000b8d9:	6a 00                	push   0x0
c000b8db:	53                   	push   ebx
c000b8dc:	e8 47 ff ff ff       	call   c000b828 <GDTEntry::setLimit(unsigned int)>
c000b8e1:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000b8e9:	6a 00                	push   0x0
c000b8eb:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000b8ef:	53                   	push   ebx
c000b8f0:	e8 17 ff ff ff       	call   c000b80c <GDTEntry::setBase(unsigned int)>
c000b8f5:	68 ff ff ff 00       	push   0xffffff
c000b8fa:	53                   	push   ebx
c000b8fb:	e8 28 ff ff ff       	call   c000b828 <GDTEntry::setLimit(unsigned int)>
c000b900:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000b904:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000b909:	0d 00 9a c0 00       	or     eax,0xc09a00
c000b90e:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000b912:	83 c4 20             	add    esp,0x20
c000b915:	6a 00                	push   0x0
c000b917:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000b91b:	53                   	push   ebx
c000b91c:	e8 eb fe ff ff       	call   c000b80c <GDTEntry::setBase(unsigned int)>
c000b921:	68 ff ff ff 00       	push   0xffffff
c000b926:	53                   	push   ebx
c000b927:	e8 fc fe ff ff       	call   c000b828 <GDTEntry::setLimit(unsigned int)>
c000b92c:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000b930:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b934:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000b938:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000b93c:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b940:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000b945:	0d 00 92 c0 00       	or     eax,0xc09200
c000b94a:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000b94e:	89 d8                	mov    eax,ebx
c000b950:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000b954:	80 cc 60             	or     ah,0x60
c000b957:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b95b:	83 c4 0c             	add    esp,0xc
c000b95e:	89 f8                	mov    eax,edi
c000b960:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b964:	80 cc 60             	or     ah,0x60
c000b967:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b96b:	89 c7                	mov    edi,eax
c000b96d:	55                   	push   ebp
c000b96e:	e8 e9 fe ff ff       	call   c000b85c <GDT::addEntry(GDTEntry)>
c000b973:	83 c4 0c             	add    esp,0xc
c000b976:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b97a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b97e:	55                   	push   ebp
c000b97f:	e8 d8 fe ff ff       	call   c000b85c <GDT::addEntry(GDTEntry)>
c000b984:	83 c4 0c             	add    esp,0xc
c000b987:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b98b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b98f:	55                   	push   ebp
c000b990:	e8 c7 fe ff ff       	call   c000b85c <GDT::addEntry(GDTEntry)>
c000b995:	83 c4 0c             	add    esp,0xc
c000b998:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000b99c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b9a0:	53                   	push   ebx
c000b9a1:	51                   	push   ecx
c000b9a2:	55                   	push   ebp
c000b9a3:	e8 b4 fe ff ff       	call   c000b85c <GDT::addEntry(GDTEntry)>
c000b9a8:	83 c4 0c             	add    esp,0xc
c000b9ab:	57                   	push   edi
c000b9ac:	56                   	push   esi
c000b9ad:	55                   	push   ebp
c000b9ae:	e8 a9 fe ff ff       	call   c000b85c <GDT::addEntry(GDTEntry)>
c000b9b3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b9b6:	e8 e5 fe ff ff       	call   c000b8a0 <GDT::flush()>
c000b9bb:	83 c4 4c             	add    esp,0x4c
c000b9be:	5b                   	pop    ebx
c000b9bf:	5e                   	pop    esi
c000b9c0:	5f                   	pop    edi
c000b9c1:	5d                   	pop    ebp
c000b9c2:	c3                   	ret    

c000b9c3 <idleFunction(void*)>:
c000b9c3:	53                   	push   ebx
c000b9c4:	83 ec 08             	sub    esp,0x8
c000b9c7:	e8 7a ce 00 00       	call   c0018846 <unlockScheduler()>
c000b9cc:	e8 9f 8d 00 00       	call   c0014770 <thisCPU()>
c000b9d1:	f6 80 92 11 00 00 04 	test   BYTE PTR [eax+0x1192],0x4
c000b9d8:	74 41                	je     c000ba1b <idleFunction(void*)+0x58>
c000b9da:	a1 88 43 02 c0       	mov    eax,ds:0xc0024388
c000b9df:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000b9e6:	74 33                	je     c000ba1b <idleFunction(void*)+0x58>
c000b9e8:	31 db                	xor    ebx,ebx
c000b9ea:	52                   	push   edx
c000b9eb:	52                   	push   edx
c000b9ec:	68 e1 00 00 00       	push   0xe1
c000b9f1:	50                   	push   eax
c000b9f2:	e8 df fb ff ff       	call   c000b5d6 <Computer::rdmsr(unsigned int)>
c000b9f7:	53                   	push   ebx
c000b9f8:	83 e0 02             	and    eax,0x2
c000b9fb:	50                   	push   eax
c000b9fc:	68 e1 00 00 00       	push   0xe1
c000ba01:	ff 35 88 43 02 c0    	push   DWORD PTR ds:0xc0024388
c000ba07:	e8 f6 fb ff ff       	call   c000b602 <Computer::wrmsr(unsigned int, unsigned long long)>
c000ba0c:	83 c4 20             	add    esp,0x20
c000ba0f:	e8 07 48 ff ff       	call   c000021b <doTPAUSE>
c000ba14:	e8 77 3a 01 00       	call   c001f490 <idleCommon()>
c000ba19:	eb f4                	jmp    c000ba0f <idleFunction(void*)+0x4c>
c000ba1b:	fb                   	sti    
c000ba1c:	f4                   	hlt    
c000ba1d:	e8 6e 3a 01 00       	call   c001f490 <idleCommon()>
c000ba22:	eb f7                	jmp    c000ba1b <idleFunction(void*)+0x58>

c000ba24 <IDTEntry::IDTEntry(bool)>:
c000ba24:	83 ec 04             	sub    esp,0x4
c000ba27:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ba2b:	88 04 24             	mov    BYTE PTR [esp],al
c000ba2e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ba32:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000ba38:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ba3c:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000ba40:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ba44:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ba47:	83 e2 f0             	and    edx,0xfffffff0
c000ba4a:	83 ca 0e             	or     edx,0xe
c000ba4d:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ba50:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ba54:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ba57:	83 e2 ef             	and    edx,0xffffffef
c000ba5a:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ba5d:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000ba61:	74 04                	je     c000ba67 <IDTEntry::IDTEntry(bool)+0x43>
c000ba63:	b2 03                	mov    dl,0x3
c000ba65:	eb 02                	jmp    c000ba69 <IDTEntry::IDTEntry(bool)+0x45>
c000ba67:	b2 00                	mov    dl,0x0
c000ba69:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ba6d:	83 e2 03             	and    edx,0x3
c000ba70:	88 d1                	mov    cl,dl
c000ba72:	c1 e1 05             	shl    ecx,0x5
c000ba75:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ba78:	83 e2 9f             	and    edx,0xffffff9f
c000ba7b:	09 ca                	or     edx,ecx
c000ba7d:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ba80:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ba84:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ba87:	83 ca 80             	or     edx,0xffffff80
c000ba8a:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ba8d:	90                   	nop
c000ba8e:	83 c4 04             	add    esp,0x4
c000ba91:	c3                   	ret    

c000ba92 <IDTEntry::setOffset(unsigned int)>:
c000ba92:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ba96:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ba9a:	66 89 02             	mov    WORD PTR [edx],ax
c000ba9d:	c1 e8 10             	shr    eax,0x10
c000baa0:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000baa4:	c3                   	ret    
c000baa5:	90                   	nop

c000baa6 <IDT::IDT()>:
c000baa6:	90                   	nop
c000baa7:	c3                   	ret    

c000baa8 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000baa8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000baac:	83 c0 30             	add    eax,0x30
c000baaf:	c3                   	ret    

c000bab0 <IDT::addEntry(IDTEntry, int)>:
c000bab0:	53                   	push   ebx
c000bab1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bab5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bab9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000babd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bac1:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000bac4:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000bac8:	5b                   	pop    ebx
c000bac9:	c3                   	ret    

c000baca <IDT::addEntry(int, void (*)(), bool)>:
c000baca:	53                   	push   ebx
c000bacb:	83 ec 10             	sub    esp,0x10
c000bace:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000bad3:	50                   	push   eax
c000bad4:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000bad8:	53                   	push   ebx
c000bad9:	e8 46 ff ff ff       	call   c000ba24 <IDTEntry::IDTEntry(bool)>
c000bade:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000bae2:	53                   	push   ebx
c000bae3:	e8 aa ff ff ff       	call   c000ba92 <IDTEntry::setOffset(unsigned int)>
c000bae8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000baec:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000baf0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000baf4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000baf8:	e8 b3 ff ff ff       	call   c000bab0 <IDT::addEntry(IDTEntry, int)>
c000bafd:	83 c4 30             	add    esp,0x30
c000bb00:	5b                   	pop    ebx
c000bb01:	c3                   	ret    

c000bb02 <IDT::flush()>:
c000bb02:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bb06:	66 c7 05 98 43 02 c0 ff 07 	mov    WORD PTR ds:0xc0024398,0x7ff
c000bb0f:	a3 9a 43 02 c0       	mov    ds:0xc002439a,eax
c000bb14:	0f 01 1d 98 43 02 c0 	lidtd  ds:0xc0024398
c000bb1b:	c3                   	ret    

c000bb1c <IDT::setup()>:
c000bb1c:	57                   	push   edi
c000bb1d:	56                   	push   esi
c000bb1e:	53                   	push   ebx
c000bb1f:	83 ec 10             	sub    esp,0x10
c000bb22:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000bb26:	6a 00                	push   0x0
c000bb28:	68 1e 04 00 c0       	push   0xc000041e
c000bb2d:	6a 00                	push   0x0
c000bb2f:	53                   	push   ebx
c000bb30:	e8 95 ff ff ff       	call   c000baca <IDT::addEntry(int, void (*)(), bool)>
c000bb35:	6a 00                	push   0x0
c000bb37:	68 2e 04 00 c0       	push   0xc000042e
c000bb3c:	6a 01                	push   0x1
c000bb3e:	53                   	push   ebx
c000bb3f:	e8 86 ff ff ff       	call   c000baca <IDT::addEntry(int, void (*)(), bool)>
c000bb44:	83 c4 20             	add    esp,0x20
c000bb47:	6a 00                	push   0x0
c000bb49:	68 38 04 00 c0       	push   0xc0000438
c000bb4e:	6a 02                	push   0x2
c000bb50:	53                   	push   ebx
c000bb51:	e8 74 ff ff ff       	call   c000baca <IDT::addEntry(int, void (*)(), bool)>
c000bb56:	6a 00                	push   0x0
c000bb58:	68 42 04 00 c0       	push   0xc0000442
c000bb5d:	6a 03                	push   0x3
c000bb5f:	53                   	push   ebx
c000bb60:	e8 65 ff ff ff       	call   c000baca <IDT::addEntry(int, void (*)(), bool)>
c000bb65:	83 c4 20             	add    esp,0x20
c000bb68:	6a 00                	push   0x0
c000bb6a:	68 4c 04 00 c0       	push   0xc000044c
c000bb6f:	6a 04                	push   0x4
c000bb71:	53                   	push   ebx
c000bb72:	e8 53 ff ff ff       	call   c000baca <IDT::addEntry(int, void (*)(), bool)>
c000bb77:	6a 00                	push   0x0
c000bb79:	68 56 04 00 c0       	push   0xc0000456
c000bb7e:	6a 05                	push   0x5
c000bb80:	53                   	push   ebx
c000bb81:	e8 44 ff ff ff       	call   c000baca <IDT::addEntry(int, void (*)(), bool)>
c000bb86:	83 c4 20             	add    esp,0x20
c000bb89:	6a 00                	push   0x0
c000bb8b:	68 60 04 00 c0       	push   0xc0000460
c000bb90:	6a 06                	push   0x6
c000bb92:	53                   	push   ebx
c000bb93:	e8 32 ff ff ff       	call   c000baca <IDT::addEntry(int, void (*)(), bool)>
c000bb98:	6a 00                	push   0x0
c000bb9a:	68 6a 04 00 c0       	push   0xc000046a
c000bb9f:	6a 07                	push   0x7
c000bba1:	53                   	push   ebx
c000bba2:	e8 23 ff ff ff       	call   c000baca <IDT::addEntry(int, void (*)(), bool)>
c000bba7:	83 c4 20             	add    esp,0x20
c000bbaa:	6a 00                	push   0x0
c000bbac:	68 74 04 00 c0       	push   0xc0000474
c000bbb1:	6a 08                	push   0x8
c000bbb3:	53                   	push   ebx
c000bbb4:	e8 11 ff ff ff       	call   c000baca <IDT::addEntry(int, void (*)(), bool)>
c000bbb9:	6a 00                	push   0x0
c000bbbb:	68 7c 04 00 c0       	push   0xc000047c
c000bbc0:	6a 09                	push   0x9
c000bbc2:	53                   	push   ebx
c000bbc3:	e8 02 ff ff ff       	call   c000baca <IDT::addEntry(int, void (*)(), bool)>
c000bbc8:	83 c4 20             	add    esp,0x20
c000bbcb:	6a 00                	push   0x0
c000bbcd:	68 86 04 00 c0       	push   0xc0000486
c000bbd2:	6a 0a                	push   0xa
c000bbd4:	53                   	push   ebx
c000bbd5:	e8 f0 fe ff ff       	call   c000baca <IDT::addEntry(int, void (*)(), bool)>
c000bbda:	6a 00                	push   0x0
c000bbdc:	68 8e 04 00 c0       	push   0xc000048e
c000bbe1:	6a 0b                	push   0xb
c000bbe3:	53                   	push   ebx
c000bbe4:	e8 e1 fe ff ff       	call   c000baca <IDT::addEntry(int, void (*)(), bool)>
c000bbe9:	83 c4 20             	add    esp,0x20
c000bbec:	6a 00                	push   0x0
c000bbee:	68 96 04 00 c0       	push   0xc0000496
c000bbf3:	6a 0c                	push   0xc
c000bbf5:	53                   	push   ebx
c000bbf6:	e8 cf fe ff ff       	call   c000baca <IDT::addEntry(int, void (*)(), bool)>
c000bbfb:	6a 00                	push   0x0
c000bbfd:	68 9e 04 00 c0       	push   0xc000049e
c000bc02:	6a 0d                	push   0xd
c000bc04:	53                   	push   ebx
c000bc05:	e8 c0 fe ff ff       	call   c000baca <IDT::addEntry(int, void (*)(), bool)>
c000bc0a:	83 c4 20             	add    esp,0x20
c000bc0d:	6a 00                	push   0x0
c000bc0f:	68 a6 04 00 c0       	push   0xc00004a6
c000bc14:	6a 0e                	push   0xe
c000bc16:	53                   	push   ebx
c000bc17:	e8 ae fe ff ff       	call   c000baca <IDT::addEntry(int, void (*)(), bool)>
c000bc1c:	6a 00                	push   0x0
c000bc1e:	68 ae 04 00 c0       	push   0xc00004ae
c000bc23:	6a 0f                	push   0xf
c000bc25:	53                   	push   ebx
c000bc26:	e8 9f fe ff ff       	call   c000baca <IDT::addEntry(int, void (*)(), bool)>
c000bc2b:	83 c4 20             	add    esp,0x20
c000bc2e:	6a 00                	push   0x0
c000bc30:	68 b8 04 00 c0       	push   0xc00004b8
c000bc35:	6a 10                	push   0x10
c000bc37:	53                   	push   ebx
c000bc38:	e8 8d fe ff ff       	call   c000baca <IDT::addEntry(int, void (*)(), bool)>
c000bc3d:	6a 00                	push   0x0
c000bc3f:	68 c2 04 00 c0       	push   0xc00004c2
c000bc44:	6a 11                	push   0x11
c000bc46:	53                   	push   ebx
c000bc47:	e8 7e fe ff ff       	call   c000baca <IDT::addEntry(int, void (*)(), bool)>
c000bc4c:	83 c4 20             	add    esp,0x20
c000bc4f:	6a 00                	push   0x0
c000bc51:	68 cc 04 00 c0       	push   0xc00004cc
c000bc56:	6a 12                	push   0x12
c000bc58:	53                   	push   ebx
c000bc59:	e8 6c fe ff ff       	call   c000baca <IDT::addEntry(int, void (*)(), bool)>
c000bc5e:	6a 01                	push   0x1
c000bc60:	68 d6 04 00 c0       	push   0xc00004d6
c000bc65:	6a 60                	push   0x60
c000bc67:	53                   	push   ebx
c000bc68:	e8 5d fe ff ff       	call   c000baca <IDT::addEntry(int, void (*)(), bool)>
c000bc6d:	83 c4 20             	add    esp,0x20
c000bc70:	6a 00                	push   0x0
c000bc72:	68 e0 04 00 c0       	push   0xc00004e0
c000bc77:	6a 20                	push   0x20
c000bc79:	53                   	push   ebx
c000bc7a:	e8 4b fe ff ff       	call   c000baca <IDT::addEntry(int, void (*)(), bool)>
c000bc7f:	6a 00                	push   0x0
c000bc81:	68 ea 04 00 c0       	push   0xc00004ea
c000bc86:	6a 21                	push   0x21
c000bc88:	53                   	push   ebx
c000bc89:	e8 3c fe ff ff       	call   c000baca <IDT::addEntry(int, void (*)(), bool)>
c000bc8e:	83 c4 20             	add    esp,0x20
c000bc91:	6a 00                	push   0x0
c000bc93:	68 f4 04 00 c0       	push   0xc00004f4
c000bc98:	6a 22                	push   0x22
c000bc9a:	53                   	push   ebx
c000bc9b:	e8 2a fe ff ff       	call   c000baca <IDT::addEntry(int, void (*)(), bool)>
c000bca0:	6a 00                	push   0x0
c000bca2:	68 fe 04 00 c0       	push   0xc00004fe
c000bca7:	6a 23                	push   0x23
c000bca9:	53                   	push   ebx
c000bcaa:	e8 1b fe ff ff       	call   c000baca <IDT::addEntry(int, void (*)(), bool)>
c000bcaf:	83 c4 20             	add    esp,0x20
c000bcb2:	6a 00                	push   0x0
c000bcb4:	68 08 05 00 c0       	push   0xc0000508
c000bcb9:	6a 24                	push   0x24
c000bcbb:	53                   	push   ebx
c000bcbc:	e8 09 fe ff ff       	call   c000baca <IDT::addEntry(int, void (*)(), bool)>
c000bcc1:	6a 00                	push   0x0
c000bcc3:	68 12 05 00 c0       	push   0xc0000512
c000bcc8:	6a 25                	push   0x25
c000bcca:	53                   	push   ebx
c000bccb:	e8 fa fd ff ff       	call   c000baca <IDT::addEntry(int, void (*)(), bool)>
c000bcd0:	83 c4 20             	add    esp,0x20
c000bcd3:	6a 00                	push   0x0
c000bcd5:	68 1c 05 00 c0       	push   0xc000051c
c000bcda:	6a 26                	push   0x26
c000bcdc:	53                   	push   ebx
c000bcdd:	e8 e8 fd ff ff       	call   c000baca <IDT::addEntry(int, void (*)(), bool)>
c000bce2:	6a 00                	push   0x0
c000bce4:	68 26 05 00 c0       	push   0xc0000526
c000bce9:	6a 27                	push   0x27
c000bceb:	53                   	push   ebx
c000bcec:	e8 d9 fd ff ff       	call   c000baca <IDT::addEntry(int, void (*)(), bool)>
c000bcf1:	83 c4 20             	add    esp,0x20
c000bcf4:	6a 00                	push   0x0
c000bcf6:	68 30 05 00 c0       	push   0xc0000530
c000bcfb:	6a 28                	push   0x28
c000bcfd:	53                   	push   ebx
c000bcfe:	e8 c7 fd ff ff       	call   c000baca <IDT::addEntry(int, void (*)(), bool)>
c000bd03:	6a 00                	push   0x0
c000bd05:	68 3a 05 00 c0       	push   0xc000053a
c000bd0a:	6a 29                	push   0x29
c000bd0c:	53                   	push   ebx
c000bd0d:	e8 b8 fd ff ff       	call   c000baca <IDT::addEntry(int, void (*)(), bool)>
c000bd12:	83 c4 20             	add    esp,0x20
c000bd15:	6a 00                	push   0x0
c000bd17:	68 44 05 00 c0       	push   0xc0000544
c000bd1c:	6a 2a                	push   0x2a
c000bd1e:	53                   	push   ebx
c000bd1f:	e8 a6 fd ff ff       	call   c000baca <IDT::addEntry(int, void (*)(), bool)>
c000bd24:	6a 00                	push   0x0
c000bd26:	68 4e 05 00 c0       	push   0xc000054e
c000bd2b:	6a 2b                	push   0x2b
c000bd2d:	53                   	push   ebx
c000bd2e:	e8 97 fd ff ff       	call   c000baca <IDT::addEntry(int, void (*)(), bool)>
c000bd33:	83 c4 20             	add    esp,0x20
c000bd36:	6a 00                	push   0x0
c000bd38:	68 58 05 00 c0       	push   0xc0000558
c000bd3d:	6a 2c                	push   0x2c
c000bd3f:	53                   	push   ebx
c000bd40:	e8 85 fd ff ff       	call   c000baca <IDT::addEntry(int, void (*)(), bool)>
c000bd45:	6a 00                	push   0x0
c000bd47:	68 62 05 00 c0       	push   0xc0000562
c000bd4c:	6a 2d                	push   0x2d
c000bd4e:	53                   	push   ebx
c000bd4f:	e8 76 fd ff ff       	call   c000baca <IDT::addEntry(int, void (*)(), bool)>
c000bd54:	83 c4 20             	add    esp,0x20
c000bd57:	6a 00                	push   0x0
c000bd59:	68 6c 05 00 c0       	push   0xc000056c
c000bd5e:	6a 2e                	push   0x2e
c000bd60:	53                   	push   ebx
c000bd61:	e8 64 fd ff ff       	call   c000baca <IDT::addEntry(int, void (*)(), bool)>
c000bd66:	6a 00                	push   0x0
c000bd68:	68 76 05 00 c0       	push   0xc0000576
c000bd6d:	6a 2f                	push   0x2f
c000bd6f:	53                   	push   ebx
c000bd70:	e8 55 fd ff ff       	call   c000baca <IDT::addEntry(int, void (*)(), bool)>
c000bd75:	83 c4 20             	add    esp,0x20
c000bd78:	6a 00                	push   0x0
c000bd7a:	68 80 05 00 c0       	push   0xc0000580
c000bd7f:	6a 30                	push   0x30
c000bd81:	53                   	push   ebx
c000bd82:	e8 43 fd ff ff       	call   c000baca <IDT::addEntry(int, void (*)(), bool)>
c000bd87:	6a 00                	push   0x0
c000bd89:	68 8a 05 00 c0       	push   0xc000058a
c000bd8e:	6a 31                	push   0x31
c000bd90:	53                   	push   ebx
c000bd91:	e8 34 fd ff ff       	call   c000baca <IDT::addEntry(int, void (*)(), bool)>
c000bd96:	83 c4 20             	add    esp,0x20
c000bd99:	6a 00                	push   0x0
c000bd9b:	68 94 05 00 c0       	push   0xc0000594
c000bda0:	6a 32                	push   0x32
c000bda2:	53                   	push   ebx
c000bda3:	e8 22 fd ff ff       	call   c000baca <IDT::addEntry(int, void (*)(), bool)>
c000bda8:	6a 00                	push   0x0
c000bdaa:	68 9e 05 00 c0       	push   0xc000059e
c000bdaf:	6a 33                	push   0x33
c000bdb1:	53                   	push   ebx
c000bdb2:	e8 13 fd ff ff       	call   c000baca <IDT::addEntry(int, void (*)(), bool)>
c000bdb7:	83 c4 20             	add    esp,0x20
c000bdba:	6a 00                	push   0x0
c000bdbc:	68 a8 05 00 c0       	push   0xc00005a8
c000bdc1:	6a 34                	push   0x34
c000bdc3:	53                   	push   ebx
c000bdc4:	e8 01 fd ff ff       	call   c000baca <IDT::addEntry(int, void (*)(), bool)>
c000bdc9:	6a 00                	push   0x0
c000bdcb:	68 b2 05 00 c0       	push   0xc00005b2
c000bdd0:	6a 35                	push   0x35
c000bdd2:	53                   	push   ebx
c000bdd3:	e8 f2 fc ff ff       	call   c000baca <IDT::addEntry(int, void (*)(), bool)>
c000bdd8:	83 c4 20             	add    esp,0x20
c000bddb:	6a 00                	push   0x0
c000bddd:	68 bc 05 00 c0       	push   0xc00005bc
c000bde2:	6a 36                	push   0x36
c000bde4:	53                   	push   ebx
c000bde5:	e8 e0 fc ff ff       	call   c000baca <IDT::addEntry(int, void (*)(), bool)>
c000bdea:	6a 00                	push   0x0
c000bdec:	68 c6 05 00 c0       	push   0xc00005c6
c000bdf1:	6a 37                	push   0x37
c000bdf3:	53                   	push   ebx
c000bdf4:	e8 d1 fc ff ff       	call   c000baca <IDT::addEntry(int, void (*)(), bool)>
c000bdf9:	83 c4 20             	add    esp,0x20
c000bdfc:	e8 e4 24 00 00       	call   c000e2e5 <Virt::getAKernelVAS()>
c000be01:	52                   	push   edx
c000be02:	6a 03                	push   0x3
c000be04:	6a 02                	push   0x2
c000be06:	50                   	push   eax
c000be07:	e8 1c 2b 00 00       	call   c000e928 <VAS::allocatePages(int, int)>
c000be0c:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000be13:	89 c6                	mov    esi,eax
c000be15:	e8 1e 32 00 00       	call   c000f038 <operator new(unsigned long)>
c000be1a:	81 c6 00 20 00 00    	add    esi,0x2000
c000be20:	89 04 24             	mov    DWORD PTR [esp],eax
c000be23:	89 c7                	mov    edi,eax
c000be25:	e8 c0 1c 00 00       	call   c000daea <TSS::TSS()>
c000be2a:	83 c4 0c             	add    esp,0xc
c000be2d:	68 74 04 00 c0       	push   0xc0000474
c000be32:	56                   	push   esi
c000be33:	57                   	push   edi
c000be34:	e8 f1 1c 00 00       	call   c000db2a <TSS::setup(unsigned long, unsigned long)>
c000be39:	59                   	pop    ecx
c000be3a:	89 c6                	mov    esi,eax
c000be3c:	5f                   	pop    edi
c000be3d:	6a 00                	push   0x0
c000be3f:	8d 44 24 14          	lea    eax,[esp+0x14]
c000be43:	50                   	push   eax
c000be44:	e8 db fb ff ff       	call   c000ba24 <IDTEntry::IDTEntry(bool)>
c000be49:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000be4d:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000be52:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000be59:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000be5f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000be63:	80 ce 05             	or     dh,0x5
c000be66:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000be69:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000be6d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000be71:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000be74:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000be77:	e8 86 fc ff ff       	call   c000bb02 <IDT::flush()>
c000be7c:	83 c4 20             	add    esp,0x20
c000be7f:	5b                   	pop    ebx
c000be80:	5e                   	pop    esi
c000be81:	5f                   	pop    edi
c000be82:	c3                   	ret    

c000be83 <sbrk>:
c000be83:	55                   	push   ebp
c000be84:	57                   	push   edi
c000be85:	56                   	push   esi
c000be86:	53                   	push   ebx
c000be87:	83 ec 1c             	sub    esp,0x1c
c000be8a:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000be8e:	85 db                	test   ebx,ebx
c000be90:	74 37                	je     c000bec9 <sbrk+0x46>
c000be92:	78 3f                	js     c000bed3 <sbrk+0x50>
c000be94:	e8 d7 88 00 00       	call   c0014770 <thisCPU()>
c000be99:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000be9f:	83 e0 01             	and    eax,0x1
c000bea2:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000bea6:	a1 a0 37 02 c0       	mov    eax,ds:0xc00237a0
c000beab:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000beaf:	81 c3 ff 0f 00 00    	add    ebx,0xfff
c000beb5:	89 d8                	mov    eax,ebx
c000beb7:	78 35                	js     c000beee <sbrk+0x6b>
c000beb9:	c1 f8 0c             	sar    eax,0xc
c000bebc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000bec0:	89 c7                	mov    edi,eax
c000bec2:	be 00 00 00 00       	mov    esi,0x0
c000bec7:	eb 3c                	jmp    c000bf05 <sbrk+0x82>
c000bec9:	a1 a0 37 02 c0       	mov    eax,ds:0xc00237a0
c000bece:	e9 ad 00 00 00       	jmp    c000bf80 <sbrk+0xfd>
c000bed3:	83 ec 08             	sub    esp,0x8
c000bed6:	53                   	push   ebx
c000bed7:	68 a4 0f 02 c0       	push   0xc0020fa4
c000bedc:	e8 46 32 00 00       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c000bee1:	83 c4 10             	add    esp,0x10
c000bee4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000bee9:	e9 92 00 00 00       	jmp    c000bf80 <sbrk+0xfd>
c000beee:	8d 83 ff 0f 00 00    	lea    eax,[ebx+0xfff]
c000bef4:	eb c3                	jmp    c000beb9 <sbrk+0x36>
c000bef6:	81 05 a0 37 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc00237a0,0x1000
c000bf00:	46                   	inc    esi
c000bf01:	39 f7                	cmp    edi,esi
c000bf03:	74 34                	je     c000bf39 <sbrk+0xb6>
c000bf05:	e8 db 23 00 00       	call   c000e2e5 <Virt::getAKernelVAS()>
c000bf0a:	89 c3                	mov    ebx,eax
c000bf0c:	8b 2d a0 37 02 c0    	mov    ebp,DWORD PTR ds:0xc00237a0
c000bf12:	e8 c9 06 00 00       	call   c000c5e0 <Phys::allocatePage()>
c000bf17:	68 01 04 00 00       	push   0x401
c000bf1c:	55                   	push   ebp
c000bf1d:	50                   	push   eax
c000bf1e:	53                   	push   ebx
c000bf1f:	e8 04 29 00 00       	call   c000e828 <VAS::mapPage(unsigned long, unsigned long, int)>
c000bf24:	83 c4 10             	add    esp,0x10
c000bf27:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000bf2c:	74 c8                	je     c000bef6 <sbrk+0x73>
c000bf2e:	8b 1d a0 37 02 c0    	mov    ebx,DWORD PTR ds:0xc00237a0
c000bf34:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000bf37:	eb bd                	jmp    c000bef6 <sbrk+0x73>
c000bf39:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000bf3e:	74 48                	je     c000bf88 <sbrk+0x105>
c000bf40:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000bf44:	89 d3                	mov    ebx,edx
c000bf46:	c1 eb 0a             	shr    ebx,0xa
c000bf49:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000bf4f:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000bf55:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bf59:	c1 e0 0c             	shl    eax,0xc
c000bf5c:	01 d0                	add    eax,edx
c000bf5e:	c1 e8 0a             	shr    eax,0xa
c000bf61:	25 00 f0 ff ff       	and    eax,0xfffff000
c000bf66:	2d 00 00 40 00       	sub    eax,0x400000
c000bf6b:	39 c3                	cmp    ebx,eax
c000bf6d:	77 0d                	ja     c000bf7c <sbrk+0xf9>
c000bf6f:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000bf72:	81 c3 00 10 00 00    	add    ebx,0x1000
c000bf78:	39 d8                	cmp    eax,ebx
c000bf7a:	73 f3                	jae    c000bf6f <sbrk+0xec>
c000bf7c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bf80:	83 c4 1c             	add    esp,0x1c
c000bf83:	5b                   	pop    ebx
c000bf84:	5e                   	pop    esi
c000bf85:	5f                   	pop    edi
c000bf86:	5d                   	pop    ebp
c000bf87:	c3                   	ret    
c000bf88:	e8 18 35 01 00       	call   c001f4a5 <CPU::readCR3()>
c000bf8d:	83 ec 0c             	sub    esp,0xc
c000bf90:	50                   	push   eax
c000bf91:	e8 21 35 01 00       	call   c001f4b7 <CPU::writeCR3(unsigned long)>
c000bf96:	83 c4 10             	add    esp,0x10
c000bf99:	eb e1                	jmp    c000bf7c <sbrk+0xf9>

c000bf9b <mmap>:
c000bf9b:	83 ec 18             	sub    esp,0x18
c000bf9e:	68 d4 0f 02 c0       	push   0xc0020fd4
c000bfa3:	e8 48 99 00 00       	call   c00158f0 <Krnl::panic(char const*)>
c000bfa8:	b8 00 00 00 00       	mov    eax,0x0
c000bfad:	83 c4 1c             	add    esp,0x1c
c000bfb0:	c3                   	ret    

c000bfb1 <munmap>:
c000bfb1:	83 ec 18             	sub    esp,0x18
c000bfb4:	68 d9 0f 02 c0       	push   0xc0020fd9
c000bfb9:	e8 32 99 00 00       	call   c00158f0 <Krnl::panic(char const*)>
c000bfbe:	b8 00 00 00 00       	mov    eax,0x0
c000bfc3:	83 c4 1c             	add    esp,0x1c
c000bfc6:	c3                   	ret    

c000bfc7 <liballoc_lock()>:
c000bfc7:	83 ec 0c             	sub    esp,0xc
c000bfca:	e8 75 c8 00 00       	call   c0018844 <lockScheduler()>
c000bfcf:	b8 00 00 00 00       	mov    eax,0x0
c000bfd4:	83 c4 0c             	add    esp,0xc
c000bfd7:	c3                   	ret    

c000bfd8 <liballoc_unlock()>:
c000bfd8:	83 ec 0c             	sub    esp,0xc
c000bfdb:	e8 66 c8 00 00       	call   c0018846 <unlockScheduler()>
c000bfe0:	b8 00 00 00 00       	mov    eax,0x0
c000bfe5:	83 c4 0c             	add    esp,0xc
c000bfe8:	c3                   	ret    

c000bfe9 <liballoc_alloc(int)>:
c000bfe9:	83 ec 0c             	sub    esp,0xc
c000bfec:	e8 f4 22 00 00       	call   c000e2e5 <Virt::getAKernelVAS()>
c000bff1:	83 ec 04             	sub    esp,0x4
c000bff4:	6a 01                	push   0x1
c000bff6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bffa:	50                   	push   eax
c000bffb:	e8 28 29 00 00       	call   c000e928 <VAS::allocatePages(int, int)>
c000c000:	83 c4 1c             	add    esp,0x1c
c000c003:	c3                   	ret    

c000c004 <liballoc_free(void*, int)>:
c000c004:	83 ec 0c             	sub    esp,0xc
c000c007:	e8 d9 22 00 00       	call   c000e2e5 <Virt::getAKernelVAS()>
c000c00c:	83 ec 08             	sub    esp,0x8
c000c00f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c013:	50                   	push   eax
c000c014:	e8 b9 25 00 00       	call   c000e5d2 <VAS::freeAllocatedPages(unsigned long)>
c000c019:	b8 00 00 00 00       	mov    eax,0x0
c000c01e:	83 c4 1c             	add    esp,0x1c
c000c021:	c3                   	ret    

c000c022 <realloc>:
c000c022:	83 ec 14             	sub    esp,0x14
c000c025:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c029:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c02d:	e8 1a 54 ff ff       	call   c000144c <dlrealloc>
c000c032:	83 c4 1c             	add    esp,0x1c
c000c035:	c3                   	ret    

c000c036 <malloc>:
c000c036:	83 ec 18             	sub    esp,0x18
c000c039:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c03d:	e8 cd 4e ff ff       	call   c0000f0f <dlmalloc>
c000c042:	83 c4 1c             	add    esp,0x1c
c000c045:	c3                   	ret    

c000c046 <free>:
c000c046:	83 ec 18             	sub    esp,0x18
c000c049:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c04d:	e8 62 4b ff ff       	call   c0000bb4 <dlfree>
c000c052:	83 c4 1c             	add    esp,0x1c
c000c055:	c3                   	ret    

c000c056 <rfree>:
c000c056:	83 ec 18             	sub    esp,0x18
c000c059:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c05d:	e8 e4 ff ff ff       	call   c000c046 <free>
c000c062:	83 c4 1c             	add    esp,0x1c
c000c065:	c3                   	ret    

c000c066 <calloc>:
c000c066:	56                   	push   esi
c000c067:	53                   	push   ebx
c000c068:	83 ec 10             	sub    esp,0x10
c000c06b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c06f:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000c074:	53                   	push   ebx
c000c075:	e8 bc ff ff ff       	call   c000c036 <malloc>
c000c07a:	89 c6                	mov    esi,eax
c000c07c:	83 c4 0c             	add    esp,0xc
c000c07f:	53                   	push   ebx
c000c080:	6a 00                	push   0x0
c000c082:	50                   	push   eax
c000c083:	e8 4b 46 ff ff       	call   c00006d3 <memset>
c000c088:	89 f0                	mov    eax,esi
c000c08a:	83 c4 14             	add    esp,0x14
c000c08d:	5b                   	pop    ebx
c000c08e:	5e                   	pop    esi
c000c08f:	c3                   	ret    

c000c090 <hwTextMode_loadInData(VgaText*)>:
c000c090:	57                   	push   edi
c000c091:	56                   	push   esi
c000c092:	53                   	push   ebx
c000c093:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000c097:	8b 87 ac 0f 00 00    	mov    eax,DWORD PTR [edi+0xfac]
c000c09d:	85 c0                	test   eax,eax
c000c09f:	7e 30                	jle    c000c0d1 <hwTextMode_loadInData(VgaText*)+0x41>
c000c0a1:	8d 5f 0c             	lea    ebx,[edi+0xc]
c000c0a4:	31 f6                	xor    esi,esi
c000c0a6:	8d 0c b6             	lea    ecx,[esi+esi*4]
c000c0a9:	31 c0                	xor    eax,eax
c000c0ab:	c1 e1 05             	shl    ecx,0x5
c000c0ae:	81 e9 60 7f f4 3d    	sub    ecx,0x3df47f60
c000c0b4:	66 8b 14 43          	mov    dx,WORD PTR [ebx+eax*2]
c000c0b8:	66 89 14 41          	mov    WORD PTR [ecx+eax*2],dx
c000c0bc:	40                   	inc    eax
c000c0bd:	83 f8 50             	cmp    eax,0x50
c000c0c0:	75 f2                	jne    c000c0b4 <hwTextMode_loadInData(VgaText*)+0x24>
c000c0c2:	81 c3 a0 00 00 00    	add    ebx,0xa0
c000c0c8:	46                   	inc    esi
c000c0c9:	39 b7 ac 0f 00 00    	cmp    DWORD PTR [edi+0xfac],esi
c000c0cf:	7f d5                	jg     c000c0a6 <hwTextMode_loadInData(VgaText*)+0x16>
c000c0d1:	5b                   	pop    ebx
c000c0d2:	5e                   	pop    esi
c000c0d3:	5f                   	pop    edi
c000c0d4:	c3                   	ret    

c000c0d5 <hwTextMode_loadInTitle(VgaText*, char*)>:
c000c0d5:	56                   	push   esi
c000c0d6:	ba 00 80 0b c2       	mov    edx,0xc20b8000
c000c0db:	53                   	push   ebx
c000c0dc:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c0e0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c0e4:	8b 83 d4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfd4]
c000c0ea:	8b b3 d8 0f 00 00    	mov    esi,DWORD PTR [ebx+0xfd8]
c000c0f0:	c1 e0 04             	shl    eax,0x4
c000c0f3:	83 e6 0f             	and    esi,0xf
c000c0f6:	0f b6 c0             	movzx  eax,al
c000c0f9:	41                   	inc    ecx
c000c0fa:	09 f0                	or     eax,esi
c000c0fc:	83 c2 02             	add    edx,0x2
c000c0ff:	0f b6 71 ff          	movzx  esi,BYTE PTR [ecx-0x1]
c000c103:	c1 e0 08             	shl    eax,0x8
c000c106:	09 f0                	or     eax,esi
c000c108:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c000c10c:	81 fa a0 80 0b c2    	cmp    edx,0xc20b80a0
c000c112:	75 d0                	jne    c000c0e4 <hwTextMode_loadInTitle(VgaText*, char*)+0xf>
c000c114:	5b                   	pop    ebx
c000c115:	5e                   	pop    esi
c000c116:	c3                   	ret    

c000c117 <hwTextMode_showCursor(VgaText*, bool)>:
c000c117:	56                   	push   esi
c000c118:	53                   	push   ebx
c000c119:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c000c11e:	74 38                	je     c000c158 <hwTextMode_showCursor(VgaText*, bool)+0x41>
c000c120:	bb d4 03 00 00       	mov    ebx,0x3d4
c000c125:	b0 0a                	mov    al,0xa
c000c127:	89 da                	mov    edx,ebx
c000c129:	ee                   	out    dx,al
c000c12a:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000c12f:	89 ca                	mov    edx,ecx
c000c131:	ec                   	in     al,dx
c000c132:	b2 0f                	mov    dl,0xf
c000c134:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000c138:	83 e0 c0             	and    eax,0xffffffc0
c000c13b:	2b 96 b8 0f 00 00    	sub    edx,DWORD PTR [esi+0xfb8]
c000c141:	09 d0                	or     eax,edx
c000c143:	89 ca                	mov    edx,ecx
c000c145:	ee                   	out    dx,al
c000c146:	b0 0b                	mov    al,0xb
c000c148:	89 da                	mov    edx,ebx
c000c14a:	ee                   	out    dx,al
c000c14b:	89 ca                	mov    edx,ecx
c000c14d:	ec                   	in     al,dx
c000c14e:	83 e0 e0             	and    eax,0xffffffe0
c000c151:	83 c8 0f             	or     eax,0xf
c000c154:	ee                   	out    dx,al
c000c155:	5b                   	pop    ebx
c000c156:	5e                   	pop    esi
c000c157:	c3                   	ret    
c000c158:	b0 0a                	mov    al,0xa
c000c15a:	ba d4 03 00 00       	mov    edx,0x3d4
c000c15f:	ee                   	out    dx,al
c000c160:	b0 20                	mov    al,0x20
c000c162:	ba d5 03 00 00       	mov    edx,0x3d5
c000c167:	ee                   	out    dx,al
c000c168:	5b                   	pop    ebx
c000c169:	5e                   	pop    esi
c000c16a:	c3                   	ret    

c000c16b <hwTextMode_update(VgaText*)>:
c000c16b:	c3                   	ret    

c000c16c <hwTextMode_updateCursor(VgaText*)>:
c000c16c:	56                   	push   esi
c000c16d:	b9 19 00 00 00       	mov    ecx,0x19
c000c172:	53                   	push   ebx
c000c173:	be d4 03 00 00       	mov    esi,0x3d4
c000c178:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c17c:	89 f2                	mov    edx,esi
c000c17e:	2b 88 ac 0f 00 00    	sub    ecx,DWORD PTR [eax+0xfac]
c000c184:	03 88 b4 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb4]
c000c18a:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000c18d:	c1 e1 04             	shl    ecx,0x4
c000c190:	03 88 b0 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb0]
c000c196:	b0 0f                	mov    al,0xf
c000c198:	ee                   	out    dx,al
c000c199:	bb d5 03 00 00       	mov    ebx,0x3d5
c000c19e:	88 c8                	mov    al,cl
c000c1a0:	89 da                	mov    edx,ebx
c000c1a2:	ee                   	out    dx,al
c000c1a3:	b0 0e                	mov    al,0xe
c000c1a5:	89 f2                	mov    edx,esi
c000c1a7:	ee                   	out    dx,al
c000c1a8:	89 c8                	mov    eax,ecx
c000c1aa:	89 da                	mov    edx,ebx
c000c1ac:	66 c1 e8 08          	shr    ax,0x8
c000c1b0:	ee                   	out    dx,al
c000c1b1:	5b                   	pop    ebx
c000c1b2:	5e                   	pop    esi
c000c1b3:	c3                   	ret    

c000c1b4 <hwTextMode_disableBlink(VgaText*, bool)>:
c000c1b4:	ba da 03 00 00       	mov    edx,0x3da
c000c1b9:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000c1be:	75 18                	jne    c000c1d8 <hwTextMode_disableBlink(VgaText*, bool)+0x24>
c000c1c0:	ec                   	in     al,dx
c000c1c1:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000c1c6:	b0 30                	mov    al,0x30
c000c1c8:	89 ca                	mov    edx,ecx
c000c1ca:	ee                   	out    dx,al
c000c1cb:	ba c1 03 00 00       	mov    edx,0x3c1
c000c1d0:	ec                   	in     al,dx
c000c1d1:	83 c8 08             	or     eax,0x8
c000c1d4:	89 ca                	mov    edx,ecx
c000c1d6:	ee                   	out    dx,al
c000c1d7:	c3                   	ret    
c000c1d8:	ec                   	in     al,dx
c000c1d9:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000c1de:	b0 30                	mov    al,0x30
c000c1e0:	89 ca                	mov    edx,ecx
c000c1e2:	ee                   	out    dx,al
c000c1e3:	ba c1 03 00 00       	mov    edx,0x3c1
c000c1e8:	ec                   	in     al,dx
c000c1e9:	83 e0 f7             	and    eax,0xfffffff7
c000c1ec:	89 ca                	mov    edx,ecx
c000c1ee:	ee                   	out    dx,al
c000c1ef:	c3                   	ret    

c000c1f0 <hwTextMode_scrollScreen(VgaText*)>:
c000c1f0:	55                   	push   ebp
c000c1f1:	bd 02 00 00 00       	mov    ebp,0x2
c000c1f6:	57                   	push   edi
c000c1f7:	56                   	push   esi
c000c1f8:	53                   	push   ebx
c000c1f9:	83 ec 1c             	sub    esp,0x1c
c000c1fc:	c7 44 24 0c a0 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b80a0
c000c204:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c208:	31 c0                	xor    eax,eax
c000c20a:	eb 0b                	jmp    c000c217 <hwTextMode_scrollScreen(VgaText*)+0x27>
c000c20c:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000c212:	74 57                	je     c000c26b <hwTextMode_scrollScreen(VgaText*)+0x7b>
c000c214:	43                   	inc    ebx
c000c215:	89 f0                	mov    eax,esi
c000c217:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000c21d:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000c223:	88 13                	mov    BYTE PTR [ebx],dl
c000c225:	8d 70 01             	lea    esi,[eax+0x1]
c000c228:	83 fd 18             	cmp    ebp,0x18
c000c22b:	75 df                	jne    c000c20c <hwTextMode_scrollScreen(VgaText*)+0x1c>
c000c22d:	a8 01                	test   al,0x1
c000c22f:	75 13                	jne    c000c244 <hwTextMode_scrollScreen(VgaText*)+0x54>
c000c231:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000c234:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000c23a:	75 d8                	jne    c000c214 <hwTextMode_scrollScreen(VgaText*)+0x24>
c000c23c:	83 c4 1c             	add    esp,0x1c
c000c23f:	5b                   	pop    ebx
c000c240:	5e                   	pop    esi
c000c241:	5f                   	pop    edi
c000c242:	5d                   	pop    ebp
c000c243:	c3                   	ret    
c000c244:	83 ec 08             	sub    esp,0x8
c000c247:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c24b:	0f b6 80 cc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfcc]
c000c252:	50                   	push   eax
c000c253:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c257:	0f b6 80 d0 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfd0]
c000c25e:	50                   	push   eax
c000c25f:	e8 66 0b 00 00       	call   c000cdca <VgaText::combineColours(unsigned char, unsigned char)>
c000c264:	83 c4 10             	add    esp,0x10
c000c267:	88 07                	mov    BYTE PTR [edi],al
c000c269:	eb c9                	jmp    c000c234 <hwTextMode_scrollScreen(VgaText*)+0x44>
c000c26b:	45                   	inc    ebp
c000c26c:	81 44 24 0c a0 00 00 00 	add    DWORD PTR [esp+0xc],0xa0
c000c274:	eb 8e                	jmp    c000c204 <hwTextMode_scrollScreen(VgaText*)+0x14>

c000c276 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000c276:	56                   	push   esi
c000c277:	53                   	push   ebx
c000c278:	83 ec 0c             	sub    esp,0xc
c000c27b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000c27f:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000c283:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000c288:	50                   	push   eax
c000c289:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000c28e:	50                   	push   eax
c000c28f:	e8 36 0b 00 00       	call   c000cdca <VgaText::combineColours(unsigned char, unsigned char)>
c000c294:	5a                   	pop    edx
c000c295:	0f b6 c0             	movzx  eax,al
c000c298:	59                   	pop    ecx
c000c299:	50                   	push   eax
c000c29a:	89 f0                	mov    eax,esi
c000c29c:	0f be f0             	movsx  esi,al
c000c29f:	56                   	push   esi
c000c2a0:	e8 cb 0b 00 00       	call   c000ce70 <VgaText::combineCharAndColour(char, unsigned char)>
c000c2a5:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000c2a9:	ba 19 00 00 00       	mov    edx,0x19
c000c2ae:	2b 91 ac 0f 00 00    	sub    edx,DWORD PTR [ecx+0xfac]
c000c2b4:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000c2b7:	8d 14 92             	lea    edx,[edx+edx*4]
c000c2ba:	c1 e1 04             	shl    ecx,0x4
c000c2bd:	c1 e2 04             	shl    edx,0x4
c000c2c0:	03 4c 24 30          	add    ecx,DWORD PTR [esp+0x30]
c000c2c4:	01 ca                	add    edx,ecx
c000c2c6:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c000c2ce:	83 c4 14             	add    esp,0x14
c000c2d1:	5b                   	pop    ebx
c000c2d2:	5e                   	pop    esi
c000c2d3:	c3                   	ret    

c000c2d4 <setupTextMode()>:
c000c2d4:	c7 05 38 44 02 c0 b4 c1 00 c0 	mov    DWORD PTR ds:0xc0024438,0xc000c1b4
c000c2de:	c7 05 24 44 02 c0 90 c0 00 c0 	mov    DWORD PTR ds:0xc0024424,0xc000c090
c000c2e8:	c7 05 20 44 02 c0 d5 c0 00 c0 	mov    DWORD PTR ds:0xc0024420,0xc000c0d5
c000c2f2:	c7 05 2c 44 02 c0 f0 c1 00 c0 	mov    DWORD PTR ds:0xc002442c,0xc000c1f0
c000c2fc:	c7 05 34 44 02 c0 17 c1 00 c0 	mov    DWORD PTR ds:0xc0024434,0xc000c117
c000c306:	c7 05 28 44 02 c0 6b c1 00 c0 	mov    DWORD PTR ds:0xc0024428,0xc000c16b
c000c310:	c7 05 30 44 02 c0 6c c1 00 c0 	mov    DWORD PTR ds:0xc0024430,0xc000c16c
c000c31a:	c7 05 3c 44 02 c0 76 c2 00 c0 	mov    DWORD PTR ds:0xc002443c,0xc000c276
c000c324:	c3                   	ret    

c000c325 <kernel_main>:
c000c325:	57                   	push   edi
c000c326:	bf f9 03 00 00       	mov    edi,0x3f9
c000c32b:	56                   	push   esi
c000c32c:	31 f6                	xor    esi,esi
c000c32e:	53                   	push   ebx
c000c32f:	83 ec 10             	sub    esp,0x10
c000c332:	e8 ed 08 00 00       	call   c000cc24 <installVgaTextImplementation()>
c000c337:	e8 98 ff ff ff       	call   c000c2d4 <setupTextMode()>
c000c33c:	89 f0                	mov    eax,esi
c000c33e:	89 fa                	mov    edx,edi
c000c340:	ee                   	out    dx,al
c000c341:	bb fb 03 00 00       	mov    ebx,0x3fb
c000c346:	b0 80                	mov    al,0x80
c000c348:	89 da                	mov    edx,ebx
c000c34a:	ee                   	out    dx,al
c000c34b:	b1 03                	mov    cl,0x3
c000c34d:	ba f8 03 00 00       	mov    edx,0x3f8
c000c352:	88 c8                	mov    al,cl
c000c354:	ee                   	out    dx,al
c000c355:	89 f0                	mov    eax,esi
c000c357:	89 fa                	mov    edx,edi
c000c359:	ee                   	out    dx,al
c000c35a:	88 c8                	mov    al,cl
c000c35c:	89 da                	mov    edx,ebx
c000c35e:	ee                   	out    dx,al
c000c35f:	b0 c7                	mov    al,0xc7
c000c361:	ba fa 03 00 00       	mov    edx,0x3fa
c000c366:	ee                   	out    dx,al
c000c367:	b0 0b                	mov    al,0xb
c000c369:	ba fc 03 00 00       	mov    edx,0x3fc
c000c36e:	ee                   	out    dx,al
c000c36f:	a1 24 05 00 00       	mov    eax,ds:0x524
c000c374:	83 ec 0c             	sub    esp,0xc
c000c377:	05 ff 0f 00 00       	add    eax,0xfff
c000c37c:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c381:	50                   	push   eax
c000c382:	e8 59 03 00 00       	call   c000c6e0 <Phys::physicalMemorySetup(unsigned int)>
c000c387:	e8 da 1e 00 00       	call   c000e266 <Virt::virtualMemorySetup()>
c000c38c:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000c392:	83 c4 10             	add    esp,0x10
c000c395:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000c39b:	75 0e                	jne    c000c3ab <kernel_main+0x86>
c000c39d:	89 d8                	mov    eax,ebx
c000c39f:	25 48 03 00 00       	and    eax,0x348
c000c3a4:	3d 00 03 00 00       	cmp    eax,0x300
c000c3a9:	74 10                	je     c000c3bb <kernel_main+0x96>
c000c3ab:	83 ec 0c             	sub    esp,0xc
c000c3ae:	68 07 25 02 c0       	push   0xc0022507
c000c3b3:	e8 38 95 00 00       	call   c00158f0 <Krnl::panic(char const*)>
c000c3b8:	83 c4 10             	add    esp,0x10
c000c3bb:	83 ec 0c             	sub    esp,0xc
c000c3be:	89 1d a0 43 02 c0    	mov    DWORD PTR ds:0xc00243a0,ebx
c000c3c4:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000c3c8:	53                   	push   ebx
c000c3c9:	e8 42 20 00 00       	call   c000e410 <VAS::VAS()>
c000c3ce:	89 1d e4 44 02 c0    	mov    DWORD PTR ds:0xc00244e4,ebx
c000c3d4:	e8 47 3c ff ff       	call   c0000020 <callGlobalConstructors>
c000c3d9:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000c3e0:	e8 53 2c 00 00       	call   c000f038 <operator new(unsigned long)>
c000c3e5:	89 04 24             	mov    DWORD PTR [esp],eax
c000c3e8:	89 c6                	mov    esi,eax
c000c3ea:	e8 7f ea ff ff       	call   c000ae6e <Computer::Computer()>
c000c3ef:	6a 00                	push   0x0
c000c3f1:	89 35 88 43 02 c0    	mov    DWORD PTR ds:0xc0024388,esi
c000c3f7:	6a 00                	push   0x0
c000c3f9:	6a 00                	push   0x0
c000c3fb:	56                   	push   esi
c000c3fc:	e8 77 f2 ff ff       	call   c000b678 <Computer::open(int, int, void*)>
c000c401:	83 c4 14             	add    esp,0x14
c000c404:	53                   	push   ebx
c000c405:	e8 b2 22 00 00       	call   c000e6bc <VAS::~VAS()>
c000c40a:	c7 04 24 e0 0f 02 c0 	mov    DWORD PTR [esp],0xc0020fe0
c000c411:	e8 da 94 00 00       	call   c00158f0 <Krnl::panic(char const*)>
c000c416:	83 c4 20             	add    esp,0x20
c000c419:	5b                   	pop    ebx
c000c41a:	5e                   	pop    esi
c000c41b:	5f                   	pop    edi
c000c41c:	c3                   	ret    

c000c41d <Phys::allocateDMA(unsigned long)>:
c000c41d:	55                   	push   ebp
c000c41e:	31 d2                	xor    edx,edx
c000c420:	57                   	push   edi
c000c421:	31 ed                	xor    ebp,ebp
c000c423:	56                   	push   esi
c000c424:	31 c9                	xor    ecx,ecx
c000c426:	53                   	push   ebx
c000c427:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c42b:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000c431:	31 c0                	xor    eax,eax
c000c433:	c1 ee 0c             	shr    esi,0xc
c000c436:	eb 17                	jmp    c000c44f <Phys::allocateDMA(unsigned long)+0x32>
c000c438:	85 c9                	test   ecx,ecx
c000c43a:	75 04                	jne    c000c440 <Phys::allocateDMA(unsigned long)+0x23>
c000c43c:	89 d5                	mov    ebp,edx
c000c43e:	89 d0                	mov    eax,edx
c000c440:	8d 59 01             	lea    ebx,[ecx+0x1]
c000c443:	39 de                	cmp    esi,ebx
c000c445:	74 20                	je     c000c467 <Phys::allocateDMA(unsigned long)+0x4a>
c000c447:	42                   	inc    edx
c000c448:	89 d9                	mov    ecx,ebx
c000c44a:	83 fa 2f             	cmp    edx,0x2f
c000c44d:	7f 11                	jg     c000c460 <Phys::allocateDMA(unsigned long)+0x43>
c000c44f:	80 ba e0 43 02 c0 00 	cmp    BYTE PTR [edx-0x3ffdbc20],0x0
c000c456:	74 e0                	je     c000c438 <Phys::allocateDMA(unsigned long)+0x1b>
c000c458:	31 c9                	xor    ecx,ecx
c000c45a:	42                   	inc    edx
c000c45b:	83 fa 2f             	cmp    edx,0x2f
c000c45e:	7e ef                	jle    c000c44f <Phys::allocateDMA(unsigned long)+0x32>
c000c460:	5b                   	pop    ebx
c000c461:	31 c0                	xor    eax,eax
c000c463:	5e                   	pop    esi
c000c464:	5f                   	pop    edi
c000c465:	5d                   	pop    ebp
c000c466:	c3                   	ret    
c000c467:	8d 14 30             	lea    edx,[eax+esi*1]
c000c46a:	89 d7                	mov    edi,edx
c000c46c:	4f                   	dec    edi
c000c46d:	79 03                	jns    c000c472 <Phys::allocateDMA(unsigned long)+0x55>
c000c46f:	8d 7a 0e             	lea    edi,[edx+0xe]
c000c472:	c1 ff 04             	sar    edi,0x4
c000c475:	89 c2                	mov    edx,eax
c000c477:	c1 fa 04             	sar    edx,0x4
c000c47a:	39 fa                	cmp    edx,edi
c000c47c:	75 2f                	jne    c000c4ad <Phys::allocateDMA(unsigned long)+0x90>
c000c47e:	85 db                	test   ebx,ebx
c000c480:	74 1a                	je     c000c49c <Phys::allocateDMA(unsigned long)+0x7f>
c000c482:	be e0 43 02 c0       	mov    esi,0xc00243e0
c000c487:	8d 90 e0 43 02 c0    	lea    edx,[eax-0x3ffdbc20]
c000c48d:	f7 d6                	not    esi
c000c48f:	29 c6                	sub    esi,eax
c000c491:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000c494:	42                   	inc    edx
c000c495:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000c498:	39 d9                	cmp    ecx,ebx
c000c49a:	7f f5                	jg     c000c491 <Phys::allocateDMA(unsigned long)+0x74>
c000c49c:	85 ff                	test   edi,edi
c000c49e:	74 13                	je     c000c4b3 <Phys::allocateDMA(unsigned long)+0x96>
c000c4a0:	5b                   	pop    ebx
c000c4a1:	05 50 20 0c 00       	add    eax,0xc2050
c000c4a6:	5e                   	pop    esi
c000c4a7:	c1 e0 0c             	shl    eax,0xc
c000c4aa:	5f                   	pop    edi
c000c4ab:	5d                   	pop    ebp
c000c4ac:	c3                   	ret    
c000c4ad:	89 ea                	mov    edx,ebp
c000c4af:	31 c9                	xor    ecx,ecx
c000c4b1:	eb a7                	jmp    c000c45a <Phys::allocateDMA(unsigned long)+0x3d>
c000c4b3:	5b                   	pop    ebx
c000c4b4:	c1 e0 0c             	shl    eax,0xc
c000c4b7:	5e                   	pop    esi
c000c4b8:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000c4bd:	5f                   	pop    edi
c000c4be:	5d                   	pop    ebp
c000c4bf:	c3                   	ret    

c000c4c0 <Phys::freeDMA(unsigned long, unsigned long)>:
c000c4c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c4c4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c4c8:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000c4ce:	c1 e9 0c             	shr    ecx,0xc
c000c4d1:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000c4d6:	76 25                	jbe    c000c4fd <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000c4d8:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000c4dd:	c1 e8 0c             	shr    eax,0xc
c000c4e0:	8d 50 10             	lea    edx,[eax+0x10]
c000c4e3:	85 c9                	test   ecx,ecx
c000c4e5:	74 15                	je     c000c4fc <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000c4e7:	8d 82 e0 43 02 c0    	lea    eax,[edx-0x3ffdbc20]
c000c4ed:	8d 94 11 e0 43 02 c0 	lea    edx,[ecx+edx*1-0x3ffdbc20]
c000c4f4:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000c4f7:	40                   	inc    eax
c000c4f8:	39 d0                	cmp    eax,edx
c000c4fa:	75 f8                	jne    c000c4f4 <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000c4fc:	c3                   	ret    
c000c4fd:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000c503:	c1 ea 0c             	shr    edx,0xc
c000c506:	eb db                	jmp    c000c4e3 <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000c508 <Phys::setPageState(unsigned long, bool)>:
c000c508:	56                   	push   esi
c000c509:	ba 01 00 00 00       	mov    edx,0x1
c000c50e:	53                   	push   ebx
c000c50f:	8b 35 a4 37 02 c0    	mov    esi,DWORD PTR ds:0xc00237a4
c000c515:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c519:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c51d:	89 c8                	mov    eax,ecx
c000c51f:	83 e1 07             	and    ecx,0x7
c000c522:	c1 e8 03             	shr    eax,0x3
c000c525:	d3 e3                	shl    ebx,cl
c000c527:	01 c6                	add    esi,eax
c000c529:	d3 e2                	shl    edx,cl
c000c52b:	f7 d2                	not    edx
c000c52d:	20 16                	and    BYTE PTR [esi],dl
c000c52f:	03 05 a4 37 02 c0    	add    eax,DWORD PTR ds:0xc00237a4
c000c535:	08 18                	or     BYTE PTR [eax],bl
c000c537:	5b                   	pop    ebx
c000c538:	5e                   	pop    esi
c000c539:	c3                   	ret    

c000c53a <Phys::getPageState(unsigned long)>:
c000c53a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000c53e:	8b 15 a4 37 02 c0    	mov    edx,DWORD PTR ds:0xc00237a4
c000c544:	89 c8                	mov    eax,ecx
c000c546:	83 e1 07             	and    ecx,0x7
c000c549:	c1 e8 03             	shr    eax,0x3
c000c54c:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000c550:	d3 f8                	sar    eax,cl
c000c552:	83 e0 01             	and    eax,0x1
c000c555:	c3                   	ret    

c000c556 <Phys::freePage(unsigned long)>:
c000c556:	53                   	push   ebx
c000c557:	83 ec 08             	sub    esp,0x8
c000c55a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c55e:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000c564:	76 57                	jbe    c000c5bd <Phys::freePage(unsigned long)+0x67>
c000c566:	c1 eb 0c             	shr    ebx,0xc
c000c569:	53                   	push   ebx
c000c56a:	e8 cb ff ff ff       	call   c000c53a <Phys::getPageState(unsigned long)>
c000c56f:	5a                   	pop    edx
c000c570:	84 c0                	test   al,al
c000c572:	74 5b                	je     c000c5cf <Phys::freePage(unsigned long)+0x79>
c000c574:	a1 cc 43 02 c0       	mov    eax,ds:0xc00243cc
c000c579:	48                   	dec    eax
c000c57a:	a3 cc 43 02 c0       	mov    ds:0xc00243cc,eax
c000c57f:	8d 04 80             	lea    eax,[eax+eax*4]
c000c582:	8d 04 80             	lea    eax,[eax+eax*4]
c000c585:	c1 e0 02             	shl    eax,0x2
c000c588:	99                   	cdq    
c000c589:	f7 3d d0 43 02 c0    	idiv   DWORD PTR ds:0xc00243d0
c000c58f:	39 05 c8 43 02 c0    	cmp    DWORD PTR ds:0xc00243c8,eax
c000c595:	75 13                	jne    c000c5aa <Phys::freePage(unsigned long)+0x54>
c000c597:	83 ec 08             	sub    esp,0x8
c000c59a:	6a 00                	push   0x0
c000c59c:	53                   	push   ebx
c000c59d:	e8 66 ff ff ff       	call   c000c508 <Phys::setPageState(unsigned long, bool)>
c000c5a2:	83 c4 10             	add    esp,0x10
c000c5a5:	83 c4 08             	add    esp,0x8
c000c5a8:	5b                   	pop    ebx
c000c5a9:	c3                   	ret    
c000c5aa:	83 ec 0c             	sub    esp,0xc
c000c5ad:	a3 c8 43 02 c0       	mov    ds:0xc00243c8,eax
c000c5b2:	50                   	push   eax
c000c5b3:	e8 00 0a 00 00       	call   c000cfb8 <VgaText::updateRAMUsageDisplay(int)>
c000c5b8:	83 c4 10             	add    esp,0x10
c000c5bb:	eb da                	jmp    c000c597 <Phys::freePage(unsigned long)+0x41>
c000c5bd:	68 00 10 00 00       	push   0x1000
c000c5c2:	53                   	push   ebx
c000c5c3:	e8 f8 fe ff ff       	call   c000c4c0 <Phys::freeDMA(unsigned long, unsigned long)>
c000c5c8:	59                   	pop    ecx
c000c5c9:	5b                   	pop    ebx
c000c5ca:	83 c4 08             	add    esp,0x8
c000c5cd:	5b                   	pop    ebx
c000c5ce:	c3                   	ret    
c000c5cf:	c7 44 24 10 fb 0f 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020ffb
c000c5d7:	83 c4 08             	add    esp,0x8
c000c5da:	5b                   	pop    ebx
c000c5db:	e9 10 93 00 00       	jmp    c00158f0 <Krnl::panic(char const*)>

c000c5e0 <Phys::allocatePage()>:
c000c5e0:	56                   	push   esi
c000c5e1:	53                   	push   ebx
c000c5e2:	51                   	push   ecx
c000c5e3:	8b 35 c0 43 02 c0    	mov    esi,DWORD PTR ds:0xc00243c0
c000c5e9:	89 f3                	mov    ebx,esi
c000c5eb:	eb 0a                	jmp    c000c5f7 <Phys::allocatePage()+0x17>
c000c5ed:	89 1d c0 43 02 c0    	mov    DWORD PTR ds:0xc00243c0,ebx
c000c5f3:	39 de                	cmp    esi,ebx
c000c5f5:	74 24                	je     c000c61b <Phys::allocatePage()+0x3b>
c000c5f7:	53                   	push   ebx
c000c5f8:	e8 3d ff ff ff       	call   c000c53a <Phys::getPageState(unsigned long)>
c000c5fd:	5a                   	pop    edx
c000c5fe:	84 c0                	test   al,al
c000c600:	74 5a                	je     c000c65c <Phys::allocatePage()+0x7c>
c000c602:	43                   	inc    ebx
c000c603:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000c609:	75 e2                	jne    c000c5ed <Phys::allocatePage()+0xd>
c000c60b:	31 db                	xor    ebx,ebx
c000c60d:	c7 05 c0 43 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00243c0,0x0
c000c617:	39 de                	cmp    esi,ebx
c000c619:	75 dc                	jne    c000c5f7 <Phys::allocatePage()+0x17>
c000c61b:	83 ec 0c             	sub    esp,0xc
c000c61e:	68 11 10 02 c0       	push   0xc0021011
c000c623:	e8 ff 2a 00 00       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c000c628:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c000c62f:	e8 e9 fd ff ff       	call   c000c41d <Phys::allocateDMA(unsigned long)>
c000c634:	83 c4 10             	add    esp,0x10
c000c637:	85 c0                	test   eax,eax
c000c639:	75 56                	jne    c000c691 <Phys::allocatePage()+0xb1>
c000c63b:	83 ec 0c             	sub    esp,0xc
c000c63e:	68 22 10 02 c0       	push   0xc0021022
c000c643:	e8 a8 92 00 00       	call   c00158f0 <Krnl::panic(char const*)>
c000c648:	83 c4 10             	add    esp,0x10
c000c64b:	8b 1d c0 43 02 c0    	mov    ebx,DWORD PTR ds:0xc00243c0
c000c651:	53                   	push   ebx
c000c652:	e8 e3 fe ff ff       	call   c000c53a <Phys::getPageState(unsigned long)>
c000c657:	5a                   	pop    edx
c000c658:	84 c0                	test   al,al
c000c65a:	75 a6                	jne    c000c602 <Phys::allocatePage()+0x22>
c000c65c:	6a 01                	push   0x1
c000c65e:	53                   	push   ebx
c000c65f:	e8 a4 fe ff ff       	call   c000c508 <Phys::setPageState(unsigned long, bool)>
c000c664:	a1 cc 43 02 c0       	mov    eax,ds:0xc00243cc
c000c669:	59                   	pop    ecx
c000c66a:	40                   	inc    eax
c000c66b:	5b                   	pop    ebx
c000c66c:	a3 cc 43 02 c0       	mov    ds:0xc00243cc,eax
c000c671:	8d 04 80             	lea    eax,[eax+eax*4]
c000c674:	8d 04 80             	lea    eax,[eax+eax*4]
c000c677:	c1 e0 02             	shl    eax,0x2
c000c67a:	99                   	cdq    
c000c67b:	f7 3d d0 43 02 c0    	idiv   DWORD PTR ds:0xc00243d0
c000c681:	39 05 c8 43 02 c0    	cmp    DWORD PTR ds:0xc00243c8,eax
c000c687:	75 0c                	jne    c000c695 <Phys::allocatePage()+0xb5>
c000c689:	a1 c0 43 02 c0       	mov    eax,ds:0xc00243c0
c000c68e:	c1 e0 0c             	shl    eax,0xc
c000c691:	5a                   	pop    edx
c000c692:	5b                   	pop    ebx
c000c693:	5e                   	pop    esi
c000c694:	c3                   	ret    
c000c695:	83 ec 0c             	sub    esp,0xc
c000c698:	a3 c8 43 02 c0       	mov    ds:0xc00243c8,eax
c000c69d:	50                   	push   eax
c000c69e:	e8 15 09 00 00       	call   c000cfb8 <VgaText::updateRAMUsageDisplay(int)>
c000c6a3:	83 c4 10             	add    esp,0x10
c000c6a6:	eb e1                	jmp    c000c689 <Phys::allocatePage()+0xa9>

c000c6a8 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000c6a8:	56                   	push   esi
c000c6a9:	53                   	push   ebx
c000c6aa:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c6ae:	39 1d c4 43 02 c0    	cmp    DWORD PTR ds:0xc00243c4,ebx
c000c6b4:	73 06                	jae    c000c6bc <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000c6b6:	89 1d c4 43 02 c0    	mov    DWORD PTR ds:0xc00243c4,ebx
c000c6bc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c6c0:	c1 eb 0c             	shr    ebx,0xc
c000c6c3:	c1 e8 0c             	shr    eax,0xc
c000c6c6:	39 d8                	cmp    eax,ebx
c000c6c8:	73 13                	jae    c000c6dd <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000c6ca:	6a 00                	push   0x0
c000c6cc:	8d 70 01             	lea    esi,[eax+0x1]
c000c6cf:	50                   	push   eax
c000c6d0:	e8 33 fe ff ff       	call   c000c508 <Phys::setPageState(unsigned long, bool)>
c000c6d5:	5a                   	pop    edx
c000c6d6:	89 f0                	mov    eax,esi
c000c6d8:	59                   	pop    ecx
c000c6d9:	39 f3                	cmp    ebx,esi
c000c6db:	75 ed                	jne    c000c6ca <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000c6dd:	5b                   	pop    ebx
c000c6de:	5e                   	pop    esi
c000c6df:	c3                   	ret    

c000c6e0 <Phys::physicalMemorySetup(unsigned int)>:
c000c6e0:	55                   	push   ebp
c000c6e1:	57                   	push   edi
c000c6e2:	56                   	push   esi
c000c6e3:	53                   	push   ebx
c000c6e4:	31 db                	xor    ebx,ebx
c000c6e6:	83 ec 40             	sub    esp,0x40
c000c6e9:	6a 30                	push   0x30
c000c6eb:	6a 00                	push   0x0
c000c6ed:	68 e0 43 02 c0       	push   0xc00243e0
c000c6f2:	e8 dc 3f ff ff       	call   c00006d3 <memset>
c000c6f7:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000c6fb:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c700:	05 00 10 00 00       	add    eax,0x1000
c000c705:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000c709:	83 c4 10             	add    esp,0x10
c000c70c:	83 ec 08             	sub    esp,0x8
c000c70f:	6a 01                	push   0x1
c000c711:	53                   	push   ebx
c000c712:	43                   	inc    ebx
c000c713:	e8 f0 fd ff ff       	call   c000c508 <Phys::setPageState(unsigned long, bool)>
c000c718:	83 c4 10             	add    esp,0x10
c000c71b:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000c721:	75 e9                	jne    c000c70c <Phys::physicalMemorySetup(unsigned int)+0x2c>
c000c723:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c000c72a:	66 85 c0             	test   ax,ax
c000c72d:	0f 84 8e 01 00 00    	je     c000c8c1 <Phys::physicalMemorySetup(unsigned int)+0x1e1>
c000c733:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c737:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000c73f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c743:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000c748:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c74c:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000c754:	eb 15                	jmp    c000c76b <Phys::physicalMemorySetup(unsigned int)+0x8b>
c000c756:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000c75a:	83 c3 18             	add    ebx,0x18
c000c75d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c761:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000c765:	0f 84 66 01 00 00    	je     c000c8d1 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c000c76b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c76e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000c771:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000c774:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c778:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c77c:	8b 33                	mov    esi,DWORD PTR [ebx]
c000c77e:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000c781:	01 f0                	add    eax,esi
c000c783:	55                   	push   ebp
c000c784:	11 fa                	adc    edx,edi
c000c786:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c78a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000c78e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c792:	56                   	push   esi
c000c793:	68 5c 10 02 c0       	push   0xc002105c
c000c798:	e8 8a 29 00 00       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c000c79d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c7a1:	83 c4 10             	add    esp,0x10
c000c7a4:	09 f8                	or     eax,edi
c000c7a6:	0f 85 25 01 00 00    	jne    c000c8d1 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c000c7ac:	4d                   	dec    ebp
c000c7ad:	75 a7                	jne    c000c756 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000c7af:	ba 00 00 08 00       	mov    edx,0x80000
c000c7b4:	89 c1                	mov    ecx,eax
c000c7b6:	39 f2                	cmp    edx,esi
c000c7b8:	19 f9                	sbb    ecx,edi
c000c7ba:	0f 82 a7 00 00 00    	jb     c000c867 <Phys::physicalMemorySetup(unsigned int)+0x187>
c000c7c0:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000c7c4:	89 c1                	mov    ecx,eax
c000c7c6:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000c7ca:	0f 83 97 00 00 00    	jae    c000c867 <Phys::physicalMemorySetup(unsigned int)+0x187>
c000c7d0:	ba 00 00 0a 00       	mov    edx,0xa0000
c000c7d5:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000c7d9:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000c7dd:	39 fa                	cmp    edx,edi
c000c7df:	19 e8                	sbb    eax,ebp
c000c7e1:	0f 82 14 01 00 00    	jb     c000c8fb <Phys::physicalMemorySetup(unsigned int)+0x21b>
c000c7e7:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000c7eb:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000c7ef:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c000c7f5:	ba ff 1f 00 00       	mov    edx,0x1fff
c000c7fa:	83 d5 ff             	adc    ebp,0xffffffff
c000c7fd:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000c801:	31 c0                	xor    eax,eax
c000c803:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000c807:	39 fa                	cmp    edx,edi
c000c809:	89 c1                	mov    ecx,eax
c000c80b:	19 e9                	sbb    ecx,ebp
c000c80d:	0f 83 43 ff ff ff    	jae    c000c756 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000c813:	be 00 00 08 00       	mov    esi,0x80000
c000c818:	50                   	push   eax
c000c819:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000c81d:	57                   	push   edi
c000c81e:	56                   	push   esi
c000c81f:	68 80 10 02 c0       	push   0xc0021080
c000c824:	e8 fe 28 00 00       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c000c829:	5a                   	pop    edx
c000c82a:	59                   	pop    ecx
c000c82b:	57                   	push   edi
c000c82c:	56                   	push   esi
c000c82d:	e8 76 fe ff ff       	call   c000c6a8 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000c832:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000c836:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c83a:	83 c4 0c             	add    esp,0xc
c000c83d:	0f ac d0 0c          	shrd   eax,edx,0xc
c000c841:	03 05 d0 43 02 c0    	add    eax,DWORD PTR ds:0xc00243d0
c000c847:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000c84e:	a3 d0 43 02 c0       	mov    ds:0xc00243d0,eax
c000c853:	52                   	push   edx
c000c854:	50                   	push   eax
c000c855:	68 3e 10 02 c0       	push   0xc002103e
c000c85a:	e8 c8 28 00 00       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c000c85f:	83 c4 10             	add    esp,0x10
c000c862:	e9 ef fe ff ff       	jmp    c000c756 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000c867:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000c86b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c86f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c873:	39 ea                	cmp    edx,ebp
c000c875:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000c879:	0f 82 d7 fe ff ff    	jb     c000c756 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000c87f:	ba ff 1f 00 00       	mov    edx,0x1fff
c000c884:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000c888:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000c88c:	0f 83 c4 fe ff ff    	jae    c000c756 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000c892:	39 ee                	cmp    esi,ebp
c000c894:	89 f8                	mov    eax,edi
c000c896:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000c89a:	0f 83 78 ff ff ff    	jae    c000c818 <Phys::physicalMemorySetup(unsigned int)+0x138>
c000c8a0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c8a4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c8a8:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000c8ac:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000c8b0:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c000c8b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8b8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8bc:	e9 57 ff ff ff       	jmp    c000c818 <Phys::physicalMemorySetup(unsigned int)+0x138>
c000c8c1:	83 ec 0c             	sub    esp,0xc
c000c8c4:	68 30 10 02 c0       	push   0xc0021030
c000c8c9:	e8 22 90 00 00       	call   c00158f0 <Krnl::panic(char const*)>
c000c8ce:	83 c4 10             	add    esp,0x10
c000c8d1:	bb 40 01 00 00       	mov    ebx,0x140
c000c8d6:	83 ec 08             	sub    esp,0x8
c000c8d9:	6a 00                	push   0x0
c000c8db:	53                   	push   ebx
c000c8dc:	43                   	inc    ebx
c000c8dd:	e8 26 fc ff ff       	call   c000c508 <Phys::setPageState(unsigned long, bool)>
c000c8e2:	ff 05 d0 43 02 c0    	inc    DWORD PTR ds:0xc00243d0
c000c8e8:	83 c4 10             	add    esp,0x10
c000c8eb:	81 fb 80 01 00 00    	cmp    ebx,0x180
c000c8f1:	75 e3                	jne    c000c8d6 <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c000c8f3:	83 c4 3c             	add    esp,0x3c
c000c8f6:	5b                   	pop    ebx
c000c8f7:	5e                   	pop    esi
c000c8f8:	5f                   	pop    edi
c000c8f9:	5d                   	pop    ebp
c000c8fa:	c3                   	ret    
c000c8fb:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000c903:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000c90b:	e9 d7 fe ff ff       	jmp    c000c7e7 <Phys::physicalMemorySetup(unsigned int)+0x107>

c000c910 <Pipe::isAtty()>:
c000c910:	31 c0                	xor    eax,eax
c000c912:	c3                   	ret    
c000c913:	90                   	nop

c000c914 <Pipe::~Pipe()>:
c000c914:	83 ec 0c             	sub    esp,0xc
c000c917:	ba ec 10 02 c0       	mov    edx,0xc00210ec
c000c91c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c920:	89 10                	mov    DWORD PTR [eax],edx
c000c922:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c926:	83 ec 0c             	sub    esp,0xc
c000c929:	50                   	push   eax
c000c92a:	e8 c5 15 00 00       	call   c000def4 <UnixFile::~UnixFile()>
c000c92f:	83 c4 10             	add    esp,0x10
c000c932:	90                   	nop
c000c933:	83 c4 0c             	add    esp,0xc
c000c936:	c3                   	ret    
c000c937:	90                   	nop

c000c938 <Pipe::~Pipe()>:
c000c938:	83 ec 0c             	sub    esp,0xc
c000c93b:	83 ec 0c             	sub    esp,0xc
c000c93e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c942:	e8 cd ff ff ff       	call   c000c914 <Pipe::~Pipe()>
c000c947:	83 c4 10             	add    esp,0x10
c000c94a:	83 ec 08             	sub    esp,0x8
c000c94d:	6a 20                	push   0x20
c000c94f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c953:	e8 ef 26 00 00       	call   c000f047 <operator delete(void*, unsigned long)>
c000c958:	83 c4 10             	add    esp,0x10
c000c95b:	83 c4 0c             	add    esp,0xc
c000c95e:	c3                   	ret    
c000c95f:	90                   	nop

c000c960 <Pipe::read(unsigned long long, void*, int*)>:
c000c960:	55                   	push   ebp
c000c961:	57                   	push   edi
c000c962:	56                   	push   esi
c000c963:	53                   	push   ebx
c000c964:	83 ec 1c             	sub    esp,0x1c
c000c967:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000c96b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000c96f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000c973:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000c976:	89 c8                	mov    eax,ecx
c000c978:	99                   	cdq    
c000c979:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000c97d:	74 19                	je     c000c998 <Pipe::read(unsigned long long, void*, int*)+0x38>
c000c97f:	39 f9                	cmp    ecx,edi
c000c981:	89 d1                	mov    ecx,edx
c000c983:	19 f1                	sbb    ecx,esi
c000c985:	73 11                	jae    c000c998 <Pipe::read(unsigned long long, void*, int*)+0x38>
c000c987:	e8 b8 be 00 00       	call   c0018844 <lockScheduler()>
c000c98c:	e8 e7 c1 00 00       	call   c0018b78 <schedule()>
c000c991:	e8 b0 be 00 00       	call   c0018846 <unlockScheduler()>
c000c996:	eb db                	jmp    c000c973 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000c998:	39 f8                	cmp    eax,edi
c000c99a:	89 d1                	mov    ecx,edx
c000c99c:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000c9a0:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000c9a4:	19 f1                	sbb    ecx,esi
c000c9a6:	73 08                	jae    c000c9b0 <Pipe::read(unsigned long long, void*, int*)+0x50>
c000c9a8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c9ac:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c9b0:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c9b3:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000c9b6:	29 c6                	sub    esi,eax
c000c9b8:	89 f1                	mov    ecx,esi
c000c9ba:	c1 f9 1f             	sar    ecx,0x1f
c000c9bd:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c000c9c1:	89 ca                	mov    edx,ecx
c000c9c3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c9c7:	19 d1                	sbb    ecx,edx
c000c9c9:	73 04                	jae    c000c9cf <Pipe::read(unsigned long long, void*, int*)+0x6f>
c000c9cb:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000c9cf:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000c9d3:	89 fd                	mov    ebp,edi
c000c9d5:	29 f5                	sub    ebp,esi
c000c9d7:	85 f6                	test   esi,esi
c000c9d9:	74 12                	je     c000c9ed <Pipe::read(unsigned long long, void*, int*)+0x8d>
c000c9db:	52                   	push   edx
c000c9dc:	56                   	push   esi
c000c9dd:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
c000c9e0:	50                   	push   eax
c000c9e1:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000c9e5:	e8 b3 3c ff ff       	call   c000069d <memcpy>
c000c9ea:	83 c4 10             	add    esp,0x10
c000c9ed:	85 ed                	test   ebp,ebp
c000c9ef:	74 12                	je     c000ca03 <Pipe::read(unsigned long long, void*, int*)+0xa3>
c000c9f1:	50                   	push   eax
c000c9f2:	55                   	push   ebp
c000c9f3:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000c9f6:	03 74 24 48          	add    esi,DWORD PTR [esp+0x48]
c000c9fa:	56                   	push   esi
c000c9fb:	e8 9d 3c ff ff       	call   c000069d <memcpy>
c000ca00:	83 c4 10             	add    esp,0x10
c000ca03:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c000ca06:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000ca09:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000ca0c:	99                   	cdq    
c000ca0d:	89 f7                	mov    edi,esi
c000ca0f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000ca13:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000ca17:	c1 ff 1f             	sar    edi,0x1f
c000ca1a:	57                   	push   edi
c000ca1b:	56                   	push   esi
c000ca1c:	52                   	push   edx
c000ca1d:	50                   	push   eax
c000ca1e:	e8 a9 28 01 00       	call   c001f2cc <__umoddi3>
c000ca23:	83 c4 10             	add    esp,0x10
c000ca26:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ca29:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000ca2e:	75 10                	jne    c000ca40 <Pipe::read(unsigned long long, void*, int*)+0xe0>
c000ca30:	83 ec 0c             	sub    esp,0xc
c000ca33:	68 a9 10 02 c0       	push   0xc00210a9
c000ca38:	e8 b3 8e 00 00       	call   c00158f0 <Krnl::panic(char const*)>
c000ca3d:	83 c4 10             	add    esp,0x10
c000ca40:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ca44:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ca48:	89 10                	mov    DWORD PTR [eax],edx
c000ca4a:	83 c4 1c             	add    esp,0x1c
c000ca4d:	31 c0                	xor    eax,eax
c000ca4f:	5b                   	pop    ebx
c000ca50:	5e                   	pop    esi
c000ca51:	5f                   	pop    edi
c000ca52:	5d                   	pop    ebp
c000ca53:	c3                   	ret    

c000ca54 <Pipe::write(unsigned long long, void*, int*)>:
c000ca54:	55                   	push   ebp
c000ca55:	57                   	push   edi
c000ca56:	56                   	push   esi
c000ca57:	53                   	push   ebx
c000ca58:	83 ec 1c             	sub    esp,0x1c
c000ca5b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ca5f:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000ca63:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000ca67:	89 04 24             	mov    DWORD PTR [esp],eax
c000ca6a:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c000ca6d:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c000ca70:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ca74:	89 de                	mov    esi,ebx
c000ca76:	89 df                	mov    edi,ebx
c000ca78:	c1 ff 1f             	sar    edi,0x1f
c000ca7b:	01 c6                	add    esi,eax
c000ca7d:	89 c8                	mov    eax,ecx
c000ca7f:	11 d7                	adc    edi,edx
c000ca81:	99                   	cdq    
c000ca82:	39 f1                	cmp    ecx,esi
c000ca84:	89 d0                	mov    eax,edx
c000ca86:	19 f8                	sbb    eax,edi
c000ca88:	b8 01 00 00 00       	mov    eax,0x1
c000ca8d:	0f 82 80 00 00 00    	jb     c000cb13 <Pipe::write(unsigned long long, void*, int*)+0xbf>
c000ca93:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000ca96:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000ca99:	01 d8                	add    eax,ebx
c000ca9b:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000ca9f:	99                   	cdq    
c000caa0:	f7 f9                	idiv   ecx
c000caa2:	29 d1                	sub    ecx,edx
c000caa4:	89 d7                	mov    edi,edx
c000caa6:	89 c8                	mov    eax,ecx
c000caa8:	99                   	cdq    
c000caa9:	39 ce                	cmp    esi,ecx
c000caab:	19 d3                	sbb    ebx,edx
c000caad:	bb 00 00 00 00       	mov    ebx,0x0
c000cab2:	72 04                	jb     c000cab8 <Pipe::write(unsigned long long, void*, int*)+0x64>
c000cab4:	89 f3                	mov    ebx,esi
c000cab6:	29 cb                	sub    ebx,ecx
c000cab8:	89 f1                	mov    ecx,esi
c000caba:	29 d9                	sub    ecx,ebx
c000cabc:	74 1a                	je     c000cad8 <Pipe::write(unsigned long long, void*, int*)+0x84>
c000cabe:	52                   	push   edx
c000cabf:	51                   	push   ecx
c000cac0:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000cac4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000cac8:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000cacb:	57                   	push   edi
c000cacc:	e8 cc 3b ff ff       	call   c000069d <memcpy>
c000cad1:	83 c4 10             	add    esp,0x10
c000cad4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000cad8:	85 db                	test   ebx,ebx
c000cada:	74 12                	je     c000caee <Pipe::write(unsigned long long, void*, int*)+0x9a>
c000cadc:	50                   	push   eax
c000cadd:	53                   	push   ebx
c000cade:	03 4c 24 44          	add    ecx,DWORD PTR [esp+0x44]
c000cae2:	51                   	push   ecx
c000cae3:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c000cae6:	e8 b2 3b ff ff       	call   c000069d <memcpy>
c000caeb:	83 c4 10             	add    esp,0x10
c000caee:	01 75 14             	add    DWORD PTR [ebp+0x14],esi
c000caf1:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000caf6:	75 10                	jne    c000cb08 <Pipe::write(unsigned long long, void*, int*)+0xb4>
c000caf8:	83 ec 0c             	sub    esp,0xc
c000cafb:	68 c5 10 02 c0       	push   0xc00210c5
c000cb00:	e8 eb 8d 00 00       	call   c00158f0 <Krnl::panic(char const*)>
c000cb05:	83 c4 10             	add    esp,0x10
c000cb08:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cb0c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000cb0f:	89 38                	mov    DWORD PTR [eax],edi
c000cb11:	31 c0                	xor    eax,eax
c000cb13:	83 c4 1c             	add    esp,0x1c
c000cb16:	5b                   	pop    ebx
c000cb17:	5e                   	pop    esi
c000cb18:	5f                   	pop    edi
c000cb19:	5d                   	pop    ebp
c000cb1a:	c3                   	ret    
c000cb1b:	90                   	nop

c000cb1c <Pipe::Pipe(int)>:
c000cb1c:	83 ec 0c             	sub    esp,0xc
c000cb1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb23:	83 ec 08             	sub    esp,0x8
c000cb26:	6a 00                	push   0x0
c000cb28:	50                   	push   eax
c000cb29:	e8 24 12 00 00       	call   c000dd52 <UnixFile::UnixFile(int)>
c000cb2e:	83 c4 10             	add    esp,0x10
c000cb31:	ba ec 10 02 c0       	mov    edx,0xc00210ec
c000cb36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb3a:	89 10                	mov    DWORD PTR [eax],edx
c000cb3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb40:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cb44:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000cb47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb4b:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000cb52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb56:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000cb5d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000cb61:	83 ec 0c             	sub    esp,0xc
c000cb64:	50                   	push   eax
c000cb65:	e8 cc f4 ff ff       	call   c000c036 <malloc>
c000cb6a:	83 c4 10             	add    esp,0x10
c000cb6d:	89 c2                	mov    edx,eax
c000cb6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb73:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000cb76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb7a:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000cb7e:	90                   	nop
c000cb7f:	83 c4 0c             	add    esp,0xc
c000cb82:	c3                   	ret    
c000cb83:	90                   	nop

c000cb84 <VgaText::isAtty()>:
c000cb84:	b0 01                	mov    al,0x1
c000cb86:	c3                   	ret    
c000cb87:	90                   	nop

c000cb88 <VgaText::~VgaText()>:
c000cb88:	83 ec 0c             	sub    esp,0xc
c000cb8b:	ba a8 11 02 c0       	mov    edx,0xc00211a8
c000cb90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb94:	89 10                	mov    DWORD PTR [eax],edx
c000cb96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb9a:	83 ec 0c             	sub    esp,0xc
c000cb9d:	50                   	push   eax
c000cb9e:	e8 51 13 00 00       	call   c000def4 <UnixFile::~UnixFile()>
c000cba3:	83 c4 10             	add    esp,0x10
c000cba6:	90                   	nop
c000cba7:	83 c4 0c             	add    esp,0xc
c000cbaa:	c3                   	ret    
c000cbab:	90                   	nop

c000cbac <VgaText::~VgaText()>:
c000cbac:	83 ec 0c             	sub    esp,0xc
c000cbaf:	83 ec 0c             	sub    esp,0xc
c000cbb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cbb6:	e8 cd ff ff ff       	call   c000cb88 <VgaText::~VgaText()>
c000cbbb:	83 c4 10             	add    esp,0x10
c000cbbe:	83 ec 08             	sub    esp,0x8
c000cbc1:	68 60 12 00 00       	push   0x1260
c000cbc6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cbca:	e8 78 24 00 00       	call   c000f047 <operator delete(void*, unsigned long)>
c000cbcf:	83 c4 10             	add    esp,0x10
c000cbd2:	83 c4 0c             	add    esp,0xc
c000cbd5:	c3                   	ret    

c000cbd6 <VgaText::read(unsigned long long, void*, int*)>:
c000cbd6:	83 ec 10             	sub    esp,0x10
c000cbd9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cbdd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cbe1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cbe5:	e8 38 57 00 00       	call   c0012322 <readKeyboard(VgaText*, char*, unsigned long)>
c000cbea:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000cbee:	89 02                	mov    DWORD PTR [edx],eax
c000cbf0:	31 c0                	xor    eax,eax
c000cbf2:	83 c4 1c             	add    esp,0x1c
c000cbf5:	c3                   	ret    

c000cbf6 <setTerminalScrollLock(bool)>:
c000cbf6:	c3                   	ret    

c000cbf7 <addToTerminalCycle(VgaText*)>:
c000cbf7:	8b 15 40 44 02 c0    	mov    edx,DWORD PTR ds:0xc0024440
c000cbfd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cc01:	85 d2                	test   edx,edx
c000cc03:	75 0c                	jne    c000cc11 <addToTerminalCycle(VgaText*)+0x1a>
c000cc05:	89 80 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],eax
c000cc0b:	a3 40 44 02 c0       	mov    ds:0xc0024440,eax
c000cc10:	c3                   	ret    
c000cc11:	8b 8a c0 0f 00 00    	mov    ecx,DWORD PTR [edx+0xfc0]
c000cc17:	89 82 c0 0f 00 00    	mov    DWORD PTR [edx+0xfc0],eax
c000cc1d:	89 88 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],ecx
c000cc23:	c3                   	ret    

c000cc24 <installVgaTextImplementation()>:
c000cc24:	83 ec 10             	sub    esp,0x10
c000cc27:	6a 20                	push   0x20
c000cc29:	6a 00                	push   0x0
c000cc2b:	68 20 44 02 c0       	push   0xc0024420
c000cc30:	e8 9e 3a ff ff       	call   c00006d3 <memset>
c000cc35:	83 c4 1c             	add    esp,0x1c
c000cc38:	c3                   	ret    

c000cc39 <scrollTerminalScrollLock(int)>:
c000cc39:	c3                   	ret    

c000cc3a <VgaText::load()>:
c000cc3a:	53                   	push   ebx
c000cc3b:	31 c0                	xor    eax,eax
c000cc3d:	83 ec 58             	sub    esp,0x58
c000cc40:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000cc44:	89 e2                	mov    edx,esp
c000cc46:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c000cc4a:	40                   	inc    eax
c000cc4b:	83 f8 50             	cmp    eax,0x50
c000cc4e:	75 f6                	jne    c000cc46 <VgaText::load()+0xc>
c000cc50:	31 c0                	xor    eax,eax
c000cc52:	8a 8c 03 1e 10 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x101e]
c000cc59:	84 c9                	test   cl,cl
c000cc5b:	74 06                	je     c000cc63 <VgaText::load()+0x29>
c000cc5d:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000cc60:	40                   	inc    eax
c000cc61:	eb ef                	jmp    c000cc52 <VgaText::load()+0x18>
c000cc63:	8b 83 fc 0f 00 00    	mov    eax,DWORD PTR [ebx+0xffc]
c000cc69:	85 c0                	test   eax,eax
c000cc6b:	74 09                	je     c000cc76 <VgaText::load()+0x3c>
c000cc6d:	51                   	push   ecx
c000cc6e:	51                   	push   ecx
c000cc6f:	52                   	push   edx
c000cc70:	53                   	push   ebx
c000cc71:	ff d0                	call   eax
c000cc73:	83 c4 10             	add    esp,0x10
c000cc76:	8b 83 00 10 00 00    	mov    eax,DWORD PTR [ebx+0x1000]
c000cc7c:	85 c0                	test   eax,eax
c000cc7e:	74 09                	je     c000cc89 <VgaText::load()+0x4f>
c000cc80:	83 ec 0c             	sub    esp,0xc
c000cc83:	53                   	push   ebx
c000cc84:	ff d0                	call   eax
c000cc86:	83 c4 10             	add    esp,0x10
c000cc89:	83 c4 58             	add    esp,0x58
c000cc8c:	5b                   	pop    ebx
c000cc8d:	c3                   	ret    

c000cc8e <VgaText::updateCursor()>:
c000cc8e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cc92:	39 05 44 44 02 c0    	cmp    DWORD PTR ds:0xc0024444,eax
c000cc98:	75 0c                	jne    c000cca6 <VgaText::updateCursor()+0x18>
c000cc9a:	8b 80 0c 10 00 00    	mov    eax,DWORD PTR [eax+0x100c]
c000cca0:	85 c0                	test   eax,eax
c000cca2:	74 02                	je     c000cca6 <VgaText::updateCursor()+0x18>
c000cca4:	ff e0                	jmp    eax
c000cca6:	c3                   	ret    
c000cca7:	90                   	nop

c000cca8 <VgaText::showCursor(bool)>:
c000cca8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ccac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ccb0:	88 90 bc 0f 00 00    	mov    BYTE PTR [eax+0xfbc],dl
c000ccb6:	c3                   	ret    
c000ccb7:	90                   	nop

c000ccb8 <VgaText::disableBlink(bool)>:
c000ccb8:	56                   	push   esi
c000ccb9:	53                   	push   ebx
c000ccba:	51                   	push   ecx
c000ccbb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ccbf:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ccc3:	39 1d 44 44 02 c0    	cmp    DWORD PTR ds:0xc0024444,ebx
c000ccc9:	75 18                	jne    c000cce3 <VgaText::disableBlink(bool)+0x2b>
c000cccb:	8b 83 14 10 00 00    	mov    eax,DWORD PTR [ebx+0x1014]
c000ccd1:	85 c0                	test   eax,eax
c000ccd3:	74 0e                	je     c000cce3 <VgaText::disableBlink(bool)+0x2b>
c000ccd5:	89 f1                	mov    ecx,esi
c000ccd7:	52                   	push   edx
c000ccd8:	52                   	push   edx
c000ccd9:	0f b6 d1             	movzx  edx,cl
c000ccdc:	52                   	push   edx
c000ccdd:	53                   	push   ebx
c000ccde:	ff d0                	call   eax
c000cce0:	83 c4 10             	add    esp,0x10
c000cce3:	89 f0                	mov    eax,esi
c000cce5:	83 f0 01             	xor    eax,0x1
c000cce8:	88 83 bd 0f 00 00    	mov    BYTE PTR [ebx+0xfbd],al
c000ccee:	58                   	pop    eax
c000ccef:	5b                   	pop    ebx
c000ccf0:	5e                   	pop    esi
c000ccf1:	c3                   	ret    

c000ccf2 <VgaText::doANSI_SGR(int)>:
c000ccf2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ccf6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ccfa:	85 d2                	test   edx,edx
c000ccfc:	75 14                	jne    c000cd12 <VgaText::doANSI_SGR(int)+0x20>
c000ccfe:	8b 90 c8 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc8]
c000cd04:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000cd0a:	8b 90 c4 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc4]
c000cd10:	eb 65                	jmp    c000cd77 <VgaText::doANSI_SGR(int)+0x85>
c000cd12:	83 fa 07             	cmp    edx,0x7
c000cd15:	75 14                	jne    c000cd2b <VgaText::doANSI_SGR(int)+0x39>
c000cd17:	8b 90 d0 0f 00 00    	mov    edx,DWORD PTR [eax+0xfd0]
c000cd1d:	8b 88 cc 0f 00 00    	mov    ecx,DWORD PTR [eax+0xfcc]
c000cd23:	89 88 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],ecx
c000cd29:	eb 4c                	jmp    c000cd77 <VgaText::doANSI_SGR(int)+0x85>
c000cd2b:	83 fa 1b             	cmp    edx,0x1b
c000cd2e:	74 ce                	je     c000ccfe <VgaText::doANSI_SGR(int)+0xc>
c000cd30:	8d 4a e2             	lea    ecx,[edx-0x1e]
c000cd33:	83 f9 07             	cmp    ecx,0x7
c000cd36:	77 09                	ja     c000cd41 <VgaText::doANSI_SGR(int)+0x4f>
c000cd38:	8b 14 8d e0 37 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdc820]
c000cd3f:	eb 20                	jmp    c000cd61 <VgaText::doANSI_SGR(int)+0x6f>
c000cd41:	8d 4a d8             	lea    ecx,[edx-0x28]
c000cd44:	83 f9 07             	cmp    ecx,0x7
c000cd47:	77 09                	ja     c000cd52 <VgaText::doANSI_SGR(int)+0x60>
c000cd49:	8b 14 8d e0 37 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdc820]
c000cd50:	eb 25                	jmp    c000cd77 <VgaText::doANSI_SGR(int)+0x85>
c000cd52:	8d 4a a6             	lea    ecx,[edx-0x5a]
c000cd55:	83 f9 07             	cmp    ecx,0x7
c000cd58:	77 0e                	ja     c000cd68 <VgaText::doANSI_SGR(int)+0x76>
c000cd5a:	8b 14 95 98 36 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc968]
c000cd61:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000cd67:	c3                   	ret    
c000cd68:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000cd6b:	83 f9 07             	cmp    ecx,0x7
c000cd6e:	77 0d                	ja     c000cd7d <VgaText::doANSI_SGR(int)+0x8b>
c000cd70:	8b 14 95 70 36 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc990]
c000cd77:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c000cd7d:	c3                   	ret    

c000cd7e <VgaText::setDefaultBgColour(VgaColour)>:
c000cd7e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cd82:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cd86:	89 90 c4 0f 00 00    	mov    DWORD PTR [eax+0xfc4],edx
c000cd8c:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c000cd92:	c3                   	ret    
c000cd93:	90                   	nop

c000cd94 <VgaText::setDefaultFgColour(VgaColour)>:
c000cd94:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cd98:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cd9c:	89 90 c8 0f 00 00    	mov    DWORD PTR [eax+0xfc8],edx
c000cda2:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000cda8:	c3                   	ret    
c000cda9:	90                   	nop

c000cdaa <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c000cdaa:	53                   	push   ebx
c000cdab:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000cdaf:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000cdb3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000cdb7:	51                   	push   ecx
c000cdb8:	e8 c1 ff ff ff       	call   c000cd7e <VgaText::setDefaultBgColour(VgaColour)>
c000cdbd:	58                   	pop    eax
c000cdbe:	5a                   	pop    edx
c000cdbf:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000cdc3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000cdc7:	5b                   	pop    ebx
c000cdc8:	eb ca                	jmp    c000cd94 <VgaText::setDefaultFgColour(VgaColour)>

c000cdca <VgaText::combineColours(unsigned char, unsigned char)>:
c000cdca:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000cdce:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000cdd3:	83 e0 0f             	and    eax,0xf
c000cdd6:	c1 e2 04             	shl    edx,0x4
c000cdd9:	09 d0                	or     eax,edx
c000cddb:	c3                   	ret    

c000cddc <VgaText::scrollScreen()>:
c000cddc:	57                   	push   edi
c000cddd:	56                   	push   esi
c000cdde:	be 01 00 00 00       	mov    esi,0x1
c000cde3:	53                   	push   ebx
c000cde4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cde8:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c000cdee:	31 ff                	xor    edi,edi
c000cdf0:	01 d9                	add    ecx,ebx
c000cdf2:	8a 41 0c             	mov    al,BYTE PTR [ecx+0xc]
c000cdf5:	83 fe 17             	cmp    esi,0x17
c000cdf8:	88 81 6c ff ff ff    	mov    BYTE PTR [ecx-0x94],al
c000cdfe:	75 28                	jne    c000ce28 <VgaText::scrollScreen()+0x4c>
c000ce00:	f7 c7 01 00 00 00    	test   edi,0x1
c000ce06:	74 1c                	je     c000ce24 <VgaText::scrollScreen()+0x48>
c000ce08:	0f b6 83 cc 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfcc]
c000ce0f:	50                   	push   eax
c000ce10:	0f b6 83 d0 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfd0]
c000ce17:	50                   	push   eax
c000ce18:	e8 ad ff ff ff       	call   c000cdca <VgaText::combineColours(unsigned char, unsigned char)>
c000ce1d:	5a                   	pop    edx
c000ce1e:	5a                   	pop    edx
c000ce1f:	88 41 0c             	mov    BYTE PTR [ecx+0xc],al
c000ce22:	eb 04                	jmp    c000ce28 <VgaText::scrollScreen()+0x4c>
c000ce24:	c6 41 0c 20          	mov    BYTE PTR [ecx+0xc],0x20
c000ce28:	47                   	inc    edi
c000ce29:	41                   	inc    ecx
c000ce2a:	81 ff a0 00 00 00    	cmp    edi,0xa0
c000ce30:	75 c0                	jne    c000cdf2 <VgaText::scrollScreen()+0x16>
c000ce32:	46                   	inc    esi
c000ce33:	83 fe 18             	cmp    esi,0x18
c000ce36:	75 b0                	jne    c000cde8 <VgaText::scrollScreen()+0xc>
c000ce38:	39 1d 44 44 02 c0    	cmp    DWORD PTR ds:0xc0024444,ebx
c000ce3e:	75 24                	jne    c000ce64 <VgaText::scrollScreen()+0x88>
c000ce40:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c000ce47:	74 08                	je     c000ce51 <VgaText::scrollScreen()+0x75>
c000ce49:	ff 8b f8 0f 00 00    	dec    DWORD PTR [ebx+0xff8]
c000ce4f:	eb 13                	jmp    c000ce64 <VgaText::scrollScreen()+0x88>
c000ce51:	8b 83 08 10 00 00    	mov    eax,DWORD PTR [ebx+0x1008]
c000ce57:	85 c0                	test   eax,eax
c000ce59:	74 09                	je     c000ce64 <VgaText::scrollScreen()+0x88>
c000ce5b:	83 ec 0c             	sub    esp,0xc
c000ce5e:	53                   	push   ebx
c000ce5f:	ff d0                	call   eax
c000ce61:	83 c4 10             	add    esp,0x10
c000ce64:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ce68:	5b                   	pop    ebx
c000ce69:	5e                   	pop    esi
c000ce6a:	5f                   	pop    edi
c000ce6b:	e9 1e fe ff ff       	jmp    c000cc8e <VgaText::updateCursor()>

c000ce70 <VgaText::combineCharAndColour(char, unsigned char)>:
c000ce70:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000ce75:	c1 e0 08             	shl    eax,0x8
c000ce78:	89 c2                	mov    edx,eax
c000ce7a:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000ce7f:	09 d0                	or     eax,edx
c000ce81:	c3                   	ret    

c000ce82 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c000ce82:	53                   	push   ebx
c000ce83:	83 ec 08             	sub    esp,0x8
c000ce86:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ce8a:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000ce8f:	50                   	push   eax
c000ce90:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000ce95:	50                   	push   eax
c000ce96:	e8 2f ff ff ff       	call   c000cdca <VgaText::combineColours(unsigned char, unsigned char)>
c000ce9b:	5a                   	pop    edx
c000ce9c:	0f b6 c0             	movzx  eax,al
c000ce9f:	5b                   	pop    ebx
c000cea0:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c000cea5:	50                   	push   eax
c000cea6:	53                   	push   ebx
c000cea7:	e8 c4 ff ff ff       	call   c000ce70 <VgaText::combineCharAndColour(char, unsigned char)>
c000ceac:	5a                   	pop    edx
c000cead:	5a                   	pop    edx
c000ceae:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c000ceb4:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c000ceb8:	0f b7 d2             	movzx  edx,dx
c000cebb:	66 89 44 51 0c       	mov    WORD PTR [ecx+edx*2+0xc],ax
c000cec0:	39 0d 44 44 02 c0    	cmp    DWORD PTR ds:0xc0024444,ecx
c000cec6:	75 14                	jne    c000cedc <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c000cec8:	8b 81 18 10 00 00    	mov    eax,DWORD PTR [ecx+0x1018]
c000cece:	85 c0                	test   eax,eax
c000ced0:	74 0a                	je     c000cedc <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c000ced2:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000ced6:	83 c4 08             	add    esp,0x8
c000ced9:	5b                   	pop    ebx
c000ceda:	ff e0                	jmp    eax
c000cedc:	83 c4 08             	add    esp,0x8
c000cedf:	5b                   	pop    ebx
c000cee0:	c3                   	ret    
c000cee1:	90                   	nop

c000cee2 <VgaText::getCursorX()>:
c000cee2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cee6:	8b 80 b0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb0]
c000ceec:	c3                   	ret    
c000ceed:	90                   	nop

c000ceee <VgaText::getCursorY()>:
c000ceee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cef2:	8b 80 b4 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb4]
c000cef8:	c3                   	ret    
c000cef9:	90                   	nop

c000cefa <VgaText::setCursor(int, int)>:
c000cefa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cefe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cf02:	89 90 b0 0f 00 00    	mov    DWORD PTR [eax+0xfb0],edx
c000cf08:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cf0c:	89 90 b4 0f 00 00    	mov    DWORD PTR [eax+0xfb4],edx
c000cf12:	e9 77 fd ff ff       	jmp    c000cc8e <VgaText::updateCursor()>
c000cf17:	90                   	nop

c000cf18 <VgaText::setCursorX(int)>:
c000cf18:	83 ec 10             	sub    esp,0x10
c000cf1b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000cf1f:	ff b0 b4 0f 00 00    	push   DWORD PTR [eax+0xfb4]
c000cf25:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf29:	50                   	push   eax
c000cf2a:	e8 cb ff ff ff       	call   c000cefa <VgaText::setCursor(int, int)>
c000cf2f:	83 c4 1c             	add    esp,0x1c
c000cf32:	c3                   	ret    
c000cf33:	90                   	nop

c000cf34 <VgaText::setCursorY(int)>:
c000cf34:	83 ec 10             	sub    esp,0x10
c000cf37:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000cf3b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cf3f:	ff b0 b0 0f 00 00    	push   DWORD PTR [eax+0xfb0]
c000cf45:	50                   	push   eax
c000cf46:	e8 af ff ff ff       	call   c000cefa <VgaText::setCursor(int, int)>
c000cf4b:	83 c4 1c             	add    esp,0x1c
c000cf4e:	c3                   	ret    
c000cf4f:	90                   	nop

c000cf50 <VgaText::incrementCursor(bool)>:
c000cf50:	56                   	push   esi
c000cf51:	53                   	push   ebx
c000cf52:	51                   	push   ecx
c000cf53:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cf57:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000cf5b:	8b 83 b0 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb0]
c000cf61:	40                   	inc    eax
c000cf62:	83 f8 50             	cmp    eax,0x50
c000cf65:	74 08                	je     c000cf6f <VgaText::incrementCursor(bool)+0x1f>
c000cf67:	89 83 b0 0f 00 00    	mov    DWORD PTR [ebx+0xfb0],eax
c000cf6d:	eb 33                	jmp    c000cfa2 <VgaText::incrementCursor(bool)+0x52>
c000cf6f:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c000cf75:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c000cf7f:	8d 50 01             	lea    edx,[eax+0x1]
c000cf82:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c000cf88:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c000cf8e:	75 12                	jne    c000cfa2 <VgaText::incrementCursor(bool)+0x52>
c000cf90:	83 ec 0c             	sub    esp,0xc
c000cf93:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c000cf99:	53                   	push   ebx
c000cf9a:	e8 3d fe ff ff       	call   c000cddc <VgaText::scrollScreen()>
c000cf9f:	83 c4 10             	add    esp,0x10
c000cfa2:	89 f0                	mov    eax,esi
c000cfa4:	84 c0                	test   al,al
c000cfa6:	74 0c                	je     c000cfb4 <VgaText::incrementCursor(bool)+0x64>
c000cfa8:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000cfac:	5a                   	pop    edx
c000cfad:	5b                   	pop    ebx
c000cfae:	5e                   	pop    esi
c000cfaf:	e9 da fc ff ff       	jmp    c000cc8e <VgaText::updateCursor()>
c000cfb4:	58                   	pop    eax
c000cfb5:	5b                   	pop    ebx
c000cfb6:	5e                   	pop    esi
c000cfb7:	c3                   	ret    

c000cfb8 <VgaText::updateRAMUsageDisplay(int)>:
c000cfb8:	53                   	push   ebx
c000cfb9:	bb 0a 00 00 00       	mov    ebx,0xa
c000cfbe:	6a 0f                	push   0xf
c000cfc0:	6a 00                	push   0x0
c000cfc2:	e8 03 fe ff ff       	call   c000cdca <VgaText::combineColours(unsigned char, unsigned char)>
c000cfc7:	5a                   	pop    edx
c000cfc8:	59                   	pop    ecx
c000cfc9:	0f b6 c8             	movzx  ecx,al
c000cfcc:	51                   	push   ecx
c000cfcd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000cfd1:	99                   	cdq    
c000cfd2:	f7 fb                	idiv   ebx
c000cfd4:	89 d3                	mov    ebx,edx
c000cfd6:	83 c0 30             	add    eax,0x30
c000cfd9:	83 c3 30             	add    ebx,0x30
c000cfdc:	0f be c0             	movsx  eax,al
c000cfdf:	0f b6 db             	movzx  ebx,bl
c000cfe2:	50                   	push   eax
c000cfe3:	e8 88 fe ff ff       	call   c000ce70 <VgaText::combineCharAndColour(char, unsigned char)>
c000cfe8:	5a                   	pop    edx
c000cfe9:	5a                   	pop    edx
c000cfea:	66 a3 96 80 0b c2    	mov    ds:0xc20b8096,ax
c000cff0:	51                   	push   ecx
c000cff1:	53                   	push   ebx
c000cff2:	e8 79 fe ff ff       	call   c000ce70 <VgaText::combineCharAndColour(char, unsigned char)>
c000cff7:	5b                   	pop    ebx
c000cff8:	5a                   	pop    edx
c000cff9:	66 a3 98 80 0b c2    	mov    ds:0xc20b8098,ax
c000cfff:	51                   	push   ecx
c000d000:	6a 25                	push   0x25
c000d002:	e8 69 fe ff ff       	call   c000ce70 <VgaText::combineCharAndColour(char, unsigned char)>
c000d007:	59                   	pop    ecx
c000d008:	5b                   	pop    ebx
c000d009:	66 a3 9a 80 0b c2    	mov    ds:0xc20b809a,ax
c000d00f:	5b                   	pop    ebx
c000d010:	c3                   	ret    
c000d011:	90                   	nop

c000d012 <VgaText::updateDiskUsage()>:
c000d012:	55                   	push   ebp
c000d013:	bd 10 27 00 00       	mov    ebp,0x2710
c000d018:	57                   	push   edi
c000d019:	56                   	push   esi
c000d01a:	53                   	push   ebx
c000d01b:	6a 0f                	push   0xf
c000d01d:	6a 00                	push   0x0
c000d01f:	e8 a6 fd ff ff       	call   c000cdca <VgaText::combineColours(unsigned char, unsigned char)>
c000d024:	5a                   	pop    edx
c000d025:	0f b6 d8             	movzx  ebx,al
c000d028:	59                   	pop    ecx
c000d029:	a1 24 61 02 c0       	mov    eax,ds:0xc0026124
c000d02e:	53                   	push   ebx
c000d02f:	b9 0a 00 00 00       	mov    ecx,0xa
c000d034:	99                   	cdq    
c000d035:	f7 fd                	idiv   ebp
c000d037:	99                   	cdq    
c000d038:	f7 f9                	idiv   ecx
c000d03a:	8d 42 30             	lea    eax,[edx+0x30]
c000d03d:	0f b6 c0             	movzx  eax,al
c000d040:	50                   	push   eax
c000d041:	e8 2a fe ff ff       	call   c000ce70 <VgaText::combineCharAndColour(char, unsigned char)>
c000d046:	5e                   	pop    esi
c000d047:	5f                   	pop    edi
c000d048:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c000d04e:	bf e8 03 00 00       	mov    edi,0x3e8
c000d053:	53                   	push   ebx
c000d054:	a1 24 61 02 c0       	mov    eax,ds:0xc0026124
c000d059:	99                   	cdq    
c000d05a:	f7 ff                	idiv   edi
c000d05c:	99                   	cdq    
c000d05d:	f7 f9                	idiv   ecx
c000d05f:	8d 42 30             	lea    eax,[edx+0x30]
c000d062:	0f b6 c0             	movzx  eax,al
c000d065:	50                   	push   eax
c000d066:	e8 05 fe ff ff       	call   c000ce70 <VgaText::combineCharAndColour(char, unsigned char)>
c000d06b:	5a                   	pop    edx
c000d06c:	5e                   	pop    esi
c000d06d:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c000d073:	be 64 00 00 00       	mov    esi,0x64
c000d078:	53                   	push   ebx
c000d079:	a1 24 61 02 c0       	mov    eax,ds:0xc0026124
c000d07e:	99                   	cdq    
c000d07f:	f7 fe                	idiv   esi
c000d081:	99                   	cdq    
c000d082:	f7 f9                	idiv   ecx
c000d084:	8d 42 30             	lea    eax,[edx+0x30]
c000d087:	0f b6 c0             	movzx  eax,al
c000d08a:	50                   	push   eax
c000d08b:	e8 e0 fd ff ff       	call   c000ce70 <VgaText::combineCharAndColour(char, unsigned char)>
c000d090:	5a                   	pop    edx
c000d091:	5a                   	pop    edx
c000d092:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c000d098:	53                   	push   ebx
c000d099:	a1 24 61 02 c0       	mov    eax,ds:0xc0026124
c000d09e:	99                   	cdq    
c000d09f:	f7 f9                	idiv   ecx
c000d0a1:	99                   	cdq    
c000d0a2:	f7 f9                	idiv   ecx
c000d0a4:	8d 42 30             	lea    eax,[edx+0x30]
c000d0a7:	0f b6 c0             	movzx  eax,al
c000d0aa:	50                   	push   eax
c000d0ab:	e8 c0 fd ff ff       	call   c000ce70 <VgaText::combineCharAndColour(char, unsigned char)>
c000d0b0:	5a                   	pop    edx
c000d0b1:	5a                   	pop    edx
c000d0b2:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c000d0b8:	53                   	push   ebx
c000d0b9:	a1 24 61 02 c0       	mov    eax,ds:0xc0026124
c000d0be:	99                   	cdq    
c000d0bf:	f7 f9                	idiv   ecx
c000d0c1:	8d 42 30             	lea    eax,[edx+0x30]
c000d0c4:	0f b6 c0             	movzx  eax,al
c000d0c7:	50                   	push   eax
c000d0c8:	e8 a3 fd ff ff       	call   c000ce70 <VgaText::combineCharAndColour(char, unsigned char)>
c000d0cd:	5a                   	pop    edx
c000d0ce:	5a                   	pop    edx
c000d0cf:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c000d0d5:	53                   	push   ebx
c000d0d6:	a1 20 61 02 c0       	mov    eax,ds:0xc0026120
c000d0db:	99                   	cdq    
c000d0dc:	f7 fd                	idiv   ebp
c000d0de:	99                   	cdq    
c000d0df:	f7 f9                	idiv   ecx
c000d0e1:	8d 42 30             	lea    eax,[edx+0x30]
c000d0e4:	0f b6 c0             	movzx  eax,al
c000d0e7:	50                   	push   eax
c000d0e8:	e8 83 fd ff ff       	call   c000ce70 <VgaText::combineCharAndColour(char, unsigned char)>
c000d0ed:	5d                   	pop    ebp
c000d0ee:	5a                   	pop    edx
c000d0ef:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c000d0f5:	53                   	push   ebx
c000d0f6:	a1 20 61 02 c0       	mov    eax,ds:0xc0026120
c000d0fb:	99                   	cdq    
c000d0fc:	f7 ff                	idiv   edi
c000d0fe:	99                   	cdq    
c000d0ff:	f7 f9                	idiv   ecx
c000d101:	8d 42 30             	lea    eax,[edx+0x30]
c000d104:	0f b6 c0             	movzx  eax,al
c000d107:	50                   	push   eax
c000d108:	e8 63 fd ff ff       	call   c000ce70 <VgaText::combineCharAndColour(char, unsigned char)>
c000d10d:	5f                   	pop    edi
c000d10e:	5d                   	pop    ebp
c000d10f:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c000d115:	53                   	push   ebx
c000d116:	a1 20 61 02 c0       	mov    eax,ds:0xc0026120
c000d11b:	99                   	cdq    
c000d11c:	f7 fe                	idiv   esi
c000d11e:	99                   	cdq    
c000d11f:	f7 f9                	idiv   ecx
c000d121:	8d 42 30             	lea    eax,[edx+0x30]
c000d124:	0f b6 c0             	movzx  eax,al
c000d127:	50                   	push   eax
c000d128:	e8 43 fd ff ff       	call   c000ce70 <VgaText::combineCharAndColour(char, unsigned char)>
c000d12d:	5a                   	pop    edx
c000d12e:	5e                   	pop    esi
c000d12f:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c000d135:	53                   	push   ebx
c000d136:	a1 20 61 02 c0       	mov    eax,ds:0xc0026120
c000d13b:	99                   	cdq    
c000d13c:	f7 f9                	idiv   ecx
c000d13e:	99                   	cdq    
c000d13f:	f7 f9                	idiv   ecx
c000d141:	8d 42 30             	lea    eax,[edx+0x30]
c000d144:	0f b6 c0             	movzx  eax,al
c000d147:	50                   	push   eax
c000d148:	e8 23 fd ff ff       	call   c000ce70 <VgaText::combineCharAndColour(char, unsigned char)>
c000d14d:	5f                   	pop    edi
c000d14e:	5d                   	pop    ebp
c000d14f:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c000d155:	53                   	push   ebx
c000d156:	a1 20 61 02 c0       	mov    eax,ds:0xc0026120
c000d15b:	99                   	cdq    
c000d15c:	f7 f9                	idiv   ecx
c000d15e:	83 c2 30             	add    edx,0x30
c000d161:	0f b6 d2             	movzx  edx,dl
c000d164:	52                   	push   edx
c000d165:	e8 06 fd ff ff       	call   c000ce70 <VgaText::combineCharAndColour(char, unsigned char)>
c000d16a:	5a                   	pop    edx
c000d16b:	59                   	pop    ecx
c000d16c:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c000d172:	5b                   	pop    ebx
c000d173:	5e                   	pop    esi
c000d174:	5f                   	pop    edi
c000d175:	5d                   	pop    ebp
c000d176:	c3                   	ret    
c000d177:	90                   	nop

c000d178 <VgaText::updateTitle()>:
c000d178:	53                   	push   ebx
c000d179:	31 c0                	xor    eax,eax
c000d17b:	83 ec 58             	sub    esp,0x58
c000d17e:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000d182:	89 e1                	mov    ecx,esp
c000d184:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c000d188:	40                   	inc    eax
c000d189:	83 f8 50             	cmp    eax,0x50
c000d18c:	75 f6                	jne    c000d184 <VgaText::updateTitle()+0xc>
c000d18e:	31 c0                	xor    eax,eax
c000d190:	8a 9c 02 1e 10 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x101e]
c000d197:	84 db                	test   bl,bl
c000d199:	74 06                	je     c000d1a1 <VgaText::updateTitle()+0x29>
c000d19b:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c000d19e:	40                   	inc    eax
c000d19f:	eb ef                	jmp    c000d190 <VgaText::updateTitle()+0x18>
c000d1a1:	8b 82 fc 0f 00 00    	mov    eax,DWORD PTR [edx+0xffc]
c000d1a7:	85 c0                	test   eax,eax
c000d1a9:	74 09                	je     c000d1b4 <VgaText::updateTitle()+0x3c>
c000d1ab:	53                   	push   ebx
c000d1ac:	53                   	push   ebx
c000d1ad:	51                   	push   ecx
c000d1ae:	52                   	push   edx
c000d1af:	ff d0                	call   eax
c000d1b1:	83 c4 10             	add    esp,0x10
c000d1b4:	e8 59 fe ff ff       	call   c000d012 <VgaText::updateDiskUsage()>
c000d1b9:	83 c4 58             	add    esp,0x58
c000d1bc:	5b                   	pop    ebx
c000d1bd:	c3                   	ret    

c000d1be <VgaText::setTitleTextColour(VgaColour)>:
c000d1be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d1c2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d1c6:	89 90 d8 0f 00 00    	mov    DWORD PTR [eax+0xfd8],edx
c000d1cc:	eb aa                	jmp    c000d178 <VgaText::updateTitle()>

c000d1ce <VgaText::setTitleColour(VgaColour)>:
c000d1ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d1d2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d1d6:	89 90 d4 0f 00 00    	mov    DWORD PTR [eax+0xfd4],edx
c000d1dc:	eb 9a                	jmp    c000d178 <VgaText::updateTitle()>

c000d1de <VgaText::setTitle(char*)>:
c000d1de:	53                   	push   ebx
c000d1df:	83 ec 10             	sub    esp,0x10
c000d1e2:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d1e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d1ea:	8d 83 1e 10 00 00    	lea    eax,[ebx+0x101e]
c000d1f0:	50                   	push   eax
c000d1f1:	e8 7c 35 ff ff       	call   c0000772 <strcpy>
c000d1f6:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000d1fa:	83 c4 18             	add    esp,0x18
c000d1fd:	5b                   	pop    ebx
c000d1fe:	e9 75 ff ff ff       	jmp    c000d178 <VgaText::updateTitle()>
c000d203:	90                   	nop

c000d204 <VgaText::decrementCursor(bool)>:
c000d204:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d208:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d20c:	8b 82 b0 0f 00 00    	mov    eax,DWORD PTR [edx+0xfb0]
c000d212:	85 c0                	test   eax,eax
c000d214:	74 07                	je     c000d21d <VgaText::decrementCursor(bool)+0x19>
c000d216:	48                   	dec    eax
c000d217:	89 82 b0 0f 00 00    	mov    DWORD PTR [edx+0xfb0],eax
c000d21d:	84 c9                	test   cl,cl
c000d21f:	74 09                	je     c000d22a <VgaText::decrementCursor(bool)+0x26>
c000d221:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000d225:	e9 64 fa ff ff       	jmp    c000cc8e <VgaText::updateCursor()>
c000d22a:	c3                   	ret    
c000d22b:	90                   	nop

c000d22c <VgaText::putchar(char, VgaColour, VgaColour)>:
c000d22c:	53                   	push   ebx
c000d22d:	83 ec 08             	sub    esp,0x8
c000d230:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000d234:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d238:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000d23c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000d240:	3c 07                	cmp    al,0x7
c000d242:	75 2a                	jne    c000d26e <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c000d244:	a1 ec 44 02 c0       	mov    eax,ds:0xc00244ec
c000d249:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000d251:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c000d259:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c000d261:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d265:	83 c4 08             	add    esp,0x8
c000d268:	5b                   	pop    ebx
c000d269:	e9 a4 2c 00 00       	jmp    c000ff12 <Buzzer::beep(int, int, bool)>
c000d26e:	3c 0d                	cmp    al,0xd
c000d270:	75 0c                	jne    c000d27e <VgaText::putchar(char, VgaColour, VgaColour)+0x52>
c000d272:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c000d27c:	eb 3b                	jmp    c000d2b9 <VgaText::putchar(char, VgaColour, VgaColour)+0x8d>
c000d27e:	3c 0a                	cmp    al,0xa
c000d280:	75 40                	jne    c000d2c2 <VgaText::putchar(char, VgaColour, VgaColour)+0x96>
c000d282:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c000d288:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c000d292:	8d 50 01             	lea    edx,[eax+0x1]
c000d295:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c000d29b:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c000d2a1:	75 12                	jne    c000d2b5 <VgaText::putchar(char, VgaColour, VgaColour)+0x89>
c000d2a3:	83 ec 0c             	sub    esp,0xc
c000d2a6:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c000d2ac:	53                   	push   ebx
c000d2ad:	e8 2a fb ff ff       	call   c000cddc <VgaText::scrollScreen()>
c000d2b2:	83 c4 10             	add    esp,0x10
c000d2b5:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000d2b9:	83 c4 08             	add    esp,0x8
c000d2bc:	5b                   	pop    ebx
c000d2bd:	e9 cc f9 ff ff       	jmp    c000cc8e <VgaText::updateCursor()>
c000d2c2:	3c 08                	cmp    al,0x8
c000d2c4:	75 31                	jne    c000d2f7 <VgaText::putchar(char, VgaColour, VgaColour)+0xcb>
c000d2c6:	50                   	push   eax
c000d2c7:	50                   	push   eax
c000d2c8:	6a 01                	push   0x1
c000d2ca:	53                   	push   ebx
c000d2cb:	e8 34 ff ff ff       	call   c000d204 <VgaText::decrementCursor(bool)>
c000d2d0:	5a                   	pop    edx
c000d2d1:	59                   	pop    ecx
c000d2d2:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c000d2d8:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c000d2de:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c000d2e4:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c000d2ea:	6a 20                	push   0x20
c000d2ec:	53                   	push   ebx
c000d2ed:	e8 90 fb ff ff       	call   c000ce82 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000d2f2:	83 c4 28             	add    esp,0x28
c000d2f5:	5b                   	pop    ebx
c000d2f6:	c3                   	ret    
c000d2f7:	83 ec 08             	sub    esp,0x8
c000d2fa:	0f be c0             	movsx  eax,al
c000d2fd:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c000d303:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c000d309:	51                   	push   ecx
c000d30a:	52                   	push   edx
c000d30b:	50                   	push   eax
c000d30c:	53                   	push   ebx
c000d30d:	e8 70 fb ff ff       	call   c000ce82 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000d312:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c000d316:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c000d31e:	83 c4 28             	add    esp,0x28
c000d321:	5b                   	pop    ebx
c000d322:	e9 29 fc ff ff       	jmp    c000cf50 <VgaText::incrementCursor(bool)>
c000d327:	90                   	nop

c000d328 <VgaText::isShowingCursor()>:
c000d328:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d32c:	8a 80 bc 0f 00 00    	mov    al,BYTE PTR [eax+0xfbc]
c000d332:	c3                   	ret    
c000d333:	90                   	nop

c000d334 <VgaText::isBlinkDisabled()>:
c000d334:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d338:	8a 80 bd 0f 00 00    	mov    al,BYTE PTR [eax+0xfbd]
c000d33e:	83 f0 01             	xor    eax,0x1
c000d341:	c3                   	ret    

c000d342 <VgaText::setCursorHeight(int)>:
c000d342:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d346:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d34a:	89 90 b8 0f 00 00    	mov    DWORD PTR [eax+0xfb8],edx
c000d350:	0f b6 80 bc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfbc]
c000d357:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d35b:	e9 48 f9 ff ff       	jmp    c000cca8 <VgaText::showCursor(bool)>

c000d360 <VgaText::getCursorHeight()>:
c000d360:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d364:	8b 80 b8 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb8]
c000d36a:	c3                   	ret    

c000d36b <setActiveTerminal(VgaText*)>:
c000d36b:	53                   	push   ebx
c000d36c:	83 ec 08             	sub    esp,0x8
c000d36f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d373:	85 db                	test   ebx,ebx
c000d375:	75 11                	jne    c000d388 <setActiveTerminal(VgaText*)+0x1d>
c000d377:	c7 44 24 10 00 11 02 c0 	mov    DWORD PTR [esp+0x10],0xc0021100
c000d37f:	83 c4 08             	add    esp,0x8
c000d382:	5b                   	pop    ebx
c000d383:	e9 68 85 00 00       	jmp    c00158f0 <Krnl::panic(char const*)>
c000d388:	50                   	push   eax
c000d389:	50                   	push   eax
c000d38a:	53                   	push   ebx
c000d38b:	68 0e 11 02 c0       	push   0xc002110e
c000d390:	e8 92 1d 00 00       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c000d395:	a1 44 44 02 c0       	mov    eax,ds:0xc0024444
c000d39a:	83 c4 10             	add    esp,0x10
c000d39d:	85 c0                	test   eax,eax
c000d39f:	74 0c                	je     c000d3ad <setActiveTerminal(VgaText*)+0x42>
c000d3a1:	83 ec 0c             	sub    esp,0xc
c000d3a4:	50                   	push   eax
c000d3a5:	e8 e4 f8 ff ff       	call   c000cc8e <VgaText::updateCursor()>
c000d3aa:	83 c4 10             	add    esp,0x10
c000d3ad:	89 1d 44 44 02 c0    	mov    DWORD PTR ds:0xc0024444,ebx
c000d3b3:	51                   	push   ecx
c000d3b4:	51                   	push   ecx
c000d3b5:	53                   	push   ebx
c000d3b6:	68 26 11 02 c0       	push   0xc0021126
c000d3bb:	e8 67 1d 00 00       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c000d3c0:	83 c4 0c             	add    esp,0xc
c000d3c3:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c000d3c9:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c000d3cf:	53                   	push   ebx
c000d3d0:	e8 25 fb ff ff       	call   c000cefa <VgaText::setCursor(int, int)>
c000d3d5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d3d8:	e8 57 ff ff ff       	call   c000d334 <VgaText::isBlinkDisabled()>
c000d3dd:	5a                   	pop    edx
c000d3de:	0f b6 c0             	movzx  eax,al
c000d3e1:	59                   	pop    ecx
c000d3e2:	50                   	push   eax
c000d3e3:	53                   	push   ebx
c000d3e4:	e8 cf f8 ff ff       	call   c000ccb8 <VgaText::disableBlink(bool)>
c000d3e9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d3ec:	e8 6f ff ff ff       	call   c000d360 <VgaText::getCursorHeight()>
c000d3f1:	5a                   	pop    edx
c000d3f2:	59                   	pop    ecx
c000d3f3:	50                   	push   eax
c000d3f4:	53                   	push   ebx
c000d3f5:	e8 48 ff ff ff       	call   c000d342 <VgaText::setCursorHeight(int)>
c000d3fa:	83 c4 10             	add    esp,0x10
c000d3fd:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c000d404:	75 0a                	jne    c000d410 <setActiveTerminal(VgaText*)+0xa5>
c000d406:	c7 83 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff8],0x0
c000d410:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000d414:	83 c4 08             	add    esp,0x8
c000d417:	5b                   	pop    ebx
c000d418:	e9 1d f8 ff ff       	jmp    c000cc3a <VgaText::load()>

c000d41d <doTerminalCycle()>:
c000d41d:	83 ec 18             	sub    esp,0x18
c000d420:	a1 40 44 02 c0       	mov    eax,ds:0xc0024440
c000d425:	8b 80 c0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfc0]
c000d42b:	50                   	push   eax
c000d42c:	a3 40 44 02 c0       	mov    ds:0xc0024440,eax
c000d431:	e8 35 ff ff ff       	call   c000d36b <setActiveTerminal(VgaText*)>
c000d436:	83 c4 1c             	add    esp,0x1c
c000d439:	c3                   	ret    

c000d43a <VgaText::doUpdate()>:
c000d43a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d43e:	8b 80 04 10 00 00    	mov    eax,DWORD PTR [eax+0x1004]
c000d444:	85 c0                	test   eax,eax
c000d446:	74 02                	je     c000d44a <VgaText::doUpdate()+0x10>
c000d448:	ff e0                	jmp    eax
c000d44a:	c3                   	ret    
c000d44b:	90                   	nop

c000d44c <VgaText::puts(char const*, VgaColour, VgaColour)>:
c000d44c:	55                   	push   ebp
c000d44d:	57                   	push   edi
c000d44e:	56                   	push   esi
c000d44f:	53                   	push   ebx
c000d450:	83 ec 1c             	sub    esp,0x1c
c000d453:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000d457:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000d45c:	c6 85 1d 10 00 00 01 	mov    BYTE PTR [ebp+0x101d],0x1
c000d463:	8d 7d 0c             	lea    edi,[ebp+0xc]
c000d466:	50                   	push   eax
c000d467:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000d46c:	50                   	push   eax
c000d46d:	e8 58 f9 ff ff       	call   c000cdca <VgaText::combineColours(unsigned char, unsigned char)>
c000d472:	59                   	pop    ecx
c000d473:	0f b6 c0             	movzx  eax,al
c000d476:	5b                   	pop    ebx
c000d477:	31 c9                	xor    ecx,ecx
c000d479:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c000d481:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000d485:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c000d48b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d48f:	0f b7 db             	movzx  ebx,bx
c000d492:	01 db                	add    ebx,ebx
c000d494:	01 fb                	add    ebx,edi
c000d496:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000d499:	84 c0                	test   al,al
c000d49b:	0f 84 38 01 00 00    	je     c000d5d9 <VgaText::puts(char const*, VgaColour, VgaColour)+0x18d>
c000d4a1:	3c 0d                	cmp    al,0xd
c000d4a3:	75 0f                	jne    c000d4b4 <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c000d4a5:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c000d4af:	e9 1f 01 00 00       	jmp    c000d5d3 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c000d4b4:	3c 0a                	cmp    al,0xa
c000d4b6:	75 5b                	jne    c000d513 <VgaText::puts(char const*, VgaColour, VgaColour)+0xc7>
c000d4b8:	8b 85 b4 0f 00 00    	mov    eax,DWORD PTR [ebp+0xfb4]
c000d4be:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c000d4c8:	8d 48 01             	lea    ecx,[eax+0x1]
c000d4cb:	89 8d b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],ecx
c000d4d1:	3b 8d ac 0f 00 00    	cmp    ecx,DWORD PTR [ebp+0xfac]
c000d4d7:	75 12                	jne    c000d4eb <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c000d4d9:	83 ec 0c             	sub    esp,0xc
c000d4dc:	89 85 b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],eax
c000d4e2:	55                   	push   ebp
c000d4e3:	e8 f4 f8 ff ff       	call   c000cddc <VgaText::scrollScreen()>
c000d4e8:	83 c4 10             	add    esp,0x10
c000d4eb:	83 ec 0c             	sub    esp,0xc
c000d4ee:	55                   	push   ebp
c000d4ef:	e8 9a f7 ff ff       	call   c000cc8e <VgaText::updateCursor()>
c000d4f4:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c000d4fc:	83 c4 10             	add    esp,0x10
c000d4ff:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c000d505:	31 c9                	xor    ecx,ecx
c000d507:	0f b7 db             	movzx  ebx,bx
c000d50a:	01 db                	add    ebx,ebx
c000d50c:	01 fb                	add    ebx,edi
c000d50e:	e9 c0 00 00 00       	jmp    c000d5d3 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c000d513:	3c 08                	cmp    al,0x8
c000d515:	75 4e                	jne    c000d565 <VgaText::puts(char const*, VgaColour, VgaColour)+0x119>
c000d517:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000d51b:	53                   	push   ebx
c000d51c:	53                   	push   ebx
c000d51d:	6a 01                	push   0x1
c000d51f:	55                   	push   ebp
c000d520:	e8 df fc ff ff       	call   c000d204 <VgaText::decrementCursor(bool)>
c000d525:	58                   	pop    eax
c000d526:	5a                   	pop    edx
c000d527:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c000d52d:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c000d533:	ff b5 cc 0f 00 00    	push   DWORD PTR [ebp+0xfcc]
c000d539:	ff b5 d0 0f 00 00    	push   DWORD PTR [ebp+0xfd0]
c000d53f:	6a 20                	push   0x20
c000d541:	55                   	push   ebp
c000d542:	e8 3b f9 ff ff       	call   c000ce82 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000d547:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c000d54f:	83 c4 20             	add    esp,0x20
c000d552:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c000d558:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000d55c:	0f b7 db             	movzx  ebx,bx
c000d55f:	01 db                	add    ebx,ebx
c000d561:	01 fb                	add    ebx,edi
c000d563:	eb 6e                	jmp    c000d5d3 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c000d565:	51                   	push   ecx
c000d566:	51                   	push   ecx
c000d567:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000d56b:	50                   	push   eax
c000d56c:	e8 ff f8 ff ff       	call   c000ce70 <VgaText::combineCharAndColour(char, unsigned char)>
c000d571:	83 c4 10             	add    esp,0x10
c000d574:	66 89 03             	mov    WORD PTR [ebx],ax
c000d577:	39 2d 44 44 02 c0    	cmp    DWORD PTR ds:0xc0024444,ebp
c000d57d:	75 2a                	jne    c000d5a9 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c000d57f:	8b 85 18 10 00 00    	mov    eax,DWORD PTR [ebp+0x1018]
c000d585:	85 c0                	test   eax,eax
c000d587:	74 20                	je     c000d5a9 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c000d589:	52                   	push   edx
c000d58a:	52                   	push   edx
c000d58b:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c000d591:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c000d597:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d59b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d59f:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c000d5a2:	51                   	push   ecx
c000d5a3:	55                   	push   ebp
c000d5a4:	ff d0                	call   eax
c000d5a6:	83 c4 20             	add    esp,0x20
c000d5a9:	83 c3 02             	add    ebx,0x2
c000d5ac:	50                   	push   eax
c000d5ad:	50                   	push   eax
c000d5ae:	6a 00                	push   0x0
c000d5b0:	55                   	push   ebp
c000d5b1:	e8 9a f9 ff ff       	call   c000cf50 <VgaText::incrementCursor(bool)>
c000d5b6:	83 c4 10             	add    esp,0x10
c000d5b9:	83 bd b0 0f 00 00 00 	cmp    DWORD PTR [ebp+0xfb0],0x0
c000d5c0:	75 0f                	jne    c000d5d1 <VgaText::puts(char const*, VgaColour, VgaColour)+0x185>
c000d5c2:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c000d5ca:	0f b7 db             	movzx  ebx,bx
c000d5cd:	01 db                	add    ebx,ebx
c000d5cf:	01 fb                	add    ebx,edi
c000d5d1:	b1 01                	mov    cl,0x1
c000d5d3:	46                   	inc    esi
c000d5d4:	e9 bd fe ff ff       	jmp    c000d496 <VgaText::puts(char const*, VgaColour, VgaColour)+0x4a>
c000d5d9:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c000d5dd:	83 ec 0c             	sub    esp,0xc
c000d5e0:	55                   	push   ebp
c000d5e1:	e8 a8 f6 ff ff       	call   c000cc8e <VgaText::updateCursor()>
c000d5e6:	83 c4 10             	add    esp,0x10
c000d5e9:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000d5ed:	84 c9                	test   cl,cl
c000d5ef:	74 0c                	je     c000d5fd <VgaText::puts(char const*, VgaColour, VgaColour)+0x1b1>
c000d5f1:	83 ec 0c             	sub    esp,0xc
c000d5f4:	55                   	push   ebp
c000d5f5:	e8 40 fe ff ff       	call   c000d43a <VgaText::doUpdate()>
c000d5fa:	83 c4 10             	add    esp,0x10
c000d5fd:	c6 85 1d 10 00 00 00 	mov    BYTE PTR [ebp+0x101d],0x0
c000d604:	83 c4 1c             	add    esp,0x1c
c000d607:	5b                   	pop    ebx
c000d608:	5e                   	pop    esi
c000d609:	5f                   	pop    edi
c000d60a:	5d                   	pop    ebp
c000d60b:	c3                   	ret    

c000d60c <VgaText::clearScreen()>:
c000d60c:	57                   	push   edi
c000d60d:	56                   	push   esi
c000d60e:	31 f6                	xor    esi,esi
c000d610:	53                   	push   ebx
c000d611:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d615:	52                   	push   edx
c000d616:	6a 00                	push   0x0
c000d618:	6a 00                	push   0x0
c000d61a:	53                   	push   ebx
c000d61b:	e8 da f8 ff ff       	call   c000cefa <VgaText::setCursor(int, int)>
c000d620:	c6 83 1d 10 00 00 01 	mov    BYTE PTR [ebx+0x101d],0x1
c000d627:	83 c4 10             	add    esp,0x10
c000d62a:	39 b3 ac 0f 00 00    	cmp    DWORD PTR [ebx+0xfac],esi
c000d630:	7e 26                	jle    c000d658 <VgaText::clearScreen()+0x4c>
c000d632:	31 ff                	xor    edi,edi
c000d634:	50                   	push   eax
c000d635:	50                   	push   eax
c000d636:	56                   	push   esi
c000d637:	57                   	push   edi
c000d638:	47                   	inc    edi
c000d639:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c000d63f:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c000d645:	6a 20                	push   0x20
c000d647:	53                   	push   ebx
c000d648:	e8 35 f8 ff ff       	call   c000ce82 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000d64d:	83 c4 20             	add    esp,0x20
c000d650:	83 ff 50             	cmp    edi,0x50
c000d653:	75 df                	jne    c000d634 <VgaText::clearScreen()+0x28>
c000d655:	46                   	inc    esi
c000d656:	eb d2                	jmp    c000d62a <VgaText::clearScreen()+0x1e>
c000d658:	83 ec 0c             	sub    esp,0xc
c000d65b:	53                   	push   ebx
c000d65c:	e8 d9 fd ff ff       	call   c000d43a <VgaText::doUpdate()>
c000d661:	c6 83 1d 10 00 00 00 	mov    BYTE PTR [ebx+0x101d],0x0
c000d668:	83 c4 10             	add    esp,0x10
c000d66b:	5b                   	pop    ebx
c000d66c:	5e                   	pop    esi
c000d66d:	5f                   	pop    edi
c000d66e:	c3                   	ret    
c000d66f:	90                   	nop

c000d670 <VgaText::putchar(char)>:
c000d670:	56                   	push   esi
c000d671:	53                   	push   ebx
c000d672:	83 ec 14             	sub    esp,0x14
c000d675:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d679:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000d67d:	3c 5b                	cmp    al,0x5b
c000d67f:	75 21                	jne    c000d6a2 <VgaText::putchar(char)+0x32>
c000d681:	80 bb dc 0f 00 00 00 	cmp    BYTE PTR [ebx+0xfdc],0x0
c000d688:	74 28                	je     c000d6b2 <VgaText::putchar(char)+0x42>
c000d68a:	66 c7 83 dc 0f 00 00 00 01 	mov    WORD PTR [ebx+0xfdc],0x100
c000d693:	c7 83 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff0],0x0
c000d69d:	e9 e2 00 00 00       	jmp    c000d784 <VgaText::putchar(char)+0x114>
c000d6a2:	3c 1b                	cmp    al,0x1b
c000d6a4:	75 0c                	jne    c000d6b2 <VgaText::putchar(char)+0x42>
c000d6a6:	c6 83 dc 0f 00 00 01 	mov    BYTE PTR [ebx+0xfdc],0x1
c000d6ad:	e9 d2 00 00 00       	jmp    c000d784 <VgaText::putchar(char)+0x114>
c000d6b2:	8a 8b dd 0f 00 00    	mov    cl,BYTE PTR [ebx+0xfdd]
c000d6b8:	84 c9                	test   cl,cl
c000d6ba:	0f 84 ab 00 00 00    	je     c000d76b <VgaText::putchar(char)+0xfb>
c000d6c0:	8d 50 c0             	lea    edx,[eax-0x40]
c000d6c3:	80 fa 3e             	cmp    dl,0x3e
c000d6c6:	0f 87 82 00 00 00    	ja     c000d74e <VgaText::putchar(char)+0xde>
c000d6cc:	3c 6d                	cmp    al,0x6d
c000d6ce:	75 4d                	jne    c000d71d <VgaText::putchar(char)+0xad>
c000d6d0:	31 f6                	xor    esi,esi
c000d6d2:	31 d2                	xor    edx,edx
c000d6d4:	31 c0                	xor    eax,eax
c000d6d6:	39 b3 f0 0f 00 00    	cmp    DWORD PTR [ebx+0xff0],esi
c000d6dc:	7e 30                	jle    c000d70e <VgaText::putchar(char)+0x9e>
c000d6de:	0f be 94 33 de 0f 00 00 	movsx  edx,BYTE PTR [ebx+esi*1+0xfde]
c000d6e6:	80 fa 3b             	cmp    dl,0x3b
c000d6e9:	75 17                	jne    c000d702 <VgaText::putchar(char)+0x92>
c000d6eb:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000d6ef:	50                   	push   eax
c000d6f0:	53                   	push   ebx
c000d6f1:	e8 fc f5 ff ff       	call   c000ccf2 <VgaText::doANSI_SGR(int)>
c000d6f6:	59                   	pop    ecx
c000d6f7:	31 d2                	xor    edx,edx
c000d6f9:	58                   	pop    eax
c000d6fa:	31 c0                	xor    eax,eax
c000d6fc:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000d700:	eb 09                	jmp    c000d70b <VgaText::putchar(char)+0x9b>
c000d702:	6b c0 0a             	imul   eax,eax,0xa
c000d705:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c000d709:	88 ca                	mov    dl,cl
c000d70b:	46                   	inc    esi
c000d70c:	eb c8                	jmp    c000d6d6 <VgaText::putchar(char)+0x66>
c000d70e:	84 d2                	test   dl,dl
c000d710:	74 31                	je     c000d743 <VgaText::putchar(char)+0xd3>
c000d712:	50                   	push   eax
c000d713:	53                   	push   ebx
c000d714:	e8 d9 f5 ff ff       	call   c000ccf2 <VgaText::doANSI_SGR(int)>
c000d719:	58                   	pop    eax
c000d71a:	5a                   	pop    edx
c000d71b:	eb 26                	jmp    c000d743 <VgaText::putchar(char)+0xd3>
c000d71d:	3c 4a                	cmp    al,0x4a
c000d71f:	75 22                	jne    c000d743 <VgaText::putchar(char)+0xd3>
c000d721:	80 bb de 0f 00 00 32 	cmp    BYTE PTR [ebx+0xfde],0x32
c000d728:	75 19                	jne    c000d743 <VgaText::putchar(char)+0xd3>
c000d72a:	83 ec 0c             	sub    esp,0xc
c000d72d:	53                   	push   ebx
c000d72e:	e8 d9 fe ff ff       	call   c000d60c <VgaText::clearScreen()>
c000d733:	83 c4 0c             	add    esp,0xc
c000d736:	6a 00                	push   0x0
c000d738:	6a 00                	push   0x0
c000d73a:	53                   	push   ebx
c000d73b:	e8 ba f7 ff ff       	call   c000cefa <VgaText::setCursor(int, int)>
c000d740:	83 c4 10             	add    esp,0x10
c000d743:	66 c7 83 dc 0f 00 00 00 00 	mov    WORD PTR [ebx+0xfdc],0x0
c000d74c:	eb 36                	jmp    c000d784 <VgaText::putchar(char)+0x114>
c000d74e:	8b 93 f0 0f 00 00    	mov    edx,DWORD PTR [ebx+0xff0]
c000d754:	83 fa 0e             	cmp    edx,0xe
c000d757:	7f 2b                	jg     c000d784 <VgaText::putchar(char)+0x114>
c000d759:	8d 4a 01             	lea    ecx,[edx+0x1]
c000d75c:	89 8b f0 0f 00 00    	mov    DWORD PTR [ebx+0xff0],ecx
c000d762:	88 84 13 de 0f 00 00 	mov    BYTE PTR [ebx+edx*1+0xfde],al
c000d769:	eb 19                	jmp    c000d784 <VgaText::putchar(char)+0x114>
c000d76b:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c000d771:	0f be c0             	movsx  eax,al
c000d774:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c000d77a:	50                   	push   eax
c000d77b:	53                   	push   ebx
c000d77c:	e8 ab fa ff ff       	call   c000d22c <VgaText::putchar(char, VgaColour, VgaColour)>
c000d781:	83 c4 10             	add    esp,0x10
c000d784:	83 c4 14             	add    esp,0x14
c000d787:	5b                   	pop    ebx
c000d788:	5e                   	pop    esi
c000d789:	c3                   	ret    

c000d78a <VgaText::puts(char const*)>:
c000d78a:	53                   	push   ebx
c000d78b:	83 ec 08             	sub    esp,0x8
c000d78e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d792:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000d795:	84 c0                	test   al,al
c000d797:	74 12                	je     c000d7ab <VgaText::puts(char const*)+0x21>
c000d799:	43                   	inc    ebx
c000d79a:	51                   	push   ecx
c000d79b:	51                   	push   ecx
c000d79c:	50                   	push   eax
c000d79d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7a1:	e8 ca fe ff ff       	call   c000d670 <VgaText::putchar(char)>
c000d7a6:	83 c4 10             	add    esp,0x10
c000d7a9:	eb e7                	jmp    c000d792 <VgaText::puts(char const*)+0x8>
c000d7ab:	83 c4 08             	add    esp,0x8
c000d7ae:	5b                   	pop    ebx
c000d7af:	c3                   	ret    

c000d7b0 <VgaText::putx(unsigned int)>:
c000d7b0:	57                   	push   edi
c000d7b1:	b9 11 00 00 00       	mov    ecx,0x11
c000d7b6:	56                   	push   esi
c000d7b7:	be 42 11 02 c0       	mov    esi,0xc0021142
c000d7bc:	53                   	push   ebx
c000d7bd:	83 ec 20             	sub    esp,0x20
c000d7c0:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000d7c4:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c000d7c8:	fc                   	cld    
c000d7c9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d7cb:	be 08 00 00 00       	mov    esi,0x8
c000d7d0:	50                   	push   eax
c000d7d1:	50                   	push   eax
c000d7d2:	89 d8                	mov    eax,ebx
c000d7d4:	c1 e3 04             	shl    ebx,0x4
c000d7d7:	c1 e8 1c             	shr    eax,0x1c
c000d7da:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c000d7df:	50                   	push   eax
c000d7e0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d7e4:	e8 87 fe ff ff       	call   c000d670 <VgaText::putchar(char)>
c000d7e9:	83 c4 10             	add    esp,0x10
c000d7ec:	4e                   	dec    esi
c000d7ed:	75 e1                	jne    c000d7d0 <VgaText::putx(unsigned int)+0x20>
c000d7ef:	83 c4 20             	add    esp,0x20
c000d7f2:	5b                   	pop    ebx
c000d7f3:	5e                   	pop    esi
c000d7f4:	5f                   	pop    edi
c000d7f5:	c3                   	ret    

c000d7f6 <VgaText::VgaText(char const*)>:
c000d7f6:	57                   	push   edi
c000d7f7:	56                   	push   esi
c000d7f8:	53                   	push   ebx
c000d7f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7fd:	83 ec 08             	sub    esp,0x8
c000d800:	6a 00                	push   0x0
c000d802:	50                   	push   eax
c000d803:	e8 4a 05 00 00       	call   c000dd52 <UnixFile::UnixFile(int)>
c000d808:	83 c4 10             	add    esp,0x10
c000d80b:	ba a8 11 02 c0       	mov    edx,0xc00211a8
c000d810:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d814:	89 10                	mov    DWORD PTR [eax],edx
c000d816:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d81a:	c7 80 d4 0f 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xfd4],0x1
c000d824:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d828:	c7 80 d8 0f 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0xfd8],0xf
c000d832:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d836:	c6 80 dc 0f 00 00 00 	mov    BYTE PTR [eax+0xfdc],0x0
c000d83d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d841:	c6 80 dd 0f 00 00 00 	mov    BYTE PTR [eax+0xfdd],0x0
c000d848:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d84c:	c7 80 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff0],0x0
c000d856:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d85a:	c7 80 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff8],0x0
c000d864:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d868:	c6 80 1c 10 00 00 00 	mov    BYTE PTR [eax+0x101c],0x0
c000d86f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d873:	c6 80 1d 10 00 00 00 	mov    BYTE PTR [eax+0x101d],0x0
c000d87a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d87e:	8d 90 fc 0f 00 00    	lea    edx,[eax+0xffc]
c000d884:	bb 20 44 02 c0       	mov    ebx,0xc0024420
c000d889:	b8 08 00 00 00       	mov    eax,0x8
c000d88e:	fc                   	cld    
c000d88f:	89 d7                	mov    edi,edx
c000d891:	89 de                	mov    esi,ebx
c000d893:	89 c1                	mov    ecx,eax
c000d895:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000d897:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d89b:	05 1e 10 00 00       	add    eax,0x101e
c000d8a0:	83 ec 08             	sub    esp,0x8
c000d8a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d8a7:	50                   	push   eax
c000d8a8:	e8 c5 2e ff ff       	call   c0000772 <strcpy>
c000d8ad:	83 c4 10             	add    esp,0x10
c000d8b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8b4:	c7 80 ac 0f 00 00 18 00 00 00 	mov    DWORD PTR [eax+0xfac],0x18
c000d8be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8c2:	83 c0 0c             	add    eax,0xc
c000d8c5:	83 ec 04             	sub    esp,0x4
c000d8c8:	68 00 0f 00 00       	push   0xf00
c000d8cd:	6a 00                	push   0x0
c000d8cf:	50                   	push   eax
c000d8d0:	e8 fe 2d ff ff       	call   c00006d3 <memset>
c000d8d5:	83 c4 10             	add    esp,0x10
c000d8d8:	83 ec 04             	sub    esp,0x4
c000d8db:	6a 00                	push   0x0
c000d8dd:	6a 07                	push   0x7
c000d8df:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d8e3:	e8 c2 f4 ff ff       	call   c000cdaa <VgaText::setDefaultColours(VgaColour, VgaColour)>
c000d8e8:	83 c4 10             	add    esp,0x10
c000d8eb:	83 ec 08             	sub    esp,0x8
c000d8ee:	6a 02                	push   0x2
c000d8f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d8f4:	e8 49 fa ff ff       	call   c000d342 <VgaText::setCursorHeight(int)>
c000d8f9:	83 c4 10             	add    esp,0x10
c000d8fc:	83 ec 04             	sub    esp,0x4
c000d8ff:	6a 00                	push   0x0
c000d901:	6a 00                	push   0x0
c000d903:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d907:	e8 ee f5 ff ff       	call   c000cefa <VgaText::setCursor(int, int)>
c000d90c:	83 c4 10             	add    esp,0x10
c000d90f:	83 ec 08             	sub    esp,0x8
c000d912:	6a 01                	push   0x1
c000d914:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d918:	e8 8b f3 ff ff       	call   c000cca8 <VgaText::showCursor(bool)>
c000d91d:	83 c4 10             	add    esp,0x10
c000d920:	83 ec 08             	sub    esp,0x8
c000d923:	6a 01                	push   0x1
c000d925:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d929:	e8 8a f3 ff ff       	call   c000ccb8 <VgaText::disableBlink(bool)>
c000d92e:	83 c4 10             	add    esp,0x10
c000d931:	83 ec 0c             	sub    esp,0xc
c000d934:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d938:	e8 cf fc ff ff       	call   c000d60c <VgaText::clearScreen()>
c000d93d:	83 c4 10             	add    esp,0x10
c000d940:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d944:	c6 80 f4 0f 00 00 00 	mov    BYTE PTR [eax+0xff4],0x0
c000d94b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d94f:	05 9e 10 00 00       	add    eax,0x109e
c000d954:	83 ec 04             	sub    esp,0x4
c000d957:	68 96 00 00 00       	push   0x96
c000d95c:	6a 00                	push   0x0
c000d95e:	50                   	push   eax
c000d95f:	e8 6f 2d ff ff       	call   c00006d3 <memset>
c000d964:	83 c4 10             	add    esp,0x10
c000d967:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d96b:	05 34 11 00 00       	add    eax,0x1134
c000d970:	83 ec 04             	sub    esp,0x4
c000d973:	68 2c 01 00 00       	push   0x12c
c000d978:	6a 00                	push   0x0
c000d97a:	50                   	push   eax
c000d97b:	e8 53 2d ff ff       	call   c00006d3 <memset>
c000d980:	83 c4 10             	add    esp,0x10
c000d983:	90                   	nop
c000d984:	5b                   	pop    ebx
c000d985:	5e                   	pop    esi
c000d986:	5f                   	pop    edi
c000d987:	c3                   	ret    

c000d988 <VgaText::receiveKey(unsigned char)>:
c000d988:	55                   	push   ebp
c000d989:	57                   	push   edi
c000d98a:	56                   	push   esi
c000d98b:	53                   	push   ebx
c000d98c:	83 ec 1c             	sub    esp,0x1c
c000d98f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000d993:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d997:	84 db                	test   bl,bl
c000d999:	0f 84 c9 00 00 00    	je     c000da68 <VgaText::receiveKey(unsigned char)+0xe0>
c000d99f:	8d be 9e 10 00 00    	lea    edi,[esi+0x109e]
c000d9a5:	80 fb 08             	cmp    bl,0x8
c000d9a8:	75 2c                	jne    c000d9d6 <VgaText::receiveKey(unsigned char)+0x4e>
c000d9aa:	83 ec 0c             	sub    esp,0xc
c000d9ad:	57                   	push   edi
c000d9ae:	e8 3d 2d ff ff       	call   c00006f0 <strlen>
c000d9b3:	83 c4 10             	add    esp,0x10
c000d9b6:	85 c0                	test   eax,eax
c000d9b8:	74 41                	je     c000d9fb <VgaText::receiveKey(unsigned char)+0x73>
c000d9ba:	50                   	push   eax
c000d9bb:	50                   	push   eax
c000d9bc:	6a 08                	push   0x8
c000d9be:	56                   	push   esi
c000d9bf:	e8 ac fc ff ff       	call   c000d670 <VgaText::putchar(char)>
c000d9c4:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d9c7:	e8 24 2d ff ff       	call   c00006f0 <strlen>
c000d9cc:	c6 84 06 9d 10 00 00 00 	mov    BYTE PTR [esi+eax*1+0x109d],0x0
c000d9d4:	eb 22                	jmp    c000d9f8 <VgaText::receiveKey(unsigned char)+0x70>
c000d9d6:	0f be c3             	movsx  eax,bl
c000d9d9:	52                   	push   edx
c000d9da:	52                   	push   edx
c000d9db:	50                   	push   eax
c000d9dc:	56                   	push   esi
c000d9dd:	e8 8e fc ff ff       	call   c000d670 <VgaText::putchar(char)>
c000d9e2:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c000d9e6:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000d9eb:	59                   	pop    ecx
c000d9ec:	5d                   	pop    ebp
c000d9ed:	8d 44 24 16          	lea    eax,[esp+0x16]
c000d9f1:	50                   	push   eax
c000d9f2:	57                   	push   edi
c000d9f3:	e8 31 2e ff ff       	call   c0000829 <strcat>
c000d9f8:	83 c4 10             	add    esp,0x10
c000d9fb:	80 be 1c 10 00 00 00 	cmp    BYTE PTR [esi+0x101c],0x0
c000da02:	75 05                	jne    c000da09 <VgaText::receiveKey(unsigned char)+0x81>
c000da04:	80 fb 0a             	cmp    bl,0xa
c000da07:	75 53                	jne    c000da5c <VgaText::receiveKey(unsigned char)+0xd4>
c000da09:	83 ec 0c             	sub    esp,0xc
c000da0c:	8d 9e 34 11 00 00    	lea    ebx,[esi+0x1134]
c000da12:	53                   	push   ebx
c000da13:	e8 d8 2c ff ff       	call   c00006f0 <strlen>
c000da18:	89 3c 24             	mov    DWORD PTR [esp],edi
c000da1b:	89 c5                	mov    ebp,eax
c000da1d:	e8 ce 2c ff ff       	call   c00006f0 <strlen>
c000da22:	83 c4 10             	add    esp,0x10
c000da25:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c000da29:	3d 2c 01 00 00       	cmp    eax,0x12c
c000da2e:	76 10                	jbe    c000da40 <VgaText::receiveKey(unsigned char)+0xb8>
c000da30:	83 ec 0c             	sub    esp,0xc
c000da33:	68 53 11 02 c0       	push   0xc0021153
c000da38:	e8 b3 7e 00 00       	call   c00158f0 <Krnl::panic(char const*)>
c000da3d:	83 c4 10             	add    esp,0x10
c000da40:	50                   	push   eax
c000da41:	50                   	push   eax
c000da42:	57                   	push   edi
c000da43:	53                   	push   ebx
c000da44:	e8 e0 2d ff ff       	call   c0000829 <strcat>
c000da49:	83 c4 0c             	add    esp,0xc
c000da4c:	68 96 00 00 00       	push   0x96
c000da51:	6a 00                	push   0x0
c000da53:	57                   	push   edi
c000da54:	e8 7a 2c ff ff       	call   c00006d3 <memset>
c000da59:	83 c4 10             	add    esp,0x10
c000da5c:	83 ec 0c             	sub    esp,0xc
c000da5f:	56                   	push   esi
c000da60:	e8 d5 f9 ff ff       	call   c000d43a <VgaText::doUpdate()>
c000da65:	83 c4 10             	add    esp,0x10
c000da68:	83 c4 1c             	add    esp,0x1c
c000da6b:	5b                   	pop    ebx
c000da6c:	5e                   	pop    esi
c000da6d:	5f                   	pop    edi
c000da6e:	5d                   	pop    ebp
c000da6f:	c3                   	ret    

c000da70 <VgaText::write(unsigned long long, void*, int*)>:
c000da70:	55                   	push   ebp
c000da71:	57                   	push   edi
c000da72:	56                   	push   esi
c000da73:	53                   	push   ebx
c000da74:	83 ec 0c             	sub    esp,0xc
c000da77:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000da7b:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000da7f:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000da83:	c6 86 1d 10 00 00 01 	mov    BYTE PTR [esi+0x101d],0x1
c000da8a:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c000da8d:	39 eb                	cmp    ebx,ebp
c000da8f:	74 13                	je     c000daa4 <VgaText::write(unsigned long long, void*, int*)+0x34>
c000da91:	43                   	inc    ebx
c000da92:	50                   	push   eax
c000da93:	50                   	push   eax
c000da94:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c000da98:	50                   	push   eax
c000da99:	56                   	push   esi
c000da9a:	e8 d1 fb ff ff       	call   c000d670 <VgaText::putchar(char)>
c000da9f:	83 c4 10             	add    esp,0x10
c000daa2:	eb e9                	jmp    c000da8d <VgaText::write(unsigned long long, void*, int*)+0x1d>
c000daa4:	83 ec 0c             	sub    esp,0xc
c000daa7:	c6 86 1d 10 00 00 00 	mov    BYTE PTR [esi+0x101d],0x0
c000daae:	56                   	push   esi
c000daaf:	e8 86 f9 ff ff       	call   c000d43a <VgaText::doUpdate()>
c000dab4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000dab8:	89 38                	mov    DWORD PTR [eax],edi
c000daba:	83 c4 1c             	add    esp,0x1c
c000dabd:	31 c0                	xor    eax,eax
c000dabf:	5b                   	pop    ebx
c000dac0:	5e                   	pop    esi
c000dac1:	5f                   	pop    edi
c000dac2:	5d                   	pop    ebp
c000dac3:	c3                   	ret    

c000dac4 <newTerminal(char*)>:
c000dac4:	83 ec 28             	sub    esp,0x28
c000dac7:	68 60 12 00 00       	push   0x1260
c000dacc:	e8 67 15 00 00       	call   c000f038 <operator new(unsigned long)>
c000dad1:	5a                   	pop    edx
c000dad2:	59                   	pop    ecx
c000dad3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000dad7:	50                   	push   eax
c000dad8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000dadc:	e8 15 fd ff ff       	call   c000d7f6 <VgaText::VgaText(char const*)>
c000dae1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000dae5:	83 c4 2c             	add    esp,0x2c
c000dae8:	c3                   	ret    
c000dae9:	90                   	nop

c000daea <TSS::TSS()>:
c000daea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000daee:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000daf5:	90                   	nop
c000daf6:	c3                   	ret    
c000daf7:	90                   	nop

c000daf8 <TSS::setESP(unsigned long)>:
c000daf8:	55                   	push   ebp
c000daf9:	89 e5                	mov    ebp,esp
c000dafb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dafe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db01:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000db04:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000db07:	90                   	nop
c000db08:	5d                   	pop    ebp
c000db09:	c3                   	ret    

c000db0a <TSS::flush()>:
c000db0a:	55                   	push   ebp
c000db0b:	89 e5                	mov    ebp,esp
c000db0d:	83 ec 10             	sub    esp,0x10
c000db10:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db13:	8b 00                	mov    eax,DWORD PTR [eax]
c000db15:	83 c8 03             	or     eax,0x3
c000db18:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c000db1c:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c000db20:	66 89 d0             	mov    ax,dx
c000db23:	0f 00 d8             	ltr    ax
c000db26:	90                   	nop
c000db27:	c9                   	leave  
c000db28:	c3                   	ret    
c000db29:	90                   	nop

c000db2a <TSS::setup(unsigned long, unsigned long)>:
c000db2a:	55                   	push   ebp
c000db2b:	89 e5                	mov    ebp,esp
c000db2d:	53                   	push   ebx
c000db2e:	83 ec 14             	sub    esp,0x14
c000db31:	83 ec 0c             	sub    esp,0xc
c000db34:	6a 68                	push   0x68
c000db36:	e8 fb e4 ff ff       	call   c000c036 <malloc>
c000db3b:	83 c4 10             	add    esp,0x10
c000db3e:	89 c2                	mov    edx,eax
c000db40:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db43:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000db46:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db49:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db4c:	83 ec 04             	sub    esp,0x4
c000db4f:	6a 68                	push   0x68
c000db51:	6a 00                	push   0x0
c000db53:	50                   	push   eax
c000db54:	e8 7a 2b ff ff       	call   c00006d3 <memset>
c000db59:	83 c4 10             	add    esp,0x10
c000db5c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db5f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db62:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c000db68:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db6b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db6e:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c000db74:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db77:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db7a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000db7d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000db80:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db83:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db86:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c000db8c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db8f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db92:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c000db98:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db9b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db9e:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c000dba4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dba7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dbaa:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c000dbb0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dbb3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dbb6:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000dbb9:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000dbbc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dbbf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dbc2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000dbc5:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000dbc8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dbcb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dbce:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c000dbd5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dbd8:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
c000dbdb:	e8 c5 18 01 00       	call   c001f4a5 <CPU::readCR3()>
c000dbe0:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000dbe3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dbe6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dbe9:	83 ec 08             	sub    esp,0x8
c000dbec:	50                   	push   eax
c000dbed:	8d 45 f0             	lea    eax,[ebp-0x10]
c000dbf0:	50                   	push   eax
c000dbf1:	e8 16 dc ff ff       	call   c000b80c <GDTEntry::setBase(unsigned int)>
c000dbf6:	83 c4 10             	add    esp,0x10
c000dbf9:	83 ec 08             	sub    esp,0x8
c000dbfc:	6a 68                	push   0x68
c000dbfe:	8d 45 f0             	lea    eax,[ebp-0x10]
c000dc01:	50                   	push   eax
c000dc02:	e8 21 dc ff ff       	call   c000b828 <GDTEntry::setLimit(unsigned int)>
c000dc07:	83 c4 10             	add    esp,0x10
c000dc0a:	c6 45 f5 89          	mov    BYTE PTR [ebp-0xb],0x89
c000dc0e:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000dc11:	83 e0 0f             	and    eax,0xf
c000dc14:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c000dc17:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000dc1a:	83 c8 40             	or     eax,0x40
c000dc1d:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c000dc20:	e8 4b 6b 00 00       	call   c0014770 <thisCPU()>
c000dc25:	05 78 01 00 00       	add    eax,0x178
c000dc2a:	83 ec 04             	sub    esp,0x4
c000dc2d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000dc30:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000dc33:	50                   	push   eax
c000dc34:	e8 23 dc ff ff       	call   c000b85c <GDT::addEntry(GDTEntry)>
c000dc39:	83 c4 10             	add    esp,0x10
c000dc3c:	89 c2                	mov    edx,eax
c000dc3e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dc41:	89 10                	mov    DWORD PTR [eax],edx
c000dc43:	e8 28 6b 00 00       	call   c0014770 <thisCPU()>
c000dc48:	05 78 01 00 00       	add    eax,0x178
c000dc4d:	83 ec 0c             	sub    esp,0xc
c000dc50:	50                   	push   eax
c000dc51:	e8 4a dc ff ff       	call   c000b8a0 <GDT::flush()>
c000dc56:	83 c4 10             	add    esp,0x10
c000dc59:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dc5c:	8b 00                	mov    eax,DWORD PTR [eax]
c000dc5e:	83 ec 08             	sub    esp,0x8
c000dc61:	50                   	push   eax
c000dc62:	68 bc 11 02 c0       	push   0xc00211bc
c000dc67:	e8 bb 14 00 00       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c000dc6c:	83 c4 10             	add    esp,0x10
c000dc6f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dc72:	8b 00                	mov    eax,DWORD PTR [eax]
c000dc74:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000dc77:	c9                   	leave  
c000dc78:	c3                   	ret    
c000dc79:	90                   	nop

c000dc7a <ReservedFilename::read(unsigned long long, void*, int*)>:
c000dc7a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dc7e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000dc82:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dc85:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000dc8a:	75 08                	jne    c000dc94 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c000dc8c:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000dc92:	eb 38                	jmp    c000dccc <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c000dc94:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000dc99:	75 17                	jne    c000dcb2 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c000dc9b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000dca0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000dca3:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000dca9:	8b 10                	mov    edx,DWORD PTR [eax]
c000dcab:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000dcaf:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c000dcb2:	89 c1                	mov    ecx,eax
c000dcb4:	83 e1 fd             	and    ecx,0xfffffffd
c000dcb7:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c000dcbd:	74 cd                	je     c000dc8c <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000dcbf:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000dcc4:	83 e0 ef             	and    eax,0xffffffef
c000dcc7:	83 f8 08             	cmp    eax,0x8
c000dcca:	76 c0                	jbe    c000dc8c <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000dccc:	31 c0                	xor    eax,eax
c000dcce:	c3                   	ret    
c000dccf:	90                   	nop

c000dcd0 <ReservedFilename::isAtty()>:
c000dcd0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dcd4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000dcd7:	31 c0                	xor    eax,eax
c000dcd9:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c000dcdf:	74 09                	je     c000dcea <ReservedFilename::isAtty()+0x1a>
c000dce1:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c000dce7:	0f 94 c0             	sete   al
c000dcea:	c3                   	ret    
c000dceb:	90                   	nop

c000dcec <ReservedFilename::write(unsigned long long, void*, int*)>:
c000dcec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dcf0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000dcf4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dcf7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000dcfb:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000dd00:	75 08                	jne    c000dd0a <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c000dd02:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000dd08:	eb 3d                	jmp    c000dd47 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000dd0a:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000dd0f:	75 17                	jne    c000dd28 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c000dd11:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000dd16:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000dd19:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000dd1f:	8b 10                	mov    edx,DWORD PTR [eax]
c000dd21:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000dd25:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c000dd28:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c000dd2d:	75 04                	jne    c000dd33 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c000dd2f:	89 0a                	mov    DWORD PTR [edx],ecx
c000dd31:	eb 14                	jmp    c000dd47 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000dd33:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c000dd38:	74 c8                	je     c000dd02 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000dd3a:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000dd3f:	83 e0 ef             	and    eax,0xffffffef
c000dd42:	83 f8 08             	cmp    eax,0x8
c000dd45:	76 bb                	jbe    c000dd02 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000dd47:	31 c0                	xor    eax,eax
c000dd49:	c3                   	ret    

c000dd4a <UnixFile::getFileDescriptor()>:
c000dd4a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dd4e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dd51:	c3                   	ret    

c000dd52 <UnixFile::UnixFile(int)>:
c000dd52:	53                   	push   ebx
c000dd53:	83 ec 18             	sub    esp,0x18
c000dd56:	ba a8 12 02 c0       	mov    edx,0xc00212a8
c000dd5b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd5f:	89 10                	mov    DWORD PTR [eax],edx
c000dd61:	81 7c 24 24 ff fe ff 0f 	cmp    DWORD PTR [esp+0x24],0xffffeff
c000dd69:	0f 8f 4d 01 00 00    	jg     c000debc <UnixFile::UnixFile(int)+0x16a>
c000dd6f:	a1 20 38 02 c0       	mov    eax,ds:0xc0023820
c000dd74:	8d 50 01             	lea    edx,[eax+0x1]
c000dd77:	89 15 20 38 02 c0    	mov    DWORD PTR ds:0xc0023820,edx
c000dd7d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000dd81:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000dd84:	83 ec 08             	sub    esp,0x8
c000dd87:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000dd8b:	68 d8 44 02 c0       	push   0xc00244d8
c000dd90:	e8 85 17 01 00       	call   c001f51a <LinkedList<UnixFile>::addElement(UnixFile*)>
c000dd95:	83 c4 10             	add    esp,0x10
c000dd98:	a0 d4 44 02 c0       	mov    al,ds:0xc00244d4
c000dd9d:	83 f0 01             	xor    eax,0x1
c000dda0:	84 c0                	test   al,al
c000dda2:	0f 84 15 01 00 00    	je     c000debd <UnixFile::UnixFile(int)+0x16b>
c000dda8:	c6 05 d4 44 02 c0 01 	mov    BYTE PTR ds:0xc00244d4,0x1
c000ddaf:	83 ec 0c             	sub    esp,0xc
c000ddb2:	6a 0c                	push   0xc
c000ddb4:	e8 7f 12 00 00       	call   c000f038 <operator new(unsigned long)>
c000ddb9:	83 c4 10             	add    esp,0x10
c000ddbc:	89 c3                	mov    ebx,eax
c000ddbe:	83 ec 08             	sub    esp,0x8
c000ddc1:	68 03 ff ff 0f       	push   0xfffff03
c000ddc6:	53                   	push   ebx
c000ddc7:	e8 f6 00 00 00       	call   c000dec2 <ReservedFilename::ReservedFilename(int)>
c000ddcc:	83 c4 10             	add    esp,0x10
c000ddcf:	89 1d cc 44 02 c0    	mov    DWORD PTR ds:0xc00244cc,ebx
c000ddd5:	83 ec 0c             	sub    esp,0xc
c000ddd8:	6a 0c                	push   0xc
c000ddda:	e8 59 12 00 00       	call   c000f038 <operator new(unsigned long)>
c000dddf:	83 c4 10             	add    esp,0x10
c000dde2:	89 c3                	mov    ebx,eax
c000dde4:	83 ec 08             	sub    esp,0x8
c000dde7:	68 01 ff ff 0f       	push   0xfffff01
c000ddec:	53                   	push   ebx
c000dded:	e8 d0 00 00 00       	call   c000dec2 <ReservedFilename::ReservedFilename(int)>
c000ddf2:	83 c4 10             	add    esp,0x10
c000ddf5:	89 1d d0 44 02 c0    	mov    DWORD PTR ds:0xc00244d0,ebx
c000ddfb:	83 ec 0c             	sub    esp,0xc
c000ddfe:	6a 0c                	push   0xc
c000de00:	e8 33 12 00 00       	call   c000f038 <operator new(unsigned long)>
c000de05:	83 c4 10             	add    esp,0x10
c000de08:	89 c3                	mov    ebx,eax
c000de0a:	83 ec 08             	sub    esp,0x8
c000de0d:	68 00 ff ff 0f       	push   0xfffff00
c000de12:	53                   	push   ebx
c000de13:	e8 aa 00 00 00       	call   c000dec2 <ReservedFilename::ReservedFilename(int)>
c000de18:	83 c4 10             	add    esp,0x10
c000de1b:	89 1d c4 44 02 c0    	mov    DWORD PTR ds:0xc00244c4,ebx
c000de21:	83 ec 0c             	sub    esp,0xc
c000de24:	6a 0c                	push   0xc
c000de26:	e8 0d 12 00 00       	call   c000f038 <operator new(unsigned long)>
c000de2b:	83 c4 10             	add    esp,0x10
c000de2e:	89 c3                	mov    ebx,eax
c000de30:	83 ec 08             	sub    esp,0x8
c000de33:	68 02 ff ff 0f       	push   0xfffff02
c000de38:	53                   	push   ebx
c000de39:	e8 84 00 00 00       	call   c000dec2 <ReservedFilename::ReservedFilename(int)>
c000de3e:	83 c4 10             	add    esp,0x10
c000de41:	89 1d c8 44 02 c0    	mov    DWORD PTR ds:0xc00244c8,ebx
c000de47:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000de4f:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000de54:	7f 67                	jg     c000debd <UnixFile::UnixFile(int)+0x16b>
c000de56:	83 ec 0c             	sub    esp,0xc
c000de59:	6a 0c                	push   0xc
c000de5b:	e8 d8 11 00 00       	call   c000f038 <operator new(unsigned long)>
c000de60:	83 c4 10             	add    esp,0x10
c000de63:	89 c3                	mov    ebx,eax
c000de65:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000de69:	05 10 ff ff 0f       	add    eax,0xfffff10
c000de6e:	83 ec 08             	sub    esp,0x8
c000de71:	50                   	push   eax
c000de72:	53                   	push   ebx
c000de73:	e8 4a 00 00 00       	call   c000dec2 <ReservedFilename::ReservedFilename(int)>
c000de78:	83 c4 10             	add    esp,0x10
c000de7b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000de7f:	89 1c 85 a0 44 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbb60],ebx
c000de86:	83 ec 0c             	sub    esp,0xc
c000de89:	6a 0c                	push   0xc
c000de8b:	e8 a8 11 00 00       	call   c000f038 <operator new(unsigned long)>
c000de90:	83 c4 10             	add    esp,0x10
c000de93:	89 c3                	mov    ebx,eax
c000de95:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000de99:	05 20 ff ff 0f       	add    eax,0xfffff20
c000de9e:	83 ec 08             	sub    esp,0x8
c000dea1:	50                   	push   eax
c000dea2:	53                   	push   ebx
c000dea3:	e8 1a 00 00 00       	call   c000dec2 <ReservedFilename::ReservedFilename(int)>
c000dea8:	83 c4 10             	add    esp,0x10
c000deab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000deaf:	89 1c 85 60 44 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbba0],ebx
c000deb6:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000deba:	eb 93                	jmp    c000de4f <UnixFile::UnixFile(int)+0xfd>
c000debc:	90                   	nop
c000debd:	83 c4 18             	add    esp,0x18
c000dec0:	5b                   	pop    ebx
c000dec1:	c3                   	ret    

c000dec2 <ReservedFilename::ReservedFilename(int)>:
c000dec2:	83 ec 0c             	sub    esp,0xc
c000dec5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dec9:	83 ec 08             	sub    esp,0x8
c000decc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ded0:	50                   	push   eax
c000ded1:	e8 7c fe ff ff       	call   c000dd52 <UnixFile::UnixFile(int)>
c000ded6:	83 c4 10             	add    esp,0x10
c000ded9:	ba c4 12 02 c0       	mov    edx,0xc00212c4
c000dede:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dee2:	89 10                	mov    DWORD PTR [eax],edx
c000dee4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dee8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000deec:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000deef:	90                   	nop
c000def0:	83 c4 0c             	add    esp,0xc
c000def3:	c3                   	ret    

c000def4 <UnixFile::~UnixFile()>:
c000def4:	83 ec 1c             	sub    esp,0x1c
c000def7:	ba a8 12 02 c0       	mov    edx,0xc00212a8
c000defc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000df00:	89 10                	mov    DWORD PTR [eax],edx
c000df02:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000df06:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000df09:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c000df0e:	7f 73                	jg     c000df83 <UnixFile::~UnixFile()+0x8f>
c000df10:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000df18:	83 ec 0c             	sub    esp,0xc
c000df1b:	68 d8 44 02 c0       	push   0xc00244d8
c000df20:	e8 c9 16 01 00       	call   c001f5ee <LinkedList<UnixFile>::getFirstElement()>
c000df25:	83 c4 10             	add    esp,0x10
c000df28:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df2c:	83 ec 0c             	sub    esp,0xc
c000df2f:	68 d8 44 02 c0       	push   0xc00244d8
c000df34:	e8 bd 16 01 00       	call   c001f5f6 <LinkedList<UnixFile>::removeFirst()>
c000df39:	83 c4 10             	add    esp,0x10
c000df3c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000df40:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000df44:	74 40                	je     c000df86 <UnixFile::~UnixFile()+0x92>
c000df46:	83 ec 08             	sub    esp,0x8
c000df49:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000df4d:	68 d8 44 02 c0       	push   0xc00244d8
c000df52:	e8 c3 15 01 00       	call   c001f51a <LinkedList<UnixFile>::addElement(UnixFile*)>
c000df57:	83 c4 10             	add    esp,0x10
c000df5a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000df5e:	8d 50 01             	lea    edx,[eax+0x1]
c000df61:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df65:	3d 88 13 00 00       	cmp    eax,0x1388
c000df6a:	0f 94 c0             	sete   al
c000df6d:	84 c0                	test   al,al
c000df6f:	74 a7                	je     c000df18 <UnixFile::~UnixFile()+0x24>
c000df71:	83 ec 0c             	sub    esp,0xc
c000df74:	68 80 12 02 c0       	push   0xc0021280
c000df79:	e8 72 79 00 00       	call   c00158f0 <Krnl::panic(char const*)>
c000df7e:	83 c4 10             	add    esp,0x10
c000df81:	eb 95                	jmp    c000df18 <UnixFile::~UnixFile()+0x24>
c000df83:	90                   	nop
c000df84:	eb 01                	jmp    c000df87 <UnixFile::~UnixFile()+0x93>
c000df86:	90                   	nop
c000df87:	90                   	nop
c000df88:	83 c4 1c             	add    esp,0x1c
c000df8b:	c3                   	ret    

c000df8c <UnixFile::~UnixFile()>:
c000df8c:	83 ec 0c             	sub    esp,0xc
c000df8f:	83 ec 0c             	sub    esp,0xc
c000df92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df96:	e8 59 ff ff ff       	call   c000def4 <UnixFile::~UnixFile()>
c000df9b:	83 c4 10             	add    esp,0x10
c000df9e:	83 ec 08             	sub    esp,0x8
c000dfa1:	6a 0c                	push   0xc
c000dfa3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfa7:	e8 9b 10 00 00       	call   c000f047 <operator delete(void*, unsigned long)>
c000dfac:	83 c4 10             	add    esp,0x10
c000dfaf:	83 c4 0c             	add    esp,0xc
c000dfb2:	c3                   	ret    
c000dfb3:	90                   	nop

c000dfb4 <ReservedFilename::~ReservedFilename()>:
c000dfb4:	83 ec 0c             	sub    esp,0xc
c000dfb7:	ba c4 12 02 c0       	mov    edx,0xc00212c4
c000dfbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfc0:	89 10                	mov    DWORD PTR [eax],edx
c000dfc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfc6:	83 ec 0c             	sub    esp,0xc
c000dfc9:	50                   	push   eax
c000dfca:	e8 25 ff ff ff       	call   c000def4 <UnixFile::~UnixFile()>
c000dfcf:	83 c4 10             	add    esp,0x10
c000dfd2:	90                   	nop
c000dfd3:	83 c4 0c             	add    esp,0xc
c000dfd6:	c3                   	ret    
c000dfd7:	90                   	nop

c000dfd8 <ReservedFilename::~ReservedFilename()>:
c000dfd8:	83 ec 0c             	sub    esp,0xc
c000dfdb:	83 ec 0c             	sub    esp,0xc
c000dfde:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfe2:	e8 cd ff ff ff       	call   c000dfb4 <ReservedFilename::~ReservedFilename()>
c000dfe7:	83 c4 10             	add    esp,0x10
c000dfea:	83 ec 08             	sub    esp,0x8
c000dfed:	6a 0c                	push   0xc
c000dfef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dff3:	e8 4f 10 00 00       	call   c000f047 <operator delete(void*, unsigned long)>
c000dff8:	83 c4 10             	add    esp,0x10
c000dffb:	83 c4 0c             	add    esp,0xc
c000dffe:	c3                   	ret    

c000dfff <getFromFileDescriptor(int)>:
c000dfff:	53                   	push   ebx
c000e000:	83 ec 08             	sub    esp,0x8
c000e003:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e007:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c000e00d:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c000e013:	7f 2c                	jg     c000e041 <getFromFileDescriptor(int)+0x42>
c000e015:	83 ec 0c             	sub    esp,0xc
c000e018:	68 d8 44 02 c0       	push   0xc00244d8
c000e01d:	e8 cc 15 01 00       	call   c001f5ee <LinkedList<UnixFile>::getFirstElement()>
c000e022:	83 c4 10             	add    esp,0x10
c000e025:	85 c0                	test   eax,eax
c000e027:	75 04                	jne    c000e02d <getFromFileDescriptor(int)+0x2e>
c000e029:	31 c0                	xor    eax,eax
c000e02b:	eb 6e                	jmp    c000e09b <getFromFileDescriptor(int)+0x9c>
c000e02d:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c000e030:	74 69                	je     c000e09b <getFromFileDescriptor(int)+0x9c>
c000e032:	52                   	push   edx
c000e033:	52                   	push   edx
c000e034:	50                   	push   eax
c000e035:	68 d8 44 02 c0       	push   0xc00244d8
c000e03a:	e8 59 16 01 00       	call   c001f698 <LinkedList<UnixFile>::getNext(UnixFile*)>
c000e03f:	eb e1                	jmp    c000e022 <getFromFileDescriptor(int)+0x23>
c000e041:	a1 cc 44 02 c0       	mov    eax,ds:0xc00244cc
c000e046:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c000e04c:	74 4d                	je     c000e09b <getFromFileDescriptor(int)+0x9c>
c000e04e:	a1 d0 44 02 c0       	mov    eax,ds:0xc00244d0
c000e053:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c000e059:	74 40                	je     c000e09b <getFromFileDescriptor(int)+0x9c>
c000e05b:	a1 c8 44 02 c0       	mov    eax,ds:0xc00244c8
c000e060:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c000e066:	74 33                	je     c000e09b <getFromFileDescriptor(int)+0x9c>
c000e068:	a1 c4 44 02 c0       	mov    eax,ds:0xc00244c4
c000e06d:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c000e073:	74 26                	je     c000e09b <getFromFileDescriptor(int)+0x9c>
c000e075:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c000e07b:	83 f8 08             	cmp    eax,0x8
c000e07e:	77 09                	ja     c000e089 <getFromFileDescriptor(int)+0x8a>
c000e080:	8b 04 85 a0 44 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbb60]
c000e087:	eb 12                	jmp    c000e09b <getFromFileDescriptor(int)+0x9c>
c000e089:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c000e08f:	83 fb 08             	cmp    ebx,0x8
c000e092:	77 95                	ja     c000e029 <getFromFileDescriptor(int)+0x2a>
c000e094:	8b 04 9d 60 44 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdbba0]
c000e09b:	83 c4 08             	add    esp,0x8
c000e09e:	5b                   	pop    ebx
c000e09f:	c3                   	ret    

c000e0a0 <__static_initialization_and_destruction_0(int, int)>:
c000e0a0:	83 ec 0c             	sub    esp,0xc
c000e0a3:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000e0a8:	75 34                	jne    c000e0de <__static_initialization_and_destruction_0(int, int)+0x3e>
c000e0aa:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000e0b2:	75 2a                	jne    c000e0de <__static_initialization_and_destruction_0(int, int)+0x3e>
c000e0b4:	83 ec 0c             	sub    esp,0xc
c000e0b7:	68 d8 44 02 c0       	push   0xc00244d8
c000e0bc:	e8 01 14 01 00       	call   c001f4c2 <LinkedList<UnixFile>::LinkedList()>
c000e0c1:	83 c4 10             	add    esp,0x10
c000e0c4:	83 ec 04             	sub    esp,0x4
c000e0c7:	68 9c 37 02 c0       	push   0xc002379c
c000e0cc:	68 d8 44 02 c0       	push   0xc00244d8
c000e0d1:	68 c0 f4 01 c0       	push   0xc001f4c0
c000e0d6:	e8 e8 0e 00 00       	call   c000efc3 <__cxa_atexit>
c000e0db:	83 c4 10             	add    esp,0x10
c000e0de:	90                   	nop
c000e0df:	83 c4 0c             	add    esp,0xc
c000e0e2:	c3                   	ret    

c000e0e3 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c000e0e3:	83 ec 0c             	sub    esp,0xc
c000e0e6:	83 ec 08             	sub    esp,0x8
c000e0e9:	68 ff ff 00 00       	push   0xffff
c000e0ee:	6a 01                	push   0x1
c000e0f0:	e8 ab ff ff ff       	call   c000e0a0 <__static_initialization_and_destruction_0(int, int)>
c000e0f5:	83 c4 10             	add    esp,0x10
c000e0f8:	83 c4 0c             	add    esp,0xc
c000e0fb:	c3                   	ret    

c000e0fc <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c000e0fc:	53                   	push   ebx
c000e0fd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e101:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000e105:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c000e10b:	89 c8                	mov    eax,ecx
c000e10d:	d1 e8                	shr    eax,1
c000e10f:	03 05 28 38 02 c0    	add    eax,DWORD PTR ds:0xc0023828
c000e115:	83 e1 01             	and    ecx,0x1
c000e118:	8a 10                	mov    dl,BYTE PTR [eax]
c000e11a:	75 09                	jne    c000e125 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c000e11c:	83 e2 f0             	and    edx,0xfffffff0
c000e11f:	09 da                	or     edx,ebx
c000e121:	88 10                	mov    BYTE PTR [eax],dl
c000e123:	5b                   	pop    ebx
c000e124:	c3                   	ret    
c000e125:	c1 e3 04             	shl    ebx,0x4
c000e128:	83 e2 0f             	and    edx,0xf
c000e12b:	09 da                	or     edx,ebx
c000e12d:	88 10                	mov    BYTE PTR [eax],dl
c000e12f:	5b                   	pop    ebx
c000e130:	c3                   	ret    

c000e131 <Virt::getPageState(unsigned long)>:
c000e131:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e135:	8b 0d 28 38 02 c0    	mov    ecx,DWORD PTR ds:0xc0023828
c000e13b:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c000e141:	89 d0                	mov    eax,edx
c000e143:	d1 e8                	shr    eax,1
c000e145:	83 e2 01             	and    edx,0x1
c000e148:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c000e14b:	75 04                	jne    c000e151 <Virt::getPageState(unsigned long)+0x20>
c000e14d:	83 e0 0f             	and    eax,0xf
c000e150:	c3                   	ret    
c000e151:	c0 e8 04             	shr    al,0x4
c000e154:	c3                   	ret    

c000e155 <Virt::allocateKernelVirtualPages(int)>:
c000e155:	55                   	push   ebp
c000e156:	31 ed                	xor    ebp,ebp
c000e158:	57                   	push   edi
c000e159:	56                   	push   esi
c000e15a:	53                   	push   ebx
c000e15b:	31 db                	xor    ebx,ebx
c000e15d:	83 ec 1c             	sub    esp,0x1c
c000e160:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000e164:	8b 3d 24 38 02 c0    	mov    edi,DWORD PTR ds:0xc0023824
c000e16a:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000e16f:	57                   	push   edi
c000e170:	e8 bc ff ff ff       	call   c000e131 <Virt::getPageState(unsigned long)>
c000e175:	5a                   	pop    edx
c000e176:	84 c0                	test   al,al
c000e178:	75 3a                	jne    c000e1b4 <Virt::allocateKernelVirtualPages(int)+0x5f>
c000e17a:	85 db                	test   ebx,ebx
c000e17c:	75 02                	jne    c000e180 <Virt::allocateKernelVirtualPages(int)+0x2b>
c000e17e:	89 fd                	mov    ebp,edi
c000e180:	43                   	inc    ebx
c000e181:	39 f3                	cmp    ebx,esi
c000e183:	74 5a                	je     c000e1df <Virt::allocateKernelVirtualPages(int)+0x8a>
c000e185:	47                   	inc    edi
c000e186:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000e18c:	76 31                	jbe    c000e1bf <Virt::allocateKernelVirtualPages(int)+0x6a>
c000e18e:	c7 05 24 38 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0023824,0xc8000
c000e198:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000e19d:	75 28                	jne    c000e1c7 <Virt::allocateKernelVirtualPages(int)+0x72>
c000e19f:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000e1a4:	bf 00 80 0c 00       	mov    edi,0xc8000
c000e1a9:	57                   	push   edi
c000e1aa:	e8 82 ff ff ff       	call   c000e131 <Virt::getPageState(unsigned long)>
c000e1af:	5a                   	pop    edx
c000e1b0:	84 c0                	test   al,al
c000e1b2:	74 c6                	je     c000e17a <Virt::allocateKernelVirtualPages(int)+0x25>
c000e1b4:	31 db                	xor    ebx,ebx
c000e1b6:	47                   	inc    edi
c000e1b7:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000e1bd:	77 cf                	ja     c000e18e <Virt::allocateKernelVirtualPages(int)+0x39>
c000e1bf:	89 3d 24 38 02 c0    	mov    DWORD PTR ds:0xc0023824,edi
c000e1c5:	eb a8                	jmp    c000e16f <Virt::allocateKernelVirtualPages(int)+0x1a>
c000e1c7:	83 ec 0c             	sub    esp,0xc
c000e1ca:	68 d8 12 02 c0       	push   0xc00212d8
c000e1cf:	e8 1c 77 00 00       	call   c00158f0 <Krnl::panic(char const*)>
c000e1d4:	8b 3d 24 38 02 c0    	mov    edi,DWORD PTR ds:0xc0023824
c000e1da:	83 c4 10             	add    esp,0x10
c000e1dd:	eb 90                	jmp    c000e16f <Virt::allocateKernelVirtualPages(int)+0x1a>
c000e1df:	89 2d 24 38 02 c0    	mov    DWORD PTR ds:0xc0023824,ebp
c000e1e5:	4b                   	dec    ebx
c000e1e6:	74 5f                	je     c000e247 <Virt::allocateKernelVirtualPages(int)+0xf2>
c000e1e8:	85 f6                	test   esi,esi
c000e1ea:	74 3d                	je     c000e229 <Virt::allocateKernelVirtualPages(int)+0xd4>
c000e1ec:	89 e8                	mov    eax,ebp
c000e1ee:	31 db                	xor    ebx,ebx
c000e1f0:	8d 7e ff             	lea    edi,[esi-0x1]
c000e1f3:	eb 14                	jmp    c000e209 <Virt::allocateKernelVirtualPages(int)+0xb4>
c000e1f5:	6a 01                	push   0x1
c000e1f7:	43                   	inc    ebx
c000e1f8:	50                   	push   eax
c000e1f9:	e8 fe fe ff ff       	call   c000e0fc <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e1fe:	58                   	pop    eax
c000e1ff:	39 f3                	cmp    ebx,esi
c000e201:	5a                   	pop    edx
c000e202:	74 25                	je     c000e229 <Virt::allocateKernelVirtualPages(int)+0xd4>
c000e204:	a1 24 38 02 c0       	mov    eax,ds:0xc0023824
c000e209:	8d 50 01             	lea    edx,[eax+0x1]
c000e20c:	85 db                	test   ebx,ebx
c000e20e:	89 15 24 38 02 c0    	mov    DWORD PTR ds:0xc0023824,edx
c000e214:	74 20                	je     c000e236 <Virt::allocateKernelVirtualPages(int)+0xe1>
c000e216:	39 df                	cmp    edi,ebx
c000e218:	75 db                	jne    c000e1f5 <Virt::allocateKernelVirtualPages(int)+0xa0>
c000e21a:	6a 03                	push   0x3
c000e21c:	43                   	inc    ebx
c000e21d:	50                   	push   eax
c000e21e:	e8 d9 fe ff ff       	call   c000e0fc <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e223:	59                   	pop    ecx
c000e224:	39 f3                	cmp    ebx,esi
c000e226:	58                   	pop    eax
c000e227:	75 db                	jne    c000e204 <Virt::allocateKernelVirtualPages(int)+0xaf>
c000e229:	83 c4 1c             	add    esp,0x1c
c000e22c:	89 e8                	mov    eax,ebp
c000e22e:	5b                   	pop    ebx
c000e22f:	c1 e0 0c             	shl    eax,0xc
c000e232:	5e                   	pop    esi
c000e233:	5f                   	pop    edi
c000e234:	5d                   	pop    ebp
c000e235:	c3                   	ret    
c000e236:	6a 02                	push   0x2
c000e238:	bb 01 00 00 00       	mov    ebx,0x1
c000e23d:	50                   	push   eax
c000e23e:	e8 b9 fe ff ff       	call   c000e0fc <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e243:	58                   	pop    eax
c000e244:	5a                   	pop    edx
c000e245:	eb bd                	jmp    c000e204 <Virt::allocateKernelVirtualPages(int)+0xaf>
c000e247:	6a 04                	push   0x4
c000e249:	8d 45 01             	lea    eax,[ebp+0x1]
c000e24c:	55                   	push   ebp
c000e24d:	a3 24 38 02 c0       	mov    ds:0xc0023824,eax
c000e252:	e8 a5 fe ff ff       	call   c000e0fc <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e257:	59                   	pop    ecx
c000e258:	89 e8                	mov    eax,ebp
c000e25a:	5b                   	pop    ebx
c000e25b:	c1 e0 0c             	shl    eax,0xc
c000e25e:	83 c4 1c             	add    esp,0x1c
c000e261:	5b                   	pop    ebx
c000e262:	5e                   	pop    esi
c000e263:	5f                   	pop    edi
c000e264:	5d                   	pop    ebp
c000e265:	c3                   	ret    

c000e266 <Virt::virtualMemorySetup()>:
c000e266:	53                   	push   ebx
c000e267:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000e26c:	83 ec 08             	sub    esp,0x8
c000e26f:	6a 0f                	push   0xf
c000e271:	53                   	push   ebx
c000e272:	43                   	inc    ebx
c000e273:	e8 84 fe ff ff       	call   c000e0fc <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e278:	59                   	pop    ecx
c000e279:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000e27f:	58                   	pop    eax
c000e280:	75 ed                	jne    c000e26f <Virt::virtualMemorySetup()+0x9>
c000e282:	83 ec 08             	sub    esp,0x8
c000e285:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000e28a:	68 00 00 00 c8       	push   0xc8000000
c000e28f:	68 5f 14 02 c0       	push   0xc002145f
c000e294:	e8 8e 0e 00 00       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c000e299:	58                   	pop    eax
c000e29a:	5a                   	pop    edx
c000e29b:	68 00 f0 ff ef       	push   0xeffff000
c000e2a0:	68 73 14 02 c0       	push   0xc0021473
c000e2a5:	e8 7d 0e 00 00       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c000e2aa:	83 c4 10             	add    esp,0x10
c000e2ad:	83 ec 08             	sub    esp,0x8
c000e2b0:	6a 00                	push   0x0
c000e2b2:	53                   	push   ebx
c000e2b3:	43                   	inc    ebx
c000e2b4:	e8 43 fe ff ff       	call   c000e0fc <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e2b9:	83 c4 10             	add    esp,0x10
c000e2bc:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000e2c2:	75 e9                	jne    c000e2ad <Virt::virtualMemorySetup()+0x47>
c000e2c4:	bb 00 00 0d 00       	mov    ebx,0xd0000
c000e2c9:	83 ec 08             	sub    esp,0x8
c000e2cc:	6a 0f                	push   0xf
c000e2ce:	53                   	push   ebx
c000e2cf:	43                   	inc    ebx
c000e2d0:	e8 27 fe ff ff       	call   c000e0fc <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e2d5:	83 c4 10             	add    esp,0x10
c000e2d8:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c000e2de:	75 e9                	jne    c000e2c9 <Virt::virtualMemorySetup()+0x63>
c000e2e0:	83 c4 08             	add    esp,0x8
c000e2e3:	5b                   	pop    ebx
c000e2e4:	c3                   	ret    

c000e2e5 <Virt::getAKernelVAS()>:
c000e2e5:	a1 e4 44 02 c0       	mov    eax,ds:0xc00244e4
c000e2ea:	c3                   	ret    

c000e2eb <Virt::setupPageSwapping(int)>:
c000e2eb:	57                   	push   edi
c000e2ec:	56                   	push   esi
c000e2ed:	53                   	push   ebx
c000e2ee:	83 ec 1c             	sub    esp,0x1c
c000e2f1:	68 14 01 00 00       	push   0x114
c000e2f6:	e8 3d 0d 00 00       	call   c000f038 <operator new(unsigned long)>
c000e2fb:	83 c4 0c             	add    esp,0xc
c000e2fe:	89 c6                	mov    esi,eax
c000e300:	ff 35 d4 57 02 c0    	push   DWORD PTR ds:0xc00257d4
c000e306:	68 87 14 02 c0       	push   0xc0021487
c000e30b:	50                   	push   eax
c000e30c:	e8 45 13 00 00       	call   c000f656 <File::File(char const*, Process*)>
c000e311:	89 34 24             	mov    DWORD PTR [esp],esi
c000e314:	e8 19 15 00 00       	call   c000f832 <File::unlink()>
c000e319:	58                   	pop    eax
c000e31a:	5a                   	pop    edx
c000e31b:	6a 12                	push   0x12
c000e31d:	56                   	push   esi
c000e31e:	e8 97 13 00 00       	call   c000f6ba <File::open(FileOpenMode)>
c000e323:	83 c4 10             	add    esp,0x10
c000e326:	85 c0                	test   eax,eax
c000e328:	0f 85 bf 00 00 00    	jne    c000e3ed <Virt::setupPageSwapping(int)+0x102>
c000e32e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000e332:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e33a:	c1 e3 08             	shl    ebx,0x8
c000e33d:	83 ec 0c             	sub    esp,0xc
c000e340:	68 00 00 01 00       	push   0x10000
c000e345:	e8 ec dc ff ff       	call   c000c036 <malloc>
c000e34a:	83 c4 0c             	add    esp,0xc
c000e34d:	89 c7                	mov    edi,eax
c000e34f:	68 00 00 01 00       	push   0x10000
c000e354:	6a 00                	push   0x0
c000e356:	50                   	push   eax
c000e357:	e8 77 23 ff ff       	call   c00006d3 <memset>
c000e35c:	83 c4 10             	add    esp,0x10
c000e35f:	85 db                	test   ebx,ebx
c000e361:	79 03                	jns    c000e366 <Virt::setupPageSwapping(int)+0x7b>
c000e363:	83 c3 0f             	add    ebx,0xf
c000e366:	c1 fb 04             	sar    ebx,0x4
c000e369:	4b                   	dec    ebx
c000e36a:	83 fb ff             	cmp    ebx,0xffffffff
c000e36d:	74 4b                	je     c000e3ba <Virt::setupPageSwapping(int)+0xcf>
c000e36f:	83 ec 0c             	sub    esp,0xc
c000e372:	8b 06                	mov    eax,DWORD PTR [esi]
c000e374:	8d 54 24 18          	lea    edx,[esp+0x18]
c000e378:	52                   	push   edx
c000e379:	57                   	push   edi
c000e37a:	6a 00                	push   0x0
c000e37c:	68 00 00 01 00       	push   0x10000
c000e381:	56                   	push   esi
c000e382:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000e385:	83 c4 20             	add    esp,0x20
c000e388:	85 c0                	test   eax,eax
c000e38a:	75 4e                	jne    c000e3da <Virt::setupPageSwapping(int)+0xef>
c000e38c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e390:	3d 00 00 01 00       	cmp    eax,0x10000
c000e395:	74 d2                	je     c000e369 <Virt::setupPageSwapping(int)+0x7e>
c000e397:	83 ec 08             	sub    esp,0x8
c000e39a:	4b                   	dec    ebx
c000e39b:	50                   	push   eax
c000e39c:	68 da 14 02 c0       	push   0xc00214da
c000e3a1:	e8 81 0d 00 00       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c000e3a6:	c7 04 24 e3 14 02 c0 	mov    DWORD PTR [esp],0xc00214e3
c000e3ad:	e8 3e 75 00 00       	call   c00158f0 <Krnl::panic(char const*)>
c000e3b2:	83 c4 10             	add    esp,0x10
c000e3b5:	83 fb ff             	cmp    ebx,0xffffffff
c000e3b8:	75 b5                	jne    c000e36f <Virt::setupPageSwapping(int)+0x84>
c000e3ba:	83 ec 0c             	sub    esp,0xc
c000e3bd:	56                   	push   esi
c000e3be:	e8 55 13 00 00       	call   c000f718 <File::close()>
c000e3c3:	89 3c 24             	mov    DWORD PTR [esp],edi
c000e3c6:	e8 8b dc ff ff       	call   c000c056 <rfree>
c000e3cb:	89 34 24             	mov    DWORD PTR [esp],esi
c000e3ce:	8b 06                	mov    eax,DWORD PTR [esi]
c000e3d0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000e3d3:	83 c4 20             	add    esp,0x20
c000e3d6:	5b                   	pop    ebx
c000e3d7:	5e                   	pop    esi
c000e3d8:	5f                   	pop    edi
c000e3d9:	c3                   	ret    
c000e3da:	83 ec 08             	sub    esp,0x8
c000e3dd:	50                   	push   eax
c000e3de:	68 c2 14 02 c0       	push   0xc00214c2
c000e3e3:	e8 3f 0d 00 00       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c000e3e8:	83 c4 10             	add    esp,0x10
c000e3eb:	eb 9f                	jmp    c000e38c <Virt::setupPageSwapping(int)+0xa1>
c000e3ed:	83 ec 08             	sub    esp,0x8
c000e3f0:	50                   	push   eax
c000e3f1:	68 9e 14 02 c0       	push   0xc002149e
c000e3f6:	e8 2c 0d 00 00       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c000e3fb:	c7 04 24 a7 14 02 c0 	mov    DWORD PTR [esp],0xc00214a7
c000e402:	e8 e9 74 00 00       	call   c00158f0 <Krnl::panic(char const*)>
c000e407:	83 c4 10             	add    esp,0x10
c000e40a:	e9 1f ff ff ff       	jmp    c000e32e <Virt::setupPageSwapping(int)+0x43>
c000e40f:	90                   	nop

c000e410 <VAS::VAS()>:
c000e410:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e414:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e41b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e41f:	a3 e4 44 02 c0       	mov    ds:0xc00244e4,eax
c000e424:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e428:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c000e42c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e430:	c6 00 01             	mov    BYTE PTR [eax],0x1
c000e433:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e437:	c7 40 08 00 10 00 c2 	mov    DWORD PTR [eax+0x8],0xc2001000
c000e43e:	90                   	nop
c000e43f:	c3                   	ret    

c000e440 <VAS::VAS(VAS*)>:
c000e440:	83 ec 0c             	sub    esp,0xc
c000e443:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e447:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e44e:	83 ec 0c             	sub    esp,0xc
c000e451:	68 f8 12 02 c0       	push   0xc00212f8
c000e456:	e8 95 74 00 00       	call   c00158f0 <Krnl::panic(char const*)>
c000e45b:	83 c4 10             	add    esp,0x10
c000e45e:	90                   	nop
c000e45f:	83 c4 0c             	add    esp,0xc
c000e462:	c3                   	ret    
c000e463:	90                   	nop

c000e464 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c000e464:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e468:	89 c2                	mov    edx,eax
c000e46a:	c1 e8 0a             	shr    eax,0xa
c000e46d:	c1 ea 16             	shr    edx,0x16
c000e470:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000e475:	19 c9                	sbb    ecx,ecx
c000e477:	c1 e2 0c             	shl    edx,0xc
c000e47a:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c000e480:	25 fc 0f 00 00       	and    eax,0xffc
c000e485:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c000e48c:	01 d0                	add    eax,edx
c000e48e:	c3                   	ret    
c000e48f:	90                   	nop

c000e490 <VAS::getPageTableEntry(unsigned long)>:
c000e490:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000e494:	89 ca                	mov    edx,ecx
c000e496:	c1 e9 0a             	shr    ecx,0xa
c000e499:	c1 ea 16             	shr    edx,0x16
c000e49c:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c000e4a2:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c000e4a8:	c1 e0 0c             	shl    eax,0xc
c000e4ab:	8d 04 08             	lea    eax,[eax+ecx*1]
c000e4ae:	c3                   	ret    

c000e4af <Virt::freeKernelVirtualPages(unsigned long)>:
c000e4af:	57                   	push   edi
c000e4b0:	56                   	push   esi
c000e4b1:	be 01 00 00 00       	mov    esi,0x1
c000e4b6:	53                   	push   ebx
c000e4b7:	83 ec 10             	sub    esp,0x10
c000e4ba:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000e4be:	c1 eb 0c             	shr    ebx,0xc
c000e4c1:	eb 3f                	jmp    c000e502 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c000e4c3:	e8 1d fe ff ff       	call   c000e2e5 <Virt::getAKernelVAS()>
c000e4c8:	83 ec 08             	sub    esp,0x8
c000e4cb:	57                   	push   edi
c000e4cc:	50                   	push   eax
c000e4cd:	e8 be ff ff ff       	call   c000e490 <VAS::getPageTableEntry(unsigned long)>
c000e4d2:	83 c4 10             	add    esp,0x10
c000e4d5:	8b 00                	mov    eax,DWORD PTR [eax]
c000e4d7:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000e4db:	f6 c4 04             	test   ah,0x4
c000e4de:	75 5f                	jne    c000e53f <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c000e4e0:	80 fa 04             	cmp    dl,0x4
c000e4e3:	74 78                	je     c000e55d <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c000e4e5:	80 fa 02             	cmp    dl,0x2
c000e4e8:	0f 84 88 00 00 00    	je     c000e576 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c000e4ee:	80 fa 03             	cmp    dl,0x3
c000e4f1:	0f 84 ad 00 00 00    	je     c000e5a4 <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c000e4f7:	fe ca                	dec    dl
c000e4f9:	0f 84 92 00 00 00    	je     c000e591 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c000e4ff:	43                   	inc    ebx
c000e500:	31 f6                	xor    esi,esi
c000e502:	53                   	push   ebx
c000e503:	e8 29 fc ff ff       	call   c000e131 <Virt::getPageState(unsigned long)>
c000e508:	5f                   	pop    edi
c000e509:	89 df                	mov    edi,ebx
c000e50b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000e50f:	c1 e7 0c             	shl    edi,0xc
c000e512:	84 c0                	test   al,al
c000e514:	75 ad                	jne    c000e4c3 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c000e516:	83 ec 0c             	sub    esp,0xc
c000e519:	68 e9 14 02 c0       	push   0xc00214e9
c000e51e:	e8 cd 73 00 00       	call   c00158f0 <Krnl::panic(char const*)>
c000e523:	e8 bd fd ff ff       	call   c000e2e5 <Virt::getAKernelVAS()>
c000e528:	5a                   	pop    edx
c000e529:	59                   	pop    ecx
c000e52a:	57                   	push   edi
c000e52b:	50                   	push   eax
c000e52c:	e8 5f ff ff ff       	call   c000e490 <VAS::getPageTableEntry(unsigned long)>
c000e531:	83 c4 10             	add    esp,0x10
c000e534:	8b 00                	mov    eax,DWORD PTR [eax]
c000e536:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000e53a:	f6 c4 04             	test   ah,0x4
c000e53d:	74 c0                	je     c000e4ff <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000e53f:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c000e543:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e548:	83 ec 0c             	sub    esp,0xc
c000e54b:	50                   	push   eax
c000e54c:	e8 05 e0 ff ff       	call   c000c556 <Phys::freePage(unsigned long)>
c000e551:	83 c4 10             	add    esp,0x10
c000e554:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000e558:	80 fa 04             	cmp    dl,0x4
c000e55b:	75 88                	jne    c000e4e5 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c000e55d:	89 f0                	mov    eax,esi
c000e55f:	84 c0                	test   al,al
c000e561:	75 47                	jne    c000e5aa <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c000e563:	c7 44 24 20 1c 13 02 c0 	mov    DWORD PTR [esp+0x20],0xc002131c
c000e56b:	83 c4 10             	add    esp,0x10
c000e56e:	5b                   	pop    ebx
c000e56f:	5e                   	pop    esi
c000e570:	5f                   	pop    edi
c000e571:	e9 7a 73 00 00       	jmp    c00158f0 <Krnl::panic(char const*)>
c000e576:	89 f0                	mov    eax,esi
c000e578:	84 c0                	test   al,al
c000e57a:	75 15                	jne    c000e591 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c000e57c:	83 ec 0c             	sub    esp,0xc
c000e57f:	68 05 15 02 c0       	push   0xc0021505
c000e584:	e8 67 73 00 00       	call   c00158f0 <Krnl::panic(char const*)>
c000e589:	83 c4 10             	add    esp,0x10
c000e58c:	e9 6e ff ff ff       	jmp    c000e4ff <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000e591:	83 ec 08             	sub    esp,0x8
c000e594:	6a 00                	push   0x0
c000e596:	53                   	push   ebx
c000e597:	e8 60 fb ff ff       	call   c000e0fc <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e59c:	83 c4 10             	add    esp,0x10
c000e59f:	e9 5b ff ff ff       	jmp    c000e4ff <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000e5a4:	89 f0                	mov    eax,esi
c000e5a6:	84 c0                	test   al,al
c000e5a8:	75 15                	jne    c000e5bf <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c000e5aa:	83 ec 08             	sub    esp,0x8
c000e5ad:	6a 00                	push   0x0
c000e5af:	53                   	push   ebx
c000e5b0:	e8 47 fb ff ff       	call   c000e0fc <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e5b5:	83 c4 10             	add    esp,0x10
c000e5b8:	83 c4 10             	add    esp,0x10
c000e5bb:	5b                   	pop    ebx
c000e5bc:	5e                   	pop    esi
c000e5bd:	5f                   	pop    edi
c000e5be:	c3                   	ret    
c000e5bf:	c7 44 24 20 21 15 02 c0 	mov    DWORD PTR [esp+0x20],0xc0021521
c000e5c7:	83 c4 10             	add    esp,0x10
c000e5ca:	5b                   	pop    ebx
c000e5cb:	5e                   	pop    esi
c000e5cc:	5f                   	pop    edi
c000e5cd:	e9 1e 73 00 00       	jmp    c00158f0 <Krnl::panic(char const*)>

c000e5d2 <VAS::freeAllocatedPages(unsigned long)>:
c000e5d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e5d6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e5da:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c000e5de:	74 09                	je     c000e5e9 <VAS::freeAllocatedPages(unsigned long)+0x17>
c000e5e0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e5e4:	e9 c6 fe ff ff       	jmp    c000e4af <Virt::freeKernelVirtualPages(unsigned long)>
c000e5e9:	c7 44 24 04 40 13 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021340
c000e5f1:	e9 31 0b 00 00       	jmp    c000f127 <Dbg::kprintf(char const*, ...)>

c000e5f6 <VAS::virtualToPhysical(unsigned long)>:
c000e5f6:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000e5fa:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000e5fe:	e8 8d fe ff ff       	call   c000e490 <VAS::getPageTableEntry(unsigned long)>
c000e603:	5a                   	pop    edx
c000e604:	8b 00                	mov    eax,DWORD PTR [eax]
c000e606:	59                   	pop    ecx
c000e607:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e60c:	c3                   	ret    
c000e60d:	90                   	nop

c000e60e <VAS::reflagRange(unsigned long, int, int, int)>:
c000e60e:	55                   	push   ebp
c000e60f:	57                   	push   edi
c000e610:	56                   	push   esi
c000e611:	53                   	push   ebx
c000e612:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e616:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000e61a:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000e61e:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000e622:	85 db                	test   ebx,ebx
c000e624:	7e 22                	jle    c000e648 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c000e626:	c1 e3 0c             	shl    ebx,0xc
c000e629:	01 f3                	add    ebx,esi
c000e62b:	56                   	push   esi
c000e62c:	81 c6 00 10 00 00    	add    esi,0x1000
c000e632:	55                   	push   ebp
c000e633:	e8 58 fe ff ff       	call   c000e490 <VAS::getPageTableEntry(unsigned long)>
c000e638:	5a                   	pop    edx
c000e639:	59                   	pop    ecx
c000e63a:	8b 08                	mov    ecx,DWORD PTR [eax]
c000e63c:	21 f9                	and    ecx,edi
c000e63e:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c000e642:	39 f3                	cmp    ebx,esi
c000e644:	89 08                	mov    DWORD PTR [eax],ecx
c000e646:	75 e3                	jne    c000e62b <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c000e648:	5b                   	pop    ebx
c000e649:	5e                   	pop    esi
c000e64a:	5f                   	pop    edi
c000e64b:	5d                   	pop    ebp
c000e64c:	c3                   	ret    
c000e64d:	90                   	nop

c000e64e <VAS::setToWriteCombining(unsigned long, int)>:
c000e64e:	83 ec 0c             	sub    esp,0xc
c000e651:	e8 1a 61 00 00       	call   c0014770 <thisCPU()>
c000e656:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c000e65d:	75 04                	jne    c000e663 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c000e65f:	83 c4 0c             	add    esp,0xc
c000e662:	c3                   	ret    
c000e663:	83 ec 0c             	sub    esp,0xc
c000e666:	68 80 00 00 00       	push   0x80
c000e66b:	6a ff                	push   0xffffffff
c000e66d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e671:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e675:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e679:	e8 90 ff ff ff       	call   c000e60e <VAS::reflagRange(unsigned long, int, int, int)>
c000e67e:	83 c4 20             	add    esp,0x20
c000e681:	83 c4 0c             	add    esp,0xc
c000e684:	c3                   	ret    
c000e685:	90                   	nop

c000e686 <VAS::mapOtherVASIn(bool, VAS*)>:
c000e686:	83 ec 0c             	sub    esp,0xc
c000e689:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c000e68e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e692:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000e695:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e699:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000e69c:	19 c0                	sbb    eax,eax
c000e69e:	83 ca 03             	or     edx,0x3
c000e6a1:	83 e0 fc             	and    eax,0xfffffffc
c000e6a4:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c000e6ab:	e8 f5 0d 01 00       	call   c001f4a5 <CPU::readCR3()>
c000e6b0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e6b4:	83 c4 0c             	add    esp,0xc
c000e6b7:	e9 fb 0d 01 00       	jmp    c001f4b7 <CPU::writeCR3(unsigned long)>

c000e6bc <VAS::~VAS()>:
c000e6bc:	83 ec 2c             	sub    esp,0x2c
c000e6bf:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000e6c7:	e8 78 a1 00 00       	call   c0018844 <lockScheduler()>
c000e6cc:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000e6d1:	8b 00                	mov    eax,DWORD PTR [eax]
c000e6d3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e6d6:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c000e6dc:	83 ec 04             	sub    esp,0x4
c000e6df:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000e6e3:	6a 01                	push   0x1
c000e6e5:	50                   	push   eax
c000e6e6:	e8 9b ff ff ff       	call   c000e686 <VAS::mapOtherVASIn(bool, VAS*)>
c000e6eb:	83 c4 10             	add    esp,0x10
c000e6ee:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000e6f6:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c000e6fe:	0f 8f d7 00 00 00    	jg     c000e7db <VAS::~VAS()+0x11f>
c000e704:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e708:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e70b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e70f:	c1 e2 02             	shl    edx,0x2
c000e712:	01 d0                	add    eax,edx
c000e714:	8b 00                	mov    eax,DWORD PTR [eax]
c000e716:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e71a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e71e:	83 e0 01             	and    eax,0x1
c000e721:	0f 84 ab 00 00 00    	je     c000e7d2 <VAS::~VAS()+0x116>
c000e727:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000e72f:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c000e737:	7f 75                	jg     c000e7ae <VAS::~VAS()+0xf2>
c000e739:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e73d:	c1 e0 0a             	shl    eax,0xa
c000e740:	89 c2                	mov    edx,eax
c000e742:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e746:	01 d0                	add    eax,edx
c000e748:	c1 e0 0c             	shl    eax,0xc
c000e74b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e74f:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000e754:	8b 00                	mov    eax,DWORD PTR [eax]
c000e756:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e759:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c000e75f:	83 ec 04             	sub    esp,0x4
c000e762:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e766:	6a 01                	push   0x1
c000e768:	50                   	push   eax
c000e769:	e8 f6 fc ff ff       	call   c000e464 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c000e76e:	83 c4 10             	add    esp,0x10
c000e771:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e775:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e779:	8b 00                	mov    eax,DWORD PTR [eax]
c000e77b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e77f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e783:	25 01 04 00 00       	and    eax,0x401
c000e788:	3d 01 04 00 00       	cmp    eax,0x401
c000e78d:	75 19                	jne    c000e7a8 <VAS::~VAS()+0xec>
c000e78f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e793:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e798:	83 ec 0c             	sub    esp,0xc
c000e79b:	50                   	push   eax
c000e79c:	e8 b5 dd ff ff       	call   c000c556 <Phys::freePage(unsigned long)>
c000e7a1:	83 c4 10             	add    esp,0x10
c000e7a4:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000e7a8:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000e7ac:	eb 81                	jmp    c000e72f <VAS::~VAS()+0x73>
c000e7ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7b2:	25 00 04 00 00       	and    eax,0x400
c000e7b7:	74 19                	je     c000e7d2 <VAS::~VAS()+0x116>
c000e7b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7bd:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e7c2:	83 ec 0c             	sub    esp,0xc
c000e7c5:	50                   	push   eax
c000e7c6:	e8 8b dd ff ff       	call   c000c556 <Phys::freePage(unsigned long)>
c000e7cb:	83 c4 10             	add    esp,0x10
c000e7ce:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000e7d2:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000e7d6:	e9 1b ff ff ff       	jmp    c000e6f6 <VAS::~VAS()+0x3a>
c000e7db:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e7df:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e7e2:	83 ec 0c             	sub    esp,0xc
c000e7e5:	50                   	push   eax
c000e7e6:	e8 c4 fc ff ff       	call   c000e4af <Virt::freeKernelVirtualPages(unsigned long)>
c000e7eb:	83 c4 10             	add    esp,0x10
c000e7ee:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e7f2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e7f5:	83 ec 0c             	sub    esp,0xc
c000e7f8:	50                   	push   eax
c000e7f9:	e8 58 dd ff ff       	call   c000c556 <Phys::freePage(unsigned long)>
c000e7fe:	83 c4 10             	add    esp,0x10
c000e801:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000e805:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e809:	c1 e0 02             	shl    eax,0x2
c000e80c:	83 ec 08             	sub    esp,0x8
c000e80f:	50                   	push   eax
c000e810:	68 64 13 02 c0       	push   0xc0021364
c000e815:	e8 0d 09 00 00       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c000e81a:	83 c4 10             	add    esp,0x10
c000e81d:	e8 24 a0 00 00       	call   c0018846 <unlockScheduler()>
c000e822:	90                   	nop
c000e823:	83 c4 2c             	add    esp,0x2c
c000e826:	c3                   	ret    
c000e827:	90                   	nop

c000e828 <VAS::mapPage(unsigned long, unsigned long, int)>:
c000e828:	55                   	push   ebp
c000e829:	57                   	push   edi
c000e82a:	56                   	push   esi
c000e82b:	53                   	push   ebx
c000e82c:	83 ec 1c             	sub    esp,0x1c
c000e82f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000e833:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000e837:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c000e83d:	77 08                	ja     c000e847 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c000e83f:	0f 20 d8             	mov    eax,cr3
c000e842:	39 47 0c             	cmp    DWORD PTR [edi+0xc],eax
c000e845:	75 47                	jne    c000e88e <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c000e847:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e84b:	09 d8                	or     eax,ebx
c000e84d:	a9 ff 0f 00 00       	test   eax,0xfff
c000e852:	75 57                	jne    c000e8ab <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c000e854:	89 de                	mov    esi,ebx
c000e856:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e859:	c1 ee 16             	shr    esi,0x16
c000e85c:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c000e863:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c000e867:	74 54                	je     c000e8bd <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c000e869:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e86d:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c000e873:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000e877:	c1 e6 0c             	shl    esi,0xc
c000e87a:	c1 eb 0a             	shr    ebx,0xa
c000e87d:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c000e883:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c000e886:	83 c4 1c             	add    esp,0x1c
c000e889:	5b                   	pop    ebx
c000e88a:	5e                   	pop    esi
c000e88b:	5f                   	pop    edi
c000e88c:	5d                   	pop    ebp
c000e88d:	c3                   	ret    
c000e88e:	83 ec 0c             	sub    esp,0xc
c000e891:	68 84 13 02 c0       	push   0xc0021384
c000e896:	e8 8c 08 00 00       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c000e89b:	83 c4 10             	add    esp,0x10
c000e89e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e8a2:	09 d8                	or     eax,ebx
c000e8a4:	a9 ff 0f 00 00       	test   eax,0xfff
c000e8a9:	74 a9                	je     c000e854 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c000e8ab:	83 ec 0c             	sub    esp,0xc
c000e8ae:	68 ec 13 02 c0       	push   0xc00213ec
c000e8b3:	e8 38 70 00 00       	call   c00158f0 <Krnl::panic(char const*)>
c000e8b8:	83 c4 10             	add    esp,0x10
c000e8bb:	eb 97                	jmp    c000e854 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c000e8bd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e8c1:	e8 1a dd ff ff       	call   c000c5e0 <Phys::allocatePage()>
c000e8c6:	89 c5                	mov    ebp,eax
c000e8c8:	e8 18 fa ff ff       	call   c000e2e5 <Virt::getAKernelVAS()>
c000e8cd:	83 ec 0c             	sub    esp,0xc
c000e8d0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e8d4:	6a 01                	push   0x1
c000e8d6:	e8 7a f8 ff ff       	call   c000e155 <Virt::allocateKernelVirtualPages(int)>
c000e8db:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000e8e2:	6a 01                	push   0x1
c000e8e4:	50                   	push   eax
c000e8e5:	55                   	push   ebp
c000e8e6:	81 cd 07 04 00 00    	or     ebp,0x407
c000e8ec:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000e8f0:	51                   	push   ecx
c000e8f1:	e8 1e 02 00 00       	call   c000eb14 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e8f6:	83 c4 1c             	add    esp,0x1c
c000e8f9:	68 00 10 00 00       	push   0x1000
c000e8fe:	6a 00                	push   0x0
c000e900:	50                   	push   eax
c000e901:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e905:	e8 c9 1d ff ff       	call   c00006d3 <memset>
c000e90a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000e90e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000e911:	e8 99 fb ff ff       	call   c000e4af <Virt::freeKernelVirtualPages(unsigned long)>
c000e916:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e91a:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e91d:	83 c4 10             	add    esp,0x10
c000e920:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c000e923:	e9 41 ff ff ff       	jmp    c000e869 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>

c000e928 <VAS::allocatePages(int, int)>:
c000e928:	55                   	push   ebp
c000e929:	57                   	push   edi
c000e92a:	56                   	push   esi
c000e92b:	53                   	push   ebx
c000e92c:	83 ec 1c             	sub    esp,0x1c
c000e92f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000e933:	e8 38 5e 00 00       	call   c0014770 <thisCPU()>
c000e938:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000e93e:	83 e0 01             	and    eax,0x1
c000e941:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c000e945:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000e949:	0f 85 d7 00 00 00    	jne    c000ea26 <VAS::allocatePages(int, int)+0xfe>
c000e94f:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000e952:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e956:	85 c0                	test   eax,eax
c000e958:	0f 84 ac 00 00 00    	je     c000ea0a <VAS::allocatePages(int, int)+0xe2>
c000e95e:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000e962:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e966:	c1 e6 0c             	shl    esi,0xc
c000e969:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c000e96d:	85 c0                	test   eax,eax
c000e96f:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000e972:	7e 33                	jle    c000e9a7 <VAS::allocatePages(int, int)+0x7f>
c000e974:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000e978:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000e97c:	81 cd 00 04 00 00    	or     ebp,0x400
c000e982:	e8 59 dc ff ff       	call   c000c5e0 <Phys::allocatePage()>
c000e987:	55                   	push   ebp
c000e988:	53                   	push   ebx
c000e989:	50                   	push   eax
c000e98a:	57                   	push   edi
c000e98b:	e8 98 fe ff ff       	call   c000e828 <VAS::mapPage(unsigned long, unsigned long, int)>
c000e990:	83 c4 10             	add    esp,0x10
c000e993:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000e998:	74 03                	je     c000e99d <VAS::allocatePages(int, int)+0x75>
c000e99a:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000e99d:	81 c3 00 10 00 00    	add    ebx,0x1000
c000e9a3:	39 de                	cmp    esi,ebx
c000e9a5:	75 db                	jne    c000e982 <VAS::allocatePages(int, int)+0x5a>
c000e9a7:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000e9ac:	74 3f                	je     c000e9ed <VAS::allocatePages(int, int)+0xc5>
c000e9ae:	c1 ee 0a             	shr    esi,0xa
c000e9b1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000e9b5:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c000e9bb:	c1 eb 0a             	shr    ebx,0xa
c000e9be:	81 ee 00 00 40 00    	sub    esi,0x400000
c000e9c4:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000e9ca:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000e9d0:	39 f3                	cmp    ebx,esi
c000e9d2:	77 0d                	ja     c000e9e1 <VAS::allocatePages(int, int)+0xb9>
c000e9d4:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000e9d7:	81 c3 00 10 00 00    	add    ebx,0x1000
c000e9dd:	39 de                	cmp    esi,ebx
c000e9df:	73 f3                	jae    c000e9d4 <VAS::allocatePages(int, int)+0xac>
c000e9e1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e9e5:	83 c4 1c             	add    esp,0x1c
c000e9e8:	5b                   	pop    ebx
c000e9e9:	5e                   	pop    esi
c000e9ea:	5f                   	pop    edi
c000e9eb:	5d                   	pop    ebp
c000e9ec:	c3                   	ret    
c000e9ed:	e8 b3 0a 01 00       	call   c001f4a5 <CPU::readCR3()>
c000e9f2:	83 ec 0c             	sub    esp,0xc
c000e9f5:	50                   	push   eax
c000e9f6:	e8 bc 0a 01 00       	call   c001f4b7 <CPU::writeCR3(unsigned long)>
c000e9fb:	83 c4 10             	add    esp,0x10
c000e9fe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ea02:	83 c4 1c             	add    esp,0x1c
c000ea05:	5b                   	pop    ebx
c000ea06:	5e                   	pop    esi
c000ea07:	5f                   	pop    edi
c000ea08:	5d                   	pop    ebp
c000ea09:	c3                   	ret    
c000ea0a:	83 ec 0c             	sub    esp,0xc
c000ea0d:	68 10 14 02 c0       	push   0xc0021410
c000ea12:	e8 d9 6e 00 00       	call   c00158f0 <Krnl::panic(char const*)>
c000ea17:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000ea1a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ea1e:	83 c4 10             	add    esp,0x10
c000ea21:	e9 38 ff ff ff       	jmp    c000e95e <VAS::allocatePages(int, int)+0x36>
c000ea26:	83 ec 0c             	sub    esp,0xc
c000ea29:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000ea2d:	e8 23 f7 ff ff       	call   c000e155 <Virt::allocateKernelVirtualPages(int)>
c000ea32:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ea36:	83 c4 10             	add    esp,0x10
c000ea39:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c000ea3e:	0f 87 94 00 00 00    	ja     c000ead8 <VAS::allocatePages(int, int)+0x1b0>
c000ea44:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000ea48:	85 d2                	test   edx,edx
c000ea4a:	7e 3c                	jle    c000ea88 <VAS::allocatePages(int, int)+0x160>
c000ea4c:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000ea50:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000ea54:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ea58:	c1 e5 0c             	shl    ebp,0xc
c000ea5b:	81 ce 00 04 00 00    	or     esi,0x400
c000ea61:	01 dd                	add    ebp,ebx
c000ea63:	e8 78 db ff ff       	call   c000c5e0 <Phys::allocatePage()>
c000ea68:	56                   	push   esi
c000ea69:	53                   	push   ebx
c000ea6a:	50                   	push   eax
c000ea6b:	57                   	push   edi
c000ea6c:	e8 b7 fd ff ff       	call   c000e828 <VAS::mapPage(unsigned long, unsigned long, int)>
c000ea71:	83 c4 10             	add    esp,0x10
c000ea74:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000ea79:	74 03                	je     c000ea7e <VAS::allocatePages(int, int)+0x156>
c000ea7b:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000ea7e:	81 c3 00 10 00 00    	add    ebx,0x1000
c000ea84:	39 dd                	cmp    ebp,ebx
c000ea86:	75 db                	jne    c000ea63 <VAS::allocatePages(int, int)+0x13b>
c000ea88:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000ea8d:	0f 84 5a ff ff ff    	je     c000e9ed <VAS::allocatePages(int, int)+0xc5>
c000ea93:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ea97:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ea9b:	89 d3                	mov    ebx,edx
c000ea9d:	c1 e0 0c             	shl    eax,0xc
c000eaa0:	c1 eb 0a             	shr    ebx,0xa
c000eaa3:	01 d0                	add    eax,edx
c000eaa5:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000eaab:	c1 e8 0a             	shr    eax,0xa
c000eaae:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000eab4:	25 00 f0 ff ff       	and    eax,0xfffff000
c000eab9:	2d 00 00 40 00       	sub    eax,0x400000
c000eabe:	39 c3                	cmp    ebx,eax
c000eac0:	0f 87 1b ff ff ff    	ja     c000e9e1 <VAS::allocatePages(int, int)+0xb9>
c000eac6:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000eac9:	81 c3 00 10 00 00    	add    ebx,0x1000
c000eacf:	39 d8                	cmp    eax,ebx
c000ead1:	73 f3                	jae    c000eac6 <VAS::allocatePages(int, int)+0x19e>
c000ead3:	e9 09 ff ff ff       	jmp    c000e9e1 <VAS::allocatePages(int, int)+0xb9>
c000ead8:	e8 93 5c 00 00       	call   c0014770 <thisCPU()>
c000eadd:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c000eae4:	0f 84 5a ff ff ff    	je     c000ea44 <VAS::allocatePages(int, int)+0x11c>
c000eaea:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c000eaf2:	e9 4d ff ff ff       	jmp    c000ea44 <VAS::allocatePages(int, int)+0x11c>
c000eaf7:	90                   	nop

c000eaf8 <VAS::setCPUSpecific(unsigned long)>:
c000eaf8:	83 ec 0c             	sub    esp,0xc
c000eafb:	6a 05                	push   0x5
c000eafd:	68 00 00 40 c2       	push   0xc2400000
c000eb02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eb06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eb0a:	e8 19 fd ff ff       	call   c000e828 <VAS::mapPage(unsigned long, unsigned long, int)>
c000eb0f:	83 c4 1c             	add    esp,0x1c
c000eb12:	c3                   	ret    
c000eb13:	90                   	nop

c000eb14 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c000eb14:	55                   	push   ebp
c000eb15:	57                   	push   edi
c000eb16:	56                   	push   esi
c000eb17:	53                   	push   ebx
c000eb18:	83 ec 1c             	sub    esp,0x1c
c000eb1b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000eb1f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000eb23:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c000eb27:	e8 44 5c 00 00       	call   c0014770 <thisCPU()>
c000eb2c:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000eb32:	83 e0 01             	and    eax,0x1
c000eb35:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000eb39:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eb3d:	85 c0                	test   eax,eax
c000eb3f:	7e 39                	jle    c000eb7a <VAS::mapRange(unsigned long, unsigned long, int, int)+0x66>
c000eb41:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eb45:	89 f3                	mov    ebx,esi
c000eb47:	c1 e0 0c             	shl    eax,0xc
c000eb4a:	01 f0                	add    eax,esi
c000eb4c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000eb50:	55                   	push   ebp
c000eb51:	53                   	push   ebx
c000eb52:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eb56:	29 f0                	sub    eax,esi
c000eb58:	01 d8                	add    eax,ebx
c000eb5a:	50                   	push   eax
c000eb5b:	57                   	push   edi
c000eb5c:	e8 c7 fc ff ff       	call   c000e828 <VAS::mapPage(unsigned long, unsigned long, int)>
c000eb61:	83 c4 10             	add    esp,0x10
c000eb64:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000eb69:	74 03                	je     c000eb6e <VAS::mapRange(unsigned long, unsigned long, int, int)+0x5a>
c000eb6b:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000eb6e:	81 c3 00 10 00 00    	add    ebx,0x1000
c000eb74:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c000eb78:	75 d6                	jne    c000eb50 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x3c>
c000eb7a:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000eb7f:	74 42                	je     c000ebc3 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xaf>
c000eb81:	89 f3                	mov    ebx,esi
c000eb83:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eb87:	c1 eb 0a             	shr    ebx,0xa
c000eb8a:	c1 e0 0c             	shl    eax,0xc
c000eb8d:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000eb93:	01 f0                	add    eax,esi
c000eb95:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000eb9b:	c1 e8 0a             	shr    eax,0xa
c000eb9e:	25 00 f0 ff ff       	and    eax,0xfffff000
c000eba3:	2d 00 00 40 00       	sub    eax,0x400000
c000eba8:	39 c3                	cmp    ebx,eax
c000ebaa:	77 0d                	ja     c000ebb9 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xa5>
c000ebac:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000ebaf:	81 c3 00 10 00 00    	add    ebx,0x1000
c000ebb5:	39 d8                	cmp    eax,ebx
c000ebb7:	73 f3                	jae    c000ebac <VAS::mapRange(unsigned long, unsigned long, int, int)+0x98>
c000ebb9:	83 c4 1c             	add    esp,0x1c
c000ebbc:	89 f0                	mov    eax,esi
c000ebbe:	5b                   	pop    ebx
c000ebbf:	5e                   	pop    esi
c000ebc0:	5f                   	pop    edi
c000ebc1:	5d                   	pop    ebp
c000ebc2:	c3                   	ret    
c000ebc3:	e8 dd 08 01 00       	call   c001f4a5 <CPU::readCR3()>
c000ebc8:	83 ec 0c             	sub    esp,0xc
c000ebcb:	50                   	push   eax
c000ebcc:	e8 e6 08 01 00       	call   c001f4b7 <CPU::writeCR3(unsigned long)>
c000ebd1:	89 f0                	mov    eax,esi
c000ebd3:	83 c4 10             	add    esp,0x10
c000ebd6:	83 c4 1c             	add    esp,0x1c
c000ebd9:	5b                   	pop    ebx
c000ebda:	5e                   	pop    esi
c000ebdb:	5f                   	pop    edi
c000ebdc:	5d                   	pop    ebp
c000ebdd:	c3                   	ret    

c000ebde <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c000ebde:	55                   	push   ebp
c000ebdf:	57                   	push   edi
c000ebe0:	56                   	push   esi
c000ebe1:	53                   	push   ebx
c000ebe2:	83 ec 1c             	sub    esp,0x1c
c000ebe5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ebe9:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000ebed:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c000ebf1:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000ebf5:	a9 ff 0f 00 00       	test   eax,0xfff
c000ebfa:	75 4a                	jne    c000ec46 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c000ebfc:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000ec00:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ec03:	c1 eb 16             	shr    ebx,0x16
c000ec06:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c000ec0d:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c000ec11:	74 4d                	je     c000ec60 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c000ec13:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ec17:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c000ec1b:	c1 e8 0a             	shr    eax,0xa
c000ec1e:	80 fa 01             	cmp    dl,0x1
c000ec21:	19 d2                	sbb    edx,edx
c000ec23:	c1 e3 0c             	shl    ebx,0xc
c000ec26:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c000ec2a:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c000ec30:	25 fc 0f 00 00       	and    eax,0xffc
c000ec35:	01 d8                	add    eax,ebx
c000ec37:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c000ec3e:	83 c4 1c             	add    esp,0x1c
c000ec41:	5b                   	pop    ebx
c000ec42:	5e                   	pop    esi
c000ec43:	5f                   	pop    edi
c000ec44:	5d                   	pop    ebp
c000ec45:	c3                   	ret    
c000ec46:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000ec4a:	83 ec 0c             	sub    esp,0xc
c000ec4d:	68 3c 14 02 c0       	push   0xc002143c
c000ec52:	e8 99 6c 00 00       	call   c00158f0 <Krnl::panic(char const*)>
c000ec57:	83 c4 10             	add    esp,0x10
c000ec5a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ec5e:	eb 9c                	jmp    c000ebfc <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c000ec60:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ec64:	e8 77 d9 ff ff       	call   c000c5e0 <Phys::allocatePage()>
c000ec69:	89 c5                	mov    ebp,eax
c000ec6b:	e8 75 f6 ff ff       	call   c000e2e5 <Virt::getAKernelVAS()>
c000ec70:	83 ec 0c             	sub    esp,0xc
c000ec73:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ec77:	6a 01                	push   0x1
c000ec79:	e8 d7 f4 ff ff       	call   c000e155 <Virt::allocateKernelVirtualPages(int)>
c000ec7e:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000ec85:	6a 01                	push   0x1
c000ec87:	50                   	push   eax
c000ec88:	55                   	push   ebp
c000ec89:	81 cd 07 04 00 00    	or     ebp,0x407
c000ec8f:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000ec93:	51                   	push   ecx
c000ec94:	e8 7b fe ff ff       	call   c000eb14 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ec99:	83 c4 1c             	add    esp,0x1c
c000ec9c:	68 00 10 00 00       	push   0x1000
c000eca1:	6a 00                	push   0x0
c000eca3:	50                   	push   eax
c000eca4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000eca8:	e8 26 1a ff ff       	call   c00006d3 <memset>
c000ecad:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000ecb1:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000ecb4:	e8 f6 f7 ff ff       	call   c000e4af <Virt::freeKernelVirtualPages(unsigned long)>
c000ecb9:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ecbc:	83 c4 10             	add    esp,0x10
c000ecbf:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c000ecc2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ecc6:	e9 48 ff ff ff       	jmp    c000ec13 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>
c000eccb:	90                   	nop

c000eccc <VAS::VAS(bool)>:
c000eccc:	53                   	push   ebx
c000eccd:	83 ec 28             	sub    esp,0x28
c000ecd0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ecd4:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000ecd8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ecdc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000ece3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ece7:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000eceb:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000ecee:	e8 ed d8 ff ff       	call   c000c5e0 <Phys::allocatePage()>
c000ecf3:	89 c2                	mov    edx,eax
c000ecf5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ecf9:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000ecfc:	e8 e4 f5 ff ff       	call   c000e2e5 <Virt::getAKernelVAS()>
c000ed01:	89 c3                	mov    ebx,eax
c000ed03:	83 ec 0c             	sub    esp,0xc
c000ed06:	6a 01                	push   0x1
c000ed08:	e8 48 f4 ff ff       	call   c000e155 <Virt::allocateKernelVirtualPages(int)>
c000ed0d:	83 c4 10             	add    esp,0x10
c000ed10:	89 c2                	mov    edx,eax
c000ed12:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ed16:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ed19:	83 ec 0c             	sub    esp,0xc
c000ed1c:	6a 03                	push   0x3
c000ed1e:	6a 01                	push   0x1
c000ed20:	52                   	push   edx
c000ed21:	50                   	push   eax
c000ed22:	53                   	push   ebx
c000ed23:	e8 ec fd ff ff       	call   c000eb14 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ed28:	83 c4 20             	add    esp,0x20
c000ed2b:	89 c2                	mov    edx,eax
c000ed2d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ed31:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000ed34:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000ed3c:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000ed44:	7f 1c                	jg     c000ed62 <VAS::VAS(bool)+0x96>
c000ed46:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ed4a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ed4d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ed51:	c1 e2 02             	shl    edx,0x2
c000ed54:	01 d0                	add    eax,edx
c000ed56:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000ed5c:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000ed60:	eb da                	jmp    c000ed3c <VAS::VAS(bool)+0x70>
c000ed62:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000ed6a:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000ed72:	7f 71                	jg     c000ede5 <VAS::VAS(bool)+0x119>
c000ed74:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ed78:	2d 00 02 00 00       	sub    eax,0x200
c000ed7d:	c1 e0 0c             	shl    eax,0xc
c000ed80:	83 c8 03             	or     eax,0x3
c000ed83:	89 c3                	mov    ebx,eax
c000ed85:	e8 e6 59 00 00       	call   c0014770 <thisCPU()>
c000ed8a:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000ed90:	83 e0 10             	and    eax,0x10
c000ed93:	84 c0                	test   al,al
c000ed95:	74 07                	je     c000ed9e <VAS::VAS(bool)+0xd2>
c000ed97:	b8 00 01 00 00       	mov    eax,0x100
c000ed9c:	eb 05                	jmp    c000eda3 <VAS::VAS(bool)+0xd7>
c000ed9e:	b8 00 00 00 00       	mov    eax,0x0
c000eda3:	09 d8                	or     eax,ebx
c000eda5:	89 c1                	mov    ecx,eax
c000eda7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000edab:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000edae:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000edb2:	c1 e2 02             	shl    edx,0x2
c000edb5:	01 d0                	add    eax,edx
c000edb7:	89 ca                	mov    edx,ecx
c000edb9:	89 10                	mov    DWORD PTR [eax],edx
c000edbb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000edbf:	2d 40 03 00 00       	sub    eax,0x340
c000edc4:	83 f8 7f             	cmp    eax,0x7f
c000edc7:	77 16                	ja     c000eddf <VAS::VAS(bool)+0x113>
c000edc9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000edcd:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000edd0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000edd4:	c1 e2 02             	shl    edx,0x2
c000edd7:	01 d0                	add    eax,edx
c000edd9:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000eddf:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000ede3:	eb 85                	jmp    c000ed6a <VAS::VAS(bool)+0x9e>
c000ede5:	e8 86 59 00 00       	call   c0014770 <thisCPU()>
c000edea:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000edf0:	83 e0 10             	and    eax,0x10
c000edf3:	84 c0                	test   al,al
c000edf5:	74 07                	je     c000edfe <VAS::VAS(bool)+0x132>
c000edf7:	b8 03 41 00 00       	mov    eax,0x4103
c000edfc:	eb 05                	jmp    c000ee03 <VAS::VAS(bool)+0x137>
c000edfe:	b8 03 40 00 00       	mov    eax,0x4003
c000ee03:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000ee07:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000ee0a:	81 c2 20 0c 00 00    	add    edx,0xc20
c000ee10:	89 02                	mov    DWORD PTR [edx],eax
c000ee12:	e8 59 59 00 00       	call   c0014770 <thisCPU()>
c000ee17:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000ee1d:	83 ec 08             	sub    esp,0x8
c000ee20:	50                   	push   eax
c000ee21:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ee25:	e8 ce fc ff ff       	call   c000eaf8 <VAS::setCPUSpecific(unsigned long)>
c000ee2a:	83 c4 10             	add    esp,0x10
c000ee2d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ee31:	8b 58 0c             	mov    ebx,DWORD PTR [eax+0xc]
c000ee34:	e8 37 59 00 00       	call   c0014770 <thisCPU()>
c000ee39:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000ee3f:	83 e0 10             	and    eax,0x10
c000ee42:	84 c0                	test   al,al
c000ee44:	74 07                	je     c000ee4d <VAS::VAS(bool)+0x181>
c000ee46:	b8 00 01 00 00       	mov    eax,0x100
c000ee4b:	eb 05                	jmp    c000ee52 <VAS::VAS(bool)+0x186>
c000ee4d:	b8 00 00 00 00       	mov    eax,0x0
c000ee52:	09 d8                	or     eax,ebx
c000ee54:	89 c2                	mov    edx,eax
c000ee56:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ee5a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ee5d:	05 fc 0f 00 00       	add    eax,0xffc
c000ee62:	83 ca 03             	or     edx,0x3
c000ee65:	89 10                	mov    DWORD PTR [eax],edx
c000ee67:	e8 04 59 00 00       	call   c0014770 <thisCPU()>
c000ee6c:	83 ec 0c             	sub    esp,0xc
c000ee6f:	50                   	push   eax
c000ee70:	e8 9f 19 00 00       	call   c0010814 <Device::getName()>
c000ee75:	83 c4 10             	add    esp,0x10
c000ee78:	83 ec 08             	sub    esp,0x8
c000ee7b:	68 3b 15 02 c0       	push   0xc002153b
c000ee80:	50                   	push   eax
c000ee81:	e8 3d 19 ff ff       	call   c00007c3 <strcmp>
c000ee86:	83 c4 10             	add    esp,0x10
c000ee89:	85 c0                	test   eax,eax
c000ee8b:	0f 94 c0             	sete   al
c000ee8e:	84 c0                	test   al,al
c000ee90:	74 64                	je     c000eef6 <VAS::VAS(bool)+0x22a>
c000ee92:	e8 90 99 00 00       	call   c0018827 <disableIRQs()>
c000ee97:	e8 d4 58 00 00       	call   c0014770 <thisCPU()>
c000ee9c:	05 7c 09 00 00       	add    eax,0x97c
c000eea1:	83 ec 0c             	sub    esp,0xc
c000eea4:	50                   	push   eax
c000eea5:	e8 fe cb ff ff       	call   c000baa8 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000eeaa:	83 c4 10             	add    esp,0x10
c000eead:	25 00 f0 ff ff       	and    eax,0xfffff000
c000eeb2:	89 c3                	mov    ebx,eax
c000eeb4:	e8 b7 58 00 00       	call   c0014770 <thisCPU()>
c000eeb9:	05 7c 09 00 00       	add    eax,0x97c
c000eebe:	83 ec 0c             	sub    esp,0xc
c000eec1:	50                   	push   eax
c000eec2:	e8 e1 cb ff ff       	call   c000baa8 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000eec7:	83 c4 10             	add    esp,0x10
c000eeca:	83 ec 08             	sub    esp,0x8
c000eecd:	50                   	push   eax
c000eece:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000eed2:	e8 b9 f5 ff ff       	call   c000e490 <VAS::getPageTableEntry(unsigned long)>
c000eed7:	83 c4 10             	add    esp,0x10
c000eeda:	8b 00                	mov    eax,DWORD PTR [eax]
c000eedc:	25 00 f0 ff ff       	and    eax,0xfffff000
c000eee1:	6a 11                	push   0x11
c000eee3:	53                   	push   ebx
c000eee4:	50                   	push   eax
c000eee5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000eee9:	e8 3a f9 ff ff       	call   c000e828 <VAS::mapPage(unsigned long, unsigned long, int)>
c000eeee:	83 c4 10             	add    esp,0x10
c000eef1:	e8 3f 99 00 00       	call   c0018835 <enableIRQs()>
c000eef6:	90                   	nop
c000eef7:	83 c4 28             	add    esp,0x28
c000eefa:	5b                   	pop    ebx
c000eefb:	c3                   	ret    

c000eefc <mapVASFirstTime>:
c000eefc:	55                   	push   ebp
c000eefd:	57                   	push   edi
c000eefe:	56                   	push   esi
c000eeff:	53                   	push   ebx
c000ef00:	83 ec 0c             	sub    esp,0xc
c000ef03:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ef08:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000ef0b:	4a                   	dec    edx
c000ef0c:	0f 84 99 00 00 00    	je     c000efab <mapVASFirstTime+0xaf>
c000ef12:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c000ef15:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c000ef18:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000ef1d:	c1 e5 15             	shl    ebp,0x15
c000ef20:	be 00 c0 e7 01       	mov    esi,0x1e7c000
c000ef25:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c000ef2b:	29 eb                	sub    ebx,ebp
c000ef2d:	29 ee                	sub    esi,ebp
c000ef2f:	e8 ac d6 ff ff       	call   c000c5e0 <Phys::allocatePage()>
c000ef34:	83 ec 0c             	sub    esp,0xc
c000ef37:	68 03 04 00 00       	push   0x403
c000ef3c:	6a 01                	push   0x1
c000ef3e:	53                   	push   ebx
c000ef3f:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000ef45:	50                   	push   eax
c000ef46:	57                   	push   edi
c000ef47:	e8 c8 fb ff ff       	call   c000eb14 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ef4c:	83 c4 20             	add    esp,0x20
c000ef4f:	39 f3                	cmp    ebx,esi
c000ef51:	75 dc                	jne    c000ef2f <mapVASFirstTime+0x33>
c000ef53:	be 00 f0 ff 01       	mov    esi,0x1fff000
c000ef58:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c000ef5d:	29 ee                	sub    esi,ebp
c000ef5f:	29 e8                	sub    eax,ebp
c000ef61:	89 c5                	mov    ebp,eax
c000ef63:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c000ef67:	19 db                	sbb    ebx,ebx
c000ef69:	e8 72 d6 ff ff       	call   c000c5e0 <Phys::allocatePage()>
c000ef6e:	83 e3 04             	and    ebx,0x4
c000ef71:	83 ec 0c             	sub    esp,0xc
c000ef74:	81 c3 03 04 00 00    	add    ebx,0x403
c000ef7a:	53                   	push   ebx
c000ef7b:	6a 01                	push   0x1
c000ef7d:	56                   	push   esi
c000ef7e:	81 ee 00 10 00 00    	sub    esi,0x1000
c000ef84:	50                   	push   eax
c000ef85:	57                   	push   edi
c000ef86:	e8 89 fb ff ff       	call   c000eb14 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ef8b:	83 c4 20             	add    esp,0x20
c000ef8e:	39 f5                	cmp    ebp,esi
c000ef90:	75 d1                	jne    c000ef63 <mapVASFirstTime+0x67>
c000ef92:	e8 0e 05 01 00       	call   c001f4a5 <CPU::readCR3()>
c000ef97:	83 ec 0c             	sub    esp,0xc
c000ef9a:	50                   	push   eax
c000ef9b:	e8 17 05 01 00       	call   c001f4b7 <CPU::writeCR3(unsigned long)>
c000efa0:	83 c4 10             	add    esp,0x10
c000efa3:	83 c4 0c             	add    esp,0xc
c000efa6:	5b                   	pop    ebx
c000efa7:	5e                   	pop    esi
c000efa8:	5f                   	pop    edi
c000efa9:	5d                   	pop    ebp
c000efaa:	c3                   	ret    
c000efab:	83 ec 0c             	sub    esp,0xc
c000efae:	68 49 15 02 c0       	push   0xc0021549
c000efb3:	e8 6f 01 00 00       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c000efb8:	83 c4 10             	add    esp,0x10
c000efbb:	83 c4 0c             	add    esp,0xc
c000efbe:	5b                   	pop    ebx
c000efbf:	5e                   	pop    esi
c000efc0:	5f                   	pop    edi
c000efc1:	5d                   	pop    ebp
c000efc2:	c3                   	ret    

c000efc3 <__cxa_atexit>:
c000efc3:	31 c0                	xor    eax,eax
c000efc5:	c3                   	ret    

c000efc6 <__cxa_finalize>:
c000efc6:	c3                   	ret    

c000efc7 <__stack_chk_fail>:
c000efc7:	55                   	push   ebp
c000efc8:	89 e5                	mov    ebp,esp
c000efca:	83 ec 10             	sub    esp,0x10
c000efcd:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000efd0:	68 62 15 02 c0       	push   0xc0021562
c000efd5:	e8 4d 01 00 00       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c000efda:	58                   	pop    eax
c000efdb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000efde:	5a                   	pop    edx
c000efdf:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000efe2:	68 62 15 02 c0       	push   0xc0021562
c000efe7:	e8 3b 01 00 00       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c000efec:	59                   	pop    ecx
c000efed:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000eff0:	5a                   	pop    edx
c000eff1:	8b 00                	mov    eax,DWORD PTR [eax]
c000eff3:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000eff6:	68 62 15 02 c0       	push   0xc0021562
c000effb:	e8 27 01 00 00       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c000f000:	59                   	pop    ecx
c000f001:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000f004:	5a                   	pop    edx
c000f005:	8b 00                	mov    eax,DWORD PTR [eax]
c000f007:	8b 00                	mov    eax,DWORD PTR [eax]
c000f009:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000f00c:	68 62 15 02 c0       	push   0xc0021562
c000f011:	e8 11 01 00 00       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c000f016:	c7 04 24 6a 15 02 c0 	mov    DWORD PTR [esp],0xc002156a
c000f01d:	e8 ce 68 00 00       	call   c00158f0 <Krnl::panic(char const*)>
c000f022:	83 c4 10             	add    esp,0x10
c000f025:	c9                   	leave  
c000f026:	c3                   	ret    

c000f027 <__cxa_pure_virtual>:
c000f027:	83 ec 18             	sub    esp,0x18
c000f02a:	68 82 15 02 c0       	push   0xc0021582
c000f02f:	e8 bc 68 00 00       	call   c00158f0 <Krnl::panic(char const*)>
c000f034:	83 c4 1c             	add    esp,0x1c
c000f037:	c3                   	ret    

c000f038 <operator new(unsigned long)>:
c000f038:	e9 f9 cf ff ff       	jmp    c000c036 <malloc>

c000f03d <operator new[](unsigned long)>:
c000f03d:	e9 f4 cf ff ff       	jmp    c000c036 <malloc>

c000f042 <operator delete(void*)>:
c000f042:	e9 0f d0 ff ff       	jmp    c000c056 <rfree>

c000f047 <operator delete(void*, unsigned long)>:
c000f047:	e9 0a d0 ff ff       	jmp    c000c056 <rfree>

c000f04c <operator delete[](void*)>:
c000f04c:	e9 05 d0 ff ff       	jmp    c000c056 <rfree>

c000f051 <operator delete[](void*, unsigned long)>:
c000f051:	e9 00 d0 ff ff       	jmp    c000c056 <rfree>

c000f056 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000f056:	57                   	push   edi
c000f057:	b9 3f 00 00 00       	mov    ecx,0x3f
c000f05c:	56                   	push   esi
c000f05d:	be 98 15 02 c0       	mov    esi,0xc0021598
c000f062:	53                   	push   ebx
c000f063:	83 ec 40             	sub    esp,0x40
c000f066:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000f06a:	8d 7c 24 01          	lea    edi,[esp+0x1]
c000f06e:	fc                   	cld    
c000f06f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f071:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c000f075:	83 f9 3e             	cmp    ecx,0x3e
c000f078:	7e 05                	jle    c000f07f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>
c000f07a:	b9 3e 00 00 00       	mov    ecx,0x3e
c000f07f:	89 df                	mov    edi,ebx
c000f081:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000f085:	eb 02                	jmp    c000f089 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x33>
c000f087:	89 c7                	mov    edi,eax
c000f089:	31 d2                	xor    edx,edx
c000f08b:	46                   	inc    esi
c000f08c:	89 f8                	mov    eax,edi
c000f08e:	f7 f1                	div    ecx
c000f090:	39 cf                	cmp    edi,ecx
c000f092:	73 f3                	jae    c000f087 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x31>
c000f094:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000f097:	eb 02                	jmp    c000f09b <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x45>
c000f099:	89 c3                	mov    ebx,eax
c000f09b:	31 d2                	xor    edx,edx
c000f09d:	4e                   	dec    esi
c000f09e:	89 d8                	mov    eax,ebx
c000f0a0:	f7 f1                	div    ecx
c000f0a2:	39 cb                	cmp    ebx,ecx
c000f0a4:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c000f0a8:	88 16                	mov    BYTE PTR [esi],dl
c000f0aa:	73 ed                	jae    c000f099 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x43>
c000f0ac:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000f0b0:	83 c4 40             	add    esp,0x40
c000f0b3:	5b                   	pop    ebx
c000f0b4:	5e                   	pop    esi
c000f0b5:	5f                   	pop    edi
c000f0b6:	c3                   	ret    

c000f0b7 <Dbg::logc(char)>:
c000f0b7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f0bb:	ba fd 03 00 00       	mov    edx,0x3fd
c000f0c0:	ec                   	in     al,dx
c000f0c1:	a8 20                	test   al,0x20
c000f0c3:	74 fb                	je     c000f0c0 <Dbg::logc(char)+0x9>
c000f0c5:	ba f8 03 00 00       	mov    edx,0x3f8
c000f0ca:	88 c8                	mov    al,cl
c000f0cc:	ee                   	out    dx,al
c000f0cd:	c3                   	ret    

c000f0ce <Dbg::logs(char*)>:
c000f0ce:	53                   	push   ebx
c000f0cf:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000f0d3:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000f0d6:	84 c0                	test   al,al
c000f0d8:	74 0f                	je     c000f0e9 <Dbg::logs(char*)+0x1b>
c000f0da:	50                   	push   eax
c000f0db:	43                   	inc    ebx
c000f0dc:	e8 d6 ff ff ff       	call   c000f0b7 <Dbg::logc(char)>
c000f0e1:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000f0e4:	5a                   	pop    edx
c000f0e5:	84 c0                	test   al,al
c000f0e7:	75 f1                	jne    c000f0da <Dbg::logs(char*)+0xc>
c000f0e9:	5b                   	pop    ebx
c000f0ea:	c3                   	ret    

c000f0eb <Dbg::logWriteInt(unsigned int)>:
c000f0eb:	83 ec 10             	sub    esp,0x10
c000f0ee:	6a 0a                	push   0xa
c000f0f0:	8d 44 24 08          	lea    eax,[esp+0x8]
c000f0f4:	50                   	push   eax
c000f0f5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f0f9:	e8 58 ff ff ff       	call   c000f056 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000f0fe:	50                   	push   eax
c000f0ff:	e8 ca ff ff ff       	call   c000f0ce <Dbg::logs(char*)>
c000f104:	83 c4 20             	add    esp,0x20
c000f107:	c3                   	ret    

c000f108 <Dbg::logWriteIntBase(unsigned int, int)>:
c000f108:	83 ec 10             	sub    esp,0x10
c000f10b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f10f:	8d 44 24 08          	lea    eax,[esp+0x8]
c000f113:	50                   	push   eax
c000f114:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f118:	e8 39 ff ff ff       	call   c000f056 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000f11d:	50                   	push   eax
c000f11e:	e8 ab ff ff ff       	call   c000f0ce <Dbg::logs(char*)>
c000f123:	83 c4 20             	add    esp,0x20
c000f126:	c3                   	ret    

c000f127 <Dbg::kprintf(char const*, ...)>:
c000f127:	55                   	push   ebp
c000f128:	57                   	push   edi
c000f129:	56                   	push   esi
c000f12a:	53                   	push   ebx
c000f12b:	83 ec 0c             	sub    esp,0xc
c000f12e:	8d 44 24 24          	lea    eax,[esp+0x24]
c000f132:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000f136:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000f13a:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000f13d:	84 c0                	test   al,al
c000f13f:	74 4a                	je     c000f18b <Dbg::kprintf(char const*, ...)+0x64>
c000f141:	31 db                	xor    ebx,ebx
c000f143:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000f146:	3c 25                	cmp    al,0x25
c000f148:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c000f14b:	0f 85 e4 00 00 00    	jne    c000f235 <Dbg::kprintf(char const*, ...)+0x10e>
c000f151:	83 c3 02             	add    ebx,0x2
c000f154:	8a 07                	mov    al,BYTE PTR [edi]
c000f156:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c000f159:	83 e8 25             	sub    eax,0x25
c000f15c:	3c 53                	cmp    al,0x53
c000f15e:	0f 87 ba 00 00 00    	ja     c000f21e <Dbg::kprintf(char const*, ...)+0xf7>
c000f164:	0f b6 c0             	movzx  eax,al
c000f167:	ff 24 85 d8 15 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdea28]
c000f16e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f172:	89 c8                	mov    eax,ecx
c000f174:	83 c1 04             	add    ecx,0x4
c000f177:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000f17b:	ff 30                	push   DWORD PTR [eax]
c000f17d:	e8 4c ff ff ff       	call   c000f0ce <Dbg::logs(char*)>
c000f182:	58                   	pop    eax
c000f183:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000f187:	84 c0                	test   al,al
c000f189:	75 b8                	jne    c000f143 <Dbg::kprintf(char const*, ...)+0x1c>
c000f18b:	83 c4 0c             	add    esp,0xc
c000f18e:	5b                   	pop    ebx
c000f18f:	5e                   	pop    esi
c000f190:	5f                   	pop    edi
c000f191:	5d                   	pop    ebp
c000f192:	c3                   	ret    
c000f193:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f197:	89 d0                	mov    eax,edx
c000f199:	83 c2 04             	add    edx,0x4
c000f19c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000f1a0:	ff 30                	push   DWORD PTR [eax]
c000f1a2:	e8 44 ff ff ff       	call   c000f0eb <Dbg::logWriteInt(unsigned int)>
c000f1a7:	58                   	pop    eax
c000f1a8:	eb d9                	jmp    c000f183 <Dbg::kprintf(char const*, ...)+0x5c>
c000f1aa:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f1ae:	89 d0                	mov    eax,edx
c000f1b0:	83 c2 04             	add    edx,0x4
c000f1b3:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000f1b6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000f1ba:	50                   	push   eax
c000f1bb:	e8 f7 fe ff ff       	call   c000f0b7 <Dbg::logc(char)>
c000f1c0:	58                   	pop    eax
c000f1c1:	eb c0                	jmp    c000f183 <Dbg::kprintf(char const*, ...)+0x5c>
c000f1c3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f1c7:	89 c8                	mov    eax,ecx
c000f1c9:	83 c1 04             	add    ecx,0x4
c000f1cc:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000f1d0:	ff 30                	push   DWORD PTR [eax]
c000f1d2:	e8 14 ff ff ff       	call   c000f0eb <Dbg::logWriteInt(unsigned int)>
c000f1d7:	5f                   	pop    edi
c000f1d8:	eb a9                	jmp    c000f183 <Dbg::kprintf(char const*, ...)+0x5c>
c000f1da:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f1de:	89 c8                	mov    eax,ecx
c000f1e0:	83 c1 04             	add    ecx,0x4
c000f1e3:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000f1e7:	6a 10                	push   0x10
c000f1e9:	ff 30                	push   DWORD PTR [eax]
c000f1eb:	e8 18 ff ff ff       	call   c000f108 <Dbg::logWriteIntBase(unsigned int, int)>
c000f1f0:	59                   	pop    ecx
c000f1f1:	5f                   	pop    edi
c000f1f2:	eb 8f                	jmp    c000f183 <Dbg::kprintf(char const*, ...)+0x5c>
c000f1f4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f1f8:	89 d0                	mov    eax,edx
c000f1fa:	83 c2 08             	add    edx,0x8
c000f1fd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000f201:	6a 10                	push   0x10
c000f203:	ff 30                	push   DWORD PTR [eax]
c000f205:	e8 fe fe ff ff       	call   c000f108 <Dbg::logWriteIntBase(unsigned int, int)>
c000f20a:	58                   	pop    eax
c000f20b:	5a                   	pop    edx
c000f20c:	e9 72 ff ff ff       	jmp    c000f183 <Dbg::kprintf(char const*, ...)+0x5c>
c000f211:	6a 25                	push   0x25
c000f213:	e8 9f fe ff ff       	call   c000f0b7 <Dbg::logc(char)>
c000f218:	58                   	pop    eax
c000f219:	e9 65 ff ff ff       	jmp    c000f183 <Dbg::kprintf(char const*, ...)+0x5c>
c000f21e:	6a 25                	push   0x25
c000f220:	e8 92 fe ff ff       	call   c000f0b7 <Dbg::logc(char)>
c000f225:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000f228:	50                   	push   eax
c000f229:	e8 89 fe ff ff       	call   c000f0b7 <Dbg::logc(char)>
c000f22e:	5a                   	pop    edx
c000f22f:	59                   	pop    ecx
c000f230:	e9 4e ff ff ff       	jmp    c000f183 <Dbg::kprintf(char const*, ...)+0x5c>
c000f235:	50                   	push   eax
c000f236:	89 eb                	mov    ebx,ebp
c000f238:	e8 7a fe ff ff       	call   c000f0b7 <Dbg::logc(char)>
c000f23d:	89 fd                	mov    ebp,edi
c000f23f:	58                   	pop    eax
c000f240:	e9 3e ff ff ff       	jmp    c000f183 <Dbg::kprintf(char const*, ...)+0x5c>
c000f245:	90                   	nop

c000f246 <File::read(unsigned long long, void*, int*)>:
c000f246:	53                   	push   ebx
c000f247:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f24b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f24f:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000f256:	3c 19                	cmp    al,0x19
c000f258:	77 35                	ja     c000f28f <File::read(unsigned long long, void*, int*)+0x49>
c000f25a:	8b 04 85 80 49 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb680]
c000f261:	85 c0                	test   eax,eax
c000f263:	74 2a                	je     c000f28f <File::read(unsigned long long, void*, int*)+0x49>
c000f265:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000f26b:	85 c0                	test   eax,eax
c000f26d:	74 20                	je     c000f28f <File::read(unsigned long long, void*, int*)+0x49>
c000f26f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f273:	74 21                	je     c000f296 <File::read(unsigned long long, void*, int*)+0x50>
c000f275:	8b 08                	mov    ecx,DWORD PTR [eax]
c000f277:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000f27b:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000f281:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f285:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f289:	5b                   	pop    ebx
c000f28a:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000f28d:	ff e0                	jmp    eax
c000f28f:	b8 0b 00 00 00       	mov    eax,0xb
c000f294:	eb 05                	jmp    c000f29b <File::read(unsigned long long, void*, int*)+0x55>
c000f296:	b8 05 00 00 00       	mov    eax,0x5
c000f29b:	5b                   	pop    ebx
c000f29c:	c3                   	ret    
c000f29d:	90                   	nop

c000f29e <File::write(unsigned long long, void*, int*)>:
c000f29e:	53                   	push   ebx
c000f29f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f2a3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f2a7:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000f2ae:	3c 19                	cmp    al,0x19
c000f2b0:	77 35                	ja     c000f2e7 <File::write(unsigned long long, void*, int*)+0x49>
c000f2b2:	8b 04 85 80 49 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb680]
c000f2b9:	85 c0                	test   eax,eax
c000f2bb:	74 2a                	je     c000f2e7 <File::write(unsigned long long, void*, int*)+0x49>
c000f2bd:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000f2c3:	85 c0                	test   eax,eax
c000f2c5:	74 20                	je     c000f2e7 <File::write(unsigned long long, void*, int*)+0x49>
c000f2c7:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f2cb:	74 21                	je     c000f2ee <File::write(unsigned long long, void*, int*)+0x50>
c000f2cd:	8b 08                	mov    ecx,DWORD PTR [eax]
c000f2cf:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000f2d3:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000f2d9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f2dd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f2e1:	5b                   	pop    ebx
c000f2e2:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000f2e5:	ff e0                	jmp    eax
c000f2e7:	b8 0b 00 00 00       	mov    eax,0xb
c000f2ec:	eb 05                	jmp    c000f2f3 <File::write(unsigned long long, void*, int*)+0x55>
c000f2ee:	b8 05 00 00 00       	mov    eax,0x5
c000f2f3:	5b                   	pop    ebx
c000f2f4:	c3                   	ret    
c000f2f5:	90                   	nop

c000f2f6 <Directory::read(unsigned long long, void*, int*)>:
c000f2f6:	53                   	push   ebx
c000f2f7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f2fb:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f2ff:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000f306:	3c 19                	cmp    al,0x19
c000f308:	77 35                	ja     c000f33f <Directory::read(unsigned long long, void*, int*)+0x49>
c000f30a:	8b 04 85 80 49 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb680]
c000f311:	85 c0                	test   eax,eax
c000f313:	74 2a                	je     c000f33f <Directory::read(unsigned long long, void*, int*)+0x49>
c000f315:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000f31b:	85 c0                	test   eax,eax
c000f31d:	74 20                	je     c000f33f <Directory::read(unsigned long long, void*, int*)+0x49>
c000f31f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f323:	74 21                	je     c000f346 <Directory::read(unsigned long long, void*, int*)+0x50>
c000f325:	8b 08                	mov    ecx,DWORD PTR [eax]
c000f327:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000f32b:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000f331:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f335:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f339:	5b                   	pop    ebx
c000f33a:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000f33d:	ff e0                	jmp    eax
c000f33f:	b8 0b 00 00 00       	mov    eax,0xb
c000f344:	eb 05                	jmp    c000f34b <Directory::read(unsigned long long, void*, int*)+0x55>
c000f346:	b8 05 00 00 00       	mov    eax,0x5
c000f34b:	5b                   	pop    ebx
c000f34c:	c3                   	ret    
c000f34d:	90                   	nop

c000f34e <Directory::write(unsigned long long, void*, int*)>:
c000f34e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f352:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000f359:	b8 0b 00 00 00       	mov    eax,0xb
c000f35e:	80 fa 19             	cmp    dl,0x19
c000f361:	77 18                	ja     c000f37b <Directory::write(unsigned long long, void*, int*)+0x2d>
c000f363:	8b 14 95 80 49 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdb680]
c000f36a:	85 d2                	test   edx,edx
c000f36c:	74 0d                	je     c000f37b <Directory::write(unsigned long long, void*, int*)+0x2d>
c000f36e:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c000f375:	19 c0                	sbb    eax,eax
c000f377:	83 e0 0a             	and    eax,0xa
c000f37a:	40                   	inc    eax
c000f37b:	c3                   	ret    

c000f37c <File::isAtty()>:
c000f37c:	31 c0                	xor    eax,eax
c000f37e:	c3                   	ret    
c000f37f:	90                   	nop

c000f380 <Directory::isAtty()>:
c000f380:	31 c0                	xor    eax,eax
c000f382:	c3                   	ret    
c000f383:	90                   	nop

c000f384 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000f384:	b8 0a 00 00 00       	mov    eax,0xa
c000f389:	c3                   	ret    

c000f38a <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000f38a:	b8 0a 00 00 00       	mov    eax,0xa
c000f38f:	c3                   	ret    

c000f390 <File::~File()>:
c000f390:	83 ec 0c             	sub    esp,0xc
c000f393:	ba 94 17 02 c0       	mov    edx,0xc0021794
c000f398:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f39c:	89 10                	mov    DWORD PTR [eax],edx
c000f39e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f3a2:	83 ec 0c             	sub    esp,0xc
c000f3a5:	50                   	push   eax
c000f3a6:	e8 49 eb ff ff       	call   c000def4 <UnixFile::~UnixFile()>
c000f3ab:	83 c4 10             	add    esp,0x10
c000f3ae:	90                   	nop
c000f3af:	83 c4 0c             	add    esp,0xc
c000f3b2:	c3                   	ret    
c000f3b3:	90                   	nop

c000f3b4 <File::~File()>:
c000f3b4:	83 ec 0c             	sub    esp,0xc
c000f3b7:	83 ec 0c             	sub    esp,0xc
c000f3ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f3be:	e8 cd ff ff ff       	call   c000f390 <File::~File()>
c000f3c3:	83 c4 10             	add    esp,0x10
c000f3c6:	83 ec 08             	sub    esp,0x8
c000f3c9:	68 14 01 00 00       	push   0x114
c000f3ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f3d2:	e8 70 fc ff ff       	call   c000f047 <operator delete(void*, unsigned long)>
c000f3d7:	83 c4 10             	add    esp,0x10
c000f3da:	83 c4 0c             	add    esp,0xc
c000f3dd:	c3                   	ret    

c000f3de <Directory::~Directory()>:
c000f3de:	83 ec 0c             	sub    esp,0xc
c000f3e1:	ba b0 17 02 c0       	mov    edx,0xc00217b0
c000f3e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f3ea:	89 10                	mov    DWORD PTR [eax],edx
c000f3ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f3f0:	83 ec 0c             	sub    esp,0xc
c000f3f3:	50                   	push   eax
c000f3f4:	e8 fb ea ff ff       	call   c000def4 <UnixFile::~UnixFile()>
c000f3f9:	83 c4 10             	add    esp,0x10
c000f3fc:	90                   	nop
c000f3fd:	83 c4 0c             	add    esp,0xc
c000f400:	c3                   	ret    
c000f401:	90                   	nop

c000f402 <Directory::~Directory()>:
c000f402:	83 ec 0c             	sub    esp,0xc
c000f405:	83 ec 0c             	sub    esp,0xc
c000f408:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f40c:	e8 cd ff ff ff       	call   c000f3de <Directory::~Directory()>
c000f411:	83 c4 10             	add    esp,0x10
c000f414:	83 ec 08             	sub    esp,0x8
c000f417:	68 14 01 00 00       	push   0x114
c000f41c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f420:	e8 22 fc ff ff       	call   c000f047 <operator delete(void*, unsigned long)>
c000f425:	83 c4 10             	add    esp,0x10
c000f428:	83 c4 0c             	add    esp,0xc
c000f42b:	c3                   	ret    

c000f42c <Filesystem::Filesystem()>:
c000f42c:	ba 30 17 02 c0       	mov    edx,0xc0021730
c000f431:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f435:	89 10                	mov    DWORD PTR [eax],edx
c000f437:	8b 15 e8 44 02 c0    	mov    edx,DWORD PTR ds:0xc00244e8
c000f43d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f441:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000f444:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f448:	a3 e8 44 02 c0       	mov    ds:0xc00244e8,eax
c000f44d:	90                   	nop
c000f44e:	c3                   	ret    
c000f44f:	90                   	nop

c000f450 <Filesystem::~Filesystem()>:
c000f450:	ba 30 17 02 c0       	mov    edx,0xc0021730
c000f455:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f459:	89 10                	mov    DWORD PTR [eax],edx
c000f45b:	90                   	nop
c000f45c:	c3                   	ret    
c000f45d:	90                   	nop

c000f45e <Filesystem::~Filesystem()>:
c000f45e:	83 ec 0c             	sub    esp,0xc
c000f461:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000f465:	e8 e6 ff ff ff       	call   c000f450 <Filesystem::~Filesystem()>
c000f46a:	83 c4 04             	add    esp,0x4
c000f46d:	83 ec 08             	sub    esp,0x8
c000f470:	6a 08                	push   0x8
c000f472:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f476:	e8 cc fb ff ff       	call   c000f047 <operator delete(void*, unsigned long)>
c000f47b:	83 c4 10             	add    esp,0x10
c000f47e:	83 c4 0c             	add    esp,0xc
c000f481:	c3                   	ret    

c000f482 <initVFS()>:
c000f482:	83 ec 18             	sub    esp,0x18
c000f485:	6a 08                	push   0x8
c000f487:	e8 ac fb ff ff       	call   c000f038 <operator new(unsigned long)>
c000f48c:	89 04 24             	mov    DWORD PTR [esp],eax
c000f48f:	e8 92 b2 00 00       	call   c001a726 <FAT::FAT()>
c000f494:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f49b:	e8 98 fb ff ff       	call   c000f038 <operator new(unsigned long)>
c000f4a0:	89 04 24             	mov    DWORD PTR [esp],eax
c000f4a3:	e8 f4 c4 00 00       	call   c001b99c <ISO9660::ISO9660()>
c000f4a8:	83 c4 1c             	add    esp,0x1c
c000f4ab:	c3                   	ret    

c000f4ac <standardiseFiles(char*, char const*, char const*)>:
c000f4ac:	55                   	push   ebp
c000f4ad:	57                   	push   edi
c000f4ae:	56                   	push   esi
c000f4af:	53                   	push   ebx
c000f4b0:	81 ec 10 04 00 00    	sub    esp,0x410
c000f4b6:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000f4bd:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000f4c4:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000f4cb:	68 00 04 00 00       	push   0x400
c000f4d0:	6a 00                	push   0x0
c000f4d2:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000f4d6:	56                   	push   esi
c000f4d7:	e8 f7 11 ff ff       	call   c00006d3 <memset>
c000f4dc:	83 c4 10             	add    esp,0x10
c000f4df:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000f4e3:	75 0b                	jne    c000f4f0 <standardiseFiles(char*, char const*, char const*)+0x44>
c000f4e5:	50                   	push   eax
c000f4e6:	50                   	push   eax
c000f4e7:	57                   	push   edi
c000f4e8:	56                   	push   esi
c000f4e9:	e8 84 12 ff ff       	call   c0000772 <strcpy>
c000f4ee:	eb 41                	jmp    c000f531 <standardiseFiles(char*, char const*, char const*)+0x85>
c000f4f0:	8a 07                	mov    al,BYTE PTR [edi]
c000f4f2:	3c 5c                	cmp    al,0x5c
c000f4f4:	74 04                	je     c000f4fa <standardiseFiles(char*, char const*, char const*)+0x4e>
c000f4f6:	3c 2f                	cmp    al,0x2f
c000f4f8:	75 18                	jne    c000f512 <standardiseFiles(char*, char const*, char const*)+0x66>
c000f4fa:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000f4fd:	3c 60                	cmp    al,0x60
c000f4ff:	7e 03                	jle    c000f504 <standardiseFiles(char*, char const*, char const*)+0x58>
c000f501:	83 e8 20             	sub    eax,0x20
c000f504:	88 04 24             	mov    BYTE PTR [esp],al
c000f507:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000f50e:	50                   	push   eax
c000f50f:	50                   	push   eax
c000f510:	eb 18                	jmp    c000f52a <standardiseFiles(char*, char const*, char const*)+0x7e>
c000f512:	50                   	push   eax
c000f513:	50                   	push   eax
c000f514:	55                   	push   ebp
c000f515:	56                   	push   esi
c000f516:	e8 57 12 ff ff       	call   c0000772 <strcpy>
c000f51b:	5a                   	pop    edx
c000f51c:	59                   	pop    ecx
c000f51d:	68 54 2a 02 c0       	push   0xc0022a54
c000f522:	56                   	push   esi
c000f523:	e8 01 13 ff ff       	call   c0000829 <strcat>
c000f528:	5d                   	pop    ebp
c000f529:	58                   	pop    eax
c000f52a:	57                   	push   edi
c000f52b:	56                   	push   esi
c000f52c:	e8 f8 12 ff ff       	call   c0000829 <strcat>
c000f531:	83 c4 10             	add    esp,0x10
c000f534:	8a 04 24             	mov    al,BYTE PTR [esp]
c000f537:	3c 60                	cmp    al,0x60
c000f539:	7e 03                	jle    c000f53e <standardiseFiles(char*, char const*, char const*)+0x92>
c000f53b:	83 e8 20             	sub    eax,0x20
c000f53e:	88 04 24             	mov    BYTE PTR [esp],al
c000f541:	88 03                	mov    BYTE PTR [ebx],al
c000f543:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000f54a:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000f550:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000f554:	bf 03 00 00 00       	mov    edi,0x3
c000f559:	b8 03 00 00 00       	mov    eax,0x3
c000f55e:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c000f561:	84 d2                	test   dl,dl
c000f563:	0f 84 91 00 00 00    	je     c000f5fa <standardiseFiles(char*, char const*, char const*)+0x14e>
c000f569:	8d 4f 01             	lea    ecx,[edi+0x1]
c000f56c:	80 fa 5c             	cmp    dl,0x5c
c000f56f:	74 05                	je     c000f576 <standardiseFiles(char*, char const*, char const*)+0xca>
c000f571:	80 fa 2f             	cmp    dl,0x2f
c000f574:	75 12                	jne    c000f588 <standardiseFiles(char*, char const*, char const*)+0xdc>
c000f576:	89 c5                	mov    ebp,eax
c000f578:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000f57d:	74 09                	je     c000f588 <standardiseFiles(char*, char const*, char const*)+0xdc>
c000f57f:	40                   	inc    eax
c000f580:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000f584:	89 cf                	mov    edi,ecx
c000f586:	eb d6                	jmp    c000f55e <standardiseFiles(char*, char const*, char const*)+0xb2>
c000f588:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000f58d:	75 5b                	jne    c000f5ea <standardiseFiles(char*, char const*, char const*)+0x13e>
c000f58f:	80 fa 2e             	cmp    dl,0x2e
c000f592:	75 56                	jne    c000f5ea <standardiseFiles(char*, char const*, char const*)+0x13e>
c000f594:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000f598:	74 19                	je     c000f5b3 <standardiseFiles(char*, char const*, char const*)+0x107>
c000f59a:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000f59f:	74 53                	je     c000f5f4 <standardiseFiles(char*, char const*, char const*)+0x148>
c000f5a1:	89 f9                	mov    ecx,edi
c000f5a3:	41                   	inc    ecx
c000f5a4:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000f5a7:	80 fa 2f             	cmp    dl,0x2f
c000f5aa:	74 f7                	je     c000f5a3 <standardiseFiles(char*, char const*, char const*)+0xf7>
c000f5ac:	80 fa 5c             	cmp    dl,0x5c
c000f5af:	74 f2                	je     c000f5a3 <standardiseFiles(char*, char const*, char const*)+0xf7>
c000f5b1:	eb d1                	jmp    c000f584 <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f5b3:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000f5b8:	74 3a                	je     c000f5f4 <standardiseFiles(char*, char const*, char const*)+0x148>
c000f5ba:	83 f8 03             	cmp    eax,0x3
c000f5bd:	74 c5                	je     c000f584 <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f5bf:	41                   	inc    ecx
c000f5c0:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000f5c3:	80 fa 2f             	cmp    dl,0x2f
c000f5c6:	74 f7                	je     c000f5bf <standardiseFiles(char*, char const*, char const*)+0x113>
c000f5c8:	80 fa 5c             	cmp    dl,0x5c
c000f5cb:	74 f2                	je     c000f5bf <standardiseFiles(char*, char const*, char const*)+0x113>
c000f5cd:	48                   	dec    eax
c000f5ce:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000f5d2:	75 06                	jne    c000f5da <standardiseFiles(char*, char const*, char const*)+0x12e>
c000f5d4:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000f5d8:	eb f3                	jmp    c000f5cd <standardiseFiles(char*, char const*, char const*)+0x121>
c000f5da:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000f5de:	74 07                	je     c000f5e7 <standardiseFiles(char*, char const*, char const*)+0x13b>
c000f5e0:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000f5e4:	48                   	dec    eax
c000f5e5:	eb f3                	jmp    c000f5da <standardiseFiles(char*, char const*, char const*)+0x12e>
c000f5e7:	40                   	inc    eax
c000f5e8:	eb 9a                	jmp    c000f584 <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f5ea:	80 fa 2f             	cmp    dl,0x2f
c000f5ed:	74 95                	je     c000f584 <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f5ef:	80 fa 5c             	cmp    dl,0x5c
c000f5f2:	74 90                	je     c000f584 <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f5f4:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000f5f7:	40                   	inc    eax
c000f5f8:	eb 8a                	jmp    c000f584 <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f5fa:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000f5fe:	83 ec 0c             	sub    esp,0xc
c000f601:	53                   	push   ebx
c000f602:	e8 e9 10 ff ff       	call   c00006f0 <strlen>
c000f607:	83 c4 10             	add    esp,0x10
c000f60a:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000f60f:	75 26                	jne    c000f637 <standardiseFiles(char*, char const*, char const*)+0x18b>
c000f611:	83 ec 0c             	sub    esp,0xc
c000f614:	53                   	push   ebx
c000f615:	e8 d6 10 ff ff       	call   c00006f0 <strlen>
c000f61a:	83 c4 10             	add    esp,0x10
c000f61d:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000f622:	74 26                	je     c000f64a <standardiseFiles(char*, char const*, char const*)+0x19e>
c000f624:	83 ec 0c             	sub    esp,0xc
c000f627:	53                   	push   ebx
c000f628:	e8 c3 10 ff ff       	call   c00006f0 <strlen>
c000f62d:	83 c4 10             	add    esp,0x10
c000f630:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000f635:	eb c7                	jmp    c000f5fe <standardiseFiles(char*, char const*, char const*)+0x152>
c000f637:	83 ec 0c             	sub    esp,0xc
c000f63a:	53                   	push   ebx
c000f63b:	e8 b0 10 ff ff       	call   c00006f0 <strlen>
c000f640:	83 c4 10             	add    esp,0x10
c000f643:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000f648:	74 c7                	je     c000f611 <standardiseFiles(char*, char const*, char const*)+0x165>
c000f64a:	81 c4 0c 04 00 00    	add    esp,0x40c
c000f650:	5b                   	pop    ebx
c000f651:	5e                   	pop    esi
c000f652:	5f                   	pop    edi
c000f653:	5d                   	pop    ebp
c000f654:	c3                   	ret    
c000f655:	90                   	nop

c000f656 <File::File(char const*, Process*)>:
c000f656:	83 ec 0c             	sub    esp,0xc
c000f659:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f65d:	83 ec 08             	sub    esp,0x8
c000f660:	6a 00                	push   0x0
c000f662:	50                   	push   eax
c000f663:	e8 ea e6 ff ff       	call   c000dd52 <UnixFile::UnixFile(int)>
c000f668:	83 c4 10             	add    esp,0x10
c000f66b:	ba 94 17 02 c0       	mov    edx,0xc0021794
c000f670:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f674:	89 10                	mov    DWORD PTR [eax],edx
c000f676:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f67a:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000f680:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f684:	83 c0 0d             	add    eax,0xd
c000f687:	83 ec 04             	sub    esp,0x4
c000f68a:	52                   	push   edx
c000f68b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f68f:	50                   	push   eax
c000f690:	e8 17 fe ff ff       	call   c000f4ac <standardiseFiles(char*, char const*, char const*)>
c000f695:	83 c4 10             	add    esp,0x10
c000f698:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f69c:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000f69f:	8d 50 bf             	lea    edx,[eax-0x41]
c000f6a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f6a6:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000f6ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f6b0:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000f6b4:	90                   	nop
c000f6b5:	83 c4 0c             	add    esp,0xc
c000f6b8:	c3                   	ret    
c000f6b9:	90                   	nop

c000f6ba <File::open(FileOpenMode)>:
c000f6ba:	53                   	push   ebx
c000f6bb:	b8 0b 00 00 00       	mov    eax,0xb
c000f6c0:	83 ec 08             	sub    esp,0x8
c000f6c3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f6c7:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000f6ce:	80 fa 19             	cmp    dl,0x19
c000f6d1:	77 40                	ja     c000f713 <File::open(FileOpenMode)+0x59>
c000f6d3:	8b 14 95 80 49 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdb680]
c000f6da:	85 d2                	test   edx,edx
c000f6dc:	74 35                	je     c000f713 <File::open(FileOpenMode)+0x59>
c000f6de:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000f6e4:	85 d2                	test   edx,edx
c000f6e6:	74 2b                	je     c000f713 <File::open(FileOpenMode)+0x59>
c000f6e8:	b8 06 00 00 00       	mov    eax,0x6
c000f6ed:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000f6f1:	75 20                	jne    c000f713 <File::open(FileOpenMode)+0x59>
c000f6f3:	8b 02                	mov    eax,DWORD PTR [edx]
c000f6f5:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000f6fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f6ff:	51                   	push   ecx
c000f700:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000f703:	51                   	push   ecx
c000f704:	52                   	push   edx
c000f705:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000f708:	83 c4 10             	add    esp,0x10
c000f70b:	85 c0                	test   eax,eax
c000f70d:	75 04                	jne    c000f713 <File::open(FileOpenMode)+0x59>
c000f70f:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000f713:	83 c4 08             	add    esp,0x8
c000f716:	5b                   	pop    ebx
c000f717:	c3                   	ret    

c000f718 <File::close()>:
c000f718:	53                   	push   ebx
c000f719:	b8 0b 00 00 00       	mov    eax,0xb
c000f71e:	83 ec 08             	sub    esp,0x8
c000f721:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000f725:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000f72c:	80 fa 19             	cmp    dl,0x19
c000f72f:	77 41                	ja     c000f772 <File::close()+0x5a>
c000f731:	8b 1c 95 80 49 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdb680]
c000f738:	85 db                	test   ebx,ebx
c000f73a:	74 36                	je     c000f772 <File::close()+0x5a>
c000f73c:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000f743:	74 2d                	je     c000f772 <File::close()+0x5a>
c000f745:	b8 05 00 00 00       	mov    eax,0x5
c000f74a:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000f74e:	74 22                	je     c000f772 <File::close()+0x5a>
c000f750:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000f754:	8b 04 95 80 49 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdb680]
c000f75b:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000f761:	53                   	push   ebx
c000f762:	53                   	push   ebx
c000f763:	8b 10                	mov    edx,DWORD PTR [eax]
c000f765:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000f76b:	50                   	push   eax
c000f76c:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c000f76f:	83 c4 10             	add    esp,0x10
c000f772:	83 c4 08             	add    esp,0x8
c000f775:	5b                   	pop    ebx
c000f776:	c3                   	ret    
c000f777:	90                   	nop

c000f778 <File::seek(unsigned long long)>:
c000f778:	56                   	push   esi
c000f779:	53                   	push   ebx
c000f77a:	b8 0b 00 00 00       	mov    eax,0xb
c000f77f:	51                   	push   ecx
c000f780:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000f784:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000f788:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000f78f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000f793:	80 fa 19             	cmp    dl,0x19
c000f796:	77 31                	ja     c000f7c9 <File::seek(unsigned long long)+0x51>
c000f798:	8b 14 95 80 49 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdb680]
c000f79f:	85 d2                	test   edx,edx
c000f7a1:	74 26                	je     c000f7c9 <File::seek(unsigned long long)+0x51>
c000f7a3:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000f7a9:	85 d2                	test   edx,edx
c000f7ab:	74 1c                	je     c000f7c9 <File::seek(unsigned long long)+0x51>
c000f7ad:	b8 05 00 00 00       	mov    eax,0x5
c000f7b2:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000f7b6:	74 11                	je     c000f7c9 <File::seek(unsigned long long)+0x51>
c000f7b8:	8b 02                	mov    eax,DWORD PTR [edx]
c000f7ba:	53                   	push   ebx
c000f7bb:	51                   	push   ecx
c000f7bc:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000f7c2:	52                   	push   edx
c000f7c3:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000f7c6:	83 c4 10             	add    esp,0x10
c000f7c9:	5a                   	pop    edx
c000f7ca:	5b                   	pop    ebx
c000f7cb:	5e                   	pop    esi
c000f7cc:	c3                   	ret    
c000f7cd:	90                   	nop

c000f7ce <File::tell(unsigned long long*)>:
c000f7ce:	83 ec 0c             	sub    esp,0xc
c000f7d1:	b8 0b 00 00 00       	mov    eax,0xb
c000f7d6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000f7da:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000f7e1:	80 fa 19             	cmp    dl,0x19
c000f7e4:	77 34                	ja     c000f81a <File::tell(unsigned long long*)+0x4c>
c000f7e6:	8b 14 95 80 49 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdb680]
c000f7ed:	85 d2                	test   edx,edx
c000f7ef:	74 29                	je     c000f81a <File::tell(unsigned long long*)+0x4c>
c000f7f1:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000f7f7:	85 d2                	test   edx,edx
c000f7f9:	74 1f                	je     c000f81a <File::tell(unsigned long long*)+0x4c>
c000f7fb:	b8 05 00 00 00       	mov    eax,0x5
c000f800:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000f804:	74 14                	je     c000f81a <File::tell(unsigned long long*)+0x4c>
c000f806:	50                   	push   eax
c000f807:	8b 02                	mov    eax,DWORD PTR [edx]
c000f809:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f80d:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000f813:	52                   	push   edx
c000f814:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000f817:	83 c4 10             	add    esp,0x10
c000f81a:	83 c4 0c             	add    esp,0xc
c000f81d:	c3                   	ret    

c000f81e <File::rewind()>:
c000f81e:	83 ec 10             	sub    esp,0x10
c000f821:	6a 00                	push   0x0
c000f823:	6a 00                	push   0x0
c000f825:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f829:	e8 4a ff ff ff       	call   c000f778 <File::seek(unsigned long long)>
c000f82e:	83 c4 1c             	add    esp,0x1c
c000f831:	c3                   	ret    

c000f832 <File::unlink()>:
c000f832:	83 ec 0c             	sub    esp,0xc
c000f835:	b8 0b 00 00 00       	mov    eax,0xb
c000f83a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f83e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f845:	80 f9 19             	cmp    cl,0x19
c000f848:	77 2f                	ja     c000f879 <File::unlink()+0x47>
c000f84a:	8b 0c 8d 80 49 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb680]
c000f851:	85 c9                	test   ecx,ecx
c000f853:	74 24                	je     c000f879 <File::unlink()+0x47>
c000f855:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f85b:	85 c9                	test   ecx,ecx
c000f85d:	74 1a                	je     c000f879 <File::unlink()+0x47>
c000f85f:	b8 06 00 00 00       	mov    eax,0x6
c000f864:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f868:	75 0f                	jne    c000f879 <File::unlink()+0x47>
c000f86a:	83 c2 0d             	add    edx,0xd
c000f86d:	50                   	push   eax
c000f86e:	50                   	push   eax
c000f86f:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f871:	52                   	push   edx
c000f872:	51                   	push   ecx
c000f873:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000f876:	83 c4 10             	add    esp,0x10
c000f879:	83 c4 0c             	add    esp,0xc
c000f87c:	c3                   	ret    
c000f87d:	90                   	nop

c000f87e <File::rename(char const*)>:
c000f87e:	83 ec 0c             	sub    esp,0xc
c000f881:	b8 0b 00 00 00       	mov    eax,0xb
c000f886:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f88a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f891:	80 f9 19             	cmp    cl,0x19
c000f894:	77 32                	ja     c000f8c8 <File::rename(char const*)+0x4a>
c000f896:	8b 0c 8d 80 49 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb680]
c000f89d:	85 c9                	test   ecx,ecx
c000f89f:	74 27                	je     c000f8c8 <File::rename(char const*)+0x4a>
c000f8a1:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f8a7:	85 c9                	test   ecx,ecx
c000f8a9:	74 1d                	je     c000f8c8 <File::rename(char const*)+0x4a>
c000f8ab:	b8 06 00 00 00       	mov    eax,0x6
c000f8b0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f8b4:	75 12                	jne    c000f8c8 <File::rename(char const*)+0x4a>
c000f8b6:	83 c2 0d             	add    edx,0xd
c000f8b9:	50                   	push   eax
c000f8ba:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f8bc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f8c0:	52                   	push   edx
c000f8c1:	51                   	push   ecx
c000f8c2:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000f8c5:	83 c4 10             	add    esp,0x10
c000f8c8:	83 c4 0c             	add    esp,0xc
c000f8cb:	c3                   	ret    

c000f8cc <File::chfatattr(unsigned char, unsigned char)>:
c000f8cc:	57                   	push   edi
c000f8cd:	b8 0b 00 00 00       	mov    eax,0xb
c000f8d2:	56                   	push   esi
c000f8d3:	53                   	push   ebx
c000f8d4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f8d8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f8dc:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f8e3:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000f8e7:	80 f9 19             	cmp    cl,0x19
c000f8ea:	77 37                	ja     c000f923 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000f8ec:	8b 0c 8d 80 49 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb680]
c000f8f3:	85 c9                	test   ecx,ecx
c000f8f5:	74 2c                	je     c000f923 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000f8f7:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f8fd:	85 c9                	test   ecx,ecx
c000f8ff:	74 22                	je     c000f923 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000f901:	b8 06 00 00 00       	mov    eax,0x6
c000f906:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f90a:	75 17                	jne    c000f923 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000f90c:	8b 39                	mov    edi,DWORD PTR [ecx]
c000f90e:	89 f0                	mov    eax,esi
c000f910:	83 c2 0d             	add    edx,0xd
c000f913:	0f b6 f0             	movzx  esi,al
c000f916:	0f b6 db             	movzx  ebx,bl
c000f919:	56                   	push   esi
c000f91a:	53                   	push   ebx
c000f91b:	52                   	push   edx
c000f91c:	51                   	push   ecx
c000f91d:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000f920:	83 c4 10             	add    esp,0x10
c000f923:	5b                   	pop    ebx
c000f924:	5e                   	pop    esi
c000f925:	5f                   	pop    edi
c000f926:	c3                   	ret    
c000f927:	90                   	nop

c000f928 <File::exists()>:
c000f928:	83 ec 0c             	sub    esp,0xc
c000f92b:	31 c0                	xor    eax,eax
c000f92d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f931:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f938:	80 f9 19             	cmp    cl,0x19
c000f93b:	77 24                	ja     c000f961 <File::exists()+0x39>
c000f93d:	8b 0c 8d 80 49 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb680]
c000f944:	85 c9                	test   ecx,ecx
c000f946:	74 19                	je     c000f961 <File::exists()+0x39>
c000f948:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f94e:	85 c9                	test   ecx,ecx
c000f950:	74 0f                	je     c000f961 <File::exists()+0x39>
c000f952:	83 c2 0d             	add    edx,0xd
c000f955:	50                   	push   eax
c000f956:	50                   	push   eax
c000f957:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f959:	52                   	push   edx
c000f95a:	51                   	push   ecx
c000f95b:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000f95e:	83 c4 10             	add    esp,0x10
c000f961:	83 c4 0c             	add    esp,0xc
c000f964:	c3                   	ret    
c000f965:	90                   	nop

c000f966 <File::stat(unsigned long long*, bool*)>:
c000f966:	56                   	push   esi
c000f967:	53                   	push   ebx
c000f968:	50                   	push   eax
c000f969:	b8 0b 00 00 00       	mov    eax,0xb
c000f96e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f972:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f976:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f97d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000f981:	80 f9 19             	cmp    cl,0x19
c000f984:	77 3d                	ja     c000f9c3 <File::stat(unsigned long long*, bool*)+0x5d>
c000f986:	8b 0c 8d 80 49 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb680]
c000f98d:	85 c9                	test   ecx,ecx
c000f98f:	74 32                	je     c000f9c3 <File::stat(unsigned long long*, bool*)+0x5d>
c000f991:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f997:	85 c9                	test   ecx,ecx
c000f999:	74 28                	je     c000f9c3 <File::stat(unsigned long long*, bool*)+0x5d>
c000f99b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f99d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f9a1:	74 13                	je     c000f9b6 <File::stat(unsigned long long*, bool*)+0x50>
c000f9a3:	83 ec 04             	sub    esp,0x4
c000f9a6:	56                   	push   esi
c000f9a7:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000f9ad:	51                   	push   ecx
c000f9ae:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000f9b1:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000f9b4:	eb 0a                	jmp    c000f9c0 <File::stat(unsigned long long*, bool*)+0x5a>
c000f9b6:	53                   	push   ebx
c000f9b7:	83 c2 0d             	add    edx,0xd
c000f9ba:	56                   	push   esi
c000f9bb:	52                   	push   edx
c000f9bc:	51                   	push   ecx
c000f9bd:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000f9c0:	83 c4 10             	add    esp,0x10
c000f9c3:	5a                   	pop    edx
c000f9c4:	5b                   	pop    ebx
c000f9c5:	5e                   	pop    esi
c000f9c6:	c3                   	ret    

c000f9c7 <getcwd(Process*, char*, int)>:
c000f9c7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f9cb:	31 c0                	xor    eax,eax
c000f9cd:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000f9d0:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000f9d4:	7d 15                	jge    c000f9eb <getcwd(Process*, char*, int)+0x24>
c000f9d6:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f9da:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000f9e1:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000f9e4:	84 c9                	test   cl,cl
c000f9e6:	74 06                	je     c000f9ee <getcwd(Process*, char*, int)+0x27>
c000f9e8:	40                   	inc    eax
c000f9e9:	eb e2                	jmp    c000f9cd <getcwd(Process*, char*, int)+0x6>
c000f9eb:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000f9ee:	31 c0                	xor    eax,eax
c000f9f0:	c3                   	ret    

c000f9f1 <setcwd(Process*, char*)>:
c000f9f1:	55                   	push   ebp
c000f9f2:	57                   	push   edi
c000f9f3:	56                   	push   esi
c000f9f4:	53                   	push   ebx
c000f9f5:	81 ec 20 02 00 00    	sub    esp,0x220
c000f9fb:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000fa02:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000fa08:	57                   	push   edi
c000fa09:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000fa10:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000fa14:	56                   	push   esi
c000fa15:	e8 92 fa ff ff       	call   c000f4ac <standardiseFiles(char*, char const*, char const*)>
c000fa1a:	89 34 24             	mov    DWORD PTR [esp],esi
c000fa1d:	e8 ce 0c ff ff       	call   c00006f0 <strlen>
c000fa22:	83 c4 10             	add    esp,0x10
c000fa25:	83 f8 02             	cmp    eax,0x2
c000fa28:	77 17                	ja     c000fa41 <setcwd(Process*, char*)+0x50>
c000fa2a:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c000fa2f:	83 e8 41             	sub    eax,0x41
c000fa32:	83 f8 19             	cmp    eax,0x19
c000fa35:	76 24                	jbe    c000fa5b <setcwd(Process*, char*)+0x6a>
c000fa37:	b8 03 00 00 00       	mov    eax,0x3
c000fa3c:	e9 cb 00 00 00       	jmp    c000fb0c <setcwd(Process*, char*)+0x11b>
c000fa41:	83 ec 0c             	sub    esp,0xc
c000fa44:	56                   	push   esi
c000fa45:	e8 a6 0c ff ff       	call   c00006f0 <strlen>
c000fa4a:	83 c4 10             	add    esp,0x10
c000fa4d:	83 f8 03             	cmp    eax,0x3
c000fa50:	75 33                	jne    c000fa85 <setcwd(Process*, char*)+0x94>
c000fa52:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000fa57:	75 2c                	jne    c000fa85 <setcwd(Process*, char*)+0x94>
c000fa59:	eb cf                	jmp    c000fa2a <setcwd(Process*, char*)+0x39>
c000fa5b:	8b 14 85 80 49 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdb680]
c000fa62:	b8 05 00 00 00       	mov    eax,0x5
c000fa67:	85 d2                	test   edx,edx
c000fa69:	0f 84 9d 00 00 00    	je     c000fb0c <setcwd(Process*, char*)+0x11b>
c000fa6f:	b8 06 00 00 00       	mov    eax,0x6
c000fa74:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000fa7b:	0f 84 8b 00 00 00    	je     c000fb0c <setcwd(Process*, char*)+0x11b>
c000fa81:	51                   	push   ecx
c000fa82:	51                   	push   ecx
c000fa83:	eb 7b                	jmp    c000fb00 <setcwd(Process*, char*)+0x10f>
c000fa85:	83 ec 0c             	sub    esp,0xc
c000fa88:	68 14 01 00 00       	push   0x114
c000fa8d:	e8 a6 f5 ff ff       	call   c000f038 <operator new(unsigned long)>
c000fa92:	83 c4 0c             	add    esp,0xc
c000fa95:	89 c3                	mov    ebx,eax
c000fa97:	55                   	push   ebp
c000fa98:	56                   	push   esi
c000fa99:	50                   	push   eax
c000fa9a:	e8 b7 fb ff ff       	call   c000f656 <File::File(char const*, Process*)>
c000fa9f:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000faa4:	83 c4 0c             	add    esp,0xc
c000faa7:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000faab:	50                   	push   eax
c000faac:	8d 44 24 10          	lea    eax,[esp+0x10]
c000fab0:	50                   	push   eax
c000fab1:	53                   	push   ebx
c000fab2:	e8 af fe ff ff       	call   c000f966 <File::stat(unsigned long long*, bool*)>
c000fab7:	83 c4 10             	add    esp,0x10
c000faba:	8b 13                	mov    edx,DWORD PTR [ebx]
c000fabc:	83 f8 02             	cmp    eax,0x2
c000fabf:	75 09                	jne    c000faca <setcwd(Process*, char*)+0xd9>
c000fac1:	83 ec 0c             	sub    esp,0xc
c000fac4:	53                   	push   ebx
c000fac5:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000fac8:	eb 0d                	jmp    c000fad7 <setcwd(Process*, char*)+0xe6>
c000faca:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000facd:	85 c0                	test   eax,eax
c000facf:	74 10                	je     c000fae1 <setcwd(Process*, char*)+0xf0>
c000fad1:	83 ec 0c             	sub    esp,0xc
c000fad4:	53                   	push   ebx
c000fad5:	ff d2                	call   edx
c000fad7:	83 c4 10             	add    esp,0x10
c000fada:	b8 01 00 00 00       	mov    eax,0x1
c000fadf:	eb 2b                	jmp    c000fb0c <setcwd(Process*, char*)+0x11b>
c000fae1:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000fae6:	75 10                	jne    c000faf8 <setcwd(Process*, char*)+0x107>
c000fae8:	83 ec 0c             	sub    esp,0xc
c000faeb:	53                   	push   ebx
c000faec:	ff d2                	call   edx
c000faee:	83 c4 10             	add    esp,0x10
c000faf1:	b8 02 00 00 00       	mov    eax,0x2
c000faf6:	eb 14                	jmp    c000fb0c <setcwd(Process*, char*)+0x11b>
c000faf8:	83 ec 0c             	sub    esp,0xc
c000fafb:	53                   	push   ebx
c000fafc:	ff d2                	call   edx
c000fafe:	58                   	pop    eax
c000faff:	5a                   	pop    edx
c000fb00:	56                   	push   esi
c000fb01:	57                   	push   edi
c000fb02:	e8 6b 0c ff ff       	call   c0000772 <strcpy>
c000fb07:	83 c4 10             	add    esp,0x10
c000fb0a:	31 c0                	xor    eax,eax
c000fb0c:	81 c4 1c 02 00 00    	add    esp,0x21c
c000fb12:	5b                   	pop    ebx
c000fb13:	5e                   	pop    esi
c000fb14:	5f                   	pop    edi
c000fb15:	5d                   	pop    ebp
c000fb16:	c3                   	ret    
c000fb17:	90                   	nop

c000fb18 <Directory::Directory(char const*, Process*)>:
c000fb18:	83 ec 0c             	sub    esp,0xc
c000fb1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fb1f:	83 ec 08             	sub    esp,0x8
c000fb22:	6a 00                	push   0x0
c000fb24:	50                   	push   eax
c000fb25:	e8 28 e2 ff ff       	call   c000dd52 <UnixFile::UnixFile(int)>
c000fb2a:	83 c4 10             	add    esp,0x10
c000fb2d:	ba b0 17 02 c0       	mov    edx,0xc00217b0
c000fb32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fb36:	89 10                	mov    DWORD PTR [eax],edx
c000fb38:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000fb3c:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000fb42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fb46:	83 c0 0d             	add    eax,0xd
c000fb49:	83 ec 04             	sub    esp,0x4
c000fb4c:	52                   	push   edx
c000fb4d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fb51:	50                   	push   eax
c000fb52:	e8 55 f9 ff ff       	call   c000f4ac <standardiseFiles(char*, char const*, char const*)>
c000fb57:	83 c4 10             	add    esp,0x10
c000fb5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fb5e:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000fb61:	8d 50 bf             	lea    edx,[eax-0x41]
c000fb64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fb68:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000fb6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fb72:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000fb76:	90                   	nop
c000fb77:	83 c4 0c             	add    esp,0xc
c000fb7a:	c3                   	ret    
c000fb7b:	90                   	nop

c000fb7c <Directory::open()>:
c000fb7c:	53                   	push   ebx
c000fb7d:	b8 0b 00 00 00       	mov    eax,0xb
c000fb82:	83 ec 08             	sub    esp,0x8
c000fb85:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fb89:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000fb90:	80 fa 19             	cmp    dl,0x19
c000fb93:	77 3d                	ja     c000fbd2 <Directory::open()+0x56>
c000fb95:	8b 14 95 80 49 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdb680]
c000fb9c:	85 d2                	test   edx,edx
c000fb9e:	74 32                	je     c000fbd2 <Directory::open()+0x56>
c000fba0:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000fba6:	85 d2                	test   edx,edx
c000fba8:	74 28                	je     c000fbd2 <Directory::open()+0x56>
c000fbaa:	b8 06 00 00 00       	mov    eax,0x6
c000fbaf:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000fbb3:	75 1d                	jne    c000fbd2 <Directory::open()+0x56>
c000fbb5:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000fbbb:	50                   	push   eax
c000fbbc:	8b 02                	mov    eax,DWORD PTR [edx]
c000fbbe:	51                   	push   ecx
c000fbbf:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000fbc2:	51                   	push   ecx
c000fbc3:	52                   	push   edx
c000fbc4:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000fbc7:	83 c4 10             	add    esp,0x10
c000fbca:	85 c0                	test   eax,eax
c000fbcc:	75 04                	jne    c000fbd2 <Directory::open()+0x56>
c000fbce:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000fbd2:	83 c4 08             	add    esp,0x8
c000fbd5:	5b                   	pop    ebx
c000fbd6:	c3                   	ret    
c000fbd7:	90                   	nop

c000fbd8 <Directory::close()>:
c000fbd8:	53                   	push   ebx
c000fbd9:	b8 0b 00 00 00       	mov    eax,0xb
c000fbde:	83 ec 08             	sub    esp,0x8
c000fbe1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000fbe5:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000fbec:	80 fa 19             	cmp    dl,0x19
c000fbef:	77 41                	ja     c000fc32 <Directory::close()+0x5a>
c000fbf1:	8b 1c 95 80 49 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdb680]
c000fbf8:	85 db                	test   ebx,ebx
c000fbfa:	74 36                	je     c000fc32 <Directory::close()+0x5a>
c000fbfc:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000fc03:	74 2d                	je     c000fc32 <Directory::close()+0x5a>
c000fc05:	b8 05 00 00 00       	mov    eax,0x5
c000fc0a:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000fc0e:	74 22                	je     c000fc32 <Directory::close()+0x5a>
c000fc10:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000fc14:	8b 04 95 80 49 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdb680]
c000fc1b:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000fc21:	53                   	push   ebx
c000fc22:	53                   	push   ebx
c000fc23:	8b 10                	mov    edx,DWORD PTR [eax]
c000fc25:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000fc2b:	50                   	push   eax
c000fc2c:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000fc2f:	83 c4 10             	add    esp,0x10
c000fc32:	83 c4 08             	add    esp,0x8
c000fc35:	5b                   	pop    ebx
c000fc36:	c3                   	ret    
c000fc37:	90                   	nop

c000fc38 <Directory::unlink()>:
c000fc38:	83 ec 0c             	sub    esp,0xc
c000fc3b:	b8 0b 00 00 00       	mov    eax,0xb
c000fc40:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fc44:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000fc4b:	80 f9 19             	cmp    cl,0x19
c000fc4e:	77 2f                	ja     c000fc7f <Directory::unlink()+0x47>
c000fc50:	8b 0c 8d 80 49 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb680]
c000fc57:	85 c9                	test   ecx,ecx
c000fc59:	74 24                	je     c000fc7f <Directory::unlink()+0x47>
c000fc5b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000fc61:	85 c9                	test   ecx,ecx
c000fc63:	74 1a                	je     c000fc7f <Directory::unlink()+0x47>
c000fc65:	b8 06 00 00 00       	mov    eax,0x6
c000fc6a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000fc6e:	75 0f                	jne    c000fc7f <Directory::unlink()+0x47>
c000fc70:	83 c2 0d             	add    edx,0xd
c000fc73:	50                   	push   eax
c000fc74:	50                   	push   eax
c000fc75:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fc77:	52                   	push   edx
c000fc78:	51                   	push   ecx
c000fc79:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000fc7c:	83 c4 10             	add    esp,0x10
c000fc7f:	83 c4 0c             	add    esp,0xc
c000fc82:	c3                   	ret    
c000fc83:	90                   	nop

c000fc84 <Directory::rename(char const*)>:
c000fc84:	83 ec 0c             	sub    esp,0xc
c000fc87:	b8 0b 00 00 00       	mov    eax,0xb
c000fc8c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fc90:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000fc97:	80 f9 19             	cmp    cl,0x19
c000fc9a:	77 32                	ja     c000fcce <Directory::rename(char const*)+0x4a>
c000fc9c:	8b 0c 8d 80 49 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb680]
c000fca3:	85 c9                	test   ecx,ecx
c000fca5:	74 27                	je     c000fcce <Directory::rename(char const*)+0x4a>
c000fca7:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000fcad:	85 c9                	test   ecx,ecx
c000fcaf:	74 1d                	je     c000fcce <Directory::rename(char const*)+0x4a>
c000fcb1:	b8 06 00 00 00       	mov    eax,0x6
c000fcb6:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000fcba:	75 12                	jne    c000fcce <Directory::rename(char const*)+0x4a>
c000fcbc:	83 c2 0d             	add    edx,0xd
c000fcbf:	50                   	push   eax
c000fcc0:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fcc2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fcc6:	52                   	push   edx
c000fcc7:	51                   	push   ecx
c000fcc8:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000fccb:	83 c4 10             	add    esp,0x10
c000fcce:	83 c4 0c             	add    esp,0xc
c000fcd1:	c3                   	ret    

c000fcd2 <Directory::exists()>:
c000fcd2:	83 ec 0c             	sub    esp,0xc
c000fcd5:	31 c0                	xor    eax,eax
c000fcd7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fcdb:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000fce2:	80 f9 19             	cmp    cl,0x19
c000fce5:	77 24                	ja     c000fd0b <Directory::exists()+0x39>
c000fce7:	8b 0c 8d 80 49 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb680]
c000fcee:	85 c9                	test   ecx,ecx
c000fcf0:	74 19                	je     c000fd0b <Directory::exists()+0x39>
c000fcf2:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000fcf8:	85 c9                	test   ecx,ecx
c000fcfa:	74 0f                	je     c000fd0b <Directory::exists()+0x39>
c000fcfc:	83 c2 0d             	add    edx,0xd
c000fcff:	50                   	push   eax
c000fd00:	50                   	push   eax
c000fd01:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fd03:	52                   	push   edx
c000fd04:	51                   	push   ecx
c000fd05:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000fd08:	83 c4 10             	add    esp,0x10
c000fd0b:	83 c4 0c             	add    esp,0xc
c000fd0e:	c3                   	ret    
c000fd0f:	90                   	nop

c000fd10 <Directory::read(dirent*)>:
c000fd10:	83 ec 1c             	sub    esp,0x1c
c000fd13:	b8 0b 00 00 00       	mov    eax,0xb
c000fd18:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000fd1c:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000fd23:	80 fa 19             	cmp    dl,0x19
c000fd26:	77 30                	ja     c000fd58 <Directory::read(dirent*)+0x48>
c000fd28:	8b 14 95 80 49 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdb680]
c000fd2f:	85 d2                	test   edx,edx
c000fd31:	74 25                	je     c000fd58 <Directory::read(dirent*)+0x48>
c000fd33:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000fd3a:	74 1c                	je     c000fd58 <Directory::read(dirent*)+0x48>
c000fd3c:	83 ec 0c             	sub    esp,0xc
c000fd3f:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fd41:	8d 54 24 18          	lea    edx,[esp+0x18]
c000fd45:	52                   	push   edx
c000fd46:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000fd4a:	6a 00                	push   0x0
c000fd4c:	68 10 01 00 00       	push   0x110
c000fd51:	51                   	push   ecx
c000fd52:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000fd55:	83 c4 20             	add    esp,0x20
c000fd58:	83 c4 1c             	add    esp,0x1c
c000fd5b:	c3                   	ret    

c000fd5c <Directory::create()>:
c000fd5c:	83 ec 0c             	sub    esp,0xc
c000fd5f:	b8 0b 00 00 00       	mov    eax,0xb
c000fd64:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fd68:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000fd6f:	80 f9 19             	cmp    cl,0x19
c000fd72:	77 2f                	ja     c000fda3 <Directory::create()+0x47>
c000fd74:	8b 0c 8d 80 49 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb680]
c000fd7b:	85 c9                	test   ecx,ecx
c000fd7d:	74 24                	je     c000fda3 <Directory::create()+0x47>
c000fd7f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000fd85:	85 c9                	test   ecx,ecx
c000fd87:	74 1a                	je     c000fda3 <Directory::create()+0x47>
c000fd89:	b8 06 00 00 00       	mov    eax,0x6
c000fd8e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000fd92:	75 0f                	jne    c000fda3 <Directory::create()+0x47>
c000fd94:	83 c2 0d             	add    edx,0xd
c000fd97:	50                   	push   eax
c000fd98:	50                   	push   eax
c000fd99:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fd9b:	52                   	push   edx
c000fd9c:	51                   	push   ecx
c000fd9d:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000fda0:	83 c4 10             	add    esp,0x10
c000fda3:	83 c4 0c             	add    esp,0xc
c000fda6:	c3                   	ret    
c000fda7:	90                   	nop

c000fda8 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000fda8:	b8 0a 00 00 00       	mov    eax,0xa
c000fdad:	c3                   	ret    

c000fdae <Bus::Bus(char const*)>:
c000fdae:	83 ec 0c             	sub    esp,0xc
c000fdb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fdb5:	83 ec 08             	sub    esp,0x8
c000fdb8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fdbc:	50                   	push   eax
c000fdbd:	e8 60 09 00 00       	call   c0010722 <Device::Device(char const*)>
c000fdc2:	83 c4 10             	add    esp,0x10
c000fdc5:	ba cc 17 02 c0       	mov    edx,0xc00217cc
c000fdca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fdce:	89 10                	mov    DWORD PTR [eax],edx
c000fdd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fdd4:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000fdde:	90                   	nop
c000fddf:	83 c4 0c             	add    esp,0xc
c000fde2:	c3                   	ret    
c000fde3:	90                   	nop

c000fde4 <Bus::~Bus()>:
c000fde4:	83 ec 0c             	sub    esp,0xc
c000fde7:	ba cc 17 02 c0       	mov    edx,0xc00217cc
c000fdec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fdf0:	89 10                	mov    DWORD PTR [eax],edx
c000fdf2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fdf6:	83 ec 0c             	sub    esp,0xc
c000fdf9:	50                   	push   eax
c000fdfa:	e8 d5 05 00 00       	call   c00103d4 <Device::~Device()>
c000fdff:	83 c4 10             	add    esp,0x10
c000fe02:	90                   	nop
c000fe03:	83 c4 0c             	add    esp,0xc
c000fe06:	c3                   	ret    
c000fe07:	90                   	nop

c000fe08 <Bus::~Bus()>:
c000fe08:	83 ec 0c             	sub    esp,0xc
c000fe0b:	83 ec 0c             	sub    esp,0xc
c000fe0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fe12:	e8 cd ff ff ff       	call   c000fde4 <Bus::~Bus()>
c000fe17:	83 c4 10             	add    esp,0x10
c000fe1a:	83 ec 08             	sub    esp,0x8
c000fe1d:	68 58 01 00 00       	push   0x158
c000fe22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fe26:	e8 1c f2 ff ff       	call   c000f047 <operator delete(void*, unsigned long)>
c000fe2b:	83 c4 10             	add    esp,0x10
c000fe2e:	83 c4 0c             	add    esp,0xc
c000fe31:	c3                   	ret    

c000fe32 <Buzzer::Buzzer(char const*)>:
c000fe32:	83 ec 0c             	sub    esp,0xc
c000fe35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe39:	83 ec 08             	sub    esp,0x8
c000fe3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fe40:	50                   	push   eax
c000fe41:	e8 dc 08 00 00       	call   c0010722 <Device::Device(char const*)>
c000fe46:	83 c4 10             	add    esp,0x10
c000fe49:	ba f8 17 02 c0       	mov    edx,0xc00217f8
c000fe4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe52:	89 10                	mov    DWORD PTR [eax],edx
c000fe54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe58:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000fe62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe66:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c000fe70:	90                   	nop
c000fe71:	83 c4 0c             	add    esp,0xc
c000fe74:	c3                   	ret    
c000fe75:	90                   	nop

c000fe76 <Buzzer::~Buzzer()>:
c000fe76:	83 ec 0c             	sub    esp,0xc
c000fe79:	ba f8 17 02 c0       	mov    edx,0xc00217f8
c000fe7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe82:	89 10                	mov    DWORD PTR [eax],edx
c000fe84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe88:	83 ec 0c             	sub    esp,0xc
c000fe8b:	50                   	push   eax
c000fe8c:	e8 43 05 00 00       	call   c00103d4 <Device::~Device()>
c000fe91:	83 c4 10             	add    esp,0x10
c000fe94:	90                   	nop
c000fe95:	83 c4 0c             	add    esp,0xc
c000fe98:	c3                   	ret    
c000fe99:	90                   	nop

c000fe9a <Buzzer::~Buzzer()>:
c000fe9a:	83 ec 0c             	sub    esp,0xc
c000fe9d:	83 ec 0c             	sub    esp,0xc
c000fea0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fea4:	e8 cd ff ff ff       	call   c000fe76 <Buzzer::~Buzzer()>
c000fea9:	83 c4 10             	add    esp,0x10
c000feac:	83 ec 08             	sub    esp,0x8
c000feaf:	68 5c 01 00 00       	push   0x15c
c000feb4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000feb8:	e8 8a f1 ff ff       	call   c000f047 <operator delete(void*, unsigned long)>
c000febd:	83 c4 10             	add    esp,0x10
c000fec0:	83 c4 0c             	add    esp,0xc
c000fec3:	c3                   	ret    

c000fec4 <Buzzer::stop()>:
c000fec4:	83 ec 14             	sub    esp,0x14
c000fec7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000fecb:	8b 10                	mov    edx,DWORD PTR [eax]
c000fecd:	6a 00                	push   0x0
c000fecf:	50                   	push   eax
c000fed0:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000fed3:	83 c4 1c             	add    esp,0x1c
c000fed6:	c3                   	ret    

c000fed7 <beepThread(void*)>:
c000fed7:	53                   	push   ebx
c000fed8:	83 ec 08             	sub    esp,0x8
c000fedb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fedf:	e8 62 89 00 00       	call   c0018846 <unlockScheduler()>
c000fee4:	b8 40 42 0f 00       	mov    eax,0xf4240
c000fee9:	52                   	push   edx
c000feea:	52                   	push   edx
c000feeb:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c000fef1:	52                   	push   edx
c000fef2:	50                   	push   eax
c000fef3:	e8 94 8e 00 00       	call   c0018d8c <nanoSleep(unsigned long long)>
c000fef8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fefb:	e8 c4 ff ff ff       	call   c000fec4 <Buzzer::stop()>
c000ff00:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000ff08:	83 c4 18             	add    esp,0x18
c000ff0b:	5b                   	pop    ebx
c000ff0c:	e9 c1 8d 00 00       	jmp    c0018cd2 <blockTask(TaskState)>
c000ff11:	90                   	nop

c000ff12 <Buzzer::beep(int, int, bool)>:
c000ff12:	57                   	push   edi
c000ff13:	56                   	push   esi
c000ff14:	53                   	push   ebx
c000ff15:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ff19:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ff1d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ff21:	52                   	push   edx
c000ff22:	52                   	push   edx
c000ff23:	8b 06                	mov    eax,DWORD PTR [esi]
c000ff25:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ff29:	56                   	push   esi
c000ff2a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ff2d:	83 c4 10             	add    esp,0x10
c000ff30:	89 f8                	mov    eax,edi
c000ff32:	84 c0                	test   al,al
c000ff34:	74 1f                	je     c000ff55 <Buzzer::beep(int, int, bool)+0x43>
c000ff36:	50                   	push   eax
c000ff37:	50                   	push   eax
c000ff38:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c000ff3e:	99                   	cdq    
c000ff3f:	52                   	push   edx
c000ff40:	50                   	push   eax
c000ff41:	e8 46 8e 00 00       	call   c0018d8c <nanoSleep(unsigned long long)>
c000ff46:	83 c4 10             	add    esp,0x10
c000ff49:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000ff4d:	5b                   	pop    ebx
c000ff4e:	5e                   	pop    esi
c000ff4f:	5f                   	pop    edi
c000ff50:	e9 6f ff ff ff       	jmp    c000fec4 <Buzzer::stop()>
c000ff55:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c000ff5b:	a1 d4 57 02 c0       	mov    eax,ds:0xc00257d4
c000ff60:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c000ff68:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c000ff6c:	c7 44 24 14 d7 fe 00 c0 	mov    DWORD PTR [esp+0x14],0xc000fed7
c000ff74:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ff78:	5b                   	pop    ebx
c000ff79:	5e                   	pop    esi
c000ff7a:	5f                   	pop    edi
c000ff7b:	e9 ee 89 00 00       	jmp    c001896e <Process::createThread(void (*)(void*), void*, int)>

c000ff80 <loadClockSettings()>:
c000ff80:	c7 05 f4 44 02 c0 0a 00 00 00 	mov    DWORD PTR ds:0xc00244f4,0xa
c000ff8a:	c6 05 f1 44 02 c0 00 	mov    BYTE PTR ds:0xc00244f1,0x0
c000ff91:	c6 05 f0 44 02 c0 01 	mov    BYTE PTR ds:0xc00244f0,0x1
c000ff98:	c3                   	ret    
c000ff99:	90                   	nop

c000ff9a <Clock::Clock(char const*)>:
c000ff9a:	83 ec 0c             	sub    esp,0xc
c000ff9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffa1:	83 ec 08             	sub    esp,0x8
c000ffa4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ffa8:	50                   	push   eax
c000ffa9:	e8 74 07 00 00       	call   c0010722 <Device::Device(char const*)>
c000ffae:	83 c4 10             	add    esp,0x10
c000ffb1:	ba 28 18 02 c0       	mov    edx,0xc0021828
c000ffb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffba:	89 10                	mov    DWORD PTR [eax],edx
c000ffbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffc0:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000ffca:	90                   	nop
c000ffcb:	83 c4 0c             	add    esp,0xc
c000ffce:	c3                   	ret    
c000ffcf:	90                   	nop

c000ffd0 <Clock::~Clock()>:
c000ffd0:	83 ec 0c             	sub    esp,0xc
c000ffd3:	ba 28 18 02 c0       	mov    edx,0xc0021828
c000ffd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffdc:	89 10                	mov    DWORD PTR [eax],edx
c000ffde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffe2:	83 ec 0c             	sub    esp,0xc
c000ffe5:	50                   	push   eax
c000ffe6:	e8 e9 03 00 00       	call   c00103d4 <Device::~Device()>
c000ffeb:	83 c4 10             	add    esp,0x10
c000ffee:	90                   	nop
c000ffef:	83 c4 0c             	add    esp,0xc
c000fff2:	c3                   	ret    
c000fff3:	90                   	nop

c000fff4 <Clock::~Clock()>:
c000fff4:	83 ec 0c             	sub    esp,0xc
c000fff7:	83 ec 0c             	sub    esp,0xc
c000fffa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fffe:	e8 cd ff ff ff       	call   c000ffd0 <Clock::~Clock()>
c0010003:	83 c4 10             	add    esp,0x10
c0010006:	83 ec 08             	sub    esp,0x8
c0010009:	68 58 01 00 00       	push   0x158
c001000e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010012:	e8 30 f0 ff ff       	call   c000f047 <operator delete(void*, unsigned long)>
c0010017:	83 c4 10             	add    esp,0x10
c001001a:	83 c4 0c             	add    esp,0xc
c001001d:	c3                   	ret    

c001001e <Clock::timeInSecondsLocal()>:
c001001e:	53                   	push   ebx
c001001f:	83 ec 14             	sub    esp,0x14
c0010022:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010026:	8b 10                	mov    edx,DWORD PTR [eax]
c0010028:	50                   	push   eax
c0010029:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001002c:	0f b6 0d f0 44 02 c0 	movzx  ecx,BYTE PTR ds:0xc00244f0
c0010033:	03 0d f4 44 02 c0    	add    ecx,DWORD PTR ds:0xc00244f4
c0010039:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c001003f:	89 cb                	mov    ebx,ecx
c0010041:	c1 fb 1f             	sar    ebx,0x1f
c0010044:	01 c8                	add    eax,ecx
c0010046:	11 da                	adc    edx,ebx
c0010048:	83 c4 10             	add    esp,0x10
c001004b:	31 c9                	xor    ecx,ecx
c001004d:	80 3d f1 44 02 c0 00 	cmp    BYTE PTR ds:0xc00244f1,0x0
c0010054:	74 05                	je     c001005b <Clock::timeInSecondsLocal()+0x3d>
c0010056:	b9 08 07 00 00       	mov    ecx,0x708
c001005b:	31 db                	xor    ebx,ebx
c001005d:	01 c8                	add    eax,ecx
c001005f:	11 da                	adc    edx,ebx
c0010061:	83 c4 08             	add    esp,0x8
c0010064:	5b                   	pop    ebx
c0010065:	c3                   	ret    

c0010066 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0010066:	57                   	push   edi
c0010067:	56                   	push   esi
c0010068:	53                   	push   ebx
c0010069:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001006d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010071:	8b 01                	mov    eax,DWORD PTR [ecx]
c0010073:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0010077:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c001007a:	0f b6 05 f0 44 02 c0 	movzx  eax,BYTE PTR ds:0xc00244f0
c0010081:	03 05 f4 44 02 c0    	add    eax,DWORD PTR ds:0xc00244f4
c0010087:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c001008d:	99                   	cdq    
c001008e:	29 c6                	sub    esi,eax
c0010090:	19 d7                	sbb    edi,edx
c0010092:	89 f0                	mov    eax,esi
c0010094:	89 fa                	mov    edx,edi
c0010096:	31 f6                	xor    esi,esi
c0010098:	80 3d f1 44 02 c0 00 	cmp    BYTE PTR ds:0xc00244f1,0x0
c001009f:	74 05                	je     c00100a6 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c00100a1:	be 08 07 00 00       	mov    esi,0x708
c00100a6:	31 ff                	xor    edi,edi
c00100a8:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00100ac:	29 f0                	sub    eax,esi
c00100ae:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00100b2:	19 fa                	sbb    edx,edi
c00100b4:	89 d8                	mov    eax,ebx
c00100b6:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00100ba:	5b                   	pop    ebx
c00100bb:	5e                   	pop    esi
c00100bc:	5f                   	pop    edi
c00100bd:	ff e0                	jmp    eax

c00100bf <datetimeToSeconds(datetime_t)>:
c00100bf:	55                   	push   ebp
c00100c0:	57                   	push   edi
c00100c1:	56                   	push   esi
c00100c2:	53                   	push   ebx
c00100c3:	83 ec 14             	sub    esp,0x14
c00100c6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00100ca:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00100ce:	89 d3                	mov    ebx,edx
c00100d0:	0f b6 c6             	movzx  eax,dh
c00100d3:	c1 eb 10             	shr    ebx,0x10
c00100d6:	48                   	dec    eax
c00100d7:	66 81 eb 6c 07       	sub    bx,0x76c
c00100dc:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00100e0:	0f b6 f5             	movzx  esi,ch
c00100e3:	89 cf                	mov    edi,ecx
c00100e5:	6b f6 3c             	imul   esi,esi,0x3c
c00100e8:	c1 ef 10             	shr    edi,0x10
c00100eb:	0f b6 c9             	movzx  ecx,cl
c00100ee:	89 f8                	mov    eax,edi
c00100f0:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c00100f6:	0f b6 f8             	movzx  edi,al
c00100f9:	0f b6 d2             	movzx  edx,dl
c00100fc:	01 fe                	add    esi,edi
c00100fe:	01 f1                	add    ecx,esi
c0010100:	0f b7 f3             	movzx  esi,bx
c0010103:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0010107:	c1 f9 1f             	sar    ecx,0x1f
c001010a:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c001010f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0010113:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c0010118:	8b 0c 8d 60 18 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffde7a0]
c001011f:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c0010123:	76 29                	jbe    c001014e <datetimeToSeconds(datetime_t)+0x8f>
c0010125:	f6 c3 03             	test   bl,0x3
c0010128:	75 24                	jne    c001014e <datetimeToSeconds(datetime_t)+0x8f>
c001012a:	31 d2                	xor    edx,edx
c001012c:	bf 64 00 00 00       	mov    edi,0x64
c0010131:	89 d8                	mov    eax,ebx
c0010133:	66 f7 f7             	div    di
c0010136:	66 85 d2             	test   dx,dx
c0010139:	75 12                	jne    c001014d <datetimeToSeconds(datetime_t)+0x8e>
c001013b:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0010141:	bf 90 01 00 00       	mov    edi,0x190
c0010146:	99                   	cdq    
c0010147:	f7 ff                	idiv   edi
c0010149:	85 d2                	test   edx,edx
c001014b:	75 01                	jne    c001014e <datetimeToSeconds(datetime_t)+0x8f>
c001014d:	41                   	inc    ecx
c001014e:	66 83 fb 46          	cmp    bx,0x46
c0010152:	76 45                	jbe    c0010199 <datetimeToSeconds(datetime_t)+0xda>
c0010154:	bb 46 00 00 00       	mov    ebx,0x46
c0010159:	bf 64 00 00 00       	mov    edi,0x64
c001015e:	bd 90 01 00 00       	mov    ebp,0x190
c0010163:	b8 6d 01 00 00       	mov    eax,0x16d
c0010168:	f6 c3 03             	test   bl,0x3
c001016b:	75 23                	jne    c0010190 <datetimeToSeconds(datetime_t)+0xd1>
c001016d:	89 d8                	mov    eax,ebx
c001016f:	99                   	cdq    
c0010170:	f7 ff                	idiv   edi
c0010172:	b8 6e 01 00 00       	mov    eax,0x16e
c0010177:	85 d2                	test   edx,edx
c0010179:	75 15                	jne    c0010190 <datetimeToSeconds(datetime_t)+0xd1>
c001017b:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c0010181:	99                   	cdq    
c0010182:	f7 fd                	idiv   ebp
c0010184:	83 fa 01             	cmp    edx,0x1
c0010187:	19 c0                	sbb    eax,eax
c0010189:	f7 d0                	not    eax
c001018b:	05 6e 01 00 00       	add    eax,0x16e
c0010190:	01 c1                	add    ecx,eax
c0010192:	43                   	inc    ebx
c0010193:	39 f3                	cmp    ebx,esi
c0010195:	7c cc                	jl     c0010163 <datetimeToSeconds(datetime_t)+0xa4>
c0010197:	eb 35                	jmp    c00101ce <datetimeToSeconds(datetime_t)+0x10f>
c0010199:	74 33                	je     c00101ce <datetimeToSeconds(datetime_t)+0x10f>
c001019b:	b8 45 00 00 00       	mov    eax,0x45
c00101a0:	89 c2                	mov    edx,eax
c00101a2:	83 e2 03             	and    edx,0x3
c00101a5:	39 f0                	cmp    eax,esi
c00101a7:	7e 0f                	jle    c00101b8 <datetimeToSeconds(datetime_t)+0xf9>
c00101a9:	83 fa 01             	cmp    edx,0x1
c00101ac:	19 d2                	sbb    edx,edx
c00101ae:	48                   	dec    eax
c00101af:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c00101b6:	eb e8                	jmp    c00101a0 <datetimeToSeconds(datetime_t)+0xe1>
c00101b8:	b8 6d 01 00 00       	mov    eax,0x16d
c00101bd:	85 d2                	test   edx,edx
c00101bf:	75 0b                	jne    c00101cc <datetimeToSeconds(datetime_t)+0x10d>
c00101c1:	66 83 fb 01          	cmp    bx,0x1
c00101c5:	19 c0                	sbb    eax,eax
c00101c7:	05 6e 01 00 00       	add    eax,0x16e
c00101cc:	29 c1                	sub    ecx,eax
c00101ce:	b8 80 51 01 00       	mov    eax,0x15180
c00101d3:	f7 e9                	imul   ecx
c00101d5:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00101d9:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00101dd:	83 c4 14             	add    esp,0x14
c00101e0:	5b                   	pop    ebx
c00101e1:	5e                   	pop    esi
c00101e2:	5f                   	pop    edi
c00101e3:	5d                   	pop    ebp
c00101e4:	c3                   	ret    
c00101e5:	90                   	nop

c00101e6 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c00101e6:	57                   	push   edi
c00101e7:	56                   	push   esi
c00101e8:	53                   	push   ebx
c00101e9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00101ed:	8b 06                	mov    eax,DWORD PTR [esi]
c00101ef:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c00101f2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00101f6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00101fa:	e8 c0 fe ff ff       	call   c00100bf <datetimeToSeconds(datetime_t)>
c00101ff:	59                   	pop    ecx
c0010200:	0f b6 0d f0 44 02 c0 	movzx  ecx,BYTE PTR ds:0xc00244f0
c0010207:	5b                   	pop    ebx
c0010208:	03 0d f4 44 02 c0    	add    ecx,DWORD PTR ds:0xc00244f4
c001020e:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0010214:	89 cb                	mov    ebx,ecx
c0010216:	c1 fb 1f             	sar    ebx,0x1f
c0010219:	29 c8                	sub    eax,ecx
c001021b:	19 da                	sbb    edx,ebx
c001021d:	31 c9                	xor    ecx,ecx
c001021f:	80 3d f1 44 02 c0 00 	cmp    BYTE PTR ds:0xc00244f1,0x0
c0010226:	74 05                	je     c001022d <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c0010228:	b9 08 07 00 00       	mov    ecx,0x708
c001022d:	31 db                	xor    ebx,ebx
c001022f:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0010233:	29 c8                	sub    eax,ecx
c0010235:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0010239:	19 da                	sbb    edx,ebx
c001023b:	89 f8                	mov    eax,edi
c001023d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0010241:	5b                   	pop    ebx
c0010242:	5e                   	pop    esi
c0010243:	5f                   	pop    edi
c0010244:	ff e0                	jmp    eax

c0010246 <secondsToDatetime(unsigned long long)>:
c0010246:	55                   	push   ebp
c0010247:	57                   	push   edi
c0010248:	56                   	push   esi
c0010249:	53                   	push   ebx
c001024a:	83 ec 1c             	sub    esp,0x1c
c001024d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010251:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0010255:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0010259:	6a 00                	push   0x0
c001025b:	68 80 51 01 00       	push   0x15180
c0010260:	55                   	push   ebp
c0010261:	57                   	push   edi
c0010262:	e8 65 ef 00 00       	call   c001f1cc <__udivdi3>
c0010267:	83 c4 10             	add    esp,0x10
c001026a:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c0010270:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010274:	6a 00                	push   0x0
c0010276:	68 80 51 01 00       	push   0x15180
c001027b:	55                   	push   ebp
c001027c:	57                   	push   edi
c001027d:	bf 10 0e 00 00       	mov    edi,0xe10
c0010282:	e8 45 f0 00 00       	call   c001f2cc <__umoddi3>
c0010287:	83 c4 10             	add    esp,0x10
c001028a:	99                   	cdq    
c001028b:	f7 ff                	idiv   edi
c001028d:	bf 3c 00 00 00       	mov    edi,0x3c
c0010292:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0010295:	89 d0                	mov    eax,edx
c0010297:	99                   	cdq    
c0010298:	f7 ff                	idiv   edi
c001029a:	85 db                	test   ebx,ebx
c001029c:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c001029f:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c00102a2:	79 11                	jns    c00102b5 <secondsToDatetime(unsigned long long)+0x6f>
c00102a4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00102a8:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c00102ae:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c00102b3:	eb 07                	jmp    c00102bc <secondsToDatetime(unsigned long long)+0x76>
c00102b5:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c00102ba:	89 d8                	mov    eax,ebx
c00102bc:	bf b4 05 00 00       	mov    edi,0x5b4
c00102c1:	99                   	cdq    
c00102c2:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c00102c7:	f7 f9                	idiv   ecx
c00102c9:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c00102ce:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00102d2:	31 d2                	xor    edx,edx
c00102d4:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c00102dc:	01 c3                	add    ebx,eax
c00102de:	89 d8                	mov    eax,ebx
c00102e0:	f7 f1                	div    ecx
c00102e2:	31 d2                	xor    edx,edx
c00102e4:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c00102e7:	89 d8                	mov    eax,ebx
c00102e9:	f7 f7                	div    edi
c00102eb:	31 d2                	xor    edx,edx
c00102ed:	29 c1                	sub    ecx,eax
c00102ef:	89 d8                	mov    eax,ebx
c00102f1:	f7 f5                	div    ebp
c00102f3:	bd 6d 01 00 00       	mov    ebp,0x16d
c00102f8:	29 c1                	sub    ecx,eax
c00102fa:	31 d2                	xor    edx,edx
c00102fc:	89 c8                	mov    eax,ecx
c00102fe:	f7 f5                	div    ebp
c0010300:	bd 94 8e 00 00       	mov    ebp,0x8e94
c0010305:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010309:	31 d2                	xor    edx,edx
c001030b:	89 c8                	mov    eax,ecx
c001030d:	f7 f5                	div    ebp
c001030f:	31 d2                	xor    edx,edx
c0010311:	01 c3                	add    ebx,eax
c0010313:	89 c8                	mov    eax,ecx
c0010315:	f7 f7                	div    edi
c0010317:	bf 99 00 00 00       	mov    edi,0x99
c001031c:	29 c3                	sub    ebx,eax
c001031e:	31 d2                	xor    edx,edx
c0010320:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c0010328:	29 c3                	sub    ebx,eax
c001032a:	8d 6b 01             	lea    ebp,[ebx+0x1]
c001032d:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c0010330:	bb 05 00 00 00       	mov    ebx,0x5
c0010335:	83 c1 02             	add    ecx,0x2
c0010338:	89 c8                	mov    eax,ecx
c001033a:	f7 f7                	div    edi
c001033c:	31 d2                	xor    edx,edx
c001033e:	89 c7                	mov    edi,eax
c0010340:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c0010346:	83 c0 02             	add    eax,0x2
c0010349:	f7 f3                	div    ebx
c001034b:	89 eb                	mov    ebx,ebp
c001034d:	29 c3                	sub    ebx,eax
c001034f:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c0010355:	88 1e                	mov    BYTE PTR [esi],bl
c0010357:	19 c0                	sbb    eax,eax
c0010359:	31 d2                	xor    edx,edx
c001035b:	83 e0 0c             	and    eax,0xc
c001035e:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c0010362:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c001036a:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001036e:	83 f9 01             	cmp    ecx,0x1
c0010371:	0f 96 c2             	setbe  dl
c0010374:	41                   	inc    ecx
c0010375:	01 d0                	add    eax,edx
c0010377:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c001037a:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c001037e:	83 c4 1c             	add    esp,0x1c
c0010381:	89 f0                	mov    eax,esi
c0010383:	5b                   	pop    ebx
c0010384:	5e                   	pop    esi
c0010385:	5f                   	pop    edi
c0010386:	5d                   	pop    ebp
c0010387:	c2 04 00             	ret    0x4

c001038a <Clock::timeInDatetimeLocal()>:
c001038a:	53                   	push   ebx
c001038b:	83 ec 14             	sub    esp,0x14
c001038e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0010392:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010396:	e8 83 fc ff ff       	call   c001001e <Clock::timeInSecondsLocal()>
c001039b:	83 c4 0c             	add    esp,0xc
c001039e:	52                   	push   edx
c001039f:	50                   	push   eax
c00103a0:	53                   	push   ebx
c00103a1:	e8 a0 fe ff ff       	call   c0010246 <secondsToDatetime(unsigned long long)>
c00103a6:	89 d8                	mov    eax,ebx
c00103a8:	83 c4 14             	add    esp,0x14
c00103ab:	5b                   	pop    ebx
c00103ac:	c2 04 00             	ret    0x4
c00103af:	90                   	nop

c00103b0 <Device::hibernate()>:
c00103b0:	c3                   	ret    
c00103b1:	90                   	nop

c00103b2 <Device::wake()>:
c00103b2:	c3                   	ret    
c00103b3:	90                   	nop

c00103b4 <Device::detect()>:
c00103b4:	c3                   	ret    
c00103b5:	90                   	nop

c00103b6 <Device::disableLegacy()>:
c00103b6:	c3                   	ret    
c00103b7:	90                   	nop

c00103b8 <Device::powerSaving(PowerSavingLevel)>:
c00103b8:	c3                   	ret    
c00103b9:	90                   	nop

c00103ba <DriverlessDevice::close(int, int, void*)>:
c00103ba:	31 c0                	xor    eax,eax
c00103bc:	c3                   	ret    
c00103bd:	90                   	nop

c00103be <DriverlessDevice::detect()>:
c00103be:	c3                   	ret    
c00103bf:	90                   	nop

c00103c0 <DriverlessDevice::open(int, int, void*)>:
c00103c0:	83 ec 18             	sub    esp,0x18
c00103c3:	68 90 18 02 c0       	push   0xc0021890
c00103c8:	e8 23 55 00 00       	call   c00158f0 <Krnl::panic(char const*)>
c00103cd:	83 c8 ff             	or     eax,0xffffffff
c00103d0:	83 c4 1c             	add    esp,0x1c
c00103d3:	c3                   	ret    

c00103d4 <Device::~Device()>:
c00103d4:	ba b8 18 02 c0       	mov    edx,0xc00218b8
c00103d9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00103dd:	89 10                	mov    DWORD PTR [eax],edx
c00103df:	90                   	nop
c00103e0:	c3                   	ret    
c00103e1:	90                   	nop

c00103e2 <Device::~Device()>:
c00103e2:	83 ec 0c             	sub    esp,0xc
c00103e5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00103e9:	e8 e6 ff ff ff       	call   c00103d4 <Device::~Device()>
c00103ee:	83 c4 04             	add    esp,0x4
c00103f1:	83 ec 08             	sub    esp,0x8
c00103f4:	68 58 01 00 00       	push   0x158
c00103f9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00103fd:	e8 45 ec ff ff       	call   c000f047 <operator delete(void*, unsigned long)>
c0010402:	83 c4 10             	add    esp,0x10
c0010405:	83 c4 0c             	add    esp,0xc
c0010408:	c3                   	ret    
c0010409:	90                   	nop

c001040a <Device::findAndLoadDriver()>:
c001040a:	c3                   	ret    
c001040b:	90                   	nop

c001040c <Device::preOpenPCI(PCIDeviceInfo)>:
c001040c:	57                   	push   edi
c001040d:	b9 09 00 00 00       	mov    ecx,0x9
c0010412:	56                   	push   esi
c0010413:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0010417:	8d 74 24 10          	lea    esi,[esp+0x10]
c001041b:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c0010425:	81 c7 18 01 00 00    	add    edi,0x118
c001042b:	fc                   	cld    
c001042c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001042e:	5e                   	pop    esi
c001042f:	5f                   	pop    edi
c0010430:	c3                   	ret    
c0010431:	90                   	nop

c0010432 <Device::preOpenACPI(void*, char*, char*)>:
c0010432:	56                   	push   esi
c0010433:	53                   	push   ebx
c0010434:	83 ec 08             	sub    esp,0x8
c0010437:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001043b:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001043f:	c7 83 14 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x114],0x3
c0010449:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001044d:	89 83 18 01 00 00    	mov    DWORD PTR [ebx+0x118],eax
c0010453:	6a 1e                	push   0x1e
c0010455:	8d 83 1c 01 00 00    	lea    eax,[ebx+0x11c]
c001045b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001045f:	81 c3 3a 01 00 00    	add    ebx,0x13a
c0010465:	50                   	push   eax
c0010466:	e8 32 02 ff ff       	call   c000069d <memcpy>
c001046b:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c001046f:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010473:	c7 44 24 28 0e 00 00 00 	mov    DWORD PTR [esp+0x28],0xe
c001047b:	83 c4 14             	add    esp,0x14
c001047e:	5b                   	pop    ebx
c001047f:	5e                   	pop    esi
c0010480:	e9 18 02 ff ff       	jmp    c000069d <memcpy>
c0010485:	90                   	nop

c0010486 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0010486:	55                   	push   ebp
c0010487:	57                   	push   edi
c0010488:	56                   	push   esi
c0010489:	53                   	push   ebx
c001048a:	83 ec 0c             	sub    esp,0xc
c001048d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010491:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0010495:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0010499:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001049d:	0f b6 5c 24 2c       	movzx  ebx,BYTE PTR [esp+0x2c]
c00104a2:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c00104a9:	75 0b                	jne    c00104b6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x30>
c00104ab:	8b 00                	mov    eax,DWORD PTR [eax]
c00104ad:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c00104b1:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00104b4:	eb 24                	jmp    c00104da <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x54>
c00104b6:	e8 b5 42 00 00       	call   c0014770 <thisCPU()>
c00104bb:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00104c1:	8b 10                	mov    edx,DWORD PTR [eax]
c00104c3:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c00104c7:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c00104cb:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c00104cf:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c00104d3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00104d7:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c00104da:	83 c4 0c             	add    esp,0xc
c00104dd:	5b                   	pop    ebx
c00104de:	5e                   	pop    esi
c00104df:	5f                   	pop    edi
c00104e0:	5d                   	pop    ebp
c00104e1:	ff e0                	jmp    eax
c00104e3:	90                   	nop

c00104e4 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c00104e4:	57                   	push   edi
c00104e5:	56                   	push   esi
c00104e6:	53                   	push   ebx
c00104e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104eb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00104ef:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00104f3:	0f b6 5c 24 1c       	movzx  ebx,BYTE PTR [esp+0x1c]
c00104f8:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c00104ff:	75 0b                	jne    c001050c <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x28>
c0010501:	8b 00                	mov    eax,DWORD PTR [eax]
c0010503:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c0010507:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c001050a:	eb 20                	jmp    c001052c <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x48>
c001050c:	e8 5f 42 00 00       	call   c0014770 <thisCPU()>
c0010511:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0010517:	8b 10                	mov    edx,DWORD PTR [eax]
c0010519:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c001051d:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0010521:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0010525:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010529:	8b 42 30             	mov    eax,DWORD PTR [edx+0x30]
c001052c:	5b                   	pop    ebx
c001052d:	5e                   	pop    esi
c001052e:	5f                   	pop    edi
c001052f:	ff e0                	jmp    eax
c0010531:	90                   	nop

c0010532 <Device::addChild(Device*)>:
c0010532:	53                   	push   ebx
c0010533:	83 ec 08             	sub    esp,0x8
c0010536:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001053a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001053e:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0010544:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c001054a:	8b 13                	mov    edx,DWORD PTR [ebx]
c001054c:	85 d2                	test   edx,edx
c001054e:	74 04                	je     c0010554 <Device::addChild(Device*)+0x22>
c0010550:	89 d3                	mov    ebx,edx
c0010552:	eb f6                	jmp    c001054a <Device::addChild(Device*)+0x18>
c0010554:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0010557:	83 ec 0c             	sub    esp,0xc
c001055a:	6a 08                	push   0x8
c001055c:	e8 d7 ea ff ff       	call   c000f038 <operator new(unsigned long)>
c0010561:	89 03                	mov    DWORD PTR [ebx],eax
c0010563:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010569:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010570:	83 c4 18             	add    esp,0x18
c0010573:	5b                   	pop    ebx
c0010574:	c3                   	ret    
c0010575:	90                   	nop

c0010576 <Device::removeAllChildren()>:
c0010576:	56                   	push   esi
c0010577:	53                   	push   ebx
c0010578:	52                   	push   edx
c0010579:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001057d:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0010583:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0010586:	74 17                	je     c001059f <Device::removeAllChildren()+0x29>
c0010588:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001058b:	85 c0                	test   eax,eax
c001058d:	74 0c                	je     c001059b <Device::removeAllChildren()+0x25>
c001058f:	83 ec 0c             	sub    esp,0xc
c0010592:	8b 10                	mov    edx,DWORD PTR [eax]
c0010594:	50                   	push   eax
c0010595:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0010598:	83 c4 10             	add    esp,0x10
c001059b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001059d:	eb e4                	jmp    c0010583 <Device::removeAllChildren()+0xd>
c001059f:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00105a5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00105ab:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00105b1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00105b8:	58                   	pop    eax
c00105b9:	5b                   	pop    ebx
c00105ba:	5e                   	pop    esi
c00105bb:	c3                   	ret    

c00105bc <Device::hibernateAll()>:
c00105bc:	53                   	push   ebx
c00105bd:	83 ec 14             	sub    esp,0x14
c00105c0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00105c4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00105c6:	53                   	push   ebx
c00105c7:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00105ca:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00105d0:	83 c4 10             	add    esp,0x10
c00105d3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00105d6:	74 0f                	je     c00105e7 <Device::hibernateAll()+0x2b>
c00105d8:	83 ec 0c             	sub    esp,0xc
c00105db:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00105de:	e8 d9 ff ff ff       	call   c00105bc <Device::hibernateAll()>
c00105e3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00105e5:	eb e9                	jmp    c00105d0 <Device::hibernateAll()+0x14>
c00105e7:	83 c4 08             	add    esp,0x8
c00105ea:	5b                   	pop    ebx
c00105eb:	c3                   	ret    

c00105ec <Device::wakeAll()>:
c00105ec:	53                   	push   ebx
c00105ed:	83 ec 14             	sub    esp,0x14
c00105f0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00105f4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00105f6:	53                   	push   ebx
c00105f7:	ff 50 14             	call   DWORD PTR [eax+0x14]
c00105fa:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0010600:	83 c4 10             	add    esp,0x10
c0010603:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0010606:	74 0f                	je     c0010617 <Device::wakeAll()+0x2b>
c0010608:	83 ec 0c             	sub    esp,0xc
c001060b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001060e:	e8 d9 ff ff ff       	call   c00105ec <Device::wakeAll()>
c0010613:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0010615:	eb e9                	jmp    c0010600 <Device::wakeAll()+0x14>
c0010617:	83 c4 08             	add    esp,0x8
c001061a:	5b                   	pop    ebx
c001061b:	c3                   	ret    

c001061c <Device::detectAll()>:
c001061c:	53                   	push   ebx
c001061d:	83 ec 14             	sub    esp,0x14
c0010620:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0010624:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010626:	53                   	push   ebx
c0010627:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001062a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0010630:	83 c4 10             	add    esp,0x10
c0010633:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0010636:	74 0f                	je     c0010647 <Device::detectAll()+0x2b>
c0010638:	83 ec 0c             	sub    esp,0xc
c001063b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001063e:	e8 d9 ff ff ff       	call   c001061c <Device::detectAll()>
c0010643:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0010645:	eb e9                	jmp    c0010630 <Device::detectAll()+0x14>
c0010647:	83 c4 08             	add    esp,0x8
c001064a:	5b                   	pop    ebx
c001064b:	c3                   	ret    

c001064c <Device::disableLegacyAll()>:
c001064c:	53                   	push   ebx
c001064d:	83 ec 14             	sub    esp,0x14
c0010650:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0010654:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010656:	53                   	push   ebx
c0010657:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c001065a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0010660:	83 c4 10             	add    esp,0x10
c0010663:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0010666:	74 0f                	je     c0010677 <Device::disableLegacyAll()+0x2b>
c0010668:	83 ec 0c             	sub    esp,0xc
c001066b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001066e:	e8 d9 ff ff ff       	call   c001064c <Device::disableLegacyAll()>
c0010673:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0010675:	eb e9                	jmp    c0010660 <Device::disableLegacyAll()+0x14>
c0010677:	83 c4 08             	add    esp,0x8
c001067a:	5b                   	pop    ebx
c001067b:	c3                   	ret    

c001067c <Device::loadDriversForAll()>:
c001067c:	53                   	push   ebx
c001067d:	83 ec 08             	sub    esp,0x8
c0010680:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010684:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c001068a:	8b 18                	mov    ebx,DWORD PTR [eax]
c001068c:	85 db                	test   ebx,ebx
c001068e:	74 12                	je     c00106a2 <Device::loadDriversForAll()+0x26>
c0010690:	83 ec 0c             	sub    esp,0xc
c0010693:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0010696:	e8 e1 ff ff ff       	call   c001067c <Device::loadDriversForAll()>
c001069b:	83 c4 10             	add    esp,0x10
c001069e:	89 d8                	mov    eax,ebx
c00106a0:	eb e8                	jmp    c001068a <Device::loadDriversForAll()+0xe>
c00106a2:	83 c4 08             	add    esp,0x8
c00106a5:	5b                   	pop    ebx
c00106a6:	c3                   	ret    
c00106a7:	90                   	nop

c00106a8 <Device::closeAll()>:
c00106a8:	53                   	push   ebx
c00106a9:	83 ec 08             	sub    esp,0x8
c00106ac:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00106b0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00106b2:	6a 00                	push   0x0
c00106b4:	6a 00                	push   0x0
c00106b6:	6a 00                	push   0x0
c00106b8:	53                   	push   ebx
c00106b9:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00106bc:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00106c2:	83 c4 10             	add    esp,0x10
c00106c5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00106c8:	74 0f                	je     c00106d9 <Device::closeAll()+0x31>
c00106ca:	83 ec 0c             	sub    esp,0xc
c00106cd:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00106d0:	e8 d3 ff ff ff       	call   c00106a8 <Device::closeAll()>
c00106d5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00106d7:	eb e9                	jmp    c00106c2 <Device::closeAll()+0x1a>
c00106d9:	83 c4 08             	add    esp,0x8
c00106dc:	5b                   	pop    ebx
c00106dd:	c3                   	ret    

c00106de <Device::powerSavingAll(PowerSavingLevel)>:
c00106de:	56                   	push   esi
c00106df:	53                   	push   ebx
c00106e0:	83 ec 0c             	sub    esp,0xc
c00106e3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00106e7:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00106eb:	8b 03                	mov    eax,DWORD PTR [ebx]
c00106ed:	56                   	push   esi
c00106ee:	53                   	push   ebx
c00106ef:	ff 50 20             	call   DWORD PTR [eax+0x20]
c00106f2:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00106f8:	83 c4 10             	add    esp,0x10
c00106fb:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00106fe:	74 0f                	je     c001070f <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0010700:	52                   	push   edx
c0010701:	52                   	push   edx
c0010702:	56                   	push   esi
c0010703:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0010706:	e8 d3 ff ff ff       	call   c00106de <Device::powerSavingAll(PowerSavingLevel)>
c001070b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001070d:	eb e9                	jmp    c00106f8 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c001070f:	58                   	pop    eax
c0010710:	5b                   	pop    ebx
c0010711:	5e                   	pop    esi
c0010712:	c3                   	ret    
c0010713:	90                   	nop

c0010714 <Device::setName(char const*)>:
c0010714:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c001071c:	e9 51 00 ff ff       	jmp    c0000772 <strcpy>
c0010721:	90                   	nop

c0010722 <Device::Device(char const*)>:
c0010722:	83 ec 0c             	sub    esp,0xc
c0010725:	ba b8 18 02 c0       	mov    edx,0xc00218b8
c001072a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001072e:	89 10                	mov    DWORD PTR [eax],edx
c0010730:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010734:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c001073e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010742:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c001074c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010750:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001075a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001075e:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0010768:	83 ec 08             	sub    esp,0x8
c001076b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001076f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010773:	e8 9c ff ff ff       	call   c0010714 <Device::setName(char const*)>
c0010778:	83 c4 10             	add    esp,0x10
c001077b:	83 ec 0c             	sub    esp,0xc
c001077e:	6a 08                	push   0x8
c0010780:	e8 b3 e8 ff ff       	call   c000f038 <operator new(unsigned long)>
c0010785:	83 c4 10             	add    esp,0x10
c0010788:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001078e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010795:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010799:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c001079f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00107a3:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00107a9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00107af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00107b3:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00107b9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00107c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00107c4:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c00107cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00107cf:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c00107d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00107da:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00107e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00107e8:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c00107f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00107f6:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0010800:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010804:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c001080e:	90                   	nop
c001080f:	83 c4 0c             	add    esp,0xc
c0010812:	c3                   	ret    
c0010813:	90                   	nop

c0010814 <Device::getName()>:
c0010814:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010818:	05 d0 00 00 00       	add    eax,0xd0
c001081d:	c3                   	ret    

c001081e <DriverlessDevice::DriverlessDevice(char const*)>:
c001081e:	83 ec 0c             	sub    esp,0xc
c0010821:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010825:	83 ec 08             	sub    esp,0x8
c0010828:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001082c:	50                   	push   eax
c001082d:	e8 f0 fe ff ff       	call   c0010722 <Device::Device(char const*)>
c0010832:	83 c4 10             	add    esp,0x10
c0010835:	ba e4 18 02 c0       	mov    edx,0xc00218e4
c001083a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001083e:	89 10                	mov    DWORD PTR [eax],edx
c0010840:	90                   	nop
c0010841:	83 c4 0c             	add    esp,0xc
c0010844:	c3                   	ret    
c0010845:	90                   	nop

c0010846 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0010846:	57                   	push   edi
c0010847:	56                   	push   esi
c0010848:	53                   	push   ebx
c0010849:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001084d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0010851:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010855:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c001085b:	75 0c                	jne    c0010869 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c001085d:	52                   	push   edx
c001085e:	52                   	push   edx
c001085f:	53                   	push   ebx
c0010860:	56                   	push   esi
c0010861:	e8 7e ee 00 00       	call   c001f6e4 <LinkedList<Device>::addElement(Device*)>
c0010866:	83 c4 10             	add    esp,0x10
c0010869:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001086f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0010872:	74 12                	je     c0010886 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c0010874:	50                   	push   eax
c0010875:	57                   	push   edi
c0010876:	56                   	push   esi
c0010877:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001087a:	e8 c7 ff ff ff       	call   c0010846 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c001087f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0010881:	83 c4 10             	add    esp,0x10
c0010884:	eb e9                	jmp    c001086f <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c0010886:	5b                   	pop    ebx
c0010887:	5e                   	pop    esi
c0010888:	5f                   	pop    edi
c0010889:	c3                   	ret    

c001088a <getDevicesOfType(DeviceType)>:
c001088a:	53                   	push   ebx
c001088b:	83 ec 14             	sub    esp,0x14
c001088e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0010892:	53                   	push   ebx
c0010893:	e8 28 ef 00 00       	call   c001f7c0 <LinkedList<Device>::LinkedList()>
c0010898:	83 c4 0c             	add    esp,0xc
c001089b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001089f:	53                   	push   ebx
c00108a0:	ff 35 88 43 02 c0    	push   DWORD PTR ds:0xc0024388
c00108a6:	e8 9b ff ff ff       	call   c0010846 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c00108ab:	89 d8                	mov    eax,ebx
c00108ad:	83 c4 18             	add    esp,0x18
c00108b0:	5b                   	pop    ebx
c00108b1:	c2 04 00             	ret    0x4

c00108b4 <HardDiskController::HardDiskController(char const*)>:
c00108b4:	83 ec 0c             	sub    esp,0xc
c00108b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108bb:	83 ec 08             	sub    esp,0x8
c00108be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00108c2:	50                   	push   eax
c00108c3:	e8 5a fe ff ff       	call   c0010722 <Device::Device(char const*)>
c00108c8:	83 c4 10             	add    esp,0x10
c00108cb:	ba 10 19 02 c0       	mov    edx,0xc0021910
c00108d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108d4:	89 10                	mov    DWORD PTR [eax],edx
c00108d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108da:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c00108e4:	90                   	nop
c00108e5:	83 c4 0c             	add    esp,0xc
c00108e8:	c3                   	ret    
c00108e9:	90                   	nop

c00108ea <HardDiskController::~HardDiskController()>:
c00108ea:	83 ec 0c             	sub    esp,0xc
c00108ed:	ba 10 19 02 c0       	mov    edx,0xc0021910
c00108f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108f6:	89 10                	mov    DWORD PTR [eax],edx
c00108f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108fc:	83 ec 0c             	sub    esp,0xc
c00108ff:	50                   	push   eax
c0010900:	e8 cf fa ff ff       	call   c00103d4 <Device::~Device()>
c0010905:	83 c4 10             	add    esp,0x10
c0010908:	90                   	nop
c0010909:	83 c4 0c             	add    esp,0xc
c001090c:	c3                   	ret    
c001090d:	90                   	nop

c001090e <HardDiskController::~HardDiskController()>:
c001090e:	83 ec 0c             	sub    esp,0xc
c0010911:	83 ec 0c             	sub    esp,0xc
c0010914:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010918:	e8 cd ff ff ff       	call   c00108ea <HardDiskController::~HardDiskController()>
c001091d:	83 c4 10             	add    esp,0x10
c0010920:	83 ec 08             	sub    esp,0x8
c0010923:	68 58 01 00 00       	push   0x158
c0010928:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001092c:	e8 16 e7 ff ff       	call   c000f047 <operator delete(void*, unsigned long)>
c0010931:	83 c4 10             	add    esp,0x10
c0010934:	83 c4 0c             	add    esp,0xc
c0010937:	c3                   	ret    

c0010938 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0010938:	83 ec 0c             	sub    esp,0xc
c001093b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001093f:	83 ec 08             	sub    esp,0x8
c0010942:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010946:	50                   	push   eax
c0010947:	e8 d6 fd ff ff       	call   c0010722 <Device::Device(char const*)>
c001094c:	83 c4 10             	add    esp,0x10
c001094f:	ba 3c 19 02 c0       	mov    edx,0xc002193c
c0010954:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010958:	89 10                	mov    DWORD PTR [eax],edx
c001095a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001095e:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0010965:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010969:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0010970:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010974:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c001097e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010982:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010986:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001098c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010990:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001099a:	90                   	nop
c001099b:	83 c4 0c             	add    esp,0xc
c001099e:	c3                   	ret    
c001099f:	90                   	nop

c00109a0 <PhysicalDisk::startCache()>:
c00109a0:	56                   	push   esi
c00109a1:	53                   	push   ebx
c00109a2:	83 ec 10             	sub    esp,0x10
c00109a5:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00109a9:	6a 30                	push   0x30
c00109ab:	e8 88 e6 ff ff       	call   c000f038 <operator new(unsigned long)>
c00109b0:	89 c6                	mov    esi,eax
c00109b2:	58                   	pop    eax
c00109b3:	5a                   	pop    edx
c00109b4:	53                   	push   ebx
c00109b5:	56                   	push   esi
c00109b6:	e8 27 25 00 00       	call   c0012ee2 <VCache::VCache(PhysicalDisk*)>
c00109bb:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c00109c1:	83 c4 14             	add    esp,0x14
c00109c4:	5b                   	pop    ebx
c00109c5:	5e                   	pop    esi
c00109c6:	c3                   	ret    
c00109c7:	90                   	nop

c00109c8 <PhysicalDisk::~PhysicalDisk()>:
c00109c8:	83 ec 0c             	sub    esp,0xc
c00109cb:	ba 3c 19 02 c0       	mov    edx,0xc002193c
c00109d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109d4:	89 10                	mov    DWORD PTR [eax],edx
c00109d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109da:	83 ec 0c             	sub    esp,0xc
c00109dd:	50                   	push   eax
c00109de:	e8 f1 f9 ff ff       	call   c00103d4 <Device::~Device()>
c00109e3:	83 c4 10             	add    esp,0x10
c00109e6:	90                   	nop
c00109e7:	83 c4 0c             	add    esp,0xc
c00109ea:	c3                   	ret    
c00109eb:	90                   	nop

c00109ec <PhysicalDisk::~PhysicalDisk()>:
c00109ec:	83 ec 0c             	sub    esp,0xc
c00109ef:	83 ec 0c             	sub    esp,0xc
c00109f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00109f6:	e8 cd ff ff ff       	call   c00109c8 <PhysicalDisk::~PhysicalDisk()>
c00109fb:	83 c4 10             	add    esp,0x10
c00109fe:	83 ec 08             	sub    esp,0x8
c0010a01:	68 6c 01 00 00       	push   0x16c
c0010a06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a0a:	e8 38 e6 ff ff       	call   c000f047 <operator delete(void*, unsigned long)>
c0010a0f:	83 c4 10             	add    esp,0x10
c0010a12:	83 c4 0c             	add    esp,0xc
c0010a15:	c3                   	ret    

c0010a16 <FPU::FPU(char const*)>:
c0010a16:	83 ec 0c             	sub    esp,0xc
c0010a19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a1d:	83 ec 08             	sub    esp,0x8
c0010a20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a24:	50                   	push   eax
c0010a25:	e8 f8 fc ff ff       	call   c0010722 <Device::Device(char const*)>
c0010a2a:	83 c4 10             	add    esp,0x10
c0010a2d:	ba 7c 19 02 c0       	mov    edx,0xc002197c
c0010a32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a36:	89 10                	mov    DWORD PTR [eax],edx
c0010a38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a3c:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c0010a46:	90                   	nop
c0010a47:	83 c4 0c             	add    esp,0xc
c0010a4a:	c3                   	ret    
c0010a4b:	90                   	nop

c0010a4c <FPU::~FPU()>:
c0010a4c:	83 ec 0c             	sub    esp,0xc
c0010a4f:	ba 7c 19 02 c0       	mov    edx,0xc002197c
c0010a54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a58:	89 10                	mov    DWORD PTR [eax],edx
c0010a5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a5e:	83 ec 0c             	sub    esp,0xc
c0010a61:	50                   	push   eax
c0010a62:	e8 6d f9 ff ff       	call   c00103d4 <Device::~Device()>
c0010a67:	83 c4 10             	add    esp,0x10
c0010a6a:	90                   	nop
c0010a6b:	83 c4 0c             	add    esp,0xc
c0010a6e:	c3                   	ret    
c0010a6f:	90                   	nop

c0010a70 <FPU::~FPU()>:
c0010a70:	83 ec 0c             	sub    esp,0xc
c0010a73:	83 ec 0c             	sub    esp,0xc
c0010a76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a7a:	e8 cd ff ff ff       	call   c0010a4c <FPU::~FPU()>
c0010a7f:	83 c4 10             	add    esp,0x10
c0010a82:	83 ec 08             	sub    esp,0x8
c0010a85:	68 58 01 00 00       	push   0x158
c0010a8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a8e:	e8 b4 e5 ff ff       	call   c000f047 <operator delete(void*, unsigned long)>
c0010a93:	83 c4 10             	add    esp,0x10
c0010a96:	83 c4 0c             	add    esp,0xc
c0010a99:	c3                   	ret    

c0010a9a <setupFPU()>:
c0010a9a:	53                   	push   ebx
c0010a9b:	83 ec 08             	sub    esp,0x8
c0010a9e:	a1 88 43 02 c0       	mov    eax,ds:0xc0024388
c0010aa3:	f6 80 e9 01 00 00 20 	test   BYTE PTR [eax+0x1e9],0x20
c0010aaa:	74 19                	je     c0010ac5 <setupFPU()+0x2b>
c0010aac:	83 ec 0c             	sub    esp,0xc
c0010aaf:	68 58 01 00 00       	push   0x158
c0010ab4:	e8 7f e5 ff ff       	call   c000f038 <operator new(unsigned long)>
c0010ab9:	89 c3                	mov    ebx,eax
c0010abb:	89 04 24             	mov    DWORD PTR [esp],eax
c0010abe:	e8 d1 d3 00 00       	call   c001de94 <AVX::AVX()>
c0010ac3:	eb 5b                	jmp    c0010b20 <setupFPU()+0x86>
c0010ac5:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0010acb:	84 c0                	test   al,al
c0010acd:	79 19                	jns    c0010ae8 <setupFPU()+0x4e>
c0010acf:	83 ec 0c             	sub    esp,0xc
c0010ad2:	68 58 01 00 00       	push   0x158
c0010ad7:	e8 5c e5 ff ff       	call   c000f038 <operator new(unsigned long)>
c0010adc:	89 c3                	mov    ebx,eax
c0010ade:	89 04 24             	mov    DWORD PTR [esp],eax
c0010ae1:	e8 d4 d4 00 00       	call   c001dfba <SSE::SSE()>
c0010ae6:	eb 38                	jmp    c0010b20 <setupFPU()+0x86>
c0010ae8:	a8 20                	test   al,0x20
c0010aea:	74 19                	je     c0010b05 <setupFPU()+0x6b>
c0010aec:	83 ec 0c             	sub    esp,0xc
c0010aef:	68 58 01 00 00       	push   0x158
c0010af4:	e8 3f e5 ff ff       	call   c000f038 <operator new(unsigned long)>
c0010af9:	89 c3                	mov    ebx,eax
c0010afb:	89 04 24             	mov    DWORD PTR [esp],eax
c0010afe:	e8 21 d4 00 00       	call   c001df24 <MMX::MMX()>
c0010b03:	eb 1b                	jmp    c0010b20 <setupFPU()+0x86>
c0010b05:	a8 10                	test   al,0x10
c0010b07:	74 1c                	je     c0010b25 <setupFPU()+0x8b>
c0010b09:	83 ec 0c             	sub    esp,0xc
c0010b0c:	68 58 01 00 00       	push   0x158
c0010b11:	e8 22 e5 ff ff       	call   c000f038 <operator new(unsigned long)>
c0010b16:	89 c3                	mov    ebx,eax
c0010b18:	89 04 24             	mov    DWORD PTR [esp],eax
c0010b1b:	e8 28 d5 00 00       	call   c001e048 <x87::x87()>
c0010b20:	83 c4 10             	add    esp,0x10
c0010b23:	eb 2c                	jmp    c0010b51 <setupFPU()+0xb7>
c0010b25:	83 ec 0c             	sub    esp,0xc
c0010b28:	31 db                	xor    ebx,ebx
c0010b2a:	68 68 19 02 c0       	push   0xc0021968
c0010b2f:	e8 f3 e5 ff ff       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c0010b34:	e8 37 3c 00 00       	call   c0014770 <thisCPU()>
c0010b39:	e8 32 3c 00 00       	call   c0014770 <thisCPU()>
c0010b3e:	e8 d5 ec 00 00       	call   c001f818 <CPU::readCR0()>
c0010b43:	83 c8 04             	or     eax,0x4
c0010b46:	89 04 24             	mov    DWORD PTR [esp],eax
c0010b49:	e8 dc ec 00 00       	call   c001f82a <CPU::writeCR0(unsigned long)>
c0010b4e:	83 c4 10             	add    esp,0x10
c0010b51:	89 d8                	mov    eax,ebx
c0010b53:	83 c4 08             	add    esp,0x8
c0010b56:	5b                   	pop    ebx
c0010b57:	c3                   	ret    

c0010b58 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c0010b58:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010b5c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010b60:	c1 e0 04             	shl    eax,0x4
c0010b63:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0010b67:	8d 50 10             	lea    edx,[eax+0x10]
c0010b6a:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c0010b70:	74 08                	je     c0010b7a <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c0010b72:	83 c0 04             	add    eax,0x4
c0010b75:	39 d0                	cmp    eax,edx
c0010b77:	75 f1                	jne    c0010b6a <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c0010b79:	c3                   	ret    
c0010b7a:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0010b84:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0010b8e:	eb e2                	jmp    c0010b72 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c0010b90 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c0010b90:	57                   	push   edi
c0010b91:	31 c0                	xor    eax,eax
c0010b93:	56                   	push   esi
c0010b94:	53                   	push   ebx
c0010b95:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0010b99:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010b9d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0010ba1:	89 da                	mov    edx,ebx
c0010ba3:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0010ba7:	c1 e2 04             	shl    edx,0x4
c0010baa:	01 ca                	add    edx,ecx
c0010bac:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0010bb4:	74 16                	je     c0010bcc <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c0010bb6:	40                   	inc    eax
c0010bb7:	83 f8 04             	cmp    eax,0x4
c0010bba:	75 f0                	jne    c0010bac <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c0010bbc:	c7 44 24 10 ac 19 02 c0 	mov    DWORD PTR [esp+0x10],0xc00219ac
c0010bc4:	5b                   	pop    ebx
c0010bc5:	5e                   	pop    esi
c0010bc6:	5f                   	pop    edi
c0010bc7:	e9 24 4d 00 00       	jmp    c00158f0 <Krnl::panic(char const*)>
c0010bcc:	8d 04 98             	lea    eax,[eax+ebx*4]
c0010bcf:	8d 04 81             	lea    eax,[ecx+eax*4]
c0010bd2:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c0010bd8:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c0010bde:	5b                   	pop    ebx
c0010bdf:	5e                   	pop    esi
c0010be0:	5f                   	pop    edi
c0010be1:	c3                   	ret    

c0010be2 <doubleFault(regs*, void*)>:
c0010be2:	55                   	push   ebp
c0010be3:	89 e5                	mov    ebp,esp
c0010be5:	83 ec 08             	sub    esp,0x8
c0010be8:	83 ec 0c             	sub    esp,0xc
c0010beb:	68 e7 19 02 c0       	push   0xc00219e7
c0010bf0:	e8 fb 4c 00 00       	call   c00158f0 <Krnl::panic(char const*)>
c0010bf5:	83 c4 10             	add    esp,0x10
c0010bf8:	90                   	nop
c0010bf9:	c9                   	leave  
c0010bfa:	c3                   	ret    
c0010bfb:	90                   	nop

c0010bfc <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0010bfc:	56                   	push   esi
c0010bfd:	53                   	push   ebx
c0010bfe:	50                   	push   eax
c0010bff:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010c03:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010c07:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0010c0c:	75 35                	jne    c0010c43 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c0010c0e:	8d 43 20             	lea    eax,[ebx+0x20]
c0010c11:	31 d2                	xor    edx,edx
c0010c13:	89 c1                	mov    ecx,eax
c0010c15:	c1 e1 04             	shl    ecx,0x4
c0010c18:	01 f1                	add    ecx,esi
c0010c1a:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c0010c22:	74 3e                	je     c0010c62 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c0010c24:	42                   	inc    edx
c0010c25:	83 fa 04             	cmp    edx,0x4
c0010c28:	75 f0                	jne    c0010c1a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c0010c2a:	83 ec 0c             	sub    esp,0xc
c0010c2d:	68 2c 1a 02 c0       	push   0xc0021a2c
c0010c32:	e8 b9 4c 00 00       	call   c00158f0 <Krnl::panic(char const*)>
c0010c37:	83 c4 10             	add    esp,0x10
c0010c3a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010c3f:	5a                   	pop    edx
c0010c40:	5b                   	pop    ebx
c0010c41:	5e                   	pop    esi
c0010c42:	c3                   	ret    
c0010c43:	83 ec 0c             	sub    esp,0xc
c0010c46:	56                   	push   esi
c0010c47:	e8 c8 fb ff ff       	call   c0010814 <Device::getName()>
c0010c4c:	83 c4 10             	add    esp,0x10
c0010c4f:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0010c52:	75 ba                	jne    c0010c0e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0010c54:	83 fb 0f             	cmp    ebx,0xf
c0010c57:	7f 29                	jg     c0010c82 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c0010c59:	0f b6 9b e0 3a 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffdc520]
c0010c60:	eb ac                	jmp    c0010c0e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0010c62:	8d 04 82             	lea    eax,[edx+eax*4]
c0010c65:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010c69:	8d 04 86             	lea    eax,[esi+eax*4]
c0010c6c:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0010c72:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0010c76:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c0010c7c:	89 d8                	mov    eax,ebx
c0010c7e:	5a                   	pop    edx
c0010c7f:	5b                   	pop    ebx
c0010c80:	5e                   	pop    esi
c0010c81:	c3                   	ret    
c0010c82:	83 ec 0c             	sub    esp,0xc
c0010c85:	68 f4 19 02 c0       	push   0xc00219f4
c0010c8a:	e8 61 4c 00 00       	call   c00158f0 <Krnl::panic(char const*)>
c0010c8f:	83 c4 10             	add    esp,0x10
c0010c92:	e9 77 ff ff ff       	jmp    c0010c0e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0010c97:	90                   	nop

c0010c98 <InterruptController::clearAllHandlers(int, bool)>:
c0010c98:	56                   	push   esi
c0010c99:	53                   	push   ebx
c0010c9a:	52                   	push   edx
c0010c9b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010c9f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010ca3:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0010ca8:	75 61                	jne    c0010d0b <InterruptController::clearAllHandlers(int, bool)+0x73>
c0010caa:	8d 46 20             	lea    eax,[esi+0x20]
c0010cad:	c1 e6 04             	shl    esi,0x4
c0010cb0:	c1 e0 04             	shl    eax,0x4
c0010cb3:	01 de                	add    esi,ebx
c0010cb5:	01 d8                	add    eax,ebx
c0010cb7:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c0010cc1:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c0010ccb:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0010cd5:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0010cdf:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c0010ce9:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c0010cf3:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c0010cfd:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c0010d07:	58                   	pop    eax
c0010d08:	5b                   	pop    ebx
c0010d09:	5e                   	pop    esi
c0010d0a:	c3                   	ret    
c0010d0b:	83 ec 0c             	sub    esp,0xc
c0010d0e:	53                   	push   ebx
c0010d0f:	e8 00 fb ff ff       	call   c0010814 <Device::getName()>
c0010d14:	83 c4 10             	add    esp,0x10
c0010d17:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0010d1a:	75 8e                	jne    c0010caa <InterruptController::clearAllHandlers(int, bool)+0x12>
c0010d1c:	83 fe 0f             	cmp    esi,0xf
c0010d1f:	7f 09                	jg     c0010d2a <InterruptController::clearAllHandlers(int, bool)+0x92>
c0010d21:	0f b6 b6 e0 3a 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffdc520]
c0010d28:	eb 80                	jmp    c0010caa <InterruptController::clearAllHandlers(int, bool)+0x12>
c0010d2a:	83 ec 0c             	sub    esp,0xc
c0010d2d:	68 68 1a 02 c0       	push   0xc0021a68
c0010d32:	e8 b9 4b 00 00       	call   c00158f0 <Krnl::panic(char const*)>
c0010d37:	83 c4 10             	add    esp,0x10
c0010d3a:	e9 6b ff ff ff       	jmp    c0010caa <InterruptController::clearAllHandlers(int, bool)+0x12>
c0010d3f:	90                   	nop

c0010d40 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0010d40:	56                   	push   esi
c0010d41:	53                   	push   ebx
c0010d42:	52                   	push   edx
c0010d43:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010d47:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010d4b:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0010d50:	75 3a                	jne    c0010d8c <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0010d52:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010d56:	8d 50 20             	lea    edx,[eax+0x20]
c0010d59:	c1 e2 04             	shl    edx,0x4
c0010d5c:	8d 04 16             	lea    eax,[esi+edx*1]
c0010d5f:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0010d63:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0010d69:	74 0b                	je     c0010d76 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0010d6b:	83 c0 04             	add    eax,0x4
c0010d6e:	39 d0                	cmp    eax,edx
c0010d70:	75 f1                	jne    c0010d63 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0010d72:	58                   	pop    eax
c0010d73:	5b                   	pop    ebx
c0010d74:	5e                   	pop    esi
c0010d75:	c3                   	ret    
c0010d76:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0010d80:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0010d8a:	eb df                	jmp    c0010d6b <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c0010d8c:	83 ec 0c             	sub    esp,0xc
c0010d8f:	56                   	push   esi
c0010d90:	e8 7f fa ff ff       	call   c0010814 <Device::getName()>
c0010d95:	83 c4 10             	add    esp,0x10
c0010d98:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0010d9b:	75 b5                	jne    c0010d52 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0010d9d:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0010da2:	7f 11                	jg     c0010db5 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c0010da4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010da8:	0f b6 80 e0 3a 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdc520]
c0010daf:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0010db3:	eb 9d                	jmp    c0010d52 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0010db5:	83 ec 0c             	sub    esp,0xc
c0010db8:	68 68 1a 02 c0       	push   0xc0021a68
c0010dbd:	e8 2e 4b 00 00       	call   c00158f0 <Krnl::panic(char const*)>
c0010dc2:	83 c4 10             	add    esp,0x10
c0010dc5:	eb 8b                	jmp    c0010d52 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c0010dc7 <nmiHandler(regs*, void*)>:
c0010dc7:	a1 88 43 02 c0       	mov    eax,ds:0xc0024388
c0010dcc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010dd0:	e9 a5 a9 ff ff       	jmp    c000b77a <Computer::handleNMI()>

c0010dd5 <int_handler>:
c0010dd5:	55                   	push   ebp
c0010dd6:	57                   	push   edi
c0010dd7:	56                   	push   esi
c0010dd8:	53                   	push   ebx
c0010dd9:	83 ec 0c             	sub    esp,0xc
c0010ddc:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0010de0:	80 3d d4 4d 02 c0 00 	cmp    BYTE PTR ds:0xc0024dd4,0x0
c0010de7:	74 0b                	je     c0010df4 <int_handler+0x1f>
c0010de9:	fa                   	cli    
c0010dea:	f4                   	hlt    
c0010deb:	80 3d d4 4d 02 c0 00 	cmp    BYTE PTR ds:0xc0024dd4,0x0
c0010df2:	75 f5                	jne    c0010de9 <int_handler+0x14>
c0010df4:	e8 77 39 00 00       	call   c0014770 <thisCPU()>
c0010df9:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0010dfc:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0010e02:	8d 43 e0             	lea    eax,[ebx-0x20]
c0010e05:	83 f8 17             	cmp    eax,0x17
c0010e08:	77 13                	ja     c0010e1d <int_handler+0x48>
c0010e0a:	83 ec 08             	sub    esp,0x8
c0010e0d:	8b 17                	mov    edx,DWORD PTR [edi]
c0010e0f:	8d 43 e0             	lea    eax,[ebx-0x20]
c0010e12:	0f b6 c0             	movzx  eax,al
c0010e15:	50                   	push   eax
c0010e16:	57                   	push   edi
c0010e17:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0010e1a:	83 c4 10             	add    esp,0x10
c0010e1d:	83 c3 15             	add    ebx,0x15
c0010e20:	c1 e3 04             	shl    ebx,0x4
c0010e23:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0010e27:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0010e2e:	31 db                	xor    ebx,ebx
c0010e30:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0010e34:	85 c0                	test   eax,eax
c0010e36:	74 13                	je     c0010e4b <int_handler+0x76>
c0010e38:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0010e3b:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0010e3f:	74 1c                	je     c0010e5d <int_handler+0x88>
c0010e41:	83 ec 08             	sub    esp,0x8
c0010e44:	52                   	push   edx
c0010e45:	56                   	push   esi
c0010e46:	ff d0                	call   eax
c0010e48:	83 c4 10             	add    esp,0x10
c0010e4b:	43                   	inc    ebx
c0010e4c:	83 fb 04             	cmp    ebx,0x4
c0010e4f:	75 df                	jne    c0010e30 <int_handler+0x5b>
c0010e51:	83 c4 0c             	add    esp,0xc
c0010e54:	31 c0                	xor    eax,eax
c0010e56:	5b                   	pop    ebx
c0010e57:	31 d2                	xor    edx,edx
c0010e59:	5e                   	pop    esi
c0010e5a:	5f                   	pop    edi
c0010e5b:	5d                   	pop    ebp
c0010e5c:	c3                   	ret    
c0010e5d:	83 ec 08             	sub    esp,0x8
c0010e60:	52                   	push   edx
c0010e61:	56                   	push   esi
c0010e62:	ff d0                	call   eax
c0010e64:	83 c4 10             	add    esp,0x10
c0010e67:	83 c4 0c             	add    esp,0xc
c0010e6a:	5b                   	pop    ebx
c0010e6b:	5e                   	pop    esi
c0010e6c:	5f                   	pop    edi
c0010e6d:	5d                   	pop    ebp
c0010e6e:	c3                   	ret    
c0010e6f:	90                   	nop

c0010e70 <InterruptController::InterruptController(char const*)>:
c0010e70:	83 ec 1c             	sub    esp,0x1c
c0010e73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010e77:	83 ec 08             	sub    esp,0x8
c0010e7a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010e7e:	50                   	push   eax
c0010e7f:	e8 9e f8 ff ff       	call   c0010722 <Device::Device(char const*)>
c0010e84:	83 c4 10             	add    esp,0x10
c0010e87:	ba a4 1c 02 c0       	mov    edx,0xc0021ca4
c0010e8c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010e90:	89 10                	mov    DWORD PTR [eax],edx
c0010e92:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010e96:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c0010ea0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010ea8:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0010eb0:	7f 5e                	jg     c0010f10 <InterruptController::InterruptController(char const*)+0xa0>
c0010eb2:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0010eba:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0010ebf:	7f 49                	jg     c0010f0a <InterruptController::InterruptController(char const*)+0x9a>
c0010ec1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010ec5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010ec9:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0010ed0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010ed4:	01 ca                	add    edx,ecx
c0010ed6:	83 c2 54             	add    edx,0x54
c0010ed9:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0010ee1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010ee5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010ee9:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0010ef0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010ef4:	01 ca                	add    edx,ecx
c0010ef6:	81 c2 54 04 00 00    	add    edx,0x454
c0010efc:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0010f04:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0010f08:	eb b0                	jmp    c0010eba <InterruptController::InterruptController(char const*)+0x4a>
c0010f0a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0010f0e:	eb 98                	jmp    c0010ea8 <InterruptController::InterruptController(char const*)+0x38>
c0010f10:	90                   	nop
c0010f11:	83 c4 1c             	add    esp,0x1c
c0010f14:	c3                   	ret    
c0010f15:	90                   	nop

c0010f16 <InterruptController::~InterruptController()>:
c0010f16:	83 ec 0c             	sub    esp,0xc
c0010f19:	ba a4 1c 02 c0       	mov    edx,0xc0021ca4
c0010f1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f22:	89 10                	mov    DWORD PTR [eax],edx
c0010f24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f28:	83 ec 0c             	sub    esp,0xc
c0010f2b:	50                   	push   eax
c0010f2c:	e8 a3 f4 ff ff       	call   c00103d4 <Device::~Device()>
c0010f31:	83 c4 10             	add    esp,0x10
c0010f34:	90                   	nop
c0010f35:	83 c4 0c             	add    esp,0xc
c0010f38:	c3                   	ret    
c0010f39:	90                   	nop

c0010f3a <InterruptController::~InterruptController()>:
c0010f3a:	83 ec 0c             	sub    esp,0xc
c0010f3d:	83 ec 0c             	sub    esp,0xc
c0010f40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010f44:	e8 cd ff ff ff       	call   c0010f16 <InterruptController::~InterruptController()>
c0010f49:	83 c4 10             	add    esp,0x10
c0010f4c:	83 ec 08             	sub    esp,0x8
c0010f4f:	68 58 21 00 00       	push   0x2158
c0010f54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010f58:	e8 ea e0 ff ff       	call   c000f047 <operator delete(void*, unsigned long)>
c0010f5d:	83 c4 10             	add    esp,0x10
c0010f60:	83 c4 0c             	add    esp,0xc
c0010f63:	c3                   	ret    

c0010f64 <displayDebugInfo(regs*)>:
c0010f64:	55                   	push   ebp
c0010f65:	57                   	push   edi
c0010f66:	56                   	push   esi
c0010f67:	53                   	push   ebx
c0010f68:	83 ec 24             	sub    esp,0x24
c0010f6b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0010f6f:	0f 20 c2             	mov    edx,cr0
c0010f72:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0010f76:	0f 20 d7             	mov    edi,cr2
c0010f79:	0f 20 de             	mov    esi,cr3
c0010f7c:	0f 20 e5             	mov    ebp,cr4
c0010f7f:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0010f82:	68 a2 1a 02 c0       	push   0xc0021aa2
c0010f87:	e8 9b e1 ff ff       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c0010f8c:	58                   	pop    eax
c0010f8d:	5a                   	pop    edx
c0010f8e:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0010f91:	68 ad 1a 02 c0       	push   0xc0021aad
c0010f96:	e8 8c e1 ff ff       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c0010f9b:	59                   	pop    ecx
c0010f9c:	58                   	pop    eax
c0010f9d:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0010fa0:	68 b8 1a 02 c0       	push   0xc0021ab8
c0010fa5:	e8 7d e1 ff ff       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c0010faa:	58                   	pop    eax
c0010fab:	5a                   	pop    edx
c0010fac:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0010faf:	68 c3 1a 02 c0       	push   0xc0021ac3
c0010fb4:	e8 6e e1 ff ff       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c0010fb9:	59                   	pop    ecx
c0010fba:	58                   	pop    eax
c0010fbb:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010fbe:	68 ce 1a 02 c0       	push   0xc0021ace
c0010fc3:	e8 5f e1 ff ff       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c0010fc8:	58                   	pop    eax
c0010fc9:	5a                   	pop    edx
c0010fca:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0010fcd:	68 d9 1a 02 c0       	push   0xc0021ad9
c0010fd2:	e8 50 e1 ff ff       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c0010fd7:	59                   	pop    ecx
c0010fd8:	58                   	pop    eax
c0010fd9:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0010fdc:	68 e4 1a 02 c0       	push   0xc0021ae4
c0010fe1:	e8 41 e1 ff ff       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c0010fe6:	58                   	pop    eax
c0010fe7:	5a                   	pop    edx
c0010fe8:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010feb:	68 ef 1a 02 c0       	push   0xc0021aef
c0010ff0:	e8 32 e1 ff ff       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c0010ff5:	59                   	pop    ecx
c0010ff6:	58                   	pop    eax
c0010ff7:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0010ffa:	68 fa 1a 02 c0       	push   0xc0021afa
c0010fff:	e8 23 e1 ff ff       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c0011004:	58                   	pop    eax
c0011005:	5a                   	pop    edx
c0011006:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0011009:	68 09 1b 02 c0       	push   0xc0021b09
c001100e:	e8 14 e1 ff ff       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c0011013:	59                   	pop    ecx
c0011014:	58                   	pop    eax
c0011015:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0011018:	68 14 1b 02 c0       	push   0xc0021b14
c001101d:	e8 05 e1 ff ff       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c0011022:	58                   	pop    eax
c0011023:	5a                   	pop    edx
c0011024:	57                   	push   edi
c0011025:	68 1f 1b 02 c0       	push   0xc0021b1f
c001102a:	e8 f8 e0 ff ff       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c001102f:	59                   	pop    ecx
c0011030:	58                   	pop    eax
c0011031:	56                   	push   esi
c0011032:	68 2a 1b 02 c0       	push   0xc0021b2a
c0011037:	e8 eb e0 ff ff       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c001103c:	58                   	pop    eax
c001103d:	a1 d4 57 02 c0       	mov    eax,ds:0xc00257d4
c0011042:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011048:	e8 1e c3 ff ff       	call   c000d36b <setActiveTerminal(VgaText*)>
c001104d:	58                   	pop    eax
c001104e:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0011051:	5a                   	pop    edx
c0011052:	c1 e0 05             	shl    eax,0x5
c0011055:	05 40 38 02 c0       	add    eax,0xc0023840
c001105a:	50                   	push   eax
c001105b:	a1 d4 57 02 c0       	mov    eax,ds:0xc00257d4
c0011060:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011066:	e8 1f c7 ff ff       	call   c000d78a <VgaText::puts(char const*)>
c001106b:	59                   	pop    ecx
c001106c:	58                   	pop    eax
c001106d:	a1 d4 57 02 c0       	mov    eax,ds:0xc00257d4
c0011072:	68 35 1b 02 c0       	push   0xc0021b35
c0011077:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001107d:	e8 08 c7 ff ff       	call   c000d78a <VgaText::puts(char const*)>
c0011082:	58                   	pop    eax
c0011083:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011088:	5a                   	pop    edx
c0011089:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001108c:	83 c0 0c             	add    eax,0xc
c001108f:	50                   	push   eax
c0011090:	a1 d4 57 02 c0       	mov    eax,ds:0xc00257d4
c0011095:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001109b:	e8 ea c6 ff ff       	call   c000d78a <VgaText::puts(char const*)>
c00110a0:	59                   	pop    ecx
c00110a1:	58                   	pop    eax
c00110a2:	a1 d4 57 02 c0       	mov    eax,ds:0xc00257d4
c00110a7:	68 3e 1b 02 c0       	push   0xc0021b3e
c00110ac:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00110b2:	e8 d3 c6 ff ff       	call   c000d78a <VgaText::puts(char const*)>
c00110b7:	58                   	pop    eax
c00110b8:	a1 d4 57 02 c0       	mov    eax,ds:0xc00257d4
c00110bd:	5a                   	pop    edx
c00110be:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00110c1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00110c7:	e8 e4 c6 ff ff       	call   c000d7b0 <VgaText::putx(unsigned int)>
c00110cc:	59                   	pop    ecx
c00110cd:	58                   	pop    eax
c00110ce:	a1 d4 57 02 c0       	mov    eax,ds:0xc00257d4
c00110d3:	68 46 1b 02 c0       	push   0xc0021b46
c00110d8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00110de:	e8 a7 c6 ff ff       	call   c000d78a <VgaText::puts(char const*)>
c00110e3:	58                   	pop    eax
c00110e4:	a1 d4 57 02 c0       	mov    eax,ds:0xc00257d4
c00110e9:	5a                   	pop    edx
c00110ea:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00110ed:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00110f3:	e8 b8 c6 ff ff       	call   c000d7b0 <VgaText::putx(unsigned int)>
c00110f8:	59                   	pop    ecx
c00110f9:	58                   	pop    eax
c00110fa:	a1 d4 57 02 c0       	mov    eax,ds:0xc00257d4
c00110ff:	68 4e 1b 02 c0       	push   0xc0021b4e
c0011104:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001110a:	e8 7b c6 ff ff       	call   c000d78a <VgaText::puts(char const*)>
c001110f:	58                   	pop    eax
c0011110:	a1 d4 57 02 c0       	mov    eax,ds:0xc00257d4
c0011115:	5a                   	pop    edx
c0011116:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0011119:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001111f:	e8 8c c6 ff ff       	call   c000d7b0 <VgaText::putx(unsigned int)>
c0011124:	59                   	pop    ecx
c0011125:	58                   	pop    eax
c0011126:	a1 d4 57 02 c0       	mov    eax,ds:0xc00257d4
c001112b:	68 56 1b 02 c0       	push   0xc0021b56
c0011130:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011136:	e8 4f c6 ff ff       	call   c000d78a <VgaText::puts(char const*)>
c001113b:	58                   	pop    eax
c001113c:	a1 d4 57 02 c0       	mov    eax,ds:0xc00257d4
c0011141:	5a                   	pop    edx
c0011142:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0011145:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001114b:	e8 60 c6 ff ff       	call   c000d7b0 <VgaText::putx(unsigned int)>
c0011150:	59                   	pop    ecx
c0011151:	58                   	pop    eax
c0011152:	a1 d4 57 02 c0       	mov    eax,ds:0xc00257d4
c0011157:	68 5e 1b 02 c0       	push   0xc0021b5e
c001115c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011162:	e8 23 c6 ff ff       	call   c000d78a <VgaText::puts(char const*)>
c0011167:	58                   	pop    eax
c0011168:	a1 d4 57 02 c0       	mov    eax,ds:0xc00257d4
c001116d:	5a                   	pop    edx
c001116e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0011171:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011177:	e8 34 c6 ff ff       	call   c000d7b0 <VgaText::putx(unsigned int)>
c001117c:	59                   	pop    ecx
c001117d:	58                   	pop    eax
c001117e:	a1 d4 57 02 c0       	mov    eax,ds:0xc00257d4
c0011183:	68 66 1b 02 c0       	push   0xc0021b66
c0011188:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001118e:	e8 f7 c5 ff ff       	call   c000d78a <VgaText::puts(char const*)>
c0011193:	58                   	pop    eax
c0011194:	a1 d4 57 02 c0       	mov    eax,ds:0xc00257d4
c0011199:	5a                   	pop    edx
c001119a:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c001119d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00111a3:	e8 08 c6 ff ff       	call   c000d7b0 <VgaText::putx(unsigned int)>
c00111a8:	59                   	pop    ecx
c00111a9:	a1 d4 57 02 c0       	mov    eax,ds:0xc00257d4
c00111ae:	5b                   	pop    ebx
c00111af:	68 6e 1b 02 c0       	push   0xc0021b6e
c00111b4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00111ba:	e8 cb c5 ff ff       	call   c000d78a <VgaText::puts(char const*)>
c00111bf:	58                   	pop    eax
c00111c0:	a1 d4 57 02 c0       	mov    eax,ds:0xc00257d4
c00111c5:	5a                   	pop    edx
c00111c6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00111ca:	52                   	push   edx
c00111cb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00111d1:	e8 da c5 ff ff       	call   c000d7b0 <VgaText::putx(unsigned int)>
c00111d6:	59                   	pop    ecx
c00111d7:	a1 d4 57 02 c0       	mov    eax,ds:0xc00257d4
c00111dc:	5b                   	pop    ebx
c00111dd:	68 77 1b 02 c0       	push   0xc0021b77
c00111e2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00111e8:	e8 9d c5 ff ff       	call   c000d78a <VgaText::puts(char const*)>
c00111ed:	58                   	pop    eax
c00111ee:	a1 d4 57 02 c0       	mov    eax,ds:0xc00257d4
c00111f3:	5a                   	pop    edx
c00111f4:	57                   	push   edi
c00111f5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00111fb:	e8 b0 c5 ff ff       	call   c000d7b0 <VgaText::putx(unsigned int)>
c0011200:	59                   	pop    ecx
c0011201:	a1 d4 57 02 c0       	mov    eax,ds:0xc00257d4
c0011206:	5b                   	pop    ebx
c0011207:	68 7f 1b 02 c0       	push   0xc0021b7f
c001120c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011212:	e8 73 c5 ff ff       	call   c000d78a <VgaText::puts(char const*)>
c0011217:	5f                   	pop    edi
c0011218:	58                   	pop    eax
c0011219:	a1 d4 57 02 c0       	mov    eax,ds:0xc00257d4
c001121e:	56                   	push   esi
c001121f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011225:	e8 86 c5 ff ff       	call   c000d7b0 <VgaText::putx(unsigned int)>
c001122a:	58                   	pop    eax
c001122b:	a1 d4 57 02 c0       	mov    eax,ds:0xc00257d4
c0011230:	5a                   	pop    edx
c0011231:	68 87 1b 02 c0       	push   0xc0021b87
c0011236:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001123c:	e8 49 c5 ff ff       	call   c000d78a <VgaText::puts(char const*)>
c0011241:	59                   	pop    ecx
c0011242:	a1 d4 57 02 c0       	mov    eax,ds:0xc00257d4
c0011247:	5b                   	pop    ebx
c0011248:	55                   	push   ebp
c0011249:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001124f:	e8 5c c5 ff ff       	call   c000d7b0 <VgaText::putx(unsigned int)>
c0011254:	5e                   	pop    esi
c0011255:	a1 d4 57 02 c0       	mov    eax,ds:0xc00257d4
c001125a:	5f                   	pop    edi
c001125b:	68 8f 1b 02 c0       	push   0xc0021b8f
c0011260:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011266:	e8 1f c5 ff ff       	call   c000d78a <VgaText::puts(char const*)>
c001126b:	a1 d4 57 02 c0       	mov    eax,ds:0xc00257d4
c0011270:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0011276:	e8 b8 e5 00 00       	call   c001f833 <CPU::readDR0()>
c001127b:	5d                   	pop    ebp
c001127c:	5a                   	pop    edx
c001127d:	50                   	push   eax
c001127e:	53                   	push   ebx
c001127f:	e8 2c c5 ff ff       	call   c000d7b0 <VgaText::putx(unsigned int)>
c0011284:	59                   	pop    ecx
c0011285:	a1 d4 57 02 c0       	mov    eax,ds:0xc00257d4
c001128a:	5b                   	pop    ebx
c001128b:	68 98 1b 02 c0       	push   0xc0021b98
c0011290:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011296:	e8 ef c4 ff ff       	call   c000d78a <VgaText::puts(char const*)>
c001129b:	a1 d4 57 02 c0       	mov    eax,ds:0xc00257d4
c00112a0:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c00112a6:	e8 9a e5 00 00       	call   c001f845 <CPU::readDR1()>
c00112ab:	5e                   	pop    esi
c00112ac:	5f                   	pop    edi
c00112ad:	50                   	push   eax
c00112ae:	53                   	push   ebx
c00112af:	e8 fc c4 ff ff       	call   c000d7b0 <VgaText::putx(unsigned int)>
c00112b4:	5d                   	pop    ebp
c00112b5:	58                   	pop    eax
c00112b6:	a1 d4 57 02 c0       	mov    eax,ds:0xc00257d4
c00112bb:	68 a0 1b 02 c0       	push   0xc0021ba0
c00112c0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00112c6:	e8 bf c4 ff ff       	call   c000d78a <VgaText::puts(char const*)>
c00112cb:	a1 d4 57 02 c0       	mov    eax,ds:0xc00257d4
c00112d0:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c00112d6:	e8 7c e5 00 00       	call   c001f857 <CPU::readDR2()>
c00112db:	5a                   	pop    edx
c00112dc:	59                   	pop    ecx
c00112dd:	50                   	push   eax
c00112de:	53                   	push   ebx
c00112df:	e8 cc c4 ff ff       	call   c000d7b0 <VgaText::putx(unsigned int)>
c00112e4:	5b                   	pop    ebx
c00112e5:	a1 d4 57 02 c0       	mov    eax,ds:0xc00257d4
c00112ea:	5e                   	pop    esi
c00112eb:	68 a8 1b 02 c0       	push   0xc0021ba8
c00112f0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00112f6:	e8 8f c4 ff ff       	call   c000d78a <VgaText::puts(char const*)>
c00112fb:	a1 d4 57 02 c0       	mov    eax,ds:0xc00257d4
c0011300:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0011306:	e8 5e e5 00 00       	call   c001f869 <CPU::readDR3()>
c001130b:	5f                   	pop    edi
c001130c:	5d                   	pop    ebp
c001130d:	50                   	push   eax
c001130e:	53                   	push   ebx
c001130f:	e8 9c c4 ff ff       	call   c000d7b0 <VgaText::putx(unsigned int)>
c0011314:	58                   	pop    eax
c0011315:	a1 d4 57 02 c0       	mov    eax,ds:0xc00257d4
c001131a:	5a                   	pop    edx
c001131b:	68 b0 1b 02 c0       	push   0xc0021bb0
c0011320:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011326:	e8 5f c4 ff ff       	call   c000d78a <VgaText::puts(char const*)>
c001132b:	a1 d4 57 02 c0       	mov    eax,ds:0xc00257d4
c0011330:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0011336:	e8 40 e5 00 00       	call   c001f87b <CPU::readDR6()>
c001133b:	59                   	pop    ecx
c001133c:	5e                   	pop    esi
c001133d:	50                   	push   eax
c001133e:	53                   	push   ebx
c001133f:	e8 6c c4 ff ff       	call   c000d7b0 <VgaText::putx(unsigned int)>
c0011344:	5f                   	pop    edi
c0011345:	a1 d4 57 02 c0       	mov    eax,ds:0xc00257d4
c001134a:	5d                   	pop    ebp
c001134b:	68 b8 1b 02 c0       	push   0xc0021bb8
c0011350:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011356:	e8 2f c4 ff ff       	call   c000d78a <VgaText::puts(char const*)>
c001135b:	a1 d4 57 02 c0       	mov    eax,ds:0xc00257d4
c0011360:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0011366:	e8 22 e5 00 00       	call   c001f88d <CPU::readDR7()>
c001136b:	5a                   	pop    edx
c001136c:	59                   	pop    ecx
c001136d:	50                   	push   eax
c001136e:	53                   	push   ebx
c001136f:	e8 3c c4 ff ff       	call   c000d7b0 <VgaText::putx(unsigned int)>
c0011374:	fa                   	cli    
c0011375:	f4                   	hlt    
c0011376:	83 c4 10             	add    esp,0x10
c0011379:	eb fe                	jmp    c0011379 <displayDebugInfo(regs*)+0x415>

c001137b <x87EmulHandler(regs*, void*)>:
c001137b:	53                   	push   ebx
c001137c:	83 ec 08             	sub    esp,0x8
c001137f:	a1 14 45 02 c0       	mov    eax,ds:0xc0024514
c0011384:	85 c0                	test   eax,eax
c0011386:	74 15                	je     c001139d <x87EmulHandler(regs*, void*)+0x22>
c0011388:	83 ec 0c             	sub    esp,0xc
c001138b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001138f:	ff d0                	call   eax
c0011391:	83 c4 10             	add    esp,0x10
c0011394:	84 c0                	test   al,al
c0011396:	74 2f                	je     c00113c7 <x87EmulHandler(regs*, void*)+0x4c>
c0011398:	83 c4 08             	add    esp,0x8
c001139b:	5b                   	pop    ebx
c001139c:	c3                   	ret    
c001139d:	83 ec 08             	sub    esp,0x8
c00113a0:	8b 1d 88 43 02 c0    	mov    ebx,DWORD PTR ds:0xc0024388
c00113a6:	6a 01                	push   0x1
c00113a8:	68 c0 1b 02 c0       	push   0xc0021bc0
c00113ad:	e8 c1 6e 00 00       	call   c0018273 <Thr::loadDLL(char const*, bool)>
c00113b2:	5a                   	pop    edx
c00113b3:	59                   	pop    ecx
c00113b4:	53                   	push   ebx
c00113b5:	50                   	push   eax
c00113b6:	e8 7e 70 00 00       	call   c0018439 <Thr::executeDLL(unsigned long, void*)>
c00113bb:	a1 14 45 02 c0       	mov    eax,ds:0xc0024514
c00113c0:	83 c4 10             	add    esp,0x10
c00113c3:	85 c0                	test   eax,eax
c00113c5:	75 c1                	jne    c0011388 <x87EmulHandler(regs*, void*)+0xd>
c00113c7:	83 ec 0c             	sub    esp,0xc
c00113ca:	68 dd 1b 02 c0       	push   0xc0021bdd
c00113cf:	e8 53 dd ff ff       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c00113d4:	58                   	pop    eax
c00113d5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00113d9:	e8 86 fb ff ff       	call   c0010f64 <displayDebugInfo(regs*)>

c00113de <gpFault(regs*, void*)>:
c00113de:	53                   	push   ebx
c00113df:	83 ec 14             	sub    esp,0x14
c00113e2:	c7 05 10 45 02 c0 b7 96 01 c0 	mov    DWORD PTR ds:0xc0024510,0xc00196b7
c00113ec:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00113f0:	53                   	push   ebx
c00113f1:	e8 c1 82 00 00       	call   c00196b7 <Vm::faultHandler(regs*)>
c00113f6:	83 c4 10             	add    esp,0x10
c00113f9:	84 c0                	test   al,al
c00113fb:	74 05                	je     c0011402 <gpFault(regs*, void*)+0x24>
c00113fd:	83 c4 08             	add    esp,0x8
c0011400:	5b                   	pop    ebx
c0011401:	c3                   	ret    
c0011402:	83 ec 0c             	sub    esp,0xc
c0011405:	68 dd 1b 02 c0       	push   0xc0021bdd
c001140a:	e8 18 dd ff ff       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c001140f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011412:	e8 4d fb ff ff       	call   c0010f64 <displayDebugInfo(regs*)>

c0011417 <pgFault(regs*, void*)>:
c0011417:	83 ec 18             	sub    esp,0x18
c001141a:	68 f8 1b 02 c0       	push   0xc0021bf8
c001141f:	e8 03 dd ff ff       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c0011424:	58                   	pop    eax
c0011425:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011429:	e8 36 fb ff ff       	call   c0010f64 <displayDebugInfo(regs*)>

c001142e <otherISRHandler(regs*, void*)>:
c001142e:	53                   	push   ebx
c001142f:	83 ec 0c             	sub    esp,0xc
c0011432:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0011436:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0011439:	50                   	push   eax
c001143a:	50                   	push   eax
c001143b:	68 05 1c 02 c0       	push   0xc0021c05
c0011440:	e8 e2 dc ff ff       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c0011445:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011448:	e8 17 fb ff ff       	call   c0010f64 <displayDebugInfo(regs*)>

c001144d <opcodeFault(regs*, void*)>:
c001144d:	55                   	push   ebp
c001144e:	89 e5                	mov    ebp,esp
c0011450:	56                   	push   esi
c0011451:	53                   	push   ebx
c0011452:	83 ec 40             	sub    esp,0x40
c0011455:	e8 16 33 00 00       	call   c0014770 <thisCPU()>
c001145a:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c0011460:	84 c0                	test   al,al
c0011462:	74 24                	je     c0011488 <opcodeFault(regs*, void*)+0x3b>
c0011464:	83 ec 0c             	sub    esp,0xc
c0011467:	68 24 1c 02 c0       	push   0xc0021c24
c001146c:	e8 b6 dc ff ff       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c0011471:	83 c4 10             	add    esp,0x10
c0011474:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011477:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001147a:	8d 50 19             	lea    edx,[eax+0x19]
c001147d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011480:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011483:	e9 77 05 00 00       	jmp    c00119ff <opcodeFault(regs*, void*)+0x5b2>
c0011488:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001148b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001148e:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0011491:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c0011495:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c0011499:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001149c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001149f:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00114a2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00114a5:	8a 00                	mov    al,BYTE PTR [eax]
c00114a7:	3c f0                	cmp    al,0xf0
c00114a9:	75 17                	jne    c00114c2 <opcodeFault(regs*, void*)+0x75>
c00114ab:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00114ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114b1:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00114b4:	8d 50 01             	lea    edx,[eax+0x1]
c00114b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114ba:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00114bd:	e9 da 00 00 00       	jmp    c001159c <opcodeFault(regs*, void*)+0x14f>
c00114c2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00114c5:	8a 00                	mov    al,BYTE PTR [eax]
c00114c7:	3c f2                	cmp    al,0xf2
c00114c9:	74 09                	je     c00114d4 <opcodeFault(regs*, void*)+0x87>
c00114cb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00114ce:	8a 00                	mov    al,BYTE PTR [eax]
c00114d0:	3c f3                	cmp    al,0xf3
c00114d2:	75 1b                	jne    c00114ef <opcodeFault(regs*, void*)+0xa2>
c00114d4:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00114d8:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00114db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114de:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00114e1:	8d 50 01             	lea    edx,[eax+0x1]
c00114e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114e7:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00114ea:	e9 ad 00 00 00       	jmp    c001159c <opcodeFault(regs*, void*)+0x14f>
c00114ef:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00114f2:	8a 00                	mov    al,BYTE PTR [eax]
c00114f4:	3c 66                	cmp    al,0x66
c00114f6:	75 1f                	jne    c0011517 <opcodeFault(regs*, void*)+0xca>
c00114f8:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00114fc:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c0011500:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0011503:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011506:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0011509:	8d 50 01             	lea    edx,[eax+0x1]
c001150c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001150f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011512:	e9 85 00 00 00       	jmp    c001159c <opcodeFault(regs*, void*)+0x14f>
c0011517:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001151a:	8a 00                	mov    al,BYTE PTR [eax]
c001151c:	3c 67                	cmp    al,0x67
c001151e:	75 18                	jne    c0011538 <opcodeFault(regs*, void*)+0xeb>
c0011520:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0011524:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0011527:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001152a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001152d:	8d 50 01             	lea    edx,[eax+0x1]
c0011530:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011533:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011536:	eb 64                	jmp    c001159c <opcodeFault(regs*, void*)+0x14f>
c0011538:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001153b:	8a 00                	mov    al,BYTE PTR [eax]
c001153d:	3c 2e                	cmp    al,0x2e
c001153f:	74 09                	je     c001154a <opcodeFault(regs*, void*)+0xfd>
c0011541:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011544:	8a 00                	mov    al,BYTE PTR [eax]
c0011546:	3c 3e                	cmp    al,0x3e
c0011548:	75 18                	jne    c0011562 <opcodeFault(regs*, void*)+0x115>
c001154a:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c001154e:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0011551:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011554:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0011557:	8d 50 01             	lea    edx,[eax+0x1]
c001155a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001155d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011560:	eb 3a                	jmp    c001159c <opcodeFault(regs*, void*)+0x14f>
c0011562:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011565:	8a 00                	mov    al,BYTE PTR [eax]
c0011567:	3c 36                	cmp    al,0x36
c0011569:	74 1b                	je     c0011586 <opcodeFault(regs*, void*)+0x139>
c001156b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001156e:	8a 00                	mov    al,BYTE PTR [eax]
c0011570:	3c 26                	cmp    al,0x26
c0011572:	74 12                	je     c0011586 <opcodeFault(regs*, void*)+0x139>
c0011574:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011577:	8a 00                	mov    al,BYTE PTR [eax]
c0011579:	3c 64                	cmp    al,0x64
c001157b:	74 09                	je     c0011586 <opcodeFault(regs*, void*)+0x139>
c001157d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011580:	8a 00                	mov    al,BYTE PTR [eax]
c0011582:	3c 65                	cmp    al,0x65
c0011584:	75 16                	jne    c001159c <opcodeFault(regs*, void*)+0x14f>
c0011586:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c001158a:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001158d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011590:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0011593:	8d 50 01             	lea    edx,[eax+0x1]
c0011596:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011599:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001159c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001159f:	8a 00                	mov    al,BYTE PTR [eax]
c00115a1:	3c 0f                	cmp    al,0xf
c00115a3:	0f 85 ad 00 00 00    	jne    c0011656 <opcodeFault(regs*, void*)+0x209>
c00115a9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00115ac:	40                   	inc    eax
c00115ad:	8a 00                	mov    al,BYTE PTR [eax]
c00115af:	3c c2                	cmp    al,0xc2
c00115b1:	74 0e                	je     c00115c1 <opcodeFault(regs*, void*)+0x174>
c00115b3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00115b6:	40                   	inc    eax
c00115b7:	8a 00                	mov    al,BYTE PTR [eax]
c00115b9:	3c c3                	cmp    al,0xc3
c00115bb:	0f 85 95 00 00 00    	jne    c0011656 <opcodeFault(regs*, void*)+0x209>
c00115c1:	83 ec 0c             	sub    esp,0xc
c00115c4:	68 47 1c 02 c0       	push   0xc0021c47
c00115c9:	e8 59 db ff ff       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c00115ce:	83 c4 10             	add    esp,0x10
c00115d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115d4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00115d7:	8d 50 01             	lea    edx,[eax+0x1]
c00115da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115dd:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00115e0:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00115e3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00115e6:	8a 00                	mov    al,BYTE PTR [eax]
c00115e8:	8d 50 fe             	lea    edx,[eax-0x2]
c00115eb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00115ee:	88 10                	mov    BYTE PTR [eax],dl
c00115f0:	8d 45 c2             	lea    eax,[ebp-0x3e]
c00115f3:	50                   	push   eax
c00115f4:	8d 45 c3             	lea    eax,[ebp-0x3d]
c00115f7:	50                   	push   eax
c00115f8:	8d 45 c4             	lea    eax,[ebp-0x3c]
c00115fb:	50                   	push   eax
c00115fc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00115ff:	e8 f4 40 00 00       	call   c00156f8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0011604:	83 c4 10             	add    esp,0x10
c0011607:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001160a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001160d:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0011610:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0011613:	01 d0                	add    eax,edx
c0011615:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0011618:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001161b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001161e:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0011621:	48                   	dec    eax
c0011622:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0011625:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011628:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001162b:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001162e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011631:	83 ec 04             	sub    esp,0x4
c0011634:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0011637:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c001163a:	50                   	push   eax
c001163b:	e8 29 eb fe ff       	call   c0000169 <voodooXADD>
c0011640:	83 c4 10             	add    esp,0x10
c0011643:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0011646:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0011649:	01 c2                	add    edx,eax
c001164b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001164e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011651:	e9 a9 03 00 00       	jmp    c00119ff <opcodeFault(regs*, void*)+0x5b2>
c0011656:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011659:	8a 00                	mov    al,BYTE PTR [eax]
c001165b:	3c 0f                	cmp    al,0xf
c001165d:	0f 85 8b 01 00 00    	jne    c00117ee <opcodeFault(regs*, void*)+0x3a1>
c0011663:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011666:	40                   	inc    eax
c0011667:	8a 00                	mov    al,BYTE PTR [eax]
c0011669:	3c c7                	cmp    al,0xc7
c001166b:	0f 86 7d 01 00 00    	jbe    c00117ee <opcodeFault(regs*, void*)+0x3a1>
c0011671:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011674:	40                   	inc    eax
c0011675:	8a 00                	mov    al,BYTE PTR [eax]
c0011677:	3c cf                	cmp    al,0xcf
c0011679:	0f 87 6f 01 00 00    	ja     c00117ee <opcodeFault(regs*, void*)+0x3a1>
c001167f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011682:	40                   	inc    eax
c0011683:	8a 00                	mov    al,BYTE PTR [eax]
c0011685:	83 c0 38             	add    eax,0x38
c0011688:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001168b:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c001168f:	75 0b                	jne    c001169c <opcodeFault(regs*, void*)+0x24f>
c0011691:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011694:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0011697:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001169a:	eb 75                	jmp    c0011711 <opcodeFault(regs*, void*)+0x2c4>
c001169c:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c00116a0:	75 0b                	jne    c00116ad <opcodeFault(regs*, void*)+0x260>
c00116a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00116a5:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00116a8:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00116ab:	eb 64                	jmp    c0011711 <opcodeFault(regs*, void*)+0x2c4>
c00116ad:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c00116b1:	75 0b                	jne    c00116be <opcodeFault(regs*, void*)+0x271>
c00116b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00116b6:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00116b9:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00116bc:	eb 53                	jmp    c0011711 <opcodeFault(regs*, void*)+0x2c4>
c00116be:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c00116c2:	75 0b                	jne    c00116cf <opcodeFault(regs*, void*)+0x282>
c00116c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00116c7:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00116ca:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00116cd:	eb 42                	jmp    c0011711 <opcodeFault(regs*, void*)+0x2c4>
c00116cf:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c00116d3:	75 0b                	jne    c00116e0 <opcodeFault(regs*, void*)+0x293>
c00116d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00116d8:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00116db:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00116de:	eb 31                	jmp    c0011711 <opcodeFault(regs*, void*)+0x2c4>
c00116e0:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c00116e4:	75 0b                	jne    c00116f1 <opcodeFault(regs*, void*)+0x2a4>
c00116e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00116e9:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00116ec:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00116ef:	eb 20                	jmp    c0011711 <opcodeFault(regs*, void*)+0x2c4>
c00116f1:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c00116f5:	75 0b                	jne    c0011702 <opcodeFault(regs*, void*)+0x2b5>
c00116f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00116fa:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00116fd:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0011700:	eb 0f                	jmp    c0011711 <opcodeFault(regs*, void*)+0x2c4>
c0011702:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0011706:	75 09                	jne    c0011711 <opcodeFault(regs*, void*)+0x2c4>
c0011708:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001170b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001170e:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0011711:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c0011715:	74 10                	je     c0011727 <opcodeFault(regs*, void*)+0x2da>
c0011717:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c001171e:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c0011725:	eb 2d                	jmp    c0011754 <opcodeFault(regs*, void*)+0x307>
c0011727:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001172a:	c1 e0 18             	shl    eax,0x18
c001172d:	89 c2                	mov    edx,eax
c001172f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0011732:	c1 e0 08             	shl    eax,0x8
c0011735:	25 00 00 ff 00       	and    eax,0xff0000
c001173a:	09 c2                	or     edx,eax
c001173c:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001173f:	c1 e8 08             	shr    eax,0x8
c0011742:	25 00 ff 00 00       	and    eax,0xff00
c0011747:	09 c2                	or     edx,eax
c0011749:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001174c:	c1 e8 18             	shr    eax,0x18
c001174f:	09 d0                	or     eax,edx
c0011751:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0011754:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0011758:	75 0b                	jne    c0011765 <opcodeFault(regs*, void*)+0x318>
c001175a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001175d:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0011760:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0011763:	eb 75                	jmp    c00117da <opcodeFault(regs*, void*)+0x38d>
c0011765:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0011769:	75 0b                	jne    c0011776 <opcodeFault(regs*, void*)+0x329>
c001176b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001176e:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0011771:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0011774:	eb 64                	jmp    c00117da <opcodeFault(regs*, void*)+0x38d>
c0011776:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c001177a:	75 0b                	jne    c0011787 <opcodeFault(regs*, void*)+0x33a>
c001177c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001177f:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0011782:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0011785:	eb 53                	jmp    c00117da <opcodeFault(regs*, void*)+0x38d>
c0011787:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c001178b:	75 0b                	jne    c0011798 <opcodeFault(regs*, void*)+0x34b>
c001178d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011790:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0011793:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0011796:	eb 42                	jmp    c00117da <opcodeFault(regs*, void*)+0x38d>
c0011798:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c001179c:	75 0b                	jne    c00117a9 <opcodeFault(regs*, void*)+0x35c>
c001179e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117a1:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00117a4:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c00117a7:	eb 31                	jmp    c00117da <opcodeFault(regs*, void*)+0x38d>
c00117a9:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c00117ad:	75 0b                	jne    c00117ba <opcodeFault(regs*, void*)+0x36d>
c00117af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117b2:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00117b5:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00117b8:	eb 20                	jmp    c00117da <opcodeFault(regs*, void*)+0x38d>
c00117ba:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c00117be:	75 0b                	jne    c00117cb <opcodeFault(regs*, void*)+0x37e>
c00117c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117c3:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00117c6:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00117c9:	eb 0f                	jmp    c00117da <opcodeFault(regs*, void*)+0x38d>
c00117cb:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c00117cf:	75 09                	jne    c00117da <opcodeFault(regs*, void*)+0x38d>
c00117d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117d4:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00117d7:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00117da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117dd:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00117e0:	8d 50 02             	lea    edx,[eax+0x2]
c00117e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117e6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00117e9:	e9 11 02 00 00       	jmp    c00119ff <opcodeFault(regs*, void*)+0x5b2>
c00117ee:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00117f1:	8a 00                	mov    al,BYTE PTR [eax]
c00117f3:	3c 0f                	cmp    al,0xf
c00117f5:	0f 85 76 01 00 00    	jne    c0011971 <opcodeFault(regs*, void*)+0x524>
c00117fb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00117fe:	40                   	inc    eax
c00117ff:	8a 00                	mov    al,BYTE PTR [eax]
c0011801:	3c c7                	cmp    al,0xc7
c0011803:	0f 85 68 01 00 00    	jne    c0011971 <opcodeFault(regs*, void*)+0x524>
c0011809:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001180c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001180f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0011812:	8d 50 01             	lea    edx,[eax+0x1]
c0011815:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011818:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001181b:	8d 45 ba             	lea    eax,[ebp-0x46]
c001181e:	50                   	push   eax
c001181f:	8d 45 bb             	lea    eax,[ebp-0x45]
c0011822:	50                   	push   eax
c0011823:	8d 45 bc             	lea    eax,[ebp-0x44]
c0011826:	50                   	push   eax
c0011827:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001182a:	e8 c9 3e 00 00       	call   c00156f8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001182f:	83 c4 10             	add    esp,0x10
c0011832:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0011835:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c0011838:	83 f0 01             	xor    eax,0x1
c001183b:	84 c0                	test   al,al
c001183d:	0f 84 2e 01 00 00    	je     c0011971 <opcodeFault(regs*, void*)+0x524>
c0011843:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c0011846:	3c 01                	cmp    al,0x1
c0011848:	0f 85 23 01 00 00    	jne    c0011971 <opcodeFault(regs*, void*)+0x524>
c001184e:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c0011851:	83 f0 01             	xor    eax,0x1
c0011854:	84 c0                	test   al,al
c0011856:	0f 84 15 01 00 00    	je     c0011971 <opcodeFault(regs*, void*)+0x524>
c001185c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001185f:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0011862:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0011865:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c001186c:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c001186f:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0011872:	89 c2                	mov    edx,eax
c0011874:	b8 00 00 00 00       	mov    eax,0x0
c0011879:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c001187c:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c001187f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011882:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0011885:	ba 00 00 00 00       	mov    edx,0x0
c001188a:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c001188d:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c0011890:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011893:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0011896:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0011899:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c00118a0:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c00118a3:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00118a6:	89 c2                	mov    edx,eax
c00118a8:	b8 00 00 00 00       	mov    eax,0x0
c00118ad:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c00118b0:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c00118b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118b6:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00118b9:	ba 00 00 00 00       	mov    edx,0x0
c00118be:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c00118c1:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c00118c4:	e8 7b 6f 00 00       	call   c0018844 <lockScheduler()>
c00118c9:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00118cc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00118cf:	8b 00                	mov    eax,DWORD PTR [eax]
c00118d1:	89 c1                	mov    ecx,eax
c00118d3:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c00118d6:	89 cb                	mov    ebx,ecx
c00118d8:	89 d0                	mov    eax,edx
c00118da:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c00118dd:	89 c6                	mov    esi,eax
c00118df:	89 f0                	mov    eax,esi
c00118e1:	09 d8                	or     eax,ebx
c00118e3:	85 c0                	test   eax,eax
c00118e5:	75 21                	jne    c0011908 <opcodeFault(regs*, void*)+0x4bb>
c00118e7:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00118ea:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c00118ed:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00118f0:	89 01                	mov    DWORD PTR [ecx],eax
c00118f2:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00118f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118f8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00118fb:	83 c8 40             	or     eax,0x40
c00118fe:	89 c2                	mov    edx,eax
c0011900:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011903:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0011906:	eb 3e                	jmp    c0011946 <opcodeFault(regs*, void*)+0x4f9>
c0011908:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001190b:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001190e:	8b 00                	mov    eax,DWORD PTR [eax]
c0011910:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0011913:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0011916:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0011919:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001191c:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c001191f:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0011922:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0011925:	89 d0                	mov    eax,edx
c0011927:	31 d2                	xor    edx,edx
c0011929:	89 c3                	mov    ebx,eax
c001192b:	89 d6                	mov    esi,edx
c001192d:	89 da                	mov    edx,ebx
c001192f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011932:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0011935:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011938:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001193b:	83 e0 bf             	and    eax,0xffffffbf
c001193e:	89 c2                	mov    edx,eax
c0011940:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011943:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0011946:	e8 fb 6e 00 00       	call   c0018846 <unlockScheduler()>
c001194b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001194e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0011951:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c0011954:	01 c2                	add    edx,eax
c0011956:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011959:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001195c:	83 ec 0c             	sub    esp,0xc
c001195f:	68 56 1c 02 c0       	push   0xc0021c56
c0011964:	e8 be d7 ff ff       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c0011969:	83 c4 10             	add    esp,0x10
c001196c:	e9 8e 00 00 00       	jmp    c00119ff <opcodeFault(regs*, void*)+0x5b2>
c0011971:	83 ec 0c             	sub    esp,0xc
c0011974:	68 69 1c 02 c0       	push   0xc0021c69
c0011979:	e8 a9 d7 ff ff       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c001197e:	83 c4 10             	add    esp,0x10
c0011981:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011984:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0011987:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001198a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001198d:	c1 e0 04             	shl    eax,0x4
c0011990:	01 d0                	add    eax,edx
c0011992:	83 c0 03             	add    eax,0x3
c0011995:	8a 00                	mov    al,BYTE PTR [eax]
c0011997:	0f b6 d8             	movzx  ebx,al
c001199a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001199d:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00119a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00119a3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00119a6:	c1 e0 04             	shl    eax,0x4
c00119a9:	01 d0                	add    eax,edx
c00119ab:	83 c0 02             	add    eax,0x2
c00119ae:	8a 00                	mov    al,BYTE PTR [eax]
c00119b0:	0f b6 c8             	movzx  ecx,al
c00119b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00119b6:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00119b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00119bc:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00119bf:	c1 e0 04             	shl    eax,0x4
c00119c2:	01 d0                	add    eax,edx
c00119c4:	40                   	inc    eax
c00119c5:	8a 00                	mov    al,BYTE PTR [eax]
c00119c7:	0f b6 d0             	movzx  edx,al
c00119ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00119cd:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c00119d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00119d3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00119d6:	c1 e0 04             	shl    eax,0x4
c00119d9:	01 f0                	add    eax,esi
c00119db:	8a 00                	mov    al,BYTE PTR [eax]
c00119dd:	0f b6 c0             	movzx  eax,al
c00119e0:	83 ec 0c             	sub    esp,0xc
c00119e3:	53                   	push   ebx
c00119e4:	51                   	push   ecx
c00119e5:	52                   	push   edx
c00119e6:	50                   	push   eax
c00119e7:	68 7c 1c 02 c0       	push   0xc0021c7c
c00119ec:	e8 36 d7 ff ff       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c00119f1:	83 c4 20             	add    esp,0x20
c00119f4:	83 ec 0c             	sub    esp,0xc
c00119f7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00119fa:	e8 65 f5 ff ff       	call   c0010f64 <displayDebugInfo(regs*)>
c00119ff:	8d 65 f8             	lea    esp,[ebp-0x8]
c0011a02:	5b                   	pop    ebx
c0011a03:	5e                   	pop    esi
c0011a04:	5d                   	pop    ebp
c0011a05:	c3                   	ret    

c0011a06 <displayProgramFault(char const*)>:
c0011a06:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011a0b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011a0e:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0011a14:	85 c0                	test   eax,eax
c0011a16:	74 15                	je     c0011a2d <displayProgramFault(char const*)+0x27>
c0011a18:	83 ec 0c             	sub    esp,0xc
c0011a1b:	6a 04                	push   0x4
c0011a1d:	6a 0f                	push   0xf
c0011a1f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011a23:	50                   	push   eax
c0011a24:	e8 23 ba ff ff       	call   c000d44c <VgaText::puts(char const*, VgaColour, VgaColour)>
c0011a29:	83 c4 1c             	add    esp,0x1c
c0011a2c:	c3                   	ret    
c0011a2d:	c3                   	ret    

c0011a2e <setupInterruptController()>:
c0011a2e:	55                   	push   ebp
c0011a2f:	89 e5                	mov    ebp,esp
c0011a31:	53                   	push   ebx
c0011a32:	83 ec 14             	sub    esp,0x14
c0011a35:	e8 33 2d 00 00       	call   c001476d <getCPUNumber()>
c0011a3a:	85 c0                	test   eax,eax
c0011a3c:	0f 95 c0             	setne  al
c0011a3f:	84 c0                	test   al,al
c0011a41:	74 56                	je     c0011a99 <setupInterruptController()+0x6b>
c0011a43:	83 ec 0c             	sub    esp,0xc
c0011a46:	68 58 21 00 00       	push   0x2158
c0011a4b:	e8 e8 d5 ff ff       	call   c000f038 <operator new(unsigned long)>
c0011a50:	83 c4 10             	add    esp,0x10
c0011a53:	89 c3                	mov    ebx,eax
c0011a55:	83 ec 0c             	sub    esp,0xc
c0011a58:	53                   	push   ebx
c0011a59:	e8 94 c7 00 00       	call   c001e1f2 <APIC::APIC()>
c0011a5e:	83 c4 10             	add    esp,0x10
c0011a61:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c0011a64:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c0011a67:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0011a6a:	8b 00                	mov    eax,DWORD PTR [eax]
c0011a6c:	83 c0 08             	add    eax,0x8
c0011a6f:	8b 00                	mov    eax,DWORD PTR [eax]
c0011a71:	6a 00                	push   0x0
c0011a73:	6a 00                	push   0x0
c0011a75:	6a 00                	push   0x0
c0011a77:	52                   	push   edx
c0011a78:	ff d0                	call   eax
c0011a7a:	83 c4 10             	add    esp,0x10
c0011a7d:	a1 88 43 02 c0       	mov    eax,ds:0xc0024388
c0011a82:	83 ec 08             	sub    esp,0x8
c0011a85:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0011a88:	50                   	push   eax
c0011a89:	e8 a4 ea ff ff       	call   c0010532 <Device::addChild(Device*)>
c0011a8e:	83 c4 10             	add    esp,0x10
c0011a91:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0011a94:	e9 48 03 00 00       	jmp    c0011de1 <setupInterruptController()+0x3b3>
c0011a99:	a1 88 43 02 c0       	mov    eax,ds:0xc0024388
c0011a9e:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011aa4:	83 e0 01             	and    eax,0x1
c0011aa7:	84 c0                	test   al,al
c0011aa9:	0f 95 c0             	setne  al
c0011aac:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0011aaf:	83 ec 0c             	sub    esp,0xc
c0011ab2:	68 58 21 00 00       	push   0x2158
c0011ab7:	e8 7c d5 ff ff       	call   c000f038 <operator new(unsigned long)>
c0011abc:	83 c4 10             	add    esp,0x10
c0011abf:	89 c3                	mov    ebx,eax
c0011ac1:	83 ec 0c             	sub    esp,0xc
c0011ac4:	53                   	push   ebx
c0011ac5:	e8 ea cb 00 00       	call   c001e6b4 <PIC::PIC()>
c0011aca:	83 c4 10             	add    esp,0x10
c0011acd:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0011ad0:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0011ad3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011ad6:	8b 00                	mov    eax,DWORD PTR [eax]
c0011ad8:	83 c0 08             	add    eax,0x8
c0011adb:	8b 00                	mov    eax,DWORD PTR [eax]
c0011add:	6a 00                	push   0x0
c0011adf:	6a 00                	push   0x0
c0011ae1:	6a 00                	push   0x0
c0011ae3:	52                   	push   edx
c0011ae4:	ff d0                	call   eax
c0011ae6:	83 c4 10             	add    esp,0x10
c0011ae9:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c0011aed:	74 6e                	je     c0011b5d <setupInterruptController()+0x12f>
c0011aef:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0011af2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011af5:	8b 00                	mov    eax,DWORD PTR [eax]
c0011af7:	83 c0 0c             	add    eax,0xc
c0011afa:	8b 00                	mov    eax,DWORD PTR [eax]
c0011afc:	6a 00                	push   0x0
c0011afe:	6a 00                	push   0x0
c0011b00:	6a 00                	push   0x0
c0011b02:	52                   	push   edx
c0011b03:	ff d0                	call   eax
c0011b05:	83 c4 10             	add    esp,0x10
c0011b08:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0011b0c:	74 15                	je     c0011b23 <setupInterruptController()+0xf5>
c0011b0e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011b11:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b13:	83 c0 04             	add    eax,0x4
c0011b16:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b18:	83 ec 0c             	sub    esp,0xc
c0011b1b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011b1e:	ff d0                	call   eax
c0011b20:	83 c4 10             	add    esp,0x10
c0011b23:	83 ec 0c             	sub    esp,0xc
c0011b26:	68 58 21 00 00       	push   0x2158
c0011b2b:	e8 08 d5 ff ff       	call   c000f038 <operator new(unsigned long)>
c0011b30:	83 c4 10             	add    esp,0x10
c0011b33:	89 c3                	mov    ebx,eax
c0011b35:	83 ec 0c             	sub    esp,0xc
c0011b38:	53                   	push   ebx
c0011b39:	e8 b4 c6 00 00       	call   c001e1f2 <APIC::APIC()>
c0011b3e:	83 c4 10             	add    esp,0x10
c0011b41:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0011b44:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0011b47:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011b4a:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b4c:	83 c0 08             	add    eax,0x8
c0011b4f:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b51:	6a 00                	push   0x0
c0011b53:	6a 00                	push   0x0
c0011b55:	6a 00                	push   0x0
c0011b57:	52                   	push   edx
c0011b58:	ff d0                	call   eax
c0011b5a:	83 c4 10             	add    esp,0x10
c0011b5d:	a1 88 43 02 c0       	mov    eax,ds:0xc0024388
c0011b62:	83 ec 08             	sub    esp,0x8
c0011b65:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011b68:	50                   	push   eax
c0011b69:	e8 c4 e9 ff ff       	call   c0010532 <Device::addChild(Device*)>
c0011b6e:	83 c4 10             	add    esp,0x10
c0011b71:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011b74:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b76:	83 c0 24             	add    eax,0x24
c0011b79:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b7b:	6a 00                	push   0x0
c0011b7d:	68 2e 14 01 c0       	push   0xc001142e
c0011b82:	6a 00                	push   0x0
c0011b84:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011b87:	ff d0                	call   eax
c0011b89:	83 c4 10             	add    esp,0x10
c0011b8c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011b8f:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b91:	83 c0 24             	add    eax,0x24
c0011b94:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b96:	6a 00                	push   0x0
c0011b98:	68 2e 14 01 c0       	push   0xc001142e
c0011b9d:	6a 01                	push   0x1
c0011b9f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011ba2:	ff d0                	call   eax
c0011ba4:	83 c4 10             	add    esp,0x10
c0011ba7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011baa:	8b 00                	mov    eax,DWORD PTR [eax]
c0011bac:	83 c0 24             	add    eax,0x24
c0011baf:	8b 00                	mov    eax,DWORD PTR [eax]
c0011bb1:	6a 00                	push   0x0
c0011bb3:	68 c7 0d 01 c0       	push   0xc0010dc7
c0011bb8:	6a 02                	push   0x2
c0011bba:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011bbd:	ff d0                	call   eax
c0011bbf:	83 c4 10             	add    esp,0x10
c0011bc2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011bc5:	8b 00                	mov    eax,DWORD PTR [eax]
c0011bc7:	83 c0 24             	add    eax,0x24
c0011bca:	8b 00                	mov    eax,DWORD PTR [eax]
c0011bcc:	6a 00                	push   0x0
c0011bce:	68 2e 14 01 c0       	push   0xc001142e
c0011bd3:	6a 03                	push   0x3
c0011bd5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011bd8:	ff d0                	call   eax
c0011bda:	83 c4 10             	add    esp,0x10
c0011bdd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011be0:	8b 00                	mov    eax,DWORD PTR [eax]
c0011be2:	83 c0 24             	add    eax,0x24
c0011be5:	8b 00                	mov    eax,DWORD PTR [eax]
c0011be7:	6a 00                	push   0x0
c0011be9:	68 2e 14 01 c0       	push   0xc001142e
c0011bee:	6a 04                	push   0x4
c0011bf0:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011bf3:	ff d0                	call   eax
c0011bf5:	83 c4 10             	add    esp,0x10
c0011bf8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011bfb:	8b 00                	mov    eax,DWORD PTR [eax]
c0011bfd:	83 c0 24             	add    eax,0x24
c0011c00:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c02:	6a 00                	push   0x0
c0011c04:	68 2e 14 01 c0       	push   0xc001142e
c0011c09:	6a 05                	push   0x5
c0011c0b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011c0e:	ff d0                	call   eax
c0011c10:	83 c4 10             	add    esp,0x10
c0011c13:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011c16:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c18:	83 c0 24             	add    eax,0x24
c0011c1b:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c1d:	6a 00                	push   0x0
c0011c1f:	68 4d 14 01 c0       	push   0xc001144d
c0011c24:	6a 06                	push   0x6
c0011c26:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011c29:	ff d0                	call   eax
c0011c2b:	83 c4 10             	add    esp,0x10
c0011c2e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011c31:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c33:	83 c0 24             	add    eax,0x24
c0011c36:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c38:	6a 00                	push   0x0
c0011c3a:	68 7b 13 01 c0       	push   0xc001137b
c0011c3f:	6a 07                	push   0x7
c0011c41:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011c44:	ff d0                	call   eax
c0011c46:	83 c4 10             	add    esp,0x10
c0011c49:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011c4c:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c4e:	83 c0 24             	add    eax,0x24
c0011c51:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c53:	6a 00                	push   0x0
c0011c55:	68 e2 0b 01 c0       	push   0xc0010be2
c0011c5a:	6a 08                	push   0x8
c0011c5c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011c5f:	ff d0                	call   eax
c0011c61:	83 c4 10             	add    esp,0x10
c0011c64:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011c67:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c69:	83 c0 24             	add    eax,0x24
c0011c6c:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c6e:	6a 00                	push   0x0
c0011c70:	68 2e 14 01 c0       	push   0xc001142e
c0011c75:	6a 09                	push   0x9
c0011c77:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011c7a:	ff d0                	call   eax
c0011c7c:	83 c4 10             	add    esp,0x10
c0011c7f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011c82:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c84:	83 c0 24             	add    eax,0x24
c0011c87:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c89:	6a 00                	push   0x0
c0011c8b:	68 2e 14 01 c0       	push   0xc001142e
c0011c90:	6a 0a                	push   0xa
c0011c92:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011c95:	ff d0                	call   eax
c0011c97:	83 c4 10             	add    esp,0x10
c0011c9a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011c9d:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c9f:	83 c0 24             	add    eax,0x24
c0011ca2:	8b 00                	mov    eax,DWORD PTR [eax]
c0011ca4:	6a 00                	push   0x0
c0011ca6:	68 2e 14 01 c0       	push   0xc001142e
c0011cab:	6a 0b                	push   0xb
c0011cad:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011cb0:	ff d0                	call   eax
c0011cb2:	83 c4 10             	add    esp,0x10
c0011cb5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011cb8:	8b 00                	mov    eax,DWORD PTR [eax]
c0011cba:	83 c0 24             	add    eax,0x24
c0011cbd:	8b 00                	mov    eax,DWORD PTR [eax]
c0011cbf:	6a 00                	push   0x0
c0011cc1:	68 2e 14 01 c0       	push   0xc001142e
c0011cc6:	6a 0c                	push   0xc
c0011cc8:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011ccb:	ff d0                	call   eax
c0011ccd:	83 c4 10             	add    esp,0x10
c0011cd0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011cd3:	8b 00                	mov    eax,DWORD PTR [eax]
c0011cd5:	83 c0 24             	add    eax,0x24
c0011cd8:	8b 00                	mov    eax,DWORD PTR [eax]
c0011cda:	6a 00                	push   0x0
c0011cdc:	68 de 13 01 c0       	push   0xc00113de
c0011ce1:	6a 0d                	push   0xd
c0011ce3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011ce6:	ff d0                	call   eax
c0011ce8:	83 c4 10             	add    esp,0x10
c0011ceb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011cee:	8b 00                	mov    eax,DWORD PTR [eax]
c0011cf0:	83 c0 24             	add    eax,0x24
c0011cf3:	8b 00                	mov    eax,DWORD PTR [eax]
c0011cf5:	6a 00                	push   0x0
c0011cf7:	68 17 14 01 c0       	push   0xc0011417
c0011cfc:	6a 0e                	push   0xe
c0011cfe:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011d01:	ff d0                	call   eax
c0011d03:	83 c4 10             	add    esp,0x10
c0011d06:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011d09:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d0b:	83 c0 24             	add    eax,0x24
c0011d0e:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d10:	6a 00                	push   0x0
c0011d12:	68 2e 14 01 c0       	push   0xc001142e
c0011d17:	6a 0f                	push   0xf
c0011d19:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011d1c:	ff d0                	call   eax
c0011d1e:	83 c4 10             	add    esp,0x10
c0011d21:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011d24:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d26:	83 c0 24             	add    eax,0x24
c0011d29:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d2b:	6a 00                	push   0x0
c0011d2d:	68 2e 14 01 c0       	push   0xc001142e
c0011d32:	6a 10                	push   0x10
c0011d34:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011d37:	ff d0                	call   eax
c0011d39:	83 c4 10             	add    esp,0x10
c0011d3c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011d3f:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d41:	83 c0 24             	add    eax,0x24
c0011d44:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d46:	6a 00                	push   0x0
c0011d48:	68 2e 14 01 c0       	push   0xc001142e
c0011d4d:	6a 11                	push   0x11
c0011d4f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011d52:	ff d0                	call   eax
c0011d54:	83 c4 10             	add    esp,0x10
c0011d57:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011d5a:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d5c:	83 c0 24             	add    eax,0x24
c0011d5f:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d61:	6a 00                	push   0x0
c0011d63:	68 2e 14 01 c0       	push   0xc001142e
c0011d68:	6a 12                	push   0x12
c0011d6a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011d6d:	ff d0                	call   eax
c0011d6f:	83 c4 10             	add    esp,0x10
c0011d72:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011d75:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d77:	83 c0 24             	add    eax,0x24
c0011d7a:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d7c:	6a 00                	push   0x0
c0011d7e:	68 2e 14 01 c0       	push   0xc001142e
c0011d83:	6a 13                	push   0x13
c0011d85:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011d88:	ff d0                	call   eax
c0011d8a:	83 c4 10             	add    esp,0x10
c0011d8d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011d90:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d92:	83 c0 24             	add    eax,0x24
c0011d95:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d97:	6a 00                	push   0x0
c0011d99:	68 2e 14 01 c0       	push   0xc001142e
c0011d9e:	6a 14                	push   0x14
c0011da0:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011da3:	ff d0                	call   eax
c0011da5:	83 c4 10             	add    esp,0x10
c0011da8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011dab:	8b 00                	mov    eax,DWORD PTR [eax]
c0011dad:	83 c0 24             	add    eax,0x24
c0011db0:	8b 00                	mov    eax,DWORD PTR [eax]
c0011db2:	6a 00                	push   0x0
c0011db4:	68 2e 14 01 c0       	push   0xc001142e
c0011db9:	6a 1e                	push   0x1e
c0011dbb:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011dbe:	ff d0                	call   eax
c0011dc0:	83 c4 10             	add    esp,0x10
c0011dc3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011dc6:	8b 00                	mov    eax,DWORD PTR [eax]
c0011dc8:	83 c0 24             	add    eax,0x24
c0011dcb:	8b 00                	mov    eax,DWORD PTR [eax]
c0011dcd:	6a 00                	push   0x0
c0011dcf:	68 5a 72 01 c0       	push   0xc001725a
c0011dd4:	6a 60                	push   0x60
c0011dd6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011dd9:	ff d0                	call   eax
c0011ddb:	83 c4 10             	add    esp,0x10
c0011dde:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011de1:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0011de4:	c9                   	leave  
c0011de5:	c3                   	ret    

c0011de6 <InterruptController::convertLegacyIRQNumber(int)>:
c0011de6:	55                   	push   ebp
c0011de7:	89 e5                	mov    ebp,esp
c0011de9:	83 ec 08             	sub    esp,0x8
c0011dec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011def:	83 ec 0c             	sub    esp,0xc
c0011df2:	50                   	push   eax
c0011df3:	e8 1c ea ff ff       	call   c0010814 <Device::getName()>
c0011df8:	83 c4 10             	add    esp,0x10
c0011dfb:	8a 00                	mov    al,BYTE PTR [eax]
c0011dfd:	3c 41                	cmp    al,0x41
c0011dff:	0f 94 c0             	sete   al
c0011e02:	84 c0                	test   al,al
c0011e04:	74 28                	je     c0011e2e <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0011e06:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0011e0a:	7f 12                	jg     c0011e1e <InterruptController::convertLegacyIRQNumber(int)+0x38>
c0011e0c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0011e0f:	05 e0 3a 02 c0       	add    eax,0xc0023ae0
c0011e14:	8a 00                	mov    al,BYTE PTR [eax]
c0011e16:	0f b6 c0             	movzx  eax,al
c0011e19:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0011e1c:	eb 10                	jmp    c0011e2e <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0011e1e:	83 ec 0c             	sub    esp,0xc
c0011e21:	68 f4 19 02 c0       	push   0xc00219f4
c0011e26:	e8 c5 3a 00 00       	call   c00158f0 <Krnl::panic(char const*)>
c0011e2b:	83 c4 10             	add    esp,0x10
c0011e2e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0011e31:	c9                   	leave  
c0011e32:	c3                   	ret    
c0011e33:	90                   	nop

c0011e34 <startGUI(void*)>:
c0011e34:	55                   	push   ebp
c0011e35:	89 e5                	mov    ebp,esp
c0011e37:	53                   	push   ebx
c0011e38:	83 ec 04             	sub    esp,0x4
c0011e3b:	e8 06 6a 00 00       	call   c0018846 <unlockScheduler()>
c0011e40:	e8 ea 69 00 00       	call   c001882f <getIRQNestingLevel()>
c0011e45:	83 ec 08             	sub    esp,0x8
c0011e48:	50                   	push   eax
c0011e49:	68 e4 1c 02 c0       	push   0xc0021ce4
c0011e4e:	e8 d4 d2 ff ff       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c0011e53:	83 c4 10             	add    esp,0x10
c0011e56:	8b 1d 88 43 02 c0    	mov    ebx,DWORD PTR ds:0xc0024388
c0011e5c:	83 ec 08             	sub    esp,0x8
c0011e5f:	6a 01                	push   0x1
c0011e61:	68 fe 1c 02 c0       	push   0xc0021cfe
c0011e66:	e8 08 64 00 00       	call   c0018273 <Thr::loadDLL(char const*, bool)>
c0011e6b:	83 c4 10             	add    esp,0x10
c0011e6e:	83 ec 08             	sub    esp,0x8
c0011e71:	53                   	push   ebx
c0011e72:	50                   	push   eax
c0011e73:	e8 c1 65 00 00       	call   c0018439 <Thr::executeDLL(unsigned long, void*)>
c0011e78:	83 c4 10             	add    esp,0x10
c0011e7b:	8b 1d 88 43 02 c0    	mov    ebx,DWORD PTR ds:0xc0024388
c0011e81:	83 ec 08             	sub    esp,0x8
c0011e84:	6a 01                	push   0x1
c0011e86:	68 18 1d 02 c0       	push   0xc0021d18
c0011e8b:	e8 e3 63 00 00       	call   c0018273 <Thr::loadDLL(char const*, bool)>
c0011e90:	83 c4 10             	add    esp,0x10
c0011e93:	83 ec 08             	sub    esp,0x8
c0011e96:	53                   	push   ebx
c0011e97:	50                   	push   eax
c0011e98:	e8 9c 65 00 00       	call   c0018439 <Thr::executeDLL(unsigned long, void*)>
c0011e9d:	83 c4 10             	add    esp,0x10
c0011ea0:	90                   	nop
c0011ea1:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0011ea4:	c9                   	leave  
c0011ea5:	c3                   	ret    

c0011ea6 <sendKeyToTerminal(unsigned char)>:
c0011ea6:	55                   	push   ebp
c0011ea7:	89 e5                	mov    ebp,esp
c0011ea9:	83 ec 28             	sub    esp,0x28
c0011eac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011eaf:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0011eb2:	a1 44 44 02 c0       	mov    eax,ds:0xc0024444
c0011eb7:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0011ebb:	83 ec 08             	sub    esp,0x8
c0011ebe:	52                   	push   edx
c0011ebf:	50                   	push   eax
c0011ec0:	e8 c3 ba ff ff       	call   c000d988 <VgaText::receiveKey(unsigned char)>
c0011ec5:	83 c4 10             	add    esp,0x10
c0011ec8:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c0011ecc:	75 41                	jne    c0011f0f <sendKeyToTerminal(unsigned char)+0x69>
c0011ece:	e8 98 69 00 00       	call   c001886b <lockStuff()>
c0011ed3:	a1 20 45 02 c0       	mov    eax,ds:0xc0024520
c0011ed8:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0011edb:	c7 05 20 45 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024520,0x0
c0011ee5:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0011ee9:	74 1f                	je     c0011f0a <sendKeyToTerminal(unsigned char)+0x64>
c0011eeb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011eee:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0011ef1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0011ef4:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011ef7:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0011efa:	83 ec 0c             	sub    esp,0xc
c0011efd:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0011f00:	e8 4f 6f 00 00       	call   c0018e54 <unblockTask(ThreadControlBlock*)>
c0011f05:	83 c4 10             	add    esp,0x10
c0011f08:	eb db                	jmp    c0011ee5 <sendKeyToTerminal(unsigned char)+0x3f>
c0011f0a:	e8 ee 6c 00 00       	call   c0018bfd <unlockStuff()>
c0011f0f:	90                   	nop
c0011f10:	c9                   	leave  
c0011f11:	c3                   	ret    

c0011f12 <sendKeyboardToken(KeyboardToken)>:
c0011f12:	55                   	push   ebp
c0011f13:	89 e5                	mov    ebp,esp
c0011f15:	83 ec 18             	sub    esp,0x18
c0011f18:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0011f1b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011f1e:	0f b7 c0             	movzx  eax,ax
c0011f21:	83 f2 01             	xor    edx,0x1
c0011f24:	88 90 40 45 02 c0    	mov    BYTE PTR [eax-0x3ffdbac0],dl
c0011f2a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011f2d:	66 3d 03 02          	cmp    ax,0x203
c0011f31:	75 07                	jne    c0011f3a <sendKeyboardToken(KeyboardToken)+0x28>
c0011f33:	a0 40 46 02 c0       	mov    al,ds:0xc0024640
c0011f38:	84 c0                	test   al,al
c0011f3a:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0011f3e:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c0011f41:	a0 48 49 02 c0       	mov    al,ds:0xc0024948
c0011f46:	38 c2                	cmp    dl,al
c0011f48:	74 1c                	je     c0011f66 <sendKeyboardToken(KeyboardToken)+0x54>
c0011f4a:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0011f4d:	a2 48 49 02 c0       	mov    ds:0xc0024948,al
c0011f52:	a0 48 49 02 c0       	mov    al,ds:0xc0024948
c0011f57:	0f b6 c0             	movzx  eax,al
c0011f5a:	83 ec 0c             	sub    esp,0xc
c0011f5d:	50                   	push   eax
c0011f5e:	e8 93 ac ff ff       	call   c000cbf6 <setTerminalScrollLock(bool)>
c0011f63:	83 c4 10             	add    esp,0x10
c0011f66:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0011f69:	84 c0                	test   al,al
c0011f6b:	0f 84 ae 00 00 00    	je     c001201f <sendKeyboardToken(KeyboardToken)+0x10d>
c0011f71:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011f74:	66 3d 10 03          	cmp    ax,0x310
c0011f78:	75 06                	jne    c0011f80 <sendKeyboardToken(KeyboardToken)+0x6e>
c0011f7a:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0011f80:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011f83:	66 3d 11 03          	cmp    ax,0x311
c0011f87:	75 06                	jne    c0011f8f <sendKeyboardToken(KeyboardToken)+0x7d>
c0011f89:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0011f8f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011f92:	66 3d 12 03          	cmp    ax,0x312
c0011f96:	75 06                	jne    c0011f9e <sendKeyboardToken(KeyboardToken)+0x8c>
c0011f98:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c0011f9e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011fa1:	66 3d 13 03          	cmp    ax,0x313
c0011fa5:	75 06                	jne    c0011fad <sendKeyboardToken(KeyboardToken)+0x9b>
c0011fa7:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c0011fad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011fb0:	66 3d 14 03          	cmp    ax,0x314
c0011fb4:	75 06                	jne    c0011fbc <sendKeyboardToken(KeyboardToken)+0xaa>
c0011fb6:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c0011fbc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011fbf:	66 3d 15 03          	cmp    ax,0x315
c0011fc3:	75 06                	jne    c0011fcb <sendKeyboardToken(KeyboardToken)+0xb9>
c0011fc5:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0011fcb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011fce:	66 3d 16 03          	cmp    ax,0x316
c0011fd2:	75 06                	jne    c0011fda <sendKeyboardToken(KeyboardToken)+0xc8>
c0011fd4:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c0011fda:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011fdd:	66 3d 17 03          	cmp    ax,0x317
c0011fe1:	75 06                	jne    c0011fe9 <sendKeyboardToken(KeyboardToken)+0xd7>
c0011fe3:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c0011fe9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011fec:	66 3d 18 03          	cmp    ax,0x318
c0011ff0:	75 06                	jne    c0011ff8 <sendKeyboardToken(KeyboardToken)+0xe6>
c0011ff2:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c0011ff8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011ffb:	66 3d 19 03          	cmp    ax,0x319
c0011fff:	75 06                	jne    c0012007 <sendKeyboardToken(KeyboardToken)+0xf5>
c0012001:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c0012007:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001200a:	66 3d 1a 03          	cmp    ax,0x31a
c001200e:	0f 85 c9 00 00 00    	jne    c00120dd <sendKeyboardToken(KeyboardToken)+0x1cb>
c0012014:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c001201a:	e9 be 00 00 00       	jmp    c00120dd <sendKeyboardToken(KeyboardToken)+0x1cb>
c001201f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012022:	66 3d 10 03          	cmp    ax,0x310
c0012026:	75 0a                	jne    c0012032 <sendKeyboardToken(KeyboardToken)+0x120>
c0012028:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c001202e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0012032:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012035:	66 3d 11 03          	cmp    ax,0x311
c0012039:	75 0a                	jne    c0012045 <sendKeyboardToken(KeyboardToken)+0x133>
c001203b:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0012041:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0012045:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012048:	66 3d 12 03          	cmp    ax,0x312
c001204c:	75 0a                	jne    c0012058 <sendKeyboardToken(KeyboardToken)+0x146>
c001204e:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c0012054:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0012058:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001205b:	66 3d 13 03          	cmp    ax,0x313
c001205f:	75 0a                	jne    c001206b <sendKeyboardToken(KeyboardToken)+0x159>
c0012061:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c0012067:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001206b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001206e:	66 3d 14 03          	cmp    ax,0x314
c0012072:	75 0a                	jne    c001207e <sendKeyboardToken(KeyboardToken)+0x16c>
c0012074:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c001207a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001207e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012081:	66 3d 15 03          	cmp    ax,0x315
c0012085:	75 0a                	jne    c0012091 <sendKeyboardToken(KeyboardToken)+0x17f>
c0012087:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c001208d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0012091:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012094:	66 3d 16 03          	cmp    ax,0x316
c0012098:	75 0a                	jne    c00120a4 <sendKeyboardToken(KeyboardToken)+0x192>
c001209a:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c00120a0:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00120a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00120a7:	66 3d 17 03          	cmp    ax,0x317
c00120ab:	75 0a                	jne    c00120b7 <sendKeyboardToken(KeyboardToken)+0x1a5>
c00120ad:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c00120b3:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00120b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00120ba:	66 3d 18 03          	cmp    ax,0x318
c00120be:	75 0a                	jne    c00120ca <sendKeyboardToken(KeyboardToken)+0x1b8>
c00120c0:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c00120c6:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00120ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00120cd:	66 3d 19 03          	cmp    ax,0x319
c00120d1:	75 0a                	jne    c00120dd <sendKeyboardToken(KeyboardToken)+0x1cb>
c00120d3:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c00120d9:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00120dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00120e0:	66 3d 00 02          	cmp    ax,0x200
c00120e4:	75 2a                	jne    c0012110 <sendKeyboardToken(KeyboardToken)+0x1fe>
c00120e6:	a0 40 49 02 c0       	mov    al,ds:0xc0024940
c00120eb:	83 f0 01             	xor    eax,0x1
c00120ee:	84 c0                	test   al,al
c00120f0:	74 1e                	je     c0012110 <sendKeyboardToken(KeyboardToken)+0x1fe>
c00120f2:	a1 d4 57 02 c0       	mov    eax,ds:0xc00257d4
c00120f7:	6a 01                	push   0x1
c00120f9:	6a 00                	push   0x0
c00120fb:	68 34 1e 01 c0       	push   0xc0011e34
c0012100:	50                   	push   eax
c0012101:	e8 68 68 00 00       	call   c001896e <Process::createThread(void (*)(void*), void*, int)>
c0012106:	83 c4 10             	add    esp,0x10
c0012109:	c6 05 40 49 02 c0 01 	mov    BYTE PTR ds:0xc0024940,0x1
c0012110:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012113:	66 3d 1d 03          	cmp    ax,0x31d
c0012117:	75 06                	jne    c001211f <sendKeyboardToken(KeyboardToken)+0x20d>
c0012119:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c001211f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012122:	66 3d 1c 03          	cmp    ax,0x31c
c0012126:	75 06                	jne    c001212e <sendKeyboardToken(KeyboardToken)+0x21c>
c0012128:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c001212e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012131:	66 3d 1b 03          	cmp    ax,0x31b
c0012135:	75 06                	jne    c001213d <sendKeyboardToken(KeyboardToken)+0x22b>
c0012137:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c001213d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012140:	66 3d 1e 03          	cmp    ax,0x31e
c0012144:	75 06                	jne    c001214c <sendKeyboardToken(KeyboardToken)+0x23a>
c0012146:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c001214c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001214f:	66 3d 1f 03          	cmp    ax,0x31f
c0012153:	75 06                	jne    c001215b <sendKeyboardToken(KeyboardToken)+0x249>
c0012155:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c001215b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001215e:	66 3d 1a 03          	cmp    ax,0x31a
c0012162:	75 06                	jne    c001216a <sendKeyboardToken(KeyboardToken)+0x258>
c0012164:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c001216a:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c001216e:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0012171:	83 f0 01             	xor    eax,0x1
c0012174:	84 c0                	test   al,al
c0012176:	74 77                	je     c00121ef <sendKeyboardToken(KeyboardToken)+0x2dd>
c0012178:	a0 41 46 02 c0       	mov    al,ds:0xc0024641
c001217d:	84 c0                	test   al,al
c001217f:	74 41                	je     c00121c2 <sendKeyboardToken(KeyboardToken)+0x2b0>
c0012181:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0012185:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c0012189:	74 2b                	je     c00121b6 <sendKeyboardToken(KeyboardToken)+0x2a4>
c001218b:	8b 15 44 49 02 c0    	mov    edx,DWORD PTR ds:0xc0024944
c0012191:	89 d0                	mov    eax,edx
c0012193:	c1 e0 02             	shl    eax,0x2
c0012196:	01 d0                	add    eax,edx
c0012198:	01 c0                	add    eax,eax
c001219a:	a3 44 49 02 c0       	mov    ds:0xc0024944,eax
c001219f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00121a2:	0f b7 c0             	movzx  eax,ax
c00121a5:	8d 50 d0             	lea    edx,[eax-0x30]
c00121a8:	a1 44 49 02 c0       	mov    eax,ds:0xc0024944
c00121ad:	01 d0                	add    eax,edx
c00121af:	a3 44 49 02 c0       	mov    ds:0xc0024944,eax
c00121b4:	eb 6d                	jmp    c0012223 <sendKeyboardToken(KeyboardToken)+0x311>
c00121b6:	c7 05 44 49 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024944,0x0
c00121c0:	eb 61                	jmp    c0012223 <sendKeyboardToken(KeyboardToken)+0x311>
c00121c2:	a1 44 49 02 c0       	mov    eax,ds:0xc0024944
c00121c7:	85 c0                	test   eax,eax
c00121c9:	74 18                	je     c00121e3 <sendKeyboardToken(KeyboardToken)+0x2d1>
c00121cb:	a1 44 49 02 c0       	mov    eax,ds:0xc0024944
c00121d0:	0f b6 c0             	movzx  eax,al
c00121d3:	83 ec 0c             	sub    esp,0xc
c00121d6:	50                   	push   eax
c00121d7:	e8 ca fc ff ff       	call   c0011ea6 <sendKeyToTerminal(unsigned char)>
c00121dc:	83 c4 10             	add    esp,0x10
c00121df:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00121e3:	c7 05 44 49 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024944,0x0
c00121ed:	eb 34                	jmp    c0012223 <sendKeyboardToken(KeyboardToken)+0x311>
c00121ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00121f2:	66 3d 01 01          	cmp    ax,0x101
c00121f6:	75 2b                	jne    c0012223 <sendKeyboardToken(KeyboardToken)+0x311>
c00121f8:	a1 44 49 02 c0       	mov    eax,ds:0xc0024944
c00121fd:	85 c0                	test   eax,eax
c00121ff:	74 18                	je     c0012219 <sendKeyboardToken(KeyboardToken)+0x307>
c0012201:	a1 44 49 02 c0       	mov    eax,ds:0xc0024944
c0012206:	0f b6 c0             	movzx  eax,al
c0012209:	83 ec 0c             	sub    esp,0xc
c001220c:	50                   	push   eax
c001220d:	e8 94 fc ff ff       	call   c0011ea6 <sendKeyToTerminal(unsigned char)>
c0012212:	83 c4 10             	add    esp,0x10
c0012215:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0012219:	c7 05 44 49 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024944,0x0
c0012223:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0012226:	83 f0 01             	xor    eax,0x1
c0012229:	84 c0                	test   al,al
c001222b:	74 4c                	je     c0012279 <sendKeyboardToken(KeyboardToken)+0x367>
c001222d:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0012230:	83 f0 01             	xor    eax,0x1
c0012233:	84 c0                	test   al,al
c0012235:	74 42                	je     c0012279 <sendKeyboardToken(KeyboardToken)+0x367>
c0012237:	a0 40 46 02 c0       	mov    al,ds:0xc0024640
c001223c:	83 f0 01             	xor    eax,0x1
c001223f:	84 c0                	test   al,al
c0012241:	74 36                	je     c0012279 <sendKeyboardToken(KeyboardToken)+0x367>
c0012243:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012246:	66 83 f8 1f          	cmp    ax,0x1f
c001224a:	76 09                	jbe    c0012255 <sendKeyboardToken(KeyboardToken)+0x343>
c001224c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001224f:	66 83 f8 7e          	cmp    ax,0x7e
c0012253:	76 12                	jbe    c0012267 <sendKeyboardToken(KeyboardToken)+0x355>
c0012255:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012258:	66 83 f8 0a          	cmp    ax,0xa
c001225c:	74 09                	je     c0012267 <sendKeyboardToken(KeyboardToken)+0x355>
c001225e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012261:	66 83 f8 08          	cmp    ax,0x8
c0012265:	75 12                	jne    c0012279 <sendKeyboardToken(KeyboardToken)+0x367>
c0012267:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001226a:	0f b6 c0             	movzx  eax,al
c001226d:	83 ec 0c             	sub    esp,0xc
c0012270:	50                   	push   eax
c0012271:	e8 30 fc ff ff       	call   c0011ea6 <sendKeyToTerminal(unsigned char)>
c0012276:	83 c4 10             	add    esp,0x10
c0012279:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c001227c:	83 f0 01             	xor    eax,0x1
c001227f:	84 c0                	test   al,al
c0012281:	74 4f                	je     c00122d2 <sendKeyboardToken(KeyboardToken)+0x3c0>
c0012283:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0012286:	83 f0 01             	xor    eax,0x1
c0012289:	84 c0                	test   al,al
c001228b:	74 45                	je     c00122d2 <sendKeyboardToken(KeyboardToken)+0x3c0>
c001228d:	a0 40 46 02 c0       	mov    al,ds:0xc0024640
c0012292:	84 c0                	test   al,al
c0012294:	74 3c                	je     c00122d2 <sendKeyboardToken(KeyboardToken)+0x3c0>
c0012296:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012299:	66 83 f8 3f          	cmp    ax,0x3f
c001229d:	76 33                	jbe    c00122d2 <sendKeyboardToken(KeyboardToken)+0x3c0>
c001229f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00122a2:	66 83 f8 7f          	cmp    ax,0x7f
c00122a6:	77 2a                	ja     c00122d2 <sendKeyboardToken(KeyboardToken)+0x3c0>
c00122a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00122ab:	88 c2                	mov    dl,al
c00122ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00122b0:	66 83 f8 5f          	cmp    ax,0x5f
c00122b4:	76 04                	jbe    c00122ba <sendKeyboardToken(KeyboardToken)+0x3a8>
c00122b6:	b0 20                	mov    al,0x20
c00122b8:	eb 02                	jmp    c00122bc <sendKeyboardToken(KeyboardToken)+0x3aa>
c00122ba:	b0 00                	mov    al,0x0
c00122bc:	29 c2                	sub    edx,eax
c00122be:	88 d0                	mov    al,dl
c00122c0:	83 e8 40             	sub    eax,0x40
c00122c3:	0f b6 c0             	movzx  eax,al
c00122c6:	83 ec 0c             	sub    esp,0xc
c00122c9:	50                   	push   eax
c00122ca:	e8 d7 fb ff ff       	call   c0011ea6 <sendKeyToTerminal(unsigned char)>
c00122cf:	83 c4 10             	add    esp,0x10
c00122d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00122d5:	66 3d 00 03          	cmp    ax,0x300
c00122d9:	75 0f                	jne    c00122ea <sendKeyboardToken(KeyboardToken)+0x3d8>
c00122db:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00122de:	83 f0 01             	xor    eax,0x1
c00122e1:	84 c0                	test   al,al
c00122e3:	74 05                	je     c00122ea <sendKeyboardToken(KeyboardToken)+0x3d8>
c00122e5:	e8 33 b1 ff ff       	call   c000d41d <doTerminalCycle()>
c00122ea:	90                   	nop
c00122eb:	c9                   	leave  
c00122ec:	c3                   	ret    

c00122ed <clearInternalKeybuffer(VgaText*)>:
c00122ed:	55                   	push   ebp
c00122ee:	89 e5                	mov    ebp,esp
c00122f0:	83 ec 08             	sub    esp,0x8
c00122f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00122f6:	05 34 11 00 00       	add    eax,0x1134
c00122fb:	83 ec 0c             	sub    esp,0xc
c00122fe:	50                   	push   eax
c00122ff:	e8 ec e3 fe ff       	call   c00006f0 <strlen>
c0012304:	83 c4 10             	add    esp,0x10
c0012307:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001230a:	81 c2 34 11 00 00    	add    edx,0x1134
c0012310:	83 ec 04             	sub    esp,0x4
c0012313:	50                   	push   eax
c0012314:	6a 00                	push   0x0
c0012316:	52                   	push   edx
c0012317:	e8 b7 e3 fe ff       	call   c00006d3 <memset>
c001231c:	83 c4 10             	add    esp,0x10
c001231f:	90                   	nop
c0012320:	c9                   	leave  
c0012321:	c3                   	ret    

c0012322 <readKeyboard(VgaText*, char*, unsigned long)>:
c0012322:	55                   	push   ebp
c0012323:	89 e5                	mov    ebp,esp
c0012325:	83 ec 18             	sub    esp,0x18
c0012328:	fb                   	sti    
c0012329:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0012330:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0012334:	74 77                	je     c00123ad <readKeyboard(VgaText*, char*, unsigned long)+0x8b>
c0012336:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012339:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c001233f:	84 c0                	test   al,al
c0012341:	75 02                	jne    c0012345 <readKeyboard(VgaText*, char*, unsigned long)+0x23>
c0012343:	eb f1                	jmp    c0012336 <readKeyboard(VgaText*, char*, unsigned long)+0x14>
c0012345:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0012348:	8d 50 01             	lea    edx,[eax+0x1]
c001234b:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001234e:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0012351:	8a 92 34 11 00 00    	mov    dl,BYTE PTR [edx+0x1134]
c0012357:	88 10                	mov    BYTE PTR [eax],dl
c0012359:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001235c:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0012362:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0012365:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012368:	05 34 11 00 00       	add    eax,0x1134
c001236d:	83 ec 0c             	sub    esp,0xc
c0012370:	50                   	push   eax
c0012371:	e8 7a e3 fe ff       	call   c00006f0 <strlen>
c0012376:	83 c4 10             	add    esp,0x10
c0012379:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001237c:	81 c2 34 11 00 00    	add    edx,0x1134
c0012382:	8d 4a 01             	lea    ecx,[edx+0x1]
c0012385:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0012388:	81 c2 34 11 00 00    	add    edx,0x1134
c001238e:	83 ec 04             	sub    esp,0x4
c0012391:	50                   	push   eax
c0012392:	51                   	push   ecx
c0012393:	52                   	push   edx
c0012394:	e8 cc e2 fe ff       	call   c0000665 <memmove>
c0012399:	83 c4 10             	add    esp,0x10
c001239c:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c001239f:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00123a2:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c00123a6:	75 88                	jne    c0012330 <readKeyboard(VgaText*, char*, unsigned long)+0xe>
c00123a8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00123ab:	eb 03                	jmp    c00123b0 <readKeyboard(VgaText*, char*, unsigned long)+0x8e>
c00123ad:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00123b0:	c9                   	leave  
c00123b1:	c3                   	ret    

c00123b2 <Keyboard::Keyboard(char const*)>:
c00123b2:	83 ec 0c             	sub    esp,0xc
c00123b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00123b9:	83 ec 08             	sub    esp,0x8
c00123bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00123c0:	50                   	push   eax
c00123c1:	e8 5c e3 ff ff       	call   c0010722 <Device::Device(char const*)>
c00123c6:	83 c4 10             	add    esp,0x10
c00123c9:	ba 3c 1d 02 c0       	mov    edx,0xc0021d3c
c00123ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00123d2:	89 10                	mov    DWORD PTR [eax],edx
c00123d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00123d8:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c00123e2:	c6 05 24 45 02 c0 01 	mov    BYTE PTR ds:0xc0024524,0x1
c00123e9:	90                   	nop
c00123ea:	83 c4 0c             	add    esp,0xc
c00123ed:	c3                   	ret    

c00123ee <Keyboard::~Keyboard()>:
c00123ee:	83 ec 0c             	sub    esp,0xc
c00123f1:	ba 3c 1d 02 c0       	mov    edx,0xc0021d3c
c00123f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00123fa:	89 10                	mov    DWORD PTR [eax],edx
c00123fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012400:	83 ec 0c             	sub    esp,0xc
c0012403:	50                   	push   eax
c0012404:	e8 cb df ff ff       	call   c00103d4 <Device::~Device()>
c0012409:	83 c4 10             	add    esp,0x10
c001240c:	90                   	nop
c001240d:	83 c4 0c             	add    esp,0xc
c0012410:	c3                   	ret    
c0012411:	90                   	nop

c0012412 <Keyboard::~Keyboard()>:
c0012412:	83 ec 0c             	sub    esp,0xc
c0012415:	83 ec 0c             	sub    esp,0xc
c0012418:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001241c:	e8 cd ff ff ff       	call   c00123ee <Keyboard::~Keyboard()>
c0012421:	83 c4 10             	add    esp,0x10
c0012424:	83 ec 08             	sub    esp,0x8
c0012427:	68 5c 01 00 00       	push   0x15c
c001242c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012430:	e8 12 cc ff ff       	call   c000f047 <operator delete(void*, unsigned long)>
c0012435:	83 c4 10             	add    esp,0x10
c0012438:	83 c4 0c             	add    esp,0xc
c001243b:	c3                   	ret    

c001243c <LogicalDisk::close(int, int, void*)>:
c001243c:	83 c8 ff             	or     eax,0xffffffff
c001243f:	c3                   	ret    

c0012440 <LogicalDisk::~LogicalDisk()>:
c0012440:	83 ec 0c             	sub    esp,0xc
c0012443:	ba ec 1d 02 c0       	mov    edx,0xc0021dec
c0012448:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001244c:	89 10                	mov    DWORD PTR [eax],edx
c001244e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012452:	83 ec 0c             	sub    esp,0xc
c0012455:	50                   	push   eax
c0012456:	e8 79 df ff ff       	call   c00103d4 <Device::~Device()>
c001245b:	83 c4 10             	add    esp,0x10
c001245e:	90                   	nop
c001245f:	83 c4 0c             	add    esp,0xc
c0012462:	c3                   	ret    
c0012463:	90                   	nop

c0012464 <LogicalDisk::~LogicalDisk()>:
c0012464:	83 ec 0c             	sub    esp,0xc
c0012467:	83 ec 0c             	sub    esp,0xc
c001246a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001246e:	e8 cd ff ff ff       	call   c0012440 <LogicalDisk::~LogicalDisk()>
c0012473:	83 c4 10             	add    esp,0x10
c0012476:	83 ec 08             	sub    esp,0x8
c0012479:	68 74 01 00 00       	push   0x174
c001247e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012482:	e8 c0 cb ff ff       	call   c000f047 <operator delete(void*, unsigned long)>
c0012487:	83 c4 10             	add    esp,0x10
c001248a:	83 c4 0c             	add    esp,0xc
c001248d:	c3                   	ret    

c001248e <LogicalDisk::open(int, int, void*)>:
c001248e:	83 ec 18             	sub    esp,0x18
c0012491:	68 68 1d 02 c0       	push   0xc0021d68
c0012496:	e8 55 34 00 00       	call   c00158f0 <Krnl::panic(char const*)>
c001249b:	83 c8 ff             	or     eax,0xffffffff
c001249e:	83 c4 1c             	add    esp,0x1c
c00124a1:	c3                   	ret    

c00124a2 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c00124a2:	53                   	push   ebx
c00124a3:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00124a7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00124ab:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00124af:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c00124b5:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c00124bb:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c00124c1:	77 10                	ja     c00124d3 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c00124c3:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c00124c9:	89 d3                	mov    ebx,edx
c00124cb:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c00124d1:	72 05                	jb     c00124d8 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c00124d3:	83 c8 ff             	or     eax,0xffffffff
c00124d6:	89 c2                	mov    edx,eax
c00124d8:	5b                   	pop    ebx
c00124d9:	c3                   	ret    

c00124da <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c00124da:	56                   	push   esi
c00124db:	83 c8 ff             	or     eax,0xffffffff
c00124de:	53                   	push   ebx
c00124df:	89 c2                	mov    edx,eax
c00124e1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00124e5:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00124e9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00124ed:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00124f3:	77 27                	ja     c001251c <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c00124f5:	89 d8                	mov    eax,ebx
c00124f7:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c00124fd:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0012503:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012508:	89 c2                	mov    edx,eax
c001250a:	73 10                	jae    c001251c <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c001250c:	89 c8                	mov    eax,ecx
c001250e:	89 da                	mov    edx,ebx
c0012510:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0012516:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c001251c:	5b                   	pop    ebx
c001251d:	5e                   	pop    esi
c001251e:	c3                   	ret    
c001251f:	90                   	nop

c0012520 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0012520:	83 ec 1c             	sub    esp,0x1c
c0012523:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012527:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001252b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001252f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012533:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012537:	89 04 24             	mov    DWORD PTR [esp],eax
c001253a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001253e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012542:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012546:	83 ec 08             	sub    esp,0x8
c0012549:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001254d:	50                   	push   eax
c001254e:	e8 cf e1 ff ff       	call   c0010722 <Device::Device(char const*)>
c0012553:	83 c4 10             	add    esp,0x10
c0012556:	ba ec 1d 02 c0       	mov    edx,0xc0021dec
c001255b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001255f:	89 10                	mov    DWORD PTR [eax],edx
c0012561:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012565:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001256c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012570:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0012577:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001257b:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0012585:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0012589:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001258d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012591:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0012597:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c001259d:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00125a1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00125a4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00125a8:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c00125ae:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c00125b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00125b8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00125bc:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c00125c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00125c6:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c00125d0:	90                   	nop
c00125d1:	83 c4 1c             	add    esp,0x1c
c00125d4:	c3                   	ret    
c00125d5:	90                   	nop

c00125d6 <LogicalDisk::assignDriveLetter()>:
c00125d6:	55                   	push   ebp
c00125d7:	57                   	push   edi
c00125d8:	56                   	push   esi
c00125d9:	53                   	push   ebx
c00125da:	83 ec 14             	sub    esp,0x14
c00125dd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00125e1:	8b 3d 60 49 02 c0    	mov    edi,DWORD PTR ds:0xc0024960
c00125e7:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c00125ed:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00125f1:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c00125f7:	8b 3d 64 49 02 c0    	mov    edi,DWORD PTR ds:0xc0024964
c00125fd:	3c 01                	cmp    al,0x1
c00125ff:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0012603:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0012607:	19 c0                	sbb    eax,eax
c0012609:	83 e0 02             	and    eax,0x2
c001260c:	83 c0 41             	add    eax,0x41
c001260f:	0f be e8             	movsx  ebp,al
c0012612:	3c 43                	cmp    al,0x43
c0012614:	75 10                	jne    c0012626 <LogicalDisk::assignDriveLetter()+0x50>
c0012616:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c001261d:	75 5d                	jne    c001267c <LogicalDisk::assignDriveLetter()+0xa6>
c001261f:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0012624:	75 56                	jne    c001267c <LogicalDisk::assignDriveLetter()+0xa6>
c0012626:	8d 75 bf             	lea    esi,[ebp-0x41]
c0012629:	ba 01 00 00 00       	mov    edx,0x1
c001262e:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0012632:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0012636:	d3 e2                	shl    edx,cl
c0012638:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001263c:	89 d7                	mov    edi,edx
c001263e:	89 d6                	mov    esi,edx
c0012640:	c1 ff 1f             	sar    edi,0x1f
c0012643:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0012647:	21 f9                	and    ecx,edi
c0012649:	09 d1                	or     ecx,edx
c001264b:	75 2f                	jne    c001267c <LogicalDisk::assignDriveLetter()+0xa6>
c001264d:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0012651:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012655:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c001265b:	09 f2                	or     edx,esi
c001265d:	89 15 60 49 02 c0    	mov    DWORD PTR ds:0xc0024960,edx
c0012663:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012667:	09 fa                	or     edx,edi
c0012669:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c001266d:	89 15 64 49 02 c0    	mov    DWORD PTR ds:0xc0024964,edx
c0012673:	89 1c bd 80 49 02 c0 	mov    DWORD PTR [edi*4-0x3ffdb680],ebx
c001267a:	eb 08                	jmp    c0012684 <LogicalDisk::assignDriveLetter()+0xae>
c001267c:	45                   	inc    ebp
c001267d:	40                   	inc    eax
c001267e:	3c 5b                	cmp    al,0x5b
c0012680:	75 90                	jne    c0012612 <LogicalDisk::assignDriveLetter()+0x3c>
c0012682:	31 c0                	xor    eax,eax
c0012684:	83 c4 14             	add    esp,0x14
c0012687:	5b                   	pop    ebx
c0012688:	5e                   	pop    esi
c0012689:	5f                   	pop    edi
c001268a:	5d                   	pop    ebp
c001268b:	c3                   	ret    

c001268c <LogicalDisk::mount()>:
c001268c:	56                   	push   esi
c001268d:	53                   	push   ebx
c001268e:	51                   	push   ecx
c001268f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012693:	8b 1d e8 44 02 c0    	mov    ebx,DWORD PTR ds:0xc00244e8
c0012699:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c00126a3:	85 db                	test   ebx,ebx
c00126a5:	74 50                	je     c00126f7 <LogicalDisk::mount()+0x6b>
c00126a7:	e8 83 61 00 00       	call   c001882f <getIRQNestingLevel()>
c00126ac:	52                   	push   edx
c00126ad:	52                   	push   edx
c00126ae:	50                   	push   eax
c00126af:	68 8c 1d 02 c0       	push   0xc0021d8c
c00126b4:	e8 6e ca ff ff       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c00126b9:	83 c4 0c             	add    esp,0xc
c00126bc:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c00126c3:	8b 13                	mov    edx,DWORD PTR [ebx]
c00126c5:	83 e8 41             	sub    eax,0x41
c00126c8:	50                   	push   eax
c00126c9:	56                   	push   esi
c00126ca:	53                   	push   ebx
c00126cb:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00126ce:	83 c4 10             	add    esp,0x10
c00126d1:	84 c0                	test   al,al
c00126d3:	74 08                	je     c00126dd <LogicalDisk::mount()+0x51>
c00126d5:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c00126db:	eb 1c                	jmp    c00126f9 <LogicalDisk::mount()+0x6d>
c00126dd:	e8 4d 61 00 00       	call   c001882f <getIRQNestingLevel()>
c00126e2:	51                   	push   ecx
c00126e3:	51                   	push   ecx
c00126e4:	50                   	push   eax
c00126e5:	68 a7 1d 02 c0       	push   0xc0021da7
c00126ea:	e8 38 ca ff ff       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c00126ef:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c00126f2:	83 c4 10             	add    esp,0x10
c00126f5:	eb ac                	jmp    c00126a3 <LogicalDisk::mount()+0x17>
c00126f7:	31 c0                	xor    eax,eax
c00126f9:	5a                   	pop    edx
c00126fa:	5b                   	pop    ebx
c00126fb:	5e                   	pop    esi
c00126fc:	c3                   	ret    
c00126fd:	90                   	nop

c00126fe <LogicalDisk::unmount()>:
c00126fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012702:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c001270c:	c3                   	ret    
c001270d:	90                   	nop

c001270e <LogicalDisk::unassignDriveLetter()>:
c001270e:	57                   	push   edi
c001270f:	56                   	push   esi
c0012710:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012714:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c001271b:	84 c9                	test   cl,cl
c001271d:	75 0f                	jne    c001272e <LogicalDisk::unassignDriveLetter()+0x20>
c001271f:	c7 44 24 0c c2 1d 02 c0 	mov    DWORD PTR [esp+0xc],0xc0021dc2
c0012727:	5e                   	pop    esi
c0012728:	5f                   	pop    edi
c0012729:	e9 c2 31 00 00       	jmp    c00158f0 <Krnl::panic(char const*)>
c001272e:	83 e9 41             	sub    ecx,0x41
c0012731:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c0012738:	b8 01 00 00 00       	mov    eax,0x1
c001273d:	c7 04 8d 80 49 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffdb680],0x0
c0012748:	d3 e0                	shl    eax,cl
c001274a:	89 c7                	mov    edi,eax
c001274c:	f7 d0                	not    eax
c001274e:	c1 ff 1f             	sar    edi,0x1f
c0012751:	21 05 60 49 02 c0    	and    DWORD PTR ds:0xc0024960,eax
c0012757:	89 fe                	mov    esi,edi
c0012759:	f7 d6                	not    esi
c001275b:	21 35 64 49 02 c0    	and    DWORD PTR ds:0xc0024964,esi
c0012761:	5e                   	pop    esi
c0012762:	5f                   	pop    edi
c0012763:	c3                   	ret    

c0012764 <LogicalDisk::read(unsigned long long, int, void*)>:
c0012764:	57                   	push   edi
c0012765:	56                   	push   esi
c0012766:	53                   	push   ebx
c0012767:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001276b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001276f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0012773:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012777:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001277d:	77 41                	ja     c00127c0 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c001277f:	99                   	cdq    
c0012780:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0012786:	01 c8                	add    eax,ecx
c0012788:	11 da                	adc    edx,ebx
c001278a:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0012790:	19 d7                	sbb    edi,edx
c0012792:	72 33                	jb     c00127c7 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c0012794:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c001279a:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c00127a0:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00127a4:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00127a8:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c00127ae:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00127b4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00127b8:	5b                   	pop    ebx
c00127b9:	5e                   	pop    esi
c00127ba:	5f                   	pop    edi
c00127bb:	e9 9a 09 00 00       	jmp    c001315a <VCache::read(unsigned long long, int, void*)>
c00127c0:	b8 05 00 00 00       	mov    eax,0x5
c00127c5:	eb 05                	jmp    c00127cc <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c00127c7:	b8 07 00 00 00       	mov    eax,0x7
c00127cc:	5b                   	pop    ebx
c00127cd:	5e                   	pop    esi
c00127ce:	5f                   	pop    edi
c00127cf:	c3                   	ret    

c00127d0 <LogicalDisk::write(unsigned long long, int, void*)>:
c00127d0:	57                   	push   edi
c00127d1:	56                   	push   esi
c00127d2:	53                   	push   ebx
c00127d3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00127d7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00127db:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00127df:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00127e3:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00127e9:	77 41                	ja     c001282c <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c00127eb:	99                   	cdq    
c00127ec:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c00127f2:	01 c8                	add    eax,ecx
c00127f4:	11 da                	adc    edx,ebx
c00127f6:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c00127fc:	19 d7                	sbb    edi,edx
c00127fe:	72 33                	jb     c0012833 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c0012800:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0012806:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c001280c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0012810:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0012814:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c001281a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0012820:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012824:	5b                   	pop    ebx
c0012825:	5e                   	pop    esi
c0012826:	5f                   	pop    edi
c0012827:	e9 4a 08 00 00       	jmp    c0013076 <VCache::write(unsigned long long, int, void*)>
c001282c:	b8 05 00 00 00       	mov    eax,0x5
c0012831:	eb 05                	jmp    c0012838 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c0012833:	b8 07 00 00 00       	mov    eax,0x7
c0012838:	5b                   	pop    ebx
c0012839:	5e                   	pop    esi
c001283a:	5f                   	pop    edi
c001283b:	c3                   	ret    

c001283c <Mouse::Mouse(char const*)>:
c001283c:	83 ec 0c             	sub    esp,0xc
c001283f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012843:	83 ec 08             	sub    esp,0x8
c0012846:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001284a:	50                   	push   eax
c001284b:	e8 d2 de ff ff       	call   c0010722 <Device::Device(char const*)>
c0012850:	83 c4 10             	add    esp,0x10
c0012853:	ba 18 1e 02 c0       	mov    edx,0xc0021e18
c0012858:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001285c:	89 10                	mov    DWORD PTR [eax],edx
c001285e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012862:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c001286c:	90                   	nop
c001286d:	83 c4 0c             	add    esp,0xc
c0012870:	c3                   	ret    
c0012871:	90                   	nop

c0012872 <Mouse::~Mouse()>:
c0012872:	83 ec 0c             	sub    esp,0xc
c0012875:	ba 18 1e 02 c0       	mov    edx,0xc0021e18
c001287a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001287e:	89 10                	mov    DWORD PTR [eax],edx
c0012880:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012884:	83 ec 0c             	sub    esp,0xc
c0012887:	50                   	push   eax
c0012888:	e8 47 db ff ff       	call   c00103d4 <Device::~Device()>
c001288d:	83 c4 10             	add    esp,0x10
c0012890:	90                   	nop
c0012891:	83 c4 0c             	add    esp,0xc
c0012894:	c3                   	ret    
c0012895:	90                   	nop

c0012896 <Mouse::~Mouse()>:
c0012896:	83 ec 0c             	sub    esp,0xc
c0012899:	83 ec 0c             	sub    esp,0xc
c001289c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00128a0:	e8 cd ff ff ff       	call   c0012872 <Mouse::~Mouse()>
c00128a5:	83 c4 10             	add    esp,0x10
c00128a8:	83 ec 08             	sub    esp,0x8
c00128ab:	68 58 01 00 00       	push   0x158
c00128b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00128b4:	e8 8e c7 ff ff       	call   c000f047 <operator delete(void*, unsigned long)>
c00128b9:	83 c4 10             	add    esp,0x10
c00128bc:	83 c4 0c             	add    esp,0xc
c00128bf:	c3                   	ret    

c00128c0 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c00128c0:	55                   	push   ebp
c00128c1:	57                   	push   edi
c00128c2:	56                   	push   esi
c00128c3:	53                   	push   ebx
c00128c4:	81 ec 28 01 00 00    	sub    esp,0x128
c00128ca:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c00128d1:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c00128d8:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c00128df:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c00128e6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00128ea:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00128ee:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00128f5:	e8 1a df ff ff       	call   c0010814 <Device::getName()>
c00128fa:	5a                   	pop    edx
c00128fb:	59                   	pop    ecx
c00128fc:	50                   	push   eax
c00128fd:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0012901:	55                   	push   ebp
c0012902:	e8 6b de fe ff       	call   c0000772 <strcpy>
c0012907:	5b                   	pop    ebx
c0012908:	58                   	pop    eax
c0012909:	68 3c 1e 02 c0       	push   0xc0021e3c
c001290e:	55                   	push   ebp
c001290f:	e8 15 df fe ff       	call   c0000829 <strcat>
c0012914:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c001291b:	e8 18 c7 ff ff       	call   c000f038 <operator new(unsigned long)>
c0012920:	83 c4 0c             	add    esp,0xc
c0012923:	89 c3                	mov    ebx,eax
c0012925:	57                   	push   edi
c0012926:	56                   	push   esi
c0012927:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001292b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001292f:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0012936:	55                   	push   ebp
c0012937:	50                   	push   eax
c0012938:	e8 e3 fb ff ff       	call   c0012520 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001293d:	83 c4 14             	add    esp,0x14
c0012940:	53                   	push   ebx
c0012941:	e8 90 fc ff ff       	call   c00125d6 <LogicalDisk::assignDriveLetter()>
c0012946:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012949:	e8 3e fd ff ff       	call   c001268c <LogicalDisk::mount()>
c001294e:	58                   	pop    eax
c001294f:	5a                   	pop    edx
c0012950:	53                   	push   ebx
c0012951:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0012958:	e8 d5 db ff ff       	call   c0010532 <Device::addChild(Device*)>
c001295d:	81 c4 2c 01 00 00    	add    esp,0x12c
c0012963:	5b                   	pop    ebx
c0012964:	5e                   	pop    esi
c0012965:	5f                   	pop    edi
c0012966:	5d                   	pop    ebp
c0012967:	c3                   	ret    

c0012968 <createPartitionsForDisk(PhysicalDisk*)>:
c0012968:	55                   	push   ebp
c0012969:	57                   	push   edi
c001296a:	56                   	push   esi
c001296b:	53                   	push   ebx
c001296c:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0012972:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0012979:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001297f:	3d 00 02 00 00       	cmp    eax,0x200
c0012984:	74 27                	je     c00129ad <createPartitionsForDisk(PhysicalDisk*)+0x45>
c0012986:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c001298c:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c0012992:	83 ec 10             	sub    esp,0x10
c0012995:	0f a4 f7 0a          	shld   edi,esi,0xa
c0012999:	99                   	cdq    
c001299a:	c1 e6 0a             	shl    esi,0xa
c001299d:	52                   	push   edx
c001299e:	89 fd                	mov    ebp,edi
c00129a0:	50                   	push   eax
c00129a1:	55                   	push   ebp
c00129a2:	56                   	push   esi
c00129a3:	e8 24 c8 00 00       	call   c001f1cc <__udivdi3>
c00129a8:	e9 b1 00 00 00       	jmp    c0012a5e <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c00129ad:	83 ec 0c             	sub    esp,0xc
c00129b0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00129b2:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c00129b6:	56                   	push   esi
c00129b7:	6a 01                	push   0x1
c00129b9:	6a 00                	push   0x0
c00129bb:	6a 00                	push   0x0
c00129bd:	53                   	push   ebx
c00129be:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00129c1:	83 c4 20             	add    esp,0x20
c00129c4:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c00129cc:	75 0a                	jne    c00129d8 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c00129ce:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c00129d6:	74 2c                	je     c0012a04 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c00129d8:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00129de:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00129e4:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00129ea:	83 ec 10             	sub    esp,0x10
c00129ed:	0f a4 c2 0a          	shld   edx,eax,0xa
c00129f1:	89 f7                	mov    edi,esi
c00129f3:	c1 e0 0a             	shl    eax,0xa
c00129f6:	c1 ff 1f             	sar    edi,0x1f
c00129f9:	57                   	push   edi
c00129fa:	56                   	push   esi
c00129fb:	52                   	push   edx
c00129fc:	50                   	push   eax
c00129fd:	e8 ca c7 00 00       	call   c001f1cc <__udivdi3>
c0012a02:	eb 5a                	jmp    c0012a5e <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0012a04:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0012a0b:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0012a12:	83 e1 7f             	and    ecx,0x7f
c0012a15:	83 e0 7f             	and    eax,0x7f
c0012a18:	01 c1                	add    ecx,eax
c0012a1a:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0012a21:	83 e0 7f             	and    eax,0x7f
c0012a24:	01 c1                	add    ecx,eax
c0012a26:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c0012a2d:	83 e0 7f             	and    eax,0x7f
c0012a30:	00 c1                	add    cl,al
c0012a32:	74 41                	je     c0012a75 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c0012a34:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0012a3a:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0012a40:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0012a46:	83 ec 10             	sub    esp,0x10
c0012a49:	0f a4 c2 0a          	shld   edx,eax,0xa
c0012a4d:	89 f7                	mov    edi,esi
c0012a4f:	c1 e0 0a             	shl    eax,0xa
c0012a52:	c1 ff 1f             	sar    edi,0x1f
c0012a55:	57                   	push   edi
c0012a56:	56                   	push   esi
c0012a57:	52                   	push   edx
c0012a58:	50                   	push   eax
c0012a59:	e8 6e c7 00 00       	call   c001f1cc <__udivdi3>
c0012a5e:	83 c4 14             	add    esp,0x14
c0012a61:	52                   	push   edx
c0012a62:	50                   	push   eax
c0012a63:	6a 00                	push   0x0
c0012a65:	6a 00                	push   0x0
c0012a67:	53                   	push   ebx
c0012a68:	e8 53 fe ff ff       	call   c00128c0 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0012a6d:	83 c4 20             	add    esp,0x20
c0012a70:	e9 79 01 00 00       	jmp    c0012bee <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0012a75:	89 f0                	mov    eax,esi
c0012a77:	31 f6                	xor    esi,esi
c0012a79:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0012a80:	75 02                	jne    c0012a84 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0012a82:	89 f1                	mov    ecx,esi
c0012a84:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0012a8b:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0012a92:	c1 e2 08             	shl    edx,0x8
c0012a95:	c1 e7 10             	shl    edi,0x10
c0012a98:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0012aa0:	09 fa                	or     edx,edi
c0012aa2:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0012aaa:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c0012ab1:	83 c0 10             	add    eax,0x10
c0012ab4:	09 fa                	or     edx,edi
c0012ab6:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0012abd:	c1 e7 18             	shl    edi,0x18
c0012ac0:	09 fa                	or     edx,edi
c0012ac2:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0012ac9:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0012acd:	c1 e7 10             	shl    edi,0x10
c0012ad0:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0012ad7:	c1 e2 08             	shl    edx,0x8
c0012ada:	09 fa                	or     edx,edi
c0012adc:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0012ae3:	09 fa                	or     edx,edi
c0012ae5:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0012aec:	c1 e7 18             	shl    edi,0x18
c0012aef:	09 fa                	or     edx,edi
c0012af1:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c0012af5:	46                   	inc    esi
c0012af6:	83 fe 04             	cmp    esi,0x4
c0012af9:	0f 85 7a ff ff ff    	jne    c0012a79 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0012aff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b03:	83 f0 01             	xor    eax,0x1
c0012b06:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0012b0a:	75 57                	jne    c0012b63 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0012b0c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012b10:	83 f0 01             	xor    eax,0x1
c0012b13:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0012b17:	75 4a                	jne    c0012b63 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0012b19:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0012b1d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0012b25:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012b2d:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0012b33:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0012b39:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0012b3f:	0f a4 c2 0a          	shld   edx,eax,0xa
c0012b43:	89 f7                	mov    edi,esi
c0012b45:	c1 e0 0a             	shl    eax,0xa
c0012b48:	c1 ff 1f             	sar    edi,0x1f
c0012b4b:	57                   	push   edi
c0012b4c:	56                   	push   esi
c0012b4d:	52                   	push   edx
c0012b4e:	50                   	push   eax
c0012b4f:	e8 78 c6 00 00       	call   c001f1cc <__udivdi3>
c0012b54:	83 c4 10             	add    esp,0x10
c0012b57:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0012b5b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0012b5f:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0012b63:	84 c9                	test   cl,cl
c0012b65:	74 53                	je     c0012bba <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0012b67:	0f b6 c9             	movzx  ecx,cl
c0012b6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b6e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012b72:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0012b76:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0012b7a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012b7e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012b82:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0012b86:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0012b8a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012b8e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0012b92:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012b96:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012b9a:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0012b9e:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0012ba2:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0012ba6:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0012baa:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0012bae:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0012bb2:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0012bb6:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0012bba:	31 ed                	xor    ebp,ebp
c0012bbc:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0012bc0:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0012bc4:	89 f8                	mov    eax,edi
c0012bc6:	09 f0                	or     eax,esi
c0012bc8:	74 1e                	je     c0012be8 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0012bca:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0012bce:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0012bd2:	89 d1                	mov    ecx,edx
c0012bd4:	09 c1                	or     ecx,eax
c0012bd6:	74 10                	je     c0012be8 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0012bd8:	83 ec 0c             	sub    esp,0xc
c0012bdb:	57                   	push   edi
c0012bdc:	56                   	push   esi
c0012bdd:	52                   	push   edx
c0012bde:	50                   	push   eax
c0012bdf:	53                   	push   ebx
c0012be0:	e8 db fc ff ff       	call   c00128c0 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0012be5:	83 c4 20             	add    esp,0x20
c0012be8:	45                   	inc    ebp
c0012be9:	83 fd 04             	cmp    ebp,0x4
c0012bec:	75 ce                	jne    c0012bbc <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0012bee:	81 c4 5c 02 00 00    	add    esp,0x25c
c0012bf4:	5b                   	pop    ebx
c0012bf5:	5e                   	pop    esi
c0012bf6:	5f                   	pop    edi
c0012bf7:	5d                   	pop    ebp
c0012bf8:	c3                   	ret    
c0012bf9:	90                   	nop

c0012bfa <Timer::Timer(char const*)>:
c0012bfa:	83 ec 0c             	sub    esp,0xc
c0012bfd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c01:	83 ec 08             	sub    esp,0x8
c0012c04:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012c08:	50                   	push   eax
c0012c09:	e8 14 db ff ff       	call   c0010722 <Device::Device(char const*)>
c0012c0e:	83 c4 10             	add    esp,0x10
c0012c11:	ba 50 1e 02 c0       	mov    edx,0xc0021e50
c0012c16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c1a:	89 10                	mov    DWORD PTR [eax],edx
c0012c1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c20:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0012c2a:	90                   	nop
c0012c2b:	83 c4 0c             	add    esp,0xc
c0012c2e:	c3                   	ret    
c0012c2f:	90                   	nop

c0012c30 <Timer::~Timer()>:
c0012c30:	83 ec 0c             	sub    esp,0xc
c0012c33:	ba 50 1e 02 c0       	mov    edx,0xc0021e50
c0012c38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c3c:	89 10                	mov    DWORD PTR [eax],edx
c0012c3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c42:	83 ec 0c             	sub    esp,0xc
c0012c45:	50                   	push   eax
c0012c46:	e8 89 d7 ff ff       	call   c00103d4 <Device::~Device()>
c0012c4b:	83 c4 10             	add    esp,0x10
c0012c4e:	90                   	nop
c0012c4f:	83 c4 0c             	add    esp,0xc
c0012c52:	c3                   	ret    
c0012c53:	90                   	nop

c0012c54 <Timer::~Timer()>:
c0012c54:	83 ec 0c             	sub    esp,0xc
c0012c57:	83 ec 0c             	sub    esp,0xc
c0012c5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012c5e:	e8 cd ff ff ff       	call   c0012c30 <Timer::~Timer()>
c0012c63:	83 c4 10             	add    esp,0x10
c0012c66:	83 ec 08             	sub    esp,0x8
c0012c69:	68 5c 01 00 00       	push   0x15c
c0012c6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012c72:	e8 d0 c3 ff ff       	call   c000f047 <operator delete(void*, unsigned long)>
c0012c77:	83 c4 10             	add    esp,0x10
c0012c7a:	83 c4 0c             	add    esp,0xc
c0012c7d:	c3                   	ret    

c0012c7e <Timer::read()>:
c0012c7e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012c82:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0012c88:	c3                   	ret    

c0012c89 <timerHandler(unsigned long long)>:
c0012c89:	55                   	push   ebp
c0012c8a:	57                   	push   edi
c0012c8b:	56                   	push   esi
c0012c8c:	53                   	push   ebx
c0012c8d:	83 ec 0c             	sub    esp,0xc
c0012c90:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012c94:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0012c98:	01 35 f0 49 02 c0    	add    DWORD PTR ds:0xc00249f0,esi
c0012c9e:	11 3d f4 49 02 c0    	adc    DWORD PTR ds:0xc00249f4,edi
c0012ca4:	80 3d 8d 43 02 c0 00 	cmp    BYTE PTR ds:0xc002438d,0x0
c0012cab:	0f 84 07 01 00 00    	je     c0012db8 <timerHandler(unsigned long long)+0x12f>
c0012cb1:	e8 b5 5b 00 00       	call   c001886b <lockStuff()>
c0012cb6:	83 ec 0c             	sub    esp,0xc
c0012cb9:	68 bc 57 02 c0       	push   0xc00257bc
c0012cbe:	e8 dd cb 00 00       	call   c001f8a0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012cc3:	c7 04 24 bc 57 02 c0 	mov    DWORD PTR [esp],0xc00257bc
c0012cca:	89 c3                	mov    ebx,eax
c0012ccc:	e8 d7 cb 00 00       	call   c001f8a8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0012cd1:	83 c4 10             	add    esp,0x10
c0012cd4:	84 c0                	test   al,al
c0012cd6:	74 60                	je     c0012d38 <timerHandler(unsigned long long)+0xaf>
c0012cd8:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0012cde:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c0012ce1:	85 c0                	test   eax,eax
c0012ce3:	0f 85 91 00 00 00    	jne    c0012d7a <timerHandler(unsigned long long)+0xf1>
c0012ce9:	e9 be 00 00 00       	jmp    c0012dac <timerHandler(unsigned long long)+0x123>
c0012cee:	83 ec 0c             	sub    esp,0xc
c0012cf1:	55                   	push   ebp
c0012cf2:	e8 5d 61 00 00       	call   c0018e54 <unblockTask(ThreadControlBlock*)>
c0012cf7:	83 c4 10             	add    esp,0x10
c0012cfa:	39 eb                	cmp    ebx,ebp
c0012cfc:	75 12                	jne    c0012d10 <timerHandler(unsigned long long)+0x87>
c0012cfe:	83 ec 0c             	sub    esp,0xc
c0012d01:	68 bc 57 02 c0       	push   0xc00257bc
c0012d06:	e8 95 cb 00 00       	call   c001f8a0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012d0b:	89 c3                	mov    ebx,eax
c0012d0d:	83 c4 10             	add    esp,0x10
c0012d10:	83 ec 0c             	sub    esp,0xc
c0012d13:	68 bc 57 02 c0       	push   0xc00257bc
c0012d18:	e8 8b cb 00 00       	call   c001f8a8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0012d1d:	83 c4 10             	add    esp,0x10
c0012d20:	84 c0                	test   al,al
c0012d22:	75 b4                	jne    c0012cd8 <timerHandler(unsigned long long)+0x4f>
c0012d24:	83 ec 0c             	sub    esp,0xc
c0012d27:	68 bc 57 02 c0       	push   0xc00257bc
c0012d2c:	e8 6f cb 00 00       	call   c001f8a0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012d31:	83 c4 10             	add    esp,0x10
c0012d34:	39 d8                	cmp    eax,ebx
c0012d36:	74 a0                	je     c0012cd8 <timerHandler(unsigned long long)+0x4f>
c0012d38:	83 ec 0c             	sub    esp,0xc
c0012d3b:	68 bc 57 02 c0       	push   0xc00257bc
c0012d40:	e8 5b cb 00 00       	call   c001f8a0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012d45:	c7 04 24 bc 57 02 c0 	mov    DWORD PTR [esp],0xc00257bc
c0012d4c:	89 c5                	mov    ebp,eax
c0012d4e:	e8 71 cb 00 00       	call   c001f8c4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0012d53:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c0012d56:	83 c4 10             	add    esp,0x10
c0012d59:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0012d5c:	39 15 f0 49 02 c0    	cmp    DWORD PTR ds:0xc00249f0,edx
c0012d62:	a1 f4 49 02 c0       	mov    eax,ds:0xc00249f4
c0012d67:	19 c8                	sbb    eax,ecx
c0012d69:	73 83                	jae    c0012cee <timerHandler(unsigned long long)+0x65>
c0012d6b:	50                   	push   eax
c0012d6c:	50                   	push   eax
c0012d6d:	55                   	push   ebp
c0012d6e:	68 bc 57 02 c0       	push   0xc00257bc
c0012d73:	e8 fa cb 00 00       	call   c001f972 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0012d78:	eb 93                	jmp    c0012d0d <timerHandler(unsigned long long)+0x84>
c0012d7a:	80 3d 8c 43 02 c0 00 	cmp    BYTE PTR ds:0xc002438c,0x0
c0012d81:	74 29                	je     c0012dac <timerHandler(unsigned long long)+0x123>
c0012d83:	39 c6                	cmp    esi,eax
c0012d85:	bb 00 00 00 00       	mov    ebx,0x0
c0012d8a:	19 df                	sbb    edi,ebx
c0012d8c:	72 19                	jb     c0012da7 <timerHandler(unsigned long long)+0x11e>
c0012d8e:	e8 b1 5a 00 00       	call   c0018844 <lockScheduler()>
c0012d93:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012d98:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c0012d9b:	e8 d8 5d 00 00       	call   c0018b78 <schedule()>
c0012da0:	e8 a1 5a 00 00       	call   c0018846 <unlockScheduler()>
c0012da5:	eb 05                	jmp    c0012dac <timerHandler(unsigned long long)+0x123>
c0012da7:	29 f0                	sub    eax,esi
c0012da9:	89 42 38             	mov    DWORD PTR [edx+0x38],eax
c0012dac:	83 c4 0c             	add    esp,0xc
c0012daf:	5b                   	pop    ebx
c0012db0:	5e                   	pop    esi
c0012db1:	5f                   	pop    edi
c0012db2:	5d                   	pop    ebp
c0012db3:	e9 45 5e 00 00       	jmp    c0018bfd <unlockStuff()>
c0012db8:	83 c4 0c             	add    esp,0xc
c0012dbb:	5b                   	pop    ebx
c0012dbc:	5e                   	pop    esi
c0012dbd:	5f                   	pop    edi
c0012dbe:	5d                   	pop    ebp
c0012dbf:	c3                   	ret    

c0012dc0 <setupTimer(int)>:
c0012dc0:	57                   	push   edi
c0012dc1:	56                   	push   esi
c0012dc2:	53                   	push   ebx
c0012dc3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012dc7:	e8 a1 19 00 00       	call   c001476d <getCPUNumber()>
c0012dcc:	85 c0                	test   eax,eax
c0012dce:	74 32                	je     c0012e02 <setupTimer(int)+0x42>
c0012dd0:	83 ec 0c             	sub    esp,0xc
c0012dd3:	68 60 01 00 00       	push   0x160
c0012dd8:	e8 5b c2 ff ff       	call   c000f038 <operator new(unsigned long)>
c0012ddd:	89 04 24             	mov    DWORD PTR [esp],eax
c0012de0:	89 c3                	mov    ebx,eax
c0012de2:	e8 7b be 00 00       	call   c001ec62 <APICTimer::APICTimer()>
c0012de7:	6a 00                	push   0x0
c0012de9:	6a 00                	push   0x0
c0012deb:	56                   	push   esi
c0012dec:	53                   	push   ebx
c0012ded:	e8 78 bd 00 00       	call   c001eb6a <APICTimer::open(int, int, void*)>
c0012df2:	83 c4 20             	add    esp,0x20
c0012df5:	e8 76 19 00 00       	call   c0014770 <thisCPU()>
c0012dfa:	56                   	push   esi
c0012dfb:	56                   	push   esi
c0012dfc:	53                   	push   ebx
c0012dfd:	e9 96 00 00 00       	jmp    c0012e98 <setupTimer(int)+0xd8>
c0012e02:	e8 69 19 00 00       	call   c0014770 <thisCPU()>
c0012e07:	83 ec 0c             	sub    esp,0xc
c0012e0a:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0012e10:	e8 ff d9 ff ff       	call   c0010814 <Device::getName()>
c0012e15:	83 c4 10             	add    esp,0x10
c0012e18:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0012e1b:	0f 85 87 00 00 00    	jne    c0012ea8 <setupTimer(int)+0xe8>
c0012e21:	a1 88 43 02 c0       	mov    eax,ds:0xc0024388
c0012e26:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0012e2d:	74 79                	je     c0012ea8 <setupTimer(int)+0xe8>
c0012e2f:	83 ec 0c             	sub    esp,0xc
c0012e32:	68 5c 01 00 00       	push   0x15c
c0012e37:	e8 fc c1 ff ff       	call   c000f038 <operator new(unsigned long)>
c0012e3c:	89 04 24             	mov    DWORD PTR [esp],eax
c0012e3f:	89 c3                	mov    ebx,eax
c0012e41:	e8 6c bf 00 00       	call   c001edb2 <PIT::PIT()>
c0012e46:	59                   	pop    ecx
c0012e47:	5f                   	pop    edi
c0012e48:	53                   	push   ebx
c0012e49:	ff 35 88 43 02 c0    	push   DWORD PTR ds:0xc0024388
c0012e4f:	e8 de d6 ff ff       	call   c0010532 <Device::addChild(Device*)>
c0012e54:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012e56:	6a 00                	push   0x0
c0012e58:	6a 00                	push   0x0
c0012e5a:	56                   	push   esi
c0012e5b:	53                   	push   ebx
c0012e5c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012e5f:	83 c4 14             	add    esp,0x14
c0012e62:	68 60 01 00 00       	push   0x160
c0012e67:	e8 cc c1 ff ff       	call   c000f038 <operator new(unsigned long)>
c0012e6c:	89 04 24             	mov    DWORD PTR [esp],eax
c0012e6f:	89 c7                	mov    edi,eax
c0012e71:	e8 ec bd 00 00       	call   c001ec62 <APICTimer::APICTimer()>
c0012e76:	6a 00                	push   0x0
c0012e78:	6a 00                	push   0x0
c0012e7a:	56                   	push   esi
c0012e7b:	57                   	push   edi
c0012e7c:	e8 e9 bc 00 00       	call   c001eb6a <APICTimer::open(int, int, void*)>
c0012e81:	83 c4 20             	add    esp,0x20
c0012e84:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012e86:	6a 00                	push   0x0
c0012e88:	6a 00                	push   0x0
c0012e8a:	6a 00                	push   0x0
c0012e8c:	53                   	push   ebx
c0012e8d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012e90:	e8 db 18 00 00       	call   c0014770 <thisCPU()>
c0012e95:	5a                   	pop    edx
c0012e96:	59                   	pop    ecx
c0012e97:	57                   	push   edi
c0012e98:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0012e9e:	e8 8f d6 ff ff       	call   c0010532 <Device::addChild(Device*)>
c0012ea3:	83 c4 10             	add    esp,0x10
c0012ea6:	eb 33                	jmp    c0012edb <setupTimer(int)+0x11b>
c0012ea8:	83 ec 0c             	sub    esp,0xc
c0012eab:	68 5c 01 00 00       	push   0x15c
c0012eb0:	e8 83 c1 ff ff       	call   c000f038 <operator new(unsigned long)>
c0012eb5:	89 04 24             	mov    DWORD PTR [esp],eax
c0012eb8:	89 c3                	mov    ebx,eax
c0012eba:	e8 f3 be 00 00       	call   c001edb2 <PIT::PIT()>
c0012ebf:	58                   	pop    eax
c0012ec0:	5a                   	pop    edx
c0012ec1:	53                   	push   ebx
c0012ec2:	ff 35 88 43 02 c0    	push   DWORD PTR ds:0xc0024388
c0012ec8:	e8 65 d6 ff ff       	call   c0010532 <Device::addChild(Device*)>
c0012ecd:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012ecf:	6a 00                	push   0x0
c0012ed1:	6a 00                	push   0x0
c0012ed3:	56                   	push   esi
c0012ed4:	53                   	push   ebx
c0012ed5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012ed8:	83 c4 20             	add    esp,0x20
c0012edb:	89 d8                	mov    eax,ebx
c0012edd:	5b                   	pop    ebx
c0012ede:	5e                   	pop    esi
c0012edf:	5f                   	pop    edi
c0012ee0:	c3                   	ret    
c0012ee1:	90                   	nop

c0012ee2 <VCache::VCache(PhysicalDisk*)>:
c0012ee2:	53                   	push   ebx
c0012ee3:	83 ec 08             	sub    esp,0x8
c0012ee6:	ba 80 1e 02 c0       	mov    edx,0xc0021e80
c0012eeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012eef:	89 10                	mov    DWORD PTR [eax],edx
c0012ef1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ef5:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0012efc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f00:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0012f07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f0b:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0012f12:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0012f19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f1d:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0012f24:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0012f2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f2f:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0012f36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f3a:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0012f3e:	83 ec 0c             	sub    esp,0xc
c0012f41:	6a 10                	push   0x10
c0012f43:	e8 f0 c0 ff ff       	call   c000f038 <operator new(unsigned long)>
c0012f48:	83 c4 10             	add    esp,0x10
c0012f4b:	89 c3                	mov    ebx,eax
c0012f4d:	83 ec 0c             	sub    esp,0xc
c0012f50:	53                   	push   ebx
c0012f51:	e8 06 5a 00 00       	call   c001895c <Mutex::Mutex()>
c0012f56:	83 c4 10             	add    esp,0x10
c0012f59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f5d:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0012f60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f64:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012f68:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0012f6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f6f:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0012f76:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012f7a:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0012f80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f84:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0012f87:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012f8b:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0012f91:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012f97:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012f9b:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0012f9e:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c0012fa1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012fa5:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0012fa9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012fad:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0012fb3:	c1 e0 06             	shl    eax,0x6
c0012fb6:	83 ec 0c             	sub    esp,0xc
c0012fb9:	50                   	push   eax
c0012fba:	e8 77 90 ff ff       	call   c000c036 <malloc>
c0012fbf:	83 c4 10             	add    esp,0x10
c0012fc2:	89 c2                	mov    edx,eax
c0012fc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012fc8:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0012fcb:	90                   	nop
c0012fcc:	83 c4 08             	add    esp,0x8
c0012fcf:	5b                   	pop    ebx
c0012fd0:	c3                   	ret    
c0012fd1:	90                   	nop

c0012fd2 <VCache::writeWriteBuffer()>:
c0012fd2:	53                   	push   ebx
c0012fd3:	83 ec 14             	sub    esp,0x14
c0012fd6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0012fda:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0012fdd:	8b 10                	mov    edx,DWORD PTR [eax]
c0012fdf:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0012fe2:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0012fe5:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0012fe8:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0012feb:	50                   	push   eax
c0012fec:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0012fef:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0012ff6:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0012ffd:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c0013001:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0013008:	83 c4 28             	add    esp,0x28
c001300b:	5b                   	pop    ebx
c001300c:	c3                   	ret    
c001300d:	90                   	nop

c001300e <VCache::~VCache()>:
c001300e:	83 ec 0c             	sub    esp,0xc
c0013011:	ba 80 1e 02 c0       	mov    edx,0xc0021e80
c0013016:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001301a:	89 10                	mov    DWORD PTR [eax],edx
c001301c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013020:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0013023:	84 c0                	test   al,al
c0013025:	74 0f                	je     c0013036 <VCache::~VCache()+0x28>
c0013027:	83 ec 0c             	sub    esp,0xc
c001302a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001302e:	e8 9f ff ff ff       	call   c0012fd2 <VCache::writeWriteBuffer()>
c0013033:	83 c4 10             	add    esp,0x10
c0013036:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001303a:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001303d:	83 ec 0c             	sub    esp,0xc
c0013040:	50                   	push   eax
c0013041:	e8 00 90 ff ff       	call   c000c046 <free>
c0013046:	83 c4 10             	add    esp,0x10
c0013049:	90                   	nop
c001304a:	83 c4 0c             	add    esp,0xc
c001304d:	c3                   	ret    

c001304e <VCache::~VCache()>:
c001304e:	83 ec 0c             	sub    esp,0xc
c0013051:	83 ec 0c             	sub    esp,0xc
c0013054:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013058:	e8 b1 ff ff ff       	call   c001300e <VCache::~VCache()>
c001305d:	83 c4 10             	add    esp,0x10
c0013060:	83 ec 08             	sub    esp,0x8
c0013063:	6a 30                	push   0x30
c0013065:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013069:	e8 d9 bf ff ff       	call   c000f047 <operator delete(void*, unsigned long)>
c001306e:	83 c4 10             	add    esp,0x10
c0013071:	83 c4 0c             	add    esp,0xc
c0013074:	c3                   	ret    
c0013075:	90                   	nop

c0013076 <VCache::write(unsigned long long, int, void*)>:
c0013076:	55                   	push   ebp
c0013077:	57                   	push   edi
c0013078:	56                   	push   esi
c0013079:	53                   	push   ebx
c001307a:	83 ec 28             	sub    esp,0x28
c001307d:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0013081:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0013085:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0013089:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001308d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013090:	e8 29 5d 00 00       	call   c0018dbe <Semaphore::acquire()>
c0013095:	83 c4 10             	add    esp,0x10
c0013098:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c001309c:	74 66                	je     c0013104 <VCache::write(unsigned long long, int, void*)+0x8e>
c001309e:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00130a1:	99                   	cdq    
c00130a2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00130a6:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c00130a9:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c00130ac:	89 c1                	mov    ecx,eax
c00130ae:	89 d0                	mov    eax,edx
c00130b0:	31 f1                	xor    ecx,esi
c00130b2:	31 f8                	xor    eax,edi
c00130b4:	89 ca                	mov    edx,ecx
c00130b6:	09 c2                	or     edx,eax
c00130b8:	75 3e                	jne    c00130f8 <VCache::write(unsigned long long, int, void*)+0x82>
c00130ba:	83 fd 01             	cmp    ebp,0x1
c00130bd:	75 39                	jne    c00130f8 <VCache::write(unsigned long long, int, void*)+0x82>
c00130bf:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00130c2:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00130c8:	51                   	push   ecx
c00130c9:	50                   	push   eax
c00130ca:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00130ce:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00130d2:	0f af c8             	imul   ecx,eax
c00130d5:	03 4b 28             	add    ecx,DWORD PTR [ebx+0x28]
c00130d8:	51                   	push   ecx
c00130d9:	e8 bf d5 fe ff       	call   c000069d <memcpy>
c00130de:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00130e1:	83 c4 10             	add    esp,0x10
c00130e4:	40                   	inc    eax
c00130e5:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c00130e8:	83 f8 40             	cmp    eax,0x40
c00130eb:	75 57                	jne    c0013144 <VCache::write(unsigned long long, int, void*)+0xce>
c00130ed:	83 ec 0c             	sub    esp,0xc
c00130f0:	53                   	push   ebx
c00130f1:	e8 dc fe ff ff       	call   c0012fd2 <VCache::writeWriteBuffer()>
c00130f6:	eb 34                	jmp    c001312c <VCache::write(unsigned long long, int, void*)+0xb6>
c00130f8:	83 ec 0c             	sub    esp,0xc
c00130fb:	53                   	push   ebx
c00130fc:	e8 d1 fe ff ff       	call   c0012fd2 <VCache::writeWriteBuffer()>
c0013101:	83 c4 10             	add    esp,0x10
c0013104:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0013107:	83 fd 3f             	cmp    ebp,0x3f
c001310a:	7f 25                	jg     c0013131 <VCache::write(unsigned long long, int, void*)+0xbb>
c001310c:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c001310f:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c0013112:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c0013115:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0013119:	52                   	push   edx
c001311a:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0013120:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0013124:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013127:	e8 71 d5 fe ff       	call   c000069d <memcpy>
c001312c:	83 c4 10             	add    esp,0x10
c001312f:	eb 13                	jmp    c0013144 <VCache::write(unsigned long long, int, void*)+0xce>
c0013131:	83 ec 0c             	sub    esp,0xc
c0013134:	8b 10                	mov    edx,DWORD PTR [eax]
c0013136:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001313a:	55                   	push   ebp
c001313b:	57                   	push   edi
c001313c:	56                   	push   esi
c001313d:	50                   	push   eax
c001313e:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0013141:	83 c4 20             	add    esp,0x20
c0013144:	83 ec 0c             	sub    esp,0xc
c0013147:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001314a:	e8 f7 61 00 00       	call   c0019346 <Semaphore::release()>
c001314f:	83 c4 2c             	add    esp,0x2c
c0013152:	31 c0                	xor    eax,eax
c0013154:	5b                   	pop    ebx
c0013155:	5e                   	pop    esi
c0013156:	5f                   	pop    edi
c0013157:	5d                   	pop    ebp
c0013158:	c3                   	ret    
c0013159:	90                   	nop

c001315a <VCache::read(unsigned long long, int, void*)>:
c001315a:	57                   	push   edi
c001315b:	56                   	push   esi
c001315c:	53                   	push   ebx
c001315d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013161:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013165:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013169:	83 ec 0c             	sub    esp,0xc
c001316c:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001316f:	e8 4a 5c 00 00       	call   c0018dbe <Semaphore::acquire()>
c0013174:	83 c4 10             	add    esp,0x10
c0013177:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c001317b:	74 0c                	je     c0013189 <VCache::read(unsigned long long, int, void*)+0x2f>
c001317d:	83 ec 0c             	sub    esp,0xc
c0013180:	53                   	push   ebx
c0013181:	e8 4c fe ff ff       	call   c0012fd2 <VCache::writeWriteBuffer()>
c0013186:	83 c4 10             	add    esp,0x10
c0013189:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001318c:	83 ec 0c             	sub    esp,0xc
c001318f:	8b 10                	mov    edx,DWORD PTR [eax]
c0013191:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013195:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013199:	57                   	push   edi
c001319a:	56                   	push   esi
c001319b:	50                   	push   eax
c001319c:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001319f:	83 c4 14             	add    esp,0x14
c00131a2:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00131a5:	e8 9c 61 00 00       	call   c0019346 <Semaphore::release()>
c00131aa:	83 c4 10             	add    esp,0x10
c00131ad:	31 c0                	xor    eax,eax
c00131af:	5b                   	pop    ebx
c00131b0:	5e                   	pop    esi
c00131b1:	5f                   	pop    edi
c00131b2:	c3                   	ret    
c00131b3:	90                   	nop

c00131b4 <Video::putrect(int, int, int, int, unsigned int)>:
c00131b4:	55                   	push   ebp
c00131b5:	57                   	push   edi
c00131b6:	56                   	push   esi
c00131b7:	53                   	push   ebx
c00131b8:	83 ec 1c             	sub    esp,0x1c
c00131bb:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00131bf:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00131c3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00131c7:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00131cb:	01 e8                	add    eax,ebp
c00131cd:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00131d1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00131d5:	01 df                	add    edi,ebx
c00131d7:	39 fb                	cmp    ebx,edi
c00131d9:	7d 1b                	jge    c00131f6 <Video::putrect(int, int, int, int, unsigned int)+0x42>
c00131db:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00131df:	7d 12                	jge    c00131f3 <Video::putrect(int, int, int, int, unsigned int)+0x3f>
c00131e1:	8b 16                	mov    edx,DWORD PTR [esi]
c00131e3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00131e7:	53                   	push   ebx
c00131e8:	55                   	push   ebp
c00131e9:	45                   	inc    ebp
c00131ea:	56                   	push   esi
c00131eb:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00131ee:	83 c4 10             	add    esp,0x10
c00131f1:	eb e8                	jmp    c00131db <Video::putrect(int, int, int, int, unsigned int)+0x27>
c00131f3:	43                   	inc    ebx
c00131f4:	eb e1                	jmp    c00131d7 <Video::putrect(int, int, int, int, unsigned int)+0x23>
c00131f6:	83 c4 1c             	add    esp,0x1c
c00131f9:	5b                   	pop    ebx
c00131fa:	5e                   	pop    esi
c00131fb:	5f                   	pop    edi
c00131fc:	5d                   	pop    ebp
c00131fd:	c3                   	ret    

c00131fe <Video::blit(unsigned int*, int, int, int, int)>:
c00131fe:	55                   	push   ebp
c00131ff:	57                   	push   edi
c0013200:	56                   	push   esi
c0013201:	53                   	push   ebx
c0013202:	83 ec 1c             	sub    esp,0x1c
c0013205:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0013209:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001320d:	85 c0                	test   eax,eax
c001320f:	79 02                	jns    c0013213 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c0013211:	31 c0                	xor    eax,eax
c0013213:	c1 e0 02             	shl    eax,0x2
c0013216:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001321a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001321e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0013222:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0013226:	39 d8                	cmp    eax,ebx
c0013228:	7e 49                	jle    c0013273 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c001322a:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0013230:	7c 41                	jl     c0013273 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0013232:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0013236:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001323a:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001323e:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0013242:	39 f9                	cmp    ecx,edi
c0013244:	7e 22                	jle    c0013268 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c0013246:	83 c5 04             	add    ebp,0x4
c0013249:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c001324f:	7c 14                	jl     c0013265 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c0013251:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0013253:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0013256:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001325a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001325e:	56                   	push   esi
c001325f:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0013262:	83 c4 10             	add    esp,0x10
c0013265:	47                   	inc    edi
c0013266:	eb d2                	jmp    c001323a <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0013268:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001326c:	43                   	inc    ebx
c001326d:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0013271:	eb ab                	jmp    c001321e <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0013273:	83 c4 1c             	add    esp,0x1c
c0013276:	5b                   	pop    ebx
c0013277:	5e                   	pop    esi
c0013278:	5f                   	pop    edi
c0013279:	5d                   	pop    ebp
c001327a:	c3                   	ret    
c001327b:	90                   	nop

c001327c <Video::clearScreen(unsigned int)>:
c001327c:	57                   	push   edi
c001327d:	56                   	push   esi
c001327e:	53                   	push   ebx
c001327f:	31 db                	xor    ebx,ebx
c0013281:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013285:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c001328b:	7e 1f                	jle    c00132ac <Video::clearScreen(unsigned int)+0x30>
c001328d:	31 ff                	xor    edi,edi
c001328f:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0013295:	7e 12                	jle    c00132a9 <Video::clearScreen(unsigned int)+0x2d>
c0013297:	8b 06                	mov    eax,DWORD PTR [esi]
c0013299:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001329d:	53                   	push   ebx
c001329e:	57                   	push   edi
c001329f:	47                   	inc    edi
c00132a0:	56                   	push   esi
c00132a1:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00132a4:	83 c4 10             	add    esp,0x10
c00132a7:	eb e6                	jmp    c001328f <Video::clearScreen(unsigned int)+0x13>
c00132a9:	43                   	inc    ebx
c00132aa:	eb d9                	jmp    c0013285 <Video::clearScreen(unsigned int)+0x9>
c00132ac:	5b                   	pop    ebx
c00132ad:	5e                   	pop    esi
c00132ae:	5f                   	pop    edi
c00132af:	c3                   	ret    

c00132b0 <Video::putpixel(int, int, unsigned int)>:
c00132b0:	c7 44 24 04 88 1e 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021e88
c00132b8:	e9 6a be ff ff       	jmp    c000f127 <Dbg::kprintf(char const*, ...)>
c00132bd:	90                   	nop

c00132be <Video::Video(char const*)>:
c00132be:	83 ec 0c             	sub    esp,0xc
c00132c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132c5:	83 ec 08             	sub    esp,0x8
c00132c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00132cc:	50                   	push   eax
c00132cd:	e8 50 d4 ff ff       	call   c0010722 <Device::Device(char const*)>
c00132d2:	83 c4 10             	add    esp,0x10
c00132d5:	ba a0 1e 02 c0       	mov    edx,0xc0021ea0
c00132da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132de:	89 10                	mov    DWORD PTR [eax],edx
c00132e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132e4:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c00132ee:	90                   	nop
c00132ef:	83 c4 0c             	add    esp,0xc
c00132f2:	c3                   	ret    
c00132f3:	90                   	nop

c00132f4 <Video::~Video()>:
c00132f4:	83 ec 0c             	sub    esp,0xc
c00132f7:	ba a0 1e 02 c0       	mov    edx,0xc0021ea0
c00132fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013300:	89 10                	mov    DWORD PTR [eax],edx
c0013302:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013306:	83 ec 0c             	sub    esp,0xc
c0013309:	50                   	push   eax
c001330a:	e8 c5 d0 ff ff       	call   c00103d4 <Device::~Device()>
c001330f:	83 c4 10             	add    esp,0x10
c0013312:	90                   	nop
c0013313:	83 c4 0c             	add    esp,0xc
c0013316:	c3                   	ret    
c0013317:	90                   	nop

c0013318 <Video::~Video()>:
c0013318:	83 ec 0c             	sub    esp,0xc
c001331b:	83 ec 0c             	sub    esp,0xc
c001331e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013322:	e8 cd ff ff ff       	call   c00132f4 <Video::~Video()>
c0013327:	83 c4 10             	add    esp,0x10
c001332a:	83 ec 08             	sub    esp,0x8
c001332d:	68 64 01 00 00       	push   0x164
c0013332:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013336:	e8 0c bd ff ff       	call   c000f047 <operator delete(void*, unsigned long)>
c001333b:	83 c4 10             	add    esp,0x10
c001333e:	83 c4 0c             	add    esp,0xc
c0013341:	c3                   	ret    

c0013342 <Video::isMonochrome()>:
c0013342:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013346:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c001334c:	c3                   	ret    
c001334d:	90                   	nop

c001334e <Video::getWidth()>:
c001334e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013352:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0013358:	c3                   	ret    
c0013359:	90                   	nop

c001335a <Video::getHeight()>:
c001335a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001335e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0013364:	c3                   	ret    
c0013365:	90                   	nop

c0013366 <Video::drawCursor(int, int, unsigned char*, int)>:
c0013366:	55                   	push   ebp
c0013367:	57                   	push   edi
c0013368:	56                   	push   esi
c0013369:	53                   	push   ebx
c001336a:	83 ec 2c             	sub    esp,0x2c
c001336d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0013371:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0013375:	83 f8 01             	cmp    eax,0x1
c0013378:	19 c9                	sbb    ecx,ecx
c001337a:	31 db                	xor    ebx,ebx
c001337c:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0013380:	89 cd                	mov    ebp,ecx
c0013382:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c001338a:	f7 d5                	not    ebp
c001338c:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c0013392:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0013396:	01 d8                	add    eax,ebx
c0013398:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001339c:	56                   	push   esi
c001339d:	e8 b8 ff ff ff       	call   c001335a <Video::getHeight()>
c00133a2:	59                   	pop    ecx
c00133a3:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00133a7:	7e 70                	jle    c0013419 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c00133a9:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00133ad:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00133b1:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c00133b4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00133b8:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00133bc:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c00133c3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00133c7:	89 f8                	mov    eax,edi
c00133c9:	83 c0 20             	add    eax,0x20
c00133cc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00133d0:	56                   	push   esi
c00133d1:	e8 78 ff ff ff       	call   c001334e <Video::getWidth()>
c00133d6:	5a                   	pop    edx
c00133d7:	39 c7                	cmp    edi,eax
c00133d9:	7d 34                	jge    c001340f <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c00133db:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c00133e0:	74 05                	je     c00133e7 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c00133e2:	8b 06                	mov    eax,DWORD PTR [esi]
c00133e4:	55                   	push   ebp
c00133e5:	eb 0d                	jmp    c00133f4 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c00133e7:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c00133ec:	74 12                	je     c0013400 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c00133ee:	8b 06                	mov    eax,DWORD PTR [esi]
c00133f0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00133f4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00133f8:	57                   	push   edi
c00133f9:	56                   	push   esi
c00133fa:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00133fd:	83 c4 10             	add    esp,0x10
c0013400:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c0013404:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c0013408:	47                   	inc    edi
c0013409:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001340d:	75 c1                	jne    c00133d0 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c001340f:	43                   	inc    ebx
c0013410:	83 fb 20             	cmp    ebx,0x20
c0013413:	0f 85 79 ff ff ff    	jne    c0013392 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c0013419:	83 c4 2c             	add    esp,0x2c
c001341c:	5b                   	pop    ebx
c001341d:	5e                   	pop    esi
c001341e:	5f                   	pop    edi
c001341f:	5d                   	pop    ebp
c0013420:	c3                   	ret    
c0013421:	90                   	nop

c0013422 <ACPI::close(int, int, void*)>:
c0013422:	83 ec 1c             	sub    esp,0x1c
c0013425:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c001342d:	74 0a                	je     c0013439 <ACPI::close(int, int, void*)+0x17>
c001342f:	b8 00 00 00 00       	mov    eax,0x0
c0013434:	e9 9a 00 00 00       	jmp    c00134d3 <ACPI::close(int, int, void*)+0xb1>
c0013439:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001343e:	75 37                	jne    c0013477 <ACPI::close(int, int, void*)+0x55>
c0013440:	83 ec 0c             	sub    esp,0xc
c0013443:	68 d8 1e 02 c0       	push   0xc0021ed8
c0013448:	e8 da bc ff ff       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c001344d:	83 c4 10             	add    esp,0x10
c0013450:	a1 08 4a 02 c0       	mov    eax,ds:0xc0024a08
c0013455:	85 c0                	test   eax,eax
c0013457:	74 07                	je     c0013460 <ACPI::close(int, int, void*)+0x3e>
c0013459:	a1 08 4a 02 c0       	mov    eax,ds:0xc0024a08
c001345e:	ff d0                	call   eax
c0013460:	83 ec 0c             	sub    esp,0xc
c0013463:	68 ac 1f 02 c0       	push   0xc0021fac
c0013468:	e8 83 24 00 00       	call   c00158f0 <Krnl::panic(char const*)>
c001346d:	83 c4 10             	add    esp,0x10
c0013470:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0013475:	eb 5c                	jmp    c00134d3 <ACPI::close(int, int, void*)+0xb1>
c0013477:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c001347c:	75 50                	jne    c00134ce <ACPI::close(int, int, void*)+0xac>
c001347e:	a1 04 4a 02 c0       	mov    eax,ds:0xc0024a04
c0013483:	85 c0                	test   eax,eax
c0013485:	74 07                	je     c001348e <ACPI::close(int, int, void*)+0x6c>
c0013487:	a1 04 4a 02 c0       	mov    eax,ds:0xc0024a04
c001348c:	ff d0                	call   eax
c001348e:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c0013493:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0013498:	83 e0 02             	and    eax,0x2
c001349b:	74 1c                	je     c00134b9 <ACPI::close(int, int, void*)+0x97>
c001349d:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c00134a4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00134a8:	89 c2                	mov    edx,eax
c00134aa:	ec                   	in     al,dx
c00134ab:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00134af:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c00134b3:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00134b7:	eb da                	jmp    c0013493 <ACPI::close(int, int, void*)+0x71>
c00134b9:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c00134c0:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c00134c5:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00134c9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00134cd:	ee                   	out    dx,al
c00134ce:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00134d3:	83 c4 1c             	add    esp,0x1c
c00134d6:	c3                   	ret    

c00134d7 <findRSDP()>:
c00134d7:	83 ec 1c             	sub    esp,0x1c
c00134da:	a1 88 43 02 c0       	mov    eax,ds:0xc0024388
c00134df:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00134e5:	83 e0 04             	and    eax,0x4
c00134e8:	84 c0                	test   al,al
c00134ea:	75 07                	jne    c00134f3 <findRSDP()+0x1c>
c00134ec:	b8 00 00 00 00       	mov    eax,0x0
c00134f1:	eb 6a                	jmp    c001355d <findRSDP()+0x86>
c00134f3:	a1 d0 43 02 c0       	mov    eax,ds:0xc00243d0
c00134f8:	3d ff 07 00 00       	cmp    eax,0x7ff
c00134fd:	7f 1b                	jg     c001351a <findRSDP()+0x43>
c00134ff:	a1 88 43 02 c0       	mov    eax,ds:0xc0024388
c0013504:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c001350a:	83 e2 fb             	and    edx,0xfffffffb
c001350d:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0013513:	b8 00 00 00 00       	mov    eax,0x0
c0013518:	eb 43                	jmp    c001355d <findRSDP()+0x86>
c001351a:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0013522:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c001352a:	77 2c                	ja     c0013558 <findRSDP()+0x81>
c001352c:	83 ec 04             	sub    esp,0x4
c001352f:	6a 08                	push   0x8
c0013531:	68 e5 1e 02 c0       	push   0xc0021ee5
c0013536:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001353a:	e8 fb d0 fe ff       	call   c000063a <memcmp>
c001353f:	83 c4 10             	add    esp,0x10
c0013542:	85 c0                	test   eax,eax
c0013544:	0f 94 c0             	sete   al
c0013547:	84 c0                	test   al,al
c0013549:	74 06                	je     c0013551 <findRSDP()+0x7a>
c001354b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001354f:	eb 0c                	jmp    c001355d <findRSDP()+0x86>
c0013551:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0013556:	eb ca                	jmp    c0013522 <findRSDP()+0x4b>
c0013558:	b8 00 00 00 00       	mov    eax,0x0
c001355d:	83 c4 1c             	add    esp,0x1c
c0013560:	c3                   	ret    

c0013561 <loadACPITables(unsigned char*)>:
c0013561:	56                   	push   esi
c0013562:	53                   	push   ebx
c0013563:	83 ec 44             	sub    esp,0x44
c0013566:	a1 88 43 02 c0       	mov    eax,ds:0xc0024388
c001356b:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0013571:	83 e0 04             	and    eax,0x4
c0013574:	84 c0                	test   al,al
c0013576:	0f 84 05 02 00 00    	je     c0013781 <loadACPITables(unsigned char*)+0x220>
c001357c:	a0 20 4c 02 c0       	mov    al,ds:0xc0024c20
c0013581:	84 c0                	test   al,al
c0013583:	74 75                	je     c00135fa <loadACPITables(unsigned char*)+0x99>
c0013585:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0013589:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001358d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013591:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013594:	83 e8 24             	sub    eax,0x24
c0013597:	c1 e8 03             	shr    eax,0x3
c001359a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001359e:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c00135a6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00135aa:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c00135ae:	0f 8d b2 00 00 00    	jge    c0013666 <loadACPITables(unsigned char*)+0x105>
c00135b4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00135b8:	83 c0 24             	add    eax,0x24
c00135bb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00135bf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00135c3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00135c7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00135cb:	c1 e0 03             	shl    eax,0x3
c00135ce:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
c00135d2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00135d6:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00135d9:	8b 00                	mov    eax,DWORD PTR [eax]
c00135db:	89 c1                	mov    ecx,eax
c00135dd:	a1 0c 4a 02 c0       	mov    eax,ds:0xc0024a0c
c00135e2:	8d 50 01             	lea    edx,[eax+0x1]
c00135e5:	89 15 0c 4a 02 c0    	mov    DWORD PTR ds:0xc0024a0c,edx
c00135eb:	89 ca                	mov    edx,ecx
c00135ed:	89 14 c5 24 4a 02 c0 	mov    DWORD PTR [eax*8-0x3ffdb5dc],edx
c00135f4:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c00135f8:	eb ac                	jmp    c00135a6 <loadACPITables(unsigned char*)+0x45>
c00135fa:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00135fe:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0013602:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013606:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013609:	83 e8 24             	sub    eax,0x24
c001360c:	c1 e8 02             	shr    eax,0x2
c001360f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013613:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c001361b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001361f:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c0013623:	7d 41                	jge    c0013666 <loadACPITables(unsigned char*)+0x105>
c0013625:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0013629:	83 c0 24             	add    eax,0x24
c001362c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013630:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013634:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013638:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001363c:	c1 e0 02             	shl    eax,0x2
c001363f:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c0013643:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013647:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013649:	a1 0c 4a 02 c0       	mov    eax,ds:0xc0024a0c
c001364e:	8d 50 01             	lea    edx,[eax+0x1]
c0013651:	89 15 0c 4a 02 c0    	mov    DWORD PTR ds:0xc0024a0c,edx
c0013657:	89 ca                	mov    edx,ecx
c0013659:	89 14 c5 24 4a 02 c0 	mov    DWORD PTR [eax*8-0x3ffdb5dc],edx
c0013660:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0013664:	eb b5                	jmp    c001361b <loadACPITables(unsigned char*)+0xba>
c0013666:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c001366e:	a1 0c 4a 02 c0       	mov    eax,ds:0xc0024a0c
c0013673:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
c0013677:	0f 8d 05 01 00 00    	jge    c0013782 <loadACPITables(unsigned char*)+0x221>
c001367d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013681:	8b 04 c5 24 4a 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdb5dc]
c0013688:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001368c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013690:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013694:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013698:	25 ff 0f 00 00       	and    eax,0xfff
c001369d:	89 c6                	mov    esi,eax
c001369f:	e8 41 ac ff ff       	call   c000e2e5 <Virt::getAKernelVAS()>
c00136a4:	89 c3                	mov    ebx,eax
c00136a6:	83 ec 0c             	sub    esp,0xc
c00136a9:	6a 01                	push   0x1
c00136ab:	e8 a5 aa ff ff       	call   c000e155 <Virt::allocateKernelVirtualPages(int)>
c00136b0:	83 c4 10             	add    esp,0x10
c00136b3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00136b7:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00136bd:	83 ec 0c             	sub    esp,0xc
c00136c0:	6a 01                	push   0x1
c00136c2:	6a 01                	push   0x1
c00136c4:	50                   	push   eax
c00136c5:	52                   	push   edx
c00136c6:	53                   	push   ebx
c00136c7:	e8 48 b4 ff ff       	call   c000eb14 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00136cc:	83 c4 20             	add    esp,0x20
c00136cf:	09 f0                	or     eax,esi
c00136d1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00136d5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00136d9:	c1 e0 03             	shl    eax,0x3
c00136dc:	05 20 4a 02 c0       	add    eax,0xc0024a20
c00136e1:	83 ec 04             	sub    esp,0x4
c00136e4:	6a 04                	push   0x4
c00136e6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00136ea:	50                   	push   eax
c00136eb:	e8 ad cf fe ff       	call   c000069d <memcpy>
c00136f0:	83 c4 10             	add    esp,0x10
c00136f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00136f7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00136fa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00136fe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013702:	05 00 10 00 00       	add    eax,0x1000
c0013707:	c1 e8 0c             	shr    eax,0xc
c001370a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001370e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013712:	89 04 24             	mov    DWORD PTR [esp],eax
c0013715:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013719:	25 ff 0f 00 00       	and    eax,0xfff
c001371e:	89 c6                	mov    esi,eax
c0013720:	e8 c0 ab ff ff       	call   c000e2e5 <Virt::getAKernelVAS()>
c0013725:	89 c3                	mov    ebx,eax
c0013727:	83 ec 0c             	sub    esp,0xc
c001372a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001372e:	e8 22 aa ff ff       	call   c000e155 <Virt::allocateKernelVirtualPages(int)>
c0013733:	83 c4 10             	add    esp,0x10
c0013736:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001373a:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0013740:	83 ec 0c             	sub    esp,0xc
c0013743:	6a 01                	push   0x1
c0013745:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013749:	50                   	push   eax
c001374a:	52                   	push   edx
c001374b:	53                   	push   ebx
c001374c:	e8 c3 b3 ff ff       	call   c000eb14 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0013751:	83 c4 20             	add    esp,0x20
c0013754:	09 f0                	or     eax,esi
c0013756:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001375a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001375d:	83 ec 0c             	sub    esp,0xc
c0013760:	50                   	push   eax
c0013761:	e8 49 ad ff ff       	call   c000e4af <Virt::freeKernelVirtualPages(unsigned long)>
c0013766:	83 c4 10             	add    esp,0x10
c0013769:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001376d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013771:	89 14 c5 24 4a 02 c0 	mov    DWORD PTR [eax*8-0x3ffdb5dc],edx
c0013778:	ff 44 24 34          	inc    DWORD PTR [esp+0x34]
c001377c:	e9 ed fe ff ff       	jmp    c001366e <loadACPITables(unsigned char*)+0x10d>
c0013781:	90                   	nop
c0013782:	83 c4 44             	add    esp,0x44
c0013785:	5b                   	pop    ebx
c0013786:	5e                   	pop    esi
c0013787:	c3                   	ret    

c0013788 <findRSDT(unsigned char*)>:
c0013788:	56                   	push   esi
c0013789:	53                   	push   ebx
c001378a:	83 ec 44             	sub    esp,0x44
c001378d:	a1 88 43 02 c0       	mov    eax,ds:0xc0024388
c0013792:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0013798:	83 e0 04             	and    eax,0x4
c001379b:	84 c0                	test   al,al
c001379d:	75 0a                	jne    c00137a9 <findRSDT(unsigned char*)+0x21>
c001379f:	b8 00 00 00 00       	mov    eax,0x0
c00137a4:	e9 f7 00 00 00       	jmp    c00138a0 <findRSDT(unsigned char*)+0x118>
c00137a9:	83 ec 04             	sub    esp,0x4
c00137ac:	6a 24                	push   0x24
c00137ae:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c00137b2:	8d 44 24 18          	lea    eax,[esp+0x18]
c00137b6:	50                   	push   eax
c00137b7:	e8 e1 ce fe ff       	call   c000069d <memcpy>
c00137bc:	83 c4 10             	add    esp,0x10
c00137bf:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c00137c3:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c00137c7:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c00137cf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00137d3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00137d7:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00137db:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00137df:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00137e3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00137e7:	25 ff 0f 00 00       	and    eax,0xfff
c00137ec:	89 c6                	mov    esi,eax
c00137ee:	e8 f2 aa ff ff       	call   c000e2e5 <Virt::getAKernelVAS()>
c00137f3:	89 c3                	mov    ebx,eax
c00137f5:	83 ec 0c             	sub    esp,0xc
c00137f8:	6a 02                	push   0x2
c00137fa:	e8 56 a9 ff ff       	call   c000e155 <Virt::allocateKernelVirtualPages(int)>
c00137ff:	83 c4 10             	add    esp,0x10
c0013802:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0013806:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001380c:	83 ec 0c             	sub    esp,0xc
c001380f:	6a 01                	push   0x1
c0013811:	6a 02                	push   0x2
c0013813:	50                   	push   eax
c0013814:	52                   	push   edx
c0013815:	53                   	push   ebx
c0013816:	e8 f9 b2 ff ff       	call   c000eb14 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001381b:	83 c4 20             	add    esp,0x20
c001381e:	09 f0                	or     eax,esi
c0013820:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0013824:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013828:	25 ff 0f 00 00       	and    eax,0xfff
c001382d:	89 c6                	mov    esi,eax
c001382f:	e8 b1 aa ff ff       	call   c000e2e5 <Virt::getAKernelVAS()>
c0013834:	89 c3                	mov    ebx,eax
c0013836:	83 ec 0c             	sub    esp,0xc
c0013839:	6a 02                	push   0x2
c001383b:	e8 15 a9 ff ff       	call   c000e155 <Virt::allocateKernelVirtualPages(int)>
c0013840:	83 c4 10             	add    esp,0x10
c0013843:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0013847:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001384d:	83 ec 0c             	sub    esp,0xc
c0013850:	6a 01                	push   0x1
c0013852:	6a 02                	push   0x2
c0013854:	50                   	push   eax
c0013855:	52                   	push   edx
c0013856:	53                   	push   ebx
c0013857:	e8 b8 b2 ff ff       	call   c000eb14 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001385c:	83 c4 20             	add    esp,0x20
c001385f:	09 f0                	or     eax,esi
c0013861:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0013865:	80 7c 24 3b 00       	cmp    BYTE PTR [esp+0x3b],0x0
c001386a:	75 11                	jne    c001387d <findRSDT(unsigned char*)+0xf5>
c001386c:	c6 05 20 4c 02 c0 00 	mov    BYTE PTR ds:0xc0024c20,0x0
c0013873:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013877:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001387b:	eb 1f                	jmp    c001389c <findRSDT(unsigned char*)+0x114>
c001387d:	80 7c 24 3b 02       	cmp    BYTE PTR [esp+0x3b],0x2
c0013882:	75 11                	jne    c0013895 <findRSDT(unsigned char*)+0x10d>
c0013884:	c6 05 20 4c 02 c0 01 	mov    BYTE PTR ds:0xc0024c20,0x1
c001388b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001388f:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0013893:	eb 07                	jmp    c001389c <findRSDT(unsigned char*)+0x114>
c0013895:	b8 00 00 00 00       	mov    eax,0x0
c001389a:	eb 04                	jmp    c00138a0 <findRSDT(unsigned char*)+0x118>
c001389c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00138a0:	83 c4 44             	add    esp,0x44
c00138a3:	5b                   	pop    ebx
c00138a4:	5e                   	pop    esi
c00138a5:	c3                   	ret    

c00138a6 <findDataTable(unsigned char*, char*)>:
c00138a6:	83 ec 1c             	sub    esp,0x1c
c00138a9:	a1 88 43 02 c0       	mov    eax,ds:0xc0024388
c00138ae:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00138b4:	83 e0 04             	and    eax,0x4
c00138b7:	84 c0                	test   al,al
c00138b9:	75 07                	jne    c00138c2 <findDataTable(unsigned char*, char*)+0x1c>
c00138bb:	b8 00 00 00 00       	mov    eax,0x0
c00138c0:	eb 7c                	jmp    c001393e <findDataTable(unsigned char*, char*)+0x98>
c00138c2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00138ca:	a1 0c 4a 02 c0       	mov    eax,ds:0xc0024a0c
c00138cf:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00138d3:	7d 3a                	jge    c001390f <findDataTable(unsigned char*, char*)+0x69>
c00138d5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00138d9:	c1 e0 03             	shl    eax,0x3
c00138dc:	05 20 4a 02 c0       	add    eax,0xc0024a20
c00138e1:	83 ec 04             	sub    esp,0x4
c00138e4:	6a 04                	push   0x4
c00138e6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00138ea:	50                   	push   eax
c00138eb:	e8 4a cd fe ff       	call   c000063a <memcmp>
c00138f0:	83 c4 10             	add    esp,0x10
c00138f3:	85 c0                	test   eax,eax
c00138f5:	0f 94 c0             	sete   al
c00138f8:	84 c0                	test   al,al
c00138fa:	74 0d                	je     c0013909 <findDataTable(unsigned char*, char*)+0x63>
c00138fc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013900:	8b 04 c5 24 4a 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdb5dc]
c0013907:	eb 35                	jmp    c001393e <findDataTable(unsigned char*, char*)+0x98>
c0013909:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001390d:	eb bb                	jmp    c00138ca <findDataTable(unsigned char*, char*)+0x24>
c001390f:	a0 20 4c 02 c0       	mov    al,ds:0xc0024c20
c0013914:	84 c0                	test   al,al
c0013916:	74 07                	je     c001391f <findDataTable(unsigned char*, char*)+0x79>
c0013918:	b8 58 00 00 00       	mov    eax,0x58
c001391d:	eb 05                	jmp    c0013924 <findDataTable(unsigned char*, char*)+0x7e>
c001391f:	b8 52 00 00 00       	mov    eax,0x52
c0013924:	83 ec 04             	sub    esp,0x4
c0013927:	50                   	push   eax
c0013928:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001392c:	68 d0 1f 02 c0       	push   0xc0021fd0
c0013931:	e8 f1 b7 ff ff       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c0013936:	83 c4 10             	add    esp,0x10
c0013939:	b8 00 00 00 00       	mov    eax,0x0
c001393e:	83 c4 1c             	add    esp,0x1c
c0013941:	c3                   	ret    

c0013942 <scanMADT()>:
c0013942:	83 ec 2c             	sub    esp,0x2c
c0013945:	a1 88 43 02 c0       	mov    eax,ds:0xc0024388
c001394a:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0013950:	83 e0 04             	and    eax,0x4
c0013953:	84 c0                	test   al,al
c0013955:	0f 84 73 03 00 00    	je     c0013cce <scanMADT()+0x38c>
c001395b:	e8 77 fb ff ff       	call   c00134d7 <findRSDP()>
c0013960:	a3 2c 4c 02 c0       	mov    ds:0xc0024c2c,eax
c0013965:	a1 2c 4c 02 c0       	mov    eax,ds:0xc0024c2c
c001396a:	85 c0                	test   eax,eax
c001396c:	75 19                	jne    c0013987 <scanMADT()+0x45>
c001396e:	a1 88 43 02 c0       	mov    eax,ds:0xc0024388
c0013973:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0013979:	83 e2 fb             	and    edx,0xfffffffb
c001397c:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0013982:	e9 4b 03 00 00       	jmp    c0013cd2 <scanMADT()+0x390>
c0013987:	a1 2c 4c 02 c0       	mov    eax,ds:0xc0024c2c
c001398c:	83 ec 0c             	sub    esp,0xc
c001398f:	50                   	push   eax
c0013990:	e8 f3 fd ff ff       	call   c0013788 <findRSDT(unsigned char*)>
c0013995:	83 c4 10             	add    esp,0x10
c0013998:	a3 28 4c 02 c0       	mov    ds:0xc0024c28,eax
c001399d:	a1 28 4c 02 c0       	mov    eax,ds:0xc0024c28
c00139a2:	85 c0                	test   eax,eax
c00139a4:	75 19                	jne    c00139bf <scanMADT()+0x7d>
c00139a6:	a1 88 43 02 c0       	mov    eax,ds:0xc0024388
c00139ab:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00139b1:	83 e2 fb             	and    edx,0xfffffffb
c00139b4:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00139ba:	e9 13 03 00 00       	jmp    c0013cd2 <scanMADT()+0x390>
c00139bf:	a1 28 4c 02 c0       	mov    eax,ds:0xc0024c28
c00139c4:	83 ec 0c             	sub    esp,0xc
c00139c7:	50                   	push   eax
c00139c8:	e8 94 fb ff ff       	call   c0013561 <loadACPITables(unsigned char*)>
c00139cd:	83 c4 10             	add    esp,0x10
c00139d0:	a1 28 4c 02 c0       	mov    eax,ds:0xc0024c28
c00139d5:	83 ec 08             	sub    esp,0x8
c00139d8:	68 ee 1e 02 c0       	push   0xc0021eee
c00139dd:	50                   	push   eax
c00139de:	e8 c3 fe ff ff       	call   c00138a6 <findDataTable(unsigned char*, char*)>
c00139e3:	83 c4 10             	add    esp,0x10
c00139e6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00139ea:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c00139ef:	75 19                	jne    c0013a0a <scanMADT()+0xc8>
c00139f1:	a1 88 43 02 c0       	mov    eax,ds:0xc0024388
c00139f6:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00139fc:	83 e2 fe             	and    edx,0xfffffffe
c00139ff:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0013a05:	e9 c8 02 00 00       	jmp    c0013cd2 <scanMADT()+0x390>
c0013a0a:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0013a12:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013a16:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013a19:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0013a1d:	0f 87 af 02 00 00    	ja     c0013cd2 <scanMADT()+0x390>
c0013a23:	81 7c 24 1c f3 01 00 00 	cmp    DWORD PTR [esp+0x1c],0x1f3
c0013a2b:	0f 87 a1 02 00 00    	ja     c0013cd2 <scanMADT()+0x390>
c0013a31:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013a35:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013a39:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013a3d:	8d 50 01             	lea    edx,[eax+0x1]
c0013a40:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013a44:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013a48:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0013a4c:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0013a50:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013a54:	8d 50 01             	lea    edx,[eax+0x1]
c0013a57:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013a5b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013a5f:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0013a63:	88 44 24 12          	mov    BYTE PTR [esp+0x12],al
c0013a67:	80 7c 24 12 02       	cmp    BYTE PTR [esp+0x12],0x2
c0013a6c:	0f 86 5f 02 00 00    	jbe    c0013cd1 <scanMADT()+0x38f>
c0013a72:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c0013a77:	75 57                	jne    c0013ad0 <scanMADT()+0x18e>
c0013a79:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013a7d:	8d 50 01             	lea    edx,[eax+0x1]
c0013a80:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013a84:	8a 15 60 4d 02 c0    	mov    dl,BYTE PTR ds:0xc0024d60
c0013a8a:	0f b6 d2             	movzx  edx,dl
c0013a8d:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0013a91:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0013a95:	88 82 a0 4d 02 c0    	mov    BYTE PTR [edx-0x3ffdb260],al
c0013a9b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013a9f:	8d 50 01             	lea    edx,[eax+0x1]
c0013aa2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013aa6:	8a 15 60 4d 02 c0    	mov    dl,BYTE PTR ds:0xc0024d60
c0013aac:	8d 4a 01             	lea    ecx,[edx+0x1]
c0013aaf:	88 0d 60 4d 02 c0    	mov    BYTE PTR ds:0xc0024d60,cl
c0013ab5:	0f b6 d2             	movzx  edx,dl
c0013ab8:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0013abc:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0013ac0:	88 82 80 4d 02 c0    	mov    BYTE PTR [edx-0x3ffdb280],al
c0013ac6:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0013acb:	e9 ea 01 00 00       	jmp    c0013cba <scanMADT()+0x378>
c0013ad0:	80 7c 24 13 01       	cmp    BYTE PTR [esp+0x13],0x1
c0013ad5:	0f 85 14 01 00 00    	jne    c0013bef <scanMADT()+0x2ad>
c0013adb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013adf:	8d 50 01             	lea    edx,[eax+0x1]
c0013ae2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013ae6:	8a 15 30 4c 02 c0    	mov    dl,BYTE PTR ds:0xc0024c30
c0013aec:	0f b6 d2             	movzx  edx,dl
c0013aef:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0013af3:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0013af7:	88 82 40 4c 02 c0    	mov    BYTE PTR [edx-0x3ffdb3c0],al
c0013afd:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0013b01:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013b05:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013b09:	01 d0                	add    eax,edx
c0013b0b:	83 c0 2c             	add    eax,0x2c
c0013b0e:	8a 00                	mov    al,BYTE PTR [eax]
c0013b10:	0f b6 d0             	movzx  edx,al
c0013b13:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013b17:	8d 48 01             	lea    ecx,[eax+0x1]
c0013b1a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013b1e:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0013b22:	0f b6 c0             	movzx  eax,al
c0013b25:	c1 e0 08             	shl    eax,0x8
c0013b28:	89 d1                	mov    ecx,edx
c0013b2a:	09 c1                	or     ecx,eax
c0013b2c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013b30:	8d 50 02             	lea    edx,[eax+0x2]
c0013b33:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013b37:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0013b3b:	0f b6 c0             	movzx  eax,al
c0013b3e:	c1 e0 10             	shl    eax,0x10
c0013b41:	09 c1                	or     ecx,eax
c0013b43:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013b47:	8d 50 03             	lea    edx,[eax+0x3]
c0013b4a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013b4e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0013b52:	0f b6 c0             	movzx  eax,al
c0013b55:	c1 e0 18             	shl    eax,0x18
c0013b58:	09 c1                	or     ecx,eax
c0013b5a:	89 ca                	mov    edx,ecx
c0013b5c:	a0 30 4c 02 c0       	mov    al,ds:0xc0024c30
c0013b61:	0f b6 c0             	movzx  eax,al
c0013b64:	89 14 85 60 4c 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb3a0],edx
c0013b6b:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0013b70:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013b74:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013b78:	01 d0                	add    eax,edx
c0013b7a:	83 c0 2c             	add    eax,0x2c
c0013b7d:	8a 00                	mov    al,BYTE PTR [eax]
c0013b7f:	0f b6 d0             	movzx  edx,al
c0013b82:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013b86:	8d 48 01             	lea    ecx,[eax+0x1]
c0013b89:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013b8d:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0013b91:	0f b6 c0             	movzx  eax,al
c0013b94:	c1 e0 08             	shl    eax,0x8
c0013b97:	89 d1                	mov    ecx,edx
c0013b99:	09 c1                	or     ecx,eax
c0013b9b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013b9f:	8d 50 02             	lea    edx,[eax+0x2]
c0013ba2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013ba6:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0013baa:	0f b6 c0             	movzx  eax,al
c0013bad:	c1 e0 10             	shl    eax,0x10
c0013bb0:	09 c1                	or     ecx,eax
c0013bb2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013bb6:	8d 50 03             	lea    edx,[eax+0x3]
c0013bb9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013bbd:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0013bc1:	0f b6 c0             	movzx  eax,al
c0013bc4:	c1 e0 18             	shl    eax,0x18
c0013bc7:	09 c1                	or     ecx,eax
c0013bc9:	89 ca                	mov    edx,ecx
c0013bcb:	a0 30 4c 02 c0       	mov    al,ds:0xc0024c30
c0013bd0:	0f b6 c0             	movzx  eax,al
c0013bd3:	89 14 85 e0 4c 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb320],edx
c0013bda:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0013bdf:	a0 30 4c 02 c0       	mov    al,ds:0xc0024c30
c0013be4:	40                   	inc    eax
c0013be5:	a2 30 4c 02 c0       	mov    ds:0xc0024c30,al
c0013bea:	e9 cb 00 00 00       	jmp    c0013cba <scanMADT()+0x378>
c0013bef:	80 7c 24 13 02       	cmp    BYTE PTR [esp+0x13],0x2
c0013bf4:	0f 85 a6 00 00 00    	jne    c0013ca0 <scanMADT()+0x35e>
c0013bfa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013bfe:	8d 50 01             	lea    edx,[eax+0x1]
c0013c01:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013c05:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013c09:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0013c0d:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0013c11:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013c15:	8d 50 01             	lea    edx,[eax+0x1]
c0013c18:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013c1c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013c20:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0013c24:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0013c28:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013c2c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013c30:	01 d0                	add    eax,edx
c0013c32:	83 c0 2c             	add    eax,0x2c
c0013c35:	8a 00                	mov    al,BYTE PTR [eax]
c0013c37:	0f b6 d0             	movzx  edx,al
c0013c3a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013c3e:	8d 48 01             	lea    ecx,[eax+0x1]
c0013c41:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013c45:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0013c49:	0f b6 c0             	movzx  eax,al
c0013c4c:	c1 e0 08             	shl    eax,0x8
c0013c4f:	89 d1                	mov    ecx,edx
c0013c51:	09 c1                	or     ecx,eax
c0013c53:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013c57:	8d 50 02             	lea    edx,[eax+0x2]
c0013c5a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013c5e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0013c62:	0f b6 c0             	movzx  eax,al
c0013c65:	c1 e0 10             	shl    eax,0x10
c0013c68:	09 c1                	or     ecx,eax
c0013c6a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013c6e:	8d 50 03             	lea    edx,[eax+0x3]
c0013c71:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013c75:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0013c79:	0f b6 c0             	movzx  eax,al
c0013c7c:	c1 e0 18             	shl    eax,0x18
c0013c7f:	09 c8                	or     eax,ecx
c0013c81:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013c85:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0013c8a:	83 44 24 1c 02       	add    DWORD PTR [esp+0x1c],0x2
c0013c8f:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0013c94:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013c98:	88 90 e0 3a 02 c0    	mov    BYTE PTR [eax-0x3ffdc520],dl
c0013c9e:	eb 1a                	jmp    c0013cba <scanMADT()+0x378>
c0013ca0:	80 7c 24 13 04       	cmp    BYTE PTR [esp+0x13],0x4
c0013ca5:	75 07                	jne    c0013cae <scanMADT()+0x36c>
c0013ca7:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0013cac:	eb 0c                	jmp    c0013cba <scanMADT()+0x378>
c0013cae:	80 7c 24 13 05       	cmp    BYTE PTR [esp+0x13],0x5
c0013cb3:	75 05                	jne    c0013cba <scanMADT()+0x378>
c0013cb5:	83 44 24 1c 0a       	add    DWORD PTR [esp+0x1c],0xa
c0013cba:	0f b6 54 24 12       	movzx  edx,BYTE PTR [esp+0x12]
c0013cbf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013cc3:	01 d0                	add    eax,edx
c0013cc5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013cc9:	e9 44 fd ff ff       	jmp    c0013a12 <scanMADT()+0xd0>
c0013cce:	90                   	nop
c0013ccf:	eb 01                	jmp    c0013cd2 <scanMADT()+0x390>
c0013cd1:	90                   	nop
c0013cd2:	83 c4 2c             	add    esp,0x2c
c0013cd5:	c3                   	ret    

c0013cd6 <ACPI::ACPI()>:
c0013cd6:	83 ec 0c             	sub    esp,0xc
c0013cd9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013cdd:	83 ec 08             	sub    esp,0x8
c0013ce0:	68 f3 1e 02 c0       	push   0xc0021ef3
c0013ce5:	50                   	push   eax
c0013ce6:	e8 37 ca ff ff       	call   c0010722 <Device::Device(char const*)>
c0013ceb:	83 c4 10             	add    esp,0x10
c0013cee:	ba 9c 20 02 c0       	mov    edx,0xc002209c
c0013cf3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013cf7:	89 10                	mov    DWORD PTR [eax],edx
c0013cf9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013cfd:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0013d04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d08:	c7 80 5c 21 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x215c],0x0
c0013d12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d16:	c7 80 60 22 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x2260],0x0
c0013d20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d24:	c6 80 64 22 00 00 00 	mov    BYTE PTR [eax+0x2264],0x0
c0013d2b:	e8 12 fc ff ff       	call   c0013942 <scanMADT()>
c0013d30:	90                   	nop
c0013d31:	83 c4 0c             	add    esp,0xc
c0013d34:	c3                   	ret    
c0013d35:	90                   	nop

c0013d36 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0013d36:	83 ec 2c             	sub    esp,0x2c
c0013d39:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0013d3d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0013d41:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0013d45:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0013d49:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0013d4e:	88 d0                	mov    al,dl
c0013d50:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0013d54:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0013d59:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0013d61:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013d65:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0013d6b:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0013d6f:	0f 8d 97 00 00 00    	jge    c0013e0c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c0013d75:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013d79:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013d7d:	83 c2 2a             	add    edx,0x2a
c0013d80:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0013d84:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0013d89:	75 78                	jne    c0013e03 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0013d8b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013d8f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013d93:	83 c2 2a             	add    edx,0x2a
c0013d96:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0013d9a:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0013d9e:	75 63                	jne    c0013e03 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0013da0:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0013da5:	74 3a                	je     c0013de1 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c0013da7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013dab:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013daf:	83 c2 2a             	add    edx,0x2a
c0013db2:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0013db6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013dba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013dbd:	39 c2                	cmp    edx,eax
c0013dbf:	74 10                	je     c0013dd1 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c0013dc1:	83 ec 0c             	sub    esp,0xc
c0013dc4:	68 00 20 02 c0       	push   0xc0022000
c0013dc9:	e8 22 1b 00 00       	call   c00158f0 <Krnl::panic(char const*)>
c0013dce:	83 c4 10             	add    esp,0x10
c0013dd1:	83 ec 0c             	sub    esp,0xc
c0013dd4:	68 f8 1e 02 c0       	push   0xc0021ef8
c0013dd9:	e8 12 1b 00 00       	call   c00158f0 <Krnl::panic(char const*)>
c0013dde:	83 c4 10             	add    esp,0x10
c0013de1:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0013de5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013de9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013ded:	83 c2 2a             	add    edx,0x2a
c0013df0:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c0013df4:	8b 02                	mov    eax,DWORD PTR [edx]
c0013df6:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0013df9:	89 01                	mov    DWORD PTR [ecx],eax
c0013dfb:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0013dfe:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0013e03:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0013e07:	e9 55 ff ff ff       	jmp    c0013d61 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c0013e0c:	90                   	nop
c0013e0d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013e11:	83 c4 2c             	add    esp,0x2c
c0013e14:	c2 04 00             	ret    0x4
c0013e17:	90                   	nop

c0013e18 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0013e18:	56                   	push   esi
c0013e19:	53                   	push   ebx
c0013e1a:	83 ec 14             	sub    esp,0x14
c0013e1d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013e21:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0013e25:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0013e29:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0013e2e:	88 c8                	mov    al,cl
c0013e30:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0013e34:	88 d0                	mov    al,dl
c0013e36:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0013e3a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013e3e:	8d b0 5c 01 00 00    	lea    esi,[eax+0x15c]
c0013e44:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013e48:	8b 98 5c 21 00 00    	mov    ebx,DWORD PTR [eax+0x215c]
c0013e4e:	0f b6 4c 24 04       	movzx  ecx,BYTE PTR [esp+0x4]
c0013e53:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0013e58:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0013e5d:	83 ec 04             	sub    esp,0x4
c0013e60:	56                   	push   esi
c0013e61:	53                   	push   ebx
c0013e62:	51                   	push   ecx
c0013e63:	52                   	push   edx
c0013e64:	50                   	push   eax
c0013e65:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013e69:	68 30 20 02 c0       	push   0xc0022030
c0013e6e:	e8 b4 b2 ff ff       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c0013e73:	83 c4 20             	add    esp,0x20
c0013e76:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013e7a:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c0013e80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013e84:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0013e87:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0013e8b:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0013e8f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013e93:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0013e99:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013e9d:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0013ea0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013ea4:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0013ea9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013ead:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c0013eb3:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0013eb7:	8d 48 01             	lea    ecx,[eax+0x1]
c0013eba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013ebe:	83 c2 2a             	add    edx,0x2a
c0013ec1:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0013ec5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013ec9:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c0013ecf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013ed3:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0013ed6:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0013eda:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0013ede:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013ee2:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0013ee8:	8d 50 01             	lea    edx,[eax+0x1]
c0013eeb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013eef:	89 90 5c 21 00 00    	mov    DWORD PTR [eax+0x215c],edx
c0013ef5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013ef9:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0013eff:	3d 00 08 00 00       	cmp    eax,0x800
c0013f04:	75 10                	jne    c0013f16 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xfe>
c0013f06:	83 ec 0c             	sub    esp,0xc
c0013f09:	68 07 1f 02 c0       	push   0xc0021f07
c0013f0e:	e8 dd 19 00 00       	call   c00158f0 <Krnl::panic(char const*)>
c0013f13:	83 c4 10             	add    esp,0x10
c0013f16:	90                   	nop
c0013f17:	83 c4 14             	add    esp,0x14
c0013f1a:	5b                   	pop    ebx
c0013f1b:	5e                   	pop    esi
c0013f1c:	c3                   	ret    
c0013f1d:	90                   	nop

c0013f1e <ACPI::setScreenBrightnessLevel(void*, int)>:
c0013f1e:	b8 00 00 00 00       	mov    eax,0x0
c0013f23:	c3                   	ret    

c0013f24 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c0013f24:	83 ec 1c             	sub    esp,0x1c
c0013f27:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013f2b:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0013f2e:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0013f32:	a1 88 43 02 c0       	mov    eax,ds:0xc0024388
c0013f37:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0013f3c:	83 ec 08             	sub    esp,0x8
c0013f3f:	52                   	push   edx
c0013f40:	50                   	push   eax
c0013f41:	e8 00 77 ff ff       	call   c000b646 <Computer::readCMOS(unsigned char)>
c0013f46:	83 c4 10             	add    esp,0x10
c0013f49:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0013f4d:	a1 88 43 02 c0       	mov    eax,ds:0xc0024388
c0013f52:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0013f57:	83 ec 04             	sub    esp,0x4
c0013f5a:	6a 01                	push   0x1
c0013f5c:	52                   	push   edx
c0013f5d:	50                   	push   eax
c0013f5e:	e8 f9 77 ff ff       	call   c000b75c <Computer::writeCMOS(unsigned char, unsigned char)>
c0013f63:	83 c4 10             	add    esp,0x10
c0013f66:	90                   	nop
c0013f67:	83 c4 1c             	add    esp,0x1c
c0013f6a:	c3                   	ret    
c0013f6b:	90                   	nop

c0013f6c <ACPI::open(int, int, void*)>:
c0013f6c:	53                   	push   ebx
c0013f6d:	83 ec 18             	sub    esp,0x18
c0013f70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f74:	c6 80 64 22 00 00 01 	mov    BYTE PTR [eax+0x2264],0x1
c0013f7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f7f:	8a 80 64 22 00 00    	mov    al,BYTE PTR [eax+0x2264]
c0013f85:	84 c0                	test   al,al
c0013f87:	74 60                	je     c0013fe9 <ACPI::open(int, int, void*)+0x7d>
c0013f89:	83 ec 0c             	sub    esp,0xc
c0013f8c:	68 58 01 00 00       	push   0x158
c0013f91:	e8 a2 b0 ff ff       	call   c000f038 <operator new(unsigned long)>
c0013f96:	83 c4 10             	add    esp,0x10
c0013f99:	89 c3                	mov    ebx,eax
c0013f9b:	83 ec 0c             	sub    esp,0xc
c0013f9e:	53                   	push   ebx
c0013f9f:	e8 90 7f 00 00       	call   c001bf34 <PCI::PCI()>
c0013fa4:	83 c4 10             	add    esp,0x10
c0013fa7:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0013fab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013faf:	83 ec 08             	sub    esp,0x8
c0013fb2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013fb6:	50                   	push   eax
c0013fb7:	e8 76 c5 ff ff       	call   c0010532 <Device::addChild(Device*)>
c0013fbc:	83 c4 10             	add    esp,0x10
c0013fbf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013fc3:	8b 00                	mov    eax,DWORD PTR [eax]
c0013fc5:	83 c0 08             	add    eax,0x8
c0013fc8:	8b 00                	mov    eax,DWORD PTR [eax]
c0013fca:	6a 00                	push   0x0
c0013fcc:	6a 00                	push   0x0
c0013fce:	6a 00                	push   0x0
c0013fd0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013fd4:	ff d0                	call   eax
c0013fd6:	83 c4 10             	add    esp,0x10
c0013fd9:	83 ec 0c             	sub    esp,0xc
c0013fdc:	68 24 1f 02 c0       	push   0xc0021f24
c0013fe1:	e8 41 b1 ff ff       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c0013fe6:	83 c4 10             	add    esp,0x10
c0013fe9:	83 ec 0c             	sub    esp,0xc
c0013fec:	68 2f 1f 02 c0       	push   0xc0021f2f
c0013ff1:	e8 9b 37 00 00       	call   c0017791 <Thr::loadKernelSymbolTable(char const*)>
c0013ff6:	83 c4 10             	add    esp,0x10
c0013ff9:	8b 1d 88 43 02 c0    	mov    ebx,DWORD PTR ds:0xc0024388
c0013fff:	83 ec 08             	sub    esp,0x8
c0014002:	6a 01                	push   0x1
c0014004:	68 4d 1f 02 c0       	push   0xc0021f4d
c0014009:	e8 65 42 00 00       	call   c0018273 <Thr::loadDLL(char const*, bool)>
c001400e:	83 c4 10             	add    esp,0x10
c0014011:	83 ec 08             	sub    esp,0x8
c0014014:	53                   	push   ebx
c0014015:	50                   	push   eax
c0014016:	e8 1e 44 00 00       	call   c0018439 <Thr::executeDLL(unsigned long, void*)>
c001401b:	83 c4 10             	add    esp,0x10
c001401e:	8b 1d 88 43 02 c0    	mov    ebx,DWORD PTR ds:0xc0024388
c0014024:	83 ec 08             	sub    esp,0x8
c0014027:	6a 01                	push   0x1
c0014029:	68 6a 1f 02 c0       	push   0xc0021f6a
c001402e:	e8 40 42 00 00       	call   c0018273 <Thr::loadDLL(char const*, bool)>
c0014033:	83 c4 10             	add    esp,0x10
c0014036:	83 ec 08             	sub    esp,0x8
c0014039:	53                   	push   ebx
c001403a:	50                   	push   eax
c001403b:	e8 f9 43 00 00       	call   c0018439 <Thr::executeDLL(unsigned long, void*)>
c0014040:	83 c4 10             	add    esp,0x10
c0014043:	a1 88 43 02 c0       	mov    eax,ds:0xc0024388
c0014048:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001404e:	83 e0 04             	and    eax,0x4
c0014051:	84 c0                	test   al,al
c0014053:	0f 84 cf 00 00 00    	je     c0014128 <ACPI::open(int, int, void*)+0x1bc>
c0014059:	83 ec 0c             	sub    esp,0xc
c001405c:	68 14 01 00 00       	push   0x114
c0014061:	e8 d2 af ff ff       	call   c000f038 <operator new(unsigned long)>
c0014066:	83 c4 10             	add    esp,0x10
c0014069:	89 c3                	mov    ebx,eax
c001406b:	a1 d4 57 02 c0       	mov    eax,ds:0xc00257d4
c0014070:	83 ec 04             	sub    esp,0x4
c0014073:	50                   	push   eax
c0014074:	68 87 1f 02 c0       	push   0xc0021f87
c0014079:	53                   	push   ebx
c001407a:	e8 d7 b5 ff ff       	call   c000f656 <File::File(char const*, Process*)>
c001407f:	83 c4 10             	add    esp,0x10
c0014082:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0014086:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001408b:	74 17                	je     c00140a4 <ACPI::open(int, int, void*)+0x138>
c001408d:	83 ec 0c             	sub    esp,0xc
c0014090:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014094:	e8 8f b8 ff ff       	call   c000f928 <File::exists()>
c0014099:	83 c4 10             	add    esp,0x10
c001409c:	84 c0                	test   al,al
c001409e:	74 04                	je     c00140a4 <ACPI::open(int, int, void*)+0x138>
c00140a0:	b0 01                	mov    al,0x1
c00140a2:	eb 02                	jmp    c00140a6 <ACPI::open(int, int, void*)+0x13a>
c00140a4:	b0 00                	mov    al,0x0
c00140a6:	84 c0                	test   al,al
c00140a8:	74 25                	je     c00140cf <ACPI::open(int, int, void*)+0x163>
c00140aa:	8b 1d 88 43 02 c0    	mov    ebx,DWORD PTR ds:0xc0024388
c00140b0:	83 ec 08             	sub    esp,0x8
c00140b3:	6a 01                	push   0x1
c00140b5:	68 87 1f 02 c0       	push   0xc0021f87
c00140ba:	e8 b4 41 00 00       	call   c0018273 <Thr::loadDLL(char const*, bool)>
c00140bf:	83 c4 10             	add    esp,0x10
c00140c2:	83 ec 08             	sub    esp,0x8
c00140c5:	53                   	push   ebx
c00140c6:	50                   	push   eax
c00140c7:	e8 6d 43 00 00       	call   c0018439 <Thr::executeDLL(unsigned long, void*)>
c00140cc:	83 c4 10             	add    esp,0x10
c00140cf:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00140d4:	74 1e                	je     c00140f4 <ACPI::open(int, int, void*)+0x188>
c00140d6:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00140db:	74 17                	je     c00140f4 <ACPI::open(int, int, void*)+0x188>
c00140dd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00140e1:	8b 00                	mov    eax,DWORD PTR [eax]
c00140e3:	83 c0 08             	add    eax,0x8
c00140e6:	8b 00                	mov    eax,DWORD PTR [eax]
c00140e8:	83 ec 0c             	sub    esp,0xc
c00140eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00140ef:	ff d0                	call   eax
c00140f1:	83 c4 10             	add    esp,0x10
c00140f4:	a1 28 4c 02 c0       	mov    eax,ds:0xc0024c28
c00140f9:	83 ec 08             	sub    esp,0x8
c00140fc:	68 a4 1f 02 c0       	push   0xc0021fa4
c0014101:	50                   	push   eax
c0014102:	e8 9f f7 ff ff       	call   c00138a6 <findDataTable(unsigned char*, char*)>
c0014107:	83 c4 10             	add    esp,0x10
c001410a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001410e:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0014113:	74 13                	je     c0014128 <ACPI::open(int, int, void*)+0x1bc>
c0014115:	83 ec 08             	sub    esp,0x8
c0014118:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001411c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014120:	e8 ff fd ff ff       	call   c0013f24 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0014125:	83 c4 10             	add    esp,0x10
c0014128:	b8 00 00 00 00       	mov    eax,0x0
c001412d:	83 c4 18             	add    esp,0x18
c0014130:	5b                   	pop    ebx
c0014131:	c3                   	ret    

c0014132 <ACPI::sleep()>:
c0014132:	83 ec 0c             	sub    esp,0xc
c0014135:	a1 00 4a 02 c0       	mov    eax,ds:0xc0024a00
c001413a:	85 c0                	test   eax,eax
c001413c:	74 07                	je     c0014145 <ACPI::sleep()+0x13>
c001413e:	a1 00 4a 02 c0       	mov    eax,ds:0xc0024a00
c0014143:	ff d0                	call   eax
c0014145:	90                   	nop
c0014146:	83 c4 0c             	add    esp,0xc
c0014149:	c3                   	ret    

c001414a <CPU::close(int, int, void*)>:
c001414a:	31 c0                	xor    eax,eax
c001414c:	c3                   	ret    

c001414d <lookupAMDCPUName(unsigned char, unsigned char)>:
c001414d:	55                   	push   ebp
c001414e:	57                   	push   edi
c001414f:	56                   	push   esi
c0014150:	53                   	push   ebx
c0014151:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0014155:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014159:	89 ce                	mov    esi,ecx
c001415b:	89 d5                	mov    ebp,edx
c001415d:	80 f9 04             	cmp    cl,0x4
c0014160:	75 28                	jne    c001418a <lookupAMDCPUName(unsigned char, unsigned char)+0x3d>
c0014162:	8d 42 f9             	lea    eax,[edx-0x7]
c0014165:	3c 03                	cmp    al,0x3
c0014167:	0f 86 63 01 00 00    	jbe    c00142d0 <lookupAMDCPUName(unsigned char, unsigned char)+0x183>
c001416d:	80 fa 03             	cmp    dl,0x3
c0014170:	0f 84 5a 01 00 00    	je     c00142d0 <lookupAMDCPUName(unsigned char, unsigned char)+0x183>
c0014176:	8d 7a f2             	lea    edi,[edx-0xe]
c0014179:	b8 b0 3c 02 c0       	mov    eax,0xc0023cb0
c001417e:	89 fb                	mov    ebx,edi
c0014180:	80 fb 01             	cmp    bl,0x1
c0014183:	77 4e                	ja     c00141d3 <lookupAMDCPUName(unsigned char, unsigned char)+0x86>
c0014185:	e9 52 01 00 00       	jmp    c00142dc <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c001418a:	80 f9 05             	cmp    cl,0x5
c001418d:	75 4d                	jne    c00141dc <lookupAMDCPUName(unsigned char, unsigned char)+0x8f>
c001418f:	b8 c0 3c 02 c0       	mov    eax,0xc0023cc0
c0014194:	80 fa 03             	cmp    dl,0x3
c0014197:	0f 86 3f 01 00 00    	jbe    c00142dc <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c001419d:	8d 7a fa             	lea    edi,[edx-0x6]
c00141a0:	b8 d0 3c 02 c0       	mov    eax,0xc0023cd0
c00141a5:	89 fb                	mov    ebx,edi
c00141a7:	80 fb 01             	cmp    bl,0x1
c00141aa:	0f 86 2c 01 00 00    	jbe    c00142dc <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00141b0:	b8 e0 3c 02 c0       	mov    eax,0xc0023ce0
c00141b5:	80 fa 08             	cmp    dl,0x8
c00141b8:	0f 84 1e 01 00 00    	je     c00142dc <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00141be:	89 d7                	mov    edi,edx
c00141c0:	b8 f0 3c 02 c0       	mov    eax,0xc0023cf0
c00141c5:	83 e7 fb             	and    edi,0xfffffffb
c00141c8:	89 fb                	mov    ebx,edi
c00141ca:	80 fb 09             	cmp    bl,0x9
c00141cd:	0f 84 09 01 00 00    	je     c00142dc <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00141d3:	31 c0                	xor    eax,eax
c00141d5:	89 eb                	mov    ebx,ebp
c00141d7:	0f b6 fb             	movzx  edi,bl
c00141da:	eb 30                	jmp    c001420c <lookupAMDCPUName(unsigned char, unsigned char)+0xbf>
c00141dc:	31 c0                	xor    eax,eax
c00141de:	80 f9 06             	cmp    cl,0x6
c00141e1:	75 f2                	jne    c00141d5 <lookupAMDCPUName(unsigned char, unsigned char)+0x88>
c00141e3:	80 fa 0a             	cmp    dl,0xa
c00141e6:	77 ed                	ja     c00141d5 <lookupAMDCPUName(unsigned char, unsigned char)+0x88>
c00141e8:	bf de 05 00 00       	mov    edi,0x5de
c00141ed:	0f a3 d7             	bt     edi,edx
c00141f0:	73 e3                	jae    c00141d5 <lookupAMDCPUName(unsigned char, unsigned char)+0x88>
c00141f2:	b8 00 3d 02 c0       	mov    eax,0xc0023d00
c00141f7:	e9 e0 00 00 00       	jmp    c00142dc <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00141fc:	39 c7                	cmp    edi,eax
c00141fe:	0f 84 d3 00 00 00    	je     c00142d7 <lookupAMDCPUName(unsigned char, unsigned char)+0x18a>
c0014204:	40                   	inc    eax
c0014205:	3d d0 00 00 00       	cmp    eax,0xd0
c001420a:	74 09                	je     c0014215 <lookupAMDCPUName(unsigned char, unsigned char)+0xc8>
c001420c:	89 f3                	mov    ebx,esi
c001420e:	80 fb 0f             	cmp    bl,0xf
c0014211:	75 f1                	jne    c0014204 <lookupAMDCPUName(unsigned char, unsigned char)+0xb7>
c0014213:	eb e7                	jmp    c00141fc <lookupAMDCPUName(unsigned char, unsigned char)+0xaf>
c0014215:	80 f9 10             	cmp    cl,0x10
c0014218:	75 14                	jne    c001422e <lookupAMDCPUName(unsigned char, unsigned char)+0xe1>
c001421a:	8d 42 fc             	lea    eax,[edx-0x4]
c001421d:	83 e0 fb             	and    eax,0xfffffffb
c0014220:	3c 02                	cmp    al,0x2
c0014222:	76 34                	jbe    c0014258 <lookupAMDCPUName(unsigned char, unsigned char)+0x10b>
c0014224:	b8 b2 23 02 c0       	mov    eax,0xc00223b2
c0014229:	80 fa 02             	cmp    dl,0x2
c001422c:	eb 24                	jmp    c0014252 <lookupAMDCPUName(unsigned char, unsigned char)+0x105>
c001422e:	80 f9 11             	cmp    cl,0x11
c0014231:	75 13                	jne    c0014246 <lookupAMDCPUName(unsigned char, unsigned char)+0xf9>
c0014233:	b8 b2 23 02 c0       	mov    eax,0xc00223b2
c0014238:	80 fa 03             	cmp    dl,0x3
c001423b:	0f 85 9b 00 00 00    	jne    c00142dc <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0014241:	e9 91 00 00 00       	jmp    c00142d7 <lookupAMDCPUName(unsigned char, unsigned char)+0x18a>
c0014246:	80 f9 12             	cmp    cl,0x12
c0014249:	75 14                	jne    c001425f <lookupAMDCPUName(unsigned char, unsigned char)+0x112>
c001424b:	b8 b2 23 02 c0       	mov    eax,0xc00223b2
c0014250:	fe ca                	dec    dl
c0014252:	0f 85 84 00 00 00    	jne    c00142dc <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0014258:	b8 20 3d 02 c0       	mov    eax,0xc0023d20
c001425d:	eb 7d                	jmp    c00142dc <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c001425f:	80 f9 14             	cmp    cl,0x14
c0014262:	75 12                	jne    c0014276 <lookupAMDCPUName(unsigned char, unsigned char)+0x129>
c0014264:	4a                   	dec    edx
c0014265:	b8 b2 23 02 c0       	mov    eax,0xc00223b2
c001426a:	80 fa 01             	cmp    dl,0x1
c001426d:	77 6d                	ja     c00142dc <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c001426f:	b8 30 3d 02 c0       	mov    eax,0xc0023d30
c0014274:	eb 66                	jmp    c00142dc <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0014276:	80 f9 15             	cmp    cl,0x15
c0014279:	75 31                	jne    c00142ac <lookupAMDCPUName(unsigned char, unsigned char)+0x15f>
c001427b:	b8 40 3d 02 c0       	mov    eax,0xc0023d40
c0014280:	80 fa 01             	cmp    dl,0x1
c0014283:	74 57                	je     c00142dc <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0014285:	b8 b2 23 02 c0       	mov    eax,0xc00223b2
c001428a:	80 fa 13             	cmp    dl,0x13
c001428d:	76 0c                	jbe    c001429b <lookupAMDCPUName(unsigned char, unsigned char)+0x14e>
c001428f:	80 fa 30             	cmp    dl,0x30
c0014292:	75 48                	jne    c00142dc <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0014294:	b8 60 3d 02 c0       	mov    eax,0xc0023d60
c0014299:	eb 41                	jmp    c00142dc <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c001429b:	b9 04 00 09 00       	mov    ecx,0x90004
c00142a0:	0f a3 d1             	bt     ecx,edx
c00142a3:	73 37                	jae    c00142dc <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00142a5:	b8 50 3d 02 c0       	mov    eax,0xc0023d50
c00142aa:	eb 30                	jmp    c00142dc <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00142ac:	b8 b2 23 02 c0       	mov    eax,0xc00223b2
c00142b1:	80 f9 16             	cmp    cl,0x16
c00142b4:	75 26                	jne    c00142dc <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00142b6:	b8 70 3d 02 c0       	mov    eax,0xc0023d70
c00142bb:	84 d2                	test   dl,dl
c00142bd:	74 1d                	je     c00142dc <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00142bf:	b8 b2 23 02 c0       	mov    eax,0xc00223b2
c00142c4:	80 fa 30             	cmp    dl,0x30
c00142c7:	75 13                	jne    c00142dc <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00142c9:	b8 80 3d 02 c0       	mov    eax,0xc0023d80
c00142ce:	eb 0c                	jmp    c00142dc <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00142d0:	b8 a0 3c 02 c0       	mov    eax,0xc0023ca0
c00142d5:	eb 05                	jmp    c00142dc <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00142d7:	b8 10 3d 02 c0       	mov    eax,0xc0023d10
c00142dc:	5b                   	pop    ebx
c00142dd:	5e                   	pop    esi
c00142de:	5f                   	pop    edi
c00142df:	5d                   	pop    ebp
c00142e0:	c3                   	ret    

c00142e1 <lookupIntelCPUName(unsigned char, unsigned char)>:
c00142e1:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00142e5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00142e9:	80 f9 04             	cmp    cl,0x4
c00142ec:	75 6b                	jne    c0014359 <lookupIntelCPUName(unsigned char, unsigned char)+0x78>
c00142ee:	b8 00 3b 02 c0       	mov    eax,0xc0023b00
c00142f3:	80 fa 01             	cmp    dl,0x1
c00142f6:	0f 86 92 02 00 00    	jbe    c001458e <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00142fc:	b8 10 3b 02 c0       	mov    eax,0xc0023b10
c0014301:	80 fa 02             	cmp    dl,0x2
c0014304:	0f 84 84 02 00 00    	je     c001458e <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c001430a:	b8 20 3b 02 c0       	mov    eax,0xc0023b20
c001430f:	80 fa 03             	cmp    dl,0x3
c0014312:	0f 84 76 02 00 00    	je     c001458e <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0014318:	b8 30 3b 02 c0       	mov    eax,0xc0023b30
c001431d:	80 fa 04             	cmp    dl,0x4
c0014320:	0f 84 68 02 00 00    	je     c001458e <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0014326:	b8 40 3b 02 c0       	mov    eax,0xc0023b40
c001432b:	80 fa 05             	cmp    dl,0x5
c001432e:	0f 84 5a 02 00 00    	je     c001458e <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0014334:	b8 20 3b 02 c0       	mov    eax,0xc0023b20
c0014339:	80 fa 07             	cmp    dl,0x7
c001433c:	0f 84 4c 02 00 00    	je     c001458e <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0014342:	83 ea 08             	sub    edx,0x8
c0014345:	b8 b2 23 02 c0       	mov    eax,0xc00223b2
c001434a:	80 fa 01             	cmp    dl,0x1
c001434d:	0f 87 3b 02 00 00    	ja     c001458e <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0014353:	b8 50 3b 02 c0       	mov    eax,0xc0023b50
c0014358:	c3                   	ret    
c0014359:	80 f9 05             	cmp    cl,0x5
c001435c:	75 45                	jne    c00143a3 <lookupIntelCPUName(unsigned char, unsigned char)+0xc2>
c001435e:	8d 4a ff             	lea    ecx,[edx-0x1]
c0014361:	b8 60 3b 02 c0       	mov    eax,0xc0023b60
c0014366:	80 f9 02             	cmp    cl,0x2
c0014369:	0f 86 1f 02 00 00    	jbe    c001458e <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c001436f:	80 fa 04             	cmp    dl,0x4
c0014372:	0f 84 f3 01 00 00    	je     c001456b <lookupIntelCPUName(unsigned char, unsigned char)+0x28a>
c0014378:	80 fa 07             	cmp    dl,0x7
c001437b:	0f 84 0d 02 00 00    	je     c001458e <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0014381:	b8 70 3b 02 c0       	mov    eax,0xc0023b70
c0014386:	80 fa 08             	cmp    dl,0x8
c0014389:	0f 84 ff 01 00 00    	je     c001458e <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c001438f:	b8 b2 23 02 c0       	mov    eax,0xc00223b2
c0014394:	80 fa 09             	cmp    dl,0x9
c0014397:	0f 85 f1 01 00 00    	jne    c001458e <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c001439d:	b8 80 3b 02 c0       	mov    eax,0xc0023b80
c00143a2:	c3                   	ret    
c00143a3:	80 f9 06             	cmp    cl,0x6
c00143a6:	0f 85 85 01 00 00    	jne    c0014531 <lookupIntelCPUName(unsigned char, unsigned char)+0x250>
c00143ac:	b8 90 3b 02 c0       	mov    eax,0xc0023b90
c00143b1:	80 fa 01             	cmp    dl,0x1
c00143b4:	0f 84 d4 01 00 00    	je     c001458e <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00143ba:	8d 42 fb             	lea    eax,[edx-0x5]
c00143bd:	3c 01                	cmp    al,0x1
c00143bf:	0f 86 ac 01 00 00    	jbe    c0014571 <lookupIntelCPUName(unsigned char, unsigned char)+0x290>
c00143c5:	80 fa 03             	cmp    dl,0x3
c00143c8:	0f 84 a3 01 00 00    	je     c0014571 <lookupIntelCPUName(unsigned char, unsigned char)+0x290>
c00143ce:	8d 4a f9             	lea    ecx,[edx-0x7]
c00143d1:	b8 b0 3b 02 c0       	mov    eax,0xc0023bb0
c00143d6:	80 f9 01             	cmp    cl,0x1
c00143d9:	0f 86 af 01 00 00    	jbe    c001458e <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00143df:	80 fa 09             	cmp    dl,0x9
c00143e2:	0f 84 8f 01 00 00    	je     c0014577 <lookupIntelCPUName(unsigned char, unsigned char)+0x296>
c00143e8:	8d 4a f6             	lea    ecx,[edx-0xa]
c00143eb:	80 f9 01             	cmp    cl,0x1
c00143ee:	0f 86 9a 01 00 00    	jbe    c001458e <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00143f4:	b8 c0 3b 02 c0       	mov    eax,0xc0023bc0
c00143f9:	80 fa 0d             	cmp    dl,0xd
c00143fc:	0f 84 8c 01 00 00    	je     c001458e <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0014402:	b8 d0 3b 02 c0       	mov    eax,0xc0023bd0
c0014407:	80 fa 0e             	cmp    dl,0xe
c001440a:	0f 84 7e 01 00 00    	je     c001458e <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0014410:	b8 e0 3b 02 c0       	mov    eax,0xc0023be0
c0014415:	80 fa 0f             	cmp    dl,0xf
c0014418:	0f 84 70 01 00 00    	je     c001458e <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c001441e:	b8 c0 3b 02 c0       	mov    eax,0xc0023bc0
c0014423:	80 fa 15             	cmp    dl,0x15
c0014426:	0f 84 62 01 00 00    	je     c001458e <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c001442c:	8d 4a ea             	lea    ecx,[edx-0x16]
c001442f:	b8 e0 3b 02 c0       	mov    eax,0xc0023be0
c0014434:	80 f9 01             	cmp    cl,0x1
c0014437:	0f 86 51 01 00 00    	jbe    c001458e <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c001443d:	80 fa 1a             	cmp    dl,0x1a
c0014440:	0f 84 37 01 00 00    	je     c001457d <lookupIntelCPUName(unsigned char, unsigned char)+0x29c>
c0014446:	80 fa 1c             	cmp    dl,0x1c
c0014449:	0f 84 34 01 00 00    	je     c0014583 <lookupIntelCPUName(unsigned char, unsigned char)+0x2a2>
c001444f:	80 fa 1d             	cmp    dl,0x1d
c0014452:	0f 84 36 01 00 00    	je     c001458e <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0014458:	b8 10 3c 02 c0       	mov    eax,0xc0023c10
c001445d:	80 fa 25             	cmp    dl,0x25
c0014460:	0f 84 28 01 00 00    	je     c001458e <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0014466:	8d 4a da             	lea    ecx,[edx-0x26]
c0014469:	b8 00 3c 02 c0       	mov    eax,0xc0023c00
c001446e:	80 f9 01             	cmp    cl,0x1
c0014471:	0f 86 17 01 00 00    	jbe    c001458e <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0014477:	b8 20 3c 02 c0       	mov    eax,0xc0023c20
c001447c:	80 fa 2a             	cmp    dl,0x2a
c001447f:	0f 84 09 01 00 00    	je     c001458e <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0014485:	b8 10 3c 02 c0       	mov    eax,0xc0023c10
c001448a:	80 fa 2c             	cmp    dl,0x2c
c001448d:	0f 84 fb 00 00 00    	je     c001458e <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0014493:	b8 20 3c 02 c0       	mov    eax,0xc0023c20
c0014498:	80 fa 2d             	cmp    dl,0x2d
c001449b:	0f 84 ed 00 00 00    	je     c001458e <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00144a1:	b8 f0 3b 02 c0       	mov    eax,0xc0023bf0
c00144a6:	80 fa 2e             	cmp    dl,0x2e
c00144a9:	0f 84 df 00 00 00    	je     c001458e <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00144af:	b8 10 3c 02 c0       	mov    eax,0xc0023c10
c00144b4:	80 fa 2f             	cmp    dl,0x2f
c00144b7:	0f 84 d1 00 00 00    	je     c001458e <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00144bd:	8d 4a cb             	lea    ecx,[edx-0x35]
c00144c0:	b8 00 3c 02 c0       	mov    eax,0xc0023c00
c00144c5:	80 f9 01             	cmp    cl,0x1
c00144c8:	0f 86 c0 00 00 00    	jbe    c001458e <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00144ce:	b8 30 3c 02 c0       	mov    eax,0xc0023c30
c00144d3:	80 fa 37             	cmp    dl,0x37
c00144d6:	0f 84 b2 00 00 00    	je     c001458e <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00144dc:	b8 40 3c 02 c0       	mov    eax,0xc0023c40
c00144e1:	80 fa 3a             	cmp    dl,0x3a
c00144e4:	0f 84 a4 00 00 00    	je     c001458e <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00144ea:	b8 50 3c 02 c0       	mov    eax,0xc0023c50
c00144ef:	80 fa 3c             	cmp    dl,0x3c
c00144f2:	0f 84 96 00 00 00    	je     c001458e <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00144f8:	b8 60 3c 02 c0       	mov    eax,0xc0023c60
c00144fd:	80 fa 3d             	cmp    dl,0x3d
c0014500:	0f 84 88 00 00 00    	je     c001458e <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0014506:	b8 40 3c 02 c0       	mov    eax,0xc0023c40
c001450b:	80 fa 3e             	cmp    dl,0x3e
c001450e:	74 7e                	je     c001458e <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0014510:	8d 42 bb             	lea    eax,[edx-0x45]
c0014513:	3c 01                	cmp    al,0x1
c0014515:	76 72                	jbe    c0014589 <lookupIntelCPUName(unsigned char, unsigned char)+0x2a8>
c0014517:	80 fa 3f             	cmp    dl,0x3f
c001451a:	74 6d                	je     c0014589 <lookupIntelCPUName(unsigned char, unsigned char)+0x2a8>
c001451c:	80 fa 4a             	cmp    dl,0x4a
c001451f:	74 0a                	je     c001452b <lookupIntelCPUName(unsigned char, unsigned char)+0x24a>
c0014521:	b8 b2 23 02 c0       	mov    eax,0xc00223b2
c0014526:	80 fa 4d             	cmp    dl,0x4d
c0014529:	75 63                	jne    c001458e <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c001452b:	b8 30 3c 02 c0       	mov    eax,0xc0023c30
c0014530:	c3                   	ret    
c0014531:	b8 b2 23 02 c0       	mov    eax,0xc00223b2
c0014536:	80 f9 0b             	cmp    cl,0xb
c0014539:	75 0a                	jne    c0014545 <lookupIntelCPUName(unsigned char, unsigned char)+0x264>
c001453b:	fe ca                	dec    dl
c001453d:	75 4f                	jne    c001458e <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c001453f:	b8 70 3c 02 c0       	mov    eax,0xc0023c70
c0014544:	c3                   	ret    
c0014545:	80 f9 0f             	cmp    cl,0xf
c0014548:	75 44                	jne    c001458e <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c001454a:	b8 80 3c 02 c0       	mov    eax,0xc0023c80
c001454f:	80 fa 02             	cmp    dl,0x2
c0014552:	76 3a                	jbe    c001458e <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0014554:	8d 42 fd             	lea    eax,[edx-0x3]
c0014557:	3c 01                	cmp    al,0x1
c0014559:	76 0a                	jbe    c0014565 <lookupIntelCPUName(unsigned char, unsigned char)+0x284>
c001455b:	b8 b2 23 02 c0       	mov    eax,0xc00223b2
c0014560:	80 fa 06             	cmp    dl,0x6
c0014563:	75 29                	jne    c001458e <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0014565:	b8 90 3c 02 c0       	mov    eax,0xc0023c90
c001456a:	c3                   	ret    
c001456b:	b8 70 3b 02 c0       	mov    eax,0xc0023b70
c0014570:	c3                   	ret    
c0014571:	b8 a0 3b 02 c0       	mov    eax,0xc0023ba0
c0014576:	c3                   	ret    
c0014577:	b8 c0 3b 02 c0       	mov    eax,0xc0023bc0
c001457c:	c3                   	ret    
c001457d:	b8 f0 3b 02 c0       	mov    eax,0xc0023bf0
c0014582:	c3                   	ret    
c0014583:	b8 00 3c 02 c0       	mov    eax,0xc0023c00
c0014588:	c3                   	ret    
c0014589:	b8 50 3c 02 c0       	mov    eax,0xc0023c50
c001458e:	c3                   	ret    

c001458f <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>:
c001458f:	60                   	pusha  
c0014590:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0014594:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014598:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001459c:	9c                   	pushf  
c001459d:	fa                   	cli    
c001459e:	0f 09                	wbinvd 
c00145a0:	0f 30                	wrmsr  
c00145a2:	9d                   	popf   
c00145a3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00145a7:	89 02                	mov    DWORD PTR [edx],eax
c00145a9:	61                   	popa   
c00145aa:	c3                   	ret    

c00145ab <AMD_K6_read_msr(unsigned int, REGS*)>:
c00145ab:	60                   	pusha  
c00145ac:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00145b0:	9c                   	pushf  
c00145b1:	fa                   	cli    
c00145b2:	0f 09                	wbinvd 
c00145b4:	31 c0                	xor    eax,eax
c00145b6:	31 d2                	xor    edx,edx
c00145b8:	0f 32                	rdmsr  
c00145ba:	9d                   	popf   
c00145bb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00145bf:	89 02                	mov    DWORD PTR [edx],eax
c00145c1:	61                   	popa   
c00145c2:	c3                   	ret    

c00145c3 <AMD_K6_writeback(int, int, int)>:
c00145c3:	56                   	push   esi
c00145c4:	53                   	push   ebx
c00145c5:	83 ec 10             	sub    esp,0x10
c00145c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145cc:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c00145d1:	75 5d                	jne    c0014630 <AMD_K6_writeback(int, int, int)+0x6d>
c00145d3:	83 f8 08             	cmp    eax,0x8
c00145d6:	75 09                	jne    c00145e1 <AMD_K6_writeback(int, int, int)+0x1e>
c00145d8:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c00145dd:	7e 13                	jle    c00145f2 <AMD_K6_writeback(int, int, int)+0x2f>
c00145df:	eb 30                	jmp    c0014611 <AMD_K6_writeback(int, int, int)+0x4e>
c00145e1:	83 f8 06             	cmp    eax,0x6
c00145e4:	7c 4a                	jl     c0014630 <AMD_K6_writeback(int, int, int)+0x6d>
c00145e6:	83 f8 07             	cmp    eax,0x7
c00145e9:	7e 07                	jle    c00145f2 <AMD_K6_writeback(int, int, int)+0x2f>
c00145eb:	83 f8 09             	cmp    eax,0x9
c00145ee:	74 21                	je     c0014611 <AMD_K6_writeback(int, int, int)+0x4e>
c00145f0:	eb 3e                	jmp    c0014630 <AMD_K6_writeback(int, int, int)+0x6d>
c00145f2:	89 e6                	mov    esi,esp
c00145f4:	8b 1d c4 43 02 c0    	mov    ebx,DWORD PTR ds:0xc00243c4
c00145fa:	56                   	push   esi
c00145fb:	c1 eb 15             	shr    ebx,0x15
c00145fe:	68 82 00 00 c0       	push   0xc0000082
c0014603:	83 e3 7e             	and    ebx,0x7e
c0014606:	e8 a0 ff ff ff       	call   c00145ab <AMD_K6_read_msr(unsigned int, REGS*)>
c001460b:	56                   	push   esi
c001460c:	6a 00                	push   0x0
c001460e:	53                   	push   ebx
c001460f:	eb 12                	jmp    c0014623 <AMD_K6_writeback(int, int, int)+0x60>
c0014611:	89 e3                	mov    ebx,esp
c0014613:	53                   	push   ebx
c0014614:	68 82 00 00 c0       	push   0xc0000082
c0014619:	e8 8d ff ff ff       	call   c00145ab <AMD_K6_read_msr(unsigned int, REGS*)>
c001461e:	53                   	push   ebx
c001461f:	6a 00                	push   0x0
c0014621:	6a 00                	push   0x0
c0014623:	68 82 00 00 c0       	push   0xc0000082
c0014628:	e8 62 ff ff ff       	call   c001458f <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>
c001462d:	83 c4 18             	add    esp,0x18
c0014630:	83 c4 10             	add    esp,0x10
c0014633:	5b                   	pop    ebx
c0014634:	5e                   	pop    esi
c0014635:	c3                   	ret    

c0014636 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0014636:	55                   	push   ebp
c0014637:	57                   	push   edi
c0014638:	56                   	push   esi
c0014639:	53                   	push   ebx
c001463a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001463e:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0014642:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0014646:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001464a:	39 05 a0 3d 02 c0    	cmp    DWORD PTR ds:0xc0023da0,eax
c0014650:	75 23                	jne    c0014675 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0014652:	a1 cc 4d 02 c0       	mov    eax,ds:0xc0024dcc
c0014657:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001465b:	89 06                	mov    DWORD PTR [esi],eax
c001465d:	a1 c8 4d 02 c0       	mov    eax,ds:0xc0024dc8
c0014662:	89 07                	mov    DWORD PTR [edi],eax
c0014664:	a1 c4 4d 02 c0       	mov    eax,ds:0xc0024dc4
c0014669:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001466c:	a1 c0 4d 02 c0       	mov    eax,ds:0xc0024dc0
c0014671:	89 02                	mov    DWORD PTR [edx],eax
c0014673:	eb 3f                	jmp    c00146b4 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0014675:	31 c9                	xor    ecx,ecx
c0014677:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001467b:	0f a2                	cpuid  
c001467d:	89 06                	mov    DWORD PTR [esi],eax
c001467f:	89 1f                	mov    DWORD PTR [edi],ebx
c0014681:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014685:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0014688:	89 10                	mov    DWORD PTR [eax],edx
c001468a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001468e:	a3 a0 3d 02 c0       	mov    ds:0xc0023da0,eax
c0014693:	8b 06                	mov    eax,DWORD PTR [esi]
c0014695:	a3 cc 4d 02 c0       	mov    ds:0xc0024dcc,eax
c001469a:	8b 07                	mov    eax,DWORD PTR [edi]
c001469c:	a3 c8 4d 02 c0       	mov    ds:0xc0024dc8,eax
c00146a1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00146a4:	a3 c4 4d 02 c0       	mov    ds:0xc0024dc4,eax
c00146a9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00146ad:	8b 00                	mov    eax,DWORD PTR [eax]
c00146af:	a3 c0 4d 02 c0       	mov    ds:0xc0024dc0,eax
c00146b4:	5b                   	pop    ebx
c00146b5:	5e                   	pop    esi
c00146b6:	5f                   	pop    edi
c00146b7:	5d                   	pop    ebp
c00146b8:	c3                   	ret    

c00146b9 <cpuidCheckEDX(unsigned int)>:
c00146b9:	83 ec 10             	sub    esp,0x10
c00146bc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00146c0:	50                   	push   eax
c00146c1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00146c5:	50                   	push   eax
c00146c6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00146ca:	50                   	push   eax
c00146cb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00146cf:	50                   	push   eax
c00146d0:	6a 01                	push   0x1
c00146d2:	e8 5f ff ff ff       	call   c0014636 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00146d7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00146db:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c00146df:	0f 95 c0             	setne  al
c00146e2:	83 c4 24             	add    esp,0x24
c00146e5:	c3                   	ret    

c00146e6 <cpuidCheckECX(unsigned int)>:
c00146e6:	83 ec 10             	sub    esp,0x10
c00146e9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00146ed:	50                   	push   eax
c00146ee:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00146f2:	50                   	push   eax
c00146f3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00146f7:	50                   	push   eax
c00146f8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00146fc:	50                   	push   eax
c00146fd:	6a 01                	push   0x1
c00146ff:	e8 32 ff ff ff       	call   c0014636 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0014704:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014708:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c001470c:	0f 95 c0             	setne  al
c001470f:	83 c4 24             	add    esp,0x24
c0014712:	c3                   	ret    

c0014713 <cpuidCheckExtendedEBX(unsigned int)>:
c0014713:	83 ec 10             	sub    esp,0x10
c0014716:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001471a:	50                   	push   eax
c001471b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001471f:	50                   	push   eax
c0014720:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0014724:	50                   	push   eax
c0014725:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0014729:	50                   	push   eax
c001472a:	6a 07                	push   0x7
c001472c:	e8 05 ff ff ff       	call   c0014636 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0014731:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014735:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0014739:	0f 95 c0             	setne  al
c001473c:	83 c4 24             	add    esp,0x24
c001473f:	c3                   	ret    

c0014740 <cpuidCheckExtendedECX(unsigned int)>:
c0014740:	83 ec 10             	sub    esp,0x10
c0014743:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0014747:	50                   	push   eax
c0014748:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001474c:	50                   	push   eax
c001474d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0014751:	50                   	push   eax
c0014752:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0014756:	50                   	push   eax
c0014757:	6a 07                	push   0x7
c0014759:	e8 d8 fe ff ff       	call   c0014636 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001475e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014762:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0014766:	0f 95 c0             	setne  al
c0014769:	83 c4 24             	add    esp,0x24
c001476c:	c3                   	ret    

c001476d <getCPUNumber()>:
c001476d:	31 c0                	xor    eax,eax
c001476f:	c3                   	ret    

c0014770 <thisCPU()>:
c0014770:	e8 f8 ff ff ff       	call   c001476d <getCPUNumber()>
c0014775:	8b 15 88 43 02 c0    	mov    edx,DWORD PTR ds:0xc0024388
c001477b:	8b 84 82 60 01 00 00 	mov    eax,DWORD PTR [edx+eax*4+0x160]
c0014782:	c3                   	ret    
c0014783:	90                   	nop

c0014784 <CPU::CPU()>:
c0014784:	83 ec 0c             	sub    esp,0xc
c0014787:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001478b:	83 ec 08             	sub    esp,0x8
c001478e:	68 b2 23 02 c0       	push   0xc00223b2
c0014793:	50                   	push   eax
c0014794:	e8 89 bf ff ff       	call   c0010722 <Device::Device(char const*)>
c0014799:	83 c4 10             	add    esp,0x10
c001479c:	ba 8c 24 02 c0       	mov    edx,0xc002248c
c00147a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147a5:	89 10                	mov    DWORD PTR [eax],edx
c00147a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147ab:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c00147b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147b9:	05 78 01 00 00       	add    eax,0x178
c00147be:	83 ec 0c             	sub    esp,0xc
c00147c1:	50                   	push   eax
c00147c2:	e8 7f 70 ff ff       	call   c000b846 <GDT::GDT()>
c00147c7:	83 c4 10             	add    esp,0x10
c00147ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147ce:	05 7c 09 00 00       	add    eax,0x97c
c00147d3:	83 ec 0c             	sub    esp,0xc
c00147d6:	50                   	push   eax
c00147d7:	e8 ca 72 ff ff       	call   c000baa6 <IDT::IDT()>
c00147dc:	83 c4 10             	add    esp,0x10
c00147df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147e3:	05 7c 11 00 00       	add    eax,0x117c
c00147e8:	83 ec 0c             	sub    esp,0xc
c00147eb:	50                   	push   eax
c00147ec:	e8 f9 92 ff ff       	call   c000daea <TSS::TSS()>
c00147f1:	83 c4 10             	add    esp,0x10
c00147f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147f8:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c00147ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014803:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c001480d:	90                   	nop
c001480e:	83 c4 0c             	add    esp,0xc
c0014811:	c3                   	ret    

c0014812 <CPU::displayFeatures()>:
c0014812:	53                   	push   ebx
c0014813:	83 ec 10             	sub    esp,0x10
c0014816:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001481a:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0014820:	68 c0 20 02 c0       	push   0xc00220c0
c0014825:	e8 fd a8 ff ff       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c001482a:	59                   	pop    ecx
c001482b:	58                   	pop    eax
c001482c:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c0014832:	50                   	push   eax
c0014833:	68 d1 20 02 c0       	push   0xc00220d1
c0014838:	e8 ea a8 ff ff       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c001483d:	58                   	pop    eax
c001483e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0014844:	5a                   	pop    edx
c0014845:	c1 e8 0e             	shr    eax,0xe
c0014848:	0f b6 c0             	movzx  eax,al
c001484b:	50                   	push   eax
c001484c:	68 e2 20 02 c0       	push   0xc00220e2
c0014851:	e8 d1 a8 ff ff       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c0014856:	59                   	pop    ecx
c0014857:	58                   	pop    eax
c0014858:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001485e:	66 c1 e8 06          	shr    ax,0x6
c0014862:	0f b6 c0             	movzx  eax,al
c0014865:	50                   	push   eax
c0014866:	68 f3 20 02 c0       	push   0xc00220f3
c001486b:	e8 b7 a8 ff ff       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c0014870:	c7 04 24 06 25 02 c0 	mov    DWORD PTR [esp],0xc0022506
c0014877:	e8 ab a8 ff ff       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c001487c:	83 c4 10             	add    esp,0x10
c001487f:	b8 d2 0d 02 c0       	mov    eax,0xc0020dd2
c0014884:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c001488b:	74 05                	je     c0014892 <CPU::displayFeatures()+0x80>
c001488d:	b8 ce 0d 02 c0       	mov    eax,0xc0020dce
c0014892:	52                   	push   edx
c0014893:	52                   	push   edx
c0014894:	50                   	push   eax
c0014895:	68 04 21 02 c0       	push   0xc0022104
c001489a:	e8 88 a8 ff ff       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c001489f:	83 c4 10             	add    esp,0x10
c00148a2:	b8 ce 0d 02 c0       	mov    eax,0xc0020dce
c00148a7:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c00148ae:	78 05                	js     c00148b5 <CPU::displayFeatures()+0xa3>
c00148b0:	b8 d2 0d 02 c0       	mov    eax,0xc0020dd2
c00148b5:	51                   	push   ecx
c00148b6:	51                   	push   ecx
c00148b7:	50                   	push   eax
c00148b8:	68 1b 21 02 c0       	push   0xc002211b
c00148bd:	e8 65 a8 ff ff       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c00148c2:	83 c4 10             	add    esp,0x10
c00148c5:	b8 ce 0d 02 c0       	mov    eax,0xc0020dce
c00148ca:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c00148d1:	75 05                	jne    c00148d8 <CPU::displayFeatures()+0xc6>
c00148d3:	b8 d2 0d 02 c0       	mov    eax,0xc0020dd2
c00148d8:	52                   	push   edx
c00148d9:	52                   	push   edx
c00148da:	50                   	push   eax
c00148db:	68 32 21 02 c0       	push   0xc0022132
c00148e0:	e8 42 a8 ff ff       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c00148e5:	83 c4 10             	add    esp,0x10
c00148e8:	b8 ce 0d 02 c0       	mov    eax,0xc0020dce
c00148ed:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c00148f4:	75 05                	jne    c00148fb <CPU::displayFeatures()+0xe9>
c00148f6:	b8 d2 0d 02 c0       	mov    eax,0xc0020dd2
c00148fb:	51                   	push   ecx
c00148fc:	51                   	push   ecx
c00148fd:	50                   	push   eax
c00148fe:	68 49 21 02 c0       	push   0xc0022149
c0014903:	e8 1f a8 ff ff       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c0014908:	83 c4 10             	add    esp,0x10
c001490b:	b8 ce 0d 02 c0       	mov    eax,0xc0020dce
c0014910:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0014917:	75 05                	jne    c001491e <CPU::displayFeatures()+0x10c>
c0014919:	b8 d2 0d 02 c0       	mov    eax,0xc0020dd2
c001491e:	52                   	push   edx
c001491f:	52                   	push   edx
c0014920:	50                   	push   eax
c0014921:	68 60 21 02 c0       	push   0xc0022160
c0014926:	e8 fc a7 ff ff       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c001492b:	83 c4 10             	add    esp,0x10
c001492e:	b8 ce 0d 02 c0       	mov    eax,0xc0020dce
c0014933:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c001493a:	75 05                	jne    c0014941 <CPU::displayFeatures()+0x12f>
c001493c:	b8 d2 0d 02 c0       	mov    eax,0xc0020dd2
c0014941:	51                   	push   ecx
c0014942:	51                   	push   ecx
c0014943:	50                   	push   eax
c0014944:	68 77 21 02 c0       	push   0xc0022177
c0014949:	e8 d9 a7 ff ff       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c001494e:	83 c4 10             	add    esp,0x10
c0014951:	b8 ce 0d 02 c0       	mov    eax,0xc0020dce
c0014956:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c001495d:	75 05                	jne    c0014964 <CPU::displayFeatures()+0x152>
c001495f:	b8 d2 0d 02 c0       	mov    eax,0xc0020dd2
c0014964:	52                   	push   edx
c0014965:	52                   	push   edx
c0014966:	50                   	push   eax
c0014967:	68 8e 21 02 c0       	push   0xc002218e
c001496c:	e8 b6 a7 ff ff       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c0014971:	83 c4 10             	add    esp,0x10
c0014974:	b8 ce 0d 02 c0       	mov    eax,0xc0020dce
c0014979:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c0014980:	75 05                	jne    c0014987 <CPU::displayFeatures()+0x175>
c0014982:	b8 d2 0d 02 c0       	mov    eax,0xc0020dd2
c0014987:	51                   	push   ecx
c0014988:	51                   	push   ecx
c0014989:	50                   	push   eax
c001498a:	68 a5 21 02 c0       	push   0xc00221a5
c001498f:	e8 93 a7 ff ff       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c0014994:	83 c4 10             	add    esp,0x10
c0014997:	b8 ce 0d 02 c0       	mov    eax,0xc0020dce
c001499c:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c00149a3:	75 05                	jne    c00149aa <CPU::displayFeatures()+0x198>
c00149a5:	b8 d2 0d 02 c0       	mov    eax,0xc0020dd2
c00149aa:	52                   	push   edx
c00149ab:	52                   	push   edx
c00149ac:	50                   	push   eax
c00149ad:	68 bc 21 02 c0       	push   0xc00221bc
c00149b2:	e8 70 a7 ff ff       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c00149b7:	83 c4 10             	add    esp,0x10
c00149ba:	b8 ce 0d 02 c0       	mov    eax,0xc0020dce
c00149bf:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c00149c6:	75 05                	jne    c00149cd <CPU::displayFeatures()+0x1bb>
c00149c8:	b8 d2 0d 02 c0       	mov    eax,0xc0020dd2
c00149cd:	51                   	push   ecx
c00149ce:	51                   	push   ecx
c00149cf:	50                   	push   eax
c00149d0:	68 d3 21 02 c0       	push   0xc00221d3
c00149d5:	e8 4d a7 ff ff       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c00149da:	83 c4 10             	add    esp,0x10
c00149dd:	b8 ce 0d 02 c0       	mov    eax,0xc0020dce
c00149e2:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c00149e9:	75 05                	jne    c00149f0 <CPU::displayFeatures()+0x1de>
c00149eb:	b8 d2 0d 02 c0       	mov    eax,0xc0020dd2
c00149f0:	52                   	push   edx
c00149f1:	52                   	push   edx
c00149f2:	50                   	push   eax
c00149f3:	68 ea 21 02 c0       	push   0xc00221ea
c00149f8:	e8 2a a7 ff ff       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c00149fd:	83 c4 10             	add    esp,0x10
c0014a00:	b8 ce 0d 02 c0       	mov    eax,0xc0020dce
c0014a05:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c0014a0c:	75 05                	jne    c0014a13 <CPU::displayFeatures()+0x201>
c0014a0e:	b8 d2 0d 02 c0       	mov    eax,0xc0020dd2
c0014a13:	51                   	push   ecx
c0014a14:	51                   	push   ecx
c0014a15:	50                   	push   eax
c0014a16:	68 01 22 02 c0       	push   0xc0022201
c0014a1b:	e8 07 a7 ff ff       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c0014a20:	83 c4 10             	add    esp,0x10
c0014a23:	b8 ce 0d 02 c0       	mov    eax,0xc0020dce
c0014a28:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c0014a2f:	75 05                	jne    c0014a36 <CPU::displayFeatures()+0x224>
c0014a31:	b8 d2 0d 02 c0       	mov    eax,0xc0020dd2
c0014a36:	52                   	push   edx
c0014a37:	52                   	push   edx
c0014a38:	50                   	push   eax
c0014a39:	68 18 22 02 c0       	push   0xc0022218
c0014a3e:	e8 e4 a6 ff ff       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c0014a43:	83 c4 10             	add    esp,0x10
c0014a46:	b8 ce 0d 02 c0       	mov    eax,0xc0020dce
c0014a4b:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c0014a52:	78 05                	js     c0014a59 <CPU::displayFeatures()+0x247>
c0014a54:	b8 d2 0d 02 c0       	mov    eax,0xc0020dd2
c0014a59:	51                   	push   ecx
c0014a5a:	51                   	push   ecx
c0014a5b:	50                   	push   eax
c0014a5c:	68 2f 22 02 c0       	push   0xc002222f
c0014a61:	e8 c1 a6 ff ff       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c0014a66:	83 c4 10             	add    esp,0x10
c0014a69:	b8 ce 0d 02 c0       	mov    eax,0xc0020dce
c0014a6e:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c0014a75:	75 05                	jne    c0014a7c <CPU::displayFeatures()+0x26a>
c0014a77:	b8 d2 0d 02 c0       	mov    eax,0xc0020dd2
c0014a7c:	52                   	push   edx
c0014a7d:	52                   	push   edx
c0014a7e:	50                   	push   eax
c0014a7f:	68 46 22 02 c0       	push   0xc0022246
c0014a84:	e8 9e a6 ff ff       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c0014a89:	83 c4 18             	add    esp,0x18
c0014a8c:	5b                   	pop    ebx
c0014a8d:	c3                   	ret    

c0014a8e <CPU::detectFeatures()>:
c0014a8e:	55                   	push   ebp
c0014a8f:	57                   	push   edi
c0014a90:	56                   	push   esi
c0014a91:	53                   	push   ebx
c0014a92:	83 ec 50             	sub    esp,0x50
c0014a95:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0014a99:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0014aa3:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0014aaa:	8d bb 5f 01 00 00    	lea    edi,[ebx+0x15f]
c0014ab0:	6a 0d                	push   0xd
c0014ab2:	6a 00                	push   0x0
c0014ab4:	57                   	push   edi
c0014ab5:	e8 19 bc fe ff       	call   c00006d3 <memset>
c0014aba:	83 c4 10             	add    esp,0x10
c0014abd:	a1 88 43 02 c0       	mov    eax,ds:0xc0024388
c0014ac2:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0014ac9:	0f 84 20 09 00 00    	je     c00153ef <CPU::detectFeatures()+0x961>
c0014acf:	83 ec 0c             	sub    esp,0xc
c0014ad2:	6a 10                	push   0x10
c0014ad4:	e8 e0 fb ff ff       	call   c00146b9 <cpuidCheckEDX(unsigned int)>
c0014ad9:	83 e0 01             	and    eax,0x1
c0014adc:	8d 14 00             	lea    edx,[eax+eax*1]
c0014adf:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0014ae5:	83 e0 fd             	and    eax,0xfffffffd
c0014ae8:	09 d0                	or     eax,edx
c0014aea:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014af0:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0014af7:	e8 bd fb ff ff       	call   c00146b9 <cpuidCheckEDX(unsigned int)>
c0014afc:	83 e0 01             	and    eax,0x1
c0014aff:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0014b06:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0014b0c:	83 e0 fb             	and    eax,0xfffffffb
c0014b0f:	09 d0                	or     eax,edx
c0014b11:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014b17:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0014b1e:	e8 96 fb ff ff       	call   c00146b9 <cpuidCheckEDX(unsigned int)>
c0014b23:	83 e0 01             	and    eax,0x1
c0014b26:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0014b2d:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0014b33:	83 e0 f7             	and    eax,0xfffffff7
c0014b36:	09 d0                	or     eax,edx
c0014b38:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014b3e:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0014b45:	e8 6f fb ff ff       	call   c00146b9 <cpuidCheckEDX(unsigned int)>
c0014b4a:	83 e0 01             	and    eax,0x1
c0014b4d:	c1 e0 04             	shl    eax,0x4
c0014b50:	88 c2                	mov    dl,al
c0014b52:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0014b58:	83 e0 ef             	and    eax,0xffffffef
c0014b5b:	09 d0                	or     eax,edx
c0014b5d:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014b63:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0014b6a:	e8 4a fb ff ff       	call   c00146b9 <cpuidCheckEDX(unsigned int)>
c0014b6f:	83 e0 01             	and    eax,0x1
c0014b72:	c1 e0 05             	shl    eax,0x5
c0014b75:	88 c2                	mov    dl,al
c0014b77:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0014b7d:	83 e0 df             	and    eax,0xffffffdf
c0014b80:	09 d0                	or     eax,edx
c0014b82:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014b88:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0014b8f:	e8 25 fb ff ff       	call   c00146b9 <cpuidCheckEDX(unsigned int)>
c0014b94:	83 e0 01             	and    eax,0x1
c0014b97:	8d 14 00             	lea    edx,[eax+eax*1]
c0014b9a:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0014ba0:	83 e0 fd             	and    eax,0xfffffffd
c0014ba3:	09 d0                	or     eax,edx
c0014ba5:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0014bab:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0014bb2:	e8 02 fb ff ff       	call   c00146b9 <cpuidCheckEDX(unsigned int)>
c0014bb7:	83 e0 01             	and    eax,0x1
c0014bba:	c1 e0 06             	shl    eax,0x6
c0014bbd:	88 c2                	mov    dl,al
c0014bbf:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0014bc5:	83 e0 bf             	and    eax,0xffffffbf
c0014bc8:	09 d0                	or     eax,edx
c0014bca:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0014bd0:	58                   	pop    eax
c0014bd1:	8d 74 24 28          	lea    esi,[esp+0x28]
c0014bd5:	56                   	push   esi
c0014bd6:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0014bda:	55                   	push   ebp
c0014bdb:	8d 44 24 28          	lea    eax,[esp+0x28]
c0014bdf:	50                   	push   eax
c0014be0:	8d 54 24 28          	lea    edx,[esp+0x28]
c0014be4:	52                   	push   edx
c0014be5:	6a 00                	push   0x0
c0014be7:	e8 4a fa ff ff       	call   c0014636 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0014bec:	83 c4 1c             	add    esp,0x1c
c0014bef:	6a 04                	push   0x4
c0014bf1:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0014bf5:	50                   	push   eax
c0014bf6:	57                   	push   edi
c0014bf7:	e8 a1 ba fe ff       	call   c000069d <memcpy>
c0014bfc:	83 c4 0c             	add    esp,0xc
c0014bff:	8d 83 63 01 00 00    	lea    eax,[ebx+0x163]
c0014c05:	6a 04                	push   0x4
c0014c07:	56                   	push   esi
c0014c08:	50                   	push   eax
c0014c09:	e8 8f ba fe ff       	call   c000069d <memcpy>
c0014c0e:	83 c4 0c             	add    esp,0xc
c0014c11:	8d 83 67 01 00 00    	lea    eax,[ebx+0x167]
c0014c17:	6a 04                	push   0x4
c0014c19:	55                   	push   ebp
c0014c1a:	50                   	push   eax
c0014c1b:	e8 7d ba fe ff       	call   c000069d <memcpy>
c0014c20:	58                   	pop    eax
c0014c21:	5a                   	pop    edx
c0014c22:	68 5d 22 02 c0       	push   0xc002225d
c0014c27:	57                   	push   edi
c0014c28:	e8 96 bb fe ff       	call   c00007c3 <strcmp>
c0014c2d:	83 c4 10             	add    esp,0x10
c0014c30:	85 c0                	test   eax,eax
c0014c32:	75 0f                	jne    c0014c43 <CPU::detectFeatures()+0x1b5>
c0014c34:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0014c3e:	e9 22 02 00 00       	jmp    c0014e65 <CPU::detectFeatures()+0x3d7>
c0014c43:	50                   	push   eax
c0014c44:	50                   	push   eax
c0014c45:	68 6a 22 02 c0       	push   0xc002226a
c0014c4a:	57                   	push   edi
c0014c4b:	e8 73 bb fe ff       	call   c00007c3 <strcmp>
c0014c50:	83 c4 10             	add    esp,0x10
c0014c53:	85 c0                	test   eax,eax
c0014c55:	74 dd                	je     c0014c34 <CPU::detectFeatures()+0x1a6>
c0014c57:	51                   	push   ecx
c0014c58:	51                   	push   ecx
c0014c59:	68 77 22 02 c0       	push   0xc0022277
c0014c5e:	57                   	push   edi
c0014c5f:	e8 5f bb fe ff       	call   c00007c3 <strcmp>
c0014c64:	83 c4 10             	add    esp,0x10
c0014c67:	85 c0                	test   eax,eax
c0014c69:	74 2a                	je     c0014c95 <CPU::detectFeatures()+0x207>
c0014c6b:	52                   	push   edx
c0014c6c:	52                   	push   edx
c0014c6d:	68 84 22 02 c0       	push   0xc0022284
c0014c72:	57                   	push   edi
c0014c73:	e8 4b bb fe ff       	call   c00007c3 <strcmp>
c0014c78:	83 c4 10             	add    esp,0x10
c0014c7b:	85 c0                	test   eax,eax
c0014c7d:	74 16                	je     c0014c95 <CPU::detectFeatures()+0x207>
c0014c7f:	50                   	push   eax
c0014c80:	50                   	push   eax
c0014c81:	68 91 22 02 c0       	push   0xc0022291
c0014c86:	57                   	push   edi
c0014c87:	e8 37 bb fe ff       	call   c00007c3 <strcmp>
c0014c8c:	83 c4 10             	add    esp,0x10
c0014c8f:	85 c0                	test   eax,eax
c0014c91:	74 48                	je     c0014cdb <CPU::detectFeatures()+0x24d>
c0014c93:	eb 0f                	jmp    c0014ca4 <CPU::detectFeatures()+0x216>
c0014c95:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0014c9f:	e9 c1 01 00 00       	jmp    c0014e65 <CPU::detectFeatures()+0x3d7>
c0014ca4:	50                   	push   eax
c0014ca5:	50                   	push   eax
c0014ca6:	68 9e 22 02 c0       	push   0xc002229e
c0014cab:	57                   	push   edi
c0014cac:	e8 12 bb fe ff       	call   c00007c3 <strcmp>
c0014cb1:	83 c4 10             	add    esp,0x10
c0014cb4:	85 c0                	test   eax,eax
c0014cb6:	74 23                	je     c0014cdb <CPU::detectFeatures()+0x24d>
c0014cb8:	50                   	push   eax
c0014cb9:	50                   	push   eax
c0014cba:	68 ab 22 02 c0       	push   0xc00222ab
c0014cbf:	57                   	push   edi
c0014cc0:	e8 fe ba fe ff       	call   c00007c3 <strcmp>
c0014cc5:	83 c4 10             	add    esp,0x10
c0014cc8:	85 c0                	test   eax,eax
c0014cca:	75 1e                	jne    c0014cea <CPU::detectFeatures()+0x25c>
c0014ccc:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0014cd6:	e9 8a 01 00 00       	jmp    c0014e65 <CPU::detectFeatures()+0x3d7>
c0014cdb:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0014ce5:	e9 7b 01 00 00       	jmp    c0014e65 <CPU::detectFeatures()+0x3d7>
c0014cea:	50                   	push   eax
c0014ceb:	50                   	push   eax
c0014cec:	68 b8 22 02 c0       	push   0xc00222b8
c0014cf1:	57                   	push   edi
c0014cf2:	e8 cc ba fe ff       	call   c00007c3 <strcmp>
c0014cf7:	83 c4 10             	add    esp,0x10
c0014cfa:	85 c0                	test   eax,eax
c0014cfc:	75 0f                	jne    c0014d0d <CPU::detectFeatures()+0x27f>
c0014cfe:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0014d08:	e9 58 01 00 00       	jmp    c0014e65 <CPU::detectFeatures()+0x3d7>
c0014d0d:	50                   	push   eax
c0014d0e:	50                   	push   eax
c0014d0f:	68 77 22 02 c0       	push   0xc0022277
c0014d14:	57                   	push   edi
c0014d15:	e8 a9 ba fe ff       	call   c00007c3 <strcmp>
c0014d1a:	83 c4 10             	add    esp,0x10
c0014d1d:	85 c0                	test   eax,eax
c0014d1f:	75 0f                	jne    c0014d30 <CPU::detectFeatures()+0x2a2>
c0014d21:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0014d2b:	e9 35 01 00 00       	jmp    c0014e65 <CPU::detectFeatures()+0x3d7>
c0014d30:	50                   	push   eax
c0014d31:	50                   	push   eax
c0014d32:	68 c5 22 02 c0       	push   0xc00222c5
c0014d37:	57                   	push   edi
c0014d38:	e8 86 ba fe ff       	call   c00007c3 <strcmp>
c0014d3d:	83 c4 10             	add    esp,0x10
c0014d40:	85 c0                	test   eax,eax
c0014d42:	75 0f                	jne    c0014d53 <CPU::detectFeatures()+0x2c5>
c0014d44:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0014d4e:	e9 12 01 00 00       	jmp    c0014e65 <CPU::detectFeatures()+0x3d7>
c0014d53:	51                   	push   ecx
c0014d54:	51                   	push   ecx
c0014d55:	68 d2 22 02 c0       	push   0xc00222d2
c0014d5a:	57                   	push   edi
c0014d5b:	e8 63 ba fe ff       	call   c00007c3 <strcmp>
c0014d60:	83 c4 10             	add    esp,0x10
c0014d63:	85 c0                	test   eax,eax
c0014d65:	75 0f                	jne    c0014d76 <CPU::detectFeatures()+0x2e8>
c0014d67:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0014d71:	e9 ef 00 00 00       	jmp    c0014e65 <CPU::detectFeatures()+0x3d7>
c0014d76:	52                   	push   edx
c0014d77:	52                   	push   edx
c0014d78:	68 df 22 02 c0       	push   0xc00222df
c0014d7d:	57                   	push   edi
c0014d7e:	e8 40 ba fe ff       	call   c00007c3 <strcmp>
c0014d83:	83 c4 10             	add    esp,0x10
c0014d86:	85 c0                	test   eax,eax
c0014d88:	75 0f                	jne    c0014d99 <CPU::detectFeatures()+0x30b>
c0014d8a:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0014d94:	e9 cc 00 00 00       	jmp    c0014e65 <CPU::detectFeatures()+0x3d7>
c0014d99:	50                   	push   eax
c0014d9a:	50                   	push   eax
c0014d9b:	68 ec 22 02 c0       	push   0xc00222ec
c0014da0:	57                   	push   edi
c0014da1:	e8 1d ba fe ff       	call   c00007c3 <strcmp>
c0014da6:	83 c4 10             	add    esp,0x10
c0014da9:	85 c0                	test   eax,eax
c0014dab:	75 0f                	jne    c0014dbc <CPU::detectFeatures()+0x32e>
c0014dad:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0014db7:	e9 a9 00 00 00       	jmp    c0014e65 <CPU::detectFeatures()+0x3d7>
c0014dbc:	50                   	push   eax
c0014dbd:	50                   	push   eax
c0014dbe:	68 f9 22 02 c0       	push   0xc00222f9
c0014dc3:	57                   	push   edi
c0014dc4:	e8 fa b9 fe ff       	call   c00007c3 <strcmp>
c0014dc9:	83 c4 10             	add    esp,0x10
c0014dcc:	85 c0                	test   eax,eax
c0014dce:	75 0f                	jne    c0014ddf <CPU::detectFeatures()+0x351>
c0014dd0:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0014dda:	e9 86 00 00 00       	jmp    c0014e65 <CPU::detectFeatures()+0x3d7>
c0014ddf:	50                   	push   eax
c0014de0:	50                   	push   eax
c0014de1:	68 06 23 02 c0       	push   0xc0022306
c0014de6:	57                   	push   edi
c0014de7:	e8 d7 b9 fe ff       	call   c00007c3 <strcmp>
c0014dec:	83 c4 10             	add    esp,0x10
c0014def:	85 c0                	test   eax,eax
c0014df1:	75 0c                	jne    c0014dff <CPU::detectFeatures()+0x371>
c0014df3:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0014dfd:	eb 66                	jmp    c0014e65 <CPU::detectFeatures()+0x3d7>
c0014dff:	50                   	push   eax
c0014e00:	50                   	push   eax
c0014e01:	68 13 23 02 c0       	push   0xc0022313
c0014e06:	57                   	push   edi
c0014e07:	e8 b7 b9 fe ff       	call   c00007c3 <strcmp>
c0014e0c:	83 c4 10             	add    esp,0x10
c0014e0f:	85 c0                	test   eax,eax
c0014e11:	75 0c                	jne    c0014e1f <CPU::detectFeatures()+0x391>
c0014e13:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0014e1d:	eb 46                	jmp    c0014e65 <CPU::detectFeatures()+0x3d7>
c0014e1f:	50                   	push   eax
c0014e20:	50                   	push   eax
c0014e21:	68 20 23 02 c0       	push   0xc0022320
c0014e26:	57                   	push   edi
c0014e27:	e8 97 b9 fe ff       	call   c00007c3 <strcmp>
c0014e2c:	83 c4 10             	add    esp,0x10
c0014e2f:	85 c0                	test   eax,eax
c0014e31:	74 e0                	je     c0014e13 <CPU::detectFeatures()+0x385>
c0014e33:	50                   	push   eax
c0014e34:	50                   	push   eax
c0014e35:	68 2d 23 02 c0       	push   0xc002232d
c0014e3a:	57                   	push   edi
c0014e3b:	e8 83 b9 fe ff       	call   c00007c3 <strcmp>
c0014e40:	83 c4 10             	add    esp,0x10
c0014e43:	85 c0                	test   eax,eax
c0014e45:	74 cc                	je     c0014e13 <CPU::detectFeatures()+0x385>
c0014e47:	51                   	push   ecx
c0014e48:	51                   	push   ecx
c0014e49:	68 3a 23 02 c0       	push   0xc002233a
c0014e4e:	57                   	push   edi
c0014e4f:	e8 6f b9 fe ff       	call   c00007c3 <strcmp>
c0014e54:	83 c4 10             	add    esp,0x10
c0014e57:	85 c0                	test   eax,eax
c0014e59:	74 b8                	je     c0014e13 <CPU::detectFeatures()+0x385>
c0014e5b:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0014e65:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0014e6a:	0f 86 be 00 00 00    	jbe    c0014f2e <CPU::detectFeatures()+0x4a0>
c0014e70:	83 ec 0c             	sub    esp,0xc
c0014e73:	68 80 00 00 00       	push   0x80
c0014e78:	e8 96 f8 ff ff       	call   c0014713 <cpuidCheckExtendedEBX(unsigned int)>
c0014e7d:	83 e0 01             	and    eax,0x1
c0014e80:	c1 e0 06             	shl    eax,0x6
c0014e83:	88 c2                	mov    dl,al
c0014e85:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0014e8b:	83 e0 bf             	and    eax,0xffffffbf
c0014e8e:	09 d0                	or     eax,edx
c0014e90:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014e96:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0014e9d:	e8 71 f8 ff ff       	call   c0014713 <cpuidCheckExtendedEBX(unsigned int)>
c0014ea2:	83 e0 01             	and    eax,0x1
c0014ea5:	c1 e0 04             	shl    eax,0x4
c0014ea8:	88 c2                	mov    dl,al
c0014eaa:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0014eb0:	83 e0 ef             	and    eax,0xffffffef
c0014eb3:	09 d0                	or     eax,edx
c0014eb5:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0014ebb:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0014ec2:	e8 4c f8 ff ff       	call   c0014713 <cpuidCheckExtendedEBX(unsigned int)>
c0014ec7:	c1 e0 07             	shl    eax,0x7
c0014eca:	88 c2                	mov    dl,al
c0014ecc:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0014ed2:	83 e0 7f             	and    eax,0x7f
c0014ed5:	09 d0                	or     eax,edx
c0014ed7:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014edd:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0014ee4:	e8 57 f8 ff ff       	call   c0014740 <cpuidCheckExtendedECX(unsigned int)>
c0014ee9:	83 e0 01             	and    eax,0x1
c0014eec:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0014ef3:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0014ef9:	83 e0 f7             	and    eax,0xfffffff7
c0014efc:	09 d0                	or     eax,edx
c0014efe:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0014f04:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0014f0b:	e8 30 f8 ff ff       	call   c0014740 <cpuidCheckExtendedECX(unsigned int)>
c0014f10:	83 c4 10             	add    esp,0x10
c0014f13:	83 e0 01             	and    eax,0x1
c0014f16:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0014f1d:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0014f23:	83 e0 fb             	and    eax,0xfffffffb
c0014f26:	09 d0                	or     eax,edx
c0014f28:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0014f2e:	83 ec 0c             	sub    esp,0xc
c0014f31:	56                   	push   esi
c0014f32:	55                   	push   ebp
c0014f33:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0014f37:	57                   	push   edi
c0014f38:	8d 44 24 28          	lea    eax,[esp+0x28]
c0014f3c:	50                   	push   eax
c0014f3d:	6a 01                	push   0x1
c0014f3f:	e8 f2 f6 ff ff       	call   c0014636 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0014f44:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0014f48:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0014f4e:	88 ca                	mov    dl,cl
c0014f50:	83 e0 f0             	and    eax,0xfffffff0
c0014f53:	83 e2 0f             	and    edx,0xf
c0014f56:	09 d0                	or     eax,edx
c0014f58:	88 ca                	mov    dl,cl
c0014f5a:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c0014f60:	c0 ea 04             	shr    dl,0x4
c0014f63:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c0014f67:	0f b6 c2             	movzx  eax,dl
c0014f6a:	83 c4 20             	add    esp,0x20
c0014f6d:	c1 e0 06             	shl    eax,0x6
c0014f70:	89 c5                	mov    ebp,eax
c0014f72:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0014f78:	66 25 3f c0          	and    ax,0xc03f
c0014f7c:	09 e8                	or     eax,ebp
c0014f7e:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0014f85:	89 c8                	mov    eax,ecx
c0014f87:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c0014f8d:	c1 e8 08             	shr    eax,0x8
c0014f90:	83 e2 3f             	and    edx,0x3f
c0014f93:	83 e0 0f             	and    eax,0xf
c0014f96:	89 c5                	mov    ebp,eax
c0014f98:	c1 e5 06             	shl    ebp,0x6
c0014f9b:	09 d5                	or     ebp,edx
c0014f9d:	89 ea                	mov    edx,ebp
c0014f9f:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0014fa5:	88 c2                	mov    dl,al
c0014fa7:	c0 ea 02             	shr    dl,0x2
c0014faa:	89 d5                	mov    ebp,edx
c0014fac:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c0014fb2:	83 e2 c0             	and    edx,0xffffffc0
c0014fb5:	09 d5                	or     ebp,edx
c0014fb7:	89 ea                	mov    edx,ebp
c0014fb9:	89 cd                	mov    ebp,ecx
c0014fbb:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c0014fc1:	c1 ed 0c             	shr    ebp,0xc
c0014fc4:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c0014fca:	83 e5 03             	and    ebp,0x3
c0014fcd:	83 e2 cf             	and    edx,0xffffffcf
c0014fd0:	c1 e5 04             	shl    ebp,0x4
c0014fd3:	09 d5                	or     ebp,edx
c0014fd5:	3c 06                	cmp    al,0x6
c0014fd7:	89 ea                	mov    edx,ebp
c0014fd9:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0014fdf:	74 04                	je     c0014fe5 <CPU::detectFeatures()+0x557>
c0014fe1:	3c 0f                	cmp    al,0xf
c0014fe3:	75 5c                	jne    c0015041 <CPU::detectFeatures()+0x5b3>
c0014fe5:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0014fe9:	89 cd                	mov    ebp,ecx
c0014feb:	c1 ed 10             	shr    ebp,0x10
c0014fee:	c1 e5 04             	shl    ebp,0x4
c0014ff1:	09 ea                	or     edx,ebp
c0014ff3:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0014ff9:	0f b6 d2             	movzx  edx,dl
c0014ffc:	66 81 e5 3f c0       	and    bp,0xc03f
c0015001:	c1 e2 06             	shl    edx,0x6
c0015004:	09 ea                	or     edx,ebp
c0015006:	3c 0f                	cmp    al,0xf
c0015008:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c001500f:	75 30                	jne    c0015041 <CPU::detectFeatures()+0x5b3>
c0015011:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c0015017:	c1 e9 14             	shr    ecx,0x14
c001501a:	83 e0 3f             	and    eax,0x3f
c001501d:	83 c1 0f             	add    ecx,0xf
c0015020:	88 ca                	mov    dl,cl
c0015022:	c0 e9 02             	shr    cl,0x2
c0015025:	c1 e2 06             	shl    edx,0x6
c0015028:	09 d0                	or     eax,edx
c001502a:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c0015030:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c0015036:	83 e0 c0             	and    eax,0xffffffc0
c0015039:	09 c1                	or     ecx,eax
c001503b:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0015041:	83 ec 0c             	sub    esp,0xc
c0015044:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c001504b:	56                   	push   esi
c001504c:	8d 44 24 28          	lea    eax,[esp+0x28]
c0015050:	50                   	push   eax
c0015051:	57                   	push   edi
c0015052:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0015056:	55                   	push   ebp
c0015057:	68 00 00 00 80       	push   0x80000000
c001505c:	e8 d5 f5 ff ff       	call   c0014636 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0015061:	83 c4 20             	add    esp,0x20
c0015064:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c001506c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0015070:	76 1e                	jbe    c0015090 <CPU::detectFeatures()+0x602>
c0015072:	83 ec 0c             	sub    esp,0xc
c0015075:	56                   	push   esi
c0015076:	50                   	push   eax
c0015077:	57                   	push   edi
c0015078:	55                   	push   ebp
c0015079:	68 01 00 00 80       	push   0x80000001
c001507e:	e8 b3 f5 ff ff       	call   c0014636 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0015083:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c001508d:	83 c4 20             	add    esp,0x20
c0015090:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0015096:	83 f8 01             	cmp    eax,0x1
c0015099:	75 6f                	jne    c001510a <CPU::detectFeatures()+0x67c>
c001509b:	51                   	push   ecx
c001509c:	51                   	push   ecx
c001509d:	68 46 23 02 c0       	push   0xc0022346
c00150a2:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00150a6:	56                   	push   esi
c00150a7:	e8 c6 b6 fe ff       	call   c0000772 <strcpy>
c00150ac:	5f                   	pop    edi
c00150ad:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00150b3:	5d                   	pop    ebp
c00150b4:	66 c1 e8 06          	shr    ax,0x6
c00150b8:	0f b6 c0             	movzx  eax,al
c00150bb:	50                   	push   eax
c00150bc:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00150c2:	c1 e8 0e             	shr    eax,0xe
c00150c5:	0f b6 c0             	movzx  eax,al
c00150c8:	50                   	push   eax
c00150c9:	e8 13 f2 ff ff       	call   c00142e1 <lookupIntelCPUName(unsigned char, unsigned char)>
c00150ce:	5a                   	pop    edx
c00150cf:	59                   	pop    ecx
c00150d0:	50                   	push   eax
c00150d1:	56                   	push   esi
c00150d2:	e8 52 b7 fe ff       	call   c0000829 <strcat>
c00150d7:	5f                   	pop    edi
c00150d8:	5d                   	pop    ebp
c00150d9:	56                   	push   esi
c00150da:	53                   	push   ebx
c00150db:	e8 34 b6 ff ff       	call   c0010714 <Device::setName(char const*)>
c00150e0:	58                   	pop    eax
c00150e1:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c00150e7:	5a                   	pop    edx
c00150e8:	68 4d 23 02 c0       	push   0xc002234d
c00150ed:	50                   	push   eax
c00150ee:	e8 d0 b6 fe ff       	call   c00007c3 <strcmp>
c00150f3:	83 c4 10             	add    esp,0x10
c00150f6:	85 c0                	test   eax,eax
c00150f8:	0f 85 73 03 00 00    	jne    c0015471 <CPU::detectFeatures()+0x9e3>
c00150fe:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c0015105:	e9 67 03 00 00       	jmp    c0015471 <CPU::detectFeatures()+0x9e3>
c001510a:	83 f8 02             	cmp    eax,0x2
c001510d:	0f 85 b5 00 00 00    	jne    c00151c8 <CPU::detectFeatures()+0x73a>
c0015113:	57                   	push   edi
c0015114:	57                   	push   edi
c0015115:	68 5f 23 02 c0       	push   0xc002235f
c001511a:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001511e:	56                   	push   esi
c001511f:	e8 4e b6 fe ff       	call   c0000772 <strcpy>
c0015124:	5d                   	pop    ebp
c0015125:	58                   	pop    eax
c0015126:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001512c:	66 c1 e8 06          	shr    ax,0x6
c0015130:	0f b6 c0             	movzx  eax,al
c0015133:	50                   	push   eax
c0015134:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001513a:	c1 e8 0e             	shr    eax,0xe
c001513d:	0f b6 c0             	movzx  eax,al
c0015140:	50                   	push   eax
c0015141:	e8 07 f0 ff ff       	call   c001414d <lookupAMDCPUName(unsigned char, unsigned char)>
c0015146:	5a                   	pop    edx
c0015147:	59                   	pop    ecx
c0015148:	50                   	push   eax
c0015149:	56                   	push   esi
c001514a:	e8 da b6 fe ff       	call   c0000829 <strcat>
c001514f:	5f                   	pop    edi
c0015150:	5d                   	pop    ebp
c0015151:	56                   	push   esi
c0015152:	53                   	push   ebx
c0015153:	e8 bc b5 ff ff       	call   c0010714 <Device::setName(char const*)>
c0015158:	58                   	pop    eax
c0015159:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c001515f:	5a                   	pop    edx
c0015160:	68 64 23 02 c0       	push   0xc0022364
c0015165:	50                   	push   eax
c0015166:	e8 58 b6 fe ff       	call   c00007c3 <strcmp>
c001516b:	83 c4 10             	add    esp,0x10
c001516e:	85 c0                	test   eax,eax
c0015170:	75 20                	jne    c0015192 <CPU::detectFeatures()+0x704>
c0015172:	8b 15 88 43 02 c0    	mov    edx,DWORD PTR ds:0xc0024388
c0015178:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c001517e:	a8 01                	test   al,0x1
c0015180:	74 10                	je     c0015192 <CPU::detectFeatures()+0x704>
c0015182:	83 e0 fe             	and    eax,0xfffffffe
c0015185:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c001518b:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c0015192:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0015198:	c1 e8 0e             	shr    eax,0xe
c001519b:	3c 05                	cmp    al,0x5
c001519d:	0f 85 ce 02 00 00    	jne    c0015471 <CPU::detectFeatures()+0x9e3>
c00151a3:	56                   	push   esi
c00151a4:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c00151aa:	83 e0 0f             	and    eax,0xf
c00151ad:	50                   	push   eax
c00151ae:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00151b4:	66 c1 e8 06          	shr    ax,0x6
c00151b8:	0f b6 c0             	movzx  eax,al
c00151bb:	50                   	push   eax
c00151bc:	6a 05                	push   0x5
c00151be:	e8 00 f4 ff ff       	call   c00145c3 <AMD_K6_writeback(int, int, int)>
c00151c3:	e9 1f 02 00 00       	jmp    c00153e7 <CPU::detectFeatures()+0x959>
c00151c8:	8d 50 fd             	lea    edx,[eax-0x3]
c00151cb:	83 fa 01             	cmp    edx,0x1
c00151ce:	76 09                	jbe    c00151d9 <CPU::detectFeatures()+0x74b>
c00151d0:	83 f8 06             	cmp    eax,0x6
c00151d3:	0f 85 91 01 00 00    	jne    c001536a <CPU::detectFeatures()+0x8dc>
c00151d9:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00151df:	c1 ea 0e             	shr    edx,0xe
c00151e2:	80 fa 05             	cmp    dl,0x5
c00151e5:	75 7b                	jne    c0015262 <CPU::detectFeatures()+0x7d4>
c00151e7:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00151ed:	66 81 e2 c0 3f       	and    dx,0x3fc0
c00151f2:	66 81 fa 00 01       	cmp    dx,0x100
c00151f7:	75 0c                	jne    c0015205 <CPU::detectFeatures()+0x777>
c00151f9:	51                   	push   ecx
c00151fa:	51                   	push   ecx
c00151fb:	68 6b 23 02 c0       	push   0xc002236b
c0015200:	e9 dc 01 00 00       	jmp    c00153e1 <CPU::detectFeatures()+0x953>
c0015205:	66 81 fa 00 02       	cmp    dx,0x200
c001520a:	75 0c                	jne    c0015218 <CPU::detectFeatures()+0x78a>
c001520c:	52                   	push   edx
c001520d:	52                   	push   edx
c001520e:	68 7e 23 02 c0       	push   0xc002237e
c0015213:	e9 c9 01 00 00       	jmp    c00153e1 <CPU::detectFeatures()+0x953>
c0015218:	66 81 fa 40 02       	cmp    dx,0x240
c001521d:	75 0c                	jne    c001522b <CPU::detectFeatures()+0x79d>
c001521f:	50                   	push   eax
c0015220:	50                   	push   eax
c0015221:	68 90 23 02 c0       	push   0xc0022390
c0015226:	e9 b6 01 00 00       	jmp    c00153e1 <CPU::detectFeatures()+0x953>
c001522b:	83 f8 06             	cmp    eax,0x6
c001522e:	75 0c                	jne    c001523c <CPU::detectFeatures()+0x7ae>
c0015230:	50                   	push   eax
c0015231:	50                   	push   eax
c0015232:	68 a2 23 02 c0       	push   0xc00223a2
c0015237:	e9 a5 01 00 00       	jmp    c00153e1 <CPU::detectFeatures()+0x953>
c001523c:	83 f8 04             	cmp    eax,0x4
c001523f:	75 0c                	jne    c001524d <CPU::detectFeatures()+0x7bf>
c0015241:	50                   	push   eax
c0015242:	50                   	push   eax
c0015243:	68 ae 23 02 c0       	push   0xc00223ae
c0015248:	e9 94 01 00 00       	jmp    c00153e1 <CPU::detectFeatures()+0x953>
c001524d:	83 f8 03             	cmp    eax,0x3
c0015250:	0f 85 1b 02 00 00    	jne    c0015471 <CPU::detectFeatures()+0x9e3>
c0015256:	50                   	push   eax
c0015257:	50                   	push   eax
c0015258:	68 b6 23 02 c0       	push   0xc00223b6
c001525d:	e9 7f 01 00 00       	jmp    c00153e1 <CPU::detectFeatures()+0x953>
c0015262:	80 fa 06             	cmp    dl,0x6
c0015265:	0f 85 db 00 00 00    	jne    c0015346 <CPU::detectFeatures()+0x8b8>
c001526b:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0015271:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0015276:	66 81 fa 80 01       	cmp    dx,0x180
c001527b:	75 0c                	jne    c0015289 <CPU::detectFeatures()+0x7fb>
c001527d:	50                   	push   eax
c001527e:	50                   	push   eax
c001527f:	68 c1 23 02 c0       	push   0xc00223c1
c0015284:	e9 58 01 00 00       	jmp    c00153e1 <CPU::detectFeatures()+0x953>
c0015289:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c001528f:	66 f7 c1 80 ff       	test   cx,0xff80
c0015294:	75 0c                	jne    c00152a2 <CPU::detectFeatures()+0x814>
c0015296:	50                   	push   eax
c0015297:	50                   	push   eax
c0015298:	68 d1 23 02 c0       	push   0xc00223d1
c001529d:	e9 3f 01 00 00       	jmp    c00153e1 <CPU::detectFeatures()+0x953>
c00152a2:	66 81 fa 40 02       	cmp    dx,0x240
c00152a7:	75 0c                	jne    c00152b5 <CPU::detectFeatures()+0x827>
c00152a9:	55                   	push   ebp
c00152aa:	55                   	push   ebp
c00152ab:	68 d8 23 02 c0       	push   0xc00223d8
c00152b0:	e9 2c 01 00 00       	jmp    c00153e1 <CPU::detectFeatures()+0x953>
c00152b5:	66 81 fa 80 02       	cmp    dx,0x280
c00152ba:	75 0c                	jne    c00152c8 <CPU::detectFeatures()+0x83a>
c00152bc:	57                   	push   edi
c00152bd:	57                   	push   edi
c00152be:	68 e1 23 02 c0       	push   0xc00223e1
c00152c3:	e9 19 01 00 00       	jmp    c00153e1 <CPU::detectFeatures()+0x953>
c00152c8:	66 81 fa 40 03       	cmp    dx,0x340
c00152cd:	74 ed                	je     c00152bc <CPU::detectFeatures()+0x82e>
c00152cf:	66 81 fa c0 03       	cmp    dx,0x3c0
c00152d4:	75 0c                	jne    c00152e2 <CPU::detectFeatures()+0x854>
c00152d6:	56                   	push   esi
c00152d7:	56                   	push   esi
c00152d8:	68 e8 23 02 c0       	push   0xc00223e8
c00152dd:	e9 ff 00 00 00       	jmp    c00153e1 <CPU::detectFeatures()+0x953>
c00152e2:	83 f8 06             	cmp    eax,0x6
c00152e5:	0f 84 45 ff ff ff    	je     c0015230 <CPU::detectFeatures()+0x7a2>
c00152eb:	83 f8 04             	cmp    eax,0x4
c00152ee:	0f 84 4d ff ff ff    	je     c0015241 <CPU::detectFeatures()+0x7b3>
c00152f4:	83 f8 03             	cmp    eax,0x3
c00152f7:	0f 85 74 01 00 00    	jne    c0015471 <CPU::detectFeatures()+0x9e3>
c00152fd:	51                   	push   ecx
c00152fe:	51                   	push   ecx
c00152ff:	68 f1 23 02 c0       	push   0xc00223f1
c0015304:	53                   	push   ebx
c0015305:	e8 0a b4 ff ff       	call   c0010714 <Device::setName(char const*)>
c001530a:	b1 c1                	mov    cl,0xc1
c001530c:	88 c8                	mov    al,cl
c001530e:	e6 22                	out    0x22,al
c0015310:	e4 23                	in     al,0x23
c0015312:	88 c2                	mov    dl,al
c0015314:	88 c8                	mov    al,cl
c0015316:	e6 22                	out    0x22,al
c0015318:	88 d0                	mov    al,dl
c001531a:	83 c8 10             	or     eax,0x10
c001531d:	e6 23                	out    0x23,al
c001531f:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0015326:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0015329:	89 d0                	mov    eax,edx
c001532b:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c0015331:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c0015335:	40                   	inc    eax
c0015336:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001533c:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0015341:	e9 a1 00 00 00       	jmp    c00153e7 <CPU::detectFeatures()+0x959>
c0015346:	83 f8 06             	cmp    eax,0x6
c0015349:	0f 84 e1 fe ff ff    	je     c0015230 <CPU::detectFeatures()+0x7a2>
c001534f:	83 f8 04             	cmp    eax,0x4
c0015352:	0f 84 e9 fe ff ff    	je     c0015241 <CPU::detectFeatures()+0x7b3>
c0015358:	83 f8 03             	cmp    eax,0x3
c001535b:	0f 85 10 01 00 00    	jne    c0015471 <CPU::detectFeatures()+0x9e3>
c0015361:	52                   	push   edx
c0015362:	52                   	push   edx
c0015363:	68 fc 23 02 c0       	push   0xc00223fc
c0015368:	eb 77                	jmp    c00153e1 <CPU::detectFeatures()+0x953>
c001536a:	83 f8 07             	cmp    eax,0x7
c001536d:	75 09                	jne    c0015378 <CPU::detectFeatures()+0x8ea>
c001536f:	50                   	push   eax
c0015370:	50                   	push   eax
c0015371:	68 06 24 02 c0       	push   0xc0022406
c0015376:	eb 69                	jmp    c00153e1 <CPU::detectFeatures()+0x953>
c0015378:	83 f8 0a             	cmp    eax,0xa
c001537b:	75 09                	jne    c0015386 <CPU::detectFeatures()+0x8f8>
c001537d:	50                   	push   eax
c001537e:	50                   	push   eax
c001537f:	68 11 24 02 c0       	push   0xc0022411
c0015384:	eb 5b                	jmp    c00153e1 <CPU::detectFeatures()+0x953>
c0015386:	83 f8 0b             	cmp    eax,0xb
c0015389:	75 09                	jne    c0015394 <CPU::detectFeatures()+0x906>
c001538b:	50                   	push   eax
c001538c:	50                   	push   eax
c001538d:	68 19 24 02 c0       	push   0xc0022419
c0015392:	eb 4d                	jmp    c00153e1 <CPU::detectFeatures()+0x953>
c0015394:	83 f8 08             	cmp    eax,0x8
c0015397:	75 09                	jne    c00153a2 <CPU::detectFeatures()+0x914>
c0015399:	50                   	push   eax
c001539a:	50                   	push   eax
c001539b:	68 22 24 02 c0       	push   0xc0022422
c00153a0:	eb 3f                	jmp    c00153e1 <CPU::detectFeatures()+0x953>
c00153a2:	83 f8 09             	cmp    eax,0x9
c00153a5:	75 09                	jne    c00153b0 <CPU::detectFeatures()+0x922>
c00153a7:	50                   	push   eax
c00153a8:	50                   	push   eax
c00153a9:	68 2a 24 02 c0       	push   0xc002242a
c00153ae:	eb 31                	jmp    c00153e1 <CPU::detectFeatures()+0x953>
c00153b0:	83 f8 05             	cmp    eax,0x5
c00153b3:	75 09                	jne    c00153be <CPU::detectFeatures()+0x930>
c00153b5:	50                   	push   eax
c00153b6:	50                   	push   eax
c00153b7:	68 32 24 02 c0       	push   0xc0022432
c00153bc:	eb 23                	jmp    c00153e1 <CPU::detectFeatures()+0x953>
c00153be:	83 f8 0c             	cmp    eax,0xc
c00153c1:	75 09                	jne    c00153cc <CPU::detectFeatures()+0x93e>
c00153c3:	55                   	push   ebp
c00153c4:	55                   	push   ebp
c00153c5:	68 40 24 02 c0       	push   0xc0022440
c00153ca:	eb 15                	jmp    c00153e1 <CPU::detectFeatures()+0x953>
c00153cc:	83 f8 0d             	cmp    eax,0xd
c00153cf:	75 09                	jne    c00153da <CPU::detectFeatures()+0x94c>
c00153d1:	57                   	push   edi
c00153d2:	57                   	push   edi
c00153d3:	68 4b 24 02 c0       	push   0xc002244b
c00153d8:	eb 07                	jmp    c00153e1 <CPU::detectFeatures()+0x953>
c00153da:	56                   	push   esi
c00153db:	56                   	push   esi
c00153dc:	68 5f 24 02 c0       	push   0xc002245f
c00153e1:	53                   	push   ebx
c00153e2:	e8 2d b3 ff ff       	call   c0010714 <Device::setName(char const*)>
c00153e7:	83 c4 10             	add    esp,0x10
c00153ea:	e9 82 00 00 00       	jmp    c0015471 <CPU::detectFeatures()+0x9e3>
c00153ef:	51                   	push   ecx
c00153f0:	51                   	push   ecx
c00153f1:	68 ab 22 02 c0       	push   0xc00222ab
c00153f6:	57                   	push   edi
c00153f7:	e8 76 b3 fe ff       	call   c0000772 <strcpy>
c00153fc:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0015406:	e8 3f ae fe ff       	call   c000024a <is486>
c001540b:	83 c4 10             	add    esp,0x10
c001540e:	85 c0                	test   eax,eax
c0015410:	74 2d                	je     c001543f <CPU::detectFeatures()+0x9b1>
c0015412:	52                   	push   edx
c0015413:	52                   	push   edx
c0015414:	68 6b 24 02 c0       	push   0xc002246b
c0015419:	53                   	push   ebx
c001541a:	e8 f5 b2 ff ff       	call   c0010714 <Device::setName(char const*)>
c001541f:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0015426:	e8 ed a3 00 00       	call   c001f818 <CPU::readCR0()>
c001542b:	83 c4 10             	add    esp,0x10
c001542e:	83 e0 14             	and    eax,0x14
c0015431:	83 f8 04             	cmp    eax,0x4
c0015434:	75 1f                	jne    c0015455 <CPU::detectFeatures()+0x9c7>
c0015436:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c001543d:	eb 32                	jmp    c0015471 <CPU::detectFeatures()+0x9e3>
c001543f:	50                   	push   eax
c0015440:	50                   	push   eax
c0015441:	68 76 24 02 c0       	push   0xc0022476
c0015446:	53                   	push   ebx
c0015447:	e8 c8 b2 ff ff       	call   c0010714 <Device::setName(char const*)>
c001544c:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c0015453:	eb d1                	jmp    c0015426 <CPU::detectFeatures()+0x998>
c0015455:	e8 cb ad fe ff       	call   c0000225 <hasLegacyFPU>
c001545a:	83 e0 01             	and    eax,0x1
c001545d:	8d 14 00             	lea    edx,[eax+eax*1]
c0015460:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0015466:	83 e0 fd             	and    eax,0xfffffffd
c0015469:	09 d0                	or     eax,edx
c001546b:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0015471:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0015478:	83 c4 4c             	add    esp,0x4c
c001547b:	5b                   	pop    ebx
c001547c:	5e                   	pop    esi
c001547d:	5f                   	pop    edi
c001547e:	5d                   	pop    ebp
c001547f:	c3                   	ret    

c0015480 <CPU::setupSMEP()>:
c0015480:	83 ec 0c             	sub    esp,0xc
c0015483:	e8 5a a6 00 00       	call   c001fae2 <CPU::readCR4()>
c0015488:	0d 00 00 10 00       	or     eax,0x100000
c001548d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015491:	83 c4 0c             	add    esp,0xc
c0015494:	e9 64 a6 00 00       	jmp    c001fafd <CPU::writeCR4(unsigned long)>
c0015499:	90                   	nop

c001549a <CPU::setupUMIP()>:
c001549a:	83 ec 0c             	sub    esp,0xc
c001549d:	e8 40 a6 00 00       	call   c001fae2 <CPU::readCR4()>
c00154a2:	80 cc 08             	or     ah,0x8
c00154a5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00154a9:	83 c4 0c             	add    esp,0xc
c00154ac:	e9 4c a6 00 00       	jmp    c001fafd <CPU::writeCR4(unsigned long)>
c00154b1:	90                   	nop

c00154b2 <CPU::setupTSC()>:
c00154b2:	83 ec 0c             	sub    esp,0xc
c00154b5:	e8 28 a6 00 00       	call   c001fae2 <CPU::readCR4()>
c00154ba:	83 c8 04             	or     eax,0x4
c00154bd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00154c1:	83 c4 0c             	add    esp,0xc
c00154c4:	e9 34 a6 00 00       	jmp    c001fafd <CPU::writeCR4(unsigned long)>
c00154c9:	90                   	nop

c00154ca <CPU::setupLargePages()>:
c00154ca:	83 ec 0c             	sub    esp,0xc
c00154cd:	e8 10 a6 00 00       	call   c001fae2 <CPU::readCR4()>
c00154d2:	83 c8 10             	or     eax,0x10
c00154d5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00154d9:	83 c4 0c             	add    esp,0xc
c00154dc:	e9 1c a6 00 00       	jmp    c001fafd <CPU::writeCR4(unsigned long)>
c00154e1:	90                   	nop

c00154e2 <CPU::setupPAT()>:
c00154e2:	a1 88 43 02 c0       	mov    eax,ds:0xc0024388
c00154e7:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c00154ee:	74 2c                	je     c001551c <CPU::setupPAT()+0x3a>
c00154f0:	53                   	push   ebx
c00154f1:	83 ec 10             	sub    esp,0x10
c00154f4:	68 77 02 00 00       	push   0x277
c00154f9:	50                   	push   eax
c00154fa:	e8 d7 60 ff ff       	call   c000b5d6 <Computer::rdmsr(unsigned int)>
c00154ff:	83 e2 f8             	and    edx,0xfffffff8
c0015502:	83 ca 01             	or     edx,0x1
c0015505:	52                   	push   edx
c0015506:	50                   	push   eax
c0015507:	68 77 02 00 00       	push   0x277
c001550c:	ff 35 88 43 02 c0    	push   DWORD PTR ds:0xc0024388
c0015512:	e8 eb 60 ff ff       	call   c000b602 <Computer::wrmsr(unsigned int, unsigned long long)>
c0015517:	83 c4 28             	add    esp,0x28
c001551a:	5b                   	pop    ebx
c001551b:	c3                   	ret    
c001551c:	c3                   	ret    
c001551d:	90                   	nop

c001551e <CPU::setupMTRR()>:
c001551e:	c3                   	ret    
c001551f:	90                   	nop

c0015520 <CPU::setupGlobalPages()>:
c0015520:	83 ec 0c             	sub    esp,0xc
c0015523:	e8 ba a5 00 00       	call   c001fae2 <CPU::readCR4()>
c0015528:	0c 80                	or     al,0x80
c001552a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001552e:	83 c4 0c             	add    esp,0xc
c0015531:	e9 c7 a5 00 00       	jmp    c001fafd <CPU::writeCR4(unsigned long)>

c0015536 <CPU::allowUsermodeDataAccess()>:
c0015536:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001553a:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0015541:	74 03                	je     c0015546 <CPU::allowUsermodeDataAccess()+0x10>
c0015543:	0f 01 cb             	stac   
c0015546:	c3                   	ret    
c0015547:	90                   	nop

c0015548 <CPU::prohibitUsermodeDataAccess()>:
c0015548:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001554c:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0015553:	74 03                	je     c0015558 <CPU::prohibitUsermodeDataAccess()+0x10>
c0015555:	0f 01 ca             	clac   
c0015558:	c3                   	ret    
c0015559:	90                   	nop

c001555a <CPU::setupSMAP()>:
c001555a:	53                   	push   ebx
c001555b:	83 ec 08             	sub    esp,0x8
c001555e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015562:	e8 7b a5 00 00       	call   c001fae2 <CPU::readCR4()>
c0015567:	83 ec 0c             	sub    esp,0xc
c001556a:	0d 00 00 20 00       	or     eax,0x200000
c001556f:	50                   	push   eax
c0015570:	e8 88 a5 00 00       	call   c001fafd <CPU::writeCR4(unsigned long)>
c0015575:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0015579:	83 c4 18             	add    esp,0x18
c001557c:	5b                   	pop    ebx
c001557d:	eb c9                	jmp    c0015548 <CPU::prohibitUsermodeDataAccess()>
c001557f:	90                   	nop

c0015580 <CPU::setupFeatures()>:
c0015580:	53                   	push   ebx
c0015581:	83 ec 08             	sub    esp,0x8
c0015584:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015588:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c001558f:	74 0c                	je     c001559d <CPU::setupFeatures()+0x1d>
c0015591:	83 ec 0c             	sub    esp,0xc
c0015594:	53                   	push   ebx
c0015595:	e8 e6 fe ff ff       	call   c0015480 <CPU::setupSMEP()>
c001559a:	83 c4 10             	add    esp,0x10
c001559d:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c00155a4:	74 0c                	je     c00155b2 <CPU::setupFeatures()+0x32>
c00155a6:	83 ec 0c             	sub    esp,0xc
c00155a9:	53                   	push   ebx
c00155aa:	e8 ab ff ff ff       	call   c001555a <CPU::setupSMAP()>
c00155af:	83 c4 10             	add    esp,0x10
c00155b2:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c00155b9:	74 0c                	je     c00155c7 <CPU::setupFeatures()+0x47>
c00155bb:	83 ec 0c             	sub    esp,0xc
c00155be:	53                   	push   ebx
c00155bf:	e8 d6 fe ff ff       	call   c001549a <CPU::setupUMIP()>
c00155c4:	83 c4 10             	add    esp,0x10
c00155c7:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c00155ce:	74 0c                	je     c00155dc <CPU::setupFeatures()+0x5c>
c00155d0:	83 ec 0c             	sub    esp,0xc
c00155d3:	53                   	push   ebx
c00155d4:	e8 d9 fe ff ff       	call   c00154b2 <CPU::setupTSC()>
c00155d9:	83 c4 10             	add    esp,0x10
c00155dc:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c00155e3:	74 0c                	je     c00155f1 <CPU::setupFeatures()+0x71>
c00155e5:	83 ec 0c             	sub    esp,0xc
c00155e8:	53                   	push   ebx
c00155e9:	e8 dc fe ff ff       	call   c00154ca <CPU::setupLargePages()>
c00155ee:	83 c4 10             	add    esp,0x10
c00155f1:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c00155f8:	74 0c                	je     c0015606 <CPU::setupFeatures()+0x86>
c00155fa:	83 ec 0c             	sub    esp,0xc
c00155fd:	53                   	push   ebx
c00155fe:	e8 1d ff ff ff       	call   c0015520 <CPU::setupGlobalPages()>
c0015603:	83 c4 10             	add    esp,0x10
c0015606:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c001560d:	74 0d                	je     c001561c <CPU::setupFeatures()+0x9c>
c001560f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0015613:	83 c4 08             	add    esp,0x8
c0015616:	5b                   	pop    ebx
c0015617:	e9 c6 fe ff ff       	jmp    c00154e2 <CPU::setupPAT()>
c001561c:	83 c4 08             	add    esp,0x8
c001561f:	5b                   	pop    ebx
c0015620:	c3                   	ret    
c0015621:	90                   	nop

c0015622 <CPU::open(int, int, void*)>:
c0015622:	57                   	push   edi
c0015623:	56                   	push   esi
c0015624:	53                   	push   ebx
c0015625:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015629:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001562d:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0015633:	83 ec 0c             	sub    esp,0xc
c0015636:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c001563c:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0015642:	50                   	push   eax
c0015643:	e8 7a 62 ff ff       	call   c000b8c2 <GDT::setup()>
c0015648:	83 c4 0c             	add    esp,0xc
c001564b:	6a 00                	push   0x0
c001564d:	68 ef be ad de       	push   0xdeadbeef
c0015652:	57                   	push   edi
c0015653:	e8 d2 84 ff ff       	call   c000db2a <TSS::setup(unsigned long, unsigned long)>
c0015658:	89 3c 24             	mov    DWORD PTR [esp],edi
c001565b:	e8 aa 84 ff ff       	call   c000db0a <TSS::flush()>
c0015660:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0015666:	89 04 24             	mov    DWORD PTR [esp],eax
c0015669:	e8 ae 64 ff ff       	call   c000bb1c <IDT::setup()>
c001566e:	c7 04 24 00 04 00 00 	mov    DWORD PTR [esp],0x400
c0015675:	e8 7a a4 00 00       	call   c001faf4 <CPU::writeDR7(unsigned long)>
c001567a:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0015684:	e8 57 6f ff ff       	call   c000c5e0 <Phys::allocatePage()>
c0015689:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001568f:	89 30                	mov    DWORD PTR [eax],esi
c0015691:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0015697:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001569a:	58                   	pop    eax
c001569b:	5a                   	pop    edx
c001569c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00156a2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00156a6:	e8 4d 94 ff ff       	call   c000eaf8 <VAS::setCPUSpecific(unsigned long)>
c00156ab:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00156ae:	e8 db f3 ff ff       	call   c0014a8e <CPU::detectFeatures()>
c00156b3:	e8 76 c3 ff ff       	call   c0011a2e <setupInterruptController()>
c00156b8:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c00156be:	a1 a0 43 02 c0       	mov    eax,ds:0xc00243a0
c00156c3:	83 e0 10             	and    eax,0x10
c00156c6:	83 f8 01             	cmp    eax,0x1
c00156c9:	19 c0                	sbb    eax,eax
c00156cb:	83 e0 46             	and    eax,0x46
c00156ce:	83 c0 1e             	add    eax,0x1e
c00156d1:	89 04 24             	mov    DWORD PTR [esp],eax
c00156d4:	e8 e7 d6 ff ff       	call   c0012dc0 <setupTimer(int)>
c00156d9:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c00156df:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00156e2:	e8 99 fe ff ff       	call   c0015580 <CPU::setupFeatures()>
c00156e7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00156ea:	e8 23 f1 ff ff       	call   c0014812 <CPU::displayFeatures()>
c00156ef:	83 c4 10             	add    esp,0x10
c00156f2:	31 c0                	xor    eax,eax
c00156f4:	5b                   	pop    ebx
c00156f5:	5e                   	pop    esi
c00156f6:	5f                   	pop    edi
c00156f7:	c3                   	ret    

c00156f8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c00156f8:	57                   	push   edi
c00156f9:	56                   	push   esi
c00156fa:	53                   	push   ebx
c00156fb:	51                   	push   ecx
c00156fc:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0015700:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0015703:	0f 02 c0             	lar    eax,ax
c0015706:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c0015709:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001570d:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0015710:	88 ca                	mov    dl,cl
c0015712:	c0 ea 06             	shr    dl,0x6
c0015715:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c0015719:	89 ca                	mov    edx,ecx
c001571b:	66 c1 ea 03          	shr    dx,0x3
c001571f:	83 e2 07             	and    edx,0x7
c0015722:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0015727:	88 17                	mov    BYTE PTR [edi],dl
c0015729:	0f 84 a3 01 00 00    	je     c00158d2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1da>
c001572f:	83 e1 07             	and    ecx,0x7
c0015732:	80 f9 04             	cmp    cl,0x4
c0015735:	0f 84 98 00 00 00    	je     c00157d3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c001573b:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0015740:	0f 95 c0             	setne  al
c0015743:	80 f9 05             	cmp    cl,0x5
c0015746:	0f 95 c2             	setne  dl
c0015749:	08 c2                	or     dl,al
c001574b:	74 79                	je     c00157c6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c001574d:	84 c9                	test   cl,cl
c001574f:	75 05                	jne    c0015756 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c0015751:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0015754:	eb 3c                	jmp    c0015792 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0015756:	80 f9 01             	cmp    cl,0x1
c0015759:	75 05                	jne    c0015760 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c001575b:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001575e:	eb 32                	jmp    c0015792 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0015760:	80 f9 02             	cmp    cl,0x2
c0015763:	75 05                	jne    c001576a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c0015765:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0015768:	eb 28                	jmp    c0015792 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001576a:	31 c0                	xor    eax,eax
c001576c:	80 f9 03             	cmp    cl,0x3
c001576f:	75 05                	jne    c0015776 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c0015771:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0015774:	eb 1c                	jmp    c0015792 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0015776:	80 f9 05             	cmp    cl,0x5
c0015779:	75 05                	jne    c0015780 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c001577b:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c001577e:	eb 12                	jmp    c0015792 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0015780:	80 f9 06             	cmp    cl,0x6
c0015783:	75 05                	jne    c001578a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c0015785:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0015788:	eb 08                	jmp    c0015792 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001578a:	80 f9 07             	cmp    cl,0x7
c001578d:	75 03                	jne    c0015792 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001578f:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0015792:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0015797:	75 10                	jne    c00157a9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c0015799:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c001579d:	b9 03 00 00 00       	mov    ecx,0x3
c00157a2:	01 d0                	add    eax,edx
c00157a4:	e9 34 01 00 00       	jmp    c00158dd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e5>
c00157a9:	b9 02 00 00 00       	mov    ecx,0x2
c00157ae:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c00157b3:	0f 85 24 01 00 00    	jne    c00158dd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e5>
c00157b9:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c00157bc:	b9 06 00 00 00       	mov    ecx,0x6
c00157c1:	e9 17 01 00 00       	jmp    c00158dd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e5>
c00157c6:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c00157c9:	b9 06 00 00 00       	mov    ecx,0x6
c00157ce:	e9 0c 01 00 00       	jmp    c00158df <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e7>
c00157d3:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c00157d6:	88 ca                	mov    dl,cl
c00157d8:	c0 ea 06             	shr    dl,0x6
c00157db:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c00157df:	89 ca                	mov    edx,ecx
c00157e1:	66 c1 ea 03          	shr    dx,0x3
c00157e5:	83 e2 07             	and    edx,0x7
c00157e8:	80 e1 07             	and    cl,0x7
c00157eb:	75 05                	jne    c00157f2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c00157ed:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c00157f0:	eb 49                	jmp    c001583b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c00157f2:	80 f9 01             	cmp    cl,0x1
c00157f5:	75 05                	jne    c00157fc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c00157f7:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c00157fa:	eb 3f                	jmp    c001583b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c00157fc:	80 f9 02             	cmp    cl,0x2
c00157ff:	75 05                	jne    c0015806 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c0015801:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0015804:	eb 35                	jmp    c001583b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c0015806:	80 f9 03             	cmp    cl,0x3
c0015809:	75 05                	jne    c0015810 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c001580b:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c001580e:	eb 2b                	jmp    c001583b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c0015810:	80 f9 04             	cmp    cl,0x4
c0015813:	75 0f                	jne    c0015824 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12c>
c0015815:	f6 c4 60             	test   ah,0x60
c0015818:	75 05                	jne    c001581f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x127>
c001581a:	8b 7e 1c             	mov    edi,DWORD PTR [esi+0x1c]
c001581d:	eb 1c                	jmp    c001583b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c001581f:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c0015822:	eb 17                	jmp    c001583b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c0015824:	80 f9 05             	cmp    cl,0x5
c0015827:	75 05                	jne    c001582e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x136>
c0015829:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c001582c:	eb 0d                	jmp    c001583b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c001582e:	80 f9 06             	cmp    cl,0x6
c0015831:	75 05                	jne    c0015838 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x140>
c0015833:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0015836:	eb 03                	jmp    c001583b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c0015838:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c001583b:	84 d2                	test   dl,dl
c001583d:	75 05                	jne    c0015844 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14c>
c001583f:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0015842:	eb 3c                	jmp    c0015880 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c0015844:	80 fa 01             	cmp    dl,0x1
c0015847:	75 05                	jne    c001584e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x156>
c0015849:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001584c:	eb 32                	jmp    c0015880 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c001584e:	80 fa 02             	cmp    dl,0x2
c0015851:	75 05                	jne    c0015858 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x160>
c0015853:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0015856:	eb 28                	jmp    c0015880 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c0015858:	80 fa 03             	cmp    dl,0x3
c001585b:	75 05                	jne    c0015862 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16a>
c001585d:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0015860:	eb 1e                	jmp    c0015880 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c0015862:	31 c0                	xor    eax,eax
c0015864:	80 fa 04             	cmp    dl,0x4
c0015867:	74 17                	je     c0015880 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c0015869:	80 fa 05             	cmp    dl,0x5
c001586c:	75 05                	jne    c0015873 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17b>
c001586e:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0015871:	eb 0d                	jmp    c0015880 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c0015873:	80 fa 06             	cmp    dl,0x6
c0015876:	75 05                	jne    c001587d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x185>
c0015878:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001587b:	eb 03                	jmp    c0015880 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c001587d:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0015880:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0015885:	0f 94 c2             	sete   dl
c0015888:	80 f9 05             	cmp    cl,0x5
c001588b:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c001588f:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c0015894:	d3 e0                	shl    eax,cl
c0015896:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c001589a:	74 0a                	je     c00158a6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ae>
c001589c:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c001589f:	b9 07 00 00 00       	mov    ecx,0x7
c00158a4:	eb 37                	jmp    c00158dd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e5>
c00158a6:	01 f8                	add    eax,edi
c00158a8:	b9 03 00 00 00       	mov    ecx,0x3
c00158ad:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c00158b2:	74 2b                	je     c00158df <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e7>
c00158b4:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c00158b9:	75 0d                	jne    c00158c8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d0>
c00158bb:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c00158bf:	01 c8                	add    eax,ecx
c00158c1:	b9 04 00 00 00       	mov    ecx,0x4
c00158c6:	eb 17                	jmp    c00158df <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e7>
c00158c8:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c00158cb:	b9 07 00 00 00       	mov    ecx,0x7
c00158d0:	eb 0d                	jmp    c00158df <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e7>
c00158d2:	b9 02 00 00 00       	mov    ecx,0x2
c00158d7:	b2 01                	mov    dl,0x1
c00158d9:	31 c0                	xor    eax,eax
c00158db:	eb 02                	jmp    c00158df <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e7>
c00158dd:	31 d2                	xor    edx,edx
c00158df:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00158e3:	89 0b                	mov    DWORD PTR [ebx],ecx
c00158e5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00158e9:	88 11                	mov    BYTE PTR [ecx],dl
c00158eb:	5a                   	pop    edx
c00158ec:	5b                   	pop    ebx
c00158ed:	5e                   	pop    esi
c00158ee:	5f                   	pop    edi
c00158ef:	c3                   	ret    

c00158f0 <Krnl::panic(char const*)>:
c00158f0:	55                   	push   ebp
c00158f1:	89 e5                	mov    ebp,esp
c00158f3:	53                   	push   ebx
c00158f4:	50                   	push   eax
c00158f5:	a1 d0 4d 02 c0       	mov    eax,ds:0xc0024dd0
c00158fa:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00158fd:	85 c0                	test   eax,eax
c00158ff:	74 02                	je     c0015903 <Krnl::panic(char const*)+0x13>
c0015901:	ff d0                	call   eax
c0015903:	fa                   	cli    
c0015904:	c6 05 d4 4d 02 c0 01 	mov    BYTE PTR ds:0xc0024dd4,0x1
c001590b:	83 ec 08             	sub    esp,0x8
c001590e:	c6 05 c0 37 02 c0 00 	mov    BYTE PTR ds:0xc00237c0,0x0
c0015915:	53                   	push   ebx
c0015916:	68 b0 24 02 c0       	push   0xc00224b0
c001591b:	e8 07 98 ff ff       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c0015920:	58                   	pop    eax
c0015921:	a1 d4 57 02 c0       	mov    eax,ds:0xc00257d4
c0015926:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001592c:	e8 3a 7a ff ff       	call   c000d36b <setActiveTerminal(VgaText*)>
c0015931:	83 c4 0c             	add    esp,0xc
c0015934:	a1 d4 57 02 c0       	mov    eax,ds:0xc00257d4
c0015939:	6a 01                	push   0x1
c001593b:	6a 0f                	push   0xf
c001593d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015943:	e8 62 74 ff ff       	call   c000cdaa <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0015948:	5a                   	pop    edx
c0015949:	a1 d4 57 02 c0       	mov    eax,ds:0xc00257d4
c001594e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015954:	e8 b3 7c ff ff       	call   c000d60c <VgaText::clearScreen()>
c0015959:	59                   	pop    ecx
c001595a:	58                   	pop    eax
c001595b:	a1 d4 57 02 c0       	mov    eax,ds:0xc00257d4
c0015960:	68 c9 24 02 c0       	push   0xc00224c9
c0015965:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001596b:	e8 1a 7e ff ff       	call   c000d78a <VgaText::puts(char const*)>
c0015970:	58                   	pop    eax
c0015971:	a1 d4 57 02 c0       	mov    eax,ds:0xc00257d4
c0015976:	5a                   	pop    edx
c0015977:	68 70 25 02 c0       	push   0xc0022570
c001597c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015982:	e8 03 7e ff ff       	call   c000d78a <VgaText::puts(char const*)>
c0015987:	59                   	pop    ecx
c0015988:	58                   	pop    eax
c0015989:	a1 d4 57 02 c0       	mov    eax,ds:0xc00257d4
c001598e:	68 e5 24 02 c0       	push   0xc00224e5
c0015993:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015999:	e8 ec 7d ff ff       	call   c000d78a <VgaText::puts(char const*)>
c001599e:	58                   	pop    eax
c001599f:	a1 d4 57 02 c0       	mov    eax,ds:0xc00257d4
c00159a4:	5a                   	pop    edx
c00159a5:	53                   	push   ebx
c00159a6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00159ac:	e8 d9 7d ff ff       	call   c000d78a <VgaText::puts(char const*)>
c00159b1:	59                   	pop    ecx
c00159b2:	a1 d4 57 02 c0       	mov    eax,ds:0xc00257d4
c00159b7:	5b                   	pop    ebx
c00159b8:	68 05 25 02 c0       	push   0xc0022505
c00159bd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00159c3:	e8 c2 7d ff ff       	call   c000d78a <VgaText::puts(char const*)>
c00159c8:	58                   	pop    eax
c00159c9:	a1 d4 57 02 c0       	mov    eax,ds:0xc00257d4
c00159ce:	5a                   	pop    edx
c00159cf:	68 ac 25 02 c0       	push   0xc00225ac
c00159d4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00159da:	e8 ab 7d ff ff       	call   c000d78a <VgaText::puts(char const*)>
c00159df:	59                   	pop    ecx
c00159e0:	a1 d4 57 02 c0       	mov    eax,ds:0xc00257d4
c00159e5:	5b                   	pop    ebx
c00159e6:	68 e5 24 02 c0       	push   0xc00224e5
c00159eb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00159f1:	e8 94 7d ff ff       	call   c000d78a <VgaText::puts(char const*)>
c00159f6:	58                   	pop    eax
c00159f7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00159fc:	5a                   	pop    edx
c00159fd:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015a00:	83 c0 0c             	add    eax,0xc
c0015a03:	50                   	push   eax
c0015a04:	a1 d4 57 02 c0       	mov    eax,ds:0xc00257d4
c0015a09:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015a0f:	e8 76 7d ff ff       	call   c000d78a <VgaText::puts(char const*)>
c0015a14:	59                   	pop    ecx
c0015a15:	a1 d4 57 02 c0       	mov    eax,ds:0xc00257d4
c0015a1a:	5b                   	pop    ebx
c0015a1b:	68 04 25 02 c0       	push   0xc0022504
c0015a20:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015a26:	e8 5f 7d ff ff       	call   c000d78a <VgaText::puts(char const*)>
c0015a2b:	58                   	pop    eax
c0015a2c:	a1 d4 57 02 c0       	mov    eax,ds:0xc00257d4
c0015a31:	5a                   	pop    edx
c0015a32:	68 d8 25 02 c0       	push   0xc00225d8
c0015a37:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015a3d:	e8 48 7d ff ff       	call   c000d78a <VgaText::puts(char const*)>
c0015a42:	59                   	pop    ecx
c0015a43:	a1 d4 57 02 c0       	mov    eax,ds:0xc00257d4
c0015a48:	5b                   	pop    ebx
c0015a49:	68 18 26 02 c0       	push   0xc0022618
c0015a4e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015a54:	e8 31 7d ff ff       	call   c000d78a <VgaText::puts(char const*)>
c0015a59:	58                   	pop    eax
c0015a5a:	a1 d4 57 02 c0       	mov    eax,ds:0xc00257d4
c0015a5f:	5a                   	pop    edx
c0015a60:	68 f0 24 02 c0       	push   0xc00224f0
c0015a65:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015a6b:	e8 1a 7d ff ff       	call   c000d78a <VgaText::puts(char const*)>
c0015a70:	59                   	pop    ecx
c0015a71:	5b                   	pop    ebx
c0015a72:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0015a75:	68 08 25 02 c0       	push   0xc0022508
c0015a7a:	e8 a8 96 ff ff       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c0015a7f:	58                   	pop    eax
c0015a80:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0015a83:	5a                   	pop    edx
c0015a84:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0015a87:	68 11 25 02 c0       	push   0xc0022511
c0015a8c:	e8 96 96 ff ff       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c0015a91:	59                   	pop    ecx
c0015a92:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0015a95:	5b                   	pop    ebx
c0015a96:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a98:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0015a9b:	68 1a 25 02 c0       	push   0xc002251a
c0015aa0:	e8 82 96 ff ff       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c0015aa5:	58                   	pop    eax
c0015aa6:	a1 d4 57 02 c0       	mov    eax,ds:0xc00257d4
c0015aab:	5a                   	pop    edx
c0015aac:	68 5c 26 02 c0       	push   0xc002265c
c0015ab1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015ab7:	e8 ce 7c ff ff       	call   c000d78a <VgaText::puts(char const*)>
c0015abc:	59                   	pop    ecx
c0015abd:	a1 d4 57 02 c0       	mov    eax,ds:0xc00257d4
c0015ac2:	5b                   	pop    ebx
c0015ac3:	68 23 25 02 c0       	push   0xc0022523
c0015ac8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015ace:	e8 b7 7c ff ff       	call   c000d78a <VgaText::puts(char const*)>
c0015ad3:	a1 d4 57 02 c0       	mov    eax,ds:0xc00257d4
c0015ad8:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0015ade:	e8 35 9d 00 00       	call   c001f818 <CPU::readCR0()>
c0015ae3:	5a                   	pop    edx
c0015ae4:	59                   	pop    ecx
c0015ae5:	50                   	push   eax
c0015ae6:	53                   	push   ebx
c0015ae7:	e8 c4 7c ff ff       	call   c000d7b0 <VgaText::putx(unsigned int)>
c0015aec:	5b                   	pop    ebx
c0015aed:	58                   	pop    eax
c0015aee:	a1 d4 57 02 c0       	mov    eax,ds:0xc00257d4
c0015af3:	68 2d 25 02 c0       	push   0xc002252d
c0015af8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015afe:	e8 87 7c ff ff       	call   c000d78a <VgaText::puts(char const*)>
c0015b03:	a1 d4 57 02 c0       	mov    eax,ds:0xc00257d4
c0015b08:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0015b0e:	e8 f3 9f 00 00       	call   c001fb06 <CPU::readCR2()>
c0015b13:	5a                   	pop    edx
c0015b14:	59                   	pop    ecx
c0015b15:	50                   	push   eax
c0015b16:	53                   	push   ebx
c0015b17:	e8 94 7c ff ff       	call   c000d7b0 <VgaText::putx(unsigned int)>
c0015b1c:	5b                   	pop    ebx
c0015b1d:	58                   	pop    eax
c0015b1e:	a1 d4 57 02 c0       	mov    eax,ds:0xc00257d4
c0015b23:	68 37 25 02 c0       	push   0xc0022537
c0015b28:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015b2e:	e8 57 7c ff ff       	call   c000d78a <VgaText::puts(char const*)>
c0015b33:	a1 d4 57 02 c0       	mov    eax,ds:0xc00257d4
c0015b38:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0015b3e:	e8 62 99 00 00       	call   c001f4a5 <CPU::readCR3()>
c0015b43:	5a                   	pop    edx
c0015b44:	59                   	pop    ecx
c0015b45:	50                   	push   eax
c0015b46:	53                   	push   ebx
c0015b47:	e8 64 7c ff ff       	call   c000d7b0 <VgaText::putx(unsigned int)>
c0015b4c:	5b                   	pop    ebx
c0015b4d:	58                   	pop    eax
c0015b4e:	a1 d4 57 02 c0       	mov    eax,ds:0xc00257d4
c0015b53:	68 4a 25 02 c0       	push   0xc002254a
c0015b58:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015b5e:	e8 27 7c ff ff       	call   c000d78a <VgaText::puts(char const*)>
c0015b63:	a1 d4 57 02 c0       	mov    eax,ds:0xc00257d4
c0015b68:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0015b6e:	e8 6f 9f 00 00       	call   c001fae2 <CPU::readCR4()>
c0015b73:	5a                   	pop    edx
c0015b74:	59                   	pop    ecx
c0015b75:	50                   	push   eax
c0015b76:	53                   	push   ebx
c0015b77:	e8 34 7c ff ff       	call   c000d7b0 <VgaText::putx(unsigned int)>
c0015b7c:	5b                   	pop    ebx
c0015b7d:	58                   	pop    eax
c0015b7e:	a1 d4 57 02 c0       	mov    eax,ds:0xc00257d4
c0015b83:	68 54 25 02 c0       	push   0xc0022554
c0015b88:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015b8e:	e8 f7 7b ff ff       	call   c000d78a <VgaText::puts(char const*)>
c0015b93:	5a                   	pop    edx
c0015b94:	a1 d4 57 02 c0       	mov    eax,ds:0xc00257d4
c0015b99:	59                   	pop    ecx
c0015b9a:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015ba0:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0015ba3:	50                   	push   eax
c0015ba4:	e8 07 7c ff ff       	call   c000d7b0 <VgaText::putx(unsigned int)>
c0015ba9:	5b                   	pop    ebx
c0015baa:	58                   	pop    eax
c0015bab:	a1 d4 57 02 c0       	mov    eax,ds:0xc00257d4
c0015bb0:	68 6b 25 02 c0       	push   0xc002256b
c0015bb5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015bbb:	e8 ca 7b ff ff       	call   c000d78a <VgaText::puts(char const*)>
c0015bc0:	5a                   	pop    edx
c0015bc1:	a1 d4 57 02 c0       	mov    eax,ds:0xc00257d4
c0015bc6:	59                   	pop    ecx
c0015bc7:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015bcd:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0015bd0:	ff 72 04             	push   DWORD PTR [edx+0x4]
c0015bd3:	50                   	push   eax
c0015bd4:	e8 d7 7b ff ff       	call   c000d7b0 <VgaText::putx(unsigned int)>
c0015bd9:	5b                   	pop    ebx
c0015bda:	58                   	pop    eax
c0015bdb:	a1 d4 57 02 c0       	mov    eax,ds:0xc00257d4
c0015be0:	68 6b 25 02 c0       	push   0xc002256b
c0015be5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015beb:	e8 9a 7b ff ff       	call   c000d78a <VgaText::puts(char const*)>
c0015bf0:	59                   	pop    ecx
c0015bf1:	a1 d4 57 02 c0       	mov    eax,ds:0xc00257d4
c0015bf6:	5b                   	pop    ebx
c0015bf7:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015bfd:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0015c00:	8b 12                	mov    edx,DWORD PTR [edx]
c0015c02:	ff 72 04             	push   DWORD PTR [edx+0x4]
c0015c05:	50                   	push   eax
c0015c06:	e8 a5 7b ff ff       	call   c000d7b0 <VgaText::putx(unsigned int)>
c0015c0b:	83 c4 10             	add    esp,0x10
c0015c0e:	b2 fe                	mov    dl,0xfe
c0015c10:	e4 60                	in     al,0x60
c0015c12:	3c 1c                	cmp    al,0x1c
c0015c14:	74 04                	je     c0015c1a <Krnl::panic(char const*)+0x32a>
c0015c16:	3c 5a                	cmp    al,0x5a
c0015c18:	75 f6                	jne    c0015c10 <Krnl::panic(char const*)+0x320>
c0015c1a:	e4 64                	in     al,0x64
c0015c1c:	a8 02                	test   al,0x2
c0015c1e:	75 fa                	jne    c0015c1a <Krnl::panic(char const*)+0x32a>
c0015c20:	88 d0                	mov    al,dl
c0015c22:	e6 64                	out    0x64,al
c0015c24:	fa                   	cli    
c0015c25:	f4                   	hlt    
c0015c26:	eb e8                	jmp    c0015c10 <Krnl::panic(char const*)+0x320>

c0015c28 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0015c28:	55                   	push   ebp
c0015c29:	57                   	push   edi
c0015c2a:	56                   	push   esi
c0015c2b:	53                   	push   ebx
c0015c2c:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0015c32:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0015c39:	8a 1e                	mov    bl,BYTE PTR [esi]
c0015c3b:	8d 6e 01             	lea    ebp,[esi+0x1]
c0015c3e:	80 fb 40             	cmp    bl,0x40
c0015c41:	75 1b                	jne    c0015c5e <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c0015c43:	8a 16                	mov    dl,BYTE PTR [esi]
c0015c45:	84 d2                	test   dl,dl
c0015c47:	0f 84 f1 00 00 00    	je     c0015d3e <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0015c4d:	8d 46 01             	lea    eax,[esi+0x1]
c0015c50:	80 fa 3a             	cmp    dl,0x3a
c0015c53:	74 04                	je     c0015c59 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c0015c55:	89 c6                	mov    esi,eax
c0015c57:	eb ea                	jmp    c0015c43 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c0015c59:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0015c5c:	89 c6                	mov    esi,eax
c0015c5e:	50                   	push   eax
c0015c5f:	6a 40                	push   0x40
c0015c61:	6a 00                	push   0x0
c0015c63:	8d 44 24 24          	lea    eax,[esp+0x24]
c0015c67:	50                   	push   eax
c0015c68:	e8 66 aa fe ff       	call   c00006d3 <memset>
c0015c6d:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0015c74:	31 c0                	xor    eax,eax
c0015c76:	83 c4 10             	add    esp,0x10
c0015c79:	8a 0f                	mov    cl,BYTE PTR [edi]
c0015c7b:	84 c9                	test   cl,cl
c0015c7d:	0f 84 bb 00 00 00    	je     c0015d3e <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0015c83:	3d c7 00 00 00       	cmp    eax,0xc7
c0015c88:	0f 8f b0 00 00 00    	jg     c0015d3e <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0015c8e:	80 f9 0a             	cmp    cl,0xa
c0015c91:	0f 85 98 00 00 00    	jne    c0015d2f <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c0015c97:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0015c9c:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c0015ca0:	a8 df                	test   al,0xdf
c0015ca2:	0f 94 c1             	sete   cl
c0015ca5:	3c 23                	cmp    al,0x23
c0015ca7:	0f 94 c2             	sete   dl
c0015caa:	08 d1                	or     cl,dl
c0015cac:	75 4a                	jne    c0015cf8 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0015cae:	8d 50 f7             	lea    edx,[eax-0x9]
c0015cb1:	80 fa 01             	cmp    dl,0x1
c0015cb4:	76 42                	jbe    c0015cf8 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0015cb6:	3c 5b                	cmp    al,0x5b
c0015cb8:	75 42                	jne    c0015cfc <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c0015cba:	80 fb 40             	cmp    bl,0x40
c0015cbd:	75 39                	jne    c0015cf8 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0015cbf:	83 ec 0c             	sub    esp,0xc
c0015cc2:	8d 54 24 65          	lea    edx,[esp+0x65]
c0015cc6:	52                   	push   edx
c0015cc7:	e8 24 aa fe ff       	call   c00006f0 <strlen>
c0015ccc:	83 c4 10             	add    esp,0x10
c0015ccf:	83 f8 3f             	cmp    eax,0x3f
c0015cd2:	77 6a                	ja     c0015d3e <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0015cd4:	50                   	push   eax
c0015cd5:	50                   	push   eax
c0015cd6:	8d 54 24 61          	lea    edx,[esp+0x61]
c0015cda:	52                   	push   edx
c0015cdb:	8d 54 24 24          	lea    edx,[esp+0x24]
c0015cdf:	52                   	push   edx
c0015ce0:	e8 8d aa fe ff       	call   c0000772 <strcpy>
c0015ce5:	58                   	pop    eax
c0015ce6:	8d 54 24 24          	lea    edx,[esp+0x24]
c0015cea:	52                   	push   edx
c0015ceb:	e8 00 aa fe ff       	call   c00006f0 <strlen>
c0015cf0:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0015cf5:	83 c4 10             	add    esp,0x10
c0015cf8:	31 d2                	xor    edx,edx
c0015cfa:	eb 3a                	jmp    c0015d36 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c0015cfc:	80 fb 40             	cmp    bl,0x40
c0015cff:	74 06                	je     c0015d07 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c0015d01:	8d 44 24 58          	lea    eax,[esp+0x58]
c0015d05:	eb 20                	jmp    c0015d27 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c0015d07:	50                   	push   eax
c0015d08:	50                   	push   eax
c0015d09:	55                   	push   ebp
c0015d0a:	8d 44 24 24          	lea    eax,[esp+0x24]
c0015d0e:	50                   	push   eax
c0015d0f:	e8 af aa fe ff       	call   c00007c3 <strcmp>
c0015d14:	83 c4 10             	add    esp,0x10
c0015d17:	85 c0                	test   eax,eax
c0015d19:	75 dd                	jne    c0015cf8 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0015d1b:	eb e4                	jmp    c0015d01 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c0015d1d:	8d 50 01             	lea    edx,[eax+0x1]
c0015d20:	80 f9 3d             	cmp    cl,0x3d
c0015d23:	74 1d                	je     c0015d42 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c0015d25:	89 d0                	mov    eax,edx
c0015d27:	8a 08                	mov    cl,BYTE PTR [eax]
c0015d29:	84 c9                	test   cl,cl
c0015d2b:	75 f0                	jne    c0015d1d <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c0015d2d:	eb 0f                	jmp    c0015d3e <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0015d2f:	8d 50 01             	lea    edx,[eax+0x1]
c0015d32:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0015d36:	47                   	inc    edi
c0015d37:	89 d0                	mov    eax,edx
c0015d39:	e9 3b ff ff ff       	jmp    c0015c79 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c0015d3e:	31 c0                	xor    eax,eax
c0015d40:	eb 33                	jmp    c0015d75 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c0015d42:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0015d46:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0015d49:	50                   	push   eax
c0015d4a:	50                   	push   eax
c0015d4b:	8d 44 24 60          	lea    eax,[esp+0x60]
c0015d4f:	50                   	push   eax
c0015d50:	56                   	push   esi
c0015d51:	e8 6d aa fe ff       	call   c00007c3 <strcmp>
c0015d56:	83 c4 10             	add    esp,0x10
c0015d59:	85 c0                	test   eax,eax
c0015d5b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015d5f:	75 97                	jne    c0015cf8 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0015d61:	51                   	push   ecx
c0015d62:	51                   	push   ecx
c0015d63:	52                   	push   edx
c0015d64:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0015d6b:	e8 02 aa fe ff       	call   c0000772 <strcpy>
c0015d70:	83 c4 10             	add    esp,0x10
c0015d73:	b0 01                	mov    al,0x1
c0015d75:	81 c4 2c 01 00 00    	add    esp,0x12c
c0015d7b:	5b                   	pop    ebx
c0015d7c:	5e                   	pop    esi
c0015d7d:	5f                   	pop    edi
c0015d7e:	5d                   	pop    ebp
c0015d7f:	c3                   	ret    

c0015d80 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0015d80:	57                   	push   edi
c0015d81:	56                   	push   esi
c0015d82:	53                   	push   ebx
c0015d83:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0015d89:	8b b4 24 2c 01 00 00 	mov    esi,DWORD PTR [esp+0x12c]
c0015d90:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0015d97:	53                   	push   ebx
c0015d98:	e8 53 a9 fe ff       	call   c00006f0 <strlen>
c0015d9d:	89 34 24             	mov    DWORD PTR [esp],esi
c0015da0:	89 c7                	mov    edi,eax
c0015da2:	e8 49 a9 fe ff       	call   c00006f0 <strlen>
c0015da7:	83 c4 10             	add    esp,0x10
c0015daa:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0015dae:	31 ff                	xor    edi,edi
c0015db0:	3d ff 00 00 00       	cmp    eax,0xff
c0015db5:	0f 87 18 01 00 00    	ja     c0015ed3 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x153>
c0015dbb:	51                   	push   ecx
c0015dbc:	51                   	push   ecx
c0015dbd:	56                   	push   esi
c0015dbe:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0015dc2:	56                   	push   esi
c0015dc3:	e8 aa a9 fe ff       	call   c0000772 <strcpy>
c0015dc8:	58                   	pop    eax
c0015dc9:	5a                   	pop    edx
c0015dca:	68 54 2a 02 c0       	push   0xc0022a54
c0015dcf:	56                   	push   esi
c0015dd0:	e8 54 aa fe ff       	call   c0000829 <strcat>
c0015dd5:	59                   	pop    ecx
c0015dd6:	58                   	pop    eax
c0015dd7:	53                   	push   ebx
c0015dd8:	56                   	push   esi
c0015dd9:	e8 4b aa fe ff       	call   c0000829 <strcat>
c0015dde:	58                   	pop    eax
c0015ddf:	5a                   	pop    edx
c0015de0:	68 82 26 02 c0       	push   0xc0022682
c0015de5:	56                   	push   esi
c0015de6:	e8 3e aa fe ff       	call   c0000829 <strcat>
c0015deb:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0015df2:	e8 41 92 ff ff       	call   c000f038 <operator new(unsigned long)>
c0015df7:	83 c4 0c             	add    esp,0xc
c0015dfa:	89 c3                	mov    ebx,eax
c0015dfc:	ff 35 d4 57 02 c0    	push   DWORD PTR ds:0xc00257d4
c0015e02:	56                   	push   esi
c0015e03:	50                   	push   eax
c0015e04:	e8 4d 98 ff ff       	call   c000f656 <File::File(char const*, Process*)>
c0015e09:	59                   	pop    ecx
c0015e0a:	5e                   	pop    esi
c0015e0b:	6a 01                	push   0x1
c0015e0d:	53                   	push   ebx
c0015e0e:	e8 a7 98 ff ff       	call   c000f6ba <File::open(FileOpenMode)>
c0015e13:	83 c4 10             	add    esp,0x10
c0015e16:	85 c0                	test   eax,eax
c0015e18:	74 08                	je     c0015e22 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa2>
c0015e1a:	83 ec 0c             	sub    esp,0xc
c0015e1d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015e1f:	53                   	push   ebx
c0015e20:	eb 2e                	jmp    c0015e50 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xd0>
c0015e22:	52                   	push   edx
c0015e23:	8d 44 24 07          	lea    eax,[esp+0x7]
c0015e27:	50                   	push   eax
c0015e28:	8d 44 24 10          	lea    eax,[esp+0x10]
c0015e2c:	50                   	push   eax
c0015e2d:	53                   	push   ebx
c0015e2e:	e8 33 9b ff ff       	call   c000f966 <File::stat(unsigned long long*, bool*)>
c0015e33:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015e37:	83 c4 10             	add    esp,0x10
c0015e3a:	89 c1                	mov    ecx,eax
c0015e3c:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c0015e40:	75 13                	jne    c0015e55 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xd5>
c0015e42:	83 ec 0c             	sub    esp,0xc
c0015e45:	53                   	push   ebx
c0015e46:	e8 cd 98 ff ff       	call   c000f718 <File::close()>
c0015e4b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015e4d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015e50:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015e53:	eb 7b                	jmp    c0015ed0 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x150>
c0015e55:	83 ec 0c             	sub    esp,0xc
c0015e58:	50                   	push   eax
c0015e59:	e8 d8 61 ff ff       	call   c000c036 <malloc>
c0015e5e:	89 c6                	mov    esi,eax
c0015e60:	58                   	pop    eax
c0015e61:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015e63:	8d 54 24 10          	lea    edx,[esp+0x10]
c0015e67:	52                   	push   edx
c0015e68:	56                   	push   esi
c0015e69:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015e6d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015e71:	53                   	push   ebx
c0015e72:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015e75:	83 c4 20             	add    esp,0x20
c0015e78:	85 c0                	test   eax,eax
c0015e7a:	75 0a                	jne    c0015e86 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0015e7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015e80:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0015e84:	74 18                	je     c0015e9e <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x11e>
c0015e86:	83 ec 0c             	sub    esp,0xc
c0015e89:	31 ff                	xor    edi,edi
c0015e8b:	53                   	push   ebx
c0015e8c:	e8 87 98 ff ff       	call   c000f718 <File::close()>
c0015e91:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015e93:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015e96:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015e99:	83 c4 10             	add    esp,0x10
c0015e9c:	eb 35                	jmp    c0015ed3 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x153>
c0015e9e:	83 ec 0c             	sub    esp,0xc
c0015ea1:	53                   	push   ebx
c0015ea2:	e8 71 98 ff ff       	call   c000f718 <File::close()>
c0015ea7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015ea9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015eac:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015eaf:	83 c4 0c             	add    esp,0xc
c0015eb2:	ff b4 24 30 01 00 00 	push   DWORD PTR [esp+0x130]
c0015eb9:	ff b4 24 30 01 00 00 	push   DWORD PTR [esp+0x130]
c0015ec0:	56                   	push   esi
c0015ec1:	e8 62 fd ff ff       	call   c0015c28 <Reg::findLineFromLoadedData(char*, char*, char*)>
c0015ec6:	89 34 24             	mov    DWORD PTR [esp],esi
c0015ec9:	89 c7                	mov    edi,eax
c0015ecb:	e8 76 61 ff ff       	call   c000c046 <free>
c0015ed0:	83 c4 10             	add    esp,0x10
c0015ed3:	81 c4 10 01 00 00    	add    esp,0x110
c0015ed9:	89 f8                	mov    eax,edi
c0015edb:	5b                   	pop    ebx
c0015edc:	5e                   	pop    esi
c0015edd:	5f                   	pop    edi
c0015ede:	c3                   	ret    

c0015edf <Reg::getLine(char*, char*, char*)>:
c0015edf:	57                   	push   edi
c0015ee0:	56                   	push   esi
c0015ee1:	53                   	push   ebx
c0015ee2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015ee6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0015eea:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0015eee:	57                   	push   edi
c0015eef:	56                   	push   esi
c0015ef0:	53                   	push   ebx
c0015ef1:	68 87 26 02 c0       	push   0xc0022687
c0015ef6:	e8 85 fe ff ff       	call   c0015d80 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0015efb:	83 c4 10             	add    esp,0x10
c0015efe:	84 c0                	test   al,al
c0015f00:	75 10                	jne    c0015f12 <Reg::getLine(char*, char*, char*)+0x33>
c0015f02:	57                   	push   edi
c0015f03:	56                   	push   esi
c0015f04:	53                   	push   ebx
c0015f05:	68 ac 26 02 c0       	push   0xc00226ac
c0015f0a:	e8 71 fe ff ff       	call   c0015d80 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0015f0f:	83 c4 10             	add    esp,0x10
c0015f12:	5b                   	pop    ebx
c0015f13:	5e                   	pop    esi
c0015f14:	5f                   	pop    edi
c0015f15:	c3                   	ret    

c0015f16 <Reg::readInt(char*, char*, int*)>:
c0015f16:	55                   	push   ebp
c0015f17:	57                   	push   edi
c0015f18:	56                   	push   esi
c0015f19:	53                   	push   ebx
c0015f1a:	81 ec f0 00 00 00    	sub    esp,0xf0
c0015f20:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0015f24:	57                   	push   edi
c0015f25:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0015f2c:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0015f33:	e8 a7 ff ff ff       	call   c0015edf <Reg::getLine(char*, char*, char*)>
c0015f38:	83 c4 10             	add    esp,0x10
c0015f3b:	84 c0                	test   al,al
c0015f3d:	0f 84 b3 00 00 00    	je     c0015ff6 <Reg::readInt(char*, char*, int*)+0xe0>
c0015f43:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0015f47:	80 fa 2b             	cmp    dl,0x2b
c0015f4a:	74 0c                	je     c0015f58 <Reg::readInt(char*, char*, int*)+0x42>
c0015f4c:	80 fa 2d             	cmp    dl,0x2d
c0015f4f:	75 0e                	jne    c0015f5f <Reg::readInt(char*, char*, int*)+0x49>
c0015f51:	ba 01 00 00 00       	mov    edx,0x1
c0015f56:	eb 0b                	jmp    c0015f63 <Reg::readInt(char*, char*, int*)+0x4d>
c0015f58:	ba 01 00 00 00       	mov    edx,0x1
c0015f5d:	eb 02                	jmp    c0015f61 <Reg::readInt(char*, char*, int*)+0x4b>
c0015f5f:	31 d2                	xor    edx,edx
c0015f61:	31 c0                	xor    eax,eax
c0015f63:	be 0a 00 00 00       	mov    esi,0xa
c0015f68:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0015f6d:	75 20                	jne    c0015f8f <Reg::readInt(char*, char*, int*)+0x79>
c0015f6f:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c0015f73:	80 f9 78             	cmp    cl,0x78
c0015f76:	75 0a                	jne    c0015f82 <Reg::readInt(char*, char*, int*)+0x6c>
c0015f78:	83 c2 02             	add    edx,0x2
c0015f7b:	be 10 00 00 00       	mov    esi,0x10
c0015f80:	eb 0d                	jmp    c0015f8f <Reg::readInt(char*, char*, int*)+0x79>
c0015f82:	80 f9 62             	cmp    cl,0x62
c0015f85:	75 08                	jne    c0015f8f <Reg::readInt(char*, char*, int*)+0x79>
c0015f87:	83 c2 02             	add    edx,0x2
c0015f8a:	be 02 00 00 00       	mov    esi,0x2
c0015f8f:	01 d7                	add    edi,edx
c0015f91:	31 d2                	xor    edx,edx
c0015f93:	8a 1f                	mov    bl,BYTE PTR [edi]
c0015f95:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c0015f99:	80 fb 0d             	cmp    bl,0xd
c0015f9c:	0f 94 c3             	sete   bl
c0015f9f:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0015fa4:	0f 94 c1             	sete   cl
c0015fa7:	08 cb                	or     bl,cl
c0015fa9:	75 3a                	jne    c0015fe5 <Reg::readInt(char*, char*, int*)+0xcf>
c0015fab:	0f af d6             	imul   edx,esi
c0015fae:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c0015fb3:	83 fe 10             	cmp    esi,0x10
c0015fb6:	75 26                	jne    c0015fde <Reg::readInt(char*, char*, int*)+0xc8>
c0015fb8:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0015fbc:	8d 69 bf             	lea    ebp,[ecx-0x41]
c0015fbf:	89 e9                	mov    ecx,ebp
c0015fc1:	80 f9 05             	cmp    cl,0x5
c0015fc4:	77 06                	ja     c0015fcc <Reg::readInt(char*, char*, int*)+0xb6>
c0015fc6:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c0015fca:	eb 16                	jmp    c0015fe2 <Reg::readInt(char*, char*, int*)+0xcc>
c0015fcc:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0015fd0:	83 e9 61             	sub    ecx,0x61
c0015fd3:	80 f9 05             	cmp    cl,0x5
c0015fd6:	77 06                	ja     c0015fde <Reg::readInt(char*, char*, int*)+0xc8>
c0015fd8:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c0015fdc:	eb 04                	jmp    c0015fe2 <Reg::readInt(char*, char*, int*)+0xcc>
c0015fde:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c0015fe2:	47                   	inc    edi
c0015fe3:	eb ae                	jmp    c0015f93 <Reg::readInt(char*, char*, int*)+0x7d>
c0015fe5:	84 c0                	test   al,al
c0015fe7:	74 02                	je     c0015feb <Reg::readInt(char*, char*, int*)+0xd5>
c0015fe9:	f7 da                	neg    edx
c0015feb:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0015ff2:	89 10                	mov    DWORD PTR [eax],edx
c0015ff4:	88 d8                	mov    al,bl
c0015ff6:	81 c4 ec 00 00 00    	add    esp,0xec
c0015ffc:	5b                   	pop    ebx
c0015ffd:	5e                   	pop    esi
c0015ffe:	5f                   	pop    edi
c0015fff:	5d                   	pop    ebp
c0016000:	c3                   	ret    

c0016001 <Reg::readString(char*, char*, char*, int)>:
c0016001:	57                   	push   edi
c0016002:	56                   	push   esi
c0016003:	53                   	push   ebx
c0016004:	81 ec d4 00 00 00    	sub    esp,0xd4
c001600a:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0016011:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0016015:	57                   	push   edi
c0016016:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001601d:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0016024:	e8 b6 fe ff ff       	call   c0015edf <Reg::getLine(char*, char*, char*)>
c0016029:	83 c4 10             	add    esp,0x10
c001602c:	89 c6                	mov    esi,eax
c001602e:	84 c0                	test   al,al
c0016030:	74 44                	je     c0016076 <Reg::readString(char*, char*, char*, int)+0x75>
c0016032:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0016039:	31 c0                	xor    eax,eax
c001603b:	4a                   	dec    edx
c001603c:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001603f:	84 c9                	test   cl,cl
c0016041:	74 0f                	je     c0016052 <Reg::readString(char*, char*, char*, int)+0x51>
c0016043:	39 c2                	cmp    edx,eax
c0016045:	7e 0b                	jle    c0016052 <Reg::readString(char*, char*, char*, int)+0x51>
c0016047:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001604a:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001604f:	40                   	inc    eax
c0016050:	eb ea                	jmp    c001603c <Reg::readString(char*, char*, char*, int)+0x3b>
c0016052:	83 ec 0c             	sub    esp,0xc
c0016055:	53                   	push   ebx
c0016056:	e8 95 a6 fe ff       	call   c00006f0 <strlen>
c001605b:	83 c4 10             	add    esp,0x10
c001605e:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0016063:	75 11                	jne    c0016076 <Reg::readString(char*, char*, char*, int)+0x75>
c0016065:	83 ec 0c             	sub    esp,0xc
c0016068:	53                   	push   ebx
c0016069:	e8 82 a6 fe ff       	call   c00006f0 <strlen>
c001606e:	83 c4 10             	add    esp,0x10
c0016071:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0016076:	81 c4 d0 00 00 00    	add    esp,0xd0
c001607c:	89 f0                	mov    eax,esi
c001607e:	5b                   	pop    ebx
c001607f:	5e                   	pop    esi
c0016080:	5f                   	pop    edi
c0016081:	c3                   	ret    

c0016082 <Reg::readBool(char*, char*, bool*)>:
c0016082:	83 ec 20             	sub    esp,0x20
c0016085:	8d 44 24 10          	lea    eax,[esp+0x10]
c0016089:	50                   	push   eax
c001608a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001608e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016092:	e8 7f fe ff ff       	call   c0015f16 <Reg::readInt(char*, char*, int*)>
c0016097:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001609c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00160a0:	0f 95 02             	setne  BYTE PTR [edx]
c00160a3:	83 c4 2c             	add    esp,0x2c
c00160a6:	c3                   	ret    

c00160a7 <Reg::readBoolWithDefault(char*, char*, bool)>:
c00160a7:	53                   	push   ebx
c00160a8:	83 ec 1c             	sub    esp,0x1c
c00160ab:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c00160af:	8d 44 24 13          	lea    eax,[esp+0x13]
c00160b3:	50                   	push   eax
c00160b4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00160b8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00160bc:	e8 c1 ff ff ff       	call   c0016082 <Reg::readBool(char*, char*, bool*)>
c00160c1:	83 c4 10             	add    esp,0x10
c00160c4:	84 c0                	test   al,al
c00160c6:	74 04                	je     c00160cc <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c00160c8:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c00160cc:	88 d8                	mov    al,bl
c00160ce:	83 c4 18             	add    esp,0x18
c00160d1:	5b                   	pop    ebx
c00160d2:	c3                   	ret    

c00160d3 <Reg::readIntWithDefault(char*, char*, int)>:
c00160d3:	53                   	push   ebx
c00160d4:	83 ec 1c             	sub    esp,0x1c
c00160d7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00160db:	8d 44 24 10          	lea    eax,[esp+0x10]
c00160df:	50                   	push   eax
c00160e0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00160e4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00160e8:	e8 29 fe ff ff       	call   c0015f16 <Reg::readInt(char*, char*, int*)>
c00160ed:	83 c4 10             	add    esp,0x10
c00160f0:	84 c0                	test   al,al
c00160f2:	74 04                	je     c00160f8 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c00160f4:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00160f8:	89 d8                	mov    eax,ebx
c00160fa:	83 c4 18             	add    esp,0x18
c00160fd:	5b                   	pop    ebx
c00160fe:	c3                   	ret    

c00160ff <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c00160ff:	56                   	push   esi
c0016100:	53                   	push   ebx
c0016101:	51                   	push   ecx
c0016102:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0016106:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001610a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001610e:	56                   	push   esi
c001610f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016113:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016117:	e8 e5 fe ff ff       	call   c0016001 <Reg::readString(char*, char*, char*, int)>
c001611c:	83 c4 10             	add    esp,0x10
c001611f:	84 c0                	test   al,al
c0016121:	74 02                	je     c0016125 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x26>
c0016123:	89 f3                	mov    ebx,esi
c0016125:	89 d8                	mov    eax,ebx
c0016127:	5a                   	pop    edx
c0016128:	5b                   	pop    ebx
c0016129:	5e                   	pop    esi
c001612a:	c3                   	ret    

c001612b <Sys::exit(regs*)>:
c001612b:	83 ec 18             	sub    esp,0x18
c001612e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016132:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0016135:	e8 20 31 00 00       	call   c001925a <terminateTask(int)>
c001613a:	83 c8 ff             	or     eax,0xffffffff
c001613d:	83 c4 1c             	add    esp,0x1c
c0016140:	89 c2                	mov    edx,eax
c0016142:	c3                   	ret    

c0016143 <Sys::loadDLL(regs*)>:
c0016143:	56                   	push   esi
c0016144:	53                   	push   ebx
c0016145:	31 d2                	xor    edx,edx
c0016147:	51                   	push   ecx
c0016148:	b8 01 00 00 00       	mov    eax,0x1
c001614d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016151:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0016155:	74 7d                	je     c00161d4 <Sys::loadDLL(regs*)+0x91>
c0016157:	83 ec 0c             	sub    esp,0xc
c001615a:	68 14 01 00 00       	push   0x114
c001615f:	e8 d4 8e ff ff       	call   c000f038 <operator new(unsigned long)>
c0016164:	83 c4 0c             	add    esp,0xc
c0016167:	89 c3                	mov    ebx,eax
c0016169:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001616e:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0016171:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0016174:	53                   	push   ebx
c0016175:	e8 dc 94 ff ff       	call   c000f656 <File::File(char const*, Process*)>
c001617a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001617d:	e8 a6 97 ff ff       	call   c000f928 <File::exists()>
c0016182:	83 c4 10             	add    esp,0x10
c0016185:	84 c0                	test   al,al
c0016187:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016189:	75 11                	jne    c001619c <Sys::loadDLL(regs*)+0x59>
c001618b:	83 ec 0c             	sub    esp,0xc
c001618e:	53                   	push   ebx
c001618f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016192:	83 c4 10             	add    esp,0x10
c0016195:	b8 03 00 00 00       	mov    eax,0x3
c001619a:	eb 36                	jmp    c00161d2 <Sys::loadDLL(regs*)+0x8f>
c001619c:	83 ec 0c             	sub    esp,0xc
c001619f:	53                   	push   ebx
c00161a0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00161a3:	58                   	pop    eax
c00161a4:	5a                   	pop    edx
c00161a5:	6a 00                	push   0x0
c00161a7:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00161aa:	e8 c4 20 00 00       	call   c0018273 <Thr::loadDLL(char const*, bool)>
c00161af:	83 c4 10             	add    esp,0x10
c00161b2:	89 c1                	mov    ecx,eax
c00161b4:	31 d2                	xor    edx,edx
c00161b6:	b8 04 00 00 00       	mov    eax,0x4
c00161bb:	85 c9                	test   ecx,ecx
c00161bd:	74 15                	je     c00161d4 <Sys::loadDLL(regs*)+0x91>
c00161bf:	53                   	push   ebx
c00161c0:	53                   	push   ebx
c00161c1:	ff 35 88 43 02 c0    	push   DWORD PTR ds:0xc0024388
c00161c7:	51                   	push   ecx
c00161c8:	e8 6c 22 00 00       	call   c0018439 <Thr::executeDLL(unsigned long, void*)>
c00161cd:	83 c4 10             	add    esp,0x10
c00161d0:	31 c0                	xor    eax,eax
c00161d2:	31 d2                	xor    edx,edx
c00161d4:	59                   	pop    ecx
c00161d5:	5b                   	pop    ebx
c00161d6:	5e                   	pop    esi
c00161d7:	c3                   	ret    

c00161d8 <Sys::read(regs*)>:
c00161d8:	57                   	push   edi
c00161d9:	56                   	push   esi
c00161da:	53                   	push   ebx
c00161db:	83 ec 10             	sub    esp,0x10
c00161de:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00161e2:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00161e5:	83 f8 02             	cmp    eax,0x2
c00161e8:	77 10                	ja     c00161fa <Sys::read(regs*)+0x22>
c00161ea:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00161ef:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00161f2:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c00161f8:	eb 0e                	jmp    c0016208 <Sys::read(regs*)+0x30>
c00161fa:	83 ec 0c             	sub    esp,0xc
c00161fd:	50                   	push   eax
c00161fe:	e8 fc 7d ff ff       	call   c000dfff <getFromFileDescriptor(int)>
c0016203:	83 c4 10             	add    esp,0x10
c0016206:	89 c1                	mov    ecx,eax
c0016208:	83 c8 ff             	or     eax,0xffffffff
c001620b:	85 c9                	test   ecx,ecx
c001620d:	89 c2                	mov    edx,eax
c001620f:	74 28                	je     c0016239 <Sys::read(regs*)+0x61>
c0016211:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0016219:	31 ff                	xor    edi,edi
c001621b:	83 ec 0c             	sub    esp,0xc
c001621e:	8b 01                	mov    eax,DWORD PTR [ecx]
c0016220:	8d 54 24 18          	lea    edx,[esp+0x18]
c0016224:	52                   	push   edx
c0016225:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016228:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001622b:	57                   	push   edi
c001622c:	56                   	push   esi
c001622d:	51                   	push   ecx
c001622e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016231:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016235:	83 c4 20             	add    esp,0x20
c0016238:	99                   	cdq    
c0016239:	83 c4 10             	add    esp,0x10
c001623c:	5b                   	pop    ebx
c001623d:	5e                   	pop    esi
c001623e:	5f                   	pop    edi
c001623f:	c3                   	ret    

c0016240 <Sys::sbrk(regs*)>:
c0016240:	56                   	push   esi
c0016241:	53                   	push   ebx
c0016242:	50                   	push   eax
c0016243:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016248:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001624c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001624f:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0016252:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c0016258:	85 db                	test   ebx,ebx
c001625a:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001625d:	74 02                	je     c0016261 <Sys::sbrk(regs*)+0x21>
c001625f:	79 06                	jns    c0016267 <Sys::sbrk(regs*)+0x27>
c0016261:	89 f0                	mov    eax,esi
c0016263:	31 d2                	xor    edx,edx
c0016265:	eb 2a                	jmp    c0016291 <Sys::sbrk(regs*)+0x51>
c0016267:	83 c8 ff             	or     eax,0xffffffff
c001626a:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0016270:	89 c2                	mov    edx,eax
c0016272:	77 1d                	ja     c0016291 <Sys::sbrk(regs*)+0x51>
c0016274:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001627a:	50                   	push   eax
c001627b:	c1 ea 0c             	shr    edx,0xc
c001627e:	68 07 04 00 00       	push   0x407
c0016283:	52                   	push   edx
c0016284:	51                   	push   ecx
c0016285:	e8 9e 86 ff ff       	call   c000e928 <VAS::allocatePages(int, int)>
c001628a:	89 f0                	mov    eax,esi
c001628c:	31 d2                	xor    edx,edx
c001628e:	83 c4 10             	add    esp,0x10
c0016291:	59                   	pop    ecx
c0016292:	5b                   	pop    ebx
c0016293:	5e                   	pop    esi
c0016294:	c3                   	ret    

c0016295 <Sys::write(regs*)>:
c0016295:	57                   	push   edi
c0016296:	56                   	push   esi
c0016297:	53                   	push   ebx
c0016298:	83 ec 10             	sub    esp,0x10
c001629b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001629f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00162a2:	83 f8 02             	cmp    eax,0x2
c00162a5:	77 10                	ja     c00162b7 <Sys::write(regs*)+0x22>
c00162a7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00162ac:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00162af:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c00162b5:	eb 0e                	jmp    c00162c5 <Sys::write(regs*)+0x30>
c00162b7:	83 ec 0c             	sub    esp,0xc
c00162ba:	50                   	push   eax
c00162bb:	e8 3f 7d ff ff       	call   c000dfff <getFromFileDescriptor(int)>
c00162c0:	83 c4 10             	add    esp,0x10
c00162c3:	89 c1                	mov    ecx,eax
c00162c5:	83 c8 ff             	or     eax,0xffffffff
c00162c8:	85 c9                	test   ecx,ecx
c00162ca:	89 c2                	mov    edx,eax
c00162cc:	74 28                	je     c00162f6 <Sys::write(regs*)+0x61>
c00162ce:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00162d6:	31 ff                	xor    edi,edi
c00162d8:	83 ec 0c             	sub    esp,0xc
c00162db:	8b 01                	mov    eax,DWORD PTR [ecx]
c00162dd:	8d 54 24 18          	lea    edx,[esp+0x18]
c00162e1:	52                   	push   edx
c00162e2:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00162e5:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00162e8:	57                   	push   edi
c00162e9:	56                   	push   esi
c00162ea:	51                   	push   ecx
c00162eb:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00162ee:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00162f2:	83 c4 20             	add    esp,0x20
c00162f5:	99                   	cdq    
c00162f6:	83 c4 10             	add    esp,0x10
c00162f9:	5b                   	pop    ebx
c00162fa:	5e                   	pop    esi
c00162fb:	5f                   	pop    edi
c00162fc:	c3                   	ret    

c00162fd <Sys::yield(regs*)>:
c00162fd:	83 ec 0c             	sub    esp,0xc
c0016300:	e8 3f 25 00 00       	call   c0018844 <lockScheduler()>
c0016305:	e8 6e 28 00 00       	call   c0018b78 <schedule()>
c001630a:	e8 37 25 00 00       	call   c0018846 <unlockScheduler()>
c001630f:	31 c0                	xor    eax,eax
c0016311:	31 d2                	xor    edx,edx
c0016313:	83 c4 0c             	add    esp,0xc
c0016316:	c3                   	ret    

c0016317 <sysCallGetPID(regs*)>:
c0016317:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001631c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001631f:	8b 00                	mov    eax,DWORD PTR [eax]
c0016321:	99                   	cdq    
c0016322:	c3                   	ret    

c0016323 <sysCallSeekDir(regs*)>:
c0016323:	31 c0                	xor    eax,eax
c0016325:	31 d2                	xor    edx,edx
c0016327:	c3                   	ret    

c0016328 <sysCallTellDir(regs*)>:
c0016328:	31 c0                	xor    eax,eax
c001632a:	31 d2                	xor    edx,edx
c001632c:	c3                   	ret    

c001632d <sysCallVerify(regs*)>:
c001632d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016331:	31 d2                	xor    edx,edx
c0016333:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0016336:	c3                   	ret    

c0016337 <sysCallFork(regs*)>:
c0016337:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001633c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016341:	c3                   	ret    

c0016342 <sysCallExecve(regs*)>:
c0016342:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016347:	ba ff ff ff ff       	mov    edx,0xffffffff
c001634c:	c3                   	ret    

c001634d <sysCallGetArgc(regs*)>:
c001634d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016352:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016355:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c001635b:	99                   	cdq    
c001635c:	c3                   	ret    

c001635d <sysFormatDisk(regs*)>:
c001635d:	56                   	push   esi
c001635e:	53                   	push   ebx
c001635f:	53                   	push   ebx
c0016360:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016364:	8b 1d e8 44 02 c0    	mov    ebx,DWORD PTR ds:0xc00244e8
c001636a:	eb 25                	jmp    c0016391 <sysFormatDisk(regs*)+0x34>
c001636c:	83 ec 0c             	sub    esp,0xc
c001636f:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0016372:	8b 13                	mov    edx,DWORD PTR [ebx]
c0016374:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0016377:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001637a:	50                   	push   eax
c001637b:	ff 34 85 80 49 02 c0 	push   DWORD PTR [eax*4-0x3ffdb680]
c0016382:	53                   	push   ebx
c0016383:	ff 52 48             	call   DWORD PTR [edx+0x48]
c0016386:	83 c4 20             	add    esp,0x20
c0016389:	83 f8 08             	cmp    eax,0x8
c001638c:	75 12                	jne    c00163a0 <sysFormatDisk(regs*)+0x43>
c001638e:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0016391:	85 db                	test   ebx,ebx
c0016393:	75 d7                	jne    c001636c <sysFormatDisk(regs*)+0xf>
c0016395:	59                   	pop    ecx
c0016396:	b8 03 00 00 00       	mov    eax,0x3
c001639b:	31 d2                	xor    edx,edx
c001639d:	5b                   	pop    ebx
c001639e:	5e                   	pop    esi
c001639f:	c3                   	ret    
c00163a0:	85 c0                	test   eax,eax
c00163a2:	74 1b                	je     c00163bf <sysFormatDisk(regs*)+0x62>
c00163a4:	83 f8 09             	cmp    eax,0x9
c00163a7:	74 0b                	je     c00163b4 <sysFormatDisk(regs*)+0x57>
c00163a9:	59                   	pop    ecx
c00163aa:	b8 02 00 00 00       	mov    eax,0x2
c00163af:	31 d2                	xor    edx,edx
c00163b1:	5b                   	pop    ebx
c00163b2:	5e                   	pop    esi
c00163b3:	c3                   	ret    
c00163b4:	59                   	pop    ecx
c00163b5:	b8 01 00 00 00       	mov    eax,0x1
c00163ba:	31 d2                	xor    edx,edx
c00163bc:	5b                   	pop    ebx
c00163bd:	5e                   	pop    esi
c00163be:	c3                   	ret    
c00163bf:	59                   	pop    ecx
c00163c0:	31 c0                	xor    eax,eax
c00163c2:	31 d2                	xor    edx,edx
c00163c4:	5b                   	pop    ebx
c00163c5:	5e                   	pop    esi
c00163c6:	c3                   	ret    

c00163c7 <sysSetDiskVolumeLabel(regs*)>:
c00163c7:	56                   	push   esi
c00163c8:	53                   	push   ebx
c00163c9:	53                   	push   ebx
c00163ca:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00163ce:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00163d1:	83 f8 19             	cmp    eax,0x19
c00163d4:	77 29                	ja     c00163ff <sysSetDiskVolumeLabel(regs*)+0x38>
c00163d6:	8b 0c 85 80 49 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdb680]
c00163dd:	85 c9                	test   ecx,ecx
c00163df:	74 1e                	je     c00163ff <sysSetDiskVolumeLabel(regs*)+0x38>
c00163e1:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00163e4:	85 d2                	test   edx,edx
c00163e6:	74 17                	je     c00163ff <sysSetDiskVolumeLabel(regs*)+0x38>
c00163e8:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c00163ee:	8b 33                	mov    esi,DWORD PTR [ebx]
c00163f0:	52                   	push   edx
c00163f1:	50                   	push   eax
c00163f2:	51                   	push   ecx
c00163f3:	53                   	push   ebx
c00163f4:	ff 56 58             	call   DWORD PTR [esi+0x58]
c00163f7:	83 c4 10             	add    esp,0x10
c00163fa:	99                   	cdq    
c00163fb:	59                   	pop    ecx
c00163fc:	5b                   	pop    ebx
c00163fd:	5e                   	pop    esi
c00163fe:	c3                   	ret    
c00163ff:	59                   	pop    ecx
c0016400:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0016405:	ba ff ff ff ff       	mov    edx,0xffffffff
c001640a:	5b                   	pop    ebx
c001640b:	5e                   	pop    esi
c001640c:	c3                   	ret    

c001640d <sysGetDiskVolumeLabel(regs*)>:
c001640d:	57                   	push   edi
c001640e:	56                   	push   esi
c001640f:	53                   	push   ebx
c0016410:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016414:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0016417:	83 fa 19             	cmp    edx,0x19
c001641a:	77 34                	ja     c0016450 <sysGetDiskVolumeLabel(regs*)+0x43>
c001641c:	8b 0c 95 80 49 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffdb680]
c0016423:	85 c9                	test   ecx,ecx
c0016425:	74 29                	je     c0016450 <sysGetDiskVolumeLabel(regs*)+0x43>
c0016427:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001642a:	85 db                	test   ebx,ebx
c001642c:	74 22                	je     c0016450 <sysGetDiskVolumeLabel(regs*)+0x43>
c001642e:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0016431:	85 c0                	test   eax,eax
c0016433:	74 1b                	je     c0016450 <sysGetDiskVolumeLabel(regs*)+0x43>
c0016435:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001643b:	83 ec 0c             	sub    esp,0xc
c001643e:	8b 3e                	mov    edi,DWORD PTR [esi]
c0016440:	50                   	push   eax
c0016441:	53                   	push   ebx
c0016442:	52                   	push   edx
c0016443:	51                   	push   ecx
c0016444:	56                   	push   esi
c0016445:	ff 57 54             	call   DWORD PTR [edi+0x54]
c0016448:	83 c4 20             	add    esp,0x20
c001644b:	99                   	cdq    
c001644c:	5b                   	pop    ebx
c001644d:	5e                   	pop    esi
c001644e:	5f                   	pop    edi
c001644f:	c3                   	ret    
c0016450:	5b                   	pop    ebx
c0016451:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0016456:	ba ff ff ff ff       	mov    edx,0xffffffff
c001645b:	5e                   	pop    esi
c001645c:	5f                   	pop    edi
c001645d:	c3                   	ret    

c001645e <sysShutdown(regs*)>:
c001645e:	83 ec 0c             	sub    esp,0xc
c0016461:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016465:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0016468:	85 c0                	test   eax,eax
c001646a:	74 18                	je     c0016484 <sysShutdown(regs*)+0x26>
c001646c:	83 f8 01             	cmp    eax,0x1
c001646f:	74 38                	je     c00164a9 <sysShutdown(regs*)+0x4b>
c0016471:	83 f8 02             	cmp    eax,0x2
c0016474:	74 24                	je     c001649a <sysShutdown(regs*)+0x3c>
c0016476:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001647b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016480:	83 c4 0c             	add    esp,0xc
c0016483:	c3                   	ret    
c0016484:	a1 88 43 02 c0       	mov    eax,ds:0xc0024388
c0016489:	8b 10                	mov    edx,DWORD PTR [eax]
c001648b:	6a 00                	push   0x0
c001648d:	6a 00                	push   0x0
c001648f:	6a 00                	push   0x0
c0016491:	50                   	push   eax
c0016492:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0016495:	83 c4 10             	add    esp,0x10
c0016498:	eb dc                	jmp    c0016476 <sysShutdown(regs*)+0x18>
c001649a:	a1 88 43 02 c0       	mov    eax,ds:0xc0024388
c001649f:	8b 10                	mov    edx,DWORD PTR [eax]
c00164a1:	6a 00                	push   0x0
c00164a3:	6a 00                	push   0x0
c00164a5:	6a 01                	push   0x1
c00164a7:	eb e8                	jmp    c0016491 <sysShutdown(regs*)+0x33>
c00164a9:	a1 00 4a 02 c0       	mov    eax,ds:0xc0024a00
c00164ae:	85 c0                	test   eax,eax
c00164b0:	74 02                	je     c00164b4 <sysShutdown(regs*)+0x56>
c00164b2:	ff d0                	call   eax
c00164b4:	31 c0                	xor    eax,eax
c00164b6:	31 d2                	xor    edx,edx
c00164b8:	83 c4 0c             	add    esp,0xc
c00164bb:	c3                   	ret    

c00164bc <sysCallGetCwd(regs*)>:
c00164bc:	83 ec 10             	sub    esp,0x10
c00164bf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00164c3:	ff 70 28             	push   DWORD PTR [eax+0x28]
c00164c6:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00164c9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00164ce:	ff 70 40             	push   DWORD PTR [eax+0x40]
c00164d1:	e8 f1 94 ff ff       	call   c000f9c7 <getcwd(Process*, char*, int)>
c00164d6:	83 c4 1c             	add    esp,0x1c
c00164d9:	99                   	cdq    
c00164da:	c3                   	ret    

c00164db <sysCallSetCwd(regs*)>:
c00164db:	83 ec 14             	sub    esp,0x14
c00164de:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00164e2:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00164e5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00164ea:	ff 70 40             	push   DWORD PTR [eax+0x40]
c00164ed:	e8 ff 94 ff ff       	call   c000f9f1 <setcwd(Process*, char*)>
c00164f2:	83 c4 1c             	add    esp,0x1c
c00164f5:	99                   	cdq    
c00164f6:	c3                   	ret    

c00164f7 <sysCallRealpath(regs*)>:
c00164f7:	83 ec 0c             	sub    esp,0xc
c00164fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164fe:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0016501:	85 d2                	test   edx,edx
c0016503:	74 07                	je     c001650c <sysCallRealpath(regs*)+0x15>
c0016505:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0016508:	85 c0                	test   eax,eax
c001650a:	75 0b                	jne    c0016517 <sysCallRealpath(regs*)+0x20>
c001650c:	b8 01 00 00 00       	mov    eax,0x1
c0016511:	31 d2                	xor    edx,edx
c0016513:	83 c4 0c             	add    esp,0xc
c0016516:	c3                   	ret    
c0016517:	51                   	push   ecx
c0016518:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001651e:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c0016521:	81 c1 0c 01 00 00    	add    ecx,0x10c
c0016527:	51                   	push   ecx
c0016528:	52                   	push   edx
c0016529:	50                   	push   eax
c001652a:	e8 7d 8f ff ff       	call   c000f4ac <standardiseFiles(char*, char const*, char const*)>
c001652f:	83 c4 10             	add    esp,0x10
c0016532:	31 c0                	xor    eax,eax
c0016534:	31 d2                	xor    edx,edx
c0016536:	83 c4 0c             	add    esp,0xc
c0016539:	c3                   	ret    

c001653a <sysCallReadDir(regs*)>:
c001653a:	53                   	push   ebx
c001653b:	83 ec 18             	sub    esp,0x18
c001653e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0016542:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0016545:	83 f8 02             	cmp    eax,0x2
c0016548:	76 53                	jbe    c001659d <sysCallReadDir(regs*)+0x63>
c001654a:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001654d:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c0016553:	77 4f                	ja     c00165a4 <sysCallReadDir(regs*)+0x6a>
c0016555:	83 ec 0c             	sub    esp,0xc
c0016558:	50                   	push   eax
c0016559:	e8 a1 7a ff ff       	call   c000dfff <getFromFileDescriptor(int)>
c001655e:	83 c4 10             	add    esp,0x10
c0016561:	85 c0                	test   eax,eax
c0016563:	74 50                	je     c00165b5 <sysCallReadDir(regs*)+0x7b>
c0016565:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001656d:	83 ec 0c             	sub    esp,0xc
c0016570:	8b 10                	mov    edx,DWORD PTR [eax]
c0016572:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0016576:	51                   	push   ecx
c0016577:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001657a:	6a 00                	push   0x0
c001657c:	68 10 01 00 00       	push   0x110
c0016581:	50                   	push   eax
c0016582:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0016585:	83 c4 20             	add    esp,0x20
c0016588:	85 c0                	test   eax,eax
c001658a:	74 38                	je     c00165c4 <sysCallReadDir(regs*)+0x8a>
c001658c:	83 f8 07             	cmp    eax,0x7
c001658f:	74 0c                	je     c001659d <sysCallReadDir(regs*)+0x63>
c0016591:	b8 02 00 00 00       	mov    eax,0x2
c0016596:	31 d2                	xor    edx,edx
c0016598:	83 c4 18             	add    esp,0x18
c001659b:	5b                   	pop    ebx
c001659c:	c3                   	ret    
c001659d:	b8 01 00 00 00       	mov    eax,0x1
c00165a2:	eb f2                	jmp    c0016596 <sysCallReadDir(regs*)+0x5c>
c00165a4:	83 ec 08             	sub    esp,0x8
c00165a7:	52                   	push   edx
c00165a8:	68 c8 26 02 c0       	push   0xc00226c8
c00165ad:	e8 75 8b ff ff       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c00165b2:	83 c4 10             	add    esp,0x10
c00165b5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00165ba:	ba ff ff ff ff       	mov    edx,0xffffffff
c00165bf:	83 c4 18             	add    esp,0x18
c00165c2:	5b                   	pop    ebx
c00165c3:	c3                   	ret    
c00165c4:	31 c0                	xor    eax,eax
c00165c6:	eb ce                	jmp    c0016596 <sysCallReadDir(regs*)+0x5c>

c00165c8 <sysCallIsATTY(regs*)>:
c00165c8:	83 ec 0c             	sub    esp,0xc
c00165cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00165cf:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00165d2:	83 f8 02             	cmp    eax,0x2
c00165d5:	76 07                	jbe    c00165de <sysCallIsATTY(regs*)+0x16>
c00165d7:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00165dc:	75 26                	jne    c0016604 <sysCallIsATTY(regs*)+0x3c>
c00165de:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00165e3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00165e6:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00165ec:	85 c0                	test   eax,eax
c00165ee:	74 24                	je     c0016614 <sysCallIsATTY(regs*)+0x4c>
c00165f0:	83 ec 0c             	sub    esp,0xc
c00165f3:	8b 10                	mov    edx,DWORD PTR [eax]
c00165f5:	50                   	push   eax
c00165f6:	ff 12                	call   DWORD PTR [edx]
c00165f8:	31 d2                	xor    edx,edx
c00165fa:	0f b6 c0             	movzx  eax,al
c00165fd:	83 c4 10             	add    esp,0x10
c0016600:	83 c4 0c             	add    esp,0xc
c0016603:	c3                   	ret    
c0016604:	83 ec 0c             	sub    esp,0xc
c0016607:	50                   	push   eax
c0016608:	e8 f2 79 ff ff       	call   c000dfff <getFromFileDescriptor(int)>
c001660d:	83 c4 10             	add    esp,0x10
c0016610:	85 c0                	test   eax,eax
c0016612:	75 dc                	jne    c00165f0 <sysCallIsATTY(regs*)+0x28>
c0016614:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016619:	ba ff ff ff ff       	mov    edx,0xffffffff
c001661e:	83 c4 0c             	add    esp,0xc
c0016621:	c3                   	ret    

c0016622 <sysCallSeek(regs*)>:
c0016622:	53                   	push   ebx
c0016623:	83 ec 08             	sub    esp,0x8
c0016626:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001662a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001662d:	83 f8 02             	cmp    eax,0x2
c0016630:	76 4a                	jbe    c001667c <sysCallSeek(regs*)+0x5a>
c0016632:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0016637:	77 32                	ja     c001666b <sysCallSeek(regs*)+0x49>
c0016639:	83 ec 0c             	sub    esp,0xc
c001663c:	50                   	push   eax
c001663d:	e8 bd 79 ff ff       	call   c000dfff <getFromFileDescriptor(int)>
c0016642:	83 c4 0c             	add    esp,0xc
c0016645:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0016648:	31 db                	xor    ebx,ebx
c001664a:	53                   	push   ebx
c001664b:	51                   	push   ecx
c001664c:	50                   	push   eax
c001664d:	e8 26 91 ff ff       	call   c000f778 <File::seek(unsigned long long)>
c0016652:	83 c4 10             	add    esp,0x10
c0016655:	85 c0                	test   eax,eax
c0016657:	0f 95 c0             	setne  al
c001665a:	31 d2                	xor    edx,edx
c001665c:	0f b6 c0             	movzx  eax,al
c001665f:	f7 d8                	neg    eax
c0016661:	83 d2 00             	adc    edx,0x0
c0016664:	83 c4 08             	add    esp,0x8
c0016667:	f7 da                	neg    edx
c0016669:	5b                   	pop    ebx
c001666a:	c3                   	ret    
c001666b:	83 ec 08             	sub    esp,0x8
c001666e:	50                   	push   eax
c001666f:	68 84 27 02 c0       	push   0xc0022784
c0016674:	e8 ae 8a ff ff       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c0016679:	83 c4 10             	add    esp,0x10
c001667c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016681:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016686:	83 c4 08             	add    esp,0x8
c0016689:	5b                   	pop    ebx
c001668a:	c3                   	ret    

c001668b <sysCallTell(regs*)>:
c001668b:	53                   	push   ebx
c001668c:	83 ec 08             	sub    esp,0x8
c001668f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016693:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016696:	83 f8 02             	cmp    eax,0x2
c0016699:	76 5e                	jbe    c00166f9 <sysCallTell(regs*)+0x6e>
c001669b:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00166a0:	77 2d                	ja     c00166cf <sysCallTell(regs*)+0x44>
c00166a2:	83 ec 0c             	sub    esp,0xc
c00166a5:	50                   	push   eax
c00166a6:	e8 54 79 ff ff       	call   c000dfff <getFromFileDescriptor(int)>
c00166ab:	5a                   	pop    edx
c00166ac:	59                   	pop    ecx
c00166ad:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00166b0:	50                   	push   eax
c00166b1:	e8 18 91 ff ff       	call   c000f7ce <File::tell(unsigned long long*)>
c00166b6:	83 c4 10             	add    esp,0x10
c00166b9:	85 c0                	test   eax,eax
c00166bb:	0f 95 c0             	setne  al
c00166be:	31 d2                	xor    edx,edx
c00166c0:	0f b6 c0             	movzx  eax,al
c00166c3:	f7 d8                	neg    eax
c00166c5:	83 d2 00             	adc    edx,0x0
c00166c8:	83 c4 08             	add    esp,0x8
c00166cb:	f7 da                	neg    edx
c00166cd:	5b                   	pop    ebx
c00166ce:	c3                   	ret    
c00166cf:	83 ec 08             	sub    esp,0x8
c00166d2:	50                   	push   eax
c00166d3:	68 9e 27 02 c0       	push   0xc002279e
c00166d8:	e8 4a 8a ff ff       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c00166dd:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00166e0:	83 c4 10             	add    esp,0x10
c00166e3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00166e9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00166f0:	31 d2                	xor    edx,edx
c00166f2:	31 c0                	xor    eax,eax
c00166f4:	83 c4 08             	add    esp,0x8
c00166f7:	5b                   	pop    ebx
c00166f8:	c3                   	ret    
c00166f9:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00166fe:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016703:	83 c4 08             	add    esp,0x8
c0016706:	5b                   	pop    ebx
c0016707:	c3                   	ret    

c0016708 <sysCallSizeFromFilename(regs*)>:
c0016708:	57                   	push   edi
c0016709:	56                   	push   esi
c001670a:	53                   	push   ebx
c001670b:	83 ec 10             	sub    esp,0x10
c001670e:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016712:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c0016715:	83 fb 02             	cmp    ebx,0x2
c0016718:	0f 86 8a 00 00 00    	jbe    c00167a8 <sysCallSizeFromFilename(regs*)+0xa0>
c001671e:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0016724:	77 56                	ja     c001677c <sysCallSizeFromFilename(regs*)+0x74>
c0016726:	83 ec 0c             	sub    esp,0xc
c0016729:	68 14 01 00 00       	push   0x114
c001672e:	e8 05 89 ff ff       	call   c000f038 <operator new(unsigned long)>
c0016733:	83 c4 0c             	add    esp,0xc
c0016736:	89 c7                	mov    edi,eax
c0016738:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001673d:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0016740:	53                   	push   ebx
c0016741:	57                   	push   edi
c0016742:	e8 0f 8f ff ff       	call   c000f656 <File::File(char const*, Process*)>
c0016747:	83 c4 0c             	add    esp,0xc
c001674a:	8d 44 24 13          	lea    eax,[esp+0x13]
c001674e:	50                   	push   eax
c001674f:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0016752:	57                   	push   edi
c0016753:	e8 0e 92 ff ff       	call   c000f966 <File::stat(unsigned long long*, bool*)>
c0016758:	89 3c 24             	mov    DWORD PTR [esp],edi
c001675b:	89 c3                	mov    ebx,eax
c001675d:	8b 07                	mov    eax,DWORD PTR [edi]
c001675f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016762:	83 c4 10             	add    esp,0x10
c0016765:	31 c0                	xor    eax,eax
c0016767:	85 db                	test   ebx,ebx
c0016769:	0f 95 c0             	setne  al
c001676c:	31 d2                	xor    edx,edx
c001676e:	f7 d8                	neg    eax
c0016770:	83 d2 00             	adc    edx,0x0
c0016773:	83 c4 10             	add    esp,0x10
c0016776:	f7 da                	neg    edx
c0016778:	5b                   	pop    ebx
c0016779:	5e                   	pop    esi
c001677a:	5f                   	pop    edi
c001677b:	c3                   	ret    
c001677c:	83 ec 08             	sub    esp,0x8
c001677f:	53                   	push   ebx
c0016780:	68 b8 27 02 c0       	push   0xc00227b8
c0016785:	e8 9d 89 ff ff       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c001678a:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001678d:	83 c4 10             	add    esp,0x10
c0016790:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0016796:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001679d:	31 d2                	xor    edx,edx
c001679f:	83 c4 10             	add    esp,0x10
c00167a2:	31 c0                	xor    eax,eax
c00167a4:	5b                   	pop    ebx
c00167a5:	5e                   	pop    esi
c00167a6:	5f                   	pop    edi
c00167a7:	c3                   	ret    
c00167a8:	83 c4 10             	add    esp,0x10
c00167ab:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00167b0:	5b                   	pop    ebx
c00167b1:	ba ff ff ff ff       	mov    edx,0xffffffff
c00167b6:	5e                   	pop    esi
c00167b7:	5f                   	pop    edi
c00167b8:	c3                   	ret    

c00167b9 <sysCallSize(regs*)>:
c00167b9:	53                   	push   ebx
c00167ba:	83 ec 18             	sub    esp,0x18
c00167bd:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00167c1:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00167c4:	83 f8 02             	cmp    eax,0x2
c00167c7:	76 64                	jbe    c001682d <sysCallSize(regs*)+0x74>
c00167c9:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00167ce:	77 33                	ja     c0016803 <sysCallSize(regs*)+0x4a>
c00167d0:	83 ec 0c             	sub    esp,0xc
c00167d3:	50                   	push   eax
c00167d4:	e8 26 78 ff ff       	call   c000dfff <getFromFileDescriptor(int)>
c00167d9:	83 c4 0c             	add    esp,0xc
c00167dc:	8d 54 24 13          	lea    edx,[esp+0x13]
c00167e0:	52                   	push   edx
c00167e1:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00167e4:	50                   	push   eax
c00167e5:	e8 7c 91 ff ff       	call   c000f966 <File::stat(unsigned long long*, bool*)>
c00167ea:	83 c4 10             	add    esp,0x10
c00167ed:	85 c0                	test   eax,eax
c00167ef:	0f 95 c0             	setne  al
c00167f2:	31 d2                	xor    edx,edx
c00167f4:	0f b6 c0             	movzx  eax,al
c00167f7:	f7 d8                	neg    eax
c00167f9:	83 d2 00             	adc    edx,0x0
c00167fc:	83 c4 18             	add    esp,0x18
c00167ff:	f7 da                	neg    edx
c0016801:	5b                   	pop    ebx
c0016802:	c3                   	ret    
c0016803:	83 ec 08             	sub    esp,0x8
c0016806:	50                   	push   eax
c0016807:	68 b8 27 02 c0       	push   0xc00227b8
c001680c:	e8 16 89 ff ff       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c0016811:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0016814:	83 c4 10             	add    esp,0x10
c0016817:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001681d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0016824:	31 d2                	xor    edx,edx
c0016826:	31 c0                	xor    eax,eax
c0016828:	83 c4 18             	add    esp,0x18
c001682b:	5b                   	pop    ebx
c001682c:	c3                   	ret    
c001682d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016832:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016837:	83 c4 18             	add    esp,0x18
c001683a:	5b                   	pop    ebx
c001683b:	c3                   	ret    

c001683c <sysCallClose(regs*)>:
c001683c:	53                   	push   ebx
c001683d:	83 ec 08             	sub    esp,0x8
c0016840:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016844:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0016847:	83 f8 02             	cmp    eax,0x2
c001684a:	76 50                	jbe    c001689c <sysCallClose(regs*)+0x60>
c001684c:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0016851:	74 58                	je     c00168ab <sysCallClose(regs*)+0x6f>
c0016853:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0016858:	74 60                	je     c00168ba <sysCallClose(regs*)+0x7e>
c001685a:	77 2f                	ja     c001688b <sysCallClose(regs*)+0x4f>
c001685c:	83 ec 0c             	sub    esp,0xc
c001685f:	50                   	push   eax
c0016860:	e8 9a 77 ff ff       	call   c000dfff <getFromFileDescriptor(int)>
c0016865:	89 c3                	mov    ebx,eax
c0016867:	89 04 24             	mov    DWORD PTR [esp],eax
c001686a:	e8 a9 8e ff ff       	call   c000f718 <File::close()>
c001686f:	83 c4 10             	add    esp,0x10
c0016872:	85 db                	test   ebx,ebx
c0016874:	74 0c                	je     c0016882 <sysCallClose(regs*)+0x46>
c0016876:	83 ec 0c             	sub    esp,0xc
c0016879:	8b 03                	mov    eax,DWORD PTR [ebx]
c001687b:	53                   	push   ebx
c001687c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001687f:	83 c4 10             	add    esp,0x10
c0016882:	31 c0                	xor    eax,eax
c0016884:	31 d2                	xor    edx,edx
c0016886:	83 c4 08             	add    esp,0x8
c0016889:	5b                   	pop    ebx
c001688a:	c3                   	ret    
c001688b:	83 ec 08             	sub    esp,0x8
c001688e:	50                   	push   eax
c001688f:	68 ec 26 02 c0       	push   0xc00226ec
c0016894:	e8 8e 88 ff ff       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c0016899:	83 c4 10             	add    esp,0x10
c001689c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00168a1:	ba ff ff ff ff       	mov    edx,0xffffffff
c00168a6:	83 c4 08             	add    esp,0x8
c00168a9:	5b                   	pop    ebx
c00168aa:	c3                   	ret    
c00168ab:	83 ec 0c             	sub    esp,0xc
c00168ae:	68 d3 27 02 c0       	push   0xc00227d3
c00168b3:	e8 6f 88 ff ff       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c00168b8:	eb c5                	jmp    c001687f <sysCallClose(regs*)+0x43>
c00168ba:	83 ec 0c             	sub    esp,0xc
c00168bd:	68 e1 27 02 c0       	push   0xc00227e1
c00168c2:	eb ef                	jmp    c00168b3 <sysCallClose(regs*)+0x77>

c00168c4 <sysCallOpenDir(regs*)>:
c00168c4:	56                   	push   esi
c00168c5:	53                   	push   ebx
c00168c6:	53                   	push   ebx
c00168c7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00168cb:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00168ce:	85 f6                	test   esi,esi
c00168d0:	74 51                	je     c0016923 <sysCallOpenDir(regs*)+0x5f>
c00168d2:	83 ec 0c             	sub    esp,0xc
c00168d5:	68 14 01 00 00       	push   0x114
c00168da:	e8 59 87 ff ff       	call   c000f038 <operator new(unsigned long)>
c00168df:	83 c4 0c             	add    esp,0xc
c00168e2:	89 c6                	mov    esi,eax
c00168e4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00168e9:	ff 70 40             	push   DWORD PTR [eax+0x40]
c00168ec:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00168ef:	56                   	push   esi
c00168f0:	e8 23 92 ff ff       	call   c000fb18 <Directory::Directory(char const*, Process*)>
c00168f5:	89 34 24             	mov    DWORD PTR [esp],esi
c00168f8:	e8 7f 92 ff ff       	call   c000fb7c <Directory::open()>
c00168fd:	83 c4 10             	add    esp,0x10
c0016900:	85 c0                	test   eax,eax
c0016902:	75 1f                	jne    c0016923 <sysCallOpenDir(regs*)+0x5f>
c0016904:	83 ec 0c             	sub    esp,0xc
c0016907:	56                   	push   esi
c0016908:	e8 3d 74 ff ff       	call   c000dd4a <UnixFile::getFileDescriptor()>
c001690d:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0016910:	83 c4 10             	add    esp,0x10
c0016913:	89 02                	mov    DWORD PTR [edx],eax
c0016915:	c1 f8 1f             	sar    eax,0x1f
c0016918:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001691b:	31 c0                	xor    eax,eax
c001691d:	59                   	pop    ecx
c001691e:	31 d2                	xor    edx,edx
c0016920:	5b                   	pop    ebx
c0016921:	5e                   	pop    esi
c0016922:	c3                   	ret    
c0016923:	59                   	pop    ecx
c0016924:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016929:	ba ff ff ff ff       	mov    edx,0xffffffff
c001692e:	5b                   	pop    ebx
c001692f:	5e                   	pop    esi
c0016930:	c3                   	ret    

c0016931 <sysCallMakeDir(regs*)>:
c0016931:	56                   	push   esi
c0016932:	53                   	push   ebx
c0016933:	83 ec 10             	sub    esp,0x10
c0016936:	68 14 01 00 00       	push   0x114
c001693b:	e8 f8 86 ff ff       	call   c000f038 <operator new(unsigned long)>
c0016940:	83 c4 0c             	add    esp,0xc
c0016943:	89 c3                	mov    ebx,eax
c0016945:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001694a:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001694d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016951:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0016954:	53                   	push   ebx
c0016955:	e8 be 91 ff ff       	call   c000fb18 <Directory::Directory(char const*, Process*)>
c001695a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001695d:	e8 fa 93 ff ff       	call   c000fd5c <Directory::create()>
c0016962:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016965:	89 c6                	mov    esi,eax
c0016967:	e8 6c 92 ff ff       	call   c000fbd8 <Directory::close()>
c001696c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001696e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016971:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016974:	31 c0                	xor    eax,eax
c0016976:	85 f6                	test   esi,esi
c0016978:	0f 95 c0             	setne  al
c001697b:	31 d2                	xor    edx,edx
c001697d:	f7 d8                	neg    eax
c001697f:	83 d2 00             	adc    edx,0x0
c0016982:	83 c4 14             	add    esp,0x14
c0016985:	f7 da                	neg    edx
c0016987:	5b                   	pop    ebx
c0016988:	5e                   	pop    esi
c0016989:	c3                   	ret    

c001698a <sysCallCloseDir(regs*)>:
c001698a:	53                   	push   ebx
c001698b:	83 ec 08             	sub    esp,0x8
c001698e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016992:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0016995:	83 f8 02             	cmp    eax,0x2
c0016998:	76 47                	jbe    c00169e1 <sysCallCloseDir(regs*)+0x57>
c001699a:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001699f:	77 2f                	ja     c00169d0 <sysCallCloseDir(regs*)+0x46>
c00169a1:	83 ec 0c             	sub    esp,0xc
c00169a4:	50                   	push   eax
c00169a5:	e8 55 76 ff ff       	call   c000dfff <getFromFileDescriptor(int)>
c00169aa:	89 c3                	mov    ebx,eax
c00169ac:	89 04 24             	mov    DWORD PTR [esp],eax
c00169af:	e8 24 92 ff ff       	call   c000fbd8 <Directory::close()>
c00169b4:	83 c4 10             	add    esp,0x10
c00169b7:	85 db                	test   ebx,ebx
c00169b9:	74 0c                	je     c00169c7 <sysCallCloseDir(regs*)+0x3d>
c00169bb:	83 ec 0c             	sub    esp,0xc
c00169be:	8b 03                	mov    eax,DWORD PTR [ebx]
c00169c0:	53                   	push   ebx
c00169c1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00169c4:	83 c4 10             	add    esp,0x10
c00169c7:	31 c0                	xor    eax,eax
c00169c9:	31 d2                	xor    edx,edx
c00169cb:	83 c4 08             	add    esp,0x8
c00169ce:	5b                   	pop    ebx
c00169cf:	c3                   	ret    
c00169d0:	83 ec 08             	sub    esp,0x8
c00169d3:	50                   	push   eax
c00169d4:	68 14 27 02 c0       	push   0xc0022714
c00169d9:	e8 49 87 ff ff       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c00169de:	83 c4 10             	add    esp,0x10
c00169e1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00169e6:	ba ff ff ff ff       	mov    edx,0xffffffff
c00169eb:	83 c4 08             	add    esp,0x8
c00169ee:	5b                   	pop    ebx
c00169ef:	c3                   	ret    

c00169f0 <sysCallWait(regs*)>:
c00169f0:	83 ec 10             	sub    esp,0x10
c00169f3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00169f7:	ff 70 28             	push   DWORD PTR [eax+0x28]
c00169fa:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00169fd:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0016a00:	e8 ee 22 00 00       	call   c0018cf3 <waitTask(int, int*, int)>
c0016a05:	83 c4 1c             	add    esp,0x1c
c0016a08:	99                   	cdq    
c0016a09:	c3                   	ret    

c0016a0a <sysCallRmdir(regs*)>:
c0016a0a:	56                   	push   esi
c0016a0b:	53                   	push   ebx
c0016a0c:	83 ec 10             	sub    esp,0x10
c0016a0f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016a13:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0016a16:	68 14 01 00 00       	push   0x114
c0016a1b:	e8 18 86 ff ff       	call   c000f038 <operator new(unsigned long)>
c0016a20:	83 c4 0c             	add    esp,0xc
c0016a23:	89 c3                	mov    ebx,eax
c0016a25:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016a2a:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0016a2d:	56                   	push   esi
c0016a2e:	53                   	push   ebx
c0016a2f:	e8 22 8c ff ff       	call   c000f656 <File::File(char const*, Process*)>
c0016a34:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016a37:	e8 f6 8d ff ff       	call   c000f832 <File::unlink()>
c0016a3c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016a3f:	89 c6                	mov    esi,eax
c0016a41:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016a43:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016a46:	31 c0                	xor    eax,eax
c0016a48:	85 f6                	test   esi,esi
c0016a4a:	0f 95 c0             	setne  al
c0016a4d:	31 d2                	xor    edx,edx
c0016a4f:	f7 d8                	neg    eax
c0016a51:	83 d2 00             	adc    edx,0x0
c0016a54:	83 c4 14             	add    esp,0x14
c0016a57:	f7 da                	neg    edx
c0016a59:	5b                   	pop    ebx
c0016a5a:	5e                   	pop    esi
c0016a5b:	c3                   	ret    

c0016a5c <sysCallUnlink(regs*)>:
c0016a5c:	56                   	push   esi
c0016a5d:	53                   	push   ebx
c0016a5e:	83 ec 10             	sub    esp,0x10
c0016a61:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016a65:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0016a68:	68 14 01 00 00       	push   0x114
c0016a6d:	e8 c6 85 ff ff       	call   c000f038 <operator new(unsigned long)>
c0016a72:	83 c4 0c             	add    esp,0xc
c0016a75:	89 c3                	mov    ebx,eax
c0016a77:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016a7c:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0016a7f:	56                   	push   esi
c0016a80:	53                   	push   ebx
c0016a81:	e8 d0 8b ff ff       	call   c000f656 <File::File(char const*, Process*)>
c0016a86:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016a89:	e8 a4 8d ff ff       	call   c000f832 <File::unlink()>
c0016a8e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016a91:	89 c6                	mov    esi,eax
c0016a93:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016a95:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016a98:	31 c0                	xor    eax,eax
c0016a9a:	85 f6                	test   esi,esi
c0016a9c:	0f 95 c0             	setne  al
c0016a9f:	31 d2                	xor    edx,edx
c0016aa1:	f7 d8                	neg    eax
c0016aa3:	83 d2 00             	adc    edx,0x0
c0016aa6:	83 c4 14             	add    esp,0x14
c0016aa9:	f7 da                	neg    edx
c0016aab:	5b                   	pop    ebx
c0016aac:	5e                   	pop    esi
c0016aad:	c3                   	ret    

c0016aae <sysCallGetArgv(regs*)>:
c0016aae:	83 ec 0c             	sub    esp,0xc
c0016ab1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016ab5:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0016ab8:	85 c0                	test   eax,eax
c0016aba:	78 2b                	js     c0016ae7 <sysCallGetArgv(regs*)+0x39>
c0016abc:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016ac2:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c0016ac5:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c0016acb:	7d 1a                	jge    c0016ae7 <sysCallGetArgv(regs*)+0x39>
c0016acd:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c0016ad4:	85 c0                	test   eax,eax
c0016ad6:	74 17                	je     c0016aef <sysCallGetArgv(regs*)+0x41>
c0016ad8:	83 ec 08             	sub    esp,0x8
c0016adb:	50                   	push   eax
c0016adc:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0016adf:	e8 8e 9c fe ff       	call   c0000772 <strcpy>
c0016ae4:	83 c4 10             	add    esp,0x10
c0016ae7:	31 c0                	xor    eax,eax
c0016ae9:	31 d2                	xor    edx,edx
c0016aeb:	83 c4 0c             	add    esp,0xc
c0016aee:	c3                   	ret    
c0016aef:	b8 01 00 00 00       	mov    eax,0x1
c0016af4:	31 d2                	xor    edx,edx
c0016af6:	83 c4 0c             	add    esp,0xc
c0016af9:	c3                   	ret    

c0016afa <sysCallTTYName(regs*)>:
c0016afa:	56                   	push   esi
c0016afb:	53                   	push   ebx
c0016afc:	53                   	push   ebx
c0016afd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016b01:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0016b04:	85 c0                	test   eax,eax
c0016b06:	74 5f                	je     c0016b67 <sysCallTTYName(regs*)+0x6d>
c0016b08:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0016b0b:	83 f8 02             	cmp    eax,0x2
c0016b0e:	77 3e                	ja     c0016b4e <sysCallTTYName(regs*)+0x54>
c0016b10:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016b15:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016b18:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0016b1e:	85 db                	test   ebx,ebx
c0016b20:	74 45                	je     c0016b67 <sysCallTTYName(regs*)+0x6d>
c0016b22:	83 ec 0c             	sub    esp,0xc
c0016b25:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016b27:	53                   	push   ebx
c0016b28:	ff 10                	call   DWORD PTR [eax]
c0016b2a:	83 c4 10             	add    esp,0x10
c0016b2d:	84 c0                	test   al,al
c0016b2f:	74 41                	je     c0016b72 <sysCallTTYName(regs*)+0x78>
c0016b31:	83 ec 08             	sub    esp,0x8
c0016b34:	81 c3 1e 10 00 00    	add    ebx,0x101e
c0016b3a:	53                   	push   ebx
c0016b3b:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0016b3e:	e8 2f 9c fe ff       	call   c0000772 <strcpy>
c0016b43:	83 c4 10             	add    esp,0x10
c0016b46:	31 c0                	xor    eax,eax
c0016b48:	59                   	pop    ecx
c0016b49:	31 d2                	xor    edx,edx
c0016b4b:	5b                   	pop    ebx
c0016b4c:	5e                   	pop    esi
c0016b4d:	c3                   	ret    
c0016b4e:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0016b53:	74 bb                	je     c0016b10 <sysCallTTYName(regs*)+0x16>
c0016b55:	83 ec 0c             	sub    esp,0xc
c0016b58:	50                   	push   eax
c0016b59:	e8 a1 74 ff ff       	call   c000dfff <getFromFileDescriptor(int)>
c0016b5e:	83 c4 10             	add    esp,0x10
c0016b61:	89 c3                	mov    ebx,eax
c0016b63:	85 db                	test   ebx,ebx
c0016b65:	75 bb                	jne    c0016b22 <sysCallTTYName(regs*)+0x28>
c0016b67:	59                   	pop    ecx
c0016b68:	b8 01 00 00 00       	mov    eax,0x1
c0016b6d:	31 d2                	xor    edx,edx
c0016b6f:	5b                   	pop    ebx
c0016b70:	5e                   	pop    esi
c0016b71:	c3                   	ret    
c0016b72:	59                   	pop    ecx
c0016b73:	b8 02 00 00 00       	mov    eax,0x2
c0016b78:	31 d2                	xor    edx,edx
c0016b7a:	5b                   	pop    ebx
c0016b7b:	5e                   	pop    esi
c0016b7c:	c3                   	ret    

c0016b7d <sysCallGetEnv(regs*)>:
c0016b7d:	83 ec 0c             	sub    esp,0xc
c0016b80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b84:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0016b87:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0016b8a:	85 c9                	test   ecx,ecx
c0016b8c:	75 22                	jne    c0016bb0 <sysCallGetEnv(regs*)+0x33>
c0016b8e:	85 d2                	test   edx,edx
c0016b90:	74 08                	je     c0016b9a <sysCallGetEnv(regs*)+0x1d>
c0016b92:	31 c0                	xor    eax,eax
c0016b94:	31 d2                	xor    edx,edx
c0016b96:	83 c4 0c             	add    esp,0xc
c0016b99:	c3                   	ret    
c0016b9a:	83 ec 0c             	sub    esp,0xc
c0016b9d:	68 38 27 02 c0       	push   0xc0022738
c0016ba2:	e8 49 9b fe ff       	call   c00006f0 <strlen>
c0016ba7:	83 c4 10             	add    esp,0x10
c0016baa:	31 d2                	xor    edx,edx
c0016bac:	83 c4 0c             	add    esp,0xc
c0016baf:	c3                   	ret    
c0016bb0:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0016bb3:	85 d2                	test   edx,edx
c0016bb5:	74 05                	je     c0016bbc <sysCallGetEnv(regs*)+0x3f>
c0016bb7:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0016bba:	eb d6                	jmp    c0016b92 <sysCallGetEnv(regs*)+0x15>
c0016bbc:	83 ec 08             	sub    esp,0x8
c0016bbf:	68 38 27 02 c0       	push   0xc0022738
c0016bc4:	50                   	push   eax
c0016bc5:	e8 a8 9b fe ff       	call   c0000772 <strcpy>
c0016bca:	83 c4 10             	add    esp,0x10
c0016bcd:	eb c3                	jmp    c0016b92 <sysCallGetEnv(regs*)+0x15>

c0016bcf <sysCallUSleep(regs*)>:
c0016bcf:	83 ec 14             	sub    esp,0x14
c0016bd2:	b8 e8 03 00 00       	mov    eax,0x3e8
c0016bd7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016bdb:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c0016be2:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c0016be5:	01 ca                	add    edx,ecx
c0016be7:	52                   	push   edx
c0016be8:	50                   	push   eax
c0016be9:	e8 9e 21 00 00       	call   c0018d8c <nanoSleep(unsigned long long)>
c0016bee:	31 c0                	xor    eax,eax
c0016bf0:	31 d2                	xor    edx,edx
c0016bf2:	83 c4 1c             	add    esp,0x1c
c0016bf5:	c3                   	ret    

c0016bf6 <sysCallSpawn(regs*)>:
c0016bf6:	56                   	push   esi
c0016bf7:	53                   	push   ebx
c0016bf8:	53                   	push   ebx
c0016bf9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016bfd:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0016c00:	85 f6                	test   esi,esi
c0016c02:	75 08                	jne    c0016c0c <sysCallSpawn(regs*)+0x16>
c0016c04:	59                   	pop    ecx
c0016c05:	31 c0                	xor    eax,eax
c0016c07:	31 d2                	xor    edx,edx
c0016c09:	5b                   	pop    ebx
c0016c0a:	5e                   	pop    esi
c0016c0b:	c3                   	ret    
c0016c0c:	83 ec 0c             	sub    esp,0xc
c0016c0f:	68 3b 07 00 00       	push   0x73b
c0016c14:	e8 1f 84 ff ff       	call   c000f038 <operator new(unsigned long)>
c0016c19:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0016c1c:	89 c6                	mov    esi,eax
c0016c1e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016c23:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0016c26:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016c29:	56                   	push   esi
c0016c2a:	e8 bd 18 00 00       	call   c00184ec <Process::Process(char const*, Process*, char**)>
c0016c2f:	83 c4 20             	add    esp,0x20
c0016c32:	80 be 3a 07 00 00 00 	cmp    BYTE PTR [esi+0x73a],0x0
c0016c39:	75 c9                	jne    c0016c04 <sysCallSpawn(regs*)+0xe>
c0016c3b:	83 ec 0c             	sub    esp,0xc
c0016c3e:	56                   	push   esi
c0016c3f:	e8 0e 1e 00 00       	call   c0018a52 <Process::createUserThread()>
c0016c44:	8b 06                	mov    eax,DWORD PTR [esi]
c0016c46:	83 c4 10             	add    esp,0x10
c0016c49:	99                   	cdq    
c0016c4a:	59                   	pop    ecx
c0016c4b:	5b                   	pop    ebx
c0016c4c:	5e                   	pop    esi
c0016c4d:	c3                   	ret    

c0016c4e <sysAppSettings(regs*)>:
c0016c4e:	53                   	push   ebx
c0016c4f:	83 ec 08             	sub    esp,0x8
c0016c52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c56:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0016c59:	8b 83 00 01 00 00    	mov    eax,DWORD PTR [ebx+0x100]
c0016c5f:	25 e0 1f 00 00       	and    eax,0x1fe0
c0016c64:	66 3d c0 09          	cmp    ax,0x9c0
c0016c68:	75 2f                	jne    c0016c99 <sysAppSettings(regs*)+0x4b>
c0016c6a:	8a 83 00 01 00 00    	mov    al,BYTE PTR [ebx+0x100]
c0016c70:	83 e0 1f             	and    eax,0x1f
c0016c73:	3c 01                	cmp    al,0x1
c0016c75:	74 2e                	je     c0016ca5 <sysAppSettings(regs*)+0x57>
c0016c77:	3c 07                	cmp    al,0x7
c0016c79:	0f 84 bd 00 00 00    	je     c0016d3c <sysAppSettings(regs*)+0xee>
c0016c7f:	84 c0                	test   al,al
c0016c81:	0f 84 dc 00 00 00    	je     c0016d63 <sysAppSettings(regs*)+0x115>
c0016c87:	3c 08                	cmp    al,0x8
c0016c89:	74 6d                	je     c0016cf8 <sysAppSettings(regs*)+0xaa>
c0016c8b:	0f b6 c0             	movzx  eax,al
c0016c8e:	83 c4 08             	add    esp,0x8
c0016c91:	05 e8 03 00 00       	add    eax,0x3e8
c0016c96:	5b                   	pop    ebx
c0016c97:	99                   	cdq    
c0016c98:	c3                   	ret    
c0016c99:	b8 01 00 00 00       	mov    eax,0x1
c0016c9e:	31 d2                	xor    edx,edx
c0016ca0:	83 c4 08             	add    esp,0x8
c0016ca3:	5b                   	pop    ebx
c0016ca4:	c3                   	ret    
c0016ca5:	51                   	push   ecx
c0016ca6:	68 00 01 00 00       	push   0x100
c0016cab:	6a 00                	push   0x0
c0016cad:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016cb2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016cb5:	83 c0 0c             	add    eax,0xc
c0016cb8:	50                   	push   eax
c0016cb9:	e8 15 9a fe ff       	call   c00006d3 <memset>
c0016cbe:	83 c4 0c             	add    esp,0xc
c0016cc1:	68 ff 00 00 00       	push   0xff
c0016cc6:	53                   	push   ebx
c0016cc7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016ccc:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016ccf:	83 c0 0c             	add    eax,0xc
c0016cd2:	50                   	push   eax
c0016cd3:	e8 c5 99 fe ff       	call   c000069d <memcpy>
c0016cd8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016cdd:	5b                   	pop    ebx
c0016cde:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016ce1:	5a                   	pop    edx
c0016ce2:	8d 50 0c             	lea    edx,[eax+0xc]
c0016ce5:	52                   	push   edx
c0016ce6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0016cec:	e8 ed 64 ff ff       	call   c000d1de <VgaText::setTitle(char*)>
c0016cf1:	83 c4 10             	add    esp,0x10
c0016cf4:	31 c0                	xor    eax,eax
c0016cf6:	eb a6                	jmp    c0016c9e <sysAppSettings(regs*)+0x50>
c0016cf8:	83 ec 08             	sub    esp,0x8
c0016cfb:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c0016d01:	83 e0 0f             	and    eax,0xf
c0016d04:	50                   	push   eax
c0016d05:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016d0a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016d0d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0016d13:	e8 b6 64 ff ff       	call   c000d1ce <VgaText::setTitleColour(VgaColour)>
c0016d18:	58                   	pop    eax
c0016d19:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c0016d1f:	5a                   	pop    edx
c0016d20:	c1 e8 04             	shr    eax,0x4
c0016d23:	83 e0 0f             	and    eax,0xf
c0016d26:	50                   	push   eax
c0016d27:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016d2c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016d2f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0016d35:	e8 84 64 ff ff       	call   c000d1be <VgaText::setTitleTextColour(VgaColour)>
c0016d3a:	eb b5                	jmp    c0016cf1 <sysAppSettings(regs*)+0xa3>
c0016d3c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016d41:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016d44:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c0016d4a:	8a 83 01 01 00 00    	mov    al,BYTE PTR [ebx+0x101]
c0016d50:	c0 e8 06             	shr    al,0x6
c0016d53:	83 e0 01             	and    eax,0x1
c0016d56:	88 82 1c 10 00 00    	mov    BYTE PTR [edx+0x101c],al
c0016d5c:	31 c0                	xor    eax,eax
c0016d5e:	e9 3b ff ff ff       	jmp    c0016c9e <sysAppSettings(regs*)+0x50>
c0016d63:	b8 02 00 00 00       	mov    eax,0x2
c0016d68:	e9 31 ff ff ff       	jmp    c0016c9e <sysAppSettings(regs*)+0x50>

c0016d6d <sysSetFatAttrib(regs*)>:
c0016d6d:	57                   	push   edi
c0016d6e:	56                   	push   esi
c0016d6f:	53                   	push   ebx
c0016d70:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016d74:	83 ec 0c             	sub    esp,0xc
c0016d77:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0016d7a:	68 14 01 00 00       	push   0x114
c0016d7f:	e8 b4 82 ff ff       	call   c000f038 <operator new(unsigned long)>
c0016d84:	83 c4 0c             	add    esp,0xc
c0016d87:	89 c3                	mov    ebx,eax
c0016d89:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016d8e:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0016d91:	57                   	push   edi
c0016d92:	53                   	push   ebx
c0016d93:	e8 be 88 ff ff       	call   c000f656 <File::File(char const*, Process*)>
c0016d98:	83 c4 0c             	add    esp,0xc
c0016d9b:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0016d9e:	0f b6 d4             	movzx  edx,ah
c0016da1:	0f b6 c0             	movzx  eax,al
c0016da4:	52                   	push   edx
c0016da5:	50                   	push   eax
c0016da6:	53                   	push   ebx
c0016da7:	e8 20 8b ff ff       	call   c000f8cc <File::chfatattr(unsigned char, unsigned char)>
c0016dac:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016daf:	89 c6                	mov    esi,eax
c0016db1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016db3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016db6:	83 c4 10             	add    esp,0x10
c0016db9:	31 c0                	xor    eax,eax
c0016dbb:	5b                   	pop    ebx
c0016dbc:	85 f6                	test   esi,esi
c0016dbe:	5e                   	pop    esi
c0016dbf:	0f 95 c0             	setne  al
c0016dc2:	5f                   	pop    edi
c0016dc3:	31 d2                	xor    edx,edx
c0016dc5:	f7 d8                	neg    eax
c0016dc7:	83 d2 00             	adc    edx,0x0
c0016dca:	f7 da                	neg    edx
c0016dcc:	c3                   	ret    

c0016dcd <sysPanic(regs*)>:
c0016dcd:	83 ec 18             	sub    esp,0x18
c0016dd0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016dd4:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0016dd7:	e8 14 eb ff ff       	call   c00158f0 <Krnl::panic(char const*)>
c0016ddc:	c7 04 24 ef 27 02 c0 	mov    DWORD PTR [esp],0xc00227ef
c0016de3:	e8 08 eb ff ff       	call   c00158f0 <Krnl::panic(char const*)>
c0016de8:	b8 01 00 00 00       	mov    eax,0x1
c0016ded:	31 d2                	xor    edx,edx
c0016def:	83 c4 1c             	add    esp,0x1c
c0016df2:	c3                   	ret    

c0016df3 <sysPipe(regs*)>:
c0016df3:	57                   	push   edi
c0016df4:	56                   	push   esi
c0016df5:	53                   	push   ebx
c0016df6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016dfa:	83 ec 0c             	sub    esp,0xc
c0016dfd:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0016e00:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0016e03:	6a 20                	push   0x20
c0016e05:	e8 2e 82 ff ff       	call   c000f038 <operator new(unsigned long)>
c0016e0a:	89 c3                	mov    ebx,eax
c0016e0c:	58                   	pop    eax
c0016e0d:	5a                   	pop    edx
c0016e0e:	68 00 50 00 00       	push   0x5000
c0016e13:	53                   	push   ebx
c0016e14:	e8 03 5d ff ff       	call   c000cb1c <Pipe::Pipe(int)>
c0016e19:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016e1c:	e8 29 6f ff ff       	call   c000dd4a <UnixFile::getFileDescriptor()>
c0016e21:	89 07                	mov    DWORD PTR [edi],eax
c0016e23:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016e26:	e8 1f 6f ff ff       	call   c000dd4a <UnixFile::getFileDescriptor()>
c0016e2b:	83 c4 10             	add    esp,0x10
c0016e2e:	89 06                	mov    DWORD PTR [esi],eax
c0016e30:	31 d2                	xor    edx,edx
c0016e32:	5b                   	pop    ebx
c0016e33:	31 c0                	xor    eax,eax
c0016e35:	5e                   	pop    esi
c0016e36:	5f                   	pop    edi
c0016e37:	c3                   	ret    

c0016e38 <sysGetUnixTime(regs*)>:
c0016e38:	a1 88 43 02 c0       	mov    eax,ds:0xc0024388
c0016e3d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016e43:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016e47:	e9 d2 91 ff ff       	jmp    c001001e <Clock::timeInSecondsLocal()>

c0016e4c <string_ends_with(char const*, char const*)>:
c0016e4c:	57                   	push   edi
c0016e4d:	56                   	push   esi
c0016e4e:	53                   	push   ebx
c0016e4f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016e53:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0016e57:	83 ec 0c             	sub    esp,0xc
c0016e5a:	53                   	push   ebx
c0016e5b:	e8 90 98 fe ff       	call   c00006f0 <strlen>
c0016e60:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016e63:	89 c6                	mov    esi,eax
c0016e65:	e8 86 98 fe ff       	call   c00006f0 <strlen>
c0016e6a:	83 c4 10             	add    esp,0x10
c0016e6d:	39 c6                	cmp    esi,eax
c0016e6f:	7d 06                	jge    c0016e77 <string_ends_with(char const*, char const*)+0x2b>
c0016e71:	5b                   	pop    ebx
c0016e72:	31 c0                	xor    eax,eax
c0016e74:	5e                   	pop    esi
c0016e75:	5f                   	pop    edi
c0016e76:	c3                   	ret    
c0016e77:	83 ec 08             	sub    esp,0x8
c0016e7a:	29 c6                	sub    esi,eax
c0016e7c:	57                   	push   edi
c0016e7d:	01 f3                	add    ebx,esi
c0016e7f:	53                   	push   ebx
c0016e80:	e8 3e 99 fe ff       	call   c00007c3 <strcmp>
c0016e85:	83 c4 10             	add    esp,0x10
c0016e88:	85 c0                	test   eax,eax
c0016e8a:	5b                   	pop    ebx
c0016e8b:	0f 94 c0             	sete   al
c0016e8e:	5e                   	pop    esi
c0016e8f:	0f b6 c0             	movzx  eax,al
c0016e92:	5f                   	pop    edi
c0016e93:	c3                   	ret    

c0016e94 <sysCallOpen(regs*)>:
c0016e94:	56                   	push   esi
c0016e95:	53                   	push   ebx
c0016e96:	81 ec 04 01 00 00    	sub    esp,0x104
c0016e9c:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0016ea3:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0016ea6:	85 c9                	test   ecx,ecx
c0016ea8:	0f 84 b3 00 00 00    	je     c0016f61 <sysCallOpen(regs*)+0xcd>
c0016eae:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016eb1:	85 c0                	test   eax,eax
c0016eb3:	0f 84 a8 00 00 00    	je     c0016f61 <sysCallOpen(regs*)+0xcd>
c0016eb9:	52                   	push   edx
c0016eba:	68 fe 27 02 c0       	push   0xc00227fe
c0016ebf:	50                   	push   eax
c0016ec0:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0016ec4:	56                   	push   esi
c0016ec5:	e8 e2 85 ff ff       	call   c000f4ac <standardiseFiles(char*, char const*, char const*)>
c0016eca:	89 34 24             	mov    DWORD PTR [esp],esi
c0016ecd:	e8 1e 98 fe ff       	call   c00006f0 <strlen>
c0016ed2:	83 c4 10             	add    esp,0x10
c0016ed5:	48                   	dec    eax
c0016ed6:	74 1d                	je     c0016ef5 <sysCallOpen(regs*)+0x61>
c0016ed8:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c0016edb:	eb 0f                	jmp    c0016eec <sysCallOpen(regs*)+0x58>
c0016edd:	80 fa 3a             	cmp    dl,0x3a
c0016ee0:	74 0f                	je     c0016ef1 <sysCallOpen(regs*)+0x5d>
c0016ee2:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0016ee6:	48                   	dec    eax
c0016ee7:	74 0c                	je     c0016ef5 <sysCallOpen(regs*)+0x61>
c0016ee9:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0016eec:	80 fa 2e             	cmp    dl,0x2e
c0016eef:	75 ec                	jne    c0016edd <sysCallOpen(regs*)+0x49>
c0016ef1:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0016ef5:	83 ec 08             	sub    esp,0x8
c0016ef8:	68 02 28 02 c0       	push   0xc0022802
c0016efd:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016f00:	e8 47 ff ff ff       	call   c0016e4c <string_ends_with(char const*, char const*)>
c0016f05:	83 c4 10             	add    esp,0x10
c0016f08:	85 c0                	test   eax,eax
c0016f0a:	75 17                	jne    c0016f23 <sysCallOpen(regs*)+0x8f>
c0016f0c:	83 ec 08             	sub    esp,0x8
c0016f0f:	68 23 28 02 c0       	push   0xc0022823
c0016f14:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016f17:	e8 30 ff ff ff       	call   c0016e4c <string_ends_with(char const*, char const*)>
c0016f1c:	83 c4 10             	add    esp,0x10
c0016f1f:	85 c0                	test   eax,eax
c0016f21:	74 51                	je     c0016f74 <sysCallOpen(regs*)+0xe0>
c0016f23:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016f26:	83 ec 08             	sub    esp,0x8
c0016f29:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0016f2f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0016f36:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016f39:	ff 30                	push   DWORD PTR [eax]
c0016f3b:	68 07 28 02 c0       	push   0xc0022807
c0016f40:	e8 e2 81 ff ff       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c0016f45:	c7 04 24 16 28 02 c0 	mov    DWORD PTR [esp],0xc0022816
c0016f4c:	e8 d6 81 ff ff       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c0016f51:	83 c4 10             	add    esp,0x10
c0016f54:	81 c4 04 01 00 00    	add    esp,0x104
c0016f5a:	31 c0                	xor    eax,eax
c0016f5c:	31 d2                	xor    edx,edx
c0016f5e:	5b                   	pop    ebx
c0016f5f:	5e                   	pop    esi
c0016f60:	c3                   	ret    
c0016f61:	81 c4 04 01 00 00    	add    esp,0x104
c0016f67:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016f6c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016f71:	5b                   	pop    ebx
c0016f72:	5e                   	pop    esi
c0016f73:	c3                   	ret    
c0016f74:	83 ec 08             	sub    esp,0x8
c0016f77:	68 03 28 02 c0       	push   0xc0022803
c0016f7c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016f7f:	e8 3f 98 fe ff       	call   c00007c3 <strcmp>
c0016f84:	83 c4 10             	add    esp,0x10
c0016f87:	85 c0                	test   eax,eax
c0016f89:	74 98                	je     c0016f23 <sysCallOpen(regs*)+0x8f>
c0016f8b:	83 ec 08             	sub    esp,0x8
c0016f8e:	68 02 28 02 c0       	push   0xc0022802
c0016f93:	56                   	push   esi
c0016f94:	e8 b3 fe ff ff       	call   c0016e4c <string_ends_with(char const*, char const*)>
c0016f99:	83 c4 10             	add    esp,0x10
c0016f9c:	85 c0                	test   eax,eax
c0016f9e:	75 83                	jne    c0016f23 <sysCallOpen(regs*)+0x8f>
c0016fa0:	83 ec 08             	sub    esp,0x8
c0016fa3:	68 28 28 02 c0       	push   0xc0022828
c0016fa8:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016fab:	e8 9c fe ff ff       	call   c0016e4c <string_ends_with(char const*, char const*)>
c0016fb0:	83 c4 10             	add    esp,0x10
c0016fb3:	85 c0                	test   eax,eax
c0016fb5:	0f 85 d1 00 00 00    	jne    c001708c <sysCallOpen(regs*)+0x1f8>
c0016fbb:	83 ec 08             	sub    esp,0x8
c0016fbe:	68 2d 28 02 c0       	push   0xc002282d
c0016fc3:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016fc6:	e8 81 fe ff ff       	call   c0016e4c <string_ends_with(char const*, char const*)>
c0016fcb:	83 c4 10             	add    esp,0x10
c0016fce:	85 c0                	test   eax,eax
c0016fd0:	0f 85 b6 00 00 00    	jne    c001708c <sysCallOpen(regs*)+0x1f8>
c0016fd6:	83 ec 08             	sub    esp,0x8
c0016fd9:	68 29 28 02 c0       	push   0xc0022829
c0016fde:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016fe1:	e8 dd 97 fe ff       	call   c00007c3 <strcmp>
c0016fe6:	83 c4 10             	add    esp,0x10
c0016fe9:	85 c0                	test   eax,eax
c0016feb:	0f 84 9b 00 00 00    	je     c001708c <sysCallOpen(regs*)+0x1f8>
c0016ff1:	83 ec 08             	sub    esp,0x8
c0016ff4:	68 28 28 02 c0       	push   0xc0022828
c0016ff9:	56                   	push   esi
c0016ffa:	e8 4d fe ff ff       	call   c0016e4c <string_ends_with(char const*, char const*)>
c0016fff:	83 c4 10             	add    esp,0x10
c0017002:	85 c0                	test   eax,eax
c0017004:	0f 85 82 00 00 00    	jne    c001708c <sysCallOpen(regs*)+0x1f8>
c001700a:	83 ec 0c             	sub    esp,0xc
c001700d:	68 14 01 00 00       	push   0x114
c0017012:	e8 21 80 ff ff       	call   c000f038 <operator new(unsigned long)>
c0017017:	83 c4 0c             	add    esp,0xc
c001701a:	89 c6                	mov    esi,eax
c001701c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017021:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0017024:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0017027:	56                   	push   esi
c0017028:	e8 29 86 ff ff       	call   c000f656 <File::File(char const*, Process*)>
c001702d:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0017030:	83 c4 10             	add    esp,0x10
c0017033:	0f b6 c2             	movzx  eax,dl
c0017036:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0017039:	89 d0                	mov    eax,edx
c001703b:	83 e0 01             	and    eax,0x1
c001703e:	f6 c2 02             	test   dl,0x2
c0017041:	74 03                	je     c0017046 <sysCallOpen(regs*)+0x1b2>
c0017043:	83 c8 02             	or     eax,0x2
c0017046:	f6 c2 04             	test   dl,0x4
c0017049:	74 03                	je     c001704e <sysCallOpen(regs*)+0x1ba>
c001704b:	83 c8 04             	or     eax,0x4
c001704e:	f6 c2 08             	test   dl,0x8
c0017051:	74 03                	je     c0017056 <sysCallOpen(regs*)+0x1c2>
c0017053:	83 c8 0a             	or     eax,0xa
c0017056:	83 e2 10             	and    edx,0x10
c0017059:	74 03                	je     c001705e <sysCallOpen(regs*)+0x1ca>
c001705b:	83 c8 12             	or     eax,0x12
c001705e:	83 ec 08             	sub    esp,0x8
c0017061:	50                   	push   eax
c0017062:	56                   	push   esi
c0017063:	e8 52 86 ff ff       	call   c000f6ba <File::open(FileOpenMode)>
c0017068:	83 c4 10             	add    esp,0x10
c001706b:	85 c0                	test   eax,eax
c001706d:	0f 85 ee fe ff ff    	jne    c0016f61 <sysCallOpen(regs*)+0xcd>
c0017073:	83 ec 0c             	sub    esp,0xc
c0017076:	56                   	push   esi
c0017077:	e8 ce 6c ff ff       	call   c000dd4a <UnixFile::getFileDescriptor()>
c001707c:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001707f:	89 02                	mov    DWORD PTR [edx],eax
c0017081:	c1 f8 1f             	sar    eax,0x1f
c0017084:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0017087:	e9 c5 fe ff ff       	jmp    c0016f51 <sysCallOpen(regs*)+0xbd>
c001708c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001708f:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0017095:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001709c:	e9 b3 fe ff ff       	jmp    c0016f54 <sysCallOpen(regs*)+0xc0>

c00170a1 <setupSystemCalls()>:
c00170a1:	c7 05 e0 4d 02 c0 fd 62 01 c0 	mov    DWORD PTR ds:0xc0024de0,0xc00162fd
c00170ab:	c7 05 e4 4d 02 c0 2b 61 01 c0 	mov    DWORD PTR ds:0xc0024de4,0xc001612b
c00170b5:	c7 05 e8 4d 02 c0 40 62 01 c0 	mov    DWORD PTR ds:0xc0024de8,0xc0016240
c00170bf:	c7 05 ec 4d 02 c0 95 62 01 c0 	mov    DWORD PTR ds:0xc0024dec,0xc0016295
c00170c9:	c7 05 f0 4d 02 c0 d8 61 01 c0 	mov    DWORD PTR ds:0xc0024df0,0xc00161d8
c00170d3:	c7 05 f4 4d 02 c0 17 63 01 c0 	mov    DWORD PTR ds:0xc0024df4,0xc0016317
c00170dd:	c7 05 f8 4d 02 c0 bc 64 01 c0 	mov    DWORD PTR ds:0xc0024df8,0xc00164bc
c00170e7:	c7 05 fc 4d 02 c0 db 64 01 c0 	mov    DWORD PTR ds:0xc0024dfc,0xc00164db
c00170f1:	c7 05 04 4e 02 c0 3c 68 01 c0 	mov    DWORD PTR ds:0xc0024e04,0xc001683c
c00170fb:	c7 05 00 4e 02 c0 94 6e 01 c0 	mov    DWORD PTR ds:0xc0024e00,0xc0016e94
c0017105:	c7 05 08 4e 02 c0 c4 68 01 c0 	mov    DWORD PTR ds:0xc0024e08,0xc00168c4
c001710f:	c7 05 0c 4e 02 c0 3a 65 01 c0 	mov    DWORD PTR ds:0xc0024e0c,0xc001653a
c0017119:	c7 05 10 4e 02 c0 23 63 01 c0 	mov    DWORD PTR ds:0xc0024e10,0xc0016323
c0017123:	c7 05 14 4e 02 c0 28 63 01 c0 	mov    DWORD PTR ds:0xc0024e14,0xc0016328
c001712d:	c7 05 18 4e 02 c0 31 69 01 c0 	mov    DWORD PTR ds:0xc0024e18,0xc0016931
c0017137:	c7 05 1c 4e 02 c0 8a 69 01 c0 	mov    DWORD PTR ds:0xc0024e1c,0xc001698a
c0017141:	c7 05 20 4e 02 c0 22 66 01 c0 	mov    DWORD PTR ds:0xc0024e20,0xc0016622
c001714b:	c7 05 24 4e 02 c0 8b 66 01 c0 	mov    DWORD PTR ds:0xc0024e24,0xc001668b
c0017155:	c7 05 28 4e 02 c0 b9 67 01 c0 	mov    DWORD PTR ds:0xc0024e28,0xc00167b9
c001715f:	c7 05 2c 4e 02 c0 2d 63 01 c0 	mov    DWORD PTR ds:0xc0024e2c,0xc001632d
c0017169:	c7 05 30 4e 02 c0 f0 69 01 c0 	mov    DWORD PTR ds:0xc0024e30,0xc00169f0
c0017173:	c7 05 34 4e 02 c0 37 63 01 c0 	mov    DWORD PTR ds:0xc0024e34,0xc0016337
c001717d:	c7 05 38 4e 02 c0 42 63 01 c0 	mov    DWORD PTR ds:0xc0024e38,0xc0016342
c0017187:	c7 05 3c 4e 02 c0 0a 6a 01 c0 	mov    DWORD PTR ds:0xc0024e3c,0xc0016a0a
c0017191:	c7 05 40 4e 02 c0 5c 6a 01 c0 	mov    DWORD PTR ds:0xc0024e40,0xc0016a5c
c001719b:	c7 05 44 4e 02 c0 4d 63 01 c0 	mov    DWORD PTR ds:0xc0024e44,0xc001634d
c00171a5:	c7 05 48 4e 02 c0 ae 6a 01 c0 	mov    DWORD PTR ds:0xc0024e48,0xc0016aae
c00171af:	c7 05 4c 4e 02 c0 f7 64 01 c0 	mov    DWORD PTR ds:0xc0024e4c,0xc00164f7
c00171b9:	c7 05 50 4e 02 c0 fa 6a 01 c0 	mov    DWORD PTR ds:0xc0024e50,0xc0016afa
c00171c3:	c7 05 54 4e 02 c0 c8 65 01 c0 	mov    DWORD PTR ds:0xc0024e54,0xc00165c8
c00171cd:	c7 05 58 4e 02 c0 cf 6b 01 c0 	mov    DWORD PTR ds:0xc0024e58,0xc0016bcf
c00171d7:	c7 05 5c 4e 02 c0 08 67 01 c0 	mov    DWORD PTR ds:0xc0024e5c,0xc0016708
c00171e1:	c7 05 60 4e 02 c0 f6 6b 01 c0 	mov    DWORD PTR ds:0xc0024e60,0xc0016bf6
c00171eb:	c7 05 64 4e 02 c0 7d 6b 01 c0 	mov    DWORD PTR ds:0xc0024e64,0xc0016b7d
c00171f5:	c7 05 68 4e 02 c0 4e 6c 01 c0 	mov    DWORD PTR ds:0xc0024e68,0xc0016c4e
c00171ff:	c7 05 6c 4e 02 c0 5d 63 01 c0 	mov    DWORD PTR ds:0xc0024e6c,0xc001635d
c0017209:	c7 05 70 4e 02 c0 c7 63 01 c0 	mov    DWORD PTR ds:0xc0024e70,0xc00163c7
c0017213:	c7 05 74 4e 02 c0 0d 64 01 c0 	mov    DWORD PTR ds:0xc0024e74,0xc001640d
c001721d:	c7 05 78 4e 02 c0 6d 6d 01 c0 	mov    DWORD PTR ds:0xc0024e78,0xc0016d6d
c0017227:	c7 05 7c 4e 02 c0 cd 6d 01 c0 	mov    DWORD PTR ds:0xc0024e7c,0xc0016dcd
c0017231:	c7 05 80 4e 02 c0 5e 64 01 c0 	mov    DWORD PTR ds:0xc0024e80,0xc001645e
c001723b:	c7 05 84 4e 02 c0 f3 6d 01 c0 	mov    DWORD PTR ds:0xc0024e84,0xc0016df3
c0017245:	c7 05 88 4e 02 c0 38 6e 01 c0 	mov    DWORD PTR ds:0xc0024e88,0xc0016e38
c001724f:	c7 05 8c 4e 02 c0 43 61 01 c0 	mov    DWORD PTR ds:0xc0024e8c,0xc0016143
c0017259:	c3                   	ret    

c001725a <systemCall(regs*, void*)>:
c001725a:	53                   	push   ebx
c001725b:	83 ec 08             	sub    esp,0x8
c001725e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017262:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0017265:	83 f8 7f             	cmp    eax,0x7f
c0017268:	77 16                	ja     c0017280 <systemCall(regs*, void*)+0x26>
c001726a:	8b 14 85 e0 4d 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdb220]
c0017271:	85 d2                	test   edx,edx
c0017273:	74 0b                	je     c0017280 <systemCall(regs*, void*)+0x26>
c0017275:	83 ec 0c             	sub    esp,0xc
c0017278:	53                   	push   ebx
c0017279:	ff d2                	call   edx
c001727b:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001727e:	eb 0d                	jmp    c001728d <systemCall(regs*, void*)+0x33>
c0017280:	52                   	push   edx
c0017281:	52                   	push   edx
c0017282:	50                   	push   eax
c0017283:	68 32 28 02 c0       	push   0xc0022832
c0017288:	e8 9a 7e ff ff       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c001728d:	83 c4 10             	add    esp,0x10
c0017290:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0017295:	31 d2                	xor    edx,edx
c0017297:	83 c4 08             	add    esp,0x8
c001729a:	5b                   	pop    ebx
c001729b:	c3                   	ret    

c001729c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001729c:	55                   	push   ebp
c001729d:	89 e5                	mov    ebp,esp
c001729f:	57                   	push   edi
c00172a0:	56                   	push   esi
c00172a1:	53                   	push   ebx
c00172a2:	81 ec 2c 10 00 00    	sub    esp,0x102c
c00172a8:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c00172ab:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c00172ae:	85 c0                	test   eax,eax
c00172b0:	0f 95 c1             	setne  cl
c00172b3:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c00172b7:	0f 94 c2             	sete   dl
c00172ba:	84 d1                	test   cl,dl
c00172bc:	74 26                	je     c00172e4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c00172be:	f7 45 14 ff 0f 00 00 	test   DWORD PTR [ebp+0x14],0xfff
c00172c5:	74 1d                	je     c00172e4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c00172c7:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c00172ca:	8d 91 00 10 00 00    	lea    edx,[ecx+0x1000]
c00172d0:	89 d6                	mov    esi,edx
c00172d2:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00172d8:	81 ce 00 f0 ff ff    	or     esi,0xfffff000
c00172de:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c00172e1:	89 75 10             	mov    DWORD PTR [ebp+0x10],esi
c00172e4:	83 ec 0c             	sub    esp,0xc
c00172e7:	05 ff 0f 00 00       	add    eax,0xfff
c00172ec:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c00172ef:	6a 01                	push   0x1
c00172f1:	8d 99 ff 0f 00 00    	lea    ebx,[ecx+0xfff]
c00172f7:	89 85 d4 ef ff ff    	mov    DWORD PTR [ebp-0x102c],eax
c00172fd:	e8 53 6e ff ff       	call   c000e155 <Virt::allocateKernelVirtualPages(int)>
c0017302:	83 c4 10             	add    esp,0x10
c0017305:	89 c6                	mov    esi,eax
c0017307:	81 fb ff 0f 00 00    	cmp    ebx,0xfff
c001730d:	0f 86 21 01 00 00    	jbe    c0017434 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x198>
c0017313:	c1 eb 0c             	shr    ebx,0xc
c0017316:	c7 85 d0 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x1030],0x0
c0017320:	89 9d cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],ebx
c0017326:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c0017329:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001732c:	8b 95 cc ef ff ff    	mov    edx,DWORD PTR [ebp-0x1034]
c0017332:	03 45 14             	add    eax,DWORD PTR [ebp+0x14]
c0017335:	29 d8                	sub    eax,ebx
c0017337:	39 95 d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],edx
c001733d:	0f 83 f4 00 00 00    	jae    c0017437 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x19b>
c0017343:	83 ec 0c             	sub    esp,0xc
c0017346:	8d 95 e4 ef ff ff    	lea    edx,[ebp-0x101c]
c001734c:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c001734f:	3d 00 10 00 00       	cmp    eax,0x1000
c0017354:	8b 09                	mov    ecx,DWORD PTR [ecx]
c0017356:	52                   	push   edx
c0017357:	8d 95 e8 ef ff ff    	lea    edx,[ebp-0x1018]
c001735d:	52                   	push   edx
c001735e:	76 05                	jbe    c0017365 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc9>
c0017360:	b8 00 10 00 00       	mov    eax,0x1000
c0017365:	31 d2                	xor    edx,edx
c0017367:	52                   	push   edx
c0017368:	50                   	push   eax
c0017369:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c001736c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001736f:	83 c4 20             	add    esp,0x20
c0017372:	85 c0                	test   eax,eax
c0017374:	74 1f                	je     c0017395 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf9>
c0017376:	51                   	push   ecx
c0017377:	51                   	push   ecx
c0017378:	50                   	push   eax
c0017379:	68 46 28 02 c0       	push   0xc0022846
c001737e:	e8 a4 7d ff ff       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c0017383:	89 34 24             	mov    DWORD PTR [esp],esi
c0017386:	e8 24 71 ff ff       	call   c000e4af <Virt::freeKernelVirtualPages(unsigned long)>
c001738b:	83 c4 10             	add    esp,0x10
c001738e:	31 c0                	xor    eax,eax
c0017390:	e9 7c 01 00 00       	jmp    c0017511 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c0017395:	e8 aa 14 00 00       	call   c0018844 <lockScheduler()>
c001739a:	e8 41 52 ff ff       	call   c000c5e0 <Phys::allocatePage()>
c001739f:	6a 07                	push   0x7
c00173a1:	89 85 c8 ef ff ff    	mov    DWORD PTR [ebp-0x1038],eax
c00173a7:	56                   	push   esi
c00173a8:	50                   	push   eax
c00173a9:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00173af:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c00173b2:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c00173b8:	e8 6b 74 ff ff       	call   c000e828 <VAS::mapPage(unsigned long, unsigned long, int)>
c00173bd:	83 c4 0c             	add    esp,0xc
c00173c0:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c00173c6:	6a 00                	push   0x0
c00173c8:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00173ce:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c00173d1:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c00173d7:	e8 aa 72 ff ff       	call   c000e686 <VAS::mapOtherVASIn(bool, VAS*)>
c00173dc:	58                   	pop    eax
c00173dd:	8b 85 c8 ef ff ff    	mov    eax,DWORD PTR [ebp-0x1038]
c00173e3:	5a                   	pop    edx
c00173e4:	68 07 04 00 00       	push   0x407
c00173e9:	53                   	push   ebx
c00173ea:	81 c3 00 10 00 00    	add    ebx,0x1000
c00173f0:	50                   	push   eax
c00173f1:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c00173f7:	6a 00                	push   0x0
c00173f9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00173fe:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0017401:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c0017407:	e8 d2 77 ff ff       	call   c000ebde <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001740c:	83 c4 1c             	add    esp,0x1c
c001740f:	8d 85 e8 ef ff ff    	lea    eax,[ebp-0x1018]
c0017415:	68 00 10 00 00       	push   0x1000
c001741a:	50                   	push   eax
c001741b:	56                   	push   esi
c001741c:	e8 7c 92 fe ff       	call   c000069d <memcpy>
c0017421:	e8 20 14 00 00       	call   c0018846 <unlockScheduler()>
c0017426:	ff 85 d0 ef ff ff    	inc    DWORD PTR [ebp-0x1030]
c001742c:	83 c4 10             	add    esp,0x10
c001742f:	e9 f5 fe ff ff       	jmp    c0017329 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x8d>
c0017434:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c0017437:	81 bd d4 ef ff ff ff 0f 00 00 	cmp    DWORD PTR [ebp-0x102c],0xfff
c0017441:	0f 86 bc 00 00 00    	jbe    c0017503 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x267>
c0017447:	e8 f8 13 00 00       	call   c0018844 <lockScheduler()>
c001744c:	51                   	push   ecx
c001744d:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c0017453:	6a 00                	push   0x0
c0017455:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001745a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001745d:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c0017463:	e8 1e 72 ff ff       	call   c000e686 <VAS::mapOtherVASIn(bool, VAS*)>
c0017468:	8b 85 d4 ef ff ff    	mov    eax,DWORD PTR [ebp-0x102c]
c001746e:	83 c4 10             	add    esp,0x10
c0017471:	c1 e8 0c             	shr    eax,0xc
c0017474:	c7 85 d4 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x102c],0x0
c001747e:	89 85 d0 ef ff ff    	mov    DWORD PTR [ebp-0x1030],eax
c0017484:	e8 57 51 ff ff       	call   c000c5e0 <Phys::allocatePage()>
c0017489:	6a 07                	push   0x7
c001748b:	89 85 cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],eax
c0017491:	56                   	push   esi
c0017492:	50                   	push   eax
c0017493:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0017499:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001749c:	ff b1 32 05 00 00    	push   DWORD PTR [ecx+0x532]
c00174a2:	e8 81 73 ff ff       	call   c000e828 <VAS::mapPage(unsigned long, unsigned long, int)>
c00174a7:	58                   	pop    eax
c00174a8:	8b 85 cc ef ff ff    	mov    eax,DWORD PTR [ebp-0x1034]
c00174ae:	5a                   	pop    edx
c00174af:	68 07 04 00 00       	push   0x407
c00174b4:	53                   	push   ebx
c00174b5:	81 c3 00 10 00 00    	add    ebx,0x1000
c00174bb:	50                   	push   eax
c00174bc:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c00174c2:	6a 00                	push   0x0
c00174c4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00174c9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00174cc:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c00174d2:	e8 07 77 ff ff       	call   c000ebde <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00174d7:	83 c4 1c             	add    esp,0x1c
c00174da:	68 00 10 00 00       	push   0x1000
c00174df:	6a 00                	push   0x0
c00174e1:	56                   	push   esi
c00174e2:	e8 ec 91 fe ff       	call   c00006d3 <memset>
c00174e7:	ff 85 d4 ef ff ff    	inc    DWORD PTR [ebp-0x102c]
c00174ed:	83 c4 10             	add    esp,0x10
c00174f0:	8b 8d d4 ef ff ff    	mov    ecx,DWORD PTR [ebp-0x102c]
c00174f6:	39 8d d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],ecx
c00174fc:	77 86                	ja     c0017484 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1e8>
c00174fe:	e8 43 13 00 00       	call   c0018846 <unlockScheduler()>
c0017503:	83 ec 0c             	sub    esp,0xc
c0017506:	56                   	push   esi
c0017507:	e8 a3 6f ff ff       	call   c000e4af <Virt::freeKernelVirtualPages(unsigned long)>
c001750c:	83 c4 10             	add    esp,0x10
c001750f:	b0 01                	mov    al,0x1
c0017511:	8d 65 f4             	lea    esp,[ebp-0xc]
c0017514:	5b                   	pop    ebx
c0017515:	5e                   	pop    esi
c0017516:	5f                   	pop    edi
c0017517:	5d                   	pop    ebp
c0017518:	c3                   	ret    

c0017519 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0017519:	55                   	push   ebp
c001751a:	57                   	push   edi
c001751b:	56                   	push   esi
c001751c:	53                   	push   ebx
c001751d:	83 ec 48             	sub    esp,0x48
c0017520:	68 14 01 00 00       	push   0x114
c0017525:	e8 0e 7b ff ff       	call   c000f038 <operator new(unsigned long)>
c001752a:	83 c4 0c             	add    esp,0xc
c001752d:	89 c6                	mov    esi,eax
c001752f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0017533:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0017537:	50                   	push   eax
c0017538:	e8 19 81 ff ff       	call   c000f656 <File::File(char const*, Process*)>
c001753d:	58                   	pop    eax
c001753e:	5a                   	pop    edx
c001753f:	6a 01                	push   0x1
c0017541:	56                   	push   esi
c0017542:	e8 73 81 ff ff       	call   c000f6ba <File::open(FileOpenMode)>
c0017547:	83 c4 10             	add    esp,0x10
c001754a:	85 c0                	test   eax,eax
c001754c:	0f 85 47 01 00 00    	jne    c0017699 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0017552:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001755a:	83 ec 0c             	sub    esp,0xc
c001755d:	6a 34                	push   0x34
c001755f:	e8 d2 4a ff ff       	call   c000c036 <malloc>
c0017564:	89 c3                	mov    ebx,eax
c0017566:	58                   	pop    eax
c0017567:	8b 06                	mov    eax,DWORD PTR [esi]
c0017569:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001756d:	57                   	push   edi
c001756e:	53                   	push   ebx
c001756f:	6a 00                	push   0x0
c0017571:	6a 34                	push   0x34
c0017573:	56                   	push   esi
c0017574:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017577:	83 c4 20             	add    esp,0x20
c001757a:	85 c0                	test   eax,eax
c001757c:	0f 85 17 01 00 00    	jne    c0017699 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0017582:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0017588:	0f 85 0b 01 00 00    	jne    c0017699 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001758e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0017591:	85 c0                	test   eax,eax
c0017593:	0f 84 00 01 00 00    	je     c0017699 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0017599:	31 d2                	xor    edx,edx
c001759b:	55                   	push   ebp
c001759c:	52                   	push   edx
c001759d:	50                   	push   eax
c001759e:	56                   	push   esi
c001759f:	e8 d4 81 ff ff       	call   c000f778 <File::seek(unsigned long long)>
c00175a4:	83 c4 10             	add    esp,0x10
c00175a7:	85 c0                	test   eax,eax
c00175a9:	0f 85 ea 00 00 00    	jne    c0017699 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00175af:	83 ec 0c             	sub    esp,0xc
c00175b2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00175b5:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00175b9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00175bd:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00175c1:	0f af c2             	imul   eax,edx
c00175c4:	50                   	push   eax
c00175c5:	e8 6c 4a ff ff       	call   c000c036 <malloc>
c00175ca:	89 3c 24             	mov    DWORD PTR [esp],edi
c00175cd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00175d1:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00175d3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00175d7:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00175db:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00175df:	0f af c2             	imul   eax,edx
c00175e2:	99                   	cdq    
c00175e3:	52                   	push   edx
c00175e4:	50                   	push   eax
c00175e5:	56                   	push   esi
c00175e6:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00175e9:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00175ec:	83 c4 20             	add    esp,0x20
c00175ef:	85 c0                	test   eax,eax
c00175f1:	0f 84 a2 00 00 00    	je     c0017699 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00175f7:	31 d2                	xor    edx,edx
c00175f9:	51                   	push   ecx
c00175fa:	52                   	push   edx
c00175fb:	50                   	push   eax
c00175fc:	56                   	push   esi
c00175fd:	e8 76 81 ff ff       	call   c000f778 <File::seek(unsigned long long)>
c0017602:	83 c4 10             	add    esp,0x10
c0017605:	85 c0                	test   eax,eax
c0017607:	0f 85 8c 00 00 00    	jne    c0017699 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001760d:	83 ec 0c             	sub    esp,0xc
c0017610:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0017614:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0017618:	31 ed                	xor    ebp,ebp
c001761a:	0f af c2             	imul   eax,edx
c001761d:	50                   	push   eax
c001761e:	e8 13 4a ff ff       	call   c000c036 <malloc>
c0017623:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017626:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001762a:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001762c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017630:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0017634:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0017638:	0f af c2             	imul   eax,edx
c001763b:	99                   	cdq    
c001763c:	52                   	push   edx
c001763d:	50                   	push   eax
c001763e:	56                   	push   esi
c001763f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017642:	83 c4 20             	add    esp,0x20
c0017645:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001764d:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c0017651:	0f 86 80 00 00 00    	jbe    c00176d7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c0017657:	0f b7 fd             	movzx  edi,bp
c001765a:	c1 e7 05             	shl    edi,0x5
c001765d:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c0017661:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0017664:	75 6b                	jne    c00176d1 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0017666:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0017669:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001766d:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0017670:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017674:	52                   	push   edx
c0017675:	31 d2                	xor    edx,edx
c0017677:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001767a:	52                   	push   edx
c001767b:	50                   	push   eax
c001767c:	56                   	push   esi
c001767d:	e8 f6 80 ff ff       	call   c000f778 <File::seek(unsigned long long)>
c0017682:	83 c4 10             	add    esp,0x10
c0017685:	85 c0                	test   eax,eax
c0017687:	74 17                	je     c00176a0 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c0017689:	83 ec 0c             	sub    esp,0xc
c001768c:	68 71 28 02 c0       	push   0xc0022871
c0017691:	e8 91 7a ff ff       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c0017696:	83 c4 10             	add    esp,0x10
c0017699:	31 c0                	xor    eax,eax
c001769b:	e9 87 00 00 00       	jmp    c0017727 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c00176a0:	83 ec 0c             	sub    esp,0xc
c00176a3:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00176a6:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c00176a9:	50                   	push   eax
c00176aa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00176ae:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00176b2:	56                   	push   esi
c00176b3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c00176b7:	e8 e0 fb ff ff       	call   c001729c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c00176bc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00176c0:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c00176c4:	83 c4 20             	add    esp,0x20
c00176c7:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c00176cb:	73 04                	jae    c00176d1 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c00176cd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00176d1:	45                   	inc    ebp
c00176d2:	e9 76 ff ff ff       	jmp    c001764d <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c00176d7:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00176db:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00176df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00176e3:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c00176e9:	83 ec 0c             	sub    esp,0xc
c00176ec:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c00176f2:	25 00 f0 ff ff       	and    eax,0xfffff000
c00176f7:	05 00 10 00 00       	add    eax,0x1000
c00176fc:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00176ff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017703:	e8 3e 49 ff ff       	call   c000c046 <free>
c0017708:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001770b:	e8 36 49 ff ff       	call   c000c046 <free>
c0017710:	58                   	pop    eax
c0017711:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017715:	e8 2c 49 ff ff       	call   c000c046 <free>
c001771a:	89 34 24             	mov    DWORD PTR [esp],esi
c001771d:	e8 f6 7f ff ff       	call   c000f718 <File::close()>
c0017722:	83 c4 10             	add    esp,0x10
c0017725:	b0 01                	mov    al,0x1
c0017727:	83 c4 3c             	add    esp,0x3c
c001772a:	5b                   	pop    ebx
c001772b:	5e                   	pop    esi
c001772c:	5f                   	pop    edi
c001772d:	5d                   	pop    ebp
c001772e:	c3                   	ret    

c001772f <Thr::runtimeReferenceHelper()>:
c001772f:	83 ec 18             	sub    esp,0x18
c0017732:	68 79 28 02 c0       	push   0xc0022879
c0017737:	e8 eb 79 ff ff       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c001773c:	fa                   	cli    
c001773d:	83 c4 10             	add    esp,0x10
c0017740:	eb fe                	jmp    c0017740 <Thr::runtimeReferenceHelper()+0x11>

c0017742 <Thr::getAddressOfKernelSymbol(char const*)>:
c0017742:	57                   	push   edi
c0017743:	56                   	push   esi
c0017744:	53                   	push   ebx
c0017745:	31 db                	xor    ebx,ebx
c0017747:	39 1d 80 57 02 c0    	cmp    DWORD PTR ds:0xc0025780,ebx
c001774d:	7e 3c                	jle    c001778b <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001774f:	8b 34 9d 00 57 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffda900]
c0017756:	31 ff                	xor    edi,edi
c0017758:	39 3c 9d 00 56 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffdaa00],edi
c001775f:	7e 27                	jle    c0017788 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0017761:	50                   	push   eax
c0017762:	50                   	push   eax
c0017763:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017767:	8b 06                	mov    eax,DWORD PTR [esi]
c0017769:	03 04 9d 80 56 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffda980]
c0017770:	50                   	push   eax
c0017771:	e8 4d 90 fe ff       	call   c00007c3 <strcmp>
c0017776:	83 c4 10             	add    esp,0x10
c0017779:	85 c0                	test   eax,eax
c001777b:	75 05                	jne    c0017782 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001777d:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0017780:	eb 0b                	jmp    c001778d <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0017782:	83 c6 10             	add    esi,0x10
c0017785:	47                   	inc    edi
c0017786:	eb d0                	jmp    c0017758 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0017788:	43                   	inc    ebx
c0017789:	eb bc                	jmp    c0017747 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001778b:	31 c0                	xor    eax,eax
c001778d:	5b                   	pop    ebx
c001778e:	5e                   	pop    esi
c001778f:	5f                   	pop    edi
c0017790:	c3                   	ret    

c0017791 <Thr::loadKernelSymbolTable(char const*)>:
c0017791:	55                   	push   ebp
c0017792:	57                   	push   edi
c0017793:	56                   	push   esi
c0017794:	53                   	push   ebx
c0017795:	83 ec 68             	sub    esp,0x68
c0017798:	8b 35 d4 57 02 c0    	mov    esi,DWORD PTR ds:0xc00257d4
c001779e:	68 14 01 00 00       	push   0x114
c00177a3:	e8 90 78 ff ff       	call   c000f038 <operator new(unsigned long)>
c00177a8:	83 c4 0c             	add    esp,0xc
c00177ab:	89 c3                	mov    ebx,eax
c00177ad:	56                   	push   esi
c00177ae:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c00177b2:	50                   	push   eax
c00177b3:	e8 9e 7e ff ff       	call   c000f656 <File::File(char const*, Process*)>
c00177b8:	5e                   	pop    esi
c00177b9:	5f                   	pop    edi
c00177ba:	6a 01                	push   0x1
c00177bc:	53                   	push   ebx
c00177bd:	e8 f8 7e ff ff       	call   c000f6ba <File::open(FileOpenMode)>
c00177c2:	83 c4 10             	add    esp,0x10
c00177c5:	31 d2                	xor    edx,edx
c00177c7:	85 c0                	test   eax,eax
c00177c9:	0f 85 79 02 00 00    	jne    c0017a48 <Thr::loadKernelSymbolTable(char const*)+0x2b7>
c00177cf:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00177d7:	83 ec 0c             	sub    esp,0xc
c00177da:	6a 34                	push   0x34
c00177dc:	e8 55 48 ff ff       	call   c000c036 <malloc>
c00177e1:	59                   	pop    ecx
c00177e2:	89 c7                	mov    edi,eax
c00177e4:	8d 74 24 34          	lea    esi,[esp+0x34]
c00177e8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00177ea:	56                   	push   esi
c00177eb:	57                   	push   edi
c00177ec:	6a 00                	push   0x0
c00177ee:	6a 34                	push   0x34
c00177f0:	53                   	push   ebx
c00177f1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00177f4:	83 c4 20             	add    esp,0x20
c00177f7:	85 c0                	test   eax,eax
c00177f9:	74 17                	je     c0017812 <Thr::loadKernelSymbolTable(char const*)+0x81>
c00177fb:	83 ec 0c             	sub    esp,0xc
c00177fe:	68 9b 28 02 c0       	push   0xc002289b
c0017803:	e8 e8 e0 ff ff       	call   c00158f0 <Krnl::panic(char const*)>
c0017808:	83 c4 10             	add    esp,0x10
c001780b:	31 d2                	xor    edx,edx
c001780d:	e9 36 02 00 00       	jmp    c0017a48 <Thr::loadKernelSymbolTable(char const*)+0x2b7>
c0017812:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0017818:	75 e1                	jne    c00177fb <Thr::loadKernelSymbolTable(char const*)+0x6a>
c001781a:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001781d:	85 c0                	test   eax,eax
c001781f:	74 da                	je     c00177fb <Thr::loadKernelSymbolTable(char const*)+0x6a>
c0017821:	52                   	push   edx
c0017822:	31 d2                	xor    edx,edx
c0017824:	52                   	push   edx
c0017825:	50                   	push   eax
c0017826:	53                   	push   ebx
c0017827:	e8 4c 7f ff ff       	call   c000f778 <File::seek(unsigned long long)>
c001782c:	83 c4 10             	add    esp,0x10
c001782f:	85 c0                	test   eax,eax
c0017831:	75 c8                	jne    c00177fb <Thr::loadKernelSymbolTable(char const*)+0x6a>
c0017833:	83 ec 0c             	sub    esp,0xc
c0017836:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001783a:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001783e:	31 ed                	xor    ebp,ebp
c0017840:	0f af c2             	imul   eax,edx
c0017843:	50                   	push   eax
c0017844:	e8 ed 47 ff ff       	call   c000c036 <malloc>
c0017849:	89 34 24             	mov    DWORD PTR [esp],esi
c001784c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017850:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0017852:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017856:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001785a:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001785e:	0f af c2             	imul   eax,edx
c0017861:	99                   	cdq    
c0017862:	52                   	push   edx
c0017863:	50                   	push   eax
c0017864:	53                   	push   ebx
c0017865:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017868:	83 c4 20             	add    esp,0x20
c001786b:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017873:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001787b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0017883:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001788b:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001788f:	0f 86 aa 00 00 00    	jbe    c001793f <Thr::loadKernelSymbolTable(char const*)+0x1ae>
c0017895:	0f b7 f5             	movzx  esi,bp
c0017898:	6b f6 28             	imul   esi,esi,0x28
c001789b:	03 74 24 10          	add    esi,DWORD PTR [esp+0x10]
c001789f:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00178a2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00178a6:	50                   	push   eax
c00178a7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00178ab:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c00178af:	8b 16                	mov    edx,DWORD PTR [esi]
c00178b1:	6b c0 28             	imul   eax,eax,0x28
c00178b4:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c00178b8:	89 d0                	mov    eax,edx
c00178ba:	31 d2                	xor    edx,edx
c00178bc:	52                   	push   edx
c00178bd:	50                   	push   eax
c00178be:	53                   	push   ebx
c00178bf:	e8 b4 7e ff ff       	call   c000f778 <File::seek(unsigned long long)>
c00178c4:	83 c4 0c             	add    esp,0xc
c00178c7:	6a 20                	push   0x20
c00178c9:	6a 00                	push   0x0
c00178cb:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c00178cf:	52                   	push   edx
c00178d0:	e8 fe 8d fe ff       	call   c00006d3 <memset>
c00178d5:	58                   	pop    eax
c00178d6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00178d8:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c00178dc:	51                   	push   ecx
c00178dd:	8d 54 24 40          	lea    edx,[esp+0x40]
c00178e1:	52                   	push   edx
c00178e2:	6a 00                	push   0x0
c00178e4:	6a 1f                	push   0x1f
c00178e6:	53                   	push   ebx
c00178e7:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00178ea:	83 c4 18             	add    esp,0x18
c00178ed:	68 b2 28 02 c0       	push   0xc00228b2
c00178f2:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c00178f6:	52                   	push   edx
c00178f7:	e8 c7 8e fe ff       	call   c00007c3 <strcmp>
c00178fc:	83 c4 10             	add    esp,0x10
c00178ff:	85 c0                	test   eax,eax
c0017901:	75 0f                	jne    c0017912 <Thr::loadKernelSymbolTable(char const*)+0x181>
c0017903:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017906:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001790a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001790e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017912:	50                   	push   eax
c0017913:	50                   	push   eax
c0017914:	68 ba 28 02 c0       	push   0xc00228ba
c0017919:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001791d:	50                   	push   eax
c001791e:	e8 a0 8e fe ff       	call   c00007c3 <strcmp>
c0017923:	83 c4 10             	add    esp,0x10
c0017926:	85 c0                	test   eax,eax
c0017928:	75 0f                	jne    c0017939 <Thr::loadKernelSymbolTable(char const*)+0x1a8>
c001792a:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001792d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017931:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017935:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017939:	45                   	inc    ebp
c001793a:	e9 4c ff ff ff       	jmp    c001788b <Thr::loadKernelSymbolTable(char const*)+0xfa>
c001793f:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0017944:	75 10                	jne    c0017956 <Thr::loadKernelSymbolTable(char const*)+0x1c5>
c0017946:	83 ec 0c             	sub    esp,0xc
c0017949:	68 c2 28 02 c0       	push   0xc00228c2
c001794e:	e8 9d df ff ff       	call   c00158f0 <Krnl::panic(char const*)>
c0017953:	83 c4 10             	add    esp,0x10
c0017956:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001795b:	75 10                	jne    c001796d <Thr::loadKernelSymbolTable(char const*)+0x1dc>
c001795d:	83 ec 0c             	sub    esp,0xc
c0017960:	68 c2 28 02 c0       	push   0xc00228c2
c0017965:	e8 86 df ff ff       	call   c00158f0 <Krnl::panic(char const*)>
c001796a:	83 c4 10             	add    esp,0x10
c001796d:	31 d2                	xor    edx,edx
c001796f:	50                   	push   eax
c0017970:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017974:	52                   	push   edx
c0017975:	50                   	push   eax
c0017976:	53                   	push   ebx
c0017977:	e8 fc 7d ff ff       	call   c000f778 <File::seek(unsigned long long)>
c001797c:	5a                   	pop    edx
c001797d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017981:	e8 b0 46 ff ff       	call   c000c036 <malloc>
c0017986:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001798e:	89 c1                	mov    ecx,eax
c0017990:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017994:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017998:	5e                   	pop    esi
c0017999:	8b 03                	mov    eax,DWORD PTR [ebx]
c001799b:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001799f:	55                   	push   ebp
c00179a0:	51                   	push   ecx
c00179a1:	89 4c 24 30          	mov    DWORD PTR [esp+0x30],ecx
c00179a5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00179a9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00179ad:	53                   	push   ebx
c00179ae:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00179b1:	83 c4 14             	add    esp,0x14
c00179b4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00179b8:	e8 79 46 ff ff       	call   c000c036 <malloc>
c00179bd:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00179c0:	89 c6                	mov    esi,eax
c00179c2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00179c4:	56                   	push   esi
c00179c5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00179c9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00179cd:	53                   	push   ebx
c00179ce:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00179d1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00179d5:	8b 15 80 57 02 c0    	mov    edx,DWORD PTR ds:0xc0025780
c00179db:	83 c4 1c             	add    esp,0x1c
c00179de:	c1 e8 04             	shr    eax,0x4
c00179e1:	89 04 95 00 56 02 c0 	mov    DWORD PTR [edx*4-0x3ffdaa00],eax
c00179e8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00179ec:	31 d2                	xor    edx,edx
c00179ee:	52                   	push   edx
c00179ef:	50                   	push   eax
c00179f0:	53                   	push   ebx
c00179f1:	e8 82 7d ff ff       	call   c000f778 <File::seek(unsigned long long)>
c00179f6:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00179f9:	31 d2                	xor    edx,edx
c00179fb:	56                   	push   esi
c00179fc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a00:	52                   	push   edx
c0017a01:	50                   	push   eax
c0017a02:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017a04:	53                   	push   ebx
c0017a05:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017a08:	83 c4 14             	add    esp,0x14
c0017a0b:	53                   	push   ebx
c0017a0c:	e8 07 7d ff ff       	call   c000f718 <File::close()>
c0017a11:	5d                   	pop    ebp
c0017a12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017a16:	e8 2b 46 ff ff       	call   c000c046 <free>
c0017a1b:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017a1e:	e8 23 46 ff ff       	call   c000c046 <free>
c0017a23:	a1 80 57 02 c0       	mov    eax,ds:0xc0025780
c0017a28:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0017a2c:	8d 50 01             	lea    edx,[eax+0x1]
c0017a2f:	89 0c 85 00 57 02 c0 	mov    DWORD PTR [eax*4-0x3ffda900],ecx
c0017a36:	89 15 80 57 02 c0    	mov    DWORD PTR ds:0xc0025780,edx
c0017a3c:	89 34 85 80 56 02 c0 	mov    DWORD PTR [eax*4-0x3ffda980],esi
c0017a43:	83 c4 10             	add    esp,0x10
c0017a46:	b2 01                	mov    dl,0x1
c0017a48:	83 c4 5c             	add    esp,0x5c
c0017a4b:	88 d0                	mov    al,dl
c0017a4d:	5b                   	pop    ebx
c0017a4e:	5e                   	pop    esi
c0017a4f:	5f                   	pop    edi
c0017a50:	5d                   	pop    ebp
c0017a51:	c3                   	ret    

c0017a52 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0017a52:	55                   	push   ebp
c0017a53:	57                   	push   edi
c0017a54:	56                   	push   esi
c0017a55:	53                   	push   ebx
c0017a56:	81 ec 68 03 00 00    	sub    esp,0x368
c0017a5c:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0017a63:	8b 1d d4 57 02 c0    	mov    ebx,DWORD PTR ds:0xc00257d4
c0017a69:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c0017a6d:	68 14 01 00 00       	push   0x114
c0017a72:	e8 c1 75 ff ff       	call   c000f038 <operator new(unsigned long)>
c0017a77:	83 c4 0c             	add    esp,0xc
c0017a7a:	89 c7                	mov    edi,eax
c0017a7c:	53                   	push   ebx
c0017a7d:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0017a84:	50                   	push   eax
c0017a85:	e8 cc 7b ff ff       	call   c000f656 <File::File(char const*, Process*)>
c0017a8a:	5e                   	pop    esi
c0017a8b:	5d                   	pop    ebp
c0017a8c:	6a 01                	push   0x1
c0017a8e:	57                   	push   edi
c0017a8f:	e8 26 7c ff ff       	call   c000f6ba <File::open(FileOpenMode)>
c0017a94:	83 c4 10             	add    esp,0x10
c0017a97:	85 c0                	test   eax,eax
c0017a99:	0f 85 10 07 00 00    	jne    c00181af <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017a9f:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0017aa7:	83 ec 0c             	sub    esp,0xc
c0017aaa:	6a 34                	push   0x34
c0017aac:	e8 85 45 ff ff       	call   c000c036 <malloc>
c0017ab1:	5b                   	pop    ebx
c0017ab2:	89 c5                	mov    ebp,eax
c0017ab4:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0017ab8:	8b 07                	mov    eax,DWORD PTR [edi]
c0017aba:	53                   	push   ebx
c0017abb:	55                   	push   ebp
c0017abc:	6a 00                	push   0x0
c0017abe:	6a 34                	push   0x34
c0017ac0:	57                   	push   edi
c0017ac1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017ac4:	83 c4 20             	add    esp,0x20
c0017ac7:	85 c0                	test   eax,eax
c0017ac9:	0f 85 e0 06 00 00    	jne    c00181af <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017acf:	81 7d 00 7f 45 4c 46 	cmp    DWORD PTR [ebp+0x0],0x464c457f
c0017ad6:	0f 85 d3 06 00 00    	jne    c00181af <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017adc:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0017adf:	85 c0                	test   eax,eax
c0017ae1:	0f 84 c8 06 00 00    	je     c00181af <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017ae7:	31 d2                	xor    edx,edx
c0017ae9:	51                   	push   ecx
c0017aea:	52                   	push   edx
c0017aeb:	50                   	push   eax
c0017aec:	57                   	push   edi
c0017aed:	e8 86 7c ff ff       	call   c000f778 <File::seek(unsigned long long)>
c0017af2:	83 c4 10             	add    esp,0x10
c0017af5:	85 c0                	test   eax,eax
c0017af7:	0f 85 b2 06 00 00    	jne    c00181af <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017afd:	83 ec 0c             	sub    esp,0xc
c0017b00:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0017b03:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c0017b07:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0017b0b:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0017b0f:	0f af c2             	imul   eax,edx
c0017b12:	50                   	push   eax
c0017b13:	e8 1e 45 ff ff       	call   c000c036 <malloc>
c0017b18:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017b1b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017b1f:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0017b21:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017b25:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c0017b29:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0017b2d:	0f af c2             	imul   eax,edx
c0017b30:	99                   	cdq    
c0017b31:	52                   	push   edx
c0017b32:	50                   	push   eax
c0017b33:	57                   	push   edi
c0017b34:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017b37:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
c0017b3a:	83 c4 20             	add    esp,0x20
c0017b3d:	85 c0                	test   eax,eax
c0017b3f:	0f 84 6a 06 00 00    	je     c00181af <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017b45:	52                   	push   edx
c0017b46:	31 d2                	xor    edx,edx
c0017b48:	52                   	push   edx
c0017b49:	50                   	push   eax
c0017b4a:	57                   	push   edi
c0017b4b:	e8 28 7c ff ff       	call   c000f778 <File::seek(unsigned long long)>
c0017b50:	83 c4 10             	add    esp,0x10
c0017b53:	85 c0                	test   eax,eax
c0017b55:	0f 85 54 06 00 00    	jne    c00181af <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017b5b:	83 ec 0c             	sub    esp,0xc
c0017b5e:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c0017b62:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0017b66:	31 f6                	xor    esi,esi
c0017b68:	0f af c2             	imul   eax,edx
c0017b6b:	50                   	push   eax
c0017b6c:	e8 c5 44 ff ff       	call   c000c036 <malloc>
c0017b71:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017b74:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017b78:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0017b7a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017b7e:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c0017b82:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0017b86:	0f af c2             	imul   eax,edx
c0017b89:	99                   	cdq    
c0017b8a:	52                   	push   edx
c0017b8b:	50                   	push   eax
c0017b8c:	57                   	push   edi
c0017b8d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017b90:	83 c4 20             	add    esp,0x20
c0017b93:	66 39 75 2c          	cmp    WORD PTR [ebp+0x2c],si
c0017b97:	0f 86 af 00 00 00    	jbe    c0017c4c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1fa>
c0017b9d:	0f b7 de             	movzx  ebx,si
c0017ba0:	c1 e3 05             	shl    ebx,0x5
c0017ba3:	03 5c 24 1c          	add    ebx,DWORD PTR [esp+0x1c]
c0017ba7:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c0017baa:	0f 85 96 00 00 00    	jne    c0017c46 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1f4>
c0017bb0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017bb3:	31 d2                	xor    edx,edx
c0017bb5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017bb9:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017bbc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017bc0:	50                   	push   eax
c0017bc1:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0017bc4:	52                   	push   edx
c0017bc5:	50                   	push   eax
c0017bc6:	57                   	push   edi
c0017bc7:	e8 ac 7b ff ff       	call   c000f778 <File::seek(unsigned long long)>
c0017bcc:	83 c4 10             	add    esp,0x10
c0017bcf:	85 c0                	test   eax,eax
c0017bd1:	0f 85 d8 05 00 00    	jne    c00181af <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017bd7:	52                   	push   edx
c0017bd8:	52                   	push   edx
c0017bd9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017bdd:	68 dc 28 02 c0       	push   0xc00228dc
c0017be2:	e8 40 75 ff ff       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c0017be7:	8b 84 24 84 03 00 00 	mov    eax,DWORD PTR [esp+0x384]
c0017bee:	31 d2                	xor    edx,edx
c0017bf0:	2b 44 24 3c          	sub    eax,DWORD PTR [esp+0x3c]
c0017bf4:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0017bf8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017bfc:	59                   	pop    ecx
c0017bfd:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0017bff:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017c06:	50                   	push   eax
c0017c07:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017c0b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017c0f:	52                   	push   edx
c0017c10:	50                   	push   eax
c0017c11:	57                   	push   edi
c0017c12:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017c15:	83 c4 18             	add    esp,0x18
c0017c18:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0017c1b:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0017c1e:	50                   	push   eax
c0017c1f:	68 00 29 02 c0       	push   0xc0022900
c0017c24:	e8 fe 74 ff ff       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c0017c29:	83 c4 0c             	add    esp,0xc
c0017c2c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0017c2f:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0017c32:	50                   	push   eax
c0017c33:	6a 00                	push   0x0
c0017c35:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017c39:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0017c3d:	50                   	push   eax
c0017c3e:	e8 90 8a fe ff       	call   c00006d3 <memset>
c0017c43:	83 c4 10             	add    esp,0x10
c0017c46:	46                   	inc    esi
c0017c47:	e9 47 ff ff ff       	jmp    c0017b93 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x141>
c0017c4c:	31 db                	xor    ebx,ebx
c0017c4e:	50                   	push   eax
c0017c4f:	68 00 01 00 00       	push   0x100
c0017c54:	6a 00                	push   0x0
c0017c56:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0017c5a:	50                   	push   eax
c0017c5b:	e8 73 8a fe ff       	call   c00006d3 <memset>
c0017c60:	83 c4 0c             	add    esp,0xc
c0017c63:	68 00 01 00 00       	push   0x100
c0017c68:	6a 00                	push   0x0
c0017c6a:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0017c71:	50                   	push   eax
c0017c72:	e8 5c 8a fe ff       	call   c00006d3 <memset>
c0017c77:	83 c4 10             	add    esp,0x10
c0017c7a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0017c82:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0017c8a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0017c92:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0017c9a:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017ca2:	66 39 5d 30          	cmp    WORD PTR [ebp+0x30],bx
c0017ca6:	0f 86 2f 01 00 00    	jbe    c0017ddb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x389>
c0017cac:	0f b7 f3             	movzx  esi,bx
c0017caf:	6b f6 28             	imul   esi,esi,0x28
c0017cb2:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0017cb6:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0017cb9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017cbd:	50                   	push   eax
c0017cbe:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0017cc2:	0f b7 55 32          	movzx  edx,WORD PTR [ebp+0x32]
c0017cc6:	8b 06                	mov    eax,DWORD PTR [esi]
c0017cc8:	6b d2 28             	imul   edx,edx,0x28
c0017ccb:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0017ccf:	31 d2                	xor    edx,edx
c0017cd1:	52                   	push   edx
c0017cd2:	50                   	push   eax
c0017cd3:	57                   	push   edi
c0017cd4:	e8 9f 7a ff ff       	call   c000f778 <File::seek(unsigned long long)>
c0017cd9:	83 c4 0c             	add    esp,0xc
c0017cdc:	6a 20                	push   0x20
c0017cde:	6a 00                	push   0x0
c0017ce0:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0017ce7:	51                   	push   ecx
c0017ce8:	e8 e6 89 fe ff       	call   c00006d3 <memset>
c0017ced:	58                   	pop    eax
c0017cee:	8b 07                	mov    eax,DWORD PTR [edi]
c0017cf0:	8d 54 24 58          	lea    edx,[esp+0x58]
c0017cf4:	52                   	push   edx
c0017cf5:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0017cfc:	51                   	push   ecx
c0017cfd:	6a 00                	push   0x0
c0017cff:	6a 1f                	push   0x1f
c0017d01:	57                   	push   edi
c0017d02:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017d05:	83 c4 1c             	add    esp,0x1c
c0017d08:	6a 09                	push   0x9
c0017d0a:	68 1d 29 02 c0       	push   0xc002291d
c0017d0f:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0017d16:	51                   	push   ecx
c0017d17:	e8 1e 89 fe ff       	call   c000063a <memcmp>
c0017d1c:	83 c4 10             	add    esp,0x10
c0017d1f:	85 c0                	test   eax,eax
c0017d21:	75 21                	jne    c0017d44 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2f2>
c0017d23:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017d27:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0017d2b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017d2f:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0017d33:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017d36:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c0017d3d:	89 c8                	mov    eax,ecx
c0017d3f:	40                   	inc    eax
c0017d40:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017d44:	50                   	push   eax
c0017d45:	6a 09                	push   0x9
c0017d47:	68 27 29 02 c0       	push   0xc0022927
c0017d4c:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017d53:	50                   	push   eax
c0017d54:	e8 e1 88 fe ff       	call   c000063a <memcmp>
c0017d59:	83 c4 10             	add    esp,0x10
c0017d5c:	85 c0                	test   eax,eax
c0017d5e:	75 21                	jne    c0017d81 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x32f>
c0017d60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017d64:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0017d68:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017d6c:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0017d70:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017d73:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c0017d7a:	89 c8                	mov    eax,ecx
c0017d7c:	40                   	inc    eax
c0017d7d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017d81:	50                   	push   eax
c0017d82:	50                   	push   eax
c0017d83:	68 b2 28 02 c0       	push   0xc00228b2
c0017d88:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017d8f:	50                   	push   eax
c0017d90:	e8 2e 8a fe ff       	call   c00007c3 <strcmp>
c0017d95:	83 c4 10             	add    esp,0x10
c0017d98:	85 c0                	test   eax,eax
c0017d9a:	75 0f                	jne    c0017dab <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x359>
c0017d9c:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017d9f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017da3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017da7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017dab:	50                   	push   eax
c0017dac:	50                   	push   eax
c0017dad:	68 ba 28 02 c0       	push   0xc00228ba
c0017db2:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017db9:	50                   	push   eax
c0017dba:	e8 04 8a fe ff       	call   c00007c3 <strcmp>
c0017dbf:	83 c4 10             	add    esp,0x10
c0017dc2:	85 c0                	test   eax,eax
c0017dc4:	75 0f                	jne    c0017dd5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x383>
c0017dc6:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017dc9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017dcd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017dd1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017dd5:	43                   	inc    ebx
c0017dd6:	e9 c7 fe ff ff       	jmp    c0017ca2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x250>
c0017ddb:	31 d2                	xor    edx,edx
c0017ddd:	50                   	push   eax
c0017dde:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017de2:	52                   	push   edx
c0017de3:	50                   	push   eax
c0017de4:	57                   	push   edi
c0017de5:	e8 8e 79 ff ff       	call   c000f778 <File::seek(unsigned long long)>
c0017dea:	5a                   	pop    edx
c0017deb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017def:	e8 42 42 ff ff       	call   c000c036 <malloc>
c0017df4:	31 d2                	xor    edx,edx
c0017df6:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0017dfa:	59                   	pop    ecx
c0017dfb:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0017dfd:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0017e01:	53                   	push   ebx
c0017e02:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017e06:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017e0a:	52                   	push   edx
c0017e0b:	50                   	push   eax
c0017e0c:	57                   	push   edi
c0017e0d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017e10:	83 c4 14             	add    esp,0x14
c0017e13:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017e17:	e8 1a 42 ff ff       	call   c000c036 <malloc>
c0017e1c:	31 d2                	xor    edx,edx
c0017e1e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017e22:	83 c4 0c             	add    esp,0xc
c0017e25:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017e29:	52                   	push   edx
c0017e2a:	50                   	push   eax
c0017e2b:	57                   	push   edi
c0017e2c:	e8 47 79 ff ff       	call   c000f778 <File::seek(unsigned long long)>
c0017e31:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017e34:	31 d2                	xor    edx,edx
c0017e36:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017e3a:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0017e3c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017e40:	52                   	push   edx
c0017e41:	50                   	push   eax
c0017e42:	57                   	push   edi
c0017e43:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017e46:	83 c4 20             	add    esp,0x20
c0017e49:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0017e51:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017e55:	39 54 24 04          	cmp    DWORD PTR [esp+0x4],edx
c0017e59:	0f 84 54 03 00 00    	je     c00181b3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x761>
c0017e5f:	8b 84 94 50 01 00 00 	mov    eax,DWORD PTR [esp+edx*4+0x150]
c0017e66:	31 d2                	xor    edx,edx
c0017e68:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017e6c:	c1 e8 03             	shr    eax,0x3
c0017e6f:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017e73:	50                   	push   eax
c0017e74:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017e78:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0017e7c:	52                   	push   edx
c0017e7d:	50                   	push   eax
c0017e7e:	57                   	push   edi
c0017e7f:	e8 f4 78 ff ff       	call   c000f778 <File::seek(unsigned long long)>
c0017e84:	58                   	pop    eax
c0017e85:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e89:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0017e90:	e8 a1 41 ff ff       	call   c000c036 <malloc>
c0017e95:	31 d2                	xor    edx,edx
c0017e97:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017e9b:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0017e9d:	58                   	pop    eax
c0017e9e:	8d 44 24 58          	lea    eax,[esp+0x58]
c0017ea2:	50                   	push   eax
c0017ea3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017ea7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017eab:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0017eb2:	52                   	push   edx
c0017eb3:	50                   	push   eax
c0017eb4:	57                   	push   edi
c0017eb5:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017eb8:	83 c4 20             	add    esp,0x20
c0017ebb:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0017ec3:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0017ec7:	39 4c 24 28          	cmp    DWORD PTR [esp+0x28],ecx
c0017ecb:	0f 8d c6 02 00 00    	jge    c0018197 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x745>
c0017ed1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017ed5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017ed9:	31 db                	xor    ebx,ebx
c0017edb:	8b 04 d0             	mov    eax,DWORD PTR [eax+edx*8]
c0017ede:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017ee2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017ee6:	8b 44 d0 04          	mov    eax,DWORD PTR [eax+edx*8+0x4]
c0017eea:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017eee:	c1 e8 08             	shr    eax,0x8
c0017ef1:	89 c6                	mov    esi,eax
c0017ef3:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017ef7:	c1 e6 04             	shl    esi,0x4
c0017efa:	03 74 24 38          	add    esi,DWORD PTR [esp+0x38]
c0017efe:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0017f01:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017f05:	85 c0                	test   eax,eax
c0017f07:	0f 85 17 01 00 00    	jne    c0018024 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d2>
c0017f0d:	83 ec 0c             	sub    esp,0xc
c0017f10:	b3 01                	mov    bl,0x1
c0017f12:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017f16:	03 06                	add    eax,DWORD PTR [esi]
c0017f18:	50                   	push   eax
c0017f19:	e8 24 f8 ff ff       	call   c0017742 <Thr::getAddressOfKernelSymbol(char const*)>
c0017f1e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017f22:	83 c4 10             	add    esp,0x10
c0017f25:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0017f2a:	0f 85 f4 00 00 00    	jne    c0018024 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d2>
c0017f30:	50                   	push   eax
c0017f31:	50                   	push   eax
c0017f32:	68 31 29 02 c0       	push   0xc0022931
c0017f37:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017f3b:	03 06                	add    eax,DWORD PTR [esi]
c0017f3d:	50                   	push   eax
c0017f3e:	e8 80 88 fe ff       	call   c00007c3 <strcmp>
c0017f43:	83 c4 10             	add    esp,0x10
c0017f46:	85 c0                	test   eax,eax
c0017f48:	75 0a                	jne    c0017f54 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x502>
c0017f4a:	b8 cc f1 01 c0       	mov    eax,0xc001f1cc
c0017f4f:	e9 ca 00 00 00       	jmp    c001801e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5cc>
c0017f54:	50                   	push   eax
c0017f55:	50                   	push   eax
c0017f56:	68 3b 29 02 c0       	push   0xc002293b
c0017f5b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017f5f:	03 06                	add    eax,DWORD PTR [esi]
c0017f61:	50                   	push   eax
c0017f62:	e8 5c 88 fe ff       	call   c00007c3 <strcmp>
c0017f67:	83 c4 10             	add    esp,0x10
c0017f6a:	85 c0                	test   eax,eax
c0017f6c:	75 0a                	jne    c0017f78 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x526>
c0017f6e:	b8 00 ef 01 c0       	mov    eax,0xc001ef00
c0017f73:	e9 a6 00 00 00       	jmp    c001801e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5cc>
c0017f78:	53                   	push   ebx
c0017f79:	53                   	push   ebx
c0017f7a:	68 44 29 02 c0       	push   0xc0022944
c0017f7f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017f83:	03 06                	add    eax,DWORD PTR [esi]
c0017f85:	50                   	push   eax
c0017f86:	e8 38 88 fe ff       	call   c00007c3 <strcmp>
c0017f8b:	83 c4 10             	add    esp,0x10
c0017f8e:	85 c0                	test   eax,eax
c0017f90:	75 0a                	jne    c0017f9c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54a>
c0017f92:	b8 cc f2 01 c0       	mov    eax,0xc001f2cc
c0017f97:	e9 82 00 00 00       	jmp    c001801e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5cc>
c0017f9c:	51                   	push   ecx
c0017f9d:	51                   	push   ecx
c0017f9e:	68 4e 29 02 c0       	push   0xc002294e
c0017fa3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017fa7:	03 06                	add    eax,DWORD PTR [esi]
c0017fa9:	50                   	push   eax
c0017faa:	e8 14 88 fe ff       	call   c00007c3 <strcmp>
c0017faf:	83 c4 10             	add    esp,0x10
c0017fb2:	85 c0                	test   eax,eax
c0017fb4:	74 63                	je     c0018019 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5c7>
c0017fb6:	50                   	push   eax
c0017fb7:	50                   	push   eax
c0017fb8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017fbc:	03 06                	add    eax,DWORD PTR [esi]
c0017fbe:	50                   	push   eax
c0017fbf:	68 57 29 02 c0       	push   0xc0022957
c0017fc4:	e8 5e 71 ff ff       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c0017fc9:	58                   	pop    eax
c0017fca:	5a                   	pop    edx
c0017fcb:	68 71 29 02 c0       	push   0xc0022971
c0017fd0:	8d 9c 24 5c 02 00 00 	lea    ebx,[esp+0x25c]
c0017fd7:	53                   	push   ebx
c0017fd8:	e8 95 87 fe ff       	call   c0000772 <strcpy>
c0017fdd:	59                   	pop    ecx
c0017fde:	58                   	pop    eax
c0017fdf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017fe3:	03 06                	add    eax,DWORD PTR [esi]
c0017fe5:	50                   	push   eax
c0017fe6:	53                   	push   ebx
c0017fe7:	e8 3d 88 fe ff       	call   c0000829 <strcat>
c0017fec:	58                   	pop    eax
c0017fed:	5a                   	pop    edx
c0017fee:	68 07 2a 02 c0       	push   0xc0022a07
c0017ff3:	53                   	push   ebx
c0017ff4:	e8 30 88 fe ff       	call   c0000829 <strcat>
c0017ff9:	83 c4 10             	add    esp,0x10
c0017ffc:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c0018001:	0f 84 4b 01 00 00    	je     c0018152 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0018007:	83 ec 0c             	sub    esp,0xc
c001800a:	53                   	push   ebx
c001800b:	e8 e0 d8 ff ff       	call   c00158f0 <Krnl::panic(char const*)>
c0018010:	83 c4 10             	add    esp,0x10
c0018013:	8a 5c 24 27          	mov    bl,BYTE PTR [esp+0x27]
c0018017:	eb 0b                	jmp    c0018024 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d2>
c0018019:	b8 4c f0 01 c0       	mov    eax,0xc001f04c
c001801e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018022:	b3 01                	mov    bl,0x1
c0018024:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c0018029:	0f 85 80 00 00 00    	jne    c00180af <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x65d>
c001802f:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c0018036:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001803a:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001803e:	01 ce                	add    esi,ecx
c0018040:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c0018048:	8b 06                	mov    eax,DWORD PTR [esi]
c001804a:	0f 94 c2             	sete   dl
c001804d:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c0018055:	0f 94 44 24 18       	sete   BYTE PTR [esp+0x18]
c001805a:	0b 54 24 18          	or     edx,DWORD PTR [esp+0x18]
c001805e:	84 db                	test   bl,bl
c0018060:	74 31                	je     c0018093 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x641>
c0018062:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0018066:	01 c3                	add    ebx,eax
c0018068:	84 d2                	test   dl,dl
c001806a:	75 0a                	jne    c0018076 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x624>
c001806c:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0018070:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c0018074:	76 32                	jbe    c00180a8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x656>
c0018076:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001807b:	0f 84 d1 00 00 00    	je     c0018152 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0018081:	83 ec 0c             	sub    esp,0xc
c0018084:	68 88 29 02 c0       	push   0xc0022988
c0018089:	e8 62 d8 ff ff       	call   c00158f0 <Krnl::panic(char const*)>
c001808e:	83 c4 10             	add    esp,0x10
c0018091:	eb 15                	jmp    c00180a8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x656>
c0018093:	8d 1c 08             	lea    ebx,[eax+ecx*1]
c0018096:	84 d2                	test   dl,dl
c0018098:	75 0e                	jne    c00180a8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x656>
c001809a:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c001809e:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c00180a2:	77 04                	ja     c00180a8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x656>
c00180a4:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c00180a8:	89 1e                	mov    DWORD PTR [esi],ebx
c00180aa:	e9 df 00 00 00       	jmp    c001818e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73c>
c00180af:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00180b4:	75 6e                	jne    c0018124 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d2>
c00180b6:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c00180bd:	2b 74 24 2c          	sub    esi,DWORD PTR [esp+0x2c]
c00180c1:	03 74 24 30          	add    esi,DWORD PTR [esp+0x30]
c00180c5:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c00180cd:	74 17                	je     c00180e6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x694>
c00180cf:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c00180d7:	74 0d                	je     c00180e6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x694>
c00180d9:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c00180dd:	83 e8 04             	sub    eax,0x4
c00180e0:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c00180e4:	76 17                	jbe    c00180fd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6ab>
c00180e6:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c00180eb:	74 65                	je     c0018152 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c00180ed:	83 ec 0c             	sub    esp,0xc
c00180f0:	68 a4 29 02 c0       	push   0xc00229a4
c00180f5:	e8 f6 d7 ff ff       	call   c00158f0 <Krnl::panic(char const*)>
c00180fa:	83 c4 10             	add    esp,0x10
c00180fd:	8b 16                	mov    edx,DWORD PTR [esi]
c00180ff:	84 db                	test   bl,bl
c0018101:	74 13                	je     c0018116 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6c4>
c0018103:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018107:	2b 84 24 74 03 00 00 	sub    eax,DWORD PTR [esp+0x374]
c001810e:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c0018112:	01 d0                	add    eax,edx
c0018114:	eb 06                	jmp    c001811c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6ca>
c0018116:	89 d0                	mov    eax,edx
c0018118:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c001811c:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0018120:	89 06                	mov    DWORD PTR [esi],eax
c0018122:	eb 6a                	jmp    c001818e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73c>
c0018124:	50                   	push   eax
c0018125:	50                   	push   eax
c0018126:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c001812b:	50                   	push   eax
c001812c:	68 c0 29 02 c0       	push   0xc00229c0
c0018131:	e8 f1 6f ff ff       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c0018136:	83 c4 10             	add    esp,0x10
c0018139:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001813e:	74 12                	je     c0018152 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0018140:	83 ec 0c             	sub    esp,0xc
c0018143:	68 cb 29 02 c0       	push   0xc00229cb
c0018148:	e8 a3 d7 ff ff       	call   c00158f0 <Krnl::panic(char const*)>
c001814d:	83 c4 10             	add    esp,0x10
c0018150:	eb 3c                	jmp    c001818e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73c>
c0018152:	83 ec 0c             	sub    esp,0xc
c0018155:	57                   	push   edi
c0018156:	e8 bd 75 ff ff       	call   c000f718 <File::close()>
c001815b:	89 3c 24             	mov    DWORD PTR [esp],edi
c001815e:	8b 07                	mov    eax,DWORD PTR [edi]
c0018160:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0018163:	59                   	pop    ecx
c0018164:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0018168:	e8 d9 3e ff ff       	call   c000c046 <free>
c001816d:	5b                   	pop    ebx
c001816e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0018172:	e8 cf 3e ff ff       	call   c000c046 <free>
c0018177:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001817a:	e8 c7 3e ff ff       	call   c000c046 <free>
c001817f:	5e                   	pop    esi
c0018180:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0018184:	e8 bd 3e ff ff       	call   c000c046 <free>
c0018189:	83 c4 10             	add    esp,0x10
c001818c:	eb 21                	jmp    c00181af <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c001818e:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c0018192:	e9 2c fd ff ff       	jmp    c0017ec3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x471>
c0018197:	83 ec 0c             	sub    esp,0xc
c001819a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001819e:	e8 a3 3e ff ff       	call   c000c046 <free>
c00181a3:	ff 44 24 30          	inc    DWORD PTR [esp+0x30]
c00181a7:	83 c4 10             	add    esp,0x10
c00181aa:	e9 a2 fc ff ff       	jmp    c0017e51 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3ff>
c00181af:	31 c0                	xor    eax,eax
c00181b1:	eb 32                	jmp    c00181e5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x793>
c00181b3:	83 ec 0c             	sub    esp,0xc
c00181b6:	57                   	push   edi
c00181b7:	e8 5c 75 ff ff       	call   c000f718 <File::close()>
c00181bc:	89 3c 24             	mov    DWORD PTR [esp],edi
c00181bf:	8b 07                	mov    eax,DWORD PTR [edi]
c00181c1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00181c4:	58                   	pop    eax
c00181c5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00181c9:	e8 78 3e ff ff       	call   c000c046 <free>
c00181ce:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00181d1:	e8 70 3e ff ff       	call   c000c046 <free>
c00181d6:	5a                   	pop    edx
c00181d7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00181db:	e8 66 3e ff ff       	call   c000c046 <free>
c00181e0:	83 c4 10             	add    esp,0x10
c00181e3:	b0 01                	mov    al,0x1
c00181e5:	81 c4 5c 03 00 00    	add    esp,0x35c
c00181eb:	5b                   	pop    ebx
c00181ec:	5e                   	pop    esi
c00181ed:	5f                   	pop    edi
c00181ee:	5d                   	pop    ebp
c00181ef:	c3                   	ret    

c00181f0 <Thr::getDriverBaseFromAddress(unsigned long)>:
c00181f0:	56                   	push   esi
c00181f1:	31 d2                	xor    edx,edx
c00181f3:	53                   	push   ebx
c00181f4:	8b 1d e0 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fe0
c00181fa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00181fe:	39 d3                	cmp    ebx,edx
c0018200:	7e 1b                	jle    c001821d <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0018202:	8b 04 95 00 52 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdae00]
c0018209:	39 c8                	cmp    eax,ecx
c001820b:	77 0d                	ja     c001821a <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001820d:	8b 34 95 00 50 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffdb000]
c0018214:	01 c6                	add    esi,eax
c0018216:	39 ce                	cmp    esi,ecx
c0018218:	77 05                	ja     c001821f <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001821a:	42                   	inc    edx
c001821b:	eb e1                	jmp    c00181fe <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001821d:	31 c0                	xor    eax,eax
c001821f:	5b                   	pop    ebx
c0018220:	5e                   	pop    esi
c0018221:	c3                   	ret    

c0018222 <Thr::getDriverNameFromAddress(unsigned long)>:
c0018222:	53                   	push   ebx
c0018223:	31 c0                	xor    eax,eax
c0018225:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0018229:	8b 1d e0 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fe0
c001822f:	39 c3                	cmp    ebx,eax
c0018231:	7e 22                	jle    c0018255 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c0018233:	8b 14 85 00 52 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdae00]
c001823a:	39 ca                	cmp    edx,ecx
c001823c:	77 14                	ja     c0018252 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001823e:	03 14 85 00 50 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffdb000]
c0018245:	39 ca                	cmp    edx,ecx
c0018247:	76 09                	jbe    c0018252 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0018249:	8b 04 85 00 54 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdac00]
c0018250:	eb 05                	jmp    c0018257 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0018252:	40                   	inc    eax
c0018253:	eb da                	jmp    c001822f <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0018255:	31 c0                	xor    eax,eax
c0018257:	5b                   	pop    ebx
c0018258:	c3                   	ret    

c0018259 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0018259:	53                   	push   ebx
c001825a:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001825e:	53                   	push   ebx
c001825f:	e8 8c ff ff ff       	call   c00181f0 <Thr::getDriverBaseFromAddress(unsigned long)>
c0018264:	5a                   	pop    edx
c0018265:	31 d2                	xor    edx,edx
c0018267:	85 c0                	test   eax,eax
c0018269:	74 04                	je     c001826f <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001826b:	89 da                	mov    edx,ebx
c001826d:	29 c2                	sub    edx,eax
c001826f:	89 d0                	mov    eax,edx
c0018271:	5b                   	pop    ebx
c0018272:	c3                   	ret    

c0018273 <Thr::loadDLL(char const*, bool)>:
c0018273:	55                   	push   ebp
c0018274:	57                   	push   edi
c0018275:	56                   	push   esi
c0018276:	53                   	push   ebx
c0018277:	81 ec 34 01 00 00    	sub    esp,0x134
c001827d:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0018284:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001828b:	56                   	push   esi
c001828c:	68 e3 29 02 c0       	push   0xc00229e3
c0018291:	e8 91 6e ff ff       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c0018296:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001829d:	e8 96 6d ff ff       	call   c000f038 <operator new(unsigned long)>
c00182a2:	83 c4 0c             	add    esp,0xc
c00182a5:	89 c3                	mov    ebx,eax
c00182a7:	ff 35 d4 57 02 c0    	push   DWORD PTR ds:0xc00257d4
c00182ad:	56                   	push   esi
c00182ae:	50                   	push   eax
c00182af:	e8 a2 73 ff ff       	call   c000f656 <File::File(char const*, Process*)>
c00182b4:	83 c4 0c             	add    esp,0xc
c00182b7:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c00182bb:	50                   	push   eax
c00182bc:	8d 44 24 20          	lea    eax,[esp+0x20]
c00182c0:	50                   	push   eax
c00182c1:	53                   	push   ebx
c00182c2:	e8 9f 76 ff ff       	call   c000f966 <File::stat(unsigned long long*, bool*)>
c00182c7:	8b 03                	mov    eax,DWORD PTR [ebx]
c00182c9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00182cc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00182cf:	83 c4 10             	add    esp,0x10
c00182d2:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c00182d7:	75 0a                	jne    c00182e3 <Thr::loadDLL(char const*, bool)+0x70>
c00182d9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00182dd:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c00182e1:	75 3c                	jne    c001831f <Thr::loadDLL(char const*, bool)+0xac>
c00182e3:	89 e8                	mov    eax,ebp
c00182e5:	84 c0                	test   al,al
c00182e7:	0f 84 3d 01 00 00    	je     c001842a <Thr::loadDLL(char const*, bool)+0x1b7>
c00182ed:	50                   	push   eax
c00182ee:	50                   	push   eax
c00182ef:	68 f4 29 02 c0       	push   0xc00229f4
c00182f4:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c00182f8:	53                   	push   ebx
c00182f9:	e8 74 84 fe ff       	call   c0000772 <strcpy>
c00182fe:	58                   	pop    eax
c00182ff:	5a                   	pop    edx
c0018300:	56                   	push   esi
c0018301:	53                   	push   ebx
c0018302:	e8 22 85 fe ff       	call   c0000829 <strcat>
c0018307:	59                   	pop    ecx
c0018308:	5f                   	pop    edi
c0018309:	68 07 2a 02 c0       	push   0xc0022a07
c001830e:	53                   	push   ebx
c001830f:	e8 15 85 fe ff       	call   c0000829 <strcat>
c0018314:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018317:	e8 d4 d5 ff ff       	call   c00158f0 <Krnl::panic(char const*)>
c001831c:	83 c4 10             	add    esp,0x10
c001831f:	e8 c1 5f ff ff       	call   c000e2e5 <Virt::getAKernelVAS()>
c0018324:	51                   	push   ecx
c0018325:	6a 03                	push   0x3
c0018327:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001832b:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001832f:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c0018335:	83 d3 00             	adc    ebx,0x0
c0018338:	89 ca                	mov    edx,ecx
c001833a:	89 d1                	mov    ecx,edx
c001833c:	0f ac d9 0c          	shrd   ecx,ebx,0xc
c0018340:	51                   	push   ecx
c0018341:	50                   	push   eax
c0018342:	e8 e1 65 ff ff       	call   c000e928 <VAS::allocatePages(int, int)>
c0018347:	89 34 24             	mov    DWORD PTR [esp],esi
c001834a:	89 c3                	mov    ebx,eax
c001834c:	e8 9f 83 fe ff       	call   c00006f0 <strlen>
c0018351:	8b 3d e0 4f 02 c0    	mov    edi,DWORD PTR ds:0xc0024fe0
c0018357:	40                   	inc    eax
c0018358:	89 04 24             	mov    DWORD PTR [esp],eax
c001835b:	e8 d6 3c ff ff       	call   c000c036 <malloc>
c0018360:	89 04 bd 00 54 02 c0 	mov    DWORD PTR [edi*4-0x3ffdac00],eax
c0018367:	5f                   	pop    edi
c0018368:	58                   	pop    eax
c0018369:	a1 e0 4f 02 c0       	mov    eax,ds:0xc0024fe0
c001836e:	56                   	push   esi
c001836f:	ff 34 85 00 54 02 c0 	push   DWORD PTR [eax*4-0x3ffdac00]
c0018376:	e8 f7 83 fe ff       	call   c0000772 <strcpy>
c001837b:	a1 e0 4f 02 c0       	mov    eax,ds:0xc0024fe0
c0018380:	8d 50 01             	lea    edx,[eax+0x1]
c0018383:	89 1c 85 00 52 02 c0 	mov    DWORD PTR [eax*4-0x3ffdae00],ebx
c001838a:	89 15 e0 4f 02 c0    	mov    DWORD PTR ds:0xc0024fe0,edx
c0018390:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018394:	83 c4 0c             	add    esp,0xc
c0018397:	89 14 85 00 50 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb000],edx
c001839e:	6a 01                	push   0x1
c00183a0:	53                   	push   ebx
c00183a1:	56                   	push   esi
c00183a2:	e8 ab f6 ff ff       	call   c0017a52 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c00183a7:	83 c4 10             	add    esp,0x10
c00183aa:	89 c7                	mov    edi,eax
c00183ac:	fe c8                	dec    al
c00183ae:	74 16                	je     c00183c6 <Thr::loadDLL(char const*, bool)+0x153>
c00183b0:	89 e8                	mov    eax,ebp
c00183b2:	84 c0                	test   al,al
c00183b4:	74 10                	je     c00183c6 <Thr::loadDLL(char const*, bool)+0x153>
c00183b6:	83 ec 0c             	sub    esp,0xc
c00183b9:	68 09 2a 02 c0       	push   0xc0022a09
c00183be:	e8 2d d5 ff ff       	call   c00158f0 <Krnl::panic(char const*)>
c00183c3:	83 c4 10             	add    esp,0x10
c00183c6:	31 f6                	xor    esi,esi
c00183c8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00183cc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00183d0:	05 ff 0f 00 00       	add    eax,0xfff
c00183d5:	83 d2 00             	adc    edx,0x0
c00183d8:	0f ac d0 0c          	shrd   eax,edx,0xc
c00183dc:	c1 ea 0c             	shr    edx,0xc
c00183df:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00183e3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00183e7:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00183eb:	ba 00 00 00 00       	mov    edx,0x0
c00183f0:	89 d0                	mov    eax,edx
c00183f2:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00183f6:	73 2c                	jae    c0018424 <Thr::loadDLL(char const*, bool)+0x1b1>
c00183f8:	e8 e8 5e ff ff       	call   c000e2e5 <Virt::getAKernelVAS()>
c00183fd:	89 f5                	mov    ebp,esi
c00183ff:	c1 e5 0c             	shl    ebp,0xc
c0018402:	52                   	push   edx
c0018403:	01 dd                	add    ebp,ebx
c0018405:	52                   	push   edx
c0018406:	55                   	push   ebp
c0018407:	50                   	push   eax
c0018408:	e8 83 60 ff ff       	call   c000e490 <VAS::getPageTableEntry(unsigned long)>
c001840d:	83 c4 10             	add    esp,0x10
c0018410:	f6 00 60             	test   BYTE PTR [eax],0x60
c0018413:	75 0c                	jne    c0018421 <Thr::loadDLL(char const*, bool)+0x1ae>
c0018415:	83 ec 0c             	sub    esp,0xc
c0018418:	55                   	push   ebp
c0018419:	e8 38 41 ff ff       	call   c000c556 <Phys::freePage(unsigned long)>
c001841e:	83 c4 10             	add    esp,0x10
c0018421:	46                   	inc    esi
c0018422:	eb a4                	jmp    c00183c8 <Thr::loadDLL(char const*, bool)+0x155>
c0018424:	89 f8                	mov    eax,edi
c0018426:	84 c0                	test   al,al
c0018428:	75 02                	jne    c001842c <Thr::loadDLL(char const*, bool)+0x1b9>
c001842a:	31 db                	xor    ebx,ebx
c001842c:	81 c4 2c 01 00 00    	add    esp,0x12c
c0018432:	89 d8                	mov    eax,ebx
c0018434:	5b                   	pop    ebx
c0018435:	5e                   	pop    esi
c0018436:	5f                   	pop    edi
c0018437:	5d                   	pop    ebp
c0018438:	c3                   	ret    

c0018439 <Thr::executeDLL(unsigned long, void*)>:
c0018439:	56                   	push   esi
c001843a:	53                   	push   ebx
c001843b:	51                   	push   ecx
c001843c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018440:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0018444:	85 db                	test   ebx,ebx
c0018446:	75 10                	jne    c0018458 <Thr::executeDLL(unsigned long, void*)+0x1f>
c0018448:	83 ec 0c             	sub    esp,0xc
c001844b:	68 28 2a 02 c0       	push   0xc0022a28
c0018450:	e8 9b d4 ff ff       	call   c00158f0 <Krnl::panic(char const*)>
c0018455:	83 c4 10             	add    esp,0x10
c0018458:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001845c:	89 d8                	mov    eax,ebx
c001845e:	5a                   	pop    edx
c001845f:	5b                   	pop    ebx
c0018460:	5e                   	pop    esi
c0018461:	ff e0                	jmp    eax
c0018463:	90                   	nop

c0018464 <changeTSS>:
c0018464:	83 ec 0c             	sub    esp,0xc
c0018467:	e8 04 c3 ff ff       	call   c0014770 <thisCPU()>
c001846c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0018472:	83 ec 08             	sub    esp,0x8
c0018475:	8b 4a 3c             	mov    ecx,DWORD PTR [edx+0x3c]
c0018478:	05 7c 11 00 00       	add    eax,0x117c
c001847d:	c1 e1 15             	shl    ecx,0x15
c0018480:	ba 00 00 e8 01       	mov    edx,0x1e80000
c0018485:	29 ca                	sub    edx,ecx
c0018487:	52                   	push   edx
c0018488:	50                   	push   eax
c0018489:	e8 6a 56 ff ff       	call   c000daf8 <TSS::setESP(unsigned long)>
c001848e:	83 c4 1c             	add    esp,0x1c
c0018491:	c3                   	ret    

c0018492 <Process::addArgs(char**)>:
c0018492:	57                   	push   edi
c0018493:	56                   	push   esi
c0018494:	53                   	push   ebx
c0018495:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018499:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001849d:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c00184a7:	85 ff                	test   edi,edi
c00184a9:	74 3d                	je     c00184e8 <Process::addArgs(char**)+0x56>
c00184ab:	8b 07                	mov    eax,DWORD PTR [edi]
c00184ad:	85 c0                	test   eax,eax
c00184af:	74 37                	je     c00184e8 <Process::addArgs(char**)+0x56>
c00184b1:	31 db                	xor    ebx,ebx
c00184b3:	83 ec 0c             	sub    esp,0xc
c00184b6:	50                   	push   eax
c00184b7:	e8 34 82 fe ff       	call   c00006f0 <strlen>
c00184bc:	40                   	inc    eax
c00184bd:	89 04 24             	mov    DWORD PTR [esp],eax
c00184c0:	e8 71 3b ff ff       	call   c000c036 <malloc>
c00184c5:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c00184cc:	5a                   	pop    edx
c00184cd:	59                   	pop    ecx
c00184ce:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c00184d1:	43                   	inc    ebx
c00184d2:	50                   	push   eax
c00184d3:	e8 9a 82 fe ff       	call   c0000772 <strcpy>
c00184d8:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c00184de:	83 c4 10             	add    esp,0x10
c00184e1:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c00184e4:	85 c0                	test   eax,eax
c00184e6:	75 cb                	jne    c00184b3 <Process::addArgs(char**)+0x21>
c00184e8:	5b                   	pop    ebx
c00184e9:	5e                   	pop    esi
c00184ea:	5f                   	pop    edi
c00184eb:	c3                   	ret    

c00184ec <Process::Process(char const*, Process*, char**)>:
c00184ec:	56                   	push   esi
c00184ed:	53                   	push   ebx
c00184ee:	83 ec 14             	sub    esp,0x14
c00184f1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00184f5:	05 0c 02 00 00       	add    eax,0x20c
c00184fa:	bb 07 00 00 00       	mov    ebx,0x7
c00184ff:	89 c6                	mov    esi,eax
c0018501:	85 db                	test   ebx,ebx
c0018503:	78 12                	js     c0018517 <Process::Process(char const*, Process*, char**)+0x2b>
c0018505:	83 ec 0c             	sub    esp,0xc
c0018508:	56                   	push   esi
c0018509:	e8 0c 76 00 00       	call   c001fb1a <ThreadControlBlock::ThreadControlBlock()>
c001850e:	83 c4 10             	add    esp,0x10
c0018511:	83 c6 63             	add    esi,0x63
c0018514:	4b                   	dec    ebx
c0018515:	eb ea                	jmp    c0018501 <Process::Process(char const*, Process*, char**)+0x15>
c0018517:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001851b:	c6 80 3a 07 00 00 00 	mov    BYTE PTR [eax+0x73a],0x0
c0018522:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018526:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001852f:	a1 a4 3d 02 c0       	mov    eax,ds:0xc0023da4
c0018534:	8d 50 01             	lea    edx,[eax+0x1]
c0018537:	89 15 a4 3d 02 c0    	mov    DWORD PTR ds:0xc0023da4,edx
c001853d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018541:	89 02                	mov    DWORD PTR [edx],eax
c0018543:	83 ec 0c             	sub    esp,0xc
c0018546:	6a 10                	push   0x10
c0018548:	e8 eb 6a ff ff       	call   c000f038 <operator new(unsigned long)>
c001854d:	83 c4 10             	add    esp,0x10
c0018550:	89 c3                	mov    ebx,eax
c0018552:	83 ec 08             	sub    esp,0x8
c0018555:	6a 00                	push   0x0
c0018557:	53                   	push   ebx
c0018558:	e8 6f 67 ff ff       	call   c000eccc <VAS::VAS(bool)>
c001855d:	83 c4 10             	add    esp,0x10
c0018560:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018564:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001856a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001856e:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c0018578:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001857c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018580:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c0018586:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001858a:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c0018590:	85 c0                	test   eax,eax
c0018592:	74 42                	je     c00185d6 <Process::Process(char const*, Process*, char**)+0xea>
c0018594:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018598:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001859e:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c00185a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00185a8:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c00185ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00185b2:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c00185b8:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00185be:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00185c2:	05 0c 01 00 00       	add    eax,0x10c
c00185c7:	83 ec 08             	sub    esp,0x8
c00185ca:	52                   	push   edx
c00185cb:	50                   	push   eax
c00185cc:	e8 a1 81 fe ff       	call   c0000772 <strcpy>
c00185d1:	83 c4 10             	add    esp,0x10
c00185d4:	eb 5c                	jmp    c0018632 <Process::Process(char const*, Process*, char**)+0x146>
c00185d6:	83 ec 0c             	sub    esp,0xc
c00185d9:	68 60 12 00 00       	push   0x1260
c00185de:	e8 55 6a ff ff       	call   c000f038 <operator new(unsigned long)>
c00185e3:	83 c4 10             	add    esp,0x10
c00185e6:	89 c3                	mov    ebx,eax
c00185e8:	83 ec 08             	sub    esp,0x8
c00185eb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00185ef:	53                   	push   ebx
c00185f0:	e8 01 52 ff ff       	call   c000d7f6 <VgaText::VgaText(char const*)>
c00185f5:	83 c4 10             	add    esp,0x10
c00185f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00185fc:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c0018602:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018606:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001860c:	83 ec 0c             	sub    esp,0xc
c001860f:	50                   	push   eax
c0018610:	e8 e2 45 ff ff       	call   c000cbf7 <addToTerminalCycle(VgaText*)>
c0018615:	83 c4 10             	add    esp,0x10
c0018618:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001861c:	05 0c 01 00 00       	add    eax,0x10c
c0018621:	83 ec 08             	sub    esp,0x8
c0018624:	68 52 2a 02 c0       	push   0xc0022a52
c0018629:	50                   	push   eax
c001862a:	e8 43 81 fe ff       	call   c0000772 <strcpy>
c001862f:	83 c4 10             	add    esp,0x10
c0018632:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018636:	83 c0 0c             	add    eax,0xc
c0018639:	83 ec 08             	sub    esp,0x8
c001863c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018640:	50                   	push   eax
c0018641:	e8 2c 81 fe ff       	call   c0000772 <strcpy>
c0018646:	83 c4 10             	add    esp,0x10
c0018649:	83 ec 08             	sub    esp,0x8
c001864c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018650:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018654:	e8 39 fe ff ff       	call   c0018492 <Process::addArgs(char**)>
c0018659:	83 c4 10             	add    esp,0x10
c001865c:	83 ec 08             	sub    esp,0x8
c001865f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018663:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018667:	e8 ad ee ff ff       	call   c0017519 <Thr::loadProgramIntoMemory(Process*, char const*)>
c001866c:	83 c4 10             	add    esp,0x10
c001866f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018673:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018677:	83 f0 01             	xor    eax,0x1
c001867a:	88 c2                	mov    dl,al
c001867c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018680:	88 90 3a 07 00 00    	mov    BYTE PTR [eax+0x73a],dl
c0018686:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001868b:	83 ec 08             	sub    esp,0x8
c001868e:	50                   	push   eax
c001868f:	68 50 2b 02 c0       	push   0xc0022b50
c0018694:	e8 8e 6a ff ff       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c0018699:	83 c4 10             	add    esp,0x10
c001869c:	90                   	nop
c001869d:	83 c4 14             	add    esp,0x14
c00186a0:	5b                   	pop    ebx
c00186a1:	5e                   	pop    esi
c00186a2:	c3                   	ret    
c00186a3:	90                   	nop

c00186a4 <Process::Process(bool, char const*, Process*, char**)>:
c00186a4:	56                   	push   esi
c00186a5:	53                   	push   ebx
c00186a6:	83 ec 14             	sub    esp,0x14
c00186a9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00186ad:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00186b1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00186b5:	05 0c 02 00 00       	add    eax,0x20c
c00186ba:	bb 07 00 00 00       	mov    ebx,0x7
c00186bf:	89 c6                	mov    esi,eax
c00186c1:	85 db                	test   ebx,ebx
c00186c3:	78 12                	js     c00186d7 <Process::Process(bool, char const*, Process*, char**)+0x33>
c00186c5:	83 ec 0c             	sub    esp,0xc
c00186c8:	56                   	push   esi
c00186c9:	e8 4c 74 00 00       	call   c001fb1a <ThreadControlBlock::ThreadControlBlock()>
c00186ce:	83 c4 10             	add    esp,0x10
c00186d1:	83 c6 63             	add    esi,0x63
c00186d4:	4b                   	dec    ebx
c00186d5:	eb ea                	jmp    c00186c1 <Process::Process(bool, char const*, Process*, char**)+0x1d>
c00186d7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00186db:	c6 80 3a 07 00 00 00 	mov    BYTE PTR [eax+0x73a],0x0
c00186e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00186e6:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c00186ef:	a1 a4 3d 02 c0       	mov    eax,ds:0xc0023da4
c00186f4:	8d 50 01             	lea    edx,[eax+0x1]
c00186f7:	89 15 a4 3d 02 c0    	mov    DWORD PTR ds:0xc0023da4,edx
c00186fd:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018701:	89 02                	mov    DWORD PTR [edx],eax
c0018703:	83 ec 0c             	sub    esp,0xc
c0018706:	6a 10                	push   0x10
c0018708:	e8 2b 69 ff ff       	call   c000f038 <operator new(unsigned long)>
c001870d:	83 c4 10             	add    esp,0x10
c0018710:	89 c3                	mov    ebx,eax
c0018712:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018717:	83 ec 08             	sub    esp,0x8
c001871a:	50                   	push   eax
c001871b:	53                   	push   ebx
c001871c:	e8 ab 65 ff ff       	call   c000eccc <VAS::VAS(bool)>
c0018721:	83 c4 10             	add    esp,0x10
c0018724:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018728:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001872e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018732:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001873c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018740:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0018744:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001874a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001874e:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c0018754:	85 c0                	test   eax,eax
c0018756:	74 42                	je     c001879a <Process::Process(bool, char const*, Process*, char**)+0xf6>
c0018758:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001875c:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c0018762:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c0018768:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001876c:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c0018772:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018776:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001877c:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0018782:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018786:	05 0c 01 00 00       	add    eax,0x10c
c001878b:	83 ec 08             	sub    esp,0x8
c001878e:	52                   	push   edx
c001878f:	50                   	push   eax
c0018790:	e8 dd 7f fe ff       	call   c0000772 <strcpy>
c0018795:	83 c4 10             	add    esp,0x10
c0018798:	eb 5c                	jmp    c00187f6 <Process::Process(bool, char const*, Process*, char**)+0x152>
c001879a:	83 ec 0c             	sub    esp,0xc
c001879d:	68 60 12 00 00       	push   0x1260
c00187a2:	e8 91 68 ff ff       	call   c000f038 <operator new(unsigned long)>
c00187a7:	83 c4 10             	add    esp,0x10
c00187aa:	89 c3                	mov    ebx,eax
c00187ac:	83 ec 08             	sub    esp,0x8
c00187af:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00187b3:	53                   	push   ebx
c00187b4:	e8 3d 50 ff ff       	call   c000d7f6 <VgaText::VgaText(char const*)>
c00187b9:	83 c4 10             	add    esp,0x10
c00187bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00187c0:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c00187c6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00187ca:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00187d0:	83 ec 0c             	sub    esp,0xc
c00187d3:	50                   	push   eax
c00187d4:	e8 1e 44 ff ff       	call   c000cbf7 <addToTerminalCycle(VgaText*)>
c00187d9:	83 c4 10             	add    esp,0x10
c00187dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00187e0:	05 0c 01 00 00       	add    eax,0x10c
c00187e5:	83 ec 08             	sub    esp,0x8
c00187e8:	68 52 2a 02 c0       	push   0xc0022a52
c00187ed:	50                   	push   eax
c00187ee:	e8 7f 7f fe ff       	call   c0000772 <strcpy>
c00187f3:	83 c4 10             	add    esp,0x10
c00187f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00187fa:	83 c0 0c             	add    eax,0xc
c00187fd:	83 ec 08             	sub    esp,0x8
c0018800:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018804:	50                   	push   eax
c0018805:	e8 68 7f fe ff       	call   c0000772 <strcpy>
c001880a:	83 c4 10             	add    esp,0x10
c001880d:	83 ec 08             	sub    esp,0x8
c0018810:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0018814:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018818:	e8 75 fc ff ff       	call   c0018492 <Process::addArgs(char**)>
c001881d:	83 c4 10             	add    esp,0x10
c0018820:	90                   	nop
c0018821:	83 c4 14             	add    esp,0x14
c0018824:	5b                   	pop    ebx
c0018825:	5e                   	pop    esi
c0018826:	c3                   	ret    

c0018827 <disableIRQs()>:
c0018827:	fa                   	cli    
c0018828:	ff 05 ac 57 02 c0    	inc    DWORD PTR ds:0xc00257ac
c001882e:	c3                   	ret    

c001882f <getIRQNestingLevel()>:
c001882f:	a1 ac 57 02 c0       	mov    eax,ds:0xc00257ac
c0018834:	c3                   	ret    

c0018835 <enableIRQs()>:
c0018835:	a1 ac 57 02 c0       	mov    eax,ds:0xc00257ac
c001883a:	48                   	dec    eax
c001883b:	a3 ac 57 02 c0       	mov    ds:0xc00257ac,eax
c0018840:	75 01                	jne    c0018843 <enableIRQs()+0xe>
c0018842:	fb                   	sti    
c0018843:	c3                   	ret    

c0018844 <lockScheduler()>:
c0018844:	eb e1                	jmp    c0018827 <disableIRQs()>

c0018846 <unlockScheduler()>:
c0018846:	eb ed                	jmp    c0018835 <enableIRQs()>

c0018848 <userModeEntryPoint(void*)>:
c0018848:	83 ec 0c             	sub    esp,0xc
c001884b:	e8 f6 ff ff ff       	call   c0018846 <unlockScheduler()>
c0018850:	fb                   	sti    
c0018851:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018856:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0018859:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001885f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0018863:	83 c4 0c             	add    esp,0xc
c0018866:	e9 46 7a fe ff       	jmp    c00002b1 <goToUsermode>

c001886b <lockStuff()>:
c001886b:	e8 b7 ff ff ff       	call   c0018827 <disableIRQs()>
c0018870:	ff 05 a8 57 02 c0    	inc    DWORD PTR ds:0xc00257a8
c0018876:	c3                   	ret    

c0018877 <taskStartupFunction>:
c0018877:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001887c:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001887f:	c3                   	ret    

c0018880 <updateTimeUsed()>:
c0018880:	57                   	push   edi
c0018881:	56                   	push   esi
c0018882:	53                   	push   ebx
c0018883:	e8 e8 be ff ff       	call   c0014770 <thisCPU()>
c0018888:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001888f:	74 49                	je     c00188da <updateTimeUsed()+0x5a>
c0018891:	0f 31                	rdtsc  
c0018893:	89 c1                	mov    ecx,eax
c0018895:	a3 e8 57 02 c0       	mov    ds:0xc00257e8,eax
c001889a:	2b 0d d8 57 02 c0    	sub    ecx,DWORD PTR ds:0xc00257d8
c00188a0:	89 d3                	mov    ebx,edx
c00188a2:	89 0d e0 57 02 c0    	mov    DWORD PTR ds:0xc00257e0,ecx
c00188a8:	1b 1d dc 57 02 c0    	sbb    ebx,DWORD PTR ds:0xc00257dc
c00188ae:	a3 d8 57 02 c0       	mov    ds:0xc00257d8,eax
c00188b3:	89 1d e4 57 02 c0    	mov    DWORD PTR ds:0xc00257e4,ebx
c00188b9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00188be:	89 15 ec 57 02 c0    	mov    DWORD PTR ds:0xc00257ec,edx
c00188c4:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00188c7:	89 15 dc 57 02 c0    	mov    DWORD PTR ds:0xc00257dc,edx
c00188cd:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c00188d0:	01 f1                	add    ecx,esi
c00188d2:	11 fb                	adc    ebx,edi
c00188d4:	89 48 10             	mov    DWORD PTR [eax+0x10],ecx
c00188d7:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c00188da:	5b                   	pop    ebx
c00188db:	5e                   	pop    esi
c00188dc:	5f                   	pop    edi
c00188dd:	c3                   	ret    

c00188de <switchToThread(ThreadControlBlock*)>:
c00188de:	53                   	push   ebx
c00188df:	83 ec 08             	sub    esp,0x8
c00188e2:	a1 a8 57 02 c0       	mov    eax,ds:0xc00257a8
c00188e7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00188eb:	85 c0                	test   eax,eax
c00188ed:	75 30                	jne    c001891f <switchToThread(ThreadControlBlock*)+0x41>
c00188ef:	8a 43 44             	mov    al,BYTE PTR [ebx+0x44]
c00188f2:	3c ff                	cmp    al,0xff
c00188f4:	74 25                	je     c001891b <switchToThread(ThreadControlBlock*)+0x3d>
c00188f6:	0f b6 d0             	movzx  edx,al
c00188f9:	b8 84 03 00 00       	mov    eax,0x384
c00188fe:	29 d0                	sub    eax,edx
c0018900:	c1 e0 10             	shl    eax,0x10
c0018903:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c0018906:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0018909:	e8 72 ff ff ff       	call   c0018880 <updateTimeUsed()>
c001890e:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0018912:	83 c4 08             	add    esp,0x8
c0018915:	5b                   	pop    ebx
c0018916:	e9 cf 79 fe ff       	jmp    c00002ea <switchToThreadASM>
c001891b:	31 c0                	xor    eax,eax
c001891d:	eb e7                	jmp    c0018906 <switchToThread(ThreadControlBlock*)+0x28>
c001891f:	c7 05 a4 57 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00257a4,0x1
c0018929:	83 c4 08             	add    esp,0x8
c001892c:	5b                   	pop    ebx
c001892d:	c3                   	ret    

c001892e <Semaphore::Semaphore(int)>:
c001892e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018932:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018936:	89 10                	mov    DWORD PTR [eax],edx
c0018938:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001893c:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0018943:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018947:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001894e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018952:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0018959:	90                   	nop
c001895a:	c3                   	ret    
c001895b:	90                   	nop

c001895c <Mutex::Mutex()>:
c001895c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018960:	6a 01                	push   0x1
c0018962:	50                   	push   eax
c0018963:	e8 c6 ff ff ff       	call   c001892e <Semaphore::Semaphore(int)>
c0018968:	83 c4 08             	add    esp,0x8
c001896b:	90                   	nop
c001896c:	c3                   	ret    
c001896d:	90                   	nop

c001896e <Process::createThread(void (*)(void*), void*, int)>:
c001896e:	55                   	push   ebp
c001896f:	31 c9                	xor    ecx,ecx
c0018971:	57                   	push   edi
c0018972:	56                   	push   esi
c0018973:	53                   	push   ebx
c0018974:	83 ec 1c             	sub    esp,0x1c
c0018977:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001897b:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c0018982:	89 f2                	mov    edx,esi
c0018984:	0f b7 c2             	movzx  eax,dx
c0018987:	83 e2 01             	and    edx,0x1
c001898a:	74 14                	je     c00189a0 <Process::createThread(void (*)(void*), void*, int)+0x32>
c001898c:	d1 f8                	sar    eax,1
c001898e:	41                   	inc    ecx
c001898f:	89 c2                	mov    edx,eax
c0018991:	83 f9 10             	cmp    ecx,0x10
c0018994:	75 ee                	jne    c0018984 <Process::createThread(void (*)(void*), void*, int)+0x16>
c0018996:	83 c4 1c             	add    esp,0x1c
c0018999:	31 c0                	xor    eax,eax
c001899b:	5b                   	pop    ebx
c001899c:	5e                   	pop    esi
c001899d:	5f                   	pop    edi
c001899e:	5d                   	pop    ebp
c001899f:	c3                   	ret    
c00189a0:	83 ec 08             	sub    esp,0x8
c00189a3:	b8 01 00 00 00       	mov    eax,0x1
c00189a8:	d3 e0                	shl    eax,cl
c00189aa:	09 c6                	or     esi,eax
c00189ac:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c00189b2:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c00189b9:	8d 34 09             	lea    esi,[ecx+ecx*1]
c00189bc:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00189bf:	01 ce                	add    esi,ecx
c00189c1:	89 f0                	mov    eax,esi
c00189c3:	c1 e0 05             	shl    eax,0x5
c00189c6:	01 c6                	add    esi,eax
c00189c8:	8d 04 33             	lea    eax,[ebx+esi*1]
c00189cb:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c00189d1:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c00189d7:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00189db:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c00189e1:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c00189e7:	89 ca                	mov    edx,ecx
c00189e9:	f7 da                	neg    edx
c00189eb:	c1 e2 15             	shl    edx,0x15
c00189ee:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c00189f4:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c00189fa:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00189fe:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0018a08:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c0018a0e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0018a12:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0018a18:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0018a22:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0018a2c:	8d 84 33 0c 02 00 00 	lea    eax,[ebx+esi*1+0x20c]
c0018a33:	50                   	push   eax
c0018a34:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018a38:	68 c8 57 02 c0       	push   0xc00257c8
c0018a3d:	e8 30 6f 00 00       	call   c001f972 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018a42:	83 c4 10             	add    esp,0x10
c0018a45:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018a49:	83 c4 1c             	add    esp,0x1c
c0018a4c:	5b                   	pop    ebx
c0018a4d:	5e                   	pop    esi
c0018a4e:	5f                   	pop    edi
c0018a4f:	5d                   	pop    ebp
c0018a50:	c3                   	ret    
c0018a51:	90                   	nop

c0018a52 <Process::createUserThread()>:
c0018a52:	83 ec 0c             	sub    esp,0xc
c0018a55:	68 80 00 00 00       	push   0x80
c0018a5a:	6a 00                	push   0x0
c0018a5c:	68 48 88 01 c0       	push   0xc0018848
c0018a61:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018a65:	e8 04 ff ff ff       	call   c001896e <Process::createThread(void (*)(void*), void*, int)>
c0018a6a:	83 c4 1c             	add    esp,0x1c
c0018a6d:	c3                   	ret    

c0018a6e <setupMultitasking(void (*)())>:
c0018a6e:	56                   	push   esi
c0018a6f:	53                   	push   ebx
c0018a70:	53                   	push   ebx
c0018a71:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018a75:	eb 10                	jmp    c0018a87 <setupMultitasking(void (*)())+0x19>
c0018a77:	83 ec 0c             	sub    esp,0xc
c0018a7a:	68 c8 57 02 c0       	push   0xc00257c8
c0018a7f:	e8 40 6e 00 00       	call   c001f8c4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0018a84:	83 c4 10             	add    esp,0x10
c0018a87:	83 ec 0c             	sub    esp,0xc
c0018a8a:	68 c8 57 02 c0       	push   0xc00257c8
c0018a8f:	e8 14 6e 00 00       	call   c001f8a8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0018a94:	83 c4 10             	add    esp,0x10
c0018a97:	84 c0                	test   al,al
c0018a99:	74 dc                	je     c0018a77 <setupMultitasking(void (*)())+0x9>
c0018a9b:	83 ec 0c             	sub    esp,0xc
c0018a9e:	68 3b 07 00 00       	push   0x73b
c0018aa3:	e8 90 65 ff ff       	call   c000f038 <operator new(unsigned long)>
c0018aa8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0018aaf:	89 c3                	mov    ebx,eax
c0018ab1:	6a 00                	push   0x0
c0018ab3:	68 56 2a 02 c0       	push   0xc0022a56
c0018ab8:	6a 01                	push   0x1
c0018aba:	50                   	push   eax
c0018abb:	e8 e4 fb ff ff       	call   c00186a4 <Process::Process(bool, char const*, Process*, char**)>
c0018ac0:	83 c4 18             	add    esp,0x18
c0018ac3:	89 1d d4 57 02 c0    	mov    DWORD PTR ds:0xc00257d4,ebx
c0018ac9:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c0018acf:	68 78 2b 02 c0       	push   0xc0022b78
c0018ad4:	e8 4e 66 ff ff       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c0018ad9:	58                   	pop    eax
c0018ada:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c0018ae0:	e8 86 48 ff ff       	call   c000d36b <setActiveTerminal(VgaText*)>
c0018ae5:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c0018aed:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c0018af3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018af6:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c0018b00:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0018b06:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c0018b0c:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0018b16:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c0018b20:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0018b2a:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0018b30:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0018b36:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0018b40:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0018b46:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0018b50:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0018b56:	5a                   	pop    edx
c0018b57:	59                   	pop    ecx
c0018b58:	68 52 2a 02 c0       	push   0xc0022a52
c0018b5d:	50                   	push   eax
c0018b5e:	e8 0f 7c fe ff       	call   c0000772 <strcpy>
c0018b63:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c0018b6a:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0018b6e:	83 c4 14             	add    esp,0x14
c0018b71:	5b                   	pop    ebx
c0018b72:	5e                   	pop    esi
c0018b73:	e9 64 77 fe ff       	jmp    c00002dc <switchToThreadASMFirstTime>

c0018b78 <schedule()>:
c0018b78:	a1 a8 57 02 c0       	mov    eax,ds:0xc00257a8
c0018b7d:	85 c0                	test   eax,eax
c0018b7f:	74 0b                	je     c0018b8c <schedule()+0x14>
c0018b81:	c7 05 a4 57 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00257a4,0x1
c0018b8b:	c3                   	ret    
c0018b8c:	53                   	push   ebx
c0018b8d:	83 ec 14             	sub    esp,0x14
c0018b90:	68 c8 57 02 c0       	push   0xc00257c8
c0018b95:	e8 0e 6d 00 00       	call   c001f8a8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0018b9a:	83 c4 10             	add    esp,0x10
c0018b9d:	84 c0                	test   al,al
c0018b9f:	75 38                	jne    c0018bd9 <schedule()+0x61>
c0018ba1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018ba6:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0018ba9:	4a                   	dec    edx
c0018baa:	74 32                	je     c0018bde <schedule()+0x66>
c0018bac:	83 ec 0c             	sub    esp,0xc
c0018baf:	68 c8 57 02 c0       	push   0xc00257c8
c0018bb4:	e8 e7 6c 00 00       	call   c001f8a0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018bb9:	c7 04 24 c8 57 02 c0 	mov    DWORD PTR [esp],0xc00257c8
c0018bc0:	89 c3                	mov    ebx,eax
c0018bc2:	e8 fd 6c 00 00       	call   c001f8c4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0018bc7:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0018bce:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018bd1:	e8 08 fd ff ff       	call   c00188de <switchToThread(ThreadControlBlock*)>
c0018bd6:	83 c4 10             	add    esp,0x10
c0018bd9:	83 c4 08             	add    esp,0x8
c0018bdc:	5b                   	pop    ebx
c0018bdd:	c3                   	ret    
c0018bde:	83 ec 08             	sub    esp,0x8
c0018be1:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0018be8:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c0018bee:	68 c8 57 02 c0       	push   0xc00257c8
c0018bf3:	e8 7a 6d 00 00       	call   c001f972 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018bf8:	83 c4 10             	add    esp,0x10
c0018bfb:	eb af                	jmp    c0018bac <schedule()+0x34>

c0018bfd <unlockStuff()>:
c0018bfd:	a1 a8 57 02 c0       	mov    eax,ds:0xc00257a8
c0018c02:	48                   	dec    eax
c0018c03:	a3 a8 57 02 c0       	mov    ds:0xc00257a8,eax
c0018c08:	75 09                	jne    c0018c13 <unlockStuff()+0x16>
c0018c0a:	a1 a4 57 02 c0       	mov    eax,ds:0xc00257a4
c0018c0f:	85 c0                	test   eax,eax
c0018c11:	75 05                	jne    c0018c18 <unlockStuff()+0x1b>
c0018c13:	e9 1d fc ff ff       	jmp    c0018835 <enableIRQs()>
c0018c18:	83 ec 0c             	sub    esp,0xc
c0018c1b:	c7 05 a4 57 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00257a4,0x0
c0018c25:	e8 4e ff ff ff       	call   c0018b78 <schedule()>
c0018c2a:	83 c4 0c             	add    esp,0xc
c0018c2d:	e9 03 fc ff ff       	jmp    c0018835 <enableIRQs()>

c0018c32 <Semaphore::tryAcquire()>:
c0018c32:	83 ec 0c             	sub    esp,0xc
c0018c35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018c39:	e8 2d fc ff ff       	call   c001886b <lockStuff()>
c0018c3e:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0018c41:	3b 10                	cmp    edx,DWORD PTR [eax]
c0018c43:	7c 0b                	jl     c0018c50 <Semaphore::tryAcquire()+0x1e>
c0018c45:	e8 b3 ff ff ff       	call   c0018bfd <unlockStuff()>
c0018c4a:	31 c0                	xor    eax,eax
c0018c4c:	83 c4 0c             	add    esp,0xc
c0018c4f:	c3                   	ret    
c0018c50:	42                   	inc    edx
c0018c51:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0018c54:	e8 a4 ff ff ff       	call   c0018bfd <unlockStuff()>
c0018c59:	b0 01                	mov    al,0x1
c0018c5b:	83 c4 0c             	add    esp,0xc
c0018c5e:	c3                   	ret    
c0018c5f:	90                   	nop

c0018c60 <Semaphore::assertLocked(char const*)>:
c0018c60:	83 ec 0c             	sub    esp,0xc
c0018c63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018c67:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018c6b:	e8 fb fb ff ff       	call   c001886b <lockStuff()>
c0018c70:	8b 08                	mov    ecx,DWORD PTR [eax]
c0018c72:	39 48 0c             	cmp    DWORD PTR [eax+0xc],ecx
c0018c75:	7c 05                	jl     c0018c7c <Semaphore::assertLocked(char const*)+0x1c>
c0018c77:	83 c4 0c             	add    esp,0xc
c0018c7a:	eb 81                	jmp    c0018bfd <unlockStuff()>
c0018c7c:	83 ec 0c             	sub    esp,0xc
c0018c7f:	52                   	push   edx
c0018c80:	e8 6b cc ff ff       	call   c00158f0 <Krnl::panic(char const*)>
c0018c85:	83 c4 10             	add    esp,0x10
c0018c88:	83 c4 0c             	add    esp,0xc
c0018c8b:	e9 6d ff ff ff       	jmp    c0018bfd <unlockStuff()>

c0018c90 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0018c90:	83 ec 0c             	sub    esp,0xc
c0018c93:	e8 97 fb ff ff       	call   c001882f <getIRQNestingLevel()>
c0018c98:	83 ec 08             	sub    esp,0x8
c0018c9b:	50                   	push   eax
c0018c9c:	68 ac 2b 02 c0       	push   0xc0022bac
c0018ca1:	e8 81 64 ff ff       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c0018ca6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018caa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018caf:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0018cb2:	e8 c1 fe ff ff       	call   c0018b78 <schedule()>
c0018cb7:	e8 8a fb ff ff       	call   c0018846 <unlockScheduler()>
c0018cbc:	e8 6e fb ff ff       	call   c001882f <getIRQNestingLevel()>
c0018cc1:	5a                   	pop    edx
c0018cc2:	59                   	pop    ecx
c0018cc3:	50                   	push   eax
c0018cc4:	68 e0 2b 02 c0       	push   0xc0022be0
c0018cc9:	e8 59 64 ff ff       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c0018cce:	83 c4 1c             	add    esp,0x1c
c0018cd1:	c3                   	ret    

c0018cd2 <blockTask(TaskState)>:
c0018cd2:	83 ec 0c             	sub    esp,0xc
c0018cd5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018cd9:	e8 66 fb ff ff       	call   c0018844 <lockScheduler()>
c0018cde:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018ce3:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0018ce6:	e8 8d fe ff ff       	call   c0018b78 <schedule()>
c0018ceb:	83 c4 0c             	add    esp,0xc
c0018cee:	e9 53 fb ff ff       	jmp    c0018846 <unlockScheduler()>

c0018cf3 <waitTask(int, int*, int)>:
c0018cf3:	83 ec 18             	sub    esp,0x18
c0018cf6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018cfb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018cff:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0018d02:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018d06:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018d0b:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c0018d0e:	6a 07                	push   0x7
c0018d10:	e8 bd ff ff ff       	call   c0018cd2 <blockTask(TaskState)>
c0018d15:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018d1a:	83 c4 10             	add    esp,0x10
c0018d1d:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c0018d20:	85 d2                	test   edx,edx
c0018d22:	74 0a                	je     c0018d2e <waitTask(int, int*, int)+0x3b>
c0018d24:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c0018d27:	89 02                	mov    DWORD PTR [edx],eax
c0018d29:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018d2e:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c0018d31:	83 c4 0c             	add    esp,0xc
c0018d34:	c3                   	ret    

c0018d35 <nanoSleepUntil(unsigned long long)>:
c0018d35:	83 ec 0c             	sub    esp,0xc
c0018d38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018d3c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018d40:	3b 05 f0 49 02 c0    	cmp    eax,DWORD PTR ds:0xc00249f0
c0018d46:	89 d1                	mov    ecx,edx
c0018d48:	1b 0d f4 49 02 c0    	sbb    ecx,DWORD PTR ds:0xc00249f4
c0018d4e:	73 04                	jae    c0018d54 <nanoSleepUntil(unsigned long long)+0x1f>
c0018d50:	83 c4 0c             	add    esp,0xc
c0018d53:	c3                   	ret    
c0018d54:	e8 12 fb ff ff       	call   c001886b <lockStuff()>
c0018d59:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0018d5f:	83 ec 08             	sub    esp,0x8
c0018d62:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c0018d65:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c0018d68:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c0018d6e:	68 bc 57 02 c0       	push   0xc00257bc
c0018d73:	e8 fa 6b 00 00       	call   c001f972 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018d78:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0018d7f:	e8 4e ff ff ff       	call   c0018cd2 <blockTask(TaskState)>
c0018d84:	83 c4 1c             	add    esp,0x1c
c0018d87:	e9 71 fe ff ff       	jmp    c0018bfd <unlockStuff()>

c0018d8c <nanoSleep(unsigned long long)>:
c0018d8c:	a1 f0 49 02 c0       	mov    eax,ds:0xc00249f0
c0018d91:	8b 15 f4 49 02 c0    	mov    edx,DWORD PTR ds:0xc00249f4
c0018d97:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c0018d9b:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c0018d9f:	eb 94                	jmp    c0018d35 <nanoSleepUntil(unsigned long long)>

c0018da1 <sleep(unsigned long long)>:
c0018da1:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c0018da9:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c0018dae:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c0018db2:	01 ca                	add    edx,ecx
c0018db4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018db8:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0018dbc:	eb ce                	jmp    c0018d8c <nanoSleep(unsigned long long)>

c0018dbe <Semaphore::acquire()>:
c0018dbe:	83 ec 0c             	sub    esp,0xc
c0018dc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018dc5:	e8 a1 fa ff ff       	call   c001886b <lockStuff()>
c0018dca:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0018dcd:	3b 10                	cmp    edx,DWORD PTR [eax]
c0018dcf:	7d 0c                	jge    c0018ddd <Semaphore::acquire()+0x1f>
c0018dd1:	42                   	inc    edx
c0018dd2:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0018dd5:	83 c4 0c             	add    esp,0xc
c0018dd8:	e9 20 fe ff ff       	jmp    c0018bfd <unlockStuff()>
c0018ddd:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0018de3:	c7 42 20 00 00 00 00 	mov    DWORD PTR [edx+0x20],0x0
c0018dea:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0018ded:	85 d2                	test   edx,edx
c0018def:	74 2a                	je     c0018e1b <Semaphore::acquire()+0x5d>
c0018df1:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0018df4:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0018dfa:	89 4a 20             	mov    DWORD PTR [edx+0x20],ecx
c0018dfd:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0018e03:	83 ec 0c             	sub    esp,0xc
c0018e06:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0018e09:	6a 05                	push   0x5
c0018e0b:	e8 c2 fe ff ff       	call   c0018cd2 <blockTask(TaskState)>
c0018e10:	83 c4 10             	add    esp,0x10
c0018e13:	83 c4 0c             	add    esp,0xc
c0018e16:	e9 e2 fd ff ff       	jmp    c0018bfd <unlockStuff()>
c0018e1b:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0018e21:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0018e24:	eb d7                	jmp    c0018dfd <Semaphore::acquire()+0x3f>

c0018e26 <taskReturned>:
c0018e26:	83 ec 18             	sub    esp,0x18
c0018e29:	68 14 2c 02 c0       	push   0xc0022c14
c0018e2e:	e8 bd ca ff ff       	call   c00158f0 <Krnl::panic(char const*)>
c0018e33:	83 c4 10             	add    esp,0x10
c0018e36:	83 ec 0c             	sub    esp,0xc
c0018e39:	6a 02                	push   0x2
c0018e3b:	e8 92 fe ff ff       	call   c0018cd2 <blockTask(TaskState)>
c0018e40:	e8 ff f9 ff ff       	call   c0018844 <lockScheduler()>
c0018e45:	e8 2e fd ff ff       	call   c0018b78 <schedule()>
c0018e4a:	e8 f7 f9 ff ff       	call   c0018846 <unlockScheduler()>
c0018e4f:	83 c4 10             	add    esp,0x10
c0018e52:	eb e2                	jmp    c0018e36 <taskReturned+0x10>

c0018e54 <unblockTask(ThreadControlBlock*)>:
c0018e54:	53                   	push   ebx
c0018e55:	83 ec 08             	sub    esp,0x8
c0018e58:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018e5c:	e8 e3 f9 ff ff       	call   c0018844 <lockScheduler()>
c0018e61:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0018e64:	85 c0                	test   eax,eax
c0018e66:	74 5c                	je     c0018ec4 <unblockTask(ThreadControlBlock*)+0x70>
c0018e68:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0018e6b:	48                   	dec    eax
c0018e6c:	74 31                	je     c0018e9f <unblockTask(ThreadControlBlock*)+0x4b>
c0018e6e:	83 ec 0c             	sub    esp,0xc
c0018e71:	68 c8 57 02 c0       	push   0xc00257c8
c0018e76:	e8 25 6a 00 00       	call   c001f8a0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018e7b:	83 c4 10             	add    esp,0x10
c0018e7e:	85 c0                	test   eax,eax
c0018e80:	75 17                	jne    c0018e99 <unblockTask(ThreadControlBlock*)+0x45>
c0018e82:	eb 65                	jmp    c0018ee9 <unblockTask(ThreadControlBlock*)+0x95>
c0018e84:	83 ec 08             	sub    esp,0x8
c0018e87:	50                   	push   eax
c0018e88:	68 c8 57 02 c0       	push   0xc00257c8
c0018e8d:	e8 1e 6d 00 00       	call   c001fbb0 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0018e92:	83 c4 10             	add    esp,0x10
c0018e95:	85 c0                	test   eax,eax
c0018e97:	74 50                	je     c0018ee9 <unblockTask(ThreadControlBlock*)+0x95>
c0018e99:	39 c3                	cmp    ebx,eax
c0018e9b:	75 e7                	jne    c0018e84 <unblockTask(ThreadControlBlock*)+0x30>
c0018e9d:	eb 1c                	jmp    c0018ebb <unblockTask(ThreadControlBlock*)+0x67>
c0018e9f:	83 ec 0c             	sub    esp,0xc
c0018ea2:	68 04 2d 02 c0       	push   0xc0022d04
c0018ea7:	e8 7b 62 ff ff       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c0018eac:	c7 04 24 90 2c 02 c0 	mov    DWORD PTR [esp],0xc0022c90
c0018eb3:	e8 6f 62 ff ff       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c0018eb8:	83 c4 10             	add    esp,0x10
c0018ebb:	83 c4 08             	add    esp,0x8
c0018ebe:	5b                   	pop    ebx
c0018ebf:	e9 82 f9 ff ff       	jmp    c0018846 <unlockScheduler()>
c0018ec4:	83 ec 0c             	sub    esp,0xc
c0018ec7:	68 48 2c 02 c0       	push   0xc0022c48
c0018ecc:	e8 56 62 ff ff       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c0018ed1:	c7 04 24 90 2c 02 c0 	mov    DWORD PTR [esp],0xc0022c90
c0018ed8:	e8 4a 62 ff ff       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c0018edd:	83 c4 10             	add    esp,0x10
c0018ee0:	83 c4 08             	add    esp,0x8
c0018ee3:	5b                   	pop    ebx
c0018ee4:	e9 5d f9 ff ff       	jmp    c0018846 <unlockScheduler()>
c0018ee9:	83 ec 08             	sub    esp,0x8
c0018eec:	53                   	push   ebx
c0018eed:	68 c8 57 02 c0       	push   0xc00257c8
c0018ef2:	e8 7b 6a 00 00       	call   c001f972 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018ef7:	83 c4 10             	add    esp,0x10
c0018efa:	83 c4 08             	add    esp,0x8
c0018efd:	5b                   	pop    ebx
c0018efe:	e9 43 f9 ff ff       	jmp    c0018846 <unlockScheduler()>

c0018f03 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0018f03:	55                   	push   ebp
c0018f04:	57                   	push   edi
c0018f05:	56                   	push   esi
c0018f06:	53                   	push   ebx
c0018f07:	83 ec 1c             	sub    esp,0x1c
c0018f0a:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0018f0e:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0018f11:	8b 88 36 05 00 00    	mov    ecx,DWORD PTR [eax+0x536]
c0018f17:	85 c9                	test   ecx,ecx
c0018f19:	7e 20                	jle    c0018f3b <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c0018f1b:	31 f6                	xor    esi,esi
c0018f1d:	83 ec 0c             	sub    esp,0xc
c0018f20:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c0018f27:	46                   	inc    esi
c0018f28:	e8 19 31 ff ff       	call   c000c046 <free>
c0018f2d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0018f30:	83 c4 10             	add    esp,0x10
c0018f33:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c0018f39:	7f e2                	jg     c0018f1d <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c0018f3b:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c0018f45:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0018f4a:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c0018f4d:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0018f50:	d3 c0                	rol    eax,cl
c0018f52:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c0018f59:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0018f5c:	89 f7                	mov    edi,esi
c0018f5e:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c0018f66:	0f 85 4f 01 00 00    	jne    c00190bb <cleanupTerminatedTask(ThreadControlBlock*)+0x1b8>
c0018f6c:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c0018f72:	85 c0                	test   eax,eax
c0018f74:	0f 84 aa 00 00 00    	je     c0019024 <cleanupTerminatedTask(ThreadControlBlock*)+0x121>
c0018f7a:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c0018f7d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0018f81:	31 c9                	xor    ecx,ecx
c0018f83:	eb 10                	jmp    c0018f95 <cleanupTerminatedTask(ThreadControlBlock*)+0x92>
c0018f85:	41                   	inc    ecx
c0018f86:	83 f9 10             	cmp    ecx,0x10
c0018f89:	0f 84 95 00 00 00    	je     c0019024 <cleanupTerminatedTask(ThreadControlBlock*)+0x121>
c0018f8f:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c0018f95:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c0018f9c:	d3 fa                	sar    edx,cl
c0018f9e:	83 e2 01             	and    edx,0x1
c0018fa1:	74 e2                	je     c0018f85 <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c0018fa3:	8d 14 09             	lea    edx,[ecx+ecx*1]
c0018fa6:	01 ca                	add    edx,ecx
c0018fa8:	89 d5                	mov    ebp,edx
c0018faa:	c1 e5 05             	shl    ebp,0x5
c0018fad:	01 ea                	add    edx,ebp
c0018faf:	01 d0                	add    eax,edx
c0018fb1:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0018fb7:	83 fd 07             	cmp    ebp,0x7
c0018fba:	75 c9                	jne    c0018f85 <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c0018fbc:	05 40 02 00 00       	add    eax,0x240
c0018fc1:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c0018fc4:	83 fd ff             	cmp    ebp,0xffffffff
c0018fc7:	0f 8c 08 01 00 00    	jl     c00190d5 <cleanupTerminatedTask(ThreadControlBlock*)+0x1d2>
c0018fcd:	0f 84 b9 01 00 00    	je     c001918c <cleanupTerminatedTask(ThreadControlBlock*)+0x289>
c0018fd3:	85 ed                	test   ebp,ebp
c0018fd5:	0f 84 a0 01 00 00    	je     c001917b <cleanupTerminatedTask(ThreadControlBlock*)+0x278>
c0018fdb:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0018fdd:	75 a6                	jne    c0018f85 <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c0018fdf:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c0018fe5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0018fe9:	01 d0                	add    eax,edx
c0018feb:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0018fef:	83 ec 0c             	sub    esp,0xc
c0018ff2:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c0018ff8:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0018ffb:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c0019001:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0019008:	50                   	push   eax
c0019009:	e8 46 fe ff ff       	call   c0018e54 <unblockTask(ThreadControlBlock*)>
c001900e:	83 c4 10             	add    esp,0x10
c0019011:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0019014:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019018:	89 f7                	mov    edi,esi
c001901a:	41                   	inc    ecx
c001901b:	83 f9 10             	cmp    ecx,0x10
c001901e:	0f 85 6b ff ff ff    	jne    c0018f8f <cleanupTerminatedTask(ThreadControlBlock*)+0x8c>
c0019024:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001902a:	85 c0                	test   eax,eax
c001902c:	74 5d                	je     c001908b <cleanupTerminatedTask(ThreadControlBlock*)+0x188>
c001902e:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c0019034:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001903a:	74 4f                	je     c001908b <cleanupTerminatedTask(ThreadControlBlock*)+0x188>
c001903c:	83 ec 0c             	sub    esp,0xc
c001903f:	68 c8 57 02 c0       	push   0xc00257c8
c0019044:	e8 57 68 00 00       	call   c001f8a0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0019049:	c7 04 24 c8 57 02 c0 	mov    DWORD PTR [esp],0xc00257c8
c0019050:	89 c7                	mov    edi,eax
c0019052:	e8 51 68 00 00       	call   c001f8a8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0019057:	83 c4 10             	add    esp,0x10
c001905a:	84 c0                	test   al,al
c001905c:	0f 84 e4 00 00 00    	je     c0019146 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c0019062:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0019065:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001906b:	85 d2                	test   edx,edx
c001906d:	74 0f                	je     c001907e <cleanupTerminatedTask(ThreadControlBlock*)+0x17b>
c001906f:	83 ec 0c             	sub    esp,0xc
c0019072:	8b 02                	mov    eax,DWORD PTR [edx]
c0019074:	52                   	push   edx
c0019075:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019078:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001907b:	83 c4 10             	add    esp,0x10
c001907e:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c0019088:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001908b:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c0019091:	85 db                	test   ebx,ebx
c0019093:	74 16                	je     c00190ab <cleanupTerminatedTask(ThreadControlBlock*)+0x1a8>
c0019095:	83 ec 0c             	sub    esp,0xc
c0019098:	53                   	push   ebx
c0019099:	e8 1e 56 ff ff       	call   c000e6bc <VAS::~VAS()>
c001909e:	58                   	pop    eax
c001909f:	5a                   	pop    edx
c00190a0:	6a 10                	push   0x10
c00190a2:	53                   	push   ebx
c00190a3:	e8 9f 5f ff ff       	call   c000f047 <operator delete(void*, unsigned long)>
c00190a8:	83 c4 10             	add    esp,0x10
c00190ab:	83 ec 0c             	sub    esp,0xc
c00190ae:	68 5d 2a 02 c0       	push   0xc0022a5d
c00190b3:	e8 6f 60 ff ff       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c00190b8:	83 c4 10             	add    esp,0x10
c00190bb:	83 ec 08             	sub    esp,0x8
c00190be:	68 3b 07 00 00       	push   0x73b
c00190c3:	68 6b 2a 02 c0       	push   0xc0022a6b
c00190c8:	e8 5a 60 ff ff       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c00190cd:	83 c4 2c             	add    esp,0x2c
c00190d0:	5b                   	pop    ebx
c00190d1:	5e                   	pop    esi
c00190d2:	5f                   	pop    edi
c00190d3:	5d                   	pop    ebp
c00190d4:	c3                   	ret    
c00190d5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00190d9:	83 ec 0c             	sub    esp,0xc
c00190dc:	68 48 2d 02 c0       	push   0xc0022d48
c00190e1:	e8 0a c8 ff ff       	call   c00158f0 <Krnl::panic(char const*)>
c00190e6:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c00190e9:	83 c4 10             	add    esp,0x10
c00190ec:	89 f7                	mov    edi,esi
c00190ee:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00190f2:	e9 8e fe ff ff       	jmp    c0018f85 <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c00190f7:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00190fd:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c0019103:	75 1c                	jne    c0019121 <cleanupTerminatedTask(ThreadControlBlock*)+0x21e>
c0019105:	83 ec 0c             	sub    esp,0xc
c0019108:	68 b0 2d 02 c0       	push   0xc0022db0
c001910d:	e8 15 60 ff ff       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c0019112:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0019119:	e8 b4 fb ff ff       	call   c0018cd2 <blockTask(TaskState)>
c001911e:	83 c4 10             	add    esp,0x10
c0019121:	83 ec 08             	sub    esp,0x8
c0019124:	56                   	push   esi
c0019125:	68 c8 57 02 c0       	push   0xc00257c8
c001912a:	e8 43 68 00 00       	call   c001f972 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001912f:	c7 04 24 c8 57 02 c0 	mov    DWORD PTR [esp],0xc00257c8
c0019136:	e8 65 67 00 00       	call   c001f8a0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001913b:	83 c4 10             	add    esp,0x10
c001913e:	39 f8                	cmp    eax,edi
c0019140:	0f 84 1c ff ff ff    	je     c0019062 <cleanupTerminatedTask(ThreadControlBlock*)+0x15f>
c0019146:	83 ec 0c             	sub    esp,0xc
c0019149:	68 c8 57 02 c0       	push   0xc00257c8
c001914e:	e8 4d 67 00 00       	call   c001f8a0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0019153:	c7 04 24 c8 57 02 c0 	mov    DWORD PTR [esp],0xc00257c8
c001915a:	89 c6                	mov    esi,eax
c001915c:	e8 63 67 00 00       	call   c001f8c4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0019161:	83 c4 10             	add    esp,0x10
c0019164:	39 f3                	cmp    ebx,esi
c0019166:	74 b9                	je     c0019121 <cleanupTerminatedTask(ThreadControlBlock*)+0x21e>
c0019168:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001916b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001916e:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c0019174:	75 ab                	jne    c0019121 <cleanupTerminatedTask(ThreadControlBlock*)+0x21e>
c0019176:	e9 7c ff ff ff       	jmp    c00190f7 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c001917b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001917f:	83 ec 0c             	sub    esp,0xc
c0019182:	68 7c 2d 02 c0       	push   0xc0022d7c
c0019187:	e9 55 ff ff ff       	jmp    c00190e1 <cleanupTerminatedTask(ThreadControlBlock*)+0x1de>
c001918c:	8b 36                	mov    esi,DWORD PTR [esi]
c001918e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0019192:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c0019195:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0019198:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001919e:	01 d7                	add    edi,edx
c00191a0:	89 f8                	mov    eax,edi
c00191a2:	e9 44 fe ff ff       	jmp    c0018feb <cleanupTerminatedTask(ThreadControlBlock*)+0xe8>

c00191a7 <cleanerTaskFunction(void*)>:
c00191a7:	53                   	push   ebx
c00191a8:	83 ec 08             	sub    esp,0x8
c00191ab:	e8 96 f6 ff ff       	call   c0018846 <unlockScheduler()>
c00191b0:	e8 8f f6 ff ff       	call   c0018844 <lockScheduler()>
c00191b5:	80 3d 8c 57 02 c0 00 	cmp    BYTE PTR ds:0xc002578c,0x0
c00191bc:	0f 85 8e 00 00 00    	jne    c0019250 <cleanerTaskFunction(void*)+0xa9>
c00191c2:	83 ec 0c             	sub    esp,0xc
c00191c5:	6a 02                	push   0x2
c00191c7:	e8 c4 fa ff ff       	call   c0018c90 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00191cc:	83 c4 10             	add    esp,0x10
c00191cf:	c6 05 8c 57 02 c0 00 	mov    BYTE PTR ds:0xc002578c,0x0
c00191d6:	e8 90 f6 ff ff       	call   c001886b <lockStuff()>
c00191db:	e8 64 f6 ff ff       	call   c0018844 <lockScheduler()>
c00191e0:	83 ec 0c             	sub    esp,0xc
c00191e3:	68 b0 57 02 c0       	push   0xc00257b0
c00191e8:	e8 bb 66 00 00       	call   c001f8a8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00191ed:	83 c4 10             	add    esp,0x10
c00191f0:	84 c0                	test   al,al
c00191f2:	75 40                	jne    c0019234 <cleanerTaskFunction(void*)+0x8d>
c00191f4:	83 ec 0c             	sub    esp,0xc
c00191f7:	68 b0 57 02 c0       	push   0xc00257b0
c00191fc:	e8 9f 66 00 00       	call   c001f8a0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0019201:	c7 04 24 b0 57 02 c0 	mov    DWORD PTR [esp],0xc00257b0
c0019208:	89 c3                	mov    ebx,eax
c001920a:	e8 b5 66 00 00       	call   c001f8c4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001920f:	c7 04 24 81 2a 02 c0 	mov    DWORD PTR [esp],0xc0022a81
c0019216:	e8 0c 5f ff ff       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c001921b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001921e:	e8 e0 fc ff ff       	call   c0018f03 <cleanupTerminatedTask(ThreadControlBlock*)>
c0019223:	c7 04 24 9a 2a 02 c0 	mov    DWORD PTR [esp],0xc0022a9a
c001922a:	e8 f8 5e ff ff       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c001922f:	83 c4 10             	add    esp,0x10
c0019232:	eb ac                	jmp    c00191e0 <cleanerTaskFunction(void*)+0x39>
c0019234:	e8 0d f6 ff ff       	call   c0018846 <unlockScheduler()>
c0019239:	e8 bf f9 ff ff       	call   c0018bfd <unlockStuff()>
c001923e:	e8 01 f6 ff ff       	call   c0018844 <lockScheduler()>
c0019243:	80 3d 8c 57 02 c0 00 	cmp    BYTE PTR ds:0xc002578c,0x0
c001924a:	0f 84 72 ff ff ff    	je     c00191c2 <cleanerTaskFunction(void*)+0x1b>
c0019250:	e8 f1 f5 ff ff       	call   c0018846 <unlockScheduler()>
c0019255:	e9 75 ff ff ff       	jmp    c00191cf <cleanerTaskFunction(void*)+0x28>

c001925a <terminateTask(int)>:
c001925a:	83 ec 14             	sub    esp,0x14
c001925d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019262:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019265:	83 c0 0c             	add    eax,0xc
c0019268:	50                   	push   eax
c0019269:	68 d8 2d 02 c0       	push   0xc0022dd8
c001926e:	e8 b4 5e ff ff       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c0019273:	e8 f3 f5 ff ff       	call   c001886b <lockStuff()>
c0019278:	e8 c7 f5 ff ff       	call   c0018844 <lockScheduler()>
c001927d:	c7 04 24 ad 2a 02 c0 	mov    DWORD PTR [esp],0xc0022aad
c0019284:	e8 9e 5e ff ff       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c0019289:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001928d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019292:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c0019295:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001929a:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001929d:	5a                   	pop    edx
c001929e:	59                   	pop    ecx
c001929f:	50                   	push   eax
c00192a0:	68 b0 57 02 c0       	push   0xc00257b0
c00192a5:	e8 c8 66 00 00       	call   c001f972 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00192aa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00192af:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c00192b6:	c7 04 24 c7 2a 02 c0 	mov    DWORD PTR [esp],0xc0022ac7
c00192bd:	e8 65 5e ff ff       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c00192c2:	83 c4 10             	add    esp,0x10
c00192c5:	a1 88 57 02 c0       	mov    eax,ds:0xc0025788
c00192ca:	85 c0                	test   eax,eax
c00192cc:	74 5a                	je     c0019328 <terminateTask(int)+0xce>
c00192ce:	83 ec 0c             	sub    esp,0xc
c00192d1:	68 e1 2a 02 c0       	push   0xc0022ae1
c00192d6:	e8 4c 5e ff ff       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c00192db:	58                   	pop    eax
c00192dc:	c6 05 8c 57 02 c0 01 	mov    BYTE PTR ds:0xc002578c,0x1
c00192e3:	ff 35 88 57 02 c0    	push   DWORD PTR ds:0xc0025788
c00192e9:	e8 66 fb ff ff       	call   c0018e54 <unblockTask(ThreadControlBlock*)>
c00192ee:	c7 04 24 fb 2a 02 c0 	mov    DWORD PTR [esp],0xc0022afb
c00192f5:	e8 2d 5e ff ff       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c00192fa:	83 c4 10             	add    esp,0x10
c00192fd:	e8 44 f5 ff ff       	call   c0018846 <unlockScheduler()>
c0019302:	e8 f6 f8 ff ff       	call   c0018bfd <unlockStuff()>
c0019307:	83 ec 0c             	sub    esp,0xc
c001930a:	68 33 2b 02 c0       	push   0xc0022b33
c001930f:	e8 13 5e ff ff       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c0019314:	83 c4 10             	add    esp,0x10
c0019317:	e8 28 f5 ff ff       	call   c0018844 <lockScheduler()>
c001931c:	e8 57 f8 ff ff       	call   c0018b78 <schedule()>
c0019321:	e8 20 f5 ff ff       	call   c0018846 <unlockScheduler()>
c0019326:	eb ef                	jmp    c0019317 <terminateTask(int)+0xbd>
c0019328:	83 ec 0c             	sub    esp,0xc
c001932b:	68 15 2b 02 c0       	push   0xc0022b15
c0019330:	e8 f2 5d ff ff       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c0019335:	83 c4 10             	add    esp,0x10
c0019338:	eb c3                	jmp    c00192fd <terminateTask(int)+0xa3>

c001933a <Thr::terminateFromIRQ(int)>:
c001933a:	83 ec 18             	sub    esp,0x18
c001933d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019341:	e8 14 ff ff ff       	call   c001925a <terminateTask(int)>

c0019346 <Semaphore::release()>:
c0019346:	83 ec 0c             	sub    esp,0xc
c0019349:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001934d:	e8 19 f5 ff ff       	call   c001886b <lockStuff()>
c0019352:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0019355:	85 d2                	test   edx,edx
c0019357:	74 1a                	je     c0019373 <Semaphore::release()+0x2d>
c0019359:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c001935c:	83 ec 0c             	sub    esp,0xc
c001935f:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0019362:	52                   	push   edx
c0019363:	e8 ec fa ff ff       	call   c0018e54 <unblockTask(ThreadControlBlock*)>
c0019368:	83 c4 10             	add    esp,0x10
c001936b:	83 c4 0c             	add    esp,0xc
c001936e:	e9 8a f8 ff ff       	jmp    c0018bfd <unlockStuff()>
c0019373:	ff 48 0c             	dec    DWORD PTR [eax+0xc]
c0019376:	83 c4 0c             	add    esp,0xc
c0019379:	e9 7f f8 ff ff       	jmp    c0018bfd <unlockStuff()>

c001937e <__static_initialization_and_destruction_0(int, int)>:
c001937e:	83 ec 0c             	sub    esp,0xc
c0019381:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0019386:	0f 85 88 00 00 00    	jne    c0019414 <__static_initialization_and_destruction_0(int, int)+0x96>
c001938c:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0019394:	75 7e                	jne    c0019414 <__static_initialization_and_destruction_0(int, int)+0x96>
c0019396:	83 ec 0c             	sub    esp,0xc
c0019399:	68 c8 57 02 c0       	push   0xc00257c8
c001939e:	e8 b5 67 00 00       	call   c001fb58 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00193a3:	83 c4 10             	add    esp,0x10
c00193a6:	83 ec 04             	sub    esp,0x4
c00193a9:	68 9c 37 02 c0       	push   0xc002379c
c00193ae:	68 c8 57 02 c0       	push   0xc00257c8
c00193b3:	68 18 fb 01 c0       	push   0xc001fb18
c00193b8:	e8 06 5c ff ff       	call   c000efc3 <__cxa_atexit>
c00193bd:	83 c4 10             	add    esp,0x10
c00193c0:	83 ec 0c             	sub    esp,0xc
c00193c3:	68 bc 57 02 c0       	push   0xc00257bc
c00193c8:	e8 8b 67 00 00       	call   c001fb58 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00193cd:	83 c4 10             	add    esp,0x10
c00193d0:	83 ec 04             	sub    esp,0x4
c00193d3:	68 9c 37 02 c0       	push   0xc002379c
c00193d8:	68 bc 57 02 c0       	push   0xc00257bc
c00193dd:	68 18 fb 01 c0       	push   0xc001fb18
c00193e2:	e8 dc 5b ff ff       	call   c000efc3 <__cxa_atexit>
c00193e7:	83 c4 10             	add    esp,0x10
c00193ea:	83 ec 0c             	sub    esp,0xc
c00193ed:	68 b0 57 02 c0       	push   0xc00257b0
c00193f2:	e8 61 67 00 00       	call   c001fb58 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00193f7:	83 c4 10             	add    esp,0x10
c00193fa:	83 ec 04             	sub    esp,0x4
c00193fd:	68 9c 37 02 c0       	push   0xc002379c
c0019402:	68 b0 57 02 c0       	push   0xc00257b0
c0019407:	68 18 fb 01 c0       	push   0xc001fb18
c001940c:	e8 b2 5b ff ff       	call   c000efc3 <__cxa_atexit>
c0019411:	83 c4 10             	add    esp,0x10
c0019414:	90                   	nop
c0019415:	83 c4 0c             	add    esp,0xc
c0019418:	c3                   	ret    

c0019419 <_GLOBAL__sub_I_kernelProcess>:
c0019419:	83 ec 0c             	sub    esp,0xc
c001941c:	83 ec 08             	sub    esp,0x8
c001941f:	68 ff ff 00 00       	push   0xffff
c0019424:	6a 01                	push   0x1
c0019426:	e8 53 ff ff ff       	call   c001937e <__static_initialization_and_destruction_0(int, int)>
c001942b:	83 c4 10             	add    esp,0x10
c001942e:	83 c4 0c             	add    esp,0xc
c0019431:	c3                   	ret    

c0019432 <Vm::vm8086EntryPoint(void*)>:
c0019432:	83 ec 0c             	sub    esp,0xc
c0019435:	e8 0c f4 ff ff       	call   c0018846 <unlockScheduler()>
c001943a:	fb                   	sti    
c001943b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019440:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c0019444:	52                   	push   edx
c0019445:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c0019449:	52                   	push   edx
c001944a:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001944e:	52                   	push   edx
c001944f:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c0019453:	50                   	push   eax
c0019454:	e8 27 6e fe ff       	call   c0000280 <goToVM86>
c0019459:	83 c4 1c             	add    esp,0x1c
c001945c:	c3                   	ret    

c001945d <Vm::inbv(unsigned short)>:
c001945d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019461:	ec                   	in     al,dx
c0019462:	c3                   	ret    

c0019463 <Vm::outbv(unsigned short, unsigned char)>:
c0019463:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019467:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001946b:	ee                   	out    dx,al
c001946c:	c3                   	ret    

c001946d <Vm::realToLinear(unsigned short, unsigned short)>:
c001946d:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019472:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019477:	c1 e0 04             	shl    eax,0x4
c001947a:	01 d0                	add    eax,edx
c001947c:	c3                   	ret    

c001947d <Vm::getSegment(unsigned int)>:
c001947d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019481:	c1 e8 10             	shr    eax,0x10
c0019484:	c3                   	ret    

c0019485 <Vm::getOffset(unsigned int)>:
c0019485:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019489:	c3                   	ret    

c001948a <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001948a:	55                   	push   ebp
c001948b:	57                   	push   edi
c001948c:	56                   	push   esi
c001948d:	53                   	push   ebx
c001948e:	83 ec 2c             	sub    esp,0x2c
c0019491:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c0019495:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0019499:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001949d:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c00194a1:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c00194a5:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c00194a9:	e8 96 f3 ff ff       	call   c0018844 <lockScheduler()>
c00194ae:	68 80 00 00 00       	push   0x80
c00194b3:	6a 00                	push   0x0
c00194b5:	68 32 94 01 c0       	push   0xc0019432
c00194ba:	55                   	push   ebp
c00194bb:	e8 ae f4 ff ff       	call   c001896e <Process::createThread(void (*)(void*), void*, int)>
c00194c0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00194c4:	66 89 58 5f          	mov    WORD PTR [eax+0x5f],bx
c00194c8:	66 89 50 5d          	mov    WORD PTR [eax+0x5d],dx
c00194cc:	66 89 78 59          	mov    WORD PTR [eax+0x59],di
c00194d0:	66 89 70 5b          	mov    WORD PTR [eax+0x5b],si
c00194d4:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c00194d8:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00194df:	e8 54 5b ff ff       	call   c000f038 <operator new(unsigned long)>
c00194e4:	83 c4 0c             	add    esp,0xc
c00194e7:	89 c3                	mov    ebx,eax
c00194e9:	55                   	push   ebp
c00194ea:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00194ee:	50                   	push   eax
c00194ef:	e8 62 61 ff ff       	call   c000f656 <File::File(char const*, Process*)>
c00194f4:	83 c4 0c             	add    esp,0xc
c00194f7:	8d 44 24 17          	lea    eax,[esp+0x17]
c00194fb:	50                   	push   eax
c00194fc:	8d 44 24 20          	lea    eax,[esp+0x20]
c0019500:	50                   	push   eax
c0019501:	53                   	push   ebx
c0019502:	e8 5f 64 ff ff       	call   c000f966 <File::stat(unsigned long long*, bool*)>
c0019507:	8a 54 24 23          	mov    dl,BYTE PTR [esp+0x23]
c001950b:	83 c4 10             	add    esp,0x10
c001950e:	84 d2                	test   dl,dl
c0019510:	74 1c                	je     c001952e <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xa4>
c0019512:	83 ec 0c             	sub    esp,0xc
c0019515:	68 f7 2d 02 c0       	push   0xc0022df7
c001951a:	e8 d1 c3 ff ff       	call   c00158f0 <Krnl::panic(char const*)>
c001951f:	e8 22 f3 ff ff       	call   c0018846 <unlockScheduler()>
c0019524:	83 c4 10             	add    esp,0x10
c0019527:	31 d2                	xor    edx,edx
c0019529:	e9 81 00 00 00       	jmp    c00195af <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x125>
c001952e:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0019532:	51                   	push   ecx
c0019533:	51                   	push   ecx
c0019534:	6a 01                	push   0x1
c0019536:	53                   	push   ebx
c0019537:	e8 7e 61 ff ff       	call   c000f6ba <File::open(FileOpenMode)>
c001953c:	83 c4 10             	add    esp,0x10
c001953f:	85 c0                	test   eax,eax
c0019541:	74 1b                	je     c001955e <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd4>
c0019543:	83 ec 0c             	sub    esp,0xc
c0019546:	68 10 2e 02 c0       	push   0xc0022e10
c001954b:	e8 a0 c3 ff ff       	call   c00158f0 <Krnl::panic(char const*)>
c0019550:	e8 f1 f2 ff ff       	call   c0018846 <unlockScheduler()>
c0019555:	83 c4 10             	add    esp,0x10
c0019558:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c001955c:	eb 51                	jmp    c00195af <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x125>
c001955e:	83 ec 0c             	sub    esp,0xc
c0019561:	0f b7 ff             	movzx  edi,di
c0019564:	6a 07                	push   0x7
c0019566:	0f b7 f6             	movzx  esi,si
c0019569:	68 00 01 00 00       	push   0x100
c001956e:	6a 00                	push   0x0
c0019570:	6a 00                	push   0x0
c0019572:	ff b5 32 05 00 00    	push   DWORD PTR [ebp+0x532]
c0019578:	e8 97 55 ff ff       	call   c000eb14 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001957d:	83 c4 18             	add    esp,0x18
c0019580:	57                   	push   edi
c0019581:	56                   	push   esi
c0019582:	e8 e6 fe ff ff       	call   c001946d <Vm::realToLinear(unsigned short, unsigned short)>
c0019587:	5a                   	pop    edx
c0019588:	8b 13                	mov    edx,DWORD PTR [ebx]
c001958a:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001958e:	51                   	push   ecx
c001958f:	50                   	push   eax
c0019590:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019594:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019598:	53                   	push   ebx
c0019599:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001959c:	83 c4 14             	add    esp,0x14
c001959f:	53                   	push   ebx
c00195a0:	e8 73 61 ff ff       	call   c000f718 <File::close()>
c00195a5:	e8 9c f2 ff ff       	call   c0018846 <unlockScheduler()>
c00195aa:	83 c4 10             	add    esp,0x10
c00195ad:	b2 01                	mov    dl,0x1
c00195af:	83 c4 2c             	add    esp,0x2c
c00195b2:	88 d0                	mov    al,dl
c00195b4:	5b                   	pop    ebx
c00195b5:	5e                   	pop    esi
c00195b6:	5f                   	pop    edi
c00195b7:	5d                   	pop    ebp
c00195b8:	c3                   	ret    

c00195b9 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c00195b9:	57                   	push   edi
c00195ba:	56                   	push   esi
c00195bb:	53                   	push   ebx
c00195bc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00195c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00195c4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00195c8:	83 e8 06             	sub    eax,0x6
c00195cb:	0f b7 c0             	movzx  eax,ax
c00195ce:	50                   	push   eax
c00195cf:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c00195d4:	50                   	push   eax
c00195d5:	e8 93 fe ff ff       	call   c001946d <Vm::realToLinear(unsigned short, unsigned short)>
c00195da:	5a                   	pop    edx
c00195db:	5e                   	pop    esi
c00195dc:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c00195df:	8d 56 fa             	lea    edx,[esi-0x6]
c00195e2:	81 e2 ff ff 00 00    	and    edx,0xffff
c00195e8:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c00195eb:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c00195ee:	83 c2 02             	add    edx,0x2
c00195f1:	66 89 10             	mov    WORD PTR [eax],dx
c00195f4:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c00195f7:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c00195fb:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c00195fe:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0019602:	89 d6                	mov    esi,edx
c0019604:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001960a:	66 81 e6 ff fd       	and    si,0xfdff
c001960f:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c0019613:	74 07                	je     c001961c <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c0019615:	89 d6                	mov    esi,edx
c0019617:	66 81 ce 00 02       	or     si,0x200
c001961c:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c0019620:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019625:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0019629:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c0019631:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c0019634:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001963c:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001963f:	5b                   	pop    ebx
c0019640:	5e                   	pop    esi
c0019641:	5f                   	pop    edi
c0019642:	c3                   	ret    

c0019643 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0019643:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019648:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001964d:	c1 e0 04             	shl    eax,0x4
c0019650:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0019653:	c3                   	ret    

c0019654 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0019654:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019659:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001965e:	c1 e0 04             	shl    eax,0x4
c0019661:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0019665:	c3                   	ret    

c0019666 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0019666:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001966b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019670:	c1 e0 04             	shl    eax,0x4
c0019673:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0019676:	c3                   	ret    

c0019677 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0019677:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001967c:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019681:	c1 e0 04             	shl    eax,0x4
c0019684:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019688:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001968b:	c3                   	ret    

c001968c <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001968c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019691:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019696:	c1 e0 04             	shl    eax,0x4
c0019699:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001969d:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c00196a1:	c3                   	ret    

c00196a2 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c00196a2:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00196a7:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00196ac:	c1 e0 04             	shl    eax,0x4
c00196af:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00196b3:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c00196b6:	c3                   	ret    

c00196b7 <Vm::faultHandler(regs*)>:
c00196b7:	55                   	push   ebp
c00196b8:	57                   	push   edi
c00196b9:	56                   	push   esi
c00196ba:	53                   	push   ebx
c00196bb:	83 ec 1c             	sub    esp,0x1c
c00196be:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00196c2:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00196c5:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c00196c9:	0f b7 f0             	movzx  esi,ax
c00196cc:	52                   	push   edx
c00196cd:	0f b7 c0             	movzx  eax,ax
c00196d0:	50                   	push   eax
c00196d1:	e8 97 fd ff ff       	call   c001946d <Vm::realToLinear(unsigned short, unsigned short)>
c00196d6:	5a                   	pop    edx
c00196d7:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c00196da:	59                   	pop    ecx
c00196db:	89 c7                	mov    edi,eax
c00196dd:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00196e0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00196e4:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00196e9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00196ed:	0f b7 c5             	movzx  eax,bp
c00196f0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00196f4:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00196f8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00196fc:	e8 6c fd ff ff       	call   c001946d <Vm::realToLinear(unsigned short, unsigned short)>
c0019701:	5a                   	pop    edx
c0019702:	59                   	pop    ecx
c0019703:	b1 06                	mov    cl,0x6
c0019705:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c001970a:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c001970f:	0f b6 17             	movzx  edx,BYTE PTR [edi]
c0019712:	80 fa 9d             	cmp    dl,0x9d
c0019715:	0f 84 1d 02 00 00    	je     c0019938 <Vm::faultHandler(regs*)+0x281>
c001971b:	0f 87 8e 00 00 00    	ja     c00197af <Vm::faultHandler(regs*)+0xf8>
c0019721:	80 fa 66             	cmp    dl,0x66
c0019724:	0f 84 89 01 00 00    	je     c00198b3 <Vm::faultHandler(regs*)+0x1fc>
c001972a:	77 44                	ja     c0019770 <Vm::faultHandler(regs*)+0xb9>
c001972c:	80 fa 36             	cmp    dl,0x36
c001972f:	0f 84 74 01 00 00    	je     c00198a9 <Vm::faultHandler(regs*)+0x1f2>
c0019735:	77 1a                	ja     c0019751 <Vm::faultHandler(regs*)+0x9a>
c0019737:	80 fa 26             	cmp    dl,0x26
c001973a:	0f 84 4b 01 00 00    	je     c001988b <Vm::faultHandler(regs*)+0x1d4>
c0019740:	80 fa 2e             	cmp    dl,0x2e
c0019743:	0f 85 4a 05 00 00    	jne    c0019c93 <Vm::faultHandler(regs*)+0x5dc>
c0019749:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001974c:	31 c9                	xor    ecx,ecx
c001974e:	47                   	inc    edi
c001974f:	eb be                	jmp    c001970f <Vm::faultHandler(regs*)+0x58>
c0019751:	80 fa 64             	cmp    dl,0x64
c0019754:	0f 84 3b 01 00 00    	je     c0019895 <Vm::faultHandler(regs*)+0x1de>
c001975a:	0f 87 3f 01 00 00    	ja     c001989f <Vm::faultHandler(regs*)+0x1e8>
c0019760:	80 fa 3e             	cmp    dl,0x3e
c0019763:	0f 85 2a 05 00 00    	jne    c0019c93 <Vm::faultHandler(regs*)+0x5dc>
c0019769:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001976c:	b1 01                	mov    cl,0x1
c001976e:	eb de                	jmp    c001974e <Vm::faultHandler(regs*)+0x97>
c0019770:	80 fa 6d             	cmp    dl,0x6d
c0019773:	0f 84 bf 02 00 00    	je     c0019a38 <Vm::faultHandler(regs*)+0x381>
c0019779:	77 17                	ja     c0019792 <Vm::faultHandler(regs*)+0xdb>
c001977b:	80 fa 67             	cmp    dl,0x67
c001977e:	0f 84 3c 01 00 00    	je     c00198c0 <Vm::faultHandler(regs*)+0x209>
c0019784:	80 fa 6c             	cmp    dl,0x6c
c0019787:	0f 84 5d 02 00 00    	je     c00199ea <Vm::faultHandler(regs*)+0x333>
c001978d:	e9 01 05 00 00       	jmp    c0019c93 <Vm::faultHandler(regs*)+0x5dc>
c0019792:	80 fa 6f             	cmp    dl,0x6f
c0019795:	0f 84 8b 03 00 00    	je     c0019b26 <Vm::faultHandler(regs*)+0x46f>
c001979b:	0f 82 0f 03 00 00    	jb     c0019ab0 <Vm::faultHandler(regs*)+0x3f9>
c00197a1:	80 fa 9c             	cmp    dl,0x9c
c00197a4:	0f 84 23 01 00 00    	je     c00198cd <Vm::faultHandler(regs*)+0x216>
c00197aa:	e9 e4 04 00 00       	jmp    c0019c93 <Vm::faultHandler(regs*)+0x5dc>
c00197af:	80 fa ec             	cmp    dl,0xec
c00197b2:	0f 84 7f 04 00 00    	je     c0019c37 <Vm::faultHandler(regs*)+0x580>
c00197b8:	77 7b                	ja     c0019835 <Vm::faultHandler(regs*)+0x17e>
c00197ba:	80 fa e4             	cmp    dl,0xe4
c00197bd:	0f 84 fe 03 00 00    	je     c0019bc1 <Vm::faultHandler(regs*)+0x50a>
c00197c3:	77 53                	ja     c0019818 <Vm::faultHandler(regs*)+0x161>
c00197c5:	80 fa cd             	cmp    dl,0xcd
c00197c8:	0f 84 cd 01 00 00    	je     c001999b <Vm::faultHandler(regs*)+0x2e4>
c00197ce:	80 fa cf             	cmp    dl,0xcf
c00197d1:	0f 85 bc 04 00 00    	jne    c0019c93 <Vm::faultHandler(regs*)+0x5dc>
c00197d7:	0f b7 10             	movzx  edx,WORD PTR [eax]
c00197da:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c00197dd:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c00197e1:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c00197e4:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c00197e8:	81 ca 00 02 02 00    	or     edx,0x20200
c00197ee:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00197f1:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c00197f5:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00197fb:	66 c1 e8 09          	shr    ax,0x9
c00197ff:	83 e0 01             	and    eax,0x1
c0019802:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c0019805:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0019808:	83 c0 06             	add    eax,0x6
c001980b:	25 ff ff 00 00       	and    eax,0xffff
c0019810:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0019813:	e9 77 04 00 00       	jmp    c0019c8f <Vm::faultHandler(regs*)+0x5d8>
c0019818:	80 fa e6             	cmp    dl,0xe6
c001981b:	0f 84 ea 03 00 00    	je     c0019c0b <Vm::faultHandler(regs*)+0x554>
c0019821:	0f 82 b6 03 00 00    	jb     c0019bdd <Vm::faultHandler(regs*)+0x526>
c0019827:	80 fa e7             	cmp    dl,0xe7
c001982a:	0f 84 f2 03 00 00    	je     c0019c22 <Vm::faultHandler(regs*)+0x56b>
c0019830:	e9 5e 04 00 00       	jmp    c0019c93 <Vm::faultHandler(regs*)+0x5dc>
c0019835:	80 fa ef             	cmp    dl,0xef
c0019838:	0f 84 3c 04 00 00    	je     c0019c7a <Vm::faultHandler(regs*)+0x5c3>
c001983e:	77 28                	ja     c0019868 <Vm::faultHandler(regs*)+0x1b1>
c0019840:	80 fa ed             	cmp    dl,0xed
c0019843:	0f 84 0a 04 00 00    	je     c0019c53 <Vm::faultHandler(regs*)+0x59c>
c0019849:	80 fa ee             	cmp    dl,0xee
c001984c:	0f 85 41 04 00 00    	jne    c0019c93 <Vm::faultHandler(regs*)+0x5dc>
c0019852:	50                   	push   eax
c0019853:	50                   	push   eax
c0019854:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0019858:	50                   	push   eax
c0019859:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001985d:	50                   	push   eax
c001985e:	e8 00 fc ff ff       	call   c0019463 <Vm::outbv(unsigned short, unsigned char)>
c0019863:	e9 0a 04 00 00       	jmp    c0019c72 <Vm::faultHandler(regs*)+0x5bb>
c0019868:	80 fa fa             	cmp    dl,0xfa
c001986b:	0f 84 5d 01 00 00    	je     c00199ce <Vm::faultHandler(regs*)+0x317>
c0019871:	80 fa fb             	cmp    dl,0xfb
c0019874:	0f 84 62 01 00 00    	je     c00199dc <Vm::faultHandler(regs*)+0x325>
c001987a:	80 fa f3             	cmp    dl,0xf3
c001987d:	0f 85 10 04 00 00    	jne    c0019c93 <Vm::faultHandler(regs*)+0x5dc>
c0019883:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019886:	e9 c3 fe ff ff       	jmp    c001974e <Vm::faultHandler(regs*)+0x97>
c001988b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001988e:	b1 02                	mov    cl,0x2
c0019890:	e9 b9 fe ff ff       	jmp    c001974e <Vm::faultHandler(regs*)+0x97>
c0019895:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019898:	b1 03                	mov    cl,0x3
c001989a:	e9 af fe ff ff       	jmp    c001974e <Vm::faultHandler(regs*)+0x97>
c001989f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00198a2:	b1 04                	mov    cl,0x4
c00198a4:	e9 a5 fe ff ff       	jmp    c001974e <Vm::faultHandler(regs*)+0x97>
c00198a9:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00198ac:	b1 05                	mov    cl,0x5
c00198ae:	e9 9b fe ff ff       	jmp    c001974e <Vm::faultHandler(regs*)+0x97>
c00198b3:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00198b6:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c00198bb:	e9 8e fe ff ff       	jmp    c001974e <Vm::faultHandler(regs*)+0x97>
c00198c0:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00198c3:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c00198c8:	e9 81 fe ff ff       	jmp    c001974e <Vm::faultHandler(regs*)+0x97>
c00198cd:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c00198d0:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00198d4:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00198d9:	74 30                	je     c001990b <Vm::faultHandler(regs*)+0x254>
c00198db:	83 e9 04             	sub    ecx,0x4
c00198de:	81 e2 ff 0d 00 00    	and    edx,0xdff
c00198e4:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00198ea:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c00198ed:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c00198f0:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00198f6:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c00198fa:	0f 84 8c 03 00 00    	je     c0019c8c <Vm::faultHandler(regs*)+0x5d5>
c0019900:	80 ce 02             	or     dh,0x2
c0019903:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0019906:	e9 81 03 00 00       	jmp    c0019c8c <Vm::faultHandler(regs*)+0x5d5>
c001990b:	83 e9 02             	sub    ecx,0x2
c001990e:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0019914:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0019917:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001991b:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0019921:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c0019925:	74 05                	je     c001992c <Vm::faultHandler(regs*)+0x275>
c0019927:	80 ce 02             	or     dh,0x2
c001992a:	eb 03                	jmp    c001992f <Vm::faultHandler(regs*)+0x278>
c001992c:	80 e6 fd             	and    dh,0xfd
c001992f:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0019933:	e9 54 03 00 00       	jmp    c0019c8c <Vm::faultHandler(regs*)+0x5d5>
c0019938:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001993d:	74 2a                	je     c0019969 <Vm::faultHandler(regs*)+0x2b2>
c001993f:	8b 10                	mov    edx,DWORD PTR [eax]
c0019941:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0019947:	81 ca 00 02 02 00    	or     edx,0x20200
c001994d:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0019950:	8b 00                	mov    eax,DWORD PTR [eax]
c0019952:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0019958:	c1 e8 09             	shr    eax,0x9
c001995b:	83 e0 01             	and    eax,0x1
c001995e:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c0019961:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0019964:	83 c0 04             	add    eax,0x4
c0019967:	eb 25                	jmp    c001998e <Vm::faultHandler(regs*)+0x2d7>
c0019969:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001996c:	81 ca 00 02 02 00    	or     edx,0x20200
c0019972:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0019975:	66 8b 00             	mov    ax,WORD PTR [eax]
c0019978:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001997e:	66 c1 e8 09          	shr    ax,0x9
c0019982:	83 e0 01             	and    eax,0x1
c0019985:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c0019988:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001998b:	83 c0 02             	add    eax,0x2
c001998e:	25 ff ff 00 00       	and    eax,0xffff
c0019993:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0019996:	e9 f1 02 00 00       	jmp    c0019c8c <Vm::faultHandler(regs*)+0x5d5>
c001999b:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c001999f:	3c ff                	cmp    al,0xff
c00199a1:	75 10                	jne    c00199b3 <Vm::faultHandler(regs*)+0x2fc>
c00199a3:	83 ec 0c             	sub    esp,0xc
c00199a6:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c00199a9:	e8 8c f9 ff ff       	call   c001933a <Thr::terminateFromIRQ(int)>
c00199ae:	e9 c2 02 00 00       	jmp    c0019c75 <Vm::faultHandler(regs*)+0x5be>
c00199b3:	83 ec 0c             	sub    esp,0xc
c00199b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00199ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00199be:	57                   	push   edi
c00199bf:	50                   	push   eax
c00199c0:	53                   	push   ebx
c00199c1:	e8 f3 fb ff ff       	call   c00195b9 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c00199c6:	83 c4 20             	add    esp,0x20
c00199c9:	e9 c1 02 00 00       	jmp    c0019c8f <Vm::faultHandler(regs*)+0x5d8>
c00199ce:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00199d3:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c00199d7:	e9 b0 02 00 00       	jmp    c0019c8c <Vm::faultHandler(regs*)+0x5d5>
c00199dc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00199e1:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c00199e5:	e9 a2 02 00 00       	jmp    c0019c8c <Vm::faultHandler(regs*)+0x5d5>
c00199ea:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c00199ef:	74 0d                	je     c00199fe <Vm::faultHandler(regs*)+0x347>
c00199f1:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c00199f8:	0f 87 e9 02 00 00    	ja     c0019ce7 <Vm::faultHandler(regs*)+0x630>
c00199fe:	83 ec 0c             	sub    esp,0xc
c0019a01:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0019a04:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0019a08:	50                   	push   eax
c0019a09:	e8 4f fa ff ff       	call   c001945d <Vm::inbv(unsigned short)>
c0019a0e:	83 c4 0c             	add    esp,0xc
c0019a11:	0f b6 c0             	movzx  eax,al
c0019a14:	0f b7 c9             	movzx  ecx,cx
c0019a17:	50                   	push   eax
c0019a18:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0019a1c:	50                   	push   eax
c0019a1d:	51                   	push   ecx
c0019a1e:	e8 54 fc ff ff       	call   c0019677 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0019a23:	83 c4 10             	add    esp,0x10
c0019a26:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019a29:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0019a2d:	74 03                	je     c0019a32 <Vm::faultHandler(regs*)+0x37b>
c0019a2f:	48                   	dec    eax
c0019a30:	eb 01                	jmp    c0019a33 <Vm::faultHandler(regs*)+0x37c>
c0019a32:	40                   	inc    eax
c0019a33:	0f b7 c0             	movzx  eax,ax
c0019a36:	eb 70                	jmp    c0019aa8 <Vm::faultHandler(regs*)+0x3f1>
c0019a38:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0019a3b:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0019a3e:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0019a43:	74 0c                	je     c0019a51 <Vm::faultHandler(regs*)+0x39a>
c0019a45:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c0019a4b:	0f 87 96 02 00 00    	ja     c0019ce7 <Vm::faultHandler(regs*)+0x630>
c0019a51:	0f b7 c9             	movzx  ecx,cx
c0019a54:	0f b7 f6             	movzx  esi,si
c0019a57:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0019a5a:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019a5f:	74 20                	je     c0019a81 <Vm::faultHandler(regs*)+0x3ca>
c0019a61:	ed                   	in     eax,dx
c0019a62:	55                   	push   ebp
c0019a63:	50                   	push   eax
c0019a64:	51                   	push   ecx
c0019a65:	56                   	push   esi
c0019a66:	e8 37 fc ff ff       	call   c00196a2 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0019a6b:	83 c4 10             	add    esp,0x10
c0019a6e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019a71:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0019a75:	74 05                	je     c0019a7c <Vm::faultHandler(regs*)+0x3c5>
c0019a77:	83 e8 04             	sub    eax,0x4
c0019a7a:	eb 27                	jmp    c0019aa3 <Vm::faultHandler(regs*)+0x3ec>
c0019a7c:	83 c0 04             	add    eax,0x4
c0019a7f:	eb 22                	jmp    c0019aa3 <Vm::faultHandler(regs*)+0x3ec>
c0019a81:	66 ed                	in     ax,dx
c0019a83:	0f b7 c0             	movzx  eax,ax
c0019a86:	57                   	push   edi
c0019a87:	50                   	push   eax
c0019a88:	51                   	push   ecx
c0019a89:	56                   	push   esi
c0019a8a:	e8 fd fb ff ff       	call   c001968c <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0019a8f:	83 c4 10             	add    esp,0x10
c0019a92:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019a95:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0019a99:	74 05                	je     c0019aa0 <Vm::faultHandler(regs*)+0x3e9>
c0019a9b:	83 e8 02             	sub    eax,0x2
c0019a9e:	eb 03                	jmp    c0019aa3 <Vm::faultHandler(regs*)+0x3ec>
c0019aa0:	83 c0 02             	add    eax,0x2
c0019aa3:	25 ff ff 00 00       	and    eax,0xffff
c0019aa8:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0019aab:	e9 dc 01 00 00       	jmp    c0019c8c <Vm::faultHandler(regs*)+0x5d5>
c0019ab0:	49                   	dec    ecx
c0019ab1:	80 f9 05             	cmp    cl,0x5
c0019ab4:	77 24                	ja     c0019ada <Vm::faultHandler(regs*)+0x423>
c0019ab6:	0f b6 c9             	movzx  ecx,cl
c0019ab9:	ff 24 8d 58 2e 02 c0 	jmp    DWORD PTR [ecx*4-0x3ffdd1a8]
c0019ac0:	0f b7 f5             	movzx  esi,bp
c0019ac3:	eb 15                	jmp    c0019ada <Vm::faultHandler(regs*)+0x423>
c0019ac5:	0f b7 73 0c          	movzx  esi,WORD PTR [ebx+0xc]
c0019ac9:	eb 0f                	jmp    c0019ada <Vm::faultHandler(regs*)+0x423>
c0019acb:	0f b7 73 08          	movzx  esi,WORD PTR [ebx+0x8]
c0019acf:	eb 09                	jmp    c0019ada <Vm::faultHandler(regs*)+0x423>
c0019ad1:	0f b7 73 04          	movzx  esi,WORD PTR [ebx+0x4]
c0019ad5:	eb 03                	jmp    c0019ada <Vm::faultHandler(regs*)+0x423>
c0019ad7:	0f b7 33             	movzx  esi,WORD PTR [ebx]
c0019ada:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0019add:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0019ae2:	74 0b                	je     c0019aef <Vm::faultHandler(regs*)+0x438>
c0019ae4:	3d ff ff 00 00       	cmp    eax,0xffff
c0019ae9:	0f 87 f8 01 00 00    	ja     c0019ce7 <Vm::faultHandler(regs*)+0x630>
c0019aef:	0f b7 c0             	movzx  eax,ax
c0019af2:	52                   	push   edx
c0019af3:	52                   	push   edx
c0019af4:	50                   	push   eax
c0019af5:	56                   	push   esi
c0019af6:	e8 48 fb ff ff       	call   c0019643 <Vm::readByteFromReal(unsigned short, unsigned short)>
c0019afb:	59                   	pop    ecx
c0019afc:	0f b6 c0             	movzx  eax,al
c0019aff:	5e                   	pop    esi
c0019b00:	50                   	push   eax
c0019b01:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0019b05:	50                   	push   eax
c0019b06:	e8 58 f9 ff ff       	call   c0019463 <Vm::outbv(unsigned short, unsigned char)>
c0019b0b:	83 c4 10             	add    esp,0x10
c0019b0e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0019b11:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0019b15:	74 03                	je     c0019b1a <Vm::faultHandler(regs*)+0x463>
c0019b17:	48                   	dec    eax
c0019b18:	eb 01                	jmp    c0019b1b <Vm::faultHandler(regs*)+0x464>
c0019b1a:	40                   	inc    eax
c0019b1b:	0f b7 c0             	movzx  eax,ax
c0019b1e:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0019b21:	e9 66 01 00 00       	jmp    c0019c8c <Vm::faultHandler(regs*)+0x5d5>
c0019b26:	49                   	dec    ecx
c0019b27:	80 f9 05             	cmp    cl,0x5
c0019b2a:	77 1f                	ja     c0019b4b <Vm::faultHandler(regs*)+0x494>
c0019b2c:	0f b6 c9             	movzx  ecx,cl
c0019b2f:	ff 24 8d 70 2e 02 c0 	jmp    DWORD PTR [ecx*4-0x3ffdd190]
c0019b36:	89 ee                	mov    esi,ebp
c0019b38:	eb 11                	jmp    c0019b4b <Vm::faultHandler(regs*)+0x494>
c0019b3a:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0019b3d:	eb 0c                	jmp    c0019b4b <Vm::faultHandler(regs*)+0x494>
c0019b3f:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0019b42:	eb 07                	jmp    c0019b4b <Vm::faultHandler(regs*)+0x494>
c0019b44:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0019b47:	eb 02                	jmp    c0019b4b <Vm::faultHandler(regs*)+0x494>
c0019b49:	8b 33                	mov    esi,DWORD PTR [ebx]
c0019b4b:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0019b4e:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0019b53:	74 0c                	je     c0019b61 <Vm::faultHandler(regs*)+0x4aa>
c0019b55:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c0019b5b:	0f 87 86 01 00 00    	ja     c0019ce7 <Vm::faultHandler(regs*)+0x630>
c0019b61:	0f b7 d6             	movzx  edx,si
c0019b64:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c0019b67:	0f b7 c1             	movzx  eax,cx
c0019b6a:	81 e7 00 04 00 00    	and    edi,0x400
c0019b70:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0019b73:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019b78:	74 1d                	je     c0019b97 <Vm::faultHandler(regs*)+0x4e0>
c0019b7a:	55                   	push   ebp
c0019b7b:	55                   	push   ebp
c0019b7c:	50                   	push   eax
c0019b7d:	52                   	push   edx
c0019b7e:	e8 e3 fa ff ff       	call   c0019666 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0019b83:	83 c4 10             	add    esp,0x10
c0019b86:	89 f2                	mov    edx,esi
c0019b88:	ef                   	out    dx,eax
c0019b89:	85 ff                	test   edi,edi
c0019b8b:	74 05                	je     c0019b92 <Vm::faultHandler(regs*)+0x4db>
c0019b8d:	83 e9 04             	sub    ecx,0x4
c0019b90:	eb 21                	jmp    c0019bb3 <Vm::faultHandler(regs*)+0x4fc>
c0019b92:	83 c1 04             	add    ecx,0x4
c0019b95:	eb 1c                	jmp    c0019bb3 <Vm::faultHandler(regs*)+0x4fc>
c0019b97:	55                   	push   ebp
c0019b98:	55                   	push   ebp
c0019b99:	50                   	push   eax
c0019b9a:	52                   	push   edx
c0019b9b:	e8 b4 fa ff ff       	call   c0019654 <Vm::readWordFromReal(unsigned short, unsigned short)>
c0019ba0:	83 c4 10             	add    esp,0x10
c0019ba3:	89 f2                	mov    edx,esi
c0019ba5:	66 ef                	out    dx,ax
c0019ba7:	85 ff                	test   edi,edi
c0019ba9:	74 05                	je     c0019bb0 <Vm::faultHandler(regs*)+0x4f9>
c0019bab:	83 e9 02             	sub    ecx,0x2
c0019bae:	eb 03                	jmp    c0019bb3 <Vm::faultHandler(regs*)+0x4fc>
c0019bb0:	83 c1 02             	add    ecx,0x2
c0019bb3:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0019bb9:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c0019bbc:	e9 cb 00 00 00       	jmp    c0019c8c <Vm::faultHandler(regs*)+0x5d5>
c0019bc1:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0019bc8:	83 ec 0c             	sub    esp,0xc
c0019bcb:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0019bcf:	50                   	push   eax
c0019bd0:	e8 88 f8 ff ff       	call   c001945d <Vm::inbv(unsigned short)>
c0019bd5:	0f b6 c0             	movzx  eax,al
c0019bd8:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0019bdb:	eb 3f                	jmp    c0019c1c <Vm::faultHandler(regs*)+0x565>
c0019bdd:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019be2:	74 07                	je     c0019beb <Vm::faultHandler(regs*)+0x534>
c0019be4:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c0019be8:	ed                   	in     eax,dx
c0019be9:	eb 14                	jmp    c0019bff <Vm::faultHandler(regs*)+0x548>
c0019beb:	8b 4b 2c             	mov    ecx,DWORD PTR [ebx+0x2c]
c0019bee:	66 31 c9             	xor    cx,cx
c0019bf1:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0019bf4:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c0019bf8:	66 ed                	in     ax,dx
c0019bfa:	0f b7 c0             	movzx  eax,ax
c0019bfd:	09 c8                	or     eax,ecx
c0019bff:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0019c02:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0019c06:	e9 84 00 00 00       	jmp    c0019c8f <Vm::faultHandler(regs*)+0x5d8>
c0019c0b:	52                   	push   edx
c0019c0c:	52                   	push   edx
c0019c0d:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0019c11:	50                   	push   eax
c0019c12:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0019c16:	50                   	push   eax
c0019c17:	e8 47 f8 ff ff       	call   c0019463 <Vm::outbv(unsigned short, unsigned char)>
c0019c1c:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0019c20:	eb 53                	jmp    c0019c75 <Vm::faultHandler(regs*)+0x5be>
c0019c22:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0019c25:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c0019c29:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019c2e:	74 03                	je     c0019c33 <Vm::faultHandler(regs*)+0x57c>
c0019c30:	ef                   	out    dx,eax
c0019c31:	eb cf                	jmp    c0019c02 <Vm::faultHandler(regs*)+0x54b>
c0019c33:	66 ef                	out    dx,ax
c0019c35:	eb cb                	jmp    c0019c02 <Vm::faultHandler(regs*)+0x54b>
c0019c37:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0019c3e:	83 ec 0c             	sub    esp,0xc
c0019c41:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0019c45:	50                   	push   eax
c0019c46:	e8 12 f8 ff ff       	call   c001945d <Vm::inbv(unsigned short)>
c0019c4b:	0f b6 c0             	movzx  eax,al
c0019c4e:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0019c51:	eb 1f                	jmp    c0019c72 <Vm::faultHandler(regs*)+0x5bb>
c0019c53:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0019c56:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019c5b:	74 03                	je     c0019c60 <Vm::faultHandler(regs*)+0x5a9>
c0019c5d:	ed                   	in     eax,dx
c0019c5e:	eb 0d                	jmp    c0019c6d <Vm::faultHandler(regs*)+0x5b6>
c0019c60:	66 ed                	in     ax,dx
c0019c62:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0019c65:	0f b7 c0             	movzx  eax,ax
c0019c68:	66 31 d2             	xor    dx,dx
c0019c6b:	09 d0                	or     eax,edx
c0019c6d:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0019c70:	eb 1a                	jmp    c0019c8c <Vm::faultHandler(regs*)+0x5d5>
c0019c72:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019c75:	83 c4 10             	add    esp,0x10
c0019c78:	eb 15                	jmp    c0019c8f <Vm::faultHandler(regs*)+0x5d8>
c0019c7a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0019c7d:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0019c80:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019c85:	74 03                	je     c0019c8a <Vm::faultHandler(regs*)+0x5d3>
c0019c87:	ef                   	out    dx,eax
c0019c88:	eb 02                	jmp    c0019c8c <Vm::faultHandler(regs*)+0x5d5>
c0019c8a:	66 ef                	out    dx,ax
c0019c8c:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019c8f:	b0 01                	mov    al,0x1
c0019c91:	eb 56                	jmp    c0019ce9 <Vm::faultHandler(regs*)+0x632>
c0019c93:	0f b6 47 05          	movzx  eax,BYTE PTR [edi+0x5]
c0019c97:	50                   	push   eax
c0019c98:	0f b6 47 04          	movzx  eax,BYTE PTR [edi+0x4]
c0019c9c:	50                   	push   eax
c0019c9d:	0f b6 47 03          	movzx  eax,BYTE PTR [edi+0x3]
c0019ca1:	50                   	push   eax
c0019ca2:	0f b6 47 02          	movzx  eax,BYTE PTR [edi+0x2]
c0019ca6:	50                   	push   eax
c0019ca7:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0019cab:	50                   	push   eax
c0019cac:	52                   	push   edx
c0019cad:	52                   	push   edx
c0019cae:	68 29 2e 02 c0       	push   0xc0022e29
c0019cb3:	e8 6f 54 ff ff       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c0019cb8:	83 c4 20             	add    esp,0x20
c0019cbb:	83 ec 0c             	sub    esp,0xc
c0019cbe:	6a 60                	push   0x60
c0019cc0:	e8 98 f7 ff ff       	call   c001945d <Vm::inbv(unsigned short)>
c0019cc5:	83 c4 10             	add    esp,0x10
c0019cc8:	3c 1c                	cmp    al,0x1c
c0019cca:	74 04                	je     c0019cd0 <Vm::faultHandler(regs*)+0x619>
c0019ccc:	3c 5a                	cmp    al,0x5a
c0019cce:	75 eb                	jne    c0019cbb <Vm::faultHandler(regs*)+0x604>
c0019cd0:	3c 5a                	cmp    al,0x5a
c0019cd2:	74 04                	je     c0019cd8 <Vm::faultHandler(regs*)+0x621>
c0019cd4:	3c 1c                	cmp    al,0x1c
c0019cd6:	75 0f                	jne    c0019ce7 <Vm::faultHandler(regs*)+0x630>
c0019cd8:	83 ec 0c             	sub    esp,0xc
c0019cdb:	6a 60                	push   0x60
c0019cdd:	e8 7b f7 ff ff       	call   c001945d <Vm::inbv(unsigned short)>
c0019ce2:	83 c4 10             	add    esp,0x10
c0019ce5:	eb e9                	jmp    c0019cd0 <Vm::faultHandler(regs*)+0x619>
c0019ce7:	31 c0                	xor    eax,eax
c0019ce9:	83 c4 1c             	add    esp,0x1c
c0019cec:	5b                   	pop    ebx
c0019ced:	5e                   	pop    esi
c0019cee:	5f                   	pop    edi
c0019cef:	5d                   	pop    ebp
c0019cf0:	c3                   	ret    
c0019cf1:	90                   	nop

c0019cf2 <FAT::getName()>:
c0019cf2:	b8 88 2e 02 c0       	mov    eax,0xc0022e88
c0019cf7:	c3                   	ret    

c0019cf8 <FAT::tell(void*, unsigned long long*)>:
c0019cf8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0019cfd:	75 06                	jne    c0019d05 <FAT::tell(void*, unsigned long long*)+0xd>
c0019cff:	b8 04 00 00 00       	mov    eax,0x4
c0019d04:	c3                   	ret    
c0019d05:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0019d0a:	75 06                	jne    c0019d12 <FAT::tell(void*, unsigned long long*)+0x1a>
c0019d0c:	b8 04 00 00 00       	mov    eax,0x4
c0019d11:	c3                   	ret    
c0019d12:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019d16:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c0019d19:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0019d1c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019d20:	89 01                	mov    DWORD PTR [ecx],eax
c0019d22:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019d25:	b8 00 00 00 00       	mov    eax,0x0
c0019d2a:	c3                   	ret    
c0019d2b:	90                   	nop

c0019d2c <FAT::stat(void*, unsigned long long*)>:
c0019d2c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0019d31:	75 06                	jne    c0019d39 <FAT::stat(void*, unsigned long long*)+0xd>
c0019d33:	b8 04 00 00 00       	mov    eax,0x4
c0019d38:	c3                   	ret    
c0019d39:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0019d3e:	75 06                	jne    c0019d46 <FAT::stat(void*, unsigned long long*)+0x1a>
c0019d40:	b8 04 00 00 00       	mov    eax,0x4
c0019d45:	c3                   	ret    
c0019d46:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019d4a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0019d4d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0019d50:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019d54:	89 01                	mov    DWORD PTR [ecx],eax
c0019d56:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019d59:	b8 00 00 00 00       	mov    eax,0x0
c0019d5e:	c3                   	ret    
c0019d5f:	90                   	nop

c0019d60 <FAT::~FAT()>:
c0019d60:	83 ec 0c             	sub    esp,0xc
c0019d63:	ba 0c 2f 02 c0       	mov    edx,0xc0022f0c
c0019d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019d6c:	89 10                	mov    DWORD PTR [eax],edx
c0019d6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019d72:	83 ec 0c             	sub    esp,0xc
c0019d75:	50                   	push   eax
c0019d76:	e8 d5 56 ff ff       	call   c000f450 <Filesystem::~Filesystem()>
c0019d7b:	83 c4 10             	add    esp,0x10
c0019d7e:	90                   	nop
c0019d7f:	83 c4 0c             	add    esp,0xc
c0019d82:	c3                   	ret    
c0019d83:	90                   	nop

c0019d84 <FAT::~FAT()>:
c0019d84:	83 ec 0c             	sub    esp,0xc
c0019d87:	83 ec 0c             	sub    esp,0xc
c0019d8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019d8e:	e8 cd ff ff ff       	call   c0019d60 <FAT::~FAT()>
c0019d93:	83 c4 10             	add    esp,0x10
c0019d96:	83 ec 08             	sub    esp,0x8
c0019d99:	6a 08                	push   0x8
c0019d9b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019d9f:	e8 a3 52 ff ff       	call   c000f047 <operator delete(void*, unsigned long)>
c0019da4:	83 c4 10             	add    esp,0x10
c0019da7:	83 c4 0c             	add    esp,0xc
c0019daa:	c3                   	ret    
c0019dab:	90                   	nop

c0019dac <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0019dac:	83 ec 1c             	sub    esp,0x1c
c0019daf:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0019db6:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0019dbb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019dbf:	8b 04 85 20 58 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda7e0]
c0019dc6:	83 f8 ff             	cmp    eax,0xffffffff
c0019dc9:	75 34                	jne    c0019dff <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c0019dcb:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0019dcf:	88 c2                	mov    dl,al
c0019dd1:	a1 00 58 02 c0       	mov    eax,ds:0xc0025800
c0019dd6:	01 d0                	add    eax,edx
c0019dd8:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0019ddc:	8b 15 00 58 02 c0    	mov    edx,DWORD PTR ds:0xc0025800
c0019de2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019de6:	89 14 85 20 58 02 c0 	mov    DWORD PTR [eax*4-0x3ffda7e0],edx
c0019ded:	a1 00 58 02 c0       	mov    eax,ds:0xc0025800
c0019df2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0019df6:	89 14 85 a0 58 02 c0 	mov    DWORD PTR [eax*4-0x3ffda760],edx
c0019dfd:	eb 17                	jmp    c0019e16 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c0019dff:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0019e03:	88 c2                	mov    dl,al
c0019e05:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019e09:	8b 04 85 20 58 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda7e0]
c0019e10:	01 d0                	add    eax,edx
c0019e12:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0019e16:	83 ec 04             	sub    esp,0x4
c0019e19:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0019e1d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0019e21:	8d 44 24 15          	lea    eax,[esp+0x15]
c0019e25:	50                   	push   eax
c0019e26:	e8 05 cd fe ff       	call   c0006b30 <f_getlabel>
c0019e2b:	83 c4 10             	add    esp,0x10
c0019e2e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019e32:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0019e37:	75 07                	jne    c0019e40 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c0019e39:	b8 00 00 00 00       	mov    eax,0x0
c0019e3e:	eb 05                	jmp    c0019e45 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c0019e40:	b8 01 00 00 00       	mov    eax,0x1
c0019e45:	83 c4 1c             	add    esp,0x1c
c0019e48:	c3                   	ret    
c0019e49:	90                   	nop

c0019e4a <FAT::setlabel(LogicalDisk*, int, char*)>:
c0019e4a:	57                   	push   edi
c0019e4b:	83 ec 58             	sub    esp,0x58
c0019e4e:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0019e56:	8d 54 24 10          	lea    edx,[esp+0x10]
c0019e5a:	b9 0f 00 00 00       	mov    ecx,0xf
c0019e5f:	b8 00 00 00 00       	mov    eax,0x0
c0019e64:	fc                   	cld    
c0019e65:	89 d7                	mov    edi,edx
c0019e67:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0019e69:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0019e6d:	8b 04 85 20 58 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda7e0]
c0019e74:	83 f8 ff             	cmp    eax,0xffffffff
c0019e77:	75 34                	jne    c0019ead <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c0019e79:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019e7d:	88 c2                	mov    dl,al
c0019e7f:	a1 00 58 02 c0       	mov    eax,ds:0xc0025800
c0019e84:	01 d0                	add    eax,edx
c0019e86:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019e8a:	8b 15 00 58 02 c0    	mov    edx,DWORD PTR ds:0xc0025800
c0019e90:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0019e94:	89 14 85 20 58 02 c0 	mov    DWORD PTR [eax*4-0x3ffda7e0],edx
c0019e9b:	a1 00 58 02 c0       	mov    eax,ds:0xc0025800
c0019ea0:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0019ea4:	89 14 85 a0 58 02 c0 	mov    DWORD PTR [eax*4-0x3ffda760],edx
c0019eab:	eb 17                	jmp    c0019ec4 <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c0019ead:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019eb1:	88 c2                	mov    dl,al
c0019eb3:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0019eb7:	8b 04 85 20 58 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda7e0]
c0019ebe:	01 d0                	add    eax,edx
c0019ec0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019ec4:	83 ec 08             	sub    esp,0x8
c0019ec7:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0019ecb:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019ecf:	50                   	push   eax
c0019ed0:	e8 54 69 fe ff       	call   c0000829 <strcat>
c0019ed5:	83 c4 10             	add    esp,0x10
c0019ed8:	83 ec 0c             	sub    esp,0xc
c0019edb:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019edf:	50                   	push   eax
c0019ee0:	e8 39 ce fe ff       	call   c0006d1e <f_setlabel>
c0019ee5:	83 c4 10             	add    esp,0x10
c0019ee8:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0019eec:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0019ef1:	75 07                	jne    c0019efa <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c0019ef3:	b8 00 00 00 00       	mov    eax,0x0
c0019ef8:	eb 05                	jmp    c0019eff <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c0019efa:	b8 01 00 00 00       	mov    eax,0x1
c0019eff:	83 c4 58             	add    esp,0x58
c0019f02:	5f                   	pop    edi
c0019f03:	c3                   	ret    

c0019f04 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0019f04:	83 ec 2c             	sub    esp,0x2c
c0019f07:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0019f0f:	83 ec 08             	sub    esp,0x8
c0019f12:	68 ac 2e 02 c0       	push   0xc0022eac
c0019f17:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019f1b:	e8 a3 68 fe ff       	call   c00007c3 <strcmp>
c0019f20:	83 c4 10             	add    esp,0x10
c0019f23:	85 c0                	test   eax,eax
c0019f25:	0f 94 c0             	sete   al
c0019f28:	84 c0                	test   al,al
c0019f2a:	74 0d                	je     c0019f39 <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c0019f2c:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0019f34:	e9 a6 00 00 00       	jmp    c0019fdf <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0019f39:	83 ec 08             	sub    esp,0x8
c0019f3c:	68 9e 2e 02 c0       	push   0xc0022e9e
c0019f41:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019f45:	e8 79 68 fe ff       	call   c00007c3 <strcmp>
c0019f4a:	83 c4 10             	add    esp,0x10
c0019f4d:	85 c0                	test   eax,eax
c0019f4f:	0f 94 c0             	sete   al
c0019f52:	84 c0                	test   al,al
c0019f54:	74 0a                	je     c0019f60 <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c0019f56:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0019f5e:	eb 7f                	jmp    c0019fdf <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0019f60:	83 ec 08             	sub    esp,0x8
c0019f63:	68 a4 2e 02 c0       	push   0xc0022ea4
c0019f68:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019f6c:	e8 52 68 fe ff       	call   c00007c3 <strcmp>
c0019f71:	83 c4 10             	add    esp,0x10
c0019f74:	85 c0                	test   eax,eax
c0019f76:	0f 94 c0             	sete   al
c0019f79:	84 c0                	test   al,al
c0019f7b:	74 0a                	je     c0019f87 <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c0019f7d:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0019f85:	eb 58                	jmp    c0019fdf <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0019f87:	83 ec 08             	sub    esp,0x8
c0019f8a:	68 2c 02 02 c0       	push   0xc002022c
c0019f8f:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019f93:	e8 2b 68 fe ff       	call   c00007c3 <strcmp>
c0019f98:	83 c4 10             	add    esp,0x10
c0019f9b:	85 c0                	test   eax,eax
c0019f9d:	0f 94 c0             	sete   al
c0019fa0:	84 c0                	test   al,al
c0019fa2:	74 0a                	je     c0019fae <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c0019fa4:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0019fac:	eb 31                	jmp    c0019fdf <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0019fae:	83 ec 08             	sub    esp,0x8
c0019fb1:	68 aa 2e 02 c0       	push   0xc0022eaa
c0019fb6:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019fba:	e8 04 68 fe ff       	call   c00007c3 <strcmp>
c0019fbf:	83 c4 10             	add    esp,0x10
c0019fc2:	85 c0                	test   eax,eax
c0019fc4:	0f 94 c0             	sete   al
c0019fc7:	84 c0                	test   al,al
c0019fc9:	74 0a                	je     c0019fd5 <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c0019fcb:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0019fd3:	eb 0a                	jmp    c0019fdf <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0019fd5:	b8 08 00 00 00       	mov    eax,0x8
c0019fda:	e9 04 01 00 00       	jmp    c001a0e3 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0019fdf:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0019fe6:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0019feb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019fef:	8b 04 85 20 58 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda7e0]
c0019ff6:	83 f8 ff             	cmp    eax,0xffffffff
c0019ff9:	75 34                	jne    c001a02f <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c0019ffb:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0019fff:	88 c2                	mov    dl,al
c001a001:	a1 00 58 02 c0       	mov    eax,ds:0xc0025800
c001a006:	01 d0                	add    eax,edx
c001a008:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001a00c:	8b 15 00 58 02 c0    	mov    edx,DWORD PTR ds:0xc0025800
c001a012:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a016:	89 14 85 20 58 02 c0 	mov    DWORD PTR [eax*4-0x3ffda7e0],edx
c001a01d:	a1 00 58 02 c0       	mov    eax,ds:0xc0025800
c001a022:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001a026:	89 14 85 a0 58 02 c0 	mov    DWORD PTR [eax*4-0x3ffda760],edx
c001a02d:	eb 17                	jmp    c001a046 <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c001a02f:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001a033:	88 c2                	mov    dl,al
c001a035:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a039:	8b 04 85 20 58 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda7e0]
c001a040:	01 d0                	add    eax,edx
c001a042:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001a046:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a04a:	88 04 24             	mov    BYTE PTR [esp],al
c001a04d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001a051:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a055:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001a05d:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001a062:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a06a:	83 ec 0c             	sub    esp,0xc
c001a06d:	68 00 20 00 00       	push   0x2000
c001a072:	e8 bf 1f ff ff       	call   c000c036 <malloc>
c001a077:	83 c4 10             	add    esp,0x10
c001a07a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a07e:	68 00 20 00 00       	push   0x2000
c001a083:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a087:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a08b:	50                   	push   eax
c001a08c:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001a090:	50                   	push   eax
c001a091:	e8 d3 d0 fe ff       	call   c0007169 <f_mkfs>
c001a096:	83 c4 10             	add    esp,0x10
c001a099:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a09d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a0a2:	75 07                	jne    c001a0ab <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c001a0a4:	b8 00 00 00 00       	mov    eax,0x0
c001a0a9:	eb 38                	jmp    c001a0e3 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001a0ab:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001a0b0:	75 17                	jne    c001a0c9 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c001a0b2:	83 ec 0c             	sub    esp,0xc
c001a0b5:	68 dc 2e 02 c0       	push   0xc0022edc
c001a0ba:	e8 68 50 ff ff       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c001a0bf:	83 c4 10             	add    esp,0x10
c001a0c2:	b8 09 00 00 00       	mov    eax,0x9
c001a0c7:	eb 1a                	jmp    c001a0e3 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001a0c9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a0cd:	83 ec 08             	sub    esp,0x8
c001a0d0:	50                   	push   eax
c001a0d1:	68 b0 2e 02 c0       	push   0xc0022eb0
c001a0d6:	e8 4c 50 ff ff       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c001a0db:	83 c4 10             	add    esp,0x10
c001a0de:	b8 01 00 00 00       	mov    eax,0x1
c001a0e3:	83 c4 2c             	add    esp,0x2c
c001a0e6:	c3                   	ret    
c001a0e7:	90                   	nop

c001a0e8 <FAT::tryMount(LogicalDisk*, int)>:
c001a0e8:	81 ec 6c 03 00 00    	sub    esp,0x36c
c001a0ee:	a1 00 58 02 c0       	mov    eax,ds:0xc0025800
c001a0f3:	83 f8 14             	cmp    eax,0x14
c001a0f6:	75 17                	jne    c001a10f <FAT::tryMount(LogicalDisk*, int)+0x27>
c001a0f8:	83 ec 0c             	sub    esp,0xc
c001a0fb:	68 c2 2e 02 c0       	push   0xc0022ec2
c001a100:	e8 eb b7 ff ff       	call   c00158f0 <Krnl::panic(char const*)>
c001a105:	83 c4 10             	add    esp,0x10
c001a108:	b0 00                	mov    al,0x0
c001a10a:	e9 d7 01 00 00       	jmp    c001a2e6 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001a10f:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001a116:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001a11c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001a122:	3d 00 02 00 00       	cmp    eax,0x200
c001a127:	74 07                	je     c001a130 <FAT::tryMount(LogicalDisk*, int)+0x48>
c001a129:	b0 00                	mov    al,0x0
c001a12b:	e9 b6 01 00 00       	jmp    c001a2e6 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001a130:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c001a138:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001a13f:	8b 04 85 20 58 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda7e0]
c001a146:	83 f8 ff             	cmp    eax,0xffffffff
c001a149:	74 07                	je     c001a152 <FAT::tryMount(LogicalDisk*, int)+0x6a>
c001a14b:	b0 01                	mov    al,0x1
c001a14d:	e9 94 01 00 00       	jmp    c001a2e6 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001a152:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c001a15c:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c001a164:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c001a16b:	88 c2                	mov    dl,al
c001a16d:	a1 00 58 02 c0       	mov    eax,ds:0xc0025800
c001a172:	01 d0                	add    eax,edx
c001a174:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c001a17b:	8b 15 00 58 02 c0    	mov    edx,DWORD PTR ds:0xc0025800
c001a181:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001a188:	89 14 85 20 58 02 c0 	mov    DWORD PTR [eax*4-0x3ffda7e0],edx
c001a18f:	a1 00 58 02 c0       	mov    eax,ds:0xc0025800
c001a194:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c001a19b:	89 14 85 a0 58 02 c0 	mov    DWORD PTR [eax*4-0x3ffda760],edx
c001a1a2:	83 ec 0c             	sub    esp,0xc
c001a1a5:	68 54 02 00 00       	push   0x254
c001a1aa:	e8 87 1e ff ff       	call   c000c036 <malloc>
c001a1af:	83 c4 10             	add    esp,0x10
c001a1b2:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c001a1b9:	83 ec 04             	sub    esp,0x4
c001a1bc:	6a 00                	push   0x0
c001a1be:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001a1c5:	50                   	push   eax
c001a1c6:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001a1cd:	e8 55 ab fe ff       	call   c0004d27 <f_mount>
c001a1d2:	83 c4 10             	add    esp,0x10
c001a1d5:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001a1dc:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c001a1e4:	74 19                	je     c001a1ff <FAT::tryMount(LogicalDisk*, int)+0x117>
c001a1e6:	83 ec 0c             	sub    esp,0xc
c001a1e9:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001a1f0:	e8 61 1e ff ff       	call   c000c056 <rfree>
c001a1f5:	83 c4 10             	add    esp,0x10
c001a1f8:	b0 00                	mov    al,0x0
c001a1fa:	e9 e7 00 00 00       	jmp    c001a2e6 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001a1ff:	83 ec 04             	sub    esp,0x4
c001a202:	68 00 01 00 00       	push   0x100
c001a207:	6a 00                	push   0x0
c001a209:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001a210:	50                   	push   eax
c001a211:	e8 bd 64 fe ff       	call   c00006d3 <memset>
c001a216:	83 c4 10             	add    esp,0x10
c001a219:	83 ec 08             	sub    esp,0x8
c001a21c:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001a223:	50                   	push   eax
c001a224:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001a22b:	50                   	push   eax
c001a22c:	e8 f8 65 fe ff       	call   c0000829 <strcat>
c001a231:	83 c4 10             	add    esp,0x10
c001a234:	83 ec 08             	sub    esp,0x8
c001a237:	68 d0 2e 02 c0       	push   0xc0022ed0
c001a23c:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001a243:	50                   	push   eax
c001a244:	e8 e0 65 fe ff       	call   c0000829 <strcat>
c001a249:	83 c4 10             	add    esp,0x10
c001a24c:	83 ec 04             	sub    esp,0x4
c001a24f:	6a 01                	push   0x1
c001a251:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c001a258:	50                   	push   eax
c001a259:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001a25d:	50                   	push   eax
c001a25e:	e8 26 ab fe ff       	call   c0004d89 <f_open>
c001a263:	83 c4 10             	add    esp,0x10
c001a266:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001a26d:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001a274:	85 c0                	test   eax,eax
c001a276:	74 0a                	je     c001a282 <FAT::tryMount(LogicalDisk*, int)+0x19a>
c001a278:	78 2d                	js     c001a2a7 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c001a27a:	83 e8 04             	sub    eax,0x4
c001a27d:	83 f8 01             	cmp    eax,0x1
c001a280:	77 25                	ja     c001a2a7 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c001a282:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c001a28a:	83 ec 0c             	sub    esp,0xc
c001a28d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001a291:	50                   	push   eax
c001a292:	e8 44 b6 fe ff       	call   c00058db <f_close>
c001a297:	83 c4 10             	add    esp,0x10
c001a29a:	90                   	nop
c001a29b:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c001a2a3:	74 3a                	je     c001a2df <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c001a2a5:	eb 2d                	jmp    c001a2d4 <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c001a2a7:	83 ec 0c             	sub    esp,0xc
c001a2aa:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001a2b1:	e8 a0 1d ff ff       	call   c000c056 <rfree>
c001a2b6:	83 c4 10             	add    esp,0x10
c001a2b9:	83 ec 04             	sub    esp,0x4
c001a2bc:	6a 00                	push   0x0
c001a2be:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001a2c5:	50                   	push   eax
c001a2c6:	6a 00                	push   0x0
c001a2c8:	e8 5a aa fe ff       	call   c0004d27 <f_mount>
c001a2cd:	83 c4 10             	add    esp,0x10
c001a2d0:	b0 00                	mov    al,0x0
c001a2d2:	eb 12                	jmp    c001a2e6 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001a2d4:	a1 00 58 02 c0       	mov    eax,ds:0xc0025800
c001a2d9:	40                   	inc    eax
c001a2da:	a3 00 58 02 c0       	mov    ds:0xc0025800,eax
c001a2df:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c001a2e6:	81 c4 6c 03 00 00    	add    esp,0x36c
c001a2ec:	c3                   	ret    
c001a2ed:	90                   	nop

c001a2ee <FAT::readDir(void*, unsigned long, void*, int*)>:
c001a2ee:	81 ec 3c 02 00 00    	sub    esp,0x23c
c001a2f4:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c001a2fc:	74 0a                	je     c001a308 <FAT::readDir(void*, unsigned long, void*, int*)+0x1a>
c001a2fe:	83 bc 24 50 02 00 00 00 	cmp    DWORD PTR [esp+0x250],0x0
c001a306:	75 0a                	jne    c001a312 <FAT::readDir(void*, unsigned long, void*, int*)+0x24>
c001a308:	b8 04 00 00 00       	mov    eax,0x4
c001a30d:	e9 db 00 00 00       	jmp    c001a3ed <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c001a312:	83 ec 08             	sub    esp,0x8
c001a315:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001a31c:	50                   	push   eax
c001a31d:	ff b4 24 50 02 00 00 	push   DWORD PTR [esp+0x250]
c001a324:	e8 bc bb fe ff       	call   c0005ee5 <f_readdir>
c001a329:	83 c4 10             	add    esp,0x10
c001a32c:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c001a333:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001a339:	83 ec 0c             	sub    esp,0xc
c001a33c:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001a343:	83 c0 1a             	add    eax,0x1a
c001a346:	50                   	push   eax
c001a347:	e8 a4 63 fe ff       	call   c00006f0 <strlen>
c001a34c:	83 c4 10             	add    esp,0x10
c001a34f:	ba 00 00 00 00       	mov    edx,0x0
c001a354:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a358:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001a35c:	8a 84 24 1c 01 00 00 	mov    al,BYTE PTR [esp+0x11c]
c001a363:	0f b6 c0             	movzx  eax,al
c001a366:	83 e0 10             	and    eax,0x10
c001a369:	74 07                	je     c001a372 <FAT::readDir(void*, unsigned long, void*, int*)+0x84>
c001a36b:	b8 02 00 00 00       	mov    eax,0x2
c001a370:	eb 05                	jmp    c001a377 <FAT::readDir(void*, unsigned long, void*, int*)+0x89>
c001a372:	b8 01 00 00 00       	mov    eax,0x1
c001a377:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a37b:	83 ec 08             	sub    esp,0x8
c001a37e:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001a385:	83 c0 1a             	add    eax,0x1a
c001a388:	50                   	push   eax
c001a389:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001a38d:	83 c0 10             	add    eax,0x10
c001a390:	50                   	push   eax
c001a391:	e8 dc 63 fe ff       	call   c0000772 <strcpy>
c001a396:	83 c4 10             	add    esp,0x10
c001a399:	83 ec 04             	sub    esp,0x4
c001a39c:	ff b4 24 4c 02 00 00 	push   DWORD PTR [esp+0x24c]
c001a3a3:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a3a7:	50                   	push   eax
c001a3a8:	ff b4 24 58 02 00 00 	push   DWORD PTR [esp+0x258]
c001a3af:	e8 e9 62 fe ff       	call   c000069d <memcpy>
c001a3b4:	83 c4 10             	add    esp,0x10
c001a3b7:	8b 84 24 50 02 00 00 	mov    eax,DWORD PTR [esp+0x250]
c001a3be:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001a3c4:	8a 84 24 2a 01 00 00 	mov    al,BYTE PTR [esp+0x12a]
c001a3cb:	84 c0                	test   al,al
c001a3cd:	75 07                	jne    c001a3d6 <FAT::readDir(void*, unsigned long, void*, int*)+0xe8>
c001a3cf:	b8 07 00 00 00       	mov    eax,0x7
c001a3d4:	eb 17                	jmp    c001a3ed <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c001a3d6:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c001a3dd:	85 c0                	test   eax,eax
c001a3df:	75 07                	jne    c001a3e8 <FAT::readDir(void*, unsigned long, void*, int*)+0xfa>
c001a3e1:	b8 00 00 00 00       	mov    eax,0x0
c001a3e6:	eb 05                	jmp    c001a3ed <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c001a3e8:	b8 01 00 00 00       	mov    eax,0x1
c001a3ed:	81 c4 3c 02 00 00    	add    esp,0x23c
c001a3f3:	c3                   	ret    

c001a3f4 <FAT::read(void*, unsigned long, void*, int*)>:
c001a3f4:	83 ec 1c             	sub    esp,0x1c
c001a3f7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001a3fc:	74 07                	je     c001a405 <FAT::read(void*, unsigned long, void*, int*)+0x11>
c001a3fe:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001a403:	75 07                	jne    c001a40c <FAT::read(void*, unsigned long, void*, int*)+0x18>
c001a405:	b8 04 00 00 00       	mov    eax,0x4
c001a40a:	eb 3d                	jmp    c001a449 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c001a40c:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a410:	50                   	push   eax
c001a411:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a415:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001a419:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a41d:	e8 a3 ad fe ff       	call   c00051c5 <f_read>
c001a422:	83 c4 10             	add    esp,0x10
c001a425:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a429:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a42d:	89 c2                	mov    edx,eax
c001a42f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a433:	89 10                	mov    DWORD PTR [eax],edx
c001a435:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a439:	85 c0                	test   eax,eax
c001a43b:	75 07                	jne    c001a444 <FAT::read(void*, unsigned long, void*, int*)+0x50>
c001a43d:	b8 00 00 00 00       	mov    eax,0x0
c001a442:	eb 05                	jmp    c001a449 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c001a444:	b8 01 00 00 00       	mov    eax,0x1
c001a449:	83 c4 1c             	add    esp,0x1c
c001a44c:	c3                   	ret    
c001a44d:	90                   	nop

c001a44e <FAT::write(void*, unsigned long, void*, int*)>:
c001a44e:	83 ec 1c             	sub    esp,0x1c
c001a451:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001a456:	74 07                	je     c001a45f <FAT::write(void*, unsigned long, void*, int*)+0x11>
c001a458:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001a45d:	75 07                	jne    c001a466 <FAT::write(void*, unsigned long, void*, int*)+0x18>
c001a45f:	b8 04 00 00 00       	mov    eax,0x4
c001a464:	eb 3d                	jmp    c001a4a3 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c001a466:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a46a:	50                   	push   eax
c001a46b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a46f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001a473:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a477:	e8 c9 af fe ff       	call   c0005445 <f_write>
c001a47c:	83 c4 10             	add    esp,0x10
c001a47f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a483:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a487:	89 c2                	mov    edx,eax
c001a489:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a48d:	89 10                	mov    DWORD PTR [eax],edx
c001a48f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a493:	85 c0                	test   eax,eax
c001a495:	75 07                	jne    c001a49e <FAT::write(void*, unsigned long, void*, int*)+0x50>
c001a497:	b8 00 00 00 00       	mov    eax,0x0
c001a49c:	eb 05                	jmp    c001a4a3 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c001a49e:	b8 01 00 00 00       	mov    eax,0x1
c001a4a3:	83 c4 1c             	add    esp,0x1c
c001a4a6:	c3                   	ret    
c001a4a7:	90                   	nop

c001a4a8 <FAT::close(void*)>:
c001a4a8:	83 ec 1c             	sub    esp,0x1c
c001a4ab:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001a4b0:	75 07                	jne    c001a4b9 <FAT::close(void*)+0x11>
c001a4b2:	b8 04 00 00 00       	mov    eax,0x4
c001a4b7:	eb 36                	jmp    c001a4ef <FAT::close(void*)+0x47>
c001a4b9:	83 ec 0c             	sub    esp,0xc
c001a4bc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a4c0:	e8 16 b4 fe ff       	call   c00058db <f_close>
c001a4c5:	83 c4 10             	add    esp,0x10
c001a4c8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a4cc:	83 ec 0c             	sub    esp,0xc
c001a4cf:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a4d3:	e8 6e 1b ff ff       	call   c000c046 <free>
c001a4d8:	83 c4 10             	add    esp,0x10
c001a4db:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a4df:	85 c0                	test   eax,eax
c001a4e1:	75 07                	jne    c001a4ea <FAT::close(void*)+0x42>
c001a4e3:	b8 00 00 00 00       	mov    eax,0x0
c001a4e8:	eb 05                	jmp    c001a4ef <FAT::close(void*)+0x47>
c001a4ea:	b8 01 00 00 00       	mov    eax,0x1
c001a4ef:	83 c4 1c             	add    esp,0x1c
c001a4f2:	c3                   	ret    
c001a4f3:	90                   	nop

c001a4f4 <FAT::closeDir(void*)>:
c001a4f4:	83 ec 1c             	sub    esp,0x1c
c001a4f7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001a4fc:	75 07                	jne    c001a505 <FAT::closeDir(void*)+0x11>
c001a4fe:	b8 04 00 00 00       	mov    eax,0x4
c001a503:	eb 36                	jmp    c001a53b <FAT::closeDir(void*)+0x47>
c001a505:	83 ec 0c             	sub    esp,0xc
c001a508:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a50c:	e8 b2 b9 fe ff       	call   c0005ec3 <f_closedir>
c001a511:	83 c4 10             	add    esp,0x10
c001a514:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a518:	83 ec 0c             	sub    esp,0xc
c001a51b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a51f:	e8 22 1b ff ff       	call   c000c046 <free>
c001a524:	83 c4 10             	add    esp,0x10
c001a527:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a52b:	85 c0                	test   eax,eax
c001a52d:	75 07                	jne    c001a536 <FAT::closeDir(void*)+0x42>
c001a52f:	b8 00 00 00 00       	mov    eax,0x0
c001a534:	eb 05                	jmp    c001a53b <FAT::closeDir(void*)+0x47>
c001a536:	b8 01 00 00 00       	mov    eax,0x1
c001a53b:	83 c4 1c             	add    esp,0x1c
c001a53e:	c3                   	ret    
c001a53f:	90                   	nop

c001a540 <FAT::seek(void*, unsigned long long)>:
c001a540:	83 ec 2c             	sub    esp,0x2c
c001a543:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a547:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a54b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001a54f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a553:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001a558:	75 07                	jne    c001a561 <FAT::seek(void*, unsigned long long)+0x21>
c001a55a:	b8 04 00 00 00       	mov    eax,0x4
c001a55f:	eb 2f                	jmp    c001a590 <FAT::seek(void*, unsigned long long)+0x50>
c001a561:	83 ec 04             	sub    esp,0x4
c001a564:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001a568:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001a56c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001a570:	e8 95 b3 fe ff       	call   c000590a <f_lseek>
c001a575:	83 c4 10             	add    esp,0x10
c001a578:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a57c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a580:	85 c0                	test   eax,eax
c001a582:	75 07                	jne    c001a58b <FAT::seek(void*, unsigned long long)+0x4b>
c001a584:	b8 00 00 00 00       	mov    eax,0x0
c001a589:	eb 05                	jmp    c001a590 <FAT::seek(void*, unsigned long long)+0x50>
c001a58b:	b8 01 00 00 00       	mov    eax,0x1
c001a590:	83 c4 2c             	add    esp,0x2c
c001a593:	c3                   	ret    

c001a594 <fatWrapperReadDisk>:
c001a594:	83 ec 1c             	sub    esp,0x1c
c001a597:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a59b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a59f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a5a3:	89 04 24             	mov    DWORD PTR [esp],eax
c001a5a6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001a5aa:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a5ae:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a5b3:	8b 04 85 80 49 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb680]
c001a5ba:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001a5be:	83 ec 0c             	sub    esp,0xc
c001a5c1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a5c5:	52                   	push   edx
c001a5c6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a5ca:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a5ce:	50                   	push   eax
c001a5cf:	e8 90 81 ff ff       	call   c0012764 <LogicalDisk::read(unsigned long long, int, void*)>
c001a5d4:	83 c4 20             	add    esp,0x20
c001a5d7:	83 c4 1c             	add    esp,0x1c
c001a5da:	c3                   	ret    

c001a5db <fatWrapperWriteDisk>:
c001a5db:	83 ec 1c             	sub    esp,0x1c
c001a5de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a5e2:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a5e6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a5ea:	89 04 24             	mov    DWORD PTR [esp],eax
c001a5ed:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001a5f1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a5f5:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a5fa:	8b 04 85 80 49 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb680]
c001a601:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001a605:	83 ec 0c             	sub    esp,0xc
c001a608:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a60c:	52                   	push   edx
c001a60d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a611:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a615:	50                   	push   eax
c001a616:	e8 b5 81 ff ff       	call   c00127d0 <LogicalDisk::write(unsigned long long, int, void*)>
c001a61b:	83 c4 20             	add    esp,0x20
c001a61e:	83 c4 1c             	add    esp,0x1c
c001a621:	c3                   	ret    

c001a622 <fatWrapperIoctl>:
c001a622:	53                   	push   ebx
c001a623:	83 ec 28             	sub    esp,0x28
c001a626:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001a62a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a62e:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001a632:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001a636:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c001a63b:	75 31                	jne    c001a66e <fatWrapperIoctl+0x4c>
c001a63d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a641:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a645:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a64a:	8b 04 85 80 49 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb680]
c001a651:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001a657:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001a65d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a661:	66 89 02             	mov    WORD PTR [edx],ax
c001a664:	b8 00 00 00 00       	mov    eax,0x0
c001a669:	e9 b2 00 00 00       	jmp    c001a720 <fatWrapperIoctl+0xfe>
c001a66e:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001a673:	75 6a                	jne    c001a6df <fatWrapperIoctl+0xbd>
c001a675:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a679:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a67d:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a682:	8b 04 85 80 49 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb680]
c001a689:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001a68f:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001a695:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001a69b:	89 c8                	mov    eax,ecx
c001a69d:	89 da                	mov    edx,ebx
c001a69f:	0f a4 c2 0a          	shld   edx,eax,0xa
c001a6a3:	c1 e0 0a             	shl    eax,0xa
c001a6a6:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001a6ab:	8b 0c 8d 80 49 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb680]
c001a6b2:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001a6b8:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001a6be:	89 cb                	mov    ebx,ecx
c001a6c0:	c1 fb 1f             	sar    ebx,0x1f
c001a6c3:	53                   	push   ebx
c001a6c4:	51                   	push   ecx
c001a6c5:	52                   	push   edx
c001a6c6:	50                   	push   eax
c001a6c7:	e8 00 4b 00 00       	call   c001f1cc <__udivdi3>
c001a6cc:	83 c4 10             	add    esp,0x10
c001a6cf:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001a6d3:	89 01                	mov    DWORD PTR [ecx],eax
c001a6d5:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001a6d8:	b8 00 00 00 00       	mov    eax,0x0
c001a6dd:	eb 41                	jmp    c001a720 <fatWrapperIoctl+0xfe>
c001a6df:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001a6e4:	75 07                	jne    c001a6ed <fatWrapperIoctl+0xcb>
c001a6e6:	b8 00 00 00 00       	mov    eax,0x0
c001a6eb:	eb 33                	jmp    c001a720 <fatWrapperIoctl+0xfe>
c001a6ed:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c001a6f2:	75 19                	jne    c001a70d <fatWrapperIoctl+0xeb>
c001a6f4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a6f8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a6fc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a700:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001a706:	b8 00 00 00 00       	mov    eax,0x0
c001a70b:	eb 13                	jmp    c001a720 <fatWrapperIoctl+0xfe>
c001a70d:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c001a712:	75 07                	jne    c001a71b <fatWrapperIoctl+0xf9>
c001a714:	b8 00 00 00 00       	mov    eax,0x0
c001a719:	eb 05                	jmp    c001a720 <fatWrapperIoctl+0xfe>
c001a71b:	b8 04 00 00 00       	mov    eax,0x4
c001a720:	83 c4 28             	add    esp,0x28
c001a723:	5b                   	pop    ebx
c001a724:	c3                   	ret    
c001a725:	90                   	nop

c001a726 <FAT::FAT()>:
c001a726:	83 ec 1c             	sub    esp,0x1c
c001a729:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a72d:	83 ec 0c             	sub    esp,0xc
c001a730:	50                   	push   eax
c001a731:	e8 f6 4c ff ff       	call   c000f42c <Filesystem::Filesystem()>
c001a736:	83 c4 10             	add    esp,0x10
c001a739:	ba 0c 2f 02 c0       	mov    edx,0xc0022f0c
c001a73e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a742:	89 10                	mov    DWORD PTR [eax],edx
c001a744:	c7 05 00 58 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025800,0x0
c001a74e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a756:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001a75b:	7f 15                	jg     c001a772 <FAT::FAT()+0x4c>
c001a75d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a761:	c7 04 85 20 58 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffda7e0],0xffffffff
c001a76c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001a770:	eb e4                	jmp    c001a756 <FAT::FAT()+0x30>
c001a772:	90                   	nop
c001a773:	83 c4 1c             	add    esp,0x1c
c001a776:	c3                   	ret    
c001a777:	90                   	nop

c001a778 <FAT::fixFilepath(char*)>:
c001a778:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a77c:	8a 00                	mov    al,BYTE PTR [eax]
c001a77e:	3c 40                	cmp    al,0x40
c001a780:	7e 2c                	jle    c001a7ae <FAT::fixFilepath(char*)+0x36>
c001a782:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a786:	8a 00                	mov    al,BYTE PTR [eax]
c001a788:	83 e8 41             	sub    eax,0x41
c001a78b:	88 c2                	mov    dl,al
c001a78d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a791:	88 10                	mov    BYTE PTR [eax],dl
c001a793:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a797:	8a 00                	mov    al,BYTE PTR [eax]
c001a799:	0f be c0             	movsx  eax,al
c001a79c:	8b 04 85 20 58 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda7e0]
c001a7a3:	83 c0 30             	add    eax,0x30
c001a7a6:	88 c2                	mov    dl,al
c001a7a8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a7ac:	88 10                	mov    BYTE PTR [eax],dl
c001a7ae:	90                   	nop
c001a7af:	c3                   	ret    

c001a7b0 <FAT::open(char const*, void**, FileOpenMode)>:
c001a7b0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a7b6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001a7be:	74 0a                	je     c001a7ca <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c001a7c0:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001a7c8:	75 0a                	jne    c001a7d4 <FAT::open(char const*, void**, FileOpenMode)+0x24>
c001a7ca:	b8 04 00 00 00       	mov    eax,0x4
c001a7cf:	e9 fd 00 00 00       	jmp    c001a8d1 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c001a7d4:	83 ec 08             	sub    esp,0x8
c001a7d7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a7de:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a7e2:	50                   	push   eax
c001a7e3:	e8 8a 5f fe ff       	call   c0000772 <strcpy>
c001a7e8:	83 c4 10             	add    esp,0x10
c001a7eb:	83 ec 08             	sub    esp,0x8
c001a7ee:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a7f2:	50                   	push   eax
c001a7f3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a7fa:	e8 79 ff ff ff       	call   c001a778 <FAT::fixFilepath(char*)>
c001a7ff:	83 c4 10             	add    esp,0x10
c001a802:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001a80a:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001a811:	83 e0 01             	and    eax,0x1
c001a814:	74 08                	je     c001a81e <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c001a816:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c001a81e:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001a825:	83 e0 04             	and    eax,0x4
c001a828:	74 10                	je     c001a83a <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c001a82a:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c001a832:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001a83a:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001a841:	83 e0 02             	and    eax,0x2
c001a844:	74 08                	je     c001a84e <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c001a846:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001a84e:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001a855:	83 e0 08             	and    eax,0x8
c001a858:	74 08                	je     c001a862 <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c001a85a:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c001a862:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001a869:	83 e0 10             	and    eax,0x10
c001a86c:	74 08                	je     c001a876 <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c001a86e:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c001a876:	83 ec 0c             	sub    esp,0xc
c001a879:	68 50 02 00 00       	push   0x250
c001a87e:	e8 b3 17 ff ff       	call   c000c036 <malloc>
c001a883:	83 c4 10             	add    esp,0x10
c001a886:	89 c2                	mov    edx,eax
c001a888:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001a88f:	89 10                	mov    DWORD PTR [eax],edx
c001a891:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c001a899:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001a8a0:	8b 00                	mov    eax,DWORD PTR [eax]
c001a8a2:	83 ec 04             	sub    esp,0x4
c001a8a5:	52                   	push   edx
c001a8a6:	8d 54 24 10          	lea    edx,[esp+0x10]
c001a8aa:	52                   	push   edx
c001a8ab:	50                   	push   eax
c001a8ac:	e8 d8 a4 fe ff       	call   c0004d89 <f_open>
c001a8b1:	83 c4 10             	add    esp,0x10
c001a8b4:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001a8bb:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001a8c3:	74 07                	je     c001a8cc <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c001a8c5:	b8 01 00 00 00       	mov    eax,0x1
c001a8ca:	eb 05                	jmp    c001a8d1 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c001a8cc:	b8 00 00 00 00       	mov    eax,0x0
c001a8d1:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a8d7:	c3                   	ret    

c001a8d8 <FAT::openDir(char const*, void**)>:
c001a8d8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a8de:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001a8e6:	74 0a                	je     c001a8f2 <FAT::openDir(char const*, void**)+0x1a>
c001a8e8:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001a8f0:	75 07                	jne    c001a8f9 <FAT::openDir(char const*, void**)+0x21>
c001a8f2:	b8 04 00 00 00       	mov    eax,0x4
c001a8f7:	eb 7d                	jmp    c001a976 <FAT::openDir(char const*, void**)+0x9e>
c001a8f9:	83 ec 08             	sub    esp,0x8
c001a8fc:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a903:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a907:	50                   	push   eax
c001a908:	e8 65 5e fe ff       	call   c0000772 <strcpy>
c001a90d:	83 c4 10             	add    esp,0x10
c001a910:	83 ec 08             	sub    esp,0x8
c001a913:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a917:	50                   	push   eax
c001a918:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a91f:	e8 54 fe ff ff       	call   c001a778 <FAT::fixFilepath(char*)>
c001a924:	83 c4 10             	add    esp,0x10
c001a927:	83 ec 0c             	sub    esp,0xc
c001a92a:	6a 4c                	push   0x4c
c001a92c:	e8 05 17 ff ff       	call   c000c036 <malloc>
c001a931:	83 c4 10             	add    esp,0x10
c001a934:	89 c2                	mov    edx,eax
c001a936:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001a93d:	89 10                	mov    DWORD PTR [eax],edx
c001a93f:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001a946:	8b 00                	mov    eax,DWORD PTR [eax]
c001a948:	83 ec 08             	sub    esp,0x8
c001a94b:	8d 54 24 14          	lea    edx,[esp+0x14]
c001a94f:	52                   	push   edx
c001a950:	50                   	push   eax
c001a951:	e8 6b b4 fe ff       	call   c0005dc1 <f_opendir>
c001a956:	83 c4 10             	add    esp,0x10
c001a959:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001a960:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001a968:	74 07                	je     c001a971 <FAT::openDir(char const*, void**)+0x99>
c001a96a:	b8 01 00 00 00       	mov    eax,0x1
c001a96f:	eb 05                	jmp    c001a976 <FAT::openDir(char const*, void**)+0x9e>
c001a971:	b8 00 00 00 00       	mov    eax,0x0
c001a976:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a97c:	c3                   	ret    
c001a97d:	90                   	nop

c001a97e <FAT::stat(char const*, unsigned long long*, bool*)>:
c001a97e:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001a984:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001a98c:	75 0a                	jne    c001a998 <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c001a98e:	b8 04 00 00 00       	mov    eax,0x4
c001a993:	e9 c9 00 00 00       	jmp    c001aa61 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c001a998:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001a9a0:	75 0a                	jne    c001a9ac <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c001a9a2:	b8 04 00 00 00       	mov    eax,0x4
c001a9a7:	e9 b5 00 00 00       	jmp    c001aa61 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c001a9ac:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001a9b4:	75 0a                	jne    c001a9c0 <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c001a9b6:	b8 04 00 00 00       	mov    eax,0x4
c001a9bb:	e9 a1 00 00 00       	jmp    c001aa61 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c001a9c0:	83 ec 08             	sub    esp,0x8
c001a9c3:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001a9ca:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001a9d1:	50                   	push   eax
c001a9d2:	e8 9b 5d fe ff       	call   c0000772 <strcpy>
c001a9d7:	83 c4 10             	add    esp,0x10
c001a9da:	83 ec 08             	sub    esp,0x8
c001a9dd:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001a9e4:	50                   	push   eax
c001a9e5:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001a9ec:	e8 87 fd ff ff       	call   c001a778 <FAT::fixFilepath(char*)>
c001a9f1:	83 c4 10             	add    esp,0x10
c001a9f4:	83 ec 08             	sub    esp,0x8
c001a9f7:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a9fb:	50                   	push   eax
c001a9fc:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001aa03:	50                   	push   eax
c001aa04:	e8 77 b5 fe ff       	call   c0005f80 <f_stat>
c001aa09:	83 c4 10             	add    esp,0x10
c001aa0c:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001aa13:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001aa1a:	85 c0                	test   eax,eax
c001aa1c:	74 07                	je     c001aa25 <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c001aa1e:	83 f8 04             	cmp    eax,0x4
c001aa21:	74 32                	je     c001aa55 <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c001aa23:	eb 37                	jmp    c001aa5c <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c001aa25:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001aa29:	0f b6 c0             	movzx  eax,al
c001aa2c:	83 e0 10             	and    eax,0x10
c001aa2f:	0f 95 c2             	setne  dl
c001aa32:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001aa39:	88 10                	mov    BYTE PTR [eax],dl
c001aa3b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001aa3e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001aa42:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001aa49:	89 01                	mov    DWORD PTR [ecx],eax
c001aa4b:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001aa4e:	b8 00 00 00 00       	mov    eax,0x0
c001aa53:	eb 0c                	jmp    c001aa61 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c001aa55:	b8 02 00 00 00       	mov    eax,0x2
c001aa5a:	eb 05                	jmp    c001aa61 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c001aa5c:	b8 01 00 00 00       	mov    eax,0x1
c001aa61:	81 c4 2c 02 00 00    	add    esp,0x22c
c001aa67:	c3                   	ret    

c001aa68 <FAT::unlink(char const*)>:
c001aa68:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001aa6e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001aa76:	75 07                	jne    c001aa7f <FAT::unlink(char const*)+0x17>
c001aa78:	b8 04 00 00 00       	mov    eax,0x4
c001aa7d:	eb 5c                	jmp    c001aadb <FAT::unlink(char const*)+0x73>
c001aa7f:	83 ec 08             	sub    esp,0x8
c001aa82:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001aa89:	8d 44 24 18          	lea    eax,[esp+0x18]
c001aa8d:	50                   	push   eax
c001aa8e:	e8 df 5c fe ff       	call   c0000772 <strcpy>
c001aa93:	83 c4 10             	add    esp,0x10
c001aa96:	83 ec 08             	sub    esp,0x8
c001aa99:	8d 44 24 14          	lea    eax,[esp+0x14]
c001aa9d:	50                   	push   eax
c001aa9e:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001aaa5:	e8 ce fc ff ff       	call   c001a778 <FAT::fixFilepath(char*)>
c001aaaa:	83 c4 10             	add    esp,0x10
c001aaad:	83 ec 0c             	sub    esp,0xc
c001aab0:	8d 44 24 18          	lea    eax,[esp+0x18]
c001aab4:	50                   	push   eax
c001aab5:	e8 18 b8 fe ff       	call   c00062d2 <f_unlink>
c001aaba:	83 c4 10             	add    esp,0x10
c001aabd:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001aac4:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001aacb:	85 c0                	test   eax,eax
c001aacd:	75 07                	jne    c001aad6 <FAT::unlink(char const*)+0x6e>
c001aacf:	b8 00 00 00 00       	mov    eax,0x0
c001aad4:	eb 05                	jmp    c001aadb <FAT::unlink(char const*)+0x73>
c001aad6:	b8 01 00 00 00       	mov    eax,0x1
c001aadb:	81 c4 1c 01 00 00    	add    esp,0x11c
c001aae1:	c3                   	ret    

c001aae2 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001aae2:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001aae8:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c001aaef:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c001aaf6:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001aafa:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001aafe:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001ab06:	75 0a                	jne    c001ab12 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001ab08:	b8 04 00 00 00       	mov    eax,0x4
c001ab0d:	e9 1c 01 00 00       	jmp    c001ac2e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c001ab12:	83 ec 08             	sub    esp,0x8
c001ab15:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001ab1c:	8d 44 24 24          	lea    eax,[esp+0x24]
c001ab20:	50                   	push   eax
c001ab21:	e8 4c 5c fe ff       	call   c0000772 <strcpy>
c001ab26:	83 c4 10             	add    esp,0x10
c001ab29:	83 ec 08             	sub    esp,0x8
c001ab2c:	8d 44 24 20          	lea    eax,[esp+0x20]
c001ab30:	50                   	push   eax
c001ab31:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001ab38:	e8 3b fc ff ff       	call   c001a778 <FAT::fixFilepath(char*)>
c001ab3d:	83 c4 10             	add    esp,0x10
c001ab40:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001ab48:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001ab50:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001ab55:	83 e0 01             	and    eax,0x1
c001ab58:	74 08                	je     c001ab62 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c001ab5a:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c001ab62:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001ab67:	83 e0 02             	and    eax,0x2
c001ab6a:	74 08                	je     c001ab74 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c001ab6c:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c001ab74:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001ab79:	83 e0 04             	and    eax,0x4
c001ab7c:	74 08                	je     c001ab86 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c001ab7e:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c001ab86:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001ab8b:	83 e0 08             	and    eax,0x8
c001ab8e:	74 08                	je     c001ab98 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c001ab90:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c001ab98:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001ab9d:	83 e0 01             	and    eax,0x1
c001aba0:	74 08                	je     c001abaa <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c001aba2:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c001abaa:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001abaf:	83 e0 02             	and    eax,0x2
c001abb2:	74 08                	je     c001abbc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c001abb4:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c001abbc:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001abc1:	83 e0 04             	and    eax,0x4
c001abc4:	74 08                	je     c001abce <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c001abc6:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c001abce:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001abd3:	83 e0 08             	and    eax,0x8
c001abd6:	74 08                	je     c001abe0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c001abd8:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c001abe0:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001abe7:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c001abee:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001abf6:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001abfe:	83 ec 04             	sub    esp,0x4
c001ac01:	52                   	push   edx
c001ac02:	50                   	push   eax
c001ac03:	8d 44 24 24          	lea    eax,[esp+0x24]
c001ac07:	50                   	push   eax
c001ac08:	e8 67 bd fe ff       	call   c0006974 <f_chmod>
c001ac0d:	83 c4 10             	add    esp,0x10
c001ac10:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001ac17:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001ac1e:	85 c0                	test   eax,eax
c001ac20:	75 07                	jne    c001ac29 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c001ac22:	b8 00 00 00 00       	mov    eax,0x0
c001ac27:	eb 05                	jmp    c001ac2e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c001ac29:	b8 01 00 00 00       	mov    eax,0x1
c001ac2e:	81 c4 2c 01 00 00    	add    esp,0x12c
c001ac34:	c3                   	ret    
c001ac35:	90                   	nop

c001ac36 <FAT::rename(char const*, char const*)>:
c001ac36:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001ac3c:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001ac44:	74 0a                	je     c001ac50 <FAT::rename(char const*, char const*)+0x1a>
c001ac46:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001ac4e:	75 0a                	jne    c001ac5a <FAT::rename(char const*, char const*)+0x24>
c001ac50:	b8 04 00 00 00       	mov    eax,0x4
c001ac55:	e9 98 00 00 00       	jmp    c001acf2 <FAT::rename(char const*, char const*)+0xbc>
c001ac5a:	83 ec 08             	sub    esp,0x8
c001ac5d:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001ac64:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001ac6b:	50                   	push   eax
c001ac6c:	e8 01 5b fe ff       	call   c0000772 <strcpy>
c001ac71:	83 c4 10             	add    esp,0x10
c001ac74:	83 ec 08             	sub    esp,0x8
c001ac77:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001ac7e:	50                   	push   eax
c001ac7f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001ac86:	e8 ed fa ff ff       	call   c001a778 <FAT::fixFilepath(char*)>
c001ac8b:	83 c4 10             	add    esp,0x10
c001ac8e:	83 ec 08             	sub    esp,0x8
c001ac91:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001ac98:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ac9c:	50                   	push   eax
c001ac9d:	e8 d0 5a fe ff       	call   c0000772 <strcpy>
c001aca2:	83 c4 10             	add    esp,0x10
c001aca5:	83 ec 08             	sub    esp,0x8
c001aca8:	8d 44 24 14          	lea    eax,[esp+0x14]
c001acac:	50                   	push   eax
c001acad:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001acb4:	e8 bf fa ff ff       	call   c001a778 <FAT::fixFilepath(char*)>
c001acb9:	83 c4 10             	add    esp,0x10
c001acbc:	83 ec 08             	sub    esp,0x8
c001acbf:	8d 44 24 14          	lea    eax,[esp+0x14]
c001acc3:	50                   	push   eax
c001acc4:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001accb:	50                   	push   eax
c001accc:	e8 b0 b9 fe ff       	call   c0006681 <f_rename>
c001acd1:	83 c4 10             	add    esp,0x10
c001acd4:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001acdb:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001ace2:	85 c0                	test   eax,eax
c001ace4:	75 07                	jne    c001aced <FAT::rename(char const*, char const*)+0xb7>
c001ace6:	b8 00 00 00 00       	mov    eax,0x0
c001aceb:	eb 05                	jmp    c001acf2 <FAT::rename(char const*, char const*)+0xbc>
c001aced:	b8 01 00 00 00       	mov    eax,0x1
c001acf2:	81 c4 1c 02 00 00    	add    esp,0x21c
c001acf8:	c3                   	ret    
c001acf9:	90                   	nop

c001acfa <FAT::mkdir(char const*)>:
c001acfa:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001ad00:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001ad08:	75 07                	jne    c001ad11 <FAT::mkdir(char const*)+0x17>
c001ad0a:	b8 04 00 00 00       	mov    eax,0x4
c001ad0f:	eb 5c                	jmp    c001ad6d <FAT::mkdir(char const*)+0x73>
c001ad11:	83 ec 08             	sub    esp,0x8
c001ad14:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001ad1b:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ad1f:	50                   	push   eax
c001ad20:	e8 4d 5a fe ff       	call   c0000772 <strcpy>
c001ad25:	83 c4 10             	add    esp,0x10
c001ad28:	83 ec 08             	sub    esp,0x8
c001ad2b:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ad2f:	50                   	push   eax
c001ad30:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001ad37:	e8 3c fa ff ff       	call   c001a778 <FAT::fixFilepath(char*)>
c001ad3c:	83 c4 10             	add    esp,0x10
c001ad3f:	83 ec 0c             	sub    esp,0xc
c001ad42:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ad46:	50                   	push   eax
c001ad47:	e8 09 b7 fe ff       	call   c0006455 <f_mkdir>
c001ad4c:	83 c4 10             	add    esp,0x10
c001ad4f:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001ad56:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001ad5d:	85 c0                	test   eax,eax
c001ad5f:	75 07                	jne    c001ad68 <FAT::mkdir(char const*)+0x6e>
c001ad61:	b8 00 00 00 00       	mov    eax,0x0
c001ad66:	eb 05                	jmp    c001ad6d <FAT::mkdir(char const*)+0x73>
c001ad68:	b8 01 00 00 00       	mov    eax,0x1
c001ad6d:	81 c4 1c 01 00 00    	add    esp,0x11c
c001ad73:	c3                   	ret    

c001ad74 <FAT::exists(char const*)>:
c001ad74:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001ad7a:	83 ec 08             	sub    esp,0x8
c001ad7d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001ad84:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ad88:	50                   	push   eax
c001ad89:	e8 e4 59 fe ff       	call   c0000772 <strcpy>
c001ad8e:	83 c4 10             	add    esp,0x10
c001ad91:	83 ec 08             	sub    esp,0x8
c001ad94:	8d 44 24 08          	lea    eax,[esp+0x8]
c001ad98:	50                   	push   eax
c001ad99:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001ada0:	e8 d3 f9 ff ff       	call   c001a778 <FAT::fixFilepath(char*)>
c001ada5:	83 c4 10             	add    esp,0x10
c001ada8:	83 ec 08             	sub    esp,0x8
c001adab:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c001adb2:	50                   	push   eax
c001adb3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001adb7:	50                   	push   eax
c001adb8:	e8 c3 b1 fe ff       	call   c0005f80 <f_stat>
c001adbd:	83 c4 10             	add    esp,0x10
c001adc0:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001adc7:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001adce:	85 c0                	test   eax,eax
c001add0:	75 04                	jne    c001add6 <FAT::exists(char const*)+0x62>
c001add2:	b0 01                	mov    al,0x1
c001add4:	eb 02                	jmp    c001add8 <FAT::exists(char const*)+0x64>
c001add6:	b0 00                	mov    al,0x0
c001add8:	81 c4 2c 02 00 00    	add    esp,0x22c
c001adde:	c3                   	ret    
c001addf:	90                   	nop

c001ade0 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001ade0:	b8 08 00 00 00       	mov    eax,0x8
c001ade5:	c3                   	ret    

c001ade6 <ISO9660::seek(void*, unsigned long long)>:
c001ade6:	53                   	push   ebx
c001ade7:	b8 04 00 00 00       	mov    eax,0x4
c001adec:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001adf0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001adf4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001adf8:	85 d2                	test   edx,edx
c001adfa:	74 17                	je     c001ae13 <ISO9660::seek(void*, unsigned long long)+0x2d>
c001adfc:	89 c8                	mov    eax,ecx
c001adfe:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c001ae01:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c001ae04:	b8 01 00 00 00       	mov    eax,0x1
c001ae09:	73 08                	jae    c001ae13 <ISO9660::seek(void*, unsigned long long)+0x2d>
c001ae0b:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c001ae0e:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001ae11:	31 c0                	xor    eax,eax
c001ae13:	5b                   	pop    ebx
c001ae14:	c3                   	ret    
c001ae15:	90                   	nop

c001ae16 <ISO9660::tell(void*, unsigned long long*)>:
c001ae16:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ae1a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ae1e:	85 d2                	test   edx,edx
c001ae20:	74 12                	je     c001ae34 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001ae22:	85 c0                	test   eax,eax
c001ae24:	74 0e                	je     c001ae34 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001ae26:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001ae29:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c001ae2c:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001ae2f:	89 10                	mov    DWORD PTR [eax],edx
c001ae31:	31 c0                	xor    eax,eax
c001ae33:	c3                   	ret    
c001ae34:	b8 04 00 00 00       	mov    eax,0x4
c001ae39:	c3                   	ret    

c001ae3a <ISO9660::getName()>:
c001ae3a:	b8 68 2f 02 c0       	mov    eax,0xc0022f68
c001ae3f:	c3                   	ret    

c001ae40 <ISO9660::stat(void*, unsigned long long*)>:
c001ae40:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ae44:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ae48:	85 d2                	test   edx,edx
c001ae4a:	74 12                	je     c001ae5e <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001ae4c:	85 c0                	test   eax,eax
c001ae4e:	74 0e                	je     c001ae5e <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001ae50:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001ae53:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c001ae56:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001ae59:	89 10                	mov    DWORD PTR [eax],edx
c001ae5b:	31 c0                	xor    eax,eax
c001ae5d:	c3                   	ret    
c001ae5e:	b8 04 00 00 00       	mov    eax,0x4
c001ae63:	c3                   	ret    

c001ae64 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001ae64:	b8 01 00 00 00       	mov    eax,0x1
c001ae69:	c3                   	ret    

c001ae6a <ISO9660::unlink(char const*)>:
c001ae6a:	b8 01 00 00 00       	mov    eax,0x1
c001ae6f:	c3                   	ret    

c001ae70 <ISO9660::write(void*, unsigned long, void*, int*)>:
c001ae70:	b8 01 00 00 00       	mov    eax,0x1
c001ae75:	c3                   	ret    

c001ae76 <ISO9660::rename(char const*, char const*)>:
c001ae76:	b8 01 00 00 00       	mov    eax,0x1
c001ae7b:	c3                   	ret    

c001ae7c <ISO9660::mkdir(char const*)>:
c001ae7c:	b8 01 00 00 00       	mov    eax,0x1
c001ae81:	c3                   	ret    

c001ae82 <ISO9660::close(void*)>:
c001ae82:	83 ec 0c             	sub    esp,0xc
c001ae85:	b8 04 00 00 00       	mov    eax,0x4
c001ae8a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ae8e:	85 d2                	test   edx,edx
c001ae90:	74 0e                	je     c001aea0 <ISO9660::close(void*)+0x1e>
c001ae92:	83 ec 0c             	sub    esp,0xc
c001ae95:	52                   	push   edx
c001ae96:	e8 ab 11 ff ff       	call   c000c046 <free>
c001ae9b:	83 c4 10             	add    esp,0x10
c001ae9e:	31 c0                	xor    eax,eax
c001aea0:	83 c4 0c             	add    esp,0xc
c001aea3:	c3                   	ret    

c001aea4 <ISO9660::closeDir(void*)>:
c001aea4:	83 ec 0c             	sub    esp,0xc
c001aea7:	b8 04 00 00 00       	mov    eax,0x4
c001aeac:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001aeb0:	85 d2                	test   edx,edx
c001aeb2:	74 0e                	je     c001aec2 <ISO9660::closeDir(void*)+0x1e>
c001aeb4:	83 ec 0c             	sub    esp,0xc
c001aeb7:	52                   	push   edx
c001aeb8:	e8 89 11 ff ff       	call   c000c046 <free>
c001aebd:	83 c4 10             	add    esp,0x10
c001aec0:	31 c0                	xor    eax,eax
c001aec2:	83 c4 0c             	add    esp,0xc
c001aec5:	c3                   	ret    

c001aec6 <ISO9660::~ISO9660()>:
c001aec6:	83 ec 0c             	sub    esp,0xc
c001aec9:	ba bc 2f 02 c0       	mov    edx,0xc0022fbc
c001aece:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aed2:	89 10                	mov    DWORD PTR [eax],edx
c001aed4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aed8:	83 ec 0c             	sub    esp,0xc
c001aedb:	50                   	push   eax
c001aedc:	e8 6f 45 ff ff       	call   c000f450 <Filesystem::~Filesystem()>
c001aee1:	83 c4 10             	add    esp,0x10
c001aee4:	90                   	nop
c001aee5:	83 c4 0c             	add    esp,0xc
c001aee8:	c3                   	ret    
c001aee9:	90                   	nop

c001aeea <ISO9660::~ISO9660()>:
c001aeea:	83 ec 0c             	sub    esp,0xc
c001aeed:	83 ec 0c             	sub    esp,0xc
c001aef0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001aef4:	e8 cd ff ff ff       	call   c001aec6 <ISO9660::~ISO9660()>
c001aef9:	83 c4 10             	add    esp,0x10
c001aefc:	83 ec 08             	sub    esp,0x8
c001aeff:	6a 08                	push   0x8
c001af01:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001af05:	e8 3d 41 ff ff       	call   c000f047 <operator delete(void*, unsigned long)>
c001af0a:	83 c4 10             	add    esp,0x10
c001af0d:	83 c4 0c             	add    esp,0xc
c001af10:	c3                   	ret    

c001af11 <__memmem(unsigned char*, int, unsigned char*, int)>:
c001af11:	55                   	push   ebp
c001af12:	31 c9                	xor    ecx,ecx
c001af14:	57                   	push   edi
c001af15:	56                   	push   esi
c001af16:	53                   	push   ebx
c001af17:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001af1b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001af1f:	89 eb                	mov    ebx,ebp
c001af21:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c001af25:	39 ce                	cmp    esi,ecx
c001af27:	7e 17                	jle    c001af40 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c001af29:	31 d2                	xor    edx,edx
c001af2b:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c001af2f:	7d 13                	jge    c001af44 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c001af31:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001af35:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001af38:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c001af3b:	75 0d                	jne    c001af4a <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c001af3d:	42                   	inc    edx
c001af3e:	eb eb                	jmp    c001af2b <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c001af40:	31 c0                	xor    eax,eax
c001af42:	eb 0a                	jmp    c001af4e <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001af44:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c001af48:	eb 04                	jmp    c001af4e <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001af4a:	41                   	inc    ecx
c001af4b:	43                   	inc    ebx
c001af4c:	eb d7                	jmp    c001af25 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c001af4e:	5b                   	pop    ebx
c001af4f:	5e                   	pop    esi
c001af50:	5f                   	pop    edi
c001af51:	5d                   	pop    ebp
c001af52:	c3                   	ret    

c001af53 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001af53:	56                   	push   esi
c001af54:	53                   	push   ebx
c001af55:	52                   	push   edx
c001af56:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001af5a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001af5e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001af62:	39 0d 00 59 02 c0    	cmp    DWORD PTR ds:0xc0025900,ecx
c001af68:	75 08                	jne    c001af72 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c001af6a:	38 05 a8 3d 02 c0    	cmp    BYTE PTR ds:0xc0023da8,al
c001af70:	74 2b                	je     c001af9d <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x4a>
c001af72:	83 ec 0c             	sub    esp,0xc
c001af75:	a2 a8 3d 02 c0       	mov    ds:0xc0023da8,al
c001af7a:	68 20 59 02 c0       	push   0xc0025920
c001af7f:	0f be c0             	movsx  eax,al
c001af82:	6a 01                	push   0x1
c001af84:	89 0d 00 59 02 c0    	mov    DWORD PTR ds:0xc0025900,ecx
c001af8a:	31 db                	xor    ebx,ebx
c001af8c:	53                   	push   ebx
c001af8d:	51                   	push   ecx
c001af8e:	ff 34 85 7c 48 02 c0 	push   DWORD PTR [eax*4-0x3ffdb784]
c001af95:	e8 ca 77 ff ff       	call   c0012764 <LogicalDisk::read(unsigned long long, int, void*)>
c001af9a:	83 c4 20             	add    esp,0x20
c001af9d:	c7 44 24 18 00 08 00 00 	mov    DWORD PTR [esp+0x18],0x800
c001afa5:	c7 44 24 14 20 59 02 c0 	mov    DWORD PTR [esp+0x14],0xc0025920
c001afad:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001afb1:	58                   	pop    eax
c001afb2:	5b                   	pop    ebx
c001afb3:	5e                   	pop    esi
c001afb4:	e9 e4 56 fe ff       	jmp    c000069d <memcpy>
c001afb9:	90                   	nop

c001afba <ISO9660::tryMount(LogicalDisk*, int)>:
c001afba:	81 ec 10 08 00 00    	sub    esp,0x810
c001afc0:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c001afc7:	83 c0 41             	add    eax,0x41
c001afca:	0f be c0             	movsx  eax,al
c001afcd:	50                   	push   eax
c001afce:	8d 44 24 08          	lea    eax,[esp+0x8]
c001afd2:	50                   	push   eax
c001afd3:	6a 10                	push   0x10
c001afd5:	e8 79 ff ff ff       	call   c001af53 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001afda:	83 c4 10             	add    esp,0x10
c001afdd:	31 c0                	xor    eax,eax
c001afdf:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001afe4:	75 1d                	jne    c001b003 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001afe6:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001afeb:	75 16                	jne    c001b003 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001afed:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001aff2:	75 0f                	jne    c001b003 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001aff4:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001aff9:	75 08                	jne    c001b003 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001affb:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001b000:	0f 94 c0             	sete   al
c001b003:	81 c4 0c 08 00 00    	add    esp,0x80c
c001b009:	c3                   	ret    

c001b00a <ISO9660::read(void*, unsigned long, void*, int*)>:
c001b00a:	55                   	push   ebp
c001b00b:	57                   	push   edi
c001b00c:	56                   	push   esi
c001b00d:	53                   	push   ebx
c001b00e:	81 ec 34 08 00 00    	sub    esp,0x834
c001b014:	8b ac 24 50 08 00 00 	mov    ebp,DWORD PTR [esp+0x850]
c001b01b:	55                   	push   ebp
c001b01c:	68 83 2f 02 c0       	push   0xc0022f83
c001b021:	e8 01 41 ff ff       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c001b026:	83 c4 10             	add    esp,0x10
c001b029:	83 bc 24 44 08 00 00 00 	cmp    DWORD PTR [esp+0x844],0x0
c001b031:	0f 84 06 02 00 00    	je     c001b23d <ISO9660::read(void*, unsigned long, void*, int*)+0x233>
c001b037:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c001b03f:	0f 84 f8 01 00 00    	je     c001b23d <ISO9660::read(void*, unsigned long, void*, int*)+0x233>
c001b045:	8b bc 24 44 08 00 00 	mov    edi,DWORD PTR [esp+0x844]
c001b04c:	b8 01 00 00 00       	mov    eax,0x1
c001b051:	80 7f 18 00          	cmp    BYTE PTR [edi+0x18],0x0
c001b055:	0f 85 e7 01 00 00    	jne    c001b242 <ISO9660::read(void*, unsigned long, void*, int*)+0x238>
c001b05b:	8b 77 10             	mov    esi,DWORD PTR [edi+0x10]
c001b05e:	31 d2                	xor    edx,edx
c001b060:	8b 7f 14             	mov    edi,DWORD PTR [edi+0x14]
c001b063:	89 e9                	mov    ecx,ebp
c001b065:	89 d3                	mov    ebx,edx
c001b067:	01 f1                	add    ecx,esi
c001b069:	11 fb                	adc    ebx,edi
c001b06b:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001b06f:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001b073:	8b 9c 24 44 08 00 00 	mov    ebx,DWORD PTR [esp+0x844]
c001b07a:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c001b07d:	8b 5b 0c             	mov    ebx,DWORD PTR [ebx+0xc]
c001b080:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001b084:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001b088:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b08c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001b090:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001b094:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c001b098:	72 19                	jb     c001b0b3 <ISO9660::read(void*, unsigned long, void*, int*)+0xa9>
c001b09a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b09e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b0a2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b0a6:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001b0a9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b0ad:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b0b1:	eb 13                	jmp    c001b0c6 <ISO9660::read(void*, unsigned long, void*, int*)+0xbc>
c001b0b3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b0b7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b0bb:	29 f0                	sub    eax,esi
c001b0bd:	19 fa                	sbb    edx,edi
c001b0bf:	89 04 24             	mov    DWORD PTR [esp],eax
c001b0c2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b0c6:	8b 84 24 44 08 00 00 	mov    eax,DWORD PTR [esp+0x844]
c001b0cd:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001b0d0:	8b 00                	mov    eax,DWORD PTR [eax]
c001b0d2:	53                   	push   ebx
c001b0d3:	0f a4 c2 0b          	shld   edx,eax,0xb
c001b0d7:	c1 e0 0b             	shl    eax,0xb
c001b0da:	01 c6                	add    esi,eax
c001b0dc:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001b0e3:	11 d7                	adc    edi,edx
c001b0e5:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001b0e9:	89 fa                	mov    edx,edi
c001b0eb:	50                   	push   eax
c001b0ec:	8d 44 24 28          	lea    eax,[esp+0x28]
c001b0f0:	50                   	push   eax
c001b0f1:	89 f0                	mov    eax,esi
c001b0f3:	0f ac d0 0b          	shrd   eax,edx,0xb
c001b0f7:	50                   	push   eax
c001b0f8:	e8 56 fe ff ff       	call   c001af53 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b0fd:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001b104:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b108:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001b10b:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c001b10f:	81 e2 ff 07 00 00    	and    edx,0x7ff
c001b115:	83 c4 10             	add    esp,0x10
c001b118:	b8 00 08 00 00       	mov    eax,0x800
c001b11d:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c001b121:	29 d0                	sub    eax,edx
c001b123:	39 c1                	cmp    ecx,eax
c001b125:	83 db 00             	sbb    ebx,0x0
c001b128:	7d 19                	jge    c001b143 <ISO9660::read(void*, unsigned long, void*, int*)+0x139>
c001b12a:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001b12f:	75 16                	jne    c001b147 <ISO9660::read(void*, unsigned long, void*, int*)+0x13d>
c001b131:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001b138:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b13e:	e9 f6 00 00 00       	jmp    c001b239 <ISO9660::read(void*, unsigned long, void*, int*)+0x22f>
c001b143:	89 c5                	mov    ebp,eax
c001b145:	eb 03                	jmp    c001b14a <ISO9660::read(void*, unsigned long, void*, int*)+0x140>
c001b147:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c001b14a:	51                   	push   ecx
c001b14b:	55                   	push   ebp
c001b14c:	8d 44 14 28          	lea    eax,[esp+edx*1+0x28]
c001b150:	50                   	push   eax
c001b151:	ff b4 24 58 08 00 00 	push   DWORD PTR [esp+0x858]
c001b158:	e8 40 55 fe ff       	call   c000069d <memcpy>
c001b15d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b161:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001b165:	8b 84 24 5c 08 00 00 	mov    eax,DWORD PTR [esp+0x85c]
c001b16c:	01 e8                	add    eax,ebp
c001b16e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001b172:	89 e8                	mov    eax,ebp
c001b174:	99                   	cdq    
c001b175:	01 ee                	add    esi,ebp
c001b177:	11 d7                	adc    edi,edx
c001b179:	29 e9                	sub    ecx,ebp
c001b17b:	19 d3                	sbb    ebx,edx
c001b17d:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001b181:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001b185:	83 c4 10             	add    esp,0x10
c001b188:	b8 ff 07 00 00       	mov    eax,0x7ff
c001b18d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c001b190:	b8 00 00 00 00       	mov    eax,0x0
c001b195:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001b199:	7d 3f                	jge    c001b1da <ISO9660::read(void*, unsigned long, void*, int*)+0x1d0>
c001b19b:	52                   	push   edx
c001b19c:	89 fa                	mov    edx,edi
c001b19e:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001b1a5:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001b1a9:	50                   	push   eax
c001b1aa:	89 f0                	mov    eax,esi
c001b1ac:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b1b0:	0f ac d0 0b          	shrd   eax,edx,0xb
c001b1b4:	50                   	push   eax
c001b1b5:	e8 99 fd ff ff       	call   c001af53 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b1ba:	81 c6 00 08 00 00    	add    esi,0x800
c001b1c0:	83 d7 00             	adc    edi,0x0
c001b1c3:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c001b1cb:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c001b1d3:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c001b1d8:	eb ab                	jmp    c001b185 <ISO9660::read(void*, unsigned long, void*, int*)+0x17b>
c001b1da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b1de:	0b 04 24             	or     eax,DWORD PTR [esp]
c001b1e1:	74 34                	je     c001b217 <ISO9660::read(void*, unsigned long, void*, int*)+0x20d>
c001b1e3:	89 fa                	mov    edx,edi
c001b1e5:	50                   	push   eax
c001b1e6:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001b1ed:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001b1f1:	50                   	push   eax
c001b1f2:	89 f0                	mov    eax,esi
c001b1f4:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001b1f8:	0f ac d0 0b          	shrd   eax,edx,0xb
c001b1fc:	55                   	push   ebp
c001b1fd:	50                   	push   eax
c001b1fe:	e8 50 fd ff ff       	call   c001af53 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b203:	83 c4 0c             	add    esp,0xc
c001b206:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c001b20a:	55                   	push   ebp
c001b20b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b20f:	e8 89 54 fe ff       	call   c000069d <memcpy>
c001b214:	83 c4 10             	add    esp,0x10
c001b217:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001b21e:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001b222:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b226:	89 38                	mov    DWORD PTR [eax],edi
c001b228:	8b bc 24 44 08 00 00 	mov    edi,DWORD PTR [esp+0x844]
c001b22f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b233:	89 57 14             	mov    DWORD PTR [edi+0x14],edx
c001b236:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001b239:	31 c0                	xor    eax,eax
c001b23b:	eb 05                	jmp    c001b242 <ISO9660::read(void*, unsigned long, void*, int*)+0x238>
c001b23d:	b8 04 00 00 00       	mov    eax,0x4
c001b242:	81 c4 2c 08 00 00    	add    esp,0x82c
c001b248:	5b                   	pop    ebx
c001b249:	5e                   	pop    esi
c001b24a:	5f                   	pop    edi
c001b24b:	5d                   	pop    ebp
c001b24c:	c3                   	ret    
c001b24d:	90                   	nop

c001b24e <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001b24e:	55                   	push   ebp
c001b24f:	57                   	push   edi
c001b250:	56                   	push   esi
c001b251:	53                   	push   ebx
c001b252:	81 ec 5c 09 00 00    	sub    esp,0x95c
c001b258:	8b b4 24 74 09 00 00 	mov    esi,DWORD PTR [esp+0x974]
c001b25f:	85 f6                	test   esi,esi
c001b261:	0f 84 64 02 00 00    	je     c001b4cb <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c001b267:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c001b26f:	0f 84 56 02 00 00    	je     c001b4cb <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c001b275:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c001b278:	0b 46 08             	or     eax,DWORD PTR [esi+0x8]
c001b27b:	75 0a                	jne    c001b287 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c001b27d:	b8 07 00 00 00       	mov    eax,0x7
c001b282:	e9 49 02 00 00       	jmp    c001b4d0 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c001b287:	50                   	push   eax
c001b288:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c001b28c:	50                   	push   eax
c001b28d:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001b294:	53                   	push   ebx
c001b295:	8b 06                	mov    eax,DWORD PTR [esi]
c001b297:	c1 e0 0b             	shl    eax,0xb
c001b29a:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c001b29d:	c1 e8 0b             	shr    eax,0xb
c001b2a0:	50                   	push   eax
c001b2a1:	e8 ad fc ff ff       	call   c001af53 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b2a6:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001b2a9:	83 c4 10             	add    esp,0x10
c001b2ac:	89 c1                	mov    ecx,eax
c001b2ae:	8b 56 14             	mov    edx,DWORD PTR [esi+0x14]
c001b2b1:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001b2b7:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c001b2ba:	84 db                	test   bl,bl
c001b2bc:	0f 85 90 00 00 00    	jne    c001b352 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x104>
c001b2c2:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c001b2c8:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001b2ce:	29 c7                	sub    edi,eax
c001b2d0:	89 fb                	mov    ebx,edi
c001b2d2:	c1 fb 1f             	sar    ebx,0x1f
c001b2d5:	01 f8                	add    eax,edi
c001b2d7:	11 da                	adc    edx,ebx
c001b2d9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b2dd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b2e1:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c001b2e4:	89 56 14             	mov    DWORD PTR [esi+0x14],edx
c001b2e7:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c001b2ea:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001b2ed:	89 04 24             	mov    DWORD PTR [esp],eax
c001b2f0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b2f4:	89 d8                	mov    eax,ebx
c001b2f6:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001b2f9:	ba 00 00 00 00       	mov    edx,0x0
c001b2fe:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001b302:	b8 00 00 00 00       	mov    eax,0x0
c001b307:	73 0b                	jae    c001b314 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c001b309:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001b30c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001b310:	29 f8                	sub    eax,edi
c001b312:	19 da                	sbb    edx,ebx
c001b314:	89 d3                	mov    ebx,edx
c001b316:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c001b319:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c001b31c:	09 c3                	or     ebx,eax
c001b31e:	0f 84 59 ff ff ff    	je     c001b27d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c001b324:	55                   	push   ebp
c001b325:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c001b329:	50                   	push   eax
c001b32a:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001b331:	53                   	push   ebx
c001b332:	8b 06                	mov    eax,DWORD PTR [esi]
c001b334:	c1 e0 0b             	shl    eax,0xb
c001b337:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c001b33b:	c1 e8 0b             	shr    eax,0xb
c001b33e:	50                   	push   eax
c001b33f:	e8 0f fc ff ff       	call   c001af53 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b344:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001b347:	83 c4 10             	add    esp,0x10
c001b34a:	25 ff 07 00 00       	and    eax,0x7ff
c001b34f:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c001b352:	57                   	push   edi
c001b353:	6a 28                	push   0x28
c001b355:	6a 00                	push   0x0
c001b357:	8d 44 24 24          	lea    eax,[esp+0x24]
c001b35b:	50                   	push   eax
c001b35c:	e8 72 53 fe ff       	call   c00006d3 <memset>
c001b361:	31 d2                	xor    edx,edx
c001b363:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c001b366:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001b36c:	89 f8                	mov    eax,edi
c001b36e:	83 c0 21             	add    eax,0x21
c001b371:	83 d2 00             	adc    edx,0x0
c001b374:	89 c7                	mov    edi,eax
c001b376:	89 d5                	mov    ebp,edx
c001b378:	83 c4 10             	add    esp,0x10
c001b37b:	31 c9                	xor    ecx,ecx
c001b37d:	8a 84 3c 50 01 00 00 	mov    al,BYTE PTR [esp+edi*1+0x150]
c001b384:	83 f9 28             	cmp    ecx,0x28
c001b387:	88 04 24             	mov    BYTE PTR [esp],al
c001b38a:	0f 94 c2             	sete   dl
c001b38d:	88 d0                	mov    al,dl
c001b38f:	ba ff 07 00 00       	mov    edx,0x7ff
c001b394:	39 fa                	cmp    edx,edi
c001b396:	ba 00 00 00 00       	mov    edx,0x0
c001b39b:	19 ea                	sbb    edx,ebp
c001b39d:	0f 92 c2             	setb   dl
c001b3a0:	09 c2                	or     edx,eax
c001b3a2:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001b3a6:	0f 94 c0             	sete   al
c001b3a9:	08 d0                	or     al,dl
c001b3ab:	75 16                	jne    c001b3c3 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c001b3ad:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c001b3b1:	74 10                	je     c001b3c3 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c001b3b3:	8a 04 24             	mov    al,BYTE PTR [esp]
c001b3b6:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c001b3ba:	41                   	inc    ecx
c001b3bb:	83 c7 01             	add    edi,0x1
c001b3be:	83 d5 00             	adc    ebp,0x0
c001b3c1:	eb ba                	jmp    c001b37d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x12f>
c001b3c3:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c001b3ca:	83 ec 0c             	sub    esp,0xc
c001b3cd:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001b3d1:	57                   	push   edi
c001b3d2:	e8 19 53 fe ff       	call   c00006f0 <strlen>
c001b3d7:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c001b3df:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001b3e3:	8d 8c 24 60 09 00 00 	lea    ecx,[esp+0x960]
c001b3ea:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001b3ed:	5a                   	pop    edx
c001b3ee:	25 ff 07 00 00       	and    eax,0x7ff
c001b3f3:	01 c8                	add    eax,ecx
c001b3f5:	59                   	pop    ecx
c001b3f6:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c001b3fc:	83 e0 02             	and    eax,0x2
c001b3ff:	3c 01                	cmp    al,0x1
c001b401:	19 c0                	sbb    eax,eax
c001b403:	83 c0 02             	add    eax,0x2
c001b406:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001b40a:	57                   	push   edi
c001b40b:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001b40f:	50                   	push   eax
c001b410:	e8 5d 53 fe ff       	call   c0000772 <strcpy>
c001b415:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c001b419:	83 c4 10             	add    esp,0x10
c001b41c:	84 c0                	test   al,al
c001b41e:	75 21                	jne    c001b441 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1f3>
c001b420:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c001b428:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001b430:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001b438:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c001b43f:	eb 28                	jmp    c001b469 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c001b441:	fe c8                	dec    al
c001b443:	75 24                	jne    c001b469 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c001b445:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c001b44d:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001b455:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001b45d:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c001b464:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c001b469:	0f b6 fb             	movzx  edi,bl
c001b46c:	31 db                	xor    ebx,ebx
c001b46e:	50                   	push   eax
c001b46f:	ff b4 24 7c 09 00 00 	push   DWORD PTR [esp+0x97c]
c001b476:	8d 44 24 48          	lea    eax,[esp+0x48]
c001b47a:	50                   	push   eax
c001b47b:	ff b4 24 88 09 00 00 	push   DWORD PTR [esp+0x988]
c001b482:	e8 16 52 fe ff       	call   c000069d <memcpy>
c001b487:	8b 84 24 90 09 00 00 	mov    eax,DWORD PTR [esp+0x990]
c001b48e:	89 f9                	mov    ecx,edi
c001b490:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001b496:	01 7e 10             	add    DWORD PTR [esi+0x10],edi
c001b499:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c001b49c:	11 5e 14             	adc    DWORD PTR [esi+0x14],ebx
c001b49f:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001b4a2:	83 c4 10             	add    esp,0x10
c001b4a5:	39 c7                	cmp    edi,eax
c001b4a7:	89 df                	mov    edi,ebx
c001b4a9:	19 d7                	sbb    edi,edx
c001b4ab:	72 10                	jb     c001b4bd <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c001b4ad:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c001b4b4:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c001b4bb:	eb 0a                	jmp    c001b4c7 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x279>
c001b4bd:	29 c8                	sub    eax,ecx
c001b4bf:	19 da                	sbb    edx,ebx
c001b4c1:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c001b4c4:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c001b4c7:	31 c0                	xor    eax,eax
c001b4c9:	eb 05                	jmp    c001b4d0 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c001b4cb:	b8 04 00 00 00       	mov    eax,0x4
c001b4d0:	81 c4 5c 09 00 00    	add    esp,0x95c
c001b4d6:	5b                   	pop    ebx
c001b4d7:	5e                   	pop    esi
c001b4d8:	5f                   	pop    edi
c001b4d9:	5d                   	pop    ebp
c001b4da:	c3                   	ret    

c001b4db <readRoot(unsigned int*, unsigned int*, char)>:
c001b4db:	81 ec 40 08 00 00    	sub    esp,0x840
c001b4e1:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c001b4e9:	50                   	push   eax
c001b4ea:	8d 44 24 38          	lea    eax,[esp+0x38]
c001b4ee:	50                   	push   eax
c001b4ef:	6a 10                	push   0x10
c001b4f1:	e8 5d fa ff ff       	call   c001af53 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b4f6:	83 c4 0c             	add    esp,0xc
c001b4f9:	6a 22                	push   0x22
c001b4fb:	8d 84 24 d4 00 00 00 	lea    eax,[esp+0xd4]
c001b502:	50                   	push   eax
c001b503:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001b507:	50                   	push   eax
c001b508:	e8 90 51 fe ff       	call   c000069d <memcpy>
c001b50d:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001b514:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b518:	89 10                	mov    DWORD PTR [eax],edx
c001b51a:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001b521:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b525:	89 10                	mov    DWORD PTR [eax],edx
c001b527:	b0 01                	mov    al,0x1
c001b529:	81 c4 4c 08 00 00    	add    esp,0x84c
c001b52f:	c3                   	ret    

c001b530 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c001b530:	55                   	push   ebp
c001b531:	57                   	push   edi
c001b532:	56                   	push   esi
c001b533:	53                   	push   ebx
c001b534:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001b53a:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001b541:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c001b548:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b54c:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c001b550:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001b554:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001b558:	75 03                	jne    c001b55d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001b55a:	83 c3 02             	add    ebx,0x2
c001b55d:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c001b560:	75 03                	jne    c001b565 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c001b562:	43                   	inc    ebx
c001b563:	eb f8                	jmp    c001b55d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001b565:	51                   	push   ecx
c001b566:	68 00 01 00 00       	push   0x100
c001b56b:	6a 00                	push   0x0
c001b56d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001b571:	50                   	push   eax
c001b572:	e8 5c 51 fe ff       	call   c00006d3 <memset>
c001b577:	83 c4 10             	add    esp,0x10
c001b57a:	31 d2                	xor    edx,edx
c001b57c:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001b57f:	84 c0                	test   al,al
c001b581:	74 21                	je     c001b5a4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c001b583:	3c 2f                	cmp    al,0x2f
c001b585:	75 0b                	jne    c001b592 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c001b587:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c001b58b:	bd 01 00 00 00       	mov    ebp,0x1
c001b590:	eb 14                	jmp    c001b5a6 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c001b592:	8d 48 9f             	lea    ecx,[eax-0x61]
c001b595:	80 f9 19             	cmp    cl,0x19
c001b598:	77 03                	ja     c001b59d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c001b59a:	83 e8 20             	sub    eax,0x20
c001b59d:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c001b5a1:	42                   	inc    edx
c001b5a2:	eb d8                	jmp    c001b57c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c001b5a4:	31 ed                	xor    ebp,ebp
c001b5a6:	83 ec 0c             	sub    esp,0xc
c001b5a9:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001b5b0:	e8 81 0a ff ff       	call   c000c036 <malloc>
c001b5b5:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001b5bc:	89 c6                	mov    esi,eax
c001b5be:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c001b5c4:	c1 ef 0b             	shr    edi,0xb
c001b5c7:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c001b5ce:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c001b5d2:	83 c4 10             	add    esp,0x10
c001b5d5:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c001b5da:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b5de:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c001b5e5:	74 28                	je     c001b60f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c001b5e7:	52                   	push   edx
c001b5e8:	57                   	push   edi
c001b5e9:	50                   	push   eax
c001b5ea:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b5ee:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001b5f5:	e8 59 f9 ff ff       	call   c001af53 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b5fa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b5fe:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c001b605:	05 00 08 00 00       	add    eax,0x800
c001b60a:	83 c4 10             	add    esp,0x10
c001b60d:	eb cb                	jmp    c001b5da <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c001b60f:	83 ec 0c             	sub    esp,0xc
c001b612:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001b616:	57                   	push   edi
c001b617:	e8 d4 50 fe ff       	call   c00006f0 <strlen>
c001b61c:	50                   	push   eax
c001b61d:	57                   	push   edi
c001b61e:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c001b625:	56                   	push   esi
c001b626:	e8 e6 f8 ff ff       	call   c001af11 <__memmem(unsigned char*, int, unsigned char*, int)>
c001b62b:	83 c4 20             	add    esp,0x20
c001b62e:	85 c0                	test   eax,eax
c001b630:	75 13                	jne    c001b645 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c001b632:	83 ec 0c             	sub    esp,0xc
c001b635:	56                   	push   esi
c001b636:	e8 0b 0a ff ff       	call   c000c046 <free>
c001b63b:	83 c4 10             	add    esp,0x10
c001b63e:	31 c0                	xor    eax,eax
c001b640:	e9 b3 00 00 00       	jmp    c001b6f8 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001b645:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c001b649:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c001b64d:	c1 e7 08             	shl    edi,0x8
c001b650:	c1 e2 10             	shl    edx,0x10
c001b653:	09 d7                	or     edi,edx
c001b655:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c001b659:	09 d7                	or     edi,edx
c001b65b:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c001b65f:	c1 e2 18             	shl    edx,0x18
c001b662:	09 d7                	or     edi,edx
c001b664:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c001b668:	89 d1                	mov    ecx,edx
c001b66a:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c001b66e:	c1 e1 08             	shl    ecx,0x8
c001b671:	c1 e2 10             	shl    edx,0x10
c001b674:	09 ca                	or     edx,ecx
c001b676:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c001b67a:	09 ca                	or     edx,ecx
c001b67c:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c001b680:	c1 e1 18             	shl    ecx,0x18
c001b683:	09 ca                	or     edx,ecx
c001b685:	89 e9                	mov    ecx,ebp
c001b687:	84 c9                	test   cl,cl
c001b689:	74 3c                	je     c001b6c7 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c001b68b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001b68f:	83 ec 0c             	sub    esp,0xc
c001b692:	56                   	push   esi
c001b693:	e8 ae 09 ff ff       	call   c000c046 <free>
c001b698:	83 c4 0c             	add    esp,0xc
c001b69b:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001b6a2:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001b6a7:	50                   	push   eax
c001b6a8:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001b6af:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001b6b6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b6ba:	52                   	push   edx
c001b6bb:	57                   	push   edi
c001b6bc:	53                   	push   ebx
c001b6bd:	e8 6e fe ff ff       	call   c001b530 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001b6c2:	83 c4 20             	add    esp,0x20
c001b6c5:	eb 31                	jmp    c001b6f8 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001b6c7:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c001b6ca:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c001b6d1:	d0 e8                	shr    al,1
c001b6d3:	89 3b                	mov    DWORD PTR [ebx],edi
c001b6d5:	83 e0 01             	and    eax,0x1
c001b6d8:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001b6df:	83 ec 0c             	sub    esp,0xc
c001b6e2:	89 13                	mov    DWORD PTR [ebx],edx
c001b6e4:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c001b6eb:	89 03                	mov    DWORD PTR [ebx],eax
c001b6ed:	56                   	push   esi
c001b6ee:	e8 53 09 ff ff       	call   c000c046 <free>
c001b6f3:	83 c4 10             	add    esp,0x10
c001b6f6:	b0 01                	mov    al,0x1
c001b6f8:	81 c4 1c 01 00 00    	add    esp,0x11c
c001b6fe:	5b                   	pop    ebx
c001b6ff:	5e                   	pop    esi
c001b700:	5f                   	pop    edi
c001b701:	5d                   	pop    ebp
c001b702:	c3                   	ret    

c001b703 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c001b703:	55                   	push   ebp
c001b704:	57                   	push   edi
c001b705:	56                   	push   esi
c001b706:	53                   	push   ebx
c001b707:	83 ec 20             	sub    esp,0x20
c001b70a:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001b70e:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001b712:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001b716:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b71e:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001b726:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c001b72b:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c001b731:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c001b737:	57                   	push   edi
c001b738:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b73c:	50                   	push   eax
c001b73d:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b741:	50                   	push   eax
c001b742:	e8 94 fd ff ff       	call   c001b4db <readRoot(unsigned int*, unsigned int*, char)>
c001b747:	5a                   	pop    edx
c001b748:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b74c:	e8 9f 4f fe ff       	call   c00006f0 <strlen>
c001b751:	83 c4 10             	add    esp,0x10
c001b754:	83 f8 03             	cmp    eax,0x3
c001b757:	77 17                	ja     c001b770 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c001b759:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b75d:	89 03                	mov    DWORD PTR [ebx],eax
c001b75f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b763:	89 06                	mov    DWORD PTR [esi],eax
c001b765:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c001b76c:	b0 01                	mov    al,0x1
c001b76e:	eb 19                	jmp    c001b789 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c001b770:	50                   	push   eax
c001b771:	55                   	push   ebp
c001b772:	57                   	push   edi
c001b773:	56                   	push   esi
c001b774:	53                   	push   ebx
c001b775:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b779:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b77d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001b781:	e8 aa fd ff ff       	call   c001b530 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001b786:	83 c4 20             	add    esp,0x20
c001b789:	83 c4 1c             	add    esp,0x1c
c001b78c:	5b                   	pop    ebx
c001b78d:	5e                   	pop    esi
c001b78e:	5f                   	pop    edi
c001b78f:	5d                   	pop    ebp
c001b790:	c3                   	ret    
c001b791:	90                   	nop

c001b792 <ISO9660::open(char const*, void**, FileOpenMode)>:
c001b792:	57                   	push   edi
c001b793:	56                   	push   esi
c001b794:	53                   	push   ebx
c001b795:	83 ec 10             	sub    esp,0x10
c001b798:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001b79c:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001b7a0:	85 ff                	test   edi,edi
c001b7a2:	74 7b                	je     c001b81f <ISO9660::open(char const*, void**, FileOpenMode)+0x8d>
c001b7a4:	85 f6                	test   esi,esi
c001b7a6:	74 77                	je     c001b81f <ISO9660::open(char const*, void**, FileOpenMode)+0x8d>
c001b7a8:	83 ec 0c             	sub    esp,0xc
c001b7ab:	6a 1c                	push   0x1c
c001b7ad:	e8 84 08 ff ff       	call   c000c036 <malloc>
c001b7b2:	89 07                	mov    DWORD PTR [edi],eax
c001b7b4:	89 c3                	mov    ebx,eax
c001b7b6:	58                   	pop    eax
c001b7b7:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b7bb:	50                   	push   eax
c001b7bc:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001b7bf:	50                   	push   eax
c001b7c0:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001b7c4:	50                   	push   eax
c001b7c5:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001b7c9:	50                   	push   eax
c001b7ca:	56                   	push   esi
c001b7cb:	e8 33 ff ff ff       	call   c001b703 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001b7d0:	83 c4 20             	add    esp,0x20
c001b7d3:	84 c0                	test   al,al
c001b7d5:	74 07                	je     c001b7de <ISO9660::open(char const*, void**, FileOpenMode)+0x4c>
c001b7d7:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001b7dc:	74 0b                	je     c001b7e9 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001b7de:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001b7e2:	b8 01 00 00 00       	mov    eax,0x1
c001b7e7:	eb 3b                	jmp    c001b824 <ISO9660::open(char const*, void**, FileOpenMode)+0x92>
c001b7e9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b7ed:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001b7f1:	89 03                	mov    DWORD PTR [ebx],eax
c001b7f3:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001b7fa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b7fe:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001b805:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001b80c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001b80f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001b816:	8a 06                	mov    al,BYTE PTR [esi]
c001b818:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001b81b:	31 c0                	xor    eax,eax
c001b81d:	eb 05                	jmp    c001b824 <ISO9660::open(char const*, void**, FileOpenMode)+0x92>
c001b81f:	b8 04 00 00 00       	mov    eax,0x4
c001b824:	83 c4 10             	add    esp,0x10
c001b827:	5b                   	pop    ebx
c001b828:	5e                   	pop    esi
c001b829:	5f                   	pop    edi
c001b82a:	c3                   	ret    
c001b82b:	90                   	nop

c001b82c <ISO9660::exists(char const*)>:
c001b82c:	83 ec 28             	sub    esp,0x28
c001b82f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001b833:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b837:	52                   	push   edx
c001b838:	0f be 10             	movsx  edx,BYTE PTR [eax]
c001b83b:	52                   	push   edx
c001b83c:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001b840:	52                   	push   edx
c001b841:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001b845:	52                   	push   edx
c001b846:	50                   	push   eax
c001b847:	e8 b7 fe ff ff       	call   c001b703 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001b84c:	83 c4 3c             	add    esp,0x3c
c001b84f:	c3                   	ret    

c001b850 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001b850:	56                   	push   esi
c001b851:	53                   	push   ebx
c001b852:	83 ec 14             	sub    esp,0x14
c001b855:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001b859:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001b85d:	85 db                	test   ebx,ebx
c001b85f:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001b863:	0f 94 c2             	sete   dl
c001b866:	85 f6                	test   esi,esi
c001b868:	0f 94 c0             	sete   al
c001b86b:	08 c2                	or     dl,al
c001b86d:	75 68                	jne    c001b8d7 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001b86f:	85 c9                	test   ecx,ecx
c001b871:	74 64                	je     c001b8d7 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001b873:	83 ec 0c             	sub    esp,0xc
c001b876:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001b879:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b87d:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001b883:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001b88a:	50                   	push   eax
c001b88b:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c001b88e:	50                   	push   eax
c001b88f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001b893:	50                   	push   eax
c001b894:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001b898:	50                   	push   eax
c001b899:	51                   	push   ecx
c001b89a:	e8 64 fe ff ff       	call   c001b703 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001b89f:	83 c4 20             	add    esp,0x20
c001b8a2:	ba 01 00 00 00       	mov    edx,0x1
c001b8a7:	84 c0                	test   al,al
c001b8a9:	74 31                	je     c001b8dc <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001b8ab:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b8af:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001b8b6:	89 03                	mov    DWORD PTR [ebx],eax
c001b8b8:	ba 00 00 00 00       	mov    edx,0x0
c001b8bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b8c1:	85 c0                	test   eax,eax
c001b8c3:	0f 95 06             	setne  BYTE PTR [esi]
c001b8c6:	74 14                	je     c001b8dc <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001b8c8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001b8ce:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001b8d5:	eb 05                	jmp    c001b8dc <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001b8d7:	ba 04 00 00 00       	mov    edx,0x4
c001b8dc:	83 c4 14             	add    esp,0x14
c001b8df:	89 d0                	mov    eax,edx
c001b8e1:	5b                   	pop    ebx
c001b8e2:	5e                   	pop    esi
c001b8e3:	c3                   	ret    

c001b8e4 <ISO9660::openDir(char const*, void**)>:
c001b8e4:	57                   	push   edi
c001b8e5:	56                   	push   esi
c001b8e6:	53                   	push   ebx
c001b8e7:	83 ec 10             	sub    esp,0x10
c001b8ea:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001b8ee:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001b8f2:	85 ff                	test   edi,edi
c001b8f4:	0f 84 95 00 00 00    	je     c001b98f <ISO9660::openDir(char const*, void**)+0xab>
c001b8fa:	85 f6                	test   esi,esi
c001b8fc:	0f 84 8d 00 00 00    	je     c001b98f <ISO9660::openDir(char const*, void**)+0xab>
c001b902:	83 ec 0c             	sub    esp,0xc
c001b905:	6a 1c                	push   0x1c
c001b907:	e8 2a 07 ff ff       	call   c000c036 <malloc>
c001b90c:	89 07                	mov    DWORD PTR [edi],eax
c001b90e:	89 c3                	mov    ebx,eax
c001b910:	59                   	pop    ecx
c001b911:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b915:	50                   	push   eax
c001b916:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001b919:	50                   	push   eax
c001b91a:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001b91e:	50                   	push   eax
c001b91f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001b923:	50                   	push   eax
c001b924:	56                   	push   esi
c001b925:	e8 d9 fd ff ff       	call   c001b703 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001b92a:	83 c4 20             	add    esp,0x20
c001b92d:	84 c0                	test   al,al
c001b92f:	74 07                	je     c001b938 <ISO9660::openDir(char const*, void**)+0x54>
c001b931:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001b936:	75 21                	jne    c001b959 <ISO9660::openDir(char const*, void**)+0x75>
c001b938:	0f b6 c0             	movzx  eax,al
c001b93b:	52                   	push   edx
c001b93c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001b940:	50                   	push   eax
c001b941:	68 96 2f 02 c0       	push   0xc0022f96
c001b946:	e8 dc 37 ff ff       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c001b94b:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001b94f:	83 c4 10             	add    esp,0x10
c001b952:	b8 01 00 00 00       	mov    eax,0x1
c001b957:	eb 3b                	jmp    c001b994 <ISO9660::openDir(char const*, void**)+0xb0>
c001b959:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b95d:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001b961:	89 03                	mov    DWORD PTR [ebx],eax
c001b963:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001b96a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b96e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001b975:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001b97c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001b97f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001b986:	8a 06                	mov    al,BYTE PTR [esi]
c001b988:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001b98b:	31 c0                	xor    eax,eax
c001b98d:	eb 05                	jmp    c001b994 <ISO9660::openDir(char const*, void**)+0xb0>
c001b98f:	b8 04 00 00 00       	mov    eax,0x4
c001b994:	83 c4 10             	add    esp,0x10
c001b997:	5b                   	pop    ebx
c001b998:	5e                   	pop    esi
c001b999:	5f                   	pop    edi
c001b99a:	c3                   	ret    
c001b99b:	90                   	nop

c001b99c <ISO9660::ISO9660()>:
c001b99c:	83 ec 0c             	sub    esp,0xc
c001b99f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9a3:	83 ec 0c             	sub    esp,0xc
c001b9a6:	50                   	push   eax
c001b9a7:	e8 80 3a ff ff       	call   c000f42c <Filesystem::Filesystem()>
c001b9ac:	83 c4 10             	add    esp,0x10
c001b9af:	ba bc 2f 02 c0       	mov    edx,0xc0022fbc
c001b9b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9b8:	89 10                	mov    DWORD PTR [eax],edx
c001b9ba:	90                   	nop
c001b9bb:	83 c4 0c             	add    esp,0xc
c001b9be:	c3                   	ret    
c001b9bf:	90                   	nop

c001b9c0 <SoundChannel::~SoundChannel()>:
c001b9c0:	83 ec 0c             	sub    esp,0xc
c001b9c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9c7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001b9ca:	83 ec 0c             	sub    esp,0xc
c001b9cd:	50                   	push   eax
c001b9ce:	e8 73 06 ff ff       	call   c000c046 <free>
c001b9d3:	83 c4 10             	add    esp,0x10
c001b9d6:	90                   	nop
c001b9d7:	83 c4 0c             	add    esp,0xc
c001b9da:	c3                   	ret    
c001b9db:	90                   	nop

c001b9dc <SoundChannel::setSpeed(float)>:
c001b9dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b9e0:	d9 44 24 08          	fld    DWORD PTR [esp+0x8]
c001b9e4:	d9 58 28             	fstp   DWORD PTR [eax+0x28]
c001b9e7:	c3                   	ret    

c001b9e8 <SoundChannel::getSpeed()>:
c001b9e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b9ec:	d9 40 28             	fld    DWORD PTR [eax+0x28]
c001b9ef:	c3                   	ret    

c001b9f0 <SoundChannel::setVolume(int)>:
c001b9f0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b9f4:	83 f8 64             	cmp    eax,0x64
c001b9f7:	7e 05                	jle    c001b9fe <SoundChannel::setVolume(int)+0xe>
c001b9f9:	b8 64 00 00 00       	mov    eax,0x64
c001b9fe:	85 c0                	test   eax,eax
c001ba00:	79 02                	jns    c001ba04 <SoundChannel::setVolume(int)+0x14>
c001ba02:	31 c0                	xor    eax,eax
c001ba04:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ba08:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c001ba0b:	c3                   	ret    

c001ba0c <SoundChannel::getVolume()>:
c001ba0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ba10:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001ba13:	c3                   	ret    

c001ba14 <SoundChannel::pause()>:
c001ba14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ba18:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c001ba1c:	c3                   	ret    
c001ba1d:	90                   	nop

c001ba1e <SoundChannel::SoundChannel(int, int, int, int)>:
c001ba1e:	83 ec 1c             	sub    esp,0x1c
c001ba21:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001ba25:	e8 ea ff ff ff       	call   c001ba14 <SoundChannel::pause()>
c001ba2a:	83 c4 04             	add    esp,0x4
c001ba2d:	6a 50                	push   0x50
c001ba2f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001ba33:	e8 b8 ff ff ff       	call   c001b9f0 <SoundChannel::setVolume(int)>
c001ba38:	83 c4 08             	add    esp,0x8
c001ba3b:	d9 e8                	fld1   
c001ba3d:	8d 64 24 fc          	lea    esp,[esp-0x4]
c001ba41:	d9 1c 24             	fstp   DWORD PTR [esp]
c001ba44:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001ba48:	e8 8f ff ff ff       	call   c001b9dc <SoundChannel::setSpeed(float)>
c001ba4d:	83 c4 08             	add    esp,0x8
c001ba50:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ba54:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001ba58:	89 10                	mov    DWORD PTR [eax],edx
c001ba5a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ba5e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001ba62:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ba65:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ba69:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001ba6d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ba70:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c001ba75:	75 23                	jne    c001ba9a <SoundChannel::SoundChannel(int, int, int, int)+0x7c>
c001ba77:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ba7b:	8b 10                	mov    edx,DWORD PTR [eax]
c001ba7d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ba81:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ba84:	0f af c2             	imul   eax,edx
c001ba87:	85 c0                	test   eax,eax
c001ba89:	79 03                	jns    c001ba8e <SoundChannel::SoundChannel(int, int, int, int)+0x70>
c001ba8b:	83 c0 03             	add    eax,0x3
c001ba8e:	c1 f8 02             	sar    eax,0x2
c001ba91:	05 a0 0f 00 00       	add    eax,0xfa0
c001ba96:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001ba9a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ba9e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001baa2:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c001baa5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001baa9:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001bab0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bab4:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c001babb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001babf:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001bac2:	c1 e0 02             	shl    eax,0x2
c001bac5:	83 ec 0c             	sub    esp,0xc
c001bac8:	50                   	push   eax
c001bac9:	e8 68 05 ff ff       	call   c000c036 <malloc>
c001bace:	83 c4 10             	add    esp,0x10
c001bad1:	89 c2                	mov    edx,eax
c001bad3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bad7:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001bada:	83 ec 04             	sub    esp,0x4
c001badd:	8d 44 24 10          	lea    eax,[esp+0x10]
c001bae1:	50                   	push   eax
c001bae2:	6a 01                	push   0x1
c001bae4:	6a 04                	push   0x4
c001bae6:	e8 2b ce fe ff       	call   c0008916 <src_new>
c001baeb:	83 c4 10             	add    esp,0x10
c001baee:	89 c2                	mov    edx,eax
c001baf0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001baf4:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001baf7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bafb:	85 c0                	test   eax,eax
c001bafd:	74 10                	je     c001bb0f <SoundChannel::SoundChannel(int, int, int, int)+0xf1>
c001baff:	83 ec 0c             	sub    esp,0xc
c001bb02:	68 18 30 02 c0       	push   0xc0023018
c001bb07:	e8 e4 9d ff ff       	call   c00158f0 <Krnl::panic(char const*)>
c001bb0c:	83 c4 10             	add    esp,0x10
c001bb0f:	90                   	nop
c001bb10:	83 c4 1c             	add    esp,0x1c
c001bb13:	c3                   	ret    

c001bb14 <SoundChannel::play()>:
c001bb14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bb18:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c001bb1c:	c3                   	ret    
c001bb1d:	90                   	nop

c001bb1e <SoundChannel::paused()>:
c001bb1e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bb22:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c001bb25:	c3                   	ret    

c001bb26 <SoundChannel::getSampleRate()>:
c001bb26:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bb2a:	8b 00                	mov    eax,DWORD PTR [eax]
c001bb2c:	c3                   	ret    
c001bb2d:	90                   	nop

c001bb2e <SoundChannel::getBits()>:
c001bb2e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bb32:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bb35:	c3                   	ret    

c001bb36 <SoundChannel::getBufferUsed()>:
c001bb36:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bb3a:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001bb3d:	c3                   	ret    

c001bb3e <SoundChannel::getBufferSize()>:
c001bb3e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bb42:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001bb45:	c3                   	ret    

c001bb46 <SoundChannel::unbuffer(float*, int, int)>:
c001bb46:	53                   	push   ebx
c001bb47:	83 ec 40             	sub    esp,0x40
c001bb4a:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
c001bb4e:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001bb56:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001bb59:	db 03                	fild   DWORD PTR [ebx]
c001bb5b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001bb5f:	da 7c 24 50          	fidivr DWORD PTR [esp+0x50]
c001bb63:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001bb66:	d8 73 28             	fdiv   DWORD PTR [ebx+0x28]
c001bb69:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001bb6d:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c001bb71:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001bb75:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001bb79:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001bb7d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001bb81:	8d 44 24 14          	lea    eax,[esp+0x14]
c001bb85:	50                   	push   eax
c001bb86:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c001bb89:	e8 42 ca fe ff       	call   c00085d0 <src_process>
c001bb8e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001bb92:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c001bb95:	83 c4 0c             	add    esp,0xc
c001bb98:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001bb9b:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c001bb9e:	29 d0                	sub    eax,edx
c001bba0:	c1 e0 02             	shl    eax,0x2
c001bba3:	50                   	push   eax
c001bba4:	8d 04 91             	lea    eax,[ecx+edx*4]
c001bba7:	50                   	push   eax
c001bba8:	51                   	push   ecx
c001bba9:	e8 b7 4a fe ff       	call   c0000665 <memmove>
c001bbae:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001bbb2:	83 c4 48             	add    esp,0x48
c001bbb5:	5b                   	pop    ebx
c001bbb6:	c3                   	ret    
c001bbb7:	90                   	nop

c001bbb8 <SoundChannel::buffer8(unsigned char*, int)>:
c001bbb8:	53                   	push   ebx
c001bbb9:	31 c0                	xor    eax,eax
c001bbbb:	83 ec 08             	sub    esp,0x8
c001bbbe:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001bbc2:	8b 5a 14             	mov    ebx,DWORD PTR [edx+0x14]
c001bbc5:	39 5a 1c             	cmp    DWORD PTR [edx+0x1c],ebx
c001bbc8:	74 35                	je     c001bbff <SoundChannel::buffer8(unsigned char*, int)+0x47>
c001bbca:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001bbce:	7d 2f                	jge    c001bbff <SoundChannel::buffer8(unsigned char*, int)+0x47>
c001bbd0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001bbd4:	d9 05 34 30 02 c0    	fld    DWORD PTR ds:0xc0023034
c001bbda:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c001bbde:	40                   	inc    eax
c001bbdf:	66 89 4c 24 02       	mov    WORD PTR [esp+0x2],cx
c001bbe4:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c001bbe7:	de 4c 24 02          	fimul  WORD PTR [esp+0x2]
c001bbeb:	8d 59 01             	lea    ebx,[ecx+0x1]
c001bbee:	89 5a 1c             	mov    DWORD PTR [edx+0x1c],ebx
c001bbf1:	8b 5a 10             	mov    ebx,DWORD PTR [edx+0x10]
c001bbf4:	d9 1c 8b             	fstp   DWORD PTR [ebx+ecx*4]
c001bbf7:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001bbfa:	39 4a 1c             	cmp    DWORD PTR [edx+0x1c],ecx
c001bbfd:	eb c9                	jmp    c001bbc8 <SoundChannel::buffer8(unsigned char*, int)+0x10>
c001bbff:	83 c4 08             	add    esp,0x8
c001bc02:	5b                   	pop    ebx
c001bc03:	c3                   	ret    

c001bc04 <SoundDevice::SoundDevice(char const*)>:
c001bc04:	83 ec 1c             	sub    esp,0x1c
c001bc07:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bc0b:	83 ec 08             	sub    esp,0x8
c001bc0e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bc12:	50                   	push   eax
c001bc13:	e8 0a 4b ff ff       	call   c0010722 <Device::Device(char const*)>
c001bc18:	83 c4 10             	add    esp,0x10
c001bc1b:	ba 40 30 02 c0       	mov    edx,0xc0023040
c001bc20:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bc24:	89 10                	mov    DWORD PTR [eax],edx
c001bc26:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bc2a:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001bc34:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bc38:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001bc42:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001bc4a:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001bc4f:	7f 19                	jg     c001bc6a <SoundDevice::SoundDevice(char const*)+0x66>
c001bc51:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bc55:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001bc59:	83 c2 54             	add    edx,0x54
c001bc5c:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c001bc64:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001bc68:	eb e0                	jmp    c001bc4a <SoundDevice::SoundDevice(char const*)+0x46>
c001bc6a:	90                   	nop
c001bc6b:	83 c4 1c             	add    esp,0x1c
c001bc6e:	c3                   	ret    
c001bc6f:	90                   	nop

c001bc70 <SoundDevice::~SoundDevice()>:
c001bc70:	53                   	push   ebx
c001bc71:	83 ec 18             	sub    esp,0x18
c001bc74:	ba 40 30 02 c0       	mov    edx,0xc0023040
c001bc79:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bc7d:	89 10                	mov    DWORD PTR [eax],edx
c001bc7f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001bc87:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001bc8c:	7f 46                	jg     c001bcd4 <SoundDevice::~SoundDevice()+0x64>
c001bc8e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bc92:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001bc96:	83 c2 54             	add    edx,0x54
c001bc99:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c001bc9d:	85 c0                	test   eax,eax
c001bc9f:	74 2d                	je     c001bcce <SoundDevice::~SoundDevice()+0x5e>
c001bca1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bca5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001bca9:	83 c2 54             	add    edx,0x54
c001bcac:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c001bcb0:	85 db                	test   ebx,ebx
c001bcb2:	74 1a                	je     c001bcce <SoundDevice::~SoundDevice()+0x5e>
c001bcb4:	83 ec 0c             	sub    esp,0xc
c001bcb7:	53                   	push   ebx
c001bcb8:	e8 03 fd ff ff       	call   c001b9c0 <SoundChannel::~SoundChannel()>
c001bcbd:	83 c4 10             	add    esp,0x10
c001bcc0:	83 ec 08             	sub    esp,0x8
c001bcc3:	6a 2c                	push   0x2c
c001bcc5:	53                   	push   ebx
c001bcc6:	e8 7c 33 ff ff       	call   c000f047 <operator delete(void*, unsigned long)>
c001bccb:	83 c4 10             	add    esp,0x10
c001bcce:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001bcd2:	eb b3                	jmp    c001bc87 <SoundDevice::~SoundDevice()+0x17>
c001bcd4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bcd8:	83 ec 0c             	sub    esp,0xc
c001bcdb:	50                   	push   eax
c001bcdc:	e8 f3 46 ff ff       	call   c00103d4 <Device::~Device()>
c001bce1:	83 c4 10             	add    esp,0x10
c001bce4:	90                   	nop
c001bce5:	83 c4 18             	add    esp,0x18
c001bce8:	5b                   	pop    ebx
c001bce9:	c3                   	ret    

c001bcea <SoundDevice::~SoundDevice()>:
c001bcea:	83 ec 0c             	sub    esp,0xc
c001bced:	83 ec 0c             	sub    esp,0xc
c001bcf0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bcf4:	e8 77 ff ff ff       	call   c001bc70 <SoundDevice::~SoundDevice()>
c001bcf9:	83 c4 10             	add    esp,0x10
c001bcfc:	83 ec 08             	sub    esp,0x8
c001bcff:	68 e4 01 00 00       	push   0x1e4
c001bd04:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bd08:	e8 3a 33 ff ff       	call   c000f047 <operator delete(void*, unsigned long)>
c001bd0d:	83 c4 10             	add    esp,0x10
c001bd10:	83 c4 0c             	add    esp,0xc
c001bd13:	c3                   	ret    

c001bd14 <SoundDevice::getFreeChannelNum()>:
c001bd14:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001bd18:	31 c0                	xor    eax,eax
c001bd1a:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c001bd22:	74 09                	je     c001bd2d <SoundDevice::getFreeChannelNum()+0x19>
c001bd24:	40                   	inc    eax
c001bd25:	83 f8 20             	cmp    eax,0x20
c001bd28:	75 f0                	jne    c001bd1a <SoundDevice::getFreeChannelNum()+0x6>
c001bd2a:	83 c8 ff             	or     eax,0xffffffff
c001bd2d:	c3                   	ret    

c001bd2e <SoundDevice::addChannel(SoundChannel*)>:
c001bd2e:	56                   	push   esi
c001bd2f:	53                   	push   ebx
c001bd30:	51                   	push   ecx
c001bd31:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bd35:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001bd39:	53                   	push   ebx
c001bd3a:	e8 d5 ff ff ff       	call   c001bd14 <SoundDevice::getFreeChannelNum()>
c001bd3f:	5a                   	pop    edx
c001bd40:	83 f8 ff             	cmp    eax,0xffffffff
c001bd43:	74 51                	je     c001bd96 <SoundDevice::addChannel(SoundChannel*)+0x68>
c001bd45:	85 f6                	test   esi,esi
c001bd47:	74 4d                	je     c001bd96 <SoundDevice::addChannel(SoundChannel*)+0x68>
c001bd49:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c001bd50:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c001bd57:	75 30                	jne    c001bd89 <SoundDevice::addChannel(SoundChannel*)+0x5b>
c001bd59:	83 ec 0c             	sub    esp,0xc
c001bd5c:	56                   	push   esi
c001bd5d:	e8 c4 fd ff ff       	call   c001bb26 <SoundChannel::getSampleRate()>
c001bd62:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c001bd68:	89 34 24             	mov    DWORD PTR [esp],esi
c001bd6b:	e8 be fd ff ff       	call   c001bb2e <SoundChannel::getBits()>
c001bd70:	83 c4 0c             	add    esp,0xc
c001bd73:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c001bd79:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bd7b:	50                   	push   eax
c001bd7c:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c001bd82:	53                   	push   ebx
c001bd83:	ff 52 28             	call   DWORD PTR [edx+0x28]
c001bd86:	83 c4 10             	add    esp,0x10
c001bd89:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c001bd8f:	b8 01 00 00 00       	mov    eax,0x1
c001bd94:	eb 03                	jmp    c001bd99 <SoundDevice::addChannel(SoundChannel*)+0x6b>
c001bd96:	83 c8 ff             	or     eax,0xffffffff
c001bd99:	5a                   	pop    edx
c001bd9a:	5b                   	pop    ebx
c001bd9b:	5e                   	pop    esi
c001bd9c:	c3                   	ret    
c001bd9d:	90                   	nop

c001bd9e <SoundDevice::removeChannel(int)>:
c001bd9e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001bda2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bda6:	83 fa 1f             	cmp    edx,0x1f
c001bda9:	77 23                	ja     c001bdce <SoundDevice::removeChannel(int)+0x30>
c001bdab:	8d 14 90             	lea    edx,[eax+edx*4]
c001bdae:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c001bdb5:	74 17                	je     c001bdce <SoundDevice::removeChannel(int)+0x30>
c001bdb7:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c001bdc1:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c001bdc7:	75 05                	jne    c001bdce <SoundDevice::removeChannel(int)+0x30>
c001bdc9:	8b 00                	mov    eax,DWORD PTR [eax]
c001bdcb:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c001bdce:	c3                   	ret    
c001bdcf:	90                   	nop

c001bdd0 <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c001bdd0:	56                   	push   esi
c001bdd1:	53                   	push   ebx
c001bdd2:	31 db                	xor    ebx,ebx
c001bdd4:	83 ec 14             	sub    esp,0x14
c001bdd7:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001bddb:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c001bddf:	7d 55                	jge    c001be36 <SoundDevice::floatTo8(float*, unsigned char*, int)+0x66>
c001bde1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001bde5:	d9 e8                	fld1   
c001bde7:	d8 04 98             	fadd   DWORD PTR [eax+ebx*4]
c001bdea:	d8 0d 70 30 02 c0    	fmul   DWORD PTR ds:0xc0023070
c001bdf0:	d8 0d 74 30 02 c0    	fmul   DWORD PTR ds:0xc0023074
c001bdf6:	d9 5c 24 0c          	fstp   DWORD PTR [esp+0xc]
c001bdfa:	d9 44 24 0c          	fld    DWORD PTR [esp+0xc]
c001bdfe:	d8 15 78 30 02 c0    	fcom   DWORD PTR ds:0xc0023078
c001be04:	df e0                	fnstsw ax
c001be06:	9e                   	sahf   
c001be07:	72 08                	jb     c001be11 <SoundDevice::floatTo8(float*, unsigned char*, int)+0x41>
c001be09:	dd d8                	fstp   st(0)
c001be0b:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c001be0f:	eb 22                	jmp    c001be33 <SoundDevice::floatTo8(float*, unsigned char*, int)+0x63>
c001be11:	d9 ee                	fldz   
c001be13:	d8 d9                	fcomp  st(1)
c001be15:	df e0                	fnstsw ax
c001be17:	9e                   	sahf   
c001be18:	72 08                	jb     c001be22 <SoundDevice::floatTo8(float*, unsigned char*, int)+0x52>
c001be1a:	dd d8                	fstp   st(0)
c001be1c:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c001be20:	eb 11                	jmp    c001be33 <SoundDevice::floatTo8(float*, unsigned char*, int)+0x63>
c001be22:	83 ec 10             	sub    esp,0x10
c001be25:	d9 1c 24             	fstp   DWORD PTR [esp]
c001be28:	e8 ef 35 00 00       	call   c001f41c <lrintf>
c001be2d:	83 c4 10             	add    esp,0x10
c001be30:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c001be33:	43                   	inc    ebx
c001be34:	eb a5                	jmp    c001bddb <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb>
c001be36:	83 c4 14             	add    esp,0x14
c001be39:	5b                   	pop    ebx
c001be3a:	5e                   	pop    esi
c001be3b:	c3                   	ret    

c001be3c <SoundDevice::getAudio(int, float*, float*)>:
c001be3c:	55                   	push   ebp
c001be3d:	57                   	push   edi
c001be3e:	56                   	push   esi
c001be3f:	53                   	push   ebx
c001be40:	31 db                	xor    ebx,ebx
c001be42:	83 ec 20             	sub    esp,0x20
c001be45:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001be49:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001be4d:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001be51:	c1 e0 02             	shl    eax,0x2
c001be54:	50                   	push   eax
c001be55:	6a 00                	push   0x0
c001be57:	55                   	push   ebp
c001be58:	e8 76 48 fe ff       	call   c00006d3 <memset>
c001be5d:	83 c4 10             	add    esp,0x10
c001be60:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001be64:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c001be6b:	85 c0                	test   eax,eax
c001be6d:	0f 84 94 00 00 00    	je     c001bf07 <SoundDevice::getAudio(int, float*, float*)+0xcb>
c001be73:	83 ec 0c             	sub    esp,0xc
c001be76:	50                   	push   eax
c001be77:	e8 a2 fc ff ff       	call   c001bb1e <SoundChannel::paused()>
c001be7c:	83 c4 10             	add    esp,0x10
c001be7f:	84 c0                	test   al,al
c001be81:	0f 85 80 00 00 00    	jne    c001bf07 <SoundDevice::getAudio(int, float*, float*)+0xcb>
c001be87:	83 ec 0c             	sub    esp,0xc
c001be8a:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c001be91:	e8 76 fb ff ff       	call   c001ba0c <SoundChannel::getVolume()>
c001be96:	83 c4 10             	add    esp,0x10
c001be99:	85 c0                	test   eax,eax
c001be9b:	74 6a                	je     c001bf07 <SoundDevice::getAudio(int, float*, float*)+0xcb>
c001be9d:	83 ec 0c             	sub    esp,0xc
c001bea0:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c001bea7:	e8 60 fb ff ff       	call   c001ba0c <SoundChannel::getVolume()>
c001beac:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001beb0:	d9 05 7c 30 02 c0    	fld    DWORD PTR ds:0xc002307c
c001beb6:	da 7c 24 1c          	fidivr DWORD PTR [esp+0x1c]
c001beba:	d9 5c 24 1c          	fstp   DWORD PTR [esp+0x1c]
c001bebe:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001bec2:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c001bec8:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c001becc:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c001bed3:	e8 6e fc ff ff       	call   c001bb46 <SoundChannel::unbuffer(float*, int, int)>
c001bed8:	83 c4 20             	add    esp,0x20
c001bedb:	31 d2                	xor    edx,edx
c001bedd:	d9 44 24 0c          	fld    DWORD PTR [esp+0xc]
c001bee1:	39 c2                	cmp    edx,eax
c001bee3:	7d 1a                	jge    c001beff <SoundDevice::getAudio(int, float*, float*)+0xc3>
c001bee5:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001bee9:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c001beec:	d8 c9                	fmul   st,st(1)
c001beee:	da b6 58 01 00 00    	fidiv  DWORD PTR [esi+0x158]
c001bef4:	d8 44 95 00          	fadd   DWORD PTR [ebp+edx*4+0x0]
c001bef8:	d9 5c 95 00          	fstp   DWORD PTR [ebp+edx*4+0x0]
c001befc:	42                   	inc    edx
c001befd:	eb e2                	jmp    c001bee1 <SoundDevice::getAudio(int, float*, float*)+0xa5>
c001beff:	dd d8                	fstp   st(0)
c001bf01:	39 c7                	cmp    edi,eax
c001bf03:	7e 02                	jle    c001bf07 <SoundDevice::getAudio(int, float*, float*)+0xcb>
c001bf05:	89 c7                	mov    edi,eax
c001bf07:	43                   	inc    ebx
c001bf08:	83 fb 20             	cmp    ebx,0x20
c001bf0b:	0f 85 53 ff ff ff    	jne    c001be64 <SoundDevice::getAudio(int, float*, float*)+0x28>
c001bf11:	83 c4 1c             	add    esp,0x1c
c001bf14:	89 f8                	mov    eax,edi
c001bf16:	5b                   	pop    ebx
c001bf17:	5e                   	pop    esi
c001bf18:	5f                   	pop    edi
c001bf19:	5d                   	pop    ebp
c001bf1a:	c3                   	ret    
c001bf1b:	90                   	nop

c001bf1c <PCI::open(int, int, void*)>:
c001bf1c:	83 ec 18             	sub    esp,0x18
c001bf1f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bf23:	8b 10                	mov    edx,DWORD PTR [eax]
c001bf25:	50                   	push   eax
c001bf26:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001bf29:	31 c0                	xor    eax,eax
c001bf2b:	83 c4 1c             	add    esp,0x1c
c001bf2e:	c3                   	ret    
c001bf2f:	90                   	nop

c001bf30 <PCI::close(int, int, void*)>:
c001bf30:	31 c0                	xor    eax,eax
c001bf32:	c3                   	ret    
c001bf33:	90                   	nop

c001bf34 <PCI::PCI()>:
c001bf34:	83 ec 0c             	sub    esp,0xc
c001bf37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf3b:	83 ec 08             	sub    esp,0x8
c001bf3e:	68 80 30 02 c0       	push   0xc0023080
c001bf43:	50                   	push   eax
c001bf44:	e8 65 3e ff ff       	call   c000fdae <Bus::Bus(char const*)>
c001bf49:	83 c4 10             	add    esp,0x10
c001bf4c:	ba 0c 31 02 c0       	mov    edx,0xc002310c
c001bf51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf55:	89 10                	mov    DWORD PTR [eax],edx
c001bf57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf5b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001bf61:	0f b6 d0             	movzx  edx,al
c001bf64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf68:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001bf6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf73:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001bf79:	0f b6 d0             	movzx  edx,al
c001bf7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf80:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001bf85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf89:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001bf8f:	8d 50 01             	lea    edx,[eax+0x1]
c001bf92:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001bf96:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001bf9c:	0f b6 d0             	movzx  edx,al
c001bf9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bfa3:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001bfa7:	83 c9 c0             	or     ecx,0xffffffc0
c001bfaa:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001bfae:	90                   	nop
c001bfaf:	83 c4 0c             	add    esp,0xc
c001bfb2:	c3                   	ret    
c001bfb3:	90                   	nop

c001bfb4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001bfb4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001bfb8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001bfbd:	89 ca                	mov    edx,ecx
c001bfbf:	c1 e0 10             	shl    eax,0x10
c001bfc2:	81 e2 fc 00 00 00    	and    edx,0xfc
c001bfc8:	09 d0                	or     eax,edx
c001bfca:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c001bfcf:	c1 e2 08             	shl    edx,0x8
c001bfd2:	09 d0                	or     eax,edx
c001bfd4:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c001bfd9:	c1 e2 0b             	shl    edx,0xb
c001bfdc:	09 d0                	or     eax,edx
c001bfde:	ba f8 0c 00 00       	mov    edx,0xcf8
c001bfe3:	0d 00 00 00 80       	or     eax,0x80000000
c001bfe8:	ef                   	out    dx,eax
c001bfe9:	ba fc 0c 00 00       	mov    edx,0xcfc
c001bfee:	ed                   	in     eax,dx
c001bfef:	83 e1 02             	and    ecx,0x2
c001bff2:	0f b6 c9             	movzx  ecx,cl
c001bff5:	c1 e1 03             	shl    ecx,0x3
c001bff8:	d3 e8                	shr    eax,cl
c001bffa:	c3                   	ret    
c001bffb:	90                   	nop

c001bffc <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001bffc:	6a 00                	push   0x0
c001bffe:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c003:	50                   	push   eax
c001c004:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c009:	50                   	push   eax
c001c00a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c00f:	50                   	push   eax
c001c010:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c014:	e8 9b ff ff ff       	call   c001bfb4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c019:	83 c4 14             	add    esp,0x14
c001c01c:	c3                   	ret    
c001c01d:	90                   	nop

c001c01e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001c01e:	6a 0e                	push   0xe
c001c020:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c025:	50                   	push   eax
c001c026:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c02b:	50                   	push   eax
c001c02c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c031:	50                   	push   eax
c001c032:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c036:	e8 79 ff ff ff       	call   c001bfb4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c03b:	83 c4 14             	add    esp,0x14
c001c03e:	0f b6 c0             	movzx  eax,al
c001c041:	c3                   	ret    

c001c042 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001c042:	55                   	push   ebp
c001c043:	57                   	push   edi
c001c044:	56                   	push   esi
c001c045:	53                   	push   ebx
c001c046:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001c04b:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c001c050:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c001c055:	6a 0a                	push   0xa
c001c057:	56                   	push   esi
c001c058:	55                   	push   ebp
c001c059:	57                   	push   edi
c001c05a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001c05e:	e8 51 ff ff ff       	call   c001bfb4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c063:	6a 0a                	push   0xa
c001c065:	89 c3                	mov    ebx,eax
c001c067:	56                   	push   esi
c001c068:	0f b6 db             	movzx  ebx,bl
c001c06b:	55                   	push   ebp
c001c06c:	57                   	push   edi
c001c06d:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001c071:	e8 3e ff ff ff       	call   c001bfb4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c076:	83 c4 28             	add    esp,0x28
c001c079:	25 00 ff 00 00       	and    eax,0xff00
c001c07e:	09 d8                	or     eax,ebx
c001c080:	5b                   	pop    ebx
c001c081:	5e                   	pop    esi
c001c082:	5f                   	pop    edi
c001c083:	5d                   	pop    ebp
c001c084:	c3                   	ret    
c001c085:	90                   	nop

c001c086 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001c086:	6a 08                	push   0x8
c001c088:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c08d:	50                   	push   eax
c001c08e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c093:	50                   	push   eax
c001c094:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c099:	50                   	push   eax
c001c09a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c09e:	e8 11 ff ff ff       	call   c001bfb4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c0a3:	83 c4 14             	add    esp,0x14
c001c0a6:	0f b6 c4             	movzx  eax,ah
c001c0a9:	c3                   	ret    

c001c0aa <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001c0aa:	6a 08                	push   0x8
c001c0ac:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c0b1:	50                   	push   eax
c001c0b2:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c0b7:	50                   	push   eax
c001c0b8:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c0bd:	50                   	push   eax
c001c0be:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c0c2:	e8 ed fe ff ff       	call   c001bfb4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c0c7:	83 c4 14             	add    esp,0x14
c001c0ca:	c3                   	ret    
c001c0cb:	90                   	nop

c001c0cc <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001c0cc:	6a 3c                	push   0x3c
c001c0ce:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c0d3:	50                   	push   eax
c001c0d4:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c0d9:	50                   	push   eax
c001c0da:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c0df:	50                   	push   eax
c001c0e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c0e4:	e8 cb fe ff ff       	call   c001bfb4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c0e9:	83 c4 14             	add    esp,0x14
c001c0ec:	c3                   	ret    
c001c0ed:	90                   	nop

c001c0ee <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001c0ee:	6a 18                	push   0x18
c001c0f0:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c0f5:	50                   	push   eax
c001c0f6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c0fb:	50                   	push   eax
c001c0fc:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c101:	50                   	push   eax
c001c102:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c106:	e8 a9 fe ff ff       	call   c001bfb4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c10b:	83 c4 14             	add    esp,0x14
c001c10e:	0f b6 c4             	movzx  eax,ah
c001c111:	c3                   	ret    

c001c112 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001c112:	55                   	push   ebp
c001c113:	57                   	push   edi
c001c114:	56                   	push   esi
c001c115:	53                   	push   ebx
c001c116:	50                   	push   eax
c001c117:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c001c11b:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c001c120:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001c125:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c001c12a:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001c131:	8d 43 12             	lea    eax,[ebx+0x12]
c001c134:	83 c3 10             	add    ebx,0x10
c001c137:	0f b6 c0             	movzx  eax,al
c001c13a:	0f b6 db             	movzx  ebx,bl
c001c13d:	50                   	push   eax
c001c13e:	51                   	push   ecx
c001c13f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001c143:	57                   	push   edi
c001c144:	55                   	push   ebp
c001c145:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001c149:	e8 66 fe ff ff       	call   c001bfb4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c14e:	53                   	push   ebx
c001c14f:	89 c6                	mov    esi,eax
c001c151:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001c155:	c1 e6 10             	shl    esi,0x10
c001c158:	51                   	push   ecx
c001c159:	57                   	push   edi
c001c15a:	55                   	push   ebp
c001c15b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001c15f:	e8 50 fe ff ff       	call   c001bfb4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c164:	83 c4 2c             	add    esp,0x2c
c001c167:	0f b7 c0             	movzx  eax,ax
c001c16a:	5b                   	pop    ebx
c001c16b:	09 f0                	or     eax,esi
c001c16d:	5e                   	pop    esi
c001c16e:	5f                   	pop    edi
c001c16f:	5d                   	pop    ebp
c001c170:	c3                   	ret    
c001c171:	90                   	nop

c001c172 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001c172:	53                   	push   ebx
c001c173:	ba f8 0c 00 00       	mov    edx,0xcf8
c001c178:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001c17d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c181:	c1 e1 10             	shl    ecx,0x10
c001c184:	25 fc 00 00 00       	and    eax,0xfc
c001c189:	09 c1                	or     ecx,eax
c001c18b:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c190:	c1 e0 08             	shl    eax,0x8
c001c193:	09 c1                	or     ecx,eax
c001c195:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001c19a:	c1 e0 0b             	shl    eax,0xb
c001c19d:	09 c1                	or     ecx,eax
c001c19f:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001c1a5:	89 c8                	mov    eax,ecx
c001c1a7:	ef                   	out    dx,eax
c001c1a8:	ba fc 0c 00 00       	mov    edx,0xcfc
c001c1ad:	ed                   	in     eax,dx
c001c1ae:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c001c1b3:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c001c1b8:	74 0a                	je     c001c1c4 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c001c1ba:	0f b7 d8             	movzx  ebx,ax
c001c1bd:	89 d0                	mov    eax,edx
c001c1bf:	c1 e0 10             	shl    eax,0x10
c001c1c2:	eb 05                	jmp    c001c1c9 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c001c1c4:	66 31 c0             	xor    ax,ax
c001c1c7:	89 d3                	mov    ebx,edx
c001c1c9:	09 c3                	or     ebx,eax
c001c1cb:	ba f8 0c 00 00       	mov    edx,0xcf8
c001c1d0:	89 c8                	mov    eax,ecx
c001c1d2:	ef                   	out    dx,eax
c001c1d3:	ba fc 0c 00 00       	mov    edx,0xcfc
c001c1d8:	89 d8                	mov    eax,ebx
c001c1da:	ef                   	out    dx,eax
c001c1db:	5b                   	pop    ebx
c001c1dc:	c3                   	ret    
c001c1dd:	90                   	nop

c001c1de <PCI::checkBus(unsigned char)>:
c001c1de:	56                   	push   esi
c001c1df:	53                   	push   ebx
c001c1e0:	31 db                	xor    ebx,ebx
c001c1e2:	51                   	push   ecx
c001c1e3:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001c1e8:	52                   	push   edx
c001c1e9:	53                   	push   ebx
c001c1ea:	43                   	inc    ebx
c001c1eb:	56                   	push   esi
c001c1ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c1f0:	e8 29 03 00 00       	call   c001c51e <PCI::checkDevice(unsigned char, unsigned char)>
c001c1f5:	83 c4 10             	add    esp,0x10
c001c1f8:	83 fb 20             	cmp    ebx,0x20
c001c1fb:	75 eb                	jne    c001c1e8 <PCI::checkBus(unsigned char)+0xa>
c001c1fd:	58                   	pop    eax
c001c1fe:	5b                   	pop    ebx
c001c1ff:	5e                   	pop    esi
c001c200:	c3                   	ret    
c001c201:	90                   	nop

c001c202 <PCI::foundDevice(PCIDeviceInfo)>:
c001c202:	55                   	push   ebp
c001c203:	57                   	push   edi
c001c204:	56                   	push   esi
c001c205:	53                   	push   ebx
c001c206:	83 ec 1c             	sub    esp,0x1c
c001c209:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c20d:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c001c213:	0f 84 51 01 00 00    	je     c001c36a <PCI::foundDevice(PCIDeviceInfo)+0x168>
c001c219:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001c21d:	66 81 f9 06 04       	cmp    cx,0x406
c001c222:	75 2c                	jne    c001c250 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c001c224:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001c229:	50                   	push   eax
c001c22a:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001c22f:	50                   	push   eax
c001c230:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001c235:	50                   	push   eax
c001c236:	56                   	push   esi
c001c237:	e8 b2 fe ff ff       	call   c001c0ee <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001c23c:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001c240:	0f b6 c0             	movzx  eax,al
c001c243:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001c247:	83 c4 2c             	add    esp,0x2c
c001c24a:	5b                   	pop    ebx
c001c24b:	5e                   	pop    esi
c001c24c:	5f                   	pop    edi
c001c24d:	5d                   	pop    ebp
c001c24e:	eb 8e                	jmp    c001c1de <PCI::checkBus(unsigned char)>
c001c250:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001c254:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001c25a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001c25e:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001c262:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c001c266:	88 d3                	mov    bl,dl
c001c268:	85 c0                	test   eax,eax
c001c26a:	74 33                	je     c001c29f <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001c26c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001c26f:	85 d2                	test   edx,edx
c001c271:	74 28                	je     c001c29b <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001c273:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c001c279:	31 ef                	xor    edi,ebp
c001c27b:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c001c281:	75 18                	jne    c001c29b <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001c283:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001c287:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c001c28d:	75 0c                	jne    c001c29b <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001c28f:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c001c295:	0f 84 cf 00 00 00    	je     c001c36a <PCI::foundDevice(PCIDeviceInfo)+0x168>
c001c29b:	8b 00                	mov    eax,DWORD PTR [eax]
c001c29d:	eb c9                	jmp    c001c268 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c001c29f:	66 81 f9 01 06       	cmp    cx,0x601
c001c2a4:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c001c2a8:	75 18                	jne    c001c2c2 <PCI::foundDevice(PCIDeviceInfo)+0xc0>
c001c2aa:	83 ec 0c             	sub    esp,0xc
c001c2ad:	68 58 01 00 00       	push   0x158
c001c2b2:	e8 81 2d ff ff       	call   c000f038 <operator new(unsigned long)>
c001c2b7:	59                   	pop    ecx
c001c2b8:	89 c5                	mov    ebp,eax
c001c2ba:	5f                   	pop    edi
c001c2bb:	68 88 30 02 c0       	push   0xc0023088
c001c2c0:	eb 7d                	jmp    c001c33f <PCI::foundDevice(PCIDeviceInfo)+0x13d>
c001c2c2:	66 81 f9 01 01       	cmp    cx,0x101
c001c2c7:	75 60                	jne    c001c329 <PCI::foundDevice(PCIDeviceInfo)+0x127>
c001c2c9:	83 ec 0c             	sub    esp,0xc
c001c2cc:	68 70 02 00 00       	push   0x270
c001c2d1:	e8 62 2d ff ff       	call   c000f038 <operator new(unsigned long)>
c001c2d6:	89 04 24             	mov    DWORD PTR [esp],eax
c001c2d9:	89 c5                	mov    ebp,eax
c001c2db:	e8 02 03 00 00       	call   c001c5e2 <IDE::IDE()>
c001c2e0:	58                   	pop    eax
c001c2e1:	5a                   	pop    edx
c001c2e2:	55                   	push   ebp
c001c2e3:	56                   	push   esi
c001c2e4:	e8 49 42 ff ff       	call   c0010532 <Device::addChild(Device*)>
c001c2e9:	83 ec 1c             	sub    esp,0x1c
c001c2ec:	b9 09 00 00 00       	mov    ecx,0x9
c001c2f1:	fc                   	cld    
c001c2f2:	89 e7                	mov    edi,esp
c001c2f4:	89 de                	mov    esi,ebx
c001c2f6:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001c2f8:	55                   	push   ebp
c001c2f9:	e8 0e 41 ff ff       	call   c001040c <Device::preOpenPCI(PCIDeviceInfo)>
c001c2fe:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c301:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001c305:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001c30d:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001c315:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001c31d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c320:	83 c4 4c             	add    esp,0x4c
c001c323:	5b                   	pop    ebx
c001c324:	5e                   	pop    esi
c001c325:	5f                   	pop    edi
c001c326:	5d                   	pop    ebp
c001c327:	ff e0                	jmp    eax
c001c329:	83 ec 0c             	sub    esp,0xc
c001c32c:	68 58 01 00 00       	push   0x158
c001c331:	e8 02 2d ff ff       	call   c000f038 <operator new(unsigned long)>
c001c336:	59                   	pop    ecx
c001c337:	89 c5                	mov    ebp,eax
c001c339:	5f                   	pop    edi
c001c33a:	68 a7 30 02 c0       	push   0xc00230a7
c001c33f:	55                   	push   ebp
c001c340:	e8 d9 44 ff ff       	call   c001081e <DriverlessDevice::DriverlessDevice(char const*)>
c001c345:	58                   	pop    eax
c001c346:	5a                   	pop    edx
c001c347:	55                   	push   ebp
c001c348:	56                   	push   esi
c001c349:	e8 e4 41 ff ff       	call   c0010532 <Device::addChild(Device*)>
c001c34e:	b9 09 00 00 00       	mov    ecx,0x9
c001c353:	fc                   	cld    
c001c354:	89 df                	mov    edi,ebx
c001c356:	89 de                	mov    esi,ebx
c001c358:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001c35a:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c001c35e:	83 c4 2c             	add    esp,0x2c
c001c361:	5b                   	pop    ebx
c001c362:	5e                   	pop    esi
c001c363:	5f                   	pop    edi
c001c364:	5d                   	pop    ebp
c001c365:	e9 a2 40 ff ff       	jmp    c001040c <Device::preOpenPCI(PCIDeviceInfo)>
c001c36a:	83 c4 1c             	add    esp,0x1c
c001c36d:	5b                   	pop    ebx
c001c36e:	5e                   	pop    esi
c001c36f:	5f                   	pop    edi
c001c370:	5d                   	pop    ebp
c001c371:	c3                   	ret    

c001c372 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001c372:	55                   	push   ebp
c001c373:	57                   	push   edi
c001c374:	56                   	push   esi
c001c375:	53                   	push   ebx
c001c376:	83 ec 5c             	sub    esp,0x5c
c001c379:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001c37d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c381:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c001c385:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c001c38a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c38e:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c001c392:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c001c397:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c39b:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c001c3a0:	6a 0c                	push   0xc
c001c3a2:	55                   	push   ebp
c001c3a3:	53                   	push   ebx
c001c3a4:	57                   	push   edi
c001c3a5:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c001c3ac:	e8 03 fc ff ff       	call   c001bfb4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c3b1:	55                   	push   ebp
c001c3b2:	53                   	push   ebx
c001c3b3:	57                   	push   edi
c001c3b4:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c001c3bb:	e8 82 fc ff ff       	call   c001c042 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001c3c0:	66 89 44 24 42       	mov    WORD PTR [esp+0x42],ax
c001c3c5:	83 c4 24             	add    esp,0x24
c001c3c8:	55                   	push   ebp
c001c3c9:	53                   	push   ebx
c001c3ca:	57                   	push   edi
c001c3cb:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c001c3cf:	e8 f8 fc ff ff       	call   c001c0cc <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001c3d4:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001c3d8:	6a 3c                	push   0x3c
c001c3da:	55                   	push   ebp
c001c3db:	53                   	push   ebx
c001c3dc:	57                   	push   edi
c001c3dd:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c001c3e4:	e8 cb fb ff ff       	call   c001bfb4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c3e9:	0f b6 c4             	movzx  eax,ah
c001c3ec:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001c3f0:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001c3f4:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c001c3f8:	a1 88 43 02 c0       	mov    eax,ds:0xc0024388
c001c3fd:	83 c4 24             	add    esp,0x24
c001c400:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001c406:	83 b8 5c 21 00 00 00 	cmp    DWORD PTR [eax+0x215c],0x0
c001c40d:	74 6c                	je     c001c47b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c001c40f:	31 f6                	xor    esi,esi
c001c411:	8b 15 88 43 02 c0    	mov    edx,DWORD PTR ds:0xc0024388
c001c417:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c001c41d:	39 b2 5c 21 00 00    	cmp    DWORD PTR [edx+0x215c],esi
c001c423:	7e 56                	jle    c001c47b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c001c425:	8d 14 f2             	lea    edx,[edx+esi*8]
c001c428:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c001c42f:	39 cb                	cmp    ebx,ecx
c001c431:	75 45                	jne    c001c478 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c001c433:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c001c43a:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c001c43e:	75 38                	jne    c001c478 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c001c440:	83 ec 0c             	sub    esp,0xc
c001c443:	68 c1 30 02 c0       	push   0xc00230c1
c001c448:	e8 da 2c ff ff       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c001c44d:	8b 15 88 43 02 c0    	mov    edx,DWORD PTR ds:0xc0024388
c001c453:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c001c459:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c001c461:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c001c465:	52                   	push   edx
c001c466:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c46a:	53                   	push   ebx
c001c46b:	68 e6 30 02 c0       	push   0xc00230e6
c001c470:	e8 b2 2c ff ff       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c001c475:	83 c4 20             	add    esp,0x20
c001c478:	46                   	inc    esi
c001c479:	eb 96                	jmp    c001c411 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9f>
c001c47b:	31 d2                	xor    edx,edx
c001c47d:	83 ec 0c             	sub    esp,0xc
c001c480:	55                   	push   ebp
c001c481:	53                   	push   ebx
c001c482:	57                   	push   edi
c001c483:	52                   	push   edx
c001c484:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001c488:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001c48f:	e8 7e fc ff ff       	call   c001c112 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c494:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c001c498:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001c49c:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001c4a0:	42                   	inc    edx
c001c4a1:	83 c4 20             	add    esp,0x20
c001c4a4:	83 fa 06             	cmp    edx,0x6
c001c4a7:	75 d4                	jne    c001c47d <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x10b>
c001c4a9:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001c4ad:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c001c4b1:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c001c4b5:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c001c4b9:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001c4bd:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c001c4c1:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001c4c6:	86 e0                	xchg   al,ah
c001c4c8:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c001c4cd:	55                   	push   ebp
c001c4ce:	53                   	push   ebx
c001c4cf:	57                   	push   edi
c001c4d0:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c001c4d4:	e8 ad fb ff ff       	call   c001c086 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001c4d9:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001c4dd:	55                   	push   ebp
c001c4de:	53                   	push   ebx
c001c4df:	57                   	push   edi
c001c4e0:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001c4e7:	e8 10 fb ff ff       	call   c001bffc <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001c4ec:	83 ec 0c             	sub    esp,0xc
c001c4ef:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c001c4f4:	b9 09 00 00 00       	mov    ecx,0x9
c001c4f9:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c001c4fd:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c001c501:	fc                   	cld    
c001c502:	89 e7                	mov    edi,esp
c001c504:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001c506:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c001c50d:	e8 f0 fc ff ff       	call   c001c202 <PCI::foundDevice(PCIDeviceInfo)>
c001c512:	81 c4 8c 00 00 00    	add    esp,0x8c
c001c518:	5b                   	pop    ebx
c001c519:	5e                   	pop    esi
c001c51a:	5f                   	pop    edi
c001c51b:	5d                   	pop    ebp
c001c51c:	c3                   	ret    
c001c51d:	90                   	nop

c001c51e <PCI::checkDevice(unsigned char, unsigned char)>:
c001c51e:	55                   	push   ebp
c001c51f:	57                   	push   edi
c001c520:	56                   	push   esi
c001c521:	53                   	push   ebx
c001c522:	83 ec 0c             	sub    esp,0xc
c001c525:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001c529:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001c52e:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001c533:	6a 00                	push   0x0
c001c535:	56                   	push   esi
c001c536:	57                   	push   edi
c001c537:	55                   	push   ebp
c001c538:	e8 bf fa ff ff       	call   c001bffc <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001c53d:	6a 00                	push   0x0
c001c53f:	56                   	push   esi
c001c540:	57                   	push   edi
c001c541:	55                   	push   ebp
c001c542:	e8 2b fe ff ff       	call   c001c372 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001c547:	83 c4 20             	add    esp,0x20
c001c54a:	6a 00                	push   0x0
c001c54c:	56                   	push   esi
c001c54d:	57                   	push   edi
c001c54e:	55                   	push   ebp
c001c54f:	e8 ca fa ff ff       	call   c001c01e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001c554:	83 c4 10             	add    esp,0x10
c001c557:	84 c0                	test   al,al
c001c559:	79 27                	jns    c001c582 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001c55b:	bb 01 00 00 00       	mov    ebx,0x1
c001c560:	53                   	push   ebx
c001c561:	56                   	push   esi
c001c562:	57                   	push   edi
c001c563:	55                   	push   ebp
c001c564:	e8 93 fa ff ff       	call   c001bffc <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001c569:	83 c4 10             	add    esp,0x10
c001c56c:	66 40                	inc    ax
c001c56e:	74 0c                	je     c001c57c <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c001c570:	53                   	push   ebx
c001c571:	56                   	push   esi
c001c572:	57                   	push   edi
c001c573:	55                   	push   ebp
c001c574:	e8 f9 fd ff ff       	call   c001c372 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001c579:	83 c4 10             	add    esp,0x10
c001c57c:	43                   	inc    ebx
c001c57d:	83 fb 08             	cmp    ebx,0x8
c001c580:	75 de                	jne    c001c560 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001c582:	83 c4 0c             	add    esp,0xc
c001c585:	5b                   	pop    ebx
c001c586:	5e                   	pop    esi
c001c587:	5f                   	pop    edi
c001c588:	5d                   	pop    ebp
c001c589:	c3                   	ret    

c001c58a <PCI::detect()>:
c001c58a:	56                   	push   esi
c001c58b:	53                   	push   ebx
c001c58c:	53                   	push   ebx
c001c58d:	31 db                	xor    ebx,ebx
c001c58f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c593:	6a 00                	push   0x0
c001c595:	6a 00                	push   0x0
c001c597:	6a 00                	push   0x0
c001c599:	56                   	push   esi
c001c59a:	e8 7f fa ff ff       	call   c001c01e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001c59f:	83 c4 10             	add    esp,0x10
c001c5a2:	a8 80                	test   al,0x80
c001c5a4:	75 21                	jne    c001c5c7 <PCI::detect()+0x3d>
c001c5a6:	51                   	push   ecx
c001c5a7:	51                   	push   ecx
c001c5a8:	6a 00                	push   0x0
c001c5aa:	56                   	push   esi
c001c5ab:	e8 2e fc ff ff       	call   c001c1de <PCI::checkBus(unsigned char)>
c001c5b0:	83 c4 10             	add    esp,0x10
c001c5b3:	eb 24                	jmp    c001c5d9 <PCI::detect()+0x4f>
c001c5b5:	52                   	push   edx
c001c5b6:	52                   	push   edx
c001c5b7:	53                   	push   ebx
c001c5b8:	43                   	inc    ebx
c001c5b9:	56                   	push   esi
c001c5ba:	e8 1f fc ff ff       	call   c001c1de <PCI::checkBus(unsigned char)>
c001c5bf:	83 c4 10             	add    esp,0x10
c001c5c2:	83 fb 08             	cmp    ebx,0x8
c001c5c5:	74 12                	je     c001c5d9 <PCI::detect()+0x4f>
c001c5c7:	53                   	push   ebx
c001c5c8:	6a 00                	push   0x0
c001c5ca:	6a 00                	push   0x0
c001c5cc:	56                   	push   esi
c001c5cd:	e8 2a fa ff ff       	call   c001bffc <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001c5d2:	83 c4 10             	add    esp,0x10
c001c5d5:	66 40                	inc    ax
c001c5d7:	74 dc                	je     c001c5b5 <PCI::detect()+0x2b>
c001c5d9:	58                   	pop    eax
c001c5da:	5b                   	pop    ebx
c001c5db:	5e                   	pop    esi
c001c5dc:	c3                   	ret    
c001c5dd:	90                   	nop

c001c5de <IDE::close(int, int, void*)>:
c001c5de:	83 c8 ff             	or     eax,0xffffffff
c001c5e1:	c3                   	ret    

c001c5e2 <IDE::IDE()>:
c001c5e2:	83 ec 0c             	sub    esp,0xc
c001c5e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5e9:	83 ec 08             	sub    esp,0x8
c001c5ec:	68 30 31 02 c0       	push   0xc0023130
c001c5f1:	50                   	push   eax
c001c5f2:	e8 bd 42 ff ff       	call   c00108b4 <HardDiskController::HardDiskController(char const*)>
c001c5f7:	83 c4 10             	add    esp,0x10
c001c5fa:	ba 70 33 02 c0       	mov    edx,0xc0023370
c001c5ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c603:	89 10                	mov    DWORD PTR [eax],edx
c001c605:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c609:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001c610:	90                   	nop
c001c611:	83 c4 0c             	add    esp,0xc
c001c614:	c3                   	ret    
c001c615:	90                   	nop

c001c616 <IDE::prepareInterrupt(unsigned char)>:
c001c616:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c61b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c61f:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001c627:	c3                   	ret    

c001c628 <selectDrive(unsigned char, unsigned char)>:
c001c628:	c3                   	ret    
c001c629:	90                   	nop

c001c62a <IDE::getBase(unsigned char)>:
c001c62a:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001c62f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c633:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001c63b:	c3                   	ret    

c001c63c <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001c63c:	55                   	push   ebp
c001c63d:	57                   	push   edi
c001c63e:	56                   	push   esi
c001c63f:	53                   	push   ebx
c001c640:	83 ec 1c             	sub    esp,0x1c
c001c643:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001c647:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001c64b:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001c64e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001c652:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c656:	80 f9 03             	cmp    cl,0x3
c001c659:	77 51                	ja     c001c6ac <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c001c65b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c65f:	0f b6 f2             	movzx  esi,dl
c001c662:	0f b6 db             	movzx  ebx,bl
c001c665:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001c668:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c001c66c:	83 ca 80             	or     edx,0xffffff80
c001c66f:	0f b6 d2             	movzx  edx,dl
c001c672:	52                   	push   edx
c001c673:	6a 0c                	push   0xc
c001c675:	56                   	push   esi
c001c676:	57                   	push   edi
c001c677:	e8 c0 ff ff ff       	call   c001c63c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c67c:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001c681:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c685:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001c689:	ee                   	out    dx,al
c001c68a:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001c68f:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001c693:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001c697:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001c69b:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001c6a3:	83 c4 2c             	add    esp,0x2c
c001c6a6:	5b                   	pop    ebx
c001c6a7:	5e                   	pop    esi
c001c6a8:	5f                   	pop    edi
c001c6a9:	5d                   	pop    ebp
c001c6aa:	eb 90                	jmp    c001c63c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c6ac:	80 fb 07             	cmp    bl,0x7
c001c6af:	77 12                	ja     c001c6c3 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c001c6b1:	0f b6 d2             	movzx  edx,dl
c001c6b4:	0f b6 db             	movzx  ebx,bl
c001c6b7:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c001c6bf:	89 da                	mov    edx,ebx
c001c6c1:	eb 2f                	jmp    c001c6f2 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001c6c3:	80 fb 0d             	cmp    bl,0xd
c001c6c6:	77 13                	ja     c001c6db <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c001c6c8:	0f b6 d2             	movzx  edx,dl
c001c6cb:	0f b6 db             	movzx  ebx,bl
c001c6ce:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001c6d5:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001c6d9:	eb 17                	jmp    c001c6f2 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001c6db:	80 fb 15             	cmp    bl,0x15
c001c6de:	77 13                	ja     c001c6f3 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001c6e0:	0f b6 d2             	movzx  edx,dl
c001c6e3:	0f b6 db             	movzx  ebx,bl
c001c6e6:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001c6ee:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001c6f2:	ee                   	out    dx,al
c001c6f3:	83 c4 1c             	add    esp,0x1c
c001c6f6:	5b                   	pop    ebx
c001c6f7:	5e                   	pop    esi
c001c6f8:	5f                   	pop    edi
c001c6f9:	5d                   	pop    ebp
c001c6fa:	c3                   	ret    
c001c6fb:	90                   	nop

c001c6fc <IDE::read(unsigned char, unsigned char)>:
c001c6fc:	55                   	push   ebp
c001c6fd:	57                   	push   edi
c001c6fe:	56                   	push   esi
c001c6ff:	53                   	push   ebx
c001c700:	83 ec 1c             	sub    esp,0x1c
c001c703:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001c707:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001c70b:	8d 43 f8             	lea    eax,[ebx-0x8]
c001c70e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001c712:	3c 03                	cmp    al,0x3
c001c714:	77 43                	ja     c001c759 <IDE::read(unsigned char, unsigned char)+0x5d>
c001c716:	0f b6 f2             	movzx  esi,dl
c001c719:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001c71c:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c001c720:	83 c8 80             	or     eax,0xffffff80
c001c723:	0f b6 c0             	movzx  eax,al
c001c726:	50                   	push   eax
c001c727:	6a 0c                	push   0xc
c001c729:	56                   	push   esi
c001c72a:	57                   	push   edi
c001c72b:	e8 0c ff ff ff       	call   c001c63c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c730:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c001c735:	0f b6 c3             	movzx  eax,bl
c001c738:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c001c73c:	ec                   	in     al,dx
c001c73d:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001c741:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001c746:	52                   	push   edx
c001c747:	6a 0c                	push   0xc
c001c749:	56                   	push   esi
c001c74a:	57                   	push   edi
c001c74b:	e8 ec fe ff ff       	call   c001c63c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c750:	83 c4 20             	add    esp,0x20
c001c753:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001c757:	eb 49                	jmp    c001c7a2 <IDE::read(unsigned char, unsigned char)+0xa6>
c001c759:	80 fb 07             	cmp    bl,0x7
c001c75c:	77 12                	ja     c001c770 <IDE::read(unsigned char, unsigned char)+0x74>
c001c75e:	0f b6 d2             	movzx  edx,dl
c001c761:	0f b6 c3             	movzx  eax,bl
c001c764:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c001c76c:	89 c2                	mov    edx,eax
c001c76e:	eb 31                	jmp    c001c7a1 <IDE::read(unsigned char, unsigned char)+0xa5>
c001c770:	80 fb 0d             	cmp    bl,0xd
c001c773:	77 13                	ja     c001c788 <IDE::read(unsigned char, unsigned char)+0x8c>
c001c775:	0f b6 d2             	movzx  edx,dl
c001c778:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c001c77f:	0f b6 d3             	movzx  edx,bl
c001c782:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001c786:	eb 19                	jmp    c001c7a1 <IDE::read(unsigned char, unsigned char)+0xa5>
c001c788:	31 c0                	xor    eax,eax
c001c78a:	80 fb 15             	cmp    bl,0x15
c001c78d:	77 13                	ja     c001c7a2 <IDE::read(unsigned char, unsigned char)+0xa6>
c001c78f:	0f b6 d2             	movzx  edx,dl
c001c792:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c001c79a:	0f b6 d3             	movzx  edx,bl
c001c79d:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001c7a1:	ec                   	in     al,dx
c001c7a2:	83 c4 1c             	add    esp,0x1c
c001c7a5:	5b                   	pop    ebx
c001c7a6:	5e                   	pop    esi
c001c7a7:	5f                   	pop    edi
c001c7a8:	5d                   	pop    ebp
c001c7a9:	c3                   	ret    

c001c7aa <IDE::waitInterrupt(unsigned char)>:
c001c7aa:	55                   	push   ebp
c001c7ab:	57                   	push   edi
c001c7ac:	56                   	push   esi
c001c7ad:	53                   	push   ebx
c001c7ae:	31 db                	xor    ebx,ebx
c001c7b0:	83 ec 0c             	sub    esp,0xc
c001c7b3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001c7b7:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001c7bc:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001c7c4:	89 e8                	mov    eax,ebp
c001c7c6:	84 c0                	test   al,al
c001c7c8:	75 34                	jne    c001c7fe <IDE::waitInterrupt(unsigned char)+0x54>
c001c7ca:	52                   	push   edx
c001c7cb:	6a 0c                	push   0xc
c001c7cd:	56                   	push   esi
c001c7ce:	57                   	push   edi
c001c7cf:	e8 28 ff ff ff       	call   c001c6fc <IDE::read(unsigned char, unsigned char)>
c001c7d4:	83 c4 10             	add    esp,0x10
c001c7d7:	a8 01                	test   al,0x1
c001c7d9:	75 2b                	jne    c001c806 <IDE::waitInterrupt(unsigned char)+0x5c>
c001c7db:	f6 c3 04             	test   bl,0x4
c001c7de:	75 16                	jne    c001c7f6 <IDE::waitInterrupt(unsigned char)+0x4c>
c001c7e0:	83 fb 32             	cmp    ebx,0x32
c001c7e3:	7e 11                	jle    c001c7f6 <IDE::waitInterrupt(unsigned char)+0x4c>
c001c7e5:	50                   	push   eax
c001c7e6:	50                   	push   eax
c001c7e7:	6a 00                	push   0x0
c001c7e9:	68 80 96 98 00       	push   0x989680
c001c7ee:	e8 99 c5 ff ff       	call   c0018d8c <nanoSleep(unsigned long long)>
c001c7f3:	83 c4 10             	add    esp,0x10
c001c7f6:	83 fb 3c             	cmp    ebx,0x3c
c001c7f9:	74 0b                	je     c001c806 <IDE::waitInterrupt(unsigned char)+0x5c>
c001c7fb:	43                   	inc    ebx
c001c7fc:	eb be                	jmp    c001c7bc <IDE::waitInterrupt(unsigned char)+0x12>
c001c7fe:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001c806:	83 c4 0c             	add    esp,0xc
c001c809:	89 e8                	mov    eax,ebp
c001c80b:	5b                   	pop    ebx
c001c80c:	5e                   	pop    esi
c001c80d:	5f                   	pop    edi
c001c80e:	5d                   	pop    ebp
c001c80f:	c3                   	ret    

c001c810 <ideChannel0IRQHandler(regs*, void*)>:
c001c810:	83 ec 10             	sub    esp,0x10
c001c813:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c817:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001c81e:	6a 07                	push   0x7
c001c820:	6a 00                	push   0x0
c001c822:	50                   	push   eax
c001c823:	e8 d4 fe ff ff       	call   c001c6fc <IDE::read(unsigned char, unsigned char)>
c001c828:	83 c4 1c             	add    esp,0x1c
c001c82b:	c3                   	ret    

c001c82c <ideChannel1IRQHandler(regs*, void*)>:
c001c82c:	83 ec 10             	sub    esp,0x10
c001c82f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c833:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001c83a:	6a 07                	push   0x7
c001c83c:	6a 01                	push   0x1
c001c83e:	50                   	push   eax
c001c83f:	e8 b8 fe ff ff       	call   c001c6fc <IDE::read(unsigned char, unsigned char)>
c001c844:	83 c4 1c             	add    esp,0x1c
c001c847:	c3                   	ret    

c001c848 <IDE::enableIRQs(unsigned char, bool)>:
c001c848:	57                   	push   edi
c001c849:	56                   	push   esi
c001c84a:	be 04 00 00 00       	mov    esi,0x4
c001c84f:	53                   	push   ebx
c001c850:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001c855:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c859:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c001c85e:	0f 94 c0             	sete   al
c001c861:	d1 e0                	shl    eax,1
c001c863:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c001c86a:	0f b6 c0             	movzx  eax,al
c001c86d:	50                   	push   eax
c001c86e:	6a 0c                	push   0xc
c001c870:	57                   	push   edi
c001c871:	53                   	push   ebx
c001c872:	e8 c5 fd ff ff       	call   c001c63c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c877:	83 c4 10             	add    esp,0x10
c001c87a:	50                   	push   eax
c001c87b:	6a 0c                	push   0xc
c001c87d:	57                   	push   edi
c001c87e:	53                   	push   ebx
c001c87f:	e8 78 fe ff ff       	call   c001c6fc <IDE::read(unsigned char, unsigned char)>
c001c884:	83 c4 10             	add    esp,0x10
c001c887:	4e                   	dec    esi
c001c888:	75 f0                	jne    c001c87a <IDE::enableIRQs(unsigned char, bool)+0x32>
c001c88a:	5b                   	pop    ebx
c001c88b:	5e                   	pop    esi
c001c88c:	5f                   	pop    edi
c001c88d:	c3                   	ret    

c001c88e <IDE::open(int, int, void*)>:
c001c88e:	55                   	push   ebp
c001c88f:	57                   	push   edi
c001c890:	56                   	push   esi
c001c891:	53                   	push   ebx
c001c892:	83 ec 1c             	sub    esp,0x1c
c001c895:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001c899:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001c8a2:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001c8ab:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001c8b2:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001c8b9:	0f 85 b0 02 00 00    	jne    c001cb6f <IDE::open(int, int, void*)+0x2e1>
c001c8bf:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001c8c5:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c001c8c9:	83 e0 7f             	and    eax,0x7f
c001c8cc:	3c 05                	cmp    al,0x5
c001c8ce:	74 04                	je     c001c8d4 <IDE::open(int, int, void*)+0x46>
c001c8d0:	3c 0f                	cmp    al,0xf
c001c8d2:	75 32                	jne    c001c906 <IDE::open(int, int, void*)+0x78>
c001c8d4:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001c8da:	83 e0 fc             	and    eax,0xfffffffc
c001c8dd:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001c8e4:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001c8ea:	83 e0 fc             	and    eax,0xfffffffc
c001c8ed:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001c8f4:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001c8fa:	83 e0 fc             	and    eax,0xfffffffc
c001c8fd:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001c904:	eb 14                	jmp    c001c91a <IDE::open(int, int, void*)+0x8c>
c001c906:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001c910:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001c91a:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001c921:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001c928:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c92c:	89 c6                	mov    esi,eax
c001c92e:	bf f8 0c 00 00       	mov    edi,0xcf8
c001c933:	c1 e6 10             	shl    esi,0x10
c001c936:	89 e8                	mov    eax,ebp
c001c938:	89 fa                	mov    edx,edi
c001c93a:	c1 e0 0b             	shl    eax,0xb
c001c93d:	09 f0                	or     eax,esi
c001c93f:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c001c946:	c1 e6 08             	shl    esi,0x8
c001c949:	09 c6                	or     esi,eax
c001c94b:	89 f0                	mov    eax,esi
c001c94d:	0d 08 00 00 80       	or     eax,0x80000008
c001c952:	ef                   	out    dx,eax
c001c953:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001c958:	89 ca                	mov    edx,ecx
c001c95a:	ed                   	in     eax,dx
c001c95b:	c1 e8 10             	shr    eax,0x10
c001c95e:	3d ff ff 00 00       	cmp    eax,0xffff
c001c963:	0f 84 f5 00 00 00    	je     c001ca5e <IDE::open(int, int, void*)+0x1d0>
c001c969:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001c96f:	89 fa                	mov    edx,edi
c001c971:	89 f0                	mov    eax,esi
c001c973:	ef                   	out    dx,eax
c001c974:	b0 fe                	mov    al,0xfe
c001c976:	89 ca                	mov    edx,ecx
c001c978:	ee                   	out    dx,al
c001c979:	89 f0                	mov    eax,esi
c001c97b:	89 fa                	mov    edx,edi
c001c97d:	ef                   	out    dx,eax
c001c97e:	89 ca                	mov    edx,ecx
c001c980:	ed                   	in     eax,dx
c001c981:	3c fe                	cmp    al,0xfe
c001c983:	0f 85 a9 00 00 00    	jne    c001ca32 <IDE::open(int, int, void*)+0x1a4>
c001c989:	8b 15 88 43 02 c0    	mov    edx,DWORD PTR ds:0xc0024388
c001c98f:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c001c996:	74 33                	je     c001c9cb <IDE::open(int, int, void*)+0x13d>
c001c998:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001c99e:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001c9a2:	40                   	inc    eax
c001c9a3:	83 ec 0c             	sub    esp,0xc
c001c9a6:	0f b6 c0             	movzx  eax,al
c001c9a9:	50                   	push   eax
c001c9aa:	55                   	push   ebp
c001c9ab:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c9af:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c001c9b5:	51                   	push   ecx
c001c9b6:	e8 7b 73 ff ff       	call   c0013d36 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001c9bb:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001c9c0:	83 c4 1c             	add    esp,0x1c
c001c9c3:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001c9c9:	eb 0a                	jmp    c001c9d5 <IDE::open(int, int, void*)+0x147>
c001c9cb:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001c9d5:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001c9dc:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001c9e3:	c1 e1 10             	shl    ecx,0x10
c001c9e6:	c1 e0 08             	shl    eax,0x8
c001c9e9:	bf f8 0c 00 00       	mov    edi,0xcf8
c001c9ee:	09 c1                	or     ecx,eax
c001c9f0:	89 fa                	mov    edx,edi
c001c9f2:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001c9f9:	c1 e0 0b             	shl    eax,0xb
c001c9fc:	09 c1                	or     ecx,eax
c001c9fe:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001ca04:	89 c8                	mov    eax,ecx
c001ca06:	ef                   	out    dx,eax
c001ca07:	be fc 0c 00 00       	mov    esi,0xcfc
c001ca0c:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001ca12:	89 f2                	mov    edx,esi
c001ca14:	ee                   	out    dx,al
c001ca15:	89 c8                	mov    eax,ecx
c001ca17:	89 fa                	mov    edx,edi
c001ca19:	ef                   	out    dx,eax
c001ca1a:	89 f2                	mov    edx,esi
c001ca1c:	ed                   	in     eax,dx
c001ca1d:	0f b6 c0             	movzx  eax,al
c001ca20:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001ca26:	74 46                	je     c001ca6e <IDE::open(int, int, void*)+0x1e0>
c001ca28:	83 ec 0c             	sub    esp,0xc
c001ca2b:	68 48 31 02 c0       	push   0xc0023148
c001ca30:	eb 34                	jmp    c001ca66 <IDE::open(int, int, void*)+0x1d8>
c001ca32:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001ca3b:	75 17                	jne    c001ca54 <IDE::open(int, int, void*)+0x1c6>
c001ca3d:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c001ca42:	74 07                	je     c001ca4b <IDE::open(int, int, void*)+0x1bd>
c001ca44:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c001ca49:	75 09                	jne    c001ca54 <IDE::open(int, int, void*)+0x1c6>
c001ca4b:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001ca52:	eb 1a                	jmp    c001ca6e <IDE::open(int, int, void*)+0x1e0>
c001ca54:	83 ec 0c             	sub    esp,0xc
c001ca57:	68 50 31 02 c0       	push   0xc0023150
c001ca5c:	eb 08                	jmp    c001ca66 <IDE::open(int, int, void*)+0x1d8>
c001ca5e:	83 ec 0c             	sub    esp,0xc
c001ca61:	68 81 31 02 c0       	push   0xc0023181
c001ca66:	e8 85 8e ff ff       	call   c00158f0 <Krnl::panic(char const*)>
c001ca6b:	83 c4 10             	add    esp,0x10
c001ca6e:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c001ca75:	79 1a                	jns    c001ca91 <IDE::open(int, int, void*)+0x203>
c001ca77:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001ca7d:	83 e0 fc             	and    eax,0xfffffffc
c001ca80:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001ca87:	83 c0 08             	add    eax,0x8
c001ca8a:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001ca91:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001ca97:	89 c2                	mov    edx,eax
c001ca99:	83 e2 0f             	and    edx,0xf
c001ca9c:	66 83 fa 08          	cmp    dx,0x8
c001caa0:	75 0a                	jne    c001caac <IDE::open(int, int, void*)+0x21e>
c001caa2:	83 e8 02             	sub    eax,0x2
c001caa5:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001caac:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001cab2:	89 c2                	mov    edx,eax
c001cab4:	83 e2 0f             	and    edx,0xf
c001cab7:	66 83 fa 08          	cmp    dx,0x8
c001cabb:	75 0a                	jne    c001cac7 <IDE::open(int, int, void*)+0x239>
c001cabd:	83 e8 02             	sub    eax,0x2
c001cac0:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001cac7:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001cace:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001cad5:	89 d0                	mov    eax,edx
c001cad7:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001cada:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001cade:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001cae2:	8d 4a 01             	lea    ecx,[edx+0x1]
c001cae5:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001caea:	0f b6 c9             	movzx  ecx,cl
c001caed:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001caf4:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001caf7:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001cafb:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001caff:	8d 50 02             	lea    edx,[eax+0x2]
c001cb02:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001cb07:	0f b6 d2             	movzx  edx,dl
c001cb0a:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001cb10:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001cb13:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001cb17:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001cb1b:	8d 48 03             	lea    ecx,[eax+0x3]
c001cb1e:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001cb23:	0f b6 c9             	movzx  ecx,cl
c001cb26:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001cb2c:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001cb2f:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001cb33:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001cb37:	8d 50 04             	lea    edx,[eax+0x4]
c001cb3a:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001cb40:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001cb45:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001cb4c:	66 85 f6             	test   si,si
c001cb4f:	74 3e                	je     c001cb8f <IDE::open(int, int, void*)+0x301>
c001cb51:	0f b6 d2             	movzx  edx,dl
c001cb54:	83 c0 05             	add    eax,0x5
c001cb57:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001cb5a:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001cb5e:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001cb62:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001cb68:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001cb6d:	eb 20                	jmp    c001cb8f <IDE::open(int, int, void*)+0x301>
c001cb6f:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001cb79:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001cb83:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001cb8a:	e9 02 ff ff ff       	jmp    c001ca91 <IDE::open(int, int, void*)+0x203>
c001cb8f:	52                   	push   edx
c001cb90:	52                   	push   edx
c001cb91:	6a 00                	push   0x0
c001cb93:	53                   	push   ebx
c001cb94:	e8 7d fa ff ff       	call   c001c616 <IDE::prepareInterrupt(unsigned char)>
c001cb99:	59                   	pop    ecx
c001cb9a:	5e                   	pop    esi
c001cb9b:	6a 01                	push   0x1
c001cb9d:	53                   	push   ebx
c001cb9e:	e8 73 fa ff ff       	call   c001c616 <IDE::prepareInterrupt(unsigned char)>
c001cba3:	83 c4 0c             	add    esp,0xc
c001cba6:	6a 00                	push   0x0
c001cba8:	6a 00                	push   0x0
c001cbaa:	53                   	push   ebx
c001cbab:	e8 98 fc ff ff       	call   c001c848 <IDE::enableIRQs(unsigned char, bool)>
c001cbb0:	83 c4 0c             	add    esp,0xc
c001cbb3:	6a 00                	push   0x0
c001cbb5:	6a 01                	push   0x1
c001cbb7:	53                   	push   ebx
c001cbb8:	e8 8b fc ff ff       	call   c001c848 <IDE::enableIRQs(unsigned char, bool)>
c001cbbd:	83 c4 10             	add    esp,0x10
c001cbc0:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001cbc7:	74 40                	je     c001cc09 <IDE::open(int, int, void*)+0x37b>
c001cbc9:	83 ec 0c             	sub    esp,0xc
c001cbcc:	68 ab 31 02 c0       	push   0xc00231ab
c001cbd1:	e8 51 25 ff ff       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c001cbd6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cbd9:	6a 01                	push   0x1
c001cbdb:	68 10 c8 01 c0       	push   0xc001c810
c001cbe0:	6a 0e                	push   0xe
c001cbe2:	53                   	push   ebx
c001cbe3:	e8 9e 38 ff ff       	call   c0010486 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001cbe8:	83 c4 14             	add    esp,0x14
c001cbeb:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001cbf1:	53                   	push   ebx
c001cbf2:	6a 01                	push   0x1
c001cbf4:	68 2c c8 01 c0       	push   0xc001c82c
c001cbf9:	6a 0f                	push   0xf
c001cbfb:	53                   	push   ebx
c001cbfc:	e8 85 38 ff ff       	call   c0010486 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001cc01:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001cc07:	eb 4a                	jmp    c001cc53 <IDE::open(int, int, void*)+0x3c5>
c001cc09:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001cc13:	50                   	push   eax
c001cc14:	6a 0f                	push   0xf
c001cc16:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001cc1c:	68 c7 31 02 c0       	push   0xc00231c7
c001cc21:	e8 01 25 ff ff       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c001cc26:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cc29:	6a 00                	push   0x0
c001cc2b:	68 10 c8 01 c0       	push   0xc001c810
c001cc30:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001cc36:	53                   	push   ebx
c001cc37:	e8 4a 38 ff ff       	call   c0010486 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001cc3c:	83 c4 14             	add    esp,0x14
c001cc3f:	53                   	push   ebx
c001cc40:	6a 00                	push   0x0
c001cc42:	68 2c c8 01 c0       	push   0xc001c82c
c001cc47:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001cc4d:	53                   	push   ebx
c001cc4e:	e8 33 38 ff ff       	call   c0010486 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001cc53:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cc55:	83 c4 20             	add    esp,0x20
c001cc58:	83 ec 0c             	sub    esp,0xc
c001cc5b:	53                   	push   ebx
c001cc5c:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001cc5f:	83 c4 0c             	add    esp,0xc
c001cc62:	6a 07                	push   0x7
c001cc64:	6a 00                	push   0x0
c001cc66:	53                   	push   ebx
c001cc67:	e8 90 fa ff ff       	call   c001c6fc <IDE::read(unsigned char, unsigned char)>
c001cc6c:	83 c4 0c             	add    esp,0xc
c001cc6f:	6a 07                	push   0x7
c001cc71:	6a 01                	push   0x1
c001cc73:	53                   	push   ebx
c001cc74:	e8 83 fa ff ff       	call   c001c6fc <IDE::read(unsigned char, unsigned char)>
c001cc79:	83 c4 0c             	add    esp,0xc
c001cc7c:	6a 01                	push   0x1
c001cc7e:	6a 00                	push   0x0
c001cc80:	53                   	push   ebx
c001cc81:	e8 c2 fb ff ff       	call   c001c848 <IDE::enableIRQs(unsigned char, bool)>
c001cc86:	83 c4 0c             	add    esp,0xc
c001cc89:	6a 01                	push   0x1
c001cc8b:	6a 01                	push   0x1
c001cc8d:	53                   	push   ebx
c001cc8e:	e8 b5 fb ff ff       	call   c001c848 <IDE::enableIRQs(unsigned char, bool)>
c001cc93:	83 c4 2c             	add    esp,0x2c
c001cc96:	31 c0                	xor    eax,eax
c001cc98:	5b                   	pop    ebx
c001cc99:	5e                   	pop    esi
c001cc9a:	5f                   	pop    edi
c001cc9b:	5d                   	pop    ebp
c001cc9c:	c3                   	ret    
c001cc9d:	90                   	nop

c001cc9e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001cc9e:	55                   	push   ebp
c001cc9f:	57                   	push   edi
c001cca0:	56                   	push   esi
c001cca1:	53                   	push   ebx
c001cca2:	83 ec 1c             	sub    esp,0x1c
c001cca5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001cca9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001ccad:	8d 50 f8             	lea    edx,[eax-0x8]
c001ccb0:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001ccb4:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001ccb8:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001ccbc:	80 fa 03             	cmp    dl,0x3
c001ccbf:	77 5d                	ja     c001cd1e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c001ccc1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001ccc5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ccc9:	0f b6 db             	movzx  ebx,bl
c001cccc:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001cccf:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c001ccd3:	83 ca 80             	or     edx,0xffffff80
c001ccd6:	0f b6 d2             	movzx  edx,dl
c001ccd9:	52                   	push   edx
c001ccda:	6a 0c                	push   0xc
c001ccdc:	53                   	push   ebx
c001ccdd:	56                   	push   esi
c001ccde:	e8 59 f9 ff ff       	call   c001c63c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cce3:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001cce8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ccec:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001ccf0:	0f b6 c0             	movzx  eax,al
c001ccf3:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c001ccf7:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001ccf9:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001ccfe:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001cd02:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001cd06:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001cd0a:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001cd12:	83 c4 2c             	add    esp,0x2c
c001cd15:	5b                   	pop    ebx
c001cd16:	5e                   	pop    esi
c001cd17:	5f                   	pop    edi
c001cd18:	5d                   	pop    ebp
c001cd19:	e9 1e f9 ff ff       	jmp    c001c63c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cd1e:	3c 07                	cmp    al,0x7
c001cd20:	77 10                	ja     c001cd32 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c001cd22:	0f b6 db             	movzx  ebx,bl
c001cd25:	0f b6 d0             	movzx  edx,al
c001cd28:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c001cd30:	eb 2d                	jmp    c001cd5f <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001cd32:	3c 0d                	cmp    al,0xd
c001cd34:	77 13                	ja     c001cd49 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c001cd36:	0f b6 db             	movzx  ebx,bl
c001cd39:	0f b6 c0             	movzx  eax,al
c001cd3c:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c001cd43:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c001cd47:	eb 16                	jmp    c001cd5f <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001cd49:	3c 15                	cmp    al,0x15
c001cd4b:	77 14                	ja     c001cd61 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c001cd4d:	0f b6 db             	movzx  ebx,bl
c001cd50:	0f b6 c0             	movzx  eax,al
c001cd53:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c001cd5b:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c001cd5f:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001cd61:	83 c4 1c             	add    esp,0x1c
c001cd64:	5b                   	pop    ebx
c001cd65:	5e                   	pop    esi
c001cd66:	5f                   	pop    edi
c001cd67:	5d                   	pop    ebp
c001cd68:	c3                   	ret    
c001cd69:	90                   	nop

c001cd6a <IDE::detect()>:
c001cd6a:	55                   	push   ebp
c001cd6b:	57                   	push   edi
c001cd6c:	56                   	push   esi
c001cd6d:	53                   	push   ebx
c001cd6e:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001cd74:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001cd7b:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001cd82:	0f 85 be 02 00 00    	jne    c001d046 <IDE::detect()+0x2dc>
c001cd88:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001cd8f:	31 f6                	xor    esi,esi
c001cd91:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001cd99:	31 ed                	xor    ebp,ebp
c001cd9b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cd9f:	c1 e0 06             	shl    eax,0x6
c001cda2:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001cdaa:	89 e8                	mov    eax,ebp
c001cdac:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001cdb0:	c1 e0 04             	shl    eax,0x4
c001cdb3:	83 c8 a0             	or     eax,0xffffffa0
c001cdb6:	0f b6 c0             	movzx  eax,al
c001cdb9:	50                   	push   eax
c001cdba:	6a 06                	push   0x6
c001cdbc:	56                   	push   esi
c001cdbd:	53                   	push   ebx
c001cdbe:	e8 79 f8 ff ff       	call   c001c63c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cdc3:	83 c4 0c             	add    esp,0xc
c001cdc6:	6a 0c                	push   0xc
c001cdc8:	56                   	push   esi
c001cdc9:	53                   	push   ebx
c001cdca:	e8 2d f9 ff ff       	call   c001c6fc <IDE::read(unsigned char, unsigned char)>
c001cdcf:	83 c4 0c             	add    esp,0xc
c001cdd2:	6a 0c                	push   0xc
c001cdd4:	56                   	push   esi
c001cdd5:	53                   	push   ebx
c001cdd6:	e8 21 f9 ff ff       	call   c001c6fc <IDE::read(unsigned char, unsigned char)>
c001cddb:	83 c4 0c             	add    esp,0xc
c001cdde:	6a 0c                	push   0xc
c001cde0:	56                   	push   esi
c001cde1:	53                   	push   ebx
c001cde2:	e8 15 f9 ff ff       	call   c001c6fc <IDE::read(unsigned char, unsigned char)>
c001cde7:	83 c4 0c             	add    esp,0xc
c001cdea:	6a 0c                	push   0xc
c001cdec:	56                   	push   esi
c001cded:	53                   	push   ebx
c001cdee:	e8 09 f9 ff ff       	call   c001c6fc <IDE::read(unsigned char, unsigned char)>
c001cdf3:	68 ec 00 00 00       	push   0xec
c001cdf8:	6a 07                	push   0x7
c001cdfa:	56                   	push   esi
c001cdfb:	53                   	push   ebx
c001cdfc:	e8 3b f8 ff ff       	call   c001c63c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ce01:	83 c4 1c             	add    esp,0x1c
c001ce04:	6a 0c                	push   0xc
c001ce06:	56                   	push   esi
c001ce07:	53                   	push   ebx
c001ce08:	e8 ef f8 ff ff       	call   c001c6fc <IDE::read(unsigned char, unsigned char)>
c001ce0d:	83 c4 0c             	add    esp,0xc
c001ce10:	6a 0c                	push   0xc
c001ce12:	56                   	push   esi
c001ce13:	53                   	push   ebx
c001ce14:	e8 e3 f8 ff ff       	call   c001c6fc <IDE::read(unsigned char, unsigned char)>
c001ce19:	83 c4 0c             	add    esp,0xc
c001ce1c:	6a 0c                	push   0xc
c001ce1e:	56                   	push   esi
c001ce1f:	53                   	push   ebx
c001ce20:	e8 d7 f8 ff ff       	call   c001c6fc <IDE::read(unsigned char, unsigned char)>
c001ce25:	83 c4 0c             	add    esp,0xc
c001ce28:	6a 0c                	push   0xc
c001ce2a:	56                   	push   esi
c001ce2b:	53                   	push   ebx
c001ce2c:	e8 cb f8 ff ff       	call   c001c6fc <IDE::read(unsigned char, unsigned char)>
c001ce31:	83 c4 0c             	add    esp,0xc
c001ce34:	6a 0c                	push   0xc
c001ce36:	56                   	push   esi
c001ce37:	53                   	push   ebx
c001ce38:	e8 bf f8 ff ff       	call   c001c6fc <IDE::read(unsigned char, unsigned char)>
c001ce3d:	83 c4 10             	add    esp,0x10
c001ce40:	84 c0                	test   al,al
c001ce42:	0f 84 8b 01 00 00    	je     c001cfd3 <IDE::detect()+0x269>
c001ce48:	31 ff                	xor    edi,edi
c001ce4a:	50                   	push   eax
c001ce4b:	6a 0c                	push   0xc
c001ce4d:	56                   	push   esi
c001ce4e:	53                   	push   ebx
c001ce4f:	e8 a8 f8 ff ff       	call   c001c6fc <IDE::read(unsigned char, unsigned char)>
c001ce54:	83 c4 10             	add    esp,0x10
c001ce57:	a8 01                	test   al,0x1
c001ce59:	0f 85 8e 01 00 00    	jne    c001cfed <IDE::detect()+0x283>
c001ce5f:	84 c0                	test   al,al
c001ce61:	78 04                	js     c001ce67 <IDE::detect()+0xfd>
c001ce63:	a8 08                	test   al,0x8
c001ce65:	75 27                	jne    c001ce8e <IDE::detect()+0x124>
c001ce67:	47                   	inc    edi
c001ce68:	81 ff 17 01 00 00    	cmp    edi,0x117
c001ce6e:	7e da                	jle    c001ce4a <IDE::detect()+0xe0>
c001ce70:	50                   	push   eax
c001ce71:	50                   	push   eax
c001ce72:	6a 00                	push   0x0
c001ce74:	68 40 4b 4c 00       	push   0x4c4b40
c001ce79:	e8 0e bf ff ff       	call   c0018d8c <nanoSleep(unsigned long long)>
c001ce7e:	83 c4 10             	add    esp,0x10
c001ce81:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001ce87:	75 c1                	jne    c001ce4a <IDE::detect()+0xe0>
c001ce89:	e9 5f 01 00 00       	jmp    c001cfed <IDE::detect()+0x283>
c001ce8e:	31 c9                	xor    ecx,ecx
c001ce90:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001ce94:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001ce98:	83 ec 0c             	sub    esp,0xc
c001ce9b:	68 80 00 00 00       	push   0x80
c001cea0:	57                   	push   edi
c001cea1:	6a 00                	push   0x0
c001cea3:	56                   	push   esi
c001cea4:	53                   	push   ebx
c001cea5:	e8 f4 fd ff ff       	call   c001cc9e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001ceaa:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001ceaf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ceb3:	89 d1                	mov    ecx,edx
c001ceb5:	c1 e0 06             	shl    eax,0x6
c001ceb8:	01 d8                	add    eax,ebx
c001ceba:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001cec1:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001cec8:	89 f2                	mov    edx,esi
c001ceca:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001ced0:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001ced4:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001ceda:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001cede:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001cee5:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001ceed:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001cef4:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001cefc:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001cf02:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001cf09:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001cf0f:	8d 54 24 58          	lea    edx,[esp+0x58]
c001cf13:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001cf17:	83 c4 20             	add    esp,0x20
c001cf1a:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001cf1d:	83 c0 02             	add    eax,0x2
c001cf20:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001cf26:	83 c7 02             	add    edi,0x2
c001cf29:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001cf2c:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001cf32:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c001cf36:	75 e2                	jne    c001cf1a <IDE::detect()+0x1b0>
c001cf38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cf3c:	c1 e0 06             	shl    eax,0x6
c001cf3f:	01 d8                	add    eax,ebx
c001cf41:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c001cf47:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001cf4e:	66 c1 ea 09          	shr    dx,0x9
c001cf52:	83 e2 01             	and    edx,0x1
c001cf55:	84 c9                	test   cl,cl
c001cf57:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001cf5d:	75 2f                	jne    c001cf8e <IDE::detect()+0x224>
c001cf5f:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c001cf65:	85 c0                	test   eax,eax
c001cf67:	74 66                	je     c001cfcf <IDE::detect()+0x265>
c001cf69:	50                   	push   eax
c001cf6a:	55                   	push   ebp
c001cf6b:	56                   	push   esi
c001cf6c:	68 e3 31 02 c0       	push   0xc00231e3
c001cf71:	e8 b1 21 ff ff       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c001cf76:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001cf7d:	e8 b6 20 ff ff       	call   c000f038 <operator new(unsigned long)>
c001cf82:	89 c7                	mov    edi,eax
c001cf84:	89 04 24             	mov    DWORD PTR [esp],eax
c001cf87:	e8 e8 02 00 00       	call   c001d274 <ATA::ATA()>
c001cf8c:	eb 28                	jmp    c001cfb6 <IDE::detect()+0x24c>
c001cf8e:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c001cf94:	55                   	push   ebp
c001cf95:	56                   	push   esi
c001cf96:	68 12 32 02 c0       	push   0xc0023212
c001cf9b:	e8 87 21 ff ff       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c001cfa0:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c001cfa7:	e8 8c 20 ff ff       	call   c000f038 <operator new(unsigned long)>
c001cfac:	89 c7                	mov    edi,eax
c001cfae:	89 04 24             	mov    DWORD PTR [esp],eax
c001cfb1:	e8 ee 08 00 00       	call   c001d8a4 <ATAPI::ATAPI()>
c001cfb6:	5a                   	pop    edx
c001cfb7:	59                   	pop    ecx
c001cfb8:	57                   	push   edi
c001cfb9:	53                   	push   ebx
c001cfba:	e8 73 35 ff ff       	call   c0010532 <Device::addChild(Device*)>
c001cfbf:	8b 07                	mov    eax,DWORD PTR [edi]
c001cfc1:	53                   	push   ebx
c001cfc2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cfc6:	6a 00                	push   0x0
c001cfc8:	57                   	push   edi
c001cfc9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001cfcc:	83 c4 20             	add    esp,0x20
c001cfcf:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c001cfd3:	4d                   	dec    ebp
c001cfd4:	74 0a                	je     c001cfe0 <IDE::detect()+0x276>
c001cfd6:	bd 01 00 00 00       	mov    ebp,0x1
c001cfdb:	e9 bb fd ff ff       	jmp    c001cd9b <IDE::detect()+0x31>
c001cfe0:	4e                   	dec    esi
c001cfe1:	74 63                	je     c001d046 <IDE::detect()+0x2dc>
c001cfe3:	be 01 00 00 00       	mov    esi,0x1
c001cfe8:	e9 ac fd ff ff       	jmp    c001cd99 <IDE::detect()+0x2f>
c001cfed:	50                   	push   eax
c001cfee:	6a 04                	push   0x4
c001cff0:	56                   	push   esi
c001cff1:	53                   	push   ebx
c001cff2:	e8 05 f7 ff ff       	call   c001c6fc <IDE::read(unsigned char, unsigned char)>
c001cff7:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001cffb:	83 c4 0c             	add    esp,0xc
c001cffe:	6a 05                	push   0x5
c001d000:	56                   	push   esi
c001d001:	53                   	push   ebx
c001d002:	e8 f5 f6 ff ff       	call   c001c6fc <IDE::read(unsigned char, unsigned char)>
c001d007:	83 c4 10             	add    esp,0x10
c001d00a:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001d00e:	80 fa 14             	cmp    dl,0x14
c001d011:	75 04                	jne    c001d017 <IDE::detect()+0x2ad>
c001d013:	3c eb                	cmp    al,0xeb
c001d015:	eb 07                	jmp    c001d01e <IDE::detect()+0x2b4>
c001d017:	3c 96                	cmp    al,0x96
c001d019:	75 b8                	jne    c001cfd3 <IDE::detect()+0x269>
c001d01b:	80 fa 69             	cmp    dl,0x69
c001d01e:	75 b3                	jne    c001cfd3 <IDE::detect()+0x269>
c001d020:	68 a1 00 00 00       	push   0xa1
c001d025:	6a 07                	push   0x7
c001d027:	56                   	push   esi
c001d028:	53                   	push   ebx
c001d029:	e8 0e f6 ff ff       	call   c001c63c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d02e:	5f                   	pop    edi
c001d02f:	58                   	pop    eax
c001d030:	6a 00                	push   0x0
c001d032:	68 40 42 0f 00       	push   0xf4240
c001d037:	e8 50 bd ff ff       	call   c0018d8c <nanoSleep(unsigned long long)>
c001d03c:	83 c4 10             	add    esp,0x10
c001d03f:	b1 01                	mov    cl,0x1
c001d041:	e9 4a fe ff ff       	jmp    c001ce90 <IDE::detect()+0x126>
c001d046:	81 c4 1c 02 00 00    	add    esp,0x21c
c001d04c:	5b                   	pop    ebx
c001d04d:	5e                   	pop    esi
c001d04e:	5f                   	pop    edi
c001d04f:	5d                   	pop    ebp
c001d050:	c3                   	ret    
c001d051:	90                   	nop

c001d052 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001d052:	55                   	push   ebp
c001d053:	57                   	push   edi
c001d054:	56                   	push   esi
c001d055:	53                   	push   ebx
c001d056:	83 ec 1c             	sub    esp,0x1c
c001d059:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001d05d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001d061:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001d065:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001d069:	88 c3                	mov    bl,al
c001d06b:	84 c0                	test   al,al
c001d06d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d071:	0f 84 67 01 00 00    	je     c001d1de <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c001d077:	83 ec 0c             	sub    esp,0xc
c001d07a:	68 43 32 02 c0       	push   0xc0023243
c001d07f:	e8 a3 20 ff ff       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c001d084:	83 c4 10             	add    esp,0x10
c001d087:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d08b:	3c 01                	cmp    al,0x1
c001d08d:	75 17                	jne    c001d0a6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c001d08f:	83 ec 0c             	sub    esp,0xc
c001d092:	b3 13                	mov    bl,0x13
c001d094:	68 4f 32 02 c0       	push   0xc002324f
c001d099:	e8 89 20 ff ff       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c001d09e:	83 c4 10             	add    esp,0x10
c001d0a1:	e9 25 01 00 00       	jmp    c001d1cb <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001d0a6:	3c 02                	cmp    al,0x2
c001d0a8:	0f 85 ef 00 00 00    	jne    c001d19d <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c001d0ae:	d1 e6                	shl    esi,1
c001d0b0:	09 ee                	or     esi,ebp
c001d0b2:	52                   	push   edx
c001d0b3:	89 f0                	mov    eax,esi
c001d0b5:	6a 01                	push   0x1
c001d0b7:	0f b6 f0             	movzx  esi,al
c001d0ba:	c1 e6 06             	shl    esi,0x6
c001d0bd:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c001d0c5:	50                   	push   eax
c001d0c6:	57                   	push   edi
c001d0c7:	e8 30 f6 ff ff       	call   c001c6fc <IDE::read(unsigned char, unsigned char)>
c001d0cc:	83 c4 10             	add    esp,0x10
c001d0cf:	89 c6                	mov    esi,eax
c001d0d1:	a8 01                	test   al,0x1
c001d0d3:	74 12                	je     c001d0e7 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c001d0d5:	83 ec 0c             	sub    esp,0xc
c001d0d8:	b3 07                	mov    bl,0x7
c001d0da:	68 64 32 02 c0       	push   0xc0023264
c001d0df:	e8 43 20 ff ff       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c001d0e4:	83 c4 10             	add    esp,0x10
c001d0e7:	f7 c6 02 00 00 00    	test   esi,0x2
c001d0ed:	74 12                	je     c001d101 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c001d0ef:	83 ec 0c             	sub    esp,0xc
c001d0f2:	b3 03                	mov    bl,0x3
c001d0f4:	68 82 32 02 c0       	push   0xc0023282
c001d0f9:	e8 29 20 ff ff       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c001d0fe:	83 c4 10             	add    esp,0x10
c001d101:	f7 c6 04 00 00 00    	test   esi,0x4
c001d107:	74 12                	je     c001d11b <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c001d109:	83 ec 0c             	sub    esp,0xc
c001d10c:	b3 14                	mov    bl,0x14
c001d10e:	68 a2 32 02 c0       	push   0xc00232a2
c001d113:	e8 0f 20 ff ff       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c001d118:	83 c4 10             	add    esp,0x10
c001d11b:	f7 c6 08 00 00 00    	test   esi,0x8
c001d121:	74 12                	je     c001d135 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c001d123:	83 ec 0c             	sub    esp,0xc
c001d126:	b3 03                	mov    bl,0x3
c001d128:	68 82 32 02 c0       	push   0xc0023282
c001d12d:	e8 f5 1f ff ff       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c001d132:	83 c4 10             	add    esp,0x10
c001d135:	f7 c6 10 00 00 00    	test   esi,0x10
c001d13b:	74 12                	je     c001d14f <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c001d13d:	83 ec 0c             	sub    esp,0xc
c001d140:	b3 15                	mov    bl,0x15
c001d142:	68 ba 32 02 c0       	push   0xc00232ba
c001d147:	e8 db 1f ff ff       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c001d14c:	83 c4 10             	add    esp,0x10
c001d14f:	f7 c6 20 00 00 00    	test   esi,0x20
c001d155:	74 12                	je     c001d169 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c001d157:	83 ec 0c             	sub    esp,0xc
c001d15a:	b3 03                	mov    bl,0x3
c001d15c:	68 82 32 02 c0       	push   0xc0023282
c001d161:	e8 c1 1f ff ff       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c001d166:	83 c4 10             	add    esp,0x10
c001d169:	f7 c6 40 00 00 00    	test   esi,0x40
c001d16f:	74 12                	je     c001d183 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c001d171:	83 ec 0c             	sub    esp,0xc
c001d174:	b3 16                	mov    bl,0x16
c001d176:	68 d4 32 02 c0       	push   0xc00232d4
c001d17b:	e8 a7 1f ff ff       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c001d180:	83 c4 10             	add    esp,0x10
c001d183:	89 f0                	mov    eax,esi
c001d185:	84 c0                	test   al,al
c001d187:	79 42                	jns    c001d1cb <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001d189:	83 ec 0c             	sub    esp,0xc
c001d18c:	b3 0d                	mov    bl,0xd
c001d18e:	68 f5 32 02 c0       	push   0xc00232f5
c001d193:	e8 8f 1f ff ff       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c001d198:	83 c4 10             	add    esp,0x10
c001d19b:	eb 2e                	jmp    c001d1cb <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001d19d:	3c 03                	cmp    al,0x3
c001d19f:	75 14                	jne    c001d1b5 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c001d1a1:	83 ec 0c             	sub    esp,0xc
c001d1a4:	b3 17                	mov    bl,0x17
c001d1a6:	68 09 33 02 c0       	push   0xc0023309
c001d1ab:	e8 77 1f ff ff       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c001d1b0:	83 c4 10             	add    esp,0x10
c001d1b3:	eb 16                	jmp    c001d1cb <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001d1b5:	3c 04                	cmp    al,0x4
c001d1b7:	75 12                	jne    c001d1cb <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001d1b9:	83 ec 0c             	sub    esp,0xc
c001d1bc:	b3 08                	mov    bl,0x8
c001d1be:	68 1f 33 02 c0       	push   0xc002331f
c001d1c3:	e8 5f 1f ff ff       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c001d1c8:	83 c4 10             	add    esp,0x10
c001d1cb:	50                   	push   eax
c001d1cc:	50                   	push   eax
c001d1cd:	0f b6 c3             	movzx  eax,bl
c001d1d0:	50                   	push   eax
c001d1d1:	68 37 33 02 c0       	push   0xc0023337
c001d1d6:	e8 4c 1f ff ff       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c001d1db:	83 c4 10             	add    esp,0x10
c001d1de:	83 c4 1c             	add    esp,0x1c
c001d1e1:	88 d8                	mov    al,bl
c001d1e3:	5b                   	pop    ebx
c001d1e4:	5e                   	pop    esi
c001d1e5:	5f                   	pop    edi
c001d1e6:	5d                   	pop    ebp
c001d1e7:	c3                   	ret    

c001d1e8 <IDE::polling(unsigned char, unsigned int)>:
c001d1e8:	57                   	push   edi
c001d1e9:	56                   	push   esi
c001d1ea:	53                   	push   ebx
c001d1eb:	bb 04 00 00 00       	mov    ebx,0x4
c001d1f0:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001d1f4:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001d1f9:	52                   	push   edx
c001d1fa:	6a 0c                	push   0xc
c001d1fc:	56                   	push   esi
c001d1fd:	57                   	push   edi
c001d1fe:	e8 f9 f4 ff ff       	call   c001c6fc <IDE::read(unsigned char, unsigned char)>
c001d203:	83 c4 10             	add    esp,0x10
c001d206:	4b                   	dec    ebx
c001d207:	75 f0                	jne    c001d1f9 <IDE::polling(unsigned char, unsigned int)+0x11>
c001d209:	bb a0 86 01 00       	mov    ebx,0x186a0
c001d20e:	50                   	push   eax
c001d20f:	6a 0c                	push   0xc
c001d211:	56                   	push   esi
c001d212:	57                   	push   edi
c001d213:	e8 e4 f4 ff ff       	call   c001c6fc <IDE::read(unsigned char, unsigned char)>
c001d218:	83 c4 10             	add    esp,0x10
c001d21b:	a8 01                	test   al,0x1
c001d21d:	74 12                	je     c001d231 <IDE::polling(unsigned char, unsigned int)+0x49>
c001d21f:	83 ec 0c             	sub    esp,0xc
c001d222:	68 51 33 02 c0       	push   0xc0023351
c001d227:	e8 fb 1e ff ff       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c001d22c:	83 c4 10             	add    esp,0x10
c001d22f:	eb 17                	jmp    c001d248 <IDE::polling(unsigned char, unsigned int)+0x60>
c001d231:	a8 20                	test   al,0x20
c001d233:	75 0f                	jne    c001d244 <IDE::polling(unsigned char, unsigned int)+0x5c>
c001d235:	4b                   	dec    ebx
c001d236:	74 10                	je     c001d248 <IDE::polling(unsigned char, unsigned int)+0x60>
c001d238:	84 c0                	test   al,al
c001d23a:	78 d2                	js     c001d20e <IDE::polling(unsigned char, unsigned int)+0x26>
c001d23c:	a8 08                	test   al,0x8
c001d23e:	74 ce                	je     c001d20e <IDE::polling(unsigned char, unsigned int)+0x26>
c001d240:	31 c0                	xor    eax,eax
c001d242:	eb 06                	jmp    c001d24a <IDE::polling(unsigned char, unsigned int)+0x62>
c001d244:	b0 01                	mov    al,0x1
c001d246:	eb 02                	jmp    c001d24a <IDE::polling(unsigned char, unsigned int)+0x62>
c001d248:	b0 02                	mov    al,0x2
c001d24a:	5b                   	pop    ebx
c001d24b:	5e                   	pop    esi
c001d24c:	5f                   	pop    edi
c001d24d:	c3                   	ret    

c001d24e <ATA::close(int, int, void*)>:
c001d24e:	83 ec 0c             	sub    esp,0xc
c001d251:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d255:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d25b:	85 c0                	test   eax,eax
c001d25d:	74 0c                	je     c001d26b <ATA::close(int, int, void*)+0x1d>
c001d25f:	83 ec 0c             	sub    esp,0xc
c001d262:	8b 10                	mov    edx,DWORD PTR [eax]
c001d264:	50                   	push   eax
c001d265:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001d268:	83 c4 10             	add    esp,0x10
c001d26b:	31 c0                	xor    eax,eax
c001d26d:	83 c4 0c             	add    esp,0xc
c001d270:	c3                   	ret    
c001d271:	90                   	nop

c001d272 <ATA::powerSaving(PowerSavingLevel)>:
c001d272:	c3                   	ret    
c001d273:	90                   	nop

c001d274 <ATA::ATA()>:
c001d274:	83 ec 0c             	sub    esp,0xc
c001d277:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d27b:	83 ec 04             	sub    esp,0x4
c001d27e:	68 00 02 00 00       	push   0x200
c001d283:	68 94 33 02 c0       	push   0xc0023394
c001d288:	50                   	push   eax
c001d289:	e8 aa 36 ff ff       	call   c0010938 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001d28e:	83 c4 10             	add    esp,0x10
c001d291:	ba c0 33 02 c0       	mov    edx,0xc00233c0
c001d296:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d29a:	89 10                	mov    DWORD PTR [eax],edx
c001d29c:	90                   	nop
c001d29d:	83 c4 0c             	add    esp,0xc
c001d2a0:	c3                   	ret    
c001d2a1:	90                   	nop

c001d2a2 <ATA::flush(bool)>:
c001d2a2:	53                   	push   ebx
c001d2a3:	83 ec 08             	sub    esp,0x8
c001d2a6:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c001d2ab:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d2af:	19 c0                	sbb    eax,eax
c001d2b1:	83 e0 fd             	and    eax,0xfffffffd
c001d2b4:	05 ea 00 00 00       	add    eax,0xea
c001d2b9:	50                   	push   eax
c001d2ba:	6a 07                	push   0x7
c001d2bc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d2c3:	50                   	push   eax
c001d2c4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d2ca:	e8 6d f3 ff ff       	call   c001c63c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d2cf:	83 c4 0c             	add    esp,0xc
c001d2d2:	6a 00                	push   0x0
c001d2d4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d2db:	50                   	push   eax
c001d2dc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d2e2:	e8 01 ff ff ff       	call   c001d1e8 <IDE::polling(unsigned char, unsigned int)>
c001d2e7:	83 c4 18             	add    esp,0x18
c001d2ea:	5b                   	pop    ebx
c001d2eb:	c3                   	ret    

c001d2ec <ATA::readyForCommand()>:
c001d2ec:	56                   	push   esi
c001d2ed:	53                   	push   ebx
c001d2ee:	31 db                	xor    ebx,ebx
c001d2f0:	50                   	push   eax
c001d2f1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d2f5:	50                   	push   eax
c001d2f6:	6a 0c                	push   0xc
c001d2f8:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001d2ff:	50                   	push   eax
c001d300:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001d306:	e8 f1 f3 ff ff       	call   c001c6fc <IDE::read(unsigned char, unsigned char)>
c001d30b:	83 c4 10             	add    esp,0x10
c001d30e:	a8 88                	test   al,0x88
c001d310:	74 23                	je     c001d335 <ATA::readyForCommand()+0x49>
c001d312:	43                   	inc    ebx
c001d313:	83 fb 63             	cmp    ebx,0x63
c001d316:	7e dd                	jle    c001d2f5 <ATA::readyForCommand()+0x9>
c001d318:	51                   	push   ecx
c001d319:	51                   	push   ecx
c001d31a:	6a 00                	push   0x0
c001d31c:	68 40 42 0f 00       	push   0xf4240
c001d321:	e8 66 ba ff ff       	call   c0018d8c <nanoSleep(unsigned long long)>
c001d326:	83 c4 10             	add    esp,0x10
c001d329:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001d32f:	75 c4                	jne    c001d2f5 <ATA::readyForCommand()+0x9>
c001d331:	31 c0                	xor    eax,eax
c001d333:	eb 02                	jmp    c001d337 <ATA::readyForCommand()+0x4b>
c001d335:	b0 01                	mov    al,0x1
c001d337:	5a                   	pop    edx
c001d338:	5b                   	pop    ebx
c001d339:	5e                   	pop    esi
c001d33a:	c3                   	ret    
c001d33b:	90                   	nop

c001d33c <ATA::access(unsigned long long, int, void*, bool)>:
c001d33c:	55                   	push   ebp
c001d33d:	57                   	push   edi
c001d33e:	56                   	push   esi
c001d33f:	53                   	push   ebx
c001d340:	83 ec 2c             	sub    esp,0x2c
c001d343:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001d347:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001d34b:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001d34f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d353:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001d357:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001d35b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001d35f:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001d365:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d369:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001d36f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d373:	c1 e0 06             	shl    eax,0x6
c001d376:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001d37e:	74 5d                	je     c001d3dd <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c001d380:	89 fa                	mov    edx,edi
c001d382:	89 f0                	mov    eax,esi
c001d384:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001d388:	c1 ea 1c             	shr    edx,0x1c
c001d38b:	89 d1                	mov    ecx,edx
c001d38d:	09 c1                	or     ecx,eax
c001d38f:	74 25                	je     c001d3b6 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001d391:	31 ed                	xor    ebp,ebp
c001d393:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001d39a:	89 fa                	mov    edx,edi
c001d39c:	89 f0                	mov    eax,esi
c001d39e:	0f ad d0             	shrd   eax,edx,cl
c001d3a1:	d3 ea                	shr    edx,cl
c001d3a3:	f6 c1 20             	test   cl,0x20
c001d3a6:	74 02                	je     c001d3aa <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001d3a8:	89 d0                	mov    eax,edx
c001d3aa:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001d3ae:	45                   	inc    ebp
c001d3af:	83 fd 06             	cmp    ebp,0x6
c001d3b2:	75 df                	jne    c001d393 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001d3b4:	eb 76                	jmp    c001d42c <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c001d3b6:	89 f0                	mov    eax,esi
c001d3b8:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001d3bd:	89 fa                	mov    edx,edi
c001d3bf:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001d3c6:	0f ac d0 10          	shrd   eax,edx,0x10
c001d3ca:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001d3cf:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001d3d3:	c1 ee 18             	shr    esi,0x18
c001d3d6:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001d3db:	eb 56                	jmp    c001d433 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001d3dd:	6a 00                	push   0x0
c001d3df:	6a 3f                	push   0x3f
c001d3e1:	57                   	push   edi
c001d3e2:	56                   	push   esi
c001d3e3:	e8 e4 1e 00 00       	call   c001f2cc <__umoddi3>
c001d3e8:	83 c4 10             	add    esp,0x10
c001d3eb:	40                   	inc    eax
c001d3ec:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001d3f0:	6a 00                	push   0x0
c001d3f2:	68 f0 03 00 00       	push   0x3f0
c001d3f7:	57                   	push   edi
c001d3f8:	56                   	push   esi
c001d3f9:	e8 ce 1d 00 00       	call   c001f1cc <__udivdi3>
c001d3fe:	83 c4 10             	add    esp,0x10
c001d401:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001d406:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001d40d:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001d412:	6a 00                	push   0x0
c001d414:	6a 3f                	push   0x3f
c001d416:	57                   	push   edi
c001d417:	56                   	push   esi
c001d418:	e8 af 1d 00 00       	call   c001f1cc <__udivdi3>
c001d41d:	83 c4 10             	add    esp,0x10
c001d420:	89 c6                	mov    esi,eax
c001d422:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001d427:	83 e6 0f             	and    esi,0xf
c001d42a:	eb 07                	jmp    c001d433 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001d42c:	31 f6                	xor    esi,esi
c001d42e:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001d433:	bf 01 00 00 00       	mov    edi,0x1
c001d438:	50                   	push   eax
c001d439:	6a 00                	push   0x0
c001d43b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d442:	50                   	push   eax
c001d443:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d447:	e8 fc f3 ff ff       	call   c001c848 <IDE::enableIRQs(unsigned char, bool)>
c001d44c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d44f:	e8 98 fe ff ff       	call   c001d2ec <ATA::readyForCommand()>
c001d454:	83 c4 10             	add    esp,0x10
c001d457:	84 c0                	test   al,al
c001d459:	0f 84 50 02 00 00    	je     c001d6af <ATA::access(unsigned long long, int, void*, bool)+0x373>
c001d45f:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001d465:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001d46b:	c1 e0 04             	shl    eax,0x4
c001d46e:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001d475:	09 c6                	or     esi,eax
c001d477:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001d47c:	75 05                	jne    c001d483 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001d47e:	83 ce a0             	or     esi,0xffffffa0
c001d481:	eb 03                	jmp    c001d486 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c001d483:	83 ce e0             	or     esi,0xffffffe0
c001d486:	89 f0                	mov    eax,esi
c001d488:	0f b6 f0             	movzx  esi,al
c001d48b:	56                   	push   esi
c001d48c:	6a 06                	push   0x6
c001d48e:	51                   	push   ecx
c001d48f:	52                   	push   edx
c001d490:	e8 a7 f1 ff ff       	call   c001c63c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d495:	83 c4 10             	add    esp,0x10
c001d498:	6a 00                	push   0x0
c001d49a:	6a 01                	push   0x1
c001d49c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d4a3:	50                   	push   eax
c001d4a4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d4aa:	e8 8d f1 ff ff       	call   c001c63c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d4af:	83 c4 10             	add    esp,0x10
c001d4b2:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001d4b7:	75 6e                	jne    c001d527 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c001d4b9:	6a 00                	push   0x0
c001d4bb:	6a 08                	push   0x8
c001d4bd:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d4c4:	50                   	push   eax
c001d4c5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d4cb:	e8 6c f1 ff ff       	call   c001c63c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d4d0:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001d4d5:	50                   	push   eax
c001d4d6:	6a 09                	push   0x9
c001d4d8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d4df:	50                   	push   eax
c001d4e0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d4e6:	e8 51 f1 ff ff       	call   c001c63c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d4eb:	83 c4 20             	add    esp,0x20
c001d4ee:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001d4f3:	50                   	push   eax
c001d4f4:	6a 0a                	push   0xa
c001d4f6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d4fd:	50                   	push   eax
c001d4fe:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d504:	e8 33 f1 ff ff       	call   c001c63c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d509:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001d50e:	50                   	push   eax
c001d50f:	6a 0b                	push   0xb
c001d511:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d518:	50                   	push   eax
c001d519:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d51f:	e8 18 f1 ff ff       	call   c001c63c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d524:	83 c4 20             	add    esp,0x20
c001d527:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001d52c:	50                   	push   eax
c001d52d:	6a 02                	push   0x2
c001d52f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d536:	50                   	push   eax
c001d537:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d53d:	e8 fa f0 ff ff       	call   c001c63c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d542:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001d547:	50                   	push   eax
c001d548:	6a 03                	push   0x3
c001d54a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d551:	50                   	push   eax
c001d552:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d558:	e8 df f0 ff ff       	call   c001c63c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d55d:	83 c4 20             	add    esp,0x20
c001d560:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001d565:	50                   	push   eax
c001d566:	6a 04                	push   0x4
c001d568:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d56f:	50                   	push   eax
c001d570:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d576:	e8 c1 f0 ff ff       	call   c001c63c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d57b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d580:	50                   	push   eax
c001d581:	6a 05                	push   0x5
c001d583:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d58a:	50                   	push   eax
c001d58b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d591:	e8 a6 f0 ff ff       	call   c001c63c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d596:	83 c4 20             	add    esp,0x20
c001d599:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001d59e:	0f 94 c0             	sete   al
c001d5a1:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001d5a6:	74 09                	je     c001d5b1 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c001d5a8:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c001d5af:	eb 07                	jmp    c001d5b8 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c001d5b1:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c001d5b8:	0f b6 c0             	movzx  eax,al
c001d5bb:	50                   	push   eax
c001d5bc:	6a 07                	push   0x7
c001d5be:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d5c5:	50                   	push   eax
c001d5c6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d5cc:	e8 6b f0 ff ff       	call   c001c63c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d5d1:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001d5d5:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001d5d9:	83 c4 10             	add    esp,0x10
c001d5dc:	85 f6                	test   esi,esi
c001d5de:	0f 84 ac 00 00 00    	je     c001d690 <ATA::access(unsigned long long, int, void*, bool)+0x354>
c001d5e4:	50                   	push   eax
c001d5e5:	6a 01                	push   0x1
c001d5e7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d5ee:	50                   	push   eax
c001d5ef:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d5f5:	e8 ee fb ff ff       	call   c001d1e8 <IDE::polling(unsigned char, unsigned int)>
c001d5fa:	83 c4 10             	add    esp,0x10
c001d5fd:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001d603:	84 c0                	test   al,al
c001d605:	74 20                	je     c001d627 <ATA::access(unsigned long long, int, void*, bool)+0x2eb>
c001d607:	0f b6 f8             	movzx  edi,al
c001d60a:	0f b6 d2             	movzx  edx,dl
c001d60d:	57                   	push   edi
c001d60e:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001d615:	50                   	push   eax
c001d616:	52                   	push   edx
c001d617:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d61d:	e8 30 fa ff ff       	call   c001d052 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001d622:	e9 85 00 00 00       	jmp    c001d6ac <ATA::access(unsigned long long, int, void*, bool)+0x370>
c001d627:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001d62c:	74 41                	je     c001d66f <ATA::access(unsigned long long, int, void*, bool)+0x333>
c001d62e:	31 c9                	xor    ecx,ecx
c001d630:	66 8b 2c 4f          	mov    bp,WORD PTR [edi+ecx*2]
c001d634:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001d638:	50                   	push   eax
c001d639:	50                   	push   eax
c001d63a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d641:	50                   	push   eax
c001d642:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d648:	e8 dd ef ff ff       	call   c001c62a <IDE::getBase(unsigned char)>
c001d64d:	89 c2                	mov    edx,eax
c001d64f:	89 e8                	mov    eax,ebp
c001d651:	66 ef                	out    dx,ax
c001d653:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001d657:	83 c4 10             	add    esp,0x10
c001d65a:	41                   	inc    ecx
c001d65b:	81 f9 00 01 00 00    	cmp    ecx,0x100
c001d661:	75 cd                	jne    c001d630 <ATA::access(unsigned long long, int, void*, bool)+0x2f4>
c001d663:	4e                   	dec    esi
c001d664:	81 c7 00 02 00 00    	add    edi,0x200
c001d66a:	e9 6d ff ff ff       	jmp    c001d5dc <ATA::access(unsigned long long, int, void*, bool)+0x2a0>
c001d66f:	0f b6 d2             	movzx  edx,dl
c001d672:	51                   	push   ecx
c001d673:	51                   	push   ecx
c001d674:	52                   	push   edx
c001d675:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d67b:	e8 aa ef ff ff       	call   c001c62a <IDE::getBase(unsigned char)>
c001d680:	b9 00 01 00 00       	mov    ecx,0x100
c001d685:	89 c2                	mov    edx,eax
c001d687:	fc                   	cld    
c001d688:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001d68b:	83 c4 10             	add    esp,0x10
c001d68e:	eb d3                	jmp    c001d663 <ATA::access(unsigned long long, int, void*, bool)+0x327>
c001d690:	31 ff                	xor    edi,edi
c001d692:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001d697:	74 16                	je     c001d6af <ATA::access(unsigned long long, int, void*, bool)+0x373>
c001d699:	50                   	push   eax
c001d69a:	50                   	push   eax
c001d69b:	31 c0                	xor    eax,eax
c001d69d:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c001d6a2:	0f 94 c0             	sete   al
c001d6a5:	50                   	push   eax
c001d6a6:	53                   	push   ebx
c001d6a7:	e8 f6 fb ff ff       	call   c001d2a2 <ATA::flush(bool)>
c001d6ac:	83 c4 10             	add    esp,0x10
c001d6af:	83 c4 2c             	add    esp,0x2c
c001d6b2:	89 f8                	mov    eax,edi
c001d6b4:	5b                   	pop    ebx
c001d6b5:	5e                   	pop    esi
c001d6b6:	5f                   	pop    edi
c001d6b7:	5d                   	pop    ebp
c001d6b8:	c3                   	ret    
c001d6b9:	90                   	nop

c001d6ba <ATA::read(unsigned long long, int, void*)>:
c001d6ba:	57                   	push   edi
c001d6bb:	b8 04 00 00 00       	mov    eax,0x4
c001d6c0:	56                   	push   esi
c001d6c1:	53                   	push   ebx
c001d6c2:	83 ec 10             	sub    esp,0x10
c001d6c5:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001d6c9:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001d6cd:	8d 4b ff             	lea    ecx,[ebx-0x1]
c001d6d0:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001d6d4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d6d8:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c001d6de:	77 3b                	ja     c001d71b <ATA::read(unsigned long long, int, void*)+0x61>
c001d6e0:	b8 06 00 00 00       	mov    eax,0x6
c001d6e5:	85 d2                	test   edx,edx
c001d6e7:	74 32                	je     c001d71b <ATA::read(unsigned long long, int, void*)+0x61>
c001d6e9:	50                   	push   eax
c001d6ea:	50                   	push   eax
c001d6eb:	6a 00                	push   0x0
c001d6ed:	52                   	push   edx
c001d6ee:	53                   	push   ebx
c001d6ef:	57                   	push   edi
c001d6f0:	56                   	push   esi
c001d6f1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d6f5:	e8 42 fc ff ff       	call   c001d33c <ATA::access(unsigned long long, int, void*, bool)>
c001d6fa:	83 c4 20             	add    esp,0x20
c001d6fd:	85 c0                	test   eax,eax
c001d6ff:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d703:	75 11                	jne    c001d716 <ATA::read(unsigned long long, int, void*)+0x5c>
c001d705:	01 1d 24 61 02 c0    	add    DWORD PTR ds:0xc0026124,ebx
c001d70b:	e8 02 f9 fe ff       	call   c000d012 <VgaText::updateDiskUsage()>
c001d710:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d714:	eb 05                	jmp    c001d71b <ATA::read(unsigned long long, int, void*)+0x61>
c001d716:	b8 01 00 00 00       	mov    eax,0x1
c001d71b:	83 c4 10             	add    esp,0x10
c001d71e:	5b                   	pop    ebx
c001d71f:	5e                   	pop    esi
c001d720:	5f                   	pop    edi
c001d721:	c3                   	ret    

c001d722 <ATA::write(unsigned long long, int, void*)>:
c001d722:	57                   	push   edi
c001d723:	b8 04 00 00 00       	mov    eax,0x4
c001d728:	56                   	push   esi
c001d729:	53                   	push   ebx
c001d72a:	83 ec 10             	sub    esp,0x10
c001d72d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001d731:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001d735:	8d 4b ff             	lea    ecx,[ebx-0x1]
c001d738:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001d73c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d740:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c001d746:	77 3b                	ja     c001d783 <ATA::write(unsigned long long, int, void*)+0x61>
c001d748:	b8 06 00 00 00       	mov    eax,0x6
c001d74d:	85 d2                	test   edx,edx
c001d74f:	74 32                	je     c001d783 <ATA::write(unsigned long long, int, void*)+0x61>
c001d751:	50                   	push   eax
c001d752:	50                   	push   eax
c001d753:	6a 01                	push   0x1
c001d755:	52                   	push   edx
c001d756:	53                   	push   ebx
c001d757:	57                   	push   edi
c001d758:	56                   	push   esi
c001d759:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d75d:	e8 da fb ff ff       	call   c001d33c <ATA::access(unsigned long long, int, void*, bool)>
c001d762:	83 c4 20             	add    esp,0x20
c001d765:	85 c0                	test   eax,eax
c001d767:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d76b:	75 11                	jne    c001d77e <ATA::write(unsigned long long, int, void*)+0x5c>
c001d76d:	01 1d 20 61 02 c0    	add    DWORD PTR ds:0xc0026120,ebx
c001d773:	e8 9a f8 fe ff       	call   c000d012 <VgaText::updateDiskUsage()>
c001d778:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d77c:	eb 05                	jmp    c001d783 <ATA::write(unsigned long long, int, void*)+0x61>
c001d77e:	b8 01 00 00 00       	mov    eax,0x1
c001d783:	83 c4 10             	add    esp,0x10
c001d786:	5b                   	pop    ebx
c001d787:	5e                   	pop    esi
c001d788:	5f                   	pop    edi
c001d789:	c3                   	ret    

c001d78a <ATA::detectCHS()>:
c001d78a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d78e:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001d794:	c1 e0 06             	shl    eax,0x6
c001d797:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001d79d:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001d7a7:	c7 44 24 04 a3 33 02 c0 	mov    DWORD PTR [esp+0x4],0xc00233a3
c001d7af:	e9 3c 81 ff ff       	jmp    c00158f0 <Krnl::panic(char const*)>

c001d7b4 <ATA::open(int, int, void*)>:
c001d7b4:	53                   	push   ebx
c001d7b5:	83 ec 08             	sub    esp,0x8
c001d7b8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d7bc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d7c0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d7c4:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001d7ca:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001d7d0:	c1 e0 06             	shl    eax,0x6
c001d7d3:	01 d0                	add    eax,edx
c001d7d5:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001d7dc:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001d7e2:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001d7e9:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001d7f3:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001d7f9:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001d800:	75 0c                	jne    c001d80e <ATA::open(int, int, void*)+0x5a>
c001d802:	83 ec 0c             	sub    esp,0xc
c001d805:	53                   	push   ebx
c001d806:	e8 7f ff ff ff       	call   c001d78a <ATA::detectCHS()>
c001d80b:	83 c4 10             	add    esp,0x10
c001d80e:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001d814:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001d81a:	c1 e0 06             	shl    eax,0x6
c001d81d:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001d824:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001d82e:	d1 e8                	shr    eax,1
c001d830:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001d836:	6a 04                	push   0x4
c001d838:	6a 0c                	push   0xc
c001d83a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d841:	50                   	push   eax
c001d842:	52                   	push   edx
c001d843:	e8 f4 ed ff ff       	call   c001c63c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d848:	90                   	nop
c001d849:	90                   	nop
c001d84a:	6a 00                	push   0x0
c001d84c:	6a 0c                	push   0xc
c001d84e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d855:	50                   	push   eax
c001d856:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d85c:	e8 db ed ff ff       	call   c001c63c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d861:	83 c4 14             	add    esp,0x14
c001d864:	53                   	push   ebx
c001d865:	e8 36 31 ff ff       	call   c00109a0 <PhysicalDisk::startCache()>
c001d86a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d86d:	e8 f6 50 ff ff       	call   c0012968 <createPartitionsForDisk(PhysicalDisk*)>
c001d872:	31 c0                	xor    eax,eax
c001d874:	83 c4 18             	add    esp,0x18
c001d877:	5b                   	pop    ebx
c001d878:	c3                   	ret    
c001d879:	90                   	nop

c001d87a <ATAPI::write(unsigned long long, int, void*)>:
c001d87a:	b8 03 00 00 00       	mov    eax,0x3
c001d87f:	c3                   	ret    

c001d880 <ATAPI::close(int, int, void*)>:
c001d880:	83 ec 0c             	sub    esp,0xc
c001d883:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d887:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d88d:	85 c0                	test   eax,eax
c001d88f:	74 0c                	je     c001d89d <ATAPI::close(int, int, void*)+0x1d>
c001d891:	83 ec 0c             	sub    esp,0xc
c001d894:	8b 10                	mov    edx,DWORD PTR [eax]
c001d896:	50                   	push   eax
c001d897:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001d89a:	83 c4 10             	add    esp,0x10
c001d89d:	31 c0                	xor    eax,eax
c001d89f:	83 c4 0c             	add    esp,0xc
c001d8a2:	c3                   	ret    
c001d8a3:	90                   	nop

c001d8a4 <ATAPI::ATAPI()>:
c001d8a4:	83 ec 0c             	sub    esp,0xc
c001d8a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d8ab:	83 ec 04             	sub    esp,0x4
c001d8ae:	68 00 08 00 00       	push   0x800
c001d8b3:	68 ec 33 02 c0       	push   0xc00233ec
c001d8b8:	50                   	push   eax
c001d8b9:	e8 7a 30 ff ff       	call   c0010938 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001d8be:	83 c4 10             	add    esp,0x10
c001d8c1:	ba 2c 34 02 c0       	mov    edx,0xc002342c
c001d8c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d8ca:	89 10                	mov    DWORD PTR [eax],edx
c001d8cc:	90                   	nop
c001d8cd:	83 c4 0c             	add    esp,0xc
c001d8d0:	c3                   	ret    
c001d8d1:	90                   	nop

c001d8d2 <ATAPI::readyForCommand()>:
c001d8d2:	56                   	push   esi
c001d8d3:	53                   	push   ebx
c001d8d4:	31 db                	xor    ebx,ebx
c001d8d6:	50                   	push   eax
c001d8d7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d8db:	50                   	push   eax
c001d8dc:	6a 0c                	push   0xc
c001d8de:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001d8e5:	50                   	push   eax
c001d8e6:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001d8ec:	e8 0b ee ff ff       	call   c001c6fc <IDE::read(unsigned char, unsigned char)>
c001d8f1:	83 c4 10             	add    esp,0x10
c001d8f4:	a8 88                	test   al,0x88
c001d8f6:	74 23                	je     c001d91b <ATAPI::readyForCommand()+0x49>
c001d8f8:	43                   	inc    ebx
c001d8f9:	83 fb 63             	cmp    ebx,0x63
c001d8fc:	7e dd                	jle    c001d8db <ATAPI::readyForCommand()+0x9>
c001d8fe:	51                   	push   ecx
c001d8ff:	51                   	push   ecx
c001d900:	6a 00                	push   0x0
c001d902:	68 40 42 0f 00       	push   0xf4240
c001d907:	e8 80 b4 ff ff       	call   c0018d8c <nanoSleep(unsigned long long)>
c001d90c:	83 c4 10             	add    esp,0x10
c001d90f:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001d915:	75 c4                	jne    c001d8db <ATAPI::readyForCommand()+0x9>
c001d917:	31 c0                	xor    eax,eax
c001d919:	eb 02                	jmp    c001d91d <ATAPI::readyForCommand()+0x4b>
c001d91b:	b0 01                	mov    al,0x1
c001d91d:	5a                   	pop    edx
c001d91e:	5b                   	pop    ebx
c001d91f:	5e                   	pop    esi
c001d920:	c3                   	ret    
c001d921:	90                   	nop

c001d922 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001d922:	55                   	push   ebp
c001d923:	57                   	push   edi
c001d924:	56                   	push   esi
c001d925:	53                   	push   ebx
c001d926:	83 ec 20             	sub    esp,0x20
c001d929:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001d92d:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001d931:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001d935:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001d939:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001d93d:	6a 01                	push   0x1
c001d93f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d946:	50                   	push   eax
c001d947:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d94d:	e8 f6 ee ff ff       	call   c001c848 <IDE::enableIRQs(unsigned char, bool)>
c001d952:	5e                   	pop    esi
c001d953:	58                   	pop    eax
c001d954:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d95b:	50                   	push   eax
c001d95c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d962:	e8 af ec ff ff       	call   c001c616 <IDE::prepareInterrupt(unsigned char)>
c001d967:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d96a:	e8 63 ff ff ff       	call   c001d8d2 <ATAPI::readyForCommand()>
c001d96f:	83 c4 10             	add    esp,0x10
c001d972:	84 c0                	test   al,al
c001d974:	75 0a                	jne    c001d980 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001d976:	bb 01 00 00 00       	mov    ebx,0x1
c001d97b:	e9 57 02 00 00       	jmp    c001dbd7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001d980:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c001d986:	c1 e0 04             	shl    eax,0x4
c001d989:	0f b6 c0             	movzx  eax,al
c001d98c:	50                   	push   eax
c001d98d:	6a 06                	push   0x6
c001d98f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d996:	50                   	push   eax
c001d997:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d99d:	e8 9a ec ff ff       	call   c001c63c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d9a2:	6a 00                	push   0x0
c001d9a4:	6a 01                	push   0x1
c001d9a6:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d9ad:	50                   	push   eax
c001d9ae:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d9b4:	e8 83 ec ff ff       	call   c001c63c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d9b9:	83 c4 20             	add    esp,0x20
c001d9bc:	0f b6 c3             	movzx  eax,bl
c001d9bf:	0f b6 df             	movzx  ebx,bh
c001d9c2:	50                   	push   eax
c001d9c3:	6a 04                	push   0x4
c001d9c5:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d9cc:	50                   	push   eax
c001d9cd:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d9d3:	e8 64 ec ff ff       	call   c001c63c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d9d8:	53                   	push   ebx
c001d9d9:	6a 05                	push   0x5
c001d9db:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d9e2:	50                   	push   eax
c001d9e3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d9e9:	e8 4e ec ff ff       	call   c001c63c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d9ee:	83 c4 20             	add    esp,0x20
c001d9f1:	68 a0 00 00 00       	push   0xa0
c001d9f6:	6a 07                	push   0x7
c001d9f8:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d9ff:	50                   	push   eax
c001da00:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001da06:	e8 31 ec ff ff       	call   c001c63c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001da0b:	83 c4 0c             	add    esp,0xc
c001da0e:	6a 01                	push   0x1
c001da10:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001da17:	50                   	push   eax
c001da18:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001da1e:	e8 c5 f7 ff ff       	call   c001d1e8 <IDE::polling(unsigned char, unsigned int)>
c001da23:	83 c4 10             	add    esp,0x10
c001da26:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c001da2c:	84 c0                	test   al,al
c001da2e:	74 23                	je     c001da53 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001da30:	0f b6 d8             	movzx  ebx,al
c001da33:	0f b6 d2             	movzx  edx,dl
c001da36:	53                   	push   ebx
c001da37:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c001da3e:	50                   	push   eax
c001da3f:	52                   	push   edx
c001da40:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001da46:	e8 07 f6 ff ff       	call   c001d052 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001da4b:	83 c4 10             	add    esp,0x10
c001da4e:	e9 84 01 00 00       	jmp    c001dbd7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001da53:	0f b6 d2             	movzx  edx,dl
c001da56:	53                   	push   ebx
c001da57:	53                   	push   ebx
c001da58:	52                   	push   edx
c001da59:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001da5f:	e8 c6 eb ff ff       	call   c001c62a <IDE::getBase(unsigned char)>
c001da64:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001da68:	b9 06 00 00 00       	mov    ecx,0x6
c001da6d:	89 c2                	mov    edx,eax
c001da6f:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001da72:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001da76:	83 c4 10             	add    esp,0x10
c001da79:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001da7f:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001da86:	85 db                	test   ebx,ebx
c001da88:	0f 84 ec 00 00 00    	je     c001db7a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001da8e:	51                   	push   ecx
c001da8f:	51                   	push   ecx
c001da90:	52                   	push   edx
c001da91:	50                   	push   eax
c001da92:	e8 13 ed ff ff       	call   c001c7aa <IDE::waitInterrupt(unsigned char)>
c001da97:	83 c4 10             	add    esp,0x10
c001da9a:	84 c0                	test   al,al
c001da9c:	0f 84 d4 fe ff ff    	je     c001d976 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001daa2:	56                   	push   esi
c001daa3:	56                   	push   esi
c001daa4:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001daab:	50                   	push   eax
c001daac:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dab2:	e8 5f eb ff ff       	call   c001c616 <IDE::prepareInterrupt(unsigned char)>
c001dab7:	83 c4 0c             	add    esp,0xc
c001daba:	6a 04                	push   0x4
c001dabc:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dac3:	50                   	push   eax
c001dac4:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001daca:	e8 2d ec ff ff       	call   c001c6fc <IDE::read(unsigned char, unsigned char)>
c001dacf:	83 c4 0c             	add    esp,0xc
c001dad2:	89 c6                	mov    esi,eax
c001dad4:	6a 05                	push   0x5
c001dad6:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dadd:	50                   	push   eax
c001dade:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dae4:	e8 13 ec ff ff       	call   c001c6fc <IDE::read(unsigned char, unsigned char)>
c001dae9:	89 f1                	mov    ecx,esi
c001daeb:	0f b6 c0             	movzx  eax,al
c001daee:	0f b6 f1             	movzx  esi,cl
c001daf1:	c1 e0 08             	shl    eax,0x8
c001daf4:	09 c6                	or     esi,eax
c001daf6:	d1 fe                	sar    esi,1
c001daf8:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001dafc:	83 c4 10             	add    esp,0x10
c001daff:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001db04:	74 41                	je     c001db47 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c001db06:	31 c9                	xor    ecx,ecx
c001db08:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001db0e:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001db15:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001db19:	75 0a                	jne    c001db25 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c001db1b:	01 c9                	add    ecx,ecx
c001db1d:	01 cd                	add    ebp,ecx
c001db1f:	4b                   	dec    ebx
c001db20:	e9 54 ff ff ff       	jmp    c001da79 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c001db25:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001db2a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001db2e:	51                   	push   ecx
c001db2f:	51                   	push   ecx
c001db30:	52                   	push   edx
c001db31:	50                   	push   eax
c001db32:	e8 f3 ea ff ff       	call   c001c62a <IDE::getBase(unsigned char)>
c001db37:	89 c2                	mov    edx,eax
c001db39:	89 f0                	mov    eax,esi
c001db3b:	66 ef                	out    dx,ax
c001db3d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001db41:	83 c4 10             	add    esp,0x10
c001db44:	41                   	inc    ecx
c001db45:	eb c1                	jmp    c001db08 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c001db47:	31 f6                	xor    esi,esi
c001db49:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001db4f:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001db56:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001db5a:	75 06                	jne    c001db62 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c001db5c:	01 f6                	add    esi,esi
c001db5e:	01 f5                	add    ebp,esi
c001db60:	eb bd                	jmp    c001db1f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c001db62:	51                   	push   ecx
c001db63:	51                   	push   ecx
c001db64:	52                   	push   edx
c001db65:	50                   	push   eax
c001db66:	e8 bf ea ff ff       	call   c001c62a <IDE::getBase(unsigned char)>
c001db6b:	89 c2                	mov    edx,eax
c001db6d:	66 ed                	in     ax,dx
c001db6f:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001db74:	83 c4 10             	add    esp,0x10
c001db77:	46                   	inc    esi
c001db78:	eb cf                	jmp    c001db49 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c001db7a:	51                   	push   ecx
c001db7b:	51                   	push   ecx
c001db7c:	52                   	push   edx
c001db7d:	50                   	push   eax
c001db7e:	e8 27 ec ff ff       	call   c001c7aa <IDE::waitInterrupt(unsigned char)>
c001db83:	83 c4 10             	add    esp,0x10
c001db86:	84 c0                	test   al,al
c001db88:	0f 84 e8 fd ff ff    	je     c001d976 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001db8e:	bb a0 86 01 00       	mov    ebx,0x186a0
c001db93:	52                   	push   edx
c001db94:	52                   	push   edx
c001db95:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001db9c:	50                   	push   eax
c001db9d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dba3:	e8 6e ea ff ff       	call   c001c616 <IDE::prepareInterrupt(unsigned char)>
c001dba8:	83 c4 10             	add    esp,0x10
c001dbab:	50                   	push   eax
c001dbac:	50                   	push   eax
c001dbad:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dbb4:	50                   	push   eax
c001dbb5:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dbbb:	e8 6a ea ff ff       	call   c001c62a <IDE::getBase(unsigned char)>
c001dbc0:	8d 50 07             	lea    edx,[eax+0x7]
c001dbc3:	ec                   	in     al,dx
c001dbc4:	83 c4 10             	add    esp,0x10
c001dbc7:	a8 88                	test   al,0x88
c001dbc9:	74 0a                	je     c001dbd5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001dbcb:	4b                   	dec    ebx
c001dbcc:	75 dd                	jne    c001dbab <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001dbce:	bb 02 00 00 00       	mov    ebx,0x2
c001dbd3:	eb 02                	jmp    c001dbd7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001dbd5:	31 db                	xor    ebx,ebx
c001dbd7:	83 c4 1c             	add    esp,0x1c
c001dbda:	89 d8                	mov    eax,ebx
c001dbdc:	5b                   	pop    ebx
c001dbdd:	5e                   	pop    esi
c001dbde:	5f                   	pop    edi
c001dbdf:	5d                   	pop    ebp
c001dbe0:	c3                   	ret    
c001dbe1:	90                   	nop

c001dbe2 <ATAPI::diskRemoved()>:
c001dbe2:	83 ec 18             	sub    esp,0x18
c001dbe5:	68 f7 33 02 c0       	push   0xc00233f7
c001dbea:	e8 38 15 ff ff       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c001dbef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dbf3:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c001dbfa:	83 c4 1c             	add    esp,0x1c
c001dbfd:	c3                   	ret    

c001dbfe <ATAPI::eject()>:
c001dbfe:	57                   	push   edi
c001dbff:	b9 03 00 00 00       	mov    ecx,0x3
c001dc04:	53                   	push   ebx
c001dc05:	83 ec 14             	sub    esp,0x14
c001dc08:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001dc0c:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001dc10:	fc                   	cld    
c001dc11:	31 c0                	xor    eax,eax
c001dc13:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001dc15:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001dc1a:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001dc1f:	50                   	push   eax
c001dc20:	50                   	push   eax
c001dc21:	6a 00                	push   0x0
c001dc23:	6a 00                	push   0x0
c001dc25:	6a 00                	push   0x0
c001dc27:	6a 02                	push   0x2
c001dc29:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001dc2d:	50                   	push   eax
c001dc2e:	53                   	push   ebx
c001dc2f:	e8 ee fc ff ff       	call   c001d922 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001dc34:	83 c4 14             	add    esp,0x14
c001dc37:	53                   	push   ebx
c001dc38:	e8 a5 ff ff ff       	call   c001dbe2 <ATAPI::diskRemoved()>
c001dc3d:	83 c4 24             	add    esp,0x24
c001dc40:	5b                   	pop    ebx
c001dc41:	5f                   	pop    edi
c001dc42:	c3                   	ret    
c001dc43:	90                   	nop

c001dc44 <ATAPI::diskInserted()>:
c001dc44:	53                   	push   ebx
c001dc45:	83 ec 14             	sub    esp,0x14
c001dc48:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001dc4c:	68 0d 34 02 c0       	push   0xc002340d
c001dc51:	e8 d1 14 ff ff       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c001dc56:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c001dc5d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001dc60:	e8 3b 2d ff ff       	call   c00109a0 <PhysicalDisk::startCache()>
c001dc65:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001dc69:	83 c4 18             	add    esp,0x18
c001dc6c:	5b                   	pop    ebx
c001dc6d:	e9 f6 4c ff ff       	jmp    c0012968 <createPartitionsForDisk(PhysicalDisk*)>

c001dc72 <ATAPI::detectMedia()>:
c001dc72:	56                   	push   esi
c001dc73:	53                   	push   ebx
c001dc74:	83 ec 28             	sub    esp,0x28
c001dc77:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001dc7b:	6a 0c                	push   0xc
c001dc7d:	6a 00                	push   0x0
c001dc7f:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001dc83:	56                   	push   esi
c001dc84:	e8 4a 2a fe ff       	call   c00006d3 <memset>
c001dc89:	58                   	pop    eax
c001dc8a:	5a                   	pop    edx
c001dc8b:	6a 00                	push   0x0
c001dc8d:	6a 00                	push   0x0
c001dc8f:	6a 00                	push   0x0
c001dc91:	6a 00                	push   0x0
c001dc93:	56                   	push   esi
c001dc94:	53                   	push   ebx
c001dc95:	e8 88 fc ff ff       	call   c001d922 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001dc9a:	83 c4 1c             	add    esp,0x1c
c001dc9d:	6a 0c                	push   0xc
c001dc9f:	6a 00                	push   0x0
c001dca1:	56                   	push   esi
c001dca2:	e8 2c 2a fe ff       	call   c00006d3 <memset>
c001dca7:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001dcac:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001dcb1:	59                   	pop    ecx
c001dcb2:	58                   	pop    eax
c001dcb3:	6a 01                	push   0x1
c001dcb5:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001dcb9:	50                   	push   eax
c001dcba:	6a 00                	push   0x0
c001dcbc:	6a 12                	push   0x12
c001dcbe:	56                   	push   esi
c001dcbf:	53                   	push   ebx
c001dcc0:	e8 5d fc ff ff       	call   c001d922 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001dcc5:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001dcc9:	83 c4 20             	add    esp,0x20
c001dccc:	83 e0 7f             	and    eax,0x7f
c001dccf:	3c 70                	cmp    al,0x70
c001dcd1:	74 15                	je     c001dce8 <ATAPI::detectMedia()+0x76>
c001dcd3:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001dcda:	75 0c                	jne    c001dce8 <ATAPI::detectMedia()+0x76>
c001dcdc:	83 ec 0c             	sub    esp,0xc
c001dcdf:	53                   	push   ebx
c001dce0:	e8 5f ff ff ff       	call   c001dc44 <ATAPI::diskInserted()>
c001dce5:	83 c4 10             	add    esp,0x10
c001dce8:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001dcec:	83 e0 0f             	and    eax,0xf
c001dcef:	3c 02                	cmp    al,0x2
c001dcf1:	75 1b                	jne    c001dd0e <ATAPI::detectMedia()+0x9c>
c001dcf3:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001dcf8:	75 2d                	jne    c001dd27 <ATAPI::detectMedia()+0xb5>
c001dcfa:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001dd01:	74 24                	je     c001dd27 <ATAPI::detectMedia()+0xb5>
c001dd03:	83 ec 0c             	sub    esp,0xc
c001dd06:	53                   	push   ebx
c001dd07:	e8 d6 fe ff ff       	call   c001dbe2 <ATAPI::diskRemoved()>
c001dd0c:	eb 16                	jmp    c001dd24 <ATAPI::detectMedia()+0xb2>
c001dd0e:	84 c0                	test   al,al
c001dd10:	75 15                	jne    c001dd27 <ATAPI::detectMedia()+0xb5>
c001dd12:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001dd19:	75 0c                	jne    c001dd27 <ATAPI::detectMedia()+0xb5>
c001dd1b:	83 ec 0c             	sub    esp,0xc
c001dd1e:	53                   	push   ebx
c001dd1f:	e8 20 ff ff ff       	call   c001dc44 <ATAPI::diskInserted()>
c001dd24:	83 c4 10             	add    esp,0x10
c001dd27:	83 c4 24             	add    esp,0x24
c001dd2a:	5b                   	pop    ebx
c001dd2b:	5e                   	pop    esi
c001dd2c:	c3                   	ret    
c001dd2d:	90                   	nop

c001dd2e <ATAPI::open(int, int, void*)>:
c001dd2e:	53                   	push   ebx
c001dd2f:	83 ec 08             	sub    esp,0x8
c001dd32:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001dd36:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001dd3a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001dd3e:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001dd44:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001dd4a:	c1 e0 06             	shl    eax,0x6
c001dd4d:	01 d0                	add    eax,edx
c001dd4f:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001dd56:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001dd5c:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001dd63:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001dd6d:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001dd73:	6a 04                	push   0x4
c001dd75:	6a 0c                	push   0xc
c001dd77:	51                   	push   ecx
c001dd78:	52                   	push   edx
c001dd79:	e8 be e8 ff ff       	call   c001c63c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dd7e:	90                   	nop
c001dd7f:	90                   	nop
c001dd80:	6a 00                	push   0x0
c001dd82:	6a 0c                	push   0xc
c001dd84:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001dd8b:	50                   	push   eax
c001dd8c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001dd92:	e8 a5 e8 ff ff       	call   c001c63c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dd97:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001dd9e:	83 c4 14             	add    esp,0x14
c001dda1:	53                   	push   ebx
c001dda2:	e8 cb fe ff ff       	call   c001dc72 <ATAPI::detectMedia()>
c001dda7:	31 c0                	xor    eax,eax
c001dda9:	83 c4 18             	add    esp,0x18
c001ddac:	5b                   	pop    ebx
c001ddad:	c3                   	ret    

c001ddae <ATAPI::read(unsigned long long, int, void*)>:
c001ddae:	55                   	push   ebp
c001ddaf:	57                   	push   edi
c001ddb0:	56                   	push   esi
c001ddb1:	53                   	push   ebx
c001ddb2:	83 ec 1c             	sub    esp,0x1c
c001ddb5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001ddb9:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001ddbd:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001ddc1:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c001ddc8:	74 41                	je     c001de0b <ATAPI::read(unsigned long long, int, void*)+0x5d>
c001ddca:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001ddce:	b9 03 00 00 00       	mov    ecx,0x3
c001ddd3:	fc                   	cld    
c001ddd4:	31 c0                	xor    eax,eax
c001ddd6:	86 fb                	xchg   bl,bh
c001ddd8:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001ddda:	c1 c3 10             	rol    ebx,0x10
c001dddd:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001dde2:	89 e8                	mov    eax,ebp
c001dde4:	86 fb                	xchg   bl,bh
c001dde6:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001ddea:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c001ddee:	50                   	push   eax
c001ddef:	50                   	push   eax
c001ddf0:	55                   	push   ebp
c001ddf1:	c1 e5 0b             	shl    ebp,0xb
c001ddf4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001ddf8:	6a 00                	push   0x0
c001ddfa:	55                   	push   ebp
c001ddfb:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ddff:	50                   	push   eax
c001de00:	56                   	push   esi
c001de01:	e8 1c fb ff ff       	call   c001d922 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001de06:	83 c4 20             	add    esp,0x20
c001de09:	eb 1a                	jmp    c001de25 <ATAPI::read(unsigned long long, int, void*)+0x77>
c001de0b:	83 ec 0c             	sub    esp,0xc
c001de0e:	56                   	push   esi
c001de0f:	e8 5e fe ff ff       	call   c001dc72 <ATAPI::detectMedia()>
c001de14:	83 c4 10             	add    esp,0x10
c001de17:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c001de1e:	75 aa                	jne    c001ddca <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001de20:	b8 02 00 00 00       	mov    eax,0x2
c001de25:	83 c4 1c             	add    esp,0x1c
c001de28:	5b                   	pop    ebx
c001de29:	5e                   	pop    esi
c001de2a:	5f                   	pop    edi
c001de2b:	5d                   	pop    ebp
c001de2c:	c3                   	ret    
c001de2d:	90                   	nop

c001de2e <AVX::open(int, int, void*)>:
c001de2e:	83 ec 0c             	sub    esp,0xc
c001de31:	e8 12 10 00 00       	call   c001ee48 <avxInit>
c001de36:	b8 00 00 00 00       	mov    eax,0x0
c001de3b:	83 c4 0c             	add    esp,0xc
c001de3e:	c3                   	ret    
c001de3f:	90                   	nop

c001de40 <AVX::close(int, int, void*)>:
c001de40:	83 ec 0c             	sub    esp,0xc
c001de43:	e8 01 10 00 00       	call   c001ee49 <avxClose>
c001de48:	b8 00 00 00 00       	mov    eax,0x0
c001de4d:	83 c4 0c             	add    esp,0xc
c001de50:	c3                   	ret    
c001de51:	90                   	nop

c001de52 <AVX::available()>:
c001de52:	83 ec 0c             	sub    esp,0xc
c001de55:	e8 e6 0f 00 00       	call   c001ee40 <avxDetect>
c001de5a:	85 c0                	test   eax,eax
c001de5c:	0f 95 c0             	setne  al
c001de5f:	83 c4 0c             	add    esp,0xc
c001de62:	c3                   	ret    
c001de63:	90                   	nop

c001de64 <AVX::save(void*)>:
c001de64:	83 ec 0c             	sub    esp,0xc
c001de67:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001de6b:	83 ec 0c             	sub    esp,0xc
c001de6e:	50                   	push   eax
c001de6f:	e8 d2 0f 00 00       	call   c001ee46 <avxSave>
c001de74:	83 c4 10             	add    esp,0x10
c001de77:	90                   	nop
c001de78:	83 c4 0c             	add    esp,0xc
c001de7b:	c3                   	ret    

c001de7c <AVX::load(void*)>:
c001de7c:	83 ec 0c             	sub    esp,0xc
c001de7f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001de83:	83 ec 0c             	sub    esp,0xc
c001de86:	50                   	push   eax
c001de87:	e8 bb 0f 00 00       	call   c001ee47 <avxLoad>
c001de8c:	83 c4 10             	add    esp,0x10
c001de8f:	90                   	nop
c001de90:	83 c4 0c             	add    esp,0xc
c001de93:	c3                   	ret    

c001de94 <AVX::AVX()>:
c001de94:	83 ec 0c             	sub    esp,0xc
c001de97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de9b:	83 ec 08             	sub    esp,0x8
c001de9e:	68 58 34 02 c0       	push   0xc0023458
c001dea3:	50                   	push   eax
c001dea4:	e8 6d 2b ff ff       	call   c0010a16 <FPU::FPU(char const*)>
c001dea9:	83 c4 10             	add    esp,0x10
c001deac:	ba 68 34 02 c0       	mov    edx,0xc0023468
c001deb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001deb5:	89 10                	mov    DWORD PTR [eax],edx
c001deb7:	90                   	nop
c001deb8:	83 c4 0c             	add    esp,0xc
c001debb:	c3                   	ret    

c001debc <MMX::available()>:
c001debc:	a1 88 43 02 c0       	mov    eax,ds:0xc0024388
c001dec1:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001dec7:	83 e0 20             	and    eax,0x20
c001deca:	84 c0                	test   al,al
c001decc:	0f 95 c0             	setne  al
c001decf:	c3                   	ret    

c001ded0 <MMX::open(int, int, void*)>:
c001ded0:	83 ec 0c             	sub    esp,0xc
c001ded3:	e8 e4 0f 00 00       	call   c001eebc <x87Init>
c001ded8:	b8 00 00 00 00       	mov    eax,0x0
c001dedd:	83 c4 0c             	add    esp,0xc
c001dee0:	c3                   	ret    
c001dee1:	90                   	nop

c001dee2 <MMX::close(int, int, void*)>:
c001dee2:	83 ec 0c             	sub    esp,0xc
c001dee5:	e8 ec 0f 00 00       	call   c001eed6 <x87Close>
c001deea:	b8 00 00 00 00       	mov    eax,0x0
c001deef:	83 c4 0c             	add    esp,0xc
c001def2:	c3                   	ret    
c001def3:	90                   	nop

c001def4 <MMX::save(void*)>:
c001def4:	83 ec 0c             	sub    esp,0xc
c001def7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001defb:	83 ec 0c             	sub    esp,0xc
c001defe:	50                   	push   eax
c001deff:	e8 ad 0f 00 00       	call   c001eeb1 <x87Save>
c001df04:	83 c4 10             	add    esp,0x10
c001df07:	90                   	nop
c001df08:	83 c4 0c             	add    esp,0xc
c001df0b:	c3                   	ret    

c001df0c <MMX::load(void*)>:
c001df0c:	83 ec 0c             	sub    esp,0xc
c001df0f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001df13:	83 ec 0c             	sub    esp,0xc
c001df16:	50                   	push   eax
c001df17:	e8 9b 0f 00 00       	call   c001eeb7 <x87Load>
c001df1c:	83 c4 10             	add    esp,0x10
c001df1f:	90                   	nop
c001df20:	83 c4 0c             	add    esp,0xc
c001df23:	c3                   	ret    

c001df24 <MMX::MMX()>:
c001df24:	83 ec 0c             	sub    esp,0xc
c001df27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001df2b:	83 ec 08             	sub    esp,0x8
c001df2e:	68 98 34 02 c0       	push   0xc0023498
c001df33:	50                   	push   eax
c001df34:	e8 dd 2a ff ff       	call   c0010a16 <FPU::FPU(char const*)>
c001df39:	83 c4 10             	add    esp,0x10
c001df3c:	ba a8 34 02 c0       	mov    edx,0xc00234a8
c001df41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001df45:	89 10                	mov    DWORD PTR [eax],edx
c001df47:	90                   	nop
c001df48:	83 c4 0c             	add    esp,0xc
c001df4b:	c3                   	ret    

c001df4c <SSE::open(int, int, void*)>:
c001df4c:	83 ec 0c             	sub    esp,0xc
c001df4f:	e8 23 0f 00 00       	call   c001ee77 <sseInit>
c001df54:	b8 00 00 00 00       	mov    eax,0x0
c001df59:	83 c4 0c             	add    esp,0xc
c001df5c:	c3                   	ret    
c001df5d:	90                   	nop

c001df5e <SSE::close(int, int, void*)>:
c001df5e:	83 ec 0c             	sub    esp,0xc
c001df61:	e8 21 0f 00 00       	call   c001ee87 <sseClose>
c001df66:	b8 00 00 00 00       	mov    eax,0x0
c001df6b:	83 c4 0c             	add    esp,0xc
c001df6e:	c3                   	ret    
c001df6f:	90                   	nop

c001df70 <SSE::available()>:
c001df70:	83 ec 1c             	sub    esp,0x1c
c001df73:	e8 d8 0e 00 00       	call   c001ee50 <sseDetect>
c001df78:	85 c0                	test   eax,eax
c001df7a:	0f 95 c0             	setne  al
c001df7d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001df81:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001df85:	83 c4 1c             	add    esp,0x1c
c001df88:	c3                   	ret    
c001df89:	90                   	nop

c001df8a <SSE::save(void*)>:
c001df8a:	83 ec 0c             	sub    esp,0xc
c001df8d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001df91:	83 ec 0c             	sub    esp,0xc
c001df94:	50                   	push   eax
c001df95:	e8 d1 0e 00 00       	call   c001ee6b <sseSave>
c001df9a:	83 c4 10             	add    esp,0x10
c001df9d:	90                   	nop
c001df9e:	83 c4 0c             	add    esp,0xc
c001dfa1:	c3                   	ret    

c001dfa2 <SSE::load(void*)>:
c001dfa2:	83 ec 0c             	sub    esp,0xc
c001dfa5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001dfa9:	83 ec 0c             	sub    esp,0xc
c001dfac:	50                   	push   eax
c001dfad:	e8 bf 0e 00 00       	call   c001ee71 <sseLoad>
c001dfb2:	83 c4 10             	add    esp,0x10
c001dfb5:	90                   	nop
c001dfb6:	83 c4 0c             	add    esp,0xc
c001dfb9:	c3                   	ret    

c001dfba <SSE::SSE()>:
c001dfba:	83 ec 0c             	sub    esp,0xc
c001dfbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dfc1:	83 ec 08             	sub    esp,0x8
c001dfc4:	68 d8 34 02 c0       	push   0xc00234d8
c001dfc9:	50                   	push   eax
c001dfca:	e8 47 2a ff ff       	call   c0010a16 <FPU::FPU(char const*)>
c001dfcf:	83 c4 10             	add    esp,0x10
c001dfd2:	ba e8 34 02 c0       	mov    edx,0xc00234e8
c001dfd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dfdb:	89 10                	mov    DWORD PTR [eax],edx
c001dfdd:	90                   	nop
c001dfde:	83 c4 0c             	add    esp,0xc
c001dfe1:	c3                   	ret    

c001dfe2 <x87::open(int, int, void*)>:
c001dfe2:	83 ec 0c             	sub    esp,0xc
c001dfe5:	e8 d2 0e 00 00       	call   c001eebc <x87Init>
c001dfea:	b8 00 00 00 00       	mov    eax,0x0
c001dfef:	83 c4 0c             	add    esp,0xc
c001dff2:	c3                   	ret    
c001dff3:	90                   	nop

c001dff4 <x87::close(int, int, void*)>:
c001dff4:	83 ec 0c             	sub    esp,0xc
c001dff7:	e8 da 0e 00 00       	call   c001eed6 <x87Close>
c001dffc:	b8 00 00 00 00       	mov    eax,0x0
c001e001:	83 c4 0c             	add    esp,0xc
c001e004:	c3                   	ret    
c001e005:	90                   	nop

c001e006 <x87::available()>:
c001e006:	83 ec 0c             	sub    esp,0xc
c001e009:	e8 88 0e 00 00       	call   c001ee96 <x87Detect>
c001e00e:	85 c0                	test   eax,eax
c001e010:	0f 95 c0             	setne  al
c001e013:	83 c4 0c             	add    esp,0xc
c001e016:	c3                   	ret    
c001e017:	90                   	nop

c001e018 <x87::save(void*)>:
c001e018:	83 ec 0c             	sub    esp,0xc
c001e01b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e01f:	83 ec 0c             	sub    esp,0xc
c001e022:	50                   	push   eax
c001e023:	e8 89 0e 00 00       	call   c001eeb1 <x87Save>
c001e028:	83 c4 10             	add    esp,0x10
c001e02b:	90                   	nop
c001e02c:	83 c4 0c             	add    esp,0xc
c001e02f:	c3                   	ret    

c001e030 <x87::load(void*)>:
c001e030:	83 ec 0c             	sub    esp,0xc
c001e033:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e037:	83 ec 0c             	sub    esp,0xc
c001e03a:	50                   	push   eax
c001e03b:	e8 77 0e 00 00       	call   c001eeb7 <x87Load>
c001e040:	83 c4 10             	add    esp,0x10
c001e043:	90                   	nop
c001e044:	83 c4 0c             	add    esp,0xc
c001e047:	c3                   	ret    

c001e048 <x87::x87()>:
c001e048:	83 ec 0c             	sub    esp,0xc
c001e04b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e04f:	83 ec 08             	sub    esp,0x8
c001e052:	68 18 35 02 c0       	push   0xc0023518
c001e057:	50                   	push   eax
c001e058:	e8 b9 29 ff ff       	call   c0010a16 <FPU::FPU(char const*)>
c001e05d:	83 c4 10             	add    esp,0x10
c001e060:	ba 28 35 02 c0       	mov    edx,0xc0023528
c001e065:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e069:	89 10                	mov    DWORD PTR [eax],edx
c001e06b:	90                   	nop
c001e06c:	83 c4 0c             	add    esp,0xc
c001e06f:	c3                   	ret    

c001e070 <APIC::disable()>:
c001e070:	90                   	nop
c001e071:	c3                   	ret    

c001e072 <APIC::close(int, int, void*)>:
c001e072:	55                   	push   ebp
c001e073:	89 e5                	mov    ebp,esp
c001e075:	83 ec 08             	sub    esp,0x8
c001e078:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e07b:	8b 00                	mov    eax,DWORD PTR [eax]
c001e07d:	83 c0 3c             	add    eax,0x3c
c001e080:	8b 00                	mov    eax,DWORD PTR [eax]
c001e082:	83 ec 0c             	sub    esp,0xc
c001e085:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e088:	ff d0                	call   eax
c001e08a:	83 c4 10             	add    esp,0x10
c001e08d:	b8 00 00 00 00       	mov    eax,0x0
c001e092:	c9                   	leave  
c001e093:	c3                   	ret    

c001e094 <IOAPIC::close(int, int, void*)>:
c001e094:	b8 00 00 00 00       	mov    eax,0x0
c001e099:	c3                   	ret    

c001e09a <APIC::io_wait()>:
c001e09a:	eb 00                	jmp    c001e09c <APIC::io_wait()+0x2>
c001e09c:	eb 00                	jmp    c001e09e <APIC::io_wait()+0x4>
c001e09e:	90                   	nop
c001e09f:	c3                   	ret    

c001e0a0 <APIC::getBase()>:
c001e0a0:	55                   	push   ebp
c001e0a1:	89 e5                	mov    ebp,esp
c001e0a3:	83 ec 18             	sub    esp,0x18
c001e0a6:	a1 88 43 02 c0       	mov    eax,ds:0xc0024388
c001e0ab:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001e0b1:	83 e0 08             	and    eax,0x8
c001e0b4:	84 c0                	test   al,al
c001e0b6:	75 07                	jne    c001e0bf <APIC::getBase()+0x1f>
c001e0b8:	b8 00 00 00 00       	mov    eax,0x0
c001e0bd:	eb 21                	jmp    c001e0e0 <APIC::getBase()+0x40>
c001e0bf:	a1 88 43 02 c0       	mov    eax,ds:0xc0024388
c001e0c4:	83 ec 08             	sub    esp,0x8
c001e0c7:	6a 1b                	push   0x1b
c001e0c9:	50                   	push   eax
c001e0ca:	e8 07 d5 fe ff       	call   c000b5d6 <Computer::rdmsr(unsigned int)>
c001e0cf:	83 c4 10             	add    esp,0x10
c001e0d2:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001e0d5:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001e0d8:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e0db:	25 00 f0 ff ff       	and    eax,0xfffff000
c001e0e0:	c9                   	leave  
c001e0e1:	c3                   	ret    

c001e0e2 <APIC::eoi(unsigned char)>:
c001e0e2:	55                   	push   ebp
c001e0e3:	89 e5                	mov    ebp,esp
c001e0e5:	83 ec 28             	sub    esp,0x28
c001e0e8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e0eb:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001e0ee:	83 ec 0c             	sub    esp,0xc
c001e0f1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e0f4:	e8 a7 ff ff ff       	call   c001e0a0 <APIC::getBase()>
c001e0f9:	83 c4 10             	add    esp,0x10
c001e0fc:	05 b0 00 00 00       	add    eax,0xb0
c001e101:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001e104:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001e107:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001e10d:	90                   	nop
c001e10e:	c9                   	leave  
c001e10f:	c3                   	ret    

c001e110 <APIC::open(int, int, void*)>:
c001e110:	55                   	push   ebp
c001e111:	89 e5                	mov    ebp,esp
c001e113:	57                   	push   edi
c001e114:	56                   	push   esi
c001e115:	53                   	push   ebx
c001e116:	83 ec 1c             	sub    esp,0x1c
c001e119:	83 ec 0c             	sub    esp,0xc
c001e11c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e11f:	e8 7c ff ff ff       	call   c001e0a0 <APIC::getBase()>
c001e124:	83 c4 10             	add    esp,0x10
c001e127:	05 f0 00 00 00       	add    eax,0xf0
c001e12c:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001e12f:	83 ec 0c             	sub    esp,0xc
c001e132:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e135:	e8 66 ff ff ff       	call   c001e0a0 <APIC::getBase()>
c001e13a:	83 c4 10             	add    esp,0x10
c001e13d:	89 c2                	mov    edx,eax
c001e13f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e142:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e148:	0f b6 f8             	movzx  edi,al
c001e14b:	89 d0                	mov    eax,edx
c001e14d:	ba 00 00 00 00       	mov    edx,0x0
c001e152:	89 c1                	mov    ecx,eax
c001e154:	80 e5 ff             	and    ch,0xff
c001e157:	89 cb                	mov    ebx,ecx
c001e159:	0f b6 f2             	movzx  esi,dl
c001e15c:	89 d8                	mov    eax,ebx
c001e15e:	89 f2                	mov    edx,esi
c001e160:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001e163:	8d 5f 08             	lea    ebx,[edi+0x8]
c001e166:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001e16a:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001e16e:	83 e0 00             	and    eax,0x0
c001e171:	09 d0                	or     eax,edx
c001e173:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001e177:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e17a:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e180:	8d 50 01             	lea    edx,[eax+0x1]
c001e183:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001e186:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001e18c:	0f b6 d0             	movzx  edx,al
c001e18f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e192:	83 c2 08             	add    edx,0x8
c001e195:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001e199:	0f b6 c9             	movzx  ecx,cl
c001e19c:	81 c9 00 00 01 00    	or     ecx,0x10000
c001e1a2:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001e1a6:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001e1a9:	8b 00                	mov    eax,DWORD PTR [eax]
c001e1ab:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001e1ae:	81 4d e0 00 01 00 00 	or     DWORD PTR [ebp-0x20],0x100
c001e1b5:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001e1b8:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c001e1bb:	89 10                	mov    DWORD PTR [eax],edx
c001e1bd:	b8 00 00 00 00       	mov    eax,0x0
c001e1c2:	8d 65 f4             	lea    esp,[ebp-0xc]
c001e1c5:	5b                   	pop    ebx
c001e1c6:	5e                   	pop    esi
c001e1c7:	5f                   	pop    edi
c001e1c8:	5d                   	pop    ebp
c001e1c9:	c3                   	ret    

c001e1ca <IOAPIC::IOAPIC()>:
c001e1ca:	83 ec 0c             	sub    esp,0xc
c001e1cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1d1:	83 ec 08             	sub    esp,0x8
c001e1d4:	68 58 35 02 c0       	push   0xc0023558
c001e1d9:	50                   	push   eax
c001e1da:	e8 43 25 ff ff       	call   c0010722 <Device::Device(char const*)>
c001e1df:	83 c4 10             	add    esp,0x10
c001e1e2:	ba 80 36 02 c0       	mov    edx,0xc0023680
c001e1e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1eb:	89 10                	mov    DWORD PTR [eax],edx
c001e1ed:	90                   	nop
c001e1ee:	83 c4 0c             	add    esp,0xc
c001e1f1:	c3                   	ret    

c001e1f2 <APIC::APIC()>:
c001e1f2:	53                   	push   ebx
c001e1f3:	83 ec 18             	sub    esp,0x18
c001e1f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e1fa:	83 ec 08             	sub    esp,0x8
c001e1fd:	68 60 35 02 c0       	push   0xc0023560
c001e202:	50                   	push   eax
c001e203:	e8 68 2c ff ff       	call   c0010e70 <InterruptController::InterruptController(char const*)>
c001e208:	83 c4 10             	add    esp,0x10
c001e20b:	ba 38 36 02 c0       	mov    edx,0xc0023638
c001e210:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e214:	89 10                	mov    DWORD PTR [eax],edx
c001e216:	a0 80 61 02 c0       	mov    al,ds:0xc0026180
c001e21b:	83 f0 01             	xor    eax,0x1
c001e21e:	84 c0                	test   al,al
c001e220:	0f 84 96 00 00 00    	je     c001e2bc <APIC::APIC()+0xca>
c001e226:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001e22b:	a0 30 4c 02 c0       	mov    al,ds:0xc0024c30
c001e230:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c001e234:	73 7f                	jae    c001e2b5 <APIC::APIC()+0xc3>
c001e236:	83 ec 0c             	sub    esp,0xc
c001e239:	68 68 01 00 00       	push   0x168
c001e23e:	e8 f5 0d ff ff       	call   c000f038 <operator new(unsigned long)>
c001e243:	83 c4 10             	add    esp,0x10
c001e246:	89 c3                	mov    ebx,eax
c001e248:	83 ec 0c             	sub    esp,0xc
c001e24b:	53                   	push   ebx
c001e24c:	e8 79 ff ff ff       	call   c001e1ca <IOAPIC::IOAPIC()>
c001e251:	83 c4 10             	add    esp,0x10
c001e254:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001e258:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001e25d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001e261:	89 14 85 60 61 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9ea0],edx
c001e268:	a1 40 61 02 c0       	mov    eax,ds:0xc0026140
c001e26d:	40                   	inc    eax
c001e26e:	a3 40 61 02 c0       	mov    ds:0xc0026140,eax
c001e273:	a1 88 43 02 c0       	mov    eax,ds:0xc0024388
c001e278:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001e27e:	83 ec 08             	sub    esp,0x8
c001e281:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001e285:	50                   	push   eax
c001e286:	e8 a7 22 ff ff       	call   c0010532 <Device::addChild(Device*)>
c001e28b:	83 c4 10             	add    esp,0x10
c001e28e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e292:	8b 00                	mov    eax,DWORD PTR [eax]
c001e294:	83 c0 08             	add    eax,0x8
c001e297:	8b 00                	mov    eax,DWORD PTR [eax]
c001e299:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001e29e:	6a 00                	push   0x0
c001e2a0:	6a 00                	push   0x0
c001e2a2:	52                   	push   edx
c001e2a3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001e2a7:	ff d0                	call   eax
c001e2a9:	83 c4 10             	add    esp,0x10
c001e2ac:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c001e2b0:	e9 76 ff ff ff       	jmp    c001e22b <APIC::APIC()+0x39>
c001e2b5:	c6 05 80 61 02 c0 01 	mov    BYTE PTR ds:0xc0026180,0x1
c001e2bc:	90                   	nop
c001e2bd:	83 c4 18             	add    esp,0x18
c001e2c0:	5b                   	pop    ebx
c001e2c1:	c3                   	ret    

c001e2c2 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001e2c2:	55                   	push   ebp
c001e2c3:	89 e5                	mov    ebp,esp
c001e2c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e2c8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001e2ce:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001e2d1:	72 1d                	jb     c001e2f0 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001e2d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e2d6:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001e2dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e2df:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001e2e5:	01 d0                	add    eax,edx
c001e2e7:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001e2ea:	73 04                	jae    c001e2f0 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001e2ec:	b0 01                	mov    al,0x1
c001e2ee:	eb 02                	jmp    c001e2f2 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001e2f0:	b0 00                	mov    al,0x0
c001e2f2:	5d                   	pop    ebp
c001e2f3:	c3                   	ret    

c001e2f4 <IOAPIC::read(int)>:
c001e2f4:	55                   	push   ebp
c001e2f5:	89 e5                	mov    ebp,esp
c001e2f7:	83 ec 10             	sub    esp,0x10
c001e2fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e2fd:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001e303:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001e306:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e309:	0f b6 d0             	movzx  edx,al
c001e30c:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e30f:	89 10                	mov    DWORD PTR [eax],edx
c001e311:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e314:	83 c0 10             	add    eax,0x10
c001e317:	8b 00                	mov    eax,DWORD PTR [eax]
c001e319:	c9                   	leave  
c001e31a:	c3                   	ret    
c001e31b:	90                   	nop

c001e31c <IOAPIC::open(int, int, void*)>:
c001e31c:	55                   	push   ebp
c001e31d:	89 e5                	mov    ebp,esp
c001e31f:	57                   	push   edi
c001e320:	56                   	push   esi
c001e321:	53                   	push   ebx
c001e322:	83 ec 0c             	sub    esp,0xc
c001e325:	83 ec 0c             	sub    esp,0xc
c001e328:	68 8b 35 02 c0       	push   0xc002358b
c001e32d:	e8 f5 0d ff ff       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c001e332:	83 c4 10             	add    esp,0x10
c001e335:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e338:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001e33b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001e341:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e344:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e34a:	8b 14 85 60 4c 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdb3a0]
c001e351:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e354:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001e35a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e35d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e363:	8b 14 85 e0 4c 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdb320]
c001e36a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e36d:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001e373:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e376:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001e37c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e37f:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e385:	0f b6 f8             	movzx  edi,al
c001e388:	89 d0                	mov    eax,edx
c001e38a:	ba 00 00 00 00       	mov    edx,0x0
c001e38f:	89 c1                	mov    ecx,eax
c001e391:	80 e5 ff             	and    ch,0xff
c001e394:	89 cb                	mov    ebx,ecx
c001e396:	0f b6 f2             	movzx  esi,dl
c001e399:	89 d8                	mov    eax,ebx
c001e39b:	89 f2                	mov    edx,esi
c001e39d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001e3a0:	8d 5f 08             	lea    ebx,[edi+0x8]
c001e3a3:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001e3a7:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001e3ab:	83 e0 00             	and    eax,0x0
c001e3ae:	09 d0                	or     eax,edx
c001e3b0:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001e3b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e3b7:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e3bd:	8d 50 01             	lea    edx,[eax+0x1]
c001e3c0:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001e3c3:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001e3c9:	0f b6 d0             	movzx  edx,al
c001e3cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e3cf:	83 c2 08             	add    edx,0x8
c001e3d2:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001e3d6:	0f b6 c9             	movzx  ecx,cl
c001e3d9:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001e3df:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001e3e3:	83 ec 08             	sub    esp,0x8
c001e3e6:	6a 01                	push   0x1
c001e3e8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e3eb:	e8 04 ff ff ff       	call   c001e2f4 <IOAPIC::read(int)>
c001e3f0:	83 c4 10             	add    esp,0x10
c001e3f3:	c1 f8 10             	sar    eax,0x10
c001e3f6:	0f b6 c0             	movzx  eax,al
c001e3f9:	8d 50 01             	lea    edx,[eax+0x1]
c001e3fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e3ff:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001e405:	b8 00 00 00 00       	mov    eax,0x0
c001e40a:	8d 65 f4             	lea    esp,[ebp-0xc]
c001e40d:	5b                   	pop    ebx
c001e40e:	5e                   	pop    esi
c001e40f:	5f                   	pop    edi
c001e410:	5d                   	pop    ebp
c001e411:	c3                   	ret    

c001e412 <IOAPIC::write(int, int)>:
c001e412:	55                   	push   ebp
c001e413:	89 e5                	mov    ebp,esp
c001e415:	83 ec 10             	sub    esp,0x10
c001e418:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e41b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001e421:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001e424:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e427:	0f b6 d0             	movzx  edx,al
c001e42a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e42d:	89 10                	mov    DWORD PTR [eax],edx
c001e42f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e432:	8d 50 10             	lea    edx,[eax+0x10]
c001e435:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001e438:	89 02                	mov    DWORD PTR [edx],eax
c001e43a:	90                   	nop
c001e43b:	c9                   	leave  
c001e43c:	c3                   	ret    
c001e43d:	90                   	nop

c001e43e <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char)>:
c001e43e:	55                   	push   ebp
c001e43f:	89 e5                	mov    ebp,esp
c001e441:	83 ec 20             	sub    esp,0x20
c001e444:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e447:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001e44a:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c001e44d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001e450:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001e453:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001e456:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001e459:	88 d0                	mov    al,dl
c001e45b:	88 45 e8             	mov    BYTE PTR [ebp-0x18],al
c001e45e:	0f b6 45 ec          	movzx  eax,BYTE PTR [ebp-0x14]
c001e462:	83 c0 08             	add    eax,0x8
c001e465:	01 c0                	add    eax,eax
c001e467:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001e46a:	0f b6 45 ec          	movzx  eax,BYTE PTR [ebp-0x14]
c001e46e:	83 c0 08             	add    eax,0x8
c001e471:	01 c0                	add    eax,eax
c001e473:	40                   	inc    eax
c001e474:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
c001e477:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c001e47a:	50                   	push   eax
c001e47b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e47e:	e8 71 fe ff ff       	call   c001e2f4 <IOAPIC::read(int)>
c001e483:	83 c4 08             	add    esp,0x8
c001e486:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001e489:	81 65 f4 ff ff ff 00 	and    DWORD PTR [ebp-0xc],0xffffff
c001e490:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c001e493:	c1 e0 18             	shl    eax,0x18
c001e496:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001e499:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001e49c:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c001e49f:	52                   	push   edx
c001e4a0:	50                   	push   eax
c001e4a1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e4a4:	e8 69 ff ff ff       	call   c001e412 <IOAPIC::write(int, int)>
c001e4a9:	83 c4 0c             	add    esp,0xc
c001e4ac:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e4af:	50                   	push   eax
c001e4b0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e4b3:	e8 3c fe ff ff       	call   c001e2f4 <IOAPIC::read(int)>
c001e4b8:	83 c4 08             	add    esp,0x8
c001e4bb:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001e4be:	81 65 f0 ff ff fe ff 	and    DWORD PTR [ebp-0x10],0xfffeffff
c001e4c5:	81 65 f0 ff f7 ff ff 	and    DWORD PTR [ebp-0x10],0xfffff7ff
c001e4cc:	81 65 f0 ff f8 ff ff 	and    DWORD PTR [ebp-0x10],0xfffff8ff
c001e4d3:	81 65 f0 00 ff ff ff 	and    DWORD PTR [ebp-0x10],0xffffff00
c001e4da:	0f b6 45 e8          	movzx  eax,BYTE PTR [ebp-0x18]
c001e4de:	09 45 f0             	or     DWORD PTR [ebp-0x10],eax
c001e4e1:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c001e4e4:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e4e7:	52                   	push   edx
c001e4e8:	50                   	push   eax
c001e4e9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e4ec:	e8 21 ff ff ff       	call   c001e412 <IOAPIC::write(int, int)>
c001e4f1:	83 c4 0c             	add    esp,0xc
c001e4f4:	90                   	nop
c001e4f5:	c9                   	leave  
c001e4f6:	c3                   	ret    
c001e4f7:	90                   	nop

c001e4f8 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001e4f8:	55                   	push   ebp
c001e4f9:	89 e5                	mov    ebp,esp
c001e4fb:	56                   	push   esi
c001e4fc:	53                   	push   ebx
c001e4fd:	83 ec 20             	sub    esp,0x20
c001e500:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001e503:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001e506:	80 7d e4 00          	cmp    BYTE PTR [ebp-0x1c],0x0
c001e50a:	74 28                	je     c001e534 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3c>
c001e50c:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c001e510:	7f 12                	jg     c001e524 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x2c>
c001e512:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e515:	05 e0 3a 02 c0       	add    eax,0xc0023ae0
c001e51a:	8a 00                	mov    al,BYTE PTR [eax]
c001e51c:	0f b6 c0             	movzx  eax,al
c001e51f:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c001e522:	eb 10                	jmp    c001e534 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3c>
c001e524:	83 ec 0c             	sub    esp,0xc
c001e527:	68 9c 35 02 c0       	push   0xc002359c
c001e52c:	e8 bf 73 ff ff       	call   c00158f0 <Krnl::panic(char const*)>
c001e531:	83 c4 10             	add    esp,0x10
c001e534:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001e538:	a1 40 61 02 c0       	mov    eax,ds:0xc0026140
c001e53d:	83 ec 08             	sub    esp,0x8
c001e540:	50                   	push   eax
c001e541:	68 d4 35 02 c0       	push   0xc00235d4
c001e546:	e8 dc 0b ff ff       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c001e54b:	83 c4 10             	add    esp,0x10
c001e54e:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001e555:	a1 40 61 02 c0       	mov    eax,ds:0xc0026140
c001e55a:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001e55d:	7d 58                	jge    c001e5b7 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xbf>
c001e55f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e562:	8b 04 85 60 61 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9ea0]
c001e569:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001e56c:	83 ec 08             	sub    esp,0x8
c001e56f:	52                   	push   edx
c001e570:	50                   	push   eax
c001e571:	e8 4c fd ff ff       	call   c001e2c2 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c001e576:	83 c4 10             	add    esp,0x10
c001e579:	84 c0                	test   al,al
c001e57b:	74 35                	je     c001e5b2 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xba>
c001e57d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e580:	8b 1c 85 60 61 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffd9ea0]
c001e587:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e58a:	83 c0 20             	add    eax,0x20
c001e58d:	0f b6 f0             	movzx  esi,al
c001e590:	e8 d8 61 ff ff       	call   c001476d <getCPUNumber()>
c001e595:	99                   	cdq    
c001e596:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c001e599:	0f b6 c9             	movzx  ecx,cl
c001e59c:	83 ec 0c             	sub    esp,0xc
c001e59f:	56                   	push   esi
c001e5a0:	52                   	push   edx
c001e5a1:	50                   	push   eax
c001e5a2:	51                   	push   ecx
c001e5a3:	53                   	push   ebx
c001e5a4:	e8 95 fe ff ff       	call   c001e43e <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char)>
c001e5a9:	83 c4 20             	add    esp,0x20
c001e5ac:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001e5b0:	eb 05                	jmp    c001e5b7 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xbf>
c001e5b2:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
c001e5b5:	eb 9e                	jmp    c001e555 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x5d>
c001e5b7:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001e5ba:	83 f0 01             	xor    eax,0x1
c001e5bd:	84 c0                	test   al,al
c001e5bf:	74 10                	je     c001e5d1 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xd9>
c001e5c1:	83 ec 0c             	sub    esp,0xc
c001e5c4:	68 eb 35 02 c0       	push   0xc00235eb
c001e5c9:	e8 22 73 ff ff       	call   c00158f0 <Krnl::panic(char const*)>
c001e5ce:	83 c4 10             	add    esp,0x10
c001e5d1:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c001e5d5:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001e5dc:	83 7d ec 03          	cmp    DWORD PTR [ebp-0x14],0x3
c001e5e0:	7f 65                	jg     c001e647 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x14f>
c001e5e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e5e5:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001e5e8:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001e5ef:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001e5f2:	01 ca                	add    edx,ecx
c001e5f4:	83 c2 54             	add    edx,0x54
c001e5f7:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c001e5fb:	85 c0                	test   eax,eax
c001e5fd:	75 43                	jne    c001e642 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x14a>
c001e5ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e602:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001e605:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001e60c:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001e60f:	01 ca                	add    edx,ecx
c001e611:	8d 4a 54             	lea    ecx,[edx+0x54]
c001e614:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c001e617:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c001e61b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e61e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001e621:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001e628:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001e62b:	01 ca                	add    edx,ecx
c001e62d:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c001e633:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001e636:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c001e63a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e63d:	83 e8 20             	sub    eax,0x20
c001e640:	eb 1a                	jmp    c001e65c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x164>
c001e642:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c001e645:	eb 95                	jmp    c001e5dc <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xe4>
c001e647:	83 ec 0c             	sub    esp,0xc
c001e64a:	68 f8 35 02 c0       	push   0xc00235f8
c001e64f:	e8 9c 72 ff ff       	call   c00158f0 <Krnl::panic(char const*)>
c001e654:	83 c4 10             	add    esp,0x10
c001e657:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001e65c:	8d 65 f8             	lea    esp,[ebp-0x8]
c001e65f:	5b                   	pop    ebx
c001e660:	5e                   	pop    esi
c001e661:	5d                   	pop    ebp
c001e662:	c3                   	ret    
c001e663:	90                   	nop

c001e664 <PIC::disable()>:
c001e664:	55                   	push   ebp
c001e665:	89 e5                	mov    ebp,esp
c001e667:	83 ec 10             	sub    esp,0x10
c001e66a:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c001e670:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c001e674:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c001e677:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c001e67b:	ee                   	out    dx,al
c001e67c:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c001e682:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c001e686:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c001e689:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c001e68d:	ee                   	out    dx,al
c001e68e:	90                   	nop
c001e68f:	c9                   	leave  
c001e690:	c3                   	ret    
c001e691:	90                   	nop

c001e692 <PIC::close(int, int, void*)>:
c001e692:	55                   	push   ebp
c001e693:	89 e5                	mov    ebp,esp
c001e695:	83 ec 08             	sub    esp,0x8
c001e698:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e69b:	8b 00                	mov    eax,DWORD PTR [eax]
c001e69d:	83 c0 3c             	add    eax,0x3c
c001e6a0:	8b 00                	mov    eax,DWORD PTR [eax]
c001e6a2:	83 ec 0c             	sub    esp,0xc
c001e6a5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e6a8:	ff d0                	call   eax
c001e6aa:	83 c4 10             	add    esp,0x10
c001e6ad:	b8 00 00 00 00       	mov    eax,0x0
c001e6b2:	c9                   	leave  
c001e6b3:	c3                   	ret    

c001e6b4 <PIC::PIC()>:
c001e6b4:	83 ec 0c             	sub    esp,0xc
c001e6b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e6bb:	83 ec 08             	sub    esp,0x8
c001e6be:	68 a4 36 02 c0       	push   0xc00236a4
c001e6c3:	50                   	push   eax
c001e6c4:	e8 a7 27 ff ff       	call   c0010e70 <InterruptController::InterruptController(char const*)>
c001e6c9:	83 c4 10             	add    esp,0x10
c001e6cc:	ba d0 36 02 c0       	mov    edx,0xc00236d0
c001e6d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e6d5:	89 10                	mov    DWORD PTR [eax],edx
c001e6d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e6db:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e6e1:	0f b6 d0             	movzx  edx,al
c001e6e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e6e8:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c001e6ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e6f3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e6f9:	0f b6 d0             	movzx  edx,al
c001e6fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e700:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c001e705:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e709:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e70f:	8d 50 01             	lea    edx,[eax+0x1]
c001e712:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e716:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001e71c:	0f b6 d0             	movzx  edx,al
c001e71f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e723:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001e727:	83 e1 3f             	and    ecx,0x3f
c001e72a:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001e72e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e732:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e738:	0f b6 d0             	movzx  edx,al
c001e73b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e73f:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c001e746:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e74a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e750:	0f b6 d0             	movzx  edx,al
c001e753:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e757:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c001e75c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e760:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e766:	8d 50 01             	lea    edx,[eax+0x1]
c001e769:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e76d:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001e773:	0f b6 d0             	movzx  edx,al
c001e776:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e77a:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001e77e:	83 e1 3f             	and    ecx,0x3f
c001e781:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001e785:	90                   	nop
c001e786:	83 c4 0c             	add    esp,0xc
c001e789:	c3                   	ret    

c001e78a <PIC::ioWait()>:
c001e78a:	eb 00                	jmp    c001e78c <PIC::ioWait()+0x2>
c001e78c:	eb 00                	jmp    c001e78e <PIC::ioWait()+0x4>
c001e78e:	90                   	nop
c001e78f:	c3                   	ret    

c001e790 <PIC::getIRQReg(int)>:
c001e790:	55                   	push   ebp
c001e791:	89 e5                	mov    ebp,esp
c001e793:	83 ec 10             	sub    esp,0x10
c001e796:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e799:	0f b6 c0             	movzx  eax,al
c001e79c:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c001e7a2:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c001e7a5:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c001e7a8:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c001e7ac:	ee                   	out    dx,al
c001e7ad:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e7b0:	0f b6 c0             	movzx  eax,al
c001e7b3:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c001e7b9:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c001e7bc:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c001e7bf:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c001e7c3:	ee                   	out    dx,al
c001e7c4:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c001e7ca:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c001e7ce:	89 c2                	mov    edx,eax
c001e7d0:	ec                   	in     al,dx
c001e7d1:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c001e7d4:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c001e7d7:	0f b6 c0             	movzx  eax,al
c001e7da:	c1 e0 08             	shl    eax,0x8
c001e7dd:	89 c1                	mov    ecx,eax
c001e7df:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c001e7e5:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c001e7e9:	89 c2                	mov    edx,eax
c001e7eb:	ec                   	in     al,dx
c001e7ec:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c001e7ef:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c001e7f2:	0f b6 c0             	movzx  eax,al
c001e7f5:	09 c8                	or     eax,ecx
c001e7f7:	c9                   	leave  
c001e7f8:	c3                   	ret    
c001e7f9:	90                   	nop

c001e7fa <PIC::eoi(unsigned char)>:
c001e7fa:	55                   	push   ebp
c001e7fb:	89 e5                	mov    ebp,esp
c001e7fd:	83 ec 14             	sub    esp,0x14
c001e800:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e803:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c001e806:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c001e80a:	75 1e                	jne    c001e82a <PIC::eoi(unsigned char)+0x30>
c001e80c:	6a 0b                	push   0xb
c001e80e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e811:	e8 7a ff ff ff       	call   c001e790 <PIC::getIRQReg(int)>
c001e816:	83 c4 08             	add    esp,0x8
c001e819:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c001e81d:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c001e821:	25 80 00 00 00       	and    eax,0x80
c001e826:	85 c0                	test   eax,eax
c001e828:	74 5f                	je     c001e889 <PIC::eoi(unsigned char)+0x8f>
c001e82a:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c001e82e:	75 2d                	jne    c001e85d <PIC::eoi(unsigned char)+0x63>
c001e830:	6a 0b                	push   0xb
c001e832:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e835:	e8 56 ff ff ff       	call   c001e790 <PIC::getIRQReg(int)>
c001e83a:	83 c4 08             	add    esp,0x8
c001e83d:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c001e841:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e844:	66 85 c0             	test   ax,ax
c001e847:	78 14                	js     c001e85d <PIC::eoi(unsigned char)+0x63>
c001e849:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c001e84f:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c001e853:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c001e856:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c001e85a:	ee                   	out    dx,al
c001e85b:	eb 2d                	jmp    c001e88a <PIC::eoi(unsigned char)+0x90>
c001e85d:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c001e861:	76 12                	jbe    c001e875 <PIC::eoi(unsigned char)+0x7b>
c001e863:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c001e869:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c001e86d:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c001e870:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c001e874:	ee                   	out    dx,al
c001e875:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c001e87b:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c001e87f:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c001e882:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c001e886:	ee                   	out    dx,al
c001e887:	eb 01                	jmp    c001e88a <PIC::eoi(unsigned char)+0x90>
c001e889:	90                   	nop
c001e88a:	c9                   	leave  
c001e88b:	c3                   	ret    

c001e88c <PIC::remap()>:
c001e88c:	55                   	push   ebp
c001e88d:	89 e5                	mov    ebp,esp
c001e88f:	83 ec 48             	sub    esp,0x48
c001e892:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c001e899:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c001e8a0:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c001e8a6:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c001e8a9:	89 c2                	mov    edx,eax
c001e8ab:	ec                   	in     al,dx
c001e8ac:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c001e8af:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c001e8b2:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c001e8b5:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c001e8bb:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c001e8be:	89 c2                	mov    edx,eax
c001e8c0:	ec                   	in     al,dx
c001e8c1:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c001e8c4:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c001e8c7:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c001e8ca:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c001e8d0:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c001e8d4:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c001e8d7:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c001e8da:	ee                   	out    dx,al
c001e8db:	83 ec 0c             	sub    esp,0xc
c001e8de:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e8e1:	e8 a4 fe ff ff       	call   c001e78a <PIC::ioWait()>
c001e8e6:	83 c4 10             	add    esp,0x10
c001e8e9:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c001e8ef:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c001e8f3:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c001e8f6:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c001e8f9:	ee                   	out    dx,al
c001e8fa:	83 ec 0c             	sub    esp,0xc
c001e8fd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e900:	e8 85 fe ff ff       	call   c001e78a <PIC::ioWait()>
c001e905:	83 c4 10             	add    esp,0x10
c001e908:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001e90b:	0f b6 c0             	movzx  eax,al
c001e90e:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c001e914:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c001e917:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c001e91a:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c001e91d:	ee                   	out    dx,al
c001e91e:	83 ec 0c             	sub    esp,0xc
c001e921:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e924:	e8 61 fe ff ff       	call   c001e78a <PIC::ioWait()>
c001e929:	83 c4 10             	add    esp,0x10
c001e92c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e92f:	0f b6 c0             	movzx  eax,al
c001e932:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c001e938:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c001e93b:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c001e93e:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001e941:	ee                   	out    dx,al
c001e942:	83 ec 0c             	sub    esp,0xc
c001e945:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e948:	e8 3d fe ff ff       	call   c001e78a <PIC::ioWait()>
c001e94d:	83 c4 10             	add    esp,0x10
c001e950:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c001e956:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c001e95a:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c001e95d:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c001e960:	ee                   	out    dx,al
c001e961:	83 ec 0c             	sub    esp,0xc
c001e964:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e967:	e8 1e fe ff ff       	call   c001e78a <PIC::ioWait()>
c001e96c:	83 c4 10             	add    esp,0x10
c001e96f:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c001e975:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c001e979:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c001e97c:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c001e97f:	ee                   	out    dx,al
c001e980:	83 ec 0c             	sub    esp,0xc
c001e983:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e986:	e8 ff fd ff ff       	call   c001e78a <PIC::ioWait()>
c001e98b:	83 c4 10             	add    esp,0x10
c001e98e:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c001e994:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c001e998:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c001e99b:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c001e99e:	ee                   	out    dx,al
c001e99f:	83 ec 0c             	sub    esp,0xc
c001e9a2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e9a5:	e8 e0 fd ff ff       	call   c001e78a <PIC::ioWait()>
c001e9aa:	83 c4 10             	add    esp,0x10
c001e9ad:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c001e9b3:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c001e9b7:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c001e9ba:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001e9bd:	ee                   	out    dx,al
c001e9be:	83 ec 0c             	sub    esp,0xc
c001e9c1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e9c4:	e8 c1 fd ff ff       	call   c001e78a <PIC::ioWait()>
c001e9c9:	83 c4 10             	add    esp,0x10
c001e9cc:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c001e9d0:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c001e9d6:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c001e9d9:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c001e9dc:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001e9df:	ee                   	out    dx,al
c001e9e0:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c001e9e4:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c001e9ea:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c001e9ed:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c001e9f0:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001e9f3:	ee                   	out    dx,al
c001e9f4:	90                   	nop
c001e9f5:	c9                   	leave  
c001e9f6:	c3                   	ret    
c001e9f7:	90                   	nop

c001e9f8 <PIC::open(int, int, void*)>:
c001e9f8:	55                   	push   ebp
c001e9f9:	89 e5                	mov    ebp,esp
c001e9fb:	83 ec 18             	sub    esp,0x18
c001e9fe:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c001ea04:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c001ea08:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c001ea0b:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c001ea0f:	ee                   	out    dx,al
c001ea10:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c001ea16:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c001ea1a:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c001ea1d:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c001ea21:	ee                   	out    dx,al
c001ea22:	83 ec 0c             	sub    esp,0xc
c001ea25:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ea28:	e8 5f fe ff ff       	call   c001e88c <PIC::remap()>
c001ea2d:	83 c4 10             	add    esp,0x10
c001ea30:	b8 00 00 00 00       	mov    eax,0x0
c001ea35:	c9                   	leave  
c001ea36:	c3                   	ret    
c001ea37:	90                   	nop

c001ea38 <APICTimer::close(int, int, void*)>:
c001ea38:	b8 00 00 00 00       	mov    eax,0x0
c001ea3d:	c3                   	ret    

c001ea3e <apicTimerHandler(regs*, void*)>:
c001ea3e:	83 ec 0c             	sub    esp,0xc
c001ea41:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ea45:	8b 00                	mov    eax,DWORD PTR [eax]
c001ea47:	99                   	cdq    
c001ea48:	52                   	push   edx
c001ea49:	50                   	push   eax
c001ea4a:	6a 00                	push   0x0
c001ea4c:	68 00 ca 9a 3b       	push   0x3b9aca00
c001ea51:	e8 76 07 00 00       	call   c001f1cc <__udivdi3>
c001ea56:	83 c4 10             	add    esp,0x10
c001ea59:	83 ec 08             	sub    esp,0x8
c001ea5c:	52                   	push   edx
c001ea5d:	50                   	push   eax
c001ea5e:	e8 26 42 ff ff       	call   c0012c89 <timerHandler(unsigned long long)>
c001ea63:	83 c4 10             	add    esp,0x10
c001ea66:	90                   	nop
c001ea67:	83 c4 0c             	add    esp,0xc
c001ea6a:	c3                   	ret    
c001ea6b:	90                   	nop

c001ea6c <APICTimer::write(int)>:
c001ea6c:	53                   	push   ebx
c001ea6d:	83 ec 28             	sub    esp,0x28
c001ea70:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ea74:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001ea78:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ea7e:	e8 ed 5c ff ff       	call   c0014770 <thisCPU()>
c001ea83:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c001ea89:	83 ec 0c             	sub    esp,0xc
c001ea8c:	50                   	push   eax
c001ea8d:	e8 0e f6 ff ff       	call   c001e0a0 <APIC::getBase()>
c001ea92:	83 c4 10             	add    esp,0x10
c001ea95:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ea99:	a1 f0 49 02 c0       	mov    eax,ds:0xc00249f0
c001ea9e:	8b 15 f4 49 02 c0    	mov    edx,DWORD PTR ds:0xc00249f4
c001eaa4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001eaa8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001eaac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001eab0:	05 e0 03 00 00       	add    eax,0x3e0
c001eab5:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c001eabb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001eabf:	05 80 03 00 00       	add    eax,0x380
c001eac4:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c001eaca:	fb                   	sti    
c001eacb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eacf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ead3:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c001ead8:	83 d2 00             	adc    edx,0x0
c001eadb:	89 c1                	mov    ecx,eax
c001eadd:	89 d3                	mov    ebx,edx
c001eadf:	a1 f0 49 02 c0       	mov    eax,ds:0xc00249f0
c001eae4:	8b 15 f4 49 02 c0    	mov    edx,DWORD PTR ds:0xc00249f4
c001eaea:	39 c8                	cmp    eax,ecx
c001eaec:	89 d0                	mov    eax,edx
c001eaee:	19 d8                	sbb    eax,ebx
c001eaf0:	73 02                	jae    c001eaf4 <APICTimer::write(int)+0x88>
c001eaf2:	eb d7                	jmp    c001eacb <APICTimer::write(int)+0x5f>
c001eaf4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001eaf8:	05 20 03 00 00       	add    eax,0x320
c001eafd:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c001eb03:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001eb07:	05 90 03 00 00       	add    eax,0x390
c001eb0c:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb0e:	f7 d0                	not    eax
c001eb10:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001eb14:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001eb18:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001eb1c:	ba 00 00 00 00       	mov    edx,0x0
c001eb21:	f7 f3                	div    ebx
c001eb23:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001eb27:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001eb2b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001eb31:	0d 00 00 02 00       	or     eax,0x20000
c001eb36:	89 c2                	mov    edx,eax
c001eb38:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001eb3c:	05 20 03 00 00       	add    eax,0x320
c001eb41:	89 10                	mov    DWORD PTR [eax],edx
c001eb43:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001eb47:	05 e0 03 00 00       	add    eax,0x3e0
c001eb4c:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c001eb52:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001eb56:	05 80 03 00 00       	add    eax,0x380
c001eb5b:	89 c2                	mov    edx,eax
c001eb5d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001eb61:	89 02                	mov    DWORD PTR [edx],eax
c001eb63:	90                   	nop
c001eb64:	83 c4 28             	add    esp,0x28
c001eb67:	5b                   	pop    ebx
c001eb68:	c3                   	ret    
c001eb69:	90                   	nop

c001eb6a <APICTimer::open(int, int, void*)>:
c001eb6a:	57                   	push   edi
c001eb6b:	56                   	push   esi
c001eb6c:	53                   	push   ebx
c001eb6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb71:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb73:	83 c0 24             	add    eax,0x24
c001eb76:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb78:	83 ec 08             	sub    esp,0x8
c001eb7b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eb7f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eb83:	ff d0                	call   eax
c001eb85:	83 c4 10             	add    esp,0x10
c001eb88:	e8 e3 5b ff ff       	call   c0014770 <thisCPU()>
c001eb8d:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c001eb93:	83 ec 0c             	sub    esp,0xc
c001eb96:	50                   	push   eax
c001eb97:	e8 04 f5 ff ff       	call   c001e0a0 <APIC::getBase()>
c001eb9c:	83 c4 10             	add    esp,0x10
c001eb9f:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c001eba5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eba9:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001ebaf:	0f b6 f8             	movzx  edi,al
c001ebb2:	89 d0                	mov    eax,edx
c001ebb4:	ba 00 00 00 00       	mov    edx,0x0
c001ebb9:	89 c1                	mov    ecx,eax
c001ebbb:	80 e5 ff             	and    ch,0xff
c001ebbe:	89 cb                	mov    ebx,ecx
c001ebc0:	0f b6 f2             	movzx  esi,dl
c001ebc3:	89 d8                	mov    eax,ebx
c001ebc5:	89 f2                	mov    edx,esi
c001ebc7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ebcb:	8d 5f 08             	lea    ebx,[edi+0x8]
c001ebce:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001ebd2:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001ebd6:	83 e0 00             	and    eax,0x0
c001ebd9:	09 d0                	or     eax,edx
c001ebdb:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001ebdf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebe3:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001ebe9:	8d 50 01             	lea    edx,[eax+0x1]
c001ebec:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ebf0:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001ebf6:	0f b6 d0             	movzx  edx,al
c001ebf9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebfd:	83 c2 08             	add    edx,0x8
c001ec00:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001ec04:	0f b6 c9             	movzx  ecx,cl
c001ec07:	81 c9 00 00 01 00    	or     ecx,0x10000
c001ec0d:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001ec11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec15:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ec19:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001ec1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec23:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ec27:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001ec2d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ec31:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001ec37:	83 ec 0c             	sub    esp,0xc
c001ec3a:	51                   	push   ecx
c001ec3b:	6a 01                	push   0x1
c001ec3d:	68 3e ea 01 c0       	push   0xc001ea3e
c001ec42:	52                   	push   edx
c001ec43:	50                   	push   eax
c001ec44:	e8 3d 18 ff ff       	call   c0010486 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ec49:	83 c4 20             	add    esp,0x20
c001ec4c:	89 c2                	mov    edx,eax
c001ec4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec52:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001ec58:	b8 00 00 00 00       	mov    eax,0x0
c001ec5d:	5b                   	pop    ebx
c001ec5e:	5e                   	pop    esi
c001ec5f:	5f                   	pop    edi
c001ec60:	c3                   	ret    
c001ec61:	90                   	nop

c001ec62 <APICTimer::APICTimer()>:
c001ec62:	83 ec 0c             	sub    esp,0xc
c001ec65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec69:	83 ec 08             	sub    esp,0x8
c001ec6c:	68 10 37 02 c0       	push   0xc0023710
c001ec71:	50                   	push   eax
c001ec72:	e8 83 3f ff ff       	call   c0012bfa <Timer::Timer(char const*)>
c001ec77:	83 c4 10             	add    esp,0x10
c001ec7a:	ba 24 37 02 c0       	mov    edx,0xc0023724
c001ec7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec83:	89 10                	mov    DWORD PTR [eax],edx
c001ec85:	90                   	nop
c001ec86:	83 c4 0c             	add    esp,0xc
c001ec89:	c3                   	ret    

c001ec8a <PIT::write(int)>:
c001ec8a:	83 ec 10             	sub    esp,0x10
c001ec8d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ec91:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ec95:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ec9b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ec9f:	a3 84 61 02 c0       	mov    ds:0xc0026184,eax
c001eca4:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001eca9:	99                   	cdq    
c001ecaa:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001ecae:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ecb2:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001ecb9:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001ecbe:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001ecc2:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001ecc7:	ee                   	out    dx,al
c001ecc8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001eccc:	0f b6 c0             	movzx  eax,al
c001eccf:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001ecd6:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001ecda:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001ecde:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001ece3:	ee                   	out    dx,al
c001ece4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ece8:	c1 f8 08             	sar    eax,0x8
c001eceb:	0f b6 c0             	movzx  eax,al
c001ecee:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001ecf5:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001ecf9:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001ecfd:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001ed02:	ee                   	out    dx,al
c001ed03:	90                   	nop
c001ed04:	83 c4 10             	add    esp,0x10
c001ed07:	c3                   	ret    

c001ed08 <pitHandler(regs*, void*)>:
c001ed08:	83 ec 0c             	sub    esp,0xc
c001ed0b:	a1 84 61 02 c0       	mov    eax,ds:0xc0026184
c001ed10:	99                   	cdq    
c001ed11:	52                   	push   edx
c001ed12:	50                   	push   eax
c001ed13:	6a 00                	push   0x0
c001ed15:	68 00 ca 9a 3b       	push   0x3b9aca00
c001ed1a:	e8 ad 04 00 00       	call   c001f1cc <__udivdi3>
c001ed1f:	83 c4 10             	add    esp,0x10
c001ed22:	83 ec 08             	sub    esp,0x8
c001ed25:	52                   	push   edx
c001ed26:	50                   	push   eax
c001ed27:	e8 5d 3f ff ff       	call   c0012c89 <timerHandler(unsigned long long)>
c001ed2c:	83 c4 10             	add    esp,0x10
c001ed2f:	90                   	nop
c001ed30:	83 c4 0c             	add    esp,0xc
c001ed33:	c3                   	ret    

c001ed34 <PIT::open(int, int, void*)>:
c001ed34:	83 ec 0c             	sub    esp,0xc
c001ed37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed3b:	8b 00                	mov    eax,DWORD PTR [eax]
c001ed3d:	83 c0 24             	add    eax,0x24
c001ed40:	8b 00                	mov    eax,DWORD PTR [eax]
c001ed42:	83 ec 08             	sub    esp,0x8
c001ed45:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ed49:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ed4d:	ff d0                	call   eax
c001ed4f:	83 c4 10             	add    esp,0x10
c001ed52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed56:	83 ec 0c             	sub    esp,0xc
c001ed59:	6a 00                	push   0x0
c001ed5b:	6a 01                	push   0x1
c001ed5d:	68 08 ed 01 c0       	push   0xc001ed08
c001ed62:	6a 00                	push   0x0
c001ed64:	50                   	push   eax
c001ed65:	e8 1c 17 ff ff       	call   c0010486 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ed6a:	83 c4 20             	add    esp,0x20
c001ed6d:	89 c2                	mov    edx,eax
c001ed6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed73:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001ed79:	b8 00 00 00 00       	mov    eax,0x0
c001ed7e:	83 c4 0c             	add    esp,0xc
c001ed81:	c3                   	ret    

c001ed82 <PIT::close(int, int, void*)>:
c001ed82:	83 ec 0c             	sub    esp,0xc
c001ed85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed89:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001ed93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed97:	6a 01                	push   0x1
c001ed99:	68 08 ed 01 c0       	push   0xc001ed08
c001ed9e:	6a 00                	push   0x0
c001eda0:	50                   	push   eax
c001eda1:	e8 3e 17 ff ff       	call   c00104e4 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001eda6:	83 c4 10             	add    esp,0x10
c001eda9:	b8 00 00 00 00       	mov    eax,0x0
c001edae:	83 c4 0c             	add    esp,0xc
c001edb1:	c3                   	ret    

c001edb2 <PIT::PIT()>:
c001edb2:	83 ec 0c             	sub    esp,0xc
c001edb5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edb9:	83 ec 08             	sub    esp,0x8
c001edbc:	68 4c 37 02 c0       	push   0xc002374c
c001edc1:	50                   	push   eax
c001edc2:	e8 33 3e ff ff       	call   c0012bfa <Timer::Timer(char const*)>
c001edc7:	83 c4 10             	add    esp,0x10
c001edca:	ba 74 37 02 c0       	mov    edx,0xc0023774
c001edcf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edd3:	89 10                	mov    DWORD PTR [eax],edx
c001edd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edd9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001eddf:	0f b6 d0             	movzx  edx,al
c001ede2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ede6:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001eded:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edf1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001edf7:	0f b6 d0             	movzx  edx,al
c001edfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edfe:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001ee03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee07:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ee0d:	8d 50 01             	lea    edx,[eax+0x1]
c001ee10:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ee14:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001ee1a:	0f b6 d0             	movzx  edx,al
c001ee1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee21:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001ee25:	83 e1 3f             	and    ecx,0x3f
c001ee28:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001ee2c:	90                   	nop
c001ee2d:	83 c4 0c             	add    esp,0xc
c001ee30:	c3                   	ret    
c001ee31:	66 90                	xchg   ax,ax
c001ee33:	66 90                	xchg   ax,ax
c001ee35:	66 90                	xchg   ax,ax
c001ee37:	66 90                	xchg   ax,ax
c001ee39:	66 90                	xchg   ax,ax
c001ee3b:	66 90                	xchg   ax,ax
c001ee3d:	66 90                	xchg   ax,ax
c001ee3f:	90                   	nop

c001ee40 <avxDetect>:
c001ee40:	b8 00 00 00 00       	mov    eax,0x0
c001ee45:	c3                   	ret    

c001ee46 <avxSave>:
c001ee46:	c3                   	ret    

c001ee47 <avxLoad>:
c001ee47:	c3                   	ret    

c001ee48 <avxInit>:
c001ee48:	c3                   	ret    

c001ee49 <avxClose>:
c001ee49:	c3                   	ret    
c001ee4a:	66 90                	xchg   ax,ax
c001ee4c:	66 90                	xchg   ax,ax
c001ee4e:	66 90                	xchg   ax,ax

c001ee50 <sseDetect>:
c001ee50:	b8 01 00 00 00       	mov    eax,0x1
c001ee55:	0f a2                	cpuid  
c001ee57:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001ee5d:	74 06                	je     c001ee65 <sseDetect.noSSE>
c001ee5f:	b8 01 00 00 00       	mov    eax,0x1
c001ee64:	c3                   	ret    

c001ee65 <sseDetect.noSSE>:
c001ee65:	b8 00 00 00 00       	mov    eax,0x0
c001ee6a:	c3                   	ret    

c001ee6b <sseSave>:
c001ee6b:	0f ae 44 24 08       	fxsave [esp+0x8]
c001ee70:	c3                   	ret    

c001ee71 <sseLoad>:
c001ee71:	0f ae 4c 24 08       	fxrstor [esp+0x8]
c001ee76:	c3                   	ret    

c001ee77 <sseInit>:
c001ee77:	e8 40 00 00 00       	call   c001eebc <x87Init>
c001ee7c:	0f 20 e0             	mov    eax,cr4
c001ee7f:	66 0d 00 06          	or     ax,0x600
c001ee83:	0f 22 e0             	mov    cr4,eax
c001ee86:	c3                   	ret    

c001ee87 <sseClose>:
c001ee87:	c3                   	ret    
c001ee88:	66 90                	xchg   ax,ax
c001ee8a:	66 90                	xchg   ax,ax
c001ee8c:	66 90                	xchg   ax,ax
c001ee8e:	66 90                	xchg   ax,ax

c001ee90 <value_37F>:
c001ee90:	7f 03                	jg     c001ee95 <value_37A+0x1>

c001ee92 <value_37E>:
c001ee92:	7e 03                	jle    c001ee97 <x87Detect+0x1>

c001ee94 <value_37A>:
c001ee94:	7a 03                	jp     c001ee99 <x87Detect+0x3>

c001ee96 <x87Detect>:
c001ee96:	b8 01 00 00 00       	mov    eax,0x1
c001ee9b:	0f a2                	cpuid  
c001ee9d:	f7 c2 01 00 00 00    	test   edx,0x1
c001eea3:	74 06                	je     c001eeab <x87Detect.nox87>
c001eea5:	b8 01 00 00 00       	mov    eax,0x1
c001eeaa:	c3                   	ret    

c001eeab <x87Detect.nox87>:
c001eeab:	b8 00 00 00 00       	mov    eax,0x0
c001eeb0:	c3                   	ret    

c001eeb1 <x87Save>:
c001eeb1:	9b dd 74 24 08       	fsave  [esp+0x8]
c001eeb6:	c3                   	ret    

c001eeb7 <x87Load>:
c001eeb7:	dd 64 24 08          	frstor [esp+0x8]
c001eebb:	c3                   	ret    

c001eebc <x87Init>:
c001eebc:	9b db e3             	finit  
c001eebf:	0f 20 c0             	mov    eax,cr0
c001eec2:	66 25 fb ff          	and    ax,0xfffb
c001eec6:	66 0d 22 00          	or     ax,0x22
c001eeca:	0f 22 c0             	mov    cr0,eax
c001eecd:	0f 06                	clts   
c001eecf:	d9 2d 94 ee 01 c0    	fldcw  WORD PTR ds:0xc001ee94
c001eed5:	c3                   	ret    

c001eed6 <x87Close>:
c001eed6:	c3                   	ret    
c001eed7:	90                   	nop

c001eed8 <__do_global_ctors_aux>:
c001eed8:	a1 b8 ff 01 c0       	mov    eax,ds:0xc001ffb8
c001eedd:	83 f8 ff             	cmp    eax,0xffffffff
c001eee0:	74 1a                	je     c001eefc <__do_global_ctors_aux+0x24>
c001eee2:	55                   	push   ebp
c001eee3:	89 e5                	mov    ebp,esp
c001eee5:	53                   	push   ebx
c001eee6:	52                   	push   edx
c001eee7:	bb b8 ff 01 c0       	mov    ebx,0xc001ffb8
c001eeec:	ff d0                	call   eax
c001eeee:	83 eb 04             	sub    ebx,0x4
c001eef1:	8b 03                	mov    eax,DWORD PTR [ebx]
c001eef3:	83 f8 ff             	cmp    eax,0xffffffff
c001eef6:	75 f4                	jne    c001eeec <__do_global_ctors_aux+0x14>
c001eef8:	58                   	pop    eax
c001eef9:	5b                   	pop    ebx
c001eefa:	5d                   	pop    ebp
c001eefb:	c3                   	ret    
c001eefc:	c3                   	ret    
c001eefd:	66 90                	xchg   ax,ax
c001eeff:	90                   	nop

c001ef00 <__divdi3>:
c001ef00:	55                   	push   ebp
c001ef01:	57                   	push   edi
c001ef02:	56                   	push   esi
c001ef03:	53                   	push   ebx
c001ef04:	83 ec 1c             	sub    esp,0x1c
c001ef07:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001ef0b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001ef0f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001ef12:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001ef16:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ef1a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001ef1e:	85 db                	test   ebx,ebx
c001ef20:	0f 88 8e 00 00 00    	js     c001efb4 <__divdi3+0xb4>
c001ef26:	89 dd                	mov    ebp,ebx
c001ef28:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001ef30:	89 d3                	mov    ebx,edx
c001ef32:	85 d2                	test   edx,edx
c001ef34:	79 0d                	jns    c001ef43 <__divdi3+0x43>
c001ef36:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001ef3a:	f7 d8                	neg    eax
c001ef3c:	83 d2 00             	adc    edx,0x0
c001ef3f:	f7 da                	neg    edx
c001ef41:	89 d3                	mov    ebx,edx
c001ef43:	89 c7                	mov    edi,eax
c001ef45:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001ef48:	85 db                	test   ebx,ebx
c001ef4a:	75 48                	jne    c001ef94 <__divdi3+0x94>
c001ef4c:	39 ef                	cmp    edi,ebp
c001ef4e:	76 24                	jbe    c001ef74 <__divdi3+0x74>
c001ef50:	89 ea                	mov    edx,ebp
c001ef52:	f7 f7                	div    edi
c001ef54:	89 c1                	mov    ecx,eax
c001ef56:	31 f6                	xor    esi,esi
c001ef58:	89 c8                	mov    eax,ecx
c001ef5a:	89 f2                	mov    edx,esi
c001ef5c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001ef60:	85 c9                	test   ecx,ecx
c001ef62:	74 07                	je     c001ef6b <__divdi3+0x6b>
c001ef64:	f7 d8                	neg    eax
c001ef66:	83 d2 00             	adc    edx,0x0
c001ef69:	f7 da                	neg    edx
c001ef6b:	83 c4 1c             	add    esp,0x1c
c001ef6e:	5b                   	pop    ebx
c001ef6f:	5e                   	pop    esi
c001ef70:	5f                   	pop    edi
c001ef71:	5d                   	pop    ebp
c001ef72:	c3                   	ret    
c001ef73:	90                   	nop
c001ef74:	85 ff                	test   edi,edi
c001ef76:	75 0b                	jne    c001ef83 <__divdi3+0x83>
c001ef78:	b8 01 00 00 00       	mov    eax,0x1
c001ef7d:	31 d2                	xor    edx,edx
c001ef7f:	f7 f3                	div    ebx
c001ef81:	89 c7                	mov    edi,eax
c001ef83:	31 d2                	xor    edx,edx
c001ef85:	89 e8                	mov    eax,ebp
c001ef87:	f7 f7                	div    edi
c001ef89:	89 c6                	mov    esi,eax
c001ef8b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001ef8e:	f7 f7                	div    edi
c001ef90:	89 c1                	mov    ecx,eax
c001ef92:	eb c4                	jmp    c001ef58 <__divdi3+0x58>
c001ef94:	39 eb                	cmp    ebx,ebp
c001ef96:	77 3c                	ja     c001efd4 <__divdi3+0xd4>
c001ef98:	0f bd f3             	bsr    esi,ebx
c001ef9b:	83 f6 1f             	xor    esi,0x1f
c001ef9e:	75 40                	jne    c001efe0 <__divdi3+0xe0>
c001efa0:	39 eb                	cmp    ebx,ebp
c001efa2:	72 09                	jb     c001efad <__divdi3+0xad>
c001efa4:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001efa7:	0f 87 97 00 00 00    	ja     c001f044 <__divdi3+0x144>
c001efad:	b9 01 00 00 00       	mov    ecx,0x1
c001efb2:	eb a4                	jmp    c001ef58 <__divdi3+0x58>
c001efb4:	f7 d9                	neg    ecx
c001efb6:	83 d3 00             	adc    ebx,0x0
c001efb9:	f7 db                	neg    ebx
c001efbb:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001efbe:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001efc2:	89 dd                	mov    ebp,ebx
c001efc4:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001efcc:	e9 5f ff ff ff       	jmp    c001ef30 <__divdi3+0x30>
c001efd1:	8d 76 00             	lea    esi,[esi+0x0]
c001efd4:	31 f6                	xor    esi,esi
c001efd6:	31 c9                	xor    ecx,ecx
c001efd8:	e9 7b ff ff ff       	jmp    c001ef58 <__divdi3+0x58>
c001efdd:	8d 76 00             	lea    esi,[esi+0x0]
c001efe0:	b8 20 00 00 00       	mov    eax,0x20
c001efe5:	29 f0                	sub    eax,esi
c001efe7:	89 f1                	mov    ecx,esi
c001efe9:	d3 e3                	shl    ebx,cl
c001efeb:	89 fa                	mov    edx,edi
c001efed:	88 c1                	mov    cl,al
c001efef:	d3 ea                	shr    edx,cl
c001eff1:	09 da                	or     edx,ebx
c001eff3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001eff7:	89 f1                	mov    ecx,esi
c001eff9:	d3 e7                	shl    edi,cl
c001effb:	89 eb                	mov    ebx,ebp
c001effd:	88 c1                	mov    cl,al
c001efff:	d3 eb                	shr    ebx,cl
c001f001:	89 f1                	mov    ecx,esi
c001f003:	d3 e5                	shl    ebp,cl
c001f005:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001f008:	88 c1                	mov    cl,al
c001f00a:	d3 ea                	shr    edx,cl
c001f00c:	09 d5                	or     ebp,edx
c001f00e:	89 e8                	mov    eax,ebp
c001f010:	89 da                	mov    edx,ebx
c001f012:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001f016:	89 d3                	mov    ebx,edx
c001f018:	89 c5                	mov    ebp,eax
c001f01a:	f7 e7                	mul    edi
c001f01c:	39 d3                	cmp    ebx,edx
c001f01e:	72 18                	jb     c001f038 <__divdi3+0x138>
c001f020:	74 0a                	je     c001f02c <__divdi3+0x12c>
c001f022:	89 e9                	mov    ecx,ebp
c001f024:	31 f6                	xor    esi,esi
c001f026:	e9 2d ff ff ff       	jmp    c001ef58 <__divdi3+0x58>
c001f02b:	90                   	nop
c001f02c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001f02f:	89 f1                	mov    ecx,esi
c001f031:	d3 e7                	shl    edi,cl
c001f033:	39 c7                	cmp    edi,eax
c001f035:	73 eb                	jae    c001f022 <__divdi3+0x122>
c001f037:	90                   	nop
c001f038:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001f03b:	31 f6                	xor    esi,esi
c001f03d:	e9 16 ff ff ff       	jmp    c001ef58 <__divdi3+0x58>
c001f042:	66 90                	xchg   ax,ax
c001f044:	31 c9                	xor    ecx,ecx
c001f046:	e9 0d ff ff ff       	jmp    c001ef58 <__divdi3+0x58>
c001f04b:	90                   	nop

c001f04c <__moddi3>:
c001f04c:	55                   	push   ebp
c001f04d:	57                   	push   edi
c001f04e:	56                   	push   esi
c001f04f:	53                   	push   ebx
c001f050:	83 ec 2c             	sub    esp,0x2c
c001f053:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001f057:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001f05b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001f05f:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001f063:	85 db                	test   ebx,ebx
c001f065:	0f 88 85 00 00 00    	js     c001f0f0 <__moddi3+0xa4>
c001f06b:	89 de                	mov    esi,ebx
c001f06d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001f075:	89 d7                	mov    edi,edx
c001f077:	85 d2                	test   edx,edx
c001f079:	79 09                	jns    c001f084 <__moddi3+0x38>
c001f07b:	f7 d8                	neg    eax
c001f07d:	83 d2 00             	adc    edx,0x0
c001f080:	f7 da                	neg    edx
c001f082:	89 d7                	mov    edi,edx
c001f084:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f088:	89 cd                	mov    ebp,ecx
c001f08a:	85 ff                	test   edi,edi
c001f08c:	75 52                	jne    c001f0e0 <__moddi3+0x94>
c001f08e:	89 c3                	mov    ebx,eax
c001f090:	39 f0                	cmp    eax,esi
c001f092:	76 24                	jbe    c001f0b8 <__moddi3+0x6c>
c001f094:	89 c8                	mov    eax,ecx
c001f096:	89 f2                	mov    edx,esi
c001f098:	f7 f3                	div    ebx
c001f09a:	89 d6                	mov    esi,edx
c001f09c:	89 f0                	mov    eax,esi
c001f09e:	31 d2                	xor    edx,edx
c001f0a0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f0a4:	85 c9                	test   ecx,ecx
c001f0a6:	74 07                	je     c001f0af <__moddi3+0x63>
c001f0a8:	f7 d8                	neg    eax
c001f0aa:	83 d2 00             	adc    edx,0x0
c001f0ad:	f7 da                	neg    edx
c001f0af:	83 c4 2c             	add    esp,0x2c
c001f0b2:	5b                   	pop    ebx
c001f0b3:	5e                   	pop    esi
c001f0b4:	5f                   	pop    edi
c001f0b5:	5d                   	pop    ebp
c001f0b6:	c3                   	ret    
c001f0b7:	90                   	nop
c001f0b8:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f0bc:	85 db                	test   ebx,ebx
c001f0be:	75 0d                	jne    c001f0cd <__moddi3+0x81>
c001f0c0:	b8 01 00 00 00       	mov    eax,0x1
c001f0c5:	31 d2                	xor    edx,edx
c001f0c7:	f7 f7                	div    edi
c001f0c9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f0cd:	89 f0                	mov    eax,esi
c001f0cf:	31 d2                	xor    edx,edx
c001f0d1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f0d5:	f7 f7                	div    edi
c001f0d7:	89 e8                	mov    eax,ebp
c001f0d9:	f7 f7                	div    edi
c001f0db:	89 d6                	mov    esi,edx
c001f0dd:	eb bd                	jmp    c001f09c <__moddi3+0x50>
c001f0df:	90                   	nop
c001f0e0:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f0e4:	39 f7                	cmp    edi,esi
c001f0e6:	76 20                	jbe    c001f108 <__moddi3+0xbc>
c001f0e8:	89 c8                	mov    eax,ecx
c001f0ea:	89 f2                	mov    edx,esi
c001f0ec:	eb b2                	jmp    c001f0a0 <__moddi3+0x54>
c001f0ee:	66 90                	xchg   ax,ax
c001f0f0:	f7 d9                	neg    ecx
c001f0f2:	83 d3 00             	adc    ebx,0x0
c001f0f5:	f7 db                	neg    ebx
c001f0f7:	89 de                	mov    esi,ebx
c001f0f9:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001f101:	e9 6f ff ff ff       	jmp    c001f075 <__moddi3+0x29>
c001f106:	66 90                	xchg   ax,ax
c001f108:	0f bd c7             	bsr    eax,edi
c001f10b:	83 f0 1f             	xor    eax,0x1f
c001f10e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001f112:	75 24                	jne    c001f138 <__moddi3+0xec>
c001f114:	39 f7                	cmp    edi,esi
c001f116:	72 06                	jb     c001f11e <__moddi3+0xd2>
c001f118:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001f11c:	77 0c                	ja     c001f12a <__moddi3+0xde>
c001f11e:	89 e9                	mov    ecx,ebp
c001f120:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001f124:	19 fe                	sbb    esi,edi
c001f126:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f12a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f12e:	89 f2                	mov    edx,esi
c001f130:	e9 6b ff ff ff       	jmp    c001f0a0 <__moddi3+0x54>
c001f135:	8d 76 00             	lea    esi,[esi+0x0]
c001f138:	b8 20 00 00 00       	mov    eax,0x20
c001f13d:	89 c2                	mov    edx,eax
c001f13f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001f143:	29 da                	sub    edx,ebx
c001f145:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001f149:	88 d9                	mov    cl,bl
c001f14b:	d3 e7                	shl    edi,cl
c001f14d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f151:	88 d1                	mov    cl,dl
c001f153:	d3 e8                	shr    eax,cl
c001f155:	09 c7                	or     edi,eax
c001f157:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001f15b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f15f:	89 d8                	mov    eax,ebx
c001f161:	88 d9                	mov    cl,bl
c001f163:	d3 e7                	shl    edi,cl
c001f165:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f169:	89 f3                	mov    ebx,esi
c001f16b:	88 d1                	mov    cl,dl
c001f16d:	d3 eb                	shr    ebx,cl
c001f16f:	89 c7                	mov    edi,eax
c001f171:	88 c1                	mov    cl,al
c001f173:	d3 e6                	shl    esi,cl
c001f175:	89 e8                	mov    eax,ebp
c001f177:	88 d1                	mov    cl,dl
c001f179:	d3 e8                	shr    eax,cl
c001f17b:	09 f0                	or     eax,esi
c001f17d:	89 f9                	mov    ecx,edi
c001f17f:	d3 e5                	shl    ebp,cl
c001f181:	89 da                	mov    edx,ebx
c001f183:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001f187:	89 d3                	mov    ebx,edx
c001f189:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f18d:	89 c6                	mov    esi,eax
c001f18f:	89 d1                	mov    ecx,edx
c001f191:	39 d3                	cmp    ebx,edx
c001f193:	72 27                	jb     c001f1bc <__moddi3+0x170>
c001f195:	74 21                	je     c001f1b8 <__moddi3+0x16c>
c001f197:	29 f5                	sub    ebp,esi
c001f199:	19 cb                	sbb    ebx,ecx
c001f19b:	89 de                	mov    esi,ebx
c001f19d:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001f1a1:	d3 e6                	shl    esi,cl
c001f1a3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f1a7:	89 f9                	mov    ecx,edi
c001f1a9:	d3 ed                	shr    ebp,cl
c001f1ab:	09 ee                	or     esi,ebp
c001f1ad:	89 f0                	mov    eax,esi
c001f1af:	d3 eb                	shr    ebx,cl
c001f1b1:	89 da                	mov    edx,ebx
c001f1b3:	e9 e8 fe ff ff       	jmp    c001f0a0 <__moddi3+0x54>
c001f1b8:	39 c5                	cmp    ebp,eax
c001f1ba:	73 db                	jae    c001f197 <__moddi3+0x14b>
c001f1bc:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001f1c0:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001f1c4:	89 d1                	mov    ecx,edx
c001f1c6:	89 c6                	mov    esi,eax
c001f1c8:	eb cd                	jmp    c001f197 <__moddi3+0x14b>
c001f1ca:	66 90                	xchg   ax,ax

c001f1cc <__udivdi3>:
c001f1cc:	55                   	push   ebp
c001f1cd:	57                   	push   edi
c001f1ce:	56                   	push   esi
c001f1cf:	53                   	push   ebx
c001f1d0:	83 ec 1c             	sub    esp,0x1c
c001f1d3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001f1d7:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001f1db:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f1df:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001f1e3:	85 d2                	test   edx,edx
c001f1e5:	75 41                	jne    c001f228 <__udivdi3+0x5c>
c001f1e7:	39 f7                	cmp    edi,esi
c001f1e9:	76 15                	jbe    c001f200 <__udivdi3+0x34>
c001f1eb:	89 e8                	mov    eax,ebp
c001f1ed:	89 f2                	mov    edx,esi
c001f1ef:	f7 f7                	div    edi
c001f1f1:	31 db                	xor    ebx,ebx
c001f1f3:	89 da                	mov    edx,ebx
c001f1f5:	83 c4 1c             	add    esp,0x1c
c001f1f8:	5b                   	pop    ebx
c001f1f9:	5e                   	pop    esi
c001f1fa:	5f                   	pop    edi
c001f1fb:	5d                   	pop    ebp
c001f1fc:	c3                   	ret    
c001f1fd:	8d 76 00             	lea    esi,[esi+0x0]
c001f200:	89 f9                	mov    ecx,edi
c001f202:	85 ff                	test   edi,edi
c001f204:	75 0b                	jne    c001f211 <__udivdi3+0x45>
c001f206:	b8 01 00 00 00       	mov    eax,0x1
c001f20b:	31 d2                	xor    edx,edx
c001f20d:	f7 f7                	div    edi
c001f20f:	89 c1                	mov    ecx,eax
c001f211:	31 d2                	xor    edx,edx
c001f213:	89 f0                	mov    eax,esi
c001f215:	f7 f1                	div    ecx
c001f217:	89 c3                	mov    ebx,eax
c001f219:	89 e8                	mov    eax,ebp
c001f21b:	f7 f1                	div    ecx
c001f21d:	89 da                	mov    edx,ebx
c001f21f:	83 c4 1c             	add    esp,0x1c
c001f222:	5b                   	pop    ebx
c001f223:	5e                   	pop    esi
c001f224:	5f                   	pop    edi
c001f225:	5d                   	pop    ebp
c001f226:	c3                   	ret    
c001f227:	90                   	nop
c001f228:	39 f2                	cmp    edx,esi
c001f22a:	77 1c                	ja     c001f248 <__udivdi3+0x7c>
c001f22c:	0f bd da             	bsr    ebx,edx
c001f22f:	83 f3 1f             	xor    ebx,0x1f
c001f232:	75 24                	jne    c001f258 <__udivdi3+0x8c>
c001f234:	39 f2                	cmp    edx,esi
c001f236:	72 08                	jb     c001f240 <__udivdi3+0x74>
c001f238:	39 ef                	cmp    edi,ebp
c001f23a:	0f 87 84 00 00 00    	ja     c001f2c4 <__udivdi3+0xf8>
c001f240:	b8 01 00 00 00       	mov    eax,0x1
c001f245:	eb ac                	jmp    c001f1f3 <__udivdi3+0x27>
c001f247:	90                   	nop
c001f248:	31 db                	xor    ebx,ebx
c001f24a:	31 c0                	xor    eax,eax
c001f24c:	89 da                	mov    edx,ebx
c001f24e:	83 c4 1c             	add    esp,0x1c
c001f251:	5b                   	pop    ebx
c001f252:	5e                   	pop    esi
c001f253:	5f                   	pop    edi
c001f254:	5d                   	pop    ebp
c001f255:	c3                   	ret    
c001f256:	66 90                	xchg   ax,ax
c001f258:	b8 20 00 00 00       	mov    eax,0x20
c001f25d:	29 d8                	sub    eax,ebx
c001f25f:	88 d9                	mov    cl,bl
c001f261:	d3 e2                	shl    edx,cl
c001f263:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001f267:	89 fa                	mov    edx,edi
c001f269:	88 c1                	mov    cl,al
c001f26b:	d3 ea                	shr    edx,cl
c001f26d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f271:	09 d1                	or     ecx,edx
c001f273:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f277:	88 d9                	mov    cl,bl
c001f279:	d3 e7                	shl    edi,cl
c001f27b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f27f:	89 f7                	mov    edi,esi
c001f281:	88 c1                	mov    cl,al
c001f283:	d3 ef                	shr    edi,cl
c001f285:	88 d9                	mov    cl,bl
c001f287:	d3 e6                	shl    esi,cl
c001f289:	89 ea                	mov    edx,ebp
c001f28b:	88 c1                	mov    cl,al
c001f28d:	d3 ea                	shr    edx,cl
c001f28f:	09 d6                	or     esi,edx
c001f291:	89 f0                	mov    eax,esi
c001f293:	89 fa                	mov    edx,edi
c001f295:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001f299:	89 d7                	mov    edi,edx
c001f29b:	89 c6                	mov    esi,eax
c001f29d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f2a1:	39 d7                	cmp    edi,edx
c001f2a3:	72 13                	jb     c001f2b8 <__udivdi3+0xec>
c001f2a5:	74 09                	je     c001f2b0 <__udivdi3+0xe4>
c001f2a7:	89 f0                	mov    eax,esi
c001f2a9:	31 db                	xor    ebx,ebx
c001f2ab:	e9 43 ff ff ff       	jmp    c001f1f3 <__udivdi3+0x27>
c001f2b0:	88 d9                	mov    cl,bl
c001f2b2:	d3 e5                	shl    ebp,cl
c001f2b4:	39 c5                	cmp    ebp,eax
c001f2b6:	73 ef                	jae    c001f2a7 <__udivdi3+0xdb>
c001f2b8:	8d 46 ff             	lea    eax,[esi-0x1]
c001f2bb:	31 db                	xor    ebx,ebx
c001f2bd:	e9 31 ff ff ff       	jmp    c001f1f3 <__udivdi3+0x27>
c001f2c2:	66 90                	xchg   ax,ax
c001f2c4:	31 c0                	xor    eax,eax
c001f2c6:	e9 28 ff ff ff       	jmp    c001f1f3 <__udivdi3+0x27>
c001f2cb:	90                   	nop

c001f2cc <__umoddi3>:
c001f2cc:	55                   	push   ebp
c001f2cd:	57                   	push   edi
c001f2ce:	56                   	push   esi
c001f2cf:	53                   	push   ebx
c001f2d0:	83 ec 1c             	sub    esp,0x1c
c001f2d3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001f2d7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f2db:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f2df:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001f2e3:	89 da                	mov    edx,ebx
c001f2e5:	85 c0                	test   eax,eax
c001f2e7:	75 37                	jne    c001f320 <__umoddi3+0x54>
c001f2e9:	39 df                	cmp    edi,ebx
c001f2eb:	76 13                	jbe    c001f300 <__umoddi3+0x34>
c001f2ed:	89 f0                	mov    eax,esi
c001f2ef:	f7 f7                	div    edi
c001f2f1:	89 d0                	mov    eax,edx
c001f2f3:	31 d2                	xor    edx,edx
c001f2f5:	83 c4 1c             	add    esp,0x1c
c001f2f8:	5b                   	pop    ebx
c001f2f9:	5e                   	pop    esi
c001f2fa:	5f                   	pop    edi
c001f2fb:	5d                   	pop    ebp
c001f2fc:	c3                   	ret    
c001f2fd:	8d 76 00             	lea    esi,[esi+0x0]
c001f300:	89 fd                	mov    ebp,edi
c001f302:	85 ff                	test   edi,edi
c001f304:	75 0b                	jne    c001f311 <__umoddi3+0x45>
c001f306:	b8 01 00 00 00       	mov    eax,0x1
c001f30b:	31 d2                	xor    edx,edx
c001f30d:	f7 f7                	div    edi
c001f30f:	89 c5                	mov    ebp,eax
c001f311:	89 d8                	mov    eax,ebx
c001f313:	31 d2                	xor    edx,edx
c001f315:	f7 f5                	div    ebp
c001f317:	89 f0                	mov    eax,esi
c001f319:	f7 f5                	div    ebp
c001f31b:	89 d0                	mov    eax,edx
c001f31d:	eb d4                	jmp    c001f2f3 <__umoddi3+0x27>
c001f31f:	90                   	nop
c001f320:	89 f1                	mov    ecx,esi
c001f322:	39 d8                	cmp    eax,ebx
c001f324:	76 0a                	jbe    c001f330 <__umoddi3+0x64>
c001f326:	89 f0                	mov    eax,esi
c001f328:	83 c4 1c             	add    esp,0x1c
c001f32b:	5b                   	pop    ebx
c001f32c:	5e                   	pop    esi
c001f32d:	5f                   	pop    edi
c001f32e:	5d                   	pop    ebp
c001f32f:	c3                   	ret    
c001f330:	0f bd e8             	bsr    ebp,eax
c001f333:	83 f5 1f             	xor    ebp,0x1f
c001f336:	75 1c                	jne    c001f354 <__umoddi3+0x88>
c001f338:	39 d8                	cmp    eax,ebx
c001f33a:	72 04                	jb     c001f340 <__umoddi3+0x74>
c001f33c:	39 f7                	cmp    edi,esi
c001f33e:	77 08                	ja     c001f348 <__umoddi3+0x7c>
c001f340:	89 da                	mov    edx,ebx
c001f342:	29 fe                	sub    esi,edi
c001f344:	19 c2                	sbb    edx,eax
c001f346:	89 f1                	mov    ecx,esi
c001f348:	89 c8                	mov    eax,ecx
c001f34a:	83 c4 1c             	add    esp,0x1c
c001f34d:	5b                   	pop    ebx
c001f34e:	5e                   	pop    esi
c001f34f:	5f                   	pop    edi
c001f350:	5d                   	pop    ebp
c001f351:	c3                   	ret    
c001f352:	66 90                	xchg   ax,ax
c001f354:	ba 20 00 00 00       	mov    edx,0x20
c001f359:	29 ea                	sub    edx,ebp
c001f35b:	89 e9                	mov    ecx,ebp
c001f35d:	d3 e0                	shl    eax,cl
c001f35f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f363:	89 f8                	mov    eax,edi
c001f365:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001f369:	88 d1                	mov    cl,dl
c001f36b:	d3 e8                	shr    eax,cl
c001f36d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f371:	09 c1                	or     ecx,eax
c001f373:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f377:	89 e9                	mov    ecx,ebp
c001f379:	d3 e7                	shl    edi,cl
c001f37b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f37f:	89 d8                	mov    eax,ebx
c001f381:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f385:	88 d1                	mov    cl,dl
c001f387:	d3 e8                	shr    eax,cl
c001f389:	89 c7                	mov    edi,eax
c001f38b:	89 e9                	mov    ecx,ebp
c001f38d:	d3 e3                	shl    ebx,cl
c001f38f:	89 f0                	mov    eax,esi
c001f391:	88 d1                	mov    cl,dl
c001f393:	d3 e8                	shr    eax,cl
c001f395:	09 d8                	or     eax,ebx
c001f397:	89 e9                	mov    ecx,ebp
c001f399:	d3 e6                	shl    esi,cl
c001f39b:	89 f3                	mov    ebx,esi
c001f39d:	89 fa                	mov    edx,edi
c001f39f:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001f3a3:	89 d1                	mov    ecx,edx
c001f3a5:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f3a9:	89 c6                	mov    esi,eax
c001f3ab:	89 d7                	mov    edi,edx
c001f3ad:	39 d1                	cmp    ecx,edx
c001f3af:	72 27                	jb     c001f3d8 <__umoddi3+0x10c>
c001f3b1:	74 21                	je     c001f3d4 <__umoddi3+0x108>
c001f3b3:	89 ca                	mov    edx,ecx
c001f3b5:	29 f3                	sub    ebx,esi
c001f3b7:	19 fa                	sbb    edx,edi
c001f3b9:	89 d0                	mov    eax,edx
c001f3bb:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001f3bf:	d3 e0                	shl    eax,cl
c001f3c1:	89 e9                	mov    ecx,ebp
c001f3c3:	d3 eb                	shr    ebx,cl
c001f3c5:	09 d8                	or     eax,ebx
c001f3c7:	d3 ea                	shr    edx,cl
c001f3c9:	83 c4 1c             	add    esp,0x1c
c001f3cc:	5b                   	pop    ebx
c001f3cd:	5e                   	pop    esi
c001f3ce:	5f                   	pop    edi
c001f3cf:	5d                   	pop    ebp
c001f3d0:	c3                   	ret    
c001f3d1:	8d 76 00             	lea    esi,[esi+0x0]
c001f3d4:	39 c3                	cmp    ebx,eax
c001f3d6:	73 db                	jae    c001f3b3 <__umoddi3+0xe7>
c001f3d8:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001f3dc:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001f3e0:	89 d7                	mov    edi,edx
c001f3e2:	89 c6                	mov    esi,eax
c001f3e4:	eb cd                	jmp    c001f3b3 <__umoddi3+0xe7>
c001f3e6:	66 90                	xchg   ax,ax
c001f3e8:	66 90                	xchg   ax,ax
c001f3ea:	66 90                	xchg   ax,ax
c001f3ec:	66 90                	xchg   ax,ax
c001f3ee:	66 90                	xchg   ax,ax

c001f3f0 <fabs>:
c001f3f0:	83 ec 0c             	sub    esp,0xc
c001f3f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f3f7:	89 04 24             	mov    DWORD PTR [esp],eax
c001f3fa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f3fe:	25 ff ff ff 7f       	and    eax,0x7fffffff
c001f403:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001f407:	dd 04 24             	fld    QWORD PTR [esp]
c001f40a:	83 c4 0c             	add    esp,0xc
c001f40d:	c3                   	ret    
c001f40e:	66 90                	xchg   ax,ax

c001f410 <lrint>:
c001f410:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c001f414:	83 ec 04             	sub    esp,0x4
c001f417:	db 1c 24             	fistp  DWORD PTR [esp]
c001f41a:	58                   	pop    eax
c001f41b:	c3                   	ret    

c001f41c <lrintf>:
c001f41c:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c001f420:	83 ec 04             	sub    esp,0x4
c001f423:	db 1c 24             	fistp  DWORD PTR [esp]
c001f426:	58                   	pop    eax
c001f427:	c3                   	ret    

Disassembly of section .init:

c001f428 <_init>:
c001f428:	55                   	push   ebp
c001f429:	89 e5                	mov    ebp,esp
c001f42b:	e8 e8 0c fe ff       	call   c0000118 <frame_dummy>
c001f430:	e8 a3 fa ff ff       	call   c001eed8 <__do_global_ctors_aux>
c001f435:	5d                   	pop    ebp
c001f436:	c3                   	ret    

Disassembly of section .fini:

c001f437 <_fini>:
c001f437:	55                   	push   ebp
c001f438:	89 e5                	mov    ebp,esp
c001f43a:	e8 69 0c fe ff       	call   c00000a8 <__do_global_dtors_aux>
c001f43f:	5d                   	pop    ebp
c001f440:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001f442 <Computer::~Computer()>:
c001f442:	83 ec 0c             	sub    esp,0xc
c001f445:	ba 64 0f 02 c0       	mov    edx,0xc0020f64
c001f44a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f44e:	89 10                	mov    DWORD PTR [eax],edx
c001f450:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f454:	83 ec 0c             	sub    esp,0xc
c001f457:	50                   	push   eax
c001f458:	e8 77 0f ff ff       	call   c00103d4 <Device::~Device()>
c001f45d:	83 c4 10             	add    esp,0x10
c001f460:	90                   	nop
c001f461:	83 c4 0c             	add    esp,0xc
c001f464:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001f466 <Computer::~Computer()>:
c001f466:	83 ec 0c             	sub    esp,0xc
c001f469:	83 ec 0c             	sub    esp,0xc
c001f46c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f470:	e8 cd ff ff ff       	call   c001f442 <Computer::~Computer()>
c001f475:	83 c4 10             	add    esp,0x10
c001f478:	83 ec 08             	sub    esp,0x8
c001f47b:	68 ec 01 00 00       	push   0x1ec
c001f480:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f484:	e8 be fb fe ff       	call   c000f047 <operator delete(void*, unsigned long)>
c001f489:	83 c4 10             	add    esp,0x10
c001f48c:	83 c4 0c             	add    esp,0xc
c001f48f:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001f490 <idleCommon()>:
c001f490:	83 ec 0c             	sub    esp,0xc
c001f493:	e8 ac 93 ff ff       	call   c0018844 <lockScheduler()>
c001f498:	e8 db 96 ff ff       	call   c0018b78 <schedule()>
c001f49d:	83 c4 0c             	add    esp,0xc
c001f4a0:	e9 a1 93 ff ff       	jmp    c0018846 <unlockScheduler()>

Disassembly of section .text._ZN3CPU7readCR3Ev:

c001f4a5 <CPU::readCR3()>:
c001f4a5:	83 ec 10             	sub    esp,0x10
c001f4a8:	0f 20 d8             	mov    eax,cr3
c001f4ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f4af:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f4b3:	83 c4 10             	add    esp,0x10
c001f4b6:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeCR3Em:

c001f4b7 <CPU::writeCR3(unsigned long)>:
c001f4b7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f4bb:	0f 22 d8             	mov    cr3,eax
c001f4be:	90                   	nop
c001f4bf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001f4c0 <LinkedList<UnixFile>::~LinkedList()>:
c001f4c0:	90                   	nop
c001f4c1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001f4c2 <LinkedList<UnixFile>::LinkedList()>:
c001f4c2:	83 ec 0c             	sub    esp,0xc
c001f4c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4c9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f4cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4d3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f4da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4de:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f4e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4e9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f4ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4f3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f4fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4fe:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f505:	83 ec 0c             	sub    esp,0xc
c001f508:	68 da 11 02 c0       	push   0xc00211da
c001f50d:	e8 15 fc fe ff       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c001f512:	83 c4 10             	add    esp,0x10
c001f515:	90                   	nop
c001f516:	83 c4 0c             	add    esp,0xc
c001f519:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001f51a <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001f51a:	83 ec 0c             	sub    esp,0xc
c001f51d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001f522:	75 10                	jne    c001f534 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001f524:	83 ec 0c             	sub    esp,0xc
c001f527:	68 f4 11 02 c0       	push   0xc00211f4
c001f52c:	e8 bf 63 ff ff       	call   c00158f0 <Krnl::panic(char const*)>
c001f531:	83 c4 10             	add    esp,0x10
c001f534:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f538:	8b 00                	mov    eax,DWORD PTR [eax]
c001f53a:	85 c0                	test   eax,eax
c001f53c:	74 34                	je     c001f572 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001f53e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f542:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f545:	85 c0                	test   eax,eax
c001f547:	74 29                	je     c001f572 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001f549:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f54d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f550:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f554:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f557:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f55b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f55f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f562:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f566:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f569:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f570:	eb 65                	jmp    c001f5d7 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001f572:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f576:	8b 00                	mov    eax,DWORD PTR [eax]
c001f578:	85 c0                	test   eax,eax
c001f57a:	75 4b                	jne    c001f5c7 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001f57c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f580:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f583:	85 c0                	test   eax,eax
c001f585:	75 40                	jne    c001f5c7 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001f587:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f58b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f58f:	89 10                	mov    DWORD PTR [eax],edx
c001f591:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f595:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f599:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f59c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5a0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f5a3:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f5aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5ae:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f5b1:	85 c0                	test   eax,eax
c001f5b3:	74 22                	je     c001f5d7 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001f5b5:	83 ec 0c             	sub    esp,0xc
c001f5b8:	68 16 12 02 c0       	push   0xc0021216
c001f5bd:	e8 2e 63 ff ff       	call   c00158f0 <Krnl::panic(char const*)>
c001f5c2:	83 c4 10             	add    esp,0x10
c001f5c5:	eb 10                	jmp    c001f5d7 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001f5c7:	83 ec 0c             	sub    esp,0xc
c001f5ca:	68 20 12 02 c0       	push   0xc0021220
c001f5cf:	e8 1c 63 ff ff       	call   c00158f0 <Krnl::panic(char const*)>
c001f5d4:	83 c4 10             	add    esp,0x10
c001f5d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5db:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f5de:	8d 50 01             	lea    edx,[eax+0x1]
c001f5e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5e5:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f5e8:	90                   	nop
c001f5e9:	83 c4 0c             	add    esp,0xc
c001f5ec:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001f5ee <LinkedList<UnixFile>::getFirstElement()>:
c001f5ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f5f2:	8b 00                	mov    eax,DWORD PTR [eax]
c001f5f4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001f5f6 <LinkedList<UnixFile>::removeFirst()>:
c001f5f6:	83 ec 0c             	sub    esp,0xc
c001f5f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5fd:	8b 00                	mov    eax,DWORD PTR [eax]
c001f5ff:	85 c0                	test   eax,eax
c001f601:	75 12                	jne    c001f615 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001f603:	83 ec 0c             	sub    esp,0xc
c001f606:	68 2c 12 02 c0       	push   0xc002122c
c001f60b:	e8 e0 62 ff ff       	call   c00158f0 <Krnl::panic(char const*)>
c001f610:	83 c4 10             	add    esp,0x10
c001f613:	eb 7e                	jmp    c001f693 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001f615:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f619:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f61c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f61f:	85 c0                	test   eax,eax
c001f621:	74 10                	je     c001f633 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001f623:	83 ec 0c             	sub    esp,0xc
c001f626:	68 77 12 02 c0       	push   0xc0021277
c001f62b:	e8 c0 62 ff ff       	call   c00158f0 <Krnl::panic(char const*)>
c001f630:	83 c4 10             	add    esp,0x10
c001f633:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f637:	8b 00                	mov    eax,DWORD PTR [eax]
c001f639:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f63c:	85 c0                	test   eax,eax
c001f63e:	75 33                	jne    c001f673 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001f640:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f644:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f64a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f64e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f655:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f659:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f65c:	83 f8 01             	cmp    eax,0x1
c001f65f:	74 21                	je     c001f682 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001f661:	83 ec 0c             	sub    esp,0xc
c001f664:	68 50 12 02 c0       	push   0xc0021250
c001f669:	e8 82 62 ff ff       	call   c00158f0 <Krnl::panic(char const*)>
c001f66e:	83 c4 10             	add    esp,0x10
c001f671:	eb 0f                	jmp    c001f682 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001f673:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f677:	8b 00                	mov    eax,DWORD PTR [eax]
c001f679:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001f67c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f680:	89 10                	mov    DWORD PTR [eax],edx
c001f682:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f686:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f689:	8d 50 ff             	lea    edx,[eax-0x1]
c001f68c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f690:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f693:	83 c4 0c             	add    esp,0xc
c001f696:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001f698 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001f698:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f69c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f69f:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001f6a0 <DriverlessDevice::~DriverlessDevice()>:
c001f6a0:	ba e4 18 02 c0       	mov    edx,0xc00218e4
c001f6a5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f6a9:	89 10                	mov    DWORD PTR [eax],edx
c001f6ab:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f6af:	50                   	push   eax
c001f6b0:	e8 1f 0d ff ff       	call   c00103d4 <Device::~Device()>
c001f6b5:	83 c4 04             	add    esp,0x4
c001f6b8:	90                   	nop
c001f6b9:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001f6ba <DriverlessDevice::~DriverlessDevice()>:
c001f6ba:	83 ec 0c             	sub    esp,0xc
c001f6bd:	83 ec 0c             	sub    esp,0xc
c001f6c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f6c4:	e8 d7 ff ff ff       	call   c001f6a0 <DriverlessDevice::~DriverlessDevice()>
c001f6c9:	83 c4 10             	add    esp,0x10
c001f6cc:	83 ec 08             	sub    esp,0x8
c001f6cf:	68 58 01 00 00       	push   0x158
c001f6d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f6d8:	e8 6a f9 fe ff       	call   c000f047 <operator delete(void*, unsigned long)>
c001f6dd:	83 c4 10             	add    esp,0x10
c001f6e0:	83 c4 0c             	add    esp,0xc
c001f6e3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001f6e4 <LinkedList<Device>::addElement(Device*)>:
c001f6e4:	83 ec 0c             	sub    esp,0xc
c001f6e7:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001f6ec:	75 10                	jne    c001f6fe <LinkedList<Device>::addElement(Device*)+0x1a>
c001f6ee:	83 ec 0c             	sub    esp,0xc
c001f6f1:	68 f4 11 02 c0       	push   0xc00211f4
c001f6f6:	e8 f5 61 ff ff       	call   c00158f0 <Krnl::panic(char const*)>
c001f6fb:	83 c4 10             	add    esp,0x10
c001f6fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f702:	8b 00                	mov    eax,DWORD PTR [eax]
c001f704:	85 c0                	test   eax,eax
c001f706:	74 3a                	je     c001f742 <LinkedList<Device>::addElement(Device*)+0x5e>
c001f708:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f70c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f70f:	85 c0                	test   eax,eax
c001f711:	74 2f                	je     c001f742 <LinkedList<Device>::addElement(Device*)+0x5e>
c001f713:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f717:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f71a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f71e:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001f724:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f728:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f72c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f72f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f733:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f736:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001f740:	eb 68                	jmp    c001f7aa <LinkedList<Device>::addElement(Device*)+0xc6>
c001f742:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f746:	8b 00                	mov    eax,DWORD PTR [eax]
c001f748:	85 c0                	test   eax,eax
c001f74a:	75 4e                	jne    c001f79a <LinkedList<Device>::addElement(Device*)+0xb6>
c001f74c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f750:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f753:	85 c0                	test   eax,eax
c001f755:	75 43                	jne    c001f79a <LinkedList<Device>::addElement(Device*)+0xb6>
c001f757:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f75b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f75f:	89 10                	mov    DWORD PTR [eax],edx
c001f761:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f765:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f769:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f76c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f770:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f773:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001f77d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f781:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f784:	85 c0                	test   eax,eax
c001f786:	74 22                	je     c001f7aa <LinkedList<Device>::addElement(Device*)+0xc6>
c001f788:	83 ec 0c             	sub    esp,0xc
c001f78b:	68 16 12 02 c0       	push   0xc0021216
c001f790:	e8 5b 61 ff ff       	call   c00158f0 <Krnl::panic(char const*)>
c001f795:	83 c4 10             	add    esp,0x10
c001f798:	eb 10                	jmp    c001f7aa <LinkedList<Device>::addElement(Device*)+0xc6>
c001f79a:	83 ec 0c             	sub    esp,0xc
c001f79d:	68 20 12 02 c0       	push   0xc0021220
c001f7a2:	e8 49 61 ff ff       	call   c00158f0 <Krnl::panic(char const*)>
c001f7a7:	83 c4 10             	add    esp,0x10
c001f7aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7ae:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f7b1:	8d 50 01             	lea    edx,[eax+0x1]
c001f7b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7b8:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f7bb:	90                   	nop
c001f7bc:	83 c4 0c             	add    esp,0xc
c001f7bf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001f7c0 <LinkedList<Device>::LinkedList()>:
c001f7c0:	83 ec 0c             	sub    esp,0xc
c001f7c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7c7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f7cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7d1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f7d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7dc:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f7e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7e7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f7ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7f1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f7f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7fc:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f803:	83 ec 0c             	sub    esp,0xc
c001f806:	68 da 11 02 c0       	push   0xc00211da
c001f80b:	e8 17 f9 fe ff       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c001f810:	83 c4 10             	add    esp,0x10
c001f813:	90                   	nop
c001f814:	83 c4 0c             	add    esp,0xc
c001f817:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR0Ev:

c001f818 <CPU::readCR0()>:
c001f818:	83 ec 10             	sub    esp,0x10
c001f81b:	0f 20 c0             	mov    eax,cr0
c001f81e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f822:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f826:	83 c4 10             	add    esp,0x10
c001f829:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeCR0Em:

c001f82a <CPU::writeCR0(unsigned long)>:
c001f82a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f82e:	0f 22 c0             	mov    cr0,eax
c001f831:	90                   	nop
c001f832:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR0Ev:

c001f833 <CPU::readDR0()>:
c001f833:	83 ec 10             	sub    esp,0x10
c001f836:	0f 21 c0             	mov    eax,db0
c001f839:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f83d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f841:	83 c4 10             	add    esp,0x10
c001f844:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR1Ev:

c001f845 <CPU::readDR1()>:
c001f845:	83 ec 10             	sub    esp,0x10
c001f848:	0f 21 c8             	mov    eax,db1
c001f84b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f84f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f853:	83 c4 10             	add    esp,0x10
c001f856:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR2Ev:

c001f857 <CPU::readDR2()>:
c001f857:	83 ec 10             	sub    esp,0x10
c001f85a:	0f 21 d0             	mov    eax,db2
c001f85d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f861:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f865:	83 c4 10             	add    esp,0x10
c001f868:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR3Ev:

c001f869 <CPU::readDR3()>:
c001f869:	83 ec 10             	sub    esp,0x10
c001f86c:	0f 21 d8             	mov    eax,db3
c001f86f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f873:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f877:	83 c4 10             	add    esp,0x10
c001f87a:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR6Ev:

c001f87b <CPU::readDR6()>:
c001f87b:	83 ec 10             	sub    esp,0x10
c001f87e:	0f 21 f0             	mov    eax,db6
c001f881:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f885:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f889:	83 c4 10             	add    esp,0x10
c001f88c:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR7Ev:

c001f88d <CPU::readDR7()>:
c001f88d:	83 ec 10             	sub    esp,0x10
c001f890:	0f 21 f8             	mov    eax,db7
c001f893:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f897:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f89b:	83 c4 10             	add    esp,0x10
c001f89e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001f8a0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001f8a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f8a4:	8b 00                	mov    eax,DWORD PTR [eax]
c001f8a6:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001f8a8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001f8a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f8ac:	8b 00                	mov    eax,DWORD PTR [eax]
c001f8ae:	85 c0                	test   eax,eax
c001f8b0:	75 0e                	jne    c001f8c0 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001f8b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f8b6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f8b9:	85 c0                	test   eax,eax
c001f8bb:	75 03                	jne    c001f8c0 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001f8bd:	b0 01                	mov    al,0x1
c001f8bf:	c3                   	ret    
c001f8c0:	b0 00                	mov    al,0x0
c001f8c2:	90                   	nop
c001f8c3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001f8c4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001f8c4:	83 ec 0c             	sub    esp,0xc
c001f8c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8cb:	8b 00                	mov    eax,DWORD PTR [eax]
c001f8cd:	85 c0                	test   eax,eax
c001f8cf:	75 15                	jne    c001f8e6 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c001f8d1:	83 ec 0c             	sub    esp,0xc
c001f8d4:	68 2c 12 02 c0       	push   0xc002122c
c001f8d9:	e8 12 60 ff ff       	call   c00158f0 <Krnl::panic(char const*)>
c001f8de:	83 c4 10             	add    esp,0x10
c001f8e1:	e9 88 00 00 00       	jmp    c001f96e <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c001f8e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8ea:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f8ed:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001f8f0:	85 c0                	test   eax,eax
c001f8f2:	0f 95 c0             	setne  al
c001f8f5:	84 c0                	test   al,al
c001f8f7:	74 10                	je     c001f909 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c001f8f9:	83 ec 0c             	sub    esp,0xc
c001f8fc:	68 77 12 02 c0       	push   0xc0021277
c001f901:	e8 ea 5f ff ff       	call   c00158f0 <Krnl::panic(char const*)>
c001f906:	83 c4 10             	add    esp,0x10
c001f909:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f90d:	8b 00                	mov    eax,DWORD PTR [eax]
c001f90f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001f912:	85 c0                	test   eax,eax
c001f914:	0f 94 c0             	sete   al
c001f917:	84 c0                	test   al,al
c001f919:	74 33                	je     c001f94e <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c001f91b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f91f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f925:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f929:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f930:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f934:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f937:	83 f8 01             	cmp    eax,0x1
c001f93a:	74 21                	je     c001f95d <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c001f93c:	83 ec 0c             	sub    esp,0xc
c001f93f:	68 50 12 02 c0       	push   0xc0021250
c001f944:	e8 a7 5f ff ff       	call   c00158f0 <Krnl::panic(char const*)>
c001f949:	83 c4 10             	add    esp,0x10
c001f94c:	eb 0f                	jmp    c001f95d <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c001f94e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f952:	8b 00                	mov    eax,DWORD PTR [eax]
c001f954:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001f957:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f95b:	89 10                	mov    DWORD PTR [eax],edx
c001f95d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f961:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f964:	8d 50 ff             	lea    edx,[eax-0x1]
c001f967:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f96b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f96e:	83 c4 0c             	add    esp,0xc
c001f971:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001f972 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001f972:	83 ec 0c             	sub    esp,0xc
c001f975:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001f97a:	75 10                	jne    c001f98c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c001f97c:	83 ec 0c             	sub    esp,0xc
c001f97f:	68 f4 11 02 c0       	push   0xc00211f4
c001f984:	e8 67 5f ff ff       	call   c00158f0 <Krnl::panic(char const*)>
c001f989:	83 c4 10             	add    esp,0x10
c001f98c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f990:	8b 00                	mov    eax,DWORD PTR [eax]
c001f992:	85 c0                	test   eax,eax
c001f994:	74 34                	je     c001f9ca <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c001f996:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f99a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f99d:	85 c0                	test   eax,eax
c001f99f:	74 29                	je     c001f9ca <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c001f9a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9a5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f9a8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f9ac:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001f9af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9b3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f9b7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f9ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9be:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f9c1:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001f9c8:	eb 65                	jmp    c001fa2f <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c001f9ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9ce:	8b 00                	mov    eax,DWORD PTR [eax]
c001f9d0:	85 c0                	test   eax,eax
c001f9d2:	75 4b                	jne    c001fa1f <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c001f9d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9d8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f9db:	85 c0                	test   eax,eax
c001f9dd:	75 40                	jne    c001fa1f <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c001f9df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9e3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f9e7:	89 10                	mov    DWORD PTR [eax],edx
c001f9e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9ed:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f9f1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f9f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9f8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f9fb:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001fa02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa06:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fa09:	85 c0                	test   eax,eax
c001fa0b:	74 22                	je     c001fa2f <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c001fa0d:	83 ec 0c             	sub    esp,0xc
c001fa10:	68 16 12 02 c0       	push   0xc0021216
c001fa15:	e8 d6 5e ff ff       	call   c00158f0 <Krnl::panic(char const*)>
c001fa1a:	83 c4 10             	add    esp,0x10
c001fa1d:	eb 10                	jmp    c001fa2f <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c001fa1f:	83 ec 0c             	sub    esp,0xc
c001fa22:	68 20 12 02 c0       	push   0xc0021220
c001fa27:	e8 c4 5e ff ff       	call   c00158f0 <Krnl::panic(char const*)>
c001fa2c:	83 c4 10             	add    esp,0x10
c001fa2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa33:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fa36:	8d 50 01             	lea    edx,[eax+0x1]
c001fa39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa3d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fa40:	90                   	nop
c001fa41:	83 c4 0c             	add    esp,0xc
c001fa44:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001fa46 <ACPI::~ACPI()>:
c001fa46:	83 ec 0c             	sub    esp,0xc
c001fa49:	ba 9c 20 02 c0       	mov    edx,0xc002209c
c001fa4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa52:	89 10                	mov    DWORD PTR [eax],edx
c001fa54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa58:	83 ec 0c             	sub    esp,0xc
c001fa5b:	50                   	push   eax
c001fa5c:	e8 73 09 ff ff       	call   c00103d4 <Device::~Device()>
c001fa61:	83 c4 10             	add    esp,0x10
c001fa64:	90                   	nop
c001fa65:	83 c4 0c             	add    esp,0xc
c001fa68:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001fa6a <ACPI::~ACPI()>:
c001fa6a:	83 ec 0c             	sub    esp,0xc
c001fa6d:	83 ec 0c             	sub    esp,0xc
c001fa70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fa74:	e8 cd ff ff ff       	call   c001fa46 <ACPI::~ACPI()>
c001fa79:	83 c4 10             	add    esp,0x10
c001fa7c:	83 ec 08             	sub    esp,0x8
c001fa7f:	68 68 22 00 00       	push   0x2268
c001fa84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fa88:	e8 ba f5 fe ff       	call   c000f047 <operator delete(void*, unsigned long)>
c001fa8d:	83 c4 10             	add    esp,0x10
c001fa90:	83 c4 0c             	add    esp,0xc
c001fa93:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001fa94 <CPU::~CPU()>:
c001fa94:	83 ec 0c             	sub    esp,0xc
c001fa97:	ba 8c 24 02 c0       	mov    edx,0xc002248c
c001fa9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001faa0:	89 10                	mov    DWORD PTR [eax],edx
c001faa2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001faa6:	83 ec 0c             	sub    esp,0xc
c001faa9:	50                   	push   eax
c001faaa:	e8 25 09 ff ff       	call   c00103d4 <Device::~Device()>
c001faaf:	83 c4 10             	add    esp,0x10
c001fab2:	90                   	nop
c001fab3:	83 c4 0c             	add    esp,0xc
c001fab6:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001fab8 <CPU::~CPU()>:
c001fab8:	83 ec 0c             	sub    esp,0xc
c001fabb:	83 ec 0c             	sub    esp,0xc
c001fabe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fac2:	e8 cd ff ff ff       	call   c001fa94 <CPU::~CPU()>
c001fac7:	83 c4 10             	add    esp,0x10
c001faca:	83 ec 08             	sub    esp,0x8
c001facd:	68 98 11 00 00       	push   0x1198
c001fad2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fad6:	e8 6c f5 fe ff       	call   c000f047 <operator delete(void*, unsigned long)>
c001fadb:	83 c4 10             	add    esp,0x10
c001fade:	83 c4 0c             	add    esp,0xc
c001fae1:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR4Ev:

c001fae2 <CPU::readCR4()>:
c001fae2:	83 ec 10             	sub    esp,0x10
c001fae5:	0f 20 e0             	mov    eax,cr4
c001fae8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001faec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001faf0:	83 c4 10             	add    esp,0x10
c001faf3:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeDR7Em:

c001faf4 <CPU::writeDR7(unsigned long)>:
c001faf4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001faf8:	0f 23 f8             	mov    db7,eax
c001fafb:	90                   	nop
c001fafc:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeCR4Em:

c001fafd <CPU::writeCR4(unsigned long)>:
c001fafd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb01:	0f 22 e0             	mov    cr4,eax
c001fb04:	90                   	nop
c001fb05:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR2Ev:

c001fb06 <CPU::readCR2()>:
c001fb06:	83 ec 10             	sub    esp,0x10
c001fb09:	0f 20 d0             	mov    eax,cr2
c001fb0c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fb10:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fb14:	83 c4 10             	add    esp,0x10
c001fb17:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001fb18 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001fb18:	90                   	nop
c001fb19:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001fb1a <ThreadControlBlock::ThreadControlBlock()>:
c001fb1a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb1e:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001fb25:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb29:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001fb30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb34:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001fb3b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb3f:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c001fb46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb4a:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001fb4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb52:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c001fb56:	90                   	nop
c001fb57:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001fb58 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001fb58:	83 ec 0c             	sub    esp,0xc
c001fb5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb5f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fb65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb69:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fb70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb74:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fb7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb7f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fb85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb89:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fb90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb94:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fb9b:	83 ec 0c             	sub    esp,0xc
c001fb9e:	68 da 11 02 c0       	push   0xc00211da
c001fba3:	e8 7f f5 fe ff       	call   c000f127 <Dbg::kprintf(char const*, ...)>
c001fba8:	83 c4 10             	add    esp,0x10
c001fbab:	90                   	nop
c001fbac:	83 c4 0c             	add    esp,0xc
c001fbaf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001fbb0 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001fbb0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fbb4:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001fbb7:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001fbb8 <PCI::~PCI()>:
c001fbb8:	83 ec 0c             	sub    esp,0xc
c001fbbb:	ba 0c 31 02 c0       	mov    edx,0xc002310c
c001fbc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbc4:	89 10                	mov    DWORD PTR [eax],edx
c001fbc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbca:	83 ec 0c             	sub    esp,0xc
c001fbcd:	50                   	push   eax
c001fbce:	e8 11 02 ff ff       	call   c000fde4 <Bus::~Bus()>
c001fbd3:	83 c4 10             	add    esp,0x10
c001fbd6:	90                   	nop
c001fbd7:	83 c4 0c             	add    esp,0xc
c001fbda:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001fbdc <PCI::~PCI()>:
c001fbdc:	83 ec 0c             	sub    esp,0xc
c001fbdf:	83 ec 0c             	sub    esp,0xc
c001fbe2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fbe6:	e8 cd ff ff ff       	call   c001fbb8 <PCI::~PCI()>
c001fbeb:	83 c4 10             	add    esp,0x10
c001fbee:	83 ec 08             	sub    esp,0x8
c001fbf1:	68 58 01 00 00       	push   0x158
c001fbf6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fbfa:	e8 48 f4 fe ff       	call   c000f047 <operator delete(void*, unsigned long)>
c001fbff:	83 c4 10             	add    esp,0x10
c001fc02:	83 c4 0c             	add    esp,0xc
c001fc05:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001fc06 <IDE::~IDE()>:
c001fc06:	83 ec 0c             	sub    esp,0xc
c001fc09:	ba 70 33 02 c0       	mov    edx,0xc0023370
c001fc0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc12:	89 10                	mov    DWORD PTR [eax],edx
c001fc14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc18:	83 ec 0c             	sub    esp,0xc
c001fc1b:	50                   	push   eax
c001fc1c:	e8 c9 0c ff ff       	call   c00108ea <HardDiskController::~HardDiskController()>
c001fc21:	83 c4 10             	add    esp,0x10
c001fc24:	90                   	nop
c001fc25:	83 c4 0c             	add    esp,0xc
c001fc28:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001fc2a <IDE::~IDE()>:
c001fc2a:	83 ec 0c             	sub    esp,0xc
c001fc2d:	83 ec 0c             	sub    esp,0xc
c001fc30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fc34:	e8 cd ff ff ff       	call   c001fc06 <IDE::~IDE()>
c001fc39:	83 c4 10             	add    esp,0x10
c001fc3c:	83 ec 08             	sub    esp,0x8
c001fc3f:	68 70 02 00 00       	push   0x270
c001fc44:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fc48:	e8 fa f3 fe ff       	call   c000f047 <operator delete(void*, unsigned long)>
c001fc4d:	83 c4 10             	add    esp,0x10
c001fc50:	83 c4 0c             	add    esp,0xc
c001fc53:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001fc54 <ATA::~ATA()>:
c001fc54:	83 ec 0c             	sub    esp,0xc
c001fc57:	ba c0 33 02 c0       	mov    edx,0xc00233c0
c001fc5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc60:	89 10                	mov    DWORD PTR [eax],edx
c001fc62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc66:	83 ec 0c             	sub    esp,0xc
c001fc69:	50                   	push   eax
c001fc6a:	e8 59 0d ff ff       	call   c00109c8 <PhysicalDisk::~PhysicalDisk()>
c001fc6f:	83 c4 10             	add    esp,0x10
c001fc72:	90                   	nop
c001fc73:	83 c4 0c             	add    esp,0xc
c001fc76:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001fc78 <ATA::~ATA()>:
c001fc78:	83 ec 0c             	sub    esp,0xc
c001fc7b:	83 ec 0c             	sub    esp,0xc
c001fc7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fc82:	e8 cd ff ff ff       	call   c001fc54 <ATA::~ATA()>
c001fc87:	83 c4 10             	add    esp,0x10
c001fc8a:	83 ec 08             	sub    esp,0x8
c001fc8d:	68 7c 01 00 00       	push   0x17c
c001fc92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fc96:	e8 ac f3 fe ff       	call   c000f047 <operator delete(void*, unsigned long)>
c001fc9b:	83 c4 10             	add    esp,0x10
c001fc9e:	83 c4 0c             	add    esp,0xc
c001fca1:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001fca2 <ATAPI::~ATAPI()>:
c001fca2:	83 ec 0c             	sub    esp,0xc
c001fca5:	ba 2c 34 02 c0       	mov    edx,0xc002342c
c001fcaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcae:	89 10                	mov    DWORD PTR [eax],edx
c001fcb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcb4:	83 ec 0c             	sub    esp,0xc
c001fcb7:	50                   	push   eax
c001fcb8:	e8 0b 0d ff ff       	call   c00109c8 <PhysicalDisk::~PhysicalDisk()>
c001fcbd:	83 c4 10             	add    esp,0x10
c001fcc0:	90                   	nop
c001fcc1:	83 c4 0c             	add    esp,0xc
c001fcc4:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001fcc6 <ATAPI::~ATAPI()>:
c001fcc6:	83 ec 0c             	sub    esp,0xc
c001fcc9:	83 ec 0c             	sub    esp,0xc
c001fccc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fcd0:	e8 cd ff ff ff       	call   c001fca2 <ATAPI::~ATAPI()>
c001fcd5:	83 c4 10             	add    esp,0x10
c001fcd8:	83 ec 08             	sub    esp,0x8
c001fcdb:	68 80 01 00 00       	push   0x180
c001fce0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fce4:	e8 5e f3 fe ff       	call   c000f047 <operator delete(void*, unsigned long)>
c001fce9:	83 c4 10             	add    esp,0x10
c001fcec:	83 c4 0c             	add    esp,0xc
c001fcef:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c001fcf0 <AVX::~AVX()>:
c001fcf0:	83 ec 0c             	sub    esp,0xc
c001fcf3:	ba 68 34 02 c0       	mov    edx,0xc0023468
c001fcf8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcfc:	89 10                	mov    DWORD PTR [eax],edx
c001fcfe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd02:	83 ec 0c             	sub    esp,0xc
c001fd05:	50                   	push   eax
c001fd06:	e8 41 0d ff ff       	call   c0010a4c <FPU::~FPU()>
c001fd0b:	83 c4 10             	add    esp,0x10
c001fd0e:	90                   	nop
c001fd0f:	83 c4 0c             	add    esp,0xc
c001fd12:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c001fd14 <AVX::~AVX()>:
c001fd14:	83 ec 0c             	sub    esp,0xc
c001fd17:	83 ec 0c             	sub    esp,0xc
c001fd1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fd1e:	e8 cd ff ff ff       	call   c001fcf0 <AVX::~AVX()>
c001fd23:	83 c4 10             	add    esp,0x10
c001fd26:	83 ec 08             	sub    esp,0x8
c001fd29:	68 58 01 00 00       	push   0x158
c001fd2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fd32:	e8 10 f3 fe ff       	call   c000f047 <operator delete(void*, unsigned long)>
c001fd37:	83 c4 10             	add    esp,0x10
c001fd3a:	83 c4 0c             	add    esp,0xc
c001fd3d:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c001fd3e <MMX::~MMX()>:
c001fd3e:	83 ec 0c             	sub    esp,0xc
c001fd41:	ba a8 34 02 c0       	mov    edx,0xc00234a8
c001fd46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd4a:	89 10                	mov    DWORD PTR [eax],edx
c001fd4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd50:	83 ec 0c             	sub    esp,0xc
c001fd53:	50                   	push   eax
c001fd54:	e8 f3 0c ff ff       	call   c0010a4c <FPU::~FPU()>
c001fd59:	83 c4 10             	add    esp,0x10
c001fd5c:	90                   	nop
c001fd5d:	83 c4 0c             	add    esp,0xc
c001fd60:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c001fd62 <MMX::~MMX()>:
c001fd62:	83 ec 0c             	sub    esp,0xc
c001fd65:	83 ec 0c             	sub    esp,0xc
c001fd68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fd6c:	e8 cd ff ff ff       	call   c001fd3e <MMX::~MMX()>
c001fd71:	83 c4 10             	add    esp,0x10
c001fd74:	83 ec 08             	sub    esp,0x8
c001fd77:	68 58 01 00 00       	push   0x158
c001fd7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fd80:	e8 c2 f2 fe ff       	call   c000f047 <operator delete(void*, unsigned long)>
c001fd85:	83 c4 10             	add    esp,0x10
c001fd88:	83 c4 0c             	add    esp,0xc
c001fd8b:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c001fd8c <SSE::~SSE()>:
c001fd8c:	83 ec 0c             	sub    esp,0xc
c001fd8f:	ba e8 34 02 c0       	mov    edx,0xc00234e8
c001fd94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd98:	89 10                	mov    DWORD PTR [eax],edx
c001fd9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd9e:	83 ec 0c             	sub    esp,0xc
c001fda1:	50                   	push   eax
c001fda2:	e8 a5 0c ff ff       	call   c0010a4c <FPU::~FPU()>
c001fda7:	83 c4 10             	add    esp,0x10
c001fdaa:	90                   	nop
c001fdab:	83 c4 0c             	add    esp,0xc
c001fdae:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c001fdb0 <SSE::~SSE()>:
c001fdb0:	83 ec 0c             	sub    esp,0xc
c001fdb3:	83 ec 0c             	sub    esp,0xc
c001fdb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fdba:	e8 cd ff ff ff       	call   c001fd8c <SSE::~SSE()>
c001fdbf:	83 c4 10             	add    esp,0x10
c001fdc2:	83 ec 08             	sub    esp,0x8
c001fdc5:	68 58 01 00 00       	push   0x158
c001fdca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fdce:	e8 74 f2 fe ff       	call   c000f047 <operator delete(void*, unsigned long)>
c001fdd3:	83 c4 10             	add    esp,0x10
c001fdd6:	83 c4 0c             	add    esp,0xc
c001fdd9:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c001fdda <x87::~x87()>:
c001fdda:	83 ec 0c             	sub    esp,0xc
c001fddd:	ba 28 35 02 c0       	mov    edx,0xc0023528
c001fde2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fde6:	89 10                	mov    DWORD PTR [eax],edx
c001fde8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdec:	83 ec 0c             	sub    esp,0xc
c001fdef:	50                   	push   eax
c001fdf0:	e8 57 0c ff ff       	call   c0010a4c <FPU::~FPU()>
c001fdf5:	83 c4 10             	add    esp,0x10
c001fdf8:	90                   	nop
c001fdf9:	83 c4 0c             	add    esp,0xc
c001fdfc:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c001fdfe <x87::~x87()>:
c001fdfe:	83 ec 0c             	sub    esp,0xc
c001fe01:	83 ec 0c             	sub    esp,0xc
c001fe04:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe08:	e8 cd ff ff ff       	call   c001fdda <x87::~x87()>
c001fe0d:	83 c4 10             	add    esp,0x10
c001fe10:	83 ec 08             	sub    esp,0x8
c001fe13:	68 58 01 00 00       	push   0x158
c001fe18:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe1c:	e8 26 f2 fe ff       	call   c000f047 <operator delete(void*, unsigned long)>
c001fe21:	83 c4 10             	add    esp,0x10
c001fe24:	83 c4 0c             	add    esp,0xc
c001fe27:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001fe28 <IOAPIC::~IOAPIC()>:
c001fe28:	83 ec 0c             	sub    esp,0xc
c001fe2b:	ba 80 36 02 c0       	mov    edx,0xc0023680
c001fe30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe34:	89 10                	mov    DWORD PTR [eax],edx
c001fe36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe3a:	83 ec 0c             	sub    esp,0xc
c001fe3d:	50                   	push   eax
c001fe3e:	e8 91 05 ff ff       	call   c00103d4 <Device::~Device()>
c001fe43:	83 c4 10             	add    esp,0x10
c001fe46:	90                   	nop
c001fe47:	83 c4 0c             	add    esp,0xc
c001fe4a:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c001fe4c <IOAPIC::~IOAPIC()>:
c001fe4c:	83 ec 0c             	sub    esp,0xc
c001fe4f:	83 ec 0c             	sub    esp,0xc
c001fe52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe56:	e8 cd ff ff ff       	call   c001fe28 <IOAPIC::~IOAPIC()>
c001fe5b:	83 c4 10             	add    esp,0x10
c001fe5e:	83 ec 08             	sub    esp,0x8
c001fe61:	68 68 01 00 00       	push   0x168
c001fe66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe6a:	e8 d8 f1 fe ff       	call   c000f047 <operator delete(void*, unsigned long)>
c001fe6f:	83 c4 10             	add    esp,0x10
c001fe72:	83 c4 0c             	add    esp,0xc
c001fe75:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c001fe76 <APIC::~APIC()>:
c001fe76:	83 ec 0c             	sub    esp,0xc
c001fe79:	ba 38 36 02 c0       	mov    edx,0xc0023638
c001fe7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe82:	89 10                	mov    DWORD PTR [eax],edx
c001fe84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe88:	83 ec 0c             	sub    esp,0xc
c001fe8b:	50                   	push   eax
c001fe8c:	e8 85 10 ff ff       	call   c0010f16 <InterruptController::~InterruptController()>
c001fe91:	83 c4 10             	add    esp,0x10
c001fe94:	90                   	nop
c001fe95:	83 c4 0c             	add    esp,0xc
c001fe98:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c001fe9a <APIC::~APIC()>:
c001fe9a:	83 ec 0c             	sub    esp,0xc
c001fe9d:	83 ec 0c             	sub    esp,0xc
c001fea0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fea4:	e8 cd ff ff ff       	call   c001fe76 <APIC::~APIC()>
c001fea9:	83 c4 10             	add    esp,0x10
c001feac:	83 ec 08             	sub    esp,0x8
c001feaf:	68 58 21 00 00       	push   0x2158
c001feb4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001feb8:	e8 8a f1 fe ff       	call   c000f047 <operator delete(void*, unsigned long)>
c001febd:	83 c4 10             	add    esp,0x10
c001fec0:	83 c4 0c             	add    esp,0xc
c001fec3:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c001fec4 <PIC::~PIC()>:
c001fec4:	83 ec 0c             	sub    esp,0xc
c001fec7:	ba d0 36 02 c0       	mov    edx,0xc00236d0
c001fecc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fed0:	89 10                	mov    DWORD PTR [eax],edx
c001fed2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fed6:	83 ec 0c             	sub    esp,0xc
c001fed9:	50                   	push   eax
c001feda:	e8 37 10 ff ff       	call   c0010f16 <InterruptController::~InterruptController()>
c001fedf:	83 c4 10             	add    esp,0x10
c001fee2:	90                   	nop
c001fee3:	83 c4 0c             	add    esp,0xc
c001fee6:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c001fee8 <PIC::~PIC()>:
c001fee8:	83 ec 0c             	sub    esp,0xc
c001feeb:	83 ec 0c             	sub    esp,0xc
c001feee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fef2:	e8 cd ff ff ff       	call   c001fec4 <PIC::~PIC()>
c001fef7:	83 c4 10             	add    esp,0x10
c001fefa:	83 ec 08             	sub    esp,0x8
c001fefd:	68 58 21 00 00       	push   0x2158
c001ff02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff06:	e8 3c f1 fe ff       	call   c000f047 <operator delete(void*, unsigned long)>
c001ff0b:	83 c4 10             	add    esp,0x10
c001ff0e:	83 c4 0c             	add    esp,0xc
c001ff11:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c001ff12 <APICTimer::~APICTimer()>:
c001ff12:	83 ec 0c             	sub    esp,0xc
c001ff15:	ba 24 37 02 c0       	mov    edx,0xc0023724
c001ff1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff1e:	89 10                	mov    DWORD PTR [eax],edx
c001ff20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff24:	83 ec 0c             	sub    esp,0xc
c001ff27:	50                   	push   eax
c001ff28:	e8 03 2d ff ff       	call   c0012c30 <Timer::~Timer()>
c001ff2d:	83 c4 10             	add    esp,0x10
c001ff30:	90                   	nop
c001ff31:	83 c4 0c             	add    esp,0xc
c001ff34:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c001ff36 <APICTimer::~APICTimer()>:
c001ff36:	83 ec 0c             	sub    esp,0xc
c001ff39:	83 ec 0c             	sub    esp,0xc
c001ff3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff40:	e8 cd ff ff ff       	call   c001ff12 <APICTimer::~APICTimer()>
c001ff45:	83 c4 10             	add    esp,0x10
c001ff48:	83 ec 08             	sub    esp,0x8
c001ff4b:	68 60 01 00 00       	push   0x160
c001ff50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff54:	e8 ee f0 fe ff       	call   c000f047 <operator delete(void*, unsigned long)>
c001ff59:	83 c4 10             	add    esp,0x10
c001ff5c:	83 c4 0c             	add    esp,0xc
c001ff5f:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c001ff60 <PIT::~PIT()>:
c001ff60:	83 ec 0c             	sub    esp,0xc
c001ff63:	ba 74 37 02 c0       	mov    edx,0xc0023774
c001ff68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff6c:	89 10                	mov    DWORD PTR [eax],edx
c001ff6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff72:	83 ec 0c             	sub    esp,0xc
c001ff75:	50                   	push   eax
c001ff76:	e8 b5 2c ff ff       	call   c0012c30 <Timer::~Timer()>
c001ff7b:	83 c4 10             	add    esp,0x10
c001ff7e:	90                   	nop
c001ff7f:	83 c4 0c             	add    esp,0xc
c001ff82:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c001ff84 <PIT::~PIT()>:
c001ff84:	83 ec 0c             	sub    esp,0xc
c001ff87:	83 ec 0c             	sub    esp,0xc
c001ff8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff8e:	e8 cd ff ff ff       	call   c001ff60 <PIT::~PIT()>
c001ff93:	83 c4 10             	add    esp,0x10
c001ff96:	83 ec 08             	sub    esp,0x8
c001ff99:	68 5c 01 00 00       	push   0x15c
c001ff9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ffa2:	e8 a0 f0 fe ff       	call   c000f047 <operator delete(void*, unsigned long)>
c001ffa7:	83 c4 10             	add    esp,0x10
c001ffaa:	83 c4 0c             	add    esp,0xc
c001ffad:	c3                   	ret    
