
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 92 d3 00 00       	call   c000d3b2 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 53 e5 01 00       	call   c001e578 <_init>
c0000025:	c3                   	ret    
c0000026:	bb 54 f1 01 c0       	mov    ebx,0xc001f154
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 5c f1 01 c0    	cmp    ebx,0xc001f15c
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 e8 2a 02 c0       	mov    eax,0xc0022ae8
c0000049:	3d e8 2a 02 c0       	cmp    eax,0xc0022ae8
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 e8 2a 02 c0       	push   0xc0022ae8
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 e8 2a 02 c0       	mov    eax,0xc0022ae8
c0000075:	2d e8 2a 02 c0       	sub    eax,0xc0022ae8
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 e8 2a 02 c0       	push   0xc0022ae8
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 88 2c 02 c0 00 	cmp    BYTE PTR ds:0xc0022c88,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 64 f1 01 c0       	mov    ebx,0xc001f164
c00000bb:	81 eb 60 f1 01 c0    	sub    ebx,0xc001f160
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 60 f1 01 c0       	mov    esi,0xc001f160
c00000ca:	a1 8c 2c 02 c0       	mov    eax,ds:0xc0022c8c
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 8c 2c 02 c0       	mov    ds:0xc0022c8c,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 8c 2c 02 c0       	mov    eax,ds:0xc0022c8c
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 e8 2a 02 c0       	push   0xc0022ae8
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 88 2c 02 c0 01 	mov    BYTE PTR ds:0xc0022c88,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 90 2c 02 c0       	push   0xc0022c90
c000012c:	68 e8 2a 02 c0       	push   0xc0022ae8
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <doTPAUSE>:
c0000150:	fb                   	sti    
c0000151:	31 c0                	xor    eax,eax
c0000153:	31 d2                	xor    edx,edx
c0000155:	66 0f ae f0          	tpause eax
c0000159:	c3                   	ret    

c000015a <hasLegacyFPU>:
c000015a:	0f 20 c2             	mov    edx,cr0
c000015d:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000163:	0f 22 c2             	mov    cr0,edx
c0000166:	db e3                	fninit 
c0000168:	dd 3d 7d 01 00 c0    	fnstsw WORD PTR ds:0xc000017d
c000016e:	31 c0                	xor    eax,eax
c0000170:	66 81 3d 7d 01 00 c0 00 00 	cmp    WORD PTR ds:0xc000017d,0x0
c0000179:	75 01                	jne    c000017c <hasLegacyFPU.nofpu>

c000017b <hasLegacyFPU.hasfpu>:
c000017b:	40                   	inc    eax

c000017c <hasLegacyFPU.nofpu>:
c000017c:	c3                   	ret    

c000017d <testword>:
c000017d:	aa                   	stos   BYTE PTR es:[edi],al
c000017e:	55                   	push   ebp

c000017f <is486>:
c000017f:	0f 09                	wbinvd 
c0000181:	31 c0                	xor    eax,eax
c0000183:	40                   	inc    eax
c0000184:	c3                   	ret    
c0000185:	90                   	nop
c0000186:	90                   	nop
c0000187:	90                   	nop
c0000188:	90                   	nop
c0000189:	90                   	nop
c000018a:	90                   	nop
c000018b:	90                   	nop
c000018c:	90                   	nop
c000018d:	90                   	nop
c000018e:	90                   	nop
c000018f:	90                   	nop
c0000190:	90                   	nop
c0000191:	90                   	nop
c0000192:	90                   	nop
c0000193:	90                   	nop
c0000194:	90                   	nop
c0000195:	90                   	nop
c0000196:	90                   	nop
c0000197:	90                   	nop
c0000198:	90                   	nop
c0000199:	90                   	nop
c000019a:	90                   	nop
c000019b:	90                   	nop
c000019c:	90                   	nop
c000019d:	90                   	nop
c000019e:	90                   	nop
c000019f:	90                   	nop
c00001a0:	90                   	nop
c00001a1:	90                   	nop
c00001a2:	90                   	nop
c00001a3:	90                   	nop
c00001a4:	90                   	nop
c00001a5:	90                   	nop
c00001a6:	90                   	nop
c00001a7:	90                   	nop
c00001a8:	90                   	nop
c00001a9:	90                   	nop
c00001aa:	90                   	nop
c00001ab:	90                   	nop
c00001ac:	90                   	nop
c00001ad:	90                   	nop
c00001ae:	90                   	nop
c00001af:	90                   	nop
c00001b0:	90                   	nop
c00001b1:	90                   	nop
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	c3                   	ret    

c00001b5 <goToVM86>:
c00001b5:	fa                   	cli    
c00001b6:	55                   	push   ebp
c00001b7:	89 e5                	mov    ebp,esp
c00001b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bc:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00001bf:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c00001c2:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00001c5:	25 ff ff 00 00       	and    eax,0xffff
c00001ca:	81 e3 ff ff 00 00    	and    ebx,0xffff
c00001d0:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00001d6:	81 e2 ff ff 00 00    	and    edx,0xffff
c00001dc:	52                   	push   edx
c00001dd:	51                   	push   ecx
c00001de:	68 02 02 02 00       	push   0x20202
c00001e3:	53                   	push   ebx
c00001e4:	50                   	push   eax
c00001e5:	cf                   	iret   

c00001e6 <goToUsermode>:
c00001e6:	fa                   	cli    
c00001e7:	55                   	push   ebp
c00001e8:	89 e5                	mov    ebp,esp
c00001ea:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00001ed:	66 b8 23 00          	mov    ax,0x23
c00001f1:	66 8e d8             	mov    ds,ax
c00001f4:	66 8e c0             	mov    es,ax
c00001f7:	66 8e e0             	mov    fs,ax
c00001fa:	66 8e e8             	mov    gs,ax
c00001fd:	89 e0                	mov    eax,esp
c00001ff:	68 23 00 00 00       	push   0x23
c0000204:	50                   	push   eax
c0000205:	68 02 02 00 00       	push   0x202
c000020a:	68 1b 00 00 00       	push   0x1b
c000020f:	53                   	push   ebx
c0000210:	cf                   	iret   

c0000211 <switchToThreadASMFirstTime>:
c0000211:	9c                   	pushf  
c0000212:	fa                   	cli    
c0000213:	50                   	push   eax
c0000214:	53                   	push   ebx
c0000215:	51                   	push   ecx
c0000216:	52                   	push   edx
c0000217:	56                   	push   esi
c0000218:	57                   	push   edi
c0000219:	55                   	push   ebp
c000021a:	e9 11 00 00 00       	jmp    c0000230 <commonThreadSwitch>

c000021f <switchToThreadASM>:
c000021f:	9c                   	pushf  
c0000220:	50                   	push   eax
c0000221:	53                   	push   ebx
c0000222:	51                   	push   ecx
c0000223:	52                   	push   edx
c0000224:	56                   	push   esi
c0000225:	57                   	push   edi
c0000226:	55                   	push   ebp
c0000227:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c000022d:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000230 <commonThreadSwitch>:
c0000230:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000234:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000023a:	8b 06                	mov    eax,DWORD PTR [esi]
c000023c:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000023f:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000242:	0f 20 d9             	mov    ecx,cr3
c0000245:	39 c8                	cmp    eax,ecx
c0000247:	74 03                	je     c000024c <commonThreadSwitch.doneVAS>
c0000249:	0f 22 d8             	mov    cr3,eax

c000024c <commonThreadSwitch.doneVAS>:
c000024c:	85 d2                	test   edx,edx
c000024e:	74 4e                	je     c000029e <commonThreadSwitch.notFirstTime>
c0000250:	fa                   	cli    
c0000251:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0000254:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c0000259:	60                   	pusha  
c000025a:	e8 dd 1c 01 00       	call   c0011f3c <mapVASFirstTime>
c000025f:	61                   	popa   
c0000260:	89 c4                	mov    esp,eax
c0000262:	56                   	push   esi
c0000263:	52                   	push   edx
c0000264:	e8 21 d9 00 00       	call   c000db8a <changeTSS>
c0000269:	5a                   	pop    edx
c000026a:	5e                   	pop    esi
c000026b:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c0000272:	81 fa 01 00 00 00    	cmp    edx,0x1
c0000278:	74 39                	je     c00002b3 <commonThreadSwitch.cameOffAFork>
c000027a:	5d                   	pop    ebp
c000027b:	5f                   	pop    edi
c000027c:	5e                   	pop    esi
c000027d:	59                   	pop    ecx
c000027e:	59                   	pop    ecx
c000027f:	5b                   	pop    ebx
c0000280:	58                   	pop    eax
c0000281:	81 c4 04 00 00 00    	add    esp,0x4
c0000287:	6a 02                	push   0x2
c0000289:	9d                   	popf   
c000028a:	52                   	push   edx
c000028b:	e8 0d dd 00 00       	call   c000df9d <taskStartupFunction>
c0000290:	5a                   	pop    edx
c0000291:	50                   	push   eax
c0000292:	ff d2                	call   edx
c0000294:	e8 b3 e4 00 00       	call   c000e74c <taskReturned>
c0000299:	e9 fb ff ff ff       	jmp    c0000299 <commonThreadSwitch.doneVAS+0x4d>

c000029e <commonThreadSwitch.notFirstTime>:
c000029e:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a1:	56                   	push   esi
c00002a2:	52                   	push   edx
c00002a3:	e8 e2 d8 00 00       	call   c000db8a <changeTSS>
c00002a8:	5a                   	pop    edx
c00002a9:	5e                   	pop    esi
c00002aa:	5d                   	pop    ebp
c00002ab:	5f                   	pop    edi
c00002ac:	5e                   	pop    esi
c00002ad:	5a                   	pop    edx
c00002ae:	59                   	pop    ecx
c00002af:	5b                   	pop    ebx
c00002b0:	58                   	pop    eax
c00002b1:	9d                   	popf   
c00002b2:	c3                   	ret    

c00002b3 <commonThreadSwitch.cameOffAFork>:
c00002b3:	31 c0                	xor    eax,eax
c00002b5:	31 d2                	xor    edx,edx
c00002b7:	8b 66 1c             	mov    esp,DWORD PTR [esi+0x1c]
c00002ba:	e9 a2 02 00 00       	jmp    c0000561 <offAForkJumpThingy>

c00002bf <detectCPUID>:
c00002bf:	9c                   	pushf  
c00002c0:	9c                   	pushf  
c00002c1:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002c8:	9d                   	popf   
c00002c9:	9c                   	pushf  
c00002ca:	58                   	pop    eax
c00002cb:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002ce:	9d                   	popf   
c00002cf:	25 00 00 20 00       	and    eax,0x200000
c00002d4:	c3                   	ret    

c00002d5 <asmQuickAcquireLock>:
c00002d5:	55                   	push   ebp
c00002d6:	89 e5                	mov    ebp,esp
c00002d8:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00002db <asmQuickAcquireLock.retry>:
c00002db:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00002e0:	72 02                	jb     c00002e4 <asmQuickAcquireLock.spin_with_pause>
c00002e2:	fa                   	cli    
c00002e3:	c3                   	ret    

c00002e4 <asmQuickAcquireLock.spin_with_pause>:
c00002e4:	f3 90                	pause  
c00002e6:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c00002ec:	75 f6                	jne    c00002e4 <asmQuickAcquireLock.spin_with_pause>
c00002ee:	e9 e8 ff ff ff       	jmp    c00002db <asmQuickAcquireLock.retry>

c00002f3 <asmQuickReleaseLock>:
c00002f3:	55                   	push   ebp
c00002f4:	89 e5                	mov    ebp,esp
c00002f6:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c00002fd:	5d                   	pop    ebp
c00002fe:	c3                   	ret    

c00002ff <asmAcquireLock>:
c00002ff:	55                   	push   ebp
c0000300:	89 e5                	mov    ebp,esp
c0000302:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000305 <asmAcquireLock.retry>:
c0000305:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000030a:	72 05                	jb     c0000311 <asmAcquireLock.spin_with_pause>
c000030c:	9c                   	pushf  
c000030d:	58                   	pop    eax
c000030e:	fa                   	cli    
c000030f:	5d                   	pop    ebp
c0000310:	c3                   	ret    

c0000311 <asmAcquireLock.spin_with_pause>:
c0000311:	f3 90                	pause  
c0000313:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000319:	75 f6                	jne    c0000311 <asmAcquireLock.spin_with_pause>
c000031b:	e9 e5 ff ff ff       	jmp    c0000305 <asmAcquireLock.retry>

c0000320 <asmReleaseLock>:
c0000320:	55                   	push   ebp
c0000321:	89 e5                	mov    ebp,esp
c0000323:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000326:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000329:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000032f:	52                   	push   edx
c0000330:	9d                   	popf   
c0000331:	5d                   	pop    ebp
c0000332:	c3                   	ret    

c0000333 <loadGDT>:
c0000333:	0f 01 15 64 32 02 c0 	lgdtd  ds:0xc0023264
c000033a:	66 b8 10 00          	mov    ax,0x10
c000033e:	66 8e d8             	mov    ds,ax
c0000341:	66 8e c0             	mov    es,ax
c0000344:	66 8e e0             	mov    fs,ax
c0000347:	66 8e e8             	mov    gs,ax
c000034a:	66 8e d0             	mov    ss,ax
c000034d:	e9 00 00 00 00       	jmp    c0000352 <flush2>

c0000352 <flush2>:
c0000352:	c3                   	ret    

c0000353 <isr0>:
c0000353:	fa                   	cli    
c0000354:	68 00 00 00 00       	push   0x0
c0000359:	68 00 00 00 00       	push   0x0
c000035e:	e9 a2 01 00 00       	jmp    c0000505 <int_common_stub>

c0000363 <isr1>:
c0000363:	fa                   	cli    
c0000364:	6a 00                	push   0x0
c0000366:	6a 01                	push   0x1
c0000368:	e9 98 01 00 00       	jmp    c0000505 <int_common_stub>

c000036d <isr2>:
c000036d:	fa                   	cli    
c000036e:	6a 00                	push   0x0
c0000370:	6a 02                	push   0x2
c0000372:	e9 8e 01 00 00       	jmp    c0000505 <int_common_stub>

c0000377 <isr3>:
c0000377:	fa                   	cli    
c0000378:	6a 00                	push   0x0
c000037a:	6a 03                	push   0x3
c000037c:	e9 84 01 00 00       	jmp    c0000505 <int_common_stub>

c0000381 <isr4>:
c0000381:	fa                   	cli    
c0000382:	6a 00                	push   0x0
c0000384:	6a 04                	push   0x4
c0000386:	e9 7a 01 00 00       	jmp    c0000505 <int_common_stub>

c000038b <isr5>:
c000038b:	fa                   	cli    
c000038c:	6a 00                	push   0x0
c000038e:	6a 05                	push   0x5
c0000390:	e9 70 01 00 00       	jmp    c0000505 <int_common_stub>

c0000395 <isr6>:
c0000395:	fa                   	cli    
c0000396:	6a 00                	push   0x0
c0000398:	6a 06                	push   0x6
c000039a:	e9 66 01 00 00       	jmp    c0000505 <int_common_stub>

c000039f <isr7>:
c000039f:	fa                   	cli    
c00003a0:	6a 00                	push   0x0
c00003a2:	6a 07                	push   0x7
c00003a4:	e9 5c 01 00 00       	jmp    c0000505 <int_common_stub>

c00003a9 <isr8>:
c00003a9:	fa                   	cli    
c00003aa:	6a 08                	push   0x8
c00003ac:	e9 54 01 00 00       	jmp    c0000505 <int_common_stub>

c00003b1 <isr9>:
c00003b1:	fa                   	cli    
c00003b2:	6a 00                	push   0x0
c00003b4:	6a 09                	push   0x9
c00003b6:	e9 4a 01 00 00       	jmp    c0000505 <int_common_stub>

c00003bb <isr10>:
c00003bb:	fa                   	cli    
c00003bc:	6a 0a                	push   0xa
c00003be:	e9 42 01 00 00       	jmp    c0000505 <int_common_stub>

c00003c3 <isr11>:
c00003c3:	fa                   	cli    
c00003c4:	6a 0b                	push   0xb
c00003c6:	e9 3a 01 00 00       	jmp    c0000505 <int_common_stub>

c00003cb <isr12>:
c00003cb:	fa                   	cli    
c00003cc:	6a 0c                	push   0xc
c00003ce:	e9 32 01 00 00       	jmp    c0000505 <int_common_stub>

c00003d3 <isr13>:
c00003d3:	fa                   	cli    
c00003d4:	6a 0d                	push   0xd
c00003d6:	e9 2a 01 00 00       	jmp    c0000505 <int_common_stub>

c00003db <isr14>:
c00003db:	fa                   	cli    
c00003dc:	6a 0e                	push   0xe
c00003de:	e9 22 01 00 00       	jmp    c0000505 <int_common_stub>

c00003e3 <isr15>:
c00003e3:	fa                   	cli    
c00003e4:	6a 00                	push   0x0
c00003e6:	6a 0f                	push   0xf
c00003e8:	e9 18 01 00 00       	jmp    c0000505 <int_common_stub>

c00003ed <isr16>:
c00003ed:	fa                   	cli    
c00003ee:	6a 00                	push   0x0
c00003f0:	6a 10                	push   0x10
c00003f2:	e9 0e 01 00 00       	jmp    c0000505 <int_common_stub>

c00003f7 <isr17>:
c00003f7:	fa                   	cli    
c00003f8:	6a 00                	push   0x0
c00003fa:	6a 11                	push   0x11
c00003fc:	e9 04 01 00 00       	jmp    c0000505 <int_common_stub>

c0000401 <isr18>:
c0000401:	fa                   	cli    
c0000402:	6a 00                	push   0x0
c0000404:	6a 12                	push   0x12
c0000406:	e9 fa 00 00 00       	jmp    c0000505 <int_common_stub>

c000040b <isr96>:
c000040b:	fa                   	cli    
c000040c:	6a 00                	push   0x0
c000040e:	6a 60                	push   0x60
c0000410:	e9 20 01 00 00       	jmp    c0000535 <syscall_common_stub>

c0000415 <irq0>:
c0000415:	fa                   	cli    
c0000416:	6a 00                	push   0x0
c0000418:	6a 20                	push   0x20
c000041a:	e9 e6 00 00 00       	jmp    c0000505 <int_common_stub>

c000041f <irq1>:
c000041f:	fa                   	cli    
c0000420:	6a 00                	push   0x0
c0000422:	6a 21                	push   0x21
c0000424:	e9 dc 00 00 00       	jmp    c0000505 <int_common_stub>

c0000429 <irq2>:
c0000429:	fa                   	cli    
c000042a:	6a 00                	push   0x0
c000042c:	6a 22                	push   0x22
c000042e:	e9 d2 00 00 00       	jmp    c0000505 <int_common_stub>

c0000433 <irq3>:
c0000433:	fa                   	cli    
c0000434:	6a 00                	push   0x0
c0000436:	6a 23                	push   0x23
c0000438:	e9 c8 00 00 00       	jmp    c0000505 <int_common_stub>

c000043d <irq4>:
c000043d:	fa                   	cli    
c000043e:	6a 00                	push   0x0
c0000440:	6a 24                	push   0x24
c0000442:	e9 be 00 00 00       	jmp    c0000505 <int_common_stub>

c0000447 <irq5>:
c0000447:	fa                   	cli    
c0000448:	6a 00                	push   0x0
c000044a:	6a 25                	push   0x25
c000044c:	e9 b4 00 00 00       	jmp    c0000505 <int_common_stub>

c0000451 <irq6>:
c0000451:	fa                   	cli    
c0000452:	6a 00                	push   0x0
c0000454:	6a 26                	push   0x26
c0000456:	e9 aa 00 00 00       	jmp    c0000505 <int_common_stub>

c000045b <irq7>:
c000045b:	fa                   	cli    
c000045c:	6a 00                	push   0x0
c000045e:	6a 27                	push   0x27
c0000460:	e9 a0 00 00 00       	jmp    c0000505 <int_common_stub>

c0000465 <irq8>:
c0000465:	fa                   	cli    
c0000466:	6a 00                	push   0x0
c0000468:	6a 28                	push   0x28
c000046a:	e9 96 00 00 00       	jmp    c0000505 <int_common_stub>

c000046f <irq9>:
c000046f:	fa                   	cli    
c0000470:	6a 00                	push   0x0
c0000472:	6a 29                	push   0x29
c0000474:	e9 8c 00 00 00       	jmp    c0000505 <int_common_stub>

c0000479 <irq10>:
c0000479:	fa                   	cli    
c000047a:	6a 00                	push   0x0
c000047c:	6a 2a                	push   0x2a
c000047e:	e9 82 00 00 00       	jmp    c0000505 <int_common_stub>

c0000483 <irq11>:
c0000483:	fa                   	cli    
c0000484:	6a 00                	push   0x0
c0000486:	6a 2b                	push   0x2b
c0000488:	e9 78 00 00 00       	jmp    c0000505 <int_common_stub>

c000048d <irq12>:
c000048d:	fa                   	cli    
c000048e:	6a 00                	push   0x0
c0000490:	6a 2c                	push   0x2c
c0000492:	e9 6e 00 00 00       	jmp    c0000505 <int_common_stub>

c0000497 <irq13>:
c0000497:	fa                   	cli    
c0000498:	6a 00                	push   0x0
c000049a:	6a 2d                	push   0x2d
c000049c:	e9 64 00 00 00       	jmp    c0000505 <int_common_stub>

c00004a1 <irq14>:
c00004a1:	fa                   	cli    
c00004a2:	6a 00                	push   0x0
c00004a4:	6a 2e                	push   0x2e
c00004a6:	e9 5a 00 00 00       	jmp    c0000505 <int_common_stub>

c00004ab <irq15>:
c00004ab:	fa                   	cli    
c00004ac:	6a 00                	push   0x0
c00004ae:	6a 2f                	push   0x2f
c00004b0:	e9 50 00 00 00       	jmp    c0000505 <int_common_stub>

c00004b5 <irq16>:
c00004b5:	fa                   	cli    
c00004b6:	6a 00                	push   0x0
c00004b8:	6a 30                	push   0x30
c00004ba:	e9 46 00 00 00       	jmp    c0000505 <int_common_stub>

c00004bf <irq17>:
c00004bf:	fa                   	cli    
c00004c0:	6a 00                	push   0x0
c00004c2:	6a 31                	push   0x31
c00004c4:	e9 3c 00 00 00       	jmp    c0000505 <int_common_stub>

c00004c9 <irq18>:
c00004c9:	fa                   	cli    
c00004ca:	6a 00                	push   0x0
c00004cc:	6a 32                	push   0x32
c00004ce:	e9 32 00 00 00       	jmp    c0000505 <int_common_stub>

c00004d3 <irq19>:
c00004d3:	fa                   	cli    
c00004d4:	6a 00                	push   0x0
c00004d6:	6a 33                	push   0x33
c00004d8:	e9 28 00 00 00       	jmp    c0000505 <int_common_stub>

c00004dd <irq20>:
c00004dd:	fa                   	cli    
c00004de:	6a 00                	push   0x0
c00004e0:	6a 34                	push   0x34
c00004e2:	e9 1e 00 00 00       	jmp    c0000505 <int_common_stub>

c00004e7 <irq21>:
c00004e7:	fa                   	cli    
c00004e8:	6a 00                	push   0x0
c00004ea:	6a 35                	push   0x35
c00004ec:	e9 14 00 00 00       	jmp    c0000505 <int_common_stub>

c00004f1 <irq22>:
c00004f1:	fa                   	cli    
c00004f2:	6a 00                	push   0x0
c00004f4:	6a 36                	push   0x36
c00004f6:	e9 0a 00 00 00       	jmp    c0000505 <int_common_stub>

c00004fb <irq23>:
c00004fb:	fa                   	cli    
c00004fc:	6a 00                	push   0x0
c00004fe:	6a 37                	push   0x37
c0000500:	e9 00 00 00 00       	jmp    c0000505 <int_common_stub>

c0000505 <int_common_stub>:
c0000505:	60                   	pusha  
c0000506:	1e                   	push   ds
c0000507:	06                   	push   es
c0000508:	0f a0                	push   fs
c000050a:	0f a8                	push   gs
c000050c:	66 b8 10 00          	mov    ax,0x10
c0000510:	66 8e d8             	mov    ds,ax
c0000513:	66 8e c0             	mov    es,ax
c0000516:	66 8e e0             	mov    fs,ax
c0000519:	66 8e e8             	mov    gs,ax
c000051c:	89 e1                	mov    ecx,esp
c000051e:	51                   	push   ecx
c000051f:	b9 ff 3b 01 c0       	mov    ecx,0xc0013bff
c0000524:	ff d1                	call   ecx
c0000526:	59                   	pop    ecx
c0000527:	0f a9                	pop    gs
c0000529:	0f a1                	pop    fs
c000052b:	07                   	pop    es
c000052c:	1f                   	pop    ds
c000052d:	61                   	popa   
c000052e:	81 c4 08 00 00 00    	add    esp,0x8
c0000534:	cf                   	iret   

c0000535 <syscall_common_stub>:
c0000535:	60                   	pusha  
c0000536:	1e                   	push   ds
c0000537:	06                   	push   es
c0000538:	0f a0                	push   fs
c000053a:	0f a8                	push   gs
c000053c:	66 b8 10 00          	mov    ax,0x10
c0000540:	66 8e d8             	mov    ds,ax
c0000543:	66 8e c0             	mov    es,ax
c0000546:	66 8e e0             	mov    fs,ax
c0000549:	66 8e e8             	mov    gs,ax
c000054c:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0000552:	89 61 1c             	mov    DWORD PTR [ecx+0x1c],esp
c0000555:	89 e1                	mov    ecx,esp
c0000557:	51                   	push   ecx
c0000558:	fb                   	sti    
c0000559:	b9 ff 3b 01 c0       	mov    ecx,0xc0013bff
c000055e:	ff d1                	call   ecx
c0000560:	59                   	pop    ecx

c0000561 <offAForkJumpThingy>:
c0000561:	0f a9                	pop    gs
c0000563:	0f a1                	pop    fs
c0000565:	07                   	pop    es
c0000566:	1f                   	pop    ds
c0000567:	61                   	popa   
c0000568:	81 c4 08 00 00 00    	add    esp,0x8
c000056e:	cf                   	iret   

c000056f <memcmp>:
c000056f:	56                   	push   esi
c0000570:	53                   	push   ebx
c0000571:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000575:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000579:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000057d:	01 d6                	add    esi,edx
c000057f:	39 f2                	cmp    edx,esi
c0000581:	74 0e                	je     c0000591 <memcmp+0x22>
c0000583:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0000586:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000589:	38 c8                	cmp    al,cl
c000058b:	75 08                	jne    c0000595 <memcmp+0x26>
c000058d:	42                   	inc    edx
c000058e:	43                   	inc    ebx
c000058f:	eb ee                	jmp    c000057f <memcmp+0x10>
c0000591:	31 c0                	xor    eax,eax
c0000593:	eb 02                	jmp    c0000597 <memcmp+0x28>
c0000595:	29 c8                	sub    eax,ecx
c0000597:	5b                   	pop    ebx
c0000598:	5e                   	pop    esi
c0000599:	c3                   	ret    

c000059a <memmove>:
c000059a:	56                   	push   esi
c000059b:	53                   	push   ebx
c000059c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00005a0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00005a4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00005a8:	39 c8                	cmp    eax,ecx
c00005aa:	73 12                	jae    c00005be <memmove+0x24>
c00005ac:	8d 34 0a             	lea    esi,[edx+ecx*1]
c00005af:	89 c3                	mov    ebx,eax
c00005b1:	39 f1                	cmp    ecx,esi
c00005b3:	74 1a                	je     c00005cf <memmove+0x35>
c00005b5:	8a 11                	mov    dl,BYTE PTR [ecx]
c00005b7:	43                   	inc    ebx
c00005b8:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c00005bb:	41                   	inc    ecx
c00005bc:	eb f3                	jmp    c00005b1 <memmove+0x17>
c00005be:	76 0f                	jbe    c00005cf <memmove+0x35>
c00005c0:	85 d2                	test   edx,edx
c00005c2:	74 0b                	je     c00005cf <memmove+0x35>
c00005c4:	8a 5c 11 ff          	mov    bl,BYTE PTR [ecx+edx*1-0x1]
c00005c8:	88 5c 10 ff          	mov    BYTE PTR [eax+edx*1-0x1],bl
c00005cc:	4a                   	dec    edx
c00005cd:	eb f1                	jmp    c00005c0 <memmove+0x26>
c00005cf:	5b                   	pop    ebx
c00005d0:	5e                   	pop    esi
c00005d1:	c3                   	ret    

c00005d2 <memcpy>:
c00005d2:	57                   	push   edi
c00005d3:	56                   	push   esi
c00005d4:	53                   	push   ebx
c00005d5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00005d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005dd:	89 da                	mov    edx,ebx
c00005df:	89 d9                	mov    ecx,ebx
c00005e1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00005e5:	83 e2 fc             	and    edx,0xfffffffc
c00005e8:	c1 e9 02             	shr    ecx,0x2
c00005eb:	89 c7                	mov    edi,eax
c00005ed:	fc                   	cld    
c00005ee:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00005f0:	8d 0c 16             	lea    ecx,[esi+edx*1]
c00005f3:	01 c2                	add    edx,eax
c00005f5:	01 de                	add    esi,ebx
c00005f7:	39 f1                	cmp    ecx,esi
c00005f9:	74 09                	je     c0000604 <memcpy+0x32>
c00005fb:	8a 19                	mov    bl,BYTE PTR [ecx]
c00005fd:	42                   	inc    edx
c00005fe:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000601:	41                   	inc    ecx
c0000602:	eb f3                	jmp    c00005f7 <memcpy+0x25>
c0000604:	5b                   	pop    ebx
c0000605:	5e                   	pop    esi
c0000606:	5f                   	pop    edi
c0000607:	c3                   	ret    

c0000608 <memset>:
c0000608:	53                   	push   ebx
c0000609:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000060d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000611:	89 c2                	mov    edx,eax
c0000613:	01 c1                	add    ecx,eax
c0000615:	39 ca                	cmp    edx,ecx
c0000617:	74 0a                	je     c0000623 <memset+0x1b>
c0000619:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c000061d:	42                   	inc    edx
c000061e:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000621:	eb f2                	jmp    c0000615 <memset+0xd>
c0000623:	5b                   	pop    ebx
c0000624:	c3                   	ret    

c0000625 <strlen>:
c0000625:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000629:	31 c0                	xor    eax,eax
c000062b:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c000062f:	74 03                	je     c0000634 <strlen+0xf>
c0000631:	40                   	inc    eax
c0000632:	eb f7                	jmp    c000062b <strlen+0x6>
c0000634:	c3                   	ret    

c0000635 <strpbrk>:
c0000635:	53                   	push   ebx
c0000636:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000063a:	8a 08                	mov    cl,BYTE PTR [eax]
c000063c:	84 c9                	test   cl,cl
c000063e:	74 14                	je     c0000654 <strpbrk+0x1f>
c0000640:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000644:	8a 1a                	mov    bl,BYTE PTR [edx]
c0000646:	84 db                	test   bl,bl
c0000648:	74 07                	je     c0000651 <strpbrk+0x1c>
c000064a:	38 cb                	cmp    bl,cl
c000064c:	74 08                	je     c0000656 <strpbrk+0x21>
c000064e:	42                   	inc    edx
c000064f:	eb f3                	jmp    c0000644 <strpbrk+0xf>
c0000651:	40                   	inc    eax
c0000652:	eb e6                	jmp    c000063a <strpbrk+0x5>
c0000654:	31 c0                	xor    eax,eax
c0000656:	5b                   	pop    ebx
c0000657:	c3                   	ret    

c0000658 <strtok>:
c0000658:	56                   	push   esi
c0000659:	53                   	push   ebx
c000065a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000065e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000662:	85 db                	test   ebx,ebx
c0000664:	75 0e                	jne    c0000674 <strtok+0x1c>
c0000666:	8b 1d a8 2c 02 c0    	mov    ebx,DWORD PTR ds:0xc0022ca8
c000066c:	85 db                	test   ebx,ebx
c000066e:	75 04                	jne    c0000674 <strtok+0x1c>
c0000670:	31 db                	xor    ebx,ebx
c0000672:	eb 2e                	jmp    c00006a2 <strtok+0x4a>
c0000674:	56                   	push   esi
c0000675:	53                   	push   ebx
c0000676:	e8 ba ff ff ff       	call   c0000635 <strpbrk>
c000067b:	5a                   	pop    edx
c000067c:	a3 a8 2c 02 c0       	mov    ds:0xc0022ca8,eax
c0000681:	59                   	pop    ecx
c0000682:	a1 a8 2c 02 c0       	mov    eax,ds:0xc0022ca8
c0000687:	39 d8                	cmp    eax,ebx
c0000689:	75 07                	jne    c0000692 <strtok+0x3a>
c000068b:	43                   	inc    ebx
c000068c:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000690:	eb e2                	jmp    c0000674 <strtok+0x1c>
c0000692:	85 c0                	test   eax,eax
c0000694:	74 da                	je     c0000670 <strtok+0x18>
c0000696:	8d 50 01             	lea    edx,[eax+0x1]
c0000699:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000069c:	89 15 a8 2c 02 c0    	mov    DWORD PTR ds:0xc0022ca8,edx
c00006a2:	89 d8                	mov    eax,ebx
c00006a4:	5b                   	pop    ebx
c00006a5:	5e                   	pop    esi
c00006a6:	c3                   	ret    

c00006a7 <strcpy>:
c00006a7:	53                   	push   ebx
c00006a8:	31 d2                	xor    edx,edx
c00006aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00006ae:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00006b2:	8d 1c 10             	lea    ebx,[eax+edx*1]
c00006b5:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c00006b8:	84 c9                	test   cl,cl
c00006ba:	74 06                	je     c00006c2 <strcpy+0x1b>
c00006bc:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c00006bf:	42                   	inc    edx
c00006c0:	eb ec                	jmp    c00006ae <strcpy+0x7>
c00006c2:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00006c5:	5b                   	pop    ebx
c00006c6:	c3                   	ret    

c00006c7 <strncpy>:
c00006c7:	56                   	push   esi
c00006c8:	53                   	push   ebx
c00006c9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00006cd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00006d1:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00006d5:	89 c3                	mov    ebx,eax
c00006d7:	85 c9                	test   ecx,ecx
c00006d9:	74 1a                	je     c00006f5 <strncpy+0x2e>
c00006db:	46                   	inc    esi
c00006dc:	43                   	inc    ebx
c00006dd:	8a 56 ff             	mov    dl,BYTE PTR [esi-0x1]
c00006e0:	49                   	dec    ecx
c00006e1:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c00006e4:	84 d2                	test   dl,dl
c00006e6:	75 ef                	jne    c00006d7 <strncpy+0x10>
c00006e8:	31 d2                	xor    edx,edx
c00006ea:	39 d1                	cmp    ecx,edx
c00006ec:	74 07                	je     c00006f5 <strncpy+0x2e>
c00006ee:	c6 04 13 00          	mov    BYTE PTR [ebx+edx*1],0x0
c00006f2:	42                   	inc    edx
c00006f3:	eb f5                	jmp    c00006ea <strncpy+0x23>
c00006f5:	5b                   	pop    ebx
c00006f6:	5e                   	pop    esi
c00006f7:	c3                   	ret    

c00006f8 <strcmp>:
c00006f8:	31 c9                	xor    ecx,ecx
c00006fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00006fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0000702:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c0000706:	0f b6 14 0a          	movzx  edx,BYTE PTR [edx+ecx*1]
c000070a:	38 d0                	cmp    al,dl
c000070c:	75 08                	jne    c0000716 <strcmp+0x1e>
c000070e:	41                   	inc    ecx
c000070f:	84 c0                	test   al,al
c0000711:	75 e7                	jne    c00006fa <strcmp+0x2>
c0000713:	31 c0                	xor    eax,eax
c0000715:	c3                   	ret    
c0000716:	29 d0                	sub    eax,edx
c0000718:	c3                   	ret    

c0000719 <strchr>:
c0000719:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000071d:	8a 10                	mov    dl,BYTE PTR [eax]
c000071f:	84 d2                	test   dl,dl
c0000721:	74 09                	je     c000072c <strchr+0x13>
c0000723:	3a 54 24 08          	cmp    dl,BYTE PTR [esp+0x8]
c0000727:	74 05                	je     c000072e <strchr+0x15>
c0000729:	40                   	inc    eax
c000072a:	eb f1                	jmp    c000071d <strchr+0x4>
c000072c:	31 c0                	xor    eax,eax
c000072e:	c3                   	ret    

c000072f <strncmp>:
c000072f:	56                   	push   esi
c0000730:	53                   	push   ebx
c0000731:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000735:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000739:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000073d:	01 d6                	add    esi,edx
c000073f:	39 f2                	cmp    edx,esi
c0000741:	74 12                	je     c0000755 <strncmp+0x26>
c0000743:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0000746:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000749:	38 c8                	cmp    al,cl
c000074b:	75 0c                	jne    c0000759 <strncmp+0x2a>
c000074d:	42                   	inc    edx
c000074e:	84 c0                	test   al,al
c0000750:	74 03                	je     c0000755 <strncmp+0x26>
c0000752:	43                   	inc    ebx
c0000753:	eb ea                	jmp    c000073f <strncmp+0x10>
c0000755:	31 c0                	xor    eax,eax
c0000757:	eb 02                	jmp    c000075b <strncmp+0x2c>
c0000759:	29 c8                	sub    eax,ecx
c000075b:	5b                   	pop    ebx
c000075c:	5e                   	pop    esi
c000075d:	c3                   	ret    

c000075e <strcat>:
c000075e:	53                   	push   ebx
c000075f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000763:	89 c1                	mov    ecx,eax
c0000765:	8d 51 01             	lea    edx,[ecx+0x1]
c0000768:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c000076c:	74 04                	je     c0000772 <strcat+0x14>
c000076e:	89 d1                	mov    ecx,edx
c0000770:	eb f3                	jmp    c0000765 <strcat+0x7>
c0000772:	31 d2                	xor    edx,edx
c0000774:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0000778:	8a 1c 13             	mov    bl,BYTE PTR [ebx+edx*1]
c000077b:	88 1c 11             	mov    BYTE PTR [ecx+edx*1],bl
c000077e:	42                   	inc    edx
c000077f:	84 db                	test   bl,bl
c0000781:	75 f1                	jne    c0000774 <strcat+0x16>
c0000783:	5b                   	pop    ebx
c0000784:	c3                   	ret    

c0000785 <strncat>:
c0000785:	56                   	push   esi
c0000786:	53                   	push   ebx
c0000787:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000078b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000078f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000793:	89 c2                	mov    edx,eax
c0000795:	85 db                	test   ebx,ebx
c0000797:	74 23                	je     c00007bc <strncat+0x37>
c0000799:	8d 72 01             	lea    esi,[edx+0x1]
c000079c:	80 7e ff 00          	cmp    BYTE PTR [esi-0x1],0x0
c00007a0:	74 04                	je     c00007a6 <strncat+0x21>
c00007a2:	89 f2                	mov    edx,esi
c00007a4:	eb f3                	jmp    c0000799 <strncat+0x14>
c00007a6:	8d 34 19             	lea    esi,[ecx+ebx*1]
c00007a9:	41                   	inc    ecx
c00007aa:	42                   	inc    edx
c00007ab:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00007ae:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00007b1:	84 db                	test   bl,bl
c00007b3:	74 07                	je     c00007bc <strncat+0x37>
c00007b5:	39 f1                	cmp    ecx,esi
c00007b7:	75 f0                	jne    c00007a9 <strncat+0x24>
c00007b9:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00007bc:	5b                   	pop    ebx
c00007bd:	5e                   	pop    esi
c00007be:	c3                   	ret    

c00007bf <strstr>:
c00007bf:	57                   	push   edi
c00007c0:	56                   	push   esi
c00007c1:	53                   	push   ebx
c00007c2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00007c6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007ca:	57                   	push   edi
c00007cb:	e8 55 fe ff ff       	call   c0000625 <strlen>
c00007d0:	59                   	pop    ecx
c00007d1:	89 c6                	mov    esi,eax
c00007d3:	85 c0                	test   eax,eax
c00007d5:	74 1f                	je     c00007f6 <strstr+0x37>
c00007d7:	53                   	push   ebx
c00007d8:	e8 48 fe ff ff       	call   c0000625 <strlen>
c00007dd:	5a                   	pop    edx
c00007de:	39 f0                	cmp    eax,esi
c00007e0:	72 12                	jb     c00007f4 <strstr+0x35>
c00007e2:	56                   	push   esi
c00007e3:	57                   	push   edi
c00007e4:	53                   	push   ebx
c00007e5:	e8 85 fd ff ff       	call   c000056f <memcmp>
c00007ea:	83 c4 0c             	add    esp,0xc
c00007ed:	85 c0                	test   eax,eax
c00007ef:	74 05                	je     c00007f6 <strstr+0x37>
c00007f1:	43                   	inc    ebx
c00007f2:	eb e3                	jmp    c00007d7 <strstr+0x18>
c00007f4:	31 db                	xor    ebx,ebx
c00007f6:	89 d8                	mov    eax,ebx
c00007f8:	5b                   	pop    ebx
c00007f9:	5e                   	pop    esi
c00007fa:	5f                   	pop    edi
c00007fb:	c3                   	ret    

c00007fc <toupper>:
c00007fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000800:	0f b6 d0             	movzx  edx,al
c0000803:	f6 82 80 f1 01 c0 02 	test   BYTE PTR [edx-0x3ffe0e80],0x2
c000080a:	74 03                	je     c000080f <toupper+0x13>
c000080c:	83 e8 20             	sub    eax,0x20
c000080f:	c3                   	ret    

c0000810 <tolower>:
c0000810:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000814:	0f b6 d0             	movzx  edx,al
c0000817:	f6 82 80 f1 01 c0 01 	test   BYTE PTR [edx-0x3ffe0e80],0x1
c000081e:	74 03                	je     c0000823 <tolower+0x13>
c0000820:	83 c0 20             	add    eax,0x20
c0000823:	c3                   	ret    

c0000824 <simple_strtoul>:
c0000824:	55                   	push   ebp
c0000825:	57                   	push   edi
c0000826:	56                   	push   esi
c0000827:	53                   	push   ebx
c0000828:	83 ec 08             	sub    esp,0x8
c000082b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000082f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000833:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000836:	f6 82 80 f1 01 c0 08 	test   BYTE PTR [edx-0x3ffe0e80],0x8
c000083d:	74 03                	je     c0000842 <simple_strtoul+0x1e>
c000083f:	41                   	inc    ecx
c0000840:	eb f1                	jmp    c0000833 <simple_strtoul+0xf>
c0000842:	80 fa 09             	cmp    dl,0x9
c0000845:	74 f8                	je     c000083f <simple_strtoul+0x1b>
c0000847:	80 fa 2d             	cmp    dl,0x2d
c000084a:	75 0b                	jne    c0000857 <simple_strtoul+0x33>
c000084c:	41                   	inc    ecx
c000084d:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000855:	eb 0e                	jmp    c0000865 <simple_strtoul+0x41>
c0000857:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000085f:	80 fa 2b             	cmp    dl,0x2b
c0000862:	75 01                	jne    c0000865 <simple_strtoul+0x41>
c0000864:	41                   	inc    ecx
c0000865:	85 f6                	test   esi,esi
c0000867:	75 22                	jne    c000088b <simple_strtoul+0x67>
c0000869:	be 0a 00 00 00       	mov    esi,0xa
c000086e:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c0000871:	75 5a                	jne    c00008cd <simple_strtoul+0xa9>
c0000873:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000877:	50                   	push   eax
c0000878:	e8 93 ff ff ff       	call   c0000810 <tolower>
c000087d:	5a                   	pop    edx
c000087e:	83 f8 78             	cmp    eax,0x78
c0000881:	74 03                	je     c0000886 <simple_strtoul+0x62>
c0000883:	41                   	inc    ecx
c0000884:	eb 16                	jmp    c000089c <simple_strtoul+0x78>
c0000886:	83 c1 02             	add    ecx,0x2
c0000889:	eb 22                	jmp    c00008ad <simple_strtoul+0x89>
c000088b:	8d 46 fe             	lea    eax,[esi-0x2]
c000088e:	83 f8 22             	cmp    eax,0x22
c0000891:	0f 87 b7 00 00 00    	ja     c000094e <simple_strtoul+0x12a>
c0000897:	83 fe 08             	cmp    esi,0x8
c000089a:	75 0c                	jne    c00008a8 <simple_strtoul+0x84>
c000089c:	be 08 00 00 00       	mov    esi,0x8
c00008a1:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c00008a4:	75 27                	jne    c00008cd <simple_strtoul+0xa9>
c00008a6:	eb 1f                	jmp    c00008c7 <simple_strtoul+0xa3>
c00008a8:	83 fe 10             	cmp    esi,0x10
c00008ab:	75 20                	jne    c00008cd <simple_strtoul+0xa9>
c00008ad:	be 10 00 00 00       	mov    esi,0x10
c00008b2:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c00008b5:	75 16                	jne    c00008cd <simple_strtoul+0xa9>
c00008b7:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c00008bb:	50                   	push   eax
c00008bc:	e8 4f ff ff ff       	call   c0000810 <tolower>
c00008c1:	5d                   	pop    ebp
c00008c2:	83 f8 78             	cmp    eax,0x78
c00008c5:	74 03                	je     c00008ca <simple_strtoul+0xa6>
c00008c7:	41                   	inc    ecx
c00008c8:	eb 03                	jmp    c00008cd <simple_strtoul+0xa9>
c00008ca:	83 c1 02             	add    ecx,0x2
c00008cd:	31 ed                	xor    ebp,ebp
c00008cf:	31 db                	xor    ebx,ebx
c00008d1:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00008d8:	8a 11                	mov    dl,BYTE PTR [ecx]
c00008da:	84 d2                	test   dl,dl
c00008dc:	74 27                	je     c0000905 <simple_strtoul+0xe1>
c00008de:	0f b6 fa             	movzx  edi,dl
c00008e1:	f6 87 80 f1 01 c0 04 	test   BYTE PTR [edi-0x3ffe0e80],0x4
c00008e8:	74 05                	je     c00008ef <simple_strtoul+0xcb>
c00008ea:	83 ef 30             	sub    edi,0x30
c00008ed:	eb 22                	jmp    c0000911 <simple_strtoul+0xed>
c00008ef:	0f be d2             	movsx  edx,dl
c00008f2:	52                   	push   edx
c00008f3:	e8 04 ff ff ff       	call   c00007fc <toupper>
c00008f8:	5f                   	pop    edi
c00008f9:	0f b6 d0             	movzx  edx,al
c00008fc:	f6 82 80 f1 01 c0 01 	test   BYTE PTR [edx-0x3ffe0e80],0x1
c0000903:	75 09                	jne    c000090e <simple_strtoul+0xea>
c0000905:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c000090a:	75 2d                	jne    c0000939 <simple_strtoul+0x115>
c000090c:	eb 57                	jmp    c0000965 <simple_strtoul+0x141>
c000090e:	8d 78 c9             	lea    edi,[eax-0x37]
c0000911:	39 f7                	cmp    edi,esi
c0000913:	73 f0                	jae    c0000905 <simple_strtoul+0xe1>
c0000915:	31 d2                	xor    edx,edx
c0000917:	89 f8                	mov    eax,edi
c0000919:	f7 d0                	not    eax
c000091b:	f7 f6                	div    esi
c000091d:	39 d8                	cmp    eax,ebx
c000091f:	72 0e                	jb     c000092f <simple_strtoul+0x10b>
c0000921:	0f af de             	imul   ebx,esi
c0000924:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000092b:	01 fb                	add    ebx,edi
c000092d:	eb 07                	jmp    c0000936 <simple_strtoul+0x112>
c000092f:	bd 01 00 00 00       	mov    ebp,0x1
c0000934:	31 db                	xor    ebx,ebx
c0000936:	41                   	inc    ecx
c0000937:	eb 9f                	jmp    c00008d8 <simple_strtoul+0xb4>
c0000939:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000093c:	09 d8                	or     eax,ebx
c000093e:	75 1f                	jne    c000095f <simple_strtoul+0x13b>
c0000940:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000944:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000948:	31 db                	xor    ebx,ebx
c000094a:	89 38                	mov    DWORD PTR [eax],edi
c000094c:	eb 17                	jmp    c0000965 <simple_strtoul+0x141>
c000094e:	31 db                	xor    ebx,ebx
c0000950:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0000955:	74 14                	je     c000096b <simple_strtoul+0x147>
c0000957:	31 ed                	xor    ebp,ebp
c0000959:	85 c9                	test   ecx,ecx
c000095b:	75 e3                	jne    c0000940 <simple_strtoul+0x11c>
c000095d:	31 db                	xor    ebx,ebx
c000095f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000963:	89 08                	mov    DWORD PTR [eax],ecx
c0000965:	4d                   	dec    ebp
c0000966:	75 03                	jne    c000096b <simple_strtoul+0x147>
c0000968:	83 cb ff             	or     ebx,0xffffffff
c000096b:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000970:	75 02                	jne    c0000974 <simple_strtoul+0x150>
c0000972:	f7 db                	neg    ebx
c0000974:	83 c4 08             	add    esp,0x8
c0000977:	89 d8                	mov    eax,ebx
c0000979:	5b                   	pop    ebx
c000097a:	5e                   	pop    esi
c000097b:	5f                   	pop    edi
c000097c:	5d                   	pop    ebp
c000097d:	c3                   	ret    

c000097e <largebin_index>:
c000097e:	89 c2                	mov    edx,eax
c0000980:	c1 ea 08             	shr    edx,0x8
c0000983:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000989:	77 10                	ja     c000099b <largebin_index+0x1d>
c000098b:	0f bd d2             	bsr    edx,edx
c000098e:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000991:	d3 e8                	shr    eax,cl
c0000993:	83 e0 03             	and    eax,0x3
c0000996:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c000099a:	c3                   	ret    
c000099b:	b8 5f 00 00 00       	mov    eax,0x5f
c00009a0:	c3                   	ret    

c00009a1 <malloc_init_state>:
c00009a1:	53                   	push   ebx
c00009a2:	8d 50 34             	lea    edx,[eax+0x34]
c00009a5:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c00009ab:	89 d1                	mov    ecx,edx
c00009ad:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c00009b0:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c00009b3:	83 c2 08             	add    edx,0x8
c00009b6:	39 da                	cmp    edx,ebx
c00009b8:	75 f3                	jne    c00009ad <malloc_init_state+0xc>
c00009ba:	8b 10                	mov    edx,DWORD PTR [eax]
c00009bc:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c00009c6:	83 e2 03             	and    edx,0x3
c00009c9:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c00009d3:	83 ca 48             	or     edx,0x48
c00009d6:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c00009e0:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c00009ea:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c00009f1:	89 10                	mov    DWORD PTR [eax],edx
c00009f3:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c00009f6:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000a00:	5b                   	pop    ebx
c0000a01:	c3                   	ret    

c0000a02 <malloc_consolidate>:
c0000a02:	8b 10                	mov    edx,DWORD PTR [eax]
c0000a04:	85 d2                	test   edx,edx
c0000a06:	0f 84 d8 00 00 00    	je     c0000ae4 <malloc_consolidate+0xe2>
c0000a0c:	55                   	push   ebp
c0000a0d:	83 e2 fd             	and    edx,0xfffffffd
c0000a10:	57                   	push   edi
c0000a11:	89 c5                	mov    ebp,eax
c0000a13:	56                   	push   esi
c0000a14:	8d 78 34             	lea    edi,[eax+0x34]
c0000a17:	53                   	push   ebx
c0000a18:	83 ec 10             	sub    esp,0x10
c0000a1b:	89 10                	mov    DWORD PTR [eax],edx
c0000a1d:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000a21:	c1 ea 03             	shr    edx,0x3
c0000a24:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000a28:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000a2c:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000a2f:	85 d2                	test   edx,edx
c0000a31:	0f 84 98 00 00 00    	je     c0000acf <malloc_consolidate+0xcd>
c0000a37:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000a3e:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000a41:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000a44:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000a48:	89 f9                	mov    ecx,edi
c0000a4a:	83 e1 fe             	and    ecx,0xfffffffe
c0000a4d:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000a50:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000a53:	83 e3 fc             	and    ebx,0xfffffffc
c0000a56:	83 e7 01             	and    edi,0x1
c0000a59:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000a5c:	75 14                	jne    c0000a72 <malloc_consolidate+0x70>
c0000a5e:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000a60:	29 fa                	sub    edx,edi
c0000a62:	01 f9                	add    ecx,edi
c0000a64:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000a67:	89 fb                	mov    ebx,edi
c0000a69:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000a6c:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000a6f:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000a72:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000a75:	74 40                	je     c0000ab7 <malloc_consolidate+0xb5>
c0000a77:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000a7a:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000a7d:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000a81:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000a84:	83 e7 01             	and    edi,0x1
c0000a87:	75 0e                	jne    c0000a97 <malloc_consolidate+0x95>
c0000a89:	01 d9                	add    ecx,ebx
c0000a8b:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000a8e:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000a91:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000a94:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000a97:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000a9a:	89 ce                	mov    esi,ecx
c0000a9c:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000a9f:	83 ce 01             	or     esi,0x1
c0000aa2:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000aa5:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000aa8:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000aab:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000aaf:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000ab2:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000ab5:	eb 0c                	jmp    c0000ac3 <malloc_consolidate+0xc1>
c0000ab7:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000aba:	83 c9 01             	or     ecx,0x1
c0000abd:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000ac0:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000ac3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000ac7:	85 d2                	test   edx,edx
c0000ac9:	0f 85 6f ff ff ff    	jne    c0000a3e <malloc_consolidate+0x3c>
c0000acf:	83 c5 04             	add    ebp,0x4
c0000ad2:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000ad6:	0f 85 50 ff ff ff    	jne    c0000a2c <malloc_consolidate+0x2a>
c0000adc:	83 c4 10             	add    esp,0x10
c0000adf:	5b                   	pop    ebx
c0000ae0:	5e                   	pop    esi
c0000ae1:	5f                   	pop    edi
c0000ae2:	5d                   	pop    ebp
c0000ae3:	c3                   	ret    
c0000ae4:	e9 b8 fe ff ff       	jmp    c00009a1 <malloc_init_state>

c0000ae9 <dlfree>:
c0000ae9:	57                   	push   edi
c0000aea:	56                   	push   esi
c0000aeb:	53                   	push   ebx
c0000aec:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000af0:	85 db                	test   ebx,ebx
c0000af2:	0f 84 e2 00 00 00    	je     c0000bda <dlfree+0xf1>
c0000af8:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000afb:	8b 0d c0 2c 02 c0    	mov    ecx,DWORD PTR ds:0xc0022cc0
c0000b01:	89 f0                	mov    eax,esi
c0000b03:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000b06:	83 e0 fc             	and    eax,0xfffffffc
c0000b09:	39 c1                	cmp    ecx,eax
c0000b0b:	72 24                	jb     c0000b31 <dlfree+0x48>
c0000b0d:	83 c9 03             	or     ecx,0x3
c0000b10:	c1 e8 03             	shr    eax,0x3
c0000b13:	89 0d c0 2c 02 c0    	mov    DWORD PTR ds:0xc0022cc0,ecx
c0000b19:	83 e8 02             	sub    eax,0x2
c0000b1c:	8b 0c 85 c4 2c 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdd33c]
c0000b23:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000b25:	89 14 85 c4 2c 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd33c],edx
c0000b2c:	e9 a9 00 00 00       	jmp    c0000bda <dlfree+0xf1>
c0000b31:	83 e6 02             	and    esi,0x2
c0000b34:	0f 85 a0 00 00 00    	jne    c0000bda <dlfree+0xf1>
c0000b3a:	83 c9 01             	or     ecx,0x1
c0000b3d:	8d 34 02             	lea    esi,[edx+eax*1]
c0000b40:	89 0d c0 2c 02 c0    	mov    DWORD PTR ds:0xc0022cc0,ecx
c0000b46:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000b49:	83 e1 fc             	and    ecx,0xfffffffc
c0000b4c:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000b50:	75 13                	jne    c0000b65 <dlfree+0x7c>
c0000b52:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000b55:	29 da                	sub    edx,ebx
c0000b57:	01 d8                	add    eax,ebx
c0000b59:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000b5c:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000b5f:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000b62:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000b65:	39 35 ec 2c 02 c0    	cmp    DWORD PTR ds:0xc0022cec,esi
c0000b6b:	74 40                	je     c0000bad <dlfree+0xc4>
c0000b6d:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000b71:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000b74:	80 e3 01             	and    bl,0x1
c0000b77:	75 0e                	jne    c0000b87 <dlfree+0x9e>
c0000b79:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000b7c:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000b7f:	01 c8                	add    eax,ecx
c0000b81:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000b84:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000b87:	8b 0d fc 2c 02 c0    	mov    ecx,DWORD PTR ds:0xc0022cfc
c0000b8d:	c7 42 0c f4 2c 02 c0 	mov    DWORD PTR [edx+0xc],0xc0022cf4
c0000b94:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000b97:	89 15 fc 2c 02 c0    	mov    DWORD PTR ds:0xc0022cfc,edx
c0000b9d:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000ba0:	89 c1                	mov    ecx,eax
c0000ba2:	83 c9 01             	or     ecx,0x1
c0000ba5:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000ba8:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000bab:	eb 10                	jmp    c0000bbd <dlfree+0xd4>
c0000bad:	01 c8                	add    eax,ecx
c0000baf:	89 c1                	mov    ecx,eax
c0000bb1:	83 c9 01             	or     ecx,0x1
c0000bb4:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000bb7:	89 15 ec 2c 02 c0    	mov    DWORD PTR ds:0xc0022cec,edx
c0000bbd:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000bc2:	76 16                	jbe    c0000bda <dlfree+0xf1>
c0000bc4:	f6 05 c0 2c 02 c0 02 	test   BYTE PTR ds:0xc0022cc0,0x2
c0000bcb:	74 0d                	je     c0000bda <dlfree+0xf1>
c0000bcd:	5b                   	pop    ebx
c0000bce:	b8 c0 2c 02 c0       	mov    eax,0xc0022cc0
c0000bd3:	5e                   	pop    esi
c0000bd4:	5f                   	pop    edi
c0000bd5:	e9 28 fe ff ff       	jmp    c0000a02 <malloc_consolidate>
c0000bda:	5b                   	pop    ebx
c0000bdb:	5e                   	pop    esi
c0000bdc:	5f                   	pop    edi
c0000bdd:	c3                   	ret    

c0000bde <sYSMALLOc>:
c0000bde:	55                   	push   ebp
c0000bdf:	57                   	push   edi
c0000be0:	56                   	push   esi
c0000be1:	53                   	push   ebx
c0000be2:	89 d3                	mov    ebx,edx
c0000be4:	83 ec 2c             	sub    esp,0x2c
c0000be7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000beb:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000bf1:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000bf4:	8d 42 ff             	lea    eax,[edx-0x1]
c0000bf7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000bfb:	74 1f                	je     c0000c1c <sYSMALLOc+0x3e>
c0000bfd:	89 d8                	mov    eax,ebx
c0000bff:	e8 fe fd ff ff       	call   c0000a02 <malloc_consolidate>
c0000c04:	83 ec 0c             	sub    esp,0xc
c0000c07:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000c0b:	83 e8 07             	sub    eax,0x7
c0000c0e:	50                   	push   eax
c0000c0f:	e8 30 02 00 00       	call   c0000e44 <dlmalloc>
c0000c14:	83 c4 10             	add    esp,0x10
c0000c17:	e9 20 02 00 00       	jmp    c0000e3c <sYSMALLOc+0x25e>
c0000c1c:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000c1f:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000c25:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000c28:	83 e0 fc             	and    eax,0xfffffffc
c0000c2b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000c2f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000c33:	83 c0 10             	add    eax,0x10
c0000c36:	01 c1                	add    ecx,eax
c0000c38:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000c3c:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000c43:	74 04                	je     c0000c49 <sYSMALLOc+0x6b>
c0000c45:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000c49:	f7 da                	neg    edx
c0000c4b:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000c4f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000c53:	21 d1                	and    ecx,edx
c0000c55:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000c59:	7f 07                	jg     c0000c62 <sYSMALLOc+0x84>
c0000c5b:	31 c0                	xor    eax,eax
c0000c5d:	e9 da 01 00 00       	jmp    c0000e3c <sYSMALLOc+0x25e>
c0000c62:	83 ec 0c             	sub    esp,0xc
c0000c65:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000c69:	e8 a2 c2 00 00       	call   c000cf10 <sbrk>
c0000c6e:	83 c4 10             	add    esp,0x10
c0000c71:	89 c6                	mov    esi,eax
c0000c73:	83 f8 ff             	cmp    eax,0xffffffff
c0000c76:	74 e3                	je     c0000c5b <sYSMALLOc+0x7d>
c0000c78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000c7c:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000c80:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000c83:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000c89:	39 f1                	cmp    ecx,esi
c0000c8b:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000c91:	75 13                	jne    c0000ca6 <sYSMALLOc+0xc8>
c0000c93:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000c97:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000c9b:	83 c8 01             	or     eax,0x1
c0000c9e:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000ca1:	e9 3e 01 00 00       	jmp    c0000de4 <sYSMALLOc+0x206>
c0000ca6:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000cac:	88 d0                	mov    al,dl
c0000cae:	83 e0 01             	and    eax,0x1
c0000cb1:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000cb6:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000cba:	0f 95 c0             	setne  al
c0000cbd:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000cc1:	39 f1                	cmp    ecx,esi
c0000cc3:	76 12                	jbe    c0000cd7 <sYSMALLOc+0xf9>
c0000cc5:	84 c0                	test   al,al
c0000cc7:	74 0e                	je     c0000cd7 <sYSMALLOc+0xf9>
c0000cc9:	83 e2 fe             	and    edx,0xfffffffe
c0000ccc:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000cd2:	e9 83 00 00 00       	jmp    c0000d5a <sYSMALLOc+0x17c>
c0000cd7:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000cdc:	74 7c                	je     c0000d5a <sYSMALLOc+0x17c>
c0000cde:	84 c0                	test   al,al
c0000ce0:	74 0c                	je     c0000cee <sYSMALLOc+0x110>
c0000ce2:	89 f0                	mov    eax,esi
c0000ce4:	29 c8                	sub    eax,ecx
c0000ce6:	01 e8                	add    eax,ebp
c0000ce8:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000cee:	89 f2                	mov    edx,esi
c0000cf0:	83 e2 07             	and    edx,0x7
c0000cf3:	74 0c                	je     c0000d01 <sYSMALLOc+0x123>
c0000cf5:	b8 08 00 00 00       	mov    eax,0x8
c0000cfa:	29 d0                	sub    eax,edx
c0000cfc:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000cff:	eb 04                	jmp    c0000d05 <sYSMALLOc+0x127>
c0000d01:	89 f5                	mov    ebp,esi
c0000d03:	31 c0                	xor    eax,eax
c0000d05:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000d09:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000d0d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000d11:	01 c1                	add    ecx,eax
c0000d13:	83 ec 0c             	sub    esp,0xc
c0000d16:	01 f1                	add    ecx,esi
c0000d18:	01 ca                	add    edx,ecx
c0000d1a:	29 c8                	sub    eax,ecx
c0000d1c:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000d20:	01 c2                	add    edx,eax
c0000d22:	52                   	push   edx
c0000d23:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000d27:	e8 e4 c1 00 00       	call   c000cf10 <sbrk>
c0000d2c:	83 c4 10             	add    esp,0x10
c0000d2f:	83 f8 ff             	cmp    eax,0xffffffff
c0000d32:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000d36:	75 0f                	jne    c0000d47 <sYSMALLOc+0x169>
c0000d38:	83 ec 0c             	sub    esp,0xc
c0000d3b:	6a 00                	push   0x0
c0000d3d:	e8 ce c1 00 00       	call   c000cf10 <sbrk>
c0000d42:	83 c4 10             	add    esp,0x10
c0000d45:	eb 30                	jmp    c0000d77 <sYSMALLOc+0x199>
c0000d47:	39 c6                	cmp    esi,eax
c0000d49:	76 33                	jbe    c0000d7e <sYSMALLOc+0x1a0>
c0000d4b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000d4f:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000d56:	01 f0                	add    eax,esi
c0000d58:	eb 1d                	jmp    c0000d77 <sYSMALLOc+0x199>
c0000d5a:	83 ec 0c             	sub    esp,0xc
c0000d5d:	89 f5                	mov    ebp,esi
c0000d5f:	6a 00                	push   0x0
c0000d61:	e8 aa c1 00 00       	call   c000cf10 <sbrk>
c0000d66:	89 c2                	mov    edx,eax
c0000d68:	29 f2                	sub    edx,esi
c0000d6a:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000d6e:	83 c4 10             	add    esp,0x10
c0000d71:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000d77:	31 d2                	xor    edx,edx
c0000d79:	83 f8 ff             	cmp    eax,0xffffffff
c0000d7c:	74 66                	je     c0000de4 <sYSMALLOc+0x206>
c0000d7e:	29 e8                	sub    eax,ebp
c0000d80:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000d83:	01 d0                	add    eax,edx
c0000d85:	83 c8 01             	or     eax,0x1
c0000d88:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000d8b:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000d91:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000d96:	74 4c                	je     c0000de4 <sYSMALLOc+0x206>
c0000d98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000d9c:	83 e8 0c             	sub    eax,0xc
c0000d9f:	83 e0 f8             	and    eax,0xfffffff8
c0000da2:	89 c2                	mov    edx,eax
c0000da4:	83 ca 01             	or     edx,0x1
c0000da7:	83 f8 0f             	cmp    eax,0xf
c0000daa:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000dad:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000db5:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000dbd:	76 25                	jbe    c0000de4 <sYSMALLOc+0x206>
c0000dbf:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000dc5:	83 ec 0c             	sub    esp,0xc
c0000dc8:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000dd2:	83 c7 08             	add    edi,0x8
c0000dd5:	57                   	push   edi
c0000dd6:	e8 0e fd ff ff       	call   c0000ae9 <dlfree>
c0000ddb:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000de1:	83 c4 10             	add    esp,0x10
c0000de4:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000dea:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000df0:	73 06                	jae    c0000df8 <sYSMALLOc+0x21a>
c0000df2:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000df8:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000dfe:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000e04:	73 06                	jae    c0000e0c <sYSMALLOc+0x22e>
c0000e06:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000e0c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000e0f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000e12:	83 e2 fc             	and    edx,0xfffffffc
c0000e15:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000e19:	0f 82 3c fe ff ff    	jb     c0000c5b <sYSMALLOc+0x7d>
c0000e1f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000e23:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000e26:	29 fa                	sub    edx,edi
c0000e28:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000e2b:	83 ca 01             	or     edx,0x1
c0000e2e:	89 fb                	mov    ebx,edi
c0000e30:	83 c0 08             	add    eax,0x8
c0000e33:	83 cb 01             	or     ebx,0x1
c0000e36:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0000e39:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0000e3c:	83 c4 2c             	add    esp,0x2c
c0000e3f:	5b                   	pop    ebx
c0000e40:	5e                   	pop    esi
c0000e41:	5f                   	pop    edi
c0000e42:	5d                   	pop    ebp
c0000e43:	c3                   	ret    

c0000e44 <dlmalloc>:
c0000e44:	55                   	push   ebp
c0000e45:	57                   	push   edi
c0000e46:	56                   	push   esi
c0000e47:	53                   	push   ebx
c0000e48:	83 ec 1c             	sub    esp,0x1c
c0000e4b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0000e4f:	83 f8 df             	cmp    eax,0xffffffdf
c0000e52:	0f 87 70 03 00 00    	ja     c00011c8 <dlmalloc+0x384>
c0000e58:	83 c0 0b             	add    eax,0xb
c0000e5b:	be 10 00 00 00       	mov    esi,0x10
c0000e60:	83 f8 0f             	cmp    eax,0xf
c0000e63:	76 05                	jbe    c0000e6a <dlmalloc+0x26>
c0000e65:	83 e0 f8             	and    eax,0xfffffff8
c0000e68:	89 c6                	mov    esi,eax
c0000e6a:	8b 3d c0 2c 02 c0    	mov    edi,DWORD PTR ds:0xc0022cc0
c0000e70:	f7 c7 01 00 00 00    	test   edi,0x1
c0000e76:	75 17                	jne    c0000e8f <dlmalloc+0x4b>
c0000e78:	85 ff                	test   edi,edi
c0000e7a:	0f 85 05 03 00 00    	jne    c0001185 <dlmalloc+0x341>
c0000e80:	b8 c0 2c 02 c0       	mov    eax,0xc0022cc0
c0000e85:	e8 78 fb ff ff       	call   c0000a02 <malloc_consolidate>
c0000e8a:	e9 f6 02 00 00       	jmp    c0001185 <dlmalloc+0x341>
c0000e8f:	39 f7                	cmp    edi,esi
c0000e91:	72 1f                	jb     c0000eb2 <dlmalloc+0x6e>
c0000e93:	89 f2                	mov    edx,esi
c0000e95:	c1 ea 03             	shr    edx,0x3
c0000e98:	83 ea 02             	sub    edx,0x2
c0000e9b:	8b 04 95 c4 2c 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdd33c]
c0000ea2:	85 c0                	test   eax,eax
c0000ea4:	74 0c                	je     c0000eb2 <dlmalloc+0x6e>
c0000ea6:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0000ea9:	89 0c 95 c4 2c 02 c0 	mov    DWORD PTR [edx*4-0x3ffdd33c],ecx
c0000eb0:	eb 30                	jmp    c0000ee2 <dlmalloc+0x9e>
c0000eb2:	89 f0                	mov    eax,esi
c0000eb4:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000eba:	77 2e                	ja     c0000eea <dlmalloc+0xa6>
c0000ebc:	c1 e8 03             	shr    eax,0x3
c0000ebf:	8d 14 c5 f4 2c 02 c0 	lea    edx,[eax*8-0x3ffdd30c]
c0000ec6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000eca:	8d 5a f8             	lea    ebx,[edx-0x8]
c0000ecd:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0000ed0:	39 c3                	cmp    ebx,eax
c0000ed2:	74 2e                	je     c0000f02 <dlmalloc+0xbe>
c0000ed4:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0000ed7:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0000edc:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000edf:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0000ee2:	83 c0 08             	add    eax,0x8
c0000ee5:	e9 e0 02 00 00       	jmp    c00011ca <dlmalloc+0x386>
c0000eea:	e8 8f fa ff ff       	call   c000097e <largebin_index>
c0000eef:	83 e7 02             	and    edi,0x2
c0000ef2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000ef6:	74 0a                	je     c0000f02 <dlmalloc+0xbe>
c0000ef8:	b8 c0 2c 02 c0       	mov    eax,0xc0022cc0
c0000efd:	e8 00 fb ff ff       	call   c0000a02 <malloc_consolidate>
c0000f02:	8d 46 10             	lea    eax,[esi+0x10]
c0000f05:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000f09:	8b 1d 00 2d 02 c0    	mov    ebx,DWORD PTR ds:0xc0022d00
c0000f0f:	81 fb f4 2c 02 c0    	cmp    ebx,0xc0022cf4
c0000f15:	0f 84 13 01 00 00    	je     c000102e <dlmalloc+0x1ea>
c0000f1b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0000f1e:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0000f21:	83 e7 fc             	and    edi,0xfffffffc
c0000f24:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000f2a:	77 4c                	ja     c0000f78 <dlmalloc+0x134>
c0000f2c:	3d f4 2c 02 c0       	cmp    eax,0xc0022cf4
c0000f31:	75 45                	jne    c0000f78 <dlmalloc+0x134>
c0000f33:	39 1d f0 2c 02 c0    	cmp    DWORD PTR ds:0xc0022cf0,ebx
c0000f39:	75 3d                	jne    c0000f78 <dlmalloc+0x134>
c0000f3b:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0000f3f:	73 37                	jae    c0000f78 <dlmalloc+0x134>
c0000f41:	8d 04 33             	lea    eax,[ebx+esi*1]
c0000f44:	89 fa                	mov    edx,edi
c0000f46:	a3 fc 2c 02 c0       	mov    ds:0xc0022cfc,eax
c0000f4b:	a3 00 2d 02 c0       	mov    ds:0xc0022d00,eax
c0000f50:	a3 f0 2c 02 c0       	mov    ds:0xc0022cf0,eax
c0000f55:	29 f2                	sub    edx,esi
c0000f57:	c7 40 08 f4 2c 02 c0 	mov    DWORD PTR [eax+0x8],0xc0022cf4
c0000f5e:	c7 40 0c f4 2c 02 c0 	mov    DWORD PTR [eax+0xc],0xc0022cf4
c0000f65:	83 ce 01             	or     esi,0x1
c0000f68:	89 d1                	mov    ecx,edx
c0000f6a:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0000f6d:	83 c9 01             	or     ecx,0x1
c0000f70:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0000f73:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0000f76:	eb 15                	jmp    c0000f8d <dlmalloc+0x149>
c0000f78:	a3 00 2d 02 c0       	mov    ds:0xc0022d00,eax
c0000f7d:	39 fe                	cmp    esi,edi
c0000f7f:	c7 40 08 f4 2c 02 c0 	mov    DWORD PTR [eax+0x8],0xc0022cf4
c0000f86:	75 0d                	jne    c0000f95 <dlmalloc+0x151>
c0000f88:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0000f8d:	8d 43 08             	lea    eax,[ebx+0x8]
c0000f90:	e9 35 02 00 00       	jmp    c00011ca <dlmalloc+0x386>
c0000f95:	89 f8                	mov    eax,edi
c0000f97:	81 ff ff 00 00 00    	cmp    edi,0xff
c0000f9d:	77 19                	ja     c0000fb8 <dlmalloc+0x174>
c0000f9f:	c1 e8 03             	shr    eax,0x3
c0000fa2:	8d 14 00             	lea    edx,[eax+eax*1]
c0000fa5:	83 c2 0d             	add    edx,0xd
c0000fa8:	8d 2c 95 b8 2c 02 c0 	lea    ebp,[edx*4-0x3ffdd348]
c0000faf:	8b 14 95 c0 2c 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd340]
c0000fb6:	eb 46                	jmp    c0000ffe <dlmalloc+0x1ba>
c0000fb8:	e8 c1 f9 ff ff       	call   c000097e <largebin_index>
c0000fbd:	8d 14 00             	lea    edx,[eax+eax*1]
c0000fc0:	83 c2 0d             	add    edx,0xd
c0000fc3:	8d 0c 95 c0 2c 02 c0 	lea    ecx,[edx*4-0x3ffdd340]
c0000fca:	8b 14 95 c0 2c 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd340]
c0000fd1:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0000fd4:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0000fd8:	89 d5                	mov    ebp,edx
c0000fda:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0000fde:	74 1e                	je     c0000ffe <dlmalloc+0x1ba>
c0000fe0:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c0000fe3:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0000fe6:	77 12                	ja     c0000ffa <dlmalloc+0x1b6>
c0000fe8:	83 cf 01             	or     edi,0x1
c0000feb:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0000fee:	76 05                	jbe    c0000ff5 <dlmalloc+0x1b1>
c0000ff0:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0000ff3:	eb f6                	jmp    c0000feb <dlmalloc+0x1a7>
c0000ff5:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0000ff8:	eb 04                	jmp    c0000ffe <dlmalloc+0x1ba>
c0000ffa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0000ffe:	89 c7                	mov    edi,eax
c0001000:	88 c1                	mov    cl,al
c0001002:	c1 ff 05             	sar    edi,0x5
c0001005:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0001009:	bf 01 00 00 00       	mov    edi,0x1
c000100e:	d3 e7                	shl    edi,cl
c0001010:	89 f8                	mov    eax,edi
c0001012:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0001016:	09 04 bd f4 2f 02 c0 	or     DWORD PTR [edi*4-0x3ffdd00c],eax
c000101d:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c0001020:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0001023:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c0001026:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c0001029:	e9 db fe ff ff       	jmp    c0000f09 <dlmalloc+0xc5>
c000102e:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001034:	76 78                	jbe    c00010ae <dlmalloc+0x26a>
c0001036:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000103a:	8d 04 c5 f4 2c 02 c0 	lea    eax,[eax*8-0x3ffdd30c]
c0001041:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001044:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001047:	39 ca                	cmp    edx,ecx
c0001049:	74 63                	je     c00010ae <dlmalloc+0x26a>
c000104b:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c000104e:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001051:	83 e3 fc             	and    ebx,0xfffffffc
c0001054:	39 de                	cmp    esi,ebx
c0001056:	77 52                	ja     c00010aa <dlmalloc+0x266>
c0001058:	89 df                	mov    edi,ebx
c000105a:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000105d:	29 f7                	sub    edi,esi
c000105f:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001062:	01 d3                	add    ebx,edx
c0001064:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001067:	83 ff 0f             	cmp    edi,0xf
c000106a:	8d 42 08             	lea    eax,[edx+0x8]
c000106d:	77 09                	ja     c0001078 <dlmalloc+0x234>
c000106f:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001073:	e9 52 01 00 00       	jmp    c00011ca <dlmalloc+0x386>
c0001078:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000107b:	83 ce 01             	or     esi,0x1
c000107e:	89 0d fc 2c 02 c0    	mov    DWORD PTR ds:0xc0022cfc,ecx
c0001084:	89 0d 00 2d 02 c0    	mov    DWORD PTR ds:0xc0022d00,ecx
c000108a:	c7 41 08 f4 2c 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0022cf4
c0001091:	c7 41 0c f4 2c 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0022cf4
c0001098:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000109b:	89 fa                	mov    edx,edi
c000109d:	83 ca 01             	or     edx,0x1
c00010a0:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010a3:	89 3b                	mov    DWORD PTR [ebx],edi
c00010a5:	e9 20 01 00 00       	jmp    c00011ca <dlmalloc+0x386>
c00010aa:	89 c2                	mov    edx,eax
c00010ac:	eb 99                	jmp    c0001047 <dlmalloc+0x203>
c00010ae:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00010b2:	b8 01 00 00 00       	mov    eax,0x1
c00010b7:	41                   	inc    ecx
c00010b8:	89 cb                	mov    ebx,ecx
c00010ba:	8d 14 cd ec 2c 02 c0 	lea    edx,[ecx*8-0x3ffdd314]
c00010c1:	c1 eb 05             	shr    ebx,0x5
c00010c4:	d3 e0                	shl    eax,cl
c00010c6:	8b 3c 9d f4 2f 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdd00c]
c00010cd:	39 f8                	cmp    eax,edi
c00010cf:	77 04                	ja     c00010d5 <dlmalloc+0x291>
c00010d1:	85 c0                	test   eax,eax
c00010d3:	75 26                	jne    c00010fb <dlmalloc+0x2b7>
c00010d5:	43                   	inc    ebx
c00010d6:	83 fb 02             	cmp    ebx,0x2
c00010d9:	0f 87 a6 00 00 00    	ja     c0001185 <dlmalloc+0x341>
c00010df:	8b 3c 9d f4 2f 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdd00c]
c00010e6:	85 ff                	test   edi,edi
c00010e8:	74 eb                	je     c00010d5 <dlmalloc+0x291>
c00010ea:	89 d8                	mov    eax,ebx
c00010ec:	c1 e0 06             	shl    eax,0x6
c00010ef:	8d 14 85 ec 2c 02 c0 	lea    edx,[eax*4-0x3ffdd314]
c00010f6:	b8 01 00 00 00       	mov    eax,0x1
c00010fb:	85 f8                	test   eax,edi
c00010fd:	75 07                	jne    c0001106 <dlmalloc+0x2c2>
c00010ff:	83 c2 08             	add    edx,0x8
c0001102:	01 c0                	add    eax,eax
c0001104:	eb f5                	jmp    c00010fb <dlmalloc+0x2b7>
c0001106:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0001109:	39 ca                	cmp    edx,ecx
c000110b:	75 14                	jne    c0001121 <dlmalloc+0x2dd>
c000110d:	89 c1                	mov    ecx,eax
c000110f:	83 c2 08             	add    edx,0x8
c0001112:	f7 d1                	not    ecx
c0001114:	01 c0                	add    eax,eax
c0001116:	21 cf                	and    edi,ecx
c0001118:	89 3c 9d f4 2f 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdd00c],edi
c000111f:	eb ac                	jmp    c00010cd <dlmalloc+0x289>
c0001121:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0001124:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c0001127:	83 e0 fc             	and    eax,0xfffffffc
c000112a:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c000112d:	89 c3                	mov    ebx,eax
c000112f:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001132:	29 f3                	sub    ebx,esi
c0001134:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001137:	83 fb 0f             	cmp    ebx,0xf
c000113a:	8d 41 08             	lea    eax,[ecx+0x8]
c000113d:	77 09                	ja     c0001148 <dlmalloc+0x304>
c000113f:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001143:	e9 82 00 00 00       	jmp    c00011ca <dlmalloc+0x386>
c0001148:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000114b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001151:	89 3d fc 2c 02 c0    	mov    DWORD PTR ds:0xc0022cfc,edi
c0001157:	89 3d 00 2d 02 c0    	mov    DWORD PTR ds:0xc0022d00,edi
c000115d:	c7 47 08 f4 2c 02 c0 	mov    DWORD PTR [edi+0x8],0xc0022cf4
c0001164:	c7 47 0c f4 2c 02 c0 	mov    DWORD PTR [edi+0xc],0xc0022cf4
c000116b:	77 06                	ja     c0001173 <dlmalloc+0x32f>
c000116d:	89 3d f0 2c 02 c0    	mov    DWORD PTR ds:0xc0022cf0,edi
c0001173:	83 ce 01             	or     esi,0x1
c0001176:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001179:	89 d9                	mov    ecx,ebx
c000117b:	83 c9 01             	or     ecx,0x1
c000117e:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001181:	89 1a                	mov    DWORD PTR [edx],ebx
c0001183:	eb 45                	jmp    c00011ca <dlmalloc+0x386>
c0001185:	a1 ec 2c 02 c0       	mov    eax,ds:0xc0022cec
c000118a:	8d 4e 10             	lea    ecx,[esi+0x10]
c000118d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001190:	83 e2 fc             	and    edx,0xfffffffc
c0001193:	39 d1                	cmp    ecx,edx
c0001195:	77 1e                	ja     c00011b5 <dlmalloc+0x371>
c0001197:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000119a:	89 f3                	mov    ebx,esi
c000119c:	89 0d ec 2c 02 c0    	mov    DWORD PTR ds:0xc0022cec,ecx
c00011a2:	83 cb 01             	or     ebx,0x1
c00011a5:	29 f2                	sub    edx,esi
c00011a7:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00011aa:	83 ca 01             	or     edx,0x1
c00011ad:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00011b0:	e9 2d fd ff ff       	jmp    c0000ee2 <dlmalloc+0x9e>
c00011b5:	83 c4 1c             	add    esp,0x1c
c00011b8:	89 f0                	mov    eax,esi
c00011ba:	5b                   	pop    ebx
c00011bb:	ba c0 2c 02 c0       	mov    edx,0xc0022cc0
c00011c0:	5e                   	pop    esi
c00011c1:	5f                   	pop    edi
c00011c2:	5d                   	pop    ebp
c00011c3:	e9 16 fa ff ff       	jmp    c0000bde <sYSMALLOc>
c00011c8:	31 c0                	xor    eax,eax
c00011ca:	83 c4 1c             	add    esp,0x1c
c00011cd:	5b                   	pop    ebx
c00011ce:	5e                   	pop    esi
c00011cf:	5f                   	pop    edi
c00011d0:	5d                   	pop    ebp
c00011d1:	c3                   	ret    

c00011d2 <iALLOc>:
c00011d2:	55                   	push   ebp
c00011d3:	89 c5                	mov    ebp,eax
c00011d5:	57                   	push   edi
c00011d6:	56                   	push   esi
c00011d7:	53                   	push   ebx
c00011d8:	83 ec 2c             	sub    esp,0x2c
c00011db:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00011df:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00011e3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011e7:	83 3d c0 2c 02 c0 00 	cmp    DWORD PTR ds:0xc0022cc0,0x0
c00011ee:	75 12                	jne    c0001202 <iALLOc+0x30>
c00011f0:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00011f4:	b8 c0 2c 02 c0       	mov    eax,0xc0022cc0
c00011f9:	e8 04 f8 ff ff       	call   c0000a02 <malloc_consolidate>
c00011fe:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001202:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001207:	74 12                	je     c000121b <iALLOc+0x49>
c0001209:	85 ed                	test   ebp,ebp
c000120b:	0f 84 64 01 00 00    	je     c0001375 <iALLOc+0x1a3>
c0001211:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0001219:	eb 33                	jmp    c000124e <iALLOc+0x7c>
c000121b:	85 ed                	test   ebp,ebp
c000121d:	75 14                	jne    c0001233 <iALLOc+0x61>
c000121f:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0001227:	83 c4 2c             	add    esp,0x2c
c000122a:	5b                   	pop    ebx
c000122b:	5e                   	pop    esi
c000122c:	5f                   	pop    edi
c000122d:	5d                   	pop    ebp
c000122e:	e9 11 fc ff ff       	jmp    c0000e44 <dlmalloc>
c0001233:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c000123a:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001242:	83 f8 0f             	cmp    eax,0xf
c0001245:	76 07                	jbe    c000124e <iALLOc+0x7c>
c0001247:	83 e0 f8             	and    eax,0xfffffff8
c000124a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000124e:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001253:	75 09                	jne    c000125e <iALLOc+0x8c>
c0001255:	89 d0                	mov    eax,edx
c0001257:	8d 3c aa             	lea    edi,[edx+ebp*4]
c000125a:	31 f6                	xor    esi,esi
c000125c:	eb 3b                	jmp    c0001299 <iALLOc+0xc7>
c000125e:	8b 02                	mov    eax,DWORD PTR [edx]
c0001260:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001268:	83 c0 0b             	add    eax,0xb
c000126b:	83 f8 0f             	cmp    eax,0xf
c000126e:	76 07                	jbe    c0001277 <iALLOc+0xa5>
c0001270:	83 e0 f8             	and    eax,0xfffffff8
c0001273:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001277:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000127b:	0f af f5             	imul   esi,ebp
c000127e:	eb 25                	jmp    c00012a5 <iALLOc+0xd3>
c0001280:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001282:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001285:	bb 10 00 00 00       	mov    ebx,0x10
c000128a:	83 f9 0f             	cmp    ecx,0xf
c000128d:	76 05                	jbe    c0001294 <iALLOc+0xc2>
c000128f:	83 e1 f8             	and    ecx,0xfffffff8
c0001292:	89 cb                	mov    ebx,ecx
c0001294:	01 de                	add    esi,ebx
c0001296:	83 c0 04             	add    eax,0x4
c0001299:	39 c7                	cmp    edi,eax
c000129b:	75 e3                	jne    c0001280 <iALLOc+0xae>
c000129d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00012a5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00012a9:	8b 1d 14 30 02 c0    	mov    ebx,DWORD PTR ds:0xc0023014
c00012af:	83 ec 0c             	sub    esp,0xc
c00012b2:	c7 05 14 30 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023014,0x0
c00012bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00012c0:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c00012c4:	50                   	push   eax
c00012c5:	e8 7a fb ff ff       	call   c0000e44 <dlmalloc>
c00012ca:	83 c4 10             	add    esp,0x10
c00012cd:	89 1d 14 30 02 c0    	mov    DWORD PTR ds:0xc0023014,ebx
c00012d3:	85 c0                	test   eax,eax
c00012d5:	0f 84 92 00 00 00    	je     c000136d <iALLOc+0x19b>
c00012db:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00012de:	8d 78 f8             	lea    edi,[eax-0x8]
c00012e1:	83 e3 fc             	and    ebx,0xfffffffc
c00012e4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00012e8:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00012ed:	74 1e                	je     c000130d <iALLOc+0x13b>
c00012ef:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00012f3:	89 d9                	mov    ecx,ebx
c00012f5:	52                   	push   edx
c00012f6:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00012fa:	83 e9 04             	sub    ecx,0x4
c00012fd:	51                   	push   ecx
c00012fe:	6a 00                	push   0x0
c0001300:	50                   	push   eax
c0001301:	e8 02 f3 ff ff       	call   c0000608 <memset>
c0001306:	83 c4 10             	add    esp,0x10
c0001309:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000130d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001312:	75 14                	jne    c0001328 <iALLOc+0x156>
c0001314:	8d 04 37             	lea    eax,[edi+esi*1]
c0001317:	29 f3                	sub    ebx,esi
c0001319:	8d 48 08             	lea    ecx,[eax+0x8]
c000131c:	83 cb 01             	or     ebx,0x1
c000131f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001323:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001326:	89 f3                	mov    ebx,esi
c0001328:	31 c0                	xor    eax,eax
c000132a:	4d                   	dec    ebp
c000132b:	8d 4f 08             	lea    ecx,[edi+0x8]
c000132e:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001332:	39 c5                	cmp    ebp,eax
c0001334:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c0001337:	74 2c                	je     c0001365 <iALLOc+0x193>
c0001339:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000133d:	85 c9                	test   ecx,ecx
c000133f:	75 15                	jne    c0001356 <iALLOc+0x184>
c0001341:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001344:	8d 71 0b             	lea    esi,[ecx+0xb]
c0001347:	b9 10 00 00 00       	mov    ecx,0x10
c000134c:	83 fe 0f             	cmp    esi,0xf
c000134f:	76 05                	jbe    c0001356 <iALLOc+0x184>
c0001351:	83 e6 f8             	and    esi,0xfffffff8
c0001354:	89 f1                	mov    ecx,esi
c0001356:	89 ce                	mov    esi,ecx
c0001358:	29 cb                	sub    ebx,ecx
c000135a:	83 ce 01             	or     esi,0x1
c000135d:	40                   	inc    eax
c000135e:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001361:	01 cf                	add    edi,ecx
c0001363:	eb c6                	jmp    c000132b <iALLOc+0x159>
c0001365:	83 cb 01             	or     ebx,0x1
c0001368:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000136b:	eb 08                	jmp    c0001375 <iALLOc+0x1a3>
c000136d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001375:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001379:	83 c4 2c             	add    esp,0x2c
c000137c:	5b                   	pop    ebx
c000137d:	5e                   	pop    esi
c000137e:	5f                   	pop    edi
c000137f:	5d                   	pop    ebp
c0001380:	c3                   	ret    

c0001381 <dlrealloc>:
c0001381:	55                   	push   ebp
c0001382:	57                   	push   edi
c0001383:	56                   	push   esi
c0001384:	53                   	push   ebx
c0001385:	83 ec 1c             	sub    esp,0x1c
c0001388:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000138c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001390:	85 db                	test   ebx,ebx
c0001392:	75 10                	jne    c00013a4 <dlrealloc+0x23>
c0001394:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001398:	83 c4 1c             	add    esp,0x1c
c000139b:	5b                   	pop    ebx
c000139c:	5e                   	pop    esi
c000139d:	5f                   	pop    edi
c000139e:	5d                   	pop    ebp
c000139f:	e9 a0 fa ff ff       	jmp    c0000e44 <dlmalloc>
c00013a4:	83 f8 df             	cmp    eax,0xffffffdf
c00013a7:	76 07                	jbe    c00013b0 <dlrealloc+0x2f>
c00013a9:	31 db                	xor    ebx,ebx
c00013ab:	e9 7c 01 00 00       	jmp    c000152c <dlrealloc+0x1ab>
c00013b0:	83 c0 0b             	add    eax,0xb
c00013b3:	bf 10 00 00 00       	mov    edi,0x10
c00013b8:	83 f8 0f             	cmp    eax,0xf
c00013bb:	76 05                	jbe    c00013c2 <dlrealloc+0x41>
c00013bd:	83 e0 f8             	and    eax,0xfffffff8
c00013c0:	89 c7                	mov    edi,eax
c00013c2:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c00013c5:	8d 6b f8             	lea    ebp,[ebx-0x8]
c00013c8:	89 c6                	mov    esi,eax
c00013ca:	83 e6 fc             	and    esi,0xfffffffc
c00013cd:	a8 02                	test   al,0x2
c00013cf:	75 d8                	jne    c00013a9 <dlrealloc+0x28>
c00013d1:	39 f7                	cmp    edi,esi
c00013d3:	0f 86 15 01 00 00    	jbe    c00014ee <dlrealloc+0x16d>
c00013d9:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c00013dd:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00013e0:	39 15 ec 2c 02 c0    	cmp    DWORD PTR ds:0xc0022cec,edx
c00013e6:	75 33                	jne    c000141b <dlrealloc+0x9a>
c00013e8:	83 e1 fc             	and    ecx,0xfffffffc
c00013eb:	01 f1                	add    ecx,esi
c00013ed:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00013f1:	8d 4f 10             	lea    ecx,[edi+0x10]
c00013f4:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00013f8:	77 49                	ja     c0001443 <dlrealloc+0xc2>
c00013fa:	01 fd                	add    ebp,edi
c00013fc:	83 e0 01             	and    eax,0x1
c00013ff:	09 f8                	or     eax,edi
c0001401:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c0001404:	89 2d ec 2c 02 c0    	mov    DWORD PTR ds:0xc0022cec,ebp
c000140a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000140e:	29 f8                	sub    eax,edi
c0001410:	83 c8 01             	or     eax,0x1
c0001413:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0001416:	e9 11 01 00 00       	jmp    c000152c <dlrealloc+0x1ab>
c000141b:	89 c8                	mov    eax,ecx
c000141d:	83 e0 fe             	and    eax,0xfffffffe
c0001420:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c0001425:	75 1c                	jne    c0001443 <dlrealloc+0xc2>
c0001427:	83 e1 fc             	and    ecx,0xfffffffc
c000142a:	01 f1                	add    ecx,esi
c000142c:	39 cf                	cmp    edi,ecx
c000142e:	77 13                	ja     c0001443 <dlrealloc+0xc2>
c0001430:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001433:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001436:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c0001439:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c000143c:	89 ce                	mov    esi,ecx
c000143e:	e9 ab 00 00 00       	jmp    c00014ee <dlrealloc+0x16d>
c0001443:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001447:	8d 47 f9             	lea    eax,[edi-0x7]
c000144a:	83 ec 0c             	sub    esp,0xc
c000144d:	50                   	push   eax
c000144e:	e8 f1 f9 ff ff       	call   c0000e44 <dlmalloc>
c0001453:	83 c4 10             	add    esp,0x10
c0001456:	89 c1                	mov    ecx,eax
c0001458:	85 c0                	test   eax,eax
c000145a:	0f 84 49 ff ff ff    	je     c00013a9 <dlrealloc+0x28>
c0001460:	8d 40 f8             	lea    eax,[eax-0x8]
c0001463:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001467:	39 c2                	cmp    edx,eax
c0001469:	75 0a                	jne    c0001475 <dlrealloc+0xf4>
c000146b:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000146e:	83 e0 fc             	and    eax,0xfffffffc
c0001471:	01 c6                	add    esi,eax
c0001473:	eb 79                	jmp    c00014ee <dlrealloc+0x16d>
c0001475:	83 ee 04             	sub    esi,0x4
c0001478:	83 fe 27             	cmp    esi,0x27
c000147b:	76 16                	jbe    c0001493 <dlrealloc+0x112>
c000147d:	50                   	push   eax
c000147e:	56                   	push   esi
c000147f:	53                   	push   ebx
c0001480:	51                   	push   ecx
c0001481:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0001485:	e8 48 f1 ff ff       	call   c00005d2 <memcpy>
c000148a:	83 c4 10             	add    esp,0x10
c000148d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0001491:	eb 43                	jmp    c00014d6 <dlrealloc+0x155>
c0001493:	8b 03                	mov    eax,DWORD PTR [ebx]
c0001495:	83 fe 13             	cmp    esi,0x13
c0001498:	89 01                	mov    DWORD PTR [ecx],eax
c000149a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000149d:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
c00014a0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00014a3:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c00014a6:	76 2e                	jbe    c00014d6 <dlrealloc+0x155>
c00014a8:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00014ab:	83 fe 1b             	cmp    esi,0x1b
c00014ae:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c00014b1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00014b4:	89 41 10             	mov    DWORD PTR [ecx+0x10],eax
c00014b7:	76 1d                	jbe    c00014d6 <dlrealloc+0x155>
c00014b9:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00014bc:	83 fe 23             	cmp    esi,0x23
c00014bf:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c00014c2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00014c5:	89 41 18             	mov    DWORD PTR [ecx+0x18],eax
c00014c8:	76 0c                	jbe    c00014d6 <dlrealloc+0x155>
c00014ca:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00014cd:	89 41 1c             	mov    DWORD PTR [ecx+0x1c],eax
c00014d0:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00014d3:	89 41 20             	mov    DWORD PTR [ecx+0x20],eax
c00014d6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00014da:	83 ec 0c             	sub    esp,0xc
c00014dd:	53                   	push   ebx
c00014de:	e8 06 f6 ff ff       	call   c0000ae9 <dlfree>
c00014e3:	83 c4 10             	add    esp,0x10
c00014e6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00014ea:	89 cb                	mov    ebx,ecx
c00014ec:	eb 3e                	jmp    c000152c <dlrealloc+0x1ab>
c00014ee:	89 f2                	mov    edx,esi
c00014f0:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00014f3:	29 fa                	sub    edx,edi
c00014f5:	83 e1 01             	and    ecx,0x1
c00014f8:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c00014fc:	83 fa 0f             	cmp    edx,0xf
c00014ff:	77 0b                	ja     c000150c <dlrealloc+0x18b>
c0001501:	09 ce                	or     esi,ecx
c0001503:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c0001506:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c000150a:	eb 20                	jmp    c000152c <dlrealloc+0x1ab>
c000150c:	01 fd                	add    ebp,edi
c000150e:	83 ec 0c             	sub    esp,0xc
c0001511:	09 cf                	or     edi,ecx
c0001513:	83 ca 01             	or     edx,0x1
c0001516:	89 7b fc             	mov    DWORD PTR [ebx-0x4],edi
c0001519:	83 c5 08             	add    ebp,0x8
c000151c:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
c000151f:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001523:	55                   	push   ebp
c0001524:	e8 c0 f5 ff ff       	call   c0000ae9 <dlfree>
c0001529:	83 c4 10             	add    esp,0x10
c000152c:	83 c4 1c             	add    esp,0x1c
c000152f:	89 d8                	mov    eax,ebx
c0001531:	5b                   	pop    ebx
c0001532:	5e                   	pop    esi
c0001533:	5f                   	pop    edi
c0001534:	5d                   	pop    ebp
c0001535:	c3                   	ret    

c0001536 <dlmemalign>:
c0001536:	55                   	push   ebp
c0001537:	57                   	push   edi
c0001538:	56                   	push   esi
c0001539:	53                   	push   ebx
c000153a:	83 ec 0c             	sub    esp,0xc
c000153d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001541:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001545:	83 fa 08             	cmp    edx,0x8
c0001548:	77 10                	ja     c000155a <dlmemalign+0x24>
c000154a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000154e:	83 c4 0c             	add    esp,0xc
c0001551:	5b                   	pop    ebx
c0001552:	5e                   	pop    esi
c0001553:	5f                   	pop    edi
c0001554:	5d                   	pop    ebp
c0001555:	e9 ea f8 ff ff       	jmp    c0000e44 <dlmalloc>
c000155a:	bf 10 00 00 00       	mov    edi,0x10
c000155f:	83 fa 0f             	cmp    edx,0xf
c0001562:	76 13                	jbe    c0001577 <dlmemalign+0x41>
c0001564:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001567:	85 d1                	test   ecx,edx
c0001569:	75 04                	jne    c000156f <dlmemalign+0x39>
c000156b:	89 d7                	mov    edi,edx
c000156d:	eb 08                	jmp    c0001577 <dlmemalign+0x41>
c000156f:	39 d7                	cmp    edi,edx
c0001571:	73 04                	jae    c0001577 <dlmemalign+0x41>
c0001573:	01 ff                	add    edi,edi
c0001575:	eb f8                	jmp    c000156f <dlmemalign+0x39>
c0001577:	83 f8 df             	cmp    eax,0xffffffdf
c000157a:	76 07                	jbe    c0001583 <dlmemalign+0x4d>
c000157c:	31 c0                	xor    eax,eax
c000157e:	e9 ce 00 00 00       	jmp    c0001651 <dlmemalign+0x11b>
c0001583:	83 c0 0b             	add    eax,0xb
c0001586:	bd 10 00 00 00       	mov    ebp,0x10
c000158b:	83 f8 0f             	cmp    eax,0xf
c000158e:	76 05                	jbe    c0001595 <dlmemalign+0x5f>
c0001590:	83 e0 f8             	and    eax,0xfffffff8
c0001593:	89 c5                	mov    ebp,eax
c0001595:	83 ec 0c             	sub    esp,0xc
c0001598:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000159c:	50                   	push   eax
c000159d:	e8 a2 f8 ff ff       	call   c0000e44 <dlmalloc>
c00015a2:	83 c4 10             	add    esp,0x10
c00015a5:	89 c1                	mov    ecx,eax
c00015a7:	85 c0                	test   eax,eax
c00015a9:	74 d1                	je     c000157c <dlmemalign+0x46>
c00015ab:	31 d2                	xor    edx,edx
c00015ad:	8d 70 f8             	lea    esi,[eax-0x8]
c00015b0:	f7 f7                	div    edi
c00015b2:	85 d2                	test   edx,edx
c00015b4:	74 62                	je     c0001618 <dlmemalign+0xe2>
c00015b6:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c00015ba:	89 f8                	mov    eax,edi
c00015bc:	f7 d8                	neg    eax
c00015be:	21 c3                	and    ebx,eax
c00015c0:	83 eb 08             	sub    ebx,0x8
c00015c3:	89 d8                	mov    eax,ebx
c00015c5:	29 f0                	sub    eax,esi
c00015c7:	83 f8 0f             	cmp    eax,0xf
c00015ca:	77 02                	ja     c00015ce <dlmemalign+0x98>
c00015cc:	01 fb                	add    ebx,edi
c00015ce:	89 d8                	mov    eax,ebx
c00015d0:	29 f0                	sub    eax,esi
c00015d2:	89 c6                	mov    esi,eax
c00015d4:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00015d7:	89 c2                	mov    edx,eax
c00015d9:	83 e2 fc             	and    edx,0xfffffffc
c00015dc:	29 f2                	sub    edx,esi
c00015de:	a8 02                	test   al,0x2
c00015e0:	74 10                	je     c00015f2 <dlmemalign+0xbc>
c00015e2:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00015e5:	83 ca 02             	or     edx,0x2
c00015e8:	8d 43 08             	lea    eax,[ebx+0x8]
c00015eb:	89 33                	mov    DWORD PTR [ebx],esi
c00015ed:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00015f0:	eb 5f                	jmp    c0001651 <dlmemalign+0x11b>
c00015f2:	83 ec 0c             	sub    esp,0xc
c00015f5:	89 d0                	mov    eax,edx
c00015f7:	83 c8 01             	or     eax,0x1
c00015fa:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00015fd:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001602:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001605:	83 e0 01             	and    eax,0x1
c0001608:	09 f0                	or     eax,esi
c000160a:	89 de                	mov    esi,ebx
c000160c:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c000160f:	51                   	push   ecx
c0001610:	e8 d4 f4 ff ff       	call   c0000ae9 <dlfree>
c0001615:	83 c4 10             	add    esp,0x10
c0001618:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000161b:	a8 02                	test   al,0x2
c000161d:	75 2f                	jne    c000164e <dlmemalign+0x118>
c000161f:	83 e0 fc             	and    eax,0xfffffffc
c0001622:	8d 55 10             	lea    edx,[ebp+0x10]
c0001625:	39 c2                	cmp    edx,eax
c0001627:	73 25                	jae    c000164e <dlmemalign+0x118>
c0001629:	8d 14 2e             	lea    edx,[esi+ebp*1]
c000162c:	83 ec 0c             	sub    esp,0xc
c000162f:	29 e8                	sub    eax,ebp
c0001631:	83 c2 08             	add    edx,0x8
c0001634:	83 c8 01             	or     eax,0x1
c0001637:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c000163a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000163d:	83 e0 01             	and    eax,0x1
c0001640:	09 c5                	or     ebp,eax
c0001642:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001645:	52                   	push   edx
c0001646:	e8 9e f4 ff ff       	call   c0000ae9 <dlfree>
c000164b:	83 c4 10             	add    esp,0x10
c000164e:	8d 46 08             	lea    eax,[esi+0x8]
c0001651:	83 c4 0c             	add    esp,0xc
c0001654:	5b                   	pop    ebx
c0001655:	5e                   	pop    esi
c0001656:	5f                   	pop    edi
c0001657:	5d                   	pop    ebp
c0001658:	c3                   	ret    

c0001659 <dlcalloc>:
c0001659:	53                   	push   ebx
c000165a:	83 ec 14             	sub    esp,0x14
c000165d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001661:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001666:	50                   	push   eax
c0001667:	e8 d8 f7 ff ff       	call   c0000e44 <dlmalloc>
c000166c:	83 c4 10             	add    esp,0x10
c000166f:	89 c3                	mov    ebx,eax
c0001671:	85 c0                	test   eax,eax
c0001673:	74 77                	je     c00016ec <dlcalloc+0x93>
c0001675:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001678:	89 d0                	mov    eax,edx
c000167a:	83 e0 fc             	and    eax,0xfffffffc
c000167d:	80 e2 02             	and    dl,0x2
c0001680:	75 5a                	jne    c00016dc <dlcalloc+0x83>
c0001682:	83 e8 04             	sub    eax,0x4
c0001685:	83 f8 27             	cmp    eax,0x27
c0001688:	76 03                	jbe    c000168d <dlcalloc+0x34>
c000168a:	51                   	push   ecx
c000168b:	eb 53                	jmp    c00016e0 <dlcalloc+0x87>
c000168d:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001693:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000169a:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00016a1:	83 f8 13             	cmp    eax,0x13
c00016a4:	76 46                	jbe    c00016ec <dlcalloc+0x93>
c00016a6:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00016ad:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00016b4:	83 f8 1b             	cmp    eax,0x1b
c00016b7:	76 33                	jbe    c00016ec <dlcalloc+0x93>
c00016b9:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00016c0:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00016c7:	83 f8 23             	cmp    eax,0x23
c00016ca:	76 20                	jbe    c00016ec <dlcalloc+0x93>
c00016cc:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00016d3:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00016da:	eb 10                	jmp    c00016ec <dlcalloc+0x93>
c00016dc:	83 e8 08             	sub    eax,0x8
c00016df:	52                   	push   edx
c00016e0:	50                   	push   eax
c00016e1:	6a 00                	push   0x0
c00016e3:	53                   	push   ebx
c00016e4:	e8 1f ef ff ff       	call   c0000608 <memset>
c00016e9:	83 c4 10             	add    esp,0x10
c00016ec:	89 d8                	mov    eax,ebx
c00016ee:	83 c4 08             	add    esp,0x8
c00016f1:	5b                   	pop    ebx
c00016f2:	c3                   	ret    

c00016f3 <dlcfree>:
c00016f3:	e9 f1 f3 ff ff       	jmp    c0000ae9 <dlfree>

c00016f8 <dlindependent_calloc>:
c00016f8:	83 ec 28             	sub    esp,0x28
c00016fb:	b9 03 00 00 00       	mov    ecx,0x3
c0001700:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001704:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0001708:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000170c:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001710:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001714:	e8 b9 fa ff ff       	call   c00011d2 <iALLOc>
c0001719:	83 c4 2c             	add    esp,0x2c
c000171c:	c3                   	ret    

c000171d <dlindependent_comalloc>:
c000171d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001721:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001725:	31 c9                	xor    ecx,ecx
c0001727:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000172b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000172f:	e9 9e fa ff ff       	jmp    c00011d2 <iALLOc>

c0001734 <dlvalloc>:
c0001734:	83 ec 0c             	sub    esp,0xc
c0001737:	83 3d c0 2c 02 c0 00 	cmp    DWORD PTR ds:0xc0022cc0,0x0
c000173e:	75 0a                	jne    c000174a <dlvalloc+0x16>
c0001740:	b8 c0 2c 02 c0       	mov    eax,0xc0022cc0
c0001745:	e8 b8 f2 ff ff       	call   c0000a02 <malloc_consolidate>
c000174a:	50                   	push   eax
c000174b:	50                   	push   eax
c000174c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001750:	ff 35 1c 30 02 c0    	push   DWORD PTR ds:0xc002301c
c0001756:	e8 db fd ff ff       	call   c0001536 <dlmemalign>
c000175b:	83 c4 1c             	add    esp,0x1c
c000175e:	c3                   	ret    

c000175f <dlpvalloc>:
c000175f:	83 ec 0c             	sub    esp,0xc
c0001762:	83 3d c0 2c 02 c0 00 	cmp    DWORD PTR ds:0xc0022cc0,0x0
c0001769:	75 0a                	jne    c0001775 <dlpvalloc+0x16>
c000176b:	b8 c0 2c 02 c0       	mov    eax,0xc0022cc0
c0001770:	e8 8d f2 ff ff       	call   c0000a02 <malloc_consolidate>
c0001775:	a1 1c 30 02 c0       	mov    eax,ds:0xc002301c
c000177a:	89 c1                	mov    ecx,eax
c000177c:	52                   	push   edx
c000177d:	f7 d9                	neg    ecx
c000177f:	52                   	push   edx
c0001780:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001784:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001788:	21 ca                	and    edx,ecx
c000178a:	52                   	push   edx
c000178b:	50                   	push   eax
c000178c:	e8 a5 fd ff ff       	call   c0001536 <dlmemalign>
c0001791:	83 c4 1c             	add    esp,0x1c
c0001794:	c3                   	ret    

c0001795 <dlmalloc_trim>:
c0001795:	b8 c0 2c 02 c0       	mov    eax,0xc0022cc0
c000179a:	e8 63 f2 ff ff       	call   c0000a02 <malloc_consolidate>
c000179f:	31 c0                	xor    eax,eax
c00017a1:	c3                   	ret    

c00017a2 <dlmalloc_usable_size>:
c00017a2:	53                   	push   ebx
c00017a3:	31 c0                	xor    eax,eax
c00017a5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00017a9:	85 c9                	test   ecx,ecx
c00017ab:	74 24                	je     c00017d1 <dlmalloc_usable_size+0x2f>
c00017ad:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c00017b0:	f6 c2 02             	test   dl,0x2
c00017b3:	74 08                	je     c00017bd <dlmalloc_usable_size+0x1b>
c00017b5:	83 e2 fc             	and    edx,0xfffffffc
c00017b8:	8d 42 f8             	lea    eax,[edx-0x8]
c00017bb:	eb 14                	jmp    c00017d1 <dlmalloc_usable_size+0x2f>
c00017bd:	89 d3                	mov    ebx,edx
c00017bf:	31 c0                	xor    eax,eax
c00017c1:	83 e3 fe             	and    ebx,0xfffffffe
c00017c4:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c00017c9:	74 06                	je     c00017d1 <dlmalloc_usable_size+0x2f>
c00017cb:	83 e2 fc             	and    edx,0xfffffffc
c00017ce:	8d 42 fc             	lea    eax,[edx-0x4]
c00017d1:	5b                   	pop    ebx
c00017d2:	c3                   	ret    

c00017d3 <dlmallinfo>:
c00017d3:	55                   	push   ebp
c00017d4:	57                   	push   edi
c00017d5:	56                   	push   esi
c00017d6:	53                   	push   ebx
c00017d7:	83 ec 08             	sub    esp,0x8
c00017da:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00017de:	83 3d ec 2c 02 c0 00 	cmp    DWORD PTR ds:0xc0022cec,0x0
c00017e5:	75 0a                	jne    c00017f1 <dlmallinfo+0x1e>
c00017e7:	b8 c0 2c 02 c0       	mov    eax,0xc0022cc0
c00017ec:	e8 11 f2 ff ff       	call   c0000a02 <malloc_consolidate>
c00017f1:	a1 ec 2c 02 c0       	mov    eax,ds:0xc0022cec
c00017f6:	31 ed                	xor    ebp,ebp
c00017f8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00017fb:	31 c9                	xor    ecx,ecx
c00017fd:	83 e0 fc             	and    eax,0xfffffffc
c0001800:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001804:	31 c0                	xor    eax,eax
c0001806:	8b 14 85 c4 2c 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdd33c]
c000180d:	85 d2                	test   edx,edx
c000180f:	74 0e                	je     c000181f <dlmallinfo+0x4c>
c0001811:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001814:	45                   	inc    ebp
c0001815:	83 e6 fc             	and    esi,0xfffffffc
c0001818:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000181b:	01 f1                	add    ecx,esi
c000181d:	eb ee                	jmp    c000180d <dlmallinfo+0x3a>
c000181f:	40                   	inc    eax
c0001820:	83 f8 0a             	cmp    eax,0xa
c0001823:	75 e1                	jne    c0001806 <dlmallinfo+0x33>
c0001825:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001829:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001830:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001833:	b8 f4 2c 02 c0       	mov    eax,0xc0022cf4
c0001838:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c000183b:	39 f0                	cmp    eax,esi
c000183d:	74 10                	je     c000184f <dlmallinfo+0x7c>
c000183f:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001842:	ff 04 24             	inc    DWORD PTR [esp]
c0001845:	83 e7 fc             	and    edi,0xfffffffc
c0001848:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c000184b:	01 fa                	add    edx,edi
c000184d:	eb ec                	jmp    c000183b <dlmallinfo+0x68>
c000184f:	83 c0 08             	add    eax,0x8
c0001852:	3d ec 2f 02 c0       	cmp    eax,0xc0022fec
c0001857:	75 df                	jne    c0001838 <dlmallinfo+0x65>
c0001859:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c000185c:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c000185f:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001862:	a1 28 30 02 c0       	mov    eax,ds:0xc0023028
c0001867:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000186a:	89 03                	mov    DWORD PTR [ebx],eax
c000186c:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c000186f:	8b 35 10 30 02 c0    	mov    esi,DWORD PTR ds:0xc0023010
c0001875:	29 d0                	sub    eax,edx
c0001877:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c000187a:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000187d:	8b 35 24 30 02 c0    	mov    esi,DWORD PTR ds:0xc0023024
c0001883:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001887:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c000188a:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000188d:	8b 35 34 30 02 c0    	mov    esi,DWORD PTR ds:0xc0023034
c0001893:	89 d8                	mov    eax,ebx
c0001895:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001898:	83 c4 08             	add    esp,0x8
c000189b:	5b                   	pop    ebx
c000189c:	5e                   	pop    esi
c000189d:	5f                   	pop    edi
c000189e:	5d                   	pop    ebp
c000189f:	c2 04 00             	ret    0x4

c00018a2 <dlmalloc_stats>:
c00018a2:	83 ec 30             	sub    esp,0x30
c00018a5:	8d 44 24 08          	lea    eax,[esp+0x8]
c00018a9:	50                   	push   eax
c00018aa:	e8 24 ff ff ff       	call   c00017d3 <dlmallinfo>
c00018af:	83 c4 30             	add    esp,0x30
c00018b2:	c3                   	ret    

c00018b3 <dlmallopt>:
c00018b3:	56                   	push   esi
c00018b4:	b8 c0 2c 02 c0       	mov    eax,0xc0022cc0
c00018b9:	53                   	push   ebx
c00018ba:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00018be:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00018c2:	e8 3b f1 ff ff       	call   c0000a02 <malloc_consolidate>
c00018c7:	8d 46 04             	lea    eax,[esi+0x4]
c00018ca:	83 f8 05             	cmp    eax,0x5
c00018cd:	77 67                	ja     c0001936 <dlmallopt+0x83>
c00018cf:	ff 24 85 84 f2 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe0d7c]
c00018d6:	83 fb 50             	cmp    ebx,0x50
c00018d9:	77 5b                	ja     c0001936 <dlmallopt+0x83>
c00018db:	ba 08 00 00 00       	mov    edx,0x8
c00018e0:	85 db                	test   ebx,ebx
c00018e2:	74 12                	je     c00018f6 <dlmallopt+0x43>
c00018e4:	83 c3 0b             	add    ebx,0xb
c00018e7:	ba 10 00 00 00       	mov    edx,0x10
c00018ec:	83 fb 0f             	cmp    ebx,0xf
c00018ef:	76 05                	jbe    c00018f6 <dlmallopt+0x43>
c00018f1:	89 da                	mov    edx,ebx
c00018f3:	83 e2 f8             	and    edx,0xfffffff8
c00018f6:	a1 c0 2c 02 c0       	mov    eax,ds:0xc0022cc0
c00018fb:	83 e0 03             	and    eax,0x3
c00018fe:	09 d0                	or     eax,edx
c0001900:	a3 c0 2c 02 c0       	mov    ds:0xc0022cc0,eax
c0001905:	eb 31                	jmp    c0001938 <dlmallopt+0x85>
c0001907:	89 1d 04 30 02 c0    	mov    DWORD PTR ds:0xc0023004,ebx
c000190d:	eb 06                	jmp    c0001915 <dlmallopt+0x62>
c000190f:	89 1d 08 30 02 c0    	mov    DWORD PTR ds:0xc0023008,ebx
c0001915:	be 01 00 00 00       	mov    esi,0x1
c000191a:	eb 1c                	jmp    c0001938 <dlmallopt+0x85>
c000191c:	89 1d 0c 30 02 c0    	mov    DWORD PTR ds:0xc002300c,ebx
c0001922:	eb f1                	jmp    c0001915 <dlmallopt+0x62>
c0001924:	31 f6                	xor    esi,esi
c0001926:	85 db                	test   ebx,ebx
c0001928:	75 0e                	jne    c0001938 <dlmallopt+0x85>
c000192a:	c7 05 14 30 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023014,0x0
c0001934:	eb df                	jmp    c0001915 <dlmallopt+0x62>
c0001936:	31 f6                	xor    esi,esi
c0001938:	89 f0                	mov    eax,esi
c000193a:	5b                   	pop    ebx
c000193b:	5e                   	pop    esi
c000193c:	c3                   	ret    

c000193d <disk_status>:
c000193d:	31 c0                	xor    eax,eax
c000193f:	c3                   	ret    

c0001940 <disk_initialize>:
c0001940:	31 c0                	xor    eax,eax
c0001942:	c3                   	ret    

c0001943 <disk_read>:
c0001943:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001948:	0f b6 04 85 20 3f 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdc0e0]
c0001950:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001954:	e9 1d 79 01 00       	jmp    c0019276 <fatWrapperReadDisk>

c0001959 <disk_write>:
c0001959:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000195e:	0f b6 04 85 20 3f 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdc0e0]
c0001966:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000196a:	e9 4e 79 01 00       	jmp    c00192bd <fatWrapperWriteDisk>

c000196f <disk_ioctl>:
c000196f:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001974:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001978:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000197d:	0f b6 04 85 20 3f 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdc0e0]
c0001985:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001989:	e9 76 79 01 00       	jmp    c0019304 <fatWrapperIoctl>

c000198e <ld_word>:
c000198e:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001992:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001995:	c1 e2 08             	shl    edx,0x8
c0001998:	09 d0                	or     eax,edx
c000199a:	c3                   	ret    

c000199b <ld_dword>:
c000199b:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c000199f:	89 d1                	mov    ecx,edx
c00019a1:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c00019a5:	c1 e1 08             	shl    ecx,0x8
c00019a8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00019ab:	09 ca                	or     edx,ecx
c00019ad:	c1 e2 08             	shl    edx,0x8
c00019b0:	09 d0                	or     eax,edx
c00019b2:	c3                   	ret    

c00019b3 <ld_qword>:
c00019b3:	57                   	push   edi
c00019b4:	56                   	push   esi
c00019b5:	53                   	push   ebx
c00019b6:	31 db                	xor    ebx,ebx
c00019b8:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c00019bb:	89 df                	mov    edi,ebx
c00019bd:	89 ce                	mov    esi,ecx
c00019bf:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c00019c3:	0f a4 f7 08          	shld   edi,esi,0x8
c00019c7:	c1 e6 08             	shl    esi,0x8
c00019ca:	09 f2                	or     edx,esi
c00019cc:	89 d6                	mov    esi,edx
c00019ce:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c00019d2:	0f a4 f7 08          	shld   edi,esi,0x8
c00019d6:	c1 e6 08             	shl    esi,0x8
c00019d9:	09 f2                	or     edx,esi
c00019db:	89 d6                	mov    esi,edx
c00019dd:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c00019e1:	0f a4 f7 08          	shld   edi,esi,0x8
c00019e5:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00019e8:	c1 e6 08             	shl    esi,0x8
c00019eb:	89 fb                	mov    ebx,edi
c00019ed:	09 f2                	or     edx,esi
c00019ef:	89 d1                	mov    ecx,edx
c00019f1:	0f a4 cb 08          	shld   ebx,ecx,0x8
c00019f5:	c1 e1 08             	shl    ecx,0x8
c00019f8:	89 da                	mov    edx,ebx
c00019fa:	09 c8                	or     eax,ecx
c00019fc:	5b                   	pop    ebx
c00019fd:	5e                   	pop    esi
c00019fe:	5f                   	pop    edi
c00019ff:	c3                   	ret    

c0001a00 <st_word>:
c0001a00:	66 89 10             	mov    WORD PTR [eax],dx
c0001a03:	c3                   	ret    

c0001a04 <st_dword>:
c0001a04:	89 10                	mov    DWORD PTR [eax],edx
c0001a06:	c3                   	ret    

c0001a07 <st_qword>:
c0001a07:	89 10                	mov    DWORD PTR [eax],edx
c0001a09:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001a0c:	c3                   	ret    

c0001a0d <mem_cpy>:
c0001a0d:	85 c9                	test   ecx,ecx
c0001a0f:	74 10                	je     c0001a21 <mem_cpy+0x14>
c0001a11:	57                   	push   edi
c0001a12:	01 c1                	add    ecx,eax
c0001a14:	56                   	push   esi
c0001a15:	89 c7                	mov    edi,eax
c0001a17:	89 d6                	mov    esi,edx
c0001a19:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001a1a:	39 f9                	cmp    ecx,edi
c0001a1c:	75 fb                	jne    c0001a19 <mem_cpy+0xc>
c0001a1e:	5e                   	pop    esi
c0001a1f:	5f                   	pop    edi
c0001a20:	c3                   	ret    
c0001a21:	c3                   	ret    

c0001a22 <mem_set>:
c0001a22:	01 c1                	add    ecx,eax
c0001a24:	40                   	inc    eax
c0001a25:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001a28:	39 c8                	cmp    eax,ecx
c0001a2a:	75 f8                	jne    c0001a24 <mem_set+0x2>
c0001a2c:	c3                   	ret    

c0001a2d <mem_cmp>:
c0001a2d:	57                   	push   edi
c0001a2e:	56                   	push   esi
c0001a2f:	89 c6                	mov    esi,eax
c0001a31:	53                   	push   ebx
c0001a32:	46                   	inc    esi
c0001a33:	42                   	inc    edx
c0001a34:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001a38:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001a3c:	29 fb                	sub    ebx,edi
c0001a3e:	89 cf                	mov    edi,ecx
c0001a40:	29 f7                	sub    edi,esi
c0001a42:	01 c7                	add    edi,eax
c0001a44:	74 04                	je     c0001a4a <mem_cmp+0x1d>
c0001a46:	85 db                	test   ebx,ebx
c0001a48:	74 e8                	je     c0001a32 <mem_cmp+0x5>
c0001a4a:	89 d8                	mov    eax,ebx
c0001a4c:	5b                   	pop    ebx
c0001a4d:	5e                   	pop    esi
c0001a4e:	5f                   	pop    edi
c0001a4f:	c3                   	ret    

c0001a50 <chk_chr>:
c0001a50:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001a53:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001a56:	74 07                	je     c0001a5f <chk_chr+0xf>
c0001a58:	39 d1                	cmp    ecx,edx
c0001a5a:	74 03                	je     c0001a5f <chk_chr+0xf>
c0001a5c:	40                   	inc    eax
c0001a5d:	eb f1                	jmp    c0001a50 <chk_chr>
c0001a5f:	89 c8                	mov    eax,ecx
c0001a61:	c3                   	ret    

c0001a62 <dbc_1st>:
c0001a62:	31 c0                	xor    eax,eax
c0001a64:	c3                   	ret    

c0001a65 <dbc_2nd>:
c0001a65:	31 c0                	xor    eax,eax
c0001a67:	c3                   	ret    

c0001a68 <tchar2uni>:
c0001a68:	57                   	push   edi
c0001a69:	89 c7                	mov    edi,eax
c0001a6b:	56                   	push   esi
c0001a6c:	53                   	push   ebx
c0001a6d:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001a6f:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001a71:	8d 73 01             	lea    esi,[ebx+0x1]
c0001a74:	84 c9                	test   cl,cl
c0001a76:	78 0a                	js     c0001a82 <tchar2uni+0x1a>
c0001a78:	0f b6 d1             	movzx  edx,cl
c0001a7b:	89 f3                	mov    ebx,esi
c0001a7d:	e9 9f 00 00 00       	jmp    c0001b21 <tchar2uni+0xb9>
c0001a82:	88 ca                	mov    dl,cl
c0001a84:	83 e2 e0             	and    edx,0xffffffe0
c0001a87:	80 fa c0             	cmp    dl,0xc0
c0001a8a:	75 0c                	jne    c0001a98 <tchar2uni+0x30>
c0001a8c:	89 ca                	mov    edx,ecx
c0001a8e:	b9 01 00 00 00       	mov    ecx,0x1
c0001a93:	83 e2 1f             	and    edx,0x1f
c0001a96:	eb 2e                	jmp    c0001ac6 <tchar2uni+0x5e>
c0001a98:	88 ca                	mov    dl,cl
c0001a9a:	83 e2 f0             	and    edx,0xfffffff0
c0001a9d:	80 fa e0             	cmp    dl,0xe0
c0001aa0:	75 0c                	jne    c0001aae <tchar2uni+0x46>
c0001aa2:	89 ca                	mov    edx,ecx
c0001aa4:	b9 02 00 00 00       	mov    ecx,0x2
c0001aa9:	83 e2 0f             	and    edx,0xf
c0001aac:	eb 18                	jmp    c0001ac6 <tchar2uni+0x5e>
c0001aae:	88 ca                	mov    dl,cl
c0001ab0:	83 e2 f8             	and    edx,0xfffffff8
c0001ab3:	88 d0                	mov    al,dl
c0001ab5:	83 ca ff             	or     edx,0xffffffff
c0001ab8:	3c f0                	cmp    al,0xf0
c0001aba:	75 6c                	jne    c0001b28 <tchar2uni+0xc0>
c0001abc:	89 ca                	mov    edx,ecx
c0001abe:	b9 03 00 00 00       	mov    ecx,0x3
c0001ac3:	83 e2 07             	and    edx,0x7
c0001ac6:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001aca:	46                   	inc    esi
c0001acb:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001ace:	88 c8                	mov    al,cl
c0001ad0:	83 e0 c0             	and    eax,0xffffffc0
c0001ad3:	3c 80                	cmp    al,0x80
c0001ad5:	75 4e                	jne    c0001b25 <tchar2uni+0xbd>
c0001ad7:	c1 e2 06             	shl    edx,0x6
c0001ada:	83 e1 3f             	and    ecx,0x3f
c0001add:	09 ca                	or     edx,ecx
c0001adf:	39 de                	cmp    esi,ebx
c0001ae1:	75 e7                	jne    c0001aca <tchar2uni+0x62>
c0001ae3:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001ae6:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001aec:	77 37                	ja     c0001b25 <tchar2uni+0xbd>
c0001aee:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001af4:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001afa:	76 29                	jbe    c0001b25 <tchar2uni+0xbd>
c0001afc:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001b02:	76 1d                	jbe    c0001b21 <tchar2uni+0xb9>
c0001b04:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001b0a:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001b10:	c1 e1 06             	shl    ecx,0x6
c0001b13:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001b19:	09 ca                	or     edx,ecx
c0001b1b:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001b21:	89 1f                	mov    DWORD PTR [edi],ebx
c0001b23:	eb 03                	jmp    c0001b28 <tchar2uni+0xc0>
c0001b25:	83 ca ff             	or     edx,0xffffffff
c0001b28:	5b                   	pop    ebx
c0001b29:	89 d0                	mov    eax,edx
c0001b2b:	5e                   	pop    esi
c0001b2c:	5f                   	pop    edi
c0001b2d:	c3                   	ret    

c0001b2e <put_utf>:
c0001b2e:	53                   	push   ebx
c0001b2f:	83 f8 7f             	cmp    eax,0x7f
c0001b32:	89 c3                	mov    ebx,eax
c0001b34:	b0 00                	mov    al,0x0
c0001b36:	77 11                	ja     c0001b49 <put_utf+0x1b>
c0001b38:	85 c9                	test   ecx,ecx
c0001b3a:	0f 84 e5 00 00 00    	je     c0001c25 <put_utf+0xf7>
c0001b40:	88 1a                	mov    BYTE PTR [edx],bl
c0001b42:	b0 01                	mov    al,0x1
c0001b44:	e9 dc 00 00 00       	jmp    c0001c25 <put_utf+0xf7>
c0001b49:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001b4f:	77 23                	ja     c0001b74 <put_utf+0x46>
c0001b51:	83 f9 01             	cmp    ecx,0x1
c0001b54:	0f 86 cb 00 00 00    	jbe    c0001c25 <put_utf+0xf7>
c0001b5a:	89 d8                	mov    eax,ebx
c0001b5c:	83 e3 3f             	and    ebx,0x3f
c0001b5f:	c1 e8 06             	shr    eax,0x6
c0001b62:	83 cb 80             	or     ebx,0xffffff80
c0001b65:	83 c8 c0             	or     eax,0xffffffc0
c0001b68:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001b6b:	88 02                	mov    BYTE PTR [edx],al
c0001b6d:	b0 02                	mov    al,0x2
c0001b6f:	e9 b1 00 00 00       	jmp    c0001c25 <put_utf+0xf7>
c0001b74:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001b7a:	77 40                	ja     c0001bbc <put_utf+0x8e>
c0001b7c:	83 f9 02             	cmp    ecx,0x2
c0001b7f:	0f 86 a0 00 00 00    	jbe    c0001c25 <put_utf+0xf7>
c0001b85:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001b8b:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001b91:	0f 86 8e 00 00 00    	jbe    c0001c25 <put_utf+0xf7>
c0001b97:	89 d8                	mov    eax,ebx
c0001b99:	c1 e8 0c             	shr    eax,0xc
c0001b9c:	83 c8 e0             	or     eax,0xffffffe0
c0001b9f:	88 02                	mov    BYTE PTR [edx],al
c0001ba1:	89 d8                	mov    eax,ebx
c0001ba3:	83 e3 3f             	and    ebx,0x3f
c0001ba6:	c1 e8 06             	shr    eax,0x6
c0001ba9:	83 cb 80             	or     ebx,0xffffff80
c0001bac:	83 e0 3f             	and    eax,0x3f
c0001baf:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001bb2:	83 c8 80             	or     eax,0xffffff80
c0001bb5:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001bb8:	b0 03                	mov    al,0x3
c0001bba:	eb 69                	jmp    c0001c25 <put_utf+0xf7>
c0001bbc:	83 f9 03             	cmp    ecx,0x3
c0001bbf:	76 64                	jbe    c0001c25 <put_utf+0xf7>
c0001bc1:	89 d9                	mov    ecx,ebx
c0001bc3:	0f b7 c3             	movzx  eax,bx
c0001bc6:	66 31 c9             	xor    cx,cx
c0001bc9:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001bcf:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001bd5:	c1 e9 06             	shr    ecx,0x6
c0001bd8:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001bde:	77 43                	ja     c0001c23 <put_utf+0xf5>
c0001be0:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001be6:	77 3b                	ja     c0001c23 <put_utf+0xf5>
c0001be8:	09 cb                	or     ebx,ecx
c0001bea:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001bf0:	89 d8                	mov    eax,ebx
c0001bf2:	c1 e8 12             	shr    eax,0x12
c0001bf5:	83 c8 f0             	or     eax,0xfffffff0
c0001bf8:	88 02                	mov    BYTE PTR [edx],al
c0001bfa:	89 d8                	mov    eax,ebx
c0001bfc:	c1 e8 0c             	shr    eax,0xc
c0001bff:	83 e0 3f             	and    eax,0x3f
c0001c02:	83 c8 80             	or     eax,0xffffff80
c0001c05:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001c08:	89 d8                	mov    eax,ebx
c0001c0a:	83 e3 3f             	and    ebx,0x3f
c0001c0d:	c1 e8 06             	shr    eax,0x6
c0001c10:	83 cb 80             	or     ebx,0xffffff80
c0001c13:	83 e0 3f             	and    eax,0x3f
c0001c16:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001c19:	83 c8 80             	or     eax,0xffffff80
c0001c1c:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001c1f:	b0 04                	mov    al,0x4
c0001c21:	eb 02                	jmp    c0001c25 <put_utf+0xf7>
c0001c23:	31 c0                	xor    eax,eax
c0001c25:	5b                   	pop    ebx
c0001c26:	c3                   	ret    

c0001c27 <clst2sect>:
c0001c27:	89 c1                	mov    ecx,eax
c0001c29:	83 ea 02             	sub    edx,0x2
c0001c2c:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001c2f:	83 e8 02             	sub    eax,0x2
c0001c32:	39 d0                	cmp    eax,edx
c0001c34:	76 0d                	jbe    c0001c43 <clst2sect+0x1c>
c0001c36:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001c3a:	f7 e2                	mul    edx
c0001c3c:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001c3f:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001c42:	c3                   	ret    
c0001c43:	31 c0                	xor    eax,eax
c0001c45:	31 d2                	xor    edx,edx
c0001c47:	c3                   	ret    

c0001c48 <clmt_clust>:
c0001c48:	57                   	push   edi
c0001c49:	89 cf                	mov    edi,ecx
c0001c4b:	56                   	push   esi
c0001c4c:	89 d6                	mov    esi,edx
c0001c4e:	53                   	push   ebx
c0001c4f:	0f ac fe 09          	shrd   esi,edi,0x9
c0001c53:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001c56:	89 f2                	mov    edx,esi
c0001c58:	8b 00                	mov    eax,DWORD PTR [eax]
c0001c5a:	c1 ef 09             	shr    edi,0x9
c0001c5d:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001c61:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001c64:	89 f9                	mov    ecx,edi
c0001c66:	31 ff                	xor    edi,edi
c0001c68:	57                   	push   edi
c0001c69:	56                   	push   esi
c0001c6a:	51                   	push   ecx
c0001c6b:	52                   	push   edx
c0001c6c:	e8 ab c6 01 00       	call   c001e31c <__udivdi3>
c0001c71:	83 c4 10             	add    esp,0x10
c0001c74:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001c76:	85 d2                	test   edx,edx
c0001c78:	74 10                	je     c0001c8a <clmt_clust+0x42>
c0001c7a:	39 d0                	cmp    eax,edx
c0001c7c:	72 07                	jb     c0001c85 <clmt_clust+0x3d>
c0001c7e:	29 d0                	sub    eax,edx
c0001c80:	83 c3 08             	add    ebx,0x8
c0001c83:	eb ef                	jmp    c0001c74 <clmt_clust+0x2c>
c0001c85:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001c88:	89 c2                	mov    edx,eax
c0001c8a:	5b                   	pop    ebx
c0001c8b:	89 d0                	mov    eax,edx
c0001c8d:	5e                   	pop    esi
c0001c8e:	5f                   	pop    edi
c0001c8f:	c3                   	ret    

c0001c90 <pick_lfn>:
c0001c90:	55                   	push   ebp
c0001c91:	57                   	push   edi
c0001c92:	56                   	push   esi
c0001c93:	89 d6                	mov    esi,edx
c0001c95:	53                   	push   ebx
c0001c96:	89 c3                	mov    ebx,eax
c0001c98:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001c9b:	e8 ee fc ff ff       	call   c000198e <ld_word>
c0001ca0:	66 85 c0             	test   ax,ax
c0001ca3:	74 04                	je     c0001ca9 <pick_lfn+0x19>
c0001ca5:	31 c0                	xor    eax,eax
c0001ca7:	eb 5c                	jmp    c0001d05 <pick_lfn+0x75>
c0001ca9:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001cac:	bd 01 00 00 00       	mov    ebp,0x1
c0001cb1:	83 e1 bf             	and    ecx,0xffffffbf
c0001cb4:	31 ff                	xor    edi,edi
c0001cb6:	49                   	dec    ecx
c0001cb7:	6b c9 0d             	imul   ecx,ecx,0xd
c0001cba:	0f b6 87 a0 f3 01 c0 	movzx  eax,BYTE PTR [edi-0x3ffe0c60]
c0001cc1:	01 f0                	add    eax,esi
c0001cc3:	e8 c6 fc ff ff       	call   c000198e <ld_word>
c0001cc8:	66 85 ed             	test   bp,bp
c0001ccb:	74 11                	je     c0001cde <pick_lfn+0x4e>
c0001ccd:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001cd3:	77 d0                	ja     c0001ca5 <pick_lfn+0x15>
c0001cd5:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001cd9:	89 c5                	mov    ebp,eax
c0001cdb:	41                   	inc    ecx
c0001cdc:	eb 04                	jmp    c0001ce2 <pick_lfn+0x52>
c0001cde:	66 40                	inc    ax
c0001ce0:	75 c3                	jne    c0001ca5 <pick_lfn+0x15>
c0001ce2:	47                   	inc    edi
c0001ce3:	83 ff 0d             	cmp    edi,0xd
c0001ce6:	75 d2                	jne    c0001cba <pick_lfn+0x2a>
c0001ce8:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001ceb:	74 13                	je     c0001d00 <pick_lfn+0x70>
c0001ced:	66 85 ed             	test   bp,bp
c0001cf0:	74 0e                	je     c0001d00 <pick_lfn+0x70>
c0001cf2:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001cf8:	77 ab                	ja     c0001ca5 <pick_lfn+0x15>
c0001cfa:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001d00:	b8 01 00 00 00       	mov    eax,0x1
c0001d05:	5b                   	pop    ebx
c0001d06:	5e                   	pop    esi
c0001d07:	5f                   	pop    edi
c0001d08:	5d                   	pop    ebp
c0001d09:	c3                   	ret    

c0001d0a <put_lfn>:
c0001d0a:	55                   	push   ebp
c0001d0b:	31 ed                	xor    ebp,ebp
c0001d0d:	57                   	push   edi
c0001d0e:	89 d7                	mov    edi,edx
c0001d10:	56                   	push   esi
c0001d11:	31 f6                	xor    esi,esi
c0001d13:	53                   	push   ebx
c0001d14:	83 ec 08             	sub    esp,0x8
c0001d17:	89 04 24             	mov    DWORD PTR [esp],eax
c0001d1a:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001d1e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001d22:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001d28:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001d2b:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001d2e:	31 d2                	xor    edx,edx
c0001d30:	e8 cb fc ff ff       	call   c0001a00 <st_word>
c0001d35:	0f b6 d9             	movzx  ebx,cl
c0001d38:	4b                   	dec    ebx
c0001d39:	6b db 0d             	imul   ebx,ebx,0xd
c0001d3c:	66 83 fe ff          	cmp    si,0xffff
c0001d40:	74 08                	je     c0001d4a <put_lfn+0x40>
c0001d42:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001d45:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001d49:	43                   	inc    ebx
c0001d4a:	0f b6 85 a0 f3 01 c0 	movzx  eax,BYTE PTR [ebp-0x3ffe0c60]
c0001d51:	0f b7 d6             	movzx  edx,si
c0001d54:	01 f8                	add    eax,edi
c0001d56:	e8 a5 fc ff ff       	call   c0001a00 <st_word>
c0001d5b:	66 85 f6             	test   si,si
c0001d5e:	75 03                	jne    c0001d63 <put_lfn+0x59>
c0001d60:	83 ce ff             	or     esi,0xffffffff
c0001d63:	45                   	inc    ebp
c0001d64:	83 fd 0d             	cmp    ebp,0xd
c0001d67:	75 d3                	jne    c0001d3c <put_lfn+0x32>
c0001d69:	66 46                	inc    si
c0001d6b:	74 0a                	je     c0001d77 <put_lfn+0x6d>
c0001d6d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001d70:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0001d75:	75 09                	jne    c0001d80 <put_lfn+0x76>
c0001d77:	88 c8                	mov    al,cl
c0001d79:	83 c8 40             	or     eax,0x40
c0001d7c:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0001d80:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0001d84:	88 07                	mov    BYTE PTR [edi],al
c0001d86:	83 c4 08             	add    esp,0x8
c0001d89:	5b                   	pop    ebx
c0001d8a:	5e                   	pop    esi
c0001d8b:	5f                   	pop    edi
c0001d8c:	5d                   	pop    ebp
c0001d8d:	c3                   	ret    

c0001d8e <gen_numname>:
c0001d8e:	57                   	push   edi
c0001d8f:	89 cf                	mov    edi,ecx
c0001d91:	56                   	push   esi
c0001d92:	b9 0b 00 00 00       	mov    ecx,0xb
c0001d97:	53                   	push   ebx
c0001d98:	89 c6                	mov    esi,eax
c0001d9a:	83 ec 10             	sub    esp,0x10
c0001d9d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0001da1:	e8 67 fc ff ff       	call   c0001a0d <mem_cpy>
c0001da6:	83 fb 05             	cmp    ebx,0x5
c0001da9:	76 2d                	jbe    c0001dd8 <gen_numname+0x4a>
c0001dab:	66 8b 07             	mov    ax,WORD PTR [edi]
c0001dae:	66 85 c0             	test   ax,ax
c0001db1:	74 25                	je     c0001dd8 <gen_numname+0x4a>
c0001db3:	83 c7 02             	add    edi,0x2
c0001db6:	ba 10 00 00 00       	mov    edx,0x10
c0001dbb:	01 db                	add    ebx,ebx
c0001dbd:	89 c1                	mov    ecx,eax
c0001dbf:	66 d1 e8             	shr    ax,1
c0001dc2:	83 e1 01             	and    ecx,0x1
c0001dc5:	01 cb                	add    ebx,ecx
c0001dc7:	0f ba e3 10          	bt     ebx,0x10
c0001dcb:	73 06                	jae    c0001dd3 <gen_numname+0x45>
c0001dcd:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0001dd3:	4a                   	dec    edx
c0001dd4:	75 e5                	jne    c0001dbb <gen_numname+0x2d>
c0001dd6:	eb d3                	jmp    c0001dab <gen_numname+0x1d>
c0001dd8:	b8 07 00 00 00       	mov    eax,0x7
c0001ddd:	88 d9                	mov    cl,bl
c0001ddf:	83 e1 0f             	and    ecx,0xf
c0001de2:	8d 51 30             	lea    edx,[ecx+0x30]
c0001de5:	80 fa 39             	cmp    dl,0x39
c0001de8:	76 03                	jbe    c0001ded <gen_numname+0x5f>
c0001dea:	8d 51 37             	lea    edx,[ecx+0x37]
c0001ded:	8d 48 ff             	lea    ecx,[eax-0x1]
c0001df0:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0001df4:	89 da                	mov    edx,ebx
c0001df6:	c1 ea 04             	shr    edx,0x4
c0001df9:	83 fb 0f             	cmp    ebx,0xf
c0001dfc:	76 06                	jbe    c0001e04 <gen_numname+0x76>
c0001dfe:	89 c8                	mov    eax,ecx
c0001e00:	89 d3                	mov    ebx,edx
c0001e02:	eb d9                	jmp    c0001ddd <gen_numname+0x4f>
c0001e04:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0001e09:	31 d2                	xor    edx,edx
c0001e0b:	8d 58 fe             	lea    ebx,[eax-0x2]
c0001e0e:	8d 04 16             	lea    eax,[esi+edx*1]
c0001e11:	39 ca                	cmp    edx,ecx
c0001e13:	73 18                	jae    c0001e2d <gen_numname+0x9f>
c0001e15:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001e18:	3c 20                	cmp    al,0x20
c0001e1a:	74 11                	je     c0001e2d <gen_numname+0x9f>
c0001e1c:	e8 41 fc ff ff       	call   c0001a62 <dbc_1st>
c0001e21:	85 c0                	test   eax,eax
c0001e23:	74 05                	je     c0001e2a <gen_numname+0x9c>
c0001e25:	39 d3                	cmp    ebx,edx
c0001e27:	74 04                	je     c0001e2d <gen_numname+0x9f>
c0001e29:	42                   	inc    edx
c0001e2a:	42                   	inc    edx
c0001e2b:	eb e1                	jmp    c0001e0e <gen_numname+0x80>
c0001e2d:	b0 20                	mov    al,0x20
c0001e2f:	83 f9 07             	cmp    ecx,0x7
c0001e32:	77 05                	ja     c0001e39 <gen_numname+0xab>
c0001e34:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0001e38:	41                   	inc    ecx
c0001e39:	42                   	inc    edx
c0001e3a:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0001e3e:	83 fa 07             	cmp    edx,0x7
c0001e41:	76 ea                	jbe    c0001e2d <gen_numname+0x9f>
c0001e43:	83 c4 10             	add    esp,0x10
c0001e46:	5b                   	pop    ebx
c0001e47:	5e                   	pop    esi
c0001e48:	5f                   	pop    edi
c0001e49:	c3                   	ret    

c0001e4a <sum_sfn>:
c0001e4a:	31 c9                	xor    ecx,ecx
c0001e4c:	31 d2                	xor    edx,edx
c0001e4e:	d0 ca                	ror    dl,1
c0001e50:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0001e53:	41                   	inc    ecx
c0001e54:	83 f9 0b             	cmp    ecx,0xb
c0001e57:	75 f5                	jne    c0001e4e <sum_sfn+0x4>
c0001e59:	88 d0                	mov    al,dl
c0001e5b:	c3                   	ret    

c0001e5c <xdir_sum>:
c0001e5c:	56                   	push   esi
c0001e5d:	31 c9                	xor    ecx,ecx
c0001e5f:	53                   	push   ebx
c0001e60:	31 d2                	xor    edx,edx
c0001e62:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0001e66:	43                   	inc    ebx
c0001e67:	c1 e3 05             	shl    ebx,0x5
c0001e6a:	83 fa 02             	cmp    edx,0x2
c0001e6d:	74 0b                	je     c0001e7a <xdir_sum+0x1e>
c0001e6f:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0001e73:	66 d1 c9             	ror    cx,1
c0001e76:	01 f1                	add    ecx,esi
c0001e78:	eb 05                	jmp    c0001e7f <xdir_sum+0x23>
c0001e7a:	ba 03 00 00 00       	mov    edx,0x3
c0001e7f:	42                   	inc    edx
c0001e80:	39 d3                	cmp    ebx,edx
c0001e82:	77 e6                	ja     c0001e6a <xdir_sum+0xe>
c0001e84:	89 c8                	mov    eax,ecx
c0001e86:	5b                   	pop    ebx
c0001e87:	5e                   	pop    esi
c0001e88:	c3                   	ret    

c0001e89 <xsum32>:
c0001e89:	d1 ca                	ror    edx,1
c0001e8b:	0f b6 c0             	movzx  eax,al
c0001e8e:	01 d0                	add    eax,edx
c0001e90:	c3                   	ret    

c0001e91 <get_xfileinfo>:
c0001e91:	55                   	push   ebp
c0001e92:	31 c9                	xor    ecx,ecx
c0001e94:	57                   	push   edi
c0001e95:	bd 40 00 00 00       	mov    ebp,0x40
c0001e9a:	56                   	push   esi
c0001e9b:	31 ff                	xor    edi,edi
c0001e9d:	53                   	push   ebx
c0001e9e:	89 c6                	mov    esi,eax
c0001ea0:	83 ec 0c             	sub    esp,0xc
c0001ea3:	89 d3                	mov    ebx,edx
c0001ea5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0001eac:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0001eb0:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0001eb3:	76 6d                	jbe    c0001f22 <get_xfileinfo+0x91>
c0001eb5:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0001ebb:	76 0b                	jbe    c0001ec8 <get_xfileinfo+0x37>
c0001ebd:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0001ec1:	bf 01 00 00 00       	mov    edi,0x1
c0001ec6:	eb 63                	jmp    c0001f2b <get_xfileinfo+0x9a>
c0001ec8:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0001ece:	75 03                	jne    c0001ed3 <get_xfileinfo+0x42>
c0001ed0:	83 c5 02             	add    ebp,0x2
c0001ed3:	8d 04 2e             	lea    eax,[esi+ebp*1]
c0001ed6:	83 c5 02             	add    ebp,0x2
c0001ed9:	e8 b0 fa ff ff       	call   c000198e <ld_word>
c0001ede:	ff 04 24             	inc    DWORD PTR [esp]
c0001ee1:	66 85 c9             	test   cx,cx
c0001ee4:	75 0d                	jne    c0001ef3 <get_xfileinfo+0x62>
c0001ee6:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0001eec:	66 81 fa ff 07       	cmp    dx,0x7ff
c0001ef1:	76 2b                	jbe    c0001f1e <get_xfileinfo+0x8d>
c0001ef3:	c1 e1 10             	shl    ecx,0x10
c0001ef6:	ba ff 00 00 00       	mov    edx,0xff
c0001efb:	0f b7 c0             	movzx  eax,ax
c0001efe:	29 fa                	sub    edx,edi
c0001f00:	09 c8                	or     eax,ecx
c0001f02:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001f06:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0001f0a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001f0e:	e8 1b fc ff ff       	call   c0001b2e <put_utf>
c0001f13:	84 c0                	test   al,al
c0001f15:	74 a6                	je     c0001ebd <get_xfileinfo+0x2c>
c0001f17:	0f b6 c0             	movzx  eax,al
c0001f1a:	01 c7                	add    edi,eax
c0001f1c:	31 c0                	xor    eax,eax
c0001f1e:	89 c1                	mov    ecx,eax
c0001f20:	eb 8a                	jmp    c0001eac <get_xfileinfo+0x1b>
c0001f22:	85 ff                	test   edi,edi
c0001f24:	74 97                	je     c0001ebd <get_xfileinfo+0x2c>
c0001f26:	66 85 c9             	test   cx,cx
c0001f29:	75 92                	jne    c0001ebd <get_xfileinfo+0x2c>
c0001f2b:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0001f30:	31 c0                	xor    eax,eax
c0001f32:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0001f36:	31 d2                	xor    edx,edx
c0001f38:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c0001f3b:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c0001f3e:	80 e1 10             	and    cl,0x10
c0001f41:	75 08                	jne    c0001f4b <get_xfileinfo+0xba>
c0001f43:	8d 46 38             	lea    eax,[esi+0x38]
c0001f46:	e8 68 fa ff ff       	call   c00019b3 <ld_qword>
c0001f4b:	89 03                	mov    DWORD PTR [ebx],eax
c0001f4d:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001f50:	8d 46 0c             	lea    eax,[esi+0xc]
c0001f53:	e8 36 fa ff ff       	call   c000198e <ld_word>
c0001f58:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0001f5c:	8d 46 0e             	lea    eax,[esi+0xe]
c0001f5f:	e8 2a fa ff ff       	call   c000198e <ld_word>
c0001f64:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0001f68:	83 c4 0c             	add    esp,0xc
c0001f6b:	5b                   	pop    ebx
c0001f6c:	5e                   	pop    esi
c0001f6d:	5f                   	pop    edi
c0001f6e:	5d                   	pop    ebp
c0001f6f:	c3                   	ret    

c0001f70 <get_ldnumber>:
c0001f70:	8b 10                	mov    edx,DWORD PTR [eax]
c0001f72:	85 d2                	test   edx,edx
c0001f74:	74 14                	je     c0001f8a <get_ldnumber+0x1a>
c0001f76:	56                   	push   esi
c0001f77:	53                   	push   ebx
c0001f78:	89 d3                	mov    ebx,edx
c0001f7a:	43                   	inc    ebx
c0001f7b:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0001f7e:	80 f9 1f             	cmp    cl,0x1f
c0001f81:	76 0d                	jbe    c0001f90 <get_ldnumber+0x20>
c0001f83:	80 f9 3a             	cmp    cl,0x3a
c0001f86:	75 f2                	jne    c0001f7a <get_ldnumber+0xa>
c0001f88:	eb 0a                	jmp    c0001f94 <get_ldnumber+0x24>
c0001f8a:	83 c9 ff             	or     ecx,0xffffffff
c0001f8d:	89 c8                	mov    eax,ecx
c0001f8f:	c3                   	ret    
c0001f90:	31 c9                	xor    ecx,ecx
c0001f92:	eb 24                	jmp    c0001fb8 <get_ldnumber+0x48>
c0001f94:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0001f97:	8d 4e d0             	lea    ecx,[esi-0x30]
c0001f9a:	80 f9 09             	cmp    cl,0x9
c0001f9d:	77 16                	ja     c0001fb5 <get_ldnumber+0x45>
c0001f9f:	83 c2 02             	add    edx,0x2
c0001fa2:	83 c9 ff             	or     ecx,0xffffffff
c0001fa5:	39 d3                	cmp    ebx,edx
c0001fa7:	75 0f                	jne    c0001fb8 <get_ldnumber+0x48>
c0001fa9:	89 f2                	mov    edx,esi
c0001fab:	89 18                	mov    DWORD PTR [eax],ebx
c0001fad:	0f be ca             	movsx  ecx,dl
c0001fb0:	83 e9 30             	sub    ecx,0x30
c0001fb3:	eb 03                	jmp    c0001fb8 <get_ldnumber+0x48>
c0001fb5:	83 c9 ff             	or     ecx,0xffffffff
c0001fb8:	89 c8                	mov    eax,ecx
c0001fba:	5b                   	pop    ebx
c0001fbb:	5e                   	pop    esi
c0001fbc:	c3                   	ret    

c0001fbd <crc32>:
c0001fbd:	56                   	push   esi
c0001fbe:	89 d6                	mov    esi,edx
c0001fc0:	53                   	push   ebx
c0001fc1:	b2 01                	mov    dl,0x1
c0001fc3:	bb 08 00 00 00       	mov    ebx,0x8
c0001fc8:	89 f1                	mov    ecx,esi
c0001fca:	84 d1                	test   cl,dl
c0001fcc:	0f 95 c1             	setne  cl
c0001fcf:	0f b6 c9             	movzx  ecx,cl
c0001fd2:	31 c1                	xor    ecx,eax
c0001fd4:	89 c8                	mov    eax,ecx
c0001fd6:	d1 e8                	shr    eax,1
c0001fd8:	80 e1 01             	and    cl,0x1
c0001fdb:	74 05                	je     c0001fe2 <crc32+0x25>
c0001fdd:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0001fe2:	d1 e2                	shl    edx,1
c0001fe4:	4b                   	dec    ebx
c0001fe5:	75 e1                	jne    c0001fc8 <crc32+0xb>
c0001fe7:	5b                   	pop    ebx
c0001fe8:	5e                   	pop    esi
c0001fe9:	c3                   	ret    

c0001fea <test_gpt_header>:
c0001fea:	55                   	push   ebp
c0001feb:	b9 10 00 00 00       	mov    ecx,0x10
c0001ff0:	57                   	push   edi
c0001ff1:	ba a0 f2 01 c0       	mov    edx,0xc001f2a0
c0001ff6:	56                   	push   esi
c0001ff7:	31 ff                	xor    edi,edi
c0001ff9:	53                   	push   ebx
c0001ffa:	89 c3                	mov    ebx,eax
c0001ffc:	e8 2c fa ff ff       	call   c0001a2d <mem_cmp>
c0002001:	85 c0                	test   eax,eax
c0002003:	75 55                	jne    c000205a <test_gpt_header+0x70>
c0002005:	89 c7                	mov    edi,eax
c0002007:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c000200c:	83 ce ff             	or     esi,0xffffffff
c000200f:	31 d2                	xor    edx,edx
c0002011:	83 fd 03             	cmp    ebp,0x3
c0002014:	76 05                	jbe    c000201b <test_gpt_header+0x31>
c0002016:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c000201b:	89 f0                	mov    eax,esi
c000201d:	45                   	inc    ebp
c000201e:	e8 9a ff ff ff       	call   c0001fbd <crc32>
c0002023:	83 fd 4c             	cmp    ebp,0x4c
c0002026:	89 c6                	mov    esi,eax
c0002028:	75 e5                	jne    c000200f <test_gpt_header+0x25>
c000202a:	8d 43 10             	lea    eax,[ebx+0x10]
c000202d:	f7 d6                	not    esi
c000202f:	e8 67 f9 ff ff       	call   c000199b <ld_dword>
c0002034:	39 c6                	cmp    esi,eax
c0002036:	75 22                	jne    c000205a <test_gpt_header+0x70>
c0002038:	8d 43 54             	lea    eax,[ebx+0x54]
c000203b:	e8 5b f9 ff ff       	call   c000199b <ld_dword>
c0002040:	83 c0 80             	add    eax,0xffffff80
c0002043:	75 15                	jne    c000205a <test_gpt_header+0x70>
c0002045:	8d 43 50             	lea    eax,[ebx+0x50]
c0002048:	e8 4e f9 ff ff       	call   c000199b <ld_dword>
c000204d:	3d 80 00 00 00       	cmp    eax,0x80
c0002052:	0f 96 c0             	setbe  al
c0002055:	0f b6 c0             	movzx  eax,al
c0002058:	89 c7                	mov    edi,eax
c000205a:	5b                   	pop    ebx
c000205b:	89 f8                	mov    eax,edi
c000205d:	5e                   	pop    esi
c000205e:	5f                   	pop    edi
c000205f:	5d                   	pop    ebp
c0002060:	c3                   	ret    

c0002061 <make_rand>:
c0002061:	56                   	push   esi
c0002062:	85 c0                	test   eax,eax
c0002064:	53                   	push   ebx
c0002065:	75 05                	jne    c000206c <make_rand+0xb>
c0002067:	b8 01 00 00 00       	mov    eax,0x1
c000206c:	01 d1                	add    ecx,edx
c000206e:	bb 08 00 00 00       	mov    ebx,0x8
c0002073:	89 c6                	mov    esi,eax
c0002075:	d1 e8                	shr    eax,1
c0002077:	83 e6 01             	and    esi,0x1
c000207a:	85 f6                	test   esi,esi
c000207c:	74 05                	je     c0002083 <make_rand+0x22>
c000207e:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002083:	4b                   	dec    ebx
c0002084:	75 ed                	jne    c0002073 <make_rand+0x12>
c0002086:	42                   	inc    edx
c0002087:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c000208a:	39 ca                	cmp    edx,ecx
c000208c:	75 e0                	jne    c000206e <make_rand+0xd>
c000208e:	5b                   	pop    ebx
c000208f:	5e                   	pop    esi
c0002090:	c3                   	ret    

c0002091 <validate>:
c0002091:	56                   	push   esi
c0002092:	53                   	push   ebx
c0002093:	89 d6                	mov    esi,edx
c0002095:	51                   	push   ecx
c0002096:	85 c0                	test   eax,eax
c0002098:	75 09                	jne    c00020a3 <validate+0x12>
c000209a:	b8 09 00 00 00       	mov    eax,0x9
c000209f:	31 c9                	xor    ecx,ecx
c00020a1:	eb 2f                	jmp    c00020d2 <validate+0x41>
c00020a3:	89 c3                	mov    ebx,eax
c00020a5:	8b 00                	mov    eax,DWORD PTR [eax]
c00020a7:	85 c0                	test   eax,eax
c00020a9:	74 ef                	je     c000209a <validate+0x9>
c00020ab:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00020ae:	74 ea                	je     c000209a <validate+0x9>
c00020b0:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c00020b4:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c00020b8:	75 e0                	jne    c000209a <validate+0x9>
c00020ba:	83 ec 0c             	sub    esp,0xc
c00020bd:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00020c1:	50                   	push   eax
c00020c2:	e8 76 f8 ff ff       	call   c000193d <disk_status>
c00020c7:	83 c4 10             	add    esp,0x10
c00020ca:	a8 01                	test   al,0x1
c00020cc:	75 cc                	jne    c000209a <validate+0x9>
c00020ce:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00020d0:	31 c0                	xor    eax,eax
c00020d2:	89 0e                	mov    DWORD PTR [esi],ecx
c00020d4:	5a                   	pop    edx
c00020d5:	5b                   	pop    ebx
c00020d6:	5e                   	pop    esi
c00020d7:	c3                   	ret    

c00020d8 <sync_window>:
c00020d8:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00020dc:	0f 84 85 00 00 00    	je     c0002167 <sync_window+0x8f>
c00020e2:	55                   	push   ebp
c00020e3:	8d 68 54             	lea    ebp,[eax+0x54]
c00020e6:	57                   	push   edi
c00020e7:	56                   	push   esi
c00020e8:	53                   	push   ebx
c00020e9:	89 c3                	mov    ebx,eax
c00020eb:	83 ec 28             	sub    esp,0x28
c00020ee:	6a 01                	push   0x1
c00020f0:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00020f3:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00020f6:	55                   	push   ebp
c00020f7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00020fb:	50                   	push   eax
c00020fc:	e8 58 f8 ff ff       	call   c0001959 <disk_write>
c0002101:	83 c4 20             	add    esp,0x20
c0002104:	ba 01 00 00 00       	mov    edx,0x1
c0002109:	85 c0                	test   eax,eax
c000210b:	75 50                	jne    c000215d <sync_window+0x85>
c000210d:	31 ff                	xor    edi,edi
c000210f:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c0002112:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0002116:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000211a:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c000211d:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c0002120:	89 c6                	mov    esi,eax
c0002122:	89 d7                	mov    edi,edx
c0002124:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c0002127:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000212b:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c000212e:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0002132:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0002136:	73 23                	jae    c000215b <sync_window+0x83>
c0002138:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c000213c:	75 1d                	jne    c000215b <sync_window+0x83>
c000213e:	83 ec 0c             	sub    esp,0xc
c0002141:	6a 01                	push   0x1
c0002143:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0002147:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000214b:	52                   	push   edx
c000214c:	50                   	push   eax
c000214d:	55                   	push   ebp
c000214e:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002152:	50                   	push   eax
c0002153:	e8 01 f8 ff ff       	call   c0001959 <disk_write>
c0002158:	83 c4 20             	add    esp,0x20
c000215b:	31 d2                	xor    edx,edx
c000215d:	83 c4 1c             	add    esp,0x1c
c0002160:	89 d0                	mov    eax,edx
c0002162:	5b                   	pop    ebx
c0002163:	5e                   	pop    esi
c0002164:	5f                   	pop    edi
c0002165:	5d                   	pop    ebp
c0002166:	c3                   	ret    
c0002167:	31 d2                	xor    edx,edx
c0002169:	89 d0                	mov    eax,edx
c000216b:	c3                   	ret    

c000216c <move_window>:
c000216c:	56                   	push   esi
c000216d:	53                   	push   ebx
c000216e:	89 c3                	mov    ebx,eax
c0002170:	83 ec 14             	sub    esp,0x14
c0002173:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002176:	75 07                	jne    c000217f <move_window+0x13>
c0002178:	31 f6                	xor    esi,esi
c000217a:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c000217d:	74 59                	je     c00021d8 <move_window+0x6c>
c000217f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002183:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002187:	89 d8                	mov    eax,ebx
c0002189:	e8 4a ff ff ff       	call   c00020d8 <sync_window>
c000218e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002192:	89 c6                	mov    esi,eax
c0002194:	85 c0                	test   eax,eax
c0002196:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000219a:	75 3c                	jne    c00021d8 <move_window+0x6c>
c000219c:	83 ec 0c             	sub    esp,0xc
c000219f:	8d 43 54             	lea    eax,[ebx+0x54]
c00021a2:	6a 01                	push   0x1
c00021a4:	51                   	push   ecx
c00021a5:	52                   	push   edx
c00021a6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00021aa:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c00021ae:	50                   	push   eax
c00021af:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00021b3:	50                   	push   eax
c00021b4:	e8 8a f7 ff ff       	call   c0001943 <disk_read>
c00021b9:	83 c4 20             	add    esp,0x20
c00021bc:	85 c0                	test   eax,eax
c00021be:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00021c2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00021c6:	74 0a                	je     c00021d2 <move_window+0x66>
c00021c8:	83 ca ff             	or     edx,0xffffffff
c00021cb:	be 01 00 00 00       	mov    esi,0x1
c00021d0:	89 d1                	mov    ecx,edx
c00021d2:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c00021d5:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c00021d8:	89 f0                	mov    eax,esi
c00021da:	83 c4 14             	add    esp,0x14
c00021dd:	5b                   	pop    ebx
c00021de:	5e                   	pop    esi
c00021df:	c3                   	ret    

c00021e0 <check_fs>:
c00021e0:	53                   	push   ebx
c00021e1:	89 c3                	mov    ebx,eax
c00021e3:	83 ec 08             	sub    esp,0x8
c00021e6:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00021ea:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00021f1:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00021f8:	e8 6f ff ff ff       	call   c000216c <move_window>
c00021fd:	ba 04 00 00 00       	mov    edx,0x4
c0002202:	85 c0                	test   eax,eax
c0002204:	0f 85 89 00 00 00    	jne    c0002293 <check_fs+0xb3>
c000220a:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c0002210:	e8 79 f7 ff ff       	call   c000198e <ld_word>
c0002215:	ba 03 00 00 00       	mov    edx,0x3
c000221a:	66 3d 55 aa          	cmp    ax,0xaa55
c000221e:	75 73                	jne    c0002293 <check_fs+0xb3>
c0002220:	ba c0 f3 01 c0       	mov    edx,0xc001f3c0
c0002225:	8d 43 54             	lea    eax,[ebx+0x54]
c0002228:	b9 0b 00 00 00       	mov    ecx,0xb
c000222d:	e8 fb f7 ff ff       	call   c0001a2d <mem_cmp>
c0002232:	ba 01 00 00 00       	mov    edx,0x1
c0002237:	85 c0                	test   eax,eax
c0002239:	74 58                	je     c0002293 <check_fs+0xb3>
c000223b:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c000223e:	8d 50 18             	lea    edx,[eax+0x18]
c0002241:	80 fa 01             	cmp    dl,0x1
c0002244:	76 09                	jbe    c000224f <check_fs+0x6f>
c0002246:	ba 02 00 00 00       	mov    edx,0x2
c000224b:	3c eb                	cmp    al,0xeb
c000224d:	75 44                	jne    c0002293 <check_fs+0xb3>
c000224f:	ba 74 1b 02 c0       	mov    edx,0xc0021b74
c0002254:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c000225a:	b9 03 00 00 00       	mov    ecx,0x3
c000225f:	e8 c9 f7 ff ff       	call   c0001a2d <mem_cmp>
c0002264:	31 d2                	xor    edx,edx
c0002266:	85 c0                	test   eax,eax
c0002268:	74 29                	je     c0002293 <check_fs+0xb3>
c000226a:	ba cc f3 01 c0       	mov    edx,0xc001f3cc
c000226f:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002275:	b9 05 00 00 00       	mov    ecx,0x5
c000227a:	e8 ae f7 ff ff       	call   c0001a2d <mem_cmp>
c000227f:	31 d2                	xor    edx,edx
c0002281:	85 c0                	test   eax,eax
c0002283:	74 0e                	je     c0002293 <check_fs+0xb3>
c0002285:	31 d2                	xor    edx,edx
c0002287:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c000228e:	0f 95 c2             	setne  dl
c0002291:	01 d2                	add    edx,edx
c0002293:	89 d0                	mov    eax,edx
c0002295:	83 c4 08             	add    esp,0x8
c0002298:	5b                   	pop    ebx
c0002299:	c3                   	ret    

c000229a <find_volume>:
c000229a:	55                   	push   ebp
c000229b:	31 c9                	xor    ecx,ecx
c000229d:	57                   	push   edi
c000229e:	56                   	push   esi
c000229f:	89 d6                	mov    esi,edx
c00022a1:	53                   	push   ebx
c00022a2:	31 d2                	xor    edx,edx
c00022a4:	83 ec 3c             	sub    esp,0x3c
c00022a7:	89 c3                	mov    ebx,eax
c00022a9:	e8 32 ff ff ff       	call   c00021e0 <check_fs>
c00022ae:	83 f8 02             	cmp    eax,0x2
c00022b1:	74 0e                	je     c00022c1 <find_volume+0x27>
c00022b3:	0f 87 5d 01 00 00    	ja     c0002416 <find_volume+0x17c>
c00022b9:	85 f6                	test   esi,esi
c00022bb:	0f 84 55 01 00 00    	je     c0002416 <find_volume+0x17c>
c00022c1:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c00022c8:	0f 85 dd 00 00 00    	jne    c00023ab <find_volume+0x111>
c00022ce:	31 c9                	xor    ecx,ecx
c00022d0:	ba 01 00 00 00       	mov    edx,0x1
c00022d5:	89 d8                	mov    eax,ebx
c00022d7:	e8 90 fe ff ff       	call   c000216c <move_window>
c00022dc:	85 c0                	test   eax,eax
c00022de:	74 0a                	je     c00022ea <find_volume+0x50>
c00022e0:	b8 04 00 00 00       	mov    eax,0x4
c00022e5:	e9 2c 01 00 00       	jmp    c0002416 <find_volume+0x17c>
c00022ea:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00022ed:	89 e8                	mov    eax,ebp
c00022ef:	e8 f6 fc ff ff       	call   c0001fea <test_gpt_header>
c00022f4:	85 c0                	test   eax,eax
c00022f6:	75 0a                	jne    c0002302 <find_volume+0x68>
c00022f8:	b8 03 00 00 00       	mov    eax,0x3
c00022fd:	e9 14 01 00 00       	jmp    c0002416 <find_volume+0x17c>
c0002302:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c0002308:	e8 8e f6 ff ff       	call   c000199b <ld_dword>
c000230d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002311:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c0002317:	e8 97 f6 ff ff       	call   c00019b3 <ld_qword>
c000231c:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0002324:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002328:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000232c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002334:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002338:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c000233c:	74 ba                	je     c00022f8 <find_volume+0x5e>
c000233e:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002342:	31 c9                	xor    ecx,ecx
c0002344:	c1 e7 07             	shl    edi,0x7
c0002347:	89 d8                	mov    eax,ebx
c0002349:	89 fa                	mov    edx,edi
c000234b:	c1 ea 09             	shr    edx,0x9
c000234e:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0002352:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002356:	e8 11 fe ff ff       	call   c000216c <move_window>
c000235b:	85 c0                	test   eax,eax
c000235d:	75 81                	jne    c00022e0 <find_volume+0x46>
c000235f:	81 e7 80 01 00 00    	and    edi,0x180
c0002365:	b9 10 00 00 00       	mov    ecx,0x10
c000236a:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c000236e:	ba b0 f3 01 c0       	mov    edx,0xc001f3b0
c0002373:	e8 b5 f6 ff ff       	call   c0001a2d <mem_cmp>
c0002378:	85 c0                	test   eax,eax
c000237a:	75 29                	jne    c00023a5 <find_volume+0x10b>
c000237c:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002380:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002384:	e8 2a f6 ff ff       	call   c00019b3 <ld_qword>
c0002389:	89 d1                	mov    ecx,edx
c000238b:	89 c2                	mov    edx,eax
c000238d:	89 d8                	mov    eax,ebx
c000238f:	e8 4c fe ff ff       	call   c00021e0 <check_fs>
c0002394:	85 f6                	test   esi,esi
c0002396:	75 07                	jne    c000239f <find_volume+0x105>
c0002398:	83 f8 01             	cmp    eax,0x1
c000239b:	77 08                	ja     c00023a5 <find_volume+0x10b>
c000239d:	eb 77                	jmp    c0002416 <find_volume+0x17c>
c000239f:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00023a3:	74 71                	je     c0002416 <find_volume+0x17c>
c00023a5:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00023a9:	eb 89                	jmp    c0002334 <find_volume+0x9a>
c00023ab:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00023af:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c00023b5:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c00023bb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00023bf:	89 cd                	mov    ebp,ecx
c00023c1:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00023c5:	89 f8                	mov    eax,edi
c00023c7:	83 c7 10             	add    edi,0x10
c00023ca:	e8 cc f5 ff ff       	call   c000199b <ld_dword>
c00023cf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00023d3:	89 01                	mov    DWORD PTR [ecx],eax
c00023d5:	83 c1 04             	add    ecx,0x4
c00023d8:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00023dc:	75 e3                	jne    c00023c1 <find_volume+0x127>
c00023de:	31 ff                	xor    edi,edi
c00023e0:	85 f6                	test   esi,esi
c00023e2:	74 03                	je     c00023e7 <find_volume+0x14d>
c00023e4:	8d 7e ff             	lea    edi,[esi-0x1]
c00023e7:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00023eb:	85 d2                	test   edx,edx
c00023ed:	74 14                	je     c0002403 <find_volume+0x169>
c00023ef:	31 c9                	xor    ecx,ecx
c00023f1:	89 d8                	mov    eax,ebx
c00023f3:	e8 e8 fd ff ff       	call   c00021e0 <check_fs>
c00023f8:	83 f8 01             	cmp    eax,0x1
c00023fb:	76 19                	jbe    c0002416 <find_volume+0x17c>
c00023fd:	85 f6                	test   esi,esi
c00023ff:	74 0f                	je     c0002410 <find_volume+0x176>
c0002401:	eb 13                	jmp    c0002416 <find_volume+0x17c>
c0002403:	85 f6                	test   esi,esi
c0002405:	0f 85 ed fe ff ff    	jne    c00022f8 <find_volume+0x5e>
c000240b:	b8 03 00 00 00       	mov    eax,0x3
c0002410:	47                   	inc    edi
c0002411:	83 ff 03             	cmp    edi,0x3
c0002414:	76 d1                	jbe    c00023e7 <find_volume+0x14d>
c0002416:	83 c4 3c             	add    esp,0x3c
c0002419:	5b                   	pop    ebx
c000241a:	5e                   	pop    esi
c000241b:	5f                   	pop    edi
c000241c:	5d                   	pop    ebp
c000241d:	c3                   	ret    

c000241e <mount_volume>:
c000241e:	55                   	push   ebp
c000241f:	57                   	push   edi
c0002420:	89 cf                	mov    edi,ecx
c0002422:	56                   	push   esi
c0002423:	53                   	push   ebx
c0002424:	bb 0b 00 00 00       	mov    ebx,0xb
c0002429:	83 ec 3c             	sub    esp,0x3c
c000242c:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0002432:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002436:	e8 35 fb ff ff       	call   c0001f70 <get_ldnumber>
c000243b:	85 c0                	test   eax,eax
c000243d:	0f 88 3a 05 00 00    	js     c000297d <mount_volume+0x55f>
c0002443:	8b 2c 85 60 30 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffdcfa0]
c000244a:	89 c6                	mov    esi,eax
c000244c:	bb 0c 00 00 00       	mov    ebx,0xc
c0002451:	85 ed                	test   ebp,ebp
c0002453:	0f 84 24 05 00 00    	je     c000297d <mount_volume+0x55f>
c0002459:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000245d:	83 e7 fe             	and    edi,0xfffffffe
c0002460:	89 2a                	mov    DWORD PTR [edx],ebp
c0002462:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c0002466:	74 32                	je     c000249a <mount_volume+0x7c>
c0002468:	83 ec 0c             	sub    esp,0xc
c000246b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c000246f:	50                   	push   eax
c0002470:	e8 c8 f4 ff ff       	call   c000193d <disk_status>
c0002475:	83 c4 10             	add    esp,0x10
c0002478:	a8 01                	test   al,0x1
c000247a:	75 1e                	jne    c000249a <mount_volume+0x7c>
c000247c:	31 db                	xor    ebx,ebx
c000247e:	89 f9                	mov    ecx,edi
c0002480:	84 c9                	test   cl,cl
c0002482:	0f 84 f5 04 00 00    	je     c000297d <mount_volume+0x55f>
c0002488:	a8 04                	test   al,0x4
c000248a:	0f 84 ed 04 00 00    	je     c000297d <mount_volume+0x55f>
c0002490:	bb 0a 00 00 00       	mov    ebx,0xa
c0002495:	e9 e3 04 00 00       	jmp    c000297d <mount_volume+0x55f>
c000249a:	83 ec 0c             	sub    esp,0xc
c000249d:	89 f0                	mov    eax,esi
c000249f:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c00024a3:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c00024a6:	0f b6 f0             	movzx  esi,al
c00024a9:	bb 03 00 00 00       	mov    ebx,0x3
c00024ae:	56                   	push   esi
c00024af:	e8 8c f4 ff ff       	call   c0001940 <disk_initialize>
c00024b4:	83 c4 10             	add    esp,0x10
c00024b7:	a8 01                	test   al,0x1
c00024b9:	0f 85 be 04 00 00    	jne    c000297d <mount_volume+0x55f>
c00024bf:	89 f9                	mov    ecx,edi
c00024c1:	84 c9                	test   cl,cl
c00024c3:	74 04                	je     c00024c9 <mount_volume+0xab>
c00024c5:	a8 04                	test   al,0x4
c00024c7:	75 c7                	jne    c0002490 <mount_volume+0x72>
c00024c9:	31 d2                	xor    edx,edx
c00024cb:	89 e8                	mov    eax,ebp
c00024cd:	e8 c8 fd ff ff       	call   c000229a <find_volume>
c00024d2:	83 f8 04             	cmp    eax,0x4
c00024d5:	75 0a                	jne    c00024e1 <mount_volume+0xc3>
c00024d7:	bb 01 00 00 00       	mov    ebx,0x1
c00024dc:	e9 9c 04 00 00       	jmp    c000297d <mount_volume+0x55f>
c00024e1:	83 f8 01             	cmp    eax,0x1
c00024e4:	76 0a                	jbe    c00024f0 <mount_volume+0xd2>
c00024e6:	bb 0d 00 00 00       	mov    ebx,0xd
c00024eb:	e9 8d 04 00 00       	jmp    c000297d <mount_volume+0x55f>
c00024f0:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00024f3:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00024f6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00024fa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00024fe:	75 17                	jne    c0002517 <mount_volume+0xf9>
c0002500:	b8 0b 00 00 00       	mov    eax,0xb
c0002505:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c000250a:	75 da                	jne    c00024e6 <mount_volume+0xc8>
c000250c:	40                   	inc    eax
c000250d:	83 f8 40             	cmp    eax,0x40
c0002510:	75 f3                	jne    c0002505 <mount_volume+0xe7>
c0002512:	e9 5a 02 00 00       	jmp    c0002771 <mount_volume+0x353>
c0002517:	8d 45 5f             	lea    eax,[ebp+0x5f]
c000251a:	e8 6f f4 ff ff       	call   c000198e <ld_word>
c000251f:	66 3d 00 02          	cmp    ax,0x200
c0002523:	75 c1                	jne    c00024e6 <mount_volume+0xc8>
c0002525:	8d 45 6a             	lea    eax,[ebp+0x6a]
c0002528:	e8 61 f4 ff ff       	call   c000198e <ld_word>
c000252d:	0f b7 c0             	movzx  eax,ax
c0002530:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002534:	85 c0                	test   eax,eax
c0002536:	75 0c                	jne    c0002544 <mount_volume+0x126>
c0002538:	8d 45 78             	lea    eax,[ebp+0x78]
c000253b:	e8 5b f4 ff ff       	call   c000199b <ld_dword>
c0002540:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002544:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002548:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c000254b:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c000254e:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0002552:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002555:	48                   	dec    eax
c0002556:	3c 01                	cmp    al,0x1
c0002558:	77 8c                	ja     c00024e6 <mount_volume+0xc8>
c000255a:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c000255e:	89 c3                	mov    ebx,eax
c0002560:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002564:	66 85 c0             	test   ax,ax
c0002567:	0f 84 79 ff ff ff    	je     c00024e6 <mount_volume+0xc8>
c000256d:	8d 40 ff             	lea    eax,[eax-0x1]
c0002570:	85 d8                	test   eax,ebx
c0002572:	0f 85 6e ff ff ff    	jne    c00024e6 <mount_volume+0xc8>
c0002578:	8d 45 65             	lea    eax,[ebp+0x65]
c000257b:	e8 0e f4 ff ff       	call   c000198e <ld_word>
c0002580:	89 c7                	mov    edi,eax
c0002582:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002586:	a8 0f                	test   al,0xf
c0002588:	0f 85 58 ff ff ff    	jne    c00024e6 <mount_volume+0xc8>
c000258e:	8d 45 67             	lea    eax,[ebp+0x67]
c0002591:	e8 f8 f3 ff ff       	call   c000198e <ld_word>
c0002596:	0f b7 f0             	movzx  esi,ax
c0002599:	85 f6                	test   esi,esi
c000259b:	75 0a                	jne    c00025a7 <mount_volume+0x189>
c000259d:	8d 45 74             	lea    eax,[ebp+0x74]
c00025a0:	e8 f6 f3 ff ff       	call   c000199b <ld_dword>
c00025a5:	89 c6                	mov    esi,eax
c00025a7:	8d 45 62             	lea    eax,[ebp+0x62]
c00025aa:	e8 df f3 ff ff       	call   c000198e <ld_word>
c00025af:	66 85 c0             	test   ax,ax
c00025b2:	0f 84 2e ff ff ff    	je     c00024e6 <mount_volume+0xc8>
c00025b8:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c00025bd:	0f b7 c8             	movzx  ecx,ax
c00025c0:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c00025c5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00025c9:	89 fa                	mov    edx,edi
c00025cb:	66 c1 ea 04          	shr    dx,0x4
c00025cf:	0f b7 d2             	movzx  edx,dx
c00025d2:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c00025d6:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00025d9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00025dd:	39 c6                	cmp    esi,eax
c00025df:	0f 82 01 ff ff ff    	jb     c00024e6 <mount_volume+0xc8>
c00025e5:	29 c6                	sub    esi,eax
c00025e7:	31 d2                	xor    edx,edx
c00025e9:	89 f0                	mov    eax,esi
c00025eb:	f7 f3                	div    ebx
c00025ed:	39 de                	cmp    esi,ebx
c00025ef:	0f 82 f1 fe ff ff    	jb     c00024e6 <mount_volume+0xc8>
c00025f5:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00025fa:	0f 87 e6 fe ff ff    	ja     c00024e6 <mount_volume+0xc8>
c0002600:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002605:	0f 86 63 03 00 00    	jbe    c000296e <mount_volume+0x550>
c000260b:	bb 03 00 00 00       	mov    ebx,0x3
c0002610:	8d 70 02             	lea    esi,[eax+0x2]
c0002613:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002617:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000261b:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c000261e:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002621:	31 d2                	xor    edx,edx
c0002623:	89 c8                	mov    eax,ecx
c0002625:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c0002628:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000262c:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002630:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0002634:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0002638:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c000263b:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c000263e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002642:	31 d2                	xor    edx,edx
c0002644:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002648:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000264c:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c000264f:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002652:	83 fb 03             	cmp    ebx,0x3
c0002655:	75 2b                	jne    c0002682 <mount_volume+0x264>
c0002657:	8d 45 7e             	lea    eax,[ebp+0x7e]
c000265a:	e8 2f f3 ff ff       	call   c000198e <ld_word>
c000265f:	66 09 c7             	or     di,ax
c0002662:	0f 85 7e fe ff ff    	jne    c00024e6 <mount_volume+0xc8>
c0002668:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c000266e:	c1 e6 02             	shl    esi,0x2
c0002671:	e8 25 f3 ff ff       	call   c000199b <ld_dword>
c0002676:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c000267d:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002680:	eb 30                	jmp    c00026b2 <mount_volume+0x294>
c0002682:	66 85 ff             	test   di,di
c0002685:	0f 84 5b fe ff ff    	je     c00024e6 <mount_volume+0xc8>
c000268b:	31 d2                	xor    edx,edx
c000268d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002691:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002695:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0002699:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000269c:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c000269f:	83 fb 02             	cmp    ebx,0x2
c00026a2:	75 04                	jne    c00026a8 <mount_volume+0x28a>
c00026a4:	01 f6                	add    esi,esi
c00026a6:	eb 0a                	jmp    c00026b2 <mount_volume+0x294>
c00026a8:	8d 04 76             	lea    eax,[esi+esi*2]
c00026ab:	83 e6 01             	and    esi,0x1
c00026ae:	d1 e8                	shr    eax,1
c00026b0:	01 c6                	add    esi,eax
c00026b2:	81 c6 ff 01 00 00    	add    esi,0x1ff
c00026b8:	c1 ee 09             	shr    esi,0x9
c00026bb:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00026bf:	0f 87 21 fe ff ff    	ja     c00024e6 <mount_volume+0xc8>
c00026c5:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c00026cc:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00026d3:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c00026d7:	83 fb 03             	cmp    ebx,0x3
c00026da:	75 7a                	jne    c0002756 <mount_volume+0x338>
c00026dc:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c00026e2:	e8 a7 f2 ff ff       	call   c000198e <ld_word>
c00026e7:	66 48                	dec    ax
c00026e9:	75 6b                	jne    c0002756 <mount_volume+0x338>
c00026eb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00026ef:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00026f3:	83 c2 01             	add    edx,0x1
c00026f6:	89 e8                	mov    eax,ebp
c00026f8:	83 d1 00             	adc    ecx,0x0
c00026fb:	e8 6c fa ff ff       	call   c000216c <move_window>
c0002700:	85 c0                	test   eax,eax
c0002702:	75 52                	jne    c0002756 <mount_volume+0x338>
c0002704:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c0002708:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c000270e:	e8 7b f2 ff ff       	call   c000198e <ld_word>
c0002713:	66 3d 55 aa          	cmp    ax,0xaa55
c0002717:	75 3d                	jne    c0002756 <mount_volume+0x338>
c0002719:	8d 45 54             	lea    eax,[ebp+0x54]
c000271c:	e8 7a f2 ff ff       	call   c000199b <ld_dword>
c0002721:	3d 52 52 61 41       	cmp    eax,0x41615252
c0002726:	75 2e                	jne    c0002756 <mount_volume+0x338>
c0002728:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c000272e:	e8 68 f2 ff ff       	call   c000199b <ld_dword>
c0002733:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002738:	75 1c                	jne    c0002756 <mount_volume+0x338>
c000273a:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c0002740:	e8 56 f2 ff ff       	call   c000199b <ld_dword>
c0002745:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0002748:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c000274e:	e8 48 f2 ff ff       	call   c000199b <ld_dword>
c0002753:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002756:	66 a1 40 30 02 c0    	mov    ax,ds:0xc0023040
c000275c:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000275f:	40                   	inc    eax
c0002760:	31 db                	xor    ebx,ebx
c0002762:	66 a3 40 30 02 c0    	mov    ds:0xc0023040,ax
c0002768:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c000276c:	e9 0c 02 00 00       	jmp    c000297d <mount_volume+0x55f>
c0002771:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002777:	e8 12 f2 ff ff       	call   c000198e <ld_word>
c000277c:	66 3d 00 01          	cmp    ax,0x100
c0002780:	0f 85 60 fd ff ff    	jne    c00024e6 <mount_volume+0xc8>
c0002786:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c000278d:	0f 85 53 fd ff ff    	jne    c00024e6 <mount_volume+0xc8>
c0002793:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002799:	e8 15 f2 ff ff       	call   c00019b3 <ld_qword>
c000279e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00027a2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00027a6:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c00027ac:	e8 ea f1 ff ff       	call   c000199b <ld_dword>
c00027b1:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c00027b4:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c00027ba:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c00027bd:	fe c8                	dec    al
c00027bf:	0f 85 21 fd ff ff    	jne    c00024e6 <mount_volume+0xc8>
c00027c5:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c00027cc:	bb 01 00 00 00       	mov    ebx,0x1
c00027d1:	d3 e3                	shl    ebx,cl
c00027d3:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c00027d7:	66 85 db             	test   bx,bx
c00027da:	0f 84 06 fd ff ff    	je     c00024e6 <mount_volume+0xc8>
c00027e0:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c00027e6:	e8 b0 f1 ff ff       	call   c000199b <ld_dword>
c00027eb:	89 c6                	mov    esi,eax
c00027ed:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c00027f2:	0f 87 ee fc ff ff    	ja     c00024e6 <mount_volume+0xc8>
c00027f8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00027fc:	8d 40 02             	lea    eax,[eax+0x2]
c00027ff:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002802:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002805:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002809:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c000280c:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002812:	e8 84 f1 ff ff       	call   c000199b <ld_dword>
c0002817:	31 d2                	xor    edx,edx
c0002819:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000281d:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002821:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002825:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002829:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c000282c:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c000282f:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002835:	e8 61 f1 ff ff       	call   c000199b <ld_dword>
c000283a:	31 d2                	xor    edx,edx
c000283c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002840:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002844:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002848:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c000284b:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c000284e:	0f b7 c3             	movzx  eax,bx
c0002851:	31 d2                	xor    edx,edx
c0002853:	0f af f0             	imul   esi,eax
c0002856:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000285a:	89 f0                	mov    eax,esi
c000285c:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002860:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002864:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002868:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c000286c:	39 c1                	cmp    ecx,eax
c000286e:	89 df                	mov    edi,ebx
c0002870:	19 d7                	sbb    edi,edx
c0002872:	0f 82 6e fc ff ff    	jb     c00024e6 <mount_volume+0xc8>
c0002878:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c000287e:	31 db                	xor    ebx,ebx
c0002880:	e8 16 f1 ff ff       	call   c000199b <ld_dword>
c0002885:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c000288c:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000288f:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002897:	85 db                	test   ebx,ebx
c0002899:	75 39                	jne    c00028d4 <mount_volume+0x4b6>
c000289b:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000289f:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00028a3:	0f 86 3d fc ff ff    	jbe    c00024e6 <mount_volume+0xc8>
c00028a9:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c00028ac:	31 ff                	xor    edi,edi
c00028ae:	89 e8                	mov    eax,ebp
c00028b0:	e8 72 f3 ff ff       	call   c0001c27 <clst2sect>
c00028b5:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00028b9:	01 c6                	add    esi,eax
c00028bb:	89 e8                	mov    eax,ebp
c00028bd:	11 d7                	adc    edi,edx
c00028bf:	89 f2                	mov    edx,esi
c00028c1:	89 f9                	mov    ecx,edi
c00028c3:	e8 a4 f8 ff ff       	call   c000216c <move_window>
c00028c8:	85 c0                	test   eax,eax
c00028ca:	0f 85 07 fc ff ff    	jne    c00024d7 <mount_volume+0xb9>
c00028d0:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00028d4:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c00028d9:	74 0b                	je     c00028e6 <mount_volume+0x4c8>
c00028db:	83 c3 20             	add    ebx,0x20
c00028de:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00028e4:	eb b1                	jmp    c0002897 <mount_volume+0x479>
c00028e6:	8d 75 54             	lea    esi,[ebp+0x54]
c00028e9:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c00028ed:	e8 a9 f0 ff ff       	call   c000199b <ld_dword>
c00028f2:	89 c3                	mov    ebx,eax
c00028f4:	83 f8 01             	cmp    eax,0x1
c00028f7:	0f 86 e9 fb ff ff    	jbe    c00024e6 <mount_volume+0xc8>
c00028fd:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002900:	0f 86 e0 fb ff ff    	jbe    c00024e6 <mount_volume+0xc8>
c0002906:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002909:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000290d:	0f af c2             	imul   eax,edx
c0002910:	31 d2                	xor    edx,edx
c0002912:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002915:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002918:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c000291b:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c000291e:	31 c9                	xor    ecx,ecx
c0002920:	89 da                	mov    edx,ebx
c0002922:	89 e8                	mov    eax,ebp
c0002924:	c1 ea 07             	shr    edx,0x7
c0002927:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c000292a:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c000292d:	e8 3a f8 ff ff       	call   c000216c <move_window>
c0002932:	85 c0                	test   eax,eax
c0002934:	0f 85 9d fb ff ff    	jne    c00024d7 <mount_volume+0xb9>
c000293a:	89 d8                	mov    eax,ebx
c000293c:	83 e0 7f             	and    eax,0x7f
c000293f:	8d 04 86             	lea    eax,[esi+eax*4]
c0002942:	e8 54 f0 ff ff       	call   c000199b <ld_dword>
c0002947:	83 f8 ff             	cmp    eax,0xffffffff
c000294a:	74 0a                	je     c0002956 <mount_volume+0x538>
c000294c:	43                   	inc    ebx
c000294d:	39 d8                	cmp    eax,ebx
c000294f:	74 cd                	je     c000291e <mount_volume+0x500>
c0002951:	e9 90 fb ff ff       	jmp    c00024e6 <mount_volume+0xc8>
c0002956:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c000295d:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002964:	bb 04 00 00 00       	mov    ebx,0x4
c0002969:	e9 e8 fd ff ff       	jmp    c0002756 <mount_volume+0x338>
c000296e:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002973:	19 db                	sbb    ebx,ebx
c0002975:	83 c3 02             	add    ebx,0x2
c0002978:	e9 93 fc ff ff       	jmp    c0002610 <mount_volume+0x1f2>
c000297d:	83 c4 3c             	add    esp,0x3c
c0002980:	89 d8                	mov    eax,ebx
c0002982:	5b                   	pop    ebx
c0002983:	5e                   	pop    esi
c0002984:	5f                   	pop    edi
c0002985:	5d                   	pop    ebp
c0002986:	c3                   	ret    

c0002987 <find_bitmap>:
c0002987:	55                   	push   ebp
c0002988:	57                   	push   edi
c0002989:	89 c7                	mov    edi,eax
c000298b:	56                   	push   esi
c000298c:	8d 72 fe             	lea    esi,[edx-0x2]
c000298f:	53                   	push   ebx
c0002990:	83 ec 1c             	sub    esp,0x1c
c0002993:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002996:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000299a:	83 e8 02             	sub    eax,0x2
c000299d:	39 f0                	cmp    eax,esi
c000299f:	77 02                	ja     c00029a3 <find_bitmap+0x1c>
c00029a1:	31 f6                	xor    esi,esi
c00029a3:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c00029a7:	89 f3                	mov    ebx,esi
c00029a9:	31 ed                	xor    ebp,ebp
c00029ab:	31 c9                	xor    ecx,ecx
c00029ad:	89 da                	mov    edx,ebx
c00029af:	89 f8                	mov    eax,edi
c00029b1:	c1 ea 0c             	shr    edx,0xc
c00029b4:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c00029b7:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c00029ba:	e8 ad f7 ff ff       	call   c000216c <move_window>
c00029bf:	85 c0                	test   eax,eax
c00029c1:	75 68                	jne    c0002a2b <find_bitmap+0xa4>
c00029c3:	89 da                	mov    edx,ebx
c00029c5:	89 d9                	mov    ecx,ebx
c00029c7:	c1 ea 03             	shr    edx,0x3
c00029ca:	83 e1 07             	and    ecx,0x7
c00029cd:	b8 01 00 00 00       	mov    eax,0x1
c00029d2:	81 e2 ff 01 00 00    	and    edx,0x1ff
c00029d8:	d3 e0                	shl    eax,cl
c00029da:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c00029dd:	83 e9 02             	sub    ecx,0x2
c00029e0:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00029e4:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c00029e8:	43                   	inc    ebx
c00029e9:	21 c1                	and    ecx,eax
c00029eb:	d1 e0                	shl    eax,1
c00029ed:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c00029f1:	77 09                	ja     c00029fc <find_bitmap+0x75>
c00029f3:	31 db                	xor    ebx,ebx
c00029f5:	ba 00 02 00 00       	mov    edx,0x200
c00029fa:	31 c0                	xor    eax,eax
c00029fc:	84 c9                	test   cl,cl
c00029fe:	75 10                	jne    c0002a10 <find_bitmap+0x89>
c0002a00:	45                   	inc    ebp
c0002a01:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002a05:	75 0f                	jne    c0002a16 <find_bitmap+0x8f>
c0002a07:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002a0b:	83 c0 02             	add    eax,0x2
c0002a0e:	eb 22                	jmp    c0002a32 <find_bitmap+0xab>
c0002a10:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002a14:	31 ed                	xor    ebp,ebp
c0002a16:	39 de                	cmp    esi,ebx
c0002a18:	74 16                	je     c0002a30 <find_bitmap+0xa9>
c0002a1a:	84 c0                	test   al,al
c0002a1c:	75 c6                	jne    c00029e4 <find_bitmap+0x5d>
c0002a1e:	42                   	inc    edx
c0002a1f:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002a25:	77 84                	ja     c00029ab <find_bitmap+0x24>
c0002a27:	b0 01                	mov    al,0x1
c0002a29:	eb b9                	jmp    c00029e4 <find_bitmap+0x5d>
c0002a2b:	83 c8 ff             	or     eax,0xffffffff
c0002a2e:	eb 02                	jmp    c0002a32 <find_bitmap+0xab>
c0002a30:	31 c0                	xor    eax,eax
c0002a32:	83 c4 1c             	add    esp,0x1c
c0002a35:	5b                   	pop    ebx
c0002a36:	5e                   	pop    esi
c0002a37:	5f                   	pop    edi
c0002a38:	5d                   	pop    ebp
c0002a39:	c3                   	ret    

c0002a3a <change_bitmap>:
c0002a3a:	55                   	push   ebp
c0002a3b:	89 cd                	mov    ebp,ecx
c0002a3d:	57                   	push   edi
c0002a3e:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002a41:	56                   	push   esi
c0002a42:	89 c7                	mov    edi,eax
c0002a44:	53                   	push   ebx
c0002a45:	89 c8                	mov    eax,ecx
c0002a47:	83 ec 1c             	sub    esp,0x1c
c0002a4a:	31 d2                	xor    edx,edx
c0002a4c:	89 ce                	mov    esi,ecx
c0002a4e:	c1 e8 0c             	shr    eax,0xc
c0002a51:	bb 01 00 00 00       	mov    ebx,0x1
c0002a56:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002a59:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002a5c:	c1 ee 03             	shr    esi,0x3
c0002a5f:	83 e1 07             	and    ecx,0x7
c0002a62:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002a68:	d3 e3                	shl    ebx,cl
c0002a6a:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002a6e:	89 c1                	mov    ecx,eax
c0002a70:	89 d3                	mov    ebx,edx
c0002a72:	83 c1 01             	add    ecx,0x1
c0002a75:	83 d3 00             	adc    ebx,0x0
c0002a78:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002a7c:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002a80:	89 d1                	mov    ecx,edx
c0002a82:	89 c2                	mov    edx,eax
c0002a84:	89 f8                	mov    eax,edi
c0002a86:	e8 e1 f6 ff ff       	call   c000216c <move_window>
c0002a8b:	89 c1                	mov    ecx,eax
c0002a8d:	85 c0                	test   eax,eax
c0002a8f:	75 48                	jne    c0002ad9 <change_bitmap+0x9f>
c0002a91:	31 d2                	xor    edx,edx
c0002a93:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002a97:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002a9b:	0f 95 c2             	setne  dl
c0002a9e:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002aa2:	74 3c                	je     c0002ae0 <change_bitmap+0xa6>
c0002aa4:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002aa8:	4d                   	dec    ebp
c0002aa9:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002aad:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002ab1:	74 32                	je     c0002ae5 <change_bitmap+0xab>
c0002ab3:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002ab7:	75 d8                	jne    c0002a91 <change_bitmap+0x57>
c0002ab9:	8d 46 01             	lea    eax,[esi+0x1]
c0002abc:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002ac1:	89 c3                	mov    ebx,eax
c0002ac3:	31 f6                	xor    esi,esi
c0002ac5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002ac9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002acd:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002ad3:	74 99                	je     c0002a6e <change_bitmap+0x34>
c0002ad5:	89 de                	mov    esi,ebx
c0002ad7:	eb b8                	jmp    c0002a91 <change_bitmap+0x57>
c0002ad9:	b9 01 00 00 00       	mov    ecx,0x1
c0002ade:	eb 05                	jmp    c0002ae5 <change_bitmap+0xab>
c0002ae0:	b9 02 00 00 00       	mov    ecx,0x2
c0002ae5:	83 c4 1c             	add    esp,0x1c
c0002ae8:	89 c8                	mov    eax,ecx
c0002aea:	5b                   	pop    ebx
c0002aeb:	5e                   	pop    esi
c0002aec:	5f                   	pop    edi
c0002aed:	5d                   	pop    ebp
c0002aee:	c3                   	ret    

c0002aef <put_fat>:
c0002aef:	83 fa 01             	cmp    edx,0x1
c0002af2:	0f 86 7b 01 00 00    	jbe    c0002c73 <put_fat+0x184>
c0002af8:	55                   	push   ebp
c0002af9:	57                   	push   edi
c0002afa:	89 cf                	mov    edi,ecx
c0002afc:	56                   	push   esi
c0002afd:	b9 02 00 00 00       	mov    ecx,0x2
c0002b02:	53                   	push   ebx
c0002b03:	89 c6                	mov    esi,eax
c0002b05:	83 ec 1c             	sub    esp,0x1c
c0002b08:	89 d3                	mov    ebx,edx
c0002b0a:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002b0d:	0f 86 68 01 00 00    	jbe    c0002c7b <put_fat+0x18c>
c0002b13:	8a 00                	mov    al,BYTE PTR [eax]
c0002b15:	3c 02                	cmp    al,0x2
c0002b17:	0f 84 c7 00 00 00    	je     c0002be4 <put_fat+0xf5>
c0002b1d:	77 09                	ja     c0002b28 <put_fat+0x39>
c0002b1f:	fe c8                	dec    al
c0002b21:	74 17                	je     c0002b3a <put_fat+0x4b>
c0002b23:	e9 53 01 00 00       	jmp    c0002c7b <put_fat+0x18c>
c0002b28:	b9 02 00 00 00       	mov    ecx,0x2
c0002b2d:	3c 04                	cmp    al,0x4
c0002b2f:	0f 86 e1 00 00 00    	jbe    c0002c16 <put_fat+0x127>
c0002b35:	e9 41 01 00 00       	jmp    c0002c7b <put_fat+0x18c>
c0002b3a:	89 d5                	mov    ebp,edx
c0002b3c:	31 c9                	xor    ecx,ecx
c0002b3e:	d1 ed                	shr    ebp,1
c0002b40:	89 f0                	mov    eax,esi
c0002b42:	01 d5                	add    ebp,edx
c0002b44:	89 ea                	mov    edx,ebp
c0002b46:	c1 ea 09             	shr    edx,0x9
c0002b49:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002b4c:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002b4f:	e8 18 f6 ff ff       	call   c000216c <move_window>
c0002b54:	89 c1                	mov    ecx,eax
c0002b56:	85 c0                	test   eax,eax
c0002b58:	0f 85 1d 01 00 00    	jne    c0002c7b <put_fat+0x18c>
c0002b5e:	8d 46 54             	lea    eax,[esi+0x54]
c0002b61:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002b65:	8d 45 01             	lea    eax,[ebp+0x1]
c0002b68:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002b6e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002b72:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002b76:	89 f8                	mov    eax,edi
c0002b78:	83 e3 01             	and    ebx,0x1
c0002b7b:	74 0d                	je     c0002b8a <put_fat+0x9b>
c0002b7d:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002b80:	89 fa                	mov    edx,edi
c0002b82:	83 e0 0f             	and    eax,0xf
c0002b85:	c1 e2 04             	shl    edx,0x4
c0002b88:	09 d0                	or     eax,edx
c0002b8a:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002b8d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002b91:	31 c9                	xor    ecx,ecx
c0002b93:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002b97:	c1 ea 09             	shr    edx,0x9
c0002b9a:	89 f0                	mov    eax,esi
c0002b9c:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002b9f:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ba2:	e8 c5 f5 ff ff       	call   c000216c <move_window>
c0002ba7:	89 c1                	mov    ecx,eax
c0002ba9:	85 c0                	test   eax,eax
c0002bab:	0f 85 ca 00 00 00    	jne    c0002c7b <put_fat+0x18c>
c0002bb1:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002bb5:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002bbb:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002bbf:	85 db                	test   ebx,ebx
c0002bc1:	74 07                	je     c0002bca <put_fat+0xdb>
c0002bc3:	c1 ef 04             	shr    edi,0x4
c0002bc6:	89 fa                	mov    edx,edi
c0002bc8:	eb 0e                	jmp    c0002bd8 <put_fat+0xe9>
c0002bca:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002bcd:	c1 ef 08             	shr    edi,0x8
c0002bd0:	83 e2 f0             	and    edx,0xfffffff0
c0002bd3:	83 e7 0f             	and    edi,0xf
c0002bd6:	09 fa                	or     edx,edi
c0002bd8:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002bdb:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002bdf:	e9 97 00 00 00       	jmp    c0002c7b <put_fat+0x18c>
c0002be4:	31 c9                	xor    ecx,ecx
c0002be6:	c1 ea 08             	shr    edx,0x8
c0002be9:	89 f0                	mov    eax,esi
c0002beb:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002bee:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002bf1:	e8 76 f5 ff ff       	call   c000216c <move_window>
c0002bf6:	89 c1                	mov    ecx,eax
c0002bf8:	85 c0                	test   eax,eax
c0002bfa:	75 7f                	jne    c0002c7b <put_fat+0x18c>
c0002bfc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002c00:	01 db                	add    ebx,ebx
c0002c02:	0f b7 d7             	movzx  edx,di
c0002c05:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002c0b:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002c0f:	e8 ec ed ff ff       	call   c0001a00 <st_word>
c0002c14:	eb 53                	jmp    c0002c69 <put_fat+0x17a>
c0002c16:	31 c9                	xor    ecx,ecx
c0002c18:	c1 ea 07             	shr    edx,0x7
c0002c1b:	89 f0                	mov    eax,esi
c0002c1d:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002c20:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002c23:	e8 44 f5 ff ff       	call   c000216c <move_window>
c0002c28:	89 c1                	mov    ecx,eax
c0002c2a:	85 c0                	test   eax,eax
c0002c2c:	75 4d                	jne    c0002c7b <put_fat+0x18c>
c0002c2e:	c1 e3 02             	shl    ebx,0x2
c0002c31:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002c37:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002c3a:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002c3e:	74 1c                	je     c0002c5c <put_fat+0x16d>
c0002c40:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002c44:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002c4a:	89 d8                	mov    eax,ebx
c0002c4c:	e8 4a ed ff ff       	call   c000199b <ld_dword>
c0002c51:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002c55:	25 00 00 00 f0       	and    eax,0xf0000000
c0002c5a:	09 c7                	or     edi,eax
c0002c5c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002c60:	89 fa                	mov    edx,edi
c0002c62:	89 d8                	mov    eax,ebx
c0002c64:	e8 9b ed ff ff       	call   c0001a04 <st_dword>
c0002c69:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002c6d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002c71:	eb 08                	jmp    c0002c7b <put_fat+0x18c>
c0002c73:	b9 02 00 00 00       	mov    ecx,0x2
c0002c78:	89 c8                	mov    eax,ecx
c0002c7a:	c3                   	ret    
c0002c7b:	83 c4 1c             	add    esp,0x1c
c0002c7e:	89 c8                	mov    eax,ecx
c0002c80:	5b                   	pop    ebx
c0002c81:	5e                   	pop    esi
c0002c82:	5f                   	pop    edi
c0002c83:	5d                   	pop    ebp
c0002c84:	c3                   	ret    

c0002c85 <fill_last_frag>:
c0002c85:	57                   	push   edi
c0002c86:	89 cf                	mov    edi,ecx
c0002c88:	56                   	push   esi
c0002c89:	89 d6                	mov    esi,edx
c0002c8b:	53                   	push   ebx
c0002c8c:	89 c3                	mov    ebx,eax
c0002c8e:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002c91:	85 c0                	test   eax,eax
c0002c93:	74 21                	je     c0002cb6 <fill_last_frag+0x31>
c0002c95:	89 f9                	mov    ecx,edi
c0002c97:	83 f8 01             	cmp    eax,0x1
c0002c9a:	76 05                	jbe    c0002ca1 <fill_last_frag+0x1c>
c0002c9c:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002c9f:	29 c1                	sub    ecx,eax
c0002ca1:	8d 56 01             	lea    edx,[esi+0x1]
c0002ca4:	29 c2                	sub    edx,eax
c0002ca6:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002ca8:	e8 42 fe ff ff       	call   c0002aef <put_fat>
c0002cad:	85 c0                	test   eax,eax
c0002caf:	75 05                	jne    c0002cb6 <fill_last_frag+0x31>
c0002cb1:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002cb4:	eb d8                	jmp    c0002c8e <fill_last_frag+0x9>
c0002cb6:	5b                   	pop    ebx
c0002cb7:	5e                   	pop    esi
c0002cb8:	5f                   	pop    edi
c0002cb9:	c3                   	ret    

c0002cba <fill_first_frag>:
c0002cba:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002cbe:	75 2d                	jne    c0002ced <fill_first_frag+0x33>
c0002cc0:	57                   	push   edi
c0002cc1:	56                   	push   esi
c0002cc2:	53                   	push   ebx
c0002cc3:	89 c3                	mov    ebx,eax
c0002cc5:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002cc8:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002ccb:	01 d7                	add    edi,edx
c0002ccd:	39 fa                	cmp    edx,edi
c0002ccf:	74 14                	je     c0002ce5 <fill_first_frag+0x2b>
c0002cd1:	8d 72 01             	lea    esi,[edx+0x1]
c0002cd4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002cd6:	89 f1                	mov    ecx,esi
c0002cd8:	e8 12 fe ff ff       	call   c0002aef <put_fat>
c0002cdd:	89 f2                	mov    edx,esi
c0002cdf:	85 c0                	test   eax,eax
c0002ce1:	74 ea                	je     c0002ccd <fill_first_frag+0x13>
c0002ce3:	eb 0b                	jmp    c0002cf0 <fill_first_frag+0x36>
c0002ce5:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002ce9:	31 c0                	xor    eax,eax
c0002ceb:	eb 03                	jmp    c0002cf0 <fill_first_frag+0x36>
c0002ced:	31 c0                	xor    eax,eax
c0002cef:	c3                   	ret    
c0002cf0:	5b                   	pop    ebx
c0002cf1:	5e                   	pop    esi
c0002cf2:	5f                   	pop    edi
c0002cf3:	c3                   	ret    

c0002cf4 <get_fat>:
c0002cf4:	83 fa 01             	cmp    edx,0x1
c0002cf7:	0f 86 db 01 00 00    	jbe    c0002ed8 <get_fat+0x1e4>
c0002cfd:	55                   	push   ebp
c0002cfe:	b9 01 00 00 00       	mov    ecx,0x1
c0002d03:	57                   	push   edi
c0002d04:	56                   	push   esi
c0002d05:	53                   	push   ebx
c0002d06:	83 ec 1c             	sub    esp,0x1c
c0002d09:	8b 38                	mov    edi,DWORD PTR [eax]
c0002d0b:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002d0e:	0f 86 cc 01 00 00    	jbe    c0002ee0 <get_fat+0x1ec>
c0002d14:	89 c3                	mov    ebx,eax
c0002d16:	89 d6                	mov    esi,edx
c0002d18:	8a 07                	mov    al,BYTE PTR [edi]
c0002d1a:	3c 02                	cmp    al,0x2
c0002d1c:	0f 84 99 00 00 00    	je     c0002dbb <get_fat+0xc7>
c0002d22:	77 09                	ja     c0002d2d <get_fat+0x39>
c0002d24:	fe c8                	dec    al
c0002d26:	74 1a                	je     c0002d42 <get_fat+0x4e>
c0002d28:	e9 b3 01 00 00       	jmp    c0002ee0 <get_fat+0x1ec>
c0002d2d:	3c 03                	cmp    al,0x3
c0002d2f:	0f 84 b5 00 00 00    	je     c0002dea <get_fat+0xf6>
c0002d35:	3c 04                	cmp    al,0x4
c0002d37:	0f 84 e3 00 00 00    	je     c0002e20 <get_fat+0x12c>
c0002d3d:	e9 9e 01 00 00       	jmp    c0002ee0 <get_fat+0x1ec>
c0002d42:	89 d3                	mov    ebx,edx
c0002d44:	31 c9                	xor    ecx,ecx
c0002d46:	d1 eb                	shr    ebx,1
c0002d48:	89 f8                	mov    eax,edi
c0002d4a:	01 d3                	add    ebx,edx
c0002d4c:	89 da                	mov    edx,ebx
c0002d4e:	c1 ea 09             	shr    edx,0x9
c0002d51:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002d54:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002d57:	e8 10 f4 ff ff       	call   c000216c <move_window>
c0002d5c:	85 c0                	test   eax,eax
c0002d5e:	74 08                	je     c0002d68 <get_fat+0x74>
c0002d60:	83 c9 ff             	or     ecx,0xffffffff
c0002d63:	e9 78 01 00 00       	jmp    c0002ee0 <get_fat+0x1ec>
c0002d68:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0002d6b:	31 c9                	xor    ecx,ecx
c0002d6d:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002d73:	89 ea                	mov    edx,ebp
c0002d75:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0002d79:	c1 ea 09             	shr    edx,0x9
c0002d7c:	89 f8                	mov    eax,edi
c0002d7e:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002d81:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002d84:	e8 e3 f3 ff ff       	call   c000216c <move_window>
c0002d89:	85 c0                	test   eax,eax
c0002d8b:	75 d3                	jne    c0002d60 <get_fat+0x6c>
c0002d8d:	0f b6 c3             	movzx  eax,bl
c0002d90:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002d96:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0002d9b:	c1 e3 08             	shl    ebx,0x8
c0002d9e:	09 c3                	or     ebx,eax
c0002da0:	89 d9                	mov    ecx,ebx
c0002da2:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0002da8:	83 e6 01             	and    esi,0x1
c0002dab:	0f 84 2f 01 00 00    	je     c0002ee0 <get_fat+0x1ec>
c0002db1:	89 d9                	mov    ecx,ebx
c0002db3:	c1 e9 04             	shr    ecx,0x4
c0002db6:	e9 25 01 00 00       	jmp    c0002ee0 <get_fat+0x1ec>
c0002dbb:	31 c9                	xor    ecx,ecx
c0002dbd:	c1 ea 08             	shr    edx,0x8
c0002dc0:	89 f8                	mov    eax,edi
c0002dc2:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002dc5:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002dc8:	e8 9f f3 ff ff       	call   c000216c <move_window>
c0002dcd:	85 c0                	test   eax,eax
c0002dcf:	75 8f                	jne    c0002d60 <get_fat+0x6c>
c0002dd1:	01 f6                	add    esi,esi
c0002dd3:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0002dd9:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002ddd:	e8 ac eb ff ff       	call   c000198e <ld_word>
c0002de2:	0f b7 c8             	movzx  ecx,ax
c0002de5:	e9 f6 00 00 00       	jmp    c0002ee0 <get_fat+0x1ec>
c0002dea:	31 c9                	xor    ecx,ecx
c0002dec:	c1 ea 07             	shr    edx,0x7
c0002def:	89 f8                	mov    eax,edi
c0002df1:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002df4:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002df7:	e8 70 f3 ff ff       	call   c000216c <move_window>
c0002dfc:	85 c0                	test   eax,eax
c0002dfe:	0f 85 5c ff ff ff    	jne    c0002d60 <get_fat+0x6c>
c0002e04:	c1 e6 02             	shl    esi,0x2
c0002e07:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002e0d:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002e11:	e8 85 eb ff ff       	call   c000199b <ld_dword>
c0002e16:	25 ff ff ff 0f       	and    eax,0xfffffff
c0002e1b:	e9 b4 00 00 00       	jmp    c0002ed4 <get_fat+0x1e0>
c0002e20:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0002e23:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002e26:	89 d1                	mov    ecx,edx
c0002e28:	09 c1                	or     ecx,eax
c0002e2a:	74 06                	je     c0002e32 <get_fat+0x13e>
c0002e2c:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0002e30:	75 0f                	jne    c0002e41 <get_fat+0x14d>
c0002e32:	b9 01 00 00 00       	mov    ecx,0x1
c0002e37:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c0002e3b:	0f 85 9f 00 00 00    	jne    c0002ee0 <get_fat+0x1ec>
c0002e41:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0002e45:	89 f5                	mov    ebp,esi
c0002e47:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c0002e4c:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0002e4f:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0002e52:	80 f9 02             	cmp    cl,0x2
c0002e55:	75 35                	jne    c0002e8c <get_fat+0x198>
c0002e57:	83 c0 ff             	add    eax,0xffffffff
c0002e5a:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0002e5f:	83 d2 ff             	adc    edx,0xffffffff
c0002e62:	31 db                	xor    ebx,ebx
c0002e64:	0f ac d0 09          	shrd   eax,edx,0x9
c0002e68:	53                   	push   ebx
c0002e69:	c1 ea 09             	shr    edx,0x9
c0002e6c:	51                   	push   ecx
c0002e6d:	52                   	push   edx
c0002e6e:	50                   	push   eax
c0002e6f:	e8 a8 b4 01 00       	call   c001e31c <__udivdi3>
c0002e74:	83 c4 10             	add    esp,0x10
c0002e77:	b9 01 00 00 00       	mov    ecx,0x1
c0002e7c:	39 c5                	cmp    ebp,eax
c0002e7e:	77 60                	ja     c0002ee0 <get_fat+0x1ec>
c0002e80:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002e85:	74 59                	je     c0002ee0 <get_fat+0x1ec>
c0002e87:	8d 4e 01             	lea    ecx,[esi+0x1]
c0002e8a:	eb 54                	jmp    c0002ee0 <get_fat+0x1ec>
c0002e8c:	80 f9 03             	cmp    cl,0x3
c0002e8f:	75 05                	jne    c0002e96 <get_fat+0x1a2>
c0002e91:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0002e94:	77 f1                	ja     c0002e87 <get_fat+0x193>
c0002e96:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002e9b:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0002e9f:	75 3f                	jne    c0002ee0 <get_fat+0x1ec>
c0002ea1:	31 c9                	xor    ecx,ecx
c0002ea3:	89 f2                	mov    edx,esi
c0002ea5:	89 f8                	mov    eax,edi
c0002ea7:	c1 ea 07             	shr    edx,0x7
c0002eaa:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002ead:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002eb0:	e8 b7 f2 ff ff       	call   c000216c <move_window>
c0002eb5:	85 c0                	test   eax,eax
c0002eb7:	0f 85 a3 fe ff ff    	jne    c0002d60 <get_fat+0x6c>
c0002ebd:	c1 e6 02             	shl    esi,0x2
c0002ec0:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002ec6:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002eca:	e8 cc ea ff ff       	call   c000199b <ld_dword>
c0002ecf:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0002ed4:	89 c1                	mov    ecx,eax
c0002ed6:	eb 08                	jmp    c0002ee0 <get_fat+0x1ec>
c0002ed8:	b9 01 00 00 00       	mov    ecx,0x1
c0002edd:	89 c8                	mov    eax,ecx
c0002edf:	c3                   	ret    
c0002ee0:	83 c4 1c             	add    esp,0x1c
c0002ee3:	89 c8                	mov    eax,ecx
c0002ee5:	5b                   	pop    ebx
c0002ee6:	5e                   	pop    esi
c0002ee7:	5f                   	pop    edi
c0002ee8:	5d                   	pop    ebp
c0002ee9:	c3                   	ret    

c0002eea <dir_sdi>:
c0002eea:	55                   	push   ebp
c0002eeb:	57                   	push   edi
c0002eec:	56                   	push   esi
c0002eed:	53                   	push   ebx
c0002eee:	89 c3                	mov    ebx,eax
c0002ef0:	83 ec 1c             	sub    esp,0x1c
c0002ef3:	8b 38                	mov    edi,DWORD PTR [eax]
c0002ef5:	31 c0                	xor    eax,eax
c0002ef7:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0002efa:	0f 94 c0             	sete   al
c0002efd:	48                   	dec    eax
c0002efe:	25 00 00 20 f0       	and    eax,0xf0200000
c0002f03:	05 00 00 00 10       	add    eax,0x10000000
c0002f08:	39 d0                	cmp    eax,edx
c0002f0a:	77 0a                	ja     c0002f16 <dir_sdi+0x2c>
c0002f0c:	b8 02 00 00 00       	mov    eax,0x2
c0002f11:	e9 c4 00 00 00       	jmp    c0002fda <dir_sdi+0xf0>
c0002f16:	89 d6                	mov    esi,edx
c0002f18:	f6 c2 1f             	test   dl,0x1f
c0002f1b:	75 ef                	jne    c0002f0c <dir_sdi+0x22>
c0002f1d:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0002f20:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c0002f23:	85 c9                	test   ecx,ecx
c0002f25:	75 2d                	jne    c0002f54 <dir_sdi+0x6a>
c0002f27:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0002f2a:	77 1b                	ja     c0002f47 <dir_sdi+0x5d>
c0002f2c:	89 f2                	mov    edx,esi
c0002f2e:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0002f32:	c1 ea 05             	shr    edx,0x5
c0002f35:	39 c2                	cmp    edx,eax
c0002f37:	73 d3                	jae    c0002f0c <dir_sdi+0x22>
c0002f39:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0002f3c:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c0002f3f:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002f42:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0002f45:	eb 4b                	jmp    c0002f92 <dir_sdi+0xa8>
c0002f47:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0002f4a:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002f4e:	85 c0                	test   eax,eax
c0002f50:	74 da                	je     c0002f2c <dir_sdi+0x42>
c0002f52:	89 c1                	mov    ecx,eax
c0002f54:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0002f58:	c1 e5 09             	shl    ebp,0x9
c0002f5b:	89 ca                	mov    edx,ecx
c0002f5d:	39 ee                	cmp    esi,ebp
c0002f5f:	72 1c                	jb     c0002f7d <dir_sdi+0x93>
c0002f61:	89 d8                	mov    eax,ebx
c0002f63:	e8 8c fd ff ff       	call   c0002cf4 <get_fat>
c0002f68:	89 c1                	mov    ecx,eax
c0002f6a:	83 f8 ff             	cmp    eax,0xffffffff
c0002f6d:	74 66                	je     c0002fd5 <dir_sdi+0xeb>
c0002f6f:	83 f8 01             	cmp    eax,0x1
c0002f72:	76 98                	jbe    c0002f0c <dir_sdi+0x22>
c0002f74:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0002f77:	76 93                	jbe    c0002f0c <dir_sdi+0x22>
c0002f79:	29 ee                	sub    esi,ebp
c0002f7b:	eb de                	jmp    c0002f5b <dir_sdi+0x71>
c0002f7d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002f81:	89 f8                	mov    eax,edi
c0002f83:	e8 9f ec ff ff       	call   c0001c27 <clst2sect>
c0002f88:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f8c:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002f8f:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0002f92:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0002f95:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0002f98:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0002f9b:	89 d1                	mov    ecx,edx
c0002f9d:	09 c1                	or     ecx,eax
c0002f9f:	0f 84 67 ff ff ff    	je     c0002f0c <dir_sdi+0x22>
c0002fa5:	89 f1                	mov    ecx,esi
c0002fa7:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002faf:	c1 e9 09             	shr    ecx,0x9
c0002fb2:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002fb6:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002fba:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002fbe:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002fc1:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002fc7:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0002fca:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002fce:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0002fd1:	31 c0                	xor    eax,eax
c0002fd3:	eb 05                	jmp    c0002fda <dir_sdi+0xf0>
c0002fd5:	b8 01 00 00 00       	mov    eax,0x1
c0002fda:	83 c4 1c             	add    esp,0x1c
c0002fdd:	5b                   	pop    ebx
c0002fde:	5e                   	pop    esi
c0002fdf:	5f                   	pop    edi
c0002fe0:	5d                   	pop    ebp
c0002fe1:	c3                   	ret    

c0002fe2 <create_chain>:
c0002fe2:	55                   	push   ebp
c0002fe3:	89 c5                	mov    ebp,eax
c0002fe5:	57                   	push   edi
c0002fe6:	56                   	push   esi
c0002fe7:	53                   	push   ebx
c0002fe8:	83 ec 1c             	sub    esp,0x1c
c0002feb:	85 d2                	test   edx,edx
c0002fed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002ff1:	8b 30                	mov    esi,DWORD PTR [eax]
c0002ff3:	75 0e                	jne    c0003003 <create_chain+0x21>
c0002ff5:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0002ff8:	85 ff                	test   edi,edi
c0002ffa:	74 39                	je     c0003035 <create_chain+0x53>
c0002ffc:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0002fff:	77 39                	ja     c000303a <create_chain+0x58>
c0003001:	eb 32                	jmp    c0003035 <create_chain+0x53>
c0003003:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003007:	e8 e8 fc ff ff       	call   c0002cf4 <get_fat>
c000300c:	89 c3                	mov    ebx,eax
c000300e:	83 f8 01             	cmp    eax,0x1
c0003011:	77 0a                	ja     c000301d <create_chain+0x3b>
c0003013:	bb 01 00 00 00       	mov    ebx,0x1
c0003018:	e9 ba 01 00 00       	jmp    c00031d7 <create_chain+0x1f5>
c000301d:	83 f8 ff             	cmp    eax,0xffffffff
c0003020:	0f 84 62 01 00 00    	je     c0003188 <create_chain+0x1a6>
c0003026:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c0003029:	0f 87 a8 01 00 00    	ja     c00031d7 <create_chain+0x1f5>
c000302f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0003033:	eb 05                	jmp    c000303a <create_chain+0x58>
c0003035:	bf 01 00 00 00       	mov    edi,0x1
c000303a:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c000303e:	75 07                	jne    c0003047 <create_chain+0x65>
c0003040:	31 db                	xor    ebx,ebx
c0003042:	e9 90 01 00 00       	jmp    c00031d7 <create_chain+0x1f5>
c0003047:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c000304a:	75 74                	jne    c00030c0 <create_chain+0xde>
c000304c:	b9 01 00 00 00       	mov    ecx,0x1
c0003051:	89 fa                	mov    edx,edi
c0003053:	89 f0                	mov    eax,esi
c0003055:	e8 2d f9 ff ff       	call   c0002987 <find_bitmap>
c000305a:	89 c3                	mov    ebx,eax
c000305c:	8d 40 ff             	lea    eax,[eax-0x1]
c000305f:	83 f8 fd             	cmp    eax,0xfffffffd
c0003062:	0f 87 6f 01 00 00    	ja     c00031d7 <create_chain+0x1f5>
c0003068:	83 ec 0c             	sub    esp,0xc
c000306b:	b9 01 00 00 00       	mov    ecx,0x1
c0003070:	6a 01                	push   0x1
c0003072:	89 da                	mov    edx,ebx
c0003074:	89 f0                	mov    eax,esi
c0003076:	e8 bf f9 ff ff       	call   c0002a3a <change_bitmap>
c000307b:	83 c4 10             	add    esp,0x10
c000307e:	83 f8 02             	cmp    eax,0x2
c0003081:	74 90                	je     c0003013 <create_chain+0x31>
c0003083:	83 f8 01             	cmp    eax,0x1
c0003086:	0f 84 fc 00 00 00    	je     c0003188 <create_chain+0x1a6>
c000308c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003091:	75 09                	jne    c000309c <create_chain+0xba>
c0003093:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c0003097:	e9 0c 01 00 00       	jmp    c00031a8 <create_chain+0x1c6>
c000309c:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c00030a0:	0f 85 e7 00 00 00    	jne    c000318d <create_chain+0x1ab>
c00030a6:	8d 57 01             	lea    edx,[edi+0x1]
c00030a9:	39 da                	cmp    edx,ebx
c00030ab:	0f 84 f7 00 00 00    	je     c00031a8 <create_chain+0x1c6>
c00030b1:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c00030b4:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c00030b8:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c00030bb:	e9 cd 00 00 00       	jmp    c000318d <create_chain+0x1ab>
c00030c0:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00030c4:	75 41                	jne    c0003107 <create_chain+0x125>
c00030c6:	8d 5f 01             	lea    ebx,[edi+0x1]
c00030c9:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00030cc:	77 05                	ja     c00030d3 <create_chain+0xf1>
c00030ce:	bb 02 00 00 00       	mov    ebx,0x2
c00030d3:	89 da                	mov    edx,ebx
c00030d5:	89 e8                	mov    eax,ebp
c00030d7:	e8 18 fc ff ff       	call   c0002cf4 <get_fat>
c00030dc:	83 f8 01             	cmp    eax,0x1
c00030df:	0f 84 2e ff ff ff    	je     c0003013 <create_chain+0x31>
c00030e5:	83 f8 ff             	cmp    eax,0xffffffff
c00030e8:	0f 84 9a 00 00 00    	je     c0003188 <create_chain+0x1a6>
c00030ee:	85 c0                	test   eax,eax
c00030f0:	74 11                	je     c0003103 <create_chain+0x121>
c00030f2:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00030f5:	83 f8 01             	cmp    eax,0x1
c00030f8:	76 0d                	jbe    c0003107 <create_chain+0x125>
c00030fa:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00030fd:	76 08                	jbe    c0003107 <create_chain+0x125>
c00030ff:	89 c7                	mov    edi,eax
c0003101:	eb 04                	jmp    c0003107 <create_chain+0x125>
c0003103:	85 db                	test   ebx,ebx
c0003105:	75 38                	jne    c000313f <create_chain+0x15d>
c0003107:	89 fb                	mov    ebx,edi
c0003109:	43                   	inc    ebx
c000310a:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c000310d:	77 0e                	ja     c000311d <create_chain+0x13b>
c000310f:	83 ff 01             	cmp    edi,0x1
c0003112:	0f 86 28 ff ff ff    	jbe    c0003040 <create_chain+0x5e>
c0003118:	bb 02 00 00 00       	mov    ebx,0x2
c000311d:	89 da                	mov    edx,ebx
c000311f:	89 e8                	mov    eax,ebp
c0003121:	e8 ce fb ff ff       	call   c0002cf4 <get_fat>
c0003126:	85 c0                	test   eax,eax
c0003128:	74 15                	je     c000313f <create_chain+0x15d>
c000312a:	83 f8 01             	cmp    eax,0x1
c000312d:	0f 84 e0 fe ff ff    	je     c0003013 <create_chain+0x31>
c0003133:	40                   	inc    eax
c0003134:	74 52                	je     c0003188 <create_chain+0x1a6>
c0003136:	39 fb                	cmp    ebx,edi
c0003138:	75 cf                	jne    c0003109 <create_chain+0x127>
c000313a:	e9 01 ff ff ff       	jmp    c0003040 <create_chain+0x5e>
c000313f:	83 c9 ff             	or     ecx,0xffffffff
c0003142:	89 da                	mov    edx,ebx
c0003144:	89 f0                	mov    eax,esi
c0003146:	e8 a4 f9 ff ff       	call   c0002aef <put_fat>
c000314b:	85 c0                	test   eax,eax
c000314d:	75 32                	jne    c0003181 <create_chain+0x19f>
c000314f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003154:	74 11                	je     c0003167 <create_chain+0x185>
c0003156:	89 d9                	mov    ecx,ebx
c0003158:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000315c:	89 f0                	mov    eax,esi
c000315e:	e8 8c f9 ff ff       	call   c0002aef <put_fat>
c0003163:	85 c0                	test   eax,eax
c0003165:	75 1a                	jne    c0003181 <create_chain+0x19f>
c0003167:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000316a:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c000316d:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003170:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003173:	39 d0                	cmp    eax,edx
c0003175:	77 04                	ja     c000317b <create_chain+0x199>
c0003177:	48                   	dec    eax
c0003178:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c000317b:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c000317f:	eb 56                	jmp    c00031d7 <create_chain+0x1f5>
c0003181:	48                   	dec    eax
c0003182:	0f 85 8b fe ff ff    	jne    c0003013 <create_chain+0x31>
c0003188:	83 cb ff             	or     ebx,0xffffffff
c000318b:	eb 4a                	jmp    c00031d7 <create_chain+0x1f5>
c000318d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003191:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003194:	41                   	inc    ecx
c0003195:	39 d9                	cmp    ecx,ebx
c0003197:	75 19                	jne    c00031b2 <create_chain+0x1d0>
c0003199:	b9 02 00 00 00       	mov    ecx,0x2
c000319e:	85 d2                	test   edx,edx
c00031a0:	74 03                	je     c00031a5 <create_chain+0x1c3>
c00031a2:	8d 4a 01             	lea    ecx,[edx+0x1]
c00031a5:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c00031a8:	85 c0                	test   eax,eax
c00031aa:	0f 85 63 fe ff ff    	jne    c0003013 <create_chain+0x31>
c00031b0:	eb b5                	jmp    c0003167 <create_chain+0x185>
c00031b2:	85 d2                	test   edx,edx
c00031b4:	75 07                	jne    c00031bd <create_chain+0x1db>
c00031b6:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00031bd:	89 d9                	mov    ecx,ebx
c00031bf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00031c3:	89 e8                	mov    eax,ebp
c00031c5:	e8 bb fa ff ff       	call   c0002c85 <fill_last_frag>
c00031ca:	85 c0                	test   eax,eax
c00031cc:	75 b3                	jne    c0003181 <create_chain+0x19f>
c00031ce:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00031d5:	eb 90                	jmp    c0003167 <create_chain+0x185>
c00031d7:	83 c4 1c             	add    esp,0x1c
c00031da:	89 d8                	mov    eax,ebx
c00031dc:	5b                   	pop    ebx
c00031dd:	5e                   	pop    esi
c00031de:	5f                   	pop    edi
c00031df:	5d                   	pop    ebp
c00031e0:	c3                   	ret    

c00031e1 <remove_chain>:
c00031e1:	55                   	push   ebp
c00031e2:	57                   	push   edi
c00031e3:	56                   	push   esi
c00031e4:	53                   	push   ebx
c00031e5:	83 ec 1c             	sub    esp,0x1c
c00031e8:	83 fa 01             	cmp    edx,0x1
c00031eb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00031ef:	8b 18                	mov    ebx,DWORD PTR [eax]
c00031f1:	77 0a                	ja     c00031fd <remove_chain+0x1c>
c00031f3:	b8 02 00 00 00       	mov    eax,0x2
c00031f8:	e9 24 01 00 00       	jmp    c0003321 <remove_chain+0x140>
c00031fd:	89 d6                	mov    esi,edx
c00031ff:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c0003202:	76 ef                	jbe    c00031f3 <remove_chain+0x12>
c0003204:	89 c7                	mov    edi,eax
c0003206:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000320b:	75 06                	jne    c0003213 <remove_chain+0x32>
c000320d:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0003211:	eb 54                	jmp    c0003267 <remove_chain+0x86>
c0003213:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003216:	75 06                	jne    c000321e <remove_chain+0x3d>
c0003218:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c000321c:	74 ef                	je     c000320d <remove_chain+0x2c>
c000321e:	83 c9 ff             	or     ecx,0xffffffff
c0003221:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003225:	89 d8                	mov    eax,ebx
c0003227:	e8 c3 f8 ff ff       	call   c0002aef <put_fat>
c000322c:	85 c0                	test   eax,eax
c000322e:	74 dd                	je     c000320d <remove_chain+0x2c>
c0003230:	e9 ec 00 00 00       	jmp    c0003321 <remove_chain+0x140>
c0003235:	83 f8 01             	cmp    eax,0x1
c0003238:	74 b9                	je     c00031f3 <remove_chain+0x12>
c000323a:	83 f8 ff             	cmp    eax,0xffffffff
c000323d:	74 6d                	je     c00032ac <remove_chain+0xcb>
c000323f:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003242:	75 6f                	jne    c00032b3 <remove_chain+0xd2>
c0003244:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0003247:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c000324a:	8d 51 fe             	lea    edx,[ecx-0x2]
c000324d:	39 d0                	cmp    eax,edx
c000324f:	73 08                	jae    c0003259 <remove_chain+0x78>
c0003251:	40                   	inc    eax
c0003252:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003256:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003259:	8d 4e 01             	lea    ecx,[esi+0x1]
c000325c:	39 e9                	cmp    ecx,ebp
c000325e:	75 64                	jne    c00032c4 <remove_chain+0xe3>
c0003260:	89 ee                	mov    esi,ebp
c0003262:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003265:	76 0f                	jbe    c0003276 <remove_chain+0x95>
c0003267:	89 f2                	mov    edx,esi
c0003269:	89 f8                	mov    eax,edi
c000326b:	e8 84 fa ff ff       	call   c0002cf4 <get_fat>
c0003270:	89 c5                	mov    ebp,eax
c0003272:	85 c0                	test   eax,eax
c0003274:	75 bf                	jne    c0003235 <remove_chain+0x54>
c0003276:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003279:	0f 85 a0 00 00 00    	jne    c000331f <remove_chain+0x13e>
c000327f:	eb 6c                	jmp    c00032ed <remove_chain+0x10c>
c0003281:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003284:	84 c0                	test   al,al
c0003286:	75 7d                	jne    c0003305 <remove_chain+0x124>
c0003288:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000328b:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c000328f:	0f 84 86 00 00 00    	je     c000331b <remove_chain+0x13a>
c0003295:	89 da                	mov    edx,ebx
c0003297:	89 f8                	mov    eax,edi
c0003299:	e8 56 fa ff ff       	call   c0002cf4 <get_fat>
c000329e:	83 f8 01             	cmp    eax,0x1
c00032a1:	0f 86 4c ff ff ff    	jbe    c00031f3 <remove_chain+0x12>
c00032a7:	83 f8 ff             	cmp    eax,0xffffffff
c00032aa:	75 4e                	jne    c00032fa <remove_chain+0x119>
c00032ac:	b8 01 00 00 00       	mov    eax,0x1
c00032b1:	eb 6e                	jmp    c0003321 <remove_chain+0x140>
c00032b3:	31 c9                	xor    ecx,ecx
c00032b5:	89 f2                	mov    edx,esi
c00032b7:	89 d8                	mov    eax,ebx
c00032b9:	e8 31 f8 ff ff       	call   c0002aef <put_fat>
c00032be:	85 c0                	test   eax,eax
c00032c0:	74 82                	je     c0003244 <remove_chain+0x63>
c00032c2:	eb 5d                	jmp    c0003321 <remove_chain+0x140>
c00032c4:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00032c7:	75 1b                	jne    c00032e4 <remove_chain+0x103>
c00032c9:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00032cd:	89 d8                	mov    eax,ebx
c00032cf:	83 ec 0c             	sub    esp,0xc
c00032d2:	6a 00                	push   0x0
c00032d4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00032d8:	e8 5d f7 ff ff       	call   c0002a3a <change_bitmap>
c00032dd:	83 c4 10             	add    esp,0x10
c00032e0:	85 c0                	test   eax,eax
c00032e2:	75 3d                	jne    c0003321 <remove_chain+0x140>
c00032e4:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00032e8:	e9 73 ff ff ff       	jmp    c0003260 <remove_chain+0x7f>
c00032ed:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00032f2:	75 8d                	jne    c0003281 <remove_chain+0xa0>
c00032f4:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00032f8:	eb 25                	jmp    c000331f <remove_chain+0x13e>
c00032fa:	8d 53 01             	lea    edx,[ebx+0x1]
c00032fd:	89 c3                	mov    ebx,eax
c00032ff:	39 c2                	cmp    edx,eax
c0003301:	74 88                	je     c000328b <remove_chain+0xaa>
c0003303:	eb 1a                	jmp    c000331f <remove_chain+0x13e>
c0003305:	3c 03                	cmp    al,0x3
c0003307:	75 16                	jne    c000331f <remove_chain+0x13e>
c0003309:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000330c:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0003310:	77 0d                	ja     c000331f <remove_chain+0x13e>
c0003312:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c0003315:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0003319:	72 04                	jb     c000331f <remove_chain+0x13e>
c000331b:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c000331f:	31 c0                	xor    eax,eax
c0003321:	83 c4 1c             	add    esp,0x1c
c0003324:	5b                   	pop    ebx
c0003325:	5e                   	pop    esi
c0003326:	5f                   	pop    edi
c0003327:	5d                   	pop    ebp
c0003328:	c3                   	ret    

c0003329 <dir_clear>:
c0003329:	55                   	push   ebp
c000332a:	57                   	push   edi
c000332b:	56                   	push   esi
c000332c:	89 c6                	mov    esi,eax
c000332e:	53                   	push   ebx
c000332f:	83 ec 1c             	sub    esp,0x1c
c0003332:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003336:	e8 9d ed ff ff       	call   c00020d8 <sync_window>
c000333b:	85 c0                	test   eax,eax
c000333d:	0f 85 de 00 00 00    	jne    c0003421 <dir_clear+0xf8>
c0003343:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003347:	89 f0                	mov    eax,esi
c0003349:	8d 6e 54             	lea    ebp,[esi+0x54]
c000334c:	e8 d6 e8 ff ff       	call   c0001c27 <clst2sect>
c0003351:	b9 00 02 00 00       	mov    ecx,0x200
c0003356:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000335a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000335e:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c0003361:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003364:	89 e8                	mov    eax,ebp
c0003366:	31 d2                	xor    edx,edx
c0003368:	e8 b5 e6 ff ff       	call   c0001a22 <mem_set>
c000336d:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0003371:	c1 e3 09             	shl    ebx,0x9
c0003374:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c000337a:	76 1f                	jbe    c000339b <dir_clear+0x72>
c000337c:	bb 00 80 00 00       	mov    ebx,0x8000
c0003381:	eb 18                	jmp    c000339b <dir_clear+0x72>
c0003383:	83 ec 0c             	sub    esp,0xc
c0003386:	53                   	push   ebx
c0003387:	e8 35 4e 00 00       	call   c00081c1 <ff_memalloc>
c000338c:	83 c4 10             	add    esp,0x10
c000338f:	89 c7                	mov    edi,eax
c0003391:	85 c0                	test   eax,eax
c0003393:	0f 85 8f 00 00 00    	jne    c0003428 <dir_clear+0xff>
c0003399:	d1 eb                	shr    ebx,1
c000339b:	81 fb 00 02 00 00    	cmp    ebx,0x200
c00033a1:	77 e0                	ja     c0003383 <dir_clear+0x5a>
c00033a3:	31 db                	xor    ebx,ebx
c00033a5:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00033a9:	39 d8                	cmp    eax,ebx
c00033ab:	76 66                	jbe    c0003413 <dir_clear+0xea>
c00033ad:	83 ec 0c             	sub    esp,0xc
c00033b0:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00033b4:	6a 01                	push   0x1
c00033b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00033ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00033be:	55                   	push   ebp
c00033bf:	50                   	push   eax
c00033c0:	e8 94 e5 ff ff       	call   c0001959 <disk_write>
c00033c5:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c00033ca:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c00033cf:	83 c4 20             	add    esp,0x20
c00033d2:	85 c0                	test   eax,eax
c00033d4:	75 3d                	jne    c0003413 <dir_clear+0xea>
c00033d6:	43                   	inc    ebx
c00033d7:	eb cc                	jmp    c00033a5 <dir_clear+0x7c>
c00033d9:	83 ec 0c             	sub    esp,0xc
c00033dc:	31 d2                	xor    edx,edx
c00033de:	55                   	push   ebp
c00033df:	89 d8                	mov    eax,ebx
c00033e1:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00033e5:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00033e9:	52                   	push   edx
c00033ea:	50                   	push   eax
c00033eb:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00033ef:	57                   	push   edi
c00033f0:	50                   	push   eax
c00033f1:	e8 63 e5 ff ff       	call   c0001959 <disk_write>
c00033f6:	83 c4 20             	add    esp,0x20
c00033f9:	85 c0                	test   eax,eax
c00033fb:	75 0a                	jne    c0003407 <dir_clear+0xde>
c00033fd:	01 eb                	add    ebx,ebp
c00033ff:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003403:	39 d8                	cmp    eax,ebx
c0003405:	77 d2                	ja     c00033d9 <dir_clear+0xb0>
c0003407:	83 ec 0c             	sub    esp,0xc
c000340a:	57                   	push   edi
c000340b:	e8 c7 4d 00 00       	call   c00081d7 <ff_memfree>
c0003410:	83 c4 10             	add    esp,0x10
c0003413:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003417:	39 d8                	cmp    eax,ebx
c0003419:	0f 95 c0             	setne  al
c000341c:	0f b6 c0             	movzx  eax,al
c000341f:	eb 19                	jmp    c000343a <dir_clear+0x111>
c0003421:	b8 01 00 00 00       	mov    eax,0x1
c0003426:	eb 12                	jmp    c000343a <dir_clear+0x111>
c0003428:	89 d9                	mov    ecx,ebx
c000342a:	31 d2                	xor    edx,edx
c000342c:	c1 eb 09             	shr    ebx,0x9
c000342f:	e8 ee e5 ff ff       	call   c0001a22 <mem_set>
c0003434:	89 dd                	mov    ebp,ebx
c0003436:	31 db                	xor    ebx,ebx
c0003438:	eb c5                	jmp    c00033ff <dir_clear+0xd6>
c000343a:	83 c4 1c             	add    esp,0x1c
c000343d:	5b                   	pop    ebx
c000343e:	5e                   	pop    esi
c000343f:	5f                   	pop    edi
c0003440:	5d                   	pop    ebp
c0003441:	c3                   	ret    

c0003442 <dir_next>:
c0003442:	55                   	push   ebp
c0003443:	57                   	push   edi
c0003444:	56                   	push   esi
c0003445:	53                   	push   ebx
c0003446:	89 c3                	mov    ebx,eax
c0003448:	83 ec 1c             	sub    esp,0x1c
c000344b:	8b 28                	mov    ebp,DWORD PTR [eax]
c000344d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003451:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003454:	8d 78 20             	lea    edi,[eax+0x20]
c0003457:	31 c0                	xor    eax,eax
c0003459:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c000345d:	0f 94 c0             	sete   al
c0003460:	48                   	dec    eax
c0003461:	25 00 00 20 f0       	and    eax,0xf0200000
c0003466:	05 00 00 00 10       	add    eax,0x10000000
c000346b:	39 f8                	cmp    eax,edi
c000346d:	77 0e                	ja     c000347d <dir_next+0x3b>
c000346f:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003476:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000347d:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003480:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003483:	b8 04 00 00 00       	mov    eax,0x4
c0003488:	89 ce                	mov    esi,ecx
c000348a:	09 d6                	or     esi,edx
c000348c:	0f 84 da 00 00 00    	je     c000356c <dir_next+0x12a>
c0003492:	89 f8                	mov    eax,edi
c0003494:	25 ff 01 00 00       	and    eax,0x1ff
c0003499:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000349d:	0f 85 b9 00 00 00    	jne    c000355c <dir_next+0x11a>
c00034a3:	83 c2 01             	add    edx,0x1
c00034a6:	83 d1 00             	adc    ecx,0x0
c00034a9:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00034ac:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c00034af:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00034b2:	85 d2                	test   edx,edx
c00034b4:	75 29                	jne    c00034df <dir_next+0x9d>
c00034b6:	89 fa                	mov    edx,edi
c00034b8:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c00034bc:	c1 ea 05             	shr    edx,0x5
c00034bf:	39 c2                	cmp    edx,eax
c00034c1:	0f 82 95 00 00 00    	jb     c000355c <dir_next+0x11a>
c00034c7:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00034ce:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00034d5:	b8 04 00 00 00       	mov    eax,0x4
c00034da:	e9 8d 00 00 00       	jmp    c000356c <dir_next+0x12a>
c00034df:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00034e3:	89 f9                	mov    ecx,edi
c00034e5:	48                   	dec    eax
c00034e6:	c1 e9 09             	shr    ecx,0x9
c00034e9:	85 c8                	test   eax,ecx
c00034eb:	75 6f                	jne    c000355c <dir_next+0x11a>
c00034ed:	89 d8                	mov    eax,ebx
c00034ef:	e8 00 f8 ff ff       	call   c0002cf4 <get_fat>
c00034f4:	89 c6                	mov    esi,eax
c00034f6:	83 f8 01             	cmp    eax,0x1
c00034f9:	77 07                	ja     c0003502 <dir_next+0xc0>
c00034fb:	b8 02 00 00 00       	mov    eax,0x2
c0003500:	eb 6a                	jmp    c000356c <dir_next+0x12a>
c0003502:	83 f8 ff             	cmp    eax,0xffffffff
c0003505:	75 07                	jne    c000350e <dir_next+0xcc>
c0003507:	b8 01 00 00 00       	mov    eax,0x1
c000350c:	eb 5e                	jmp    c000356c <dir_next+0x12a>
c000350e:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0003511:	77 37                	ja     c000354a <dir_next+0x108>
c0003513:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003518:	74 ad                	je     c00034c7 <dir_next+0x85>
c000351a:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000351d:	89 d8                	mov    eax,ebx
c000351f:	e8 be fa ff ff       	call   c0002fe2 <create_chain>
c0003524:	89 c6                	mov    esi,eax
c0003526:	b8 07 00 00 00       	mov    eax,0x7
c000352b:	85 f6                	test   esi,esi
c000352d:	74 3d                	je     c000356c <dir_next+0x12a>
c000352f:	83 fe 01             	cmp    esi,0x1
c0003532:	74 c7                	je     c00034fb <dir_next+0xb9>
c0003534:	83 fe ff             	cmp    esi,0xffffffff
c0003537:	74 ce                	je     c0003507 <dir_next+0xc5>
c0003539:	89 f2                	mov    edx,esi
c000353b:	89 e8                	mov    eax,ebp
c000353d:	e8 e7 fd ff ff       	call   c0003329 <dir_clear>
c0003542:	85 c0                	test   eax,eax
c0003544:	75 c1                	jne    c0003507 <dir_next+0xc5>
c0003546:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c000354a:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000354d:	89 f2                	mov    edx,esi
c000354f:	89 e8                	mov    eax,ebp
c0003551:	e8 d1 e6 ff ff       	call   c0001c27 <clst2sect>
c0003556:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003559:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000355c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003560:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c0003563:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003567:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000356a:	31 c0                	xor    eax,eax
c000356c:	83 c4 1c             	add    esp,0x1c
c000356f:	5b                   	pop    ebx
c0003570:	5e                   	pop    esi
c0003571:	5f                   	pop    edi
c0003572:	5d                   	pop    ebp
c0003573:	c3                   	ret    

c0003574 <load_xdir>:
c0003574:	55                   	push   ebp
c0003575:	57                   	push   edi
c0003576:	56                   	push   esi
c0003577:	89 c6                	mov    esi,eax
c0003579:	53                   	push   ebx
c000357a:	83 ec 1c             	sub    esp,0x1c
c000357d:	8b 00                	mov    eax,DWORD PTR [eax]
c000357f:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003582:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003585:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003588:	e8 df eb ff ff       	call   c000216c <move_window>
c000358d:	89 c3                	mov    ebx,eax
c000358f:	85 c0                	test   eax,eax
c0003591:	0f 85 0c 01 00 00    	jne    c00036a3 <load_xdir+0x12f>
c0003597:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000359a:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c000359d:	0f 85 fb 00 00 00    	jne    c000369e <load_xdir+0x12a>
c00035a3:	89 f8                	mov    eax,edi
c00035a5:	b9 20 00 00 00       	mov    ecx,0x20
c00035aa:	e8 5e e4 ff ff       	call   c0001a0d <mem_cpy>
c00035af:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c00035b3:	40                   	inc    eax
c00035b4:	c1 e0 05             	shl    eax,0x5
c00035b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00035bb:	83 e8 60             	sub    eax,0x60
c00035be:	3d 00 02 00 00       	cmp    eax,0x200
c00035c3:	0f 87 d5 00 00 00    	ja     c000369e <load_xdir+0x12a>
c00035c9:	31 d2                	xor    edx,edx
c00035cb:	89 f0                	mov    eax,esi
c00035cd:	e8 70 fe ff ff       	call   c0003442 <dir_next>
c00035d2:	89 c3                	mov    ebx,eax
c00035d4:	83 f8 04             	cmp    eax,0x4
c00035d7:	0f 84 c1 00 00 00    	je     c000369e <load_xdir+0x12a>
c00035dd:	85 c0                	test   eax,eax
c00035df:	0f 85 be 00 00 00    	jne    c00036a3 <load_xdir+0x12f>
c00035e5:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00035e8:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00035eb:	8b 06                	mov    eax,DWORD PTR [esi]
c00035ed:	e8 7a eb ff ff       	call   c000216c <move_window>
c00035f2:	89 c3                	mov    ebx,eax
c00035f4:	85 c0                	test   eax,eax
c00035f6:	0f 85 a7 00 00 00    	jne    c00036a3 <load_xdir+0x12f>
c00035fc:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00035ff:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c0003602:	0f 85 96 00 00 00    	jne    c000369e <load_xdir+0x12a>
c0003608:	8d 47 20             	lea    eax,[edi+0x20]
c000360b:	b9 20 00 00 00       	mov    ecx,0x20
c0003610:	e8 f8 e3 ff ff       	call   c0001a0d <mem_cpy>
c0003615:	31 d2                	xor    edx,edx
c0003617:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c000361b:	b9 0f 00 00 00       	mov    ecx,0xf
c0003620:	83 c0 2c             	add    eax,0x2c
c0003623:	f7 f1                	div    ecx
c0003625:	c1 e0 05             	shl    eax,0x5
c0003628:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000362c:	77 70                	ja     c000369e <load_xdir+0x12a>
c000362e:	bd 40 00 00 00       	mov    ebp,0x40
c0003633:	31 d2                	xor    edx,edx
c0003635:	89 f0                	mov    eax,esi
c0003637:	e8 06 fe ff ff       	call   c0003442 <dir_next>
c000363c:	89 c3                	mov    ebx,eax
c000363e:	83 f8 04             	cmp    eax,0x4
c0003641:	74 5b                	je     c000369e <load_xdir+0x12a>
c0003643:	85 c0                	test   eax,eax
c0003645:	75 5c                	jne    c00036a3 <load_xdir+0x12f>
c0003647:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000364a:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000364d:	8b 06                	mov    eax,DWORD PTR [esi]
c000364f:	e8 18 eb ff ff       	call   c000216c <move_window>
c0003654:	89 c3                	mov    ebx,eax
c0003656:	85 c0                	test   eax,eax
c0003658:	75 49                	jne    c00036a3 <load_xdir+0x12f>
c000365a:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000365d:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c0003660:	75 3c                	jne    c000369e <load_xdir+0x12a>
c0003662:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003668:	77 0d                	ja     c0003677 <load_xdir+0x103>
c000366a:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000366d:	b9 20 00 00 00       	mov    ecx,0x20
c0003672:	e8 96 e3 ff ff       	call   c0001a0d <mem_cpy>
c0003677:	83 c5 20             	add    ebp,0x20
c000367a:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c000367e:	77 b3                	ja     c0003633 <load_xdir+0xbf>
c0003680:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003686:	77 1b                	ja     c00036a3 <load_xdir+0x12f>
c0003688:	89 f8                	mov    eax,edi
c000368a:	e8 cd e7 ff ff       	call   c0001e5c <xdir_sum>
c000368f:	89 c1                	mov    ecx,eax
c0003691:	8d 47 02             	lea    eax,[edi+0x2]
c0003694:	e8 f5 e2 ff ff       	call   c000198e <ld_word>
c0003699:	66 39 c1             	cmp    cx,ax
c000369c:	74 05                	je     c00036a3 <load_xdir+0x12f>
c000369e:	bb 02 00 00 00       	mov    ebx,0x2
c00036a3:	83 c4 1c             	add    esp,0x1c
c00036a6:	89 d8                	mov    eax,ebx
c00036a8:	5b                   	pop    ebx
c00036a9:	5e                   	pop    esi
c00036aa:	5f                   	pop    edi
c00036ab:	5d                   	pop    ebp
c00036ac:	c3                   	ret    

c00036ad <load_obj_xdir>:
c00036ad:	53                   	push   ebx
c00036ae:	89 c3                	mov    ebx,eax
c00036b0:	83 ec 08             	sub    esp,0x8
c00036b3:	8b 02                	mov    eax,DWORD PTR [edx]
c00036b5:	89 03                	mov    DWORD PTR [ebx],eax
c00036b7:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00036ba:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00036bd:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00036c0:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c00036c3:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00036c6:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00036cd:	30 c0                	xor    al,al
c00036cf:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00036d6:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00036d9:	89 d8                	mov    eax,ebx
c00036db:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00036de:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c00036e1:	e8 04 f8 ff ff       	call   c0002eea <dir_sdi>
c00036e6:	85 c0                	test   eax,eax
c00036e8:	75 0b                	jne    c00036f5 <load_obj_xdir+0x48>
c00036ea:	89 d8                	mov    eax,ebx
c00036ec:	83 c4 08             	add    esp,0x8
c00036ef:	5b                   	pop    ebx
c00036f0:	e9 7f fe ff ff       	jmp    c0003574 <load_xdir>
c00036f5:	83 c4 08             	add    esp,0x8
c00036f8:	5b                   	pop    ebx
c00036f9:	c3                   	ret    

c00036fa <dir_read>:
c00036fa:	55                   	push   ebp
c00036fb:	bd 04 00 00 00       	mov    ebp,0x4
c0003700:	57                   	push   edi
c0003701:	56                   	push   esi
c0003702:	be ff ff ff ff       	mov    esi,0xffffffff
c0003707:	53                   	push   ebx
c0003708:	89 c3                	mov    ebx,eax
c000370a:	83 ec 1c             	sub    esp,0x1c
c000370d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003711:	8b 38                	mov    edi,DWORD PTR [eax]
c0003713:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003718:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000371b:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000371e:	89 c8                	mov    eax,ecx
c0003720:	09 d0                	or     eax,edx
c0003722:	0f 84 25 01 00 00    	je     c000384d <dir_read+0x153>
c0003728:	89 f8                	mov    eax,edi
c000372a:	e8 3d ea ff ff       	call   c000216c <move_window>
c000372f:	89 c5                	mov    ebp,eax
c0003731:	85 c0                	test   eax,eax
c0003733:	0f 85 23 01 00 00    	jne    c000385c <dir_read+0x162>
c0003739:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000373c:	8a 0a                	mov    cl,BYTE PTR [edx]
c000373e:	84 c9                	test   cl,cl
c0003740:	0f 84 11 01 00 00    	je     c0003857 <dir_read+0x15d>
c0003746:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003749:	75 48                	jne    c0003793 <dir_read+0x99>
c000374b:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003750:	74 10                	je     c0003762 <dir_read+0x68>
c0003752:	80 f9 83             	cmp    cl,0x83
c0003755:	0f 85 dd 00 00 00    	jne    c0003838 <dir_read+0x13e>
c000375b:	31 ed                	xor    ebp,ebp
c000375d:	e9 08 01 00 00       	jmp    c000386a <dir_read+0x170>
c0003762:	80 f9 85             	cmp    cl,0x85
c0003765:	0f 85 cd 00 00 00    	jne    c0003838 <dir_read+0x13e>
c000376b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000376e:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003771:	89 d8                	mov    eax,ebx
c0003773:	e8 fc fd ff ff       	call   c0003574 <load_xdir>
c0003778:	89 c5                	mov    ebp,eax
c000377a:	85 c0                	test   eax,eax
c000377c:	0f 85 da 00 00 00    	jne    c000385c <dir_read+0x162>
c0003782:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003785:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003788:	83 e0 3f             	and    eax,0x3f
c000378b:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000378e:	e9 d7 00 00 00       	jmp    c000386a <dir_read+0x170>
c0003793:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003796:	83 e0 3f             	and    eax,0x3f
c0003799:	80 f9 2e             	cmp    cl,0x2e
c000379c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00037a0:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00037a3:	0f 84 8a 00 00 00    	je     c0003833 <dir_read+0x139>
c00037a9:	80 f9 e5             	cmp    cl,0xe5
c00037ac:	0f 84 81 00 00 00    	je     c0003833 <dir_read+0x139>
c00037b2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00037b6:	83 e0 1f             	and    eax,0x1f
c00037b9:	83 f8 08             	cmp    eax,0x8
c00037bc:	0f 94 c0             	sete   al
c00037bf:	0f b6 c0             	movzx  eax,al
c00037c2:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00037c6:	75 6b                	jne    c0003833 <dir_read+0x139>
c00037c8:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c00037cd:	75 44                	jne    c0003813 <dir_read+0x119>
c00037cf:	f6 c1 40             	test   cl,0x40
c00037d2:	74 12                	je     c00037e6 <dir_read+0xec>
c00037d4:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00037d7:	83 e1 bf             	and    ecx,0xffffffbf
c00037da:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00037de:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00037e1:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c00037e4:	eb 06                	jmp    c00037ec <dir_read+0xf2>
c00037e6:	89 f0                	mov    eax,esi
c00037e8:	38 c8                	cmp    al,cl
c00037ea:	75 47                	jne    c0003833 <dir_read+0x139>
c00037ec:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00037f0:	be ff ff ff ff       	mov    esi,0xffffffff
c00037f5:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00037f8:	75 3e                	jne    c0003838 <dir_read+0x13e>
c00037fa:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00037fe:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003801:	e8 8a e4 ff ff       	call   c0001c90 <pick_lfn>
c0003806:	85 c0                	test   eax,eax
c0003808:	74 2e                	je     c0003838 <dir_read+0x13e>
c000380a:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000380e:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003811:	eb 25                	jmp    c0003838 <dir_read+0x13e>
c0003813:	89 f0                	mov    eax,esi
c0003815:	84 c0                	test   al,al
c0003817:	75 11                	jne    c000382a <dir_read+0x130>
c0003819:	89 d0                	mov    eax,edx
c000381b:	e8 2a e6 ff ff       	call   c0001e4a <sum_sfn>
c0003820:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003824:	0f 84 31 ff ff ff    	je     c000375b <dir_read+0x61>
c000382a:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003831:	eb 37                	jmp    c000386a <dir_read+0x170>
c0003833:	be ff ff ff ff       	mov    esi,0xffffffff
c0003838:	31 d2                	xor    edx,edx
c000383a:	89 d8                	mov    eax,ebx
c000383c:	e8 01 fc ff ff       	call   c0003442 <dir_next>
c0003841:	89 c5                	mov    ebp,eax
c0003843:	85 c0                	test   eax,eax
c0003845:	0f 84 cd fe ff ff    	je     c0003718 <dir_read+0x1e>
c000384b:	eb 0f                	jmp    c000385c <dir_read+0x162>
c000384d:	85 ed                	test   ebp,ebp
c000384f:	0f 84 06 ff ff ff    	je     c000375b <dir_read+0x61>
c0003855:	eb 05                	jmp    c000385c <dir_read+0x162>
c0003857:	bd 04 00 00 00       	mov    ebp,0x4
c000385c:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003863:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000386a:	83 c4 1c             	add    esp,0x1c
c000386d:	89 e8                	mov    eax,ebp
c000386f:	5b                   	pop    ebx
c0003870:	5e                   	pop    esi
c0003871:	5f                   	pop    edi
c0003872:	5d                   	pop    ebp
c0003873:	c3                   	ret    

c0003874 <dir_alloc>:
c0003874:	55                   	push   ebp
c0003875:	89 d5                	mov    ebp,edx
c0003877:	57                   	push   edi
c0003878:	31 d2                	xor    edx,edx
c000387a:	56                   	push   esi
c000387b:	53                   	push   ebx
c000387c:	89 c3                	mov    ebx,eax
c000387e:	83 ec 0c             	sub    esp,0xc
c0003881:	8b 38                	mov    edi,DWORD PTR [eax]
c0003883:	e8 62 f6 ff ff       	call   c0002eea <dir_sdi>
c0003888:	85 c0                	test   eax,eax
c000388a:	75 4e                	jne    c00038da <dir_alloc+0x66>
c000388c:	31 f6                	xor    esi,esi
c000388e:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003891:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003894:	89 f8                	mov    eax,edi
c0003896:	e8 d1 e8 ff ff       	call   c000216c <move_window>
c000389b:	85 c0                	test   eax,eax
c000389d:	75 3b                	jne    c00038da <dir_alloc+0x66>
c000389f:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00038a2:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00038a5:	8a 12                	mov    dl,BYTE PTR [edx]
c00038a7:	75 07                	jne    c00038b0 <dir_alloc+0x3c>
c00038a9:	f7 d2                	not    edx
c00038ab:	c0 ea 07             	shr    dl,0x7
c00038ae:	eb 0d                	jmp    c00038bd <dir_alloc+0x49>
c00038b0:	84 d2                	test   dl,dl
c00038b2:	0f 94 c1             	sete   cl
c00038b5:	80 fa e5             	cmp    dl,0xe5
c00038b8:	0f 94 c2             	sete   dl
c00038bb:	09 ca                	or     edx,ecx
c00038bd:	84 d2                	test   dl,dl
c00038bf:	74 07                	je     c00038c8 <dir_alloc+0x54>
c00038c1:	46                   	inc    esi
c00038c2:	39 ee                	cmp    esi,ebp
c00038c4:	75 04                	jne    c00038ca <dir_alloc+0x56>
c00038c6:	eb 1c                	jmp    c00038e4 <dir_alloc+0x70>
c00038c8:	31 f6                	xor    esi,esi
c00038ca:	ba 01 00 00 00       	mov    edx,0x1
c00038cf:	89 d8                	mov    eax,ebx
c00038d1:	e8 6c fb ff ff       	call   c0003442 <dir_next>
c00038d6:	85 c0                	test   eax,eax
c00038d8:	74 b4                	je     c000388e <dir_alloc+0x1a>
c00038da:	83 f8 04             	cmp    eax,0x4
c00038dd:	75 05                	jne    c00038e4 <dir_alloc+0x70>
c00038df:	b8 07 00 00 00       	mov    eax,0x7
c00038e4:	83 c4 0c             	add    esp,0xc
c00038e7:	5b                   	pop    ebx
c00038e8:	5e                   	pop    esi
c00038e9:	5f                   	pop    edi
c00038ea:	5d                   	pop    ebp
c00038eb:	c3                   	ret    

c00038ec <store_xdir>:
c00038ec:	55                   	push   ebp
c00038ed:	57                   	push   edi
c00038ee:	89 c7                	mov    edi,eax
c00038f0:	56                   	push   esi
c00038f1:	53                   	push   ebx
c00038f2:	83 ec 0c             	sub    esp,0xc
c00038f5:	8b 00                	mov    eax,DWORD PTR [eax]
c00038f7:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c00038fa:	89 e8                	mov    eax,ebp
c00038fc:	e8 5b e5 ff ff       	call   c0001e5c <xdir_sum>
c0003901:	0f b7 d0             	movzx  edx,ax
c0003904:	8d 45 02             	lea    eax,[ebp+0x2]
c0003907:	e8 f4 e0 ff ff       	call   c0001a00 <st_word>
c000390c:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003910:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003913:	89 f8                	mov    eax,edi
c0003915:	e8 d0 f5 ff ff       	call   c0002eea <dir_sdi>
c000391a:	89 c6                	mov    esi,eax
c000391c:	85 f6                	test   esi,esi
c000391e:	75 3d                	jne    c000395d <store_xdir+0x71>
c0003920:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003923:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003926:	8b 07                	mov    eax,DWORD PTR [edi]
c0003928:	e8 3f e8 ff ff       	call   c000216c <move_window>
c000392d:	89 c6                	mov    esi,eax
c000392f:	85 c0                	test   eax,eax
c0003931:	75 2a                	jne    c000395d <store_xdir+0x71>
c0003933:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003936:	b9 20 00 00 00       	mov    ecx,0x20
c000393b:	89 ea                	mov    edx,ebp
c000393d:	e8 cb e0 ff ff       	call   c0001a0d <mem_cpy>
c0003942:	8b 07                	mov    eax,DWORD PTR [edi]
c0003944:	85 db                	test   ebx,ebx
c0003946:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000394a:	74 11                	je     c000395d <store_xdir+0x71>
c000394c:	31 d2                	xor    edx,edx
c000394e:	89 f8                	mov    eax,edi
c0003950:	83 c5 20             	add    ebp,0x20
c0003953:	e8 ea fa ff ff       	call   c0003442 <dir_next>
c0003958:	4b                   	dec    ebx
c0003959:	89 c6                	mov    esi,eax
c000395b:	eb bf                	jmp    c000391c <store_xdir+0x30>
c000395d:	89 f0                	mov    eax,esi
c000395f:	83 fe 02             	cmp    esi,0x2
c0003962:	76 05                	jbe    c0003969 <store_xdir+0x7d>
c0003964:	b8 02 00 00 00       	mov    eax,0x2
c0003969:	83 c4 0c             	add    esp,0xc
c000396c:	5b                   	pop    ebx
c000396d:	5e                   	pop    esi
c000396e:	5f                   	pop    edi
c000396f:	5d                   	pop    ebp
c0003970:	c3                   	ret    

c0003971 <dir_remove>:
c0003971:	57                   	push   edi
c0003972:	56                   	push   esi
c0003973:	53                   	push   ebx
c0003974:	89 c3                	mov    ebx,eax
c0003976:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003979:	8b 30                	mov    esi,DWORD PTR [eax]
c000397b:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c000397e:	83 fa ff             	cmp    edx,0xffffffff
c0003981:	74 09                	je     c000398c <dir_remove+0x1b>
c0003983:	e8 62 f5 ff ff       	call   c0002eea <dir_sdi>
c0003988:	85 c0                	test   eax,eax
c000398a:	75 41                	jne    c00039cd <dir_remove+0x5c>
c000398c:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000398f:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003992:	89 f0                	mov    eax,esi
c0003994:	e8 d3 e7 ff ff       	call   c000216c <move_window>
c0003999:	85 c0                	test   eax,eax
c000399b:	75 26                	jne    c00039c3 <dir_remove+0x52>
c000399d:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00039a0:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00039a3:	75 05                	jne    c00039aa <dir_remove+0x39>
c00039a5:	80 22 7f             	and    BYTE PTR [edx],0x7f
c00039a8:	eb 03                	jmp    c00039ad <dir_remove+0x3c>
c00039aa:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c00039ad:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00039b1:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c00039b4:	73 17                	jae    c00039cd <dir_remove+0x5c>
c00039b6:	31 d2                	xor    edx,edx
c00039b8:	89 d8                	mov    eax,ebx
c00039ba:	e8 83 fa ff ff       	call   c0003442 <dir_next>
c00039bf:	85 c0                	test   eax,eax
c00039c1:	74 c9                	je     c000398c <dir_remove+0x1b>
c00039c3:	83 f8 04             	cmp    eax,0x4
c00039c6:	75 05                	jne    c00039cd <dir_remove+0x5c>
c00039c8:	b8 02 00 00 00       	mov    eax,0x2
c00039cd:	5b                   	pop    ebx
c00039ce:	5e                   	pop    esi
c00039cf:	5f                   	pop    edi
c00039d0:	c3                   	ret    

c00039d1 <create_name>:
c00039d1:	55                   	push   ebp
c00039d2:	89 d5                	mov    ebp,edx
c00039d4:	57                   	push   edi
c00039d5:	89 c7                	mov    edi,eax
c00039d7:	56                   	push   esi
c00039d8:	31 f6                	xor    esi,esi
c00039da:	53                   	push   ebx
c00039db:	83 ec 3c             	sub    esp,0x3c
c00039de:	8b 02                	mov    eax,DWORD PTR [edx]
c00039e0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00039e4:	8b 07                	mov    eax,DWORD PTR [edi]
c00039e6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00039e9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00039ed:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00039f1:	e8 72 e0 ff ff       	call   c0001a68 <tchar2uni>
c00039f6:	89 c3                	mov    ebx,eax
c00039f8:	83 f8 ff             	cmp    eax,0xffffffff
c00039fb:	75 0a                	jne    c0003a07 <create_name+0x36>
c00039fd:	b8 06 00 00 00       	mov    eax,0x6
c0003a02:	e9 9e 02 00 00       	jmp    c0003ca5 <create_name+0x2d4>
c0003a07:	3d ff ff 00 00       	cmp    eax,0xffff
c0003a0c:	76 0c                	jbe    c0003a1a <create_name+0x49>
c0003a0e:	c1 e8 10             	shr    eax,0x10
c0003a11:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003a15:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003a19:	46                   	inc    esi
c0003a1a:	66 83 fb 1f          	cmp    bx,0x1f
c0003a1e:	76 4f                	jbe    c0003a6f <create_name+0x9e>
c0003a20:	66 83 fb 5c          	cmp    bx,0x5c
c0003a24:	74 35                	je     c0003a5b <create_name+0x8a>
c0003a26:	66 83 fb 2f          	cmp    bx,0x2f
c0003a2a:	74 2f                	je     c0003a5b <create_name+0x8a>
c0003a2c:	66 83 fb 7f          	cmp    bx,0x7f
c0003a30:	77 11                	ja     c0003a43 <create_name+0x72>
c0003a32:	0f b7 d3             	movzx  edx,bx
c0003a35:	b8 d2 f3 01 c0       	mov    eax,0xc001f3d2
c0003a3a:	e8 11 e0 ff ff       	call   c0001a50 <chk_chr>
c0003a3f:	85 c0                	test   eax,eax
c0003a41:	75 ba                	jne    c00039fd <create_name+0x2c>
c0003a43:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003a49:	77 b2                	ja     c00039fd <create_name+0x2c>
c0003a4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003a4f:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003a53:	46                   	inc    esi
c0003a54:	eb 97                	jmp    c00039ed <create_name+0x1c>
c0003a56:	40                   	inc    eax
c0003a57:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003a5b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003a5f:	8a 10                	mov    dl,BYTE PTR [eax]
c0003a61:	80 fa 2f             	cmp    dl,0x2f
c0003a64:	74 f0                	je     c0003a56 <create_name+0x85>
c0003a66:	80 fa 5c             	cmp    dl,0x5c
c0003a69:	74 eb                	je     c0003a56 <create_name+0x85>
c0003a6b:	31 db                	xor    ebx,ebx
c0003a6d:	eb 02                	jmp    c0003a71 <create_name+0xa0>
c0003a6f:	b3 04                	mov    bl,0x4
c0003a71:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003a75:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003a78:	85 f6                	test   esi,esi
c0003a7a:	74 18                	je     c0003a94 <create_name+0xc3>
c0003a7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003a80:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003a85:	66 83 f8 20          	cmp    ax,0x20
c0003a89:	74 06                	je     c0003a91 <create_name+0xc0>
c0003a8b:	66 83 f8 2e          	cmp    ax,0x2e
c0003a8f:	75 03                	jne    c0003a94 <create_name+0xc3>
c0003a91:	4e                   	dec    esi
c0003a92:	eb e4                	jmp    c0003a78 <create_name+0xa7>
c0003a94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003a98:	31 ed                	xor    ebp,ebp
c0003a9a:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003aa0:	85 f6                	test   esi,esi
c0003aa2:	0f 84 55 ff ff ff    	je     c00039fd <create_name+0x2c>
c0003aa8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003aac:	8d 55 01             	lea    edx,[ebp+0x1]
c0003aaf:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003ab3:	66 83 f8 20          	cmp    ax,0x20
c0003ab7:	75 04                	jne    c0003abd <create_name+0xec>
c0003ab9:	89 d5                	mov    ebp,edx
c0003abb:	eb eb                	jmp    c0003aa8 <create_name+0xd7>
c0003abd:	85 ed                	test   ebp,ebp
c0003abf:	75 06                	jne    c0003ac7 <create_name+0xf6>
c0003ac1:	66 83 f8 2e          	cmp    ax,0x2e
c0003ac5:	75 08                	jne    c0003acf <create_name+0xfe>
c0003ac7:	83 cb 03             	or     ebx,0x3
c0003aca:	eb 03                	jmp    c0003acf <create_name+0xfe>
c0003acc:	4e                   	dec    esi
c0003acd:	74 0c                	je     c0003adb <create_name+0x10a>
c0003acf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003ad3:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003ad9:	75 f1                	jne    c0003acc <create_name+0xfb>
c0003adb:	b9 0b 00 00 00       	mov    ecx,0xb
c0003ae0:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003ae3:	ba 20 00 00 00       	mov    edx,0x20
c0003ae8:	e8 35 df ff ff       	call   c0001a22 <mem_set>
c0003aed:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003af5:	31 c9                	xor    ecx,ecx
c0003af7:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003afc:	8d 45 01             	lea    eax,[ebp+0x1]
c0003aff:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003b03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b07:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003b0b:	66 85 ed             	test   bp,bp
c0003b0e:	0f 84 30 01 00 00    	je     c0003c44 <create_name+0x273>
c0003b14:	66 83 fd 20          	cmp    bp,0x20
c0003b18:	74 10                	je     c0003b2a <create_name+0x159>
c0003b1a:	66 83 fd 2e          	cmp    bp,0x2e
c0003b1e:	75 13                	jne    c0003b33 <create_name+0x162>
c0003b20:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003b24:	0f 84 6b 01 00 00    	je     c0003c95 <create_name+0x2c4>
c0003b2a:	83 cb 03             	or     ebx,0x3
c0003b2d:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003b31:	eb c9                	jmp    c0003afc <create_name+0x12b>
c0003b33:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003b37:	73 0b                	jae    c0003b44 <create_name+0x173>
c0003b39:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003b3d:	75 47                	jne    c0003b86 <create_name+0x1b5>
c0003b3f:	e9 51 01 00 00       	jmp    c0003c95 <create_name+0x2c4>
c0003b44:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003b49:	75 10                	jne    c0003b5b <create_name+0x18a>
c0003b4b:	83 cb 03             	or     ebx,0x3
c0003b4e:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003b56:	e9 e9 00 00 00       	jmp    c0003c44 <create_name+0x273>
c0003b5b:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003b5f:	74 0d                	je     c0003b6e <create_name+0x19d>
c0003b61:	83 cb 03             	or     ebx,0x3
c0003b64:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003b68:	0f 87 d6 00 00 00    	ja     c0003c44 <create_name+0x273>
c0003b6e:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003b73:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003b77:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003b7f:	b9 08 00 00 00       	mov    ecx,0x8
c0003b84:	eb a7                	jmp    c0003b2d <create_name+0x15c>
c0003b86:	66 83 fd 7f          	cmp    bp,0x7f
c0003b8a:	76 68                	jbe    c0003bf4 <create_name+0x223>
c0003b8c:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003b90:	88 da                	mov    dl,bl
c0003b92:	83 ca 02             	or     edx,0x2
c0003b95:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003b99:	50                   	push   eax
c0003b9a:	50                   	push   eax
c0003b9b:	68 b5 01 00 00       	push   0x1b5
c0003ba0:	55                   	push   ebp
c0003ba1:	e8 48 46 00 00       	call   c00081ee <ff_uni2oem>
c0003ba6:	83 c4 10             	add    esp,0x10
c0003ba9:	89 c5                	mov    ebp,eax
c0003bab:	a8 80                	test   al,0x80
c0003bad:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003bb1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003bb5:	74 0c                	je     c0003bc3 <create_name+0x1f2>
c0003bb7:	83 e5 7f             	and    ebp,0x7f
c0003bba:	0f b6 ad 20 f3 01 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffe0ce0]
c0003bc1:	eb 2a                	jmp    c0003bed <create_name+0x21c>
c0003bc3:	66 3d ff 00          	cmp    ax,0xff
c0003bc7:	76 24                	jbe    c0003bed <create_name+0x21c>
c0003bc9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003bcd:	48                   	dec    eax
c0003bce:	39 c8                	cmp    eax,ecx
c0003bd0:	77 0c                	ja     c0003bde <create_name+0x20d>
c0003bd2:	83 cb 03             	or     ebx,0x3
c0003bd5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003bd9:	e9 4f ff ff ff       	jmp    c0003b2d <create_name+0x15c>
c0003bde:	89 e8                	mov    eax,ebp
c0003be0:	88 d3                	mov    bl,dl
c0003be2:	66 c1 e8 08          	shr    ax,0x8
c0003be6:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003bea:	41                   	inc    ecx
c0003beb:	eb 4b                	jmp    c0003c38 <create_name+0x267>
c0003bed:	88 d3                	mov    bl,dl
c0003bef:	66 85 ed             	test   bp,bp
c0003bf2:	74 19                	je     c0003c0d <create_name+0x23c>
c0003bf4:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003bf8:	0f b7 d5             	movzx  edx,bp
c0003bfb:	b8 db f3 01 c0       	mov    eax,0xc001f3db
c0003c00:	e8 4b de ff ff       	call   c0001a50 <chk_chr>
c0003c05:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003c09:	85 c0                	test   eax,eax
c0003c0b:	74 0a                	je     c0003c17 <create_name+0x246>
c0003c0d:	83 cb 03             	or     ebx,0x3
c0003c10:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003c15:	eb 21                	jmp    c0003c38 <create_name+0x267>
c0003c17:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003c1a:	66 83 f8 19          	cmp    ax,0x19
c0003c1e:	77 07                	ja     c0003c27 <create_name+0x256>
c0003c20:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003c25:	eb 11                	jmp    c0003c38 <create_name+0x267>
c0003c27:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003c2a:	66 83 f8 19          	cmp    ax,0x19
c0003c2e:	77 08                	ja     c0003c38 <create_name+0x267>
c0003c30:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003c35:	83 ed 20             	sub    ebp,0x20
c0003c38:	89 e8                	mov    eax,ebp
c0003c3a:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003c3e:	41                   	inc    ecx
c0003c3f:	e9 e9 fe ff ff       	jmp    c0003b2d <create_name+0x15c>
c0003c44:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003c48:	75 04                	jne    c0003c4e <create_name+0x27d>
c0003c4a:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003c4e:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003c53:	75 05                	jne    c0003c5a <create_name+0x289>
c0003c55:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003c5a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003c5e:	83 e0 0c             	and    eax,0xc
c0003c61:	3c 0c                	cmp    al,0xc
c0003c63:	74 0b                	je     c0003c70 <create_name+0x29f>
c0003c65:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003c69:	83 e0 03             	and    eax,0x3
c0003c6c:	3c 03                	cmp    al,0x3
c0003c6e:	75 05                	jne    c0003c75 <create_name+0x2a4>
c0003c70:	83 cb 02             	or     ebx,0x2
c0003c73:	eb 19                	jmp    c0003c8e <create_name+0x2bd>
c0003c75:	f6 c3 02             	test   bl,0x2
c0003c78:	75 14                	jne    c0003c8e <create_name+0x2bd>
c0003c7a:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003c7f:	74 03                	je     c0003c84 <create_name+0x2b3>
c0003c81:	83 cb 10             	or     ebx,0x10
c0003c84:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003c89:	74 03                	je     c0003c8e <create_name+0x2bd>
c0003c8b:	83 cb 08             	or     ebx,0x8
c0003c8e:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003c91:	31 c0                	xor    eax,eax
c0003c93:	eb 10                	jmp    c0003ca5 <create_name+0x2d4>
c0003c95:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003c9a:	0f 85 ce fe ff ff    	jne    c0003b6e <create_name+0x19d>
c0003ca0:	e9 a6 fe ff ff       	jmp    c0003b4b <create_name+0x17a>
c0003ca5:	83 c4 3c             	add    esp,0x3c
c0003ca8:	5b                   	pop    ebx
c0003ca9:	5e                   	pop    esi
c0003caa:	5f                   	pop    edi
c0003cab:	5d                   	pop    ebp
c0003cac:	c3                   	ret    

c0003cad <xname_sum>:
c0003cad:	56                   	push   esi
c0003cae:	53                   	push   ebx
c0003caf:	89 c6                	mov    esi,eax
c0003cb1:	51                   	push   ecx
c0003cb2:	31 db                	xor    ebx,ebx
c0003cb4:	83 c6 02             	add    esi,0x2
c0003cb7:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003cbb:	66 85 c0             	test   ax,ax
c0003cbe:	74 1f                	je     c0003cdf <xname_sum+0x32>
c0003cc0:	83 ec 0c             	sub    esp,0xc
c0003cc3:	66 d1 cb             	ror    bx,1
c0003cc6:	50                   	push   eax
c0003cc7:	e8 1e 46 00 00       	call   c00082ea <ff_wtoupper>
c0003ccc:	83 c4 10             	add    esp,0x10
c0003ccf:	0f b6 d0             	movzx  edx,al
c0003cd2:	66 c1 e8 08          	shr    ax,0x8
c0003cd6:	01 d3                	add    ebx,edx
c0003cd8:	66 d1 cb             	ror    bx,1
c0003cdb:	01 c3                	add    ebx,eax
c0003cdd:	eb d5                	jmp    c0003cb4 <xname_sum+0x7>
c0003cdf:	89 d8                	mov    eax,ebx
c0003ce1:	5a                   	pop    edx
c0003ce2:	5b                   	pop    ebx
c0003ce3:	5e                   	pop    esi
c0003ce4:	c3                   	ret    

c0003ce5 <create_xdir>:
c0003ce5:	55                   	push   ebp
c0003ce6:	b9 40 00 00 00       	mov    ecx,0x40
c0003ceb:	57                   	push   edi
c0003cec:	bd 01 00 00 00       	mov    ebp,0x1
c0003cf1:	56                   	push   esi
c0003cf2:	31 ff                	xor    edi,edi
c0003cf4:	53                   	push   ebx
c0003cf5:	be 40 00 00 00       	mov    esi,0x40
c0003cfa:	89 c3                	mov    ebx,eax
c0003cfc:	83 ec 1c             	sub    esp,0x1c
c0003cff:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003d03:	31 d2                	xor    edx,edx
c0003d05:	e8 18 dd ff ff       	call   c0001a22 <mem_set>
c0003d0a:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003d0d:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003d11:	31 c9                	xor    ecx,ecx
c0003d13:	8d 46 01             	lea    eax,[esi+0x1]
c0003d16:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003d1a:	83 c6 02             	add    esi,0x2
c0003d1d:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003d21:	66 85 ed             	test   bp,bp
c0003d24:	74 12                	je     c0003d38 <create_xdir+0x53>
c0003d26:	0f b6 c1             	movzx  eax,cl
c0003d29:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003d2d:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003d31:	66 83 fd 01          	cmp    bp,0x1
c0003d35:	80 d9 ff             	sbb    cl,0xff
c0003d38:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003d3b:	0f b7 d5             	movzx  edx,bp
c0003d3e:	83 c6 02             	add    esi,0x2
c0003d41:	e8 ba dc ff ff       	call   c0001a00 <st_word>
c0003d46:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003d4c:	75 d3                	jne    c0003d21 <create_xdir+0x3c>
c0003d4e:	8d 47 01             	lea    eax,[edi+0x1]
c0003d51:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003d55:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003d59:	0f b6 c1             	movzx  eax,cl
c0003d5c:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003d61:	74 07                	je     c0003d6a <create_xdir+0x85>
c0003d63:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0003d68:	eb a9                	jmp    c0003d13 <create_xdir+0x2e>
c0003d6a:	8d 47 02             	lea    eax,[edi+0x2]
c0003d6d:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0003d70:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0003d73:	89 d0                	mov    eax,edx
c0003d75:	e8 33 ff ff ff       	call   c0003cad <xname_sum>
c0003d7a:	83 c4 1c             	add    esp,0x1c
c0003d7d:	0f b7 d0             	movzx  edx,ax
c0003d80:	8d 43 24             	lea    eax,[ebx+0x24]
c0003d83:	5b                   	pop    ebx
c0003d84:	5e                   	pop    esi
c0003d85:	5f                   	pop    edi
c0003d86:	5d                   	pop    ebp
c0003d87:	e9 74 dc ff ff       	jmp    c0001a00 <st_word>

c0003d8c <cmp_lfn>:
c0003d8c:	55                   	push   ebp
c0003d8d:	57                   	push   edi
c0003d8e:	89 d7                	mov    edi,edx
c0003d90:	56                   	push   esi
c0003d91:	53                   	push   ebx
c0003d92:	83 ec 1c             	sub    esp,0x1c
c0003d95:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003d99:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003d9c:	e8 ed db ff ff       	call   c000198e <ld_word>
c0003da1:	66 85 c0             	test   ax,ax
c0003da4:	74 07                	je     c0003dad <cmp_lfn+0x21>
c0003da6:	31 c0                	xor    eax,eax
c0003da8:	e9 9a 00 00 00       	jmp    c0003e47 <cmp_lfn+0xbb>
c0003dad:	8a 1f                	mov    bl,BYTE PTR [edi]
c0003daf:	bd 01 00 00 00       	mov    ebp,0x1
c0003db4:	83 e3 3f             	and    ebx,0x3f
c0003db7:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0003dbf:	4b                   	dec    ebx
c0003dc0:	6b db 0d             	imul   ebx,ebx,0xd
c0003dc3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003dc7:	0f b6 80 a0 f3 01 c0 	movzx  eax,BYTE PTR [eax-0x3ffe0c60]
c0003dce:	01 f8                	add    eax,edi
c0003dd0:	e8 b9 db ff ff       	call   c000198e <ld_word>
c0003dd5:	66 85 ed             	test   bp,bp
c0003dd8:	89 c6                	mov    esi,eax
c0003dda:	74 3c                	je     c0003e18 <cmp_lfn+0x8c>
c0003ddc:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0003de2:	77 c2                	ja     c0003da6 <cmp_lfn+0x1a>
c0003de4:	83 ec 0c             	sub    esp,0xc
c0003de7:	0f b7 c0             	movzx  eax,ax
c0003dea:	50                   	push   eax
c0003deb:	e8 fa 44 00 00       	call   c00082ea <ff_wtoupper>
c0003df0:	89 c5                	mov    ebp,eax
c0003df2:	8d 43 01             	lea    eax,[ebx+0x1]
c0003df5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0003df9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0003dfd:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0003e01:	89 04 24             	mov    DWORD PTR [esp],eax
c0003e04:	e8 e1 44 00 00       	call   c00082ea <ff_wtoupper>
c0003e09:	83 c4 10             	add    esp,0x10
c0003e0c:	39 c5                	cmp    ebp,eax
c0003e0e:	75 96                	jne    c0003da6 <cmp_lfn+0x1a>
c0003e10:	89 f5                	mov    ebp,esi
c0003e12:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0003e16:	eb 04                	jmp    c0003e1c <cmp_lfn+0x90>
c0003e18:	66 46                	inc    si
c0003e1a:	75 8a                	jne    c0003da6 <cmp_lfn+0x1a>
c0003e1c:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0003e20:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0003e25:	75 9c                	jne    c0003dc3 <cmp_lfn+0x37>
c0003e27:	f6 07 40             	test   BYTE PTR [edi],0x40
c0003e2a:	74 16                	je     c0003e42 <cmp_lfn+0xb6>
c0003e2c:	66 85 ed             	test   bp,bp
c0003e2f:	74 11                	je     c0003e42 <cmp_lfn+0xb6>
c0003e31:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003e35:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0003e3a:	0f 94 c0             	sete   al
c0003e3d:	0f b6 c0             	movzx  eax,al
c0003e40:	eb 05                	jmp    c0003e47 <cmp_lfn+0xbb>
c0003e42:	b8 01 00 00 00       	mov    eax,0x1
c0003e47:	83 c4 1c             	add    esp,0x1c
c0003e4a:	5b                   	pop    ebx
c0003e4b:	5e                   	pop    esi
c0003e4c:	5f                   	pop    edi
c0003e4d:	5d                   	pop    ebp
c0003e4e:	c3                   	ret    

c0003e4f <dir_find>:
c0003e4f:	55                   	push   ebp
c0003e50:	31 d2                	xor    edx,edx
c0003e52:	57                   	push   edi
c0003e53:	56                   	push   esi
c0003e54:	53                   	push   ebx
c0003e55:	89 c3                	mov    ebx,eax
c0003e57:	83 ec 1c             	sub    esp,0x1c
c0003e5a:	8b 30                	mov    esi,DWORD PTR [eax]
c0003e5c:	e8 89 f0 ff ff       	call   c0002eea <dir_sdi>
c0003e61:	89 04 24             	mov    DWORD PTR [esp],eax
c0003e64:	85 c0                	test   eax,eax
c0003e66:	0f 85 9e 01 00 00    	jne    c000400a <dir_find+0x1bb>
c0003e6c:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003e6f:	0f 85 8d 00 00 00    	jne    c0003f02 <dir_find+0xb3>
c0003e75:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003e78:	e8 30 fe ff ff       	call   c0003cad <xname_sum>
c0003e7d:	89 c7                	mov    edi,eax
c0003e7f:	31 d2                	xor    edx,edx
c0003e81:	89 d8                	mov    eax,ebx
c0003e83:	e8 72 f8 ff ff       	call   c00036fa <dir_read>
c0003e88:	85 c0                	test   eax,eax
c0003e8a:	0f 85 5e 01 00 00    	jne    c0003fee <dir_find+0x19f>
c0003e90:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0003e93:	8d 41 24             	lea    eax,[ecx+0x24]
c0003e96:	e8 f3 da ff ff       	call   c000198e <ld_word>
c0003e9b:	66 39 f8             	cmp    ax,di
c0003e9e:	75 df                	jne    c0003e7f <dir_find+0x30>
c0003ea0:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0003ea3:	31 ed                	xor    ebp,ebp
c0003ea5:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0003ea9:	ba 40 00 00 00       	mov    edx,0x40
c0003eae:	89 e9                	mov    ecx,ebp
c0003eb0:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0003eb4:	0f 84 42 01 00 00    	je     c0003ffc <dir_find+0x1ad>
c0003eba:	f6 c2 1f             	test   dl,0x1f
c0003ebd:	75 03                	jne    c0003ec2 <dir_find+0x73>
c0003ebf:	83 c2 02             	add    edx,0x2
c0003ec2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003ec6:	89 d0                	mov    eax,edx
c0003ec8:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0003ecb:	e8 be da ff ff       	call   c000198e <ld_word>
c0003ed0:	83 ec 0c             	sub    esp,0xc
c0003ed3:	0f b7 c0             	movzx  eax,ax
c0003ed6:	50                   	push   eax
c0003ed7:	e8 0e 44 00 00       	call   c00082ea <ff_wtoupper>
c0003edc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003ee0:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003ee3:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c0003ee7:	89 04 24             	mov    DWORD PTR [esp],eax
c0003eea:	e8 fb 43 00 00       	call   c00082ea <ff_wtoupper>
c0003eef:	83 c4 10             	add    esp,0x10
c0003ef2:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0003ef6:	75 87                	jne    c0003e7f <dir_find+0x30>
c0003ef8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003efc:	45                   	inc    ebp
c0003efd:	83 c2 02             	add    edx,0x2
c0003f00:	eb ac                	jmp    c0003eae <dir_find+0x5f>
c0003f02:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003f09:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c0003f0e:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003f13:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003f16:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003f19:	89 f0                	mov    eax,esi
c0003f1b:	e8 4c e2 ff ff       	call   c000216c <move_window>
c0003f20:	85 c0                	test   eax,eax
c0003f22:	0f 85 c6 00 00 00    	jne    c0003fee <dir_find+0x19f>
c0003f28:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0003f2b:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c0003f2e:	84 c9                	test   cl,cl
c0003f30:	0f 84 bd 00 00 00    	je     c0003ff3 <dir_find+0x1a4>
c0003f36:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0003f39:	88 d0                	mov    al,dl
c0003f3b:	83 e0 3f             	and    eax,0x3f
c0003f3e:	80 f9 e5             	cmp    cl,0xe5
c0003f41:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003f44:	0f 84 87 00 00 00    	je     c0003fd1 <dir_find+0x182>
c0003f4a:	80 e2 08             	and    dl,0x8
c0003f4d:	74 06                	je     c0003f55 <dir_find+0x106>
c0003f4f:	3c 0f                	cmp    al,0xf
c0003f51:	75 7e                	jne    c0003fd1 <dir_find+0x182>
c0003f53:	eb 04                	jmp    c0003f59 <dir_find+0x10a>
c0003f55:	3c 0f                	cmp    al,0xf
c0003f57:	75 4c                	jne    c0003fa5 <dir_find+0x156>
c0003f59:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0003f5d:	75 7e                	jne    c0003fdd <dir_find+0x18e>
c0003f5f:	f6 c1 40             	test   cl,0x40
c0003f62:	74 12                	je     c0003f76 <dir_find+0x127>
c0003f64:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003f67:	83 e1 bf             	and    ecx,0xffffffbf
c0003f6a:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0003f6e:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003f71:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003f74:	eb 06                	jmp    c0003f7c <dir_find+0x12d>
c0003f76:	89 f8                	mov    eax,edi
c0003f78:	38 c8                	cmp    al,cl
c0003f7a:	75 5c                	jne    c0003fd8 <dir_find+0x189>
c0003f7c:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0003f80:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003f85:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0003f88:	75 53                	jne    c0003fdd <dir_find+0x18e>
c0003f8a:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0003f8e:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003f91:	89 ea                	mov    edx,ebp
c0003f93:	e8 f4 fd ff ff       	call   c0003d8c <cmp_lfn>
c0003f98:	85 c0                	test   eax,eax
c0003f9a:	74 41                	je     c0003fdd <dir_find+0x18e>
c0003f9c:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0003fa0:	8d 79 ff             	lea    edi,[ecx-0x1]
c0003fa3:	eb 38                	jmp    c0003fdd <dir_find+0x18e>
c0003fa5:	89 f8                	mov    eax,edi
c0003fa7:	84 c0                	test   al,al
c0003fa9:	75 0d                	jne    c0003fb8 <dir_find+0x169>
c0003fab:	89 e8                	mov    eax,ebp
c0003fad:	e8 98 de ff ff       	call   c0001e4a <sum_sfn>
c0003fb2:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0003fb6:	74 52                	je     c000400a <dir_find+0x1bb>
c0003fb8:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0003fbc:	75 13                	jne    c0003fd1 <dir_find+0x182>
c0003fbe:	8d 53 3c             	lea    edx,[ebx+0x3c]
c0003fc1:	b9 0b 00 00 00       	mov    ecx,0xb
c0003fc6:	89 e8                	mov    eax,ebp
c0003fc8:	e8 60 da ff ff       	call   c0001a2d <mem_cmp>
c0003fcd:	85 c0                	test   eax,eax
c0003fcf:	74 39                	je     c000400a <dir_find+0x1bb>
c0003fd1:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003fd8:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003fdd:	31 d2                	xor    edx,edx
c0003fdf:	89 d8                	mov    eax,ebx
c0003fe1:	e8 5c f4 ff ff       	call   c0003442 <dir_next>
c0003fe6:	85 c0                	test   eax,eax
c0003fe8:	0f 84 25 ff ff ff    	je     c0003f13 <dir_find+0xc4>
c0003fee:	89 04 24             	mov    DWORD PTR [esp],eax
c0003ff1:	eb 17                	jmp    c000400a <dir_find+0x1bb>
c0003ff3:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0003ffa:	eb 0e                	jmp    c000400a <dir_find+0x1bb>
c0003ffc:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003fff:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c0004004:	0f 85 75 fe ff ff    	jne    c0003e7f <dir_find+0x30>
c000400a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000400d:	83 c4 1c             	add    esp,0x1c
c0004010:	5b                   	pop    ebx
c0004011:	5e                   	pop    esi
c0004012:	5f                   	pop    edi
c0004013:	5d                   	pop    ebp
c0004014:	c3                   	ret    

c0004015 <dir_register>:
c0004015:	55                   	push   ebp
c0004016:	57                   	push   edi
c0004017:	56                   	push   esi
c0004018:	be 06 00 00 00       	mov    esi,0x6
c000401d:	53                   	push   ebx
c000401e:	83 ec 6c             	sub    esp,0x6c
c0004021:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c0004025:	0f 85 62 02 00 00    	jne    c000428d <dir_register+0x278>
c000402b:	8b 28                	mov    ebp,DWORD PTR [eax]
c000402d:	31 ff                	xor    edi,edi
c000402f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0004032:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c0004037:	74 03                	je     c000403c <dir_register+0x27>
c0004039:	47                   	inc    edi
c000403a:	eb f6                	jmp    c0004032 <dir_register+0x1d>
c000403c:	89 c3                	mov    ebx,eax
c000403e:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0004042:	0f 85 e1 00 00 00    	jne    c0004129 <dir_register+0x114>
c0004048:	83 c7 0e             	add    edi,0xe
c000404b:	b9 0f 00 00 00       	mov    ecx,0xf
c0004050:	89 f8                	mov    eax,edi
c0004052:	31 d2                	xor    edx,edx
c0004054:	f7 f1                	div    ecx
c0004056:	8d 50 02             	lea    edx,[eax+0x2]
c0004059:	89 c7                	mov    edi,eax
c000405b:	89 d8                	mov    eax,ebx
c000405d:	e8 12 f8 ff ff       	call   c0003874 <dir_alloc>
c0004062:	89 c6                	mov    esi,eax
c0004064:	85 c0                	test   eax,eax
c0004066:	0f 85 21 02 00 00    	jne    c000428d <dir_register+0x278>
c000406c:	81 c7 01 00 00 08    	add    edi,0x8000001
c0004072:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004075:	c1 e7 05             	shl    edi,0x5
c0004078:	29 f8                	sub    eax,edi
c000407a:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000407d:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004080:	a8 04                	test   al,0x4
c0004082:	0f 84 91 00 00 00    	je     c0004119 <dir_register+0x104>
c0004088:	83 e0 fb             	and    eax,0xfffffffb
c000408b:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000408e:	89 d8                	mov    eax,ebx
c0004090:	e8 25 ec ff ff       	call   c0002cba <fill_first_frag>
c0004095:	85 c0                	test   eax,eax
c0004097:	0f 85 ee 01 00 00    	jne    c000428b <dir_register+0x276>
c000409d:	83 c9 ff             	or     ecx,0xffffffff
c00040a0:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00040a3:	89 d8                	mov    eax,ebx
c00040a5:	e8 db eb ff ff       	call   c0002c85 <fill_last_frag>
c00040aa:	85 c0                	test   eax,eax
c00040ac:	0f 85 d9 01 00 00    	jne    c000428b <dir_register+0x276>
c00040b2:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00040b6:	74 61                	je     c0004119 <dir_register+0x104>
c00040b8:	89 da                	mov    edx,ebx
c00040ba:	8d 44 24 14          	lea    eax,[esp+0x14]
c00040be:	e8 ea f5 ff ff       	call   c00036ad <load_obj_xdir>
c00040c3:	85 c0                	test   eax,eax
c00040c5:	0f 85 c0 01 00 00    	jne    c000428b <dir_register+0x276>
c00040cb:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c00040cf:	31 c9                	xor    ecx,ecx
c00040d1:	c1 e2 09             	shl    edx,0x9
c00040d4:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c00040d7:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c00040da:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00040dd:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00040e0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00040e3:	83 c0 38             	add    eax,0x38
c00040e6:	e8 1c d9 ff ff       	call   c0001a07 <st_qword>
c00040eb:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00040ee:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00040f1:	83 c0 28             	add    eax,0x28
c00040f4:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00040f7:	e8 0b d9 ff ff       	call   c0001a07 <st_qword>
c00040fc:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00040ff:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0004102:	83 c8 01             	or     eax,0x1
c0004105:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c0004108:	8d 44 24 14          	lea    eax,[esp+0x14]
c000410c:	e8 db f7 ff ff       	call   c00038ec <store_xdir>
c0004111:	85 c0                	test   eax,eax
c0004113:	0f 85 72 01 00 00    	jne    c000428b <dir_register+0x276>
c0004119:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000411c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000411f:	e8 c1 fb ff ff       	call   c0003ce5 <create_xdir>
c0004124:	e9 64 01 00 00       	jmp    c000428d <dir_register+0x278>
c0004129:	8d 40 3c             	lea    eax,[eax+0x3c]
c000412c:	b9 0c 00 00 00       	mov    ecx,0xc
c0004131:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004135:	89 c2                	mov    edx,eax
c0004137:	8d 44 24 14          	lea    eax,[esp+0x14]
c000413b:	e8 cd d8 ff ff       	call   c0001a0d <mem_cpy>
c0004140:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0004145:	74 58                	je     c000419f <dir_register+0x18a>
c0004147:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c000414b:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0004153:	83 ec 0c             	sub    esp,0xc
c0004156:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0004159:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000415d:	8d 54 24 24          	lea    edx,[esp+0x24]
c0004161:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004165:	e8 24 dc ff ff       	call   c0001d8e <gen_numname>
c000416a:	89 d8                	mov    eax,ebx
c000416c:	e8 de fc ff ff       	call   c0003e4f <dir_find>
c0004171:	83 c4 10             	add    esp,0x10
c0004174:	89 c6                	mov    esi,eax
c0004176:	85 c0                	test   eax,eax
c0004178:	75 15                	jne    c000418f <dir_register+0x17a>
c000417a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000417e:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004183:	75 ce                	jne    c0004153 <dir_register+0x13e>
c0004185:	be 07 00 00 00       	mov    esi,0x7
c000418a:	e9 fe 00 00 00       	jmp    c000428d <dir_register+0x278>
c000418f:	83 f8 04             	cmp    eax,0x4
c0004192:	0f 85 f5 00 00 00    	jne    c000428d <dir_register+0x278>
c0004198:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000419c:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c000419f:	b9 01 00 00 00       	mov    ecx,0x1
c00041a4:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c00041a9:	74 0f                	je     c00041ba <dir_register+0x1a5>
c00041ab:	b9 0d 00 00 00       	mov    ecx,0xd
c00041b0:	8d 47 0c             	lea    eax,[edi+0xc]
c00041b3:	31 d2                	xor    edx,edx
c00041b5:	f7 f1                	div    ecx
c00041b7:	8d 48 01             	lea    ecx,[eax+0x1]
c00041ba:	89 ca                	mov    edx,ecx
c00041bc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00041c0:	89 d8                	mov    eax,ebx
c00041c2:	e8 ad f6 ff ff       	call   c0003874 <dir_alloc>
c00041c7:	89 c6                	mov    esi,eax
c00041c9:	85 c0                	test   eax,eax
c00041cb:	0f 85 bc 00 00 00    	jne    c000428d <dir_register+0x278>
c00041d1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00041d5:	49                   	dec    ecx
c00041d6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00041da:	74 6a                	je     c0004246 <dir_register+0x231>
c00041dc:	89 c8                	mov    eax,ecx
c00041de:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00041e1:	c1 e0 05             	shl    eax,0x5
c00041e4:	29 c2                	sub    edx,eax
c00041e6:	89 d8                	mov    eax,ebx
c00041e8:	e8 fd ec ff ff       	call   c0002eea <dir_sdi>
c00041ed:	89 c6                	mov    esi,eax
c00041ef:	85 c0                	test   eax,eax
c00041f1:	0f 85 96 00 00 00    	jne    c000428d <dir_register+0x278>
c00041f7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00041fb:	e8 4a dc ff ff       	call   c0001e4a <sum_sfn>
c0004200:	0f b6 f8             	movzx  edi,al
c0004203:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0004206:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0004209:	89 e8                	mov    eax,ebp
c000420b:	e8 5c df ff ff       	call   c000216c <move_window>
c0004210:	89 c6                	mov    esi,eax
c0004212:	85 c0                	test   eax,eax
c0004214:	75 77                	jne    c000428d <dir_register+0x278>
c0004216:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c000421b:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000421e:	83 ec 0c             	sub    esp,0xc
c0004221:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0004224:	57                   	push   edi
c0004225:	e8 e0 da ff ff       	call   c0001d0a <put_lfn>
c000422a:	31 d2                	xor    edx,edx
c000422c:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004230:	89 d8                	mov    eax,ebx
c0004232:	e8 0b f2 ff ff       	call   c0003442 <dir_next>
c0004237:	83 c4 10             	add    esp,0x10
c000423a:	89 c6                	mov    esi,eax
c000423c:	85 c0                	test   eax,eax
c000423e:	75 4d                	jne    c000428d <dir_register+0x278>
c0004240:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0004244:	75 bd                	jne    c0004203 <dir_register+0x1ee>
c0004246:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0004249:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000424c:	89 e8                	mov    eax,ebp
c000424e:	e8 19 df ff ff       	call   c000216c <move_window>
c0004253:	89 c6                	mov    esi,eax
c0004255:	85 c0                	test   eax,eax
c0004257:	75 34                	jne    c000428d <dir_register+0x278>
c0004259:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000425c:	b9 20 00 00 00       	mov    ecx,0x20
c0004261:	31 d2                	xor    edx,edx
c0004263:	e8 ba d7 ff ff       	call   c0001a22 <mem_set>
c0004268:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000426b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000426f:	b9 0b 00 00 00       	mov    ecx,0xb
c0004274:	e8 94 d7 ff ff       	call   c0001a0d <mem_cpy>
c0004279:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c000427c:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000427f:	83 e0 18             	and    eax,0x18
c0004282:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004285:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004289:	eb 02                	jmp    c000428d <dir_register+0x278>
c000428b:	89 c6                	mov    esi,eax
c000428d:	83 c4 6c             	add    esp,0x6c
c0004290:	89 f0                	mov    eax,esi
c0004292:	5b                   	pop    ebx
c0004293:	5e                   	pop    esi
c0004294:	5f                   	pop    edi
c0004295:	5d                   	pop    ebp
c0004296:	c3                   	ret    

c0004297 <sync_fs>:
c0004297:	56                   	push   esi
c0004298:	53                   	push   ebx
c0004299:	53                   	push   ebx
c000429a:	89 c3                	mov    ebx,eax
c000429c:	e8 37 de ff ff       	call   c00020d8 <sync_window>
c00042a1:	85 c0                	test   eax,eax
c00042a3:	0f 85 b1 00 00 00    	jne    c000435a <sync_fs+0xc3>
c00042a9:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c00042ac:	0f 85 8e 00 00 00    	jne    c0004340 <sync_fs+0xa9>
c00042b2:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c00042b6:	0f 85 84 00 00 00    	jne    c0004340 <sync_fs+0xa9>
c00042bc:	b9 00 02 00 00       	mov    ecx,0x200
c00042c1:	8d 73 54             	lea    esi,[ebx+0x54]
c00042c4:	31 d2                	xor    edx,edx
c00042c6:	89 f0                	mov    eax,esi
c00042c8:	e8 55 d7 ff ff       	call   c0001a22 <mem_set>
c00042cd:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00042d3:	ba 55 aa 00 00       	mov    edx,0xaa55
c00042d8:	e8 23 d7 ff ff       	call   c0001a00 <st_word>
c00042dd:	ba 52 52 61 41       	mov    edx,0x41615252
c00042e2:	89 f0                	mov    eax,esi
c00042e4:	e8 1b d7 ff ff       	call   c0001a04 <st_dword>
c00042e9:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00042ef:	ba 72 72 41 61       	mov    edx,0x61417272
c00042f4:	e8 0b d7 ff ff       	call   c0001a04 <st_dword>
c00042f9:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00042fc:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c0004302:	e8 fd d6 ff ff       	call   c0001a04 <st_dword>
c0004307:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000430a:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c0004310:	e8 ef d6 ff ff       	call   c0001a04 <st_dword>
c0004315:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0004318:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c000431b:	83 c0 01             	add    eax,0x1
c000431e:	83 d2 00             	adc    edx,0x0
c0004321:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c0004324:	83 ec 0c             	sub    esp,0xc
c0004327:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c000432a:	6a 01                	push   0x1
c000432c:	52                   	push   edx
c000432d:	50                   	push   eax
c000432e:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004332:	56                   	push   esi
c0004333:	50                   	push   eax
c0004334:	e8 20 d6 ff ff       	call   c0001959 <disk_write>
c0004339:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c000433d:	83 c4 20             	add    esp,0x20
c0004340:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004344:	51                   	push   ecx
c0004345:	6a 00                	push   0x0
c0004347:	6a 00                	push   0x0
c0004349:	50                   	push   eax
c000434a:	e8 20 d6 ff ff       	call   c000196f <disk_ioctl>
c000434f:	83 c4 10             	add    esp,0x10
c0004352:	85 c0                	test   eax,eax
c0004354:	0f 95 c0             	setne  al
c0004357:	0f b6 c0             	movzx  eax,al
c000435a:	5a                   	pop    edx
c000435b:	5b                   	pop    ebx
c000435c:	5e                   	pop    esi
c000435d:	c3                   	ret    

c000435e <create_partition>:
c000435e:	55                   	push   ebp
c000435f:	0f b6 c0             	movzx  eax,al
c0004362:	57                   	push   edi
c0004363:	56                   	push   esi
c0004364:	53                   	push   ebx
c0004365:	83 ec 60             	sub    esp,0x60
c0004368:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000436c:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004370:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0004374:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0004378:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c000437c:	50                   	push   eax
c000437d:	6a 01                	push   0x1
c000437f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004383:	e8 e7 d5 ff ff       	call   c000196f <disk_ioctl>
c0004388:	83 c4 10             	add    esp,0x10
c000438b:	85 c0                	test   eax,eax
c000438d:	74 0a                	je     c0004399 <create_partition+0x3b>
c000438f:	b8 01 00 00 00       	mov    eax,0x1
c0004394:	e9 67 05 00 00       	jmp    c0004900 <create_partition+0x5a2>
c0004399:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000439d:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00043a1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00043a5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00043a9:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00043ae:	0f 86 ed 03 00 00    	jbe    c00047a1 <create_partition+0x443>
c00043b4:	83 c0 df             	add    eax,0xffffffdf
c00043b7:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00043bf:	83 d2 ff             	adc    edx,0xffffffff
c00043c2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00043c6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00043ca:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00043ce:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00043d2:	83 c0 bd             	add    eax,0xffffffbd
c00043d5:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00043dc:	83 d2 ff             	adc    edx,0xffffffff
c00043df:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00043e3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00043e7:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00043ef:	be 22 00 00 00       	mov    esi,0x22
c00043f4:	31 ff                	xor    edi,edi
c00043f6:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00043fe:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c0004406:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c000440e:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004412:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004418:	75 0e                	jne    c0004428 <create_partition+0xca>
c000441a:	b9 00 02 00 00       	mov    ecx,0x200
c000441f:	31 d2                	xor    edx,edx
c0004421:	89 d8                	mov    eax,ebx
c0004423:	e8 fa d5 ff ff       	call   c0001a22 <mem_set>
c0004428:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000442c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0004430:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004434:	0b 04 24             	or     eax,DWORD PTR [esp]
c0004437:	0f 84 23 01 00 00    	je     c0004560 <create_partition+0x202>
c000443d:	89 f0                	mov    eax,esi
c000443f:	89 fa                	mov    edx,edi
c0004441:	05 ff 07 00 00       	add    eax,0x7ff
c0004446:	83 d2 00             	adc    edx,0x0
c0004449:	89 c1                	mov    ecx,eax
c000444b:	89 d7                	mov    edi,edx
c000444d:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004453:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004457:	89 ce                	mov    esi,ecx
c0004459:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c000445d:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0004461:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004465:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004468:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000446c:	89 04 24             	mov    DWORD PTR [esp],eax
c000446f:	b8 64 00 00 00       	mov    eax,0x64
c0004474:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004477:	b8 00 00 00 00       	mov    eax,0x0
c000447c:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004480:	72 41                	jb     c00044c3 <create_partition+0x165>
c0004482:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004486:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000448a:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c000448e:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004493:	01 c1                	add    ecx,eax
c0004495:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004499:	f7 24 24             	mul    DWORD PTR [esp]
c000449c:	6a 00                	push   0x0
c000449e:	01 ca                	add    edx,ecx
c00044a0:	6a 64                	push   0x64
c00044a2:	52                   	push   edx
c00044a3:	50                   	push   eax
c00044a4:	e8 73 9e 01 00       	call   c001e31c <__udivdi3>
c00044a9:	83 c4 10             	add    esp,0x10
c00044ac:	05 ff 07 00 00       	add    eax,0x7ff
c00044b1:	83 d2 00             	adc    edx,0x0
c00044b4:	89 c1                	mov    ecx,eax
c00044b6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00044ba:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00044c0:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00044c3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00044c6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00044ca:	01 f0                	add    eax,esi
c00044cc:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00044d0:	11 fa                	adc    edx,edi
c00044d2:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00044d6:	19 d1                	sbb    ecx,edx
c00044d8:	73 2e                	jae    c0004508 <create_partition+0x1aa>
c00044da:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00044de:	89 f8                	mov    eax,edi
c00044e0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00044e7:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00044eb:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00044f3:	73 6b                	jae    c0004560 <create_partition+0x202>
c00044f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00044f9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00044fd:	29 f0                	sub    eax,esi
c00044ff:	19 fa                	sbb    edx,edi
c0004501:	89 04 24             	mov    DWORD PTR [esp],eax
c0004504:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004508:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000450c:	0b 04 24             	or     eax,DWORD PTR [esp]
c000450f:	74 4f                	je     c0004560 <create_partition+0x202>
c0004511:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0004514:	b9 10 00 00 00       	mov    ecx,0x10
c0004519:	ba b0 f3 01 c0       	mov    edx,0xc001f3b0
c000451e:	e8 ea d4 ff ff       	call   c0001a0d <mem_cpy>
c0004523:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c0004527:	b9 10 00 00 00       	mov    ecx,0x10
c000452c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004530:	e8 2c db ff ff       	call   c0002061 <make_rand>
c0004535:	89 f2                	mov    edx,esi
c0004537:	89 f9                	mov    ecx,edi
c0004539:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000453d:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c0004541:	e8 c1 d4 ff ff       	call   c0001a07 <st_qword>
c0004546:	03 34 24             	add    esi,DWORD PTR [esp]
c0004549:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c000454d:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0004551:	89 f2                	mov    edx,esi
c0004553:	89 f9                	mov    ecx,edi
c0004555:	83 c2 ff             	add    edx,0xffffffff
c0004558:	83 d1 ff             	adc    ecx,0xffffffff
c000455b:	e8 a7 d4 ff ff       	call   c0001a07 <st_qword>
c0004560:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004564:	83 e8 80             	sub    eax,0xffffff80
c0004567:	89 c5                	mov    ebp,eax
c0004569:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000456d:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004573:	75 6b                	jne    c00045e0 <create_partition+0x282>
c0004575:	45                   	inc    ebp
c0004576:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000457a:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c000457f:	e8 39 da ff ff       	call   c0001fbd <crc32>
c0004584:	81 fd 00 02 00 00    	cmp    ebp,0x200
c000458a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000458e:	75 e5                	jne    c0004575 <create_partition+0x217>
c0004590:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004594:	31 d2                	xor    edx,edx
c0004596:	83 ec 0c             	sub    esp,0xc
c0004599:	c1 ed 09             	shr    ebp,0x9
c000459c:	6a 01                	push   0x1
c000459e:	8d 45 02             	lea    eax,[ebp+0x2]
c00045a1:	52                   	push   edx
c00045a2:	50                   	push   eax
c00045a3:	53                   	push   ebx
c00045a4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00045a8:	e8 ac d3 ff ff       	call   c0001959 <disk_write>
c00045ad:	83 c4 20             	add    esp,0x20
c00045b0:	85 c0                	test   eax,eax
c00045b2:	0f 85 d7 fd ff ff    	jne    c000438f <create_partition+0x31>
c00045b8:	83 ec 0c             	sub    esp,0xc
c00045bb:	31 d2                	xor    edx,edx
c00045bd:	6a 01                	push   0x1
c00045bf:	89 e8                	mov    eax,ebp
c00045c1:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c00045c5:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c00045c9:	52                   	push   edx
c00045ca:	50                   	push   eax
c00045cb:	53                   	push   ebx
c00045cc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00045d0:	e8 84 d3 ff ff       	call   c0001959 <disk_write>
c00045d5:	83 c4 20             	add    esp,0x20
c00045d8:	85 c0                	test   eax,eax
c00045da:	0f 85 af fd ff ff    	jne    c000438f <create_partition+0x31>
c00045e0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00045e4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00045e8:	3d 00 40 00 00       	cmp    eax,0x4000
c00045ed:	74 0d                	je     c00045fc <create_partition+0x29e>
c00045ef:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00045f3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00045f7:	e9 12 fe ff ff       	jmp    c000440e <create_partition+0xb0>
c00045fc:	31 d2                	xor    edx,edx
c00045fe:	b9 00 02 00 00       	mov    ecx,0x200
c0004603:	89 d8                	mov    eax,ebx
c0004605:	8d 6b 20             	lea    ebp,[ebx+0x20]
c0004608:	e8 15 d4 ff ff       	call   c0001a22 <mem_set>
c000460d:	8d 7b 48             	lea    edi,[ebx+0x48]
c0004610:	b9 10 00 00 00       	mov    ecx,0x10
c0004615:	ba a0 f2 01 c0       	mov    edx,0xc001f2a0
c000461a:	89 d8                	mov    eax,ebx
c000461c:	e8 ec d3 ff ff       	call   c0001a0d <mem_cpy>
c0004621:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0004625:	8d 43 58             	lea    eax,[ebx+0x58]
c0004628:	f7 d2                	not    edx
c000462a:	e8 d5 d3 ff ff       	call   c0001a04 <st_dword>
c000462f:	8d 43 18             	lea    eax,[ebx+0x18]
c0004632:	31 c9                	xor    ecx,ecx
c0004634:	89 04 24             	mov    DWORD PTR [esp],eax
c0004637:	ba 01 00 00 00       	mov    edx,0x1
c000463c:	e8 c6 d3 ff ff       	call   c0001a07 <st_qword>
c0004641:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004645:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004649:	83 c2 ff             	add    edx,0xffffffff
c000464c:	89 e8                	mov    eax,ebp
c000464e:	83 d1 ff             	adc    ecx,0xffffffff
c0004651:	e8 b1 d3 ff ff       	call   c0001a07 <st_qword>
c0004656:	31 c9                	xor    ecx,ecx
c0004658:	8d 43 28             	lea    eax,[ebx+0x28]
c000465b:	ba 22 00 00 00       	mov    edx,0x22
c0004660:	e8 a2 d3 ff ff       	call   c0001a07 <st_qword>
c0004665:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0004669:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000466d:	83 c2 de             	add    edx,0xffffffde
c0004670:	8d 43 30             	lea    eax,[ebx+0x30]
c0004673:	83 d1 ff             	adc    ecx,0xffffffff
c0004676:	31 f6                	xor    esi,esi
c0004678:	e8 8a d3 ff ff       	call   c0001a07 <st_qword>
c000467d:	8d 43 54             	lea    eax,[ebx+0x54]
c0004680:	ba 80 00 00 00       	mov    edx,0x80
c0004685:	e8 7a d3 ff ff       	call   c0001a04 <st_dword>
c000468a:	8d 43 50             	lea    eax,[ebx+0x50]
c000468d:	ba 80 00 00 00       	mov    edx,0x80
c0004692:	e8 6d d3 ff ff       	call   c0001a04 <st_dword>
c0004697:	ba 02 00 00 00       	mov    edx,0x2
c000469c:	89 f8                	mov    eax,edi
c000469e:	e8 61 d3 ff ff       	call   c0001a04 <st_dword>
c00046a3:	8d 53 38             	lea    edx,[ebx+0x38]
c00046a6:	b9 10 00 00 00       	mov    ecx,0x10
c00046ab:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00046af:	e8 ad d9 ff ff       	call   c0002061 <make_rand>
c00046b4:	83 c8 ff             	or     eax,0xffffffff
c00046b7:	46                   	inc    esi
c00046b8:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c00046bd:	e8 fb d8 ff ff       	call   c0001fbd <crc32>
c00046c2:	83 fe 5c             	cmp    esi,0x5c
c00046c5:	75 f0                	jne    c00046b7 <create_partition+0x359>
c00046c7:	f7 d0                	not    eax
c00046c9:	8d 73 10             	lea    esi,[ebx+0x10]
c00046cc:	89 c2                	mov    edx,eax
c00046ce:	89 f0                	mov    eax,esi
c00046d0:	e8 2f d3 ff ff       	call   c0001a04 <st_dword>
c00046d5:	83 ec 0c             	sub    esp,0xc
c00046d8:	6a 01                	push   0x1
c00046da:	6a 00                	push   0x0
c00046dc:	6a 01                	push   0x1
c00046de:	53                   	push   ebx
c00046df:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00046e3:	e8 71 d2 ff ff       	call   c0001959 <disk_write>
c00046e8:	83 c4 20             	add    esp,0x20
c00046eb:	85 c0                	test   eax,eax
c00046ed:	0f 85 9c fc ff ff    	jne    c000438f <create_partition+0x31>
c00046f3:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00046f7:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00046fb:	83 c2 ff             	add    edx,0xffffffff
c00046fe:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004701:	83 d1 ff             	adc    ecx,0xffffffff
c0004704:	e8 fe d2 ff ff       	call   c0001a07 <st_qword>
c0004709:	ba 01 00 00 00       	mov    edx,0x1
c000470e:	31 c9                	xor    ecx,ecx
c0004710:	89 e8                	mov    eax,ebp
c0004712:	e8 f0 d2 ff ff       	call   c0001a07 <st_qword>
c0004717:	89 f8                	mov    eax,edi
c0004719:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000471d:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004721:	31 ff                	xor    edi,edi
c0004723:	e8 df d2 ff ff       	call   c0001a07 <st_qword>
c0004728:	89 f0                	mov    eax,esi
c000472a:	31 d2                	xor    edx,edx
c000472c:	e8 d3 d2 ff ff       	call   c0001a04 <st_dword>
c0004731:	83 c8 ff             	or     eax,0xffffffff
c0004734:	47                   	inc    edi
c0004735:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c000473a:	e8 7e d8 ff ff       	call   c0001fbd <crc32>
c000473f:	83 ff 5c             	cmp    edi,0x5c
c0004742:	75 f0                	jne    c0004734 <create_partition+0x3d6>
c0004744:	f7 d0                	not    eax
c0004746:	89 c2                	mov    edx,eax
c0004748:	89 f0                	mov    eax,esi
c000474a:	e8 b5 d2 ff ff       	call   c0001a04 <st_dword>
c000474f:	83 ec 0c             	sub    esp,0xc
c0004752:	6a 01                	push   0x1
c0004754:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004758:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c000475c:	83 c0 ff             	add    eax,0xffffffff
c000475f:	83 d2 ff             	adc    edx,0xffffffff
c0004762:	52                   	push   edx
c0004763:	50                   	push   eax
c0004764:	53                   	push   ebx
c0004765:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004769:	e8 eb d1 ff ff       	call   c0001959 <disk_write>
c000476e:	83 c4 20             	add    esp,0x20
c0004771:	85 c0                	test   eax,eax
c0004773:	0f 85 16 fc ff ff    	jne    c000438f <create_partition+0x31>
c0004779:	31 d2                	xor    edx,edx
c000477b:	89 d8                	mov    eax,ebx
c000477d:	b9 00 02 00 00       	mov    ecx,0x200
c0004782:	e8 9b d2 ff ff       	call   c0001a22 <mem_set>
c0004787:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c000478d:	b9 10 00 00 00       	mov    ecx,0x10
c0004792:	ba b0 f2 01 c0       	mov    edx,0xc001f2b0
c0004797:	e8 71 d2 ff ff       	call   c0001a0d <mem_cpy>
c000479c:	e9 21 01 00 00       	jmp    c00048c2 <create_partition+0x564>
c00047a1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00047a5:	b9 05 00 00 00       	mov    ecx,0x5
c00047aa:	89 04 24             	mov    DWORD PTR [esp],eax
c00047ad:	bf 08 00 00 00       	mov    edi,0x8
c00047b2:	89 f8                	mov    eax,edi
c00047b4:	31 d2                	xor    edx,edx
c00047b6:	0f b6 f0             	movzx  esi,al
c00047b9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047bc:	f7 f6                	div    esi
c00047be:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c00047c3:	76 0a                	jbe    c00047cf <create_partition+0x471>
c00047c5:	d1 e7                	shl    edi,1
c00047c7:	49                   	dec    ecx
c00047c8:	75 e8                	jne    c00047b2 <create_partition+0x454>
c00047ca:	bf ff ff ff ff       	mov    edi,0xffffffff
c00047cf:	b9 00 02 00 00       	mov    ecx,0x200
c00047d4:	31 d2                	xor    edx,edx
c00047d6:	89 d8                	mov    eax,ebx
c00047d8:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c00047de:	e8 3f d2 ff ff       	call   c0001a22 <mem_set>
c00047e3:	b9 64 00 00 00       	mov    ecx,0x64
c00047e8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047eb:	31 d2                	xor    edx,edx
c00047ed:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00047f5:	f7 f1                	div    ecx
c00047f7:	b9 3f 00 00 00       	mov    ecx,0x3f
c00047fc:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004800:	89 f8                	mov    eax,edi
c0004802:	0f b6 c0             	movzx  eax,al
c0004805:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004809:	e9 80 00 00 00       	jmp    c000488e <create_partition+0x530>
c000480e:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004811:	29 cf                	sub    edi,ecx
c0004813:	89 ca                	mov    edx,ecx
c0004815:	89 f0                	mov    eax,esi
c0004817:	bd 3f 00 00 00       	mov    ebp,0x3f
c000481c:	e8 e3 d1 ff ff       	call   c0001a04 <st_dword>
c0004821:	8d 46 04             	lea    eax,[esi+0x4]
c0004824:	89 fa                	mov    edx,edi
c0004826:	83 c6 10             	add    esi,0x10
c0004829:	e8 d6 d1 ff ff       	call   c0001a04 <st_dword>
c000482e:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004832:	31 d2                	xor    edx,edx
c0004834:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004837:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c000483b:	89 c8                	mov    eax,ecx
c000483d:	01 f9                	add    ecx,edi
c000483f:	f7 f5                	div    ebp
c0004841:	89 d5                	mov    ebp,edx
c0004843:	31 d2                	xor    edx,edx
c0004845:	45                   	inc    ebp
c0004846:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c000484a:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c000484d:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004850:	89 c2                	mov    edx,eax
c0004852:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004855:	c1 ea 02             	shr    edx,0x2
c0004858:	83 e2 c0             	and    edx,0xffffffc0
c000485b:	09 ea                	or     edx,ebp
c000485d:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004862:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004865:	31 d2                	xor    edx,edx
c0004867:	f7 f5                	div    ebp
c0004869:	89 d7                	mov    edi,edx
c000486b:	31 d2                	xor    edx,edx
c000486d:	47                   	inc    edi
c000486e:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004872:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004875:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004878:	89 c5                	mov    ebp,eax
c000487a:	c1 ed 02             	shr    ebp,0x2
c000487d:	83 e5 c0             	and    ebp,0xffffffc0
c0004880:	09 ef                	or     edi,ebp
c0004882:	89 fa                	mov    edx,edi
c0004884:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004887:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c000488c:	74 34                	je     c00048c2 <create_partition+0x564>
c000488e:	85 c9                	test   ecx,ecx
c0004890:	74 30                	je     c00048c2 <create_partition+0x564>
c0004892:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004895:	76 2b                	jbe    c00048c2 <create_partition+0x564>
c0004897:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000489b:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000489f:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c00048a2:	83 ff 64             	cmp    edi,0x64
c00048a5:	76 4b                	jbe    c00048f2 <create_partition+0x594>
c00048a7:	89 f8                	mov    eax,edi
c00048a9:	01 c8                	add    eax,ecx
c00048ab:	0f 82 5d ff ff ff    	jb     c000480e <create_partition+0x4b0>
c00048b1:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00048b4:	0f 87 54 ff ff ff    	ja     c000480e <create_partition+0x4b0>
c00048ba:	85 ff                	test   edi,edi
c00048bc:	0f 85 51 ff ff ff    	jne    c0004813 <create_partition+0x4b5>
c00048c2:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c00048c8:	ba 55 aa 00 00       	mov    edx,0xaa55
c00048cd:	e8 2e d1 ff ff       	call   c0001a00 <st_word>
c00048d2:	83 ec 0c             	sub    esp,0xc
c00048d5:	6a 01                	push   0x1
c00048d7:	6a 00                	push   0x0
c00048d9:	6a 00                	push   0x0
c00048db:	53                   	push   ebx
c00048dc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00048e0:	e8 74 d0 ff ff       	call   c0001959 <disk_write>
c00048e5:	83 c4 20             	add    esp,0x20
c00048e8:	85 c0                	test   eax,eax
c00048ea:	0f 95 c0             	setne  al
c00048ed:	0f b6 c0             	movzx  eax,al
c00048f0:	eb 0e                	jmp    c0004900 <create_partition+0x5a2>
c00048f2:	74 07                	je     c00048fb <create_partition+0x59d>
c00048f4:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c00048f9:	eb ac                	jmp    c00048a7 <create_partition+0x549>
c00048fb:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00048fe:	eb a7                	jmp    c00048a7 <create_partition+0x549>
c0004900:	83 c4 5c             	add    esp,0x5c
c0004903:	5b                   	pop    ebx
c0004904:	5e                   	pop    esi
c0004905:	5f                   	pop    edi
c0004906:	5d                   	pop    ebp
c0004907:	c3                   	ret    

c0004908 <get_fileinfo>:
c0004908:	55                   	push   ebp
c0004909:	57                   	push   edi
c000490a:	56                   	push   esi
c000490b:	53                   	push   ebx
c000490c:	83 ec 1c             	sub    esp,0x1c
c000490f:	8b 30                	mov    esi,DWORD PTR [eax]
c0004911:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004915:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004919:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c000491c:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c000491f:	0f 84 dc 01 00 00    	je     c0004b01 <get_fileinfo+0x1f9>
c0004925:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004928:	75 0f                	jne    c0004939 <get_fileinfo+0x31>
c000492a:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c000492d:	83 c4 1c             	add    esp,0x1c
c0004930:	5b                   	pop    ebx
c0004931:	5e                   	pop    esi
c0004932:	5f                   	pop    edi
c0004933:	5d                   	pop    ebp
c0004934:	e9 58 d5 ff ff       	jmp    c0001e91 <get_xfileinfo>
c0004939:	89 d3                	mov    ebx,edx
c000493b:	89 c6                	mov    esi,eax
c000493d:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004941:	74 6a                	je     c00049ad <get_fileinfo+0xa5>
c0004943:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000494b:	31 ed                	xor    ebp,ebp
c000494d:	31 ff                	xor    edi,edi
c000494f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004953:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004957:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000495a:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c000495e:	66 85 d2             	test   dx,dx
c0004961:	74 3e                	je     c00049a1 <get_fileinfo+0x99>
c0004963:	66 85 ed             	test   bp,bp
c0004966:	75 0c                	jne    c0004974 <get_fileinfo+0x6c>
c0004968:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c000496e:	66 3d ff 07          	cmp    ax,0x7ff
c0004972:	76 22                	jbe    c0004996 <get_fileinfo+0x8e>
c0004974:	b9 ff 00 00 00       	mov    ecx,0xff
c0004979:	89 e8                	mov    eax,ebp
c000497b:	29 f9                	sub    ecx,edi
c000497d:	c1 e0 10             	shl    eax,0x10
c0004980:	09 d0                	or     eax,edx
c0004982:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004986:	e8 a3 d1 ff ff       	call   c0001b2e <put_utf>
c000498b:	84 c0                	test   al,al
c000498d:	74 10                	je     c000499f <get_fileinfo+0x97>
c000498f:	0f b6 c0             	movzx  eax,al
c0004992:	31 d2                	xor    edx,edx
c0004994:	01 c7                	add    edi,eax
c0004996:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c000499b:	89 d5                	mov    ebp,edx
c000499d:	eb b0                	jmp    c000494f <get_fileinfo+0x47>
c000499f:	31 ff                	xor    edi,edi
c00049a1:	66 85 ed             	test   bp,bp
c00049a4:	74 02                	je     c00049a8 <get_fileinfo+0xa0>
c00049a6:	31 ff                	xor    edi,edi
c00049a8:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c00049ad:	31 ff                	xor    edi,edi
c00049af:	31 c9                	xor    ecx,ecx
c00049b1:	83 f9 0a             	cmp    ecx,0xa
c00049b4:	0f 87 ad 00 00 00    	ja     c0004a67 <get_fileinfo+0x15f>
c00049ba:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c00049bd:	8d 69 01             	lea    ebp,[ecx+0x1]
c00049c0:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c00049c4:	66 83 fa 20          	cmp    dx,0x20
c00049c8:	0f 84 92 00 00 00    	je     c0004a60 <get_fileinfo+0x158>
c00049ce:	66 83 fa 05          	cmp    dx,0x5
c00049d2:	75 05                	jne    c00049d9 <get_fileinfo+0xd1>
c00049d4:	ba e5 00 00 00       	mov    edx,0xe5
c00049d9:	83 ff 0b             	cmp    edi,0xb
c00049dc:	77 0b                	ja     c00049e9 <get_fileinfo+0xe1>
c00049de:	83 fd 09             	cmp    ebp,0x9
c00049e1:	75 06                	jne    c00049e9 <get_fileinfo+0xe1>
c00049e3:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c00049e8:	47                   	inc    edi
c00049e9:	0f b7 c2             	movzx  eax,dx
c00049ec:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00049f0:	e8 6d d0 ff ff       	call   c0001a62 <dbc_1st>
c00049f5:	85 c0                	test   eax,eax
c00049f7:	74 2f                	je     c0004a28 <get_fileinfo+0x120>
c00049f9:	83 fd 08             	cmp    ebp,0x8
c00049fc:	74 2a                	je     c0004a28 <get_fileinfo+0x120>
c00049fe:	83 fd 0b             	cmp    ebp,0xb
c0004a01:	74 25                	je     c0004a28 <get_fileinfo+0x120>
c0004a03:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004a06:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004a0a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004a0e:	e8 52 d0 ff ff       	call   c0001a65 <dbc_2nd>
c0004a13:	85 c0                	test   eax,eax
c0004a15:	74 11                	je     c0004a28 <get_fileinfo+0x120>
c0004a17:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004a1b:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004a20:	c1 e2 08             	shl    edx,0x8
c0004a23:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004a26:	09 c2                	or     edx,eax
c0004a28:	0f b7 d2             	movzx  edx,dx
c0004a2b:	50                   	push   eax
c0004a2c:	50                   	push   eax
c0004a2d:	68 b5 01 00 00       	push   0x1b5
c0004a32:	52                   	push   edx
c0004a33:	e8 46 38 00 00       	call   c000827e <ff_oem2uni>
c0004a38:	83 c4 10             	add    esp,0x10
c0004a3b:	66 85 c0             	test   ax,ax
c0004a3e:	75 04                	jne    c0004a44 <get_fileinfo+0x13c>
c0004a40:	31 ff                	xor    edi,edi
c0004a42:	eb 23                	jmp    c0004a67 <get_fileinfo+0x15f>
c0004a44:	b9 0c 00 00 00       	mov    ecx,0xc
c0004a49:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004a4d:	29 f9                	sub    ecx,edi
c0004a4f:	0f b7 c0             	movzx  eax,ax
c0004a52:	e8 d7 d0 ff ff       	call   c0001b2e <put_utf>
c0004a57:	84 c0                	test   al,al
c0004a59:	74 e5                	je     c0004a40 <get_fileinfo+0x138>
c0004a5b:	0f b6 c0             	movzx  eax,al
c0004a5e:	01 c7                	add    edi,eax
c0004a60:	89 e9                	mov    ecx,ebp
c0004a62:	e9 4a ff ff ff       	jmp    c00049b1 <get_fileinfo+0xa9>
c0004a67:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004a6c:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004a70:	75 54                	jne    c0004ac6 <get_fileinfo+0x1be>
c0004a72:	85 ff                	test   edi,edi
c0004a74:	75 0b                	jne    c0004a81 <get_fileinfo+0x179>
c0004a76:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004a7a:	ba 01 00 00 00       	mov    edx,0x1
c0004a7f:	eb 33                	jmp    c0004ab4 <get_fileinfo+0x1ac>
c0004a81:	b1 08                	mov    cl,0x8
c0004a83:	31 d2                	xor    edx,edx
c0004a85:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004a8b:	84 c0                	test   al,al
c0004a8d:	74 25                	je     c0004ab4 <get_fileinfo+0x1ac>
c0004a8f:	66 83 f8 2e          	cmp    ax,0x2e
c0004a93:	74 16                	je     c0004aab <get_fileinfo+0x1a3>
c0004a95:	8d 78 bf             	lea    edi,[eax-0x41]
c0004a98:	66 83 ff 19          	cmp    di,0x19
c0004a9c:	77 0f                	ja     c0004aad <get_fileinfo+0x1a5>
c0004a9e:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004aa1:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004aa4:	74 07                	je     c0004aad <get_fileinfo+0x1a5>
c0004aa6:	83 c0 20             	add    eax,0x20
c0004aa9:	eb 02                	jmp    c0004aad <get_fileinfo+0x1a5>
c0004aab:	b1 10                	mov    cl,0x10
c0004aad:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004ab1:	42                   	inc    edx
c0004ab2:	eb d1                	jmp    c0004a85 <get_fileinfo+0x17d>
c0004ab4:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004ab9:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004abc:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004ac0:	75 04                	jne    c0004ac6 <get_fileinfo+0x1be>
c0004ac2:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004ac6:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004ac9:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004acc:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004acf:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004ad2:	83 c0 1c             	add    eax,0x1c
c0004ad5:	e8 c1 ce ff ff       	call   c000199b <ld_dword>
c0004ada:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004ae1:	89 03                	mov    DWORD PTR [ebx],eax
c0004ae3:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004ae6:	83 c0 16             	add    eax,0x16
c0004ae9:	e8 a0 ce ff ff       	call   c000198e <ld_word>
c0004aee:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004af2:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004af5:	83 c0 18             	add    eax,0x18
c0004af8:	e8 91 ce ff ff       	call   c000198e <ld_word>
c0004afd:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004b01:	83 c4 1c             	add    esp,0x1c
c0004b04:	5b                   	pop    ebx
c0004b05:	5e                   	pop    esi
c0004b06:	5f                   	pop    edi
c0004b07:	5d                   	pop    ebp
c0004b08:	c3                   	ret    

c0004b09 <ld_clust.isra.0>:
c0004b09:	56                   	push   esi
c0004b0a:	89 c6                	mov    esi,eax
c0004b0c:	53                   	push   ebx
c0004b0d:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004b10:	89 d3                	mov    ebx,edx
c0004b12:	e8 77 ce ff ff       	call   c000198e <ld_word>
c0004b17:	0f b7 c8             	movzx  ecx,ax
c0004b1a:	89 f0                	mov    eax,esi
c0004b1c:	3c 03                	cmp    al,0x3
c0004b1e:	75 0d                	jne    c0004b2d <ld_clust.isra.0+0x24>
c0004b20:	8d 43 14             	lea    eax,[ebx+0x14]
c0004b23:	e8 66 ce ff ff       	call   c000198e <ld_word>
c0004b28:	c1 e0 10             	shl    eax,0x10
c0004b2b:	09 c1                	or     ecx,eax
c0004b2d:	89 c8                	mov    eax,ecx
c0004b2f:	5b                   	pop    ebx
c0004b30:	5e                   	pop    esi
c0004b31:	c3                   	ret    

c0004b32 <st_clust.isra.1>:
c0004b32:	56                   	push   esi
c0004b33:	89 c6                	mov    esi,eax
c0004b35:	53                   	push   ebx
c0004b36:	89 d3                	mov    ebx,edx
c0004b38:	0f b7 d1             	movzx  edx,cx
c0004b3b:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004b3e:	e8 bd ce ff ff       	call   c0001a00 <st_word>
c0004b43:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004b46:	75 0f                	jne    c0004b57 <st_clust.isra.1+0x25>
c0004b48:	c1 e9 10             	shr    ecx,0x10
c0004b4b:	8d 43 14             	lea    eax,[ebx+0x14]
c0004b4e:	89 ca                	mov    edx,ecx
c0004b50:	5b                   	pop    ebx
c0004b51:	5e                   	pop    esi
c0004b52:	e9 a9 ce ff ff       	jmp    c0001a00 <st_word>
c0004b57:	5b                   	pop    ebx
c0004b58:	5e                   	pop    esi
c0004b59:	c3                   	ret    

c0004b5a <init_alloc_info.isra.2>:
c0004b5a:	56                   	push   esi
c0004b5b:	53                   	push   ebx
c0004b5c:	89 c6                	mov    esi,eax
c0004b5e:	89 d3                	mov    ebx,edx
c0004b60:	51                   	push   ecx
c0004b61:	8b 00                	mov    eax,DWORD PTR [eax]
c0004b63:	83 c0 34             	add    eax,0x34
c0004b66:	e8 30 ce ff ff       	call   c000199b <ld_dword>
c0004b6b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004b6e:	8b 06                	mov    eax,DWORD PTR [esi]
c0004b70:	83 c0 38             	add    eax,0x38
c0004b73:	e8 3b ce ff ff       	call   c00019b3 <ld_qword>
c0004b78:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004b7b:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004b7e:	8b 06                	mov    eax,DWORD PTR [esi]
c0004b80:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004b83:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004b8a:	83 e0 02             	and    eax,0x2
c0004b8d:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004b90:	5b                   	pop    ebx
c0004b91:	5b                   	pop    ebx
c0004b92:	5e                   	pop    esi
c0004b93:	c3                   	ret    

c0004b94 <follow_path>:
c0004b94:	56                   	push   esi
c0004b95:	53                   	push   ebx
c0004b96:	89 c3                	mov    ebx,eax
c0004b98:	83 ec 14             	sub    esp,0x14
c0004b9b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004b9f:	8b 30                	mov    esi,DWORD PTR [eax]
c0004ba1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ba5:	8a 10                	mov    dl,BYTE PTR [eax]
c0004ba7:	80 fa 5c             	cmp    dl,0x5c
c0004baa:	75 07                	jne    c0004bb3 <follow_path+0x1f>
c0004bac:	40                   	inc    eax
c0004bad:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004bb1:	eb ee                	jmp    c0004ba1 <follow_path+0xd>
c0004bb3:	80 fa 2f             	cmp    dl,0x2f
c0004bb6:	74 f4                	je     c0004bac <follow_path+0x18>
c0004bb8:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004bbf:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004bc6:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004bc9:	77 52                	ja     c0004c1d <follow_path+0x89>
c0004bcb:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004bcf:	31 d2                	xor    edx,edx
c0004bd1:	89 d8                	mov    eax,ebx
c0004bd3:	e8 12 e3 ff ff       	call   c0002eea <dir_sdi>
c0004bd8:	eb 7c                	jmp    c0004c56 <follow_path+0xc2>
c0004bda:	89 d8                	mov    eax,ebx
c0004bdc:	e8 6e f2 ff ff       	call   c0003e4f <dir_find>
c0004be1:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004be4:	85 c0                	test   eax,eax
c0004be6:	75 46                	jne    c0004c2e <follow_path+0x9a>
c0004be8:	80 e2 04             	and    dl,0x4
c0004beb:	75 69                	jne    c0004c56 <follow_path+0xc2>
c0004bed:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004bf1:	74 5e                	je     c0004c51 <follow_path+0xbd>
c0004bf3:	8a 06                	mov    al,BYTE PTR [esi]
c0004bf5:	3c 04                	cmp    al,0x4
c0004bf7:	75 41                	jne    c0004c3a <follow_path+0xa6>
c0004bf9:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004bfc:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004c00:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004c03:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004c06:	30 c0                	xor    al,al
c0004c08:	09 d0                	or     eax,edx
c0004c0a:	89 da                	mov    edx,ebx
c0004c0c:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004c0f:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004c12:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004c15:	8d 46 10             	lea    eax,[esi+0x10]
c0004c18:	e8 3d ff ff ff       	call   c0004b5a <init_alloc_info.isra.2>
c0004c1d:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004c21:	89 d8                	mov    eax,ebx
c0004c23:	e8 a9 ed ff ff       	call   c00039d1 <create_name>
c0004c28:	85 c0                	test   eax,eax
c0004c2a:	74 ae                	je     c0004bda <follow_path+0x46>
c0004c2c:	eb 28                	jmp    c0004c56 <follow_path+0xc2>
c0004c2e:	83 f8 04             	cmp    eax,0x4
c0004c31:	75 23                	jne    c0004c56 <follow_path+0xc2>
c0004c33:	80 e2 04             	and    dl,0x4
c0004c36:	74 19                	je     c0004c51 <follow_path+0xbd>
c0004c38:	eb 1c                	jmp    c0004c56 <follow_path+0xc2>
c0004c3a:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004c3d:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004c43:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004c47:	e8 bd fe ff ff       	call   c0004b09 <ld_clust.isra.0>
c0004c4c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004c4f:	eb cc                	jmp    c0004c1d <follow_path+0x89>
c0004c51:	b8 05 00 00 00       	mov    eax,0x5
c0004c56:	83 c4 14             	add    esp,0x14
c0004c59:	5b                   	pop    ebx
c0004c5a:	5e                   	pop    esi
c0004c5b:	c3                   	ret    

c0004c5c <f_mount>:
c0004c5c:	53                   	push   ebx
c0004c5d:	83 ec 18             	sub    esp,0x18
c0004c60:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004c64:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004c68:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004c6c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004c70:	e8 fb d2 ff ff       	call   c0001f70 <get_ldnumber>
c0004c75:	89 c2                	mov    edx,eax
c0004c77:	b8 0b 00 00 00       	mov    eax,0xb
c0004c7c:	85 d2                	test   edx,edx
c0004c7e:	78 39                	js     c0004cb9 <f_mount+0x5d>
c0004c80:	8b 04 95 60 30 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdcfa0]
c0004c87:	85 c0                	test   eax,eax
c0004c89:	74 03                	je     c0004c8e <f_mount+0x32>
c0004c8b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004c8e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004c92:	85 c0                	test   eax,eax
c0004c94:	74 03                	je     c0004c99 <f_mount+0x3d>
c0004c96:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004c99:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004c9d:	89 04 95 60 30 02 c0 	mov    DWORD PTR [edx*4-0x3ffdcfa0],eax
c0004ca4:	31 c0                	xor    eax,eax
c0004ca6:	84 db                	test   bl,bl
c0004ca8:	74 0f                	je     c0004cb9 <f_mount+0x5d>
c0004caa:	31 c9                	xor    ecx,ecx
c0004cac:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004cb0:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004cb4:	e8 65 d7 ff ff       	call   c000241e <mount_volume>
c0004cb9:	83 c4 18             	add    esp,0x18
c0004cbc:	5b                   	pop    ebx
c0004cbd:	c3                   	ret    

c0004cbe <f_open>:
c0004cbe:	55                   	push   ebp
c0004cbf:	bd 09 00 00 00       	mov    ebp,0x9
c0004cc4:	57                   	push   edi
c0004cc5:	56                   	push   esi
c0004cc6:	53                   	push   ebx
c0004cc7:	83 ec 7c             	sub    esp,0x7c
c0004cca:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004cd1:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004cd8:	85 db                	test   ebx,ebx
c0004cda:	0f 84 10 04 00 00    	je     c00050f0 <f_open+0x432>
c0004ce0:	89 fe                	mov    esi,edi
c0004ce2:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004ce6:	83 e6 3f             	and    esi,0x3f
c0004ce9:	89 f0                	mov    eax,esi
c0004ceb:	0f b6 c8             	movzx  ecx,al
c0004cee:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004cf5:	e8 24 d7 ff ff       	call   c000241e <mount_volume>
c0004cfa:	89 c5                	mov    ebp,eax
c0004cfc:	85 c0                	test   eax,eax
c0004cfe:	0f 85 e6 03 00 00    	jne    c00050ea <f_open+0x42c>
c0004d04:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d08:	bd 11 00 00 00       	mov    ebp,0x11
c0004d0d:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004d11:	83 ec 0c             	sub    esp,0xc
c0004d14:	68 60 04 00 00       	push   0x460
c0004d19:	e8 a3 34 00 00       	call   c00081c1 <ff_memalloc>
c0004d1e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004d22:	83 c4 10             	add    esp,0x10
c0004d25:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004d2a:	0f 84 c0 03 00 00    	je     c00050f0 <f_open+0x432>
c0004d30:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d34:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004d38:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004d3e:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004d41:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004d44:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004d4b:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004d4f:	e8 40 fe ff ff       	call   c0004b94 <follow_path>
c0004d54:	89 c5                	mov    ebp,eax
c0004d56:	85 c0                	test   eax,eax
c0004d58:	75 0c                	jne    c0004d66 <f_open+0xa8>
c0004d5a:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004d5f:	79 05                	jns    c0004d66 <f_open+0xa8>
c0004d61:	bd 06 00 00 00       	mov    ebp,0x6
c0004d66:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0004d6c:	0f 84 84 01 00 00    	je     c0004ef6 <f_open+0x238>
c0004d72:	85 ed                	test   ebp,ebp
c0004d74:	74 20                	je     c0004d96 <f_open+0xd8>
c0004d76:	83 fd 04             	cmp    ebp,0x4
c0004d79:	0f 85 58 03 00 00    	jne    c00050d7 <f_open+0x419>
c0004d7f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004d83:	83 ce 08             	or     esi,0x8
c0004d86:	e8 8a f2 ff ff       	call   c0004015 <dir_register>
c0004d8b:	89 c5                	mov    ebp,eax
c0004d8d:	85 c0                	test   eax,eax
c0004d8f:	74 2f                	je     c0004dc0 <f_open+0x102>
c0004d91:	e9 41 03 00 00       	jmp    c00050d7 <f_open+0x419>
c0004d96:	bd 07 00 00 00       	mov    ebp,0x7
c0004d9b:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0004da0:	0f 85 31 03 00 00    	jne    c00050d7 <f_open+0x419>
c0004da6:	bd 08 00 00 00       	mov    ebp,0x8
c0004dab:	f7 c7 04 00 00 00    	test   edi,0x4
c0004db1:	0f 85 20 03 00 00    	jne    c00050d7 <f_open+0x419>
c0004db7:	83 e7 08             	and    edi,0x8
c0004dba:	0f 84 65 01 00 00    	je     c0004f25 <f_open+0x267>
c0004dc0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004dc4:	8a 02                	mov    al,BYTE PTR [edx]
c0004dc6:	3c 04                	cmp    al,0x4
c0004dc8:	0f 85 97 00 00 00    	jne    c0004e65 <f_open+0x1a7>
c0004dce:	8d 42 10             	lea    eax,[edx+0x10]
c0004dd1:	89 13                	mov    DWORD PTR [ebx],edx
c0004dd3:	89 da                	mov    edx,ebx
c0004dd5:	e8 80 fd ff ff       	call   c0004b5a <init_alloc_info.isra.2>
c0004dda:	31 d2                	xor    edx,edx
c0004ddc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004de0:	b9 1e 00 00 00       	mov    ecx,0x1e
c0004de5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004de8:	83 c0 02             	add    eax,0x2
c0004deb:	e8 32 cc ff ff       	call   c0001a22 <mem_set>
c0004df0:	b9 1a 00 00 00       	mov    ecx,0x1a
c0004df5:	31 d2                	xor    edx,edx
c0004df7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004dfb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004dfe:	83 c0 26             	add    eax,0x26
c0004e01:	e8 1c cc ff ff       	call   c0001a22 <mem_set>
c0004e06:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e0a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0004e0d:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c0004e11:	ba 00 00 21 50       	mov    edx,0x50210000
c0004e16:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e19:	83 c0 08             	add    eax,0x8
c0004e1c:	e8 e3 cb ff ff       	call   c0001a04 <st_dword>
c0004e21:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e25:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e28:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c0004e2c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004e30:	e8 b7 ea ff ff       	call   c00038ec <store_xdir>
c0004e35:	89 c5                	mov    ebp,eax
c0004e37:	85 c0                	test   eax,eax
c0004e39:	0f 85 98 02 00 00    	jne    c00050d7 <f_open+0x419>
c0004e3f:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004e42:	85 d2                	test   edx,edx
c0004e44:	0f 84 db 00 00 00    	je     c0004f25 <f_open+0x267>
c0004e4a:	31 c9                	xor    ecx,ecx
c0004e4c:	89 d8                	mov    eax,ebx
c0004e4e:	e8 8e e3 ff ff       	call   c00031e1 <remove_chain>
c0004e53:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004e57:	89 c5                	mov    ebp,eax
c0004e59:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004e5c:	48                   	dec    eax
c0004e5d:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0004e60:	e9 b8 00 00 00       	jmp    c0004f1d <f_open+0x25f>
c0004e65:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0004e69:	89 ea                	mov    edx,ebp
c0004e6b:	e8 99 fc ff ff       	call   c0004b09 <ld_clust.isra.0>
c0004e70:	ba 00 00 21 50       	mov    edx,0x50210000
c0004e75:	89 c7                	mov    edi,eax
c0004e77:	8d 45 0e             	lea    eax,[ebp+0xe]
c0004e7a:	e8 85 cb ff ff       	call   c0001a04 <st_dword>
c0004e7f:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004e83:	31 c9                	xor    ecx,ecx
c0004e85:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0004e89:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e8d:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004e91:	e8 9c fc ff ff       	call   c0004b32 <st_clust.isra.1>
c0004e96:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004e9a:	31 d2                	xor    edx,edx
c0004e9c:	83 c0 1c             	add    eax,0x1c
c0004e9f:	e8 60 cb ff ff       	call   c0001a04 <st_dword>
c0004ea4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ea8:	85 ff                	test   edi,edi
c0004eaa:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004eae:	74 75                	je     c0004f25 <f_open+0x267>
c0004eb0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004eb4:	31 c9                	xor    ecx,ecx
c0004eb6:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0004eb9:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0004ebc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004ec0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004ec4:	89 fa                	mov    edx,edi
c0004ec6:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004eca:	e8 12 e3 ff ff       	call   c00031e1 <remove_chain>
c0004ecf:	89 c5                	mov    ebp,eax
c0004ed1:	85 c0                	test   eax,eax
c0004ed3:	0f 85 fe 01 00 00    	jne    c00050d7 <f_open+0x419>
c0004ed9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004edd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004ee1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ee5:	4f                   	dec    edi
c0004ee6:	e8 81 d2 ff ff       	call   c000216c <move_window>
c0004eeb:	89 c5                	mov    ebp,eax
c0004eed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ef1:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0004ef4:	eb 27                	jmp    c0004f1d <f_open+0x25f>
c0004ef6:	85 ed                	test   ebp,ebp
c0004ef8:	0f 85 d9 01 00 00    	jne    c00050d7 <f_open+0x419>
c0004efe:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c0004f02:	bd 04 00 00 00       	mov    ebp,0x4
c0004f07:	a8 10                	test   al,0x10
c0004f09:	0f 85 c8 01 00 00    	jne    c00050d7 <f_open+0x419>
c0004f0f:	83 e7 02             	and    edi,0x2
c0004f12:	74 11                	je     c0004f25 <f_open+0x267>
c0004f14:	bd 07 00 00 00       	mov    ebp,0x7
c0004f19:	a8 01                	test   al,0x1
c0004f1b:	eb 02                	jmp    c0004f1f <f_open+0x261>
c0004f1d:	85 ed                	test   ebp,ebp
c0004f1f:	0f 85 b2 01 00 00    	jne    c00050d7 <f_open+0x419>
c0004f25:	f7 c6 08 00 00 00    	test   esi,0x8
c0004f2b:	74 03                	je     c0004f30 <f_open+0x272>
c0004f2d:	83 ce 40             	or     esi,0x40
c0004f30:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004f34:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c0004f37:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c0004f3a:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c0004f3d:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c0004f40:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0004f44:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c0004f47:	8a 02                	mov    al,BYTE PTR [edx]
c0004f49:	3c 04                	cmp    al,0x4
c0004f4b:	75 2a                	jne    c0004f77 <f_open+0x2b9>
c0004f4d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004f51:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0004f56:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004f59:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004f5d:	30 c0                	xor    al,al
c0004f5f:	09 c8                	or     eax,ecx
c0004f61:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004f64:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0004f68:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004f6b:	8d 42 10             	lea    eax,[edx+0x10]
c0004f6e:	89 da                	mov    edx,ebx
c0004f70:	e8 e5 fb ff ff       	call   c0004b5a <init_alloc_info.isra.2>
c0004f75:	eb 1c                	jmp    c0004f93 <f_open+0x2d5>
c0004f77:	89 fa                	mov    edx,edi
c0004f79:	e8 8b fb ff ff       	call   c0004b09 <ld_clust.isra.0>
c0004f7e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004f81:	8d 47 1c             	lea    eax,[edi+0x1c]
c0004f84:	e8 12 ca ff ff       	call   c000199b <ld_dword>
c0004f89:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0004f90:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004f93:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f97:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0004f9e:	89 03                	mov    DWORD PTR [ebx],eax
c0004fa0:	31 d2                	xor    edx,edx
c0004fa2:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004fa6:	b9 00 02 00 00       	mov    ecx,0x200
c0004fab:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0004faf:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0004fb3:	89 f0                	mov    eax,esi
c0004fb5:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0004fbc:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0004fbf:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c0004fc6:	8d 43 50             	lea    eax,[ebx+0x50]
c0004fc9:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0004fd0:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0004fd7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004fdb:	e8 42 ca ff ff       	call   c0001a22 <mem_set>
c0004fe0:	83 e6 20             	and    esi,0x20
c0004fe3:	75 07                	jne    c0004fec <f_open+0x32e>
c0004fe5:	31 ed                	xor    ebp,ebp
c0004fe7:	e9 eb 00 00 00       	jmp    c00050d7 <f_open+0x419>
c0004fec:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004fef:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0004ff2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004ff6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004ffa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ffe:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005002:	74 e1                	je     c0004fe5 <f_open+0x327>
c0005004:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005008:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000500c:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c000500f:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005012:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005016:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0005019:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c000501d:	31 ff                	xor    edi,edi
c000501f:	c1 e5 09             	shl    ebp,0x9
c0005022:	89 ee                	mov    esi,ebp
c0005024:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0005028:	89 f8                	mov    eax,edi
c000502a:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c000502e:	73 22                	jae    c0005052 <f_open+0x394>
c0005030:	89 d8                	mov    eax,ebx
c0005032:	e8 bd dc ff ff       	call   c0002cf4 <get_fat>
c0005037:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c000503b:	89 c2                	mov    edx,eax
c000503d:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c0005041:	83 f8 01             	cmp    eax,0x1
c0005044:	76 10                	jbe    c0005056 <f_open+0x398>
c0005046:	83 f8 ff             	cmp    eax,0xffffffff
c0005049:	75 d9                	jne    c0005024 <f_open+0x366>
c000504b:	bd 01 00 00 00       	mov    ebp,0x1
c0005050:	eb 09                	jmp    c000505b <f_open+0x39d>
c0005052:	31 ed                	xor    ebp,ebp
c0005054:	eb 05                	jmp    c000505b <f_open+0x39d>
c0005056:	bd 02 00 00 00       	mov    ebp,0x2
c000505b:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000505e:	85 ed                	test   ebp,ebp
c0005060:	75 75                	jne    c00050d7 <f_open+0x419>
c0005062:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005066:	25 ff 01 00 00       	and    eax,0x1ff
c000506b:	0f 84 74 ff ff ff    	je     c0004fe5 <f_open+0x327>
c0005071:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005075:	bd 02 00 00 00       	mov    ebp,0x2
c000507a:	89 c8                	mov    eax,ecx
c000507c:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005080:	e8 a2 cb ff ff       	call   c0001c27 <clst2sect>
c0005085:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005089:	89 d7                	mov    edi,edx
c000508b:	09 c7                	or     edi,eax
c000508d:	74 48                	je     c00050d7 <f_open+0x419>
c000508f:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005093:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005097:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000509f:	0f ac fe 09          	shrd   esi,edi,0x9
c00050a3:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00050a7:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00050ab:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00050ae:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00050b2:	83 ec 0c             	sub    esp,0xc
c00050b5:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c00050b8:	6a 01                	push   0x1
c00050ba:	52                   	push   edx
c00050bb:	50                   	push   eax
c00050bc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00050c0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00050c4:	50                   	push   eax
c00050c5:	e8 79 c8 ff ff       	call   c0001943 <disk_read>
c00050ca:	83 c4 20             	add    esp,0x20
c00050cd:	85 c0                	test   eax,eax
c00050cf:	0f 95 c0             	setne  al
c00050d2:	0f b6 c0             	movzx  eax,al
c00050d5:	89 c5                	mov    ebp,eax
c00050d7:	83 ec 0c             	sub    esp,0xc
c00050da:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00050de:	e8 f4 30 00 00       	call   c00081d7 <ff_memfree>
c00050e3:	83 c4 10             	add    esp,0x10
c00050e6:	85 ed                	test   ebp,ebp
c00050e8:	74 06                	je     c00050f0 <f_open+0x432>
c00050ea:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00050f0:	83 c4 7c             	add    esp,0x7c
c00050f3:	89 e8                	mov    eax,ebp
c00050f5:	5b                   	pop    ebx
c00050f6:	5e                   	pop    esi
c00050f7:	5f                   	pop    edi
c00050f8:	5d                   	pop    ebp
c00050f9:	c3                   	ret    

c00050fa <f_read>:
c00050fa:	55                   	push   ebp
c00050fb:	57                   	push   edi
c00050fc:	56                   	push   esi
c00050fd:	53                   	push   ebx
c00050fe:	83 ec 2c             	sub    esp,0x2c
c0005101:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005105:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005109:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000510f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005113:	89 d8                	mov    eax,ebx
c0005115:	e8 77 cf ff ff       	call   c0002091 <validate>
c000511a:	89 c5                	mov    ebp,eax
c000511c:	85 c0                	test   eax,eax
c000511e:	0f 85 4c 02 00 00    	jne    c0005370 <f_read+0x276>
c0005124:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005128:	85 ed                	test   ebp,ebp
c000512a:	0f 85 40 02 00 00    	jne    c0005370 <f_read+0x276>
c0005130:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0005134:	0f 84 31 02 00 00    	je     c000536b <f_read+0x271>
c000513a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000513d:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005140:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0005143:	bf 00 00 00 00       	mov    edi,0x0
c0005148:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c000514b:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c000514f:	89 d1                	mov    ecx,edx
c0005151:	19 f9                	sbb    ecx,edi
c0005153:	0f 83 cf 00 00 00    	jae    c0005228 <f_read+0x12e>
c0005159:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000515d:	e9 c6 00 00 00       	jmp    c0005228 <f_read+0x12e>
c0005162:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005165:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005168:	89 d0                	mov    eax,edx
c000516a:	25 ff 01 00 00       	and    eax,0x1ff
c000516f:	0f 85 c9 01 00 00    	jne    c000533e <f_read+0x244>
c0005175:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005179:	89 d6                	mov    esi,edx
c000517b:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000517f:	89 cf                	mov    edi,ecx
c0005181:	48                   	dec    eax
c0005182:	0f ac fe 09          	shrd   esi,edi,0x9
c0005186:	21 f0                	and    eax,esi
c0005188:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000518c:	0f 84 a6 00 00 00    	je     c0005238 <f_read+0x13e>
c0005192:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005196:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005199:	89 c8                	mov    eax,ecx
c000519b:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000519e:	e8 84 ca ff ff       	call   c0001c27 <clst2sect>
c00051a3:	89 d7                	mov    edi,edx
c00051a5:	09 c7                	or     edi,eax
c00051a7:	0f 84 b4 00 00 00    	je     c0005261 <f_read+0x167>
c00051ad:	31 ff                	xor    edi,edi
c00051af:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00051b3:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00051b6:	01 c6                	add    esi,eax
c00051b8:	11 d7                	adc    edi,edx
c00051ba:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00051c2:	0f 86 fd 00 00 00    	jbe    c00052c5 <f_read+0x1cb>
c00051c8:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00051cc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00051d0:	c1 e8 09             	shr    eax,0x9
c00051d3:	89 04 24             	mov    DWORD PTR [esp],eax
c00051d6:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00051da:	03 14 24             	add    edx,DWORD PTR [esp]
c00051dd:	39 c2                	cmp    edx,eax
c00051df:	76 07                	jbe    c00051e8 <f_read+0xee>
c00051e1:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00051e5:	89 04 24             	mov    DWORD PTR [esp],eax
c00051e8:	83 ec 0c             	sub    esp,0xc
c00051eb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00051ef:	57                   	push   edi
c00051f0:	56                   	push   esi
c00051f1:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00051f5:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00051f9:	50                   	push   eax
c00051fa:	e8 44 c7 ff ff       	call   c0001943 <disk_read>
c00051ff:	83 c4 20             	add    esp,0x20
c0005202:	85 c0                	test   eax,eax
c0005204:	75 6e                	jne    c0005274 <f_read+0x17a>
c0005206:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000520a:	78 7e                	js     c000528a <f_read+0x190>
c000520c:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000520f:	c1 e6 09             	shl    esi,0x9
c0005212:	31 ff                	xor    edi,edi
c0005214:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0005218:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000521c:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0005220:	01 30                	add    DWORD PTR [eax],esi
c0005222:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c0005225:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c0005228:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000522d:	0f 85 2f ff ff ff    	jne    c0005162 <f_read+0x68>
c0005233:	e9 38 01 00 00       	jmp    c0005370 <f_read+0x276>
c0005238:	89 c8                	mov    eax,ecx
c000523a:	09 d0                	or     eax,edx
c000523c:	75 05                	jne    c0005243 <f_read+0x149>
c000523e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005241:	eb 19                	jmp    c000525c <f_read+0x162>
c0005243:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c0005247:	74 09                	je     c0005252 <f_read+0x158>
c0005249:	89 d8                	mov    eax,ebx
c000524b:	e8 f8 c9 ff ff       	call   c0001c48 <clmt_clust>
c0005250:	eb 0a                	jmp    c000525c <f_read+0x162>
c0005252:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005255:	89 d8                	mov    eax,ebx
c0005257:	e8 98 da ff ff       	call   c0002cf4 <get_fat>
c000525c:	83 f8 01             	cmp    eax,0x1
c000525f:	77 0e                	ja     c000526f <f_read+0x175>
c0005261:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005265:	bd 02 00 00 00       	mov    ebp,0x2
c000526a:	e9 01 01 00 00       	jmp    c0005370 <f_read+0x276>
c000526f:	83 f8 ff             	cmp    eax,0xffffffff
c0005272:	75 0e                	jne    c0005282 <f_read+0x188>
c0005274:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005278:	bd 01 00 00 00       	mov    ebp,0x1
c000527d:	e9 ee 00 00 00       	jmp    c0005370 <f_read+0x276>
c0005282:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005285:	e9 08 ff ff ff       	jmp    c0005192 <f_read+0x98>
c000528a:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000528d:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005290:	29 f0                	sub    eax,esi
c0005292:	19 fa                	sbb    edx,edi
c0005294:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0005297:	89 d7                	mov    edi,edx
c0005299:	ba 00 00 00 00       	mov    edx,0x0
c000529e:	89 f9                	mov    ecx,edi
c00052a0:	19 d1                	sbb    ecx,edx
c00052a2:	0f 83 64 ff ff ff    	jae    c000520c <f_read+0x112>
c00052a8:	89 c7                	mov    edi,eax
c00052aa:	8d 53 50             	lea    edx,[ebx+0x50]
c00052ad:	c1 e7 09             	shl    edi,0x9
c00052b0:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00052b4:	b9 00 02 00 00       	mov    ecx,0x200
c00052b9:	01 f8                	add    eax,edi
c00052bb:	e8 4d c7 ff ff       	call   c0001a0d <mem_cpy>
c00052c0:	e9 47 ff ff ff       	jmp    c000520c <f_read+0x112>
c00052c5:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00052c8:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00052cb:	89 04 24             	mov    DWORD PTR [esp],eax
c00052ce:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00052d2:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c00052d6:	75 05                	jne    c00052dd <f_read+0x1e3>
c00052d8:	39 34 24             	cmp    DWORD PTR [esp],esi
c00052db:	74 5b                	je     c0005338 <f_read+0x23e>
c00052dd:	8d 43 50             	lea    eax,[ebx+0x50]
c00052e0:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00052e4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00052e8:	79 2a                	jns    c0005314 <f_read+0x21a>
c00052ea:	83 ec 0c             	sub    esp,0xc
c00052ed:	6a 01                	push   0x1
c00052ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00052f3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00052f7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00052fb:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00052ff:	50                   	push   eax
c0005300:	e8 54 c6 ff ff       	call   c0001959 <disk_write>
c0005305:	83 c4 20             	add    esp,0x20
c0005308:	85 c0                	test   eax,eax
c000530a:	0f 85 64 ff ff ff    	jne    c0005274 <f_read+0x17a>
c0005310:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005314:	83 ec 0c             	sub    esp,0xc
c0005317:	6a 01                	push   0x1
c0005319:	57                   	push   edi
c000531a:	56                   	push   esi
c000531b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000531f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005323:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005327:	50                   	push   eax
c0005328:	e8 16 c6 ff ff       	call   c0001943 <disk_read>
c000532d:	83 c4 20             	add    esp,0x20
c0005330:	85 c0                	test   eax,eax
c0005332:	0f 85 3c ff ff ff    	jne    c0005274 <f_read+0x17a>
c0005338:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000533b:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000533e:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005341:	ba 00 02 00 00       	mov    edx,0x200
c0005346:	25 ff 01 00 00       	and    eax,0x1ff
c000534b:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000534f:	29 c2                	sub    edx,eax
c0005351:	39 d6                	cmp    esi,edx
c0005353:	76 02                	jbe    c0005357 <f_read+0x25d>
c0005355:	89 d6                	mov    esi,edx
c0005357:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c000535b:	89 f1                	mov    ecx,esi
c000535d:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005361:	e8 a7 c6 ff ff       	call   c0001a0d <mem_cpy>
c0005366:	e9 a7 fe ff ff       	jmp    c0005212 <f_read+0x118>
c000536b:	bd 07 00 00 00       	mov    ebp,0x7
c0005370:	83 c4 2c             	add    esp,0x2c
c0005373:	89 e8                	mov    eax,ebp
c0005375:	5b                   	pop    ebx
c0005376:	5e                   	pop    esi
c0005377:	5f                   	pop    edi
c0005378:	5d                   	pop    ebp
c0005379:	c3                   	ret    

c000537a <f_write>:
c000537a:	55                   	push   ebp
c000537b:	57                   	push   edi
c000537c:	56                   	push   esi
c000537d:	53                   	push   ebx
c000537e:	83 ec 2c             	sub    esp,0x2c
c0005381:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005385:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005389:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000538f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005393:	89 d8                	mov    eax,ebx
c0005395:	e8 f7 cc ff ff       	call   c0002091 <validate>
c000539a:	89 c5                	mov    ebp,eax
c000539c:	85 c0                	test   eax,eax
c000539e:	0f 85 86 02 00 00    	jne    c000562a <f_write+0x2b0>
c00053a4:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00053a8:	85 ed                	test   ebp,ebp
c00053aa:	0f 85 7a 02 00 00    	jne    c000562a <f_write+0x2b0>
c00053b0:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00053b4:	0f 84 6b 02 00 00    	je     c0005625 <f_write+0x2ab>
c00053ba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00053be:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00053c1:	0f 84 43 01 00 00    	je     c000550a <f_write+0x190>
c00053c7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00053ca:	89 c1                	mov    ecx,eax
c00053cc:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00053d0:	0f 83 34 01 00 00    	jae    c000550a <f_write+0x190>
c00053d6:	f7 d0                	not    eax
c00053d8:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00053dc:	e9 29 01 00 00       	jmp    c000550a <f_write+0x190>
c00053e1:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00053e4:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00053e7:	89 d0                	mov    eax,edx
c00053e9:	25 ff 01 00 00       	and    eax,0x1ff
c00053ee:	0f 85 00 02 00 00    	jne    c00055f4 <f_write+0x27a>
c00053f4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00053f8:	89 d6                	mov    esi,edx
c00053fa:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00053fe:	89 cf                	mov    edi,ecx
c0005400:	48                   	dec    eax
c0005401:	0f ac fe 09          	shrd   esi,edi,0x9
c0005405:	21 f0                	and    eax,esi
c0005407:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000540b:	0f 84 06 01 00 00    	je     c0005517 <f_write+0x19d>
c0005411:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005415:	0f 88 6e 01 00 00    	js     c0005589 <f_write+0x20f>
c000541b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000541f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005422:	89 c8                	mov    eax,ecx
c0005424:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0005428:	e8 fa c7 ff ff       	call   c0001c27 <clst2sect>
c000542d:	89 d1                	mov    ecx,edx
c000542f:	09 c1                	or     ecx,eax
c0005431:	0f 84 1c 01 00 00    	je     c0005553 <f_write+0x1d9>
c0005437:	31 ff                	xor    edi,edi
c0005439:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000543d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0005441:	01 c6                	add    esi,eax
c0005443:	11 d7                	adc    edi,edx
c0005445:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000544d:	0f 86 63 01 00 00    	jbe    c00055b6 <f_write+0x23c>
c0005453:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005457:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000545b:	c1 e8 09             	shr    eax,0x9
c000545e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005462:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005466:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c000546a:	39 c2                	cmp    edx,eax
c000546c:	76 08                	jbe    c0005476 <f_write+0xfc>
c000546e:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0005472:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005476:	83 ec 0c             	sub    esp,0xc
c0005479:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000547d:	57                   	push   edi
c000547e:	56                   	push   esi
c000547f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005483:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005487:	50                   	push   eax
c0005488:	e8 cc c4 ff ff       	call   c0001959 <disk_write>
c000548d:	83 c4 20             	add    esp,0x20
c0005490:	85 c0                	test   eax,eax
c0005492:	0f 85 ce 00 00 00    	jne    c0005566 <f_write+0x1ec>
c0005498:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000549b:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000549e:	29 f0                	sub    eax,esi
c00054a0:	19 fa                	sbb    edx,edi
c00054a2:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00054a6:	89 d7                	mov    edi,edx
c00054a8:	ba 00 00 00 00       	mov    edx,0x0
c00054ad:	89 f9                	mov    ecx,edi
c00054af:	19 d1                	sbb    ecx,edx
c00054b1:	73 1c                	jae    c00054cf <f_write+0x155>
c00054b3:	89 c7                	mov    edi,eax
c00054b5:	b9 00 02 00 00       	mov    ecx,0x200
c00054ba:	c1 e7 09             	shl    edi,0x9
c00054bd:	8d 43 50             	lea    eax,[ebx+0x50]
c00054c0:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c00054c4:	89 fa                	mov    edx,edi
c00054c6:	e8 42 c5 ff ff       	call   c0001a0d <mem_cpy>
c00054cb:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00054cf:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00054d3:	c1 e6 09             	shl    esi,0x9
c00054d6:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00054da:	31 ff                	xor    edi,edi
c00054dc:	01 30                	add    DWORD PTR [eax],esi
c00054de:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00054e2:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00054e6:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00054e9:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00054ec:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00054ef:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00054f2:	89 c1                	mov    ecx,eax
c00054f4:	39 f2                	cmp    edx,esi
c00054f6:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00054f9:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00054fc:	19 f9                	sbb    ecx,edi
c00054fe:	73 04                	jae    c0005504 <f_write+0x18a>
c0005500:	89 f2                	mov    edx,esi
c0005502:	89 f8                	mov    eax,edi
c0005504:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0005507:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000550a:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000550f:	0f 85 cc fe ff ff    	jne    c00053e1 <f_write+0x67>
c0005515:	eb 2e                	jmp    c0005545 <f_write+0x1cb>
c0005517:	89 c8                	mov    eax,ecx
c0005519:	09 d0                	or     eax,edx
c000551b:	75 0b                	jne    c0005528 <f_write+0x1ae>
c000551d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005520:	31 d2                	xor    edx,edx
c0005522:	85 c0                	test   eax,eax
c0005524:	75 28                	jne    c000554e <f_write+0x1d4>
c0005526:	eb 12                	jmp    c000553a <f_write+0x1c0>
c0005528:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c000552c:	74 09                	je     c0005537 <f_write+0x1bd>
c000552e:	89 d8                	mov    eax,ebx
c0005530:	e8 13 c7 ff ff       	call   c0001c48 <clmt_clust>
c0005535:	eb 0a                	jmp    c0005541 <f_write+0x1c7>
c0005537:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000553a:	89 d8                	mov    eax,ebx
c000553c:	e8 a1 da ff ff       	call   c0002fe2 <create_chain>
c0005541:	85 c0                	test   eax,eax
c0005543:	75 09                	jne    c000554e <f_write+0x1d4>
c0005545:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005549:	e9 dc 00 00 00       	jmp    c000562a <f_write+0x2b0>
c000554e:	83 f8 01             	cmp    eax,0x1
c0005551:	75 0e                	jne    c0005561 <f_write+0x1e7>
c0005553:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005557:	bd 02 00 00 00       	mov    ebp,0x2
c000555c:	e9 c9 00 00 00       	jmp    c000562a <f_write+0x2b0>
c0005561:	83 f8 ff             	cmp    eax,0xffffffff
c0005564:	75 0e                	jne    c0005574 <f_write+0x1fa>
c0005566:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000556a:	bd 01 00 00 00       	mov    ebp,0x1
c000556f:	e9 b6 00 00 00       	jmp    c000562a <f_write+0x2b0>
c0005574:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005577:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000557b:	0f 85 90 fe ff ff    	jne    c0005411 <f_write+0x97>
c0005581:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005584:	e9 88 fe ff ff       	jmp    c0005411 <f_write+0x97>
c0005589:	83 ec 0c             	sub    esp,0xc
c000558c:	8d 43 50             	lea    eax,[ebx+0x50]
c000558f:	6a 01                	push   0x1
c0005591:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005594:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005597:	50                   	push   eax
c0005598:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000559c:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00055a0:	50                   	push   eax
c00055a1:	e8 b3 c3 ff ff       	call   c0001959 <disk_write>
c00055a6:	83 c4 20             	add    esp,0x20
c00055a9:	85 c0                	test   eax,eax
c00055ab:	75 b9                	jne    c0005566 <f_write+0x1ec>
c00055ad:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00055b1:	e9 65 fe ff ff       	jmp    c000541b <f_write+0xa1>
c00055b6:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c00055b9:	75 05                	jne    c00055c0 <f_write+0x246>
c00055bb:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c00055be:	74 2e                	je     c00055ee <f_write+0x274>
c00055c0:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00055c3:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00055c6:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c00055c9:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c00055cc:	73 20                	jae    c00055ee <f_write+0x274>
c00055ce:	83 ec 0c             	sub    esp,0xc
c00055d1:	8d 43 50             	lea    eax,[ebx+0x50]
c00055d4:	6a 01                	push   0x1
c00055d6:	57                   	push   edi
c00055d7:	56                   	push   esi
c00055d8:	50                   	push   eax
c00055d9:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00055dd:	50                   	push   eax
c00055de:	e8 60 c3 ff ff       	call   c0001943 <disk_read>
c00055e3:	83 c4 20             	add    esp,0x20
c00055e6:	85 c0                	test   eax,eax
c00055e8:	0f 85 78 ff ff ff    	jne    c0005566 <f_write+0x1ec>
c00055ee:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00055f1:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00055f4:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00055f7:	ba 00 02 00 00       	mov    edx,0x200
c00055fc:	25 ff 01 00 00       	and    eax,0x1ff
c0005601:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0005605:	29 c2                	sub    edx,eax
c0005607:	39 d6                	cmp    esi,edx
c0005609:	76 02                	jbe    c000560d <f_write+0x293>
c000560b:	89 d6                	mov    esi,edx
c000560d:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c0005611:	89 f1                	mov    ecx,esi
c0005613:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0005617:	e8 f1 c3 ff ff       	call   c0001a0d <mem_cpy>
c000561c:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c0005620:	e9 b1 fe ff ff       	jmp    c00054d6 <f_write+0x15c>
c0005625:	bd 07 00 00 00       	mov    ebp,0x7
c000562a:	83 c4 2c             	add    esp,0x2c
c000562d:	89 e8                	mov    eax,ebp
c000562f:	5b                   	pop    ebx
c0005630:	5e                   	pop    esi
c0005631:	5f                   	pop    edi
c0005632:	5d                   	pop    ebp
c0005633:	c3                   	ret    

c0005634 <f_sync>:
c0005634:	56                   	push   esi
c0005635:	53                   	push   ebx
c0005636:	83 ec 64             	sub    esp,0x64
c0005639:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c000563d:	8d 54 24 10          	lea    edx,[esp+0x10]
c0005641:	89 d8                	mov    eax,ebx
c0005643:	e8 49 ca ff ff       	call   c0002091 <validate>
c0005648:	85 c0                	test   eax,eax
c000564a:	0f 85 ba 01 00 00    	jne    c000580a <f_sync+0x1d6>
c0005650:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005653:	f6 c2 40             	test   dl,0x40
c0005656:	0f 84 ae 01 00 00    	je     c000580a <f_sync+0x1d6>
c000565c:	84 d2                	test   dl,dl
c000565e:	79 33                	jns    c0005693 <f_sync+0x5f>
c0005660:	83 ec 0c             	sub    esp,0xc
c0005663:	8d 43 50             	lea    eax,[ebx+0x50]
c0005666:	6a 01                	push   0x1
c0005668:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000566b:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000566e:	50                   	push   eax
c000566f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005673:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005677:	50                   	push   eax
c0005678:	e8 dc c2 ff ff       	call   c0001959 <disk_write>
c000567d:	83 c4 20             	add    esp,0x20
c0005680:	89 c2                	mov    edx,eax
c0005682:	b8 01 00 00 00       	mov    eax,0x1
c0005687:	85 d2                	test   edx,edx
c0005689:	0f 85 7b 01 00 00    	jne    c000580a <f_sync+0x1d6>
c000568f:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005693:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005697:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000569a:	0f 85 11 01 00 00    	jne    c00057b1 <f_sync+0x17d>
c00056a0:	89 d8                	mov    eax,ebx
c00056a2:	e8 13 d6 ff ff       	call   c0002cba <fill_first_frag>
c00056a7:	85 c0                	test   eax,eax
c00056a9:	0f 85 5b 01 00 00    	jne    c000580a <f_sync+0x1d6>
c00056af:	83 c9 ff             	or     ecx,0xffffffff
c00056b2:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056b5:	89 d8                	mov    eax,ebx
c00056b7:	e8 c9 d5 ff ff       	call   c0002c85 <fill_last_frag>
c00056bc:	85 c0                	test   eax,eax
c00056be:	0f 85 46 01 00 00    	jne    c000580a <f_sync+0x1d6>
c00056c4:	83 ec 0c             	sub    esp,0xc
c00056c7:	68 60 04 00 00       	push   0x460
c00056cc:	e8 f0 2a 00 00       	call   c00081c1 <ff_memalloc>
c00056d1:	83 c4 10             	add    esp,0x10
c00056d4:	89 c6                	mov    esi,eax
c00056d6:	b8 11 00 00 00       	mov    eax,0x11
c00056db:	85 f6                	test   esi,esi
c00056dd:	0f 84 27 01 00 00    	je     c000580a <f_sync+0x1d6>
c00056e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00056e7:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00056ed:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00056f0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00056f3:	89 da                	mov    edx,ebx
c00056f5:	8d 44 24 14          	lea    eax,[esp+0x14]
c00056f9:	e8 af df ff ff       	call   c00036ad <load_obj_xdir>
c00056fe:	85 c0                	test   eax,eax
c0005700:	0f 85 95 00 00 00    	jne    c000579b <f_sync+0x167>
c0005706:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000570a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000570d:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c0005711:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c0005714:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c0005717:	83 ca 01             	or     edx,0x1
c000571a:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c000571d:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0005720:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005723:	83 c0 34             	add    eax,0x34
c0005726:	e8 d9 c2 ff ff       	call   c0001a04 <st_dword>
c000572b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000572f:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005732:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005735:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005738:	83 c0 38             	add    eax,0x38
c000573b:	e8 c7 c2 ff ff       	call   c0001a07 <st_qword>
c0005740:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005743:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005747:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000574a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000574d:	83 c0 28             	add    eax,0x28
c0005750:	e8 b2 c2 ff ff       	call   c0001a07 <st_qword>
c0005755:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005759:	ba 00 00 21 50       	mov    edx,0x50210000
c000575e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005761:	83 c0 0c             	add    eax,0xc
c0005764:	e8 9b c2 ff ff       	call   c0001a04 <st_dword>
c0005769:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000576d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005770:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005774:	31 d2                	xor    edx,edx
c0005776:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005779:	83 c0 10             	add    eax,0x10
c000577c:	e8 83 c2 ff ff       	call   c0001a04 <st_dword>
c0005781:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005785:	e8 62 e1 ff ff       	call   c00038ec <store_xdir>
c000578a:	85 c0                	test   eax,eax
c000578c:	75 0d                	jne    c000579b <f_sync+0x167>
c000578e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005792:	e8 00 eb ff ff       	call   c0004297 <sync_fs>
c0005797:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c000579b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000579f:	83 ec 0c             	sub    esp,0xc
c00057a2:	56                   	push   esi
c00057a3:	e8 2f 2a 00 00       	call   c00081d7 <ff_memfree>
c00057a8:	83 c4 10             	add    esp,0x10
c00057ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00057af:	eb 59                	jmp    c000580a <f_sync+0x1d6>
c00057b1:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c00057b4:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c00057b7:	e8 b0 c9 ff ff       	call   c000216c <move_window>
c00057bc:	85 c0                	test   eax,eax
c00057be:	75 4a                	jne    c000580a <f_sync+0x1d6>
c00057c0:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c00057c3:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c00057c7:	89 f2                	mov    edx,esi
c00057c9:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00057cc:	8b 03                	mov    eax,DWORD PTR [ebx]
c00057ce:	e8 5f f3 ff ff       	call   c0004b32 <st_clust.isra.1>
c00057d3:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057d6:	8d 46 1c             	lea    eax,[esi+0x1c]
c00057d9:	e8 26 c2 ff ff       	call   c0001a04 <st_dword>
c00057de:	8d 46 16             	lea    eax,[esi+0x16]
c00057e1:	ba 00 00 21 50       	mov    edx,0x50210000
c00057e6:	e8 19 c2 ff ff       	call   c0001a04 <st_dword>
c00057eb:	8d 46 12             	lea    eax,[esi+0x12]
c00057ee:	31 d2                	xor    edx,edx
c00057f0:	e8 0b c2 ff ff       	call   c0001a00 <st_word>
c00057f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057f9:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00057fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005801:	e8 91 ea ff ff       	call   c0004297 <sync_fs>
c0005806:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c000580a:	83 c4 64             	add    esp,0x64
c000580d:	5b                   	pop    ebx
c000580e:	5e                   	pop    esi
c000580f:	c3                   	ret    

c0005810 <f_close>:
c0005810:	53                   	push   ebx
c0005811:	83 ec 24             	sub    esp,0x24
c0005814:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005818:	53                   	push   ebx
c0005819:	e8 16 fe ff ff       	call   c0005634 <f_sync>
c000581e:	83 c4 10             	add    esp,0x10
c0005821:	85 c0                	test   eax,eax
c0005823:	75 15                	jne    c000583a <f_close+0x2a>
c0005825:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005829:	89 d8                	mov    eax,ebx
c000582b:	e8 61 c8 ff ff       	call   c0002091 <validate>
c0005830:	85 c0                	test   eax,eax
c0005832:	75 06                	jne    c000583a <f_close+0x2a>
c0005834:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000583a:	83 c4 18             	add    esp,0x18
c000583d:	5b                   	pop    ebx
c000583e:	c3                   	ret    

c000583f <f_lseek>:
c000583f:	55                   	push   ebp
c0005840:	57                   	push   edi
c0005841:	56                   	push   esi
c0005842:	53                   	push   ebx
c0005843:	83 ec 3c             	sub    esp,0x3c
c0005846:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000584a:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c000584e:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005852:	89 04 24             	mov    DWORD PTR [esp],eax
c0005855:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005859:	89 d8                	mov    eax,ebx
c000585b:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c000585f:	e8 2d c8 ff ff       	call   c0002091 <validate>
c0005864:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005868:	85 c0                	test   eax,eax
c000586a:	0f 85 7a 04 00 00    	jne    c0005cea <f_lseek+0x4ab>
c0005870:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005874:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005878:	85 c0                	test   eax,eax
c000587a:	0f 85 6a 04 00 00    	jne    c0005cea <f_lseek+0x4ab>
c0005880:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005884:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005887:	74 0c                	je     c0005895 <f_lseek+0x56>
c0005889:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c000588c:	85 c0                	test   eax,eax
c000588e:	75 1f                	jne    c00058af <f_lseek+0x70>
c0005890:	e9 b5 01 00 00       	jmp    c0005a4a <f_lseek+0x20b>
c0005895:	83 c9 ff             	or     ecx,0xffffffff
c0005898:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000589b:	89 d8                	mov    eax,ebx
c000589d:	e8 e3 d3 ff ff       	call   c0002c85 <fill_last_frag>
c00058a2:	85 c0                	test   eax,eax
c00058a4:	74 e3                	je     c0005889 <f_lseek+0x4a>
c00058a6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00058aa:	e9 3b 04 00 00       	jmp    c0005cea <f_lseek+0x4ab>
c00058af:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c00058b4:	0f 85 ac 00 00 00    	jne    c0005966 <f_lseek+0x127>
c00058ba:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c00058be:	0f 85 a2 00 00 00    	jne    c0005966 <f_lseek+0x127>
c00058c4:	8d 78 04             	lea    edi,[eax+0x4]
c00058c7:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c00058ca:	8b 00                	mov    eax,DWORD PTR [eax]
c00058cc:	be 02 00 00 00       	mov    esi,0x2
c00058d1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00058d5:	85 ed                	test   ebp,ebp
c00058d7:	74 73                	je     c000594c <f_lseek+0x10d>
c00058d9:	89 e9                	mov    ecx,ebp
c00058db:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00058e2:	ff 04 24             	inc    DWORD PTR [esp]
c00058e5:	89 ca                	mov    edx,ecx
c00058e7:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00058eb:	89 d8                	mov    eax,ebx
c00058ed:	e8 02 d4 ff ff       	call   c0002cf4 <get_fat>
c00058f2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00058f6:	83 f8 01             	cmp    eax,0x1
c00058f9:	77 11                	ja     c000590c <f_lseek+0xcd>
c00058fb:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00058ff:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005907:	e9 de 03 00 00       	jmp    c0005cea <f_lseek+0x4ab>
c000590c:	83 f8 ff             	cmp    eax,0xffffffff
c000590f:	75 11                	jne    c0005922 <f_lseek+0xe3>
c0005911:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005915:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c000591d:	e9 c8 03 00 00       	jmp    c0005cea <f_lseek+0x4ab>
c0005922:	8d 51 01             	lea    edx,[ecx+0x1]
c0005925:	89 c1                	mov    ecx,eax
c0005927:	39 c2                	cmp    edx,eax
c0005929:	74 b7                	je     c00058e2 <f_lseek+0xa3>
c000592b:	83 c6 02             	add    esi,0x2
c000592e:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005932:	72 0b                	jb     c000593f <f_lseek+0x100>
c0005934:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005937:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c000593a:	89 0f                	mov    DWORD PTR [edi],ecx
c000593c:	83 c7 08             	add    edi,0x8
c000593f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005943:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005946:	76 04                	jbe    c000594c <f_lseek+0x10d>
c0005948:	89 c5                	mov    ebp,eax
c000594a:	eb 8d                	jmp    c00058d9 <f_lseek+0x9a>
c000594c:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c000594f:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005953:	89 30                	mov    DWORD PTR [eax],esi
c0005955:	0f 87 87 03 00 00    	ja     c0005ce2 <f_lseek+0x4a3>
c000595b:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005961:	e9 84 03 00 00       	jmp    c0005cea <f_lseek+0x4ab>
c0005966:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005969:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000596c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005970:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005974:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005978:	39 04 24             	cmp    DWORD PTR [esp],eax
c000597b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000597f:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005983:	73 0f                	jae    c0005994 <f_lseek+0x155>
c0005985:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005988:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000598c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005990:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005994:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005998:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000599c:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c000599f:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00059a2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00059a6:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00059aa:	0f 84 3a 03 00 00    	je     c0005cea <f_lseek+0x4ab>
c00059b0:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00059b4:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00059b8:	83 c6 ff             	add    esi,0xffffffff
c00059bb:	89 d8                	mov    eax,ebx
c00059bd:	83 d7 ff             	adc    edi,0xffffffff
c00059c0:	89 f2                	mov    edx,esi
c00059c2:	89 f9                	mov    ecx,edi
c00059c4:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c00059c8:	89 34 24             	mov    DWORD PTR [esp],esi
c00059cb:	e8 78 c2 ff ff       	call   c0001c48 <clmt_clust>
c00059d0:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00059d4:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00059d7:	89 c2                	mov    edx,eax
c00059d9:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00059dd:	89 c8                	mov    eax,ecx
c00059df:	e8 43 c2 ff ff       	call   c0001c27 <clst2sect>
c00059e4:	89 d7                	mov    edi,edx
c00059e6:	09 c7                	or     edi,eax
c00059e8:	0f 84 0d ff ff ff    	je     c00058fb <f_lseek+0xbc>
c00059ee:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c00059f2:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00059f8:	0f 84 ec 02 00 00    	je     c0005cea <f_lseek+0x4ab>
c00059fe:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005a02:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005a06:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005a09:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005a0d:	0f ac fe 09          	shrd   esi,edi,0x9
c0005a11:	4d                   	dec    ebp
c0005a12:	31 ff                	xor    edi,edi
c0005a14:	21 ee                	and    esi,ebp
c0005a16:	01 c6                	add    esi,eax
c0005a18:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005a1b:	11 d7                	adc    edi,edx
c0005a1d:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005a20:	39 fa                	cmp    edx,edi
c0005a22:	75 08                	jne    c0005a2c <f_lseek+0x1ed>
c0005a24:	39 f0                	cmp    eax,esi
c0005a26:	0f 84 be 02 00 00    	je     c0005cea <f_lseek+0x4ab>
c0005a2c:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005a2f:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005a33:	0f 89 80 02 00 00    	jns    c0005cb9 <f_lseek+0x47a>
c0005a39:	83 ec 0c             	sub    esp,0xc
c0005a3c:	6a 01                	push   0x1
c0005a3e:	52                   	push   edx
c0005a3f:	50                   	push   eax
c0005a40:	55                   	push   ebp
c0005a41:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005a45:	e9 5a 02 00 00       	jmp    c0005ca4 <f_lseek+0x465>
c0005a4a:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005a4e:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005a51:	74 16                	je     c0005a69 <f_lseek+0x22a>
c0005a53:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005a58:	76 0f                	jbe    c0005a69 <f_lseek+0x22a>
c0005a5a:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005a61:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005a69:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a6c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005a6f:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005a72:	89 c7                	mov    edi,eax
c0005a74:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005a78:	73 0d                	jae    c0005a87 <f_lseek+0x248>
c0005a7a:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005a7e:	75 07                	jne    c0005a87 <f_lseek+0x248>
c0005a80:	89 14 24             	mov    DWORD PTR [esp],edx
c0005a83:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005a87:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005a8a:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005a8d:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005a91:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005a98:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005a9f:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005aa2:	75 09                	jne    c0005aad <f_lseek+0x26e>
c0005aa4:	31 f6                	xor    esi,esi
c0005aa6:	31 ff                	xor    edi,edi
c0005aa8:	e9 af 01 00 00       	jmp    c0005c5c <f_lseek+0x41d>
c0005aad:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005ab1:	89 d7                	mov    edi,edx
c0005ab3:	c1 e1 09             	shl    ecx,0x9
c0005ab6:	09 c7                	or     edi,eax
c0005ab8:	89 cd                	mov    ebp,ecx
c0005aba:	74 6d                	je     c0005b29 <f_lseek+0x2ea>
c0005abc:	83 c0 ff             	add    eax,0xffffffff
c0005abf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005ac3:	83 d2 ff             	adc    edx,0xffffffff
c0005ac6:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005ac9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005acd:	83 c0 ff             	add    eax,0xffffffff
c0005ad0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005ad4:	83 d2 ff             	adc    edx,0xffffffff
c0005ad7:	31 ff                	xor    edi,edi
c0005ad9:	57                   	push   edi
c0005ada:	51                   	push   ecx
c0005adb:	52                   	push   edx
c0005adc:	50                   	push   eax
c0005add:	e8 3a 88 01 00       	call   c001e31c <__udivdi3>
c0005ae2:	83 c4 10             	add    esp,0x10
c0005ae5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005ae9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005aed:	57                   	push   edi
c0005aee:	55                   	push   ebp
c0005aef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005af3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005af7:	e8 20 88 01 00       	call   c001e31c <__udivdi3>
c0005afc:	83 c4 10             	add    esp,0x10
c0005aff:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005b03:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005b07:	19 d1                	sbb    ecx,edx
c0005b09:	72 1e                	jb     c0005b29 <f_lseek+0x2ea>
c0005b0b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005b0f:	89 e9                	mov    ecx,ebp
c0005b11:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005b14:	f7 d9                	neg    ecx
c0005b16:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005b19:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005b1d:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005b20:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005b23:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005b27:	eb 28                	jmp    c0005b51 <f_lseek+0x312>
c0005b29:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005b2c:	85 c0                	test   eax,eax
c0005b2e:	75 1e                	jne    c0005b4e <f_lseek+0x30f>
c0005b30:	31 d2                	xor    edx,edx
c0005b32:	89 d8                	mov    eax,ebx
c0005b34:	e8 a9 d4 ff ff       	call   c0002fe2 <create_chain>
c0005b39:	83 f8 01             	cmp    eax,0x1
c0005b3c:	0f 84 b9 fd ff ff    	je     c00058fb <f_lseek+0xbc>
c0005b42:	83 f8 ff             	cmp    eax,0xffffffff
c0005b45:	0f 84 c6 fd ff ff    	je     c0005911 <f_lseek+0xd2>
c0005b4b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005b4e:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005b51:	85 c0                	test   eax,eax
c0005b53:	0f 84 4b ff ff ff    	je     c0005aa4 <f_lseek+0x265>
c0005b59:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005b5d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005b65:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005b68:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005b6c:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005b6f:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005b72:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005b76:	0f 83 9d 00 00 00    	jae    c0005c19 <f_lseek+0x3da>
c0005b7c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005b80:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005b84:	29 34 24             	sub    DWORD PTR [esp],esi
c0005b87:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005b8b:	01 f2                	add    edx,esi
c0005b8d:	11 f9                	adc    ecx,edi
c0005b8f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005b93:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005b97:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005b9a:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005b9d:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005ba0:	f6 c1 02             	test   cl,0x2
c0005ba3:	74 35                	je     c0005bda <f_lseek+0x39b>
c0005ba5:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005ba9:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005bac:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005baf:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005bb3:	73 16                	jae    c0005bcb <f_lseek+0x38c>
c0005bb5:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005bb9:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005bbd:	88 ca                	mov    dl,cl
c0005bbf:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005bc2:	83 ca 40             	or     edx,0x40
c0005bc5:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005bc8:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005bcb:	89 c2                	mov    edx,eax
c0005bcd:	89 d8                	mov    eax,ebx
c0005bcf:	e8 0e d4 ff ff       	call   c0002fe2 <create_chain>
c0005bd4:	85 c0                	test   eax,eax
c0005bd6:	75 0b                	jne    c0005be3 <f_lseek+0x3a4>
c0005bd8:	eb 30                	jmp    c0005c0a <f_lseek+0x3cb>
c0005bda:	89 c2                	mov    edx,eax
c0005bdc:	89 d8                	mov    eax,ebx
c0005bde:	e8 11 d1 ff ff       	call   c0002cf4 <get_fat>
c0005be3:	83 f8 ff             	cmp    eax,0xffffffff
c0005be6:	0f 84 25 fd ff ff    	je     c0005911 <f_lseek+0xd2>
c0005bec:	83 f8 01             	cmp    eax,0x1
c0005bef:	0f 86 06 fd ff ff    	jbe    c00058fb <f_lseek+0xbc>
c0005bf5:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005bf9:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005bfc:	0f 86 f9 fc ff ff    	jbe    c00058fb <f_lseek+0xbc>
c0005c02:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005c05:	e9 5b ff ff ff       	jmp    c0005b65 <f_lseek+0x326>
c0005c0a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005c11:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005c19:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005c1c:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005c20:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005c23:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005c26:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005c29:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005c2f:	0f 84 6f fe ff ff    	je     c0005aa4 <f_lseek+0x265>
c0005c35:	89 c2                	mov    edx,eax
c0005c37:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005c3b:	e8 e7 bf ff ff       	call   c0001c27 <clst2sect>
c0005c40:	89 d7                	mov    edi,edx
c0005c42:	09 c7                	or     edi,eax
c0005c44:	0f 84 b1 fc ff ff    	je     c00058fb <f_lseek+0xbc>
c0005c4a:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005c4e:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005c51:	0f ac fe 09          	shrd   esi,edi,0x9
c0005c55:	c1 ef 09             	shr    edi,0x9
c0005c58:	01 c6                	add    esi,eax
c0005c5a:	11 d7                	adc    edi,edx
c0005c5c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005c5f:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005c62:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005c65:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005c68:	19 d1                	sbb    ecx,edx
c0005c6a:	73 0a                	jae    c0005c76 <f_lseek+0x437>
c0005c6c:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005c6f:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005c72:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005c76:	a9 ff 01 00 00       	test   eax,0x1ff
c0005c7b:	74 6d                	je     c0005cea <f_lseek+0x4ab>
c0005c7d:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005c80:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005c83:	39 fa                	cmp    edx,edi
c0005c85:	75 04                	jne    c0005c8b <f_lseek+0x44c>
c0005c87:	39 f0                	cmp    eax,esi
c0005c89:	74 5f                	je     c0005cea <f_lseek+0x4ab>
c0005c8b:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005c8e:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005c92:	79 25                	jns    c0005cb9 <f_lseek+0x47a>
c0005c94:	83 ec 0c             	sub    esp,0xc
c0005c97:	6a 01                	push   0x1
c0005c99:	52                   	push   edx
c0005c9a:	50                   	push   eax
c0005c9b:	55                   	push   ebp
c0005c9c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005ca0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005ca4:	50                   	push   eax
c0005ca5:	e8 af bc ff ff       	call   c0001959 <disk_write>
c0005caa:	83 c4 20             	add    esp,0x20
c0005cad:	85 c0                	test   eax,eax
c0005caf:	0f 85 5c fc ff ff    	jne    c0005911 <f_lseek+0xd2>
c0005cb5:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005cb9:	83 ec 0c             	sub    esp,0xc
c0005cbc:	6a 01                	push   0x1
c0005cbe:	57                   	push   edi
c0005cbf:	56                   	push   esi
c0005cc0:	55                   	push   ebp
c0005cc1:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005cc5:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005cc9:	50                   	push   eax
c0005cca:	e8 74 bc ff ff       	call   c0001943 <disk_read>
c0005ccf:	83 c4 20             	add    esp,0x20
c0005cd2:	85 c0                	test   eax,eax
c0005cd4:	0f 85 37 fc ff ff    	jne    c0005911 <f_lseek+0xd2>
c0005cda:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005cdd:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005ce0:	eb 08                	jmp    c0005cea <f_lseek+0x4ab>
c0005ce2:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005cea:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005cee:	83 c4 3c             	add    esp,0x3c
c0005cf1:	5b                   	pop    ebx
c0005cf2:	5e                   	pop    esi
c0005cf3:	5f                   	pop    edi
c0005cf4:	5d                   	pop    ebp
c0005cf5:	c3                   	ret    

c0005cf6 <f_opendir>:
c0005cf6:	56                   	push   esi
c0005cf7:	b8 09 00 00 00       	mov    eax,0x9
c0005cfc:	53                   	push   ebx
c0005cfd:	83 ec 24             	sub    esp,0x24
c0005d00:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005d04:	85 db                	test   ebx,ebx
c0005d06:	0f 84 e6 00 00 00    	je     c0005df2 <f_opendir+0xfc>
c0005d0c:	31 c9                	xor    ecx,ecx
c0005d0e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005d12:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005d16:	e8 03 c7 ff ff       	call   c000241e <mount_volume>
c0005d1b:	85 c0                	test   eax,eax
c0005d1d:	0f 85 c9 00 00 00    	jne    c0005dec <f_opendir+0xf6>
c0005d23:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005d27:	83 ec 0c             	sub    esp,0xc
c0005d2a:	89 03                	mov    DWORD PTR [ebx],eax
c0005d2c:	68 60 04 00 00       	push   0x460
c0005d31:	e8 8b 24 00 00       	call   c00081c1 <ff_memalloc>
c0005d36:	83 c4 10             	add    esp,0x10
c0005d39:	89 c6                	mov    esi,eax
c0005d3b:	b8 11 00 00 00       	mov    eax,0x11
c0005d40:	85 f6                	test   esi,esi
c0005d42:	0f 84 aa 00 00 00    	je     c0005df2 <f_opendir+0xfc>
c0005d48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005d4c:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005d52:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005d55:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005d58:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005d5c:	89 d8                	mov    eax,ebx
c0005d5e:	e8 31 ee ff ff       	call   c0004b94 <follow_path>
c0005d63:	85 c0                	test   eax,eax
c0005d65:	75 61                	jne    c0005dc8 <f_opendir+0xd2>
c0005d67:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0005d6b:	78 46                	js     c0005db3 <f_opendir+0xbd>
c0005d6d:	b8 05 00 00 00       	mov    eax,0x5
c0005d72:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0005d76:	74 50                	je     c0005dc8 <f_opendir+0xd2>
c0005d78:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005d7c:	8a 01                	mov    al,BYTE PTR [ecx]
c0005d7e:	3c 04                	cmp    al,0x4
c0005d80:	75 26                	jne    c0005da8 <f_opendir+0xb2>
c0005d82:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005d85:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d88:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005d8b:	30 d2                	xor    dl,dl
c0005d8d:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0005d91:	09 c2                	or     edx,eax
c0005d93:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0005d96:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0005d99:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005d9c:	89 da                	mov    edx,ebx
c0005d9e:	8d 41 10             	lea    eax,[ecx+0x10]
c0005da1:	e8 b4 ed ff ff       	call   c0004b5a <init_alloc_info.isra.2>
c0005da6:	eb 0b                	jmp    c0005db3 <f_opendir+0xbd>
c0005da8:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0005dab:	e8 59 ed ff ff       	call   c0004b09 <ld_clust.isra.0>
c0005db0:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005db3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005db7:	31 d2                	xor    edx,edx
c0005db9:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005dbd:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005dc1:	89 d8                	mov    eax,ebx
c0005dc3:	e8 22 d1 ff ff       	call   c0002eea <dir_sdi>
c0005dc8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005dcc:	83 ec 0c             	sub    esp,0xc
c0005dcf:	56                   	push   esi
c0005dd0:	e8 02 24 00 00       	call   c00081d7 <ff_memfree>
c0005dd5:	83 c4 10             	add    esp,0x10
c0005dd8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005ddc:	83 f8 04             	cmp    eax,0x4
c0005ddf:	74 06                	je     c0005de7 <f_opendir+0xf1>
c0005de1:	85 c0                	test   eax,eax
c0005de3:	74 0d                	je     c0005df2 <f_opendir+0xfc>
c0005de5:	eb 05                	jmp    c0005dec <f_opendir+0xf6>
c0005de7:	b8 05 00 00 00       	mov    eax,0x5
c0005dec:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005df2:	83 c4 24             	add    esp,0x24
c0005df5:	5b                   	pop    ebx
c0005df6:	5e                   	pop    esi
c0005df7:	c3                   	ret    

c0005df8 <f_closedir>:
c0005df8:	53                   	push   ebx
c0005df9:	83 ec 18             	sub    esp,0x18
c0005dfc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0005e00:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005e04:	89 d8                	mov    eax,ebx
c0005e06:	e8 86 c2 ff ff       	call   c0002091 <validate>
c0005e0b:	85 c0                	test   eax,eax
c0005e0d:	75 06                	jne    c0005e15 <f_closedir+0x1d>
c0005e0f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005e15:	83 c4 18             	add    esp,0x18
c0005e18:	5b                   	pop    ebx
c0005e19:	c3                   	ret    

c0005e1a <f_readdir>:
c0005e1a:	57                   	push   edi
c0005e1b:	56                   	push   esi
c0005e1c:	53                   	push   ebx
c0005e1d:	83 ec 20             	sub    esp,0x20
c0005e20:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005e24:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0005e28:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005e2c:	89 d8                	mov    eax,ebx
c0005e2e:	e8 5e c2 ff ff       	call   c0002091 <validate>
c0005e33:	85 c0                	test   eax,eax
c0005e35:	75 77                	jne    c0005eae <f_readdir+0x94>
c0005e37:	85 ff                	test   edi,edi
c0005e39:	75 0b                	jne    c0005e46 <f_readdir+0x2c>
c0005e3b:	31 d2                	xor    edx,edx
c0005e3d:	89 d8                	mov    eax,ebx
c0005e3f:	e8 a6 d0 ff ff       	call   c0002eea <dir_sdi>
c0005e44:	eb 68                	jmp    c0005eae <f_readdir+0x94>
c0005e46:	83 ec 0c             	sub    esp,0xc
c0005e49:	68 60 04 00 00       	push   0x460
c0005e4e:	e8 6e 23 00 00       	call   c00081c1 <ff_memalloc>
c0005e53:	83 c4 10             	add    esp,0x10
c0005e56:	89 c6                	mov    esi,eax
c0005e58:	b8 11 00 00 00       	mov    eax,0x11
c0005e5d:	85 f6                	test   esi,esi
c0005e5f:	74 4d                	je     c0005eae <f_readdir+0x94>
c0005e61:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e65:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005e6b:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005e6e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005e71:	31 d2                	xor    edx,edx
c0005e73:	89 d8                	mov    eax,ebx
c0005e75:	e8 80 d8 ff ff       	call   c00036fa <dir_read>
c0005e7a:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0005e7f:	75 19                	jne    c0005e9a <f_readdir+0x80>
c0005e81:	89 fa                	mov    edx,edi
c0005e83:	89 d8                	mov    eax,ebx
c0005e85:	e8 7e ea ff ff       	call   c0004908 <get_fileinfo>
c0005e8a:	31 d2                	xor    edx,edx
c0005e8c:	89 d8                	mov    eax,ebx
c0005e8e:	e8 af d5 ff ff       	call   c0003442 <dir_next>
c0005e93:	83 f8 04             	cmp    eax,0x4
c0005e96:	75 02                	jne    c0005e9a <f_readdir+0x80>
c0005e98:	31 c0                	xor    eax,eax
c0005e9a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005e9e:	83 ec 0c             	sub    esp,0xc
c0005ea1:	56                   	push   esi
c0005ea2:	e8 30 23 00 00       	call   c00081d7 <ff_memfree>
c0005ea7:	83 c4 10             	add    esp,0x10
c0005eaa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005eae:	83 c4 20             	add    esp,0x20
c0005eb1:	5b                   	pop    ebx
c0005eb2:	5e                   	pop    esi
c0005eb3:	5f                   	pop    edi
c0005eb4:	c3                   	ret    

c0005eb5 <f_stat>:
c0005eb5:	57                   	push   edi
c0005eb6:	31 c9                	xor    ecx,ecx
c0005eb8:	56                   	push   esi
c0005eb9:	53                   	push   ebx
c0005eba:	83 ec 50             	sub    esp,0x50
c0005ebd:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0005ec1:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005ec5:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005ec9:	e8 50 c5 ff ff       	call   c000241e <mount_volume>
c0005ece:	89 c3                	mov    ebx,eax
c0005ed0:	85 c0                	test   eax,eax
c0005ed2:	75 67                	jne    c0005f3b <f_stat+0x86>
c0005ed4:	83 ec 0c             	sub    esp,0xc
c0005ed7:	bb 11 00 00 00       	mov    ebx,0x11
c0005edc:	68 60 04 00 00       	push   0x460
c0005ee1:	e8 db 22 00 00       	call   c00081c1 <ff_memalloc>
c0005ee6:	83 c4 10             	add    esp,0x10
c0005ee9:	89 c6                	mov    esi,eax
c0005eeb:	85 c0                	test   eax,eax
c0005eed:	74 4c                	je     c0005f3b <f_stat+0x86>
c0005eef:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005ef3:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005ef9:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005efc:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005eff:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0005f03:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005f07:	e8 88 ec ff ff       	call   c0004b94 <follow_path>
c0005f0c:	89 c3                	mov    ebx,eax
c0005f0e:	85 c0                	test   eax,eax
c0005f10:	75 1d                	jne    c0005f2f <f_stat+0x7a>
c0005f12:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0005f17:	78 11                	js     c0005f2a <f_stat+0x75>
c0005f19:	85 ff                	test   edi,edi
c0005f1b:	74 12                	je     c0005f2f <f_stat+0x7a>
c0005f1d:	89 fa                	mov    edx,edi
c0005f1f:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005f23:	e8 e0 e9 ff ff       	call   c0004908 <get_fileinfo>
c0005f28:	eb 05                	jmp    c0005f2f <f_stat+0x7a>
c0005f2a:	bb 06 00 00 00       	mov    ebx,0x6
c0005f2f:	83 ec 0c             	sub    esp,0xc
c0005f32:	56                   	push   esi
c0005f33:	e8 9f 22 00 00       	call   c00081d7 <ff_memfree>
c0005f38:	83 c4 10             	add    esp,0x10
c0005f3b:	83 c4 50             	add    esp,0x50
c0005f3e:	89 d8                	mov    eax,ebx
c0005f40:	5b                   	pop    ebx
c0005f41:	5e                   	pop    esi
c0005f42:	5f                   	pop    edi
c0005f43:	c3                   	ret    

c0005f44 <f_getfree>:
c0005f44:	55                   	push   ebp
c0005f45:	31 c9                	xor    ecx,ecx
c0005f47:	57                   	push   edi
c0005f48:	56                   	push   esi
c0005f49:	53                   	push   ebx
c0005f4a:	83 ec 5c             	sub    esp,0x5c
c0005f4d:	8d 54 24 24          	lea    edx,[esp+0x24]
c0005f51:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005f55:	e8 c4 c4 ff ff       	call   c000241e <mount_volume>
c0005f5a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005f5e:	85 c0                	test   eax,eax
c0005f60:	0f 85 9d 01 00 00    	jne    c0006103 <f_getfree+0x1bf>
c0005f66:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005f6a:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0005f6e:	89 02                	mov    DWORD PTR [edx],eax
c0005f70:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0005f73:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0005f76:	8d 71 fe             	lea    esi,[ecx-0x2]
c0005f79:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005f7d:	39 f2                	cmp    edx,esi
c0005f7f:	77 0b                	ja     c0005f8c <f_getfree+0x48>
c0005f81:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0005f85:	89 10                	mov    DWORD PTR [eax],edx
c0005f87:	e9 77 01 00 00       	jmp    c0006103 <f_getfree+0x1bf>
c0005f8c:	8a 10                	mov    dl,BYTE PTR [eax]
c0005f8e:	80 fa 01             	cmp    dl,0x1
c0005f91:	75 3a                	jne    c0005fcd <f_getfree+0x89>
c0005f93:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0005f97:	be 02 00 00 00       	mov    esi,0x2
c0005f9c:	31 db                	xor    ebx,ebx
c0005f9e:	89 f2                	mov    edx,esi
c0005fa0:	8d 44 24 28          	lea    eax,[esp+0x28]
c0005fa4:	e8 4b cd ff ff       	call   c0002cf4 <get_fat>
c0005fa9:	83 f8 ff             	cmp    eax,0xffffffff
c0005fac:	0f 84 28 01 00 00    	je     c00060da <f_getfree+0x196>
c0005fb2:	83 f8 01             	cmp    eax,0x1
c0005fb5:	0f 84 29 01 00 00    	je     c00060e4 <f_getfree+0x1a0>
c0005fbb:	83 d3 00             	adc    ebx,0x0
c0005fbe:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005fc2:	46                   	inc    esi
c0005fc3:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c0005fc6:	77 d6                	ja     c0005f9e <f_getfree+0x5a>
c0005fc8:	e9 25 01 00 00       	jmp    c00060f2 <f_getfree+0x1ae>
c0005fcd:	80 fa 04             	cmp    dl,0x4
c0005fd0:	0f 85 88 00 00 00    	jne    c000605e <f_getfree+0x11a>
c0005fd6:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0005fd9:	31 ed                	xor    ebp,ebp
c0005fdb:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0005fde:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0005fe2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005fe6:	31 db                	xor    ebx,ebx
c0005fe8:	85 ed                	test   ebp,ebp
c0005fea:	75 3f                	jne    c000602b <f_getfree+0xe7>
c0005fec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005ff0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005ff4:	83 c0 01             	add    eax,0x1
c0005ff7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0005ffb:	83 d2 00             	adc    edx,0x0
c0005ffe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0006002:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0006006:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000600a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000600e:	e8 59 c1 ff ff       	call   c000216c <move_window>
c0006013:	85 c0                	test   eax,eax
c0006015:	0f 85 d3 00 00 00    	jne    c00060ee <f_getfree+0x1aa>
c000601b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000601f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006023:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006027:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000602b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000602f:	8d 4e f8             	lea    ecx,[esi-0x8]
c0006032:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c0006036:	89 cf                	mov    edi,ecx
c0006038:	85 f6                	test   esi,esi
c000603a:	74 12                	je     c000604e <f_getfree+0x10a>
c000603c:	88 c1                	mov    cl,al
c000603e:	83 e1 01             	and    ecx,0x1
c0006041:	80 f9 01             	cmp    cl,0x1
c0006044:	83 d3 00             	adc    ebx,0x0
c0006047:	d0 e8                	shr    al,1
c0006049:	4e                   	dec    esi
c000604a:	39 fe                	cmp    esi,edi
c000604c:	75 ea                	jne    c0006038 <f_getfree+0xf4>
c000604e:	45                   	inc    ebp
c000604f:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0006055:	85 f6                	test   esi,esi
c0006057:	75 8f                	jne    c0005fe8 <f_getfree+0xa4>
c0006059:	e9 94 00 00 00       	jmp    c00060f2 <f_getfree+0x1ae>
c000605e:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0006061:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0006064:	31 f6                	xor    esi,esi
c0006066:	31 db                	xor    ebx,ebx
c0006068:	85 f6                	test   esi,esi
c000606a:	75 1b                	jne    c0006087 <f_getfree+0x143>
c000606c:	89 d7                	mov    edi,edx
c000606e:	89 cd                	mov    ebp,ecx
c0006070:	83 c7 01             	add    edi,0x1
c0006073:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006077:	83 d5 00             	adc    ebp,0x0
c000607a:	e8 ed c0 ff ff       	call   c000216c <move_window>
c000607f:	85 c0                	test   eax,eax
c0006081:	75 6b                	jne    c00060ee <f_getfree+0x1aa>
c0006083:	89 fa                	mov    edx,edi
c0006085:	89 e9                	mov    ecx,ebp
c0006087:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000608b:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000608f:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006093:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006096:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000609a:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000609e:	75 11                	jne    c00060b1 <f_getfree+0x16d>
c00060a0:	e8 e9 b8 ff ff       	call   c000198e <ld_word>
c00060a5:	66 83 f8 01          	cmp    ax,0x1
c00060a9:	83 d3 00             	adc    ebx,0x0
c00060ac:	83 c6 02             	add    esi,0x2
c00060af:	eb 13                	jmp    c00060c4 <f_getfree+0x180>
c00060b1:	e8 e5 b8 ff ff       	call   c000199b <ld_dword>
c00060b6:	25 ff ff ff 0f       	and    eax,0xfffffff
c00060bb:	83 f8 01             	cmp    eax,0x1
c00060be:	83 d3 00             	adc    ebx,0x0
c00060c1:	83 c6 04             	add    esi,0x4
c00060c4:	81 e6 ff 01 00 00    	and    esi,0x1ff
c00060ca:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00060ce:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00060d2:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c00060d6:	75 90                	jne    c0006068 <f_getfree+0x124>
c00060d8:	eb 18                	jmp    c00060f2 <f_getfree+0x1ae>
c00060da:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00060e2:	eb 0e                	jmp    c00060f2 <f_getfree+0x1ae>
c00060e4:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00060ec:	eb 04                	jmp    c00060f2 <f_getfree+0x1ae>
c00060ee:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00060f2:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00060f6:	89 18                	mov    DWORD PTR [eax],ebx
c00060f8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00060fc:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00060ff:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c0006103:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006107:	83 c4 5c             	add    esp,0x5c
c000610a:	5b                   	pop    ebx
c000610b:	5e                   	pop    esi
c000610c:	5f                   	pop    edi
c000610d:	5d                   	pop    ebp
c000610e:	c3                   	ret    

c000610f <f_truncate>:
c000610f:	56                   	push   esi
c0006110:	53                   	push   ebx
c0006111:	83 ec 14             	sub    esp,0x14
c0006114:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006118:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000611c:	89 d8                	mov    eax,ebx
c000611e:	e8 6e bf ff ff       	call   c0002091 <validate>
c0006123:	89 c6                	mov    esi,eax
c0006125:	85 c0                	test   eax,eax
c0006127:	0f 85 d2 00 00 00    	jne    c00061ff <f_truncate+0xf0>
c000612d:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c0006131:	85 f6                	test   esi,esi
c0006133:	0f 85 c6 00 00 00    	jne    c00061ff <f_truncate+0xf0>
c0006139:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c000613d:	0f 84 b7 00 00 00    	je     c00061fa <f_truncate+0xeb>
c0006143:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006146:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0006149:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000614c:	89 d1                	mov    ecx,edx
c000614e:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c0006151:	0f 83 a8 00 00 00    	jae    c00061ff <f_truncate+0xf0>
c0006157:	09 c2                	or     edx,eax
c0006159:	75 15                	jne    c0006170 <f_truncate+0x61>
c000615b:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000615e:	31 c9                	xor    ecx,ecx
c0006160:	89 d8                	mov    eax,ebx
c0006162:	e8 7a d0 ff ff       	call   c00031e1 <remove_chain>
c0006167:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000616e:	eb 35                	jmp    c00061a5 <f_truncate+0x96>
c0006170:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006173:	89 d8                	mov    eax,ebx
c0006175:	e8 7a cb ff ff       	call   c0002cf4 <get_fat>
c000617a:	89 c2                	mov    edx,eax
c000617c:	b8 01 00 00 00       	mov    eax,0x1
c0006181:	83 fa ff             	cmp    edx,0xffffffff
c0006184:	74 1f                	je     c00061a5 <f_truncate+0x96>
c0006186:	b8 02 00 00 00       	mov    eax,0x2
c000618b:	83 fa 01             	cmp    edx,0x1
c000618e:	74 15                	je     c00061a5 <f_truncate+0x96>
c0006190:	31 c0                	xor    eax,eax
c0006192:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006196:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c0006199:	76 0a                	jbe    c00061a5 <f_truncate+0x96>
c000619b:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000619e:	89 d8                	mov    eax,ebx
c00061a0:	e8 3c d0 ff ff       	call   c00031e1 <remove_chain>
c00061a5:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00061a8:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00061ab:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00061ae:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00061b1:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c00061b4:	83 ca 40             	or     edx,0x40
c00061b7:	85 c0                	test   eax,eax
c00061b9:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c00061bc:	75 35                	jne    c00061f3 <f_truncate+0xe4>
c00061be:	84 d2                	test   dl,dl
c00061c0:	79 3d                	jns    c00061ff <f_truncate+0xf0>
c00061c2:	83 ec 0c             	sub    esp,0xc
c00061c5:	8d 43 50             	lea    eax,[ebx+0x50]
c00061c8:	6a 01                	push   0x1
c00061ca:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00061cd:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00061d0:	50                   	push   eax
c00061d1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00061d5:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00061d9:	50                   	push   eax
c00061da:	e8 7a b7 ff ff       	call   c0001959 <disk_write>
c00061df:	83 c4 20             	add    esp,0x20
c00061e2:	85 c0                	test   eax,eax
c00061e4:	75 08                	jne    c00061ee <f_truncate+0xdf>
c00061e6:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00061ea:	31 f6                	xor    esi,esi
c00061ec:	eb 11                	jmp    c00061ff <f_truncate+0xf0>
c00061ee:	b8 01 00 00 00       	mov    eax,0x1
c00061f3:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00061f6:	89 c6                	mov    esi,eax
c00061f8:	eb 05                	jmp    c00061ff <f_truncate+0xf0>
c00061fa:	be 07 00 00 00       	mov    esi,0x7
c00061ff:	89 f0                	mov    eax,esi
c0006201:	83 c4 14             	add    esp,0x14
c0006204:	5b                   	pop    ebx
c0006205:	5e                   	pop    esi
c0006206:	c3                   	ret    

c0006207 <f_unlink>:
c0006207:	56                   	push   esi
c0006208:	b9 02 00 00 00       	mov    ecx,0x2
c000620d:	53                   	push   ebx
c000620e:	81 ec e4 00 00 00    	sub    esp,0xe4
c0006214:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0006218:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c000621f:	e8 fa c1 ff ff       	call   c000241e <mount_volume>
c0006224:	85 c0                	test   eax,eax
c0006226:	0f 85 55 01 00 00    	jne    c0006381 <f_unlink+0x17a>
c000622c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006230:	83 ec 0c             	sub    esp,0xc
c0006233:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0006237:	68 60 04 00 00       	push   0x460
c000623c:	e8 80 1f 00 00       	call   c00081c1 <ff_memalloc>
c0006241:	83 c4 10             	add    esp,0x10
c0006244:	89 c3                	mov    ebx,eax
c0006246:	b8 11 00 00 00       	mov    eax,0x11
c000624b:	85 db                	test   ebx,ebx
c000624d:	0f 84 2e 01 00 00    	je     c0006381 <f_unlink+0x17a>
c0006253:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006257:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c000625d:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006260:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006263:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c000626a:	8d 44 24 48          	lea    eax,[esp+0x48]
c000626e:	e8 21 e9 ff ff       	call   c0004b94 <follow_path>
c0006273:	85 c0                	test   eax,eax
c0006275:	0f 85 f2 00 00 00    	jne    c000636d <f_unlink+0x166>
c000627b:	b8 06 00 00 00       	mov    eax,0x6
c0006280:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c0006288:	0f 88 df 00 00 00    	js     c000636d <f_unlink+0x166>
c000628e:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006293:	74 0a                	je     c000629f <f_unlink+0x98>
c0006295:	b8 07 00 00 00       	mov    eax,0x7
c000629a:	e9 ce 00 00 00       	jmp    c000636d <f_unlink+0x166>
c000629f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00062a3:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00062a7:	8a 02                	mov    al,BYTE PTR [edx]
c00062a9:	3c 04                	cmp    al,0x4
c00062ab:	75 12                	jne    c00062bf <f_unlink+0xb8>
c00062ad:	8d 42 10             	lea    eax,[edx+0x10]
c00062b0:	8d 54 24 20          	lea    edx,[esp+0x20]
c00062b4:	e8 a1 e8 ff ff       	call   c0004b5a <init_alloc_info.isra.2>
c00062b9:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00062bd:	eb 0e                	jmp    c00062cd <f_unlink+0xc6>
c00062bf:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c00062c6:	e8 3e e8 ff ff       	call   c0004b09 <ld_clust.isra.0>
c00062cb:	89 c6                	mov    esi,eax
c00062cd:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c00062d2:	75 12                	jne    c00062e6 <f_unlink+0xdf>
c00062d4:	8d 44 24 48          	lea    eax,[esp+0x48]
c00062d8:	e8 94 d6 ff ff       	call   c0003971 <dir_remove>
c00062dd:	85 c0                	test   eax,eax
c00062df:	74 6c                	je     c000634d <f_unlink+0x146>
c00062e1:	e9 87 00 00 00       	jmp    c000636d <f_unlink+0x166>
c00062e6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00062ea:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00062f1:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00062f8:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00062fb:	75 21                	jne    c000631e <f_unlink+0x117>
c00062fd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0006301:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0006305:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c000630c:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c0006313:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c0006317:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c000631e:	31 d2                	xor    edx,edx
c0006320:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0006327:	e8 be cb ff ff       	call   c0002eea <dir_sdi>
c000632c:	85 c0                	test   eax,eax
c000632e:	75 3d                	jne    c000636d <f_unlink+0x166>
c0006330:	31 d2                	xor    edx,edx
c0006332:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0006339:	e8 bc d3 ff ff       	call   c00036fa <dir_read>
c000633e:	85 c0                	test   eax,eax
c0006340:	0f 84 4f ff ff ff    	je     c0006295 <f_unlink+0x8e>
c0006346:	83 f8 04             	cmp    eax,0x4
c0006349:	75 22                	jne    c000636d <f_unlink+0x166>
c000634b:	eb 87                	jmp    c00062d4 <f_unlink+0xcd>
c000634d:	85 f6                	test   esi,esi
c000634f:	75 0b                	jne    c000635c <f_unlink+0x155>
c0006351:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006355:	e8 3d df ff ff       	call   c0004297 <sync_fs>
c000635a:	eb 11                	jmp    c000636d <f_unlink+0x166>
c000635c:	31 c9                	xor    ecx,ecx
c000635e:	89 f2                	mov    edx,esi
c0006360:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006364:	e8 78 ce ff ff       	call   c00031e1 <remove_chain>
c0006369:	85 c0                	test   eax,eax
c000636b:	74 e4                	je     c0006351 <f_unlink+0x14a>
c000636d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006371:	83 ec 0c             	sub    esp,0xc
c0006374:	53                   	push   ebx
c0006375:	e8 5d 1e 00 00       	call   c00081d7 <ff_memfree>
c000637a:	83 c4 10             	add    esp,0x10
c000637d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006381:	81 c4 e4 00 00 00    	add    esp,0xe4
c0006387:	5b                   	pop    ebx
c0006388:	5e                   	pop    esi
c0006389:	c3                   	ret    

c000638a <f_mkdir>:
c000638a:	57                   	push   edi
c000638b:	b9 02 00 00 00       	mov    ecx,0x2
c0006390:	56                   	push   esi
c0006391:	53                   	push   ebx
c0006392:	83 c4 80             	add    esp,0xffffff80
c0006395:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006399:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c00063a0:	e8 79 c0 ff ff       	call   c000241e <mount_volume>
c00063a5:	89 c3                	mov    ebx,eax
c00063a7:	85 c0                	test   eax,eax
c00063a9:	0f 85 fe 01 00 00    	jne    c00065ad <f_mkdir+0x223>
c00063af:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00063b3:	bb 11 00 00 00       	mov    ebx,0x11
c00063b8:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00063bc:	83 ec 0c             	sub    esp,0xc
c00063bf:	68 60 04 00 00       	push   0x460
c00063c4:	e8 f8 1d 00 00       	call   c00081c1 <ff_memalloc>
c00063c9:	83 c4 10             	add    esp,0x10
c00063cc:	89 c7                	mov    edi,eax
c00063ce:	85 c0                	test   eax,eax
c00063d0:	0f 84 d7 01 00 00    	je     c00065ad <f_mkdir+0x223>
c00063d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00063da:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c00063e0:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c00063e3:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00063e6:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00063ed:	8d 44 24 34          	lea    eax,[esp+0x34]
c00063f1:	e8 9e e7 ff ff       	call   c0004b94 <follow_path>
c00063f6:	89 c3                	mov    ebx,eax
c00063f8:	85 c0                	test   eax,eax
c00063fa:	74 3e                	je     c000643a <f_mkdir+0xb0>
c00063fc:	83 f8 04             	cmp    eax,0x4
c00063ff:	75 3e                	jne    c000643f <f_mkdir+0xb5>
c0006401:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006405:	31 d2                	xor    edx,edx
c0006407:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000640b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000640f:	e8 ce cb ff ff       	call   c0002fe2 <create_chain>
c0006414:	89 c6                	mov    esi,eax
c0006416:	85 c0                	test   eax,eax
c0006418:	74 0c                	je     c0006426 <f_mkdir+0x9c>
c000641a:	bb 02 00 00 00       	mov    ebx,0x2
c000641f:	83 f8 01             	cmp    eax,0x1
c0006422:	74 07                	je     c000642b <f_mkdir+0xa1>
c0006424:	eb 2a                	jmp    c0006450 <f_mkdir+0xc6>
c0006426:	bb 07 00 00 00       	mov    ebx,0x7
c000642b:	31 c9                	xor    ecx,ecx
c000642d:	89 f2                	mov    edx,esi
c000642f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006433:	e8 a9 cd ff ff       	call   c00031e1 <remove_chain>
c0006438:	eb 05                	jmp    c000643f <f_mkdir+0xb5>
c000643a:	bb 08 00 00 00       	mov    ebx,0x8
c000643f:	83 ec 0c             	sub    esp,0xc
c0006442:	57                   	push   edi
c0006443:	e8 8f 1d 00 00       	call   c00081d7 <ff_memfree>
c0006448:	83 c4 10             	add    esp,0x10
c000644b:	e9 5d 01 00 00       	jmp    c00065ad <f_mkdir+0x223>
c0006450:	bb 01 00 00 00       	mov    ebx,0x1
c0006455:	83 f8 ff             	cmp    eax,0xffffffff
c0006458:	74 d1                	je     c000642b <f_mkdir+0xa1>
c000645a:	89 f2                	mov    edx,esi
c000645c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006460:	e8 c4 ce ff ff       	call   c0003329 <dir_clear>
c0006465:	89 c3                	mov    ebx,eax
c0006467:	85 c0                	test   eax,eax
c0006469:	75 c0                	jne    c000642b <f_mkdir+0xa1>
c000646b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000646f:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006472:	74 69                	je     c00064dd <f_mkdir+0x153>
c0006474:	b9 0b 00 00 00       	mov    ecx,0xb
c0006479:	83 c0 54             	add    eax,0x54
c000647c:	ba 20 00 00 00       	mov    edx,0x20
c0006481:	e8 9c b5 ff ff       	call   c0001a22 <mem_set>
c0006486:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000648a:	ba 00 00 21 50       	mov    edx,0x50210000
c000648f:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006493:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c0006497:	83 c0 6a             	add    eax,0x6a
c000649a:	e8 65 b5 ff ff       	call   c0001a04 <st_dword>
c000649f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064a3:	89 f1                	mov    ecx,esi
c00064a5:	8d 50 54             	lea    edx,[eax+0x54]
c00064a8:	e8 85 e6 ff ff       	call   c0004b32 <st_clust.isra.1>
c00064ad:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064b1:	b9 20 00 00 00       	mov    ecx,0x20
c00064b6:	8d 50 54             	lea    edx,[eax+0x54]
c00064b9:	83 c0 74             	add    eax,0x74
c00064bc:	e8 4c b5 ff ff       	call   c0001a0d <mem_cpy>
c00064c1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064c5:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c00064c9:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c00064cd:	8d 50 74             	lea    edx,[eax+0x74]
c00064d0:	e8 5d e6 ff ff       	call   c0004b32 <st_clust.isra.1>
c00064d5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064d9:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00064dd:	8d 44 24 34          	lea    eax,[esp+0x34]
c00064e1:	e8 2f db ff ff       	call   c0004015 <dir_register>
c00064e6:	89 c3                	mov    ebx,eax
c00064e8:	85 c0                	test   eax,eax
c00064ea:	0f 85 3b ff ff ff    	jne    c000642b <f_mkdir+0xa1>
c00064f0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064f4:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00064f7:	75 74                	jne    c000656d <f_mkdir+0x1e3>
c00064f9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00064fc:	ba 00 00 21 50       	mov    edx,0x50210000
c0006501:	83 c0 0c             	add    eax,0xc
c0006504:	e8 fb b4 ff ff       	call   c0001a04 <st_dword>
c0006509:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000650d:	89 f2                	mov    edx,esi
c000650f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006512:	83 c0 34             	add    eax,0x34
c0006515:	e8 ea b4 ff ff       	call   c0001a04 <st_dword>
c000651a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000651e:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0006522:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006525:	c1 e2 09             	shl    edx,0x9
c0006528:	83 c0 38             	add    eax,0x38
c000652b:	e8 d4 b4 ff ff       	call   c0001a04 <st_dword>
c0006530:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006534:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0006538:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000653b:	c1 e2 09             	shl    edx,0x9
c000653e:	83 c0 28             	add    eax,0x28
c0006541:	e8 be b4 ff ff       	call   c0001a04 <st_dword>
c0006546:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000654a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000654d:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c0006551:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006554:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c0006558:	8d 44 24 34          	lea    eax,[esp+0x34]
c000655c:	e8 8b d3 ff ff       	call   c00038ec <store_xdir>
c0006561:	89 c3                	mov    ebx,eax
c0006563:	85 c0                	test   eax,eax
c0006565:	0f 85 d4 fe ff ff    	jne    c000643f <f_mkdir+0xb5>
c000656b:	eb 30                	jmp    c000659d <f_mkdir+0x213>
c000656d:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006571:	ba 00 00 21 50       	mov    edx,0x50210000
c0006576:	83 c0 16             	add    eax,0x16
c0006579:	e8 86 b4 ff ff       	call   c0001a04 <st_dword>
c000657e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006582:	89 f1                	mov    ecx,esi
c0006584:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0006588:	e8 a5 e5 ff ff       	call   c0004b32 <st_clust.isra.1>
c000658d:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006591:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006595:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006599:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000659d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065a1:	e8 f1 dc ff ff       	call   c0004297 <sync_fs>
c00065a6:	89 c3                	mov    ebx,eax
c00065a8:	e9 92 fe ff ff       	jmp    c000643f <f_mkdir+0xb5>
c00065ad:	83 ec 80             	sub    esp,0xffffff80
c00065b0:	89 d8                	mov    eax,ebx
c00065b2:	5b                   	pop    ebx
c00065b3:	5e                   	pop    esi
c00065b4:	5f                   	pop    edi
c00065b5:	c3                   	ret    

c00065b6 <f_rename>:
c00065b6:	55                   	push   ebp
c00065b7:	57                   	push   edi
c00065b8:	56                   	push   esi
c00065b9:	53                   	push   ebx
c00065ba:	81 ec fc 00 00 00    	sub    esp,0xfc
c00065c0:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c00065c7:	e8 a4 b9 ff ff       	call   c0001f70 <get_ldnumber>
c00065cc:	b9 02 00 00 00       	mov    ecx,0x2
c00065d1:	8d 54 24 14          	lea    edx,[esp+0x14]
c00065d5:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c00065dc:	e8 3d be ff ff       	call   c000241e <mount_volume>
c00065e1:	85 c0                	test   eax,eax
c00065e3:	0f 85 b5 02 00 00    	jne    c000689e <f_rename+0x2e8>
c00065e9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00065ed:	83 ec 0c             	sub    esp,0xc
c00065f0:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00065f4:	68 60 04 00 00       	push   0x460
c00065f9:	e8 c3 1b 00 00       	call   c00081c1 <ff_memalloc>
c00065fe:	83 c4 10             	add    esp,0x10
c0006601:	89 c3                	mov    ebx,eax
c0006603:	b8 11 00 00 00       	mov    eax,0x11
c0006608:	85 db                	test   ebx,ebx
c000660a:	0f 84 8e 02 00 00    	je     c000689e <f_rename+0x2e8>
c0006610:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006614:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c000661a:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c000661d:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006620:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c0006627:	8d 44 24 58          	lea    eax,[esp+0x58]
c000662b:	e8 64 e5 ff ff       	call   c0004b94 <follow_path>
c0006630:	85 c0                	test   eax,eax
c0006632:	0f 85 52 02 00 00    	jne    c000688a <f_rename+0x2d4>
c0006638:	b8 06 00 00 00       	mov    eax,0x6
c000663d:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c0006645:	0f 85 3f 02 00 00    	jne    c000688a <f_rename+0x2d4>
c000664b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000664f:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006652:	0f 85 05 01 00 00    	jne    c000675d <f_rename+0x1a7>
c0006658:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000665b:	b9 40 00 00 00       	mov    ecx,0x40
c0006660:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006664:	e8 a4 b3 ff ff       	call   c0001a0d <mem_cpy>
c0006669:	b9 4c 00 00 00       	mov    ecx,0x4c
c000666e:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006672:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006679:	e8 8f b3 ff ff       	call   c0001a0d <mem_cpy>
c000667e:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006685:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000668c:	e8 03 e5 ff ff       	call   c0004b94 <follow_path>
c0006691:	85 c0                	test   eax,eax
c0006693:	75 29                	jne    c00066be <f_rename+0x108>
c0006695:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006699:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c00066a0:	74 0a                	je     c00066ac <f_rename+0xf6>
c00066a2:	b8 08 00 00 00       	mov    eax,0x8
c00066a7:	e9 de 01 00 00       	jmp    c000688a <f_rename+0x2d4>
c00066ac:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c00066b3:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c00066ba:	75 e6                	jne    c00066a2 <f_rename+0xec>
c00066bc:	eb 09                	jmp    c00066c7 <f_rename+0x111>
c00066be:	83 f8 04             	cmp    eax,0x4
c00066c1:	0f 85 c3 01 00 00    	jne    c000688a <f_rename+0x2d4>
c00066c7:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00066ce:	e8 42 d9 ff ff       	call   c0004015 <dir_register>
c00066d3:	85 c0                	test   eax,eax
c00066d5:	0f 85 af 01 00 00    	jne    c000688a <f_rename+0x2d4>
c00066db:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066df:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00066e2:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00066e5:	89 c5                	mov    ebp,eax
c00066e7:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c00066ea:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00066ee:	8d 46 24             	lea    eax,[esi+0x24]
c00066f1:	e8 98 b2 ff ff       	call   c000198e <ld_word>
c00066f6:	b9 40 00 00 00       	mov    ecx,0x40
c00066fb:	89 c7                	mov    edi,eax
c00066fd:	8d 54 24 18          	lea    edx,[esp+0x18]
c0006701:	89 f0                	mov    eax,esi
c0006703:	e8 05 b3 ff ff       	call   c0001a0d <mem_cpy>
c0006708:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000670c:	89 e9                	mov    ecx,ebp
c000670e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006711:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c0006714:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0006718:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000671c:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000671f:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c0006722:	0f b7 d7             	movzx  edx,di
c0006725:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006728:	83 c0 24             	add    eax,0x24
c000672b:	e8 d0 b2 ff ff       	call   c0001a00 <st_word>
c0006730:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006734:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006737:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c000673a:	a8 10                	test   al,0x10
c000673c:	75 06                	jne    c0006744 <f_rename+0x18e>
c000673e:	83 c8 20             	or     eax,0x20
c0006741:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0006744:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000674b:	e8 9c d1 ff ff       	call   c00038ec <store_xdir>
c0006750:	85 c0                	test   eax,eax
c0006752:	0f 84 1c 01 00 00    	je     c0006874 <f_rename+0x2be>
c0006758:	e9 2d 01 00 00       	jmp    c000688a <f_rename+0x2d4>
c000675d:	b9 20 00 00 00       	mov    ecx,0x20
c0006762:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006769:	8d 44 24 18          	lea    eax,[esp+0x18]
c000676d:	e8 9b b2 ff ff       	call   c0001a0d <mem_cpy>
c0006772:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006777:	8d 54 24 58          	lea    edx,[esp+0x58]
c000677b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006782:	e8 86 b2 ff ff       	call   c0001a0d <mem_cpy>
c0006787:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c000678e:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006795:	e8 fa e3 ff ff       	call   c0004b94 <follow_path>
c000679a:	85 c0                	test   eax,eax
c000679c:	75 27                	jne    c00067c5 <f_rename+0x20f>
c000679e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00067a2:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c00067a9:	0f 85 f3 fe ff ff    	jne    c00066a2 <f_rename+0xec>
c00067af:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c00067b6:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c00067bd:	0f 85 df fe ff ff    	jne    c00066a2 <f_rename+0xec>
c00067c3:	eb 09                	jmp    c00067ce <f_rename+0x218>
c00067c5:	83 f8 04             	cmp    eax,0x4
c00067c8:	0f 85 bc 00 00 00    	jne    c000688a <f_rename+0x2d4>
c00067ce:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00067d5:	e8 3b d8 ff ff       	call   c0004015 <dir_register>
c00067da:	85 c0                	test   eax,eax
c00067dc:	0f 85 a8 00 00 00    	jne    c000688a <f_rename+0x2d4>
c00067e2:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c00067e9:	b9 13 00 00 00       	mov    ecx,0x13
c00067ee:	8d 46 0d             	lea    eax,[esi+0xd]
c00067f1:	8d 54 24 25          	lea    edx,[esp+0x25]
c00067f5:	e8 13 b2 ff ff       	call   c0001a0d <mem_cpy>
c00067fa:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00067fe:	a8 10                	test   al,0x10
c0006800:	75 03                	jne    c0006805 <f_rename+0x24f>
c0006802:	83 c8 20             	or     eax,0x20
c0006805:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006808:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000680c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006810:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006814:	74 5e                	je     c0006874 <f_rename+0x2be>
c0006816:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c000681d:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006821:	74 51                	je     c0006874 <f_rename+0x2be>
c0006823:	89 f2                	mov    edx,esi
c0006825:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006829:	8a 07                	mov    al,BYTE PTR [edi]
c000682b:	e8 d9 e2 ff ff       	call   c0004b09 <ld_clust.isra.0>
c0006830:	89 c2                	mov    edx,eax
c0006832:	89 f8                	mov    eax,edi
c0006834:	e8 ee b3 ff ff       	call   c0001c27 <clst2sect>
c0006839:	89 c6                	mov    esi,eax
c000683b:	89 d1                	mov    ecx,edx
c000683d:	b8 02 00 00 00       	mov    eax,0x2
c0006842:	09 f2                	or     edx,esi
c0006844:	74 44                	je     c000688a <f_rename+0x2d4>
c0006846:	89 f2                	mov    edx,esi
c0006848:	89 f8                	mov    eax,edi
c000684a:	e8 1d b9 ff ff       	call   c000216c <move_window>
c000684f:	85 c0                	test   eax,eax
c0006851:	75 37                	jne    c000688a <f_rename+0x2d4>
c0006853:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006857:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c000685b:	75 17                	jne    c0006874 <f_rename+0x2be>
c000685d:	8d 50 74             	lea    edx,[eax+0x74]
c0006860:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006867:	e8 c6 e2 ff ff       	call   c0004b32 <st_clust.isra.1>
c000686c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006870:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006874:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006878:	e8 f4 d0 ff ff       	call   c0003971 <dir_remove>
c000687d:	85 c0                	test   eax,eax
c000687f:	75 09                	jne    c000688a <f_rename+0x2d4>
c0006881:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006885:	e8 0d da ff ff       	call   c0004297 <sync_fs>
c000688a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000688e:	83 ec 0c             	sub    esp,0xc
c0006891:	53                   	push   ebx
c0006892:	e8 40 19 00 00       	call   c00081d7 <ff_memfree>
c0006897:	83 c4 10             	add    esp,0x10
c000689a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000689e:	81 c4 fc 00 00 00    	add    esp,0xfc
c00068a4:	5b                   	pop    ebx
c00068a5:	5e                   	pop    esi
c00068a6:	5f                   	pop    edi
c00068a7:	5d                   	pop    ebp
c00068a8:	c3                   	ret    

c00068a9 <f_chmod>:
c00068a9:	57                   	push   edi
c00068aa:	b9 02 00 00 00       	mov    ecx,0x2
c00068af:	56                   	push   esi
c00068b0:	53                   	push   ebx
c00068b1:	83 ec 60             	sub    esp,0x60
c00068b4:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c00068b8:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c00068bc:	8d 54 24 10          	lea    edx,[esp+0x10]
c00068c0:	8d 44 24 70          	lea    eax,[esp+0x70]
c00068c4:	e8 55 bb ff ff       	call   c000241e <mount_volume>
c00068c9:	85 c0                	test   eax,eax
c00068cb:	0f 85 af 00 00 00    	jne    c0006980 <f_chmod+0xd7>
c00068d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00068d5:	83 ec 0c             	sub    esp,0xc
c00068d8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00068dc:	68 60 04 00 00       	push   0x460
c00068e1:	e8 db 18 00 00       	call   c00081c1 <ff_memalloc>
c00068e6:	83 c4 10             	add    esp,0x10
c00068e9:	89 c6                	mov    esi,eax
c00068eb:	b8 11 00 00 00       	mov    eax,0x11
c00068f0:	85 f6                	test   esi,esi
c00068f2:	0f 84 88 00 00 00    	je     c0006980 <f_chmod+0xd7>
c00068f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00068fc:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006902:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006905:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006908:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c000690c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006910:	e8 7f e2 ff ff       	call   c0004b94 <follow_path>
c0006915:	85 c0                	test   eax,eax
c0006917:	75 53                	jne    c000696c <f_chmod+0xc3>
c0006919:	b8 06 00 00 00       	mov    eax,0x6
c000691e:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006923:	75 47                	jne    c000696c <f_chmod+0xc3>
c0006925:	89 f9                	mov    ecx,edi
c0006927:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000692b:	83 e1 27             	and    ecx,0x27
c000692e:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006931:	75 1d                	jne    c0006950 <f_chmod+0xa7>
c0006933:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006936:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006939:	21 cb                	and    ebx,ecx
c000693b:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c000693e:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006941:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006945:	e8 a2 cf ff ff       	call   c00038ec <store_xdir>
c000694a:	85 c0                	test   eax,eax
c000694c:	75 1e                	jne    c000696c <f_chmod+0xc3>
c000694e:	eb 13                	jmp    c0006963 <f_chmod+0xba>
c0006950:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006954:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006957:	21 cb                	and    ebx,ecx
c0006959:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c000695c:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c000695f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006963:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006967:	e8 2b d9 ff ff       	call   c0004297 <sync_fs>
c000696c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006970:	83 ec 0c             	sub    esp,0xc
c0006973:	56                   	push   esi
c0006974:	e8 5e 18 00 00       	call   c00081d7 <ff_memfree>
c0006979:	83 c4 10             	add    esp,0x10
c000697c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006980:	83 c4 60             	add    esp,0x60
c0006983:	5b                   	pop    ebx
c0006984:	5e                   	pop    esi
c0006985:	5f                   	pop    edi
c0006986:	c3                   	ret    

c0006987 <f_utime>:
c0006987:	56                   	push   esi
c0006988:	b9 02 00 00 00       	mov    ecx,0x2
c000698d:	53                   	push   ebx
c000698e:	83 ec 64             	sub    esp,0x64
c0006991:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006995:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006999:	8d 44 24 70          	lea    eax,[esp+0x70]
c000699d:	e8 7c ba ff ff       	call   c000241e <mount_volume>
c00069a2:	85 c0                	test   eax,eax
c00069a4:	0f 85 b5 00 00 00    	jne    c0006a5f <f_utime+0xd8>
c00069aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069ae:	83 ec 0c             	sub    esp,0xc
c00069b1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00069b5:	68 60 04 00 00       	push   0x460
c00069ba:	e8 02 18 00 00       	call   c00081c1 <ff_memalloc>
c00069bf:	83 c4 10             	add    esp,0x10
c00069c2:	89 c3                	mov    ebx,eax
c00069c4:	b8 11 00 00 00       	mov    eax,0x11
c00069c9:	85 db                	test   ebx,ebx
c00069cb:	0f 84 8e 00 00 00    	je     c0006a5f <f_utime+0xd8>
c00069d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069d5:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00069db:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00069de:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00069e1:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c00069e5:	8d 44 24 14          	lea    eax,[esp+0x14]
c00069e9:	e8 a6 e1 ff ff       	call   c0004b94 <follow_path>
c00069ee:	85 c0                	test   eax,eax
c00069f0:	75 59                	jne    c0006a4b <f_utime+0xc4>
c00069f2:	b8 06 00 00 00       	mov    eax,0x6
c00069f7:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c00069fc:	75 4d                	jne    c0006a4b <f_utime+0xc4>
c00069fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a02:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006a06:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006a0a:	c1 e2 10             	shl    edx,0x10
c0006a0d:	09 ca                	or     edx,ecx
c0006a0f:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006a12:	75 1a                	jne    c0006a2e <f_utime+0xa7>
c0006a14:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006a17:	83 c0 0c             	add    eax,0xc
c0006a1a:	e8 e5 af ff ff       	call   c0001a04 <st_dword>
c0006a1f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006a23:	e8 c4 ce ff ff       	call   c00038ec <store_xdir>
c0006a28:	85 c0                	test   eax,eax
c0006a2a:	75 1f                	jne    c0006a4b <f_utime+0xc4>
c0006a2c:	eb 14                	jmp    c0006a42 <f_utime+0xbb>
c0006a2e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006a32:	83 c0 16             	add    eax,0x16
c0006a35:	e8 ca af ff ff       	call   c0001a04 <st_dword>
c0006a3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a3e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006a42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a46:	e8 4c d8 ff ff       	call   c0004297 <sync_fs>
c0006a4b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006a4f:	83 ec 0c             	sub    esp,0xc
c0006a52:	53                   	push   ebx
c0006a53:	e8 7f 17 00 00       	call   c00081d7 <ff_memfree>
c0006a58:	83 c4 10             	add    esp,0x10
c0006a5b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006a5f:	83 c4 64             	add    esp,0x64
c0006a62:	5b                   	pop    ebx
c0006a63:	5e                   	pop    esi
c0006a64:	c3                   	ret    

c0006a65 <f_getlabel>:
c0006a65:	55                   	push   ebp
c0006a66:	31 c9                	xor    ecx,ecx
c0006a68:	57                   	push   edi
c0006a69:	56                   	push   esi
c0006a6a:	53                   	push   ebx
c0006a6b:	83 ec 6c             	sub    esp,0x6c
c0006a6e:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006a72:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006a79:	e8 a0 b9 ff ff       	call   c000241e <mount_volume>
c0006a7e:	89 c6                	mov    esi,eax
c0006a80:	85 c0                	test   eax,eax
c0006a82:	0f 85 c1 01 00 00    	jne    c0006c49 <f_getlabel+0x1e4>
c0006a88:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006a90:	0f 84 5f 01 00 00    	je     c0006bf5 <f_getlabel+0x190>
c0006a96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a9a:	31 d2                	xor    edx,edx
c0006a9c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006aa0:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006aa8:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006aac:	e8 39 c4 ff ff       	call   c0002eea <dir_sdi>
c0006ab1:	85 c0                	test   eax,eax
c0006ab3:	0f 85 2d 01 00 00    	jne    c0006be6 <f_getlabel+0x181>
c0006ab9:	ba 01 00 00 00       	mov    edx,0x1
c0006abe:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006ac2:	e8 33 cc ff ff       	call   c00036fa <dir_read>
c0006ac7:	85 c0                	test   eax,eax
c0006ac9:	0f 85 17 01 00 00    	jne    c0006be6 <f_getlabel+0x181>
c0006acf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ad3:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006ad6:	74 09                	je     c0006ae1 <f_getlabel+0x7c>
c0006ad8:	31 db                	xor    ebx,ebx
c0006ada:	31 c9                	xor    ecx,ecx
c0006adc:	e9 c8 00 00 00       	jmp    c0006ba9 <f_getlabel+0x144>
c0006ae1:	31 ed                	xor    ebp,ebp
c0006ae3:	31 db                	xor    ebx,ebx
c0006ae5:	31 ff                	xor    edi,edi
c0006ae7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006aeb:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006aef:	39 fa                	cmp    edx,edi
c0006af1:	76 4b                	jbe    c0006b3e <f_getlabel+0xd9>
c0006af3:	47                   	inc    edi
c0006af4:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006af7:	01 d0                	add    eax,edx
c0006af9:	e8 90 ae ff ff       	call   c000198e <ld_word>
c0006afe:	66 85 ed             	test   bp,bp
c0006b01:	75 0d                	jne    c0006b10 <f_getlabel+0xab>
c0006b03:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006b09:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006b0e:	76 28                	jbe    c0006b38 <f_getlabel+0xd3>
c0006b10:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006b17:	89 e9                	mov    ecx,ebp
c0006b19:	01 da                	add    edx,ebx
c0006b1b:	c1 e1 10             	shl    ecx,0x10
c0006b1e:	0f b7 c0             	movzx  eax,ax
c0006b21:	09 c8                	or     eax,ecx
c0006b23:	b9 04 00 00 00       	mov    ecx,0x4
c0006b28:	e8 01 b0 ff ff       	call   c0001b2e <put_utf>
c0006b2d:	84 c0                	test   al,al
c0006b2f:	74 0b                	je     c0006b3c <f_getlabel+0xd7>
c0006b31:	0f b6 c0             	movzx  eax,al
c0006b34:	01 c3                	add    ebx,eax
c0006b36:	31 c0                	xor    eax,eax
c0006b38:	89 c5                	mov    ebp,eax
c0006b3a:	eb ab                	jmp    c0006ae7 <f_getlabel+0x82>
c0006b3c:	31 db                	xor    ebx,ebx
c0006b3e:	66 85 ed             	test   bp,bp
c0006b41:	74 02                	je     c0006b45 <f_getlabel+0xe0>
c0006b43:	31 db                	xor    ebx,ebx
c0006b45:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006b4c:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006b50:	e9 a0 00 00 00       	jmp    c0006bf5 <f_getlabel+0x190>
c0006b55:	83 ff 0b             	cmp    edi,0xb
c0006b58:	74 11                	je     c0006b6b <f_getlabel+0x106>
c0006b5a:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006b5f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b63:	8d 79 02             	lea    edi,[ecx+0x2]
c0006b66:	c1 e0 08             	shl    eax,0x8
c0006b69:	09 c2                	or     edx,eax
c0006b6b:	0f b7 d2             	movzx  edx,dx
c0006b6e:	50                   	push   eax
c0006b6f:	50                   	push   eax
c0006b70:	68 b5 01 00 00       	push   0x1b5
c0006b75:	52                   	push   edx
c0006b76:	e8 03 17 00 00       	call   c000827e <ff_oem2uni>
c0006b7b:	83 c4 10             	add    esp,0x10
c0006b7e:	66 85 c0             	test   ax,ax
c0006b81:	74 46                	je     c0006bc9 <f_getlabel+0x164>
c0006b83:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006b8a:	0f b7 c0             	movzx  eax,ax
c0006b8d:	01 da                	add    edx,ebx
c0006b8f:	b9 04 00 00 00       	mov    ecx,0x4
c0006b94:	e8 95 af ff ff       	call   c0001b2e <put_utf>
c0006b99:	84 c0                	test   al,al
c0006b9b:	74 2c                	je     c0006bc9 <f_getlabel+0x164>
c0006b9d:	0f b6 c0             	movzx  eax,al
c0006ba0:	01 c3                	add    ebx,eax
c0006ba2:	83 ff 0b             	cmp    edi,0xb
c0006ba5:	74 24                	je     c0006bcb <f_getlabel+0x166>
c0006ba7:	89 f9                	mov    ecx,edi
c0006ba9:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006bad:	8d 79 01             	lea    edi,[ecx+0x1]
c0006bb0:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006bb5:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006bba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006bbe:	e8 9f ae ff ff       	call   c0001a62 <dbc_1st>
c0006bc3:	85 c0                	test   eax,eax
c0006bc5:	74 a4                	je     c0006b6b <f_getlabel+0x106>
c0006bc7:	eb 8c                	jmp    c0006b55 <f_getlabel+0xf0>
c0006bc9:	31 db                	xor    ebx,ebx
c0006bcb:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006bd2:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006bd5:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006bdc:	74 17                	je     c0006bf5 <f_getlabel+0x190>
c0006bde:	4b                   	dec    ebx
c0006bdf:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006be2:	74 ee                	je     c0006bd2 <f_getlabel+0x16d>
c0006be4:	eb 0f                	jmp    c0006bf5 <f_getlabel+0x190>
c0006be6:	83 f8 04             	cmp    eax,0x4
c0006be9:	75 5c                	jne    c0006c47 <f_getlabel+0x1e2>
c0006beb:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006bf2:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006bf5:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006bfd:	74 4a                	je     c0006c49 <f_getlabel+0x1e4>
c0006bff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c03:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006c06:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006c09:	e8 5e b5 ff ff       	call   c000216c <move_window>
c0006c0e:	89 c6                	mov    esi,eax
c0006c10:	85 c0                	test   eax,eax
c0006c12:	75 35                	jne    c0006c49 <f_getlabel+0x1e4>
c0006c14:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006c18:	b8 43 00 00 00       	mov    eax,0x43
c0006c1d:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006c1f:	80 f9 03             	cmp    cl,0x3
c0006c22:	74 0f                	je     c0006c33 <f_getlabel+0x1ce>
c0006c24:	31 c0                	xor    eax,eax
c0006c26:	80 f9 04             	cmp    cl,0x4
c0006c29:	0f 94 c0             	sete   al
c0006c2c:	48                   	dec    eax
c0006c2d:	83 e0 c3             	and    eax,0xffffffc3
c0006c30:	83 c0 64             	add    eax,0x64
c0006c33:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006c37:	e8 5f ad ff ff       	call   c000199b <ld_dword>
c0006c3c:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006c43:	89 07                	mov    DWORD PTR [edi],eax
c0006c45:	eb 02                	jmp    c0006c49 <f_getlabel+0x1e4>
c0006c47:	89 c6                	mov    esi,eax
c0006c49:	83 c4 6c             	add    esp,0x6c
c0006c4c:	89 f0                	mov    eax,esi
c0006c4e:	5b                   	pop    ebx
c0006c4f:	5e                   	pop    esi
c0006c50:	5f                   	pop    edi
c0006c51:	5d                   	pop    ebp
c0006c52:	c3                   	ret    

c0006c53 <f_setlabel>:
c0006c53:	56                   	push   esi
c0006c54:	b9 02 00 00 00       	mov    ecx,0x2
c0006c59:	53                   	push   ebx
c0006c5a:	83 ec 74             	sub    esp,0x74
c0006c5d:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006c61:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006c68:	e8 b1 b7 ff ff       	call   c000241e <mount_volume>
c0006c6d:	89 c6                	mov    esi,eax
c0006c6f:	85 c0                	test   eax,eax
c0006c71:	0f 85 41 02 00 00    	jne    c0006eb8 <f_setlabel+0x265>
c0006c77:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006c7b:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006c7e:	0f 85 8e 00 00 00    	jne    c0006d12 <f_setlabel+0xbf>
c0006c84:	b9 16 00 00 00       	mov    ecx,0x16
c0006c89:	31 d2                	xor    edx,edx
c0006c8b:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006c8f:	31 db                	xor    ebx,ebx
c0006c91:	e8 8c ad ff ff       	call   c0001a22 <mem_set>
c0006c96:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006c9d:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006ca0:	0f 86 0a 01 00 00    	jbe    c0006db0 <f_setlabel+0x15d>
c0006ca6:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006cad:	e8 b6 ad ff ff       	call   c0001a68 <tchar2uni>
c0006cb2:	89 c6                	mov    esi,eax
c0006cb4:	3d ff ff 00 00       	cmp    eax,0xffff
c0006cb9:	76 2a                	jbe    c0006ce5 <f_setlabel+0x92>
c0006cbb:	83 f8 ff             	cmp    eax,0xffffffff
c0006cbe:	74 05                	je     c0006cc5 <f_setlabel+0x72>
c0006cc0:	83 fb 09             	cmp    ebx,0x9
c0006cc3:	76 0a                	jbe    c0006ccf <f_setlabel+0x7c>
c0006cc5:	be 06 00 00 00       	mov    esi,0x6
c0006cca:	e9 e9 01 00 00       	jmp    c0006eb8 <f_setlabel+0x265>
c0006ccf:	89 c2                	mov    edx,eax
c0006cd1:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006cd5:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006cd8:	c1 ea 10             	shr    edx,0x10
c0006cdb:	01 c8                	add    eax,ecx
c0006cdd:	43                   	inc    ebx
c0006cde:	e8 1d ad ff ff       	call   c0001a00 <st_word>
c0006ce3:	eb 04                	jmp    c0006ce9 <f_setlabel+0x96>
c0006ce5:	85 c0                	test   eax,eax
c0006ce7:	74 dc                	je     c0006cc5 <f_setlabel+0x72>
c0006ce9:	89 f2                	mov    edx,esi
c0006ceb:	b8 f7 f2 01 c0       	mov    eax,0xc001f2f7
c0006cf0:	e8 5b ad ff ff       	call   c0001a50 <chk_chr>
c0006cf5:	85 c0                	test   eax,eax
c0006cf7:	75 cc                	jne    c0006cc5 <f_setlabel+0x72>
c0006cf9:	83 fb 0a             	cmp    ebx,0xa
c0006cfc:	77 c7                	ja     c0006cc5 <f_setlabel+0x72>
c0006cfe:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006d01:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006d05:	0f b7 d6             	movzx  edx,si
c0006d08:	01 c8                	add    eax,ecx
c0006d0a:	43                   	inc    ebx
c0006d0b:	e8 f0 ac ff ff       	call   c0001a00 <st_word>
c0006d10:	eb 84                	jmp    c0006c96 <f_setlabel+0x43>
c0006d12:	b9 0b 00 00 00       	mov    ecx,0xb
c0006d17:	ba 20 00 00 00       	mov    edx,0x20
c0006d1c:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006d20:	31 db                	xor    ebx,ebx
c0006d22:	e8 fb ac ff ff       	call   c0001a22 <mem_set>
c0006d27:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006d2e:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006d31:	76 60                	jbe    c0006d93 <f_setlabel+0x140>
c0006d33:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d3a:	e8 29 ad ff ff       	call   c0001a68 <tchar2uni>
c0006d3f:	3d ff ff 00 00       	cmp    eax,0xffff
c0006d44:	0f 87 7b ff ff ff    	ja     c0006cc5 <f_setlabel+0x72>
c0006d4a:	83 ec 0c             	sub    esp,0xc
c0006d4d:	50                   	push   eax
c0006d4e:	e8 97 15 00 00       	call   c00082ea <ff_wtoupper>
c0006d53:	5a                   	pop    edx
c0006d54:	59                   	pop    ecx
c0006d55:	68 b5 01 00 00       	push   0x1b5
c0006d5a:	50                   	push   eax
c0006d5b:	e8 8e 14 00 00       	call   c00081ee <ff_uni2oem>
c0006d60:	83 c4 10             	add    esp,0x10
c0006d63:	89 c6                	mov    esi,eax
c0006d65:	66 85 c0             	test   ax,ax
c0006d68:	0f 84 57 ff ff ff    	je     c0006cc5 <f_setlabel+0x72>
c0006d6e:	0f b7 d0             	movzx  edx,ax
c0006d71:	b8 f0 f2 01 c0       	mov    eax,0xc001f2f0
c0006d76:	e8 d5 ac ff ff       	call   c0001a50 <chk_chr>
c0006d7b:	85 c0                	test   eax,eax
c0006d7d:	0f 85 42 ff ff ff    	jne    c0006cc5 <f_setlabel+0x72>
c0006d83:	66 81 fe ff 00       	cmp    si,0xff
c0006d88:	0f 87 14 01 00 00    	ja     c0006ea2 <f_setlabel+0x24f>
c0006d8e:	e9 fa 00 00 00       	jmp    c0006e8d <f_setlabel+0x23a>
c0006d93:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0006d98:	0f 84 27 ff ff ff    	je     c0006cc5 <f_setlabel+0x72>
c0006d9e:	85 db                	test   ebx,ebx
c0006da0:	74 0e                	je     c0006db0 <f_setlabel+0x15d>
c0006da2:	8d 43 ff             	lea    eax,[ebx-0x1]
c0006da5:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0006daa:	75 04                	jne    c0006db0 <f_setlabel+0x15d>
c0006dac:	89 c3                	mov    ebx,eax
c0006dae:	eb ee                	jmp    c0006d9e <f_setlabel+0x14b>
c0006db0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006db4:	31 d2                	xor    edx,edx
c0006db6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0006dba:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0006dc2:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006dc6:	e8 1f c1 ff ff       	call   c0002eea <dir_sdi>
c0006dcb:	89 c6                	mov    esi,eax
c0006dcd:	85 c0                	test   eax,eax
c0006dcf:	0f 85 e3 00 00 00    	jne    c0006eb8 <f_setlabel+0x265>
c0006dd5:	ba 01 00 00 00       	mov    edx,0x1
c0006dda:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006dde:	e8 17 c9 ff ff       	call   c00036fa <dir_read>
c0006de3:	85 c0                	test   eax,eax
c0006de5:	75 21                	jne    c0006e08 <f_setlabel+0x1b5>
c0006de7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006deb:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006def:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c0006df2:	74 5d                	je     c0006e51 <f_setlabel+0x1fe>
c0006df4:	85 db                	test   ebx,ebx
c0006df6:	74 0b                	je     c0006e03 <f_setlabel+0x1b0>
c0006df8:	b9 0b 00 00 00       	mov    ecx,0xb
c0006dfd:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006e01:	eb 70                	jmp    c0006e73 <f_setlabel+0x220>
c0006e03:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0006e06:	eb 70                	jmp    c0006e78 <f_setlabel+0x225>
c0006e08:	83 f8 04             	cmp    eax,0x4
c0006e0b:	75 7c                	jne    c0006e89 <f_setlabel+0x236>
c0006e0d:	85 db                	test   ebx,ebx
c0006e0f:	0f 84 a3 00 00 00    	je     c0006eb8 <f_setlabel+0x265>
c0006e15:	ba 01 00 00 00       	mov    edx,0x1
c0006e1a:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006e1e:	e8 51 ca ff ff       	call   c0003874 <dir_alloc>
c0006e23:	89 c6                	mov    esi,eax
c0006e25:	85 c0                	test   eax,eax
c0006e27:	0f 85 8b 00 00 00    	jne    c0006eb8 <f_setlabel+0x265>
c0006e2d:	31 d2                	xor    edx,edx
c0006e2f:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e33:	b9 20 00 00 00       	mov    ecx,0x20
c0006e38:	e8 e5 ab ff ff       	call   c0001a22 <mem_set>
c0006e3d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e41:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006e44:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e48:	75 18                	jne    c0006e62 <f_setlabel+0x20f>
c0006e4a:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0006e4d:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e51:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0006e54:	b9 16 00 00 00       	mov    ecx,0x16
c0006e59:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e5d:	83 c0 02             	add    eax,0x2
c0006e60:	eb 9b                	jmp    c0006dfd <f_setlabel+0x1aa>
c0006e62:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0006e66:	b9 0b 00 00 00       	mov    ecx,0xb
c0006e6b:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006e6f:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e73:	e8 95 ab ff ff       	call   c0001a0d <mem_cpy>
c0006e78:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e7c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006e80:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e84:	e8 0e d4 ff ff       	call   c0004297 <sync_fs>
c0006e89:	89 c6                	mov    esi,eax
c0006e8b:	eb 2b                	jmp    c0006eb8 <f_setlabel+0x265>
c0006e8d:	83 fb 0a             	cmp    ebx,0xa
c0006e90:	0f 87 2f fe ff ff    	ja     c0006cc5 <f_setlabel+0x72>
c0006e96:	89 f0                	mov    eax,esi
c0006e98:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006e9c:	43                   	inc    ebx
c0006e9d:	e9 85 fe ff ff       	jmp    c0006d27 <f_setlabel+0xd4>
c0006ea2:	83 fb 09             	cmp    ebx,0x9
c0006ea5:	0f 87 1a fe ff ff    	ja     c0006cc5 <f_setlabel+0x72>
c0006eab:	89 f0                	mov    eax,esi
c0006ead:	66 c1 e8 08          	shr    ax,0x8
c0006eb1:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006eb5:	43                   	inc    ebx
c0006eb6:	eb de                	jmp    c0006e96 <f_setlabel+0x243>
c0006eb8:	89 f0                	mov    eax,esi
c0006eba:	83 c4 74             	add    esp,0x74
c0006ebd:	5b                   	pop    ebx
c0006ebe:	5e                   	pop    esi
c0006ebf:	c3                   	ret    

c0006ec0 <f_forward>:
c0006ec0:	55                   	push   ebp
c0006ec1:	57                   	push   edi
c0006ec2:	56                   	push   esi
c0006ec3:	53                   	push   ebx
c0006ec4:	83 ec 2c             	sub    esp,0x2c
c0006ec7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006ecb:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0006ecf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0006ed5:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0006ed9:	89 d8                	mov    eax,ebx
c0006edb:	e8 b1 b1 ff ff       	call   c0002091 <validate>
c0006ee0:	89 c5                	mov    ebp,eax
c0006ee2:	85 c0                	test   eax,eax
c0006ee4:	0f 85 aa 01 00 00    	jne    c0007094 <f_forward+0x1d4>
c0006eea:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0006eee:	85 ed                	test   ebp,ebp
c0006ef0:	0f 85 9e 01 00 00    	jne    c0007094 <f_forward+0x1d4>
c0006ef6:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0006efa:	0f 84 8f 01 00 00    	je     c000708f <f_forward+0x1cf>
c0006f00:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0006f03:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0006f06:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0006f09:	bf 00 00 00 00       	mov    edi,0x0
c0006f0e:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0006f11:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0006f15:	89 d1                	mov    ecx,edx
c0006f17:	19 f9                	sbb    ecx,edi
c0006f19:	0f 83 cf 00 00 00    	jae    c0006fee <f_forward+0x12e>
c0006f1f:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0006f23:	e9 c6 00 00 00       	jmp    c0006fee <f_forward+0x12e>
c0006f28:	50                   	push   eax
c0006f29:	50                   	push   eax
c0006f2a:	6a 00                	push   0x0
c0006f2c:	6a 00                	push   0x0
c0006f2e:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0006f32:	83 c4 10             	add    esp,0x10
c0006f35:	85 c0                	test   eax,eax
c0006f37:	0f 84 57 01 00 00    	je     c0007094 <f_forward+0x1d4>
c0006f3d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006f40:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006f44:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0006f47:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c0006f4b:	89 d7                	mov    edi,edx
c0006f4d:	8d 4e ff             	lea    ecx,[esi-0x1]
c0006f50:	89 c6                	mov    esi,eax
c0006f52:	0f ac fe 09          	shrd   esi,edi,0x9
c0006f56:	21 ce                	and    esi,ecx
c0006f58:	89 c1                	mov    ecx,eax
c0006f5a:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0006f60:	0f 84 98 00 00 00    	je     c0006ffe <f_forward+0x13e>
c0006f66:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006f6a:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006f6d:	89 c8                	mov    eax,ecx
c0006f6f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0006f73:	e8 af ac ff ff       	call   c0001c27 <clst2sect>
c0006f78:	89 d7                	mov    edi,edx
c0006f7a:	09 c7                	or     edi,eax
c0006f7c:	0f 84 9e 00 00 00    	je     c0007020 <f_forward+0x160>
c0006f82:	31 ff                	xor    edi,edi
c0006f84:	8d 4b 50             	lea    ecx,[ebx+0x50]
c0006f87:	01 c6                	add    esi,eax
c0006f89:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0006f8d:	11 d7                	adc    edi,edx
c0006f8f:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0006f92:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0006f95:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006f99:	39 fa                	cmp    edx,edi
c0006f9b:	0f 85 a2 00 00 00    	jne    c0007043 <f_forward+0x183>
c0006fa1:	39 f0                	cmp    eax,esi
c0006fa3:	0f 85 9a 00 00 00    	jne    c0007043 <f_forward+0x183>
c0006fa9:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006fac:	ba 00 02 00 00       	mov    edx,0x200
c0006fb1:	25 ff 01 00 00       	and    eax,0x1ff
c0006fb6:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0006fba:	29 c2                	sub    edx,eax
c0006fbc:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0006fbf:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0006fc2:	39 d1                	cmp    ecx,edx
c0006fc4:	76 02                	jbe    c0006fc8 <f_forward+0x108>
c0006fc6:	89 d1                	mov    ecx,edx
c0006fc8:	8d 73 50             	lea    esi,[ebx+0x50]
c0006fcb:	52                   	push   edx
c0006fcc:	01 c6                	add    esi,eax
c0006fce:	52                   	push   edx
c0006fcf:	51                   	push   ecx
c0006fd0:	56                   	push   esi
c0006fd1:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0006fd5:	83 c4 10             	add    esp,0x10
c0006fd8:	85 c0                	test   eax,eax
c0006fda:	74 44                	je     c0007020 <f_forward+0x160>
c0006fdc:	31 ff                	xor    edi,edi
c0006fde:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c0006fe1:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c0006fe4:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0006fe8:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c0006fec:	01 07                	add    DWORD PTR [edi],eax
c0006fee:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0006ff3:	0f 85 2f ff ff ff    	jne    c0006f28 <f_forward+0x68>
c0006ff9:	e9 96 00 00 00       	jmp    c0007094 <f_forward+0x1d4>
c0006ffe:	85 f6                	test   esi,esi
c0007000:	0f 85 60 ff ff ff    	jne    c0006f66 <f_forward+0xa6>
c0007006:	89 d7                	mov    edi,edx
c0007008:	09 c7                	or     edi,eax
c000700a:	75 05                	jne    c0007011 <f_forward+0x151>
c000700c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000700f:	eb 0a                	jmp    c000701b <f_forward+0x15b>
c0007011:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007014:	89 d8                	mov    eax,ebx
c0007016:	e8 d9 bc ff ff       	call   c0002cf4 <get_fat>
c000701b:	83 f8 01             	cmp    eax,0x1
c000701e:	77 0b                	ja     c000702b <f_forward+0x16b>
c0007020:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0007024:	bd 02 00 00 00       	mov    ebp,0x2
c0007029:	eb 69                	jmp    c0007094 <f_forward+0x1d4>
c000702b:	83 f8 ff             	cmp    eax,0xffffffff
c000702e:	75 0b                	jne    c000703b <f_forward+0x17b>
c0007030:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0007034:	bd 01 00 00 00       	mov    ebp,0x1
c0007039:	eb 59                	jmp    c0007094 <f_forward+0x1d4>
c000703b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000703e:	e9 23 ff ff ff       	jmp    c0006f66 <f_forward+0xa6>
c0007043:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0007047:	79 20                	jns    c0007069 <f_forward+0x1a9>
c0007049:	83 ec 0c             	sub    esp,0xc
c000704c:	6a 01                	push   0x1
c000704e:	52                   	push   edx
c000704f:	50                   	push   eax
c0007050:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007054:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0007058:	50                   	push   eax
c0007059:	e8 fb a8 ff ff       	call   c0001959 <disk_write>
c000705e:	83 c4 20             	add    esp,0x20
c0007061:	85 c0                	test   eax,eax
c0007063:	75 cb                	jne    c0007030 <f_forward+0x170>
c0007065:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0007069:	83 ec 0c             	sub    esp,0xc
c000706c:	6a 01                	push   0x1
c000706e:	57                   	push   edi
c000706f:	56                   	push   esi
c0007070:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007074:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007078:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000707c:	50                   	push   eax
c000707d:	e8 c1 a8 ff ff       	call   c0001943 <disk_read>
c0007082:	83 c4 20             	add    esp,0x20
c0007085:	85 c0                	test   eax,eax
c0007087:	0f 84 1c ff ff ff    	je     c0006fa9 <f_forward+0xe9>
c000708d:	eb a1                	jmp    c0007030 <f_forward+0x170>
c000708f:	bd 07 00 00 00       	mov    ebp,0x7
c0007094:	83 c4 2c             	add    esp,0x2c
c0007097:	89 e8                	mov    eax,ebp
c0007099:	5b                   	pop    ebx
c000709a:	5e                   	pop    esi
c000709b:	5f                   	pop    edi
c000709c:	5d                   	pop    ebp
c000709d:	c3                   	ret    

c000709e <f_mkfs>:
c000709e:	55                   	push   ebp
c000709f:	57                   	push   edi
c00070a0:	56                   	push   esi
c00070a1:	53                   	push   ebx
c00070a2:	bb 0b 00 00 00       	mov    ebx,0xb
c00070a7:	81 ec 9c 00 00 00    	sub    esp,0x9c
c00070ad:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c00070b4:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c00070bb:	e8 b0 ae ff ff       	call   c0001f70 <get_ldnumber>
c00070c0:	85 c0                	test   eax,eax
c00070c2:	0f 88 ec 10 00 00    	js     c00081b4 <f_mkfs+0x1116>
c00070c8:	8b 14 85 60 30 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdcfa0]
c00070cf:	85 d2                	test   edx,edx
c00070d1:	74 03                	je     c00070d6 <f_mkfs+0x38>
c00070d3:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00070d6:	85 f6                	test   esi,esi
c00070d8:	75 05                	jne    c00070df <f_mkfs+0x41>
c00070da:	be e0 f2 01 c0       	mov    esi,0xc001f2e0
c00070df:	83 ec 0c             	sub    esp,0xc
c00070e2:	0f b6 c0             	movzx  eax,al
c00070e5:	bb 03 00 00 00       	mov    ebx,0x3
c00070ea:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00070ee:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00070f2:	e8 49 a8 ff ff       	call   c0001940 <disk_initialize>
c00070f7:	83 c4 10             	add    esp,0x10
c00070fa:	a8 01                	test   al,0x1
c00070fc:	0f 85 b2 10 00 00    	jne    c00081b4 <f_mkfs+0x1116>
c0007102:	bb 0a 00 00 00       	mov    ebx,0xa
c0007107:	a8 04                	test   al,0x4
c0007109:	0f 85 a5 10 00 00    	jne    c00081b4 <f_mkfs+0x1116>
c000710f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0007112:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c0007116:	85 c0                	test   eax,eax
c0007118:	75 20                	jne    c000713a <f_mkfs+0x9c>
c000711a:	51                   	push   ecx
c000711b:	8d 44 24 78          	lea    eax,[esp+0x78]
c000711f:	50                   	push   eax
c0007120:	6a 03                	push   0x3
c0007122:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007126:	e8 44 a8 ff ff       	call   c000196f <disk_ioctl>
c000712b:	83 c4 10             	add    esp,0x10
c000712e:	85 c0                	test   eax,eax
c0007130:	74 08                	je     c000713a <f_mkfs+0x9c>
c0007132:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c000713a:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c000713e:	8d 42 ff             	lea    eax,[edx-0x1]
c0007141:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007146:	77 04                	ja     c000714c <f_mkfs+0xae>
c0007148:	85 c2                	test   edx,eax
c000714a:	74 08                	je     c0007154 <f_mkfs+0xb6>
c000714c:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007154:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c0007157:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000715b:	48                   	dec    eax
c000715c:	3c 01                	cmp    al,0x1
c000715e:	76 05                	jbe    c0007165 <f_mkfs+0xc7>
c0007160:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007165:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0007168:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000716c:	48                   	dec    eax
c000716d:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007172:	77 07                	ja     c000717b <f_mkfs+0xdd>
c0007174:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c0007179:	74 08                	je     c0007183 <f_mkfs+0xe5>
c000717b:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007183:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007186:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c000718c:	77 07                	ja     c0007195 <f_mkfs+0xf7>
c000718e:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007191:	85 d8                	test   eax,ebx
c0007193:	74 02                	je     c0007197 <f_mkfs+0xf9>
c0007195:	31 db                	xor    ebx,ebx
c0007197:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c00071a2:	77 0a                	ja     c00071ae <f_mkfs+0x110>
c00071a4:	bb 11 00 00 00       	mov    ebx,0x11
c00071a9:	e9 06 10 00 00       	jmp    c00081b4 <f_mkfs+0x1116>
c00071ae:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c00071b5:	8b 36                	mov    esi,DWORD PTR [esi]
c00071b7:	85 ed                	test   ebp,ebp
c00071b9:	75 1e                	jne    c00071d9 <f_mkfs+0x13b>
c00071bb:	83 ec 0c             	sub    esp,0xc
c00071be:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c00071c5:	25 00 fe ff ff       	and    eax,0xfffffe00
c00071ca:	50                   	push   eax
c00071cb:	e8 f1 0f 00 00       	call   c00081c1 <ff_memalloc>
c00071d0:	83 c4 10             	add    esp,0x10
c00071d3:	89 c5                	mov    ebp,eax
c00071d5:	85 c0                	test   eax,eax
c00071d7:	74 cb                	je     c00071a4 <f_mkfs+0x106>
c00071d9:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c00071e1:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00071e9:	52                   	push   edx
c00071ea:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00071ee:	50                   	push   eax
c00071ef:	6a 01                	push   0x1
c00071f1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00071f5:	e8 75 a7 ff ff       	call   c000196f <disk_ioctl>
c00071fa:	83 c4 10             	add    esp,0x10
c00071fd:	85 c0                	test   eax,eax
c00071ff:	0f 85 4a 0f 00 00    	jne    c000814f <f_mkfs+0x10b1>
c0007205:	89 f1                	mov    ecx,esi
c0007207:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000720f:	83 e1 0f             	and    ecx,0xf
c0007212:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000721a:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c000721e:	83 e6 08             	and    esi,0x8
c0007221:	75 56                	jne    c0007279 <f_mkfs+0x1db>
c0007223:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c0007227:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c000722b:	83 ff 00             	cmp    edi,0x0
c000722e:	76 20                	jbe    c0007250 <f_mkfs+0x1b2>
c0007230:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c0007235:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c000723d:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c0007243:	83 d7 ff             	adc    edi,0xffffffff
c0007246:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000724a:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c000724e:	eb 21                	jmp    c0007271 <f_mkfs+0x1d3>
c0007250:	ba 3f 00 00 00       	mov    edx,0x3f
c0007255:	39 f2                	cmp    edx,esi
c0007257:	19 f8                	sbb    eax,edi
c0007259:	73 1e                	jae    c0007279 <f_mkfs+0x1db>
c000725b:	83 c6 c1             	add    esi,0xffffffc1
c000725e:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007266:	83 d7 ff             	adc    edi,0xffffffff
c0007269:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000726d:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007271:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007279:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000727d:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0007281:	89 04 24             	mov    DWORD PTR [esp],eax
c0007284:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007288:	31 c0                	xor    eax,eax
c000728a:	ba 7f 00 00 00       	mov    edx,0x7f
c000728f:	89 c7                	mov    edi,eax
c0007291:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007294:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007298:	0f 83 c5 0a 00 00    	jae    c0007d63 <f_mkfs+0xcc5>
c000729e:	89 df                	mov    edi,ebx
c00072a0:	c1 ef 09             	shr    edi,0x9
c00072a3:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00072a7:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c00072ae:	c1 ef 09             	shr    edi,0x9
c00072b1:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c00072b6:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c00072ba:	74 29                	je     c00072e5 <f_mkfs+0x247>
c00072bc:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00072c2:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c00072c7:	0f 97 c2             	seta   dl
c00072ca:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c00072cd:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00072d1:	0f 92 c0             	setb   al
c00072d4:	08 c2                	or     dl,al
c00072d6:	75 5b                	jne    c0007333 <f_mkfs+0x295>
c00072d8:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00072dc:	83 e0 07             	and    eax,0x7
c00072df:	3c 04                	cmp    al,0x4
c00072e1:	74 50                	je     c0007333 <f_mkfs+0x295>
c00072e3:	eb 1b                	jmp    c0007300 <f_mkfs+0x262>
c00072e5:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00072ea:	0f 87 73 0a 00 00    	ja     c0007d63 <f_mkfs+0xcc5>
c00072f0:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00072f6:	76 08                	jbe    c0007300 <f_mkfs+0x262>
c00072f8:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c0007300:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007304:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c0007308:	83 e0 01             	and    eax,0x1
c000730b:	80 e1 02             	and    cl,0x2
c000730e:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c0007312:	74 0d                	je     c0007321 <f_mkfs+0x283>
c0007314:	84 c0                	test   al,al
c0007316:	0f 84 53 09 00 00    	je     c0007c6f <f_mkfs+0xbd1>
c000731c:	e9 12 08 00 00       	jmp    c0007b33 <f_mkfs+0xa95>
c0007321:	bb 13 00 00 00       	mov    ebx,0x13
c0007326:	84 c0                	test   al,al
c0007328:	0f 85 05 08 00 00    	jne    c0007b33 <f_mkfs+0xa95>
c000732e:	e9 39 0e 00 00       	jmp    c000816c <f_mkfs+0x10ce>
c0007333:	31 c0                	xor    eax,eax
c0007335:	ba ff 0f 00 00       	mov    edx,0xfff
c000733a:	89 c7                	mov    edi,eax
c000733c:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000733f:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007343:	0f 83 1a 0a 00 00    	jae    c0007d63 <f_mkfs+0xcc5>
c0007349:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c000734f:	77 39                	ja     c000738a <f_mkfs+0x2ec>
c0007351:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007356:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c000735e:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007361:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007365:	73 08                	jae    c000736f <f_mkfs+0x2d1>
c0007367:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c000736f:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c0007374:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0007377:	b8 00 00 00 00       	mov    eax,0x0
c000737c:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007380:	73 08                	jae    c000738a <f_mkfs+0x2ec>
c0007382:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c000738a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000738e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007392:	83 c0 20             	add    eax,0x20
c0007395:	83 d2 00             	adc    edx,0x0
c0007398:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000739c:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c00073a0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00073a4:	31 d2                	xor    edx,edx
c00073a6:	31 ff                	xor    edi,edi
c00073a8:	52                   	push   edx
c00073a9:	89 fb                	mov    ebx,edi
c00073ab:	50                   	push   eax
c00073ac:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00073b0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00073b4:	e8 63 6f 01 00       	call   c001e31c <__udivdi3>
c00073b9:	83 c4 10             	add    esp,0x10
c00073bc:	c1 e0 02             	shl    eax,0x2
c00073bf:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c00073c3:	05 07 02 00 00       	add    eax,0x207
c00073c8:	89 f1                	mov    ecx,esi
c00073ca:	c1 e8 09             	shr    eax,0x9
c00073cd:	83 c1 ff             	add    ecx,0xffffffff
c00073d0:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00073d4:	83 d3 ff             	adc    ebx,0xffffffff
c00073d7:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00073db:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c00073df:	31 d2                	xor    edx,edx
c00073e1:	01 c8                	add    eax,ecx
c00073e3:	11 da                	adc    edx,ebx
c00073e5:	89 c1                	mov    ecx,eax
c00073e7:	f7 de                	neg    esi
c00073e9:	89 d0                	mov    eax,edx
c00073eb:	83 d7 00             	adc    edi,0x0
c00073ee:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00073f2:	f7 df                	neg    edi
c00073f4:	21 f1                	and    ecx,esi
c00073f6:	21 f8                	and    eax,edi
c00073f8:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00073fc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007400:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0007404:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0007408:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c000740c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000740f:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c0007413:	0f ac d0 01          	shrd   eax,edx,0x1
c0007417:	89 df                	mov    edi,ebx
c0007419:	d1 ea                	shr    edx,1
c000741b:	39 c1                	cmp    ecx,eax
c000741d:	19 d7                	sbb    edi,edx
c000741f:	0f 83 3e 09 00 00    	jae    c0007d63 <f_mkfs+0xcc5>
c0007425:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007429:	31 d2                	xor    edx,edx
c000742b:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c000742f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007433:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c0007437:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000743a:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c000743e:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0007442:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007446:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000744a:	83 f8 0f             	cmp    eax,0xf
c000744d:	0f 86 10 09 00 00    	jbe    c0007d63 <f_mkfs+0xcc5>
c0007453:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c000745b:	0f 87 02 09 00 00    	ja     c0007d63 <f_mkfs+0xcc5>
c0007461:	31 d2                	xor    edx,edx
c0007463:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007467:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000746f:	83 c0 07             	add    eax,0x7
c0007472:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000747a:	c1 e8 03             	shr    eax,0x3
c000747d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007484:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0007488:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000748c:	c1 e0 09             	shl    eax,0x9
c000748f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007493:	48                   	dec    eax
c0007494:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007498:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000749c:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c00074a0:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00074a4:	31 d2                	xor    edx,edx
c00074a6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00074aa:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00074b1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00074b5:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c00074ba:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00074be:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00074c2:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00074c6:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c00074ca:	31 ff                	xor    edi,edi
c00074cc:	31 f6                	xor    esi,esi
c00074ce:	31 db                	xor    ebx,ebx
c00074d0:	85 ff                	test   edi,edi
c00074d2:	74 05                	je     c00074d9 <f_mkfs+0x43b>
c00074d4:	4f                   	dec    edi
c00074d5:	74 44                	je     c000751b <f_mkfs+0x47d>
c00074d7:	eb 4f                	jmp    c0007528 <f_mkfs+0x48a>
c00074d9:	83 ec 0c             	sub    esp,0xc
c00074dc:	0f b7 c3             	movzx  eax,bx
c00074df:	50                   	push   eax
c00074e0:	e8 05 0e 00 00       	call   c00082ea <ff_wtoupper>
c00074e5:	83 c4 10             	add    esp,0x10
c00074e8:	89 c1                	mov    ecx,eax
c00074ea:	8d 53 01             	lea    edx,[ebx+0x1]
c00074ed:	66 39 c3             	cmp    bx,ax
c00074f0:	75 3e                	jne    c0007530 <f_mkfs+0x492>
c00074f2:	be 01 00 00 00       	mov    esi,0x1
c00074f7:	89 df                	mov    edi,ebx
c00074f9:	66 01 f7             	add    di,si
c00074fc:	75 07                	jne    c0007505 <f_mkfs+0x467>
c00074fe:	83 fe 7f             	cmp    esi,0x7f
c0007501:	77 31                	ja     c0007534 <f_mkfs+0x496>
c0007503:	eb 16                	jmp    c000751b <f_mkfs+0x47d>
c0007505:	83 ec 0c             	sub    esp,0xc
c0007508:	0f b7 ff             	movzx  edi,di
c000750b:	57                   	push   edi
c000750c:	e8 d9 0d 00 00       	call   c00082ea <ff_wtoupper>
c0007511:	83 c4 10             	add    esp,0x10
c0007514:	39 c7                	cmp    edi,eax
c0007516:	75 e6                	jne    c00074fe <f_mkfs+0x460>
c0007518:	46                   	inc    esi
c0007519:	eb dc                	jmp    c00074f7 <f_mkfs+0x459>
c000751b:	31 c0                	xor    eax,eax
c000751d:	89 d9                	mov    ecx,ebx
c000751f:	4e                   	dec    esi
c0007520:	0f 95 c0             	setne  al
c0007523:	43                   	inc    ebx
c0007524:	89 c7                	mov    edi,eax
c0007526:	eb 14                	jmp    c000753c <f_mkfs+0x49e>
c0007528:	89 f1                	mov    ecx,esi
c000752a:	01 f3                	add    ebx,esi
c000752c:	31 ff                	xor    edi,edi
c000752e:	eb 0c                	jmp    c000753c <f_mkfs+0x49e>
c0007530:	89 d3                	mov    ebx,edx
c0007532:	eb 08                	jmp    c000753c <f_mkfs+0x49e>
c0007534:	bf 02 00 00 00       	mov    edi,0x2
c0007539:	83 c9 ff             	or     ecx,0xffffffff
c000753c:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007540:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007543:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c0007547:	0f b6 c1             	movzx  eax,cl
c000754a:	e8 3a a9 ff ff       	call   c0001e89 <xsum32>
c000754f:	66 c1 e9 08          	shr    cx,0x8
c0007553:	89 c2                	mov    edx,eax
c0007555:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007558:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c000755c:	0f b7 c1             	movzx  eax,cx
c000755f:	e8 25 a9 ff ff       	call   c0001e89 <xsum32>
c0007564:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c0007569:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000756d:	66 85 db             	test   bx,bx
c0007570:	74 1f                	je     c0007591 <f_mkfs+0x4f3>
c0007572:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007575:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c000757c:	83 c0 02             	add    eax,0x2
c000757f:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007585:	39 c2                	cmp    edx,eax
c0007587:	74 08                	je     c0007591 <f_mkfs+0x4f3>
c0007589:	89 04 24             	mov    DWORD PTR [esp],eax
c000758c:	e9 3f ff ff ff       	jmp    c00074d0 <f_mkfs+0x432>
c0007591:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007594:	83 ec 0c             	sub    esp,0xc
c0007597:	05 01 02 00 00       	add    eax,0x201
c000759c:	c1 e8 09             	shr    eax,0x9
c000759f:	50                   	push   eax
c00075a0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00075a4:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00075a8:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00075ac:	55                   	push   ebp
c00075ad:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00075b1:	e8 a3 a3 ff ff       	call   c0001959 <disk_write>
c00075b6:	83 c4 20             	add    esp,0x20
c00075b9:	85 c0                	test   eax,eax
c00075bb:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00075be:	0f 85 8b 0b 00 00    	jne    c000814f <f_mkfs+0x10b1>
c00075c4:	89 d0                	mov    eax,edx
c00075c6:	31 d2                	xor    edx,edx
c00075c8:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c00075cc:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c00075d0:	66 85 db             	test   bx,bx
c00075d3:	74 04                	je     c00075d9 <f_mkfs+0x53b>
c00075d5:	31 c0                	xor    eax,eax
c00075d7:	eb b0                	jmp    c0007589 <f_mkfs+0x4eb>
c00075d9:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00075dd:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c00075e1:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c00075e5:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c00075eb:	31 d2                	xor    edx,edx
c00075ed:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c00075f8:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00075fc:	c1 eb 09             	shr    ebx,0x9
c00075ff:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c0007606:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000760a:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c000760e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007612:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007616:	8d 70 01             	lea    esi,[eax+0x1]
c0007619:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000761d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007621:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c0007628:	31 d2                	xor    edx,edx
c000762a:	25 00 fe ff ff       	and    eax,0xfffffe00
c000762f:	89 04 24             	mov    DWORD PTR [esp],eax
c0007632:	89 c1                	mov    ecx,eax
c0007634:	89 e8                	mov    eax,ebp
c0007636:	e8 e7 a3 ff ff       	call   c0001a22 <mem_set>
c000763b:	31 c0                	xor    eax,eax
c000763d:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007640:	76 10                	jbe    c0007652 <f_mkfs+0x5b4>
c0007642:	83 fe 07             	cmp    esi,0x7
c0007645:	76 0b                	jbe    c0007652 <f_mkfs+0x5b4>
c0007647:	40                   	inc    eax
c0007648:	83 ee 08             	sub    esi,0x8
c000764b:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c0007650:	eb eb                	jmp    c000763d <f_mkfs+0x59f>
c0007652:	b2 01                	mov    dl,0x1
c0007654:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c0007658:	85 f6                	test   esi,esi
c000765a:	74 0c                	je     c0007668 <f_mkfs+0x5ca>
c000765c:	39 04 24             	cmp    DWORD PTR [esp],eax
c000765f:	76 07                	jbe    c0007668 <f_mkfs+0x5ca>
c0007661:	08 11                	or     BYTE PTR [ecx],dl
c0007663:	4e                   	dec    esi
c0007664:	d1 e2                	shl    edx,1
c0007666:	eb f0                	jmp    c0007658 <f_mkfs+0x5ba>
c0007668:	89 df                	mov    edi,ebx
c000766a:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c000766e:	76 04                	jbe    c0007674 <f_mkfs+0x5d6>
c0007670:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007674:	83 ec 0c             	sub    esp,0xc
c0007677:	57                   	push   edi
c0007678:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000767c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007680:	55                   	push   ebp
c0007681:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007685:	e8 cf a2 ff ff       	call   c0001959 <disk_write>
c000768a:	83 c4 20             	add    esp,0x20
c000768d:	85 c0                	test   eax,eax
c000768f:	0f 85 ba 0a 00 00    	jne    c000814f <f_mkfs+0x10b1>
c0007695:	31 d2                	xor    edx,edx
c0007697:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c000769b:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c000769f:	29 fb                	sub    ebx,edi
c00076a1:	0f 85 7a ff ff ff    	jne    c0007621 <f_mkfs+0x583>
c00076a7:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00076ab:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00076b3:	31 f6                	xor    esi,esi
c00076b5:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00076b9:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00076bc:	31 d2                	xor    edx,edx
c00076be:	89 e8                	mov    eax,ebp
c00076c0:	e8 5d a3 ff ff       	call   c0001a22 <mem_set>
c00076c5:	31 c9                	xor    ecx,ecx
c00076c7:	85 db                	test   ebx,ebx
c00076c9:	75 40                	jne    c000770b <f_mkfs+0x66d>
c00076cb:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00076d0:	89 e8                	mov    eax,ebp
c00076d2:	bb 02 00 00 00       	mov    ebx,0x2
c00076d7:	e8 28 a3 ff ff       	call   c0001a04 <st_dword>
c00076dc:	8d 45 04             	lea    eax,[ebp+0x4]
c00076df:	83 ca ff             	or     edx,0xffffffff
c00076e2:	e8 1d a3 ff ff       	call   c0001a04 <st_dword>
c00076e7:	b9 08 00 00 00       	mov    ecx,0x8
c00076ec:	eb 1d                	jmp    c000770b <f_mkfs+0x66d>
c00076ee:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00076f1:	76 3b                	jbe    c000772e <f_mkfs+0x690>
c00076f3:	43                   	inc    ebx
c00076f4:	83 fe 01             	cmp    esi,0x1
c00076f7:	89 da                	mov    edx,ebx
c00076f9:	77 03                	ja     c00076fe <f_mkfs+0x660>
c00076fb:	83 ca ff             	or     edx,0xffffffff
c00076fe:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0007702:	4e                   	dec    esi
c0007703:	e8 fc a2 ff ff       	call   c0001a04 <st_dword>
c0007708:	83 c1 04             	add    ecx,0x4
c000770b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000770f:	85 f6                	test   esi,esi
c0007711:	75 db                	jne    c00076ee <f_mkfs+0x650>
c0007713:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c0007718:	77 14                	ja     c000772e <f_mkfs+0x690>
c000771a:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c000771e:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c0007725:	85 f6                	test   esi,esi
c0007727:	74 05                	je     c000772e <f_mkfs+0x690>
c0007729:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000772c:	77 dd                	ja     c000770b <f_mkfs+0x66d>
c000772e:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0007732:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007736:	39 cf                	cmp    edi,ecx
c0007738:	76 02                	jbe    c000773c <f_mkfs+0x69e>
c000773a:	89 cf                	mov    edi,ecx
c000773c:	83 ec 0c             	sub    esp,0xc
c000773f:	57                   	push   edi
c0007740:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007744:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007748:	55                   	push   ebp
c0007749:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000774d:	e8 07 a2 ff ff       	call   c0001959 <disk_write>
c0007752:	83 c4 20             	add    esp,0x20
c0007755:	85 c0                	test   eax,eax
c0007757:	0f 85 f2 09 00 00    	jne    c000814f <f_mkfs+0x10b1>
c000775d:	31 d2                	xor    edx,edx
c000775f:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007763:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007767:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c000776b:	0f 85 48 ff ff ff    	jne    c00076b9 <f_mkfs+0x61b>
c0007771:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007774:	31 d2                	xor    edx,edx
c0007776:	89 e8                	mov    eax,ebp
c0007778:	31 ff                	xor    edi,edi
c000777a:	e8 a3 a2 ff ff       	call   c0001a22 <mem_set>
c000777f:	8d 45 34             	lea    eax,[ebp+0x34]
c0007782:	ba 02 00 00 00       	mov    edx,0x2
c0007787:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c000778b:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c000778f:	e8 70 a2 ff ff       	call   c0001a04 <st_dword>
c0007794:	8d 45 38             	lea    eax,[ebp+0x38]
c0007797:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c000779b:	e8 64 a2 ff ff       	call   c0001a04 <st_dword>
c00077a0:	8d 45 44             	lea    eax,[ebp+0x44]
c00077a3:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00077a7:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c00077ab:	e8 54 a2 ff ff       	call   c0001a04 <st_dword>
c00077b0:	8d 45 54             	lea    eax,[ebp+0x54]
c00077b3:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00077b7:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00077bb:	83 c2 02             	add    edx,0x2
c00077be:	e8 41 a2 ff ff       	call   c0001a04 <st_dword>
c00077c3:	8d 45 58             	lea    eax,[ebp+0x58]
c00077c6:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c00077ca:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00077ce:	e8 31 a2 ff ff       	call   c0001a04 <st_dword>
c00077d3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00077d7:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c00077dc:	89 c6                	mov    esi,eax
c00077de:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00077e2:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c00077e6:	89 04 24             	mov    DWORD PTR [esp],eax
c00077e9:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c00077ed:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c00077f0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00077f4:	39 cb                	cmp    ebx,ecx
c00077f6:	76 02                	jbe    c00077fa <f_mkfs+0x75c>
c00077f8:	89 cb                	mov    ebx,ecx
c00077fa:	83 ec 0c             	sub    esp,0xc
c00077fd:	53                   	push   ebx
c00077fe:	57                   	push   edi
c00077ff:	56                   	push   esi
c0007800:	55                   	push   ebp
c0007801:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007805:	e8 4f a1 ff ff       	call   c0001959 <disk_write>
c000780a:	83 c4 20             	add    esp,0x20
c000780d:	85 c0                	test   eax,eax
c000780f:	0f 85 3a 09 00 00    	jne    c000814f <f_mkfs+0x10b1>
c0007815:	31 d2                	xor    edx,edx
c0007817:	b9 00 02 00 00       	mov    ecx,0x200
c000781c:	89 e8                	mov    eax,ebp
c000781e:	e8 ff a1 ff ff       	call   c0001a22 <mem_set>
c0007823:	31 d2                	xor    edx,edx
c0007825:	01 de                	add    esi,ebx
c0007827:	11 d7                	adc    edi,edx
c0007829:	29 1c 24             	sub    DWORD PTR [esp],ebx
c000782c:	75 bf                	jne    c00077ed <f_mkfs+0x74f>
c000782e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007832:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007836:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c000783e:	b9 00 02 00 00       	mov    ecx,0x200
c0007843:	31 d2                	xor    edx,edx
c0007845:	89 e8                	mov    eax,ebp
c0007847:	e8 d6 a1 ff ff       	call   c0001a22 <mem_set>
c000784c:	b9 0b 00 00 00       	mov    ecx,0xb
c0007851:	ba c0 f3 01 c0       	mov    edx,0xc001f3c0
c0007856:	89 e8                	mov    eax,ebp
c0007858:	e8 b0 a1 ff ff       	call   c0001a0d <mem_cpy>
c000785d:	8d 45 40             	lea    eax,[ebp+0x40]
c0007860:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007864:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007868:	e8 9a a1 ff ff       	call   c0001a07 <st_qword>
c000786d:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007871:	8d 45 48             	lea    eax,[ebp+0x48]
c0007874:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007878:	e8 8a a1 ff ff       	call   c0001a07 <st_qword>
c000787d:	8d 45 50             	lea    eax,[ebp+0x50]
c0007880:	ba 20 00 00 00       	mov    edx,0x20
c0007885:	e8 7a a1 ff ff       	call   c0001a04 <st_dword>
c000788a:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000788e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007892:	e8 6d a1 ff ff       	call   c0001a04 <st_dword>
c0007897:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000789b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000789f:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c00078a3:	e8 5c a1 ff ff       	call   c0001a04 <st_dword>
c00078a8:	8d 45 5c             	lea    eax,[ebp+0x5c]
c00078ab:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00078af:	e8 50 a1 ff ff       	call   c0001a04 <st_dword>
c00078b4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00078b8:	8d 50 02             	lea    edx,[eax+0x2]
c00078bb:	8d 45 60             	lea    eax,[ebp+0x60]
c00078be:	e8 41 a1 ff ff       	call   c0001a04 <st_dword>
c00078c3:	8d 45 64             	lea    eax,[ebp+0x64]
c00078c6:	ba 00 00 21 50       	mov    edx,0x50210000
c00078cb:	e8 34 a1 ff ff       	call   c0001a04 <st_dword>
c00078d0:	8d 45 68             	lea    eax,[ebp+0x68]
c00078d3:	ba 00 01 00 00       	mov    edx,0x100
c00078d8:	e8 23 a1 ff ff       	call   c0001a00 <st_word>
c00078dd:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c00078e1:	b8 0a 00 00 00       	mov    eax,0xa
c00078e6:	48                   	dec    eax
c00078e7:	74 05                	je     c00078ee <f_mkfs+0x850>
c00078e9:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c00078ec:	eb f8                	jmp    c00078e6 <f_mkfs+0x848>
c00078ee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00078f2:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c00078f6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00078fa:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c00078fe:	74 05                	je     c0007905 <f_mkfs+0x867>
c0007900:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007903:	eb f5                	jmp    c00078fa <f_mkfs+0x85c>
c0007905:	8d 45 78             	lea    eax,[ebp+0x78]
c0007908:	ba eb fe 00 00       	mov    edx,0xfeeb
c000790d:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007913:	31 db                	xor    ebx,ebx
c0007915:	e8 e6 a0 ff ff       	call   c0001a00 <st_word>
c000791a:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007920:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007925:	89 04 24             	mov    DWORD PTR [esp],eax
c0007928:	e8 d3 a0 ff ff       	call   c0001a00 <st_word>
c000792d:	31 c9                	xor    ecx,ecx
c000792f:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007932:	83 f8 01             	cmp    eax,0x1
c0007935:	76 13                	jbe    c000794a <f_mkfs+0x8ac>
c0007937:	83 f9 70             	cmp    ecx,0x70
c000793a:	74 0e                	je     c000794a <f_mkfs+0x8ac>
c000793c:	89 da                	mov    edx,ebx
c000793e:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007943:	e8 41 a5 ff ff       	call   c0001e89 <xsum32>
c0007948:	89 c3                	mov    ebx,eax
c000794a:	41                   	inc    ecx
c000794b:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007951:	75 dc                	jne    c000792f <f_mkfs+0x891>
c0007953:	89 f0                	mov    eax,esi
c0007955:	89 fa                	mov    edx,edi
c0007957:	83 c0 01             	add    eax,0x1
c000795a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000795e:	83 d2 00             	adc    edx,0x0
c0007961:	83 ec 0c             	sub    esp,0xc
c0007964:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007968:	6a 01                	push   0x1
c000796a:	57                   	push   edi
c000796b:	56                   	push   esi
c000796c:	55                   	push   ebp
c000796d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007971:	e8 e3 9f ff ff       	call   c0001959 <disk_write>
c0007976:	83 c4 20             	add    esp,0x20
c0007979:	85 c0                	test   eax,eax
c000797b:	0f 85 ce 07 00 00    	jne    c000814f <f_mkfs+0x10b1>
c0007981:	31 d2                	xor    edx,edx
c0007983:	b9 00 02 00 00       	mov    ecx,0x200
c0007988:	89 e8                	mov    eax,ebp
c000798a:	e8 93 a0 ff ff       	call   c0001a22 <mem_set>
c000798f:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007994:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007997:	e8 64 a0 ff ff       	call   c0001a00 <st_word>
c000799c:	89 f0                	mov    eax,esi
c000799e:	89 fa                	mov    edx,edi
c00079a0:	83 c0 09             	add    eax,0x9
c00079a3:	83 d2 00             	adc    edx,0x0
c00079a6:	89 04 24             	mov    DWORD PTR [esp],eax
c00079a9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00079ad:	31 c9                	xor    ecx,ecx
c00079af:	41                   	inc    ecx
c00079b0:	89 da                	mov    edx,ebx
c00079b2:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c00079b7:	e8 cd a4 ff ff       	call   c0001e89 <xsum32>
c00079bc:	89 c3                	mov    ebx,eax
c00079be:	81 f9 00 02 00 00    	cmp    ecx,0x200
c00079c4:	75 e9                	jne    c00079af <f_mkfs+0x911>
c00079c6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00079ca:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00079ce:	83 c0 01             	add    eax,0x1
c00079d1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00079d5:	83 d2 00             	adc    edx,0x0
c00079d8:	83 ec 0c             	sub    esp,0xc
c00079db:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c00079df:	6a 01                	push   0x1
c00079e1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00079e5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00079e9:	55                   	push   ebp
c00079ea:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079ee:	e8 66 9f ff ff       	call   c0001959 <disk_write>
c00079f3:	83 c4 20             	add    esp,0x20
c00079f6:	85 c0                	test   eax,eax
c00079f8:	0f 85 51 07 00 00    	jne    c000814f <f_mkfs+0x10b1>
c00079fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007a02:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007a06:	75 09                	jne    c0007a11 <f_mkfs+0x973>
c0007a08:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a0b:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007a0f:	74 12                	je     c0007a23 <f_mkfs+0x985>
c0007a11:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007a15:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007a19:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007a1d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007a21:	eb 8a                	jmp    c00079ad <f_mkfs+0x90f>
c0007a23:	31 d2                	xor    edx,edx
c0007a25:	b9 00 02 00 00       	mov    ecx,0x200
c0007a2a:	89 e8                	mov    eax,ebp
c0007a2c:	e8 f1 9f ff ff       	call   c0001a22 <mem_set>
c0007a31:	83 c6 0b             	add    esi,0xb
c0007a34:	83 d7 00             	adc    edi,0x0
c0007a37:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007a3b:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007a3f:	31 c9                	xor    ecx,ecx
c0007a41:	41                   	inc    ecx
c0007a42:	89 da                	mov    edx,ebx
c0007a44:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007a49:	e8 3b a4 ff ff       	call   c0001e89 <xsum32>
c0007a4e:	89 c3                	mov    ebx,eax
c0007a50:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007a56:	75 e9                	jne    c0007a41 <f_mkfs+0x9a3>
c0007a58:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007a5b:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007a5f:	83 c6 01             	add    esi,0x1
c0007a62:	83 d7 00             	adc    edi,0x0
c0007a65:	83 ec 0c             	sub    esp,0xc
c0007a68:	6a 01                	push   0x1
c0007a6a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007a6e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007a72:	55                   	push   ebp
c0007a73:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a77:	e8 dd 9e ff ff       	call   c0001959 <disk_write>
c0007a7c:	83 c4 20             	add    esp,0x20
c0007a7f:	85 c0                	test   eax,eax
c0007a81:	0f 85 c8 06 00 00    	jne    c000814f <f_mkfs+0x10b1>
c0007a87:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007a8b:	75 06                	jne    c0007a93 <f_mkfs+0x9f5>
c0007a8d:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007a91:	74 09                	je     c0007a9c <f_mkfs+0x9fe>
c0007a93:	89 34 24             	mov    DWORD PTR [esp],esi
c0007a96:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007a9a:	eb a3                	jmp    c0007a3f <f_mkfs+0x9a1>
c0007a9c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007aa0:	89 da                	mov    edx,ebx
c0007aa2:	01 e8                	add    eax,ebp
c0007aa4:	e8 5b 9f ff ff       	call   c0001a04 <st_dword>
c0007aa9:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007aae:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007ab6:	75 e4                	jne    c0007a9c <f_mkfs+0x9fe>
c0007ab8:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007abb:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007abf:	83 c6 02             	add    esi,0x2
c0007ac2:	83 d7 00             	adc    edi,0x0
c0007ac5:	83 ec 0c             	sub    esp,0xc
c0007ac8:	6a 01                	push   0x1
c0007aca:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007ace:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007ad2:	55                   	push   ebp
c0007ad3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ad7:	e8 7d 9e ff ff       	call   c0001959 <disk_write>
c0007adc:	83 c4 20             	add    esp,0x20
c0007adf:	85 c0                	test   eax,eax
c0007ae1:	0f 85 68 06 00 00    	jne    c000814f <f_mkfs+0x10b1>
c0007ae7:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007aec:	74 0d                	je     c0007afb <f_mkfs+0xa5d>
c0007aee:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007af6:	e9 43 fd ff ff       	jmp    c000783e <f_mkfs+0x7a0>
c0007afb:	b1 07                	mov    cl,0x7
c0007afd:	e9 e3 05 00 00       	jmp    c00080e5 <f_mkfs+0x1047>
c0007b02:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007b07:	0f 85 4f 02 00 00    	jne    c0007d5c <f_mkfs+0xcbe>
c0007b0d:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007b12:	0f 86 22 02 00 00    	jbe    c0007d3a <f_mkfs+0xc9c>
c0007b18:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007b1d:	0f 85 81 06 00 00    	jne    c00081a4 <f_mkfs+0x1106>
c0007b23:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007b26:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007b2a:	83 f8 40             	cmp    eax,0x40
c0007b2d:	0f 87 51 06 00 00    	ja     c0008184 <f_mkfs+0x10e6>
c0007b33:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007b37:	85 ff                	test   edi,edi
c0007b39:	75 1c                	jne    c0007b57 <f_mkfs+0xab9>
c0007b3b:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007b3e:	ba c0 f2 01 c0       	mov    edx,0xc001f2c0
c0007b43:	c1 e9 0c             	shr    ecx,0xc
c0007b46:	bf 01 00 00 00       	mov    edi,0x1
c0007b4b:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007b4e:	66 85 c0             	test   ax,ax
c0007b51:	0f 85 95 01 00 00    	jne    c0007cec <f_mkfs+0xc4e>
c0007b57:	31 d2                	xor    edx,edx
c0007b59:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007b5c:	f7 f7                	div    edi
c0007b5e:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007b63:	0f 86 95 01 00 00    	jbe    c0007cfe <f_mkfs+0xc60>
c0007b69:	83 c0 02             	add    eax,0x2
c0007b6c:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007b71:	01 c0                	add    eax,eax
c0007b73:	05 ff 01 00 00       	add    eax,0x1ff
c0007b78:	be 01 00 00 00       	mov    esi,0x1
c0007b7d:	c1 e8 09             	shr    eax,0x9
c0007b80:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007b84:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007b88:	c1 e0 05             	shl    eax,0x5
c0007b8b:	c1 e8 09             	shr    eax,0x9
c0007b8e:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007b92:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007b97:	31 d2                	xor    edx,edx
c0007b99:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007b9d:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007ba1:	89 f0                	mov    eax,esi
c0007ba3:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007ba7:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007bab:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007baf:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007bb3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007bb7:	31 d2                	xor    edx,edx
c0007bb9:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007bbe:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007bc2:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007bc6:	31 db                	xor    ebx,ebx
c0007bc8:	01 c8                	add    eax,ecx
c0007bca:	11 da                	adc    edx,ebx
c0007bcc:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007bd0:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007bd4:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007bd8:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007bdc:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007be0:	f7 da                	neg    edx
c0007be2:	21 d1                	and    ecx,edx
c0007be4:	29 d9                	sub    ecx,ebx
c0007be6:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007beb:	0f 85 20 01 00 00    	jne    c0007d11 <f_mkfs+0xc73>
c0007bf1:	31 db                	xor    ebx,ebx
c0007bf3:	01 ce                	add    esi,ecx
c0007bf5:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007bf9:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007bfd:	31 d2                	xor    edx,edx
c0007bff:	89 f8                	mov    eax,edi
c0007c01:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007c05:	c1 e0 04             	shl    eax,0x4
c0007c08:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007c0c:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007c10:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007c14:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007c18:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007c1b:	19 d3                	sbb    ebx,edx
c0007c1d:	0f 82 40 01 00 00    	jb     c0007d63 <f_mkfs+0xcc5>
c0007c23:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007c26:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007c2a:	89 c8                	mov    eax,ecx
c0007c2c:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007c31:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007c35:	29 f0                	sub    eax,esi
c0007c37:	29 d0                	sub    eax,edx
c0007c39:	31 d2                	xor    edx,edx
c0007c3b:	f7 f7                	div    edi
c0007c3d:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007c42:	89 c3                	mov    ebx,eax
c0007c44:	0f 85 b8 fe ff ff    	jne    c0007b02 <f_mkfs+0xa64>
c0007c4a:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007c4f:	0f 87 1d 01 00 00    	ja     c0007d72 <f_mkfs+0xcd4>
c0007c55:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007c5a:	0f 85 03 01 00 00    	jne    c0007d63 <f_mkfs+0xcc5>
c0007c60:	83 ff 01             	cmp    edi,0x1
c0007c63:	0f 86 fa 00 00 00    	jbe    c0007d63 <f_mkfs+0xcc5>
c0007c69:	d1 ef                	shr    edi,1
c0007c6b:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007c6f:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007c73:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007c76:	85 db                	test   ebx,ebx
c0007c78:	75 2d                	jne    c0007ca7 <f_mkfs+0xc09>
c0007c7a:	89 cb                	mov    ebx,ecx
c0007c7c:	ba d0 f2 01 c0       	mov    edx,0xc001f2d0
c0007c81:	c1 eb 11             	shr    ebx,0x11
c0007c84:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007c8c:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007c8f:	66 85 c0             	test   ax,ax
c0007c92:	74 11                	je     c0007ca5 <f_mkfs+0xc07>
c0007c94:	83 c2 02             	add    edx,0x2
c0007c97:	39 d8                	cmp    eax,ebx
c0007c99:	77 0a                	ja     c0007ca5 <f_mkfs+0xc07>
c0007c9b:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007c9f:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007ca3:	eb e7                	jmp    c0007c8c <f_mkfs+0xbee>
c0007ca5:	31 db                	xor    ebx,ebx
c0007ca7:	31 d2                	xor    edx,edx
c0007ca9:	89 c8                	mov    eax,ecx
c0007cab:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007caf:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007cb6:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007cbb:	c1 ea 09             	shr    edx,0x9
c0007cbe:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007cc3:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007cc7:	0f 87 96 00 00 00    	ja     c0007d63 <f_mkfs+0xcc5>
c0007ccd:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007cd1:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007cd9:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007cdd:	be 20 00 00 00       	mov    esi,0x20
c0007ce2:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007ce7:	e9 a6 fe ff ff       	jmp    c0007b92 <f_mkfs+0xaf4>
c0007cec:	83 c2 02             	add    edx,0x2
c0007cef:	39 c8                	cmp    eax,ecx
c0007cf1:	0f 87 60 fe ff ff    	ja     c0007b57 <f_mkfs+0xab9>
c0007cf7:	01 ff                	add    edi,edi
c0007cf9:	e9 4d fe ff ff       	jmp    c0007b4b <f_mkfs+0xaad>
c0007cfe:	8d 04 40             	lea    eax,[eax+eax*2]
c0007d01:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007d06:	40                   	inc    eax
c0007d07:	d1 e8                	shr    eax,1
c0007d09:	83 c0 03             	add    eax,0x3
c0007d0c:	e9 62 fe ff ff       	jmp    c0007b73 <f_mkfs+0xad5>
c0007d11:	31 d2                	xor    edx,edx
c0007d13:	89 c8                	mov    eax,ecx
c0007d15:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007d19:	85 d2                	test   edx,edx
c0007d1b:	74 0c                	je     c0007d29 <f_mkfs+0xc8b>
c0007d1d:	49                   	dec    ecx
c0007d1e:	46                   	inc    esi
c0007d1f:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007d24:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007d29:	89 c8                	mov    eax,ecx
c0007d2b:	31 d2                	xor    edx,edx
c0007d2d:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007d31:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0007d35:	e9 c3 fe ff ff       	jmp    c0007bfd <f_mkfs+0xb5f>
c0007d3a:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007d3f:	77 31                	ja     c0007d72 <f_mkfs+0xcd4>
c0007d41:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007d46:	75 1b                	jne    c0007d63 <f_mkfs+0xcc5>
c0007d48:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007d4b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007d4f:	3d 80 00 00 00       	cmp    eax,0x80
c0007d54:	0f 86 d9 fd ff ff    	jbe    c0007b33 <f_mkfs+0xa95>
c0007d5a:	eb 07                	jmp    c0007d63 <f_mkfs+0xcc5>
c0007d5c:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007d61:	76 0a                	jbe    c0007d6d <f_mkfs+0xccf>
c0007d63:	bb 0e 00 00 00       	mov    ebx,0xe
c0007d68:	e9 ff 03 00 00       	jmp    c000816c <f_mkfs+0x10ce>
c0007d6d:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007d72:	31 d2                	xor    edx,edx
c0007d74:	b9 00 02 00 00       	mov    ecx,0x200
c0007d79:	89 e8                	mov    eax,ebp
c0007d7b:	e8 a2 9c ff ff       	call   c0001a22 <mem_set>
c0007d80:	b9 0b 00 00 00       	mov    ecx,0xb
c0007d85:	ba e2 f3 01 c0       	mov    edx,0xc001f3e2
c0007d8a:	89 e8                	mov    eax,ebp
c0007d8c:	e8 7c 9c ff ff       	call   c0001a0d <mem_cpy>
c0007d91:	8d 45 0b             	lea    eax,[ebp+0xb]
c0007d94:	ba 00 02 00 00       	mov    edx,0x200
c0007d99:	e8 62 9c ff ff       	call   c0001a00 <st_word>
c0007d9e:	89 f8                	mov    eax,edi
c0007da0:	0f b7 d6             	movzx  edx,si
c0007da3:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0007da6:	8d 45 0e             	lea    eax,[ebp+0xe]
c0007da9:	e8 52 9c ff ff       	call   c0001a00 <st_word>
c0007dae:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c0007db2:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007db7:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c0007dba:	75 08                	jne    c0007dc4 <f_mkfs+0xd26>
c0007dbc:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007dc4:	8d 45 11             	lea    eax,[ebp+0x11]
c0007dc7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0007dcb:	e8 30 9c ff ff       	call   c0001a00 <st_word>
c0007dd0:	b8 ff ff 00 00       	mov    eax,0xffff
c0007dd5:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007dd9:	39 d0                	cmp    eax,edx
c0007ddb:	b8 00 00 00 00       	mov    eax,0x0
c0007de0:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c0007de4:	72 0a                	jb     c0007df0 <f_mkfs+0xd52>
c0007de6:	8d 45 13             	lea    eax,[ebp+0x13]
c0007de9:	e8 12 9c ff ff       	call   c0001a00 <st_word>
c0007dee:	eb 08                	jmp    c0007df8 <f_mkfs+0xd5a>
c0007df0:	8d 45 20             	lea    eax,[ebp+0x20]
c0007df3:	e8 0c 9c ff ff       	call   c0001a04 <st_dword>
c0007df8:	8d 45 18             	lea    eax,[ebp+0x18]
c0007dfb:	ba 3f 00 00 00       	mov    edx,0x3f
c0007e00:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c0007e04:	e8 f7 9b ff ff       	call   c0001a00 <st_word>
c0007e09:	8d 45 1a             	lea    eax,[ebp+0x1a]
c0007e0c:	ba ff 00 00 00       	mov    edx,0xff
c0007e11:	e8 ea 9b ff ff       	call   c0001a00 <st_word>
c0007e16:	8d 45 1c             	lea    eax,[ebp+0x1c]
c0007e19:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007e1d:	e8 e2 9b ff ff       	call   c0001a04 <st_dword>
c0007e22:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e27:	75 57                	jne    c0007e80 <f_mkfs+0xde2>
c0007e29:	8d 45 43             	lea    eax,[ebp+0x43]
c0007e2c:	ba 00 00 21 50       	mov    edx,0x50210000
c0007e31:	e8 ce 9b ff ff       	call   c0001a04 <st_dword>
c0007e36:	8d 45 24             	lea    eax,[ebp+0x24]
c0007e39:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007e3d:	e8 c2 9b ff ff       	call   c0001a04 <st_dword>
c0007e42:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0007e45:	ba 02 00 00 00       	mov    edx,0x2
c0007e4a:	e8 b5 9b ff ff       	call   c0001a04 <st_dword>
c0007e4f:	8d 45 30             	lea    eax,[ebp+0x30]
c0007e52:	ba 01 00 00 00       	mov    edx,0x1
c0007e57:	e8 a4 9b ff ff       	call   c0001a00 <st_word>
c0007e5c:	8d 45 32             	lea    eax,[ebp+0x32]
c0007e5f:	ba 06 00 00 00       	mov    edx,0x6
c0007e64:	e8 97 9b ff ff       	call   c0001a00 <st_word>
c0007e69:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0007e6d:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0007e71:	8d 45 47             	lea    eax,[ebp+0x47]
c0007e74:	b9 13 00 00 00       	mov    ecx,0x13
c0007e79:	ba ee f3 01 c0       	mov    edx,0xc001f3ee
c0007e7e:	eb 2f                	jmp    c0007eaf <f_mkfs+0xe11>
c0007e80:	8d 45 27             	lea    eax,[ebp+0x27]
c0007e83:	ba 00 00 21 50       	mov    edx,0x50210000
c0007e88:	e8 77 9b ff ff       	call   c0001a04 <st_dword>
c0007e8d:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0007e92:	8d 45 16             	lea    eax,[ebp+0x16]
c0007e95:	e8 66 9b ff ff       	call   c0001a00 <st_word>
c0007e9a:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0007e9e:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0007ea2:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0007ea5:	b9 13 00 00 00       	mov    ecx,0x13
c0007eaa:	ba 02 f4 01 c0       	mov    edx,0xc001f402
c0007eaf:	e8 59 9b ff ff       	call   c0001a0d <mem_cpy>
c0007eb4:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c0007eba:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007ebf:	89 f0                	mov    eax,esi
c0007ec1:	e8 3a 9b ff ff       	call   c0001a00 <st_word>
c0007ec6:	83 ec 0c             	sub    esp,0xc
c0007ec9:	6a 01                	push   0x1
c0007ecb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007ecf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007ed3:	55                   	push   ebp
c0007ed4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ed8:	e8 7c 9a ff ff       	call   c0001959 <disk_write>
c0007edd:	83 c4 20             	add    esp,0x20
c0007ee0:	85 c0                	test   eax,eax
c0007ee2:	0f 85 67 02 00 00    	jne    c000814f <f_mkfs+0x10b1>
c0007ee8:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007eed:	0f 85 b7 00 00 00    	jne    c0007faa <f_mkfs+0xf0c>
c0007ef3:	83 ec 0c             	sub    esp,0xc
c0007ef6:	6a 01                	push   0x1
c0007ef8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007efc:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007f00:	83 c0 06             	add    eax,0x6
c0007f03:	83 d2 00             	adc    edx,0x0
c0007f06:	52                   	push   edx
c0007f07:	50                   	push   eax
c0007f08:	55                   	push   ebp
c0007f09:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007f0d:	e8 47 9a ff ff       	call   c0001959 <disk_write>
c0007f12:	83 c4 20             	add    esp,0x20
c0007f15:	b9 00 02 00 00       	mov    ecx,0x200
c0007f1a:	31 d2                	xor    edx,edx
c0007f1c:	89 e8                	mov    eax,ebp
c0007f1e:	e8 ff 9a ff ff       	call   c0001a22 <mem_set>
c0007f23:	ba 52 52 61 41       	mov    edx,0x41615252
c0007f28:	89 e8                	mov    eax,ebp
c0007f2a:	e8 d5 9a ff ff       	call   c0001a04 <st_dword>
c0007f2f:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0007f35:	ba 72 72 41 61       	mov    edx,0x61417272
c0007f3a:	e8 c5 9a ff ff       	call   c0001a04 <st_dword>
c0007f3f:	8d 53 ff             	lea    edx,[ebx-0x1]
c0007f42:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c0007f48:	e8 b7 9a ff ff       	call   c0001a04 <st_dword>
c0007f4d:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0007f53:	ba 02 00 00 00       	mov    edx,0x2
c0007f58:	e8 a7 9a ff ff       	call   c0001a04 <st_dword>
c0007f5d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007f62:	89 f0                	mov    eax,esi
c0007f64:	e8 97 9a ff ff       	call   c0001a00 <st_word>
c0007f69:	83 ec 0c             	sub    esp,0xc
c0007f6c:	6a 01                	push   0x1
c0007f6e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007f72:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007f76:	83 c0 07             	add    eax,0x7
c0007f79:	83 d2 00             	adc    edx,0x0
c0007f7c:	52                   	push   edx
c0007f7d:	50                   	push   eax
c0007f7e:	55                   	push   ebp
c0007f7f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007f83:	e8 d1 99 ff ff       	call   c0001959 <disk_write>
c0007f88:	83 c4 14             	add    esp,0x14
c0007f8b:	6a 01                	push   0x1
c0007f8d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007f91:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007f95:	83 c0 01             	add    eax,0x1
c0007f98:	83 d2 00             	adc    edx,0x0
c0007f9b:	52                   	push   edx
c0007f9c:	50                   	push   eax
c0007f9d:	55                   	push   ebp
c0007f9e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007fa2:	e8 b2 99 ff ff       	call   c0001959 <disk_write>
c0007fa7:	83 c4 20             	add    esp,0x20
c0007faa:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c0007fb1:	31 d2                	xor    edx,edx
c0007fb3:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0007fb9:	31 db                	xor    ebx,ebx
c0007fbb:	89 e8                	mov    eax,ebp
c0007fbd:	e8 60 9a ff ff       	call   c0001a22 <mem_set>
c0007fc2:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c0007fc7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007fce:	0f 94 c3             	sete   bl
c0007fd1:	4b                   	dec    ebx
c0007fd2:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c0007fd8:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c0007fde:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007fe3:	75 21                	jne    c0008006 <f_mkfs+0xf68>
c0007fe5:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007fea:	89 e8                	mov    eax,ebp
c0007fec:	e8 13 9a ff ff       	call   c0001a04 <st_dword>
c0007ff1:	8d 45 04             	lea    eax,[ebp+0x4]
c0007ff4:	83 ca ff             	or     edx,0xffffffff
c0007ff7:	e8 08 9a ff ff       	call   c0001a04 <st_dword>
c0007ffc:	8d 45 08             	lea    eax,[ebp+0x8]
c0007fff:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0008004:	eb 04                	jmp    c000800a <f_mkfs+0xf6c>
c0008006:	89 da                	mov    edx,ebx
c0008008:	89 e8                	mov    eax,ebp
c000800a:	e8 f5 99 ff ff       	call   c0001a04 <st_dword>
c000800f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0008013:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008017:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000801b:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000801f:	39 ce                	cmp    esi,ecx
c0008021:	76 02                	jbe    c0008025 <f_mkfs+0xf87>
c0008023:	89 ce                	mov    esi,ecx
c0008025:	83 ec 0c             	sub    esp,0xc
c0008028:	56                   	push   esi
c0008029:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000802d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008031:	55                   	push   ebp
c0008032:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008036:	e8 1e 99 ff ff       	call   c0001959 <disk_write>
c000803b:	83 c4 20             	add    esp,0x20
c000803e:	85 c0                	test   eax,eax
c0008040:	0f 85 09 01 00 00    	jne    c000814f <f_mkfs+0x10b1>
c0008046:	31 d2                	xor    edx,edx
c0008048:	b9 00 02 00 00       	mov    ecx,0x200
c000804d:	89 e8                	mov    eax,ebp
c000804f:	e8 ce 99 ff ff       	call   c0001a22 <mem_set>
c0008054:	31 d2                	xor    edx,edx
c0008056:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c000805a:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c000805e:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0008062:	75 b3                	jne    c0008017 <f_mkfs+0xf79>
c0008064:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008067:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000806e:	40                   	inc    eax
c000806f:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c0008073:	0f 87 65 ff ff ff    	ja     c0007fde <f_mkfs+0xf40>
c0008079:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000807e:	74 04                	je     c0008084 <f_mkfs+0xfe6>
c0008080:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008084:	89 fb                	mov    ebx,edi
c0008086:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c000808a:	76 04                	jbe    c0008090 <f_mkfs+0xff2>
c000808c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008090:	83 ec 0c             	sub    esp,0xc
c0008093:	53                   	push   ebx
c0008094:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008098:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000809c:	55                   	push   ebp
c000809d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00080a1:	e8 b3 98 ff ff       	call   c0001959 <disk_write>
c00080a6:	83 c4 20             	add    esp,0x20
c00080a9:	85 c0                	test   eax,eax
c00080ab:	0f 85 9e 00 00 00    	jne    c000814f <f_mkfs+0x10b1>
c00080b1:	31 d2                	xor    edx,edx
c00080b3:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c00080b7:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00080bb:	29 df                	sub    edi,ebx
c00080bd:	75 c5                	jne    c0008084 <f_mkfs+0xfe6>
c00080bf:	b1 0c                	mov    cl,0xc
c00080c1:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080c6:	74 1d                	je     c00080e5 <f_mkfs+0x1047>
c00080c8:	b8 ff ff 00 00       	mov    eax,0xffff
c00080cd:	b1 06                	mov    cl,0x6
c00080cf:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c00080d3:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c00080d7:	72 0c                	jb     c00080e5 <f_mkfs+0x1047>
c00080d9:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00080de:	0f 94 c1             	sete   cl
c00080e1:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00080e5:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00080ea:	75 4c                	jne    c0008138 <f_mkfs+0x109a>
c00080ec:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00080f0:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00080f4:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00080fb:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0008102:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c000810d:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c0008118:	0f b6 c9             	movzx  ecx,cl
c000811b:	83 ec 0c             	sub    esp,0xc
c000811e:	55                   	push   ebp
c000811f:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c0008126:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000812a:	e8 2f c2 ff ff       	call   c000435e <create_partition>
c000812f:	83 c4 10             	add    esp,0x10
c0008132:	89 c3                	mov    ebx,eax
c0008134:	85 c0                	test   eax,eax
c0008136:	75 34                	jne    c000816c <f_mkfs+0x10ce>
c0008138:	31 db                	xor    ebx,ebx
c000813a:	50                   	push   eax
c000813b:	6a 00                	push   0x0
c000813d:	6a 00                	push   0x0
c000813f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008143:	e8 27 98 ff ff       	call   c000196f <disk_ioctl>
c0008148:	83 c4 10             	add    esp,0x10
c000814b:	85 c0                	test   eax,eax
c000814d:	74 1d                	je     c000816c <f_mkfs+0x10ce>
c000814f:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008157:	75 0c                	jne    c0008165 <f_mkfs+0x10c7>
c0008159:	83 ec 0c             	sub    esp,0xc
c000815c:	55                   	push   ebp
c000815d:	e8 75 00 00 00       	call   c00081d7 <ff_memfree>
c0008162:	83 c4 10             	add    esp,0x10
c0008165:	bb 01 00 00 00       	mov    ebx,0x1
c000816a:	eb 48                	jmp    c00081b4 <f_mkfs+0x1116>
c000816c:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008174:	75 3e                	jne    c00081b4 <f_mkfs+0x1116>
c0008176:	83 ec 0c             	sub    esp,0xc
c0008179:	55                   	push   ebp
c000817a:	e8 58 00 00 00       	call   c00081d7 <ff_memfree>
c000817f:	83 c4 10             	add    esp,0x10
c0008182:	eb 30                	jmp    c00081b4 <f_mkfs+0x1116>
c0008184:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008189:	0f 85 eb fa ff ff    	jne    c0007c7a <f_mkfs+0xbdc>
c000818f:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008193:	81 ff 80 00 00 00    	cmp    edi,0x80
c0008199:	0f 86 b8 f9 ff ff    	jbe    c0007b57 <f_mkfs+0xab9>
c000819f:	e9 bf fb ff ff       	jmp    c0007d63 <f_mkfs+0xcc5>
c00081a4:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c00081a9:	0f 85 c0 fa ff ff    	jne    c0007c6f <f_mkfs+0xbd1>
c00081af:	e9 af fb ff ff       	jmp    c0007d63 <f_mkfs+0xcc5>
c00081b4:	81 c4 9c 00 00 00    	add    esp,0x9c
c00081ba:	89 d8                	mov    eax,ebx
c00081bc:	5b                   	pop    ebx
c00081bd:	5e                   	pop    esi
c00081be:	5f                   	pop    edi
c00081bf:	5d                   	pop    ebp
c00081c0:	c3                   	ret    

c00081c1 <ff_memalloc>:
c00081c1:	83 ec 0c             	sub    esp,0xc
c00081c4:	83 ec 0c             	sub    esp,0xc
c00081c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00081cb:	e8 f3 4e 00 00       	call   c000d0c3 <malloc>
c00081d0:	83 c4 10             	add    esp,0x10
c00081d3:	83 c4 0c             	add    esp,0xc
c00081d6:	c3                   	ret    

c00081d7 <ff_memfree>:
c00081d7:	83 ec 0c             	sub    esp,0xc
c00081da:	83 ec 0c             	sub    esp,0xc
c00081dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00081e1:	e8 ed 4e 00 00       	call   c000d0d3 <free>
c00081e6:	83 c4 10             	add    esp,0x10
c00081e9:	90                   	nop
c00081ea:	83 c4 0c             	add    esp,0xc
c00081ed:	c3                   	ret    

c00081ee <ff_uni2oem>:
c00081ee:	83 ec 14             	sub    esp,0x14
c00081f1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00081f5:	66 89 04 24          	mov    WORD PTR [esp],ax
c00081f9:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008200:	c7 44 24 0c 20 f7 01 c0 	mov    DWORD PTR [esp+0xc],0xc001f720
c0008208:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c000820d:	77 0b                	ja     c000821a <ff_uni2oem+0x2c>
c000820f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008213:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008218:	eb 5b                	jmp    c0008275 <ff_uni2oem+0x87>
c000821a:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0008222:	77 51                	ja     c0008275 <ff_uni2oem+0x87>
c0008224:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c000822a:	75 49                	jne    c0008275 <ff_uni2oem+0x87>
c000822c:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008233:	eb 0b                	jmp    c0008240 <ff_uni2oem+0x52>
c0008235:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000823a:	40                   	inc    eax
c000823b:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008240:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0008246:	77 1b                	ja     c0008263 <ff_uni2oem+0x75>
c0008248:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c000824d:	01 c0                	add    eax,eax
c000824f:	89 c2                	mov    edx,eax
c0008251:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008255:	01 d0                	add    eax,edx
c0008257:	66 8b 00             	mov    ax,WORD PTR [eax]
c000825a:	0f b7 c0             	movzx  eax,ax
c000825d:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008261:	75 d2                	jne    c0008235 <ff_uni2oem+0x47>
c0008263:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008268:	83 e8 80             	sub    eax,0xffffff80
c000826b:	25 ff 00 00 00       	and    eax,0xff
c0008270:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008275:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000827a:	83 c4 14             	add    esp,0x14
c000827d:	c3                   	ret    

c000827e <ff_oem2uni>:
c000827e:	83 ec 18             	sub    esp,0x18
c0008281:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008285:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008289:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c000828e:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008292:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0008299:	c7 44 24 10 20 f7 01 c0 	mov    DWORD PTR [esp+0x10],0xc001f720
c00082a1:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c00082a7:	77 0b                	ja     c00082b4 <ff_oem2uni+0x36>
c00082a9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00082ad:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00082b2:	eb 2d                	jmp    c00082e1 <ff_oem2uni+0x63>
c00082b4:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00082ba:	75 25                	jne    c00082e1 <ff_oem2uni+0x63>
c00082bc:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c00082c3:	77 1c                	ja     c00082e1 <ff_oem2uni+0x63>
c00082c5:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00082ca:	05 80 ff ff 7f       	add    eax,0x7fffff80
c00082cf:	01 c0                	add    eax,eax
c00082d1:	89 c2                	mov    edx,eax
c00082d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00082d7:	01 d0                	add    eax,edx
c00082d9:	66 8b 00             	mov    ax,WORD PTR [eax]
c00082dc:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00082e1:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00082e6:	83 c4 18             	add    esp,0x18
c00082e9:	c3                   	ret    

c00082ea <ff_wtoupper>:
c00082ea:	83 ec 10             	sub    esp,0x10
c00082ed:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00082f5:	0f 87 3e 01 00 00    	ja     c0008439 <ff_wtoupper+0x14f>
c00082fb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00082ff:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008304:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c000830b:	77 07                	ja     c0008314 <ff_wtoupper+0x2a>
c000830d:	b8 20 f5 01 c0       	mov    eax,0xc001f520
c0008312:	eb 05                	jmp    c0008319 <ff_wtoupper+0x2f>
c0008314:	b8 60 f4 01 c0       	mov    eax,0xc001f460
c0008319:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000831d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008321:	8d 50 02             	lea    edx,[eax+0x2]
c0008324:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008328:	66 8b 00             	mov    ax,WORD PTR [eax]
c000832b:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0008330:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0008336:	0f 84 f4 00 00 00    	je     c0008430 <ff_wtoupper+0x146>
c000833c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008341:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008346:	0f 82 e4 00 00 00    	jb     c0008430 <ff_wtoupper+0x146>
c000834c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008350:	8d 50 02             	lea    edx,[eax+0x2]
c0008353:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008357:	66 8b 00             	mov    ax,WORD PTR [eax]
c000835a:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000835f:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0008364:	66 c1 e8 08          	shr    ax,0x8
c0008368:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c000836d:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0008374:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008379:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c000837e:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0008383:	01 ca                	add    edx,ecx
c0008385:	39 d0                	cmp    eax,edx
c0008387:	0f 8d 86 00 00 00    	jge    c0008413 <ff_wtoupper+0x129>
c000838d:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008392:	83 f8 08             	cmp    eax,0x8
c0008395:	0f 87 94 00 00 00    	ja     c000842f <ff_wtoupper+0x145>
c000839b:	8b 04 85 20 f4 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe0be0]
c00083a2:	ff e0                	jmp    eax
c00083a4:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c00083a9:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c00083ae:	29 c2                	sub    edx,eax
c00083b0:	89 d0                	mov    eax,edx
c00083b2:	01 c0                	add    eax,eax
c00083b4:	89 c2                	mov    edx,eax
c00083b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083ba:	01 d0                	add    eax,edx
c00083bc:	66 8b 00             	mov    ax,WORD PTR [eax]
c00083bf:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00083c4:	eb 4b                	jmp    c0008411 <ff_wtoupper+0x127>
c00083c6:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00083cb:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00083cf:	83 e0 01             	and    eax,0x1
c00083d2:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c00083d7:	eb 38                	jmp    c0008411 <ff_wtoupper+0x127>
c00083d9:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c00083df:	eb 30                	jmp    c0008411 <ff_wtoupper+0x127>
c00083e1:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c00083e7:	eb 28                	jmp    c0008411 <ff_wtoupper+0x127>
c00083e9:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c00083ef:	eb 20                	jmp    c0008411 <ff_wtoupper+0x127>
c00083f1:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c00083f7:	eb 18                	jmp    c0008411 <ff_wtoupper+0x127>
c00083f9:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c00083ff:	eb 10                	jmp    c0008411 <ff_wtoupper+0x127>
c0008401:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c0008407:	eb 08                	jmp    c0008411 <ff_wtoupper+0x127>
c0008409:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c0008410:	90                   	nop
c0008411:	eb 1c                	jmp    c000842f <ff_wtoupper+0x145>
c0008413:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c0008419:	0f 85 fe fe ff ff    	jne    c000831d <ff_wtoupper+0x33>
c000841f:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0008424:	01 c0                	add    eax,eax
c0008426:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c000842a:	e9 ee fe ff ff       	jmp    c000831d <ff_wtoupper+0x33>
c000842f:	90                   	nop
c0008430:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008435:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008439:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000843d:	83 c4 10             	add    esp,0x10
c0008440:	c3                   	ret    

c0008441 <is_bad_src_ratio>:
c0008441:	83 ec 0c             	sub    esp,0xc
c0008444:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008448:	89 04 24             	mov    DWORD PTR [esp],eax
c000844b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000844f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008453:	dd 04 24             	fld    QWORD PTR [esp]
c0008456:	dd 05 e0 fc 01 c0    	fld    QWORD PTR ds:0xc001fce0
c000845c:	de d9                	fcompp 
c000845e:	df e0                	fnstsw ax
c0008460:	f6 c4 45             	test   ah,0x45
c0008463:	74 10                	je     c0008475 <is_bad_src_ratio+0x34>
c0008465:	dd 04 24             	fld    QWORD PTR [esp]
c0008468:	dc 1d e8 fc 01 c0    	fcomp  QWORD PTR ds:0xc001fce8
c000846e:	df e0                	fnstsw ax
c0008470:	f6 c4 45             	test   ah,0x45
c0008473:	75 07                	jne    c000847c <is_bad_src_ratio+0x3b>
c0008475:	b8 01 00 00 00       	mov    eax,0x1
c000847a:	eb 05                	jmp    c0008481 <is_bad_src_ratio+0x40>
c000847c:	b8 00 00 00 00       	mov    eax,0x0
c0008481:	83 c4 0c             	add    esp,0xc
c0008484:	c3                   	ret    

c0008485 <psrc_set_converter>:
c0008485:	56                   	push   esi
c0008486:	89 d6                	mov    esi,edx
c0008488:	53                   	push   ebx
c0008489:	89 c3                	mov    ebx,eax
c000848b:	83 ec 0c             	sub    esp,0xc
c000848e:	52                   	push   edx
c000848f:	50                   	push   eax
c0008490:	e8 33 24 00 00       	call   c000a8c8 <sinc_set_converter>
c0008495:	83 c4 10             	add    esp,0x10
c0008498:	85 c0                	test   eax,eax
c000849a:	74 25                	je     c00084c1 <psrc_set_converter+0x3c>
c000849c:	50                   	push   eax
c000849d:	50                   	push   eax
c000849e:	56                   	push   esi
c000849f:	53                   	push   ebx
c00084a0:	e8 32 28 00 00       	call   c000acd7 <zoh_set_converter>
c00084a5:	83 c4 10             	add    esp,0x10
c00084a8:	85 c0                	test   eax,eax
c00084aa:	74 15                	je     c00084c1 <psrc_set_converter+0x3c>
c00084ac:	51                   	push   ecx
c00084ad:	51                   	push   ecx
c00084ae:	56                   	push   esi
c00084af:	53                   	push   ebx
c00084b0:	e8 10 0a 00 00       	call   c0008ec5 <linear_set_converter>
c00084b5:	83 c4 10             	add    esp,0x10
c00084b8:	ba 0a 00 00 00       	mov    edx,0xa
c00084bd:	85 c0                	test   eax,eax
c00084bf:	75 02                	jne    c00084c3 <psrc_set_converter+0x3e>
c00084c1:	31 d2                	xor    edx,edx
c00084c3:	89 d0                	mov    eax,edx
c00084c5:	5a                   	pop    edx
c00084c6:	5b                   	pop    ebx
c00084c7:	5e                   	pop    esi
c00084c8:	c3                   	ret    

c00084c9 <src_delete>:
c00084c9:	53                   	push   ebx
c00084ca:	83 ec 08             	sub    esp,0x8
c00084cd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00084d1:	85 db                	test   ebx,ebx
c00084d3:	74 29                	je     c00084fe <src_delete+0x35>
c00084d5:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00084d8:	85 c0                	test   eax,eax
c00084da:	74 0c                	je     c00084e8 <src_delete+0x1f>
c00084dc:	83 ec 0c             	sub    esp,0xc
c00084df:	50                   	push   eax
c00084e0:	e8 ee 4b 00 00       	call   c000d0d3 <free>
c00084e5:	83 c4 10             	add    esp,0x10
c00084e8:	50                   	push   eax
c00084e9:	6a 3c                	push   0x3c
c00084eb:	6a 00                	push   0x0
c00084ed:	53                   	push   ebx
c00084ee:	e8 15 81 ff ff       	call   c0000608 <memset>
c00084f3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00084f6:	e8 d8 4b 00 00       	call   c000d0d3 <free>
c00084fb:	83 c4 10             	add    esp,0x10
c00084fe:	31 c0                	xor    eax,eax
c0008500:	83 c4 08             	add    esp,0x8
c0008503:	5b                   	pop    ebx
c0008504:	c3                   	ret    

c0008505 <src_process>:
c0008505:	56                   	push   esi
c0008506:	53                   	push   ebx
c0008507:	53                   	push   ebx
c0008508:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000850c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0008510:	85 f6                	test   esi,esi
c0008512:	0f 84 e2 00 00 00    	je     c00085fa <src_process+0xf5>
c0008518:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c000851c:	0f 84 df 00 00 00    	je     c0008601 <src_process+0xfc>
c0008522:	83 7e 24 00          	cmp    DWORD PTR [esi+0x24],0x0
c0008526:	0f 84 d5 00 00 00    	je     c0008601 <src_process+0xfc>
c000852c:	81 7e 18 2b 02 00 00 	cmp    DWORD PTR [esi+0x18],0x22b
c0008533:	0f 85 cf 00 00 00    	jne    c0008608 <src_process+0x103>
c0008539:	85 db                	test   ebx,ebx
c000853b:	0f 84 ce 00 00 00    	je     c000860f <src_process+0x10a>
c0008541:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0008544:	0f 84 cc 00 00 00    	je     c0008616 <src_process+0x111>
c000854a:	83 7b 04 00          	cmp    DWORD PTR [ebx+0x4],0x0
c000854e:	0f 84 c2 00 00 00    	je     c0008616 <src_process+0x111>
c0008554:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0008557:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000855a:	e8 e2 fe ff ff       	call   c0008441 <is_bad_src_ratio>
c000855f:	5a                   	pop    edx
c0008560:	85 c0                	test   eax,eax
c0008562:	59                   	pop    ecx
c0008563:	0f 85 b4 00 00 00    	jne    c000861d <src_process+0x118>
c0008569:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000856d:	79 07                	jns    c0008576 <src_process+0x71>
c000856f:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008576:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c000857a:	79 07                	jns    c0008583 <src_process+0x7e>
c000857c:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008583:	8b 13                	mov    edx,DWORD PTR [ebx]
c0008585:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c0008588:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000858b:	39 ca                	cmp    edx,ecx
c000858d:	73 0b                	jae    c000859a <src_process+0x95>
c000858f:	0f af 43 08          	imul   eax,DWORD PTR [ebx+0x8]
c0008593:	8d 04 82             	lea    eax,[edx+eax*4]
c0008596:	39 c1                	cmp    ecx,eax
c0008598:	eb 09                	jmp    c00085a3 <src_process+0x9e>
c000859a:	0f af 43 0c          	imul   eax,DWORD PTR [ebx+0xc]
c000859e:	8d 04 81             	lea    eax,[ecx+eax*4]
c00085a1:	39 c2                	cmp    edx,eax
c00085a3:	72 7f                	jb     c0008624 <src_process+0x11f>
c00085a5:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00085ac:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00085b3:	d9 05 00 fd 01 c0    	fld    DWORD PTR ds:0xc001fd00
c00085b9:	dc 1e                	fcomp  QWORD PTR [esi]
c00085bb:	df e0                	fnstsw ax
c00085bd:	9e                   	sahf   
c00085be:	76 05                	jbe    c00085c5 <src_process+0xc0>
c00085c0:	dd 43 1c             	fld    QWORD PTR [ebx+0x1c]
c00085c3:	dd 1e                	fstp   QWORD PTR [esi]
c00085c5:	83 ec 10             	sub    esp,0x10
c00085c8:	dd 06                	fld    QWORD PTR [esi]
c00085ca:	dc 63 1c             	fsub   QWORD PTR [ebx+0x1c]
c00085cd:	dd 1c 24             	fstp   QWORD PTR [esp]
c00085d0:	e8 6b 5f 01 00       	call   c001e540 <fabs>
c00085d5:	83 c4 10             	add    esp,0x10
c00085d8:	dd 05 f0 fc 01 c0    	fld    QWORD PTR ds:0xc001fcf0
c00085de:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00085e2:	de d9                	fcompp 
c00085e4:	df e0                	fnstsw ax
c00085e6:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00085ea:	9e                   	sahf   
c00085eb:	76 05                	jbe    c00085f2 <src_process+0xed>
c00085ed:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c00085f0:	eb 03                	jmp    c00085f5 <src_process+0xf0>
c00085f2:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00085f5:	59                   	pop    ecx
c00085f6:	5b                   	pop    ebx
c00085f7:	5e                   	pop    esi
c00085f8:	ff e0                	jmp    eax
c00085fa:	b8 02 00 00 00       	mov    eax,0x2
c00085ff:	eb 28                	jmp    c0008629 <src_process+0x124>
c0008601:	b8 07 00 00 00       	mov    eax,0x7
c0008606:	eb 21                	jmp    c0008629 <src_process+0x124>
c0008608:	b8 12 00 00 00       	mov    eax,0x12
c000860d:	eb 1a                	jmp    c0008629 <src_process+0x124>
c000860f:	b8 03 00 00 00       	mov    eax,0x3
c0008614:	eb 13                	jmp    c0008629 <src_process+0x124>
c0008616:	b8 04 00 00 00       	mov    eax,0x4
c000861b:	eb 0c                	jmp    c0008629 <src_process+0x124>
c000861d:	b8 06 00 00 00       	mov    eax,0x6
c0008622:	eb 05                	jmp    c0008629 <src_process+0x124>
c0008624:	b8 10 00 00 00       	mov    eax,0x10
c0008629:	5a                   	pop    edx
c000862a:	5b                   	pop    ebx
c000862b:	5e                   	pop    esi
c000862c:	c3                   	ret    

c000862d <src_callback_read>:
c000862d:	55                   	push   ebp
c000862e:	57                   	push   edi
c000862f:	56                   	push   esi
c0008630:	53                   	push   ebx
c0008631:	83 ec 4c             	sub    esp,0x4c
c0008634:	dd 44 24 64          	fld    QWORD PTR [esp+0x64]
c0008638:	8b 7c 24 6c          	mov    edi,DWORD PTR [esp+0x6c]
c000863c:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c0008640:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0008644:	85 ff                	test   edi,edi
c0008646:	0f 8e 36 01 00 00    	jle    c0008782 <src_callback_read+0x155>
c000864c:	85 db                	test   ebx,ebx
c000864e:	0f 84 2e 01 00 00    	je     c0008782 <src_callback_read+0x155>
c0008654:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c000865b:	74 0c                	je     c0008669 <src_callback_read+0x3c>
c000865d:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008664:	e9 19 01 00 00       	jmp    c0008782 <src_callback_read+0x155>
c0008669:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c000866d:	75 0c                	jne    c000867b <src_callback_read+0x4e>
c000866f:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008676:	e9 07 01 00 00       	jmp    c0008782 <src_callback_read+0x155>
c000867b:	51                   	push   ecx
c000867c:	6a 24                	push   0x24
c000867e:	6a 00                	push   0x0
c0008680:	8d 44 24 28          	lea    eax,[esp+0x28]
c0008684:	50                   	push   eax
c0008685:	e8 7e 7f ff ff       	call   c0000608 <memset>
c000868a:	5e                   	pop    esi
c000868b:	5d                   	pop    ebp
c000868c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008690:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008694:	e8 a8 fd ff ff       	call   c0008441 <is_bad_src_ratio>
c0008699:	83 c4 10             	add    esp,0x10
c000869c:	85 c0                	test   eax,eax
c000869e:	74 0c                	je     c00086ac <src_callback_read+0x7f>
c00086a0:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c00086a7:	e9 d6 00 00 00       	jmp    c0008782 <src_callback_read+0x155>
c00086ac:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00086b0:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c00086b4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00086b8:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00086bc:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00086bf:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c00086c3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00086c7:	31 f6                	xor    esi,esi
c00086c9:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00086cc:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00086d0:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00086d5:	75 30                	jne    c0008707 <src_callback_read+0xda>
c00086d7:	8d 44 24 14          	lea    eax,[esp+0x14]
c00086db:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00086df:	52                   	push   edx
c00086e0:	52                   	push   edx
c00086e1:	8d 44 24 20          	lea    eax,[esp+0x20]
c00086e5:	50                   	push   eax
c00086e6:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00086e9:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c00086ec:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00086f0:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00086f4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00086f8:	83 c4 10             	add    esp,0x10
c00086fb:	85 c0                	test   eax,eax
c00086fd:	75 08                	jne    c0008707 <src_callback_read+0xda>
c00086ff:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0008707:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c000870e:	50                   	push   eax
c000870f:	50                   	push   eax
c0008710:	8d 44 24 24          	lea    eax,[esp+0x24]
c0008714:	50                   	push   eax
c0008715:	53                   	push   ebx
c0008716:	e8 ea fd ff ff       	call   c0008505 <src_process>
c000871b:	83 c4 10             	add    esp,0x10
c000871e:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008725:	85 c0                	test   eax,eax
c0008727:	75 42                	jne    c000876b <src_callback_read+0x13e>
c0008729:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c000872d:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008730:	89 e9                	mov    ecx,ebp
c0008732:	29 6c 24 24          	sub    DWORD PTR [esp+0x24],ebp
c0008736:	0f af ca             	imul   ecx,edx
c0008739:	c1 e1 02             	shl    ecx,0x2
c000873c:	01 4c 24 1c          	add    DWORD PTR [esp+0x1c],ecx
c0008740:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0008744:	0f af d1             	imul   edx,ecx
c0008747:	29 4c 24 28          	sub    DWORD PTR [esp+0x28],ecx
c000874b:	c1 e2 02             	shl    edx,0x2
c000874e:	01 54 24 20          	add    DWORD PTR [esp+0x20],edx
c0008752:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008755:	83 7c 24 34 01       	cmp    DWORD PTR [esp+0x34],0x1
c000875a:	75 04                	jne    c0008760 <src_callback_read+0x133>
c000875c:	85 c9                	test   ecx,ecx
c000875e:	74 0b                	je     c000876b <src_callback_read+0x13e>
c0008760:	39 d7                	cmp    edi,edx
c0008762:	7e 09                	jle    c000876d <src_callback_read+0x140>
c0008764:	89 d6                	mov    esi,edx
c0008766:	e9 65 ff ff ff       	jmp    c00086d0 <src_callback_read+0xa3>
c000876b:	89 f2                	mov    edx,esi
c000876d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0008771:	85 c0                	test   eax,eax
c0008773:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008776:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000877a:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c000877d:	74 05                	je     c0008784 <src_callback_read+0x157>
c000877f:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008782:	31 d2                	xor    edx,edx
c0008784:	83 c4 4c             	add    esp,0x4c
c0008787:	89 d0                	mov    eax,edx
c0008789:	5b                   	pop    ebx
c000878a:	5e                   	pop    esi
c000878b:	5f                   	pop    edi
c000878c:	5d                   	pop    ebp
c000878d:	c3                   	ret    

c000878e <src_set_ratio>:
c000878e:	53                   	push   ebx
c000878f:	b8 02 00 00 00       	mov    eax,0x2
c0008794:	83 ec 08             	sub    esp,0x8
c0008797:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000879b:	dd 44 24 14          	fld    QWORD PTR [esp+0x14]
c000879f:	85 db                	test   ebx,ebx
c00087a1:	74 33                	je     c00087d6 <src_set_ratio+0x48>
c00087a3:	b8 07 00 00 00       	mov    eax,0x7
c00087a8:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c00087ac:	74 2c                	je     c00087da <src_set_ratio+0x4c>
c00087ae:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c00087b2:	74 2a                	je     c00087de <src_set_ratio+0x50>
c00087b4:	50                   	push   eax
c00087b5:	50                   	push   eax
c00087b6:	dd 14 24             	fst    QWORD PTR [esp]
c00087b9:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c00087bd:	e8 7f fc ff ff       	call   c0008441 <is_bad_src_ratio>
c00087c2:	5a                   	pop    edx
c00087c3:	85 c0                	test   eax,eax
c00087c5:	59                   	pop    ecx
c00087c6:	75 07                	jne    c00087cf <src_set_ratio+0x41>
c00087c8:	dd 04 24             	fld    QWORD PTR [esp]
c00087cb:	dd 1b                	fstp   QWORD PTR [ebx]
c00087cd:	eb 11                	jmp    c00087e0 <src_set_ratio+0x52>
c00087cf:	b8 06 00 00 00       	mov    eax,0x6
c00087d4:	eb 0a                	jmp    c00087e0 <src_set_ratio+0x52>
c00087d6:	dd d8                	fstp   st(0)
c00087d8:	eb 06                	jmp    c00087e0 <src_set_ratio+0x52>
c00087da:	dd d8                	fstp   st(0)
c00087dc:	eb 02                	jmp    c00087e0 <src_set_ratio+0x52>
c00087de:	dd d8                	fstp   st(0)
c00087e0:	83 c4 08             	add    esp,0x8
c00087e3:	5b                   	pop    ebx
c00087e4:	c3                   	ret    

c00087e5 <src_get_channels>:
c00087e5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00087e9:	b8 02 00 00 00       	mov    eax,0x2
c00087ee:	85 d2                	test   edx,edx
c00087f0:	74 14                	je     c0008806 <src_get_channels+0x21>
c00087f2:	b8 07 00 00 00       	mov    eax,0x7
c00087f7:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c00087fb:	74 09                	je     c0008806 <src_get_channels+0x21>
c00087fd:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008801:	74 03                	je     c0008806 <src_get_channels+0x21>
c0008803:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008806:	c3                   	ret    

c0008807 <src_reset>:
c0008807:	53                   	push   ebx
c0008808:	b8 02 00 00 00       	mov    eax,0x2
c000880d:	83 ec 08             	sub    esp,0x8
c0008810:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008814:	85 db                	test   ebx,ebx
c0008816:	74 2e                	je     c0008846 <src_reset+0x3f>
c0008818:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000881b:	85 c0                	test   eax,eax
c000881d:	74 09                	je     c0008828 <src_reset+0x21>
c000881f:	83 ec 0c             	sub    esp,0xc
c0008822:	53                   	push   ebx
c0008823:	ff d0                	call   eax
c0008825:	83 c4 10             	add    esp,0x10
c0008828:	d9 ee                	fldz   
c000882a:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008831:	dd 53 08             	fst    QWORD PTR [ebx+0x8]
c0008834:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000883b:	dd 1b                	fstp   QWORD PTR [ebx]
c000883d:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008844:	31 c0                	xor    eax,eax
c0008846:	83 c4 08             	add    esp,0x8
c0008849:	5b                   	pop    ebx
c000884a:	c3                   	ret    

c000884b <src_new>:
c000884b:	57                   	push   edi
c000884c:	56                   	push   esi
c000884d:	53                   	push   ebx
c000884e:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008852:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008856:	85 f6                	test   esi,esi
c0008858:	74 73                	je     c00088cd <src_new+0x82>
c000885a:	85 ff                	test   edi,edi
c000885c:	7f 08                	jg     c0008866 <src_new+0x1b>
c000885e:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008864:	eb 1e                	jmp    c0008884 <src_new+0x39>
c0008866:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c000886c:	50                   	push   eax
c000886d:	50                   	push   eax
c000886e:	6a 3c                	push   0x3c
c0008870:	6a 01                	push   0x1
c0008872:	e8 7c 48 00 00       	call   c000d0f3 <calloc>
c0008877:	83 c4 10             	add    esp,0x10
c000887a:	89 c3                	mov    ebx,eax
c000887c:	85 c0                	test   eax,eax
c000887e:	75 10                	jne    c0008890 <src_new+0x45>
c0008880:	85 f6                	test   esi,esi
c0008882:	75 04                	jne    c0008888 <src_new+0x3d>
c0008884:	31 db                	xor    ebx,ebx
c0008886:	eb 4b                	jmp    c00088d3 <src_new+0x88>
c0008888:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c000888e:	eb 43                	jmp    c00088d3 <src_new+0x88>
c0008890:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008893:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c000889a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000889e:	e8 e2 fb ff ff       	call   c0008485 <psrc_set_converter>
c00088a3:	85 c0                	test   eax,eax
c00088a5:	74 18                	je     c00088bf <src_new+0x74>
c00088a7:	85 f6                	test   esi,esi
c00088a9:	74 06                	je     c00088b1 <src_new+0x66>
c00088ab:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c00088b1:	83 ec 0c             	sub    esp,0xc
c00088b4:	53                   	push   ebx
c00088b5:	31 db                	xor    ebx,ebx
c00088b7:	e8 17 48 00 00       	call   c000d0d3 <free>
c00088bc:	83 c4 10             	add    esp,0x10
c00088bf:	83 ec 0c             	sub    esp,0xc
c00088c2:	53                   	push   ebx
c00088c3:	e8 3f ff ff ff       	call   c0008807 <src_reset>
c00088c8:	83 c4 10             	add    esp,0x10
c00088cb:	eb 06                	jmp    c00088d3 <src_new+0x88>
c00088cd:	85 ff                	test   edi,edi
c00088cf:	7f 9b                	jg     c000886c <src_new+0x21>
c00088d1:	eb b1                	jmp    c0008884 <src_new+0x39>
c00088d3:	89 d8                	mov    eax,ebx
c00088d5:	5b                   	pop    ebx
c00088d6:	5e                   	pop    esi
c00088d7:	5f                   	pop    edi
c00088d8:	c3                   	ret    

c00088d9 <src_callback_new>:
c00088d9:	56                   	push   esi
c00088da:	53                   	push   ebx
c00088db:	53                   	push   ebx
c00088dc:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00088e0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00088e4:	85 f6                	test   esi,esi
c00088e6:	75 0e                	jne    c00088f6 <src_callback_new+0x1d>
c00088e8:	31 db                	xor    ebx,ebx
c00088ea:	85 c0                	test   eax,eax
c00088ec:	74 47                	je     c0008935 <src_callback_new+0x5c>
c00088ee:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c00088f4:	eb 3f                	jmp    c0008935 <src_callback_new+0x5c>
c00088f6:	85 c0                	test   eax,eax
c00088f8:	74 06                	je     c0008900 <src_callback_new+0x27>
c00088fa:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008900:	51                   	push   ecx
c0008901:	50                   	push   eax
c0008902:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008906:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000890a:	e8 3c ff ff ff       	call   c000884b <src_new>
c000890f:	83 c4 10             	add    esp,0x10
c0008912:	89 c3                	mov    ebx,eax
c0008914:	85 c0                	test   eax,eax
c0008916:	74 1d                	je     c0008935 <src_callback_new+0x5c>
c0008918:	83 ec 0c             	sub    esp,0xc
c000891b:	50                   	push   eax
c000891c:	e8 e6 fe ff ff       	call   c0008807 <src_reset>
c0008921:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008925:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c000892c:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000892f:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008932:	83 c4 10             	add    esp,0x10
c0008935:	89 d8                	mov    eax,ebx
c0008937:	5a                   	pop    edx
c0008938:	5b                   	pop    ebx
c0008939:	5e                   	pop    esi
c000893a:	c3                   	ret    

c000893b <src_get_name>:
c000893b:	53                   	push   ebx
c000893c:	83 ec 14             	sub    esp,0x14
c000893f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008943:	53                   	push   ebx
c0008944:	e8 59 1f 00 00       	call   c000a8a2 <sinc_get_name>
c0008949:	83 c4 10             	add    esp,0x10
c000894c:	85 c0                	test   eax,eax
c000894e:	75 1d                	jne    c000896d <src_get_name+0x32>
c0008950:	83 ec 0c             	sub    esp,0xc
c0008953:	53                   	push   ebx
c0008954:	e8 60 23 00 00       	call   c000acb9 <zoh_get_name>
c0008959:	83 c4 10             	add    esp,0x10
c000895c:	85 c0                	test   eax,eax
c000895e:	75 0d                	jne    c000896d <src_get_name+0x32>
c0008960:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008964:	83 c4 08             	add    esp,0x8
c0008967:	5b                   	pop    ebx
c0008968:	e9 3a 05 00 00       	jmp    c0008ea7 <linear_get_name>
c000896d:	83 c4 08             	add    esp,0x8
c0008970:	5b                   	pop    ebx
c0008971:	c3                   	ret    

c0008972 <src_get_description>:
c0008972:	53                   	push   ebx
c0008973:	83 ec 14             	sub    esp,0x14
c0008976:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000897a:	53                   	push   ebx
c000897b:	e8 35 1f 00 00       	call   c000a8b5 <sinc_get_description>
c0008980:	83 c4 10             	add    esp,0x10
c0008983:	85 c0                	test   eax,eax
c0008985:	75 1d                	jne    c00089a4 <src_get_description+0x32>
c0008987:	83 ec 0c             	sub    esp,0xc
c000898a:	53                   	push   ebx
c000898b:	e8 38 23 00 00       	call   c000acc8 <zoh_get_description>
c0008990:	83 c4 10             	add    esp,0x10
c0008993:	85 c0                	test   eax,eax
c0008995:	75 0d                	jne    c00089a4 <src_get_description+0x32>
c0008997:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000899b:	83 c4 08             	add    esp,0x8
c000899e:	5b                   	pop    ebx
c000899f:	e9 12 05 00 00       	jmp    c0008eb6 <linear_get_description>
c00089a4:	83 c4 08             	add    esp,0x8
c00089a7:	5b                   	pop    ebx
c00089a8:	c3                   	ret    

c00089a9 <src_get_version>:
c00089a9:	b8 20 f8 01 c0       	mov    eax,0xc001f820
c00089ae:	c3                   	ret    

c00089af <src_is_valid_ratio>:
c00089af:	50                   	push   eax
c00089b0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00089b4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00089b8:	e8 84 fa ff ff       	call   c0008441 <is_bad_src_ratio>
c00089bd:	85 c0                	test   eax,eax
c00089bf:	0f 94 c0             	sete   al
c00089c2:	83 c4 0c             	add    esp,0xc
c00089c5:	0f b6 c0             	movzx  eax,al
c00089c8:	c3                   	ret    

c00089c9 <src_error>:
c00089c9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00089cd:	31 c0                	xor    eax,eax
c00089cf:	85 d2                	test   edx,edx
c00089d1:	74 03                	je     c00089d6 <src_error+0xd>
c00089d3:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c00089d6:	c3                   	ret    

c00089d7 <src_strerror>:
c00089d7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00089db:	31 c0                	xor    eax,eax
c00089dd:	83 fa 17             	cmp    edx,0x17
c00089e0:	77 07                	ja     c00089e9 <src_strerror+0x12>
c00089e2:	8b 04 95 80 fc 01 c0 	mov    eax,DWORD PTR [edx*4-0x3ffe0380]
c00089e9:	c3                   	ret    

c00089ea <src_simple>:
c00089ea:	56                   	push   esi
c00089eb:	53                   	push   ebx
c00089ec:	83 ec 18             	sub    esp,0x18
c00089ef:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00089f3:	8d 44 24 10          	lea    eax,[esp+0x10]
c00089f7:	50                   	push   eax
c00089f8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00089fc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008a00:	e8 46 fe ff ff       	call   c000884b <src_new>
c0008a05:	83 c4 10             	add    esp,0x10
c0008a08:	85 c0                	test   eax,eax
c0008a0a:	75 06                	jne    c0008a12 <src_simple+0x28>
c0008a0c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008a10:	eb 25                	jmp    c0008a37 <src_simple+0x4d>
c0008a12:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008a19:	89 c3                	mov    ebx,eax
c0008a1b:	50                   	push   eax
c0008a1c:	50                   	push   eax
c0008a1d:	56                   	push   esi
c0008a1e:	53                   	push   ebx
c0008a1f:	e8 e1 fa ff ff       	call   c0008505 <src_process>
c0008a24:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008a27:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008a2b:	e8 99 fa ff ff       	call   c00084c9 <src_delete>
c0008a30:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008a34:	83 c4 10             	add    esp,0x10
c0008a37:	83 c4 14             	add    esp,0x14
c0008a3a:	5b                   	pop    ebx
c0008a3b:	5e                   	pop    esi
c0008a3c:	c3                   	ret    

c0008a3d <src_short_to_float_array>:
c0008a3d:	83 ec 0c             	sub    esp,0xc
c0008a40:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008a44:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008a48:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008a4c:	85 c0                	test   eax,eax
c0008a4e:	74 0f                	je     c0008a5f <src_short_to_float_array+0x22>
c0008a50:	48                   	dec    eax
c0008a51:	d9 05 04 fd 01 c0    	fld    DWORD PTR ds:0xc001fd04
c0008a57:	de 0c 42             	fimul  WORD PTR [edx+eax*2]
c0008a5a:	d9 1c 81             	fstp   DWORD PTR [ecx+eax*4]
c0008a5d:	eb ed                	jmp    c0008a4c <src_short_to_float_array+0xf>
c0008a5f:	83 c4 0c             	add    esp,0xc
c0008a62:	c3                   	ret    

c0008a63 <src_float_to_short_array>:
c0008a63:	56                   	push   esi
c0008a64:	53                   	push   ebx
c0008a65:	52                   	push   edx
c0008a66:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008a6a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008a6e:	85 db                	test   ebx,ebx
c0008a70:	74 51                	je     c0008ac3 <src_float_to_short_array+0x60>
c0008a72:	4b                   	dec    ebx
c0008a73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a77:	d9 05 08 fd 01 c0    	fld    DWORD PTR ds:0xc001fd08
c0008a7d:	d8 0c 98             	fmul   DWORD PTR [eax+ebx*4]
c0008a80:	dc 15 f8 fc 01 c0    	fcom   QWORD PTR ds:0xc001fcf8
c0008a86:	df e0                	fnstsw ax
c0008a88:	9e                   	sahf   
c0008a89:	72 0a                	jb     c0008a95 <src_float_to_short_array+0x32>
c0008a8b:	dd d8                	fstp   st(0)
c0008a8d:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008a93:	eb d9                	jmp    c0008a6e <src_float_to_short_array+0xb>
c0008a95:	d9 05 0c fd 01 c0    	fld    DWORD PTR ds:0xc001fd0c
c0008a9b:	d8 d9                	fcomp  st(1)
c0008a9d:	df e0                	fnstsw ax
c0008a9f:	9e                   	sahf   
c0008aa0:	72 0a                	jb     c0008aac <src_float_to_short_array+0x49>
c0008aa2:	dd d8                	fstp   st(0)
c0008aa4:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008aaa:	eb c2                	jmp    c0008a6e <src_float_to_short_array+0xb>
c0008aac:	83 ec 10             	sub    esp,0x10
c0008aaf:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008ab2:	e8 a9 5a 01 00       	call   c001e560 <lrint>
c0008ab7:	83 c4 10             	add    esp,0x10
c0008aba:	c1 f8 10             	sar    eax,0x10
c0008abd:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008ac1:	eb ab                	jmp    c0008a6e <src_float_to_short_array+0xb>
c0008ac3:	58                   	pop    eax
c0008ac4:	5b                   	pop    ebx
c0008ac5:	5e                   	pop    esi
c0008ac6:	c3                   	ret    

c0008ac7 <src_int_to_float_array>:
c0008ac7:	83 ec 0c             	sub    esp,0xc
c0008aca:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008ace:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008ad2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008ad6:	85 c0                	test   eax,eax
c0008ad8:	74 0f                	je     c0008ae9 <src_int_to_float_array+0x22>
c0008ada:	48                   	dec    eax
c0008adb:	d9 05 10 fd 01 c0    	fld    DWORD PTR ds:0xc001fd10
c0008ae1:	da 0c 82             	fimul  DWORD PTR [edx+eax*4]
c0008ae4:	d9 1c 81             	fstp   DWORD PTR [ecx+eax*4]
c0008ae7:	eb ed                	jmp    c0008ad6 <src_int_to_float_array+0xf>
c0008ae9:	83 c4 0c             	add    esp,0xc
c0008aec:	c3                   	ret    

c0008aed <src_float_to_int_array>:
c0008aed:	56                   	push   esi
c0008aee:	53                   	push   ebx
c0008aef:	52                   	push   edx
c0008af0:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008af4:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008af8:	85 db                	test   ebx,ebx
c0008afa:	74 4f                	je     c0008b4b <src_float_to_int_array+0x5e>
c0008afc:	4b                   	dec    ebx
c0008afd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b01:	d9 05 08 fd 01 c0    	fld    DWORD PTR ds:0xc001fd08
c0008b07:	d8 0c 98             	fmul   DWORD PTR [eax+ebx*4]
c0008b0a:	dc 15 f8 fc 01 c0    	fcom   QWORD PTR ds:0xc001fcf8
c0008b10:	df e0                	fnstsw ax
c0008b12:	9e                   	sahf   
c0008b13:	72 0b                	jb     c0008b20 <src_float_to_int_array+0x33>
c0008b15:	dd d8                	fstp   st(0)
c0008b17:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008b1e:	eb d8                	jmp    c0008af8 <src_float_to_int_array+0xb>
c0008b20:	d9 05 0c fd 01 c0    	fld    DWORD PTR ds:0xc001fd0c
c0008b26:	d8 d9                	fcomp  st(1)
c0008b28:	df e0                	fnstsw ax
c0008b2a:	9e                   	sahf   
c0008b2b:	72 0b                	jb     c0008b38 <src_float_to_int_array+0x4b>
c0008b2d:	dd d8                	fstp   st(0)
c0008b2f:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008b36:	eb c0                	jmp    c0008af8 <src_float_to_int_array+0xb>
c0008b38:	83 ec 10             	sub    esp,0x10
c0008b3b:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008b3e:	e8 1d 5a 01 00       	call   c001e560 <lrint>
c0008b43:	83 c4 10             	add    esp,0x10
c0008b46:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0008b49:	eb ad                	jmp    c0008af8 <src_float_to_int_array+0xb>
c0008b4b:	58                   	pop    eax
c0008b4c:	5b                   	pop    ebx
c0008b4d:	5e                   	pop    esi
c0008b4e:	c3                   	ret    

c0008b4f <is_bad_src_ratio>:
c0008b4f:	83 ec 0c             	sub    esp,0xc
c0008b52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b56:	89 04 24             	mov    DWORD PTR [esp],eax
c0008b59:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008b5d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008b61:	dd 04 24             	fld    QWORD PTR [esp]
c0008b64:	dd 05 e0 fc 01 c0    	fld    QWORD PTR ds:0xc001fce0
c0008b6a:	de d9                	fcompp 
c0008b6c:	df e0                	fnstsw ax
c0008b6e:	f6 c4 45             	test   ah,0x45
c0008b71:	74 10                	je     c0008b83 <is_bad_src_ratio+0x34>
c0008b73:	dd 04 24             	fld    QWORD PTR [esp]
c0008b76:	dc 1d e8 fc 01 c0    	fcomp  QWORD PTR ds:0xc001fce8
c0008b7c:	df e0                	fnstsw ax
c0008b7e:	f6 c4 45             	test   ah,0x45
c0008b81:	75 07                	jne    c0008b8a <is_bad_src_ratio+0x3b>
c0008b83:	b8 01 00 00 00       	mov    eax,0x1
c0008b88:	eb 05                	jmp    c0008b8f <is_bad_src_ratio+0x40>
c0008b8a:	b8 00 00 00 00       	mov    eax,0x0
c0008b8f:	83 c4 0c             	add    esp,0xc
c0008b92:	c3                   	ret    

c0008b93 <fmod_one>:
c0008b93:	83 ec 2c             	sub    esp,0x2c
c0008b96:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008b9a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008b9e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0008ba2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008ba6:	83 ec 08             	sub    esp,0x8
c0008ba9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bb1:	e8 aa 59 01 00       	call   c001e560 <lrint>
c0008bb6:	83 c4 10             	add    esp,0x10
c0008bb9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008bbd:	db 44 24 04          	fild   DWORD PTR [esp+0x4]
c0008bc1:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008bc5:	de e1                	fsubrp st(1),st
c0008bc7:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0008bcb:	d9 ee                	fldz   
c0008bcd:	dc 5c 24 18          	fcomp  QWORD PTR [esp+0x18]
c0008bd1:	df e0                	fnstsw ax
c0008bd3:	f6 c4 45             	test   ah,0x45
c0008bd6:	75 0a                	jne    c0008be2 <fmod_one+0x4f>
c0008bd8:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0008bdc:	d9 e8                	fld1   
c0008bde:	de c1                	faddp  st(1),st
c0008be0:	eb 04                	jmp    c0008be6 <fmod_one+0x53>
c0008be2:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0008be6:	83 c4 2c             	add    esp,0x2c
c0008be9:	c3                   	ret    

c0008bea <linear_vari_process>:
c0008bea:	55                   	push   ebp
c0008beb:	57                   	push   edi
c0008bec:	56                   	push   esi
c0008bed:	53                   	push   ebx
c0008bee:	83 ec 2c             	sub    esp,0x2c
c0008bf1:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0008bf5:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0008bf9:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0008c01:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0008c05:	0f 8e 5e 02 00 00    	jle    c0008e69 <linear_vari_process+0x27f>
c0008c0b:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c0008c0e:	c7 44 24 18 05 00 00 00 	mov    DWORD PTR [esp+0x18],0x5
c0008c16:	85 db                	test   ebx,ebx
c0008c18:	0f 84 4b 02 00 00    	je     c0008e69 <linear_vari_process+0x27f>
c0008c1e:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0008c21:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008c25:	74 19                	je     c0008c40 <linear_vari_process+0x56>
c0008c27:	31 d2                	xor    edx,edx
c0008c29:	39 c2                	cmp    edx,eax
c0008c2b:	7d 0c                	jge    c0008c39 <linear_vari_process+0x4f>
c0008c2d:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0008c2f:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c0008c32:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c0008c36:	42                   	inc    edx
c0008c37:	eb f0                	jmp    c0008c29 <linear_vari_process+0x3f>
c0008c39:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008c40:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0008c43:	0f af d0             	imul   edx,eax
c0008c46:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008c49:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0008c4d:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0008c54:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0008c57:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008c5e:	dd 07                	fld    QWORD PTR [edi]
c0008c60:	dd 14 24             	fst    QWORD PTR [esp]
c0008c63:	50                   	push   eax
c0008c64:	50                   	push   eax
c0008c65:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008c68:	e8 e2 fe ff ff       	call   c0008b4f <is_bad_src_ratio>
c0008c6d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0008c71:	5a                   	pop    edx
c0008c72:	59                   	pop    ecx
c0008c73:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0008c78:	0f 85 e3 01 00 00    	jne    c0008e61 <linear_vari_process+0x277>
c0008c7e:	dd 47 08             	fld    QWORD PTR [edi+0x8]
c0008c81:	d9 e8                	fld1   
c0008c83:	d8 d1                	fcom   st(1)
c0008c85:	df e0                	fnstsw ax
c0008c87:	9e                   	sahf   
c0008c88:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0008c8c:	0f 86 99 00 00 00    	jbe    c0008d2b <linear_vari_process+0x141>
c0008c92:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008c95:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0008c98:	0f 8d 8d 00 00 00    	jge    c0008d2b <linear_vari_process+0x141>
c0008c9e:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008ca2:	d8 c1                	fadd   st,st(1)
c0008ca4:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c0008ca7:	da 43 10             	fiadd  DWORD PTR [ebx+0x10]
c0008caa:	da 5b 0c             	ficomp DWORD PTR [ebx+0xc]
c0008cad:	df e0                	fnstsw ax
c0008caf:	9e                   	sahf   
c0008cb0:	73 79                	jae    c0008d2b <linear_vari_process+0x141>
c0008cb2:	85 d2                	test   edx,edx
c0008cb4:	7e 38                	jle    c0008cee <linear_vari_process+0x104>
c0008cb6:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0008cba:	83 ec 10             	sub    esp,0x10
c0008cbd:	dd 07                	fld    QWORD PTR [edi]
c0008cbf:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c0008cc2:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008cc5:	e8 76 58 01 00       	call   c001e540 <fabs>
c0008cca:	83 c4 10             	add    esp,0x10
c0008ccd:	dc 1d 58 fd 01 c0    	fcomp  QWORD PTR ds:0xc001fd58
c0008cd3:	df e0                	fnstsw ax
c0008cd5:	9e                   	sahf   
c0008cd6:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0008cda:	76 12                	jbe    c0008cee <linear_vari_process+0x104>
c0008cdc:	dd 07                	fld    QWORD PTR [edi]
c0008cde:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c0008ce1:	d8 e1                	fsub   st,st(1)
c0008ce3:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c0008ce6:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c0008ce9:	de c1                	faddp  st(1),st
c0008ceb:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008cee:	31 c0                	xor    eax,eax
c0008cf0:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c0008cf3:	7e 1f                	jle    c0008d14 <linear_vari_process+0x12a>
c0008cf5:	d9 44 83 1c          	fld    DWORD PTR [ebx+eax*4+0x1c]
c0008cf9:	8b 2e                	mov    ebp,DWORD PTR [esi]
c0008cfb:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0008cfe:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0008d02:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0008d05:	d8 e1                	fsub   st,st(1)
c0008d07:	40                   	inc    eax
c0008d08:	d8 ca                	fmul   st,st(2)
c0008d0a:	de c1                	faddp  st(1),st
c0008d0c:	d9 1c 8a             	fstp   DWORD PTR [edx+ecx*4]
c0008d0f:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0008d12:	eb dc                	jmp    c0008cf0 <linear_vari_process+0x106>
c0008d14:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008d18:	dc 34 24             	fdiv   QWORD PTR [esp]
c0008d1b:	de c1                	faddp  st(1),st
c0008d1d:	e9 5f ff ff ff       	jmp    c0008c81 <linear_vari_process+0x97>
c0008d22:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008d26:	dc 34 24             	fdiv   QWORD PTR [esp]
c0008d29:	de c1                	faddp  st(1),st
c0008d2b:	83 ec 10             	sub    esp,0x10
c0008d2e:	dd 14 24             	fst    QWORD PTR [esp]
c0008d31:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0008d35:	e8 59 fe ff ff       	call   c0008b93 <fmod_one>
c0008d3a:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0008d3d:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0008d41:	d8 e1                	fsub   st,st(1)
c0008d43:	d9 c9                	fxch   st(1)
c0008d45:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0008d49:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008d4c:	e8 0f 58 01 00       	call   c001e560 <lrint>
c0008d51:	83 c4 10             	add    esp,0x10
c0008d54:	0f af e8             	imul   ebp,eax
c0008d57:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0008d5b:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c0008d5e:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c0008d61:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c0008d64:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0008d67:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c0008d6a:	0f 8d 97 00 00 00    	jge    c0008e07 <linear_vari_process+0x21d>
c0008d70:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0008d74:	d9 c0                	fld    st(0)
c0008d76:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c0008d79:	da 44 24 10          	fiadd  DWORD PTR [esp+0x10]
c0008d7d:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0008d81:	db 44 24 10          	fild   DWORD PTR [esp+0x10]
c0008d85:	de d9                	fcompp 
c0008d87:	df e0                	fnstsw ax
c0008d89:	9e                   	sahf   
c0008d8a:	76 7b                	jbe    c0008e07 <linear_vari_process+0x21d>
c0008d8c:	85 ed                	test   ebp,ebp
c0008d8e:	7e 38                	jle    c0008dc8 <linear_vari_process+0x1de>
c0008d90:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0008d94:	83 ec 10             	sub    esp,0x10
c0008d97:	dd 07                	fld    QWORD PTR [edi]
c0008d99:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c0008d9c:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008d9f:	e8 9c 57 01 00       	call   c001e540 <fabs>
c0008da4:	83 c4 10             	add    esp,0x10
c0008da7:	dc 1d 58 fd 01 c0    	fcomp  QWORD PTR ds:0xc001fd58
c0008dad:	df e0                	fnstsw ax
c0008daf:	9e                   	sahf   
c0008db0:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0008db4:	76 12                	jbe    c0008dc8 <linear_vari_process+0x1de>
c0008db6:	dd 07                	fld    QWORD PTR [edi]
c0008db8:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c0008dbb:	d8 e1                	fsub   st,st(1)
c0008dbd:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c0008dc0:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c0008dc3:	de c1                	faddp  st(1),st
c0008dc5:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008dc8:	31 c0                	xor    eax,eax
c0008dca:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0008dcd:	39 c2                	cmp    edx,eax
c0008dcf:	0f 8e 4d ff ff ff    	jle    c0008d22 <linear_vari_process+0x138>
c0008dd5:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0008dd7:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0008dda:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0008dde:	89 e9                	mov    ecx,ebp
c0008de0:	01 c5                	add    ebp,eax
c0008de2:	29 d1                	sub    ecx,edx
c0008de4:	89 ca                	mov    edx,ecx
c0008de6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008dea:	01 c2                	add    edx,eax
c0008dec:	40                   	inc    eax
c0008ded:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c0008df0:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0008df3:	d9 04 a9             	fld    DWORD PTR [ecx+ebp*4]
c0008df6:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0008df9:	d8 e1                	fsub   st,st(1)
c0008dfb:	d8 ca                	fmul   st,st(2)
c0008dfd:	de c1                	faddp  st(1),st
c0008dff:	d9 1c 91             	fstp   DWORD PTR [ecx+edx*4]
c0008e02:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0008e05:	eb c3                	jmp    c0008dca <linear_vari_process+0x1e0>
c0008e07:	39 d1                	cmp    ecx,edx
c0008e09:	7d 13                	jge    c0008e1e <linear_vari_process+0x234>
c0008e0b:	89 d0                	mov    eax,edx
c0008e0d:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0008e10:	29 c8                	sub    eax,ecx
c0008e12:	99                   	cdq    
c0008e13:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0008e16:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e1a:	da 44 24 08          	fiadd  DWORD PTR [esp+0x8]
c0008e1e:	dd 5f 08             	fstp   QWORD PTR [edi+0x8]
c0008e21:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0008e24:	85 c0                	test   eax,eax
c0008e26:	7f 1b                	jg     c0008e43 <linear_vari_process+0x259>
c0008e28:	dd 04 24             	fld    QWORD PTR [esp]
c0008e2b:	dd 1f                	fstp   QWORD PTR [edi]
c0008e2d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0008e30:	99                   	cdq    
c0008e31:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0008e34:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0008e37:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008e3a:	99                   	cdq    
c0008e3b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0008e3e:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0008e41:	eb 26                	jmp    c0008e69 <linear_vari_process+0x27f>
c0008e43:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c0008e46:	31 d2                	xor    edx,edx
c0008e48:	29 c8                	sub    eax,ecx
c0008e4a:	c1 e0 02             	shl    eax,0x2
c0008e4d:	39 d1                	cmp    ecx,edx
c0008e4f:	7e d7                	jle    c0008e28 <linear_vari_process+0x23e>
c0008e51:	8b 2e                	mov    ebp,DWORD PTR [esi]
c0008e53:	d9 44 05 00          	fld    DWORD PTR [ebp+eax*1+0x0]
c0008e57:	83 c0 04             	add    eax,0x4
c0008e5a:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c0008e5e:	42                   	inc    edx
c0008e5f:	eb ec                	jmp    c0008e4d <linear_vari_process+0x263>
c0008e61:	c7 44 24 18 16 00 00 00 	mov    DWORD PTR [esp+0x18],0x16
c0008e69:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008e6d:	83 c4 2c             	add    esp,0x2c
c0008e70:	5b                   	pop    ebx
c0008e71:	5e                   	pop    esi
c0008e72:	5f                   	pop    edi
c0008e73:	5d                   	pop    ebp
c0008e74:	c3                   	ret    

c0008e75 <linear_reset>:
c0008e75:	83 ec 0c             	sub    esp,0xc
c0008e78:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008e7c:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0008e7f:	85 c0                	test   eax,eax
c0008e81:	74 20                	je     c0008ea3 <linear_reset+0x2e>
c0008e83:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c0008e86:	83 c0 1c             	add    eax,0x1c
c0008e89:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c0008e8c:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c0008e93:	c1 e2 02             	shl    edx,0x2
c0008e96:	51                   	push   ecx
c0008e97:	52                   	push   edx
c0008e98:	6a 00                	push   0x0
c0008e9a:	50                   	push   eax
c0008e9b:	e8 68 77 ff ff       	call   c0000608 <memset>
c0008ea0:	83 c4 10             	add    esp,0x10
c0008ea3:	83 c4 0c             	add    esp,0xc
c0008ea6:	c3                   	ret    

c0008ea7 <linear_get_name>:
c0008ea7:	31 c0                	xor    eax,eax
c0008ea9:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0008eae:	75 05                	jne    c0008eb5 <linear_get_name+0xe>
c0008eb0:	b8 14 fd 01 c0       	mov    eax,0xc001fd14
c0008eb5:	c3                   	ret    

c0008eb6 <linear_get_description>:
c0008eb6:	31 c0                	xor    eax,eax
c0008eb8:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0008ebd:	75 05                	jne    c0008ec4 <linear_get_description+0xe>
c0008ebf:	b8 28 fd 01 c0       	mov    eax,0xc001fd28
c0008ec4:	c3                   	ret    

c0008ec5 <linear_set_converter>:
c0008ec5:	53                   	push   ebx
c0008ec6:	b8 0a 00 00 00       	mov    eax,0xa
c0008ecb:	83 ec 08             	sub    esp,0x8
c0008ece:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008ed2:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c0008ed7:	75 6e                	jne    c0008f47 <linear_set_converter+0x82>
c0008ed9:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0008edc:	85 c0                	test   eax,eax
c0008ede:	74 13                	je     c0008ef3 <linear_set_converter+0x2e>
c0008ee0:	83 ec 0c             	sub    esp,0xc
c0008ee3:	50                   	push   eax
c0008ee4:	e8 ea 41 00 00       	call   c000d0d3 <free>
c0008ee9:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0008ef0:	83 c4 10             	add    esp,0x10
c0008ef3:	50                   	push   eax
c0008ef4:	50                   	push   eax
c0008ef5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008ef8:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0008eff:	50                   	push   eax
c0008f00:	6a 01                	push   0x1
c0008f02:	e8 ec 41 00 00       	call   c000d0f3 <calloc>
c0008f07:	83 c4 10             	add    esp,0x10
c0008f0a:	89 c2                	mov    edx,eax
c0008f0c:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0008f0f:	85 d2                	test   edx,edx
c0008f11:	b8 01 00 00 00       	mov    eax,0x1
c0008f16:	74 2f                	je     c0008f47 <linear_set_converter+0x82>
c0008f18:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c0008f1e:	83 ec 0c             	sub    esp,0xc
c0008f21:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008f24:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0008f27:	c7 43 24 ea 8b 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0008bea
c0008f2e:	c7 43 20 ea 8b 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0008bea
c0008f35:	c7 43 28 75 8e 00 c0 	mov    DWORD PTR [ebx+0x28],0xc0008e75
c0008f3c:	53                   	push   ebx
c0008f3d:	e8 33 ff ff ff       	call   c0008e75 <linear_reset>
c0008f42:	83 c4 10             	add    esp,0x10
c0008f45:	31 c0                	xor    eax,eax
c0008f47:	83 c4 08             	add    esp,0x8
c0008f4a:	5b                   	pop    ebx
c0008f4b:	c3                   	ret    

c0008f4c <is_bad_src_ratio>:
c0008f4c:	83 ec 0c             	sub    esp,0xc
c0008f4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008f53:	89 04 24             	mov    DWORD PTR [esp],eax
c0008f56:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008f5a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008f5e:	dd 04 24             	fld    QWORD PTR [esp]
c0008f61:	dd 05 e0 fc 01 c0    	fld    QWORD PTR ds:0xc001fce0
c0008f67:	de d9                	fcompp 
c0008f69:	df e0                	fnstsw ax
c0008f6b:	f6 c4 45             	test   ah,0x45
c0008f6e:	74 10                	je     c0008f80 <is_bad_src_ratio+0x34>
c0008f70:	dd 04 24             	fld    QWORD PTR [esp]
c0008f73:	dc 1d e8 fc 01 c0    	fcomp  QWORD PTR ds:0xc001fce8
c0008f79:	df e0                	fnstsw ax
c0008f7b:	f6 c4 45             	test   ah,0x45
c0008f7e:	75 07                	jne    c0008f87 <is_bad_src_ratio+0x3b>
c0008f80:	b8 01 00 00 00       	mov    eax,0x1
c0008f85:	eb 05                	jmp    c0008f8c <is_bad_src_ratio+0x40>
c0008f87:	b8 00 00 00 00       	mov    eax,0x0
c0008f8c:	83 c4 0c             	add    esp,0xc
c0008f8f:	c3                   	ret    

c0008f90 <int_to_fp>:
c0008f90:	c1 e0 0c             	shl    eax,0xc
c0008f93:	c3                   	ret    

c0008f94 <fp_to_int>:
c0008f94:	c1 f8 0c             	sar    eax,0xc
c0008f97:	c3                   	ret    

c0008f98 <fp_fraction_part>:
c0008f98:	25 ff 0f 00 00       	and    eax,0xfff
c0008f9d:	c3                   	ret    

c0008f9e <fp_to_double>:
c0008f9e:	83 ec 0c             	sub    esp,0xc
c0008fa1:	e8 f2 ff ff ff       	call   c0008f98 <fp_fraction_part>
c0008fa6:	d9 05 e8 fe 01 c0    	fld    DWORD PTR ds:0xc001fee8
c0008fac:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008fb0:	da 4c 24 04          	fimul  DWORD PTR [esp+0x4]
c0008fb4:	83 c4 0c             	add    esp,0xc
c0008fb7:	c3                   	ret    

c0008fb8 <calc_output_single>:
c0008fb8:	55                   	push   ebp
c0008fb9:	57                   	push   edi
c0008fba:	89 c7                	mov    edi,eax
c0008fbc:	56                   	push   esi
c0008fbd:	53                   	push   ebx
c0008fbe:	89 d3                	mov    ebx,edx
c0008fc0:	83 ec 24             	sub    esp,0x24
c0008fc3:	89 de                	mov    esi,ebx
c0008fc5:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0008fc8:	e8 c3 ff ff ff       	call   c0008f90 <int_to_fp>
c0008fcd:	8b 6f 30             	mov    ebp,DWORD PTR [edi+0x30]
c0008fd0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008fd4:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008fdb:	29 c8                	sub    eax,ecx
c0008fdd:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0008fe5:	99                   	cdq    
c0008fe6:	f7 fb                	idiv   ebx
c0008fe8:	8b 57 34             	mov    edx,DWORD PTR [edi+0x34]
c0008feb:	0f af f0             	imul   esi,eax
c0008fee:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0008ff2:	01 ce                	add    esi,ecx
c0008ff4:	29 c2                	sub    edx,eax
c0008ff6:	8d 14 97             	lea    edx,[edi+edx*4]
c0008ff9:	89 f0                	mov    eax,esi
c0008ffb:	e8 9e ff ff ff       	call   c0008f9e <fp_to_double>
c0009000:	89 f0                	mov    eax,esi
c0009002:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009006:	e8 89 ff ff ff       	call   c0008f94 <fp_to_int>
c000900b:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c000900f:	83 c2 04             	add    edx,0x4
c0009012:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009016:	d8 e1                	fsub   st,st(1)
c0009018:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000901c:	de c9                	fmulp  st(1),st
c000901e:	de c1                	faddp  st(1),st
c0009020:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c0009026:	29 de                	sub    esi,ebx
c0009028:	dc 04 24             	fadd   QWORD PTR [esp]
c000902b:	dd 1c 24             	fstp   QWORD PTR [esp]
c000902e:	79 c9                	jns    c0008ff9 <calc_output_single+0x41>
c0009030:	89 d8                	mov    eax,ebx
c0009032:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0009036:	29 c8                	sub    eax,ecx
c0009038:	d9 ee                	fldz   
c000903a:	89 c1                	mov    ecx,eax
c000903c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009040:	29 c8                	sub    eax,ecx
c0009042:	99                   	cdq    
c0009043:	f7 fb                	idiv   ebx
c0009045:	89 da                	mov    edx,ebx
c0009047:	0f af d0             	imul   edx,eax
c000904a:	8d 44 06 01          	lea    eax,[esi+eax*1+0x1]
c000904e:	01 d1                	add    ecx,edx
c0009050:	8d 14 87             	lea    edx,[edi+eax*4]
c0009053:	89 c8                	mov    eax,ecx
c0009055:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009059:	e8 40 ff ff ff       	call   c0008f9e <fp_to_double>
c000905e:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0009062:	89 c8                	mov    eax,ecx
c0009064:	e8 2b ff ff ff       	call   c0008f94 <fp_to_int>
c0009069:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c000906d:	29 d9                	sub    ecx,ebx
c000906f:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009073:	83 ea 04             	sub    edx,0x4
c0009076:	d8 e1                	fsub   st,st(1)
c0009078:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000907c:	de c9                	fmulp  st(1),st
c000907e:	de c1                	faddp  st(1),st
c0009080:	d8 8a 48 08 00 00    	fmul   DWORD PTR [edx+0x848]
c0009086:	85 c9                	test   ecx,ecx
c0009088:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000908c:	de c1                	faddp  st(1),st
c000908e:	7f c3                	jg     c0009053 <calc_output_single+0x9b>
c0009090:	dd 04 24             	fld    QWORD PTR [esp]
c0009093:	83 c4 24             	add    esp,0x24
c0009096:	de c1                	faddp  st(1),st
c0009098:	5b                   	pop    ebx
c0009099:	5e                   	pop    esi
c000909a:	5f                   	pop    edi
c000909b:	5d                   	pop    ebp
c000909c:	c3                   	ret    

c000909d <calc_output_stereo>:
c000909d:	55                   	push   ebp
c000909e:	57                   	push   edi
c000909f:	89 c7                	mov    edi,eax
c00090a1:	56                   	push   esi
c00090a2:	53                   	push   ebx
c00090a3:	89 d3                	mov    ebx,edx
c00090a5:	83 ec 44             	sub    esp,0x44
c00090a8:	89 de                	mov    esi,ebx
c00090aa:	dd 44 24 58          	fld    QWORD PTR [esp+0x58]
c00090ae:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00090b1:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c00090b5:	e8 d6 fe ff ff       	call   c0008f90 <int_to_fp>
c00090ba:	8b 6f 30             	mov    ebp,DWORD PTR [edi+0x30]
c00090bd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00090c1:	d9 ee                	fldz   
c00090c3:	29 c8                	sub    eax,ecx
c00090c5:	dd 14 24             	fst    QWORD PTR [esp]
c00090c8:	99                   	cdq    
c00090c9:	f7 fb                	idiv   ebx
c00090cb:	8b 57 34             	mov    edx,DWORD PTR [edi+0x34]
c00090ce:	0f af f0             	imul   esi,eax
c00090d1:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00090d5:	01 ce                	add    esi,ecx
c00090d7:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c00090da:	0f af c2             	imul   eax,edx
c00090dd:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00090e1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00090e5:	29 c2                	sub    edx,eax
c00090e7:	8d 14 97             	lea    edx,[edi+edx*4]
c00090ea:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c00090ee:	89 f0                	mov    eax,esi
c00090f0:	e8 a9 fe ff ff       	call   c0008f9e <fp_to_double>
c00090f5:	89 f0                	mov    eax,esi
c00090f7:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00090fb:	e8 94 fe ff ff       	call   c0008f94 <fp_to_int>
c0009100:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0009104:	83 c2 08             	add    edx,0x8
c0009107:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c000910b:	d8 e1                	fsub   st,st(1)
c000910d:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0009111:	de c9                	fmulp  st(1),st
c0009113:	de c1                	faddp  st(1),st
c0009115:	d9 c0                	fld    st(0)
c0009117:	d8 8a 3c 08 00 00    	fmul   DWORD PTR [edx+0x83c]
c000911d:	dc 04 24             	fadd   QWORD PTR [esp]
c0009120:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009123:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c0009129:	29 de                	sub    esi,ebx
c000912b:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000912f:	de c1                	faddp  st(1),st
c0009131:	79 b7                	jns    c00090ea <calc_output_stereo+0x4d>
c0009133:	89 d8                	mov    eax,ebx
c0009135:	d9 ee                	fldz   
c0009137:	d9 ee                	fldz   
c0009139:	29 c8                	sub    eax,ecx
c000913b:	89 c1                	mov    ecx,eax
c000913d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009141:	29 c8                	sub    eax,ecx
c0009143:	99                   	cdq    
c0009144:	f7 fb                	idiv   ebx
c0009146:	89 da                	mov    edx,ebx
c0009148:	0f af d0             	imul   edx,eax
c000914b:	40                   	inc    eax
c000914c:	01 d1                	add    ecx,edx
c000914e:	0f af 44 24 10       	imul   eax,DWORD PTR [esp+0x10]
c0009153:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0009157:	8d 14 87             	lea    edx,[edi+eax*4]
c000915a:	eb 04                	jmp    c0009160 <calc_output_stereo+0xc3>
c000915c:	d9 ca                	fxch   st(2)
c000915e:	d9 c9                	fxch   st(1)
c0009160:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0009164:	d9 c9                	fxch   st(1)
c0009166:	89 c8                	mov    eax,ecx
c0009168:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000916c:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009170:	e8 29 fe ff ff       	call   c0008f9e <fp_to_double>
c0009175:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0009179:	89 c8                	mov    eax,ecx
c000917b:	e8 14 fe ff ff       	call   c0008f94 <fp_to_int>
c0009180:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0009184:	29 d9                	sub    ecx,ebx
c0009186:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c000918a:	83 ea 08             	sub    edx,0x8
c000918d:	d8 e1                	fsub   st,st(1)
c000918f:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009193:	de c9                	fmulp  st(1),st
c0009195:	de c1                	faddp  st(1),st
c0009197:	d9 c0                	fld    st(0)
c0009199:	d8 8a 4c 08 00 00    	fmul   DWORD PTR [edx+0x84c]
c000919f:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00091a3:	de c1                	faddp  st(1),st
c00091a5:	d9 c9                	fxch   st(1)
c00091a7:	d8 8a 50 08 00 00    	fmul   DWORD PTR [edx+0x850]
c00091ad:	85 c9                	test   ecx,ecx
c00091af:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00091b3:	de c1                	faddp  st(1),st
c00091b5:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00091b9:	7f a1                	jg     c000915c <calc_output_stereo+0xbf>
c00091bb:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00091bf:	dd 04 24             	fld    QWORD PTR [esp]
c00091c2:	de c3                	faddp  st(3),st
c00091c4:	d9 ca                	fxch   st(2)
c00091c6:	dc 4c 24 20          	fmul   QWORD PTR [esp+0x20]
c00091ca:	d9 18                	fstp   DWORD PTR [eax]
c00091cc:	de c1                	faddp  st(1),st
c00091ce:	dc 4c 24 20          	fmul   QWORD PTR [esp+0x20]
c00091d2:	d9 58 04             	fstp   DWORD PTR [eax+0x4]
c00091d5:	83 c4 44             	add    esp,0x44
c00091d8:	5b                   	pop    ebx
c00091d9:	5e                   	pop    esi
c00091da:	5f                   	pop    edi
c00091db:	5d                   	pop    ebp
c00091dc:	c3                   	ret    

c00091dd <calc_output_quad>:
c00091dd:	55                   	push   ebp
c00091de:	57                   	push   edi
c00091df:	56                   	push   esi
c00091e0:	89 c6                	mov    esi,eax
c00091e2:	53                   	push   ebx
c00091e3:	89 d3                	mov    ebx,edx
c00091e5:	83 ec 5c             	sub    esp,0x5c
c00091e8:	dd 44 24 70          	fld    QWORD PTR [esp+0x70]
c00091ec:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00091ef:	dd 1c 24             	fstp   QWORD PTR [esp]
c00091f2:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c00091f6:	e8 95 fd ff ff       	call   c0008f90 <int_to_fp>
c00091fb:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c00091fe:	d9 ee                	fldz   
c0009200:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009204:	dd 54 24 10          	fst    QWORD PTR [esp+0x10]
c0009208:	29 c8                	sub    eax,ecx
c000920a:	dd 54 24 18          	fst    QWORD PTR [esp+0x18]
c000920e:	99                   	cdq    
c000920f:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c0009213:	f7 fb                	idiv   ebx
c0009215:	89 da                	mov    edx,ebx
c0009217:	0f af d0             	imul   edx,eax
c000921a:	01 ca                	add    edx,ecx
c000921c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009220:	8b 56 34             	mov    edx,DWORD PTR [esi+0x34]
c0009223:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009227:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000922a:	0f af c2             	imul   eax,edx
c000922d:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0009231:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0009235:	29 c2                	sub    edx,eax
c0009237:	8d 14 96             	lea    edx,[esi+edx*4]
c000923a:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c000923e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009242:	e8 57 fd ff ff       	call   c0008f9e <fp_to_double>
c0009247:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000924b:	dd 5c 24 40          	fstp   QWORD PTR [esp+0x40]
c000924f:	e8 40 fd ff ff       	call   c0008f94 <fp_to_int>
c0009254:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0009258:	83 c2 10             	add    edx,0x10
c000925b:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c000925f:	d8 e1                	fsub   st,st(1)
c0009261:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c0009265:	de c9                	fmulp  st(1),st
c0009267:	de c1                	faddp  st(1),st
c0009269:	d9 c0                	fld    st(0)
c000926b:	d8 8a 34 08 00 00    	fmul   DWORD PTR [edx+0x834]
c0009271:	dc 44 24 08          	fadd   QWORD PTR [esp+0x8]
c0009275:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0009279:	d9 c0                	fld    st(0)
c000927b:	d8 8a 38 08 00 00    	fmul   DWORD PTR [edx+0x838]
c0009281:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c0009285:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009289:	d9 c0                	fld    st(0)
c000928b:	d8 8a 3c 08 00 00    	fmul   DWORD PTR [edx+0x83c]
c0009291:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c0009295:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009299:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c000929f:	29 5c 24 20          	sub    DWORD PTR [esp+0x20],ebx
c00092a3:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c00092a7:	de c1                	faddp  st(1),st
c00092a9:	79 8f                	jns    c000923a <calc_output_quad+0x5d>
c00092ab:	89 d8                	mov    eax,ebx
c00092ad:	d9 ee                	fldz   
c00092af:	29 c8                	sub    eax,ecx
c00092b1:	d9 ee                	fldz   
c00092b3:	89 c1                	mov    ecx,eax
c00092b5:	d9 ee                	fldz   
c00092b7:	d9 ee                	fldz   
c00092b9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00092bd:	29 c8                	sub    eax,ecx
c00092bf:	99                   	cdq    
c00092c0:	f7 fb                	idiv   ebx
c00092c2:	89 da                	mov    edx,ebx
c00092c4:	0f af d0             	imul   edx,eax
c00092c7:	40                   	inc    eax
c00092c8:	01 d1                	add    ecx,edx
c00092ca:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c00092cf:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c00092d3:	8d 14 86             	lea    edx,[esi+eax*4]
c00092d6:	eb 0a                	jmp    c00092e2 <calc_output_quad+0x105>
c00092d8:	d9 cc                	fxch   st(4)
c00092da:	d9 ca                	fxch   st(2)
c00092dc:	d9 c9                	fxch   st(1)
c00092de:	d9 cb                	fxch   st(3)
c00092e0:	d9 c9                	fxch   st(1)
c00092e2:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c00092e6:	d9 c9                	fxch   st(1)
c00092e8:	89 c8                	mov    eax,ecx
c00092ea:	dd 5c 24 40          	fstp   QWORD PTR [esp+0x40]
c00092ee:	d9 c9                	fxch   st(1)
c00092f0:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00092f4:	d9 c9                	fxch   st(1)
c00092f6:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c00092fa:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00092fe:	e8 9b fc ff ff       	call   c0008f9e <fp_to_double>
c0009303:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0009307:	89 c8                	mov    eax,ecx
c0009309:	e8 86 fc ff ff       	call   c0008f94 <fp_to_int>
c000930e:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0009312:	29 d9                	sub    ecx,ebx
c0009314:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009318:	83 ea 10             	sub    edx,0x10
c000931b:	d8 e1                	fsub   st,st(1)
c000931d:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0009321:	de c9                	fmulp  st(1),st
c0009323:	de c1                	faddp  st(1),st
c0009325:	d9 c0                	fld    st(0)
c0009327:	d8 8a 54 08 00 00    	fmul   DWORD PTR [edx+0x854]
c000932d:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0009331:	de c1                	faddp  st(1),st
c0009333:	d9 c1                	fld    st(1)
c0009335:	d8 8a 58 08 00 00    	fmul   DWORD PTR [edx+0x858]
c000933b:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c000933f:	de c1                	faddp  st(1),st
c0009341:	d9 c2                	fld    st(2)
c0009343:	d8 8a 5c 08 00 00    	fmul   DWORD PTR [edx+0x85c]
c0009349:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c000934d:	de c1                	faddp  st(1),st
c000934f:	d9 cb                	fxch   st(3)
c0009351:	d8 8a 60 08 00 00    	fmul   DWORD PTR [edx+0x860]
c0009357:	85 c9                	test   ecx,ecx
c0009359:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000935d:	de c1                	faddp  st(1),st
c000935f:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0009363:	0f 8f 6f ff ff ff    	jg     c00092d8 <calc_output_quad+0xfb>
c0009369:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000936d:	de c4                	faddp  st(4),st
c000936f:	d9 cb                	fxch   st(3)
c0009371:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009374:	d9 1f                	fstp   DWORD PTR [edi]
c0009376:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000937a:	de c2                	faddp  st(2),st
c000937c:	d9 c9                	fxch   st(1)
c000937e:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009381:	d9 5f 04             	fstp   DWORD PTR [edi+0x4]
c0009384:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0009388:	de c3                	faddp  st(3),st
c000938a:	d9 ca                	fxch   st(2)
c000938c:	dc 0c 24             	fmul   QWORD PTR [esp]
c000938f:	d9 5f 08             	fstp   DWORD PTR [edi+0x8]
c0009392:	de c1                	faddp  st(1),st
c0009394:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009397:	d9 5f 0c             	fstp   DWORD PTR [edi+0xc]
c000939a:	83 c4 5c             	add    esp,0x5c
c000939d:	5b                   	pop    ebx
c000939e:	5e                   	pop    esi
c000939f:	5f                   	pop    edi
c00093a0:	5d                   	pop    ebp
c00093a1:	c3                   	ret    

c00093a2 <calc_output_hex>:
c00093a2:	55                   	push   ebp
c00093a3:	57                   	push   edi
c00093a4:	89 c7                	mov    edi,eax
c00093a6:	56                   	push   esi
c00093a7:	53                   	push   ebx
c00093a8:	89 d3                	mov    ebx,edx
c00093aa:	83 ec 7c             	sub    esp,0x7c
c00093ad:	dd 84 24 90 00 00 00 	fld    QWORD PTR [esp+0x90]
c00093b4:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00093b7:	dd 1c 24             	fstp   QWORD PTR [esp]
c00093ba:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c00093c1:	e8 ca fb ff ff       	call   c0008f90 <int_to_fp>
c00093c6:	8b 6f 30             	mov    ebp,DWORD PTR [edi+0x30]
c00093c9:	d9 ee                	fldz   
c00093cb:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00093cf:	dd 54 24 10          	fst    QWORD PTR [esp+0x10]
c00093d3:	29 c8                	sub    eax,ecx
c00093d5:	dd 54 24 18          	fst    QWORD PTR [esp+0x18]
c00093d9:	99                   	cdq    
c00093da:	dd 54 24 20          	fst    QWORD PTR [esp+0x20]
c00093de:	f7 fb                	idiv   ebx
c00093e0:	dd 54 24 28          	fst    QWORD PTR [esp+0x28]
c00093e4:	89 da                	mov    edx,ebx
c00093e6:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c00093ea:	0f af d0             	imul   edx,eax
c00093ed:	01 ca                	add    edx,ecx
c00093ef:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c00093f3:	8b 57 34             	mov    edx,DWORD PTR [edi+0x34]
c00093f6:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00093fa:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c00093fd:	0f af c2             	imul   eax,edx
c0009400:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009404:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0009408:	29 c2                	sub    edx,eax
c000940a:	8d 14 97             	lea    edx,[edi+edx*4]
c000940d:	dd 5c 24 58          	fstp   QWORD PTR [esp+0x58]
c0009411:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009415:	e8 84 fb ff ff       	call   c0008f9e <fp_to_double>
c000941a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000941e:	dd 5c 24 50          	fstp   QWORD PTR [esp+0x50]
c0009422:	e8 6d fb ff ff       	call   c0008f94 <fp_to_int>
c0009427:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c000942b:	83 c2 18             	add    edx,0x18
c000942e:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009432:	d8 e1                	fsub   st,st(1)
c0009434:	dd 44 24 50          	fld    QWORD PTR [esp+0x50]
c0009438:	de c9                	fmulp  st(1),st
c000943a:	de c1                	faddp  st(1),st
c000943c:	d9 c0                	fld    st(0)
c000943e:	d8 8a 2c 08 00 00    	fmul   DWORD PTR [edx+0x82c]
c0009444:	dc 44 24 08          	fadd   QWORD PTR [esp+0x8]
c0009448:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000944c:	d9 c0                	fld    st(0)
c000944e:	d8 8a 30 08 00 00    	fmul   DWORD PTR [edx+0x830]
c0009454:	dc 44 24 28          	fadd   QWORD PTR [esp+0x28]
c0009458:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000945c:	d9 c0                	fld    st(0)
c000945e:	d8 8a 34 08 00 00    	fmul   DWORD PTR [edx+0x834]
c0009464:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c0009468:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c000946c:	d9 c0                	fld    st(0)
c000946e:	d8 8a 38 08 00 00    	fmul   DWORD PTR [edx+0x838]
c0009474:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c0009478:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000947c:	d9 c0                	fld    st(0)
c000947e:	d8 8a 3c 08 00 00    	fmul   DWORD PTR [edx+0x83c]
c0009484:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c0009488:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000948c:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c0009492:	29 5c 24 30          	sub    DWORD PTR [esp+0x30],ebx
c0009496:	dd 44 24 58          	fld    QWORD PTR [esp+0x58]
c000949a:	de c1                	faddp  st(1),st
c000949c:	0f 89 6b ff ff ff    	jns    c000940d <calc_output_hex+0x6b>
c00094a2:	d9 ee                	fldz   
c00094a4:	d9 ee                	fldz   
c00094a6:	89 d8                	mov    eax,ebx
c00094a8:	29 c8                	sub    eax,ecx
c00094aa:	dd 54 24 30          	fst    QWORD PTR [esp+0x30]
c00094ae:	89 c1                	mov    ecx,eax
c00094b0:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00094b4:	29 c8                	sub    eax,ecx
c00094b6:	99                   	cdq    
c00094b7:	f7 fb                	idiv   ebx
c00094b9:	89 da                	mov    edx,ebx
c00094bb:	0f af d0             	imul   edx,eax
c00094be:	40                   	inc    eax
c00094bf:	01 d1                	add    ecx,edx
c00094c1:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c00094c6:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c00094ca:	dd 54 24 38          	fst    QWORD PTR [esp+0x38]
c00094ce:	8d 14 87             	lea    edx,[edi+eax*4]
c00094d1:	d9 ee                	fldz   
c00094d3:	d9 ee                	fldz   
c00094d5:	d9 ca                	fxch   st(2)
c00094d7:	eb 08                	jmp    c00094e1 <calc_output_hex+0x13f>
c00094d9:	d9 cc                	fxch   st(4)
c00094db:	d9 cb                	fxch   st(3)
c00094dd:	d9 ca                	fxch   st(2)
c00094df:	d9 c9                	fxch   st(1)
c00094e1:	dd 5c 24 68          	fstp   QWORD PTR [esp+0x68]
c00094e5:	89 c8                	mov    eax,ecx
c00094e7:	dd 5c 24 60          	fstp   QWORD PTR [esp+0x60]
c00094eb:	d9 ca                	fxch   st(2)
c00094ed:	dd 5c 24 58          	fstp   QWORD PTR [esp+0x58]
c00094f1:	dd 5c 24 50          	fstp   QWORD PTR [esp+0x50]
c00094f5:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c00094f9:	e8 a0 fa ff ff       	call   c0008f9e <fp_to_double>
c00094fe:	dd 5c 24 40          	fstp   QWORD PTR [esp+0x40]
c0009502:	89 c8                	mov    eax,ecx
c0009504:	e8 8b fa ff ff       	call   c0008f94 <fp_to_int>
c0009509:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c000950d:	29 d9                	sub    ecx,ebx
c000950f:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009513:	83 ea 18             	sub    edx,0x18
c0009516:	d8 e1                	fsub   st,st(1)
c0009518:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c000951c:	de c9                	fmulp  st(1),st
c000951e:	de c1                	faddp  st(1),st
c0009520:	d9 c0                	fld    st(0)
c0009522:	d8 8a 5c 08 00 00    	fmul   DWORD PTR [edx+0x85c]
c0009528:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c000952c:	de c1                	faddp  st(1),st
c000952e:	d9 c1                	fld    st(1)
c0009530:	d8 8a 60 08 00 00    	fmul   DWORD PTR [edx+0x860]
c0009536:	dd 44 24 60          	fld    QWORD PTR [esp+0x60]
c000953a:	de c1                	faddp  st(1),st
c000953c:	d9 c2                	fld    st(2)
c000953e:	d8 8a 64 08 00 00    	fmul   DWORD PTR [edx+0x864]
c0009544:	dc 44 24 38          	fadd   QWORD PTR [esp+0x38]
c0009548:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000954c:	d9 c2                	fld    st(2)
c000954e:	d8 8a 68 08 00 00    	fmul   DWORD PTR [edx+0x868]
c0009554:	dc 44 24 30          	fadd   QWORD PTR [esp+0x30]
c0009558:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000955c:	d9 c2                	fld    st(2)
c000955e:	d8 8a 6c 08 00 00    	fmul   DWORD PTR [edx+0x86c]
c0009564:	dd 44 24 50          	fld    QWORD PTR [esp+0x50]
c0009568:	de c1                	faddp  st(1),st
c000956a:	d9 cb                	fxch   st(3)
c000956c:	d8 8a 70 08 00 00    	fmul   DWORD PTR [edx+0x870]
c0009572:	85 c9                	test   ecx,ecx
c0009574:	dd 44 24 68          	fld    QWORD PTR [esp+0x68]
c0009578:	de c1                	faddp  st(1),st
c000957a:	dd 44 24 58          	fld    QWORD PTR [esp+0x58]
c000957e:	0f 8f 55 ff ff ff    	jg     c00094d9 <calc_output_hex+0x137>
c0009584:	d9 cb                	fxch   st(3)
c0009586:	dc 44 24 08          	fadd   QWORD PTR [esp+0x8]
c000958a:	dc 0c 24             	fmul   QWORD PTR [esp]
c000958d:	d9 1e                	fstp   DWORD PTR [esi]
c000958f:	d9 c9                	fxch   st(1)
c0009591:	dc 44 24 28          	fadd   QWORD PTR [esp+0x28]
c0009595:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009598:	d9 5e 04             	fstp   DWORD PTR [esi+0x4]
c000959b:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000959f:	dc 44 24 38          	fadd   QWORD PTR [esp+0x38]
c00095a3:	dc 0c 24             	fmul   QWORD PTR [esp]
c00095a6:	d9 5e 08             	fstp   DWORD PTR [esi+0x8]
c00095a9:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00095ad:	dc 44 24 30          	fadd   QWORD PTR [esp+0x30]
c00095b1:	dc 0c 24             	fmul   QWORD PTR [esp]
c00095b4:	d9 5e 0c             	fstp   DWORD PTR [esi+0xc]
c00095b7:	d9 ca                	fxch   st(2)
c00095b9:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c00095bd:	dc 0c 24             	fmul   QWORD PTR [esp]
c00095c0:	d9 5e 10             	fstp   DWORD PTR [esi+0x10]
c00095c3:	de c1                	faddp  st(1),st
c00095c5:	dc 0c 24             	fmul   QWORD PTR [esp]
c00095c8:	d9 5e 14             	fstp   DWORD PTR [esi+0x14]
c00095cb:	83 c4 7c             	add    esp,0x7c
c00095ce:	5b                   	pop    ebx
c00095cf:	5e                   	pop    esi
c00095d0:	5f                   	pop    edi
c00095d1:	5d                   	pop    ebp
c00095d2:	c3                   	ret    

c00095d3 <sinc_reset>:
c00095d3:	56                   	push   esi
c00095d4:	53                   	push   ebx
c00095d5:	51                   	push   ecx
c00095d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00095da:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c00095dd:	85 db                	test   ebx,ebx
c00095df:	74 51                	je     c0009632 <sinc_reset+0x5f>
c00095e1:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c00095e8:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00095ef:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c00095f6:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c00095fc:	d9 ee                	fldz   
c00095fe:	dd 53 28             	fst    QWORD PTR [ebx+0x28]
c0009601:	dd 5b 20             	fstp   QWORD PTR [ebx+0x20]
c0009604:	52                   	push   edx
c0009605:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0009608:	c1 e0 02             	shl    eax,0x2
c000960b:	50                   	push   eax
c000960c:	6a 00                	push   0x0
c000960e:	56                   	push   esi
c000960f:	e8 f4 6f ff ff       	call   c0000608 <memset>
c0009614:	83 c4 0c             	add    esp,0xc
c0009617:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000961a:	c1 e0 02             	shl    eax,0x2
c000961d:	50                   	push   eax
c000961e:	68 aa 00 00 00       	push   0xaa
c0009623:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0009626:	8d 04 86             	lea    eax,[esi+eax*4]
c0009629:	50                   	push   eax
c000962a:	e8 d9 6f ff ff       	call   c0000608 <memset>
c000962f:	83 c4 10             	add    esp,0x10
c0009632:	58                   	pop    eax
c0009633:	5b                   	pop    ebx
c0009634:	5e                   	pop    esi
c0009635:	c3                   	ret    

c0009636 <calc_output_multi>:
c0009636:	55                   	push   ebp
c0009637:	57                   	push   edi
c0009638:	8d 78 44             	lea    edi,[eax+0x44]
c000963b:	56                   	push   esi
c000963c:	89 c6                	mov    esi,eax
c000963e:	53                   	push   ebx
c000963f:	8d 80 44 04 00 00    	lea    eax,[eax+0x444]
c0009645:	83 ec 4c             	sub    esp,0x4c
c0009648:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000964c:	dd 44 24 64          	fld    QWORD PTR [esp+0x64]
c0009650:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009654:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0009658:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000965c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009660:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009663:	e8 28 f9 ff ff       	call   c0008f90 <int_to_fp>
c0009668:	8b 6e 34             	mov    ebp,DWORD PTR [esi+0x34]
c000966b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000966f:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c0009673:	99                   	cdq    
c0009674:	f7 7c 24 10          	idiv   DWORD PTR [esp+0x10]
c0009678:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000967c:	0f af d0             	imul   edx,eax
c000967f:	0f af c3             	imul   eax,ebx
c0009682:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009686:	29 c5                	sub    ebp,eax
c0009688:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000968c:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0009690:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c0009697:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000969b:	52                   	push   edx
c000969c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096a0:	6a 00                	push   0x0
c00096a2:	57                   	push   edi
c00096a3:	e8 60 6f ff ff       	call   c0000608 <memset>
c00096a8:	83 c4 10             	add    esp,0x10
c00096ab:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00096af:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c00096b3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00096b7:	e8 e2 f8 ff ff       	call   c0008f9e <fp_to_double>
c00096bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00096c0:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00096c4:	e8 cb f8 ff ff       	call   c0008f94 <fp_to_int>
c00096c9:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00096cc:	89 d9                	mov    ecx,ebx
c00096ce:	d9 04 82             	fld    DWORD PTR [edx+eax*4]
c00096d1:	d9 44 82 04          	fld    DWORD PTR [edx+eax*4+0x4]
c00096d5:	d8 e1                	fsub   st,st(1)
c00096d7:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00096db:	de c9                	fmulp  st(1),st
c00096dd:	de c1                	faddp  st(1),st
c00096df:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c00096e3:	89 c8                	mov    eax,ecx
c00096e5:	bd 08 00 00 00       	mov    ebp,0x8
c00096ea:	99                   	cdq    
c00096eb:	f7 fd                	idiv   ebp
c00096ed:	4a                   	dec    edx
c00096ee:	83 fa 06             	cmp    edx,0x6
c00096f1:	77 07                	ja     c00096fa <calc_output_multi+0xc4>
c00096f3:	ff 24 95 60 fd 01 c0 	jmp    DWORD PTR [edx*4-0x3ffe02a0]
c00096fa:	49                   	dec    ecx
c00096fb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00096ff:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009702:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009709:	d9 c1                	fld    st(1)
c000970b:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c000970f:	dc 00                	fadd   QWORD PTR [eax]
c0009711:	dd 18                	fstp   QWORD PTR [eax]
c0009713:	49                   	dec    ecx
c0009714:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009718:	8d 04 cf             	lea    eax,[edi+ecx*8]
c000971b:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009722:	d9 c1                	fld    st(1)
c0009724:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009728:	dc 00                	fadd   QWORD PTR [eax]
c000972a:	dd 18                	fstp   QWORD PTR [eax]
c000972c:	49                   	dec    ecx
c000972d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009731:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009734:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000973b:	d9 c1                	fld    st(1)
c000973d:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009741:	dc 00                	fadd   QWORD PTR [eax]
c0009743:	dd 18                	fstp   QWORD PTR [eax]
c0009745:	49                   	dec    ecx
c0009746:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000974a:	8d 04 cf             	lea    eax,[edi+ecx*8]
c000974d:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009754:	d9 c1                	fld    st(1)
c0009756:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c000975a:	dc 00                	fadd   QWORD PTR [eax]
c000975c:	dd 18                	fstp   QWORD PTR [eax]
c000975e:	49                   	dec    ecx
c000975f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009763:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009766:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000976d:	d9 c1                	fld    st(1)
c000976f:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009773:	dc 00                	fadd   QWORD PTR [eax]
c0009775:	dd 18                	fstp   QWORD PTR [eax]
c0009777:	49                   	dec    ecx
c0009778:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000977c:	8d 04 cf             	lea    eax,[edi+ecx*8]
c000977f:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009786:	d9 c1                	fld    st(1)
c0009788:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c000978c:	dc 00                	fadd   QWORD PTR [eax]
c000978e:	dd 18                	fstp   QWORD PTR [eax]
c0009790:	49                   	dec    ecx
c0009791:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009795:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009798:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000979f:	d9 c1                	fld    st(1)
c00097a1:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00097a5:	dc 00                	fadd   QWORD PTR [eax]
c00097a7:	dd 18                	fstp   QWORD PTR [eax]
c00097a9:	49                   	dec    ecx
c00097aa:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00097ae:	8d 04 cf             	lea    eax,[edi+ecx*8]
c00097b1:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00097b8:	d9 c1                	fld    st(1)
c00097ba:	85 c9                	test   ecx,ecx
c00097bc:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00097c0:	dc 00                	fadd   QWORD PTR [eax]
c00097c2:	dd 18                	fstp   QWORD PTR [eax]
c00097c4:	0f 8f 19 ff ff ff    	jg     c00096e3 <calc_output_multi+0xad>
c00097ca:	dd d9                	fstp   st(1)
c00097cc:	01 5c 24 0c          	add    DWORD PTR [esp+0xc],ebx
c00097d0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00097d4:	29 54 24 14          	sub    DWORD PTR [esp+0x14],edx
c00097d8:	0f 89 d1 fe ff ff    	jns    c00096af <calc_output_multi+0x79>
c00097de:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00097e2:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00097e6:	89 d1                	mov    ecx,edx
c00097e8:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00097ec:	29 c8                	sub    eax,ecx
c00097ee:	99                   	cdq    
c00097ef:	f7 7c 24 10          	idiv   DWORD PTR [esp+0x10]
c00097f3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00097f7:	0f af d0             	imul   edx,eax
c00097fa:	40                   	inc    eax
c00097fb:	01 d1                	add    ecx,edx
c00097fd:	0f af c3             	imul   eax,ebx
c0009800:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009804:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c0009807:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000980b:	50                   	push   eax
c000980c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009810:	6a 00                	push   0x0
c0009812:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009816:	e8 ed 6d ff ff       	call   c0000608 <memset>
c000981b:	83 c4 10             	add    esp,0x10
c000981e:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0009822:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0009826:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000982a:	e8 6f f7 ff ff       	call   c0008f9e <fp_to_double>
c000982f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009833:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009837:	e8 58 f7 ff ff       	call   c0008f94 <fp_to_int>
c000983c:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000983f:	89 d9                	mov    ecx,ebx
c0009841:	d9 04 82             	fld    DWORD PTR [edx+eax*4]
c0009844:	d9 44 82 04          	fld    DWORD PTR [edx+eax*4+0x4]
c0009848:	d8 e1                	fsub   st,st(1)
c000984a:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000984e:	de c9                	fmulp  st(1),st
c0009850:	de c1                	faddp  st(1),st
c0009852:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0009856:	89 c8                	mov    eax,ecx
c0009858:	bd 08 00 00 00       	mov    ebp,0x8
c000985d:	99                   	cdq    
c000985e:	f7 fd                	idiv   ebp
c0009860:	4a                   	dec    edx
c0009861:	83 fa 06             	cmp    edx,0x6
c0009864:	77 07                	ja     c000986d <calc_output_multi+0x237>
c0009866:	ff 24 95 7c fd 01 c0 	jmp    DWORD PTR [edx*4-0x3ffe0284]
c000986d:	49                   	dec    ecx
c000986e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009872:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009876:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009879:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009880:	d9 c1                	fld    st(1)
c0009882:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009886:	dc 00                	fadd   QWORD PTR [eax]
c0009888:	dd 18                	fstp   QWORD PTR [eax]
c000988a:	49                   	dec    ecx
c000988b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000988f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009893:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009896:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000989d:	d9 c1                	fld    st(1)
c000989f:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00098a3:	dc 00                	fadd   QWORD PTR [eax]
c00098a5:	dd 18                	fstp   QWORD PTR [eax]
c00098a7:	49                   	dec    ecx
c00098a8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00098ac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00098b0:	8d 04 c8             	lea    eax,[eax+ecx*8]
c00098b3:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00098ba:	d9 c1                	fld    st(1)
c00098bc:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00098c0:	dc 00                	fadd   QWORD PTR [eax]
c00098c2:	dd 18                	fstp   QWORD PTR [eax]
c00098c4:	49                   	dec    ecx
c00098c5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00098c9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00098cd:	8d 04 c8             	lea    eax,[eax+ecx*8]
c00098d0:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00098d7:	d9 c1                	fld    st(1)
c00098d9:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00098dd:	dc 00                	fadd   QWORD PTR [eax]
c00098df:	dd 18                	fstp   QWORD PTR [eax]
c00098e1:	49                   	dec    ecx
c00098e2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00098e6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00098ea:	8d 04 c8             	lea    eax,[eax+ecx*8]
c00098ed:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00098f4:	d9 c1                	fld    st(1)
c00098f6:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00098fa:	dc 00                	fadd   QWORD PTR [eax]
c00098fc:	dd 18                	fstp   QWORD PTR [eax]
c00098fe:	49                   	dec    ecx
c00098ff:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009903:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009907:	8d 04 c8             	lea    eax,[eax+ecx*8]
c000990a:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009911:	d9 c1                	fld    st(1)
c0009913:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009917:	dc 00                	fadd   QWORD PTR [eax]
c0009919:	dd 18                	fstp   QWORD PTR [eax]
c000991b:	49                   	dec    ecx
c000991c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009920:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009924:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009927:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000992e:	d9 c1                	fld    st(1)
c0009930:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009934:	dc 00                	fadd   QWORD PTR [eax]
c0009936:	dd 18                	fstp   QWORD PTR [eax]
c0009938:	49                   	dec    ecx
c0009939:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000993d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009941:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009944:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000994b:	d9 c1                	fld    st(1)
c000994d:	85 c9                	test   ecx,ecx
c000994f:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009953:	dc 00                	fadd   QWORD PTR [eax]
c0009955:	dd 18                	fstp   QWORD PTR [eax]
c0009957:	0f 8f f9 fe ff ff    	jg     c0009856 <calc_output_multi+0x220>
c000995d:	dd d9                	fstp   st(1)
c000995f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009963:	29 5c 24 0c          	sub    DWORD PTR [esp+0xc],ebx
c0009967:	29 54 24 14          	sub    DWORD PTR [esp+0x14],edx
c000996b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0009970:	0f 8f ac fe ff ff    	jg     c0009822 <calc_output_multi+0x1ec>
c0009976:	b9 08 00 00 00       	mov    ecx,0x8
c000997b:	89 d8                	mov    eax,ebx
c000997d:	99                   	cdq    
c000997e:	f7 f9                	idiv   ecx
c0009980:	4a                   	dec    edx
c0009981:	83 fa 06             	cmp    edx,0x6
c0009984:	77 07                	ja     c000998d <calc_output_multi+0x357>
c0009986:	ff 24 95 98 fd 01 c0 	jmp    DWORD PTR [edx*4-0x3ffe0268]
c000998d:	4b                   	dec    ebx
c000998e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009992:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009995:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009998:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000999c:	d8 c9                	fmul   st,st(1)
c000999e:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c00099a1:	4b                   	dec    ebx
c00099a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00099a6:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c00099a9:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c00099ac:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00099b0:	d8 c9                	fmul   st,st(1)
c00099b2:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c00099b5:	4b                   	dec    ebx
c00099b6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00099ba:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c00099bd:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c00099c0:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00099c4:	d8 c9                	fmul   st,st(1)
c00099c6:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c00099c9:	4b                   	dec    ebx
c00099ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00099ce:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c00099d1:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c00099d4:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00099d8:	d8 c9                	fmul   st,st(1)
c00099da:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c00099dd:	4b                   	dec    ebx
c00099de:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00099e2:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c00099e5:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c00099e8:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00099ec:	d8 c9                	fmul   st,st(1)
c00099ee:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c00099f1:	4b                   	dec    ebx
c00099f2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00099f6:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c00099f9:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c00099fc:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009a00:	d8 c9                	fmul   st,st(1)
c0009a02:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009a05:	4b                   	dec    ebx
c0009a06:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009a0a:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009a0d:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009a10:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009a14:	d8 c9                	fmul   st,st(1)
c0009a16:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009a19:	4b                   	dec    ebx
c0009a1a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009a1e:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009a21:	85 db                	test   ebx,ebx
c0009a23:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009a26:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009a2a:	d8 c9                	fmul   st,st(1)
c0009a2c:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009a2f:	0f 8f 46 ff ff ff    	jg     c000997b <calc_output_multi+0x345>
c0009a35:	dd d8                	fstp   st(0)
c0009a37:	83 c4 4c             	add    esp,0x4c
c0009a3a:	5b                   	pop    ebx
c0009a3b:	5e                   	pop    esi
c0009a3c:	5f                   	pop    edi
c0009a3d:	5d                   	pop    ebp
c0009a3e:	c3                   	ret    

c0009a3f <double_to_fp>:
c0009a3f:	d9 05 ec fe 01 c0    	fld    DWORD PTR ds:0xc001feec
c0009a45:	dc 4c 24 04          	fmul   QWORD PTR [esp+0x4]
c0009a49:	dd 5c 24 04          	fstp   QWORD PTR [esp+0x4]
c0009a4d:	e9 0e 4b 01 00       	jmp    c001e560 <lrint>

c0009a52 <fmod_one>:
c0009a52:	83 ec 2c             	sub    esp,0x2c
c0009a55:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009a59:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009a5d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009a61:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009a65:	83 ec 08             	sub    esp,0x8
c0009a68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a6c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a70:	e8 eb 4a 01 00       	call   c001e560 <lrint>
c0009a75:	83 c4 10             	add    esp,0x10
c0009a78:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009a7c:	db 44 24 04          	fild   DWORD PTR [esp+0x4]
c0009a80:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009a84:	de e1                	fsubrp st(1),st
c0009a86:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009a8a:	d9 ee                	fldz   
c0009a8c:	dc 5c 24 18          	fcomp  QWORD PTR [esp+0x18]
c0009a90:	df e0                	fnstsw ax
c0009a92:	f6 c4 45             	test   ah,0x45
c0009a95:	75 0a                	jne    c0009aa1 <fmod_one+0x4f>
c0009a97:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0009a9b:	d9 e8                	fld1   
c0009a9d:	de c1                	faddp  st(1),st
c0009a9f:	eb 04                	jmp    c0009aa5 <fmod_one+0x53>
c0009aa1:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0009aa5:	83 c4 2c             	add    esp,0x2c
c0009aa8:	c3                   	ret    

c0009aa9 <prepare_data>:
c0009aa9:	55                   	push   ebp
c0009aaa:	57                   	push   edi
c0009aab:	56                   	push   esi
c0009aac:	53                   	push   ebx
c0009aad:	83 ec 1c             	sub    esp,0x1c
c0009ab0:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0009ab4:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009ab8:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c0009abc:	0f 89 57 01 00 00    	jns    c0009c19 <prepare_data+0x170>
c0009ac2:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0009ac5:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0009ac8:	85 d2                	test   edx,edx
c0009aca:	75 0d                	jne    c0009ad9 <prepare_data+0x30>
c0009acc:	8d 14 36             	lea    edx,[esi+esi*1]
c0009acf:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0009ad2:	29 d0                	sub    eax,edx
c0009ad4:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c0009ad7:	eb 44                	jmp    c0009b1d <prepare_data+0x74>
c0009ad9:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c0009adc:	8d 0c 37             	lea    ecx,[edi+esi*1]
c0009adf:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c0009ae2:	39 c1                	cmp    ecx,eax
c0009ae4:	7d 04                	jge    c0009aea <prepare_data+0x41>
c0009ae6:	29 d0                	sub    eax,edx
c0009ae8:	eb 2d                	jmp    c0009b17 <prepare_data+0x6e>
c0009aea:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c0009af0:	29 d7                	sub    edi,edx
c0009af2:	01 f7                	add    edi,esi
c0009af4:	51                   	push   ecx
c0009af5:	29 f2                	sub    edx,esi
c0009af7:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c0009afe:	8d 14 90             	lea    edx,[eax+edx*4]
c0009b01:	51                   	push   ecx
c0009b02:	52                   	push   edx
c0009b03:	50                   	push   eax
c0009b04:	e8 91 6a ff ff       	call   c000059a <memmove>
c0009b09:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0009b0c:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c0009b0f:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c0009b12:	29 f0                	sub    eax,esi
c0009b14:	83 c4 10             	add    esp,0x10
c0009b17:	29 f0                	sub    eax,esi
c0009b19:	79 02                	jns    c0009b1d <prepare_data+0x74>
c0009b1b:	31 c0                	xor    eax,eax
c0009b1d:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0009b20:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0009b23:	29 ef                	sub    edi,ebp
c0009b25:	39 c7                	cmp    edi,eax
c0009b27:	7e 02                	jle    c0009b2b <prepare_data+0x82>
c0009b29:	89 c7                	mov    edi,eax
c0009b2b:	89 f8                	mov    eax,edi
c0009b2d:	99                   	cdq    
c0009b2e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009b31:	b8 15 00 00 00       	mov    eax,0x15
c0009b36:	29 d7                	sub    edi,edx
c0009b38:	0f 88 dd 00 00 00    	js     c0009c1b <prepare_data+0x172>
c0009b3e:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0009b41:	8d 14 39             	lea    edx,[ecx+edi*1]
c0009b44:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c0009b47:	0f 8f ce 00 00 00    	jg     c0009c1b <prepare_data+0x172>
c0009b4d:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c0009b53:	50                   	push   eax
c0009b54:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c0009b5b:	50                   	push   eax
c0009b5c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009b60:	8b 00                	mov    eax,DWORD PTR [eax]
c0009b62:	8d 04 a8             	lea    eax,[eax+ebp*4]
c0009b65:	50                   	push   eax
c0009b66:	8d 04 8a             	lea    eax,[edx+ecx*4]
c0009b69:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0009b6d:	50                   	push   eax
c0009b6e:	e8 5f 6a ff ff       	call   c00005d2 <memcpy>
c0009b73:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0009b76:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c0009b79:	01 fd                	add    ebp,edi
c0009b7b:	01 f9                	add    ecx,edi
c0009b7d:	83 c4 10             	add    esp,0x10
c0009b80:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c0009b83:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c0009b86:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c0009b89:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009b8d:	0f 85 86 00 00 00    	jne    c0009c19 <prepare_data+0x170>
c0009b93:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0009b96:	89 e8                	mov    eax,ebp
c0009b98:	8d 3c 36             	lea    edi,[esi+esi*1]
c0009b9b:	29 c8                	sub    eax,ecx
c0009b9d:	39 f8                	cmp    eax,edi
c0009b9f:	7d 78                	jge    c0009c19 <prepare_data+0x170>
c0009ba1:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0009ba5:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c0009ba9:	74 6e                	je     c0009c19 <prepare_data+0x170>
c0009bab:	8d 7e 04             	lea    edi,[esi+0x4]
c0009bae:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0009bb2:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c0009bb5:	29 ef                	sub    edi,ebp
c0009bb7:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0009bbb:	7c 29                	jl     c0009be6 <prepare_data+0x13d>
c0009bbd:	8d 3c 30             	lea    edi,[eax+esi*1]
c0009bc0:	29 f1                	sub    ecx,esi
c0009bc2:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c0009bc9:	55                   	push   ebp
c0009bca:	50                   	push   eax
c0009bcb:	8d 04 8a             	lea    eax,[edx+ecx*4]
c0009bce:	50                   	push   eax
c0009bcf:	52                   	push   edx
c0009bd0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009bd4:	e8 c1 69 ff ff       	call   c000059a <memmove>
c0009bd9:	83 c4 10             	add    esp,0x10
c0009bdc:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c0009bdf:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c0009be2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009be6:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009be9:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009bec:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c0009bef:	83 c6 05             	add    esi,0x5
c0009bf2:	78 07                	js     c0009bfb <prepare_data+0x152>
c0009bf4:	8d 3c 30             	lea    edi,[eax+esi*1]
c0009bf7:	39 cf                	cmp    edi,ecx
c0009bf9:	7e 04                	jle    c0009bff <prepare_data+0x156>
c0009bfb:	89 ce                	mov    esi,ecx
c0009bfd:	29 c6                	sub    esi,eax
c0009bff:	8d 04 82             	lea    eax,[edx+eax*4]
c0009c02:	51                   	push   ecx
c0009c03:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c0009c0a:	51                   	push   ecx
c0009c0b:	6a 00                	push   0x0
c0009c0d:	50                   	push   eax
c0009c0e:	e8 f5 69 ff ff       	call   c0000608 <memset>
c0009c13:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c0009c16:	83 c4 10             	add    esp,0x10
c0009c19:	31 c0                	xor    eax,eax
c0009c1b:	83 c4 1c             	add    esp,0x1c
c0009c1e:	5b                   	pop    ebx
c0009c1f:	5e                   	pop    esi
c0009c20:	5f                   	pop    edi
c0009c21:	5d                   	pop    ebp
c0009c22:	c3                   	ret    

c0009c23 <sinc_multichan_vari_process>:
c0009c23:	55                   	push   ebp
c0009c24:	b8 05 00 00 00       	mov    eax,0x5
c0009c29:	57                   	push   edi
c0009c2a:	56                   	push   esi
c0009c2b:	53                   	push   ebx
c0009c2c:	83 ec 3c             	sub    esp,0x3c
c0009c2f:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0009c33:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0009c37:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c0009c3a:	85 db                	test   ebx,ebx
c0009c3c:	0f 84 5d 02 00 00    	je     c0009e9f <sinc_multichan_vari_process+0x27c>
c0009c42:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0009c45:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009c48:	0f af d0             	imul   edx,eax
c0009c4b:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0009c4e:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c0009c52:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0009c59:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0009c5c:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0009c63:	dd 06                	fld    QWORD PTR [esi]
c0009c65:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c0009c69:	55                   	push   ebp
c0009c6a:	55                   	push   ebp
c0009c6b:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009c6e:	e8 d9 f2 ff ff       	call   c0008f4c <is_bad_src_ratio>
c0009c73:	89 c2                	mov    edx,eax
c0009c75:	58                   	pop    eax
c0009c76:	85 d2                	test   edx,edx
c0009c78:	59                   	pop    ecx
c0009c79:	b8 16 00 00 00       	mov    eax,0x16
c0009c7e:	0f 85 1b 02 00 00    	jne    c0009e9f <sinc_multichan_vari_process+0x27c>
c0009c84:	d9 05 f0 fe 01 c0    	fld    DWORD PTR ds:0xc001fef0
c0009c8a:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c0009c8d:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c0009c90:	dd 06                	fld    QWORD PTR [esi]
c0009c92:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c0009c95:	d8 d1                	fcom   st(1)
c0009c97:	df e0                	fnstsw ax
c0009c99:	9e                   	sahf   
c0009c9a:	76 0f                	jbe    c0009cab <sinc_multichan_vari_process+0x88>
c0009c9c:	dd d8                	fstp   st(0)
c0009c9e:	d9 e8                	fld1   
c0009ca0:	d8 d9                	fcomp  st(1)
c0009ca2:	df e0                	fnstsw ax
c0009ca4:	9e                   	sahf   
c0009ca5:	77 0f                	ja     c0009cb6 <sinc_multichan_vari_process+0x93>
c0009ca7:	dd d8                	fstp   st(0)
c0009ca9:	eb 11                	jmp    c0009cbc <sinc_multichan_vari_process+0x99>
c0009cab:	dd d9                	fstp   st(1)
c0009cad:	d9 e8                	fld1   
c0009caf:	d8 d9                	fcomp  st(1)
c0009cb1:	df e0                	fnstsw ax
c0009cb3:	9e                   	sahf   
c0009cb4:	76 04                	jbe    c0009cba <sinc_multichan_vari_process+0x97>
c0009cb6:	de f9                	fdivp  st(1),st
c0009cb8:	eb 02                	jmp    c0009cbc <sinc_multichan_vari_process+0x99>
c0009cba:	dd d8                	fstp   st(0)
c0009cbc:	83 ec 10             	sub    esp,0x10
c0009cbf:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009cc2:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009cc5:	e8 96 48 01 00       	call   c001e560 <lrint>
c0009cca:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c0009ccd:	40                   	inc    eax
c0009cce:	dd 14 24             	fst    QWORD PTR [esp]
c0009cd1:	0f af c5             	imul   eax,ebp
c0009cd4:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009cd8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009cdc:	e8 71 fd ff ff       	call   c0009a52 <fmod_one>
c0009ce1:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0009ce4:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009ce8:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009ceb:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0009cef:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009cf3:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c0009cf7:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009cfa:	e8 61 48 01 00       	call   c001e560 <lrint>
c0009cff:	0f af e8             	imul   ebp,eax
c0009d02:	d9 e8                	fld1   
c0009d04:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009d08:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c0009d0c:	01 e8                	add    eax,ebp
c0009d0e:	dc 05 58 fd 01 c0    	fadd   QWORD PTR ds:0xc001fd58
c0009d14:	99                   	cdq    
c0009d15:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009d19:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c0009d1c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0009d1f:	83 c4 10             	add    esp,0x10
c0009d22:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009d25:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c0009d28:	7d 4b                	jge    c0009d75 <sinc_multichan_vari_process+0x152>
c0009d2a:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009d2d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009d30:	01 c8                	add    eax,ecx
c0009d32:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c0009d35:	99                   	cdq    
c0009d36:	f7 f9                	idiv   ecx
c0009d38:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0009d3c:	7d 09                	jge    c0009d47 <sinc_multichan_vari_process+0x124>
c0009d3e:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0009d41:	85 c0                	test   eax,eax
c0009d43:	79 57                	jns    c0009d9c <sinc_multichan_vari_process+0x179>
c0009d45:	eb 70                	jmp    c0009db7 <sinc_multichan_vari_process+0x194>
c0009d47:	51                   	push   ecx
c0009d48:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009d4c:	57                   	push   edi
c0009d4d:	53                   	push   ebx
c0009d4e:	e8 56 fd ff ff       	call   c0009aa9 <prepare_data>
c0009d53:	83 c4 10             	add    esp,0x10
c0009d56:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0009d59:	85 c0                	test   eax,eax
c0009d5b:	0f 85 3e 01 00 00    	jne    c0009e9f <sinc_multichan_vari_process+0x27c>
c0009d61:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009d64:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009d67:	01 c8                	add    eax,ecx
c0009d69:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c0009d6c:	99                   	cdq    
c0009d6d:	f7 f9                	idiv   ecx
c0009d6f:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0009d73:	7c c9                	jl     c0009d3e <sinc_multichan_vari_process+0x11b>
c0009d75:	dd 04 24             	fld    QWORD PTR [esp]
c0009d78:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c0009d7b:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009d7f:	dd 1e                	fstp   QWORD PTR [esi]
c0009d81:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0009d84:	99                   	cdq    
c0009d85:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009d88:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c0009d8b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009d8e:	99                   	cdq    
c0009d8f:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009d92:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c0009d95:	31 c0                	xor    eax,eax
c0009d97:	e9 03 01 00 00       	jmp    c0009e9f <sinc_multichan_vari_process+0x27c>
c0009d9c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009da0:	dd 04 24             	fld    QWORD PTR [esp]
c0009da3:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c0009da6:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c0009daa:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c0009dae:	d9 c9                	fxch   st(1)
c0009db0:	de d9                	fcompp 
c0009db2:	df e0                	fnstsw ax
c0009db4:	9e                   	sahf   
c0009db5:	73 be                	jae    c0009d75 <sinc_multichan_vari_process+0x152>
c0009db7:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c0009dbb:	7e 31                	jle    c0009dee <sinc_multichan_vari_process+0x1cb>
c0009dbd:	83 ec 10             	sub    esp,0x10
c0009dc0:	dd 06                	fld    QWORD PTR [esi]
c0009dc2:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c0009dc5:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009dc8:	e8 73 47 01 00       	call   c001e540 <fabs>
c0009dcd:	83 c4 10             	add    esp,0x10
c0009dd0:	dc 1d e0 fe 01 c0    	fcomp  QWORD PTR ds:0xc001fee0
c0009dd6:	df e0                	fnstsw ax
c0009dd8:	9e                   	sahf   
c0009dd9:	76 13                	jbe    c0009dee <sinc_multichan_vari_process+0x1cb>
c0009ddb:	dd 06                	fld    QWORD PTR [esi]
c0009ddd:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c0009de0:	d8 e1                	fsub   st,st(1)
c0009de2:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c0009de5:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c0009de8:	de c1                	faddp  st(1),st
c0009dea:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0009dee:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c0009df1:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009df5:	d9 e8                	fld1   
c0009df7:	d8 d9                	fcomp  st(1)
c0009df9:	df e0                	fnstsw ax
c0009dfb:	9e                   	sahf   
c0009dfc:	77 04                	ja     c0009e02 <sinc_multichan_vari_process+0x1df>
c0009dfe:	dd d8                	fstp   st(0)
c0009e00:	d9 e8                	fld1   
c0009e02:	de c9                	fmulp  st(1),st
c0009e04:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009e08:	50                   	push   eax
c0009e09:	50                   	push   eax
c0009e0a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e0e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e12:	e8 28 fc ff ff       	call   c0009a3f <double_to_fp>
c0009e17:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0009e1b:	89 c5                	mov    ebp,eax
c0009e1d:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c0009e21:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009e24:	e8 16 fc ff ff       	call   c0009a3f <double_to_fp>
c0009e29:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0009e2c:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c0009e2f:	8d 14 8a             	lea    edx,[edx+ecx*4]
c0009e32:	89 c1                	mov    ecx,eax
c0009e34:	52                   	push   edx
c0009e35:	89 d8                	mov    eax,ebx
c0009e37:	dd 44 24 2c          	fld    QWORD PTR [esp+0x2c]
c0009e3b:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c0009e3e:	52                   	push   edx
c0009e3f:	52                   	push   edx
c0009e40:	89 ea                	mov    edx,ebp
c0009e42:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009e45:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009e48:	e8 e9 f7 ff ff       	call   c0009636 <calc_output_multi>
c0009e4d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0009e50:	d9 e8                	fld1   
c0009e52:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c0009e55:	dc 74 24 28          	fdiv   QWORD PTR [esp+0x28]
c0009e59:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c0009e5d:	83 c4 10             	add    esp,0x10
c0009e60:	dd 14 24             	fst    QWORD PTR [esp]
c0009e63:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0009e67:	e8 e6 fb ff ff       	call   c0009a52 <fmod_one>
c0009e6c:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0009e6f:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009e73:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009e76:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0009e7a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009e7e:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c0009e82:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009e85:	e8 d6 46 01 00       	call   c001e560 <lrint>
c0009e8a:	0f af e8             	imul   ebp,eax
c0009e8d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009e91:	01 e8                	add    eax,ebp
c0009e93:	99                   	cdq    
c0009e94:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c0009e97:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0009e9a:	e9 80 fe ff ff       	jmp    c0009d1f <sinc_multichan_vari_process+0xfc>
c0009e9f:	83 c4 3c             	add    esp,0x3c
c0009ea2:	5b                   	pop    ebx
c0009ea3:	5e                   	pop    esi
c0009ea4:	5f                   	pop    edi
c0009ea5:	5d                   	pop    ebp
c0009ea6:	c3                   	ret    

c0009ea7 <sinc_hex_vari_process>:
c0009ea7:	55                   	push   ebp
c0009ea8:	b8 05 00 00 00       	mov    eax,0x5
c0009ead:	57                   	push   edi
c0009eae:	56                   	push   esi
c0009eaf:	53                   	push   ebx
c0009eb0:	83 ec 3c             	sub    esp,0x3c
c0009eb3:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0009eb7:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0009ebb:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c0009ebe:	85 db                	test   ebx,ebx
c0009ec0:	0f 84 58 02 00 00    	je     c000a11e <sinc_hex_vari_process+0x277>
c0009ec6:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0009ec9:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009ecc:	0f af d0             	imul   edx,eax
c0009ecf:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0009ed2:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c0009ed6:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0009edd:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0009ee0:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0009ee7:	dd 06                	fld    QWORD PTR [esi]
c0009ee9:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c0009eed:	55                   	push   ebp
c0009eee:	55                   	push   ebp
c0009eef:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009ef2:	e8 55 f0 ff ff       	call   c0008f4c <is_bad_src_ratio>
c0009ef7:	89 c2                	mov    edx,eax
c0009ef9:	58                   	pop    eax
c0009efa:	85 d2                	test   edx,edx
c0009efc:	59                   	pop    ecx
c0009efd:	b8 16 00 00 00       	mov    eax,0x16
c0009f02:	0f 85 16 02 00 00    	jne    c000a11e <sinc_hex_vari_process+0x277>
c0009f08:	d9 05 f0 fe 01 c0    	fld    DWORD PTR ds:0xc001fef0
c0009f0e:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c0009f11:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c0009f14:	dd 06                	fld    QWORD PTR [esi]
c0009f16:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c0009f19:	d8 d1                	fcom   st(1)
c0009f1b:	df e0                	fnstsw ax
c0009f1d:	9e                   	sahf   
c0009f1e:	76 0f                	jbe    c0009f2f <sinc_hex_vari_process+0x88>
c0009f20:	dd d8                	fstp   st(0)
c0009f22:	d9 e8                	fld1   
c0009f24:	d8 d9                	fcomp  st(1)
c0009f26:	df e0                	fnstsw ax
c0009f28:	9e                   	sahf   
c0009f29:	77 0f                	ja     c0009f3a <sinc_hex_vari_process+0x93>
c0009f2b:	dd d8                	fstp   st(0)
c0009f2d:	eb 11                	jmp    c0009f40 <sinc_hex_vari_process+0x99>
c0009f2f:	dd d9                	fstp   st(1)
c0009f31:	d9 e8                	fld1   
c0009f33:	d8 d9                	fcomp  st(1)
c0009f35:	df e0                	fnstsw ax
c0009f37:	9e                   	sahf   
c0009f38:	76 04                	jbe    c0009f3e <sinc_hex_vari_process+0x97>
c0009f3a:	de f9                	fdivp  st(1),st
c0009f3c:	eb 02                	jmp    c0009f40 <sinc_hex_vari_process+0x99>
c0009f3e:	dd d8                	fstp   st(0)
c0009f40:	83 ec 10             	sub    esp,0x10
c0009f43:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009f46:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009f49:	e8 12 46 01 00       	call   c001e560 <lrint>
c0009f4e:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c0009f51:	40                   	inc    eax
c0009f52:	dd 14 24             	fst    QWORD PTR [esp]
c0009f55:	0f af c5             	imul   eax,ebp
c0009f58:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009f5c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009f60:	e8 ed fa ff ff       	call   c0009a52 <fmod_one>
c0009f65:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0009f68:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009f6c:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009f6f:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0009f73:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009f77:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c0009f7b:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009f7e:	e8 dd 45 01 00       	call   c001e560 <lrint>
c0009f83:	0f af e8             	imul   ebp,eax
c0009f86:	d9 e8                	fld1   
c0009f88:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009f8c:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c0009f90:	01 e8                	add    eax,ebp
c0009f92:	dc 05 58 fd 01 c0    	fadd   QWORD PTR ds:0xc001fd58
c0009f98:	99                   	cdq    
c0009f99:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009f9d:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c0009fa0:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0009fa3:	83 c4 10             	add    esp,0x10
c0009fa6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009fa9:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c0009fac:	7d 4b                	jge    c0009ff9 <sinc_hex_vari_process+0x152>
c0009fae:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009fb1:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009fb4:	01 c8                	add    eax,ecx
c0009fb6:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c0009fb9:	99                   	cdq    
c0009fba:	f7 f9                	idiv   ecx
c0009fbc:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0009fc0:	7d 09                	jge    c0009fcb <sinc_hex_vari_process+0x124>
c0009fc2:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0009fc5:	85 c0                	test   eax,eax
c0009fc7:	79 57                	jns    c000a020 <sinc_hex_vari_process+0x179>
c0009fc9:	eb 70                	jmp    c000a03b <sinc_hex_vari_process+0x194>
c0009fcb:	51                   	push   ecx
c0009fcc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009fd0:	57                   	push   edi
c0009fd1:	53                   	push   ebx
c0009fd2:	e8 d2 fa ff ff       	call   c0009aa9 <prepare_data>
c0009fd7:	83 c4 10             	add    esp,0x10
c0009fda:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0009fdd:	85 c0                	test   eax,eax
c0009fdf:	0f 85 39 01 00 00    	jne    c000a11e <sinc_hex_vari_process+0x277>
c0009fe5:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009fe8:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009feb:	01 c8                	add    eax,ecx
c0009fed:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c0009ff0:	99                   	cdq    
c0009ff1:	f7 f9                	idiv   ecx
c0009ff3:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0009ff7:	7c c9                	jl     c0009fc2 <sinc_hex_vari_process+0x11b>
c0009ff9:	dd 04 24             	fld    QWORD PTR [esp]
c0009ffc:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c0009fff:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a003:	dd 1e                	fstp   QWORD PTR [esi]
c000a005:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a008:	99                   	cdq    
c000a009:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a00c:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a00f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a012:	99                   	cdq    
c000a013:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a016:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a019:	31 c0                	xor    eax,eax
c000a01b:	e9 fe 00 00 00       	jmp    c000a11e <sinc_hex_vari_process+0x277>
c000a020:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a024:	dd 04 24             	fld    QWORD PTR [esp]
c000a027:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a02a:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c000a02e:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000a032:	d9 c9                	fxch   st(1)
c000a034:	de d9                	fcompp 
c000a036:	df e0                	fnstsw ax
c000a038:	9e                   	sahf   
c000a039:	73 be                	jae    c0009ff9 <sinc_hex_vari_process+0x152>
c000a03b:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a03f:	7e 31                	jle    c000a072 <sinc_hex_vari_process+0x1cb>
c000a041:	83 ec 10             	sub    esp,0x10
c000a044:	dd 06                	fld    QWORD PTR [esi]
c000a046:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a049:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a04c:	e8 ef 44 01 00       	call   c001e540 <fabs>
c000a051:	83 c4 10             	add    esp,0x10
c000a054:	dc 1d e0 fe 01 c0    	fcomp  QWORD PTR ds:0xc001fee0
c000a05a:	df e0                	fnstsw ax
c000a05c:	9e                   	sahf   
c000a05d:	76 13                	jbe    c000a072 <sinc_hex_vari_process+0x1cb>
c000a05f:	dd 06                	fld    QWORD PTR [esi]
c000a061:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a064:	d8 e1                	fsub   st,st(1)
c000a066:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a069:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a06c:	de c1                	faddp  st(1),st
c000a06e:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a072:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a075:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a079:	d9 e8                	fld1   
c000a07b:	d8 d9                	fcomp  st(1)
c000a07d:	df e0                	fnstsw ax
c000a07f:	9e                   	sahf   
c000a080:	77 04                	ja     c000a086 <sinc_hex_vari_process+0x1df>
c000a082:	dd d8                	fstp   st(0)
c000a084:	d9 e8                	fld1   
c000a086:	de c9                	fmulp  st(1),st
c000a088:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000a08c:	50                   	push   eax
c000a08d:	50                   	push   eax
c000a08e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a092:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a096:	e8 a4 f9 ff ff       	call   c0009a3f <double_to_fp>
c000a09b:	89 c5                	mov    ebp,eax
c000a09d:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a0a1:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000a0a5:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a0a8:	e8 92 f9 ff ff       	call   c0009a3f <double_to_fp>
c000a0ad:	83 c4 0c             	add    esp,0xc
c000a0b0:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a0b3:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000a0b6:	8d 14 8a             	lea    edx,[edx+ecx*4]
c000a0b9:	89 c1                	mov    ecx,eax
c000a0bb:	52                   	push   edx
c000a0bc:	89 d8                	mov    eax,ebx
c000a0be:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a0c2:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a0c5:	52                   	push   edx
c000a0c6:	52                   	push   edx
c000a0c7:	89 ea                	mov    edx,ebp
c000a0c9:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a0cc:	e8 d1 f2 ff ff       	call   c00093a2 <calc_output_hex>
c000a0d1:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000a0d5:	d9 e8                	fld1   
c000a0d7:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a0db:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a0df:	dd 14 24             	fst    QWORD PTR [esp]
c000a0e2:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000a0e6:	e8 67 f9 ff ff       	call   c0009a52 <fmod_one>
c000a0eb:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a0ee:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a0f2:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a0f5:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000a0f9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a0fd:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a101:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a104:	e8 57 44 01 00       	call   c001e560 <lrint>
c000a109:	0f af e8             	imul   ebp,eax
c000a10c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a110:	01 e8                	add    eax,ebp
c000a112:	99                   	cdq    
c000a113:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a116:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a119:	e9 85 fe ff ff       	jmp    c0009fa3 <sinc_hex_vari_process+0xfc>
c000a11e:	83 c4 3c             	add    esp,0x3c
c000a121:	5b                   	pop    ebx
c000a122:	5e                   	pop    esi
c000a123:	5f                   	pop    edi
c000a124:	5d                   	pop    ebp
c000a125:	c3                   	ret    

c000a126 <sinc_quad_vari_process>:
c000a126:	55                   	push   ebp
c000a127:	b8 05 00 00 00       	mov    eax,0x5
c000a12c:	57                   	push   edi
c000a12d:	56                   	push   esi
c000a12e:	53                   	push   ebx
c000a12f:	83 ec 3c             	sub    esp,0x3c
c000a132:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000a136:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000a13a:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000a13d:	85 db                	test   ebx,ebx
c000a13f:	0f 84 58 02 00 00    	je     c000a39d <sinc_quad_vari_process+0x277>
c000a145:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000a148:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a14b:	0f af d0             	imul   edx,eax
c000a14e:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000a151:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c000a155:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a15c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a15f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000a166:	dd 06                	fld    QWORD PTR [esi]
c000a168:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c000a16c:	55                   	push   ebp
c000a16d:	55                   	push   ebp
c000a16e:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a171:	e8 d6 ed ff ff       	call   c0008f4c <is_bad_src_ratio>
c000a176:	89 c2                	mov    edx,eax
c000a178:	58                   	pop    eax
c000a179:	85 d2                	test   edx,edx
c000a17b:	59                   	pop    ecx
c000a17c:	b8 16 00 00 00       	mov    eax,0x16
c000a181:	0f 85 16 02 00 00    	jne    c000a39d <sinc_quad_vari_process+0x277>
c000a187:	d9 05 f0 fe 01 c0    	fld    DWORD PTR ds:0xc001fef0
c000a18d:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c000a190:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a193:	dd 06                	fld    QWORD PTR [esi]
c000a195:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a198:	d8 d1                	fcom   st(1)
c000a19a:	df e0                	fnstsw ax
c000a19c:	9e                   	sahf   
c000a19d:	76 0f                	jbe    c000a1ae <sinc_quad_vari_process+0x88>
c000a19f:	dd d8                	fstp   st(0)
c000a1a1:	d9 e8                	fld1   
c000a1a3:	d8 d9                	fcomp  st(1)
c000a1a5:	df e0                	fnstsw ax
c000a1a7:	9e                   	sahf   
c000a1a8:	77 0f                	ja     c000a1b9 <sinc_quad_vari_process+0x93>
c000a1aa:	dd d8                	fstp   st(0)
c000a1ac:	eb 11                	jmp    c000a1bf <sinc_quad_vari_process+0x99>
c000a1ae:	dd d9                	fstp   st(1)
c000a1b0:	d9 e8                	fld1   
c000a1b2:	d8 d9                	fcomp  st(1)
c000a1b4:	df e0                	fnstsw ax
c000a1b6:	9e                   	sahf   
c000a1b7:	76 04                	jbe    c000a1bd <sinc_quad_vari_process+0x97>
c000a1b9:	de f9                	fdivp  st(1),st
c000a1bb:	eb 02                	jmp    c000a1bf <sinc_quad_vari_process+0x99>
c000a1bd:	dd d8                	fstp   st(0)
c000a1bf:	83 ec 10             	sub    esp,0x10
c000a1c2:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a1c5:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a1c8:	e8 93 43 01 00       	call   c001e560 <lrint>
c000a1cd:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c000a1d0:	40                   	inc    eax
c000a1d1:	dd 14 24             	fst    QWORD PTR [esp]
c000a1d4:	0f af c5             	imul   eax,ebp
c000a1d7:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a1db:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a1df:	e8 6e f8 ff ff       	call   c0009a52 <fmod_one>
c000a1e4:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a1e7:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a1eb:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a1ee:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a1f2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a1f6:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a1fa:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a1fd:	e8 5e 43 01 00       	call   c001e560 <lrint>
c000a202:	0f af e8             	imul   ebp,eax
c000a205:	d9 e8                	fld1   
c000a207:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a20b:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a20f:	01 e8                	add    eax,ebp
c000a211:	dc 05 58 fd 01 c0    	fadd   QWORD PTR ds:0xc001fd58
c000a217:	99                   	cdq    
c000a218:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a21c:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a21f:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a222:	83 c4 10             	add    esp,0x10
c000a225:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a228:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a22b:	7d 4b                	jge    c000a278 <sinc_quad_vari_process+0x152>
c000a22d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a230:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a233:	01 c8                	add    eax,ecx
c000a235:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a238:	99                   	cdq    
c000a239:	f7 f9                	idiv   ecx
c000a23b:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a23f:	7d 09                	jge    c000a24a <sinc_quad_vari_process+0x124>
c000a241:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a244:	85 c0                	test   eax,eax
c000a246:	79 57                	jns    c000a29f <sinc_quad_vari_process+0x179>
c000a248:	eb 70                	jmp    c000a2ba <sinc_quad_vari_process+0x194>
c000a24a:	51                   	push   ecx
c000a24b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a24f:	57                   	push   edi
c000a250:	53                   	push   ebx
c000a251:	e8 53 f8 ff ff       	call   c0009aa9 <prepare_data>
c000a256:	83 c4 10             	add    esp,0x10
c000a259:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a25c:	85 c0                	test   eax,eax
c000a25e:	0f 85 39 01 00 00    	jne    c000a39d <sinc_quad_vari_process+0x277>
c000a264:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a267:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a26a:	01 c8                	add    eax,ecx
c000a26c:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a26f:	99                   	cdq    
c000a270:	f7 f9                	idiv   ecx
c000a272:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a276:	7c c9                	jl     c000a241 <sinc_quad_vari_process+0x11b>
c000a278:	dd 04 24             	fld    QWORD PTR [esp]
c000a27b:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a27e:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a282:	dd 1e                	fstp   QWORD PTR [esi]
c000a284:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a287:	99                   	cdq    
c000a288:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a28b:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a28e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a291:	99                   	cdq    
c000a292:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a295:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a298:	31 c0                	xor    eax,eax
c000a29a:	e9 fe 00 00 00       	jmp    c000a39d <sinc_quad_vari_process+0x277>
c000a29f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a2a3:	dd 04 24             	fld    QWORD PTR [esp]
c000a2a6:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a2a9:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c000a2ad:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000a2b1:	d9 c9                	fxch   st(1)
c000a2b3:	de d9                	fcompp 
c000a2b5:	df e0                	fnstsw ax
c000a2b7:	9e                   	sahf   
c000a2b8:	73 be                	jae    c000a278 <sinc_quad_vari_process+0x152>
c000a2ba:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a2be:	7e 31                	jle    c000a2f1 <sinc_quad_vari_process+0x1cb>
c000a2c0:	83 ec 10             	sub    esp,0x10
c000a2c3:	dd 06                	fld    QWORD PTR [esi]
c000a2c5:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a2c8:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a2cb:	e8 70 42 01 00       	call   c001e540 <fabs>
c000a2d0:	83 c4 10             	add    esp,0x10
c000a2d3:	dc 1d e0 fe 01 c0    	fcomp  QWORD PTR ds:0xc001fee0
c000a2d9:	df e0                	fnstsw ax
c000a2db:	9e                   	sahf   
c000a2dc:	76 13                	jbe    c000a2f1 <sinc_quad_vari_process+0x1cb>
c000a2de:	dd 06                	fld    QWORD PTR [esi]
c000a2e0:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a2e3:	d8 e1                	fsub   st,st(1)
c000a2e5:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a2e8:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a2eb:	de c1                	faddp  st(1),st
c000a2ed:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a2f1:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a2f4:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a2f8:	d9 e8                	fld1   
c000a2fa:	d8 d9                	fcomp  st(1)
c000a2fc:	df e0                	fnstsw ax
c000a2fe:	9e                   	sahf   
c000a2ff:	77 04                	ja     c000a305 <sinc_quad_vari_process+0x1df>
c000a301:	dd d8                	fstp   st(0)
c000a303:	d9 e8                	fld1   
c000a305:	de c9                	fmulp  st(1),st
c000a307:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000a30b:	50                   	push   eax
c000a30c:	50                   	push   eax
c000a30d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a311:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a315:	e8 25 f7 ff ff       	call   c0009a3f <double_to_fp>
c000a31a:	89 c5                	mov    ebp,eax
c000a31c:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a320:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000a324:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a327:	e8 13 f7 ff ff       	call   c0009a3f <double_to_fp>
c000a32c:	83 c4 0c             	add    esp,0xc
c000a32f:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a332:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000a335:	8d 14 8a             	lea    edx,[edx+ecx*4]
c000a338:	89 c1                	mov    ecx,eax
c000a33a:	52                   	push   edx
c000a33b:	89 d8                	mov    eax,ebx
c000a33d:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a341:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a344:	52                   	push   edx
c000a345:	52                   	push   edx
c000a346:	89 ea                	mov    edx,ebp
c000a348:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a34b:	e8 8d ee ff ff       	call   c00091dd <calc_output_quad>
c000a350:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000a354:	d9 e8                	fld1   
c000a356:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a35a:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a35e:	dd 14 24             	fst    QWORD PTR [esp]
c000a361:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000a365:	e8 e8 f6 ff ff       	call   c0009a52 <fmod_one>
c000a36a:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a36d:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a371:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a374:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000a378:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a37c:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a380:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a383:	e8 d8 41 01 00       	call   c001e560 <lrint>
c000a388:	0f af e8             	imul   ebp,eax
c000a38b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a38f:	01 e8                	add    eax,ebp
c000a391:	99                   	cdq    
c000a392:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a395:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a398:	e9 85 fe ff ff       	jmp    c000a222 <sinc_quad_vari_process+0xfc>
c000a39d:	83 c4 3c             	add    esp,0x3c
c000a3a0:	5b                   	pop    ebx
c000a3a1:	5e                   	pop    esi
c000a3a2:	5f                   	pop    edi
c000a3a3:	5d                   	pop    ebp
c000a3a4:	c3                   	ret    

c000a3a5 <sinc_stereo_vari_process>:
c000a3a5:	55                   	push   ebp
c000a3a6:	b8 05 00 00 00       	mov    eax,0x5
c000a3ab:	57                   	push   edi
c000a3ac:	56                   	push   esi
c000a3ad:	53                   	push   ebx
c000a3ae:	83 ec 3c             	sub    esp,0x3c
c000a3b1:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000a3b5:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000a3b9:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000a3bc:	85 db                	test   ebx,ebx
c000a3be:	0f 84 58 02 00 00    	je     c000a61c <sinc_stereo_vari_process+0x277>
c000a3c4:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000a3c7:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a3ca:	0f af d0             	imul   edx,eax
c000a3cd:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000a3d0:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c000a3d4:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a3db:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a3de:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000a3e5:	dd 06                	fld    QWORD PTR [esi]
c000a3e7:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c000a3eb:	55                   	push   ebp
c000a3ec:	55                   	push   ebp
c000a3ed:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a3f0:	e8 57 eb ff ff       	call   c0008f4c <is_bad_src_ratio>
c000a3f5:	89 c2                	mov    edx,eax
c000a3f7:	58                   	pop    eax
c000a3f8:	85 d2                	test   edx,edx
c000a3fa:	59                   	pop    ecx
c000a3fb:	b8 16 00 00 00       	mov    eax,0x16
c000a400:	0f 85 16 02 00 00    	jne    c000a61c <sinc_stereo_vari_process+0x277>
c000a406:	d9 05 f0 fe 01 c0    	fld    DWORD PTR ds:0xc001fef0
c000a40c:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c000a40f:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a412:	dd 06                	fld    QWORD PTR [esi]
c000a414:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a417:	d8 d1                	fcom   st(1)
c000a419:	df e0                	fnstsw ax
c000a41b:	9e                   	sahf   
c000a41c:	76 0f                	jbe    c000a42d <sinc_stereo_vari_process+0x88>
c000a41e:	dd d8                	fstp   st(0)
c000a420:	d9 e8                	fld1   
c000a422:	d8 d9                	fcomp  st(1)
c000a424:	df e0                	fnstsw ax
c000a426:	9e                   	sahf   
c000a427:	77 0f                	ja     c000a438 <sinc_stereo_vari_process+0x93>
c000a429:	dd d8                	fstp   st(0)
c000a42b:	eb 11                	jmp    c000a43e <sinc_stereo_vari_process+0x99>
c000a42d:	dd d9                	fstp   st(1)
c000a42f:	d9 e8                	fld1   
c000a431:	d8 d9                	fcomp  st(1)
c000a433:	df e0                	fnstsw ax
c000a435:	9e                   	sahf   
c000a436:	76 04                	jbe    c000a43c <sinc_stereo_vari_process+0x97>
c000a438:	de f9                	fdivp  st(1),st
c000a43a:	eb 02                	jmp    c000a43e <sinc_stereo_vari_process+0x99>
c000a43c:	dd d8                	fstp   st(0)
c000a43e:	83 ec 10             	sub    esp,0x10
c000a441:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a444:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a447:	e8 14 41 01 00       	call   c001e560 <lrint>
c000a44c:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c000a44f:	40                   	inc    eax
c000a450:	dd 14 24             	fst    QWORD PTR [esp]
c000a453:	0f af c5             	imul   eax,ebp
c000a456:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a45a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a45e:	e8 ef f5 ff ff       	call   c0009a52 <fmod_one>
c000a463:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a466:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a46a:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a46d:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a471:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a475:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a479:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a47c:	e8 df 40 01 00       	call   c001e560 <lrint>
c000a481:	0f af e8             	imul   ebp,eax
c000a484:	d9 e8                	fld1   
c000a486:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a48a:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a48e:	01 e8                	add    eax,ebp
c000a490:	dc 05 58 fd 01 c0    	fadd   QWORD PTR ds:0xc001fd58
c000a496:	99                   	cdq    
c000a497:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a49b:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a49e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a4a1:	83 c4 10             	add    esp,0x10
c000a4a4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a4a7:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a4aa:	7d 4b                	jge    c000a4f7 <sinc_stereo_vari_process+0x152>
c000a4ac:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a4af:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a4b2:	01 c8                	add    eax,ecx
c000a4b4:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a4b7:	99                   	cdq    
c000a4b8:	f7 f9                	idiv   ecx
c000a4ba:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a4be:	7d 09                	jge    c000a4c9 <sinc_stereo_vari_process+0x124>
c000a4c0:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a4c3:	85 c0                	test   eax,eax
c000a4c5:	79 57                	jns    c000a51e <sinc_stereo_vari_process+0x179>
c000a4c7:	eb 70                	jmp    c000a539 <sinc_stereo_vari_process+0x194>
c000a4c9:	51                   	push   ecx
c000a4ca:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a4ce:	57                   	push   edi
c000a4cf:	53                   	push   ebx
c000a4d0:	e8 d4 f5 ff ff       	call   c0009aa9 <prepare_data>
c000a4d5:	83 c4 10             	add    esp,0x10
c000a4d8:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a4db:	85 c0                	test   eax,eax
c000a4dd:	0f 85 39 01 00 00    	jne    c000a61c <sinc_stereo_vari_process+0x277>
c000a4e3:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a4e6:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a4e9:	01 c8                	add    eax,ecx
c000a4eb:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a4ee:	99                   	cdq    
c000a4ef:	f7 f9                	idiv   ecx
c000a4f1:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a4f5:	7c c9                	jl     c000a4c0 <sinc_stereo_vari_process+0x11b>
c000a4f7:	dd 04 24             	fld    QWORD PTR [esp]
c000a4fa:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a4fd:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a501:	dd 1e                	fstp   QWORD PTR [esi]
c000a503:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a506:	99                   	cdq    
c000a507:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a50a:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a50d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a510:	99                   	cdq    
c000a511:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a514:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a517:	31 c0                	xor    eax,eax
c000a519:	e9 fe 00 00 00       	jmp    c000a61c <sinc_stereo_vari_process+0x277>
c000a51e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a522:	dd 04 24             	fld    QWORD PTR [esp]
c000a525:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a528:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c000a52c:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000a530:	d9 c9                	fxch   st(1)
c000a532:	de d9                	fcompp 
c000a534:	df e0                	fnstsw ax
c000a536:	9e                   	sahf   
c000a537:	73 be                	jae    c000a4f7 <sinc_stereo_vari_process+0x152>
c000a539:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a53d:	7e 31                	jle    c000a570 <sinc_stereo_vari_process+0x1cb>
c000a53f:	83 ec 10             	sub    esp,0x10
c000a542:	dd 06                	fld    QWORD PTR [esi]
c000a544:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a547:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a54a:	e8 f1 3f 01 00       	call   c001e540 <fabs>
c000a54f:	83 c4 10             	add    esp,0x10
c000a552:	dc 1d e0 fe 01 c0    	fcomp  QWORD PTR ds:0xc001fee0
c000a558:	df e0                	fnstsw ax
c000a55a:	9e                   	sahf   
c000a55b:	76 13                	jbe    c000a570 <sinc_stereo_vari_process+0x1cb>
c000a55d:	dd 06                	fld    QWORD PTR [esi]
c000a55f:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a562:	d8 e1                	fsub   st,st(1)
c000a564:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a567:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a56a:	de c1                	faddp  st(1),st
c000a56c:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a570:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a573:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a577:	d9 e8                	fld1   
c000a579:	d8 d9                	fcomp  st(1)
c000a57b:	df e0                	fnstsw ax
c000a57d:	9e                   	sahf   
c000a57e:	77 04                	ja     c000a584 <sinc_stereo_vari_process+0x1df>
c000a580:	dd d8                	fstp   st(0)
c000a582:	d9 e8                	fld1   
c000a584:	de c9                	fmulp  st(1),st
c000a586:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000a58a:	50                   	push   eax
c000a58b:	50                   	push   eax
c000a58c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a590:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a594:	e8 a6 f4 ff ff       	call   c0009a3f <double_to_fp>
c000a599:	89 c5                	mov    ebp,eax
c000a59b:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a59f:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000a5a3:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a5a6:	e8 94 f4 ff ff       	call   c0009a3f <double_to_fp>
c000a5ab:	83 c4 0c             	add    esp,0xc
c000a5ae:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a5b1:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000a5b4:	8d 14 8a             	lea    edx,[edx+ecx*4]
c000a5b7:	89 c1                	mov    ecx,eax
c000a5b9:	52                   	push   edx
c000a5ba:	89 d8                	mov    eax,ebx
c000a5bc:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a5c0:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a5c3:	52                   	push   edx
c000a5c4:	52                   	push   edx
c000a5c5:	89 ea                	mov    edx,ebp
c000a5c7:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a5ca:	e8 ce ea ff ff       	call   c000909d <calc_output_stereo>
c000a5cf:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000a5d3:	d9 e8                	fld1   
c000a5d5:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a5d9:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a5dd:	dd 14 24             	fst    QWORD PTR [esp]
c000a5e0:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000a5e4:	e8 69 f4 ff ff       	call   c0009a52 <fmod_one>
c000a5e9:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a5ec:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a5f0:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a5f3:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000a5f7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a5fb:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a5ff:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a602:	e8 59 3f 01 00       	call   c001e560 <lrint>
c000a607:	0f af e8             	imul   ebp,eax
c000a60a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a60e:	01 e8                	add    eax,ebp
c000a610:	99                   	cdq    
c000a611:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a614:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a617:	e9 85 fe ff ff       	jmp    c000a4a1 <sinc_stereo_vari_process+0xfc>
c000a61c:	83 c4 3c             	add    esp,0x3c
c000a61f:	5b                   	pop    ebx
c000a620:	5e                   	pop    esi
c000a621:	5f                   	pop    edi
c000a622:	5d                   	pop    ebp
c000a623:	c3                   	ret    

c000a624 <sinc_mono_vari_process>:
c000a624:	55                   	push   ebp
c000a625:	b8 05 00 00 00       	mov    eax,0x5
c000a62a:	57                   	push   edi
c000a62b:	56                   	push   esi
c000a62c:	53                   	push   ebx
c000a62d:	83 ec 3c             	sub    esp,0x3c
c000a630:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000a634:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000a638:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000a63b:	85 db                	test   ebx,ebx
c000a63d:	0f 84 57 02 00 00    	je     c000a89a <sinc_mono_vari_process+0x276>
c000a643:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000a646:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a649:	0f af d0             	imul   edx,eax
c000a64c:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000a64f:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c000a653:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a65a:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a65d:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000a664:	dd 06                	fld    QWORD PTR [esi]
c000a666:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c000a66a:	51                   	push   ecx
c000a66b:	51                   	push   ecx
c000a66c:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a66f:	e8 d8 e8 ff ff       	call   c0008f4c <is_bad_src_ratio>
c000a674:	5d                   	pop    ebp
c000a675:	89 c2                	mov    edx,eax
c000a677:	58                   	pop    eax
c000a678:	85 d2                	test   edx,edx
c000a67a:	b8 16 00 00 00       	mov    eax,0x16
c000a67f:	0f 85 15 02 00 00    	jne    c000a89a <sinc_mono_vari_process+0x276>
c000a685:	d9 05 f0 fe 01 c0    	fld    DWORD PTR ds:0xc001fef0
c000a68b:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c000a68e:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a691:	dd 06                	fld    QWORD PTR [esi]
c000a693:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a696:	d8 d1                	fcom   st(1)
c000a698:	df e0                	fnstsw ax
c000a69a:	9e                   	sahf   
c000a69b:	76 0f                	jbe    c000a6ac <sinc_mono_vari_process+0x88>
c000a69d:	dd d8                	fstp   st(0)
c000a69f:	d9 e8                	fld1   
c000a6a1:	d8 d9                	fcomp  st(1)
c000a6a3:	df e0                	fnstsw ax
c000a6a5:	9e                   	sahf   
c000a6a6:	77 0f                	ja     c000a6b7 <sinc_mono_vari_process+0x93>
c000a6a8:	dd d8                	fstp   st(0)
c000a6aa:	eb 11                	jmp    c000a6bd <sinc_mono_vari_process+0x99>
c000a6ac:	dd d9                	fstp   st(1)
c000a6ae:	d9 e8                	fld1   
c000a6b0:	d8 d9                	fcomp  st(1)
c000a6b2:	df e0                	fnstsw ax
c000a6b4:	9e                   	sahf   
c000a6b5:	76 04                	jbe    c000a6bb <sinc_mono_vari_process+0x97>
c000a6b7:	de f9                	fdivp  st(1),st
c000a6b9:	eb 02                	jmp    c000a6bd <sinc_mono_vari_process+0x99>
c000a6bb:	dd d8                	fstp   st(0)
c000a6bd:	83 ec 10             	sub    esp,0x10
c000a6c0:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a6c3:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a6c6:	e8 95 3e 01 00       	call   c001e560 <lrint>
c000a6cb:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c000a6ce:	40                   	inc    eax
c000a6cf:	dd 14 24             	fst    QWORD PTR [esp]
c000a6d2:	0f af e8             	imul   ebp,eax
c000a6d5:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000a6d9:	e8 74 f3 ff ff       	call   c0009a52 <fmod_one>
c000a6de:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a6e1:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a6e5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a6e9:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c000a6ed:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a6f0:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a6f4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a6f8:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a6fb:	e8 60 3e 01 00       	call   c001e560 <lrint>
c000a700:	0f af 44 24 38       	imul   eax,DWORD PTR [esp+0x38]
c000a705:	d9 e8                	fld1   
c000a707:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a70b:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a70f:	99                   	cdq    
c000a710:	dc 05 58 fd 01 c0    	fadd   QWORD PTR ds:0xc001fd58
c000a716:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a719:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000a71d:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a720:	83 c4 10             	add    esp,0x10
c000a723:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a726:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a729:	7d 44                	jge    c000a76f <sinc_mono_vari_process+0x14b>
c000a72b:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a72e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a731:	01 c8                	add    eax,ecx
c000a733:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a736:	99                   	cdq    
c000a737:	f7 f9                	idiv   ecx
c000a739:	39 d5                	cmp    ebp,edx
c000a73b:	7d 09                	jge    c000a746 <sinc_mono_vari_process+0x122>
c000a73d:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a740:	85 c0                	test   eax,eax
c000a742:	79 52                	jns    c000a796 <sinc_mono_vari_process+0x172>
c000a744:	eb 6b                	jmp    c000a7b1 <sinc_mono_vari_process+0x18d>
c000a746:	52                   	push   edx
c000a747:	55                   	push   ebp
c000a748:	57                   	push   edi
c000a749:	53                   	push   ebx
c000a74a:	e8 5a f3 ff ff       	call   c0009aa9 <prepare_data>
c000a74f:	83 c4 10             	add    esp,0x10
c000a752:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a755:	85 c0                	test   eax,eax
c000a757:	0f 85 3d 01 00 00    	jne    c000a89a <sinc_mono_vari_process+0x276>
c000a75d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a760:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a763:	01 c8                	add    eax,ecx
c000a765:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a768:	99                   	cdq    
c000a769:	f7 f9                	idiv   ecx
c000a76b:	39 d5                	cmp    ebp,edx
c000a76d:	7c ce                	jl     c000a73d <sinc_mono_vari_process+0x119>
c000a76f:	dd 04 24             	fld    QWORD PTR [esp]
c000a772:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a775:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a779:	dd 1e                	fstp   QWORD PTR [esi]
c000a77b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a77e:	99                   	cdq    
c000a77f:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a782:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a785:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a788:	99                   	cdq    
c000a789:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a78c:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a78f:	31 c0                	xor    eax,eax
c000a791:	e9 04 01 00 00       	jmp    c000a89a <sinc_mono_vari_process+0x276>
c000a796:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a79a:	dd 04 24             	fld    QWORD PTR [esp]
c000a79d:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a7a0:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c000a7a4:	db 44 24 10          	fild   DWORD PTR [esp+0x10]
c000a7a8:	d9 c9                	fxch   st(1)
c000a7aa:	de d9                	fcompp 
c000a7ac:	df e0                	fnstsw ax
c000a7ae:	9e                   	sahf   
c000a7af:	77 be                	ja     c000a76f <sinc_mono_vari_process+0x14b>
c000a7b1:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a7b5:	7e 31                	jle    c000a7e8 <sinc_mono_vari_process+0x1c4>
c000a7b7:	83 ec 10             	sub    esp,0x10
c000a7ba:	dd 06                	fld    QWORD PTR [esi]
c000a7bc:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a7bf:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a7c2:	e8 79 3d 01 00       	call   c001e540 <fabs>
c000a7c7:	83 c4 10             	add    esp,0x10
c000a7ca:	dc 1d e0 fe 01 c0    	fcomp  QWORD PTR ds:0xc001fee0
c000a7d0:	df e0                	fnstsw ax
c000a7d2:	9e                   	sahf   
c000a7d3:	76 13                	jbe    c000a7e8 <sinc_mono_vari_process+0x1c4>
c000a7d5:	dd 06                	fld    QWORD PTR [esi]
c000a7d7:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a7da:	d8 e1                	fsub   st,st(1)
c000a7dc:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a7df:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a7e2:	de c1                	faddp  st(1),st
c000a7e4:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a7e8:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a7eb:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a7ef:	d9 e8                	fld1   
c000a7f1:	d8 d9                	fcomp  st(1)
c000a7f3:	df e0                	fnstsw ax
c000a7f5:	9e                   	sahf   
c000a7f6:	77 04                	ja     c000a7fc <sinc_mono_vari_process+0x1d8>
c000a7f8:	dd d8                	fstp   st(0)
c000a7fa:	d9 e8                	fld1   
c000a7fc:	de c9                	fmulp  st(1),st
c000a7fe:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a802:	50                   	push   eax
c000a803:	50                   	push   eax
c000a804:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a808:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a80c:	e8 2e f2 ff ff       	call   c0009a3f <double_to_fp>
c000a811:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a815:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a819:	dc 4c 24 20          	fmul   QWORD PTR [esp+0x20]
c000a81d:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a820:	e8 1a f2 ff ff       	call   c0009a3f <double_to_fp>
c000a825:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000a829:	89 c1                	mov    ecx,eax
c000a82b:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a82f:	89 d8                	mov    eax,ebx
c000a831:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a834:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c000a838:	e8 7b e7 ff ff       	call   c0008fb8 <calc_output_single>
c000a83d:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000a840:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000a843:	dc 4c 24 20          	fmul   QWORD PTR [esp+0x20]
c000a847:	d9 1c 90             	fstp   DWORD PTR [eax+edx*4]
c000a84a:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000a84d:	d9 e8                	fld1   
c000a84f:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a853:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a857:	dd 14 24             	fst    QWORD PTR [esp]
c000a85a:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a85e:	e8 ef f1 ff ff       	call   c0009a52 <fmod_one>
c000a863:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a866:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a86a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a86e:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a872:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a875:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a879:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a87d:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a880:	e8 db 3c 01 00       	call   c001e560 <lrint>
c000a885:	0f af 44 24 38       	imul   eax,DWORD PTR [esp+0x38]
c000a88a:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a88e:	99                   	cdq    
c000a88f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a892:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a895:	e9 86 fe ff ff       	jmp    c000a720 <sinc_mono_vari_process+0xfc>
c000a89a:	83 c4 3c             	add    esp,0x3c
c000a89d:	5b                   	pop    ebx
c000a89e:	5e                   	pop    esi
c000a89f:	5f                   	pop    edi
c000a8a0:	5d                   	pop    ebp
c000a8a1:	c3                   	ret    

c000a8a2 <sinc_get_name>:
c000a8a2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a8a6:	31 c0                	xor    eax,eax
c000a8a8:	83 fa 02             	cmp    edx,0x2
c000a8ab:	77 07                	ja     c000a8b4 <sinc_get_name+0x12>
c000a8ad:	8b 04 95 c0 fd 01 c0 	mov    eax,DWORD PTR [edx*4-0x3ffe0240]
c000a8b4:	c3                   	ret    

c000a8b5 <sinc_get_description>:
c000a8b5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a8b9:	31 c0                	xor    eax,eax
c000a8bb:	83 fa 02             	cmp    edx,0x2
c000a8be:	77 07                	ja     c000a8c7 <sinc_get_description+0x12>
c000a8c0:	8b 04 95 b4 fd 01 c0 	mov    eax,DWORD PTR [edx*4-0x3ffe024c]
c000a8c7:	c3                   	ret    

c000a8c8 <sinc_set_converter>:
c000a8c8:	53                   	push   ebx
c000a8c9:	81 ec 58 08 00 00    	sub    esp,0x858
c000a8cf:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000a8d6:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000a8d9:	85 c0                	test   eax,eax
c000a8db:	74 13                	je     c000a8f0 <sinc_set_converter+0x28>
c000a8dd:	83 ec 0c             	sub    esp,0xc
c000a8e0:	50                   	push   eax
c000a8e1:	e8 ed 27 00 00       	call   c000d0d3 <free>
c000a8e6:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000a8ed:	83 c4 10             	add    esp,0x10
c000a8f0:	50                   	push   eax
c000a8f1:	68 44 08 00 00       	push   0x844
c000a8f6:	6a 00                	push   0x0
c000a8f8:	8d 44 24 18          	lea    eax,[esp+0x18]
c000a8fc:	50                   	push   eax
c000a8fd:	e8 06 5d ff ff       	call   c0000608 <memset>
c000a902:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000a905:	83 c4 10             	add    esp,0x10
c000a908:	b8 0b 00 00 00       	mov    eax,0xb
c000a90d:	81 fa 80 00 00 00    	cmp    edx,0x80
c000a913:	7f 6e                	jg     c000a983 <sinc_set_converter+0xbb>
c000a915:	83 fa 01             	cmp    edx,0x1
c000a918:	75 10                	jne    c000a92a <sinc_set_converter+0x62>
c000a91a:	c7 43 24 24 a6 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000a624
c000a921:	c7 43 20 24 a6 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000a624
c000a928:	eb 4d                	jmp    c000a977 <sinc_set_converter+0xaf>
c000a92a:	83 fa 02             	cmp    edx,0x2
c000a92d:	75 10                	jne    c000a93f <sinc_set_converter+0x77>
c000a92f:	c7 43 24 a5 a3 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000a3a5
c000a936:	c7 43 20 a5 a3 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000a3a5
c000a93d:	eb 38                	jmp    c000a977 <sinc_set_converter+0xaf>
c000a93f:	83 fa 04             	cmp    edx,0x4
c000a942:	75 10                	jne    c000a954 <sinc_set_converter+0x8c>
c000a944:	c7 43 24 26 a1 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000a126
c000a94b:	c7 43 20 26 a1 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000a126
c000a952:	eb 23                	jmp    c000a977 <sinc_set_converter+0xaf>
c000a954:	83 fa 06             	cmp    edx,0x6
c000a957:	75 10                	jne    c000a969 <sinc_set_converter+0xa1>
c000a959:	c7 43 24 a7 9e 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0009ea7
c000a960:	c7 43 20 a7 9e 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0009ea7
c000a967:	eb 0e                	jmp    c000a977 <sinc_set_converter+0xaf>
c000a969:	c7 43 24 23 9c 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0009c23
c000a970:	c7 43 20 23 9c 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0009c23
c000a977:	c7 43 28 d3 95 00 c0 	mov    DWORD PTR [ebx+0x28],0xc00095d3
c000a97e:	b8 0a 00 00 00       	mov    eax,0xa
c000a983:	81 c4 58 08 00 00    	add    esp,0x858
c000a989:	5b                   	pop    ebx
c000a98a:	c3                   	ret    

c000a98b <is_bad_src_ratio>:
c000a98b:	83 ec 0c             	sub    esp,0xc
c000a98e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a992:	89 04 24             	mov    DWORD PTR [esp],eax
c000a995:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a999:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a99d:	dd 04 24             	fld    QWORD PTR [esp]
c000a9a0:	dd 05 e0 fc 01 c0    	fld    QWORD PTR ds:0xc001fce0
c000a9a6:	de d9                	fcompp 
c000a9a8:	df e0                	fnstsw ax
c000a9aa:	f6 c4 45             	test   ah,0x45
c000a9ad:	74 10                	je     c000a9bf <is_bad_src_ratio+0x34>
c000a9af:	dd 04 24             	fld    QWORD PTR [esp]
c000a9b2:	dc 1d e8 fc 01 c0    	fcomp  QWORD PTR ds:0xc001fce8
c000a9b8:	df e0                	fnstsw ax
c000a9ba:	f6 c4 45             	test   ah,0x45
c000a9bd:	75 07                	jne    c000a9c6 <is_bad_src_ratio+0x3b>
c000a9bf:	b8 01 00 00 00       	mov    eax,0x1
c000a9c4:	eb 05                	jmp    c000a9cb <is_bad_src_ratio+0x40>
c000a9c6:	b8 00 00 00 00       	mov    eax,0x0
c000a9cb:	83 c4 0c             	add    esp,0xc
c000a9ce:	c3                   	ret    

c000a9cf <fmod_one>:
c000a9cf:	83 ec 2c             	sub    esp,0x2c
c000a9d2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a9d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a9da:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a9de:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a9e2:	83 ec 08             	sub    esp,0x8
c000a9e5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9ed:	e8 6e 3b 01 00       	call   c001e560 <lrint>
c000a9f2:	83 c4 10             	add    esp,0x10
c000a9f5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a9f9:	db 44 24 04          	fild   DWORD PTR [esp+0x4]
c000a9fd:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000aa01:	de e1                	fsubrp st(1),st
c000aa03:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000aa07:	d9 ee                	fldz   
c000aa09:	dc 5c 24 18          	fcomp  QWORD PTR [esp+0x18]
c000aa0d:	df e0                	fnstsw ax
c000aa0f:	f6 c4 45             	test   ah,0x45
c000aa12:	75 0a                	jne    c000aa1e <fmod_one+0x4f>
c000aa14:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000aa18:	d9 e8                	fld1   
c000aa1a:	de c1                	faddp  st(1),st
c000aa1c:	eb 04                	jmp    c000aa22 <fmod_one+0x53>
c000aa1e:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000aa22:	83 c4 2c             	add    esp,0x2c
c000aa25:	c3                   	ret    

c000aa26 <zoh_vari_process>:
c000aa26:	55                   	push   ebp
c000aa27:	57                   	push   edi
c000aa28:	56                   	push   esi
c000aa29:	53                   	push   ebx
c000aa2a:	83 ec 2c             	sub    esp,0x2c
c000aa2d:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c000aa31:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000aa35:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000aa3d:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000aa41:	0f 8e 34 02 00 00    	jle    c000ac7b <zoh_vari_process+0x255>
c000aa47:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000aa4a:	c7 44 24 0c 05 00 00 00 	mov    DWORD PTR [esp+0xc],0x5
c000aa52:	85 db                	test   ebx,ebx
c000aa54:	0f 84 21 02 00 00    	je     c000ac7b <zoh_vari_process+0x255>
c000aa5a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000aa5d:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000aa61:	74 19                	je     c000aa7c <zoh_vari_process+0x56>
c000aa63:	31 d2                	xor    edx,edx
c000aa65:	39 c2                	cmp    edx,eax
c000aa67:	7d 0c                	jge    c000aa75 <zoh_vari_process+0x4f>
c000aa69:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000aa6b:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c000aa6e:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c000aa72:	42                   	inc    edx
c000aa73:	eb f0                	jmp    c000aa65 <zoh_vari_process+0x3f>
c000aa75:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000aa7c:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000aa7f:	0f af d0             	imul   edx,eax
c000aa82:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000aa85:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000aa89:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000aa90:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000aa93:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000aa9a:	dd 07                	fld    QWORD PTR [edi]
c000aa9c:	dd 14 24             	fst    QWORD PTR [esp]
c000aa9f:	50                   	push   eax
c000aaa0:	50                   	push   eax
c000aaa1:	dd 1c 24             	fstp   QWORD PTR [esp]
c000aaa4:	e8 e2 fe ff ff       	call   c000a98b <is_bad_src_ratio>
c000aaa9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000aaad:	5a                   	pop    edx
c000aaae:	59                   	pop    ecx
c000aaaf:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000aab4:	0f 85 b9 01 00 00    	jne    c000ac73 <zoh_vari_process+0x24d>
c000aaba:	dd 47 08             	fld    QWORD PTR [edi+0x8]
c000aabd:	d9 e8                	fld1   
c000aabf:	d8 d1                	fcom   st(1)
c000aac1:	df e0                	fnstsw ax
c000aac3:	9e                   	sahf   
c000aac4:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000aac8:	0f 86 85 00 00 00    	jbe    c000ab53 <zoh_vari_process+0x12d>
c000aace:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000aad1:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000aad4:	7d 7d                	jge    c000ab53 <zoh_vari_process+0x12d>
c000aad6:	d9 c0                	fld    st(0)
c000aad8:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c000aadb:	da 43 10             	fiadd  DWORD PTR [ebx+0x10]
c000aade:	da 5b 0c             	ficomp DWORD PTR [ebx+0xc]
c000aae1:	df e0                	fnstsw ax
c000aae3:	9e                   	sahf   
c000aae4:	73 6d                	jae    c000ab53 <zoh_vari_process+0x12d>
c000aae6:	85 d2                	test   edx,edx
c000aae8:	7e 38                	jle    c000ab22 <zoh_vari_process+0xfc>
c000aaea:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000aaee:	83 ec 10             	sub    esp,0x10
c000aaf1:	dd 07                	fld    QWORD PTR [edi]
c000aaf3:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c000aaf6:	dd 1c 24             	fstp   QWORD PTR [esp]
c000aaf9:	e8 42 3a 01 00       	call   c001e540 <fabs>
c000aafe:	83 c4 10             	add    esp,0x10
c000ab01:	dc 1d 58 fd 01 c0    	fcomp  QWORD PTR ds:0xc001fd58
c000ab07:	df e0                	fnstsw ax
c000ab09:	9e                   	sahf   
c000ab0a:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000ab0e:	76 12                	jbe    c000ab22 <zoh_vari_process+0xfc>
c000ab10:	dd 07                	fld    QWORD PTR [edi]
c000ab12:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c000ab15:	d8 e1                	fsub   st,st(1)
c000ab17:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c000ab1a:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c000ab1d:	de c1                	faddp  st(1),st
c000ab1f:	dd 1c 24             	fstp   QWORD PTR [esp]
c000ab22:	31 c0                	xor    eax,eax
c000ab24:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000ab27:	7e 13                	jle    c000ab3c <zoh_vari_process+0x116>
c000ab29:	d9 44 83 1c          	fld    DWORD PTR [ebx+eax*4+0x1c]
c000ab2d:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000ab30:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000ab33:	40                   	inc    eax
c000ab34:	d9 1c 8a             	fstp   DWORD PTR [edx+ecx*4]
c000ab37:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000ab3a:	eb e8                	jmp    c000ab24 <zoh_vari_process+0xfe>
c000ab3c:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000ab40:	dc 34 24             	fdiv   QWORD PTR [esp]
c000ab43:	de c1                	faddp  st(1),st
c000ab45:	e9 73 ff ff ff       	jmp    c000aabd <zoh_vari_process+0x97>
c000ab4a:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000ab4e:	dc 34 24             	fdiv   QWORD PTR [esp]
c000ab51:	de c1                	faddp  st(1),st
c000ab53:	83 ec 10             	sub    esp,0x10
c000ab56:	dd 14 24             	fst    QWORD PTR [esp]
c000ab59:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000ab5d:	e8 6d fe ff ff       	call   c000a9cf <fmod_one>
c000ab62:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ab65:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c000ab69:	d8 e1                	fsub   st,st(1)
c000ab6b:	d9 c9                	fxch   st(1)
c000ab6d:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000ab71:	dd 1c 24             	fstp   QWORD PTR [esp]
c000ab74:	e8 e7 39 01 00       	call   c001e560 <lrint>
c000ab79:	83 c4 10             	add    esp,0x10
c000ab7c:	0f af e8             	imul   ebp,eax
c000ab7f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000ab82:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000ab85:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000ab89:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000ab8c:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000ab8f:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000ab92:	0f 8d 82 00 00 00    	jge    c000ac1a <zoh_vari_process+0x1f4>
c000ab98:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c000ab9c:	d9 c0                	fld    st(0)
c000ab9e:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c000aba1:	da 44 24 18          	fiadd  DWORD PTR [esp+0x18]
c000aba5:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000aba9:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000abad:	de d9                	fcompp 
c000abaf:	df e0                	fnstsw ax
c000abb1:	9e                   	sahf   
c000abb2:	72 66                	jb     c000ac1a <zoh_vari_process+0x1f4>
c000abb4:	85 d2                	test   edx,edx
c000abb6:	7e 38                	jle    c000abf0 <zoh_vari_process+0x1ca>
c000abb8:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000abbc:	83 ec 10             	sub    esp,0x10
c000abbf:	dd 07                	fld    QWORD PTR [edi]
c000abc1:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c000abc4:	dd 1c 24             	fstp   QWORD PTR [esp]
c000abc7:	e8 74 39 01 00       	call   c001e540 <fabs>
c000abcc:	83 c4 10             	add    esp,0x10
c000abcf:	dc 1d 58 fd 01 c0    	fcomp  QWORD PTR ds:0xc001fd58
c000abd5:	df e0                	fnstsw ax
c000abd7:	9e                   	sahf   
c000abd8:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000abdc:	76 12                	jbe    c000abf0 <zoh_vari_process+0x1ca>
c000abde:	dd 07                	fld    QWORD PTR [edi]
c000abe0:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c000abe3:	d8 e1                	fsub   st,st(1)
c000abe5:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c000abe8:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c000abeb:	de c1                	faddp  st(1),st
c000abed:	dd 1c 24             	fstp   QWORD PTR [esp]
c000abf0:	31 d2                	xor    edx,edx
c000abf2:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000abf5:	39 d0                	cmp    eax,edx
c000abf7:	0f 8e 4d ff ff ff    	jle    c000ab4a <zoh_vari_process+0x124>
c000abfd:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000ac00:	29 c1                	sub    ecx,eax
c000ac02:	89 c8                	mov    eax,ecx
c000ac04:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000ac06:	01 d0                	add    eax,edx
c000ac08:	42                   	inc    edx
c000ac09:	d9 04 81             	fld    DWORD PTR [ecx+eax*4]
c000ac0c:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000ac0f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000ac12:	d9 1c 88             	fstp   DWORD PTR [eax+ecx*4]
c000ac15:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000ac18:	eb d8                	jmp    c000abf2 <zoh_vari_process+0x1cc>
c000ac1a:	39 e9                	cmp    ecx,ebp
c000ac1c:	7d 13                	jge    c000ac31 <zoh_vari_process+0x20b>
c000ac1e:	89 e8                	mov    eax,ebp
c000ac20:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000ac23:	29 c8                	sub    eax,ecx
c000ac25:	99                   	cdq    
c000ac26:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000ac29:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ac2d:	da 44 24 10          	fiadd  DWORD PTR [esp+0x10]
c000ac31:	dd 5f 08             	fstp   QWORD PTR [edi+0x8]
c000ac34:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000ac37:	85 c0                	test   eax,eax
c000ac39:	7f 1b                	jg     c000ac56 <zoh_vari_process+0x230>
c000ac3b:	dd 04 24             	fld    QWORD PTR [esp]
c000ac3e:	dd 1f                	fstp   QWORD PTR [edi]
c000ac40:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000ac43:	99                   	cdq    
c000ac44:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000ac47:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000ac4a:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000ac4d:	99                   	cdq    
c000ac4e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000ac51:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000ac54:	eb 25                	jmp    c000ac7b <zoh_vari_process+0x255>
c000ac56:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ac59:	31 d2                	xor    edx,edx
c000ac5b:	29 e8                	sub    eax,ebp
c000ac5d:	c1 e0 02             	shl    eax,0x2
c000ac60:	39 d5                	cmp    ebp,edx
c000ac62:	7e d7                	jle    c000ac3b <zoh_vari_process+0x215>
c000ac64:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000ac66:	d9 04 01             	fld    DWORD PTR [ecx+eax*1]
c000ac69:	83 c0 04             	add    eax,0x4
c000ac6c:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c000ac70:	42                   	inc    edx
c000ac71:	eb ed                	jmp    c000ac60 <zoh_vari_process+0x23a>
c000ac73:	c7 44 24 0c 16 00 00 00 	mov    DWORD PTR [esp+0xc],0x16
c000ac7b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ac7f:	83 c4 2c             	add    esp,0x2c
c000ac82:	5b                   	pop    ebx
c000ac83:	5e                   	pop    esi
c000ac84:	5f                   	pop    edi
c000ac85:	5d                   	pop    ebp
c000ac86:	c3                   	ret    

c000ac87 <zoh_reset>:
c000ac87:	83 ec 0c             	sub    esp,0xc
c000ac8a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ac8e:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000ac91:	85 c0                	test   eax,eax
c000ac93:	74 20                	je     c000acb5 <zoh_reset+0x2e>
c000ac95:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000ac98:	83 c0 1c             	add    eax,0x1c
c000ac9b:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000ac9e:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000aca5:	c1 e2 02             	shl    edx,0x2
c000aca8:	51                   	push   ecx
c000aca9:	52                   	push   edx
c000acaa:	6a 00                	push   0x0
c000acac:	50                   	push   eax
c000acad:	e8 56 59 ff ff       	call   c0000608 <memset>
c000acb2:	83 c4 10             	add    esp,0x10
c000acb5:	83 c4 0c             	add    esp,0xc
c000acb8:	c3                   	ret    

c000acb9 <zoh_get_name>:
c000acb9:	31 c0                	xor    eax,eax
c000acbb:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000acc0:	75 05                	jne    c000acc7 <zoh_get_name+0xe>
c000acc2:	b8 f4 fe 01 c0       	mov    eax,0xc001fef4
c000acc7:	c3                   	ret    

c000acc8 <zoh_get_description>:
c000acc8:	31 c0                	xor    eax,eax
c000acca:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000accf:	75 05                	jne    c000acd6 <zoh_get_description+0xe>
c000acd1:	b8 05 ff 01 c0       	mov    eax,0xc001ff05
c000acd6:	c3                   	ret    

c000acd7 <zoh_set_converter>:
c000acd7:	53                   	push   ebx
c000acd8:	b8 0a 00 00 00       	mov    eax,0xa
c000acdd:	83 ec 08             	sub    esp,0x8
c000ace0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ace4:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000ace9:	75 6e                	jne    c000ad59 <zoh_set_converter+0x82>
c000aceb:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000acee:	85 c0                	test   eax,eax
c000acf0:	74 13                	je     c000ad05 <zoh_set_converter+0x2e>
c000acf2:	83 ec 0c             	sub    esp,0xc
c000acf5:	50                   	push   eax
c000acf6:	e8 d8 23 00 00       	call   c000d0d3 <free>
c000acfb:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000ad02:	83 c4 10             	add    esp,0x10
c000ad05:	50                   	push   eax
c000ad06:	50                   	push   eax
c000ad07:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000ad0a:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000ad11:	50                   	push   eax
c000ad12:	6a 01                	push   0x1
c000ad14:	e8 da 23 00 00       	call   c000d0f3 <calloc>
c000ad19:	83 c4 10             	add    esp,0x10
c000ad1c:	89 c2                	mov    edx,eax
c000ad1e:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000ad21:	85 d2                	test   edx,edx
c000ad23:	b8 01 00 00 00       	mov    eax,0x1
c000ad28:	74 2f                	je     c000ad59 <zoh_set_converter+0x82>
c000ad2a:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000ad30:	83 ec 0c             	sub    esp,0xc
c000ad33:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000ad36:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000ad39:	c7 43 24 26 aa 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000aa26
c000ad40:	c7 43 20 26 aa 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000aa26
c000ad47:	c7 43 28 87 ac 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ac87
c000ad4e:	53                   	push   ebx
c000ad4f:	e8 33 ff ff ff       	call   c000ac87 <zoh_reset>
c000ad54:	83 c4 10             	add    esp,0x10
c000ad57:	31 c0                	xor    eax,eax
c000ad59:	83 c4 08             	add    esp,0x8
c000ad5c:	5b                   	pop    ebx
c000ad5d:	c3                   	ret    

c000ad5e <Computer::close(int, int, void*)>:
c000ad5e:	57                   	push   edi
c000ad5f:	56                   	push   esi
c000ad60:	53                   	push   ebx
c000ad61:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ad65:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ad69:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ad6d:	83 ec 0c             	sub    esp,0xc
c000ad70:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000ad76:	e8 7d 87 00 00       	call   c00134f8 <Device::closeAll()>
c000ad7b:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000ad81:	83 c4 10             	add    esp,0x10
c000ad84:	8b 10                	mov    edx,DWORD PTR [eax]
c000ad86:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000ad8a:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000ad92:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000ad96:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ad9a:	5b                   	pop    ebx
c000ad9b:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000ad9e:	5e                   	pop    esi
c000ad9f:	5f                   	pop    edi
c000ada0:	ff e0                	jmp    eax

c000ada2 <Computer::Computer()>:
c000ada2:	83 ec 0c             	sub    esp,0xc
c000ada5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ada9:	83 ec 08             	sub    esp,0x8
c000adac:	68 3c ff 01 c0       	push   0xc001ff3c
c000adb1:	50                   	push   eax
c000adb2:	e8 bb 87 00 00       	call   c0013572 <Device::Device(char const*)>
c000adb7:	83 c4 10             	add    esp,0x10
c000adba:	ba b8 ff 01 c0       	mov    edx,0xc001ffb8
c000adbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000adc3:	89 10                	mov    DWORD PTR [eax],edx
c000adc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000adc9:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000add3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000add7:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000ade1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ade5:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000adeb:	83 ca 04             	or     edx,0x4
c000adee:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000adf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000adf8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000adfe:	0f b6 d0             	movzx  edx,al
c000ae01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae05:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000ae0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae10:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ae16:	0f b6 d0             	movzx  edx,al
c000ae19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae1d:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000ae22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae26:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ae2c:	8d 50 01             	lea    edx,[eax+0x1]
c000ae2f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ae33:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000ae39:	0f b6 d0             	movzx  edx,al
c000ae3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae40:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000ae44:	83 e1 3f             	and    ecx,0x3f
c000ae47:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000ae4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae4f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ae55:	0f b6 d0             	movzx  edx,al
c000ae58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae5c:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000ae63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae67:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ae6d:	0f b6 d0             	movzx  edx,al
c000ae70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae74:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000ae79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae7d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ae83:	8d 50 01             	lea    edx,[eax+0x1]
c000ae86:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ae8a:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000ae90:	0f b6 d0             	movzx  edx,al
c000ae93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae97:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000ae9b:	83 e1 3f             	and    ecx,0x3f
c000ae9e:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000aea2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aea6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000aeac:	0f b6 d0             	movzx  edx,al
c000aeaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aeb3:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000aeba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aebe:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000aec4:	0f b6 d0             	movzx  edx,al
c000aec7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aecb:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000aed0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aed4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000aeda:	8d 50 01             	lea    edx,[eax+0x1]
c000aedd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000aee1:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000aee7:	0f b6 d0             	movzx  edx,al
c000aeea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aeee:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000aef2:	83 e1 3f             	and    ecx,0x3f
c000aef5:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000aef9:	90                   	nop
c000aefa:	83 c4 0c             	add    esp,0xc
c000aefd:	c3                   	ret    

c000aefe <Computer::setBootMessage(char const*)>:
c000aefe:	c3                   	ret    
c000aeff:	90                   	nop

c000af00 <Computer::start()>:
c000af00:	56                   	push   esi
c000af01:	53                   	push   ebx
c000af02:	50                   	push   eax
c000af03:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000af07:	e8 5e 30 00 00       	call   c000df6a <lockScheduler()>
c000af0c:	e8 8d 33 00 00       	call   c000e29e <schedule()>
c000af11:	e8 56 30 00 00       	call   c000df6c <unlockScheduler()>
c000af16:	fb                   	sti    
c000af17:	83 ec 0c             	sub    esp,0xc
c000af1a:	68 3b 07 00 00       	push   0x73b
c000af1f:	e8 54 71 00 00       	call   c0012078 <operator new(unsigned long)>
c000af24:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000af2b:	89 c6                	mov    esi,eax
c000af2d:	ff 35 1c 33 02 c0    	push   DWORD PTR ds:0xc002331c
c000af33:	68 45 ff 01 c0       	push   0xc001ff45
c000af38:	6a 01                	push   0x1
c000af3a:	50                   	push   eax
c000af3b:	e8 8a 2e 00 00       	call   c000ddca <Process::Process(bool, char const*, Process*, char**)>
c000af40:	83 c4 20             	add    esp,0x20
c000af43:	68 ff 00 00 00       	push   0xff
c000af48:	6a 00                	push   0x0
c000af4a:	68 37 c5 00 c0       	push   0xc000c537
c000af4f:	56                   	push   esi
c000af50:	e8 3f 31 00 00       	call   c000e094 <Process::createThread(void (*)(void*), void*, int)>
c000af55:	6a 7a                	push   0x7a
c000af57:	6a 00                	push   0x0
c000af59:	68 da ea 00 c0       	push   0xc000eada
c000af5e:	ff 35 1c 33 02 c0    	push   DWORD PTR ds:0xc002331c
c000af64:	e8 2b 31 00 00       	call   c000e094 <Process::createThread(void (*)(void*), void*, int)>
c000af69:	83 c4 20             	add    esp,0x20
c000af6c:	a3 d0 32 02 c0       	mov    ds:0xc00232d0,eax
c000af71:	c6 05 cd 30 02 c0 01 	mov    BYTE PTR ds:0xc00230cd,0x1
c000af78:	e8 55 73 00 00       	call   c00122d2 <initVFS()>
c000af7d:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000af83:	8b 10                	mov    edx,DWORD PTR [eax]
c000af85:	6a 00                	push   0x0
c000af87:	6a 00                	push   0x0
c000af89:	6a 00                	push   0x0
c000af8b:	50                   	push   eax
c000af8c:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000af8f:	e8 e3 48 00 00       	call   c000f877 <setupSystemCalls()>
c000af94:	e8 37 7e 00 00       	call   c0012dd0 <loadClockSettings()>
c000af99:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000af9c:	e8 2b 85 00 00       	call   c00134cc <Device::loadDriversForAll()>
c000afa1:	c7 04 24 52 ff 01 c0 	mov    DWORD PTR [esp],0xc001ff52
c000afa8:	8b 1d c8 30 02 c0    	mov    ebx,DWORD PTR ds:0xc00230c8
c000afae:	e8 f6 12 00 00       	call   c000c2a9 <loadDLL(char const*)>
c000afb3:	5a                   	pop    edx
c000afb4:	59                   	pop    ecx
c000afb5:	53                   	push   ebx
c000afb6:	50                   	push   eax
c000afb7:	e8 b6 13 00 00       	call   c000c372 <executeDLL(unsigned long, void*)>
c000afbc:	c7 04 24 b4 16 02 c0 	mov    DWORD PTR [esp],0xc00216b4
c000afc3:	e8 00 1b 00 00       	call   c000cac8 <kprintf(char const*, ...)>
c000afc8:	83 c4 10             	add    esp,0x10
c000afcb:	83 ec 0c             	sub    esp,0xc
c000afce:	6a 02                	push   0x2
c000afd0:	e8 94 35 00 00       	call   c000e569 <blockTask(TaskState)>
c000afd5:	83 c4 10             	add    esp,0x10
c000afd8:	eb f1                	jmp    c000afcb <Computer::start()+0xcb>

c000afda <firstTask()>:
c000afda:	83 ec 18             	sub    esp,0x18
c000afdd:	ff 35 c8 30 02 c0    	push   DWORD PTR ds:0xc00230c8
c000afe3:	e8 18 ff ff ff       	call   c000af00 <Computer::start()>

c000afe8 <Computer::detectFeatures()>:
c000afe8:	55                   	push   ebp
c000afe9:	57                   	push   edi
c000afea:	56                   	push   esi
c000afeb:	53                   	push   ebx
c000afec:	83 ec 1c             	sub    esp,0x1c
c000afef:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000aff3:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000affd:	e8 bd 52 ff ff       	call   c00002bf <detectCPUID>
c000b002:	85 c0                	test   eax,eax
c000b004:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b00a:	0f 95 c2             	setne  dl
c000b00d:	83 e0 fd             	and    eax,0xfffffffd
c000b010:	d1 e2                	shl    edx,1
c000b012:	09 d0                	or     eax,edx
c000b014:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b01a:	a8 02                	test   al,0x2
c000b01c:	75 46                	jne    c000b064 <Computer::detectFeatures()+0x7c>
c000b01e:	f6 05 75 32 02 c0 04 	test   BYTE PTR ds:0xc0023275,0x4
c000b025:	74 07                	je     c000b02e <Computer::detectFeatures()+0x46>
c000b027:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000b02e:	e8 b3 2f 01 00       	call   c001dfe6 <x87Detect>
c000b033:	83 e0 01             	and    eax,0x1
c000b036:	c1 e0 04             	shl    eax,0x4
c000b039:	88 c2                	mov    dl,al
c000b03b:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b041:	83 e0 ef             	and    eax,0xffffffef
c000b044:	09 d0                	or     eax,edx
c000b046:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b04c:	a8 10                	test   al,0x10
c000b04e:	0f 85 10 01 00 00    	jne    c000b164 <Computer::detectFeatures()+0x17c>
c000b054:	84 c0                	test   al,al
c000b056:	0f 88 2b 01 00 00    	js     c000b187 <Computer::detectFeatures()+0x19f>
c000b05c:	83 c4 1c             	add    esp,0x1c
c000b05f:	5b                   	pop    ebx
c000b060:	5e                   	pop    esi
c000b061:	5f                   	pop    edi
c000b062:	5d                   	pop    ebp
c000b063:	c3                   	ret    
c000b064:	83 ec 0c             	sub    esp,0xc
c000b067:	6a 20                	push   0x20
c000b069:	e8 89 bc 00 00       	call   c0016cf7 <cpuidCheckEDX(unsigned int)>
c000b06e:	83 e0 01             	and    eax,0x1
c000b071:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000b078:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b07e:	83 e0 f7             	and    eax,0xfffffff7
c000b081:	09 d0                	or     eax,edx
c000b083:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b089:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000b090:	e8 62 bc 00 00       	call   c0016cf7 <cpuidCheckEDX(unsigned int)>
c000b095:	83 e0 01             	and    eax,0x1
c000b098:	88 c2                	mov    dl,al
c000b09a:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000b0a0:	83 e0 fe             	and    eax,0xfffffffe
c000b0a3:	09 d0                	or     eax,edx
c000b0a5:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000b0ab:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000b0b2:	e8 40 bc 00 00       	call   c0016cf7 <cpuidCheckEDX(unsigned int)>
c000b0b7:	c1 e0 07             	shl    eax,0x7
c000b0ba:	88 c2                	mov    dl,al
c000b0bc:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000b0c2:	83 e0 7f             	and    eax,0x7f
c000b0c5:	09 d0                	or     eax,edx
c000b0c7:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000b0cd:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000b0d4:	e8 1e bc 00 00       	call   c0016cf7 <cpuidCheckEDX(unsigned int)>
c000b0d9:	83 c4 10             	add    esp,0x10
c000b0dc:	83 e0 01             	and    eax,0x1
c000b0df:	c1 e0 05             	shl    eax,0x5
c000b0e2:	88 c2                	mov    dl,al
c000b0e4:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b0ea:	83 e0 df             	and    eax,0xffffffdf
c000b0ed:	09 d0                	or     eax,edx
c000b0ef:	f7 05 74 32 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0023274,0x401
c000b0f9:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b0ff:	0f 84 a8 00 00 00    	je     c000b1ad <Computer::detectFeatures()+0x1c5>
c000b105:	83 ec 0c             	sub    esp,0xc
c000b108:	80 a3 e8 01 00 00 fe 	and    BYTE PTR [ebx+0x1e8],0xfe
c000b10f:	8d 44 24 18          	lea    eax,[esp+0x18]
c000b113:	50                   	push   eax
c000b114:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000b118:	55                   	push   ebp
c000b119:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000b11d:	57                   	push   edi
c000b11e:	8d 74 24 18          	lea    esi,[esp+0x18]
c000b122:	56                   	push   esi
c000b123:	68 00 00 00 80       	push   0x80000000
c000b128:	e8 47 bb 00 00       	call   c0016c74 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000b12d:	83 c4 20             	add    esp,0x20
c000b130:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000b137:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000b13b:	0f 86 dd fe ff ff    	jbe    c000b01e <Computer::detectFeatures()+0x36>
c000b141:	83 ec 0c             	sub    esp,0xc
c000b144:	50                   	push   eax
c000b145:	55                   	push   ebp
c000b146:	57                   	push   edi
c000b147:	56                   	push   esi
c000b148:	68 01 00 00 80       	push   0x80000001
c000b14d:	e8 22 bb 00 00       	call   c0016c74 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000b152:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000b15c:	83 c4 20             	add    esp,0x20
c000b15f:	e9 ba fe ff ff       	jmp    c000b01e <Computer::detectFeatures()+0x36>
c000b164:	e8 37 2e 01 00       	call   c001dfa0 <sseDetect>
c000b169:	88 c2                	mov    dl,al
c000b16b:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b171:	c1 e2 07             	shl    edx,0x7
c000b174:	83 e0 7f             	and    eax,0x7f
c000b177:	09 d0                	or     eax,edx
c000b179:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b17f:	84 c0                	test   al,al
c000b181:	0f 89 d5 fe ff ff    	jns    c000b05c <Computer::detectFeatures()+0x74>
c000b187:	e8 04 2e 01 00       	call   c001df90 <avxDetect>
c000b18c:	83 e0 01             	and    eax,0x1
c000b18f:	c1 e0 05             	shl    eax,0x5
c000b192:	88 c2                	mov    dl,al
c000b194:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000b19a:	83 e0 df             	and    eax,0xffffffdf
c000b19d:	09 d0                	or     eax,edx
c000b19f:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000b1a5:	83 c4 1c             	add    esp,0x1c
c000b1a8:	5b                   	pop    ebx
c000b1a9:	5e                   	pop    esi
c000b1aa:	5f                   	pop    edi
c000b1ab:	5d                   	pop    ebp
c000b1ac:	c3                   	ret    
c000b1ad:	83 ec 0c             	sub    esp,0xc
c000b1b0:	68 00 02 00 00       	push   0x200
c000b1b5:	e8 3d bb 00 00       	call   c0016cf7 <cpuidCheckEDX(unsigned int)>
c000b1ba:	83 c4 10             	add    esp,0x10
c000b1bd:	e9 43 ff ff ff       	jmp    c000b105 <Computer::detectFeatures()+0x11d>

c000b1c2 <Computer::displayFeatures()>:
c000b1c2:	c3                   	ret    
c000b1c3:	90                   	nop

c000b1c4 <Computer::rdmsr(unsigned int)>:
c000b1c4:	83 ec 0c             	sub    esp,0xc
c000b1c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1cb:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000b1d2:	74 0a                	je     c000b1de <Computer::rdmsr(unsigned int)+0x1a>
c000b1d4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b1d8:	0f 32                	rdmsr  
c000b1da:	83 c4 0c             	add    esp,0xc
c000b1dd:	c3                   	ret    
c000b1de:	83 ec 0c             	sub    esp,0xc
c000b1e1:	68 6e ff 01 c0       	push   0xc001ff6e
c000b1e6:	e8 fb 19 00 00       	call   c000cbe6 <panic(char const*)>
c000b1eb:	83 c4 10             	add    esp,0x10
c000b1ee:	eb e4                	jmp    c000b1d4 <Computer::rdmsr(unsigned int)+0x10>

c000b1f0 <Computer::wrmsr(unsigned int, unsigned long long)>:
c000b1f0:	57                   	push   edi
c000b1f1:	56                   	push   esi
c000b1f2:	52                   	push   edx
c000b1f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1f7:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000b1fb:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000b1ff:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000b206:	74 0e                	je     c000b216 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000b208:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b20c:	89 f0                	mov    eax,esi
c000b20e:	89 fa                	mov    edx,edi
c000b210:	0f 30                	wrmsr  
c000b212:	58                   	pop    eax
c000b213:	5e                   	pop    esi
c000b214:	5f                   	pop    edi
c000b215:	c3                   	ret    
c000b216:	83 ec 0c             	sub    esp,0xc
c000b219:	68 74 ff 01 c0       	push   0xc001ff74
c000b21e:	e8 c3 19 00 00       	call   c000cbe6 <panic(char const*)>
c000b223:	83 c4 10             	add    esp,0x10
c000b226:	eb e0                	jmp    c000b208 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000b228 <Computer::nmiEnabled()>:
c000b228:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b22c:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000b232:	c3                   	ret    
c000b233:	90                   	nop

c000b234 <Computer::readCMOS(unsigned char)>:
c000b234:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b238:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000b23f:	19 c0                	sbb    eax,eax
c000b241:	83 e0 80             	and    eax,0xffffff80
c000b244:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000b248:	e6 70                	out    0x70,al
c000b24a:	e4 71                	in     al,0x71
c000b24c:	c3                   	ret    
c000b24d:	90                   	nop

c000b24e <Computer::enableNMI(bool)>:
c000b24e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b252:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b256:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000b25c:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000b264:	eb ce                	jmp    c000b234 <Computer::readCMOS(unsigned char)>

c000b266 <Computer::open(int, int, void*)>:
c000b266:	56                   	push   esi
c000b267:	53                   	push   ebx
c000b268:	83 ec 10             	sub    esp,0x10
c000b26b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b26f:	f6 05 74 32 02 c0 04 	test   BYTE PTR ds:0xc0023274,0x4
c000b276:	68 68 22 00 00       	push   0x2268
c000b27b:	0f 94 05 00 25 02 c0 	sete   BYTE PTR ds:0xc0022500
c000b282:	e8 f1 6d 00 00       	call   c0012078 <operator new(unsigned long)>
c000b287:	89 04 24             	mov    DWORD PTR [esp],eax
c000b28a:	89 c6                	mov    esi,eax
c000b28c:	e8 25 b1 00 00       	call   c00163b6 <ACPI::ACPI()>
c000b291:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000b297:	58                   	pop    eax
c000b298:	5a                   	pop    edx
c000b299:	56                   	push   esi
c000b29a:	53                   	push   ebx
c000b29b:	e8 e2 80 00 00       	call   c0013382 <Device::addChild(Device*)>
c000b2a0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b2a3:	e8 40 fd ff ff       	call   c000afe8 <Computer::detectFeatures()>
c000b2a8:	59                   	pop    ecx
c000b2a9:	5e                   	pop    esi
c000b2aa:	6a 01                	push   0x1
c000b2ac:	53                   	push   ebx
c000b2ad:	e8 9c ff ff ff       	call   c000b24e <Computer::enableNMI(bool)>
c000b2b2:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000b2b9:	e8 ba 6d 00 00       	call   c0012078 <operator new(unsigned long)>
c000b2be:	89 04 24             	mov    DWORD PTR [esp],eax
c000b2c1:	89 c6                	mov    esi,eax
c000b2c3:	e8 fa ba 00 00       	call   c0016dc2 <CPU::CPU()>
c000b2c8:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000b2ce:	58                   	pop    eax
c000b2cf:	5a                   	pop    edx
c000b2d0:	56                   	push   esi
c000b2d1:	53                   	push   ebx
c000b2d2:	e8 ab 80 00 00       	call   c0013382 <Device::addChild(Device*)>
c000b2d7:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000b2dd:	8b 10                	mov    edx,DWORD PTR [eax]
c000b2df:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000b2e3:	6a 00                	push   0x0
c000b2e5:	6a 00                	push   0x0
c000b2e7:	50                   	push   eax
c000b2e8:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000b2eb:	83 c4 20             	add    esp,0x20
c000b2ee:	e8 f7 85 00 00       	call   c00138ea <setupFPU()>
c000b2f3:	83 ec 08             	sub    esp,0x8
c000b2f6:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000b2fc:	50                   	push   eax
c000b2fd:	53                   	push   ebx
c000b2fe:	e8 7f 80 00 00       	call   c0013382 <Device::addChild(Device*)>
c000b303:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000b309:	8b 10                	mov    edx,DWORD PTR [eax]
c000b30b:	6a 00                	push   0x0
c000b30d:	6a 00                	push   0x0
c000b30f:	6a 00                	push   0x0
c000b311:	50                   	push   eax
c000b312:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000b315:	83 c4 14             	add    esp,0x14
c000b318:	68 da af 00 c0       	push   0xc000afda
c000b31d:	e8 72 2e 00 00       	call   c000e194 <setupMultitasking(void (*)())>
c000b322:	83 c4 14             	add    esp,0x14
c000b325:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000b32a:	5b                   	pop    ebx
c000b32b:	5e                   	pop    esi
c000b32c:	c3                   	ret    
c000b32d:	90                   	nop

c000b32e <Computer::disableNMI()>:
c000b32e:	6a 00                	push   0x0
c000b330:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000b334:	e8 15 ff ff ff       	call   c000b24e <Computer::enableNMI(bool)>
c000b339:	58                   	pop    eax
c000b33a:	5a                   	pop    edx
c000b33b:	c3                   	ret    

c000b33c <Computer::writeCMOS(unsigned char, unsigned char)>:
c000b33c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b340:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000b347:	19 c0                	sbb    eax,eax
c000b349:	83 e0 80             	and    eax,0xffffff80
c000b34c:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000b350:	e6 70                	out    0x70,al
c000b352:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b356:	e6 71                	out    0x71,al
c000b358:	c3                   	ret    
c000b359:	90                   	nop

c000b35a <Computer::handleNMI()>:
c000b35a:	56                   	push   esi
c000b35b:	53                   	push   ebx
c000b35c:	83 ec 10             	sub    esp,0x10
c000b35f:	e4 92                	in     al,0x92
c000b361:	89 c6                	mov    esi,eax
c000b363:	e4 61                	in     al,0x61
c000b365:	68 7a ff 01 c0       	push   0xc001ff7a
c000b36a:	88 c3                	mov    bl,al
c000b36c:	e8 57 17 00 00       	call   c000cac8 <kprintf(char const*, ...)>
c000b371:	83 c4 10             	add    esp,0x10
c000b374:	83 e6 10             	and    esi,0x10
c000b377:	75 0d                	jne    c000b386 <Computer::handleNMI()+0x2c>
c000b379:	f6 c3 40             	test   bl,0x40
c000b37c:	75 1d                	jne    c000b39b <Computer::handleNMI()+0x41>
c000b37e:	84 db                	test   bl,bl
c000b380:	78 2d                	js     c000b3af <Computer::handleNMI()+0x55>
c000b382:	58                   	pop    eax
c000b383:	5b                   	pop    ebx
c000b384:	5e                   	pop    esi
c000b385:	c3                   	ret    
c000b386:	83 ec 0c             	sub    esp,0xc
c000b389:	68 8b ff 01 c0       	push   0xc001ff8b
c000b38e:	e8 53 18 00 00       	call   c000cbe6 <panic(char const*)>
c000b393:	83 c4 10             	add    esp,0x10
c000b396:	f6 c3 40             	test   bl,0x40
c000b399:	74 e3                	je     c000b37e <Computer::handleNMI()+0x24>
c000b39b:	83 ec 0c             	sub    esp,0xc
c000b39e:	68 98 ff 01 c0       	push   0xc001ff98
c000b3a3:	e8 3e 18 00 00       	call   c000cbe6 <panic(char const*)>
c000b3a8:	83 c4 10             	add    esp,0x10
c000b3ab:	84 db                	test   bl,bl
c000b3ad:	79 d3                	jns    c000b382 <Computer::handleNMI()+0x28>
c000b3af:	c7 44 24 10 a2 ff 01 c0 	mov    DWORD PTR [esp+0x10],0xc001ffa2
c000b3b7:	5a                   	pop    edx
c000b3b8:	5b                   	pop    ebx
c000b3b9:	5e                   	pop    esi
c000b3ba:	e9 27 18 00 00       	jmp    c000cbe6 <panic(char const*)>
c000b3bf:	90                   	nop

c000b3c0 <Computer::setDiskActivityLight(int, bool)>:
c000b3c0:	56                   	push   esi
c000b3c1:	53                   	push   ebx
c000b3c2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b3c6:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000b3cb:	77 1b                	ja     c000b3e8 <Computer::setDiskActivityLight(int, bool)+0x28>
c000b3cd:	e4 92                	in     al,0x92
c000b3cf:	bb 40 00 00 00       	mov    ebx,0x40
c000b3d4:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000b3d8:	89 da                	mov    edx,ebx
c000b3da:	d3 e2                	shl    edx,cl
c000b3dc:	89 f1                	mov    ecx,esi
c000b3de:	f7 d2                	not    edx
c000b3e0:	d3 e3                	shl    ebx,cl
c000b3e2:	21 d0                	and    eax,edx
c000b3e4:	09 d8                	or     eax,ebx
c000b3e6:	e6 92                	out    0x92,al
c000b3e8:	5b                   	pop    ebx
c000b3e9:	5e                   	pop    esi
c000b3ea:	c3                   	ret    

c000b3eb <allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c000b3eb:	55                   	push   ebp
c000b3ec:	89 e5                	mov    ebp,esp
c000b3ee:	57                   	push   edi
c000b3ef:	56                   	push   esi
c000b3f0:	53                   	push   ebx
c000b3f1:	81 ec 2c 10 00 00    	sub    esp,0x102c
c000b3f7:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c000b3fa:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c000b3fd:	85 c0                	test   eax,eax
c000b3ff:	0f 95 c1             	setne  cl
c000b402:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000b406:	0f 94 c2             	sete   dl
c000b409:	84 d1                	test   cl,dl
c000b40b:	74 26                	je     c000b433 <allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c000b40d:	f7 45 14 ff 0f 00 00 	test   DWORD PTR [ebp+0x14],0xfff
c000b414:	74 1d                	je     c000b433 <allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c000b416:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c000b419:	8d 91 00 10 00 00    	lea    edx,[ecx+0x1000]
c000b41f:	89 d6                	mov    esi,edx
c000b421:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000b427:	81 ce 00 f0 ff ff    	or     esi,0xfffff000
c000b42d:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c000b430:	89 75 10             	mov    DWORD PTR [ebp+0x10],esi
c000b433:	83 ec 0c             	sub    esp,0xc
c000b436:	05 ff 0f 00 00       	add    eax,0xfff
c000b43b:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000b43e:	6a 01                	push   0x1
c000b440:	8d 99 ff 0f 00 00    	lea    ebx,[ecx+0xfff]
c000b446:	89 85 d4 ef ff ff    	mov    DWORD PTR [ebp-0x102c],eax
c000b44c:	e8 96 5a 00 00       	call   c0010ee7 <Virt::allocateKernelVirtualPages(int)>
c000b451:	83 c4 10             	add    esp,0x10
c000b454:	89 c6                	mov    esi,eax
c000b456:	81 fb ff 0f 00 00    	cmp    ebx,0xfff
c000b45c:	0f 86 21 01 00 00    	jbe    c000b583 <allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x198>
c000b462:	c1 eb 0c             	shr    ebx,0xc
c000b465:	c7 85 d0 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x1030],0x0
c000b46f:	89 9d cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],ebx
c000b475:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c000b478:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000b47b:	8b 95 cc ef ff ff    	mov    edx,DWORD PTR [ebp-0x1034]
c000b481:	03 45 14             	add    eax,DWORD PTR [ebp+0x14]
c000b484:	29 d8                	sub    eax,ebx
c000b486:	39 95 d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],edx
c000b48c:	0f 83 f4 00 00 00    	jae    c000b586 <allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x19b>
c000b492:	83 ec 0c             	sub    esp,0xc
c000b495:	8d 95 e4 ef ff ff    	lea    edx,[ebp-0x101c]
c000b49b:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000b49e:	3d 00 10 00 00       	cmp    eax,0x1000
c000b4a3:	8b 09                	mov    ecx,DWORD PTR [ecx]
c000b4a5:	52                   	push   edx
c000b4a6:	8d 95 e8 ef ff ff    	lea    edx,[ebp-0x1018]
c000b4ac:	52                   	push   edx
c000b4ad:	76 05                	jbe    c000b4b4 <allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc9>
c000b4af:	b8 00 10 00 00       	mov    eax,0x1000
c000b4b4:	31 d2                	xor    edx,edx
c000b4b6:	52                   	push   edx
c000b4b7:	50                   	push   eax
c000b4b8:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c000b4bb:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c000b4be:	83 c4 20             	add    esp,0x20
c000b4c1:	85 c0                	test   eax,eax
c000b4c3:	74 1f                	je     c000b4e4 <allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf9>
c000b4c5:	51                   	push   ecx
c000b4c6:	51                   	push   ecx
c000b4c7:	50                   	push   eax
c000b4c8:	68 dc ff 01 c0       	push   0xc001ffdc
c000b4cd:	e8 f6 15 00 00       	call   c000cac8 <kprintf(char const*, ...)>
c000b4d2:	89 34 24             	mov    DWORD PTR [esp],esi
c000b4d5:	e8 43 5d 00 00       	call   c001121d <Virt::freeKernelVirtualPages(unsigned long)>
c000b4da:	83 c4 10             	add    esp,0x10
c000b4dd:	31 c0                	xor    eax,eax
c000b4df:	e9 7c 01 00 00       	jmp    c000b660 <allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c000b4e4:	e8 81 2a 00 00       	call   c000df6a <lockScheduler()>
c000b4e9:	e8 7f 21 00 00       	call   c000d66d <Phys::allocatePage()>
c000b4ee:	6a 07                	push   0x7
c000b4f0:	89 85 c8 ef ff ff    	mov    DWORD PTR [ebp-0x1038],eax
c000b4f6:	56                   	push   esi
c000b4f7:	50                   	push   eax
c000b4f8:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000b4fe:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c000b501:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c000b507:	e8 12 60 00 00       	call   c001151e <VAS::mapPage(unsigned long, unsigned long, int)>
c000b50c:	83 c4 0c             	add    esp,0xc
c000b50f:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c000b515:	6a 00                	push   0x0
c000b517:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000b51d:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c000b520:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c000b526:	e8 51 5e 00 00       	call   c001137c <VAS::mapOtherVASIn(bool, VAS*)>
c000b52b:	58                   	pop    eax
c000b52c:	8b 85 c8 ef ff ff    	mov    eax,DWORD PTR [ebp-0x1038]
c000b532:	5a                   	pop    edx
c000b533:	68 07 04 00 00       	push   0x407
c000b538:	53                   	push   ebx
c000b539:	81 c3 00 10 00 00    	add    ebx,0x1000
c000b53f:	50                   	push   eax
c000b540:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c000b546:	6a 00                	push   0x0
c000b548:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b54d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000b550:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c000b556:	e8 c3 66 00 00       	call   c0011c1e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c000b55b:	83 c4 1c             	add    esp,0x1c
c000b55e:	8d 85 e8 ef ff ff    	lea    eax,[ebp-0x1018]
c000b564:	68 00 10 00 00       	push   0x1000
c000b569:	50                   	push   eax
c000b56a:	56                   	push   esi
c000b56b:	e8 62 50 ff ff       	call   c00005d2 <memcpy>
c000b570:	e8 f7 29 00 00       	call   c000df6c <unlockScheduler()>
c000b575:	ff 85 d0 ef ff ff    	inc    DWORD PTR [ebp-0x1030]
c000b57b:	83 c4 10             	add    esp,0x10
c000b57e:	e9 f5 fe ff ff       	jmp    c000b478 <allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x8d>
c000b583:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c000b586:	81 bd d4 ef ff ff ff 0f 00 00 	cmp    DWORD PTR [ebp-0x102c],0xfff
c000b590:	0f 86 bc 00 00 00    	jbe    c000b652 <allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x267>
c000b596:	e8 cf 29 00 00       	call   c000df6a <lockScheduler()>
c000b59b:	51                   	push   ecx
c000b59c:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c000b5a2:	6a 00                	push   0x0
c000b5a4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b5a9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000b5ac:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c000b5b2:	e8 c5 5d 00 00       	call   c001137c <VAS::mapOtherVASIn(bool, VAS*)>
c000b5b7:	8b 85 d4 ef ff ff    	mov    eax,DWORD PTR [ebp-0x102c]
c000b5bd:	83 c4 10             	add    esp,0x10
c000b5c0:	c1 e8 0c             	shr    eax,0xc
c000b5c3:	c7 85 d4 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x102c],0x0
c000b5cd:	89 85 d0 ef ff ff    	mov    DWORD PTR [ebp-0x1030],eax
c000b5d3:	e8 95 20 00 00       	call   c000d66d <Phys::allocatePage()>
c000b5d8:	6a 07                	push   0x7
c000b5da:	89 85 cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],eax
c000b5e0:	56                   	push   esi
c000b5e1:	50                   	push   eax
c000b5e2:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c000b5e8:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c000b5eb:	ff b1 32 05 00 00    	push   DWORD PTR [ecx+0x532]
c000b5f1:	e8 28 5f 00 00       	call   c001151e <VAS::mapPage(unsigned long, unsigned long, int)>
c000b5f6:	58                   	pop    eax
c000b5f7:	8b 85 cc ef ff ff    	mov    eax,DWORD PTR [ebp-0x1034]
c000b5fd:	5a                   	pop    edx
c000b5fe:	68 07 04 00 00       	push   0x407
c000b603:	53                   	push   ebx
c000b604:	81 c3 00 10 00 00    	add    ebx,0x1000
c000b60a:	50                   	push   eax
c000b60b:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c000b611:	6a 00                	push   0x0
c000b613:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b618:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000b61b:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c000b621:	e8 f8 65 00 00       	call   c0011c1e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c000b626:	83 c4 1c             	add    esp,0x1c
c000b629:	68 00 10 00 00       	push   0x1000
c000b62e:	6a 00                	push   0x0
c000b630:	56                   	push   esi
c000b631:	e8 d2 4f ff ff       	call   c0000608 <memset>
c000b636:	ff 85 d4 ef ff ff    	inc    DWORD PTR [ebp-0x102c]
c000b63c:	83 c4 10             	add    esp,0x10
c000b63f:	8b 8d d4 ef ff ff    	mov    ecx,DWORD PTR [ebp-0x102c]
c000b645:	39 8d d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],ecx
c000b64b:	77 86                	ja     c000b5d3 <allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1e8>
c000b64d:	e8 1a 29 00 00       	call   c000df6c <unlockScheduler()>
c000b652:	83 ec 0c             	sub    esp,0xc
c000b655:	56                   	push   esi
c000b656:	e8 c2 5b 00 00       	call   c001121d <Virt::freeKernelVirtualPages(unsigned long)>
c000b65b:	83 c4 10             	add    esp,0x10
c000b65e:	b0 01                	mov    al,0x1
c000b660:	8d 65 f4             	lea    esp,[ebp-0xc]
c000b663:	5b                   	pop    ebx
c000b664:	5e                   	pop    esi
c000b665:	5f                   	pop    edi
c000b666:	5d                   	pop    ebp
c000b667:	c3                   	ret    

c000b668 <loadProgramIntoMemory(Process*, char const*)>:
c000b668:	55                   	push   ebp
c000b669:	57                   	push   edi
c000b66a:	56                   	push   esi
c000b66b:	53                   	push   ebx
c000b66c:	83 ec 48             	sub    esp,0x48
c000b66f:	68 14 01 00 00       	push   0x114
c000b674:	e8 ff 69 00 00       	call   c0012078 <operator new(unsigned long)>
c000b679:	83 c4 0c             	add    esp,0xc
c000b67c:	89 c6                	mov    esi,eax
c000b67e:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000b682:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000b686:	50                   	push   eax
c000b687:	e8 1a 6e 00 00       	call   c00124a6 <File::File(char const*, Process*)>
c000b68c:	58                   	pop    eax
c000b68d:	5a                   	pop    edx
c000b68e:	6a 01                	push   0x1
c000b690:	56                   	push   esi
c000b691:	e8 74 6e 00 00       	call   c001250a <File::open(FileOpenMode)>
c000b696:	83 c4 10             	add    esp,0x10
c000b699:	85 c0                	test   eax,eax
c000b69b:	0f 85 47 01 00 00    	jne    c000b7e8 <loadProgramIntoMemory(Process*, char const*)+0x180>
c000b6a1:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000b6a9:	83 ec 0c             	sub    esp,0xc
c000b6ac:	6a 34                	push   0x34
c000b6ae:	e8 10 1a 00 00       	call   c000d0c3 <malloc>
c000b6b3:	89 c3                	mov    ebx,eax
c000b6b5:	58                   	pop    eax
c000b6b6:	8b 06                	mov    eax,DWORD PTR [esi]
c000b6b8:	8d 7c 24 38          	lea    edi,[esp+0x38]
c000b6bc:	57                   	push   edi
c000b6bd:	53                   	push   ebx
c000b6be:	6a 00                	push   0x0
c000b6c0:	6a 34                	push   0x34
c000b6c2:	56                   	push   esi
c000b6c3:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b6c6:	83 c4 20             	add    esp,0x20
c000b6c9:	85 c0                	test   eax,eax
c000b6cb:	0f 85 17 01 00 00    	jne    c000b7e8 <loadProgramIntoMemory(Process*, char const*)+0x180>
c000b6d1:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c000b6d7:	0f 85 0b 01 00 00    	jne    c000b7e8 <loadProgramIntoMemory(Process*, char const*)+0x180>
c000b6dd:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c000b6e0:	85 c0                	test   eax,eax
c000b6e2:	0f 84 00 01 00 00    	je     c000b7e8 <loadProgramIntoMemory(Process*, char const*)+0x180>
c000b6e8:	31 d2                	xor    edx,edx
c000b6ea:	55                   	push   ebp
c000b6eb:	52                   	push   edx
c000b6ec:	50                   	push   eax
c000b6ed:	56                   	push   esi
c000b6ee:	e8 d5 6e 00 00       	call   c00125c8 <File::seek(unsigned long long)>
c000b6f3:	83 c4 10             	add    esp,0x10
c000b6f6:	85 c0                	test   eax,eax
c000b6f8:	0f 85 ea 00 00 00    	jne    c000b7e8 <loadProgramIntoMemory(Process*, char const*)+0x180>
c000b6fe:	83 ec 0c             	sub    esp,0xc
c000b701:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000b704:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c000b708:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b70c:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c000b710:	0f af c2             	imul   eax,edx
c000b713:	50                   	push   eax
c000b714:	e8 aa 19 00 00       	call   c000d0c3 <malloc>
c000b719:	89 3c 24             	mov    DWORD PTR [esp],edi
c000b71c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b720:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000b722:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b726:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c000b72a:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c000b72e:	0f af c2             	imul   eax,edx
c000b731:	99                   	cdq    
c000b732:	52                   	push   edx
c000b733:	50                   	push   eax
c000b734:	56                   	push   esi
c000b735:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c000b738:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000b73b:	83 c4 20             	add    esp,0x20
c000b73e:	85 c0                	test   eax,eax
c000b740:	0f 84 a2 00 00 00    	je     c000b7e8 <loadProgramIntoMemory(Process*, char const*)+0x180>
c000b746:	31 d2                	xor    edx,edx
c000b748:	51                   	push   ecx
c000b749:	52                   	push   edx
c000b74a:	50                   	push   eax
c000b74b:	56                   	push   esi
c000b74c:	e8 77 6e 00 00       	call   c00125c8 <File::seek(unsigned long long)>
c000b751:	83 c4 10             	add    esp,0x10
c000b754:	85 c0                	test   eax,eax
c000b756:	0f 85 8c 00 00 00    	jne    c000b7e8 <loadProgramIntoMemory(Process*, char const*)+0x180>
c000b75c:	83 ec 0c             	sub    esp,0xc
c000b75f:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c000b763:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c000b767:	31 ed                	xor    ebp,ebp
c000b769:	0f af c2             	imul   eax,edx
c000b76c:	50                   	push   eax
c000b76d:	e8 51 19 00 00       	call   c000d0c3 <malloc>
c000b772:	89 3c 24             	mov    DWORD PTR [esp],edi
c000b775:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b779:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000b77b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b77f:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c000b783:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c000b787:	0f af c2             	imul   eax,edx
c000b78a:	99                   	cdq    
c000b78b:	52                   	push   edx
c000b78c:	50                   	push   eax
c000b78d:	56                   	push   esi
c000b78e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c000b791:	83 c4 20             	add    esp,0x20
c000b794:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000b79c:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c000b7a0:	0f 86 80 00 00 00    	jbe    c000b826 <loadProgramIntoMemory(Process*, char const*)+0x1be>
c000b7a6:	0f b7 fd             	movzx  edi,bp
c000b7a9:	c1 e7 05             	shl    edi,0x5
c000b7ac:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c000b7b0:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c000b7b3:	75 6b                	jne    c000b820 <loadProgramIntoMemory(Process*, char const*)+0x1b8>
c000b7b5:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000b7b8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b7bc:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c000b7bf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b7c3:	52                   	push   edx
c000b7c4:	31 d2                	xor    edx,edx
c000b7c6:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000b7c9:	52                   	push   edx
c000b7ca:	50                   	push   eax
c000b7cb:	56                   	push   esi
c000b7cc:	e8 f7 6d 00 00       	call   c00125c8 <File::seek(unsigned long long)>
c000b7d1:	83 c4 10             	add    esp,0x10
c000b7d4:	85 c0                	test   eax,eax
c000b7d6:	74 17                	je     c000b7ef <loadProgramIntoMemory(Process*, char const*)+0x187>
c000b7d8:	83 ec 0c             	sub    esp,0xc
c000b7db:	68 07 00 02 c0       	push   0xc0020007
c000b7e0:	e8 e3 12 00 00       	call   c000cac8 <kprintf(char const*, ...)>
c000b7e5:	83 c4 10             	add    esp,0x10
c000b7e8:	31 c0                	xor    eax,eax
c000b7ea:	e9 87 00 00 00       	jmp    c000b876 <loadProgramIntoMemory(Process*, char const*)+0x20e>
c000b7ef:	83 ec 0c             	sub    esp,0xc
c000b7f2:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c000b7f5:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c000b7f8:	50                   	push   eax
c000b7f9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b7fd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000b801:	56                   	push   esi
c000b802:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000b806:	e8 e0 fb ff ff       	call   c000b3eb <allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c000b80b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b80f:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c000b813:	83 c4 20             	add    esp,0x20
c000b816:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c000b81a:	73 04                	jae    c000b820 <loadProgramIntoMemory(Process*, char const*)+0x1b8>
c000b81c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b820:	45                   	inc    ebp
c000b821:	e9 76 ff ff ff       	jmp    c000b79c <loadProgramIntoMemory(Process*, char const*)+0x134>
c000b826:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000b82a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000b82e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b832:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c000b838:	83 ec 0c             	sub    esp,0xc
c000b83b:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c000b841:	25 00 f0 ff ff       	and    eax,0xfffff000
c000b846:	05 00 10 00 00       	add    eax,0x1000
c000b84b:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000b84e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b852:	e8 7c 18 00 00       	call   c000d0d3 <free>
c000b857:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b85a:	e8 74 18 00 00       	call   c000d0d3 <free>
c000b85f:	58                   	pop    eax
c000b860:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b864:	e8 6a 18 00 00       	call   c000d0d3 <free>
c000b869:	89 34 24             	mov    DWORD PTR [esp],esi
c000b86c:	e8 f7 6c 00 00       	call   c0012568 <File::close()>
c000b871:	83 c4 10             	add    esp,0x10
c000b874:	b0 01                	mov    al,0x1
c000b876:	83 c4 3c             	add    esp,0x3c
c000b879:	5b                   	pop    ebx
c000b87a:	5e                   	pop    esi
c000b87b:	5f                   	pop    edi
c000b87c:	5d                   	pop    ebp
c000b87d:	c3                   	ret    

c000b87e <runtimeReferenceHelper()>:
c000b87e:	83 ec 18             	sub    esp,0x18
c000b881:	68 0f 00 02 c0       	push   0xc002000f
c000b886:	e8 3d 12 00 00       	call   c000cac8 <kprintf(char const*, ...)>
c000b88b:	fa                   	cli    
c000b88c:	83 c4 10             	add    esp,0x10
c000b88f:	eb fe                	jmp    c000b88f <runtimeReferenceHelper()+0x11>

c000b891 <getAddressOfKernelSymbol(char const*)>:
c000b891:	57                   	push   edi
c000b892:	56                   	push   esi
c000b893:	53                   	push   ebx
c000b894:	31 db                	xor    ebx,ebx
c000b896:	39 1d 60 32 02 c0    	cmp    DWORD PTR ds:0xc0023260,ebx
c000b89c:	7e 3c                	jle    c000b8da <getAddressOfKernelSymbol(char const*)+0x49>
c000b89e:	8b 34 9d e0 31 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffdce20]
c000b8a5:	31 ff                	xor    edi,edi
c000b8a7:	39 3c 9d e0 30 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffdcf20],edi
c000b8ae:	7e 27                	jle    c000b8d7 <getAddressOfKernelSymbol(char const*)+0x46>
c000b8b0:	50                   	push   eax
c000b8b1:	50                   	push   eax
c000b8b2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b8b6:	8b 06                	mov    eax,DWORD PTR [esi]
c000b8b8:	03 04 9d 60 31 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffdcea0]
c000b8bf:	50                   	push   eax
c000b8c0:	e8 33 4e ff ff       	call   c00006f8 <strcmp>
c000b8c5:	83 c4 10             	add    esp,0x10
c000b8c8:	85 c0                	test   eax,eax
c000b8ca:	75 05                	jne    c000b8d1 <getAddressOfKernelSymbol(char const*)+0x40>
c000b8cc:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000b8cf:	eb 0b                	jmp    c000b8dc <getAddressOfKernelSymbol(char const*)+0x4b>
c000b8d1:	83 c6 10             	add    esi,0x10
c000b8d4:	47                   	inc    edi
c000b8d5:	eb d0                	jmp    c000b8a7 <getAddressOfKernelSymbol(char const*)+0x16>
c000b8d7:	43                   	inc    ebx
c000b8d8:	eb bc                	jmp    c000b896 <getAddressOfKernelSymbol(char const*)+0x5>
c000b8da:	31 c0                	xor    eax,eax
c000b8dc:	5b                   	pop    ebx
c000b8dd:	5e                   	pop    esi
c000b8de:	5f                   	pop    edi
c000b8df:	c3                   	ret    

c000b8e0 <loadKernelSymbolTable(char const*)>:
c000b8e0:	55                   	push   ebp
c000b8e1:	57                   	push   edi
c000b8e2:	56                   	push   esi
c000b8e3:	53                   	push   ebx
c000b8e4:	83 ec 68             	sub    esp,0x68
c000b8e7:	8b 35 1c 33 02 c0    	mov    esi,DWORD PTR ds:0xc002331c
c000b8ed:	68 14 01 00 00       	push   0x114
c000b8f2:	e8 81 67 00 00       	call   c0012078 <operator new(unsigned long)>
c000b8f7:	83 c4 0c             	add    esp,0xc
c000b8fa:	89 c3                	mov    ebx,eax
c000b8fc:	56                   	push   esi
c000b8fd:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c000b901:	50                   	push   eax
c000b902:	e8 9f 6b 00 00       	call   c00124a6 <File::File(char const*, Process*)>
c000b907:	5e                   	pop    esi
c000b908:	5f                   	pop    edi
c000b909:	6a 01                	push   0x1
c000b90b:	53                   	push   ebx
c000b90c:	e8 f9 6b 00 00       	call   c001250a <File::open(FileOpenMode)>
c000b911:	83 c4 10             	add    esp,0x10
c000b914:	31 d2                	xor    edx,edx
c000b916:	85 c0                	test   eax,eax
c000b918:	0f 85 79 02 00 00    	jne    c000bb97 <loadKernelSymbolTable(char const*)+0x2b7>
c000b91e:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000b926:	83 ec 0c             	sub    esp,0xc
c000b929:	6a 34                	push   0x34
c000b92b:	e8 93 17 00 00       	call   c000d0c3 <malloc>
c000b930:	59                   	pop    ecx
c000b931:	89 c7                	mov    edi,eax
c000b933:	8d 74 24 34          	lea    esi,[esp+0x34]
c000b937:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b939:	56                   	push   esi
c000b93a:	57                   	push   edi
c000b93b:	6a 00                	push   0x0
c000b93d:	6a 34                	push   0x34
c000b93f:	53                   	push   ebx
c000b940:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b943:	83 c4 20             	add    esp,0x20
c000b946:	85 c0                	test   eax,eax
c000b948:	74 17                	je     c000b961 <loadKernelSymbolTable(char const*)+0x81>
c000b94a:	83 ec 0c             	sub    esp,0xc
c000b94d:	68 31 00 02 c0       	push   0xc0020031
c000b952:	e8 8f 12 00 00       	call   c000cbe6 <panic(char const*)>
c000b957:	83 c4 10             	add    esp,0x10
c000b95a:	31 d2                	xor    edx,edx
c000b95c:	e9 36 02 00 00       	jmp    c000bb97 <loadKernelSymbolTable(char const*)+0x2b7>
c000b961:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c000b967:	75 e1                	jne    c000b94a <loadKernelSymbolTable(char const*)+0x6a>
c000b969:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c000b96c:	85 c0                	test   eax,eax
c000b96e:	74 da                	je     c000b94a <loadKernelSymbolTable(char const*)+0x6a>
c000b970:	52                   	push   edx
c000b971:	31 d2                	xor    edx,edx
c000b973:	52                   	push   edx
c000b974:	50                   	push   eax
c000b975:	53                   	push   ebx
c000b976:	e8 4d 6c 00 00       	call   c00125c8 <File::seek(unsigned long long)>
c000b97b:	83 c4 10             	add    esp,0x10
c000b97e:	85 c0                	test   eax,eax
c000b980:	75 c8                	jne    c000b94a <loadKernelSymbolTable(char const*)+0x6a>
c000b982:	83 ec 0c             	sub    esp,0xc
c000b985:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c000b989:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c000b98d:	31 ed                	xor    ebp,ebp
c000b98f:	0f af c2             	imul   eax,edx
c000b992:	50                   	push   eax
c000b993:	e8 2b 17 00 00       	call   c000d0c3 <malloc>
c000b998:	89 34 24             	mov    DWORD PTR [esp],esi
c000b99b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b99f:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c000b9a1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b9a5:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c000b9a9:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c000b9ad:	0f af c2             	imul   eax,edx
c000b9b0:	99                   	cdq    
c000b9b1:	52                   	push   edx
c000b9b2:	50                   	push   eax
c000b9b3:	53                   	push   ebx
c000b9b4:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c000b9b7:	83 c4 20             	add    esp,0x20
c000b9ba:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000b9c2:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000b9ca:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000b9d2:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000b9da:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c000b9de:	0f 86 aa 00 00 00    	jbe    c000ba8e <loadKernelSymbolTable(char const*)+0x1ae>
c000b9e4:	0f b7 f5             	movzx  esi,bp
c000b9e7:	6b f6 28             	imul   esi,esi,0x28
c000b9ea:	03 74 24 10          	add    esi,DWORD PTR [esp+0x10]
c000b9ee:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c000b9f1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b9f5:	50                   	push   eax
c000b9f6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b9fa:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c000b9fe:	8b 16                	mov    edx,DWORD PTR [esi]
c000ba00:	6b c0 28             	imul   eax,eax,0x28
c000ba03:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c000ba07:	89 d0                	mov    eax,edx
c000ba09:	31 d2                	xor    edx,edx
c000ba0b:	52                   	push   edx
c000ba0c:	50                   	push   eax
c000ba0d:	53                   	push   ebx
c000ba0e:	e8 b5 6b 00 00       	call   c00125c8 <File::seek(unsigned long long)>
c000ba13:	83 c4 0c             	add    esp,0xc
c000ba16:	6a 20                	push   0x20
c000ba18:	6a 00                	push   0x0
c000ba1a:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c000ba1e:	52                   	push   edx
c000ba1f:	e8 e4 4b ff ff       	call   c0000608 <memset>
c000ba24:	58                   	pop    eax
c000ba25:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ba27:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c000ba2b:	51                   	push   ecx
c000ba2c:	8d 54 24 40          	lea    edx,[esp+0x40]
c000ba30:	52                   	push   edx
c000ba31:	6a 00                	push   0x0
c000ba33:	6a 1f                	push   0x1f
c000ba35:	53                   	push   ebx
c000ba36:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000ba39:	83 c4 18             	add    esp,0x18
c000ba3c:	68 48 00 02 c0       	push   0xc0020048
c000ba41:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c000ba45:	52                   	push   edx
c000ba46:	e8 ad 4c ff ff       	call   c00006f8 <strcmp>
c000ba4b:	83 c4 10             	add    esp,0x10
c000ba4e:	85 c0                	test   eax,eax
c000ba50:	75 0f                	jne    c000ba61 <loadKernelSymbolTable(char const*)+0x181>
c000ba52:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000ba55:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ba59:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ba5d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ba61:	50                   	push   eax
c000ba62:	50                   	push   eax
c000ba63:	68 50 00 02 c0       	push   0xc0020050
c000ba68:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c000ba6c:	50                   	push   eax
c000ba6d:	e8 86 4c ff ff       	call   c00006f8 <strcmp>
c000ba72:	83 c4 10             	add    esp,0x10
c000ba75:	85 c0                	test   eax,eax
c000ba77:	75 0f                	jne    c000ba88 <loadKernelSymbolTable(char const*)+0x1a8>
c000ba79:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000ba7c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ba80:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ba84:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ba88:	45                   	inc    ebp
c000ba89:	e9 4c ff ff ff       	jmp    c000b9da <loadKernelSymbolTable(char const*)+0xfa>
c000ba8e:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000ba93:	75 10                	jne    c000baa5 <loadKernelSymbolTable(char const*)+0x1c5>
c000ba95:	83 ec 0c             	sub    esp,0xc
c000ba98:	68 58 00 02 c0       	push   0xc0020058
c000ba9d:	e8 44 11 00 00       	call   c000cbe6 <panic(char const*)>
c000baa2:	83 c4 10             	add    esp,0x10
c000baa5:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000baaa:	75 10                	jne    c000babc <loadKernelSymbolTable(char const*)+0x1dc>
c000baac:	83 ec 0c             	sub    esp,0xc
c000baaf:	68 58 00 02 c0       	push   0xc0020058
c000bab4:	e8 2d 11 00 00       	call   c000cbe6 <panic(char const*)>
c000bab9:	83 c4 10             	add    esp,0x10
c000babc:	31 d2                	xor    edx,edx
c000babe:	50                   	push   eax
c000babf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bac3:	52                   	push   edx
c000bac4:	50                   	push   eax
c000bac5:	53                   	push   ebx
c000bac6:	e8 fd 6a 00 00       	call   c00125c8 <File::seek(unsigned long long)>
c000bacb:	5a                   	pop    edx
c000bacc:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000bad0:	e8 ee 15 00 00       	call   c000d0c3 <malloc>
c000bad5:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000badd:	89 c1                	mov    ecx,eax
c000badf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000bae3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bae7:	5e                   	pop    esi
c000bae8:	8b 03                	mov    eax,DWORD PTR [ebx]
c000baea:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c000baee:	55                   	push   ebp
c000baef:	51                   	push   ecx
c000baf0:	89 4c 24 30          	mov    DWORD PTR [esp+0x30],ecx
c000baf4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000baf8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000bafc:	53                   	push   ebx
c000bafd:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000bb00:	83 c4 14             	add    esp,0x14
c000bb03:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bb07:	e8 b7 15 00 00       	call   c000d0c3 <malloc>
c000bb0c:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000bb0f:	89 c6                	mov    esi,eax
c000bb11:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bb13:	56                   	push   esi
c000bb14:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000bb18:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000bb1c:	53                   	push   ebx
c000bb1d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000bb20:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000bb24:	8b 15 60 32 02 c0    	mov    edx,DWORD PTR ds:0xc0023260
c000bb2a:	83 c4 1c             	add    esp,0x1c
c000bb2d:	c1 e8 04             	shr    eax,0x4
c000bb30:	89 04 95 e0 30 02 c0 	mov    DWORD PTR [edx*4-0x3ffdcf20],eax
c000bb37:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bb3b:	31 d2                	xor    edx,edx
c000bb3d:	52                   	push   edx
c000bb3e:	50                   	push   eax
c000bb3f:	53                   	push   ebx
c000bb40:	e8 83 6a 00 00       	call   c00125c8 <File::seek(unsigned long long)>
c000bb45:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000bb48:	31 d2                	xor    edx,edx
c000bb4a:	56                   	push   esi
c000bb4b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bb4f:	52                   	push   edx
c000bb50:	50                   	push   eax
c000bb51:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bb53:	53                   	push   ebx
c000bb54:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000bb57:	83 c4 14             	add    esp,0x14
c000bb5a:	53                   	push   ebx
c000bb5b:	e8 08 6a 00 00       	call   c0012568 <File::close()>
c000bb60:	5d                   	pop    ebp
c000bb61:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb65:	e8 69 15 00 00       	call   c000d0d3 <free>
c000bb6a:	89 3c 24             	mov    DWORD PTR [esp],edi
c000bb6d:	e8 61 15 00 00       	call   c000d0d3 <free>
c000bb72:	a1 60 32 02 c0       	mov    eax,ds:0xc0023260
c000bb77:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000bb7b:	8d 50 01             	lea    edx,[eax+0x1]
c000bb7e:	89 0c 85 e0 31 02 c0 	mov    DWORD PTR [eax*4-0x3ffdce20],ecx
c000bb85:	89 15 60 32 02 c0    	mov    DWORD PTR ds:0xc0023260,edx
c000bb8b:	89 34 85 60 31 02 c0 	mov    DWORD PTR [eax*4-0x3ffdcea0],esi
c000bb92:	83 c4 10             	add    esp,0x10
c000bb95:	b2 01                	mov    dl,0x1
c000bb97:	83 c4 5c             	add    esp,0x5c
c000bb9a:	88 d0                	mov    al,dl
c000bb9c:	5b                   	pop    ebx
c000bb9d:	5e                   	pop    esi
c000bb9e:	5f                   	pop    edi
c000bb9f:	5d                   	pop    ebp
c000bba0:	c3                   	ret    

c000bba1 <loadDriverIntoMemory(char const*, unsigned long)>:
c000bba1:	55                   	push   ebp
c000bba2:	57                   	push   edi
c000bba3:	56                   	push   esi
c000bba4:	53                   	push   ebx
c000bba5:	81 ec 68 03 00 00    	sub    esp,0x368
c000bbab:	8b 1d 1c 33 02 c0    	mov    ebx,DWORD PTR ds:0xc002331c
c000bbb1:	68 14 01 00 00       	push   0x114
c000bbb6:	e8 bd 64 00 00       	call   c0012078 <operator new(unsigned long)>
c000bbbb:	83 c4 0c             	add    esp,0xc
c000bbbe:	89 c5                	mov    ebp,eax
c000bbc0:	53                   	push   ebx
c000bbc1:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c000bbc8:	50                   	push   eax
c000bbc9:	e8 d8 68 00 00       	call   c00124a6 <File::File(char const*, Process*)>
c000bbce:	58                   	pop    eax
c000bbcf:	5a                   	pop    edx
c000bbd0:	6a 01                	push   0x1
c000bbd2:	55                   	push   ebp
c000bbd3:	e8 32 69 00 00       	call   c001250a <File::open(FileOpenMode)>
c000bbd8:	83 c4 10             	add    esp,0x10
c000bbdb:	85 c0                	test   eax,eax
c000bbdd:	0f 85 2e 01 00 00    	jne    c000bd11 <loadDriverIntoMemory(char const*, unsigned long)+0x170>
c000bbe3:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000bbeb:	83 ec 0c             	sub    esp,0xc
c000bbee:	6a 34                	push   0x34
c000bbf0:	e8 ce 14 00 00       	call   c000d0c3 <malloc>
c000bbf5:	89 c7                	mov    edi,eax
c000bbf7:	58                   	pop    eax
c000bbf8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000bbfb:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c000bbff:	53                   	push   ebx
c000bc00:	57                   	push   edi
c000bc01:	6a 00                	push   0x0
c000bc03:	6a 34                	push   0x34
c000bc05:	55                   	push   ebp
c000bc06:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000bc09:	83 c4 20             	add    esp,0x20
c000bc0c:	85 c0                	test   eax,eax
c000bc0e:	0f 85 fd 00 00 00    	jne    c000bd11 <loadDriverIntoMemory(char const*, unsigned long)+0x170>
c000bc14:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c000bc1a:	0f 85 f1 00 00 00    	jne    c000bd11 <loadDriverIntoMemory(char const*, unsigned long)+0x170>
c000bc20:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c000bc23:	85 c0                	test   eax,eax
c000bc25:	0f 84 e6 00 00 00    	je     c000bd11 <loadDriverIntoMemory(char const*, unsigned long)+0x170>
c000bc2b:	31 d2                	xor    edx,edx
c000bc2d:	56                   	push   esi
c000bc2e:	52                   	push   edx
c000bc2f:	50                   	push   eax
c000bc30:	55                   	push   ebp
c000bc31:	e8 92 69 00 00       	call   c00125c8 <File::seek(unsigned long long)>
c000bc36:	83 c4 10             	add    esp,0x10
c000bc39:	85 c0                	test   eax,eax
c000bc3b:	0f 85 d0 00 00 00    	jne    c000bd11 <loadDriverIntoMemory(char const*, unsigned long)+0x170>
c000bc41:	83 ec 0c             	sub    esp,0xc
c000bc44:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c000bc47:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c000bc4b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bc4f:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c000bc53:	0f af c2             	imul   eax,edx
c000bc56:	50                   	push   eax
c000bc57:	e8 67 14 00 00       	call   c000d0c3 <malloc>
c000bc5c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000bc5f:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000bc63:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c000bc66:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc6a:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c000bc6e:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c000bc72:	0f af c2             	imul   eax,edx
c000bc75:	99                   	cdq    
c000bc76:	52                   	push   edx
c000bc77:	50                   	push   eax
c000bc78:	55                   	push   ebp
c000bc79:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c000bc7c:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000bc7f:	83 c4 20             	add    esp,0x20
c000bc82:	85 c0                	test   eax,eax
c000bc84:	0f 84 87 00 00 00    	je     c000bd11 <loadDriverIntoMemory(char const*, unsigned long)+0x170>
c000bc8a:	31 d2                	xor    edx,edx
c000bc8c:	51                   	push   ecx
c000bc8d:	52                   	push   edx
c000bc8e:	50                   	push   eax
c000bc8f:	55                   	push   ebp
c000bc90:	e8 33 69 00 00       	call   c00125c8 <File::seek(unsigned long long)>
c000bc95:	83 c4 10             	add    esp,0x10
c000bc98:	85 c0                	test   eax,eax
c000bc9a:	75 75                	jne    c000bd11 <loadDriverIntoMemory(char const*, unsigned long)+0x170>
c000bc9c:	83 ec 0c             	sub    esp,0xc
c000bc9f:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c000bca3:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c000bca7:	31 f6                	xor    esi,esi
c000bca9:	0f af c2             	imul   eax,edx
c000bcac:	50                   	push   eax
c000bcad:	e8 11 14 00 00       	call   c000d0c3 <malloc>
c000bcb2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000bcb5:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000bcb9:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c000bcbc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000bcc0:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c000bcc4:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c000bcc8:	0f af c2             	imul   eax,edx
c000bccb:	99                   	cdq    
c000bccc:	52                   	push   edx
c000bccd:	50                   	push   eax
c000bcce:	55                   	push   ebp
c000bccf:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c000bcd2:	83 c4 20             	add    esp,0x20
c000bcd5:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c000bcd9:	0f 86 8d 00 00 00    	jbe    c000bd6c <loadDriverIntoMemory(char const*, unsigned long)+0x1cb>
c000bcdf:	0f b7 de             	movzx  ebx,si
c000bce2:	c1 e3 05             	shl    ebx,0x5
c000bce5:	03 5c 24 34          	add    ebx,DWORD PTR [esp+0x34]
c000bce9:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c000bcec:	75 78                	jne    c000bd66 <loadDriverIntoMemory(char const*, unsigned long)+0x1c5>
c000bcee:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000bcf1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bcf5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bcf8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000bcfc:	52                   	push   edx
c000bcfd:	31 d2                	xor    edx,edx
c000bcff:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000bd02:	52                   	push   edx
c000bd03:	50                   	push   eax
c000bd04:	55                   	push   ebp
c000bd05:	e8 be 68 00 00       	call   c00125c8 <File::seek(unsigned long long)>
c000bd0a:	83 c4 10             	add    esp,0x10
c000bd0d:	85 c0                	test   eax,eax
c000bd0f:	74 07                	je     c000bd18 <loadDriverIntoMemory(char const*, unsigned long)+0x177>
c000bd11:	31 c0                	xor    eax,eax
c000bd13:	e9 86 05 00 00       	jmp    c000c29e <loadDriverIntoMemory(char const*, unsigned long)+0x6fd>
c000bd18:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c000bd1f:	31 d2                	xor    edx,edx
c000bd21:	2b 44 24 20          	sub    eax,DWORD PTR [esp+0x20]
c000bd25:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c000bd28:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000bd2c:	83 ec 0c             	sub    esp,0xc
c000bd2f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bd33:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c000bd3a:	50                   	push   eax
c000bd3b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bd3f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bd43:	52                   	push   edx
c000bd44:	50                   	push   eax
c000bd45:	55                   	push   ebp
c000bd46:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c000bd49:	83 c4 1c             	add    esp,0x1c
c000bd4c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bd4f:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c000bd52:	50                   	push   eax
c000bd53:	6a 00                	push   0x0
c000bd55:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000bd59:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000bd5d:	50                   	push   eax
c000bd5e:	e8 a5 48 ff ff       	call   c0000608 <memset>
c000bd63:	83 c4 10             	add    esp,0x10
c000bd66:	46                   	inc    esi
c000bd67:	e9 69 ff ff ff       	jmp    c000bcd5 <loadDriverIntoMemory(char const*, unsigned long)+0x134>
c000bd6c:	31 db                	xor    ebx,ebx
c000bd6e:	50                   	push   eax
c000bd6f:	68 00 01 00 00       	push   0x100
c000bd74:	6a 00                	push   0x0
c000bd76:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c000bd7a:	50                   	push   eax
c000bd7b:	e8 88 48 ff ff       	call   c0000608 <memset>
c000bd80:	83 c4 0c             	add    esp,0xc
c000bd83:	68 00 01 00 00       	push   0x100
c000bd88:	6a 00                	push   0x0
c000bd8a:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c000bd91:	50                   	push   eax
c000bd92:	e8 71 48 ff ff       	call   c0000608 <memset>
c000bd97:	83 c4 10             	add    esp,0x10
c000bd9a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000bda2:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000bdaa:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000bdb2:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000bdba:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bdc2:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c000bdc6:	0f 86 30 01 00 00    	jbe    c000befc <loadDriverIntoMemory(char const*, unsigned long)+0x35b>
c000bdcc:	0f b7 f3             	movzx  esi,bx
c000bdcf:	6b f6 28             	imul   esi,esi,0x28
c000bdd2:	03 74 24 24          	add    esi,DWORD PTR [esp+0x24]
c000bdd6:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c000bdd9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000bddd:	50                   	push   eax
c000bdde:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000bde2:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c000bde6:	8b 06                	mov    eax,DWORD PTR [esi]
c000bde8:	6b d2 28             	imul   edx,edx,0x28
c000bdeb:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c000bdef:	31 d2                	xor    edx,edx
c000bdf1:	52                   	push   edx
c000bdf2:	50                   	push   eax
c000bdf3:	55                   	push   ebp
c000bdf4:	e8 cf 67 00 00       	call   c00125c8 <File::seek(unsigned long long)>
c000bdf9:	83 c4 0c             	add    esp,0xc
c000bdfc:	6a 20                	push   0x20
c000bdfe:	6a 00                	push   0x0
c000be00:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c000be07:	51                   	push   ecx
c000be08:	e8 fb 47 ff ff       	call   c0000608 <memset>
c000be0d:	58                   	pop    eax
c000be0e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000be11:	8d 54 24 58          	lea    edx,[esp+0x58]
c000be15:	52                   	push   edx
c000be16:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c000be1d:	51                   	push   ecx
c000be1e:	6a 00                	push   0x0
c000be20:	6a 1f                	push   0x1f
c000be22:	55                   	push   ebp
c000be23:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000be26:	83 c4 1c             	add    esp,0x1c
c000be29:	6a 09                	push   0x9
c000be2b:	68 72 00 02 c0       	push   0xc0020072
c000be30:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c000be37:	51                   	push   ecx
c000be38:	e8 32 47 ff ff       	call   c000056f <memcmp>
c000be3d:	83 c4 10             	add    esp,0x10
c000be40:	85 c0                	test   eax,eax
c000be42:	75 21                	jne    c000be65 <loadDriverIntoMemory(char const*, unsigned long)+0x2c4>
c000be44:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000be48:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000be4c:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c000be50:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000be54:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000be57:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c000be5e:	89 d0                	mov    eax,edx
c000be60:	40                   	inc    eax
c000be61:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000be65:	50                   	push   eax
c000be66:	6a 09                	push   0x9
c000be68:	68 7c 00 02 c0       	push   0xc002007c
c000be6d:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c000be74:	50                   	push   eax
c000be75:	e8 f5 46 ff ff       	call   c000056f <memcmp>
c000be7a:	83 c4 10             	add    esp,0x10
c000be7d:	85 c0                	test   eax,eax
c000be7f:	75 21                	jne    c000bea2 <loadDriverIntoMemory(char const*, unsigned long)+0x301>
c000be81:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000be85:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000be89:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c000be8d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000be91:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000be94:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c000be9b:	89 d0                	mov    eax,edx
c000be9d:	40                   	inc    eax
c000be9e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bea2:	50                   	push   eax
c000bea3:	50                   	push   eax
c000bea4:	68 48 00 02 c0       	push   0xc0020048
c000bea9:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c000beb0:	50                   	push   eax
c000beb1:	e8 42 48 ff ff       	call   c00006f8 <strcmp>
c000beb6:	83 c4 10             	add    esp,0x10
c000beb9:	85 c0                	test   eax,eax
c000bebb:	75 0f                	jne    c000becc <loadDriverIntoMemory(char const*, unsigned long)+0x32b>
c000bebd:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000bec0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bec4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bec8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000becc:	50                   	push   eax
c000becd:	50                   	push   eax
c000bece:	68 50 00 02 c0       	push   0xc0020050
c000bed3:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c000beda:	50                   	push   eax
c000bedb:	e8 18 48 ff ff       	call   c00006f8 <strcmp>
c000bee0:	83 c4 10             	add    esp,0x10
c000bee3:	85 c0                	test   eax,eax
c000bee5:	75 0f                	jne    c000bef6 <loadDriverIntoMemory(char const*, unsigned long)+0x355>
c000bee7:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000beea:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000beee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bef2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000bef6:	43                   	inc    ebx
c000bef7:	e9 c6 fe ff ff       	jmp    c000bdc2 <loadDriverIntoMemory(char const*, unsigned long)+0x221>
c000befc:	31 d2                	xor    edx,edx
c000befe:	51                   	push   ecx
c000beff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000bf03:	52                   	push   edx
c000bf04:	50                   	push   eax
c000bf05:	55                   	push   ebp
c000bf06:	e8 bd 66 00 00       	call   c00125c8 <File::seek(unsigned long long)>
c000bf0b:	5b                   	pop    ebx
c000bf0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf10:	e8 ae 11 00 00       	call   c000d0c3 <malloc>
c000bf15:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c000bf18:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bf1c:	31 d2                	xor    edx,edx
c000bf1e:	5e                   	pop    esi
c000bf1f:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c000bf23:	53                   	push   ebx
c000bf24:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000bf28:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000bf2c:	52                   	push   edx
c000bf2d:	50                   	push   eax
c000bf2e:	55                   	push   ebp
c000bf2f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c000bf32:	83 c4 14             	add    esp,0x14
c000bf35:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000bf39:	e8 85 11 00 00       	call   c000d0c3 <malloc>
c000bf3e:	31 d2                	xor    edx,edx
c000bf40:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000bf44:	83 c4 0c             	add    esp,0xc
c000bf47:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bf4b:	52                   	push   edx
c000bf4c:	50                   	push   eax
c000bf4d:	55                   	push   ebp
c000bf4e:	e8 75 66 00 00       	call   c00125c8 <File::seek(unsigned long long)>
c000bf53:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000bf56:	31 d2                	xor    edx,edx
c000bf58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf5c:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c000bf5f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000bf63:	52                   	push   edx
c000bf64:	50                   	push   eax
c000bf65:	55                   	push   ebp
c000bf66:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c000bf69:	83 c4 20             	add    esp,0x20
c000bf6c:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000bf74:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bf78:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c000bf7c:	0f 84 f2 02 00 00    	je     c000c274 <loadDriverIntoMemory(char const*, unsigned long)+0x6d3>
c000bf82:	8b 84 8c 50 01 00 00 	mov    eax,DWORD PTR [esp+ecx*4+0x150]
c000bf89:	31 d2                	xor    edx,edx
c000bf8b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bf8f:	c1 e8 03             	shr    eax,0x3
c000bf92:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000bf96:	50                   	push   eax
c000bf97:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bf9b:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c000bf9f:	52                   	push   edx
c000bfa0:	50                   	push   eax
c000bfa1:	55                   	push   ebp
c000bfa2:	e8 21 66 00 00       	call   c00125c8 <File::seek(unsigned long long)>
c000bfa7:	58                   	pop    eax
c000bfa8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bfac:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c000bfb3:	e8 0b 11 00 00       	call   c000d0c3 <malloc>
c000bfb8:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c000bfbb:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000bfbf:	5a                   	pop    edx
c000bfc0:	31 d2                	xor    edx,edx
c000bfc2:	8d 44 24 58          	lea    eax,[esp+0x58]
c000bfc6:	50                   	push   eax
c000bfc7:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000bfcb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000bfcf:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c000bfd6:	52                   	push   edx
c000bfd7:	50                   	push   eax
c000bfd8:	55                   	push   ebp
c000bfd9:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c000bfdc:	83 c4 20             	add    esp,0x20
c000bfdf:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bfe7:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000bfeb:	39 54 24 18          	cmp    DWORD PTR [esp+0x18],edx
c000bfef:	0f 8d 67 02 00 00    	jge    c000c25c <loadDriverIntoMemory(char const*, unsigned long)+0x6bb>
c000bff5:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000bff9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000bffd:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c000c002:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c000c005:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c009:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c00d:	8b 44 c8 04          	mov    eax,DWORD PTR [eax+ecx*8+0x4]
c000c011:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c015:	c1 e8 08             	shr    eax,0x8
c000c018:	89 c6                	mov    esi,eax
c000c01a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c01e:	c1 e6 04             	shl    esi,0x4
c000c021:	03 74 24 38          	add    esi,DWORD PTR [esp+0x38]
c000c025:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c000c028:	85 db                	test   ebx,ebx
c000c02a:	0f 85 15 01 00 00    	jne    c000c145 <loadDriverIntoMemory(char const*, unsigned long)+0x5a4>
c000c030:	83 ec 0c             	sub    esp,0xc
c000c033:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c037:	03 06                	add    eax,DWORD PTR [esi]
c000c039:	50                   	push   eax
c000c03a:	e8 52 f8 ff ff       	call   c000b891 <getAddressOfKernelSymbol(char const*)>
c000c03f:	83 c4 10             	add    esp,0x10
c000c042:	89 c3                	mov    ebx,eax
c000c044:	c6 44 24 1c 01       	mov    BYTE PTR [esp+0x1c],0x1
c000c049:	85 c0                	test   eax,eax
c000c04b:	0f 85 f4 00 00 00    	jne    c000c145 <loadDriverIntoMemory(char const*, unsigned long)+0x5a4>
c000c051:	50                   	push   eax
c000c052:	50                   	push   eax
c000c053:	68 86 00 02 c0       	push   0xc0020086
c000c058:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c05c:	03 06                	add    eax,DWORD PTR [esi]
c000c05e:	50                   	push   eax
c000c05f:	e8 94 46 ff ff       	call   c00006f8 <strcmp>
c000c064:	83 c4 10             	add    esp,0x10
c000c067:	85 c0                	test   eax,eax
c000c069:	75 0a                	jne    c000c075 <loadDriverIntoMemory(char const*, unsigned long)+0x4d4>
c000c06b:	bb 1c e3 01 c0       	mov    ebx,0xc001e31c
c000c070:	e9 cb 00 00 00       	jmp    c000c140 <loadDriverIntoMemory(char const*, unsigned long)+0x59f>
c000c075:	50                   	push   eax
c000c076:	50                   	push   eax
c000c077:	68 90 00 02 c0       	push   0xc0020090
c000c07c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c080:	03 06                	add    eax,DWORD PTR [esi]
c000c082:	50                   	push   eax
c000c083:	e8 70 46 ff ff       	call   c00006f8 <strcmp>
c000c088:	83 c4 10             	add    esp,0x10
c000c08b:	85 c0                	test   eax,eax
c000c08d:	75 0a                	jne    c000c099 <loadDriverIntoMemory(char const*, unsigned long)+0x4f8>
c000c08f:	bb 50 e0 01 c0       	mov    ebx,0xc001e050
c000c094:	e9 a7 00 00 00       	jmp    c000c140 <loadDriverIntoMemory(char const*, unsigned long)+0x59f>
c000c099:	50                   	push   eax
c000c09a:	50                   	push   eax
c000c09b:	68 99 00 02 c0       	push   0xc0020099
c000c0a0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c0a4:	03 06                	add    eax,DWORD PTR [esi]
c000c0a6:	50                   	push   eax
c000c0a7:	e8 4c 46 ff ff       	call   c00006f8 <strcmp>
c000c0ac:	83 c4 10             	add    esp,0x10
c000c0af:	85 c0                	test   eax,eax
c000c0b1:	75 0a                	jne    c000c0bd <loadDriverIntoMemory(char const*, unsigned long)+0x51c>
c000c0b3:	bb 1c e4 01 c0       	mov    ebx,0xc001e41c
c000c0b8:	e9 83 00 00 00       	jmp    c000c140 <loadDriverIntoMemory(char const*, unsigned long)+0x59f>
c000c0bd:	50                   	push   eax
c000c0be:	50                   	push   eax
c000c0bf:	68 a3 00 02 c0       	push   0xc00200a3
c000c0c4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c0c8:	03 06                	add    eax,DWORD PTR [esi]
c000c0ca:	50                   	push   eax
c000c0cb:	e8 28 46 ff ff       	call   c00006f8 <strcmp>
c000c0d0:	83 c4 10             	add    esp,0x10
c000c0d3:	85 c0                	test   eax,eax
c000c0d5:	74 64                	je     c000c13b <loadDriverIntoMemory(char const*, unsigned long)+0x59a>
c000c0d7:	50                   	push   eax
c000c0d8:	50                   	push   eax
c000c0d9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c0dd:	03 06                	add    eax,DWORD PTR [esi]
c000c0df:	50                   	push   eax
c000c0e0:	68 ac 00 02 c0       	push   0xc00200ac
c000c0e5:	e8 de 09 00 00       	call   c000cac8 <kprintf(char const*, ...)>
c000c0ea:	58                   	pop    eax
c000c0eb:	5a                   	pop    edx
c000c0ec:	68 c6 00 02 c0       	push   0xc00200c6
c000c0f1:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c000c0f8:	50                   	push   eax
c000c0f9:	e8 a9 45 ff ff       	call   c00006a7 <strcpy>
c000c0fe:	59                   	pop    ecx
c000c0ff:	58                   	pop    eax
c000c100:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c104:	03 06                	add    eax,DWORD PTR [esi]
c000c106:	50                   	push   eax
c000c107:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c000c10e:	50                   	push   eax
c000c10f:	e8 4a 46 ff ff       	call   c000075e <strcat>
c000c114:	58                   	pop    eax
c000c115:	5a                   	pop    edx
c000c116:	68 5c 01 02 c0       	push   0xc002015c
c000c11b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c000c122:	50                   	push   eax
c000c123:	e8 36 46 ff ff       	call   c000075e <strcat>
c000c128:	59                   	pop    ecx
c000c129:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c000c130:	50                   	push   eax
c000c131:	e8 b0 0a 00 00       	call   c000cbe6 <panic(char const*)>
c000c136:	83 c4 10             	add    esp,0x10
c000c139:	eb 0a                	jmp    c000c145 <loadDriverIntoMemory(char const*, unsigned long)+0x5a4>
c000c13b:	bb 9c e1 01 c0       	mov    ebx,0xc001e19c
c000c140:	c6 44 24 1c 01       	mov    BYTE PTR [esp+0x1c],0x1
c000c145:	80 7c 24 10 01       	cmp    BYTE PTR [esp+0x10],0x1
c000c14a:	75 7a                	jne    c000c1c6 <loadDriverIntoMemory(char const*, unsigned long)+0x625>
c000c14c:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c000c153:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c000c157:	2b 4c 24 20          	sub    ecx,DWORD PTR [esp+0x20]
c000c15b:	01 ce                	add    esi,ecx
c000c15d:	81 7c 24 10 01 01 00 00 	cmp    DWORD PTR [esp+0x10],0x101
c000c165:	8b 06                	mov    eax,DWORD PTR [esi]
c000c167:	0f 94 c2             	sete   dl
c000c16a:	81 7c 24 10 01 04 00 00 	cmp    DWORD PTR [esp+0x10],0x401
c000c172:	0f 94 44 24 10       	sete   BYTE PTR [esp+0x10]
c000c177:	0b 54 24 10          	or     edx,DWORD PTR [esp+0x10]
c000c17b:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c000c180:	74 2b                	je     c000c1ad <loadDriverIntoMemory(char const*, unsigned long)+0x60c>
c000c182:	8d 0c 03             	lea    ecx,[ebx+eax*1]
c000c185:	84 d2                	test   dl,dl
c000c187:	75 0a                	jne    c000c193 <loadDriverIntoMemory(char const*, unsigned long)+0x5f2>
c000c189:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c000c18d:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c000c191:	76 2c                	jbe    c000c1bf <loadDriverIntoMemory(char const*, unsigned long)+0x61e>
c000c193:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000c197:	83 ec 0c             	sub    esp,0xc
c000c19a:	68 dd 00 02 c0       	push   0xc00200dd
c000c19f:	e8 42 0a 00 00       	call   c000cbe6 <panic(char const*)>
c000c1a4:	83 c4 10             	add    esp,0x10
c000c1a7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c1ab:	eb 12                	jmp    c000c1bf <loadDriverIntoMemory(char const*, unsigned long)+0x61e>
c000c1ad:	01 c1                	add    ecx,eax
c000c1af:	84 d2                	test   dl,dl
c000c1b1:	75 0c                	jne    c000c1bf <loadDriverIntoMemory(char const*, unsigned long)+0x61e>
c000c1b3:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c000c1b7:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c000c1bb:	77 02                	ja     c000c1bf <loadDriverIntoMemory(char const*, unsigned long)+0x61e>
c000c1bd:	01 d9                	add    ecx,ebx
c000c1bf:	89 0e                	mov    DWORD PTR [esi],ecx
c000c1c1:	e9 8d 00 00 00       	jmp    c000c253 <loadDriverIntoMemory(char const*, unsigned long)+0x6b2>
c000c1c6:	80 7c 24 10 02       	cmp    BYTE PTR [esp+0x10],0x2
c000c1cb:	75 65                	jne    c000c232 <loadDriverIntoMemory(char const*, unsigned long)+0x691>
c000c1cd:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c000c1d4:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c000c1d8:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c000c1dc:	81 7c 24 10 01 01 00 00 	cmp    DWORD PTR [esp+0x10],0x101
c000c1e4:	74 14                	je     c000c1fa <loadDriverIntoMemory(char const*, unsigned long)+0x659>
c000c1e6:	81 7c 24 10 01 04 00 00 	cmp    DWORD PTR [esp+0x10],0x401
c000c1ee:	74 0a                	je     c000c1fa <loadDriverIntoMemory(char const*, unsigned long)+0x659>
c000c1f0:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c000c1f4:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c000c1f8:	76 10                	jbe    c000c20a <loadDriverIntoMemory(char const*, unsigned long)+0x669>
c000c1fa:	83 ec 0c             	sub    esp,0xc
c000c1fd:	68 f9 00 02 c0       	push   0xc00200f9
c000c202:	e8 df 09 00 00       	call   c000cbe6 <panic(char const*)>
c000c207:	83 c4 10             	add    esp,0x10
c000c20a:	8b 16                	mov    edx,DWORD PTR [esi]
c000c20c:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c000c211:	74 13                	je     c000c226 <loadDriverIntoMemory(char const*, unsigned long)+0x685>
c000c213:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c217:	2b 84 24 74 03 00 00 	sub    eax,DWORD PTR [esp+0x374]
c000c21e:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c000c222:	01 d0                	add    eax,edx
c000c224:	eb 06                	jmp    c000c22c <loadDriverIntoMemory(char const*, unsigned long)+0x68b>
c000c226:	89 d0                	mov    eax,edx
c000c228:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c000c22c:	01 c3                	add    ebx,eax
c000c22e:	89 1e                	mov    DWORD PTR [esi],ebx
c000c230:	eb 21                	jmp    c000c253 <loadDriverIntoMemory(char const*, unsigned long)+0x6b2>
c000c232:	51                   	push   ecx
c000c233:	51                   	push   ecx
c000c234:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000c239:	50                   	push   eax
c000c23a:	68 15 01 02 c0       	push   0xc0020115
c000c23f:	e8 84 08 00 00       	call   c000cac8 <kprintf(char const*, ...)>
c000c244:	c7 04 24 20 01 02 c0 	mov    DWORD PTR [esp],0xc0020120
c000c24b:	e8 96 09 00 00       	call   c000cbe6 <panic(char const*)>
c000c250:	83 c4 10             	add    esp,0x10
c000c253:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000c257:	e9 8b fd ff ff       	jmp    c000bfe7 <loadDriverIntoMemory(char const*, unsigned long)+0x446>
c000c25c:	83 ec 0c             	sub    esp,0xc
c000c25f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c263:	e8 6b 0e 00 00       	call   c000d0d3 <free>
c000c268:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c000c26c:	83 c4 10             	add    esp,0x10
c000c26f:	e9 00 fd ff ff       	jmp    c000bf74 <loadDriverIntoMemory(char const*, unsigned long)+0x3d3>
c000c274:	83 ec 0c             	sub    esp,0xc
c000c277:	55                   	push   ebp
c000c278:	e8 eb 62 00 00       	call   c0012568 <File::close()>
c000c27d:	58                   	pop    eax
c000c27e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000c282:	e8 4c 0e 00 00       	call   c000d0d3 <free>
c000c287:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c28a:	e8 44 0e 00 00       	call   c000d0d3 <free>
c000c28f:	5a                   	pop    edx
c000c290:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000c294:	e8 3a 0e 00 00       	call   c000d0d3 <free>
c000c299:	83 c4 10             	add    esp,0x10
c000c29c:	b0 01                	mov    al,0x1
c000c29e:	81 c4 5c 03 00 00    	add    esp,0x35c
c000c2a4:	5b                   	pop    ebx
c000c2a5:	5e                   	pop    esi
c000c2a6:	5f                   	pop    edi
c000c2a7:	5d                   	pop    ebp
c000c2a8:	c3                   	ret    

c000c2a9 <loadDLL(char const*)>:
c000c2a9:	57                   	push   edi
c000c2aa:	56                   	push   esi
c000c2ab:	53                   	push   ebx
c000c2ac:	81 ec 18 01 00 00    	sub    esp,0x118
c000c2b2:	8b 9c 24 28 01 00 00 	mov    ebx,DWORD PTR [esp+0x128]
c000c2b9:	53                   	push   ebx
c000c2ba:	68 38 01 02 c0       	push   0xc0020138
c000c2bf:	e8 04 08 00 00       	call   c000cac8 <kprintf(char const*, ...)>
c000c2c4:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000c2cb:	e8 a8 5d 00 00       	call   c0012078 <operator new(unsigned long)>
c000c2d0:	83 c4 0c             	add    esp,0xc
c000c2d3:	89 c6                	mov    esi,eax
c000c2d5:	ff 35 1c 33 02 c0    	push   DWORD PTR ds:0xc002331c
c000c2db:	53                   	push   ebx
c000c2dc:	50                   	push   eax
c000c2dd:	e8 c4 61 00 00       	call   c00124a6 <File::File(char const*, Process*)>
c000c2e2:	83 c4 0c             	add    esp,0xc
c000c2e5:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000c2e9:	50                   	push   eax
c000c2ea:	8d 44 24 10          	lea    eax,[esp+0x10]
c000c2ee:	50                   	push   eax
c000c2ef:	56                   	push   esi
c000c2f0:	e8 c1 64 00 00       	call   c00127b6 <File::stat(unsigned long long*, bool*)>
c000c2f5:	83 c4 10             	add    esp,0x10
c000c2f8:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000c2fd:	75 0a                	jne    c000c309 <loadDLL(char const*)+0x60>
c000c2ff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c303:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000c307:	75 32                	jne    c000c33b <loadDLL(char const*)+0x92>
c000c309:	50                   	push   eax
c000c30a:	50                   	push   eax
c000c30b:	68 49 01 02 c0       	push   0xc0020149
c000c310:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c000c314:	57                   	push   edi
c000c315:	e8 8d 43 ff ff       	call   c00006a7 <strcpy>
c000c31a:	58                   	pop    eax
c000c31b:	5a                   	pop    edx
c000c31c:	53                   	push   ebx
c000c31d:	57                   	push   edi
c000c31e:	e8 3b 44 ff ff       	call   c000075e <strcat>
c000c323:	59                   	pop    ecx
c000c324:	58                   	pop    eax
c000c325:	68 5c 01 02 c0       	push   0xc002015c
c000c32a:	57                   	push   edi
c000c32b:	e8 2e 44 ff ff       	call   c000075e <strcat>
c000c330:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c333:	e8 ae 08 00 00       	call   c000cbe6 <panic(char const*)>
c000c338:	83 c4 10             	add    esp,0x10
c000c33b:	83 ec 0c             	sub    esp,0xc
c000c33e:	8b 06                	mov    eax,DWORD PTR [esi]
c000c340:	56                   	push   esi
c000c341:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000c344:	58                   	pop    eax
c000c345:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c349:	e8 75 0d 00 00       	call   c000d0c3 <malloc>
c000c34e:	5a                   	pop    edx
c000c34f:	89 c6                	mov    esi,eax
c000c351:	59                   	pop    ecx
c000c352:	50                   	push   eax
c000c353:	68 5e 01 02 c0       	push   0xc002015e
c000c358:	e8 6b 07 00 00       	call   c000cac8 <kprintf(char const*, ...)>
c000c35d:	5f                   	pop    edi
c000c35e:	58                   	pop    eax
c000c35f:	56                   	push   esi
c000c360:	53                   	push   ebx
c000c361:	e8 3b f8 ff ff       	call   c000bba1 <loadDriverIntoMemory(char const*, unsigned long)>
c000c366:	81 c4 20 01 00 00    	add    esp,0x120
c000c36c:	89 f0                	mov    eax,esi
c000c36e:	5b                   	pop    ebx
c000c36f:	5e                   	pop    esi
c000c370:	5f                   	pop    edi
c000c371:	c3                   	ret    

c000c372 <executeDLL(unsigned long, void*)>:
c000c372:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c376:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c37a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000c37e:	ff e0                	jmp    eax

c000c380 <GDTEntry::setBase(unsigned int)>:
c000c380:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c384:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000c388:	89 c1                	mov    ecx,eax
c000c38a:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000c38e:	c1 e9 10             	shr    ecx,0x10
c000c391:	c1 e8 18             	shr    eax,0x18
c000c394:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000c397:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000c39a:	c3                   	ret    
c000c39b:	90                   	nop

c000c39c <GDTEntry::setLimit(unsigned int)>:
c000c39c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000c3a0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c3a4:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000c3a7:	66 89 01             	mov    WORD PTR [ecx],ax
c000c3aa:	83 e2 f0             	and    edx,0xfffffff0
c000c3ad:	c1 e8 10             	shr    eax,0x10
c000c3b0:	83 e0 0f             	and    eax,0xf
c000c3b3:	09 d0                	or     eax,edx
c000c3b5:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000c3b8:	c3                   	ret    
c000c3b9:	90                   	nop

c000c3ba <GDT::GDT()>:
c000c3ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c3be:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c3c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c3c8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c3ce:	90                   	nop
c000c3cf:	c3                   	ret    

c000c3d0 <GDT::addEntry(GDTEntry)>:
c000c3d0:	53                   	push   ebx
c000c3d1:	83 ec 0c             	sub    esp,0xc
c000c3d4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000c3d8:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c3da:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000c3e1:	52                   	push   edx
c000c3e2:	50                   	push   eax
c000c3e3:	68 7d 01 02 c0       	push   0xc002017d
c000c3e8:	e8 db 06 00 00       	call   c000cac8 <kprintf(char const*, ...)>
c000c3ed:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c3ef:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000c3f3:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000c3f7:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000c3fb:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000c3ff:	8d 50 01             	lea    edx,[eax+0x1]
c000c402:	c1 e0 03             	shl    eax,0x3
c000c405:	89 13                	mov    DWORD PTR [ebx],edx
c000c407:	83 c4 18             	add    esp,0x18
c000c40a:	5b                   	pop    ebx
c000c40b:	c3                   	ret    

c000c40c <GDT::getNumberOfEntries()>:
c000c40c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c410:	8b 00                	mov    eax,DWORD PTR [eax]
c000c412:	c3                   	ret    
c000c413:	90                   	nop

c000c414 <GDT::flush()>:
c000c414:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c418:	8b 10                	mov    edx,DWORD PTR [eax]
c000c41a:	83 c0 04             	add    eax,0x4
c000c41d:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000c424:	a3 66 32 02 c0       	mov    ds:0xc0023266,eax
c000c429:	66 89 15 64 32 02 c0 	mov    WORD PTR ds:0xc0023264,dx
c000c430:	e9 fe 3e ff ff       	jmp    c0000333 <loadGDT>
c000c435:	90                   	nop

c000c436 <GDT::setup()>:
c000c436:	55                   	push   ebp
c000c437:	57                   	push   edi
c000c438:	56                   	push   esi
c000c439:	53                   	push   ebx
c000c43a:	83 ec 3c             	sub    esp,0x3c
c000c43d:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000c441:	6a 00                	push   0x0
c000c443:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000c447:	53                   	push   ebx
c000c448:	e8 33 ff ff ff       	call   c000c380 <GDTEntry::setBase(unsigned int)>
c000c44d:	6a 00                	push   0x0
c000c44f:	53                   	push   ebx
c000c450:	e8 47 ff ff ff       	call   c000c39c <GDTEntry::setLimit(unsigned int)>
c000c455:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000c45d:	6a 00                	push   0x0
c000c45f:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000c463:	53                   	push   ebx
c000c464:	e8 17 ff ff ff       	call   c000c380 <GDTEntry::setBase(unsigned int)>
c000c469:	68 ff ff ff 00       	push   0xffffff
c000c46e:	53                   	push   ebx
c000c46f:	e8 28 ff ff ff       	call   c000c39c <GDTEntry::setLimit(unsigned int)>
c000c474:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000c478:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000c47d:	0d 00 9a c0 00       	or     eax,0xc09a00
c000c482:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000c486:	83 c4 20             	add    esp,0x20
c000c489:	6a 00                	push   0x0
c000c48b:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000c48f:	53                   	push   ebx
c000c490:	e8 eb fe ff ff       	call   c000c380 <GDTEntry::setBase(unsigned int)>
c000c495:	68 ff ff ff 00       	push   0xffffff
c000c49a:	53                   	push   ebx
c000c49b:	e8 fc fe ff ff       	call   c000c39c <GDTEntry::setLimit(unsigned int)>
c000c4a0:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000c4a4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c4a8:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000c4ac:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000c4b0:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000c4b4:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000c4b9:	0d 00 92 c0 00       	or     eax,0xc09200
c000c4be:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000c4c2:	89 d8                	mov    eax,ebx
c000c4c4:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000c4c8:	80 cc 60             	or     ah,0x60
c000c4cb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c4cf:	83 c4 0c             	add    esp,0xc
c000c4d2:	89 f8                	mov    eax,edi
c000c4d4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c4d8:	80 cc 60             	or     ah,0x60
c000c4db:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c4df:	89 c7                	mov    edi,eax
c000c4e1:	55                   	push   ebp
c000c4e2:	e8 e9 fe ff ff       	call   c000c3d0 <GDT::addEntry(GDTEntry)>
c000c4e7:	83 c4 0c             	add    esp,0xc
c000c4ea:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000c4ee:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000c4f2:	55                   	push   ebp
c000c4f3:	e8 d8 fe ff ff       	call   c000c3d0 <GDT::addEntry(GDTEntry)>
c000c4f8:	83 c4 0c             	add    esp,0xc
c000c4fb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000c4ff:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000c503:	55                   	push   ebp
c000c504:	e8 c7 fe ff ff       	call   c000c3d0 <GDT::addEntry(GDTEntry)>
c000c509:	83 c4 0c             	add    esp,0xc
c000c50c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c510:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c514:	53                   	push   ebx
c000c515:	51                   	push   ecx
c000c516:	55                   	push   ebp
c000c517:	e8 b4 fe ff ff       	call   c000c3d0 <GDT::addEntry(GDTEntry)>
c000c51c:	83 c4 0c             	add    esp,0xc
c000c51f:	57                   	push   edi
c000c520:	56                   	push   esi
c000c521:	55                   	push   ebp
c000c522:	e8 a9 fe ff ff       	call   c000c3d0 <GDT::addEntry(GDTEntry)>
c000c527:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000c52a:	e8 e5 fe ff ff       	call   c000c414 <GDT::flush()>
c000c52f:	83 c4 4c             	add    esp,0x4c
c000c532:	5b                   	pop    ebx
c000c533:	5e                   	pop    esi
c000c534:	5f                   	pop    edi
c000c535:	5d                   	pop    ebp
c000c536:	c3                   	ret    

c000c537 <idleFunction(void*)>:
c000c537:	53                   	push   ebx
c000c538:	83 ec 08             	sub    esp,0x8
c000c53b:	e8 2c 1a 00 00       	call   c000df6c <unlockScheduler()>
c000c540:	e8 69 a8 00 00       	call   c0016dae <thisCPU()>
c000c545:	f6 80 92 11 00 00 04 	test   BYTE PTR [eax+0x1192],0x4
c000c54c:	74 41                	je     c000c58f <idleFunction(void*)+0x58>
c000c54e:	a1 c8 30 02 c0       	mov    eax,ds:0xc00230c8
c000c553:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000c55a:	74 33                	je     c000c58f <idleFunction(void*)+0x58>
c000c55c:	31 db                	xor    ebx,ebx
c000c55e:	52                   	push   edx
c000c55f:	52                   	push   edx
c000c560:	68 e1 00 00 00       	push   0xe1
c000c565:	50                   	push   eax
c000c566:	e8 59 ec ff ff       	call   c000b1c4 <Computer::rdmsr(unsigned int)>
c000c56b:	53                   	push   ebx
c000c56c:	83 e0 02             	and    eax,0x2
c000c56f:	50                   	push   eax
c000c570:	68 e1 00 00 00       	push   0xe1
c000c575:	ff 35 c8 30 02 c0    	push   DWORD PTR ds:0xc00230c8
c000c57b:	e8 70 ec ff ff       	call   c000b1f0 <Computer::wrmsr(unsigned int, unsigned long long)>
c000c580:	83 c4 20             	add    esp,0x20
c000c583:	e8 c8 3b ff ff       	call   c0000150 <doTPAUSE>
c000c588:	e8 53 20 01 00       	call   c001e5e0 <idleCommon()>
c000c58d:	eb f4                	jmp    c000c583 <idleFunction(void*)+0x4c>
c000c58f:	fb                   	sti    
c000c590:	f4                   	hlt    
c000c591:	e8 4a 20 01 00       	call   c001e5e0 <idleCommon()>
c000c596:	eb f7                	jmp    c000c58f <idleFunction(void*)+0x58>

c000c598 <IDTEntry::IDTEntry(bool)>:
c000c598:	83 ec 04             	sub    esp,0x4
c000c59b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c59f:	88 04 24             	mov    BYTE PTR [esp],al
c000c5a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c5a6:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000c5ac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c5b0:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000c5b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c5b8:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000c5bb:	83 e2 f0             	and    edx,0xfffffff0
c000c5be:	83 ca 0e             	or     edx,0xe
c000c5c1:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000c5c4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c5c8:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000c5cb:	83 e2 ef             	and    edx,0xffffffef
c000c5ce:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000c5d1:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000c5d5:	74 04                	je     c000c5db <IDTEntry::IDTEntry(bool)+0x43>
c000c5d7:	b2 03                	mov    dl,0x3
c000c5d9:	eb 02                	jmp    c000c5dd <IDTEntry::IDTEntry(bool)+0x45>
c000c5db:	b2 00                	mov    dl,0x0
c000c5dd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c5e1:	83 e2 03             	and    edx,0x3
c000c5e4:	88 d1                	mov    cl,dl
c000c5e6:	c1 e1 05             	shl    ecx,0x5
c000c5e9:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000c5ec:	83 e2 9f             	and    edx,0xffffff9f
c000c5ef:	09 ca                	or     edx,ecx
c000c5f1:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000c5f4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c5f8:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000c5fb:	83 ca 80             	or     edx,0xffffff80
c000c5fe:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000c601:	90                   	nop
c000c602:	83 c4 04             	add    esp,0x4
c000c605:	c3                   	ret    

c000c606 <IDTEntry::setOffset(unsigned int)>:
c000c606:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000c60a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c60e:	66 89 02             	mov    WORD PTR [edx],ax
c000c611:	c1 e8 10             	shr    eax,0x10
c000c614:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000c618:	c3                   	ret    
c000c619:	90                   	nop

c000c61a <IDT::IDT()>:
c000c61a:	90                   	nop
c000c61b:	c3                   	ret    

c000c61c <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000c61c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c620:	83 c0 30             	add    eax,0x30
c000c623:	c3                   	ret    

c000c624 <IDT::addEntry(IDTEntry, int)>:
c000c624:	53                   	push   ebx
c000c625:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c629:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c62d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c631:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c635:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000c638:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000c63c:	5b                   	pop    ebx
c000c63d:	c3                   	ret    

c000c63e <IDT::addEntry(int, void (*)(), bool)>:
c000c63e:	53                   	push   ebx
c000c63f:	83 ec 10             	sub    esp,0x10
c000c642:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000c647:	50                   	push   eax
c000c648:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000c64c:	53                   	push   ebx
c000c64d:	e8 46 ff ff ff       	call   c000c598 <IDTEntry::IDTEntry(bool)>
c000c652:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000c656:	53                   	push   ebx
c000c657:	e8 aa ff ff ff       	call   c000c606 <IDTEntry::setOffset(unsigned int)>
c000c65c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c660:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c664:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c668:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c66c:	e8 b3 ff ff ff       	call   c000c624 <IDT::addEntry(IDTEntry, int)>
c000c671:	83 c4 30             	add    esp,0x30
c000c674:	5b                   	pop    ebx
c000c675:	c3                   	ret    

c000c676 <IDT::flush()>:
c000c676:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c67a:	66 c7 05 6c 32 02 c0 ff 07 	mov    WORD PTR ds:0xc002326c,0x7ff
c000c683:	a3 6e 32 02 c0       	mov    ds:0xc002326e,eax
c000c688:	0f 01 1d 6c 32 02 c0 	lidtd  ds:0xc002326c
c000c68f:	c3                   	ret    

c000c690 <IDT::setup()>:
c000c690:	57                   	push   edi
c000c691:	56                   	push   esi
c000c692:	53                   	push   ebx
c000c693:	83 ec 10             	sub    esp,0x10
c000c696:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c69a:	6a 00                	push   0x0
c000c69c:	68 53 03 00 c0       	push   0xc0000353
c000c6a1:	6a 00                	push   0x0
c000c6a3:	53                   	push   ebx
c000c6a4:	e8 95 ff ff ff       	call   c000c63e <IDT::addEntry(int, void (*)(), bool)>
c000c6a9:	6a 00                	push   0x0
c000c6ab:	68 63 03 00 c0       	push   0xc0000363
c000c6b0:	6a 01                	push   0x1
c000c6b2:	53                   	push   ebx
c000c6b3:	e8 86 ff ff ff       	call   c000c63e <IDT::addEntry(int, void (*)(), bool)>
c000c6b8:	83 c4 20             	add    esp,0x20
c000c6bb:	6a 00                	push   0x0
c000c6bd:	68 6d 03 00 c0       	push   0xc000036d
c000c6c2:	6a 02                	push   0x2
c000c6c4:	53                   	push   ebx
c000c6c5:	e8 74 ff ff ff       	call   c000c63e <IDT::addEntry(int, void (*)(), bool)>
c000c6ca:	6a 00                	push   0x0
c000c6cc:	68 77 03 00 c0       	push   0xc0000377
c000c6d1:	6a 03                	push   0x3
c000c6d3:	53                   	push   ebx
c000c6d4:	e8 65 ff ff ff       	call   c000c63e <IDT::addEntry(int, void (*)(), bool)>
c000c6d9:	83 c4 20             	add    esp,0x20
c000c6dc:	6a 00                	push   0x0
c000c6de:	68 81 03 00 c0       	push   0xc0000381
c000c6e3:	6a 04                	push   0x4
c000c6e5:	53                   	push   ebx
c000c6e6:	e8 53 ff ff ff       	call   c000c63e <IDT::addEntry(int, void (*)(), bool)>
c000c6eb:	6a 00                	push   0x0
c000c6ed:	68 8b 03 00 c0       	push   0xc000038b
c000c6f2:	6a 05                	push   0x5
c000c6f4:	53                   	push   ebx
c000c6f5:	e8 44 ff ff ff       	call   c000c63e <IDT::addEntry(int, void (*)(), bool)>
c000c6fa:	83 c4 20             	add    esp,0x20
c000c6fd:	6a 00                	push   0x0
c000c6ff:	68 95 03 00 c0       	push   0xc0000395
c000c704:	6a 06                	push   0x6
c000c706:	53                   	push   ebx
c000c707:	e8 32 ff ff ff       	call   c000c63e <IDT::addEntry(int, void (*)(), bool)>
c000c70c:	6a 00                	push   0x0
c000c70e:	68 9f 03 00 c0       	push   0xc000039f
c000c713:	6a 07                	push   0x7
c000c715:	53                   	push   ebx
c000c716:	e8 23 ff ff ff       	call   c000c63e <IDT::addEntry(int, void (*)(), bool)>
c000c71b:	83 c4 20             	add    esp,0x20
c000c71e:	6a 00                	push   0x0
c000c720:	68 a9 03 00 c0       	push   0xc00003a9
c000c725:	6a 08                	push   0x8
c000c727:	53                   	push   ebx
c000c728:	e8 11 ff ff ff       	call   c000c63e <IDT::addEntry(int, void (*)(), bool)>
c000c72d:	6a 00                	push   0x0
c000c72f:	68 b1 03 00 c0       	push   0xc00003b1
c000c734:	6a 09                	push   0x9
c000c736:	53                   	push   ebx
c000c737:	e8 02 ff ff ff       	call   c000c63e <IDT::addEntry(int, void (*)(), bool)>
c000c73c:	83 c4 20             	add    esp,0x20
c000c73f:	6a 00                	push   0x0
c000c741:	68 bb 03 00 c0       	push   0xc00003bb
c000c746:	6a 0a                	push   0xa
c000c748:	53                   	push   ebx
c000c749:	e8 f0 fe ff ff       	call   c000c63e <IDT::addEntry(int, void (*)(), bool)>
c000c74e:	6a 00                	push   0x0
c000c750:	68 c3 03 00 c0       	push   0xc00003c3
c000c755:	6a 0b                	push   0xb
c000c757:	53                   	push   ebx
c000c758:	e8 e1 fe ff ff       	call   c000c63e <IDT::addEntry(int, void (*)(), bool)>
c000c75d:	83 c4 20             	add    esp,0x20
c000c760:	6a 00                	push   0x0
c000c762:	68 cb 03 00 c0       	push   0xc00003cb
c000c767:	6a 0c                	push   0xc
c000c769:	53                   	push   ebx
c000c76a:	e8 cf fe ff ff       	call   c000c63e <IDT::addEntry(int, void (*)(), bool)>
c000c76f:	6a 00                	push   0x0
c000c771:	68 d3 03 00 c0       	push   0xc00003d3
c000c776:	6a 0d                	push   0xd
c000c778:	53                   	push   ebx
c000c779:	e8 c0 fe ff ff       	call   c000c63e <IDT::addEntry(int, void (*)(), bool)>
c000c77e:	83 c4 20             	add    esp,0x20
c000c781:	6a 00                	push   0x0
c000c783:	68 db 03 00 c0       	push   0xc00003db
c000c788:	6a 0e                	push   0xe
c000c78a:	53                   	push   ebx
c000c78b:	e8 ae fe ff ff       	call   c000c63e <IDT::addEntry(int, void (*)(), bool)>
c000c790:	6a 00                	push   0x0
c000c792:	68 e3 03 00 c0       	push   0xc00003e3
c000c797:	6a 0f                	push   0xf
c000c799:	53                   	push   ebx
c000c79a:	e8 9f fe ff ff       	call   c000c63e <IDT::addEntry(int, void (*)(), bool)>
c000c79f:	83 c4 20             	add    esp,0x20
c000c7a2:	6a 00                	push   0x0
c000c7a4:	68 ed 03 00 c0       	push   0xc00003ed
c000c7a9:	6a 10                	push   0x10
c000c7ab:	53                   	push   ebx
c000c7ac:	e8 8d fe ff ff       	call   c000c63e <IDT::addEntry(int, void (*)(), bool)>
c000c7b1:	6a 00                	push   0x0
c000c7b3:	68 f7 03 00 c0       	push   0xc00003f7
c000c7b8:	6a 11                	push   0x11
c000c7ba:	53                   	push   ebx
c000c7bb:	e8 7e fe ff ff       	call   c000c63e <IDT::addEntry(int, void (*)(), bool)>
c000c7c0:	83 c4 20             	add    esp,0x20
c000c7c3:	6a 00                	push   0x0
c000c7c5:	68 01 04 00 c0       	push   0xc0000401
c000c7ca:	6a 12                	push   0x12
c000c7cc:	53                   	push   ebx
c000c7cd:	e8 6c fe ff ff       	call   c000c63e <IDT::addEntry(int, void (*)(), bool)>
c000c7d2:	6a 01                	push   0x1
c000c7d4:	68 0b 04 00 c0       	push   0xc000040b
c000c7d9:	6a 60                	push   0x60
c000c7db:	53                   	push   ebx
c000c7dc:	e8 5d fe ff ff       	call   c000c63e <IDT::addEntry(int, void (*)(), bool)>
c000c7e1:	83 c4 20             	add    esp,0x20
c000c7e4:	6a 00                	push   0x0
c000c7e6:	68 15 04 00 c0       	push   0xc0000415
c000c7eb:	6a 20                	push   0x20
c000c7ed:	53                   	push   ebx
c000c7ee:	e8 4b fe ff ff       	call   c000c63e <IDT::addEntry(int, void (*)(), bool)>
c000c7f3:	6a 00                	push   0x0
c000c7f5:	68 1f 04 00 c0       	push   0xc000041f
c000c7fa:	6a 21                	push   0x21
c000c7fc:	53                   	push   ebx
c000c7fd:	e8 3c fe ff ff       	call   c000c63e <IDT::addEntry(int, void (*)(), bool)>
c000c802:	83 c4 20             	add    esp,0x20
c000c805:	6a 00                	push   0x0
c000c807:	68 29 04 00 c0       	push   0xc0000429
c000c80c:	6a 22                	push   0x22
c000c80e:	53                   	push   ebx
c000c80f:	e8 2a fe ff ff       	call   c000c63e <IDT::addEntry(int, void (*)(), bool)>
c000c814:	6a 00                	push   0x0
c000c816:	68 33 04 00 c0       	push   0xc0000433
c000c81b:	6a 23                	push   0x23
c000c81d:	53                   	push   ebx
c000c81e:	e8 1b fe ff ff       	call   c000c63e <IDT::addEntry(int, void (*)(), bool)>
c000c823:	83 c4 20             	add    esp,0x20
c000c826:	6a 00                	push   0x0
c000c828:	68 3d 04 00 c0       	push   0xc000043d
c000c82d:	6a 24                	push   0x24
c000c82f:	53                   	push   ebx
c000c830:	e8 09 fe ff ff       	call   c000c63e <IDT::addEntry(int, void (*)(), bool)>
c000c835:	6a 00                	push   0x0
c000c837:	68 47 04 00 c0       	push   0xc0000447
c000c83c:	6a 25                	push   0x25
c000c83e:	53                   	push   ebx
c000c83f:	e8 fa fd ff ff       	call   c000c63e <IDT::addEntry(int, void (*)(), bool)>
c000c844:	83 c4 20             	add    esp,0x20
c000c847:	6a 00                	push   0x0
c000c849:	68 51 04 00 c0       	push   0xc0000451
c000c84e:	6a 26                	push   0x26
c000c850:	53                   	push   ebx
c000c851:	e8 e8 fd ff ff       	call   c000c63e <IDT::addEntry(int, void (*)(), bool)>
c000c856:	6a 00                	push   0x0
c000c858:	68 5b 04 00 c0       	push   0xc000045b
c000c85d:	6a 27                	push   0x27
c000c85f:	53                   	push   ebx
c000c860:	e8 d9 fd ff ff       	call   c000c63e <IDT::addEntry(int, void (*)(), bool)>
c000c865:	83 c4 20             	add    esp,0x20
c000c868:	6a 00                	push   0x0
c000c86a:	68 65 04 00 c0       	push   0xc0000465
c000c86f:	6a 28                	push   0x28
c000c871:	53                   	push   ebx
c000c872:	e8 c7 fd ff ff       	call   c000c63e <IDT::addEntry(int, void (*)(), bool)>
c000c877:	6a 00                	push   0x0
c000c879:	68 6f 04 00 c0       	push   0xc000046f
c000c87e:	6a 29                	push   0x29
c000c880:	53                   	push   ebx
c000c881:	e8 b8 fd ff ff       	call   c000c63e <IDT::addEntry(int, void (*)(), bool)>
c000c886:	83 c4 20             	add    esp,0x20
c000c889:	6a 00                	push   0x0
c000c88b:	68 79 04 00 c0       	push   0xc0000479
c000c890:	6a 2a                	push   0x2a
c000c892:	53                   	push   ebx
c000c893:	e8 a6 fd ff ff       	call   c000c63e <IDT::addEntry(int, void (*)(), bool)>
c000c898:	6a 00                	push   0x0
c000c89a:	68 83 04 00 c0       	push   0xc0000483
c000c89f:	6a 2b                	push   0x2b
c000c8a1:	53                   	push   ebx
c000c8a2:	e8 97 fd ff ff       	call   c000c63e <IDT::addEntry(int, void (*)(), bool)>
c000c8a7:	83 c4 20             	add    esp,0x20
c000c8aa:	6a 00                	push   0x0
c000c8ac:	68 8d 04 00 c0       	push   0xc000048d
c000c8b1:	6a 2c                	push   0x2c
c000c8b3:	53                   	push   ebx
c000c8b4:	e8 85 fd ff ff       	call   c000c63e <IDT::addEntry(int, void (*)(), bool)>
c000c8b9:	6a 00                	push   0x0
c000c8bb:	68 97 04 00 c0       	push   0xc0000497
c000c8c0:	6a 2d                	push   0x2d
c000c8c2:	53                   	push   ebx
c000c8c3:	e8 76 fd ff ff       	call   c000c63e <IDT::addEntry(int, void (*)(), bool)>
c000c8c8:	83 c4 20             	add    esp,0x20
c000c8cb:	6a 00                	push   0x0
c000c8cd:	68 a1 04 00 c0       	push   0xc00004a1
c000c8d2:	6a 2e                	push   0x2e
c000c8d4:	53                   	push   ebx
c000c8d5:	e8 64 fd ff ff       	call   c000c63e <IDT::addEntry(int, void (*)(), bool)>
c000c8da:	6a 00                	push   0x0
c000c8dc:	68 ab 04 00 c0       	push   0xc00004ab
c000c8e1:	6a 2f                	push   0x2f
c000c8e3:	53                   	push   ebx
c000c8e4:	e8 55 fd ff ff       	call   c000c63e <IDT::addEntry(int, void (*)(), bool)>
c000c8e9:	83 c4 20             	add    esp,0x20
c000c8ec:	6a 00                	push   0x0
c000c8ee:	68 b5 04 00 c0       	push   0xc00004b5
c000c8f3:	6a 30                	push   0x30
c000c8f5:	53                   	push   ebx
c000c8f6:	e8 43 fd ff ff       	call   c000c63e <IDT::addEntry(int, void (*)(), bool)>
c000c8fb:	6a 00                	push   0x0
c000c8fd:	68 bf 04 00 c0       	push   0xc00004bf
c000c902:	6a 31                	push   0x31
c000c904:	53                   	push   ebx
c000c905:	e8 34 fd ff ff       	call   c000c63e <IDT::addEntry(int, void (*)(), bool)>
c000c90a:	83 c4 20             	add    esp,0x20
c000c90d:	6a 00                	push   0x0
c000c90f:	68 c9 04 00 c0       	push   0xc00004c9
c000c914:	6a 32                	push   0x32
c000c916:	53                   	push   ebx
c000c917:	e8 22 fd ff ff       	call   c000c63e <IDT::addEntry(int, void (*)(), bool)>
c000c91c:	6a 00                	push   0x0
c000c91e:	68 d3 04 00 c0       	push   0xc00004d3
c000c923:	6a 33                	push   0x33
c000c925:	53                   	push   ebx
c000c926:	e8 13 fd ff ff       	call   c000c63e <IDT::addEntry(int, void (*)(), bool)>
c000c92b:	83 c4 20             	add    esp,0x20
c000c92e:	6a 00                	push   0x0
c000c930:	68 dd 04 00 c0       	push   0xc00004dd
c000c935:	6a 34                	push   0x34
c000c937:	53                   	push   ebx
c000c938:	e8 01 fd ff ff       	call   c000c63e <IDT::addEntry(int, void (*)(), bool)>
c000c93d:	6a 00                	push   0x0
c000c93f:	68 e7 04 00 c0       	push   0xc00004e7
c000c944:	6a 35                	push   0x35
c000c946:	53                   	push   ebx
c000c947:	e8 f2 fc ff ff       	call   c000c63e <IDT::addEntry(int, void (*)(), bool)>
c000c94c:	83 c4 20             	add    esp,0x20
c000c94f:	6a 00                	push   0x0
c000c951:	68 f1 04 00 c0       	push   0xc00004f1
c000c956:	6a 36                	push   0x36
c000c958:	53                   	push   ebx
c000c959:	e8 e0 fc ff ff       	call   c000c63e <IDT::addEntry(int, void (*)(), bool)>
c000c95e:	6a 00                	push   0x0
c000c960:	68 fb 04 00 c0       	push   0xc00004fb
c000c965:	6a 37                	push   0x37
c000c967:	53                   	push   ebx
c000c968:	e8 d1 fc ff ff       	call   c000c63e <IDT::addEntry(int, void (*)(), bool)>
c000c96d:	83 c4 20             	add    esp,0x20
c000c970:	e8 02 47 00 00       	call   c0011077 <Virt::getAKernelVAS()>
c000c975:	52                   	push   edx
c000c976:	6a 03                	push   0x3
c000c978:	6a 02                	push   0x2
c000c97a:	50                   	push   eax
c000c97b:	e8 9e 4c 00 00       	call   c001161e <VAS::allocatePages(int, int)>
c000c980:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000c987:	89 c6                	mov    esi,eax
c000c989:	e8 ea 56 00 00       	call   c0012078 <operator new(unsigned long)>
c000c98e:	81 c6 00 20 00 00    	add    esi,0x2000
c000c994:	89 04 24             	mov    DWORD PTR [esp],eax
c000c997:	89 c7                	mov    edi,eax
c000c999:	e8 30 40 00 00       	call   c00109ce <TSS::TSS()>
c000c99e:	83 c4 0c             	add    esp,0xc
c000c9a1:	68 a9 03 00 c0       	push   0xc00003a9
c000c9a6:	56                   	push   esi
c000c9a7:	57                   	push   edi
c000c9a8:	e8 61 40 00 00       	call   c0010a0e <TSS::setup(unsigned long, unsigned long)>
c000c9ad:	59                   	pop    ecx
c000c9ae:	89 c6                	mov    esi,eax
c000c9b0:	5f                   	pop    edi
c000c9b1:	6a 00                	push   0x0
c000c9b3:	8d 44 24 14          	lea    eax,[esp+0x14]
c000c9b7:	50                   	push   eax
c000c9b8:	e8 db fb ff ff       	call   c000c598 <IDTEntry::IDTEntry(bool)>
c000c9bd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c9c1:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000c9c6:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000c9cd:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000c9d3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c9d7:	80 ce 05             	or     dh,0x5
c000c9da:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000c9dd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c9e1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c9e5:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000c9e8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000c9eb:	e8 86 fc ff ff       	call   c000c676 <IDT::flush()>
c000c9f0:	83 c4 20             	add    esp,0x20
c000c9f3:	5b                   	pop    ebx
c000c9f4:	5e                   	pop    esi
c000c9f5:	5f                   	pop    edi
c000c9f6:	c3                   	ret    

c000c9f7 <stringifyxWithBase(unsigned int, char*, int)>:
c000c9f7:	57                   	push   edi
c000c9f8:	b9 3f 00 00 00       	mov    ecx,0x3f
c000c9fd:	56                   	push   esi
c000c9fe:	be 9c 01 02 c0       	mov    esi,0xc002019c
c000ca03:	53                   	push   ebx
c000ca04:	83 ec 40             	sub    esp,0x40
c000ca07:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000ca0b:	8d 7c 24 01          	lea    edi,[esp+0x1]
c000ca0f:	fc                   	cld    
c000ca10:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ca12:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c000ca16:	83 f9 3e             	cmp    ecx,0x3e
c000ca19:	7e 05                	jle    c000ca20 <stringifyxWithBase(unsigned int, char*, int)+0x29>
c000ca1b:	b9 3e 00 00 00       	mov    ecx,0x3e
c000ca20:	89 df                	mov    edi,ebx
c000ca22:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000ca26:	eb 02                	jmp    c000ca2a <stringifyxWithBase(unsigned int, char*, int)+0x33>
c000ca28:	89 c7                	mov    edi,eax
c000ca2a:	31 d2                	xor    edx,edx
c000ca2c:	46                   	inc    esi
c000ca2d:	89 f8                	mov    eax,edi
c000ca2f:	f7 f1                	div    ecx
c000ca31:	39 cf                	cmp    edi,ecx
c000ca33:	73 f3                	jae    c000ca28 <stringifyxWithBase(unsigned int, char*, int)+0x31>
c000ca35:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000ca38:	eb 02                	jmp    c000ca3c <stringifyxWithBase(unsigned int, char*, int)+0x45>
c000ca3a:	89 c3                	mov    ebx,eax
c000ca3c:	31 d2                	xor    edx,edx
c000ca3e:	4e                   	dec    esi
c000ca3f:	89 d8                	mov    eax,ebx
c000ca41:	f7 f1                	div    ecx
c000ca43:	39 cb                	cmp    ebx,ecx
c000ca45:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c000ca49:	88 16                	mov    BYTE PTR [esi],dl
c000ca4b:	73 ed                	jae    c000ca3a <stringifyxWithBase(unsigned int, char*, int)+0x43>
c000ca4d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000ca51:	83 c4 40             	add    esp,0x40
c000ca54:	5b                   	pop    ebx
c000ca55:	5e                   	pop    esi
c000ca56:	5f                   	pop    edi
c000ca57:	c3                   	ret    

c000ca58 <logc(char)>:
c000ca58:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ca5c:	ba fd 03 00 00       	mov    edx,0x3fd
c000ca61:	ec                   	in     al,dx
c000ca62:	a8 20                	test   al,0x20
c000ca64:	74 fb                	je     c000ca61 <logc(char)+0x9>
c000ca66:	ba f8 03 00 00       	mov    edx,0x3f8
c000ca6b:	88 c8                	mov    al,cl
c000ca6d:	ee                   	out    dx,al
c000ca6e:	c3                   	ret    

c000ca6f <logs(char*)>:
c000ca6f:	53                   	push   ebx
c000ca70:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000ca74:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000ca77:	84 c0                	test   al,al
c000ca79:	74 0f                	je     c000ca8a <logs(char*)+0x1b>
c000ca7b:	50                   	push   eax
c000ca7c:	43                   	inc    ebx
c000ca7d:	e8 d6 ff ff ff       	call   c000ca58 <logc(char)>
c000ca82:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000ca85:	5a                   	pop    edx
c000ca86:	84 c0                	test   al,al
c000ca88:	75 f1                	jne    c000ca7b <logs(char*)+0xc>
c000ca8a:	5b                   	pop    ebx
c000ca8b:	c3                   	ret    

c000ca8c <logWriteInt(unsigned int)>:
c000ca8c:	83 ec 10             	sub    esp,0x10
c000ca8f:	6a 0a                	push   0xa
c000ca91:	8d 44 24 08          	lea    eax,[esp+0x8]
c000ca95:	50                   	push   eax
c000ca96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca9a:	e8 58 ff ff ff       	call   c000c9f7 <stringifyxWithBase(unsigned int, char*, int)>
c000ca9f:	50                   	push   eax
c000caa0:	e8 ca ff ff ff       	call   c000ca6f <logs(char*)>
c000caa5:	83 c4 20             	add    esp,0x20
c000caa8:	c3                   	ret    

c000caa9 <logWriteIntBase(unsigned int, int)>:
c000caa9:	83 ec 10             	sub    esp,0x10
c000caac:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cab0:	8d 44 24 08          	lea    eax,[esp+0x8]
c000cab4:	50                   	push   eax
c000cab5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cab9:	e8 39 ff ff ff       	call   c000c9f7 <stringifyxWithBase(unsigned int, char*, int)>
c000cabe:	50                   	push   eax
c000cabf:	e8 ab ff ff ff       	call   c000ca6f <logs(char*)>
c000cac4:	83 c4 20             	add    esp,0x20
c000cac7:	c3                   	ret    

c000cac8 <kprintf(char const*, ...)>:
c000cac8:	55                   	push   ebp
c000cac9:	57                   	push   edi
c000caca:	56                   	push   esi
c000cacb:	53                   	push   ebx
c000cacc:	83 ec 0c             	sub    esp,0xc
c000cacf:	8d 44 24 24          	lea    eax,[esp+0x24]
c000cad3:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000cad7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000cadb:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000cade:	84 c0                	test   al,al
c000cae0:	74 4a                	je     c000cb2c <kprintf(char const*, ...)+0x64>
c000cae2:	31 db                	xor    ebx,ebx
c000cae4:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000cae7:	3c 25                	cmp    al,0x25
c000cae9:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c000caec:	0f 85 e4 00 00 00    	jne    c000cbd6 <kprintf(char const*, ...)+0x10e>
c000caf2:	83 c3 02             	add    ebx,0x2
c000caf5:	8a 07                	mov    al,BYTE PTR [edi]
c000caf7:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c000cafa:	83 e8 25             	sub    eax,0x25
c000cafd:	3c 53                	cmp    al,0x53
c000caff:	0f 87 ba 00 00 00    	ja     c000cbbf <kprintf(char const*, ...)+0xf7>
c000cb05:	0f b6 c0             	movzx  eax,al
c000cb08:	ff 24 85 f0 02 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdfd10]
c000cb0f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000cb13:	89 c8                	mov    eax,ecx
c000cb15:	83 c1 04             	add    ecx,0x4
c000cb18:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000cb1c:	ff 30                	push   DWORD PTR [eax]
c000cb1e:	e8 4c ff ff ff       	call   c000ca6f <logs(char*)>
c000cb23:	58                   	pop    eax
c000cb24:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000cb28:	84 c0                	test   al,al
c000cb2a:	75 b8                	jne    c000cae4 <kprintf(char const*, ...)+0x1c>
c000cb2c:	83 c4 0c             	add    esp,0xc
c000cb2f:	5b                   	pop    ebx
c000cb30:	5e                   	pop    esi
c000cb31:	5f                   	pop    edi
c000cb32:	5d                   	pop    ebp
c000cb33:	c3                   	ret    
c000cb34:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cb38:	89 d0                	mov    eax,edx
c000cb3a:	83 c2 04             	add    edx,0x4
c000cb3d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000cb41:	ff 30                	push   DWORD PTR [eax]
c000cb43:	e8 44 ff ff ff       	call   c000ca8c <logWriteInt(unsigned int)>
c000cb48:	58                   	pop    eax
c000cb49:	eb d9                	jmp    c000cb24 <kprintf(char const*, ...)+0x5c>
c000cb4b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cb4f:	89 d0                	mov    eax,edx
c000cb51:	83 c2 04             	add    edx,0x4
c000cb54:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000cb57:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000cb5b:	50                   	push   eax
c000cb5c:	e8 f7 fe ff ff       	call   c000ca58 <logc(char)>
c000cb61:	58                   	pop    eax
c000cb62:	eb c0                	jmp    c000cb24 <kprintf(char const*, ...)+0x5c>
c000cb64:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000cb68:	89 c8                	mov    eax,ecx
c000cb6a:	83 c1 04             	add    ecx,0x4
c000cb6d:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000cb71:	ff 30                	push   DWORD PTR [eax]
c000cb73:	e8 14 ff ff ff       	call   c000ca8c <logWriteInt(unsigned int)>
c000cb78:	5f                   	pop    edi
c000cb79:	eb a9                	jmp    c000cb24 <kprintf(char const*, ...)+0x5c>
c000cb7b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000cb7f:	89 c8                	mov    eax,ecx
c000cb81:	83 c1 04             	add    ecx,0x4
c000cb84:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000cb88:	6a 10                	push   0x10
c000cb8a:	ff 30                	push   DWORD PTR [eax]
c000cb8c:	e8 18 ff ff ff       	call   c000caa9 <logWriteIntBase(unsigned int, int)>
c000cb91:	59                   	pop    ecx
c000cb92:	5f                   	pop    edi
c000cb93:	eb 8f                	jmp    c000cb24 <kprintf(char const*, ...)+0x5c>
c000cb95:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cb99:	89 d0                	mov    eax,edx
c000cb9b:	83 c2 08             	add    edx,0x8
c000cb9e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000cba2:	6a 10                	push   0x10
c000cba4:	ff 30                	push   DWORD PTR [eax]
c000cba6:	e8 fe fe ff ff       	call   c000caa9 <logWriteIntBase(unsigned int, int)>
c000cbab:	58                   	pop    eax
c000cbac:	5a                   	pop    edx
c000cbad:	e9 72 ff ff ff       	jmp    c000cb24 <kprintf(char const*, ...)+0x5c>
c000cbb2:	6a 25                	push   0x25
c000cbb4:	e8 9f fe ff ff       	call   c000ca58 <logc(char)>
c000cbb9:	58                   	pop    eax
c000cbba:	e9 65 ff ff ff       	jmp    c000cb24 <kprintf(char const*, ...)+0x5c>
c000cbbf:	6a 25                	push   0x25
c000cbc1:	e8 92 fe ff ff       	call   c000ca58 <logc(char)>
c000cbc6:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000cbc9:	50                   	push   eax
c000cbca:	e8 89 fe ff ff       	call   c000ca58 <logc(char)>
c000cbcf:	5a                   	pop    edx
c000cbd0:	59                   	pop    ecx
c000cbd1:	e9 4e ff ff ff       	jmp    c000cb24 <kprintf(char const*, ...)+0x5c>
c000cbd6:	50                   	push   eax
c000cbd7:	89 eb                	mov    ebx,ebp
c000cbd9:	e8 7a fe ff ff       	call   c000ca58 <logc(char)>
c000cbde:	89 fd                	mov    ebp,edi
c000cbe0:	58                   	pop    eax
c000cbe1:	e9 3e ff ff ff       	jmp    c000cb24 <kprintf(char const*, ...)+0x5c>

c000cbe6 <panic(char const*)>:
c000cbe6:	55                   	push   ebp
c000cbe7:	89 e5                	mov    ebp,esp
c000cbe9:	53                   	push   ebx
c000cbea:	50                   	push   eax
c000cbeb:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000cbee:	fa                   	cli    
c000cbef:	c6 05 72 32 02 c0 01 	mov    BYTE PTR ds:0xc0023272,0x1
c000cbf6:	53                   	push   ebx
c000cbf7:	c6 05 00 25 02 c0 00 	mov    BYTE PTR ds:0xc0022500,0x0
c000cbfe:	68 40 04 02 c0       	push   0xc0020440
c000cc03:	e8 c0 fe ff ff       	call   c000cac8 <kprintf(char const*, ...)>
c000cc08:	a1 1c 33 02 c0       	mov    eax,ds:0xc002331c
c000cc0d:	52                   	push   edx
c000cc0e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000cc14:	e8 36 36 00 00       	call   c001024f <setActiveTerminal(VgaText*)>
c000cc19:	83 c4 0c             	add    esp,0xc
c000cc1c:	a1 1c 33 02 c0       	mov    eax,ds:0xc002331c
c000cc21:	6a 01                	push   0x1
c000cc23:	6a 0f                	push   0xf
c000cc25:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000cc2b:	e8 5e 30 00 00       	call   c000fc8e <VgaText::setDefaultColours(VgaColour, VgaColour)>
c000cc30:	59                   	pop    ecx
c000cc31:	a1 1c 33 02 c0       	mov    eax,ds:0xc002331c
c000cc36:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000cc3c:	e8 af 38 00 00       	call   c00104f0 <VgaText::clearScreen()>
c000cc41:	58                   	pop    eax
c000cc42:	a1 1c 33 02 c0       	mov    eax,ds:0xc002331c
c000cc47:	5a                   	pop    edx
c000cc48:	68 59 04 02 c0       	push   0xc0020459
c000cc4d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000cc53:	e8 16 3a 00 00       	call   c001066e <VgaText::puts(char const*)>
c000cc58:	59                   	pop    ecx
c000cc59:	58                   	pop    eax
c000cc5a:	a1 1c 33 02 c0       	mov    eax,ds:0xc002331c
c000cc5f:	68 dc 01 02 c0       	push   0xc00201dc
c000cc64:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000cc6a:	e8 ff 39 00 00       	call   c001066e <VgaText::puts(char const*)>
c000cc6f:	58                   	pop    eax
c000cc70:	a1 1c 33 02 c0       	mov    eax,ds:0xc002331c
c000cc75:	5a                   	pop    edx
c000cc76:	68 75 04 02 c0       	push   0xc0020475
c000cc7b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000cc81:	e8 e8 39 00 00       	call   c001066e <VgaText::puts(char const*)>
c000cc86:	59                   	pop    ecx
c000cc87:	58                   	pop    eax
c000cc88:	a1 1c 33 02 c0       	mov    eax,ds:0xc002331c
c000cc8d:	53                   	push   ebx
c000cc8e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000cc94:	e8 d5 39 00 00       	call   c001066e <VgaText::puts(char const*)>
c000cc99:	58                   	pop    eax
c000cc9a:	a1 1c 33 02 c0       	mov    eax,ds:0xc002331c
c000cc9f:	5a                   	pop    edx
c000cca0:	68 95 04 02 c0       	push   0xc0020495
c000cca5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000ccab:	e8 be 39 00 00       	call   c001066e <VgaText::puts(char const*)>
c000ccb0:	59                   	pop    ecx
c000ccb1:	a1 1c 33 02 c0       	mov    eax,ds:0xc002331c
c000ccb6:	5b                   	pop    ebx
c000ccb7:	68 18 02 02 c0       	push   0xc0020218
c000ccbc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000ccc2:	e8 a7 39 00 00       	call   c001066e <VgaText::puts(char const*)>
c000ccc7:	58                   	pop    eax
c000ccc8:	a1 1c 33 02 c0       	mov    eax,ds:0xc002331c
c000cccd:	5a                   	pop    edx
c000ccce:	68 75 04 02 c0       	push   0xc0020475
c000ccd3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000ccd9:	e8 90 39 00 00       	call   c001066e <VgaText::puts(char const*)>
c000ccde:	59                   	pop    ecx
c000ccdf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000cce4:	5b                   	pop    ebx
c000cce5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000cce8:	83 c0 0c             	add    eax,0xc
c000cceb:	50                   	push   eax
c000ccec:	a1 1c 33 02 c0       	mov    eax,ds:0xc002331c
c000ccf1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000ccf7:	e8 72 39 00 00       	call   c001066e <VgaText::puts(char const*)>
c000ccfc:	58                   	pop    eax
c000ccfd:	a1 1c 33 02 c0       	mov    eax,ds:0xc002331c
c000cd02:	5a                   	pop    edx
c000cd03:	68 94 04 02 c0       	push   0xc0020494
c000cd08:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000cd0e:	e8 5b 39 00 00       	call   c001066e <VgaText::puts(char const*)>
c000cd13:	59                   	pop    ecx
c000cd14:	a1 1c 33 02 c0       	mov    eax,ds:0xc002331c
c000cd19:	5b                   	pop    ebx
c000cd1a:	68 44 02 02 c0       	push   0xc0020244
c000cd1f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000cd25:	e8 44 39 00 00       	call   c001066e <VgaText::puts(char const*)>
c000cd2a:	58                   	pop    eax
c000cd2b:	a1 1c 33 02 c0       	mov    eax,ds:0xc002331c
c000cd30:	5a                   	pop    edx
c000cd31:	68 84 02 02 c0       	push   0xc0020284
c000cd36:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000cd3c:	e8 2d 39 00 00       	call   c001066e <VgaText::puts(char const*)>
c000cd41:	59                   	pop    ecx
c000cd42:	a1 1c 33 02 c0       	mov    eax,ds:0xc002331c
c000cd47:	5b                   	pop    ebx
c000cd48:	68 80 04 02 c0       	push   0xc0020480
c000cd4d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000cd53:	e8 16 39 00 00       	call   c001066e <VgaText::puts(char const*)>
c000cd58:	58                   	pop    eax
c000cd59:	5a                   	pop    edx
c000cd5a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cd5d:	68 98 04 02 c0       	push   0xc0020498
c000cd62:	e8 61 fd ff ff       	call   c000cac8 <kprintf(char const*, ...)>
c000cd67:	59                   	pop    ecx
c000cd68:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cd6b:	5b                   	pop    ebx
c000cd6c:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000cd6f:	68 a1 04 02 c0       	push   0xc00204a1
c000cd74:	e8 4f fd ff ff       	call   c000cac8 <kprintf(char const*, ...)>
c000cd79:	5a                   	pop    edx
c000cd7a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cd7d:	59                   	pop    ecx
c000cd7e:	8b 00                	mov    eax,DWORD PTR [eax]
c000cd80:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000cd83:	68 39 13 02 c0       	push   0xc0021339
c000cd88:	e8 3b fd ff ff       	call   c000cac8 <kprintf(char const*, ...)>
c000cd8d:	5b                   	pop    ebx
c000cd8e:	58                   	pop    eax
c000cd8f:	a1 1c 33 02 c0       	mov    eax,ds:0xc002331c
c000cd94:	68 c8 02 02 c0       	push   0xc00202c8
c000cd99:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000cd9f:	e8 ca 38 00 00       	call   c001066e <VgaText::puts(char const*)>
c000cda4:	58                   	pop    eax
c000cda5:	a1 1c 33 02 c0       	mov    eax,ds:0xc002331c
c000cdaa:	5a                   	pop    edx
c000cdab:	68 aa 04 02 c0       	push   0xc00204aa
c000cdb0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000cdb6:	e8 b3 38 00 00       	call   c001066e <VgaText::puts(char const*)>
c000cdbb:	a1 1c 33 02 c0       	mov    eax,ds:0xc002331c
c000cdc0:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c000cdc6:	e8 2a 18 01 00       	call   c001e5f5 <CPU::readCR0()>
c000cdcb:	59                   	pop    ecx
c000cdcc:	5a                   	pop    edx
c000cdcd:	50                   	push   eax
c000cdce:	53                   	push   ebx
c000cdcf:	e8 c0 38 00 00       	call   c0010694 <VgaText::putx(unsigned int)>
c000cdd4:	59                   	pop    ecx
c000cdd5:	a1 1c 33 02 c0       	mov    eax,ds:0xc002331c
c000cdda:	5b                   	pop    ebx
c000cddb:	68 b4 04 02 c0       	push   0xc00204b4
c000cde0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000cde6:	e8 83 38 00 00       	call   c001066e <VgaText::puts(char const*)>
c000cdeb:	a1 1c 33 02 c0       	mov    eax,ds:0xc002331c
c000cdf0:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c000cdf6:	e8 0c 18 01 00       	call   c001e607 <CPU::readCR2()>
c000cdfb:	5a                   	pop    edx
c000cdfc:	59                   	pop    ecx
c000cdfd:	50                   	push   eax
c000cdfe:	53                   	push   ebx
c000cdff:	e8 90 38 00 00       	call   c0010694 <VgaText::putx(unsigned int)>
c000ce04:	5b                   	pop    ebx
c000ce05:	58                   	pop    eax
c000ce06:	a1 1c 33 02 c0       	mov    eax,ds:0xc002331c
c000ce0b:	68 be 04 02 c0       	push   0xc00204be
c000ce10:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000ce16:	e8 53 38 00 00       	call   c001066e <VgaText::puts(char const*)>
c000ce1b:	a1 1c 33 02 c0       	mov    eax,ds:0xc002331c
c000ce20:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c000ce26:	e8 ee 17 01 00       	call   c001e619 <CPU::readCR3()>
c000ce2b:	5a                   	pop    edx
c000ce2c:	59                   	pop    ecx
c000ce2d:	50                   	push   eax
c000ce2e:	53                   	push   ebx
c000ce2f:	e8 60 38 00 00       	call   c0010694 <VgaText::putx(unsigned int)>
c000ce34:	5b                   	pop    ebx
c000ce35:	58                   	pop    eax
c000ce36:	a1 1c 33 02 c0       	mov    eax,ds:0xc002331c
c000ce3b:	68 d1 04 02 c0       	push   0xc00204d1
c000ce40:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000ce46:	e8 23 38 00 00       	call   c001066e <VgaText::puts(char const*)>
c000ce4b:	a1 1c 33 02 c0       	mov    eax,ds:0xc002331c
c000ce50:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c000ce56:	e8 d0 17 01 00       	call   c001e62b <CPU::readCR4()>
c000ce5b:	5a                   	pop    edx
c000ce5c:	59                   	pop    ecx
c000ce5d:	50                   	push   eax
c000ce5e:	53                   	push   ebx
c000ce5f:	e8 30 38 00 00       	call   c0010694 <VgaText::putx(unsigned int)>
c000ce64:	5b                   	pop    ebx
c000ce65:	58                   	pop    eax
c000ce66:	a1 1c 33 02 c0       	mov    eax,ds:0xc002331c
c000ce6b:	68 db 04 02 c0       	push   0xc00204db
c000ce70:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000ce76:	e8 f3 37 00 00       	call   c001066e <VgaText::puts(char const*)>
c000ce7b:	5a                   	pop    edx
c000ce7c:	a1 1c 33 02 c0       	mov    eax,ds:0xc002331c
c000ce81:	59                   	pop    ecx
c000ce82:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000ce88:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ce8b:	50                   	push   eax
c000ce8c:	e8 03 38 00 00       	call   c0010694 <VgaText::putx(unsigned int)>
c000ce91:	5b                   	pop    ebx
c000ce92:	58                   	pop    eax
c000ce93:	a1 1c 33 02 c0       	mov    eax,ds:0xc002331c
c000ce98:	68 f2 04 02 c0       	push   0xc00204f2
c000ce9d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000cea3:	e8 c6 37 00 00       	call   c001066e <VgaText::puts(char const*)>
c000cea8:	5a                   	pop    edx
c000cea9:	a1 1c 33 02 c0       	mov    eax,ds:0xc002331c
c000ceae:	59                   	pop    ecx
c000ceaf:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000ceb5:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000ceb8:	ff 72 04             	push   DWORD PTR [edx+0x4]
c000cebb:	50                   	push   eax
c000cebc:	e8 d3 37 00 00       	call   c0010694 <VgaText::putx(unsigned int)>
c000cec1:	5b                   	pop    ebx
c000cec2:	58                   	pop    eax
c000cec3:	a1 1c 33 02 c0       	mov    eax,ds:0xc002331c
c000cec8:	68 f2 04 02 c0       	push   0xc00204f2
c000cecd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000ced3:	e8 96 37 00 00       	call   c001066e <VgaText::puts(char const*)>
c000ced8:	59                   	pop    ecx
c000ced9:	a1 1c 33 02 c0       	mov    eax,ds:0xc002331c
c000cede:	5b                   	pop    ebx
c000cedf:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000cee5:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000cee8:	8b 12                	mov    edx,DWORD PTR [edx]
c000ceea:	ff 72 04             	push   DWORD PTR [edx+0x4]
c000ceed:	50                   	push   eax
c000ceee:	e8 a1 37 00 00       	call   c0010694 <VgaText::putx(unsigned int)>
c000cef3:	83 c4 10             	add    esp,0x10
c000cef6:	b2 fe                	mov    dl,0xfe
c000cef8:	e4 60                	in     al,0x60
c000cefa:	3c 1c                	cmp    al,0x1c
c000cefc:	74 04                	je     c000cf02 <panic(char const*)+0x31c>
c000cefe:	3c 5a                	cmp    al,0x5a
c000cf00:	75 f6                	jne    c000cef8 <panic(char const*)+0x312>
c000cf02:	e4 64                	in     al,0x64
c000cf04:	a8 02                	test   al,0x2
c000cf06:	75 fa                	jne    c000cf02 <panic(char const*)+0x31c>
c000cf08:	88 d0                	mov    al,dl
c000cf0a:	e6 64                	out    0x64,al
c000cf0c:	fa                   	cli    
c000cf0d:	f4                   	hlt    
c000cf0e:	eb e8                	jmp    c000cef8 <panic(char const*)+0x312>

c000cf10 <sbrk>:
c000cf10:	55                   	push   ebp
c000cf11:	57                   	push   edi
c000cf12:	56                   	push   esi
c000cf13:	53                   	push   ebx
c000cf14:	83 ec 1c             	sub    esp,0x1c
c000cf17:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000cf1b:	85 db                	test   ebx,ebx
c000cf1d:	74 37                	je     c000cf56 <sbrk+0x46>
c000cf1f:	78 3f                	js     c000cf60 <sbrk+0x50>
c000cf21:	e8 88 9e 00 00       	call   c0016dae <thisCPU()>
c000cf26:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000cf2c:	83 e0 01             	and    eax,0x1
c000cf2f:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000cf33:	a1 f0 24 02 c0       	mov    eax,ds:0xc00224f0
c000cf38:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf3c:	81 c3 ff 0f 00 00    	add    ebx,0xfff
c000cf42:	89 d8                	mov    eax,ebx
c000cf44:	78 35                	js     c000cf7b <sbrk+0x6b>
c000cf46:	c1 f8 0c             	sar    eax,0xc
c000cf49:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000cf4d:	89 c7                	mov    edi,eax
c000cf4f:	be 00 00 00 00       	mov    esi,0x0
c000cf54:	eb 3c                	jmp    c000cf92 <sbrk+0x82>
c000cf56:	a1 f0 24 02 c0       	mov    eax,ds:0xc00224f0
c000cf5b:	e9 ad 00 00 00       	jmp    c000d00d <sbrk+0xfd>
c000cf60:	83 ec 08             	sub    esp,0x8
c000cf63:	53                   	push   ebx
c000cf64:	68 f8 04 02 c0       	push   0xc00204f8
c000cf69:	e8 5a fb ff ff       	call   c000cac8 <kprintf(char const*, ...)>
c000cf6e:	83 c4 10             	add    esp,0x10
c000cf71:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000cf76:	e9 92 00 00 00       	jmp    c000d00d <sbrk+0xfd>
c000cf7b:	8d 83 ff 0f 00 00    	lea    eax,[ebx+0xfff]
c000cf81:	eb c3                	jmp    c000cf46 <sbrk+0x36>
c000cf83:	81 05 f0 24 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc00224f0,0x1000
c000cf8d:	46                   	inc    esi
c000cf8e:	39 f7                	cmp    edi,esi
c000cf90:	74 34                	je     c000cfc6 <sbrk+0xb6>
c000cf92:	e8 e0 40 00 00       	call   c0011077 <Virt::getAKernelVAS()>
c000cf97:	89 c3                	mov    ebx,eax
c000cf99:	8b 2d f0 24 02 c0    	mov    ebp,DWORD PTR ds:0xc00224f0
c000cf9f:	e8 c9 06 00 00       	call   c000d66d <Phys::allocatePage()>
c000cfa4:	68 01 04 00 00       	push   0x401
c000cfa9:	55                   	push   ebp
c000cfaa:	50                   	push   eax
c000cfab:	53                   	push   ebx
c000cfac:	e8 6d 45 00 00       	call   c001151e <VAS::mapPage(unsigned long, unsigned long, int)>
c000cfb1:	83 c4 10             	add    esp,0x10
c000cfb4:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000cfb9:	74 c8                	je     c000cf83 <sbrk+0x73>
c000cfbb:	8b 1d f0 24 02 c0    	mov    ebx,DWORD PTR ds:0xc00224f0
c000cfc1:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000cfc4:	eb bd                	jmp    c000cf83 <sbrk+0x73>
c000cfc6:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000cfcb:	74 48                	je     c000d015 <sbrk+0x105>
c000cfcd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cfd1:	89 d3                	mov    ebx,edx
c000cfd3:	c1 eb 0a             	shr    ebx,0xa
c000cfd6:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000cfdc:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000cfe2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000cfe6:	c1 e0 0c             	shl    eax,0xc
c000cfe9:	01 d0                	add    eax,edx
c000cfeb:	c1 e8 0a             	shr    eax,0xa
c000cfee:	25 00 f0 ff ff       	and    eax,0xfffff000
c000cff3:	2d 00 00 40 00       	sub    eax,0x400000
c000cff8:	39 c3                	cmp    ebx,eax
c000cffa:	77 0d                	ja     c000d009 <sbrk+0xf9>
c000cffc:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000cfff:	81 c3 00 10 00 00    	add    ebx,0x1000
c000d005:	39 d8                	cmp    eax,ebx
c000d007:	73 f3                	jae    c000cffc <sbrk+0xec>
c000d009:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d00d:	83 c4 1c             	add    esp,0x1c
c000d010:	5b                   	pop    ebx
c000d011:	5e                   	pop    esi
c000d012:	5f                   	pop    edi
c000d013:	5d                   	pop    ebp
c000d014:	c3                   	ret    
c000d015:	e8 ff 15 01 00       	call   c001e619 <CPU::readCR3()>
c000d01a:	83 ec 0c             	sub    esp,0xc
c000d01d:	50                   	push   eax
c000d01e:	e8 1a 16 01 00       	call   c001e63d <CPU::writeCR3(unsigned long)>
c000d023:	83 c4 10             	add    esp,0x10
c000d026:	eb e1                	jmp    c000d009 <sbrk+0xf9>

c000d028 <mmap>:
c000d028:	83 ec 18             	sub    esp,0x18
c000d02b:	68 28 05 02 c0       	push   0xc0020528
c000d030:	e8 b1 fb ff ff       	call   c000cbe6 <panic(char const*)>
c000d035:	b8 00 00 00 00       	mov    eax,0x0
c000d03a:	83 c4 1c             	add    esp,0x1c
c000d03d:	c3                   	ret    

c000d03e <munmap>:
c000d03e:	83 ec 18             	sub    esp,0x18
c000d041:	68 2d 05 02 c0       	push   0xc002052d
c000d046:	e8 9b fb ff ff       	call   c000cbe6 <panic(char const*)>
c000d04b:	b8 00 00 00 00       	mov    eax,0x0
c000d050:	83 c4 1c             	add    esp,0x1c
c000d053:	c3                   	ret    

c000d054 <liballoc_lock()>:
c000d054:	83 ec 0c             	sub    esp,0xc
c000d057:	e8 0e 0f 00 00       	call   c000df6a <lockScheduler()>
c000d05c:	b8 00 00 00 00       	mov    eax,0x0
c000d061:	83 c4 0c             	add    esp,0xc
c000d064:	c3                   	ret    

c000d065 <liballoc_unlock()>:
c000d065:	83 ec 0c             	sub    esp,0xc
c000d068:	e8 ff 0e 00 00       	call   c000df6c <unlockScheduler()>
c000d06d:	b8 00 00 00 00       	mov    eax,0x0
c000d072:	83 c4 0c             	add    esp,0xc
c000d075:	c3                   	ret    

c000d076 <liballoc_alloc(int)>:
c000d076:	83 ec 0c             	sub    esp,0xc
c000d079:	e8 f9 3f 00 00       	call   c0011077 <Virt::getAKernelVAS()>
c000d07e:	83 ec 04             	sub    esp,0x4
c000d081:	6a 01                	push   0x1
c000d083:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d087:	50                   	push   eax
c000d088:	e8 91 45 00 00       	call   c001161e <VAS::allocatePages(int, int)>
c000d08d:	83 c4 1c             	add    esp,0x1c
c000d090:	c3                   	ret    

c000d091 <liballoc_free(void*, int)>:
c000d091:	83 ec 0c             	sub    esp,0xc
c000d094:	e8 de 3f 00 00       	call   c0011077 <Virt::getAKernelVAS()>
c000d099:	83 ec 08             	sub    esp,0x8
c000d09c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d0a0:	50                   	push   eax
c000d0a1:	e8 9a 42 00 00       	call   c0011340 <VAS::freeAllocatedPages(unsigned long)>
c000d0a6:	b8 00 00 00 00       	mov    eax,0x0
c000d0ab:	83 c4 1c             	add    esp,0x1c
c000d0ae:	c3                   	ret    

c000d0af <realloc>:
c000d0af:	83 ec 14             	sub    esp,0x14
c000d0b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0ba:	e8 c2 42 ff ff       	call   c0001381 <dlrealloc>
c000d0bf:	83 c4 1c             	add    esp,0x1c
c000d0c2:	c3                   	ret    

c000d0c3 <malloc>:
c000d0c3:	83 ec 18             	sub    esp,0x18
c000d0c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0ca:	e8 75 3d ff ff       	call   c0000e44 <dlmalloc>
c000d0cf:	83 c4 1c             	add    esp,0x1c
c000d0d2:	c3                   	ret    

c000d0d3 <free>:
c000d0d3:	83 ec 18             	sub    esp,0x18
c000d0d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0da:	e8 0a 3a ff ff       	call   c0000ae9 <dlfree>
c000d0df:	83 c4 1c             	add    esp,0x1c
c000d0e2:	c3                   	ret    

c000d0e3 <rfree>:
c000d0e3:	83 ec 18             	sub    esp,0x18
c000d0e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0ea:	e8 e4 ff ff ff       	call   c000d0d3 <free>
c000d0ef:	83 c4 1c             	add    esp,0x1c
c000d0f2:	c3                   	ret    

c000d0f3 <calloc>:
c000d0f3:	56                   	push   esi
c000d0f4:	53                   	push   ebx
c000d0f5:	83 ec 10             	sub    esp,0x10
c000d0f8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000d0fc:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000d101:	53                   	push   ebx
c000d102:	e8 bc ff ff ff       	call   c000d0c3 <malloc>
c000d107:	89 c6                	mov    esi,eax
c000d109:	83 c4 0c             	add    esp,0xc
c000d10c:	53                   	push   ebx
c000d10d:	6a 00                	push   0x0
c000d10f:	50                   	push   eax
c000d110:	e8 f3 34 ff ff       	call   c0000608 <memset>
c000d115:	89 f0                	mov    eax,esi
c000d117:	83 c4 14             	add    esp,0x14
c000d11a:	5b                   	pop    ebx
c000d11b:	5e                   	pop    esi
c000d11c:	c3                   	ret    

c000d11d <hwTextMode_loadInData(VgaText*)>:
c000d11d:	57                   	push   edi
c000d11e:	56                   	push   esi
c000d11f:	53                   	push   ebx
c000d120:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000d124:	8b 87 ac 0f 00 00    	mov    eax,DWORD PTR [edi+0xfac]
c000d12a:	85 c0                	test   eax,eax
c000d12c:	7e 30                	jle    c000d15e <hwTextMode_loadInData(VgaText*)+0x41>
c000d12e:	8d 5f 0c             	lea    ebx,[edi+0xc]
c000d131:	31 f6                	xor    esi,esi
c000d133:	8d 0c b6             	lea    ecx,[esi+esi*4]
c000d136:	31 c0                	xor    eax,eax
c000d138:	c1 e1 05             	shl    ecx,0x5
c000d13b:	81 e9 60 7f f4 3d    	sub    ecx,0x3df47f60
c000d141:	66 8b 14 43          	mov    dx,WORD PTR [ebx+eax*2]
c000d145:	66 89 14 41          	mov    WORD PTR [ecx+eax*2],dx
c000d149:	40                   	inc    eax
c000d14a:	83 f8 50             	cmp    eax,0x50
c000d14d:	75 f2                	jne    c000d141 <hwTextMode_loadInData(VgaText*)+0x24>
c000d14f:	81 c3 a0 00 00 00    	add    ebx,0xa0
c000d155:	46                   	inc    esi
c000d156:	39 b7 ac 0f 00 00    	cmp    DWORD PTR [edi+0xfac],esi
c000d15c:	7f d5                	jg     c000d133 <hwTextMode_loadInData(VgaText*)+0x16>
c000d15e:	5b                   	pop    ebx
c000d15f:	5e                   	pop    esi
c000d160:	5f                   	pop    edi
c000d161:	c3                   	ret    

c000d162 <hwTextMode_loadInTitle(VgaText*, char*)>:
c000d162:	56                   	push   esi
c000d163:	ba 00 80 0b c2       	mov    edx,0xc20b8000
c000d168:	53                   	push   ebx
c000d169:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000d16d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d171:	8b 83 d4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfd4]
c000d177:	8b b3 d8 0f 00 00    	mov    esi,DWORD PTR [ebx+0xfd8]
c000d17d:	c1 e0 04             	shl    eax,0x4
c000d180:	83 e6 0f             	and    esi,0xf
c000d183:	0f b6 c0             	movzx  eax,al
c000d186:	41                   	inc    ecx
c000d187:	09 f0                	or     eax,esi
c000d189:	83 c2 02             	add    edx,0x2
c000d18c:	0f b6 71 ff          	movzx  esi,BYTE PTR [ecx-0x1]
c000d190:	c1 e0 08             	shl    eax,0x8
c000d193:	09 f0                	or     eax,esi
c000d195:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c000d199:	81 fa a0 80 0b c2    	cmp    edx,0xc20b80a0
c000d19f:	75 d0                	jne    c000d171 <hwTextMode_loadInTitle(VgaText*, char*)+0xf>
c000d1a1:	5b                   	pop    ebx
c000d1a2:	5e                   	pop    esi
c000d1a3:	c3                   	ret    

c000d1a4 <hwTextMode_showCursor(VgaText*, bool)>:
c000d1a4:	56                   	push   esi
c000d1a5:	53                   	push   ebx
c000d1a6:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c000d1ab:	74 38                	je     c000d1e5 <hwTextMode_showCursor(VgaText*, bool)+0x41>
c000d1ad:	bb d4 03 00 00       	mov    ebx,0x3d4
c000d1b2:	b0 0a                	mov    al,0xa
c000d1b4:	89 da                	mov    edx,ebx
c000d1b6:	ee                   	out    dx,al
c000d1b7:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000d1bc:	89 ca                	mov    edx,ecx
c000d1be:	ec                   	in     al,dx
c000d1bf:	b2 0f                	mov    dl,0xf
c000d1c1:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000d1c5:	83 e0 c0             	and    eax,0xffffffc0
c000d1c8:	2b 96 b8 0f 00 00    	sub    edx,DWORD PTR [esi+0xfb8]
c000d1ce:	09 d0                	or     eax,edx
c000d1d0:	89 ca                	mov    edx,ecx
c000d1d2:	ee                   	out    dx,al
c000d1d3:	b0 0b                	mov    al,0xb
c000d1d5:	89 da                	mov    edx,ebx
c000d1d7:	ee                   	out    dx,al
c000d1d8:	89 ca                	mov    edx,ecx
c000d1da:	ec                   	in     al,dx
c000d1db:	83 e0 e0             	and    eax,0xffffffe0
c000d1de:	83 c8 0f             	or     eax,0xf
c000d1e1:	ee                   	out    dx,al
c000d1e2:	5b                   	pop    ebx
c000d1e3:	5e                   	pop    esi
c000d1e4:	c3                   	ret    
c000d1e5:	b0 0a                	mov    al,0xa
c000d1e7:	ba d4 03 00 00       	mov    edx,0x3d4
c000d1ec:	ee                   	out    dx,al
c000d1ed:	b0 20                	mov    al,0x20
c000d1ef:	ba d5 03 00 00       	mov    edx,0x3d5
c000d1f4:	ee                   	out    dx,al
c000d1f5:	5b                   	pop    ebx
c000d1f6:	5e                   	pop    esi
c000d1f7:	c3                   	ret    

c000d1f8 <hwTextMode_update(VgaText*)>:
c000d1f8:	c3                   	ret    

c000d1f9 <hwTextMode_updateCursor(VgaText*)>:
c000d1f9:	56                   	push   esi
c000d1fa:	b9 19 00 00 00       	mov    ecx,0x19
c000d1ff:	53                   	push   ebx
c000d200:	be d4 03 00 00       	mov    esi,0x3d4
c000d205:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d209:	89 f2                	mov    edx,esi
c000d20b:	2b 88 ac 0f 00 00    	sub    ecx,DWORD PTR [eax+0xfac]
c000d211:	03 88 b4 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb4]
c000d217:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000d21a:	c1 e1 04             	shl    ecx,0x4
c000d21d:	03 88 b0 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb0]
c000d223:	b0 0f                	mov    al,0xf
c000d225:	ee                   	out    dx,al
c000d226:	bb d5 03 00 00       	mov    ebx,0x3d5
c000d22b:	88 c8                	mov    al,cl
c000d22d:	89 da                	mov    edx,ebx
c000d22f:	ee                   	out    dx,al
c000d230:	b0 0e                	mov    al,0xe
c000d232:	89 f2                	mov    edx,esi
c000d234:	ee                   	out    dx,al
c000d235:	89 c8                	mov    eax,ecx
c000d237:	89 da                	mov    edx,ebx
c000d239:	66 c1 e8 08          	shr    ax,0x8
c000d23d:	ee                   	out    dx,al
c000d23e:	5b                   	pop    ebx
c000d23f:	5e                   	pop    esi
c000d240:	c3                   	ret    

c000d241 <hwTextMode_disableBlink(VgaText*, bool)>:
c000d241:	ba da 03 00 00       	mov    edx,0x3da
c000d246:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000d24b:	75 18                	jne    c000d265 <hwTextMode_disableBlink(VgaText*, bool)+0x24>
c000d24d:	ec                   	in     al,dx
c000d24e:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000d253:	b0 30                	mov    al,0x30
c000d255:	89 ca                	mov    edx,ecx
c000d257:	ee                   	out    dx,al
c000d258:	ba c1 03 00 00       	mov    edx,0x3c1
c000d25d:	ec                   	in     al,dx
c000d25e:	83 c8 08             	or     eax,0x8
c000d261:	89 ca                	mov    edx,ecx
c000d263:	ee                   	out    dx,al
c000d264:	c3                   	ret    
c000d265:	ec                   	in     al,dx
c000d266:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000d26b:	b0 30                	mov    al,0x30
c000d26d:	89 ca                	mov    edx,ecx
c000d26f:	ee                   	out    dx,al
c000d270:	ba c1 03 00 00       	mov    edx,0x3c1
c000d275:	ec                   	in     al,dx
c000d276:	83 e0 f7             	and    eax,0xfffffff7
c000d279:	89 ca                	mov    edx,ecx
c000d27b:	ee                   	out    dx,al
c000d27c:	c3                   	ret    

c000d27d <hwTextMode_scrollScreen(VgaText*)>:
c000d27d:	55                   	push   ebp
c000d27e:	bd 02 00 00 00       	mov    ebp,0x2
c000d283:	57                   	push   edi
c000d284:	56                   	push   esi
c000d285:	53                   	push   ebx
c000d286:	83 ec 1c             	sub    esp,0x1c
c000d289:	c7 44 24 0c a0 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b80a0
c000d291:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000d295:	31 c0                	xor    eax,eax
c000d297:	eb 0b                	jmp    c000d2a4 <hwTextMode_scrollScreen(VgaText*)+0x27>
c000d299:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000d29f:	74 57                	je     c000d2f8 <hwTextMode_scrollScreen(VgaText*)+0x7b>
c000d2a1:	43                   	inc    ebx
c000d2a2:	89 f0                	mov    eax,esi
c000d2a4:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000d2aa:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000d2b0:	88 13                	mov    BYTE PTR [ebx],dl
c000d2b2:	8d 70 01             	lea    esi,[eax+0x1]
c000d2b5:	83 fd 18             	cmp    ebp,0x18
c000d2b8:	75 df                	jne    c000d299 <hwTextMode_scrollScreen(VgaText*)+0x1c>
c000d2ba:	a8 01                	test   al,0x1
c000d2bc:	75 13                	jne    c000d2d1 <hwTextMode_scrollScreen(VgaText*)+0x54>
c000d2be:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000d2c1:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000d2c7:	75 d8                	jne    c000d2a1 <hwTextMode_scrollScreen(VgaText*)+0x24>
c000d2c9:	83 c4 1c             	add    esp,0x1c
c000d2cc:	5b                   	pop    ebx
c000d2cd:	5e                   	pop    esi
c000d2ce:	5f                   	pop    edi
c000d2cf:	5d                   	pop    ebp
c000d2d0:	c3                   	ret    
c000d2d1:	83 ec 08             	sub    esp,0x8
c000d2d4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d2d8:	0f b6 80 cc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfcc]
c000d2df:	50                   	push   eax
c000d2e0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000d2e4:	0f b6 80 d0 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfd0]
c000d2eb:	50                   	push   eax
c000d2ec:	e8 bd 29 00 00       	call   c000fcae <VgaText::combineColours(unsigned char, unsigned char)>
c000d2f1:	83 c4 10             	add    esp,0x10
c000d2f4:	88 07                	mov    BYTE PTR [edi],al
c000d2f6:	eb c9                	jmp    c000d2c1 <hwTextMode_scrollScreen(VgaText*)+0x44>
c000d2f8:	45                   	inc    ebp
c000d2f9:	81 44 24 0c a0 00 00 00 	add    DWORD PTR [esp+0xc],0xa0
c000d301:	eb 8e                	jmp    c000d291 <hwTextMode_scrollScreen(VgaText*)+0x14>

c000d303 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000d303:	56                   	push   esi
c000d304:	53                   	push   ebx
c000d305:	83 ec 0c             	sub    esp,0xc
c000d308:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000d30c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000d310:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000d315:	50                   	push   eax
c000d316:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000d31b:	50                   	push   eax
c000d31c:	e8 8d 29 00 00       	call   c000fcae <VgaText::combineColours(unsigned char, unsigned char)>
c000d321:	5a                   	pop    edx
c000d322:	0f b6 c0             	movzx  eax,al
c000d325:	59                   	pop    ecx
c000d326:	50                   	push   eax
c000d327:	89 f0                	mov    eax,esi
c000d329:	0f be f0             	movsx  esi,al
c000d32c:	56                   	push   esi
c000d32d:	e8 22 2a 00 00       	call   c000fd54 <VgaText::combineCharAndColour(char, unsigned char)>
c000d332:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d336:	ba 19 00 00 00       	mov    edx,0x19
c000d33b:	2b 91 ac 0f 00 00    	sub    edx,DWORD PTR [ecx+0xfac]
c000d341:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000d344:	8d 14 92             	lea    edx,[edx+edx*4]
c000d347:	c1 e1 04             	shl    ecx,0x4
c000d34a:	c1 e2 04             	shl    edx,0x4
c000d34d:	03 4c 24 30          	add    ecx,DWORD PTR [esp+0x30]
c000d351:	01 ca                	add    edx,ecx
c000d353:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c000d35b:	83 c4 14             	add    esp,0x14
c000d35e:	5b                   	pop    ebx
c000d35f:	5e                   	pop    esi
c000d360:	c3                   	ret    

c000d361 <setupTextMode()>:
c000d361:	c7 05 58 35 02 c0 41 d2 00 c0 	mov    DWORD PTR ds:0xc0023558,0xc000d241
c000d36b:	c7 05 44 35 02 c0 1d d1 00 c0 	mov    DWORD PTR ds:0xc0023544,0xc000d11d
c000d375:	c7 05 40 35 02 c0 62 d1 00 c0 	mov    DWORD PTR ds:0xc0023540,0xc000d162
c000d37f:	c7 05 4c 35 02 c0 7d d2 00 c0 	mov    DWORD PTR ds:0xc002354c,0xc000d27d
c000d389:	c7 05 54 35 02 c0 a4 d1 00 c0 	mov    DWORD PTR ds:0xc0023554,0xc000d1a4
c000d393:	c7 05 48 35 02 c0 f8 d1 00 c0 	mov    DWORD PTR ds:0xc0023548,0xc000d1f8
c000d39d:	c7 05 50 35 02 c0 f9 d1 00 c0 	mov    DWORD PTR ds:0xc0023550,0xc000d1f9
c000d3a7:	c7 05 5c 35 02 c0 03 d3 00 c0 	mov    DWORD PTR ds:0xc002355c,0xc000d303
c000d3b1:	c3                   	ret    

c000d3b2 <kernel_main>:
c000d3b2:	57                   	push   edi
c000d3b3:	bf f9 03 00 00       	mov    edi,0x3f9
c000d3b8:	56                   	push   esi
c000d3b9:	31 f6                	xor    esi,esi
c000d3bb:	53                   	push   ebx
c000d3bc:	83 ec 10             	sub    esp,0x10
c000d3bf:	e8 44 27 00 00       	call   c000fb08 <installVgaTextImplementation()>
c000d3c4:	e8 98 ff ff ff       	call   c000d361 <setupTextMode()>
c000d3c9:	89 f0                	mov    eax,esi
c000d3cb:	89 fa                	mov    edx,edi
c000d3cd:	ee                   	out    dx,al
c000d3ce:	bb fb 03 00 00       	mov    ebx,0x3fb
c000d3d3:	b0 80                	mov    al,0x80
c000d3d5:	89 da                	mov    edx,ebx
c000d3d7:	ee                   	out    dx,al
c000d3d8:	b1 03                	mov    cl,0x3
c000d3da:	ba f8 03 00 00       	mov    edx,0x3f8
c000d3df:	88 c8                	mov    al,cl
c000d3e1:	ee                   	out    dx,al
c000d3e2:	89 f0                	mov    eax,esi
c000d3e4:	89 fa                	mov    edx,edi
c000d3e6:	ee                   	out    dx,al
c000d3e7:	88 c8                	mov    al,cl
c000d3e9:	89 da                	mov    edx,ebx
c000d3eb:	ee                   	out    dx,al
c000d3ec:	b0 c7                	mov    al,0xc7
c000d3ee:	ba fa 03 00 00       	mov    edx,0x3fa
c000d3f3:	ee                   	out    dx,al
c000d3f4:	b0 0b                	mov    al,0xb
c000d3f6:	ba fc 03 00 00       	mov    edx,0x3fc
c000d3fb:	ee                   	out    dx,al
c000d3fc:	a1 24 05 00 00       	mov    eax,ds:0x524
c000d401:	83 ec 0c             	sub    esp,0xc
c000d404:	05 ff 0f 00 00       	add    eax,0xfff
c000d409:	25 00 f0 ff ff       	and    eax,0xfffff000
c000d40e:	50                   	push   eax
c000d40f:	e8 4d 03 00 00       	call   c000d761 <Phys::physicalMemorySetup(unsigned int)>
c000d414:	e8 df 3b 00 00       	call   c0010ff8 <Virt::virtualMemorySetup()>
c000d419:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000d41f:	83 c4 10             	add    esp,0x10
c000d422:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000d428:	75 0e                	jne    c000d438 <kernel_main+0x86>
c000d42a:	89 d8                	mov    eax,ebx
c000d42c:	25 48 03 00 00       	and    eax,0x348
c000d431:	3d 00 03 00 00       	cmp    eax,0x300
c000d436:	74 10                	je     c000d448 <kernel_main+0x96>
c000d438:	83 ec 0c             	sub    esp,0xc
c000d43b:	68 97 04 02 c0       	push   0xc0020497
c000d440:	e8 a1 f7 ff ff       	call   c000cbe6 <panic(char const*)>
c000d445:	83 c4 10             	add    esp,0x10
c000d448:	83 ec 0c             	sub    esp,0xc
c000d44b:	89 1d 74 32 02 c0    	mov    DWORD PTR ds:0xc0023274,ebx
c000d451:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000d455:	53                   	push   ebx
c000d456:	e8 47 3d 00 00       	call   c00111a2 <VAS::VAS()>
c000d45b:	89 1d 7c 35 02 c0    	mov    DWORD PTR ds:0xc002357c,ebx
c000d461:	e8 ba 2b ff ff       	call   c0000020 <callGlobalConstructors>
c000d466:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000d46d:	e8 06 4c 00 00       	call   c0012078 <operator new(unsigned long)>
c000d472:	89 04 24             	mov    DWORD PTR [esp],eax
c000d475:	89 c6                	mov    esi,eax
c000d477:	e8 26 d9 ff ff       	call   c000ada2 <Computer::Computer()>
c000d47c:	6a 00                	push   0x0
c000d47e:	89 35 c8 30 02 c0    	mov    DWORD PTR ds:0xc00230c8,esi
c000d484:	6a 00                	push   0x0
c000d486:	6a 00                	push   0x0
c000d488:	56                   	push   esi
c000d489:	e8 d8 dd ff ff       	call   c000b266 <Computer::open(int, int, void*)>
c000d48e:	83 c4 14             	add    esp,0x14
c000d491:	53                   	push   ebx
c000d492:	e8 1b 3f 00 00       	call   c00113b2 <VAS::~VAS()>
c000d497:	c7 04 24 34 05 02 c0 	mov    DWORD PTR [esp],0xc0020534
c000d49e:	e8 43 f7 ff ff       	call   c000cbe6 <panic(char const*)>
c000d4a3:	83 c4 20             	add    esp,0x20
c000d4a6:	5b                   	pop    ebx
c000d4a7:	5e                   	pop    esi
c000d4a8:	5f                   	pop    edi
c000d4a9:	c3                   	ret    

c000d4aa <Phys::allocateDMA(unsigned long)>:
c000d4aa:	55                   	push   ebp
c000d4ab:	31 d2                	xor    edx,edx
c000d4ad:	57                   	push   edi
c000d4ae:	31 ed                	xor    ebp,ebp
c000d4b0:	56                   	push   esi
c000d4b1:	31 c9                	xor    ecx,ecx
c000d4b3:	53                   	push   ebx
c000d4b4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000d4b8:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000d4be:	31 c0                	xor    eax,eax
c000d4c0:	c1 ee 0c             	shr    esi,0xc
c000d4c3:	eb 17                	jmp    c000d4dc <Phys::allocateDMA(unsigned long)+0x32>
c000d4c5:	85 c9                	test   ecx,ecx
c000d4c7:	75 04                	jne    c000d4cd <Phys::allocateDMA(unsigned long)+0x23>
c000d4c9:	89 d5                	mov    ebp,edx
c000d4cb:	89 d0                	mov    eax,edx
c000d4cd:	8d 59 01             	lea    ebx,[ecx+0x1]
c000d4d0:	39 de                	cmp    esi,ebx
c000d4d2:	74 20                	je     c000d4f4 <Phys::allocateDMA(unsigned long)+0x4a>
c000d4d4:	42                   	inc    edx
c000d4d5:	89 d9                	mov    ecx,ebx
c000d4d7:	83 fa 2f             	cmp    edx,0x2f
c000d4da:	7f 11                	jg     c000d4ed <Phys::allocateDMA(unsigned long)+0x43>
c000d4dc:	80 ba a0 32 02 c0 00 	cmp    BYTE PTR [edx-0x3ffdcd60],0x0
c000d4e3:	74 e0                	je     c000d4c5 <Phys::allocateDMA(unsigned long)+0x1b>
c000d4e5:	31 c9                	xor    ecx,ecx
c000d4e7:	42                   	inc    edx
c000d4e8:	83 fa 2f             	cmp    edx,0x2f
c000d4eb:	7e ef                	jle    c000d4dc <Phys::allocateDMA(unsigned long)+0x32>
c000d4ed:	5b                   	pop    ebx
c000d4ee:	31 c0                	xor    eax,eax
c000d4f0:	5e                   	pop    esi
c000d4f1:	5f                   	pop    edi
c000d4f2:	5d                   	pop    ebp
c000d4f3:	c3                   	ret    
c000d4f4:	8d 14 30             	lea    edx,[eax+esi*1]
c000d4f7:	89 d7                	mov    edi,edx
c000d4f9:	4f                   	dec    edi
c000d4fa:	79 03                	jns    c000d4ff <Phys::allocateDMA(unsigned long)+0x55>
c000d4fc:	8d 7a 0e             	lea    edi,[edx+0xe]
c000d4ff:	c1 ff 04             	sar    edi,0x4
c000d502:	89 c2                	mov    edx,eax
c000d504:	c1 fa 04             	sar    edx,0x4
c000d507:	39 fa                	cmp    edx,edi
c000d509:	75 2f                	jne    c000d53a <Phys::allocateDMA(unsigned long)+0x90>
c000d50b:	85 db                	test   ebx,ebx
c000d50d:	74 1a                	je     c000d529 <Phys::allocateDMA(unsigned long)+0x7f>
c000d50f:	be a0 32 02 c0       	mov    esi,0xc00232a0
c000d514:	8d 90 a0 32 02 c0    	lea    edx,[eax-0x3ffdcd60]
c000d51a:	f7 d6                	not    esi
c000d51c:	29 c6                	sub    esi,eax
c000d51e:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000d521:	42                   	inc    edx
c000d522:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000d525:	39 d9                	cmp    ecx,ebx
c000d527:	7f f5                	jg     c000d51e <Phys::allocateDMA(unsigned long)+0x74>
c000d529:	85 ff                	test   edi,edi
c000d52b:	74 13                	je     c000d540 <Phys::allocateDMA(unsigned long)+0x96>
c000d52d:	5b                   	pop    ebx
c000d52e:	05 50 20 0c 00       	add    eax,0xc2050
c000d533:	5e                   	pop    esi
c000d534:	c1 e0 0c             	shl    eax,0xc
c000d537:	5f                   	pop    edi
c000d538:	5d                   	pop    ebp
c000d539:	c3                   	ret    
c000d53a:	89 ea                	mov    edx,ebp
c000d53c:	31 c9                	xor    ecx,ecx
c000d53e:	eb a7                	jmp    c000d4e7 <Phys::allocateDMA(unsigned long)+0x3d>
c000d540:	5b                   	pop    ebx
c000d541:	c1 e0 0c             	shl    eax,0xc
c000d544:	5e                   	pop    esi
c000d545:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000d54a:	5f                   	pop    edi
c000d54b:	5d                   	pop    ebp
c000d54c:	c3                   	ret    

c000d54d <Phys::freeDMA(unsigned long, unsigned long)>:
c000d54d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d551:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d555:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000d55b:	c1 e9 0c             	shr    ecx,0xc
c000d55e:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000d563:	76 25                	jbe    c000d58a <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000d565:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000d56a:	c1 e8 0c             	shr    eax,0xc
c000d56d:	8d 50 10             	lea    edx,[eax+0x10]
c000d570:	85 c9                	test   ecx,ecx
c000d572:	74 15                	je     c000d589 <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000d574:	8d 82 a0 32 02 c0    	lea    eax,[edx-0x3ffdcd60]
c000d57a:	8d 94 11 a0 32 02 c0 	lea    edx,[ecx+edx*1-0x3ffdcd60]
c000d581:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000d584:	40                   	inc    eax
c000d585:	39 d0                	cmp    eax,edx
c000d587:	75 f8                	jne    c000d581 <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000d589:	c3                   	ret    
c000d58a:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000d590:	c1 ea 0c             	shr    edx,0xc
c000d593:	eb db                	jmp    c000d570 <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000d595 <Phys::setPageState(unsigned long, bool)>:
c000d595:	56                   	push   esi
c000d596:	ba 01 00 00 00       	mov    edx,0x1
c000d59b:	53                   	push   ebx
c000d59c:	8b 35 f4 24 02 c0    	mov    esi,DWORD PTR ds:0xc00224f4
c000d5a2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d5a6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000d5aa:	89 c8                	mov    eax,ecx
c000d5ac:	83 e1 07             	and    ecx,0x7
c000d5af:	c1 e8 03             	shr    eax,0x3
c000d5b2:	d3 e3                	shl    ebx,cl
c000d5b4:	01 c6                	add    esi,eax
c000d5b6:	d3 e2                	shl    edx,cl
c000d5b8:	f7 d2                	not    edx
c000d5ba:	20 16                	and    BYTE PTR [esi],dl
c000d5bc:	03 05 f4 24 02 c0    	add    eax,DWORD PTR ds:0xc00224f4
c000d5c2:	08 18                	or     BYTE PTR [eax],bl
c000d5c4:	5b                   	pop    ebx
c000d5c5:	5e                   	pop    esi
c000d5c6:	c3                   	ret    

c000d5c7 <Phys::getPageState(unsigned long)>:
c000d5c7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000d5cb:	8b 15 f4 24 02 c0    	mov    edx,DWORD PTR ds:0xc00224f4
c000d5d1:	89 c8                	mov    eax,ecx
c000d5d3:	83 e1 07             	and    ecx,0x7
c000d5d6:	c1 e8 03             	shr    eax,0x3
c000d5d9:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000d5dd:	d3 f8                	sar    eax,cl
c000d5df:	83 e0 01             	and    eax,0x1
c000d5e2:	c3                   	ret    

c000d5e3 <Phys::freePage(unsigned long)>:
c000d5e3:	53                   	push   ebx
c000d5e4:	83 ec 08             	sub    esp,0x8
c000d5e7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d5eb:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000d5f1:	76 57                	jbe    c000d64a <Phys::freePage(unsigned long)+0x67>
c000d5f3:	c1 eb 0c             	shr    ebx,0xc
c000d5f6:	53                   	push   ebx
c000d5f7:	e8 cb ff ff ff       	call   c000d5c7 <Phys::getPageState(unsigned long)>
c000d5fc:	5a                   	pop    edx
c000d5fd:	84 c0                	test   al,al
c000d5ff:	74 5b                	je     c000d65c <Phys::freePage(unsigned long)+0x79>
c000d601:	a1 8c 32 02 c0       	mov    eax,ds:0xc002328c
c000d606:	48                   	dec    eax
c000d607:	a3 8c 32 02 c0       	mov    ds:0xc002328c,eax
c000d60c:	8d 04 80             	lea    eax,[eax+eax*4]
c000d60f:	8d 04 80             	lea    eax,[eax+eax*4]
c000d612:	c1 e0 02             	shl    eax,0x2
c000d615:	99                   	cdq    
c000d616:	f7 3d 90 32 02 c0    	idiv   DWORD PTR ds:0xc0023290
c000d61c:	39 05 88 32 02 c0    	cmp    DWORD PTR ds:0xc0023288,eax
c000d622:	75 13                	jne    c000d637 <Phys::freePage(unsigned long)+0x54>
c000d624:	83 ec 08             	sub    esp,0x8
c000d627:	6a 00                	push   0x0
c000d629:	53                   	push   ebx
c000d62a:	e8 66 ff ff ff       	call   c000d595 <Phys::setPageState(unsigned long, bool)>
c000d62f:	83 c4 10             	add    esp,0x10
c000d632:	83 c4 08             	add    esp,0x8
c000d635:	5b                   	pop    ebx
c000d636:	c3                   	ret    
c000d637:	83 ec 0c             	sub    esp,0xc
c000d63a:	a3 88 32 02 c0       	mov    ds:0xc0023288,eax
c000d63f:	50                   	push   eax
c000d640:	e8 57 28 00 00       	call   c000fe9c <VgaText::updateRAMUsageDisplay(int)>
c000d645:	83 c4 10             	add    esp,0x10
c000d648:	eb da                	jmp    c000d624 <Phys::freePage(unsigned long)+0x41>
c000d64a:	68 00 10 00 00       	push   0x1000
c000d64f:	53                   	push   ebx
c000d650:	e8 f8 fe ff ff       	call   c000d54d <Phys::freeDMA(unsigned long, unsigned long)>
c000d655:	59                   	pop    ecx
c000d656:	5b                   	pop    ebx
c000d657:	83 c4 08             	add    esp,0x8
c000d65a:	5b                   	pop    ebx
c000d65b:	c3                   	ret    
c000d65c:	c7 44 24 10 4f 05 02 c0 	mov    DWORD PTR [esp+0x10],0xc002054f
c000d664:	83 c4 08             	add    esp,0x8
c000d667:	5b                   	pop    ebx
c000d668:	e9 79 f5 ff ff       	jmp    c000cbe6 <panic(char const*)>

c000d66d <Phys::allocatePage()>:
c000d66d:	56                   	push   esi
c000d66e:	53                   	push   ebx
c000d66f:	51                   	push   ecx
c000d670:	8b 35 80 32 02 c0    	mov    esi,DWORD PTR ds:0xc0023280
c000d676:	89 f3                	mov    ebx,esi
c000d678:	eb 0a                	jmp    c000d684 <Phys::allocatePage()+0x17>
c000d67a:	89 1d 80 32 02 c0    	mov    DWORD PTR ds:0xc0023280,ebx
c000d680:	39 de                	cmp    esi,ebx
c000d682:	74 24                	je     c000d6a8 <Phys::allocatePage()+0x3b>
c000d684:	53                   	push   ebx
c000d685:	e8 3d ff ff ff       	call   c000d5c7 <Phys::getPageState(unsigned long)>
c000d68a:	5a                   	pop    edx
c000d68b:	84 c0                	test   al,al
c000d68d:	74 4e                	je     c000d6dd <Phys::allocatePage()+0x70>
c000d68f:	43                   	inc    ebx
c000d690:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000d696:	75 e2                	jne    c000d67a <Phys::allocatePage()+0xd>
c000d698:	31 db                	xor    ebx,ebx
c000d69a:	c7 05 80 32 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023280,0x0
c000d6a4:	39 de                	cmp    esi,ebx
c000d6a6:	75 dc                	jne    c000d684 <Phys::allocatePage()+0x17>
c000d6a8:	83 ec 0c             	sub    esp,0xc
c000d6ab:	68 00 10 00 00       	push   0x1000
c000d6b0:	e8 f5 fd ff ff       	call   c000d4aa <Phys::allocateDMA(unsigned long)>
c000d6b5:	83 c4 10             	add    esp,0x10
c000d6b8:	85 c0                	test   eax,eax
c000d6ba:	75 56                	jne    c000d712 <Phys::allocatePage()+0xa5>
c000d6bc:	83 ec 0c             	sub    esp,0xc
c000d6bf:	68 65 05 02 c0       	push   0xc0020565
c000d6c4:	e8 1d f5 ff ff       	call   c000cbe6 <panic(char const*)>
c000d6c9:	83 c4 10             	add    esp,0x10
c000d6cc:	8b 1d 80 32 02 c0    	mov    ebx,DWORD PTR ds:0xc0023280
c000d6d2:	53                   	push   ebx
c000d6d3:	e8 ef fe ff ff       	call   c000d5c7 <Phys::getPageState(unsigned long)>
c000d6d8:	5a                   	pop    edx
c000d6d9:	84 c0                	test   al,al
c000d6db:	75 b2                	jne    c000d68f <Phys::allocatePage()+0x22>
c000d6dd:	6a 01                	push   0x1
c000d6df:	53                   	push   ebx
c000d6e0:	e8 b0 fe ff ff       	call   c000d595 <Phys::setPageState(unsigned long, bool)>
c000d6e5:	a1 8c 32 02 c0       	mov    eax,ds:0xc002328c
c000d6ea:	59                   	pop    ecx
c000d6eb:	40                   	inc    eax
c000d6ec:	5b                   	pop    ebx
c000d6ed:	a3 8c 32 02 c0       	mov    ds:0xc002328c,eax
c000d6f2:	8d 04 80             	lea    eax,[eax+eax*4]
c000d6f5:	8d 04 80             	lea    eax,[eax+eax*4]
c000d6f8:	c1 e0 02             	shl    eax,0x2
c000d6fb:	99                   	cdq    
c000d6fc:	f7 3d 90 32 02 c0    	idiv   DWORD PTR ds:0xc0023290
c000d702:	39 05 88 32 02 c0    	cmp    DWORD PTR ds:0xc0023288,eax
c000d708:	75 0c                	jne    c000d716 <Phys::allocatePage()+0xa9>
c000d70a:	a1 80 32 02 c0       	mov    eax,ds:0xc0023280
c000d70f:	c1 e0 0c             	shl    eax,0xc
c000d712:	5a                   	pop    edx
c000d713:	5b                   	pop    ebx
c000d714:	5e                   	pop    esi
c000d715:	c3                   	ret    
c000d716:	83 ec 0c             	sub    esp,0xc
c000d719:	a3 88 32 02 c0       	mov    ds:0xc0023288,eax
c000d71e:	50                   	push   eax
c000d71f:	e8 78 27 00 00       	call   c000fe9c <VgaText::updateRAMUsageDisplay(int)>
c000d724:	83 c4 10             	add    esp,0x10
c000d727:	eb e1                	jmp    c000d70a <Phys::allocatePage()+0x9d>

c000d729 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000d729:	56                   	push   esi
c000d72a:	53                   	push   ebx
c000d72b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d72f:	39 1d 84 32 02 c0    	cmp    DWORD PTR ds:0xc0023284,ebx
c000d735:	73 06                	jae    c000d73d <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000d737:	89 1d 84 32 02 c0    	mov    DWORD PTR ds:0xc0023284,ebx
c000d73d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d741:	c1 eb 0c             	shr    ebx,0xc
c000d744:	c1 e8 0c             	shr    eax,0xc
c000d747:	39 d8                	cmp    eax,ebx
c000d749:	73 13                	jae    c000d75e <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000d74b:	6a 00                	push   0x0
c000d74d:	8d 70 01             	lea    esi,[eax+0x1]
c000d750:	50                   	push   eax
c000d751:	e8 3f fe ff ff       	call   c000d595 <Phys::setPageState(unsigned long, bool)>
c000d756:	5a                   	pop    edx
c000d757:	89 f0                	mov    eax,esi
c000d759:	59                   	pop    ecx
c000d75a:	39 f3                	cmp    ebx,esi
c000d75c:	75 ed                	jne    c000d74b <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000d75e:	5b                   	pop    ebx
c000d75f:	5e                   	pop    esi
c000d760:	c3                   	ret    

c000d761 <Phys::physicalMemorySetup(unsigned int)>:
c000d761:	55                   	push   ebp
c000d762:	57                   	push   edi
c000d763:	56                   	push   esi
c000d764:	53                   	push   ebx
c000d765:	31 db                	xor    ebx,ebx
c000d767:	83 ec 30             	sub    esp,0x30
c000d76a:	6a 30                	push   0x30
c000d76c:	6a 00                	push   0x0
c000d76e:	68 a0 32 02 c0       	push   0xc00232a0
c000d773:	e8 90 2e ff ff       	call   c0000608 <memset>
c000d778:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000d77c:	25 00 f0 ff ff       	and    eax,0xfffff000
c000d781:	05 00 10 00 00       	add    eax,0x1000
c000d786:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000d78a:	83 c4 10             	add    esp,0x10
c000d78d:	83 ec 08             	sub    esp,0x8
c000d790:	6a 01                	push   0x1
c000d792:	53                   	push   ebx
c000d793:	43                   	inc    ebx
c000d794:	e8 fc fd ff ff       	call   c000d595 <Phys::setPageState(unsigned long, bool)>
c000d799:	83 c4 10             	add    esp,0x10
c000d79c:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000d7a2:	75 e9                	jne    c000d78d <Phys::physicalMemorySetup(unsigned int)+0x2c>
c000d7a4:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c000d7ab:	66 85 c0             	test   ax,ax
c000d7ae:	0f 84 28 01 00 00    	je     c000d8dc <Phys::physicalMemorySetup(unsigned int)+0x17b>
c000d7b4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d7b8:	8b 15 04 06 00 c2    	mov    edx,DWORD PTR ds:0xc2000604
c000d7be:	a1 00 06 00 c2       	mov    eax,ds:0xc2000600
c000d7c3:	8b 35 08 06 00 c2    	mov    esi,DWORD PTR ds:0xc2000608
c000d7c9:	8b 3d 0c 06 00 c2    	mov    edi,DWORD PTR ds:0xc200060c
c000d7cf:	89 f1                	mov    ecx,esi
c000d7d1:	89 fb                	mov    ebx,edi
c000d7d3:	01 c1                	add    ecx,eax
c000d7d5:	89 d5                	mov    ebp,edx
c000d7d7:	11 d3                	adc    ebx,edx
c000d7d9:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000d7dc:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c000d7e0:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000d7e4:	8b 0d 10 06 00 c2    	mov    ecx,DWORD PTR ds:0xc2000610
c000d7ea:	09 dd                	or     ebp,ebx
c000d7ec:	0f 85 fa 00 00 00    	jne    c000d8ec <Phys::physicalMemorySetup(unsigned int)+0x18b>
c000d7f2:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d7f6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000d7fe:	c7 44 24 0c 00 06 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000600
c000d806:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000d80a:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000d812:	eb 45                	jmp    c000d859 <Phys::physicalMemorySetup(unsigned int)+0xf8>
c000d814:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c000d818:	83 44 24 0c 18       	add    DWORD PTR [esp+0xc],0x18
c000d81d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d821:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
c000d825:	0f 84 c1 00 00 00    	je     c000d8ec <Phys::physicalMemorySetup(unsigned int)+0x18b>
c000d82b:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000d82f:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d832:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d835:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c000d838:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000d83b:	89 c1                	mov    ecx,eax
c000d83d:	89 d3                	mov    ebx,edx
c000d83f:	01 f1                	add    ecx,esi
c000d841:	11 fb                	adc    ebx,edi
c000d843:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000d846:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c000d84a:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000d84d:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000d851:	09 d3                	or     ebx,edx
c000d853:	0f 85 93 00 00 00    	jne    c000d8ec <Phys::physicalMemorySetup(unsigned int)+0x18b>
c000d859:	49                   	dec    ecx
c000d85a:	75 b8                	jne    c000d814 <Phys::physicalMemorySetup(unsigned int)+0xb3>
c000d85c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000d85f:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000d863:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000d867:	39 e9                	cmp    ecx,ebp
c000d869:	89 d9                	mov    ecx,ebx
c000d86b:	1b 4c 24 1c          	sbb    ecx,DWORD PTR [esp+0x1c]
c000d86f:	72 a3                	jb     c000d814 <Phys::physicalMemorySetup(unsigned int)+0xb3>
c000d871:	b9 ff 1f 00 00       	mov    ecx,0x1fff
c000d876:	39 f1                	cmp    ecx,esi
c000d878:	b9 00 00 00 00       	mov    ecx,0x0
c000d87d:	19 f9                	sbb    ecx,edi
c000d87f:	73 93                	jae    c000d814 <Phys::physicalMemorySetup(unsigned int)+0xb3>
c000d881:	39 e8                	cmp    eax,ebp
c000d883:	89 d1                	mov    ecx,edx
c000d885:	1b 4c 24 1c          	sbb    ecx,DWORD PTR [esp+0x1c]
c000d889:	73 13                	jae    c000d89e <Phys::physicalMemorySetup(unsigned int)+0x13d>
c000d88b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000d88e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000d892:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c000d896:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000d89a:	1b 7c 24 1c          	sbb    edi,DWORD PTR [esp+0x1c]
c000d89e:	83 ec 08             	sub    esp,0x8
c000d8a1:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000d8a5:	50                   	push   eax
c000d8a6:	e8 7e fe ff ff       	call   c000d729 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000d8ab:	83 c4 0c             	add    esp,0xc
c000d8ae:	89 fa                	mov    edx,edi
c000d8b0:	89 f0                	mov    eax,esi
c000d8b2:	0f ac d0 0c          	shrd   eax,edx,0xc
c000d8b6:	03 05 90 32 02 c0    	add    eax,DWORD PTR ds:0xc0023290
c000d8bc:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000d8c3:	a3 90 32 02 c0       	mov    ds:0xc0023290,eax
c000d8c8:	52                   	push   edx
c000d8c9:	50                   	push   eax
c000d8ca:	68 81 05 02 c0       	push   0xc0020581
c000d8cf:	e8 f4 f1 ff ff       	call   c000cac8 <kprintf(char const*, ...)>
c000d8d4:	83 c4 10             	add    esp,0x10
c000d8d7:	e9 38 ff ff ff       	jmp    c000d814 <Phys::physicalMemorySetup(unsigned int)+0xb3>
c000d8dc:	83 ec 0c             	sub    esp,0xc
c000d8df:	68 73 05 02 c0       	push   0xc0020573
c000d8e4:	e8 fd f2 ff ff       	call   c000cbe6 <panic(char const*)>
c000d8e9:	83 c4 10             	add    esp,0x10
c000d8ec:	bb 40 01 00 00       	mov    ebx,0x140
c000d8f1:	83 ec 08             	sub    esp,0x8
c000d8f4:	6a 00                	push   0x0
c000d8f6:	53                   	push   ebx
c000d8f7:	43                   	inc    ebx
c000d8f8:	e8 98 fc ff ff       	call   c000d595 <Phys::setPageState(unsigned long, bool)>
c000d8fd:	ff 05 90 32 02 c0    	inc    DWORD PTR ds:0xc0023290
c000d903:	83 c4 10             	add    esp,0x10
c000d906:	81 fb 80 01 00 00    	cmp    ebx,0x180
c000d90c:	75 e3                	jne    c000d8f1 <Phys::physicalMemorySetup(unsigned int)+0x190>
c000d90e:	83 c4 2c             	add    esp,0x2c
c000d911:	5b                   	pop    ebx
c000d912:	5e                   	pop    esi
c000d913:	5f                   	pop    edi
c000d914:	5d                   	pop    ebp
c000d915:	c3                   	ret    

c000d916 <Pipe::isAtty()>:
c000d916:	31 c0                	xor    eax,eax
c000d918:	c3                   	ret    
c000d919:	90                   	nop

c000d91a <Pipe::~Pipe()>:
c000d91a:	83 ec 0c             	sub    esp,0xc
c000d91d:	ba e0 05 02 c0       	mov    edx,0xc00205e0
c000d922:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d926:	89 10                	mov    DWORD PTR [eax],edx
c000d928:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d92c:	83 ec 0c             	sub    esp,0xc
c000d92f:	50                   	push   eax
c000d930:	e8 d3 33 00 00       	call   c0010d08 <UnixFile::~UnixFile()>
c000d935:	83 c4 10             	add    esp,0x10
c000d938:	90                   	nop
c000d939:	83 c4 0c             	add    esp,0xc
c000d93c:	c3                   	ret    
c000d93d:	90                   	nop

c000d93e <Pipe::~Pipe()>:
c000d93e:	83 ec 0c             	sub    esp,0xc
c000d941:	83 ec 0c             	sub    esp,0xc
c000d944:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d948:	e8 cd ff ff ff       	call   c000d91a <Pipe::~Pipe()>
c000d94d:	83 c4 10             	add    esp,0x10
c000d950:	83 ec 08             	sub    esp,0x8
c000d953:	6a 20                	push   0x20
c000d955:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d959:	e8 29 47 00 00       	call   c0012087 <operator delete(void*, unsigned long)>
c000d95e:	83 c4 10             	add    esp,0x10
c000d961:	83 c4 0c             	add    esp,0xc
c000d964:	c3                   	ret    
c000d965:	90                   	nop

c000d966 <Pipe::read(unsigned long long, void*, int*)>:
c000d966:	55                   	push   ebp
c000d967:	57                   	push   edi
c000d968:	56                   	push   esi
c000d969:	53                   	push   ebx
c000d96a:	83 ec 1c             	sub    esp,0x1c
c000d96d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000d971:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000d975:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000d979:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000d97c:	89 c8                	mov    eax,ecx
c000d97e:	99                   	cdq    
c000d97f:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000d983:	74 19                	je     c000d99e <Pipe::read(unsigned long long, void*, int*)+0x38>
c000d985:	39 f9                	cmp    ecx,edi
c000d987:	89 d1                	mov    ecx,edx
c000d989:	19 f1                	sbb    ecx,esi
c000d98b:	73 11                	jae    c000d99e <Pipe::read(unsigned long long, void*, int*)+0x38>
c000d98d:	e8 d8 05 00 00       	call   c000df6a <lockScheduler()>
c000d992:	e8 07 09 00 00       	call   c000e29e <schedule()>
c000d997:	e8 d0 05 00 00       	call   c000df6c <unlockScheduler()>
c000d99c:	eb db                	jmp    c000d979 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000d99e:	39 f8                	cmp    eax,edi
c000d9a0:	89 d1                	mov    ecx,edx
c000d9a2:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000d9a6:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000d9aa:	19 f1                	sbb    ecx,esi
c000d9ac:	73 08                	jae    c000d9b6 <Pipe::read(unsigned long long, void*, int*)+0x50>
c000d9ae:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d9b2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d9b6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d9b9:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000d9bc:	29 c6                	sub    esi,eax
c000d9be:	89 f1                	mov    ecx,esi
c000d9c0:	c1 f9 1f             	sar    ecx,0x1f
c000d9c3:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c000d9c7:	89 ca                	mov    edx,ecx
c000d9c9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000d9cd:	19 d1                	sbb    ecx,edx
c000d9cf:	73 04                	jae    c000d9d5 <Pipe::read(unsigned long long, void*, int*)+0x6f>
c000d9d1:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000d9d5:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000d9d9:	89 fd                	mov    ebp,edi
c000d9db:	29 f5                	sub    ebp,esi
c000d9dd:	85 f6                	test   esi,esi
c000d9df:	74 12                	je     c000d9f3 <Pipe::read(unsigned long long, void*, int*)+0x8d>
c000d9e1:	52                   	push   edx
c000d9e2:	56                   	push   esi
c000d9e3:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
c000d9e6:	50                   	push   eax
c000d9e7:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000d9eb:	e8 e2 2b ff ff       	call   c00005d2 <memcpy>
c000d9f0:	83 c4 10             	add    esp,0x10
c000d9f3:	85 ed                	test   ebp,ebp
c000d9f5:	74 12                	je     c000da09 <Pipe::read(unsigned long long, void*, int*)+0xa3>
c000d9f7:	50                   	push   eax
c000d9f8:	55                   	push   ebp
c000d9f9:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000d9fc:	03 74 24 48          	add    esi,DWORD PTR [esp+0x48]
c000da00:	56                   	push   esi
c000da01:	e8 cc 2b ff ff       	call   c00005d2 <memcpy>
c000da06:	83 c4 10             	add    esp,0x10
c000da09:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c000da0c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000da0f:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000da12:	99                   	cdq    
c000da13:	89 f7                	mov    edi,esi
c000da15:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000da19:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000da1d:	c1 ff 1f             	sar    edi,0x1f
c000da20:	57                   	push   edi
c000da21:	56                   	push   esi
c000da22:	52                   	push   edx
c000da23:	50                   	push   eax
c000da24:	e8 f3 09 01 00       	call   c001e41c <__umoddi3>
c000da29:	83 c4 10             	add    esp,0x10
c000da2c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000da2f:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000da34:	75 10                	jne    c000da46 <Pipe::read(unsigned long long, void*, int*)+0xe0>
c000da36:	83 ec 0c             	sub    esp,0xc
c000da39:	68 9d 05 02 c0       	push   0xc002059d
c000da3e:	e8 a3 f1 ff ff       	call   c000cbe6 <panic(char const*)>
c000da43:	83 c4 10             	add    esp,0x10
c000da46:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000da4a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000da4e:	89 10                	mov    DWORD PTR [eax],edx
c000da50:	83 c4 1c             	add    esp,0x1c
c000da53:	31 c0                	xor    eax,eax
c000da55:	5b                   	pop    ebx
c000da56:	5e                   	pop    esi
c000da57:	5f                   	pop    edi
c000da58:	5d                   	pop    ebp
c000da59:	c3                   	ret    

c000da5a <Pipe::write(unsigned long long, void*, int*)>:
c000da5a:	55                   	push   ebp
c000da5b:	57                   	push   edi
c000da5c:	56                   	push   esi
c000da5d:	53                   	push   ebx
c000da5e:	83 ec 1c             	sub    esp,0x1c
c000da61:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000da65:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000da69:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000da6d:	89 04 24             	mov    DWORD PTR [esp],eax
c000da70:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c000da73:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c000da76:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000da7a:	89 de                	mov    esi,ebx
c000da7c:	89 df                	mov    edi,ebx
c000da7e:	c1 ff 1f             	sar    edi,0x1f
c000da81:	01 c6                	add    esi,eax
c000da83:	89 c8                	mov    eax,ecx
c000da85:	11 d7                	adc    edi,edx
c000da87:	99                   	cdq    
c000da88:	39 f1                	cmp    ecx,esi
c000da8a:	89 d0                	mov    eax,edx
c000da8c:	19 f8                	sbb    eax,edi
c000da8e:	b8 01 00 00 00       	mov    eax,0x1
c000da93:	0f 82 80 00 00 00    	jb     c000db19 <Pipe::write(unsigned long long, void*, int*)+0xbf>
c000da99:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000da9c:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000da9f:	01 d8                	add    eax,ebx
c000daa1:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000daa5:	99                   	cdq    
c000daa6:	f7 f9                	idiv   ecx
c000daa8:	29 d1                	sub    ecx,edx
c000daaa:	89 d7                	mov    edi,edx
c000daac:	89 c8                	mov    eax,ecx
c000daae:	99                   	cdq    
c000daaf:	39 ce                	cmp    esi,ecx
c000dab1:	19 d3                	sbb    ebx,edx
c000dab3:	bb 00 00 00 00       	mov    ebx,0x0
c000dab8:	72 04                	jb     c000dabe <Pipe::write(unsigned long long, void*, int*)+0x64>
c000daba:	89 f3                	mov    ebx,esi
c000dabc:	29 cb                	sub    ebx,ecx
c000dabe:	89 f1                	mov    ecx,esi
c000dac0:	29 d9                	sub    ecx,ebx
c000dac2:	74 1a                	je     c000dade <Pipe::write(unsigned long long, void*, int*)+0x84>
c000dac4:	52                   	push   edx
c000dac5:	51                   	push   ecx
c000dac6:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000daca:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dace:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000dad1:	57                   	push   edi
c000dad2:	e8 fb 2a ff ff       	call   c00005d2 <memcpy>
c000dad7:	83 c4 10             	add    esp,0x10
c000dada:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000dade:	85 db                	test   ebx,ebx
c000dae0:	74 12                	je     c000daf4 <Pipe::write(unsigned long long, void*, int*)+0x9a>
c000dae2:	50                   	push   eax
c000dae3:	53                   	push   ebx
c000dae4:	03 4c 24 44          	add    ecx,DWORD PTR [esp+0x44]
c000dae8:	51                   	push   ecx
c000dae9:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c000daec:	e8 e1 2a ff ff       	call   c00005d2 <memcpy>
c000daf1:	83 c4 10             	add    esp,0x10
c000daf4:	01 75 14             	add    DWORD PTR [ebp+0x14],esi
c000daf7:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000dafc:	75 10                	jne    c000db0e <Pipe::write(unsigned long long, void*, int*)+0xb4>
c000dafe:	83 ec 0c             	sub    esp,0xc
c000db01:	68 b9 05 02 c0       	push   0xc00205b9
c000db06:	e8 db f0 ff ff       	call   c000cbe6 <panic(char const*)>
c000db0b:	83 c4 10             	add    esp,0x10
c000db0e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000db12:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000db15:	89 38                	mov    DWORD PTR [eax],edi
c000db17:	31 c0                	xor    eax,eax
c000db19:	83 c4 1c             	add    esp,0x1c
c000db1c:	5b                   	pop    ebx
c000db1d:	5e                   	pop    esi
c000db1e:	5f                   	pop    edi
c000db1f:	5d                   	pop    ebp
c000db20:	c3                   	ret    
c000db21:	90                   	nop

c000db22 <Pipe::Pipe(int)>:
c000db22:	83 ec 0c             	sub    esp,0xc
c000db25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db29:	83 ec 08             	sub    esp,0x8
c000db2c:	6a 00                	push   0x0
c000db2e:	50                   	push   eax
c000db2f:	e8 70 31 00 00       	call   c0010ca4 <UnixFile::UnixFile(int)>
c000db34:	83 c4 10             	add    esp,0x10
c000db37:	ba e0 05 02 c0       	mov    edx,0xc00205e0
c000db3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db40:	89 10                	mov    DWORD PTR [eax],edx
c000db42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db46:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000db4a:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000db4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db51:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000db58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db5c:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000db63:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000db67:	83 ec 0c             	sub    esp,0xc
c000db6a:	50                   	push   eax
c000db6b:	e8 53 f5 ff ff       	call   c000d0c3 <malloc>
c000db70:	83 c4 10             	add    esp,0x10
c000db73:	89 c2                	mov    edx,eax
c000db75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db79:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000db7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db80:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000db84:	90                   	nop
c000db85:	83 c4 0c             	add    esp,0xc
c000db88:	c3                   	ret    
c000db89:	90                   	nop

c000db8a <changeTSS>:
c000db8a:	83 ec 0c             	sub    esp,0xc
c000db8d:	e8 1c 92 00 00       	call   c0016dae <thisCPU()>
c000db92:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000db98:	83 ec 08             	sub    esp,0x8
c000db9b:	8b 4a 3c             	mov    ecx,DWORD PTR [edx+0x3c]
c000db9e:	05 7c 11 00 00       	add    eax,0x117c
c000dba3:	c1 e1 15             	shl    ecx,0x15
c000dba6:	ba 00 00 e8 01       	mov    edx,0x1e80000
c000dbab:	29 ca                	sub    edx,ecx
c000dbad:	52                   	push   edx
c000dbae:	50                   	push   eax
c000dbaf:	e8 28 2e 00 00       	call   c00109dc <TSS::setESP(unsigned long)>
c000dbb4:	83 c4 1c             	add    esp,0x1c
c000dbb7:	c3                   	ret    

c000dbb8 <Process::addArgs(char**)>:
c000dbb8:	57                   	push   edi
c000dbb9:	56                   	push   esi
c000dbba:	53                   	push   ebx
c000dbbb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000dbbf:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000dbc3:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c000dbcd:	85 ff                	test   edi,edi
c000dbcf:	74 3d                	je     c000dc0e <Process::addArgs(char**)+0x56>
c000dbd1:	8b 07                	mov    eax,DWORD PTR [edi]
c000dbd3:	85 c0                	test   eax,eax
c000dbd5:	74 37                	je     c000dc0e <Process::addArgs(char**)+0x56>
c000dbd7:	31 db                	xor    ebx,ebx
c000dbd9:	83 ec 0c             	sub    esp,0xc
c000dbdc:	50                   	push   eax
c000dbdd:	e8 43 2a ff ff       	call   c0000625 <strlen>
c000dbe2:	40                   	inc    eax
c000dbe3:	89 04 24             	mov    DWORD PTR [esp],eax
c000dbe6:	e8 d8 f4 ff ff       	call   c000d0c3 <malloc>
c000dbeb:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c000dbf2:	5a                   	pop    edx
c000dbf3:	59                   	pop    ecx
c000dbf4:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c000dbf7:	43                   	inc    ebx
c000dbf8:	50                   	push   eax
c000dbf9:	e8 a9 2a ff ff       	call   c00006a7 <strcpy>
c000dbfe:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c000dc04:	83 c4 10             	add    esp,0x10
c000dc07:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c000dc0a:	85 c0                	test   eax,eax
c000dc0c:	75 cb                	jne    c000dbd9 <Process::addArgs(char**)+0x21>
c000dc0e:	5b                   	pop    ebx
c000dc0f:	5e                   	pop    esi
c000dc10:	5f                   	pop    edi
c000dc11:	c3                   	ret    

c000dc12 <Process::Process(char const*, Process*, char**)>:
c000dc12:	56                   	push   esi
c000dc13:	53                   	push   ebx
c000dc14:	83 ec 14             	sub    esp,0x14
c000dc17:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc1b:	05 0c 02 00 00       	add    eax,0x20c
c000dc20:	bb 07 00 00 00       	mov    ebx,0x7
c000dc25:	89 c6                	mov    esi,eax
c000dc27:	85 db                	test   ebx,ebx
c000dc29:	78 12                	js     c000dc3d <Process::Process(char const*, Process*, char**)+0x2b>
c000dc2b:	83 ec 0c             	sub    esp,0xc
c000dc2e:	56                   	push   esi
c000dc2f:	e8 14 0a 01 00       	call   c001e648 <ThreadControlBlock::ThreadControlBlock()>
c000dc34:	83 c4 10             	add    esp,0x10
c000dc37:	83 c6 63             	add    esi,0x63
c000dc3a:	4b                   	dec    ebx
c000dc3b:	eb ea                	jmp    c000dc27 <Process::Process(char const*, Process*, char**)+0x15>
c000dc3d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc41:	c6 80 3a 07 00 00 00 	mov    BYTE PTR [eax+0x73a],0x0
c000dc48:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc4c:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c000dc55:	a1 f8 24 02 c0       	mov    eax,ds:0xc00224f8
c000dc5a:	8d 50 01             	lea    edx,[eax+0x1]
c000dc5d:	89 15 f8 24 02 c0    	mov    DWORD PTR ds:0xc00224f8,edx
c000dc63:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000dc67:	89 02                	mov    DWORD PTR [edx],eax
c000dc69:	83 ec 0c             	sub    esp,0xc
c000dc6c:	6a 10                	push   0x10
c000dc6e:	e8 05 44 00 00       	call   c0012078 <operator new(unsigned long)>
c000dc73:	83 c4 10             	add    esp,0x10
c000dc76:	89 c3                	mov    ebx,eax
c000dc78:	83 ec 08             	sub    esp,0x8
c000dc7b:	6a 00                	push   0x0
c000dc7d:	53                   	push   ebx
c000dc7e:	e8 89 40 00 00       	call   c0011d0c <VAS::VAS(bool)>
c000dc83:	83 c4 10             	add    esp,0x10
c000dc86:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc8a:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c000dc90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc94:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c000dc9e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dca2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000dca6:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c000dcac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dcb0:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c000dcb6:	85 c0                	test   eax,eax
c000dcb8:	74 42                	je     c000dcfc <Process::Process(char const*, Process*, char**)+0xea>
c000dcba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dcbe:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c000dcc4:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c000dcca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dcce:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c000dcd4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dcd8:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c000dcde:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000dce4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dce8:	05 0c 01 00 00       	add    eax,0x10c
c000dced:	83 ec 08             	sub    esp,0x8
c000dcf0:	52                   	push   edx
c000dcf1:	50                   	push   eax
c000dcf2:	e8 b0 29 ff ff       	call   c00006a7 <strcpy>
c000dcf7:	83 c4 10             	add    esp,0x10
c000dcfa:	eb 5c                	jmp    c000dd58 <Process::Process(char const*, Process*, char**)+0x146>
c000dcfc:	83 ec 0c             	sub    esp,0xc
c000dcff:	68 60 12 00 00       	push   0x1260
c000dd04:	e8 6f 43 00 00       	call   c0012078 <operator new(unsigned long)>
c000dd09:	83 c4 10             	add    esp,0x10
c000dd0c:	89 c3                	mov    ebx,eax
c000dd0e:	83 ec 08             	sub    esp,0x8
c000dd11:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dd15:	53                   	push   ebx
c000dd16:	e8 bf 29 00 00       	call   c00106da <VgaText::VgaText(char const*)>
c000dd1b:	83 c4 10             	add    esp,0x10
c000dd1e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd22:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c000dd28:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd2c:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000dd32:	83 ec 0c             	sub    esp,0xc
c000dd35:	50                   	push   eax
c000dd36:	e8 a0 1d 00 00       	call   c000fadb <addToTerminalCycle(VgaText*)>
c000dd3b:	83 c4 10             	add    esp,0x10
c000dd3e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd42:	05 0c 01 00 00       	add    eax,0x10c
c000dd47:	83 ec 08             	sub    esp,0x8
c000dd4a:	68 f4 05 02 c0       	push   0xc00205f4
c000dd4f:	50                   	push   eax
c000dd50:	e8 52 29 ff ff       	call   c00006a7 <strcpy>
c000dd55:	83 c4 10             	add    esp,0x10
c000dd58:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd5c:	83 c0 0c             	add    eax,0xc
c000dd5f:	83 ec 08             	sub    esp,0x8
c000dd62:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dd66:	50                   	push   eax
c000dd67:	e8 3b 29 ff ff       	call   c00006a7 <strcpy>
c000dd6c:	83 c4 10             	add    esp,0x10
c000dd6f:	83 ec 08             	sub    esp,0x8
c000dd72:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dd76:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dd7a:	e8 39 fe ff ff       	call   c000dbb8 <Process::addArgs(char**)>
c000dd7f:	83 c4 10             	add    esp,0x10
c000dd82:	83 ec 08             	sub    esp,0x8
c000dd85:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dd89:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dd8d:	e8 d6 d8 ff ff       	call   c000b668 <loadProgramIntoMemory(Process*, char const*)>
c000dd92:	83 c4 10             	add    esp,0x10
c000dd95:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000dd99:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000dd9d:	83 f0 01             	xor    eax,0x1
c000dda0:	88 c2                	mov    dl,al
c000dda2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dda6:	88 90 3a 07 00 00    	mov    BYTE PTR [eax+0x73a],dl
c000ddac:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000ddb1:	83 ec 08             	sub    esp,0x8
c000ddb4:	50                   	push   eax
c000ddb5:	68 48 06 02 c0       	push   0xc0020648
c000ddba:	e8 09 ed ff ff       	call   c000cac8 <kprintf(char const*, ...)>
c000ddbf:	83 c4 10             	add    esp,0x10
c000ddc2:	90                   	nop
c000ddc3:	83 c4 14             	add    esp,0x14
c000ddc6:	5b                   	pop    ebx
c000ddc7:	5e                   	pop    esi
c000ddc8:	c3                   	ret    
c000ddc9:	90                   	nop

c000ddca <Process::Process(bool, char const*, Process*, char**)>:
c000ddca:	56                   	push   esi
c000ddcb:	53                   	push   ebx
c000ddcc:	83 ec 14             	sub    esp,0x14
c000ddcf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ddd3:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000ddd7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dddb:	05 0c 02 00 00       	add    eax,0x20c
c000dde0:	bb 07 00 00 00       	mov    ebx,0x7
c000dde5:	89 c6                	mov    esi,eax
c000dde7:	85 db                	test   ebx,ebx
c000dde9:	78 12                	js     c000ddfd <Process::Process(bool, char const*, Process*, char**)+0x33>
c000ddeb:	83 ec 0c             	sub    esp,0xc
c000ddee:	56                   	push   esi
c000ddef:	e8 54 08 01 00       	call   c001e648 <ThreadControlBlock::ThreadControlBlock()>
c000ddf4:	83 c4 10             	add    esp,0x10
c000ddf7:	83 c6 63             	add    esi,0x63
c000ddfa:	4b                   	dec    ebx
c000ddfb:	eb ea                	jmp    c000dde7 <Process::Process(bool, char const*, Process*, char**)+0x1d>
c000ddfd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de01:	c6 80 3a 07 00 00 00 	mov    BYTE PTR [eax+0x73a],0x0
c000de08:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de0c:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c000de15:	a1 f8 24 02 c0       	mov    eax,ds:0xc00224f8
c000de1a:	8d 50 01             	lea    edx,[eax+0x1]
c000de1d:	89 15 f8 24 02 c0    	mov    DWORD PTR ds:0xc00224f8,edx
c000de23:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000de27:	89 02                	mov    DWORD PTR [edx],eax
c000de29:	83 ec 0c             	sub    esp,0xc
c000de2c:	6a 10                	push   0x10
c000de2e:	e8 45 42 00 00       	call   c0012078 <operator new(unsigned long)>
c000de33:	83 c4 10             	add    esp,0x10
c000de36:	89 c3                	mov    ebx,eax
c000de38:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000de3d:	83 ec 08             	sub    esp,0x8
c000de40:	50                   	push   eax
c000de41:	53                   	push   ebx
c000de42:	e8 c5 3e 00 00       	call   c0011d0c <VAS::VAS(bool)>
c000de47:	83 c4 10             	add    esp,0x10
c000de4a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de4e:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c000de54:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de58:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c000de62:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de66:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000de6a:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c000de70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de74:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c000de7a:	85 c0                	test   eax,eax
c000de7c:	74 42                	je     c000dec0 <Process::Process(bool, char const*, Process*, char**)+0xf6>
c000de7e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de82:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c000de88:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c000de8e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de92:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c000de98:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de9c:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c000dea2:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000dea8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000deac:	05 0c 01 00 00       	add    eax,0x10c
c000deb1:	83 ec 08             	sub    esp,0x8
c000deb4:	52                   	push   edx
c000deb5:	50                   	push   eax
c000deb6:	e8 ec 27 ff ff       	call   c00006a7 <strcpy>
c000debb:	83 c4 10             	add    esp,0x10
c000debe:	eb 5c                	jmp    c000df1c <Process::Process(bool, char const*, Process*, char**)+0x152>
c000dec0:	83 ec 0c             	sub    esp,0xc
c000dec3:	68 60 12 00 00       	push   0x1260
c000dec8:	e8 ab 41 00 00       	call   c0012078 <operator new(unsigned long)>
c000decd:	83 c4 10             	add    esp,0x10
c000ded0:	89 c3                	mov    ebx,eax
c000ded2:	83 ec 08             	sub    esp,0x8
c000ded5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000ded9:	53                   	push   ebx
c000deda:	e8 fb 27 00 00       	call   c00106da <VgaText::VgaText(char const*)>
c000dedf:	83 c4 10             	add    esp,0x10
c000dee2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dee6:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c000deec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000def0:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000def6:	83 ec 0c             	sub    esp,0xc
c000def9:	50                   	push   eax
c000defa:	e8 dc 1b 00 00       	call   c000fadb <addToTerminalCycle(VgaText*)>
c000deff:	83 c4 10             	add    esp,0x10
c000df02:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000df06:	05 0c 01 00 00       	add    eax,0x10c
c000df0b:	83 ec 08             	sub    esp,0x8
c000df0e:	68 f4 05 02 c0       	push   0xc00205f4
c000df13:	50                   	push   eax
c000df14:	e8 8e 27 ff ff       	call   c00006a7 <strcpy>
c000df19:	83 c4 10             	add    esp,0x10
c000df1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000df20:	83 c0 0c             	add    eax,0xc
c000df23:	83 ec 08             	sub    esp,0x8
c000df26:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000df2a:	50                   	push   eax
c000df2b:	e8 77 27 ff ff       	call   c00006a7 <strcpy>
c000df30:	83 c4 10             	add    esp,0x10
c000df33:	83 ec 08             	sub    esp,0x8
c000df36:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000df3a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000df3e:	e8 75 fc ff ff       	call   c000dbb8 <Process::addArgs(char**)>
c000df43:	83 c4 10             	add    esp,0x10
c000df46:	90                   	nop
c000df47:	83 c4 14             	add    esp,0x14
c000df4a:	5b                   	pop    ebx
c000df4b:	5e                   	pop    esi
c000df4c:	c3                   	ret    

c000df4d <disableIRQs()>:
c000df4d:	fa                   	cli    
c000df4e:	ff 05 f4 32 02 c0    	inc    DWORD PTR ds:0xc00232f4
c000df54:	c3                   	ret    

c000df55 <getIRQNestingLevel()>:
c000df55:	a1 f4 32 02 c0       	mov    eax,ds:0xc00232f4
c000df5a:	c3                   	ret    

c000df5b <enableIRQs()>:
c000df5b:	a1 f4 32 02 c0       	mov    eax,ds:0xc00232f4
c000df60:	48                   	dec    eax
c000df61:	a3 f4 32 02 c0       	mov    ds:0xc00232f4,eax
c000df66:	75 01                	jne    c000df69 <enableIRQs()+0xe>
c000df68:	fb                   	sti    
c000df69:	c3                   	ret    

c000df6a <lockScheduler()>:
c000df6a:	eb e1                	jmp    c000df4d <disableIRQs()>

c000df6c <unlockScheduler()>:
c000df6c:	eb ed                	jmp    c000df5b <enableIRQs()>

c000df6e <userModeEntryPoint(void*)>:
c000df6e:	83 ec 0c             	sub    esp,0xc
c000df71:	e8 f6 ff ff ff       	call   c000df6c <unlockScheduler()>
c000df76:	fb                   	sti    
c000df77:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000df7c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000df7f:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c000df85:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000df89:	83 c4 0c             	add    esp,0xc
c000df8c:	e9 55 22 ff ff       	jmp    c00001e6 <goToUsermode>

c000df91 <lockStuff()>:
c000df91:	e8 b7 ff ff ff       	call   c000df4d <disableIRQs()>
c000df96:	ff 05 f0 32 02 c0    	inc    DWORD PTR ds:0xc00232f0
c000df9c:	c3                   	ret    

c000df9d <taskStartupFunction>:
c000df9d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000dfa2:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c000dfa5:	c3                   	ret    

c000dfa6 <updateTimeUsed()>:
c000dfa6:	57                   	push   edi
c000dfa7:	56                   	push   esi
c000dfa8:	53                   	push   ebx
c000dfa9:	e8 00 8e 00 00       	call   c0016dae <thisCPU()>
c000dfae:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c000dfb5:	74 49                	je     c000e000 <updateTimeUsed()+0x5a>
c000dfb7:	0f 31                	rdtsc  
c000dfb9:	89 c1                	mov    ecx,eax
c000dfbb:	a3 30 33 02 c0       	mov    ds:0xc0023330,eax
c000dfc0:	2b 0d 20 33 02 c0    	sub    ecx,DWORD PTR ds:0xc0023320
c000dfc6:	89 d3                	mov    ebx,edx
c000dfc8:	89 0d 28 33 02 c0    	mov    DWORD PTR ds:0xc0023328,ecx
c000dfce:	1b 1d 24 33 02 c0    	sbb    ebx,DWORD PTR ds:0xc0023324
c000dfd4:	a3 20 33 02 c0       	mov    ds:0xc0023320,eax
c000dfd9:	89 1d 2c 33 02 c0    	mov    DWORD PTR ds:0xc002332c,ebx
c000dfdf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000dfe4:	89 15 34 33 02 c0    	mov    DWORD PTR ds:0xc0023334,edx
c000dfea:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c000dfed:	89 15 24 33 02 c0    	mov    DWORD PTR ds:0xc0023324,edx
c000dff3:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c000dff6:	01 f1                	add    ecx,esi
c000dff8:	11 fb                	adc    ebx,edi
c000dffa:	89 48 10             	mov    DWORD PTR [eax+0x10],ecx
c000dffd:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c000e000:	5b                   	pop    ebx
c000e001:	5e                   	pop    esi
c000e002:	5f                   	pop    edi
c000e003:	c3                   	ret    

c000e004 <switchToThread(ThreadControlBlock*)>:
c000e004:	53                   	push   ebx
c000e005:	83 ec 08             	sub    esp,0x8
c000e008:	a1 f0 32 02 c0       	mov    eax,ds:0xc00232f0
c000e00d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e011:	85 c0                	test   eax,eax
c000e013:	75 30                	jne    c000e045 <switchToThread(ThreadControlBlock*)+0x41>
c000e015:	8a 43 44             	mov    al,BYTE PTR [ebx+0x44]
c000e018:	3c ff                	cmp    al,0xff
c000e01a:	74 25                	je     c000e041 <switchToThread(ThreadControlBlock*)+0x3d>
c000e01c:	0f b6 d0             	movzx  edx,al
c000e01f:	b8 84 03 00 00       	mov    eax,0x384
c000e024:	29 d0                	sub    eax,edx
c000e026:	c1 e0 10             	shl    eax,0x10
c000e029:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c000e02c:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000e02f:	e8 72 ff ff ff       	call   c000dfa6 <updateTimeUsed()>
c000e034:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000e038:	83 c4 08             	add    esp,0x8
c000e03b:	5b                   	pop    ebx
c000e03c:	e9 de 21 ff ff       	jmp    c000021f <switchToThreadASM>
c000e041:	31 c0                	xor    eax,eax
c000e043:	eb e7                	jmp    c000e02c <switchToThread(ThreadControlBlock*)+0x28>
c000e045:	c7 05 ec 32 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00232ec,0x1
c000e04f:	83 c4 08             	add    esp,0x8
c000e052:	5b                   	pop    ebx
c000e053:	c3                   	ret    

c000e054 <Semaphore::Semaphore(int)>:
c000e054:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e058:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e05c:	89 10                	mov    DWORD PTR [eax],edx
c000e05e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e062:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000e069:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e06d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e074:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e078:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000e07f:	90                   	nop
c000e080:	c3                   	ret    
c000e081:	90                   	nop

c000e082 <Mutex::Mutex()>:
c000e082:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e086:	6a 01                	push   0x1
c000e088:	50                   	push   eax
c000e089:	e8 c6 ff ff ff       	call   c000e054 <Semaphore::Semaphore(int)>
c000e08e:	83 c4 08             	add    esp,0x8
c000e091:	90                   	nop
c000e092:	c3                   	ret    
c000e093:	90                   	nop

c000e094 <Process::createThread(void (*)(void*), void*, int)>:
c000e094:	55                   	push   ebp
c000e095:	31 c9                	xor    ecx,ecx
c000e097:	57                   	push   edi
c000e098:	56                   	push   esi
c000e099:	53                   	push   ebx
c000e09a:	83 ec 1c             	sub    esp,0x1c
c000e09d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e0a1:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c000e0a8:	89 f2                	mov    edx,esi
c000e0aa:	0f b7 c2             	movzx  eax,dx
c000e0ad:	83 e2 01             	and    edx,0x1
c000e0b0:	74 14                	je     c000e0c6 <Process::createThread(void (*)(void*), void*, int)+0x32>
c000e0b2:	d1 f8                	sar    eax,1
c000e0b4:	41                   	inc    ecx
c000e0b5:	89 c2                	mov    edx,eax
c000e0b7:	83 f9 10             	cmp    ecx,0x10
c000e0ba:	75 ee                	jne    c000e0aa <Process::createThread(void (*)(void*), void*, int)+0x16>
c000e0bc:	83 c4 1c             	add    esp,0x1c
c000e0bf:	31 c0                	xor    eax,eax
c000e0c1:	5b                   	pop    ebx
c000e0c2:	5e                   	pop    esi
c000e0c3:	5f                   	pop    edi
c000e0c4:	5d                   	pop    ebp
c000e0c5:	c3                   	ret    
c000e0c6:	83 ec 08             	sub    esp,0x8
c000e0c9:	b8 01 00 00 00       	mov    eax,0x1
c000e0ce:	d3 e0                	shl    eax,cl
c000e0d0:	09 c6                	or     esi,eax
c000e0d2:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c000e0d8:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c000e0df:	8d 34 09             	lea    esi,[ecx+ecx*1]
c000e0e2:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000e0e5:	01 ce                	add    esi,ecx
c000e0e7:	89 f0                	mov    eax,esi
c000e0e9:	c1 e0 05             	shl    eax,0x5
c000e0ec:	01 c6                	add    esi,eax
c000e0ee:	8d 04 33             	lea    eax,[ebx+esi*1]
c000e0f1:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c000e0f7:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c000e0fd:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000e101:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c000e107:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c000e10d:	89 ca                	mov    edx,ecx
c000e10f:	f7 da                	neg    edx
c000e111:	c1 e2 15             	shl    edx,0x15
c000e114:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c000e11a:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c000e120:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000e124:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c000e12e:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c000e134:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000e138:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c000e13e:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c000e148:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c000e152:	8d 84 33 0c 02 00 00 	lea    eax,[ebx+esi*1+0x20c]
c000e159:	50                   	push   eax
c000e15a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e15e:	68 10 33 02 c0       	push   0xc0023310
c000e163:	e8 76 05 01 00       	call   c001e6de <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000e168:	83 c4 10             	add    esp,0x10
c000e16b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e16f:	83 c4 1c             	add    esp,0x1c
c000e172:	5b                   	pop    ebx
c000e173:	5e                   	pop    esi
c000e174:	5f                   	pop    edi
c000e175:	5d                   	pop    ebp
c000e176:	c3                   	ret    
c000e177:	90                   	nop

c000e178 <Process::createUserThread()>:
c000e178:	83 ec 0c             	sub    esp,0xc
c000e17b:	68 80 00 00 00       	push   0x80
c000e180:	6a 00                	push   0x0
c000e182:	68 6e df 00 c0       	push   0xc000df6e
c000e187:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e18b:	e8 04 ff ff ff       	call   c000e094 <Process::createThread(void (*)(void*), void*, int)>
c000e190:	83 c4 1c             	add    esp,0x1c
c000e193:	c3                   	ret    

c000e194 <setupMultitasking(void (*)())>:
c000e194:	56                   	push   esi
c000e195:	53                   	push   ebx
c000e196:	53                   	push   ebx
c000e197:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e19b:	eb 10                	jmp    c000e1ad <setupMultitasking(void (*)())+0x19>
c000e19d:	83 ec 0c             	sub    esp,0xc
c000e1a0:	68 10 33 02 c0       	push   0xc0023310
c000e1a5:	e8 24 06 01 00       	call   c001e7ce <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000e1aa:	83 c4 10             	add    esp,0x10
c000e1ad:	83 ec 0c             	sub    esp,0xc
c000e1b0:	68 10 33 02 c0       	push   0xc0023310
c000e1b5:	e8 f8 05 01 00       	call   c001e7b2 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000e1ba:	83 c4 10             	add    esp,0x10
c000e1bd:	84 c0                	test   al,al
c000e1bf:	74 dc                	je     c000e19d <setupMultitasking(void (*)())+0x9>
c000e1c1:	83 ec 0c             	sub    esp,0xc
c000e1c4:	68 3b 07 00 00       	push   0x73b
c000e1c9:	e8 aa 3e 00 00       	call   c0012078 <operator new(unsigned long)>
c000e1ce:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e1d5:	89 c3                	mov    ebx,eax
c000e1d7:	6a 00                	push   0x0
c000e1d9:	68 f8 05 02 c0       	push   0xc00205f8
c000e1de:	6a 01                	push   0x1
c000e1e0:	50                   	push   eax
c000e1e1:	e8 e4 fb ff ff       	call   c000ddca <Process::Process(bool, char const*, Process*, char**)>
c000e1e6:	83 c4 18             	add    esp,0x18
c000e1e9:	89 1d 1c 33 02 c0    	mov    DWORD PTR ds:0xc002331c,ebx
c000e1ef:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c000e1f5:	68 70 06 02 c0       	push   0xc0020670
c000e1fa:	e8 c9 e8 ff ff       	call   c000cac8 <kprintf(char const*, ...)>
c000e1ff:	58                   	pop    eax
c000e200:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c000e206:	e8 44 20 00 00       	call   c001024f <setActiveTerminal(VgaText*)>
c000e20b:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c000e213:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c000e219:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e21c:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c000e226:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c000e22c:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c000e232:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c000e23c:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c000e246:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c000e250:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c000e256:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c000e25c:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c000e266:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c000e26c:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c000e276:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000e27c:	5a                   	pop    edx
c000e27d:	59                   	pop    ecx
c000e27e:	68 f4 05 02 c0       	push   0xc00205f4
c000e283:	50                   	push   eax
c000e284:	e8 1e 24 ff ff       	call   c00006a7 <strcpy>
c000e289:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c000e290:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000e294:	83 c4 14             	add    esp,0x14
c000e297:	5b                   	pop    ebx
c000e298:	5e                   	pop    esi
c000e299:	e9 73 1f ff ff       	jmp    c0000211 <switchToThreadASMFirstTime>

c000e29e <schedule()>:
c000e29e:	a1 f0 32 02 c0       	mov    eax,ds:0xc00232f0
c000e2a3:	85 c0                	test   eax,eax
c000e2a5:	74 0b                	je     c000e2b2 <schedule()+0x14>
c000e2a7:	c7 05 ec 32 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00232ec,0x1
c000e2b1:	c3                   	ret    
c000e2b2:	53                   	push   ebx
c000e2b3:	83 ec 14             	sub    esp,0x14
c000e2b6:	68 10 33 02 c0       	push   0xc0023310
c000e2bb:	e8 f2 04 01 00       	call   c001e7b2 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000e2c0:	83 c4 10             	add    esp,0x10
c000e2c3:	84 c0                	test   al,al
c000e2c5:	75 38                	jne    c000e2ff <schedule()+0x61>
c000e2c7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e2cc:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000e2cf:	4a                   	dec    edx
c000e2d0:	74 32                	je     c000e304 <schedule()+0x66>
c000e2d2:	83 ec 0c             	sub    esp,0xc
c000e2d5:	68 10 33 02 c0       	push   0xc0023310
c000e2da:	e8 9d 05 01 00       	call   c001e87c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e2df:	c7 04 24 10 33 02 c0 	mov    DWORD PTR [esp],0xc0023310
c000e2e6:	89 c3                	mov    ebx,eax
c000e2e8:	e8 e1 04 01 00       	call   c001e7ce <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000e2ed:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c000e2f4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e2f7:	e8 08 fd ff ff       	call   c000e004 <switchToThread(ThreadControlBlock*)>
c000e2fc:	83 c4 10             	add    esp,0x10
c000e2ff:	83 c4 08             	add    esp,0x8
c000e302:	5b                   	pop    ebx
c000e303:	c3                   	ret    
c000e304:	83 ec 08             	sub    esp,0x8
c000e307:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000e30e:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c000e314:	68 10 33 02 c0       	push   0xc0023310
c000e319:	e8 c0 03 01 00       	call   c001e6de <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000e31e:	83 c4 10             	add    esp,0x10
c000e321:	eb af                	jmp    c000e2d2 <schedule()+0x34>

c000e323 <unlockStuff()>:
c000e323:	a1 f0 32 02 c0       	mov    eax,ds:0xc00232f0
c000e328:	48                   	dec    eax
c000e329:	a3 f0 32 02 c0       	mov    ds:0xc00232f0,eax
c000e32e:	75 09                	jne    c000e339 <unlockStuff()+0x16>
c000e330:	a1 ec 32 02 c0       	mov    eax,ds:0xc00232ec
c000e335:	85 c0                	test   eax,eax
c000e337:	75 05                	jne    c000e33e <unlockStuff()+0x1b>
c000e339:	e9 1d fc ff ff       	jmp    c000df5b <enableIRQs()>
c000e33e:	83 ec 0c             	sub    esp,0xc
c000e341:	c7 05 ec 32 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00232ec,0x0
c000e34b:	e8 4e ff ff ff       	call   c000e29e <schedule()>
c000e350:	83 c4 0c             	add    esp,0xc
c000e353:	e9 03 fc ff ff       	jmp    c000df5b <enableIRQs()>

c000e358 <forkProcess(regs*)>:
c000e358:	56                   	push   esi
c000e359:	53                   	push   ebx
c000e35a:	50                   	push   eax
c000e35b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e360:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e363:	66 83 b8 24 05 00 00 01 	cmp    WORD PTR [eax+0x524],0x1
c000e36b:	0f 85 3e 01 00 00    	jne    c000e4af <forkProcess(regs*)+0x157>
c000e371:	e8 1b fc ff ff       	call   c000df91 <lockStuff()>
c000e376:	83 ec 0c             	sub    esp,0xc
c000e379:	68 3b 07 00 00       	push   0x73b
c000e37e:	e8 f5 3c 00 00       	call   c0012078 <operator new(unsigned long)>
c000e383:	89 c3                	mov    ebx,eax
c000e385:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e38a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e38d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e394:	50                   	push   eax
c000e395:	83 c0 0c             	add    eax,0xc
c000e398:	50                   	push   eax
c000e399:	6a 00                	push   0x0
c000e39b:	53                   	push   ebx
c000e39c:	e8 29 fa ff ff       	call   c000ddca <Process::Process(bool, char const*, Process*, char**)>
c000e3a1:	8b b3 32 05 00 00    	mov    esi,DWORD PTR [ebx+0x532]
c000e3a7:	83 c4 20             	add    esp,0x20
c000e3aa:	85 f6                	test   esi,esi
c000e3ac:	74 16                	je     c000e3c4 <forkProcess(regs*)+0x6c>
c000e3ae:	83 ec 0c             	sub    esp,0xc
c000e3b1:	56                   	push   esi
c000e3b2:	e8 fb 2f 00 00       	call   c00113b2 <VAS::~VAS()>
c000e3b7:	59                   	pop    ecx
c000e3b8:	58                   	pop    eax
c000e3b9:	6a 10                	push   0x10
c000e3bb:	56                   	push   esi
c000e3bc:	e8 c6 3c 00 00       	call   c0012087 <operator delete(void*, unsigned long)>
c000e3c1:	83 c4 10             	add    esp,0x10
c000e3c4:	83 ec 0c             	sub    esp,0xc
c000e3c7:	66 c7 83 24 05 00 00 01 00 	mov    WORD PTR [ebx+0x524],0x1
c000e3d0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e3d5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e3d8:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c000e3de:	89 83 2e 05 00 00    	mov    DWORD PTR [ebx+0x52e],eax
c000e3e4:	6a 10                	push   0x10
c000e3e6:	e8 8d 3c 00 00       	call   c0012078 <operator new(unsigned long)>
c000e3eb:	59                   	pop    ecx
c000e3ec:	89 c6                	mov    esi,eax
c000e3ee:	58                   	pop    eax
c000e3ef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e3f4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e3f7:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c000e3fd:	56                   	push   esi
c000e3fe:	e8 d1 34 00 00       	call   c00118d4 <VAS::VAS(VAS*)>
c000e403:	89 b3 32 05 00 00    	mov    DWORD PTR [ebx+0x532],esi
c000e409:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000e40c:	8b 13                	mov    edx,DWORD PTR [ebx]
c000e40e:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c000e414:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e419:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000e41c:	89 83 44 02 00 00    	mov    DWORD PTR [ebx+0x244],eax
c000e422:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e427:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e42a:	89 83 10 02 00 00    	mov    DWORD PTR [ebx+0x210],eax
c000e430:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e435:	8a 40 44             	mov    al,BYTE PTR [eax+0x44]
c000e438:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c000e442:	88 83 50 02 00 00    	mov    BYTE PTR [ebx+0x250],al
c000e448:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c000e44e:	81 c3 0c 02 00 00    	add    ebx,0x20c
c000e454:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e459:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000e45c:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000e463:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000e466:	c7 43 0c 01 00 00 00 	mov    DWORD PTR [ebx+0xc],0x1
c000e46d:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000e474:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000e47b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e480:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c000e483:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e486:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e48b:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000e48e:	58                   	pop    eax
c000e48f:	5a                   	pop    edx
c000e490:	53                   	push   ebx
c000e491:	68 10 33 02 c0       	push   0xc0023310
c000e496:	e8 43 02 01 00       	call   c001e6de <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000e49b:	e8 83 fe ff ff       	call   c000e323 <unlockStuff()>
c000e4a0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e4a5:	83 c4 10             	add    esp,0x10
c000e4a8:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000e4ab:	5a                   	pop    edx
c000e4ac:	5b                   	pop    ebx
c000e4ad:	5e                   	pop    esi
c000e4ae:	c3                   	ret    
c000e4af:	83 ec 0c             	sub    esp,0xc
c000e4b2:	68 a4 06 02 c0       	push   0xc00206a4
c000e4b7:	e8 0c e6 ff ff       	call   c000cac8 <kprintf(char const*, ...)>
c000e4bc:	83 c4 10             	add    esp,0x10
c000e4bf:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e4c4:	eb e5                	jmp    c000e4ab <forkProcess(regs*)+0x153>

c000e4c6 <Semaphore::tryAcquire()>:
c000e4c6:	83 ec 0c             	sub    esp,0xc
c000e4c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e4cd:	e8 bf fa ff ff       	call   c000df91 <lockStuff()>
c000e4d2:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000e4d5:	3b 10                	cmp    edx,DWORD PTR [eax]
c000e4d7:	7c 0b                	jl     c000e4e4 <Semaphore::tryAcquire()+0x1e>
c000e4d9:	e8 45 fe ff ff       	call   c000e323 <unlockStuff()>
c000e4de:	31 c0                	xor    eax,eax
c000e4e0:	83 c4 0c             	add    esp,0xc
c000e4e3:	c3                   	ret    
c000e4e4:	42                   	inc    edx
c000e4e5:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e4e8:	e8 36 fe ff ff       	call   c000e323 <unlockStuff()>
c000e4ed:	b0 01                	mov    al,0x1
c000e4ef:	83 c4 0c             	add    esp,0xc
c000e4f2:	c3                   	ret    
c000e4f3:	90                   	nop

c000e4f4 <Semaphore::assertLocked(char const*)>:
c000e4f4:	83 ec 0c             	sub    esp,0xc
c000e4f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e4fb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000e4ff:	e8 8d fa ff ff       	call   c000df91 <lockStuff()>
c000e504:	8b 08                	mov    ecx,DWORD PTR [eax]
c000e506:	39 48 0c             	cmp    DWORD PTR [eax+0xc],ecx
c000e509:	7c 08                	jl     c000e513 <Semaphore::assertLocked(char const*)+0x1f>
c000e50b:	83 c4 0c             	add    esp,0xc
c000e50e:	e9 10 fe ff ff       	jmp    c000e323 <unlockStuff()>
c000e513:	83 ec 0c             	sub    esp,0xc
c000e516:	52                   	push   edx
c000e517:	e8 ca e6 ff ff       	call   c000cbe6 <panic(char const*)>
c000e51c:	83 c4 10             	add    esp,0x10
c000e51f:	83 c4 0c             	add    esp,0xc
c000e522:	e9 fc fd ff ff       	jmp    c000e323 <unlockStuff()>

c000e527 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c000e527:	83 ec 0c             	sub    esp,0xc
c000e52a:	e8 26 fa ff ff       	call   c000df55 <getIRQNestingLevel()>
c000e52f:	83 ec 08             	sub    esp,0x8
c000e532:	50                   	push   eax
c000e533:	68 d0 06 02 c0       	push   0xc00206d0
c000e538:	e8 8b e5 ff ff       	call   c000cac8 <kprintf(char const*, ...)>
c000e53d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000e541:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e546:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000e549:	e8 50 fd ff ff       	call   c000e29e <schedule()>
c000e54e:	e8 19 fa ff ff       	call   c000df6c <unlockScheduler()>
c000e553:	e8 fd f9 ff ff       	call   c000df55 <getIRQNestingLevel()>
c000e558:	5a                   	pop    edx
c000e559:	59                   	pop    ecx
c000e55a:	50                   	push   eax
c000e55b:	68 04 07 02 c0       	push   0xc0020704
c000e560:	e8 63 e5 ff ff       	call   c000cac8 <kprintf(char const*, ...)>
c000e565:	83 c4 1c             	add    esp,0x1c
c000e568:	c3                   	ret    

c000e569 <blockTask(TaskState)>:
c000e569:	83 ec 0c             	sub    esp,0xc
c000e56c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e570:	e8 f5 f9 ff ff       	call   c000df6a <lockScheduler()>
c000e575:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e57a:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000e57d:	e8 1c fd ff ff       	call   c000e29e <schedule()>
c000e582:	83 c4 0c             	add    esp,0xc
c000e585:	e9 e2 f9 ff ff       	jmp    c000df6c <unlockScheduler()>

c000e58a <waitTask(int, int*, int)>:
c000e58a:	83 ec 18             	sub    esp,0x18
c000e58d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e592:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e596:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c000e599:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000e59d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e5a2:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c000e5a5:	6a 07                	push   0x7
c000e5a7:	e8 bd ff ff ff       	call   c000e569 <blockTask(TaskState)>
c000e5ac:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e5b1:	83 c4 10             	add    esp,0x10
c000e5b4:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c000e5b7:	85 d2                	test   edx,edx
c000e5b9:	74 0a                	je     c000e5c5 <waitTask(int, int*, int)+0x3b>
c000e5bb:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c000e5be:	89 02                	mov    DWORD PTR [edx],eax
c000e5c0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e5c5:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c000e5c8:	83 c4 0c             	add    esp,0xc
c000e5cb:	c3                   	ret    

c000e5cc <nanoSleepUntil(unsigned long long)>:
c000e5cc:	83 ec 0c             	sub    esp,0xc
c000e5cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e5d3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000e5d7:	3b 05 90 3a 02 c0    	cmp    eax,DWORD PTR ds:0xc0023a90
c000e5dd:	89 d1                	mov    ecx,edx
c000e5df:	1b 0d 94 3a 02 c0    	sbb    ecx,DWORD PTR ds:0xc0023a94
c000e5e5:	73 04                	jae    c000e5eb <nanoSleepUntil(unsigned long long)+0x1f>
c000e5e7:	83 c4 0c             	add    esp,0xc
c000e5ea:	c3                   	ret    
c000e5eb:	e8 a1 f9 ff ff       	call   c000df91 <lockStuff()>
c000e5f0:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c000e5f6:	83 ec 08             	sub    esp,0x8
c000e5f9:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c000e5fc:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c000e5ff:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c000e605:	68 04 33 02 c0       	push   0xc0023304
c000e60a:	e8 cf 00 01 00       	call   c001e6de <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000e60f:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000e616:	e8 4e ff ff ff       	call   c000e569 <blockTask(TaskState)>
c000e61b:	83 c4 1c             	add    esp,0x1c
c000e61e:	e9 00 fd ff ff       	jmp    c000e323 <unlockStuff()>

c000e623 <nanoSleep(unsigned long long)>:
c000e623:	a1 90 3a 02 c0       	mov    eax,ds:0xc0023a90
c000e628:	8b 15 94 3a 02 c0    	mov    edx,DWORD PTR ds:0xc0023a94
c000e62e:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c000e632:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c000e636:	eb 94                	jmp    c000e5cc <nanoSleepUntil(unsigned long long)>

c000e638 <sleep(unsigned long long)>:
c000e638:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c000e640:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c000e645:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c000e649:	01 ca                	add    edx,ecx
c000e64b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e64f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000e653:	eb ce                	jmp    c000e623 <nanoSleep(unsigned long long)>
c000e655:	90                   	nop

c000e656 <Semaphore::acquire()>:
c000e656:	83 ec 0c             	sub    esp,0xc
c000e659:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e65d:	e8 2f f9 ff ff       	call   c000df91 <lockStuff()>
c000e662:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000e665:	3b 10                	cmp    edx,DWORD PTR [eax]
c000e667:	7d 0c                	jge    c000e675 <Semaphore::acquire()+0x1f>
c000e669:	42                   	inc    edx
c000e66a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e66d:	83 c4 0c             	add    esp,0xc
c000e670:	e9 ae fc ff ff       	jmp    c000e323 <unlockStuff()>
c000e675:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000e67b:	c7 42 20 00 00 00 00 	mov    DWORD PTR [edx+0x20],0x0
c000e682:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000e685:	85 d2                	test   edx,edx
c000e687:	74 2a                	je     c000e6b3 <Semaphore::acquire()+0x5d>
c000e689:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c000e68c:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c000e692:	89 4a 20             	mov    DWORD PTR [edx+0x20],ecx
c000e695:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000e69b:	83 ec 0c             	sub    esp,0xc
c000e69e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000e6a1:	6a 05                	push   0x5
c000e6a3:	e8 c1 fe ff ff       	call   c000e569 <blockTask(TaskState)>
c000e6a8:	83 c4 10             	add    esp,0x10
c000e6ab:	83 c4 0c             	add    esp,0xc
c000e6ae:	e9 70 fc ff ff       	jmp    c000e323 <unlockStuff()>
c000e6b3:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000e6b9:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000e6bc:	eb d7                	jmp    c000e695 <Semaphore::acquire()+0x3f>

c000e6be <execveProcess(char const*, char* const*, char* const*)>:
c000e6be:	56                   	push   esi
c000e6bf:	53                   	push   ebx
c000e6c0:	50                   	push   eax
c000e6c1:	e8 cb f8 ff ff       	call   c000df91 <lockStuff()>
c000e6c6:	83 ec 0c             	sub    esp,0xc
c000e6c9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e6ce:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e6d1:	8b b0 26 05 00 00    	mov    esi,DWORD PTR [eax+0x526]
c000e6d7:	68 3b 07 00 00       	push   0x73b
c000e6dc:	e8 97 39 00 00       	call   c0012078 <operator new(unsigned long)>
c000e6e1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e6e5:	89 c3                	mov    ebx,eax
c000e6e7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e6ec:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e6ef:	ff b0 2a 05 00 00    	push   DWORD PTR [eax+0x52a]
c000e6f5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e6f9:	53                   	push   ebx
c000e6fa:	e8 13 f5 ff ff       	call   c000dc12 <Process::Process(char const*, Process*, char**)>
c000e6ff:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e704:	83 c4 20             	add    esp,0x20
c000e707:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e70a:	85 f6                	test   esi,esi
c000e70c:	8b 00                	mov    eax,DWORD PTR [eax]
c000e70e:	89 03                	mov    DWORD PTR [ebx],eax
c000e710:	74 06                	je     c000e718 <execveProcess(char const*, char* const*, char* const*)+0x5a>
c000e712:	89 b3 26 05 00 00    	mov    DWORD PTR [ebx+0x526],esi
c000e718:	83 ec 0c             	sub    esp,0xc
c000e71b:	53                   	push   ebx
c000e71c:	e8 57 fa ff ff       	call   c000e178 <Process::createUserThread()>
c000e721:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000e728:	e8 3c fe ff ff       	call   c000e569 <blockTask(TaskState)>
c000e72d:	e8 f1 fb ff ff       	call   c000e323 <unlockStuff()>
c000e732:	e8 33 f8 ff ff       	call   c000df6a <lockScheduler()>
c000e737:	e8 62 fb ff ff       	call   c000e29e <schedule()>
c000e73c:	e8 2b f8 ff ff       	call   c000df6c <unlockScheduler()>
c000e741:	83 c4 14             	add    esp,0x14
c000e744:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e749:	5b                   	pop    ebx
c000e74a:	5e                   	pop    esi
c000e74b:	c3                   	ret    

c000e74c <taskReturned>:
c000e74c:	83 ec 0c             	sub    esp,0xc
c000e74f:	e8 18 f8 ff ff       	call   c000df6c <unlockScheduler()>
c000e754:	83 ec 08             	sub    esp,0x8
c000e757:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e75c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e75f:	83 c0 0c             	add    eax,0xc
c000e762:	50                   	push   eax
c000e763:	68 ff 05 02 c0       	push   0xc00205ff
c000e768:	e8 5b e3 ff ff       	call   c000cac8 <kprintf(char const*, ...)>
c000e76d:	83 c4 10             	add    esp,0x10
c000e770:	83 ec 0c             	sub    esp,0xc
c000e773:	6a 02                	push   0x2
c000e775:	e8 ef fd ff ff       	call   c000e569 <blockTask(TaskState)>
c000e77a:	e8 eb f7 ff ff       	call   c000df6a <lockScheduler()>
c000e77f:	e8 1a fb ff ff       	call   c000e29e <schedule()>
c000e784:	e8 e3 f7 ff ff       	call   c000df6c <unlockScheduler()>
c000e789:	83 c4 10             	add    esp,0x10
c000e78c:	eb e2                	jmp    c000e770 <taskReturned+0x24>

c000e78e <unblockTask(ThreadControlBlock*)>:
c000e78e:	53                   	push   ebx
c000e78f:	83 ec 08             	sub    esp,0x8
c000e792:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e796:	e8 cf f7 ff ff       	call   c000df6a <lockScheduler()>
c000e79b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e79e:	85 c0                	test   eax,eax
c000e7a0:	74 5c                	je     c000e7fe <unblockTask(ThreadControlBlock*)+0x70>
c000e7a2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e7a5:	48                   	dec    eax
c000e7a6:	74 31                	je     c000e7d9 <unblockTask(ThreadControlBlock*)+0x4b>
c000e7a8:	83 ec 0c             	sub    esp,0xc
c000e7ab:	68 10 33 02 c0       	push   0xc0023310
c000e7b0:	e8 c7 00 01 00       	call   c001e87c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e7b5:	83 c4 10             	add    esp,0x10
c000e7b8:	85 c0                	test   eax,eax
c000e7ba:	75 17                	jne    c000e7d3 <unblockTask(ThreadControlBlock*)+0x45>
c000e7bc:	eb 65                	jmp    c000e823 <unblockTask(ThreadControlBlock*)+0x95>
c000e7be:	83 ec 08             	sub    esp,0x8
c000e7c1:	50                   	push   eax
c000e7c2:	68 10 33 02 c0       	push   0xc0023310
c000e7c7:	e8 b8 00 01 00       	call   c001e884 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c000e7cc:	83 c4 10             	add    esp,0x10
c000e7cf:	85 c0                	test   eax,eax
c000e7d1:	74 50                	je     c000e823 <unblockTask(ThreadControlBlock*)+0x95>
c000e7d3:	39 c3                	cmp    ebx,eax
c000e7d5:	75 e7                	jne    c000e7be <unblockTask(ThreadControlBlock*)+0x30>
c000e7d7:	eb 1c                	jmp    c000e7f5 <unblockTask(ThreadControlBlock*)+0x67>
c000e7d9:	83 ec 0c             	sub    esp,0xc
c000e7dc:	68 f4 07 02 c0       	push   0xc00207f4
c000e7e1:	e8 e2 e2 ff ff       	call   c000cac8 <kprintf(char const*, ...)>
c000e7e6:	c7 04 24 80 07 02 c0 	mov    DWORD PTR [esp],0xc0020780
c000e7ed:	e8 d6 e2 ff ff       	call   c000cac8 <kprintf(char const*, ...)>
c000e7f2:	83 c4 10             	add    esp,0x10
c000e7f5:	83 c4 08             	add    esp,0x8
c000e7f8:	5b                   	pop    ebx
c000e7f9:	e9 6e f7 ff ff       	jmp    c000df6c <unlockScheduler()>
c000e7fe:	83 ec 0c             	sub    esp,0xc
c000e801:	68 38 07 02 c0       	push   0xc0020738
c000e806:	e8 bd e2 ff ff       	call   c000cac8 <kprintf(char const*, ...)>
c000e80b:	c7 04 24 80 07 02 c0 	mov    DWORD PTR [esp],0xc0020780
c000e812:	e8 b1 e2 ff ff       	call   c000cac8 <kprintf(char const*, ...)>
c000e817:	83 c4 10             	add    esp,0x10
c000e81a:	83 c4 08             	add    esp,0x8
c000e81d:	5b                   	pop    ebx
c000e81e:	e9 49 f7 ff ff       	jmp    c000df6c <unlockScheduler()>
c000e823:	83 ec 08             	sub    esp,0x8
c000e826:	53                   	push   ebx
c000e827:	68 10 33 02 c0       	push   0xc0023310
c000e82c:	e8 ad fe 00 00       	call   c001e6de <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000e831:	83 c4 10             	add    esp,0x10
c000e834:	83 c4 08             	add    esp,0x8
c000e837:	5b                   	pop    ebx
c000e838:	e9 2f f7 ff ff       	jmp    c000df6c <unlockScheduler()>

c000e83d <cleanupTerminatedTask(ThreadControlBlock*)>:
c000e83d:	55                   	push   ebp
c000e83e:	57                   	push   edi
c000e83f:	56                   	push   esi
c000e840:	53                   	push   ebx
c000e841:	83 ec 1c             	sub    esp,0x1c
c000e844:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e848:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000e84b:	8b 88 36 05 00 00    	mov    ecx,DWORD PTR [eax+0x536]
c000e851:	85 c9                	test   ecx,ecx
c000e853:	7e 20                	jle    c000e875 <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c000e855:	31 f6                	xor    esi,esi
c000e857:	83 ec 0c             	sub    esp,0xc
c000e85a:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c000e861:	46                   	inc    esi
c000e862:	e8 6c e8 ff ff       	call   c000d0d3 <free>
c000e867:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000e86a:	83 c4 10             	add    esp,0x10
c000e86d:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c000e873:	7f e2                	jg     c000e857 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c000e875:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c000e87f:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c000e884:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c000e887:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c000e88a:	d3 c0                	rol    eax,cl
c000e88c:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c000e893:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c000e896:	89 f7                	mov    edi,esi
c000e898:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c000e8a0:	0f 85 4f 01 00 00    	jne    c000e9f5 <cleanupTerminatedTask(ThreadControlBlock*)+0x1b8>
c000e8a6:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c000e8ac:	85 c0                	test   eax,eax
c000e8ae:	0f 84 aa 00 00 00    	je     c000e95e <cleanupTerminatedTask(ThreadControlBlock*)+0x121>
c000e8b4:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c000e8b7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000e8bb:	31 c9                	xor    ecx,ecx
c000e8bd:	eb 10                	jmp    c000e8cf <cleanupTerminatedTask(ThreadControlBlock*)+0x92>
c000e8bf:	41                   	inc    ecx
c000e8c0:	83 f9 10             	cmp    ecx,0x10
c000e8c3:	0f 84 95 00 00 00    	je     c000e95e <cleanupTerminatedTask(ThreadControlBlock*)+0x121>
c000e8c9:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c000e8cf:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c000e8d6:	d3 fa                	sar    edx,cl
c000e8d8:	83 e2 01             	and    edx,0x1
c000e8db:	74 e2                	je     c000e8bf <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c000e8dd:	8d 14 09             	lea    edx,[ecx+ecx*1]
c000e8e0:	01 ca                	add    edx,ecx
c000e8e2:	89 d5                	mov    ebp,edx
c000e8e4:	c1 e5 05             	shl    ebp,0x5
c000e8e7:	01 ea                	add    edx,ebp
c000e8e9:	01 d0                	add    eax,edx
c000e8eb:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c000e8f1:	83 fd 07             	cmp    ebp,0x7
c000e8f4:	75 c9                	jne    c000e8bf <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c000e8f6:	05 40 02 00 00       	add    eax,0x240
c000e8fb:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c000e8fe:	83 fd ff             	cmp    ebp,0xffffffff
c000e901:	0f 8c 01 01 00 00    	jl     c000ea08 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cb>
c000e907:	0f 84 b2 01 00 00    	je     c000eabf <cleanupTerminatedTask(ThreadControlBlock*)+0x282>
c000e90d:	85 ed                	test   ebp,ebp
c000e90f:	0f 84 99 01 00 00    	je     c000eaae <cleanupTerminatedTask(ThreadControlBlock*)+0x271>
c000e915:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c000e917:	75 a6                	jne    c000e8bf <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c000e919:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c000e91f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000e923:	01 d0                	add    eax,edx
c000e925:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000e929:	83 ec 0c             	sub    esp,0xc
c000e92c:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c000e932:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000e935:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c000e93b:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c000e942:	50                   	push   eax
c000e943:	e8 46 fe ff ff       	call   c000e78e <unblockTask(ThreadControlBlock*)>
c000e948:	83 c4 10             	add    esp,0x10
c000e94b:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c000e94e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e952:	89 f7                	mov    edi,esi
c000e954:	41                   	inc    ecx
c000e955:	83 f9 10             	cmp    ecx,0x10
c000e958:	0f 85 6b ff ff ff    	jne    c000e8c9 <cleanupTerminatedTask(ThreadControlBlock*)+0x8c>
c000e95e:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c000e964:	85 c0                	test   eax,eax
c000e966:	74 5d                	je     c000e9c5 <cleanupTerminatedTask(ThreadControlBlock*)+0x188>
c000e968:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c000e96e:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c000e974:	74 4f                	je     c000e9c5 <cleanupTerminatedTask(ThreadControlBlock*)+0x188>
c000e976:	83 ec 0c             	sub    esp,0xc
c000e979:	68 10 33 02 c0       	push   0xc0023310
c000e97e:	e8 f9 fe 00 00       	call   c001e87c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e983:	c7 04 24 10 33 02 c0 	mov    DWORD PTR [esp],0xc0023310
c000e98a:	89 c7                	mov    edi,eax
c000e98c:	e8 21 fe 00 00       	call   c001e7b2 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000e991:	83 c4 10             	add    esp,0x10
c000e994:	84 c0                	test   al,al
c000e996:	0f 84 dd 00 00 00    	je     c000ea79 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c000e99c:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000e99f:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c000e9a5:	85 d2                	test   edx,edx
c000e9a7:	74 0f                	je     c000e9b8 <cleanupTerminatedTask(ThreadControlBlock*)+0x17b>
c000e9a9:	83 ec 0c             	sub    esp,0xc
c000e9ac:	8b 02                	mov    eax,DWORD PTR [edx]
c000e9ae:	52                   	push   edx
c000e9af:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000e9b2:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000e9b5:	83 c4 10             	add    esp,0x10
c000e9b8:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c000e9c2:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000e9c5:	8b b7 32 05 00 00    	mov    esi,DWORD PTR [edi+0x532]
c000e9cb:	85 f6                	test   esi,esi
c000e9cd:	74 16                	je     c000e9e5 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a8>
c000e9cf:	83 ec 0c             	sub    esp,0xc
c000e9d2:	56                   	push   esi
c000e9d3:	e8 da 29 00 00       	call   c00113b2 <VAS::~VAS()>
c000e9d8:	58                   	pop    eax
c000e9d9:	5a                   	pop    edx
c000e9da:	6a 10                	push   0x10
c000e9dc:	56                   	push   esi
c000e9dd:	e8 a5 36 00 00       	call   c0012087 <operator delete(void*, unsigned long)>
c000e9e2:	83 c4 10             	add    esp,0x10
c000e9e5:	83 ec 0c             	sub    esp,0xc
c000e9e8:	68 1b 06 02 c0       	push   0xc002061b
c000e9ed:	e8 d6 e0 ff ff       	call   c000cac8 <kprintf(char const*, ...)>
c000e9f2:	83 c4 10             	add    esp,0x10
c000e9f5:	83 ec 08             	sub    esp,0x8
c000e9f8:	6a 63                	push   0x63
c000e9fa:	53                   	push   ebx
c000e9fb:	e8 87 36 00 00       	call   c0012087 <operator delete(void*, unsigned long)>
c000ea00:	83 c4 2c             	add    esp,0x2c
c000ea03:	5b                   	pop    ebx
c000ea04:	5e                   	pop    esi
c000ea05:	5f                   	pop    edi
c000ea06:	5d                   	pop    ebp
c000ea07:	c3                   	ret    
c000ea08:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000ea0c:	83 ec 0c             	sub    esp,0xc
c000ea0f:	68 38 08 02 c0       	push   0xc0020838
c000ea14:	e8 cd e1 ff ff       	call   c000cbe6 <panic(char const*)>
c000ea19:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c000ea1c:	83 c4 10             	add    esp,0x10
c000ea1f:	89 f7                	mov    edi,esi
c000ea21:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ea25:	e9 95 fe ff ff       	jmp    c000e8bf <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c000ea2a:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000ea30:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c000ea36:	75 1c                	jne    c000ea54 <cleanupTerminatedTask(ThreadControlBlock*)+0x217>
c000ea38:	83 ec 0c             	sub    esp,0xc
c000ea3b:	68 a0 08 02 c0       	push   0xc00208a0
c000ea40:	e8 83 e0 ff ff       	call   c000cac8 <kprintf(char const*, ...)>
c000ea45:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000ea4c:	e8 18 fb ff ff       	call   c000e569 <blockTask(TaskState)>
c000ea51:	83 c4 10             	add    esp,0x10
c000ea54:	83 ec 08             	sub    esp,0x8
c000ea57:	56                   	push   esi
c000ea58:	68 10 33 02 c0       	push   0xc0023310
c000ea5d:	e8 7c fc 00 00       	call   c001e6de <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000ea62:	c7 04 24 10 33 02 c0 	mov    DWORD PTR [esp],0xc0023310
c000ea69:	e8 0e fe 00 00       	call   c001e87c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000ea6e:	83 c4 10             	add    esp,0x10
c000ea71:	39 f8                	cmp    eax,edi
c000ea73:	0f 84 23 ff ff ff    	je     c000e99c <cleanupTerminatedTask(ThreadControlBlock*)+0x15f>
c000ea79:	83 ec 0c             	sub    esp,0xc
c000ea7c:	68 10 33 02 c0       	push   0xc0023310
c000ea81:	e8 f6 fd 00 00       	call   c001e87c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000ea86:	c7 04 24 10 33 02 c0 	mov    DWORD PTR [esp],0xc0023310
c000ea8d:	89 c6                	mov    esi,eax
c000ea8f:	e8 3a fd 00 00       	call   c001e7ce <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000ea94:	83 c4 10             	add    esp,0x10
c000ea97:	39 f3                	cmp    ebx,esi
c000ea99:	74 b9                	je     c000ea54 <cleanupTerminatedTask(ThreadControlBlock*)+0x217>
c000ea9b:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c000ea9e:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000eaa1:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c000eaa7:	75 ab                	jne    c000ea54 <cleanupTerminatedTask(ThreadControlBlock*)+0x217>
c000eaa9:	e9 7c ff ff ff       	jmp    c000ea2a <cleanupTerminatedTask(ThreadControlBlock*)+0x1ed>
c000eaae:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000eab2:	83 ec 0c             	sub    esp,0xc
c000eab5:	68 6c 08 02 c0       	push   0xc002086c
c000eaba:	e9 55 ff ff ff       	jmp    c000ea14 <cleanupTerminatedTask(ThreadControlBlock*)+0x1d7>
c000eabf:	8b 36                	mov    esi,DWORD PTR [esi]
c000eac1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000eac5:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c000eac8:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000eacb:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c000ead1:	01 d7                	add    edi,edx
c000ead3:	89 f8                	mov    eax,edi
c000ead5:	e9 4b fe ff ff       	jmp    c000e925 <cleanupTerminatedTask(ThreadControlBlock*)+0xe8>

c000eada <cleanerTaskFunction(void*)>:
c000eada:	53                   	push   ebx
c000eadb:	83 ec 08             	sub    esp,0x8
c000eade:	e8 89 f4 ff ff       	call   c000df6c <unlockScheduler()>
c000eae3:	e8 82 f4 ff ff       	call   c000df6a <lockScheduler()>
c000eae8:	80 3d d4 32 02 c0 00 	cmp    BYTE PTR ds:0xc00232d4,0x0
c000eaef:	75 72                	jne    c000eb63 <cleanerTaskFunction(void*)+0x89>
c000eaf1:	83 ec 0c             	sub    esp,0xc
c000eaf4:	6a 02                	push   0x2
c000eaf6:	e8 2c fa ff ff       	call   c000e527 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c000eafb:	83 c4 10             	add    esp,0x10
c000eafe:	c6 05 d4 32 02 c0 00 	mov    BYTE PTR ds:0xc00232d4,0x0
c000eb05:	e8 87 f4 ff ff       	call   c000df91 <lockStuff()>
c000eb0a:	e8 5b f4 ff ff       	call   c000df6a <lockScheduler()>
c000eb0f:	83 ec 0c             	sub    esp,0xc
c000eb12:	68 f8 32 02 c0       	push   0xc00232f8
c000eb17:	e8 96 fc 00 00       	call   c001e7b2 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000eb1c:	83 c4 10             	add    esp,0x10
c000eb1f:	84 c0                	test   al,al
c000eb21:	75 28                	jne    c000eb4b <cleanerTaskFunction(void*)+0x71>
c000eb23:	83 ec 0c             	sub    esp,0xc
c000eb26:	68 f8 32 02 c0       	push   0xc00232f8
c000eb2b:	e8 4c fd 00 00       	call   c001e87c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000eb30:	c7 04 24 f8 32 02 c0 	mov    DWORD PTR [esp],0xc00232f8
c000eb37:	89 c3                	mov    ebx,eax
c000eb39:	e8 90 fc 00 00       	call   c001e7ce <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000eb3e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eb41:	e8 f7 fc ff ff       	call   c000e83d <cleanupTerminatedTask(ThreadControlBlock*)>
c000eb46:	83 c4 10             	add    esp,0x10
c000eb49:	eb c4                	jmp    c000eb0f <cleanerTaskFunction(void*)+0x35>
c000eb4b:	e8 1c f4 ff ff       	call   c000df6c <unlockScheduler()>
c000eb50:	e8 ce f7 ff ff       	call   c000e323 <unlockStuff()>
c000eb55:	e8 10 f4 ff ff       	call   c000df6a <lockScheduler()>
c000eb5a:	80 3d d4 32 02 c0 00 	cmp    BYTE PTR ds:0xc00232d4,0x0
c000eb61:	74 8e                	je     c000eaf1 <cleanerTaskFunction(void*)+0x17>
c000eb63:	e8 04 f4 ff ff       	call   c000df6c <unlockScheduler()>
c000eb68:	eb 94                	jmp    c000eafe <cleanerTaskFunction(void*)+0x24>

c000eb6a <terminateTask(int)>:
c000eb6a:	83 ec 0c             	sub    esp,0xc
c000eb6d:	e8 1f f4 ff ff       	call   c000df91 <lockStuff()>
c000eb72:	e8 f3 f3 ff ff       	call   c000df6a <lockScheduler()>
c000eb77:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000eb7b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000eb80:	83 ec 08             	sub    esp,0x8
c000eb83:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c000eb86:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000eb8b:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c000eb8e:	50                   	push   eax
c000eb8f:	68 f8 32 02 c0       	push   0xc00232f8
c000eb94:	e8 45 fb 00 00       	call   c001e6de <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000eb99:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000eb9e:	83 c4 10             	add    esp,0x10
c000eba1:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c000eba8:	a1 d0 32 02 c0       	mov    eax,ds:0xc00232d0
c000ebad:	85 c0                	test   eax,eax
c000ebaf:	74 2e                	je     c000ebdf <terminateTask(int)+0x75>
c000ebb1:	83 ec 0c             	sub    esp,0xc
c000ebb4:	c6 05 d4 32 02 c0 01 	mov    BYTE PTR ds:0xc00232d4,0x1
c000ebbb:	50                   	push   eax
c000ebbc:	e8 cd fb ff ff       	call   c000e78e <unblockTask(ThreadControlBlock*)>
c000ebc1:	83 c4 10             	add    esp,0x10
c000ebc4:	e8 a3 f3 ff ff       	call   c000df6c <unlockScheduler()>
c000ebc9:	e8 55 f7 ff ff       	call   c000e323 <unlockStuff()>
c000ebce:	e8 97 f3 ff ff       	call   c000df6a <lockScheduler()>
c000ebd3:	e8 c6 f6 ff ff       	call   c000e29e <schedule()>
c000ebd8:	e8 8f f3 ff ff       	call   c000df6c <unlockScheduler()>
c000ebdd:	eb ef                	jmp    c000ebce <terminateTask(int)+0x64>
c000ebdf:	83 ec 0c             	sub    esp,0xc
c000ebe2:	68 29 06 02 c0       	push   0xc0020629
c000ebe7:	e8 dc de ff ff       	call   c000cac8 <kprintf(char const*, ...)>
c000ebec:	83 c4 10             	add    esp,0x10
c000ebef:	eb d3                	jmp    c000ebc4 <terminateTask(int)+0x5a>
c000ebf1:	90                   	nop

c000ebf2 <Semaphore::release()>:
c000ebf2:	83 ec 0c             	sub    esp,0xc
c000ebf5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ebf9:	e8 93 f3 ff ff       	call   c000df91 <lockStuff()>
c000ebfe:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000ec01:	85 d2                	test   edx,edx
c000ec03:	74 1a                	je     c000ec1f <Semaphore::release()+0x2d>
c000ec05:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c000ec08:	83 ec 0c             	sub    esp,0xc
c000ec0b:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000ec0e:	52                   	push   edx
c000ec0f:	e8 7a fb ff ff       	call   c000e78e <unblockTask(ThreadControlBlock*)>
c000ec14:	83 c4 10             	add    esp,0x10
c000ec17:	83 c4 0c             	add    esp,0xc
c000ec1a:	e9 04 f7 ff ff       	jmp    c000e323 <unlockStuff()>
c000ec1f:	ff 48 0c             	dec    DWORD PTR [eax+0xc]
c000ec22:	83 c4 0c             	add    esp,0xc
c000ec25:	e9 f9 f6 ff ff       	jmp    c000e323 <unlockStuff()>

c000ec2a <__static_initialization_and_destruction_0(int, int)>:
c000ec2a:	83 ec 0c             	sub    esp,0xc
c000ec2d:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000ec32:	0f 85 88 00 00 00    	jne    c000ecc0 <__static_initialization_and_destruction_0(int, int)+0x96>
c000ec38:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000ec40:	75 7e                	jne    c000ecc0 <__static_initialization_and_destruction_0(int, int)+0x96>
c000ec42:	83 ec 0c             	sub    esp,0xc
c000ec45:	68 10 33 02 c0       	push   0xc0023310
c000ec4a:	e8 37 fa 00 00       	call   c001e686 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c000ec4f:	83 c4 10             	add    esp,0x10
c000ec52:	83 ec 04             	sub    esp,0x4
c000ec55:	68 ec 24 02 c0       	push   0xc00224ec
c000ec5a:	68 10 33 02 c0       	push   0xc0023310
c000ec5f:	68 46 e6 01 c0       	push   0xc001e646
c000ec64:	e8 9a 33 00 00       	call   c0012003 <__cxa_atexit>
c000ec69:	83 c4 10             	add    esp,0x10
c000ec6c:	83 ec 0c             	sub    esp,0xc
c000ec6f:	68 04 33 02 c0       	push   0xc0023304
c000ec74:	e8 0d fa 00 00       	call   c001e686 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c000ec79:	83 c4 10             	add    esp,0x10
c000ec7c:	83 ec 04             	sub    esp,0x4
c000ec7f:	68 ec 24 02 c0       	push   0xc00224ec
c000ec84:	68 04 33 02 c0       	push   0xc0023304
c000ec89:	68 46 e6 01 c0       	push   0xc001e646
c000ec8e:	e8 70 33 00 00       	call   c0012003 <__cxa_atexit>
c000ec93:	83 c4 10             	add    esp,0x10
c000ec96:	83 ec 0c             	sub    esp,0xc
c000ec99:	68 f8 32 02 c0       	push   0xc00232f8
c000ec9e:	e8 e3 f9 00 00       	call   c001e686 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c000eca3:	83 c4 10             	add    esp,0x10
c000eca6:	83 ec 04             	sub    esp,0x4
c000eca9:	68 ec 24 02 c0       	push   0xc00224ec
c000ecae:	68 f8 32 02 c0       	push   0xc00232f8
c000ecb3:	68 46 e6 01 c0       	push   0xc001e646
c000ecb8:	e8 46 33 00 00       	call   c0012003 <__cxa_atexit>
c000ecbd:	83 c4 10             	add    esp,0x10
c000ecc0:	90                   	nop
c000ecc1:	83 c4 0c             	add    esp,0xc
c000ecc4:	c3                   	ret    

c000ecc5 <_GLOBAL__sub_I_kernelProcess>:
c000ecc5:	83 ec 0c             	sub    esp,0xc
c000ecc8:	83 ec 08             	sub    esp,0x8
c000eccb:	68 ff ff 00 00       	push   0xffff
c000ecd0:	6a 01                	push   0x1
c000ecd2:	e8 53 ff ff ff       	call   c000ec2a <__static_initialization_and_destruction_0(int, int)>
c000ecd7:	83 c4 10             	add    esp,0x10
c000ecda:	83 c4 0c             	add    esp,0xc
c000ecdd:	c3                   	ret    

c000ecde <sysCallGetPID(regs*)>:
c000ecde:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ece3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000ece6:	8b 00                	mov    eax,DWORD PTR [eax]
c000ece8:	99                   	cdq    
c000ece9:	c3                   	ret    

c000ecea <sysCallSeekDir(regs*)>:
c000ecea:	31 c0                	xor    eax,eax
c000ecec:	31 d2                	xor    edx,edx
c000ecee:	c3                   	ret    

c000ecef <sysCallTellDir(regs*)>:
c000ecef:	31 c0                	xor    eax,eax
c000ecf1:	31 d2                	xor    edx,edx
c000ecf3:	c3                   	ret    

c000ecf4 <sysCallVerify(regs*)>:
c000ecf4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ecf8:	31 d2                	xor    edx,edx
c000ecfa:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000ecfd:	c3                   	ret    

c000ecfe <sysCallGetArgc(regs*)>:
c000ecfe:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ed03:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000ed06:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c000ed0c:	99                   	cdq    
c000ed0d:	c3                   	ret    

c000ed0e <sysFormatDisk(regs*)>:
c000ed0e:	56                   	push   esi
c000ed0f:	53                   	push   ebx
c000ed10:	53                   	push   ebx
c000ed11:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ed15:	8b 1d 80 35 02 c0    	mov    ebx,DWORD PTR ds:0xc0023580
c000ed1b:	eb 25                	jmp    c000ed42 <sysFormatDisk(regs*)+0x34>
c000ed1d:	83 ec 0c             	sub    esp,0xc
c000ed20:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c000ed23:	8b 13                	mov    edx,DWORD PTR [ebx]
c000ed25:	ff 76 28             	push   DWORD PTR [esi+0x28]
c000ed28:	ff 76 24             	push   DWORD PTR [esi+0x24]
c000ed2b:	50                   	push   eax
c000ed2c:	ff 34 85 20 3a 02 c0 	push   DWORD PTR [eax*4-0x3ffdc5e0]
c000ed33:	53                   	push   ebx
c000ed34:	ff 52 48             	call   DWORD PTR [edx+0x48]
c000ed37:	83 c4 20             	add    esp,0x20
c000ed3a:	83 f8 08             	cmp    eax,0x8
c000ed3d:	75 12                	jne    c000ed51 <sysFormatDisk(regs*)+0x43>
c000ed3f:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000ed42:	85 db                	test   ebx,ebx
c000ed44:	75 d7                	jne    c000ed1d <sysFormatDisk(regs*)+0xf>
c000ed46:	59                   	pop    ecx
c000ed47:	b8 03 00 00 00       	mov    eax,0x3
c000ed4c:	31 d2                	xor    edx,edx
c000ed4e:	5b                   	pop    ebx
c000ed4f:	5e                   	pop    esi
c000ed50:	c3                   	ret    
c000ed51:	85 c0                	test   eax,eax
c000ed53:	74 1b                	je     c000ed70 <sysFormatDisk(regs*)+0x62>
c000ed55:	83 f8 09             	cmp    eax,0x9
c000ed58:	74 0b                	je     c000ed65 <sysFormatDisk(regs*)+0x57>
c000ed5a:	59                   	pop    ecx
c000ed5b:	b8 02 00 00 00       	mov    eax,0x2
c000ed60:	31 d2                	xor    edx,edx
c000ed62:	5b                   	pop    ebx
c000ed63:	5e                   	pop    esi
c000ed64:	c3                   	ret    
c000ed65:	59                   	pop    ecx
c000ed66:	b8 01 00 00 00       	mov    eax,0x1
c000ed6b:	31 d2                	xor    edx,edx
c000ed6d:	5b                   	pop    ebx
c000ed6e:	5e                   	pop    esi
c000ed6f:	c3                   	ret    
c000ed70:	59                   	pop    ecx
c000ed71:	31 c0                	xor    eax,eax
c000ed73:	31 d2                	xor    edx,edx
c000ed75:	5b                   	pop    ebx
c000ed76:	5e                   	pop    esi
c000ed77:	c3                   	ret    

c000ed78 <sysSetDiskVolumeLabel(regs*)>:
c000ed78:	56                   	push   esi
c000ed79:	53                   	push   ebx
c000ed7a:	53                   	push   ebx
c000ed7b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ed7f:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000ed82:	83 f8 19             	cmp    eax,0x19
c000ed85:	77 29                	ja     c000edb0 <sysSetDiskVolumeLabel(regs*)+0x38>
c000ed87:	8b 0c 85 20 3a 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdc5e0]
c000ed8e:	85 c9                	test   ecx,ecx
c000ed90:	74 1e                	je     c000edb0 <sysSetDiskVolumeLabel(regs*)+0x38>
c000ed92:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c000ed95:	85 d2                	test   edx,edx
c000ed97:	74 17                	je     c000edb0 <sysSetDiskVolumeLabel(regs*)+0x38>
c000ed99:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c000ed9f:	8b 33                	mov    esi,DWORD PTR [ebx]
c000eda1:	52                   	push   edx
c000eda2:	50                   	push   eax
c000eda3:	51                   	push   ecx
c000eda4:	53                   	push   ebx
c000eda5:	ff 56 58             	call   DWORD PTR [esi+0x58]
c000eda8:	83 c4 10             	add    esp,0x10
c000edab:	99                   	cdq    
c000edac:	59                   	pop    ecx
c000edad:	5b                   	pop    ebx
c000edae:	5e                   	pop    esi
c000edaf:	c3                   	ret    
c000edb0:	59                   	pop    ecx
c000edb1:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c000edb6:	ba ff ff ff ff       	mov    edx,0xffffffff
c000edbb:	5b                   	pop    ebx
c000edbc:	5e                   	pop    esi
c000edbd:	c3                   	ret    

c000edbe <sysGetDiskVolumeLabel(regs*)>:
c000edbe:	57                   	push   edi
c000edbf:	56                   	push   esi
c000edc0:	53                   	push   ebx
c000edc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000edc5:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c000edc8:	83 fa 19             	cmp    edx,0x19
c000edcb:	77 34                	ja     c000ee01 <sysGetDiskVolumeLabel(regs*)+0x43>
c000edcd:	8b 0c 95 20 3a 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffdc5e0]
c000edd4:	85 c9                	test   ecx,ecx
c000edd6:	74 29                	je     c000ee01 <sysGetDiskVolumeLabel(regs*)+0x43>
c000edd8:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c000eddb:	85 db                	test   ebx,ebx
c000eddd:	74 22                	je     c000ee01 <sysGetDiskVolumeLabel(regs*)+0x43>
c000eddf:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000ede2:	85 c0                	test   eax,eax
c000ede4:	74 1b                	je     c000ee01 <sysGetDiskVolumeLabel(regs*)+0x43>
c000ede6:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c000edec:	83 ec 0c             	sub    esp,0xc
c000edef:	8b 3e                	mov    edi,DWORD PTR [esi]
c000edf1:	50                   	push   eax
c000edf2:	53                   	push   ebx
c000edf3:	52                   	push   edx
c000edf4:	51                   	push   ecx
c000edf5:	56                   	push   esi
c000edf6:	ff 57 54             	call   DWORD PTR [edi+0x54]
c000edf9:	83 c4 20             	add    esp,0x20
c000edfc:	99                   	cdq    
c000edfd:	5b                   	pop    ebx
c000edfe:	5e                   	pop    esi
c000edff:	5f                   	pop    edi
c000ee00:	c3                   	ret    
c000ee01:	5b                   	pop    ebx
c000ee02:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c000ee07:	ba ff ff ff ff       	mov    edx,0xffffffff
c000ee0c:	5e                   	pop    esi
c000ee0d:	5f                   	pop    edi
c000ee0e:	c3                   	ret    

c000ee0f <sysShutdown(regs*)>:
c000ee0f:	83 ec 0c             	sub    esp,0xc
c000ee12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ee16:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000ee19:	85 c0                	test   eax,eax
c000ee1b:	74 24                	je     c000ee41 <sysShutdown(regs*)+0x32>
c000ee1d:	48                   	dec    eax
c000ee1e:	74 0e                	je     c000ee2e <sysShutdown(regs*)+0x1f>
c000ee20:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ee25:	ba ff ff ff ff       	mov    edx,0xffffffff
c000ee2a:	83 c4 0c             	add    esp,0xc
c000ee2d:	c3                   	ret    
c000ee2e:	a1 a0 3a 02 c0       	mov    eax,ds:0xc0023aa0
c000ee33:	85 c0                	test   eax,eax
c000ee35:	74 02                	je     c000ee39 <sysShutdown(regs*)+0x2a>
c000ee37:	ff d0                	call   eax
c000ee39:	31 c0                	xor    eax,eax
c000ee3b:	31 d2                	xor    edx,edx
c000ee3d:	83 c4 0c             	add    esp,0xc
c000ee40:	c3                   	ret    
c000ee41:	a1 c8 30 02 c0       	mov    eax,ds:0xc00230c8
c000ee46:	8b 10                	mov    edx,DWORD PTR [eax]
c000ee48:	6a 00                	push   0x0
c000ee4a:	6a 00                	push   0x0
c000ee4c:	6a 00                	push   0x0
c000ee4e:	50                   	push   eax
c000ee4f:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000ee52:	83 c4 10             	add    esp,0x10
c000ee55:	eb c9                	jmp    c000ee20 <sysShutdown(regs*)+0x11>

c000ee57 <sysCallGetCwd(regs*)>:
c000ee57:	83 ec 10             	sub    esp,0x10
c000ee5a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ee5e:	ff 70 28             	push   DWORD PTR [eax+0x28]
c000ee61:	ff 70 20             	push   DWORD PTR [eax+0x20]
c000ee64:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ee69:	ff 70 40             	push   DWORD PTR [eax+0x40]
c000ee6c:	e8 a6 39 00 00       	call   c0012817 <getcwd(Process*, char*, int)>
c000ee71:	83 c4 1c             	add    esp,0x1c
c000ee74:	99                   	cdq    
c000ee75:	c3                   	ret    

c000ee76 <sysCallSetCwd(regs*)>:
c000ee76:	83 ec 14             	sub    esp,0x14
c000ee79:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ee7d:	ff 70 20             	push   DWORD PTR [eax+0x20]
c000ee80:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ee85:	ff 70 40             	push   DWORD PTR [eax+0x40]
c000ee88:	e8 b4 39 00 00       	call   c0012841 <setcwd(Process*, char*)>
c000ee8d:	83 c4 1c             	add    esp,0x1c
c000ee90:	99                   	cdq    
c000ee91:	c3                   	ret    

c000ee92 <sysCallRealpath(regs*)>:
c000ee92:	83 ec 0c             	sub    esp,0xc
c000ee95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ee99:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000ee9c:	85 d2                	test   edx,edx
c000ee9e:	74 07                	je     c000eea7 <sysCallRealpath(regs*)+0x15>
c000eea0:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c000eea3:	85 c0                	test   eax,eax
c000eea5:	75 0b                	jne    c000eeb2 <sysCallRealpath(regs*)+0x20>
c000eea7:	b8 01 00 00 00       	mov    eax,0x1
c000eeac:	31 d2                	xor    edx,edx
c000eeae:	83 c4 0c             	add    esp,0xc
c000eeb1:	c3                   	ret    
c000eeb2:	51                   	push   ecx
c000eeb3:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c000eeb9:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c000eebc:	81 c1 0c 01 00 00    	add    ecx,0x10c
c000eec2:	51                   	push   ecx
c000eec3:	52                   	push   edx
c000eec4:	50                   	push   eax
c000eec5:	e8 32 34 00 00       	call   c00122fc <standardiseFiles(char*, char const*, char const*)>
c000eeca:	83 c4 10             	add    esp,0x10
c000eecd:	31 c0                	xor    eax,eax
c000eecf:	31 d2                	xor    edx,edx
c000eed1:	83 c4 0c             	add    esp,0xc
c000eed4:	c3                   	ret    

c000eed5 <sysCallOpen(regs*)>:
c000eed5:	56                   	push   esi
c000eed6:	53                   	push   ebx
c000eed7:	81 ec 04 01 00 00    	sub    esp,0x104
c000eedd:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c000eee4:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c000eee7:	85 d2                	test   edx,edx
c000eee9:	0f 84 c3 00 00 00    	je     c000efb2 <sysCallOpen(regs*)+0xdd>
c000eeef:	50                   	push   eax
c000eef0:	68 6f 09 02 c0       	push   0xc002096f
c000eef5:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000eef8:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000eefc:	56                   	push   esi
c000eefd:	e8 fa 33 00 00       	call   c00122fc <standardiseFiles(char*, char const*, char const*)>
c000ef02:	89 34 24             	mov    DWORD PTR [esp],esi
c000ef05:	e8 1b 17 ff ff       	call   c0000625 <strlen>
c000ef0a:	83 c4 10             	add    esp,0x10
c000ef0d:	48                   	dec    eax
c000ef0e:	74 1d                	je     c000ef2d <sysCallOpen(regs*)+0x58>
c000ef10:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c000ef13:	eb 0f                	jmp    c000ef24 <sysCallOpen(regs*)+0x4f>
c000ef15:	80 fa 3a             	cmp    dl,0x3a
c000ef18:	74 0f                	je     c000ef29 <sysCallOpen(regs*)+0x54>
c000ef1a:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c000ef1e:	48                   	dec    eax
c000ef1f:	74 0c                	je     c000ef2d <sysCallOpen(regs*)+0x58>
c000ef21:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c000ef24:	80 fa 2e             	cmp    dl,0x2e
c000ef27:	75 ec                	jne    c000ef15 <sysCallOpen(regs*)+0x40>
c000ef29:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c000ef2d:	83 ec 0c             	sub    esp,0xc
c000ef30:	68 14 01 00 00       	push   0x114
c000ef35:	e8 3e 31 00 00       	call   c0012078 <operator new(unsigned long)>
c000ef3a:	83 c4 0c             	add    esp,0xc
c000ef3d:	89 c6                	mov    esi,eax
c000ef3f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ef44:	ff 70 40             	push   DWORD PTR [eax+0x40]
c000ef47:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000ef4a:	56                   	push   esi
c000ef4b:	e8 56 35 00 00       	call   c00124a6 <File::File(char const*, Process*)>
c000ef50:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000ef53:	83 c4 10             	add    esp,0x10
c000ef56:	0f b6 d0             	movzx  edx,al
c000ef59:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c000ef5c:	89 c2                	mov    edx,eax
c000ef5e:	83 e2 01             	and    edx,0x1
c000ef61:	a8 02                	test   al,0x2
c000ef63:	74 03                	je     c000ef68 <sysCallOpen(regs*)+0x93>
c000ef65:	83 ca 02             	or     edx,0x2
c000ef68:	a8 04                	test   al,0x4
c000ef6a:	74 03                	je     c000ef6f <sysCallOpen(regs*)+0x9a>
c000ef6c:	83 ca 04             	or     edx,0x4
c000ef6f:	a8 08                	test   al,0x8
c000ef71:	74 03                	je     c000ef76 <sysCallOpen(regs*)+0xa1>
c000ef73:	83 ca 0a             	or     edx,0xa
c000ef76:	a8 10                	test   al,0x10
c000ef78:	74 03                	je     c000ef7d <sysCallOpen(regs*)+0xa8>
c000ef7a:	83 ca 12             	or     edx,0x12
c000ef7d:	83 ec 08             	sub    esp,0x8
c000ef80:	52                   	push   edx
c000ef81:	56                   	push   esi
c000ef82:	e8 83 35 00 00       	call   c001250a <File::open(FileOpenMode)>
c000ef87:	83 c4 10             	add    esp,0x10
c000ef8a:	85 c0                	test   eax,eax
c000ef8c:	75 24                	jne    c000efb2 <sysCallOpen(regs*)+0xdd>
c000ef8e:	83 ec 0c             	sub    esp,0xc
c000ef91:	56                   	push   esi
c000ef92:	e8 05 1d 00 00       	call   c0010c9c <UnixFile::getFileDescriptor()>
c000ef97:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c000ef9a:	83 c4 10             	add    esp,0x10
c000ef9d:	89 02                	mov    DWORD PTR [edx],eax
c000ef9f:	c1 f8 1f             	sar    eax,0x1f
c000efa2:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000efa5:	81 c4 04 01 00 00    	add    esp,0x104
c000efab:	31 c0                	xor    eax,eax
c000efad:	31 d2                	xor    edx,edx
c000efaf:	5b                   	pop    ebx
c000efb0:	5e                   	pop    esi
c000efb1:	c3                   	ret    
c000efb2:	81 c4 04 01 00 00    	add    esp,0x104
c000efb8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000efbd:	ba ff ff ff ff       	mov    edx,0xffffffff
c000efc2:	5b                   	pop    ebx
c000efc3:	5e                   	pop    esi
c000efc4:	c3                   	ret    

c000efc5 <sysCallReadDir(regs*)>:
c000efc5:	53                   	push   ebx
c000efc6:	83 ec 18             	sub    esp,0x18
c000efc9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000efcd:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000efd0:	83 f8 02             	cmp    eax,0x2
c000efd3:	77 0c                	ja     c000efe1 <sysCallReadDir(regs*)+0x1c>
c000efd5:	b8 01 00 00 00       	mov    eax,0x1
c000efda:	31 d2                	xor    edx,edx
c000efdc:	83 c4 18             	add    esp,0x18
c000efdf:	5b                   	pop    ebx
c000efe0:	c3                   	ret    
c000efe1:	83 ec 0c             	sub    esp,0xc
c000efe4:	50                   	push   eax
c000efe5:	e8 17 1e 00 00       	call   c0010e01 <getFromFileDescriptor(int)>
c000efea:	83 c4 10             	add    esp,0x10
c000efed:	85 c0                	test   eax,eax
c000efef:	74 37                	je     c000f028 <sysCallReadDir(regs*)+0x63>
c000eff1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000eff9:	83 ec 0c             	sub    esp,0xc
c000effc:	8b 10                	mov    edx,DWORD PTR [eax]
c000effe:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000f002:	51                   	push   ecx
c000f003:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000f006:	6a 00                	push   0x0
c000f008:	68 10 01 00 00       	push   0x110
c000f00d:	50                   	push   eax
c000f00e:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000f011:	83 c4 20             	add    esp,0x20
c000f014:	85 c0                	test   eax,eax
c000f016:	74 0c                	je     c000f024 <sysCallReadDir(regs*)+0x5f>
c000f018:	83 f8 07             	cmp    eax,0x7
c000f01b:	74 b8                	je     c000efd5 <sysCallReadDir(regs*)+0x10>
c000f01d:	b8 02 00 00 00       	mov    eax,0x2
c000f022:	eb b6                	jmp    c000efda <sysCallReadDir(regs*)+0x15>
c000f024:	31 c0                	xor    eax,eax
c000f026:	eb b2                	jmp    c000efda <sysCallReadDir(regs*)+0x15>
c000f028:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f02d:	ba ff ff ff ff       	mov    edx,0xffffffff
c000f032:	eb a8                	jmp    c000efdc <sysCallReadDir(regs*)+0x17>

c000f034 <sysCallIsATTY(regs*)>:
c000f034:	83 ec 0c             	sub    esp,0xc
c000f037:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f03b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000f03e:	83 f8 02             	cmp    eax,0x2
c000f041:	77 26                	ja     c000f069 <sysCallIsATTY(regs*)+0x35>
c000f043:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f048:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f04b:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000f051:	85 c0                	test   eax,eax
c000f053:	74 24                	je     c000f079 <sysCallIsATTY(regs*)+0x45>
c000f055:	83 ec 0c             	sub    esp,0xc
c000f058:	8b 10                	mov    edx,DWORD PTR [eax]
c000f05a:	50                   	push   eax
c000f05b:	ff 12                	call   DWORD PTR [edx]
c000f05d:	31 d2                	xor    edx,edx
c000f05f:	0f b6 c0             	movzx  eax,al
c000f062:	83 c4 10             	add    esp,0x10
c000f065:	83 c4 0c             	add    esp,0xc
c000f068:	c3                   	ret    
c000f069:	83 ec 0c             	sub    esp,0xc
c000f06c:	50                   	push   eax
c000f06d:	e8 8f 1d 00 00       	call   c0010e01 <getFromFileDescriptor(int)>
c000f072:	83 c4 10             	add    esp,0x10
c000f075:	85 c0                	test   eax,eax
c000f077:	75 dc                	jne    c000f055 <sysCallIsATTY(regs*)+0x21>
c000f079:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f07e:	ba ff ff ff ff       	mov    edx,0xffffffff
c000f083:	83 c4 0c             	add    esp,0xc
c000f086:	c3                   	ret    

c000f087 <sysCallSeek(regs*)>:
c000f087:	53                   	push   ebx
c000f088:	83 ec 08             	sub    esp,0x8
c000f08b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f08f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c000f092:	83 f8 02             	cmp    eax,0x2
c000f095:	76 32                	jbe    c000f0c9 <sysCallSeek(regs*)+0x42>
c000f097:	83 ec 0c             	sub    esp,0xc
c000f09a:	50                   	push   eax
c000f09b:	e8 61 1d 00 00       	call   c0010e01 <getFromFileDescriptor(int)>
c000f0a0:	83 c4 0c             	add    esp,0xc
c000f0a3:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c000f0a6:	31 db                	xor    ebx,ebx
c000f0a8:	53                   	push   ebx
c000f0a9:	51                   	push   ecx
c000f0aa:	50                   	push   eax
c000f0ab:	e8 18 35 00 00       	call   c00125c8 <File::seek(unsigned long long)>
c000f0b0:	83 c4 10             	add    esp,0x10
c000f0b3:	85 c0                	test   eax,eax
c000f0b5:	0f 95 c0             	setne  al
c000f0b8:	31 d2                	xor    edx,edx
c000f0ba:	0f b6 c0             	movzx  eax,al
c000f0bd:	f7 d8                	neg    eax
c000f0bf:	83 d2 00             	adc    edx,0x0
c000f0c2:	83 c4 08             	add    esp,0x8
c000f0c5:	f7 da                	neg    edx
c000f0c7:	5b                   	pop    ebx
c000f0c8:	c3                   	ret    
c000f0c9:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f0ce:	ba ff ff ff ff       	mov    edx,0xffffffff
c000f0d3:	83 c4 08             	add    esp,0x8
c000f0d6:	5b                   	pop    ebx
c000f0d7:	c3                   	ret    

c000f0d8 <sysCallTell(regs*)>:
c000f0d8:	53                   	push   ebx
c000f0d9:	83 ec 08             	sub    esp,0x8
c000f0dc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f0e0:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c000f0e3:	83 f8 02             	cmp    eax,0x2
c000f0e6:	76 2d                	jbe    c000f115 <sysCallTell(regs*)+0x3d>
c000f0e8:	83 ec 0c             	sub    esp,0xc
c000f0eb:	50                   	push   eax
c000f0ec:	e8 10 1d 00 00       	call   c0010e01 <getFromFileDescriptor(int)>
c000f0f1:	5a                   	pop    edx
c000f0f2:	59                   	pop    ecx
c000f0f3:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000f0f6:	50                   	push   eax
c000f0f7:	e8 22 35 00 00       	call   c001261e <File::tell(unsigned long long*)>
c000f0fc:	83 c4 10             	add    esp,0x10
c000f0ff:	85 c0                	test   eax,eax
c000f101:	0f 95 c0             	setne  al
c000f104:	31 d2                	xor    edx,edx
c000f106:	0f b6 c0             	movzx  eax,al
c000f109:	f7 d8                	neg    eax
c000f10b:	83 d2 00             	adc    edx,0x0
c000f10e:	83 c4 08             	add    esp,0x8
c000f111:	f7 da                	neg    edx
c000f113:	5b                   	pop    ebx
c000f114:	c3                   	ret    
c000f115:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f11a:	ba ff ff ff ff       	mov    edx,0xffffffff
c000f11f:	83 c4 08             	add    esp,0x8
c000f122:	5b                   	pop    ebx
c000f123:	c3                   	ret    

c000f124 <sysCallSizeFromFilename(regs*)>:
c000f124:	57                   	push   edi
c000f125:	56                   	push   esi
c000f126:	53                   	push   ebx
c000f127:	83 ec 10             	sub    esp,0x10
c000f12a:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000f12e:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c000f131:	83 ff 02             	cmp    edi,0x2
c000f134:	76 56                	jbe    c000f18c <sysCallSizeFromFilename(regs*)+0x68>
c000f136:	83 ec 0c             	sub    esp,0xc
c000f139:	68 14 01 00 00       	push   0x114
c000f13e:	e8 35 2f 00 00       	call   c0012078 <operator new(unsigned long)>
c000f143:	83 c4 0c             	add    esp,0xc
c000f146:	89 c3                	mov    ebx,eax
c000f148:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f14d:	ff 70 40             	push   DWORD PTR [eax+0x40]
c000f150:	57                   	push   edi
c000f151:	53                   	push   ebx
c000f152:	e8 4f 33 00 00       	call   c00124a6 <File::File(char const*, Process*)>
c000f157:	83 c4 0c             	add    esp,0xc
c000f15a:	8d 44 24 13          	lea    eax,[esp+0x13]
c000f15e:	50                   	push   eax
c000f15f:	ff 76 28             	push   DWORD PTR [esi+0x28]
c000f162:	53                   	push   ebx
c000f163:	e8 4e 36 00 00       	call   c00127b6 <File::stat(unsigned long long*, bool*)>
c000f168:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f16b:	89 c6                	mov    esi,eax
c000f16d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f16f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000f172:	83 c4 10             	add    esp,0x10
c000f175:	31 c0                	xor    eax,eax
c000f177:	85 f6                	test   esi,esi
c000f179:	0f 95 c0             	setne  al
c000f17c:	31 d2                	xor    edx,edx
c000f17e:	f7 d8                	neg    eax
c000f180:	83 d2 00             	adc    edx,0x0
c000f183:	83 c4 10             	add    esp,0x10
c000f186:	f7 da                	neg    edx
c000f188:	5b                   	pop    ebx
c000f189:	5e                   	pop    esi
c000f18a:	5f                   	pop    edi
c000f18b:	c3                   	ret    
c000f18c:	83 c4 10             	add    esp,0x10
c000f18f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f194:	5b                   	pop    ebx
c000f195:	ba ff ff ff ff       	mov    edx,0xffffffff
c000f19a:	5e                   	pop    esi
c000f19b:	5f                   	pop    edi
c000f19c:	c3                   	ret    

c000f19d <sysCallSize(regs*)>:
c000f19d:	53                   	push   ebx
c000f19e:	83 ec 18             	sub    esp,0x18
c000f1a1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f1a5:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c000f1a8:	83 f8 02             	cmp    eax,0x2
c000f1ab:	76 33                	jbe    c000f1e0 <sysCallSize(regs*)+0x43>
c000f1ad:	83 ec 0c             	sub    esp,0xc
c000f1b0:	50                   	push   eax
c000f1b1:	e8 4b 1c 00 00       	call   c0010e01 <getFromFileDescriptor(int)>
c000f1b6:	83 c4 0c             	add    esp,0xc
c000f1b9:	8d 54 24 13          	lea    edx,[esp+0x13]
c000f1bd:	52                   	push   edx
c000f1be:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000f1c1:	50                   	push   eax
c000f1c2:	e8 ef 35 00 00       	call   c00127b6 <File::stat(unsigned long long*, bool*)>
c000f1c7:	83 c4 10             	add    esp,0x10
c000f1ca:	85 c0                	test   eax,eax
c000f1cc:	0f 95 c0             	setne  al
c000f1cf:	31 d2                	xor    edx,edx
c000f1d1:	0f b6 c0             	movzx  eax,al
c000f1d4:	f7 d8                	neg    eax
c000f1d6:	83 d2 00             	adc    edx,0x0
c000f1d9:	83 c4 18             	add    esp,0x18
c000f1dc:	f7 da                	neg    edx
c000f1de:	5b                   	pop    ebx
c000f1df:	c3                   	ret    
c000f1e0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f1e5:	ba ff ff ff ff       	mov    edx,0xffffffff
c000f1ea:	83 c4 18             	add    esp,0x18
c000f1ed:	5b                   	pop    ebx
c000f1ee:	c3                   	ret    

c000f1ef <sysCallClose(regs*)>:
c000f1ef:	53                   	push   ebx
c000f1f0:	83 ec 08             	sub    esp,0x8
c000f1f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f1f7:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000f1fa:	83 f8 02             	cmp    eax,0x2
c000f1fd:	76 2f                	jbe    c000f22e <sysCallClose(regs*)+0x3f>
c000f1ff:	83 ec 0c             	sub    esp,0xc
c000f202:	50                   	push   eax
c000f203:	e8 f9 1b 00 00       	call   c0010e01 <getFromFileDescriptor(int)>
c000f208:	89 c3                	mov    ebx,eax
c000f20a:	89 04 24             	mov    DWORD PTR [esp],eax
c000f20d:	e8 56 33 00 00       	call   c0012568 <File::close()>
c000f212:	83 c4 10             	add    esp,0x10
c000f215:	85 db                	test   ebx,ebx
c000f217:	74 0c                	je     c000f225 <sysCallClose(regs*)+0x36>
c000f219:	83 ec 0c             	sub    esp,0xc
c000f21c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f21e:	53                   	push   ebx
c000f21f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000f222:	83 c4 10             	add    esp,0x10
c000f225:	31 c0                	xor    eax,eax
c000f227:	31 d2                	xor    edx,edx
c000f229:	83 c4 08             	add    esp,0x8
c000f22c:	5b                   	pop    ebx
c000f22d:	c3                   	ret    
c000f22e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f233:	ba ff ff ff ff       	mov    edx,0xffffffff
c000f238:	83 c4 08             	add    esp,0x8
c000f23b:	5b                   	pop    ebx
c000f23c:	c3                   	ret    

c000f23d <sysCallOpenDir(regs*)>:
c000f23d:	56                   	push   esi
c000f23e:	53                   	push   ebx
c000f23f:	53                   	push   ebx
c000f240:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f244:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c000f247:	85 f6                	test   esi,esi
c000f249:	74 51                	je     c000f29c <sysCallOpenDir(regs*)+0x5f>
c000f24b:	83 ec 0c             	sub    esp,0xc
c000f24e:	68 14 01 00 00       	push   0x114
c000f253:	e8 20 2e 00 00       	call   c0012078 <operator new(unsigned long)>
c000f258:	83 c4 0c             	add    esp,0xc
c000f25b:	89 c6                	mov    esi,eax
c000f25d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f262:	ff 70 40             	push   DWORD PTR [eax+0x40]
c000f265:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000f268:	56                   	push   esi
c000f269:	e8 fa 36 00 00       	call   c0012968 <Directory::Directory(char const*, Process*)>
c000f26e:	89 34 24             	mov    DWORD PTR [esp],esi
c000f271:	e8 56 37 00 00       	call   c00129cc <Directory::open()>
c000f276:	83 c4 10             	add    esp,0x10
c000f279:	85 c0                	test   eax,eax
c000f27b:	75 1f                	jne    c000f29c <sysCallOpenDir(regs*)+0x5f>
c000f27d:	83 ec 0c             	sub    esp,0xc
c000f280:	56                   	push   esi
c000f281:	e8 16 1a 00 00       	call   c0010c9c <UnixFile::getFileDescriptor()>
c000f286:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c000f289:	83 c4 10             	add    esp,0x10
c000f28c:	89 02                	mov    DWORD PTR [edx],eax
c000f28e:	c1 f8 1f             	sar    eax,0x1f
c000f291:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000f294:	31 c0                	xor    eax,eax
c000f296:	59                   	pop    ecx
c000f297:	31 d2                	xor    edx,edx
c000f299:	5b                   	pop    ebx
c000f29a:	5e                   	pop    esi
c000f29b:	c3                   	ret    
c000f29c:	59                   	pop    ecx
c000f29d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f2a2:	ba ff ff ff ff       	mov    edx,0xffffffff
c000f2a7:	5b                   	pop    ebx
c000f2a8:	5e                   	pop    esi
c000f2a9:	c3                   	ret    

c000f2aa <sysCallMakeDir(regs*)>:
c000f2aa:	56                   	push   esi
c000f2ab:	53                   	push   ebx
c000f2ac:	83 ec 10             	sub    esp,0x10
c000f2af:	68 14 01 00 00       	push   0x114
c000f2b4:	e8 bf 2d 00 00       	call   c0012078 <operator new(unsigned long)>
c000f2b9:	83 c4 0c             	add    esp,0xc
c000f2bc:	89 c3                	mov    ebx,eax
c000f2be:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f2c3:	ff 70 40             	push   DWORD PTR [eax+0x40]
c000f2c6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f2ca:	ff 70 24             	push   DWORD PTR [eax+0x24]
c000f2cd:	53                   	push   ebx
c000f2ce:	e8 95 36 00 00       	call   c0012968 <Directory::Directory(char const*, Process*)>
c000f2d3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f2d6:	e8 d1 38 00 00       	call   c0012bac <Directory::create()>
c000f2db:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f2de:	89 c6                	mov    esi,eax
c000f2e0:	e8 43 37 00 00       	call   c0012a28 <Directory::close()>
c000f2e5:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f2e7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f2ea:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000f2ed:	31 c0                	xor    eax,eax
c000f2ef:	85 f6                	test   esi,esi
c000f2f1:	0f 95 c0             	setne  al
c000f2f4:	31 d2                	xor    edx,edx
c000f2f6:	f7 d8                	neg    eax
c000f2f8:	83 d2 00             	adc    edx,0x0
c000f2fb:	83 c4 14             	add    esp,0x14
c000f2fe:	f7 da                	neg    edx
c000f300:	5b                   	pop    ebx
c000f301:	5e                   	pop    esi
c000f302:	c3                   	ret    

c000f303 <sysCallCloseDir(regs*)>:
c000f303:	53                   	push   ebx
c000f304:	83 ec 08             	sub    esp,0x8
c000f307:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f30b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000f30e:	83 f8 02             	cmp    eax,0x2
c000f311:	76 2f                	jbe    c000f342 <sysCallCloseDir(regs*)+0x3f>
c000f313:	83 ec 0c             	sub    esp,0xc
c000f316:	50                   	push   eax
c000f317:	e8 e5 1a 00 00       	call   c0010e01 <getFromFileDescriptor(int)>
c000f31c:	89 c3                	mov    ebx,eax
c000f31e:	89 04 24             	mov    DWORD PTR [esp],eax
c000f321:	e8 02 37 00 00       	call   c0012a28 <Directory::close()>
c000f326:	83 c4 10             	add    esp,0x10
c000f329:	85 db                	test   ebx,ebx
c000f32b:	74 0c                	je     c000f339 <sysCallCloseDir(regs*)+0x36>
c000f32d:	83 ec 0c             	sub    esp,0xc
c000f330:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f332:	53                   	push   ebx
c000f333:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000f336:	83 c4 10             	add    esp,0x10
c000f339:	31 c0                	xor    eax,eax
c000f33b:	31 d2                	xor    edx,edx
c000f33d:	83 c4 08             	add    esp,0x8
c000f340:	5b                   	pop    ebx
c000f341:	c3                   	ret    
c000f342:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f347:	ba ff ff ff ff       	mov    edx,0xffffffff
c000f34c:	83 c4 08             	add    esp,0x8
c000f34f:	5b                   	pop    ebx
c000f350:	c3                   	ret    

c000f351 <sysCallWait(regs*)>:
c000f351:	83 ec 10             	sub    esp,0x10
c000f354:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f358:	ff 70 28             	push   DWORD PTR [eax+0x28]
c000f35b:	ff 70 24             	push   DWORD PTR [eax+0x24]
c000f35e:	ff 70 20             	push   DWORD PTR [eax+0x20]
c000f361:	e8 24 f2 ff ff       	call   c000e58a <waitTask(int, int*, int)>
c000f366:	83 c4 1c             	add    esp,0x1c
c000f369:	99                   	cdq    
c000f36a:	c3                   	ret    

c000f36b <sysCallFork(regs*)>:
c000f36b:	83 ec 18             	sub    esp,0x18
c000f36e:	68 73 09 02 c0       	push   0xc0020973
c000f373:	e8 50 d7 ff ff       	call   c000cac8 <kprintf(char const*, ...)>
c000f378:	58                   	pop    eax
c000f379:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f37d:	e8 d6 ef ff ff       	call   c000e358 <forkProcess(regs*)>
c000f382:	83 c4 1c             	add    esp,0x1c
c000f385:	99                   	cdq    
c000f386:	c3                   	ret    

c000f387 <sysCallExecve(regs*)>:
c000f387:	53                   	push   ebx
c000f388:	81 ec 24 01 00 00    	sub    esp,0x124
c000f38e:	8b 9c 24 2c 01 00 00 	mov    ebx,DWORD PTR [esp+0x12c]
c000f395:	68 81 09 02 c0       	push   0xc0020981
c000f39a:	e8 29 d7 ff ff       	call   c000cac8 <kprintf(char const*, ...)>
c000f39f:	83 c4 0c             	add    esp,0xc
c000f3a2:	68 00 01 00 00       	push   0x100
c000f3a7:	8d 44 24 17          	lea    eax,[esp+0x17]
c000f3ab:	50                   	push   eax
c000f3ac:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f3b1:	ff 70 40             	push   DWORD PTR [eax+0x40]
c000f3b4:	e8 5e 34 00 00       	call   c0012817 <getcwd(Process*, char*, int)>
c000f3b9:	83 c4 0c             	add    esp,0xc
c000f3bc:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000f3bf:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000f3c2:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000f3c5:	e8 f4 f2 ff ff       	call   c000e6be <execveProcess(char const*, char* const*, char* const*)>
c000f3ca:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f3cf:	ba ff ff ff ff       	mov    edx,0xffffffff
c000f3d4:	81 c4 28 01 00 00    	add    esp,0x128
c000f3da:	5b                   	pop    ebx
c000f3db:	c3                   	ret    

c000f3dc <sysCallRmdir(regs*)>:
c000f3dc:	56                   	push   esi
c000f3dd:	53                   	push   ebx
c000f3de:	83 ec 10             	sub    esp,0x10
c000f3e1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f3e5:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c000f3e8:	68 14 01 00 00       	push   0x114
c000f3ed:	e8 86 2c 00 00       	call   c0012078 <operator new(unsigned long)>
c000f3f2:	83 c4 0c             	add    esp,0xc
c000f3f5:	89 c3                	mov    ebx,eax
c000f3f7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f3fc:	ff 70 40             	push   DWORD PTR [eax+0x40]
c000f3ff:	56                   	push   esi
c000f400:	53                   	push   ebx
c000f401:	e8 a0 30 00 00       	call   c00124a6 <File::File(char const*, Process*)>
c000f406:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f409:	e8 74 32 00 00       	call   c0012682 <File::unlink()>
c000f40e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f411:	89 c6                	mov    esi,eax
c000f413:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f415:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000f418:	31 c0                	xor    eax,eax
c000f41a:	85 f6                	test   esi,esi
c000f41c:	0f 95 c0             	setne  al
c000f41f:	31 d2                	xor    edx,edx
c000f421:	f7 d8                	neg    eax
c000f423:	83 d2 00             	adc    edx,0x0
c000f426:	83 c4 14             	add    esp,0x14
c000f429:	f7 da                	neg    edx
c000f42b:	5b                   	pop    ebx
c000f42c:	5e                   	pop    esi
c000f42d:	c3                   	ret    

c000f42e <sysCallUnlink(regs*)>:
c000f42e:	56                   	push   esi
c000f42f:	53                   	push   ebx
c000f430:	83 ec 10             	sub    esp,0x10
c000f433:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f437:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c000f43a:	68 14 01 00 00       	push   0x114
c000f43f:	e8 34 2c 00 00       	call   c0012078 <operator new(unsigned long)>
c000f444:	83 c4 0c             	add    esp,0xc
c000f447:	89 c3                	mov    ebx,eax
c000f449:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f44e:	ff 70 40             	push   DWORD PTR [eax+0x40]
c000f451:	56                   	push   esi
c000f452:	53                   	push   ebx
c000f453:	e8 4e 30 00 00       	call   c00124a6 <File::File(char const*, Process*)>
c000f458:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f45b:	e8 22 32 00 00       	call   c0012682 <File::unlink()>
c000f460:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f463:	89 c6                	mov    esi,eax
c000f465:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f467:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000f46a:	31 c0                	xor    eax,eax
c000f46c:	85 f6                	test   esi,esi
c000f46e:	0f 95 c0             	setne  al
c000f471:	31 d2                	xor    edx,edx
c000f473:	f7 d8                	neg    eax
c000f475:	83 d2 00             	adc    edx,0x0
c000f478:	83 c4 14             	add    esp,0x14
c000f47b:	f7 da                	neg    edx
c000f47d:	5b                   	pop    ebx
c000f47e:	5e                   	pop    esi
c000f47f:	c3                   	ret    

c000f480 <sysCallGetArgv(regs*)>:
c000f480:	83 ec 0c             	sub    esp,0xc
c000f483:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f487:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000f48a:	85 c0                	test   eax,eax
c000f48c:	78 2b                	js     c000f4b9 <sysCallGetArgv(regs*)+0x39>
c000f48e:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c000f494:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c000f497:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c000f49d:	7d 1a                	jge    c000f4b9 <sysCallGetArgv(regs*)+0x39>
c000f49f:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c000f4a6:	85 c0                	test   eax,eax
c000f4a8:	74 17                	je     c000f4c1 <sysCallGetArgv(regs*)+0x41>
c000f4aa:	83 ec 08             	sub    esp,0x8
c000f4ad:	50                   	push   eax
c000f4ae:	ff 72 24             	push   DWORD PTR [edx+0x24]
c000f4b1:	e8 f1 11 ff ff       	call   c00006a7 <strcpy>
c000f4b6:	83 c4 10             	add    esp,0x10
c000f4b9:	31 c0                	xor    eax,eax
c000f4bb:	31 d2                	xor    edx,edx
c000f4bd:	83 c4 0c             	add    esp,0xc
c000f4c0:	c3                   	ret    
c000f4c1:	b8 01 00 00 00       	mov    eax,0x1
c000f4c6:	31 d2                	xor    edx,edx
c000f4c8:	83 c4 0c             	add    esp,0xc
c000f4cb:	c3                   	ret    

c000f4cc <sysCallTTYName(regs*)>:
c000f4cc:	56                   	push   esi
c000f4cd:	53                   	push   ebx
c000f4ce:	53                   	push   ebx
c000f4cf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000f4d3:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c000f4d6:	85 c0                	test   eax,eax
c000f4d8:	74 58                	je     c000f532 <sysCallTTYName(regs*)+0x66>
c000f4da:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c000f4dd:	83 f8 02             	cmp    eax,0x2
c000f4e0:	77 3e                	ja     c000f520 <sysCallTTYName(regs*)+0x54>
c000f4e2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f4e7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f4ea:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c000f4f0:	85 db                	test   ebx,ebx
c000f4f2:	74 3e                	je     c000f532 <sysCallTTYName(regs*)+0x66>
c000f4f4:	83 ec 0c             	sub    esp,0xc
c000f4f7:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f4f9:	53                   	push   ebx
c000f4fa:	ff 10                	call   DWORD PTR [eax]
c000f4fc:	83 c4 10             	add    esp,0x10
c000f4ff:	84 c0                	test   al,al
c000f501:	74 3a                	je     c000f53d <sysCallTTYName(regs*)+0x71>
c000f503:	83 ec 08             	sub    esp,0x8
c000f506:	81 c3 1e 10 00 00    	add    ebx,0x101e
c000f50c:	53                   	push   ebx
c000f50d:	ff 76 24             	push   DWORD PTR [esi+0x24]
c000f510:	e8 92 11 ff ff       	call   c00006a7 <strcpy>
c000f515:	83 c4 10             	add    esp,0x10
c000f518:	31 c0                	xor    eax,eax
c000f51a:	59                   	pop    ecx
c000f51b:	31 d2                	xor    edx,edx
c000f51d:	5b                   	pop    ebx
c000f51e:	5e                   	pop    esi
c000f51f:	c3                   	ret    
c000f520:	83 ec 0c             	sub    esp,0xc
c000f523:	50                   	push   eax
c000f524:	e8 d8 18 00 00       	call   c0010e01 <getFromFileDescriptor(int)>
c000f529:	83 c4 10             	add    esp,0x10
c000f52c:	89 c3                	mov    ebx,eax
c000f52e:	85 db                	test   ebx,ebx
c000f530:	75 c2                	jne    c000f4f4 <sysCallTTYName(regs*)+0x28>
c000f532:	59                   	pop    ecx
c000f533:	b8 01 00 00 00       	mov    eax,0x1
c000f538:	31 d2                	xor    edx,edx
c000f53a:	5b                   	pop    ebx
c000f53b:	5e                   	pop    esi
c000f53c:	c3                   	ret    
c000f53d:	59                   	pop    ecx
c000f53e:	b8 02 00 00 00       	mov    eax,0x2
c000f543:	31 d2                	xor    edx,edx
c000f545:	5b                   	pop    ebx
c000f546:	5e                   	pop    esi
c000f547:	c3                   	ret    

c000f548 <sysCallGetEnv(regs*)>:
c000f548:	83 ec 0c             	sub    esp,0xc
c000f54b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f54f:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c000f552:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c000f555:	85 c9                	test   ecx,ecx
c000f557:	75 0c                	jne    c000f565 <sysCallGetEnv(regs*)+0x1d>
c000f559:	85 d2                	test   edx,edx
c000f55b:	74 14                	je     c000f571 <sysCallGetEnv(regs*)+0x29>
c000f55d:	31 c0                	xor    eax,eax
c000f55f:	31 d2                	xor    edx,edx
c000f561:	83 c4 0c             	add    esp,0xc
c000f564:	c3                   	ret    
c000f565:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c000f568:	85 d2                	test   edx,edx
c000f56a:	74 1b                	je     c000f587 <sysCallGetEnv(regs*)+0x3f>
c000f56c:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000f56f:	eb ec                	jmp    c000f55d <sysCallGetEnv(regs*)+0x15>
c000f571:	83 ec 0c             	sub    esp,0xc
c000f574:	68 cc 09 02 c0       	push   0xc00209cc
c000f579:	e8 a7 10 ff ff       	call   c0000625 <strlen>
c000f57e:	83 c4 10             	add    esp,0x10
c000f581:	31 d2                	xor    edx,edx
c000f583:	83 c4 0c             	add    esp,0xc
c000f586:	c3                   	ret    
c000f587:	83 ec 08             	sub    esp,0x8
c000f58a:	68 cc 09 02 c0       	push   0xc00209cc
c000f58f:	50                   	push   eax
c000f590:	e8 12 11 ff ff       	call   c00006a7 <strcpy>
c000f595:	83 c4 10             	add    esp,0x10
c000f598:	eb c3                	jmp    c000f55d <sysCallGetEnv(regs*)+0x15>

c000f59a <sysCallUSleep(regs*)>:
c000f59a:	83 ec 14             	sub    esp,0x14
c000f59d:	b8 e8 03 00 00       	mov    eax,0x3e8
c000f5a2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f5a6:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c000f5ad:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c000f5b0:	01 ca                	add    edx,ecx
c000f5b2:	52                   	push   edx
c000f5b3:	50                   	push   eax
c000f5b4:	e8 6a f0 ff ff       	call   c000e623 <nanoSleep(unsigned long long)>
c000f5b9:	31 c0                	xor    eax,eax
c000f5bb:	31 d2                	xor    edx,edx
c000f5bd:	83 c4 1c             	add    esp,0x1c
c000f5c0:	c3                   	ret    

c000f5c1 <sysCallSpawn(regs*)>:
c000f5c1:	56                   	push   esi
c000f5c2:	53                   	push   ebx
c000f5c3:	53                   	push   ebx
c000f5c4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f5c8:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c000f5cb:	85 f6                	test   esi,esi
c000f5cd:	75 08                	jne    c000f5d7 <sysCallSpawn(regs*)+0x16>
c000f5cf:	59                   	pop    ecx
c000f5d0:	31 c0                	xor    eax,eax
c000f5d2:	31 d2                	xor    edx,edx
c000f5d4:	5b                   	pop    ebx
c000f5d5:	5e                   	pop    esi
c000f5d6:	c3                   	ret    
c000f5d7:	83 ec 0c             	sub    esp,0xc
c000f5da:	68 91 09 02 c0       	push   0xc0020991
c000f5df:	e8 e4 d4 ff ff       	call   c000cac8 <kprintf(char const*, ...)>
c000f5e4:	c7 04 24 3b 07 00 00 	mov    DWORD PTR [esp],0x73b
c000f5eb:	e8 88 2a 00 00       	call   c0012078 <operator new(unsigned long)>
c000f5f0:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000f5f3:	89 c6                	mov    esi,eax
c000f5f5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f5fa:	ff 70 40             	push   DWORD PTR [eax+0x40]
c000f5fd:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000f600:	56                   	push   esi
c000f601:	e8 0c e6 ff ff       	call   c000dc12 <Process::Process(char const*, Process*, char**)>
c000f606:	83 c4 20             	add    esp,0x20
c000f609:	80 be 3a 07 00 00 00 	cmp    BYTE PTR [esi+0x73a],0x0
c000f610:	75 bd                	jne    c000f5cf <sysCallSpawn(regs*)+0xe>
c000f612:	83 ec 0c             	sub    esp,0xc
c000f615:	68 9c 09 02 c0       	push   0xc002099c
c000f61a:	e8 a9 d4 ff ff       	call   c000cac8 <kprintf(char const*, ...)>
c000f61f:	89 34 24             	mov    DWORD PTR [esp],esi
c000f622:	e8 51 eb ff ff       	call   c000e178 <Process::createUserThread()>
c000f627:	8b 06                	mov    eax,DWORD PTR [esi]
c000f629:	83 c4 10             	add    esp,0x10
c000f62c:	99                   	cdq    
c000f62d:	59                   	pop    ecx
c000f62e:	5b                   	pop    ebx
c000f62f:	5e                   	pop    esi
c000f630:	c3                   	ret    

c000f631 <sysAppSettings(regs*)>:
c000f631:	53                   	push   ebx
c000f632:	83 ec 08             	sub    esp,0x8
c000f635:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f639:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c000f63c:	8b 83 00 01 00 00    	mov    eax,DWORD PTR [ebx+0x100]
c000f642:	25 e0 1f 00 00       	and    eax,0x1fe0
c000f647:	66 3d c0 09          	cmp    ax,0x9c0
c000f64b:	75 2f                	jne    c000f67c <sysAppSettings(regs*)+0x4b>
c000f64d:	8a 83 00 01 00 00    	mov    al,BYTE PTR [ebx+0x100]
c000f653:	83 e0 1f             	and    eax,0x1f
c000f656:	3c 01                	cmp    al,0x1
c000f658:	74 2e                	je     c000f688 <sysAppSettings(regs*)+0x57>
c000f65a:	3c 07                	cmp    al,0x7
c000f65c:	0f 84 bd 00 00 00    	je     c000f71f <sysAppSettings(regs*)+0xee>
c000f662:	84 c0                	test   al,al
c000f664:	0f 84 dc 00 00 00    	je     c000f746 <sysAppSettings(regs*)+0x115>
c000f66a:	3c 08                	cmp    al,0x8
c000f66c:	74 6d                	je     c000f6db <sysAppSettings(regs*)+0xaa>
c000f66e:	0f b6 c0             	movzx  eax,al
c000f671:	83 c4 08             	add    esp,0x8
c000f674:	05 e8 03 00 00       	add    eax,0x3e8
c000f679:	5b                   	pop    ebx
c000f67a:	99                   	cdq    
c000f67b:	c3                   	ret    
c000f67c:	b8 01 00 00 00       	mov    eax,0x1
c000f681:	31 d2                	xor    edx,edx
c000f683:	83 c4 08             	add    esp,0x8
c000f686:	5b                   	pop    ebx
c000f687:	c3                   	ret    
c000f688:	51                   	push   ecx
c000f689:	68 00 01 00 00       	push   0x100
c000f68e:	6a 00                	push   0x0
c000f690:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f695:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f698:	83 c0 0c             	add    eax,0xc
c000f69b:	50                   	push   eax
c000f69c:	e8 67 0f ff ff       	call   c0000608 <memset>
c000f6a1:	83 c4 0c             	add    esp,0xc
c000f6a4:	68 ff 00 00 00       	push   0xff
c000f6a9:	53                   	push   ebx
c000f6aa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f6af:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f6b2:	83 c0 0c             	add    eax,0xc
c000f6b5:	50                   	push   eax
c000f6b6:	e8 17 0f ff ff       	call   c00005d2 <memcpy>
c000f6bb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f6c0:	5b                   	pop    ebx
c000f6c1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f6c4:	5a                   	pop    edx
c000f6c5:	8d 50 0c             	lea    edx,[eax+0xc]
c000f6c8:	52                   	push   edx
c000f6c9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000f6cf:	e8 ee 09 00 00       	call   c00100c2 <VgaText::setTitle(char*)>
c000f6d4:	83 c4 10             	add    esp,0x10
c000f6d7:	31 c0                	xor    eax,eax
c000f6d9:	eb a6                	jmp    c000f681 <sysAppSettings(regs*)+0x50>
c000f6db:	83 ec 08             	sub    esp,0x8
c000f6de:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c000f6e4:	83 e0 0f             	and    eax,0xf
c000f6e7:	50                   	push   eax
c000f6e8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f6ed:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f6f0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000f6f6:	e8 b7 09 00 00       	call   c00100b2 <VgaText::setTitleColour(VgaColour)>
c000f6fb:	58                   	pop    eax
c000f6fc:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c000f702:	5a                   	pop    edx
c000f703:	c1 e8 04             	shr    eax,0x4
c000f706:	83 e0 0f             	and    eax,0xf
c000f709:	50                   	push   eax
c000f70a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f70f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f712:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000f718:	e8 85 09 00 00       	call   c00100a2 <VgaText::setTitleTextColour(VgaColour)>
c000f71d:	eb b5                	jmp    c000f6d4 <sysAppSettings(regs*)+0xa3>
c000f71f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f724:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f727:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c000f72d:	8a 83 01 01 00 00    	mov    al,BYTE PTR [ebx+0x101]
c000f733:	c0 e8 06             	shr    al,0x6
c000f736:	83 e0 01             	and    eax,0x1
c000f739:	88 82 1c 10 00 00    	mov    BYTE PTR [edx+0x101c],al
c000f73f:	31 c0                	xor    eax,eax
c000f741:	e9 3b ff ff ff       	jmp    c000f681 <sysAppSettings(regs*)+0x50>
c000f746:	b8 02 00 00 00       	mov    eax,0x2
c000f74b:	e9 31 ff ff ff       	jmp    c000f681 <sysAppSettings(regs*)+0x50>

c000f750 <sysSetFatAttrib(regs*)>:
c000f750:	57                   	push   edi
c000f751:	56                   	push   esi
c000f752:	53                   	push   ebx
c000f753:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000f757:	83 ec 0c             	sub    esp,0xc
c000f75a:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c000f75d:	68 14 01 00 00       	push   0x114
c000f762:	e8 11 29 00 00       	call   c0012078 <operator new(unsigned long)>
c000f767:	83 c4 0c             	add    esp,0xc
c000f76a:	89 c3                	mov    ebx,eax
c000f76c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f771:	ff 70 40             	push   DWORD PTR [eax+0x40]
c000f774:	57                   	push   edi
c000f775:	53                   	push   ebx
c000f776:	e8 2b 2d 00 00       	call   c00124a6 <File::File(char const*, Process*)>
c000f77b:	83 c4 0c             	add    esp,0xc
c000f77e:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c000f781:	0f b6 d4             	movzx  edx,ah
c000f784:	0f b6 c0             	movzx  eax,al
c000f787:	52                   	push   edx
c000f788:	50                   	push   eax
c000f789:	53                   	push   ebx
c000f78a:	e8 8d 2f 00 00       	call   c001271c <File::chfatattr(unsigned char, unsigned char)>
c000f78f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f792:	89 c6                	mov    esi,eax
c000f794:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f796:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000f799:	83 c4 10             	add    esp,0x10
c000f79c:	31 c0                	xor    eax,eax
c000f79e:	5b                   	pop    ebx
c000f79f:	85 f6                	test   esi,esi
c000f7a1:	5e                   	pop    esi
c000f7a2:	0f 95 c0             	setne  al
c000f7a5:	5f                   	pop    edi
c000f7a6:	31 d2                	xor    edx,edx
c000f7a8:	f7 d8                	neg    eax
c000f7aa:	83 d2 00             	adc    edx,0x0
c000f7ad:	f7 da                	neg    edx
c000f7af:	c3                   	ret    

c000f7b0 <sysPanic(regs*)>:
c000f7b0:	83 ec 18             	sub    esp,0x18
c000f7b3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f7b7:	ff 70 24             	push   DWORD PTR [eax+0x24]
c000f7ba:	e8 27 d4 ff ff       	call   c000cbe6 <panic(char const*)>
c000f7bf:	c7 04 24 a9 09 02 c0 	mov    DWORD PTR [esp],0xc00209a9
c000f7c6:	e8 1b d4 ff ff       	call   c000cbe6 <panic(char const*)>
c000f7cb:	b8 01 00 00 00       	mov    eax,0x1
c000f7d0:	31 d2                	xor    edx,edx
c000f7d2:	83 c4 1c             	add    esp,0x1c
c000f7d5:	c3                   	ret    

c000f7d6 <sysPipe(regs*)>:
c000f7d6:	57                   	push   edi
c000f7d7:	56                   	push   esi
c000f7d8:	53                   	push   ebx
c000f7d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f7dd:	83 ec 0c             	sub    esp,0xc
c000f7e0:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c000f7e3:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c000f7e6:	6a 20                	push   0x20
c000f7e8:	e8 8b 28 00 00       	call   c0012078 <operator new(unsigned long)>
c000f7ed:	89 c3                	mov    ebx,eax
c000f7ef:	58                   	pop    eax
c000f7f0:	5a                   	pop    edx
c000f7f1:	68 00 50 00 00       	push   0x5000
c000f7f6:	53                   	push   ebx
c000f7f7:	e8 26 e3 ff ff       	call   c000db22 <Pipe::Pipe(int)>
c000f7fc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f7ff:	e8 98 14 00 00       	call   c0010c9c <UnixFile::getFileDescriptor()>
c000f804:	89 07                	mov    DWORD PTR [edi],eax
c000f806:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f809:	e8 8e 14 00 00       	call   c0010c9c <UnixFile::getFileDescriptor()>
c000f80e:	83 c4 10             	add    esp,0x10
c000f811:	89 06                	mov    DWORD PTR [esi],eax
c000f813:	31 d2                	xor    edx,edx
c000f815:	5b                   	pop    ebx
c000f816:	31 c0                	xor    eax,eax
c000f818:	5e                   	pop    esi
c000f819:	5f                   	pop    edi
c000f81a:	c3                   	ret    

c000f81b <sysGetUnixTime(regs*)>:
c000f81b:	a1 c8 30 02 c0       	mov    eax,ds:0xc00230c8
c000f820:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000f826:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000f82a:	e9 3f 36 00 00       	jmp    c0012e6e <Clock::timeInSecondsLocal()>

c000f82f <string_ends_with(char const*, char const*)>:
c000f82f:	57                   	push   edi
c000f830:	56                   	push   esi
c000f831:	53                   	push   ebx
c000f832:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f836:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000f83a:	83 ec 0c             	sub    esp,0xc
c000f83d:	53                   	push   ebx
c000f83e:	e8 e2 0d ff ff       	call   c0000625 <strlen>
c000f843:	89 3c 24             	mov    DWORD PTR [esp],edi
c000f846:	89 c6                	mov    esi,eax
c000f848:	e8 d8 0d ff ff       	call   c0000625 <strlen>
c000f84d:	83 c4 10             	add    esp,0x10
c000f850:	39 c6                	cmp    esi,eax
c000f852:	7d 06                	jge    c000f85a <string_ends_with(char const*, char const*)+0x2b>
c000f854:	5b                   	pop    ebx
c000f855:	31 c0                	xor    eax,eax
c000f857:	5e                   	pop    esi
c000f858:	5f                   	pop    edi
c000f859:	c3                   	ret    
c000f85a:	83 ec 08             	sub    esp,0x8
c000f85d:	29 c6                	sub    esi,eax
c000f85f:	57                   	push   edi
c000f860:	01 f3                	add    ebx,esi
c000f862:	53                   	push   ebx
c000f863:	e8 90 0e ff ff       	call   c00006f8 <strcmp>
c000f868:	83 c4 10             	add    esp,0x10
c000f86b:	85 c0                	test   eax,eax
c000f86d:	5b                   	pop    ebx
c000f86e:	0f 94 c0             	sete   al
c000f871:	5e                   	pop    esi
c000f872:	0f b6 c0             	movzx  eax,al
c000f875:	5f                   	pop    edi
c000f876:	c3                   	ret    

c000f877 <setupSystemCalls()>:
c000f877:	c7 05 40 33 02 c0 f4 80 01 c0 	mov    DWORD PTR ds:0xc0023340,0xc00180f4
c000f881:	c7 05 44 33 02 c0 b7 7f 01 c0 	mov    DWORD PTR ds:0xc0023344,0xc0017fb7
c000f88b:	c7 05 48 33 02 c0 37 80 01 c0 	mov    DWORD PTR ds:0xc0023348,0xc0018037
c000f895:	c7 05 4c 33 02 c0 8c 80 01 c0 	mov    DWORD PTR ds:0xc002334c,0xc001808c
c000f89f:	c7 05 50 33 02 c0 cf 7f 01 c0 	mov    DWORD PTR ds:0xc0023350,0xc0017fcf
c000f8a9:	c7 05 54 33 02 c0 de ec 00 c0 	mov    DWORD PTR ds:0xc0023354,0xc000ecde
c000f8b3:	c7 05 58 33 02 c0 57 ee 00 c0 	mov    DWORD PTR ds:0xc0023358,0xc000ee57
c000f8bd:	c7 05 5c 33 02 c0 76 ee 00 c0 	mov    DWORD PTR ds:0xc002335c,0xc000ee76
c000f8c7:	c7 05 64 33 02 c0 ef f1 00 c0 	mov    DWORD PTR ds:0xc0023364,0xc000f1ef
c000f8d1:	c7 05 60 33 02 c0 d5 ee 00 c0 	mov    DWORD PTR ds:0xc0023360,0xc000eed5
c000f8db:	c7 05 68 33 02 c0 3d f2 00 c0 	mov    DWORD PTR ds:0xc0023368,0xc000f23d
c000f8e5:	c7 05 6c 33 02 c0 c5 ef 00 c0 	mov    DWORD PTR ds:0xc002336c,0xc000efc5
c000f8ef:	c7 05 70 33 02 c0 ea ec 00 c0 	mov    DWORD PTR ds:0xc0023370,0xc000ecea
c000f8f9:	c7 05 74 33 02 c0 ef ec 00 c0 	mov    DWORD PTR ds:0xc0023374,0xc000ecef
c000f903:	c7 05 78 33 02 c0 aa f2 00 c0 	mov    DWORD PTR ds:0xc0023378,0xc000f2aa
c000f90d:	c7 05 7c 33 02 c0 03 f3 00 c0 	mov    DWORD PTR ds:0xc002337c,0xc000f303
c000f917:	c7 05 80 33 02 c0 87 f0 00 c0 	mov    DWORD PTR ds:0xc0023380,0xc000f087
c000f921:	c7 05 84 33 02 c0 d8 f0 00 c0 	mov    DWORD PTR ds:0xc0023384,0xc000f0d8
c000f92b:	c7 05 88 33 02 c0 9d f1 00 c0 	mov    DWORD PTR ds:0xc0023388,0xc000f19d
c000f935:	c7 05 8c 33 02 c0 f4 ec 00 c0 	mov    DWORD PTR ds:0xc002338c,0xc000ecf4
c000f93f:	c7 05 90 33 02 c0 51 f3 00 c0 	mov    DWORD PTR ds:0xc0023390,0xc000f351
c000f949:	c7 05 94 33 02 c0 6b f3 00 c0 	mov    DWORD PTR ds:0xc0023394,0xc000f36b
c000f953:	c7 05 98 33 02 c0 87 f3 00 c0 	mov    DWORD PTR ds:0xc0023398,0xc000f387
c000f95d:	c7 05 9c 33 02 c0 dc f3 00 c0 	mov    DWORD PTR ds:0xc002339c,0xc000f3dc
c000f967:	c7 05 a0 33 02 c0 2e f4 00 c0 	mov    DWORD PTR ds:0xc00233a0,0xc000f42e
c000f971:	c7 05 a4 33 02 c0 fe ec 00 c0 	mov    DWORD PTR ds:0xc00233a4,0xc000ecfe
c000f97b:	c7 05 a8 33 02 c0 80 f4 00 c0 	mov    DWORD PTR ds:0xc00233a8,0xc000f480
c000f985:	c7 05 ac 33 02 c0 92 ee 00 c0 	mov    DWORD PTR ds:0xc00233ac,0xc000ee92
c000f98f:	c7 05 b0 33 02 c0 cc f4 00 c0 	mov    DWORD PTR ds:0xc00233b0,0xc000f4cc
c000f999:	c7 05 b4 33 02 c0 34 f0 00 c0 	mov    DWORD PTR ds:0xc00233b4,0xc000f034
c000f9a3:	c7 05 b8 33 02 c0 9a f5 00 c0 	mov    DWORD PTR ds:0xc00233b8,0xc000f59a
c000f9ad:	c7 05 bc 33 02 c0 24 f1 00 c0 	mov    DWORD PTR ds:0xc00233bc,0xc000f124
c000f9b7:	c7 05 c0 33 02 c0 c1 f5 00 c0 	mov    DWORD PTR ds:0xc00233c0,0xc000f5c1
c000f9c1:	c7 05 c4 33 02 c0 48 f5 00 c0 	mov    DWORD PTR ds:0xc00233c4,0xc000f548
c000f9cb:	c7 05 c8 33 02 c0 31 f6 00 c0 	mov    DWORD PTR ds:0xc00233c8,0xc000f631
c000f9d5:	c7 05 cc 33 02 c0 0e ed 00 c0 	mov    DWORD PTR ds:0xc00233cc,0xc000ed0e
c000f9df:	c7 05 d0 33 02 c0 78 ed 00 c0 	mov    DWORD PTR ds:0xc00233d0,0xc000ed78
c000f9e9:	c7 05 d4 33 02 c0 be ed 00 c0 	mov    DWORD PTR ds:0xc00233d4,0xc000edbe
c000f9f3:	c7 05 d8 33 02 c0 50 f7 00 c0 	mov    DWORD PTR ds:0xc00233d8,0xc000f750
c000f9fd:	c7 05 dc 33 02 c0 b0 f7 00 c0 	mov    DWORD PTR ds:0xc00233dc,0xc000f7b0
c000fa07:	c7 05 e0 33 02 c0 0f ee 00 c0 	mov    DWORD PTR ds:0xc00233e0,0xc000ee0f
c000fa11:	c7 05 e4 33 02 c0 d6 f7 00 c0 	mov    DWORD PTR ds:0xc00233e4,0xc000f7d6
c000fa1b:	c7 05 e8 33 02 c0 1b f8 00 c0 	mov    DWORD PTR ds:0xc00233e8,0xc000f81b
c000fa25:	c3                   	ret    

c000fa26 <systemCall(regs*, void*)>:
c000fa26:	53                   	push   ebx
c000fa27:	83 ec 08             	sub    esp,0x8
c000fa2a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fa2e:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000fa31:	83 f8 7f             	cmp    eax,0x7f
c000fa34:	77 16                	ja     c000fa4c <systemCall(regs*, void*)+0x26>
c000fa36:	8b 14 85 40 33 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdccc0]
c000fa3d:	85 d2                	test   edx,edx
c000fa3f:	74 0b                	je     c000fa4c <systemCall(regs*, void*)+0x26>
c000fa41:	83 ec 0c             	sub    esp,0xc
c000fa44:	53                   	push   ebx
c000fa45:	ff d2                	call   edx
c000fa47:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c000fa4a:	eb 0d                	jmp    c000fa59 <systemCall(regs*, void*)+0x33>
c000fa4c:	52                   	push   edx
c000fa4d:	52                   	push   edx
c000fa4e:	50                   	push   eax
c000fa4f:	68 b8 09 02 c0       	push   0xc00209b8
c000fa54:	e8 6f d0 ff ff       	call   c000cac8 <kprintf(char const*, ...)>
c000fa59:	83 c4 10             	add    esp,0x10
c000fa5c:	b8 ef be ad de       	mov    eax,0xdeadbeef
c000fa61:	31 d2                	xor    edx,edx
c000fa63:	83 c4 08             	add    esp,0x8
c000fa66:	5b                   	pop    ebx
c000fa67:	c3                   	ret    

c000fa68 <VgaText::isAtty()>:
c000fa68:	b0 01                	mov    al,0x1
c000fa6a:	c3                   	ret    
c000fa6b:	90                   	nop

c000fa6c <VgaText::~VgaText()>:
c000fa6c:	83 ec 0c             	sub    esp,0xc
c000fa6f:	ba c0 0a 02 c0       	mov    edx,0xc0020ac0
c000fa74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fa78:	89 10                	mov    DWORD PTR [eax],edx
c000fa7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fa7e:	83 ec 0c             	sub    esp,0xc
c000fa81:	50                   	push   eax
c000fa82:	e8 81 12 00 00       	call   c0010d08 <UnixFile::~UnixFile()>
c000fa87:	83 c4 10             	add    esp,0x10
c000fa8a:	90                   	nop
c000fa8b:	83 c4 0c             	add    esp,0xc
c000fa8e:	c3                   	ret    
c000fa8f:	90                   	nop

c000fa90 <VgaText::~VgaText()>:
c000fa90:	83 ec 0c             	sub    esp,0xc
c000fa93:	83 ec 0c             	sub    esp,0xc
c000fa96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fa9a:	e8 cd ff ff ff       	call   c000fa6c <VgaText::~VgaText()>
c000fa9f:	83 c4 10             	add    esp,0x10
c000faa2:	83 ec 08             	sub    esp,0x8
c000faa5:	68 60 12 00 00       	push   0x1260
c000faaa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000faae:	e8 d4 25 00 00       	call   c0012087 <operator delete(void*, unsigned long)>
c000fab3:	83 c4 10             	add    esp,0x10
c000fab6:	83 c4 0c             	add    esp,0xc
c000fab9:	c3                   	ret    

c000faba <VgaText::read(unsigned long long, void*, int*)>:
c000faba:	83 ec 10             	sub    esp,0x10
c000fabd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fac1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fac5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fac9:	e8 34 4f 00 00       	call   c0014a02 <readKeyboard(VgaText*, char*, unsigned long)>
c000face:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000fad2:	89 02                	mov    DWORD PTR [edx],eax
c000fad4:	31 c0                	xor    eax,eax
c000fad6:	83 c4 1c             	add    esp,0x1c
c000fad9:	c3                   	ret    

c000fada <setTerminalScrollLock(bool)>:
c000fada:	c3                   	ret    

c000fadb <addToTerminalCycle(VgaText*)>:
c000fadb:	8b 15 60 35 02 c0    	mov    edx,DWORD PTR ds:0xc0023560
c000fae1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fae5:	85 d2                	test   edx,edx
c000fae7:	75 0c                	jne    c000faf5 <addToTerminalCycle(VgaText*)+0x1a>
c000fae9:	89 80 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],eax
c000faef:	a3 60 35 02 c0       	mov    ds:0xc0023560,eax
c000faf4:	c3                   	ret    
c000faf5:	8b 8a c0 0f 00 00    	mov    ecx,DWORD PTR [edx+0xfc0]
c000fafb:	89 82 c0 0f 00 00    	mov    DWORD PTR [edx+0xfc0],eax
c000fb01:	89 88 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],ecx
c000fb07:	c3                   	ret    

c000fb08 <installVgaTextImplementation()>:
c000fb08:	83 ec 10             	sub    esp,0x10
c000fb0b:	6a 20                	push   0x20
c000fb0d:	6a 00                	push   0x0
c000fb0f:	68 40 35 02 c0       	push   0xc0023540
c000fb14:	e8 ef 0a ff ff       	call   c0000608 <memset>
c000fb19:	83 c4 1c             	add    esp,0x1c
c000fb1c:	c3                   	ret    

c000fb1d <scrollTerminalScrollLock(int)>:
c000fb1d:	c3                   	ret    

c000fb1e <VgaText::load()>:
c000fb1e:	53                   	push   ebx
c000fb1f:	31 c0                	xor    eax,eax
c000fb21:	83 ec 58             	sub    esp,0x58
c000fb24:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000fb28:	89 e2                	mov    edx,esp
c000fb2a:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c000fb2e:	40                   	inc    eax
c000fb2f:	83 f8 50             	cmp    eax,0x50
c000fb32:	75 f6                	jne    c000fb2a <VgaText::load()+0xc>
c000fb34:	31 c0                	xor    eax,eax
c000fb36:	8a 8c 03 1e 10 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x101e]
c000fb3d:	84 c9                	test   cl,cl
c000fb3f:	74 06                	je     c000fb47 <VgaText::load()+0x29>
c000fb41:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000fb44:	40                   	inc    eax
c000fb45:	eb ef                	jmp    c000fb36 <VgaText::load()+0x18>
c000fb47:	8b 83 fc 0f 00 00    	mov    eax,DWORD PTR [ebx+0xffc]
c000fb4d:	85 c0                	test   eax,eax
c000fb4f:	74 09                	je     c000fb5a <VgaText::load()+0x3c>
c000fb51:	51                   	push   ecx
c000fb52:	51                   	push   ecx
c000fb53:	52                   	push   edx
c000fb54:	53                   	push   ebx
c000fb55:	ff d0                	call   eax
c000fb57:	83 c4 10             	add    esp,0x10
c000fb5a:	8b 83 00 10 00 00    	mov    eax,DWORD PTR [ebx+0x1000]
c000fb60:	85 c0                	test   eax,eax
c000fb62:	74 09                	je     c000fb6d <VgaText::load()+0x4f>
c000fb64:	83 ec 0c             	sub    esp,0xc
c000fb67:	53                   	push   ebx
c000fb68:	ff d0                	call   eax
c000fb6a:	83 c4 10             	add    esp,0x10
c000fb6d:	83 c4 58             	add    esp,0x58
c000fb70:	5b                   	pop    ebx
c000fb71:	c3                   	ret    

c000fb72 <VgaText::updateCursor()>:
c000fb72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fb76:	39 05 64 35 02 c0    	cmp    DWORD PTR ds:0xc0023564,eax
c000fb7c:	75 0c                	jne    c000fb8a <VgaText::updateCursor()+0x18>
c000fb7e:	8b 80 0c 10 00 00    	mov    eax,DWORD PTR [eax+0x100c]
c000fb84:	85 c0                	test   eax,eax
c000fb86:	74 02                	je     c000fb8a <VgaText::updateCursor()+0x18>
c000fb88:	ff e0                	jmp    eax
c000fb8a:	c3                   	ret    
c000fb8b:	90                   	nop

c000fb8c <VgaText::showCursor(bool)>:
c000fb8c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fb90:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fb94:	88 90 bc 0f 00 00    	mov    BYTE PTR [eax+0xfbc],dl
c000fb9a:	c3                   	ret    
c000fb9b:	90                   	nop

c000fb9c <VgaText::disableBlink(bool)>:
c000fb9c:	56                   	push   esi
c000fb9d:	53                   	push   ebx
c000fb9e:	51                   	push   ecx
c000fb9f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fba3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000fba7:	39 1d 64 35 02 c0    	cmp    DWORD PTR ds:0xc0023564,ebx
c000fbad:	75 18                	jne    c000fbc7 <VgaText::disableBlink(bool)+0x2b>
c000fbaf:	8b 83 14 10 00 00    	mov    eax,DWORD PTR [ebx+0x1014]
c000fbb5:	85 c0                	test   eax,eax
c000fbb7:	74 0e                	je     c000fbc7 <VgaText::disableBlink(bool)+0x2b>
c000fbb9:	89 f1                	mov    ecx,esi
c000fbbb:	52                   	push   edx
c000fbbc:	52                   	push   edx
c000fbbd:	0f b6 d1             	movzx  edx,cl
c000fbc0:	52                   	push   edx
c000fbc1:	53                   	push   ebx
c000fbc2:	ff d0                	call   eax
c000fbc4:	83 c4 10             	add    esp,0x10
c000fbc7:	89 f0                	mov    eax,esi
c000fbc9:	83 f0 01             	xor    eax,0x1
c000fbcc:	88 83 bd 0f 00 00    	mov    BYTE PTR [ebx+0xfbd],al
c000fbd2:	58                   	pop    eax
c000fbd3:	5b                   	pop    ebx
c000fbd4:	5e                   	pop    esi
c000fbd5:	c3                   	ret    

c000fbd6 <VgaText::doANSI_SGR(int)>:
c000fbd6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fbda:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fbde:	85 d2                	test   edx,edx
c000fbe0:	75 14                	jne    c000fbf6 <VgaText::doANSI_SGR(int)+0x20>
c000fbe2:	8b 90 c8 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc8]
c000fbe8:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000fbee:	8b 90 c4 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc4]
c000fbf4:	eb 65                	jmp    c000fc5b <VgaText::doANSI_SGR(int)+0x85>
c000fbf6:	83 fa 07             	cmp    edx,0x7
c000fbf9:	75 14                	jne    c000fc0f <VgaText::doANSI_SGR(int)+0x39>
c000fbfb:	8b 90 d0 0f 00 00    	mov    edx,DWORD PTR [eax+0xfd0]
c000fc01:	8b 88 cc 0f 00 00    	mov    ecx,DWORD PTR [eax+0xfcc]
c000fc07:	89 88 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],ecx
c000fc0d:	eb 4c                	jmp    c000fc5b <VgaText::doANSI_SGR(int)+0x85>
c000fc0f:	83 fa 1b             	cmp    edx,0x1b
c000fc12:	74 ce                	je     c000fbe2 <VgaText::doANSI_SGR(int)+0xc>
c000fc14:	8d 4a e2             	lea    ecx,[edx-0x1e]
c000fc17:	83 f9 07             	cmp    ecx,0x7
c000fc1a:	77 09                	ja     c000fc25 <VgaText::doANSI_SGR(int)+0x4f>
c000fc1c:	8b 14 8d 20 25 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffddae0]
c000fc23:	eb 20                	jmp    c000fc45 <VgaText::doANSI_SGR(int)+0x6f>
c000fc25:	8d 4a d8             	lea    ecx,[edx-0x28]
c000fc28:	83 f9 07             	cmp    ecx,0x7
c000fc2b:	77 09                	ja     c000fc36 <VgaText::doANSI_SGR(int)+0x60>
c000fc2d:	8b 14 8d 20 25 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffddae0]
c000fc34:	eb 25                	jmp    c000fc5b <VgaText::doANSI_SGR(int)+0x85>
c000fc36:	8d 4a a6             	lea    ecx,[edx-0x5a]
c000fc39:	83 f9 07             	cmp    ecx,0x7
c000fc3c:	77 0e                	ja     c000fc4c <VgaText::doANSI_SGR(int)+0x76>
c000fc3e:	8b 14 95 d8 23 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffddc28]
c000fc45:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000fc4b:	c3                   	ret    
c000fc4c:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000fc4f:	83 f9 07             	cmp    ecx,0x7
c000fc52:	77 0d                	ja     c000fc61 <VgaText::doANSI_SGR(int)+0x8b>
c000fc54:	8b 14 95 b0 23 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffddc50]
c000fc5b:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c000fc61:	c3                   	ret    

c000fc62 <VgaText::setDefaultBgColour(VgaColour)>:
c000fc62:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fc66:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fc6a:	89 90 c4 0f 00 00    	mov    DWORD PTR [eax+0xfc4],edx
c000fc70:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c000fc76:	c3                   	ret    
c000fc77:	90                   	nop

c000fc78 <VgaText::setDefaultFgColour(VgaColour)>:
c000fc78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fc7c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fc80:	89 90 c8 0f 00 00    	mov    DWORD PTR [eax+0xfc8],edx
c000fc86:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000fc8c:	c3                   	ret    
c000fc8d:	90                   	nop

c000fc8e <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c000fc8e:	53                   	push   ebx
c000fc8f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000fc93:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000fc97:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000fc9b:	51                   	push   ecx
c000fc9c:	e8 c1 ff ff ff       	call   c000fc62 <VgaText::setDefaultBgColour(VgaColour)>
c000fca1:	58                   	pop    eax
c000fca2:	5a                   	pop    edx
c000fca3:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000fca7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000fcab:	5b                   	pop    ebx
c000fcac:	eb ca                	jmp    c000fc78 <VgaText::setDefaultFgColour(VgaColour)>

c000fcae <VgaText::combineColours(unsigned char, unsigned char)>:
c000fcae:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000fcb2:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000fcb7:	83 e0 0f             	and    eax,0xf
c000fcba:	c1 e2 04             	shl    edx,0x4
c000fcbd:	09 d0                	or     eax,edx
c000fcbf:	c3                   	ret    

c000fcc0 <VgaText::scrollScreen()>:
c000fcc0:	57                   	push   edi
c000fcc1:	56                   	push   esi
c000fcc2:	be 01 00 00 00       	mov    esi,0x1
c000fcc7:	53                   	push   ebx
c000fcc8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fccc:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c000fcd2:	31 ff                	xor    edi,edi
c000fcd4:	01 d9                	add    ecx,ebx
c000fcd6:	8a 41 0c             	mov    al,BYTE PTR [ecx+0xc]
c000fcd9:	83 fe 17             	cmp    esi,0x17
c000fcdc:	88 81 6c ff ff ff    	mov    BYTE PTR [ecx-0x94],al
c000fce2:	75 28                	jne    c000fd0c <VgaText::scrollScreen()+0x4c>
c000fce4:	f7 c7 01 00 00 00    	test   edi,0x1
c000fcea:	74 1c                	je     c000fd08 <VgaText::scrollScreen()+0x48>
c000fcec:	0f b6 83 cc 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfcc]
c000fcf3:	50                   	push   eax
c000fcf4:	0f b6 83 d0 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfd0]
c000fcfb:	50                   	push   eax
c000fcfc:	e8 ad ff ff ff       	call   c000fcae <VgaText::combineColours(unsigned char, unsigned char)>
c000fd01:	5a                   	pop    edx
c000fd02:	5a                   	pop    edx
c000fd03:	88 41 0c             	mov    BYTE PTR [ecx+0xc],al
c000fd06:	eb 04                	jmp    c000fd0c <VgaText::scrollScreen()+0x4c>
c000fd08:	c6 41 0c 20          	mov    BYTE PTR [ecx+0xc],0x20
c000fd0c:	47                   	inc    edi
c000fd0d:	41                   	inc    ecx
c000fd0e:	81 ff a0 00 00 00    	cmp    edi,0xa0
c000fd14:	75 c0                	jne    c000fcd6 <VgaText::scrollScreen()+0x16>
c000fd16:	46                   	inc    esi
c000fd17:	83 fe 18             	cmp    esi,0x18
c000fd1a:	75 b0                	jne    c000fccc <VgaText::scrollScreen()+0xc>
c000fd1c:	39 1d 64 35 02 c0    	cmp    DWORD PTR ds:0xc0023564,ebx
c000fd22:	75 24                	jne    c000fd48 <VgaText::scrollScreen()+0x88>
c000fd24:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c000fd2b:	74 08                	je     c000fd35 <VgaText::scrollScreen()+0x75>
c000fd2d:	ff 8b f8 0f 00 00    	dec    DWORD PTR [ebx+0xff8]
c000fd33:	eb 13                	jmp    c000fd48 <VgaText::scrollScreen()+0x88>
c000fd35:	8b 83 08 10 00 00    	mov    eax,DWORD PTR [ebx+0x1008]
c000fd3b:	85 c0                	test   eax,eax
c000fd3d:	74 09                	je     c000fd48 <VgaText::scrollScreen()+0x88>
c000fd3f:	83 ec 0c             	sub    esp,0xc
c000fd42:	53                   	push   ebx
c000fd43:	ff d0                	call   eax
c000fd45:	83 c4 10             	add    esp,0x10
c000fd48:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000fd4c:	5b                   	pop    ebx
c000fd4d:	5e                   	pop    esi
c000fd4e:	5f                   	pop    edi
c000fd4f:	e9 1e fe ff ff       	jmp    c000fb72 <VgaText::updateCursor()>

c000fd54 <VgaText::combineCharAndColour(char, unsigned char)>:
c000fd54:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000fd59:	c1 e0 08             	shl    eax,0x8
c000fd5c:	89 c2                	mov    edx,eax
c000fd5e:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000fd63:	09 d0                	or     eax,edx
c000fd65:	c3                   	ret    

c000fd66 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c000fd66:	53                   	push   ebx
c000fd67:	83 ec 08             	sub    esp,0x8
c000fd6a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000fd6e:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000fd73:	50                   	push   eax
c000fd74:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000fd79:	50                   	push   eax
c000fd7a:	e8 2f ff ff ff       	call   c000fcae <VgaText::combineColours(unsigned char, unsigned char)>
c000fd7f:	5a                   	pop    edx
c000fd80:	0f b6 c0             	movzx  eax,al
c000fd83:	5b                   	pop    ebx
c000fd84:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c000fd89:	50                   	push   eax
c000fd8a:	53                   	push   ebx
c000fd8b:	e8 c4 ff ff ff       	call   c000fd54 <VgaText::combineCharAndColour(char, unsigned char)>
c000fd90:	5a                   	pop    edx
c000fd91:	5a                   	pop    edx
c000fd92:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c000fd98:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c000fd9c:	0f b7 d2             	movzx  edx,dx
c000fd9f:	66 89 44 51 0c       	mov    WORD PTR [ecx+edx*2+0xc],ax
c000fda4:	39 0d 64 35 02 c0    	cmp    DWORD PTR ds:0xc0023564,ecx
c000fdaa:	75 14                	jne    c000fdc0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c000fdac:	8b 81 18 10 00 00    	mov    eax,DWORD PTR [ecx+0x1018]
c000fdb2:	85 c0                	test   eax,eax
c000fdb4:	74 0a                	je     c000fdc0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c000fdb6:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000fdba:	83 c4 08             	add    esp,0x8
c000fdbd:	5b                   	pop    ebx
c000fdbe:	ff e0                	jmp    eax
c000fdc0:	83 c4 08             	add    esp,0x8
c000fdc3:	5b                   	pop    ebx
c000fdc4:	c3                   	ret    
c000fdc5:	90                   	nop

c000fdc6 <VgaText::getCursorX()>:
c000fdc6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fdca:	8b 80 b0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb0]
c000fdd0:	c3                   	ret    
c000fdd1:	90                   	nop

c000fdd2 <VgaText::getCursorY()>:
c000fdd2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fdd6:	8b 80 b4 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb4]
c000fddc:	c3                   	ret    
c000fddd:	90                   	nop

c000fdde <VgaText::setCursor(int, int)>:
c000fdde:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fde2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fde6:	89 90 b0 0f 00 00    	mov    DWORD PTR [eax+0xfb0],edx
c000fdec:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000fdf0:	89 90 b4 0f 00 00    	mov    DWORD PTR [eax+0xfb4],edx
c000fdf6:	e9 77 fd ff ff       	jmp    c000fb72 <VgaText::updateCursor()>
c000fdfb:	90                   	nop

c000fdfc <VgaText::setCursorX(int)>:
c000fdfc:	83 ec 10             	sub    esp,0x10
c000fdff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fe03:	ff b0 b4 0f 00 00    	push   DWORD PTR [eax+0xfb4]
c000fe09:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fe0d:	50                   	push   eax
c000fe0e:	e8 cb ff ff ff       	call   c000fdde <VgaText::setCursor(int, int)>
c000fe13:	83 c4 1c             	add    esp,0x1c
c000fe16:	c3                   	ret    
c000fe17:	90                   	nop

c000fe18 <VgaText::setCursorY(int)>:
c000fe18:	83 ec 10             	sub    esp,0x10
c000fe1b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fe1f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fe23:	ff b0 b0 0f 00 00    	push   DWORD PTR [eax+0xfb0]
c000fe29:	50                   	push   eax
c000fe2a:	e8 af ff ff ff       	call   c000fdde <VgaText::setCursor(int, int)>
c000fe2f:	83 c4 1c             	add    esp,0x1c
c000fe32:	c3                   	ret    
c000fe33:	90                   	nop

c000fe34 <VgaText::incrementCursor(bool)>:
c000fe34:	56                   	push   esi
c000fe35:	53                   	push   ebx
c000fe36:	51                   	push   ecx
c000fe37:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fe3b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000fe3f:	8b 83 b0 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb0]
c000fe45:	40                   	inc    eax
c000fe46:	83 f8 50             	cmp    eax,0x50
c000fe49:	74 08                	je     c000fe53 <VgaText::incrementCursor(bool)+0x1f>
c000fe4b:	89 83 b0 0f 00 00    	mov    DWORD PTR [ebx+0xfb0],eax
c000fe51:	eb 33                	jmp    c000fe86 <VgaText::incrementCursor(bool)+0x52>
c000fe53:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c000fe59:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c000fe63:	8d 50 01             	lea    edx,[eax+0x1]
c000fe66:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c000fe6c:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c000fe72:	75 12                	jne    c000fe86 <VgaText::incrementCursor(bool)+0x52>
c000fe74:	83 ec 0c             	sub    esp,0xc
c000fe77:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c000fe7d:	53                   	push   ebx
c000fe7e:	e8 3d fe ff ff       	call   c000fcc0 <VgaText::scrollScreen()>
c000fe83:	83 c4 10             	add    esp,0x10
c000fe86:	89 f0                	mov    eax,esi
c000fe88:	84 c0                	test   al,al
c000fe8a:	74 0c                	je     c000fe98 <VgaText::incrementCursor(bool)+0x64>
c000fe8c:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000fe90:	5a                   	pop    edx
c000fe91:	5b                   	pop    ebx
c000fe92:	5e                   	pop    esi
c000fe93:	e9 da fc ff ff       	jmp    c000fb72 <VgaText::updateCursor()>
c000fe98:	58                   	pop    eax
c000fe99:	5b                   	pop    ebx
c000fe9a:	5e                   	pop    esi
c000fe9b:	c3                   	ret    

c000fe9c <VgaText::updateRAMUsageDisplay(int)>:
c000fe9c:	53                   	push   ebx
c000fe9d:	bb 0a 00 00 00       	mov    ebx,0xa
c000fea2:	6a 0f                	push   0xf
c000fea4:	6a 00                	push   0x0
c000fea6:	e8 03 fe ff ff       	call   c000fcae <VgaText::combineColours(unsigned char, unsigned char)>
c000feab:	5a                   	pop    edx
c000feac:	59                   	pop    ecx
c000fead:	0f b6 c8             	movzx  ecx,al
c000feb0:	51                   	push   ecx
c000feb1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000feb5:	99                   	cdq    
c000feb6:	f7 fb                	idiv   ebx
c000feb8:	89 d3                	mov    ebx,edx
c000feba:	83 c0 30             	add    eax,0x30
c000febd:	83 c3 30             	add    ebx,0x30
c000fec0:	0f be c0             	movsx  eax,al
c000fec3:	0f b6 db             	movzx  ebx,bl
c000fec6:	50                   	push   eax
c000fec7:	e8 88 fe ff ff       	call   c000fd54 <VgaText::combineCharAndColour(char, unsigned char)>
c000fecc:	5a                   	pop    edx
c000fecd:	5a                   	pop    edx
c000fece:	66 a3 96 80 0b c2    	mov    ds:0xc20b8096,ax
c000fed4:	51                   	push   ecx
c000fed5:	53                   	push   ebx
c000fed6:	e8 79 fe ff ff       	call   c000fd54 <VgaText::combineCharAndColour(char, unsigned char)>
c000fedb:	5b                   	pop    ebx
c000fedc:	5a                   	pop    edx
c000fedd:	66 a3 98 80 0b c2    	mov    ds:0xc20b8098,ax
c000fee3:	51                   	push   ecx
c000fee4:	6a 25                	push   0x25
c000fee6:	e8 69 fe ff ff       	call   c000fd54 <VgaText::combineCharAndColour(char, unsigned char)>
c000feeb:	59                   	pop    ecx
c000feec:	5b                   	pop    ebx
c000feed:	66 a3 9a 80 0b c2    	mov    ds:0xc20b809a,ax
c000fef3:	5b                   	pop    ebx
c000fef4:	c3                   	ret    
c000fef5:	90                   	nop

c000fef6 <VgaText::updateDiskUsage()>:
c000fef6:	55                   	push   ebp
c000fef7:	bd 10 27 00 00       	mov    ebp,0x2710
c000fefc:	57                   	push   edi
c000fefd:	56                   	push   esi
c000fefe:	53                   	push   ebx
c000feff:	6a 0f                	push   0xf
c000ff01:	6a 00                	push   0x0
c000ff03:	e8 a6 fd ff ff       	call   c000fcae <VgaText::combineColours(unsigned char, unsigned char)>
c000ff08:	5a                   	pop    edx
c000ff09:	0f b6 d8             	movzx  ebx,al
c000ff0c:	59                   	pop    ecx
c000ff0d:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c000ff12:	53                   	push   ebx
c000ff13:	b9 0a 00 00 00       	mov    ecx,0xa
c000ff18:	99                   	cdq    
c000ff19:	f7 fd                	idiv   ebp
c000ff1b:	99                   	cdq    
c000ff1c:	f7 f9                	idiv   ecx
c000ff1e:	8d 42 30             	lea    eax,[edx+0x30]
c000ff21:	0f b6 c0             	movzx  eax,al
c000ff24:	50                   	push   eax
c000ff25:	e8 2a fe ff ff       	call   c000fd54 <VgaText::combineCharAndColour(char, unsigned char)>
c000ff2a:	5e                   	pop    esi
c000ff2b:	5f                   	pop    edi
c000ff2c:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c000ff32:	bf e8 03 00 00       	mov    edi,0x3e8
c000ff37:	53                   	push   ebx
c000ff38:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c000ff3d:	99                   	cdq    
c000ff3e:	f7 ff                	idiv   edi
c000ff40:	99                   	cdq    
c000ff41:	f7 f9                	idiv   ecx
c000ff43:	8d 42 30             	lea    eax,[edx+0x30]
c000ff46:	0f b6 c0             	movzx  eax,al
c000ff49:	50                   	push   eax
c000ff4a:	e8 05 fe ff ff       	call   c000fd54 <VgaText::combineCharAndColour(char, unsigned char)>
c000ff4f:	5a                   	pop    edx
c000ff50:	5e                   	pop    esi
c000ff51:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c000ff57:	be 64 00 00 00       	mov    esi,0x64
c000ff5c:	53                   	push   ebx
c000ff5d:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c000ff62:	99                   	cdq    
c000ff63:	f7 fe                	idiv   esi
c000ff65:	99                   	cdq    
c000ff66:	f7 f9                	idiv   ecx
c000ff68:	8d 42 30             	lea    eax,[edx+0x30]
c000ff6b:	0f b6 c0             	movzx  eax,al
c000ff6e:	50                   	push   eax
c000ff6f:	e8 e0 fd ff ff       	call   c000fd54 <VgaText::combineCharAndColour(char, unsigned char)>
c000ff74:	5a                   	pop    edx
c000ff75:	5a                   	pop    edx
c000ff76:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c000ff7c:	53                   	push   ebx
c000ff7d:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c000ff82:	99                   	cdq    
c000ff83:	f7 f9                	idiv   ecx
c000ff85:	99                   	cdq    
c000ff86:	f7 f9                	idiv   ecx
c000ff88:	8d 42 30             	lea    eax,[edx+0x30]
c000ff8b:	0f b6 c0             	movzx  eax,al
c000ff8e:	50                   	push   eax
c000ff8f:	e8 c0 fd ff ff       	call   c000fd54 <VgaText::combineCharAndColour(char, unsigned char)>
c000ff94:	5a                   	pop    edx
c000ff95:	5a                   	pop    edx
c000ff96:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c000ff9c:	53                   	push   ebx
c000ff9d:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c000ffa2:	99                   	cdq    
c000ffa3:	f7 f9                	idiv   ecx
c000ffa5:	8d 42 30             	lea    eax,[edx+0x30]
c000ffa8:	0f b6 c0             	movzx  eax,al
c000ffab:	50                   	push   eax
c000ffac:	e8 a3 fd ff ff       	call   c000fd54 <VgaText::combineCharAndColour(char, unsigned char)>
c000ffb1:	5a                   	pop    edx
c000ffb2:	5a                   	pop    edx
c000ffb3:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c000ffb9:	53                   	push   ebx
c000ffba:	a1 a4 47 02 c0       	mov    eax,ds:0xc00247a4
c000ffbf:	99                   	cdq    
c000ffc0:	f7 fd                	idiv   ebp
c000ffc2:	99                   	cdq    
c000ffc3:	f7 f9                	idiv   ecx
c000ffc5:	8d 42 30             	lea    eax,[edx+0x30]
c000ffc8:	0f b6 c0             	movzx  eax,al
c000ffcb:	50                   	push   eax
c000ffcc:	e8 83 fd ff ff       	call   c000fd54 <VgaText::combineCharAndColour(char, unsigned char)>
c000ffd1:	5d                   	pop    ebp
c000ffd2:	5a                   	pop    edx
c000ffd3:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c000ffd9:	53                   	push   ebx
c000ffda:	a1 a4 47 02 c0       	mov    eax,ds:0xc00247a4
c000ffdf:	99                   	cdq    
c000ffe0:	f7 ff                	idiv   edi
c000ffe2:	99                   	cdq    
c000ffe3:	f7 f9                	idiv   ecx
c000ffe5:	8d 42 30             	lea    eax,[edx+0x30]
c000ffe8:	0f b6 c0             	movzx  eax,al
c000ffeb:	50                   	push   eax
c000ffec:	e8 63 fd ff ff       	call   c000fd54 <VgaText::combineCharAndColour(char, unsigned char)>
c000fff1:	5f                   	pop    edi
c000fff2:	5d                   	pop    ebp
c000fff3:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c000fff9:	53                   	push   ebx
c000fffa:	a1 a4 47 02 c0       	mov    eax,ds:0xc00247a4
c000ffff:	99                   	cdq    
c0010000:	f7 fe                	idiv   esi
c0010002:	99                   	cdq    
c0010003:	f7 f9                	idiv   ecx
c0010005:	8d 42 30             	lea    eax,[edx+0x30]
c0010008:	0f b6 c0             	movzx  eax,al
c001000b:	50                   	push   eax
c001000c:	e8 43 fd ff ff       	call   c000fd54 <VgaText::combineCharAndColour(char, unsigned char)>
c0010011:	5a                   	pop    edx
c0010012:	5e                   	pop    esi
c0010013:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c0010019:	53                   	push   ebx
c001001a:	a1 a4 47 02 c0       	mov    eax,ds:0xc00247a4
c001001f:	99                   	cdq    
c0010020:	f7 f9                	idiv   ecx
c0010022:	99                   	cdq    
c0010023:	f7 f9                	idiv   ecx
c0010025:	8d 42 30             	lea    eax,[edx+0x30]
c0010028:	0f b6 c0             	movzx  eax,al
c001002b:	50                   	push   eax
c001002c:	e8 23 fd ff ff       	call   c000fd54 <VgaText::combineCharAndColour(char, unsigned char)>
c0010031:	5f                   	pop    edi
c0010032:	5d                   	pop    ebp
c0010033:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c0010039:	53                   	push   ebx
c001003a:	a1 a4 47 02 c0       	mov    eax,ds:0xc00247a4
c001003f:	99                   	cdq    
c0010040:	f7 f9                	idiv   ecx
c0010042:	83 c2 30             	add    edx,0x30
c0010045:	0f b6 d2             	movzx  edx,dl
c0010048:	52                   	push   edx
c0010049:	e8 06 fd ff ff       	call   c000fd54 <VgaText::combineCharAndColour(char, unsigned char)>
c001004e:	5a                   	pop    edx
c001004f:	59                   	pop    ecx
c0010050:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c0010056:	5b                   	pop    ebx
c0010057:	5e                   	pop    esi
c0010058:	5f                   	pop    edi
c0010059:	5d                   	pop    ebp
c001005a:	c3                   	ret    
c001005b:	90                   	nop

c001005c <VgaText::updateTitle()>:
c001005c:	53                   	push   ebx
c001005d:	31 c0                	xor    eax,eax
c001005f:	83 ec 58             	sub    esp,0x58
c0010062:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0010066:	89 e1                	mov    ecx,esp
c0010068:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c001006c:	40                   	inc    eax
c001006d:	83 f8 50             	cmp    eax,0x50
c0010070:	75 f6                	jne    c0010068 <VgaText::updateTitle()+0xc>
c0010072:	31 c0                	xor    eax,eax
c0010074:	8a 9c 02 1e 10 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x101e]
c001007b:	84 db                	test   bl,bl
c001007d:	74 06                	je     c0010085 <VgaText::updateTitle()+0x29>
c001007f:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c0010082:	40                   	inc    eax
c0010083:	eb ef                	jmp    c0010074 <VgaText::updateTitle()+0x18>
c0010085:	8b 82 fc 0f 00 00    	mov    eax,DWORD PTR [edx+0xffc]
c001008b:	85 c0                	test   eax,eax
c001008d:	74 09                	je     c0010098 <VgaText::updateTitle()+0x3c>
c001008f:	53                   	push   ebx
c0010090:	53                   	push   ebx
c0010091:	51                   	push   ecx
c0010092:	52                   	push   edx
c0010093:	ff d0                	call   eax
c0010095:	83 c4 10             	add    esp,0x10
c0010098:	e8 59 fe ff ff       	call   c000fef6 <VgaText::updateDiskUsage()>
c001009d:	83 c4 58             	add    esp,0x58
c00100a0:	5b                   	pop    ebx
c00100a1:	c3                   	ret    

c00100a2 <VgaText::setTitleTextColour(VgaColour)>:
c00100a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00100a6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00100aa:	89 90 d8 0f 00 00    	mov    DWORD PTR [eax+0xfd8],edx
c00100b0:	eb aa                	jmp    c001005c <VgaText::updateTitle()>

c00100b2 <VgaText::setTitleColour(VgaColour)>:
c00100b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00100b6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00100ba:	89 90 d4 0f 00 00    	mov    DWORD PTR [eax+0xfd4],edx
c00100c0:	eb 9a                	jmp    c001005c <VgaText::updateTitle()>

c00100c2 <VgaText::setTitle(char*)>:
c00100c2:	53                   	push   ebx
c00100c3:	83 ec 10             	sub    esp,0x10
c00100c6:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00100ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00100ce:	8d 83 1e 10 00 00    	lea    eax,[ebx+0x101e]
c00100d4:	50                   	push   eax
c00100d5:	e8 cd 05 ff ff       	call   c00006a7 <strcpy>
c00100da:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00100de:	83 c4 18             	add    esp,0x18
c00100e1:	5b                   	pop    ebx
c00100e2:	e9 75 ff ff ff       	jmp    c001005c <VgaText::updateTitle()>
c00100e7:	90                   	nop

c00100e8 <VgaText::decrementCursor(bool)>:
c00100e8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00100ec:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00100f0:	8b 82 b0 0f 00 00    	mov    eax,DWORD PTR [edx+0xfb0]
c00100f6:	85 c0                	test   eax,eax
c00100f8:	74 07                	je     c0010101 <VgaText::decrementCursor(bool)+0x19>
c00100fa:	48                   	dec    eax
c00100fb:	89 82 b0 0f 00 00    	mov    DWORD PTR [edx+0xfb0],eax
c0010101:	84 c9                	test   cl,cl
c0010103:	74 09                	je     c001010e <VgaText::decrementCursor(bool)+0x26>
c0010105:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010109:	e9 64 fa ff ff       	jmp    c000fb72 <VgaText::updateCursor()>
c001010e:	c3                   	ret    
c001010f:	90                   	nop

c0010110 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0010110:	53                   	push   ebx
c0010111:	83 ec 08             	sub    esp,0x8
c0010114:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010118:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001011c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010120:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0010124:	3c 07                	cmp    al,0x7
c0010126:	75 2a                	jne    c0010152 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c0010128:	a1 84 35 02 c0       	mov    eax,ds:0xc0023584
c001012d:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0010135:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c001013d:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c0010145:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010149:	83 c4 08             	add    esp,0x8
c001014c:	5b                   	pop    ebx
c001014d:	e9 10 2c 00 00       	jmp    c0012d62 <Buzzer::beep(int, int, bool)>
c0010152:	3c 0d                	cmp    al,0xd
c0010154:	75 0c                	jne    c0010162 <VgaText::putchar(char, VgaColour, VgaColour)+0x52>
c0010156:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010160:	eb 3b                	jmp    c001019d <VgaText::putchar(char, VgaColour, VgaColour)+0x8d>
c0010162:	3c 0a                	cmp    al,0xa
c0010164:	75 40                	jne    c00101a6 <VgaText::putchar(char, VgaColour, VgaColour)+0x96>
c0010166:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c001016c:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010176:	8d 50 01             	lea    edx,[eax+0x1]
c0010179:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c001017f:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c0010185:	75 12                	jne    c0010199 <VgaText::putchar(char, VgaColour, VgaColour)+0x89>
c0010187:	83 ec 0c             	sub    esp,0xc
c001018a:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c0010190:	53                   	push   ebx
c0010191:	e8 2a fb ff ff       	call   c000fcc0 <VgaText::scrollScreen()>
c0010196:	83 c4 10             	add    esp,0x10
c0010199:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001019d:	83 c4 08             	add    esp,0x8
c00101a0:	5b                   	pop    ebx
c00101a1:	e9 cc f9 ff ff       	jmp    c000fb72 <VgaText::updateCursor()>
c00101a6:	3c 08                	cmp    al,0x8
c00101a8:	75 31                	jne    c00101db <VgaText::putchar(char, VgaColour, VgaColour)+0xcb>
c00101aa:	50                   	push   eax
c00101ab:	50                   	push   eax
c00101ac:	6a 01                	push   0x1
c00101ae:	53                   	push   ebx
c00101af:	e8 34 ff ff ff       	call   c00100e8 <VgaText::decrementCursor(bool)>
c00101b4:	5a                   	pop    edx
c00101b5:	59                   	pop    ecx
c00101b6:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c00101bc:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c00101c2:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c00101c8:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c00101ce:	6a 20                	push   0x20
c00101d0:	53                   	push   ebx
c00101d1:	e8 90 fb ff ff       	call   c000fd66 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00101d6:	83 c4 28             	add    esp,0x28
c00101d9:	5b                   	pop    ebx
c00101da:	c3                   	ret    
c00101db:	83 ec 08             	sub    esp,0x8
c00101de:	0f be c0             	movsx  eax,al
c00101e1:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c00101e7:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c00101ed:	51                   	push   ecx
c00101ee:	52                   	push   edx
c00101ef:	50                   	push   eax
c00101f0:	53                   	push   ebx
c00101f1:	e8 70 fb ff ff       	call   c000fd66 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00101f6:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c00101fa:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0010202:	83 c4 28             	add    esp,0x28
c0010205:	5b                   	pop    ebx
c0010206:	e9 29 fc ff ff       	jmp    c000fe34 <VgaText::incrementCursor(bool)>
c001020b:	90                   	nop

c001020c <VgaText::isShowingCursor()>:
c001020c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010210:	8a 80 bc 0f 00 00    	mov    al,BYTE PTR [eax+0xfbc]
c0010216:	c3                   	ret    
c0010217:	90                   	nop

c0010218 <VgaText::isBlinkDisabled()>:
c0010218:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001021c:	8a 80 bd 0f 00 00    	mov    al,BYTE PTR [eax+0xfbd]
c0010222:	83 f0 01             	xor    eax,0x1
c0010225:	c3                   	ret    

c0010226 <VgaText::setCursorHeight(int)>:
c0010226:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001022a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001022e:	89 90 b8 0f 00 00    	mov    DWORD PTR [eax+0xfb8],edx
c0010234:	0f b6 80 bc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfbc]
c001023b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001023f:	e9 48 f9 ff ff       	jmp    c000fb8c <VgaText::showCursor(bool)>

c0010244 <VgaText::getCursorHeight()>:
c0010244:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010248:	8b 80 b8 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb8]
c001024e:	c3                   	ret    

c001024f <setActiveTerminal(VgaText*)>:
c001024f:	53                   	push   ebx
c0010250:	83 ec 08             	sub    esp,0x8
c0010253:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010257:	85 db                	test   ebx,ebx
c0010259:	75 11                	jne    c001026c <setActiveTerminal(VgaText*)+0x1d>
c001025b:	c7 44 24 10 18 0a 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020a18
c0010263:	83 c4 08             	add    esp,0x8
c0010266:	5b                   	pop    ebx
c0010267:	e9 7a c9 ff ff       	jmp    c000cbe6 <panic(char const*)>
c001026c:	50                   	push   eax
c001026d:	50                   	push   eax
c001026e:	53                   	push   ebx
c001026f:	68 26 0a 02 c0       	push   0xc0020a26
c0010274:	e8 4f c8 ff ff       	call   c000cac8 <kprintf(char const*, ...)>
c0010279:	a1 64 35 02 c0       	mov    eax,ds:0xc0023564
c001027e:	83 c4 10             	add    esp,0x10
c0010281:	85 c0                	test   eax,eax
c0010283:	74 0c                	je     c0010291 <setActiveTerminal(VgaText*)+0x42>
c0010285:	83 ec 0c             	sub    esp,0xc
c0010288:	50                   	push   eax
c0010289:	e8 e4 f8 ff ff       	call   c000fb72 <VgaText::updateCursor()>
c001028e:	83 c4 10             	add    esp,0x10
c0010291:	89 1d 64 35 02 c0    	mov    DWORD PTR ds:0xc0023564,ebx
c0010297:	51                   	push   ecx
c0010298:	51                   	push   ecx
c0010299:	53                   	push   ebx
c001029a:	68 3e 0a 02 c0       	push   0xc0020a3e
c001029f:	e8 24 c8 ff ff       	call   c000cac8 <kprintf(char const*, ...)>
c00102a4:	83 c4 0c             	add    esp,0xc
c00102a7:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c00102ad:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c00102b3:	53                   	push   ebx
c00102b4:	e8 25 fb ff ff       	call   c000fdde <VgaText::setCursor(int, int)>
c00102b9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00102bc:	e8 57 ff ff ff       	call   c0010218 <VgaText::isBlinkDisabled()>
c00102c1:	5a                   	pop    edx
c00102c2:	0f b6 c0             	movzx  eax,al
c00102c5:	59                   	pop    ecx
c00102c6:	50                   	push   eax
c00102c7:	53                   	push   ebx
c00102c8:	e8 cf f8 ff ff       	call   c000fb9c <VgaText::disableBlink(bool)>
c00102cd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00102d0:	e8 6f ff ff ff       	call   c0010244 <VgaText::getCursorHeight()>
c00102d5:	5a                   	pop    edx
c00102d6:	59                   	pop    ecx
c00102d7:	50                   	push   eax
c00102d8:	53                   	push   ebx
c00102d9:	e8 48 ff ff ff       	call   c0010226 <VgaText::setCursorHeight(int)>
c00102de:	83 c4 10             	add    esp,0x10
c00102e1:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c00102e8:	75 0a                	jne    c00102f4 <setActiveTerminal(VgaText*)+0xa5>
c00102ea:	c7 83 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff8],0x0
c00102f4:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00102f8:	83 c4 08             	add    esp,0x8
c00102fb:	5b                   	pop    ebx
c00102fc:	e9 1d f8 ff ff       	jmp    c000fb1e <VgaText::load()>

c0010301 <doTerminalCycle()>:
c0010301:	83 ec 18             	sub    esp,0x18
c0010304:	a1 60 35 02 c0       	mov    eax,ds:0xc0023560
c0010309:	8b 80 c0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfc0]
c001030f:	50                   	push   eax
c0010310:	a3 60 35 02 c0       	mov    ds:0xc0023560,eax
c0010315:	e8 35 ff ff ff       	call   c001024f <setActiveTerminal(VgaText*)>
c001031a:	83 c4 1c             	add    esp,0x1c
c001031d:	c3                   	ret    

c001031e <VgaText::doUpdate()>:
c001031e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010322:	8b 80 04 10 00 00    	mov    eax,DWORD PTR [eax+0x1004]
c0010328:	85 c0                	test   eax,eax
c001032a:	74 02                	je     c001032e <VgaText::doUpdate()+0x10>
c001032c:	ff e0                	jmp    eax
c001032e:	c3                   	ret    
c001032f:	90                   	nop

c0010330 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0010330:	55                   	push   ebp
c0010331:	57                   	push   edi
c0010332:	56                   	push   esi
c0010333:	53                   	push   ebx
c0010334:	83 ec 1c             	sub    esp,0x1c
c0010337:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001033b:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010340:	c6 85 1d 10 00 00 01 	mov    BYTE PTR [ebp+0x101d],0x1
c0010347:	8d 7d 0c             	lea    edi,[ebp+0xc]
c001034a:	50                   	push   eax
c001034b:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010350:	50                   	push   eax
c0010351:	e8 58 f9 ff ff       	call   c000fcae <VgaText::combineColours(unsigned char, unsigned char)>
c0010356:	59                   	pop    ecx
c0010357:	0f b6 c0             	movzx  eax,al
c001035a:	5b                   	pop    ebx
c001035b:	31 c9                	xor    ecx,ecx
c001035d:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010365:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0010369:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c001036f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010373:	0f b7 db             	movzx  ebx,bx
c0010376:	01 db                	add    ebx,ebx
c0010378:	01 fb                	add    ebx,edi
c001037a:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001037d:	84 c0                	test   al,al
c001037f:	0f 84 38 01 00 00    	je     c00104bd <VgaText::puts(char const*, VgaColour, VgaColour)+0x18d>
c0010385:	3c 0d                	cmp    al,0xd
c0010387:	75 0f                	jne    c0010398 <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c0010389:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010393:	e9 1f 01 00 00       	jmp    c00104b7 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010398:	3c 0a                	cmp    al,0xa
c001039a:	75 5b                	jne    c00103f7 <VgaText::puts(char const*, VgaColour, VgaColour)+0xc7>
c001039c:	8b 85 b4 0f 00 00    	mov    eax,DWORD PTR [ebp+0xfb4]
c00103a2:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c00103ac:	8d 48 01             	lea    ecx,[eax+0x1]
c00103af:	89 8d b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],ecx
c00103b5:	3b 8d ac 0f 00 00    	cmp    ecx,DWORD PTR [ebp+0xfac]
c00103bb:	75 12                	jne    c00103cf <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c00103bd:	83 ec 0c             	sub    esp,0xc
c00103c0:	89 85 b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],eax
c00103c6:	55                   	push   ebp
c00103c7:	e8 f4 f8 ff ff       	call   c000fcc0 <VgaText::scrollScreen()>
c00103cc:	83 c4 10             	add    esp,0x10
c00103cf:	83 ec 0c             	sub    esp,0xc
c00103d2:	55                   	push   ebp
c00103d3:	e8 9a f7 ff ff       	call   c000fb72 <VgaText::updateCursor()>
c00103d8:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c00103e0:	83 c4 10             	add    esp,0x10
c00103e3:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c00103e9:	31 c9                	xor    ecx,ecx
c00103eb:	0f b7 db             	movzx  ebx,bx
c00103ee:	01 db                	add    ebx,ebx
c00103f0:	01 fb                	add    ebx,edi
c00103f2:	e9 c0 00 00 00       	jmp    c00104b7 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c00103f7:	3c 08                	cmp    al,0x8
c00103f9:	75 4e                	jne    c0010449 <VgaText::puts(char const*, VgaColour, VgaColour)+0x119>
c00103fb:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00103ff:	53                   	push   ebx
c0010400:	53                   	push   ebx
c0010401:	6a 01                	push   0x1
c0010403:	55                   	push   ebp
c0010404:	e8 df fc ff ff       	call   c00100e8 <VgaText::decrementCursor(bool)>
c0010409:	58                   	pop    eax
c001040a:	5a                   	pop    edx
c001040b:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010411:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010417:	ff b5 cc 0f 00 00    	push   DWORD PTR [ebp+0xfcc]
c001041d:	ff b5 d0 0f 00 00    	push   DWORD PTR [ebp+0xfd0]
c0010423:	6a 20                	push   0x20
c0010425:	55                   	push   ebp
c0010426:	e8 3b f9 ff ff       	call   c000fd66 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001042b:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010433:	83 c4 20             	add    esp,0x20
c0010436:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c001043c:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010440:	0f b7 db             	movzx  ebx,bx
c0010443:	01 db                	add    ebx,ebx
c0010445:	01 fb                	add    ebx,edi
c0010447:	eb 6e                	jmp    c00104b7 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010449:	51                   	push   ecx
c001044a:	51                   	push   ecx
c001044b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001044f:	50                   	push   eax
c0010450:	e8 ff f8 ff ff       	call   c000fd54 <VgaText::combineCharAndColour(char, unsigned char)>
c0010455:	83 c4 10             	add    esp,0x10
c0010458:	66 89 03             	mov    WORD PTR [ebx],ax
c001045b:	39 2d 64 35 02 c0    	cmp    DWORD PTR ds:0xc0023564,ebp
c0010461:	75 2a                	jne    c001048d <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010463:	8b 85 18 10 00 00    	mov    eax,DWORD PTR [ebp+0x1018]
c0010469:	85 c0                	test   eax,eax
c001046b:	74 20                	je     c001048d <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c001046d:	52                   	push   edx
c001046e:	52                   	push   edx
c001046f:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010475:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c001047b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001047f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010483:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c0010486:	51                   	push   ecx
c0010487:	55                   	push   ebp
c0010488:	ff d0                	call   eax
c001048a:	83 c4 20             	add    esp,0x20
c001048d:	83 c3 02             	add    ebx,0x2
c0010490:	50                   	push   eax
c0010491:	50                   	push   eax
c0010492:	6a 00                	push   0x0
c0010494:	55                   	push   ebp
c0010495:	e8 9a f9 ff ff       	call   c000fe34 <VgaText::incrementCursor(bool)>
c001049a:	83 c4 10             	add    esp,0x10
c001049d:	83 bd b0 0f 00 00 00 	cmp    DWORD PTR [ebp+0xfb0],0x0
c00104a4:	75 0f                	jne    c00104b5 <VgaText::puts(char const*, VgaColour, VgaColour)+0x185>
c00104a6:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c00104ae:	0f b7 db             	movzx  ebx,bx
c00104b1:	01 db                	add    ebx,ebx
c00104b3:	01 fb                	add    ebx,edi
c00104b5:	b1 01                	mov    cl,0x1
c00104b7:	46                   	inc    esi
c00104b8:	e9 bd fe ff ff       	jmp    c001037a <VgaText::puts(char const*, VgaColour, VgaColour)+0x4a>
c00104bd:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00104c1:	83 ec 0c             	sub    esp,0xc
c00104c4:	55                   	push   ebp
c00104c5:	e8 a8 f6 ff ff       	call   c000fb72 <VgaText::updateCursor()>
c00104ca:	83 c4 10             	add    esp,0x10
c00104cd:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00104d1:	84 c9                	test   cl,cl
c00104d3:	74 0c                	je     c00104e1 <VgaText::puts(char const*, VgaColour, VgaColour)+0x1b1>
c00104d5:	83 ec 0c             	sub    esp,0xc
c00104d8:	55                   	push   ebp
c00104d9:	e8 40 fe ff ff       	call   c001031e <VgaText::doUpdate()>
c00104de:	83 c4 10             	add    esp,0x10
c00104e1:	c6 85 1d 10 00 00 00 	mov    BYTE PTR [ebp+0x101d],0x0
c00104e8:	83 c4 1c             	add    esp,0x1c
c00104eb:	5b                   	pop    ebx
c00104ec:	5e                   	pop    esi
c00104ed:	5f                   	pop    edi
c00104ee:	5d                   	pop    ebp
c00104ef:	c3                   	ret    

c00104f0 <VgaText::clearScreen()>:
c00104f0:	57                   	push   edi
c00104f1:	56                   	push   esi
c00104f2:	31 f6                	xor    esi,esi
c00104f4:	53                   	push   ebx
c00104f5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00104f9:	52                   	push   edx
c00104fa:	6a 00                	push   0x0
c00104fc:	6a 00                	push   0x0
c00104fe:	53                   	push   ebx
c00104ff:	e8 da f8 ff ff       	call   c000fdde <VgaText::setCursor(int, int)>
c0010504:	c6 83 1d 10 00 00 01 	mov    BYTE PTR [ebx+0x101d],0x1
c001050b:	83 c4 10             	add    esp,0x10
c001050e:	39 b3 ac 0f 00 00    	cmp    DWORD PTR [ebx+0xfac],esi
c0010514:	7e 26                	jle    c001053c <VgaText::clearScreen()+0x4c>
c0010516:	31 ff                	xor    edi,edi
c0010518:	50                   	push   eax
c0010519:	50                   	push   eax
c001051a:	56                   	push   esi
c001051b:	57                   	push   edi
c001051c:	47                   	inc    edi
c001051d:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010523:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010529:	6a 20                	push   0x20
c001052b:	53                   	push   ebx
c001052c:	e8 35 f8 ff ff       	call   c000fd66 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010531:	83 c4 20             	add    esp,0x20
c0010534:	83 ff 50             	cmp    edi,0x50
c0010537:	75 df                	jne    c0010518 <VgaText::clearScreen()+0x28>
c0010539:	46                   	inc    esi
c001053a:	eb d2                	jmp    c001050e <VgaText::clearScreen()+0x1e>
c001053c:	83 ec 0c             	sub    esp,0xc
c001053f:	53                   	push   ebx
c0010540:	e8 d9 fd ff ff       	call   c001031e <VgaText::doUpdate()>
c0010545:	c6 83 1d 10 00 00 00 	mov    BYTE PTR [ebx+0x101d],0x0
c001054c:	83 c4 10             	add    esp,0x10
c001054f:	5b                   	pop    ebx
c0010550:	5e                   	pop    esi
c0010551:	5f                   	pop    edi
c0010552:	c3                   	ret    
c0010553:	90                   	nop

c0010554 <VgaText::putchar(char)>:
c0010554:	56                   	push   esi
c0010555:	53                   	push   ebx
c0010556:	83 ec 14             	sub    esp,0x14
c0010559:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001055d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010561:	3c 5b                	cmp    al,0x5b
c0010563:	75 21                	jne    c0010586 <VgaText::putchar(char)+0x32>
c0010565:	80 bb dc 0f 00 00 00 	cmp    BYTE PTR [ebx+0xfdc],0x0
c001056c:	74 28                	je     c0010596 <VgaText::putchar(char)+0x42>
c001056e:	66 c7 83 dc 0f 00 00 00 01 	mov    WORD PTR [ebx+0xfdc],0x100
c0010577:	c7 83 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff0],0x0
c0010581:	e9 e2 00 00 00       	jmp    c0010668 <VgaText::putchar(char)+0x114>
c0010586:	3c 1b                	cmp    al,0x1b
c0010588:	75 0c                	jne    c0010596 <VgaText::putchar(char)+0x42>
c001058a:	c6 83 dc 0f 00 00 01 	mov    BYTE PTR [ebx+0xfdc],0x1
c0010591:	e9 d2 00 00 00       	jmp    c0010668 <VgaText::putchar(char)+0x114>
c0010596:	8a 8b dd 0f 00 00    	mov    cl,BYTE PTR [ebx+0xfdd]
c001059c:	84 c9                	test   cl,cl
c001059e:	0f 84 ab 00 00 00    	je     c001064f <VgaText::putchar(char)+0xfb>
c00105a4:	8d 50 c0             	lea    edx,[eax-0x40]
c00105a7:	80 fa 3e             	cmp    dl,0x3e
c00105aa:	0f 87 82 00 00 00    	ja     c0010632 <VgaText::putchar(char)+0xde>
c00105b0:	3c 6d                	cmp    al,0x6d
c00105b2:	75 4d                	jne    c0010601 <VgaText::putchar(char)+0xad>
c00105b4:	31 f6                	xor    esi,esi
c00105b6:	31 d2                	xor    edx,edx
c00105b8:	31 c0                	xor    eax,eax
c00105ba:	39 b3 f0 0f 00 00    	cmp    DWORD PTR [ebx+0xff0],esi
c00105c0:	7e 30                	jle    c00105f2 <VgaText::putchar(char)+0x9e>
c00105c2:	0f be 94 33 de 0f 00 00 	movsx  edx,BYTE PTR [ebx+esi*1+0xfde]
c00105ca:	80 fa 3b             	cmp    dl,0x3b
c00105cd:	75 17                	jne    c00105e6 <VgaText::putchar(char)+0x92>
c00105cf:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00105d3:	50                   	push   eax
c00105d4:	53                   	push   ebx
c00105d5:	e8 fc f5 ff ff       	call   c000fbd6 <VgaText::doANSI_SGR(int)>
c00105da:	59                   	pop    ecx
c00105db:	31 d2                	xor    edx,edx
c00105dd:	58                   	pop    eax
c00105de:	31 c0                	xor    eax,eax
c00105e0:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00105e4:	eb 09                	jmp    c00105ef <VgaText::putchar(char)+0x9b>
c00105e6:	6b c0 0a             	imul   eax,eax,0xa
c00105e9:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c00105ed:	88 ca                	mov    dl,cl
c00105ef:	46                   	inc    esi
c00105f0:	eb c8                	jmp    c00105ba <VgaText::putchar(char)+0x66>
c00105f2:	84 d2                	test   dl,dl
c00105f4:	74 31                	je     c0010627 <VgaText::putchar(char)+0xd3>
c00105f6:	50                   	push   eax
c00105f7:	53                   	push   ebx
c00105f8:	e8 d9 f5 ff ff       	call   c000fbd6 <VgaText::doANSI_SGR(int)>
c00105fd:	58                   	pop    eax
c00105fe:	5a                   	pop    edx
c00105ff:	eb 26                	jmp    c0010627 <VgaText::putchar(char)+0xd3>
c0010601:	3c 4a                	cmp    al,0x4a
c0010603:	75 22                	jne    c0010627 <VgaText::putchar(char)+0xd3>
c0010605:	80 bb de 0f 00 00 32 	cmp    BYTE PTR [ebx+0xfde],0x32
c001060c:	75 19                	jne    c0010627 <VgaText::putchar(char)+0xd3>
c001060e:	83 ec 0c             	sub    esp,0xc
c0010611:	53                   	push   ebx
c0010612:	e8 d9 fe ff ff       	call   c00104f0 <VgaText::clearScreen()>
c0010617:	83 c4 0c             	add    esp,0xc
c001061a:	6a 00                	push   0x0
c001061c:	6a 00                	push   0x0
c001061e:	53                   	push   ebx
c001061f:	e8 ba f7 ff ff       	call   c000fdde <VgaText::setCursor(int, int)>
c0010624:	83 c4 10             	add    esp,0x10
c0010627:	66 c7 83 dc 0f 00 00 00 00 	mov    WORD PTR [ebx+0xfdc],0x0
c0010630:	eb 36                	jmp    c0010668 <VgaText::putchar(char)+0x114>
c0010632:	8b 93 f0 0f 00 00    	mov    edx,DWORD PTR [ebx+0xff0]
c0010638:	83 fa 0e             	cmp    edx,0xe
c001063b:	7f 2b                	jg     c0010668 <VgaText::putchar(char)+0x114>
c001063d:	8d 4a 01             	lea    ecx,[edx+0x1]
c0010640:	89 8b f0 0f 00 00    	mov    DWORD PTR [ebx+0xff0],ecx
c0010646:	88 84 13 de 0f 00 00 	mov    BYTE PTR [ebx+edx*1+0xfde],al
c001064d:	eb 19                	jmp    c0010668 <VgaText::putchar(char)+0x114>
c001064f:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010655:	0f be c0             	movsx  eax,al
c0010658:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c001065e:	50                   	push   eax
c001065f:	53                   	push   ebx
c0010660:	e8 ab fa ff ff       	call   c0010110 <VgaText::putchar(char, VgaColour, VgaColour)>
c0010665:	83 c4 10             	add    esp,0x10
c0010668:	83 c4 14             	add    esp,0x14
c001066b:	5b                   	pop    ebx
c001066c:	5e                   	pop    esi
c001066d:	c3                   	ret    

c001066e <VgaText::puts(char const*)>:
c001066e:	53                   	push   ebx
c001066f:	83 ec 08             	sub    esp,0x8
c0010672:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010676:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0010679:	84 c0                	test   al,al
c001067b:	74 12                	je     c001068f <VgaText::puts(char const*)+0x21>
c001067d:	43                   	inc    ebx
c001067e:	51                   	push   ecx
c001067f:	51                   	push   ecx
c0010680:	50                   	push   eax
c0010681:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010685:	e8 ca fe ff ff       	call   c0010554 <VgaText::putchar(char)>
c001068a:	83 c4 10             	add    esp,0x10
c001068d:	eb e7                	jmp    c0010676 <VgaText::puts(char const*)+0x8>
c001068f:	83 c4 08             	add    esp,0x8
c0010692:	5b                   	pop    ebx
c0010693:	c3                   	ret    

c0010694 <VgaText::putx(unsigned int)>:
c0010694:	57                   	push   edi
c0010695:	b9 11 00 00 00       	mov    ecx,0x11
c001069a:	56                   	push   esi
c001069b:	be 5a 0a 02 c0       	mov    esi,0xc0020a5a
c00106a0:	53                   	push   ebx
c00106a1:	83 ec 20             	sub    esp,0x20
c00106a4:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00106a8:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c00106ac:	fc                   	cld    
c00106ad:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00106af:	be 08 00 00 00       	mov    esi,0x8
c00106b4:	50                   	push   eax
c00106b5:	50                   	push   eax
c00106b6:	89 d8                	mov    eax,ebx
c00106b8:	c1 e3 04             	shl    ebx,0x4
c00106bb:	c1 e8 1c             	shr    eax,0x1c
c00106be:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c00106c3:	50                   	push   eax
c00106c4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00106c8:	e8 87 fe ff ff       	call   c0010554 <VgaText::putchar(char)>
c00106cd:	83 c4 10             	add    esp,0x10
c00106d0:	4e                   	dec    esi
c00106d1:	75 e1                	jne    c00106b4 <VgaText::putx(unsigned int)+0x20>
c00106d3:	83 c4 20             	add    esp,0x20
c00106d6:	5b                   	pop    ebx
c00106d7:	5e                   	pop    esi
c00106d8:	5f                   	pop    edi
c00106d9:	c3                   	ret    

c00106da <VgaText::VgaText(char const*)>:
c00106da:	57                   	push   edi
c00106db:	56                   	push   esi
c00106dc:	53                   	push   ebx
c00106dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106e1:	83 ec 08             	sub    esp,0x8
c00106e4:	6a 00                	push   0x0
c00106e6:	50                   	push   eax
c00106e7:	e8 b8 05 00 00       	call   c0010ca4 <UnixFile::UnixFile(int)>
c00106ec:	83 c4 10             	add    esp,0x10
c00106ef:	ba c0 0a 02 c0       	mov    edx,0xc0020ac0
c00106f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106f8:	89 10                	mov    DWORD PTR [eax],edx
c00106fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106fe:	c7 80 d4 0f 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xfd4],0x1
c0010708:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001070c:	c7 80 d8 0f 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0xfd8],0xf
c0010716:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001071a:	c6 80 dc 0f 00 00 00 	mov    BYTE PTR [eax+0xfdc],0x0
c0010721:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010725:	c6 80 dd 0f 00 00 00 	mov    BYTE PTR [eax+0xfdd],0x0
c001072c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010730:	c7 80 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff0],0x0
c001073a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001073e:	c7 80 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff8],0x0
c0010748:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001074c:	c6 80 1c 10 00 00 00 	mov    BYTE PTR [eax+0x101c],0x0
c0010753:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010757:	c6 80 1d 10 00 00 00 	mov    BYTE PTR [eax+0x101d],0x0
c001075e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010762:	8d 90 fc 0f 00 00    	lea    edx,[eax+0xffc]
c0010768:	bb 40 35 02 c0       	mov    ebx,0xc0023540
c001076d:	b8 08 00 00 00       	mov    eax,0x8
c0010772:	fc                   	cld    
c0010773:	89 d7                	mov    edi,edx
c0010775:	89 de                	mov    esi,ebx
c0010777:	89 c1                	mov    ecx,eax
c0010779:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001077b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001077f:	05 1e 10 00 00       	add    eax,0x101e
c0010784:	83 ec 08             	sub    esp,0x8
c0010787:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001078b:	50                   	push   eax
c001078c:	e8 16 ff fe ff       	call   c00006a7 <strcpy>
c0010791:	83 c4 10             	add    esp,0x10
c0010794:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010798:	c7 80 ac 0f 00 00 18 00 00 00 	mov    DWORD PTR [eax+0xfac],0x18
c00107a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00107a6:	83 c0 0c             	add    eax,0xc
c00107a9:	83 ec 04             	sub    esp,0x4
c00107ac:	68 00 0f 00 00       	push   0xf00
c00107b1:	6a 00                	push   0x0
c00107b3:	50                   	push   eax
c00107b4:	e8 4f fe fe ff       	call   c0000608 <memset>
c00107b9:	83 c4 10             	add    esp,0x10
c00107bc:	83 ec 04             	sub    esp,0x4
c00107bf:	6a 00                	push   0x0
c00107c1:	6a 07                	push   0x7
c00107c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00107c7:	e8 c2 f4 ff ff       	call   c000fc8e <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00107cc:	83 c4 10             	add    esp,0x10
c00107cf:	83 ec 08             	sub    esp,0x8
c00107d2:	6a 02                	push   0x2
c00107d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00107d8:	e8 49 fa ff ff       	call   c0010226 <VgaText::setCursorHeight(int)>
c00107dd:	83 c4 10             	add    esp,0x10
c00107e0:	83 ec 04             	sub    esp,0x4
c00107e3:	6a 00                	push   0x0
c00107e5:	6a 00                	push   0x0
c00107e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00107eb:	e8 ee f5 ff ff       	call   c000fdde <VgaText::setCursor(int, int)>
c00107f0:	83 c4 10             	add    esp,0x10
c00107f3:	83 ec 08             	sub    esp,0x8
c00107f6:	6a 01                	push   0x1
c00107f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00107fc:	e8 8b f3 ff ff       	call   c000fb8c <VgaText::showCursor(bool)>
c0010801:	83 c4 10             	add    esp,0x10
c0010804:	83 ec 08             	sub    esp,0x8
c0010807:	6a 01                	push   0x1
c0010809:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001080d:	e8 8a f3 ff ff       	call   c000fb9c <VgaText::disableBlink(bool)>
c0010812:	83 c4 10             	add    esp,0x10
c0010815:	83 ec 0c             	sub    esp,0xc
c0010818:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001081c:	e8 cf fc ff ff       	call   c00104f0 <VgaText::clearScreen()>
c0010821:	83 c4 10             	add    esp,0x10
c0010824:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010828:	c6 80 f4 0f 00 00 00 	mov    BYTE PTR [eax+0xff4],0x0
c001082f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010833:	05 9e 10 00 00       	add    eax,0x109e
c0010838:	83 ec 04             	sub    esp,0x4
c001083b:	68 96 00 00 00       	push   0x96
c0010840:	6a 00                	push   0x0
c0010842:	50                   	push   eax
c0010843:	e8 c0 fd fe ff       	call   c0000608 <memset>
c0010848:	83 c4 10             	add    esp,0x10
c001084b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001084f:	05 34 11 00 00       	add    eax,0x1134
c0010854:	83 ec 04             	sub    esp,0x4
c0010857:	68 2c 01 00 00       	push   0x12c
c001085c:	6a 00                	push   0x0
c001085e:	50                   	push   eax
c001085f:	e8 a4 fd fe ff       	call   c0000608 <memset>
c0010864:	83 c4 10             	add    esp,0x10
c0010867:	90                   	nop
c0010868:	5b                   	pop    ebx
c0010869:	5e                   	pop    esi
c001086a:	5f                   	pop    edi
c001086b:	c3                   	ret    

c001086c <VgaText::receiveKey(unsigned char)>:
c001086c:	55                   	push   ebp
c001086d:	57                   	push   edi
c001086e:	56                   	push   esi
c001086f:	53                   	push   ebx
c0010870:	83 ec 1c             	sub    esp,0x1c
c0010873:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0010877:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001087b:	84 db                	test   bl,bl
c001087d:	0f 84 c9 00 00 00    	je     c001094c <VgaText::receiveKey(unsigned char)+0xe0>
c0010883:	8d be 9e 10 00 00    	lea    edi,[esi+0x109e]
c0010889:	80 fb 08             	cmp    bl,0x8
c001088c:	75 2c                	jne    c00108ba <VgaText::receiveKey(unsigned char)+0x4e>
c001088e:	83 ec 0c             	sub    esp,0xc
c0010891:	57                   	push   edi
c0010892:	e8 8e fd fe ff       	call   c0000625 <strlen>
c0010897:	83 c4 10             	add    esp,0x10
c001089a:	85 c0                	test   eax,eax
c001089c:	74 41                	je     c00108df <VgaText::receiveKey(unsigned char)+0x73>
c001089e:	50                   	push   eax
c001089f:	50                   	push   eax
c00108a0:	6a 08                	push   0x8
c00108a2:	56                   	push   esi
c00108a3:	e8 ac fc ff ff       	call   c0010554 <VgaText::putchar(char)>
c00108a8:	89 3c 24             	mov    DWORD PTR [esp],edi
c00108ab:	e8 75 fd fe ff       	call   c0000625 <strlen>
c00108b0:	c6 84 06 9d 10 00 00 00 	mov    BYTE PTR [esi+eax*1+0x109d],0x0
c00108b8:	eb 22                	jmp    c00108dc <VgaText::receiveKey(unsigned char)+0x70>
c00108ba:	0f be c3             	movsx  eax,bl
c00108bd:	52                   	push   edx
c00108be:	52                   	push   edx
c00108bf:	50                   	push   eax
c00108c0:	56                   	push   esi
c00108c1:	e8 8e fc ff ff       	call   c0010554 <VgaText::putchar(char)>
c00108c6:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c00108ca:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00108cf:	59                   	pop    ecx
c00108d0:	5d                   	pop    ebp
c00108d1:	8d 44 24 16          	lea    eax,[esp+0x16]
c00108d5:	50                   	push   eax
c00108d6:	57                   	push   edi
c00108d7:	e8 82 fe fe ff       	call   c000075e <strcat>
c00108dc:	83 c4 10             	add    esp,0x10
c00108df:	80 be 1c 10 00 00 00 	cmp    BYTE PTR [esi+0x101c],0x0
c00108e6:	75 05                	jne    c00108ed <VgaText::receiveKey(unsigned char)+0x81>
c00108e8:	80 fb 0a             	cmp    bl,0xa
c00108eb:	75 53                	jne    c0010940 <VgaText::receiveKey(unsigned char)+0xd4>
c00108ed:	83 ec 0c             	sub    esp,0xc
c00108f0:	8d 9e 34 11 00 00    	lea    ebx,[esi+0x1134]
c00108f6:	53                   	push   ebx
c00108f7:	e8 29 fd fe ff       	call   c0000625 <strlen>
c00108fc:	89 3c 24             	mov    DWORD PTR [esp],edi
c00108ff:	89 c5                	mov    ebp,eax
c0010901:	e8 1f fd fe ff       	call   c0000625 <strlen>
c0010906:	83 c4 10             	add    esp,0x10
c0010909:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c001090d:	3d 2c 01 00 00       	cmp    eax,0x12c
c0010912:	76 10                	jbe    c0010924 <VgaText::receiveKey(unsigned char)+0xb8>
c0010914:	83 ec 0c             	sub    esp,0xc
c0010917:	68 6b 0a 02 c0       	push   0xc0020a6b
c001091c:	e8 c5 c2 ff ff       	call   c000cbe6 <panic(char const*)>
c0010921:	83 c4 10             	add    esp,0x10
c0010924:	50                   	push   eax
c0010925:	50                   	push   eax
c0010926:	57                   	push   edi
c0010927:	53                   	push   ebx
c0010928:	e8 31 fe fe ff       	call   c000075e <strcat>
c001092d:	83 c4 0c             	add    esp,0xc
c0010930:	68 96 00 00 00       	push   0x96
c0010935:	6a 00                	push   0x0
c0010937:	57                   	push   edi
c0010938:	e8 cb fc fe ff       	call   c0000608 <memset>
c001093d:	83 c4 10             	add    esp,0x10
c0010940:	83 ec 0c             	sub    esp,0xc
c0010943:	56                   	push   esi
c0010944:	e8 d5 f9 ff ff       	call   c001031e <VgaText::doUpdate()>
c0010949:	83 c4 10             	add    esp,0x10
c001094c:	83 c4 1c             	add    esp,0x1c
c001094f:	5b                   	pop    ebx
c0010950:	5e                   	pop    esi
c0010951:	5f                   	pop    edi
c0010952:	5d                   	pop    ebp
c0010953:	c3                   	ret    

c0010954 <VgaText::write(unsigned long long, void*, int*)>:
c0010954:	55                   	push   ebp
c0010955:	57                   	push   edi
c0010956:	56                   	push   esi
c0010957:	53                   	push   ebx
c0010958:	83 ec 0c             	sub    esp,0xc
c001095b:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001095f:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0010963:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010967:	c6 86 1d 10 00 00 01 	mov    BYTE PTR [esi+0x101d],0x1
c001096e:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0010971:	39 eb                	cmp    ebx,ebp
c0010973:	74 13                	je     c0010988 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0010975:	43                   	inc    ebx
c0010976:	50                   	push   eax
c0010977:	50                   	push   eax
c0010978:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c001097c:	50                   	push   eax
c001097d:	56                   	push   esi
c001097e:	e8 d1 fb ff ff       	call   c0010554 <VgaText::putchar(char)>
c0010983:	83 c4 10             	add    esp,0x10
c0010986:	eb e9                	jmp    c0010971 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0010988:	83 ec 0c             	sub    esp,0xc
c001098b:	c6 86 1d 10 00 00 00 	mov    BYTE PTR [esi+0x101d],0x0
c0010992:	56                   	push   esi
c0010993:	e8 86 f9 ff ff       	call   c001031e <VgaText::doUpdate()>
c0010998:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001099c:	89 38                	mov    DWORD PTR [eax],edi
c001099e:	83 c4 1c             	add    esp,0x1c
c00109a1:	31 c0                	xor    eax,eax
c00109a3:	5b                   	pop    ebx
c00109a4:	5e                   	pop    esi
c00109a5:	5f                   	pop    edi
c00109a6:	5d                   	pop    ebp
c00109a7:	c3                   	ret    

c00109a8 <newTerminal(char*)>:
c00109a8:	83 ec 28             	sub    esp,0x28
c00109ab:	68 60 12 00 00       	push   0x1260
c00109b0:	e8 c3 16 00 00       	call   c0012078 <operator new(unsigned long)>
c00109b5:	5a                   	pop    edx
c00109b6:	59                   	pop    ecx
c00109b7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00109bb:	50                   	push   eax
c00109bc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00109c0:	e8 15 fd ff ff       	call   c00106da <VgaText::VgaText(char const*)>
c00109c5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00109c9:	83 c4 2c             	add    esp,0x2c
c00109cc:	c3                   	ret    
c00109cd:	90                   	nop

c00109ce <TSS::TSS()>:
c00109ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00109d2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00109d9:	90                   	nop
c00109da:	c3                   	ret    
c00109db:	90                   	nop

c00109dc <TSS::setESP(unsigned long)>:
c00109dc:	55                   	push   ebp
c00109dd:	89 e5                	mov    ebp,esp
c00109df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00109e2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00109e5:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00109e8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00109eb:	90                   	nop
c00109ec:	5d                   	pop    ebp
c00109ed:	c3                   	ret    

c00109ee <TSS::flush()>:
c00109ee:	55                   	push   ebp
c00109ef:	89 e5                	mov    ebp,esp
c00109f1:	83 ec 10             	sub    esp,0x10
c00109f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00109f7:	8b 00                	mov    eax,DWORD PTR [eax]
c00109f9:	83 c8 03             	or     eax,0x3
c00109fc:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0010a00:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0010a04:	66 89 d0             	mov    ax,dx
c0010a07:	0f 00 d8             	ltr    ax
c0010a0a:	90                   	nop
c0010a0b:	c9                   	leave  
c0010a0c:	c3                   	ret    
c0010a0d:	90                   	nop

c0010a0e <TSS::setup(unsigned long, unsigned long)>:
c0010a0e:	55                   	push   ebp
c0010a0f:	89 e5                	mov    ebp,esp
c0010a11:	53                   	push   ebx
c0010a12:	83 ec 14             	sub    esp,0x14
c0010a15:	83 ec 0c             	sub    esp,0xc
c0010a18:	6a 68                	push   0x68
c0010a1a:	e8 a4 c6 ff ff       	call   c000d0c3 <malloc>
c0010a1f:	83 c4 10             	add    esp,0x10
c0010a22:	89 c2                	mov    edx,eax
c0010a24:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010a27:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010a2a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010a2d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010a30:	83 ec 04             	sub    esp,0x4
c0010a33:	6a 68                	push   0x68
c0010a35:	6a 00                	push   0x0
c0010a37:	50                   	push   eax
c0010a38:	e8 cb fb fe ff       	call   c0000608 <memset>
c0010a3d:	83 c4 10             	add    esp,0x10
c0010a40:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010a43:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010a46:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0010a4c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010a4f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010a52:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0010a58:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010a5b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010a5e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010a61:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010a64:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010a67:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010a6a:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0010a70:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010a73:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010a76:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0010a7c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010a7f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010a82:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0010a88:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010a8b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010a8e:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0010a94:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010a97:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010a9a:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0010a9d:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0010aa0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010aa3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010aa6:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010aa9:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0010aac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010aaf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ab2:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0010ab9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010abc:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
c0010abf:	e8 55 db 00 00       	call   c001e619 <CPU::readCR3()>
c0010ac4:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0010ac7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010aca:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010acd:	83 ec 08             	sub    esp,0x8
c0010ad0:	50                   	push   eax
c0010ad1:	8d 45 f0             	lea    eax,[ebp-0x10]
c0010ad4:	50                   	push   eax
c0010ad5:	e8 a6 b8 ff ff       	call   c000c380 <GDTEntry::setBase(unsigned int)>
c0010ada:	83 c4 10             	add    esp,0x10
c0010add:	83 ec 08             	sub    esp,0x8
c0010ae0:	6a 68                	push   0x68
c0010ae2:	8d 45 f0             	lea    eax,[ebp-0x10]
c0010ae5:	50                   	push   eax
c0010ae6:	e8 b1 b8 ff ff       	call   c000c39c <GDTEntry::setLimit(unsigned int)>
c0010aeb:	83 c4 10             	add    esp,0x10
c0010aee:	c6 45 f5 89          	mov    BYTE PTR [ebp-0xb],0x89
c0010af2:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0010af5:	83 e0 0f             	and    eax,0xf
c0010af8:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c0010afb:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0010afe:	83 c8 40             	or     eax,0x40
c0010b01:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c0010b04:	e8 a5 62 00 00       	call   c0016dae <thisCPU()>
c0010b09:	05 78 01 00 00       	add    eax,0x178
c0010b0e:	83 ec 04             	sub    esp,0x4
c0010b11:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0010b14:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0010b17:	50                   	push   eax
c0010b18:	e8 b3 b8 ff ff       	call   c000c3d0 <GDT::addEntry(GDTEntry)>
c0010b1d:	83 c4 10             	add    esp,0x10
c0010b20:	89 c2                	mov    edx,eax
c0010b22:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010b25:	89 10                	mov    DWORD PTR [eax],edx
c0010b27:	e8 82 62 00 00       	call   c0016dae <thisCPU()>
c0010b2c:	05 78 01 00 00       	add    eax,0x178
c0010b31:	83 ec 0c             	sub    esp,0xc
c0010b34:	50                   	push   eax
c0010b35:	e8 da b8 ff ff       	call   c000c414 <GDT::flush()>
c0010b3a:	83 c4 10             	add    esp,0x10
c0010b3d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010b40:	8b 00                	mov    eax,DWORD PTR [eax]
c0010b42:	83 ec 08             	sub    esp,0x8
c0010b45:	50                   	push   eax
c0010b46:	68 d4 0a 02 c0       	push   0xc0020ad4
c0010b4b:	e8 78 bf ff ff       	call   c000cac8 <kprintf(char const*, ...)>
c0010b50:	83 c4 10             	add    esp,0x10
c0010b53:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010b56:	8b 00                	mov    eax,DWORD PTR [eax]
c0010b58:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0010b5b:	c9                   	leave  
c0010b5c:	c3                   	ret    
c0010b5d:	90                   	nop

c0010b5e <ReservedFilename::isAtty()>:
c0010b5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010b62:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010b65:	31 c0                	xor    eax,eax
c0010b67:	83 fa 08             	cmp    edx,0x8
c0010b6a:	74 06                	je     c0010b72 <ReservedFilename::isAtty()+0x14>
c0010b6c:	83 fa 06             	cmp    edx,0x6
c0010b6f:	0f 94 c0             	sete   al
c0010b72:	c3                   	ret    
c0010b73:	90                   	nop

c0010b74 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0010b74:	55                   	push   ebp
c0010b75:	57                   	push   edi
c0010b76:	56                   	push   esi
c0010b77:	53                   	push   ebx
c0010b78:	83 ec 0c             	sub    esp,0xc
c0010b7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010b7f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0010b83:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010b86:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0010b8a:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0010b8e:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0010b92:	83 f8 08             	cmp    eax,0x8
c0010b95:	75 08                	jne    c0010b9f <ReservedFilename::read(unsigned long long, void*, int*)+0x2b>
c0010b97:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0010b9d:	eb 5c                	jmp    c0010bfb <ReservedFilename::read(unsigned long long, void*, int*)+0x87>
c0010b9f:	83 f8 06             	cmp    eax,0x6
c0010ba2:	75 3d                	jne    c0010be1 <ReservedFilename::read(unsigned long long, void*, int*)+0x6d>
c0010ba4:	83 ec 0c             	sub    esp,0xc
c0010ba7:	68 f2 0a 02 c0       	push   0xc0020af2
c0010bac:	e8 17 bf ff ff       	call   c000cac8 <kprintf(char const*, ...)>
c0010bb1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010bb6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0010bb9:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0010bbf:	8b 10                	mov    edx,DWORD PTR [eax]
c0010bc1:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c0010bc5:	89 6c 24 3c          	mov    DWORD PTR [esp+0x3c],ebp
c0010bc9:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c0010bcd:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c0010bd1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0010bd5:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0010bd8:	83 c4 1c             	add    esp,0x1c
c0010bdb:	5b                   	pop    ebx
c0010bdc:	5e                   	pop    esi
c0010bdd:	5f                   	pop    edi
c0010bde:	5d                   	pop    ebp
c0010bdf:	ff e0                	jmp    eax
c0010be1:	89 c2                	mov    edx,eax
c0010be3:	83 e2 fd             	and    edx,0xfffffffd
c0010be6:	83 fa 05             	cmp    edx,0x5
c0010be9:	74 ac                	je     c0010b97 <ReservedFilename::read(unsigned long long, void*, int*)+0x23>
c0010beb:	8d 50 f5             	lea    edx,[eax-0xb]
c0010bee:	83 fa 08             	cmp    edx,0x8
c0010bf1:	76 a4                	jbe    c0010b97 <ReservedFilename::read(unsigned long long, void*, int*)+0x23>
c0010bf3:	83 e8 15             	sub    eax,0x15
c0010bf6:	83 f8 08             	cmp    eax,0x8
c0010bf9:	76 9c                	jbe    c0010b97 <ReservedFilename::read(unsigned long long, void*, int*)+0x23>
c0010bfb:	83 c4 0c             	add    esp,0xc
c0010bfe:	31 c0                	xor    eax,eax
c0010c00:	5b                   	pop    ebx
c0010c01:	5e                   	pop    esi
c0010c02:	5f                   	pop    edi
c0010c03:	5d                   	pop    ebp
c0010c04:	c3                   	ret    
c0010c05:	90                   	nop

c0010c06 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0010c06:	55                   	push   ebp
c0010c07:	57                   	push   edi
c0010c08:	56                   	push   esi
c0010c09:	53                   	push   ebx
c0010c0a:	83 ec 0c             	sub    esp,0xc
c0010c0d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010c11:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0010c15:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c18:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0010c1c:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0010c20:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0010c24:	83 f8 08             	cmp    eax,0x8
c0010c27:	75 08                	jne    c0010c31 <ReservedFilename::write(unsigned long long, void*, int*)+0x2b>
c0010c29:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0010c2f:	eb 60                	jmp    c0010c91 <ReservedFilename::write(unsigned long long, void*, int*)+0x8b>
c0010c31:	83 f8 06             	cmp    eax,0x6
c0010c34:	75 3d                	jne    c0010c73 <ReservedFilename::write(unsigned long long, void*, int*)+0x6d>
c0010c36:	83 ec 0c             	sub    esp,0xc
c0010c39:	68 ff 0a 02 c0       	push   0xc0020aff
c0010c3e:	e8 85 be ff ff       	call   c000cac8 <kprintf(char const*, ...)>
c0010c43:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010c48:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0010c4b:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0010c51:	8b 10                	mov    edx,DWORD PTR [eax]
c0010c53:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c0010c57:	89 6c 24 3c          	mov    DWORD PTR [esp+0x3c],ebp
c0010c5b:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c0010c5f:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c0010c63:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0010c67:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0010c6a:	83 c4 1c             	add    esp,0x1c
c0010c6d:	5b                   	pop    ebx
c0010c6e:	5e                   	pop    esi
c0010c6f:	5f                   	pop    edi
c0010c70:	5d                   	pop    ebp
c0010c71:	ff e0                	jmp    eax
c0010c73:	83 f8 05             	cmp    eax,0x5
c0010c76:	75 04                	jne    c0010c7c <ReservedFilename::write(unsigned long long, void*, int*)+0x76>
c0010c78:	89 33                	mov    DWORD PTR [ebx],esi
c0010c7a:	eb 15                	jmp    c0010c91 <ReservedFilename::write(unsigned long long, void*, int*)+0x8b>
c0010c7c:	83 f8 07             	cmp    eax,0x7
c0010c7f:	74 a8                	je     c0010c29 <ReservedFilename::write(unsigned long long, void*, int*)+0x23>
c0010c81:	8d 50 f5             	lea    edx,[eax-0xb]
c0010c84:	83 fa 08             	cmp    edx,0x8
c0010c87:	76 a0                	jbe    c0010c29 <ReservedFilename::write(unsigned long long, void*, int*)+0x23>
c0010c89:	83 e8 15             	sub    eax,0x15
c0010c8c:	83 f8 08             	cmp    eax,0x8
c0010c8f:	76 98                	jbe    c0010c29 <ReservedFilename::write(unsigned long long, void*, int*)+0x23>
c0010c91:	83 c4 0c             	add    esp,0xc
c0010c94:	31 c0                	xor    eax,eax
c0010c96:	5b                   	pop    ebx
c0010c97:	5e                   	pop    esi
c0010c98:	5f                   	pop    edi
c0010c99:	5d                   	pop    ebp
c0010c9a:	c3                   	ret    
c0010c9b:	90                   	nop

c0010c9c <UnixFile::getFileDescriptor()>:
c0010c9c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010ca0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ca3:	c3                   	ret    

c0010ca4 <UnixFile::UnixFile(int)>:
c0010ca4:	83 ec 0c             	sub    esp,0xc
c0010ca7:	ba 64 0b 02 c0       	mov    edx,0xc0020b64
c0010cac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010cb0:	89 10                	mov    DWORD PTR [eax],edx
c0010cb2:	a1 60 25 02 c0       	mov    eax,ds:0xc0022560
c0010cb7:	8d 50 01             	lea    edx,[eax+0x1]
c0010cba:	89 15 60 25 02 c0    	mov    DWORD PTR ds:0xc0022560,edx
c0010cc0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010cc4:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0010cc7:	83 ec 08             	sub    esp,0x8
c0010cca:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010cce:	68 70 35 02 c0       	push   0xc0023570
c0010cd3:	e8 c0 dc 00 00       	call   c001e998 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0010cd8:	83 c4 10             	add    esp,0x10
c0010cdb:	90                   	nop
c0010cdc:	83 c4 0c             	add    esp,0xc
c0010cdf:	c3                   	ret    

c0010ce0 <ReservedFilename::ReservedFilename(int)>:
c0010ce0:	83 ec 0c             	sub    esp,0xc
c0010ce3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ce7:	83 ec 08             	sub    esp,0x8
c0010cea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010cee:	50                   	push   eax
c0010cef:	e8 b0 ff ff ff       	call   c0010ca4 <UnixFile::UnixFile(int)>
c0010cf4:	83 c4 10             	add    esp,0x10
c0010cf7:	ba 80 0b 02 c0       	mov    edx,0xc0020b80
c0010cfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d00:	89 10                	mov    DWORD PTR [eax],edx
c0010d02:	90                   	nop
c0010d03:	83 c4 0c             	add    esp,0xc
c0010d06:	c3                   	ret    
c0010d07:	90                   	nop

c0010d08 <UnixFile::~UnixFile()>:
c0010d08:	83 ec 1c             	sub    esp,0x1c
c0010d0b:	ba 64 0b 02 c0       	mov    edx,0xc0020b64
c0010d10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010d14:	89 10                	mov    DWORD PTR [eax],edx
c0010d16:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010d1e:	83 ec 0c             	sub    esp,0xc
c0010d21:	68 70 35 02 c0       	push   0xc0023570
c0010d26:	e8 bb db 00 00       	call   c001e8e6 <LinkedList<UnixFile>::getFirstElement()>
c0010d2b:	83 c4 10             	add    esp,0x10
c0010d2e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010d32:	83 ec 0c             	sub    esp,0xc
c0010d35:	68 70 35 02 c0       	push   0xc0023570
c0010d3a:	e8 af db 00 00       	call   c001e8ee <LinkedList<UnixFile>::removeFirst()>
c0010d3f:	83 c4 10             	add    esp,0x10
c0010d42:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010d46:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0010d4a:	74 3d                	je     c0010d89 <UnixFile::~UnixFile()+0x81>
c0010d4c:	83 ec 08             	sub    esp,0x8
c0010d4f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010d53:	68 70 35 02 c0       	push   0xc0023570
c0010d58:	e8 3b dc 00 00       	call   c001e998 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0010d5d:	83 c4 10             	add    esp,0x10
c0010d60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010d64:	8d 50 01             	lea    edx,[eax+0x1]
c0010d67:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0010d6b:	3d 88 13 00 00       	cmp    eax,0x1388
c0010d70:	0f 94 c0             	sete   al
c0010d73:	84 c0                	test   al,al
c0010d75:	74 a7                	je     c0010d1e <UnixFile::~UnixFile()+0x16>
c0010d77:	83 ec 0c             	sub    esp,0xc
c0010d7a:	68 3c 0b 02 c0       	push   0xc0020b3c
c0010d7f:	e8 62 be ff ff       	call   c000cbe6 <panic(char const*)>
c0010d84:	83 c4 10             	add    esp,0x10
c0010d87:	eb 95                	jmp    c0010d1e <UnixFile::~UnixFile()+0x16>
c0010d89:	90                   	nop
c0010d8a:	83 c4 1c             	add    esp,0x1c
c0010d8d:	c3                   	ret    

c0010d8e <UnixFile::~UnixFile()>:
c0010d8e:	83 ec 0c             	sub    esp,0xc
c0010d91:	83 ec 0c             	sub    esp,0xc
c0010d94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010d98:	e8 6b ff ff ff       	call   c0010d08 <UnixFile::~UnixFile()>
c0010d9d:	83 c4 10             	add    esp,0x10
c0010da0:	83 ec 08             	sub    esp,0x8
c0010da3:	6a 0c                	push   0xc
c0010da5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010da9:	e8 d9 12 00 00       	call   c0012087 <operator delete(void*, unsigned long)>
c0010dae:	83 c4 10             	add    esp,0x10
c0010db1:	83 c4 0c             	add    esp,0xc
c0010db4:	c3                   	ret    
c0010db5:	90                   	nop

c0010db6 <ReservedFilename::~ReservedFilename()>:
c0010db6:	83 ec 0c             	sub    esp,0xc
c0010db9:	ba 80 0b 02 c0       	mov    edx,0xc0020b80
c0010dbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010dc2:	89 10                	mov    DWORD PTR [eax],edx
c0010dc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010dc8:	83 ec 0c             	sub    esp,0xc
c0010dcb:	50                   	push   eax
c0010dcc:	e8 37 ff ff ff       	call   c0010d08 <UnixFile::~UnixFile()>
c0010dd1:	83 c4 10             	add    esp,0x10
c0010dd4:	90                   	nop
c0010dd5:	83 c4 0c             	add    esp,0xc
c0010dd8:	c3                   	ret    
c0010dd9:	90                   	nop

c0010dda <ReservedFilename::~ReservedFilename()>:
c0010dda:	83 ec 0c             	sub    esp,0xc
c0010ddd:	83 ec 0c             	sub    esp,0xc
c0010de0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010de4:	e8 cd ff ff ff       	call   c0010db6 <ReservedFilename::~ReservedFilename()>
c0010de9:	83 c4 10             	add    esp,0x10
c0010dec:	83 ec 08             	sub    esp,0x8
c0010def:	6a 0c                	push   0xc
c0010df1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010df5:	e8 8d 12 00 00       	call   c0012087 <operator delete(void*, unsigned long)>
c0010dfa:	83 c4 10             	add    esp,0x10
c0010dfd:	83 c4 0c             	add    esp,0xc
c0010e00:	c3                   	ret    

c0010e01 <getFromFileDescriptor(int)>:
c0010e01:	83 ec 18             	sub    esp,0x18
c0010e04:	68 70 35 02 c0       	push   0xc0023570
c0010e09:	e8 d8 da 00 00       	call   c001e8e6 <LinkedList<UnixFile>::getFirstElement()>
c0010e0e:	83 c4 10             	add    esp,0x10
c0010e11:	85 c0                	test   eax,eax
c0010e13:	74 18                	je     c0010e2d <getFromFileDescriptor(int)+0x2c>
c0010e15:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010e19:	39 50 04             	cmp    DWORD PTR [eax+0x4],edx
c0010e1c:	74 0f                	je     c0010e2d <getFromFileDescriptor(int)+0x2c>
c0010e1e:	52                   	push   edx
c0010e1f:	52                   	push   edx
c0010e20:	50                   	push   eax
c0010e21:	68 70 35 02 c0       	push   0xc0023570
c0010e26:	e8 65 db 00 00       	call   c001e990 <LinkedList<UnixFile>::getNext(UnixFile*)>
c0010e2b:	eb e1                	jmp    c0010e0e <getFromFileDescriptor(int)+0xd>
c0010e2d:	83 c4 0c             	add    esp,0xc
c0010e30:	c3                   	ret    

c0010e31 <__static_initialization_and_destruction_0(int, int)>:
c0010e31:	83 ec 0c             	sub    esp,0xc
c0010e34:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0010e39:	75 34                	jne    c0010e6f <__static_initialization_and_destruction_0(int, int)+0x3e>
c0010e3b:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0010e43:	75 2a                	jne    c0010e6f <__static_initialization_and_destruction_0(int, int)+0x3e>
c0010e45:	83 ec 0c             	sub    esp,0xc
c0010e48:	68 70 35 02 c0       	push   0xc0023570
c0010e4d:	e8 3c da 00 00       	call   c001e88e <LinkedList<UnixFile>::LinkedList()>
c0010e52:	83 c4 10             	add    esp,0x10
c0010e55:	83 ec 04             	sub    esp,0x4
c0010e58:	68 ec 24 02 c0       	push   0xc00224ec
c0010e5d:	68 70 35 02 c0       	push   0xc0023570
c0010e62:	68 8c e8 01 c0       	push   0xc001e88c
c0010e67:	e8 97 11 00 00       	call   c0012003 <__cxa_atexit>
c0010e6c:	83 c4 10             	add    esp,0x10
c0010e6f:	90                   	nop
c0010e70:	83 c4 0c             	add    esp,0xc
c0010e73:	c3                   	ret    

c0010e74 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0010e74:	83 ec 0c             	sub    esp,0xc
c0010e77:	83 ec 08             	sub    esp,0x8
c0010e7a:	68 ff ff 00 00       	push   0xffff
c0010e7f:	6a 01                	push   0x1
c0010e81:	e8 ab ff ff ff       	call   c0010e31 <__static_initialization_and_destruction_0(int, int)>
c0010e86:	83 c4 10             	add    esp,0x10
c0010e89:	83 c4 0c             	add    esp,0xc
c0010e8c:	c3                   	ret    
c0010e8d:	90                   	nop

c0010e8e <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0010e8e:	53                   	push   ebx
c0010e8f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010e93:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0010e97:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c0010e9d:	89 c8                	mov    eax,ecx
c0010e9f:	d1 e8                	shr    eax,1
c0010ea1:	03 05 68 25 02 c0    	add    eax,DWORD PTR ds:0xc0022568
c0010ea7:	83 e1 01             	and    ecx,0x1
c0010eaa:	8a 10                	mov    dl,BYTE PTR [eax]
c0010eac:	75 09                	jne    c0010eb7 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c0010eae:	83 e2 f0             	and    edx,0xfffffff0
c0010eb1:	09 da                	or     edx,ebx
c0010eb3:	88 10                	mov    BYTE PTR [eax],dl
c0010eb5:	5b                   	pop    ebx
c0010eb6:	c3                   	ret    
c0010eb7:	c1 e3 04             	shl    ebx,0x4
c0010eba:	83 e2 0f             	and    edx,0xf
c0010ebd:	09 da                	or     edx,ebx
c0010ebf:	88 10                	mov    BYTE PTR [eax],dl
c0010ec1:	5b                   	pop    ebx
c0010ec2:	c3                   	ret    

c0010ec3 <Virt::getPageState(unsigned long)>:
c0010ec3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010ec7:	8b 0d 68 25 02 c0    	mov    ecx,DWORD PTR ds:0xc0022568
c0010ecd:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0010ed3:	89 d0                	mov    eax,edx
c0010ed5:	d1 e8                	shr    eax,1
c0010ed7:	83 e2 01             	and    edx,0x1
c0010eda:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0010edd:	75 04                	jne    c0010ee3 <Virt::getPageState(unsigned long)+0x20>
c0010edf:	83 e0 0f             	and    eax,0xf
c0010ee2:	c3                   	ret    
c0010ee3:	c0 e8 04             	shr    al,0x4
c0010ee6:	c3                   	ret    

c0010ee7 <Virt::allocateKernelVirtualPages(int)>:
c0010ee7:	55                   	push   ebp
c0010ee8:	31 ed                	xor    ebp,ebp
c0010eea:	57                   	push   edi
c0010eeb:	56                   	push   esi
c0010eec:	53                   	push   ebx
c0010eed:	31 db                	xor    ebx,ebx
c0010eef:	83 ec 1c             	sub    esp,0x1c
c0010ef2:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010ef6:	8b 3d 64 25 02 c0    	mov    edi,DWORD PTR ds:0xc0022564
c0010efc:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0010f01:	57                   	push   edi
c0010f02:	e8 bc ff ff ff       	call   c0010ec3 <Virt::getPageState(unsigned long)>
c0010f07:	5a                   	pop    edx
c0010f08:	84 c0                	test   al,al
c0010f0a:	75 3a                	jne    c0010f46 <Virt::allocateKernelVirtualPages(int)+0x5f>
c0010f0c:	85 db                	test   ebx,ebx
c0010f0e:	75 02                	jne    c0010f12 <Virt::allocateKernelVirtualPages(int)+0x2b>
c0010f10:	89 fd                	mov    ebp,edi
c0010f12:	43                   	inc    ebx
c0010f13:	39 f3                	cmp    ebx,esi
c0010f15:	74 5a                	je     c0010f71 <Virt::allocateKernelVirtualPages(int)+0x8a>
c0010f17:	47                   	inc    edi
c0010f18:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0010f1e:	76 31                	jbe    c0010f51 <Virt::allocateKernelVirtualPages(int)+0x6a>
c0010f20:	c7 05 64 25 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0022564,0xc8000
c0010f2a:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0010f2f:	75 28                	jne    c0010f59 <Virt::allocateKernelVirtualPages(int)+0x72>
c0010f31:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0010f36:	bf 00 80 0c 00       	mov    edi,0xc8000
c0010f3b:	57                   	push   edi
c0010f3c:	e8 82 ff ff ff       	call   c0010ec3 <Virt::getPageState(unsigned long)>
c0010f41:	5a                   	pop    edx
c0010f42:	84 c0                	test   al,al
c0010f44:	74 c6                	je     c0010f0c <Virt::allocateKernelVirtualPages(int)+0x25>
c0010f46:	31 db                	xor    ebx,ebx
c0010f48:	47                   	inc    edi
c0010f49:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0010f4f:	77 cf                	ja     c0010f20 <Virt::allocateKernelVirtualPages(int)+0x39>
c0010f51:	89 3d 64 25 02 c0    	mov    DWORD PTR ds:0xc0022564,edi
c0010f57:	eb a8                	jmp    c0010f01 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0010f59:	83 ec 0c             	sub    esp,0xc
c0010f5c:	68 94 0b 02 c0       	push   0xc0020b94
c0010f61:	e8 80 bc ff ff       	call   c000cbe6 <panic(char const*)>
c0010f66:	8b 3d 64 25 02 c0    	mov    edi,DWORD PTR ds:0xc0022564
c0010f6c:	83 c4 10             	add    esp,0x10
c0010f6f:	eb 90                	jmp    c0010f01 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0010f71:	89 2d 64 25 02 c0    	mov    DWORD PTR ds:0xc0022564,ebp
c0010f77:	4b                   	dec    ebx
c0010f78:	74 5f                	je     c0010fd9 <Virt::allocateKernelVirtualPages(int)+0xf2>
c0010f7a:	85 f6                	test   esi,esi
c0010f7c:	74 3d                	je     c0010fbb <Virt::allocateKernelVirtualPages(int)+0xd4>
c0010f7e:	89 e8                	mov    eax,ebp
c0010f80:	31 db                	xor    ebx,ebx
c0010f82:	8d 7e ff             	lea    edi,[esi-0x1]
c0010f85:	eb 14                	jmp    c0010f9b <Virt::allocateKernelVirtualPages(int)+0xb4>
c0010f87:	6a 01                	push   0x1
c0010f89:	43                   	inc    ebx
c0010f8a:	50                   	push   eax
c0010f8b:	e8 fe fe ff ff       	call   c0010e8e <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0010f90:	58                   	pop    eax
c0010f91:	39 f3                	cmp    ebx,esi
c0010f93:	5a                   	pop    edx
c0010f94:	74 25                	je     c0010fbb <Virt::allocateKernelVirtualPages(int)+0xd4>
c0010f96:	a1 64 25 02 c0       	mov    eax,ds:0xc0022564
c0010f9b:	8d 50 01             	lea    edx,[eax+0x1]
c0010f9e:	85 db                	test   ebx,ebx
c0010fa0:	89 15 64 25 02 c0    	mov    DWORD PTR ds:0xc0022564,edx
c0010fa6:	74 20                	je     c0010fc8 <Virt::allocateKernelVirtualPages(int)+0xe1>
c0010fa8:	39 df                	cmp    edi,ebx
c0010faa:	75 db                	jne    c0010f87 <Virt::allocateKernelVirtualPages(int)+0xa0>
c0010fac:	6a 03                	push   0x3
c0010fae:	43                   	inc    ebx
c0010faf:	50                   	push   eax
c0010fb0:	e8 d9 fe ff ff       	call   c0010e8e <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0010fb5:	59                   	pop    ecx
c0010fb6:	39 f3                	cmp    ebx,esi
c0010fb8:	58                   	pop    eax
c0010fb9:	75 db                	jne    c0010f96 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0010fbb:	83 c4 1c             	add    esp,0x1c
c0010fbe:	89 e8                	mov    eax,ebp
c0010fc0:	5b                   	pop    ebx
c0010fc1:	c1 e0 0c             	shl    eax,0xc
c0010fc4:	5e                   	pop    esi
c0010fc5:	5f                   	pop    edi
c0010fc6:	5d                   	pop    ebp
c0010fc7:	c3                   	ret    
c0010fc8:	6a 02                	push   0x2
c0010fca:	bb 01 00 00 00       	mov    ebx,0x1
c0010fcf:	50                   	push   eax
c0010fd0:	e8 b9 fe ff ff       	call   c0010e8e <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0010fd5:	58                   	pop    eax
c0010fd6:	5a                   	pop    edx
c0010fd7:	eb bd                	jmp    c0010f96 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0010fd9:	6a 04                	push   0x4
c0010fdb:	8d 45 01             	lea    eax,[ebp+0x1]
c0010fde:	55                   	push   ebp
c0010fdf:	a3 64 25 02 c0       	mov    ds:0xc0022564,eax
c0010fe4:	e8 a5 fe ff ff       	call   c0010e8e <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0010fe9:	59                   	pop    ecx
c0010fea:	89 e8                	mov    eax,ebp
c0010fec:	5b                   	pop    ebx
c0010fed:	c1 e0 0c             	shl    eax,0xc
c0010ff0:	83 c4 1c             	add    esp,0x1c
c0010ff3:	5b                   	pop    ebx
c0010ff4:	5e                   	pop    esi
c0010ff5:	5f                   	pop    edi
c0010ff6:	5d                   	pop    ebp
c0010ff7:	c3                   	ret    

c0010ff8 <Virt::virtualMemorySetup()>:
c0010ff8:	53                   	push   ebx
c0010ff9:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0010ffe:	83 ec 08             	sub    esp,0x8
c0011001:	6a 0f                	push   0xf
c0011003:	53                   	push   ebx
c0011004:	43                   	inc    ebx
c0011005:	e8 84 fe ff ff       	call   c0010e8e <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001100a:	59                   	pop    ecx
c001100b:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011011:	58                   	pop    eax
c0011012:	75 ed                	jne    c0011001 <Virt::virtualMemorySetup()+0x9>
c0011014:	83 ec 08             	sub    esp,0x8
c0011017:	bb 00 80 0c 00       	mov    ebx,0xc8000
c001101c:	68 00 00 00 c8       	push   0xc8000000
c0011021:	68 3f 0d 02 c0       	push   0xc0020d3f
c0011026:	e8 9d ba ff ff       	call   c000cac8 <kprintf(char const*, ...)>
c001102b:	58                   	pop    eax
c001102c:	5a                   	pop    edx
c001102d:	68 00 f0 ff ef       	push   0xeffff000
c0011032:	68 53 0d 02 c0       	push   0xc0020d53
c0011037:	e8 8c ba ff ff       	call   c000cac8 <kprintf(char const*, ...)>
c001103c:	83 c4 10             	add    esp,0x10
c001103f:	83 ec 08             	sub    esp,0x8
c0011042:	6a 00                	push   0x0
c0011044:	53                   	push   ebx
c0011045:	43                   	inc    ebx
c0011046:	e8 43 fe ff ff       	call   c0010e8e <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001104b:	83 c4 10             	add    esp,0x10
c001104e:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011054:	75 e9                	jne    c001103f <Virt::virtualMemorySetup()+0x47>
c0011056:	bb 00 00 0d 00       	mov    ebx,0xd0000
c001105b:	83 ec 08             	sub    esp,0x8
c001105e:	6a 0f                	push   0xf
c0011060:	53                   	push   ebx
c0011061:	43                   	inc    ebx
c0011062:	e8 27 fe ff ff       	call   c0010e8e <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011067:	83 c4 10             	add    esp,0x10
c001106a:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0011070:	75 e9                	jne    c001105b <Virt::virtualMemorySetup()+0x63>
c0011072:	83 c4 08             	add    esp,0x8
c0011075:	5b                   	pop    ebx
c0011076:	c3                   	ret    

c0011077 <Virt::getAKernelVAS()>:
c0011077:	a1 7c 35 02 c0       	mov    eax,ds:0xc002357c
c001107c:	c3                   	ret    

c001107d <Virt::setupPageSwapping(int)>:
c001107d:	57                   	push   edi
c001107e:	56                   	push   esi
c001107f:	53                   	push   ebx
c0011080:	83 ec 1c             	sub    esp,0x1c
c0011083:	68 14 01 00 00       	push   0x114
c0011088:	e8 eb 0f 00 00       	call   c0012078 <operator new(unsigned long)>
c001108d:	83 c4 0c             	add    esp,0xc
c0011090:	89 c6                	mov    esi,eax
c0011092:	ff 35 1c 33 02 c0    	push   DWORD PTR ds:0xc002331c
c0011098:	68 67 0d 02 c0       	push   0xc0020d67
c001109d:	50                   	push   eax
c001109e:	e8 03 14 00 00       	call   c00124a6 <File::File(char const*, Process*)>
c00110a3:	89 34 24             	mov    DWORD PTR [esp],esi
c00110a6:	e8 d7 15 00 00       	call   c0012682 <File::unlink()>
c00110ab:	58                   	pop    eax
c00110ac:	5a                   	pop    edx
c00110ad:	6a 12                	push   0x12
c00110af:	56                   	push   esi
c00110b0:	e8 55 14 00 00       	call   c001250a <File::open(FileOpenMode)>
c00110b5:	83 c4 10             	add    esp,0x10
c00110b8:	85 c0                	test   eax,eax
c00110ba:	0f 85 bf 00 00 00    	jne    c001117f <Virt::setupPageSwapping(int)+0x102>
c00110c0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00110c4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00110cc:	c1 e3 08             	shl    ebx,0x8
c00110cf:	83 ec 0c             	sub    esp,0xc
c00110d2:	68 00 00 01 00       	push   0x10000
c00110d7:	e8 e7 bf ff ff       	call   c000d0c3 <malloc>
c00110dc:	83 c4 0c             	add    esp,0xc
c00110df:	89 c7                	mov    edi,eax
c00110e1:	68 00 00 01 00       	push   0x10000
c00110e6:	6a 00                	push   0x0
c00110e8:	50                   	push   eax
c00110e9:	e8 1a f5 fe ff       	call   c0000608 <memset>
c00110ee:	83 c4 10             	add    esp,0x10
c00110f1:	85 db                	test   ebx,ebx
c00110f3:	79 03                	jns    c00110f8 <Virt::setupPageSwapping(int)+0x7b>
c00110f5:	83 c3 0f             	add    ebx,0xf
c00110f8:	c1 fb 04             	sar    ebx,0x4
c00110fb:	4b                   	dec    ebx
c00110fc:	83 fb ff             	cmp    ebx,0xffffffff
c00110ff:	74 4b                	je     c001114c <Virt::setupPageSwapping(int)+0xcf>
c0011101:	83 ec 0c             	sub    esp,0xc
c0011104:	8b 06                	mov    eax,DWORD PTR [esi]
c0011106:	8d 54 24 18          	lea    edx,[esp+0x18]
c001110a:	52                   	push   edx
c001110b:	57                   	push   edi
c001110c:	6a 00                	push   0x0
c001110e:	68 00 00 01 00       	push   0x10000
c0011113:	56                   	push   esi
c0011114:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0011117:	83 c4 20             	add    esp,0x20
c001111a:	85 c0                	test   eax,eax
c001111c:	75 4e                	jne    c001116c <Virt::setupPageSwapping(int)+0xef>
c001111e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011122:	3d 00 00 01 00       	cmp    eax,0x10000
c0011127:	74 d2                	je     c00110fb <Virt::setupPageSwapping(int)+0x7e>
c0011129:	83 ec 08             	sub    esp,0x8
c001112c:	4b                   	dec    ebx
c001112d:	50                   	push   eax
c001112e:	68 ba 0d 02 c0       	push   0xc0020dba
c0011133:	e8 90 b9 ff ff       	call   c000cac8 <kprintf(char const*, ...)>
c0011138:	c7 04 24 c3 0d 02 c0 	mov    DWORD PTR [esp],0xc0020dc3
c001113f:	e8 a2 ba ff ff       	call   c000cbe6 <panic(char const*)>
c0011144:	83 c4 10             	add    esp,0x10
c0011147:	83 fb ff             	cmp    ebx,0xffffffff
c001114a:	75 b5                	jne    c0011101 <Virt::setupPageSwapping(int)+0x84>
c001114c:	83 ec 0c             	sub    esp,0xc
c001114f:	56                   	push   esi
c0011150:	e8 13 14 00 00       	call   c0012568 <File::close()>
c0011155:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011158:	e8 86 bf ff ff       	call   c000d0e3 <rfree>
c001115d:	89 34 24             	mov    DWORD PTR [esp],esi
c0011160:	8b 06                	mov    eax,DWORD PTR [esi]
c0011162:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011165:	83 c4 20             	add    esp,0x20
c0011168:	5b                   	pop    ebx
c0011169:	5e                   	pop    esi
c001116a:	5f                   	pop    edi
c001116b:	c3                   	ret    
c001116c:	83 ec 08             	sub    esp,0x8
c001116f:	50                   	push   eax
c0011170:	68 a2 0d 02 c0       	push   0xc0020da2
c0011175:	e8 4e b9 ff ff       	call   c000cac8 <kprintf(char const*, ...)>
c001117a:	83 c4 10             	add    esp,0x10
c001117d:	eb 9f                	jmp    c001111e <Virt::setupPageSwapping(int)+0xa1>
c001117f:	83 ec 08             	sub    esp,0x8
c0011182:	50                   	push   eax
c0011183:	68 7e 0d 02 c0       	push   0xc0020d7e
c0011188:	e8 3b b9 ff ff       	call   c000cac8 <kprintf(char const*, ...)>
c001118d:	c7 04 24 87 0d 02 c0 	mov    DWORD PTR [esp],0xc0020d87
c0011194:	e8 4d ba ff ff       	call   c000cbe6 <panic(char const*)>
c0011199:	83 c4 10             	add    esp,0x10
c001119c:	e9 1f ff ff ff       	jmp    c00110c0 <Virt::setupPageSwapping(int)+0x43>
c00111a1:	90                   	nop

c00111a2 <VAS::VAS()>:
c00111a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00111a6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00111ad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00111b1:	a3 7c 35 02 c0       	mov    ds:0xc002357c,eax
c00111b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00111ba:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c00111be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00111c2:	c6 00 01             	mov    BYTE PTR [eax],0x1
c00111c5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00111c9:	c7 40 08 00 10 00 c2 	mov    DWORD PTR [eax+0x8],0xc2001000
c00111d0:	90                   	nop
c00111d1:	c3                   	ret    

c00111d2 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00111d2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00111d6:	89 c2                	mov    edx,eax
c00111d8:	c1 e8 0a             	shr    eax,0xa
c00111db:	c1 ea 16             	shr    edx,0x16
c00111de:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00111e3:	19 c9                	sbb    ecx,ecx
c00111e5:	c1 e2 0c             	shl    edx,0xc
c00111e8:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c00111ee:	25 fc 0f 00 00       	and    eax,0xffc
c00111f3:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c00111fa:	01 d0                	add    eax,edx
c00111fc:	c3                   	ret    
c00111fd:	90                   	nop

c00111fe <VAS::getPageTableEntry(unsigned long)>:
c00111fe:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011202:	89 ca                	mov    edx,ecx
c0011204:	c1 e9 0a             	shr    ecx,0xa
c0011207:	c1 ea 16             	shr    edx,0x16
c001120a:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0011210:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0011216:	c1 e0 0c             	shl    eax,0xc
c0011219:	8d 04 08             	lea    eax,[eax+ecx*1]
c001121c:	c3                   	ret    

c001121d <Virt::freeKernelVirtualPages(unsigned long)>:
c001121d:	57                   	push   edi
c001121e:	56                   	push   esi
c001121f:	be 01 00 00 00       	mov    esi,0x1
c0011224:	53                   	push   ebx
c0011225:	83 ec 10             	sub    esp,0x10
c0011228:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001122c:	c1 eb 0c             	shr    ebx,0xc
c001122f:	eb 3f                	jmp    c0011270 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0011231:	e8 41 fe ff ff       	call   c0011077 <Virt::getAKernelVAS()>
c0011236:	83 ec 08             	sub    esp,0x8
c0011239:	57                   	push   edi
c001123a:	50                   	push   eax
c001123b:	e8 be ff ff ff       	call   c00111fe <VAS::getPageTableEntry(unsigned long)>
c0011240:	83 c4 10             	add    esp,0x10
c0011243:	8b 00                	mov    eax,DWORD PTR [eax]
c0011245:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011249:	f6 c4 04             	test   ah,0x4
c001124c:	75 5f                	jne    c00112ad <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c001124e:	80 fa 04             	cmp    dl,0x4
c0011251:	74 78                	je     c00112cb <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c0011253:	80 fa 02             	cmp    dl,0x2
c0011256:	0f 84 88 00 00 00    	je     c00112e4 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c001125c:	80 fa 03             	cmp    dl,0x3
c001125f:	0f 84 ad 00 00 00    	je     c0011312 <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c0011265:	fe ca                	dec    dl
c0011267:	0f 84 92 00 00 00    	je     c00112ff <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c001126d:	43                   	inc    ebx
c001126e:	31 f6                	xor    esi,esi
c0011270:	53                   	push   ebx
c0011271:	e8 4d fc ff ff       	call   c0010ec3 <Virt::getPageState(unsigned long)>
c0011276:	5f                   	pop    edi
c0011277:	89 df                	mov    edi,ebx
c0011279:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001127d:	c1 e7 0c             	shl    edi,0xc
c0011280:	84 c0                	test   al,al
c0011282:	75 ad                	jne    c0011231 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c0011284:	83 ec 0c             	sub    esp,0xc
c0011287:	68 c9 0d 02 c0       	push   0xc0020dc9
c001128c:	e8 55 b9 ff ff       	call   c000cbe6 <panic(char const*)>
c0011291:	e8 e1 fd ff ff       	call   c0011077 <Virt::getAKernelVAS()>
c0011296:	5a                   	pop    edx
c0011297:	59                   	pop    ecx
c0011298:	57                   	push   edi
c0011299:	50                   	push   eax
c001129a:	e8 5f ff ff ff       	call   c00111fe <VAS::getPageTableEntry(unsigned long)>
c001129f:	83 c4 10             	add    esp,0x10
c00112a2:	8b 00                	mov    eax,DWORD PTR [eax]
c00112a4:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00112a8:	f6 c4 04             	test   ah,0x4
c00112ab:	74 c0                	je     c001126d <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00112ad:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c00112b1:	25 00 f0 ff ff       	and    eax,0xfffff000
c00112b6:	83 ec 0c             	sub    esp,0xc
c00112b9:	50                   	push   eax
c00112ba:	e8 24 c3 ff ff       	call   c000d5e3 <Phys::freePage(unsigned long)>
c00112bf:	83 c4 10             	add    esp,0x10
c00112c2:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00112c6:	80 fa 04             	cmp    dl,0x4
c00112c9:	75 88                	jne    c0011253 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c00112cb:	89 f0                	mov    eax,esi
c00112cd:	84 c0                	test   al,al
c00112cf:	75 47                	jne    c0011318 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c00112d1:	c7 44 24 20 b4 0b 02 c0 	mov    DWORD PTR [esp+0x20],0xc0020bb4
c00112d9:	83 c4 10             	add    esp,0x10
c00112dc:	5b                   	pop    ebx
c00112dd:	5e                   	pop    esi
c00112de:	5f                   	pop    edi
c00112df:	e9 02 b9 ff ff       	jmp    c000cbe6 <panic(char const*)>
c00112e4:	89 f0                	mov    eax,esi
c00112e6:	84 c0                	test   al,al
c00112e8:	75 15                	jne    c00112ff <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c00112ea:	83 ec 0c             	sub    esp,0xc
c00112ed:	68 e5 0d 02 c0       	push   0xc0020de5
c00112f2:	e8 ef b8 ff ff       	call   c000cbe6 <panic(char const*)>
c00112f7:	83 c4 10             	add    esp,0x10
c00112fa:	e9 6e ff ff ff       	jmp    c001126d <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00112ff:	83 ec 08             	sub    esp,0x8
c0011302:	6a 00                	push   0x0
c0011304:	53                   	push   ebx
c0011305:	e8 84 fb ff ff       	call   c0010e8e <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001130a:	83 c4 10             	add    esp,0x10
c001130d:	e9 5b ff ff ff       	jmp    c001126d <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011312:	89 f0                	mov    eax,esi
c0011314:	84 c0                	test   al,al
c0011316:	75 15                	jne    c001132d <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c0011318:	83 ec 08             	sub    esp,0x8
c001131b:	6a 00                	push   0x0
c001131d:	53                   	push   ebx
c001131e:	e8 6b fb ff ff       	call   c0010e8e <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011323:	83 c4 10             	add    esp,0x10
c0011326:	83 c4 10             	add    esp,0x10
c0011329:	5b                   	pop    ebx
c001132a:	5e                   	pop    esi
c001132b:	5f                   	pop    edi
c001132c:	c3                   	ret    
c001132d:	c7 44 24 20 01 0e 02 c0 	mov    DWORD PTR [esp+0x20],0xc0020e01
c0011335:	83 c4 10             	add    esp,0x10
c0011338:	5b                   	pop    ebx
c0011339:	5e                   	pop    esi
c001133a:	5f                   	pop    edi
c001133b:	e9 a6 b8 ff ff       	jmp    c000cbe6 <panic(char const*)>

c0011340 <VAS::freeAllocatedPages(unsigned long)>:
c0011340:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011344:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011348:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c001134c:	74 09                	je     c0011357 <VAS::freeAllocatedPages(unsigned long)+0x17>
c001134e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0011352:	e9 c6 fe ff ff       	jmp    c001121d <Virt::freeKernelVirtualPages(unsigned long)>
c0011357:	c7 44 24 04 d8 0b 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020bd8
c001135f:	e9 64 b7 ff ff       	jmp    c000cac8 <kprintf(char const*, ...)>

c0011364 <VAS::virtualToPhysical(unsigned long)>:
c0011364:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011368:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001136c:	e8 8d fe ff ff       	call   c00111fe <VAS::getPageTableEntry(unsigned long)>
c0011371:	5a                   	pop    edx
c0011372:	8b 00                	mov    eax,DWORD PTR [eax]
c0011374:	59                   	pop    ecx
c0011375:	25 00 f0 ff ff       	and    eax,0xfffff000
c001137a:	c3                   	ret    
c001137b:	90                   	nop

c001137c <VAS::mapOtherVASIn(bool, VAS*)>:
c001137c:	83 ec 0c             	sub    esp,0xc
c001137f:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0011384:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011388:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001138b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001138f:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0011392:	19 c0                	sbb    eax,eax
c0011394:	83 ca 03             	or     edx,0x3
c0011397:	83 e0 fc             	and    eax,0xfffffffc
c001139a:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c00113a1:	e8 73 d2 00 00       	call   c001e619 <CPU::readCR3()>
c00113a6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00113aa:	83 c4 0c             	add    esp,0xc
c00113ad:	e9 8b d2 00 00       	jmp    c001e63d <CPU::writeCR3(unsigned long)>

c00113b2 <VAS::~VAS()>:
c00113b2:	83 ec 2c             	sub    esp,0x2c
c00113b5:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00113bd:	e8 a8 cb ff ff       	call   c000df6a <lockScheduler()>
c00113c2:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00113c7:	8b 00                	mov    eax,DWORD PTR [eax]
c00113c9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00113cc:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c00113d2:	83 ec 04             	sub    esp,0x4
c00113d5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00113d9:	6a 01                	push   0x1
c00113db:	50                   	push   eax
c00113dc:	e8 9b ff ff ff       	call   c001137c <VAS::mapOtherVASIn(bool, VAS*)>
c00113e1:	83 c4 10             	add    esp,0x10
c00113e4:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00113ec:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c00113f4:	0f 8f d7 00 00 00    	jg     c00114d1 <VAS::~VAS()+0x11f>
c00113fa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00113fe:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011401:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011405:	c1 e2 02             	shl    edx,0x2
c0011408:	01 d0                	add    eax,edx
c001140a:	8b 00                	mov    eax,DWORD PTR [eax]
c001140c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011410:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011414:	83 e0 01             	and    eax,0x1
c0011417:	0f 84 ab 00 00 00    	je     c00114c8 <VAS::~VAS()+0x116>
c001141d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0011425:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c001142d:	7f 75                	jg     c00114a4 <VAS::~VAS()+0xf2>
c001142f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011433:	c1 e0 0a             	shl    eax,0xa
c0011436:	89 c2                	mov    edx,eax
c0011438:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001143c:	01 d0                	add    eax,edx
c001143e:	c1 e0 0c             	shl    eax,0xc
c0011441:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011445:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001144a:	8b 00                	mov    eax,DWORD PTR [eax]
c001144c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001144f:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011455:	83 ec 04             	sub    esp,0x4
c0011458:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001145c:	6a 01                	push   0x1
c001145e:	50                   	push   eax
c001145f:	e8 6e fd ff ff       	call   c00111d2 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0011464:	83 c4 10             	add    esp,0x10
c0011467:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001146b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001146f:	8b 00                	mov    eax,DWORD PTR [eax]
c0011471:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011475:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011479:	25 01 04 00 00       	and    eax,0x401
c001147e:	3d 01 04 00 00       	cmp    eax,0x401
c0011483:	75 19                	jne    c001149e <VAS::~VAS()+0xec>
c0011485:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011489:	25 00 f0 ff ff       	and    eax,0xfffff000
c001148e:	83 ec 0c             	sub    esp,0xc
c0011491:	50                   	push   eax
c0011492:	e8 4c c1 ff ff       	call   c000d5e3 <Phys::freePage(unsigned long)>
c0011497:	83 c4 10             	add    esp,0x10
c001149a:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c001149e:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00114a2:	eb 81                	jmp    c0011425 <VAS::~VAS()+0x73>
c00114a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00114a8:	25 00 04 00 00       	and    eax,0x400
c00114ad:	74 19                	je     c00114c8 <VAS::~VAS()+0x116>
c00114af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00114b3:	25 00 f0 ff ff       	and    eax,0xfffff000
c00114b8:	83 ec 0c             	sub    esp,0xc
c00114bb:	50                   	push   eax
c00114bc:	e8 22 c1 ff ff       	call   c000d5e3 <Phys::freePage(unsigned long)>
c00114c1:	83 c4 10             	add    esp,0x10
c00114c4:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00114c8:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00114cc:	e9 1b ff ff ff       	jmp    c00113ec <VAS::~VAS()+0x3a>
c00114d1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00114d5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00114d8:	83 ec 0c             	sub    esp,0xc
c00114db:	50                   	push   eax
c00114dc:	e8 3c fd ff ff       	call   c001121d <Virt::freeKernelVirtualPages(unsigned long)>
c00114e1:	83 c4 10             	add    esp,0x10
c00114e4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00114e8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00114eb:	83 ec 0c             	sub    esp,0xc
c00114ee:	50                   	push   eax
c00114ef:	e8 ef c0 ff ff       	call   c000d5e3 <Phys::freePage(unsigned long)>
c00114f4:	83 c4 10             	add    esp,0x10
c00114f7:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00114fb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00114ff:	c1 e0 02             	shl    eax,0x2
c0011502:	83 ec 08             	sub    esp,0x8
c0011505:	50                   	push   eax
c0011506:	68 fc 0b 02 c0       	push   0xc0020bfc
c001150b:	e8 b8 b5 ff ff       	call   c000cac8 <kprintf(char const*, ...)>
c0011510:	83 c4 10             	add    esp,0x10
c0011513:	e8 54 ca ff ff       	call   c000df6c <unlockScheduler()>
c0011518:	90                   	nop
c0011519:	83 c4 2c             	add    esp,0x2c
c001151c:	c3                   	ret    
c001151d:	90                   	nop

c001151e <VAS::mapPage(unsigned long, unsigned long, int)>:
c001151e:	55                   	push   ebp
c001151f:	57                   	push   edi
c0011520:	56                   	push   esi
c0011521:	53                   	push   ebx
c0011522:	83 ec 1c             	sub    esp,0x1c
c0011525:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0011529:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001152d:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0011533:	77 08                	ja     c001153d <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0011535:	0f 20 d8             	mov    eax,cr3
c0011538:	39 47 0c             	cmp    DWORD PTR [edi+0xc],eax
c001153b:	75 47                	jne    c0011584 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c001153d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011541:	09 d8                	or     eax,ebx
c0011543:	a9 ff 0f 00 00       	test   eax,0xfff
c0011548:	75 57                	jne    c00115a1 <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c001154a:	89 de                	mov    esi,ebx
c001154c:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001154f:	c1 ee 16             	shr    esi,0x16
c0011552:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0011559:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c001155d:	74 54                	je     c00115b3 <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c001155f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011563:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0011569:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c001156d:	c1 e6 0c             	shl    esi,0xc
c0011570:	c1 eb 0a             	shr    ebx,0xa
c0011573:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0011579:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c001157c:	83 c4 1c             	add    esp,0x1c
c001157f:	5b                   	pop    ebx
c0011580:	5e                   	pop    esi
c0011581:	5f                   	pop    edi
c0011582:	5d                   	pop    ebp
c0011583:	c3                   	ret    
c0011584:	83 ec 0c             	sub    esp,0xc
c0011587:	68 1c 0c 02 c0       	push   0xc0020c1c
c001158c:	e8 37 b5 ff ff       	call   c000cac8 <kprintf(char const*, ...)>
c0011591:	83 c4 10             	add    esp,0x10
c0011594:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011598:	09 d8                	or     eax,ebx
c001159a:	a9 ff 0f 00 00       	test   eax,0xfff
c001159f:	74 a9                	je     c001154a <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c00115a1:	83 ec 0c             	sub    esp,0xc
c00115a4:	68 84 0c 02 c0       	push   0xc0020c84
c00115a9:	e8 38 b6 ff ff       	call   c000cbe6 <panic(char const*)>
c00115ae:	83 c4 10             	add    esp,0x10
c00115b1:	eb 97                	jmp    c001154a <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c00115b3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00115b7:	e8 b1 c0 ff ff       	call   c000d66d <Phys::allocatePage()>
c00115bc:	89 c5                	mov    ebp,eax
c00115be:	e8 b4 fa ff ff       	call   c0011077 <Virt::getAKernelVAS()>
c00115c3:	83 ec 0c             	sub    esp,0xc
c00115c6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00115ca:	6a 01                	push   0x1
c00115cc:	e8 16 f9 ff ff       	call   c0010ee7 <Virt::allocateKernelVirtualPages(int)>
c00115d1:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00115d8:	6a 01                	push   0x1
c00115da:	50                   	push   eax
c00115db:	55                   	push   ebp
c00115dc:	81 cd 07 04 00 00    	or     ebp,0x407
c00115e2:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00115e6:	51                   	push   ecx
c00115e7:	e8 1e 02 00 00       	call   c001180a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00115ec:	83 c4 1c             	add    esp,0x1c
c00115ef:	68 00 10 00 00       	push   0x1000
c00115f4:	6a 00                	push   0x0
c00115f6:	50                   	push   eax
c00115f7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00115fb:	e8 08 f0 fe ff       	call   c0000608 <memset>
c0011600:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011604:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0011607:	e8 11 fc ff ff       	call   c001121d <Virt::freeKernelVirtualPages(unsigned long)>
c001160c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011610:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0011613:	83 c4 10             	add    esp,0x10
c0011616:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0011619:	e9 41 ff ff ff       	jmp    c001155f <VAS::mapPage(unsigned long, unsigned long, int)+0x41>

c001161e <VAS::allocatePages(int, int)>:
c001161e:	55                   	push   ebp
c001161f:	57                   	push   edi
c0011620:	56                   	push   esi
c0011621:	53                   	push   ebx
c0011622:	83 ec 1c             	sub    esp,0x1c
c0011625:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011629:	e8 80 57 00 00       	call   c0016dae <thisCPU()>
c001162e:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0011634:	83 e0 01             	and    eax,0x1
c0011637:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c001163b:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001163f:	0f 85 d7 00 00 00    	jne    c001171c <VAS::allocatePages(int, int)+0xfe>
c0011645:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011648:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001164c:	85 c0                	test   eax,eax
c001164e:	0f 84 ac 00 00 00    	je     c0011700 <VAS::allocatePages(int, int)+0xe2>
c0011654:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0011658:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001165c:	c1 e6 0c             	shl    esi,0xc
c001165f:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0011663:	85 c0                	test   eax,eax
c0011665:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0011668:	7e 33                	jle    c001169d <VAS::allocatePages(int, int)+0x7f>
c001166a:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001166e:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011672:	81 cd 00 04 00 00    	or     ebp,0x400
c0011678:	e8 f0 bf ff ff       	call   c000d66d <Phys::allocatePage()>
c001167d:	55                   	push   ebp
c001167e:	53                   	push   ebx
c001167f:	50                   	push   eax
c0011680:	57                   	push   edi
c0011681:	e8 98 fe ff ff       	call   c001151e <VAS::mapPage(unsigned long, unsigned long, int)>
c0011686:	83 c4 10             	add    esp,0x10
c0011689:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001168e:	74 03                	je     c0011693 <VAS::allocatePages(int, int)+0x75>
c0011690:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011693:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011699:	39 de                	cmp    esi,ebx
c001169b:	75 db                	jne    c0011678 <VAS::allocatePages(int, int)+0x5a>
c001169d:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00116a2:	74 3f                	je     c00116e3 <VAS::allocatePages(int, int)+0xc5>
c00116a4:	c1 ee 0a             	shr    esi,0xa
c00116a7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00116ab:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c00116b1:	c1 eb 0a             	shr    ebx,0xa
c00116b4:	81 ee 00 00 40 00    	sub    esi,0x400000
c00116ba:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00116c0:	81 eb 00 00 40 00    	sub    ebx,0x400000
c00116c6:	39 f3                	cmp    ebx,esi
c00116c8:	77 0d                	ja     c00116d7 <VAS::allocatePages(int, int)+0xb9>
c00116ca:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00116cd:	81 c3 00 10 00 00    	add    ebx,0x1000
c00116d3:	39 de                	cmp    esi,ebx
c00116d5:	73 f3                	jae    c00116ca <VAS::allocatePages(int, int)+0xac>
c00116d7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00116db:	83 c4 1c             	add    esp,0x1c
c00116de:	5b                   	pop    ebx
c00116df:	5e                   	pop    esi
c00116e0:	5f                   	pop    edi
c00116e1:	5d                   	pop    ebp
c00116e2:	c3                   	ret    
c00116e3:	e8 31 cf 00 00       	call   c001e619 <CPU::readCR3()>
c00116e8:	83 ec 0c             	sub    esp,0xc
c00116eb:	50                   	push   eax
c00116ec:	e8 4c cf 00 00       	call   c001e63d <CPU::writeCR3(unsigned long)>
c00116f1:	83 c4 10             	add    esp,0x10
c00116f4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00116f8:	83 c4 1c             	add    esp,0x1c
c00116fb:	5b                   	pop    ebx
c00116fc:	5e                   	pop    esi
c00116fd:	5f                   	pop    edi
c00116fe:	5d                   	pop    ebp
c00116ff:	c3                   	ret    
c0011700:	83 ec 0c             	sub    esp,0xc
c0011703:	68 a8 0c 02 c0       	push   0xc0020ca8
c0011708:	e8 d9 b4 ff ff       	call   c000cbe6 <panic(char const*)>
c001170d:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011710:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011714:	83 c4 10             	add    esp,0x10
c0011717:	e9 38 ff ff ff       	jmp    c0011654 <VAS::allocatePages(int, int)+0x36>
c001171c:	83 ec 0c             	sub    esp,0xc
c001171f:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0011723:	e8 bf f7 ff ff       	call   c0010ee7 <Virt::allocateKernelVirtualPages(int)>
c0011728:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001172c:	83 c4 10             	add    esp,0x10
c001172f:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0011734:	0f 87 94 00 00 00    	ja     c00117ce <VAS::allocatePages(int, int)+0x1b0>
c001173a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001173e:	85 d2                	test   edx,edx
c0011740:	7e 3c                	jle    c001177e <VAS::allocatePages(int, int)+0x160>
c0011742:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0011746:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001174a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001174e:	c1 e5 0c             	shl    ebp,0xc
c0011751:	81 ce 00 04 00 00    	or     esi,0x400
c0011757:	01 dd                	add    ebp,ebx
c0011759:	e8 0f bf ff ff       	call   c000d66d <Phys::allocatePage()>
c001175e:	56                   	push   esi
c001175f:	53                   	push   ebx
c0011760:	50                   	push   eax
c0011761:	57                   	push   edi
c0011762:	e8 b7 fd ff ff       	call   c001151e <VAS::mapPage(unsigned long, unsigned long, int)>
c0011767:	83 c4 10             	add    esp,0x10
c001176a:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001176f:	74 03                	je     c0011774 <VAS::allocatePages(int, int)+0x156>
c0011771:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011774:	81 c3 00 10 00 00    	add    ebx,0x1000
c001177a:	39 dd                	cmp    ebp,ebx
c001177c:	75 db                	jne    c0011759 <VAS::allocatePages(int, int)+0x13b>
c001177e:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011783:	0f 84 5a ff ff ff    	je     c00116e3 <VAS::allocatePages(int, int)+0xc5>
c0011789:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001178d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011791:	89 d3                	mov    ebx,edx
c0011793:	c1 e0 0c             	shl    eax,0xc
c0011796:	c1 eb 0a             	shr    ebx,0xa
c0011799:	01 d0                	add    eax,edx
c001179b:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00117a1:	c1 e8 0a             	shr    eax,0xa
c00117a4:	81 eb 00 00 40 00    	sub    ebx,0x400000
c00117aa:	25 00 f0 ff ff       	and    eax,0xfffff000
c00117af:	2d 00 00 40 00       	sub    eax,0x400000
c00117b4:	39 c3                	cmp    ebx,eax
c00117b6:	0f 87 1b ff ff ff    	ja     c00116d7 <VAS::allocatePages(int, int)+0xb9>
c00117bc:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00117bf:	81 c3 00 10 00 00    	add    ebx,0x1000
c00117c5:	39 d8                	cmp    eax,ebx
c00117c7:	73 f3                	jae    c00117bc <VAS::allocatePages(int, int)+0x19e>
c00117c9:	e9 09 ff ff ff       	jmp    c00116d7 <VAS::allocatePages(int, int)+0xb9>
c00117ce:	e8 db 55 00 00       	call   c0016dae <thisCPU()>
c00117d3:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c00117da:	0f 84 5a ff ff ff    	je     c001173a <VAS::allocatePages(int, int)+0x11c>
c00117e0:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c00117e8:	e9 4d ff ff ff       	jmp    c001173a <VAS::allocatePages(int, int)+0x11c>
c00117ed:	90                   	nop

c00117ee <VAS::setCPUSpecific(unsigned long)>:
c00117ee:	83 ec 0c             	sub    esp,0xc
c00117f1:	6a 05                	push   0x5
c00117f3:	68 00 00 40 c2       	push   0xc2400000
c00117f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00117fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011800:	e8 19 fd ff ff       	call   c001151e <VAS::mapPage(unsigned long, unsigned long, int)>
c0011805:	83 c4 1c             	add    esp,0x1c
c0011808:	c3                   	ret    
c0011809:	90                   	nop

c001180a <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c001180a:	55                   	push   ebp
c001180b:	57                   	push   edi
c001180c:	56                   	push   esi
c001180d:	53                   	push   ebx
c001180e:	83 ec 1c             	sub    esp,0x1c
c0011811:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011815:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0011819:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001181d:	e8 8c 55 00 00       	call   c0016dae <thisCPU()>
c0011822:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0011828:	83 e0 01             	and    eax,0x1
c001182b:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001182f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011833:	85 c0                	test   eax,eax
c0011835:	7e 39                	jle    c0011870 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x66>
c0011837:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001183b:	89 f3                	mov    ebx,esi
c001183d:	c1 e0 0c             	shl    eax,0xc
c0011840:	01 f0                	add    eax,esi
c0011842:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011846:	55                   	push   ebp
c0011847:	53                   	push   ebx
c0011848:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001184c:	29 f0                	sub    eax,esi
c001184e:	01 d8                	add    eax,ebx
c0011850:	50                   	push   eax
c0011851:	57                   	push   edi
c0011852:	e8 c7 fc ff ff       	call   c001151e <VAS::mapPage(unsigned long, unsigned long, int)>
c0011857:	83 c4 10             	add    esp,0x10
c001185a:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001185f:	74 03                	je     c0011864 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x5a>
c0011861:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011864:	81 c3 00 10 00 00    	add    ebx,0x1000
c001186a:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c001186e:	75 d6                	jne    c0011846 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x3c>
c0011870:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011875:	74 42                	je     c00118b9 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xaf>
c0011877:	89 f3                	mov    ebx,esi
c0011879:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001187d:	c1 eb 0a             	shr    ebx,0xa
c0011880:	c1 e0 0c             	shl    eax,0xc
c0011883:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011889:	01 f0                	add    eax,esi
c001188b:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011891:	c1 e8 0a             	shr    eax,0xa
c0011894:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011899:	2d 00 00 40 00       	sub    eax,0x400000
c001189e:	39 c3                	cmp    ebx,eax
c00118a0:	77 0d                	ja     c00118af <VAS::mapRange(unsigned long, unsigned long, int, int)+0xa5>
c00118a2:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00118a5:	81 c3 00 10 00 00    	add    ebx,0x1000
c00118ab:	39 d8                	cmp    eax,ebx
c00118ad:	73 f3                	jae    c00118a2 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x98>
c00118af:	83 c4 1c             	add    esp,0x1c
c00118b2:	89 f0                	mov    eax,esi
c00118b4:	5b                   	pop    ebx
c00118b5:	5e                   	pop    esi
c00118b6:	5f                   	pop    edi
c00118b7:	5d                   	pop    ebp
c00118b8:	c3                   	ret    
c00118b9:	e8 5b cd 00 00       	call   c001e619 <CPU::readCR3()>
c00118be:	83 ec 0c             	sub    esp,0xc
c00118c1:	50                   	push   eax
c00118c2:	e8 76 cd 00 00       	call   c001e63d <CPU::writeCR3(unsigned long)>
c00118c7:	89 f0                	mov    eax,esi
c00118c9:	83 c4 10             	add    esp,0x10
c00118cc:	83 c4 1c             	add    esp,0x1c
c00118cf:	5b                   	pop    ebx
c00118d0:	5e                   	pop    esi
c00118d1:	5f                   	pop    edi
c00118d2:	5d                   	pop    ebp
c00118d3:	c3                   	ret    

c00118d4 <VAS::VAS(VAS*)>:
c00118d4:	53                   	push   ebx
c00118d5:	83 ec 38             	sub    esp,0x38
c00118d8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00118dc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00118e3:	e8 a9 c6 ff ff       	call   c000df91 <lockStuff()>
c00118e8:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00118ec:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00118ef:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00118f3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00118f6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00118fa:	8a 50 01             	mov    dl,BYTE PTR [eax+0x1]
c00118fd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011901:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0011904:	e8 64 bd ff ff       	call   c000d66d <Phys::allocatePage()>
c0011909:	89 c2                	mov    edx,eax
c001190b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001190f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0011912:	e8 60 f7 ff ff       	call   c0011077 <Virt::getAKernelVAS()>
c0011917:	89 c3                	mov    ebx,eax
c0011919:	83 ec 0c             	sub    esp,0xc
c001191c:	6a 01                	push   0x1
c001191e:	e8 c4 f5 ff ff       	call   c0010ee7 <Virt::allocateKernelVirtualPages(int)>
c0011923:	83 c4 10             	add    esp,0x10
c0011926:	89 c2                	mov    edx,eax
c0011928:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001192c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001192f:	83 ec 0c             	sub    esp,0xc
c0011932:	6a 03                	push   0x3
c0011934:	6a 01                	push   0x1
c0011936:	52                   	push   edx
c0011937:	50                   	push   eax
c0011938:	53                   	push   ebx
c0011939:	e8 cc fe ff ff       	call   c001180a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001193e:	83 c4 20             	add    esp,0x20
c0011941:	89 c2                	mov    edx,eax
c0011943:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011947:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001194a:	83 ec 04             	sub    esp,0x4
c001194d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0011951:	6a 01                	push   0x1
c0011953:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011957:	e8 20 fa ff ff       	call   c001137c <VAS::mapOtherVASIn(bool, VAS*)>
c001195c:	83 c4 10             	add    esp,0x10
c001195f:	83 ec 0c             	sub    esp,0xc
c0011962:	6a 01                	push   0x1
c0011964:	e8 7e f5 ff ff       	call   c0010ee7 <Virt::allocateKernelVirtualPages(int)>
c0011969:	83 c4 10             	add    esp,0x10
c001196c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0011970:	83 ec 0c             	sub    esp,0xc
c0011973:	6a 01                	push   0x1
c0011975:	e8 6d f5 ff ff       	call   c0010ee7 <Virt::allocateKernelVirtualPages(int)>
c001197a:	83 c4 10             	add    esp,0x10
c001197d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0011981:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0011989:	81 7c 24 2c ff 03 00 00 	cmp    DWORD PTR [esp+0x2c],0x3ff
c0011991:	0f 8f 5e 02 00 00    	jg     c0011bf5 <VAS::VAS(VAS*)+0x321>
c0011997:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001199c:	8b 00                	mov    eax,DWORD PTR [eax]
c001199e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00119a1:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c00119a7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00119aa:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00119ae:	c1 e2 02             	shl    edx,0x2
c00119b1:	01 d0                	add    eax,edx
c00119b3:	8b 00                	mov    eax,DWORD PTR [eax]
c00119b5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00119b9:	83 ec 08             	sub    esp,0x8
c00119bc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00119c0:	68 1b 0e 02 c0       	push   0xc0020e1b
c00119c5:	e8 fe b0 ff ff       	call   c000cac8 <kprintf(char const*, ...)>
c00119ca:	83 c4 10             	add    esp,0x10
c00119cd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00119d1:	25 01 04 00 00       	and    eax,0x401
c00119d6:	3d 01 04 00 00       	cmp    eax,0x401
c00119db:	0f 85 e5 01 00 00    	jne    c0011bc6 <VAS::VAS(VAS*)+0x2f2>
c00119e1:	83 ec 0c             	sub    esp,0xc
c00119e4:	68 2c 0e 02 c0       	push   0xc0020e2c
c00119e9:	e8 da b0 ff ff       	call   c000cac8 <kprintf(char const*, ...)>
c00119ee:	83 c4 10             	add    esp,0x10
c00119f1:	e8 77 bc ff ff       	call   c000d66d <Phys::allocatePage()>
c00119f6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00119fa:	83 ec 08             	sub    esp,0x8
c00119fd:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011a01:	68 42 0e 02 c0       	push   0xc0020e42
c0011a06:	e8 bd b0 ff ff       	call   c000cac8 <kprintf(char const*, ...)>
c0011a0b:	83 c4 10             	add    esp,0x10
c0011a0e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011a12:	25 ff 0f 00 00       	and    eax,0xfff
c0011a17:	89 c1                	mov    ecx,eax
c0011a19:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011a1d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011a20:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0011a24:	c1 e2 02             	shl    edx,0x2
c0011a27:	01 c2                	add    edx,eax
c0011a29:	89 c8                	mov    eax,ecx
c0011a2b:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0011a2f:	89 02                	mov    DWORD PTR [edx],eax
c0011a31:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0011a39:	81 7c 24 28 ff 03 00 00 	cmp    DWORD PTR [esp+0x28],0x3ff
c0011a41:	0f 8f a5 01 00 00    	jg     c0011bec <VAS::VAS(VAS*)+0x318>
c0011a47:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011a4b:	c1 e0 0a             	shl    eax,0xa
c0011a4e:	89 c2                	mov    edx,eax
c0011a50:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011a54:	01 d0                	add    eax,edx
c0011a56:	c1 e0 0c             	shl    eax,0xc
c0011a59:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011a5d:	83 ec 08             	sub    esp,0x8
c0011a60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011a64:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011a68:	e8 91 f7 ff ff       	call   c00111fe <VAS::getPageTableEntry(unsigned long)>
c0011a6d:	83 c4 10             	add    esp,0x10
c0011a70:	8b 00                	mov    eax,DWORD PTR [eax]
c0011a72:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011a76:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011a7b:	8b 00                	mov    eax,DWORD PTR [eax]
c0011a7d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011a80:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011a86:	83 ec 04             	sub    esp,0x4
c0011a89:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011a8d:	6a 01                	push   0x1
c0011a8f:	50                   	push   eax
c0011a90:	e8 3d f7 ff ff       	call   c00111d2 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0011a95:	83 c4 10             	add    esp,0x10
c0011a98:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011a9c:	83 ec 04             	sub    esp,0x4
c0011a9f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011aa3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011aa7:	68 d4 0c 02 c0       	push   0xc0020cd4
c0011aac:	e8 17 b0 ff ff       	call   c000cac8 <kprintf(char const*, ...)>
c0011ab1:	83 c4 10             	add    esp,0x10
c0011ab4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011ab8:	25 01 04 00 00       	and    eax,0x401
c0011abd:	3d 01 04 00 00       	cmp    eax,0x401
c0011ac2:	0f 85 db 00 00 00    	jne    c0011ba3 <VAS::VAS(VAS*)+0x2cf>
c0011ac8:	83 ec 0c             	sub    esp,0xc
c0011acb:	68 51 0e 02 c0       	push   0xc0020e51
c0011ad0:	e8 f3 af ff ff       	call   c000cac8 <kprintf(char const*, ...)>
c0011ad5:	83 c4 10             	add    esp,0x10
c0011ad8:	e8 90 bb ff ff       	call   c000d66d <Phys::allocatePage()>
c0011add:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011ae1:	83 ec 08             	sub    esp,0x8
c0011ae4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011ae8:	68 60 0e 02 c0       	push   0xc0020e60
c0011aed:	e8 d6 af ff ff       	call   c000cac8 <kprintf(char const*, ...)>
c0011af2:	83 c4 10             	add    esp,0x10
c0011af5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011af9:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011afe:	83 ec 08             	sub    esp,0x8
c0011b01:	50                   	push   eax
c0011b02:	68 74 0e 02 c0       	push   0xc0020e74
c0011b07:	e8 bc af ff ff       	call   c000cac8 <kprintf(char const*, ...)>
c0011b0c:	83 c4 10             	add    esp,0x10
c0011b0f:	e8 63 f5 ff ff       	call   c0011077 <Virt::getAKernelVAS()>
c0011b14:	83 ec 0c             	sub    esp,0xc
c0011b17:	6a 03                	push   0x3
c0011b19:	6a 01                	push   0x1
c0011b1b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0011b1f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011b23:	50                   	push   eax
c0011b24:	e8 e1 fc ff ff       	call   c001180a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011b29:	83 c4 20             	add    esp,0x20
c0011b2c:	e8 46 f5 ff ff       	call   c0011077 <Virt::getAKernelVAS()>
c0011b31:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011b35:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0011b3b:	83 ec 0c             	sub    esp,0xc
c0011b3e:	6a 03                	push   0x3
c0011b40:	6a 01                	push   0x1
c0011b42:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0011b46:	52                   	push   edx
c0011b47:	50                   	push   eax
c0011b48:	e8 bd fc ff ff       	call   c001180a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011b4d:	83 c4 20             	add    esp,0x20
c0011b50:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0011b54:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011b58:	83 ec 04             	sub    esp,0x4
c0011b5b:	68 00 10 00 00       	push   0x1000
c0011b60:	52                   	push   edx
c0011b61:	50                   	push   eax
c0011b62:	e8 6b ea fe ff       	call   c00005d2 <memcpy>
c0011b67:	83 c4 10             	add    esp,0x10
c0011b6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011b6e:	25 ff 0f 00 00       	and    eax,0xfff
c0011b73:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0011b77:	89 c2                	mov    edx,eax
c0011b79:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011b7d:	89 10                	mov    DWORD PTR [eax],edx
c0011b7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011b83:	25 ff 0f 00 00       	and    eax,0xfff
c0011b88:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0011b8c:	83 ec 04             	sub    esp,0x4
c0011b8f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011b93:	50                   	push   eax
c0011b94:	68 f8 0c 02 c0       	push   0xc0020cf8
c0011b99:	e8 2a af ff ff       	call   c000cac8 <kprintf(char const*, ...)>
c0011b9e:	83 c4 10             	add    esp,0x10
c0011ba1:	eb 1a                	jmp    c0011bbd <VAS::VAS(VAS*)+0x2e9>
c0011ba3:	83 ec 0c             	sub    esp,0xc
c0011ba6:	68 88 0e 02 c0       	push   0xc0020e88
c0011bab:	e8 18 af ff ff       	call   c000cac8 <kprintf(char const*, ...)>
c0011bb0:	83 c4 10             	add    esp,0x10
c0011bb3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011bb7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011bbb:	89 10                	mov    DWORD PTR [eax],edx
c0011bbd:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c0011bc1:	e9 73 fe ff ff       	jmp    c0011a39 <VAS::VAS(VAS*)+0x165>
c0011bc6:	83 ec 0c             	sub    esp,0xc
c0011bc9:	68 8c 0e 02 c0       	push   0xc0020e8c
c0011bce:	e8 f5 ae ff ff       	call   c000cac8 <kprintf(char const*, ...)>
c0011bd3:	83 c4 10             	add    esp,0x10
c0011bd6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011bda:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011bdd:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0011be1:	c1 e2 02             	shl    edx,0x2
c0011be4:	01 c2                	add    edx,eax
c0011be6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011bea:	89 02                	mov    DWORD PTR [edx],eax
c0011bec:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0011bf0:	e9 94 fd ff ff       	jmp    c0011989 <VAS::VAS(VAS*)+0xb5>
c0011bf5:	83 ec 0c             	sub    esp,0xc
c0011bf8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011bfc:	e8 1c f6 ff ff       	call   c001121d <Virt::freeKernelVirtualPages(unsigned long)>
c0011c01:	83 c4 10             	add    esp,0x10
c0011c04:	83 ec 0c             	sub    esp,0xc
c0011c07:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0011c0b:	e8 0d f6 ff ff       	call   c001121d <Virt::freeKernelVirtualPages(unsigned long)>
c0011c10:	83 c4 10             	add    esp,0x10
c0011c13:	e8 0b c7 ff ff       	call   c000e323 <unlockStuff()>
c0011c18:	90                   	nop
c0011c19:	83 c4 38             	add    esp,0x38
c0011c1c:	5b                   	pop    ebx
c0011c1d:	c3                   	ret    

c0011c1e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0011c1e:	55                   	push   ebp
c0011c1f:	57                   	push   edi
c0011c20:	56                   	push   esi
c0011c21:	53                   	push   ebx
c0011c22:	83 ec 1c             	sub    esp,0x1c
c0011c25:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011c29:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0011c2d:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c0011c31:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0011c35:	a9 ff 0f 00 00       	test   eax,0xfff
c0011c3a:	75 4a                	jne    c0011c86 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c0011c3c:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0011c40:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0011c43:	c1 eb 16             	shr    ebx,0x16
c0011c46:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0011c4d:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0011c51:	74 4d                	je     c0011ca0 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c0011c53:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011c57:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0011c5b:	c1 e8 0a             	shr    eax,0xa
c0011c5e:	80 fa 01             	cmp    dl,0x1
c0011c61:	19 d2                	sbb    edx,edx
c0011c63:	c1 e3 0c             	shl    ebx,0xc
c0011c66:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0011c6a:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0011c70:	25 fc 0f 00 00       	and    eax,0xffc
c0011c75:	01 d8                	add    eax,ebx
c0011c77:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0011c7e:	83 c4 1c             	add    esp,0x1c
c0011c81:	5b                   	pop    ebx
c0011c82:	5e                   	pop    esi
c0011c83:	5f                   	pop    edi
c0011c84:	5d                   	pop    ebp
c0011c85:	c3                   	ret    
c0011c86:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0011c8a:	83 ec 0c             	sub    esp,0xc
c0011c8d:	68 1c 0d 02 c0       	push   0xc0020d1c
c0011c92:	e8 4f af ff ff       	call   c000cbe6 <panic(char const*)>
c0011c97:	83 c4 10             	add    esp,0x10
c0011c9a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011c9e:	eb 9c                	jmp    c0011c3c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c0011ca0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011ca4:	e8 c4 b9 ff ff       	call   c000d66d <Phys::allocatePage()>
c0011ca9:	89 c5                	mov    ebp,eax
c0011cab:	e8 c7 f3 ff ff       	call   c0011077 <Virt::getAKernelVAS()>
c0011cb0:	83 ec 0c             	sub    esp,0xc
c0011cb3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011cb7:	6a 01                	push   0x1
c0011cb9:	e8 29 f2 ff ff       	call   c0010ee7 <Virt::allocateKernelVirtualPages(int)>
c0011cbe:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0011cc5:	6a 01                	push   0x1
c0011cc7:	50                   	push   eax
c0011cc8:	55                   	push   ebp
c0011cc9:	81 cd 07 04 00 00    	or     ebp,0x407
c0011ccf:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011cd3:	51                   	push   ecx
c0011cd4:	e8 31 fb ff ff       	call   c001180a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011cd9:	83 c4 1c             	add    esp,0x1c
c0011cdc:	68 00 10 00 00       	push   0x1000
c0011ce1:	6a 00                	push   0x0
c0011ce3:	50                   	push   eax
c0011ce4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011ce8:	e8 1b e9 fe ff       	call   c0000608 <memset>
c0011ced:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011cf1:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0011cf4:	e8 24 f5 ff ff       	call   c001121d <Virt::freeKernelVirtualPages(unsigned long)>
c0011cf9:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0011cfc:	83 c4 10             	add    esp,0x10
c0011cff:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c0011d02:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011d06:	e9 48 ff ff ff       	jmp    c0011c53 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>
c0011d0b:	90                   	nop

c0011d0c <VAS::VAS(bool)>:
c0011d0c:	53                   	push   ebx
c0011d0d:	83 ec 28             	sub    esp,0x28
c0011d10:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011d14:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0011d18:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011d1c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011d23:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011d27:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0011d2b:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0011d2e:	e8 3a b9 ff ff       	call   c000d66d <Phys::allocatePage()>
c0011d33:	89 c2                	mov    edx,eax
c0011d35:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011d39:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0011d3c:	e8 36 f3 ff ff       	call   c0011077 <Virt::getAKernelVAS()>
c0011d41:	89 c3                	mov    ebx,eax
c0011d43:	83 ec 0c             	sub    esp,0xc
c0011d46:	6a 01                	push   0x1
c0011d48:	e8 9a f1 ff ff       	call   c0010ee7 <Virt::allocateKernelVirtualPages(int)>
c0011d4d:	83 c4 10             	add    esp,0x10
c0011d50:	89 c2                	mov    edx,eax
c0011d52:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011d56:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011d59:	83 ec 0c             	sub    esp,0xc
c0011d5c:	6a 03                	push   0x3
c0011d5e:	6a 01                	push   0x1
c0011d60:	52                   	push   edx
c0011d61:	50                   	push   eax
c0011d62:	53                   	push   ebx
c0011d63:	e8 a2 fa ff ff       	call   c001180a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011d68:	83 c4 20             	add    esp,0x20
c0011d6b:	89 c2                	mov    edx,eax
c0011d6d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011d71:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0011d74:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011d7c:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0011d84:	7f 1c                	jg     c0011da2 <VAS::VAS(bool)+0x96>
c0011d86:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011d8a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011d8d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011d91:	c1 e2 02             	shl    edx,0x2
c0011d94:	01 d0                	add    eax,edx
c0011d96:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0011d9c:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011da0:	eb da                	jmp    c0011d7c <VAS::VAS(bool)+0x70>
c0011da2:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0011daa:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0011db2:	7f 71                	jg     c0011e25 <VAS::VAS(bool)+0x119>
c0011db4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011db8:	2d 00 02 00 00       	sub    eax,0x200
c0011dbd:	c1 e0 0c             	shl    eax,0xc
c0011dc0:	83 c8 03             	or     eax,0x3
c0011dc3:	89 c3                	mov    ebx,eax
c0011dc5:	e8 e4 4f 00 00       	call   c0016dae <thisCPU()>
c0011dca:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0011dd0:	83 e0 10             	and    eax,0x10
c0011dd3:	84 c0                	test   al,al
c0011dd5:	74 07                	je     c0011dde <VAS::VAS(bool)+0xd2>
c0011dd7:	b8 00 01 00 00       	mov    eax,0x100
c0011ddc:	eb 05                	jmp    c0011de3 <VAS::VAS(bool)+0xd7>
c0011dde:	b8 00 00 00 00       	mov    eax,0x0
c0011de3:	09 d8                	or     eax,ebx
c0011de5:	89 c1                	mov    ecx,eax
c0011de7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011deb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011dee:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011df2:	c1 e2 02             	shl    edx,0x2
c0011df5:	01 d0                	add    eax,edx
c0011df7:	89 ca                	mov    edx,ecx
c0011df9:	89 10                	mov    DWORD PTR [eax],edx
c0011dfb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011dff:	2d 40 03 00 00       	sub    eax,0x340
c0011e04:	83 f8 7f             	cmp    eax,0x7f
c0011e07:	77 16                	ja     c0011e1f <VAS::VAS(bool)+0x113>
c0011e09:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e0d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011e10:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011e14:	c1 e2 02             	shl    edx,0x2
c0011e17:	01 d0                	add    eax,edx
c0011e19:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0011e1f:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0011e23:	eb 85                	jmp    c0011daa <VAS::VAS(bool)+0x9e>
c0011e25:	e8 84 4f 00 00       	call   c0016dae <thisCPU()>
c0011e2a:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0011e30:	83 e0 10             	and    eax,0x10
c0011e33:	84 c0                	test   al,al
c0011e35:	74 07                	je     c0011e3e <VAS::VAS(bool)+0x132>
c0011e37:	b8 03 41 00 00       	mov    eax,0x4103
c0011e3c:	eb 05                	jmp    c0011e43 <VAS::VAS(bool)+0x137>
c0011e3e:	b8 03 40 00 00       	mov    eax,0x4003
c0011e43:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011e47:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0011e4a:	81 c2 20 0c 00 00    	add    edx,0xc20
c0011e50:	89 02                	mov    DWORD PTR [edx],eax
c0011e52:	e8 57 4f 00 00       	call   c0016dae <thisCPU()>
c0011e57:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0011e5d:	83 ec 08             	sub    esp,0x8
c0011e60:	50                   	push   eax
c0011e61:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011e65:	e8 84 f9 ff ff       	call   c00117ee <VAS::setCPUSpecific(unsigned long)>
c0011e6a:	83 c4 10             	add    esp,0x10
c0011e6d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e71:	8b 58 0c             	mov    ebx,DWORD PTR [eax+0xc]
c0011e74:	e8 35 4f 00 00       	call   c0016dae <thisCPU()>
c0011e79:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0011e7f:	83 e0 10             	and    eax,0x10
c0011e82:	84 c0                	test   al,al
c0011e84:	74 07                	je     c0011e8d <VAS::VAS(bool)+0x181>
c0011e86:	b8 00 01 00 00       	mov    eax,0x100
c0011e8b:	eb 05                	jmp    c0011e92 <VAS::VAS(bool)+0x186>
c0011e8d:	b8 00 00 00 00       	mov    eax,0x0
c0011e92:	09 d8                	or     eax,ebx
c0011e94:	89 c2                	mov    edx,eax
c0011e96:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e9a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011e9d:	05 fc 0f 00 00       	add    eax,0xffc
c0011ea2:	83 ca 03             	or     edx,0x3
c0011ea5:	89 10                	mov    DWORD PTR [eax],edx
c0011ea7:	e8 02 4f 00 00       	call   c0016dae <thisCPU()>
c0011eac:	83 ec 0c             	sub    esp,0xc
c0011eaf:	50                   	push   eax
c0011eb0:	e8 af 17 00 00       	call   c0013664 <Device::getName()>
c0011eb5:	83 c4 10             	add    esp,0x10
c0011eb8:	83 ec 08             	sub    esp,0x8
c0011ebb:	68 9c 0e 02 c0       	push   0xc0020e9c
c0011ec0:	50                   	push   eax
c0011ec1:	e8 32 e8 fe ff       	call   c00006f8 <strcmp>
c0011ec6:	83 c4 10             	add    esp,0x10
c0011ec9:	85 c0                	test   eax,eax
c0011ecb:	0f 94 c0             	sete   al
c0011ece:	84 c0                	test   al,al
c0011ed0:	74 64                	je     c0011f36 <VAS::VAS(bool)+0x22a>
c0011ed2:	e8 76 c0 ff ff       	call   c000df4d <disableIRQs()>
c0011ed7:	e8 d2 4e 00 00       	call   c0016dae <thisCPU()>
c0011edc:	05 7c 09 00 00       	add    eax,0x97c
c0011ee1:	83 ec 0c             	sub    esp,0xc
c0011ee4:	50                   	push   eax
c0011ee5:	e8 32 a7 ff ff       	call   c000c61c <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0011eea:	83 c4 10             	add    esp,0x10
c0011eed:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011ef2:	89 c3                	mov    ebx,eax
c0011ef4:	e8 b5 4e 00 00       	call   c0016dae <thisCPU()>
c0011ef9:	05 7c 09 00 00       	add    eax,0x97c
c0011efe:	83 ec 0c             	sub    esp,0xc
c0011f01:	50                   	push   eax
c0011f02:	e8 15 a7 ff ff       	call   c000c61c <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0011f07:	83 c4 10             	add    esp,0x10
c0011f0a:	83 ec 08             	sub    esp,0x8
c0011f0d:	50                   	push   eax
c0011f0e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011f12:	e8 e7 f2 ff ff       	call   c00111fe <VAS::getPageTableEntry(unsigned long)>
c0011f17:	83 c4 10             	add    esp,0x10
c0011f1a:	8b 00                	mov    eax,DWORD PTR [eax]
c0011f1c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011f21:	6a 11                	push   0x11
c0011f23:	53                   	push   ebx
c0011f24:	50                   	push   eax
c0011f25:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011f29:	e8 f0 f5 ff ff       	call   c001151e <VAS::mapPage(unsigned long, unsigned long, int)>
c0011f2e:	83 c4 10             	add    esp,0x10
c0011f31:	e8 25 c0 ff ff       	call   c000df5b <enableIRQs()>
c0011f36:	90                   	nop
c0011f37:	83 c4 28             	add    esp,0x28
c0011f3a:	5b                   	pop    ebx
c0011f3b:	c3                   	ret    

c0011f3c <mapVASFirstTime>:
c0011f3c:	55                   	push   ebp
c0011f3d:	57                   	push   edi
c0011f3e:	56                   	push   esi
c0011f3f:	53                   	push   ebx
c0011f40:	83 ec 0c             	sub    esp,0xc
c0011f43:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011f48:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0011f4b:	4a                   	dec    edx
c0011f4c:	0f 84 99 00 00 00    	je     c0011feb <mapVASFirstTime+0xaf>
c0011f52:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0011f55:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c0011f58:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0011f5d:	c1 e5 15             	shl    ebp,0x15
c0011f60:	be 00 c0 e7 01       	mov    esi,0x1e7c000
c0011f65:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c0011f6b:	29 eb                	sub    ebx,ebp
c0011f6d:	29 ee                	sub    esi,ebp
c0011f6f:	e8 f9 b6 ff ff       	call   c000d66d <Phys::allocatePage()>
c0011f74:	83 ec 0c             	sub    esp,0xc
c0011f77:	68 03 04 00 00       	push   0x403
c0011f7c:	6a 01                	push   0x1
c0011f7e:	53                   	push   ebx
c0011f7f:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0011f85:	50                   	push   eax
c0011f86:	57                   	push   edi
c0011f87:	e8 7e f8 ff ff       	call   c001180a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011f8c:	83 c4 20             	add    esp,0x20
c0011f8f:	39 f3                	cmp    ebx,esi
c0011f91:	75 dc                	jne    c0011f6f <mapVASFirstTime+0x33>
c0011f93:	be 00 f0 ff 01       	mov    esi,0x1fff000
c0011f98:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c0011f9d:	29 ee                	sub    esi,ebp
c0011f9f:	29 e8                	sub    eax,ebp
c0011fa1:	89 c5                	mov    ebp,eax
c0011fa3:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c0011fa7:	19 db                	sbb    ebx,ebx
c0011fa9:	e8 bf b6 ff ff       	call   c000d66d <Phys::allocatePage()>
c0011fae:	83 e3 04             	and    ebx,0x4
c0011fb1:	83 ec 0c             	sub    esp,0xc
c0011fb4:	81 c3 03 04 00 00    	add    ebx,0x403
c0011fba:	53                   	push   ebx
c0011fbb:	6a 01                	push   0x1
c0011fbd:	56                   	push   esi
c0011fbe:	81 ee 00 10 00 00    	sub    esi,0x1000
c0011fc4:	50                   	push   eax
c0011fc5:	57                   	push   edi
c0011fc6:	e8 3f f8 ff ff       	call   c001180a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011fcb:	83 c4 20             	add    esp,0x20
c0011fce:	39 f5                	cmp    ebp,esi
c0011fd0:	75 d1                	jne    c0011fa3 <mapVASFirstTime+0x67>
c0011fd2:	e8 42 c6 00 00       	call   c001e619 <CPU::readCR3()>
c0011fd7:	83 ec 0c             	sub    esp,0xc
c0011fda:	50                   	push   eax
c0011fdb:	e8 5d c6 00 00       	call   c001e63d <CPU::writeCR3(unsigned long)>
c0011fe0:	83 c4 10             	add    esp,0x10
c0011fe3:	83 c4 0c             	add    esp,0xc
c0011fe6:	5b                   	pop    ebx
c0011fe7:	5e                   	pop    esi
c0011fe8:	5f                   	pop    edi
c0011fe9:	5d                   	pop    ebp
c0011fea:	c3                   	ret    
c0011feb:	83 ec 0c             	sub    esp,0xc
c0011fee:	68 aa 0e 02 c0       	push   0xc0020eaa
c0011ff3:	e8 d0 aa ff ff       	call   c000cac8 <kprintf(char const*, ...)>
c0011ff8:	83 c4 10             	add    esp,0x10
c0011ffb:	83 c4 0c             	add    esp,0xc
c0011ffe:	5b                   	pop    ebx
c0011fff:	5e                   	pop    esi
c0012000:	5f                   	pop    edi
c0012001:	5d                   	pop    ebp
c0012002:	c3                   	ret    

c0012003 <__cxa_atexit>:
c0012003:	31 c0                	xor    eax,eax
c0012005:	c3                   	ret    

c0012006 <__cxa_finalize>:
c0012006:	c3                   	ret    

c0012007 <__stack_chk_fail>:
c0012007:	55                   	push   ebp
c0012008:	89 e5                	mov    ebp,esp
c001200a:	83 ec 10             	sub    esp,0x10
c001200d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0012010:	68 c3 0e 02 c0       	push   0xc0020ec3
c0012015:	e8 ae aa ff ff       	call   c000cac8 <kprintf(char const*, ...)>
c001201a:	58                   	pop    eax
c001201b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001201e:	5a                   	pop    edx
c001201f:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012022:	68 c3 0e 02 c0       	push   0xc0020ec3
c0012027:	e8 9c aa ff ff       	call   c000cac8 <kprintf(char const*, ...)>
c001202c:	59                   	pop    ecx
c001202d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012030:	5a                   	pop    edx
c0012031:	8b 00                	mov    eax,DWORD PTR [eax]
c0012033:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012036:	68 c3 0e 02 c0       	push   0xc0020ec3
c001203b:	e8 88 aa ff ff       	call   c000cac8 <kprintf(char const*, ...)>
c0012040:	59                   	pop    ecx
c0012041:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012044:	5a                   	pop    edx
c0012045:	8b 00                	mov    eax,DWORD PTR [eax]
c0012047:	8b 00                	mov    eax,DWORD PTR [eax]
c0012049:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001204c:	68 c3 0e 02 c0       	push   0xc0020ec3
c0012051:	e8 72 aa ff ff       	call   c000cac8 <kprintf(char const*, ...)>
c0012056:	c7 04 24 cb 0e 02 c0 	mov    DWORD PTR [esp],0xc0020ecb
c001205d:	e8 84 ab ff ff       	call   c000cbe6 <panic(char const*)>
c0012062:	83 c4 10             	add    esp,0x10
c0012065:	c9                   	leave  
c0012066:	c3                   	ret    

c0012067 <__cxa_pure_virtual>:
c0012067:	83 ec 18             	sub    esp,0x18
c001206a:	68 e3 0e 02 c0       	push   0xc0020ee3
c001206f:	e8 72 ab ff ff       	call   c000cbe6 <panic(char const*)>
c0012074:	83 c4 1c             	add    esp,0x1c
c0012077:	c3                   	ret    

c0012078 <operator new(unsigned long)>:
c0012078:	e9 46 b0 ff ff       	jmp    c000d0c3 <malloc>

c001207d <operator new[](unsigned long)>:
c001207d:	e9 41 b0 ff ff       	jmp    c000d0c3 <malloc>

c0012082 <operator delete(void*)>:
c0012082:	e9 5c b0 ff ff       	jmp    c000d0e3 <rfree>

c0012087 <operator delete(void*, unsigned long)>:
c0012087:	e9 57 b0 ff ff       	jmp    c000d0e3 <rfree>

c001208c <operator delete[](void*)>:
c001208c:	e9 52 b0 ff ff       	jmp    c000d0e3 <rfree>

c0012091 <operator delete[](void*, unsigned long)>:
c0012091:	e9 4d b0 ff ff       	jmp    c000d0e3 <rfree>

c0012096 <File::read(unsigned long long, void*, int*)>:
c0012096:	53                   	push   ebx
c0012097:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001209b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001209f:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c00120a6:	3c 19                	cmp    al,0x19
c00120a8:	77 35                	ja     c00120df <File::read(unsigned long long, void*, int*)+0x49>
c00120aa:	8b 04 85 20 3a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc5e0]
c00120b1:	85 c0                	test   eax,eax
c00120b3:	74 2a                	je     c00120df <File::read(unsigned long long, void*, int*)+0x49>
c00120b5:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00120bb:	85 c0                	test   eax,eax
c00120bd:	74 20                	je     c00120df <File::read(unsigned long long, void*, int*)+0x49>
c00120bf:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00120c3:	74 21                	je     c00120e6 <File::read(unsigned long long, void*, int*)+0x50>
c00120c5:	8b 08                	mov    ecx,DWORD PTR [eax]
c00120c7:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00120cb:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c00120d1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00120d5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00120d9:	5b                   	pop    ebx
c00120da:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c00120dd:	ff e0                	jmp    eax
c00120df:	b8 0b 00 00 00       	mov    eax,0xb
c00120e4:	eb 05                	jmp    c00120eb <File::read(unsigned long long, void*, int*)+0x55>
c00120e6:	b8 05 00 00 00       	mov    eax,0x5
c00120eb:	5b                   	pop    ebx
c00120ec:	c3                   	ret    
c00120ed:	90                   	nop

c00120ee <File::write(unsigned long long, void*, int*)>:
c00120ee:	53                   	push   ebx
c00120ef:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00120f3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00120f7:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c00120fe:	3c 19                	cmp    al,0x19
c0012100:	77 35                	ja     c0012137 <File::write(unsigned long long, void*, int*)+0x49>
c0012102:	8b 04 85 20 3a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc5e0]
c0012109:	85 c0                	test   eax,eax
c001210b:	74 2a                	je     c0012137 <File::write(unsigned long long, void*, int*)+0x49>
c001210d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012113:	85 c0                	test   eax,eax
c0012115:	74 20                	je     c0012137 <File::write(unsigned long long, void*, int*)+0x49>
c0012117:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001211b:	74 21                	je     c001213e <File::write(unsigned long long, void*, int*)+0x50>
c001211d:	8b 08                	mov    ecx,DWORD PTR [eax]
c001211f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012123:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012129:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001212d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012131:	5b                   	pop    ebx
c0012132:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0012135:	ff e0                	jmp    eax
c0012137:	b8 0b 00 00 00       	mov    eax,0xb
c001213c:	eb 05                	jmp    c0012143 <File::write(unsigned long long, void*, int*)+0x55>
c001213e:	b8 05 00 00 00       	mov    eax,0x5
c0012143:	5b                   	pop    ebx
c0012144:	c3                   	ret    
c0012145:	90                   	nop

c0012146 <Directory::read(unsigned long long, void*, int*)>:
c0012146:	53                   	push   ebx
c0012147:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001214b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001214f:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012156:	3c 19                	cmp    al,0x19
c0012158:	77 35                	ja     c001218f <Directory::read(unsigned long long, void*, int*)+0x49>
c001215a:	8b 04 85 20 3a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc5e0]
c0012161:	85 c0                	test   eax,eax
c0012163:	74 2a                	je     c001218f <Directory::read(unsigned long long, void*, int*)+0x49>
c0012165:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c001216b:	85 c0                	test   eax,eax
c001216d:	74 20                	je     c001218f <Directory::read(unsigned long long, void*, int*)+0x49>
c001216f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012173:	74 21                	je     c0012196 <Directory::read(unsigned long long, void*, int*)+0x50>
c0012175:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012177:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001217b:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012181:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012185:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012189:	5b                   	pop    ebx
c001218a:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c001218d:	ff e0                	jmp    eax
c001218f:	b8 0b 00 00 00       	mov    eax,0xb
c0012194:	eb 05                	jmp    c001219b <Directory::read(unsigned long long, void*, int*)+0x55>
c0012196:	b8 05 00 00 00       	mov    eax,0x5
c001219b:	5b                   	pop    ebx
c001219c:	c3                   	ret    
c001219d:	90                   	nop

c001219e <Directory::write(unsigned long long, void*, int*)>:
c001219e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00121a2:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c00121a9:	b8 0b 00 00 00       	mov    eax,0xb
c00121ae:	80 fa 19             	cmp    dl,0x19
c00121b1:	77 18                	ja     c00121cb <Directory::write(unsigned long long, void*, int*)+0x2d>
c00121b3:	8b 14 95 20 3a 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc5e0]
c00121ba:	85 d2                	test   edx,edx
c00121bc:	74 0d                	je     c00121cb <Directory::write(unsigned long long, void*, int*)+0x2d>
c00121be:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c00121c5:	19 c0                	sbb    eax,eax
c00121c7:	83 e0 0a             	and    eax,0xa
c00121ca:	40                   	inc    eax
c00121cb:	c3                   	ret    

c00121cc <File::isAtty()>:
c00121cc:	31 c0                	xor    eax,eax
c00121ce:	c3                   	ret    
c00121cf:	90                   	nop

c00121d0 <Directory::isAtty()>:
c00121d0:	31 c0                	xor    eax,eax
c00121d2:	c3                   	ret    
c00121d3:	90                   	nop

c00121d4 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c00121d4:	b8 0a 00 00 00       	mov    eax,0xa
c00121d9:	c3                   	ret    

c00121da <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c00121da:	b8 0a 00 00 00       	mov    eax,0xa
c00121df:	c3                   	ret    

c00121e0 <File::~File()>:
c00121e0:	83 ec 0c             	sub    esp,0xc
c00121e3:	ba 64 0f 02 c0       	mov    edx,0xc0020f64
c00121e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00121ec:	89 10                	mov    DWORD PTR [eax],edx
c00121ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00121f2:	83 ec 0c             	sub    esp,0xc
c00121f5:	50                   	push   eax
c00121f6:	e8 0d eb ff ff       	call   c0010d08 <UnixFile::~UnixFile()>
c00121fb:	83 c4 10             	add    esp,0x10
c00121fe:	90                   	nop
c00121ff:	83 c4 0c             	add    esp,0xc
c0012202:	c3                   	ret    
c0012203:	90                   	nop

c0012204 <File::~File()>:
c0012204:	83 ec 0c             	sub    esp,0xc
c0012207:	83 ec 0c             	sub    esp,0xc
c001220a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001220e:	e8 cd ff ff ff       	call   c00121e0 <File::~File()>
c0012213:	83 c4 10             	add    esp,0x10
c0012216:	83 ec 08             	sub    esp,0x8
c0012219:	68 14 01 00 00       	push   0x114
c001221e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012222:	e8 60 fe ff ff       	call   c0012087 <operator delete(void*, unsigned long)>
c0012227:	83 c4 10             	add    esp,0x10
c001222a:	83 c4 0c             	add    esp,0xc
c001222d:	c3                   	ret    

c001222e <Directory::~Directory()>:
c001222e:	83 ec 0c             	sub    esp,0xc
c0012231:	ba 80 0f 02 c0       	mov    edx,0xc0020f80
c0012236:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001223a:	89 10                	mov    DWORD PTR [eax],edx
c001223c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012240:	83 ec 0c             	sub    esp,0xc
c0012243:	50                   	push   eax
c0012244:	e8 bf ea ff ff       	call   c0010d08 <UnixFile::~UnixFile()>
c0012249:	83 c4 10             	add    esp,0x10
c001224c:	90                   	nop
c001224d:	83 c4 0c             	add    esp,0xc
c0012250:	c3                   	ret    
c0012251:	90                   	nop

c0012252 <Directory::~Directory()>:
c0012252:	83 ec 0c             	sub    esp,0xc
c0012255:	83 ec 0c             	sub    esp,0xc
c0012258:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001225c:	e8 cd ff ff ff       	call   c001222e <Directory::~Directory()>
c0012261:	83 c4 10             	add    esp,0x10
c0012264:	83 ec 08             	sub    esp,0x8
c0012267:	68 14 01 00 00       	push   0x114
c001226c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012270:	e8 12 fe ff ff       	call   c0012087 <operator delete(void*, unsigned long)>
c0012275:	83 c4 10             	add    esp,0x10
c0012278:	83 c4 0c             	add    esp,0xc
c001227b:	c3                   	ret    

c001227c <Filesystem::Filesystem()>:
c001227c:	ba 00 0f 02 c0       	mov    edx,0xc0020f00
c0012281:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012285:	89 10                	mov    DWORD PTR [eax],edx
c0012287:	8b 15 80 35 02 c0    	mov    edx,DWORD PTR ds:0xc0023580
c001228d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012291:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0012294:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012298:	a3 80 35 02 c0       	mov    ds:0xc0023580,eax
c001229d:	90                   	nop
c001229e:	c3                   	ret    
c001229f:	90                   	nop

c00122a0 <Filesystem::~Filesystem()>:
c00122a0:	ba 00 0f 02 c0       	mov    edx,0xc0020f00
c00122a5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00122a9:	89 10                	mov    DWORD PTR [eax],edx
c00122ab:	90                   	nop
c00122ac:	c3                   	ret    
c00122ad:	90                   	nop

c00122ae <Filesystem::~Filesystem()>:
c00122ae:	83 ec 0c             	sub    esp,0xc
c00122b1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00122b5:	e8 e6 ff ff ff       	call   c00122a0 <Filesystem::~Filesystem()>
c00122ba:	83 c4 04             	add    esp,0x4
c00122bd:	83 ec 08             	sub    esp,0x8
c00122c0:	6a 08                	push   0x8
c00122c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00122c6:	e8 bc fd ff ff       	call   c0012087 <operator delete(void*, unsigned long)>
c00122cb:	83 c4 10             	add    esp,0x10
c00122ce:	83 c4 0c             	add    esp,0xc
c00122d1:	c3                   	ret    

c00122d2 <initVFS()>:
c00122d2:	83 ec 18             	sub    esp,0x18
c00122d5:	6a 08                	push   0x8
c00122d7:	e8 9c fd ff ff       	call   c0012078 <operator new(unsigned long)>
c00122dc:	89 04 24             	mov    DWORD PTR [esp],eax
c00122df:	e8 24 71 00 00       	call   c0019408 <FAT::FAT()>
c00122e4:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00122eb:	e8 88 fd ff ff       	call   c0012078 <operator new(unsigned long)>
c00122f0:	89 04 24             	mov    DWORD PTR [esp],eax
c00122f3:	e8 1a 83 00 00       	call   c001a612 <ISO9660::ISO9660()>
c00122f8:	83 c4 1c             	add    esp,0x1c
c00122fb:	c3                   	ret    

c00122fc <standardiseFiles(char*, char const*, char const*)>:
c00122fc:	55                   	push   ebp
c00122fd:	57                   	push   edi
c00122fe:	56                   	push   esi
c00122ff:	53                   	push   ebx
c0012300:	81 ec 10 04 00 00    	sub    esp,0x410
c0012306:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c001230d:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c0012314:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c001231b:	68 00 04 00 00       	push   0x400
c0012320:	6a 00                	push   0x0
c0012322:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0012326:	56                   	push   esi
c0012327:	e8 dc e2 fe ff       	call   c0000608 <memset>
c001232c:	83 c4 10             	add    esp,0x10
c001232f:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c0012333:	75 0b                	jne    c0012340 <standardiseFiles(char*, char const*, char const*)+0x44>
c0012335:	50                   	push   eax
c0012336:	50                   	push   eax
c0012337:	57                   	push   edi
c0012338:	56                   	push   esi
c0012339:	e8 69 e3 fe ff       	call   c00006a7 <strcpy>
c001233e:	eb 41                	jmp    c0012381 <standardiseFiles(char*, char const*, char const*)+0x85>
c0012340:	8a 07                	mov    al,BYTE PTR [edi]
c0012342:	3c 5c                	cmp    al,0x5c
c0012344:	74 04                	je     c001234a <standardiseFiles(char*, char const*, char const*)+0x4e>
c0012346:	3c 2f                	cmp    al,0x2f
c0012348:	75 18                	jne    c0012362 <standardiseFiles(char*, char const*, char const*)+0x66>
c001234a:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c001234d:	3c 60                	cmp    al,0x60
c001234f:	7e 03                	jle    c0012354 <standardiseFiles(char*, char const*, char const*)+0x58>
c0012351:	83 e8 20             	sub    eax,0x20
c0012354:	88 04 24             	mov    BYTE PTR [esp],al
c0012357:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c001235e:	50                   	push   eax
c001235f:	50                   	push   eax
c0012360:	eb 18                	jmp    c001237a <standardiseFiles(char*, char const*, char const*)+0x7e>
c0012362:	50                   	push   eax
c0012363:	50                   	push   eax
c0012364:	55                   	push   ebp
c0012365:	56                   	push   esi
c0012366:	e8 3c e3 fe ff       	call   c00006a7 <strcpy>
c001236b:	5a                   	pop    edx
c001236c:	59                   	pop    ecx
c001236d:	68 f6 05 02 c0       	push   0xc00205f6
c0012372:	56                   	push   esi
c0012373:	e8 e6 e3 fe ff       	call   c000075e <strcat>
c0012378:	5d                   	pop    ebp
c0012379:	58                   	pop    eax
c001237a:	57                   	push   edi
c001237b:	56                   	push   esi
c001237c:	e8 dd e3 fe ff       	call   c000075e <strcat>
c0012381:	83 c4 10             	add    esp,0x10
c0012384:	8a 04 24             	mov    al,BYTE PTR [esp]
c0012387:	3c 60                	cmp    al,0x60
c0012389:	7e 03                	jle    c001238e <standardiseFiles(char*, char const*, char const*)+0x92>
c001238b:	83 e8 20             	sub    eax,0x20
c001238e:	88 04 24             	mov    BYTE PTR [esp],al
c0012391:	88 03                	mov    BYTE PTR [ebx],al
c0012393:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c001239a:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c00123a0:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00123a4:	bf 03 00 00 00       	mov    edi,0x3
c00123a9:	b8 03 00 00 00       	mov    eax,0x3
c00123ae:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c00123b1:	84 d2                	test   dl,dl
c00123b3:	0f 84 91 00 00 00    	je     c001244a <standardiseFiles(char*, char const*, char const*)+0x14e>
c00123b9:	8d 4f 01             	lea    ecx,[edi+0x1]
c00123bc:	80 fa 5c             	cmp    dl,0x5c
c00123bf:	74 05                	je     c00123c6 <standardiseFiles(char*, char const*, char const*)+0xca>
c00123c1:	80 fa 2f             	cmp    dl,0x2f
c00123c4:	75 12                	jne    c00123d8 <standardiseFiles(char*, char const*, char const*)+0xdc>
c00123c6:	89 c5                	mov    ebp,eax
c00123c8:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c00123cd:	74 09                	je     c00123d8 <standardiseFiles(char*, char const*, char const*)+0xdc>
c00123cf:	40                   	inc    eax
c00123d0:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c00123d4:	89 cf                	mov    edi,ecx
c00123d6:	eb d6                	jmp    c00123ae <standardiseFiles(char*, char const*, char const*)+0xb2>
c00123d8:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c00123dd:	75 5b                	jne    c001243a <standardiseFiles(char*, char const*, char const*)+0x13e>
c00123df:	80 fa 2e             	cmp    dl,0x2e
c00123e2:	75 56                	jne    c001243a <standardiseFiles(char*, char const*, char const*)+0x13e>
c00123e4:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c00123e8:	74 19                	je     c0012403 <standardiseFiles(char*, char const*, char const*)+0x107>
c00123ea:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c00123ef:	74 53                	je     c0012444 <standardiseFiles(char*, char const*, char const*)+0x148>
c00123f1:	89 f9                	mov    ecx,edi
c00123f3:	41                   	inc    ecx
c00123f4:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c00123f7:	80 fa 2f             	cmp    dl,0x2f
c00123fa:	74 f7                	je     c00123f3 <standardiseFiles(char*, char const*, char const*)+0xf7>
c00123fc:	80 fa 5c             	cmp    dl,0x5c
c00123ff:	74 f2                	je     c00123f3 <standardiseFiles(char*, char const*, char const*)+0xf7>
c0012401:	eb d1                	jmp    c00123d4 <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012403:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012408:	74 3a                	je     c0012444 <standardiseFiles(char*, char const*, char const*)+0x148>
c001240a:	83 f8 03             	cmp    eax,0x3
c001240d:	74 c5                	je     c00123d4 <standardiseFiles(char*, char const*, char const*)+0xd8>
c001240f:	41                   	inc    ecx
c0012410:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012413:	80 fa 2f             	cmp    dl,0x2f
c0012416:	74 f7                	je     c001240f <standardiseFiles(char*, char const*, char const*)+0x113>
c0012418:	80 fa 5c             	cmp    dl,0x5c
c001241b:	74 f2                	je     c001240f <standardiseFiles(char*, char const*, char const*)+0x113>
c001241d:	48                   	dec    eax
c001241e:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012422:	75 06                	jne    c001242a <standardiseFiles(char*, char const*, char const*)+0x12e>
c0012424:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012428:	eb f3                	jmp    c001241d <standardiseFiles(char*, char const*, char const*)+0x121>
c001242a:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c001242e:	74 07                	je     c0012437 <standardiseFiles(char*, char const*, char const*)+0x13b>
c0012430:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012434:	48                   	dec    eax
c0012435:	eb f3                	jmp    c001242a <standardiseFiles(char*, char const*, char const*)+0x12e>
c0012437:	40                   	inc    eax
c0012438:	eb 9a                	jmp    c00123d4 <standardiseFiles(char*, char const*, char const*)+0xd8>
c001243a:	80 fa 2f             	cmp    dl,0x2f
c001243d:	74 95                	je     c00123d4 <standardiseFiles(char*, char const*, char const*)+0xd8>
c001243f:	80 fa 5c             	cmp    dl,0x5c
c0012442:	74 90                	je     c00123d4 <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012444:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c0012447:	40                   	inc    eax
c0012448:	eb 8a                	jmp    c00123d4 <standardiseFiles(char*, char const*, char const*)+0xd8>
c001244a:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c001244e:	83 ec 0c             	sub    esp,0xc
c0012451:	53                   	push   ebx
c0012452:	e8 ce e1 fe ff       	call   c0000625 <strlen>
c0012457:	83 c4 10             	add    esp,0x10
c001245a:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c001245f:	75 26                	jne    c0012487 <standardiseFiles(char*, char const*, char const*)+0x18b>
c0012461:	83 ec 0c             	sub    esp,0xc
c0012464:	53                   	push   ebx
c0012465:	e8 bb e1 fe ff       	call   c0000625 <strlen>
c001246a:	83 c4 10             	add    esp,0x10
c001246d:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c0012472:	74 26                	je     c001249a <standardiseFiles(char*, char const*, char const*)+0x19e>
c0012474:	83 ec 0c             	sub    esp,0xc
c0012477:	53                   	push   ebx
c0012478:	e8 a8 e1 fe ff       	call   c0000625 <strlen>
c001247d:	83 c4 10             	add    esp,0x10
c0012480:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0012485:	eb c7                	jmp    c001244e <standardiseFiles(char*, char const*, char const*)+0x152>
c0012487:	83 ec 0c             	sub    esp,0xc
c001248a:	53                   	push   ebx
c001248b:	e8 95 e1 fe ff       	call   c0000625 <strlen>
c0012490:	83 c4 10             	add    esp,0x10
c0012493:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012498:	74 c7                	je     c0012461 <standardiseFiles(char*, char const*, char const*)+0x165>
c001249a:	81 c4 0c 04 00 00    	add    esp,0x40c
c00124a0:	5b                   	pop    ebx
c00124a1:	5e                   	pop    esi
c00124a2:	5f                   	pop    edi
c00124a3:	5d                   	pop    ebp
c00124a4:	c3                   	ret    
c00124a5:	90                   	nop

c00124a6 <File::File(char const*, Process*)>:
c00124a6:	83 ec 0c             	sub    esp,0xc
c00124a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00124ad:	83 ec 08             	sub    esp,0x8
c00124b0:	6a 00                	push   0x0
c00124b2:	50                   	push   eax
c00124b3:	e8 ec e7 ff ff       	call   c0010ca4 <UnixFile::UnixFile(int)>
c00124b8:	83 c4 10             	add    esp,0x10
c00124bb:	ba 64 0f 02 c0       	mov    edx,0xc0020f64
c00124c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00124c4:	89 10                	mov    DWORD PTR [eax],edx
c00124c6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00124ca:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00124d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00124d4:	83 c0 0d             	add    eax,0xd
c00124d7:	83 ec 04             	sub    esp,0x4
c00124da:	52                   	push   edx
c00124db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00124df:	50                   	push   eax
c00124e0:	e8 17 fe ff ff       	call   c00122fc <standardiseFiles(char*, char const*, char const*)>
c00124e5:	83 c4 10             	add    esp,0x10
c00124e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00124ec:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c00124ef:	8d 50 bf             	lea    edx,[eax-0x41]
c00124f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00124f6:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c00124fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012500:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0012504:	90                   	nop
c0012505:	83 c4 0c             	add    esp,0xc
c0012508:	c3                   	ret    
c0012509:	90                   	nop

c001250a <File::open(FileOpenMode)>:
c001250a:	53                   	push   ebx
c001250b:	b8 0b 00 00 00       	mov    eax,0xb
c0012510:	83 ec 08             	sub    esp,0x8
c0012513:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012517:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c001251e:	80 fa 19             	cmp    dl,0x19
c0012521:	77 40                	ja     c0012563 <File::open(FileOpenMode)+0x59>
c0012523:	8b 14 95 20 3a 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc5e0]
c001252a:	85 d2                	test   edx,edx
c001252c:	74 35                	je     c0012563 <File::open(FileOpenMode)+0x59>
c001252e:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012534:	85 d2                	test   edx,edx
c0012536:	74 2b                	je     c0012563 <File::open(FileOpenMode)+0x59>
c0012538:	b8 06 00 00 00       	mov    eax,0x6
c001253d:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0012541:	75 20                	jne    c0012563 <File::open(FileOpenMode)+0x59>
c0012543:	8b 02                	mov    eax,DWORD PTR [edx]
c0012545:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c001254b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001254f:	51                   	push   ecx
c0012550:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0012553:	51                   	push   ecx
c0012554:	52                   	push   edx
c0012555:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0012558:	83 c4 10             	add    esp,0x10
c001255b:	85 c0                	test   eax,eax
c001255d:	75 04                	jne    c0012563 <File::open(FileOpenMode)+0x59>
c001255f:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0012563:	83 c4 08             	add    esp,0x8
c0012566:	5b                   	pop    ebx
c0012567:	c3                   	ret    

c0012568 <File::close()>:
c0012568:	53                   	push   ebx
c0012569:	b8 0b 00 00 00       	mov    eax,0xb
c001256e:	83 ec 08             	sub    esp,0x8
c0012571:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012575:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c001257c:	80 fa 19             	cmp    dl,0x19
c001257f:	77 41                	ja     c00125c2 <File::close()+0x5a>
c0012581:	8b 1c 95 20 3a 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdc5e0]
c0012588:	85 db                	test   ebx,ebx
c001258a:	74 36                	je     c00125c2 <File::close()+0x5a>
c001258c:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0012593:	74 2d                	je     c00125c2 <File::close()+0x5a>
c0012595:	b8 05 00 00 00       	mov    eax,0x5
c001259a:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c001259e:	74 22                	je     c00125c2 <File::close()+0x5a>
c00125a0:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c00125a4:	8b 04 95 20 3a 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdc5e0]
c00125ab:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00125b1:	53                   	push   ebx
c00125b2:	53                   	push   ebx
c00125b3:	8b 10                	mov    edx,DWORD PTR [eax]
c00125b5:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00125bb:	50                   	push   eax
c00125bc:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c00125bf:	83 c4 10             	add    esp,0x10
c00125c2:	83 c4 08             	add    esp,0x8
c00125c5:	5b                   	pop    ebx
c00125c6:	c3                   	ret    
c00125c7:	90                   	nop

c00125c8 <File::seek(unsigned long long)>:
c00125c8:	56                   	push   esi
c00125c9:	53                   	push   ebx
c00125ca:	b8 0b 00 00 00       	mov    eax,0xb
c00125cf:	51                   	push   ecx
c00125d0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00125d4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00125d8:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c00125df:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00125e3:	80 fa 19             	cmp    dl,0x19
c00125e6:	77 31                	ja     c0012619 <File::seek(unsigned long long)+0x51>
c00125e8:	8b 14 95 20 3a 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc5e0]
c00125ef:	85 d2                	test   edx,edx
c00125f1:	74 26                	je     c0012619 <File::seek(unsigned long long)+0x51>
c00125f3:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00125f9:	85 d2                	test   edx,edx
c00125fb:	74 1c                	je     c0012619 <File::seek(unsigned long long)+0x51>
c00125fd:	b8 05 00 00 00       	mov    eax,0x5
c0012602:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0012606:	74 11                	je     c0012619 <File::seek(unsigned long long)+0x51>
c0012608:	8b 02                	mov    eax,DWORD PTR [edx]
c001260a:	53                   	push   ebx
c001260b:	51                   	push   ecx
c001260c:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0012612:	52                   	push   edx
c0012613:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0012616:	83 c4 10             	add    esp,0x10
c0012619:	5a                   	pop    edx
c001261a:	5b                   	pop    ebx
c001261b:	5e                   	pop    esi
c001261c:	c3                   	ret    
c001261d:	90                   	nop

c001261e <File::tell(unsigned long long*)>:
c001261e:	83 ec 0c             	sub    esp,0xc
c0012621:	b8 0b 00 00 00       	mov    eax,0xb
c0012626:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001262a:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012631:	80 fa 19             	cmp    dl,0x19
c0012634:	77 34                	ja     c001266a <File::tell(unsigned long long*)+0x4c>
c0012636:	8b 14 95 20 3a 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc5e0]
c001263d:	85 d2                	test   edx,edx
c001263f:	74 29                	je     c001266a <File::tell(unsigned long long*)+0x4c>
c0012641:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012647:	85 d2                	test   edx,edx
c0012649:	74 1f                	je     c001266a <File::tell(unsigned long long*)+0x4c>
c001264b:	b8 05 00 00 00       	mov    eax,0x5
c0012650:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012654:	74 14                	je     c001266a <File::tell(unsigned long long*)+0x4c>
c0012656:	50                   	push   eax
c0012657:	8b 02                	mov    eax,DWORD PTR [edx]
c0012659:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001265d:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012663:	52                   	push   edx
c0012664:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0012667:	83 c4 10             	add    esp,0x10
c001266a:	83 c4 0c             	add    esp,0xc
c001266d:	c3                   	ret    

c001266e <File::rewind()>:
c001266e:	83 ec 10             	sub    esp,0x10
c0012671:	6a 00                	push   0x0
c0012673:	6a 00                	push   0x0
c0012675:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012679:	e8 4a ff ff ff       	call   c00125c8 <File::seek(unsigned long long)>
c001267e:	83 c4 1c             	add    esp,0x1c
c0012681:	c3                   	ret    

c0012682 <File::unlink()>:
c0012682:	83 ec 0c             	sub    esp,0xc
c0012685:	b8 0b 00 00 00       	mov    eax,0xb
c001268a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001268e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012695:	80 f9 19             	cmp    cl,0x19
c0012698:	77 2f                	ja     c00126c9 <File::unlink()+0x47>
c001269a:	8b 0c 8d 20 3a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdc5e0]
c00126a1:	85 c9                	test   ecx,ecx
c00126a3:	74 24                	je     c00126c9 <File::unlink()+0x47>
c00126a5:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00126ab:	85 c9                	test   ecx,ecx
c00126ad:	74 1a                	je     c00126c9 <File::unlink()+0x47>
c00126af:	b8 06 00 00 00       	mov    eax,0x6
c00126b4:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00126b8:	75 0f                	jne    c00126c9 <File::unlink()+0x47>
c00126ba:	83 c2 0d             	add    edx,0xd
c00126bd:	50                   	push   eax
c00126be:	50                   	push   eax
c00126bf:	8b 01                	mov    eax,DWORD PTR [ecx]
c00126c1:	52                   	push   edx
c00126c2:	51                   	push   ecx
c00126c3:	ff 50 38             	call   DWORD PTR [eax+0x38]
c00126c6:	83 c4 10             	add    esp,0x10
c00126c9:	83 c4 0c             	add    esp,0xc
c00126cc:	c3                   	ret    
c00126cd:	90                   	nop

c00126ce <File::rename(char const*)>:
c00126ce:	83 ec 0c             	sub    esp,0xc
c00126d1:	b8 0b 00 00 00       	mov    eax,0xb
c00126d6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00126da:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00126e1:	80 f9 19             	cmp    cl,0x19
c00126e4:	77 32                	ja     c0012718 <File::rename(char const*)+0x4a>
c00126e6:	8b 0c 8d 20 3a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdc5e0]
c00126ed:	85 c9                	test   ecx,ecx
c00126ef:	74 27                	je     c0012718 <File::rename(char const*)+0x4a>
c00126f1:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00126f7:	85 c9                	test   ecx,ecx
c00126f9:	74 1d                	je     c0012718 <File::rename(char const*)+0x4a>
c00126fb:	b8 06 00 00 00       	mov    eax,0x6
c0012700:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012704:	75 12                	jne    c0012718 <File::rename(char const*)+0x4a>
c0012706:	83 c2 0d             	add    edx,0xd
c0012709:	50                   	push   eax
c001270a:	8b 01                	mov    eax,DWORD PTR [ecx]
c001270c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012710:	52                   	push   edx
c0012711:	51                   	push   ecx
c0012712:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0012715:	83 c4 10             	add    esp,0x10
c0012718:	83 c4 0c             	add    esp,0xc
c001271b:	c3                   	ret    

c001271c <File::chfatattr(unsigned char, unsigned char)>:
c001271c:	57                   	push   edi
c001271d:	b8 0b 00 00 00       	mov    eax,0xb
c0012722:	56                   	push   esi
c0012723:	53                   	push   ebx
c0012724:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012728:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001272c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012733:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0012737:	80 f9 19             	cmp    cl,0x19
c001273a:	77 37                	ja     c0012773 <File::chfatattr(unsigned char, unsigned char)+0x57>
c001273c:	8b 0c 8d 20 3a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdc5e0]
c0012743:	85 c9                	test   ecx,ecx
c0012745:	74 2c                	je     c0012773 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012747:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001274d:	85 c9                	test   ecx,ecx
c001274f:	74 22                	je     c0012773 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012751:	b8 06 00 00 00       	mov    eax,0x6
c0012756:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001275a:	75 17                	jne    c0012773 <File::chfatattr(unsigned char, unsigned char)+0x57>
c001275c:	8b 39                	mov    edi,DWORD PTR [ecx]
c001275e:	89 f0                	mov    eax,esi
c0012760:	83 c2 0d             	add    edx,0xd
c0012763:	0f b6 f0             	movzx  esi,al
c0012766:	0f b6 db             	movzx  ebx,bl
c0012769:	56                   	push   esi
c001276a:	53                   	push   ebx
c001276b:	52                   	push   edx
c001276c:	51                   	push   ecx
c001276d:	ff 57 34             	call   DWORD PTR [edi+0x34]
c0012770:	83 c4 10             	add    esp,0x10
c0012773:	5b                   	pop    ebx
c0012774:	5e                   	pop    esi
c0012775:	5f                   	pop    edi
c0012776:	c3                   	ret    
c0012777:	90                   	nop

c0012778 <File::exists()>:
c0012778:	83 ec 0c             	sub    esp,0xc
c001277b:	31 c0                	xor    eax,eax
c001277d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012781:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012788:	80 f9 19             	cmp    cl,0x19
c001278b:	77 24                	ja     c00127b1 <File::exists()+0x39>
c001278d:	8b 0c 8d 20 3a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdc5e0]
c0012794:	85 c9                	test   ecx,ecx
c0012796:	74 19                	je     c00127b1 <File::exists()+0x39>
c0012798:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001279e:	85 c9                	test   ecx,ecx
c00127a0:	74 0f                	je     c00127b1 <File::exists()+0x39>
c00127a2:	83 c2 0d             	add    edx,0xd
c00127a5:	50                   	push   eax
c00127a6:	50                   	push   eax
c00127a7:	8b 01                	mov    eax,DWORD PTR [ecx]
c00127a9:	52                   	push   edx
c00127aa:	51                   	push   ecx
c00127ab:	ff 50 44             	call   DWORD PTR [eax+0x44]
c00127ae:	83 c4 10             	add    esp,0x10
c00127b1:	83 c4 0c             	add    esp,0xc
c00127b4:	c3                   	ret    
c00127b5:	90                   	nop

c00127b6 <File::stat(unsigned long long*, bool*)>:
c00127b6:	56                   	push   esi
c00127b7:	53                   	push   ebx
c00127b8:	50                   	push   eax
c00127b9:	b8 0b 00 00 00       	mov    eax,0xb
c00127be:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00127c2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00127c6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00127cd:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00127d1:	80 f9 19             	cmp    cl,0x19
c00127d4:	77 3d                	ja     c0012813 <File::stat(unsigned long long*, bool*)+0x5d>
c00127d6:	8b 0c 8d 20 3a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdc5e0]
c00127dd:	85 c9                	test   ecx,ecx
c00127df:	74 32                	je     c0012813 <File::stat(unsigned long long*, bool*)+0x5d>
c00127e1:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00127e7:	85 c9                	test   ecx,ecx
c00127e9:	74 28                	je     c0012813 <File::stat(unsigned long long*, bool*)+0x5d>
c00127eb:	8b 01                	mov    eax,DWORD PTR [ecx]
c00127ed:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00127f1:	74 13                	je     c0012806 <File::stat(unsigned long long*, bool*)+0x50>
c00127f3:	83 ec 04             	sub    esp,0x4
c00127f6:	56                   	push   esi
c00127f7:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c00127fd:	51                   	push   ecx
c00127fe:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c0012801:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0012804:	eb 0a                	jmp    c0012810 <File::stat(unsigned long long*, bool*)+0x5a>
c0012806:	53                   	push   ebx
c0012807:	83 c2 0d             	add    edx,0xd
c001280a:	56                   	push   esi
c001280b:	52                   	push   edx
c001280c:	51                   	push   ecx
c001280d:	ff 50 30             	call   DWORD PTR [eax+0x30]
c0012810:	83 c4 10             	add    esp,0x10
c0012813:	5a                   	pop    edx
c0012814:	5b                   	pop    ebx
c0012815:	5e                   	pop    esi
c0012816:	c3                   	ret    

c0012817 <getcwd(Process*, char*, int)>:
c0012817:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001281b:	31 c0                	xor    eax,eax
c001281d:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0012820:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0012824:	7d 15                	jge    c001283b <getcwd(Process*, char*, int)+0x24>
c0012826:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001282a:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0012831:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0012834:	84 c9                	test   cl,cl
c0012836:	74 06                	je     c001283e <getcwd(Process*, char*, int)+0x27>
c0012838:	40                   	inc    eax
c0012839:	eb e2                	jmp    c001281d <getcwd(Process*, char*, int)+0x6>
c001283b:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c001283e:	31 c0                	xor    eax,eax
c0012840:	c3                   	ret    

c0012841 <setcwd(Process*, char*)>:
c0012841:	55                   	push   ebp
c0012842:	57                   	push   edi
c0012843:	56                   	push   esi
c0012844:	53                   	push   ebx
c0012845:	81 ec 20 02 00 00    	sub    esp,0x220
c001284b:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c0012852:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c0012858:	57                   	push   edi
c0012859:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0012860:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0012864:	56                   	push   esi
c0012865:	e8 92 fa ff ff       	call   c00122fc <standardiseFiles(char*, char const*, char const*)>
c001286a:	89 34 24             	mov    DWORD PTR [esp],esi
c001286d:	e8 b3 dd fe ff       	call   c0000625 <strlen>
c0012872:	83 c4 10             	add    esp,0x10
c0012875:	83 f8 02             	cmp    eax,0x2
c0012878:	77 17                	ja     c0012891 <setcwd(Process*, char*)+0x50>
c001287a:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c001287f:	83 e8 41             	sub    eax,0x41
c0012882:	83 f8 19             	cmp    eax,0x19
c0012885:	76 24                	jbe    c00128ab <setcwd(Process*, char*)+0x6a>
c0012887:	b8 03 00 00 00       	mov    eax,0x3
c001288c:	e9 cb 00 00 00       	jmp    c001295c <setcwd(Process*, char*)+0x11b>
c0012891:	83 ec 0c             	sub    esp,0xc
c0012894:	56                   	push   esi
c0012895:	e8 8b dd fe ff       	call   c0000625 <strlen>
c001289a:	83 c4 10             	add    esp,0x10
c001289d:	83 f8 03             	cmp    eax,0x3
c00128a0:	75 33                	jne    c00128d5 <setcwd(Process*, char*)+0x94>
c00128a2:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c00128a7:	75 2c                	jne    c00128d5 <setcwd(Process*, char*)+0x94>
c00128a9:	eb cf                	jmp    c001287a <setcwd(Process*, char*)+0x39>
c00128ab:	8b 14 85 20 3a 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdc5e0]
c00128b2:	b8 05 00 00 00       	mov    eax,0x5
c00128b7:	85 d2                	test   edx,edx
c00128b9:	0f 84 9d 00 00 00    	je     c001295c <setcwd(Process*, char*)+0x11b>
c00128bf:	b8 06 00 00 00       	mov    eax,0x6
c00128c4:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c00128cb:	0f 84 8b 00 00 00    	je     c001295c <setcwd(Process*, char*)+0x11b>
c00128d1:	51                   	push   ecx
c00128d2:	51                   	push   ecx
c00128d3:	eb 7b                	jmp    c0012950 <setcwd(Process*, char*)+0x10f>
c00128d5:	83 ec 0c             	sub    esp,0xc
c00128d8:	68 14 01 00 00       	push   0x114
c00128dd:	e8 96 f7 ff ff       	call   c0012078 <operator new(unsigned long)>
c00128e2:	83 c4 0c             	add    esp,0xc
c00128e5:	89 c3                	mov    ebx,eax
c00128e7:	55                   	push   ebp
c00128e8:	56                   	push   esi
c00128e9:	50                   	push   eax
c00128ea:	e8 b7 fb ff ff       	call   c00124a6 <File::File(char const*, Process*)>
c00128ef:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c00128f4:	83 c4 0c             	add    esp,0xc
c00128f7:	8d 44 24 0b          	lea    eax,[esp+0xb]
c00128fb:	50                   	push   eax
c00128fc:	8d 44 24 10          	lea    eax,[esp+0x10]
c0012900:	50                   	push   eax
c0012901:	53                   	push   ebx
c0012902:	e8 af fe ff ff       	call   c00127b6 <File::stat(unsigned long long*, bool*)>
c0012907:	83 c4 10             	add    esp,0x10
c001290a:	8b 13                	mov    edx,DWORD PTR [ebx]
c001290c:	83 f8 02             	cmp    eax,0x2
c001290f:	75 09                	jne    c001291a <setcwd(Process*, char*)+0xd9>
c0012911:	83 ec 0c             	sub    esp,0xc
c0012914:	53                   	push   ebx
c0012915:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0012918:	eb 0d                	jmp    c0012927 <setcwd(Process*, char*)+0xe6>
c001291a:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c001291d:	85 c0                	test   eax,eax
c001291f:	74 10                	je     c0012931 <setcwd(Process*, char*)+0xf0>
c0012921:	83 ec 0c             	sub    esp,0xc
c0012924:	53                   	push   ebx
c0012925:	ff d2                	call   edx
c0012927:	83 c4 10             	add    esp,0x10
c001292a:	b8 01 00 00 00       	mov    eax,0x1
c001292f:	eb 2b                	jmp    c001295c <setcwd(Process*, char*)+0x11b>
c0012931:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c0012936:	75 10                	jne    c0012948 <setcwd(Process*, char*)+0x107>
c0012938:	83 ec 0c             	sub    esp,0xc
c001293b:	53                   	push   ebx
c001293c:	ff d2                	call   edx
c001293e:	83 c4 10             	add    esp,0x10
c0012941:	b8 02 00 00 00       	mov    eax,0x2
c0012946:	eb 14                	jmp    c001295c <setcwd(Process*, char*)+0x11b>
c0012948:	83 ec 0c             	sub    esp,0xc
c001294b:	53                   	push   ebx
c001294c:	ff d2                	call   edx
c001294e:	58                   	pop    eax
c001294f:	5a                   	pop    edx
c0012950:	56                   	push   esi
c0012951:	57                   	push   edi
c0012952:	e8 50 dd fe ff       	call   c00006a7 <strcpy>
c0012957:	83 c4 10             	add    esp,0x10
c001295a:	31 c0                	xor    eax,eax
c001295c:	81 c4 1c 02 00 00    	add    esp,0x21c
c0012962:	5b                   	pop    ebx
c0012963:	5e                   	pop    esi
c0012964:	5f                   	pop    edi
c0012965:	5d                   	pop    ebp
c0012966:	c3                   	ret    
c0012967:	90                   	nop

c0012968 <Directory::Directory(char const*, Process*)>:
c0012968:	83 ec 0c             	sub    esp,0xc
c001296b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001296f:	83 ec 08             	sub    esp,0x8
c0012972:	6a 00                	push   0x0
c0012974:	50                   	push   eax
c0012975:	e8 2a e3 ff ff       	call   c0010ca4 <UnixFile::UnixFile(int)>
c001297a:	83 c4 10             	add    esp,0x10
c001297d:	ba 80 0f 02 c0       	mov    edx,0xc0020f80
c0012982:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012986:	89 10                	mov    DWORD PTR [eax],edx
c0012988:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001298c:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0012992:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012996:	83 c0 0d             	add    eax,0xd
c0012999:	83 ec 04             	sub    esp,0x4
c001299c:	52                   	push   edx
c001299d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00129a1:	50                   	push   eax
c00129a2:	e8 55 f9 ff ff       	call   c00122fc <standardiseFiles(char*, char const*, char const*)>
c00129a7:	83 c4 10             	add    esp,0x10
c00129aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00129ae:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c00129b1:	8d 50 bf             	lea    edx,[eax-0x41]
c00129b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00129b8:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c00129be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00129c2:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c00129c6:	90                   	nop
c00129c7:	83 c4 0c             	add    esp,0xc
c00129ca:	c3                   	ret    
c00129cb:	90                   	nop

c00129cc <Directory::open()>:
c00129cc:	53                   	push   ebx
c00129cd:	b8 0b 00 00 00       	mov    eax,0xb
c00129d2:	83 ec 08             	sub    esp,0x8
c00129d5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00129d9:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c00129e0:	80 fa 19             	cmp    dl,0x19
c00129e3:	77 3d                	ja     c0012a22 <Directory::open()+0x56>
c00129e5:	8b 14 95 20 3a 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc5e0]
c00129ec:	85 d2                	test   edx,edx
c00129ee:	74 32                	je     c0012a22 <Directory::open()+0x56>
c00129f0:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00129f6:	85 d2                	test   edx,edx
c00129f8:	74 28                	je     c0012a22 <Directory::open()+0x56>
c00129fa:	b8 06 00 00 00       	mov    eax,0x6
c00129ff:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0012a03:	75 1d                	jne    c0012a22 <Directory::open()+0x56>
c0012a05:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0012a0b:	50                   	push   eax
c0012a0c:	8b 02                	mov    eax,DWORD PTR [edx]
c0012a0e:	51                   	push   ecx
c0012a0f:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0012a12:	51                   	push   ecx
c0012a13:	52                   	push   edx
c0012a14:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c0012a17:	83 c4 10             	add    esp,0x10
c0012a1a:	85 c0                	test   eax,eax
c0012a1c:	75 04                	jne    c0012a22 <Directory::open()+0x56>
c0012a1e:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0012a22:	83 c4 08             	add    esp,0x8
c0012a25:	5b                   	pop    ebx
c0012a26:	c3                   	ret    
c0012a27:	90                   	nop

c0012a28 <Directory::close()>:
c0012a28:	53                   	push   ebx
c0012a29:	b8 0b 00 00 00       	mov    eax,0xb
c0012a2e:	83 ec 08             	sub    esp,0x8
c0012a31:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012a35:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012a3c:	80 fa 19             	cmp    dl,0x19
c0012a3f:	77 41                	ja     c0012a82 <Directory::close()+0x5a>
c0012a41:	8b 1c 95 20 3a 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdc5e0]
c0012a48:	85 db                	test   ebx,ebx
c0012a4a:	74 36                	je     c0012a82 <Directory::close()+0x5a>
c0012a4c:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0012a53:	74 2d                	je     c0012a82 <Directory::close()+0x5a>
c0012a55:	b8 05 00 00 00       	mov    eax,0x5
c0012a5a:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012a5e:	74 22                	je     c0012a82 <Directory::close()+0x5a>
c0012a60:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0012a64:	8b 04 95 20 3a 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdc5e0]
c0012a6b:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012a71:	53                   	push   ebx
c0012a72:	53                   	push   ebx
c0012a73:	8b 10                	mov    edx,DWORD PTR [eax]
c0012a75:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012a7b:	50                   	push   eax
c0012a7c:	ff 52 20             	call   DWORD PTR [edx+0x20]
c0012a7f:	83 c4 10             	add    esp,0x10
c0012a82:	83 c4 08             	add    esp,0x8
c0012a85:	5b                   	pop    ebx
c0012a86:	c3                   	ret    
c0012a87:	90                   	nop

c0012a88 <Directory::unlink()>:
c0012a88:	83 ec 0c             	sub    esp,0xc
c0012a8b:	b8 0b 00 00 00       	mov    eax,0xb
c0012a90:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012a94:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012a9b:	80 f9 19             	cmp    cl,0x19
c0012a9e:	77 2f                	ja     c0012acf <Directory::unlink()+0x47>
c0012aa0:	8b 0c 8d 20 3a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdc5e0]
c0012aa7:	85 c9                	test   ecx,ecx
c0012aa9:	74 24                	je     c0012acf <Directory::unlink()+0x47>
c0012aab:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012ab1:	85 c9                	test   ecx,ecx
c0012ab3:	74 1a                	je     c0012acf <Directory::unlink()+0x47>
c0012ab5:	b8 06 00 00 00       	mov    eax,0x6
c0012aba:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012abe:	75 0f                	jne    c0012acf <Directory::unlink()+0x47>
c0012ac0:	83 c2 0d             	add    edx,0xd
c0012ac3:	50                   	push   eax
c0012ac4:	50                   	push   eax
c0012ac5:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012ac7:	52                   	push   edx
c0012ac8:	51                   	push   ecx
c0012ac9:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0012acc:	83 c4 10             	add    esp,0x10
c0012acf:	83 c4 0c             	add    esp,0xc
c0012ad2:	c3                   	ret    
c0012ad3:	90                   	nop

c0012ad4 <Directory::rename(char const*)>:
c0012ad4:	83 ec 0c             	sub    esp,0xc
c0012ad7:	b8 0b 00 00 00       	mov    eax,0xb
c0012adc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012ae0:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012ae7:	80 f9 19             	cmp    cl,0x19
c0012aea:	77 32                	ja     c0012b1e <Directory::rename(char const*)+0x4a>
c0012aec:	8b 0c 8d 20 3a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdc5e0]
c0012af3:	85 c9                	test   ecx,ecx
c0012af5:	74 27                	je     c0012b1e <Directory::rename(char const*)+0x4a>
c0012af7:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012afd:	85 c9                	test   ecx,ecx
c0012aff:	74 1d                	je     c0012b1e <Directory::rename(char const*)+0x4a>
c0012b01:	b8 06 00 00 00       	mov    eax,0x6
c0012b06:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012b0a:	75 12                	jne    c0012b1e <Directory::rename(char const*)+0x4a>
c0012b0c:	83 c2 0d             	add    edx,0xd
c0012b0f:	50                   	push   eax
c0012b10:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012b12:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012b16:	52                   	push   edx
c0012b17:	51                   	push   ecx
c0012b18:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0012b1b:	83 c4 10             	add    esp,0x10
c0012b1e:	83 c4 0c             	add    esp,0xc
c0012b21:	c3                   	ret    

c0012b22 <Directory::exists()>:
c0012b22:	83 ec 0c             	sub    esp,0xc
c0012b25:	31 c0                	xor    eax,eax
c0012b27:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012b2b:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012b32:	80 f9 19             	cmp    cl,0x19
c0012b35:	77 24                	ja     c0012b5b <Directory::exists()+0x39>
c0012b37:	8b 0c 8d 20 3a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdc5e0]
c0012b3e:	85 c9                	test   ecx,ecx
c0012b40:	74 19                	je     c0012b5b <Directory::exists()+0x39>
c0012b42:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012b48:	85 c9                	test   ecx,ecx
c0012b4a:	74 0f                	je     c0012b5b <Directory::exists()+0x39>
c0012b4c:	83 c2 0d             	add    edx,0xd
c0012b4f:	50                   	push   eax
c0012b50:	50                   	push   eax
c0012b51:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012b53:	52                   	push   edx
c0012b54:	51                   	push   ecx
c0012b55:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0012b58:	83 c4 10             	add    esp,0x10
c0012b5b:	83 c4 0c             	add    esp,0xc
c0012b5e:	c3                   	ret    
c0012b5f:	90                   	nop

c0012b60 <Directory::read(dirent*)>:
c0012b60:	83 ec 1c             	sub    esp,0x1c
c0012b63:	b8 0b 00 00 00       	mov    eax,0xb
c0012b68:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0012b6c:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012b73:	80 fa 19             	cmp    dl,0x19
c0012b76:	77 30                	ja     c0012ba8 <Directory::read(dirent*)+0x48>
c0012b78:	8b 14 95 20 3a 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc5e0]
c0012b7f:	85 d2                	test   edx,edx
c0012b81:	74 25                	je     c0012ba8 <Directory::read(dirent*)+0x48>
c0012b83:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0012b8a:	74 1c                	je     c0012ba8 <Directory::read(dirent*)+0x48>
c0012b8c:	83 ec 0c             	sub    esp,0xc
c0012b8f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012b91:	8d 54 24 18          	lea    edx,[esp+0x18]
c0012b95:	52                   	push   edx
c0012b96:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0012b9a:	6a 00                	push   0x0
c0012b9c:	68 10 01 00 00       	push   0x110
c0012ba1:	51                   	push   ecx
c0012ba2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012ba5:	83 c4 20             	add    esp,0x20
c0012ba8:	83 c4 1c             	add    esp,0x1c
c0012bab:	c3                   	ret    

c0012bac <Directory::create()>:
c0012bac:	83 ec 0c             	sub    esp,0xc
c0012baf:	b8 0b 00 00 00       	mov    eax,0xb
c0012bb4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012bb8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012bbf:	80 f9 19             	cmp    cl,0x19
c0012bc2:	77 2f                	ja     c0012bf3 <Directory::create()+0x47>
c0012bc4:	8b 0c 8d 20 3a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdc5e0]
c0012bcb:	85 c9                	test   ecx,ecx
c0012bcd:	74 24                	je     c0012bf3 <Directory::create()+0x47>
c0012bcf:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012bd5:	85 c9                	test   ecx,ecx
c0012bd7:	74 1a                	je     c0012bf3 <Directory::create()+0x47>
c0012bd9:	b8 06 00 00 00       	mov    eax,0x6
c0012bde:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012be2:	75 0f                	jne    c0012bf3 <Directory::create()+0x47>
c0012be4:	83 c2 0d             	add    edx,0xd
c0012be7:	50                   	push   eax
c0012be8:	50                   	push   eax
c0012be9:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012beb:	52                   	push   edx
c0012bec:	51                   	push   ecx
c0012bed:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0012bf0:	83 c4 10             	add    esp,0x10
c0012bf3:	83 c4 0c             	add    esp,0xc
c0012bf6:	c3                   	ret    
c0012bf7:	90                   	nop

c0012bf8 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c0012bf8:	b8 0a 00 00 00       	mov    eax,0xa
c0012bfd:	c3                   	ret    

c0012bfe <Bus::Bus(char const*)>:
c0012bfe:	83 ec 0c             	sub    esp,0xc
c0012c01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c05:	83 ec 08             	sub    esp,0x8
c0012c08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012c0c:	50                   	push   eax
c0012c0d:	e8 60 09 00 00       	call   c0013572 <Device::Device(char const*)>
c0012c12:	83 c4 10             	add    esp,0x10
c0012c15:	ba 9c 0f 02 c0       	mov    edx,0xc0020f9c
c0012c1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c1e:	89 10                	mov    DWORD PTR [eax],edx
c0012c20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c24:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0012c2e:	90                   	nop
c0012c2f:	83 c4 0c             	add    esp,0xc
c0012c32:	c3                   	ret    
c0012c33:	90                   	nop

c0012c34 <Bus::~Bus()>:
c0012c34:	83 ec 0c             	sub    esp,0xc
c0012c37:	ba 9c 0f 02 c0       	mov    edx,0xc0020f9c
c0012c3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c40:	89 10                	mov    DWORD PTR [eax],edx
c0012c42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c46:	83 ec 0c             	sub    esp,0xc
c0012c49:	50                   	push   eax
c0012c4a:	e8 d5 05 00 00       	call   c0013224 <Device::~Device()>
c0012c4f:	83 c4 10             	add    esp,0x10
c0012c52:	90                   	nop
c0012c53:	83 c4 0c             	add    esp,0xc
c0012c56:	c3                   	ret    
c0012c57:	90                   	nop

c0012c58 <Bus::~Bus()>:
c0012c58:	83 ec 0c             	sub    esp,0xc
c0012c5b:	83 ec 0c             	sub    esp,0xc
c0012c5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012c62:	e8 cd ff ff ff       	call   c0012c34 <Bus::~Bus()>
c0012c67:	83 c4 10             	add    esp,0x10
c0012c6a:	83 ec 08             	sub    esp,0x8
c0012c6d:	68 58 01 00 00       	push   0x158
c0012c72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012c76:	e8 0c f4 ff ff       	call   c0012087 <operator delete(void*, unsigned long)>
c0012c7b:	83 c4 10             	add    esp,0x10
c0012c7e:	83 c4 0c             	add    esp,0xc
c0012c81:	c3                   	ret    

c0012c82 <Buzzer::Buzzer(char const*)>:
c0012c82:	83 ec 0c             	sub    esp,0xc
c0012c85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c89:	83 ec 08             	sub    esp,0x8
c0012c8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012c90:	50                   	push   eax
c0012c91:	e8 dc 08 00 00       	call   c0013572 <Device::Device(char const*)>
c0012c96:	83 c4 10             	add    esp,0x10
c0012c99:	ba c8 0f 02 c0       	mov    edx,0xc0020fc8
c0012c9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ca2:	89 10                	mov    DWORD PTR [eax],edx
c0012ca4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ca8:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0012cb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012cb6:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c0012cc0:	90                   	nop
c0012cc1:	83 c4 0c             	add    esp,0xc
c0012cc4:	c3                   	ret    
c0012cc5:	90                   	nop

c0012cc6 <Buzzer::~Buzzer()>:
c0012cc6:	83 ec 0c             	sub    esp,0xc
c0012cc9:	ba c8 0f 02 c0       	mov    edx,0xc0020fc8
c0012cce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012cd2:	89 10                	mov    DWORD PTR [eax],edx
c0012cd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012cd8:	83 ec 0c             	sub    esp,0xc
c0012cdb:	50                   	push   eax
c0012cdc:	e8 43 05 00 00       	call   c0013224 <Device::~Device()>
c0012ce1:	83 c4 10             	add    esp,0x10
c0012ce4:	90                   	nop
c0012ce5:	83 c4 0c             	add    esp,0xc
c0012ce8:	c3                   	ret    
c0012ce9:	90                   	nop

c0012cea <Buzzer::~Buzzer()>:
c0012cea:	83 ec 0c             	sub    esp,0xc
c0012ced:	83 ec 0c             	sub    esp,0xc
c0012cf0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012cf4:	e8 cd ff ff ff       	call   c0012cc6 <Buzzer::~Buzzer()>
c0012cf9:	83 c4 10             	add    esp,0x10
c0012cfc:	83 ec 08             	sub    esp,0x8
c0012cff:	68 5c 01 00 00       	push   0x15c
c0012d04:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012d08:	e8 7a f3 ff ff       	call   c0012087 <operator delete(void*, unsigned long)>
c0012d0d:	83 c4 10             	add    esp,0x10
c0012d10:	83 c4 0c             	add    esp,0xc
c0012d13:	c3                   	ret    

c0012d14 <Buzzer::stop()>:
c0012d14:	83 ec 14             	sub    esp,0x14
c0012d17:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012d1b:	8b 10                	mov    edx,DWORD PTR [eax]
c0012d1d:	6a 00                	push   0x0
c0012d1f:	50                   	push   eax
c0012d20:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0012d23:	83 c4 1c             	add    esp,0x1c
c0012d26:	c3                   	ret    

c0012d27 <beepThread(void*)>:
c0012d27:	53                   	push   ebx
c0012d28:	83 ec 08             	sub    esp,0x8
c0012d2b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012d2f:	e8 38 b2 ff ff       	call   c000df6c <unlockScheduler()>
c0012d34:	b8 40 42 0f 00       	mov    eax,0xf4240
c0012d39:	52                   	push   edx
c0012d3a:	52                   	push   edx
c0012d3b:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c0012d41:	52                   	push   edx
c0012d42:	50                   	push   eax
c0012d43:	e8 db b8 ff ff       	call   c000e623 <nanoSleep(unsigned long long)>
c0012d48:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012d4b:	e8 c4 ff ff ff       	call   c0012d14 <Buzzer::stop()>
c0012d50:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c0012d58:	83 c4 18             	add    esp,0x18
c0012d5b:	5b                   	pop    ebx
c0012d5c:	e9 08 b8 ff ff       	jmp    c000e569 <blockTask(TaskState)>
c0012d61:	90                   	nop

c0012d62 <Buzzer::beep(int, int, bool)>:
c0012d62:	57                   	push   edi
c0012d63:	56                   	push   esi
c0012d64:	53                   	push   ebx
c0012d65:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012d69:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0012d6d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012d71:	52                   	push   edx
c0012d72:	52                   	push   edx
c0012d73:	8b 06                	mov    eax,DWORD PTR [esi]
c0012d75:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012d79:	56                   	push   esi
c0012d7a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0012d7d:	83 c4 10             	add    esp,0x10
c0012d80:	89 f8                	mov    eax,edi
c0012d82:	84 c0                	test   al,al
c0012d84:	74 1f                	je     c0012da5 <Buzzer::beep(int, int, bool)+0x43>
c0012d86:	50                   	push   eax
c0012d87:	50                   	push   eax
c0012d88:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c0012d8e:	99                   	cdq    
c0012d8f:	52                   	push   edx
c0012d90:	50                   	push   eax
c0012d91:	e8 8d b8 ff ff       	call   c000e623 <nanoSleep(unsigned long long)>
c0012d96:	83 c4 10             	add    esp,0x10
c0012d99:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0012d9d:	5b                   	pop    ebx
c0012d9e:	5e                   	pop    esi
c0012d9f:	5f                   	pop    edi
c0012da0:	e9 6f ff ff ff       	jmp    c0012d14 <Buzzer::stop()>
c0012da5:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c0012dab:	a1 1c 33 02 c0       	mov    eax,ds:0xc002331c
c0012db0:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c0012db8:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0012dbc:	c7 44 24 14 27 2d 01 c0 	mov    DWORD PTR [esp+0x14],0xc0012d27
c0012dc4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012dc8:	5b                   	pop    ebx
c0012dc9:	5e                   	pop    esi
c0012dca:	5f                   	pop    edi
c0012dcb:	e9 c4 b2 ff ff       	jmp    c000e094 <Process::createThread(void (*)(void*), void*, int)>

c0012dd0 <loadClockSettings()>:
c0012dd0:	c7 05 8c 35 02 c0 0a 00 00 00 	mov    DWORD PTR ds:0xc002358c,0xa
c0012dda:	c6 05 89 35 02 c0 00 	mov    BYTE PTR ds:0xc0023589,0x0
c0012de1:	c6 05 88 35 02 c0 01 	mov    BYTE PTR ds:0xc0023588,0x1
c0012de8:	c3                   	ret    
c0012de9:	90                   	nop

c0012dea <Clock::Clock(char const*)>:
c0012dea:	83 ec 0c             	sub    esp,0xc
c0012ded:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012df1:	83 ec 08             	sub    esp,0x8
c0012df4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012df8:	50                   	push   eax
c0012df9:	e8 74 07 00 00       	call   c0013572 <Device::Device(char const*)>
c0012dfe:	83 c4 10             	add    esp,0x10
c0012e01:	ba f8 0f 02 c0       	mov    edx,0xc0020ff8
c0012e06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e0a:	89 10                	mov    DWORD PTR [eax],edx
c0012e0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e10:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c0012e1a:	90                   	nop
c0012e1b:	83 c4 0c             	add    esp,0xc
c0012e1e:	c3                   	ret    
c0012e1f:	90                   	nop

c0012e20 <Clock::~Clock()>:
c0012e20:	83 ec 0c             	sub    esp,0xc
c0012e23:	ba f8 0f 02 c0       	mov    edx,0xc0020ff8
c0012e28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e2c:	89 10                	mov    DWORD PTR [eax],edx
c0012e2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e32:	83 ec 0c             	sub    esp,0xc
c0012e35:	50                   	push   eax
c0012e36:	e8 e9 03 00 00       	call   c0013224 <Device::~Device()>
c0012e3b:	83 c4 10             	add    esp,0x10
c0012e3e:	90                   	nop
c0012e3f:	83 c4 0c             	add    esp,0xc
c0012e42:	c3                   	ret    
c0012e43:	90                   	nop

c0012e44 <Clock::~Clock()>:
c0012e44:	83 ec 0c             	sub    esp,0xc
c0012e47:	83 ec 0c             	sub    esp,0xc
c0012e4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012e4e:	e8 cd ff ff ff       	call   c0012e20 <Clock::~Clock()>
c0012e53:	83 c4 10             	add    esp,0x10
c0012e56:	83 ec 08             	sub    esp,0x8
c0012e59:	68 58 01 00 00       	push   0x158
c0012e5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012e62:	e8 20 f2 ff ff       	call   c0012087 <operator delete(void*, unsigned long)>
c0012e67:	83 c4 10             	add    esp,0x10
c0012e6a:	83 c4 0c             	add    esp,0xc
c0012e6d:	c3                   	ret    

c0012e6e <Clock::timeInSecondsLocal()>:
c0012e6e:	53                   	push   ebx
c0012e6f:	83 ec 14             	sub    esp,0x14
c0012e72:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012e76:	8b 10                	mov    edx,DWORD PTR [eax]
c0012e78:	50                   	push   eax
c0012e79:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0012e7c:	0f b6 0d 88 35 02 c0 	movzx  ecx,BYTE PTR ds:0xc0023588
c0012e83:	03 0d 8c 35 02 c0    	add    ecx,DWORD PTR ds:0xc002358c
c0012e89:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0012e8f:	89 cb                	mov    ebx,ecx
c0012e91:	c1 fb 1f             	sar    ebx,0x1f
c0012e94:	01 c8                	add    eax,ecx
c0012e96:	11 da                	adc    edx,ebx
c0012e98:	83 c4 10             	add    esp,0x10
c0012e9b:	31 c9                	xor    ecx,ecx
c0012e9d:	80 3d 89 35 02 c0 00 	cmp    BYTE PTR ds:0xc0023589,0x0
c0012ea4:	74 05                	je     c0012eab <Clock::timeInSecondsLocal()+0x3d>
c0012ea6:	b9 08 07 00 00       	mov    ecx,0x708
c0012eab:	31 db                	xor    ebx,ebx
c0012ead:	01 c8                	add    eax,ecx
c0012eaf:	11 da                	adc    edx,ebx
c0012eb1:	83 c4 08             	add    esp,0x8
c0012eb4:	5b                   	pop    ebx
c0012eb5:	c3                   	ret    

c0012eb6 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0012eb6:	57                   	push   edi
c0012eb7:	56                   	push   esi
c0012eb8:	53                   	push   ebx
c0012eb9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012ebd:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012ec1:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012ec3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0012ec7:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c0012eca:	0f b6 05 88 35 02 c0 	movzx  eax,BYTE PTR ds:0xc0023588
c0012ed1:	03 05 8c 35 02 c0    	add    eax,DWORD PTR ds:0xc002358c
c0012ed7:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0012edd:	99                   	cdq    
c0012ede:	29 c6                	sub    esi,eax
c0012ee0:	19 d7                	sbb    edi,edx
c0012ee2:	89 f0                	mov    eax,esi
c0012ee4:	89 fa                	mov    edx,edi
c0012ee6:	31 f6                	xor    esi,esi
c0012ee8:	80 3d 89 35 02 c0 00 	cmp    BYTE PTR ds:0xc0023589,0x0
c0012eef:	74 05                	je     c0012ef6 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c0012ef1:	be 08 07 00 00       	mov    esi,0x708
c0012ef6:	31 ff                	xor    edi,edi
c0012ef8:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0012efc:	29 f0                	sub    eax,esi
c0012efe:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012f02:	19 fa                	sbb    edx,edi
c0012f04:	89 d8                	mov    eax,ebx
c0012f06:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0012f0a:	5b                   	pop    ebx
c0012f0b:	5e                   	pop    esi
c0012f0c:	5f                   	pop    edi
c0012f0d:	ff e0                	jmp    eax

c0012f0f <datetimeToSeconds(datetime_t)>:
c0012f0f:	55                   	push   ebp
c0012f10:	57                   	push   edi
c0012f11:	56                   	push   esi
c0012f12:	53                   	push   ebx
c0012f13:	83 ec 14             	sub    esp,0x14
c0012f16:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0012f1a:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0012f1e:	89 d3                	mov    ebx,edx
c0012f20:	0f b6 c6             	movzx  eax,dh
c0012f23:	c1 eb 10             	shr    ebx,0x10
c0012f26:	48                   	dec    eax
c0012f27:	66 81 eb 6c 07       	sub    bx,0x76c
c0012f2c:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0012f30:	0f b6 f5             	movzx  esi,ch
c0012f33:	89 cf                	mov    edi,ecx
c0012f35:	6b f6 3c             	imul   esi,esi,0x3c
c0012f38:	c1 ef 10             	shr    edi,0x10
c0012f3b:	0f b6 c9             	movzx  ecx,cl
c0012f3e:	89 f8                	mov    eax,edi
c0012f40:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0012f46:	0f b6 f8             	movzx  edi,al
c0012f49:	0f b6 d2             	movzx  edx,dl
c0012f4c:	01 fe                	add    esi,edi
c0012f4e:	01 f1                	add    ecx,esi
c0012f50:	0f b7 f3             	movzx  esi,bx
c0012f53:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0012f57:	c1 f9 1f             	sar    ecx,0x1f
c0012f5a:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c0012f5f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0012f63:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c0012f68:	8b 0c 8d 40 10 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdefc0]
c0012f6f:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c0012f73:	76 29                	jbe    c0012f9e <datetimeToSeconds(datetime_t)+0x8f>
c0012f75:	f6 c3 03             	test   bl,0x3
c0012f78:	75 24                	jne    c0012f9e <datetimeToSeconds(datetime_t)+0x8f>
c0012f7a:	31 d2                	xor    edx,edx
c0012f7c:	bf 64 00 00 00       	mov    edi,0x64
c0012f81:	89 d8                	mov    eax,ebx
c0012f83:	66 f7 f7             	div    di
c0012f86:	66 85 d2             	test   dx,dx
c0012f89:	75 12                	jne    c0012f9d <datetimeToSeconds(datetime_t)+0x8e>
c0012f8b:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0012f91:	bf 90 01 00 00       	mov    edi,0x190
c0012f96:	99                   	cdq    
c0012f97:	f7 ff                	idiv   edi
c0012f99:	85 d2                	test   edx,edx
c0012f9b:	75 01                	jne    c0012f9e <datetimeToSeconds(datetime_t)+0x8f>
c0012f9d:	41                   	inc    ecx
c0012f9e:	66 83 fb 46          	cmp    bx,0x46
c0012fa2:	76 45                	jbe    c0012fe9 <datetimeToSeconds(datetime_t)+0xda>
c0012fa4:	bb 46 00 00 00       	mov    ebx,0x46
c0012fa9:	bf 64 00 00 00       	mov    edi,0x64
c0012fae:	bd 90 01 00 00       	mov    ebp,0x190
c0012fb3:	b8 6d 01 00 00       	mov    eax,0x16d
c0012fb8:	f6 c3 03             	test   bl,0x3
c0012fbb:	75 23                	jne    c0012fe0 <datetimeToSeconds(datetime_t)+0xd1>
c0012fbd:	89 d8                	mov    eax,ebx
c0012fbf:	99                   	cdq    
c0012fc0:	f7 ff                	idiv   edi
c0012fc2:	b8 6e 01 00 00       	mov    eax,0x16e
c0012fc7:	85 d2                	test   edx,edx
c0012fc9:	75 15                	jne    c0012fe0 <datetimeToSeconds(datetime_t)+0xd1>
c0012fcb:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c0012fd1:	99                   	cdq    
c0012fd2:	f7 fd                	idiv   ebp
c0012fd4:	83 fa 01             	cmp    edx,0x1
c0012fd7:	19 c0                	sbb    eax,eax
c0012fd9:	f7 d0                	not    eax
c0012fdb:	05 6e 01 00 00       	add    eax,0x16e
c0012fe0:	01 c1                	add    ecx,eax
c0012fe2:	43                   	inc    ebx
c0012fe3:	39 f3                	cmp    ebx,esi
c0012fe5:	7c cc                	jl     c0012fb3 <datetimeToSeconds(datetime_t)+0xa4>
c0012fe7:	eb 35                	jmp    c001301e <datetimeToSeconds(datetime_t)+0x10f>
c0012fe9:	74 33                	je     c001301e <datetimeToSeconds(datetime_t)+0x10f>
c0012feb:	b8 45 00 00 00       	mov    eax,0x45
c0012ff0:	89 c2                	mov    edx,eax
c0012ff2:	83 e2 03             	and    edx,0x3
c0012ff5:	39 f0                	cmp    eax,esi
c0012ff7:	7e 0f                	jle    c0013008 <datetimeToSeconds(datetime_t)+0xf9>
c0012ff9:	83 fa 01             	cmp    edx,0x1
c0012ffc:	19 d2                	sbb    edx,edx
c0012ffe:	48                   	dec    eax
c0012fff:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c0013006:	eb e8                	jmp    c0012ff0 <datetimeToSeconds(datetime_t)+0xe1>
c0013008:	b8 6d 01 00 00       	mov    eax,0x16d
c001300d:	85 d2                	test   edx,edx
c001300f:	75 0b                	jne    c001301c <datetimeToSeconds(datetime_t)+0x10d>
c0013011:	66 83 fb 01          	cmp    bx,0x1
c0013015:	19 c0                	sbb    eax,eax
c0013017:	05 6e 01 00 00       	add    eax,0x16e
c001301c:	29 c1                	sub    ecx,eax
c001301e:	b8 80 51 01 00       	mov    eax,0x15180
c0013023:	f7 e9                	imul   ecx
c0013025:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0013029:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c001302d:	83 c4 14             	add    esp,0x14
c0013030:	5b                   	pop    ebx
c0013031:	5e                   	pop    esi
c0013032:	5f                   	pop    edi
c0013033:	5d                   	pop    ebp
c0013034:	c3                   	ret    
c0013035:	90                   	nop

c0013036 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c0013036:	57                   	push   edi
c0013037:	56                   	push   esi
c0013038:	53                   	push   ebx
c0013039:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001303d:	8b 06                	mov    eax,DWORD PTR [esi]
c001303f:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c0013042:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013046:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001304a:	e8 c0 fe ff ff       	call   c0012f0f <datetimeToSeconds(datetime_t)>
c001304f:	59                   	pop    ecx
c0013050:	0f b6 0d 88 35 02 c0 	movzx  ecx,BYTE PTR ds:0xc0023588
c0013057:	5b                   	pop    ebx
c0013058:	03 0d 8c 35 02 c0    	add    ecx,DWORD PTR ds:0xc002358c
c001305e:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013064:	89 cb                	mov    ebx,ecx
c0013066:	c1 fb 1f             	sar    ebx,0x1f
c0013069:	29 c8                	sub    eax,ecx
c001306b:	19 da                	sbb    edx,ebx
c001306d:	31 c9                	xor    ecx,ecx
c001306f:	80 3d 89 35 02 c0 00 	cmp    BYTE PTR ds:0xc0023589,0x0
c0013076:	74 05                	je     c001307d <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c0013078:	b9 08 07 00 00       	mov    ecx,0x708
c001307d:	31 db                	xor    ebx,ebx
c001307f:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013083:	29 c8                	sub    eax,ecx
c0013085:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013089:	19 da                	sbb    edx,ebx
c001308b:	89 f8                	mov    eax,edi
c001308d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013091:	5b                   	pop    ebx
c0013092:	5e                   	pop    esi
c0013093:	5f                   	pop    edi
c0013094:	ff e0                	jmp    eax

c0013096 <secondsToDatetime(unsigned long long)>:
c0013096:	55                   	push   ebp
c0013097:	57                   	push   edi
c0013098:	56                   	push   esi
c0013099:	53                   	push   ebx
c001309a:	83 ec 1c             	sub    esp,0x1c
c001309d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00130a1:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00130a5:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00130a9:	6a 00                	push   0x0
c00130ab:	68 80 51 01 00       	push   0x15180
c00130b0:	55                   	push   ebp
c00130b1:	57                   	push   edi
c00130b2:	e8 65 b2 00 00       	call   c001e31c <__udivdi3>
c00130b7:	83 c4 10             	add    esp,0x10
c00130ba:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c00130c0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00130c4:	6a 00                	push   0x0
c00130c6:	68 80 51 01 00       	push   0x15180
c00130cb:	55                   	push   ebp
c00130cc:	57                   	push   edi
c00130cd:	bf 10 0e 00 00       	mov    edi,0xe10
c00130d2:	e8 45 b3 00 00       	call   c001e41c <__umoddi3>
c00130d7:	83 c4 10             	add    esp,0x10
c00130da:	99                   	cdq    
c00130db:	f7 ff                	idiv   edi
c00130dd:	bf 3c 00 00 00       	mov    edi,0x3c
c00130e2:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c00130e5:	89 d0                	mov    eax,edx
c00130e7:	99                   	cdq    
c00130e8:	f7 ff                	idiv   edi
c00130ea:	85 db                	test   ebx,ebx
c00130ec:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c00130ef:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c00130f2:	79 11                	jns    c0013105 <secondsToDatetime(unsigned long long)+0x6f>
c00130f4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00130f8:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c00130fe:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0013103:	eb 07                	jmp    c001310c <secondsToDatetime(unsigned long long)+0x76>
c0013105:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c001310a:	89 d8                	mov    eax,ebx
c001310c:	bf b4 05 00 00       	mov    edi,0x5b4
c0013111:	99                   	cdq    
c0013112:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c0013117:	f7 f9                	idiv   ecx
c0013119:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c001311e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013122:	31 d2                	xor    edx,edx
c0013124:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c001312c:	01 c3                	add    ebx,eax
c001312e:	89 d8                	mov    eax,ebx
c0013130:	f7 f1                	div    ecx
c0013132:	31 d2                	xor    edx,edx
c0013134:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c0013137:	89 d8                	mov    eax,ebx
c0013139:	f7 f7                	div    edi
c001313b:	31 d2                	xor    edx,edx
c001313d:	29 c1                	sub    ecx,eax
c001313f:	89 d8                	mov    eax,ebx
c0013141:	f7 f5                	div    ebp
c0013143:	bd 6d 01 00 00       	mov    ebp,0x16d
c0013148:	29 c1                	sub    ecx,eax
c001314a:	31 d2                	xor    edx,edx
c001314c:	89 c8                	mov    eax,ecx
c001314e:	f7 f5                	div    ebp
c0013150:	bd 94 8e 00 00       	mov    ebp,0x8e94
c0013155:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013159:	31 d2                	xor    edx,edx
c001315b:	89 c8                	mov    eax,ecx
c001315d:	f7 f5                	div    ebp
c001315f:	31 d2                	xor    edx,edx
c0013161:	01 c3                	add    ebx,eax
c0013163:	89 c8                	mov    eax,ecx
c0013165:	f7 f7                	div    edi
c0013167:	bf 99 00 00 00       	mov    edi,0x99
c001316c:	29 c3                	sub    ebx,eax
c001316e:	31 d2                	xor    edx,edx
c0013170:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c0013178:	29 c3                	sub    ebx,eax
c001317a:	8d 6b 01             	lea    ebp,[ebx+0x1]
c001317d:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c0013180:	bb 05 00 00 00       	mov    ebx,0x5
c0013185:	83 c1 02             	add    ecx,0x2
c0013188:	89 c8                	mov    eax,ecx
c001318a:	f7 f7                	div    edi
c001318c:	31 d2                	xor    edx,edx
c001318e:	89 c7                	mov    edi,eax
c0013190:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c0013196:	83 c0 02             	add    eax,0x2
c0013199:	f7 f3                	div    ebx
c001319b:	89 eb                	mov    ebx,ebp
c001319d:	29 c3                	sub    ebx,eax
c001319f:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c00131a5:	88 1e                	mov    BYTE PTR [esi],bl
c00131a7:	19 c0                	sbb    eax,eax
c00131a9:	31 d2                	xor    edx,edx
c00131ab:	83 e0 0c             	and    eax,0xc
c00131ae:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c00131b2:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c00131ba:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00131be:	83 f9 01             	cmp    ecx,0x1
c00131c1:	0f 96 c2             	setbe  dl
c00131c4:	41                   	inc    ecx
c00131c5:	01 d0                	add    eax,edx
c00131c7:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c00131ca:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c00131ce:	83 c4 1c             	add    esp,0x1c
c00131d1:	89 f0                	mov    eax,esi
c00131d3:	5b                   	pop    ebx
c00131d4:	5e                   	pop    esi
c00131d5:	5f                   	pop    edi
c00131d6:	5d                   	pop    ebp
c00131d7:	c2 04 00             	ret    0x4

c00131da <Clock::timeInDatetimeLocal()>:
c00131da:	53                   	push   ebx
c00131db:	83 ec 14             	sub    esp,0x14
c00131de:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00131e2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00131e6:	e8 83 fc ff ff       	call   c0012e6e <Clock::timeInSecondsLocal()>
c00131eb:	83 c4 0c             	add    esp,0xc
c00131ee:	52                   	push   edx
c00131ef:	50                   	push   eax
c00131f0:	53                   	push   ebx
c00131f1:	e8 a0 fe ff ff       	call   c0013096 <secondsToDatetime(unsigned long long)>
c00131f6:	89 d8                	mov    eax,ebx
c00131f8:	83 c4 14             	add    esp,0x14
c00131fb:	5b                   	pop    ebx
c00131fc:	c2 04 00             	ret    0x4
c00131ff:	90                   	nop

c0013200 <Device::hibernate()>:
c0013200:	c3                   	ret    
c0013201:	90                   	nop

c0013202 <Device::wake()>:
c0013202:	c3                   	ret    
c0013203:	90                   	nop

c0013204 <Device::detect()>:
c0013204:	c3                   	ret    
c0013205:	90                   	nop

c0013206 <Device::disableLegacy()>:
c0013206:	c3                   	ret    
c0013207:	90                   	nop

c0013208 <Device::powerSaving(PowerSavingLevel)>:
c0013208:	c3                   	ret    
c0013209:	90                   	nop

c001320a <DriverlessDevice::close(int, int, void*)>:
c001320a:	31 c0                	xor    eax,eax
c001320c:	c3                   	ret    
c001320d:	90                   	nop

c001320e <DriverlessDevice::detect()>:
c001320e:	c3                   	ret    
c001320f:	90                   	nop

c0013210 <DriverlessDevice::open(int, int, void*)>:
c0013210:	83 ec 18             	sub    esp,0x18
c0013213:	68 70 10 02 c0       	push   0xc0021070
c0013218:	e8 c9 99 ff ff       	call   c000cbe6 <panic(char const*)>
c001321d:	83 c8 ff             	or     eax,0xffffffff
c0013220:	83 c4 1c             	add    esp,0x1c
c0013223:	c3                   	ret    

c0013224 <Device::~Device()>:
c0013224:	ba 98 10 02 c0       	mov    edx,0xc0021098
c0013229:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001322d:	89 10                	mov    DWORD PTR [eax],edx
c001322f:	90                   	nop
c0013230:	c3                   	ret    
c0013231:	90                   	nop

c0013232 <Device::~Device()>:
c0013232:	83 ec 0c             	sub    esp,0xc
c0013235:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013239:	e8 e6 ff ff ff       	call   c0013224 <Device::~Device()>
c001323e:	83 c4 04             	add    esp,0x4
c0013241:	83 ec 08             	sub    esp,0x8
c0013244:	68 58 01 00 00       	push   0x158
c0013249:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001324d:	e8 35 ee ff ff       	call   c0012087 <operator delete(void*, unsigned long)>
c0013252:	83 c4 10             	add    esp,0x10
c0013255:	83 c4 0c             	add    esp,0xc
c0013258:	c3                   	ret    
c0013259:	90                   	nop

c001325a <Device::findAndLoadDriver()>:
c001325a:	c3                   	ret    
c001325b:	90                   	nop

c001325c <Device::preOpenPCI(PCIDeviceInfo)>:
c001325c:	57                   	push   edi
c001325d:	b9 09 00 00 00       	mov    ecx,0x9
c0013262:	56                   	push   esi
c0013263:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0013267:	8d 74 24 10          	lea    esi,[esp+0x10]
c001326b:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c0013275:	81 c7 18 01 00 00    	add    edi,0x118
c001327b:	fc                   	cld    
c001327c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001327e:	5e                   	pop    esi
c001327f:	5f                   	pop    edi
c0013280:	c3                   	ret    
c0013281:	90                   	nop

c0013282 <Device::preOpenACPI(void*, char*, char*)>:
c0013282:	56                   	push   esi
c0013283:	53                   	push   ebx
c0013284:	83 ec 08             	sub    esp,0x8
c0013287:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001328b:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001328f:	c7 83 14 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x114],0x3
c0013299:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001329d:	89 83 18 01 00 00    	mov    DWORD PTR [ebx+0x118],eax
c00132a3:	6a 1e                	push   0x1e
c00132a5:	8d 83 1c 01 00 00    	lea    eax,[ebx+0x11c]
c00132ab:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00132af:	81 c3 3a 01 00 00    	add    ebx,0x13a
c00132b5:	50                   	push   eax
c00132b6:	e8 17 d3 fe ff       	call   c00005d2 <memcpy>
c00132bb:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c00132bf:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00132c3:	c7 44 24 28 0e 00 00 00 	mov    DWORD PTR [esp+0x28],0xe
c00132cb:	83 c4 14             	add    esp,0x14
c00132ce:	5b                   	pop    ebx
c00132cf:	5e                   	pop    esi
c00132d0:	e9 fd d2 fe ff       	jmp    c00005d2 <memcpy>
c00132d5:	90                   	nop

c00132d6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00132d6:	55                   	push   ebp
c00132d7:	57                   	push   edi
c00132d8:	56                   	push   esi
c00132d9:	53                   	push   ebx
c00132da:	83 ec 0c             	sub    esp,0xc
c00132dd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00132e1:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00132e5:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00132e9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00132ed:	0f b6 5c 24 2c       	movzx  ebx,BYTE PTR [esp+0x2c]
c00132f2:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c00132f9:	75 0b                	jne    c0013306 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x30>
c00132fb:	8b 00                	mov    eax,DWORD PTR [eax]
c00132fd:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0013301:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0013304:	eb 24                	jmp    c001332a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x54>
c0013306:	e8 a3 3a 00 00       	call   c0016dae <thisCPU()>
c001330b:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013311:	8b 10                	mov    edx,DWORD PTR [eax]
c0013313:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c0013317:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c001331b:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c001331f:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c0013323:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0013327:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c001332a:	83 c4 0c             	add    esp,0xc
c001332d:	5b                   	pop    ebx
c001332e:	5e                   	pop    esi
c001332f:	5f                   	pop    edi
c0013330:	5d                   	pop    ebp
c0013331:	ff e0                	jmp    eax
c0013333:	90                   	nop

c0013334 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c0013334:	57                   	push   edi
c0013335:	56                   	push   esi
c0013336:	53                   	push   ebx
c0013337:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001333b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001333f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013343:	0f b6 5c 24 1c       	movzx  ebx,BYTE PTR [esp+0x1c]
c0013348:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c001334f:	75 0b                	jne    c001335c <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x28>
c0013351:	8b 00                	mov    eax,DWORD PTR [eax]
c0013353:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c0013357:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c001335a:	eb 20                	jmp    c001337c <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x48>
c001335c:	e8 4d 3a 00 00       	call   c0016dae <thisCPU()>
c0013361:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013367:	8b 10                	mov    edx,DWORD PTR [eax]
c0013369:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c001336d:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0013371:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0013375:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013379:	8b 42 30             	mov    eax,DWORD PTR [edx+0x30]
c001337c:	5b                   	pop    ebx
c001337d:	5e                   	pop    esi
c001337e:	5f                   	pop    edi
c001337f:	ff e0                	jmp    eax
c0013381:	90                   	nop

c0013382 <Device::addChild(Device*)>:
c0013382:	53                   	push   ebx
c0013383:	83 ec 08             	sub    esp,0x8
c0013386:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001338a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001338e:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0013394:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c001339a:	8b 13                	mov    edx,DWORD PTR [ebx]
c001339c:	85 d2                	test   edx,edx
c001339e:	74 04                	je     c00133a4 <Device::addChild(Device*)+0x22>
c00133a0:	89 d3                	mov    ebx,edx
c00133a2:	eb f6                	jmp    c001339a <Device::addChild(Device*)+0x18>
c00133a4:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00133a7:	83 ec 0c             	sub    esp,0xc
c00133aa:	6a 08                	push   0x8
c00133ac:	e8 c7 ec ff ff       	call   c0012078 <operator new(unsigned long)>
c00133b1:	89 03                	mov    DWORD PTR [ebx],eax
c00133b3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00133b9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00133c0:	83 c4 18             	add    esp,0x18
c00133c3:	5b                   	pop    ebx
c00133c4:	c3                   	ret    
c00133c5:	90                   	nop

c00133c6 <Device::removeAllChildren()>:
c00133c6:	56                   	push   esi
c00133c7:	53                   	push   ebx
c00133c8:	52                   	push   edx
c00133c9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00133cd:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c00133d3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00133d6:	74 17                	je     c00133ef <Device::removeAllChildren()+0x29>
c00133d8:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00133db:	85 c0                	test   eax,eax
c00133dd:	74 0c                	je     c00133eb <Device::removeAllChildren()+0x25>
c00133df:	83 ec 0c             	sub    esp,0xc
c00133e2:	8b 10                	mov    edx,DWORD PTR [eax]
c00133e4:	50                   	push   eax
c00133e5:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00133e8:	83 c4 10             	add    esp,0x10
c00133eb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00133ed:	eb e4                	jmp    c00133d3 <Device::removeAllChildren()+0xd>
c00133ef:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00133f5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00133fb:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013401:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013408:	58                   	pop    eax
c0013409:	5b                   	pop    ebx
c001340a:	5e                   	pop    esi
c001340b:	c3                   	ret    

c001340c <Device::hibernateAll()>:
c001340c:	53                   	push   ebx
c001340d:	83 ec 14             	sub    esp,0x14
c0013410:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013414:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013416:	53                   	push   ebx
c0013417:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001341a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013420:	83 c4 10             	add    esp,0x10
c0013423:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013426:	74 0f                	je     c0013437 <Device::hibernateAll()+0x2b>
c0013428:	83 ec 0c             	sub    esp,0xc
c001342b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001342e:	e8 d9 ff ff ff       	call   c001340c <Device::hibernateAll()>
c0013433:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013435:	eb e9                	jmp    c0013420 <Device::hibernateAll()+0x14>
c0013437:	83 c4 08             	add    esp,0x8
c001343a:	5b                   	pop    ebx
c001343b:	c3                   	ret    

c001343c <Device::wakeAll()>:
c001343c:	53                   	push   ebx
c001343d:	83 ec 14             	sub    esp,0x14
c0013440:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013444:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013446:	53                   	push   ebx
c0013447:	ff 50 14             	call   DWORD PTR [eax+0x14]
c001344a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013450:	83 c4 10             	add    esp,0x10
c0013453:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013456:	74 0f                	je     c0013467 <Device::wakeAll()+0x2b>
c0013458:	83 ec 0c             	sub    esp,0xc
c001345b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001345e:	e8 d9 ff ff ff       	call   c001343c <Device::wakeAll()>
c0013463:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013465:	eb e9                	jmp    c0013450 <Device::wakeAll()+0x14>
c0013467:	83 c4 08             	add    esp,0x8
c001346a:	5b                   	pop    ebx
c001346b:	c3                   	ret    

c001346c <Device::detectAll()>:
c001346c:	53                   	push   ebx
c001346d:	83 ec 14             	sub    esp,0x14
c0013470:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013474:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013476:	53                   	push   ebx
c0013477:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001347a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013480:	83 c4 10             	add    esp,0x10
c0013483:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013486:	74 0f                	je     c0013497 <Device::detectAll()+0x2b>
c0013488:	83 ec 0c             	sub    esp,0xc
c001348b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001348e:	e8 d9 ff ff ff       	call   c001346c <Device::detectAll()>
c0013493:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013495:	eb e9                	jmp    c0013480 <Device::detectAll()+0x14>
c0013497:	83 c4 08             	add    esp,0x8
c001349a:	5b                   	pop    ebx
c001349b:	c3                   	ret    

c001349c <Device::disableLegacyAll()>:
c001349c:	53                   	push   ebx
c001349d:	83 ec 14             	sub    esp,0x14
c00134a0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00134a4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00134a6:	53                   	push   ebx
c00134a7:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c00134aa:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00134b0:	83 c4 10             	add    esp,0x10
c00134b3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00134b6:	74 0f                	je     c00134c7 <Device::disableLegacyAll()+0x2b>
c00134b8:	83 ec 0c             	sub    esp,0xc
c00134bb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00134be:	e8 d9 ff ff ff       	call   c001349c <Device::disableLegacyAll()>
c00134c3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00134c5:	eb e9                	jmp    c00134b0 <Device::disableLegacyAll()+0x14>
c00134c7:	83 c4 08             	add    esp,0x8
c00134ca:	5b                   	pop    ebx
c00134cb:	c3                   	ret    

c00134cc <Device::loadDriversForAll()>:
c00134cc:	53                   	push   ebx
c00134cd:	83 ec 08             	sub    esp,0x8
c00134d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134d4:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00134da:	8b 18                	mov    ebx,DWORD PTR [eax]
c00134dc:	85 db                	test   ebx,ebx
c00134de:	74 12                	je     c00134f2 <Device::loadDriversForAll()+0x26>
c00134e0:	83 ec 0c             	sub    esp,0xc
c00134e3:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00134e6:	e8 e1 ff ff ff       	call   c00134cc <Device::loadDriversForAll()>
c00134eb:	83 c4 10             	add    esp,0x10
c00134ee:	89 d8                	mov    eax,ebx
c00134f0:	eb e8                	jmp    c00134da <Device::loadDriversForAll()+0xe>
c00134f2:	83 c4 08             	add    esp,0x8
c00134f5:	5b                   	pop    ebx
c00134f6:	c3                   	ret    
c00134f7:	90                   	nop

c00134f8 <Device::closeAll()>:
c00134f8:	53                   	push   ebx
c00134f9:	83 ec 08             	sub    esp,0x8
c00134fc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013500:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013502:	6a 00                	push   0x0
c0013504:	6a 00                	push   0x0
c0013506:	6a 00                	push   0x0
c0013508:	53                   	push   ebx
c0013509:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001350c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013512:	83 c4 10             	add    esp,0x10
c0013515:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013518:	74 0f                	je     c0013529 <Device::closeAll()+0x31>
c001351a:	83 ec 0c             	sub    esp,0xc
c001351d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013520:	e8 d3 ff ff ff       	call   c00134f8 <Device::closeAll()>
c0013525:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013527:	eb e9                	jmp    c0013512 <Device::closeAll()+0x1a>
c0013529:	83 c4 08             	add    esp,0x8
c001352c:	5b                   	pop    ebx
c001352d:	c3                   	ret    

c001352e <Device::powerSavingAll(PowerSavingLevel)>:
c001352e:	56                   	push   esi
c001352f:	53                   	push   ebx
c0013530:	83 ec 0c             	sub    esp,0xc
c0013533:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013537:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001353b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001353d:	56                   	push   esi
c001353e:	53                   	push   ebx
c001353f:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0013542:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013548:	83 c4 10             	add    esp,0x10
c001354b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001354e:	74 0f                	je     c001355f <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0013550:	52                   	push   edx
c0013551:	52                   	push   edx
c0013552:	56                   	push   esi
c0013553:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013556:	e8 d3 ff ff ff       	call   c001352e <Device::powerSavingAll(PowerSavingLevel)>
c001355b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001355d:	eb e9                	jmp    c0013548 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c001355f:	58                   	pop    eax
c0013560:	5b                   	pop    ebx
c0013561:	5e                   	pop    esi
c0013562:	c3                   	ret    
c0013563:	90                   	nop

c0013564 <Device::setName(char const*)>:
c0013564:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c001356c:	e9 36 d1 fe ff       	jmp    c00006a7 <strcpy>
c0013571:	90                   	nop

c0013572 <Device::Device(char const*)>:
c0013572:	83 ec 0c             	sub    esp,0xc
c0013575:	ba 98 10 02 c0       	mov    edx,0xc0021098
c001357a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001357e:	89 10                	mov    DWORD PTR [eax],edx
c0013580:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013584:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c001358e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013592:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c001359c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135a0:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00135aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135ae:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c00135b8:	83 ec 08             	sub    esp,0x8
c00135bb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00135bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00135c3:	e8 9c ff ff ff       	call   c0013564 <Device::setName(char const*)>
c00135c8:	83 c4 10             	add    esp,0x10
c00135cb:	83 ec 0c             	sub    esp,0xc
c00135ce:	6a 08                	push   0x8
c00135d0:	e8 a3 ea ff ff       	call   c0012078 <operator new(unsigned long)>
c00135d5:	83 c4 10             	add    esp,0x10
c00135d8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00135de:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00135e5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00135e9:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c00135ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135f3:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00135f9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00135ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013603:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013609:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013610:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013614:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c001361b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001361f:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0013626:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001362a:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013634:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013638:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013642:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013646:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013650:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013654:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c001365e:	90                   	nop
c001365f:	83 c4 0c             	add    esp,0xc
c0013662:	c3                   	ret    
c0013663:	90                   	nop

c0013664 <Device::getName()>:
c0013664:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013668:	05 d0 00 00 00       	add    eax,0xd0
c001366d:	c3                   	ret    

c001366e <DriverlessDevice::DriverlessDevice(char const*)>:
c001366e:	83 ec 0c             	sub    esp,0xc
c0013671:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013675:	83 ec 08             	sub    esp,0x8
c0013678:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001367c:	50                   	push   eax
c001367d:	e8 f0 fe ff ff       	call   c0013572 <Device::Device(char const*)>
c0013682:	83 c4 10             	add    esp,0x10
c0013685:	ba c4 10 02 c0       	mov    edx,0xc00210c4
c001368a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001368e:	89 10                	mov    DWORD PTR [eax],edx
c0013690:	90                   	nop
c0013691:	83 c4 0c             	add    esp,0xc
c0013694:	c3                   	ret    
c0013695:	90                   	nop

c0013696 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0013696:	57                   	push   edi
c0013697:	56                   	push   esi
c0013698:	53                   	push   ebx
c0013699:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001369d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00136a1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00136a5:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c00136ab:	75 0c                	jne    c00136b9 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c00136ad:	52                   	push   edx
c00136ae:	52                   	push   edx
c00136af:	53                   	push   ebx
c00136b0:	56                   	push   esi
c00136b1:	e8 56 b4 00 00       	call   c001eb0c <LinkedList<Device>::addElement(Device*)>
c00136b6:	83 c4 10             	add    esp,0x10
c00136b9:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00136bf:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00136c2:	74 12                	je     c00136d6 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c00136c4:	50                   	push   eax
c00136c5:	57                   	push   edi
c00136c6:	56                   	push   esi
c00136c7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00136ca:	e8 c7 ff ff ff       	call   c0013696 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c00136cf:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00136d1:	83 c4 10             	add    esp,0x10
c00136d4:	eb e9                	jmp    c00136bf <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c00136d6:	5b                   	pop    ebx
c00136d7:	5e                   	pop    esi
c00136d8:	5f                   	pop    edi
c00136d9:	c3                   	ret    

c00136da <getDevicesOfType(DeviceType)>:
c00136da:	53                   	push   ebx
c00136db:	83 ec 14             	sub    esp,0x14
c00136de:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00136e2:	53                   	push   ebx
c00136e3:	e8 00 b5 00 00       	call   c001ebe8 <LinkedList<Device>::LinkedList()>
c00136e8:	83 c4 0c             	add    esp,0xc
c00136eb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00136ef:	53                   	push   ebx
c00136f0:	ff 35 c8 30 02 c0    	push   DWORD PTR ds:0xc00230c8
c00136f6:	e8 9b ff ff ff       	call   c0013696 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c00136fb:	89 d8                	mov    eax,ebx
c00136fd:	83 c4 18             	add    esp,0x18
c0013700:	5b                   	pop    ebx
c0013701:	c2 04 00             	ret    0x4

c0013704 <HardDiskController::HardDiskController(char const*)>:
c0013704:	83 ec 0c             	sub    esp,0xc
c0013707:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001370b:	83 ec 08             	sub    esp,0x8
c001370e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013712:	50                   	push   eax
c0013713:	e8 5a fe ff ff       	call   c0013572 <Device::Device(char const*)>
c0013718:	83 c4 10             	add    esp,0x10
c001371b:	ba f0 10 02 c0       	mov    edx,0xc00210f0
c0013720:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013724:	89 10                	mov    DWORD PTR [eax],edx
c0013726:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001372a:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c0013734:	90                   	nop
c0013735:	83 c4 0c             	add    esp,0xc
c0013738:	c3                   	ret    
c0013739:	90                   	nop

c001373a <HardDiskController::~HardDiskController()>:
c001373a:	83 ec 0c             	sub    esp,0xc
c001373d:	ba f0 10 02 c0       	mov    edx,0xc00210f0
c0013742:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013746:	89 10                	mov    DWORD PTR [eax],edx
c0013748:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001374c:	83 ec 0c             	sub    esp,0xc
c001374f:	50                   	push   eax
c0013750:	e8 cf fa ff ff       	call   c0013224 <Device::~Device()>
c0013755:	83 c4 10             	add    esp,0x10
c0013758:	90                   	nop
c0013759:	83 c4 0c             	add    esp,0xc
c001375c:	c3                   	ret    
c001375d:	90                   	nop

c001375e <HardDiskController::~HardDiskController()>:
c001375e:	83 ec 0c             	sub    esp,0xc
c0013761:	83 ec 0c             	sub    esp,0xc
c0013764:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013768:	e8 cd ff ff ff       	call   c001373a <HardDiskController::~HardDiskController()>
c001376d:	83 c4 10             	add    esp,0x10
c0013770:	83 ec 08             	sub    esp,0x8
c0013773:	68 58 01 00 00       	push   0x158
c0013778:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001377c:	e8 06 e9 ff ff       	call   c0012087 <operator delete(void*, unsigned long)>
c0013781:	83 c4 10             	add    esp,0x10
c0013784:	83 c4 0c             	add    esp,0xc
c0013787:	c3                   	ret    

c0013788 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0013788:	83 ec 0c             	sub    esp,0xc
c001378b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001378f:	83 ec 08             	sub    esp,0x8
c0013792:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013796:	50                   	push   eax
c0013797:	e8 d6 fd ff ff       	call   c0013572 <Device::Device(char const*)>
c001379c:	83 c4 10             	add    esp,0x10
c001379f:	ba 1c 11 02 c0       	mov    edx,0xc002111c
c00137a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137a8:	89 10                	mov    DWORD PTR [eax],edx
c00137aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137ae:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00137b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137b9:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c00137c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137c4:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c00137ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137d2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00137d6:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00137dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137e0:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00137ea:	90                   	nop
c00137eb:	83 c4 0c             	add    esp,0xc
c00137ee:	c3                   	ret    
c00137ef:	90                   	nop

c00137f0 <PhysicalDisk::startCache()>:
c00137f0:	56                   	push   esi
c00137f1:	53                   	push   ebx
c00137f2:	83 ec 10             	sub    esp,0x10
c00137f5:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00137f9:	6a 30                	push   0x30
c00137fb:	e8 78 e8 ff ff       	call   c0012078 <operator new(unsigned long)>
c0013800:	89 c6                	mov    esi,eax
c0013802:	58                   	pop    eax
c0013803:	5a                   	pop    edx
c0013804:	53                   	push   ebx
c0013805:	56                   	push   esi
c0013806:	e8 b7 1d 00 00       	call   c00155c2 <VCache::VCache(PhysicalDisk*)>
c001380b:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c0013811:	83 c4 14             	add    esp,0x14
c0013814:	5b                   	pop    ebx
c0013815:	5e                   	pop    esi
c0013816:	c3                   	ret    
c0013817:	90                   	nop

c0013818 <PhysicalDisk::~PhysicalDisk()>:
c0013818:	83 ec 0c             	sub    esp,0xc
c001381b:	ba 1c 11 02 c0       	mov    edx,0xc002111c
c0013820:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013824:	89 10                	mov    DWORD PTR [eax],edx
c0013826:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001382a:	83 ec 0c             	sub    esp,0xc
c001382d:	50                   	push   eax
c001382e:	e8 f1 f9 ff ff       	call   c0013224 <Device::~Device()>
c0013833:	83 c4 10             	add    esp,0x10
c0013836:	90                   	nop
c0013837:	83 c4 0c             	add    esp,0xc
c001383a:	c3                   	ret    
c001383b:	90                   	nop

c001383c <PhysicalDisk::~PhysicalDisk()>:
c001383c:	83 ec 0c             	sub    esp,0xc
c001383f:	83 ec 0c             	sub    esp,0xc
c0013842:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013846:	e8 cd ff ff ff       	call   c0013818 <PhysicalDisk::~PhysicalDisk()>
c001384b:	83 c4 10             	add    esp,0x10
c001384e:	83 ec 08             	sub    esp,0x8
c0013851:	68 6c 01 00 00       	push   0x16c
c0013856:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001385a:	e8 28 e8 ff ff       	call   c0012087 <operator delete(void*, unsigned long)>
c001385f:	83 c4 10             	add    esp,0x10
c0013862:	83 c4 0c             	add    esp,0xc
c0013865:	c3                   	ret    

c0013866 <FPU::FPU(char const*)>:
c0013866:	83 ec 0c             	sub    esp,0xc
c0013869:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001386d:	83 ec 08             	sub    esp,0x8
c0013870:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013874:	50                   	push   eax
c0013875:	e8 f8 fc ff ff       	call   c0013572 <Device::Device(char const*)>
c001387a:	83 c4 10             	add    esp,0x10
c001387d:	ba 58 11 02 c0       	mov    edx,0xc0021158
c0013882:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013886:	89 10                	mov    DWORD PTR [eax],edx
c0013888:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001388c:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c0013896:	90                   	nop
c0013897:	83 c4 0c             	add    esp,0xc
c001389a:	c3                   	ret    
c001389b:	90                   	nop

c001389c <FPU::~FPU()>:
c001389c:	83 ec 0c             	sub    esp,0xc
c001389f:	ba 58 11 02 c0       	mov    edx,0xc0021158
c00138a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138a8:	89 10                	mov    DWORD PTR [eax],edx
c00138aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138ae:	83 ec 0c             	sub    esp,0xc
c00138b1:	50                   	push   eax
c00138b2:	e8 6d f9 ff ff       	call   c0013224 <Device::~Device()>
c00138b7:	83 c4 10             	add    esp,0x10
c00138ba:	90                   	nop
c00138bb:	83 c4 0c             	add    esp,0xc
c00138be:	c3                   	ret    
c00138bf:	90                   	nop

c00138c0 <FPU::~FPU()>:
c00138c0:	83 ec 0c             	sub    esp,0xc
c00138c3:	83 ec 0c             	sub    esp,0xc
c00138c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00138ca:	e8 cd ff ff ff       	call   c001389c <FPU::~FPU()>
c00138cf:	83 c4 10             	add    esp,0x10
c00138d2:	83 ec 08             	sub    esp,0x8
c00138d5:	68 58 01 00 00       	push   0x158
c00138da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00138de:	e8 a4 e7 ff ff       	call   c0012087 <operator delete(void*, unsigned long)>
c00138e3:	83 c4 10             	add    esp,0x10
c00138e6:	83 c4 0c             	add    esp,0xc
c00138e9:	c3                   	ret    

c00138ea <setupFPU()>:
c00138ea:	53                   	push   ebx
c00138eb:	83 ec 08             	sub    esp,0x8
c00138ee:	a1 c8 30 02 c0       	mov    eax,ds:0xc00230c8
c00138f3:	f6 80 e9 01 00 00 20 	test   BYTE PTR [eax+0x1e9],0x20
c00138fa:	74 19                	je     c0013915 <setupFPU()+0x2b>
c00138fc:	83 ec 0c             	sub    esp,0xc
c00138ff:	68 58 01 00 00       	push   0x158
c0013904:	e8 6f e7 ff ff       	call   c0012078 <operator new(unsigned long)>
c0013909:	89 c3                	mov    ebx,eax
c001390b:	89 04 24             	mov    DWORD PTR [esp],eax
c001390e:	e8 d5 96 00 00       	call   c001cfe8 <AVX::AVX()>
c0013913:	eb 5b                	jmp    c0013970 <setupFPU()+0x86>
c0013915:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001391b:	84 c0                	test   al,al
c001391d:	79 19                	jns    c0013938 <setupFPU()+0x4e>
c001391f:	83 ec 0c             	sub    esp,0xc
c0013922:	68 58 01 00 00       	push   0x158
c0013927:	e8 4c e7 ff ff       	call   c0012078 <operator new(unsigned long)>
c001392c:	89 c3                	mov    ebx,eax
c001392e:	89 04 24             	mov    DWORD PTR [esp],eax
c0013931:	e8 d8 97 00 00       	call   c001d10e <SSE::SSE()>
c0013936:	eb 38                	jmp    c0013970 <setupFPU()+0x86>
c0013938:	a8 20                	test   al,0x20
c001393a:	74 19                	je     c0013955 <setupFPU()+0x6b>
c001393c:	83 ec 0c             	sub    esp,0xc
c001393f:	68 58 01 00 00       	push   0x158
c0013944:	e8 2f e7 ff ff       	call   c0012078 <operator new(unsigned long)>
c0013949:	89 c3                	mov    ebx,eax
c001394b:	89 04 24             	mov    DWORD PTR [esp],eax
c001394e:	e8 25 97 00 00       	call   c001d078 <MMX::MMX()>
c0013953:	eb 1b                	jmp    c0013970 <setupFPU()+0x86>
c0013955:	a8 10                	test   al,0x10
c0013957:	74 1c                	je     c0013975 <setupFPU()+0x8b>
c0013959:	83 ec 0c             	sub    esp,0xc
c001395c:	68 58 01 00 00       	push   0x158
c0013961:	e8 12 e7 ff ff       	call   c0012078 <operator new(unsigned long)>
c0013966:	89 c3                	mov    ebx,eax
c0013968:	89 04 24             	mov    DWORD PTR [esp],eax
c001396b:	e8 2c 98 00 00       	call   c001d19c <x87::x87()>
c0013970:	83 c4 10             	add    esp,0x10
c0013973:	eb 12                	jmp    c0013987 <setupFPU()+0x9d>
c0013975:	83 ec 0c             	sub    esp,0xc
c0013978:	31 db                	xor    ebx,ebx
c001397a:	68 48 11 02 c0       	push   0xc0021148
c001397f:	e8 62 92 ff ff       	call   c000cbe6 <panic(char const*)>
c0013984:	83 c4 10             	add    esp,0x10
c0013987:	89 d8                	mov    eax,ebx
c0013989:	83 c4 08             	add    esp,0x8
c001398c:	5b                   	pop    ebx
c001398d:	c3                   	ret    

c001398e <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c001398e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013992:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013996:	c1 e0 04             	shl    eax,0x4
c0013999:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001399d:	8d 50 10             	lea    edx,[eax+0x10]
c00139a0:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c00139a6:	74 08                	je     c00139b0 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c00139a8:	83 c0 04             	add    eax,0x4
c00139ab:	39 d0                	cmp    eax,edx
c00139ad:	75 f1                	jne    c00139a0 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c00139af:	c3                   	ret    
c00139b0:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00139ba:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c00139c4:	eb e2                	jmp    c00139a8 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c00139c6 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c00139c6:	57                   	push   edi
c00139c7:	31 c0                	xor    eax,eax
c00139c9:	56                   	push   esi
c00139ca:	53                   	push   ebx
c00139cb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00139cf:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00139d3:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00139d7:	89 da                	mov    edx,ebx
c00139d9:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00139dd:	c1 e2 04             	shl    edx,0x4
c00139e0:	01 ca                	add    edx,ecx
c00139e2:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c00139ea:	74 16                	je     c0013a02 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c00139ec:	40                   	inc    eax
c00139ed:	83 f8 04             	cmp    eax,0x4
c00139f0:	75 f0                	jne    c00139e2 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c00139f2:	c7 44 24 10 88 11 02 c0 	mov    DWORD PTR [esp+0x10],0xc0021188
c00139fa:	5b                   	pop    ebx
c00139fb:	5e                   	pop    esi
c00139fc:	5f                   	pop    edi
c00139fd:	e9 e4 91 ff ff       	jmp    c000cbe6 <panic(char const*)>
c0013a02:	8d 04 98             	lea    eax,[eax+ebx*4]
c0013a05:	8d 04 81             	lea    eax,[ecx+eax*4]
c0013a08:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c0013a0e:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c0013a14:	5b                   	pop    ebx
c0013a15:	5e                   	pop    esi
c0013a16:	5f                   	pop    edi
c0013a17:	c3                   	ret    

c0013a18 <doubleFault(regs*, void*)>:
c0013a18:	c7 44 24 04 b8 12 02 c0 	mov    DWORD PTR [esp+0x4],0xc00212b8
c0013a20:	e9 c1 91 ff ff       	jmp    c000cbe6 <panic(char const*)>
c0013a25:	90                   	nop

c0013a26 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0013a26:	56                   	push   esi
c0013a27:	53                   	push   ebx
c0013a28:	50                   	push   eax
c0013a29:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013a2d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013a31:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0013a36:	75 35                	jne    c0013a6d <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c0013a38:	8d 43 20             	lea    eax,[ebx+0x20]
c0013a3b:	31 d2                	xor    edx,edx
c0013a3d:	89 c1                	mov    ecx,eax
c0013a3f:	c1 e1 04             	shl    ecx,0x4
c0013a42:	01 f1                	add    ecx,esi
c0013a44:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c0013a4c:	74 3e                	je     c0013a8c <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c0013a4e:	42                   	inc    edx
c0013a4f:	83 fa 04             	cmp    edx,0x4
c0013a52:	75 f0                	jne    c0013a44 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c0013a54:	83 ec 0c             	sub    esp,0xc
c0013a57:	68 fc 11 02 c0       	push   0xc00211fc
c0013a5c:	e8 85 91 ff ff       	call   c000cbe6 <panic(char const*)>
c0013a61:	83 c4 10             	add    esp,0x10
c0013a64:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0013a69:	5a                   	pop    edx
c0013a6a:	5b                   	pop    ebx
c0013a6b:	5e                   	pop    esi
c0013a6c:	c3                   	ret    
c0013a6d:	83 ec 0c             	sub    esp,0xc
c0013a70:	56                   	push   esi
c0013a71:	e8 ee fb ff ff       	call   c0013664 <Device::getName()>
c0013a76:	83 c4 10             	add    esp,0x10
c0013a79:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0013a7c:	75 ba                	jne    c0013a38 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0013a7e:	83 fb 0f             	cmp    ebx,0xf
c0013a81:	7f 29                	jg     c0013aac <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c0013a83:	0f b6 9b 20 28 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffdd7e0]
c0013a8a:	eb ac                	jmp    c0013a38 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0013a8c:	8d 04 82             	lea    eax,[edx+eax*4]
c0013a8f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013a93:	8d 04 86             	lea    eax,[esi+eax*4]
c0013a96:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0013a9c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013aa0:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c0013aa6:	89 d8                	mov    eax,ebx
c0013aa8:	5a                   	pop    edx
c0013aa9:	5b                   	pop    ebx
c0013aaa:	5e                   	pop    esi
c0013aab:	c3                   	ret    
c0013aac:	83 ec 0c             	sub    esp,0xc
c0013aaf:	68 c4 11 02 c0       	push   0xc00211c4
c0013ab4:	e8 2d 91 ff ff       	call   c000cbe6 <panic(char const*)>
c0013ab9:	83 c4 10             	add    esp,0x10
c0013abc:	e9 77 ff ff ff       	jmp    c0013a38 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0013ac1:	90                   	nop

c0013ac2 <InterruptController::clearAllHandlers(int, bool)>:
c0013ac2:	56                   	push   esi
c0013ac3:	53                   	push   ebx
c0013ac4:	52                   	push   edx
c0013ac5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013ac9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013acd:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0013ad2:	75 61                	jne    c0013b35 <InterruptController::clearAllHandlers(int, bool)+0x73>
c0013ad4:	8d 46 20             	lea    eax,[esi+0x20]
c0013ad7:	c1 e6 04             	shl    esi,0x4
c0013ada:	c1 e0 04             	shl    eax,0x4
c0013add:	01 de                	add    esi,ebx
c0013adf:	01 d8                	add    eax,ebx
c0013ae1:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c0013aeb:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c0013af5:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0013aff:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0013b09:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c0013b13:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c0013b1d:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c0013b27:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c0013b31:	58                   	pop    eax
c0013b32:	5b                   	pop    ebx
c0013b33:	5e                   	pop    esi
c0013b34:	c3                   	ret    
c0013b35:	83 ec 0c             	sub    esp,0xc
c0013b38:	53                   	push   ebx
c0013b39:	e8 26 fb ff ff       	call   c0013664 <Device::getName()>
c0013b3e:	83 c4 10             	add    esp,0x10
c0013b41:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0013b44:	75 8e                	jne    c0013ad4 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0013b46:	83 fe 0f             	cmp    esi,0xf
c0013b49:	7f 09                	jg     c0013b54 <InterruptController::clearAllHandlers(int, bool)+0x92>
c0013b4b:	0f b6 b6 20 28 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffdd7e0]
c0013b52:	eb 80                	jmp    c0013ad4 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0013b54:	83 ec 0c             	sub    esp,0xc
c0013b57:	68 38 12 02 c0       	push   0xc0021238
c0013b5c:	e8 85 90 ff ff       	call   c000cbe6 <panic(char const*)>
c0013b61:	83 c4 10             	add    esp,0x10
c0013b64:	e9 6b ff ff ff       	jmp    c0013ad4 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0013b69:	90                   	nop

c0013b6a <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0013b6a:	56                   	push   esi
c0013b6b:	53                   	push   ebx
c0013b6c:	52                   	push   edx
c0013b6d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013b71:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013b75:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0013b7a:	75 3a                	jne    c0013bb6 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0013b7c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013b80:	8d 50 20             	lea    edx,[eax+0x20]
c0013b83:	c1 e2 04             	shl    edx,0x4
c0013b86:	8d 04 16             	lea    eax,[esi+edx*1]
c0013b89:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0013b8d:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0013b93:	74 0b                	je     c0013ba0 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0013b95:	83 c0 04             	add    eax,0x4
c0013b98:	39 d0                	cmp    eax,edx
c0013b9a:	75 f1                	jne    c0013b8d <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0013b9c:	58                   	pop    eax
c0013b9d:	5b                   	pop    ebx
c0013b9e:	5e                   	pop    esi
c0013b9f:	c3                   	ret    
c0013ba0:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013baa:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0013bb4:	eb df                	jmp    c0013b95 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c0013bb6:	83 ec 0c             	sub    esp,0xc
c0013bb9:	56                   	push   esi
c0013bba:	e8 a5 fa ff ff       	call   c0013664 <Device::getName()>
c0013bbf:	83 c4 10             	add    esp,0x10
c0013bc2:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0013bc5:	75 b5                	jne    c0013b7c <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0013bc7:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0013bcc:	7f 11                	jg     c0013bdf <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c0013bce:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013bd2:	0f b6 80 20 28 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdd7e0]
c0013bd9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013bdd:	eb 9d                	jmp    c0013b7c <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0013bdf:	83 ec 0c             	sub    esp,0xc
c0013be2:	68 38 12 02 c0       	push   0xc0021238
c0013be7:	e8 fa 8f ff ff       	call   c000cbe6 <panic(char const*)>
c0013bec:	83 c4 10             	add    esp,0x10
c0013bef:	eb 8b                	jmp    c0013b7c <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c0013bf1 <nmiHandler(regs*, void*)>:
c0013bf1:	a1 c8 30 02 c0       	mov    eax,ds:0xc00230c8
c0013bf6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013bfa:	e9 5b 77 ff ff       	jmp    c000b35a <Computer::handleNMI()>

c0013bff <int_handler>:
c0013bff:	55                   	push   ebp
c0013c00:	57                   	push   edi
c0013c01:	56                   	push   esi
c0013c02:	53                   	push   ebx
c0013c03:	83 ec 0c             	sub    esp,0xc
c0013c06:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0013c0a:	80 3d 72 32 02 c0 00 	cmp    BYTE PTR ds:0xc0023272,0x0
c0013c11:	74 0b                	je     c0013c1e <int_handler+0x1f>
c0013c13:	fa                   	cli    
c0013c14:	f4                   	hlt    
c0013c15:	80 3d 72 32 02 c0 00 	cmp    BYTE PTR ds:0xc0023272,0x0
c0013c1c:	75 f5                	jne    c0013c13 <int_handler+0x14>
c0013c1e:	e8 8b 31 00 00       	call   c0016dae <thisCPU()>
c0013c23:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0013c26:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0013c2c:	8d 43 e0             	lea    eax,[ebx-0x20]
c0013c2f:	83 f8 17             	cmp    eax,0x17
c0013c32:	77 13                	ja     c0013c47 <int_handler+0x48>
c0013c34:	83 ec 08             	sub    esp,0x8
c0013c37:	8b 17                	mov    edx,DWORD PTR [edi]
c0013c39:	8d 43 e0             	lea    eax,[ebx-0x20]
c0013c3c:	0f b6 c0             	movzx  eax,al
c0013c3f:	50                   	push   eax
c0013c40:	57                   	push   edi
c0013c41:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0013c44:	83 c4 10             	add    esp,0x10
c0013c47:	83 c3 15             	add    ebx,0x15
c0013c4a:	c1 e3 04             	shl    ebx,0x4
c0013c4d:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0013c51:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0013c58:	31 db                	xor    ebx,ebx
c0013c5a:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0013c5e:	85 c0                	test   eax,eax
c0013c60:	74 13                	je     c0013c75 <int_handler+0x76>
c0013c62:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0013c65:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0013c69:	74 1c                	je     c0013c87 <int_handler+0x88>
c0013c6b:	83 ec 08             	sub    esp,0x8
c0013c6e:	52                   	push   edx
c0013c6f:	56                   	push   esi
c0013c70:	ff d0                	call   eax
c0013c72:	83 c4 10             	add    esp,0x10
c0013c75:	43                   	inc    ebx
c0013c76:	83 fb 04             	cmp    ebx,0x4
c0013c79:	75 df                	jne    c0013c5a <int_handler+0x5b>
c0013c7b:	83 c4 0c             	add    esp,0xc
c0013c7e:	31 c0                	xor    eax,eax
c0013c80:	5b                   	pop    ebx
c0013c81:	31 d2                	xor    edx,edx
c0013c83:	5e                   	pop    esi
c0013c84:	5f                   	pop    edi
c0013c85:	5d                   	pop    ebp
c0013c86:	c3                   	ret    
c0013c87:	83 ec 08             	sub    esp,0x8
c0013c8a:	52                   	push   edx
c0013c8b:	56                   	push   esi
c0013c8c:	ff d0                	call   eax
c0013c8e:	83 c4 10             	add    esp,0x10
c0013c91:	83 c4 0c             	add    esp,0xc
c0013c94:	5b                   	pop    ebx
c0013c95:	5e                   	pop    esi
c0013c96:	5f                   	pop    edi
c0013c97:	5d                   	pop    ebp
c0013c98:	c3                   	ret    
c0013c99:	90                   	nop

c0013c9a <InterruptController::InterruptController(char const*)>:
c0013c9a:	83 ec 1c             	sub    esp,0x1c
c0013c9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013ca1:	83 ec 08             	sub    esp,0x8
c0013ca4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013ca8:	50                   	push   eax
c0013ca9:	e8 c4 f8 ff ff       	call   c0013572 <Device::Device(char const*)>
c0013cae:	83 c4 10             	add    esp,0x10
c0013cb1:	ba 30 14 02 c0       	mov    edx,0xc0021430
c0013cb6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013cba:	89 10                	mov    DWORD PTR [eax],edx
c0013cbc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013cc0:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c0013cca:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013cd2:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0013cda:	7f 5e                	jg     c0013d3a <InterruptController::InterruptController(char const*)+0xa0>
c0013cdc:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0013ce4:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0013ce9:	7f 49                	jg     c0013d34 <InterruptController::InterruptController(char const*)+0x9a>
c0013ceb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013cef:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013cf3:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0013cfa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013cfe:	01 ca                	add    edx,ecx
c0013d00:	83 c2 54             	add    edx,0x54
c0013d03:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0013d0b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d0f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013d13:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0013d1a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013d1e:	01 ca                	add    edx,ecx
c0013d20:	81 c2 54 04 00 00    	add    edx,0x454
c0013d26:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0013d2e:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0013d32:	eb b0                	jmp    c0013ce4 <InterruptController::InterruptController(char const*)+0x4a>
c0013d34:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0013d38:	eb 98                	jmp    c0013cd2 <InterruptController::InterruptController(char const*)+0x38>
c0013d3a:	90                   	nop
c0013d3b:	83 c4 1c             	add    esp,0x1c
c0013d3e:	c3                   	ret    
c0013d3f:	90                   	nop

c0013d40 <InterruptController::~InterruptController()>:
c0013d40:	83 ec 0c             	sub    esp,0xc
c0013d43:	ba 30 14 02 c0       	mov    edx,0xc0021430
c0013d48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d4c:	89 10                	mov    DWORD PTR [eax],edx
c0013d4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d52:	83 ec 0c             	sub    esp,0xc
c0013d55:	50                   	push   eax
c0013d56:	e8 c9 f4 ff ff       	call   c0013224 <Device::~Device()>
c0013d5b:	83 c4 10             	add    esp,0x10
c0013d5e:	90                   	nop
c0013d5f:	83 c4 0c             	add    esp,0xc
c0013d62:	c3                   	ret    
c0013d63:	90                   	nop

c0013d64 <InterruptController::~InterruptController()>:
c0013d64:	83 ec 0c             	sub    esp,0xc
c0013d67:	83 ec 0c             	sub    esp,0xc
c0013d6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d6e:	e8 cd ff ff ff       	call   c0013d40 <InterruptController::~InterruptController()>
c0013d73:	83 c4 10             	add    esp,0x10
c0013d76:	83 ec 08             	sub    esp,0x8
c0013d79:	68 58 21 00 00       	push   0x2158
c0013d7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d82:	e8 00 e3 ff ff       	call   c0012087 <operator delete(void*, unsigned long)>
c0013d87:	83 c4 10             	add    esp,0x10
c0013d8a:	83 c4 0c             	add    esp,0xc
c0013d8d:	c3                   	ret    

c0013d8e <displayDebugInfo(regs*)>:
c0013d8e:	55                   	push   ebp
c0013d8f:	57                   	push   edi
c0013d90:	56                   	push   esi
c0013d91:	53                   	push   ebx
c0013d92:	83 ec 24             	sub    esp,0x24
c0013d95:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0013d99:	0f 20 c2             	mov    edx,cr0
c0013d9c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0013da0:	0f 20 d7             	mov    edi,cr2
c0013da3:	0f 20 de             	mov    esi,cr3
c0013da6:	0f 20 e5             	mov    ebp,cr4
c0013da9:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0013dac:	68 c5 12 02 c0       	push   0xc00212c5
c0013db1:	e8 12 8d ff ff       	call   c000cac8 <kprintf(char const*, ...)>
c0013db6:	58                   	pop    eax
c0013db7:	5a                   	pop    edx
c0013db8:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013dbb:	68 d0 12 02 c0       	push   0xc00212d0
c0013dc0:	e8 03 8d ff ff       	call   c000cac8 <kprintf(char const*, ...)>
c0013dc5:	59                   	pop    ecx
c0013dc6:	58                   	pop    eax
c0013dc7:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013dca:	68 db 12 02 c0       	push   0xc00212db
c0013dcf:	e8 f4 8c ff ff       	call   c000cac8 <kprintf(char const*, ...)>
c0013dd4:	58                   	pop    eax
c0013dd5:	5a                   	pop    edx
c0013dd6:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013dd9:	68 e6 12 02 c0       	push   0xc00212e6
c0013dde:	e8 e5 8c ff ff       	call   c000cac8 <kprintf(char const*, ...)>
c0013de3:	59                   	pop    ecx
c0013de4:	58                   	pop    eax
c0013de5:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0013de8:	68 f1 12 02 c0       	push   0xc00212f1
c0013ded:	e8 d6 8c ff ff       	call   c000cac8 <kprintf(char const*, ...)>
c0013df2:	58                   	pop    eax
c0013df3:	5a                   	pop    edx
c0013df4:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0013df7:	68 fc 12 02 c0       	push   0xc00212fc
c0013dfc:	e8 c7 8c ff ff       	call   c000cac8 <kprintf(char const*, ...)>
c0013e01:	59                   	pop    ecx
c0013e02:	58                   	pop    eax
c0013e03:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0013e06:	68 16 13 02 c0       	push   0xc0021316
c0013e0b:	e8 b8 8c ff ff       	call   c000cac8 <kprintf(char const*, ...)>
c0013e10:	58                   	pop    eax
c0013e11:	5a                   	pop    edx
c0013e12:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0013e15:	68 07 13 02 c0       	push   0xc0021307
c0013e1a:	e8 a9 8c ff ff       	call   c000cac8 <kprintf(char const*, ...)>
c0013e1f:	59                   	pop    ecx
c0013e20:	58                   	pop    eax
c0013e21:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0013e24:	68 12 13 02 c0       	push   0xc0021312
c0013e29:	e8 9a 8c ff ff       	call   c000cac8 <kprintf(char const*, ...)>
c0013e2e:	58                   	pop    eax
c0013e2f:	5a                   	pop    edx
c0013e30:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0013e33:	68 21 13 02 c0       	push   0xc0021321
c0013e38:	e8 8b 8c ff ff       	call   c000cac8 <kprintf(char const*, ...)>
c0013e3d:	59                   	pop    ecx
c0013e3e:	58                   	pop    eax
c0013e3f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0013e42:	68 2c 13 02 c0       	push   0xc002132c
c0013e47:	e8 7c 8c ff ff       	call   c000cac8 <kprintf(char const*, ...)>
c0013e4c:	58                   	pop    eax
c0013e4d:	5a                   	pop    edx
c0013e4e:	57                   	push   edi
c0013e4f:	68 37 13 02 c0       	push   0xc0021337
c0013e54:	e8 6f 8c ff ff       	call   c000cac8 <kprintf(char const*, ...)>
c0013e59:	59                   	pop    ecx
c0013e5a:	58                   	pop    eax
c0013e5b:	56                   	push   esi
c0013e5c:	68 42 13 02 c0       	push   0xc0021342
c0013e61:	e8 62 8c ff ff       	call   c000cac8 <kprintf(char const*, ...)>
c0013e66:	58                   	pop    eax
c0013e67:	a1 1c 33 02 c0       	mov    eax,ds:0xc002331c
c0013e6c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0013e72:	e8 d8 c3 ff ff       	call   c001024f <setActiveTerminal(VgaText*)>
c0013e77:	58                   	pop    eax
c0013e78:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0013e7b:	5a                   	pop    edx
c0013e7c:	c1 e0 05             	shl    eax,0x5
c0013e7f:	05 80 25 02 c0       	add    eax,0xc0022580
c0013e84:	50                   	push   eax
c0013e85:	a1 1c 33 02 c0       	mov    eax,ds:0xc002331c
c0013e8a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0013e90:	e8 d9 c7 ff ff       	call   c001066e <VgaText::puts(char const*)>
c0013e95:	59                   	pop    ecx
c0013e96:	58                   	pop    eax
c0013e97:	a1 1c 33 02 c0       	mov    eax,ds:0xc002331c
c0013e9c:	68 4d 13 02 c0       	push   0xc002134d
c0013ea1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0013ea7:	e8 c2 c7 ff ff       	call   c001066e <VgaText::puts(char const*)>
c0013eac:	58                   	pop    eax
c0013ead:	a1 1c 33 02 c0       	mov    eax,ds:0xc002331c
c0013eb2:	5a                   	pop    edx
c0013eb3:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0013eb6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0013ebc:	e8 d3 c7 ff ff       	call   c0010694 <VgaText::putx(unsigned int)>
c0013ec1:	59                   	pop    ecx
c0013ec2:	58                   	pop    eax
c0013ec3:	a1 1c 33 02 c0       	mov    eax,ds:0xc002331c
c0013ec8:	68 55 13 02 c0       	push   0xc0021355
c0013ecd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0013ed3:	e8 96 c7 ff ff       	call   c001066e <VgaText::puts(char const*)>
c0013ed8:	58                   	pop    eax
c0013ed9:	a1 1c 33 02 c0       	mov    eax,ds:0xc002331c
c0013ede:	5a                   	pop    edx
c0013edf:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0013ee2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0013ee8:	e8 a7 c7 ff ff       	call   c0010694 <VgaText::putx(unsigned int)>
c0013eed:	59                   	pop    ecx
c0013eee:	58                   	pop    eax
c0013eef:	a1 1c 33 02 c0       	mov    eax,ds:0xc002331c
c0013ef4:	68 5d 13 02 c0       	push   0xc002135d
c0013ef9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0013eff:	e8 6a c7 ff ff       	call   c001066e <VgaText::puts(char const*)>
c0013f04:	58                   	pop    eax
c0013f05:	a1 1c 33 02 c0       	mov    eax,ds:0xc002331c
c0013f0a:	5a                   	pop    edx
c0013f0b:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0013f0e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0013f14:	e8 7b c7 ff ff       	call   c0010694 <VgaText::putx(unsigned int)>
c0013f19:	59                   	pop    ecx
c0013f1a:	58                   	pop    eax
c0013f1b:	a1 1c 33 02 c0       	mov    eax,ds:0xc002331c
c0013f20:	68 65 13 02 c0       	push   0xc0021365
c0013f25:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0013f2b:	e8 3e c7 ff ff       	call   c001066e <VgaText::puts(char const*)>
c0013f30:	58                   	pop    eax
c0013f31:	a1 1c 33 02 c0       	mov    eax,ds:0xc002331c
c0013f36:	5a                   	pop    edx
c0013f37:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0013f3a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0013f40:	e8 4f c7 ff ff       	call   c0010694 <VgaText::putx(unsigned int)>
c0013f45:	59                   	pop    ecx
c0013f46:	58                   	pop    eax
c0013f47:	a1 1c 33 02 c0       	mov    eax,ds:0xc002331c
c0013f4c:	68 6d 13 02 c0       	push   0xc002136d
c0013f51:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0013f57:	e8 12 c7 ff ff       	call   c001066e <VgaText::puts(char const*)>
c0013f5c:	58                   	pop    eax
c0013f5d:	a1 1c 33 02 c0       	mov    eax,ds:0xc002331c
c0013f62:	5a                   	pop    edx
c0013f63:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0013f66:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0013f6c:	e8 23 c7 ff ff       	call   c0010694 <VgaText::putx(unsigned int)>
c0013f71:	59                   	pop    ecx
c0013f72:	58                   	pop    eax
c0013f73:	a1 1c 33 02 c0       	mov    eax,ds:0xc002331c
c0013f78:	68 75 13 02 c0       	push   0xc0021375
c0013f7d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0013f83:	e8 e6 c6 ff ff       	call   c001066e <VgaText::puts(char const*)>
c0013f88:	58                   	pop    eax
c0013f89:	a1 1c 33 02 c0       	mov    eax,ds:0xc002331c
c0013f8e:	5a                   	pop    edx
c0013f8f:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c0013f92:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0013f98:	e8 f7 c6 ff ff       	call   c0010694 <VgaText::putx(unsigned int)>
c0013f9d:	59                   	pop    ecx
c0013f9e:	a1 1c 33 02 c0       	mov    eax,ds:0xc002331c
c0013fa3:	5b                   	pop    ebx
c0013fa4:	68 7d 13 02 c0       	push   0xc002137d
c0013fa9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0013faf:	e8 ba c6 ff ff       	call   c001066e <VgaText::puts(char const*)>
c0013fb4:	58                   	pop    eax
c0013fb5:	a1 1c 33 02 c0       	mov    eax,ds:0xc002331c
c0013fba:	5a                   	pop    edx
c0013fbb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0013fbf:	52                   	push   edx
c0013fc0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0013fc6:	e8 c9 c6 ff ff       	call   c0010694 <VgaText::putx(unsigned int)>
c0013fcb:	59                   	pop    ecx
c0013fcc:	a1 1c 33 02 c0       	mov    eax,ds:0xc002331c
c0013fd1:	5b                   	pop    ebx
c0013fd2:	68 86 13 02 c0       	push   0xc0021386
c0013fd7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0013fdd:	e8 8c c6 ff ff       	call   c001066e <VgaText::puts(char const*)>
c0013fe2:	58                   	pop    eax
c0013fe3:	a1 1c 33 02 c0       	mov    eax,ds:0xc002331c
c0013fe8:	5a                   	pop    edx
c0013fe9:	57                   	push   edi
c0013fea:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0013ff0:	e8 9f c6 ff ff       	call   c0010694 <VgaText::putx(unsigned int)>
c0013ff5:	59                   	pop    ecx
c0013ff6:	a1 1c 33 02 c0       	mov    eax,ds:0xc002331c
c0013ffb:	5b                   	pop    ebx
c0013ffc:	68 8e 13 02 c0       	push   0xc002138e
c0014001:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014007:	e8 62 c6 ff ff       	call   c001066e <VgaText::puts(char const*)>
c001400c:	5f                   	pop    edi
c001400d:	58                   	pop    eax
c001400e:	a1 1c 33 02 c0       	mov    eax,ds:0xc002331c
c0014013:	56                   	push   esi
c0014014:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001401a:	e8 75 c6 ff ff       	call   c0010694 <VgaText::putx(unsigned int)>
c001401f:	58                   	pop    eax
c0014020:	a1 1c 33 02 c0       	mov    eax,ds:0xc002331c
c0014025:	5a                   	pop    edx
c0014026:	68 96 13 02 c0       	push   0xc0021396
c001402b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014031:	e8 38 c6 ff ff       	call   c001066e <VgaText::puts(char const*)>
c0014036:	59                   	pop    ecx
c0014037:	a1 1c 33 02 c0       	mov    eax,ds:0xc002331c
c001403c:	5b                   	pop    ebx
c001403d:	55                   	push   ebp
c001403e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014044:	e8 4b c6 ff ff       	call   c0010694 <VgaText::putx(unsigned int)>
c0014049:	5e                   	pop    esi
c001404a:	a1 1c 33 02 c0       	mov    eax,ds:0xc002331c
c001404f:	5f                   	pop    edi
c0014050:	68 9e 13 02 c0       	push   0xc002139e
c0014055:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001405b:	e8 0e c6 ff ff       	call   c001066e <VgaText::puts(char const*)>
c0014060:	a1 1c 33 02 c0       	mov    eax,ds:0xc002331c
c0014065:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001406b:	e8 d0 ab 00 00       	call   c001ec40 <CPU::readDR0()>
c0014070:	5d                   	pop    ebp
c0014071:	5a                   	pop    edx
c0014072:	50                   	push   eax
c0014073:	53                   	push   ebx
c0014074:	e8 1b c6 ff ff       	call   c0010694 <VgaText::putx(unsigned int)>
c0014079:	59                   	pop    ecx
c001407a:	a1 1c 33 02 c0       	mov    eax,ds:0xc002331c
c001407f:	5b                   	pop    ebx
c0014080:	68 a7 13 02 c0       	push   0xc00213a7
c0014085:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001408b:	e8 de c5 ff ff       	call   c001066e <VgaText::puts(char const*)>
c0014090:	a1 1c 33 02 c0       	mov    eax,ds:0xc002331c
c0014095:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001409b:	e8 b2 ab 00 00       	call   c001ec52 <CPU::readDR1()>
c00140a0:	5e                   	pop    esi
c00140a1:	5f                   	pop    edi
c00140a2:	50                   	push   eax
c00140a3:	53                   	push   ebx
c00140a4:	e8 eb c5 ff ff       	call   c0010694 <VgaText::putx(unsigned int)>
c00140a9:	5d                   	pop    ebp
c00140aa:	58                   	pop    eax
c00140ab:	a1 1c 33 02 c0       	mov    eax,ds:0xc002331c
c00140b0:	68 af 13 02 c0       	push   0xc00213af
c00140b5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00140bb:	e8 ae c5 ff ff       	call   c001066e <VgaText::puts(char const*)>
c00140c0:	a1 1c 33 02 c0       	mov    eax,ds:0xc002331c
c00140c5:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c00140cb:	e8 94 ab 00 00       	call   c001ec64 <CPU::readDR2()>
c00140d0:	5a                   	pop    edx
c00140d1:	59                   	pop    ecx
c00140d2:	50                   	push   eax
c00140d3:	53                   	push   ebx
c00140d4:	e8 bb c5 ff ff       	call   c0010694 <VgaText::putx(unsigned int)>
c00140d9:	5b                   	pop    ebx
c00140da:	a1 1c 33 02 c0       	mov    eax,ds:0xc002331c
c00140df:	5e                   	pop    esi
c00140e0:	68 b7 13 02 c0       	push   0xc00213b7
c00140e5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00140eb:	e8 7e c5 ff ff       	call   c001066e <VgaText::puts(char const*)>
c00140f0:	a1 1c 33 02 c0       	mov    eax,ds:0xc002331c
c00140f5:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c00140fb:	e8 76 ab 00 00       	call   c001ec76 <CPU::readDR3()>
c0014100:	5f                   	pop    edi
c0014101:	5d                   	pop    ebp
c0014102:	50                   	push   eax
c0014103:	53                   	push   ebx
c0014104:	e8 8b c5 ff ff       	call   c0010694 <VgaText::putx(unsigned int)>
c0014109:	58                   	pop    eax
c001410a:	a1 1c 33 02 c0       	mov    eax,ds:0xc002331c
c001410f:	5a                   	pop    edx
c0014110:	68 bf 13 02 c0       	push   0xc00213bf
c0014115:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001411b:	e8 4e c5 ff ff       	call   c001066e <VgaText::puts(char const*)>
c0014120:	a1 1c 33 02 c0       	mov    eax,ds:0xc002331c
c0014125:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001412b:	e8 58 ab 00 00       	call   c001ec88 <CPU::readDR6()>
c0014130:	59                   	pop    ecx
c0014131:	5e                   	pop    esi
c0014132:	50                   	push   eax
c0014133:	53                   	push   ebx
c0014134:	e8 5b c5 ff ff       	call   c0010694 <VgaText::putx(unsigned int)>
c0014139:	5f                   	pop    edi
c001413a:	a1 1c 33 02 c0       	mov    eax,ds:0xc002331c
c001413f:	5d                   	pop    ebp
c0014140:	68 c7 13 02 c0       	push   0xc00213c7
c0014145:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001414b:	e8 1e c5 ff ff       	call   c001066e <VgaText::puts(char const*)>
c0014150:	a1 1c 33 02 c0       	mov    eax,ds:0xc002331c
c0014155:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001415b:	e8 3a ab 00 00       	call   c001ec9a <CPU::readDR7()>
c0014160:	5a                   	pop    edx
c0014161:	59                   	pop    ecx
c0014162:	50                   	push   eax
c0014163:	53                   	push   ebx
c0014164:	e8 2b c5 ff ff       	call   c0010694 <VgaText::putx(unsigned int)>
c0014169:	fa                   	cli    
c001416a:	f4                   	hlt    
c001416b:	83 c4 10             	add    esp,0x10
c001416e:	eb fe                	jmp    c001416e <displayDebugInfo(regs*)+0x3e0>

c0014170 <gpFault(regs*, void*)>:
c0014170:	53                   	push   ebx
c0014171:	83 ec 14             	sub    esp,0x14
c0014174:	c7 05 a8 35 02 c0 93 83 01 c0 	mov    DWORD PTR ds:0xc00235a8,0xc0018393
c001417e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014182:	53                   	push   ebx
c0014183:	e8 0b 42 00 00       	call   c0018393 <vm8086FaultHandler(regs*)>
c0014188:	83 c4 10             	add    esp,0x10
c001418b:	84 c0                	test   al,al
c001418d:	74 05                	je     c0014194 <gpFault(regs*, void*)+0x24>
c001418f:	83 c4 08             	add    esp,0x8
c0014192:	5b                   	pop    ebx
c0014193:	c3                   	ret    
c0014194:	83 ec 0c             	sub    esp,0xc
c0014197:	68 cf 13 02 c0       	push   0xc00213cf
c001419c:	e8 27 89 ff ff       	call   c000cac8 <kprintf(char const*, ...)>
c00141a1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00141a4:	e8 e5 fb ff ff       	call   c0013d8e <displayDebugInfo(regs*)>

c00141a9 <pgFault(regs*, void*)>:
c00141a9:	83 ec 18             	sub    esp,0x18
c00141ac:	68 ea 13 02 c0       	push   0xc00213ea
c00141b1:	e8 12 89 ff ff       	call   c000cac8 <kprintf(char const*, ...)>
c00141b6:	58                   	pop    eax
c00141b7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00141bb:	e8 ce fb ff ff       	call   c0013d8e <displayDebugInfo(regs*)>

c00141c0 <otherISRHandler(regs*, void*)>:
c00141c0:	53                   	push   ebx
c00141c1:	83 ec 0c             	sub    esp,0xc
c00141c4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00141c8:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00141cb:	50                   	push   eax
c00141cc:	50                   	push   eax
c00141cd:	68 f7 13 02 c0       	push   0xc00213f7
c00141d2:	e8 f1 88 ff ff       	call   c000cac8 <kprintf(char const*, ...)>
c00141d7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00141da:	e8 af fb ff ff       	call   c0013d8e <displayDebugInfo(regs*)>

c00141df <opcodeFault(regs*, void*)>:
c00141df:	53                   	push   ebx
c00141e0:	83 ec 08             	sub    esp,0x8
c00141e3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00141e7:	e8 c2 2b 00 00       	call   c0016dae <thisCPU()>
c00141ec:	80 b8 94 11 00 00 00 	cmp    BYTE PTR [eax+0x1194],0x0
c00141f3:	74 16                	je     c001420b <opcodeFault(regs*, void*)+0x2c>
c00141f5:	83 ec 0c             	sub    esp,0xc
c00141f8:	68 74 12 02 c0       	push   0xc0021274
c00141fd:	e8 c6 88 ff ff       	call   c000cac8 <kprintf(char const*, ...)>
c0014202:	83 43 38 19          	add    DWORD PTR [ebx+0x38],0x19
c0014206:	83 c4 18             	add    esp,0x18
c0014209:	5b                   	pop    ebx
c001420a:	c3                   	ret    
c001420b:	83 ec 0c             	sub    esp,0xc
c001420e:	68 14 14 02 c0       	push   0xc0021414
c0014213:	e8 b0 88 ff ff       	call   c000cac8 <kprintf(char const*, ...)>
c0014218:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001421b:	c1 e0 04             	shl    eax,0x4
c001421e:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c0014221:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0014225:	89 14 24             	mov    DWORD PTR [esp],edx
c0014228:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c001422c:	52                   	push   edx
c001422d:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0014231:	52                   	push   edx
c0014232:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0014235:	50                   	push   eax
c0014236:	68 98 12 02 c0       	push   0xc0021298
c001423b:	e8 88 88 ff ff       	call   c000cac8 <kprintf(char const*, ...)>
c0014240:	83 c4 14             	add    esp,0x14
c0014243:	53                   	push   ebx
c0014244:	e8 45 fb ff ff       	call   c0013d8e <displayDebugInfo(regs*)>

c0014249 <displayProgramFault(char const*)>:
c0014249:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001424e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014251:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0014257:	85 c0                	test   eax,eax
c0014259:	74 15                	je     c0014270 <displayProgramFault(char const*)+0x27>
c001425b:	83 ec 0c             	sub    esp,0xc
c001425e:	6a 04                	push   0x4
c0014260:	6a 0f                	push   0xf
c0014262:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014266:	50                   	push   eax
c0014267:	e8 c4 c0 ff ff       	call   c0010330 <VgaText::puts(char const*, VgaColour, VgaColour)>
c001426c:	83 c4 1c             	add    esp,0x1c
c001426f:	c3                   	ret    
c0014270:	c3                   	ret    
c0014271:	90                   	nop

c0014272 <InterruptController::convertLegacyIRQNumber(int)>:
c0014272:	53                   	push   ebx
c0014273:	83 ec 14             	sub    esp,0x14
c0014276:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001427a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001427e:	e8 e1 f3 ff ff       	call   c0013664 <Device::getName()>
c0014283:	83 c4 10             	add    esp,0x10
c0014286:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014289:	74 07                	je     c0014292 <InterruptController::convertLegacyIRQNumber(int)+0x20>
c001428b:	89 d8                	mov    eax,ebx
c001428d:	83 c4 08             	add    esp,0x8
c0014290:	5b                   	pop    ebx
c0014291:	c3                   	ret    
c0014292:	83 fb 0f             	cmp    ebx,0xf
c0014295:	7f 0e                	jg     c00142a5 <InterruptController::convertLegacyIRQNumber(int)+0x33>
c0014297:	0f b6 9b 20 28 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffdd7e0]
c001429e:	83 c4 08             	add    esp,0x8
c00142a1:	89 d8                	mov    eax,ebx
c00142a3:	5b                   	pop    ebx
c00142a4:	c3                   	ret    
c00142a5:	83 ec 0c             	sub    esp,0xc
c00142a8:	68 c4 11 02 c0       	push   0xc00211c4
c00142ad:	e8 34 89 ff ff       	call   c000cbe6 <panic(char const*)>
c00142b2:	89 d8                	mov    eax,ebx
c00142b4:	83 c4 10             	add    esp,0x10
c00142b7:	83 c4 08             	add    esp,0x8
c00142ba:	5b                   	pop    ebx
c00142bb:	c3                   	ret    

c00142bc <setupInterruptController()>:
c00142bc:	56                   	push   esi
c00142bd:	53                   	push   ebx
c00142be:	51                   	push   ecx
c00142bf:	e8 e7 2a 00 00       	call   c0016dab <getCPUNumber()>
c00142c4:	85 c0                	test   eax,eax
c00142c6:	0f 85 10 02 00 00    	jne    c00144dc <setupInterruptController()+0x220>
c00142cc:	83 ec 0c             	sub    esp,0xc
c00142cf:	a1 c8 30 02 c0       	mov    eax,ds:0xc00230c8
c00142d4:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00142da:	68 58 21 00 00       	push   0x2158
c00142df:	83 e0 01             	and    eax,0x1
c00142e2:	89 c6                	mov    esi,eax
c00142e4:	e8 8f dd ff ff       	call   c0012078 <operator new(unsigned long)>
c00142e9:	89 04 24             	mov    DWORD PTR [esp],eax
c00142ec:	89 c3                	mov    ebx,eax
c00142ee:	e8 15 95 00 00       	call   c001d808 <PIC::PIC()>
c00142f3:	6a 00                	push   0x0
c00142f5:	6a 00                	push   0x0
c00142f7:	6a 00                	push   0x0
c00142f9:	53                   	push   ebx
c00142fa:	e8 4d 98 00 00       	call   c001db4c <PIC::open(int, int, void*)>
c00142ff:	83 c4 20             	add    esp,0x20
c0014302:	89 f0                	mov    eax,esi
c0014304:	84 c0                	test   al,al
c0014306:	0f 85 92 01 00 00    	jne    c001449e <setupInterruptController()+0x1e2>
c001430c:	83 ec 08             	sub    esp,0x8
c001430f:	53                   	push   ebx
c0014310:	ff 35 c8 30 02 c0    	push   DWORD PTR ds:0xc00230c8
c0014316:	e8 67 f0 ff ff       	call   c0013382 <Device::addChild(Device*)>
c001431b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001431d:	6a 00                	push   0x0
c001431f:	68 c0 41 01 c0       	push   0xc00141c0
c0014324:	6a 00                	push   0x0
c0014326:	53                   	push   ebx
c0014327:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001432a:	83 c4 20             	add    esp,0x20
c001432d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001432f:	6a 00                	push   0x0
c0014331:	68 c0 41 01 c0       	push   0xc00141c0
c0014336:	6a 01                	push   0x1
c0014338:	53                   	push   ebx
c0014339:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001433c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001433e:	6a 00                	push   0x0
c0014340:	68 f1 3b 01 c0       	push   0xc0013bf1
c0014345:	6a 02                	push   0x2
c0014347:	53                   	push   ebx
c0014348:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001434b:	83 c4 20             	add    esp,0x20
c001434e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014350:	6a 00                	push   0x0
c0014352:	68 c0 41 01 c0       	push   0xc00141c0
c0014357:	6a 03                	push   0x3
c0014359:	53                   	push   ebx
c001435a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001435d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001435f:	6a 00                	push   0x0
c0014361:	68 c0 41 01 c0       	push   0xc00141c0
c0014366:	6a 04                	push   0x4
c0014368:	53                   	push   ebx
c0014369:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001436c:	83 c4 20             	add    esp,0x20
c001436f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014371:	6a 00                	push   0x0
c0014373:	68 c0 41 01 c0       	push   0xc00141c0
c0014378:	6a 05                	push   0x5
c001437a:	53                   	push   ebx
c001437b:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001437e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014380:	6a 00                	push   0x0
c0014382:	68 df 41 01 c0       	push   0xc00141df
c0014387:	6a 06                	push   0x6
c0014389:	53                   	push   ebx
c001438a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001438d:	83 c4 20             	add    esp,0x20
c0014390:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014392:	6a 00                	push   0x0
c0014394:	68 c0 41 01 c0       	push   0xc00141c0
c0014399:	6a 07                	push   0x7
c001439b:	53                   	push   ebx
c001439c:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001439f:	8b 03                	mov    eax,DWORD PTR [ebx]
c00143a1:	6a 00                	push   0x0
c00143a3:	68 18 3a 01 c0       	push   0xc0013a18
c00143a8:	6a 08                	push   0x8
c00143aa:	53                   	push   ebx
c00143ab:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00143ae:	83 c4 20             	add    esp,0x20
c00143b1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00143b3:	6a 00                	push   0x0
c00143b5:	68 c0 41 01 c0       	push   0xc00141c0
c00143ba:	6a 09                	push   0x9
c00143bc:	53                   	push   ebx
c00143bd:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00143c0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00143c2:	6a 00                	push   0x0
c00143c4:	68 c0 41 01 c0       	push   0xc00141c0
c00143c9:	6a 0a                	push   0xa
c00143cb:	53                   	push   ebx
c00143cc:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00143cf:	83 c4 20             	add    esp,0x20
c00143d2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00143d4:	6a 00                	push   0x0
c00143d6:	68 c0 41 01 c0       	push   0xc00141c0
c00143db:	6a 0b                	push   0xb
c00143dd:	53                   	push   ebx
c00143de:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00143e1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00143e3:	6a 00                	push   0x0
c00143e5:	68 c0 41 01 c0       	push   0xc00141c0
c00143ea:	6a 0c                	push   0xc
c00143ec:	53                   	push   ebx
c00143ed:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00143f0:	83 c4 20             	add    esp,0x20
c00143f3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00143f5:	6a 00                	push   0x0
c00143f7:	68 70 41 01 c0       	push   0xc0014170
c00143fc:	6a 0d                	push   0xd
c00143fe:	53                   	push   ebx
c00143ff:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0014402:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014404:	6a 00                	push   0x0
c0014406:	68 a9 41 01 c0       	push   0xc00141a9
c001440b:	6a 0e                	push   0xe
c001440d:	53                   	push   ebx
c001440e:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0014411:	83 c4 20             	add    esp,0x20
c0014414:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014416:	6a 00                	push   0x0
c0014418:	68 c0 41 01 c0       	push   0xc00141c0
c001441d:	6a 0f                	push   0xf
c001441f:	53                   	push   ebx
c0014420:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0014423:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014425:	6a 00                	push   0x0
c0014427:	68 c0 41 01 c0       	push   0xc00141c0
c001442c:	6a 10                	push   0x10
c001442e:	53                   	push   ebx
c001442f:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0014432:	83 c4 20             	add    esp,0x20
c0014435:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014437:	6a 00                	push   0x0
c0014439:	68 c0 41 01 c0       	push   0xc00141c0
c001443e:	6a 11                	push   0x11
c0014440:	53                   	push   ebx
c0014441:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0014444:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014446:	6a 00                	push   0x0
c0014448:	68 c0 41 01 c0       	push   0xc00141c0
c001444d:	6a 12                	push   0x12
c001444f:	53                   	push   ebx
c0014450:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0014453:	83 c4 20             	add    esp,0x20
c0014456:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014458:	6a 00                	push   0x0
c001445a:	68 c0 41 01 c0       	push   0xc00141c0
c001445f:	6a 13                	push   0x13
c0014461:	53                   	push   ebx
c0014462:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0014465:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014467:	6a 00                	push   0x0
c0014469:	68 c0 41 01 c0       	push   0xc00141c0
c001446e:	6a 14                	push   0x14
c0014470:	53                   	push   ebx
c0014471:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0014474:	83 c4 20             	add    esp,0x20
c0014477:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014479:	6a 00                	push   0x0
c001447b:	68 c0 41 01 c0       	push   0xc00141c0
c0014480:	6a 1e                	push   0x1e
c0014482:	53                   	push   ebx
c0014483:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0014486:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014488:	6a 00                	push   0x0
c001448a:	68 26 fa 00 c0       	push   0xc000fa26
c001448f:	6a 60                	push   0x60
c0014491:	53                   	push   ebx
c0014492:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0014495:	83 c4 20             	add    esp,0x20
c0014498:	89 d8                	mov    eax,ebx
c001449a:	5a                   	pop    edx
c001449b:	5b                   	pop    ebx
c001449c:	5e                   	pop    esi
c001449d:	c3                   	ret    
c001449e:	8b 03                	mov    eax,DWORD PTR [ebx]
c00144a0:	6a 00                	push   0x0
c00144a2:	6a 00                	push   0x0
c00144a4:	6a 00                	push   0x0
c00144a6:	53                   	push   ebx
c00144a7:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00144aa:	8b 03                	mov    eax,DWORD PTR [ebx]
c00144ac:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00144af:	ff 50 04             	call   DWORD PTR [eax+0x4]
c00144b2:	c7 04 24 58 21 00 00 	mov    DWORD PTR [esp],0x2158
c00144b9:	e8 ba db ff ff       	call   c0012078 <operator new(unsigned long)>
c00144be:	89 04 24             	mov    DWORD PTR [esp],eax
c00144c1:	89 c3                	mov    ebx,eax
c00144c3:	e8 7e 8e 00 00       	call   c001d346 <APIC::APIC()>
c00144c8:	6a 00                	push   0x0
c00144ca:	6a 00                	push   0x0
c00144cc:	6a 00                	push   0x0
c00144ce:	53                   	push   ebx
c00144cf:	e8 90 8d 00 00       	call   c001d264 <APIC::open(int, int, void*)>
c00144d4:	83 c4 20             	add    esp,0x20
c00144d7:	e9 30 fe ff ff       	jmp    c001430c <setupInterruptController()+0x50>
c00144dc:	83 ec 0c             	sub    esp,0xc
c00144df:	68 58 21 00 00       	push   0x2158
c00144e4:	e8 8f db ff ff       	call   c0012078 <operator new(unsigned long)>
c00144e9:	89 04 24             	mov    DWORD PTR [esp],eax
c00144ec:	89 c3                	mov    ebx,eax
c00144ee:	e8 53 8e 00 00       	call   c001d346 <APIC::APIC()>
c00144f3:	6a 00                	push   0x0
c00144f5:	6a 00                	push   0x0
c00144f7:	6a 00                	push   0x0
c00144f9:	53                   	push   ebx
c00144fa:	e8 65 8d 00 00       	call   c001d264 <APIC::open(int, int, void*)>
c00144ff:	83 c4 18             	add    esp,0x18
c0014502:	53                   	push   ebx
c0014503:	ff 35 c8 30 02 c0    	push   DWORD PTR ds:0xc00230c8
c0014509:	e8 74 ee ff ff       	call   c0013382 <Device::addChild(Device*)>
c001450e:	83 c4 10             	add    esp,0x10
c0014511:	89 d8                	mov    eax,ebx
c0014513:	5a                   	pop    edx
c0014514:	5b                   	pop    ebx
c0014515:	5e                   	pop    esi
c0014516:	c3                   	ret    
c0014517:	90                   	nop

c0014518 <startGUI(void*)>:
c0014518:	55                   	push   ebp
c0014519:	89 e5                	mov    ebp,esp
c001451b:	53                   	push   ebx
c001451c:	83 ec 04             	sub    esp,0x4
c001451f:	e8 48 9a ff ff       	call   c000df6c <unlockScheduler()>
c0014524:	e8 2c 9a ff ff       	call   c000df55 <getIRQNestingLevel()>
c0014529:	83 ec 08             	sub    esp,0x8
c001452c:	50                   	push   eax
c001452d:	68 70 14 02 c0       	push   0xc0021470
c0014532:	e8 91 85 ff ff       	call   c000cac8 <kprintf(char const*, ...)>
c0014537:	83 c4 10             	add    esp,0x10
c001453a:	8b 1d c8 30 02 c0    	mov    ebx,DWORD PTR ds:0xc00230c8
c0014540:	83 ec 0c             	sub    esp,0xc
c0014543:	68 8a 14 02 c0       	push   0xc002148a
c0014548:	e8 5c 7d ff ff       	call   c000c2a9 <loadDLL(char const*)>
c001454d:	83 c4 10             	add    esp,0x10
c0014550:	83 ec 08             	sub    esp,0x8
c0014553:	53                   	push   ebx
c0014554:	50                   	push   eax
c0014555:	e8 18 7e ff ff       	call   c000c372 <executeDLL(unsigned long, void*)>
c001455a:	83 c4 10             	add    esp,0x10
c001455d:	8b 1d c8 30 02 c0    	mov    ebx,DWORD PTR ds:0xc00230c8
c0014563:	83 ec 0c             	sub    esp,0xc
c0014566:	68 a4 14 02 c0       	push   0xc00214a4
c001456b:	e8 39 7d ff ff       	call   c000c2a9 <loadDLL(char const*)>
c0014570:	83 c4 10             	add    esp,0x10
c0014573:	83 ec 08             	sub    esp,0x8
c0014576:	53                   	push   ebx
c0014577:	50                   	push   eax
c0014578:	e8 f5 7d ff ff       	call   c000c372 <executeDLL(unsigned long, void*)>
c001457d:	83 c4 10             	add    esp,0x10
c0014580:	90                   	nop
c0014581:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0014584:	c9                   	leave  
c0014585:	c3                   	ret    

c0014586 <sendKeyToTerminal(unsigned char)>:
c0014586:	55                   	push   ebp
c0014587:	89 e5                	mov    ebp,esp
c0014589:	83 ec 28             	sub    esp,0x28
c001458c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001458f:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0014592:	a1 64 35 02 c0       	mov    eax,ds:0xc0023564
c0014597:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c001459b:	83 ec 08             	sub    esp,0x8
c001459e:	52                   	push   edx
c001459f:	50                   	push   eax
c00145a0:	e8 c7 c2 ff ff       	call   c001086c <VgaText::receiveKey(unsigned char)>
c00145a5:	83 c4 10             	add    esp,0x10
c00145a8:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c00145ac:	75 41                	jne    c00145ef <sendKeyToTerminal(unsigned char)+0x69>
c00145ae:	e8 de 99 ff ff       	call   c000df91 <lockStuff()>
c00145b3:	a1 c0 35 02 c0       	mov    eax,ds:0xc00235c0
c00145b8:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00145bb:	c7 05 c0 35 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00235c0,0x0
c00145c5:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c00145c9:	74 1f                	je     c00145ea <sendKeyToTerminal(unsigned char)+0x64>
c00145cb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00145ce:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00145d1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00145d4:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00145d7:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00145da:	83 ec 0c             	sub    esp,0xc
c00145dd:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00145e0:	e8 a9 a1 ff ff       	call   c000e78e <unblockTask(ThreadControlBlock*)>
c00145e5:	83 c4 10             	add    esp,0x10
c00145e8:	eb db                	jmp    c00145c5 <sendKeyToTerminal(unsigned char)+0x3f>
c00145ea:	e8 34 9d ff ff       	call   c000e323 <unlockStuff()>
c00145ef:	90                   	nop
c00145f0:	c9                   	leave  
c00145f1:	c3                   	ret    

c00145f2 <sendKeyboardToken(KeyboardToken)>:
c00145f2:	55                   	push   ebp
c00145f3:	89 e5                	mov    ebp,esp
c00145f5:	83 ec 18             	sub    esp,0x18
c00145f8:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c00145fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00145fe:	0f b7 c0             	movzx  eax,ax
c0014601:	83 f2 01             	xor    edx,0x1
c0014604:	88 90 e0 35 02 c0    	mov    BYTE PTR [eax-0x3ffdca20],dl
c001460a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001460d:	66 3d 03 02          	cmp    ax,0x203
c0014611:	75 07                	jne    c001461a <sendKeyboardToken(KeyboardToken)+0x28>
c0014613:	a0 e0 36 02 c0       	mov    al,ds:0xc00236e0
c0014618:	84 c0                	test   al,al
c001461a:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001461e:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c0014621:	a0 e8 39 02 c0       	mov    al,ds:0xc00239e8
c0014626:	38 c2                	cmp    dl,al
c0014628:	74 1c                	je     c0014646 <sendKeyboardToken(KeyboardToken)+0x54>
c001462a:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c001462d:	a2 e8 39 02 c0       	mov    ds:0xc00239e8,al
c0014632:	a0 e8 39 02 c0       	mov    al,ds:0xc00239e8
c0014637:	0f b6 c0             	movzx  eax,al
c001463a:	83 ec 0c             	sub    esp,0xc
c001463d:	50                   	push   eax
c001463e:	e8 97 b4 ff ff       	call   c000fada <setTerminalScrollLock(bool)>
c0014643:	83 c4 10             	add    esp,0x10
c0014646:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0014649:	84 c0                	test   al,al
c001464b:	0f 84 ae 00 00 00    	je     c00146ff <sendKeyboardToken(KeyboardToken)+0x10d>
c0014651:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014654:	66 3d 10 03          	cmp    ax,0x310
c0014658:	75 06                	jne    c0014660 <sendKeyboardToken(KeyboardToken)+0x6e>
c001465a:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0014660:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014663:	66 3d 11 03          	cmp    ax,0x311
c0014667:	75 06                	jne    c001466f <sendKeyboardToken(KeyboardToken)+0x7d>
c0014669:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c001466f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014672:	66 3d 12 03          	cmp    ax,0x312
c0014676:	75 06                	jne    c001467e <sendKeyboardToken(KeyboardToken)+0x8c>
c0014678:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c001467e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014681:	66 3d 13 03          	cmp    ax,0x313
c0014685:	75 06                	jne    c001468d <sendKeyboardToken(KeyboardToken)+0x9b>
c0014687:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c001468d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014690:	66 3d 14 03          	cmp    ax,0x314
c0014694:	75 06                	jne    c001469c <sendKeyboardToken(KeyboardToken)+0xaa>
c0014696:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c001469c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001469f:	66 3d 15 03          	cmp    ax,0x315
c00146a3:	75 06                	jne    c00146ab <sendKeyboardToken(KeyboardToken)+0xb9>
c00146a5:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c00146ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00146ae:	66 3d 16 03          	cmp    ax,0x316
c00146b2:	75 06                	jne    c00146ba <sendKeyboardToken(KeyboardToken)+0xc8>
c00146b4:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c00146ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00146bd:	66 3d 17 03          	cmp    ax,0x317
c00146c1:	75 06                	jne    c00146c9 <sendKeyboardToken(KeyboardToken)+0xd7>
c00146c3:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c00146c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00146cc:	66 3d 18 03          	cmp    ax,0x318
c00146d0:	75 06                	jne    c00146d8 <sendKeyboardToken(KeyboardToken)+0xe6>
c00146d2:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c00146d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00146db:	66 3d 19 03          	cmp    ax,0x319
c00146df:	75 06                	jne    c00146e7 <sendKeyboardToken(KeyboardToken)+0xf5>
c00146e1:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c00146e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00146ea:	66 3d 1a 03          	cmp    ax,0x31a
c00146ee:	0f 85 c9 00 00 00    	jne    c00147bd <sendKeyboardToken(KeyboardToken)+0x1cb>
c00146f4:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c00146fa:	e9 be 00 00 00       	jmp    c00147bd <sendKeyboardToken(KeyboardToken)+0x1cb>
c00146ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014702:	66 3d 10 03          	cmp    ax,0x310
c0014706:	75 0a                	jne    c0014712 <sendKeyboardToken(KeyboardToken)+0x120>
c0014708:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c001470e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0014712:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014715:	66 3d 11 03          	cmp    ax,0x311
c0014719:	75 0a                	jne    c0014725 <sendKeyboardToken(KeyboardToken)+0x133>
c001471b:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0014721:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0014725:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014728:	66 3d 12 03          	cmp    ax,0x312
c001472c:	75 0a                	jne    c0014738 <sendKeyboardToken(KeyboardToken)+0x146>
c001472e:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c0014734:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0014738:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001473b:	66 3d 13 03          	cmp    ax,0x313
c001473f:	75 0a                	jne    c001474b <sendKeyboardToken(KeyboardToken)+0x159>
c0014741:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c0014747:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001474b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001474e:	66 3d 14 03          	cmp    ax,0x314
c0014752:	75 0a                	jne    c001475e <sendKeyboardToken(KeyboardToken)+0x16c>
c0014754:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c001475a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001475e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014761:	66 3d 15 03          	cmp    ax,0x315
c0014765:	75 0a                	jne    c0014771 <sendKeyboardToken(KeyboardToken)+0x17f>
c0014767:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c001476d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0014771:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014774:	66 3d 16 03          	cmp    ax,0x316
c0014778:	75 0a                	jne    c0014784 <sendKeyboardToken(KeyboardToken)+0x192>
c001477a:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c0014780:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0014784:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014787:	66 3d 17 03          	cmp    ax,0x317
c001478b:	75 0a                	jne    c0014797 <sendKeyboardToken(KeyboardToken)+0x1a5>
c001478d:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c0014793:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0014797:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001479a:	66 3d 18 03          	cmp    ax,0x318
c001479e:	75 0a                	jne    c00147aa <sendKeyboardToken(KeyboardToken)+0x1b8>
c00147a0:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c00147a6:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00147aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00147ad:	66 3d 19 03          	cmp    ax,0x319
c00147b1:	75 0a                	jne    c00147bd <sendKeyboardToken(KeyboardToken)+0x1cb>
c00147b3:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c00147b9:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00147bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00147c0:	66 3d 00 02          	cmp    ax,0x200
c00147c4:	75 2a                	jne    c00147f0 <sendKeyboardToken(KeyboardToken)+0x1fe>
c00147c6:	a0 e0 39 02 c0       	mov    al,ds:0xc00239e0
c00147cb:	83 f0 01             	xor    eax,0x1
c00147ce:	84 c0                	test   al,al
c00147d0:	74 1e                	je     c00147f0 <sendKeyboardToken(KeyboardToken)+0x1fe>
c00147d2:	a1 1c 33 02 c0       	mov    eax,ds:0xc002331c
c00147d7:	6a 01                	push   0x1
c00147d9:	6a 00                	push   0x0
c00147db:	68 18 45 01 c0       	push   0xc0014518
c00147e0:	50                   	push   eax
c00147e1:	e8 ae 98 ff ff       	call   c000e094 <Process::createThread(void (*)(void*), void*, int)>
c00147e6:	83 c4 10             	add    esp,0x10
c00147e9:	c6 05 e0 39 02 c0 01 	mov    BYTE PTR ds:0xc00239e0,0x1
c00147f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00147f3:	66 3d 1d 03          	cmp    ax,0x31d
c00147f7:	75 06                	jne    c00147ff <sendKeyboardToken(KeyboardToken)+0x20d>
c00147f9:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c00147ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014802:	66 3d 1c 03          	cmp    ax,0x31c
c0014806:	75 06                	jne    c001480e <sendKeyboardToken(KeyboardToken)+0x21c>
c0014808:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c001480e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014811:	66 3d 1b 03          	cmp    ax,0x31b
c0014815:	75 06                	jne    c001481d <sendKeyboardToken(KeyboardToken)+0x22b>
c0014817:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c001481d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014820:	66 3d 1e 03          	cmp    ax,0x31e
c0014824:	75 06                	jne    c001482c <sendKeyboardToken(KeyboardToken)+0x23a>
c0014826:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c001482c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001482f:	66 3d 1f 03          	cmp    ax,0x31f
c0014833:	75 06                	jne    c001483b <sendKeyboardToken(KeyboardToken)+0x249>
c0014835:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c001483b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001483e:	66 3d 1a 03          	cmp    ax,0x31a
c0014842:	75 06                	jne    c001484a <sendKeyboardToken(KeyboardToken)+0x258>
c0014844:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c001484a:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c001484e:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0014851:	83 f0 01             	xor    eax,0x1
c0014854:	84 c0                	test   al,al
c0014856:	74 77                	je     c00148cf <sendKeyboardToken(KeyboardToken)+0x2dd>
c0014858:	a0 e1 36 02 c0       	mov    al,ds:0xc00236e1
c001485d:	84 c0                	test   al,al
c001485f:	74 41                	je     c00148a2 <sendKeyboardToken(KeyboardToken)+0x2b0>
c0014861:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0014865:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c0014869:	74 2b                	je     c0014896 <sendKeyboardToken(KeyboardToken)+0x2a4>
c001486b:	8b 15 e4 39 02 c0    	mov    edx,DWORD PTR ds:0xc00239e4
c0014871:	89 d0                	mov    eax,edx
c0014873:	c1 e0 02             	shl    eax,0x2
c0014876:	01 d0                	add    eax,edx
c0014878:	01 c0                	add    eax,eax
c001487a:	a3 e4 39 02 c0       	mov    ds:0xc00239e4,eax
c001487f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014882:	0f b7 c0             	movzx  eax,ax
c0014885:	8d 50 d0             	lea    edx,[eax-0x30]
c0014888:	a1 e4 39 02 c0       	mov    eax,ds:0xc00239e4
c001488d:	01 d0                	add    eax,edx
c001488f:	a3 e4 39 02 c0       	mov    ds:0xc00239e4,eax
c0014894:	eb 6d                	jmp    c0014903 <sendKeyboardToken(KeyboardToken)+0x311>
c0014896:	c7 05 e4 39 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00239e4,0x0
c00148a0:	eb 61                	jmp    c0014903 <sendKeyboardToken(KeyboardToken)+0x311>
c00148a2:	a1 e4 39 02 c0       	mov    eax,ds:0xc00239e4
c00148a7:	85 c0                	test   eax,eax
c00148a9:	74 18                	je     c00148c3 <sendKeyboardToken(KeyboardToken)+0x2d1>
c00148ab:	a1 e4 39 02 c0       	mov    eax,ds:0xc00239e4
c00148b0:	0f b6 c0             	movzx  eax,al
c00148b3:	83 ec 0c             	sub    esp,0xc
c00148b6:	50                   	push   eax
c00148b7:	e8 ca fc ff ff       	call   c0014586 <sendKeyToTerminal(unsigned char)>
c00148bc:	83 c4 10             	add    esp,0x10
c00148bf:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00148c3:	c7 05 e4 39 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00239e4,0x0
c00148cd:	eb 34                	jmp    c0014903 <sendKeyboardToken(KeyboardToken)+0x311>
c00148cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00148d2:	66 3d 01 01          	cmp    ax,0x101
c00148d6:	75 2b                	jne    c0014903 <sendKeyboardToken(KeyboardToken)+0x311>
c00148d8:	a1 e4 39 02 c0       	mov    eax,ds:0xc00239e4
c00148dd:	85 c0                	test   eax,eax
c00148df:	74 18                	je     c00148f9 <sendKeyboardToken(KeyboardToken)+0x307>
c00148e1:	a1 e4 39 02 c0       	mov    eax,ds:0xc00239e4
c00148e6:	0f b6 c0             	movzx  eax,al
c00148e9:	83 ec 0c             	sub    esp,0xc
c00148ec:	50                   	push   eax
c00148ed:	e8 94 fc ff ff       	call   c0014586 <sendKeyToTerminal(unsigned char)>
c00148f2:	83 c4 10             	add    esp,0x10
c00148f5:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00148f9:	c7 05 e4 39 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00239e4,0x0
c0014903:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0014906:	83 f0 01             	xor    eax,0x1
c0014909:	84 c0                	test   al,al
c001490b:	74 4c                	je     c0014959 <sendKeyboardToken(KeyboardToken)+0x367>
c001490d:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0014910:	83 f0 01             	xor    eax,0x1
c0014913:	84 c0                	test   al,al
c0014915:	74 42                	je     c0014959 <sendKeyboardToken(KeyboardToken)+0x367>
c0014917:	a0 e0 36 02 c0       	mov    al,ds:0xc00236e0
c001491c:	83 f0 01             	xor    eax,0x1
c001491f:	84 c0                	test   al,al
c0014921:	74 36                	je     c0014959 <sendKeyboardToken(KeyboardToken)+0x367>
c0014923:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014926:	66 83 f8 1f          	cmp    ax,0x1f
c001492a:	76 09                	jbe    c0014935 <sendKeyboardToken(KeyboardToken)+0x343>
c001492c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001492f:	66 83 f8 7e          	cmp    ax,0x7e
c0014933:	76 12                	jbe    c0014947 <sendKeyboardToken(KeyboardToken)+0x355>
c0014935:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014938:	66 83 f8 0a          	cmp    ax,0xa
c001493c:	74 09                	je     c0014947 <sendKeyboardToken(KeyboardToken)+0x355>
c001493e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014941:	66 83 f8 08          	cmp    ax,0x8
c0014945:	75 12                	jne    c0014959 <sendKeyboardToken(KeyboardToken)+0x367>
c0014947:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001494a:	0f b6 c0             	movzx  eax,al
c001494d:	83 ec 0c             	sub    esp,0xc
c0014950:	50                   	push   eax
c0014951:	e8 30 fc ff ff       	call   c0014586 <sendKeyToTerminal(unsigned char)>
c0014956:	83 c4 10             	add    esp,0x10
c0014959:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c001495c:	83 f0 01             	xor    eax,0x1
c001495f:	84 c0                	test   al,al
c0014961:	74 4f                	je     c00149b2 <sendKeyboardToken(KeyboardToken)+0x3c0>
c0014963:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0014966:	83 f0 01             	xor    eax,0x1
c0014969:	84 c0                	test   al,al
c001496b:	74 45                	je     c00149b2 <sendKeyboardToken(KeyboardToken)+0x3c0>
c001496d:	a0 e0 36 02 c0       	mov    al,ds:0xc00236e0
c0014972:	84 c0                	test   al,al
c0014974:	74 3c                	je     c00149b2 <sendKeyboardToken(KeyboardToken)+0x3c0>
c0014976:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014979:	66 83 f8 3f          	cmp    ax,0x3f
c001497d:	76 33                	jbe    c00149b2 <sendKeyboardToken(KeyboardToken)+0x3c0>
c001497f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014982:	66 83 f8 7f          	cmp    ax,0x7f
c0014986:	77 2a                	ja     c00149b2 <sendKeyboardToken(KeyboardToken)+0x3c0>
c0014988:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001498b:	88 c2                	mov    dl,al
c001498d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014990:	66 83 f8 5f          	cmp    ax,0x5f
c0014994:	76 04                	jbe    c001499a <sendKeyboardToken(KeyboardToken)+0x3a8>
c0014996:	b0 20                	mov    al,0x20
c0014998:	eb 02                	jmp    c001499c <sendKeyboardToken(KeyboardToken)+0x3aa>
c001499a:	b0 00                	mov    al,0x0
c001499c:	29 c2                	sub    edx,eax
c001499e:	88 d0                	mov    al,dl
c00149a0:	83 e8 40             	sub    eax,0x40
c00149a3:	0f b6 c0             	movzx  eax,al
c00149a6:	83 ec 0c             	sub    esp,0xc
c00149a9:	50                   	push   eax
c00149aa:	e8 d7 fb ff ff       	call   c0014586 <sendKeyToTerminal(unsigned char)>
c00149af:	83 c4 10             	add    esp,0x10
c00149b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00149b5:	66 3d 00 03          	cmp    ax,0x300
c00149b9:	75 0f                	jne    c00149ca <sendKeyboardToken(KeyboardToken)+0x3d8>
c00149bb:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00149be:	83 f0 01             	xor    eax,0x1
c00149c1:	84 c0                	test   al,al
c00149c3:	74 05                	je     c00149ca <sendKeyboardToken(KeyboardToken)+0x3d8>
c00149c5:	e8 37 b9 ff ff       	call   c0010301 <doTerminalCycle()>
c00149ca:	90                   	nop
c00149cb:	c9                   	leave  
c00149cc:	c3                   	ret    

c00149cd <clearInternalKeybuffer(VgaText*)>:
c00149cd:	55                   	push   ebp
c00149ce:	89 e5                	mov    ebp,esp
c00149d0:	83 ec 08             	sub    esp,0x8
c00149d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00149d6:	05 34 11 00 00       	add    eax,0x1134
c00149db:	83 ec 0c             	sub    esp,0xc
c00149de:	50                   	push   eax
c00149df:	e8 41 bc fe ff       	call   c0000625 <strlen>
c00149e4:	83 c4 10             	add    esp,0x10
c00149e7:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00149ea:	81 c2 34 11 00 00    	add    edx,0x1134
c00149f0:	83 ec 04             	sub    esp,0x4
c00149f3:	50                   	push   eax
c00149f4:	6a 00                	push   0x0
c00149f6:	52                   	push   edx
c00149f7:	e8 0c bc fe ff       	call   c0000608 <memset>
c00149fc:	83 c4 10             	add    esp,0x10
c00149ff:	90                   	nop
c0014a00:	c9                   	leave  
c0014a01:	c3                   	ret    

c0014a02 <readKeyboard(VgaText*, char*, unsigned long)>:
c0014a02:	55                   	push   ebp
c0014a03:	89 e5                	mov    ebp,esp
c0014a05:	83 ec 18             	sub    esp,0x18
c0014a08:	fb                   	sti    
c0014a09:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0014a10:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0014a14:	74 77                	je     c0014a8d <readKeyboard(VgaText*, char*, unsigned long)+0x8b>
c0014a16:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a19:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0014a1f:	84 c0                	test   al,al
c0014a21:	75 02                	jne    c0014a25 <readKeyboard(VgaText*, char*, unsigned long)+0x23>
c0014a23:	eb f1                	jmp    c0014a16 <readKeyboard(VgaText*, char*, unsigned long)+0x14>
c0014a25:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0014a28:	8d 50 01             	lea    edx,[eax+0x1]
c0014a2b:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0014a2e:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0014a31:	8a 92 34 11 00 00    	mov    dl,BYTE PTR [edx+0x1134]
c0014a37:	88 10                	mov    BYTE PTR [eax],dl
c0014a39:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a3c:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0014a42:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0014a45:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a48:	05 34 11 00 00       	add    eax,0x1134
c0014a4d:	83 ec 0c             	sub    esp,0xc
c0014a50:	50                   	push   eax
c0014a51:	e8 cf bb fe ff       	call   c0000625 <strlen>
c0014a56:	83 c4 10             	add    esp,0x10
c0014a59:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0014a5c:	81 c2 34 11 00 00    	add    edx,0x1134
c0014a62:	8d 4a 01             	lea    ecx,[edx+0x1]
c0014a65:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0014a68:	81 c2 34 11 00 00    	add    edx,0x1134
c0014a6e:	83 ec 04             	sub    esp,0x4
c0014a71:	50                   	push   eax
c0014a72:	51                   	push   ecx
c0014a73:	52                   	push   edx
c0014a74:	e8 21 bb fe ff       	call   c000059a <memmove>
c0014a79:	83 c4 10             	add    esp,0x10
c0014a7c:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0014a7f:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014a82:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c0014a86:	75 88                	jne    c0014a10 <readKeyboard(VgaText*, char*, unsigned long)+0xe>
c0014a88:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014a8b:	eb 03                	jmp    c0014a90 <readKeyboard(VgaText*, char*, unsigned long)+0x8e>
c0014a8d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014a90:	c9                   	leave  
c0014a91:	c3                   	ret    

c0014a92 <Keyboard::Keyboard(char const*)>:
c0014a92:	83 ec 0c             	sub    esp,0xc
c0014a95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014a99:	83 ec 08             	sub    esp,0x8
c0014a9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014aa0:	50                   	push   eax
c0014aa1:	e8 cc ea ff ff       	call   c0013572 <Device::Device(char const*)>
c0014aa6:	83 c4 10             	add    esp,0x10
c0014aa9:	ba c8 14 02 c0       	mov    edx,0xc00214c8
c0014aae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014ab2:	89 10                	mov    DWORD PTR [eax],edx
c0014ab4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014ab8:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0014ac2:	c6 05 c4 35 02 c0 01 	mov    BYTE PTR ds:0xc00235c4,0x1
c0014ac9:	90                   	nop
c0014aca:	83 c4 0c             	add    esp,0xc
c0014acd:	c3                   	ret    

c0014ace <Keyboard::~Keyboard()>:
c0014ace:	83 ec 0c             	sub    esp,0xc
c0014ad1:	ba c8 14 02 c0       	mov    edx,0xc00214c8
c0014ad6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014ada:	89 10                	mov    DWORD PTR [eax],edx
c0014adc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014ae0:	83 ec 0c             	sub    esp,0xc
c0014ae3:	50                   	push   eax
c0014ae4:	e8 3b e7 ff ff       	call   c0013224 <Device::~Device()>
c0014ae9:	83 c4 10             	add    esp,0x10
c0014aec:	90                   	nop
c0014aed:	83 c4 0c             	add    esp,0xc
c0014af0:	c3                   	ret    
c0014af1:	90                   	nop

c0014af2 <Keyboard::~Keyboard()>:
c0014af2:	83 ec 0c             	sub    esp,0xc
c0014af5:	83 ec 0c             	sub    esp,0xc
c0014af8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014afc:	e8 cd ff ff ff       	call   c0014ace <Keyboard::~Keyboard()>
c0014b01:	83 c4 10             	add    esp,0x10
c0014b04:	83 ec 08             	sub    esp,0x8
c0014b07:	68 5c 01 00 00       	push   0x15c
c0014b0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014b10:	e8 72 d5 ff ff       	call   c0012087 <operator delete(void*, unsigned long)>
c0014b15:	83 c4 10             	add    esp,0x10
c0014b18:	83 c4 0c             	add    esp,0xc
c0014b1b:	c3                   	ret    

c0014b1c <LogicalDisk::close(int, int, void*)>:
c0014b1c:	83 c8 ff             	or     eax,0xffffffff
c0014b1f:	c3                   	ret    

c0014b20 <LogicalDisk::~LogicalDisk()>:
c0014b20:	83 ec 0c             	sub    esp,0xc
c0014b23:	ba 78 15 02 c0       	mov    edx,0xc0021578
c0014b28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014b2c:	89 10                	mov    DWORD PTR [eax],edx
c0014b2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014b32:	83 ec 0c             	sub    esp,0xc
c0014b35:	50                   	push   eax
c0014b36:	e8 e9 e6 ff ff       	call   c0013224 <Device::~Device()>
c0014b3b:	83 c4 10             	add    esp,0x10
c0014b3e:	90                   	nop
c0014b3f:	83 c4 0c             	add    esp,0xc
c0014b42:	c3                   	ret    
c0014b43:	90                   	nop

c0014b44 <LogicalDisk::~LogicalDisk()>:
c0014b44:	83 ec 0c             	sub    esp,0xc
c0014b47:	83 ec 0c             	sub    esp,0xc
c0014b4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014b4e:	e8 cd ff ff ff       	call   c0014b20 <LogicalDisk::~LogicalDisk()>
c0014b53:	83 c4 10             	add    esp,0x10
c0014b56:	83 ec 08             	sub    esp,0x8
c0014b59:	68 74 01 00 00       	push   0x174
c0014b5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014b62:	e8 20 d5 ff ff       	call   c0012087 <operator delete(void*, unsigned long)>
c0014b67:	83 c4 10             	add    esp,0x10
c0014b6a:	83 c4 0c             	add    esp,0xc
c0014b6d:	c3                   	ret    

c0014b6e <LogicalDisk::open(int, int, void*)>:
c0014b6e:	83 ec 18             	sub    esp,0x18
c0014b71:	68 f4 14 02 c0       	push   0xc00214f4
c0014b76:	e8 6b 80 ff ff       	call   c000cbe6 <panic(char const*)>
c0014b7b:	83 c8 ff             	or     eax,0xffffffff
c0014b7e:	83 c4 1c             	add    esp,0x1c
c0014b81:	c3                   	ret    

c0014b82 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0014b82:	53                   	push   ebx
c0014b83:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0014b87:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014b8b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014b8f:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0014b95:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c0014b9b:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0014ba1:	77 10                	ja     c0014bb3 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0014ba3:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0014ba9:	89 d3                	mov    ebx,edx
c0014bab:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0014bb1:	72 05                	jb     c0014bb8 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0014bb3:	83 c8 ff             	or     eax,0xffffffff
c0014bb6:	89 c2                	mov    edx,eax
c0014bb8:	5b                   	pop    ebx
c0014bb9:	c3                   	ret    

c0014bba <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c0014bba:	56                   	push   esi
c0014bbb:	83 c8 ff             	or     eax,0xffffffff
c0014bbe:	53                   	push   ebx
c0014bbf:	89 c2                	mov    edx,eax
c0014bc1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014bc5:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0014bc9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0014bcd:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0014bd3:	77 27                	ja     c0014bfc <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0014bd5:	89 d8                	mov    eax,ebx
c0014bd7:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0014bdd:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0014be3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0014be8:	89 c2                	mov    edx,eax
c0014bea:	73 10                	jae    c0014bfc <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0014bec:	89 c8                	mov    eax,ecx
c0014bee:	89 da                	mov    edx,ebx
c0014bf0:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0014bf6:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0014bfc:	5b                   	pop    ebx
c0014bfd:	5e                   	pop    esi
c0014bfe:	c3                   	ret    
c0014bff:	90                   	nop

c0014c00 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0014c00:	83 ec 1c             	sub    esp,0x1c
c0014c03:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0014c07:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014c0b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014c0f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014c13:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014c17:	89 04 24             	mov    DWORD PTR [esp],eax
c0014c1a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0014c1e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014c22:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014c26:	83 ec 08             	sub    esp,0x8
c0014c29:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014c2d:	50                   	push   eax
c0014c2e:	e8 3f e9 ff ff       	call   c0013572 <Device::Device(char const*)>
c0014c33:	83 c4 10             	add    esp,0x10
c0014c36:	ba 78 15 02 c0       	mov    edx,0xc0021578
c0014c3b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014c3f:	89 10                	mov    DWORD PTR [eax],edx
c0014c41:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014c45:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0014c4c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014c50:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0014c57:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014c5b:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0014c65:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0014c69:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014c6d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014c71:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0014c77:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c0014c7d:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0014c81:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0014c84:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0014c88:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c0014c8e:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0014c94:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014c98:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0014c9c:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0014ca2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ca6:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0014cb0:	90                   	nop
c0014cb1:	83 c4 1c             	add    esp,0x1c
c0014cb4:	c3                   	ret    
c0014cb5:	90                   	nop

c0014cb6 <LogicalDisk::assignDriveLetter()>:
c0014cb6:	55                   	push   ebp
c0014cb7:	57                   	push   edi
c0014cb8:	56                   	push   esi
c0014cb9:	53                   	push   ebx
c0014cba:	83 ec 14             	sub    esp,0x14
c0014cbd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014cc1:	8b 3d 00 3a 02 c0    	mov    edi,DWORD PTR ds:0xc0023a00
c0014cc7:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c0014ccd:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0014cd1:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c0014cd7:	8b 3d 04 3a 02 c0    	mov    edi,DWORD PTR ds:0xc0023a04
c0014cdd:	3c 01                	cmp    al,0x1
c0014cdf:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0014ce3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0014ce7:	19 c0                	sbb    eax,eax
c0014ce9:	83 e0 02             	and    eax,0x2
c0014cec:	83 c0 41             	add    eax,0x41
c0014cef:	0f be e8             	movsx  ebp,al
c0014cf2:	3c 43                	cmp    al,0x43
c0014cf4:	75 10                	jne    c0014d06 <LogicalDisk::assignDriveLetter()+0x50>
c0014cf6:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0014cfd:	75 5d                	jne    c0014d5c <LogicalDisk::assignDriveLetter()+0xa6>
c0014cff:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014d04:	75 56                	jne    c0014d5c <LogicalDisk::assignDriveLetter()+0xa6>
c0014d06:	8d 75 bf             	lea    esi,[ebp-0x41]
c0014d09:	ba 01 00 00 00       	mov    edx,0x1
c0014d0e:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0014d12:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0014d16:	d3 e2                	shl    edx,cl
c0014d18:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014d1c:	89 d7                	mov    edi,edx
c0014d1e:	89 d6                	mov    esi,edx
c0014d20:	c1 ff 1f             	sar    edi,0x1f
c0014d23:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0014d27:	21 f9                	and    ecx,edi
c0014d29:	09 d1                	or     ecx,edx
c0014d2b:	75 2f                	jne    c0014d5c <LogicalDisk::assignDriveLetter()+0xa6>
c0014d2d:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0014d31:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014d35:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0014d3b:	09 f2                	or     edx,esi
c0014d3d:	89 15 00 3a 02 c0    	mov    DWORD PTR ds:0xc0023a00,edx
c0014d43:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014d47:	09 fa                	or     edx,edi
c0014d49:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0014d4d:	89 15 04 3a 02 c0    	mov    DWORD PTR ds:0xc0023a04,edx
c0014d53:	89 1c bd 20 3a 02 c0 	mov    DWORD PTR [edi*4-0x3ffdc5e0],ebx
c0014d5a:	eb 08                	jmp    c0014d64 <LogicalDisk::assignDriveLetter()+0xae>
c0014d5c:	45                   	inc    ebp
c0014d5d:	40                   	inc    eax
c0014d5e:	3c 5b                	cmp    al,0x5b
c0014d60:	75 90                	jne    c0014cf2 <LogicalDisk::assignDriveLetter()+0x3c>
c0014d62:	31 c0                	xor    eax,eax
c0014d64:	83 c4 14             	add    esp,0x14
c0014d67:	5b                   	pop    ebx
c0014d68:	5e                   	pop    esi
c0014d69:	5f                   	pop    edi
c0014d6a:	5d                   	pop    ebp
c0014d6b:	c3                   	ret    

c0014d6c <LogicalDisk::mount()>:
c0014d6c:	56                   	push   esi
c0014d6d:	53                   	push   ebx
c0014d6e:	51                   	push   ecx
c0014d6f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014d73:	8b 1d 80 35 02 c0    	mov    ebx,DWORD PTR ds:0xc0023580
c0014d79:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c0014d83:	85 db                	test   ebx,ebx
c0014d85:	74 50                	je     c0014dd7 <LogicalDisk::mount()+0x6b>
c0014d87:	e8 c9 91 ff ff       	call   c000df55 <getIRQNestingLevel()>
c0014d8c:	52                   	push   edx
c0014d8d:	52                   	push   edx
c0014d8e:	50                   	push   eax
c0014d8f:	68 18 15 02 c0       	push   0xc0021518
c0014d94:	e8 2f 7d ff ff       	call   c000cac8 <kprintf(char const*, ...)>
c0014d99:	83 c4 0c             	add    esp,0xc
c0014d9c:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c0014da3:	8b 13                	mov    edx,DWORD PTR [ebx]
c0014da5:	83 e8 41             	sub    eax,0x41
c0014da8:	50                   	push   eax
c0014da9:	56                   	push   esi
c0014daa:	53                   	push   ebx
c0014dab:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0014dae:	83 c4 10             	add    esp,0x10
c0014db1:	84 c0                	test   al,al
c0014db3:	74 08                	je     c0014dbd <LogicalDisk::mount()+0x51>
c0014db5:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c0014dbb:	eb 1c                	jmp    c0014dd9 <LogicalDisk::mount()+0x6d>
c0014dbd:	e8 93 91 ff ff       	call   c000df55 <getIRQNestingLevel()>
c0014dc2:	51                   	push   ecx
c0014dc3:	51                   	push   ecx
c0014dc4:	50                   	push   eax
c0014dc5:	68 33 15 02 c0       	push   0xc0021533
c0014dca:	e8 f9 7c ff ff       	call   c000cac8 <kprintf(char const*, ...)>
c0014dcf:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0014dd2:	83 c4 10             	add    esp,0x10
c0014dd5:	eb ac                	jmp    c0014d83 <LogicalDisk::mount()+0x17>
c0014dd7:	31 c0                	xor    eax,eax
c0014dd9:	5a                   	pop    edx
c0014dda:	5b                   	pop    ebx
c0014ddb:	5e                   	pop    esi
c0014ddc:	c3                   	ret    
c0014ddd:	90                   	nop

c0014dde <LogicalDisk::unmount()>:
c0014dde:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014de2:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0014dec:	c3                   	ret    
c0014ded:	90                   	nop

c0014dee <LogicalDisk::unassignDriveLetter()>:
c0014dee:	57                   	push   edi
c0014def:	56                   	push   esi
c0014df0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014df4:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c0014dfb:	84 c9                	test   cl,cl
c0014dfd:	75 0f                	jne    c0014e0e <LogicalDisk::unassignDriveLetter()+0x20>
c0014dff:	c7 44 24 0c 4e 15 02 c0 	mov    DWORD PTR [esp+0xc],0xc002154e
c0014e07:	5e                   	pop    esi
c0014e08:	5f                   	pop    edi
c0014e09:	e9 d8 7d ff ff       	jmp    c000cbe6 <panic(char const*)>
c0014e0e:	83 e9 41             	sub    ecx,0x41
c0014e11:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c0014e18:	b8 01 00 00 00       	mov    eax,0x1
c0014e1d:	c7 04 8d 20 3a 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffdc5e0],0x0
c0014e28:	d3 e0                	shl    eax,cl
c0014e2a:	89 c7                	mov    edi,eax
c0014e2c:	f7 d0                	not    eax
c0014e2e:	c1 ff 1f             	sar    edi,0x1f
c0014e31:	21 05 00 3a 02 c0    	and    DWORD PTR ds:0xc0023a00,eax
c0014e37:	89 fe                	mov    esi,edi
c0014e39:	f7 d6                	not    esi
c0014e3b:	21 35 04 3a 02 c0    	and    DWORD PTR ds:0xc0023a04,esi
c0014e41:	5e                   	pop    esi
c0014e42:	5f                   	pop    edi
c0014e43:	c3                   	ret    

c0014e44 <LogicalDisk::read(unsigned long long, int, void*)>:
c0014e44:	57                   	push   edi
c0014e45:	56                   	push   esi
c0014e46:	53                   	push   ebx
c0014e47:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014e4b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014e4f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0014e53:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014e57:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0014e5d:	77 41                	ja     c0014ea0 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c0014e5f:	99                   	cdq    
c0014e60:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0014e66:	01 c8                	add    eax,ecx
c0014e68:	11 da                	adc    edx,ebx
c0014e6a:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0014e70:	19 d7                	sbb    edi,edx
c0014e72:	72 33                	jb     c0014ea7 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c0014e74:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0014e7a:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0014e80:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0014e84:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0014e88:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0014e8e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0014e94:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014e98:	5b                   	pop    ebx
c0014e99:	5e                   	pop    esi
c0014e9a:	5f                   	pop    edi
c0014e9b:	e9 9a 09 00 00       	jmp    c001583a <VCache::read(unsigned long long, int, void*)>
c0014ea0:	b8 05 00 00 00       	mov    eax,0x5
c0014ea5:	eb 05                	jmp    c0014eac <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c0014ea7:	b8 07 00 00 00       	mov    eax,0x7
c0014eac:	5b                   	pop    ebx
c0014ead:	5e                   	pop    esi
c0014eae:	5f                   	pop    edi
c0014eaf:	c3                   	ret    

c0014eb0 <LogicalDisk::write(unsigned long long, int, void*)>:
c0014eb0:	57                   	push   edi
c0014eb1:	56                   	push   esi
c0014eb2:	53                   	push   ebx
c0014eb3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014eb7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014ebb:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0014ebf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014ec3:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0014ec9:	77 41                	ja     c0014f0c <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c0014ecb:	99                   	cdq    
c0014ecc:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0014ed2:	01 c8                	add    eax,ecx
c0014ed4:	11 da                	adc    edx,ebx
c0014ed6:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0014edc:	19 d7                	sbb    edi,edx
c0014ede:	72 33                	jb     c0014f13 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c0014ee0:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0014ee6:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0014eec:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0014ef0:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0014ef4:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0014efa:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0014f00:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014f04:	5b                   	pop    ebx
c0014f05:	5e                   	pop    esi
c0014f06:	5f                   	pop    edi
c0014f07:	e9 4a 08 00 00       	jmp    c0015756 <VCache::write(unsigned long long, int, void*)>
c0014f0c:	b8 05 00 00 00       	mov    eax,0x5
c0014f11:	eb 05                	jmp    c0014f18 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c0014f13:	b8 07 00 00 00       	mov    eax,0x7
c0014f18:	5b                   	pop    ebx
c0014f19:	5e                   	pop    esi
c0014f1a:	5f                   	pop    edi
c0014f1b:	c3                   	ret    

c0014f1c <Mouse::Mouse(char const*)>:
c0014f1c:	83 ec 0c             	sub    esp,0xc
c0014f1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014f23:	83 ec 08             	sub    esp,0x8
c0014f26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014f2a:	50                   	push   eax
c0014f2b:	e8 42 e6 ff ff       	call   c0013572 <Device::Device(char const*)>
c0014f30:	83 c4 10             	add    esp,0x10
c0014f33:	ba a4 15 02 c0       	mov    edx,0xc00215a4
c0014f38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014f3c:	89 10                	mov    DWORD PTR [eax],edx
c0014f3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014f42:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c0014f4c:	90                   	nop
c0014f4d:	83 c4 0c             	add    esp,0xc
c0014f50:	c3                   	ret    
c0014f51:	90                   	nop

c0014f52 <Mouse::~Mouse()>:
c0014f52:	83 ec 0c             	sub    esp,0xc
c0014f55:	ba a4 15 02 c0       	mov    edx,0xc00215a4
c0014f5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014f5e:	89 10                	mov    DWORD PTR [eax],edx
c0014f60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014f64:	83 ec 0c             	sub    esp,0xc
c0014f67:	50                   	push   eax
c0014f68:	e8 b7 e2 ff ff       	call   c0013224 <Device::~Device()>
c0014f6d:	83 c4 10             	add    esp,0x10
c0014f70:	90                   	nop
c0014f71:	83 c4 0c             	add    esp,0xc
c0014f74:	c3                   	ret    
c0014f75:	90                   	nop

c0014f76 <Mouse::~Mouse()>:
c0014f76:	83 ec 0c             	sub    esp,0xc
c0014f79:	83 ec 0c             	sub    esp,0xc
c0014f7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014f80:	e8 cd ff ff ff       	call   c0014f52 <Mouse::~Mouse()>
c0014f85:	83 c4 10             	add    esp,0x10
c0014f88:	83 ec 08             	sub    esp,0x8
c0014f8b:	68 58 01 00 00       	push   0x158
c0014f90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014f94:	e8 ee d0 ff ff       	call   c0012087 <operator delete(void*, unsigned long)>
c0014f99:	83 c4 10             	add    esp,0x10
c0014f9c:	83 c4 0c             	add    esp,0xc
c0014f9f:	c3                   	ret    

c0014fa0 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c0014fa0:	55                   	push   ebp
c0014fa1:	57                   	push   edi
c0014fa2:	56                   	push   esi
c0014fa3:	53                   	push   ebx
c0014fa4:	81 ec 28 01 00 00    	sub    esp,0x128
c0014faa:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0014fb1:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0014fb8:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0014fbf:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c0014fc6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014fca:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0014fce:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0014fd5:	e8 8a e6 ff ff       	call   c0013664 <Device::getName()>
c0014fda:	5a                   	pop    edx
c0014fdb:	59                   	pop    ecx
c0014fdc:	50                   	push   eax
c0014fdd:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0014fe1:	55                   	push   ebp
c0014fe2:	e8 c0 b6 fe ff       	call   c00006a7 <strcpy>
c0014fe7:	5b                   	pop    ebx
c0014fe8:	58                   	pop    eax
c0014fe9:	68 c8 15 02 c0       	push   0xc00215c8
c0014fee:	55                   	push   ebp
c0014fef:	e8 6a b7 fe ff       	call   c000075e <strcat>
c0014ff4:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0014ffb:	e8 78 d0 ff ff       	call   c0012078 <operator new(unsigned long)>
c0015000:	83 c4 0c             	add    esp,0xc
c0015003:	89 c3                	mov    ebx,eax
c0015005:	57                   	push   edi
c0015006:	56                   	push   esi
c0015007:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001500b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001500f:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0015016:	55                   	push   ebp
c0015017:	50                   	push   eax
c0015018:	e8 e3 fb ff ff       	call   c0014c00 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001501d:	83 c4 14             	add    esp,0x14
c0015020:	53                   	push   ebx
c0015021:	e8 90 fc ff ff       	call   c0014cb6 <LogicalDisk::assignDriveLetter()>
c0015026:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015029:	e8 3e fd ff ff       	call   c0014d6c <LogicalDisk::mount()>
c001502e:	58                   	pop    eax
c001502f:	5a                   	pop    edx
c0015030:	53                   	push   ebx
c0015031:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0015038:	e8 45 e3 ff ff       	call   c0013382 <Device::addChild(Device*)>
c001503d:	81 c4 2c 01 00 00    	add    esp,0x12c
c0015043:	5b                   	pop    ebx
c0015044:	5e                   	pop    esi
c0015045:	5f                   	pop    edi
c0015046:	5d                   	pop    ebp
c0015047:	c3                   	ret    

c0015048 <createPartitionsForDisk(PhysicalDisk*)>:
c0015048:	55                   	push   ebp
c0015049:	57                   	push   edi
c001504a:	56                   	push   esi
c001504b:	53                   	push   ebx
c001504c:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0015052:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0015059:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001505f:	3d 00 02 00 00       	cmp    eax,0x200
c0015064:	74 27                	je     c001508d <createPartitionsForDisk(PhysicalDisk*)+0x45>
c0015066:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c001506c:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c0015072:	83 ec 10             	sub    esp,0x10
c0015075:	0f a4 f7 0a          	shld   edi,esi,0xa
c0015079:	99                   	cdq    
c001507a:	c1 e6 0a             	shl    esi,0xa
c001507d:	52                   	push   edx
c001507e:	89 fd                	mov    ebp,edi
c0015080:	50                   	push   eax
c0015081:	55                   	push   ebp
c0015082:	56                   	push   esi
c0015083:	e8 94 92 00 00       	call   c001e31c <__udivdi3>
c0015088:	e9 b1 00 00 00       	jmp    c001513e <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c001508d:	83 ec 0c             	sub    esp,0xc
c0015090:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015092:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c0015096:	56                   	push   esi
c0015097:	6a 01                	push   0x1
c0015099:	6a 00                	push   0x0
c001509b:	6a 00                	push   0x0
c001509d:	53                   	push   ebx
c001509e:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00150a1:	83 c4 20             	add    esp,0x20
c00150a4:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c00150ac:	75 0a                	jne    c00150b8 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c00150ae:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c00150b6:	74 2c                	je     c00150e4 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c00150b8:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00150be:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00150c4:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00150ca:	83 ec 10             	sub    esp,0x10
c00150cd:	0f a4 c2 0a          	shld   edx,eax,0xa
c00150d1:	89 f7                	mov    edi,esi
c00150d3:	c1 e0 0a             	shl    eax,0xa
c00150d6:	c1 ff 1f             	sar    edi,0x1f
c00150d9:	57                   	push   edi
c00150da:	56                   	push   esi
c00150db:	52                   	push   edx
c00150dc:	50                   	push   eax
c00150dd:	e8 3a 92 00 00       	call   c001e31c <__udivdi3>
c00150e2:	eb 5a                	jmp    c001513e <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c00150e4:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c00150eb:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c00150f2:	83 e1 7f             	and    ecx,0x7f
c00150f5:	83 e0 7f             	and    eax,0x7f
c00150f8:	01 c1                	add    ecx,eax
c00150fa:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0015101:	83 e0 7f             	and    eax,0x7f
c0015104:	01 c1                	add    ecx,eax
c0015106:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c001510d:	83 e0 7f             	and    eax,0x7f
c0015110:	00 c1                	add    cl,al
c0015112:	74 41                	je     c0015155 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c0015114:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c001511a:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0015120:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0015126:	83 ec 10             	sub    esp,0x10
c0015129:	0f a4 c2 0a          	shld   edx,eax,0xa
c001512d:	89 f7                	mov    edi,esi
c001512f:	c1 e0 0a             	shl    eax,0xa
c0015132:	c1 ff 1f             	sar    edi,0x1f
c0015135:	57                   	push   edi
c0015136:	56                   	push   esi
c0015137:	52                   	push   edx
c0015138:	50                   	push   eax
c0015139:	e8 de 91 00 00       	call   c001e31c <__udivdi3>
c001513e:	83 c4 14             	add    esp,0x14
c0015141:	52                   	push   edx
c0015142:	50                   	push   eax
c0015143:	6a 00                	push   0x0
c0015145:	6a 00                	push   0x0
c0015147:	53                   	push   ebx
c0015148:	e8 53 fe ff ff       	call   c0014fa0 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c001514d:	83 c4 20             	add    esp,0x20
c0015150:	e9 79 01 00 00       	jmp    c00152ce <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0015155:	89 f0                	mov    eax,esi
c0015157:	31 f6                	xor    esi,esi
c0015159:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0015160:	75 02                	jne    c0015164 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0015162:	89 f1                	mov    ecx,esi
c0015164:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c001516b:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0015172:	c1 e2 08             	shl    edx,0x8
c0015175:	c1 e7 10             	shl    edi,0x10
c0015178:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0015180:	09 fa                	or     edx,edi
c0015182:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c001518a:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c0015191:	83 c0 10             	add    eax,0x10
c0015194:	09 fa                	or     edx,edi
c0015196:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c001519d:	c1 e7 18             	shl    edi,0x18
c00151a0:	09 fa                	or     edx,edi
c00151a2:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c00151a9:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c00151ad:	c1 e7 10             	shl    edi,0x10
c00151b0:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c00151b7:	c1 e2 08             	shl    edx,0x8
c00151ba:	09 fa                	or     edx,edi
c00151bc:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c00151c3:	09 fa                	or     edx,edi
c00151c5:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c00151cc:	c1 e7 18             	shl    edi,0x18
c00151cf:	09 fa                	or     edx,edi
c00151d1:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c00151d5:	46                   	inc    esi
c00151d6:	83 fe 04             	cmp    esi,0x4
c00151d9:	0f 85 7a ff ff ff    	jne    c0015159 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c00151df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00151e3:	83 f0 01             	xor    eax,0x1
c00151e6:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c00151ea:	75 57                	jne    c0015243 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c00151ec:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00151f0:	83 f0 01             	xor    eax,0x1
c00151f3:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c00151f7:	75 4a                	jne    c0015243 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c00151f9:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00151fd:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0015205:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001520d:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0015213:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0015219:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001521f:	0f a4 c2 0a          	shld   edx,eax,0xa
c0015223:	89 f7                	mov    edi,esi
c0015225:	c1 e0 0a             	shl    eax,0xa
c0015228:	c1 ff 1f             	sar    edi,0x1f
c001522b:	57                   	push   edi
c001522c:	56                   	push   esi
c001522d:	52                   	push   edx
c001522e:	50                   	push   eax
c001522f:	e8 e8 90 00 00       	call   c001e31c <__udivdi3>
c0015234:	83 c4 10             	add    esp,0x10
c0015237:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001523b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001523f:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0015243:	84 c9                	test   cl,cl
c0015245:	74 53                	je     c001529a <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0015247:	0f b6 c9             	movzx  ecx,cl
c001524a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001524e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0015252:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0015256:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001525a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001525e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0015262:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0015266:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c001526a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001526e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0015272:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015276:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001527a:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c001527e:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0015282:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0015286:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c001528a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001528e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0015292:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0015296:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c001529a:	31 ed                	xor    ebp,ebp
c001529c:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c00152a0:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c00152a4:	89 f8                	mov    eax,edi
c00152a6:	09 f0                	or     eax,esi
c00152a8:	74 1e                	je     c00152c8 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c00152aa:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c00152ae:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c00152b2:	89 d1                	mov    ecx,edx
c00152b4:	09 c1                	or     ecx,eax
c00152b6:	74 10                	je     c00152c8 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c00152b8:	83 ec 0c             	sub    esp,0xc
c00152bb:	57                   	push   edi
c00152bc:	56                   	push   esi
c00152bd:	52                   	push   edx
c00152be:	50                   	push   eax
c00152bf:	53                   	push   ebx
c00152c0:	e8 db fc ff ff       	call   c0014fa0 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c00152c5:	83 c4 20             	add    esp,0x20
c00152c8:	45                   	inc    ebp
c00152c9:	83 fd 04             	cmp    ebp,0x4
c00152cc:	75 ce                	jne    c001529c <createPartitionsForDisk(PhysicalDisk*)+0x254>
c00152ce:	81 c4 5c 02 00 00    	add    esp,0x25c
c00152d4:	5b                   	pop    ebx
c00152d5:	5e                   	pop    esi
c00152d6:	5f                   	pop    edi
c00152d7:	5d                   	pop    ebp
c00152d8:	c3                   	ret    
c00152d9:	90                   	nop

c00152da <Timer::Timer(char const*)>:
c00152da:	83 ec 0c             	sub    esp,0xc
c00152dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00152e1:	83 ec 08             	sub    esp,0x8
c00152e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00152e8:	50                   	push   eax
c00152e9:	e8 84 e2 ff ff       	call   c0013572 <Device::Device(char const*)>
c00152ee:	83 c4 10             	add    esp,0x10
c00152f1:	ba dc 15 02 c0       	mov    edx,0xc00215dc
c00152f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00152fa:	89 10                	mov    DWORD PTR [eax],edx
c00152fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015300:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c001530a:	90                   	nop
c001530b:	83 c4 0c             	add    esp,0xc
c001530e:	c3                   	ret    
c001530f:	90                   	nop

c0015310 <Timer::~Timer()>:
c0015310:	83 ec 0c             	sub    esp,0xc
c0015313:	ba dc 15 02 c0       	mov    edx,0xc00215dc
c0015318:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001531c:	89 10                	mov    DWORD PTR [eax],edx
c001531e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015322:	83 ec 0c             	sub    esp,0xc
c0015325:	50                   	push   eax
c0015326:	e8 f9 de ff ff       	call   c0013224 <Device::~Device()>
c001532b:	83 c4 10             	add    esp,0x10
c001532e:	90                   	nop
c001532f:	83 c4 0c             	add    esp,0xc
c0015332:	c3                   	ret    
c0015333:	90                   	nop

c0015334 <Timer::~Timer()>:
c0015334:	83 ec 0c             	sub    esp,0xc
c0015337:	83 ec 0c             	sub    esp,0xc
c001533a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001533e:	e8 cd ff ff ff       	call   c0015310 <Timer::~Timer()>
c0015343:	83 c4 10             	add    esp,0x10
c0015346:	83 ec 08             	sub    esp,0x8
c0015349:	68 5c 01 00 00       	push   0x15c
c001534e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015352:	e8 30 cd ff ff       	call   c0012087 <operator delete(void*, unsigned long)>
c0015357:	83 c4 10             	add    esp,0x10
c001535a:	83 c4 0c             	add    esp,0xc
c001535d:	c3                   	ret    

c001535e <Timer::read()>:
c001535e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015362:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0015368:	c3                   	ret    

c0015369 <timerHandler(unsigned long long)>:
c0015369:	55                   	push   ebp
c001536a:	57                   	push   edi
c001536b:	56                   	push   esi
c001536c:	53                   	push   ebx
c001536d:	83 ec 0c             	sub    esp,0xc
c0015370:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0015374:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0015378:	01 35 90 3a 02 c0    	add    DWORD PTR ds:0xc0023a90,esi
c001537e:	11 3d 94 3a 02 c0    	adc    DWORD PTR ds:0xc0023a94,edi
c0015384:	80 3d cd 30 02 c0 00 	cmp    BYTE PTR ds:0xc00230cd,0x0
c001538b:	0f 84 07 01 00 00    	je     c0015498 <timerHandler(unsigned long long)+0x12f>
c0015391:	e8 fb 8b ff ff       	call   c000df91 <lockStuff()>
c0015396:	83 ec 0c             	sub    esp,0xc
c0015399:	68 04 33 02 c0       	push   0xc0023304
c001539e:	e8 d9 94 00 00       	call   c001e87c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00153a3:	c7 04 24 04 33 02 c0 	mov    DWORD PTR [esp],0xc0023304
c00153aa:	89 c3                	mov    ebx,eax
c00153ac:	e8 01 94 00 00       	call   c001e7b2 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00153b1:	83 c4 10             	add    esp,0x10
c00153b4:	84 c0                	test   al,al
c00153b6:	74 60                	je     c0015418 <timerHandler(unsigned long long)+0xaf>
c00153b8:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00153be:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c00153c1:	85 c0                	test   eax,eax
c00153c3:	0f 85 91 00 00 00    	jne    c001545a <timerHandler(unsigned long long)+0xf1>
c00153c9:	e9 be 00 00 00       	jmp    c001548c <timerHandler(unsigned long long)+0x123>
c00153ce:	83 ec 0c             	sub    esp,0xc
c00153d1:	55                   	push   ebp
c00153d2:	e8 b7 93 ff ff       	call   c000e78e <unblockTask(ThreadControlBlock*)>
c00153d7:	83 c4 10             	add    esp,0x10
c00153da:	39 eb                	cmp    ebx,ebp
c00153dc:	75 12                	jne    c00153f0 <timerHandler(unsigned long long)+0x87>
c00153de:	83 ec 0c             	sub    esp,0xc
c00153e1:	68 04 33 02 c0       	push   0xc0023304
c00153e6:	e8 91 94 00 00       	call   c001e87c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00153eb:	89 c3                	mov    ebx,eax
c00153ed:	83 c4 10             	add    esp,0x10
c00153f0:	83 ec 0c             	sub    esp,0xc
c00153f3:	68 04 33 02 c0       	push   0xc0023304
c00153f8:	e8 b5 93 00 00       	call   c001e7b2 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00153fd:	83 c4 10             	add    esp,0x10
c0015400:	84 c0                	test   al,al
c0015402:	75 b4                	jne    c00153b8 <timerHandler(unsigned long long)+0x4f>
c0015404:	83 ec 0c             	sub    esp,0xc
c0015407:	68 04 33 02 c0       	push   0xc0023304
c001540c:	e8 6b 94 00 00       	call   c001e87c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015411:	83 c4 10             	add    esp,0x10
c0015414:	39 d8                	cmp    eax,ebx
c0015416:	74 a0                	je     c00153b8 <timerHandler(unsigned long long)+0x4f>
c0015418:	83 ec 0c             	sub    esp,0xc
c001541b:	68 04 33 02 c0       	push   0xc0023304
c0015420:	e8 57 94 00 00       	call   c001e87c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015425:	c7 04 24 04 33 02 c0 	mov    DWORD PTR [esp],0xc0023304
c001542c:	89 c5                	mov    ebp,eax
c001542e:	e8 9b 93 00 00       	call   c001e7ce <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015433:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c0015436:	83 c4 10             	add    esp,0x10
c0015439:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c001543c:	39 15 90 3a 02 c0    	cmp    DWORD PTR ds:0xc0023a90,edx
c0015442:	a1 94 3a 02 c0       	mov    eax,ds:0xc0023a94
c0015447:	19 c8                	sbb    eax,ecx
c0015449:	73 83                	jae    c00153ce <timerHandler(unsigned long long)+0x65>
c001544b:	50                   	push   eax
c001544c:	50                   	push   eax
c001544d:	55                   	push   ebp
c001544e:	68 04 33 02 c0       	push   0xc0023304
c0015453:	e8 86 92 00 00       	call   c001e6de <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015458:	eb 93                	jmp    c00153ed <timerHandler(unsigned long long)+0x84>
c001545a:	80 3d cc 30 02 c0 00 	cmp    BYTE PTR ds:0xc00230cc,0x0
c0015461:	74 29                	je     c001548c <timerHandler(unsigned long long)+0x123>
c0015463:	39 c6                	cmp    esi,eax
c0015465:	bb 00 00 00 00       	mov    ebx,0x0
c001546a:	19 df                	sbb    edi,ebx
c001546c:	72 19                	jb     c0015487 <timerHandler(unsigned long long)+0x11e>
c001546e:	e8 f7 8a ff ff       	call   c000df6a <lockScheduler()>
c0015473:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015478:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c001547b:	e8 1e 8e ff ff       	call   c000e29e <schedule()>
c0015480:	e8 e7 8a ff ff       	call   c000df6c <unlockScheduler()>
c0015485:	eb 05                	jmp    c001548c <timerHandler(unsigned long long)+0x123>
c0015487:	29 f0                	sub    eax,esi
c0015489:	89 42 38             	mov    DWORD PTR [edx+0x38],eax
c001548c:	83 c4 0c             	add    esp,0xc
c001548f:	5b                   	pop    ebx
c0015490:	5e                   	pop    esi
c0015491:	5f                   	pop    edi
c0015492:	5d                   	pop    ebp
c0015493:	e9 8b 8e ff ff       	jmp    c000e323 <unlockStuff()>
c0015498:	83 c4 0c             	add    esp,0xc
c001549b:	5b                   	pop    ebx
c001549c:	5e                   	pop    esi
c001549d:	5f                   	pop    edi
c001549e:	5d                   	pop    ebp
c001549f:	c3                   	ret    

c00154a0 <setupTimer(int)>:
c00154a0:	57                   	push   edi
c00154a1:	56                   	push   esi
c00154a2:	53                   	push   ebx
c00154a3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00154a7:	e8 ff 18 00 00       	call   c0016dab <getCPUNumber()>
c00154ac:	85 c0                	test   eax,eax
c00154ae:	74 32                	je     c00154e2 <setupTimer(int)+0x42>
c00154b0:	83 ec 0c             	sub    esp,0xc
c00154b3:	68 60 01 00 00       	push   0x160
c00154b8:	e8 bb cb ff ff       	call   c0012078 <operator new(unsigned long)>
c00154bd:	89 04 24             	mov    DWORD PTR [esp],eax
c00154c0:	89 c3                	mov    ebx,eax
c00154c2:	e8 ef 88 00 00       	call   c001ddb6 <APICTimer::APICTimer()>
c00154c7:	6a 00                	push   0x0
c00154c9:	6a 00                	push   0x0
c00154cb:	56                   	push   esi
c00154cc:	53                   	push   ebx
c00154cd:	e8 ec 87 00 00       	call   c001dcbe <APICTimer::open(int, int, void*)>
c00154d2:	83 c4 20             	add    esp,0x20
c00154d5:	e8 d4 18 00 00       	call   c0016dae <thisCPU()>
c00154da:	56                   	push   esi
c00154db:	56                   	push   esi
c00154dc:	53                   	push   ebx
c00154dd:	e9 96 00 00 00       	jmp    c0015578 <setupTimer(int)+0xd8>
c00154e2:	e8 c7 18 00 00       	call   c0016dae <thisCPU()>
c00154e7:	83 ec 0c             	sub    esp,0xc
c00154ea:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c00154f0:	e8 6f e1 ff ff       	call   c0013664 <Device::getName()>
c00154f5:	83 c4 10             	add    esp,0x10
c00154f8:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00154fb:	0f 85 87 00 00 00    	jne    c0015588 <setupTimer(int)+0xe8>
c0015501:	a1 c8 30 02 c0       	mov    eax,ds:0xc00230c8
c0015506:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c001550d:	74 79                	je     c0015588 <setupTimer(int)+0xe8>
c001550f:	83 ec 0c             	sub    esp,0xc
c0015512:	68 5c 01 00 00       	push   0x15c
c0015517:	e8 5c cb ff ff       	call   c0012078 <operator new(unsigned long)>
c001551c:	89 04 24             	mov    DWORD PTR [esp],eax
c001551f:	89 c3                	mov    ebx,eax
c0015521:	e8 e0 89 00 00       	call   c001df06 <PIT::PIT()>
c0015526:	59                   	pop    ecx
c0015527:	5f                   	pop    edi
c0015528:	53                   	push   ebx
c0015529:	ff 35 c8 30 02 c0    	push   DWORD PTR ds:0xc00230c8
c001552f:	e8 4e de ff ff       	call   c0013382 <Device::addChild(Device*)>
c0015534:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015536:	6a 00                	push   0x0
c0015538:	6a 00                	push   0x0
c001553a:	56                   	push   esi
c001553b:	53                   	push   ebx
c001553c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001553f:	83 c4 14             	add    esp,0x14
c0015542:	68 60 01 00 00       	push   0x160
c0015547:	e8 2c cb ff ff       	call   c0012078 <operator new(unsigned long)>
c001554c:	89 04 24             	mov    DWORD PTR [esp],eax
c001554f:	89 c7                	mov    edi,eax
c0015551:	e8 60 88 00 00       	call   c001ddb6 <APICTimer::APICTimer()>
c0015556:	6a 00                	push   0x0
c0015558:	6a 00                	push   0x0
c001555a:	56                   	push   esi
c001555b:	57                   	push   edi
c001555c:	e8 5d 87 00 00       	call   c001dcbe <APICTimer::open(int, int, void*)>
c0015561:	83 c4 20             	add    esp,0x20
c0015564:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015566:	6a 00                	push   0x0
c0015568:	6a 00                	push   0x0
c001556a:	6a 00                	push   0x0
c001556c:	53                   	push   ebx
c001556d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015570:	e8 39 18 00 00       	call   c0016dae <thisCPU()>
c0015575:	5a                   	pop    edx
c0015576:	59                   	pop    ecx
c0015577:	57                   	push   edi
c0015578:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c001557e:	e8 ff dd ff ff       	call   c0013382 <Device::addChild(Device*)>
c0015583:	83 c4 10             	add    esp,0x10
c0015586:	eb 33                	jmp    c00155bb <setupTimer(int)+0x11b>
c0015588:	83 ec 0c             	sub    esp,0xc
c001558b:	68 5c 01 00 00       	push   0x15c
c0015590:	e8 e3 ca ff ff       	call   c0012078 <operator new(unsigned long)>
c0015595:	89 04 24             	mov    DWORD PTR [esp],eax
c0015598:	89 c3                	mov    ebx,eax
c001559a:	e8 67 89 00 00       	call   c001df06 <PIT::PIT()>
c001559f:	58                   	pop    eax
c00155a0:	5a                   	pop    edx
c00155a1:	53                   	push   ebx
c00155a2:	ff 35 c8 30 02 c0    	push   DWORD PTR ds:0xc00230c8
c00155a8:	e8 d5 dd ff ff       	call   c0013382 <Device::addChild(Device*)>
c00155ad:	8b 03                	mov    eax,DWORD PTR [ebx]
c00155af:	6a 00                	push   0x0
c00155b1:	6a 00                	push   0x0
c00155b3:	56                   	push   esi
c00155b4:	53                   	push   ebx
c00155b5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00155b8:	83 c4 20             	add    esp,0x20
c00155bb:	89 d8                	mov    eax,ebx
c00155bd:	5b                   	pop    ebx
c00155be:	5e                   	pop    esi
c00155bf:	5f                   	pop    edi
c00155c0:	c3                   	ret    
c00155c1:	90                   	nop

c00155c2 <VCache::VCache(PhysicalDisk*)>:
c00155c2:	53                   	push   ebx
c00155c3:	83 ec 08             	sub    esp,0x8
c00155c6:	ba 0c 16 02 c0       	mov    edx,0xc002160c
c00155cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00155cf:	89 10                	mov    DWORD PTR [eax],edx
c00155d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00155d5:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c00155dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00155e0:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c00155e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00155eb:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c00155f2:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00155f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00155fd:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0015604:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001560b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001560f:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0015616:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001561a:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c001561e:	83 ec 0c             	sub    esp,0xc
c0015621:	6a 10                	push   0x10
c0015623:	e8 50 ca ff ff       	call   c0012078 <operator new(unsigned long)>
c0015628:	83 c4 10             	add    esp,0x10
c001562b:	89 c3                	mov    ebx,eax
c001562d:	83 ec 0c             	sub    esp,0xc
c0015630:	53                   	push   ebx
c0015631:	e8 4c 8a ff ff       	call   c000e082 <Mutex::Mutex()>
c0015636:	83 c4 10             	add    esp,0x10
c0015639:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001563d:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0015640:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015644:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0015648:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001564b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001564f:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0015656:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001565a:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0015660:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015664:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0015667:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001566b:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0015671:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0015677:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001567b:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c001567e:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c0015681:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015685:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0015689:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001568d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0015693:	c1 e0 06             	shl    eax,0x6
c0015696:	83 ec 0c             	sub    esp,0xc
c0015699:	50                   	push   eax
c001569a:	e8 24 7a ff ff       	call   c000d0c3 <malloc>
c001569f:	83 c4 10             	add    esp,0x10
c00156a2:	89 c2                	mov    edx,eax
c00156a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00156a8:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00156ab:	90                   	nop
c00156ac:	83 c4 08             	add    esp,0x8
c00156af:	5b                   	pop    ebx
c00156b0:	c3                   	ret    
c00156b1:	90                   	nop

c00156b2 <VCache::writeWriteBuffer()>:
c00156b2:	53                   	push   ebx
c00156b3:	83 ec 14             	sub    esp,0x14
c00156b6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00156ba:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00156bd:	8b 10                	mov    edx,DWORD PTR [eax]
c00156bf:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00156c2:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00156c5:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00156c8:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00156cb:	50                   	push   eax
c00156cc:	ff 52 28             	call   DWORD PTR [edx+0x28]
c00156cf:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00156d6:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00156dd:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c00156e1:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c00156e8:	83 c4 28             	add    esp,0x28
c00156eb:	5b                   	pop    ebx
c00156ec:	c3                   	ret    
c00156ed:	90                   	nop

c00156ee <VCache::~VCache()>:
c00156ee:	83 ec 0c             	sub    esp,0xc
c00156f1:	ba 0c 16 02 c0       	mov    edx,0xc002160c
c00156f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00156fa:	89 10                	mov    DWORD PTR [eax],edx
c00156fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015700:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0015703:	84 c0                	test   al,al
c0015705:	74 0f                	je     c0015716 <VCache::~VCache()+0x28>
c0015707:	83 ec 0c             	sub    esp,0xc
c001570a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001570e:	e8 9f ff ff ff       	call   c00156b2 <VCache::writeWriteBuffer()>
c0015713:	83 c4 10             	add    esp,0x10
c0015716:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001571a:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001571d:	83 ec 0c             	sub    esp,0xc
c0015720:	50                   	push   eax
c0015721:	e8 ad 79 ff ff       	call   c000d0d3 <free>
c0015726:	83 c4 10             	add    esp,0x10
c0015729:	90                   	nop
c001572a:	83 c4 0c             	add    esp,0xc
c001572d:	c3                   	ret    

c001572e <VCache::~VCache()>:
c001572e:	83 ec 0c             	sub    esp,0xc
c0015731:	83 ec 0c             	sub    esp,0xc
c0015734:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015738:	e8 b1 ff ff ff       	call   c00156ee <VCache::~VCache()>
c001573d:	83 c4 10             	add    esp,0x10
c0015740:	83 ec 08             	sub    esp,0x8
c0015743:	6a 30                	push   0x30
c0015745:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015749:	e8 39 c9 ff ff       	call   c0012087 <operator delete(void*, unsigned long)>
c001574e:	83 c4 10             	add    esp,0x10
c0015751:	83 c4 0c             	add    esp,0xc
c0015754:	c3                   	ret    
c0015755:	90                   	nop

c0015756 <VCache::write(unsigned long long, int, void*)>:
c0015756:	55                   	push   ebp
c0015757:	57                   	push   edi
c0015758:	56                   	push   esi
c0015759:	53                   	push   ebx
c001575a:	83 ec 28             	sub    esp,0x28
c001575d:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0015761:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0015765:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0015769:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001576d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0015770:	e8 e1 8e ff ff       	call   c000e656 <Semaphore::acquire()>
c0015775:	83 c4 10             	add    esp,0x10
c0015778:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c001577c:	74 66                	je     c00157e4 <VCache::write(unsigned long long, int, void*)+0x8e>
c001577e:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0015781:	99                   	cdq    
c0015782:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015786:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c0015789:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c001578c:	89 c1                	mov    ecx,eax
c001578e:	89 d0                	mov    eax,edx
c0015790:	31 f1                	xor    ecx,esi
c0015792:	31 f8                	xor    eax,edi
c0015794:	89 ca                	mov    edx,ecx
c0015796:	09 c2                	or     edx,eax
c0015798:	75 3e                	jne    c00157d8 <VCache::write(unsigned long long, int, void*)+0x82>
c001579a:	83 fd 01             	cmp    ebp,0x1
c001579d:	75 39                	jne    c00157d8 <VCache::write(unsigned long long, int, void*)+0x82>
c001579f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00157a2:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00157a8:	51                   	push   ecx
c00157a9:	50                   	push   eax
c00157aa:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00157ae:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00157b2:	0f af c8             	imul   ecx,eax
c00157b5:	03 4b 28             	add    ecx,DWORD PTR [ebx+0x28]
c00157b8:	51                   	push   ecx
c00157b9:	e8 14 ae fe ff       	call   c00005d2 <memcpy>
c00157be:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00157c1:	83 c4 10             	add    esp,0x10
c00157c4:	40                   	inc    eax
c00157c5:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c00157c8:	83 f8 40             	cmp    eax,0x40
c00157cb:	75 57                	jne    c0015824 <VCache::write(unsigned long long, int, void*)+0xce>
c00157cd:	83 ec 0c             	sub    esp,0xc
c00157d0:	53                   	push   ebx
c00157d1:	e8 dc fe ff ff       	call   c00156b2 <VCache::writeWriteBuffer()>
c00157d6:	eb 34                	jmp    c001580c <VCache::write(unsigned long long, int, void*)+0xb6>
c00157d8:	83 ec 0c             	sub    esp,0xc
c00157db:	53                   	push   ebx
c00157dc:	e8 d1 fe ff ff       	call   c00156b2 <VCache::writeWriteBuffer()>
c00157e1:	83 c4 10             	add    esp,0x10
c00157e4:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00157e7:	83 fd 3f             	cmp    ebp,0x3f
c00157ea:	7f 25                	jg     c0015811 <VCache::write(unsigned long long, int, void*)+0xbb>
c00157ec:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00157ef:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c00157f2:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c00157f5:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c00157f9:	52                   	push   edx
c00157fa:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0015800:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0015804:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0015807:	e8 c6 ad fe ff       	call   c00005d2 <memcpy>
c001580c:	83 c4 10             	add    esp,0x10
c001580f:	eb 13                	jmp    c0015824 <VCache::write(unsigned long long, int, void*)+0xce>
c0015811:	83 ec 0c             	sub    esp,0xc
c0015814:	8b 10                	mov    edx,DWORD PTR [eax]
c0015816:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001581a:	55                   	push   ebp
c001581b:	57                   	push   edi
c001581c:	56                   	push   esi
c001581d:	50                   	push   eax
c001581e:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0015821:	83 c4 20             	add    esp,0x20
c0015824:	83 ec 0c             	sub    esp,0xc
c0015827:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001582a:	e8 c3 93 ff ff       	call   c000ebf2 <Semaphore::release()>
c001582f:	83 c4 2c             	add    esp,0x2c
c0015832:	31 c0                	xor    eax,eax
c0015834:	5b                   	pop    ebx
c0015835:	5e                   	pop    esi
c0015836:	5f                   	pop    edi
c0015837:	5d                   	pop    ebp
c0015838:	c3                   	ret    
c0015839:	90                   	nop

c001583a <VCache::read(unsigned long long, int, void*)>:
c001583a:	57                   	push   edi
c001583b:	56                   	push   esi
c001583c:	53                   	push   ebx
c001583d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015841:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0015845:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0015849:	83 ec 0c             	sub    esp,0xc
c001584c:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001584f:	e8 02 8e ff ff       	call   c000e656 <Semaphore::acquire()>
c0015854:	83 c4 10             	add    esp,0x10
c0015857:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c001585b:	74 0c                	je     c0015869 <VCache::read(unsigned long long, int, void*)+0x2f>
c001585d:	83 ec 0c             	sub    esp,0xc
c0015860:	53                   	push   ebx
c0015861:	e8 4c fe ff ff       	call   c00156b2 <VCache::writeWriteBuffer()>
c0015866:	83 c4 10             	add    esp,0x10
c0015869:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001586c:	83 ec 0c             	sub    esp,0xc
c001586f:	8b 10                	mov    edx,DWORD PTR [eax]
c0015871:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015875:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015879:	57                   	push   edi
c001587a:	56                   	push   esi
c001587b:	50                   	push   eax
c001587c:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001587f:	83 c4 14             	add    esp,0x14
c0015882:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0015885:	e8 68 93 ff ff       	call   c000ebf2 <Semaphore::release()>
c001588a:	83 c4 10             	add    esp,0x10
c001588d:	31 c0                	xor    eax,eax
c001588f:	5b                   	pop    ebx
c0015890:	5e                   	pop    esi
c0015891:	5f                   	pop    edi
c0015892:	c3                   	ret    
c0015893:	90                   	nop

c0015894 <Video::putrect(int, int, int, int, unsigned int)>:
c0015894:	55                   	push   ebp
c0015895:	57                   	push   edi
c0015896:	56                   	push   esi
c0015897:	53                   	push   ebx
c0015898:	83 ec 1c             	sub    esp,0x1c
c001589b:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001589f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00158a3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00158a7:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00158ab:	01 e8                	add    eax,ebp
c00158ad:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00158b1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00158b5:	01 df                	add    edi,ebx
c00158b7:	39 fb                	cmp    ebx,edi
c00158b9:	7d 1b                	jge    c00158d6 <Video::putrect(int, int, int, int, unsigned int)+0x42>
c00158bb:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00158bf:	7d 12                	jge    c00158d3 <Video::putrect(int, int, int, int, unsigned int)+0x3f>
c00158c1:	8b 16                	mov    edx,DWORD PTR [esi]
c00158c3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00158c7:	53                   	push   ebx
c00158c8:	55                   	push   ebp
c00158c9:	45                   	inc    ebp
c00158ca:	56                   	push   esi
c00158cb:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00158ce:	83 c4 10             	add    esp,0x10
c00158d1:	eb e8                	jmp    c00158bb <Video::putrect(int, int, int, int, unsigned int)+0x27>
c00158d3:	43                   	inc    ebx
c00158d4:	eb e1                	jmp    c00158b7 <Video::putrect(int, int, int, int, unsigned int)+0x23>
c00158d6:	83 c4 1c             	add    esp,0x1c
c00158d9:	5b                   	pop    ebx
c00158da:	5e                   	pop    esi
c00158db:	5f                   	pop    edi
c00158dc:	5d                   	pop    ebp
c00158dd:	c3                   	ret    

c00158de <Video::blit(unsigned int*, int, int, int, int)>:
c00158de:	55                   	push   ebp
c00158df:	57                   	push   edi
c00158e0:	56                   	push   esi
c00158e1:	53                   	push   ebx
c00158e2:	83 ec 1c             	sub    esp,0x1c
c00158e5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00158e9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00158ed:	85 c0                	test   eax,eax
c00158ef:	79 02                	jns    c00158f3 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c00158f1:	31 c0                	xor    eax,eax
c00158f3:	c1 e0 02             	shl    eax,0x2
c00158f6:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00158fa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00158fe:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0015902:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0015906:	39 d8                	cmp    eax,ebx
c0015908:	7e 49                	jle    c0015953 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c001590a:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0015910:	7c 41                	jl     c0015953 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0015912:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0015916:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001591a:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001591e:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0015922:	39 f9                	cmp    ecx,edi
c0015924:	7e 22                	jle    c0015948 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c0015926:	83 c5 04             	add    ebp,0x4
c0015929:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c001592f:	7c 14                	jl     c0015945 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c0015931:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0015933:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0015936:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001593a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001593e:	56                   	push   esi
c001593f:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0015942:	83 c4 10             	add    esp,0x10
c0015945:	47                   	inc    edi
c0015946:	eb d2                	jmp    c001591a <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0015948:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001594c:	43                   	inc    ebx
c001594d:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0015951:	eb ab                	jmp    c00158fe <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0015953:	83 c4 1c             	add    esp,0x1c
c0015956:	5b                   	pop    ebx
c0015957:	5e                   	pop    esi
c0015958:	5f                   	pop    edi
c0015959:	5d                   	pop    ebp
c001595a:	c3                   	ret    
c001595b:	90                   	nop

c001595c <Video::clearScreen(unsigned int)>:
c001595c:	57                   	push   edi
c001595d:	56                   	push   esi
c001595e:	53                   	push   ebx
c001595f:	31 db                	xor    ebx,ebx
c0015961:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015965:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c001596b:	7e 1f                	jle    c001598c <Video::clearScreen(unsigned int)+0x30>
c001596d:	31 ff                	xor    edi,edi
c001596f:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0015975:	7e 12                	jle    c0015989 <Video::clearScreen(unsigned int)+0x2d>
c0015977:	8b 06                	mov    eax,DWORD PTR [esi]
c0015979:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001597d:	53                   	push   ebx
c001597e:	57                   	push   edi
c001597f:	47                   	inc    edi
c0015980:	56                   	push   esi
c0015981:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0015984:	83 c4 10             	add    esp,0x10
c0015987:	eb e6                	jmp    c001596f <Video::clearScreen(unsigned int)+0x13>
c0015989:	43                   	inc    ebx
c001598a:	eb d9                	jmp    c0015965 <Video::clearScreen(unsigned int)+0x9>
c001598c:	5b                   	pop    ebx
c001598d:	5e                   	pop    esi
c001598e:	5f                   	pop    edi
c001598f:	c3                   	ret    

c0015990 <Video::putpixel(int, int, unsigned int)>:
c0015990:	c7 44 24 04 14 16 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021614
c0015998:	e9 2b 71 ff ff       	jmp    c000cac8 <kprintf(char const*, ...)>
c001599d:	90                   	nop

c001599e <Video::Video(char const*)>:
c001599e:	83 ec 0c             	sub    esp,0xc
c00159a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00159a5:	83 ec 08             	sub    esp,0x8
c00159a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00159ac:	50                   	push   eax
c00159ad:	e8 c0 db ff ff       	call   c0013572 <Device::Device(char const*)>
c00159b2:	83 c4 10             	add    esp,0x10
c00159b5:	ba 2c 16 02 c0       	mov    edx,0xc002162c
c00159ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00159be:	89 10                	mov    DWORD PTR [eax],edx
c00159c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00159c4:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c00159ce:	90                   	nop
c00159cf:	83 c4 0c             	add    esp,0xc
c00159d2:	c3                   	ret    
c00159d3:	90                   	nop

c00159d4 <Video::~Video()>:
c00159d4:	83 ec 0c             	sub    esp,0xc
c00159d7:	ba 2c 16 02 c0       	mov    edx,0xc002162c
c00159dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00159e0:	89 10                	mov    DWORD PTR [eax],edx
c00159e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00159e6:	83 ec 0c             	sub    esp,0xc
c00159e9:	50                   	push   eax
c00159ea:	e8 35 d8 ff ff       	call   c0013224 <Device::~Device()>
c00159ef:	83 c4 10             	add    esp,0x10
c00159f2:	90                   	nop
c00159f3:	83 c4 0c             	add    esp,0xc
c00159f6:	c3                   	ret    
c00159f7:	90                   	nop

c00159f8 <Video::~Video()>:
c00159f8:	83 ec 0c             	sub    esp,0xc
c00159fb:	83 ec 0c             	sub    esp,0xc
c00159fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015a02:	e8 cd ff ff ff       	call   c00159d4 <Video::~Video()>
c0015a07:	83 c4 10             	add    esp,0x10
c0015a0a:	83 ec 08             	sub    esp,0x8
c0015a0d:	68 64 01 00 00       	push   0x164
c0015a12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015a16:	e8 6c c6 ff ff       	call   c0012087 <operator delete(void*, unsigned long)>
c0015a1b:	83 c4 10             	add    esp,0x10
c0015a1e:	83 c4 0c             	add    esp,0xc
c0015a21:	c3                   	ret    

c0015a22 <Video::isMonochrome()>:
c0015a22:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015a26:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c0015a2c:	c3                   	ret    
c0015a2d:	90                   	nop

c0015a2e <Video::getWidth()>:
c0015a2e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015a32:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0015a38:	c3                   	ret    
c0015a39:	90                   	nop

c0015a3a <Video::getHeight()>:
c0015a3a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015a3e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0015a44:	c3                   	ret    
c0015a45:	90                   	nop

c0015a46 <Video::drawCursor(int, int, unsigned char*, int)>:
c0015a46:	55                   	push   ebp
c0015a47:	57                   	push   edi
c0015a48:	56                   	push   esi
c0015a49:	53                   	push   ebx
c0015a4a:	83 ec 2c             	sub    esp,0x2c
c0015a4d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0015a51:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0015a55:	83 f8 01             	cmp    eax,0x1
c0015a58:	19 c9                	sbb    ecx,ecx
c0015a5a:	31 db                	xor    ebx,ebx
c0015a5c:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0015a60:	89 cd                	mov    ebp,ecx
c0015a62:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c0015a6a:	f7 d5                	not    ebp
c0015a6c:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c0015a72:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0015a76:	01 d8                	add    eax,ebx
c0015a78:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015a7c:	56                   	push   esi
c0015a7d:	e8 b8 ff ff ff       	call   c0015a3a <Video::getHeight()>
c0015a82:	59                   	pop    ecx
c0015a83:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0015a87:	7e 70                	jle    c0015af9 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c0015a89:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0015a8d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0015a91:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0015a94:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015a98:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0015a9c:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c0015aa3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015aa7:	89 f8                	mov    eax,edi
c0015aa9:	83 c0 20             	add    eax,0x20
c0015aac:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015ab0:	56                   	push   esi
c0015ab1:	e8 78 ff ff ff       	call   c0015a2e <Video::getWidth()>
c0015ab6:	5a                   	pop    edx
c0015ab7:	39 c7                	cmp    edi,eax
c0015ab9:	7d 34                	jge    c0015aef <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c0015abb:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c0015ac0:	74 05                	je     c0015ac7 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c0015ac2:	8b 06                	mov    eax,DWORD PTR [esi]
c0015ac4:	55                   	push   ebp
c0015ac5:	eb 0d                	jmp    c0015ad4 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c0015ac7:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c0015acc:	74 12                	je     c0015ae0 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c0015ace:	8b 06                	mov    eax,DWORD PTR [esi]
c0015ad0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015ad4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015ad8:	57                   	push   edi
c0015ad9:	56                   	push   esi
c0015ada:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0015add:	83 c4 10             	add    esp,0x10
c0015ae0:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c0015ae4:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c0015ae8:	47                   	inc    edi
c0015ae9:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0015aed:	75 c1                	jne    c0015ab0 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c0015aef:	43                   	inc    ebx
c0015af0:	83 fb 20             	cmp    ebx,0x20
c0015af3:	0f 85 79 ff ff ff    	jne    c0015a72 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c0015af9:	83 c4 2c             	add    esp,0x2c
c0015afc:	5b                   	pop    ebx
c0015afd:	5e                   	pop    esi
c0015afe:	5f                   	pop    edi
c0015aff:	5d                   	pop    ebp
c0015b00:	c3                   	ret    
c0015b01:	90                   	nop

c0015b02 <ACPI::close(int, int, void*)>:
c0015b02:	83 ec 1c             	sub    esp,0x1c
c0015b05:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c0015b0d:	74 0a                	je     c0015b19 <ACPI::close(int, int, void*)+0x17>
c0015b0f:	b8 00 00 00 00       	mov    eax,0x0
c0015b14:	e9 9a 00 00 00       	jmp    c0015bb3 <ACPI::close(int, int, void*)+0xb1>
c0015b19:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0015b1e:	75 37                	jne    c0015b57 <ACPI::close(int, int, void*)+0x55>
c0015b20:	83 ec 0c             	sub    esp,0xc
c0015b23:	68 64 16 02 c0       	push   0xc0021664
c0015b28:	e8 9b 6f ff ff       	call   c000cac8 <kprintf(char const*, ...)>
c0015b2d:	83 c4 10             	add    esp,0x10
c0015b30:	a1 a8 3a 02 c0       	mov    eax,ds:0xc0023aa8
c0015b35:	85 c0                	test   eax,eax
c0015b37:	74 07                	je     c0015b40 <ACPI::close(int, int, void*)+0x3e>
c0015b39:	a1 a8 3a 02 c0       	mov    eax,ds:0xc0023aa8
c0015b3e:	ff d0                	call   eax
c0015b40:	83 ec 0c             	sub    esp,0xc
c0015b43:	68 18 17 02 c0       	push   0xc0021718
c0015b48:	e8 99 70 ff ff       	call   c000cbe6 <panic(char const*)>
c0015b4d:	83 c4 10             	add    esp,0x10
c0015b50:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015b55:	eb 5c                	jmp    c0015bb3 <ACPI::close(int, int, void*)+0xb1>
c0015b57:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0015b5c:	75 50                	jne    c0015bae <ACPI::close(int, int, void*)+0xac>
c0015b5e:	a1 a4 3a 02 c0       	mov    eax,ds:0xc0023aa4
c0015b63:	85 c0                	test   eax,eax
c0015b65:	74 07                	je     c0015b6e <ACPI::close(int, int, void*)+0x6c>
c0015b67:	a1 a4 3a 02 c0       	mov    eax,ds:0xc0023aa4
c0015b6c:	ff d0                	call   eax
c0015b6e:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c0015b73:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0015b78:	83 e0 02             	and    eax,0x2
c0015b7b:	74 1c                	je     c0015b99 <ACPI::close(int, int, void*)+0x97>
c0015b7d:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c0015b84:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015b88:	89 c2                	mov    edx,eax
c0015b8a:	ec                   	in     al,dx
c0015b8b:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0015b8f:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0015b93:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0015b97:	eb da                	jmp    c0015b73 <ACPI::close(int, int, void*)+0x71>
c0015b99:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c0015ba0:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c0015ba5:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0015ba9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015bad:	ee                   	out    dx,al
c0015bae:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015bb3:	83 c4 1c             	add    esp,0x1c
c0015bb6:	c3                   	ret    

c0015bb7 <findRSDP()>:
c0015bb7:	83 ec 1c             	sub    esp,0x1c
c0015bba:	a1 c8 30 02 c0       	mov    eax,ds:0xc00230c8
c0015bbf:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0015bc5:	83 e0 04             	and    eax,0x4
c0015bc8:	84 c0                	test   al,al
c0015bca:	75 07                	jne    c0015bd3 <findRSDP()+0x1c>
c0015bcc:	b8 00 00 00 00       	mov    eax,0x0
c0015bd1:	eb 6a                	jmp    c0015c3d <findRSDP()+0x86>
c0015bd3:	a1 90 32 02 c0       	mov    eax,ds:0xc0023290
c0015bd8:	3d ff 07 00 00       	cmp    eax,0x7ff
c0015bdd:	7f 1b                	jg     c0015bfa <findRSDP()+0x43>
c0015bdf:	a1 c8 30 02 c0       	mov    eax,ds:0xc00230c8
c0015be4:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0015bea:	83 e2 fb             	and    edx,0xfffffffb
c0015bed:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0015bf3:	b8 00 00 00 00       	mov    eax,0x0
c0015bf8:	eb 43                	jmp    c0015c3d <findRSDP()+0x86>
c0015bfa:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0015c02:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0015c0a:	77 2c                	ja     c0015c38 <findRSDP()+0x81>
c0015c0c:	83 ec 04             	sub    esp,0x4
c0015c0f:	6a 08                	push   0x8
c0015c11:	68 71 16 02 c0       	push   0xc0021671
c0015c16:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015c1a:	e8 50 a9 fe ff       	call   c000056f <memcmp>
c0015c1f:	83 c4 10             	add    esp,0x10
c0015c22:	85 c0                	test   eax,eax
c0015c24:	0f 94 c0             	sete   al
c0015c27:	84 c0                	test   al,al
c0015c29:	74 06                	je     c0015c31 <findRSDP()+0x7a>
c0015c2b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015c2f:	eb 0c                	jmp    c0015c3d <findRSDP()+0x86>
c0015c31:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0015c36:	eb ca                	jmp    c0015c02 <findRSDP()+0x4b>
c0015c38:	b8 00 00 00 00       	mov    eax,0x0
c0015c3d:	83 c4 1c             	add    esp,0x1c
c0015c40:	c3                   	ret    

c0015c41 <loadACPITables(unsigned char*)>:
c0015c41:	56                   	push   esi
c0015c42:	53                   	push   ebx
c0015c43:	83 ec 44             	sub    esp,0x44
c0015c46:	a1 c8 30 02 c0       	mov    eax,ds:0xc00230c8
c0015c4b:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0015c51:	83 e0 04             	and    eax,0x4
c0015c54:	84 c0                	test   al,al
c0015c56:	0f 84 05 02 00 00    	je     c0015e61 <loadACPITables(unsigned char*)+0x220>
c0015c5c:	a0 c0 3c 02 c0       	mov    al,ds:0xc0023cc0
c0015c61:	84 c0                	test   al,al
c0015c63:	74 75                	je     c0015cda <loadACPITables(unsigned char*)+0x99>
c0015c65:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0015c69:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0015c6d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015c71:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0015c74:	83 e8 24             	sub    eax,0x24
c0015c77:	c1 e8 03             	shr    eax,0x3
c0015c7a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0015c7e:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0015c86:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0015c8a:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0015c8e:	0f 8d b2 00 00 00    	jge    c0015d46 <loadACPITables(unsigned char*)+0x105>
c0015c94:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0015c98:	83 c0 24             	add    eax,0x24
c0015c9b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0015c9f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015ca3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0015ca7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0015cab:	c1 e0 03             	shl    eax,0x3
c0015cae:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
c0015cb2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0015cb6:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0015cb9:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cbb:	89 c1                	mov    ecx,eax
c0015cbd:	a1 ac 3a 02 c0       	mov    eax,ds:0xc0023aac
c0015cc2:	8d 50 01             	lea    edx,[eax+0x1]
c0015cc5:	89 15 ac 3a 02 c0    	mov    DWORD PTR ds:0xc0023aac,edx
c0015ccb:	89 ca                	mov    edx,ecx
c0015ccd:	89 14 c5 c4 3a 02 c0 	mov    DWORD PTR [eax*8-0x3ffdc53c],edx
c0015cd4:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c0015cd8:	eb ac                	jmp    c0015c86 <loadACPITables(unsigned char*)+0x45>
c0015cda:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0015cde:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0015ce2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015ce6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0015ce9:	83 e8 24             	sub    eax,0x24
c0015cec:	c1 e8 02             	shr    eax,0x2
c0015cef:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015cf3:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c0015cfb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0015cff:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c0015d03:	7d 41                	jge    c0015d46 <loadACPITables(unsigned char*)+0x105>
c0015d05:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0015d09:	83 c0 24             	add    eax,0x24
c0015d0c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015d10:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015d14:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015d18:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0015d1c:	c1 e0 02             	shl    eax,0x2
c0015d1f:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c0015d23:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015d27:	8b 08                	mov    ecx,DWORD PTR [eax]
c0015d29:	a1 ac 3a 02 c0       	mov    eax,ds:0xc0023aac
c0015d2e:	8d 50 01             	lea    edx,[eax+0x1]
c0015d31:	89 15 ac 3a 02 c0    	mov    DWORD PTR ds:0xc0023aac,edx
c0015d37:	89 ca                	mov    edx,ecx
c0015d39:	89 14 c5 c4 3a 02 c0 	mov    DWORD PTR [eax*8-0x3ffdc53c],edx
c0015d40:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0015d44:	eb b5                	jmp    c0015cfb <loadACPITables(unsigned char*)+0xba>
c0015d46:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c0015d4e:	a1 ac 3a 02 c0       	mov    eax,ds:0xc0023aac
c0015d53:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
c0015d57:	0f 8d 05 01 00 00    	jge    c0015e62 <loadACPITables(unsigned char*)+0x221>
c0015d5d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015d61:	8b 04 c5 c4 3a 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdc53c]
c0015d68:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015d6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d70:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015d74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d78:	25 ff 0f 00 00       	and    eax,0xfff
c0015d7d:	89 c6                	mov    esi,eax
c0015d7f:	e8 f3 b2 ff ff       	call   c0011077 <Virt::getAKernelVAS()>
c0015d84:	89 c3                	mov    ebx,eax
c0015d86:	83 ec 0c             	sub    esp,0xc
c0015d89:	6a 01                	push   0x1
c0015d8b:	e8 57 b1 ff ff       	call   c0010ee7 <Virt::allocateKernelVirtualPages(int)>
c0015d90:	83 c4 10             	add    esp,0x10
c0015d93:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015d97:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0015d9d:	83 ec 0c             	sub    esp,0xc
c0015da0:	6a 01                	push   0x1
c0015da2:	6a 01                	push   0x1
c0015da4:	50                   	push   eax
c0015da5:	52                   	push   edx
c0015da6:	53                   	push   ebx
c0015da7:	e8 5e ba ff ff       	call   c001180a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0015dac:	83 c4 20             	add    esp,0x20
c0015daf:	09 f0                	or     eax,esi
c0015db1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015db5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015db9:	c1 e0 03             	shl    eax,0x3
c0015dbc:	05 c0 3a 02 c0       	add    eax,0xc0023ac0
c0015dc1:	83 ec 04             	sub    esp,0x4
c0015dc4:	6a 04                	push   0x4
c0015dc6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015dca:	50                   	push   eax
c0015dcb:	e8 02 a8 fe ff       	call   c00005d2 <memcpy>
c0015dd0:	83 c4 10             	add    esp,0x10
c0015dd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015dd7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0015dda:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015dde:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015de2:	05 00 10 00 00       	add    eax,0x1000
c0015de7:	c1 e8 0c             	shr    eax,0xc
c0015dea:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015dee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015df2:	89 04 24             	mov    DWORD PTR [esp],eax
c0015df5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015df9:	25 ff 0f 00 00       	and    eax,0xfff
c0015dfe:	89 c6                	mov    esi,eax
c0015e00:	e8 72 b2 ff ff       	call   c0011077 <Virt::getAKernelVAS()>
c0015e05:	89 c3                	mov    ebx,eax
c0015e07:	83 ec 0c             	sub    esp,0xc
c0015e0a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015e0e:	e8 d4 b0 ff ff       	call   c0010ee7 <Virt::allocateKernelVirtualPages(int)>
c0015e13:	83 c4 10             	add    esp,0x10
c0015e16:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015e1a:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0015e20:	83 ec 0c             	sub    esp,0xc
c0015e23:	6a 01                	push   0x1
c0015e25:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015e29:	50                   	push   eax
c0015e2a:	52                   	push   edx
c0015e2b:	53                   	push   ebx
c0015e2c:	e8 d9 b9 ff ff       	call   c001180a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0015e31:	83 c4 20             	add    esp,0x20
c0015e34:	09 f0                	or     eax,esi
c0015e36:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015e3a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0015e3d:	83 ec 0c             	sub    esp,0xc
c0015e40:	50                   	push   eax
c0015e41:	e8 d7 b3 ff ff       	call   c001121d <Virt::freeKernelVirtualPages(unsigned long)>
c0015e46:	83 c4 10             	add    esp,0x10
c0015e49:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015e4d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015e51:	89 14 c5 c4 3a 02 c0 	mov    DWORD PTR [eax*8-0x3ffdc53c],edx
c0015e58:	ff 44 24 34          	inc    DWORD PTR [esp+0x34]
c0015e5c:	e9 ed fe ff ff       	jmp    c0015d4e <loadACPITables(unsigned char*)+0x10d>
c0015e61:	90                   	nop
c0015e62:	83 c4 44             	add    esp,0x44
c0015e65:	5b                   	pop    ebx
c0015e66:	5e                   	pop    esi
c0015e67:	c3                   	ret    

c0015e68 <findRSDT(unsigned char*)>:
c0015e68:	56                   	push   esi
c0015e69:	53                   	push   ebx
c0015e6a:	83 ec 44             	sub    esp,0x44
c0015e6d:	a1 c8 30 02 c0       	mov    eax,ds:0xc00230c8
c0015e72:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0015e78:	83 e0 04             	and    eax,0x4
c0015e7b:	84 c0                	test   al,al
c0015e7d:	75 0a                	jne    c0015e89 <findRSDT(unsigned char*)+0x21>
c0015e7f:	b8 00 00 00 00       	mov    eax,0x0
c0015e84:	e9 f7 00 00 00       	jmp    c0015f80 <findRSDT(unsigned char*)+0x118>
c0015e89:	83 ec 04             	sub    esp,0x4
c0015e8c:	6a 24                	push   0x24
c0015e8e:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0015e92:	8d 44 24 18          	lea    eax,[esp+0x18]
c0015e96:	50                   	push   eax
c0015e97:	e8 36 a7 fe ff       	call   c00005d2 <memcpy>
c0015e9c:	83 c4 10             	add    esp,0x10
c0015e9f:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0015ea3:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0015ea7:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0015eaf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0015eb3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015eb7:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0015ebb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015ebf:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0015ec3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015ec7:	25 ff 0f 00 00       	and    eax,0xfff
c0015ecc:	89 c6                	mov    esi,eax
c0015ece:	e8 a4 b1 ff ff       	call   c0011077 <Virt::getAKernelVAS()>
c0015ed3:	89 c3                	mov    ebx,eax
c0015ed5:	83 ec 0c             	sub    esp,0xc
c0015ed8:	6a 02                	push   0x2
c0015eda:	e8 08 b0 ff ff       	call   c0010ee7 <Virt::allocateKernelVirtualPages(int)>
c0015edf:	83 c4 10             	add    esp,0x10
c0015ee2:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0015ee6:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0015eec:	83 ec 0c             	sub    esp,0xc
c0015eef:	6a 01                	push   0x1
c0015ef1:	6a 02                	push   0x2
c0015ef3:	50                   	push   eax
c0015ef4:	52                   	push   edx
c0015ef5:	53                   	push   ebx
c0015ef6:	e8 0f b9 ff ff       	call   c001180a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0015efb:	83 c4 20             	add    esp,0x20
c0015efe:	09 f0                	or     eax,esi
c0015f00:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0015f04:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015f08:	25 ff 0f 00 00       	and    eax,0xfff
c0015f0d:	89 c6                	mov    esi,eax
c0015f0f:	e8 63 b1 ff ff       	call   c0011077 <Virt::getAKernelVAS()>
c0015f14:	89 c3                	mov    ebx,eax
c0015f16:	83 ec 0c             	sub    esp,0xc
c0015f19:	6a 02                	push   0x2
c0015f1b:	e8 c7 af ff ff       	call   c0010ee7 <Virt::allocateKernelVirtualPages(int)>
c0015f20:	83 c4 10             	add    esp,0x10
c0015f23:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0015f27:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0015f2d:	83 ec 0c             	sub    esp,0xc
c0015f30:	6a 01                	push   0x1
c0015f32:	6a 02                	push   0x2
c0015f34:	50                   	push   eax
c0015f35:	52                   	push   edx
c0015f36:	53                   	push   ebx
c0015f37:	e8 ce b8 ff ff       	call   c001180a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0015f3c:	83 c4 20             	add    esp,0x20
c0015f3f:	09 f0                	or     eax,esi
c0015f41:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0015f45:	80 7c 24 3b 00       	cmp    BYTE PTR [esp+0x3b],0x0
c0015f4a:	75 11                	jne    c0015f5d <findRSDT(unsigned char*)+0xf5>
c0015f4c:	c6 05 c0 3c 02 c0 00 	mov    BYTE PTR ds:0xc0023cc0,0x0
c0015f53:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015f57:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0015f5b:	eb 1f                	jmp    c0015f7c <findRSDT(unsigned char*)+0x114>
c0015f5d:	80 7c 24 3b 02       	cmp    BYTE PTR [esp+0x3b],0x2
c0015f62:	75 11                	jne    c0015f75 <findRSDT(unsigned char*)+0x10d>
c0015f64:	c6 05 c0 3c 02 c0 01 	mov    BYTE PTR ds:0xc0023cc0,0x1
c0015f6b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015f6f:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0015f73:	eb 07                	jmp    c0015f7c <findRSDT(unsigned char*)+0x114>
c0015f75:	b8 00 00 00 00       	mov    eax,0x0
c0015f7a:	eb 04                	jmp    c0015f80 <findRSDT(unsigned char*)+0x118>
c0015f7c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0015f80:	83 c4 44             	add    esp,0x44
c0015f83:	5b                   	pop    ebx
c0015f84:	5e                   	pop    esi
c0015f85:	c3                   	ret    

c0015f86 <findDataTable(unsigned char*, char*)>:
c0015f86:	83 ec 1c             	sub    esp,0x1c
c0015f89:	a1 c8 30 02 c0       	mov    eax,ds:0xc00230c8
c0015f8e:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0015f94:	83 e0 04             	and    eax,0x4
c0015f97:	84 c0                	test   al,al
c0015f99:	75 07                	jne    c0015fa2 <findDataTable(unsigned char*, char*)+0x1c>
c0015f9b:	b8 00 00 00 00       	mov    eax,0x0
c0015fa0:	eb 7c                	jmp    c001601e <findDataTable(unsigned char*, char*)+0x98>
c0015fa2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0015faa:	a1 ac 3a 02 c0       	mov    eax,ds:0xc0023aac
c0015faf:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0015fb3:	7d 3a                	jge    c0015fef <findDataTable(unsigned char*, char*)+0x69>
c0015fb5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015fb9:	c1 e0 03             	shl    eax,0x3
c0015fbc:	05 c0 3a 02 c0       	add    eax,0xc0023ac0
c0015fc1:	83 ec 04             	sub    esp,0x4
c0015fc4:	6a 04                	push   0x4
c0015fc6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015fca:	50                   	push   eax
c0015fcb:	e8 9f a5 fe ff       	call   c000056f <memcmp>
c0015fd0:	83 c4 10             	add    esp,0x10
c0015fd3:	85 c0                	test   eax,eax
c0015fd5:	0f 94 c0             	sete   al
c0015fd8:	84 c0                	test   al,al
c0015fda:	74 0d                	je     c0015fe9 <findDataTable(unsigned char*, char*)+0x63>
c0015fdc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015fe0:	8b 04 c5 c4 3a 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdc53c]
c0015fe7:	eb 35                	jmp    c001601e <findDataTable(unsigned char*, char*)+0x98>
c0015fe9:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0015fed:	eb bb                	jmp    c0015faa <findDataTable(unsigned char*, char*)+0x24>
c0015fef:	a0 c0 3c 02 c0       	mov    al,ds:0xc0023cc0
c0015ff4:	84 c0                	test   al,al
c0015ff6:	74 07                	je     c0015fff <findDataTable(unsigned char*, char*)+0x79>
c0015ff8:	b8 58 00 00 00       	mov    eax,0x58
c0015ffd:	eb 05                	jmp    c0016004 <findDataTable(unsigned char*, char*)+0x7e>
c0015fff:	b8 52 00 00 00       	mov    eax,0x52
c0016004:	83 ec 04             	sub    esp,0x4
c0016007:	50                   	push   eax
c0016008:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001600c:	68 3c 17 02 c0       	push   0xc002173c
c0016011:	e8 b2 6a ff ff       	call   c000cac8 <kprintf(char const*, ...)>
c0016016:	83 c4 10             	add    esp,0x10
c0016019:	b8 00 00 00 00       	mov    eax,0x0
c001601e:	83 c4 1c             	add    esp,0x1c
c0016021:	c3                   	ret    

c0016022 <scanMADT()>:
c0016022:	83 ec 2c             	sub    esp,0x2c
c0016025:	a1 c8 30 02 c0       	mov    eax,ds:0xc00230c8
c001602a:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0016030:	83 e0 04             	and    eax,0x4
c0016033:	84 c0                	test   al,al
c0016035:	0f 84 73 03 00 00    	je     c00163ae <scanMADT()+0x38c>
c001603b:	e8 77 fb ff ff       	call   c0015bb7 <findRSDP()>
c0016040:	a3 cc 3c 02 c0       	mov    ds:0xc0023ccc,eax
c0016045:	a1 cc 3c 02 c0       	mov    eax,ds:0xc0023ccc
c001604a:	85 c0                	test   eax,eax
c001604c:	75 19                	jne    c0016067 <scanMADT()+0x45>
c001604e:	a1 c8 30 02 c0       	mov    eax,ds:0xc00230c8
c0016053:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0016059:	83 e2 fb             	and    edx,0xfffffffb
c001605c:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0016062:	e9 4b 03 00 00       	jmp    c00163b2 <scanMADT()+0x390>
c0016067:	a1 cc 3c 02 c0       	mov    eax,ds:0xc0023ccc
c001606c:	83 ec 0c             	sub    esp,0xc
c001606f:	50                   	push   eax
c0016070:	e8 f3 fd ff ff       	call   c0015e68 <findRSDT(unsigned char*)>
c0016075:	83 c4 10             	add    esp,0x10
c0016078:	a3 c8 3c 02 c0       	mov    ds:0xc0023cc8,eax
c001607d:	a1 c8 3c 02 c0       	mov    eax,ds:0xc0023cc8
c0016082:	85 c0                	test   eax,eax
c0016084:	75 19                	jne    c001609f <scanMADT()+0x7d>
c0016086:	a1 c8 30 02 c0       	mov    eax,ds:0xc00230c8
c001608b:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0016091:	83 e2 fb             	and    edx,0xfffffffb
c0016094:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001609a:	e9 13 03 00 00       	jmp    c00163b2 <scanMADT()+0x390>
c001609f:	a1 c8 3c 02 c0       	mov    eax,ds:0xc0023cc8
c00160a4:	83 ec 0c             	sub    esp,0xc
c00160a7:	50                   	push   eax
c00160a8:	e8 94 fb ff ff       	call   c0015c41 <loadACPITables(unsigned char*)>
c00160ad:	83 c4 10             	add    esp,0x10
c00160b0:	a1 c8 3c 02 c0       	mov    eax,ds:0xc0023cc8
c00160b5:	83 ec 08             	sub    esp,0x8
c00160b8:	68 7a 16 02 c0       	push   0xc002167a
c00160bd:	50                   	push   eax
c00160be:	e8 c3 fe ff ff       	call   c0015f86 <findDataTable(unsigned char*, char*)>
c00160c3:	83 c4 10             	add    esp,0x10
c00160c6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00160ca:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c00160cf:	75 19                	jne    c00160ea <scanMADT()+0xc8>
c00160d1:	a1 c8 30 02 c0       	mov    eax,ds:0xc00230c8
c00160d6:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00160dc:	83 e2 fe             	and    edx,0xfffffffe
c00160df:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00160e5:	e9 c8 02 00 00       	jmp    c00163b2 <scanMADT()+0x390>
c00160ea:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00160f2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00160f6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00160f9:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c00160fd:	0f 87 af 02 00 00    	ja     c00163b2 <scanMADT()+0x390>
c0016103:	81 7c 24 1c f3 01 00 00 	cmp    DWORD PTR [esp+0x1c],0x1f3
c001610b:	0f 87 a1 02 00 00    	ja     c00163b2 <scanMADT()+0x390>
c0016111:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016115:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016119:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001611d:	8d 50 01             	lea    edx,[eax+0x1]
c0016120:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0016124:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016128:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001612c:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0016130:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016134:	8d 50 01             	lea    edx,[eax+0x1]
c0016137:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001613b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001613f:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0016143:	88 44 24 12          	mov    BYTE PTR [esp+0x12],al
c0016147:	80 7c 24 12 02       	cmp    BYTE PTR [esp+0x12],0x2
c001614c:	0f 86 5f 02 00 00    	jbe    c00163b1 <scanMADT()+0x38f>
c0016152:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c0016157:	75 57                	jne    c00161b0 <scanMADT()+0x18e>
c0016159:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001615d:	8d 50 01             	lea    edx,[eax+0x1]
c0016160:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0016164:	8a 15 00 3e 02 c0    	mov    dl,BYTE PTR ds:0xc0023e00
c001616a:	0f b6 d2             	movzx  edx,dl
c001616d:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0016171:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0016175:	88 82 40 3e 02 c0    	mov    BYTE PTR [edx-0x3ffdc1c0],al
c001617b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001617f:	8d 50 01             	lea    edx,[eax+0x1]
c0016182:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0016186:	8a 15 00 3e 02 c0    	mov    dl,BYTE PTR ds:0xc0023e00
c001618c:	8d 4a 01             	lea    ecx,[edx+0x1]
c001618f:	88 0d 00 3e 02 c0    	mov    BYTE PTR ds:0xc0023e00,cl
c0016195:	0f b6 d2             	movzx  edx,dl
c0016198:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001619c:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c00161a0:	88 82 20 3e 02 c0    	mov    BYTE PTR [edx-0x3ffdc1e0],al
c00161a6:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c00161ab:	e9 ea 01 00 00       	jmp    c001639a <scanMADT()+0x378>
c00161b0:	80 7c 24 13 01       	cmp    BYTE PTR [esp+0x13],0x1
c00161b5:	0f 85 14 01 00 00    	jne    c00162cf <scanMADT()+0x2ad>
c00161bb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00161bf:	8d 50 01             	lea    edx,[eax+0x1]
c00161c2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00161c6:	8a 15 d0 3c 02 c0    	mov    dl,BYTE PTR ds:0xc0023cd0
c00161cc:	0f b6 d2             	movzx  edx,dl
c00161cf:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00161d3:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c00161d7:	88 82 e0 3c 02 c0    	mov    BYTE PTR [edx-0x3ffdc320],al
c00161dd:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00161e1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00161e5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00161e9:	01 d0                	add    eax,edx
c00161eb:	83 c0 2c             	add    eax,0x2c
c00161ee:	8a 00                	mov    al,BYTE PTR [eax]
c00161f0:	0f b6 d0             	movzx  edx,al
c00161f3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00161f7:	8d 48 01             	lea    ecx,[eax+0x1]
c00161fa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00161fe:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0016202:	0f b6 c0             	movzx  eax,al
c0016205:	c1 e0 08             	shl    eax,0x8
c0016208:	89 d1                	mov    ecx,edx
c001620a:	09 c1                	or     ecx,eax
c001620c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016210:	8d 50 02             	lea    edx,[eax+0x2]
c0016213:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016217:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001621b:	0f b6 c0             	movzx  eax,al
c001621e:	c1 e0 10             	shl    eax,0x10
c0016221:	09 c1                	or     ecx,eax
c0016223:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016227:	8d 50 03             	lea    edx,[eax+0x3]
c001622a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001622e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0016232:	0f b6 c0             	movzx  eax,al
c0016235:	c1 e0 18             	shl    eax,0x18
c0016238:	09 c1                	or     ecx,eax
c001623a:	89 ca                	mov    edx,ecx
c001623c:	a0 d0 3c 02 c0       	mov    al,ds:0xc0023cd0
c0016241:	0f b6 c0             	movzx  eax,al
c0016244:	89 14 85 00 3d 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc300],edx
c001624b:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0016250:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016254:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016258:	01 d0                	add    eax,edx
c001625a:	83 c0 2c             	add    eax,0x2c
c001625d:	8a 00                	mov    al,BYTE PTR [eax]
c001625f:	0f b6 d0             	movzx  edx,al
c0016262:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016266:	8d 48 01             	lea    ecx,[eax+0x1]
c0016269:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001626d:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0016271:	0f b6 c0             	movzx  eax,al
c0016274:	c1 e0 08             	shl    eax,0x8
c0016277:	89 d1                	mov    ecx,edx
c0016279:	09 c1                	or     ecx,eax
c001627b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001627f:	8d 50 02             	lea    edx,[eax+0x2]
c0016282:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016286:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001628a:	0f b6 c0             	movzx  eax,al
c001628d:	c1 e0 10             	shl    eax,0x10
c0016290:	09 c1                	or     ecx,eax
c0016292:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016296:	8d 50 03             	lea    edx,[eax+0x3]
c0016299:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001629d:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00162a1:	0f b6 c0             	movzx  eax,al
c00162a4:	c1 e0 18             	shl    eax,0x18
c00162a7:	09 c1                	or     ecx,eax
c00162a9:	89 ca                	mov    edx,ecx
c00162ab:	a0 d0 3c 02 c0       	mov    al,ds:0xc0023cd0
c00162b0:	0f b6 c0             	movzx  eax,al
c00162b3:	89 14 85 80 3d 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc280],edx
c00162ba:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c00162bf:	a0 d0 3c 02 c0       	mov    al,ds:0xc0023cd0
c00162c4:	40                   	inc    eax
c00162c5:	a2 d0 3c 02 c0       	mov    ds:0xc0023cd0,al
c00162ca:	e9 cb 00 00 00       	jmp    c001639a <scanMADT()+0x378>
c00162cf:	80 7c 24 13 02       	cmp    BYTE PTR [esp+0x13],0x2
c00162d4:	0f 85 a6 00 00 00    	jne    c0016380 <scanMADT()+0x35e>
c00162da:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00162de:	8d 50 01             	lea    edx,[eax+0x1]
c00162e1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00162e5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00162e9:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00162ed:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00162f1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00162f5:	8d 50 01             	lea    edx,[eax+0x1]
c00162f8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00162fc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016300:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0016304:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0016308:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001630c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016310:	01 d0                	add    eax,edx
c0016312:	83 c0 2c             	add    eax,0x2c
c0016315:	8a 00                	mov    al,BYTE PTR [eax]
c0016317:	0f b6 d0             	movzx  edx,al
c001631a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001631e:	8d 48 01             	lea    ecx,[eax+0x1]
c0016321:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016325:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0016329:	0f b6 c0             	movzx  eax,al
c001632c:	c1 e0 08             	shl    eax,0x8
c001632f:	89 d1                	mov    ecx,edx
c0016331:	09 c1                	or     ecx,eax
c0016333:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016337:	8d 50 02             	lea    edx,[eax+0x2]
c001633a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001633e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0016342:	0f b6 c0             	movzx  eax,al
c0016345:	c1 e0 10             	shl    eax,0x10
c0016348:	09 c1                	or     ecx,eax
c001634a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001634e:	8d 50 03             	lea    edx,[eax+0x3]
c0016351:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016355:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0016359:	0f b6 c0             	movzx  eax,al
c001635c:	c1 e0 18             	shl    eax,0x18
c001635f:	09 c8                	or     eax,ecx
c0016361:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016365:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c001636a:	83 44 24 1c 02       	add    DWORD PTR [esp+0x1c],0x2
c001636f:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0016374:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016378:	88 90 20 28 02 c0    	mov    BYTE PTR [eax-0x3ffdd7e0],dl
c001637e:	eb 1a                	jmp    c001639a <scanMADT()+0x378>
c0016380:	80 7c 24 13 04       	cmp    BYTE PTR [esp+0x13],0x4
c0016385:	75 07                	jne    c001638e <scanMADT()+0x36c>
c0016387:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c001638c:	eb 0c                	jmp    c001639a <scanMADT()+0x378>
c001638e:	80 7c 24 13 05       	cmp    BYTE PTR [esp+0x13],0x5
c0016393:	75 05                	jne    c001639a <scanMADT()+0x378>
c0016395:	83 44 24 1c 0a       	add    DWORD PTR [esp+0x1c],0xa
c001639a:	0f b6 54 24 12       	movzx  edx,BYTE PTR [esp+0x12]
c001639f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00163a3:	01 d0                	add    eax,edx
c00163a5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00163a9:	e9 44 fd ff ff       	jmp    c00160f2 <scanMADT()+0xd0>
c00163ae:	90                   	nop
c00163af:	eb 01                	jmp    c00163b2 <scanMADT()+0x390>
c00163b1:	90                   	nop
c00163b2:	83 c4 2c             	add    esp,0x2c
c00163b5:	c3                   	ret    

c00163b6 <ACPI::ACPI()>:
c00163b6:	83 ec 0c             	sub    esp,0xc
c00163b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163bd:	83 ec 08             	sub    esp,0x8
c00163c0:	68 7f 16 02 c0       	push   0xc002167f
c00163c5:	50                   	push   eax
c00163c6:	e8 a7 d1 ff ff       	call   c0013572 <Device::Device(char const*)>
c00163cb:	83 c4 10             	add    esp,0x10
c00163ce:	ba 08 18 02 c0       	mov    edx,0xc0021808
c00163d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163d7:	89 10                	mov    DWORD PTR [eax],edx
c00163d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163dd:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c00163e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163e8:	c7 80 5c 21 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x215c],0x0
c00163f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163f6:	c7 80 60 22 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x2260],0x0
c0016400:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016404:	c6 80 64 22 00 00 00 	mov    BYTE PTR [eax+0x2264],0x0
c001640b:	e8 12 fc ff ff       	call   c0016022 <scanMADT()>
c0016410:	90                   	nop
c0016411:	83 c4 0c             	add    esp,0xc
c0016414:	c3                   	ret    
c0016415:	90                   	nop

c0016416 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0016416:	83 ec 2c             	sub    esp,0x2c
c0016419:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001641d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016421:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0016425:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0016429:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c001642e:	88 d0                	mov    al,dl
c0016430:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0016434:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0016439:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0016441:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016445:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c001644b:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001644f:	0f 8d 97 00 00 00    	jge    c00164ec <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c0016455:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016459:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001645d:	83 c2 2a             	add    edx,0x2a
c0016460:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0016464:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0016469:	75 78                	jne    c00164e3 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c001646b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001646f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016473:	83 c2 2a             	add    edx,0x2a
c0016476:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c001647a:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c001647e:	75 63                	jne    c00164e3 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0016480:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0016485:	74 3a                	je     c00164c1 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c0016487:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001648b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001648f:	83 c2 2a             	add    edx,0x2a
c0016492:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0016496:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001649a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001649d:	39 c2                	cmp    edx,eax
c001649f:	74 10                	je     c00164b1 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c00164a1:	83 ec 0c             	sub    esp,0xc
c00164a4:	68 6c 17 02 c0       	push   0xc002176c
c00164a9:	e8 38 67 ff ff       	call   c000cbe6 <panic(char const*)>
c00164ae:	83 c4 10             	add    esp,0x10
c00164b1:	83 ec 0c             	sub    esp,0xc
c00164b4:	68 84 16 02 c0       	push   0xc0021684
c00164b9:	e8 28 67 ff ff       	call   c000cbe6 <panic(char const*)>
c00164be:	83 c4 10             	add    esp,0x10
c00164c1:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00164c5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00164c9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00164cd:	83 c2 2a             	add    edx,0x2a
c00164d0:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c00164d4:	8b 02                	mov    eax,DWORD PTR [edx]
c00164d6:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c00164d9:	89 01                	mov    DWORD PTR [ecx],eax
c00164db:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00164de:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c00164e3:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00164e7:	e9 55 ff ff ff       	jmp    c0016441 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c00164ec:	90                   	nop
c00164ed:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00164f1:	83 c4 2c             	add    esp,0x2c
c00164f4:	c2 04 00             	ret    0x4
c00164f7:	90                   	nop

c00164f8 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c00164f8:	56                   	push   esi
c00164f9:	53                   	push   ebx
c00164fa:	83 ec 14             	sub    esp,0x14
c00164fd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016501:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0016505:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0016509:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001650e:	88 c8                	mov    al,cl
c0016510:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0016514:	88 d0                	mov    al,dl
c0016516:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001651a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001651e:	8d b0 5c 01 00 00    	lea    esi,[eax+0x15c]
c0016524:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016528:	8b 98 5c 21 00 00    	mov    ebx,DWORD PTR [eax+0x215c]
c001652e:	0f b6 4c 24 04       	movzx  ecx,BYTE PTR [esp+0x4]
c0016533:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0016538:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c001653d:	83 ec 04             	sub    esp,0x4
c0016540:	56                   	push   esi
c0016541:	53                   	push   ebx
c0016542:	51                   	push   ecx
c0016543:	52                   	push   edx
c0016544:	50                   	push   eax
c0016545:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0016549:	68 9c 17 02 c0       	push   0xc002179c
c001654e:	e8 75 65 ff ff       	call   c000cac8 <kprintf(char const*, ...)>
c0016553:	83 c4 20             	add    esp,0x20
c0016556:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001655a:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c0016560:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016564:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0016567:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c001656b:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c001656f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016573:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0016579:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001657d:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0016580:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016584:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0016589:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001658d:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c0016593:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0016597:	8d 48 01             	lea    ecx,[eax+0x1]
c001659a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001659e:	83 c2 2a             	add    edx,0x2a
c00165a1:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c00165a5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165a9:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c00165af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165b3:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c00165b6:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00165ba:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c00165be:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165c2:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c00165c8:	8d 50 01             	lea    edx,[eax+0x1]
c00165cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165cf:	89 90 5c 21 00 00    	mov    DWORD PTR [eax+0x215c],edx
c00165d5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165d9:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c00165df:	3d 00 08 00 00       	cmp    eax,0x800
c00165e4:	75 10                	jne    c00165f6 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xfe>
c00165e6:	83 ec 0c             	sub    esp,0xc
c00165e9:	68 93 16 02 c0       	push   0xc0021693
c00165ee:	e8 f3 65 ff ff       	call   c000cbe6 <panic(char const*)>
c00165f3:	83 c4 10             	add    esp,0x10
c00165f6:	90                   	nop
c00165f7:	83 c4 14             	add    esp,0x14
c00165fa:	5b                   	pop    ebx
c00165fb:	5e                   	pop    esi
c00165fc:	c3                   	ret    
c00165fd:	90                   	nop

c00165fe <ACPI::setScreenBrightnessLevel(void*, int)>:
c00165fe:	b8 00 00 00 00       	mov    eax,0x0
c0016603:	c3                   	ret    

c0016604 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c0016604:	83 ec 1c             	sub    esp,0x1c
c0016607:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001660b:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c001660e:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0016612:	a1 c8 30 02 c0       	mov    eax,ds:0xc00230c8
c0016617:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001661c:	83 ec 08             	sub    esp,0x8
c001661f:	52                   	push   edx
c0016620:	50                   	push   eax
c0016621:	e8 0e 4c ff ff       	call   c000b234 <Computer::readCMOS(unsigned char)>
c0016626:	83 c4 10             	add    esp,0x10
c0016629:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001662d:	a1 c8 30 02 c0       	mov    eax,ds:0xc00230c8
c0016632:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0016637:	83 ec 04             	sub    esp,0x4
c001663a:	6a 01                	push   0x1
c001663c:	52                   	push   edx
c001663d:	50                   	push   eax
c001663e:	e8 f9 4c ff ff       	call   c000b33c <Computer::writeCMOS(unsigned char, unsigned char)>
c0016643:	83 c4 10             	add    esp,0x10
c0016646:	90                   	nop
c0016647:	83 c4 1c             	add    esp,0x1c
c001664a:	c3                   	ret    
c001664b:	90                   	nop

c001664c <ACPI::open(int, int, void*)>:
c001664c:	53                   	push   ebx
c001664d:	83 ec 18             	sub    esp,0x18
c0016650:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016654:	c6 80 64 22 00 00 01 	mov    BYTE PTR [eax+0x2264],0x1
c001665b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001665f:	8a 80 64 22 00 00    	mov    al,BYTE PTR [eax+0x2264]
c0016665:	84 c0                	test   al,al
c0016667:	74 60                	je     c00166c9 <ACPI::open(int, int, void*)+0x7d>
c0016669:	83 ec 0c             	sub    esp,0xc
c001666c:	68 58 01 00 00       	push   0x158
c0016671:	e8 02 ba ff ff       	call   c0012078 <operator new(unsigned long)>
c0016676:	83 c4 10             	add    esp,0x10
c0016679:	89 c3                	mov    ebx,eax
c001667b:	83 ec 0c             	sub    esp,0xc
c001667e:	53                   	push   ebx
c001667f:	e8 26 45 00 00       	call   c001abaa <PCI::PCI()>
c0016684:	83 c4 10             	add    esp,0x10
c0016687:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001668b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001668f:	83 ec 08             	sub    esp,0x8
c0016692:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016696:	50                   	push   eax
c0016697:	e8 e6 cc ff ff       	call   c0013382 <Device::addChild(Device*)>
c001669c:	83 c4 10             	add    esp,0x10
c001669f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00166a3:	8b 00                	mov    eax,DWORD PTR [eax]
c00166a5:	83 c0 08             	add    eax,0x8
c00166a8:	8b 00                	mov    eax,DWORD PTR [eax]
c00166aa:	6a 00                	push   0x0
c00166ac:	6a 00                	push   0x0
c00166ae:	6a 00                	push   0x0
c00166b0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00166b4:	ff d0                	call   eax
c00166b6:	83 c4 10             	add    esp,0x10
c00166b9:	83 ec 0c             	sub    esp,0xc
c00166bc:	68 b0 16 02 c0       	push   0xc00216b0
c00166c1:	e8 02 64 ff ff       	call   c000cac8 <kprintf(char const*, ...)>
c00166c6:	83 c4 10             	add    esp,0x10
c00166c9:	83 ec 0c             	sub    esp,0xc
c00166cc:	68 bb 16 02 c0       	push   0xc00216bb
c00166d1:	e8 0a 52 ff ff       	call   c000b8e0 <loadKernelSymbolTable(char const*)>
c00166d6:	83 c4 10             	add    esp,0x10
c00166d9:	8b 1d c8 30 02 c0    	mov    ebx,DWORD PTR ds:0xc00230c8
c00166df:	83 ec 0c             	sub    esp,0xc
c00166e2:	68 d9 16 02 c0       	push   0xc00216d9
c00166e7:	e8 bd 5b ff ff       	call   c000c2a9 <loadDLL(char const*)>
c00166ec:	83 c4 10             	add    esp,0x10
c00166ef:	83 ec 08             	sub    esp,0x8
c00166f2:	53                   	push   ebx
c00166f3:	50                   	push   eax
c00166f4:	e8 79 5c ff ff       	call   c000c372 <executeDLL(unsigned long, void*)>
c00166f9:	83 c4 10             	add    esp,0x10
c00166fc:	a1 c8 30 02 c0       	mov    eax,ds:0xc00230c8
c0016701:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0016707:	83 e0 04             	and    eax,0x4
c001670a:	84 c0                	test   al,al
c001670c:	74 57                	je     c0016765 <ACPI::open(int, int, void*)+0x119>
c001670e:	8b 1d c8 30 02 c0    	mov    ebx,DWORD PTR ds:0xc00230c8
c0016714:	83 ec 0c             	sub    esp,0xc
c0016717:	68 f6 16 02 c0       	push   0xc00216f6
c001671c:	e8 88 5b ff ff       	call   c000c2a9 <loadDLL(char const*)>
c0016721:	83 c4 10             	add    esp,0x10
c0016724:	83 ec 08             	sub    esp,0x8
c0016727:	53                   	push   ebx
c0016728:	50                   	push   eax
c0016729:	e8 44 5c ff ff       	call   c000c372 <executeDLL(unsigned long, void*)>
c001672e:	83 c4 10             	add    esp,0x10
c0016731:	a1 c8 3c 02 c0       	mov    eax,ds:0xc0023cc8
c0016736:	83 ec 08             	sub    esp,0x8
c0016739:	68 13 17 02 c0       	push   0xc0021713
c001673e:	50                   	push   eax
c001673f:	e8 42 f8 ff ff       	call   c0015f86 <findDataTable(unsigned char*, char*)>
c0016744:	83 c4 10             	add    esp,0x10
c0016747:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001674b:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0016750:	74 13                	je     c0016765 <ACPI::open(int, int, void*)+0x119>
c0016752:	83 ec 08             	sub    esp,0x8
c0016755:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016759:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001675d:	e8 a2 fe ff ff       	call   c0016604 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0016762:	83 c4 10             	add    esp,0x10
c0016765:	b8 00 00 00 00       	mov    eax,0x0
c001676a:	83 c4 18             	add    esp,0x18
c001676d:	5b                   	pop    ebx
c001676e:	c3                   	ret    
c001676f:	90                   	nop

c0016770 <ACPI::sleep()>:
c0016770:	83 ec 0c             	sub    esp,0xc
c0016773:	a1 a0 3a 02 c0       	mov    eax,ds:0xc0023aa0
c0016778:	85 c0                	test   eax,eax
c001677a:	74 07                	je     c0016783 <ACPI::sleep()+0x13>
c001677c:	a1 a0 3a 02 c0       	mov    eax,ds:0xc0023aa0
c0016781:	ff d0                	call   eax
c0016783:	90                   	nop
c0016784:	83 c4 0c             	add    esp,0xc
c0016787:	c3                   	ret    

c0016788 <CPU::close(int, int, void*)>:
c0016788:	31 c0                	xor    eax,eax
c001678a:	c3                   	ret    

c001678b <lookupAMDCPUName(unsigned char, unsigned char)>:
c001678b:	55                   	push   ebp
c001678c:	57                   	push   edi
c001678d:	56                   	push   esi
c001678e:	53                   	push   ebx
c001678f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0016793:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016797:	89 ce                	mov    esi,ecx
c0016799:	89 d5                	mov    ebp,edx
c001679b:	80 f9 04             	cmp    cl,0x4
c001679e:	75 28                	jne    c00167c8 <lookupAMDCPUName(unsigned char, unsigned char)+0x3d>
c00167a0:	8d 42 f9             	lea    eax,[edx-0x7]
c00167a3:	3c 03                	cmp    al,0x3
c00167a5:	0f 86 63 01 00 00    	jbe    c001690e <lookupAMDCPUName(unsigned char, unsigned char)+0x183>
c00167ab:	80 fa 03             	cmp    dl,0x3
c00167ae:	0f 84 5a 01 00 00    	je     c001690e <lookupAMDCPUName(unsigned char, unsigned char)+0x183>
c00167b4:	8d 7a f2             	lea    edi,[edx-0xe]
c00167b7:	b8 f0 29 02 c0       	mov    eax,0xc00229f0
c00167bc:	89 fb                	mov    ebx,edi
c00167be:	80 fb 01             	cmp    bl,0x1
c00167c1:	77 4e                	ja     c0016811 <lookupAMDCPUName(unsigned char, unsigned char)+0x86>
c00167c3:	e9 52 01 00 00       	jmp    c001691a <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00167c8:	80 f9 05             	cmp    cl,0x5
c00167cb:	75 4d                	jne    c001681a <lookupAMDCPUName(unsigned char, unsigned char)+0x8f>
c00167cd:	b8 00 2a 02 c0       	mov    eax,0xc0022a00
c00167d2:	80 fa 03             	cmp    dl,0x3
c00167d5:	0f 86 3f 01 00 00    	jbe    c001691a <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00167db:	8d 7a fa             	lea    edi,[edx-0x6]
c00167de:	b8 10 2a 02 c0       	mov    eax,0xc0022a10
c00167e3:	89 fb                	mov    ebx,edi
c00167e5:	80 fb 01             	cmp    bl,0x1
c00167e8:	0f 86 2c 01 00 00    	jbe    c001691a <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00167ee:	b8 20 2a 02 c0       	mov    eax,0xc0022a20
c00167f3:	80 fa 08             	cmp    dl,0x8
c00167f6:	0f 84 1e 01 00 00    	je     c001691a <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00167fc:	89 d7                	mov    edi,edx
c00167fe:	b8 30 2a 02 c0       	mov    eax,0xc0022a30
c0016803:	83 e7 fb             	and    edi,0xfffffffb
c0016806:	89 fb                	mov    ebx,edi
c0016808:	80 fb 09             	cmp    bl,0x9
c001680b:	0f 84 09 01 00 00    	je     c001691a <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016811:	31 c0                	xor    eax,eax
c0016813:	89 eb                	mov    ebx,ebp
c0016815:	0f b6 fb             	movzx  edi,bl
c0016818:	eb 30                	jmp    c001684a <lookupAMDCPUName(unsigned char, unsigned char)+0xbf>
c001681a:	31 c0                	xor    eax,eax
c001681c:	80 f9 06             	cmp    cl,0x6
c001681f:	75 f2                	jne    c0016813 <lookupAMDCPUName(unsigned char, unsigned char)+0x88>
c0016821:	80 fa 0a             	cmp    dl,0xa
c0016824:	77 ed                	ja     c0016813 <lookupAMDCPUName(unsigned char, unsigned char)+0x88>
c0016826:	bf de 05 00 00       	mov    edi,0x5de
c001682b:	0f a3 d7             	bt     edi,edx
c001682e:	73 e3                	jae    c0016813 <lookupAMDCPUName(unsigned char, unsigned char)+0x88>
c0016830:	b8 40 2a 02 c0       	mov    eax,0xc0022a40
c0016835:	e9 e0 00 00 00       	jmp    c001691a <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c001683a:	39 c7                	cmp    edi,eax
c001683c:	0f 84 d3 00 00 00    	je     c0016915 <lookupAMDCPUName(unsigned char, unsigned char)+0x18a>
c0016842:	40                   	inc    eax
c0016843:	3d d0 00 00 00       	cmp    eax,0xd0
c0016848:	74 09                	je     c0016853 <lookupAMDCPUName(unsigned char, unsigned char)+0xc8>
c001684a:	89 f3                	mov    ebx,esi
c001684c:	80 fb 0f             	cmp    bl,0xf
c001684f:	75 f1                	jne    c0016842 <lookupAMDCPUName(unsigned char, unsigned char)+0xb7>
c0016851:	eb e7                	jmp    c001683a <lookupAMDCPUName(unsigned char, unsigned char)+0xaf>
c0016853:	80 f9 10             	cmp    cl,0x10
c0016856:	75 14                	jne    c001686c <lookupAMDCPUName(unsigned char, unsigned char)+0xe1>
c0016858:	8d 42 fc             	lea    eax,[edx-0x4]
c001685b:	83 e0 fb             	and    eax,0xfffffffb
c001685e:	3c 02                	cmp    al,0x2
c0016860:	76 34                	jbe    c0016896 <lookupAMDCPUName(unsigned char, unsigned char)+0x10b>
c0016862:	b8 81 19 02 c0       	mov    eax,0xc0021981
c0016867:	80 fa 02             	cmp    dl,0x2
c001686a:	eb 24                	jmp    c0016890 <lookupAMDCPUName(unsigned char, unsigned char)+0x105>
c001686c:	80 f9 11             	cmp    cl,0x11
c001686f:	75 13                	jne    c0016884 <lookupAMDCPUName(unsigned char, unsigned char)+0xf9>
c0016871:	b8 81 19 02 c0       	mov    eax,0xc0021981
c0016876:	80 fa 03             	cmp    dl,0x3
c0016879:	0f 85 9b 00 00 00    	jne    c001691a <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c001687f:	e9 91 00 00 00       	jmp    c0016915 <lookupAMDCPUName(unsigned char, unsigned char)+0x18a>
c0016884:	80 f9 12             	cmp    cl,0x12
c0016887:	75 14                	jne    c001689d <lookupAMDCPUName(unsigned char, unsigned char)+0x112>
c0016889:	b8 81 19 02 c0       	mov    eax,0xc0021981
c001688e:	fe ca                	dec    dl
c0016890:	0f 85 84 00 00 00    	jne    c001691a <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016896:	b8 60 2a 02 c0       	mov    eax,0xc0022a60
c001689b:	eb 7d                	jmp    c001691a <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c001689d:	80 f9 14             	cmp    cl,0x14
c00168a0:	75 12                	jne    c00168b4 <lookupAMDCPUName(unsigned char, unsigned char)+0x129>
c00168a2:	4a                   	dec    edx
c00168a3:	b8 81 19 02 c0       	mov    eax,0xc0021981
c00168a8:	80 fa 01             	cmp    dl,0x1
c00168ab:	77 6d                	ja     c001691a <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00168ad:	b8 70 2a 02 c0       	mov    eax,0xc0022a70
c00168b2:	eb 66                	jmp    c001691a <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00168b4:	80 f9 15             	cmp    cl,0x15
c00168b7:	75 31                	jne    c00168ea <lookupAMDCPUName(unsigned char, unsigned char)+0x15f>
c00168b9:	b8 80 2a 02 c0       	mov    eax,0xc0022a80
c00168be:	80 fa 01             	cmp    dl,0x1
c00168c1:	74 57                	je     c001691a <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00168c3:	b8 81 19 02 c0       	mov    eax,0xc0021981
c00168c8:	80 fa 13             	cmp    dl,0x13
c00168cb:	76 0c                	jbe    c00168d9 <lookupAMDCPUName(unsigned char, unsigned char)+0x14e>
c00168cd:	80 fa 30             	cmp    dl,0x30
c00168d0:	75 48                	jne    c001691a <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00168d2:	b8 a0 2a 02 c0       	mov    eax,0xc0022aa0
c00168d7:	eb 41                	jmp    c001691a <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00168d9:	b9 04 00 09 00       	mov    ecx,0x90004
c00168de:	0f a3 d1             	bt     ecx,edx
c00168e1:	73 37                	jae    c001691a <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00168e3:	b8 90 2a 02 c0       	mov    eax,0xc0022a90
c00168e8:	eb 30                	jmp    c001691a <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00168ea:	b8 81 19 02 c0       	mov    eax,0xc0021981
c00168ef:	80 f9 16             	cmp    cl,0x16
c00168f2:	75 26                	jne    c001691a <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00168f4:	b8 b0 2a 02 c0       	mov    eax,0xc0022ab0
c00168f9:	84 d2                	test   dl,dl
c00168fb:	74 1d                	je     c001691a <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00168fd:	b8 81 19 02 c0       	mov    eax,0xc0021981
c0016902:	80 fa 30             	cmp    dl,0x30
c0016905:	75 13                	jne    c001691a <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016907:	b8 c0 2a 02 c0       	mov    eax,0xc0022ac0
c001690c:	eb 0c                	jmp    c001691a <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c001690e:	b8 e0 29 02 c0       	mov    eax,0xc00229e0
c0016913:	eb 05                	jmp    c001691a <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016915:	b8 50 2a 02 c0       	mov    eax,0xc0022a50
c001691a:	5b                   	pop    ebx
c001691b:	5e                   	pop    esi
c001691c:	5f                   	pop    edi
c001691d:	5d                   	pop    ebp
c001691e:	c3                   	ret    

c001691f <lookupIntelCPUName(unsigned char, unsigned char)>:
c001691f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0016923:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016927:	80 f9 04             	cmp    cl,0x4
c001692a:	75 6b                	jne    c0016997 <lookupIntelCPUName(unsigned char, unsigned char)+0x78>
c001692c:	b8 40 28 02 c0       	mov    eax,0xc0022840
c0016931:	80 fa 01             	cmp    dl,0x1
c0016934:	0f 86 92 02 00 00    	jbe    c0016bcc <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c001693a:	b8 50 28 02 c0       	mov    eax,0xc0022850
c001693f:	80 fa 02             	cmp    dl,0x2
c0016942:	0f 84 84 02 00 00    	je     c0016bcc <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016948:	b8 60 28 02 c0       	mov    eax,0xc0022860
c001694d:	80 fa 03             	cmp    dl,0x3
c0016950:	0f 84 76 02 00 00    	je     c0016bcc <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016956:	b8 70 28 02 c0       	mov    eax,0xc0022870
c001695b:	80 fa 04             	cmp    dl,0x4
c001695e:	0f 84 68 02 00 00    	je     c0016bcc <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016964:	b8 80 28 02 c0       	mov    eax,0xc0022880
c0016969:	80 fa 05             	cmp    dl,0x5
c001696c:	0f 84 5a 02 00 00    	je     c0016bcc <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016972:	b8 60 28 02 c0       	mov    eax,0xc0022860
c0016977:	80 fa 07             	cmp    dl,0x7
c001697a:	0f 84 4c 02 00 00    	je     c0016bcc <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016980:	83 ea 08             	sub    edx,0x8
c0016983:	b8 81 19 02 c0       	mov    eax,0xc0021981
c0016988:	80 fa 01             	cmp    dl,0x1
c001698b:	0f 87 3b 02 00 00    	ja     c0016bcc <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016991:	b8 90 28 02 c0       	mov    eax,0xc0022890
c0016996:	c3                   	ret    
c0016997:	80 f9 05             	cmp    cl,0x5
c001699a:	75 45                	jne    c00169e1 <lookupIntelCPUName(unsigned char, unsigned char)+0xc2>
c001699c:	8d 4a ff             	lea    ecx,[edx-0x1]
c001699f:	b8 a0 28 02 c0       	mov    eax,0xc00228a0
c00169a4:	80 f9 02             	cmp    cl,0x2
c00169a7:	0f 86 1f 02 00 00    	jbe    c0016bcc <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00169ad:	80 fa 04             	cmp    dl,0x4
c00169b0:	0f 84 f3 01 00 00    	je     c0016ba9 <lookupIntelCPUName(unsigned char, unsigned char)+0x28a>
c00169b6:	80 fa 07             	cmp    dl,0x7
c00169b9:	0f 84 0d 02 00 00    	je     c0016bcc <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00169bf:	b8 b0 28 02 c0       	mov    eax,0xc00228b0
c00169c4:	80 fa 08             	cmp    dl,0x8
c00169c7:	0f 84 ff 01 00 00    	je     c0016bcc <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00169cd:	b8 81 19 02 c0       	mov    eax,0xc0021981
c00169d2:	80 fa 09             	cmp    dl,0x9
c00169d5:	0f 85 f1 01 00 00    	jne    c0016bcc <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00169db:	b8 c0 28 02 c0       	mov    eax,0xc00228c0
c00169e0:	c3                   	ret    
c00169e1:	80 f9 06             	cmp    cl,0x6
c00169e4:	0f 85 85 01 00 00    	jne    c0016b6f <lookupIntelCPUName(unsigned char, unsigned char)+0x250>
c00169ea:	b8 d0 28 02 c0       	mov    eax,0xc00228d0
c00169ef:	80 fa 01             	cmp    dl,0x1
c00169f2:	0f 84 d4 01 00 00    	je     c0016bcc <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00169f8:	8d 42 fb             	lea    eax,[edx-0x5]
c00169fb:	3c 01                	cmp    al,0x1
c00169fd:	0f 86 ac 01 00 00    	jbe    c0016baf <lookupIntelCPUName(unsigned char, unsigned char)+0x290>
c0016a03:	80 fa 03             	cmp    dl,0x3
c0016a06:	0f 84 a3 01 00 00    	je     c0016baf <lookupIntelCPUName(unsigned char, unsigned char)+0x290>
c0016a0c:	8d 4a f9             	lea    ecx,[edx-0x7]
c0016a0f:	b8 f0 28 02 c0       	mov    eax,0xc00228f0
c0016a14:	80 f9 01             	cmp    cl,0x1
c0016a17:	0f 86 af 01 00 00    	jbe    c0016bcc <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016a1d:	80 fa 09             	cmp    dl,0x9
c0016a20:	0f 84 8f 01 00 00    	je     c0016bb5 <lookupIntelCPUName(unsigned char, unsigned char)+0x296>
c0016a26:	8d 4a f6             	lea    ecx,[edx-0xa]
c0016a29:	80 f9 01             	cmp    cl,0x1
c0016a2c:	0f 86 9a 01 00 00    	jbe    c0016bcc <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016a32:	b8 00 29 02 c0       	mov    eax,0xc0022900
c0016a37:	80 fa 0d             	cmp    dl,0xd
c0016a3a:	0f 84 8c 01 00 00    	je     c0016bcc <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016a40:	b8 10 29 02 c0       	mov    eax,0xc0022910
c0016a45:	80 fa 0e             	cmp    dl,0xe
c0016a48:	0f 84 7e 01 00 00    	je     c0016bcc <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016a4e:	b8 20 29 02 c0       	mov    eax,0xc0022920
c0016a53:	80 fa 0f             	cmp    dl,0xf
c0016a56:	0f 84 70 01 00 00    	je     c0016bcc <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016a5c:	b8 00 29 02 c0       	mov    eax,0xc0022900
c0016a61:	80 fa 15             	cmp    dl,0x15
c0016a64:	0f 84 62 01 00 00    	je     c0016bcc <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016a6a:	8d 4a ea             	lea    ecx,[edx-0x16]
c0016a6d:	b8 20 29 02 c0       	mov    eax,0xc0022920
c0016a72:	80 f9 01             	cmp    cl,0x1
c0016a75:	0f 86 51 01 00 00    	jbe    c0016bcc <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016a7b:	80 fa 1a             	cmp    dl,0x1a
c0016a7e:	0f 84 37 01 00 00    	je     c0016bbb <lookupIntelCPUName(unsigned char, unsigned char)+0x29c>
c0016a84:	80 fa 1c             	cmp    dl,0x1c
c0016a87:	0f 84 34 01 00 00    	je     c0016bc1 <lookupIntelCPUName(unsigned char, unsigned char)+0x2a2>
c0016a8d:	80 fa 1d             	cmp    dl,0x1d
c0016a90:	0f 84 36 01 00 00    	je     c0016bcc <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016a96:	b8 50 29 02 c0       	mov    eax,0xc0022950
c0016a9b:	80 fa 25             	cmp    dl,0x25
c0016a9e:	0f 84 28 01 00 00    	je     c0016bcc <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016aa4:	8d 4a da             	lea    ecx,[edx-0x26]
c0016aa7:	b8 40 29 02 c0       	mov    eax,0xc0022940
c0016aac:	80 f9 01             	cmp    cl,0x1
c0016aaf:	0f 86 17 01 00 00    	jbe    c0016bcc <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016ab5:	b8 60 29 02 c0       	mov    eax,0xc0022960
c0016aba:	80 fa 2a             	cmp    dl,0x2a
c0016abd:	0f 84 09 01 00 00    	je     c0016bcc <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016ac3:	b8 50 29 02 c0       	mov    eax,0xc0022950
c0016ac8:	80 fa 2c             	cmp    dl,0x2c
c0016acb:	0f 84 fb 00 00 00    	je     c0016bcc <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016ad1:	b8 60 29 02 c0       	mov    eax,0xc0022960
c0016ad6:	80 fa 2d             	cmp    dl,0x2d
c0016ad9:	0f 84 ed 00 00 00    	je     c0016bcc <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016adf:	b8 30 29 02 c0       	mov    eax,0xc0022930
c0016ae4:	80 fa 2e             	cmp    dl,0x2e
c0016ae7:	0f 84 df 00 00 00    	je     c0016bcc <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016aed:	b8 50 29 02 c0       	mov    eax,0xc0022950
c0016af2:	80 fa 2f             	cmp    dl,0x2f
c0016af5:	0f 84 d1 00 00 00    	je     c0016bcc <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016afb:	8d 4a cb             	lea    ecx,[edx-0x35]
c0016afe:	b8 40 29 02 c0       	mov    eax,0xc0022940
c0016b03:	80 f9 01             	cmp    cl,0x1
c0016b06:	0f 86 c0 00 00 00    	jbe    c0016bcc <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016b0c:	b8 70 29 02 c0       	mov    eax,0xc0022970
c0016b11:	80 fa 37             	cmp    dl,0x37
c0016b14:	0f 84 b2 00 00 00    	je     c0016bcc <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016b1a:	b8 80 29 02 c0       	mov    eax,0xc0022980
c0016b1f:	80 fa 3a             	cmp    dl,0x3a
c0016b22:	0f 84 a4 00 00 00    	je     c0016bcc <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016b28:	b8 90 29 02 c0       	mov    eax,0xc0022990
c0016b2d:	80 fa 3c             	cmp    dl,0x3c
c0016b30:	0f 84 96 00 00 00    	je     c0016bcc <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016b36:	b8 a0 29 02 c0       	mov    eax,0xc00229a0
c0016b3b:	80 fa 3d             	cmp    dl,0x3d
c0016b3e:	0f 84 88 00 00 00    	je     c0016bcc <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016b44:	b8 80 29 02 c0       	mov    eax,0xc0022980
c0016b49:	80 fa 3e             	cmp    dl,0x3e
c0016b4c:	74 7e                	je     c0016bcc <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016b4e:	8d 42 bb             	lea    eax,[edx-0x45]
c0016b51:	3c 01                	cmp    al,0x1
c0016b53:	76 72                	jbe    c0016bc7 <lookupIntelCPUName(unsigned char, unsigned char)+0x2a8>
c0016b55:	80 fa 3f             	cmp    dl,0x3f
c0016b58:	74 6d                	je     c0016bc7 <lookupIntelCPUName(unsigned char, unsigned char)+0x2a8>
c0016b5a:	80 fa 4a             	cmp    dl,0x4a
c0016b5d:	74 0a                	je     c0016b69 <lookupIntelCPUName(unsigned char, unsigned char)+0x24a>
c0016b5f:	b8 81 19 02 c0       	mov    eax,0xc0021981
c0016b64:	80 fa 4d             	cmp    dl,0x4d
c0016b67:	75 63                	jne    c0016bcc <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016b69:	b8 70 29 02 c0       	mov    eax,0xc0022970
c0016b6e:	c3                   	ret    
c0016b6f:	b8 81 19 02 c0       	mov    eax,0xc0021981
c0016b74:	80 f9 0b             	cmp    cl,0xb
c0016b77:	75 0a                	jne    c0016b83 <lookupIntelCPUName(unsigned char, unsigned char)+0x264>
c0016b79:	fe ca                	dec    dl
c0016b7b:	75 4f                	jne    c0016bcc <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016b7d:	b8 b0 29 02 c0       	mov    eax,0xc00229b0
c0016b82:	c3                   	ret    
c0016b83:	80 f9 0f             	cmp    cl,0xf
c0016b86:	75 44                	jne    c0016bcc <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016b88:	b8 c0 29 02 c0       	mov    eax,0xc00229c0
c0016b8d:	80 fa 02             	cmp    dl,0x2
c0016b90:	76 3a                	jbe    c0016bcc <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016b92:	8d 42 fd             	lea    eax,[edx-0x3]
c0016b95:	3c 01                	cmp    al,0x1
c0016b97:	76 0a                	jbe    c0016ba3 <lookupIntelCPUName(unsigned char, unsigned char)+0x284>
c0016b99:	b8 81 19 02 c0       	mov    eax,0xc0021981
c0016b9e:	80 fa 06             	cmp    dl,0x6
c0016ba1:	75 29                	jne    c0016bcc <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016ba3:	b8 d0 29 02 c0       	mov    eax,0xc00229d0
c0016ba8:	c3                   	ret    
c0016ba9:	b8 b0 28 02 c0       	mov    eax,0xc00228b0
c0016bae:	c3                   	ret    
c0016baf:	b8 e0 28 02 c0       	mov    eax,0xc00228e0
c0016bb4:	c3                   	ret    
c0016bb5:	b8 00 29 02 c0       	mov    eax,0xc0022900
c0016bba:	c3                   	ret    
c0016bbb:	b8 30 29 02 c0       	mov    eax,0xc0022930
c0016bc0:	c3                   	ret    
c0016bc1:	b8 40 29 02 c0       	mov    eax,0xc0022940
c0016bc6:	c3                   	ret    
c0016bc7:	b8 90 29 02 c0       	mov    eax,0xc0022990
c0016bcc:	c3                   	ret    

c0016bcd <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>:
c0016bcd:	60                   	pusha  
c0016bce:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0016bd2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016bd6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016bda:	9c                   	pushf  
c0016bdb:	fa                   	cli    
c0016bdc:	0f 09                	wbinvd 
c0016bde:	0f 30                	wrmsr  
c0016be0:	9d                   	popf   
c0016be1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016be5:	89 02                	mov    DWORD PTR [edx],eax
c0016be7:	61                   	popa   
c0016be8:	c3                   	ret    

c0016be9 <AMD_K6_read_msr(unsigned int, REGS*)>:
c0016be9:	60                   	pusha  
c0016bea:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0016bee:	9c                   	pushf  
c0016bef:	fa                   	cli    
c0016bf0:	0f 09                	wbinvd 
c0016bf2:	31 c0                	xor    eax,eax
c0016bf4:	31 d2                	xor    edx,edx
c0016bf6:	0f 32                	rdmsr  
c0016bf8:	9d                   	popf   
c0016bf9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016bfd:	89 02                	mov    DWORD PTR [edx],eax
c0016bff:	61                   	popa   
c0016c00:	c3                   	ret    

c0016c01 <AMD_K6_writeback(int, int, int)>:
c0016c01:	56                   	push   esi
c0016c02:	53                   	push   ebx
c0016c03:	83 ec 10             	sub    esp,0x10
c0016c06:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c0a:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0016c0f:	75 5d                	jne    c0016c6e <AMD_K6_writeback(int, int, int)+0x6d>
c0016c11:	83 f8 08             	cmp    eax,0x8
c0016c14:	75 09                	jne    c0016c1f <AMD_K6_writeback(int, int, int)+0x1e>
c0016c16:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0016c1b:	7e 13                	jle    c0016c30 <AMD_K6_writeback(int, int, int)+0x2f>
c0016c1d:	eb 30                	jmp    c0016c4f <AMD_K6_writeback(int, int, int)+0x4e>
c0016c1f:	83 f8 06             	cmp    eax,0x6
c0016c22:	7c 4a                	jl     c0016c6e <AMD_K6_writeback(int, int, int)+0x6d>
c0016c24:	83 f8 07             	cmp    eax,0x7
c0016c27:	7e 07                	jle    c0016c30 <AMD_K6_writeback(int, int, int)+0x2f>
c0016c29:	83 f8 09             	cmp    eax,0x9
c0016c2c:	74 21                	je     c0016c4f <AMD_K6_writeback(int, int, int)+0x4e>
c0016c2e:	eb 3e                	jmp    c0016c6e <AMD_K6_writeback(int, int, int)+0x6d>
c0016c30:	89 e6                	mov    esi,esp
c0016c32:	8b 1d 84 32 02 c0    	mov    ebx,DWORD PTR ds:0xc0023284
c0016c38:	56                   	push   esi
c0016c39:	c1 eb 15             	shr    ebx,0x15
c0016c3c:	68 82 00 00 c0       	push   0xc0000082
c0016c41:	83 e3 7e             	and    ebx,0x7e
c0016c44:	e8 a0 ff ff ff       	call   c0016be9 <AMD_K6_read_msr(unsigned int, REGS*)>
c0016c49:	56                   	push   esi
c0016c4a:	6a 00                	push   0x0
c0016c4c:	53                   	push   ebx
c0016c4d:	eb 12                	jmp    c0016c61 <AMD_K6_writeback(int, int, int)+0x60>
c0016c4f:	89 e3                	mov    ebx,esp
c0016c51:	53                   	push   ebx
c0016c52:	68 82 00 00 c0       	push   0xc0000082
c0016c57:	e8 8d ff ff ff       	call   c0016be9 <AMD_K6_read_msr(unsigned int, REGS*)>
c0016c5c:	53                   	push   ebx
c0016c5d:	6a 00                	push   0x0
c0016c5f:	6a 00                	push   0x0
c0016c61:	68 82 00 00 c0       	push   0xc0000082
c0016c66:	e8 62 ff ff ff       	call   c0016bcd <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>
c0016c6b:	83 c4 18             	add    esp,0x18
c0016c6e:	83 c4 10             	add    esp,0x10
c0016c71:	5b                   	pop    ebx
c0016c72:	5e                   	pop    esi
c0016c73:	c3                   	ret    

c0016c74 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0016c74:	55                   	push   ebp
c0016c75:	57                   	push   edi
c0016c76:	56                   	push   esi
c0016c77:	53                   	push   ebx
c0016c78:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016c7c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0016c80:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0016c84:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0016c88:	39 05 e0 2a 02 c0    	cmp    DWORD PTR ds:0xc0022ae0,eax
c0016c8e:	75 23                	jne    c0016cb3 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0016c90:	a1 6c 3e 02 c0       	mov    eax,ds:0xc0023e6c
c0016c95:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0016c99:	89 06                	mov    DWORD PTR [esi],eax
c0016c9b:	a1 68 3e 02 c0       	mov    eax,ds:0xc0023e68
c0016ca0:	89 07                	mov    DWORD PTR [edi],eax
c0016ca2:	a1 64 3e 02 c0       	mov    eax,ds:0xc0023e64
c0016ca7:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0016caa:	a1 60 3e 02 c0       	mov    eax,ds:0xc0023e60
c0016caf:	89 02                	mov    DWORD PTR [edx],eax
c0016cb1:	eb 3f                	jmp    c0016cf2 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0016cb3:	31 c9                	xor    ecx,ecx
c0016cb5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016cb9:	0f a2                	cpuid  
c0016cbb:	89 06                	mov    DWORD PTR [esi],eax
c0016cbd:	89 1f                	mov    DWORD PTR [edi],ebx
c0016cbf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016cc3:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0016cc6:	89 10                	mov    DWORD PTR [eax],edx
c0016cc8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016ccc:	a3 e0 2a 02 c0       	mov    ds:0xc0022ae0,eax
c0016cd1:	8b 06                	mov    eax,DWORD PTR [esi]
c0016cd3:	a3 6c 3e 02 c0       	mov    ds:0xc0023e6c,eax
c0016cd8:	8b 07                	mov    eax,DWORD PTR [edi]
c0016cda:	a3 68 3e 02 c0       	mov    ds:0xc0023e68,eax
c0016cdf:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0016ce2:	a3 64 3e 02 c0       	mov    ds:0xc0023e64,eax
c0016ce7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016ceb:	8b 00                	mov    eax,DWORD PTR [eax]
c0016ced:	a3 60 3e 02 c0       	mov    ds:0xc0023e60,eax
c0016cf2:	5b                   	pop    ebx
c0016cf3:	5e                   	pop    esi
c0016cf4:	5f                   	pop    edi
c0016cf5:	5d                   	pop    ebp
c0016cf6:	c3                   	ret    

c0016cf7 <cpuidCheckEDX(unsigned int)>:
c0016cf7:	83 ec 10             	sub    esp,0x10
c0016cfa:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0016cfe:	50                   	push   eax
c0016cff:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0016d03:	50                   	push   eax
c0016d04:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0016d08:	50                   	push   eax
c0016d09:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0016d0d:	50                   	push   eax
c0016d0e:	6a 01                	push   0x1
c0016d10:	e8 5f ff ff ff       	call   c0016c74 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0016d15:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016d19:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0016d1d:	0f 95 c0             	setne  al
c0016d20:	83 c4 24             	add    esp,0x24
c0016d23:	c3                   	ret    

c0016d24 <cpuidCheckECX(unsigned int)>:
c0016d24:	83 ec 10             	sub    esp,0x10
c0016d27:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0016d2b:	50                   	push   eax
c0016d2c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0016d30:	50                   	push   eax
c0016d31:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0016d35:	50                   	push   eax
c0016d36:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0016d3a:	50                   	push   eax
c0016d3b:	6a 01                	push   0x1
c0016d3d:	e8 32 ff ff ff       	call   c0016c74 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0016d42:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016d46:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0016d4a:	0f 95 c0             	setne  al
c0016d4d:	83 c4 24             	add    esp,0x24
c0016d50:	c3                   	ret    

c0016d51 <cpuidCheckExtendedEBX(unsigned int)>:
c0016d51:	83 ec 10             	sub    esp,0x10
c0016d54:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0016d58:	50                   	push   eax
c0016d59:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0016d5d:	50                   	push   eax
c0016d5e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0016d62:	50                   	push   eax
c0016d63:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0016d67:	50                   	push   eax
c0016d68:	6a 07                	push   0x7
c0016d6a:	e8 05 ff ff ff       	call   c0016c74 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0016d6f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016d73:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0016d77:	0f 95 c0             	setne  al
c0016d7a:	83 c4 24             	add    esp,0x24
c0016d7d:	c3                   	ret    

c0016d7e <cpuidCheckExtendedECX(unsigned int)>:
c0016d7e:	83 ec 10             	sub    esp,0x10
c0016d81:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0016d85:	50                   	push   eax
c0016d86:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0016d8a:	50                   	push   eax
c0016d8b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0016d8f:	50                   	push   eax
c0016d90:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0016d94:	50                   	push   eax
c0016d95:	6a 07                	push   0x7
c0016d97:	e8 d8 fe ff ff       	call   c0016c74 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0016d9c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016da0:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0016da4:	0f 95 c0             	setne  al
c0016da7:	83 c4 24             	add    esp,0x24
c0016daa:	c3                   	ret    

c0016dab <getCPUNumber()>:
c0016dab:	31 c0                	xor    eax,eax
c0016dad:	c3                   	ret    

c0016dae <thisCPU()>:
c0016dae:	e8 f8 ff ff ff       	call   c0016dab <getCPUNumber()>
c0016db3:	8b 15 c8 30 02 c0    	mov    edx,DWORD PTR ds:0xc00230c8
c0016db9:	8b 84 82 60 01 00 00 	mov    eax,DWORD PTR [edx+eax*4+0x160]
c0016dc0:	c3                   	ret    
c0016dc1:	90                   	nop

c0016dc2 <CPU::CPU()>:
c0016dc2:	83 ec 0c             	sub    esp,0xc
c0016dc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016dc9:	83 ec 08             	sub    esp,0x8
c0016dcc:	68 81 19 02 c0       	push   0xc0021981
c0016dd1:	50                   	push   eax
c0016dd2:	e8 9b c7 ff ff       	call   c0013572 <Device::Device(char const*)>
c0016dd7:	83 c4 10             	add    esp,0x10
c0016dda:	ba 58 1a 02 c0       	mov    edx,0xc0021a58
c0016ddf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016de3:	89 10                	mov    DWORD PTR [eax],edx
c0016de5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016de9:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0016df3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016df7:	05 78 01 00 00       	add    eax,0x178
c0016dfc:	83 ec 0c             	sub    esp,0xc
c0016dff:	50                   	push   eax
c0016e00:	e8 b5 55 ff ff       	call   c000c3ba <GDT::GDT()>
c0016e05:	83 c4 10             	add    esp,0x10
c0016e08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016e0c:	05 7c 09 00 00       	add    eax,0x97c
c0016e11:	83 ec 0c             	sub    esp,0xc
c0016e14:	50                   	push   eax
c0016e15:	e8 00 58 ff ff       	call   c000c61a <IDT::IDT()>
c0016e1a:	83 c4 10             	add    esp,0x10
c0016e1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016e21:	05 7c 11 00 00       	add    eax,0x117c
c0016e26:	83 ec 0c             	sub    esp,0xc
c0016e29:	50                   	push   eax
c0016e2a:	e8 9f 9b ff ff       	call   c00109ce <TSS::TSS()>
c0016e2f:	83 c4 10             	add    esp,0x10
c0016e32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016e36:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0016e3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016e41:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0016e4b:	90                   	nop
c0016e4c:	83 c4 0c             	add    esp,0xc
c0016e4f:	c3                   	ret    

c0016e50 <CPU::displayFeatures()>:
c0016e50:	c3                   	ret    
c0016e51:	90                   	nop

c0016e52 <CPU::detectFeatures()>:
c0016e52:	55                   	push   ebp
c0016e53:	57                   	push   edi
c0016e54:	56                   	push   esi
c0016e55:	53                   	push   ebx
c0016e56:	83 ec 50             	sub    esp,0x50
c0016e59:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0016e5d:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0016e67:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0016e6e:	8d bb 5f 01 00 00    	lea    edi,[ebx+0x15f]
c0016e74:	6a 0d                	push   0xd
c0016e76:	6a 00                	push   0x0
c0016e78:	57                   	push   edi
c0016e79:	e8 8a 97 fe ff       	call   c0000608 <memset>
c0016e7e:	83 c4 10             	add    esp,0x10
c0016e81:	a1 c8 30 02 c0       	mov    eax,ds:0xc00230c8
c0016e86:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0016e8d:	0f 84 20 09 00 00    	je     c00177b3 <CPU::detectFeatures()+0x961>
c0016e93:	83 ec 0c             	sub    esp,0xc
c0016e96:	6a 10                	push   0x10
c0016e98:	e8 5a fe ff ff       	call   c0016cf7 <cpuidCheckEDX(unsigned int)>
c0016e9d:	83 e0 01             	and    eax,0x1
c0016ea0:	8d 14 00             	lea    edx,[eax+eax*1]
c0016ea3:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0016ea9:	83 e0 fd             	and    eax,0xfffffffd
c0016eac:	09 d0                	or     eax,edx
c0016eae:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0016eb4:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0016ebb:	e8 37 fe ff ff       	call   c0016cf7 <cpuidCheckEDX(unsigned int)>
c0016ec0:	83 e0 01             	and    eax,0x1
c0016ec3:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0016eca:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0016ed0:	83 e0 fb             	and    eax,0xfffffffb
c0016ed3:	09 d0                	or     eax,edx
c0016ed5:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0016edb:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0016ee2:	e8 10 fe ff ff       	call   c0016cf7 <cpuidCheckEDX(unsigned int)>
c0016ee7:	83 e0 01             	and    eax,0x1
c0016eea:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0016ef1:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0016ef7:	83 e0 f7             	and    eax,0xfffffff7
c0016efa:	09 d0                	or     eax,edx
c0016efc:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0016f02:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0016f09:	e8 e9 fd ff ff       	call   c0016cf7 <cpuidCheckEDX(unsigned int)>
c0016f0e:	83 e0 01             	and    eax,0x1
c0016f11:	c1 e0 04             	shl    eax,0x4
c0016f14:	88 c2                	mov    dl,al
c0016f16:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0016f1c:	83 e0 ef             	and    eax,0xffffffef
c0016f1f:	09 d0                	or     eax,edx
c0016f21:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0016f27:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0016f2e:	e8 c4 fd ff ff       	call   c0016cf7 <cpuidCheckEDX(unsigned int)>
c0016f33:	83 e0 01             	and    eax,0x1
c0016f36:	c1 e0 05             	shl    eax,0x5
c0016f39:	88 c2                	mov    dl,al
c0016f3b:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0016f41:	83 e0 df             	and    eax,0xffffffdf
c0016f44:	09 d0                	or     eax,edx
c0016f46:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0016f4c:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0016f53:	e8 9f fd ff ff       	call   c0016cf7 <cpuidCheckEDX(unsigned int)>
c0016f58:	83 e0 01             	and    eax,0x1
c0016f5b:	8d 14 00             	lea    edx,[eax+eax*1]
c0016f5e:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0016f64:	83 e0 fd             	and    eax,0xfffffffd
c0016f67:	09 d0                	or     eax,edx
c0016f69:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0016f6f:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0016f76:	e8 7c fd ff ff       	call   c0016cf7 <cpuidCheckEDX(unsigned int)>
c0016f7b:	83 e0 01             	and    eax,0x1
c0016f7e:	c1 e0 06             	shl    eax,0x6
c0016f81:	88 c2                	mov    dl,al
c0016f83:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0016f89:	83 e0 bf             	and    eax,0xffffffbf
c0016f8c:	09 d0                	or     eax,edx
c0016f8e:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0016f94:	58                   	pop    eax
c0016f95:	8d 74 24 28          	lea    esi,[esp+0x28]
c0016f99:	56                   	push   esi
c0016f9a:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0016f9e:	55                   	push   ebp
c0016f9f:	8d 44 24 28          	lea    eax,[esp+0x28]
c0016fa3:	50                   	push   eax
c0016fa4:	8d 54 24 28          	lea    edx,[esp+0x28]
c0016fa8:	52                   	push   edx
c0016fa9:	6a 00                	push   0x0
c0016fab:	e8 c4 fc ff ff       	call   c0016c74 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0016fb0:	83 c4 1c             	add    esp,0x1c
c0016fb3:	6a 04                	push   0x4
c0016fb5:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0016fb9:	50                   	push   eax
c0016fba:	57                   	push   edi
c0016fbb:	e8 12 96 fe ff       	call   c00005d2 <memcpy>
c0016fc0:	83 c4 0c             	add    esp,0xc
c0016fc3:	8d 83 63 01 00 00    	lea    eax,[ebx+0x163]
c0016fc9:	6a 04                	push   0x4
c0016fcb:	56                   	push   esi
c0016fcc:	50                   	push   eax
c0016fcd:	e8 00 96 fe ff       	call   c00005d2 <memcpy>
c0016fd2:	83 c4 0c             	add    esp,0xc
c0016fd5:	8d 83 67 01 00 00    	lea    eax,[ebx+0x167]
c0016fdb:	6a 04                	push   0x4
c0016fdd:	55                   	push   ebp
c0016fde:	50                   	push   eax
c0016fdf:	e8 ee 95 fe ff       	call   c00005d2 <memcpy>
c0016fe4:	58                   	pop    eax
c0016fe5:	5a                   	pop    edx
c0016fe6:	68 2c 18 02 c0       	push   0xc002182c
c0016feb:	57                   	push   edi
c0016fec:	e8 07 97 fe ff       	call   c00006f8 <strcmp>
c0016ff1:	83 c4 10             	add    esp,0x10
c0016ff4:	85 c0                	test   eax,eax
c0016ff6:	75 0f                	jne    c0017007 <CPU::detectFeatures()+0x1b5>
c0016ff8:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0017002:	e9 22 02 00 00       	jmp    c0017229 <CPU::detectFeatures()+0x3d7>
c0017007:	50                   	push   eax
c0017008:	50                   	push   eax
c0017009:	68 39 18 02 c0       	push   0xc0021839
c001700e:	57                   	push   edi
c001700f:	e8 e4 96 fe ff       	call   c00006f8 <strcmp>
c0017014:	83 c4 10             	add    esp,0x10
c0017017:	85 c0                	test   eax,eax
c0017019:	74 dd                	je     c0016ff8 <CPU::detectFeatures()+0x1a6>
c001701b:	51                   	push   ecx
c001701c:	51                   	push   ecx
c001701d:	68 46 18 02 c0       	push   0xc0021846
c0017022:	57                   	push   edi
c0017023:	e8 d0 96 fe ff       	call   c00006f8 <strcmp>
c0017028:	83 c4 10             	add    esp,0x10
c001702b:	85 c0                	test   eax,eax
c001702d:	74 2a                	je     c0017059 <CPU::detectFeatures()+0x207>
c001702f:	52                   	push   edx
c0017030:	52                   	push   edx
c0017031:	68 53 18 02 c0       	push   0xc0021853
c0017036:	57                   	push   edi
c0017037:	e8 bc 96 fe ff       	call   c00006f8 <strcmp>
c001703c:	83 c4 10             	add    esp,0x10
c001703f:	85 c0                	test   eax,eax
c0017041:	74 16                	je     c0017059 <CPU::detectFeatures()+0x207>
c0017043:	50                   	push   eax
c0017044:	50                   	push   eax
c0017045:	68 60 18 02 c0       	push   0xc0021860
c001704a:	57                   	push   edi
c001704b:	e8 a8 96 fe ff       	call   c00006f8 <strcmp>
c0017050:	83 c4 10             	add    esp,0x10
c0017053:	85 c0                	test   eax,eax
c0017055:	74 48                	je     c001709f <CPU::detectFeatures()+0x24d>
c0017057:	eb 0f                	jmp    c0017068 <CPU::detectFeatures()+0x216>
c0017059:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0017063:	e9 c1 01 00 00       	jmp    c0017229 <CPU::detectFeatures()+0x3d7>
c0017068:	50                   	push   eax
c0017069:	50                   	push   eax
c001706a:	68 6d 18 02 c0       	push   0xc002186d
c001706f:	57                   	push   edi
c0017070:	e8 83 96 fe ff       	call   c00006f8 <strcmp>
c0017075:	83 c4 10             	add    esp,0x10
c0017078:	85 c0                	test   eax,eax
c001707a:	74 23                	je     c001709f <CPU::detectFeatures()+0x24d>
c001707c:	50                   	push   eax
c001707d:	50                   	push   eax
c001707e:	68 7a 18 02 c0       	push   0xc002187a
c0017083:	57                   	push   edi
c0017084:	e8 6f 96 fe ff       	call   c00006f8 <strcmp>
c0017089:	83 c4 10             	add    esp,0x10
c001708c:	85 c0                	test   eax,eax
c001708e:	75 1e                	jne    c00170ae <CPU::detectFeatures()+0x25c>
c0017090:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c001709a:	e9 8a 01 00 00       	jmp    c0017229 <CPU::detectFeatures()+0x3d7>
c001709f:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c00170a9:	e9 7b 01 00 00       	jmp    c0017229 <CPU::detectFeatures()+0x3d7>
c00170ae:	50                   	push   eax
c00170af:	50                   	push   eax
c00170b0:	68 87 18 02 c0       	push   0xc0021887
c00170b5:	57                   	push   edi
c00170b6:	e8 3d 96 fe ff       	call   c00006f8 <strcmp>
c00170bb:	83 c4 10             	add    esp,0x10
c00170be:	85 c0                	test   eax,eax
c00170c0:	75 0f                	jne    c00170d1 <CPU::detectFeatures()+0x27f>
c00170c2:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c00170cc:	e9 58 01 00 00       	jmp    c0017229 <CPU::detectFeatures()+0x3d7>
c00170d1:	50                   	push   eax
c00170d2:	50                   	push   eax
c00170d3:	68 46 18 02 c0       	push   0xc0021846
c00170d8:	57                   	push   edi
c00170d9:	e8 1a 96 fe ff       	call   c00006f8 <strcmp>
c00170de:	83 c4 10             	add    esp,0x10
c00170e1:	85 c0                	test   eax,eax
c00170e3:	75 0f                	jne    c00170f4 <CPU::detectFeatures()+0x2a2>
c00170e5:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c00170ef:	e9 35 01 00 00       	jmp    c0017229 <CPU::detectFeatures()+0x3d7>
c00170f4:	50                   	push   eax
c00170f5:	50                   	push   eax
c00170f6:	68 94 18 02 c0       	push   0xc0021894
c00170fb:	57                   	push   edi
c00170fc:	e8 f7 95 fe ff       	call   c00006f8 <strcmp>
c0017101:	83 c4 10             	add    esp,0x10
c0017104:	85 c0                	test   eax,eax
c0017106:	75 0f                	jne    c0017117 <CPU::detectFeatures()+0x2c5>
c0017108:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0017112:	e9 12 01 00 00       	jmp    c0017229 <CPU::detectFeatures()+0x3d7>
c0017117:	51                   	push   ecx
c0017118:	51                   	push   ecx
c0017119:	68 a1 18 02 c0       	push   0xc00218a1
c001711e:	57                   	push   edi
c001711f:	e8 d4 95 fe ff       	call   c00006f8 <strcmp>
c0017124:	83 c4 10             	add    esp,0x10
c0017127:	85 c0                	test   eax,eax
c0017129:	75 0f                	jne    c001713a <CPU::detectFeatures()+0x2e8>
c001712b:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0017135:	e9 ef 00 00 00       	jmp    c0017229 <CPU::detectFeatures()+0x3d7>
c001713a:	52                   	push   edx
c001713b:	52                   	push   edx
c001713c:	68 ae 18 02 c0       	push   0xc00218ae
c0017141:	57                   	push   edi
c0017142:	e8 b1 95 fe ff       	call   c00006f8 <strcmp>
c0017147:	83 c4 10             	add    esp,0x10
c001714a:	85 c0                	test   eax,eax
c001714c:	75 0f                	jne    c001715d <CPU::detectFeatures()+0x30b>
c001714e:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0017158:	e9 cc 00 00 00       	jmp    c0017229 <CPU::detectFeatures()+0x3d7>
c001715d:	50                   	push   eax
c001715e:	50                   	push   eax
c001715f:	68 bb 18 02 c0       	push   0xc00218bb
c0017164:	57                   	push   edi
c0017165:	e8 8e 95 fe ff       	call   c00006f8 <strcmp>
c001716a:	83 c4 10             	add    esp,0x10
c001716d:	85 c0                	test   eax,eax
c001716f:	75 0f                	jne    c0017180 <CPU::detectFeatures()+0x32e>
c0017171:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c001717b:	e9 a9 00 00 00       	jmp    c0017229 <CPU::detectFeatures()+0x3d7>
c0017180:	50                   	push   eax
c0017181:	50                   	push   eax
c0017182:	68 c8 18 02 c0       	push   0xc00218c8
c0017187:	57                   	push   edi
c0017188:	e8 6b 95 fe ff       	call   c00006f8 <strcmp>
c001718d:	83 c4 10             	add    esp,0x10
c0017190:	85 c0                	test   eax,eax
c0017192:	75 0f                	jne    c00171a3 <CPU::detectFeatures()+0x351>
c0017194:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c001719e:	e9 86 00 00 00       	jmp    c0017229 <CPU::detectFeatures()+0x3d7>
c00171a3:	50                   	push   eax
c00171a4:	50                   	push   eax
c00171a5:	68 d5 18 02 c0       	push   0xc00218d5
c00171aa:	57                   	push   edi
c00171ab:	e8 48 95 fe ff       	call   c00006f8 <strcmp>
c00171b0:	83 c4 10             	add    esp,0x10
c00171b3:	85 c0                	test   eax,eax
c00171b5:	75 0c                	jne    c00171c3 <CPU::detectFeatures()+0x371>
c00171b7:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c00171c1:	eb 66                	jmp    c0017229 <CPU::detectFeatures()+0x3d7>
c00171c3:	50                   	push   eax
c00171c4:	50                   	push   eax
c00171c5:	68 e2 18 02 c0       	push   0xc00218e2
c00171ca:	57                   	push   edi
c00171cb:	e8 28 95 fe ff       	call   c00006f8 <strcmp>
c00171d0:	83 c4 10             	add    esp,0x10
c00171d3:	85 c0                	test   eax,eax
c00171d5:	75 0c                	jne    c00171e3 <CPU::detectFeatures()+0x391>
c00171d7:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c00171e1:	eb 46                	jmp    c0017229 <CPU::detectFeatures()+0x3d7>
c00171e3:	50                   	push   eax
c00171e4:	50                   	push   eax
c00171e5:	68 ef 18 02 c0       	push   0xc00218ef
c00171ea:	57                   	push   edi
c00171eb:	e8 08 95 fe ff       	call   c00006f8 <strcmp>
c00171f0:	83 c4 10             	add    esp,0x10
c00171f3:	85 c0                	test   eax,eax
c00171f5:	74 e0                	je     c00171d7 <CPU::detectFeatures()+0x385>
c00171f7:	50                   	push   eax
c00171f8:	50                   	push   eax
c00171f9:	68 fc 18 02 c0       	push   0xc00218fc
c00171fe:	57                   	push   edi
c00171ff:	e8 f4 94 fe ff       	call   c00006f8 <strcmp>
c0017204:	83 c4 10             	add    esp,0x10
c0017207:	85 c0                	test   eax,eax
c0017209:	74 cc                	je     c00171d7 <CPU::detectFeatures()+0x385>
c001720b:	51                   	push   ecx
c001720c:	51                   	push   ecx
c001720d:	68 09 19 02 c0       	push   0xc0021909
c0017212:	57                   	push   edi
c0017213:	e8 e0 94 fe ff       	call   c00006f8 <strcmp>
c0017218:	83 c4 10             	add    esp,0x10
c001721b:	85 c0                	test   eax,eax
c001721d:	74 b8                	je     c00171d7 <CPU::detectFeatures()+0x385>
c001721f:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0017229:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c001722e:	0f 86 be 00 00 00    	jbe    c00172f2 <CPU::detectFeatures()+0x4a0>
c0017234:	83 ec 0c             	sub    esp,0xc
c0017237:	68 80 00 00 00       	push   0x80
c001723c:	e8 10 fb ff ff       	call   c0016d51 <cpuidCheckExtendedEBX(unsigned int)>
c0017241:	83 e0 01             	and    eax,0x1
c0017244:	c1 e0 06             	shl    eax,0x6
c0017247:	88 c2                	mov    dl,al
c0017249:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001724f:	83 e0 bf             	and    eax,0xffffffbf
c0017252:	09 d0                	or     eax,edx
c0017254:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001725a:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0017261:	e8 eb fa ff ff       	call   c0016d51 <cpuidCheckExtendedEBX(unsigned int)>
c0017266:	83 e0 01             	and    eax,0x1
c0017269:	c1 e0 04             	shl    eax,0x4
c001726c:	88 c2                	mov    dl,al
c001726e:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0017274:	83 e0 ef             	and    eax,0xffffffef
c0017277:	09 d0                	or     eax,edx
c0017279:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c001727f:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0017286:	e8 c6 fa ff ff       	call   c0016d51 <cpuidCheckExtendedEBX(unsigned int)>
c001728b:	c1 e0 07             	shl    eax,0x7
c001728e:	88 c2                	mov    dl,al
c0017290:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0017296:	83 e0 7f             	and    eax,0x7f
c0017299:	09 d0                	or     eax,edx
c001729b:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00172a1:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00172a8:	e8 d1 fa ff ff       	call   c0016d7e <cpuidCheckExtendedECX(unsigned int)>
c00172ad:	83 e0 01             	and    eax,0x1
c00172b0:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00172b7:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00172bd:	83 e0 f7             	and    eax,0xfffffff7
c00172c0:	09 d0                	or     eax,edx
c00172c2:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00172c8:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c00172cf:	e8 aa fa ff ff       	call   c0016d7e <cpuidCheckExtendedECX(unsigned int)>
c00172d4:	83 c4 10             	add    esp,0x10
c00172d7:	83 e0 01             	and    eax,0x1
c00172da:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00172e1:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00172e7:	83 e0 fb             	and    eax,0xfffffffb
c00172ea:	09 d0                	or     eax,edx
c00172ec:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00172f2:	83 ec 0c             	sub    esp,0xc
c00172f5:	56                   	push   esi
c00172f6:	55                   	push   ebp
c00172f7:	8d 7c 24 28          	lea    edi,[esp+0x28]
c00172fb:	57                   	push   edi
c00172fc:	8d 44 24 28          	lea    eax,[esp+0x28]
c0017300:	50                   	push   eax
c0017301:	6a 01                	push   0x1
c0017303:	e8 6c f9 ff ff       	call   c0016c74 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017308:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001730c:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0017312:	88 ca                	mov    dl,cl
c0017314:	83 e0 f0             	and    eax,0xfffffff0
c0017317:	83 e2 0f             	and    edx,0xf
c001731a:	09 d0                	or     eax,edx
c001731c:	88 ca                	mov    dl,cl
c001731e:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c0017324:	c0 ea 04             	shr    dl,0x4
c0017327:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c001732b:	0f b6 c2             	movzx  eax,dl
c001732e:	83 c4 20             	add    esp,0x20
c0017331:	c1 e0 06             	shl    eax,0x6
c0017334:	89 c5                	mov    ebp,eax
c0017336:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001733c:	66 25 3f c0          	and    ax,0xc03f
c0017340:	09 e8                	or     eax,ebp
c0017342:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0017349:	89 c8                	mov    eax,ecx
c001734b:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c0017351:	c1 e8 08             	shr    eax,0x8
c0017354:	83 e2 3f             	and    edx,0x3f
c0017357:	83 e0 0f             	and    eax,0xf
c001735a:	89 c5                	mov    ebp,eax
c001735c:	c1 e5 06             	shl    ebp,0x6
c001735f:	09 d5                	or     ebp,edx
c0017361:	89 ea                	mov    edx,ebp
c0017363:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0017369:	88 c2                	mov    dl,al
c001736b:	c0 ea 02             	shr    dl,0x2
c001736e:	89 d5                	mov    ebp,edx
c0017370:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c0017376:	83 e2 c0             	and    edx,0xffffffc0
c0017379:	09 d5                	or     ebp,edx
c001737b:	89 ea                	mov    edx,ebp
c001737d:	89 cd                	mov    ebp,ecx
c001737f:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c0017385:	c1 ed 0c             	shr    ebp,0xc
c0017388:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c001738e:	83 e5 03             	and    ebp,0x3
c0017391:	83 e2 cf             	and    edx,0xffffffcf
c0017394:	c1 e5 04             	shl    ebp,0x4
c0017397:	09 d5                	or     ebp,edx
c0017399:	3c 06                	cmp    al,0x6
c001739b:	89 ea                	mov    edx,ebp
c001739d:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c00173a3:	74 04                	je     c00173a9 <CPU::detectFeatures()+0x557>
c00173a5:	3c 0f                	cmp    al,0xf
c00173a7:	75 5c                	jne    c0017405 <CPU::detectFeatures()+0x5b3>
c00173a9:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00173ad:	89 cd                	mov    ebp,ecx
c00173af:	c1 ed 10             	shr    ebp,0x10
c00173b2:	c1 e5 04             	shl    ebp,0x4
c00173b5:	09 ea                	or     edx,ebp
c00173b7:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c00173bd:	0f b6 d2             	movzx  edx,dl
c00173c0:	66 81 e5 3f c0       	and    bp,0xc03f
c00173c5:	c1 e2 06             	shl    edx,0x6
c00173c8:	09 ea                	or     edx,ebp
c00173ca:	3c 0f                	cmp    al,0xf
c00173cc:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c00173d3:	75 30                	jne    c0017405 <CPU::detectFeatures()+0x5b3>
c00173d5:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c00173db:	c1 e9 14             	shr    ecx,0x14
c00173de:	83 e0 3f             	and    eax,0x3f
c00173e1:	83 c1 0f             	add    ecx,0xf
c00173e4:	88 ca                	mov    dl,cl
c00173e6:	c0 e9 02             	shr    cl,0x2
c00173e9:	c1 e2 06             	shl    edx,0x6
c00173ec:	09 d0                	or     eax,edx
c00173ee:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c00173f4:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c00173fa:	83 e0 c0             	and    eax,0xffffffc0
c00173fd:	09 c1                	or     ecx,eax
c00173ff:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0017405:	83 ec 0c             	sub    esp,0xc
c0017408:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c001740f:	56                   	push   esi
c0017410:	8d 44 24 28          	lea    eax,[esp+0x28]
c0017414:	50                   	push   eax
c0017415:	57                   	push   edi
c0017416:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001741a:	55                   	push   ebp
c001741b:	68 00 00 00 80       	push   0x80000000
c0017420:	e8 4f f8 ff ff       	call   c0016c74 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017425:	83 c4 20             	add    esp,0x20
c0017428:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0017430:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017434:	76 1e                	jbe    c0017454 <CPU::detectFeatures()+0x602>
c0017436:	83 ec 0c             	sub    esp,0xc
c0017439:	56                   	push   esi
c001743a:	50                   	push   eax
c001743b:	57                   	push   edi
c001743c:	55                   	push   ebp
c001743d:	68 01 00 00 80       	push   0x80000001
c0017442:	e8 2d f8 ff ff       	call   c0016c74 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017447:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c0017451:	83 c4 20             	add    esp,0x20
c0017454:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001745a:	83 f8 01             	cmp    eax,0x1
c001745d:	75 6f                	jne    c00174ce <CPU::detectFeatures()+0x67c>
c001745f:	51                   	push   ecx
c0017460:	51                   	push   ecx
c0017461:	68 15 19 02 c0       	push   0xc0021915
c0017466:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001746a:	56                   	push   esi
c001746b:	e8 37 92 fe ff       	call   c00006a7 <strcpy>
c0017470:	5f                   	pop    edi
c0017471:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0017477:	5d                   	pop    ebp
c0017478:	66 c1 e8 06          	shr    ax,0x6
c001747c:	0f b6 c0             	movzx  eax,al
c001747f:	50                   	push   eax
c0017480:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0017486:	c1 e8 0e             	shr    eax,0xe
c0017489:	0f b6 c0             	movzx  eax,al
c001748c:	50                   	push   eax
c001748d:	e8 8d f4 ff ff       	call   c001691f <lookupIntelCPUName(unsigned char, unsigned char)>
c0017492:	5a                   	pop    edx
c0017493:	59                   	pop    ecx
c0017494:	50                   	push   eax
c0017495:	56                   	push   esi
c0017496:	e8 c3 92 fe ff       	call   c000075e <strcat>
c001749b:	5f                   	pop    edi
c001749c:	5d                   	pop    ebp
c001749d:	56                   	push   esi
c001749e:	53                   	push   ebx
c001749f:	e8 c0 c0 ff ff       	call   c0013564 <Device::setName(char const*)>
c00174a4:	58                   	pop    eax
c00174a5:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c00174ab:	5a                   	pop    edx
c00174ac:	68 1c 19 02 c0       	push   0xc002191c
c00174b1:	50                   	push   eax
c00174b2:	e8 41 92 fe ff       	call   c00006f8 <strcmp>
c00174b7:	83 c4 10             	add    esp,0x10
c00174ba:	85 c0                	test   eax,eax
c00174bc:	0f 85 73 03 00 00    	jne    c0017835 <CPU::detectFeatures()+0x9e3>
c00174c2:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c00174c9:	e9 67 03 00 00       	jmp    c0017835 <CPU::detectFeatures()+0x9e3>
c00174ce:	83 f8 02             	cmp    eax,0x2
c00174d1:	0f 85 b5 00 00 00    	jne    c001758c <CPU::detectFeatures()+0x73a>
c00174d7:	57                   	push   edi
c00174d8:	57                   	push   edi
c00174d9:	68 2e 19 02 c0       	push   0xc002192e
c00174de:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00174e2:	56                   	push   esi
c00174e3:	e8 bf 91 fe ff       	call   c00006a7 <strcpy>
c00174e8:	5d                   	pop    ebp
c00174e9:	58                   	pop    eax
c00174ea:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00174f0:	66 c1 e8 06          	shr    ax,0x6
c00174f4:	0f b6 c0             	movzx  eax,al
c00174f7:	50                   	push   eax
c00174f8:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00174fe:	c1 e8 0e             	shr    eax,0xe
c0017501:	0f b6 c0             	movzx  eax,al
c0017504:	50                   	push   eax
c0017505:	e8 81 f2 ff ff       	call   c001678b <lookupAMDCPUName(unsigned char, unsigned char)>
c001750a:	5a                   	pop    edx
c001750b:	59                   	pop    ecx
c001750c:	50                   	push   eax
c001750d:	56                   	push   esi
c001750e:	e8 4b 92 fe ff       	call   c000075e <strcat>
c0017513:	5f                   	pop    edi
c0017514:	5d                   	pop    ebp
c0017515:	56                   	push   esi
c0017516:	53                   	push   ebx
c0017517:	e8 48 c0 ff ff       	call   c0013564 <Device::setName(char const*)>
c001751c:	58                   	pop    eax
c001751d:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0017523:	5a                   	pop    edx
c0017524:	68 33 19 02 c0       	push   0xc0021933
c0017529:	50                   	push   eax
c001752a:	e8 c9 91 fe ff       	call   c00006f8 <strcmp>
c001752f:	83 c4 10             	add    esp,0x10
c0017532:	85 c0                	test   eax,eax
c0017534:	75 20                	jne    c0017556 <CPU::detectFeatures()+0x704>
c0017536:	8b 15 c8 30 02 c0    	mov    edx,DWORD PTR ds:0xc00230c8
c001753c:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0017542:	a8 01                	test   al,0x1
c0017544:	74 10                	je     c0017556 <CPU::detectFeatures()+0x704>
c0017546:	83 e0 fe             	and    eax,0xfffffffe
c0017549:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c001754f:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c0017556:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001755c:	c1 e8 0e             	shr    eax,0xe
c001755f:	3c 05                	cmp    al,0x5
c0017561:	0f 85 ce 02 00 00    	jne    c0017835 <CPU::detectFeatures()+0x9e3>
c0017567:	56                   	push   esi
c0017568:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c001756e:	83 e0 0f             	and    eax,0xf
c0017571:	50                   	push   eax
c0017572:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0017578:	66 c1 e8 06          	shr    ax,0x6
c001757c:	0f b6 c0             	movzx  eax,al
c001757f:	50                   	push   eax
c0017580:	6a 05                	push   0x5
c0017582:	e8 7a f6 ff ff       	call   c0016c01 <AMD_K6_writeback(int, int, int)>
c0017587:	e9 1f 02 00 00       	jmp    c00177ab <CPU::detectFeatures()+0x959>
c001758c:	8d 50 fd             	lea    edx,[eax-0x3]
c001758f:	83 fa 01             	cmp    edx,0x1
c0017592:	76 09                	jbe    c001759d <CPU::detectFeatures()+0x74b>
c0017594:	83 f8 06             	cmp    eax,0x6
c0017597:	0f 85 91 01 00 00    	jne    c001772e <CPU::detectFeatures()+0x8dc>
c001759d:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00175a3:	c1 ea 0e             	shr    edx,0xe
c00175a6:	80 fa 05             	cmp    dl,0x5
c00175a9:	75 7b                	jne    c0017626 <CPU::detectFeatures()+0x7d4>
c00175ab:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00175b1:	66 81 e2 c0 3f       	and    dx,0x3fc0
c00175b6:	66 81 fa 00 01       	cmp    dx,0x100
c00175bb:	75 0c                	jne    c00175c9 <CPU::detectFeatures()+0x777>
c00175bd:	51                   	push   ecx
c00175be:	51                   	push   ecx
c00175bf:	68 3a 19 02 c0       	push   0xc002193a
c00175c4:	e9 dc 01 00 00       	jmp    c00177a5 <CPU::detectFeatures()+0x953>
c00175c9:	66 81 fa 00 02       	cmp    dx,0x200
c00175ce:	75 0c                	jne    c00175dc <CPU::detectFeatures()+0x78a>
c00175d0:	52                   	push   edx
c00175d1:	52                   	push   edx
c00175d2:	68 4d 19 02 c0       	push   0xc002194d
c00175d7:	e9 c9 01 00 00       	jmp    c00177a5 <CPU::detectFeatures()+0x953>
c00175dc:	66 81 fa 40 02       	cmp    dx,0x240
c00175e1:	75 0c                	jne    c00175ef <CPU::detectFeatures()+0x79d>
c00175e3:	50                   	push   eax
c00175e4:	50                   	push   eax
c00175e5:	68 5f 19 02 c0       	push   0xc002195f
c00175ea:	e9 b6 01 00 00       	jmp    c00177a5 <CPU::detectFeatures()+0x953>
c00175ef:	83 f8 06             	cmp    eax,0x6
c00175f2:	75 0c                	jne    c0017600 <CPU::detectFeatures()+0x7ae>
c00175f4:	50                   	push   eax
c00175f5:	50                   	push   eax
c00175f6:	68 71 19 02 c0       	push   0xc0021971
c00175fb:	e9 a5 01 00 00       	jmp    c00177a5 <CPU::detectFeatures()+0x953>
c0017600:	83 f8 04             	cmp    eax,0x4
c0017603:	75 0c                	jne    c0017611 <CPU::detectFeatures()+0x7bf>
c0017605:	50                   	push   eax
c0017606:	50                   	push   eax
c0017607:	68 7d 19 02 c0       	push   0xc002197d
c001760c:	e9 94 01 00 00       	jmp    c00177a5 <CPU::detectFeatures()+0x953>
c0017611:	83 f8 03             	cmp    eax,0x3
c0017614:	0f 85 1b 02 00 00    	jne    c0017835 <CPU::detectFeatures()+0x9e3>
c001761a:	50                   	push   eax
c001761b:	50                   	push   eax
c001761c:	68 85 19 02 c0       	push   0xc0021985
c0017621:	e9 7f 01 00 00       	jmp    c00177a5 <CPU::detectFeatures()+0x953>
c0017626:	80 fa 06             	cmp    dl,0x6
c0017629:	0f 85 db 00 00 00    	jne    c001770a <CPU::detectFeatures()+0x8b8>
c001762f:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0017635:	66 81 e2 c0 3f       	and    dx,0x3fc0
c001763a:	66 81 fa 80 01       	cmp    dx,0x180
c001763f:	75 0c                	jne    c001764d <CPU::detectFeatures()+0x7fb>
c0017641:	50                   	push   eax
c0017642:	50                   	push   eax
c0017643:	68 90 19 02 c0       	push   0xc0021990
c0017648:	e9 58 01 00 00       	jmp    c00177a5 <CPU::detectFeatures()+0x953>
c001764d:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c0017653:	66 f7 c1 80 ff       	test   cx,0xff80
c0017658:	75 0c                	jne    c0017666 <CPU::detectFeatures()+0x814>
c001765a:	50                   	push   eax
c001765b:	50                   	push   eax
c001765c:	68 a0 19 02 c0       	push   0xc00219a0
c0017661:	e9 3f 01 00 00       	jmp    c00177a5 <CPU::detectFeatures()+0x953>
c0017666:	66 81 fa 40 02       	cmp    dx,0x240
c001766b:	75 0c                	jne    c0017679 <CPU::detectFeatures()+0x827>
c001766d:	55                   	push   ebp
c001766e:	55                   	push   ebp
c001766f:	68 a7 19 02 c0       	push   0xc00219a7
c0017674:	e9 2c 01 00 00       	jmp    c00177a5 <CPU::detectFeatures()+0x953>
c0017679:	66 81 fa 80 02       	cmp    dx,0x280
c001767e:	75 0c                	jne    c001768c <CPU::detectFeatures()+0x83a>
c0017680:	57                   	push   edi
c0017681:	57                   	push   edi
c0017682:	68 b0 19 02 c0       	push   0xc00219b0
c0017687:	e9 19 01 00 00       	jmp    c00177a5 <CPU::detectFeatures()+0x953>
c001768c:	66 81 fa 40 03       	cmp    dx,0x340
c0017691:	74 ed                	je     c0017680 <CPU::detectFeatures()+0x82e>
c0017693:	66 81 fa c0 03       	cmp    dx,0x3c0
c0017698:	75 0c                	jne    c00176a6 <CPU::detectFeatures()+0x854>
c001769a:	56                   	push   esi
c001769b:	56                   	push   esi
c001769c:	68 b7 19 02 c0       	push   0xc00219b7
c00176a1:	e9 ff 00 00 00       	jmp    c00177a5 <CPU::detectFeatures()+0x953>
c00176a6:	83 f8 06             	cmp    eax,0x6
c00176a9:	0f 84 45 ff ff ff    	je     c00175f4 <CPU::detectFeatures()+0x7a2>
c00176af:	83 f8 04             	cmp    eax,0x4
c00176b2:	0f 84 4d ff ff ff    	je     c0017605 <CPU::detectFeatures()+0x7b3>
c00176b8:	83 f8 03             	cmp    eax,0x3
c00176bb:	0f 85 74 01 00 00    	jne    c0017835 <CPU::detectFeatures()+0x9e3>
c00176c1:	51                   	push   ecx
c00176c2:	51                   	push   ecx
c00176c3:	68 c0 19 02 c0       	push   0xc00219c0
c00176c8:	53                   	push   ebx
c00176c9:	e8 96 be ff ff       	call   c0013564 <Device::setName(char const*)>
c00176ce:	b1 c1                	mov    cl,0xc1
c00176d0:	88 c8                	mov    al,cl
c00176d2:	e6 22                	out    0x22,al
c00176d4:	e4 23                	in     al,0x23
c00176d6:	88 c2                	mov    dl,al
c00176d8:	88 c8                	mov    al,cl
c00176da:	e6 22                	out    0x22,al
c00176dc:	88 d0                	mov    al,dl
c00176de:	83 c8 10             	or     eax,0x10
c00176e1:	e6 23                	out    0x23,al
c00176e3:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c00176ea:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00176ed:	89 d0                	mov    eax,edx
c00176ef:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c00176f5:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c00176f9:	40                   	inc    eax
c00176fa:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0017700:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0017705:	e9 a1 00 00 00       	jmp    c00177ab <CPU::detectFeatures()+0x959>
c001770a:	83 f8 06             	cmp    eax,0x6
c001770d:	0f 84 e1 fe ff ff    	je     c00175f4 <CPU::detectFeatures()+0x7a2>
c0017713:	83 f8 04             	cmp    eax,0x4
c0017716:	0f 84 e9 fe ff ff    	je     c0017605 <CPU::detectFeatures()+0x7b3>
c001771c:	83 f8 03             	cmp    eax,0x3
c001771f:	0f 85 10 01 00 00    	jne    c0017835 <CPU::detectFeatures()+0x9e3>
c0017725:	52                   	push   edx
c0017726:	52                   	push   edx
c0017727:	68 cb 19 02 c0       	push   0xc00219cb
c001772c:	eb 77                	jmp    c00177a5 <CPU::detectFeatures()+0x953>
c001772e:	83 f8 07             	cmp    eax,0x7
c0017731:	75 09                	jne    c001773c <CPU::detectFeatures()+0x8ea>
c0017733:	50                   	push   eax
c0017734:	50                   	push   eax
c0017735:	68 d5 19 02 c0       	push   0xc00219d5
c001773a:	eb 69                	jmp    c00177a5 <CPU::detectFeatures()+0x953>
c001773c:	83 f8 0a             	cmp    eax,0xa
c001773f:	75 09                	jne    c001774a <CPU::detectFeatures()+0x8f8>
c0017741:	50                   	push   eax
c0017742:	50                   	push   eax
c0017743:	68 e0 19 02 c0       	push   0xc00219e0
c0017748:	eb 5b                	jmp    c00177a5 <CPU::detectFeatures()+0x953>
c001774a:	83 f8 0b             	cmp    eax,0xb
c001774d:	75 09                	jne    c0017758 <CPU::detectFeatures()+0x906>
c001774f:	50                   	push   eax
c0017750:	50                   	push   eax
c0017751:	68 e8 19 02 c0       	push   0xc00219e8
c0017756:	eb 4d                	jmp    c00177a5 <CPU::detectFeatures()+0x953>
c0017758:	83 f8 08             	cmp    eax,0x8
c001775b:	75 09                	jne    c0017766 <CPU::detectFeatures()+0x914>
c001775d:	50                   	push   eax
c001775e:	50                   	push   eax
c001775f:	68 f1 19 02 c0       	push   0xc00219f1
c0017764:	eb 3f                	jmp    c00177a5 <CPU::detectFeatures()+0x953>
c0017766:	83 f8 09             	cmp    eax,0x9
c0017769:	75 09                	jne    c0017774 <CPU::detectFeatures()+0x922>
c001776b:	50                   	push   eax
c001776c:	50                   	push   eax
c001776d:	68 f9 19 02 c0       	push   0xc00219f9
c0017772:	eb 31                	jmp    c00177a5 <CPU::detectFeatures()+0x953>
c0017774:	83 f8 05             	cmp    eax,0x5
c0017777:	75 09                	jne    c0017782 <CPU::detectFeatures()+0x930>
c0017779:	50                   	push   eax
c001777a:	50                   	push   eax
c001777b:	68 01 1a 02 c0       	push   0xc0021a01
c0017780:	eb 23                	jmp    c00177a5 <CPU::detectFeatures()+0x953>
c0017782:	83 f8 0c             	cmp    eax,0xc
c0017785:	75 09                	jne    c0017790 <CPU::detectFeatures()+0x93e>
c0017787:	55                   	push   ebp
c0017788:	55                   	push   ebp
c0017789:	68 0f 1a 02 c0       	push   0xc0021a0f
c001778e:	eb 15                	jmp    c00177a5 <CPU::detectFeatures()+0x953>
c0017790:	83 f8 0d             	cmp    eax,0xd
c0017793:	75 09                	jne    c001779e <CPU::detectFeatures()+0x94c>
c0017795:	57                   	push   edi
c0017796:	57                   	push   edi
c0017797:	68 1a 1a 02 c0       	push   0xc0021a1a
c001779c:	eb 07                	jmp    c00177a5 <CPU::detectFeatures()+0x953>
c001779e:	56                   	push   esi
c001779f:	56                   	push   esi
c00177a0:	68 2e 1a 02 c0       	push   0xc0021a2e
c00177a5:	53                   	push   ebx
c00177a6:	e8 b9 bd ff ff       	call   c0013564 <Device::setName(char const*)>
c00177ab:	83 c4 10             	add    esp,0x10
c00177ae:	e9 82 00 00 00       	jmp    c0017835 <CPU::detectFeatures()+0x9e3>
c00177b3:	51                   	push   ecx
c00177b4:	51                   	push   ecx
c00177b5:	68 7a 18 02 c0       	push   0xc002187a
c00177ba:	57                   	push   edi
c00177bb:	e8 e7 8e fe ff       	call   c00006a7 <strcpy>
c00177c0:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00177ca:	e8 b0 89 fe ff       	call   c000017f <is486>
c00177cf:	83 c4 10             	add    esp,0x10
c00177d2:	85 c0                	test   eax,eax
c00177d4:	74 2d                	je     c0017803 <CPU::detectFeatures()+0x9b1>
c00177d6:	52                   	push   edx
c00177d7:	52                   	push   edx
c00177d8:	68 3a 1a 02 c0       	push   0xc0021a3a
c00177dd:	53                   	push   ebx
c00177de:	e8 81 bd ff ff       	call   c0013564 <Device::setName(char const*)>
c00177e3:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c00177ea:	e8 06 6e 00 00       	call   c001e5f5 <CPU::readCR0()>
c00177ef:	83 c4 10             	add    esp,0x10
c00177f2:	83 e0 14             	and    eax,0x14
c00177f5:	83 f8 04             	cmp    eax,0x4
c00177f8:	75 1f                	jne    c0017819 <CPU::detectFeatures()+0x9c7>
c00177fa:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0017801:	eb 32                	jmp    c0017835 <CPU::detectFeatures()+0x9e3>
c0017803:	50                   	push   eax
c0017804:	50                   	push   eax
c0017805:	68 45 1a 02 c0       	push   0xc0021a45
c001780a:	53                   	push   ebx
c001780b:	e8 54 bd ff ff       	call   c0013564 <Device::setName(char const*)>
c0017810:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c0017817:	eb d1                	jmp    c00177ea <CPU::detectFeatures()+0x998>
c0017819:	e8 3c 89 fe ff       	call   c000015a <hasLegacyFPU>
c001781e:	83 e0 01             	and    eax,0x1
c0017821:	8d 14 00             	lea    edx,[eax+eax*1]
c0017824:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c001782a:	83 e0 fd             	and    eax,0xfffffffd
c001782d:	09 d0                	or     eax,edx
c001782f:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0017835:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c001783c:	83 c4 4c             	add    esp,0x4c
c001783f:	5b                   	pop    ebx
c0017840:	5e                   	pop    esi
c0017841:	5f                   	pop    edi
c0017842:	5d                   	pop    ebp
c0017843:	c3                   	ret    

c0017844 <CPU::setupSMEP()>:
c0017844:	83 ec 0c             	sub    esp,0xc
c0017847:	e8 df 6d 00 00       	call   c001e62b <CPU::readCR4()>
c001784c:	0d 00 00 10 00       	or     eax,0x100000
c0017851:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017855:	83 c4 0c             	add    esp,0xc
c0017858:	e9 f4 74 00 00       	jmp    c001ed51 <CPU::writeCR4(unsigned long)>
c001785d:	90                   	nop

c001785e <CPU::setupUMIP()>:
c001785e:	83 ec 0c             	sub    esp,0xc
c0017861:	e8 c5 6d 00 00       	call   c001e62b <CPU::readCR4()>
c0017866:	80 cc 08             	or     ah,0x8
c0017869:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001786d:	83 c4 0c             	add    esp,0xc
c0017870:	e9 dc 74 00 00       	jmp    c001ed51 <CPU::writeCR4(unsigned long)>
c0017875:	90                   	nop

c0017876 <CPU::setupTSC()>:
c0017876:	83 ec 0c             	sub    esp,0xc
c0017879:	e8 ad 6d 00 00       	call   c001e62b <CPU::readCR4()>
c001787e:	83 c8 04             	or     eax,0x4
c0017881:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017885:	83 c4 0c             	add    esp,0xc
c0017888:	e9 c4 74 00 00       	jmp    c001ed51 <CPU::writeCR4(unsigned long)>
c001788d:	90                   	nop

c001788e <CPU::setupLargePages()>:
c001788e:	83 ec 0c             	sub    esp,0xc
c0017891:	e8 95 6d 00 00       	call   c001e62b <CPU::readCR4()>
c0017896:	83 c8 10             	or     eax,0x10
c0017899:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001789d:	83 c4 0c             	add    esp,0xc
c00178a0:	e9 ac 74 00 00       	jmp    c001ed51 <CPU::writeCR4(unsigned long)>
c00178a5:	90                   	nop

c00178a6 <CPU::setupPAT()>:
c00178a6:	a1 c8 30 02 c0       	mov    eax,ds:0xc00230c8
c00178ab:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c00178b2:	74 2c                	je     c00178e0 <CPU::setupPAT()+0x3a>
c00178b4:	53                   	push   ebx
c00178b5:	83 ec 10             	sub    esp,0x10
c00178b8:	68 77 02 00 00       	push   0x277
c00178bd:	50                   	push   eax
c00178be:	e8 01 39 ff ff       	call   c000b1c4 <Computer::rdmsr(unsigned int)>
c00178c3:	83 e2 f8             	and    edx,0xfffffff8
c00178c6:	83 ca 01             	or     edx,0x1
c00178c9:	52                   	push   edx
c00178ca:	50                   	push   eax
c00178cb:	68 77 02 00 00       	push   0x277
c00178d0:	ff 35 c8 30 02 c0    	push   DWORD PTR ds:0xc00230c8
c00178d6:	e8 15 39 ff ff       	call   c000b1f0 <Computer::wrmsr(unsigned int, unsigned long long)>
c00178db:	83 c4 28             	add    esp,0x28
c00178de:	5b                   	pop    ebx
c00178df:	c3                   	ret    
c00178e0:	c3                   	ret    
c00178e1:	90                   	nop

c00178e2 <CPU::setupMTRR()>:
c00178e2:	c3                   	ret    
c00178e3:	90                   	nop

c00178e4 <CPU::setupGlobalPages()>:
c00178e4:	83 ec 0c             	sub    esp,0xc
c00178e7:	e8 3f 6d 00 00       	call   c001e62b <CPU::readCR4()>
c00178ec:	0c 80                	or     al,0x80
c00178ee:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00178f2:	83 c4 0c             	add    esp,0xc
c00178f5:	e9 57 74 00 00       	jmp    c001ed51 <CPU::writeCR4(unsigned long)>

c00178fa <CPU::allowUsermodeDataAccess()>:
c00178fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00178fe:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0017905:	74 03                	je     c001790a <CPU::allowUsermodeDataAccess()+0x10>
c0017907:	0f 01 cb             	stac   
c001790a:	c3                   	ret    
c001790b:	90                   	nop

c001790c <CPU::prohibitUsermodeDataAccess()>:
c001790c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017910:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0017917:	74 03                	je     c001791c <CPU::prohibitUsermodeDataAccess()+0x10>
c0017919:	0f 01 ca             	clac   
c001791c:	c3                   	ret    
c001791d:	90                   	nop

c001791e <CPU::setupSMAP()>:
c001791e:	53                   	push   ebx
c001791f:	83 ec 08             	sub    esp,0x8
c0017922:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017926:	e8 00 6d 00 00       	call   c001e62b <CPU::readCR4()>
c001792b:	83 ec 0c             	sub    esp,0xc
c001792e:	0d 00 00 20 00       	or     eax,0x200000
c0017933:	50                   	push   eax
c0017934:	e8 18 74 00 00       	call   c001ed51 <CPU::writeCR4(unsigned long)>
c0017939:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001793d:	83 c4 18             	add    esp,0x18
c0017940:	5b                   	pop    ebx
c0017941:	eb c9                	jmp    c001790c <CPU::prohibitUsermodeDataAccess()>
c0017943:	90                   	nop

c0017944 <CPU::setupFeatures()>:
c0017944:	53                   	push   ebx
c0017945:	83 ec 08             	sub    esp,0x8
c0017948:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001794c:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c0017953:	74 0c                	je     c0017961 <CPU::setupFeatures()+0x1d>
c0017955:	83 ec 0c             	sub    esp,0xc
c0017958:	53                   	push   ebx
c0017959:	e8 e6 fe ff ff       	call   c0017844 <CPU::setupSMEP()>
c001795e:	83 c4 10             	add    esp,0x10
c0017961:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c0017968:	74 0c                	je     c0017976 <CPU::setupFeatures()+0x32>
c001796a:	83 ec 0c             	sub    esp,0xc
c001796d:	53                   	push   ebx
c001796e:	e8 ab ff ff ff       	call   c001791e <CPU::setupSMAP()>
c0017973:	83 c4 10             	add    esp,0x10
c0017976:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c001797d:	74 0c                	je     c001798b <CPU::setupFeatures()+0x47>
c001797f:	83 ec 0c             	sub    esp,0xc
c0017982:	53                   	push   ebx
c0017983:	e8 d6 fe ff ff       	call   c001785e <CPU::setupUMIP()>
c0017988:	83 c4 10             	add    esp,0x10
c001798b:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0017992:	74 0c                	je     c00179a0 <CPU::setupFeatures()+0x5c>
c0017994:	83 ec 0c             	sub    esp,0xc
c0017997:	53                   	push   ebx
c0017998:	e8 d9 fe ff ff       	call   c0017876 <CPU::setupTSC()>
c001799d:	83 c4 10             	add    esp,0x10
c00179a0:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c00179a7:	74 0c                	je     c00179b5 <CPU::setupFeatures()+0x71>
c00179a9:	83 ec 0c             	sub    esp,0xc
c00179ac:	53                   	push   ebx
c00179ad:	e8 dc fe ff ff       	call   c001788e <CPU::setupLargePages()>
c00179b2:	83 c4 10             	add    esp,0x10
c00179b5:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c00179bc:	74 0c                	je     c00179ca <CPU::setupFeatures()+0x86>
c00179be:	83 ec 0c             	sub    esp,0xc
c00179c1:	53                   	push   ebx
c00179c2:	e8 1d ff ff ff       	call   c00178e4 <CPU::setupGlobalPages()>
c00179c7:	83 c4 10             	add    esp,0x10
c00179ca:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c00179d1:	74 0d                	je     c00179e0 <CPU::setupFeatures()+0x9c>
c00179d3:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00179d7:	83 c4 08             	add    esp,0x8
c00179da:	5b                   	pop    ebx
c00179db:	e9 c6 fe ff ff       	jmp    c00178a6 <CPU::setupPAT()>
c00179e0:	83 c4 08             	add    esp,0x8
c00179e3:	5b                   	pop    ebx
c00179e4:	c3                   	ret    
c00179e5:	90                   	nop

c00179e6 <CPU::open(int, int, void*)>:
c00179e6:	57                   	push   edi
c00179e7:	56                   	push   esi
c00179e8:	53                   	push   ebx
c00179e9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00179ed:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00179f1:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c00179f7:	83 ec 0c             	sub    esp,0xc
c00179fa:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0017a00:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0017a06:	50                   	push   eax
c0017a07:	e8 2a 4a ff ff       	call   c000c436 <GDT::setup()>
c0017a0c:	83 c4 0c             	add    esp,0xc
c0017a0f:	6a 00                	push   0x0
c0017a11:	68 ef be ad de       	push   0xdeadbeef
c0017a16:	57                   	push   edi
c0017a17:	e8 f2 8f ff ff       	call   c0010a0e <TSS::setup(unsigned long, unsigned long)>
c0017a1c:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017a1f:	e8 ca 8f ff ff       	call   c00109ee <TSS::flush()>
c0017a24:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0017a2a:	89 04 24             	mov    DWORD PTR [esp],eax
c0017a2d:	e8 5e 4c ff ff       	call   c000c690 <IDT::setup()>
c0017a32:	c7 04 24 00 04 00 00 	mov    DWORD PTR [esp],0x400
c0017a39:	e8 0a 73 00 00       	call   c001ed48 <CPU::writeDR7(unsigned long)>
c0017a3e:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0017a48:	e8 20 5c ff ff       	call   c000d66d <Phys::allocatePage()>
c0017a4d:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0017a53:	89 30                	mov    DWORD PTR [eax],esi
c0017a55:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0017a5b:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0017a5e:	58                   	pop    eax
c0017a5f:	5a                   	pop    edx
c0017a60:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0017a66:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0017a6a:	e8 7f 9d ff ff       	call   c00117ee <VAS::setCPUSpecific(unsigned long)>
c0017a6f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017a72:	e8 db f3 ff ff       	call   c0016e52 <CPU::detectFeatures()>
c0017a77:	e8 40 c8 ff ff       	call   c00142bc <setupInterruptController()>
c0017a7c:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0017a82:	a1 74 32 02 c0       	mov    eax,ds:0xc0023274
c0017a87:	83 e0 10             	and    eax,0x10
c0017a8a:	83 f8 01             	cmp    eax,0x1
c0017a8d:	19 c0                	sbb    eax,eax
c0017a8f:	83 e0 46             	and    eax,0x46
c0017a92:	83 c0 1e             	add    eax,0x1e
c0017a95:	89 04 24             	mov    DWORD PTR [esp],eax
c0017a98:	e8 03 da ff ff       	call   c00154a0 <setupTimer(int)>
c0017a9d:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0017aa3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017aa6:	e8 99 fe ff ff       	call   c0017944 <CPU::setupFeatures()>
c0017aab:	83 c4 10             	add    esp,0x10
c0017aae:	31 c0                	xor    eax,eax
c0017ab0:	5b                   	pop    ebx
c0017ab1:	5e                   	pop    esi
c0017ab2:	5f                   	pop    edi
c0017ab3:	c3                   	ret    

c0017ab4 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0017ab4:	55                   	push   ebp
c0017ab5:	57                   	push   edi
c0017ab6:	56                   	push   esi
c0017ab7:	53                   	push   ebx
c0017ab8:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0017abe:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0017ac5:	8a 1e                	mov    bl,BYTE PTR [esi]
c0017ac7:	8d 6e 01             	lea    ebp,[esi+0x1]
c0017aca:	80 fb 40             	cmp    bl,0x40
c0017acd:	75 1b                	jne    c0017aea <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c0017acf:	8a 16                	mov    dl,BYTE PTR [esi]
c0017ad1:	84 d2                	test   dl,dl
c0017ad3:	0f 84 f1 00 00 00    	je     c0017bca <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0017ad9:	8d 46 01             	lea    eax,[esi+0x1]
c0017adc:	80 fa 3a             	cmp    dl,0x3a
c0017adf:	74 04                	je     c0017ae5 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c0017ae1:	89 c6                	mov    esi,eax
c0017ae3:	eb ea                	jmp    c0017acf <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c0017ae5:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0017ae8:	89 c6                	mov    esi,eax
c0017aea:	50                   	push   eax
c0017aeb:	6a 40                	push   0x40
c0017aed:	6a 00                	push   0x0
c0017aef:	8d 44 24 24          	lea    eax,[esp+0x24]
c0017af3:	50                   	push   eax
c0017af4:	e8 0f 8b fe ff       	call   c0000608 <memset>
c0017af9:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0017b00:	31 c0                	xor    eax,eax
c0017b02:	83 c4 10             	add    esp,0x10
c0017b05:	8a 0f                	mov    cl,BYTE PTR [edi]
c0017b07:	84 c9                	test   cl,cl
c0017b09:	0f 84 bb 00 00 00    	je     c0017bca <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0017b0f:	3d c7 00 00 00       	cmp    eax,0xc7
c0017b14:	0f 8f b0 00 00 00    	jg     c0017bca <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0017b1a:	80 f9 0a             	cmp    cl,0xa
c0017b1d:	0f 85 98 00 00 00    	jne    c0017bbb <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c0017b23:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0017b28:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c0017b2c:	a8 df                	test   al,0xdf
c0017b2e:	0f 94 c1             	sete   cl
c0017b31:	3c 23                	cmp    al,0x23
c0017b33:	0f 94 c2             	sete   dl
c0017b36:	08 d1                	or     cl,dl
c0017b38:	75 4a                	jne    c0017b84 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0017b3a:	8d 50 f7             	lea    edx,[eax-0x9]
c0017b3d:	80 fa 01             	cmp    dl,0x1
c0017b40:	76 42                	jbe    c0017b84 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0017b42:	3c 5b                	cmp    al,0x5b
c0017b44:	75 42                	jne    c0017b88 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c0017b46:	80 fb 40             	cmp    bl,0x40
c0017b49:	75 39                	jne    c0017b84 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0017b4b:	83 ec 0c             	sub    esp,0xc
c0017b4e:	8d 54 24 65          	lea    edx,[esp+0x65]
c0017b52:	52                   	push   edx
c0017b53:	e8 cd 8a fe ff       	call   c0000625 <strlen>
c0017b58:	83 c4 10             	add    esp,0x10
c0017b5b:	83 f8 3f             	cmp    eax,0x3f
c0017b5e:	77 6a                	ja     c0017bca <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0017b60:	50                   	push   eax
c0017b61:	50                   	push   eax
c0017b62:	8d 54 24 61          	lea    edx,[esp+0x61]
c0017b66:	52                   	push   edx
c0017b67:	8d 54 24 24          	lea    edx,[esp+0x24]
c0017b6b:	52                   	push   edx
c0017b6c:	e8 36 8b fe ff       	call   c00006a7 <strcpy>
c0017b71:	58                   	pop    eax
c0017b72:	8d 54 24 24          	lea    edx,[esp+0x24]
c0017b76:	52                   	push   edx
c0017b77:	e8 a9 8a fe ff       	call   c0000625 <strlen>
c0017b7c:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0017b81:	83 c4 10             	add    esp,0x10
c0017b84:	31 d2                	xor    edx,edx
c0017b86:	eb 3a                	jmp    c0017bc2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c0017b88:	80 fb 40             	cmp    bl,0x40
c0017b8b:	74 06                	je     c0017b93 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c0017b8d:	8d 44 24 58          	lea    eax,[esp+0x58]
c0017b91:	eb 20                	jmp    c0017bb3 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c0017b93:	50                   	push   eax
c0017b94:	50                   	push   eax
c0017b95:	55                   	push   ebp
c0017b96:	8d 44 24 24          	lea    eax,[esp+0x24]
c0017b9a:	50                   	push   eax
c0017b9b:	e8 58 8b fe ff       	call   c00006f8 <strcmp>
c0017ba0:	83 c4 10             	add    esp,0x10
c0017ba3:	85 c0                	test   eax,eax
c0017ba5:	75 dd                	jne    c0017b84 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0017ba7:	eb e4                	jmp    c0017b8d <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c0017ba9:	8d 50 01             	lea    edx,[eax+0x1]
c0017bac:	80 f9 3d             	cmp    cl,0x3d
c0017baf:	74 1d                	je     c0017bce <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c0017bb1:	89 d0                	mov    eax,edx
c0017bb3:	8a 08                	mov    cl,BYTE PTR [eax]
c0017bb5:	84 c9                	test   cl,cl
c0017bb7:	75 f0                	jne    c0017ba9 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c0017bb9:	eb 0f                	jmp    c0017bca <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0017bbb:	8d 50 01             	lea    edx,[eax+0x1]
c0017bbe:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0017bc2:	47                   	inc    edi
c0017bc3:	89 d0                	mov    eax,edx
c0017bc5:	e9 3b ff ff ff       	jmp    c0017b05 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c0017bca:	31 c0                	xor    eax,eax
c0017bcc:	eb 33                	jmp    c0017c01 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c0017bce:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0017bd2:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0017bd5:	50                   	push   eax
c0017bd6:	50                   	push   eax
c0017bd7:	8d 44 24 60          	lea    eax,[esp+0x60]
c0017bdb:	50                   	push   eax
c0017bdc:	56                   	push   esi
c0017bdd:	e8 16 8b fe ff       	call   c00006f8 <strcmp>
c0017be2:	83 c4 10             	add    esp,0x10
c0017be5:	85 c0                	test   eax,eax
c0017be7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017beb:	75 97                	jne    c0017b84 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0017bed:	51                   	push   ecx
c0017bee:	51                   	push   ecx
c0017bef:	52                   	push   edx
c0017bf0:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0017bf7:	e8 ab 8a fe ff       	call   c00006a7 <strcpy>
c0017bfc:	83 c4 10             	add    esp,0x10
c0017bff:	b0 01                	mov    al,0x1
c0017c01:	81 c4 2c 01 00 00    	add    esp,0x12c
c0017c07:	5b                   	pop    ebx
c0017c08:	5e                   	pop    esi
c0017c09:	5f                   	pop    edi
c0017c0a:	5d                   	pop    ebp
c0017c0b:	c3                   	ret    

c0017c0c <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0017c0c:	57                   	push   edi
c0017c0d:	56                   	push   esi
c0017c0e:	53                   	push   ebx
c0017c0f:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0017c15:	8b b4 24 2c 01 00 00 	mov    esi,DWORD PTR [esp+0x12c]
c0017c1c:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0017c23:	53                   	push   ebx
c0017c24:	e8 fc 89 fe ff       	call   c0000625 <strlen>
c0017c29:	89 34 24             	mov    DWORD PTR [esp],esi
c0017c2c:	89 c7                	mov    edi,eax
c0017c2e:	e8 f2 89 fe ff       	call   c0000625 <strlen>
c0017c33:	83 c4 10             	add    esp,0x10
c0017c36:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0017c3a:	31 ff                	xor    edi,edi
c0017c3c:	3d ff 00 00 00       	cmp    eax,0xff
c0017c41:	0f 87 18 01 00 00    	ja     c0017d5f <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x153>
c0017c47:	51                   	push   ecx
c0017c48:	51                   	push   ecx
c0017c49:	56                   	push   esi
c0017c4a:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0017c4e:	56                   	push   esi
c0017c4f:	e8 53 8a fe ff       	call   c00006a7 <strcpy>
c0017c54:	58                   	pop    eax
c0017c55:	5a                   	pop    edx
c0017c56:	68 f6 05 02 c0       	push   0xc00205f6
c0017c5b:	56                   	push   esi
c0017c5c:	e8 fd 8a fe ff       	call   c000075e <strcat>
c0017c61:	59                   	pop    ecx
c0017c62:	58                   	pop    eax
c0017c63:	53                   	push   ebx
c0017c64:	56                   	push   esi
c0017c65:	e8 f4 8a fe ff       	call   c000075e <strcat>
c0017c6a:	58                   	pop    eax
c0017c6b:	5a                   	pop    edx
c0017c6c:	68 7c 1a 02 c0       	push   0xc0021a7c
c0017c71:	56                   	push   esi
c0017c72:	e8 e7 8a fe ff       	call   c000075e <strcat>
c0017c77:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0017c7e:	e8 f5 a3 ff ff       	call   c0012078 <operator new(unsigned long)>
c0017c83:	83 c4 0c             	add    esp,0xc
c0017c86:	89 c3                	mov    ebx,eax
c0017c88:	ff 35 1c 33 02 c0    	push   DWORD PTR ds:0xc002331c
c0017c8e:	56                   	push   esi
c0017c8f:	50                   	push   eax
c0017c90:	e8 11 a8 ff ff       	call   c00124a6 <File::File(char const*, Process*)>
c0017c95:	59                   	pop    ecx
c0017c96:	5e                   	pop    esi
c0017c97:	6a 01                	push   0x1
c0017c99:	53                   	push   ebx
c0017c9a:	e8 6b a8 ff ff       	call   c001250a <File::open(FileOpenMode)>
c0017c9f:	83 c4 10             	add    esp,0x10
c0017ca2:	85 c0                	test   eax,eax
c0017ca4:	74 08                	je     c0017cae <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa2>
c0017ca6:	83 ec 0c             	sub    esp,0xc
c0017ca9:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017cab:	53                   	push   ebx
c0017cac:	eb 2e                	jmp    c0017cdc <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xd0>
c0017cae:	52                   	push   edx
c0017caf:	8d 44 24 07          	lea    eax,[esp+0x7]
c0017cb3:	50                   	push   eax
c0017cb4:	8d 44 24 10          	lea    eax,[esp+0x10]
c0017cb8:	50                   	push   eax
c0017cb9:	53                   	push   ebx
c0017cba:	e8 f7 aa ff ff       	call   c00127b6 <File::stat(unsigned long long*, bool*)>
c0017cbf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017cc3:	83 c4 10             	add    esp,0x10
c0017cc6:	89 c1                	mov    ecx,eax
c0017cc8:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c0017ccc:	75 13                	jne    c0017ce1 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xd5>
c0017cce:	83 ec 0c             	sub    esp,0xc
c0017cd1:	53                   	push   ebx
c0017cd2:	e8 91 a8 ff ff       	call   c0012568 <File::close()>
c0017cd7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017cd9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017cdc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017cdf:	eb 7b                	jmp    c0017d5c <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x150>
c0017ce1:	83 ec 0c             	sub    esp,0xc
c0017ce4:	50                   	push   eax
c0017ce5:	e8 d9 53 ff ff       	call   c000d0c3 <malloc>
c0017cea:	89 c6                	mov    esi,eax
c0017cec:	58                   	pop    eax
c0017ced:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017cef:	8d 54 24 10          	lea    edx,[esp+0x10]
c0017cf3:	52                   	push   edx
c0017cf4:	56                   	push   esi
c0017cf5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017cf9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017cfd:	53                   	push   ebx
c0017cfe:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017d01:	83 c4 20             	add    esp,0x20
c0017d04:	85 c0                	test   eax,eax
c0017d06:	75 0a                	jne    c0017d12 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0017d08:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017d0c:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0017d10:	74 18                	je     c0017d2a <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x11e>
c0017d12:	83 ec 0c             	sub    esp,0xc
c0017d15:	31 ff                	xor    edi,edi
c0017d17:	53                   	push   ebx
c0017d18:	e8 4b a8 ff ff       	call   c0012568 <File::close()>
c0017d1d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017d1f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017d22:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017d25:	83 c4 10             	add    esp,0x10
c0017d28:	eb 35                	jmp    c0017d5f <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x153>
c0017d2a:	83 ec 0c             	sub    esp,0xc
c0017d2d:	53                   	push   ebx
c0017d2e:	e8 35 a8 ff ff       	call   c0012568 <File::close()>
c0017d33:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017d35:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017d38:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017d3b:	83 c4 0c             	add    esp,0xc
c0017d3e:	ff b4 24 30 01 00 00 	push   DWORD PTR [esp+0x130]
c0017d45:	ff b4 24 30 01 00 00 	push   DWORD PTR [esp+0x130]
c0017d4c:	56                   	push   esi
c0017d4d:	e8 62 fd ff ff       	call   c0017ab4 <Reg::findLineFromLoadedData(char*, char*, char*)>
c0017d52:	89 34 24             	mov    DWORD PTR [esp],esi
c0017d55:	89 c7                	mov    edi,eax
c0017d57:	e8 77 53 ff ff       	call   c000d0d3 <free>
c0017d5c:	83 c4 10             	add    esp,0x10
c0017d5f:	81 c4 10 01 00 00    	add    esp,0x110
c0017d65:	89 f8                	mov    eax,edi
c0017d67:	5b                   	pop    ebx
c0017d68:	5e                   	pop    esi
c0017d69:	5f                   	pop    edi
c0017d6a:	c3                   	ret    

c0017d6b <Reg::getLine(char*, char*, char*)>:
c0017d6b:	57                   	push   edi
c0017d6c:	56                   	push   esi
c0017d6d:	53                   	push   ebx
c0017d6e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017d72:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0017d76:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0017d7a:	57                   	push   edi
c0017d7b:	56                   	push   esi
c0017d7c:	53                   	push   ebx
c0017d7d:	68 81 1a 02 c0       	push   0xc0021a81
c0017d82:	e8 85 fe ff ff       	call   c0017c0c <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0017d87:	83 c4 10             	add    esp,0x10
c0017d8a:	84 c0                	test   al,al
c0017d8c:	75 10                	jne    c0017d9e <Reg::getLine(char*, char*, char*)+0x33>
c0017d8e:	57                   	push   edi
c0017d8f:	56                   	push   esi
c0017d90:	53                   	push   ebx
c0017d91:	68 a6 1a 02 c0       	push   0xc0021aa6
c0017d96:	e8 71 fe ff ff       	call   c0017c0c <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0017d9b:	83 c4 10             	add    esp,0x10
c0017d9e:	5b                   	pop    ebx
c0017d9f:	5e                   	pop    esi
c0017da0:	5f                   	pop    edi
c0017da1:	c3                   	ret    

c0017da2 <Reg::readInt(char*, char*, int*)>:
c0017da2:	55                   	push   ebp
c0017da3:	57                   	push   edi
c0017da4:	56                   	push   esi
c0017da5:	53                   	push   ebx
c0017da6:	81 ec f0 00 00 00    	sub    esp,0xf0
c0017dac:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0017db0:	57                   	push   edi
c0017db1:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0017db8:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0017dbf:	e8 a7 ff ff ff       	call   c0017d6b <Reg::getLine(char*, char*, char*)>
c0017dc4:	83 c4 10             	add    esp,0x10
c0017dc7:	84 c0                	test   al,al
c0017dc9:	0f 84 b3 00 00 00    	je     c0017e82 <Reg::readInt(char*, char*, int*)+0xe0>
c0017dcf:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0017dd3:	80 fa 2b             	cmp    dl,0x2b
c0017dd6:	74 0c                	je     c0017de4 <Reg::readInt(char*, char*, int*)+0x42>
c0017dd8:	80 fa 2d             	cmp    dl,0x2d
c0017ddb:	75 0e                	jne    c0017deb <Reg::readInt(char*, char*, int*)+0x49>
c0017ddd:	ba 01 00 00 00       	mov    edx,0x1
c0017de2:	eb 0b                	jmp    c0017def <Reg::readInt(char*, char*, int*)+0x4d>
c0017de4:	ba 01 00 00 00       	mov    edx,0x1
c0017de9:	eb 02                	jmp    c0017ded <Reg::readInt(char*, char*, int*)+0x4b>
c0017deb:	31 d2                	xor    edx,edx
c0017ded:	31 c0                	xor    eax,eax
c0017def:	be 0a 00 00 00       	mov    esi,0xa
c0017df4:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0017df9:	75 20                	jne    c0017e1b <Reg::readInt(char*, char*, int*)+0x79>
c0017dfb:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c0017dff:	80 f9 78             	cmp    cl,0x78
c0017e02:	75 0a                	jne    c0017e0e <Reg::readInt(char*, char*, int*)+0x6c>
c0017e04:	83 c2 02             	add    edx,0x2
c0017e07:	be 10 00 00 00       	mov    esi,0x10
c0017e0c:	eb 0d                	jmp    c0017e1b <Reg::readInt(char*, char*, int*)+0x79>
c0017e0e:	80 f9 62             	cmp    cl,0x62
c0017e11:	75 08                	jne    c0017e1b <Reg::readInt(char*, char*, int*)+0x79>
c0017e13:	83 c2 02             	add    edx,0x2
c0017e16:	be 02 00 00 00       	mov    esi,0x2
c0017e1b:	01 d7                	add    edi,edx
c0017e1d:	31 d2                	xor    edx,edx
c0017e1f:	8a 1f                	mov    bl,BYTE PTR [edi]
c0017e21:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c0017e25:	80 fb 0d             	cmp    bl,0xd
c0017e28:	0f 94 c3             	sete   bl
c0017e2b:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0017e30:	0f 94 c1             	sete   cl
c0017e33:	08 cb                	or     bl,cl
c0017e35:	75 3a                	jne    c0017e71 <Reg::readInt(char*, char*, int*)+0xcf>
c0017e37:	0f af d6             	imul   edx,esi
c0017e3a:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c0017e3f:	83 fe 10             	cmp    esi,0x10
c0017e42:	75 26                	jne    c0017e6a <Reg::readInt(char*, char*, int*)+0xc8>
c0017e44:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0017e48:	8d 69 bf             	lea    ebp,[ecx-0x41]
c0017e4b:	89 e9                	mov    ecx,ebp
c0017e4d:	80 f9 05             	cmp    cl,0x5
c0017e50:	77 06                	ja     c0017e58 <Reg::readInt(char*, char*, int*)+0xb6>
c0017e52:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c0017e56:	eb 16                	jmp    c0017e6e <Reg::readInt(char*, char*, int*)+0xcc>
c0017e58:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0017e5c:	83 e9 61             	sub    ecx,0x61
c0017e5f:	80 f9 05             	cmp    cl,0x5
c0017e62:	77 06                	ja     c0017e6a <Reg::readInt(char*, char*, int*)+0xc8>
c0017e64:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c0017e68:	eb 04                	jmp    c0017e6e <Reg::readInt(char*, char*, int*)+0xcc>
c0017e6a:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c0017e6e:	47                   	inc    edi
c0017e6f:	eb ae                	jmp    c0017e1f <Reg::readInt(char*, char*, int*)+0x7d>
c0017e71:	84 c0                	test   al,al
c0017e73:	74 02                	je     c0017e77 <Reg::readInt(char*, char*, int*)+0xd5>
c0017e75:	f7 da                	neg    edx
c0017e77:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0017e7e:	89 10                	mov    DWORD PTR [eax],edx
c0017e80:	88 d8                	mov    al,bl
c0017e82:	81 c4 ec 00 00 00    	add    esp,0xec
c0017e88:	5b                   	pop    ebx
c0017e89:	5e                   	pop    esi
c0017e8a:	5f                   	pop    edi
c0017e8b:	5d                   	pop    ebp
c0017e8c:	c3                   	ret    

c0017e8d <Reg::readString(char*, char*, char*, int)>:
c0017e8d:	57                   	push   edi
c0017e8e:	56                   	push   esi
c0017e8f:	53                   	push   ebx
c0017e90:	81 ec d4 00 00 00    	sub    esp,0xd4
c0017e96:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0017e9d:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0017ea1:	57                   	push   edi
c0017ea2:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0017ea9:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0017eb0:	e8 b6 fe ff ff       	call   c0017d6b <Reg::getLine(char*, char*, char*)>
c0017eb5:	83 c4 10             	add    esp,0x10
c0017eb8:	89 c6                	mov    esi,eax
c0017eba:	84 c0                	test   al,al
c0017ebc:	74 44                	je     c0017f02 <Reg::readString(char*, char*, char*, int)+0x75>
c0017ebe:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0017ec5:	31 c0                	xor    eax,eax
c0017ec7:	4a                   	dec    edx
c0017ec8:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0017ecb:	84 c9                	test   cl,cl
c0017ecd:	74 0f                	je     c0017ede <Reg::readString(char*, char*, char*, int)+0x51>
c0017ecf:	39 c2                	cmp    edx,eax
c0017ed1:	7e 0b                	jle    c0017ede <Reg::readString(char*, char*, char*, int)+0x51>
c0017ed3:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0017ed6:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0017edb:	40                   	inc    eax
c0017edc:	eb ea                	jmp    c0017ec8 <Reg::readString(char*, char*, char*, int)+0x3b>
c0017ede:	83 ec 0c             	sub    esp,0xc
c0017ee1:	53                   	push   ebx
c0017ee2:	e8 3e 87 fe ff       	call   c0000625 <strlen>
c0017ee7:	83 c4 10             	add    esp,0x10
c0017eea:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0017eef:	75 11                	jne    c0017f02 <Reg::readString(char*, char*, char*, int)+0x75>
c0017ef1:	83 ec 0c             	sub    esp,0xc
c0017ef4:	53                   	push   ebx
c0017ef5:	e8 2b 87 fe ff       	call   c0000625 <strlen>
c0017efa:	83 c4 10             	add    esp,0x10
c0017efd:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0017f02:	81 c4 d0 00 00 00    	add    esp,0xd0
c0017f08:	89 f0                	mov    eax,esi
c0017f0a:	5b                   	pop    ebx
c0017f0b:	5e                   	pop    esi
c0017f0c:	5f                   	pop    edi
c0017f0d:	c3                   	ret    

c0017f0e <Reg::readBool(char*, char*, bool*)>:
c0017f0e:	83 ec 20             	sub    esp,0x20
c0017f11:	8d 44 24 10          	lea    eax,[esp+0x10]
c0017f15:	50                   	push   eax
c0017f16:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017f1a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017f1e:	e8 7f fe ff ff       	call   c0017da2 <Reg::readInt(char*, char*, int*)>
c0017f23:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0017f28:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0017f2c:	0f 95 02             	setne  BYTE PTR [edx]
c0017f2f:	83 c4 2c             	add    esp,0x2c
c0017f32:	c3                   	ret    

c0017f33 <Reg::readBoolWithDefault(char*, char*, bool)>:
c0017f33:	53                   	push   ebx
c0017f34:	83 ec 1c             	sub    esp,0x1c
c0017f37:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0017f3b:	8d 44 24 13          	lea    eax,[esp+0x13]
c0017f3f:	50                   	push   eax
c0017f40:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017f44:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017f48:	e8 c1 ff ff ff       	call   c0017f0e <Reg::readBool(char*, char*, bool*)>
c0017f4d:	83 c4 10             	add    esp,0x10
c0017f50:	84 c0                	test   al,al
c0017f52:	74 04                	je     c0017f58 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0017f54:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0017f58:	88 d8                	mov    al,bl
c0017f5a:	83 c4 18             	add    esp,0x18
c0017f5d:	5b                   	pop    ebx
c0017f5e:	c3                   	ret    

c0017f5f <Reg::readIntWithDefault(char*, char*, int)>:
c0017f5f:	53                   	push   ebx
c0017f60:	83 ec 1c             	sub    esp,0x1c
c0017f63:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0017f67:	8d 44 24 10          	lea    eax,[esp+0x10]
c0017f6b:	50                   	push   eax
c0017f6c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017f70:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017f74:	e8 29 fe ff ff       	call   c0017da2 <Reg::readInt(char*, char*, int*)>
c0017f79:	83 c4 10             	add    esp,0x10
c0017f7c:	84 c0                	test   al,al
c0017f7e:	74 04                	je     c0017f84 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0017f80:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0017f84:	89 d8                	mov    eax,ebx
c0017f86:	83 c4 18             	add    esp,0x18
c0017f89:	5b                   	pop    ebx
c0017f8a:	c3                   	ret    

c0017f8b <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0017f8b:	56                   	push   esi
c0017f8c:	53                   	push   ebx
c0017f8d:	51                   	push   ecx
c0017f8e:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0017f92:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0017f96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017f9a:	56                   	push   esi
c0017f9b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017f9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017fa3:	e8 e5 fe ff ff       	call   c0017e8d <Reg::readString(char*, char*, char*, int)>
c0017fa8:	83 c4 10             	add    esp,0x10
c0017fab:	84 c0                	test   al,al
c0017fad:	74 02                	je     c0017fb1 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x26>
c0017faf:	89 f3                	mov    ebx,esi
c0017fb1:	89 d8                	mov    eax,ebx
c0017fb3:	5a                   	pop    edx
c0017fb4:	5b                   	pop    ebx
c0017fb5:	5e                   	pop    esi
c0017fb6:	c3                   	ret    

c0017fb7 <Sys::exit(regs*)>:
c0017fb7:	83 ec 18             	sub    esp,0x18
c0017fba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017fbe:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0017fc1:	e8 a4 6b ff ff       	call   c000eb6a <terminateTask(int)>
c0017fc6:	83 c8 ff             	or     eax,0xffffffff
c0017fc9:	83 c4 1c             	add    esp,0x1c
c0017fcc:	89 c2                	mov    edx,eax
c0017fce:	c3                   	ret    

c0017fcf <Sys::read(regs*)>:
c0017fcf:	57                   	push   edi
c0017fd0:	56                   	push   esi
c0017fd1:	53                   	push   ebx
c0017fd2:	83 ec 10             	sub    esp,0x10
c0017fd5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0017fd9:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0017fdc:	83 f8 02             	cmp    eax,0x2
c0017fdf:	77 10                	ja     c0017ff1 <Sys::read(regs*)+0x22>
c0017fe1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017fe6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0017fe9:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0017fef:	eb 0e                	jmp    c0017fff <Sys::read(regs*)+0x30>
c0017ff1:	83 ec 0c             	sub    esp,0xc
c0017ff4:	50                   	push   eax
c0017ff5:	e8 07 8e ff ff       	call   c0010e01 <getFromFileDescriptor(int)>
c0017ffa:	83 c4 10             	add    esp,0x10
c0017ffd:	89 c1                	mov    ecx,eax
c0017fff:	83 c8 ff             	or     eax,0xffffffff
c0018002:	85 c9                	test   ecx,ecx
c0018004:	89 c2                	mov    edx,eax
c0018006:	74 28                	je     c0018030 <Sys::read(regs*)+0x61>
c0018008:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0018010:	31 ff                	xor    edi,edi
c0018012:	83 ec 0c             	sub    esp,0xc
c0018015:	8b 01                	mov    eax,DWORD PTR [ecx]
c0018017:	8d 54 24 18          	lea    edx,[esp+0x18]
c001801b:	52                   	push   edx
c001801c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001801f:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0018022:	57                   	push   edi
c0018023:	56                   	push   esi
c0018024:	51                   	push   ecx
c0018025:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0018028:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001802c:	83 c4 20             	add    esp,0x20
c001802f:	99                   	cdq    
c0018030:	83 c4 10             	add    esp,0x10
c0018033:	5b                   	pop    ebx
c0018034:	5e                   	pop    esi
c0018035:	5f                   	pop    edi
c0018036:	c3                   	ret    

c0018037 <Sys::sbrk(regs*)>:
c0018037:	56                   	push   esi
c0018038:	53                   	push   ebx
c0018039:	50                   	push   eax
c001803a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001803f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018043:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0018046:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0018049:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c001804f:	85 db                	test   ebx,ebx
c0018051:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0018054:	74 02                	je     c0018058 <Sys::sbrk(regs*)+0x21>
c0018056:	79 06                	jns    c001805e <Sys::sbrk(regs*)+0x27>
c0018058:	89 f0                	mov    eax,esi
c001805a:	31 d2                	xor    edx,edx
c001805c:	eb 2a                	jmp    c0018088 <Sys::sbrk(regs*)+0x51>
c001805e:	83 c8 ff             	or     eax,0xffffffff
c0018061:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0018067:	89 c2                	mov    edx,eax
c0018069:	77 1d                	ja     c0018088 <Sys::sbrk(regs*)+0x51>
c001806b:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0018071:	50                   	push   eax
c0018072:	c1 ea 0c             	shr    edx,0xc
c0018075:	68 07 04 00 00       	push   0x407
c001807a:	52                   	push   edx
c001807b:	51                   	push   ecx
c001807c:	e8 9d 95 ff ff       	call   c001161e <VAS::allocatePages(int, int)>
c0018081:	89 f0                	mov    eax,esi
c0018083:	31 d2                	xor    edx,edx
c0018085:	83 c4 10             	add    esp,0x10
c0018088:	59                   	pop    ecx
c0018089:	5b                   	pop    ebx
c001808a:	5e                   	pop    esi
c001808b:	c3                   	ret    

c001808c <Sys::write(regs*)>:
c001808c:	57                   	push   edi
c001808d:	56                   	push   esi
c001808e:	53                   	push   ebx
c001808f:	83 ec 10             	sub    esp,0x10
c0018092:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0018096:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0018099:	83 f8 02             	cmp    eax,0x2
c001809c:	77 10                	ja     c00180ae <Sys::write(regs*)+0x22>
c001809e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00180a3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00180a6:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c00180ac:	eb 0e                	jmp    c00180bc <Sys::write(regs*)+0x30>
c00180ae:	83 ec 0c             	sub    esp,0xc
c00180b1:	50                   	push   eax
c00180b2:	e8 4a 8d ff ff       	call   c0010e01 <getFromFileDescriptor(int)>
c00180b7:	83 c4 10             	add    esp,0x10
c00180ba:	89 c1                	mov    ecx,eax
c00180bc:	83 c8 ff             	or     eax,0xffffffff
c00180bf:	85 c9                	test   ecx,ecx
c00180c1:	89 c2                	mov    edx,eax
c00180c3:	74 28                	je     c00180ed <Sys::write(regs*)+0x61>
c00180c5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00180cd:	31 ff                	xor    edi,edi
c00180cf:	83 ec 0c             	sub    esp,0xc
c00180d2:	8b 01                	mov    eax,DWORD PTR [ecx]
c00180d4:	8d 54 24 18          	lea    edx,[esp+0x18]
c00180d8:	52                   	push   edx
c00180d9:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00180dc:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00180df:	57                   	push   edi
c00180e0:	56                   	push   esi
c00180e1:	51                   	push   ecx
c00180e2:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00180e5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180e9:	83 c4 20             	add    esp,0x20
c00180ec:	99                   	cdq    
c00180ed:	83 c4 10             	add    esp,0x10
c00180f0:	5b                   	pop    ebx
c00180f1:	5e                   	pop    esi
c00180f2:	5f                   	pop    edi
c00180f3:	c3                   	ret    

c00180f4 <Sys::yield(regs*)>:
c00180f4:	83 ec 0c             	sub    esp,0xc
c00180f7:	e8 6e 5e ff ff       	call   c000df6a <lockScheduler()>
c00180fc:	e8 9d 61 ff ff       	call   c000e29e <schedule()>
c0018101:	e8 66 5e ff ff       	call   c000df6c <unlockScheduler()>
c0018106:	31 c0                	xor    eax,eax
c0018108:	31 d2                	xor    edx,edx
c001810a:	83 c4 0c             	add    esp,0xc
c001810d:	c3                   	ret    

c001810e <vm8086EntryPoint(void*)>:
c001810e:	83 ec 0c             	sub    esp,0xc
c0018111:	e8 56 5e ff ff       	call   c000df6c <unlockScheduler()>
c0018116:	fb                   	sti    
c0018117:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001811c:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c0018120:	52                   	push   edx
c0018121:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c0018125:	52                   	push   edx
c0018126:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001812a:	52                   	push   edx
c001812b:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001812f:	50                   	push   eax
c0018130:	e8 80 80 fe ff       	call   c00001b5 <goToVM86>
c0018135:	83 c4 1c             	add    esp,0x1c
c0018138:	c3                   	ret    

c0018139 <inbv(unsigned short)>:
c0018139:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001813d:	ec                   	in     al,dx
c001813e:	c3                   	ret    

c001813f <outbv(unsigned short, unsigned char)>:
c001813f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0018143:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018147:	ee                   	out    dx,al
c0018148:	c3                   	ret    

c0018149 <realToLinear(unsigned short, unsigned short)>:
c0018149:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001814e:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018153:	c1 e0 04             	shl    eax,0x4
c0018156:	01 d0                	add    eax,edx
c0018158:	c3                   	ret    

c0018159 <getSegment(unsigned int)>:
c0018159:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001815d:	c1 e8 10             	shr    eax,0x10
c0018160:	c3                   	ret    

c0018161 <getOffset(unsigned int)>:
c0018161:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018165:	c3                   	ret    

c0018166 <loadVM8086FileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0018166:	55                   	push   ebp
c0018167:	57                   	push   edi
c0018168:	56                   	push   esi
c0018169:	53                   	push   ebx
c001816a:	83 ec 2c             	sub    esp,0x2c
c001816d:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c0018171:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0018175:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0018179:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001817d:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0018181:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c0018185:	e8 e0 5d ff ff       	call   c000df6a <lockScheduler()>
c001818a:	68 80 00 00 00       	push   0x80
c001818f:	6a 00                	push   0x0
c0018191:	68 0e 81 01 c0       	push   0xc001810e
c0018196:	55                   	push   ebp
c0018197:	e8 f8 5e ff ff       	call   c000e094 <Process::createThread(void (*)(void*), void*, int)>
c001819c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00181a0:	66 89 58 5f          	mov    WORD PTR [eax+0x5f],bx
c00181a4:	66 89 50 5d          	mov    WORD PTR [eax+0x5d],dx
c00181a8:	66 89 78 59          	mov    WORD PTR [eax+0x59],di
c00181ac:	66 89 70 5b          	mov    WORD PTR [eax+0x5b],si
c00181b0:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c00181b4:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00181bb:	e8 b8 9e ff ff       	call   c0012078 <operator new(unsigned long)>
c00181c0:	83 c4 0c             	add    esp,0xc
c00181c3:	89 c3                	mov    ebx,eax
c00181c5:	55                   	push   ebp
c00181c6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00181ca:	50                   	push   eax
c00181cb:	e8 d6 a2 ff ff       	call   c00124a6 <File::File(char const*, Process*)>
c00181d0:	83 c4 0c             	add    esp,0xc
c00181d3:	8d 44 24 17          	lea    eax,[esp+0x17]
c00181d7:	50                   	push   eax
c00181d8:	8d 44 24 20          	lea    eax,[esp+0x20]
c00181dc:	50                   	push   eax
c00181dd:	53                   	push   ebx
c00181de:	e8 d3 a5 ff ff       	call   c00127b6 <File::stat(unsigned long long*, bool*)>
c00181e3:	8a 54 24 23          	mov    dl,BYTE PTR [esp+0x23]
c00181e7:	83 c4 10             	add    esp,0x10
c00181ea:	84 d2                	test   dl,dl
c00181ec:	74 1c                	je     c001820a <loadVM8086FileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xa4>
c00181ee:	83 ec 0c             	sub    esp,0xc
c00181f1:	68 c1 1a 02 c0       	push   0xc0021ac1
c00181f6:	e8 eb 49 ff ff       	call   c000cbe6 <panic(char const*)>
c00181fb:	e8 6c 5d ff ff       	call   c000df6c <unlockScheduler()>
c0018200:	83 c4 10             	add    esp,0x10
c0018203:	31 d2                	xor    edx,edx
c0018205:	e9 81 00 00 00       	jmp    c001828b <loadVM8086FileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x125>
c001820a:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001820e:	51                   	push   ecx
c001820f:	51                   	push   ecx
c0018210:	6a 01                	push   0x1
c0018212:	53                   	push   ebx
c0018213:	e8 f2 a2 ff ff       	call   c001250a <File::open(FileOpenMode)>
c0018218:	83 c4 10             	add    esp,0x10
c001821b:	85 c0                	test   eax,eax
c001821d:	74 1b                	je     c001823a <loadVM8086FileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd4>
c001821f:	83 ec 0c             	sub    esp,0xc
c0018222:	68 da 1a 02 c0       	push   0xc0021ada
c0018227:	e8 ba 49 ff ff       	call   c000cbe6 <panic(char const*)>
c001822c:	e8 3b 5d ff ff       	call   c000df6c <unlockScheduler()>
c0018231:	83 c4 10             	add    esp,0x10
c0018234:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0018238:	eb 51                	jmp    c001828b <loadVM8086FileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x125>
c001823a:	83 ec 0c             	sub    esp,0xc
c001823d:	0f b7 ff             	movzx  edi,di
c0018240:	6a 07                	push   0x7
c0018242:	0f b7 f6             	movzx  esi,si
c0018245:	68 00 01 00 00       	push   0x100
c001824a:	6a 00                	push   0x0
c001824c:	6a 00                	push   0x0
c001824e:	ff b5 32 05 00 00    	push   DWORD PTR [ebp+0x532]
c0018254:	e8 b1 95 ff ff       	call   c001180a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0018259:	83 c4 18             	add    esp,0x18
c001825c:	57                   	push   edi
c001825d:	56                   	push   esi
c001825e:	e8 e6 fe ff ff       	call   c0018149 <realToLinear(unsigned short, unsigned short)>
c0018263:	5a                   	pop    edx
c0018264:	8b 13                	mov    edx,DWORD PTR [ebx]
c0018266:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001826a:	51                   	push   ecx
c001826b:	50                   	push   eax
c001826c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018270:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018274:	53                   	push   ebx
c0018275:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0018278:	83 c4 14             	add    esp,0x14
c001827b:	53                   	push   ebx
c001827c:	e8 e7 a2 ff ff       	call   c0012568 <File::close()>
c0018281:	e8 e6 5c ff ff       	call   c000df6c <unlockScheduler()>
c0018286:	83 c4 10             	add    esp,0x10
c0018289:	b2 01                	mov    dl,0x1
c001828b:	83 c4 2c             	add    esp,0x2c
c001828e:	88 d0                	mov    al,dl
c0018290:	5b                   	pop    ebx
c0018291:	5e                   	pop    esi
c0018292:	5f                   	pop    edi
c0018293:	5d                   	pop    ebp
c0018294:	c3                   	ret    

c0018295 <vm8086DoISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0018295:	57                   	push   edi
c0018296:	56                   	push   esi
c0018297:	53                   	push   ebx
c0018298:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001829c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00182a0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00182a4:	83 e8 06             	sub    eax,0x6
c00182a7:	0f b7 c0             	movzx  eax,ax
c00182aa:	50                   	push   eax
c00182ab:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c00182b0:	50                   	push   eax
c00182b1:	e8 93 fe ff ff       	call   c0018149 <realToLinear(unsigned short, unsigned short)>
c00182b6:	5a                   	pop    edx
c00182b7:	5e                   	pop    esi
c00182b8:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c00182bb:	8d 56 fa             	lea    edx,[esi-0x6]
c00182be:	81 e2 ff ff 00 00    	and    edx,0xffff
c00182c4:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c00182c7:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c00182ca:	83 c2 02             	add    edx,0x2
c00182cd:	66 89 10             	mov    WORD PTR [eax],dx
c00182d0:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c00182d3:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c00182d7:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c00182da:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c00182de:	89 d6                	mov    esi,edx
c00182e0:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c00182e6:	66 81 e6 ff fd       	and    si,0xfdff
c00182eb:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c00182ef:	74 07                	je     c00182f8 <vm8086DoISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c00182f1:	89 d6                	mov    esi,edx
c00182f3:	66 81 ce 00 02       	or     si,0x200
c00182f8:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c00182fc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018301:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0018305:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001830d:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c0018310:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c0018318:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001831b:	5b                   	pop    ebx
c001831c:	5e                   	pop    esi
c001831d:	5f                   	pop    edi
c001831e:	c3                   	ret    

c001831f <readByteFromReal(unsigned short, unsigned short)>:
c001831f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018324:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018329:	c1 e0 04             	shl    eax,0x4
c001832c:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001832f:	c3                   	ret    

c0018330 <readWordFromReal(unsigned short, unsigned short)>:
c0018330:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018335:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001833a:	c1 e0 04             	shl    eax,0x4
c001833d:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0018341:	c3                   	ret    

c0018342 <readDwordFromReal(unsigned short, unsigned short)>:
c0018342:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018347:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001834c:	c1 e0 04             	shl    eax,0x4
c001834f:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0018352:	c3                   	ret    

c0018353 <writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0018353:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018358:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001835d:	c1 e0 04             	shl    eax,0x4
c0018360:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018364:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0018367:	c3                   	ret    

c0018368 <writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0018368:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001836d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018372:	c1 e0 04             	shl    eax,0x4
c0018375:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018379:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001837d:	c3                   	ret    

c001837e <writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001837e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018383:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018388:	c1 e0 04             	shl    eax,0x4
c001838b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001838f:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0018392:	c3                   	ret    

c0018393 <vm8086FaultHandler(regs*)>:
c0018393:	55                   	push   ebp
c0018394:	57                   	push   edi
c0018395:	56                   	push   esi
c0018396:	53                   	push   ebx
c0018397:	83 ec 1c             	sub    esp,0x1c
c001839a:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001839e:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00183a1:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c00183a5:	0f b7 f0             	movzx  esi,ax
c00183a8:	52                   	push   edx
c00183a9:	0f b7 c0             	movzx  eax,ax
c00183ac:	50                   	push   eax
c00183ad:	e8 97 fd ff ff       	call   c0018149 <realToLinear(unsigned short, unsigned short)>
c00183b2:	5a                   	pop    edx
c00183b3:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c00183b6:	59                   	pop    ecx
c00183b7:	89 c7                	mov    edi,eax
c00183b9:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00183bc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00183c0:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00183c5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00183c9:	0f b7 c5             	movzx  eax,bp
c00183cc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00183d0:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00183d4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00183d8:	e8 6c fd ff ff       	call   c0018149 <realToLinear(unsigned short, unsigned short)>
c00183dd:	5a                   	pop    edx
c00183de:	59                   	pop    ecx
c00183df:	b1 06                	mov    cl,0x6
c00183e1:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c00183e6:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c00183eb:	0f b6 17             	movzx  edx,BYTE PTR [edi]
c00183ee:	80 fa 9d             	cmp    dl,0x9d
c00183f1:	0f 84 1d 02 00 00    	je     c0018614 <vm8086FaultHandler(regs*)+0x281>
c00183f7:	0f 87 8e 00 00 00    	ja     c001848b <vm8086FaultHandler(regs*)+0xf8>
c00183fd:	80 fa 66             	cmp    dl,0x66
c0018400:	0f 84 89 01 00 00    	je     c001858f <vm8086FaultHandler(regs*)+0x1fc>
c0018406:	77 44                	ja     c001844c <vm8086FaultHandler(regs*)+0xb9>
c0018408:	80 fa 36             	cmp    dl,0x36
c001840b:	0f 84 74 01 00 00    	je     c0018585 <vm8086FaultHandler(regs*)+0x1f2>
c0018411:	77 1a                	ja     c001842d <vm8086FaultHandler(regs*)+0x9a>
c0018413:	80 fa 26             	cmp    dl,0x26
c0018416:	0f 84 4b 01 00 00    	je     c0018567 <vm8086FaultHandler(regs*)+0x1d4>
c001841c:	80 fa 2e             	cmp    dl,0x2e
c001841f:	0f 85 4a 05 00 00    	jne    c001896f <vm8086FaultHandler(regs*)+0x5dc>
c0018425:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018428:	31 c9                	xor    ecx,ecx
c001842a:	47                   	inc    edi
c001842b:	eb be                	jmp    c00183eb <vm8086FaultHandler(regs*)+0x58>
c001842d:	80 fa 64             	cmp    dl,0x64
c0018430:	0f 84 3b 01 00 00    	je     c0018571 <vm8086FaultHandler(regs*)+0x1de>
c0018436:	0f 87 3f 01 00 00    	ja     c001857b <vm8086FaultHandler(regs*)+0x1e8>
c001843c:	80 fa 3e             	cmp    dl,0x3e
c001843f:	0f 85 2a 05 00 00    	jne    c001896f <vm8086FaultHandler(regs*)+0x5dc>
c0018445:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018448:	b1 01                	mov    cl,0x1
c001844a:	eb de                	jmp    c001842a <vm8086FaultHandler(regs*)+0x97>
c001844c:	80 fa 6d             	cmp    dl,0x6d
c001844f:	0f 84 bf 02 00 00    	je     c0018714 <vm8086FaultHandler(regs*)+0x381>
c0018455:	77 17                	ja     c001846e <vm8086FaultHandler(regs*)+0xdb>
c0018457:	80 fa 67             	cmp    dl,0x67
c001845a:	0f 84 3c 01 00 00    	je     c001859c <vm8086FaultHandler(regs*)+0x209>
c0018460:	80 fa 6c             	cmp    dl,0x6c
c0018463:	0f 84 5d 02 00 00    	je     c00186c6 <vm8086FaultHandler(regs*)+0x333>
c0018469:	e9 01 05 00 00       	jmp    c001896f <vm8086FaultHandler(regs*)+0x5dc>
c001846e:	80 fa 6f             	cmp    dl,0x6f
c0018471:	0f 84 8b 03 00 00    	je     c0018802 <vm8086FaultHandler(regs*)+0x46f>
c0018477:	0f 82 0f 03 00 00    	jb     c001878c <vm8086FaultHandler(regs*)+0x3f9>
c001847d:	80 fa 9c             	cmp    dl,0x9c
c0018480:	0f 84 23 01 00 00    	je     c00185a9 <vm8086FaultHandler(regs*)+0x216>
c0018486:	e9 e4 04 00 00       	jmp    c001896f <vm8086FaultHandler(regs*)+0x5dc>
c001848b:	80 fa ec             	cmp    dl,0xec
c001848e:	0f 84 7f 04 00 00    	je     c0018913 <vm8086FaultHandler(regs*)+0x580>
c0018494:	77 7b                	ja     c0018511 <vm8086FaultHandler(regs*)+0x17e>
c0018496:	80 fa e4             	cmp    dl,0xe4
c0018499:	0f 84 fe 03 00 00    	je     c001889d <vm8086FaultHandler(regs*)+0x50a>
c001849f:	77 53                	ja     c00184f4 <vm8086FaultHandler(regs*)+0x161>
c00184a1:	80 fa cd             	cmp    dl,0xcd
c00184a4:	0f 84 cd 01 00 00    	je     c0018677 <vm8086FaultHandler(regs*)+0x2e4>
c00184aa:	80 fa cf             	cmp    dl,0xcf
c00184ad:	0f 85 bc 04 00 00    	jne    c001896f <vm8086FaultHandler(regs*)+0x5dc>
c00184b3:	0f b7 10             	movzx  edx,WORD PTR [eax]
c00184b6:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c00184b9:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c00184bd:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c00184c0:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c00184c4:	81 ca 00 02 02 00    	or     edx,0x20200
c00184ca:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00184cd:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c00184d1:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00184d7:	66 c1 e8 09          	shr    ax,0x9
c00184db:	83 e0 01             	and    eax,0x1
c00184de:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c00184e1:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00184e4:	83 c0 06             	add    eax,0x6
c00184e7:	25 ff ff 00 00       	and    eax,0xffff
c00184ec:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00184ef:	e9 77 04 00 00       	jmp    c001896b <vm8086FaultHandler(regs*)+0x5d8>
c00184f4:	80 fa e6             	cmp    dl,0xe6
c00184f7:	0f 84 ea 03 00 00    	je     c00188e7 <vm8086FaultHandler(regs*)+0x554>
c00184fd:	0f 82 b6 03 00 00    	jb     c00188b9 <vm8086FaultHandler(regs*)+0x526>
c0018503:	80 fa e7             	cmp    dl,0xe7
c0018506:	0f 84 f2 03 00 00    	je     c00188fe <vm8086FaultHandler(regs*)+0x56b>
c001850c:	e9 5e 04 00 00       	jmp    c001896f <vm8086FaultHandler(regs*)+0x5dc>
c0018511:	80 fa ef             	cmp    dl,0xef
c0018514:	0f 84 3c 04 00 00    	je     c0018956 <vm8086FaultHandler(regs*)+0x5c3>
c001851a:	77 28                	ja     c0018544 <vm8086FaultHandler(regs*)+0x1b1>
c001851c:	80 fa ed             	cmp    dl,0xed
c001851f:	0f 84 0a 04 00 00    	je     c001892f <vm8086FaultHandler(regs*)+0x59c>
c0018525:	80 fa ee             	cmp    dl,0xee
c0018528:	0f 85 41 04 00 00    	jne    c001896f <vm8086FaultHandler(regs*)+0x5dc>
c001852e:	50                   	push   eax
c001852f:	50                   	push   eax
c0018530:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0018534:	50                   	push   eax
c0018535:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0018539:	50                   	push   eax
c001853a:	e8 00 fc ff ff       	call   c001813f <outbv(unsigned short, unsigned char)>
c001853f:	e9 0a 04 00 00       	jmp    c001894e <vm8086FaultHandler(regs*)+0x5bb>
c0018544:	80 fa fa             	cmp    dl,0xfa
c0018547:	0f 84 5d 01 00 00    	je     c00186aa <vm8086FaultHandler(regs*)+0x317>
c001854d:	80 fa fb             	cmp    dl,0xfb
c0018550:	0f 84 62 01 00 00    	je     c00186b8 <vm8086FaultHandler(regs*)+0x325>
c0018556:	80 fa f3             	cmp    dl,0xf3
c0018559:	0f 85 10 04 00 00    	jne    c001896f <vm8086FaultHandler(regs*)+0x5dc>
c001855f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018562:	e9 c3 fe ff ff       	jmp    c001842a <vm8086FaultHandler(regs*)+0x97>
c0018567:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001856a:	b1 02                	mov    cl,0x2
c001856c:	e9 b9 fe ff ff       	jmp    c001842a <vm8086FaultHandler(regs*)+0x97>
c0018571:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018574:	b1 03                	mov    cl,0x3
c0018576:	e9 af fe ff ff       	jmp    c001842a <vm8086FaultHandler(regs*)+0x97>
c001857b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001857e:	b1 04                	mov    cl,0x4
c0018580:	e9 a5 fe ff ff       	jmp    c001842a <vm8086FaultHandler(regs*)+0x97>
c0018585:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018588:	b1 05                	mov    cl,0x5
c001858a:	e9 9b fe ff ff       	jmp    c001842a <vm8086FaultHandler(regs*)+0x97>
c001858f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018592:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c0018597:	e9 8e fe ff ff       	jmp    c001842a <vm8086FaultHandler(regs*)+0x97>
c001859c:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001859f:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c00185a4:	e9 81 fe ff ff       	jmp    c001842a <vm8086FaultHandler(regs*)+0x97>
c00185a9:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c00185ac:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00185b0:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00185b5:	74 30                	je     c00185e7 <vm8086FaultHandler(regs*)+0x254>
c00185b7:	83 e9 04             	sub    ecx,0x4
c00185ba:	81 e2 ff 0d 00 00    	and    edx,0xdff
c00185c0:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00185c6:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c00185c9:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c00185cc:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00185d2:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c00185d6:	0f 84 8c 03 00 00    	je     c0018968 <vm8086FaultHandler(regs*)+0x5d5>
c00185dc:	80 ce 02             	or     dh,0x2
c00185df:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c00185e2:	e9 81 03 00 00       	jmp    c0018968 <vm8086FaultHandler(regs*)+0x5d5>
c00185e7:	83 e9 02             	sub    ecx,0x2
c00185ea:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00185f0:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c00185f3:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c00185f7:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00185fd:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c0018601:	74 05                	je     c0018608 <vm8086FaultHandler(regs*)+0x275>
c0018603:	80 ce 02             	or     dh,0x2
c0018606:	eb 03                	jmp    c001860b <vm8086FaultHandler(regs*)+0x278>
c0018608:	80 e6 fd             	and    dh,0xfd
c001860b:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001860f:	e9 54 03 00 00       	jmp    c0018968 <vm8086FaultHandler(regs*)+0x5d5>
c0018614:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0018619:	74 2a                	je     c0018645 <vm8086FaultHandler(regs*)+0x2b2>
c001861b:	8b 10                	mov    edx,DWORD PTR [eax]
c001861d:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0018623:	81 ca 00 02 02 00    	or     edx,0x20200
c0018629:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001862c:	8b 00                	mov    eax,DWORD PTR [eax]
c001862e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0018634:	c1 e8 09             	shr    eax,0x9
c0018637:	83 e0 01             	and    eax,0x1
c001863a:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001863d:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0018640:	83 c0 04             	add    eax,0x4
c0018643:	eb 25                	jmp    c001866a <vm8086FaultHandler(regs*)+0x2d7>
c0018645:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0018648:	81 ca 00 02 02 00    	or     edx,0x20200
c001864e:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0018651:	66 8b 00             	mov    ax,WORD PTR [eax]
c0018654:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001865a:	66 c1 e8 09          	shr    ax,0x9
c001865e:	83 e0 01             	and    eax,0x1
c0018661:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c0018664:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0018667:	83 c0 02             	add    eax,0x2
c001866a:	25 ff ff 00 00       	and    eax,0xffff
c001866f:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0018672:	e9 f1 02 00 00       	jmp    c0018968 <vm8086FaultHandler(regs*)+0x5d5>
c0018677:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c001867b:	3c ff                	cmp    al,0xff
c001867d:	75 10                	jne    c001868f <vm8086FaultHandler(regs*)+0x2fc>
c001867f:	83 ec 0c             	sub    esp,0xc
c0018682:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0018685:	e8 e0 64 ff ff       	call   c000eb6a <terminateTask(int)>
c001868a:	e9 c2 02 00 00       	jmp    c0018951 <vm8086FaultHandler(regs*)+0x5be>
c001868f:	83 ec 0c             	sub    esp,0xc
c0018692:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0018696:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001869a:	57                   	push   edi
c001869b:	50                   	push   eax
c001869c:	53                   	push   ebx
c001869d:	e8 f3 fb ff ff       	call   c0018295 <vm8086DoISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c00186a2:	83 c4 20             	add    esp,0x20
c00186a5:	e9 c1 02 00 00       	jmp    c001896b <vm8086FaultHandler(regs*)+0x5d8>
c00186aa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00186af:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c00186b3:	e9 b0 02 00 00       	jmp    c0018968 <vm8086FaultHandler(regs*)+0x5d5>
c00186b8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00186bd:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c00186c1:	e9 a2 02 00 00       	jmp    c0018968 <vm8086FaultHandler(regs*)+0x5d5>
c00186c6:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c00186cb:	74 0d                	je     c00186da <vm8086FaultHandler(regs*)+0x347>
c00186cd:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c00186d4:	0f 87 e9 02 00 00    	ja     c00189c3 <vm8086FaultHandler(regs*)+0x630>
c00186da:	83 ec 0c             	sub    esp,0xc
c00186dd:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00186e0:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00186e4:	50                   	push   eax
c00186e5:	e8 4f fa ff ff       	call   c0018139 <inbv(unsigned short)>
c00186ea:	83 c4 0c             	add    esp,0xc
c00186ed:	0f b6 c0             	movzx  eax,al
c00186f0:	0f b7 c9             	movzx  ecx,cx
c00186f3:	50                   	push   eax
c00186f4:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c00186f8:	50                   	push   eax
c00186f9:	51                   	push   ecx
c00186fa:	e8 54 fc ff ff       	call   c0018353 <writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c00186ff:	83 c4 10             	add    esp,0x10
c0018702:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0018705:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0018709:	74 03                	je     c001870e <vm8086FaultHandler(regs*)+0x37b>
c001870b:	48                   	dec    eax
c001870c:	eb 01                	jmp    c001870f <vm8086FaultHandler(regs*)+0x37c>
c001870e:	40                   	inc    eax
c001870f:	0f b7 c0             	movzx  eax,ax
c0018712:	eb 70                	jmp    c0018784 <vm8086FaultHandler(regs*)+0x3f1>
c0018714:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0018717:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c001871a:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001871f:	74 0c                	je     c001872d <vm8086FaultHandler(regs*)+0x39a>
c0018721:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c0018727:	0f 87 96 02 00 00    	ja     c00189c3 <vm8086FaultHandler(regs*)+0x630>
c001872d:	0f b7 c9             	movzx  ecx,cx
c0018730:	0f b7 f6             	movzx  esi,si
c0018733:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0018736:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001873b:	74 20                	je     c001875d <vm8086FaultHandler(regs*)+0x3ca>
c001873d:	ed                   	in     eax,dx
c001873e:	55                   	push   ebp
c001873f:	50                   	push   eax
c0018740:	51                   	push   ecx
c0018741:	56                   	push   esi
c0018742:	e8 37 fc ff ff       	call   c001837e <writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0018747:	83 c4 10             	add    esp,0x10
c001874a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001874d:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0018751:	74 05                	je     c0018758 <vm8086FaultHandler(regs*)+0x3c5>
c0018753:	83 e8 04             	sub    eax,0x4
c0018756:	eb 27                	jmp    c001877f <vm8086FaultHandler(regs*)+0x3ec>
c0018758:	83 c0 04             	add    eax,0x4
c001875b:	eb 22                	jmp    c001877f <vm8086FaultHandler(regs*)+0x3ec>
c001875d:	66 ed                	in     ax,dx
c001875f:	0f b7 c0             	movzx  eax,ax
c0018762:	57                   	push   edi
c0018763:	50                   	push   eax
c0018764:	51                   	push   ecx
c0018765:	56                   	push   esi
c0018766:	e8 fd fb ff ff       	call   c0018368 <writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001876b:	83 c4 10             	add    esp,0x10
c001876e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0018771:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0018775:	74 05                	je     c001877c <vm8086FaultHandler(regs*)+0x3e9>
c0018777:	83 e8 02             	sub    eax,0x2
c001877a:	eb 03                	jmp    c001877f <vm8086FaultHandler(regs*)+0x3ec>
c001877c:	83 c0 02             	add    eax,0x2
c001877f:	25 ff ff 00 00       	and    eax,0xffff
c0018784:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0018787:	e9 dc 01 00 00       	jmp    c0018968 <vm8086FaultHandler(regs*)+0x5d5>
c001878c:	49                   	dec    ecx
c001878d:	80 f9 05             	cmp    cl,0x5
c0018790:	77 24                	ja     c00187b6 <vm8086FaultHandler(regs*)+0x423>
c0018792:	0f b6 c9             	movzx  ecx,cl
c0018795:	ff 24 8d 20 1b 02 c0 	jmp    DWORD PTR [ecx*4-0x3ffde4e0]
c001879c:	0f b7 f5             	movzx  esi,bp
c001879f:	eb 15                	jmp    c00187b6 <vm8086FaultHandler(regs*)+0x423>
c00187a1:	0f b7 73 0c          	movzx  esi,WORD PTR [ebx+0xc]
c00187a5:	eb 0f                	jmp    c00187b6 <vm8086FaultHandler(regs*)+0x423>
c00187a7:	0f b7 73 08          	movzx  esi,WORD PTR [ebx+0x8]
c00187ab:	eb 09                	jmp    c00187b6 <vm8086FaultHandler(regs*)+0x423>
c00187ad:	0f b7 73 04          	movzx  esi,WORD PTR [ebx+0x4]
c00187b1:	eb 03                	jmp    c00187b6 <vm8086FaultHandler(regs*)+0x423>
c00187b3:	0f b7 33             	movzx  esi,WORD PTR [ebx]
c00187b6:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00187b9:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c00187be:	74 0b                	je     c00187cb <vm8086FaultHandler(regs*)+0x438>
c00187c0:	3d ff ff 00 00       	cmp    eax,0xffff
c00187c5:	0f 87 f8 01 00 00    	ja     c00189c3 <vm8086FaultHandler(regs*)+0x630>
c00187cb:	0f b7 c0             	movzx  eax,ax
c00187ce:	52                   	push   edx
c00187cf:	52                   	push   edx
c00187d0:	50                   	push   eax
c00187d1:	56                   	push   esi
c00187d2:	e8 48 fb ff ff       	call   c001831f <readByteFromReal(unsigned short, unsigned short)>
c00187d7:	59                   	pop    ecx
c00187d8:	0f b6 c0             	movzx  eax,al
c00187db:	5e                   	pop    esi
c00187dc:	50                   	push   eax
c00187dd:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00187e1:	50                   	push   eax
c00187e2:	e8 58 f9 ff ff       	call   c001813f <outbv(unsigned short, unsigned char)>
c00187e7:	83 c4 10             	add    esp,0x10
c00187ea:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00187ed:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00187f1:	74 03                	je     c00187f6 <vm8086FaultHandler(regs*)+0x463>
c00187f3:	48                   	dec    eax
c00187f4:	eb 01                	jmp    c00187f7 <vm8086FaultHandler(regs*)+0x464>
c00187f6:	40                   	inc    eax
c00187f7:	0f b7 c0             	movzx  eax,ax
c00187fa:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00187fd:	e9 66 01 00 00       	jmp    c0018968 <vm8086FaultHandler(regs*)+0x5d5>
c0018802:	49                   	dec    ecx
c0018803:	80 f9 05             	cmp    cl,0x5
c0018806:	77 1f                	ja     c0018827 <vm8086FaultHandler(regs*)+0x494>
c0018808:	0f b6 c9             	movzx  ecx,cl
c001880b:	ff 24 8d 38 1b 02 c0 	jmp    DWORD PTR [ecx*4-0x3ffde4c8]
c0018812:	89 ee                	mov    esi,ebp
c0018814:	eb 11                	jmp    c0018827 <vm8086FaultHandler(regs*)+0x494>
c0018816:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0018819:	eb 0c                	jmp    c0018827 <vm8086FaultHandler(regs*)+0x494>
c001881b:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001881e:	eb 07                	jmp    c0018827 <vm8086FaultHandler(regs*)+0x494>
c0018820:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0018823:	eb 02                	jmp    c0018827 <vm8086FaultHandler(regs*)+0x494>
c0018825:	8b 33                	mov    esi,DWORD PTR [ebx]
c0018827:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c001882a:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001882f:	74 0c                	je     c001883d <vm8086FaultHandler(regs*)+0x4aa>
c0018831:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c0018837:	0f 87 86 01 00 00    	ja     c00189c3 <vm8086FaultHandler(regs*)+0x630>
c001883d:	0f b7 d6             	movzx  edx,si
c0018840:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c0018843:	0f b7 c1             	movzx  eax,cx
c0018846:	81 e7 00 04 00 00    	and    edi,0x400
c001884c:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001884f:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0018854:	74 1d                	je     c0018873 <vm8086FaultHandler(regs*)+0x4e0>
c0018856:	55                   	push   ebp
c0018857:	55                   	push   ebp
c0018858:	50                   	push   eax
c0018859:	52                   	push   edx
c001885a:	e8 e3 fa ff ff       	call   c0018342 <readDwordFromReal(unsigned short, unsigned short)>
c001885f:	83 c4 10             	add    esp,0x10
c0018862:	89 f2                	mov    edx,esi
c0018864:	ef                   	out    dx,eax
c0018865:	85 ff                	test   edi,edi
c0018867:	74 05                	je     c001886e <vm8086FaultHandler(regs*)+0x4db>
c0018869:	83 e9 04             	sub    ecx,0x4
c001886c:	eb 21                	jmp    c001888f <vm8086FaultHandler(regs*)+0x4fc>
c001886e:	83 c1 04             	add    ecx,0x4
c0018871:	eb 1c                	jmp    c001888f <vm8086FaultHandler(regs*)+0x4fc>
c0018873:	55                   	push   ebp
c0018874:	55                   	push   ebp
c0018875:	50                   	push   eax
c0018876:	52                   	push   edx
c0018877:	e8 b4 fa ff ff       	call   c0018330 <readWordFromReal(unsigned short, unsigned short)>
c001887c:	83 c4 10             	add    esp,0x10
c001887f:	89 f2                	mov    edx,esi
c0018881:	66 ef                	out    dx,ax
c0018883:	85 ff                	test   edi,edi
c0018885:	74 05                	je     c001888c <vm8086FaultHandler(regs*)+0x4f9>
c0018887:	83 e9 02             	sub    ecx,0x2
c001888a:	eb 03                	jmp    c001888f <vm8086FaultHandler(regs*)+0x4fc>
c001888c:	83 c1 02             	add    ecx,0x2
c001888f:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0018895:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c0018898:	e9 cb 00 00 00       	jmp    c0018968 <vm8086FaultHandler(regs*)+0x5d5>
c001889d:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c00188a4:	83 ec 0c             	sub    esp,0xc
c00188a7:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c00188ab:	50                   	push   eax
c00188ac:	e8 88 f8 ff ff       	call   c0018139 <inbv(unsigned short)>
c00188b1:	0f b6 c0             	movzx  eax,al
c00188b4:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c00188b7:	eb 3f                	jmp    c00188f8 <vm8086FaultHandler(regs*)+0x565>
c00188b9:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00188be:	74 07                	je     c00188c7 <vm8086FaultHandler(regs*)+0x534>
c00188c0:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c00188c4:	ed                   	in     eax,dx
c00188c5:	eb 14                	jmp    c00188db <vm8086FaultHandler(regs*)+0x548>
c00188c7:	8b 4b 2c             	mov    ecx,DWORD PTR [ebx+0x2c]
c00188ca:	66 31 c9             	xor    cx,cx
c00188cd:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00188d0:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c00188d4:	66 ed                	in     ax,dx
c00188d6:	0f b7 c0             	movzx  eax,ax
c00188d9:	09 c8                	or     eax,ecx
c00188db:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00188de:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00188e2:	e9 84 00 00 00       	jmp    c001896b <vm8086FaultHandler(regs*)+0x5d8>
c00188e7:	52                   	push   edx
c00188e8:	52                   	push   edx
c00188e9:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c00188ed:	50                   	push   eax
c00188ee:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c00188f2:	50                   	push   eax
c00188f3:	e8 47 f8 ff ff       	call   c001813f <outbv(unsigned short, unsigned char)>
c00188f8:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00188fc:	eb 53                	jmp    c0018951 <vm8086FaultHandler(regs*)+0x5be>
c00188fe:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0018901:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c0018905:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001890a:	74 03                	je     c001890f <vm8086FaultHandler(regs*)+0x57c>
c001890c:	ef                   	out    dx,eax
c001890d:	eb cf                	jmp    c00188de <vm8086FaultHandler(regs*)+0x54b>
c001890f:	66 ef                	out    dx,ax
c0018911:	eb cb                	jmp    c00188de <vm8086FaultHandler(regs*)+0x54b>
c0018913:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001891a:	83 ec 0c             	sub    esp,0xc
c001891d:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0018921:	50                   	push   eax
c0018922:	e8 12 f8 ff ff       	call   c0018139 <inbv(unsigned short)>
c0018927:	0f b6 c0             	movzx  eax,al
c001892a:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001892d:	eb 1f                	jmp    c001894e <vm8086FaultHandler(regs*)+0x5bb>
c001892f:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0018932:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0018937:	74 03                	je     c001893c <vm8086FaultHandler(regs*)+0x5a9>
c0018939:	ed                   	in     eax,dx
c001893a:	eb 0d                	jmp    c0018949 <vm8086FaultHandler(regs*)+0x5b6>
c001893c:	66 ed                	in     ax,dx
c001893e:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0018941:	0f b7 c0             	movzx  eax,ax
c0018944:	66 31 d2             	xor    dx,dx
c0018947:	09 d0                	or     eax,edx
c0018949:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001894c:	eb 1a                	jmp    c0018968 <vm8086FaultHandler(regs*)+0x5d5>
c001894e:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018951:	83 c4 10             	add    esp,0x10
c0018954:	eb 15                	jmp    c001896b <vm8086FaultHandler(regs*)+0x5d8>
c0018956:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0018959:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001895c:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0018961:	74 03                	je     c0018966 <vm8086FaultHandler(regs*)+0x5d3>
c0018963:	ef                   	out    dx,eax
c0018964:	eb 02                	jmp    c0018968 <vm8086FaultHandler(regs*)+0x5d5>
c0018966:	66 ef                	out    dx,ax
c0018968:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001896b:	b0 01                	mov    al,0x1
c001896d:	eb 56                	jmp    c00189c5 <vm8086FaultHandler(regs*)+0x632>
c001896f:	0f b6 47 05          	movzx  eax,BYTE PTR [edi+0x5]
c0018973:	50                   	push   eax
c0018974:	0f b6 47 04          	movzx  eax,BYTE PTR [edi+0x4]
c0018978:	50                   	push   eax
c0018979:	0f b6 47 03          	movzx  eax,BYTE PTR [edi+0x3]
c001897d:	50                   	push   eax
c001897e:	0f b6 47 02          	movzx  eax,BYTE PTR [edi+0x2]
c0018982:	50                   	push   eax
c0018983:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0018987:	50                   	push   eax
c0018988:	52                   	push   edx
c0018989:	52                   	push   edx
c001898a:	68 f3 1a 02 c0       	push   0xc0021af3
c001898f:	e8 34 41 ff ff       	call   c000cac8 <kprintf(char const*, ...)>
c0018994:	83 c4 20             	add    esp,0x20
c0018997:	83 ec 0c             	sub    esp,0xc
c001899a:	6a 60                	push   0x60
c001899c:	e8 98 f7 ff ff       	call   c0018139 <inbv(unsigned short)>
c00189a1:	83 c4 10             	add    esp,0x10
c00189a4:	3c 1c                	cmp    al,0x1c
c00189a6:	74 04                	je     c00189ac <vm8086FaultHandler(regs*)+0x619>
c00189a8:	3c 5a                	cmp    al,0x5a
c00189aa:	75 eb                	jne    c0018997 <vm8086FaultHandler(regs*)+0x604>
c00189ac:	3c 5a                	cmp    al,0x5a
c00189ae:	74 04                	je     c00189b4 <vm8086FaultHandler(regs*)+0x621>
c00189b0:	3c 1c                	cmp    al,0x1c
c00189b2:	75 0f                	jne    c00189c3 <vm8086FaultHandler(regs*)+0x630>
c00189b4:	83 ec 0c             	sub    esp,0xc
c00189b7:	6a 60                	push   0x60
c00189b9:	e8 7b f7 ff ff       	call   c0018139 <inbv(unsigned short)>
c00189be:	83 c4 10             	add    esp,0x10
c00189c1:	eb e9                	jmp    c00189ac <vm8086FaultHandler(regs*)+0x619>
c00189c3:	31 c0                	xor    eax,eax
c00189c5:	83 c4 1c             	add    esp,0x1c
c00189c8:	5b                   	pop    ebx
c00189c9:	5e                   	pop    esi
c00189ca:	5f                   	pop    edi
c00189cb:	5d                   	pop    ebp
c00189cc:	c3                   	ret    
c00189cd:	90                   	nop

c00189ce <FAT::getName()>:
c00189ce:	b8 50 1b 02 c0       	mov    eax,0xc0021b50
c00189d3:	c3                   	ret    

c00189d4 <FAT::tell(void*, unsigned long long*)>:
c00189d4:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00189d9:	75 06                	jne    c00189e1 <FAT::tell(void*, unsigned long long*)+0xd>
c00189db:	b8 04 00 00 00       	mov    eax,0x4
c00189e0:	c3                   	ret    
c00189e1:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00189e6:	75 06                	jne    c00189ee <FAT::tell(void*, unsigned long long*)+0x1a>
c00189e8:	b8 04 00 00 00       	mov    eax,0x4
c00189ed:	c3                   	ret    
c00189ee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00189f2:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c00189f5:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00189f8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00189fc:	89 01                	mov    DWORD PTR [ecx],eax
c00189fe:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018a01:	b8 00 00 00 00       	mov    eax,0x0
c0018a06:	c3                   	ret    
c0018a07:	90                   	nop

c0018a08 <FAT::stat(void*, unsigned long long*)>:
c0018a08:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018a0d:	75 06                	jne    c0018a15 <FAT::stat(void*, unsigned long long*)+0xd>
c0018a0f:	b8 04 00 00 00       	mov    eax,0x4
c0018a14:	c3                   	ret    
c0018a15:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018a1a:	75 06                	jne    c0018a22 <FAT::stat(void*, unsigned long long*)+0x1a>
c0018a1c:	b8 04 00 00 00       	mov    eax,0x4
c0018a21:	c3                   	ret    
c0018a22:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018a26:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0018a29:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018a2c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018a30:	89 01                	mov    DWORD PTR [ecx],eax
c0018a32:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018a35:	b8 00 00 00 00       	mov    eax,0x0
c0018a3a:	c3                   	ret    
c0018a3b:	90                   	nop

c0018a3c <FAT::exists(char const*)>:
c0018a3c:	b0 00                	mov    al,0x0
c0018a3e:	c3                   	ret    
c0018a3f:	90                   	nop

c0018a40 <FAT::~FAT()>:
c0018a40:	83 ec 0c             	sub    esp,0xc
c0018a43:	ba d4 1b 02 c0       	mov    edx,0xc0021bd4
c0018a48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018a4c:	89 10                	mov    DWORD PTR [eax],edx
c0018a4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018a52:	83 ec 0c             	sub    esp,0xc
c0018a55:	50                   	push   eax
c0018a56:	e8 45 98 ff ff       	call   c00122a0 <Filesystem::~Filesystem()>
c0018a5b:	83 c4 10             	add    esp,0x10
c0018a5e:	90                   	nop
c0018a5f:	83 c4 0c             	add    esp,0xc
c0018a62:	c3                   	ret    
c0018a63:	90                   	nop

c0018a64 <FAT::~FAT()>:
c0018a64:	83 ec 0c             	sub    esp,0xc
c0018a67:	83 ec 0c             	sub    esp,0xc
c0018a6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018a6e:	e8 cd ff ff ff       	call   c0018a40 <FAT::~FAT()>
c0018a73:	83 c4 10             	add    esp,0x10
c0018a76:	83 ec 08             	sub    esp,0x8
c0018a79:	6a 08                	push   0x8
c0018a7b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018a7f:	e8 03 96 ff ff       	call   c0012087 <operator delete(void*, unsigned long)>
c0018a84:	83 c4 10             	add    esp,0x10
c0018a87:	83 c4 0c             	add    esp,0xc
c0018a8a:	c3                   	ret    
c0018a8b:	90                   	nop

c0018a8c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0018a8c:	83 ec 1c             	sub    esp,0x1c
c0018a8f:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0018a96:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0018a9b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018a9f:	8b 04 85 a0 3e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc160]
c0018aa6:	83 f8 ff             	cmp    eax,0xffffffff
c0018aa9:	75 34                	jne    c0018adf <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c0018aab:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018aaf:	88 c2                	mov    dl,al
c0018ab1:	a1 80 3e 02 c0       	mov    eax,ds:0xc0023e80
c0018ab6:	01 d0                	add    eax,edx
c0018ab8:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0018abc:	8b 15 80 3e 02 c0    	mov    edx,DWORD PTR ds:0xc0023e80
c0018ac2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018ac6:	89 14 85 a0 3e 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc160],edx
c0018acd:	a1 80 3e 02 c0       	mov    eax,ds:0xc0023e80
c0018ad2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018ad6:	89 14 85 20 3f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc0e0],edx
c0018add:	eb 17                	jmp    c0018af6 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c0018adf:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018ae3:	88 c2                	mov    dl,al
c0018ae5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018ae9:	8b 04 85 a0 3e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc160]
c0018af0:	01 d0                	add    eax,edx
c0018af2:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0018af6:	83 ec 04             	sub    esp,0x4
c0018af9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018afd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018b01:	8d 44 24 15          	lea    eax,[esp+0x15]
c0018b05:	50                   	push   eax
c0018b06:	e8 5a df fe ff       	call   c0006a65 <f_getlabel>
c0018b0b:	83 c4 10             	add    esp,0x10
c0018b0e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018b12:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018b17:	75 07                	jne    c0018b20 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c0018b19:	b8 00 00 00 00       	mov    eax,0x0
c0018b1e:	eb 05                	jmp    c0018b25 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c0018b20:	b8 01 00 00 00       	mov    eax,0x1
c0018b25:	83 c4 1c             	add    esp,0x1c
c0018b28:	c3                   	ret    
c0018b29:	90                   	nop

c0018b2a <FAT::setlabel(LogicalDisk*, int, char*)>:
c0018b2a:	57                   	push   edi
c0018b2b:	83 ec 58             	sub    esp,0x58
c0018b2e:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0018b36:	8d 54 24 10          	lea    edx,[esp+0x10]
c0018b3a:	b9 0f 00 00 00       	mov    ecx,0xf
c0018b3f:	b8 00 00 00 00       	mov    eax,0x0
c0018b44:	fc                   	cld    
c0018b45:	89 d7                	mov    edi,edx
c0018b47:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0018b49:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0018b4d:	8b 04 85 a0 3e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc160]
c0018b54:	83 f8 ff             	cmp    eax,0xffffffff
c0018b57:	75 34                	jne    c0018b8d <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c0018b59:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018b5d:	88 c2                	mov    dl,al
c0018b5f:	a1 80 3e 02 c0       	mov    eax,ds:0xc0023e80
c0018b64:	01 d0                	add    eax,edx
c0018b66:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018b6a:	8b 15 80 3e 02 c0    	mov    edx,DWORD PTR ds:0xc0023e80
c0018b70:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0018b74:	89 14 85 a0 3e 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc160],edx
c0018b7b:	a1 80 3e 02 c0       	mov    eax,ds:0xc0023e80
c0018b80:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0018b84:	89 14 85 20 3f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc0e0],edx
c0018b8b:	eb 17                	jmp    c0018ba4 <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c0018b8d:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018b91:	88 c2                	mov    dl,al
c0018b93:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0018b97:	8b 04 85 a0 3e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc160]
c0018b9e:	01 d0                	add    eax,edx
c0018ba0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018ba4:	83 ec 08             	sub    esp,0x8
c0018ba7:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0018bab:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018baf:	50                   	push   eax
c0018bb0:	e8 a9 7b fe ff       	call   c000075e <strcat>
c0018bb5:	83 c4 10             	add    esp,0x10
c0018bb8:	83 ec 0c             	sub    esp,0xc
c0018bbb:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018bbf:	50                   	push   eax
c0018bc0:	e8 8e e0 fe ff       	call   c0006c53 <f_setlabel>
c0018bc5:	83 c4 10             	add    esp,0x10
c0018bc8:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0018bcc:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0018bd1:	75 07                	jne    c0018bda <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c0018bd3:	b8 00 00 00 00       	mov    eax,0x0
c0018bd8:	eb 05                	jmp    c0018bdf <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c0018bda:	b8 01 00 00 00       	mov    eax,0x1
c0018bdf:	83 c4 58             	add    esp,0x58
c0018be2:	5f                   	pop    edi
c0018be3:	c3                   	ret    

c0018be4 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0018be4:	83 ec 2c             	sub    esp,0x2c
c0018be7:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0018bef:	83 ec 08             	sub    esp,0x8
c0018bf2:	68 74 1b 02 c0       	push   0xc0021b74
c0018bf7:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018bfb:	e8 f8 7a fe ff       	call   c00006f8 <strcmp>
c0018c00:	83 c4 10             	add    esp,0x10
c0018c03:	85 c0                	test   eax,eax
c0018c05:	0f 94 c0             	sete   al
c0018c08:	84 c0                	test   al,al
c0018c0a:	74 0d                	je     c0018c19 <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c0018c0c:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0018c14:	e9 a6 00 00 00       	jmp    c0018cbf <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0018c19:	83 ec 08             	sub    esp,0x8
c0018c1c:	68 66 1b 02 c0       	push   0xc0021b66
c0018c21:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018c25:	e8 ce 7a fe ff       	call   c00006f8 <strcmp>
c0018c2a:	83 c4 10             	add    esp,0x10
c0018c2d:	85 c0                	test   eax,eax
c0018c2f:	0f 94 c0             	sete   al
c0018c32:	84 c0                	test   al,al
c0018c34:	74 0a                	je     c0018c40 <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c0018c36:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0018c3e:	eb 7f                	jmp    c0018cbf <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0018c40:	83 ec 08             	sub    esp,0x8
c0018c43:	68 6c 1b 02 c0       	push   0xc0021b6c
c0018c48:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018c4c:	e8 a7 7a fe ff       	call   c00006f8 <strcmp>
c0018c51:	83 c4 10             	add    esp,0x10
c0018c54:	85 c0                	test   eax,eax
c0018c56:	0f 94 c0             	sete   al
c0018c59:	84 c0                	test   al,al
c0018c5b:	74 0a                	je     c0018c67 <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c0018c5d:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0018c65:	eb 58                	jmp    c0018cbf <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0018c67:	83 ec 08             	sub    esp,0x8
c0018c6a:	68 cc f3 01 c0       	push   0xc001f3cc
c0018c6f:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018c73:	e8 80 7a fe ff       	call   c00006f8 <strcmp>
c0018c78:	83 c4 10             	add    esp,0x10
c0018c7b:	85 c0                	test   eax,eax
c0018c7d:	0f 94 c0             	sete   al
c0018c80:	84 c0                	test   al,al
c0018c82:	74 0a                	je     c0018c8e <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c0018c84:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0018c8c:	eb 31                	jmp    c0018cbf <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0018c8e:	83 ec 08             	sub    esp,0x8
c0018c91:	68 72 1b 02 c0       	push   0xc0021b72
c0018c96:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018c9a:	e8 59 7a fe ff       	call   c00006f8 <strcmp>
c0018c9f:	83 c4 10             	add    esp,0x10
c0018ca2:	85 c0                	test   eax,eax
c0018ca4:	0f 94 c0             	sete   al
c0018ca7:	84 c0                	test   al,al
c0018ca9:	74 0a                	je     c0018cb5 <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c0018cab:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0018cb3:	eb 0a                	jmp    c0018cbf <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0018cb5:	b8 08 00 00 00       	mov    eax,0x8
c0018cba:	e9 04 01 00 00       	jmp    c0018dc3 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0018cbf:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0018cc6:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0018ccb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018ccf:	8b 04 85 a0 3e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc160]
c0018cd6:	83 f8 ff             	cmp    eax,0xffffffff
c0018cd9:	75 34                	jne    c0018d0f <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c0018cdb:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0018cdf:	88 c2                	mov    dl,al
c0018ce1:	a1 80 3e 02 c0       	mov    eax,ds:0xc0023e80
c0018ce6:	01 d0                	add    eax,edx
c0018ce8:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0018cec:	8b 15 80 3e 02 c0    	mov    edx,DWORD PTR ds:0xc0023e80
c0018cf2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018cf6:	89 14 85 a0 3e 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc160],edx
c0018cfd:	a1 80 3e 02 c0       	mov    eax,ds:0xc0023e80
c0018d02:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0018d06:	89 14 85 20 3f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc0e0],edx
c0018d0d:	eb 17                	jmp    c0018d26 <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c0018d0f:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0018d13:	88 c2                	mov    dl,al
c0018d15:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018d19:	8b 04 85 a0 3e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc160]
c0018d20:	01 d0                	add    eax,edx
c0018d22:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0018d26:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018d2a:	88 04 24             	mov    BYTE PTR [esp],al
c0018d2d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0018d31:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018d35:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0018d3d:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0018d42:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0018d4a:	83 ec 0c             	sub    esp,0xc
c0018d4d:	68 00 20 00 00       	push   0x2000
c0018d52:	e8 6c 43 ff ff       	call   c000d0c3 <malloc>
c0018d57:	83 c4 10             	add    esp,0x10
c0018d5a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018d5e:	68 00 20 00 00       	push   0x2000
c0018d63:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018d67:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018d6b:	50                   	push   eax
c0018d6c:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0018d70:	50                   	push   eax
c0018d71:	e8 28 e3 fe ff       	call   c000709e <f_mkfs>
c0018d76:	83 c4 10             	add    esp,0x10
c0018d79:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018d7d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0018d82:	75 07                	jne    c0018d8b <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c0018d84:	b8 00 00 00 00       	mov    eax,0x0
c0018d89:	eb 38                	jmp    c0018dc3 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0018d8b:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0018d90:	75 17                	jne    c0018da9 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c0018d92:	83 ec 0c             	sub    esp,0xc
c0018d95:	68 a4 1b 02 c0       	push   0xc0021ba4
c0018d9a:	e8 29 3d ff ff       	call   c000cac8 <kprintf(char const*, ...)>
c0018d9f:	83 c4 10             	add    esp,0x10
c0018da2:	b8 09 00 00 00       	mov    eax,0x9
c0018da7:	eb 1a                	jmp    c0018dc3 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0018da9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018dad:	83 ec 08             	sub    esp,0x8
c0018db0:	50                   	push   eax
c0018db1:	68 78 1b 02 c0       	push   0xc0021b78
c0018db6:	e8 0d 3d ff ff       	call   c000cac8 <kprintf(char const*, ...)>
c0018dbb:	83 c4 10             	add    esp,0x10
c0018dbe:	b8 01 00 00 00       	mov    eax,0x1
c0018dc3:	83 c4 2c             	add    esp,0x2c
c0018dc6:	c3                   	ret    
c0018dc7:	90                   	nop

c0018dc8 <FAT::tryMount(LogicalDisk*, int)>:
c0018dc8:	81 ec 6c 03 00 00    	sub    esp,0x36c
c0018dce:	a1 80 3e 02 c0       	mov    eax,ds:0xc0023e80
c0018dd3:	83 f8 14             	cmp    eax,0x14
c0018dd6:	75 17                	jne    c0018def <FAT::tryMount(LogicalDisk*, int)+0x27>
c0018dd8:	83 ec 0c             	sub    esp,0xc
c0018ddb:	68 8a 1b 02 c0       	push   0xc0021b8a
c0018de0:	e8 01 3e ff ff       	call   c000cbe6 <panic(char const*)>
c0018de5:	83 c4 10             	add    esp,0x10
c0018de8:	b0 00                	mov    al,0x0
c0018dea:	e9 d7 01 00 00       	jmp    c0018fc6 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0018def:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0018df6:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0018dfc:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0018e02:	3d 00 02 00 00       	cmp    eax,0x200
c0018e07:	74 07                	je     c0018e10 <FAT::tryMount(LogicalDisk*, int)+0x48>
c0018e09:	b0 00                	mov    al,0x0
c0018e0b:	e9 b6 01 00 00       	jmp    c0018fc6 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0018e10:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c0018e18:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0018e1f:	8b 04 85 a0 3e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc160]
c0018e26:	83 f8 ff             	cmp    eax,0xffffffff
c0018e29:	74 07                	je     c0018e32 <FAT::tryMount(LogicalDisk*, int)+0x6a>
c0018e2b:	b0 01                	mov    al,0x1
c0018e2d:	e9 94 01 00 00       	jmp    c0018fc6 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0018e32:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c0018e3c:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c0018e44:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c0018e4b:	88 c2                	mov    dl,al
c0018e4d:	a1 80 3e 02 c0       	mov    eax,ds:0xc0023e80
c0018e52:	01 d0                	add    eax,edx
c0018e54:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c0018e5b:	8b 15 80 3e 02 c0    	mov    edx,DWORD PTR ds:0xc0023e80
c0018e61:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0018e68:	89 14 85 a0 3e 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc160],edx
c0018e6f:	a1 80 3e 02 c0       	mov    eax,ds:0xc0023e80
c0018e74:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c0018e7b:	89 14 85 20 3f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc0e0],edx
c0018e82:	83 ec 0c             	sub    esp,0xc
c0018e85:	68 54 02 00 00       	push   0x254
c0018e8a:	e8 34 42 ff ff       	call   c000d0c3 <malloc>
c0018e8f:	83 c4 10             	add    esp,0x10
c0018e92:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c0018e99:	83 ec 04             	sub    esp,0x4
c0018e9c:	6a 00                	push   0x0
c0018e9e:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0018ea5:	50                   	push   eax
c0018ea6:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0018ead:	e8 aa bd fe ff       	call   c0004c5c <f_mount>
c0018eb2:	83 c4 10             	add    esp,0x10
c0018eb5:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0018ebc:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c0018ec4:	74 19                	je     c0018edf <FAT::tryMount(LogicalDisk*, int)+0x117>
c0018ec6:	83 ec 0c             	sub    esp,0xc
c0018ec9:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0018ed0:	e8 0e 42 ff ff       	call   c000d0e3 <rfree>
c0018ed5:	83 c4 10             	add    esp,0x10
c0018ed8:	b0 00                	mov    al,0x0
c0018eda:	e9 e7 00 00 00       	jmp    c0018fc6 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0018edf:	83 ec 04             	sub    esp,0x4
c0018ee2:	68 00 01 00 00       	push   0x100
c0018ee7:	6a 00                	push   0x0
c0018ee9:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0018ef0:	50                   	push   eax
c0018ef1:	e8 12 77 fe ff       	call   c0000608 <memset>
c0018ef6:	83 c4 10             	add    esp,0x10
c0018ef9:	83 ec 08             	sub    esp,0x8
c0018efc:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0018f03:	50                   	push   eax
c0018f04:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0018f0b:	50                   	push   eax
c0018f0c:	e8 4d 78 fe ff       	call   c000075e <strcat>
c0018f11:	83 c4 10             	add    esp,0x10
c0018f14:	83 ec 08             	sub    esp,0x8
c0018f17:	68 98 1b 02 c0       	push   0xc0021b98
c0018f1c:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0018f23:	50                   	push   eax
c0018f24:	e8 35 78 fe ff       	call   c000075e <strcat>
c0018f29:	83 c4 10             	add    esp,0x10
c0018f2c:	83 ec 04             	sub    esp,0x4
c0018f2f:	6a 01                	push   0x1
c0018f31:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c0018f38:	50                   	push   eax
c0018f39:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018f3d:	50                   	push   eax
c0018f3e:	e8 7b bd fe ff       	call   c0004cbe <f_open>
c0018f43:	83 c4 10             	add    esp,0x10
c0018f46:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0018f4d:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0018f54:	85 c0                	test   eax,eax
c0018f56:	74 0a                	je     c0018f62 <FAT::tryMount(LogicalDisk*, int)+0x19a>
c0018f58:	78 2d                	js     c0018f87 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0018f5a:	83 e8 04             	sub    eax,0x4
c0018f5d:	83 f8 01             	cmp    eax,0x1
c0018f60:	77 25                	ja     c0018f87 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0018f62:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c0018f6a:	83 ec 0c             	sub    esp,0xc
c0018f6d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018f71:	50                   	push   eax
c0018f72:	e8 99 c8 fe ff       	call   c0005810 <f_close>
c0018f77:	83 c4 10             	add    esp,0x10
c0018f7a:	90                   	nop
c0018f7b:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c0018f83:	74 3a                	je     c0018fbf <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c0018f85:	eb 2d                	jmp    c0018fb4 <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c0018f87:	83 ec 0c             	sub    esp,0xc
c0018f8a:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0018f91:	e8 4d 41 ff ff       	call   c000d0e3 <rfree>
c0018f96:	83 c4 10             	add    esp,0x10
c0018f99:	83 ec 04             	sub    esp,0x4
c0018f9c:	6a 00                	push   0x0
c0018f9e:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0018fa5:	50                   	push   eax
c0018fa6:	6a 00                	push   0x0
c0018fa8:	e8 af bc fe ff       	call   c0004c5c <f_mount>
c0018fad:	83 c4 10             	add    esp,0x10
c0018fb0:	b0 00                	mov    al,0x0
c0018fb2:	eb 12                	jmp    c0018fc6 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0018fb4:	a1 80 3e 02 c0       	mov    eax,ds:0xc0023e80
c0018fb9:	40                   	inc    eax
c0018fba:	a3 80 3e 02 c0       	mov    ds:0xc0023e80,eax
c0018fbf:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c0018fc6:	81 c4 6c 03 00 00    	add    esp,0x36c
c0018fcc:	c3                   	ret    
c0018fcd:	90                   	nop

c0018fce <FAT::readDir(void*, unsigned long, void*, int*)>:
c0018fce:	81 ec 3c 02 00 00    	sub    esp,0x23c
c0018fd4:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c0018fdc:	74 0a                	je     c0018fe8 <FAT::readDir(void*, unsigned long, void*, int*)+0x1a>
c0018fde:	83 bc 24 50 02 00 00 00 	cmp    DWORD PTR [esp+0x250],0x0
c0018fe6:	75 0a                	jne    c0018ff2 <FAT::readDir(void*, unsigned long, void*, int*)+0x24>
c0018fe8:	b8 04 00 00 00       	mov    eax,0x4
c0018fed:	e9 dc 00 00 00       	jmp    c00190ce <FAT::readDir(void*, unsigned long, void*, int*)+0x100>
c0018ff2:	83 ec 08             	sub    esp,0x8
c0018ff5:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0018ffc:	50                   	push   eax
c0018ffd:	ff b4 24 50 02 00 00 	push   DWORD PTR [esp+0x250]
c0019004:	e8 11 ce fe ff       	call   c0005e1a <f_readdir>
c0019009:	83 c4 10             	add    esp,0x10
c001900c:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c0019013:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001901a:	83 ec 0c             	sub    esp,0xc
c001901d:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0019024:	83 c0 1a             	add    eax,0x1a
c0019027:	50                   	push   eax
c0019028:	e8 f8 75 fe ff       	call   c0000625 <strlen>
c001902d:	83 c4 10             	add    esp,0x10
c0019030:	ba 00 00 00 00       	mov    edx,0x0
c0019035:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019039:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001903d:	8a 84 24 1c 01 00 00 	mov    al,BYTE PTR [esp+0x11c]
c0019044:	0f b6 c0             	movzx  eax,al
c0019047:	83 e0 10             	and    eax,0x10
c001904a:	74 07                	je     c0019053 <FAT::readDir(void*, unsigned long, void*, int*)+0x85>
c001904c:	b8 02 00 00 00       	mov    eax,0x2
c0019051:	eb 05                	jmp    c0019058 <FAT::readDir(void*, unsigned long, void*, int*)+0x8a>
c0019053:	b8 01 00 00 00       	mov    eax,0x1
c0019058:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001905c:	83 ec 08             	sub    esp,0x8
c001905f:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0019066:	83 c0 1a             	add    eax,0x1a
c0019069:	50                   	push   eax
c001906a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001906e:	83 c0 10             	add    eax,0x10
c0019071:	50                   	push   eax
c0019072:	e8 30 76 fe ff       	call   c00006a7 <strcpy>
c0019077:	83 c4 10             	add    esp,0x10
c001907a:	83 ec 04             	sub    esp,0x4
c001907d:	ff b4 24 4c 02 00 00 	push   DWORD PTR [esp+0x24c]
c0019084:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019088:	50                   	push   eax
c0019089:	ff b4 24 58 02 00 00 	push   DWORD PTR [esp+0x258]
c0019090:	e8 3d 75 fe ff       	call   c00005d2 <memcpy>
c0019095:	83 c4 10             	add    esp,0x10
c0019098:	8b 84 24 50 02 00 00 	mov    eax,DWORD PTR [esp+0x250]
c001909f:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c00190a5:	8a 84 24 2a 01 00 00 	mov    al,BYTE PTR [esp+0x12a]
c00190ac:	84 c0                	test   al,al
c00190ae:	75 07                	jne    c00190b7 <FAT::readDir(void*, unsigned long, void*, int*)+0xe9>
c00190b0:	b8 07 00 00 00       	mov    eax,0x7
c00190b5:	eb 17                	jmp    c00190ce <FAT::readDir(void*, unsigned long, void*, int*)+0x100>
c00190b7:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c00190be:	85 c0                	test   eax,eax
c00190c0:	75 07                	jne    c00190c9 <FAT::readDir(void*, unsigned long, void*, int*)+0xfb>
c00190c2:	b8 00 00 00 00       	mov    eax,0x0
c00190c7:	eb 05                	jmp    c00190ce <FAT::readDir(void*, unsigned long, void*, int*)+0x100>
c00190c9:	b8 01 00 00 00       	mov    eax,0x1
c00190ce:	81 c4 3c 02 00 00    	add    esp,0x23c
c00190d4:	c3                   	ret    
c00190d5:	90                   	nop

c00190d6 <FAT::read(void*, unsigned long, void*, int*)>:
c00190d6:	83 ec 1c             	sub    esp,0x1c
c00190d9:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00190de:	74 07                	je     c00190e7 <FAT::read(void*, unsigned long, void*, int*)+0x11>
c00190e0:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00190e5:	75 07                	jne    c00190ee <FAT::read(void*, unsigned long, void*, int*)+0x18>
c00190e7:	b8 04 00 00 00       	mov    eax,0x4
c00190ec:	eb 3d                	jmp    c001912b <FAT::read(void*, unsigned long, void*, int*)+0x55>
c00190ee:	8d 44 24 08          	lea    eax,[esp+0x8]
c00190f2:	50                   	push   eax
c00190f3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00190f7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00190fb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00190ff:	e8 f6 bf fe ff       	call   c00050fa <f_read>
c0019104:	83 c4 10             	add    esp,0x10
c0019107:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001910b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001910f:	89 c2                	mov    edx,eax
c0019111:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019115:	89 10                	mov    DWORD PTR [eax],edx
c0019117:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001911b:	85 c0                	test   eax,eax
c001911d:	75 07                	jne    c0019126 <FAT::read(void*, unsigned long, void*, int*)+0x50>
c001911f:	b8 00 00 00 00       	mov    eax,0x0
c0019124:	eb 05                	jmp    c001912b <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0019126:	b8 01 00 00 00       	mov    eax,0x1
c001912b:	83 c4 1c             	add    esp,0x1c
c001912e:	c3                   	ret    
c001912f:	90                   	nop

c0019130 <FAT::write(void*, unsigned long, void*, int*)>:
c0019130:	83 ec 1c             	sub    esp,0x1c
c0019133:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019138:	74 07                	je     c0019141 <FAT::write(void*, unsigned long, void*, int*)+0x11>
c001913a:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001913f:	75 07                	jne    c0019148 <FAT::write(void*, unsigned long, void*, int*)+0x18>
c0019141:	b8 04 00 00 00       	mov    eax,0x4
c0019146:	eb 3d                	jmp    c0019185 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0019148:	8d 44 24 08          	lea    eax,[esp+0x8]
c001914c:	50                   	push   eax
c001914d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019151:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0019155:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019159:	e8 1c c2 fe ff       	call   c000537a <f_write>
c001915e:	83 c4 10             	add    esp,0x10
c0019161:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019165:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019169:	89 c2                	mov    edx,eax
c001916b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001916f:	89 10                	mov    DWORD PTR [eax],edx
c0019171:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019175:	85 c0                	test   eax,eax
c0019177:	75 07                	jne    c0019180 <FAT::write(void*, unsigned long, void*, int*)+0x50>
c0019179:	b8 00 00 00 00       	mov    eax,0x0
c001917e:	eb 05                	jmp    c0019185 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0019180:	b8 01 00 00 00       	mov    eax,0x1
c0019185:	83 c4 1c             	add    esp,0x1c
c0019188:	c3                   	ret    
c0019189:	90                   	nop

c001918a <FAT::close(void*)>:
c001918a:	83 ec 1c             	sub    esp,0x1c
c001918d:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019192:	75 07                	jne    c001919b <FAT::close(void*)+0x11>
c0019194:	b8 04 00 00 00       	mov    eax,0x4
c0019199:	eb 36                	jmp    c00191d1 <FAT::close(void*)+0x47>
c001919b:	83 ec 0c             	sub    esp,0xc
c001919e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00191a2:	e8 69 c6 fe ff       	call   c0005810 <f_close>
c00191a7:	83 c4 10             	add    esp,0x10
c00191aa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00191ae:	83 ec 0c             	sub    esp,0xc
c00191b1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00191b5:	e8 19 3f ff ff       	call   c000d0d3 <free>
c00191ba:	83 c4 10             	add    esp,0x10
c00191bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00191c1:	85 c0                	test   eax,eax
c00191c3:	75 07                	jne    c00191cc <FAT::close(void*)+0x42>
c00191c5:	b8 00 00 00 00       	mov    eax,0x0
c00191ca:	eb 05                	jmp    c00191d1 <FAT::close(void*)+0x47>
c00191cc:	b8 01 00 00 00       	mov    eax,0x1
c00191d1:	83 c4 1c             	add    esp,0x1c
c00191d4:	c3                   	ret    
c00191d5:	90                   	nop

c00191d6 <FAT::closeDir(void*)>:
c00191d6:	83 ec 1c             	sub    esp,0x1c
c00191d9:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00191de:	75 07                	jne    c00191e7 <FAT::closeDir(void*)+0x11>
c00191e0:	b8 04 00 00 00       	mov    eax,0x4
c00191e5:	eb 36                	jmp    c001921d <FAT::closeDir(void*)+0x47>
c00191e7:	83 ec 0c             	sub    esp,0xc
c00191ea:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00191ee:	e8 05 cc fe ff       	call   c0005df8 <f_closedir>
c00191f3:	83 c4 10             	add    esp,0x10
c00191f6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00191fa:	83 ec 0c             	sub    esp,0xc
c00191fd:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019201:	e8 cd 3e ff ff       	call   c000d0d3 <free>
c0019206:	83 c4 10             	add    esp,0x10
c0019209:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001920d:	85 c0                	test   eax,eax
c001920f:	75 07                	jne    c0019218 <FAT::closeDir(void*)+0x42>
c0019211:	b8 00 00 00 00       	mov    eax,0x0
c0019216:	eb 05                	jmp    c001921d <FAT::closeDir(void*)+0x47>
c0019218:	b8 01 00 00 00       	mov    eax,0x1
c001921d:	83 c4 1c             	add    esp,0x1c
c0019220:	c3                   	ret    
c0019221:	90                   	nop

c0019222 <FAT::seek(void*, unsigned long long)>:
c0019222:	83 ec 2c             	sub    esp,0x2c
c0019225:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019229:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001922d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019231:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019235:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001923a:	75 07                	jne    c0019243 <FAT::seek(void*, unsigned long long)+0x21>
c001923c:	b8 04 00 00 00       	mov    eax,0x4
c0019241:	eb 2f                	jmp    c0019272 <FAT::seek(void*, unsigned long long)+0x50>
c0019243:	83 ec 04             	sub    esp,0x4
c0019246:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001924a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001924e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0019252:	e8 e8 c5 fe ff       	call   c000583f <f_lseek>
c0019257:	83 c4 10             	add    esp,0x10
c001925a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001925e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019262:	85 c0                	test   eax,eax
c0019264:	75 07                	jne    c001926d <FAT::seek(void*, unsigned long long)+0x4b>
c0019266:	b8 00 00 00 00       	mov    eax,0x0
c001926b:	eb 05                	jmp    c0019272 <FAT::seek(void*, unsigned long long)+0x50>
c001926d:	b8 01 00 00 00       	mov    eax,0x1
c0019272:	83 c4 2c             	add    esp,0x2c
c0019275:	c3                   	ret    

c0019276 <fatWrapperReadDisk>:
c0019276:	83 ec 1c             	sub    esp,0x1c
c0019279:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001927d:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019281:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019285:	89 04 24             	mov    DWORD PTR [esp],eax
c0019288:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001928c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019290:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019295:	8b 04 85 20 3a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc5e0]
c001929c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00192a0:	83 ec 0c             	sub    esp,0xc
c00192a3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00192a7:	52                   	push   edx
c00192a8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00192ac:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00192b0:	50                   	push   eax
c00192b1:	e8 8e bb ff ff       	call   c0014e44 <LogicalDisk::read(unsigned long long, int, void*)>
c00192b6:	83 c4 20             	add    esp,0x20
c00192b9:	83 c4 1c             	add    esp,0x1c
c00192bc:	c3                   	ret    

c00192bd <fatWrapperWriteDisk>:
c00192bd:	83 ec 1c             	sub    esp,0x1c
c00192c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00192c4:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00192c8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00192cc:	89 04 24             	mov    DWORD PTR [esp],eax
c00192cf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00192d3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00192d7:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00192dc:	8b 04 85 20 3a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc5e0]
c00192e3:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00192e7:	83 ec 0c             	sub    esp,0xc
c00192ea:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00192ee:	52                   	push   edx
c00192ef:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00192f3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00192f7:	50                   	push   eax
c00192f8:	e8 b3 bb ff ff       	call   c0014eb0 <LogicalDisk::write(unsigned long long, int, void*)>
c00192fd:	83 c4 20             	add    esp,0x20
c0019300:	83 c4 1c             	add    esp,0x1c
c0019303:	c3                   	ret    

c0019304 <fatWrapperIoctl>:
c0019304:	53                   	push   ebx
c0019305:	83 ec 28             	sub    esp,0x28
c0019308:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001930c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019310:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0019314:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0019318:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c001931d:	75 31                	jne    c0019350 <fatWrapperIoctl+0x4c>
c001931f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019323:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019327:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001932c:	8b 04 85 20 3a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc5e0]
c0019333:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019339:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001933f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019343:	66 89 02             	mov    WORD PTR [edx],ax
c0019346:	b8 00 00 00 00       	mov    eax,0x0
c001934b:	e9 b2 00 00 00       	jmp    c0019402 <fatWrapperIoctl+0xfe>
c0019350:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0019355:	75 6a                	jne    c00193c1 <fatWrapperIoctl+0xbd>
c0019357:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001935b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001935f:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019364:	8b 04 85 20 3a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc5e0]
c001936b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019371:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0019377:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001937d:	89 c8                	mov    eax,ecx
c001937f:	89 da                	mov    edx,ebx
c0019381:	0f a4 c2 0a          	shld   edx,eax,0xa
c0019385:	c1 e0 0a             	shl    eax,0xa
c0019388:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001938d:	8b 0c 8d 20 3a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdc5e0]
c0019394:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001939a:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c00193a0:	89 cb                	mov    ebx,ecx
c00193a2:	c1 fb 1f             	sar    ebx,0x1f
c00193a5:	53                   	push   ebx
c00193a6:	51                   	push   ecx
c00193a7:	52                   	push   edx
c00193a8:	50                   	push   eax
c00193a9:	e8 6e 4f 00 00       	call   c001e31c <__udivdi3>
c00193ae:	83 c4 10             	add    esp,0x10
c00193b1:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00193b5:	89 01                	mov    DWORD PTR [ecx],eax
c00193b7:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00193ba:	b8 00 00 00 00       	mov    eax,0x0
c00193bf:	eb 41                	jmp    c0019402 <fatWrapperIoctl+0xfe>
c00193c1:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00193c6:	75 07                	jne    c00193cf <fatWrapperIoctl+0xcb>
c00193c8:	b8 00 00 00 00       	mov    eax,0x0
c00193cd:	eb 33                	jmp    c0019402 <fatWrapperIoctl+0xfe>
c00193cf:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c00193d4:	75 19                	jne    c00193ef <fatWrapperIoctl+0xeb>
c00193d6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00193da:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00193de:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00193e2:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c00193e8:	b8 00 00 00 00       	mov    eax,0x0
c00193ed:	eb 13                	jmp    c0019402 <fatWrapperIoctl+0xfe>
c00193ef:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c00193f4:	75 07                	jne    c00193fd <fatWrapperIoctl+0xf9>
c00193f6:	b8 00 00 00 00       	mov    eax,0x0
c00193fb:	eb 05                	jmp    c0019402 <fatWrapperIoctl+0xfe>
c00193fd:	b8 04 00 00 00       	mov    eax,0x4
c0019402:	83 c4 28             	add    esp,0x28
c0019405:	5b                   	pop    ebx
c0019406:	c3                   	ret    
c0019407:	90                   	nop

c0019408 <FAT::FAT()>:
c0019408:	83 ec 1c             	sub    esp,0x1c
c001940b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001940f:	83 ec 0c             	sub    esp,0xc
c0019412:	50                   	push   eax
c0019413:	e8 64 8e ff ff       	call   c001227c <Filesystem::Filesystem()>
c0019418:	83 c4 10             	add    esp,0x10
c001941b:	ba d4 1b 02 c0       	mov    edx,0xc0021bd4
c0019420:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019424:	89 10                	mov    DWORD PTR [eax],edx
c0019426:	c7 05 80 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023e80,0x0
c0019430:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0019438:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001943d:	7f 15                	jg     c0019454 <FAT::FAT()+0x4c>
c001943f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019443:	c7 04 85 a0 3e 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffdc160],0xffffffff
c001944e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0019452:	eb e4                	jmp    c0019438 <FAT::FAT()+0x30>
c0019454:	90                   	nop
c0019455:	83 c4 1c             	add    esp,0x1c
c0019458:	c3                   	ret    
c0019459:	90                   	nop

c001945a <FAT::fixFilepath(char*)>:
c001945a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001945e:	8a 00                	mov    al,BYTE PTR [eax]
c0019460:	3c 40                	cmp    al,0x40
c0019462:	7e 2c                	jle    c0019490 <FAT::fixFilepath(char*)+0x36>
c0019464:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019468:	8a 00                	mov    al,BYTE PTR [eax]
c001946a:	83 e8 41             	sub    eax,0x41
c001946d:	88 c2                	mov    dl,al
c001946f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019473:	88 10                	mov    BYTE PTR [eax],dl
c0019475:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019479:	8a 00                	mov    al,BYTE PTR [eax]
c001947b:	0f be c0             	movsx  eax,al
c001947e:	8b 04 85 a0 3e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc160]
c0019485:	83 c0 30             	add    eax,0x30
c0019488:	88 c2                	mov    dl,al
c001948a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001948e:	88 10                	mov    BYTE PTR [eax],dl
c0019490:	90                   	nop
c0019491:	c3                   	ret    

c0019492 <FAT::open(char const*, void**, FileOpenMode)>:
c0019492:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019498:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00194a0:	74 0a                	je     c00194ac <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c00194a2:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00194aa:	75 0a                	jne    c00194b6 <FAT::open(char const*, void**, FileOpenMode)+0x24>
c00194ac:	b8 04 00 00 00       	mov    eax,0x4
c00194b1:	e9 fd 00 00 00       	jmp    c00195b3 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c00194b6:	83 ec 08             	sub    esp,0x8
c00194b9:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00194c0:	8d 44 24 14          	lea    eax,[esp+0x14]
c00194c4:	50                   	push   eax
c00194c5:	e8 dd 71 fe ff       	call   c00006a7 <strcpy>
c00194ca:	83 c4 10             	add    esp,0x10
c00194cd:	83 ec 08             	sub    esp,0x8
c00194d0:	8d 44 24 10          	lea    eax,[esp+0x10]
c00194d4:	50                   	push   eax
c00194d5:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00194dc:	e8 79 ff ff ff       	call   c001945a <FAT::fixFilepath(char*)>
c00194e1:	83 c4 10             	add    esp,0x10
c00194e4:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c00194ec:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00194f3:	83 e0 01             	and    eax,0x1
c00194f6:	74 08                	je     c0019500 <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c00194f8:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c0019500:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019507:	83 e0 04             	and    eax,0x4
c001950a:	74 10                	je     c001951c <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c001950c:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c0019514:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001951c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019523:	83 e0 02             	and    eax,0x2
c0019526:	74 08                	je     c0019530 <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c0019528:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0019530:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019537:	83 e0 08             	and    eax,0x8
c001953a:	74 08                	je     c0019544 <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c001953c:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c0019544:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001954b:	83 e0 10             	and    eax,0x10
c001954e:	74 08                	je     c0019558 <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c0019550:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c0019558:	83 ec 0c             	sub    esp,0xc
c001955b:	68 50 02 00 00       	push   0x250
c0019560:	e8 5e 3b ff ff       	call   c000d0c3 <malloc>
c0019565:	83 c4 10             	add    esp,0x10
c0019568:	89 c2                	mov    edx,eax
c001956a:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019571:	89 10                	mov    DWORD PTR [eax],edx
c0019573:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c001957b:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019582:	8b 00                	mov    eax,DWORD PTR [eax]
c0019584:	83 ec 04             	sub    esp,0x4
c0019587:	52                   	push   edx
c0019588:	8d 54 24 10          	lea    edx,[esp+0x10]
c001958c:	52                   	push   edx
c001958d:	50                   	push   eax
c001958e:	e8 2b b7 fe ff       	call   c0004cbe <f_open>
c0019593:	83 c4 10             	add    esp,0x10
c0019596:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001959d:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c00195a5:	74 07                	je     c00195ae <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c00195a7:	b8 01 00 00 00       	mov    eax,0x1
c00195ac:	eb 05                	jmp    c00195b3 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c00195ae:	b8 00 00 00 00       	mov    eax,0x0
c00195b3:	81 c4 1c 01 00 00    	add    esp,0x11c
c00195b9:	c3                   	ret    

c00195ba <FAT::openDir(char const*, void**)>:
c00195ba:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00195c0:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00195c8:	74 0a                	je     c00195d4 <FAT::openDir(char const*, void**)+0x1a>
c00195ca:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00195d2:	75 07                	jne    c00195db <FAT::openDir(char const*, void**)+0x21>
c00195d4:	b8 04 00 00 00       	mov    eax,0x4
c00195d9:	eb 7d                	jmp    c0019658 <FAT::openDir(char const*, void**)+0x9e>
c00195db:	83 ec 08             	sub    esp,0x8
c00195de:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00195e5:	8d 44 24 18          	lea    eax,[esp+0x18]
c00195e9:	50                   	push   eax
c00195ea:	e8 b8 70 fe ff       	call   c00006a7 <strcpy>
c00195ef:	83 c4 10             	add    esp,0x10
c00195f2:	83 ec 08             	sub    esp,0x8
c00195f5:	8d 44 24 14          	lea    eax,[esp+0x14]
c00195f9:	50                   	push   eax
c00195fa:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019601:	e8 54 fe ff ff       	call   c001945a <FAT::fixFilepath(char*)>
c0019606:	83 c4 10             	add    esp,0x10
c0019609:	83 ec 0c             	sub    esp,0xc
c001960c:	6a 4c                	push   0x4c
c001960e:	e8 b0 3a ff ff       	call   c000d0c3 <malloc>
c0019613:	83 c4 10             	add    esp,0x10
c0019616:	89 c2                	mov    edx,eax
c0019618:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001961f:	89 10                	mov    DWORD PTR [eax],edx
c0019621:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019628:	8b 00                	mov    eax,DWORD PTR [eax]
c001962a:	83 ec 08             	sub    esp,0x8
c001962d:	8d 54 24 14          	lea    edx,[esp+0x14]
c0019631:	52                   	push   edx
c0019632:	50                   	push   eax
c0019633:	e8 be c6 fe ff       	call   c0005cf6 <f_opendir>
c0019638:	83 c4 10             	add    esp,0x10
c001963b:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019642:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001964a:	74 07                	je     c0019653 <FAT::openDir(char const*, void**)+0x99>
c001964c:	b8 01 00 00 00       	mov    eax,0x1
c0019651:	eb 05                	jmp    c0019658 <FAT::openDir(char const*, void**)+0x9e>
c0019653:	b8 00 00 00 00       	mov    eax,0x0
c0019658:	81 c4 1c 01 00 00    	add    esp,0x11c
c001965e:	c3                   	ret    
c001965f:	90                   	nop

c0019660 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0019660:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0019666:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001966e:	75 0a                	jne    c001967a <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c0019670:	b8 04 00 00 00       	mov    eax,0x4
c0019675:	e9 c9 00 00 00       	jmp    c0019743 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c001967a:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0019682:	75 0a                	jne    c001968e <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c0019684:	b8 04 00 00 00       	mov    eax,0x4
c0019689:	e9 b5 00 00 00       	jmp    c0019743 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c001968e:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0019696:	75 0a                	jne    c00196a2 <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c0019698:	b8 04 00 00 00       	mov    eax,0x4
c001969d:	e9 a1 00 00 00       	jmp    c0019743 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00196a2:	83 ec 08             	sub    esp,0x8
c00196a5:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00196ac:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00196b3:	50                   	push   eax
c00196b4:	e8 ee 6f fe ff       	call   c00006a7 <strcpy>
c00196b9:	83 c4 10             	add    esp,0x10
c00196bc:	83 ec 08             	sub    esp,0x8
c00196bf:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c00196c6:	50                   	push   eax
c00196c7:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00196ce:	e8 87 fd ff ff       	call   c001945a <FAT::fixFilepath(char*)>
c00196d3:	83 c4 10             	add    esp,0x10
c00196d6:	83 ec 08             	sub    esp,0x8
c00196d9:	8d 44 24 08          	lea    eax,[esp+0x8]
c00196dd:	50                   	push   eax
c00196de:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00196e5:	50                   	push   eax
c00196e6:	e8 ca c7 fe ff       	call   c0005eb5 <f_stat>
c00196eb:	83 c4 10             	add    esp,0x10
c00196ee:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c00196f5:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c00196fc:	85 c0                	test   eax,eax
c00196fe:	74 07                	je     c0019707 <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c0019700:	83 f8 04             	cmp    eax,0x4
c0019703:	74 32                	je     c0019737 <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c0019705:	eb 37                	jmp    c001973e <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c0019707:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001970b:	0f b6 c0             	movzx  eax,al
c001970e:	83 e0 10             	and    eax,0x10
c0019711:	0f 95 c2             	setne  dl
c0019714:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001971b:	88 10                	mov    BYTE PTR [eax],dl
c001971d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0019720:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019724:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001972b:	89 01                	mov    DWORD PTR [ecx],eax
c001972d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019730:	b8 00 00 00 00       	mov    eax,0x0
c0019735:	eb 0c                	jmp    c0019743 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0019737:	b8 02 00 00 00       	mov    eax,0x2
c001973c:	eb 05                	jmp    c0019743 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c001973e:	b8 01 00 00 00       	mov    eax,0x1
c0019743:	81 c4 2c 02 00 00    	add    esp,0x22c
c0019749:	c3                   	ret    

c001974a <FAT::unlink(char const*)>:
c001974a:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019750:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019758:	75 07                	jne    c0019761 <FAT::unlink(char const*)+0x17>
c001975a:	b8 04 00 00 00       	mov    eax,0x4
c001975f:	eb 5c                	jmp    c00197bd <FAT::unlink(char const*)+0x73>
c0019761:	83 ec 08             	sub    esp,0x8
c0019764:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001976b:	8d 44 24 18          	lea    eax,[esp+0x18]
c001976f:	50                   	push   eax
c0019770:	e8 32 6f fe ff       	call   c00006a7 <strcpy>
c0019775:	83 c4 10             	add    esp,0x10
c0019778:	83 ec 08             	sub    esp,0x8
c001977b:	8d 44 24 14          	lea    eax,[esp+0x14]
c001977f:	50                   	push   eax
c0019780:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019787:	e8 ce fc ff ff       	call   c001945a <FAT::fixFilepath(char*)>
c001978c:	83 c4 10             	add    esp,0x10
c001978f:	83 ec 0c             	sub    esp,0xc
c0019792:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019796:	50                   	push   eax
c0019797:	e8 6b ca fe ff       	call   c0006207 <f_unlink>
c001979c:	83 c4 10             	add    esp,0x10
c001979f:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00197a6:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c00197ad:	85 c0                	test   eax,eax
c00197af:	75 07                	jne    c00197b8 <FAT::unlink(char const*)+0x6e>
c00197b1:	b8 00 00 00 00       	mov    eax,0x0
c00197b6:	eb 05                	jmp    c00197bd <FAT::unlink(char const*)+0x73>
c00197b8:	b8 01 00 00 00       	mov    eax,0x1
c00197bd:	81 c4 1c 01 00 00    	add    esp,0x11c
c00197c3:	c3                   	ret    

c00197c4 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c00197c4:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00197ca:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c00197d1:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c00197d8:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c00197dc:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00197e0:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c00197e8:	75 0a                	jne    c00197f4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c00197ea:	b8 04 00 00 00       	mov    eax,0x4
c00197ef:	e9 1c 01 00 00       	jmp    c0019910 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c00197f4:	83 ec 08             	sub    esp,0x8
c00197f7:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00197fe:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019802:	50                   	push   eax
c0019803:	e8 9f 6e fe ff       	call   c00006a7 <strcpy>
c0019808:	83 c4 10             	add    esp,0x10
c001980b:	83 ec 08             	sub    esp,0x8
c001980e:	8d 44 24 20          	lea    eax,[esp+0x20]
c0019812:	50                   	push   eax
c0019813:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001981a:	e8 3b fc ff ff       	call   c001945a <FAT::fixFilepath(char*)>
c001981f:	83 c4 10             	add    esp,0x10
c0019822:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001982a:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0019832:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019837:	83 e0 01             	and    eax,0x1
c001983a:	74 08                	je     c0019844 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c001983c:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c0019844:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019849:	83 e0 02             	and    eax,0x2
c001984c:	74 08                	je     c0019856 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c001984e:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c0019856:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001985b:	83 e0 04             	and    eax,0x4
c001985e:	74 08                	je     c0019868 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c0019860:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c0019868:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001986d:	83 e0 08             	and    eax,0x8
c0019870:	74 08                	je     c001987a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c0019872:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c001987a:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001987f:	83 e0 01             	and    eax,0x1
c0019882:	74 08                	je     c001988c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c0019884:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c001988c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019891:	83 e0 02             	and    eax,0x2
c0019894:	74 08                	je     c001989e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c0019896:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c001989e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00198a3:	83 e0 04             	and    eax,0x4
c00198a6:	74 08                	je     c00198b0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c00198a8:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c00198b0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00198b5:	83 e0 08             	and    eax,0x8
c00198b8:	74 08                	je     c00198c2 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c00198ba:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c00198c2:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c00198c9:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c00198d0:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c00198d8:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c00198e0:	83 ec 04             	sub    esp,0x4
c00198e3:	52                   	push   edx
c00198e4:	50                   	push   eax
c00198e5:	8d 44 24 24          	lea    eax,[esp+0x24]
c00198e9:	50                   	push   eax
c00198ea:	e8 ba cf fe ff       	call   c00068a9 <f_chmod>
c00198ef:	83 c4 10             	add    esp,0x10
c00198f2:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c00198f9:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0019900:	85 c0                	test   eax,eax
c0019902:	75 07                	jne    c001990b <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c0019904:	b8 00 00 00 00       	mov    eax,0x0
c0019909:	eb 05                	jmp    c0019910 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c001990b:	b8 01 00 00 00       	mov    eax,0x1
c0019910:	81 c4 2c 01 00 00    	add    esp,0x12c
c0019916:	c3                   	ret    
c0019917:	90                   	nop

c0019918 <FAT::rename(char const*, char const*)>:
c0019918:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001991e:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0019926:	74 0a                	je     c0019932 <FAT::rename(char const*, char const*)+0x1a>
c0019928:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0019930:	75 0a                	jne    c001993c <FAT::rename(char const*, char const*)+0x24>
c0019932:	b8 04 00 00 00       	mov    eax,0x4
c0019937:	e9 98 00 00 00       	jmp    c00199d4 <FAT::rename(char const*, char const*)+0xbc>
c001993c:	83 ec 08             	sub    esp,0x8
c001993f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019946:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001994d:	50                   	push   eax
c001994e:	e8 54 6d fe ff       	call   c00006a7 <strcpy>
c0019953:	83 c4 10             	add    esp,0x10
c0019956:	83 ec 08             	sub    esp,0x8
c0019959:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0019960:	50                   	push   eax
c0019961:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019968:	e8 ed fa ff ff       	call   c001945a <FAT::fixFilepath(char*)>
c001996d:	83 c4 10             	add    esp,0x10
c0019970:	83 ec 08             	sub    esp,0x8
c0019973:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001997a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001997e:	50                   	push   eax
c001997f:	e8 23 6d fe ff       	call   c00006a7 <strcpy>
c0019984:	83 c4 10             	add    esp,0x10
c0019987:	83 ec 08             	sub    esp,0x8
c001998a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001998e:	50                   	push   eax
c001998f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019996:	e8 bf fa ff ff       	call   c001945a <FAT::fixFilepath(char*)>
c001999b:	83 c4 10             	add    esp,0x10
c001999e:	83 ec 08             	sub    esp,0x8
c00199a1:	8d 44 24 14          	lea    eax,[esp+0x14]
c00199a5:	50                   	push   eax
c00199a6:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00199ad:	50                   	push   eax
c00199ae:	e8 03 cc fe ff       	call   c00065b6 <f_rename>
c00199b3:	83 c4 10             	add    esp,0x10
c00199b6:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c00199bd:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c00199c4:	85 c0                	test   eax,eax
c00199c6:	75 07                	jne    c00199cf <FAT::rename(char const*, char const*)+0xb7>
c00199c8:	b8 00 00 00 00       	mov    eax,0x0
c00199cd:	eb 05                	jmp    c00199d4 <FAT::rename(char const*, char const*)+0xbc>
c00199cf:	b8 01 00 00 00       	mov    eax,0x1
c00199d4:	81 c4 1c 02 00 00    	add    esp,0x21c
c00199da:	c3                   	ret    
c00199db:	90                   	nop

c00199dc <FAT::mkdir(char const*)>:
c00199dc:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00199e2:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00199ea:	75 07                	jne    c00199f3 <FAT::mkdir(char const*)+0x17>
c00199ec:	b8 04 00 00 00       	mov    eax,0x4
c00199f1:	eb 5c                	jmp    c0019a4f <FAT::mkdir(char const*)+0x73>
c00199f3:	83 ec 08             	sub    esp,0x8
c00199f6:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00199fd:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019a01:	50                   	push   eax
c0019a02:	e8 a0 6c fe ff       	call   c00006a7 <strcpy>
c0019a07:	83 c4 10             	add    esp,0x10
c0019a0a:	83 ec 08             	sub    esp,0x8
c0019a0d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019a11:	50                   	push   eax
c0019a12:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019a19:	e8 3c fa ff ff       	call   c001945a <FAT::fixFilepath(char*)>
c0019a1e:	83 c4 10             	add    esp,0x10
c0019a21:	83 ec 0c             	sub    esp,0xc
c0019a24:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019a28:	50                   	push   eax
c0019a29:	e8 5c c9 fe ff       	call   c000638a <f_mkdir>
c0019a2e:	83 c4 10             	add    esp,0x10
c0019a31:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019a38:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0019a3f:	85 c0                	test   eax,eax
c0019a41:	75 07                	jne    c0019a4a <FAT::mkdir(char const*)+0x6e>
c0019a43:	b8 00 00 00 00       	mov    eax,0x0
c0019a48:	eb 05                	jmp    c0019a4f <FAT::mkdir(char const*)+0x73>
c0019a4a:	b8 01 00 00 00       	mov    eax,0x1
c0019a4f:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019a55:	c3                   	ret    

c0019a56 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0019a56:	b8 08 00 00 00       	mov    eax,0x8
c0019a5b:	c3                   	ret    

c0019a5c <ISO9660::seek(void*, unsigned long long)>:
c0019a5c:	53                   	push   ebx
c0019a5d:	b8 04 00 00 00       	mov    eax,0x4
c0019a62:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019a66:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019a6a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0019a6e:	85 d2                	test   edx,edx
c0019a70:	74 17                	je     c0019a89 <ISO9660::seek(void*, unsigned long long)+0x2d>
c0019a72:	89 c8                	mov    eax,ecx
c0019a74:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c0019a77:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c0019a7a:	b8 01 00 00 00       	mov    eax,0x1
c0019a7f:	73 08                	jae    c0019a89 <ISO9660::seek(void*, unsigned long long)+0x2d>
c0019a81:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c0019a84:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c0019a87:	31 c0                	xor    eax,eax
c0019a89:	5b                   	pop    ebx
c0019a8a:	c3                   	ret    
c0019a8b:	90                   	nop

c0019a8c <ISO9660::tell(void*, unsigned long long*)>:
c0019a8c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019a90:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019a94:	85 d2                	test   edx,edx
c0019a96:	74 12                	je     c0019aaa <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0019a98:	85 c0                	test   eax,eax
c0019a9a:	74 0e                	je     c0019aaa <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0019a9c:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0019a9f:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c0019aa2:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0019aa5:	89 10                	mov    DWORD PTR [eax],edx
c0019aa7:	31 c0                	xor    eax,eax
c0019aa9:	c3                   	ret    
c0019aaa:	b8 04 00 00 00       	mov    eax,0x4
c0019aaf:	c3                   	ret    

c0019ab0 <ISO9660::getName()>:
c0019ab0:	b8 30 1c 02 c0       	mov    eax,0xc0021c30
c0019ab5:	c3                   	ret    

c0019ab6 <ISO9660::stat(void*, unsigned long long*)>:
c0019ab6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019aba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019abe:	85 d2                	test   edx,edx
c0019ac0:	74 12                	je     c0019ad4 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0019ac2:	85 c0                	test   eax,eax
c0019ac4:	74 0e                	je     c0019ad4 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0019ac6:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0019ac9:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0019acc:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0019acf:	89 10                	mov    DWORD PTR [eax],edx
c0019ad1:	31 c0                	xor    eax,eax
c0019ad3:	c3                   	ret    
c0019ad4:	b8 04 00 00 00       	mov    eax,0x4
c0019ad9:	c3                   	ret    

c0019ada <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0019ada:	b8 01 00 00 00       	mov    eax,0x1
c0019adf:	c3                   	ret    

c0019ae0 <ISO9660::unlink(char const*)>:
c0019ae0:	b8 01 00 00 00       	mov    eax,0x1
c0019ae5:	c3                   	ret    

c0019ae6 <ISO9660::write(void*, unsigned long, void*, int*)>:
c0019ae6:	b8 01 00 00 00       	mov    eax,0x1
c0019aeb:	c3                   	ret    

c0019aec <ISO9660::rename(char const*, char const*)>:
c0019aec:	b8 01 00 00 00       	mov    eax,0x1
c0019af1:	c3                   	ret    

c0019af2 <ISO9660::mkdir(char const*)>:
c0019af2:	b8 01 00 00 00       	mov    eax,0x1
c0019af7:	c3                   	ret    

c0019af8 <ISO9660::close(void*)>:
c0019af8:	83 ec 0c             	sub    esp,0xc
c0019afb:	b8 04 00 00 00       	mov    eax,0x4
c0019b00:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019b04:	85 d2                	test   edx,edx
c0019b06:	74 0e                	je     c0019b16 <ISO9660::close(void*)+0x1e>
c0019b08:	83 ec 0c             	sub    esp,0xc
c0019b0b:	52                   	push   edx
c0019b0c:	e8 c2 35 ff ff       	call   c000d0d3 <free>
c0019b11:	83 c4 10             	add    esp,0x10
c0019b14:	31 c0                	xor    eax,eax
c0019b16:	83 c4 0c             	add    esp,0xc
c0019b19:	c3                   	ret    

c0019b1a <ISO9660::closeDir(void*)>:
c0019b1a:	83 ec 0c             	sub    esp,0xc
c0019b1d:	b8 04 00 00 00       	mov    eax,0x4
c0019b22:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019b26:	85 d2                	test   edx,edx
c0019b28:	74 0e                	je     c0019b38 <ISO9660::closeDir(void*)+0x1e>
c0019b2a:	83 ec 0c             	sub    esp,0xc
c0019b2d:	52                   	push   edx
c0019b2e:	e8 a0 35 ff ff       	call   c000d0d3 <free>
c0019b33:	83 c4 10             	add    esp,0x10
c0019b36:	31 c0                	xor    eax,eax
c0019b38:	83 c4 0c             	add    esp,0xc
c0019b3b:	c3                   	ret    

c0019b3c <ISO9660::~ISO9660()>:
c0019b3c:	83 ec 0c             	sub    esp,0xc
c0019b3f:	ba 84 1c 02 c0       	mov    edx,0xc0021c84
c0019b44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019b48:	89 10                	mov    DWORD PTR [eax],edx
c0019b4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019b4e:	83 ec 0c             	sub    esp,0xc
c0019b51:	50                   	push   eax
c0019b52:	e8 49 87 ff ff       	call   c00122a0 <Filesystem::~Filesystem()>
c0019b57:	83 c4 10             	add    esp,0x10
c0019b5a:	90                   	nop
c0019b5b:	83 c4 0c             	add    esp,0xc
c0019b5e:	c3                   	ret    
c0019b5f:	90                   	nop

c0019b60 <ISO9660::~ISO9660()>:
c0019b60:	83 ec 0c             	sub    esp,0xc
c0019b63:	83 ec 0c             	sub    esp,0xc
c0019b66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019b6a:	e8 cd ff ff ff       	call   c0019b3c <ISO9660::~ISO9660()>
c0019b6f:	83 c4 10             	add    esp,0x10
c0019b72:	83 ec 08             	sub    esp,0x8
c0019b75:	6a 08                	push   0x8
c0019b77:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019b7b:	e8 07 85 ff ff       	call   c0012087 <operator delete(void*, unsigned long)>
c0019b80:	83 c4 10             	add    esp,0x10
c0019b83:	83 c4 0c             	add    esp,0xc
c0019b86:	c3                   	ret    

c0019b87 <__memmem(unsigned char*, int, unsigned char*, int)>:
c0019b87:	55                   	push   ebp
c0019b88:	31 c9                	xor    ecx,ecx
c0019b8a:	57                   	push   edi
c0019b8b:	56                   	push   esi
c0019b8c:	53                   	push   ebx
c0019b8d:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0019b91:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0019b95:	89 eb                	mov    ebx,ebp
c0019b97:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c0019b9b:	39 ce                	cmp    esi,ecx
c0019b9d:	7e 17                	jle    c0019bb6 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c0019b9f:	31 d2                	xor    edx,edx
c0019ba1:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c0019ba5:	7d 13                	jge    c0019bba <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c0019ba7:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0019bab:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0019bae:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c0019bb1:	75 0d                	jne    c0019bc0 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c0019bb3:	42                   	inc    edx
c0019bb4:	eb eb                	jmp    c0019ba1 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c0019bb6:	31 c0                	xor    eax,eax
c0019bb8:	eb 0a                	jmp    c0019bc4 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0019bba:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0019bbe:	eb 04                	jmp    c0019bc4 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0019bc0:	41                   	inc    ecx
c0019bc1:	43                   	inc    ebx
c0019bc2:	eb d7                	jmp    c0019b9b <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c0019bc4:	5b                   	pop    ebx
c0019bc5:	5e                   	pop    esi
c0019bc6:	5f                   	pop    edi
c0019bc7:	5d                   	pop    ebp
c0019bc8:	c3                   	ret    

c0019bc9 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0019bc9:	56                   	push   esi
c0019bca:	53                   	push   ebx
c0019bcb:	52                   	push   edx
c0019bcc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0019bd0:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019bd4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019bd8:	39 0d 80 3f 02 c0    	cmp    DWORD PTR ds:0xc0023f80,ecx
c0019bde:	75 08                	jne    c0019be8 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c0019be0:	38 05 e4 2a 02 c0    	cmp    BYTE PTR ds:0xc0022ae4,al
c0019be6:	74 2b                	je     c0019c13 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x4a>
c0019be8:	83 ec 0c             	sub    esp,0xc
c0019beb:	a2 e4 2a 02 c0       	mov    ds:0xc0022ae4,al
c0019bf0:	68 a0 3f 02 c0       	push   0xc0023fa0
c0019bf5:	0f be c0             	movsx  eax,al
c0019bf8:	6a 01                	push   0x1
c0019bfa:	89 0d 80 3f 02 c0    	mov    DWORD PTR ds:0xc0023f80,ecx
c0019c00:	31 db                	xor    ebx,ebx
c0019c02:	53                   	push   ebx
c0019c03:	51                   	push   ecx
c0019c04:	ff 34 85 1c 39 02 c0 	push   DWORD PTR [eax*4-0x3ffdc6e4]
c0019c0b:	e8 34 b2 ff ff       	call   c0014e44 <LogicalDisk::read(unsigned long long, int, void*)>
c0019c10:	83 c4 20             	add    esp,0x20
c0019c13:	c7 44 24 18 00 08 00 00 	mov    DWORD PTR [esp+0x18],0x800
c0019c1b:	c7 44 24 14 a0 3f 02 c0 	mov    DWORD PTR [esp+0x14],0xc0023fa0
c0019c23:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0019c27:	58                   	pop    eax
c0019c28:	5b                   	pop    ebx
c0019c29:	5e                   	pop    esi
c0019c2a:	e9 a3 69 fe ff       	jmp    c00005d2 <memcpy>
c0019c2f:	90                   	nop

c0019c30 <ISO9660::tryMount(LogicalDisk*, int)>:
c0019c30:	81 ec 10 08 00 00    	sub    esp,0x810
c0019c36:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c0019c3d:	83 c0 41             	add    eax,0x41
c0019c40:	0f be c0             	movsx  eax,al
c0019c43:	50                   	push   eax
c0019c44:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019c48:	50                   	push   eax
c0019c49:	6a 10                	push   0x10
c0019c4b:	e8 79 ff ff ff       	call   c0019bc9 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0019c50:	83 c4 10             	add    esp,0x10
c0019c53:	31 c0                	xor    eax,eax
c0019c55:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0019c5a:	75 1d                	jne    c0019c79 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0019c5c:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0019c61:	75 16                	jne    c0019c79 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0019c63:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0019c68:	75 0f                	jne    c0019c79 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0019c6a:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0019c6f:	75 08                	jne    c0019c79 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0019c71:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0019c76:	0f 94 c0             	sete   al
c0019c79:	81 c4 0c 08 00 00    	add    esp,0x80c
c0019c7f:	c3                   	ret    

c0019c80 <ISO9660::read(void*, unsigned long, void*, int*)>:
c0019c80:	55                   	push   ebp
c0019c81:	57                   	push   edi
c0019c82:	56                   	push   esi
c0019c83:	53                   	push   ebx
c0019c84:	81 ec 34 08 00 00    	sub    esp,0x834
c0019c8a:	8b ac 24 50 08 00 00 	mov    ebp,DWORD PTR [esp+0x850]
c0019c91:	55                   	push   ebp
c0019c92:	68 4b 1c 02 c0       	push   0xc0021c4b
c0019c97:	e8 2c 2e ff ff       	call   c000cac8 <kprintf(char const*, ...)>
c0019c9c:	83 c4 10             	add    esp,0x10
c0019c9f:	83 bc 24 44 08 00 00 00 	cmp    DWORD PTR [esp+0x844],0x0
c0019ca7:	0f 84 06 02 00 00    	je     c0019eb3 <ISO9660::read(void*, unsigned long, void*, int*)+0x233>
c0019cad:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c0019cb5:	0f 84 f8 01 00 00    	je     c0019eb3 <ISO9660::read(void*, unsigned long, void*, int*)+0x233>
c0019cbb:	8b bc 24 44 08 00 00 	mov    edi,DWORD PTR [esp+0x844]
c0019cc2:	b8 01 00 00 00       	mov    eax,0x1
c0019cc7:	80 7f 18 00          	cmp    BYTE PTR [edi+0x18],0x0
c0019ccb:	0f 85 e7 01 00 00    	jne    c0019eb8 <ISO9660::read(void*, unsigned long, void*, int*)+0x238>
c0019cd1:	8b 77 10             	mov    esi,DWORD PTR [edi+0x10]
c0019cd4:	31 d2                	xor    edx,edx
c0019cd6:	8b 7f 14             	mov    edi,DWORD PTR [edi+0x14]
c0019cd9:	89 e9                	mov    ecx,ebp
c0019cdb:	89 d3                	mov    ebx,edx
c0019cdd:	01 f1                	add    ecx,esi
c0019cdf:	11 fb                	adc    ebx,edi
c0019ce1:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0019ce5:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0019ce9:	8b 9c 24 44 08 00 00 	mov    ebx,DWORD PTR [esp+0x844]
c0019cf0:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0019cf3:	8b 5b 0c             	mov    ebx,DWORD PTR [ebx+0xc]
c0019cf6:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0019cfa:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0019cfe:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0019d02:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0019d06:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c0019d0a:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c0019d0e:	72 19                	jb     c0019d29 <ISO9660::read(void*, unsigned long, void*, int*)+0xa9>
c0019d10:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0019d14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019d18:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019d1c:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0019d1f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019d23:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0019d27:	eb 13                	jmp    c0019d3c <ISO9660::read(void*, unsigned long, void*, int*)+0xbc>
c0019d29:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019d2d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019d31:	29 f0                	sub    eax,esi
c0019d33:	19 fa                	sbb    edx,edi
c0019d35:	89 04 24             	mov    DWORD PTR [esp],eax
c0019d38:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0019d3c:	8b 84 24 44 08 00 00 	mov    eax,DWORD PTR [esp+0x844]
c0019d43:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0019d46:	8b 00                	mov    eax,DWORD PTR [eax]
c0019d48:	53                   	push   ebx
c0019d49:	0f a4 c2 0b          	shld   edx,eax,0xb
c0019d4d:	c1 e0 0b             	shl    eax,0xb
c0019d50:	01 c6                	add    esi,eax
c0019d52:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c0019d59:	11 d7                	adc    edi,edx
c0019d5b:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c0019d5f:	89 fa                	mov    edx,edi
c0019d61:	50                   	push   eax
c0019d62:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019d66:	50                   	push   eax
c0019d67:	89 f0                	mov    eax,esi
c0019d69:	0f ac d0 0b          	shrd   eax,edx,0xb
c0019d6d:	50                   	push   eax
c0019d6e:	e8 56 fe ff ff       	call   c0019bc9 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0019d73:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c0019d7a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0019d7e:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0019d81:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0019d85:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0019d8b:	83 c4 10             	add    esp,0x10
c0019d8e:	b8 00 08 00 00       	mov    eax,0x800
c0019d93:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0019d97:	29 d0                	sub    eax,edx
c0019d99:	39 c1                	cmp    ecx,eax
c0019d9b:	83 db 00             	sbb    ebx,0x0
c0019d9e:	7d 19                	jge    c0019db9 <ISO9660::read(void*, unsigned long, void*, int*)+0x139>
c0019da0:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0019da5:	75 16                	jne    c0019dbd <ISO9660::read(void*, unsigned long, void*, int*)+0x13d>
c0019da7:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0019dae:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0019db4:	e9 f6 00 00 00       	jmp    c0019eaf <ISO9660::read(void*, unsigned long, void*, int*)+0x22f>
c0019db9:	89 c5                	mov    ebp,eax
c0019dbb:	eb 03                	jmp    c0019dc0 <ISO9660::read(void*, unsigned long, void*, int*)+0x140>
c0019dbd:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c0019dc0:	51                   	push   ecx
c0019dc1:	55                   	push   ebp
c0019dc2:	8d 44 14 28          	lea    eax,[esp+edx*1+0x28]
c0019dc6:	50                   	push   eax
c0019dc7:	ff b4 24 58 08 00 00 	push   DWORD PTR [esp+0x858]
c0019dce:	e8 ff 67 fe ff       	call   c00005d2 <memcpy>
c0019dd3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0019dd7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019ddb:	8b 84 24 5c 08 00 00 	mov    eax,DWORD PTR [esp+0x85c]
c0019de2:	01 e8                	add    eax,ebp
c0019de4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0019de8:	89 e8                	mov    eax,ebp
c0019dea:	99                   	cdq    
c0019deb:	01 ee                	add    esi,ebp
c0019ded:	11 d7                	adc    edi,edx
c0019def:	29 e9                	sub    ecx,ebp
c0019df1:	19 d3                	sbb    ebx,edx
c0019df3:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0019df7:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0019dfb:	83 c4 10             	add    esp,0x10
c0019dfe:	b8 ff 07 00 00       	mov    eax,0x7ff
c0019e03:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0019e06:	b8 00 00 00 00       	mov    eax,0x0
c0019e0b:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0019e0f:	7d 3f                	jge    c0019e50 <ISO9660::read(void*, unsigned long, void*, int*)+0x1d0>
c0019e11:	52                   	push   edx
c0019e12:	89 fa                	mov    edx,edi
c0019e14:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c0019e1b:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c0019e1f:	50                   	push   eax
c0019e20:	89 f0                	mov    eax,esi
c0019e22:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019e26:	0f ac d0 0b          	shrd   eax,edx,0xb
c0019e2a:	50                   	push   eax
c0019e2b:	e8 99 fd ff ff       	call   c0019bc9 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0019e30:	81 c6 00 08 00 00    	add    esi,0x800
c0019e36:	83 d7 00             	adc    edi,0x0
c0019e39:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c0019e41:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c0019e49:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c0019e4e:	eb ab                	jmp    c0019dfb <ISO9660::read(void*, unsigned long, void*, int*)+0x17b>
c0019e50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019e54:	0b 04 24             	or     eax,DWORD PTR [esp]
c0019e57:	74 34                	je     c0019e8d <ISO9660::read(void*, unsigned long, void*, int*)+0x20d>
c0019e59:	89 fa                	mov    edx,edi
c0019e5b:	50                   	push   eax
c0019e5c:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c0019e63:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c0019e67:	50                   	push   eax
c0019e68:	89 f0                	mov    eax,esi
c0019e6a:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0019e6e:	0f ac d0 0b          	shrd   eax,edx,0xb
c0019e72:	55                   	push   ebp
c0019e73:	50                   	push   eax
c0019e74:	e8 50 fd ff ff       	call   c0019bc9 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0019e79:	83 c4 0c             	add    esp,0xc
c0019e7c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0019e80:	55                   	push   ebp
c0019e81:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019e85:	e8 48 67 fe ff       	call   c00005d2 <memcpy>
c0019e8a:	83 c4 10             	add    esp,0x10
c0019e8d:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0019e94:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0019e98:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019e9c:	89 38                	mov    DWORD PTR [eax],edi
c0019e9e:	8b bc 24 44 08 00 00 	mov    edi,DWORD PTR [esp+0x844]
c0019ea5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019ea9:	89 57 14             	mov    DWORD PTR [edi+0x14],edx
c0019eac:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c0019eaf:	31 c0                	xor    eax,eax
c0019eb1:	eb 05                	jmp    c0019eb8 <ISO9660::read(void*, unsigned long, void*, int*)+0x238>
c0019eb3:	b8 04 00 00 00       	mov    eax,0x4
c0019eb8:	81 c4 2c 08 00 00    	add    esp,0x82c
c0019ebe:	5b                   	pop    ebx
c0019ebf:	5e                   	pop    esi
c0019ec0:	5f                   	pop    edi
c0019ec1:	5d                   	pop    ebp
c0019ec2:	c3                   	ret    
c0019ec3:	90                   	nop

c0019ec4 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0019ec4:	55                   	push   ebp
c0019ec5:	57                   	push   edi
c0019ec6:	56                   	push   esi
c0019ec7:	53                   	push   ebx
c0019ec8:	81 ec 5c 09 00 00    	sub    esp,0x95c
c0019ece:	8b b4 24 74 09 00 00 	mov    esi,DWORD PTR [esp+0x974]
c0019ed5:	85 f6                	test   esi,esi
c0019ed7:	0f 84 65 02 00 00    	je     c001a142 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27e>
c0019edd:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c0019ee5:	0f 84 57 02 00 00    	je     c001a142 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27e>
c0019eeb:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0019eee:	0b 46 08             	or     eax,DWORD PTR [esi+0x8]
c0019ef1:	75 0a                	jne    c0019efd <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c0019ef3:	b8 07 00 00 00       	mov    eax,0x7
c0019ef8:	e9 4a 02 00 00       	jmp    c001a147 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x283>
c0019efd:	50                   	push   eax
c0019efe:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c0019f02:	50                   	push   eax
c0019f03:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0019f0a:	53                   	push   ebx
c0019f0b:	8b 06                	mov    eax,DWORD PTR [esi]
c0019f0d:	c1 e0 0b             	shl    eax,0xb
c0019f10:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0019f13:	c1 e8 0b             	shr    eax,0xb
c0019f16:	50                   	push   eax
c0019f17:	e8 ad fc ff ff       	call   c0019bc9 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0019f1c:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019f1f:	83 c4 10             	add    esp,0x10
c0019f22:	89 c1                	mov    ecx,eax
c0019f24:	8b 56 14             	mov    edx,DWORD PTR [esi+0x14]
c0019f27:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0019f2d:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c0019f30:	84 db                	test   bl,bl
c0019f32:	0f 85 90 00 00 00    	jne    c0019fc8 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x104>
c0019f38:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c0019f3e:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0019f44:	29 c7                	sub    edi,eax
c0019f46:	89 fb                	mov    ebx,edi
c0019f48:	c1 fb 1f             	sar    ebx,0x1f
c0019f4b:	01 f8                	add    eax,edi
c0019f4d:	11 da                	adc    edx,ebx
c0019f4f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019f53:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0019f57:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0019f5a:	89 56 14             	mov    DWORD PTR [esi+0x14],edx
c0019f5d:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0019f60:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0019f63:	89 04 24             	mov    DWORD PTR [esp],eax
c0019f66:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0019f6a:	89 d8                	mov    eax,ebx
c0019f6c:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0019f6f:	ba 00 00 00 00       	mov    edx,0x0
c0019f74:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0019f78:	b8 00 00 00 00       	mov    eax,0x0
c0019f7d:	73 0b                	jae    c0019f8a <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c0019f7f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0019f82:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019f86:	29 f8                	sub    eax,edi
c0019f88:	19 da                	sbb    edx,ebx
c0019f8a:	89 d3                	mov    ebx,edx
c0019f8c:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c0019f8f:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c0019f92:	09 c3                	or     ebx,eax
c0019f94:	0f 84 59 ff ff ff    	je     c0019ef3 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c0019f9a:	55                   	push   ebp
c0019f9b:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c0019f9f:	50                   	push   eax
c0019fa0:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0019fa7:	53                   	push   ebx
c0019fa8:	8b 06                	mov    eax,DWORD PTR [esi]
c0019faa:	c1 e0 0b             	shl    eax,0xb
c0019fad:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c0019fb1:	c1 e8 0b             	shr    eax,0xb
c0019fb4:	50                   	push   eax
c0019fb5:	e8 0f fc ff ff       	call   c0019bc9 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0019fba:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019fbd:	83 c4 10             	add    esp,0x10
c0019fc0:	25 ff 07 00 00       	and    eax,0x7ff
c0019fc5:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c0019fc8:	57                   	push   edi
c0019fc9:	6a 28                	push   0x28
c0019fcb:	6a 00                	push   0x0
c0019fcd:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019fd1:	50                   	push   eax
c0019fd2:	e8 31 66 fe ff       	call   c0000608 <memset>
c0019fd7:	31 d2                	xor    edx,edx
c0019fd9:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0019fdc:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0019fe2:	89 f8                	mov    eax,edi
c0019fe4:	83 c0 21             	add    eax,0x21
c0019fe7:	83 d2 00             	adc    edx,0x0
c0019fea:	89 c7                	mov    edi,eax
c0019fec:	89 d5                	mov    ebp,edx
c0019fee:	83 c4 10             	add    esp,0x10
c0019ff1:	31 c9                	xor    ecx,ecx
c0019ff3:	8a 84 3c 50 01 00 00 	mov    al,BYTE PTR [esp+edi*1+0x150]
c0019ffa:	83 f9 28             	cmp    ecx,0x28
c0019ffd:	88 04 24             	mov    BYTE PTR [esp],al
c001a000:	0f 94 c2             	sete   dl
c001a003:	88 d0                	mov    al,dl
c001a005:	ba ff 07 00 00       	mov    edx,0x7ff
c001a00a:	39 fa                	cmp    edx,edi
c001a00c:	ba 00 00 00 00       	mov    edx,0x0
c001a011:	19 ea                	sbb    edx,ebp
c001a013:	0f 92 c2             	setb   dl
c001a016:	09 c2                	or     edx,eax
c001a018:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001a01c:	0f 94 c0             	sete   al
c001a01f:	08 d0                	or     al,dl
c001a021:	75 16                	jne    c001a039 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c001a023:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c001a027:	74 10                	je     c001a039 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c001a029:	8a 04 24             	mov    al,BYTE PTR [esp]
c001a02c:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c001a030:	41                   	inc    ecx
c001a031:	83 c7 01             	add    edi,0x1
c001a034:	83 d5 00             	adc    ebp,0x0
c001a037:	eb ba                	jmp    c0019ff3 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x12f>
c001a039:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c001a041:	83 ec 0c             	sub    esp,0xc
c001a044:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001a048:	57                   	push   edi
c001a049:	e8 d7 65 fe ff       	call   c0000625 <strlen>
c001a04e:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c001a056:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001a05a:	8d 8c 24 60 09 00 00 	lea    ecx,[esp+0x960]
c001a061:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001a064:	5a                   	pop    edx
c001a065:	25 ff 07 00 00       	and    eax,0x7ff
c001a06a:	01 c8                	add    eax,ecx
c001a06c:	59                   	pop    ecx
c001a06d:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c001a073:	83 e0 02             	and    eax,0x2
c001a076:	3c 01                	cmp    al,0x1
c001a078:	19 c0                	sbb    eax,eax
c001a07a:	83 c0 02             	add    eax,0x2
c001a07d:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001a081:	57                   	push   edi
c001a082:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001a086:	50                   	push   eax
c001a087:	e8 1b 66 fe ff       	call   c00006a7 <strcpy>
c001a08c:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c001a090:	83 c4 10             	add    esp,0x10
c001a093:	84 c0                	test   al,al
c001a095:	75 21                	jne    c001a0b8 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1f4>
c001a097:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c001a09f:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001a0a7:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001a0af:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c001a0b6:	eb 28                	jmp    c001a0e0 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21c>
c001a0b8:	fe c8                	dec    al
c001a0ba:	75 24                	jne    c001a0e0 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21c>
c001a0bc:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c001a0c4:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001a0cc:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001a0d4:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c001a0db:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c001a0e0:	0f b6 fb             	movzx  edi,bl
c001a0e3:	31 db                	xor    ebx,ebx
c001a0e5:	50                   	push   eax
c001a0e6:	ff b4 24 7c 09 00 00 	push   DWORD PTR [esp+0x97c]
c001a0ed:	8d 44 24 48          	lea    eax,[esp+0x48]
c001a0f1:	50                   	push   eax
c001a0f2:	ff b4 24 88 09 00 00 	push   DWORD PTR [esp+0x988]
c001a0f9:	e8 d4 64 fe ff       	call   c00005d2 <memcpy>
c001a0fe:	8b 84 24 90 09 00 00 	mov    eax,DWORD PTR [esp+0x990]
c001a105:	89 f9                	mov    ecx,edi
c001a107:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001a10d:	01 7e 10             	add    DWORD PTR [esi+0x10],edi
c001a110:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c001a113:	11 5e 14             	adc    DWORD PTR [esi+0x14],ebx
c001a116:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001a119:	83 c4 10             	add    esp,0x10
c001a11c:	39 c7                	cmp    edi,eax
c001a11e:	89 df                	mov    edi,ebx
c001a120:	19 d7                	sbb    edi,edx
c001a122:	72 10                	jb     c001a134 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x270>
c001a124:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c001a12b:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c001a132:	eb 0a                	jmp    c001a13e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27a>
c001a134:	29 c8                	sub    eax,ecx
c001a136:	19 da                	sbb    edx,ebx
c001a138:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c001a13b:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c001a13e:	31 c0                	xor    eax,eax
c001a140:	eb 05                	jmp    c001a147 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x283>
c001a142:	b8 04 00 00 00       	mov    eax,0x4
c001a147:	81 c4 5c 09 00 00    	add    esp,0x95c
c001a14d:	5b                   	pop    ebx
c001a14e:	5e                   	pop    esi
c001a14f:	5f                   	pop    edi
c001a150:	5d                   	pop    ebp
c001a151:	c3                   	ret    

c001a152 <readRoot(unsigned int*, unsigned int*, char)>:
c001a152:	81 ec 40 08 00 00    	sub    esp,0x840
c001a158:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c001a160:	50                   	push   eax
c001a161:	8d 44 24 38          	lea    eax,[esp+0x38]
c001a165:	50                   	push   eax
c001a166:	6a 10                	push   0x10
c001a168:	e8 5c fa ff ff       	call   c0019bc9 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a16d:	83 c4 0c             	add    esp,0xc
c001a170:	6a 22                	push   0x22
c001a172:	8d 84 24 d4 00 00 00 	lea    eax,[esp+0xd4]
c001a179:	50                   	push   eax
c001a17a:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001a17e:	50                   	push   eax
c001a17f:	e8 4e 64 fe ff       	call   c00005d2 <memcpy>
c001a184:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001a18b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001a18f:	89 10                	mov    DWORD PTR [eax],edx
c001a191:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001a198:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001a19c:	89 10                	mov    DWORD PTR [eax],edx
c001a19e:	b0 01                	mov    al,0x1
c001a1a0:	81 c4 4c 08 00 00    	add    esp,0x84c
c001a1a6:	c3                   	ret    

c001a1a7 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c001a1a7:	55                   	push   ebp
c001a1a8:	57                   	push   edi
c001a1a9:	56                   	push   esi
c001a1aa:	53                   	push   ebx
c001a1ab:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a1b1:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001a1b8:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c001a1bf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a1c3:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c001a1c7:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001a1cb:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a1cf:	75 03                	jne    c001a1d4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001a1d1:	83 c3 02             	add    ebx,0x2
c001a1d4:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c001a1d7:	75 03                	jne    c001a1dc <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c001a1d9:	43                   	inc    ebx
c001a1da:	eb f8                	jmp    c001a1d4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001a1dc:	51                   	push   ecx
c001a1dd:	68 00 01 00 00       	push   0x100
c001a1e2:	6a 00                	push   0x0
c001a1e4:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a1e8:	50                   	push   eax
c001a1e9:	e8 1a 64 fe ff       	call   c0000608 <memset>
c001a1ee:	83 c4 10             	add    esp,0x10
c001a1f1:	31 d2                	xor    edx,edx
c001a1f3:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001a1f6:	84 c0                	test   al,al
c001a1f8:	74 21                	je     c001a21b <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c001a1fa:	3c 2f                	cmp    al,0x2f
c001a1fc:	75 0b                	jne    c001a209 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c001a1fe:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c001a202:	bd 01 00 00 00       	mov    ebp,0x1
c001a207:	eb 14                	jmp    c001a21d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c001a209:	8d 48 9f             	lea    ecx,[eax-0x61]
c001a20c:	80 f9 19             	cmp    cl,0x19
c001a20f:	77 03                	ja     c001a214 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c001a211:	83 e8 20             	sub    eax,0x20
c001a214:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c001a218:	42                   	inc    edx
c001a219:	eb d8                	jmp    c001a1f3 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c001a21b:	31 ed                	xor    ebp,ebp
c001a21d:	83 ec 0c             	sub    esp,0xc
c001a220:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001a227:	e8 97 2e ff ff       	call   c000d0c3 <malloc>
c001a22c:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001a233:	89 c6                	mov    esi,eax
c001a235:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c001a23b:	c1 ef 0b             	shr    edi,0xb
c001a23e:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c001a245:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c001a249:	83 c4 10             	add    esp,0x10
c001a24c:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c001a251:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001a255:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c001a25c:	74 28                	je     c001a286 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c001a25e:	52                   	push   edx
c001a25f:	57                   	push   edi
c001a260:	50                   	push   eax
c001a261:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a265:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001a26c:	e8 58 f9 ff ff       	call   c0019bc9 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a271:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a275:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c001a27c:	05 00 08 00 00       	add    eax,0x800
c001a281:	83 c4 10             	add    esp,0x10
c001a284:	eb cb                	jmp    c001a251 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c001a286:	83 ec 0c             	sub    esp,0xc
c001a289:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001a28d:	57                   	push   edi
c001a28e:	e8 92 63 fe ff       	call   c0000625 <strlen>
c001a293:	50                   	push   eax
c001a294:	57                   	push   edi
c001a295:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c001a29c:	56                   	push   esi
c001a29d:	e8 e5 f8 ff ff       	call   c0019b87 <__memmem(unsigned char*, int, unsigned char*, int)>
c001a2a2:	83 c4 20             	add    esp,0x20
c001a2a5:	85 c0                	test   eax,eax
c001a2a7:	75 13                	jne    c001a2bc <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c001a2a9:	83 ec 0c             	sub    esp,0xc
c001a2ac:	56                   	push   esi
c001a2ad:	e8 21 2e ff ff       	call   c000d0d3 <free>
c001a2b2:	83 c4 10             	add    esp,0x10
c001a2b5:	31 c0                	xor    eax,eax
c001a2b7:	e9 b3 00 00 00       	jmp    c001a36f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001a2bc:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c001a2c0:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c001a2c4:	c1 e7 08             	shl    edi,0x8
c001a2c7:	c1 e2 10             	shl    edx,0x10
c001a2ca:	09 d7                	or     edi,edx
c001a2cc:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c001a2d0:	09 d7                	or     edi,edx
c001a2d2:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c001a2d6:	c1 e2 18             	shl    edx,0x18
c001a2d9:	09 d7                	or     edi,edx
c001a2db:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c001a2df:	89 d1                	mov    ecx,edx
c001a2e1:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c001a2e5:	c1 e1 08             	shl    ecx,0x8
c001a2e8:	c1 e2 10             	shl    edx,0x10
c001a2eb:	09 ca                	or     edx,ecx
c001a2ed:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c001a2f1:	09 ca                	or     edx,ecx
c001a2f3:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c001a2f7:	c1 e1 18             	shl    ecx,0x18
c001a2fa:	09 ca                	or     edx,ecx
c001a2fc:	89 e9                	mov    ecx,ebp
c001a2fe:	84 c9                	test   cl,cl
c001a300:	74 3c                	je     c001a33e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c001a302:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001a306:	83 ec 0c             	sub    esp,0xc
c001a309:	56                   	push   esi
c001a30a:	e8 c4 2d ff ff       	call   c000d0d3 <free>
c001a30f:	83 c4 0c             	add    esp,0xc
c001a312:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001a319:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001a31e:	50                   	push   eax
c001a31f:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001a326:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001a32d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a331:	52                   	push   edx
c001a332:	57                   	push   edi
c001a333:	53                   	push   ebx
c001a334:	e8 6e fe ff ff       	call   c001a1a7 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001a339:	83 c4 20             	add    esp,0x20
c001a33c:	eb 31                	jmp    c001a36f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001a33e:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c001a341:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c001a348:	d0 e8                	shr    al,1
c001a34a:	89 3b                	mov    DWORD PTR [ebx],edi
c001a34c:	83 e0 01             	and    eax,0x1
c001a34f:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001a356:	83 ec 0c             	sub    esp,0xc
c001a359:	89 13                	mov    DWORD PTR [ebx],edx
c001a35b:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c001a362:	89 03                	mov    DWORD PTR [ebx],eax
c001a364:	56                   	push   esi
c001a365:	e8 69 2d ff ff       	call   c000d0d3 <free>
c001a36a:	83 c4 10             	add    esp,0x10
c001a36d:	b0 01                	mov    al,0x1
c001a36f:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a375:	5b                   	pop    ebx
c001a376:	5e                   	pop    esi
c001a377:	5f                   	pop    edi
c001a378:	5d                   	pop    ebp
c001a379:	c3                   	ret    

c001a37a <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c001a37a:	55                   	push   ebp
c001a37b:	57                   	push   edi
c001a37c:	56                   	push   esi
c001a37d:	53                   	push   ebx
c001a37e:	83 ec 20             	sub    esp,0x20
c001a381:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001a385:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001a389:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001a38d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a395:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001a39d:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c001a3a2:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c001a3a8:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c001a3ae:	57                   	push   edi
c001a3af:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a3b3:	50                   	push   eax
c001a3b4:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a3b8:	50                   	push   eax
c001a3b9:	e8 94 fd ff ff       	call   c001a152 <readRoot(unsigned int*, unsigned int*, char)>
c001a3be:	5a                   	pop    edx
c001a3bf:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a3c3:	e8 5d 62 fe ff       	call   c0000625 <strlen>
c001a3c8:	83 c4 10             	add    esp,0x10
c001a3cb:	83 f8 03             	cmp    eax,0x3
c001a3ce:	77 17                	ja     c001a3e7 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c001a3d0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a3d4:	89 03                	mov    DWORD PTR [ebx],eax
c001a3d6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a3da:	89 06                	mov    DWORD PTR [esi],eax
c001a3dc:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c001a3e3:	b0 01                	mov    al,0x1
c001a3e5:	eb 19                	jmp    c001a400 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c001a3e7:	50                   	push   eax
c001a3e8:	55                   	push   ebp
c001a3e9:	57                   	push   edi
c001a3ea:	56                   	push   esi
c001a3eb:	53                   	push   ebx
c001a3ec:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a3f0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a3f4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001a3f8:	e8 aa fd ff ff       	call   c001a1a7 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001a3fd:	83 c4 20             	add    esp,0x20
c001a400:	83 c4 1c             	add    esp,0x1c
c001a403:	5b                   	pop    ebx
c001a404:	5e                   	pop    esi
c001a405:	5f                   	pop    edi
c001a406:	5d                   	pop    ebp
c001a407:	c3                   	ret    

c001a408 <ISO9660::open(char const*, void**, FileOpenMode)>:
c001a408:	57                   	push   edi
c001a409:	56                   	push   esi
c001a40a:	53                   	push   ebx
c001a40b:	83 ec 10             	sub    esp,0x10
c001a40e:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001a412:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001a416:	85 ff                	test   edi,edi
c001a418:	74 7b                	je     c001a495 <ISO9660::open(char const*, void**, FileOpenMode)+0x8d>
c001a41a:	85 f6                	test   esi,esi
c001a41c:	74 77                	je     c001a495 <ISO9660::open(char const*, void**, FileOpenMode)+0x8d>
c001a41e:	83 ec 0c             	sub    esp,0xc
c001a421:	6a 1c                	push   0x1c
c001a423:	e8 9b 2c ff ff       	call   c000d0c3 <malloc>
c001a428:	89 07                	mov    DWORD PTR [edi],eax
c001a42a:	89 c3                	mov    ebx,eax
c001a42c:	58                   	pop    eax
c001a42d:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a431:	50                   	push   eax
c001a432:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001a435:	50                   	push   eax
c001a436:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a43a:	50                   	push   eax
c001a43b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a43f:	50                   	push   eax
c001a440:	56                   	push   esi
c001a441:	e8 34 ff ff ff       	call   c001a37a <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001a446:	83 c4 20             	add    esp,0x20
c001a449:	84 c0                	test   al,al
c001a44b:	74 07                	je     c001a454 <ISO9660::open(char const*, void**, FileOpenMode)+0x4c>
c001a44d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001a452:	74 0b                	je     c001a45f <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001a454:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001a458:	b8 01 00 00 00       	mov    eax,0x1
c001a45d:	eb 3b                	jmp    c001a49a <ISO9660::open(char const*, void**, FileOpenMode)+0x92>
c001a45f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a463:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001a467:	89 03                	mov    DWORD PTR [ebx],eax
c001a469:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001a470:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a474:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001a47b:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001a482:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001a485:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001a48c:	8a 06                	mov    al,BYTE PTR [esi]
c001a48e:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001a491:	31 c0                	xor    eax,eax
c001a493:	eb 05                	jmp    c001a49a <ISO9660::open(char const*, void**, FileOpenMode)+0x92>
c001a495:	b8 04 00 00 00       	mov    eax,0x4
c001a49a:	83 c4 10             	add    esp,0x10
c001a49d:	5b                   	pop    ebx
c001a49e:	5e                   	pop    esi
c001a49f:	5f                   	pop    edi
c001a4a0:	c3                   	ret    
c001a4a1:	90                   	nop

c001a4a2 <ISO9660::exists(char const*)>:
c001a4a2:	83 ec 28             	sub    esp,0x28
c001a4a5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a4a9:	8d 54 24 18          	lea    edx,[esp+0x18]
c001a4ad:	52                   	push   edx
c001a4ae:	0f be 10             	movsx  edx,BYTE PTR [eax]
c001a4b1:	52                   	push   edx
c001a4b2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001a4b6:	52                   	push   edx
c001a4b7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001a4bb:	52                   	push   edx
c001a4bc:	50                   	push   eax
c001a4bd:	e8 b8 fe ff ff       	call   c001a37a <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001a4c2:	83 c4 3c             	add    esp,0x3c
c001a4c5:	c3                   	ret    

c001a4c6 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001a4c6:	56                   	push   esi
c001a4c7:	53                   	push   ebx
c001a4c8:	83 ec 14             	sub    esp,0x14
c001a4cb:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001a4cf:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001a4d3:	85 db                	test   ebx,ebx
c001a4d5:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001a4d9:	0f 94 c2             	sete   dl
c001a4dc:	85 f6                	test   esi,esi
c001a4de:	0f 94 c0             	sete   al
c001a4e1:	08 c2                	or     dl,al
c001a4e3:	75 68                	jne    c001a54d <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001a4e5:	85 c9                	test   ecx,ecx
c001a4e7:	74 64                	je     c001a54d <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001a4e9:	83 ec 0c             	sub    esp,0xc
c001a4ec:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001a4ef:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a4f3:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001a4f9:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001a500:	50                   	push   eax
c001a501:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c001a504:	50                   	push   eax
c001a505:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a509:	50                   	push   eax
c001a50a:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a50e:	50                   	push   eax
c001a50f:	51                   	push   ecx
c001a510:	e8 65 fe ff ff       	call   c001a37a <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001a515:	83 c4 20             	add    esp,0x20
c001a518:	ba 01 00 00 00       	mov    edx,0x1
c001a51d:	84 c0                	test   al,al
c001a51f:	74 31                	je     c001a552 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001a521:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a525:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001a52c:	89 03                	mov    DWORD PTR [ebx],eax
c001a52e:	ba 00 00 00 00       	mov    edx,0x0
c001a533:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a537:	85 c0                	test   eax,eax
c001a539:	0f 95 06             	setne  BYTE PTR [esi]
c001a53c:	74 14                	je     c001a552 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001a53e:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001a544:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001a54b:	eb 05                	jmp    c001a552 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001a54d:	ba 04 00 00 00       	mov    edx,0x4
c001a552:	83 c4 14             	add    esp,0x14
c001a555:	89 d0                	mov    eax,edx
c001a557:	5b                   	pop    ebx
c001a558:	5e                   	pop    esi
c001a559:	c3                   	ret    

c001a55a <ISO9660::openDir(char const*, void**)>:
c001a55a:	57                   	push   edi
c001a55b:	56                   	push   esi
c001a55c:	53                   	push   ebx
c001a55d:	83 ec 10             	sub    esp,0x10
c001a560:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001a564:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001a568:	85 ff                	test   edi,edi
c001a56a:	0f 84 95 00 00 00    	je     c001a605 <ISO9660::openDir(char const*, void**)+0xab>
c001a570:	85 f6                	test   esi,esi
c001a572:	0f 84 8d 00 00 00    	je     c001a605 <ISO9660::openDir(char const*, void**)+0xab>
c001a578:	83 ec 0c             	sub    esp,0xc
c001a57b:	6a 1c                	push   0x1c
c001a57d:	e8 41 2b ff ff       	call   c000d0c3 <malloc>
c001a582:	89 07                	mov    DWORD PTR [edi],eax
c001a584:	89 c3                	mov    ebx,eax
c001a586:	59                   	pop    ecx
c001a587:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a58b:	50                   	push   eax
c001a58c:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001a58f:	50                   	push   eax
c001a590:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a594:	50                   	push   eax
c001a595:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a599:	50                   	push   eax
c001a59a:	56                   	push   esi
c001a59b:	e8 da fd ff ff       	call   c001a37a <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001a5a0:	83 c4 20             	add    esp,0x20
c001a5a3:	84 c0                	test   al,al
c001a5a5:	74 07                	je     c001a5ae <ISO9660::openDir(char const*, void**)+0x54>
c001a5a7:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001a5ac:	75 21                	jne    c001a5cf <ISO9660::openDir(char const*, void**)+0x75>
c001a5ae:	0f b6 c0             	movzx  eax,al
c001a5b1:	52                   	push   edx
c001a5b2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001a5b6:	50                   	push   eax
c001a5b7:	68 5e 1c 02 c0       	push   0xc0021c5e
c001a5bc:	e8 07 25 ff ff       	call   c000cac8 <kprintf(char const*, ...)>
c001a5c1:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001a5c5:	83 c4 10             	add    esp,0x10
c001a5c8:	b8 01 00 00 00       	mov    eax,0x1
c001a5cd:	eb 3b                	jmp    c001a60a <ISO9660::openDir(char const*, void**)+0xb0>
c001a5cf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a5d3:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001a5d7:	89 03                	mov    DWORD PTR [ebx],eax
c001a5d9:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001a5e0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a5e4:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001a5eb:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001a5f2:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001a5f5:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001a5fc:	8a 06                	mov    al,BYTE PTR [esi]
c001a5fe:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001a601:	31 c0                	xor    eax,eax
c001a603:	eb 05                	jmp    c001a60a <ISO9660::openDir(char const*, void**)+0xb0>
c001a605:	b8 04 00 00 00       	mov    eax,0x4
c001a60a:	83 c4 10             	add    esp,0x10
c001a60d:	5b                   	pop    ebx
c001a60e:	5e                   	pop    esi
c001a60f:	5f                   	pop    edi
c001a610:	c3                   	ret    
c001a611:	90                   	nop

c001a612 <ISO9660::ISO9660()>:
c001a612:	83 ec 0c             	sub    esp,0xc
c001a615:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a619:	83 ec 0c             	sub    esp,0xc
c001a61c:	50                   	push   eax
c001a61d:	e8 5a 7c ff ff       	call   c001227c <Filesystem::Filesystem()>
c001a622:	83 c4 10             	add    esp,0x10
c001a625:	ba 84 1c 02 c0       	mov    edx,0xc0021c84
c001a62a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a62e:	89 10                	mov    DWORD PTR [eax],edx
c001a630:	90                   	nop
c001a631:	83 c4 0c             	add    esp,0xc
c001a634:	c3                   	ret    
c001a635:	90                   	nop

c001a636 <SoundChannel::~SoundChannel()>:
c001a636:	83 ec 0c             	sub    esp,0xc
c001a639:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a63d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001a640:	83 ec 0c             	sub    esp,0xc
c001a643:	50                   	push   eax
c001a644:	e8 8a 2a ff ff       	call   c000d0d3 <free>
c001a649:	83 c4 10             	add    esp,0x10
c001a64c:	90                   	nop
c001a64d:	83 c4 0c             	add    esp,0xc
c001a650:	c3                   	ret    
c001a651:	90                   	nop

c001a652 <SoundChannel::setSpeed(float)>:
c001a652:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a656:	d9 44 24 08          	fld    DWORD PTR [esp+0x8]
c001a65a:	d9 58 28             	fstp   DWORD PTR [eax+0x28]
c001a65d:	c3                   	ret    

c001a65e <SoundChannel::getSpeed()>:
c001a65e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a662:	d9 40 28             	fld    DWORD PTR [eax+0x28]
c001a665:	c3                   	ret    

c001a666 <SoundChannel::setVolume(int)>:
c001a666:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a66a:	83 f8 64             	cmp    eax,0x64
c001a66d:	7e 05                	jle    c001a674 <SoundChannel::setVolume(int)+0xe>
c001a66f:	b8 64 00 00 00       	mov    eax,0x64
c001a674:	85 c0                	test   eax,eax
c001a676:	79 02                	jns    c001a67a <SoundChannel::setVolume(int)+0x14>
c001a678:	31 c0                	xor    eax,eax
c001a67a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a67e:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c001a681:	c3                   	ret    

c001a682 <SoundChannel::getVolume()>:
c001a682:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a686:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001a689:	c3                   	ret    

c001a68a <SoundChannel::pause()>:
c001a68a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a68e:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c001a692:	c3                   	ret    
c001a693:	90                   	nop

c001a694 <SoundChannel::SoundChannel(int, int, int, int)>:
c001a694:	83 ec 1c             	sub    esp,0x1c
c001a697:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a69b:	e8 ea ff ff ff       	call   c001a68a <SoundChannel::pause()>
c001a6a0:	83 c4 04             	add    esp,0x4
c001a6a3:	6a 50                	push   0x50
c001a6a5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a6a9:	e8 b8 ff ff ff       	call   c001a666 <SoundChannel::setVolume(int)>
c001a6ae:	83 c4 08             	add    esp,0x8
c001a6b1:	d9 e8                	fld1   
c001a6b3:	8d 64 24 fc          	lea    esp,[esp-0x4]
c001a6b7:	d9 1c 24             	fstp   DWORD PTR [esp]
c001a6ba:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a6be:	e8 8f ff ff ff       	call   c001a652 <SoundChannel::setSpeed(float)>
c001a6c3:	83 c4 08             	add    esp,0x8
c001a6c6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a6ca:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001a6ce:	89 10                	mov    DWORD PTR [eax],edx
c001a6d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a6d4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001a6d8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001a6db:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a6df:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001a6e3:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001a6e6:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c001a6eb:	75 23                	jne    c001a710 <SoundChannel::SoundChannel(int, int, int, int)+0x7c>
c001a6ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a6f1:	8b 10                	mov    edx,DWORD PTR [eax]
c001a6f3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a6f7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a6fa:	0f af c2             	imul   eax,edx
c001a6fd:	85 c0                	test   eax,eax
c001a6ff:	79 03                	jns    c001a704 <SoundChannel::SoundChannel(int, int, int, int)+0x70>
c001a701:	83 c0 03             	add    eax,0x3
c001a704:	c1 f8 02             	sar    eax,0x2
c001a707:	05 a0 0f 00 00       	add    eax,0xfa0
c001a70c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001a710:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a714:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001a718:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c001a71b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a71f:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001a726:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a72a:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c001a731:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a735:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001a738:	c1 e0 02             	shl    eax,0x2
c001a73b:	83 ec 0c             	sub    esp,0xc
c001a73e:	50                   	push   eax
c001a73f:	e8 7f 29 ff ff       	call   c000d0c3 <malloc>
c001a744:	83 c4 10             	add    esp,0x10
c001a747:	89 c2                	mov    edx,eax
c001a749:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a74d:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001a750:	83 ec 04             	sub    esp,0x4
c001a753:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a757:	50                   	push   eax
c001a758:	6a 01                	push   0x1
c001a75a:	6a 04                	push   0x4
c001a75c:	e8 ea e0 fe ff       	call   c000884b <src_new>
c001a761:	83 c4 10             	add    esp,0x10
c001a764:	89 c2                	mov    edx,eax
c001a766:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a76a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001a76d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a771:	85 c0                	test   eax,eax
c001a773:	74 10                	je     c001a785 <SoundChannel::SoundChannel(int, int, int, int)+0xf1>
c001a775:	83 ec 0c             	sub    esp,0xc
c001a778:	68 e0 1c 02 c0       	push   0xc0021ce0
c001a77d:	e8 64 24 ff ff       	call   c000cbe6 <panic(char const*)>
c001a782:	83 c4 10             	add    esp,0x10
c001a785:	90                   	nop
c001a786:	83 c4 1c             	add    esp,0x1c
c001a789:	c3                   	ret    

c001a78a <SoundChannel::play()>:
c001a78a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a78e:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c001a792:	c3                   	ret    
c001a793:	90                   	nop

c001a794 <SoundChannel::paused()>:
c001a794:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a798:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c001a79b:	c3                   	ret    

c001a79c <SoundChannel::getSampleRate()>:
c001a79c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a7a0:	8b 00                	mov    eax,DWORD PTR [eax]
c001a7a2:	c3                   	ret    
c001a7a3:	90                   	nop

c001a7a4 <SoundChannel::getBits()>:
c001a7a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a7a8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a7ab:	c3                   	ret    

c001a7ac <SoundChannel::getBufferUsed()>:
c001a7ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a7b0:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001a7b3:	c3                   	ret    

c001a7b4 <SoundChannel::getBufferSize()>:
c001a7b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a7b8:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001a7bb:	c3                   	ret    

c001a7bc <SoundChannel::unbuffer(float*, int, int)>:
c001a7bc:	53                   	push   ebx
c001a7bd:	83 ec 40             	sub    esp,0x40
c001a7c0:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
c001a7c4:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001a7cc:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001a7cf:	db 03                	fild   DWORD PTR [ebx]
c001a7d1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a7d5:	da 7c 24 50          	fidivr DWORD PTR [esp+0x50]
c001a7d9:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001a7dc:	d8 73 28             	fdiv   DWORD PTR [ebx+0x28]
c001a7df:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a7e3:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c001a7e7:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a7eb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a7ef:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001a7f3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a7f7:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a7fb:	50                   	push   eax
c001a7fc:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c001a7ff:	e8 01 dd fe ff       	call   c0008505 <src_process>
c001a804:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001a808:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c001a80b:	83 c4 0c             	add    esp,0xc
c001a80e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001a811:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c001a814:	29 d0                	sub    eax,edx
c001a816:	c1 e0 02             	shl    eax,0x2
c001a819:	50                   	push   eax
c001a81a:	8d 04 91             	lea    eax,[ecx+edx*4]
c001a81d:	50                   	push   eax
c001a81e:	51                   	push   ecx
c001a81f:	e8 76 5d fe ff       	call   c000059a <memmove>
c001a824:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a828:	83 c4 48             	add    esp,0x48
c001a82b:	5b                   	pop    ebx
c001a82c:	c3                   	ret    
c001a82d:	90                   	nop

c001a82e <SoundChannel::buffer8(unsigned char*, int)>:
c001a82e:	53                   	push   ebx
c001a82f:	31 c0                	xor    eax,eax
c001a831:	83 ec 08             	sub    esp,0x8
c001a834:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a838:	8b 5a 14             	mov    ebx,DWORD PTR [edx+0x14]
c001a83b:	39 5a 1c             	cmp    DWORD PTR [edx+0x1c],ebx
c001a83e:	74 35                	je     c001a875 <SoundChannel::buffer8(unsigned char*, int)+0x47>
c001a840:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001a844:	7d 2f                	jge    c001a875 <SoundChannel::buffer8(unsigned char*, int)+0x47>
c001a846:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a84a:	d9 05 fc 1c 02 c0    	fld    DWORD PTR ds:0xc0021cfc
c001a850:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c001a854:	40                   	inc    eax
c001a855:	66 89 4c 24 02       	mov    WORD PTR [esp+0x2],cx
c001a85a:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c001a85d:	de 4c 24 02          	fimul  WORD PTR [esp+0x2]
c001a861:	8d 59 01             	lea    ebx,[ecx+0x1]
c001a864:	89 5a 1c             	mov    DWORD PTR [edx+0x1c],ebx
c001a867:	8b 5a 10             	mov    ebx,DWORD PTR [edx+0x10]
c001a86a:	d9 1c 8b             	fstp   DWORD PTR [ebx+ecx*4]
c001a86d:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001a870:	39 4a 1c             	cmp    DWORD PTR [edx+0x1c],ecx
c001a873:	eb c9                	jmp    c001a83e <SoundChannel::buffer8(unsigned char*, int)+0x10>
c001a875:	83 c4 08             	add    esp,0x8
c001a878:	5b                   	pop    ebx
c001a879:	c3                   	ret    

c001a87a <SoundDevice::SoundDevice(char const*)>:
c001a87a:	83 ec 1c             	sub    esp,0x1c
c001a87d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a881:	83 ec 08             	sub    esp,0x8
c001a884:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a888:	50                   	push   eax
c001a889:	e8 e4 8c ff ff       	call   c0013572 <Device::Device(char const*)>
c001a88e:	83 c4 10             	add    esp,0x10
c001a891:	ba 08 1d 02 c0       	mov    edx,0xc0021d08
c001a896:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a89a:	89 10                	mov    DWORD PTR [eax],edx
c001a89c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a8a0:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001a8aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a8ae:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001a8b8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a8c0:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001a8c5:	7f 19                	jg     c001a8e0 <SoundDevice::SoundDevice(char const*)+0x66>
c001a8c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a8cb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a8cf:	83 c2 54             	add    edx,0x54
c001a8d2:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c001a8da:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001a8de:	eb e0                	jmp    c001a8c0 <SoundDevice::SoundDevice(char const*)+0x46>
c001a8e0:	90                   	nop
c001a8e1:	83 c4 1c             	add    esp,0x1c
c001a8e4:	c3                   	ret    
c001a8e5:	90                   	nop

c001a8e6 <SoundDevice::~SoundDevice()>:
c001a8e6:	53                   	push   ebx
c001a8e7:	83 ec 18             	sub    esp,0x18
c001a8ea:	ba 08 1d 02 c0       	mov    edx,0xc0021d08
c001a8ef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a8f3:	89 10                	mov    DWORD PTR [eax],edx
c001a8f5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a8fd:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001a902:	7f 46                	jg     c001a94a <SoundDevice::~SoundDevice()+0x64>
c001a904:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a908:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a90c:	83 c2 54             	add    edx,0x54
c001a90f:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c001a913:	85 c0                	test   eax,eax
c001a915:	74 2d                	je     c001a944 <SoundDevice::~SoundDevice()+0x5e>
c001a917:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a91b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a91f:	83 c2 54             	add    edx,0x54
c001a922:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c001a926:	85 db                	test   ebx,ebx
c001a928:	74 1a                	je     c001a944 <SoundDevice::~SoundDevice()+0x5e>
c001a92a:	83 ec 0c             	sub    esp,0xc
c001a92d:	53                   	push   ebx
c001a92e:	e8 03 fd ff ff       	call   c001a636 <SoundChannel::~SoundChannel()>
c001a933:	83 c4 10             	add    esp,0x10
c001a936:	83 ec 08             	sub    esp,0x8
c001a939:	6a 2c                	push   0x2c
c001a93b:	53                   	push   ebx
c001a93c:	e8 46 77 ff ff       	call   c0012087 <operator delete(void*, unsigned long)>
c001a941:	83 c4 10             	add    esp,0x10
c001a944:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001a948:	eb b3                	jmp    c001a8fd <SoundDevice::~SoundDevice()+0x17>
c001a94a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a94e:	83 ec 0c             	sub    esp,0xc
c001a951:	50                   	push   eax
c001a952:	e8 cd 88 ff ff       	call   c0013224 <Device::~Device()>
c001a957:	83 c4 10             	add    esp,0x10
c001a95a:	90                   	nop
c001a95b:	83 c4 18             	add    esp,0x18
c001a95e:	5b                   	pop    ebx
c001a95f:	c3                   	ret    

c001a960 <SoundDevice::~SoundDevice()>:
c001a960:	83 ec 0c             	sub    esp,0xc
c001a963:	83 ec 0c             	sub    esp,0xc
c001a966:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a96a:	e8 77 ff ff ff       	call   c001a8e6 <SoundDevice::~SoundDevice()>
c001a96f:	83 c4 10             	add    esp,0x10
c001a972:	83 ec 08             	sub    esp,0x8
c001a975:	68 e4 01 00 00       	push   0x1e4
c001a97a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a97e:	e8 04 77 ff ff       	call   c0012087 <operator delete(void*, unsigned long)>
c001a983:	83 c4 10             	add    esp,0x10
c001a986:	83 c4 0c             	add    esp,0xc
c001a989:	c3                   	ret    

c001a98a <SoundDevice::getFreeChannelNum()>:
c001a98a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a98e:	31 c0                	xor    eax,eax
c001a990:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c001a998:	74 09                	je     c001a9a3 <SoundDevice::getFreeChannelNum()+0x19>
c001a99a:	40                   	inc    eax
c001a99b:	83 f8 20             	cmp    eax,0x20
c001a99e:	75 f0                	jne    c001a990 <SoundDevice::getFreeChannelNum()+0x6>
c001a9a0:	83 c8 ff             	or     eax,0xffffffff
c001a9a3:	c3                   	ret    

c001a9a4 <SoundDevice::addChannel(SoundChannel*)>:
c001a9a4:	56                   	push   esi
c001a9a5:	53                   	push   ebx
c001a9a6:	51                   	push   ecx
c001a9a7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a9ab:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001a9af:	53                   	push   ebx
c001a9b0:	e8 d5 ff ff ff       	call   c001a98a <SoundDevice::getFreeChannelNum()>
c001a9b5:	5a                   	pop    edx
c001a9b6:	83 f8 ff             	cmp    eax,0xffffffff
c001a9b9:	74 51                	je     c001aa0c <SoundDevice::addChannel(SoundChannel*)+0x68>
c001a9bb:	85 f6                	test   esi,esi
c001a9bd:	74 4d                	je     c001aa0c <SoundDevice::addChannel(SoundChannel*)+0x68>
c001a9bf:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c001a9c6:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c001a9cd:	75 30                	jne    c001a9ff <SoundDevice::addChannel(SoundChannel*)+0x5b>
c001a9cf:	83 ec 0c             	sub    esp,0xc
c001a9d2:	56                   	push   esi
c001a9d3:	e8 c4 fd ff ff       	call   c001a79c <SoundChannel::getSampleRate()>
c001a9d8:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c001a9de:	89 34 24             	mov    DWORD PTR [esp],esi
c001a9e1:	e8 be fd ff ff       	call   c001a7a4 <SoundChannel::getBits()>
c001a9e6:	83 c4 0c             	add    esp,0xc
c001a9e9:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c001a9ef:	8b 13                	mov    edx,DWORD PTR [ebx]
c001a9f1:	50                   	push   eax
c001a9f2:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c001a9f8:	53                   	push   ebx
c001a9f9:	ff 52 28             	call   DWORD PTR [edx+0x28]
c001a9fc:	83 c4 10             	add    esp,0x10
c001a9ff:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c001aa05:	b8 01 00 00 00       	mov    eax,0x1
c001aa0a:	eb 03                	jmp    c001aa0f <SoundDevice::addChannel(SoundChannel*)+0x6b>
c001aa0c:	83 c8 ff             	or     eax,0xffffffff
c001aa0f:	5a                   	pop    edx
c001aa10:	5b                   	pop    ebx
c001aa11:	5e                   	pop    esi
c001aa12:	c3                   	ret    
c001aa13:	90                   	nop

c001aa14 <SoundDevice::removeChannel(int)>:
c001aa14:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001aa18:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa1c:	83 fa 1f             	cmp    edx,0x1f
c001aa1f:	77 23                	ja     c001aa44 <SoundDevice::removeChannel(int)+0x30>
c001aa21:	8d 14 90             	lea    edx,[eax+edx*4]
c001aa24:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c001aa2b:	74 17                	je     c001aa44 <SoundDevice::removeChannel(int)+0x30>
c001aa2d:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c001aa37:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c001aa3d:	75 05                	jne    c001aa44 <SoundDevice::removeChannel(int)+0x30>
c001aa3f:	8b 00                	mov    eax,DWORD PTR [eax]
c001aa41:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c001aa44:	c3                   	ret    
c001aa45:	90                   	nop

c001aa46 <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c001aa46:	56                   	push   esi
c001aa47:	53                   	push   ebx
c001aa48:	31 db                	xor    ebx,ebx
c001aa4a:	83 ec 14             	sub    esp,0x14
c001aa4d:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001aa51:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c001aa55:	7d 55                	jge    c001aaac <SoundDevice::floatTo8(float*, unsigned char*, int)+0x66>
c001aa57:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001aa5b:	d9 e8                	fld1   
c001aa5d:	d8 04 98             	fadd   DWORD PTR [eax+ebx*4]
c001aa60:	d8 0d 38 1d 02 c0    	fmul   DWORD PTR ds:0xc0021d38
c001aa66:	d8 0d 3c 1d 02 c0    	fmul   DWORD PTR ds:0xc0021d3c
c001aa6c:	d9 5c 24 0c          	fstp   DWORD PTR [esp+0xc]
c001aa70:	d9 44 24 0c          	fld    DWORD PTR [esp+0xc]
c001aa74:	d8 15 40 1d 02 c0    	fcom   DWORD PTR ds:0xc0021d40
c001aa7a:	df e0                	fnstsw ax
c001aa7c:	9e                   	sahf   
c001aa7d:	72 08                	jb     c001aa87 <SoundDevice::floatTo8(float*, unsigned char*, int)+0x41>
c001aa7f:	dd d8                	fstp   st(0)
c001aa81:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c001aa85:	eb 22                	jmp    c001aaa9 <SoundDevice::floatTo8(float*, unsigned char*, int)+0x63>
c001aa87:	d9 ee                	fldz   
c001aa89:	d8 d9                	fcomp  st(1)
c001aa8b:	df e0                	fnstsw ax
c001aa8d:	9e                   	sahf   
c001aa8e:	72 08                	jb     c001aa98 <SoundDevice::floatTo8(float*, unsigned char*, int)+0x52>
c001aa90:	dd d8                	fstp   st(0)
c001aa92:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c001aa96:	eb 11                	jmp    c001aaa9 <SoundDevice::floatTo8(float*, unsigned char*, int)+0x63>
c001aa98:	83 ec 10             	sub    esp,0x10
c001aa9b:	d9 1c 24             	fstp   DWORD PTR [esp]
c001aa9e:	e8 c9 3a 00 00       	call   c001e56c <lrintf>
c001aaa3:	83 c4 10             	add    esp,0x10
c001aaa6:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c001aaa9:	43                   	inc    ebx
c001aaaa:	eb a5                	jmp    c001aa51 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb>
c001aaac:	83 c4 14             	add    esp,0x14
c001aaaf:	5b                   	pop    ebx
c001aab0:	5e                   	pop    esi
c001aab1:	c3                   	ret    

c001aab2 <SoundDevice::getAudio(int, float*, float*)>:
c001aab2:	55                   	push   ebp
c001aab3:	57                   	push   edi
c001aab4:	56                   	push   esi
c001aab5:	53                   	push   ebx
c001aab6:	31 db                	xor    ebx,ebx
c001aab8:	83 ec 20             	sub    esp,0x20
c001aabb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aabf:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001aac3:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001aac7:	c1 e0 02             	shl    eax,0x2
c001aaca:	50                   	push   eax
c001aacb:	6a 00                	push   0x0
c001aacd:	55                   	push   ebp
c001aace:	e8 35 5b fe ff       	call   c0000608 <memset>
c001aad3:	83 c4 10             	add    esp,0x10
c001aad6:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001aada:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c001aae1:	85 c0                	test   eax,eax
c001aae3:	0f 84 94 00 00 00    	je     c001ab7d <SoundDevice::getAudio(int, float*, float*)+0xcb>
c001aae9:	83 ec 0c             	sub    esp,0xc
c001aaec:	50                   	push   eax
c001aaed:	e8 a2 fc ff ff       	call   c001a794 <SoundChannel::paused()>
c001aaf2:	83 c4 10             	add    esp,0x10
c001aaf5:	84 c0                	test   al,al
c001aaf7:	0f 85 80 00 00 00    	jne    c001ab7d <SoundDevice::getAudio(int, float*, float*)+0xcb>
c001aafd:	83 ec 0c             	sub    esp,0xc
c001ab00:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c001ab07:	e8 76 fb ff ff       	call   c001a682 <SoundChannel::getVolume()>
c001ab0c:	83 c4 10             	add    esp,0x10
c001ab0f:	85 c0                	test   eax,eax
c001ab11:	74 6a                	je     c001ab7d <SoundDevice::getAudio(int, float*, float*)+0xcb>
c001ab13:	83 ec 0c             	sub    esp,0xc
c001ab16:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c001ab1d:	e8 60 fb ff ff       	call   c001a682 <SoundChannel::getVolume()>
c001ab22:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ab26:	d9 05 44 1d 02 c0    	fld    DWORD PTR ds:0xc0021d44
c001ab2c:	da 7c 24 1c          	fidivr DWORD PTR [esp+0x1c]
c001ab30:	d9 5c 24 1c          	fstp   DWORD PTR [esp+0x1c]
c001ab34:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001ab38:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c001ab3e:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c001ab42:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c001ab49:	e8 6e fc ff ff       	call   c001a7bc <SoundChannel::unbuffer(float*, int, int)>
c001ab4e:	83 c4 20             	add    esp,0x20
c001ab51:	31 d2                	xor    edx,edx
c001ab53:	d9 44 24 0c          	fld    DWORD PTR [esp+0xc]
c001ab57:	39 c2                	cmp    edx,eax
c001ab59:	7d 1a                	jge    c001ab75 <SoundDevice::getAudio(int, float*, float*)+0xc3>
c001ab5b:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001ab5f:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c001ab62:	d8 c9                	fmul   st,st(1)
c001ab64:	da b6 58 01 00 00    	fidiv  DWORD PTR [esi+0x158]
c001ab6a:	d8 44 95 00          	fadd   DWORD PTR [ebp+edx*4+0x0]
c001ab6e:	d9 5c 95 00          	fstp   DWORD PTR [ebp+edx*4+0x0]
c001ab72:	42                   	inc    edx
c001ab73:	eb e2                	jmp    c001ab57 <SoundDevice::getAudio(int, float*, float*)+0xa5>
c001ab75:	dd d8                	fstp   st(0)
c001ab77:	39 c7                	cmp    edi,eax
c001ab79:	7e 02                	jle    c001ab7d <SoundDevice::getAudio(int, float*, float*)+0xcb>
c001ab7b:	89 c7                	mov    edi,eax
c001ab7d:	43                   	inc    ebx
c001ab7e:	83 fb 20             	cmp    ebx,0x20
c001ab81:	0f 85 53 ff ff ff    	jne    c001aada <SoundDevice::getAudio(int, float*, float*)+0x28>
c001ab87:	83 c4 1c             	add    esp,0x1c
c001ab8a:	89 f8                	mov    eax,edi
c001ab8c:	5b                   	pop    ebx
c001ab8d:	5e                   	pop    esi
c001ab8e:	5f                   	pop    edi
c001ab8f:	5d                   	pop    ebp
c001ab90:	c3                   	ret    
c001ab91:	90                   	nop

c001ab92 <PCI::open(int, int, void*)>:
c001ab92:	83 ec 18             	sub    esp,0x18
c001ab95:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ab99:	8b 10                	mov    edx,DWORD PTR [eax]
c001ab9b:	50                   	push   eax
c001ab9c:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001ab9f:	31 c0                	xor    eax,eax
c001aba1:	83 c4 1c             	add    esp,0x1c
c001aba4:	c3                   	ret    
c001aba5:	90                   	nop

c001aba6 <PCI::close(int, int, void*)>:
c001aba6:	31 c0                	xor    eax,eax
c001aba8:	c3                   	ret    
c001aba9:	90                   	nop

c001abaa <PCI::PCI()>:
c001abaa:	83 ec 0c             	sub    esp,0xc
c001abad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abb1:	83 ec 08             	sub    esp,0x8
c001abb4:	68 48 1d 02 c0       	push   0xc0021d48
c001abb9:	50                   	push   eax
c001abba:	e8 3f 80 ff ff       	call   c0012bfe <Bus::Bus(char const*)>
c001abbf:	83 c4 10             	add    esp,0x10
c001abc2:	ba f4 1d 02 c0       	mov    edx,0xc0021df4
c001abc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abcb:	89 10                	mov    DWORD PTR [eax],edx
c001abcd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abd1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001abd7:	0f b6 d0             	movzx  edx,al
c001abda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abde:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001abe5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abe9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001abef:	0f b6 d0             	movzx  edx,al
c001abf2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abf6:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001abfb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abff:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ac05:	8d 50 01             	lea    edx,[eax+0x1]
c001ac08:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ac0c:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001ac12:	0f b6 d0             	movzx  edx,al
c001ac15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac19:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001ac1d:	83 c9 c0             	or     ecx,0xffffffc0
c001ac20:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001ac24:	90                   	nop
c001ac25:	83 c4 0c             	add    esp,0xc
c001ac28:	c3                   	ret    
c001ac29:	90                   	nop

c001ac2a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001ac2a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001ac2e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001ac33:	89 ca                	mov    edx,ecx
c001ac35:	c1 e0 10             	shl    eax,0x10
c001ac38:	81 e2 fc 00 00 00    	and    edx,0xfc
c001ac3e:	09 d0                	or     eax,edx
c001ac40:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c001ac45:	c1 e2 08             	shl    edx,0x8
c001ac48:	09 d0                	or     eax,edx
c001ac4a:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c001ac4f:	c1 e2 0b             	shl    edx,0xb
c001ac52:	09 d0                	or     eax,edx
c001ac54:	ba f8 0c 00 00       	mov    edx,0xcf8
c001ac59:	0d 00 00 00 80       	or     eax,0x80000000
c001ac5e:	ef                   	out    dx,eax
c001ac5f:	ba fc 0c 00 00       	mov    edx,0xcfc
c001ac64:	ed                   	in     eax,dx
c001ac65:	83 e1 02             	and    ecx,0x2
c001ac68:	0f b6 c9             	movzx  ecx,cl
c001ac6b:	c1 e1 03             	shl    ecx,0x3
c001ac6e:	d3 e8                	shr    eax,cl
c001ac70:	c3                   	ret    
c001ac71:	90                   	nop

c001ac72 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001ac72:	6a 00                	push   0x0
c001ac74:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001ac79:	50                   	push   eax
c001ac7a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001ac7f:	50                   	push   eax
c001ac80:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001ac85:	50                   	push   eax
c001ac86:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ac8a:	e8 9b ff ff ff       	call   c001ac2a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ac8f:	83 c4 14             	add    esp,0x14
c001ac92:	c3                   	ret    
c001ac93:	90                   	nop

c001ac94 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001ac94:	6a 0e                	push   0xe
c001ac96:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001ac9b:	50                   	push   eax
c001ac9c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001aca1:	50                   	push   eax
c001aca2:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001aca7:	50                   	push   eax
c001aca8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001acac:	e8 79 ff ff ff       	call   c001ac2a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001acb1:	83 c4 14             	add    esp,0x14
c001acb4:	0f b6 c0             	movzx  eax,al
c001acb7:	c3                   	ret    

c001acb8 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001acb8:	55                   	push   ebp
c001acb9:	57                   	push   edi
c001acba:	56                   	push   esi
c001acbb:	53                   	push   ebx
c001acbc:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001acc1:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c001acc6:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c001accb:	6a 0a                	push   0xa
c001accd:	56                   	push   esi
c001acce:	55                   	push   ebp
c001accf:	57                   	push   edi
c001acd0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001acd4:	e8 51 ff ff ff       	call   c001ac2a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001acd9:	6a 0a                	push   0xa
c001acdb:	89 c3                	mov    ebx,eax
c001acdd:	56                   	push   esi
c001acde:	0f b6 db             	movzx  ebx,bl
c001ace1:	55                   	push   ebp
c001ace2:	57                   	push   edi
c001ace3:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001ace7:	e8 3e ff ff ff       	call   c001ac2a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001acec:	83 c4 28             	add    esp,0x28
c001acef:	25 00 ff 00 00       	and    eax,0xff00
c001acf4:	09 d8                	or     eax,ebx
c001acf6:	5b                   	pop    ebx
c001acf7:	5e                   	pop    esi
c001acf8:	5f                   	pop    edi
c001acf9:	5d                   	pop    ebp
c001acfa:	c3                   	ret    
c001acfb:	90                   	nop

c001acfc <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001acfc:	6a 08                	push   0x8
c001acfe:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001ad03:	50                   	push   eax
c001ad04:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001ad09:	50                   	push   eax
c001ad0a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001ad0f:	50                   	push   eax
c001ad10:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ad14:	e8 11 ff ff ff       	call   c001ac2a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ad19:	83 c4 14             	add    esp,0x14
c001ad1c:	0f b6 c4             	movzx  eax,ah
c001ad1f:	c3                   	ret    

c001ad20 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001ad20:	6a 08                	push   0x8
c001ad22:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001ad27:	50                   	push   eax
c001ad28:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001ad2d:	50                   	push   eax
c001ad2e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001ad33:	50                   	push   eax
c001ad34:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ad38:	e8 ed fe ff ff       	call   c001ac2a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ad3d:	83 c4 14             	add    esp,0x14
c001ad40:	c3                   	ret    
c001ad41:	90                   	nop

c001ad42 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001ad42:	6a 3c                	push   0x3c
c001ad44:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001ad49:	50                   	push   eax
c001ad4a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001ad4f:	50                   	push   eax
c001ad50:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001ad55:	50                   	push   eax
c001ad56:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ad5a:	e8 cb fe ff ff       	call   c001ac2a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ad5f:	83 c4 14             	add    esp,0x14
c001ad62:	c3                   	ret    
c001ad63:	90                   	nop

c001ad64 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001ad64:	6a 18                	push   0x18
c001ad66:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001ad6b:	50                   	push   eax
c001ad6c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001ad71:	50                   	push   eax
c001ad72:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001ad77:	50                   	push   eax
c001ad78:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ad7c:	e8 a9 fe ff ff       	call   c001ac2a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ad81:	83 c4 14             	add    esp,0x14
c001ad84:	0f b6 c4             	movzx  eax,ah
c001ad87:	c3                   	ret    

c001ad88 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001ad88:	55                   	push   ebp
c001ad89:	57                   	push   edi
c001ad8a:	56                   	push   esi
c001ad8b:	53                   	push   ebx
c001ad8c:	50                   	push   eax
c001ad8d:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c001ad91:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c001ad96:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001ad9b:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c001ada0:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001ada7:	8d 43 12             	lea    eax,[ebx+0x12]
c001adaa:	83 c3 10             	add    ebx,0x10
c001adad:	0f b6 c0             	movzx  eax,al
c001adb0:	0f b6 db             	movzx  ebx,bl
c001adb3:	50                   	push   eax
c001adb4:	51                   	push   ecx
c001adb5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001adb9:	57                   	push   edi
c001adba:	55                   	push   ebp
c001adbb:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001adbf:	e8 66 fe ff ff       	call   c001ac2a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001adc4:	53                   	push   ebx
c001adc5:	89 c6                	mov    esi,eax
c001adc7:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001adcb:	c1 e6 10             	shl    esi,0x10
c001adce:	51                   	push   ecx
c001adcf:	57                   	push   edi
c001add0:	55                   	push   ebp
c001add1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001add5:	e8 50 fe ff ff       	call   c001ac2a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001adda:	83 c4 2c             	add    esp,0x2c
c001addd:	0f b7 c0             	movzx  eax,ax
c001ade0:	5b                   	pop    ebx
c001ade1:	09 f0                	or     eax,esi
c001ade3:	5e                   	pop    esi
c001ade4:	5f                   	pop    edi
c001ade5:	5d                   	pop    ebp
c001ade6:	c3                   	ret    
c001ade7:	90                   	nop

c001ade8 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001ade8:	53                   	push   ebx
c001ade9:	ba f8 0c 00 00       	mov    edx,0xcf8
c001adee:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001adf3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001adf7:	c1 e1 10             	shl    ecx,0x10
c001adfa:	25 fc 00 00 00       	and    eax,0xfc
c001adff:	09 c1                	or     ecx,eax
c001ae01:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001ae06:	c1 e0 08             	shl    eax,0x8
c001ae09:	09 c1                	or     ecx,eax
c001ae0b:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001ae10:	c1 e0 0b             	shl    eax,0xb
c001ae13:	09 c1                	or     ecx,eax
c001ae15:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001ae1b:	89 c8                	mov    eax,ecx
c001ae1d:	ef                   	out    dx,eax
c001ae1e:	ba fc 0c 00 00       	mov    edx,0xcfc
c001ae23:	ed                   	in     eax,dx
c001ae24:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c001ae29:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c001ae2e:	74 0a                	je     c001ae3a <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c001ae30:	0f b7 d8             	movzx  ebx,ax
c001ae33:	89 d0                	mov    eax,edx
c001ae35:	c1 e0 10             	shl    eax,0x10
c001ae38:	eb 05                	jmp    c001ae3f <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c001ae3a:	66 31 c0             	xor    ax,ax
c001ae3d:	89 d3                	mov    ebx,edx
c001ae3f:	09 c3                	or     ebx,eax
c001ae41:	ba f8 0c 00 00       	mov    edx,0xcf8
c001ae46:	89 c8                	mov    eax,ecx
c001ae48:	ef                   	out    dx,eax
c001ae49:	ba fc 0c 00 00       	mov    edx,0xcfc
c001ae4e:	89 d8                	mov    eax,ebx
c001ae50:	ef                   	out    dx,eax
c001ae51:	5b                   	pop    ebx
c001ae52:	c3                   	ret    
c001ae53:	90                   	nop

c001ae54 <PCI::checkBus(unsigned char)>:
c001ae54:	56                   	push   esi
c001ae55:	53                   	push   ebx
c001ae56:	31 db                	xor    ebx,ebx
c001ae58:	51                   	push   ecx
c001ae59:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001ae5e:	52                   	push   edx
c001ae5f:	53                   	push   ebx
c001ae60:	43                   	inc    ebx
c001ae61:	56                   	push   esi
c001ae62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ae66:	e8 4d 03 00 00       	call   c001b1b8 <PCI::checkDevice(unsigned char, unsigned char)>
c001ae6b:	83 c4 10             	add    esp,0x10
c001ae6e:	83 fb 20             	cmp    ebx,0x20
c001ae71:	75 eb                	jne    c001ae5e <PCI::checkBus(unsigned char)+0xa>
c001ae73:	58                   	pop    eax
c001ae74:	5b                   	pop    ebx
c001ae75:	5e                   	pop    esi
c001ae76:	c3                   	ret    
c001ae77:	90                   	nop

c001ae78 <PCI::foundDevice(PCIDeviceInfo)>:
c001ae78:	55                   	push   ebp
c001ae79:	57                   	push   edi
c001ae7a:	56                   	push   esi
c001ae7b:	53                   	push   ebx
c001ae7c:	83 ec 1c             	sub    esp,0x1c
c001ae7f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001ae83:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c001ae89:	0f 84 51 01 00 00    	je     c001afe0 <PCI::foundDevice(PCIDeviceInfo)+0x168>
c001ae8f:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001ae93:	66 81 f9 06 04       	cmp    cx,0x406
c001ae98:	75 2c                	jne    c001aec6 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c001ae9a:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001ae9f:	50                   	push   eax
c001aea0:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001aea5:	50                   	push   eax
c001aea6:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001aeab:	50                   	push   eax
c001aeac:	56                   	push   esi
c001aead:	e8 b2 fe ff ff       	call   c001ad64 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001aeb2:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001aeb6:	0f b6 c0             	movzx  eax,al
c001aeb9:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001aebd:	83 c4 2c             	add    esp,0x2c
c001aec0:	5b                   	pop    ebx
c001aec1:	5e                   	pop    esi
c001aec2:	5f                   	pop    edi
c001aec3:	5d                   	pop    ebp
c001aec4:	eb 8e                	jmp    c001ae54 <PCI::checkBus(unsigned char)>
c001aec6:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001aeca:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001aed0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001aed4:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001aed8:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c001aedc:	88 d3                	mov    bl,dl
c001aede:	85 c0                	test   eax,eax
c001aee0:	74 33                	je     c001af15 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001aee2:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001aee5:	85 d2                	test   edx,edx
c001aee7:	74 28                	je     c001af11 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001aee9:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c001aeef:	31 ef                	xor    edi,ebp
c001aef1:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c001aef7:	75 18                	jne    c001af11 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001aef9:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001aefd:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c001af03:	75 0c                	jne    c001af11 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001af05:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c001af0b:	0f 84 cf 00 00 00    	je     c001afe0 <PCI::foundDevice(PCIDeviceInfo)+0x168>
c001af11:	8b 00                	mov    eax,DWORD PTR [eax]
c001af13:	eb c9                	jmp    c001aede <PCI::foundDevice(PCIDeviceInfo)+0x66>
c001af15:	66 81 f9 01 06       	cmp    cx,0x601
c001af1a:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c001af1e:	75 18                	jne    c001af38 <PCI::foundDevice(PCIDeviceInfo)+0xc0>
c001af20:	83 ec 0c             	sub    esp,0xc
c001af23:	68 58 01 00 00       	push   0x158
c001af28:	e8 4b 71 ff ff       	call   c0012078 <operator new(unsigned long)>
c001af2d:	59                   	pop    ecx
c001af2e:	89 c5                	mov    ebp,eax
c001af30:	5f                   	pop    edi
c001af31:	68 50 1d 02 c0       	push   0xc0021d50
c001af36:	eb 7d                	jmp    c001afb5 <PCI::foundDevice(PCIDeviceInfo)+0x13d>
c001af38:	66 81 f9 01 01       	cmp    cx,0x101
c001af3d:	75 60                	jne    c001af9f <PCI::foundDevice(PCIDeviceInfo)+0x127>
c001af3f:	83 ec 0c             	sub    esp,0xc
c001af42:	68 70 02 00 00       	push   0x270
c001af47:	e8 2c 71 ff ff       	call   c0012078 <operator new(unsigned long)>
c001af4c:	89 04 24             	mov    DWORD PTR [esp],eax
c001af4f:	89 c5                	mov    ebp,eax
c001af51:	e8 e0 07 00 00       	call   c001b736 <IDE::IDE()>
c001af56:	58                   	pop    eax
c001af57:	5a                   	pop    edx
c001af58:	55                   	push   ebp
c001af59:	56                   	push   esi
c001af5a:	e8 23 84 ff ff       	call   c0013382 <Device::addChild(Device*)>
c001af5f:	83 ec 1c             	sub    esp,0x1c
c001af62:	b9 09 00 00 00       	mov    ecx,0x9
c001af67:	fc                   	cld    
c001af68:	89 e7                	mov    edi,esp
c001af6a:	89 de                	mov    esi,ebx
c001af6c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001af6e:	55                   	push   ebp
c001af6f:	e8 e8 82 ff ff       	call   c001325c <Device::preOpenPCI(PCIDeviceInfo)>
c001af74:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001af77:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001af7b:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001af83:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001af8b:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001af93:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001af96:	83 c4 4c             	add    esp,0x4c
c001af99:	5b                   	pop    ebx
c001af9a:	5e                   	pop    esi
c001af9b:	5f                   	pop    edi
c001af9c:	5d                   	pop    ebp
c001af9d:	ff e0                	jmp    eax
c001af9f:	83 ec 0c             	sub    esp,0xc
c001afa2:	68 58 01 00 00       	push   0x158
c001afa7:	e8 cc 70 ff ff       	call   c0012078 <operator new(unsigned long)>
c001afac:	59                   	pop    ecx
c001afad:	89 c5                	mov    ebp,eax
c001afaf:	5f                   	pop    edi
c001afb0:	68 6f 1d 02 c0       	push   0xc0021d6f
c001afb5:	55                   	push   ebp
c001afb6:	e8 b3 86 ff ff       	call   c001366e <DriverlessDevice::DriverlessDevice(char const*)>
c001afbb:	58                   	pop    eax
c001afbc:	5a                   	pop    edx
c001afbd:	55                   	push   ebp
c001afbe:	56                   	push   esi
c001afbf:	e8 be 83 ff ff       	call   c0013382 <Device::addChild(Device*)>
c001afc4:	b9 09 00 00 00       	mov    ecx,0x9
c001afc9:	fc                   	cld    
c001afca:	89 df                	mov    edi,ebx
c001afcc:	89 de                	mov    esi,ebx
c001afce:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001afd0:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c001afd4:	83 c4 2c             	add    esp,0x2c
c001afd7:	5b                   	pop    ebx
c001afd8:	5e                   	pop    esi
c001afd9:	5f                   	pop    edi
c001afda:	5d                   	pop    ebp
c001afdb:	e9 7c 82 ff ff       	jmp    c001325c <Device::preOpenPCI(PCIDeviceInfo)>
c001afe0:	83 c4 1c             	add    esp,0x1c
c001afe3:	5b                   	pop    ebx
c001afe4:	5e                   	pop    esi
c001afe5:	5f                   	pop    edi
c001afe6:	5d                   	pop    ebp
c001afe7:	c3                   	ret    

c001afe8 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001afe8:	55                   	push   ebp
c001afe9:	57                   	push   edi
c001afea:	56                   	push   esi
c001afeb:	53                   	push   ebx
c001afec:	83 ec 5c             	sub    esp,0x5c
c001afef:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001aff3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001aff7:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c001affb:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c001b000:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b004:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c001b008:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c001b00d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b011:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c001b016:	6a 0c                	push   0xc
c001b018:	55                   	push   ebp
c001b019:	53                   	push   ebx
c001b01a:	57                   	push   edi
c001b01b:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c001b022:	e8 03 fc ff ff       	call   c001ac2a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b027:	83 c4 0c             	add    esp,0xc
c001b02a:	6a 00                	push   0x0
c001b02c:	68 89 1d 02 c0       	push   0xc0021d89
c001b031:	e8 92 1a ff ff       	call   c000cac8 <kprintf(char const*, ...)>
c001b036:	55                   	push   ebp
c001b037:	53                   	push   ebx
c001b038:	57                   	push   edi
c001b039:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001b040:	e8 73 fc ff ff       	call   c001acb8 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001b045:	66 89 44 24 3e       	mov    WORD PTR [esp+0x3e],ax
c001b04a:	83 c4 20             	add    esp,0x20
c001b04d:	55                   	push   ebp
c001b04e:	53                   	push   ebx
c001b04f:	57                   	push   edi
c001b050:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c001b054:	e8 e9 fc ff ff       	call   c001ad42 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001b059:	c7 04 24 3c 00 00 00 	mov    DWORD PTR [esp],0x3c
c001b060:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001b064:	55                   	push   ebp
c001b065:	53                   	push   ebx
c001b066:	57                   	push   edi
c001b067:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001b06e:	e8 b7 fb ff ff       	call   c001ac2a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b073:	0f b6 c4             	movzx  eax,ah
c001b076:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001b07a:	83 c4 18             	add    esp,0x18
c001b07d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001b081:	68 9d 1d 02 c0       	push   0xc0021d9d
c001b086:	e8 3d 1a ff ff       	call   c000cac8 <kprintf(char const*, ...)>
c001b08b:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c001b08f:	88 44 24 5d          	mov    BYTE PTR [esp+0x5d],al
c001b093:	a1 c8 30 02 c0       	mov    eax,ds:0xc00230c8
c001b098:	83 c4 10             	add    esp,0x10
c001b09b:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001b0a1:	83 b8 5c 21 00 00 00 	cmp    DWORD PTR [eax+0x215c],0x0
c001b0a8:	74 6c                	je     c001b116 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x12e>
c001b0aa:	31 f6                	xor    esi,esi
c001b0ac:	8b 15 c8 30 02 c0    	mov    edx,DWORD PTR ds:0xc00230c8
c001b0b2:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c001b0b8:	39 b2 5c 21 00 00    	cmp    DWORD PTR [edx+0x215c],esi
c001b0be:	7e 56                	jle    c001b116 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x12e>
c001b0c0:	8d 14 f2             	lea    edx,[edx+esi*8]
c001b0c3:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c001b0ca:	39 cb                	cmp    ebx,ecx
c001b0cc:	75 45                	jne    c001b113 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x12b>
c001b0ce:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c001b0d5:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c001b0d9:	75 38                	jne    c001b113 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x12b>
c001b0db:	83 ec 0c             	sub    esp,0xc
c001b0de:	68 ac 1d 02 c0       	push   0xc0021dac
c001b0e3:	e8 e0 19 ff ff       	call   c000cac8 <kprintf(char const*, ...)>
c001b0e8:	8b 15 c8 30 02 c0    	mov    edx,DWORD PTR ds:0xc00230c8
c001b0ee:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c001b0f4:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c001b0fc:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c001b100:	52                   	push   edx
c001b101:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b105:	53                   	push   ebx
c001b106:	68 d1 1d 02 c0       	push   0xc0021dd1
c001b10b:	e8 b8 19 ff ff       	call   c000cac8 <kprintf(char const*, ...)>
c001b110:	83 c4 20             	add    esp,0x20
c001b113:	46                   	inc    esi
c001b114:	eb 96                	jmp    c001b0ac <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xc4>
c001b116:	31 d2                	xor    edx,edx
c001b118:	83 ec 0c             	sub    esp,0xc
c001b11b:	55                   	push   ebp
c001b11c:	53                   	push   ebx
c001b11d:	57                   	push   edi
c001b11e:	52                   	push   edx
c001b11f:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001b123:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001b12a:	e8 59 fc ff ff       	call   c001ad88 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b12f:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c001b133:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001b137:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001b13b:	42                   	inc    edx
c001b13c:	83 c4 20             	add    esp,0x20
c001b13f:	83 fa 06             	cmp    edx,0x6
c001b142:	75 d4                	jne    c001b118 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x130>
c001b144:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001b148:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c001b14c:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c001b150:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c001b154:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001b158:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c001b15c:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001b161:	86 e0                	xchg   al,ah
c001b163:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c001b168:	55                   	push   ebp
c001b169:	53                   	push   ebx
c001b16a:	57                   	push   edi
c001b16b:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c001b16f:	e8 88 fb ff ff       	call   c001acfc <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001b174:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001b178:	55                   	push   ebp
c001b179:	53                   	push   ebx
c001b17a:	57                   	push   edi
c001b17b:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001b182:	e8 eb fa ff ff       	call   c001ac72 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b187:	83 ec 0c             	sub    esp,0xc
c001b18a:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c001b18f:	b9 09 00 00 00       	mov    ecx,0x9
c001b194:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c001b198:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c001b19c:	fc                   	cld    
c001b19d:	89 e7                	mov    edi,esp
c001b19f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b1a1:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c001b1a8:	e8 cb fc ff ff       	call   c001ae78 <PCI::foundDevice(PCIDeviceInfo)>
c001b1ad:	81 c4 8c 00 00 00    	add    esp,0x8c
c001b1b3:	5b                   	pop    ebx
c001b1b4:	5e                   	pop    esi
c001b1b5:	5f                   	pop    edi
c001b1b6:	5d                   	pop    ebp
c001b1b7:	c3                   	ret    

c001b1b8 <PCI::checkDevice(unsigned char, unsigned char)>:
c001b1b8:	55                   	push   ebp
c001b1b9:	57                   	push   edi
c001b1ba:	56                   	push   esi
c001b1bb:	53                   	push   ebx
c001b1bc:	83 ec 0c             	sub    esp,0xc
c001b1bf:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001b1c3:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001b1c8:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001b1cd:	6a 00                	push   0x0
c001b1cf:	56                   	push   esi
c001b1d0:	57                   	push   edi
c001b1d1:	55                   	push   ebp
c001b1d2:	e8 9b fa ff ff       	call   c001ac72 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b1d7:	6a 00                	push   0x0
c001b1d9:	56                   	push   esi
c001b1da:	57                   	push   edi
c001b1db:	55                   	push   ebp
c001b1dc:	e8 07 fe ff ff       	call   c001afe8 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001b1e1:	83 c4 20             	add    esp,0x20
c001b1e4:	6a 00                	push   0x0
c001b1e6:	56                   	push   esi
c001b1e7:	57                   	push   edi
c001b1e8:	55                   	push   ebp
c001b1e9:	e8 a6 fa ff ff       	call   c001ac94 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001b1ee:	83 c4 10             	add    esp,0x10
c001b1f1:	84 c0                	test   al,al
c001b1f3:	79 27                	jns    c001b21c <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001b1f5:	bb 01 00 00 00       	mov    ebx,0x1
c001b1fa:	53                   	push   ebx
c001b1fb:	56                   	push   esi
c001b1fc:	57                   	push   edi
c001b1fd:	55                   	push   ebp
c001b1fe:	e8 6f fa ff ff       	call   c001ac72 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b203:	83 c4 10             	add    esp,0x10
c001b206:	66 40                	inc    ax
c001b208:	74 0c                	je     c001b216 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c001b20a:	53                   	push   ebx
c001b20b:	56                   	push   esi
c001b20c:	57                   	push   edi
c001b20d:	55                   	push   ebp
c001b20e:	e8 d5 fd ff ff       	call   c001afe8 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001b213:	83 c4 10             	add    esp,0x10
c001b216:	43                   	inc    ebx
c001b217:	83 fb 08             	cmp    ebx,0x8
c001b21a:	75 de                	jne    c001b1fa <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001b21c:	83 c4 0c             	add    esp,0xc
c001b21f:	5b                   	pop    ebx
c001b220:	5e                   	pop    esi
c001b221:	5f                   	pop    edi
c001b222:	5d                   	pop    ebp
c001b223:	c3                   	ret    

c001b224 <PCI::detect()>:
c001b224:	56                   	push   esi
c001b225:	53                   	push   ebx
c001b226:	53                   	push   ebx
c001b227:	31 db                	xor    ebx,ebx
c001b229:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b22d:	6a 00                	push   0x0
c001b22f:	6a 00                	push   0x0
c001b231:	6a 00                	push   0x0
c001b233:	56                   	push   esi
c001b234:	e8 5b fa ff ff       	call   c001ac94 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001b239:	83 c4 10             	add    esp,0x10
c001b23c:	a8 80                	test   al,0x80
c001b23e:	75 21                	jne    c001b261 <PCI::detect()+0x3d>
c001b240:	51                   	push   ecx
c001b241:	51                   	push   ecx
c001b242:	6a 00                	push   0x0
c001b244:	56                   	push   esi
c001b245:	e8 0a fc ff ff       	call   c001ae54 <PCI::checkBus(unsigned char)>
c001b24a:	83 c4 10             	add    esp,0x10
c001b24d:	eb 24                	jmp    c001b273 <PCI::detect()+0x4f>
c001b24f:	52                   	push   edx
c001b250:	52                   	push   edx
c001b251:	53                   	push   ebx
c001b252:	43                   	inc    ebx
c001b253:	56                   	push   esi
c001b254:	e8 fb fb ff ff       	call   c001ae54 <PCI::checkBus(unsigned char)>
c001b259:	83 c4 10             	add    esp,0x10
c001b25c:	83 fb 08             	cmp    ebx,0x8
c001b25f:	74 12                	je     c001b273 <PCI::detect()+0x4f>
c001b261:	53                   	push   ebx
c001b262:	6a 00                	push   0x0
c001b264:	6a 00                	push   0x0
c001b266:	56                   	push   esi
c001b267:	e8 06 fa ff ff       	call   c001ac72 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b26c:	83 c4 10             	add    esp,0x10
c001b26f:	66 40                	inc    ax
c001b271:	74 dc                	je     c001b24f <PCI::detect()+0x2b>
c001b273:	58                   	pop    eax
c001b274:	5b                   	pop    ebx
c001b275:	5e                   	pop    esi
c001b276:	c3                   	ret    
c001b277:	90                   	nop

c001b278 <RTC::open(int, int, void*)>:
c001b278:	31 c0                	xor    eax,eax
c001b27a:	c3                   	ret    
c001b27b:	90                   	nop

c001b27c <RTC::close(int, int, void*)>:
c001b27c:	31 c0                	xor    eax,eax
c001b27e:	c3                   	ret    
c001b27f:	90                   	nop

c001b280 <RTC::timeInSecondsUTC()>:
c001b280:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b284:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001b28a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001b290:	c3                   	ret    
c001b291:	90                   	nop

c001b292 <RTC::setTimeInDatetimeUTC(datetime_t)>:
c001b292:	31 c0                	xor    eax,eax
c001b294:	c3                   	ret    
c001b295:	90                   	nop

c001b296 <RTC::timeInDatetimeUTC()>:
c001b296:	53                   	push   ebx
c001b297:	83 ec 14             	sub    esp,0x14
c001b29a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b29e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b2a2:	8b 10                	mov    edx,DWORD PTR [eax]
c001b2a4:	50                   	push   eax
c001b2a5:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001b2a8:	83 c4 0c             	add    esp,0xc
c001b2ab:	52                   	push   edx
c001b2ac:	50                   	push   eax
c001b2ad:	53                   	push   ebx
c001b2ae:	e8 e3 7d ff ff       	call   c0013096 <secondsToDatetime(unsigned long long)>
c001b2b3:	89 d8                	mov    eax,ebx
c001b2b5:	83 c4 14             	add    esp,0x14
c001b2b8:	5b                   	pop    ebx
c001b2b9:	c2 04 00             	ret    0x4

c001b2bc <RTC::setTimeInSecondsUTC(unsigned long long)>:
c001b2bc:	56                   	push   esi
c001b2bd:	53                   	push   ebx
c001b2be:	83 ec 14             	sub    esp,0x14
c001b2c1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b2c5:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b2c7:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c001b2ca:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b2ce:	52                   	push   edx
c001b2cf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b2d3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b2d7:	50                   	push   eax
c001b2d8:	e8 b9 7d ff ff       	call   c0013096 <secondsToDatetime(unsigned long long)>
c001b2dd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b2e1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b2e5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001b2e9:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c001b2ed:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001b2f1:	89 f0                	mov    eax,esi
c001b2f3:	83 c4 20             	add    esp,0x20
c001b2f6:	5b                   	pop    ebx
c001b2f7:	5e                   	pop    esi
c001b2f8:	ff e0                	jmp    eax

c001b2fa <RTC::~RTC()>:
c001b2fa:	83 ec 0c             	sub    esp,0xc
c001b2fd:	ba 4c 1e 02 c0       	mov    edx,0xc0021e4c
c001b302:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b306:	89 10                	mov    DWORD PTR [eax],edx
c001b308:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b30c:	83 ec 0c             	sub    esp,0xc
c001b30f:	50                   	push   eax
c001b310:	e8 0b 7b ff ff       	call   c0012e20 <Clock::~Clock()>
c001b315:	83 c4 10             	add    esp,0x10
c001b318:	90                   	nop
c001b319:	83 c4 0c             	add    esp,0xc
c001b31c:	c3                   	ret    
c001b31d:	90                   	nop

c001b31e <RTC::~RTC()>:
c001b31e:	83 ec 0c             	sub    esp,0xc
c001b321:	83 ec 0c             	sub    esp,0xc
c001b324:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b328:	e8 cd ff ff ff       	call   c001b2fa <RTC::~RTC()>
c001b32d:	83 c4 10             	add    esp,0x10
c001b330:	83 ec 08             	sub    esp,0x8
c001b333:	68 60 01 00 00       	push   0x160
c001b338:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b33c:	e8 46 6d ff ff       	call   c0012087 <operator delete(void*, unsigned long)>
c001b341:	83 c4 10             	add    esp,0x10
c001b344:	83 c4 0c             	add    esp,0xc
c001b347:	c3                   	ret    

c001b348 <RTC::get_update_in_progress_flag()>:
c001b348:	83 ec 14             	sub    esp,0x14
c001b34b:	6a 0a                	push   0xa
c001b34d:	ff 35 c8 30 02 c0    	push   DWORD PTR ds:0xc00230c8
c001b353:	e8 dc fe fe ff       	call   c000b234 <Computer::readCMOS(unsigned char)>
c001b358:	83 c4 1c             	add    esp,0x1c
c001b35b:	c0 e8 07             	shr    al,0x7
c001b35e:	c3                   	ret    
c001b35f:	90                   	nop

c001b360 <RTC::completeRTCRefresh()>:
c001b360:	55                   	push   ebp
c001b361:	57                   	push   edi
c001b362:	56                   	push   esi
c001b363:	53                   	push   ebx
c001b364:	83 ec 2c             	sub    esp,0x2c
c001b367:	8b 35 90 3a 02 c0    	mov    esi,DWORD PTR ds:0xc0023a90
c001b36d:	8b 3d 94 3a 02 c0    	mov    edi,DWORD PTR ds:0xc0023a94
c001b373:	81 c6 00 94 35 77    	add    esi,0x77359400
c001b379:	83 d7 00             	adc    edi,0x0
c001b37c:	83 ec 0c             	sub    esp,0xc
c001b37f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001b383:	e8 c0 ff ff ff       	call   c001b348 <RTC::get_update_in_progress_flag()>
c001b388:	83 c4 10             	add    esp,0x10
c001b38b:	84 c0                	test   al,al
c001b38d:	74 10                	je     c001b39f <RTC::completeRTCRefresh()+0x3f>
c001b38f:	3b 35 90 3a 02 c0    	cmp    esi,DWORD PTR ds:0xc0023a90
c001b395:	89 f8                	mov    eax,edi
c001b397:	1b 05 94 3a 02 c0    	sbb    eax,DWORD PTR ds:0xc0023a94
c001b39d:	73 dd                	jae    c001b37c <RTC::completeRTCRefresh()+0x1c>
c001b39f:	55                   	push   ebp
c001b3a0:	55                   	push   ebp
c001b3a1:	6a 00                	push   0x0
c001b3a3:	ff 35 c8 30 02 c0    	push   DWORD PTR ds:0xc00230c8
c001b3a9:	e8 86 fe fe ff       	call   c000b234 <Computer::readCMOS(unsigned char)>
c001b3ae:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001b3b2:	58                   	pop    eax
c001b3b3:	5a                   	pop    edx
c001b3b4:	6a 02                	push   0x2
c001b3b6:	ff 35 c8 30 02 c0    	push   DWORD PTR ds:0xc00230c8
c001b3bc:	e8 73 fe fe ff       	call   c000b234 <Computer::readCMOS(unsigned char)>
c001b3c1:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c001b3c5:	59                   	pop    ecx
c001b3c6:	5b                   	pop    ebx
c001b3c7:	6a 04                	push   0x4
c001b3c9:	ff 35 c8 30 02 c0    	push   DWORD PTR ds:0xc00230c8
c001b3cf:	e8 60 fe fe ff       	call   c000b234 <Computer::readCMOS(unsigned char)>
c001b3d4:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001b3d8:	5e                   	pop    esi
c001b3d9:	5f                   	pop    edi
c001b3da:	6a 07                	push   0x7
c001b3dc:	ff 35 c8 30 02 c0    	push   DWORD PTR ds:0xc00230c8
c001b3e2:	e8 4d fe fe ff       	call   c000b234 <Computer::readCMOS(unsigned char)>
c001b3e7:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c001b3eb:	5d                   	pop    ebp
c001b3ec:	58                   	pop    eax
c001b3ed:	6a 08                	push   0x8
c001b3ef:	ff 35 c8 30 02 c0    	push   DWORD PTR ds:0xc00230c8
c001b3f5:	e8 3a fe fe ff       	call   c000b234 <Computer::readCMOS(unsigned char)>
c001b3fa:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c001b3fe:	58                   	pop    eax
c001b3ff:	5a                   	pop    edx
c001b400:	6a 09                	push   0x9
c001b402:	ff 35 c8 30 02 c0    	push   DWORD PTR ds:0xc00230c8
c001b408:	e8 27 fe fe ff       	call   c000b234 <Computer::readCMOS(unsigned char)>
c001b40d:	83 c4 10             	add    esp,0x10
c001b410:	0f b6 e8             	movzx  ebp,al
c001b413:	8b 35 90 3a 02 c0    	mov    esi,DWORD PTR ds:0xc0023a90
c001b419:	8b 3d 94 3a 02 c0    	mov    edi,DWORD PTR ds:0xc0023a94
c001b41f:	81 c6 00 94 35 77    	add    esi,0x77359400
c001b425:	83 d7 00             	adc    edi,0x0
c001b428:	83 ec 0c             	sub    esp,0xc
c001b42b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001b42f:	e8 14 ff ff ff       	call   c001b348 <RTC::get_update_in_progress_flag()>
c001b434:	83 c4 10             	add    esp,0x10
c001b437:	84 c0                	test   al,al
c001b439:	74 10                	je     c001b44b <RTC::completeRTCRefresh()+0xeb>
c001b43b:	3b 35 90 3a 02 c0    	cmp    esi,DWORD PTR ds:0xc0023a90
c001b441:	89 f8                	mov    eax,edi
c001b443:	1b 05 94 3a 02 c0    	sbb    eax,DWORD PTR ds:0xc0023a94
c001b449:	73 dd                	jae    c001b428 <RTC::completeRTCRefresh()+0xc8>
c001b44b:	50                   	push   eax
c001b44c:	50                   	push   eax
c001b44d:	6a 00                	push   0x0
c001b44f:	ff 35 c8 30 02 c0    	push   DWORD PTR ds:0xc00230c8
c001b455:	e8 da fd fe ff       	call   c000b234 <Computer::readCMOS(unsigned char)>
c001b45a:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c001b45e:	58                   	pop    eax
c001b45f:	5a                   	pop    edx
c001b460:	6a 02                	push   0x2
c001b462:	ff 35 c8 30 02 c0    	push   DWORD PTR ds:0xc00230c8
c001b468:	e8 c7 fd fe ff       	call   c000b234 <Computer::readCMOS(unsigned char)>
c001b46d:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001b471:	59                   	pop    ecx
c001b472:	5b                   	pop    ebx
c001b473:	6a 04                	push   0x4
c001b475:	ff 35 c8 30 02 c0    	push   DWORD PTR ds:0xc00230c8
c001b47b:	e8 b4 fd fe ff       	call   c000b234 <Computer::readCMOS(unsigned char)>
c001b480:	5e                   	pop    esi
c001b481:	88 c3                	mov    bl,al
c001b483:	5f                   	pop    edi
c001b484:	6a 07                	push   0x7
c001b486:	ff 35 c8 30 02 c0    	push   DWORD PTR ds:0xc00230c8
c001b48c:	e8 a3 fd fe ff       	call   c000b234 <Computer::readCMOS(unsigned char)>
c001b491:	89 c6                	mov    esi,eax
c001b493:	58                   	pop    eax
c001b494:	5a                   	pop    edx
c001b495:	6a 08                	push   0x8
c001b497:	ff 35 c8 30 02 c0    	push   DWORD PTR ds:0xc00230c8
c001b49d:	e8 92 fd fe ff       	call   c000b234 <Computer::readCMOS(unsigned char)>
c001b4a2:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001b4a6:	59                   	pop    ecx
c001b4a7:	5f                   	pop    edi
c001b4a8:	6a 09                	push   0x9
c001b4aa:	ff 35 c8 30 02 c0    	push   DWORD PTR ds:0xc00230c8
c001b4b0:	e8 7f fd fe ff       	call   c000b234 <Computer::readCMOS(unsigned char)>
c001b4b5:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001b4b9:	0f b6 f8             	movzx  edi,al
c001b4bc:	83 c4 10             	add    esp,0x10
c001b4bf:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c001b4c2:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c001b4c6:	38 4c 24 1b          	cmp    BYTE PTR [esp+0x1b],cl
c001b4ca:	89 f1                	mov    ecx,esi
c001b4cc:	0f 94 c0             	sete   al
c001b4cf:	38 54 24 1c          	cmp    BYTE PTR [esp+0x1c],dl
c001b4d3:	0f 94 c2             	sete   dl
c001b4d6:	21 d0                	and    eax,edx
c001b4d8:	38 5c 24 1d          	cmp    BYTE PTR [esp+0x1d],bl
c001b4dc:	0f 94 c2             	sete   dl
c001b4df:	21 c2                	and    edx,eax
c001b4e1:	38 4c 24 1e          	cmp    BYTE PTR [esp+0x1e],cl
c001b4e5:	0f 94 c0             	sete   al
c001b4e8:	21 d0                	and    eax,edx
c001b4ea:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c001b4ee:	38 54 24 1f          	cmp    BYTE PTR [esp+0x1f],dl
c001b4f2:	0f 94 c1             	sete   cl
c001b4f5:	84 c8                	test   al,cl
c001b4f7:	75 28                	jne    c001b521 <RTC::completeRTCRefresh()+0x1c1>
c001b4f9:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001b4fd:	89 fd                	mov    ebp,edi
c001b4ff:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001b503:	88 5c 24 1d          	mov    BYTE PTR [esp+0x1d],bl
c001b507:	89 f0                	mov    eax,esi
c001b509:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c001b50d:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001b511:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001b515:	8a 04 24             	mov    al,BYTE PTR [esp]
c001b518:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001b51c:	e9 f2 fe ff ff       	jmp    c001b413 <RTC::completeRTCRefresh()+0xb3>
c001b521:	39 fd                	cmp    ebp,edi
c001b523:	75 d4                	jne    c001b4f9 <RTC::completeRTCRefresh()+0x199>
c001b525:	55                   	push   ebp
c001b526:	55                   	push   ebp
c001b527:	6a 0b                	push   0xb
c001b529:	ff 35 c8 30 02 c0    	push   DWORD PTR ds:0xc00230c8
c001b52f:	e8 00 fd fe ff       	call   c000b234 <Computer::readCMOS(unsigned char)>
c001b534:	83 c4 10             	add    esp,0x10
c001b537:	89 c5                	mov    ebp,eax
c001b539:	a8 04                	test   al,0x4
c001b53b:	75 75                	jne    c001b5b2 <RTC::completeRTCRefresh()+0x252>
c001b53d:	b1 0a                	mov    cl,0xa
c001b53f:	8a 14 24             	mov    dl,BYTE PTR [esp]
c001b542:	8a 04 24             	mov    al,BYTE PTR [esp]
c001b545:	83 e2 0f             	and    edx,0xf
c001b548:	c0 e8 04             	shr    al,0x4
c001b54b:	c1 ef 04             	shr    edi,0x4
c001b54e:	f6 e1                	mul    cl
c001b550:	6b ff 0a             	imul   edi,edi,0xa
c001b553:	01 d0                	add    eax,edx
c001b555:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c001b559:	88 04 24             	mov    BYTE PTR [esp],al
c001b55c:	83 e2 0f             	and    edx,0xf
c001b55f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001b563:	c0 e8 04             	shr    al,0x4
c001b566:	f6 e1                	mul    cl
c001b568:	01 d0                	add    eax,edx
c001b56a:	88 da                	mov    dl,bl
c001b56c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001b570:	83 e2 0f             	and    edx,0xf
c001b573:	88 d8                	mov    al,bl
c001b575:	83 e3 80             	and    ebx,0xffffff80
c001b578:	c0 e8 04             	shr    al,0x4
c001b57b:	83 e0 07             	and    eax,0x7
c001b57e:	f6 e1                	mul    cl
c001b580:	01 d0                	add    eax,edx
c001b582:	89 f2                	mov    edx,esi
c001b584:	09 c3                	or     ebx,eax
c001b586:	83 e2 0f             	and    edx,0xf
c001b589:	89 f0                	mov    eax,esi
c001b58b:	c0 e8 04             	shr    al,0x4
c001b58e:	f6 e1                	mul    cl
c001b590:	8d 34 02             	lea    esi,[edx+eax*1]
c001b593:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c001b597:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001b59b:	83 e2 0f             	and    edx,0xf
c001b59e:	c0 e8 04             	shr    al,0x4
c001b5a1:	f6 e1                	mul    cl
c001b5a3:	01 d0                	add    eax,edx
c001b5a5:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c001b5a9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b5ad:	83 e0 0f             	and    eax,0xf
c001b5b0:	01 c7                	add    edi,eax
c001b5b2:	83 e5 02             	and    ebp,0x2
c001b5b5:	75 14                	jne    c001b5cb <RTC::completeRTCRefresh()+0x26b>
c001b5b7:	84 db                	test   bl,bl
c001b5b9:	79 10                	jns    c001b5cb <RTC::completeRTCRefresh()+0x26b>
c001b5bb:	83 e3 7f             	and    ebx,0x7f
c001b5be:	b9 18 00 00 00       	mov    ecx,0x18
c001b5c3:	8d 43 0c             	lea    eax,[ebx+0xc]
c001b5c6:	99                   	cdq    
c001b5c7:	f7 f9                	idiv   ecx
c001b5c9:	88 d3                	mov    bl,dl
c001b5cb:	8d af d0 07 00 00    	lea    ebp,[edi+0x7d0]
c001b5d1:	81 fd e3 07 00 00    	cmp    ebp,0x7e3
c001b5d7:	77 06                	ja     c001b5df <RTC::completeRTCRefresh()+0x27f>
c001b5d9:	8d af 34 08 00 00    	lea    ebp,[edi+0x834]
c001b5df:	0f b6 0c 24          	movzx  ecx,BYTE PTR [esp]
c001b5e3:	31 d2                	xor    edx,edx
c001b5e5:	c1 e1 10             	shl    ecx,0x10
c001b5e8:	89 d7                	mov    edi,edx
c001b5ea:	c1 e5 10             	shl    ebp,0x10
c001b5ed:	31 c0                	xor    eax,eax
c001b5ef:	81 e7 ff ff 00 ff    	and    edi,0xff00ffff
c001b5f5:	09 cf                	or     edi,ecx
c001b5f7:	89 f1                	mov    ecx,esi
c001b5f9:	89 fa                	mov    edx,edi
c001b5fb:	88 c8                	mov    al,cl
c001b5fd:	8a 74 24 0c          	mov    dh,BYTE PTR [esp+0xc]
c001b601:	8a 64 24 10          	mov    ah,BYTE PTR [esp+0x10]
c001b605:	88 da                	mov    dl,bl
c001b607:	0f b7 c8             	movzx  ecx,ax
c001b60a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b60e:	09 e9                	or     ecx,ebp
c001b610:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001b613:	0f b6 db             	movzx  ebx,bl
c001b616:	50                   	push   eax
c001b617:	50                   	push   eax
c001b618:	53                   	push   ebx
c001b619:	68 18 1e 02 c0       	push   0xc0021e18
c001b61e:	e8 a5 14 ff ff       	call   c000cac8 <kprintf(char const*, ...)>
c001b623:	5a                   	pop    edx
c001b624:	59                   	pop    ecx
c001b625:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b629:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b62d:	52                   	push   edx
c001b62e:	50                   	push   eax
c001b62f:	e8 db 78 ff ff       	call   c0012f0f <datetimeToSeconds(datetime_t)>
c001b634:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001b638:	89 83 58 01 00 00    	mov    DWORD PTR [ebx+0x158],eax
c001b63e:	89 93 5c 01 00 00    	mov    DWORD PTR [ebx+0x15c],edx
c001b644:	83 c4 3c             	add    esp,0x3c
c001b647:	5b                   	pop    ebx
c001b648:	5e                   	pop    esi
c001b649:	5f                   	pop    edi
c001b64a:	5d                   	pop    ebp
c001b64b:	c3                   	ret    

c001b64c <rtcIRQHandler(regs*, void*)>:
c001b64c:	53                   	push   ebx
c001b64d:	83 ec 10             	sub    esp,0x10
c001b650:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b654:	6a 0c                	push   0xc
c001b656:	ff 35 c8 30 02 c0    	push   DWORD PTR ds:0xc00230c8
c001b65c:	e8 d3 fb fe ff       	call   c000b234 <Computer::readCMOS(unsigned char)>
c001b661:	83 c4 10             	add    esp,0x10
c001b664:	84 c0                	test   al,al
c001b666:	79 24                	jns    c001b68c <rtcIRQHandler(regs*, void*)+0x40>
c001b668:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c001b66f:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c001b676:	66 ff 05 a0 47 02 c0 	inc    WORD PTR ds:0xc00247a0
c001b67d:	75 0d                	jne    c001b68c <rtcIRQHandler(regs*, void*)+0x40>
c001b67f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001b683:	83 c4 08             	add    esp,0x8
c001b686:	5b                   	pop    ebx
c001b687:	e9 d4 fc ff ff       	jmp    c001b360 <RTC::completeRTCRefresh()>
c001b68c:	83 c4 08             	add    esp,0x8
c001b68f:	5b                   	pop    ebx
c001b690:	c3                   	ret    
c001b691:	90                   	nop

c001b692 <RTC::RTC()>:
c001b692:	83 ec 1c             	sub    esp,0x1c
c001b695:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b699:	83 ec 08             	sub    esp,0x8
c001b69c:	68 2e 1e 02 c0       	push   0xc0021e2e
c001b6a1:	50                   	push   eax
c001b6a2:	e8 43 77 ff ff       	call   c0012dea <Clock::Clock(char const*)>
c001b6a7:	83 c4 10             	add    esp,0x10
c001b6aa:	ba 4c 1e 02 c0       	mov    edx,0xc0021e4c
c001b6af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b6b3:	89 10                	mov    DWORD PTR [eax],edx
c001b6b5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b6b9:	83 ec 0c             	sub    esp,0xc
c001b6bc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b6c0:	6a 01                	push   0x1
c001b6c2:	68 4c b6 01 c0       	push   0xc001b64c
c001b6c7:	6a 08                	push   0x8
c001b6c9:	50                   	push   eax
c001b6ca:	e8 07 7c ff ff       	call   c00132d6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b6cf:	83 c4 20             	add    esp,0x20
c001b6d2:	89 c2                	mov    edx,eax
c001b6d4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b6d8:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001b6de:	e8 6a 28 ff ff       	call   c000df4d <disableIRQs()>
c001b6e3:	a1 c8 30 02 c0       	mov    eax,ds:0xc00230c8
c001b6e8:	83 ec 08             	sub    esp,0x8
c001b6eb:	6a 0b                	push   0xb
c001b6ed:	50                   	push   eax
c001b6ee:	e8 41 fb fe ff       	call   c000b234 <Computer::readCMOS(unsigned char)>
c001b6f3:	83 c4 10             	add    esp,0x10
c001b6f6:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001b6fa:	a1 c8 30 02 c0       	mov    eax,ds:0xc00230c8
c001b6ff:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001b703:	83 ca 10             	or     edx,0x10
c001b706:	0f b6 d2             	movzx  edx,dl
c001b709:	83 ec 04             	sub    esp,0x4
c001b70c:	52                   	push   edx
c001b70d:	6a 0b                	push   0xb
c001b70f:	50                   	push   eax
c001b710:	e8 27 fc fe ff       	call   c000b33c <Computer::writeCMOS(unsigned char, unsigned char)>
c001b715:	83 c4 10             	add    esp,0x10
c001b718:	83 ec 0c             	sub    esp,0xc
c001b71b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b71f:	e8 3c fc ff ff       	call   c001b360 <RTC::completeRTCRefresh()>
c001b724:	83 c4 10             	add    esp,0x10
c001b727:	e8 2f 28 ff ff       	call   c000df5b <enableIRQs()>
c001b72c:	90                   	nop
c001b72d:	83 c4 1c             	add    esp,0x1c
c001b730:	c3                   	ret    
c001b731:	90                   	nop

c001b732 <IDE::close(int, int, void*)>:
c001b732:	83 c8 ff             	or     eax,0xffffffff
c001b735:	c3                   	ret    

c001b736 <IDE::IDE()>:
c001b736:	83 ec 0c             	sub    esp,0xc
c001b739:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b73d:	83 ec 08             	sub    esp,0x8
c001b740:	68 80 1e 02 c0       	push   0xc0021e80
c001b745:	50                   	push   eax
c001b746:	e8 b9 7f ff ff       	call   c0013704 <HardDiskController::HardDiskController(char const*)>
c001b74b:	83 c4 10             	add    esp,0x10
c001b74e:	ba c0 20 02 c0       	mov    edx,0xc00220c0
c001b753:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b757:	89 10                	mov    DWORD PTR [eax],edx
c001b759:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b75d:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001b764:	90                   	nop
c001b765:	83 c4 0c             	add    esp,0xc
c001b768:	c3                   	ret    
c001b769:	90                   	nop

c001b76a <IDE::prepareInterrupt(unsigned char)>:
c001b76a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b76f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001b773:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001b77b:	c3                   	ret    

c001b77c <selectDrive(unsigned char, unsigned char)>:
c001b77c:	c3                   	ret    
c001b77d:	90                   	nop

c001b77e <IDE::getBase(unsigned char)>:
c001b77e:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001b783:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b787:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001b78f:	c3                   	ret    

c001b790 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001b790:	55                   	push   ebp
c001b791:	57                   	push   edi
c001b792:	56                   	push   esi
c001b793:	53                   	push   ebx
c001b794:	83 ec 1c             	sub    esp,0x1c
c001b797:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001b79b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001b79f:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001b7a2:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001b7a6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001b7aa:	80 f9 03             	cmp    cl,0x3
c001b7ad:	77 51                	ja     c001b800 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c001b7af:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b7b3:	0f b6 f2             	movzx  esi,dl
c001b7b6:	0f b6 db             	movzx  ebx,bl
c001b7b9:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001b7bc:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c001b7c0:	83 ca 80             	or     edx,0xffffff80
c001b7c3:	0f b6 d2             	movzx  edx,dl
c001b7c6:	52                   	push   edx
c001b7c7:	6a 0c                	push   0xc
c001b7c9:	56                   	push   esi
c001b7ca:	57                   	push   edi
c001b7cb:	e8 c0 ff ff ff       	call   c001b790 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b7d0:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001b7d5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b7d9:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001b7dd:	ee                   	out    dx,al
c001b7de:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001b7e3:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001b7e7:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001b7eb:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001b7ef:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001b7f7:	83 c4 2c             	add    esp,0x2c
c001b7fa:	5b                   	pop    ebx
c001b7fb:	5e                   	pop    esi
c001b7fc:	5f                   	pop    edi
c001b7fd:	5d                   	pop    ebp
c001b7fe:	eb 90                	jmp    c001b790 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b800:	80 fb 07             	cmp    bl,0x7
c001b803:	77 12                	ja     c001b817 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c001b805:	0f b6 d2             	movzx  edx,dl
c001b808:	0f b6 db             	movzx  ebx,bl
c001b80b:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c001b813:	89 da                	mov    edx,ebx
c001b815:	eb 2f                	jmp    c001b846 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001b817:	80 fb 0d             	cmp    bl,0xd
c001b81a:	77 13                	ja     c001b82f <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c001b81c:	0f b6 d2             	movzx  edx,dl
c001b81f:	0f b6 db             	movzx  ebx,bl
c001b822:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001b829:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001b82d:	eb 17                	jmp    c001b846 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001b82f:	80 fb 15             	cmp    bl,0x15
c001b832:	77 13                	ja     c001b847 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001b834:	0f b6 d2             	movzx  edx,dl
c001b837:	0f b6 db             	movzx  ebx,bl
c001b83a:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001b842:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001b846:	ee                   	out    dx,al
c001b847:	83 c4 1c             	add    esp,0x1c
c001b84a:	5b                   	pop    ebx
c001b84b:	5e                   	pop    esi
c001b84c:	5f                   	pop    edi
c001b84d:	5d                   	pop    ebp
c001b84e:	c3                   	ret    
c001b84f:	90                   	nop

c001b850 <IDE::read(unsigned char, unsigned char)>:
c001b850:	55                   	push   ebp
c001b851:	57                   	push   edi
c001b852:	56                   	push   esi
c001b853:	53                   	push   ebx
c001b854:	83 ec 1c             	sub    esp,0x1c
c001b857:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001b85b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001b85f:	8d 43 f8             	lea    eax,[ebx-0x8]
c001b862:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001b866:	3c 03                	cmp    al,0x3
c001b868:	77 43                	ja     c001b8ad <IDE::read(unsigned char, unsigned char)+0x5d>
c001b86a:	0f b6 f2             	movzx  esi,dl
c001b86d:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001b870:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c001b874:	83 c8 80             	or     eax,0xffffff80
c001b877:	0f b6 c0             	movzx  eax,al
c001b87a:	50                   	push   eax
c001b87b:	6a 0c                	push   0xc
c001b87d:	56                   	push   esi
c001b87e:	57                   	push   edi
c001b87f:	e8 0c ff ff ff       	call   c001b790 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b884:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c001b889:	0f b6 c3             	movzx  eax,bl
c001b88c:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c001b890:	ec                   	in     al,dx
c001b891:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001b895:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001b89a:	52                   	push   edx
c001b89b:	6a 0c                	push   0xc
c001b89d:	56                   	push   esi
c001b89e:	57                   	push   edi
c001b89f:	e8 ec fe ff ff       	call   c001b790 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b8a4:	83 c4 20             	add    esp,0x20
c001b8a7:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001b8ab:	eb 49                	jmp    c001b8f6 <IDE::read(unsigned char, unsigned char)+0xa6>
c001b8ad:	80 fb 07             	cmp    bl,0x7
c001b8b0:	77 12                	ja     c001b8c4 <IDE::read(unsigned char, unsigned char)+0x74>
c001b8b2:	0f b6 d2             	movzx  edx,dl
c001b8b5:	0f b6 c3             	movzx  eax,bl
c001b8b8:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c001b8c0:	89 c2                	mov    edx,eax
c001b8c2:	eb 31                	jmp    c001b8f5 <IDE::read(unsigned char, unsigned char)+0xa5>
c001b8c4:	80 fb 0d             	cmp    bl,0xd
c001b8c7:	77 13                	ja     c001b8dc <IDE::read(unsigned char, unsigned char)+0x8c>
c001b8c9:	0f b6 d2             	movzx  edx,dl
c001b8cc:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c001b8d3:	0f b6 d3             	movzx  edx,bl
c001b8d6:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001b8da:	eb 19                	jmp    c001b8f5 <IDE::read(unsigned char, unsigned char)+0xa5>
c001b8dc:	31 c0                	xor    eax,eax
c001b8de:	80 fb 15             	cmp    bl,0x15
c001b8e1:	77 13                	ja     c001b8f6 <IDE::read(unsigned char, unsigned char)+0xa6>
c001b8e3:	0f b6 d2             	movzx  edx,dl
c001b8e6:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c001b8ee:	0f b6 d3             	movzx  edx,bl
c001b8f1:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001b8f5:	ec                   	in     al,dx
c001b8f6:	83 c4 1c             	add    esp,0x1c
c001b8f9:	5b                   	pop    ebx
c001b8fa:	5e                   	pop    esi
c001b8fb:	5f                   	pop    edi
c001b8fc:	5d                   	pop    ebp
c001b8fd:	c3                   	ret    

c001b8fe <IDE::waitInterrupt(unsigned char)>:
c001b8fe:	55                   	push   ebp
c001b8ff:	57                   	push   edi
c001b900:	56                   	push   esi
c001b901:	53                   	push   ebx
c001b902:	31 db                	xor    ebx,ebx
c001b904:	83 ec 0c             	sub    esp,0xc
c001b907:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b90b:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001b910:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001b918:	89 e8                	mov    eax,ebp
c001b91a:	84 c0                	test   al,al
c001b91c:	75 34                	jne    c001b952 <IDE::waitInterrupt(unsigned char)+0x54>
c001b91e:	52                   	push   edx
c001b91f:	6a 0c                	push   0xc
c001b921:	56                   	push   esi
c001b922:	57                   	push   edi
c001b923:	e8 28 ff ff ff       	call   c001b850 <IDE::read(unsigned char, unsigned char)>
c001b928:	83 c4 10             	add    esp,0x10
c001b92b:	a8 01                	test   al,0x1
c001b92d:	75 2b                	jne    c001b95a <IDE::waitInterrupt(unsigned char)+0x5c>
c001b92f:	f6 c3 04             	test   bl,0x4
c001b932:	75 16                	jne    c001b94a <IDE::waitInterrupt(unsigned char)+0x4c>
c001b934:	83 fb 32             	cmp    ebx,0x32
c001b937:	7e 11                	jle    c001b94a <IDE::waitInterrupt(unsigned char)+0x4c>
c001b939:	50                   	push   eax
c001b93a:	50                   	push   eax
c001b93b:	6a 00                	push   0x0
c001b93d:	68 80 96 98 00       	push   0x989680
c001b942:	e8 dc 2c ff ff       	call   c000e623 <nanoSleep(unsigned long long)>
c001b947:	83 c4 10             	add    esp,0x10
c001b94a:	83 fb 3c             	cmp    ebx,0x3c
c001b94d:	74 0b                	je     c001b95a <IDE::waitInterrupt(unsigned char)+0x5c>
c001b94f:	43                   	inc    ebx
c001b950:	eb be                	jmp    c001b910 <IDE::waitInterrupt(unsigned char)+0x12>
c001b952:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001b95a:	83 c4 0c             	add    esp,0xc
c001b95d:	89 e8                	mov    eax,ebp
c001b95f:	5b                   	pop    ebx
c001b960:	5e                   	pop    esi
c001b961:	5f                   	pop    edi
c001b962:	5d                   	pop    ebp
c001b963:	c3                   	ret    

c001b964 <ideChannel0IRQHandler(regs*, void*)>:
c001b964:	83 ec 10             	sub    esp,0x10
c001b967:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b96b:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001b972:	6a 07                	push   0x7
c001b974:	6a 00                	push   0x0
c001b976:	50                   	push   eax
c001b977:	e8 d4 fe ff ff       	call   c001b850 <IDE::read(unsigned char, unsigned char)>
c001b97c:	83 c4 1c             	add    esp,0x1c
c001b97f:	c3                   	ret    

c001b980 <ideChannel1IRQHandler(regs*, void*)>:
c001b980:	83 ec 10             	sub    esp,0x10
c001b983:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b987:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001b98e:	6a 07                	push   0x7
c001b990:	6a 01                	push   0x1
c001b992:	50                   	push   eax
c001b993:	e8 b8 fe ff ff       	call   c001b850 <IDE::read(unsigned char, unsigned char)>
c001b998:	83 c4 1c             	add    esp,0x1c
c001b99b:	c3                   	ret    

c001b99c <IDE::enableIRQs(unsigned char, bool)>:
c001b99c:	57                   	push   edi
c001b99d:	56                   	push   esi
c001b99e:	be 04 00 00 00       	mov    esi,0x4
c001b9a3:	53                   	push   ebx
c001b9a4:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001b9a9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b9ad:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c001b9b2:	0f 94 c0             	sete   al
c001b9b5:	d1 e0                	shl    eax,1
c001b9b7:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c001b9be:	0f b6 c0             	movzx  eax,al
c001b9c1:	50                   	push   eax
c001b9c2:	6a 0c                	push   0xc
c001b9c4:	57                   	push   edi
c001b9c5:	53                   	push   ebx
c001b9c6:	e8 c5 fd ff ff       	call   c001b790 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b9cb:	83 c4 10             	add    esp,0x10
c001b9ce:	50                   	push   eax
c001b9cf:	6a 0c                	push   0xc
c001b9d1:	57                   	push   edi
c001b9d2:	53                   	push   ebx
c001b9d3:	e8 78 fe ff ff       	call   c001b850 <IDE::read(unsigned char, unsigned char)>
c001b9d8:	83 c4 10             	add    esp,0x10
c001b9db:	4e                   	dec    esi
c001b9dc:	75 f0                	jne    c001b9ce <IDE::enableIRQs(unsigned char, bool)+0x32>
c001b9de:	5b                   	pop    ebx
c001b9df:	5e                   	pop    esi
c001b9e0:	5f                   	pop    edi
c001b9e1:	c3                   	ret    

c001b9e2 <IDE::open(int, int, void*)>:
c001b9e2:	55                   	push   ebp
c001b9e3:	57                   	push   edi
c001b9e4:	56                   	push   esi
c001b9e5:	53                   	push   ebx
c001b9e6:	83 ec 1c             	sub    esp,0x1c
c001b9e9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001b9ed:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001b9f6:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001b9ff:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001ba06:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001ba0d:	0f 85 b0 02 00 00    	jne    c001bcc3 <IDE::open(int, int, void*)+0x2e1>
c001ba13:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001ba19:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c001ba1d:	83 e0 7f             	and    eax,0x7f
c001ba20:	3c 05                	cmp    al,0x5
c001ba22:	74 04                	je     c001ba28 <IDE::open(int, int, void*)+0x46>
c001ba24:	3c 0f                	cmp    al,0xf
c001ba26:	75 32                	jne    c001ba5a <IDE::open(int, int, void*)+0x78>
c001ba28:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001ba2e:	83 e0 fc             	and    eax,0xfffffffc
c001ba31:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001ba38:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001ba3e:	83 e0 fc             	and    eax,0xfffffffc
c001ba41:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001ba48:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001ba4e:	83 e0 fc             	and    eax,0xfffffffc
c001ba51:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001ba58:	eb 14                	jmp    c001ba6e <IDE::open(int, int, void*)+0x8c>
c001ba5a:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001ba64:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001ba6e:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001ba75:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001ba7c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ba80:	89 c6                	mov    esi,eax
c001ba82:	bf f8 0c 00 00       	mov    edi,0xcf8
c001ba87:	c1 e6 10             	shl    esi,0x10
c001ba8a:	89 e8                	mov    eax,ebp
c001ba8c:	89 fa                	mov    edx,edi
c001ba8e:	c1 e0 0b             	shl    eax,0xb
c001ba91:	09 f0                	or     eax,esi
c001ba93:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c001ba9a:	c1 e6 08             	shl    esi,0x8
c001ba9d:	09 c6                	or     esi,eax
c001ba9f:	89 f0                	mov    eax,esi
c001baa1:	0d 08 00 00 80       	or     eax,0x80000008
c001baa6:	ef                   	out    dx,eax
c001baa7:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001baac:	89 ca                	mov    edx,ecx
c001baae:	ed                   	in     eax,dx
c001baaf:	c1 e8 10             	shr    eax,0x10
c001bab2:	3d ff ff 00 00       	cmp    eax,0xffff
c001bab7:	0f 84 f5 00 00 00    	je     c001bbb2 <IDE::open(int, int, void*)+0x1d0>
c001babd:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001bac3:	89 fa                	mov    edx,edi
c001bac5:	89 f0                	mov    eax,esi
c001bac7:	ef                   	out    dx,eax
c001bac8:	b0 fe                	mov    al,0xfe
c001baca:	89 ca                	mov    edx,ecx
c001bacc:	ee                   	out    dx,al
c001bacd:	89 f0                	mov    eax,esi
c001bacf:	89 fa                	mov    edx,edi
c001bad1:	ef                   	out    dx,eax
c001bad2:	89 ca                	mov    edx,ecx
c001bad4:	ed                   	in     eax,dx
c001bad5:	3c fe                	cmp    al,0xfe
c001bad7:	0f 85 a9 00 00 00    	jne    c001bb86 <IDE::open(int, int, void*)+0x1a4>
c001badd:	8b 15 c8 30 02 c0    	mov    edx,DWORD PTR ds:0xc00230c8
c001bae3:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c001baea:	74 33                	je     c001bb1f <IDE::open(int, int, void*)+0x13d>
c001baec:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001baf2:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001baf6:	40                   	inc    eax
c001baf7:	83 ec 0c             	sub    esp,0xc
c001bafa:	0f b6 c0             	movzx  eax,al
c001bafd:	50                   	push   eax
c001bafe:	55                   	push   ebp
c001baff:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001bb03:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c001bb09:	51                   	push   ecx
c001bb0a:	e8 07 a9 ff ff       	call   c0016416 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001bb0f:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001bb14:	83 c4 1c             	add    esp,0x1c
c001bb17:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001bb1d:	eb 0a                	jmp    c001bb29 <IDE::open(int, int, void*)+0x147>
c001bb1f:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001bb29:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001bb30:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001bb37:	c1 e1 10             	shl    ecx,0x10
c001bb3a:	c1 e0 08             	shl    eax,0x8
c001bb3d:	bf f8 0c 00 00       	mov    edi,0xcf8
c001bb42:	09 c1                	or     ecx,eax
c001bb44:	89 fa                	mov    edx,edi
c001bb46:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001bb4d:	c1 e0 0b             	shl    eax,0xb
c001bb50:	09 c1                	or     ecx,eax
c001bb52:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001bb58:	89 c8                	mov    eax,ecx
c001bb5a:	ef                   	out    dx,eax
c001bb5b:	be fc 0c 00 00       	mov    esi,0xcfc
c001bb60:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001bb66:	89 f2                	mov    edx,esi
c001bb68:	ee                   	out    dx,al
c001bb69:	89 c8                	mov    eax,ecx
c001bb6b:	89 fa                	mov    edx,edi
c001bb6d:	ef                   	out    dx,eax
c001bb6e:	89 f2                	mov    edx,esi
c001bb70:	ed                   	in     eax,dx
c001bb71:	0f b6 c0             	movzx  eax,al
c001bb74:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001bb7a:	74 46                	je     c001bbc2 <IDE::open(int, int, void*)+0x1e0>
c001bb7c:	83 ec 0c             	sub    esp,0xc
c001bb7f:	68 98 1e 02 c0       	push   0xc0021e98
c001bb84:	eb 34                	jmp    c001bbba <IDE::open(int, int, void*)+0x1d8>
c001bb86:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001bb8f:	75 17                	jne    c001bba8 <IDE::open(int, int, void*)+0x1c6>
c001bb91:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c001bb96:	74 07                	je     c001bb9f <IDE::open(int, int, void*)+0x1bd>
c001bb98:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c001bb9d:	75 09                	jne    c001bba8 <IDE::open(int, int, void*)+0x1c6>
c001bb9f:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001bba6:	eb 1a                	jmp    c001bbc2 <IDE::open(int, int, void*)+0x1e0>
c001bba8:	83 ec 0c             	sub    esp,0xc
c001bbab:	68 a0 1e 02 c0       	push   0xc0021ea0
c001bbb0:	eb 08                	jmp    c001bbba <IDE::open(int, int, void*)+0x1d8>
c001bbb2:	83 ec 0c             	sub    esp,0xc
c001bbb5:	68 d1 1e 02 c0       	push   0xc0021ed1
c001bbba:	e8 27 10 ff ff       	call   c000cbe6 <panic(char const*)>
c001bbbf:	83 c4 10             	add    esp,0x10
c001bbc2:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c001bbc9:	79 1a                	jns    c001bbe5 <IDE::open(int, int, void*)+0x203>
c001bbcb:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001bbd1:	83 e0 fc             	and    eax,0xfffffffc
c001bbd4:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001bbdb:	83 c0 08             	add    eax,0x8
c001bbde:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001bbe5:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001bbeb:	89 c2                	mov    edx,eax
c001bbed:	83 e2 0f             	and    edx,0xf
c001bbf0:	66 83 fa 08          	cmp    dx,0x8
c001bbf4:	75 0a                	jne    c001bc00 <IDE::open(int, int, void*)+0x21e>
c001bbf6:	83 e8 02             	sub    eax,0x2
c001bbf9:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001bc00:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001bc06:	89 c2                	mov    edx,eax
c001bc08:	83 e2 0f             	and    edx,0xf
c001bc0b:	66 83 fa 08          	cmp    dx,0x8
c001bc0f:	75 0a                	jne    c001bc1b <IDE::open(int, int, void*)+0x239>
c001bc11:	83 e8 02             	sub    eax,0x2
c001bc14:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001bc1b:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001bc22:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001bc29:	89 d0                	mov    eax,edx
c001bc2b:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001bc2e:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001bc32:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001bc36:	8d 4a 01             	lea    ecx,[edx+0x1]
c001bc39:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001bc3e:	0f b6 c9             	movzx  ecx,cl
c001bc41:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001bc48:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001bc4b:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001bc4f:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001bc53:	8d 50 02             	lea    edx,[eax+0x2]
c001bc56:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001bc5b:	0f b6 d2             	movzx  edx,dl
c001bc5e:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001bc64:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001bc67:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001bc6b:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001bc6f:	8d 48 03             	lea    ecx,[eax+0x3]
c001bc72:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001bc77:	0f b6 c9             	movzx  ecx,cl
c001bc7a:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001bc80:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001bc83:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001bc87:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001bc8b:	8d 50 04             	lea    edx,[eax+0x4]
c001bc8e:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001bc94:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001bc99:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001bca0:	66 85 f6             	test   si,si
c001bca3:	74 3e                	je     c001bce3 <IDE::open(int, int, void*)+0x301>
c001bca5:	0f b6 d2             	movzx  edx,dl
c001bca8:	83 c0 05             	add    eax,0x5
c001bcab:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001bcae:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001bcb2:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001bcb6:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001bcbc:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001bcc1:	eb 20                	jmp    c001bce3 <IDE::open(int, int, void*)+0x301>
c001bcc3:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001bccd:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001bcd7:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001bcde:	e9 02 ff ff ff       	jmp    c001bbe5 <IDE::open(int, int, void*)+0x203>
c001bce3:	52                   	push   edx
c001bce4:	52                   	push   edx
c001bce5:	6a 00                	push   0x0
c001bce7:	53                   	push   ebx
c001bce8:	e8 7d fa ff ff       	call   c001b76a <IDE::prepareInterrupt(unsigned char)>
c001bced:	59                   	pop    ecx
c001bcee:	5e                   	pop    esi
c001bcef:	6a 01                	push   0x1
c001bcf1:	53                   	push   ebx
c001bcf2:	e8 73 fa ff ff       	call   c001b76a <IDE::prepareInterrupt(unsigned char)>
c001bcf7:	83 c4 0c             	add    esp,0xc
c001bcfa:	6a 00                	push   0x0
c001bcfc:	6a 00                	push   0x0
c001bcfe:	53                   	push   ebx
c001bcff:	e8 98 fc ff ff       	call   c001b99c <IDE::enableIRQs(unsigned char, bool)>
c001bd04:	83 c4 0c             	add    esp,0xc
c001bd07:	6a 00                	push   0x0
c001bd09:	6a 01                	push   0x1
c001bd0b:	53                   	push   ebx
c001bd0c:	e8 8b fc ff ff       	call   c001b99c <IDE::enableIRQs(unsigned char, bool)>
c001bd11:	83 c4 10             	add    esp,0x10
c001bd14:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001bd1b:	74 40                	je     c001bd5d <IDE::open(int, int, void*)+0x37b>
c001bd1d:	83 ec 0c             	sub    esp,0xc
c001bd20:	68 fb 1e 02 c0       	push   0xc0021efb
c001bd25:	e8 9e 0d ff ff       	call   c000cac8 <kprintf(char const*, ...)>
c001bd2a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bd2d:	6a 01                	push   0x1
c001bd2f:	68 64 b9 01 c0       	push   0xc001b964
c001bd34:	6a 0e                	push   0xe
c001bd36:	53                   	push   ebx
c001bd37:	e8 9a 75 ff ff       	call   c00132d6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001bd3c:	83 c4 14             	add    esp,0x14
c001bd3f:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001bd45:	53                   	push   ebx
c001bd46:	6a 01                	push   0x1
c001bd48:	68 80 b9 01 c0       	push   0xc001b980
c001bd4d:	6a 0f                	push   0xf
c001bd4f:	53                   	push   ebx
c001bd50:	e8 81 75 ff ff       	call   c00132d6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001bd55:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001bd5b:	eb 4a                	jmp    c001bda7 <IDE::open(int, int, void*)+0x3c5>
c001bd5d:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001bd67:	50                   	push   eax
c001bd68:	6a 0f                	push   0xf
c001bd6a:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001bd70:	68 17 1f 02 c0       	push   0xc0021f17
c001bd75:	e8 4e 0d ff ff       	call   c000cac8 <kprintf(char const*, ...)>
c001bd7a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bd7d:	6a 00                	push   0x0
c001bd7f:	68 64 b9 01 c0       	push   0xc001b964
c001bd84:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001bd8a:	53                   	push   ebx
c001bd8b:	e8 46 75 ff ff       	call   c00132d6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001bd90:	83 c4 14             	add    esp,0x14
c001bd93:	53                   	push   ebx
c001bd94:	6a 00                	push   0x0
c001bd96:	68 80 b9 01 c0       	push   0xc001b980
c001bd9b:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001bda1:	53                   	push   ebx
c001bda2:	e8 2f 75 ff ff       	call   c00132d6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001bda7:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bda9:	83 c4 20             	add    esp,0x20
c001bdac:	83 ec 0c             	sub    esp,0xc
c001bdaf:	53                   	push   ebx
c001bdb0:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001bdb3:	83 c4 0c             	add    esp,0xc
c001bdb6:	6a 07                	push   0x7
c001bdb8:	6a 00                	push   0x0
c001bdba:	53                   	push   ebx
c001bdbb:	e8 90 fa ff ff       	call   c001b850 <IDE::read(unsigned char, unsigned char)>
c001bdc0:	83 c4 0c             	add    esp,0xc
c001bdc3:	6a 07                	push   0x7
c001bdc5:	6a 01                	push   0x1
c001bdc7:	53                   	push   ebx
c001bdc8:	e8 83 fa ff ff       	call   c001b850 <IDE::read(unsigned char, unsigned char)>
c001bdcd:	83 c4 0c             	add    esp,0xc
c001bdd0:	6a 01                	push   0x1
c001bdd2:	6a 00                	push   0x0
c001bdd4:	53                   	push   ebx
c001bdd5:	e8 c2 fb ff ff       	call   c001b99c <IDE::enableIRQs(unsigned char, bool)>
c001bdda:	83 c4 0c             	add    esp,0xc
c001bddd:	6a 01                	push   0x1
c001bddf:	6a 01                	push   0x1
c001bde1:	53                   	push   ebx
c001bde2:	e8 b5 fb ff ff       	call   c001b99c <IDE::enableIRQs(unsigned char, bool)>
c001bde7:	83 c4 2c             	add    esp,0x2c
c001bdea:	31 c0                	xor    eax,eax
c001bdec:	5b                   	pop    ebx
c001bded:	5e                   	pop    esi
c001bdee:	5f                   	pop    edi
c001bdef:	5d                   	pop    ebp
c001bdf0:	c3                   	ret    
c001bdf1:	90                   	nop

c001bdf2 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001bdf2:	55                   	push   ebp
c001bdf3:	57                   	push   edi
c001bdf4:	56                   	push   esi
c001bdf5:	53                   	push   ebx
c001bdf6:	83 ec 1c             	sub    esp,0x1c
c001bdf9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001bdfd:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001be01:	8d 50 f8             	lea    edx,[eax-0x8]
c001be04:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001be08:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001be0c:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001be10:	80 fa 03             	cmp    dl,0x3
c001be13:	77 5d                	ja     c001be72 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c001be15:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001be19:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001be1d:	0f b6 db             	movzx  ebx,bl
c001be20:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001be23:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c001be27:	83 ca 80             	or     edx,0xffffff80
c001be2a:	0f b6 d2             	movzx  edx,dl
c001be2d:	52                   	push   edx
c001be2e:	6a 0c                	push   0xc
c001be30:	53                   	push   ebx
c001be31:	56                   	push   esi
c001be32:	e8 59 f9 ff ff       	call   c001b790 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001be37:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001be3c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001be40:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001be44:	0f b6 c0             	movzx  eax,al
c001be47:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c001be4b:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001be4d:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001be52:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001be56:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001be5a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001be5e:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001be66:	83 c4 2c             	add    esp,0x2c
c001be69:	5b                   	pop    ebx
c001be6a:	5e                   	pop    esi
c001be6b:	5f                   	pop    edi
c001be6c:	5d                   	pop    ebp
c001be6d:	e9 1e f9 ff ff       	jmp    c001b790 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001be72:	3c 07                	cmp    al,0x7
c001be74:	77 10                	ja     c001be86 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c001be76:	0f b6 db             	movzx  ebx,bl
c001be79:	0f b6 d0             	movzx  edx,al
c001be7c:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c001be84:	eb 2d                	jmp    c001beb3 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001be86:	3c 0d                	cmp    al,0xd
c001be88:	77 13                	ja     c001be9d <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c001be8a:	0f b6 db             	movzx  ebx,bl
c001be8d:	0f b6 c0             	movzx  eax,al
c001be90:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c001be97:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c001be9b:	eb 16                	jmp    c001beb3 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001be9d:	3c 15                	cmp    al,0x15
c001be9f:	77 14                	ja     c001beb5 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c001bea1:	0f b6 db             	movzx  ebx,bl
c001bea4:	0f b6 c0             	movzx  eax,al
c001bea7:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c001beaf:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c001beb3:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001beb5:	83 c4 1c             	add    esp,0x1c
c001beb8:	5b                   	pop    ebx
c001beb9:	5e                   	pop    esi
c001beba:	5f                   	pop    edi
c001bebb:	5d                   	pop    ebp
c001bebc:	c3                   	ret    
c001bebd:	90                   	nop

c001bebe <IDE::detect()>:
c001bebe:	55                   	push   ebp
c001bebf:	57                   	push   edi
c001bec0:	56                   	push   esi
c001bec1:	53                   	push   ebx
c001bec2:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001bec8:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001becf:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001bed6:	0f 85 be 02 00 00    	jne    c001c19a <IDE::detect()+0x2dc>
c001bedc:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001bee3:	31 f6                	xor    esi,esi
c001bee5:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001beed:	31 ed                	xor    ebp,ebp
c001beef:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bef3:	c1 e0 06             	shl    eax,0x6
c001bef6:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001befe:	89 e8                	mov    eax,ebp
c001bf00:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001bf04:	c1 e0 04             	shl    eax,0x4
c001bf07:	83 c8 a0             	or     eax,0xffffffa0
c001bf0a:	0f b6 c0             	movzx  eax,al
c001bf0d:	50                   	push   eax
c001bf0e:	6a 06                	push   0x6
c001bf10:	56                   	push   esi
c001bf11:	53                   	push   ebx
c001bf12:	e8 79 f8 ff ff       	call   c001b790 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bf17:	83 c4 0c             	add    esp,0xc
c001bf1a:	6a 0c                	push   0xc
c001bf1c:	56                   	push   esi
c001bf1d:	53                   	push   ebx
c001bf1e:	e8 2d f9 ff ff       	call   c001b850 <IDE::read(unsigned char, unsigned char)>
c001bf23:	83 c4 0c             	add    esp,0xc
c001bf26:	6a 0c                	push   0xc
c001bf28:	56                   	push   esi
c001bf29:	53                   	push   ebx
c001bf2a:	e8 21 f9 ff ff       	call   c001b850 <IDE::read(unsigned char, unsigned char)>
c001bf2f:	83 c4 0c             	add    esp,0xc
c001bf32:	6a 0c                	push   0xc
c001bf34:	56                   	push   esi
c001bf35:	53                   	push   ebx
c001bf36:	e8 15 f9 ff ff       	call   c001b850 <IDE::read(unsigned char, unsigned char)>
c001bf3b:	83 c4 0c             	add    esp,0xc
c001bf3e:	6a 0c                	push   0xc
c001bf40:	56                   	push   esi
c001bf41:	53                   	push   ebx
c001bf42:	e8 09 f9 ff ff       	call   c001b850 <IDE::read(unsigned char, unsigned char)>
c001bf47:	68 ec 00 00 00       	push   0xec
c001bf4c:	6a 07                	push   0x7
c001bf4e:	56                   	push   esi
c001bf4f:	53                   	push   ebx
c001bf50:	e8 3b f8 ff ff       	call   c001b790 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bf55:	83 c4 1c             	add    esp,0x1c
c001bf58:	6a 0c                	push   0xc
c001bf5a:	56                   	push   esi
c001bf5b:	53                   	push   ebx
c001bf5c:	e8 ef f8 ff ff       	call   c001b850 <IDE::read(unsigned char, unsigned char)>
c001bf61:	83 c4 0c             	add    esp,0xc
c001bf64:	6a 0c                	push   0xc
c001bf66:	56                   	push   esi
c001bf67:	53                   	push   ebx
c001bf68:	e8 e3 f8 ff ff       	call   c001b850 <IDE::read(unsigned char, unsigned char)>
c001bf6d:	83 c4 0c             	add    esp,0xc
c001bf70:	6a 0c                	push   0xc
c001bf72:	56                   	push   esi
c001bf73:	53                   	push   ebx
c001bf74:	e8 d7 f8 ff ff       	call   c001b850 <IDE::read(unsigned char, unsigned char)>
c001bf79:	83 c4 0c             	add    esp,0xc
c001bf7c:	6a 0c                	push   0xc
c001bf7e:	56                   	push   esi
c001bf7f:	53                   	push   ebx
c001bf80:	e8 cb f8 ff ff       	call   c001b850 <IDE::read(unsigned char, unsigned char)>
c001bf85:	83 c4 0c             	add    esp,0xc
c001bf88:	6a 0c                	push   0xc
c001bf8a:	56                   	push   esi
c001bf8b:	53                   	push   ebx
c001bf8c:	e8 bf f8 ff ff       	call   c001b850 <IDE::read(unsigned char, unsigned char)>
c001bf91:	83 c4 10             	add    esp,0x10
c001bf94:	84 c0                	test   al,al
c001bf96:	0f 84 8b 01 00 00    	je     c001c127 <IDE::detect()+0x269>
c001bf9c:	31 ff                	xor    edi,edi
c001bf9e:	50                   	push   eax
c001bf9f:	6a 0c                	push   0xc
c001bfa1:	56                   	push   esi
c001bfa2:	53                   	push   ebx
c001bfa3:	e8 a8 f8 ff ff       	call   c001b850 <IDE::read(unsigned char, unsigned char)>
c001bfa8:	83 c4 10             	add    esp,0x10
c001bfab:	a8 01                	test   al,0x1
c001bfad:	0f 85 8e 01 00 00    	jne    c001c141 <IDE::detect()+0x283>
c001bfb3:	84 c0                	test   al,al
c001bfb5:	78 04                	js     c001bfbb <IDE::detect()+0xfd>
c001bfb7:	a8 08                	test   al,0x8
c001bfb9:	75 27                	jne    c001bfe2 <IDE::detect()+0x124>
c001bfbb:	47                   	inc    edi
c001bfbc:	81 ff 17 01 00 00    	cmp    edi,0x117
c001bfc2:	7e da                	jle    c001bf9e <IDE::detect()+0xe0>
c001bfc4:	50                   	push   eax
c001bfc5:	50                   	push   eax
c001bfc6:	6a 00                	push   0x0
c001bfc8:	68 40 4b 4c 00       	push   0x4c4b40
c001bfcd:	e8 51 26 ff ff       	call   c000e623 <nanoSleep(unsigned long long)>
c001bfd2:	83 c4 10             	add    esp,0x10
c001bfd5:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001bfdb:	75 c1                	jne    c001bf9e <IDE::detect()+0xe0>
c001bfdd:	e9 5f 01 00 00       	jmp    c001c141 <IDE::detect()+0x283>
c001bfe2:	31 c9                	xor    ecx,ecx
c001bfe4:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001bfe8:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001bfec:	83 ec 0c             	sub    esp,0xc
c001bfef:	68 80 00 00 00       	push   0x80
c001bff4:	57                   	push   edi
c001bff5:	6a 00                	push   0x0
c001bff7:	56                   	push   esi
c001bff8:	53                   	push   ebx
c001bff9:	e8 f4 fd ff ff       	call   c001bdf2 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001bffe:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001c003:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c007:	89 d1                	mov    ecx,edx
c001c009:	c1 e0 06             	shl    eax,0x6
c001c00c:	01 d8                	add    eax,ebx
c001c00e:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001c015:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001c01c:	89 f2                	mov    edx,esi
c001c01e:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001c024:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001c028:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001c02e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c032:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001c039:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001c041:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001c048:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001c050:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001c056:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001c05d:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001c063:	8d 54 24 58          	lea    edx,[esp+0x58]
c001c067:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001c06b:	83 c4 20             	add    esp,0x20
c001c06e:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001c071:	83 c0 02             	add    eax,0x2
c001c074:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001c07a:	83 c7 02             	add    edi,0x2
c001c07d:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001c080:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001c086:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c001c08a:	75 e2                	jne    c001c06e <IDE::detect()+0x1b0>
c001c08c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c090:	c1 e0 06             	shl    eax,0x6
c001c093:	01 d8                	add    eax,ebx
c001c095:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c001c09b:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001c0a2:	66 c1 ea 09          	shr    dx,0x9
c001c0a6:	83 e2 01             	and    edx,0x1
c001c0a9:	84 c9                	test   cl,cl
c001c0ab:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001c0b1:	75 2f                	jne    c001c0e2 <IDE::detect()+0x224>
c001c0b3:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c001c0b9:	85 c0                	test   eax,eax
c001c0bb:	74 66                	je     c001c123 <IDE::detect()+0x265>
c001c0bd:	50                   	push   eax
c001c0be:	55                   	push   ebp
c001c0bf:	56                   	push   esi
c001c0c0:	68 33 1f 02 c0       	push   0xc0021f33
c001c0c5:	e8 fe 09 ff ff       	call   c000cac8 <kprintf(char const*, ...)>
c001c0ca:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001c0d1:	e8 a2 5f ff ff       	call   c0012078 <operator new(unsigned long)>
c001c0d6:	89 c7                	mov    edi,eax
c001c0d8:	89 04 24             	mov    DWORD PTR [esp],eax
c001c0db:	e8 e8 02 00 00       	call   c001c3c8 <ATA::ATA()>
c001c0e0:	eb 28                	jmp    c001c10a <IDE::detect()+0x24c>
c001c0e2:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c001c0e8:	55                   	push   ebp
c001c0e9:	56                   	push   esi
c001c0ea:	68 62 1f 02 c0       	push   0xc0021f62
c001c0ef:	e8 d4 09 ff ff       	call   c000cac8 <kprintf(char const*, ...)>
c001c0f4:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c001c0fb:	e8 78 5f ff ff       	call   c0012078 <operator new(unsigned long)>
c001c100:	89 c7                	mov    edi,eax
c001c102:	89 04 24             	mov    DWORD PTR [esp],eax
c001c105:	e8 ee 08 00 00       	call   c001c9f8 <ATAPI::ATAPI()>
c001c10a:	5a                   	pop    edx
c001c10b:	59                   	pop    ecx
c001c10c:	57                   	push   edi
c001c10d:	53                   	push   ebx
c001c10e:	e8 6f 72 ff ff       	call   c0013382 <Device::addChild(Device*)>
c001c113:	8b 07                	mov    eax,DWORD PTR [edi]
c001c115:	53                   	push   ebx
c001c116:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c11a:	6a 00                	push   0x0
c001c11c:	57                   	push   edi
c001c11d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c120:	83 c4 20             	add    esp,0x20
c001c123:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c001c127:	4d                   	dec    ebp
c001c128:	74 0a                	je     c001c134 <IDE::detect()+0x276>
c001c12a:	bd 01 00 00 00       	mov    ebp,0x1
c001c12f:	e9 bb fd ff ff       	jmp    c001beef <IDE::detect()+0x31>
c001c134:	4e                   	dec    esi
c001c135:	74 63                	je     c001c19a <IDE::detect()+0x2dc>
c001c137:	be 01 00 00 00       	mov    esi,0x1
c001c13c:	e9 ac fd ff ff       	jmp    c001beed <IDE::detect()+0x2f>
c001c141:	50                   	push   eax
c001c142:	6a 04                	push   0x4
c001c144:	56                   	push   esi
c001c145:	53                   	push   ebx
c001c146:	e8 05 f7 ff ff       	call   c001b850 <IDE::read(unsigned char, unsigned char)>
c001c14b:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001c14f:	83 c4 0c             	add    esp,0xc
c001c152:	6a 05                	push   0x5
c001c154:	56                   	push   esi
c001c155:	53                   	push   ebx
c001c156:	e8 f5 f6 ff ff       	call   c001b850 <IDE::read(unsigned char, unsigned char)>
c001c15b:	83 c4 10             	add    esp,0x10
c001c15e:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001c162:	80 fa 14             	cmp    dl,0x14
c001c165:	75 04                	jne    c001c16b <IDE::detect()+0x2ad>
c001c167:	3c eb                	cmp    al,0xeb
c001c169:	eb 07                	jmp    c001c172 <IDE::detect()+0x2b4>
c001c16b:	3c 96                	cmp    al,0x96
c001c16d:	75 b8                	jne    c001c127 <IDE::detect()+0x269>
c001c16f:	80 fa 69             	cmp    dl,0x69
c001c172:	75 b3                	jne    c001c127 <IDE::detect()+0x269>
c001c174:	68 a1 00 00 00       	push   0xa1
c001c179:	6a 07                	push   0x7
c001c17b:	56                   	push   esi
c001c17c:	53                   	push   ebx
c001c17d:	e8 0e f6 ff ff       	call   c001b790 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c182:	5f                   	pop    edi
c001c183:	58                   	pop    eax
c001c184:	6a 00                	push   0x0
c001c186:	68 40 42 0f 00       	push   0xf4240
c001c18b:	e8 93 24 ff ff       	call   c000e623 <nanoSleep(unsigned long long)>
c001c190:	83 c4 10             	add    esp,0x10
c001c193:	b1 01                	mov    cl,0x1
c001c195:	e9 4a fe ff ff       	jmp    c001bfe4 <IDE::detect()+0x126>
c001c19a:	81 c4 1c 02 00 00    	add    esp,0x21c
c001c1a0:	5b                   	pop    ebx
c001c1a1:	5e                   	pop    esi
c001c1a2:	5f                   	pop    edi
c001c1a3:	5d                   	pop    ebp
c001c1a4:	c3                   	ret    
c001c1a5:	90                   	nop

c001c1a6 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001c1a6:	55                   	push   ebp
c001c1a7:	57                   	push   edi
c001c1a8:	56                   	push   esi
c001c1a9:	53                   	push   ebx
c001c1aa:	83 ec 1c             	sub    esp,0x1c
c001c1ad:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c1b1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001c1b5:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001c1b9:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001c1bd:	88 c3                	mov    bl,al
c001c1bf:	84 c0                	test   al,al
c001c1c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c1c5:	0f 84 67 01 00 00    	je     c001c332 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c001c1cb:	83 ec 0c             	sub    esp,0xc
c001c1ce:	68 93 1f 02 c0       	push   0xc0021f93
c001c1d3:	e8 f0 08 ff ff       	call   c000cac8 <kprintf(char const*, ...)>
c001c1d8:	83 c4 10             	add    esp,0x10
c001c1db:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c1df:	3c 01                	cmp    al,0x1
c001c1e1:	75 17                	jne    c001c1fa <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c001c1e3:	83 ec 0c             	sub    esp,0xc
c001c1e6:	b3 13                	mov    bl,0x13
c001c1e8:	68 9f 1f 02 c0       	push   0xc0021f9f
c001c1ed:	e8 d6 08 ff ff       	call   c000cac8 <kprintf(char const*, ...)>
c001c1f2:	83 c4 10             	add    esp,0x10
c001c1f5:	e9 25 01 00 00       	jmp    c001c31f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001c1fa:	3c 02                	cmp    al,0x2
c001c1fc:	0f 85 ef 00 00 00    	jne    c001c2f1 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c001c202:	d1 e6                	shl    esi,1
c001c204:	09 ee                	or     esi,ebp
c001c206:	52                   	push   edx
c001c207:	89 f0                	mov    eax,esi
c001c209:	6a 01                	push   0x1
c001c20b:	0f b6 f0             	movzx  esi,al
c001c20e:	c1 e6 06             	shl    esi,0x6
c001c211:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c001c219:	50                   	push   eax
c001c21a:	57                   	push   edi
c001c21b:	e8 30 f6 ff ff       	call   c001b850 <IDE::read(unsigned char, unsigned char)>
c001c220:	83 c4 10             	add    esp,0x10
c001c223:	89 c6                	mov    esi,eax
c001c225:	a8 01                	test   al,0x1
c001c227:	74 12                	je     c001c23b <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c001c229:	83 ec 0c             	sub    esp,0xc
c001c22c:	b3 07                	mov    bl,0x7
c001c22e:	68 b4 1f 02 c0       	push   0xc0021fb4
c001c233:	e8 90 08 ff ff       	call   c000cac8 <kprintf(char const*, ...)>
c001c238:	83 c4 10             	add    esp,0x10
c001c23b:	f7 c6 02 00 00 00    	test   esi,0x2
c001c241:	74 12                	je     c001c255 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c001c243:	83 ec 0c             	sub    esp,0xc
c001c246:	b3 03                	mov    bl,0x3
c001c248:	68 d2 1f 02 c0       	push   0xc0021fd2
c001c24d:	e8 76 08 ff ff       	call   c000cac8 <kprintf(char const*, ...)>
c001c252:	83 c4 10             	add    esp,0x10
c001c255:	f7 c6 04 00 00 00    	test   esi,0x4
c001c25b:	74 12                	je     c001c26f <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c001c25d:	83 ec 0c             	sub    esp,0xc
c001c260:	b3 14                	mov    bl,0x14
c001c262:	68 f2 1f 02 c0       	push   0xc0021ff2
c001c267:	e8 5c 08 ff ff       	call   c000cac8 <kprintf(char const*, ...)>
c001c26c:	83 c4 10             	add    esp,0x10
c001c26f:	f7 c6 08 00 00 00    	test   esi,0x8
c001c275:	74 12                	je     c001c289 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c001c277:	83 ec 0c             	sub    esp,0xc
c001c27a:	b3 03                	mov    bl,0x3
c001c27c:	68 d2 1f 02 c0       	push   0xc0021fd2
c001c281:	e8 42 08 ff ff       	call   c000cac8 <kprintf(char const*, ...)>
c001c286:	83 c4 10             	add    esp,0x10
c001c289:	f7 c6 10 00 00 00    	test   esi,0x10
c001c28f:	74 12                	je     c001c2a3 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c001c291:	83 ec 0c             	sub    esp,0xc
c001c294:	b3 15                	mov    bl,0x15
c001c296:	68 0a 20 02 c0       	push   0xc002200a
c001c29b:	e8 28 08 ff ff       	call   c000cac8 <kprintf(char const*, ...)>
c001c2a0:	83 c4 10             	add    esp,0x10
c001c2a3:	f7 c6 20 00 00 00    	test   esi,0x20
c001c2a9:	74 12                	je     c001c2bd <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c001c2ab:	83 ec 0c             	sub    esp,0xc
c001c2ae:	b3 03                	mov    bl,0x3
c001c2b0:	68 d2 1f 02 c0       	push   0xc0021fd2
c001c2b5:	e8 0e 08 ff ff       	call   c000cac8 <kprintf(char const*, ...)>
c001c2ba:	83 c4 10             	add    esp,0x10
c001c2bd:	f7 c6 40 00 00 00    	test   esi,0x40
c001c2c3:	74 12                	je     c001c2d7 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c001c2c5:	83 ec 0c             	sub    esp,0xc
c001c2c8:	b3 16                	mov    bl,0x16
c001c2ca:	68 24 20 02 c0       	push   0xc0022024
c001c2cf:	e8 f4 07 ff ff       	call   c000cac8 <kprintf(char const*, ...)>
c001c2d4:	83 c4 10             	add    esp,0x10
c001c2d7:	89 f0                	mov    eax,esi
c001c2d9:	84 c0                	test   al,al
c001c2db:	79 42                	jns    c001c31f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001c2dd:	83 ec 0c             	sub    esp,0xc
c001c2e0:	b3 0d                	mov    bl,0xd
c001c2e2:	68 45 20 02 c0       	push   0xc0022045
c001c2e7:	e8 dc 07 ff ff       	call   c000cac8 <kprintf(char const*, ...)>
c001c2ec:	83 c4 10             	add    esp,0x10
c001c2ef:	eb 2e                	jmp    c001c31f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001c2f1:	3c 03                	cmp    al,0x3
c001c2f3:	75 14                	jne    c001c309 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c001c2f5:	83 ec 0c             	sub    esp,0xc
c001c2f8:	b3 17                	mov    bl,0x17
c001c2fa:	68 59 20 02 c0       	push   0xc0022059
c001c2ff:	e8 c4 07 ff ff       	call   c000cac8 <kprintf(char const*, ...)>
c001c304:	83 c4 10             	add    esp,0x10
c001c307:	eb 16                	jmp    c001c31f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001c309:	3c 04                	cmp    al,0x4
c001c30b:	75 12                	jne    c001c31f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001c30d:	83 ec 0c             	sub    esp,0xc
c001c310:	b3 08                	mov    bl,0x8
c001c312:	68 6f 20 02 c0       	push   0xc002206f
c001c317:	e8 ac 07 ff ff       	call   c000cac8 <kprintf(char const*, ...)>
c001c31c:	83 c4 10             	add    esp,0x10
c001c31f:	50                   	push   eax
c001c320:	50                   	push   eax
c001c321:	0f b6 c3             	movzx  eax,bl
c001c324:	50                   	push   eax
c001c325:	68 87 20 02 c0       	push   0xc0022087
c001c32a:	e8 99 07 ff ff       	call   c000cac8 <kprintf(char const*, ...)>
c001c32f:	83 c4 10             	add    esp,0x10
c001c332:	83 c4 1c             	add    esp,0x1c
c001c335:	88 d8                	mov    al,bl
c001c337:	5b                   	pop    ebx
c001c338:	5e                   	pop    esi
c001c339:	5f                   	pop    edi
c001c33a:	5d                   	pop    ebp
c001c33b:	c3                   	ret    

c001c33c <IDE::polling(unsigned char, unsigned int)>:
c001c33c:	57                   	push   edi
c001c33d:	56                   	push   esi
c001c33e:	53                   	push   ebx
c001c33f:	bb 04 00 00 00       	mov    ebx,0x4
c001c344:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001c348:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001c34d:	52                   	push   edx
c001c34e:	6a 0c                	push   0xc
c001c350:	56                   	push   esi
c001c351:	57                   	push   edi
c001c352:	e8 f9 f4 ff ff       	call   c001b850 <IDE::read(unsigned char, unsigned char)>
c001c357:	83 c4 10             	add    esp,0x10
c001c35a:	4b                   	dec    ebx
c001c35b:	75 f0                	jne    c001c34d <IDE::polling(unsigned char, unsigned int)+0x11>
c001c35d:	bb a0 86 01 00       	mov    ebx,0x186a0
c001c362:	50                   	push   eax
c001c363:	6a 0c                	push   0xc
c001c365:	56                   	push   esi
c001c366:	57                   	push   edi
c001c367:	e8 e4 f4 ff ff       	call   c001b850 <IDE::read(unsigned char, unsigned char)>
c001c36c:	83 c4 10             	add    esp,0x10
c001c36f:	a8 01                	test   al,0x1
c001c371:	74 12                	je     c001c385 <IDE::polling(unsigned char, unsigned int)+0x49>
c001c373:	83 ec 0c             	sub    esp,0xc
c001c376:	68 a1 20 02 c0       	push   0xc00220a1
c001c37b:	e8 48 07 ff ff       	call   c000cac8 <kprintf(char const*, ...)>
c001c380:	83 c4 10             	add    esp,0x10
c001c383:	eb 17                	jmp    c001c39c <IDE::polling(unsigned char, unsigned int)+0x60>
c001c385:	a8 20                	test   al,0x20
c001c387:	75 0f                	jne    c001c398 <IDE::polling(unsigned char, unsigned int)+0x5c>
c001c389:	4b                   	dec    ebx
c001c38a:	74 10                	je     c001c39c <IDE::polling(unsigned char, unsigned int)+0x60>
c001c38c:	84 c0                	test   al,al
c001c38e:	78 d2                	js     c001c362 <IDE::polling(unsigned char, unsigned int)+0x26>
c001c390:	a8 08                	test   al,0x8
c001c392:	74 ce                	je     c001c362 <IDE::polling(unsigned char, unsigned int)+0x26>
c001c394:	31 c0                	xor    eax,eax
c001c396:	eb 06                	jmp    c001c39e <IDE::polling(unsigned char, unsigned int)+0x62>
c001c398:	b0 01                	mov    al,0x1
c001c39a:	eb 02                	jmp    c001c39e <IDE::polling(unsigned char, unsigned int)+0x62>
c001c39c:	b0 02                	mov    al,0x2
c001c39e:	5b                   	pop    ebx
c001c39f:	5e                   	pop    esi
c001c3a0:	5f                   	pop    edi
c001c3a1:	c3                   	ret    

c001c3a2 <ATA::close(int, int, void*)>:
c001c3a2:	83 ec 0c             	sub    esp,0xc
c001c3a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c3a9:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001c3af:	85 c0                	test   eax,eax
c001c3b1:	74 0c                	je     c001c3bf <ATA::close(int, int, void*)+0x1d>
c001c3b3:	83 ec 0c             	sub    esp,0xc
c001c3b6:	8b 10                	mov    edx,DWORD PTR [eax]
c001c3b8:	50                   	push   eax
c001c3b9:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001c3bc:	83 c4 10             	add    esp,0x10
c001c3bf:	31 c0                	xor    eax,eax
c001c3c1:	83 c4 0c             	add    esp,0xc
c001c3c4:	c3                   	ret    
c001c3c5:	90                   	nop

c001c3c6 <ATA::powerSaving(PowerSavingLevel)>:
c001c3c6:	c3                   	ret    
c001c3c7:	90                   	nop

c001c3c8 <ATA::ATA()>:
c001c3c8:	83 ec 0c             	sub    esp,0xc
c001c3cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c3cf:	83 ec 04             	sub    esp,0x4
c001c3d2:	68 00 02 00 00       	push   0x200
c001c3d7:	68 e4 20 02 c0       	push   0xc00220e4
c001c3dc:	50                   	push   eax
c001c3dd:	e8 a6 73 ff ff       	call   c0013788 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001c3e2:	83 c4 10             	add    esp,0x10
c001c3e5:	ba 10 21 02 c0       	mov    edx,0xc0022110
c001c3ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c3ee:	89 10                	mov    DWORD PTR [eax],edx
c001c3f0:	90                   	nop
c001c3f1:	83 c4 0c             	add    esp,0xc
c001c3f4:	c3                   	ret    
c001c3f5:	90                   	nop

c001c3f6 <ATA::flush(bool)>:
c001c3f6:	53                   	push   ebx
c001c3f7:	83 ec 08             	sub    esp,0x8
c001c3fa:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c001c3ff:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c403:	19 c0                	sbb    eax,eax
c001c405:	83 e0 fd             	and    eax,0xfffffffd
c001c408:	05 ea 00 00 00       	add    eax,0xea
c001c40d:	50                   	push   eax
c001c40e:	6a 07                	push   0x7
c001c410:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c417:	50                   	push   eax
c001c418:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c41e:	e8 6d f3 ff ff       	call   c001b790 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c423:	83 c4 0c             	add    esp,0xc
c001c426:	6a 00                	push   0x0
c001c428:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c42f:	50                   	push   eax
c001c430:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c436:	e8 01 ff ff ff       	call   c001c33c <IDE::polling(unsigned char, unsigned int)>
c001c43b:	83 c4 18             	add    esp,0x18
c001c43e:	5b                   	pop    ebx
c001c43f:	c3                   	ret    

c001c440 <ATA::readyForCommand()>:
c001c440:	56                   	push   esi
c001c441:	53                   	push   ebx
c001c442:	31 db                	xor    ebx,ebx
c001c444:	50                   	push   eax
c001c445:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c449:	50                   	push   eax
c001c44a:	6a 0c                	push   0xc
c001c44c:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001c453:	50                   	push   eax
c001c454:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001c45a:	e8 f1 f3 ff ff       	call   c001b850 <IDE::read(unsigned char, unsigned char)>
c001c45f:	83 c4 10             	add    esp,0x10
c001c462:	a8 88                	test   al,0x88
c001c464:	74 23                	je     c001c489 <ATA::readyForCommand()+0x49>
c001c466:	43                   	inc    ebx
c001c467:	83 fb 63             	cmp    ebx,0x63
c001c46a:	7e dd                	jle    c001c449 <ATA::readyForCommand()+0x9>
c001c46c:	51                   	push   ecx
c001c46d:	51                   	push   ecx
c001c46e:	6a 00                	push   0x0
c001c470:	68 40 42 0f 00       	push   0xf4240
c001c475:	e8 a9 21 ff ff       	call   c000e623 <nanoSleep(unsigned long long)>
c001c47a:	83 c4 10             	add    esp,0x10
c001c47d:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001c483:	75 c4                	jne    c001c449 <ATA::readyForCommand()+0x9>
c001c485:	31 c0                	xor    eax,eax
c001c487:	eb 02                	jmp    c001c48b <ATA::readyForCommand()+0x4b>
c001c489:	b0 01                	mov    al,0x1
c001c48b:	5a                   	pop    edx
c001c48c:	5b                   	pop    ebx
c001c48d:	5e                   	pop    esi
c001c48e:	c3                   	ret    
c001c48f:	90                   	nop

c001c490 <ATA::access(unsigned long long, int, void*, bool)>:
c001c490:	55                   	push   ebp
c001c491:	57                   	push   edi
c001c492:	56                   	push   esi
c001c493:	53                   	push   ebx
c001c494:	83 ec 2c             	sub    esp,0x2c
c001c497:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001c49b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001c49f:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001c4a3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c4a7:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001c4ab:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001c4af:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001c4b3:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001c4b9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c4bd:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001c4c3:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c4c7:	c1 e0 06             	shl    eax,0x6
c001c4ca:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001c4d2:	74 5d                	je     c001c531 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c001c4d4:	89 fa                	mov    edx,edi
c001c4d6:	89 f0                	mov    eax,esi
c001c4d8:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001c4dc:	c1 ea 1c             	shr    edx,0x1c
c001c4df:	89 d1                	mov    ecx,edx
c001c4e1:	09 c1                	or     ecx,eax
c001c4e3:	74 25                	je     c001c50a <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001c4e5:	31 ed                	xor    ebp,ebp
c001c4e7:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001c4ee:	89 fa                	mov    edx,edi
c001c4f0:	89 f0                	mov    eax,esi
c001c4f2:	0f ad d0             	shrd   eax,edx,cl
c001c4f5:	d3 ea                	shr    edx,cl
c001c4f7:	f6 c1 20             	test   cl,0x20
c001c4fa:	74 02                	je     c001c4fe <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001c4fc:	89 d0                	mov    eax,edx
c001c4fe:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001c502:	45                   	inc    ebp
c001c503:	83 fd 06             	cmp    ebp,0x6
c001c506:	75 df                	jne    c001c4e7 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001c508:	eb 76                	jmp    c001c580 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c001c50a:	89 f0                	mov    eax,esi
c001c50c:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001c511:	89 fa                	mov    edx,edi
c001c513:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001c51a:	0f ac d0 10          	shrd   eax,edx,0x10
c001c51e:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001c523:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001c527:	c1 ee 18             	shr    esi,0x18
c001c52a:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001c52f:	eb 56                	jmp    c001c587 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001c531:	6a 00                	push   0x0
c001c533:	6a 3f                	push   0x3f
c001c535:	57                   	push   edi
c001c536:	56                   	push   esi
c001c537:	e8 e0 1e 00 00       	call   c001e41c <__umoddi3>
c001c53c:	83 c4 10             	add    esp,0x10
c001c53f:	40                   	inc    eax
c001c540:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001c544:	6a 00                	push   0x0
c001c546:	68 f0 03 00 00       	push   0x3f0
c001c54b:	57                   	push   edi
c001c54c:	56                   	push   esi
c001c54d:	e8 ca 1d 00 00       	call   c001e31c <__udivdi3>
c001c552:	83 c4 10             	add    esp,0x10
c001c555:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001c55a:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001c561:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001c566:	6a 00                	push   0x0
c001c568:	6a 3f                	push   0x3f
c001c56a:	57                   	push   edi
c001c56b:	56                   	push   esi
c001c56c:	e8 ab 1d 00 00       	call   c001e31c <__udivdi3>
c001c571:	83 c4 10             	add    esp,0x10
c001c574:	89 c6                	mov    esi,eax
c001c576:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001c57b:	83 e6 0f             	and    esi,0xf
c001c57e:	eb 07                	jmp    c001c587 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001c580:	31 f6                	xor    esi,esi
c001c582:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001c587:	bf 01 00 00 00       	mov    edi,0x1
c001c58c:	50                   	push   eax
c001c58d:	6a 00                	push   0x0
c001c58f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c596:	50                   	push   eax
c001c597:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c59b:	e8 fc f3 ff ff       	call   c001b99c <IDE::enableIRQs(unsigned char, bool)>
c001c5a0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c5a3:	e8 98 fe ff ff       	call   c001c440 <ATA::readyForCommand()>
c001c5a8:	83 c4 10             	add    esp,0x10
c001c5ab:	84 c0                	test   al,al
c001c5ad:	0f 84 50 02 00 00    	je     c001c803 <ATA::access(unsigned long long, int, void*, bool)+0x373>
c001c5b3:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001c5b9:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001c5bf:	c1 e0 04             	shl    eax,0x4
c001c5c2:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001c5c9:	09 c6                	or     esi,eax
c001c5cb:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001c5d0:	75 05                	jne    c001c5d7 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001c5d2:	83 ce a0             	or     esi,0xffffffa0
c001c5d5:	eb 03                	jmp    c001c5da <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c001c5d7:	83 ce e0             	or     esi,0xffffffe0
c001c5da:	89 f0                	mov    eax,esi
c001c5dc:	0f b6 f0             	movzx  esi,al
c001c5df:	56                   	push   esi
c001c5e0:	6a 06                	push   0x6
c001c5e2:	51                   	push   ecx
c001c5e3:	52                   	push   edx
c001c5e4:	e8 a7 f1 ff ff       	call   c001b790 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c5e9:	83 c4 10             	add    esp,0x10
c001c5ec:	6a 00                	push   0x0
c001c5ee:	6a 01                	push   0x1
c001c5f0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c5f7:	50                   	push   eax
c001c5f8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c5fe:	e8 8d f1 ff ff       	call   c001b790 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c603:	83 c4 10             	add    esp,0x10
c001c606:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001c60b:	75 6e                	jne    c001c67b <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c001c60d:	6a 00                	push   0x0
c001c60f:	6a 08                	push   0x8
c001c611:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c618:	50                   	push   eax
c001c619:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c61f:	e8 6c f1 ff ff       	call   c001b790 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c624:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001c629:	50                   	push   eax
c001c62a:	6a 09                	push   0x9
c001c62c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c633:	50                   	push   eax
c001c634:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c63a:	e8 51 f1 ff ff       	call   c001b790 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c63f:	83 c4 20             	add    esp,0x20
c001c642:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001c647:	50                   	push   eax
c001c648:	6a 0a                	push   0xa
c001c64a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c651:	50                   	push   eax
c001c652:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c658:	e8 33 f1 ff ff       	call   c001b790 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c65d:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001c662:	50                   	push   eax
c001c663:	6a 0b                	push   0xb
c001c665:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c66c:	50                   	push   eax
c001c66d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c673:	e8 18 f1 ff ff       	call   c001b790 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c678:	83 c4 20             	add    esp,0x20
c001c67b:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001c680:	50                   	push   eax
c001c681:	6a 02                	push   0x2
c001c683:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c68a:	50                   	push   eax
c001c68b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c691:	e8 fa f0 ff ff       	call   c001b790 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c696:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001c69b:	50                   	push   eax
c001c69c:	6a 03                	push   0x3
c001c69e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c6a5:	50                   	push   eax
c001c6a6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c6ac:	e8 df f0 ff ff       	call   c001b790 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c6b1:	83 c4 20             	add    esp,0x20
c001c6b4:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001c6b9:	50                   	push   eax
c001c6ba:	6a 04                	push   0x4
c001c6bc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c6c3:	50                   	push   eax
c001c6c4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c6ca:	e8 c1 f0 ff ff       	call   c001b790 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c6cf:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001c6d4:	50                   	push   eax
c001c6d5:	6a 05                	push   0x5
c001c6d7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c6de:	50                   	push   eax
c001c6df:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c6e5:	e8 a6 f0 ff ff       	call   c001b790 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c6ea:	83 c4 20             	add    esp,0x20
c001c6ed:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001c6f2:	0f 94 c0             	sete   al
c001c6f5:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001c6fa:	74 09                	je     c001c705 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c001c6fc:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c001c703:	eb 07                	jmp    c001c70c <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c001c705:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c001c70c:	0f b6 c0             	movzx  eax,al
c001c70f:	50                   	push   eax
c001c710:	6a 07                	push   0x7
c001c712:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c719:	50                   	push   eax
c001c71a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c720:	e8 6b f0 ff ff       	call   c001b790 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c725:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001c729:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001c72d:	83 c4 10             	add    esp,0x10
c001c730:	85 f6                	test   esi,esi
c001c732:	0f 84 ac 00 00 00    	je     c001c7e4 <ATA::access(unsigned long long, int, void*, bool)+0x354>
c001c738:	50                   	push   eax
c001c739:	6a 01                	push   0x1
c001c73b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c742:	50                   	push   eax
c001c743:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c749:	e8 ee fb ff ff       	call   c001c33c <IDE::polling(unsigned char, unsigned int)>
c001c74e:	83 c4 10             	add    esp,0x10
c001c751:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001c757:	84 c0                	test   al,al
c001c759:	74 20                	je     c001c77b <ATA::access(unsigned long long, int, void*, bool)+0x2eb>
c001c75b:	0f b6 f8             	movzx  edi,al
c001c75e:	0f b6 d2             	movzx  edx,dl
c001c761:	57                   	push   edi
c001c762:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001c769:	50                   	push   eax
c001c76a:	52                   	push   edx
c001c76b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c771:	e8 30 fa ff ff       	call   c001c1a6 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001c776:	e9 85 00 00 00       	jmp    c001c800 <ATA::access(unsigned long long, int, void*, bool)+0x370>
c001c77b:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001c780:	74 41                	je     c001c7c3 <ATA::access(unsigned long long, int, void*, bool)+0x333>
c001c782:	31 c9                	xor    ecx,ecx
c001c784:	66 8b 2c 4f          	mov    bp,WORD PTR [edi+ecx*2]
c001c788:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001c78c:	50                   	push   eax
c001c78d:	50                   	push   eax
c001c78e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c795:	50                   	push   eax
c001c796:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c79c:	e8 dd ef ff ff       	call   c001b77e <IDE::getBase(unsigned char)>
c001c7a1:	89 c2                	mov    edx,eax
c001c7a3:	89 e8                	mov    eax,ebp
c001c7a5:	66 ef                	out    dx,ax
c001c7a7:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001c7ab:	83 c4 10             	add    esp,0x10
c001c7ae:	41                   	inc    ecx
c001c7af:	81 f9 00 01 00 00    	cmp    ecx,0x100
c001c7b5:	75 cd                	jne    c001c784 <ATA::access(unsigned long long, int, void*, bool)+0x2f4>
c001c7b7:	4e                   	dec    esi
c001c7b8:	81 c7 00 02 00 00    	add    edi,0x200
c001c7be:	e9 6d ff ff ff       	jmp    c001c730 <ATA::access(unsigned long long, int, void*, bool)+0x2a0>
c001c7c3:	0f b6 d2             	movzx  edx,dl
c001c7c6:	51                   	push   ecx
c001c7c7:	51                   	push   ecx
c001c7c8:	52                   	push   edx
c001c7c9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c7cf:	e8 aa ef ff ff       	call   c001b77e <IDE::getBase(unsigned char)>
c001c7d4:	b9 00 01 00 00       	mov    ecx,0x100
c001c7d9:	89 c2                	mov    edx,eax
c001c7db:	fc                   	cld    
c001c7dc:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001c7df:	83 c4 10             	add    esp,0x10
c001c7e2:	eb d3                	jmp    c001c7b7 <ATA::access(unsigned long long, int, void*, bool)+0x327>
c001c7e4:	31 ff                	xor    edi,edi
c001c7e6:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001c7eb:	74 16                	je     c001c803 <ATA::access(unsigned long long, int, void*, bool)+0x373>
c001c7ed:	50                   	push   eax
c001c7ee:	50                   	push   eax
c001c7ef:	31 c0                	xor    eax,eax
c001c7f1:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c001c7f6:	0f 94 c0             	sete   al
c001c7f9:	50                   	push   eax
c001c7fa:	53                   	push   ebx
c001c7fb:	e8 f6 fb ff ff       	call   c001c3f6 <ATA::flush(bool)>
c001c800:	83 c4 10             	add    esp,0x10
c001c803:	83 c4 2c             	add    esp,0x2c
c001c806:	89 f8                	mov    eax,edi
c001c808:	5b                   	pop    ebx
c001c809:	5e                   	pop    esi
c001c80a:	5f                   	pop    edi
c001c80b:	5d                   	pop    ebp
c001c80c:	c3                   	ret    
c001c80d:	90                   	nop

c001c80e <ATA::read(unsigned long long, int, void*)>:
c001c80e:	57                   	push   edi
c001c80f:	b8 04 00 00 00       	mov    eax,0x4
c001c814:	56                   	push   esi
c001c815:	53                   	push   ebx
c001c816:	83 ec 10             	sub    esp,0x10
c001c819:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001c81d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001c821:	8d 4b ff             	lea    ecx,[ebx-0x1]
c001c824:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001c828:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c82c:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c001c832:	77 3b                	ja     c001c86f <ATA::read(unsigned long long, int, void*)+0x61>
c001c834:	b8 06 00 00 00       	mov    eax,0x6
c001c839:	85 d2                	test   edx,edx
c001c83b:	74 32                	je     c001c86f <ATA::read(unsigned long long, int, void*)+0x61>
c001c83d:	50                   	push   eax
c001c83e:	50                   	push   eax
c001c83f:	6a 00                	push   0x0
c001c841:	52                   	push   edx
c001c842:	53                   	push   ebx
c001c843:	57                   	push   edi
c001c844:	56                   	push   esi
c001c845:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001c849:	e8 42 fc ff ff       	call   c001c490 <ATA::access(unsigned long long, int, void*, bool)>
c001c84e:	83 c4 20             	add    esp,0x20
c001c851:	85 c0                	test   eax,eax
c001c853:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c857:	75 11                	jne    c001c86a <ATA::read(unsigned long long, int, void*)+0x5c>
c001c859:	01 1d a8 47 02 c0    	add    DWORD PTR ds:0xc00247a8,ebx
c001c85f:	e8 92 36 ff ff       	call   c000fef6 <VgaText::updateDiskUsage()>
c001c864:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c868:	eb 05                	jmp    c001c86f <ATA::read(unsigned long long, int, void*)+0x61>
c001c86a:	b8 01 00 00 00       	mov    eax,0x1
c001c86f:	83 c4 10             	add    esp,0x10
c001c872:	5b                   	pop    ebx
c001c873:	5e                   	pop    esi
c001c874:	5f                   	pop    edi
c001c875:	c3                   	ret    

c001c876 <ATA::write(unsigned long long, int, void*)>:
c001c876:	57                   	push   edi
c001c877:	b8 04 00 00 00       	mov    eax,0x4
c001c87c:	56                   	push   esi
c001c87d:	53                   	push   ebx
c001c87e:	83 ec 10             	sub    esp,0x10
c001c881:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001c885:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001c889:	8d 4b ff             	lea    ecx,[ebx-0x1]
c001c88c:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001c890:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c894:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c001c89a:	77 3b                	ja     c001c8d7 <ATA::write(unsigned long long, int, void*)+0x61>
c001c89c:	b8 06 00 00 00       	mov    eax,0x6
c001c8a1:	85 d2                	test   edx,edx
c001c8a3:	74 32                	je     c001c8d7 <ATA::write(unsigned long long, int, void*)+0x61>
c001c8a5:	50                   	push   eax
c001c8a6:	50                   	push   eax
c001c8a7:	6a 01                	push   0x1
c001c8a9:	52                   	push   edx
c001c8aa:	53                   	push   ebx
c001c8ab:	57                   	push   edi
c001c8ac:	56                   	push   esi
c001c8ad:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001c8b1:	e8 da fb ff ff       	call   c001c490 <ATA::access(unsigned long long, int, void*, bool)>
c001c8b6:	83 c4 20             	add    esp,0x20
c001c8b9:	85 c0                	test   eax,eax
c001c8bb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c8bf:	75 11                	jne    c001c8d2 <ATA::write(unsigned long long, int, void*)+0x5c>
c001c8c1:	01 1d a4 47 02 c0    	add    DWORD PTR ds:0xc00247a4,ebx
c001c8c7:	e8 2a 36 ff ff       	call   c000fef6 <VgaText::updateDiskUsage()>
c001c8cc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c8d0:	eb 05                	jmp    c001c8d7 <ATA::write(unsigned long long, int, void*)+0x61>
c001c8d2:	b8 01 00 00 00       	mov    eax,0x1
c001c8d7:	83 c4 10             	add    esp,0x10
c001c8da:	5b                   	pop    ebx
c001c8db:	5e                   	pop    esi
c001c8dc:	5f                   	pop    edi
c001c8dd:	c3                   	ret    

c001c8de <ATA::detectCHS()>:
c001c8de:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c8e2:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001c8e8:	c1 e0 06             	shl    eax,0x6
c001c8eb:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001c8f1:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001c8fb:	c7 44 24 04 f3 20 02 c0 	mov    DWORD PTR [esp+0x4],0xc00220f3
c001c903:	e9 de 02 ff ff       	jmp    c000cbe6 <panic(char const*)>

c001c908 <ATA::open(int, int, void*)>:
c001c908:	53                   	push   ebx
c001c909:	83 ec 08             	sub    esp,0x8
c001c90c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c910:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c914:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c918:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001c91e:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001c924:	c1 e0 06             	shl    eax,0x6
c001c927:	01 d0                	add    eax,edx
c001c929:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001c930:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001c936:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001c93d:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001c947:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001c94d:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001c954:	75 0c                	jne    c001c962 <ATA::open(int, int, void*)+0x5a>
c001c956:	83 ec 0c             	sub    esp,0xc
c001c959:	53                   	push   ebx
c001c95a:	e8 7f ff ff ff       	call   c001c8de <ATA::detectCHS()>
c001c95f:	83 c4 10             	add    esp,0x10
c001c962:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001c968:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001c96e:	c1 e0 06             	shl    eax,0x6
c001c971:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001c978:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001c982:	d1 e8                	shr    eax,1
c001c984:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001c98a:	6a 04                	push   0x4
c001c98c:	6a 0c                	push   0xc
c001c98e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c995:	50                   	push   eax
c001c996:	52                   	push   edx
c001c997:	e8 f4 ed ff ff       	call   c001b790 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c99c:	90                   	nop
c001c99d:	90                   	nop
c001c99e:	6a 00                	push   0x0
c001c9a0:	6a 0c                	push   0xc
c001c9a2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c9a9:	50                   	push   eax
c001c9aa:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c9b0:	e8 db ed ff ff       	call   c001b790 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c9b5:	83 c4 14             	add    esp,0x14
c001c9b8:	53                   	push   ebx
c001c9b9:	e8 32 6e ff ff       	call   c00137f0 <PhysicalDisk::startCache()>
c001c9be:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c9c1:	e8 82 86 ff ff       	call   c0015048 <createPartitionsForDisk(PhysicalDisk*)>
c001c9c6:	31 c0                	xor    eax,eax
c001c9c8:	83 c4 18             	add    esp,0x18
c001c9cb:	5b                   	pop    ebx
c001c9cc:	c3                   	ret    
c001c9cd:	90                   	nop

c001c9ce <ATAPI::write(unsigned long long, int, void*)>:
c001c9ce:	b8 03 00 00 00       	mov    eax,0x3
c001c9d3:	c3                   	ret    

c001c9d4 <ATAPI::close(int, int, void*)>:
c001c9d4:	83 ec 0c             	sub    esp,0xc
c001c9d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9db:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001c9e1:	85 c0                	test   eax,eax
c001c9e3:	74 0c                	je     c001c9f1 <ATAPI::close(int, int, void*)+0x1d>
c001c9e5:	83 ec 0c             	sub    esp,0xc
c001c9e8:	8b 10                	mov    edx,DWORD PTR [eax]
c001c9ea:	50                   	push   eax
c001c9eb:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001c9ee:	83 c4 10             	add    esp,0x10
c001c9f1:	31 c0                	xor    eax,eax
c001c9f3:	83 c4 0c             	add    esp,0xc
c001c9f6:	c3                   	ret    
c001c9f7:	90                   	nop

c001c9f8 <ATAPI::ATAPI()>:
c001c9f8:	83 ec 0c             	sub    esp,0xc
c001c9fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9ff:	83 ec 04             	sub    esp,0x4
c001ca02:	68 00 08 00 00       	push   0x800
c001ca07:	68 3c 21 02 c0       	push   0xc002213c
c001ca0c:	50                   	push   eax
c001ca0d:	e8 76 6d ff ff       	call   c0013788 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001ca12:	83 c4 10             	add    esp,0x10
c001ca15:	ba 7c 21 02 c0       	mov    edx,0xc002217c
c001ca1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca1e:	89 10                	mov    DWORD PTR [eax],edx
c001ca20:	90                   	nop
c001ca21:	83 c4 0c             	add    esp,0xc
c001ca24:	c3                   	ret    
c001ca25:	90                   	nop

c001ca26 <ATAPI::readyForCommand()>:
c001ca26:	56                   	push   esi
c001ca27:	53                   	push   ebx
c001ca28:	31 db                	xor    ebx,ebx
c001ca2a:	50                   	push   eax
c001ca2b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ca2f:	50                   	push   eax
c001ca30:	6a 0c                	push   0xc
c001ca32:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001ca39:	50                   	push   eax
c001ca3a:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001ca40:	e8 0b ee ff ff       	call   c001b850 <IDE::read(unsigned char, unsigned char)>
c001ca45:	83 c4 10             	add    esp,0x10
c001ca48:	a8 88                	test   al,0x88
c001ca4a:	74 23                	je     c001ca6f <ATAPI::readyForCommand()+0x49>
c001ca4c:	43                   	inc    ebx
c001ca4d:	83 fb 63             	cmp    ebx,0x63
c001ca50:	7e dd                	jle    c001ca2f <ATAPI::readyForCommand()+0x9>
c001ca52:	51                   	push   ecx
c001ca53:	51                   	push   ecx
c001ca54:	6a 00                	push   0x0
c001ca56:	68 40 42 0f 00       	push   0xf4240
c001ca5b:	e8 c3 1b ff ff       	call   c000e623 <nanoSleep(unsigned long long)>
c001ca60:	83 c4 10             	add    esp,0x10
c001ca63:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001ca69:	75 c4                	jne    c001ca2f <ATAPI::readyForCommand()+0x9>
c001ca6b:	31 c0                	xor    eax,eax
c001ca6d:	eb 02                	jmp    c001ca71 <ATAPI::readyForCommand()+0x4b>
c001ca6f:	b0 01                	mov    al,0x1
c001ca71:	5a                   	pop    edx
c001ca72:	5b                   	pop    ebx
c001ca73:	5e                   	pop    esi
c001ca74:	c3                   	ret    
c001ca75:	90                   	nop

c001ca76 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001ca76:	55                   	push   ebp
c001ca77:	57                   	push   edi
c001ca78:	56                   	push   esi
c001ca79:	53                   	push   ebx
c001ca7a:	83 ec 20             	sub    esp,0x20
c001ca7d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001ca81:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001ca85:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001ca89:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001ca8d:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001ca91:	6a 01                	push   0x1
c001ca93:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ca9a:	50                   	push   eax
c001ca9b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001caa1:	e8 f6 ee ff ff       	call   c001b99c <IDE::enableIRQs(unsigned char, bool)>
c001caa6:	5e                   	pop    esi
c001caa7:	58                   	pop    eax
c001caa8:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001caaf:	50                   	push   eax
c001cab0:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cab6:	e8 af ec ff ff       	call   c001b76a <IDE::prepareInterrupt(unsigned char)>
c001cabb:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cabe:	e8 63 ff ff ff       	call   c001ca26 <ATAPI::readyForCommand()>
c001cac3:	83 c4 10             	add    esp,0x10
c001cac6:	84 c0                	test   al,al
c001cac8:	75 0a                	jne    c001cad4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001caca:	bb 01 00 00 00       	mov    ebx,0x1
c001cacf:	e9 57 02 00 00       	jmp    c001cd2b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001cad4:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c001cada:	c1 e0 04             	shl    eax,0x4
c001cadd:	0f b6 c0             	movzx  eax,al
c001cae0:	50                   	push   eax
c001cae1:	6a 06                	push   0x6
c001cae3:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001caea:	50                   	push   eax
c001caeb:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001caf1:	e8 9a ec ff ff       	call   c001b790 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001caf6:	6a 00                	push   0x0
c001caf8:	6a 01                	push   0x1
c001cafa:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cb01:	50                   	push   eax
c001cb02:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cb08:	e8 83 ec ff ff       	call   c001b790 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cb0d:	83 c4 20             	add    esp,0x20
c001cb10:	0f b6 c3             	movzx  eax,bl
c001cb13:	0f b6 df             	movzx  ebx,bh
c001cb16:	50                   	push   eax
c001cb17:	6a 04                	push   0x4
c001cb19:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cb20:	50                   	push   eax
c001cb21:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cb27:	e8 64 ec ff ff       	call   c001b790 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cb2c:	53                   	push   ebx
c001cb2d:	6a 05                	push   0x5
c001cb2f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cb36:	50                   	push   eax
c001cb37:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cb3d:	e8 4e ec ff ff       	call   c001b790 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cb42:	83 c4 20             	add    esp,0x20
c001cb45:	68 a0 00 00 00       	push   0xa0
c001cb4a:	6a 07                	push   0x7
c001cb4c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cb53:	50                   	push   eax
c001cb54:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cb5a:	e8 31 ec ff ff       	call   c001b790 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cb5f:	83 c4 0c             	add    esp,0xc
c001cb62:	6a 01                	push   0x1
c001cb64:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cb6b:	50                   	push   eax
c001cb6c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cb72:	e8 c5 f7 ff ff       	call   c001c33c <IDE::polling(unsigned char, unsigned int)>
c001cb77:	83 c4 10             	add    esp,0x10
c001cb7a:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c001cb80:	84 c0                	test   al,al
c001cb82:	74 23                	je     c001cba7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001cb84:	0f b6 d8             	movzx  ebx,al
c001cb87:	0f b6 d2             	movzx  edx,dl
c001cb8a:	53                   	push   ebx
c001cb8b:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c001cb92:	50                   	push   eax
c001cb93:	52                   	push   edx
c001cb94:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cb9a:	e8 07 f6 ff ff       	call   c001c1a6 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001cb9f:	83 c4 10             	add    esp,0x10
c001cba2:	e9 84 01 00 00       	jmp    c001cd2b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001cba7:	0f b6 d2             	movzx  edx,dl
c001cbaa:	53                   	push   ebx
c001cbab:	53                   	push   ebx
c001cbac:	52                   	push   edx
c001cbad:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cbb3:	e8 c6 eb ff ff       	call   c001b77e <IDE::getBase(unsigned char)>
c001cbb8:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001cbbc:	b9 06 00 00 00       	mov    ecx,0x6
c001cbc1:	89 c2                	mov    edx,eax
c001cbc3:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001cbc6:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001cbca:	83 c4 10             	add    esp,0x10
c001cbcd:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001cbd3:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001cbda:	85 db                	test   ebx,ebx
c001cbdc:	0f 84 ec 00 00 00    	je     c001ccce <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001cbe2:	51                   	push   ecx
c001cbe3:	51                   	push   ecx
c001cbe4:	52                   	push   edx
c001cbe5:	50                   	push   eax
c001cbe6:	e8 13 ed ff ff       	call   c001b8fe <IDE::waitInterrupt(unsigned char)>
c001cbeb:	83 c4 10             	add    esp,0x10
c001cbee:	84 c0                	test   al,al
c001cbf0:	0f 84 d4 fe ff ff    	je     c001caca <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001cbf6:	56                   	push   esi
c001cbf7:	56                   	push   esi
c001cbf8:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cbff:	50                   	push   eax
c001cc00:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cc06:	e8 5f eb ff ff       	call   c001b76a <IDE::prepareInterrupt(unsigned char)>
c001cc0b:	83 c4 0c             	add    esp,0xc
c001cc0e:	6a 04                	push   0x4
c001cc10:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cc17:	50                   	push   eax
c001cc18:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cc1e:	e8 2d ec ff ff       	call   c001b850 <IDE::read(unsigned char, unsigned char)>
c001cc23:	83 c4 0c             	add    esp,0xc
c001cc26:	89 c6                	mov    esi,eax
c001cc28:	6a 05                	push   0x5
c001cc2a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cc31:	50                   	push   eax
c001cc32:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cc38:	e8 13 ec ff ff       	call   c001b850 <IDE::read(unsigned char, unsigned char)>
c001cc3d:	89 f1                	mov    ecx,esi
c001cc3f:	0f b6 c0             	movzx  eax,al
c001cc42:	0f b6 f1             	movzx  esi,cl
c001cc45:	c1 e0 08             	shl    eax,0x8
c001cc48:	09 c6                	or     esi,eax
c001cc4a:	d1 fe                	sar    esi,1
c001cc4c:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001cc50:	83 c4 10             	add    esp,0x10
c001cc53:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001cc58:	74 41                	je     c001cc9b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c001cc5a:	31 c9                	xor    ecx,ecx
c001cc5c:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001cc62:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001cc69:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001cc6d:	75 0a                	jne    c001cc79 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c001cc6f:	01 c9                	add    ecx,ecx
c001cc71:	01 cd                	add    ebp,ecx
c001cc73:	4b                   	dec    ebx
c001cc74:	e9 54 ff ff ff       	jmp    c001cbcd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c001cc79:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001cc7e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001cc82:	51                   	push   ecx
c001cc83:	51                   	push   ecx
c001cc84:	52                   	push   edx
c001cc85:	50                   	push   eax
c001cc86:	e8 f3 ea ff ff       	call   c001b77e <IDE::getBase(unsigned char)>
c001cc8b:	89 c2                	mov    edx,eax
c001cc8d:	89 f0                	mov    eax,esi
c001cc8f:	66 ef                	out    dx,ax
c001cc91:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001cc95:	83 c4 10             	add    esp,0x10
c001cc98:	41                   	inc    ecx
c001cc99:	eb c1                	jmp    c001cc5c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c001cc9b:	31 f6                	xor    esi,esi
c001cc9d:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001cca3:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001ccaa:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001ccae:	75 06                	jne    c001ccb6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c001ccb0:	01 f6                	add    esi,esi
c001ccb2:	01 f5                	add    ebp,esi
c001ccb4:	eb bd                	jmp    c001cc73 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c001ccb6:	51                   	push   ecx
c001ccb7:	51                   	push   ecx
c001ccb8:	52                   	push   edx
c001ccb9:	50                   	push   eax
c001ccba:	e8 bf ea ff ff       	call   c001b77e <IDE::getBase(unsigned char)>
c001ccbf:	89 c2                	mov    edx,eax
c001ccc1:	66 ed                	in     ax,dx
c001ccc3:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001ccc8:	83 c4 10             	add    esp,0x10
c001cccb:	46                   	inc    esi
c001cccc:	eb cf                	jmp    c001cc9d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c001ccce:	51                   	push   ecx
c001cccf:	51                   	push   ecx
c001ccd0:	52                   	push   edx
c001ccd1:	50                   	push   eax
c001ccd2:	e8 27 ec ff ff       	call   c001b8fe <IDE::waitInterrupt(unsigned char)>
c001ccd7:	83 c4 10             	add    esp,0x10
c001ccda:	84 c0                	test   al,al
c001ccdc:	0f 84 e8 fd ff ff    	je     c001caca <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001cce2:	bb a0 86 01 00       	mov    ebx,0x186a0
c001cce7:	52                   	push   edx
c001cce8:	52                   	push   edx
c001cce9:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ccf0:	50                   	push   eax
c001ccf1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ccf7:	e8 6e ea ff ff       	call   c001b76a <IDE::prepareInterrupt(unsigned char)>
c001ccfc:	83 c4 10             	add    esp,0x10
c001ccff:	50                   	push   eax
c001cd00:	50                   	push   eax
c001cd01:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cd08:	50                   	push   eax
c001cd09:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cd0f:	e8 6a ea ff ff       	call   c001b77e <IDE::getBase(unsigned char)>
c001cd14:	8d 50 07             	lea    edx,[eax+0x7]
c001cd17:	ec                   	in     al,dx
c001cd18:	83 c4 10             	add    esp,0x10
c001cd1b:	a8 88                	test   al,0x88
c001cd1d:	74 0a                	je     c001cd29 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001cd1f:	4b                   	dec    ebx
c001cd20:	75 dd                	jne    c001ccff <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001cd22:	bb 02 00 00 00       	mov    ebx,0x2
c001cd27:	eb 02                	jmp    c001cd2b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001cd29:	31 db                	xor    ebx,ebx
c001cd2b:	83 c4 1c             	add    esp,0x1c
c001cd2e:	89 d8                	mov    eax,ebx
c001cd30:	5b                   	pop    ebx
c001cd31:	5e                   	pop    esi
c001cd32:	5f                   	pop    edi
c001cd33:	5d                   	pop    ebp
c001cd34:	c3                   	ret    
c001cd35:	90                   	nop

c001cd36 <ATAPI::diskRemoved()>:
c001cd36:	83 ec 18             	sub    esp,0x18
c001cd39:	68 47 21 02 c0       	push   0xc0022147
c001cd3e:	e8 85 fd fe ff       	call   c000cac8 <kprintf(char const*, ...)>
c001cd43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cd47:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c001cd4e:	83 c4 1c             	add    esp,0x1c
c001cd51:	c3                   	ret    

c001cd52 <ATAPI::eject()>:
c001cd52:	57                   	push   edi
c001cd53:	b9 03 00 00 00       	mov    ecx,0x3
c001cd58:	53                   	push   ebx
c001cd59:	83 ec 14             	sub    esp,0x14
c001cd5c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001cd60:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001cd64:	fc                   	cld    
c001cd65:	31 c0                	xor    eax,eax
c001cd67:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001cd69:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001cd6e:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001cd73:	50                   	push   eax
c001cd74:	50                   	push   eax
c001cd75:	6a 00                	push   0x0
c001cd77:	6a 00                	push   0x0
c001cd79:	6a 00                	push   0x0
c001cd7b:	6a 02                	push   0x2
c001cd7d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001cd81:	50                   	push   eax
c001cd82:	53                   	push   ebx
c001cd83:	e8 ee fc ff ff       	call   c001ca76 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001cd88:	83 c4 14             	add    esp,0x14
c001cd8b:	53                   	push   ebx
c001cd8c:	e8 a5 ff ff ff       	call   c001cd36 <ATAPI::diskRemoved()>
c001cd91:	83 c4 24             	add    esp,0x24
c001cd94:	5b                   	pop    ebx
c001cd95:	5f                   	pop    edi
c001cd96:	c3                   	ret    
c001cd97:	90                   	nop

c001cd98 <ATAPI::diskInserted()>:
c001cd98:	53                   	push   ebx
c001cd99:	83 ec 14             	sub    esp,0x14
c001cd9c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001cda0:	68 5d 21 02 c0       	push   0xc002215d
c001cda5:	e8 1e fd fe ff       	call   c000cac8 <kprintf(char const*, ...)>
c001cdaa:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c001cdb1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cdb4:	e8 37 6a ff ff       	call   c00137f0 <PhysicalDisk::startCache()>
c001cdb9:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001cdbd:	83 c4 18             	add    esp,0x18
c001cdc0:	5b                   	pop    ebx
c001cdc1:	e9 82 82 ff ff       	jmp    c0015048 <createPartitionsForDisk(PhysicalDisk*)>

c001cdc6 <ATAPI::detectMedia()>:
c001cdc6:	56                   	push   esi
c001cdc7:	53                   	push   ebx
c001cdc8:	83 ec 28             	sub    esp,0x28
c001cdcb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001cdcf:	6a 0c                	push   0xc
c001cdd1:	6a 00                	push   0x0
c001cdd3:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001cdd7:	56                   	push   esi
c001cdd8:	e8 2b 38 fe ff       	call   c0000608 <memset>
c001cddd:	58                   	pop    eax
c001cdde:	5a                   	pop    edx
c001cddf:	6a 00                	push   0x0
c001cde1:	6a 00                	push   0x0
c001cde3:	6a 00                	push   0x0
c001cde5:	6a 00                	push   0x0
c001cde7:	56                   	push   esi
c001cde8:	53                   	push   ebx
c001cde9:	e8 88 fc ff ff       	call   c001ca76 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001cdee:	83 c4 1c             	add    esp,0x1c
c001cdf1:	6a 0c                	push   0xc
c001cdf3:	6a 00                	push   0x0
c001cdf5:	56                   	push   esi
c001cdf6:	e8 0d 38 fe ff       	call   c0000608 <memset>
c001cdfb:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001ce00:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001ce05:	59                   	pop    ecx
c001ce06:	58                   	pop    eax
c001ce07:	6a 01                	push   0x1
c001ce09:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001ce0d:	50                   	push   eax
c001ce0e:	6a 00                	push   0x0
c001ce10:	6a 12                	push   0x12
c001ce12:	56                   	push   esi
c001ce13:	53                   	push   ebx
c001ce14:	e8 5d fc ff ff       	call   c001ca76 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001ce19:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001ce1d:	83 c4 20             	add    esp,0x20
c001ce20:	83 e0 7f             	and    eax,0x7f
c001ce23:	3c 70                	cmp    al,0x70
c001ce25:	74 15                	je     c001ce3c <ATAPI::detectMedia()+0x76>
c001ce27:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001ce2e:	75 0c                	jne    c001ce3c <ATAPI::detectMedia()+0x76>
c001ce30:	83 ec 0c             	sub    esp,0xc
c001ce33:	53                   	push   ebx
c001ce34:	e8 5f ff ff ff       	call   c001cd98 <ATAPI::diskInserted()>
c001ce39:	83 c4 10             	add    esp,0x10
c001ce3c:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001ce40:	83 e0 0f             	and    eax,0xf
c001ce43:	3c 02                	cmp    al,0x2
c001ce45:	75 1b                	jne    c001ce62 <ATAPI::detectMedia()+0x9c>
c001ce47:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001ce4c:	75 2d                	jne    c001ce7b <ATAPI::detectMedia()+0xb5>
c001ce4e:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001ce55:	74 24                	je     c001ce7b <ATAPI::detectMedia()+0xb5>
c001ce57:	83 ec 0c             	sub    esp,0xc
c001ce5a:	53                   	push   ebx
c001ce5b:	e8 d6 fe ff ff       	call   c001cd36 <ATAPI::diskRemoved()>
c001ce60:	eb 16                	jmp    c001ce78 <ATAPI::detectMedia()+0xb2>
c001ce62:	84 c0                	test   al,al
c001ce64:	75 15                	jne    c001ce7b <ATAPI::detectMedia()+0xb5>
c001ce66:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001ce6d:	75 0c                	jne    c001ce7b <ATAPI::detectMedia()+0xb5>
c001ce6f:	83 ec 0c             	sub    esp,0xc
c001ce72:	53                   	push   ebx
c001ce73:	e8 20 ff ff ff       	call   c001cd98 <ATAPI::diskInserted()>
c001ce78:	83 c4 10             	add    esp,0x10
c001ce7b:	83 c4 24             	add    esp,0x24
c001ce7e:	5b                   	pop    ebx
c001ce7f:	5e                   	pop    esi
c001ce80:	c3                   	ret    
c001ce81:	90                   	nop

c001ce82 <ATAPI::open(int, int, void*)>:
c001ce82:	53                   	push   ebx
c001ce83:	83 ec 08             	sub    esp,0x8
c001ce86:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ce8a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ce8e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ce92:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001ce98:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001ce9e:	c1 e0 06             	shl    eax,0x6
c001cea1:	01 d0                	add    eax,edx
c001cea3:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001ceaa:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001ceb0:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001ceb7:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001cec1:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001cec7:	6a 04                	push   0x4
c001cec9:	6a 0c                	push   0xc
c001cecb:	51                   	push   ecx
c001cecc:	52                   	push   edx
c001cecd:	e8 be e8 ff ff       	call   c001b790 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ced2:	90                   	nop
c001ced3:	90                   	nop
c001ced4:	6a 00                	push   0x0
c001ced6:	6a 0c                	push   0xc
c001ced8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cedf:	50                   	push   eax
c001cee0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cee6:	e8 a5 e8 ff ff       	call   c001b790 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ceeb:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001cef2:	83 c4 14             	add    esp,0x14
c001cef5:	53                   	push   ebx
c001cef6:	e8 cb fe ff ff       	call   c001cdc6 <ATAPI::detectMedia()>
c001cefb:	31 c0                	xor    eax,eax
c001cefd:	83 c4 18             	add    esp,0x18
c001cf00:	5b                   	pop    ebx
c001cf01:	c3                   	ret    

c001cf02 <ATAPI::read(unsigned long long, int, void*)>:
c001cf02:	55                   	push   ebp
c001cf03:	57                   	push   edi
c001cf04:	56                   	push   esi
c001cf05:	53                   	push   ebx
c001cf06:	83 ec 1c             	sub    esp,0x1c
c001cf09:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001cf0d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001cf11:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001cf15:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c001cf1c:	74 41                	je     c001cf5f <ATAPI::read(unsigned long long, int, void*)+0x5d>
c001cf1e:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001cf22:	b9 03 00 00 00       	mov    ecx,0x3
c001cf27:	fc                   	cld    
c001cf28:	31 c0                	xor    eax,eax
c001cf2a:	86 fb                	xchg   bl,bh
c001cf2c:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001cf2e:	c1 c3 10             	rol    ebx,0x10
c001cf31:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001cf36:	89 e8                	mov    eax,ebp
c001cf38:	86 fb                	xchg   bl,bh
c001cf3a:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001cf3e:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c001cf42:	50                   	push   eax
c001cf43:	50                   	push   eax
c001cf44:	55                   	push   ebp
c001cf45:	c1 e5 0b             	shl    ebp,0xb
c001cf48:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001cf4c:	6a 00                	push   0x0
c001cf4e:	55                   	push   ebp
c001cf4f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001cf53:	50                   	push   eax
c001cf54:	56                   	push   esi
c001cf55:	e8 1c fb ff ff       	call   c001ca76 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001cf5a:	83 c4 20             	add    esp,0x20
c001cf5d:	eb 1a                	jmp    c001cf79 <ATAPI::read(unsigned long long, int, void*)+0x77>
c001cf5f:	83 ec 0c             	sub    esp,0xc
c001cf62:	56                   	push   esi
c001cf63:	e8 5e fe ff ff       	call   c001cdc6 <ATAPI::detectMedia()>
c001cf68:	83 c4 10             	add    esp,0x10
c001cf6b:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c001cf72:	75 aa                	jne    c001cf1e <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001cf74:	b8 02 00 00 00       	mov    eax,0x2
c001cf79:	83 c4 1c             	add    esp,0x1c
c001cf7c:	5b                   	pop    ebx
c001cf7d:	5e                   	pop    esi
c001cf7e:	5f                   	pop    edi
c001cf7f:	5d                   	pop    ebp
c001cf80:	c3                   	ret    
c001cf81:	90                   	nop

c001cf82 <AVX::open(int, int, void*)>:
c001cf82:	83 ec 0c             	sub    esp,0xc
c001cf85:	e8 0e 10 00 00       	call   c001df98 <avxInit>
c001cf8a:	b8 00 00 00 00       	mov    eax,0x0
c001cf8f:	83 c4 0c             	add    esp,0xc
c001cf92:	c3                   	ret    
c001cf93:	90                   	nop

c001cf94 <AVX::close(int, int, void*)>:
c001cf94:	83 ec 0c             	sub    esp,0xc
c001cf97:	e8 fd 0f 00 00       	call   c001df99 <avxClose>
c001cf9c:	b8 00 00 00 00       	mov    eax,0x0
c001cfa1:	83 c4 0c             	add    esp,0xc
c001cfa4:	c3                   	ret    
c001cfa5:	90                   	nop

c001cfa6 <AVX::available()>:
c001cfa6:	83 ec 0c             	sub    esp,0xc
c001cfa9:	e8 e2 0f 00 00       	call   c001df90 <avxDetect>
c001cfae:	85 c0                	test   eax,eax
c001cfb0:	0f 95 c0             	setne  al
c001cfb3:	83 c4 0c             	add    esp,0xc
c001cfb6:	c3                   	ret    
c001cfb7:	90                   	nop

c001cfb8 <AVX::save(void*)>:
c001cfb8:	83 ec 0c             	sub    esp,0xc
c001cfbb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cfbf:	83 ec 0c             	sub    esp,0xc
c001cfc2:	50                   	push   eax
c001cfc3:	e8 ce 0f 00 00       	call   c001df96 <avxSave>
c001cfc8:	83 c4 10             	add    esp,0x10
c001cfcb:	90                   	nop
c001cfcc:	83 c4 0c             	add    esp,0xc
c001cfcf:	c3                   	ret    

c001cfd0 <AVX::load(void*)>:
c001cfd0:	83 ec 0c             	sub    esp,0xc
c001cfd3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cfd7:	83 ec 0c             	sub    esp,0xc
c001cfda:	50                   	push   eax
c001cfdb:	e8 b7 0f 00 00       	call   c001df97 <avxLoad>
c001cfe0:	83 c4 10             	add    esp,0x10
c001cfe3:	90                   	nop
c001cfe4:	83 c4 0c             	add    esp,0xc
c001cfe7:	c3                   	ret    

c001cfe8 <AVX::AVX()>:
c001cfe8:	83 ec 0c             	sub    esp,0xc
c001cfeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cfef:	83 ec 08             	sub    esp,0x8
c001cff2:	68 a8 21 02 c0       	push   0xc00221a8
c001cff7:	50                   	push   eax
c001cff8:	e8 69 68 ff ff       	call   c0013866 <FPU::FPU(char const*)>
c001cffd:	83 c4 10             	add    esp,0x10
c001d000:	ba b8 21 02 c0       	mov    edx,0xc00221b8
c001d005:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d009:	89 10                	mov    DWORD PTR [eax],edx
c001d00b:	90                   	nop
c001d00c:	83 c4 0c             	add    esp,0xc
c001d00f:	c3                   	ret    

c001d010 <MMX::available()>:
c001d010:	a1 c8 30 02 c0       	mov    eax,ds:0xc00230c8
c001d015:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001d01b:	83 e0 20             	and    eax,0x20
c001d01e:	84 c0                	test   al,al
c001d020:	0f 95 c0             	setne  al
c001d023:	c3                   	ret    

c001d024 <MMX::open(int, int, void*)>:
c001d024:	83 ec 0c             	sub    esp,0xc
c001d027:	e8 e0 0f 00 00       	call   c001e00c <x87Init>
c001d02c:	b8 00 00 00 00       	mov    eax,0x0
c001d031:	83 c4 0c             	add    esp,0xc
c001d034:	c3                   	ret    
c001d035:	90                   	nop

c001d036 <MMX::close(int, int, void*)>:
c001d036:	83 ec 0c             	sub    esp,0xc
c001d039:	e8 e8 0f 00 00       	call   c001e026 <x87Close>
c001d03e:	b8 00 00 00 00       	mov    eax,0x0
c001d043:	83 c4 0c             	add    esp,0xc
c001d046:	c3                   	ret    
c001d047:	90                   	nop

c001d048 <MMX::save(void*)>:
c001d048:	83 ec 0c             	sub    esp,0xc
c001d04b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d04f:	83 ec 0c             	sub    esp,0xc
c001d052:	50                   	push   eax
c001d053:	e8 a9 0f 00 00       	call   c001e001 <x87Save>
c001d058:	83 c4 10             	add    esp,0x10
c001d05b:	90                   	nop
c001d05c:	83 c4 0c             	add    esp,0xc
c001d05f:	c3                   	ret    

c001d060 <MMX::load(void*)>:
c001d060:	83 ec 0c             	sub    esp,0xc
c001d063:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d067:	83 ec 0c             	sub    esp,0xc
c001d06a:	50                   	push   eax
c001d06b:	e8 97 0f 00 00       	call   c001e007 <x87Load>
c001d070:	83 c4 10             	add    esp,0x10
c001d073:	90                   	nop
c001d074:	83 c4 0c             	add    esp,0xc
c001d077:	c3                   	ret    

c001d078 <MMX::MMX()>:
c001d078:	83 ec 0c             	sub    esp,0xc
c001d07b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d07f:	83 ec 08             	sub    esp,0x8
c001d082:	68 e8 21 02 c0       	push   0xc00221e8
c001d087:	50                   	push   eax
c001d088:	e8 d9 67 ff ff       	call   c0013866 <FPU::FPU(char const*)>
c001d08d:	83 c4 10             	add    esp,0x10
c001d090:	ba f8 21 02 c0       	mov    edx,0xc00221f8
c001d095:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d099:	89 10                	mov    DWORD PTR [eax],edx
c001d09b:	90                   	nop
c001d09c:	83 c4 0c             	add    esp,0xc
c001d09f:	c3                   	ret    

c001d0a0 <SSE::open(int, int, void*)>:
c001d0a0:	83 ec 0c             	sub    esp,0xc
c001d0a3:	e8 1f 0f 00 00       	call   c001dfc7 <sseInit>
c001d0a8:	b8 00 00 00 00       	mov    eax,0x0
c001d0ad:	83 c4 0c             	add    esp,0xc
c001d0b0:	c3                   	ret    
c001d0b1:	90                   	nop

c001d0b2 <SSE::close(int, int, void*)>:
c001d0b2:	83 ec 0c             	sub    esp,0xc
c001d0b5:	e8 1d 0f 00 00       	call   c001dfd7 <sseClose>
c001d0ba:	b8 00 00 00 00       	mov    eax,0x0
c001d0bf:	83 c4 0c             	add    esp,0xc
c001d0c2:	c3                   	ret    
c001d0c3:	90                   	nop

c001d0c4 <SSE::available()>:
c001d0c4:	83 ec 1c             	sub    esp,0x1c
c001d0c7:	e8 d4 0e 00 00       	call   c001dfa0 <sseDetect>
c001d0cc:	85 c0                	test   eax,eax
c001d0ce:	0f 95 c0             	setne  al
c001d0d1:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001d0d5:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001d0d9:	83 c4 1c             	add    esp,0x1c
c001d0dc:	c3                   	ret    
c001d0dd:	90                   	nop

c001d0de <SSE::save(void*)>:
c001d0de:	83 ec 0c             	sub    esp,0xc
c001d0e1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d0e5:	83 ec 0c             	sub    esp,0xc
c001d0e8:	50                   	push   eax
c001d0e9:	e8 cd 0e 00 00       	call   c001dfbb <sseSave>
c001d0ee:	83 c4 10             	add    esp,0x10
c001d0f1:	90                   	nop
c001d0f2:	83 c4 0c             	add    esp,0xc
c001d0f5:	c3                   	ret    

c001d0f6 <SSE::load(void*)>:
c001d0f6:	83 ec 0c             	sub    esp,0xc
c001d0f9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d0fd:	83 ec 0c             	sub    esp,0xc
c001d100:	50                   	push   eax
c001d101:	e8 bb 0e 00 00       	call   c001dfc1 <sseLoad>
c001d106:	83 c4 10             	add    esp,0x10
c001d109:	90                   	nop
c001d10a:	83 c4 0c             	add    esp,0xc
c001d10d:	c3                   	ret    

c001d10e <SSE::SSE()>:
c001d10e:	83 ec 0c             	sub    esp,0xc
c001d111:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d115:	83 ec 08             	sub    esp,0x8
c001d118:	68 28 22 02 c0       	push   0xc0022228
c001d11d:	50                   	push   eax
c001d11e:	e8 43 67 ff ff       	call   c0013866 <FPU::FPU(char const*)>
c001d123:	83 c4 10             	add    esp,0x10
c001d126:	ba 38 22 02 c0       	mov    edx,0xc0022238
c001d12b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d12f:	89 10                	mov    DWORD PTR [eax],edx
c001d131:	90                   	nop
c001d132:	83 c4 0c             	add    esp,0xc
c001d135:	c3                   	ret    

c001d136 <x87::open(int, int, void*)>:
c001d136:	83 ec 0c             	sub    esp,0xc
c001d139:	e8 ce 0e 00 00       	call   c001e00c <x87Init>
c001d13e:	b8 00 00 00 00       	mov    eax,0x0
c001d143:	83 c4 0c             	add    esp,0xc
c001d146:	c3                   	ret    
c001d147:	90                   	nop

c001d148 <x87::close(int, int, void*)>:
c001d148:	83 ec 0c             	sub    esp,0xc
c001d14b:	e8 d6 0e 00 00       	call   c001e026 <x87Close>
c001d150:	b8 00 00 00 00       	mov    eax,0x0
c001d155:	83 c4 0c             	add    esp,0xc
c001d158:	c3                   	ret    
c001d159:	90                   	nop

c001d15a <x87::available()>:
c001d15a:	83 ec 0c             	sub    esp,0xc
c001d15d:	e8 84 0e 00 00       	call   c001dfe6 <x87Detect>
c001d162:	85 c0                	test   eax,eax
c001d164:	0f 95 c0             	setne  al
c001d167:	83 c4 0c             	add    esp,0xc
c001d16a:	c3                   	ret    
c001d16b:	90                   	nop

c001d16c <x87::save(void*)>:
c001d16c:	83 ec 0c             	sub    esp,0xc
c001d16f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d173:	83 ec 0c             	sub    esp,0xc
c001d176:	50                   	push   eax
c001d177:	e8 85 0e 00 00       	call   c001e001 <x87Save>
c001d17c:	83 c4 10             	add    esp,0x10
c001d17f:	90                   	nop
c001d180:	83 c4 0c             	add    esp,0xc
c001d183:	c3                   	ret    

c001d184 <x87::load(void*)>:
c001d184:	83 ec 0c             	sub    esp,0xc
c001d187:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d18b:	83 ec 0c             	sub    esp,0xc
c001d18e:	50                   	push   eax
c001d18f:	e8 73 0e 00 00       	call   c001e007 <x87Load>
c001d194:	83 c4 10             	add    esp,0x10
c001d197:	90                   	nop
c001d198:	83 c4 0c             	add    esp,0xc
c001d19b:	c3                   	ret    

c001d19c <x87::x87()>:
c001d19c:	83 ec 0c             	sub    esp,0xc
c001d19f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d1a3:	83 ec 08             	sub    esp,0x8
c001d1a6:	68 68 22 02 c0       	push   0xc0022268
c001d1ab:	50                   	push   eax
c001d1ac:	e8 b5 66 ff ff       	call   c0013866 <FPU::FPU(char const*)>
c001d1b1:	83 c4 10             	add    esp,0x10
c001d1b4:	ba 78 22 02 c0       	mov    edx,0xc0022278
c001d1b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d1bd:	89 10                	mov    DWORD PTR [eax],edx
c001d1bf:	90                   	nop
c001d1c0:	83 c4 0c             	add    esp,0xc
c001d1c3:	c3                   	ret    

c001d1c4 <APIC::disable()>:
c001d1c4:	90                   	nop
c001d1c5:	c3                   	ret    

c001d1c6 <APIC::close(int, int, void*)>:
c001d1c6:	55                   	push   ebp
c001d1c7:	89 e5                	mov    ebp,esp
c001d1c9:	83 ec 08             	sub    esp,0x8
c001d1cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d1cf:	8b 00                	mov    eax,DWORD PTR [eax]
c001d1d1:	83 c0 3c             	add    eax,0x3c
c001d1d4:	8b 00                	mov    eax,DWORD PTR [eax]
c001d1d6:	83 ec 0c             	sub    esp,0xc
c001d1d9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d1dc:	ff d0                	call   eax
c001d1de:	83 c4 10             	add    esp,0x10
c001d1e1:	b8 00 00 00 00       	mov    eax,0x0
c001d1e6:	c9                   	leave  
c001d1e7:	c3                   	ret    

c001d1e8 <IOAPIC::close(int, int, void*)>:
c001d1e8:	b8 00 00 00 00       	mov    eax,0x0
c001d1ed:	c3                   	ret    

c001d1ee <APIC::io_wait()>:
c001d1ee:	eb 00                	jmp    c001d1f0 <APIC::io_wait()+0x2>
c001d1f0:	eb 00                	jmp    c001d1f2 <APIC::io_wait()+0x4>
c001d1f2:	90                   	nop
c001d1f3:	c3                   	ret    

c001d1f4 <APIC::getBase()>:
c001d1f4:	55                   	push   ebp
c001d1f5:	89 e5                	mov    ebp,esp
c001d1f7:	83 ec 18             	sub    esp,0x18
c001d1fa:	a1 c8 30 02 c0       	mov    eax,ds:0xc00230c8
c001d1ff:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001d205:	83 e0 08             	and    eax,0x8
c001d208:	84 c0                	test   al,al
c001d20a:	75 07                	jne    c001d213 <APIC::getBase()+0x1f>
c001d20c:	b8 00 00 00 00       	mov    eax,0x0
c001d211:	eb 21                	jmp    c001d234 <APIC::getBase()+0x40>
c001d213:	a1 c8 30 02 c0       	mov    eax,ds:0xc00230c8
c001d218:	83 ec 08             	sub    esp,0x8
c001d21b:	6a 1b                	push   0x1b
c001d21d:	50                   	push   eax
c001d21e:	e8 a1 df fe ff       	call   c000b1c4 <Computer::rdmsr(unsigned int)>
c001d223:	83 c4 10             	add    esp,0x10
c001d226:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001d229:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001d22c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d22f:	25 00 f0 ff ff       	and    eax,0xfffff000
c001d234:	c9                   	leave  
c001d235:	c3                   	ret    

c001d236 <APIC::eoi(unsigned char)>:
c001d236:	55                   	push   ebp
c001d237:	89 e5                	mov    ebp,esp
c001d239:	83 ec 28             	sub    esp,0x28
c001d23c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d23f:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001d242:	83 ec 0c             	sub    esp,0xc
c001d245:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d248:	e8 a7 ff ff ff       	call   c001d1f4 <APIC::getBase()>
c001d24d:	83 c4 10             	add    esp,0x10
c001d250:	05 b0 00 00 00       	add    eax,0xb0
c001d255:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001d258:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001d25b:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001d261:	90                   	nop
c001d262:	c9                   	leave  
c001d263:	c3                   	ret    

c001d264 <APIC::open(int, int, void*)>:
c001d264:	55                   	push   ebp
c001d265:	89 e5                	mov    ebp,esp
c001d267:	57                   	push   edi
c001d268:	56                   	push   esi
c001d269:	53                   	push   ebx
c001d26a:	83 ec 1c             	sub    esp,0x1c
c001d26d:	83 ec 0c             	sub    esp,0xc
c001d270:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d273:	e8 7c ff ff ff       	call   c001d1f4 <APIC::getBase()>
c001d278:	83 c4 10             	add    esp,0x10
c001d27b:	05 f0 00 00 00       	add    eax,0xf0
c001d280:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001d283:	83 ec 0c             	sub    esp,0xc
c001d286:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d289:	e8 66 ff ff ff       	call   c001d1f4 <APIC::getBase()>
c001d28e:	83 c4 10             	add    esp,0x10
c001d291:	89 c2                	mov    edx,eax
c001d293:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d296:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001d29c:	0f b6 f8             	movzx  edi,al
c001d29f:	89 d0                	mov    eax,edx
c001d2a1:	ba 00 00 00 00       	mov    edx,0x0
c001d2a6:	89 c1                	mov    ecx,eax
c001d2a8:	80 e5 ff             	and    ch,0xff
c001d2ab:	89 cb                	mov    ebx,ecx
c001d2ad:	0f b6 f2             	movzx  esi,dl
c001d2b0:	89 d8                	mov    eax,ebx
c001d2b2:	89 f2                	mov    edx,esi
c001d2b4:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001d2b7:	8d 5f 08             	lea    ebx,[edi+0x8]
c001d2ba:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001d2be:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001d2c2:	83 e0 00             	and    eax,0x0
c001d2c5:	09 d0                	or     eax,edx
c001d2c7:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001d2cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d2ce:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001d2d4:	8d 50 01             	lea    edx,[eax+0x1]
c001d2d7:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001d2da:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001d2e0:	0f b6 d0             	movzx  edx,al
c001d2e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d2e6:	83 c2 08             	add    edx,0x8
c001d2e9:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001d2ed:	0f b6 c9             	movzx  ecx,cl
c001d2f0:	81 c9 00 00 01 00    	or     ecx,0x10000
c001d2f6:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001d2fa:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001d2fd:	8b 00                	mov    eax,DWORD PTR [eax]
c001d2ff:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001d302:	81 4d e0 00 01 00 00 	or     DWORD PTR [ebp-0x20],0x100
c001d309:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001d30c:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c001d30f:	89 10                	mov    DWORD PTR [eax],edx
c001d311:	b8 00 00 00 00       	mov    eax,0x0
c001d316:	8d 65 f4             	lea    esp,[ebp-0xc]
c001d319:	5b                   	pop    ebx
c001d31a:	5e                   	pop    esi
c001d31b:	5f                   	pop    edi
c001d31c:	5d                   	pop    ebp
c001d31d:	c3                   	ret    

c001d31e <IOAPIC::IOAPIC()>:
c001d31e:	83 ec 0c             	sub    esp,0xc
c001d321:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d325:	83 ec 08             	sub    esp,0x8
c001d328:	68 a8 22 02 c0       	push   0xc00222a8
c001d32d:	50                   	push   eax
c001d32e:	e8 3f 62 ff ff       	call   c0013572 <Device::Device(char const*)>
c001d333:	83 c4 10             	add    esp,0x10
c001d336:	ba d0 23 02 c0       	mov    edx,0xc00223d0
c001d33b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d33f:	89 10                	mov    DWORD PTR [eax],edx
c001d341:	90                   	nop
c001d342:	83 c4 0c             	add    esp,0xc
c001d345:	c3                   	ret    

c001d346 <APIC::APIC()>:
c001d346:	53                   	push   ebx
c001d347:	83 ec 18             	sub    esp,0x18
c001d34a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d34e:	83 ec 08             	sub    esp,0x8
c001d351:	68 b0 22 02 c0       	push   0xc00222b0
c001d356:	50                   	push   eax
c001d357:	e8 3e 69 ff ff       	call   c0013c9a <InterruptController::InterruptController(char const*)>
c001d35c:	83 c4 10             	add    esp,0x10
c001d35f:	ba 88 23 02 c0       	mov    edx,0xc0022388
c001d364:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d368:	89 10                	mov    DWORD PTR [eax],edx
c001d36a:	a0 00 48 02 c0       	mov    al,ds:0xc0024800
c001d36f:	83 f0 01             	xor    eax,0x1
c001d372:	84 c0                	test   al,al
c001d374:	0f 84 96 00 00 00    	je     c001d410 <APIC::APIC()+0xca>
c001d37a:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001d37f:	a0 d0 3c 02 c0       	mov    al,ds:0xc0023cd0
c001d384:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c001d388:	73 7f                	jae    c001d409 <APIC::APIC()+0xc3>
c001d38a:	83 ec 0c             	sub    esp,0xc
c001d38d:	68 68 01 00 00       	push   0x168
c001d392:	e8 e1 4c ff ff       	call   c0012078 <operator new(unsigned long)>
c001d397:	83 c4 10             	add    esp,0x10
c001d39a:	89 c3                	mov    ebx,eax
c001d39c:	83 ec 0c             	sub    esp,0xc
c001d39f:	53                   	push   ebx
c001d3a0:	e8 79 ff ff ff       	call   c001d31e <IOAPIC::IOAPIC()>
c001d3a5:	83 c4 10             	add    esp,0x10
c001d3a8:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001d3ac:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001d3b1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d3b5:	89 14 85 e0 47 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb820],edx
c001d3bc:	a1 c0 47 02 c0       	mov    eax,ds:0xc00247c0
c001d3c1:	40                   	inc    eax
c001d3c2:	a3 c0 47 02 c0       	mov    ds:0xc00247c0,eax
c001d3c7:	a1 c8 30 02 c0       	mov    eax,ds:0xc00230c8
c001d3cc:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001d3d2:	83 ec 08             	sub    esp,0x8
c001d3d5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001d3d9:	50                   	push   eax
c001d3da:	e8 a3 5f ff ff       	call   c0013382 <Device::addChild(Device*)>
c001d3df:	83 c4 10             	add    esp,0x10
c001d3e2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d3e6:	8b 00                	mov    eax,DWORD PTR [eax]
c001d3e8:	83 c0 08             	add    eax,0x8
c001d3eb:	8b 00                	mov    eax,DWORD PTR [eax]
c001d3ed:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001d3f2:	6a 00                	push   0x0
c001d3f4:	6a 00                	push   0x0
c001d3f6:	52                   	push   edx
c001d3f7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d3fb:	ff d0                	call   eax
c001d3fd:	83 c4 10             	add    esp,0x10
c001d400:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c001d404:	e9 76 ff ff ff       	jmp    c001d37f <APIC::APIC()+0x39>
c001d409:	c6 05 00 48 02 c0 01 	mov    BYTE PTR ds:0xc0024800,0x1
c001d410:	90                   	nop
c001d411:	83 c4 18             	add    esp,0x18
c001d414:	5b                   	pop    ebx
c001d415:	c3                   	ret    

c001d416 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001d416:	55                   	push   ebp
c001d417:	89 e5                	mov    ebp,esp
c001d419:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d41c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d422:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001d425:	72 1d                	jb     c001d444 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001d427:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d42a:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001d430:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d433:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001d439:	01 d0                	add    eax,edx
c001d43b:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001d43e:	73 04                	jae    c001d444 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001d440:	b0 01                	mov    al,0x1
c001d442:	eb 02                	jmp    c001d446 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001d444:	b0 00                	mov    al,0x0
c001d446:	5d                   	pop    ebp
c001d447:	c3                   	ret    

c001d448 <IOAPIC::read(int)>:
c001d448:	55                   	push   ebp
c001d449:	89 e5                	mov    ebp,esp
c001d44b:	83 ec 10             	sub    esp,0x10
c001d44e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d451:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001d457:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001d45a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d45d:	0f b6 d0             	movzx  edx,al
c001d460:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d463:	89 10                	mov    DWORD PTR [eax],edx
c001d465:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d468:	83 c0 10             	add    eax,0x10
c001d46b:	8b 00                	mov    eax,DWORD PTR [eax]
c001d46d:	c9                   	leave  
c001d46e:	c3                   	ret    
c001d46f:	90                   	nop

c001d470 <IOAPIC::open(int, int, void*)>:
c001d470:	55                   	push   ebp
c001d471:	89 e5                	mov    ebp,esp
c001d473:	57                   	push   edi
c001d474:	56                   	push   esi
c001d475:	53                   	push   ebx
c001d476:	83 ec 0c             	sub    esp,0xc
c001d479:	83 ec 0c             	sub    esp,0xc
c001d47c:	68 db 22 02 c0       	push   0xc00222db
c001d481:	e8 42 f6 fe ff       	call   c000cac8 <kprintf(char const*, ...)>
c001d486:	83 c4 10             	add    esp,0x10
c001d489:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d48c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001d48f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001d495:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d498:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d49e:	8b 14 85 00 3d 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdc300]
c001d4a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d4a8:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001d4ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d4b1:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d4b7:	8b 14 85 80 3d 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdc280]
c001d4be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d4c1:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001d4c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d4ca:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001d4d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d4d3:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001d4d9:	0f b6 f8             	movzx  edi,al
c001d4dc:	89 d0                	mov    eax,edx
c001d4de:	ba 00 00 00 00       	mov    edx,0x0
c001d4e3:	89 c1                	mov    ecx,eax
c001d4e5:	80 e5 ff             	and    ch,0xff
c001d4e8:	89 cb                	mov    ebx,ecx
c001d4ea:	0f b6 f2             	movzx  esi,dl
c001d4ed:	89 d8                	mov    eax,ebx
c001d4ef:	89 f2                	mov    edx,esi
c001d4f1:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001d4f4:	8d 5f 08             	lea    ebx,[edi+0x8]
c001d4f7:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001d4fb:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001d4ff:	83 e0 00             	and    eax,0x0
c001d502:	09 d0                	or     eax,edx
c001d504:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001d508:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d50b:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001d511:	8d 50 01             	lea    edx,[eax+0x1]
c001d514:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001d517:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001d51d:	0f b6 d0             	movzx  edx,al
c001d520:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d523:	83 c2 08             	add    edx,0x8
c001d526:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001d52a:	0f b6 c9             	movzx  ecx,cl
c001d52d:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001d533:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001d537:	83 ec 08             	sub    esp,0x8
c001d53a:	6a 01                	push   0x1
c001d53c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d53f:	e8 04 ff ff ff       	call   c001d448 <IOAPIC::read(int)>
c001d544:	83 c4 10             	add    esp,0x10
c001d547:	c1 f8 10             	sar    eax,0x10
c001d54a:	0f b6 c0             	movzx  eax,al
c001d54d:	8d 50 01             	lea    edx,[eax+0x1]
c001d550:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d553:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001d559:	b8 00 00 00 00       	mov    eax,0x0
c001d55e:	8d 65 f4             	lea    esp,[ebp-0xc]
c001d561:	5b                   	pop    ebx
c001d562:	5e                   	pop    esi
c001d563:	5f                   	pop    edi
c001d564:	5d                   	pop    ebp
c001d565:	c3                   	ret    

c001d566 <IOAPIC::write(int, int)>:
c001d566:	55                   	push   ebp
c001d567:	89 e5                	mov    ebp,esp
c001d569:	83 ec 10             	sub    esp,0x10
c001d56c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d56f:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001d575:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001d578:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d57b:	0f b6 d0             	movzx  edx,al
c001d57e:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d581:	89 10                	mov    DWORD PTR [eax],edx
c001d583:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d586:	8d 50 10             	lea    edx,[eax+0x10]
c001d589:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001d58c:	89 02                	mov    DWORD PTR [edx],eax
c001d58e:	90                   	nop
c001d58f:	c9                   	leave  
c001d590:	c3                   	ret    
c001d591:	90                   	nop

c001d592 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char)>:
c001d592:	55                   	push   ebp
c001d593:	89 e5                	mov    ebp,esp
c001d595:	83 ec 20             	sub    esp,0x20
c001d598:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d59b:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001d59e:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c001d5a1:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001d5a4:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001d5a7:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001d5aa:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001d5ad:	88 d0                	mov    al,dl
c001d5af:	88 45 e8             	mov    BYTE PTR [ebp-0x18],al
c001d5b2:	0f b6 45 ec          	movzx  eax,BYTE PTR [ebp-0x14]
c001d5b6:	83 c0 08             	add    eax,0x8
c001d5b9:	01 c0                	add    eax,eax
c001d5bb:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001d5be:	0f b6 45 ec          	movzx  eax,BYTE PTR [ebp-0x14]
c001d5c2:	83 c0 08             	add    eax,0x8
c001d5c5:	01 c0                	add    eax,eax
c001d5c7:	40                   	inc    eax
c001d5c8:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
c001d5cb:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c001d5ce:	50                   	push   eax
c001d5cf:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d5d2:	e8 71 fe ff ff       	call   c001d448 <IOAPIC::read(int)>
c001d5d7:	83 c4 08             	add    esp,0x8
c001d5da:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001d5dd:	81 65 f4 ff ff ff 00 	and    DWORD PTR [ebp-0xc],0xffffff
c001d5e4:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c001d5e7:	c1 e0 18             	shl    eax,0x18
c001d5ea:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001d5ed:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001d5f0:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c001d5f3:	52                   	push   edx
c001d5f4:	50                   	push   eax
c001d5f5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d5f8:	e8 69 ff ff ff       	call   c001d566 <IOAPIC::write(int, int)>
c001d5fd:	83 c4 0c             	add    esp,0xc
c001d600:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d603:	50                   	push   eax
c001d604:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d607:	e8 3c fe ff ff       	call   c001d448 <IOAPIC::read(int)>
c001d60c:	83 c4 08             	add    esp,0x8
c001d60f:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001d612:	81 65 f0 ff ff fe ff 	and    DWORD PTR [ebp-0x10],0xfffeffff
c001d619:	81 65 f0 ff f7 ff ff 	and    DWORD PTR [ebp-0x10],0xfffff7ff
c001d620:	81 65 f0 ff f8 ff ff 	and    DWORD PTR [ebp-0x10],0xfffff8ff
c001d627:	81 65 f0 00 ff ff ff 	and    DWORD PTR [ebp-0x10],0xffffff00
c001d62e:	0f b6 45 e8          	movzx  eax,BYTE PTR [ebp-0x18]
c001d632:	09 45 f0             	or     DWORD PTR [ebp-0x10],eax
c001d635:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c001d638:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d63b:	52                   	push   edx
c001d63c:	50                   	push   eax
c001d63d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d640:	e8 21 ff ff ff       	call   c001d566 <IOAPIC::write(int, int)>
c001d645:	83 c4 0c             	add    esp,0xc
c001d648:	90                   	nop
c001d649:	c9                   	leave  
c001d64a:	c3                   	ret    
c001d64b:	90                   	nop

c001d64c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001d64c:	55                   	push   ebp
c001d64d:	89 e5                	mov    ebp,esp
c001d64f:	56                   	push   esi
c001d650:	53                   	push   ebx
c001d651:	83 ec 20             	sub    esp,0x20
c001d654:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001d657:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001d65a:	80 7d e4 00          	cmp    BYTE PTR [ebp-0x1c],0x0
c001d65e:	74 28                	je     c001d688 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3c>
c001d660:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c001d664:	7f 12                	jg     c001d678 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x2c>
c001d666:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d669:	05 20 28 02 c0       	add    eax,0xc0022820
c001d66e:	8a 00                	mov    al,BYTE PTR [eax]
c001d670:	0f b6 c0             	movzx  eax,al
c001d673:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c001d676:	eb 10                	jmp    c001d688 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3c>
c001d678:	83 ec 0c             	sub    esp,0xc
c001d67b:	68 ec 22 02 c0       	push   0xc00222ec
c001d680:	e8 61 f5 fe ff       	call   c000cbe6 <panic(char const*)>
c001d685:	83 c4 10             	add    esp,0x10
c001d688:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001d68c:	a1 c0 47 02 c0       	mov    eax,ds:0xc00247c0
c001d691:	83 ec 08             	sub    esp,0x8
c001d694:	50                   	push   eax
c001d695:	68 24 23 02 c0       	push   0xc0022324
c001d69a:	e8 29 f4 fe ff       	call   c000cac8 <kprintf(char const*, ...)>
c001d69f:	83 c4 10             	add    esp,0x10
c001d6a2:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001d6a9:	a1 c0 47 02 c0       	mov    eax,ds:0xc00247c0
c001d6ae:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001d6b1:	7d 58                	jge    c001d70b <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xbf>
c001d6b3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d6b6:	8b 04 85 e0 47 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb820]
c001d6bd:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001d6c0:	83 ec 08             	sub    esp,0x8
c001d6c3:	52                   	push   edx
c001d6c4:	50                   	push   eax
c001d6c5:	e8 4c fd ff ff       	call   c001d416 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c001d6ca:	83 c4 10             	add    esp,0x10
c001d6cd:	84 c0                	test   al,al
c001d6cf:	74 35                	je     c001d706 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xba>
c001d6d1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d6d4:	8b 1c 85 e0 47 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffdb820]
c001d6db:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d6de:	83 c0 20             	add    eax,0x20
c001d6e1:	0f b6 f0             	movzx  esi,al
c001d6e4:	e8 c2 96 ff ff       	call   c0016dab <getCPUNumber()>
c001d6e9:	99                   	cdq    
c001d6ea:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c001d6ed:	0f b6 c9             	movzx  ecx,cl
c001d6f0:	83 ec 0c             	sub    esp,0xc
c001d6f3:	56                   	push   esi
c001d6f4:	52                   	push   edx
c001d6f5:	50                   	push   eax
c001d6f6:	51                   	push   ecx
c001d6f7:	53                   	push   ebx
c001d6f8:	e8 95 fe ff ff       	call   c001d592 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char)>
c001d6fd:	83 c4 20             	add    esp,0x20
c001d700:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001d704:	eb 05                	jmp    c001d70b <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xbf>
c001d706:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
c001d709:	eb 9e                	jmp    c001d6a9 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x5d>
c001d70b:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001d70e:	83 f0 01             	xor    eax,0x1
c001d711:	84 c0                	test   al,al
c001d713:	74 10                	je     c001d725 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xd9>
c001d715:	83 ec 0c             	sub    esp,0xc
c001d718:	68 3b 23 02 c0       	push   0xc002233b
c001d71d:	e8 c4 f4 fe ff       	call   c000cbe6 <panic(char const*)>
c001d722:	83 c4 10             	add    esp,0x10
c001d725:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c001d729:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001d730:	83 7d ec 03          	cmp    DWORD PTR [ebp-0x14],0x3
c001d734:	7f 65                	jg     c001d79b <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x14f>
c001d736:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d739:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001d73c:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001d743:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001d746:	01 ca                	add    edx,ecx
c001d748:	83 c2 54             	add    edx,0x54
c001d74b:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c001d74f:	85 c0                	test   eax,eax
c001d751:	75 43                	jne    c001d796 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x14a>
c001d753:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d756:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001d759:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001d760:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001d763:	01 ca                	add    edx,ecx
c001d765:	8d 4a 54             	lea    ecx,[edx+0x54]
c001d768:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c001d76b:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c001d76f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d772:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001d775:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001d77c:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001d77f:	01 ca                	add    edx,ecx
c001d781:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c001d787:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001d78a:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c001d78e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d791:	83 e8 20             	sub    eax,0x20
c001d794:	eb 1a                	jmp    c001d7b0 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x164>
c001d796:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c001d799:	eb 95                	jmp    c001d730 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xe4>
c001d79b:	83 ec 0c             	sub    esp,0xc
c001d79e:	68 48 23 02 c0       	push   0xc0022348
c001d7a3:	e8 3e f4 fe ff       	call   c000cbe6 <panic(char const*)>
c001d7a8:	83 c4 10             	add    esp,0x10
c001d7ab:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001d7b0:	8d 65 f8             	lea    esp,[ebp-0x8]
c001d7b3:	5b                   	pop    ebx
c001d7b4:	5e                   	pop    esi
c001d7b5:	5d                   	pop    ebp
c001d7b6:	c3                   	ret    
c001d7b7:	90                   	nop

c001d7b8 <PIC::disable()>:
c001d7b8:	55                   	push   ebp
c001d7b9:	89 e5                	mov    ebp,esp
c001d7bb:	83 ec 10             	sub    esp,0x10
c001d7be:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c001d7c4:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c001d7c8:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c001d7cb:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c001d7cf:	ee                   	out    dx,al
c001d7d0:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c001d7d6:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c001d7da:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c001d7dd:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c001d7e1:	ee                   	out    dx,al
c001d7e2:	90                   	nop
c001d7e3:	c9                   	leave  
c001d7e4:	c3                   	ret    
c001d7e5:	90                   	nop

c001d7e6 <PIC::close(int, int, void*)>:
c001d7e6:	55                   	push   ebp
c001d7e7:	89 e5                	mov    ebp,esp
c001d7e9:	83 ec 08             	sub    esp,0x8
c001d7ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d7ef:	8b 00                	mov    eax,DWORD PTR [eax]
c001d7f1:	83 c0 3c             	add    eax,0x3c
c001d7f4:	8b 00                	mov    eax,DWORD PTR [eax]
c001d7f6:	83 ec 0c             	sub    esp,0xc
c001d7f9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d7fc:	ff d0                	call   eax
c001d7fe:	83 c4 10             	add    esp,0x10
c001d801:	b8 00 00 00 00       	mov    eax,0x0
c001d806:	c9                   	leave  
c001d807:	c3                   	ret    

c001d808 <PIC::PIC()>:
c001d808:	83 ec 0c             	sub    esp,0xc
c001d80b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d80f:	83 ec 08             	sub    esp,0x8
c001d812:	68 f4 23 02 c0       	push   0xc00223f4
c001d817:	50                   	push   eax
c001d818:	e8 7d 64 ff ff       	call   c0013c9a <InterruptController::InterruptController(char const*)>
c001d81d:	83 c4 10             	add    esp,0x10
c001d820:	ba 20 24 02 c0       	mov    edx,0xc0022420
c001d825:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d829:	89 10                	mov    DWORD PTR [eax],edx
c001d82b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d82f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d835:	0f b6 d0             	movzx  edx,al
c001d838:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d83c:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c001d843:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d847:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d84d:	0f b6 d0             	movzx  edx,al
c001d850:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d854:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c001d859:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d85d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d863:	8d 50 01             	lea    edx,[eax+0x1]
c001d866:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d86a:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001d870:	0f b6 d0             	movzx  edx,al
c001d873:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d877:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001d87b:	83 e1 3f             	and    ecx,0x3f
c001d87e:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001d882:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d886:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d88c:	0f b6 d0             	movzx  edx,al
c001d88f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d893:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c001d89a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d89e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d8a4:	0f b6 d0             	movzx  edx,al
c001d8a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d8ab:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c001d8b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d8b4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d8ba:	8d 50 01             	lea    edx,[eax+0x1]
c001d8bd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d8c1:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001d8c7:	0f b6 d0             	movzx  edx,al
c001d8ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d8ce:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001d8d2:	83 e1 3f             	and    ecx,0x3f
c001d8d5:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001d8d9:	90                   	nop
c001d8da:	83 c4 0c             	add    esp,0xc
c001d8dd:	c3                   	ret    

c001d8de <PIC::ioWait()>:
c001d8de:	eb 00                	jmp    c001d8e0 <PIC::ioWait()+0x2>
c001d8e0:	eb 00                	jmp    c001d8e2 <PIC::ioWait()+0x4>
c001d8e2:	90                   	nop
c001d8e3:	c3                   	ret    

c001d8e4 <PIC::getIRQReg(int)>:
c001d8e4:	55                   	push   ebp
c001d8e5:	89 e5                	mov    ebp,esp
c001d8e7:	83 ec 10             	sub    esp,0x10
c001d8ea:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d8ed:	0f b6 c0             	movzx  eax,al
c001d8f0:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c001d8f6:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c001d8f9:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c001d8fc:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c001d900:	ee                   	out    dx,al
c001d901:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d904:	0f b6 c0             	movzx  eax,al
c001d907:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c001d90d:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c001d910:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c001d913:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c001d917:	ee                   	out    dx,al
c001d918:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c001d91e:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c001d922:	89 c2                	mov    edx,eax
c001d924:	ec                   	in     al,dx
c001d925:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c001d928:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c001d92b:	0f b6 c0             	movzx  eax,al
c001d92e:	c1 e0 08             	shl    eax,0x8
c001d931:	89 c1                	mov    ecx,eax
c001d933:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c001d939:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c001d93d:	89 c2                	mov    edx,eax
c001d93f:	ec                   	in     al,dx
c001d940:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c001d943:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c001d946:	0f b6 c0             	movzx  eax,al
c001d949:	09 c8                	or     eax,ecx
c001d94b:	c9                   	leave  
c001d94c:	c3                   	ret    
c001d94d:	90                   	nop

c001d94e <PIC::eoi(unsigned char)>:
c001d94e:	55                   	push   ebp
c001d94f:	89 e5                	mov    ebp,esp
c001d951:	83 ec 14             	sub    esp,0x14
c001d954:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d957:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c001d95a:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c001d95e:	75 1e                	jne    c001d97e <PIC::eoi(unsigned char)+0x30>
c001d960:	6a 0b                	push   0xb
c001d962:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d965:	e8 7a ff ff ff       	call   c001d8e4 <PIC::getIRQReg(int)>
c001d96a:	83 c4 08             	add    esp,0x8
c001d96d:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c001d971:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c001d975:	25 80 00 00 00       	and    eax,0x80
c001d97a:	85 c0                	test   eax,eax
c001d97c:	74 5f                	je     c001d9dd <PIC::eoi(unsigned char)+0x8f>
c001d97e:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c001d982:	75 2d                	jne    c001d9b1 <PIC::eoi(unsigned char)+0x63>
c001d984:	6a 0b                	push   0xb
c001d986:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d989:	e8 56 ff ff ff       	call   c001d8e4 <PIC::getIRQReg(int)>
c001d98e:	83 c4 08             	add    esp,0x8
c001d991:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c001d995:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d998:	66 85 c0             	test   ax,ax
c001d99b:	78 14                	js     c001d9b1 <PIC::eoi(unsigned char)+0x63>
c001d99d:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c001d9a3:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c001d9a7:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c001d9aa:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c001d9ae:	ee                   	out    dx,al
c001d9af:	eb 2d                	jmp    c001d9de <PIC::eoi(unsigned char)+0x90>
c001d9b1:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c001d9b5:	76 12                	jbe    c001d9c9 <PIC::eoi(unsigned char)+0x7b>
c001d9b7:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c001d9bd:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c001d9c1:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c001d9c4:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c001d9c8:	ee                   	out    dx,al
c001d9c9:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c001d9cf:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c001d9d3:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c001d9d6:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c001d9da:	ee                   	out    dx,al
c001d9db:	eb 01                	jmp    c001d9de <PIC::eoi(unsigned char)+0x90>
c001d9dd:	90                   	nop
c001d9de:	c9                   	leave  
c001d9df:	c3                   	ret    

c001d9e0 <PIC::remap()>:
c001d9e0:	55                   	push   ebp
c001d9e1:	89 e5                	mov    ebp,esp
c001d9e3:	83 ec 48             	sub    esp,0x48
c001d9e6:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c001d9ed:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c001d9f4:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c001d9fa:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c001d9fd:	89 c2                	mov    edx,eax
c001d9ff:	ec                   	in     al,dx
c001da00:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c001da03:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c001da06:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c001da09:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c001da0f:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c001da12:	89 c2                	mov    edx,eax
c001da14:	ec                   	in     al,dx
c001da15:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c001da18:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c001da1b:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c001da1e:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c001da24:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c001da28:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c001da2b:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c001da2e:	ee                   	out    dx,al
c001da2f:	83 ec 0c             	sub    esp,0xc
c001da32:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001da35:	e8 a4 fe ff ff       	call   c001d8de <PIC::ioWait()>
c001da3a:	83 c4 10             	add    esp,0x10
c001da3d:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c001da43:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c001da47:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c001da4a:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c001da4d:	ee                   	out    dx,al
c001da4e:	83 ec 0c             	sub    esp,0xc
c001da51:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001da54:	e8 85 fe ff ff       	call   c001d8de <PIC::ioWait()>
c001da59:	83 c4 10             	add    esp,0x10
c001da5c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001da5f:	0f b6 c0             	movzx  eax,al
c001da62:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c001da68:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c001da6b:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c001da6e:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c001da71:	ee                   	out    dx,al
c001da72:	83 ec 0c             	sub    esp,0xc
c001da75:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001da78:	e8 61 fe ff ff       	call   c001d8de <PIC::ioWait()>
c001da7d:	83 c4 10             	add    esp,0x10
c001da80:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001da83:	0f b6 c0             	movzx  eax,al
c001da86:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c001da8c:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c001da8f:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c001da92:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001da95:	ee                   	out    dx,al
c001da96:	83 ec 0c             	sub    esp,0xc
c001da99:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001da9c:	e8 3d fe ff ff       	call   c001d8de <PIC::ioWait()>
c001daa1:	83 c4 10             	add    esp,0x10
c001daa4:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c001daaa:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c001daae:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c001dab1:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c001dab4:	ee                   	out    dx,al
c001dab5:	83 ec 0c             	sub    esp,0xc
c001dab8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001dabb:	e8 1e fe ff ff       	call   c001d8de <PIC::ioWait()>
c001dac0:	83 c4 10             	add    esp,0x10
c001dac3:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c001dac9:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c001dacd:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c001dad0:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c001dad3:	ee                   	out    dx,al
c001dad4:	83 ec 0c             	sub    esp,0xc
c001dad7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001dada:	e8 ff fd ff ff       	call   c001d8de <PIC::ioWait()>
c001dadf:	83 c4 10             	add    esp,0x10
c001dae2:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c001dae8:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c001daec:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c001daef:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c001daf2:	ee                   	out    dx,al
c001daf3:	83 ec 0c             	sub    esp,0xc
c001daf6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001daf9:	e8 e0 fd ff ff       	call   c001d8de <PIC::ioWait()>
c001dafe:	83 c4 10             	add    esp,0x10
c001db01:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c001db07:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c001db0b:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c001db0e:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001db11:	ee                   	out    dx,al
c001db12:	83 ec 0c             	sub    esp,0xc
c001db15:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001db18:	e8 c1 fd ff ff       	call   c001d8de <PIC::ioWait()>
c001db1d:	83 c4 10             	add    esp,0x10
c001db20:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c001db24:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c001db2a:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c001db2d:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c001db30:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001db33:	ee                   	out    dx,al
c001db34:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c001db38:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c001db3e:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c001db41:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c001db44:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001db47:	ee                   	out    dx,al
c001db48:	90                   	nop
c001db49:	c9                   	leave  
c001db4a:	c3                   	ret    
c001db4b:	90                   	nop

c001db4c <PIC::open(int, int, void*)>:
c001db4c:	55                   	push   ebp
c001db4d:	89 e5                	mov    ebp,esp
c001db4f:	83 ec 18             	sub    esp,0x18
c001db52:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c001db58:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c001db5c:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c001db5f:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c001db63:	ee                   	out    dx,al
c001db64:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c001db6a:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c001db6e:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c001db71:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c001db75:	ee                   	out    dx,al
c001db76:	83 ec 0c             	sub    esp,0xc
c001db79:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001db7c:	e8 5f fe ff ff       	call   c001d9e0 <PIC::remap()>
c001db81:	83 c4 10             	add    esp,0x10
c001db84:	b8 00 00 00 00       	mov    eax,0x0
c001db89:	c9                   	leave  
c001db8a:	c3                   	ret    
c001db8b:	90                   	nop

c001db8c <APICTimer::close(int, int, void*)>:
c001db8c:	b8 00 00 00 00       	mov    eax,0x0
c001db91:	c3                   	ret    

c001db92 <apicTimerHandler(regs*, void*)>:
c001db92:	83 ec 0c             	sub    esp,0xc
c001db95:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001db99:	8b 00                	mov    eax,DWORD PTR [eax]
c001db9b:	99                   	cdq    
c001db9c:	52                   	push   edx
c001db9d:	50                   	push   eax
c001db9e:	6a 00                	push   0x0
c001dba0:	68 00 ca 9a 3b       	push   0x3b9aca00
c001dba5:	e8 72 07 00 00       	call   c001e31c <__udivdi3>
c001dbaa:	83 c4 10             	add    esp,0x10
c001dbad:	83 ec 08             	sub    esp,0x8
c001dbb0:	52                   	push   edx
c001dbb1:	50                   	push   eax
c001dbb2:	e8 b2 77 ff ff       	call   c0015369 <timerHandler(unsigned long long)>
c001dbb7:	83 c4 10             	add    esp,0x10
c001dbba:	90                   	nop
c001dbbb:	83 c4 0c             	add    esp,0xc
c001dbbe:	c3                   	ret    
c001dbbf:	90                   	nop

c001dbc0 <APICTimer::write(int)>:
c001dbc0:	53                   	push   ebx
c001dbc1:	83 ec 28             	sub    esp,0x28
c001dbc4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dbc8:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001dbcc:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001dbd2:	e8 d7 91 ff ff       	call   c0016dae <thisCPU()>
c001dbd7:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c001dbdd:	83 ec 0c             	sub    esp,0xc
c001dbe0:	50                   	push   eax
c001dbe1:	e8 0e f6 ff ff       	call   c001d1f4 <APIC::getBase()>
c001dbe6:	83 c4 10             	add    esp,0x10
c001dbe9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001dbed:	a1 90 3a 02 c0       	mov    eax,ds:0xc0023a90
c001dbf2:	8b 15 94 3a 02 c0    	mov    edx,DWORD PTR ds:0xc0023a94
c001dbf8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001dbfc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001dc00:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001dc04:	05 e0 03 00 00       	add    eax,0x3e0
c001dc09:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c001dc0f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001dc13:	05 80 03 00 00       	add    eax,0x380
c001dc18:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c001dc1e:	fb                   	sti    
c001dc1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc23:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001dc27:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c001dc2c:	83 d2 00             	adc    edx,0x0
c001dc2f:	89 c1                	mov    ecx,eax
c001dc31:	89 d3                	mov    ebx,edx
c001dc33:	a1 90 3a 02 c0       	mov    eax,ds:0xc0023a90
c001dc38:	8b 15 94 3a 02 c0    	mov    edx,DWORD PTR ds:0xc0023a94
c001dc3e:	39 c8                	cmp    eax,ecx
c001dc40:	89 d0                	mov    eax,edx
c001dc42:	19 d8                	sbb    eax,ebx
c001dc44:	73 02                	jae    c001dc48 <APICTimer::write(int)+0x88>
c001dc46:	eb d7                	jmp    c001dc1f <APICTimer::write(int)+0x5f>
c001dc48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001dc4c:	05 20 03 00 00       	add    eax,0x320
c001dc51:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c001dc57:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001dc5b:	05 90 03 00 00       	add    eax,0x390
c001dc60:	8b 00                	mov    eax,DWORD PTR [eax]
c001dc62:	f7 d0                	not    eax
c001dc64:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001dc68:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001dc6c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dc70:	ba 00 00 00 00       	mov    edx,0x0
c001dc75:	f7 f3                	div    ebx
c001dc77:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001dc7b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc7f:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001dc85:	0d 00 00 02 00       	or     eax,0x20000
c001dc8a:	89 c2                	mov    edx,eax
c001dc8c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001dc90:	05 20 03 00 00       	add    eax,0x320
c001dc95:	89 10                	mov    DWORD PTR [eax],edx
c001dc97:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001dc9b:	05 e0 03 00 00       	add    eax,0x3e0
c001dca0:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c001dca6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001dcaa:	05 80 03 00 00       	add    eax,0x380
c001dcaf:	89 c2                	mov    edx,eax
c001dcb1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001dcb5:	89 02                	mov    DWORD PTR [edx],eax
c001dcb7:	90                   	nop
c001dcb8:	83 c4 28             	add    esp,0x28
c001dcbb:	5b                   	pop    ebx
c001dcbc:	c3                   	ret    
c001dcbd:	90                   	nop

c001dcbe <APICTimer::open(int, int, void*)>:
c001dcbe:	57                   	push   edi
c001dcbf:	56                   	push   esi
c001dcc0:	53                   	push   ebx
c001dcc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dcc5:	8b 00                	mov    eax,DWORD PTR [eax]
c001dcc7:	83 c0 24             	add    eax,0x24
c001dcca:	8b 00                	mov    eax,DWORD PTR [eax]
c001dccc:	83 ec 08             	sub    esp,0x8
c001dccf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dcd3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dcd7:	ff d0                	call   eax
c001dcd9:	83 c4 10             	add    esp,0x10
c001dcdc:	e8 cd 90 ff ff       	call   c0016dae <thisCPU()>
c001dce1:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c001dce7:	83 ec 0c             	sub    esp,0xc
c001dcea:	50                   	push   eax
c001dceb:	e8 04 f5 ff ff       	call   c001d1f4 <APIC::getBase()>
c001dcf0:	83 c4 10             	add    esp,0x10
c001dcf3:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c001dcf9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dcfd:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001dd03:	0f b6 f8             	movzx  edi,al
c001dd06:	89 d0                	mov    eax,edx
c001dd08:	ba 00 00 00 00       	mov    edx,0x0
c001dd0d:	89 c1                	mov    ecx,eax
c001dd0f:	80 e5 ff             	and    ch,0xff
c001dd12:	89 cb                	mov    ebx,ecx
c001dd14:	0f b6 f2             	movzx  esi,dl
c001dd17:	89 d8                	mov    eax,ebx
c001dd19:	89 f2                	mov    edx,esi
c001dd1b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001dd1f:	8d 5f 08             	lea    ebx,[edi+0x8]
c001dd22:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001dd26:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001dd2a:	83 e0 00             	and    eax,0x0
c001dd2d:	09 d0                	or     eax,edx
c001dd2f:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001dd33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd37:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001dd3d:	8d 50 01             	lea    edx,[eax+0x1]
c001dd40:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001dd44:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001dd4a:	0f b6 d0             	movzx  edx,al
c001dd4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd51:	83 c2 08             	add    edx,0x8
c001dd54:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001dd58:	0f b6 c9             	movzx  ecx,cl
c001dd5b:	81 c9 00 00 01 00    	or     ecx,0x10000
c001dd61:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001dd65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd69:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001dd6d:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001dd73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd77:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001dd7b:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001dd81:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001dd85:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001dd8b:	83 ec 0c             	sub    esp,0xc
c001dd8e:	51                   	push   ecx
c001dd8f:	6a 01                	push   0x1
c001dd91:	68 92 db 01 c0       	push   0xc001db92
c001dd96:	52                   	push   edx
c001dd97:	50                   	push   eax
c001dd98:	e8 39 55 ff ff       	call   c00132d6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001dd9d:	83 c4 20             	add    esp,0x20
c001dda0:	89 c2                	mov    edx,eax
c001dda2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dda6:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001ddac:	b8 00 00 00 00       	mov    eax,0x0
c001ddb1:	5b                   	pop    ebx
c001ddb2:	5e                   	pop    esi
c001ddb3:	5f                   	pop    edi
c001ddb4:	c3                   	ret    
c001ddb5:	90                   	nop

c001ddb6 <APICTimer::APICTimer()>:
c001ddb6:	83 ec 0c             	sub    esp,0xc
c001ddb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ddbd:	83 ec 08             	sub    esp,0x8
c001ddc0:	68 60 24 02 c0       	push   0xc0022460
c001ddc5:	50                   	push   eax
c001ddc6:	e8 0f 75 ff ff       	call   c00152da <Timer::Timer(char const*)>
c001ddcb:	83 c4 10             	add    esp,0x10
c001ddce:	ba 74 24 02 c0       	mov    edx,0xc0022474
c001ddd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ddd7:	89 10                	mov    DWORD PTR [eax],edx
c001ddd9:	90                   	nop
c001ddda:	83 c4 0c             	add    esp,0xc
c001dddd:	c3                   	ret    

c001ddde <PIT::write(int)>:
c001ddde:	83 ec 10             	sub    esp,0x10
c001dde1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001dde5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001dde9:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ddef:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ddf3:	a3 04 48 02 c0       	mov    ds:0xc0024804,eax
c001ddf8:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001ddfd:	99                   	cdq    
c001ddfe:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001de02:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001de06:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001de0d:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001de12:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001de16:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001de1b:	ee                   	out    dx,al
c001de1c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001de20:	0f b6 c0             	movzx  eax,al
c001de23:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001de2a:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001de2e:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001de32:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001de37:	ee                   	out    dx,al
c001de38:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001de3c:	c1 f8 08             	sar    eax,0x8
c001de3f:	0f b6 c0             	movzx  eax,al
c001de42:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001de49:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001de4d:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001de51:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001de56:	ee                   	out    dx,al
c001de57:	90                   	nop
c001de58:	83 c4 10             	add    esp,0x10
c001de5b:	c3                   	ret    

c001de5c <pitHandler(regs*, void*)>:
c001de5c:	83 ec 0c             	sub    esp,0xc
c001de5f:	a1 04 48 02 c0       	mov    eax,ds:0xc0024804
c001de64:	99                   	cdq    
c001de65:	52                   	push   edx
c001de66:	50                   	push   eax
c001de67:	6a 00                	push   0x0
c001de69:	68 00 ca 9a 3b       	push   0x3b9aca00
c001de6e:	e8 a9 04 00 00       	call   c001e31c <__udivdi3>
c001de73:	83 c4 10             	add    esp,0x10
c001de76:	83 ec 08             	sub    esp,0x8
c001de79:	52                   	push   edx
c001de7a:	50                   	push   eax
c001de7b:	e8 e9 74 ff ff       	call   c0015369 <timerHandler(unsigned long long)>
c001de80:	83 c4 10             	add    esp,0x10
c001de83:	90                   	nop
c001de84:	83 c4 0c             	add    esp,0xc
c001de87:	c3                   	ret    

c001de88 <PIT::open(int, int, void*)>:
c001de88:	83 ec 0c             	sub    esp,0xc
c001de8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de8f:	8b 00                	mov    eax,DWORD PTR [eax]
c001de91:	83 c0 24             	add    eax,0x24
c001de94:	8b 00                	mov    eax,DWORD PTR [eax]
c001de96:	83 ec 08             	sub    esp,0x8
c001de99:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001de9d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dea1:	ff d0                	call   eax
c001dea3:	83 c4 10             	add    esp,0x10
c001dea6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001deaa:	83 ec 0c             	sub    esp,0xc
c001dead:	6a 00                	push   0x0
c001deaf:	6a 01                	push   0x1
c001deb1:	68 5c de 01 c0       	push   0xc001de5c
c001deb6:	6a 00                	push   0x0
c001deb8:	50                   	push   eax
c001deb9:	e8 18 54 ff ff       	call   c00132d6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001debe:	83 c4 20             	add    esp,0x20
c001dec1:	89 c2                	mov    edx,eax
c001dec3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dec7:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001decd:	b8 00 00 00 00       	mov    eax,0x0
c001ded2:	83 c4 0c             	add    esp,0xc
c001ded5:	c3                   	ret    

c001ded6 <PIT::close(int, int, void*)>:
c001ded6:	83 ec 0c             	sub    esp,0xc
c001ded9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dedd:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001dee7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001deeb:	6a 01                	push   0x1
c001deed:	68 5c de 01 c0       	push   0xc001de5c
c001def2:	6a 00                	push   0x0
c001def4:	50                   	push   eax
c001def5:	e8 3a 54 ff ff       	call   c0013334 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001defa:	83 c4 10             	add    esp,0x10
c001defd:	b8 00 00 00 00       	mov    eax,0x0
c001df02:	83 c4 0c             	add    esp,0xc
c001df05:	c3                   	ret    

c001df06 <PIT::PIT()>:
c001df06:	83 ec 0c             	sub    esp,0xc
c001df09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001df0d:	83 ec 08             	sub    esp,0x8
c001df10:	68 9c 24 02 c0       	push   0xc002249c
c001df15:	50                   	push   eax
c001df16:	e8 bf 73 ff ff       	call   c00152da <Timer::Timer(char const*)>
c001df1b:	83 c4 10             	add    esp,0x10
c001df1e:	ba c4 24 02 c0       	mov    edx,0xc00224c4
c001df23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001df27:	89 10                	mov    DWORD PTR [eax],edx
c001df29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001df2d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001df33:	0f b6 d0             	movzx  edx,al
c001df36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001df3a:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001df41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001df45:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001df4b:	0f b6 d0             	movzx  edx,al
c001df4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001df52:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001df57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001df5b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001df61:	8d 50 01             	lea    edx,[eax+0x1]
c001df64:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001df68:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001df6e:	0f b6 d0             	movzx  edx,al
c001df71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001df75:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001df79:	83 e1 3f             	and    ecx,0x3f
c001df7c:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001df80:	90                   	nop
c001df81:	83 c4 0c             	add    esp,0xc
c001df84:	c3                   	ret    
c001df85:	66 90                	xchg   ax,ax
c001df87:	66 90                	xchg   ax,ax
c001df89:	66 90                	xchg   ax,ax
c001df8b:	66 90                	xchg   ax,ax
c001df8d:	66 90                	xchg   ax,ax
c001df8f:	90                   	nop

c001df90 <avxDetect>:
c001df90:	b8 00 00 00 00       	mov    eax,0x0
c001df95:	c3                   	ret    

c001df96 <avxSave>:
c001df96:	c3                   	ret    

c001df97 <avxLoad>:
c001df97:	c3                   	ret    

c001df98 <avxInit>:
c001df98:	c3                   	ret    

c001df99 <avxClose>:
c001df99:	c3                   	ret    
c001df9a:	66 90                	xchg   ax,ax
c001df9c:	66 90                	xchg   ax,ax
c001df9e:	66 90                	xchg   ax,ax

c001dfa0 <sseDetect>:
c001dfa0:	b8 01 00 00 00       	mov    eax,0x1
c001dfa5:	0f a2                	cpuid  
c001dfa7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001dfad:	74 06                	je     c001dfb5 <sseDetect.noSSE>
c001dfaf:	b8 01 00 00 00       	mov    eax,0x1
c001dfb4:	c3                   	ret    

c001dfb5 <sseDetect.noSSE>:
c001dfb5:	b8 00 00 00 00       	mov    eax,0x0
c001dfba:	c3                   	ret    

c001dfbb <sseSave>:
c001dfbb:	0f ae 44 24 08       	fxsave [esp+0x8]
c001dfc0:	c3                   	ret    

c001dfc1 <sseLoad>:
c001dfc1:	0f ae 4c 24 08       	fxrstor [esp+0x8]
c001dfc6:	c3                   	ret    

c001dfc7 <sseInit>:
c001dfc7:	e8 40 00 00 00       	call   c001e00c <x87Init>
c001dfcc:	0f 20 e0             	mov    eax,cr4
c001dfcf:	66 0d 00 06          	or     ax,0x600
c001dfd3:	0f 22 e0             	mov    cr4,eax
c001dfd6:	c3                   	ret    

c001dfd7 <sseClose>:
c001dfd7:	c3                   	ret    
c001dfd8:	66 90                	xchg   ax,ax
c001dfda:	66 90                	xchg   ax,ax
c001dfdc:	66 90                	xchg   ax,ax
c001dfde:	66 90                	xchg   ax,ax

c001dfe0 <value_37F>:
c001dfe0:	7f 03                	jg     c001dfe5 <value_37A+0x1>

c001dfe2 <value_37E>:
c001dfe2:	7e 03                	jle    c001dfe7 <x87Detect+0x1>

c001dfe4 <value_37A>:
c001dfe4:	7a 03                	jp     c001dfe9 <x87Detect+0x3>

c001dfe6 <x87Detect>:
c001dfe6:	b8 01 00 00 00       	mov    eax,0x1
c001dfeb:	0f a2                	cpuid  
c001dfed:	f7 c2 01 00 00 00    	test   edx,0x1
c001dff3:	74 06                	je     c001dffb <x87Detect.nox87>
c001dff5:	b8 01 00 00 00       	mov    eax,0x1
c001dffa:	c3                   	ret    

c001dffb <x87Detect.nox87>:
c001dffb:	b8 00 00 00 00       	mov    eax,0x0
c001e000:	c3                   	ret    

c001e001 <x87Save>:
c001e001:	9b dd 74 24 08       	fsave  [esp+0x8]
c001e006:	c3                   	ret    

c001e007 <x87Load>:
c001e007:	dd 64 24 08          	frstor [esp+0x8]
c001e00b:	c3                   	ret    

c001e00c <x87Init>:
c001e00c:	9b db e3             	finit  
c001e00f:	0f 20 c0             	mov    eax,cr0
c001e012:	66 25 fb ff          	and    ax,0xfffb
c001e016:	66 0d 22 00          	or     ax,0x22
c001e01a:	0f 22 c0             	mov    cr0,eax
c001e01d:	0f 06                	clts   
c001e01f:	d9 2d e4 df 01 c0    	fldcw  WORD PTR ds:0xc001dfe4
c001e025:	c3                   	ret    

c001e026 <x87Close>:
c001e026:	c3                   	ret    
c001e027:	90                   	nop

c001e028 <__do_global_ctors_aux>:
c001e028:	a1 58 f1 01 c0       	mov    eax,ds:0xc001f158
c001e02d:	83 f8 ff             	cmp    eax,0xffffffff
c001e030:	74 1a                	je     c001e04c <__do_global_ctors_aux+0x24>
c001e032:	55                   	push   ebp
c001e033:	89 e5                	mov    ebp,esp
c001e035:	53                   	push   ebx
c001e036:	52                   	push   edx
c001e037:	bb 58 f1 01 c0       	mov    ebx,0xc001f158
c001e03c:	ff d0                	call   eax
c001e03e:	83 eb 04             	sub    ebx,0x4
c001e041:	8b 03                	mov    eax,DWORD PTR [ebx]
c001e043:	83 f8 ff             	cmp    eax,0xffffffff
c001e046:	75 f4                	jne    c001e03c <__do_global_ctors_aux+0x14>
c001e048:	58                   	pop    eax
c001e049:	5b                   	pop    ebx
c001e04a:	5d                   	pop    ebp
c001e04b:	c3                   	ret    
c001e04c:	c3                   	ret    
c001e04d:	66 90                	xchg   ax,ax
c001e04f:	90                   	nop

c001e050 <__divdi3>:
c001e050:	55                   	push   ebp
c001e051:	57                   	push   edi
c001e052:	56                   	push   esi
c001e053:	53                   	push   ebx
c001e054:	83 ec 1c             	sub    esp,0x1c
c001e057:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001e05b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e05f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001e062:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001e066:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e06a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001e06e:	85 db                	test   ebx,ebx
c001e070:	0f 88 8e 00 00 00    	js     c001e104 <__divdi3+0xb4>
c001e076:	89 dd                	mov    ebp,ebx
c001e078:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001e080:	89 d3                	mov    ebx,edx
c001e082:	85 d2                	test   edx,edx
c001e084:	79 0d                	jns    c001e093 <__divdi3+0x43>
c001e086:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001e08a:	f7 d8                	neg    eax
c001e08c:	83 d2 00             	adc    edx,0x0
c001e08f:	f7 da                	neg    edx
c001e091:	89 d3                	mov    ebx,edx
c001e093:	89 c7                	mov    edi,eax
c001e095:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001e098:	85 db                	test   ebx,ebx
c001e09a:	75 48                	jne    c001e0e4 <__divdi3+0x94>
c001e09c:	39 ef                	cmp    edi,ebp
c001e09e:	76 24                	jbe    c001e0c4 <__divdi3+0x74>
c001e0a0:	89 ea                	mov    edx,ebp
c001e0a2:	f7 f7                	div    edi
c001e0a4:	89 c1                	mov    ecx,eax
c001e0a6:	31 f6                	xor    esi,esi
c001e0a8:	89 c8                	mov    eax,ecx
c001e0aa:	89 f2                	mov    edx,esi
c001e0ac:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e0b0:	85 c9                	test   ecx,ecx
c001e0b2:	74 07                	je     c001e0bb <__divdi3+0x6b>
c001e0b4:	f7 d8                	neg    eax
c001e0b6:	83 d2 00             	adc    edx,0x0
c001e0b9:	f7 da                	neg    edx
c001e0bb:	83 c4 1c             	add    esp,0x1c
c001e0be:	5b                   	pop    ebx
c001e0bf:	5e                   	pop    esi
c001e0c0:	5f                   	pop    edi
c001e0c1:	5d                   	pop    ebp
c001e0c2:	c3                   	ret    
c001e0c3:	90                   	nop
c001e0c4:	85 ff                	test   edi,edi
c001e0c6:	75 0b                	jne    c001e0d3 <__divdi3+0x83>
c001e0c8:	b8 01 00 00 00       	mov    eax,0x1
c001e0cd:	31 d2                	xor    edx,edx
c001e0cf:	f7 f3                	div    ebx
c001e0d1:	89 c7                	mov    edi,eax
c001e0d3:	31 d2                	xor    edx,edx
c001e0d5:	89 e8                	mov    eax,ebp
c001e0d7:	f7 f7                	div    edi
c001e0d9:	89 c6                	mov    esi,eax
c001e0db:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001e0de:	f7 f7                	div    edi
c001e0e0:	89 c1                	mov    ecx,eax
c001e0e2:	eb c4                	jmp    c001e0a8 <__divdi3+0x58>
c001e0e4:	39 eb                	cmp    ebx,ebp
c001e0e6:	77 3c                	ja     c001e124 <__divdi3+0xd4>
c001e0e8:	0f bd f3             	bsr    esi,ebx
c001e0eb:	83 f6 1f             	xor    esi,0x1f
c001e0ee:	75 40                	jne    c001e130 <__divdi3+0xe0>
c001e0f0:	39 eb                	cmp    ebx,ebp
c001e0f2:	72 09                	jb     c001e0fd <__divdi3+0xad>
c001e0f4:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001e0f7:	0f 87 97 00 00 00    	ja     c001e194 <__divdi3+0x144>
c001e0fd:	b9 01 00 00 00       	mov    ecx,0x1
c001e102:	eb a4                	jmp    c001e0a8 <__divdi3+0x58>
c001e104:	f7 d9                	neg    ecx
c001e106:	83 d3 00             	adc    ebx,0x0
c001e109:	f7 db                	neg    ebx
c001e10b:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001e10e:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001e112:	89 dd                	mov    ebp,ebx
c001e114:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001e11c:	e9 5f ff ff ff       	jmp    c001e080 <__divdi3+0x30>
c001e121:	8d 76 00             	lea    esi,[esi+0x0]
c001e124:	31 f6                	xor    esi,esi
c001e126:	31 c9                	xor    ecx,ecx
c001e128:	e9 7b ff ff ff       	jmp    c001e0a8 <__divdi3+0x58>
c001e12d:	8d 76 00             	lea    esi,[esi+0x0]
c001e130:	b8 20 00 00 00       	mov    eax,0x20
c001e135:	29 f0                	sub    eax,esi
c001e137:	89 f1                	mov    ecx,esi
c001e139:	d3 e3                	shl    ebx,cl
c001e13b:	89 fa                	mov    edx,edi
c001e13d:	88 c1                	mov    cl,al
c001e13f:	d3 ea                	shr    edx,cl
c001e141:	09 da                	or     edx,ebx
c001e143:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e147:	89 f1                	mov    ecx,esi
c001e149:	d3 e7                	shl    edi,cl
c001e14b:	89 eb                	mov    ebx,ebp
c001e14d:	88 c1                	mov    cl,al
c001e14f:	d3 eb                	shr    ebx,cl
c001e151:	89 f1                	mov    ecx,esi
c001e153:	d3 e5                	shl    ebp,cl
c001e155:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001e158:	88 c1                	mov    cl,al
c001e15a:	d3 ea                	shr    edx,cl
c001e15c:	09 d5                	or     ebp,edx
c001e15e:	89 e8                	mov    eax,ebp
c001e160:	89 da                	mov    edx,ebx
c001e162:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001e166:	89 d3                	mov    ebx,edx
c001e168:	89 c5                	mov    ebp,eax
c001e16a:	f7 e7                	mul    edi
c001e16c:	39 d3                	cmp    ebx,edx
c001e16e:	72 18                	jb     c001e188 <__divdi3+0x138>
c001e170:	74 0a                	je     c001e17c <__divdi3+0x12c>
c001e172:	89 e9                	mov    ecx,ebp
c001e174:	31 f6                	xor    esi,esi
c001e176:	e9 2d ff ff ff       	jmp    c001e0a8 <__divdi3+0x58>
c001e17b:	90                   	nop
c001e17c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001e17f:	89 f1                	mov    ecx,esi
c001e181:	d3 e7                	shl    edi,cl
c001e183:	39 c7                	cmp    edi,eax
c001e185:	73 eb                	jae    c001e172 <__divdi3+0x122>
c001e187:	90                   	nop
c001e188:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001e18b:	31 f6                	xor    esi,esi
c001e18d:	e9 16 ff ff ff       	jmp    c001e0a8 <__divdi3+0x58>
c001e192:	66 90                	xchg   ax,ax
c001e194:	31 c9                	xor    ecx,ecx
c001e196:	e9 0d ff ff ff       	jmp    c001e0a8 <__divdi3+0x58>
c001e19b:	90                   	nop

c001e19c <__moddi3>:
c001e19c:	55                   	push   ebp
c001e19d:	57                   	push   edi
c001e19e:	56                   	push   esi
c001e19f:	53                   	push   ebx
c001e1a0:	83 ec 2c             	sub    esp,0x2c
c001e1a3:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001e1a7:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001e1ab:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001e1af:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001e1b3:	85 db                	test   ebx,ebx
c001e1b5:	0f 88 85 00 00 00    	js     c001e240 <__moddi3+0xa4>
c001e1bb:	89 de                	mov    esi,ebx
c001e1bd:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001e1c5:	89 d7                	mov    edi,edx
c001e1c7:	85 d2                	test   edx,edx
c001e1c9:	79 09                	jns    c001e1d4 <__moddi3+0x38>
c001e1cb:	f7 d8                	neg    eax
c001e1cd:	83 d2 00             	adc    edx,0x0
c001e1d0:	f7 da                	neg    edx
c001e1d2:	89 d7                	mov    edi,edx
c001e1d4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e1d8:	89 cd                	mov    ebp,ecx
c001e1da:	85 ff                	test   edi,edi
c001e1dc:	75 52                	jne    c001e230 <__moddi3+0x94>
c001e1de:	89 c3                	mov    ebx,eax
c001e1e0:	39 f0                	cmp    eax,esi
c001e1e2:	76 24                	jbe    c001e208 <__moddi3+0x6c>
c001e1e4:	89 c8                	mov    eax,ecx
c001e1e6:	89 f2                	mov    edx,esi
c001e1e8:	f7 f3                	div    ebx
c001e1ea:	89 d6                	mov    esi,edx
c001e1ec:	89 f0                	mov    eax,esi
c001e1ee:	31 d2                	xor    edx,edx
c001e1f0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e1f4:	85 c9                	test   ecx,ecx
c001e1f6:	74 07                	je     c001e1ff <__moddi3+0x63>
c001e1f8:	f7 d8                	neg    eax
c001e1fa:	83 d2 00             	adc    edx,0x0
c001e1fd:	f7 da                	neg    edx
c001e1ff:	83 c4 2c             	add    esp,0x2c
c001e202:	5b                   	pop    ebx
c001e203:	5e                   	pop    esi
c001e204:	5f                   	pop    edi
c001e205:	5d                   	pop    ebp
c001e206:	c3                   	ret    
c001e207:	90                   	nop
c001e208:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001e20c:	85 db                	test   ebx,ebx
c001e20e:	75 0d                	jne    c001e21d <__moddi3+0x81>
c001e210:	b8 01 00 00 00       	mov    eax,0x1
c001e215:	31 d2                	xor    edx,edx
c001e217:	f7 f7                	div    edi
c001e219:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e21d:	89 f0                	mov    eax,esi
c001e21f:	31 d2                	xor    edx,edx
c001e221:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e225:	f7 f7                	div    edi
c001e227:	89 e8                	mov    eax,ebp
c001e229:	f7 f7                	div    edi
c001e22b:	89 d6                	mov    esi,edx
c001e22d:	eb bd                	jmp    c001e1ec <__moddi3+0x50>
c001e22f:	90                   	nop
c001e230:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001e234:	39 f7                	cmp    edi,esi
c001e236:	76 20                	jbe    c001e258 <__moddi3+0xbc>
c001e238:	89 c8                	mov    eax,ecx
c001e23a:	89 f2                	mov    edx,esi
c001e23c:	eb b2                	jmp    c001e1f0 <__moddi3+0x54>
c001e23e:	66 90                	xchg   ax,ax
c001e240:	f7 d9                	neg    ecx
c001e242:	83 d3 00             	adc    ebx,0x0
c001e245:	f7 db                	neg    ebx
c001e247:	89 de                	mov    esi,ebx
c001e249:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001e251:	e9 6f ff ff ff       	jmp    c001e1c5 <__moddi3+0x29>
c001e256:	66 90                	xchg   ax,ax
c001e258:	0f bd c7             	bsr    eax,edi
c001e25b:	83 f0 1f             	xor    eax,0x1f
c001e25e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e262:	75 24                	jne    c001e288 <__moddi3+0xec>
c001e264:	39 f7                	cmp    edi,esi
c001e266:	72 06                	jb     c001e26e <__moddi3+0xd2>
c001e268:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001e26c:	77 0c                	ja     c001e27a <__moddi3+0xde>
c001e26e:	89 e9                	mov    ecx,ebp
c001e270:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001e274:	19 fe                	sbb    esi,edi
c001e276:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001e27a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e27e:	89 f2                	mov    edx,esi
c001e280:	e9 6b ff ff ff       	jmp    c001e1f0 <__moddi3+0x54>
c001e285:	8d 76 00             	lea    esi,[esi+0x0]
c001e288:	b8 20 00 00 00       	mov    eax,0x20
c001e28d:	89 c2                	mov    edx,eax
c001e28f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001e293:	29 da                	sub    edx,ebx
c001e295:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001e299:	88 d9                	mov    cl,bl
c001e29b:	d3 e7                	shl    edi,cl
c001e29d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e2a1:	88 d1                	mov    cl,dl
c001e2a3:	d3 e8                	shr    eax,cl
c001e2a5:	09 c7                	or     edi,eax
c001e2a7:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001e2ab:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e2af:	89 d8                	mov    eax,ebx
c001e2b1:	88 d9                	mov    cl,bl
c001e2b3:	d3 e7                	shl    edi,cl
c001e2b5:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001e2b9:	89 f3                	mov    ebx,esi
c001e2bb:	88 d1                	mov    cl,dl
c001e2bd:	d3 eb                	shr    ebx,cl
c001e2bf:	89 c7                	mov    edi,eax
c001e2c1:	88 c1                	mov    cl,al
c001e2c3:	d3 e6                	shl    esi,cl
c001e2c5:	89 e8                	mov    eax,ebp
c001e2c7:	88 d1                	mov    cl,dl
c001e2c9:	d3 e8                	shr    eax,cl
c001e2cb:	09 f0                	or     eax,esi
c001e2cd:	89 f9                	mov    ecx,edi
c001e2cf:	d3 e5                	shl    ebp,cl
c001e2d1:	89 da                	mov    edx,ebx
c001e2d3:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001e2d7:	89 d3                	mov    ebx,edx
c001e2d9:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001e2dd:	89 c6                	mov    esi,eax
c001e2df:	89 d1                	mov    ecx,edx
c001e2e1:	39 d3                	cmp    ebx,edx
c001e2e3:	72 27                	jb     c001e30c <__moddi3+0x170>
c001e2e5:	74 21                	je     c001e308 <__moddi3+0x16c>
c001e2e7:	29 f5                	sub    ebp,esi
c001e2e9:	19 cb                	sbb    ebx,ecx
c001e2eb:	89 de                	mov    esi,ebx
c001e2ed:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001e2f1:	d3 e6                	shl    esi,cl
c001e2f3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001e2f7:	89 f9                	mov    ecx,edi
c001e2f9:	d3 ed                	shr    ebp,cl
c001e2fb:	09 ee                	or     esi,ebp
c001e2fd:	89 f0                	mov    eax,esi
c001e2ff:	d3 eb                	shr    ebx,cl
c001e301:	89 da                	mov    edx,ebx
c001e303:	e9 e8 fe ff ff       	jmp    c001e1f0 <__moddi3+0x54>
c001e308:	39 c5                	cmp    ebp,eax
c001e30a:	73 db                	jae    c001e2e7 <__moddi3+0x14b>
c001e30c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001e310:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001e314:	89 d1                	mov    ecx,edx
c001e316:	89 c6                	mov    esi,eax
c001e318:	eb cd                	jmp    c001e2e7 <__moddi3+0x14b>
c001e31a:	66 90                	xchg   ax,ax

c001e31c <__udivdi3>:
c001e31c:	55                   	push   ebp
c001e31d:	57                   	push   edi
c001e31e:	56                   	push   esi
c001e31f:	53                   	push   ebx
c001e320:	83 ec 1c             	sub    esp,0x1c
c001e323:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001e327:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001e32b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001e32f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001e333:	85 d2                	test   edx,edx
c001e335:	75 41                	jne    c001e378 <__udivdi3+0x5c>
c001e337:	39 f7                	cmp    edi,esi
c001e339:	76 15                	jbe    c001e350 <__udivdi3+0x34>
c001e33b:	89 e8                	mov    eax,ebp
c001e33d:	89 f2                	mov    edx,esi
c001e33f:	f7 f7                	div    edi
c001e341:	31 db                	xor    ebx,ebx
c001e343:	89 da                	mov    edx,ebx
c001e345:	83 c4 1c             	add    esp,0x1c
c001e348:	5b                   	pop    ebx
c001e349:	5e                   	pop    esi
c001e34a:	5f                   	pop    edi
c001e34b:	5d                   	pop    ebp
c001e34c:	c3                   	ret    
c001e34d:	8d 76 00             	lea    esi,[esi+0x0]
c001e350:	89 f9                	mov    ecx,edi
c001e352:	85 ff                	test   edi,edi
c001e354:	75 0b                	jne    c001e361 <__udivdi3+0x45>
c001e356:	b8 01 00 00 00       	mov    eax,0x1
c001e35b:	31 d2                	xor    edx,edx
c001e35d:	f7 f7                	div    edi
c001e35f:	89 c1                	mov    ecx,eax
c001e361:	31 d2                	xor    edx,edx
c001e363:	89 f0                	mov    eax,esi
c001e365:	f7 f1                	div    ecx
c001e367:	89 c3                	mov    ebx,eax
c001e369:	89 e8                	mov    eax,ebp
c001e36b:	f7 f1                	div    ecx
c001e36d:	89 da                	mov    edx,ebx
c001e36f:	83 c4 1c             	add    esp,0x1c
c001e372:	5b                   	pop    ebx
c001e373:	5e                   	pop    esi
c001e374:	5f                   	pop    edi
c001e375:	5d                   	pop    ebp
c001e376:	c3                   	ret    
c001e377:	90                   	nop
c001e378:	39 f2                	cmp    edx,esi
c001e37a:	77 1c                	ja     c001e398 <__udivdi3+0x7c>
c001e37c:	0f bd da             	bsr    ebx,edx
c001e37f:	83 f3 1f             	xor    ebx,0x1f
c001e382:	75 24                	jne    c001e3a8 <__udivdi3+0x8c>
c001e384:	39 f2                	cmp    edx,esi
c001e386:	72 08                	jb     c001e390 <__udivdi3+0x74>
c001e388:	39 ef                	cmp    edi,ebp
c001e38a:	0f 87 84 00 00 00    	ja     c001e414 <__udivdi3+0xf8>
c001e390:	b8 01 00 00 00       	mov    eax,0x1
c001e395:	eb ac                	jmp    c001e343 <__udivdi3+0x27>
c001e397:	90                   	nop
c001e398:	31 db                	xor    ebx,ebx
c001e39a:	31 c0                	xor    eax,eax
c001e39c:	89 da                	mov    edx,ebx
c001e39e:	83 c4 1c             	add    esp,0x1c
c001e3a1:	5b                   	pop    ebx
c001e3a2:	5e                   	pop    esi
c001e3a3:	5f                   	pop    edi
c001e3a4:	5d                   	pop    ebp
c001e3a5:	c3                   	ret    
c001e3a6:	66 90                	xchg   ax,ax
c001e3a8:	b8 20 00 00 00       	mov    eax,0x20
c001e3ad:	29 d8                	sub    eax,ebx
c001e3af:	88 d9                	mov    cl,bl
c001e3b1:	d3 e2                	shl    edx,cl
c001e3b3:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e3b7:	89 fa                	mov    edx,edi
c001e3b9:	88 c1                	mov    cl,al
c001e3bb:	d3 ea                	shr    edx,cl
c001e3bd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e3c1:	09 d1                	or     ecx,edx
c001e3c3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e3c7:	88 d9                	mov    cl,bl
c001e3c9:	d3 e7                	shl    edi,cl
c001e3cb:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001e3cf:	89 f7                	mov    edi,esi
c001e3d1:	88 c1                	mov    cl,al
c001e3d3:	d3 ef                	shr    edi,cl
c001e3d5:	88 d9                	mov    cl,bl
c001e3d7:	d3 e6                	shl    esi,cl
c001e3d9:	89 ea                	mov    edx,ebp
c001e3db:	88 c1                	mov    cl,al
c001e3dd:	d3 ea                	shr    edx,cl
c001e3df:	09 d6                	or     esi,edx
c001e3e1:	89 f0                	mov    eax,esi
c001e3e3:	89 fa                	mov    edx,edi
c001e3e5:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001e3e9:	89 d7                	mov    edi,edx
c001e3eb:	89 c6                	mov    esi,eax
c001e3ed:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001e3f1:	39 d7                	cmp    edi,edx
c001e3f3:	72 13                	jb     c001e408 <__udivdi3+0xec>
c001e3f5:	74 09                	je     c001e400 <__udivdi3+0xe4>
c001e3f7:	89 f0                	mov    eax,esi
c001e3f9:	31 db                	xor    ebx,ebx
c001e3fb:	e9 43 ff ff ff       	jmp    c001e343 <__udivdi3+0x27>
c001e400:	88 d9                	mov    cl,bl
c001e402:	d3 e5                	shl    ebp,cl
c001e404:	39 c5                	cmp    ebp,eax
c001e406:	73 ef                	jae    c001e3f7 <__udivdi3+0xdb>
c001e408:	8d 46 ff             	lea    eax,[esi-0x1]
c001e40b:	31 db                	xor    ebx,ebx
c001e40d:	e9 31 ff ff ff       	jmp    c001e343 <__udivdi3+0x27>
c001e412:	66 90                	xchg   ax,ax
c001e414:	31 c0                	xor    eax,eax
c001e416:	e9 28 ff ff ff       	jmp    c001e343 <__udivdi3+0x27>
c001e41b:	90                   	nop

c001e41c <__umoddi3>:
c001e41c:	55                   	push   ebp
c001e41d:	57                   	push   edi
c001e41e:	56                   	push   esi
c001e41f:	53                   	push   ebx
c001e420:	83 ec 1c             	sub    esp,0x1c
c001e423:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001e427:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e42b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001e42f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001e433:	89 da                	mov    edx,ebx
c001e435:	85 c0                	test   eax,eax
c001e437:	75 37                	jne    c001e470 <__umoddi3+0x54>
c001e439:	39 df                	cmp    edi,ebx
c001e43b:	76 13                	jbe    c001e450 <__umoddi3+0x34>
c001e43d:	89 f0                	mov    eax,esi
c001e43f:	f7 f7                	div    edi
c001e441:	89 d0                	mov    eax,edx
c001e443:	31 d2                	xor    edx,edx
c001e445:	83 c4 1c             	add    esp,0x1c
c001e448:	5b                   	pop    ebx
c001e449:	5e                   	pop    esi
c001e44a:	5f                   	pop    edi
c001e44b:	5d                   	pop    ebp
c001e44c:	c3                   	ret    
c001e44d:	8d 76 00             	lea    esi,[esi+0x0]
c001e450:	89 fd                	mov    ebp,edi
c001e452:	85 ff                	test   edi,edi
c001e454:	75 0b                	jne    c001e461 <__umoddi3+0x45>
c001e456:	b8 01 00 00 00       	mov    eax,0x1
c001e45b:	31 d2                	xor    edx,edx
c001e45d:	f7 f7                	div    edi
c001e45f:	89 c5                	mov    ebp,eax
c001e461:	89 d8                	mov    eax,ebx
c001e463:	31 d2                	xor    edx,edx
c001e465:	f7 f5                	div    ebp
c001e467:	89 f0                	mov    eax,esi
c001e469:	f7 f5                	div    ebp
c001e46b:	89 d0                	mov    eax,edx
c001e46d:	eb d4                	jmp    c001e443 <__umoddi3+0x27>
c001e46f:	90                   	nop
c001e470:	89 f1                	mov    ecx,esi
c001e472:	39 d8                	cmp    eax,ebx
c001e474:	76 0a                	jbe    c001e480 <__umoddi3+0x64>
c001e476:	89 f0                	mov    eax,esi
c001e478:	83 c4 1c             	add    esp,0x1c
c001e47b:	5b                   	pop    ebx
c001e47c:	5e                   	pop    esi
c001e47d:	5f                   	pop    edi
c001e47e:	5d                   	pop    ebp
c001e47f:	c3                   	ret    
c001e480:	0f bd e8             	bsr    ebp,eax
c001e483:	83 f5 1f             	xor    ebp,0x1f
c001e486:	75 1c                	jne    c001e4a4 <__umoddi3+0x88>
c001e488:	39 d8                	cmp    eax,ebx
c001e48a:	72 04                	jb     c001e490 <__umoddi3+0x74>
c001e48c:	39 f7                	cmp    edi,esi
c001e48e:	77 08                	ja     c001e498 <__umoddi3+0x7c>
c001e490:	89 da                	mov    edx,ebx
c001e492:	29 fe                	sub    esi,edi
c001e494:	19 c2                	sbb    edx,eax
c001e496:	89 f1                	mov    ecx,esi
c001e498:	89 c8                	mov    eax,ecx
c001e49a:	83 c4 1c             	add    esp,0x1c
c001e49d:	5b                   	pop    ebx
c001e49e:	5e                   	pop    esi
c001e49f:	5f                   	pop    edi
c001e4a0:	5d                   	pop    ebp
c001e4a1:	c3                   	ret    
c001e4a2:	66 90                	xchg   ax,ax
c001e4a4:	ba 20 00 00 00       	mov    edx,0x20
c001e4a9:	29 ea                	sub    edx,ebp
c001e4ab:	89 e9                	mov    ecx,ebp
c001e4ad:	d3 e0                	shl    eax,cl
c001e4af:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e4b3:	89 f8                	mov    eax,edi
c001e4b5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001e4b9:	88 d1                	mov    cl,dl
c001e4bb:	d3 e8                	shr    eax,cl
c001e4bd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e4c1:	09 c1                	or     ecx,eax
c001e4c3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e4c7:	89 e9                	mov    ecx,ebp
c001e4c9:	d3 e7                	shl    edi,cl
c001e4cb:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001e4cf:	89 d8                	mov    eax,ebx
c001e4d1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e4d5:	88 d1                	mov    cl,dl
c001e4d7:	d3 e8                	shr    eax,cl
c001e4d9:	89 c7                	mov    edi,eax
c001e4db:	89 e9                	mov    ecx,ebp
c001e4dd:	d3 e3                	shl    ebx,cl
c001e4df:	89 f0                	mov    eax,esi
c001e4e1:	88 d1                	mov    cl,dl
c001e4e3:	d3 e8                	shr    eax,cl
c001e4e5:	09 d8                	or     eax,ebx
c001e4e7:	89 e9                	mov    ecx,ebp
c001e4e9:	d3 e6                	shl    esi,cl
c001e4eb:	89 f3                	mov    ebx,esi
c001e4ed:	89 fa                	mov    edx,edi
c001e4ef:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001e4f3:	89 d1                	mov    ecx,edx
c001e4f5:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001e4f9:	89 c6                	mov    esi,eax
c001e4fb:	89 d7                	mov    edi,edx
c001e4fd:	39 d1                	cmp    ecx,edx
c001e4ff:	72 27                	jb     c001e528 <__umoddi3+0x10c>
c001e501:	74 21                	je     c001e524 <__umoddi3+0x108>
c001e503:	89 ca                	mov    edx,ecx
c001e505:	29 f3                	sub    ebx,esi
c001e507:	19 fa                	sbb    edx,edi
c001e509:	89 d0                	mov    eax,edx
c001e50b:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001e50f:	d3 e0                	shl    eax,cl
c001e511:	89 e9                	mov    ecx,ebp
c001e513:	d3 eb                	shr    ebx,cl
c001e515:	09 d8                	or     eax,ebx
c001e517:	d3 ea                	shr    edx,cl
c001e519:	83 c4 1c             	add    esp,0x1c
c001e51c:	5b                   	pop    ebx
c001e51d:	5e                   	pop    esi
c001e51e:	5f                   	pop    edi
c001e51f:	5d                   	pop    ebp
c001e520:	c3                   	ret    
c001e521:	8d 76 00             	lea    esi,[esi+0x0]
c001e524:	39 c3                	cmp    ebx,eax
c001e526:	73 db                	jae    c001e503 <__umoddi3+0xe7>
c001e528:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001e52c:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001e530:	89 d7                	mov    edi,edx
c001e532:	89 c6                	mov    esi,eax
c001e534:	eb cd                	jmp    c001e503 <__umoddi3+0xe7>
c001e536:	66 90                	xchg   ax,ax
c001e538:	66 90                	xchg   ax,ax
c001e53a:	66 90                	xchg   ax,ax
c001e53c:	66 90                	xchg   ax,ax
c001e53e:	66 90                	xchg   ax,ax

c001e540 <fabs>:
c001e540:	83 ec 0c             	sub    esp,0xc
c001e543:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e547:	89 04 24             	mov    DWORD PTR [esp],eax
c001e54a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e54e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c001e553:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e557:	dd 04 24             	fld    QWORD PTR [esp]
c001e55a:	83 c4 0c             	add    esp,0xc
c001e55d:	c3                   	ret    
c001e55e:	66 90                	xchg   ax,ax

c001e560 <lrint>:
c001e560:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c001e564:	83 ec 04             	sub    esp,0x4
c001e567:	db 1c 24             	fistp  DWORD PTR [esp]
c001e56a:	58                   	pop    eax
c001e56b:	c3                   	ret    

c001e56c <lrintf>:
c001e56c:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c001e570:	83 ec 04             	sub    esp,0x4
c001e573:	db 1c 24             	fistp  DWORD PTR [esp]
c001e576:	58                   	pop    eax
c001e577:	c3                   	ret    

Disassembly of section .init:

c001e578 <_init>:
c001e578:	55                   	push   ebp
c001e579:	89 e5                	mov    ebp,esp
c001e57b:	e8 98 1b fe ff       	call   c0000118 <frame_dummy>
c001e580:	e8 a3 fa ff ff       	call   c001e028 <__do_global_ctors_aux>
c001e585:	5d                   	pop    ebp
c001e586:	c3                   	ret    

Disassembly of section .fini:

c001e587 <_fini>:
c001e587:	55                   	push   ebp
c001e588:	89 e5                	mov    ebp,esp
c001e58a:	e8 19 1b fe ff       	call   c00000a8 <__do_global_dtors_aux>
c001e58f:	5d                   	pop    ebp
c001e590:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001e592 <Computer::~Computer()>:
c001e592:	83 ec 0c             	sub    esp,0xc
c001e595:	ba b8 ff 01 c0       	mov    edx,0xc001ffb8
c001e59a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e59e:	89 10                	mov    DWORD PTR [eax],edx
c001e5a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e5a4:	83 ec 0c             	sub    esp,0xc
c001e5a7:	50                   	push   eax
c001e5a8:	e8 77 4c ff ff       	call   c0013224 <Device::~Device()>
c001e5ad:	83 c4 10             	add    esp,0x10
c001e5b0:	90                   	nop
c001e5b1:	83 c4 0c             	add    esp,0xc
c001e5b4:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001e5b6 <Computer::~Computer()>:
c001e5b6:	83 ec 0c             	sub    esp,0xc
c001e5b9:	83 ec 0c             	sub    esp,0xc
c001e5bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e5c0:	e8 cd ff ff ff       	call   c001e592 <Computer::~Computer()>
c001e5c5:	83 c4 10             	add    esp,0x10
c001e5c8:	83 ec 08             	sub    esp,0x8
c001e5cb:	68 ec 01 00 00       	push   0x1ec
c001e5d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e5d4:	e8 ae 3a ff ff       	call   c0012087 <operator delete(void*, unsigned long)>
c001e5d9:	83 c4 10             	add    esp,0x10
c001e5dc:	83 c4 0c             	add    esp,0xc
c001e5df:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001e5e0 <idleCommon()>:
c001e5e0:	83 ec 0c             	sub    esp,0xc
c001e5e3:	e8 82 f9 fe ff       	call   c000df6a <lockScheduler()>
c001e5e8:	e8 b1 fc fe ff       	call   c000e29e <schedule()>
c001e5ed:	83 c4 0c             	add    esp,0xc
c001e5f0:	e9 77 f9 fe ff       	jmp    c000df6c <unlockScheduler()>

Disassembly of section .text._ZN3CPU7readCR0Ev:

c001e5f5 <CPU::readCR0()>:
c001e5f5:	83 ec 10             	sub    esp,0x10
c001e5f8:	0f 20 c0             	mov    eax,cr0
c001e5fb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e5ff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e603:	83 c4 10             	add    esp,0x10
c001e606:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR2Ev:

c001e607 <CPU::readCR2()>:
c001e607:	83 ec 10             	sub    esp,0x10
c001e60a:	0f 20 d0             	mov    eax,cr2
c001e60d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e611:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e615:	83 c4 10             	add    esp,0x10
c001e618:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR3Ev:

c001e619 <CPU::readCR3()>:
c001e619:	83 ec 10             	sub    esp,0x10
c001e61c:	0f 20 d8             	mov    eax,cr3
c001e61f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e623:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e627:	83 c4 10             	add    esp,0x10
c001e62a:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR4Ev:

c001e62b <CPU::readCR4()>:
c001e62b:	83 ec 10             	sub    esp,0x10
c001e62e:	0f 20 e0             	mov    eax,cr4
c001e631:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e635:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e639:	83 c4 10             	add    esp,0x10
c001e63c:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeCR3Em:

c001e63d <CPU::writeCR3(unsigned long)>:
c001e63d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e641:	0f 22 d8             	mov    cr3,eax
c001e644:	90                   	nop
c001e645:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001e646 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001e646:	90                   	nop
c001e647:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001e648 <ThreadControlBlock::ThreadControlBlock()>:
c001e648:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e64c:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001e653:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e657:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001e65e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e662:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001e669:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e66d:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c001e674:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e678:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001e67c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e680:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c001e684:	90                   	nop
c001e685:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001e686 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001e686:	83 ec 0c             	sub    esp,0xc
c001e689:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e68d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e693:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e697:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e69e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e6a2:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e6a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e6ad:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e6b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e6b7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e6be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e6c2:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e6c9:	83 ec 0c             	sub    esp,0xc
c001e6cc:	68 c8 08 02 c0       	push   0xc00208c8
c001e6d1:	e8 f2 e3 fe ff       	call   c000cac8 <kprintf(char const*, ...)>
c001e6d6:	83 c4 10             	add    esp,0x10
c001e6d9:	90                   	nop
c001e6da:	83 c4 0c             	add    esp,0xc
c001e6dd:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001e6de <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001e6de:	83 ec 0c             	sub    esp,0xc
c001e6e1:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001e6e6:	75 10                	jne    c001e6f8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c001e6e8:	83 ec 0c             	sub    esp,0xc
c001e6eb:	68 e4 08 02 c0       	push   0xc00208e4
c001e6f0:	e8 f1 e4 fe ff       	call   c000cbe6 <panic(char const*)>
c001e6f5:	83 c4 10             	add    esp,0x10
c001e6f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e6fc:	8b 00                	mov    eax,DWORD PTR [eax]
c001e6fe:	85 c0                	test   eax,eax
c001e700:	74 34                	je     c001e736 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c001e702:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e706:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e709:	85 c0                	test   eax,eax
c001e70b:	74 29                	je     c001e736 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c001e70d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e711:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e714:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e718:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001e71b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e71f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e723:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e726:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e72a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e72d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001e734:	eb 65                	jmp    c001e79b <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c001e736:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e73a:	8b 00                	mov    eax,DWORD PTR [eax]
c001e73c:	85 c0                	test   eax,eax
c001e73e:	75 4b                	jne    c001e78b <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c001e740:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e744:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e747:	85 c0                	test   eax,eax
c001e749:	75 40                	jne    c001e78b <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c001e74b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e74f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e753:	89 10                	mov    DWORD PTR [eax],edx
c001e755:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e759:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e75d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e760:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e764:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e767:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001e76e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e772:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e775:	85 c0                	test   eax,eax
c001e777:	74 22                	je     c001e79b <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c001e779:	83 ec 0c             	sub    esp,0xc
c001e77c:	68 06 09 02 c0       	push   0xc0020906
c001e781:	e8 60 e4 fe ff       	call   c000cbe6 <panic(char const*)>
c001e786:	83 c4 10             	add    esp,0x10
c001e789:	eb 10                	jmp    c001e79b <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c001e78b:	83 ec 0c             	sub    esp,0xc
c001e78e:	68 10 09 02 c0       	push   0xc0020910
c001e793:	e8 4e e4 fe ff       	call   c000cbe6 <panic(char const*)>
c001e798:	83 c4 10             	add    esp,0x10
c001e79b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e79f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e7a2:	8d 50 01             	lea    edx,[eax+0x1]
c001e7a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e7a9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e7ac:	90                   	nop
c001e7ad:	83 c4 0c             	add    esp,0xc
c001e7b0:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001e7b2 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001e7b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e7b6:	8b 00                	mov    eax,DWORD PTR [eax]
c001e7b8:	85 c0                	test   eax,eax
c001e7ba:	75 0e                	jne    c001e7ca <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001e7bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e7c0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e7c3:	85 c0                	test   eax,eax
c001e7c5:	75 03                	jne    c001e7ca <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001e7c7:	b0 01                	mov    al,0x1
c001e7c9:	c3                   	ret    
c001e7ca:	b0 00                	mov    al,0x0
c001e7cc:	90                   	nop
c001e7cd:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001e7ce <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001e7ce:	83 ec 0c             	sub    esp,0xc
c001e7d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e7d5:	8b 00                	mov    eax,DWORD PTR [eax]
c001e7d7:	85 c0                	test   eax,eax
c001e7d9:	75 15                	jne    c001e7f0 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c001e7db:	83 ec 0c             	sub    esp,0xc
c001e7de:	68 1c 09 02 c0       	push   0xc002091c
c001e7e3:	e8 fe e3 fe ff       	call   c000cbe6 <panic(char const*)>
c001e7e8:	83 c4 10             	add    esp,0x10
c001e7eb:	e9 88 00 00 00       	jmp    c001e878 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c001e7f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e7f4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e7f7:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001e7fa:	85 c0                	test   eax,eax
c001e7fc:	0f 95 c0             	setne  al
c001e7ff:	84 c0                	test   al,al
c001e801:	74 10                	je     c001e813 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c001e803:	83 ec 0c             	sub    esp,0xc
c001e806:	68 67 09 02 c0       	push   0xc0020967
c001e80b:	e8 d6 e3 fe ff       	call   c000cbe6 <panic(char const*)>
c001e810:	83 c4 10             	add    esp,0x10
c001e813:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e817:	8b 00                	mov    eax,DWORD PTR [eax]
c001e819:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001e81c:	85 c0                	test   eax,eax
c001e81e:	0f 94 c0             	sete   al
c001e821:	84 c0                	test   al,al
c001e823:	74 33                	je     c001e858 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c001e825:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e829:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e82f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e833:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e83a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e83e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e841:	83 f8 01             	cmp    eax,0x1
c001e844:	74 21                	je     c001e867 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c001e846:	83 ec 0c             	sub    esp,0xc
c001e849:	68 40 09 02 c0       	push   0xc0020940
c001e84e:	e8 93 e3 fe ff       	call   c000cbe6 <panic(char const*)>
c001e853:	83 c4 10             	add    esp,0x10
c001e856:	eb 0f                	jmp    c001e867 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c001e858:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e85c:	8b 00                	mov    eax,DWORD PTR [eax]
c001e85e:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001e861:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e865:	89 10                	mov    DWORD PTR [eax],edx
c001e867:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e86b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e86e:	8d 50 ff             	lea    edx,[eax-0x1]
c001e871:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e875:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e878:	83 c4 0c             	add    esp,0xc
c001e87b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001e87c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001e87c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e880:	8b 00                	mov    eax,DWORD PTR [eax]
c001e882:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001e884 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001e884:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e888:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001e88b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001e88c <LinkedList<UnixFile>::~LinkedList()>:
c001e88c:	90                   	nop
c001e88d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001e88e <LinkedList<UnixFile>::LinkedList()>:
c001e88e:	83 ec 0c             	sub    esp,0xc
c001e891:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e895:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e89b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e89f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e8a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8aa:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e8b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8b5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e8bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8bf:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e8c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8ca:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e8d1:	83 ec 0c             	sub    esp,0xc
c001e8d4:	68 c8 08 02 c0       	push   0xc00208c8
c001e8d9:	e8 ea e1 fe ff       	call   c000cac8 <kprintf(char const*, ...)>
c001e8de:	83 c4 10             	add    esp,0x10
c001e8e1:	90                   	nop
c001e8e2:	83 c4 0c             	add    esp,0xc
c001e8e5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001e8e6 <LinkedList<UnixFile>::getFirstElement()>:
c001e8e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e8ea:	8b 00                	mov    eax,DWORD PTR [eax]
c001e8ec:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001e8ee <LinkedList<UnixFile>::removeFirst()>:
c001e8ee:	83 ec 0c             	sub    esp,0xc
c001e8f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8f5:	8b 00                	mov    eax,DWORD PTR [eax]
c001e8f7:	85 c0                	test   eax,eax
c001e8f9:	75 12                	jne    c001e90d <LinkedList<UnixFile>::removeFirst()+0x1f>
c001e8fb:	83 ec 0c             	sub    esp,0xc
c001e8fe:	68 1c 09 02 c0       	push   0xc002091c
c001e903:	e8 de e2 fe ff       	call   c000cbe6 <panic(char const*)>
c001e908:	83 c4 10             	add    esp,0x10
c001e90b:	eb 7e                	jmp    c001e98b <LinkedList<UnixFile>::removeFirst()+0x9d>
c001e90d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e911:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e914:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e917:	85 c0                	test   eax,eax
c001e919:	74 10                	je     c001e92b <LinkedList<UnixFile>::removeFirst()+0x3d>
c001e91b:	83 ec 0c             	sub    esp,0xc
c001e91e:	68 67 09 02 c0       	push   0xc0020967
c001e923:	e8 be e2 fe ff       	call   c000cbe6 <panic(char const*)>
c001e928:	83 c4 10             	add    esp,0x10
c001e92b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e92f:	8b 00                	mov    eax,DWORD PTR [eax]
c001e931:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e934:	85 c0                	test   eax,eax
c001e936:	75 33                	jne    c001e96b <LinkedList<UnixFile>::removeFirst()+0x7d>
c001e938:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e93c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e942:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e946:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e94d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e951:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e954:	83 f8 01             	cmp    eax,0x1
c001e957:	74 21                	je     c001e97a <LinkedList<UnixFile>::removeFirst()+0x8c>
c001e959:	83 ec 0c             	sub    esp,0xc
c001e95c:	68 40 09 02 c0       	push   0xc0020940
c001e961:	e8 80 e2 fe ff       	call   c000cbe6 <panic(char const*)>
c001e966:	83 c4 10             	add    esp,0x10
c001e969:	eb 0f                	jmp    c001e97a <LinkedList<UnixFile>::removeFirst()+0x8c>
c001e96b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e96f:	8b 00                	mov    eax,DWORD PTR [eax]
c001e971:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001e974:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e978:	89 10                	mov    DWORD PTR [eax],edx
c001e97a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e97e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e981:	8d 50 ff             	lea    edx,[eax-0x1]
c001e984:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e988:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e98b:	83 c4 0c             	add    esp,0xc
c001e98e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001e990 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001e990:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e994:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e997:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001e998 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001e998:	83 ec 1c             	sub    esp,0x1c
c001e99b:	83 ec 0c             	sub    esp,0xc
c001e99e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e9a2:	e8 3f ff ff ff       	call   c001e8e6 <LinkedList<UnixFile>::getFirstElement()>
c001e9a7:	83 c4 10             	add    esp,0x10
c001e9aa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e9ae:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001e9b3:	74 43                	je     c001e9f8 <LinkedList<UnixFile>::addElement(UnixFile*)+0x60>
c001e9b5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e9b9:	3b 44 24 24          	cmp    eax,DWORD PTR [esp+0x24]
c001e9bd:	75 20                	jne    c001e9df <LinkedList<UnixFile>::addElement(UnixFile*)+0x47>
c001e9bf:	83 ec 0c             	sub    esp,0xc
c001e9c2:	68 0c 0b 02 c0       	push   0xc0020b0c
c001e9c7:	e8 fc e0 fe ff       	call   c000cac8 <kprintf(char const*, ...)>
c001e9cc:	83 c4 10             	add    esp,0x10
c001e9cf:	83 ec 0c             	sub    esp,0xc
c001e9d2:	68 23 0b 02 c0       	push   0xc0020b23
c001e9d7:	e8 0a e2 fe ff       	call   c000cbe6 <panic(char const*)>
c001e9dc:	83 c4 10             	add    esp,0x10
c001e9df:	83 ec 08             	sub    esp,0x8
c001e9e2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001e9e6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e9ea:	e8 a1 ff ff ff       	call   c001e990 <LinkedList<UnixFile>::getNext(UnixFile*)>
c001e9ef:	83 c4 10             	add    esp,0x10
c001e9f2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e9f6:	eb b6                	jmp    c001e9ae <LinkedList<UnixFile>::addElement(UnixFile*)+0x16>
c001e9f8:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001e9fd:	75 10                	jne    c001ea0f <LinkedList<UnixFile>::addElement(UnixFile*)+0x77>
c001e9ff:	83 ec 0c             	sub    esp,0xc
c001ea02:	68 e4 08 02 c0       	push   0xc00208e4
c001ea07:	e8 da e1 fe ff       	call   c000cbe6 <panic(char const*)>
c001ea0c:	83 c4 10             	add    esp,0x10
c001ea0f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ea13:	8b 00                	mov    eax,DWORD PTR [eax]
c001ea15:	85 c0                	test   eax,eax
c001ea17:	74 34                	je     c001ea4d <LinkedList<UnixFile>::addElement(UnixFile*)+0xb5>
c001ea19:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ea1d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ea20:	85 c0                	test   eax,eax
c001ea22:	74 29                	je     c001ea4d <LinkedList<UnixFile>::addElement(UnixFile*)+0xb5>
c001ea24:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ea28:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ea2b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001ea2f:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ea32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ea36:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001ea3a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ea3d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ea41:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ea44:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ea4b:	eb 65                	jmp    c001eab2 <LinkedList<UnixFile>::addElement(UnixFile*)+0x11a>
c001ea4d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ea51:	8b 00                	mov    eax,DWORD PTR [eax]
c001ea53:	85 c0                	test   eax,eax
c001ea55:	75 4b                	jne    c001eaa2 <LinkedList<UnixFile>::addElement(UnixFile*)+0x10a>
c001ea57:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ea5b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ea5e:	85 c0                	test   eax,eax
c001ea60:	75 40                	jne    c001eaa2 <LinkedList<UnixFile>::addElement(UnixFile*)+0x10a>
c001ea62:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ea66:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001ea6a:	89 10                	mov    DWORD PTR [eax],edx
c001ea6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ea70:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001ea74:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ea77:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ea7b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ea7e:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ea85:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ea89:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ea8c:	85 c0                	test   eax,eax
c001ea8e:	74 22                	je     c001eab2 <LinkedList<UnixFile>::addElement(UnixFile*)+0x11a>
c001ea90:	83 ec 0c             	sub    esp,0xc
c001ea93:	68 06 09 02 c0       	push   0xc0020906
c001ea98:	e8 49 e1 fe ff       	call   c000cbe6 <panic(char const*)>
c001ea9d:	83 c4 10             	add    esp,0x10
c001eaa0:	eb 10                	jmp    c001eab2 <LinkedList<UnixFile>::addElement(UnixFile*)+0x11a>
c001eaa2:	83 ec 0c             	sub    esp,0xc
c001eaa5:	68 10 09 02 c0       	push   0xc0020910
c001eaaa:	e8 37 e1 fe ff       	call   c000cbe6 <panic(char const*)>
c001eaaf:	83 c4 10             	add    esp,0x10
c001eab2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eab6:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001eab9:	8d 50 01             	lea    edx,[eax+0x1]
c001eabc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eac0:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001eac3:	90                   	nop
c001eac4:	83 c4 1c             	add    esp,0x1c
c001eac7:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001eac8 <DriverlessDevice::~DriverlessDevice()>:
c001eac8:	ba c4 10 02 c0       	mov    edx,0xc00210c4
c001eacd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ead1:	89 10                	mov    DWORD PTR [eax],edx
c001ead3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ead7:	50                   	push   eax
c001ead8:	e8 47 47 ff ff       	call   c0013224 <Device::~Device()>
c001eadd:	83 c4 04             	add    esp,0x4
c001eae0:	90                   	nop
c001eae1:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001eae2 <DriverlessDevice::~DriverlessDevice()>:
c001eae2:	83 ec 0c             	sub    esp,0xc
c001eae5:	83 ec 0c             	sub    esp,0xc
c001eae8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eaec:	e8 d7 ff ff ff       	call   c001eac8 <DriverlessDevice::~DriverlessDevice()>
c001eaf1:	83 c4 10             	add    esp,0x10
c001eaf4:	83 ec 08             	sub    esp,0x8
c001eaf7:	68 58 01 00 00       	push   0x158
c001eafc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eb00:	e8 82 35 ff ff       	call   c0012087 <operator delete(void*, unsigned long)>
c001eb05:	83 c4 10             	add    esp,0x10
c001eb08:	83 c4 0c             	add    esp,0xc
c001eb0b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001eb0c <LinkedList<Device>::addElement(Device*)>:
c001eb0c:	83 ec 0c             	sub    esp,0xc
c001eb0f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001eb14:	75 10                	jne    c001eb26 <LinkedList<Device>::addElement(Device*)+0x1a>
c001eb16:	83 ec 0c             	sub    esp,0xc
c001eb19:	68 e4 08 02 c0       	push   0xc00208e4
c001eb1e:	e8 c3 e0 fe ff       	call   c000cbe6 <panic(char const*)>
c001eb23:	83 c4 10             	add    esp,0x10
c001eb26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb2a:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb2c:	85 c0                	test   eax,eax
c001eb2e:	74 3a                	je     c001eb6a <LinkedList<Device>::addElement(Device*)+0x5e>
c001eb30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb34:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eb37:	85 c0                	test   eax,eax
c001eb39:	74 2f                	je     c001eb6a <LinkedList<Device>::addElement(Device*)+0x5e>
c001eb3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb3f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eb42:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eb46:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001eb4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb50:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eb54:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001eb57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb5b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eb5e:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001eb68:	eb 68                	jmp    c001ebd2 <LinkedList<Device>::addElement(Device*)+0xc6>
c001eb6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb6e:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb70:	85 c0                	test   eax,eax
c001eb72:	75 4e                	jne    c001ebc2 <LinkedList<Device>::addElement(Device*)+0xb6>
c001eb74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb78:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eb7b:	85 c0                	test   eax,eax
c001eb7d:	75 43                	jne    c001ebc2 <LinkedList<Device>::addElement(Device*)+0xb6>
c001eb7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb83:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eb87:	89 10                	mov    DWORD PTR [eax],edx
c001eb89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb8d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eb91:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001eb94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb98:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eb9b:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001eba5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eba9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ebac:	85 c0                	test   eax,eax
c001ebae:	74 22                	je     c001ebd2 <LinkedList<Device>::addElement(Device*)+0xc6>
c001ebb0:	83 ec 0c             	sub    esp,0xc
c001ebb3:	68 06 09 02 c0       	push   0xc0020906
c001ebb8:	e8 29 e0 fe ff       	call   c000cbe6 <panic(char const*)>
c001ebbd:	83 c4 10             	add    esp,0x10
c001ebc0:	eb 10                	jmp    c001ebd2 <LinkedList<Device>::addElement(Device*)+0xc6>
c001ebc2:	83 ec 0c             	sub    esp,0xc
c001ebc5:	68 10 09 02 c0       	push   0xc0020910
c001ebca:	e8 17 e0 fe ff       	call   c000cbe6 <panic(char const*)>
c001ebcf:	83 c4 10             	add    esp,0x10
c001ebd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebd6:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ebd9:	8d 50 01             	lea    edx,[eax+0x1]
c001ebdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebe0:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ebe3:	90                   	nop
c001ebe4:	83 c4 0c             	add    esp,0xc
c001ebe7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001ebe8 <LinkedList<Device>::LinkedList()>:
c001ebe8:	83 ec 0c             	sub    esp,0xc
c001ebeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebef:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ebf5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebf9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ec00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec04:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ec0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec0f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ec15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec19:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ec20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec24:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ec2b:	83 ec 0c             	sub    esp,0xc
c001ec2e:	68 c8 08 02 c0       	push   0xc00208c8
c001ec33:	e8 90 de fe ff       	call   c000cac8 <kprintf(char const*, ...)>
c001ec38:	83 c4 10             	add    esp,0x10
c001ec3b:	90                   	nop
c001ec3c:	83 c4 0c             	add    esp,0xc
c001ec3f:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR0Ev:

c001ec40 <CPU::readDR0()>:
c001ec40:	83 ec 10             	sub    esp,0x10
c001ec43:	0f 21 c0             	mov    eax,db0
c001ec46:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ec4a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ec4e:	83 c4 10             	add    esp,0x10
c001ec51:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR1Ev:

c001ec52 <CPU::readDR1()>:
c001ec52:	83 ec 10             	sub    esp,0x10
c001ec55:	0f 21 c8             	mov    eax,db1
c001ec58:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ec5c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ec60:	83 c4 10             	add    esp,0x10
c001ec63:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR2Ev:

c001ec64 <CPU::readDR2()>:
c001ec64:	83 ec 10             	sub    esp,0x10
c001ec67:	0f 21 d0             	mov    eax,db2
c001ec6a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ec6e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ec72:	83 c4 10             	add    esp,0x10
c001ec75:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR3Ev:

c001ec76 <CPU::readDR3()>:
c001ec76:	83 ec 10             	sub    esp,0x10
c001ec79:	0f 21 d8             	mov    eax,db3
c001ec7c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ec80:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ec84:	83 c4 10             	add    esp,0x10
c001ec87:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR6Ev:

c001ec88 <CPU::readDR6()>:
c001ec88:	83 ec 10             	sub    esp,0x10
c001ec8b:	0f 21 f0             	mov    eax,db6
c001ec8e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ec92:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ec96:	83 c4 10             	add    esp,0x10
c001ec99:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR7Ev:

c001ec9a <CPU::readDR7()>:
c001ec9a:	83 ec 10             	sub    esp,0x10
c001ec9d:	0f 21 f8             	mov    eax,db7
c001eca0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001eca4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001eca8:	83 c4 10             	add    esp,0x10
c001ecab:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001ecac <ACPI::~ACPI()>:
c001ecac:	83 ec 0c             	sub    esp,0xc
c001ecaf:	ba 08 18 02 c0       	mov    edx,0xc0021808
c001ecb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecb8:	89 10                	mov    DWORD PTR [eax],edx
c001ecba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecbe:	83 ec 0c             	sub    esp,0xc
c001ecc1:	50                   	push   eax
c001ecc2:	e8 5d 45 ff ff       	call   c0013224 <Device::~Device()>
c001ecc7:	83 c4 10             	add    esp,0x10
c001ecca:	90                   	nop
c001eccb:	83 c4 0c             	add    esp,0xc
c001ecce:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001ecd0 <ACPI::~ACPI()>:
c001ecd0:	83 ec 0c             	sub    esp,0xc
c001ecd3:	83 ec 0c             	sub    esp,0xc
c001ecd6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ecda:	e8 cd ff ff ff       	call   c001ecac <ACPI::~ACPI()>
c001ecdf:	83 c4 10             	add    esp,0x10
c001ece2:	83 ec 08             	sub    esp,0x8
c001ece5:	68 68 22 00 00       	push   0x2268
c001ecea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ecee:	e8 94 33 ff ff       	call   c0012087 <operator delete(void*, unsigned long)>
c001ecf3:	83 c4 10             	add    esp,0x10
c001ecf6:	83 c4 0c             	add    esp,0xc
c001ecf9:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001ecfa <CPU::~CPU()>:
c001ecfa:	83 ec 0c             	sub    esp,0xc
c001ecfd:	ba 58 1a 02 c0       	mov    edx,0xc0021a58
c001ed02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed06:	89 10                	mov    DWORD PTR [eax],edx
c001ed08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed0c:	83 ec 0c             	sub    esp,0xc
c001ed0f:	50                   	push   eax
c001ed10:	e8 0f 45 ff ff       	call   c0013224 <Device::~Device()>
c001ed15:	83 c4 10             	add    esp,0x10
c001ed18:	90                   	nop
c001ed19:	83 c4 0c             	add    esp,0xc
c001ed1c:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001ed1e <CPU::~CPU()>:
c001ed1e:	83 ec 0c             	sub    esp,0xc
c001ed21:	83 ec 0c             	sub    esp,0xc
c001ed24:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ed28:	e8 cd ff ff ff       	call   c001ecfa <CPU::~CPU()>
c001ed2d:	83 c4 10             	add    esp,0x10
c001ed30:	83 ec 08             	sub    esp,0x8
c001ed33:	68 98 11 00 00       	push   0x1198
c001ed38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ed3c:	e8 46 33 ff ff       	call   c0012087 <operator delete(void*, unsigned long)>
c001ed41:	83 c4 10             	add    esp,0x10
c001ed44:	83 c4 0c             	add    esp,0xc
c001ed47:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeDR7Em:

c001ed48 <CPU::writeDR7(unsigned long)>:
c001ed48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ed4c:	0f 23 f8             	mov    db7,eax
c001ed4f:	90                   	nop
c001ed50:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeCR4Em:

c001ed51 <CPU::writeCR4(unsigned long)>:
c001ed51:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ed55:	0f 22 e0             	mov    cr4,eax
c001ed58:	90                   	nop
c001ed59:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001ed5a <PCI::~PCI()>:
c001ed5a:	83 ec 0c             	sub    esp,0xc
c001ed5d:	ba f4 1d 02 c0       	mov    edx,0xc0021df4
c001ed62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed66:	89 10                	mov    DWORD PTR [eax],edx
c001ed68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed6c:	83 ec 0c             	sub    esp,0xc
c001ed6f:	50                   	push   eax
c001ed70:	e8 bf 3e ff ff       	call   c0012c34 <Bus::~Bus()>
c001ed75:	83 c4 10             	add    esp,0x10
c001ed78:	90                   	nop
c001ed79:	83 c4 0c             	add    esp,0xc
c001ed7c:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001ed7e <PCI::~PCI()>:
c001ed7e:	83 ec 0c             	sub    esp,0xc
c001ed81:	83 ec 0c             	sub    esp,0xc
c001ed84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ed88:	e8 cd ff ff ff       	call   c001ed5a <PCI::~PCI()>
c001ed8d:	83 c4 10             	add    esp,0x10
c001ed90:	83 ec 08             	sub    esp,0x8
c001ed93:	68 58 01 00 00       	push   0x158
c001ed98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ed9c:	e8 e6 32 ff ff       	call   c0012087 <operator delete(void*, unsigned long)>
c001eda1:	83 c4 10             	add    esp,0x10
c001eda4:	83 c4 0c             	add    esp,0xc
c001eda7:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001eda8 <IDE::~IDE()>:
c001eda8:	83 ec 0c             	sub    esp,0xc
c001edab:	ba c0 20 02 c0       	mov    edx,0xc00220c0
c001edb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edb4:	89 10                	mov    DWORD PTR [eax],edx
c001edb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edba:	83 ec 0c             	sub    esp,0xc
c001edbd:	50                   	push   eax
c001edbe:	e8 77 49 ff ff       	call   c001373a <HardDiskController::~HardDiskController()>
c001edc3:	83 c4 10             	add    esp,0x10
c001edc6:	90                   	nop
c001edc7:	83 c4 0c             	add    esp,0xc
c001edca:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001edcc <IDE::~IDE()>:
c001edcc:	83 ec 0c             	sub    esp,0xc
c001edcf:	83 ec 0c             	sub    esp,0xc
c001edd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001edd6:	e8 cd ff ff ff       	call   c001eda8 <IDE::~IDE()>
c001eddb:	83 c4 10             	add    esp,0x10
c001edde:	83 ec 08             	sub    esp,0x8
c001ede1:	68 70 02 00 00       	push   0x270
c001ede6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001edea:	e8 98 32 ff ff       	call   c0012087 <operator delete(void*, unsigned long)>
c001edef:	83 c4 10             	add    esp,0x10
c001edf2:	83 c4 0c             	add    esp,0xc
c001edf5:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001edf6 <ATA::~ATA()>:
c001edf6:	83 ec 0c             	sub    esp,0xc
c001edf9:	ba 10 21 02 c0       	mov    edx,0xc0022110
c001edfe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee02:	89 10                	mov    DWORD PTR [eax],edx
c001ee04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee08:	83 ec 0c             	sub    esp,0xc
c001ee0b:	50                   	push   eax
c001ee0c:	e8 07 4a ff ff       	call   c0013818 <PhysicalDisk::~PhysicalDisk()>
c001ee11:	83 c4 10             	add    esp,0x10
c001ee14:	90                   	nop
c001ee15:	83 c4 0c             	add    esp,0xc
c001ee18:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001ee1a <ATA::~ATA()>:
c001ee1a:	83 ec 0c             	sub    esp,0xc
c001ee1d:	83 ec 0c             	sub    esp,0xc
c001ee20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ee24:	e8 cd ff ff ff       	call   c001edf6 <ATA::~ATA()>
c001ee29:	83 c4 10             	add    esp,0x10
c001ee2c:	83 ec 08             	sub    esp,0x8
c001ee2f:	68 7c 01 00 00       	push   0x17c
c001ee34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ee38:	e8 4a 32 ff ff       	call   c0012087 <operator delete(void*, unsigned long)>
c001ee3d:	83 c4 10             	add    esp,0x10
c001ee40:	83 c4 0c             	add    esp,0xc
c001ee43:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001ee44 <ATAPI::~ATAPI()>:
c001ee44:	83 ec 0c             	sub    esp,0xc
c001ee47:	ba 7c 21 02 c0       	mov    edx,0xc002217c
c001ee4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee50:	89 10                	mov    DWORD PTR [eax],edx
c001ee52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee56:	83 ec 0c             	sub    esp,0xc
c001ee59:	50                   	push   eax
c001ee5a:	e8 b9 49 ff ff       	call   c0013818 <PhysicalDisk::~PhysicalDisk()>
c001ee5f:	83 c4 10             	add    esp,0x10
c001ee62:	90                   	nop
c001ee63:	83 c4 0c             	add    esp,0xc
c001ee66:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001ee68 <ATAPI::~ATAPI()>:
c001ee68:	83 ec 0c             	sub    esp,0xc
c001ee6b:	83 ec 0c             	sub    esp,0xc
c001ee6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ee72:	e8 cd ff ff ff       	call   c001ee44 <ATAPI::~ATAPI()>
c001ee77:	83 c4 10             	add    esp,0x10
c001ee7a:	83 ec 08             	sub    esp,0x8
c001ee7d:	68 80 01 00 00       	push   0x180
c001ee82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ee86:	e8 fc 31 ff ff       	call   c0012087 <operator delete(void*, unsigned long)>
c001ee8b:	83 c4 10             	add    esp,0x10
c001ee8e:	83 c4 0c             	add    esp,0xc
c001ee91:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c001ee92 <AVX::~AVX()>:
c001ee92:	83 ec 0c             	sub    esp,0xc
c001ee95:	ba b8 21 02 c0       	mov    edx,0xc00221b8
c001ee9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee9e:	89 10                	mov    DWORD PTR [eax],edx
c001eea0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eea4:	83 ec 0c             	sub    esp,0xc
c001eea7:	50                   	push   eax
c001eea8:	e8 ef 49 ff ff       	call   c001389c <FPU::~FPU()>
c001eead:	83 c4 10             	add    esp,0x10
c001eeb0:	90                   	nop
c001eeb1:	83 c4 0c             	add    esp,0xc
c001eeb4:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c001eeb6 <AVX::~AVX()>:
c001eeb6:	83 ec 0c             	sub    esp,0xc
c001eeb9:	83 ec 0c             	sub    esp,0xc
c001eebc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eec0:	e8 cd ff ff ff       	call   c001ee92 <AVX::~AVX()>
c001eec5:	83 c4 10             	add    esp,0x10
c001eec8:	83 ec 08             	sub    esp,0x8
c001eecb:	68 58 01 00 00       	push   0x158
c001eed0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eed4:	e8 ae 31 ff ff       	call   c0012087 <operator delete(void*, unsigned long)>
c001eed9:	83 c4 10             	add    esp,0x10
c001eedc:	83 c4 0c             	add    esp,0xc
c001eedf:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c001eee0 <MMX::~MMX()>:
c001eee0:	83 ec 0c             	sub    esp,0xc
c001eee3:	ba f8 21 02 c0       	mov    edx,0xc00221f8
c001eee8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eeec:	89 10                	mov    DWORD PTR [eax],edx
c001eeee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eef2:	83 ec 0c             	sub    esp,0xc
c001eef5:	50                   	push   eax
c001eef6:	e8 a1 49 ff ff       	call   c001389c <FPU::~FPU()>
c001eefb:	83 c4 10             	add    esp,0x10
c001eefe:	90                   	nop
c001eeff:	83 c4 0c             	add    esp,0xc
c001ef02:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c001ef04 <MMX::~MMX()>:
c001ef04:	83 ec 0c             	sub    esp,0xc
c001ef07:	83 ec 0c             	sub    esp,0xc
c001ef0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ef0e:	e8 cd ff ff ff       	call   c001eee0 <MMX::~MMX()>
c001ef13:	83 c4 10             	add    esp,0x10
c001ef16:	83 ec 08             	sub    esp,0x8
c001ef19:	68 58 01 00 00       	push   0x158
c001ef1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ef22:	e8 60 31 ff ff       	call   c0012087 <operator delete(void*, unsigned long)>
c001ef27:	83 c4 10             	add    esp,0x10
c001ef2a:	83 c4 0c             	add    esp,0xc
c001ef2d:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c001ef2e <SSE::~SSE()>:
c001ef2e:	83 ec 0c             	sub    esp,0xc
c001ef31:	ba 38 22 02 c0       	mov    edx,0xc0022238
c001ef36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef3a:	89 10                	mov    DWORD PTR [eax],edx
c001ef3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef40:	83 ec 0c             	sub    esp,0xc
c001ef43:	50                   	push   eax
c001ef44:	e8 53 49 ff ff       	call   c001389c <FPU::~FPU()>
c001ef49:	83 c4 10             	add    esp,0x10
c001ef4c:	90                   	nop
c001ef4d:	83 c4 0c             	add    esp,0xc
c001ef50:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c001ef52 <SSE::~SSE()>:
c001ef52:	83 ec 0c             	sub    esp,0xc
c001ef55:	83 ec 0c             	sub    esp,0xc
c001ef58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ef5c:	e8 cd ff ff ff       	call   c001ef2e <SSE::~SSE()>
c001ef61:	83 c4 10             	add    esp,0x10
c001ef64:	83 ec 08             	sub    esp,0x8
c001ef67:	68 58 01 00 00       	push   0x158
c001ef6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ef70:	e8 12 31 ff ff       	call   c0012087 <operator delete(void*, unsigned long)>
c001ef75:	83 c4 10             	add    esp,0x10
c001ef78:	83 c4 0c             	add    esp,0xc
c001ef7b:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c001ef7c <x87::~x87()>:
c001ef7c:	83 ec 0c             	sub    esp,0xc
c001ef7f:	ba 78 22 02 c0       	mov    edx,0xc0022278
c001ef84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef88:	89 10                	mov    DWORD PTR [eax],edx
c001ef8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef8e:	83 ec 0c             	sub    esp,0xc
c001ef91:	50                   	push   eax
c001ef92:	e8 05 49 ff ff       	call   c001389c <FPU::~FPU()>
c001ef97:	83 c4 10             	add    esp,0x10
c001ef9a:	90                   	nop
c001ef9b:	83 c4 0c             	add    esp,0xc
c001ef9e:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c001efa0 <x87::~x87()>:
c001efa0:	83 ec 0c             	sub    esp,0xc
c001efa3:	83 ec 0c             	sub    esp,0xc
c001efa6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001efaa:	e8 cd ff ff ff       	call   c001ef7c <x87::~x87()>
c001efaf:	83 c4 10             	add    esp,0x10
c001efb2:	83 ec 08             	sub    esp,0x8
c001efb5:	68 58 01 00 00       	push   0x158
c001efba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001efbe:	e8 c4 30 ff ff       	call   c0012087 <operator delete(void*, unsigned long)>
c001efc3:	83 c4 10             	add    esp,0x10
c001efc6:	83 c4 0c             	add    esp,0xc
c001efc9:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001efca <IOAPIC::~IOAPIC()>:
c001efca:	83 ec 0c             	sub    esp,0xc
c001efcd:	ba d0 23 02 c0       	mov    edx,0xc00223d0
c001efd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efd6:	89 10                	mov    DWORD PTR [eax],edx
c001efd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efdc:	83 ec 0c             	sub    esp,0xc
c001efdf:	50                   	push   eax
c001efe0:	e8 3f 42 ff ff       	call   c0013224 <Device::~Device()>
c001efe5:	83 c4 10             	add    esp,0x10
c001efe8:	90                   	nop
c001efe9:	83 c4 0c             	add    esp,0xc
c001efec:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c001efee <IOAPIC::~IOAPIC()>:
c001efee:	83 ec 0c             	sub    esp,0xc
c001eff1:	83 ec 0c             	sub    esp,0xc
c001eff4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eff8:	e8 cd ff ff ff       	call   c001efca <IOAPIC::~IOAPIC()>
c001effd:	83 c4 10             	add    esp,0x10
c001f000:	83 ec 08             	sub    esp,0x8
c001f003:	68 68 01 00 00       	push   0x168
c001f008:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f00c:	e8 76 30 ff ff       	call   c0012087 <operator delete(void*, unsigned long)>
c001f011:	83 c4 10             	add    esp,0x10
c001f014:	83 c4 0c             	add    esp,0xc
c001f017:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c001f018 <APIC::~APIC()>:
c001f018:	83 ec 0c             	sub    esp,0xc
c001f01b:	ba 88 23 02 c0       	mov    edx,0xc0022388
c001f020:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f024:	89 10                	mov    DWORD PTR [eax],edx
c001f026:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f02a:	83 ec 0c             	sub    esp,0xc
c001f02d:	50                   	push   eax
c001f02e:	e8 0d 4d ff ff       	call   c0013d40 <InterruptController::~InterruptController()>
c001f033:	83 c4 10             	add    esp,0x10
c001f036:	90                   	nop
c001f037:	83 c4 0c             	add    esp,0xc
c001f03a:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c001f03c <APIC::~APIC()>:
c001f03c:	83 ec 0c             	sub    esp,0xc
c001f03f:	83 ec 0c             	sub    esp,0xc
c001f042:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f046:	e8 cd ff ff ff       	call   c001f018 <APIC::~APIC()>
c001f04b:	83 c4 10             	add    esp,0x10
c001f04e:	83 ec 08             	sub    esp,0x8
c001f051:	68 58 21 00 00       	push   0x2158
c001f056:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f05a:	e8 28 30 ff ff       	call   c0012087 <operator delete(void*, unsigned long)>
c001f05f:	83 c4 10             	add    esp,0x10
c001f062:	83 c4 0c             	add    esp,0xc
c001f065:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c001f066 <PIC::~PIC()>:
c001f066:	83 ec 0c             	sub    esp,0xc
c001f069:	ba 20 24 02 c0       	mov    edx,0xc0022420
c001f06e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f072:	89 10                	mov    DWORD PTR [eax],edx
c001f074:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f078:	83 ec 0c             	sub    esp,0xc
c001f07b:	50                   	push   eax
c001f07c:	e8 bf 4c ff ff       	call   c0013d40 <InterruptController::~InterruptController()>
c001f081:	83 c4 10             	add    esp,0x10
c001f084:	90                   	nop
c001f085:	83 c4 0c             	add    esp,0xc
c001f088:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c001f08a <PIC::~PIC()>:
c001f08a:	83 ec 0c             	sub    esp,0xc
c001f08d:	83 ec 0c             	sub    esp,0xc
c001f090:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f094:	e8 cd ff ff ff       	call   c001f066 <PIC::~PIC()>
c001f099:	83 c4 10             	add    esp,0x10
c001f09c:	83 ec 08             	sub    esp,0x8
c001f09f:	68 58 21 00 00       	push   0x2158
c001f0a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f0a8:	e8 da 2f ff ff       	call   c0012087 <operator delete(void*, unsigned long)>
c001f0ad:	83 c4 10             	add    esp,0x10
c001f0b0:	83 c4 0c             	add    esp,0xc
c001f0b3:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c001f0b4 <APICTimer::~APICTimer()>:
c001f0b4:	83 ec 0c             	sub    esp,0xc
c001f0b7:	ba 74 24 02 c0       	mov    edx,0xc0022474
c001f0bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0c0:	89 10                	mov    DWORD PTR [eax],edx
c001f0c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0c6:	83 ec 0c             	sub    esp,0xc
c001f0c9:	50                   	push   eax
c001f0ca:	e8 41 62 ff ff       	call   c0015310 <Timer::~Timer()>
c001f0cf:	83 c4 10             	add    esp,0x10
c001f0d2:	90                   	nop
c001f0d3:	83 c4 0c             	add    esp,0xc
c001f0d6:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c001f0d8 <APICTimer::~APICTimer()>:
c001f0d8:	83 ec 0c             	sub    esp,0xc
c001f0db:	83 ec 0c             	sub    esp,0xc
c001f0de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f0e2:	e8 cd ff ff ff       	call   c001f0b4 <APICTimer::~APICTimer()>
c001f0e7:	83 c4 10             	add    esp,0x10
c001f0ea:	83 ec 08             	sub    esp,0x8
c001f0ed:	68 60 01 00 00       	push   0x160
c001f0f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f0f6:	e8 8c 2f ff ff       	call   c0012087 <operator delete(void*, unsigned long)>
c001f0fb:	83 c4 10             	add    esp,0x10
c001f0fe:	83 c4 0c             	add    esp,0xc
c001f101:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c001f102 <PIT::~PIT()>:
c001f102:	83 ec 0c             	sub    esp,0xc
c001f105:	ba c4 24 02 c0       	mov    edx,0xc00224c4
c001f10a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f10e:	89 10                	mov    DWORD PTR [eax],edx
c001f110:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f114:	83 ec 0c             	sub    esp,0xc
c001f117:	50                   	push   eax
c001f118:	e8 f3 61 ff ff       	call   c0015310 <Timer::~Timer()>
c001f11d:	83 c4 10             	add    esp,0x10
c001f120:	90                   	nop
c001f121:	83 c4 0c             	add    esp,0xc
c001f124:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c001f126 <PIT::~PIT()>:
c001f126:	83 ec 0c             	sub    esp,0xc
c001f129:	83 ec 0c             	sub    esp,0xc
c001f12c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f130:	e8 cd ff ff ff       	call   c001f102 <PIT::~PIT()>
c001f135:	83 c4 10             	add    esp,0x10
c001f138:	83 ec 08             	sub    esp,0x8
c001f13b:	68 5c 01 00 00       	push   0x15c
c001f140:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f144:	e8 3e 2f ff ff       	call   c0012087 <operator delete(void*, unsigned long)>
c001f149:	83 c4 10             	add    esp,0x10
c001f14c:	83 c4 0c             	add    esp,0xc
c001f14f:	c3                   	ret    
