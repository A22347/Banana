
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 f4 c2 00 00       	call   c000c314 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 03 f6 01 00       	call   c001f628 <_init>
c0000025:	c3                   	ret    
c0000026:	bb b2 01 02 c0       	mov    ebx,0xc00201b2
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb bc 01 02 c0    	cmp    ebx,0xc00201bc
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 ac 3f 02 c0       	mov    eax,0xc0023fac
c0000049:	3d ac 3f 02 c0       	cmp    eax,0xc0023fac
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 ac 3f 02 c0       	push   0xc0023fac
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 ac 3f 02 c0       	mov    eax,0xc0023fac
c0000075:	2d ac 3f 02 c0       	sub    eax,0xc0023fac
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 ac 3f 02 c0       	push   0xc0023fac
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 4c 41 02 c0 00 	cmp    BYTE PTR ds:0xc002414c,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb c4 01 02 c0       	mov    ebx,0xc00201c4
c00000bb:	81 eb c0 01 02 c0    	sub    ebx,0xc00201c0
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be c0 01 02 c0       	mov    esi,0xc00201c0
c00000ca:	a1 50 41 02 c0       	mov    eax,ds:0xc0024150
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 50 41 02 c0       	mov    ds:0xc0024150,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 50 41 02 c0       	mov    eax,ds:0xc0024150
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 ac 3f 02 c0       	push   0xc0023fac
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 4c 41 02 c0 01 	mov    BYTE PTR ds:0xc002414c,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 54 41 02 c0       	push   0xc0024154
c000012c:	68 ac 3f 02 c0       	push   0xc0023fac
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <voodooXADD>:
c0000150:	55                   	push   ebp
c0000151:	89 e5                	mov    ebp,esp
c0000153:	60                   	pusha  
c0000154:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000157:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000015a:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c000015d:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0000160:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c0000163:	89 35 fe 01 00 c0    	mov    DWORD PTR ds:0xc00001fe,esi
c0000169:	89 25 fa 01 00 c0    	mov    DWORD PTR ds:0xc00001fa,esp
c000016f:	60                   	pusha  
c0000170:	b0 90                	mov    al,0x90
c0000172:	b9 20 00 00 00       	mov    ecx,0x20
c0000177:	bf d1 01 00 c0       	mov    edi,0xc00001d1
c000017c:	f3 aa                	rep stos BYTE PTR es:[edi],al
c000017e:	61                   	popa   
c000017f:	60                   	pusha  
c0000180:	89 d6                	mov    esi,edx
c0000182:	bf d1 01 00 c0       	mov    edi,0xc00001d1
c0000187:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000189:	61                   	popa   
c000018a:	60                   	pusha  
c000018b:	89 d6                	mov    esi,edx
c000018d:	bf e1 01 00 c0       	mov    edi,0xc00001e1
c0000192:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000194:	61                   	popa   
c0000195:	b1 90                	mov    cl,0x90
c0000197:	85 db                	test   ebx,ebx
c0000199:	74 06                	je     c00001a1 <voodooXADD.skipChange>
c000019b:	8a 8b d0 01 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffe30]

c00001a1 <voodooXADD.skipChange>:
c00001a1:	88 8b d1 01 00 c0    	mov    BYTE PTR [ebx-0x3ffffe2f],cl
c00001a7:	80 ab d2 01 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffe2e],0x3a
c00001ae:	88 8b e1 01 00 c0    	mov    BYTE PTR [ebx-0x3ffffe1f],cl
c00001b4:	80 ab e2 01 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffe1e],0xbe
c00001bb:	89 c4                	mov    esp,eax
c00001bd:	81 c4 10 00 00 00    	add    esp,0x10
c00001c3:	5f                   	pop    edi
c00001c4:	5e                   	pop    esi
c00001c5:	5d                   	pop    ebp
c00001c6:	5b                   	pop    ebx
c00001c7:	5b                   	pop    ebx
c00001c8:	5a                   	pop    edx
c00001c9:	59                   	pop    ecx
c00001ca:	58                   	pop    eax
c00001cb:	8b 25 fe 01 00 c0    	mov    esp,DWORD PTR ds:0xc00001fe

c00001d1 <voodooXADD.helper>:
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	8b 25 fa 01 00 c0    	mov    esp,DWORD PTR ds:0xc00001fa
c00001f7:	61                   	popa   
c00001f8:	c9                   	leave  
c00001f9:	c3                   	ret    

c00001fa <voodooXADD.oldStack>:
c00001fa:	00 00                	add    BYTE PTR [eax],al
	...

c00001fe <voodooXADD.newStack>:
c00001fe:	00 00                	add    BYTE PTR [eax],al
	...

c0000202 <doTPAUSE>:
c0000202:	fb                   	sti    
c0000203:	31 c0                	xor    eax,eax
c0000205:	31 d2                	xor    edx,edx
c0000207:	66 0f ae f0          	tpause eax
c000020b:	c3                   	ret    

c000020c <hasLegacyFPU>:
c000020c:	0f 20 c2             	mov    edx,cr0
c000020f:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000215:	0f 22 c2             	mov    cr0,edx
c0000218:	db e3                	fninit 
c000021a:	dd 3d 2f 02 00 c0    	fnstsw WORD PTR ds:0xc000022f
c0000220:	31 c0                	xor    eax,eax
c0000222:	66 81 3d 2f 02 00 c0 00 00 	cmp    WORD PTR ds:0xc000022f,0x0
c000022b:	75 01                	jne    c000022e <hasLegacyFPU.nofpu>

c000022d <hasLegacyFPU.hasfpu>:
c000022d:	40                   	inc    eax

c000022e <hasLegacyFPU.nofpu>:
c000022e:	c3                   	ret    

c000022f <testword>:
c000022f:	aa                   	stos   BYTE PTR es:[edi],al
c0000230:	55                   	push   ebp

c0000231 <is486>:
c0000231:	0f 09                	wbinvd 
c0000233:	31 c0                	xor    eax,eax
c0000235:	40                   	inc    eax
c0000236:	c3                   	ret    
c0000237:	90                   	nop
c0000238:	90                   	nop
c0000239:	90                   	nop
c000023a:	90                   	nop
c000023b:	90                   	nop
c000023c:	90                   	nop
c000023d:	90                   	nop
c000023e:	90                   	nop
c000023f:	90                   	nop
c0000240:	90                   	nop
c0000241:	90                   	nop
c0000242:	90                   	nop
c0000243:	90                   	nop
c0000244:	90                   	nop
c0000245:	90                   	nop
c0000246:	90                   	nop
c0000247:	90                   	nop
c0000248:	90                   	nop
c0000249:	90                   	nop
c000024a:	90                   	nop
c000024b:	90                   	nop
c000024c:	90                   	nop
c000024d:	90                   	nop
c000024e:	90                   	nop
c000024f:	90                   	nop
c0000250:	90                   	nop
c0000251:	90                   	nop
c0000252:	90                   	nop
c0000253:	90                   	nop
c0000254:	90                   	nop
c0000255:	90                   	nop
c0000256:	90                   	nop
c0000257:	90                   	nop
c0000258:	90                   	nop
c0000259:	90                   	nop
c000025a:	90                   	nop
c000025b:	90                   	nop
c000025c:	90                   	nop
c000025d:	90                   	nop
c000025e:	90                   	nop
c000025f:	90                   	nop
c0000260:	90                   	nop
c0000261:	90                   	nop
c0000262:	90                   	nop
c0000263:	90                   	nop
c0000264:	31 c0                	xor    eax,eax
c0000266:	c3                   	ret    

c0000267 <goToVM86>:
c0000267:	fa                   	cli    
c0000268:	55                   	push   ebp
c0000269:	89 e5                	mov    ebp,esp
c000026b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000026e:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000271:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0000274:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0000277:	25 ff ff 00 00       	and    eax,0xffff
c000027c:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000282:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0000288:	81 e2 ff ff 00 00    	and    edx,0xffff
c000028e:	52                   	push   edx
c000028f:	51                   	push   ecx
c0000290:	68 02 02 02 00       	push   0x20202
c0000295:	53                   	push   ebx
c0000296:	50                   	push   eax
c0000297:	cf                   	iret   

c0000298 <goToUsermode>:
c0000298:	fa                   	cli    
c0000299:	55                   	push   ebp
c000029a:	89 e5                	mov    ebp,esp
c000029c:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000029f:	66 b8 23 00          	mov    ax,0x23
c00002a3:	66 8e d8             	mov    ds,ax
c00002a6:	66 8e c0             	mov    es,ax
c00002a9:	66 8e e0             	mov    fs,ax
c00002ac:	66 8e e8             	mov    gs,ax
c00002af:	89 e0                	mov    eax,esp
c00002b1:	68 23 00 00 00       	push   0x23
c00002b6:	50                   	push   eax
c00002b7:	68 02 02 00 00       	push   0x202
c00002bc:	68 1b 00 00 00       	push   0x1b
c00002c1:	53                   	push   ebx
c00002c2:	cf                   	iret   

c00002c3 <switchToThreadASMFirstTime>:
c00002c3:	9c                   	pushf  
c00002c4:	fa                   	cli    
c00002c5:	50                   	push   eax
c00002c6:	53                   	push   ebx
c00002c7:	51                   	push   ecx
c00002c8:	52                   	push   edx
c00002c9:	56                   	push   esi
c00002ca:	57                   	push   edi
c00002cb:	55                   	push   ebp
c00002cc:	e9 11 00 00 00       	jmp    c00002e2 <commonThreadSwitch>

c00002d1 <switchToThreadASM>:
c00002d1:	9c                   	pushf  
c00002d2:	50                   	push   eax
c00002d3:	53                   	push   ebx
c00002d4:	51                   	push   ecx
c00002d5:	52                   	push   edx
c00002d6:	56                   	push   esi
c00002d7:	57                   	push   edi
c00002d8:	55                   	push   ebp
c00002d9:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c00002df:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c00002e2 <commonThreadSwitch>:
c00002e2:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00002e6:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c00002ec:	8b 06                	mov    eax,DWORD PTR [esi]
c00002ee:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c00002f1:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c00002f4:	0f 20 d9             	mov    ecx,cr3
c00002f7:	39 c8                	cmp    eax,ecx
c00002f9:	74 03                	je     c00002fe <commonThreadSwitch.doneVAS>
c00002fb:	0f 22 d8             	mov    cr3,eax

c00002fe <commonThreadSwitch.doneVAS>:
c00002fe:	85 d2                	test   edx,edx
c0000300:	74 4e                	je     c0000350 <commonThreadSwitch.notFirstTime>
c0000302:	fa                   	cli    
c0000303:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0000306:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c000030b:	60                   	pusha  
c000030c:	e8 f5 eb 00 00       	call   c000ef06 <mapVASFirstTime>
c0000311:	61                   	popa   
c0000312:	89 c4                	mov    esp,eax
c0000314:	56                   	push   esi
c0000315:	52                   	push   edx
c0000316:	e8 1f 82 01 00       	call   c001853a <changeTSS>
c000031b:	5a                   	pop    edx
c000031c:	5e                   	pop    esi
c000031d:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c0000324:	81 fa 01 00 00 00    	cmp    edx,0x1
c000032a:	74 39                	je     c0000365 <commonThreadSwitch.cameOffAFork>
c000032c:	5d                   	pop    ebp
c000032d:	5f                   	pop    edi
c000032e:	5e                   	pop    esi
c000032f:	59                   	pop    ecx
c0000330:	59                   	pop    ecx
c0000331:	5b                   	pop    ebx
c0000332:	58                   	pop    eax
c0000333:	81 c4 04 00 00 00    	add    esp,0x4
c0000339:	6a 02                	push   0x2
c000033b:	9d                   	popf   
c000033c:	52                   	push   edx
c000033d:	e8 25 86 01 00       	call   c0018967 <taskStartupFunction>
c0000342:	5a                   	pop    edx
c0000343:	50                   	push   eax
c0000344:	ff d2                	call   edx
c0000346:	e8 da 8b 01 00       	call   c0018f25 <taskReturned>
c000034b:	e9 fb ff ff ff       	jmp    c000034b <commonThreadSwitch.doneVAS+0x4d>

c0000350 <commonThreadSwitch.notFirstTime>:
c0000350:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c0000353:	56                   	push   esi
c0000354:	52                   	push   edx
c0000355:	e8 e0 81 01 00       	call   c001853a <changeTSS>
c000035a:	5a                   	pop    edx
c000035b:	5e                   	pop    esi
c000035c:	5d                   	pop    ebp
c000035d:	5f                   	pop    edi
c000035e:	5e                   	pop    esi
c000035f:	5a                   	pop    edx
c0000360:	59                   	pop    ecx
c0000361:	5b                   	pop    ebx
c0000362:	58                   	pop    eax
c0000363:	9d                   	popf   
c0000364:	c3                   	ret    

c0000365 <commonThreadSwitch.cameOffAFork>:
c0000365:	31 c0                	xor    eax,eax
c0000367:	31 d2                	xor    edx,edx
c0000369:	8b 66 1c             	mov    esp,DWORD PTR [esi+0x1c]
c000036c:	e9 a2 02 00 00       	jmp    c0000613 <offAForkJumpThingy>

c0000371 <detectCPUID>:
c0000371:	9c                   	pushf  
c0000372:	9c                   	pushf  
c0000373:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c000037a:	9d                   	popf   
c000037b:	9c                   	pushf  
c000037c:	58                   	pop    eax
c000037d:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000380:	9d                   	popf   
c0000381:	25 00 00 20 00       	and    eax,0x200000
c0000386:	c3                   	ret    

c0000387 <asmQuickAcquireLock>:
c0000387:	55                   	push   ebp
c0000388:	89 e5                	mov    ebp,esp
c000038a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000038d <asmQuickAcquireLock.retry>:
c000038d:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000392:	72 02                	jb     c0000396 <asmQuickAcquireLock.spin_with_pause>
c0000394:	fa                   	cli    
c0000395:	c3                   	ret    

c0000396 <asmQuickAcquireLock.spin_with_pause>:
c0000396:	f3 90                	pause  
c0000398:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c000039e:	75 f6                	jne    c0000396 <asmQuickAcquireLock.spin_with_pause>
c00003a0:	e9 e8 ff ff ff       	jmp    c000038d <asmQuickAcquireLock.retry>

c00003a5 <asmQuickReleaseLock>:
c00003a5:	55                   	push   ebp
c00003a6:	89 e5                	mov    ebp,esp
c00003a8:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c00003af:	5d                   	pop    ebp
c00003b0:	c3                   	ret    

c00003b1 <asmAcquireLock>:
c00003b1:	55                   	push   ebp
c00003b2:	89 e5                	mov    ebp,esp
c00003b4:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003b7 <asmAcquireLock.retry>:
c00003b7:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003bc:	72 05                	jb     c00003c3 <asmAcquireLock.spin_with_pause>
c00003be:	9c                   	pushf  
c00003bf:	58                   	pop    eax
c00003c0:	fa                   	cli    
c00003c1:	5d                   	pop    ebp
c00003c2:	c3                   	ret    

c00003c3 <asmAcquireLock.spin_with_pause>:
c00003c3:	f3 90                	pause  
c00003c5:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c00003cb:	75 f6                	jne    c00003c3 <asmAcquireLock.spin_with_pause>
c00003cd:	e9 e5 ff ff ff       	jmp    c00003b7 <asmAcquireLock.retry>

c00003d2 <asmReleaseLock>:
c00003d2:	55                   	push   ebp
c00003d3:	89 e5                	mov    ebp,esp
c00003d5:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00003d8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00003db:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00003e1:	52                   	push   edx
c00003e2:	9d                   	popf   
c00003e3:	5d                   	pop    ebp
c00003e4:	c3                   	ret    

c00003e5 <loadGDT>:
c00003e5:	0f 01 15 90 45 02 c0 	lgdtd  ds:0xc0024590
c00003ec:	66 b8 10 00          	mov    ax,0x10
c00003f0:	66 8e d8             	mov    ds,ax
c00003f3:	66 8e c0             	mov    es,ax
c00003f6:	66 8e e0             	mov    fs,ax
c00003f9:	66 8e e8             	mov    gs,ax
c00003fc:	66 8e d0             	mov    ss,ax
c00003ff:	e9 00 00 00 00       	jmp    c0000404 <flush2>

c0000404 <flush2>:
c0000404:	c3                   	ret    

c0000405 <isr0>:
c0000405:	fa                   	cli    
c0000406:	68 00 00 00 00       	push   0x0
c000040b:	68 00 00 00 00       	push   0x0
c0000410:	e9 a2 01 00 00       	jmp    c00005b7 <int_common_stub>

c0000415 <isr1>:
c0000415:	fa                   	cli    
c0000416:	6a 00                	push   0x0
c0000418:	6a 01                	push   0x1
c000041a:	e9 98 01 00 00       	jmp    c00005b7 <int_common_stub>

c000041f <isr2>:
c000041f:	fa                   	cli    
c0000420:	6a 00                	push   0x0
c0000422:	6a 02                	push   0x2
c0000424:	e9 8e 01 00 00       	jmp    c00005b7 <int_common_stub>

c0000429 <isr3>:
c0000429:	fa                   	cli    
c000042a:	6a 00                	push   0x0
c000042c:	6a 03                	push   0x3
c000042e:	e9 84 01 00 00       	jmp    c00005b7 <int_common_stub>

c0000433 <isr4>:
c0000433:	fa                   	cli    
c0000434:	6a 00                	push   0x0
c0000436:	6a 04                	push   0x4
c0000438:	e9 7a 01 00 00       	jmp    c00005b7 <int_common_stub>

c000043d <isr5>:
c000043d:	fa                   	cli    
c000043e:	6a 00                	push   0x0
c0000440:	6a 05                	push   0x5
c0000442:	e9 70 01 00 00       	jmp    c00005b7 <int_common_stub>

c0000447 <isr6>:
c0000447:	fa                   	cli    
c0000448:	6a 00                	push   0x0
c000044a:	6a 06                	push   0x6
c000044c:	e9 66 01 00 00       	jmp    c00005b7 <int_common_stub>

c0000451 <isr7>:
c0000451:	fa                   	cli    
c0000452:	6a 00                	push   0x0
c0000454:	6a 07                	push   0x7
c0000456:	e9 5c 01 00 00       	jmp    c00005b7 <int_common_stub>

c000045b <isr8>:
c000045b:	fa                   	cli    
c000045c:	6a 08                	push   0x8
c000045e:	e9 54 01 00 00       	jmp    c00005b7 <int_common_stub>

c0000463 <isr9>:
c0000463:	fa                   	cli    
c0000464:	6a 00                	push   0x0
c0000466:	6a 09                	push   0x9
c0000468:	e9 4a 01 00 00       	jmp    c00005b7 <int_common_stub>

c000046d <isr10>:
c000046d:	fa                   	cli    
c000046e:	6a 0a                	push   0xa
c0000470:	e9 42 01 00 00       	jmp    c00005b7 <int_common_stub>

c0000475 <isr11>:
c0000475:	fa                   	cli    
c0000476:	6a 0b                	push   0xb
c0000478:	e9 3a 01 00 00       	jmp    c00005b7 <int_common_stub>

c000047d <isr12>:
c000047d:	fa                   	cli    
c000047e:	6a 0c                	push   0xc
c0000480:	e9 32 01 00 00       	jmp    c00005b7 <int_common_stub>

c0000485 <isr13>:
c0000485:	fa                   	cli    
c0000486:	6a 0d                	push   0xd
c0000488:	e9 2a 01 00 00       	jmp    c00005b7 <int_common_stub>

c000048d <isr14>:
c000048d:	fa                   	cli    
c000048e:	6a 0e                	push   0xe
c0000490:	e9 22 01 00 00       	jmp    c00005b7 <int_common_stub>

c0000495 <isr15>:
c0000495:	fa                   	cli    
c0000496:	6a 00                	push   0x0
c0000498:	6a 0f                	push   0xf
c000049a:	e9 18 01 00 00       	jmp    c00005b7 <int_common_stub>

c000049f <isr16>:
c000049f:	fa                   	cli    
c00004a0:	6a 00                	push   0x0
c00004a2:	6a 10                	push   0x10
c00004a4:	e9 0e 01 00 00       	jmp    c00005b7 <int_common_stub>

c00004a9 <isr17>:
c00004a9:	fa                   	cli    
c00004aa:	6a 00                	push   0x0
c00004ac:	6a 11                	push   0x11
c00004ae:	e9 04 01 00 00       	jmp    c00005b7 <int_common_stub>

c00004b3 <isr18>:
c00004b3:	fa                   	cli    
c00004b4:	6a 00                	push   0x0
c00004b6:	6a 12                	push   0x12
c00004b8:	e9 fa 00 00 00       	jmp    c00005b7 <int_common_stub>

c00004bd <isr96>:
c00004bd:	fa                   	cli    
c00004be:	6a 00                	push   0x0
c00004c0:	6a 60                	push   0x60
c00004c2:	e9 20 01 00 00       	jmp    c00005e7 <syscall_common_stub>

c00004c7 <irq0>:
c00004c7:	fa                   	cli    
c00004c8:	6a 00                	push   0x0
c00004ca:	6a 20                	push   0x20
c00004cc:	e9 e6 00 00 00       	jmp    c00005b7 <int_common_stub>

c00004d1 <irq1>:
c00004d1:	fa                   	cli    
c00004d2:	6a 00                	push   0x0
c00004d4:	6a 21                	push   0x21
c00004d6:	e9 dc 00 00 00       	jmp    c00005b7 <int_common_stub>

c00004db <irq2>:
c00004db:	fa                   	cli    
c00004dc:	6a 00                	push   0x0
c00004de:	6a 22                	push   0x22
c00004e0:	e9 d2 00 00 00       	jmp    c00005b7 <int_common_stub>

c00004e5 <irq3>:
c00004e5:	fa                   	cli    
c00004e6:	6a 00                	push   0x0
c00004e8:	6a 23                	push   0x23
c00004ea:	e9 c8 00 00 00       	jmp    c00005b7 <int_common_stub>

c00004ef <irq4>:
c00004ef:	fa                   	cli    
c00004f0:	6a 00                	push   0x0
c00004f2:	6a 24                	push   0x24
c00004f4:	e9 be 00 00 00       	jmp    c00005b7 <int_common_stub>

c00004f9 <irq5>:
c00004f9:	fa                   	cli    
c00004fa:	6a 00                	push   0x0
c00004fc:	6a 25                	push   0x25
c00004fe:	e9 b4 00 00 00       	jmp    c00005b7 <int_common_stub>

c0000503 <irq6>:
c0000503:	fa                   	cli    
c0000504:	6a 00                	push   0x0
c0000506:	6a 26                	push   0x26
c0000508:	e9 aa 00 00 00       	jmp    c00005b7 <int_common_stub>

c000050d <irq7>:
c000050d:	fa                   	cli    
c000050e:	6a 00                	push   0x0
c0000510:	6a 27                	push   0x27
c0000512:	e9 a0 00 00 00       	jmp    c00005b7 <int_common_stub>

c0000517 <irq8>:
c0000517:	fa                   	cli    
c0000518:	6a 00                	push   0x0
c000051a:	6a 28                	push   0x28
c000051c:	e9 96 00 00 00       	jmp    c00005b7 <int_common_stub>

c0000521 <irq9>:
c0000521:	fa                   	cli    
c0000522:	6a 00                	push   0x0
c0000524:	6a 29                	push   0x29
c0000526:	e9 8c 00 00 00       	jmp    c00005b7 <int_common_stub>

c000052b <irq10>:
c000052b:	fa                   	cli    
c000052c:	6a 00                	push   0x0
c000052e:	6a 2a                	push   0x2a
c0000530:	e9 82 00 00 00       	jmp    c00005b7 <int_common_stub>

c0000535 <irq11>:
c0000535:	fa                   	cli    
c0000536:	6a 00                	push   0x0
c0000538:	6a 2b                	push   0x2b
c000053a:	e9 78 00 00 00       	jmp    c00005b7 <int_common_stub>

c000053f <irq12>:
c000053f:	fa                   	cli    
c0000540:	6a 00                	push   0x0
c0000542:	6a 2c                	push   0x2c
c0000544:	e9 6e 00 00 00       	jmp    c00005b7 <int_common_stub>

c0000549 <irq13>:
c0000549:	fa                   	cli    
c000054a:	6a 00                	push   0x0
c000054c:	6a 2d                	push   0x2d
c000054e:	e9 64 00 00 00       	jmp    c00005b7 <int_common_stub>

c0000553 <irq14>:
c0000553:	fa                   	cli    
c0000554:	6a 00                	push   0x0
c0000556:	6a 2e                	push   0x2e
c0000558:	e9 5a 00 00 00       	jmp    c00005b7 <int_common_stub>

c000055d <irq15>:
c000055d:	fa                   	cli    
c000055e:	6a 00                	push   0x0
c0000560:	6a 2f                	push   0x2f
c0000562:	e9 50 00 00 00       	jmp    c00005b7 <int_common_stub>

c0000567 <irq16>:
c0000567:	fa                   	cli    
c0000568:	6a 00                	push   0x0
c000056a:	6a 30                	push   0x30
c000056c:	e9 46 00 00 00       	jmp    c00005b7 <int_common_stub>

c0000571 <irq17>:
c0000571:	fa                   	cli    
c0000572:	6a 00                	push   0x0
c0000574:	6a 31                	push   0x31
c0000576:	e9 3c 00 00 00       	jmp    c00005b7 <int_common_stub>

c000057b <irq18>:
c000057b:	fa                   	cli    
c000057c:	6a 00                	push   0x0
c000057e:	6a 32                	push   0x32
c0000580:	e9 32 00 00 00       	jmp    c00005b7 <int_common_stub>

c0000585 <irq19>:
c0000585:	fa                   	cli    
c0000586:	6a 00                	push   0x0
c0000588:	6a 33                	push   0x33
c000058a:	e9 28 00 00 00       	jmp    c00005b7 <int_common_stub>

c000058f <irq20>:
c000058f:	fa                   	cli    
c0000590:	6a 00                	push   0x0
c0000592:	6a 34                	push   0x34
c0000594:	e9 1e 00 00 00       	jmp    c00005b7 <int_common_stub>

c0000599 <irq21>:
c0000599:	fa                   	cli    
c000059a:	6a 00                	push   0x0
c000059c:	6a 35                	push   0x35
c000059e:	e9 14 00 00 00       	jmp    c00005b7 <int_common_stub>

c00005a3 <irq22>:
c00005a3:	fa                   	cli    
c00005a4:	6a 00                	push   0x0
c00005a6:	6a 36                	push   0x36
c00005a8:	e9 0a 00 00 00       	jmp    c00005b7 <int_common_stub>

c00005ad <irq23>:
c00005ad:	fa                   	cli    
c00005ae:	6a 00                	push   0x0
c00005b0:	6a 37                	push   0x37
c00005b2:	e9 00 00 00 00       	jmp    c00005b7 <int_common_stub>

c00005b7 <int_common_stub>:
c00005b7:	60                   	pusha  
c00005b8:	1e                   	push   ds
c00005b9:	06                   	push   es
c00005ba:	0f a0                	push   fs
c00005bc:	0f a8                	push   gs
c00005be:	66 b8 10 00          	mov    ax,0x10
c00005c2:	66 8e d8             	mov    ds,ax
c00005c5:	66 8e c0             	mov    es,ax
c00005c8:	66 8e e0             	mov    fs,ax
c00005cb:	66 8e e8             	mov    gs,ax
c00005ce:	89 e1                	mov    ecx,esp
c00005d0:	51                   	push   ecx
c00005d1:	b9 2f 0e 01 c0       	mov    ecx,0xc0010e2f
c00005d6:	ff d1                	call   ecx
c00005d8:	59                   	pop    ecx
c00005d9:	0f a9                	pop    gs
c00005db:	0f a1                	pop    fs
c00005dd:	07                   	pop    es
c00005de:	1f                   	pop    ds
c00005df:	61                   	popa   
c00005e0:	81 c4 08 00 00 00    	add    esp,0x8
c00005e6:	cf                   	iret   

c00005e7 <syscall_common_stub>:
c00005e7:	60                   	pusha  
c00005e8:	1e                   	push   ds
c00005e9:	06                   	push   es
c00005ea:	0f a0                	push   fs
c00005ec:	0f a8                	push   gs
c00005ee:	66 b8 10 00          	mov    ax,0x10
c00005f2:	66 8e d8             	mov    ds,ax
c00005f5:	66 8e c0             	mov    es,ax
c00005f8:	66 8e e0             	mov    fs,ax
c00005fb:	66 8e e8             	mov    gs,ax
c00005fe:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0000604:	89 61 1c             	mov    DWORD PTR [ecx+0x1c],esp
c0000607:	89 e1                	mov    ecx,esp
c0000609:	51                   	push   ecx
c000060a:	fb                   	sti    
c000060b:	b9 2f 0e 01 c0       	mov    ecx,0xc0010e2f
c0000610:	ff d1                	call   ecx
c0000612:	59                   	pop    ecx

c0000613 <offAForkJumpThingy>:
c0000613:	0f a9                	pop    gs
c0000615:	0f a1                	pop    fs
c0000617:	07                   	pop    es
c0000618:	1f                   	pop    ds
c0000619:	61                   	popa   
c000061a:	81 c4 08 00 00 00    	add    esp,0x8
c0000620:	cf                   	iret   

c0000621 <memcmp>:
c0000621:	56                   	push   esi
c0000622:	53                   	push   ebx
c0000623:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000627:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000062b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000062f:	01 d6                	add    esi,edx
c0000631:	39 f2                	cmp    edx,esi
c0000633:	74 0e                	je     c0000643 <memcmp+0x22>
c0000635:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0000638:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000063b:	38 c8                	cmp    al,cl
c000063d:	75 08                	jne    c0000647 <memcmp+0x26>
c000063f:	42                   	inc    edx
c0000640:	43                   	inc    ebx
c0000641:	eb ee                	jmp    c0000631 <memcmp+0x10>
c0000643:	31 c0                	xor    eax,eax
c0000645:	eb 02                	jmp    c0000649 <memcmp+0x28>
c0000647:	29 c8                	sub    eax,ecx
c0000649:	5b                   	pop    ebx
c000064a:	5e                   	pop    esi
c000064b:	c3                   	ret    

c000064c <memmove>:
c000064c:	56                   	push   esi
c000064d:	53                   	push   ebx
c000064e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000652:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000656:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000065a:	39 c8                	cmp    eax,ecx
c000065c:	73 12                	jae    c0000670 <memmove+0x24>
c000065e:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000661:	89 c3                	mov    ebx,eax
c0000663:	39 f1                	cmp    ecx,esi
c0000665:	74 1a                	je     c0000681 <memmove+0x35>
c0000667:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000669:	43                   	inc    ebx
c000066a:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c000066d:	41                   	inc    ecx
c000066e:	eb f3                	jmp    c0000663 <memmove+0x17>
c0000670:	76 0f                	jbe    c0000681 <memmove+0x35>
c0000672:	85 d2                	test   edx,edx
c0000674:	74 0b                	je     c0000681 <memmove+0x35>
c0000676:	8a 5c 11 ff          	mov    bl,BYTE PTR [ecx+edx*1-0x1]
c000067a:	88 5c 10 ff          	mov    BYTE PTR [eax+edx*1-0x1],bl
c000067e:	4a                   	dec    edx
c000067f:	eb f1                	jmp    c0000672 <memmove+0x26>
c0000681:	5b                   	pop    ebx
c0000682:	5e                   	pop    esi
c0000683:	c3                   	ret    

c0000684 <memcpy>:
c0000684:	57                   	push   edi
c0000685:	56                   	push   esi
c0000686:	53                   	push   ebx
c0000687:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000068b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000068f:	89 da                	mov    edx,ebx
c0000691:	89 d9                	mov    ecx,ebx
c0000693:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000697:	83 e2 fc             	and    edx,0xfffffffc
c000069a:	c1 e9 02             	shr    ecx,0x2
c000069d:	89 c7                	mov    edi,eax
c000069f:	fc                   	cld    
c00006a0:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00006a2:	8d 0c 16             	lea    ecx,[esi+edx*1]
c00006a5:	01 c2                	add    edx,eax
c00006a7:	01 de                	add    esi,ebx
c00006a9:	39 f1                	cmp    ecx,esi
c00006ab:	74 09                	je     c00006b6 <memcpy+0x32>
c00006ad:	8a 19                	mov    bl,BYTE PTR [ecx]
c00006af:	42                   	inc    edx
c00006b0:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00006b3:	41                   	inc    ecx
c00006b4:	eb f3                	jmp    c00006a9 <memcpy+0x25>
c00006b6:	5b                   	pop    ebx
c00006b7:	5e                   	pop    esi
c00006b8:	5f                   	pop    edi
c00006b9:	c3                   	ret    

c00006ba <memset>:
c00006ba:	53                   	push   ebx
c00006bb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00006bf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00006c3:	01 c1                	add    ecx,eax
c00006c5:	89 c2                	mov    edx,eax
c00006c7:	39 ca                	cmp    edx,ecx
c00006c9:	74 0a                	je     c00006d5 <memset+0x1b>
c00006cb:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c00006cf:	42                   	inc    edx
c00006d0:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00006d3:	eb f2                	jmp    c00006c7 <memset+0xd>
c00006d5:	5b                   	pop    ebx
c00006d6:	c3                   	ret    

c00006d7 <strlen>:
c00006d7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00006db:	31 c0                	xor    eax,eax
c00006dd:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00006e1:	74 03                	je     c00006e6 <strlen+0xf>
c00006e3:	40                   	inc    eax
c00006e4:	eb f7                	jmp    c00006dd <strlen+0x6>
c00006e6:	c3                   	ret    

c00006e7 <strpbrk>:
c00006e7:	53                   	push   ebx
c00006e8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00006ec:	8a 08                	mov    cl,BYTE PTR [eax]
c00006ee:	84 c9                	test   cl,cl
c00006f0:	74 14                	je     c0000706 <strpbrk+0x1f>
c00006f2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00006f6:	8a 1a                	mov    bl,BYTE PTR [edx]
c00006f8:	84 db                	test   bl,bl
c00006fa:	74 07                	je     c0000703 <strpbrk+0x1c>
c00006fc:	38 cb                	cmp    bl,cl
c00006fe:	74 08                	je     c0000708 <strpbrk+0x21>
c0000700:	42                   	inc    edx
c0000701:	eb f3                	jmp    c00006f6 <strpbrk+0xf>
c0000703:	40                   	inc    eax
c0000704:	eb e6                	jmp    c00006ec <strpbrk+0x5>
c0000706:	31 c0                	xor    eax,eax
c0000708:	5b                   	pop    ebx
c0000709:	c3                   	ret    

c000070a <strtok>:
c000070a:	56                   	push   esi
c000070b:	53                   	push   ebx
c000070c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0000710:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000714:	85 db                	test   ebx,ebx
c0000716:	75 0e                	jne    c0000726 <strtok+0x1c>
c0000718:	8b 1d 6c 41 02 c0    	mov    ebx,DWORD PTR ds:0xc002416c
c000071e:	85 db                	test   ebx,ebx
c0000720:	75 04                	jne    c0000726 <strtok+0x1c>
c0000722:	31 db                	xor    ebx,ebx
c0000724:	eb 2e                	jmp    c0000754 <strtok+0x4a>
c0000726:	56                   	push   esi
c0000727:	53                   	push   ebx
c0000728:	e8 ba ff ff ff       	call   c00006e7 <strpbrk>
c000072d:	a3 6c 41 02 c0       	mov    ds:0xc002416c,eax
c0000732:	5a                   	pop    edx
c0000733:	a1 6c 41 02 c0       	mov    eax,ds:0xc002416c
c0000738:	59                   	pop    ecx
c0000739:	39 d8                	cmp    eax,ebx
c000073b:	75 07                	jne    c0000744 <strtok+0x3a>
c000073d:	43                   	inc    ebx
c000073e:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000742:	eb e2                	jmp    c0000726 <strtok+0x1c>
c0000744:	85 c0                	test   eax,eax
c0000746:	74 da                	je     c0000722 <strtok+0x18>
c0000748:	8d 50 01             	lea    edx,[eax+0x1]
c000074b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000074e:	89 15 6c 41 02 c0    	mov    DWORD PTR ds:0xc002416c,edx
c0000754:	89 d8                	mov    eax,ebx
c0000756:	5b                   	pop    ebx
c0000757:	5e                   	pop    esi
c0000758:	c3                   	ret    

c0000759 <strcpy>:
c0000759:	53                   	push   ebx
c000075a:	31 d2                	xor    edx,edx
c000075c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000760:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000764:	8d 1c 10             	lea    ebx,[eax+edx*1]
c0000767:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c000076a:	84 c9                	test   cl,cl
c000076c:	74 06                	je     c0000774 <strcpy+0x1b>
c000076e:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0000771:	42                   	inc    edx
c0000772:	eb ec                	jmp    c0000760 <strcpy+0x7>
c0000774:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000777:	5b                   	pop    ebx
c0000778:	c3                   	ret    

c0000779 <strncpy>:
c0000779:	56                   	push   esi
c000077a:	53                   	push   ebx
c000077b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000077f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000783:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0000787:	89 c3                	mov    ebx,eax
c0000789:	85 c9                	test   ecx,ecx
c000078b:	74 1a                	je     c00007a7 <strncpy+0x2e>
c000078d:	46                   	inc    esi
c000078e:	43                   	inc    ebx
c000078f:	8a 56 ff             	mov    dl,BYTE PTR [esi-0x1]
c0000792:	49                   	dec    ecx
c0000793:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c0000796:	84 d2                	test   dl,dl
c0000798:	75 ef                	jne    c0000789 <strncpy+0x10>
c000079a:	31 d2                	xor    edx,edx
c000079c:	39 d1                	cmp    ecx,edx
c000079e:	74 07                	je     c00007a7 <strncpy+0x2e>
c00007a0:	c6 04 13 00          	mov    BYTE PTR [ebx+edx*1],0x0
c00007a4:	42                   	inc    edx
c00007a5:	eb f5                	jmp    c000079c <strncpy+0x23>
c00007a7:	5b                   	pop    ebx
c00007a8:	5e                   	pop    esi
c00007a9:	c3                   	ret    

c00007aa <strcmp>:
c00007aa:	31 c9                	xor    ecx,ecx
c00007ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00007b0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00007b4:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c00007b8:	0f b6 14 0a          	movzx  edx,BYTE PTR [edx+ecx*1]
c00007bc:	38 d0                	cmp    al,dl
c00007be:	75 08                	jne    c00007c8 <strcmp+0x1e>
c00007c0:	41                   	inc    ecx
c00007c1:	84 c0                	test   al,al
c00007c3:	75 e7                	jne    c00007ac <strcmp+0x2>
c00007c5:	31 c0                	xor    eax,eax
c00007c7:	c3                   	ret    
c00007c8:	29 d0                	sub    eax,edx
c00007ca:	c3                   	ret    

c00007cb <strchr>:
c00007cb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00007cf:	8a 10                	mov    dl,BYTE PTR [eax]
c00007d1:	84 d2                	test   dl,dl
c00007d3:	74 09                	je     c00007de <strchr+0x13>
c00007d5:	3a 54 24 08          	cmp    dl,BYTE PTR [esp+0x8]
c00007d9:	74 05                	je     c00007e0 <strchr+0x15>
c00007db:	40                   	inc    eax
c00007dc:	eb f1                	jmp    c00007cf <strchr+0x4>
c00007de:	31 c0                	xor    eax,eax
c00007e0:	c3                   	ret    

c00007e1 <strncmp>:
c00007e1:	56                   	push   esi
c00007e2:	53                   	push   ebx
c00007e3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00007e7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00007eb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00007ef:	01 d6                	add    esi,edx
c00007f1:	39 f2                	cmp    edx,esi
c00007f3:	74 12                	je     c0000807 <strncmp+0x26>
c00007f5:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c00007f8:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00007fb:	38 c8                	cmp    al,cl
c00007fd:	75 0c                	jne    c000080b <strncmp+0x2a>
c00007ff:	42                   	inc    edx
c0000800:	84 c0                	test   al,al
c0000802:	74 03                	je     c0000807 <strncmp+0x26>
c0000804:	43                   	inc    ebx
c0000805:	eb ea                	jmp    c00007f1 <strncmp+0x10>
c0000807:	31 c0                	xor    eax,eax
c0000809:	eb 02                	jmp    c000080d <strncmp+0x2c>
c000080b:	29 c8                	sub    eax,ecx
c000080d:	5b                   	pop    ebx
c000080e:	5e                   	pop    esi
c000080f:	c3                   	ret    

c0000810 <strcat>:
c0000810:	53                   	push   ebx
c0000811:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000815:	89 c1                	mov    ecx,eax
c0000817:	8d 51 01             	lea    edx,[ecx+0x1]
c000081a:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c000081e:	74 04                	je     c0000824 <strcat+0x14>
c0000820:	89 d1                	mov    ecx,edx
c0000822:	eb f3                	jmp    c0000817 <strcat+0x7>
c0000824:	31 d2                	xor    edx,edx
c0000826:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000082a:	8a 1c 13             	mov    bl,BYTE PTR [ebx+edx*1]
c000082d:	88 1c 11             	mov    BYTE PTR [ecx+edx*1],bl
c0000830:	42                   	inc    edx
c0000831:	84 db                	test   bl,bl
c0000833:	75 f1                	jne    c0000826 <strcat+0x16>
c0000835:	5b                   	pop    ebx
c0000836:	c3                   	ret    

c0000837 <strncat>:
c0000837:	56                   	push   esi
c0000838:	53                   	push   ebx
c0000839:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000083d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0000841:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000845:	89 c2                	mov    edx,eax
c0000847:	85 db                	test   ebx,ebx
c0000849:	74 23                	je     c000086e <strncat+0x37>
c000084b:	8d 72 01             	lea    esi,[edx+0x1]
c000084e:	80 7e ff 00          	cmp    BYTE PTR [esi-0x1],0x0
c0000852:	74 04                	je     c0000858 <strncat+0x21>
c0000854:	89 f2                	mov    edx,esi
c0000856:	eb f3                	jmp    c000084b <strncat+0x14>
c0000858:	8d 34 19             	lea    esi,[ecx+ebx*1]
c000085b:	41                   	inc    ecx
c000085c:	42                   	inc    edx
c000085d:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c0000860:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000863:	84 db                	test   bl,bl
c0000865:	74 07                	je     c000086e <strncat+0x37>
c0000867:	39 f1                	cmp    ecx,esi
c0000869:	75 f0                	jne    c000085b <strncat+0x24>
c000086b:	c6 02 00             	mov    BYTE PTR [edx],0x0
c000086e:	5b                   	pop    ebx
c000086f:	5e                   	pop    esi
c0000870:	c3                   	ret    

c0000871 <strstr>:
c0000871:	57                   	push   edi
c0000872:	56                   	push   esi
c0000873:	53                   	push   ebx
c0000874:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0000878:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000087c:	57                   	push   edi
c000087d:	e8 55 fe ff ff       	call   c00006d7 <strlen>
c0000882:	59                   	pop    ecx
c0000883:	89 c6                	mov    esi,eax
c0000885:	85 c0                	test   eax,eax
c0000887:	74 1f                	je     c00008a8 <strstr+0x37>
c0000889:	53                   	push   ebx
c000088a:	e8 48 fe ff ff       	call   c00006d7 <strlen>
c000088f:	5a                   	pop    edx
c0000890:	39 f0                	cmp    eax,esi
c0000892:	72 12                	jb     c00008a6 <strstr+0x35>
c0000894:	56                   	push   esi
c0000895:	57                   	push   edi
c0000896:	53                   	push   ebx
c0000897:	e8 85 fd ff ff       	call   c0000621 <memcmp>
c000089c:	83 c4 0c             	add    esp,0xc
c000089f:	85 c0                	test   eax,eax
c00008a1:	74 05                	je     c00008a8 <strstr+0x37>
c00008a3:	43                   	inc    ebx
c00008a4:	eb e3                	jmp    c0000889 <strstr+0x18>
c00008a6:	31 db                	xor    ebx,ebx
c00008a8:	89 d8                	mov    eax,ebx
c00008aa:	5b                   	pop    ebx
c00008ab:	5e                   	pop    esi
c00008ac:	5f                   	pop    edi
c00008ad:	c3                   	ret    

c00008ae <toupper>:
c00008ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008b2:	0f b6 d0             	movzx  edx,al
c00008b5:	f6 82 e0 01 02 c0 02 	test   BYTE PTR [edx-0x3ffdfe20],0x2
c00008bc:	74 03                	je     c00008c1 <toupper+0x13>
c00008be:	83 e8 20             	sub    eax,0x20
c00008c1:	c3                   	ret    

c00008c2 <tolower>:
c00008c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008c6:	0f b6 d0             	movzx  edx,al
c00008c9:	f6 82 e0 01 02 c0 01 	test   BYTE PTR [edx-0x3ffdfe20],0x1
c00008d0:	74 03                	je     c00008d5 <tolower+0x13>
c00008d2:	83 c0 20             	add    eax,0x20
c00008d5:	c3                   	ret    

c00008d6 <simple_strtoul>:
c00008d6:	55                   	push   ebp
c00008d7:	57                   	push   edi
c00008d8:	56                   	push   esi
c00008d9:	53                   	push   ebx
c00008da:	83 ec 08             	sub    esp,0x8
c00008dd:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00008e1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00008e5:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c00008e8:	f6 82 e0 01 02 c0 08 	test   BYTE PTR [edx-0x3ffdfe20],0x8
c00008ef:	74 03                	je     c00008f4 <simple_strtoul+0x1e>
c00008f1:	41                   	inc    ecx
c00008f2:	eb f1                	jmp    c00008e5 <simple_strtoul+0xf>
c00008f4:	80 fa 09             	cmp    dl,0x9
c00008f7:	74 f8                	je     c00008f1 <simple_strtoul+0x1b>
c00008f9:	80 fa 2d             	cmp    dl,0x2d
c00008fc:	75 0b                	jne    c0000909 <simple_strtoul+0x33>
c00008fe:	41                   	inc    ecx
c00008ff:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000907:	eb 0e                	jmp    c0000917 <simple_strtoul+0x41>
c0000909:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000911:	80 fa 2b             	cmp    dl,0x2b
c0000914:	75 01                	jne    c0000917 <simple_strtoul+0x41>
c0000916:	41                   	inc    ecx
c0000917:	85 f6                	test   esi,esi
c0000919:	75 22                	jne    c000093d <simple_strtoul+0x67>
c000091b:	be 0a 00 00 00       	mov    esi,0xa
c0000920:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c0000923:	75 5a                	jne    c000097f <simple_strtoul+0xa9>
c0000925:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000929:	50                   	push   eax
c000092a:	e8 93 ff ff ff       	call   c00008c2 <tolower>
c000092f:	5a                   	pop    edx
c0000930:	83 f8 78             	cmp    eax,0x78
c0000933:	74 03                	je     c0000938 <simple_strtoul+0x62>
c0000935:	41                   	inc    ecx
c0000936:	eb 16                	jmp    c000094e <simple_strtoul+0x78>
c0000938:	83 c1 02             	add    ecx,0x2
c000093b:	eb 22                	jmp    c000095f <simple_strtoul+0x89>
c000093d:	8d 46 fe             	lea    eax,[esi-0x2]
c0000940:	83 f8 22             	cmp    eax,0x22
c0000943:	0f 87 ab 00 00 00    	ja     c00009f4 <simple_strtoul+0x11e>
c0000949:	83 fe 08             	cmp    esi,0x8
c000094c:	75 0c                	jne    c000095a <simple_strtoul+0x84>
c000094e:	be 08 00 00 00       	mov    esi,0x8
c0000953:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c0000956:	75 27                	jne    c000097f <simple_strtoul+0xa9>
c0000958:	eb 1f                	jmp    c0000979 <simple_strtoul+0xa3>
c000095a:	83 fe 10             	cmp    esi,0x10
c000095d:	75 20                	jne    c000097f <simple_strtoul+0xa9>
c000095f:	be 10 00 00 00       	mov    esi,0x10
c0000964:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c0000967:	75 16                	jne    c000097f <simple_strtoul+0xa9>
c0000969:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c000096d:	50                   	push   eax
c000096e:	e8 4f ff ff ff       	call   c00008c2 <tolower>
c0000973:	5d                   	pop    ebp
c0000974:	83 f8 78             	cmp    eax,0x78
c0000977:	74 03                	je     c000097c <simple_strtoul+0xa6>
c0000979:	41                   	inc    ecx
c000097a:	eb 03                	jmp    c000097f <simple_strtoul+0xa9>
c000097c:	83 c1 02             	add    ecx,0x2
c000097f:	31 ed                	xor    ebp,ebp
c0000981:	31 db                	xor    ebx,ebx
c0000983:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000098a:	8a 11                	mov    dl,BYTE PTR [ecx]
c000098c:	84 d2                	test   dl,dl
c000098e:	74 27                	je     c00009b7 <simple_strtoul+0xe1>
c0000990:	0f b6 fa             	movzx  edi,dl
c0000993:	f6 87 e0 01 02 c0 04 	test   BYTE PTR [edi-0x3ffdfe20],0x4
c000099a:	74 05                	je     c00009a1 <simple_strtoul+0xcb>
c000099c:	83 ef 30             	sub    edi,0x30
c000099f:	eb 22                	jmp    c00009c3 <simple_strtoul+0xed>
c00009a1:	0f be d2             	movsx  edx,dl
c00009a4:	52                   	push   edx
c00009a5:	e8 04 ff ff ff       	call   c00008ae <toupper>
c00009aa:	0f b6 d0             	movzx  edx,al
c00009ad:	5f                   	pop    edi
c00009ae:	f6 82 e0 01 02 c0 01 	test   BYTE PTR [edx-0x3ffdfe20],0x1
c00009b5:	75 09                	jne    c00009c0 <simple_strtoul+0xea>
c00009b7:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c00009bc:	75 2d                	jne    c00009eb <simple_strtoul+0x115>
c00009be:	eb 59                	jmp    c0000a19 <simple_strtoul+0x143>
c00009c0:	8d 78 c9             	lea    edi,[eax-0x37]
c00009c3:	39 f7                	cmp    edi,esi
c00009c5:	73 f0                	jae    c00009b7 <simple_strtoul+0xe1>
c00009c7:	89 f8                	mov    eax,edi
c00009c9:	31 d2                	xor    edx,edx
c00009cb:	f7 d0                	not    eax
c00009cd:	f7 f6                	div    esi
c00009cf:	39 d8                	cmp    eax,ebx
c00009d1:	72 0e                	jb     c00009e1 <simple_strtoul+0x10b>
c00009d3:	0f af de             	imul   ebx,esi
c00009d6:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00009dd:	01 fb                	add    ebx,edi
c00009df:	eb 07                	jmp    c00009e8 <simple_strtoul+0x112>
c00009e1:	bd 01 00 00 00       	mov    ebp,0x1
c00009e6:	31 db                	xor    ebx,ebx
c00009e8:	41                   	inc    ecx
c00009e9:	eb 9f                	jmp    c000098a <simple_strtoul+0xb4>
c00009eb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00009ee:	09 d8                	or     eax,ebx
c00009f0:	75 21                	jne    c0000a13 <simple_strtoul+0x13d>
c00009f2:	eb 11                	jmp    c0000a05 <simple_strtoul+0x12f>
c00009f4:	31 db                	xor    ebx,ebx
c00009f6:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c00009fb:	74 22                	je     c0000a1f <simple_strtoul+0x149>
c00009fd:	31 ed                	xor    ebp,ebp
c00009ff:	31 db                	xor    ebx,ebx
c0000a01:	85 c9                	test   ecx,ecx
c0000a03:	74 0e                	je     c0000a13 <simple_strtoul+0x13d>
c0000a05:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a09:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000a0d:	31 db                	xor    ebx,ebx
c0000a0f:	89 38                	mov    DWORD PTR [eax],edi
c0000a11:	eb 06                	jmp    c0000a19 <simple_strtoul+0x143>
c0000a13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a17:	89 08                	mov    DWORD PTR [eax],ecx
c0000a19:	4d                   	dec    ebp
c0000a1a:	75 03                	jne    c0000a1f <simple_strtoul+0x149>
c0000a1c:	83 cb ff             	or     ebx,0xffffffff
c0000a1f:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a24:	75 02                	jne    c0000a28 <simple_strtoul+0x152>
c0000a26:	f7 db                	neg    ebx
c0000a28:	83 c4 08             	add    esp,0x8
c0000a2b:	89 d8                	mov    eax,ebx
c0000a2d:	5b                   	pop    ebx
c0000a2e:	5e                   	pop    esi
c0000a2f:	5f                   	pop    edi
c0000a30:	5d                   	pop    ebp
c0000a31:	c3                   	ret    

c0000a32 <largebin_index>:
c0000a32:	89 c2                	mov    edx,eax
c0000a34:	c1 ea 08             	shr    edx,0x8
c0000a37:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000a3d:	77 10                	ja     c0000a4f <largebin_index+0x1d>
c0000a3f:	0f bd d2             	bsr    edx,edx
c0000a42:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000a45:	d3 e8                	shr    eax,cl
c0000a47:	83 e0 03             	and    eax,0x3
c0000a4a:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000a4e:	c3                   	ret    
c0000a4f:	b8 5f 00 00 00       	mov    eax,0x5f
c0000a54:	c3                   	ret    

c0000a55 <malloc_init_state>:
c0000a55:	8d 50 34             	lea    edx,[eax+0x34]
c0000a58:	53                   	push   ebx
c0000a59:	89 d1                	mov    ecx,edx
c0000a5b:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000a61:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000a64:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000a67:	83 c2 08             	add    edx,0x8
c0000a6a:	39 da                	cmp    edx,ebx
c0000a6c:	75 f3                	jne    c0000a61 <malloc_init_state+0xc>
c0000a6e:	8b 10                	mov    edx,DWORD PTR [eax]
c0000a70:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000a7a:	83 e2 03             	and    edx,0x3
c0000a7d:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000a87:	83 ca 48             	or     edx,0x48
c0000a8a:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000a94:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000a9e:	89 10                	mov    DWORD PTR [eax],edx
c0000aa0:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000aa7:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000aaa:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000ab4:	5b                   	pop    ebx
c0000ab5:	c3                   	ret    

c0000ab6 <malloc_consolidate>:
c0000ab6:	8b 10                	mov    edx,DWORD PTR [eax]
c0000ab8:	85 d2                	test   edx,edx
c0000aba:	0f 84 d8 00 00 00    	je     c0000b98 <malloc_consolidate+0xe2>
c0000ac0:	55                   	push   ebp
c0000ac1:	83 e2 fd             	and    edx,0xfffffffd
c0000ac4:	57                   	push   edi
c0000ac5:	8d 78 34             	lea    edi,[eax+0x34]
c0000ac8:	56                   	push   esi
c0000ac9:	89 c5                	mov    ebp,eax
c0000acb:	53                   	push   ebx
c0000acc:	83 ec 10             	sub    esp,0x10
c0000acf:	89 10                	mov    DWORD PTR [eax],edx
c0000ad1:	c1 ea 03             	shr    edx,0x3
c0000ad4:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000ad8:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000adc:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000ae0:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000ae3:	85 d2                	test   edx,edx
c0000ae5:	0f 84 98 00 00 00    	je     c0000b83 <malloc_consolidate+0xcd>
c0000aeb:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000af2:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000af5:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000af8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000afc:	89 f9                	mov    ecx,edi
c0000afe:	83 e1 fe             	and    ecx,0xfffffffe
c0000b01:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000b04:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000b07:	83 e3 fc             	and    ebx,0xfffffffc
c0000b0a:	83 e7 01             	and    edi,0x1
c0000b0d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000b10:	75 14                	jne    c0000b26 <malloc_consolidate+0x70>
c0000b12:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000b14:	29 fa                	sub    edx,edi
c0000b16:	01 f9                	add    ecx,edi
c0000b18:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000b1b:	89 fb                	mov    ebx,edi
c0000b1d:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000b20:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000b23:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000b26:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000b29:	74 40                	je     c0000b6b <malloc_consolidate+0xb5>
c0000b2b:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000b2e:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000b31:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000b35:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000b38:	83 e7 01             	and    edi,0x1
c0000b3b:	75 0e                	jne    c0000b4b <malloc_consolidate+0x95>
c0000b3d:	01 d9                	add    ecx,ebx
c0000b3f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000b42:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000b45:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000b48:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000b4b:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000b4e:	89 ce                	mov    esi,ecx
c0000b50:	83 ce 01             	or     esi,0x1
c0000b53:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000b56:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000b59:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000b5c:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000b60:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000b63:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000b66:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000b69:	eb 0c                	jmp    c0000b77 <malloc_consolidate+0xc1>
c0000b6b:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000b6e:	83 c9 01             	or     ecx,0x1
c0000b71:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000b74:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000b77:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000b7b:	85 d2                	test   edx,edx
c0000b7d:	0f 85 6f ff ff ff    	jne    c0000af2 <malloc_consolidate+0x3c>
c0000b83:	83 c5 04             	add    ebp,0x4
c0000b86:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000b8a:	0f 85 50 ff ff ff    	jne    c0000ae0 <malloc_consolidate+0x2a>
c0000b90:	83 c4 10             	add    esp,0x10
c0000b93:	5b                   	pop    ebx
c0000b94:	5e                   	pop    esi
c0000b95:	5f                   	pop    edi
c0000b96:	5d                   	pop    ebp
c0000b97:	c3                   	ret    
c0000b98:	e9 b8 fe ff ff       	jmp    c0000a55 <malloc_init_state>

c0000b9d <dlfree>:
c0000b9d:	57                   	push   edi
c0000b9e:	56                   	push   esi
c0000b9f:	53                   	push   ebx
c0000ba0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000ba4:	85 db                	test   ebx,ebx
c0000ba6:	0f 84 e2 00 00 00    	je     c0000c8e <dlfree+0xf1>
c0000bac:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000baf:	8b 0d 80 41 02 c0    	mov    ecx,DWORD PTR ds:0xc0024180
c0000bb5:	89 f0                	mov    eax,esi
c0000bb7:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000bba:	83 e0 fc             	and    eax,0xfffffffc
c0000bbd:	39 c1                	cmp    ecx,eax
c0000bbf:	72 24                	jb     c0000be5 <dlfree+0x48>
c0000bc1:	c1 e8 03             	shr    eax,0x3
c0000bc4:	83 c9 03             	or     ecx,0x3
c0000bc7:	83 e8 02             	sub    eax,0x2
c0000bca:	89 0d 80 41 02 c0    	mov    DWORD PTR ds:0xc0024180,ecx
c0000bd0:	8b 0c 85 84 41 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdbe7c]
c0000bd7:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000bd9:	89 14 85 84 41 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbe7c],edx
c0000be0:	e9 a9 00 00 00       	jmp    c0000c8e <dlfree+0xf1>
c0000be5:	83 e6 02             	and    esi,0x2
c0000be8:	0f 85 a0 00 00 00    	jne    c0000c8e <dlfree+0xf1>
c0000bee:	8d 34 02             	lea    esi,[edx+eax*1]
c0000bf1:	83 c9 01             	or     ecx,0x1
c0000bf4:	89 0d 80 41 02 c0    	mov    DWORD PTR ds:0xc0024180,ecx
c0000bfa:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000bfd:	83 e1 fc             	and    ecx,0xfffffffc
c0000c00:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000c04:	75 13                	jne    c0000c19 <dlfree+0x7c>
c0000c06:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000c09:	29 da                	sub    edx,ebx
c0000c0b:	01 d8                	add    eax,ebx
c0000c0d:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000c10:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000c13:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000c16:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000c19:	39 35 ac 41 02 c0    	cmp    DWORD PTR ds:0xc00241ac,esi
c0000c1f:	74 40                	je     c0000c61 <dlfree+0xc4>
c0000c21:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000c25:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000c28:	80 e3 01             	and    bl,0x1
c0000c2b:	75 0e                	jne    c0000c3b <dlfree+0x9e>
c0000c2d:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000c30:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000c33:	01 c8                	add    eax,ecx
c0000c35:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000c38:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000c3b:	8b 0d bc 41 02 c0    	mov    ecx,DWORD PTR ds:0xc00241bc
c0000c41:	c7 42 0c b4 41 02 c0 	mov    DWORD PTR [edx+0xc],0xc00241b4
c0000c48:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000c4b:	89 15 bc 41 02 c0    	mov    DWORD PTR ds:0xc00241bc,edx
c0000c51:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000c54:	89 c1                	mov    ecx,eax
c0000c56:	83 c9 01             	or     ecx,0x1
c0000c59:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c5c:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000c5f:	eb 10                	jmp    c0000c71 <dlfree+0xd4>
c0000c61:	01 c8                	add    eax,ecx
c0000c63:	89 c1                	mov    ecx,eax
c0000c65:	83 c9 01             	or     ecx,0x1
c0000c68:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c6b:	89 15 ac 41 02 c0    	mov    DWORD PTR ds:0xc00241ac,edx
c0000c71:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000c76:	76 16                	jbe    c0000c8e <dlfree+0xf1>
c0000c78:	f6 05 80 41 02 c0 02 	test   BYTE PTR ds:0xc0024180,0x2
c0000c7f:	74 0d                	je     c0000c8e <dlfree+0xf1>
c0000c81:	5b                   	pop    ebx
c0000c82:	b8 80 41 02 c0       	mov    eax,0xc0024180
c0000c87:	5e                   	pop    esi
c0000c88:	5f                   	pop    edi
c0000c89:	e9 28 fe ff ff       	jmp    c0000ab6 <malloc_consolidate>
c0000c8e:	5b                   	pop    ebx
c0000c8f:	5e                   	pop    esi
c0000c90:	5f                   	pop    edi
c0000c91:	c3                   	ret    

c0000c92 <sYSMALLOc>:
c0000c92:	55                   	push   ebp
c0000c93:	57                   	push   edi
c0000c94:	56                   	push   esi
c0000c95:	53                   	push   ebx
c0000c96:	89 d3                	mov    ebx,edx
c0000c98:	83 ec 2c             	sub    esp,0x2c
c0000c9b:	8b 8a 5c 03 00 00    	mov    ecx,DWORD PTR [edx+0x35c]
c0000ca1:	f6 02 02             	test   BYTE PTR [edx],0x2
c0000ca4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ca8:	8d 41 ff             	lea    eax,[ecx-0x1]
c0000cab:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000caf:	74 1f                	je     c0000cd0 <sYSMALLOc+0x3e>
c0000cb1:	89 d0                	mov    eax,edx
c0000cb3:	e8 fe fd ff ff       	call   c0000ab6 <malloc_consolidate>
c0000cb8:	83 ec 0c             	sub    esp,0xc
c0000cbb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000cbf:	83 e8 07             	sub    eax,0x7
c0000cc2:	50                   	push   eax
c0000cc3:	e8 33 02 00 00       	call   c0000efb <dlmalloc>
c0000cc8:	83 c4 10             	add    esp,0x10
c0000ccb:	e9 23 02 00 00       	jmp    c0000ef3 <sYSMALLOc+0x261>
c0000cd0:	8b 7a 2c             	mov    edi,DWORD PTR [edx+0x2c]
c0000cd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0000cd7:	83 c0 10             	add    eax,0x10
c0000cda:	8b 92 48 03 00 00    	mov    edx,DWORD PTR [edx+0x348]
c0000ce0:	8b 6f 04             	mov    ebp,DWORD PTR [edi+0x4]
c0000ce3:	01 c2                	add    edx,eax
c0000ce5:	83 e5 fc             	and    ebp,0xfffffffc
c0000ce8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0000cec:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000cf3:	74 02                	je     c0000cf7 <sYSMALLOc+0x65>
c0000cf5:	29 ea                	sub    edx,ebp
c0000cf7:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0000cfb:	f7 d9                	neg    ecx
c0000cfd:	21 ca                	and    edx,ecx
c0000cff:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0000d03:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0000d07:	7f 07                	jg     c0000d10 <sYSMALLOc+0x7e>
c0000d09:	31 c0                	xor    eax,eax
c0000d0b:	e9 e3 01 00 00       	jmp    c0000ef3 <sYSMALLOc+0x261>
c0000d10:	83 ec 0c             	sub    esp,0xc
c0000d13:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000d17:	e8 3b b1 00 00       	call   c000be57 <sbrk>
c0000d1c:	83 c4 10             	add    esp,0x10
c0000d1f:	89 c6                	mov    esi,eax
c0000d21:	83 f8 ff             	cmp    eax,0xffffffff
c0000d24:	74 e3                	je     c0000d09 <sYSMALLOc+0x77>
c0000d26:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000d2a:	8d 14 2f             	lea    edx,[edi+ebp*1]
c0000d2d:	03 8b 68 03 00 00    	add    ecx,DWORD PTR [ebx+0x368]
c0000d33:	39 c2                	cmp    edx,eax
c0000d35:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0000d3b:	75 11                	jne    c0000d4e <sYSMALLOc+0xbc>
c0000d3d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000d41:	01 e8                	add    eax,ebp
c0000d43:	83 c8 01             	or     eax,0x1
c0000d46:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000d49:	e9 93 00 00 00       	jmp    c0000de1 <sYSMALLOc+0x14f>
c0000d4e:	8b 83 60 03 00 00    	mov    eax,DWORD PTR [ebx+0x360]
c0000d54:	a8 01                	test   al,0x1
c0000d56:	0f 84 73 01 00 00    	je     c0000ecf <sYSMALLOc+0x23d>
c0000d5c:	85 ed                	test   ebp,ebp
c0000d5e:	74 12                	je     c0000d72 <sYSMALLOc+0xe0>
c0000d60:	39 f2                	cmp    edx,esi
c0000d62:	76 0e                	jbe    c0000d72 <sYSMALLOc+0xe0>
c0000d64:	83 e0 fe             	and    eax,0xfffffffe
c0000d67:	89 83 60 03 00 00    	mov    DWORD PTR [ebx+0x360],eax
c0000d6d:	e9 5d 01 00 00       	jmp    c0000ecf <sYSMALLOc+0x23d>
c0000d72:	85 ed                	test   ebp,ebp
c0000d74:	74 0c                	je     c0000d82 <sYSMALLOc+0xf0>
c0000d76:	89 f0                	mov    eax,esi
c0000d78:	29 d0                	sub    eax,edx
c0000d7a:	01 c1                	add    ecx,eax
c0000d7c:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0000d82:	89 f2                	mov    edx,esi
c0000d84:	83 e2 07             	and    edx,0x7
c0000d87:	0f 84 b1 00 00 00    	je     c0000e3e <sYSMALLOc+0x1ac>
c0000d8d:	b8 08 00 00 00       	mov    eax,0x8
c0000d92:	29 d0                	sub    eax,edx
c0000d94:	8d 0c 06             	lea    ecx,[esi+eax*1]
c0000d97:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000d9b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000d9f:	01 e8                	add    eax,ebp
c0000da1:	83 ec 0c             	sub    esp,0xc
c0000da4:	8d 14 01             	lea    edx,[ecx+eax*1]
c0000da7:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0000dab:	01 f2                	add    edx,esi
c0000dad:	01 d1                	add    ecx,edx
c0000daf:	29 d0                	sub    eax,edx
c0000db1:	23 4c 24 28          	and    ecx,DWORD PTR [esp+0x28]
c0000db5:	01 c1                	add    ecx,eax
c0000db7:	51                   	push   ecx
c0000db8:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0000dbc:	e8 96 b0 00 00       	call   c000be57 <sbrk>
c0000dc1:	83 c4 10             	add    esp,0x10
c0000dc4:	83 f8 ff             	cmp    eax,0xffffffff
c0000dc7:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0000dcb:	75 7c                	jne    c0000e49 <sYSMALLOc+0x1b7>
c0000dcd:	83 ec 0c             	sub    esp,0xc
c0000dd0:	6a 00                	push   0x0
c0000dd2:	e8 80 b0 00 00       	call   c000be57 <sbrk>
c0000dd7:	83 c4 10             	add    esp,0x10
c0000dda:	31 c9                	xor    ecx,ecx
c0000ddc:	83 f8 ff             	cmp    eax,0xffffffff
c0000ddf:	75 7e                	jne    c0000e5f <sYSMALLOc+0x1cd>
c0000de1:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000de7:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000ded:	73 06                	jae    c0000df5 <sYSMALLOc+0x163>
c0000def:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000df5:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000dfb:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000e01:	73 06                	jae    c0000e09 <sYSMALLOc+0x177>
c0000e03:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000e09:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000e0c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000e0f:	83 e2 fc             	and    edx,0xfffffffc
c0000e12:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0000e16:	0f 87 ed fe ff ff    	ja     c0000d09 <sYSMALLOc+0x77>
c0000e1c:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000e20:	29 fa                	sub    edx,edi
c0000e22:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000e25:	83 ca 01             	or     edx,0x1
c0000e28:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000e2b:	89 fb                	mov    ebx,edi
c0000e2d:	83 cb 01             	or     ebx,0x1
c0000e30:	83 c0 08             	add    eax,0x8
c0000e33:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0000e36:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0000e39:	e9 b5 00 00 00       	jmp    c0000ef3 <sYSMALLOc+0x261>
c0000e3e:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0000e42:	31 c0                	xor    eax,eax
c0000e44:	e9 52 ff ff ff       	jmp    c0000d9b <sYSMALLOc+0x109>
c0000e49:	39 c6                	cmp    esi,eax
c0000e4b:	76 12                	jbe    c0000e5f <sYSMALLOc+0x1cd>
c0000e4d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000e51:	01 f0                	add    eax,esi
c0000e53:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000e5a:	e9 7b ff ff ff       	jmp    c0000dda <sYSMALLOc+0x148>
c0000e5f:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0000e63:	29 f0                	sub    eax,esi
c0000e65:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0000e68:	01 c8                	add    eax,ecx
c0000e6a:	83 c8 01             	or     eax,0x1
c0000e6d:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c0000e70:	01 8b 68 03 00 00    	add    DWORD PTR [ebx+0x368],ecx
c0000e76:	85 ed                	test   ebp,ebp
c0000e78:	0f 84 63 ff ff ff    	je     c0000de1 <sYSMALLOc+0x14f>
c0000e7e:	8d 45 f4             	lea    eax,[ebp-0xc]
c0000e81:	83 e0 f8             	and    eax,0xfffffff8
c0000e84:	89 c2                	mov    edx,eax
c0000e86:	83 ca 01             	or     edx,0x1
c0000e89:	83 f8 0f             	cmp    eax,0xf
c0000e8c:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000e8f:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000e97:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000e9f:	0f 86 3c ff ff ff    	jbe    c0000de1 <sYSMALLOc+0x14f>
c0000ea5:	83 ec 0c             	sub    esp,0xc
c0000ea8:	83 c7 08             	add    edi,0x8
c0000eab:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000eb1:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000ebb:	57                   	push   edi
c0000ebc:	e8 dc fc ff ff       	call   c0000b9d <dlfree>
c0000ec1:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000ec7:	83 c4 10             	add    esp,0x10
c0000eca:	e9 12 ff ff ff       	jmp    c0000de1 <sYSMALLOc+0x14f>
c0000ecf:	83 ec 0c             	sub    esp,0xc
c0000ed2:	6a 00                	push   0x0
c0000ed4:	e8 7e af 00 00       	call   c000be57 <sbrk>
c0000ed9:	89 c2                	mov    edx,eax
c0000edb:	29 f2                	sub    edx,esi
c0000edd:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000ee1:	83 c4 10             	add    esp,0x10
c0000ee4:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000eea:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0000eee:	e9 e7 fe ff ff       	jmp    c0000dda <sYSMALLOc+0x148>
c0000ef3:	83 c4 2c             	add    esp,0x2c
c0000ef6:	5b                   	pop    ebx
c0000ef7:	5e                   	pop    esi
c0000ef8:	5f                   	pop    edi
c0000ef9:	5d                   	pop    ebp
c0000efa:	c3                   	ret    

c0000efb <dlmalloc>:
c0000efb:	55                   	push   ebp
c0000efc:	57                   	push   edi
c0000efd:	56                   	push   esi
c0000efe:	53                   	push   ebx
c0000eff:	83 ec 1c             	sub    esp,0x1c
c0000f02:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0000f06:	83 f8 df             	cmp    eax,0xffffffdf
c0000f09:	0f 87 70 03 00 00    	ja     c000127f <dlmalloc+0x384>
c0000f0f:	83 c0 0b             	add    eax,0xb
c0000f12:	be 10 00 00 00       	mov    esi,0x10
c0000f17:	83 f8 0f             	cmp    eax,0xf
c0000f1a:	76 05                	jbe    c0000f21 <dlmalloc+0x26>
c0000f1c:	83 e0 f8             	and    eax,0xfffffff8
c0000f1f:	89 c6                	mov    esi,eax
c0000f21:	8b 3d 80 41 02 c0    	mov    edi,DWORD PTR ds:0xc0024180
c0000f27:	f7 c7 01 00 00 00    	test   edi,0x1
c0000f2d:	75 17                	jne    c0000f46 <dlmalloc+0x4b>
c0000f2f:	85 ff                	test   edi,edi
c0000f31:	0f 85 05 03 00 00    	jne    c000123c <dlmalloc+0x341>
c0000f37:	b8 80 41 02 c0       	mov    eax,0xc0024180
c0000f3c:	e8 75 fb ff ff       	call   c0000ab6 <malloc_consolidate>
c0000f41:	e9 f6 02 00 00       	jmp    c000123c <dlmalloc+0x341>
c0000f46:	39 f7                	cmp    edi,esi
c0000f48:	72 1f                	jb     c0000f69 <dlmalloc+0x6e>
c0000f4a:	89 f2                	mov    edx,esi
c0000f4c:	c1 ea 03             	shr    edx,0x3
c0000f4f:	83 ea 02             	sub    edx,0x2
c0000f52:	8b 04 95 84 41 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdbe7c]
c0000f59:	85 c0                	test   eax,eax
c0000f5b:	74 0c                	je     c0000f69 <dlmalloc+0x6e>
c0000f5d:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0000f60:	89 0c 95 84 41 02 c0 	mov    DWORD PTR [edx*4-0x3ffdbe7c],ecx
c0000f67:	eb 30                	jmp    c0000f99 <dlmalloc+0x9e>
c0000f69:	89 f0                	mov    eax,esi
c0000f6b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000f71:	77 2e                	ja     c0000fa1 <dlmalloc+0xa6>
c0000f73:	c1 e8 03             	shr    eax,0x3
c0000f76:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000f7a:	8d 14 c5 b4 41 02 c0 	lea    edx,[eax*8-0x3ffdbe4c]
c0000f81:	8d 5a f8             	lea    ebx,[edx-0x8]
c0000f84:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0000f87:	39 c3                	cmp    ebx,eax
c0000f89:	74 2e                	je     c0000fb9 <dlmalloc+0xbe>
c0000f8b:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0000f8e:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0000f93:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000f96:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0000f99:	83 c0 08             	add    eax,0x8
c0000f9c:	e9 e0 02 00 00       	jmp    c0001281 <dlmalloc+0x386>
c0000fa1:	e8 8c fa ff ff       	call   c0000a32 <largebin_index>
c0000fa6:	83 e7 02             	and    edi,0x2
c0000fa9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000fad:	74 0a                	je     c0000fb9 <dlmalloc+0xbe>
c0000faf:	b8 80 41 02 c0       	mov    eax,0xc0024180
c0000fb4:	e8 fd fa ff ff       	call   c0000ab6 <malloc_consolidate>
c0000fb9:	8d 46 10             	lea    eax,[esi+0x10]
c0000fbc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000fc0:	8b 1d c0 41 02 c0    	mov    ebx,DWORD PTR ds:0xc00241c0
c0000fc6:	81 fb b4 41 02 c0    	cmp    ebx,0xc00241b4
c0000fcc:	0f 84 13 01 00 00    	je     c00010e5 <dlmalloc+0x1ea>
c0000fd2:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0000fd5:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0000fd8:	83 e7 fc             	and    edi,0xfffffffc
c0000fdb:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000fe1:	77 4c                	ja     c000102f <dlmalloc+0x134>
c0000fe3:	3d b4 41 02 c0       	cmp    eax,0xc00241b4
c0000fe8:	75 45                	jne    c000102f <dlmalloc+0x134>
c0000fea:	39 1d b0 41 02 c0    	cmp    DWORD PTR ds:0xc00241b0,ebx
c0000ff0:	75 3d                	jne    c000102f <dlmalloc+0x134>
c0000ff2:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0000ff6:	73 37                	jae    c000102f <dlmalloc+0x134>
c0000ff8:	89 fa                	mov    edx,edi
c0000ffa:	8d 04 33             	lea    eax,[ebx+esi*1]
c0000ffd:	29 f2                	sub    edx,esi
c0000fff:	83 ce 01             	or     esi,0x1
c0001002:	89 d1                	mov    ecx,edx
c0001004:	a3 bc 41 02 c0       	mov    ds:0xc00241bc,eax
c0001009:	83 c9 01             	or     ecx,0x1
c000100c:	a3 c0 41 02 c0       	mov    ds:0xc00241c0,eax
c0001011:	a3 b0 41 02 c0       	mov    ds:0xc00241b0,eax
c0001016:	c7 40 08 b4 41 02 c0 	mov    DWORD PTR [eax+0x8],0xc00241b4
c000101d:	c7 40 0c b4 41 02 c0 	mov    DWORD PTR [eax+0xc],0xc00241b4
c0001024:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001027:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000102a:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c000102d:	eb 15                	jmp    c0001044 <dlmalloc+0x149>
c000102f:	a3 c0 41 02 c0       	mov    ds:0xc00241c0,eax
c0001034:	39 fe                	cmp    esi,edi
c0001036:	c7 40 08 b4 41 02 c0 	mov    DWORD PTR [eax+0x8],0xc00241b4
c000103d:	75 0d                	jne    c000104c <dlmalloc+0x151>
c000103f:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001044:	8d 43 08             	lea    eax,[ebx+0x8]
c0001047:	e9 35 02 00 00       	jmp    c0001281 <dlmalloc+0x386>
c000104c:	89 f8                	mov    eax,edi
c000104e:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001054:	77 19                	ja     c000106f <dlmalloc+0x174>
c0001056:	c1 e8 03             	shr    eax,0x3
c0001059:	8d 14 00             	lea    edx,[eax+eax*1]
c000105c:	83 c2 0d             	add    edx,0xd
c000105f:	8d 2c 95 78 41 02 c0 	lea    ebp,[edx*4-0x3ffdbe88]
c0001066:	8b 14 95 80 41 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbe80]
c000106d:	eb 46                	jmp    c00010b5 <dlmalloc+0x1ba>
c000106f:	e8 be f9 ff ff       	call   c0000a32 <largebin_index>
c0001074:	8d 14 00             	lea    edx,[eax+eax*1]
c0001077:	83 c2 0d             	add    edx,0xd
c000107a:	8d 0c 95 80 41 02 c0 	lea    ecx,[edx*4-0x3ffdbe80]
c0001081:	8b 14 95 80 41 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbe80]
c0001088:	8d 69 f8             	lea    ebp,[ecx-0x8]
c000108b:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000108f:	89 d5                	mov    ebp,edx
c0001091:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0001095:	74 1e                	je     c00010b5 <dlmalloc+0x1ba>
c0001097:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c000109a:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c000109d:	77 12                	ja     c00010b1 <dlmalloc+0x1b6>
c000109f:	83 cf 01             	or     edi,0x1
c00010a2:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00010a5:	76 05                	jbe    c00010ac <dlmalloc+0x1b1>
c00010a7:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00010aa:	eb f6                	jmp    c00010a2 <dlmalloc+0x1a7>
c00010ac:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00010af:	eb 04                	jmp    c00010b5 <dlmalloc+0x1ba>
c00010b1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00010b5:	89 c7                	mov    edi,eax
c00010b7:	88 c1                	mov    cl,al
c00010b9:	c1 ff 05             	sar    edi,0x5
c00010bc:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00010c0:	bf 01 00 00 00       	mov    edi,0x1
c00010c5:	d3 e7                	shl    edi,cl
c00010c7:	89 f8                	mov    eax,edi
c00010c9:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00010cd:	09 04 bd b4 44 02 c0 	or     DWORD PTR [edi*4-0x3ffdbb4c],eax
c00010d4:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00010d7:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00010da:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00010dd:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00010e0:	e9 db fe ff ff       	jmp    c0000fc0 <dlmalloc+0xc5>
c00010e5:	81 fe ff 00 00 00    	cmp    esi,0xff
c00010eb:	76 78                	jbe    c0001165 <dlmalloc+0x26a>
c00010ed:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00010f1:	8d 04 c5 b4 41 02 c0 	lea    eax,[eax*8-0x3ffdbe4c]
c00010f8:	8d 48 f8             	lea    ecx,[eax-0x8]
c00010fb:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010fe:	39 ca                	cmp    edx,ecx
c0001100:	74 63                	je     c0001165 <dlmalloc+0x26a>
c0001102:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001105:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001108:	83 e3 fc             	and    ebx,0xfffffffc
c000110b:	39 de                	cmp    esi,ebx
c000110d:	77 52                	ja     c0001161 <dlmalloc+0x266>
c000110f:	89 df                	mov    edi,ebx
c0001111:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001114:	29 f7                	sub    edi,esi
c0001116:	01 d3                	add    ebx,edx
c0001118:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000111b:	83 ff 0f             	cmp    edi,0xf
c000111e:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001121:	8d 42 08             	lea    eax,[edx+0x8]
c0001124:	77 09                	ja     c000112f <dlmalloc+0x234>
c0001126:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c000112a:	e9 52 01 00 00       	jmp    c0001281 <dlmalloc+0x386>
c000112f:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001132:	83 ce 01             	or     esi,0x1
c0001135:	89 0d bc 41 02 c0    	mov    DWORD PTR ds:0xc00241bc,ecx
c000113b:	89 0d c0 41 02 c0    	mov    DWORD PTR ds:0xc00241c0,ecx
c0001141:	c7 41 08 b4 41 02 c0 	mov    DWORD PTR [ecx+0x8],0xc00241b4
c0001148:	c7 41 0c b4 41 02 c0 	mov    DWORD PTR [ecx+0xc],0xc00241b4
c000114f:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001152:	89 fa                	mov    edx,edi
c0001154:	83 ca 01             	or     edx,0x1
c0001157:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000115a:	89 3b                	mov    DWORD PTR [ebx],edi
c000115c:	e9 20 01 00 00       	jmp    c0001281 <dlmalloc+0x386>
c0001161:	89 c2                	mov    edx,eax
c0001163:	eb 99                	jmp    c00010fe <dlmalloc+0x203>
c0001165:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001169:	b8 01 00 00 00       	mov    eax,0x1
c000116e:	41                   	inc    ecx
c000116f:	89 cb                	mov    ebx,ecx
c0001171:	c1 eb 05             	shr    ebx,0x5
c0001174:	8d 14 cd ac 41 02 c0 	lea    edx,[ecx*8-0x3ffdbe54]
c000117b:	d3 e0                	shl    eax,cl
c000117d:	8b 3c 9d b4 44 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdbb4c]
c0001184:	39 f8                	cmp    eax,edi
c0001186:	77 04                	ja     c000118c <dlmalloc+0x291>
c0001188:	85 c0                	test   eax,eax
c000118a:	75 26                	jne    c00011b2 <dlmalloc+0x2b7>
c000118c:	43                   	inc    ebx
c000118d:	83 fb 02             	cmp    ebx,0x2
c0001190:	0f 87 a6 00 00 00    	ja     c000123c <dlmalloc+0x341>
c0001196:	8b 3c 9d b4 44 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdbb4c]
c000119d:	85 ff                	test   edi,edi
c000119f:	74 eb                	je     c000118c <dlmalloc+0x291>
c00011a1:	89 d8                	mov    eax,ebx
c00011a3:	c1 e0 06             	shl    eax,0x6
c00011a6:	8d 14 85 ac 41 02 c0 	lea    edx,[eax*4-0x3ffdbe54]
c00011ad:	b8 01 00 00 00       	mov    eax,0x1
c00011b2:	85 f8                	test   eax,edi
c00011b4:	75 07                	jne    c00011bd <dlmalloc+0x2c2>
c00011b6:	83 c2 08             	add    edx,0x8
c00011b9:	01 c0                	add    eax,eax
c00011bb:	eb f5                	jmp    c00011b2 <dlmalloc+0x2b7>
c00011bd:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00011c0:	39 ca                	cmp    edx,ecx
c00011c2:	75 14                	jne    c00011d8 <dlmalloc+0x2dd>
c00011c4:	89 c1                	mov    ecx,eax
c00011c6:	83 c2 08             	add    edx,0x8
c00011c9:	f7 d1                	not    ecx
c00011cb:	21 cf                	and    edi,ecx
c00011cd:	01 c0                	add    eax,eax
c00011cf:	89 3c 9d b4 44 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdbb4c],edi
c00011d6:	eb ac                	jmp    c0001184 <dlmalloc+0x289>
c00011d8:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00011db:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00011de:	83 e0 fc             	and    eax,0xfffffffc
c00011e1:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00011e4:	89 c3                	mov    ebx,eax
c00011e6:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00011e9:	29 f3                	sub    ebx,esi
c00011eb:	8d 14 01             	lea    edx,[ecx+eax*1]
c00011ee:	83 fb 0f             	cmp    ebx,0xf
c00011f1:	8d 41 08             	lea    eax,[ecx+0x8]
c00011f4:	77 09                	ja     c00011ff <dlmalloc+0x304>
c00011f6:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00011fa:	e9 82 00 00 00       	jmp    c0001281 <dlmalloc+0x386>
c00011ff:	8d 3c 31             	lea    edi,[ecx+esi*1]
c0001202:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001208:	89 3d bc 41 02 c0    	mov    DWORD PTR ds:0xc00241bc,edi
c000120e:	89 3d c0 41 02 c0    	mov    DWORD PTR ds:0xc00241c0,edi
c0001214:	c7 47 08 b4 41 02 c0 	mov    DWORD PTR [edi+0x8],0xc00241b4
c000121b:	c7 47 0c b4 41 02 c0 	mov    DWORD PTR [edi+0xc],0xc00241b4
c0001222:	77 06                	ja     c000122a <dlmalloc+0x32f>
c0001224:	89 3d b0 41 02 c0    	mov    DWORD PTR ds:0xc00241b0,edi
c000122a:	83 ce 01             	or     esi,0x1
c000122d:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001230:	89 d9                	mov    ecx,ebx
c0001232:	83 c9 01             	or     ecx,0x1
c0001235:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001238:	89 1a                	mov    DWORD PTR [edx],ebx
c000123a:	eb 45                	jmp    c0001281 <dlmalloc+0x386>
c000123c:	a1 ac 41 02 c0       	mov    eax,ds:0xc00241ac
c0001241:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001244:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001247:	83 e2 fc             	and    edx,0xfffffffc
c000124a:	39 d1                	cmp    ecx,edx
c000124c:	77 1e                	ja     c000126c <dlmalloc+0x371>
c000124e:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001251:	89 f3                	mov    ebx,esi
c0001253:	29 f2                	sub    edx,esi
c0001255:	83 cb 01             	or     ebx,0x1
c0001258:	83 ca 01             	or     edx,0x1
c000125b:	89 0d ac 41 02 c0    	mov    DWORD PTR ds:0xc00241ac,ecx
c0001261:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001264:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001267:	e9 2d fd ff ff       	jmp    c0000f99 <dlmalloc+0x9e>
c000126c:	83 c4 1c             	add    esp,0x1c
c000126f:	89 f0                	mov    eax,esi
c0001271:	ba 80 41 02 c0       	mov    edx,0xc0024180
c0001276:	5b                   	pop    ebx
c0001277:	5e                   	pop    esi
c0001278:	5f                   	pop    edi
c0001279:	5d                   	pop    ebp
c000127a:	e9 13 fa ff ff       	jmp    c0000c92 <sYSMALLOc>
c000127f:	31 c0                	xor    eax,eax
c0001281:	83 c4 1c             	add    esp,0x1c
c0001284:	5b                   	pop    ebx
c0001285:	5e                   	pop    esi
c0001286:	5f                   	pop    edi
c0001287:	5d                   	pop    ebp
c0001288:	c3                   	ret    

c0001289 <iALLOc>:
c0001289:	55                   	push   ebp
c000128a:	89 c5                	mov    ebp,eax
c000128c:	57                   	push   edi
c000128d:	56                   	push   esi
c000128e:	53                   	push   ebx
c000128f:	83 ec 2c             	sub    esp,0x2c
c0001292:	83 3d 80 41 02 c0 00 	cmp    DWORD PTR ds:0xc0024180,0x0
c0001299:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000129d:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00012a1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00012a5:	75 12                	jne    c00012b9 <iALLOc+0x30>
c00012a7:	b8 80 41 02 c0       	mov    eax,0xc0024180
c00012ac:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00012b0:	e8 01 f8 ff ff       	call   c0000ab6 <malloc_consolidate>
c00012b5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00012b9:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00012be:	74 12                	je     c00012d2 <iALLOc+0x49>
c00012c0:	85 ed                	test   ebp,ebp
c00012c2:	0f 84 64 01 00 00    	je     c000142c <iALLOc+0x1a3>
c00012c8:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00012d0:	eb 33                	jmp    c0001305 <iALLOc+0x7c>
c00012d2:	85 ed                	test   ebp,ebp
c00012d4:	75 14                	jne    c00012ea <iALLOc+0x61>
c00012d6:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00012de:	83 c4 2c             	add    esp,0x2c
c00012e1:	5b                   	pop    ebx
c00012e2:	5e                   	pop    esi
c00012e3:	5f                   	pop    edi
c00012e4:	5d                   	pop    ebp
c00012e5:	e9 11 fc ff ff       	jmp    c0000efb <dlmalloc>
c00012ea:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00012f1:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00012f9:	83 f8 0f             	cmp    eax,0xf
c00012fc:	76 07                	jbe    c0001305 <iALLOc+0x7c>
c00012fe:	83 e0 f8             	and    eax,0xfffffff8
c0001301:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001305:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c000130a:	75 09                	jne    c0001315 <iALLOc+0x8c>
c000130c:	89 d0                	mov    eax,edx
c000130e:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001311:	31 f6                	xor    esi,esi
c0001313:	eb 3b                	jmp    c0001350 <iALLOc+0xc7>
c0001315:	8b 02                	mov    eax,DWORD PTR [edx]
c0001317:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c000131f:	83 c0 0b             	add    eax,0xb
c0001322:	83 f8 0f             	cmp    eax,0xf
c0001325:	76 07                	jbe    c000132e <iALLOc+0xa5>
c0001327:	83 e0 f8             	and    eax,0xfffffff8
c000132a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000132e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001332:	0f af f5             	imul   esi,ebp
c0001335:	eb 25                	jmp    c000135c <iALLOc+0xd3>
c0001337:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001339:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c000133c:	bb 10 00 00 00       	mov    ebx,0x10
c0001341:	83 f9 0f             	cmp    ecx,0xf
c0001344:	76 05                	jbe    c000134b <iALLOc+0xc2>
c0001346:	83 e1 f8             	and    ecx,0xfffffff8
c0001349:	89 cb                	mov    ebx,ecx
c000134b:	01 de                	add    esi,ebx
c000134d:	83 c0 04             	add    eax,0x4
c0001350:	39 c7                	cmp    edi,eax
c0001352:	75 e3                	jne    c0001337 <iALLOc+0xae>
c0001354:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000135c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001360:	83 ec 0c             	sub    esp,0xc
c0001363:	8b 1d d4 44 02 c0    	mov    ebx,DWORD PTR ds:0xc00244d4
c0001369:	c7 05 d4 44 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00244d4,0x0
c0001373:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001377:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000137b:	50                   	push   eax
c000137c:	e8 7a fb ff ff       	call   c0000efb <dlmalloc>
c0001381:	83 c4 10             	add    esp,0x10
c0001384:	89 1d d4 44 02 c0    	mov    DWORD PTR ds:0xc00244d4,ebx
c000138a:	85 c0                	test   eax,eax
c000138c:	0f 84 92 00 00 00    	je     c0001424 <iALLOc+0x19b>
c0001392:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c0001395:	8d 78 f8             	lea    edi,[eax-0x8]
c0001398:	83 e3 fc             	and    ebx,0xfffffffc
c000139b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000139f:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00013a4:	74 1e                	je     c00013c4 <iALLOc+0x13b>
c00013a6:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00013aa:	89 d9                	mov    ecx,ebx
c00013ac:	52                   	push   edx
c00013ad:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00013b1:	83 e9 04             	sub    ecx,0x4
c00013b4:	51                   	push   ecx
c00013b5:	6a 00                	push   0x0
c00013b7:	50                   	push   eax
c00013b8:	e8 fd f2 ff ff       	call   c00006ba <memset>
c00013bd:	83 c4 10             	add    esp,0x10
c00013c0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00013c4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00013c9:	75 14                	jne    c00013df <iALLOc+0x156>
c00013cb:	8d 04 37             	lea    eax,[edi+esi*1]
c00013ce:	29 f3                	sub    ebx,esi
c00013d0:	83 cb 01             	or     ebx,0x1
c00013d3:	8d 48 08             	lea    ecx,[eax+0x8]
c00013d6:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00013d9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00013dd:	89 f3                	mov    ebx,esi
c00013df:	31 c0                	xor    eax,eax
c00013e1:	4d                   	dec    ebp
c00013e2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00013e6:	8d 4f 08             	lea    ecx,[edi+0x8]
c00013e9:	39 c5                	cmp    ebp,eax
c00013eb:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00013ee:	74 2c                	je     c000141c <iALLOc+0x193>
c00013f0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00013f4:	85 c9                	test   ecx,ecx
c00013f6:	75 15                	jne    c000140d <iALLOc+0x184>
c00013f8:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00013fb:	8d 71 0b             	lea    esi,[ecx+0xb]
c00013fe:	b9 10 00 00 00       	mov    ecx,0x10
c0001403:	83 fe 0f             	cmp    esi,0xf
c0001406:	76 05                	jbe    c000140d <iALLOc+0x184>
c0001408:	83 e6 f8             	and    esi,0xfffffff8
c000140b:	89 f1                	mov    ecx,esi
c000140d:	89 ce                	mov    esi,ecx
c000140f:	29 cb                	sub    ebx,ecx
c0001411:	83 ce 01             	or     esi,0x1
c0001414:	40                   	inc    eax
c0001415:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001418:	01 cf                	add    edi,ecx
c000141a:	eb c6                	jmp    c00013e2 <iALLOc+0x159>
c000141c:	83 cb 01             	or     ebx,0x1
c000141f:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001422:	eb 08                	jmp    c000142c <iALLOc+0x1a3>
c0001424:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000142c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001430:	83 c4 2c             	add    esp,0x2c
c0001433:	5b                   	pop    ebx
c0001434:	5e                   	pop    esi
c0001435:	5f                   	pop    edi
c0001436:	5d                   	pop    ebp
c0001437:	c3                   	ret    

c0001438 <dlrealloc>:
c0001438:	55                   	push   ebp
c0001439:	57                   	push   edi
c000143a:	56                   	push   esi
c000143b:	53                   	push   ebx
c000143c:	83 ec 1c             	sub    esp,0x1c
c000143f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001443:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001447:	85 db                	test   ebx,ebx
c0001449:	75 10                	jne    c000145b <dlrealloc+0x23>
c000144b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000144f:	83 c4 1c             	add    esp,0x1c
c0001452:	5b                   	pop    ebx
c0001453:	5e                   	pop    esi
c0001454:	5f                   	pop    edi
c0001455:	5d                   	pop    ebp
c0001456:	e9 a0 fa ff ff       	jmp    c0000efb <dlmalloc>
c000145b:	83 f8 df             	cmp    eax,0xffffffdf
c000145e:	76 07                	jbe    c0001467 <dlrealloc+0x2f>
c0001460:	31 db                	xor    ebx,ebx
c0001462:	e9 7c 01 00 00       	jmp    c00015e3 <dlrealloc+0x1ab>
c0001467:	83 c0 0b             	add    eax,0xb
c000146a:	bf 10 00 00 00       	mov    edi,0x10
c000146f:	83 f8 0f             	cmp    eax,0xf
c0001472:	76 05                	jbe    c0001479 <dlrealloc+0x41>
c0001474:	83 e0 f8             	and    eax,0xfffffff8
c0001477:	89 c7                	mov    edi,eax
c0001479:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c000147c:	8d 6b f8             	lea    ebp,[ebx-0x8]
c000147f:	89 c6                	mov    esi,eax
c0001481:	83 e6 fc             	and    esi,0xfffffffc
c0001484:	a8 02                	test   al,0x2
c0001486:	75 d8                	jne    c0001460 <dlrealloc+0x28>
c0001488:	39 f7                	cmp    edi,esi
c000148a:	0f 86 15 01 00 00    	jbe    c00015a5 <dlrealloc+0x16d>
c0001490:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c0001494:	39 15 ac 41 02 c0    	cmp    DWORD PTR ds:0xc00241ac,edx
c000149a:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c000149d:	75 33                	jne    c00014d2 <dlrealloc+0x9a>
c000149f:	83 e1 fc             	and    ecx,0xfffffffc
c00014a2:	01 f1                	add    ecx,esi
c00014a4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00014a8:	8d 4f 10             	lea    ecx,[edi+0x10]
c00014ab:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00014af:	77 49                	ja     c00014fa <dlrealloc+0xc2>
c00014b1:	83 e0 01             	and    eax,0x1
c00014b4:	01 fd                	add    ebp,edi
c00014b6:	09 f8                	or     eax,edi
c00014b8:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00014bb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00014bf:	29 f8                	sub    eax,edi
c00014c1:	89 2d ac 41 02 c0    	mov    DWORD PTR ds:0xc00241ac,ebp
c00014c7:	83 c8 01             	or     eax,0x1
c00014ca:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00014cd:	e9 11 01 00 00       	jmp    c00015e3 <dlrealloc+0x1ab>
c00014d2:	89 c8                	mov    eax,ecx
c00014d4:	83 e0 fe             	and    eax,0xfffffffe
c00014d7:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00014dc:	75 1c                	jne    c00014fa <dlrealloc+0xc2>
c00014de:	83 e1 fc             	and    ecx,0xfffffffc
c00014e1:	01 f1                	add    ecx,esi
c00014e3:	39 cf                	cmp    edi,ecx
c00014e5:	77 13                	ja     c00014fa <dlrealloc+0xc2>
c00014e7:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00014ea:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00014ed:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00014f0:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00014f3:	89 ce                	mov    esi,ecx
c00014f5:	e9 ab 00 00 00       	jmp    c00015a5 <dlrealloc+0x16d>
c00014fa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00014fe:	83 ec 0c             	sub    esp,0xc
c0001501:	8d 47 f9             	lea    eax,[edi-0x7]
c0001504:	50                   	push   eax
c0001505:	e8 f1 f9 ff ff       	call   c0000efb <dlmalloc>
c000150a:	83 c4 10             	add    esp,0x10
c000150d:	89 c1                	mov    ecx,eax
c000150f:	85 c0                	test   eax,eax
c0001511:	0f 84 49 ff ff ff    	je     c0001460 <dlrealloc+0x28>
c0001517:	8d 40 f8             	lea    eax,[eax-0x8]
c000151a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000151e:	39 c2                	cmp    edx,eax
c0001520:	75 0a                	jne    c000152c <dlrealloc+0xf4>
c0001522:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001525:	83 e0 fc             	and    eax,0xfffffffc
c0001528:	01 c6                	add    esi,eax
c000152a:	eb 79                	jmp    c00015a5 <dlrealloc+0x16d>
c000152c:	83 ee 04             	sub    esi,0x4
c000152f:	83 fe 27             	cmp    esi,0x27
c0001532:	76 16                	jbe    c000154a <dlrealloc+0x112>
c0001534:	50                   	push   eax
c0001535:	56                   	push   esi
c0001536:	53                   	push   ebx
c0001537:	51                   	push   ecx
c0001538:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000153c:	e8 43 f1 ff ff       	call   c0000684 <memcpy>
c0001541:	83 c4 10             	add    esp,0x10
c0001544:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0001548:	eb 43                	jmp    c000158d <dlrealloc+0x155>
c000154a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000154c:	83 fe 13             	cmp    esi,0x13
c000154f:	89 01                	mov    DWORD PTR [ecx],eax
c0001551:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0001554:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
c0001557:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000155a:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000155d:	76 2e                	jbe    c000158d <dlrealloc+0x155>
c000155f:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001562:	83 fe 1b             	cmp    esi,0x1b
c0001565:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001568:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000156b:	89 41 10             	mov    DWORD PTR [ecx+0x10],eax
c000156e:	76 1d                	jbe    c000158d <dlrealloc+0x155>
c0001570:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0001573:	83 fe 23             	cmp    esi,0x23
c0001576:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0001579:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000157c:	89 41 18             	mov    DWORD PTR [ecx+0x18],eax
c000157f:	76 0c                	jbe    c000158d <dlrealloc+0x155>
c0001581:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0001584:	89 41 1c             	mov    DWORD PTR [ecx+0x1c],eax
c0001587:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c000158a:	89 41 20             	mov    DWORD PTR [ecx+0x20],eax
c000158d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001591:	83 ec 0c             	sub    esp,0xc
c0001594:	53                   	push   ebx
c0001595:	e8 03 f6 ff ff       	call   c0000b9d <dlfree>
c000159a:	83 c4 10             	add    esp,0x10
c000159d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00015a1:	89 cb                	mov    ebx,ecx
c00015a3:	eb 3e                	jmp    c00015e3 <dlrealloc+0x1ab>
c00015a5:	89 f2                	mov    edx,esi
c00015a7:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00015aa:	29 fa                	sub    edx,edi
c00015ac:	83 e1 01             	and    ecx,0x1
c00015af:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c00015b3:	83 fa 0f             	cmp    edx,0xf
c00015b6:	77 0b                	ja     c00015c3 <dlrealloc+0x18b>
c00015b8:	09 ce                	or     esi,ecx
c00015ba:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00015bd:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00015c1:	eb 20                	jmp    c00015e3 <dlrealloc+0x1ab>
c00015c3:	01 fd                	add    ebp,edi
c00015c5:	83 ca 01             	or     edx,0x1
c00015c8:	09 cf                	or     edi,ecx
c00015ca:	83 ec 0c             	sub    esp,0xc
c00015cd:	89 7b fc             	mov    DWORD PTR [ebx-0x4],edi
c00015d0:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c00015d3:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00015d7:	83 c5 08             	add    ebp,0x8
c00015da:	55                   	push   ebp
c00015db:	e8 bd f5 ff ff       	call   c0000b9d <dlfree>
c00015e0:	83 c4 10             	add    esp,0x10
c00015e3:	83 c4 1c             	add    esp,0x1c
c00015e6:	89 d8                	mov    eax,ebx
c00015e8:	5b                   	pop    ebx
c00015e9:	5e                   	pop    esi
c00015ea:	5f                   	pop    edi
c00015eb:	5d                   	pop    ebp
c00015ec:	c3                   	ret    

c00015ed <dlmemalign>:
c00015ed:	55                   	push   ebp
c00015ee:	57                   	push   edi
c00015ef:	56                   	push   esi
c00015f0:	53                   	push   ebx
c00015f1:	83 ec 0c             	sub    esp,0xc
c00015f4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00015f8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00015fc:	83 fa 08             	cmp    edx,0x8
c00015ff:	77 10                	ja     c0001611 <dlmemalign+0x24>
c0001601:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0001605:	83 c4 0c             	add    esp,0xc
c0001608:	5b                   	pop    ebx
c0001609:	5e                   	pop    esi
c000160a:	5f                   	pop    edi
c000160b:	5d                   	pop    ebp
c000160c:	e9 ea f8 ff ff       	jmp    c0000efb <dlmalloc>
c0001611:	bf 10 00 00 00       	mov    edi,0x10
c0001616:	83 fa 0f             	cmp    edx,0xf
c0001619:	76 13                	jbe    c000162e <dlmemalign+0x41>
c000161b:	8d 4a ff             	lea    ecx,[edx-0x1]
c000161e:	85 d1                	test   ecx,edx
c0001620:	75 04                	jne    c0001626 <dlmemalign+0x39>
c0001622:	89 d7                	mov    edi,edx
c0001624:	eb 08                	jmp    c000162e <dlmemalign+0x41>
c0001626:	39 d7                	cmp    edi,edx
c0001628:	73 04                	jae    c000162e <dlmemalign+0x41>
c000162a:	01 ff                	add    edi,edi
c000162c:	eb f8                	jmp    c0001626 <dlmemalign+0x39>
c000162e:	83 f8 df             	cmp    eax,0xffffffdf
c0001631:	76 07                	jbe    c000163a <dlmemalign+0x4d>
c0001633:	31 c0                	xor    eax,eax
c0001635:	e9 ce 00 00 00       	jmp    c0001708 <dlmemalign+0x11b>
c000163a:	83 c0 0b             	add    eax,0xb
c000163d:	bd 10 00 00 00       	mov    ebp,0x10
c0001642:	83 f8 0f             	cmp    eax,0xf
c0001645:	76 05                	jbe    c000164c <dlmemalign+0x5f>
c0001647:	83 e0 f8             	and    eax,0xfffffff8
c000164a:	89 c5                	mov    ebp,eax
c000164c:	83 ec 0c             	sub    esp,0xc
c000164f:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001653:	50                   	push   eax
c0001654:	e8 a2 f8 ff ff       	call   c0000efb <dlmalloc>
c0001659:	83 c4 10             	add    esp,0x10
c000165c:	89 c1                	mov    ecx,eax
c000165e:	85 c0                	test   eax,eax
c0001660:	74 d1                	je     c0001633 <dlmemalign+0x46>
c0001662:	31 d2                	xor    edx,edx
c0001664:	8d 70 f8             	lea    esi,[eax-0x8]
c0001667:	f7 f7                	div    edi
c0001669:	85 d2                	test   edx,edx
c000166b:	74 62                	je     c00016cf <dlmemalign+0xe2>
c000166d:	89 f8                	mov    eax,edi
c000166f:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001673:	f7 d8                	neg    eax
c0001675:	21 c3                	and    ebx,eax
c0001677:	83 eb 08             	sub    ebx,0x8
c000167a:	89 d8                	mov    eax,ebx
c000167c:	29 f0                	sub    eax,esi
c000167e:	83 f8 0f             	cmp    eax,0xf
c0001681:	77 02                	ja     c0001685 <dlmemalign+0x98>
c0001683:	01 fb                	add    ebx,edi
c0001685:	89 d8                	mov    eax,ebx
c0001687:	29 f0                	sub    eax,esi
c0001689:	89 c6                	mov    esi,eax
c000168b:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000168e:	89 c2                	mov    edx,eax
c0001690:	83 e2 fc             	and    edx,0xfffffffc
c0001693:	29 f2                	sub    edx,esi
c0001695:	a8 02                	test   al,0x2
c0001697:	74 10                	je     c00016a9 <dlmemalign+0xbc>
c0001699:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c000169c:	83 ca 02             	or     edx,0x2
c000169f:	8d 43 08             	lea    eax,[ebx+0x8]
c00016a2:	89 33                	mov    DWORD PTR [ebx],esi
c00016a4:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00016a7:	eb 5f                	jmp    c0001708 <dlmemalign+0x11b>
c00016a9:	89 d0                	mov    eax,edx
c00016ab:	83 ec 0c             	sub    esp,0xc
c00016ae:	83 c8 01             	or     eax,0x1
c00016b1:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00016b4:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00016b9:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00016bc:	83 e0 01             	and    eax,0x1
c00016bf:	09 f0                	or     eax,esi
c00016c1:	89 de                	mov    esi,ebx
c00016c3:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00016c6:	51                   	push   ecx
c00016c7:	e8 d1 f4 ff ff       	call   c0000b9d <dlfree>
c00016cc:	83 c4 10             	add    esp,0x10
c00016cf:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00016d2:	a8 02                	test   al,0x2
c00016d4:	75 2f                	jne    c0001705 <dlmemalign+0x118>
c00016d6:	83 e0 fc             	and    eax,0xfffffffc
c00016d9:	8d 55 10             	lea    edx,[ebp+0x10]
c00016dc:	39 c2                	cmp    edx,eax
c00016de:	73 25                	jae    c0001705 <dlmemalign+0x118>
c00016e0:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00016e3:	29 e8                	sub    eax,ebp
c00016e5:	83 c8 01             	or     eax,0x1
c00016e8:	83 ec 0c             	sub    esp,0xc
c00016eb:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00016ee:	83 c2 08             	add    edx,0x8
c00016f1:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00016f4:	83 e0 01             	and    eax,0x1
c00016f7:	09 c5                	or     ebp,eax
c00016f9:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00016fc:	52                   	push   edx
c00016fd:	e8 9b f4 ff ff       	call   c0000b9d <dlfree>
c0001702:	83 c4 10             	add    esp,0x10
c0001705:	8d 46 08             	lea    eax,[esi+0x8]
c0001708:	83 c4 0c             	add    esp,0xc
c000170b:	5b                   	pop    ebx
c000170c:	5e                   	pop    esi
c000170d:	5f                   	pop    edi
c000170e:	5d                   	pop    ebp
c000170f:	c3                   	ret    

c0001710 <dlcalloc>:
c0001710:	53                   	push   ebx
c0001711:	83 ec 14             	sub    esp,0x14
c0001714:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001718:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c000171d:	50                   	push   eax
c000171e:	e8 d8 f7 ff ff       	call   c0000efb <dlmalloc>
c0001723:	83 c4 10             	add    esp,0x10
c0001726:	89 c3                	mov    ebx,eax
c0001728:	85 c0                	test   eax,eax
c000172a:	74 77                	je     c00017a3 <dlcalloc+0x93>
c000172c:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c000172f:	89 d0                	mov    eax,edx
c0001731:	83 e0 fc             	and    eax,0xfffffffc
c0001734:	80 e2 02             	and    dl,0x2
c0001737:	75 5a                	jne    c0001793 <dlcalloc+0x83>
c0001739:	83 e8 04             	sub    eax,0x4
c000173c:	83 f8 27             	cmp    eax,0x27
c000173f:	76 03                	jbe    c0001744 <dlcalloc+0x34>
c0001741:	51                   	push   ecx
c0001742:	eb 53                	jmp    c0001797 <dlcalloc+0x87>
c0001744:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000174a:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001751:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001758:	83 f8 13             	cmp    eax,0x13
c000175b:	76 46                	jbe    c00017a3 <dlcalloc+0x93>
c000175d:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001764:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000176b:	83 f8 1b             	cmp    eax,0x1b
c000176e:	76 33                	jbe    c00017a3 <dlcalloc+0x93>
c0001770:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001777:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000177e:	83 f8 23             	cmp    eax,0x23
c0001781:	76 20                	jbe    c00017a3 <dlcalloc+0x93>
c0001783:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000178a:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001791:	eb 10                	jmp    c00017a3 <dlcalloc+0x93>
c0001793:	83 e8 08             	sub    eax,0x8
c0001796:	52                   	push   edx
c0001797:	50                   	push   eax
c0001798:	6a 00                	push   0x0
c000179a:	53                   	push   ebx
c000179b:	e8 1a ef ff ff       	call   c00006ba <memset>
c00017a0:	83 c4 10             	add    esp,0x10
c00017a3:	83 c4 08             	add    esp,0x8
c00017a6:	89 d8                	mov    eax,ebx
c00017a8:	5b                   	pop    ebx
c00017a9:	c3                   	ret    

c00017aa <dlcfree>:
c00017aa:	e9 ee f3 ff ff       	jmp    c0000b9d <dlfree>

c00017af <dlindependent_calloc>:
c00017af:	83 ec 28             	sub    esp,0x28
c00017b2:	b9 03 00 00 00       	mov    ecx,0x3
c00017b7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00017bb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00017bf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00017c3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00017c7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00017cb:	e8 b9 fa ff ff       	call   c0001289 <iALLOc>
c00017d0:	83 c4 2c             	add    esp,0x2c
c00017d3:	c3                   	ret    

c00017d4 <dlindependent_comalloc>:
c00017d4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00017d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00017dc:	31 c9                	xor    ecx,ecx
c00017de:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00017e2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00017e6:	e9 9e fa ff ff       	jmp    c0001289 <iALLOc>

c00017eb <dlvalloc>:
c00017eb:	83 ec 0c             	sub    esp,0xc
c00017ee:	83 3d 80 41 02 c0 00 	cmp    DWORD PTR ds:0xc0024180,0x0
c00017f5:	75 0a                	jne    c0001801 <dlvalloc+0x16>
c00017f7:	b8 80 41 02 c0       	mov    eax,0xc0024180
c00017fc:	e8 b5 f2 ff ff       	call   c0000ab6 <malloc_consolidate>
c0001801:	50                   	push   eax
c0001802:	50                   	push   eax
c0001803:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001807:	ff 35 dc 44 02 c0    	push   DWORD PTR ds:0xc00244dc
c000180d:	e8 db fd ff ff       	call   c00015ed <dlmemalign>
c0001812:	83 c4 1c             	add    esp,0x1c
c0001815:	c3                   	ret    

c0001816 <dlpvalloc>:
c0001816:	83 ec 0c             	sub    esp,0xc
c0001819:	83 3d 80 41 02 c0 00 	cmp    DWORD PTR ds:0xc0024180,0x0
c0001820:	75 0a                	jne    c000182c <dlpvalloc+0x16>
c0001822:	b8 80 41 02 c0       	mov    eax,0xc0024180
c0001827:	e8 8a f2 ff ff       	call   c0000ab6 <malloc_consolidate>
c000182c:	52                   	push   edx
c000182d:	a1 dc 44 02 c0       	mov    eax,ds:0xc00244dc
c0001832:	52                   	push   edx
c0001833:	89 c1                	mov    ecx,eax
c0001835:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001839:	f7 d9                	neg    ecx
c000183b:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c000183f:	21 ca                	and    edx,ecx
c0001841:	52                   	push   edx
c0001842:	50                   	push   eax
c0001843:	e8 a5 fd ff ff       	call   c00015ed <dlmemalign>
c0001848:	83 c4 1c             	add    esp,0x1c
c000184b:	c3                   	ret    

c000184c <dlmalloc_trim>:
c000184c:	b8 80 41 02 c0       	mov    eax,0xc0024180
c0001851:	e8 60 f2 ff ff       	call   c0000ab6 <malloc_consolidate>
c0001856:	31 c0                	xor    eax,eax
c0001858:	c3                   	ret    

c0001859 <dlmalloc_usable_size>:
c0001859:	53                   	push   ebx
c000185a:	31 c0                	xor    eax,eax
c000185c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001860:	85 c9                	test   ecx,ecx
c0001862:	74 24                	je     c0001888 <dlmalloc_usable_size+0x2f>
c0001864:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001867:	f6 c2 02             	test   dl,0x2
c000186a:	74 08                	je     c0001874 <dlmalloc_usable_size+0x1b>
c000186c:	83 e2 fc             	and    edx,0xfffffffc
c000186f:	8d 42 f8             	lea    eax,[edx-0x8]
c0001872:	eb 14                	jmp    c0001888 <dlmalloc_usable_size+0x2f>
c0001874:	89 d3                	mov    ebx,edx
c0001876:	31 c0                	xor    eax,eax
c0001878:	83 e3 fe             	and    ebx,0xfffffffe
c000187b:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001880:	74 06                	je     c0001888 <dlmalloc_usable_size+0x2f>
c0001882:	83 e2 fc             	and    edx,0xfffffffc
c0001885:	8d 42 fc             	lea    eax,[edx-0x4]
c0001888:	5b                   	pop    ebx
c0001889:	c3                   	ret    

c000188a <dlmallinfo>:
c000188a:	55                   	push   ebp
c000188b:	57                   	push   edi
c000188c:	56                   	push   esi
c000188d:	53                   	push   ebx
c000188e:	83 ec 08             	sub    esp,0x8
c0001891:	83 3d ac 41 02 c0 00 	cmp    DWORD PTR ds:0xc00241ac,0x0
c0001898:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000189c:	75 0a                	jne    c00018a8 <dlmallinfo+0x1e>
c000189e:	b8 80 41 02 c0       	mov    eax,0xc0024180
c00018a3:	e8 0e f2 ff ff       	call   c0000ab6 <malloc_consolidate>
c00018a8:	a1 ac 41 02 c0       	mov    eax,ds:0xc00241ac
c00018ad:	31 ed                	xor    ebp,ebp
c00018af:	31 c9                	xor    ecx,ecx
c00018b1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00018b4:	83 e0 fc             	and    eax,0xfffffffc
c00018b7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00018bb:	31 c0                	xor    eax,eax
c00018bd:	8b 14 85 84 41 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbe7c]
c00018c4:	85 d2                	test   edx,edx
c00018c6:	74 0e                	je     c00018d6 <dlmallinfo+0x4c>
c00018c8:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00018cb:	45                   	inc    ebp
c00018cc:	83 e6 fc             	and    esi,0xfffffffc
c00018cf:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00018d2:	01 f1                	add    ecx,esi
c00018d4:	eb ee                	jmp    c00018c4 <dlmallinfo+0x3a>
c00018d6:	40                   	inc    eax
c00018d7:	83 f8 0a             	cmp    eax,0xa
c00018da:	75 e1                	jne    c00018bd <dlmallinfo+0x33>
c00018dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018e0:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00018e7:	8d 14 01             	lea    edx,[ecx+eax*1]
c00018ea:	b8 b4 41 02 c0       	mov    eax,0xc00241b4
c00018ef:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c00018f2:	39 f0                	cmp    eax,esi
c00018f4:	74 10                	je     c0001906 <dlmallinfo+0x7c>
c00018f6:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c00018f9:	ff 04 24             	inc    DWORD PTR [esp]
c00018fc:	83 e7 fc             	and    edi,0xfffffffc
c00018ff:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001902:	01 fa                	add    edx,edi
c0001904:	eb ec                	jmp    c00018f2 <dlmallinfo+0x68>
c0001906:	83 c0 08             	add    eax,0x8
c0001909:	3d ac 44 02 c0       	cmp    eax,0xc00244ac
c000190e:	75 df                	jne    c00018ef <dlmallinfo+0x65>
c0001910:	a1 e8 44 02 c0       	mov    eax,ds:0xc00244e8
c0001915:	8b 35 d0 44 02 c0    	mov    esi,DWORD PTR ds:0xc00244d0
c000191b:	89 03                	mov    DWORD PTR [ebx],eax
c000191d:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001920:	29 d0                	sub    eax,edx
c0001922:	8b 35 e4 44 02 c0    	mov    esi,DWORD PTR ds:0xc00244e4
c0001928:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c000192b:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000192e:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001931:	8b 35 f4 44 02 c0    	mov    esi,DWORD PTR ds:0xc00244f4
c0001937:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000193b:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c000193e:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001941:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001944:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001947:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c000194a:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c000194d:	83 c4 08             	add    esp,0x8
c0001950:	89 d8                	mov    eax,ebx
c0001952:	5b                   	pop    ebx
c0001953:	5e                   	pop    esi
c0001954:	5f                   	pop    edi
c0001955:	5d                   	pop    ebp
c0001956:	c2 04 00             	ret    0x4

c0001959 <dlmalloc_stats>:
c0001959:	83 ec 30             	sub    esp,0x30
c000195c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001960:	50                   	push   eax
c0001961:	e8 24 ff ff ff       	call   c000188a <dlmallinfo>
c0001966:	83 c4 30             	add    esp,0x30
c0001969:	c3                   	ret    

c000196a <dlmallopt>:
c000196a:	56                   	push   esi
c000196b:	b8 80 41 02 c0       	mov    eax,0xc0024180
c0001970:	53                   	push   ebx
c0001971:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001975:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001979:	e8 38 f1 ff ff       	call   c0000ab6 <malloc_consolidate>
c000197e:	8d 46 04             	lea    eax,[esi+0x4]
c0001981:	83 f8 05             	cmp    eax,0x5
c0001984:	77 67                	ja     c00019ed <dlmallopt+0x83>
c0001986:	ff 24 85 e4 02 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdfd1c]
c000198d:	83 fb 50             	cmp    ebx,0x50
c0001990:	77 5b                	ja     c00019ed <dlmallopt+0x83>
c0001992:	ba 08 00 00 00       	mov    edx,0x8
c0001997:	85 db                	test   ebx,ebx
c0001999:	74 12                	je     c00019ad <dlmallopt+0x43>
c000199b:	83 c3 0b             	add    ebx,0xb
c000199e:	ba 10 00 00 00       	mov    edx,0x10
c00019a3:	83 fb 0f             	cmp    ebx,0xf
c00019a6:	76 05                	jbe    c00019ad <dlmallopt+0x43>
c00019a8:	89 da                	mov    edx,ebx
c00019aa:	83 e2 f8             	and    edx,0xfffffff8
c00019ad:	a1 80 41 02 c0       	mov    eax,ds:0xc0024180
c00019b2:	83 e0 03             	and    eax,0x3
c00019b5:	09 d0                	or     eax,edx
c00019b7:	a3 80 41 02 c0       	mov    ds:0xc0024180,eax
c00019bc:	eb 31                	jmp    c00019ef <dlmallopt+0x85>
c00019be:	89 1d c4 44 02 c0    	mov    DWORD PTR ds:0xc00244c4,ebx
c00019c4:	eb 06                	jmp    c00019cc <dlmallopt+0x62>
c00019c6:	89 1d c8 44 02 c0    	mov    DWORD PTR ds:0xc00244c8,ebx
c00019cc:	be 01 00 00 00       	mov    esi,0x1
c00019d1:	eb 1c                	jmp    c00019ef <dlmallopt+0x85>
c00019d3:	89 1d cc 44 02 c0    	mov    DWORD PTR ds:0xc00244cc,ebx
c00019d9:	eb f1                	jmp    c00019cc <dlmallopt+0x62>
c00019db:	31 f6                	xor    esi,esi
c00019dd:	85 db                	test   ebx,ebx
c00019df:	75 0e                	jne    c00019ef <dlmallopt+0x85>
c00019e1:	c7 05 d4 44 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00244d4,0x0
c00019eb:	eb df                	jmp    c00019cc <dlmallopt+0x62>
c00019ed:	31 f6                	xor    esi,esi
c00019ef:	5b                   	pop    ebx
c00019f0:	89 f0                	mov    eax,esi
c00019f2:	5e                   	pop    esi
c00019f3:	c3                   	ret    

c00019f4 <disk_status>:
c00019f4:	31 c0                	xor    eax,eax
c00019f6:	c3                   	ret    

c00019f7 <disk_initialize>:
c00019f7:	31 c0                	xor    eax,eax
c00019f9:	c3                   	ret    

c00019fa <disk_read>:
c00019fa:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00019ff:	0f b6 04 85 a0 5a 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffda560]
c0001a07:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a0b:	e9 90 8c 01 00       	jmp    c001a6a0 <fatWrapperReadDisk>

c0001a10 <disk_write>:
c0001a10:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001a15:	0f b6 04 85 a0 5a 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffda560]
c0001a1d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a21:	e9 c5 8c 01 00       	jmp    c001a6eb <fatWrapperWriteDisk>

c0001a26 <disk_ioctl>:
c0001a26:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001a2b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001a2f:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001a34:	0f b6 04 85 a0 5a 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffda560]
c0001a3c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a40:	e9 f1 8c 01 00       	jmp    c001a736 <fatWrapperIoctl>

c0001a45 <ld_word>:
c0001a45:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a49:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001a4c:	c1 e2 08             	shl    edx,0x8
c0001a4f:	09 d0                	or     eax,edx
c0001a51:	c3                   	ret    

c0001a52 <ld_dword>:
c0001a52:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001a56:	89 d1                	mov    ecx,edx
c0001a58:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a5c:	c1 e1 08             	shl    ecx,0x8
c0001a5f:	09 ca                	or     edx,ecx
c0001a61:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001a64:	c1 e2 08             	shl    edx,0x8
c0001a67:	09 d0                	or     eax,edx
c0001a69:	c3                   	ret    

c0001a6a <ld_qword>:
c0001a6a:	57                   	push   edi
c0001a6b:	56                   	push   esi
c0001a6c:	53                   	push   ebx
c0001a6d:	31 db                	xor    ebx,ebx
c0001a6f:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001a72:	89 df                	mov    edi,ebx
c0001a74:	89 ce                	mov    esi,ecx
c0001a76:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001a7a:	0f a4 f7 08          	shld   edi,esi,0x8
c0001a7e:	c1 e6 08             	shl    esi,0x8
c0001a81:	09 f2                	or     edx,esi
c0001a83:	89 d6                	mov    esi,edx
c0001a85:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001a89:	0f a4 f7 08          	shld   edi,esi,0x8
c0001a8d:	c1 e6 08             	shl    esi,0x8
c0001a90:	09 f2                	or     edx,esi
c0001a92:	89 d6                	mov    esi,edx
c0001a94:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a98:	0f a4 f7 08          	shld   edi,esi,0x8
c0001a9c:	c1 e6 08             	shl    esi,0x8
c0001a9f:	89 fb                	mov    ebx,edi
c0001aa1:	09 f2                	or     edx,esi
c0001aa3:	89 d1                	mov    ecx,edx
c0001aa5:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001aa9:	89 da                	mov    edx,ebx
c0001aab:	5b                   	pop    ebx
c0001aac:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001aaf:	c1 e1 08             	shl    ecx,0x8
c0001ab2:	5e                   	pop    esi
c0001ab3:	09 c8                	or     eax,ecx
c0001ab5:	5f                   	pop    edi
c0001ab6:	c3                   	ret    

c0001ab7 <st_word>:
c0001ab7:	66 89 10             	mov    WORD PTR [eax],dx
c0001aba:	c3                   	ret    

c0001abb <st_dword>:
c0001abb:	89 10                	mov    DWORD PTR [eax],edx
c0001abd:	c3                   	ret    

c0001abe <st_qword>:
c0001abe:	89 10                	mov    DWORD PTR [eax],edx
c0001ac0:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001ac3:	c3                   	ret    

c0001ac4 <mem_cpy>:
c0001ac4:	85 c9                	test   ecx,ecx
c0001ac6:	74 10                	je     c0001ad8 <mem_cpy+0x14>
c0001ac8:	57                   	push   edi
c0001ac9:	01 c1                	add    ecx,eax
c0001acb:	56                   	push   esi
c0001acc:	89 c7                	mov    edi,eax
c0001ace:	89 d6                	mov    esi,edx
c0001ad0:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001ad1:	39 f9                	cmp    ecx,edi
c0001ad3:	75 fb                	jne    c0001ad0 <mem_cpy+0xc>
c0001ad5:	5e                   	pop    esi
c0001ad6:	5f                   	pop    edi
c0001ad7:	c3                   	ret    
c0001ad8:	c3                   	ret    

c0001ad9 <mem_set>:
c0001ad9:	01 c1                	add    ecx,eax
c0001adb:	40                   	inc    eax
c0001adc:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001adf:	39 c8                	cmp    eax,ecx
c0001ae1:	75 f8                	jne    c0001adb <mem_set+0x2>
c0001ae3:	c3                   	ret    

c0001ae4 <mem_cmp>:
c0001ae4:	57                   	push   edi
c0001ae5:	56                   	push   esi
c0001ae6:	89 c6                	mov    esi,eax
c0001ae8:	53                   	push   ebx
c0001ae9:	46                   	inc    esi
c0001aea:	42                   	inc    edx
c0001aeb:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001aef:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001af3:	29 fb                	sub    ebx,edi
c0001af5:	89 cf                	mov    edi,ecx
c0001af7:	29 f7                	sub    edi,esi
c0001af9:	01 c7                	add    edi,eax
c0001afb:	74 04                	je     c0001b01 <mem_cmp+0x1d>
c0001afd:	85 db                	test   ebx,ebx
c0001aff:	74 e8                	je     c0001ae9 <mem_cmp+0x5>
c0001b01:	89 d8                	mov    eax,ebx
c0001b03:	5b                   	pop    ebx
c0001b04:	5e                   	pop    esi
c0001b05:	5f                   	pop    edi
c0001b06:	c3                   	ret    

c0001b07 <chk_chr>:
c0001b07:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001b0a:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001b0d:	74 07                	je     c0001b16 <chk_chr+0xf>
c0001b0f:	39 d1                	cmp    ecx,edx
c0001b11:	74 03                	je     c0001b16 <chk_chr+0xf>
c0001b13:	40                   	inc    eax
c0001b14:	eb f1                	jmp    c0001b07 <chk_chr>
c0001b16:	89 c8                	mov    eax,ecx
c0001b18:	c3                   	ret    

c0001b19 <dbc_1st>:
c0001b19:	31 c0                	xor    eax,eax
c0001b1b:	c3                   	ret    

c0001b1c <dbc_2nd>:
c0001b1c:	31 c0                	xor    eax,eax
c0001b1e:	c3                   	ret    

c0001b1f <tchar2uni>:
c0001b1f:	57                   	push   edi
c0001b20:	89 c7                	mov    edi,eax
c0001b22:	56                   	push   esi
c0001b23:	53                   	push   ebx
c0001b24:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001b26:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001b28:	8d 73 01             	lea    esi,[ebx+0x1]
c0001b2b:	84 c9                	test   cl,cl
c0001b2d:	78 0a                	js     c0001b39 <tchar2uni+0x1a>
c0001b2f:	0f b6 d1             	movzx  edx,cl
c0001b32:	89 f3                	mov    ebx,esi
c0001b34:	e9 9f 00 00 00       	jmp    c0001bd8 <tchar2uni+0xb9>
c0001b39:	88 ca                	mov    dl,cl
c0001b3b:	83 e2 e0             	and    edx,0xffffffe0
c0001b3e:	80 fa c0             	cmp    dl,0xc0
c0001b41:	75 0c                	jne    c0001b4f <tchar2uni+0x30>
c0001b43:	89 ca                	mov    edx,ecx
c0001b45:	b9 01 00 00 00       	mov    ecx,0x1
c0001b4a:	83 e2 1f             	and    edx,0x1f
c0001b4d:	eb 2e                	jmp    c0001b7d <tchar2uni+0x5e>
c0001b4f:	88 ca                	mov    dl,cl
c0001b51:	83 e2 f0             	and    edx,0xfffffff0
c0001b54:	80 fa e0             	cmp    dl,0xe0
c0001b57:	75 0c                	jne    c0001b65 <tchar2uni+0x46>
c0001b59:	89 ca                	mov    edx,ecx
c0001b5b:	b9 02 00 00 00       	mov    ecx,0x2
c0001b60:	83 e2 0f             	and    edx,0xf
c0001b63:	eb 18                	jmp    c0001b7d <tchar2uni+0x5e>
c0001b65:	88 ca                	mov    dl,cl
c0001b67:	83 e2 f8             	and    edx,0xfffffff8
c0001b6a:	88 d0                	mov    al,dl
c0001b6c:	83 ca ff             	or     edx,0xffffffff
c0001b6f:	3c f0                	cmp    al,0xf0
c0001b71:	75 6c                	jne    c0001bdf <tchar2uni+0xc0>
c0001b73:	89 ca                	mov    edx,ecx
c0001b75:	b9 03 00 00 00       	mov    ecx,0x3
c0001b7a:	83 e2 07             	and    edx,0x7
c0001b7d:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001b81:	46                   	inc    esi
c0001b82:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001b85:	88 c8                	mov    al,cl
c0001b87:	83 e0 c0             	and    eax,0xffffffc0
c0001b8a:	3c 80                	cmp    al,0x80
c0001b8c:	75 4e                	jne    c0001bdc <tchar2uni+0xbd>
c0001b8e:	c1 e2 06             	shl    edx,0x6
c0001b91:	83 e1 3f             	and    ecx,0x3f
c0001b94:	09 ca                	or     edx,ecx
c0001b96:	39 de                	cmp    esi,ebx
c0001b98:	75 e7                	jne    c0001b81 <tchar2uni+0x62>
c0001b9a:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001ba0:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001ba6:	76 34                	jbe    c0001bdc <tchar2uni+0xbd>
c0001ba8:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001bab:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001bb1:	77 29                	ja     c0001bdc <tchar2uni+0xbd>
c0001bb3:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001bb9:	76 1d                	jbe    c0001bd8 <tchar2uni+0xb9>
c0001bbb:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001bc1:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001bc7:	c1 e1 06             	shl    ecx,0x6
c0001bca:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001bd0:	09 ca                	or     edx,ecx
c0001bd2:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001bd8:	89 1f                	mov    DWORD PTR [edi],ebx
c0001bda:	eb 03                	jmp    c0001bdf <tchar2uni+0xc0>
c0001bdc:	83 ca ff             	or     edx,0xffffffff
c0001bdf:	5b                   	pop    ebx
c0001be0:	89 d0                	mov    eax,edx
c0001be2:	5e                   	pop    esi
c0001be3:	5f                   	pop    edi
c0001be4:	c3                   	ret    

c0001be5 <put_utf>:
c0001be5:	53                   	push   ebx
c0001be6:	83 f8 7f             	cmp    eax,0x7f
c0001be9:	89 c3                	mov    ebx,eax
c0001beb:	b0 00                	mov    al,0x0
c0001bed:	77 11                	ja     c0001c00 <put_utf+0x1b>
c0001bef:	85 c9                	test   ecx,ecx
c0001bf1:	0f 84 e5 00 00 00    	je     c0001cdc <put_utf+0xf7>
c0001bf7:	88 1a                	mov    BYTE PTR [edx],bl
c0001bf9:	b0 01                	mov    al,0x1
c0001bfb:	e9 dc 00 00 00       	jmp    c0001cdc <put_utf+0xf7>
c0001c00:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001c06:	77 23                	ja     c0001c2b <put_utf+0x46>
c0001c08:	83 f9 01             	cmp    ecx,0x1
c0001c0b:	0f 86 cb 00 00 00    	jbe    c0001cdc <put_utf+0xf7>
c0001c11:	89 d8                	mov    eax,ebx
c0001c13:	83 e3 3f             	and    ebx,0x3f
c0001c16:	c1 e8 06             	shr    eax,0x6
c0001c19:	83 cb 80             	or     ebx,0xffffff80
c0001c1c:	83 c8 c0             	or     eax,0xffffffc0
c0001c1f:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001c22:	88 02                	mov    BYTE PTR [edx],al
c0001c24:	b0 02                	mov    al,0x2
c0001c26:	e9 b1 00 00 00       	jmp    c0001cdc <put_utf+0xf7>
c0001c2b:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001c31:	77 40                	ja     c0001c73 <put_utf+0x8e>
c0001c33:	83 f9 02             	cmp    ecx,0x2
c0001c36:	0f 86 a0 00 00 00    	jbe    c0001cdc <put_utf+0xf7>
c0001c3c:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001c42:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001c48:	0f 86 8e 00 00 00    	jbe    c0001cdc <put_utf+0xf7>
c0001c4e:	89 d8                	mov    eax,ebx
c0001c50:	c1 e8 0c             	shr    eax,0xc
c0001c53:	83 c8 e0             	or     eax,0xffffffe0
c0001c56:	88 02                	mov    BYTE PTR [edx],al
c0001c58:	89 d8                	mov    eax,ebx
c0001c5a:	c1 e8 06             	shr    eax,0x6
c0001c5d:	83 e3 3f             	and    ebx,0x3f
c0001c60:	83 e0 3f             	and    eax,0x3f
c0001c63:	83 cb 80             	or     ebx,0xffffff80
c0001c66:	83 c8 80             	or     eax,0xffffff80
c0001c69:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001c6c:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001c6f:	b0 03                	mov    al,0x3
c0001c71:	eb 69                	jmp    c0001cdc <put_utf+0xf7>
c0001c73:	83 f9 03             	cmp    ecx,0x3
c0001c76:	76 64                	jbe    c0001cdc <put_utf+0xf7>
c0001c78:	89 d9                	mov    ecx,ebx
c0001c7a:	66 31 c9             	xor    cx,cx
c0001c7d:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001c83:	0f b7 c3             	movzx  eax,bx
c0001c86:	c1 e9 06             	shr    ecx,0x6
c0001c89:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001c8f:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001c95:	77 43                	ja     c0001cda <put_utf+0xf5>
c0001c97:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001c9d:	77 3b                	ja     c0001cda <put_utf+0xf5>
c0001c9f:	09 cb                	or     ebx,ecx
c0001ca1:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001ca7:	89 d8                	mov    eax,ebx
c0001ca9:	c1 e8 12             	shr    eax,0x12
c0001cac:	83 c8 f0             	or     eax,0xfffffff0
c0001caf:	88 02                	mov    BYTE PTR [edx],al
c0001cb1:	89 d8                	mov    eax,ebx
c0001cb3:	c1 e8 0c             	shr    eax,0xc
c0001cb6:	83 e0 3f             	and    eax,0x3f
c0001cb9:	83 c8 80             	or     eax,0xffffff80
c0001cbc:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001cbf:	89 d8                	mov    eax,ebx
c0001cc1:	c1 e8 06             	shr    eax,0x6
c0001cc4:	83 e3 3f             	and    ebx,0x3f
c0001cc7:	83 e0 3f             	and    eax,0x3f
c0001cca:	83 cb 80             	or     ebx,0xffffff80
c0001ccd:	83 c8 80             	or     eax,0xffffff80
c0001cd0:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001cd3:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001cd6:	b0 04                	mov    al,0x4
c0001cd8:	eb 02                	jmp    c0001cdc <put_utf+0xf7>
c0001cda:	31 c0                	xor    eax,eax
c0001cdc:	5b                   	pop    ebx
c0001cdd:	c3                   	ret    

c0001cde <clst2sect>:
c0001cde:	89 c1                	mov    ecx,eax
c0001ce0:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001ce3:	83 ea 02             	sub    edx,0x2
c0001ce6:	83 e8 02             	sub    eax,0x2
c0001ce9:	39 d0                	cmp    eax,edx
c0001ceb:	76 0d                	jbe    c0001cfa <clst2sect+0x1c>
c0001ced:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001cf1:	f7 e2                	mul    edx
c0001cf3:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001cf6:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001cf9:	c3                   	ret    
c0001cfa:	31 c0                	xor    eax,eax
c0001cfc:	31 d2                	xor    edx,edx
c0001cfe:	c3                   	ret    

c0001cff <clmt_clust>:
c0001cff:	57                   	push   edi
c0001d00:	89 cf                	mov    edi,ecx
c0001d02:	56                   	push   esi
c0001d03:	89 d6                	mov    esi,edx
c0001d05:	53                   	push   ebx
c0001d06:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001d09:	8b 00                	mov    eax,DWORD PTR [eax]
c0001d0b:	0f ac fe 09          	shrd   esi,edi,0x9
c0001d0f:	c1 ef 09             	shr    edi,0x9
c0001d12:	89 f2                	mov    edx,esi
c0001d14:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001d17:	89 f9                	mov    ecx,edi
c0001d19:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001d1d:	31 ff                	xor    edi,edi
c0001d1f:	57                   	push   edi
c0001d20:	56                   	push   esi
c0001d21:	51                   	push   ecx
c0001d22:	52                   	push   edx
c0001d23:	e8 a4 d6 01 00       	call   c001f3cc <__udivdi3>
c0001d28:	83 c4 10             	add    esp,0x10
c0001d2b:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001d2d:	85 d2                	test   edx,edx
c0001d2f:	74 10                	je     c0001d41 <clmt_clust+0x42>
c0001d31:	39 d0                	cmp    eax,edx
c0001d33:	72 07                	jb     c0001d3c <clmt_clust+0x3d>
c0001d35:	29 d0                	sub    eax,edx
c0001d37:	83 c3 08             	add    ebx,0x8
c0001d3a:	eb ef                	jmp    c0001d2b <clmt_clust+0x2c>
c0001d3c:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001d3f:	89 c2                	mov    edx,eax
c0001d41:	5b                   	pop    ebx
c0001d42:	89 d0                	mov    eax,edx
c0001d44:	5e                   	pop    esi
c0001d45:	5f                   	pop    edi
c0001d46:	c3                   	ret    

c0001d47 <pick_lfn>:
c0001d47:	55                   	push   ebp
c0001d48:	57                   	push   edi
c0001d49:	56                   	push   esi
c0001d4a:	89 d6                	mov    esi,edx
c0001d4c:	53                   	push   ebx
c0001d4d:	89 c3                	mov    ebx,eax
c0001d4f:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001d52:	e8 ee fc ff ff       	call   c0001a45 <ld_word>
c0001d57:	66 85 c0             	test   ax,ax
c0001d5a:	74 04                	je     c0001d60 <pick_lfn+0x19>
c0001d5c:	31 c0                	xor    eax,eax
c0001d5e:	eb 5c                	jmp    c0001dbc <pick_lfn+0x75>
c0001d60:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001d63:	83 e1 bf             	and    ecx,0xffffffbf
c0001d66:	bd 01 00 00 00       	mov    ebp,0x1
c0001d6b:	49                   	dec    ecx
c0001d6c:	31 ff                	xor    edi,edi
c0001d6e:	6b c9 0d             	imul   ecx,ecx,0xd
c0001d71:	0f b6 87 00 04 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffdfc00]
c0001d78:	01 f0                	add    eax,esi
c0001d7a:	e8 c6 fc ff ff       	call   c0001a45 <ld_word>
c0001d7f:	66 85 ed             	test   bp,bp
c0001d82:	74 11                	je     c0001d95 <pick_lfn+0x4e>
c0001d84:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001d8a:	77 d0                	ja     c0001d5c <pick_lfn+0x15>
c0001d8c:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001d90:	89 c5                	mov    ebp,eax
c0001d92:	41                   	inc    ecx
c0001d93:	eb 04                	jmp    c0001d99 <pick_lfn+0x52>
c0001d95:	66 40                	inc    ax
c0001d97:	75 c3                	jne    c0001d5c <pick_lfn+0x15>
c0001d99:	47                   	inc    edi
c0001d9a:	83 ff 0d             	cmp    edi,0xd
c0001d9d:	75 d2                	jne    c0001d71 <pick_lfn+0x2a>
c0001d9f:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001da2:	74 13                	je     c0001db7 <pick_lfn+0x70>
c0001da4:	66 85 ed             	test   bp,bp
c0001da7:	74 0e                	je     c0001db7 <pick_lfn+0x70>
c0001da9:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001daf:	77 ab                	ja     c0001d5c <pick_lfn+0x15>
c0001db1:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001db7:	b8 01 00 00 00       	mov    eax,0x1
c0001dbc:	5b                   	pop    ebx
c0001dbd:	5e                   	pop    esi
c0001dbe:	5f                   	pop    edi
c0001dbf:	5d                   	pop    ebp
c0001dc0:	c3                   	ret    

c0001dc1 <put_lfn>:
c0001dc1:	55                   	push   ebp
c0001dc2:	31 ed                	xor    ebp,ebp
c0001dc4:	57                   	push   edi
c0001dc5:	89 d7                	mov    edi,edx
c0001dc7:	56                   	push   esi
c0001dc8:	31 f6                	xor    esi,esi
c0001dca:	53                   	push   ebx
c0001dcb:	83 ec 08             	sub    esp,0x8
c0001dce:	89 04 24             	mov    DWORD PTR [esp],eax
c0001dd1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001dd5:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001dd8:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001dde:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001de1:	31 d2                	xor    edx,edx
c0001de3:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001de7:	e8 cb fc ff ff       	call   c0001ab7 <st_word>
c0001dec:	0f b6 d9             	movzx  ebx,cl
c0001def:	4b                   	dec    ebx
c0001df0:	6b db 0d             	imul   ebx,ebx,0xd
c0001df3:	66 83 fe ff          	cmp    si,0xffff
c0001df7:	74 08                	je     c0001e01 <put_lfn+0x40>
c0001df9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001dfc:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001e00:	43                   	inc    ebx
c0001e01:	0f b6 85 00 04 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffdfc00]
c0001e08:	0f b7 d6             	movzx  edx,si
c0001e0b:	01 f8                	add    eax,edi
c0001e0d:	e8 a5 fc ff ff       	call   c0001ab7 <st_word>
c0001e12:	66 85 f6             	test   si,si
c0001e15:	75 03                	jne    c0001e1a <put_lfn+0x59>
c0001e17:	83 ce ff             	or     esi,0xffffffff
c0001e1a:	45                   	inc    ebp
c0001e1b:	83 fd 0d             	cmp    ebp,0xd
c0001e1e:	75 d3                	jne    c0001df3 <put_lfn+0x32>
c0001e20:	66 46                	inc    si
c0001e22:	74 0a                	je     c0001e2e <put_lfn+0x6d>
c0001e24:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001e27:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0001e2c:	75 09                	jne    c0001e37 <put_lfn+0x76>
c0001e2e:	88 c8                	mov    al,cl
c0001e30:	83 c8 40             	or     eax,0x40
c0001e33:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0001e37:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0001e3b:	88 07                	mov    BYTE PTR [edi],al
c0001e3d:	83 c4 08             	add    esp,0x8
c0001e40:	5b                   	pop    ebx
c0001e41:	5e                   	pop    esi
c0001e42:	5f                   	pop    edi
c0001e43:	5d                   	pop    ebp
c0001e44:	c3                   	ret    

c0001e45 <gen_numname>:
c0001e45:	57                   	push   edi
c0001e46:	89 cf                	mov    edi,ecx
c0001e48:	56                   	push   esi
c0001e49:	b9 0b 00 00 00       	mov    ecx,0xb
c0001e4e:	53                   	push   ebx
c0001e4f:	89 c6                	mov    esi,eax
c0001e51:	83 ec 10             	sub    esp,0x10
c0001e54:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0001e58:	e8 67 fc ff ff       	call   c0001ac4 <mem_cpy>
c0001e5d:	83 fb 05             	cmp    ebx,0x5
c0001e60:	76 2d                	jbe    c0001e8f <gen_numname+0x4a>
c0001e62:	66 8b 07             	mov    ax,WORD PTR [edi]
c0001e65:	66 85 c0             	test   ax,ax
c0001e68:	74 25                	je     c0001e8f <gen_numname+0x4a>
c0001e6a:	83 c7 02             	add    edi,0x2
c0001e6d:	ba 10 00 00 00       	mov    edx,0x10
c0001e72:	89 c1                	mov    ecx,eax
c0001e74:	01 db                	add    ebx,ebx
c0001e76:	66 d1 e8             	shr    ax,1
c0001e79:	83 e1 01             	and    ecx,0x1
c0001e7c:	01 cb                	add    ebx,ecx
c0001e7e:	0f ba e3 10          	bt     ebx,0x10
c0001e82:	73 06                	jae    c0001e8a <gen_numname+0x45>
c0001e84:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0001e8a:	4a                   	dec    edx
c0001e8b:	75 e5                	jne    c0001e72 <gen_numname+0x2d>
c0001e8d:	eb d3                	jmp    c0001e62 <gen_numname+0x1d>
c0001e8f:	b8 07 00 00 00       	mov    eax,0x7
c0001e94:	88 d9                	mov    cl,bl
c0001e96:	83 e1 0f             	and    ecx,0xf
c0001e99:	8d 51 30             	lea    edx,[ecx+0x30]
c0001e9c:	80 fa 39             	cmp    dl,0x39
c0001e9f:	76 03                	jbe    c0001ea4 <gen_numname+0x5f>
c0001ea1:	8d 51 37             	lea    edx,[ecx+0x37]
c0001ea4:	8d 48 ff             	lea    ecx,[eax-0x1]
c0001ea7:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0001eab:	89 da                	mov    edx,ebx
c0001ead:	c1 ea 04             	shr    edx,0x4
c0001eb0:	83 fb 0f             	cmp    ebx,0xf
c0001eb3:	76 06                	jbe    c0001ebb <gen_numname+0x76>
c0001eb5:	89 c8                	mov    eax,ecx
c0001eb7:	89 d3                	mov    ebx,edx
c0001eb9:	eb d9                	jmp    c0001e94 <gen_numname+0x4f>
c0001ebb:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0001ec0:	31 d2                	xor    edx,edx
c0001ec2:	8d 58 fe             	lea    ebx,[eax-0x2]
c0001ec5:	8d 04 16             	lea    eax,[esi+edx*1]
c0001ec8:	39 ca                	cmp    edx,ecx
c0001eca:	73 18                	jae    c0001ee4 <gen_numname+0x9f>
c0001ecc:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001ecf:	3c 20                	cmp    al,0x20
c0001ed1:	74 11                	je     c0001ee4 <gen_numname+0x9f>
c0001ed3:	e8 41 fc ff ff       	call   c0001b19 <dbc_1st>
c0001ed8:	85 c0                	test   eax,eax
c0001eda:	74 05                	je     c0001ee1 <gen_numname+0x9c>
c0001edc:	39 d3                	cmp    ebx,edx
c0001ede:	74 04                	je     c0001ee4 <gen_numname+0x9f>
c0001ee0:	42                   	inc    edx
c0001ee1:	42                   	inc    edx
c0001ee2:	eb e1                	jmp    c0001ec5 <gen_numname+0x80>
c0001ee4:	b0 20                	mov    al,0x20
c0001ee6:	83 f9 07             	cmp    ecx,0x7
c0001ee9:	77 05                	ja     c0001ef0 <gen_numname+0xab>
c0001eeb:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0001eef:	41                   	inc    ecx
c0001ef0:	42                   	inc    edx
c0001ef1:	83 fa 07             	cmp    edx,0x7
c0001ef4:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0001ef8:	76 ea                	jbe    c0001ee4 <gen_numname+0x9f>
c0001efa:	83 c4 10             	add    esp,0x10
c0001efd:	5b                   	pop    ebx
c0001efe:	5e                   	pop    esi
c0001eff:	5f                   	pop    edi
c0001f00:	c3                   	ret    

c0001f01 <sum_sfn>:
c0001f01:	31 c9                	xor    ecx,ecx
c0001f03:	31 d2                	xor    edx,edx
c0001f05:	d0 ca                	ror    dl,1
c0001f07:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0001f0a:	41                   	inc    ecx
c0001f0b:	83 f9 0b             	cmp    ecx,0xb
c0001f0e:	75 f5                	jne    c0001f05 <sum_sfn+0x4>
c0001f10:	88 d0                	mov    al,dl
c0001f12:	c3                   	ret    

c0001f13 <xdir_sum>:
c0001f13:	56                   	push   esi
c0001f14:	31 c9                	xor    ecx,ecx
c0001f16:	53                   	push   ebx
c0001f17:	31 d2                	xor    edx,edx
c0001f19:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0001f1d:	43                   	inc    ebx
c0001f1e:	c1 e3 05             	shl    ebx,0x5
c0001f21:	83 fa 02             	cmp    edx,0x2
c0001f24:	74 0b                	je     c0001f31 <xdir_sum+0x1e>
c0001f26:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0001f2a:	66 d1 c9             	ror    cx,1
c0001f2d:	01 f1                	add    ecx,esi
c0001f2f:	eb 05                	jmp    c0001f36 <xdir_sum+0x23>
c0001f31:	ba 03 00 00 00       	mov    edx,0x3
c0001f36:	42                   	inc    edx
c0001f37:	39 d3                	cmp    ebx,edx
c0001f39:	77 e6                	ja     c0001f21 <xdir_sum+0xe>
c0001f3b:	5b                   	pop    ebx
c0001f3c:	89 c8                	mov    eax,ecx
c0001f3e:	5e                   	pop    esi
c0001f3f:	c3                   	ret    

c0001f40 <xsum32>:
c0001f40:	d1 ca                	ror    edx,1
c0001f42:	0f b6 c0             	movzx  eax,al
c0001f45:	01 d0                	add    eax,edx
c0001f47:	c3                   	ret    

c0001f48 <get_xfileinfo>:
c0001f48:	55                   	push   ebp
c0001f49:	31 c9                	xor    ecx,ecx
c0001f4b:	57                   	push   edi
c0001f4c:	bd 40 00 00 00       	mov    ebp,0x40
c0001f51:	56                   	push   esi
c0001f52:	31 ff                	xor    edi,edi
c0001f54:	53                   	push   ebx
c0001f55:	89 c6                	mov    esi,eax
c0001f57:	83 ec 0c             	sub    esp,0xc
c0001f5a:	89 d3                	mov    ebx,edx
c0001f5c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0001f63:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0001f67:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0001f6a:	76 6d                	jbe    c0001fd9 <get_xfileinfo+0x91>
c0001f6c:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0001f72:	76 0b                	jbe    c0001f7f <get_xfileinfo+0x37>
c0001f74:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0001f78:	bf 01 00 00 00       	mov    edi,0x1
c0001f7d:	eb 63                	jmp    c0001fe2 <get_xfileinfo+0x9a>
c0001f7f:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0001f85:	75 03                	jne    c0001f8a <get_xfileinfo+0x42>
c0001f87:	83 c5 02             	add    ebp,0x2
c0001f8a:	8d 04 2e             	lea    eax,[esi+ebp*1]
c0001f8d:	83 c5 02             	add    ebp,0x2
c0001f90:	e8 b0 fa ff ff       	call   c0001a45 <ld_word>
c0001f95:	ff 04 24             	inc    DWORD PTR [esp]
c0001f98:	66 85 c9             	test   cx,cx
c0001f9b:	75 0d                	jne    c0001faa <get_xfileinfo+0x62>
c0001f9d:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0001fa3:	66 81 fa ff 07       	cmp    dx,0x7ff
c0001fa8:	76 2b                	jbe    c0001fd5 <get_xfileinfo+0x8d>
c0001faa:	c1 e1 10             	shl    ecx,0x10
c0001fad:	ba ff 00 00 00       	mov    edx,0xff
c0001fb2:	29 fa                	sub    edx,edi
c0001fb4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001fb8:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0001fbc:	0f b7 c0             	movzx  eax,ax
c0001fbf:	09 c8                	or     eax,ecx
c0001fc1:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001fc5:	e8 1b fc ff ff       	call   c0001be5 <put_utf>
c0001fca:	84 c0                	test   al,al
c0001fcc:	74 a6                	je     c0001f74 <get_xfileinfo+0x2c>
c0001fce:	0f b6 c0             	movzx  eax,al
c0001fd1:	01 c7                	add    edi,eax
c0001fd3:	31 c0                	xor    eax,eax
c0001fd5:	89 c1                	mov    ecx,eax
c0001fd7:	eb 8a                	jmp    c0001f63 <get_xfileinfo+0x1b>
c0001fd9:	85 ff                	test   edi,edi
c0001fdb:	74 97                	je     c0001f74 <get_xfileinfo+0x2c>
c0001fdd:	66 85 c9             	test   cx,cx
c0001fe0:	75 92                	jne    c0001f74 <get_xfileinfo+0x2c>
c0001fe2:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0001fe7:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0001feb:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c0001fee:	31 c0                	xor    eax,eax
c0001ff0:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c0001ff3:	31 d2                	xor    edx,edx
c0001ff5:	80 e1 10             	and    cl,0x10
c0001ff8:	75 08                	jne    c0002002 <get_xfileinfo+0xba>
c0001ffa:	8d 46 38             	lea    eax,[esi+0x38]
c0001ffd:	e8 68 fa ff ff       	call   c0001a6a <ld_qword>
c0002002:	89 03                	mov    DWORD PTR [ebx],eax
c0002004:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0002007:	8d 46 0c             	lea    eax,[esi+0xc]
c000200a:	e8 36 fa ff ff       	call   c0001a45 <ld_word>
c000200f:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0002013:	8d 46 0e             	lea    eax,[esi+0xe]
c0002016:	e8 2a fa ff ff       	call   c0001a45 <ld_word>
c000201b:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c000201f:	83 c4 0c             	add    esp,0xc
c0002022:	5b                   	pop    ebx
c0002023:	5e                   	pop    esi
c0002024:	5f                   	pop    edi
c0002025:	5d                   	pop    ebp
c0002026:	c3                   	ret    

c0002027 <get_ldnumber>:
c0002027:	57                   	push   edi
c0002028:	56                   	push   esi
c0002029:	53                   	push   ebx
c000202a:	83 cb ff             	or     ebx,0xffffffff
c000202d:	8b 10                	mov    edx,DWORD PTR [eax]
c000202f:	85 d2                	test   edx,edx
c0002031:	74 34                	je     c0002067 <get_ldnumber+0x40>
c0002033:	89 c7                	mov    edi,eax
c0002035:	89 d1                	mov    ecx,edx
c0002037:	41                   	inc    ecx
c0002038:	8a 41 ff             	mov    al,BYTE PTR [ecx-0x1]
c000203b:	3c 1f                	cmp    al,0x1f
c000203d:	76 04                	jbe    c0002043 <get_ldnumber+0x1c>
c000203f:	3c 3a                	cmp    al,0x3a
c0002041:	75 f4                	jne    c0002037 <get_ldnumber+0x10>
c0002043:	31 db                	xor    ebx,ebx
c0002045:	3c 3a                	cmp    al,0x3a
c0002047:	75 1e                	jne    c0002067 <get_ldnumber+0x40>
c0002049:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c000204c:	83 cb ff             	or     ebx,0xffffffff
c000204f:	8d 46 d0             	lea    eax,[esi-0x30]
c0002052:	3c 09                	cmp    al,0x9
c0002054:	77 11                	ja     c0002067 <get_ldnumber+0x40>
c0002056:	83 c2 02             	add    edx,0x2
c0002059:	39 d1                	cmp    ecx,edx
c000205b:	75 0a                	jne    c0002067 <get_ldnumber+0x40>
c000205d:	89 f0                	mov    eax,esi
c000205f:	89 0f                	mov    DWORD PTR [edi],ecx
c0002061:	0f be d8             	movsx  ebx,al
c0002064:	83 eb 30             	sub    ebx,0x30
c0002067:	89 d8                	mov    eax,ebx
c0002069:	5b                   	pop    ebx
c000206a:	5e                   	pop    esi
c000206b:	5f                   	pop    edi
c000206c:	c3                   	ret    

c000206d <crc32>:
c000206d:	56                   	push   esi
c000206e:	89 d6                	mov    esi,edx
c0002070:	53                   	push   ebx
c0002071:	b2 01                	mov    dl,0x1
c0002073:	bb 08 00 00 00       	mov    ebx,0x8
c0002078:	89 f1                	mov    ecx,esi
c000207a:	84 d1                	test   cl,dl
c000207c:	0f 95 c1             	setne  cl
c000207f:	0f b6 c9             	movzx  ecx,cl
c0002082:	31 c1                	xor    ecx,eax
c0002084:	89 c8                	mov    eax,ecx
c0002086:	d1 e8                	shr    eax,1
c0002088:	80 e1 01             	and    cl,0x1
c000208b:	74 05                	je     c0002092 <crc32+0x25>
c000208d:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0002092:	01 d2                	add    edx,edx
c0002094:	4b                   	dec    ebx
c0002095:	75 e1                	jne    c0002078 <crc32+0xb>
c0002097:	5b                   	pop    ebx
c0002098:	5e                   	pop    esi
c0002099:	c3                   	ret    

c000209a <test_gpt_header>:
c000209a:	55                   	push   ebp
c000209b:	b9 10 00 00 00       	mov    ecx,0x10
c00020a0:	57                   	push   edi
c00020a1:	ba 00 03 02 c0       	mov    edx,0xc0020300
c00020a6:	56                   	push   esi
c00020a7:	31 ff                	xor    edi,edi
c00020a9:	53                   	push   ebx
c00020aa:	89 c3                	mov    ebx,eax
c00020ac:	e8 33 fa ff ff       	call   c0001ae4 <mem_cmp>
c00020b1:	85 c0                	test   eax,eax
c00020b3:	75 55                	jne    c000210a <test_gpt_header+0x70>
c00020b5:	89 c7                	mov    edi,eax
c00020b7:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00020bc:	83 ce ff             	or     esi,0xffffffff
c00020bf:	31 d2                	xor    edx,edx
c00020c1:	83 fd 03             	cmp    ebp,0x3
c00020c4:	76 05                	jbe    c00020cb <test_gpt_header+0x31>
c00020c6:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00020cb:	89 f0                	mov    eax,esi
c00020cd:	45                   	inc    ebp
c00020ce:	e8 9a ff ff ff       	call   c000206d <crc32>
c00020d3:	83 fd 4c             	cmp    ebp,0x4c
c00020d6:	89 c6                	mov    esi,eax
c00020d8:	75 e5                	jne    c00020bf <test_gpt_header+0x25>
c00020da:	8d 43 10             	lea    eax,[ebx+0x10]
c00020dd:	e8 70 f9 ff ff       	call   c0001a52 <ld_dword>
c00020e2:	f7 d6                	not    esi
c00020e4:	39 c6                	cmp    esi,eax
c00020e6:	75 22                	jne    c000210a <test_gpt_header+0x70>
c00020e8:	8d 43 54             	lea    eax,[ebx+0x54]
c00020eb:	e8 62 f9 ff ff       	call   c0001a52 <ld_dword>
c00020f0:	83 c0 80             	add    eax,0xffffff80
c00020f3:	75 15                	jne    c000210a <test_gpt_header+0x70>
c00020f5:	8d 43 50             	lea    eax,[ebx+0x50]
c00020f8:	e8 55 f9 ff ff       	call   c0001a52 <ld_dword>
c00020fd:	3d 80 00 00 00       	cmp    eax,0x80
c0002102:	0f 96 c0             	setbe  al
c0002105:	0f b6 c0             	movzx  eax,al
c0002108:	89 c7                	mov    edi,eax
c000210a:	5b                   	pop    ebx
c000210b:	89 f8                	mov    eax,edi
c000210d:	5e                   	pop    esi
c000210e:	5f                   	pop    edi
c000210f:	5d                   	pop    ebp
c0002110:	c3                   	ret    

c0002111 <make_rand>:
c0002111:	56                   	push   esi
c0002112:	85 c0                	test   eax,eax
c0002114:	53                   	push   ebx
c0002115:	75 05                	jne    c000211c <make_rand+0xb>
c0002117:	b8 01 00 00 00       	mov    eax,0x1
c000211c:	01 d1                	add    ecx,edx
c000211e:	bb 08 00 00 00       	mov    ebx,0x8
c0002123:	89 c6                	mov    esi,eax
c0002125:	d1 e8                	shr    eax,1
c0002127:	83 e6 01             	and    esi,0x1
c000212a:	85 f6                	test   esi,esi
c000212c:	74 05                	je     c0002133 <make_rand+0x22>
c000212e:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002133:	4b                   	dec    ebx
c0002134:	75 ed                	jne    c0002123 <make_rand+0x12>
c0002136:	42                   	inc    edx
c0002137:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c000213a:	39 ca                	cmp    edx,ecx
c000213c:	75 e0                	jne    c000211e <make_rand+0xd>
c000213e:	5b                   	pop    ebx
c000213f:	5e                   	pop    esi
c0002140:	c3                   	ret    

c0002141 <validate>:
c0002141:	56                   	push   esi
c0002142:	89 d6                	mov    esi,edx
c0002144:	53                   	push   ebx
c0002145:	85 c0                	test   eax,eax
c0002147:	51                   	push   ecx
c0002148:	75 09                	jne    c0002153 <validate+0x12>
c000214a:	b8 09 00 00 00       	mov    eax,0x9
c000214f:	31 c9                	xor    ecx,ecx
c0002151:	eb 2f                	jmp    c0002182 <validate+0x41>
c0002153:	89 c3                	mov    ebx,eax
c0002155:	8b 00                	mov    eax,DWORD PTR [eax]
c0002157:	85 c0                	test   eax,eax
c0002159:	74 ef                	je     c000214a <validate+0x9>
c000215b:	80 38 00             	cmp    BYTE PTR [eax],0x0
c000215e:	74 ea                	je     c000214a <validate+0x9>
c0002160:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002164:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c0002168:	75 e0                	jne    c000214a <validate+0x9>
c000216a:	83 ec 0c             	sub    esp,0xc
c000216d:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002171:	50                   	push   eax
c0002172:	e8 7d f8 ff ff       	call   c00019f4 <disk_status>
c0002177:	83 c4 10             	add    esp,0x10
c000217a:	a8 01                	test   al,0x1
c000217c:	75 cc                	jne    c000214a <validate+0x9>
c000217e:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002180:	31 c0                	xor    eax,eax
c0002182:	89 0e                	mov    DWORD PTR [esi],ecx
c0002184:	5a                   	pop    edx
c0002185:	5b                   	pop    ebx
c0002186:	5e                   	pop    esi
c0002187:	c3                   	ret    

c0002188 <sync_window>:
c0002188:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c000218c:	0f 84 85 00 00 00    	je     c0002217 <sync_window+0x8f>
c0002192:	55                   	push   ebp
c0002193:	8d 68 54             	lea    ebp,[eax+0x54]
c0002196:	57                   	push   edi
c0002197:	56                   	push   esi
c0002198:	53                   	push   ebx
c0002199:	89 c3                	mov    ebx,eax
c000219b:	83 ec 28             	sub    esp,0x28
c000219e:	6a 01                	push   0x1
c00021a0:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00021a3:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00021a6:	55                   	push   ebp
c00021a7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00021ab:	50                   	push   eax
c00021ac:	e8 5f f8 ff ff       	call   c0001a10 <disk_write>
c00021b1:	83 c4 20             	add    esp,0x20
c00021b4:	ba 01 00 00 00       	mov    edx,0x1
c00021b9:	85 c0                	test   eax,eax
c00021bb:	75 50                	jne    c000220d <sync_window+0x85>
c00021bd:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00021c0:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00021c3:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00021c7:	89 c6                	mov    esi,eax
c00021c9:	31 ff                	xor    edi,edi
c00021cb:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00021ce:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00021d1:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00021d5:	89 d7                	mov    edi,edx
c00021d7:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00021db:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00021de:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00021e2:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c00021e6:	73 23                	jae    c000220b <sync_window+0x83>
c00021e8:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c00021ec:	75 1d                	jne    c000220b <sync_window+0x83>
c00021ee:	83 ec 0c             	sub    esp,0xc
c00021f1:	6a 01                	push   0x1
c00021f3:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00021f7:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00021fb:	52                   	push   edx
c00021fc:	50                   	push   eax
c00021fd:	55                   	push   ebp
c00021fe:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002202:	50                   	push   eax
c0002203:	e8 08 f8 ff ff       	call   c0001a10 <disk_write>
c0002208:	83 c4 20             	add    esp,0x20
c000220b:	31 d2                	xor    edx,edx
c000220d:	83 c4 1c             	add    esp,0x1c
c0002210:	89 d0                	mov    eax,edx
c0002212:	5b                   	pop    ebx
c0002213:	5e                   	pop    esi
c0002214:	5f                   	pop    edi
c0002215:	5d                   	pop    ebp
c0002216:	c3                   	ret    
c0002217:	31 d2                	xor    edx,edx
c0002219:	89 d0                	mov    eax,edx
c000221b:	c3                   	ret    

c000221c <move_window>:
c000221c:	56                   	push   esi
c000221d:	53                   	push   ebx
c000221e:	89 c3                	mov    ebx,eax
c0002220:	83 ec 14             	sub    esp,0x14
c0002223:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002226:	75 07                	jne    c000222f <move_window+0x13>
c0002228:	31 f6                	xor    esi,esi
c000222a:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c000222d:	74 59                	je     c0002288 <move_window+0x6c>
c000222f:	89 d8                	mov    eax,ebx
c0002231:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002235:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002239:	e8 4a ff ff ff       	call   c0002188 <sync_window>
c000223e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002242:	89 c6                	mov    esi,eax
c0002244:	85 c0                	test   eax,eax
c0002246:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000224a:	75 3c                	jne    c0002288 <move_window+0x6c>
c000224c:	83 ec 0c             	sub    esp,0xc
c000224f:	8d 43 54             	lea    eax,[ebx+0x54]
c0002252:	6a 01                	push   0x1
c0002254:	51                   	push   ecx
c0002255:	52                   	push   edx
c0002256:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000225a:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000225e:	50                   	push   eax
c000225f:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002263:	50                   	push   eax
c0002264:	e8 91 f7 ff ff       	call   c00019fa <disk_read>
c0002269:	83 c4 20             	add    esp,0x20
c000226c:	85 c0                	test   eax,eax
c000226e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002272:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002276:	74 0a                	je     c0002282 <move_window+0x66>
c0002278:	83 ca ff             	or     edx,0xffffffff
c000227b:	be 01 00 00 00       	mov    esi,0x1
c0002280:	89 d1                	mov    ecx,edx
c0002282:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c0002285:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c0002288:	83 c4 14             	add    esp,0x14
c000228b:	89 f0                	mov    eax,esi
c000228d:	5b                   	pop    ebx
c000228e:	5e                   	pop    esi
c000228f:	c3                   	ret    

c0002290 <check_fs>:
c0002290:	53                   	push   ebx
c0002291:	89 c3                	mov    ebx,eax
c0002293:	83 ec 08             	sub    esp,0x8
c0002296:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c000229a:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00022a1:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00022a8:	e8 6f ff ff ff       	call   c000221c <move_window>
c00022ad:	ba 04 00 00 00       	mov    edx,0x4
c00022b2:	85 c0                	test   eax,eax
c00022b4:	0f 85 89 00 00 00    	jne    c0002343 <check_fs+0xb3>
c00022ba:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00022c0:	e8 80 f7 ff ff       	call   c0001a45 <ld_word>
c00022c5:	ba 03 00 00 00       	mov    edx,0x3
c00022ca:	66 3d 55 aa          	cmp    ax,0xaa55
c00022ce:	75 73                	jne    c0002343 <check_fs+0xb3>
c00022d0:	ba 20 04 02 c0       	mov    edx,0xc0020420
c00022d5:	8d 43 54             	lea    eax,[ebx+0x54]
c00022d8:	b9 0b 00 00 00       	mov    ecx,0xb
c00022dd:	e8 02 f8 ff ff       	call   c0001ae4 <mem_cmp>
c00022e2:	ba 01 00 00 00       	mov    edx,0x1
c00022e7:	85 c0                	test   eax,eax
c00022e9:	74 58                	je     c0002343 <check_fs+0xb3>
c00022eb:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c00022ee:	8d 50 18             	lea    edx,[eax+0x18]
c00022f1:	80 fa 01             	cmp    dl,0x1
c00022f4:	76 09                	jbe    c00022ff <check_fs+0x6f>
c00022f6:	ba 02 00 00 00       	mov    edx,0x2
c00022fb:	3c eb                	cmp    al,0xeb
c00022fd:	75 44                	jne    c0002343 <check_fs+0xb3>
c00022ff:	ba ac 30 02 c0       	mov    edx,0xc00230ac
c0002304:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c000230a:	b9 03 00 00 00       	mov    ecx,0x3
c000230f:	e8 d0 f7 ff ff       	call   c0001ae4 <mem_cmp>
c0002314:	31 d2                	xor    edx,edx
c0002316:	85 c0                	test   eax,eax
c0002318:	74 29                	je     c0002343 <check_fs+0xb3>
c000231a:	ba 2c 04 02 c0       	mov    edx,0xc002042c
c000231f:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002325:	b9 05 00 00 00       	mov    ecx,0x5
c000232a:	e8 b5 f7 ff ff       	call   c0001ae4 <mem_cmp>
c000232f:	31 d2                	xor    edx,edx
c0002331:	85 c0                	test   eax,eax
c0002333:	74 0e                	je     c0002343 <check_fs+0xb3>
c0002335:	31 d2                	xor    edx,edx
c0002337:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c000233e:	0f 95 c2             	setne  dl
c0002341:	01 d2                	add    edx,edx
c0002343:	83 c4 08             	add    esp,0x8
c0002346:	89 d0                	mov    eax,edx
c0002348:	5b                   	pop    ebx
c0002349:	c3                   	ret    

c000234a <find_volume>:
c000234a:	55                   	push   ebp
c000234b:	31 c9                	xor    ecx,ecx
c000234d:	57                   	push   edi
c000234e:	56                   	push   esi
c000234f:	89 d6                	mov    esi,edx
c0002351:	53                   	push   ebx
c0002352:	31 d2                	xor    edx,edx
c0002354:	83 ec 3c             	sub    esp,0x3c
c0002357:	89 c3                	mov    ebx,eax
c0002359:	e8 32 ff ff ff       	call   c0002290 <check_fs>
c000235e:	83 f8 02             	cmp    eax,0x2
c0002361:	74 0e                	je     c0002371 <find_volume+0x27>
c0002363:	0f 87 56 01 00 00    	ja     c00024bf <find_volume+0x175>
c0002369:	85 f6                	test   esi,esi
c000236b:	0f 84 4e 01 00 00    	je     c00024bf <find_volume+0x175>
c0002371:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c0002378:	0f 85 df 00 00 00    	jne    c000245d <find_volume+0x113>
c000237e:	31 c9                	xor    ecx,ecx
c0002380:	ba 01 00 00 00       	mov    edx,0x1
c0002385:	89 d8                	mov    eax,ebx
c0002387:	e8 90 fe ff ff       	call   c000221c <move_window>
c000238c:	85 c0                	test   eax,eax
c000238e:	74 0a                	je     c000239a <find_volume+0x50>
c0002390:	b8 04 00 00 00       	mov    eax,0x4
c0002395:	e9 25 01 00 00       	jmp    c00024bf <find_volume+0x175>
c000239a:	8d 6b 54             	lea    ebp,[ebx+0x54]
c000239d:	89 e8                	mov    eax,ebp
c000239f:	e8 f6 fc ff ff       	call   c000209a <test_gpt_header>
c00023a4:	85 c0                	test   eax,eax
c00023a6:	75 0a                	jne    c00023b2 <find_volume+0x68>
c00023a8:	b8 03 00 00 00       	mov    eax,0x3
c00023ad:	e9 0d 01 00 00       	jmp    c00024bf <find_volume+0x175>
c00023b2:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00023b8:	e8 95 f6 ff ff       	call   c0001a52 <ld_dword>
c00023bd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00023c1:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00023c7:	e8 9e f6 ff ff       	call   c0001a6a <ld_qword>
c00023cc:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00023d4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00023d8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00023dc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00023e4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00023e8:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00023ec:	74 ba                	je     c00023a8 <find_volume+0x5e>
c00023ee:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00023f2:	31 c9                	xor    ecx,ecx
c00023f4:	c1 e7 07             	shl    edi,0x7
c00023f7:	89 d8                	mov    eax,ebx
c00023f9:	89 fa                	mov    edx,edi
c00023fb:	c1 ea 09             	shr    edx,0x9
c00023fe:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0002402:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002406:	e8 11 fe ff ff       	call   c000221c <move_window>
c000240b:	85 c0                	test   eax,eax
c000240d:	75 81                	jne    c0002390 <find_volume+0x46>
c000240f:	81 e7 80 01 00 00    	and    edi,0x180
c0002415:	b9 10 00 00 00       	mov    ecx,0x10
c000241a:	ba 10 04 02 c0       	mov    edx,0xc0020410
c000241f:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0002423:	e8 bc f6 ff ff       	call   c0001ae4 <mem_cmp>
c0002428:	85 c0                	test   eax,eax
c000242a:	75 2b                	jne    c0002457 <find_volume+0x10d>
c000242c:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002430:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002434:	e8 31 f6 ff ff       	call   c0001a6a <ld_qword>
c0002439:	89 d1                	mov    ecx,edx
c000243b:	89 c2                	mov    edx,eax
c000243d:	89 d8                	mov    eax,ebx
c000243f:	e8 4c fe ff ff       	call   c0002290 <check_fs>
c0002444:	85 f6                	test   esi,esi
c0002446:	75 05                	jne    c000244d <find_volume+0x103>
c0002448:	83 f8 01             	cmp    eax,0x1
c000244b:	76 72                	jbe    c00024bf <find_volume+0x175>
c000244d:	85 f6                	test   esi,esi
c000244f:	74 06                	je     c0002457 <find_volume+0x10d>
c0002451:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002455:	74 68                	je     c00024bf <find_volume+0x175>
c0002457:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000245b:	eb 87                	jmp    c00023e4 <find_volume+0x9a>
c000245d:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002461:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c0002467:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c000246d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002471:	89 cd                	mov    ebp,ecx
c0002473:	89 f8                	mov    eax,edi
c0002475:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0002479:	e8 d4 f5 ff ff       	call   c0001a52 <ld_dword>
c000247e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0002482:	83 c7 10             	add    edi,0x10
c0002485:	83 c1 04             	add    ecx,0x4
c0002488:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c000248b:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c000248f:	75 e2                	jne    c0002473 <find_volume+0x129>
c0002491:	31 ff                	xor    edi,edi
c0002493:	85 f6                	test   esi,esi
c0002495:	74 03                	je     c000249a <find_volume+0x150>
c0002497:	8d 7e ff             	lea    edi,[esi-0x1]
c000249a:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c000249e:	b8 03 00 00 00       	mov    eax,0x3
c00024a3:	85 d2                	test   edx,edx
c00024a5:	74 09                	je     c00024b0 <find_volume+0x166>
c00024a7:	31 c9                	xor    ecx,ecx
c00024a9:	89 d8                	mov    eax,ebx
c00024ab:	e8 e0 fd ff ff       	call   c0002290 <check_fs>
c00024b0:	85 f6                	test   esi,esi
c00024b2:	75 0b                	jne    c00024bf <find_volume+0x175>
c00024b4:	83 f8 01             	cmp    eax,0x1
c00024b7:	76 06                	jbe    c00024bf <find_volume+0x175>
c00024b9:	47                   	inc    edi
c00024ba:	83 ff 03             	cmp    edi,0x3
c00024bd:	76 db                	jbe    c000249a <find_volume+0x150>
c00024bf:	83 c4 3c             	add    esp,0x3c
c00024c2:	5b                   	pop    ebx
c00024c3:	5e                   	pop    esi
c00024c4:	5f                   	pop    edi
c00024c5:	5d                   	pop    ebp
c00024c6:	c3                   	ret    

c00024c7 <mount_volume>:
c00024c7:	55                   	push   ebp
c00024c8:	57                   	push   edi
c00024c9:	89 cf                	mov    edi,ecx
c00024cb:	56                   	push   esi
c00024cc:	53                   	push   ebx
c00024cd:	bb 0b 00 00 00       	mov    ebx,0xb
c00024d2:	83 ec 3c             	sub    esp,0x3c
c00024d5:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00024db:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00024df:	e8 43 fb ff ff       	call   c0002027 <get_ldnumber>
c00024e4:	85 c0                	test   eax,eax
c00024e6:	0f 88 3b 05 00 00    	js     c0002a27 <mount_volume+0x560>
c00024ec:	8b 2c 85 20 45 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffdbae0]
c00024f3:	89 c6                	mov    esi,eax
c00024f5:	bb 0c 00 00 00       	mov    ebx,0xc
c00024fa:	85 ed                	test   ebp,ebp
c00024fc:	0f 84 25 05 00 00    	je     c0002a27 <mount_volume+0x560>
c0002502:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002506:	83 e7 fe             	and    edi,0xfffffffe
c0002509:	89 2a                	mov    DWORD PTR [edx],ebp
c000250b:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c000250f:	74 32                	je     c0002543 <mount_volume+0x7c>
c0002511:	83 ec 0c             	sub    esp,0xc
c0002514:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0002518:	50                   	push   eax
c0002519:	e8 d6 f4 ff ff       	call   c00019f4 <disk_status>
c000251e:	83 c4 10             	add    esp,0x10
c0002521:	a8 01                	test   al,0x1
c0002523:	75 1e                	jne    c0002543 <mount_volume+0x7c>
c0002525:	89 f9                	mov    ecx,edi
c0002527:	31 db                	xor    ebx,ebx
c0002529:	84 c9                	test   cl,cl
c000252b:	0f 84 f6 04 00 00    	je     c0002a27 <mount_volume+0x560>
c0002531:	a8 04                	test   al,0x4
c0002533:	0f 84 ee 04 00 00    	je     c0002a27 <mount_volume+0x560>
c0002539:	bb 0a 00 00 00       	mov    ebx,0xa
c000253e:	e9 e4 04 00 00       	jmp    c0002a27 <mount_volume+0x560>
c0002543:	83 ec 0c             	sub    esp,0xc
c0002546:	89 f0                	mov    eax,esi
c0002548:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c000254c:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c000254f:	0f b6 f0             	movzx  esi,al
c0002552:	56                   	push   esi
c0002553:	e8 9f f4 ff ff       	call   c00019f7 <disk_initialize>
c0002558:	bb 03 00 00 00       	mov    ebx,0x3
c000255d:	83 c4 10             	add    esp,0x10
c0002560:	a8 01                	test   al,0x1
c0002562:	0f 85 bf 04 00 00    	jne    c0002a27 <mount_volume+0x560>
c0002568:	89 f9                	mov    ecx,edi
c000256a:	84 c9                	test   cl,cl
c000256c:	74 04                	je     c0002572 <mount_volume+0xab>
c000256e:	a8 04                	test   al,0x4
c0002570:	75 c7                	jne    c0002539 <mount_volume+0x72>
c0002572:	31 d2                	xor    edx,edx
c0002574:	89 e8                	mov    eax,ebp
c0002576:	e8 cf fd ff ff       	call   c000234a <find_volume>
c000257b:	83 f8 04             	cmp    eax,0x4
c000257e:	75 0a                	jne    c000258a <mount_volume+0xc3>
c0002580:	bb 01 00 00 00       	mov    ebx,0x1
c0002585:	e9 9d 04 00 00       	jmp    c0002a27 <mount_volume+0x560>
c000258a:	83 f8 01             	cmp    eax,0x1
c000258d:	76 0a                	jbe    c0002599 <mount_volume+0xd2>
c000258f:	bb 0d 00 00 00       	mov    ebx,0xd
c0002594:	e9 8e 04 00 00       	jmp    c0002a27 <mount_volume+0x560>
c0002599:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c000259c:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c000259f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00025a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00025a7:	75 17                	jne    c00025c0 <mount_volume+0xf9>
c00025a9:	b8 0b 00 00 00       	mov    eax,0xb
c00025ae:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00025b3:	75 da                	jne    c000258f <mount_volume+0xc8>
c00025b5:	40                   	inc    eax
c00025b6:	83 f8 40             	cmp    eax,0x40
c00025b9:	75 f3                	jne    c00025ae <mount_volume+0xe7>
c00025bb:	e9 5a 02 00 00       	jmp    c000281a <mount_volume+0x353>
c00025c0:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00025c3:	e8 7d f4 ff ff       	call   c0001a45 <ld_word>
c00025c8:	66 3d 00 02          	cmp    ax,0x200
c00025cc:	75 c1                	jne    c000258f <mount_volume+0xc8>
c00025ce:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00025d1:	e8 6f f4 ff ff       	call   c0001a45 <ld_word>
c00025d6:	0f b7 c0             	movzx  eax,ax
c00025d9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00025dd:	85 c0                	test   eax,eax
c00025df:	75 0c                	jne    c00025ed <mount_volume+0x126>
c00025e1:	8d 45 78             	lea    eax,[ebp+0x78]
c00025e4:	e8 69 f4 ff ff       	call   c0001a52 <ld_dword>
c00025e9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00025ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00025f1:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c00025f4:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c00025f7:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00025fb:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c00025fe:	48                   	dec    eax
c00025ff:	3c 01                	cmp    al,0x1
c0002601:	77 8c                	ja     c000258f <mount_volume+0xc8>
c0002603:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c0002607:	89 c3                	mov    ebx,eax
c0002609:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c000260d:	66 85 c0             	test   ax,ax
c0002610:	0f 84 79 ff ff ff    	je     c000258f <mount_volume+0xc8>
c0002616:	8d 40 ff             	lea    eax,[eax-0x1]
c0002619:	85 d8                	test   eax,ebx
c000261b:	0f 85 6e ff ff ff    	jne    c000258f <mount_volume+0xc8>
c0002621:	8d 45 65             	lea    eax,[ebp+0x65]
c0002624:	e8 1c f4 ff ff       	call   c0001a45 <ld_word>
c0002629:	89 c7                	mov    edi,eax
c000262b:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c000262f:	a8 0f                	test   al,0xf
c0002631:	0f 85 58 ff ff ff    	jne    c000258f <mount_volume+0xc8>
c0002637:	8d 45 67             	lea    eax,[ebp+0x67]
c000263a:	e8 06 f4 ff ff       	call   c0001a45 <ld_word>
c000263f:	0f b7 f0             	movzx  esi,ax
c0002642:	85 f6                	test   esi,esi
c0002644:	75 0a                	jne    c0002650 <mount_volume+0x189>
c0002646:	8d 45 74             	lea    eax,[ebp+0x74]
c0002649:	e8 04 f4 ff ff       	call   c0001a52 <ld_dword>
c000264e:	89 c6                	mov    esi,eax
c0002650:	8d 45 62             	lea    eax,[ebp+0x62]
c0002653:	e8 ed f3 ff ff       	call   c0001a45 <ld_word>
c0002658:	66 85 c0             	test   ax,ax
c000265b:	0f 84 2e ff ff ff    	je     c000258f <mount_volume+0xc8>
c0002661:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002666:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c000266b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000266f:	89 fa                	mov    edx,edi
c0002671:	66 c1 ea 04          	shr    dx,0x4
c0002675:	0f b7 d2             	movzx  edx,dx
c0002678:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c000267c:	0f b7 c8             	movzx  ecx,ax
c000267f:	8d 04 0a             	lea    eax,[edx+ecx*1]
c0002682:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002686:	39 c6                	cmp    esi,eax
c0002688:	0f 82 01 ff ff ff    	jb     c000258f <mount_volume+0xc8>
c000268e:	29 c6                	sub    esi,eax
c0002690:	31 d2                	xor    edx,edx
c0002692:	89 f0                	mov    eax,esi
c0002694:	f7 f3                	div    ebx
c0002696:	39 de                	cmp    esi,ebx
c0002698:	0f 82 f1 fe ff ff    	jb     c000258f <mount_volume+0xc8>
c000269e:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00026a3:	0f 87 e6 fe ff ff    	ja     c000258f <mount_volume+0xc8>
c00026a9:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00026ae:	0f 86 63 03 00 00    	jbe    c0002a17 <mount_volume+0x550>
c00026b4:	bb 03 00 00 00       	mov    ebx,0x3
c00026b9:	8d 70 02             	lea    esi,[eax+0x2]
c00026bc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00026c0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00026c4:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00026c7:	89 c8                	mov    eax,ecx
c00026c9:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00026cc:	31 d2                	xor    edx,edx
c00026ce:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00026d2:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00026d6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00026da:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00026dd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00026e1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00026e5:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c00026e8:	31 d2                	xor    edx,edx
c00026ea:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00026ee:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00026f2:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00026f5:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00026f8:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00026fb:	83 fb 03             	cmp    ebx,0x3
c00026fe:	75 2b                	jne    c000272b <mount_volume+0x264>
c0002700:	8d 45 7e             	lea    eax,[ebp+0x7e]
c0002703:	e8 3d f3 ff ff       	call   c0001a45 <ld_word>
c0002708:	66 09 c7             	or     di,ax
c000270b:	0f 85 7e fe ff ff    	jne    c000258f <mount_volume+0xc8>
c0002711:	c1 e6 02             	shl    esi,0x2
c0002714:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c000271a:	e8 33 f3 ff ff       	call   c0001a52 <ld_dword>
c000271f:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002726:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002729:	eb 30                	jmp    c000275b <mount_volume+0x294>
c000272b:	66 85 ff             	test   di,di
c000272e:	0f 84 5b fe ff ff    	je     c000258f <mount_volume+0xc8>
c0002734:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002738:	31 d2                	xor    edx,edx
c000273a:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000273e:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0002742:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002745:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002748:	83 fb 02             	cmp    ebx,0x2
c000274b:	75 04                	jne    c0002751 <mount_volume+0x28a>
c000274d:	01 f6                	add    esi,esi
c000274f:	eb 0a                	jmp    c000275b <mount_volume+0x294>
c0002751:	8d 04 76             	lea    eax,[esi+esi*2]
c0002754:	83 e6 01             	and    esi,0x1
c0002757:	d1 e8                	shr    eax,1
c0002759:	01 c6                	add    esi,eax
c000275b:	81 c6 ff 01 00 00    	add    esi,0x1ff
c0002761:	c1 ee 09             	shr    esi,0x9
c0002764:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002768:	0f 87 21 fe ff ff    	ja     c000258f <mount_volume+0xc8>
c000276e:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002775:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c000277c:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c0002780:	83 fb 03             	cmp    ebx,0x3
c0002783:	75 7a                	jne    c00027ff <mount_volume+0x338>
c0002785:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c000278b:	e8 b5 f2 ff ff       	call   c0001a45 <ld_word>
c0002790:	66 48                	dec    ax
c0002792:	75 6b                	jne    c00027ff <mount_volume+0x338>
c0002794:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002798:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000279c:	83 c2 01             	add    edx,0x1
c000279f:	89 e8                	mov    eax,ebp
c00027a1:	83 d1 00             	adc    ecx,0x0
c00027a4:	e8 73 fa ff ff       	call   c000221c <move_window>
c00027a9:	85 c0                	test   eax,eax
c00027ab:	75 52                	jne    c00027ff <mount_volume+0x338>
c00027ad:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00027b1:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00027b7:	e8 89 f2 ff ff       	call   c0001a45 <ld_word>
c00027bc:	66 3d 55 aa          	cmp    ax,0xaa55
c00027c0:	75 3d                	jne    c00027ff <mount_volume+0x338>
c00027c2:	8d 45 54             	lea    eax,[ebp+0x54]
c00027c5:	e8 88 f2 ff ff       	call   c0001a52 <ld_dword>
c00027ca:	3d 52 52 61 41       	cmp    eax,0x41615252
c00027cf:	75 2e                	jne    c00027ff <mount_volume+0x338>
c00027d1:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00027d7:	e8 76 f2 ff ff       	call   c0001a52 <ld_dword>
c00027dc:	3d 72 72 41 61       	cmp    eax,0x61417272
c00027e1:	75 1c                	jne    c00027ff <mount_volume+0x338>
c00027e3:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c00027e9:	e8 64 f2 ff ff       	call   c0001a52 <ld_dword>
c00027ee:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c00027f1:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c00027f7:	e8 56 f2 ff ff       	call   c0001a52 <ld_dword>
c00027fc:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c00027ff:	66 a1 00 45 02 c0    	mov    ax,ds:0xc0024500
c0002805:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0002808:	40                   	inc    eax
c0002809:	31 db                	xor    ebx,ebx
c000280b:	66 a3 00 45 02 c0    	mov    ds:0xc0024500,ax
c0002811:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002815:	e9 0d 02 00 00       	jmp    c0002a27 <mount_volume+0x560>
c000281a:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002820:	e8 20 f2 ff ff       	call   c0001a45 <ld_word>
c0002825:	66 3d 00 01          	cmp    ax,0x100
c0002829:	0f 85 60 fd ff ff    	jne    c000258f <mount_volume+0xc8>
c000282f:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002836:	0f 85 53 fd ff ff    	jne    c000258f <mount_volume+0xc8>
c000283c:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002842:	e8 23 f2 ff ff       	call   c0001a6a <ld_qword>
c0002847:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000284b:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002851:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002855:	e8 f8 f1 ff ff       	call   c0001a52 <ld_dword>
c000285a:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c000285d:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002863:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002866:	fe c8                	dec    al
c0002868:	0f 85 21 fd ff ff    	jne    c000258f <mount_volume+0xc8>
c000286e:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002875:	bb 01 00 00 00       	mov    ebx,0x1
c000287a:	d3 e3                	shl    ebx,cl
c000287c:	66 85 db             	test   bx,bx
c000287f:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c0002883:	0f 84 06 fd ff ff    	je     c000258f <mount_volume+0xc8>
c0002889:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c000288f:	e8 be f1 ff ff       	call   c0001a52 <ld_dword>
c0002894:	89 c6                	mov    esi,eax
c0002896:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c000289b:	0f 87 ee fc ff ff    	ja     c000258f <mount_volume+0xc8>
c00028a1:	8d 40 02             	lea    eax,[eax+0x2]
c00028a4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028a8:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c00028ab:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028af:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028b2:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028b5:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c00028bb:	e8 92 f1 ff ff       	call   c0001a52 <ld_dword>
c00028c0:	31 d2                	xor    edx,edx
c00028c2:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028c6:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028ca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00028ce:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00028d1:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00028d4:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c00028da:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00028de:	e8 6f f1 ff ff       	call   c0001a52 <ld_dword>
c00028e3:	31 d2                	xor    edx,edx
c00028e5:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028e9:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00028ed:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028f1:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00028f4:	0f b7 c3             	movzx  eax,bx
c00028f7:	0f af f0             	imul   esi,eax
c00028fa:	89 f0                	mov    eax,esi
c00028fc:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c00028ff:	31 d2                	xor    edx,edx
c0002901:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002905:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002909:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c000290d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002911:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002915:	39 c1                	cmp    ecx,eax
c0002917:	89 df                	mov    edi,ebx
c0002919:	19 d7                	sbb    edi,edx
c000291b:	0f 82 6e fc ff ff    	jb     c000258f <mount_volume+0xc8>
c0002921:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002927:	31 db                	xor    ebx,ebx
c0002929:	e8 24 f1 ff ff       	call   c0001a52 <ld_dword>
c000292e:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002935:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002938:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002940:	85 db                	test   ebx,ebx
c0002942:	75 39                	jne    c000297d <mount_volume+0x4b6>
c0002944:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002948:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000294c:	0f 86 3d fc ff ff    	jbe    c000258f <mount_volume+0xc8>
c0002952:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002955:	89 e8                	mov    eax,ebp
c0002957:	e8 82 f3 ff ff       	call   c0001cde <clst2sect>
c000295c:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002960:	31 ff                	xor    edi,edi
c0002962:	01 c6                	add    esi,eax
c0002964:	11 d7                	adc    edi,edx
c0002966:	89 e8                	mov    eax,ebp
c0002968:	89 f2                	mov    edx,esi
c000296a:	89 f9                	mov    ecx,edi
c000296c:	e8 ab f8 ff ff       	call   c000221c <move_window>
c0002971:	85 c0                	test   eax,eax
c0002973:	0f 85 07 fc ff ff    	jne    c0002580 <mount_volume+0xb9>
c0002979:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c000297d:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002982:	74 0b                	je     c000298f <mount_volume+0x4c8>
c0002984:	83 c3 20             	add    ebx,0x20
c0002987:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c000298d:	eb b1                	jmp    c0002940 <mount_volume+0x479>
c000298f:	8d 75 54             	lea    esi,[ebp+0x54]
c0002992:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002996:	e8 b7 f0 ff ff       	call   c0001a52 <ld_dword>
c000299b:	89 c3                	mov    ebx,eax
c000299d:	83 f8 01             	cmp    eax,0x1
c00029a0:	0f 86 e9 fb ff ff    	jbe    c000258f <mount_volume+0xc8>
c00029a6:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00029a9:	0f 86 e0 fb ff ff    	jbe    c000258f <mount_volume+0xc8>
c00029af:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00029b3:	8d 53 fe             	lea    edx,[ebx-0x2]
c00029b6:	0f af c2             	imul   eax,edx
c00029b9:	31 d2                	xor    edx,edx
c00029bb:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c00029be:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c00029c1:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c00029c4:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c00029c7:	89 da                	mov    edx,ebx
c00029c9:	31 c9                	xor    ecx,ecx
c00029cb:	c1 ea 07             	shr    edx,0x7
c00029ce:	89 e8                	mov    eax,ebp
c00029d0:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c00029d3:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c00029d6:	e8 41 f8 ff ff       	call   c000221c <move_window>
c00029db:	85 c0                	test   eax,eax
c00029dd:	0f 85 9d fb ff ff    	jne    c0002580 <mount_volume+0xb9>
c00029e3:	89 d8                	mov    eax,ebx
c00029e5:	83 e0 7f             	and    eax,0x7f
c00029e8:	8d 04 86             	lea    eax,[esi+eax*4]
c00029eb:	e8 62 f0 ff ff       	call   c0001a52 <ld_dword>
c00029f0:	83 f8 ff             	cmp    eax,0xffffffff
c00029f3:	74 0a                	je     c00029ff <mount_volume+0x538>
c00029f5:	43                   	inc    ebx
c00029f6:	39 d8                	cmp    eax,ebx
c00029f8:	74 cd                	je     c00029c7 <mount_volume+0x500>
c00029fa:	e9 90 fb ff ff       	jmp    c000258f <mount_volume+0xc8>
c00029ff:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002a06:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002a0d:	bb 04 00 00 00       	mov    ebx,0x4
c0002a12:	e9 e8 fd ff ff       	jmp    c00027ff <mount_volume+0x338>
c0002a17:	31 db                	xor    ebx,ebx
c0002a19:	3d f5 0f 00 00       	cmp    eax,0xff5
c0002a1e:	0f 97 c3             	seta   bl
c0002a21:	43                   	inc    ebx
c0002a22:	e9 92 fc ff ff       	jmp    c00026b9 <mount_volume+0x1f2>
c0002a27:	83 c4 3c             	add    esp,0x3c
c0002a2a:	89 d8                	mov    eax,ebx
c0002a2c:	5b                   	pop    ebx
c0002a2d:	5e                   	pop    esi
c0002a2e:	5f                   	pop    edi
c0002a2f:	5d                   	pop    ebp
c0002a30:	c3                   	ret    

c0002a31 <find_bitmap>:
c0002a31:	55                   	push   ebp
c0002a32:	57                   	push   edi
c0002a33:	89 c7                	mov    edi,eax
c0002a35:	56                   	push   esi
c0002a36:	8d 72 fe             	lea    esi,[edx-0x2]
c0002a39:	53                   	push   ebx
c0002a3a:	83 ec 1c             	sub    esp,0x1c
c0002a3d:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002a40:	83 e8 02             	sub    eax,0x2
c0002a43:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002a47:	39 f0                	cmp    eax,esi
c0002a49:	77 02                	ja     c0002a4d <find_bitmap+0x1c>
c0002a4b:	31 f6                	xor    esi,esi
c0002a4d:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002a51:	89 f3                	mov    ebx,esi
c0002a53:	31 ed                	xor    ebp,ebp
c0002a55:	89 da                	mov    edx,ebx
c0002a57:	31 c9                	xor    ecx,ecx
c0002a59:	c1 ea 0c             	shr    edx,0xc
c0002a5c:	89 f8                	mov    eax,edi
c0002a5e:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002a61:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002a64:	e8 b3 f7 ff ff       	call   c000221c <move_window>
c0002a69:	85 c0                	test   eax,eax
c0002a6b:	75 68                	jne    c0002ad5 <find_bitmap+0xa4>
c0002a6d:	89 d9                	mov    ecx,ebx
c0002a6f:	b8 01 00 00 00       	mov    eax,0x1
c0002a74:	83 e1 07             	and    ecx,0x7
c0002a77:	89 da                	mov    edx,ebx
c0002a79:	d3 e0                	shl    eax,cl
c0002a7b:	c1 ea 03             	shr    edx,0x3
c0002a7e:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002a81:	83 e9 02             	sub    ecx,0x2
c0002a84:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002a8a:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002a8e:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002a92:	43                   	inc    ebx
c0002a93:	21 c1                	and    ecx,eax
c0002a95:	01 c0                	add    eax,eax
c0002a97:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002a9b:	77 09                	ja     c0002aa6 <find_bitmap+0x75>
c0002a9d:	31 db                	xor    ebx,ebx
c0002a9f:	ba 00 02 00 00       	mov    edx,0x200
c0002aa4:	31 c0                	xor    eax,eax
c0002aa6:	84 c9                	test   cl,cl
c0002aa8:	75 10                	jne    c0002aba <find_bitmap+0x89>
c0002aaa:	45                   	inc    ebp
c0002aab:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002aaf:	75 0f                	jne    c0002ac0 <find_bitmap+0x8f>
c0002ab1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ab5:	83 c0 02             	add    eax,0x2
c0002ab8:	eb 22                	jmp    c0002adc <find_bitmap+0xab>
c0002aba:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002abe:	31 ed                	xor    ebp,ebp
c0002ac0:	39 de                	cmp    esi,ebx
c0002ac2:	74 16                	je     c0002ada <find_bitmap+0xa9>
c0002ac4:	84 c0                	test   al,al
c0002ac6:	75 c6                	jne    c0002a8e <find_bitmap+0x5d>
c0002ac8:	42                   	inc    edx
c0002ac9:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002acf:	77 84                	ja     c0002a55 <find_bitmap+0x24>
c0002ad1:	b0 01                	mov    al,0x1
c0002ad3:	eb b9                	jmp    c0002a8e <find_bitmap+0x5d>
c0002ad5:	83 c8 ff             	or     eax,0xffffffff
c0002ad8:	eb 02                	jmp    c0002adc <find_bitmap+0xab>
c0002ada:	31 c0                	xor    eax,eax
c0002adc:	83 c4 1c             	add    esp,0x1c
c0002adf:	5b                   	pop    ebx
c0002ae0:	5e                   	pop    esi
c0002ae1:	5f                   	pop    edi
c0002ae2:	5d                   	pop    ebp
c0002ae3:	c3                   	ret    

c0002ae4 <change_bitmap>:
c0002ae4:	55                   	push   ebp
c0002ae5:	89 cd                	mov    ebp,ecx
c0002ae7:	57                   	push   edi
c0002ae8:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002aeb:	56                   	push   esi
c0002aec:	89 c7                	mov    edi,eax
c0002aee:	53                   	push   ebx
c0002aef:	89 c8                	mov    eax,ecx
c0002af1:	83 ec 1c             	sub    esp,0x1c
c0002af4:	31 d2                	xor    edx,edx
c0002af6:	c1 e8 0c             	shr    eax,0xc
c0002af9:	89 ce                	mov    esi,ecx
c0002afb:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002afe:	bb 01 00 00 00       	mov    ebx,0x1
c0002b03:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002b06:	83 e1 07             	and    ecx,0x7
c0002b09:	c1 ee 03             	shr    esi,0x3
c0002b0c:	d3 e3                	shl    ebx,cl
c0002b0e:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002b14:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002b18:	89 c1                	mov    ecx,eax
c0002b1a:	89 d3                	mov    ebx,edx
c0002b1c:	83 c1 01             	add    ecx,0x1
c0002b1f:	83 d3 00             	adc    ebx,0x0
c0002b22:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002b26:	89 d1                	mov    ecx,edx
c0002b28:	89 c2                	mov    edx,eax
c0002b2a:	89 f8                	mov    eax,edi
c0002b2c:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002b30:	e8 e7 f6 ff ff       	call   c000221c <move_window>
c0002b35:	89 c1                	mov    ecx,eax
c0002b37:	85 c0                	test   eax,eax
c0002b39:	75 48                	jne    c0002b83 <change_bitmap+0x9f>
c0002b3b:	31 d2                	xor    edx,edx
c0002b3d:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002b41:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002b45:	0f 95 c2             	setne  dl
c0002b48:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002b4c:	74 3c                	je     c0002b8a <change_bitmap+0xa6>
c0002b4e:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002b52:	4d                   	dec    ebp
c0002b53:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002b57:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002b5b:	74 32                	je     c0002b8f <change_bitmap+0xab>
c0002b5d:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002b61:	75 d8                	jne    c0002b3b <change_bitmap+0x57>
c0002b63:	8d 46 01             	lea    eax,[esi+0x1]
c0002b66:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002b6b:	89 c3                	mov    ebx,eax
c0002b6d:	31 f6                	xor    esi,esi
c0002b6f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002b73:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002b77:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002b7d:	74 99                	je     c0002b18 <change_bitmap+0x34>
c0002b7f:	89 de                	mov    esi,ebx
c0002b81:	eb b8                	jmp    c0002b3b <change_bitmap+0x57>
c0002b83:	b9 01 00 00 00       	mov    ecx,0x1
c0002b88:	eb 05                	jmp    c0002b8f <change_bitmap+0xab>
c0002b8a:	b9 02 00 00 00       	mov    ecx,0x2
c0002b8f:	83 c4 1c             	add    esp,0x1c
c0002b92:	89 c8                	mov    eax,ecx
c0002b94:	5b                   	pop    ebx
c0002b95:	5e                   	pop    esi
c0002b96:	5f                   	pop    edi
c0002b97:	5d                   	pop    ebp
c0002b98:	c3                   	ret    

c0002b99 <put_fat>:
c0002b99:	83 fa 01             	cmp    edx,0x1
c0002b9c:	0f 86 7b 01 00 00    	jbe    c0002d1d <put_fat+0x184>
c0002ba2:	55                   	push   ebp
c0002ba3:	57                   	push   edi
c0002ba4:	89 cf                	mov    edi,ecx
c0002ba6:	56                   	push   esi
c0002ba7:	b9 02 00 00 00       	mov    ecx,0x2
c0002bac:	53                   	push   ebx
c0002bad:	89 c6                	mov    esi,eax
c0002baf:	83 ec 1c             	sub    esp,0x1c
c0002bb2:	89 d3                	mov    ebx,edx
c0002bb4:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002bb7:	0f 86 68 01 00 00    	jbe    c0002d25 <put_fat+0x18c>
c0002bbd:	8a 00                	mov    al,BYTE PTR [eax]
c0002bbf:	3c 02                	cmp    al,0x2
c0002bc1:	0f 84 c7 00 00 00    	je     c0002c8e <put_fat+0xf5>
c0002bc7:	77 09                	ja     c0002bd2 <put_fat+0x39>
c0002bc9:	fe c8                	dec    al
c0002bcb:	74 17                	je     c0002be4 <put_fat+0x4b>
c0002bcd:	e9 53 01 00 00       	jmp    c0002d25 <put_fat+0x18c>
c0002bd2:	b9 02 00 00 00       	mov    ecx,0x2
c0002bd7:	3c 04                	cmp    al,0x4
c0002bd9:	0f 86 e1 00 00 00    	jbe    c0002cc0 <put_fat+0x127>
c0002bdf:	e9 41 01 00 00       	jmp    c0002d25 <put_fat+0x18c>
c0002be4:	89 d5                	mov    ebp,edx
c0002be6:	31 c9                	xor    ecx,ecx
c0002be8:	d1 ed                	shr    ebp,1
c0002bea:	89 f0                	mov    eax,esi
c0002bec:	01 d5                	add    ebp,edx
c0002bee:	89 ea                	mov    edx,ebp
c0002bf0:	c1 ea 09             	shr    edx,0x9
c0002bf3:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002bf6:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002bf9:	e8 1e f6 ff ff       	call   c000221c <move_window>
c0002bfe:	89 c1                	mov    ecx,eax
c0002c00:	85 c0                	test   eax,eax
c0002c02:	0f 85 1d 01 00 00    	jne    c0002d25 <put_fat+0x18c>
c0002c08:	8d 46 54             	lea    eax,[esi+0x54]
c0002c0b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002c0f:	8d 45 01             	lea    eax,[ebp+0x1]
c0002c12:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002c18:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002c1c:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002c20:	83 e3 01             	and    ebx,0x1
c0002c23:	89 f8                	mov    eax,edi
c0002c25:	74 0d                	je     c0002c34 <put_fat+0x9b>
c0002c27:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002c2a:	89 fa                	mov    edx,edi
c0002c2c:	c1 e2 04             	shl    edx,0x4
c0002c2f:	83 e0 0f             	and    eax,0xf
c0002c32:	09 d0                	or     eax,edx
c0002c34:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002c38:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002c3b:	c1 ea 09             	shr    edx,0x9
c0002c3e:	31 c9                	xor    ecx,ecx
c0002c40:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002c43:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002c47:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002c4a:	89 f0                	mov    eax,esi
c0002c4c:	e8 cb f5 ff ff       	call   c000221c <move_window>
c0002c51:	89 c1                	mov    ecx,eax
c0002c53:	85 c0                	test   eax,eax
c0002c55:	0f 85 ca 00 00 00    	jne    c0002d25 <put_fat+0x18c>
c0002c5b:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002c5f:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002c65:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002c69:	85 db                	test   ebx,ebx
c0002c6b:	74 07                	je     c0002c74 <put_fat+0xdb>
c0002c6d:	c1 ef 04             	shr    edi,0x4
c0002c70:	89 fa                	mov    edx,edi
c0002c72:	eb 0e                	jmp    c0002c82 <put_fat+0xe9>
c0002c74:	c1 ef 08             	shr    edi,0x8
c0002c77:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002c7a:	83 e2 f0             	and    edx,0xfffffff0
c0002c7d:	83 e7 0f             	and    edi,0xf
c0002c80:	09 fa                	or     edx,edi
c0002c82:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002c85:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002c89:	e9 97 00 00 00       	jmp    c0002d25 <put_fat+0x18c>
c0002c8e:	c1 ea 08             	shr    edx,0x8
c0002c91:	31 c9                	xor    ecx,ecx
c0002c93:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002c96:	89 f0                	mov    eax,esi
c0002c98:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002c9b:	e8 7c f5 ff ff       	call   c000221c <move_window>
c0002ca0:	89 c1                	mov    ecx,eax
c0002ca2:	85 c0                	test   eax,eax
c0002ca4:	75 7f                	jne    c0002d25 <put_fat+0x18c>
c0002ca6:	01 db                	add    ebx,ebx
c0002ca8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002cac:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002cb2:	0f b7 d7             	movzx  edx,di
c0002cb5:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002cb9:	e8 f9 ed ff ff       	call   c0001ab7 <st_word>
c0002cbe:	eb 53                	jmp    c0002d13 <put_fat+0x17a>
c0002cc0:	c1 ea 07             	shr    edx,0x7
c0002cc3:	31 c9                	xor    ecx,ecx
c0002cc5:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002cc8:	89 f0                	mov    eax,esi
c0002cca:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ccd:	e8 4a f5 ff ff       	call   c000221c <move_window>
c0002cd2:	89 c1                	mov    ecx,eax
c0002cd4:	85 c0                	test   eax,eax
c0002cd6:	75 4d                	jne    c0002d25 <put_fat+0x18c>
c0002cd8:	c1 e3 02             	shl    ebx,0x2
c0002cdb:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002ce1:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002ce4:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002ce8:	74 1c                	je     c0002d06 <put_fat+0x16d>
c0002cea:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002cee:	89 d8                	mov    eax,ebx
c0002cf0:	e8 5d ed ff ff       	call   c0001a52 <ld_dword>
c0002cf5:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002cfb:	25 00 00 00 f0       	and    eax,0xf0000000
c0002d00:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002d04:	09 c7                	or     edi,eax
c0002d06:	89 fa                	mov    edx,edi
c0002d08:	89 d8                	mov    eax,ebx
c0002d0a:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d0e:	e8 a8 ed ff ff       	call   c0001abb <st_dword>
c0002d13:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002d17:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002d1b:	eb 08                	jmp    c0002d25 <put_fat+0x18c>
c0002d1d:	b9 02 00 00 00       	mov    ecx,0x2
c0002d22:	89 c8                	mov    eax,ecx
c0002d24:	c3                   	ret    
c0002d25:	83 c4 1c             	add    esp,0x1c
c0002d28:	89 c8                	mov    eax,ecx
c0002d2a:	5b                   	pop    ebx
c0002d2b:	5e                   	pop    esi
c0002d2c:	5f                   	pop    edi
c0002d2d:	5d                   	pop    ebp
c0002d2e:	c3                   	ret    

c0002d2f <fill_last_frag>:
c0002d2f:	57                   	push   edi
c0002d30:	89 cf                	mov    edi,ecx
c0002d32:	56                   	push   esi
c0002d33:	89 d6                	mov    esi,edx
c0002d35:	53                   	push   ebx
c0002d36:	89 c3                	mov    ebx,eax
c0002d38:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002d3b:	85 c0                	test   eax,eax
c0002d3d:	74 21                	je     c0002d60 <fill_last_frag+0x31>
c0002d3f:	89 f9                	mov    ecx,edi
c0002d41:	83 f8 01             	cmp    eax,0x1
c0002d44:	76 05                	jbe    c0002d4b <fill_last_frag+0x1c>
c0002d46:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002d49:	29 c1                	sub    ecx,eax
c0002d4b:	8d 56 01             	lea    edx,[esi+0x1]
c0002d4e:	29 c2                	sub    edx,eax
c0002d50:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002d52:	e8 42 fe ff ff       	call   c0002b99 <put_fat>
c0002d57:	85 c0                	test   eax,eax
c0002d59:	75 05                	jne    c0002d60 <fill_last_frag+0x31>
c0002d5b:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002d5e:	eb d8                	jmp    c0002d38 <fill_last_frag+0x9>
c0002d60:	5b                   	pop    ebx
c0002d61:	5e                   	pop    esi
c0002d62:	5f                   	pop    edi
c0002d63:	c3                   	ret    

c0002d64 <fill_first_frag>:
c0002d64:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002d68:	75 2d                	jne    c0002d97 <fill_first_frag+0x33>
c0002d6a:	57                   	push   edi
c0002d6b:	56                   	push   esi
c0002d6c:	53                   	push   ebx
c0002d6d:	89 c3                	mov    ebx,eax
c0002d6f:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002d72:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002d75:	01 d7                	add    edi,edx
c0002d77:	39 fa                	cmp    edx,edi
c0002d79:	74 14                	je     c0002d8f <fill_first_frag+0x2b>
c0002d7b:	8d 72 01             	lea    esi,[edx+0x1]
c0002d7e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002d80:	89 f1                	mov    ecx,esi
c0002d82:	e8 12 fe ff ff       	call   c0002b99 <put_fat>
c0002d87:	89 f2                	mov    edx,esi
c0002d89:	85 c0                	test   eax,eax
c0002d8b:	74 ea                	je     c0002d77 <fill_first_frag+0x13>
c0002d8d:	eb 0b                	jmp    c0002d9a <fill_first_frag+0x36>
c0002d8f:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002d93:	31 c0                	xor    eax,eax
c0002d95:	eb 03                	jmp    c0002d9a <fill_first_frag+0x36>
c0002d97:	31 c0                	xor    eax,eax
c0002d99:	c3                   	ret    
c0002d9a:	5b                   	pop    ebx
c0002d9b:	5e                   	pop    esi
c0002d9c:	5f                   	pop    edi
c0002d9d:	c3                   	ret    

c0002d9e <get_fat>:
c0002d9e:	83 fa 01             	cmp    edx,0x1
c0002da1:	0f 86 db 01 00 00    	jbe    c0002f82 <get_fat+0x1e4>
c0002da7:	55                   	push   ebp
c0002da8:	b9 01 00 00 00       	mov    ecx,0x1
c0002dad:	57                   	push   edi
c0002dae:	56                   	push   esi
c0002daf:	53                   	push   ebx
c0002db0:	83 ec 1c             	sub    esp,0x1c
c0002db3:	8b 38                	mov    edi,DWORD PTR [eax]
c0002db5:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002db8:	0f 86 cc 01 00 00    	jbe    c0002f8a <get_fat+0x1ec>
c0002dbe:	89 c3                	mov    ebx,eax
c0002dc0:	8a 07                	mov    al,BYTE PTR [edi]
c0002dc2:	89 d6                	mov    esi,edx
c0002dc4:	3c 02                	cmp    al,0x2
c0002dc6:	0f 84 99 00 00 00    	je     c0002e65 <get_fat+0xc7>
c0002dcc:	77 09                	ja     c0002dd7 <get_fat+0x39>
c0002dce:	fe c8                	dec    al
c0002dd0:	74 1a                	je     c0002dec <get_fat+0x4e>
c0002dd2:	e9 b3 01 00 00       	jmp    c0002f8a <get_fat+0x1ec>
c0002dd7:	3c 03                	cmp    al,0x3
c0002dd9:	0f 84 b5 00 00 00    	je     c0002e94 <get_fat+0xf6>
c0002ddf:	3c 04                	cmp    al,0x4
c0002de1:	0f 84 e3 00 00 00    	je     c0002eca <get_fat+0x12c>
c0002de7:	e9 9e 01 00 00       	jmp    c0002f8a <get_fat+0x1ec>
c0002dec:	89 d3                	mov    ebx,edx
c0002dee:	31 c9                	xor    ecx,ecx
c0002df0:	d1 eb                	shr    ebx,1
c0002df2:	89 f8                	mov    eax,edi
c0002df4:	01 d3                	add    ebx,edx
c0002df6:	89 da                	mov    edx,ebx
c0002df8:	c1 ea 09             	shr    edx,0x9
c0002dfb:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002dfe:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e01:	e8 16 f4 ff ff       	call   c000221c <move_window>
c0002e06:	85 c0                	test   eax,eax
c0002e08:	74 08                	je     c0002e12 <get_fat+0x74>
c0002e0a:	83 c9 ff             	or     ecx,0xffffffff
c0002e0d:	e9 78 01 00 00       	jmp    c0002f8a <get_fat+0x1ec>
c0002e12:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0002e15:	31 c9                	xor    ecx,ecx
c0002e17:	89 ea                	mov    edx,ebp
c0002e19:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002e1f:	c1 ea 09             	shr    edx,0x9
c0002e22:	89 f8                	mov    eax,edi
c0002e24:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e27:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0002e2b:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e2e:	e8 e9 f3 ff ff       	call   c000221c <move_window>
c0002e33:	85 c0                	test   eax,eax
c0002e35:	75 d3                	jne    c0002e0a <get_fat+0x6c>
c0002e37:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e3d:	0f b6 c3             	movzx  eax,bl
c0002e40:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0002e45:	c1 e3 08             	shl    ebx,0x8
c0002e48:	09 c3                	or     ebx,eax
c0002e4a:	89 d9                	mov    ecx,ebx
c0002e4c:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0002e52:	83 e6 01             	and    esi,0x1
c0002e55:	0f 84 2f 01 00 00    	je     c0002f8a <get_fat+0x1ec>
c0002e5b:	89 d9                	mov    ecx,ebx
c0002e5d:	c1 e9 04             	shr    ecx,0x4
c0002e60:	e9 25 01 00 00       	jmp    c0002f8a <get_fat+0x1ec>
c0002e65:	c1 ea 08             	shr    edx,0x8
c0002e68:	31 c9                	xor    ecx,ecx
c0002e6a:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e6d:	89 f8                	mov    eax,edi
c0002e6f:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e72:	e8 a5 f3 ff ff       	call   c000221c <move_window>
c0002e77:	85 c0                	test   eax,eax
c0002e79:	75 8f                	jne    c0002e0a <get_fat+0x6c>
c0002e7b:	01 f6                	add    esi,esi
c0002e7d:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0002e83:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002e87:	e8 b9 eb ff ff       	call   c0001a45 <ld_word>
c0002e8c:	0f b7 c8             	movzx  ecx,ax
c0002e8f:	e9 f6 00 00 00       	jmp    c0002f8a <get_fat+0x1ec>
c0002e94:	c1 ea 07             	shr    edx,0x7
c0002e97:	31 c9                	xor    ecx,ecx
c0002e99:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e9c:	89 f8                	mov    eax,edi
c0002e9e:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002ea1:	e8 76 f3 ff ff       	call   c000221c <move_window>
c0002ea6:	85 c0                	test   eax,eax
c0002ea8:	0f 85 5c ff ff ff    	jne    c0002e0a <get_fat+0x6c>
c0002eae:	c1 e6 02             	shl    esi,0x2
c0002eb1:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002eb7:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002ebb:	e8 92 eb ff ff       	call   c0001a52 <ld_dword>
c0002ec0:	25 ff ff ff 0f       	and    eax,0xfffffff
c0002ec5:	e9 b4 00 00 00       	jmp    c0002f7e <get_fat+0x1e0>
c0002eca:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002ecd:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0002ed0:	89 d1                	mov    ecx,edx
c0002ed2:	09 c1                	or     ecx,eax
c0002ed4:	74 06                	je     c0002edc <get_fat+0x13e>
c0002ed6:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0002eda:	75 0f                	jne    c0002eeb <get_fat+0x14d>
c0002edc:	b9 01 00 00 00       	mov    ecx,0x1
c0002ee1:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c0002ee5:	0f 85 9f 00 00 00    	jne    c0002f8a <get_fat+0x1ec>
c0002eeb:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0002eef:	89 f5                	mov    ebp,esi
c0002ef1:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c0002ef6:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0002ef9:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0002efc:	80 f9 02             	cmp    cl,0x2
c0002eff:	75 35                	jne    c0002f36 <get_fat+0x198>
c0002f01:	83 c0 ff             	add    eax,0xffffffff
c0002f04:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0002f09:	83 d2 ff             	adc    edx,0xffffffff
c0002f0c:	31 db                	xor    ebx,ebx
c0002f0e:	53                   	push   ebx
c0002f0f:	51                   	push   ecx
c0002f10:	0f ac d0 09          	shrd   eax,edx,0x9
c0002f14:	c1 ea 09             	shr    edx,0x9
c0002f17:	52                   	push   edx
c0002f18:	50                   	push   eax
c0002f19:	e8 ae c4 01 00       	call   c001f3cc <__udivdi3>
c0002f1e:	83 c4 10             	add    esp,0x10
c0002f21:	b9 01 00 00 00       	mov    ecx,0x1
c0002f26:	39 c5                	cmp    ebp,eax
c0002f28:	77 60                	ja     c0002f8a <get_fat+0x1ec>
c0002f2a:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002f2f:	74 59                	je     c0002f8a <get_fat+0x1ec>
c0002f31:	8d 4e 01             	lea    ecx,[esi+0x1]
c0002f34:	eb 54                	jmp    c0002f8a <get_fat+0x1ec>
c0002f36:	80 f9 03             	cmp    cl,0x3
c0002f39:	75 05                	jne    c0002f40 <get_fat+0x1a2>
c0002f3b:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0002f3e:	77 f1                	ja     c0002f31 <get_fat+0x193>
c0002f40:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002f45:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0002f49:	75 3f                	jne    c0002f8a <get_fat+0x1ec>
c0002f4b:	89 f2                	mov    edx,esi
c0002f4d:	31 c9                	xor    ecx,ecx
c0002f4f:	c1 ea 07             	shr    edx,0x7
c0002f52:	89 f8                	mov    eax,edi
c0002f54:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f57:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f5a:	e8 bd f2 ff ff       	call   c000221c <move_window>
c0002f5f:	85 c0                	test   eax,eax
c0002f61:	0f 85 a3 fe ff ff    	jne    c0002e0a <get_fat+0x6c>
c0002f67:	c1 e6 02             	shl    esi,0x2
c0002f6a:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002f70:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002f74:	e8 d9 ea ff ff       	call   c0001a52 <ld_dword>
c0002f79:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0002f7e:	89 c1                	mov    ecx,eax
c0002f80:	eb 08                	jmp    c0002f8a <get_fat+0x1ec>
c0002f82:	b9 01 00 00 00       	mov    ecx,0x1
c0002f87:	89 c8                	mov    eax,ecx
c0002f89:	c3                   	ret    
c0002f8a:	83 c4 1c             	add    esp,0x1c
c0002f8d:	89 c8                	mov    eax,ecx
c0002f8f:	5b                   	pop    ebx
c0002f90:	5e                   	pop    esi
c0002f91:	5f                   	pop    edi
c0002f92:	5d                   	pop    ebp
c0002f93:	c3                   	ret    

c0002f94 <dir_sdi>:
c0002f94:	55                   	push   ebp
c0002f95:	57                   	push   edi
c0002f96:	56                   	push   esi
c0002f97:	53                   	push   ebx
c0002f98:	89 c3                	mov    ebx,eax
c0002f9a:	83 ec 1c             	sub    esp,0x1c
c0002f9d:	8b 38                	mov    edi,DWORD PTR [eax]
c0002f9f:	31 c0                	xor    eax,eax
c0002fa1:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0002fa4:	0f 94 c0             	sete   al
c0002fa7:	48                   	dec    eax
c0002fa8:	25 00 00 20 f0       	and    eax,0xf0200000
c0002fad:	05 00 00 00 10       	add    eax,0x10000000
c0002fb2:	39 d0                	cmp    eax,edx
c0002fb4:	77 0a                	ja     c0002fc0 <dir_sdi+0x2c>
c0002fb6:	b8 02 00 00 00       	mov    eax,0x2
c0002fbb:	e9 c4 00 00 00       	jmp    c0003084 <dir_sdi+0xf0>
c0002fc0:	89 d6                	mov    esi,edx
c0002fc2:	f6 c2 1f             	test   dl,0x1f
c0002fc5:	75 ef                	jne    c0002fb6 <dir_sdi+0x22>
c0002fc7:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0002fca:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c0002fcd:	85 c9                	test   ecx,ecx
c0002fcf:	75 2d                	jne    c0002ffe <dir_sdi+0x6a>
c0002fd1:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0002fd4:	77 1b                	ja     c0002ff1 <dir_sdi+0x5d>
c0002fd6:	89 f2                	mov    edx,esi
c0002fd8:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0002fdc:	c1 ea 05             	shr    edx,0x5
c0002fdf:	39 c2                	cmp    edx,eax
c0002fe1:	73 d3                	jae    c0002fb6 <dir_sdi+0x22>
c0002fe3:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0002fe6:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c0002fe9:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0002fec:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002fef:	eb 4b                	jmp    c000303c <dir_sdi+0xa8>
c0002ff1:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0002ff4:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002ff8:	85 c0                	test   eax,eax
c0002ffa:	74 da                	je     c0002fd6 <dir_sdi+0x42>
c0002ffc:	89 c1                	mov    ecx,eax
c0002ffe:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0003002:	c1 e5 09             	shl    ebp,0x9
c0003005:	89 ca                	mov    edx,ecx
c0003007:	39 ee                	cmp    esi,ebp
c0003009:	72 1c                	jb     c0003027 <dir_sdi+0x93>
c000300b:	89 d8                	mov    eax,ebx
c000300d:	e8 8c fd ff ff       	call   c0002d9e <get_fat>
c0003012:	89 c1                	mov    ecx,eax
c0003014:	83 f8 ff             	cmp    eax,0xffffffff
c0003017:	74 66                	je     c000307f <dir_sdi+0xeb>
c0003019:	83 f8 01             	cmp    eax,0x1
c000301c:	76 98                	jbe    c0002fb6 <dir_sdi+0x22>
c000301e:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0003021:	76 93                	jbe    c0002fb6 <dir_sdi+0x22>
c0003023:	29 ee                	sub    esi,ebp
c0003025:	eb de                	jmp    c0003005 <dir_sdi+0x71>
c0003027:	89 f8                	mov    eax,edi
c0003029:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000302d:	e8 ac ec ff ff       	call   c0001cde <clst2sect>
c0003032:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003036:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003039:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000303c:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000303f:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0003042:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0003045:	89 d1                	mov    ecx,edx
c0003047:	09 c1                	or     ecx,eax
c0003049:	0f 84 67 ff ff ff    	je     c0002fb6 <dir_sdi+0x22>
c000304f:	89 f1                	mov    ecx,esi
c0003051:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003059:	c1 e9 09             	shr    ecx,0x9
c000305c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003060:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003064:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003068:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000306e:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003071:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003075:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003078:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000307b:	31 c0                	xor    eax,eax
c000307d:	eb 05                	jmp    c0003084 <dir_sdi+0xf0>
c000307f:	b8 01 00 00 00       	mov    eax,0x1
c0003084:	83 c4 1c             	add    esp,0x1c
c0003087:	5b                   	pop    ebx
c0003088:	5e                   	pop    esi
c0003089:	5f                   	pop    edi
c000308a:	5d                   	pop    ebp
c000308b:	c3                   	ret    

c000308c <create_chain>:
c000308c:	55                   	push   ebp
c000308d:	89 c5                	mov    ebp,eax
c000308f:	57                   	push   edi
c0003090:	56                   	push   esi
c0003091:	53                   	push   ebx
c0003092:	83 ec 1c             	sub    esp,0x1c
c0003095:	85 d2                	test   edx,edx
c0003097:	8b 30                	mov    esi,DWORD PTR [eax]
c0003099:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000309d:	75 0e                	jne    c00030ad <create_chain+0x21>
c000309f:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00030a2:	85 ff                	test   edi,edi
c00030a4:	74 39                	je     c00030df <create_chain+0x53>
c00030a6:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c00030a9:	77 39                	ja     c00030e4 <create_chain+0x58>
c00030ab:	eb 32                	jmp    c00030df <create_chain+0x53>
c00030ad:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00030b1:	e8 e8 fc ff ff       	call   c0002d9e <get_fat>
c00030b6:	89 c3                	mov    ebx,eax
c00030b8:	83 f8 01             	cmp    eax,0x1
c00030bb:	77 0a                	ja     c00030c7 <create_chain+0x3b>
c00030bd:	bb 01 00 00 00       	mov    ebx,0x1
c00030c2:	e9 bc 01 00 00       	jmp    c0003283 <create_chain+0x1f7>
c00030c7:	83 f8 ff             	cmp    eax,0xffffffff
c00030ca:	0f 84 60 01 00 00    	je     c0003230 <create_chain+0x1a4>
c00030d0:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00030d3:	0f 87 aa 01 00 00    	ja     c0003283 <create_chain+0x1f7>
c00030d9:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00030dd:	eb 05                	jmp    c00030e4 <create_chain+0x58>
c00030df:	bf 01 00 00 00       	mov    edi,0x1
c00030e4:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c00030e8:	75 07                	jne    c00030f1 <create_chain+0x65>
c00030ea:	31 db                	xor    ebx,ebx
c00030ec:	e9 92 01 00 00       	jmp    c0003283 <create_chain+0x1f7>
c00030f1:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00030f4:	75 74                	jne    c000316a <create_chain+0xde>
c00030f6:	b9 01 00 00 00       	mov    ecx,0x1
c00030fb:	89 fa                	mov    edx,edi
c00030fd:	89 f0                	mov    eax,esi
c00030ff:	e8 2d f9 ff ff       	call   c0002a31 <find_bitmap>
c0003104:	89 c3                	mov    ebx,eax
c0003106:	8d 40 ff             	lea    eax,[eax-0x1]
c0003109:	83 f8 fd             	cmp    eax,0xfffffffd
c000310c:	0f 87 71 01 00 00    	ja     c0003283 <create_chain+0x1f7>
c0003112:	83 ec 0c             	sub    esp,0xc
c0003115:	b9 01 00 00 00       	mov    ecx,0x1
c000311a:	89 da                	mov    edx,ebx
c000311c:	89 f0                	mov    eax,esi
c000311e:	6a 01                	push   0x1
c0003120:	e8 bf f9 ff ff       	call   c0002ae4 <change_bitmap>
c0003125:	83 c4 10             	add    esp,0x10
c0003128:	83 f8 02             	cmp    eax,0x2
c000312b:	74 90                	je     c00030bd <create_chain+0x31>
c000312d:	83 f8 01             	cmp    eax,0x1
c0003130:	0f 84 fa 00 00 00    	je     c0003230 <create_chain+0x1a4>
c0003136:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000313b:	75 09                	jne    c0003146 <create_chain+0xba>
c000313d:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c0003141:	e9 0e 01 00 00       	jmp    c0003254 <create_chain+0x1c8>
c0003146:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c000314a:	0f 85 e9 00 00 00    	jne    c0003239 <create_chain+0x1ad>
c0003150:	8d 57 01             	lea    edx,[edi+0x1]
c0003153:	39 da                	cmp    edx,ebx
c0003155:	0f 84 f9 00 00 00    	je     c0003254 <create_chain+0x1c8>
c000315b:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c000315e:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c0003162:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c0003165:	e9 cf 00 00 00       	jmp    c0003239 <create_chain+0x1ad>
c000316a:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c000316e:	75 41                	jne    c00031b1 <create_chain+0x125>
c0003170:	8d 5f 01             	lea    ebx,[edi+0x1]
c0003173:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003176:	77 05                	ja     c000317d <create_chain+0xf1>
c0003178:	bb 02 00 00 00       	mov    ebx,0x2
c000317d:	89 da                	mov    edx,ebx
c000317f:	89 e8                	mov    eax,ebp
c0003181:	e8 18 fc ff ff       	call   c0002d9e <get_fat>
c0003186:	83 f8 01             	cmp    eax,0x1
c0003189:	0f 84 a6 00 00 00    	je     c0003235 <create_chain+0x1a9>
c000318f:	83 f8 ff             	cmp    eax,0xffffffff
c0003192:	0f 84 9d 00 00 00    	je     c0003235 <create_chain+0x1a9>
c0003198:	85 c0                	test   eax,eax
c000319a:	74 11                	je     c00031ad <create_chain+0x121>
c000319c:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000319f:	83 f8 01             	cmp    eax,0x1
c00031a2:	76 0d                	jbe    c00031b1 <create_chain+0x125>
c00031a4:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00031a7:	76 08                	jbe    c00031b1 <create_chain+0x125>
c00031a9:	89 c7                	mov    edi,eax
c00031ab:	eb 04                	jmp    c00031b1 <create_chain+0x125>
c00031ad:	85 db                	test   ebx,ebx
c00031af:	75 36                	jne    c00031e7 <create_chain+0x15b>
c00031b1:	89 fb                	mov    ebx,edi
c00031b3:	43                   	inc    ebx
c00031b4:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00031b7:	77 0e                	ja     c00031c7 <create_chain+0x13b>
c00031b9:	83 ff 01             	cmp    edi,0x1
c00031bc:	0f 86 28 ff ff ff    	jbe    c00030ea <create_chain+0x5e>
c00031c2:	bb 02 00 00 00       	mov    ebx,0x2
c00031c7:	89 da                	mov    edx,ebx
c00031c9:	89 e8                	mov    eax,ebp
c00031cb:	e8 ce fb ff ff       	call   c0002d9e <get_fat>
c00031d0:	85 c0                	test   eax,eax
c00031d2:	74 13                	je     c00031e7 <create_chain+0x15b>
c00031d4:	83 f8 01             	cmp    eax,0x1
c00031d7:	74 5c                	je     c0003235 <create_chain+0x1a9>
c00031d9:	83 f8 ff             	cmp    eax,0xffffffff
c00031dc:	74 57                	je     c0003235 <create_chain+0x1a9>
c00031de:	39 fb                	cmp    ebx,edi
c00031e0:	75 d1                	jne    c00031b3 <create_chain+0x127>
c00031e2:	e9 03 ff ff ff       	jmp    c00030ea <create_chain+0x5e>
c00031e7:	83 c9 ff             	or     ecx,0xffffffff
c00031ea:	89 da                	mov    edx,ebx
c00031ec:	89 f0                	mov    eax,esi
c00031ee:	e8 a6 f9 ff ff       	call   c0002b99 <put_fat>
c00031f3:	85 c0                	test   eax,eax
c00031f5:	75 14                	jne    c000320b <create_chain+0x17f>
c00031f7:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00031fc:	74 0d                	je     c000320b <create_chain+0x17f>
c00031fe:	89 d9                	mov    ecx,ebx
c0003200:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003204:	89 f0                	mov    eax,esi
c0003206:	e8 8e f9 ff ff       	call   c0002b99 <put_fat>
c000320b:	85 c0                	test   eax,eax
c000320d:	75 1a                	jne    c0003229 <create_chain+0x19d>
c000320f:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003212:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0003215:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003218:	8d 51 fe             	lea    edx,[ecx-0x2]
c000321b:	39 d0                	cmp    eax,edx
c000321d:	77 04                	ja     c0003223 <create_chain+0x197>
c000321f:	48                   	dec    eax
c0003220:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003223:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003227:	eb 5a                	jmp    c0003283 <create_chain+0x1f7>
c0003229:	48                   	dec    eax
c000322a:	0f 85 8d fe ff ff    	jne    c00030bd <create_chain+0x31>
c0003230:	83 cb ff             	or     ebx,0xffffffff
c0003233:	eb 4e                	jmp    c0003283 <create_chain+0x1f7>
c0003235:	89 c3                	mov    ebx,eax
c0003237:	eb 4a                	jmp    c0003283 <create_chain+0x1f7>
c0003239:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000323d:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003240:	41                   	inc    ecx
c0003241:	39 d9                	cmp    ecx,ebx
c0003243:	75 19                	jne    c000325e <create_chain+0x1d2>
c0003245:	b9 02 00 00 00       	mov    ecx,0x2
c000324a:	85 d2                	test   edx,edx
c000324c:	74 03                	je     c0003251 <create_chain+0x1c5>
c000324e:	8d 4a 01             	lea    ecx,[edx+0x1]
c0003251:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0003254:	85 c0                	test   eax,eax
c0003256:	0f 85 61 fe ff ff    	jne    c00030bd <create_chain+0x31>
c000325c:	eb b1                	jmp    c000320f <create_chain+0x183>
c000325e:	85 d2                	test   edx,edx
c0003260:	75 07                	jne    c0003269 <create_chain+0x1dd>
c0003262:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003269:	89 d9                	mov    ecx,ebx
c000326b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000326f:	89 e8                	mov    eax,ebp
c0003271:	e8 b9 fa ff ff       	call   c0002d2f <fill_last_frag>
c0003276:	85 c0                	test   eax,eax
c0003278:	75 af                	jne    c0003229 <create_chain+0x19d>
c000327a:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003281:	eb 8c                	jmp    c000320f <create_chain+0x183>
c0003283:	83 c4 1c             	add    esp,0x1c
c0003286:	89 d8                	mov    eax,ebx
c0003288:	5b                   	pop    ebx
c0003289:	5e                   	pop    esi
c000328a:	5f                   	pop    edi
c000328b:	5d                   	pop    ebp
c000328c:	c3                   	ret    

c000328d <remove_chain>:
c000328d:	55                   	push   ebp
c000328e:	57                   	push   edi
c000328f:	56                   	push   esi
c0003290:	53                   	push   ebx
c0003291:	83 ec 1c             	sub    esp,0x1c
c0003294:	83 fa 01             	cmp    edx,0x1
c0003297:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003299:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000329d:	77 0a                	ja     c00032a9 <remove_chain+0x1c>
c000329f:	b8 02 00 00 00       	mov    eax,0x2
c00032a4:	e9 24 01 00 00       	jmp    c00033cd <remove_chain+0x140>
c00032a9:	89 d6                	mov    esi,edx
c00032ab:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00032ae:	76 ef                	jbe    c000329f <remove_chain+0x12>
c00032b0:	89 c7                	mov    edi,eax
c00032b2:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00032b7:	75 06                	jne    c00032bf <remove_chain+0x32>
c00032b9:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00032bd:	eb 54                	jmp    c0003313 <remove_chain+0x86>
c00032bf:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00032c2:	75 06                	jne    c00032ca <remove_chain+0x3d>
c00032c4:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00032c8:	74 ef                	je     c00032b9 <remove_chain+0x2c>
c00032ca:	83 c9 ff             	or     ecx,0xffffffff
c00032cd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00032d1:	89 d8                	mov    eax,ebx
c00032d3:	e8 c1 f8 ff ff       	call   c0002b99 <put_fat>
c00032d8:	85 c0                	test   eax,eax
c00032da:	74 dd                	je     c00032b9 <remove_chain+0x2c>
c00032dc:	e9 ec 00 00 00       	jmp    c00033cd <remove_chain+0x140>
c00032e1:	83 f8 01             	cmp    eax,0x1
c00032e4:	74 b9                	je     c000329f <remove_chain+0x12>
c00032e6:	83 f8 ff             	cmp    eax,0xffffffff
c00032e9:	74 6d                	je     c0003358 <remove_chain+0xcb>
c00032eb:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00032ee:	75 6f                	jne    c000335f <remove_chain+0xd2>
c00032f0:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c00032f3:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00032f6:	8d 51 fe             	lea    edx,[ecx-0x2]
c00032f9:	39 d0                	cmp    eax,edx
c00032fb:	73 08                	jae    c0003305 <remove_chain+0x78>
c00032fd:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003301:	40                   	inc    eax
c0003302:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003305:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003308:	39 e9                	cmp    ecx,ebp
c000330a:	75 64                	jne    c0003370 <remove_chain+0xe3>
c000330c:	89 ee                	mov    esi,ebp
c000330e:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003311:	76 0f                	jbe    c0003322 <remove_chain+0x95>
c0003313:	89 f2                	mov    edx,esi
c0003315:	89 f8                	mov    eax,edi
c0003317:	e8 82 fa ff ff       	call   c0002d9e <get_fat>
c000331c:	89 c5                	mov    ebp,eax
c000331e:	85 c0                	test   eax,eax
c0003320:	75 bf                	jne    c00032e1 <remove_chain+0x54>
c0003322:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003325:	0f 85 a0 00 00 00    	jne    c00033cb <remove_chain+0x13e>
c000332b:	eb 6c                	jmp    c0003399 <remove_chain+0x10c>
c000332d:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003330:	84 c0                	test   al,al
c0003332:	75 7d                	jne    c00033b1 <remove_chain+0x124>
c0003334:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0003337:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c000333b:	0f 84 86 00 00 00    	je     c00033c7 <remove_chain+0x13a>
c0003341:	89 da                	mov    edx,ebx
c0003343:	89 f8                	mov    eax,edi
c0003345:	e8 54 fa ff ff       	call   c0002d9e <get_fat>
c000334a:	83 f8 01             	cmp    eax,0x1
c000334d:	0f 86 4c ff ff ff    	jbe    c000329f <remove_chain+0x12>
c0003353:	83 f8 ff             	cmp    eax,0xffffffff
c0003356:	75 4e                	jne    c00033a6 <remove_chain+0x119>
c0003358:	b8 01 00 00 00       	mov    eax,0x1
c000335d:	eb 6e                	jmp    c00033cd <remove_chain+0x140>
c000335f:	31 c9                	xor    ecx,ecx
c0003361:	89 f2                	mov    edx,esi
c0003363:	89 d8                	mov    eax,ebx
c0003365:	e8 2f f8 ff ff       	call   c0002b99 <put_fat>
c000336a:	85 c0                	test   eax,eax
c000336c:	74 82                	je     c00032f0 <remove_chain+0x63>
c000336e:	eb 5d                	jmp    c00033cd <remove_chain+0x140>
c0003370:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003373:	75 1b                	jne    c0003390 <remove_chain+0x103>
c0003375:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0003379:	83 ec 0c             	sub    esp,0xc
c000337c:	6a 00                	push   0x0
c000337e:	89 d8                	mov    eax,ebx
c0003380:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003384:	e8 5b f7 ff ff       	call   c0002ae4 <change_bitmap>
c0003389:	83 c4 10             	add    esp,0x10
c000338c:	85 c0                	test   eax,eax
c000338e:	75 3d                	jne    c00033cd <remove_chain+0x140>
c0003390:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0003394:	e9 73 ff ff ff       	jmp    c000330c <remove_chain+0x7f>
c0003399:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000339e:	75 8d                	jne    c000332d <remove_chain+0xa0>
c00033a0:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00033a4:	eb 25                	jmp    c00033cb <remove_chain+0x13e>
c00033a6:	8d 53 01             	lea    edx,[ebx+0x1]
c00033a9:	89 c3                	mov    ebx,eax
c00033ab:	39 c2                	cmp    edx,eax
c00033ad:	74 88                	je     c0003337 <remove_chain+0xaa>
c00033af:	eb 1a                	jmp    c00033cb <remove_chain+0x13e>
c00033b1:	3c 03                	cmp    al,0x3
c00033b3:	75 16                	jne    c00033cb <remove_chain+0x13e>
c00033b5:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00033b8:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00033bc:	77 0d                	ja     c00033cb <remove_chain+0x13e>
c00033be:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00033c1:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00033c5:	72 04                	jb     c00033cb <remove_chain+0x13e>
c00033c7:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00033cb:	31 c0                	xor    eax,eax
c00033cd:	83 c4 1c             	add    esp,0x1c
c00033d0:	5b                   	pop    ebx
c00033d1:	5e                   	pop    esi
c00033d2:	5f                   	pop    edi
c00033d3:	5d                   	pop    ebp
c00033d4:	c3                   	ret    

c00033d5 <dir_clear>:
c00033d5:	55                   	push   ebp
c00033d6:	57                   	push   edi
c00033d7:	56                   	push   esi
c00033d8:	89 c6                	mov    esi,eax
c00033da:	53                   	push   ebx
c00033db:	83 ec 1c             	sub    esp,0x1c
c00033de:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00033e2:	e8 a1 ed ff ff       	call   c0002188 <sync_window>
c00033e7:	85 c0                	test   eax,eax
c00033e9:	0f 85 de 00 00 00    	jne    c00034cd <dir_clear+0xf8>
c00033ef:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00033f3:	89 f0                	mov    eax,esi
c00033f5:	e8 e4 e8 ff ff       	call   c0001cde <clst2sect>
c00033fa:	8d 6e 54             	lea    ebp,[esi+0x54]
c00033fd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003401:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003405:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c0003408:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c000340b:	b9 00 02 00 00       	mov    ecx,0x200
c0003410:	31 d2                	xor    edx,edx
c0003412:	89 e8                	mov    eax,ebp
c0003414:	e8 c0 e6 ff ff       	call   c0001ad9 <mem_set>
c0003419:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000341d:	c1 e3 09             	shl    ebx,0x9
c0003420:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0003426:	76 1f                	jbe    c0003447 <dir_clear+0x72>
c0003428:	bb 00 80 00 00       	mov    ebx,0x8000
c000342d:	eb 18                	jmp    c0003447 <dir_clear+0x72>
c000342f:	83 ec 0c             	sub    esp,0xc
c0003432:	53                   	push   ebx
c0003433:	e8 f3 4d 00 00       	call   c000822b <ff_memalloc>
c0003438:	83 c4 10             	add    esp,0x10
c000343b:	89 c7                	mov    edi,eax
c000343d:	85 c0                	test   eax,eax
c000343f:	0f 85 8f 00 00 00    	jne    c00034d4 <dir_clear+0xff>
c0003445:	d1 eb                	shr    ebx,1
c0003447:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000344d:	77 e0                	ja     c000342f <dir_clear+0x5a>
c000344f:	31 db                	xor    ebx,ebx
c0003451:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003455:	39 d8                	cmp    eax,ebx
c0003457:	76 66                	jbe    c00034bf <dir_clear+0xea>
c0003459:	83 ec 0c             	sub    esp,0xc
c000345c:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003460:	6a 01                	push   0x1
c0003462:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003466:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000346a:	55                   	push   ebp
c000346b:	50                   	push   eax
c000346c:	e8 9f e5 ff ff       	call   c0001a10 <disk_write>
c0003471:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c0003476:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c000347b:	83 c4 20             	add    esp,0x20
c000347e:	85 c0                	test   eax,eax
c0003480:	75 3d                	jne    c00034bf <dir_clear+0xea>
c0003482:	43                   	inc    ebx
c0003483:	eb cc                	jmp    c0003451 <dir_clear+0x7c>
c0003485:	83 ec 0c             	sub    esp,0xc
c0003488:	89 d8                	mov    eax,ebx
c000348a:	31 d2                	xor    edx,edx
c000348c:	55                   	push   ebp
c000348d:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0003491:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0003495:	52                   	push   edx
c0003496:	50                   	push   eax
c0003497:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000349b:	57                   	push   edi
c000349c:	50                   	push   eax
c000349d:	e8 6e e5 ff ff       	call   c0001a10 <disk_write>
c00034a2:	83 c4 20             	add    esp,0x20
c00034a5:	85 c0                	test   eax,eax
c00034a7:	75 0a                	jne    c00034b3 <dir_clear+0xde>
c00034a9:	01 eb                	add    ebx,ebp
c00034ab:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00034af:	39 d8                	cmp    eax,ebx
c00034b1:	77 d2                	ja     c0003485 <dir_clear+0xb0>
c00034b3:	83 ec 0c             	sub    esp,0xc
c00034b6:	57                   	push   edi
c00034b7:	e8 85 4d 00 00       	call   c0008241 <ff_memfree>
c00034bc:	83 c4 10             	add    esp,0x10
c00034bf:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00034c3:	39 d8                	cmp    eax,ebx
c00034c5:	0f 95 c0             	setne  al
c00034c8:	0f b6 c0             	movzx  eax,al
c00034cb:	eb 19                	jmp    c00034e6 <dir_clear+0x111>
c00034cd:	b8 01 00 00 00       	mov    eax,0x1
c00034d2:	eb 12                	jmp    c00034e6 <dir_clear+0x111>
c00034d4:	89 d9                	mov    ecx,ebx
c00034d6:	31 d2                	xor    edx,edx
c00034d8:	c1 eb 09             	shr    ebx,0x9
c00034db:	e8 f9 e5 ff ff       	call   c0001ad9 <mem_set>
c00034e0:	89 dd                	mov    ebp,ebx
c00034e2:	31 db                	xor    ebx,ebx
c00034e4:	eb c5                	jmp    c00034ab <dir_clear+0xd6>
c00034e6:	83 c4 1c             	add    esp,0x1c
c00034e9:	5b                   	pop    ebx
c00034ea:	5e                   	pop    esi
c00034eb:	5f                   	pop    edi
c00034ec:	5d                   	pop    ebp
c00034ed:	c3                   	ret    

c00034ee <dir_next>:
c00034ee:	55                   	push   ebp
c00034ef:	57                   	push   edi
c00034f0:	56                   	push   esi
c00034f1:	53                   	push   ebx
c00034f2:	89 c3                	mov    ebx,eax
c00034f4:	83 ec 1c             	sub    esp,0x1c
c00034f7:	8b 28                	mov    ebp,DWORD PTR [eax]
c00034f9:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00034fc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003500:	8d 78 20             	lea    edi,[eax+0x20]
c0003503:	31 c0                	xor    eax,eax
c0003505:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0003509:	0f 94 c0             	sete   al
c000350c:	48                   	dec    eax
c000350d:	25 00 00 20 f0       	and    eax,0xf0200000
c0003512:	05 00 00 00 10       	add    eax,0x10000000
c0003517:	39 f8                	cmp    eax,edi
c0003519:	77 0e                	ja     c0003529 <dir_next+0x3b>
c000351b:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003522:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003529:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000352c:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000352f:	89 ce                	mov    esi,ecx
c0003531:	b8 04 00 00 00       	mov    eax,0x4
c0003536:	09 d6                	or     esi,edx
c0003538:	0f 84 da 00 00 00    	je     c0003618 <dir_next+0x12a>
c000353e:	89 f8                	mov    eax,edi
c0003540:	25 ff 01 00 00       	and    eax,0x1ff
c0003545:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003549:	0f 85 b9 00 00 00    	jne    c0003608 <dir_next+0x11a>
c000354f:	83 c2 01             	add    edx,0x1
c0003552:	83 d1 00             	adc    ecx,0x0
c0003555:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0003558:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000355b:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c000355e:	85 d2                	test   edx,edx
c0003560:	75 29                	jne    c000358b <dir_next+0x9d>
c0003562:	89 fa                	mov    edx,edi
c0003564:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003568:	c1 ea 05             	shr    edx,0x5
c000356b:	39 c2                	cmp    edx,eax
c000356d:	0f 82 95 00 00 00    	jb     c0003608 <dir_next+0x11a>
c0003573:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000357a:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003581:	b8 04 00 00 00       	mov    eax,0x4
c0003586:	e9 8d 00 00 00       	jmp    c0003618 <dir_next+0x12a>
c000358b:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000358f:	89 f9                	mov    ecx,edi
c0003591:	48                   	dec    eax
c0003592:	c1 e9 09             	shr    ecx,0x9
c0003595:	85 c8                	test   eax,ecx
c0003597:	75 6f                	jne    c0003608 <dir_next+0x11a>
c0003599:	89 d8                	mov    eax,ebx
c000359b:	e8 fe f7 ff ff       	call   c0002d9e <get_fat>
c00035a0:	89 c6                	mov    esi,eax
c00035a2:	83 f8 01             	cmp    eax,0x1
c00035a5:	77 07                	ja     c00035ae <dir_next+0xc0>
c00035a7:	b8 02 00 00 00       	mov    eax,0x2
c00035ac:	eb 6a                	jmp    c0003618 <dir_next+0x12a>
c00035ae:	83 f8 ff             	cmp    eax,0xffffffff
c00035b1:	75 07                	jne    c00035ba <dir_next+0xcc>
c00035b3:	b8 01 00 00 00       	mov    eax,0x1
c00035b8:	eb 5e                	jmp    c0003618 <dir_next+0x12a>
c00035ba:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00035bd:	77 37                	ja     c00035f6 <dir_next+0x108>
c00035bf:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00035c4:	74 ad                	je     c0003573 <dir_next+0x85>
c00035c6:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00035c9:	89 d8                	mov    eax,ebx
c00035cb:	e8 bc fa ff ff       	call   c000308c <create_chain>
c00035d0:	89 c6                	mov    esi,eax
c00035d2:	b8 07 00 00 00       	mov    eax,0x7
c00035d7:	85 f6                	test   esi,esi
c00035d9:	74 3d                	je     c0003618 <dir_next+0x12a>
c00035db:	83 fe 01             	cmp    esi,0x1
c00035de:	74 c7                	je     c00035a7 <dir_next+0xb9>
c00035e0:	83 fe ff             	cmp    esi,0xffffffff
c00035e3:	74 ce                	je     c00035b3 <dir_next+0xc5>
c00035e5:	89 f2                	mov    edx,esi
c00035e7:	89 e8                	mov    eax,ebp
c00035e9:	e8 e7 fd ff ff       	call   c00033d5 <dir_clear>
c00035ee:	85 c0                	test   eax,eax
c00035f0:	75 c1                	jne    c00035b3 <dir_next+0xc5>
c00035f2:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c00035f6:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00035f9:	89 f2                	mov    edx,esi
c00035fb:	89 e8                	mov    eax,ebp
c00035fd:	e8 dc e6 ff ff       	call   c0001cde <clst2sect>
c0003602:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003605:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003608:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000360c:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c000360f:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003613:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003616:	31 c0                	xor    eax,eax
c0003618:	83 c4 1c             	add    esp,0x1c
c000361b:	5b                   	pop    ebx
c000361c:	5e                   	pop    esi
c000361d:	5f                   	pop    edi
c000361e:	5d                   	pop    ebp
c000361f:	c3                   	ret    

c0003620 <load_xdir>:
c0003620:	55                   	push   ebp
c0003621:	57                   	push   edi
c0003622:	56                   	push   esi
c0003623:	89 c6                	mov    esi,eax
c0003625:	53                   	push   ebx
c0003626:	83 ec 1c             	sub    esp,0x1c
c0003629:	8b 00                	mov    eax,DWORD PTR [eax]
c000362b:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000362e:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003631:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003634:	e8 e3 eb ff ff       	call   c000221c <move_window>
c0003639:	89 c3                	mov    ebx,eax
c000363b:	85 c0                	test   eax,eax
c000363d:	0f 85 0c 01 00 00    	jne    c000374f <load_xdir+0x12f>
c0003643:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003646:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003649:	0f 85 fb 00 00 00    	jne    c000374a <load_xdir+0x12a>
c000364f:	89 f8                	mov    eax,edi
c0003651:	b9 20 00 00 00       	mov    ecx,0x20
c0003656:	e8 69 e4 ff ff       	call   c0001ac4 <mem_cpy>
c000365b:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c000365f:	40                   	inc    eax
c0003660:	c1 e0 05             	shl    eax,0x5
c0003663:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003667:	83 e8 60             	sub    eax,0x60
c000366a:	3d 00 02 00 00       	cmp    eax,0x200
c000366f:	0f 87 d5 00 00 00    	ja     c000374a <load_xdir+0x12a>
c0003675:	31 d2                	xor    edx,edx
c0003677:	89 f0                	mov    eax,esi
c0003679:	e8 70 fe ff ff       	call   c00034ee <dir_next>
c000367e:	89 c3                	mov    ebx,eax
c0003680:	83 f8 04             	cmp    eax,0x4
c0003683:	0f 84 c1 00 00 00    	je     c000374a <load_xdir+0x12a>
c0003689:	85 c0                	test   eax,eax
c000368b:	0f 85 be 00 00 00    	jne    c000374f <load_xdir+0x12f>
c0003691:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003694:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003697:	8b 06                	mov    eax,DWORD PTR [esi]
c0003699:	e8 7e eb ff ff       	call   c000221c <move_window>
c000369e:	89 c3                	mov    ebx,eax
c00036a0:	85 c0                	test   eax,eax
c00036a2:	0f 85 a7 00 00 00    	jne    c000374f <load_xdir+0x12f>
c00036a8:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00036ab:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00036ae:	0f 85 96 00 00 00    	jne    c000374a <load_xdir+0x12a>
c00036b4:	8d 47 20             	lea    eax,[edi+0x20]
c00036b7:	b9 20 00 00 00       	mov    ecx,0x20
c00036bc:	e8 03 e4 ff ff       	call   c0001ac4 <mem_cpy>
c00036c1:	31 d2                	xor    edx,edx
c00036c3:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00036c7:	b9 0f 00 00 00       	mov    ecx,0xf
c00036cc:	83 c0 2c             	add    eax,0x2c
c00036cf:	f7 f1                	div    ecx
c00036d1:	c1 e0 05             	shl    eax,0x5
c00036d4:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00036d8:	77 70                	ja     c000374a <load_xdir+0x12a>
c00036da:	bd 40 00 00 00       	mov    ebp,0x40
c00036df:	31 d2                	xor    edx,edx
c00036e1:	89 f0                	mov    eax,esi
c00036e3:	e8 06 fe ff ff       	call   c00034ee <dir_next>
c00036e8:	89 c3                	mov    ebx,eax
c00036ea:	83 f8 04             	cmp    eax,0x4
c00036ed:	74 5b                	je     c000374a <load_xdir+0x12a>
c00036ef:	85 c0                	test   eax,eax
c00036f1:	75 5c                	jne    c000374f <load_xdir+0x12f>
c00036f3:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00036f6:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00036f9:	8b 06                	mov    eax,DWORD PTR [esi]
c00036fb:	e8 1c eb ff ff       	call   c000221c <move_window>
c0003700:	89 c3                	mov    ebx,eax
c0003702:	85 c0                	test   eax,eax
c0003704:	75 49                	jne    c000374f <load_xdir+0x12f>
c0003706:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003709:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c000370c:	75 3c                	jne    c000374a <load_xdir+0x12a>
c000370e:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003714:	77 0d                	ja     c0003723 <load_xdir+0x103>
c0003716:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003719:	b9 20 00 00 00       	mov    ecx,0x20
c000371e:	e8 a1 e3 ff ff       	call   c0001ac4 <mem_cpy>
c0003723:	83 c5 20             	add    ebp,0x20
c0003726:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c000372a:	77 b3                	ja     c00036df <load_xdir+0xbf>
c000372c:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003732:	77 1b                	ja     c000374f <load_xdir+0x12f>
c0003734:	89 f8                	mov    eax,edi
c0003736:	e8 d8 e7 ff ff       	call   c0001f13 <xdir_sum>
c000373b:	89 c1                	mov    ecx,eax
c000373d:	8d 47 02             	lea    eax,[edi+0x2]
c0003740:	e8 00 e3 ff ff       	call   c0001a45 <ld_word>
c0003745:	66 39 c1             	cmp    cx,ax
c0003748:	74 05                	je     c000374f <load_xdir+0x12f>
c000374a:	bb 02 00 00 00       	mov    ebx,0x2
c000374f:	83 c4 1c             	add    esp,0x1c
c0003752:	89 d8                	mov    eax,ebx
c0003754:	5b                   	pop    ebx
c0003755:	5e                   	pop    esi
c0003756:	5f                   	pop    edi
c0003757:	5d                   	pop    ebp
c0003758:	c3                   	ret    

c0003759 <load_obj_xdir>:
c0003759:	53                   	push   ebx
c000375a:	89 c3                	mov    ebx,eax
c000375c:	83 ec 08             	sub    esp,0x8
c000375f:	8b 02                	mov    eax,DWORD PTR [edx]
c0003761:	89 03                	mov    DWORD PTR [ebx],eax
c0003763:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0003766:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003769:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000376c:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000376f:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003772:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0003779:	30 c0                	xor    al,al
c000377b:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003782:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003785:	89 d8                	mov    eax,ebx
c0003787:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c000378a:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c000378d:	e8 02 f8 ff ff       	call   c0002f94 <dir_sdi>
c0003792:	85 c0                	test   eax,eax
c0003794:	75 0b                	jne    c00037a1 <load_obj_xdir+0x48>
c0003796:	83 c4 08             	add    esp,0x8
c0003799:	89 d8                	mov    eax,ebx
c000379b:	5b                   	pop    ebx
c000379c:	e9 7f fe ff ff       	jmp    c0003620 <load_xdir>
c00037a1:	83 c4 08             	add    esp,0x8
c00037a4:	5b                   	pop    ebx
c00037a5:	c3                   	ret    

c00037a6 <dir_read>:
c00037a6:	55                   	push   ebp
c00037a7:	bd 04 00 00 00       	mov    ebp,0x4
c00037ac:	57                   	push   edi
c00037ad:	56                   	push   esi
c00037ae:	be ff ff ff ff       	mov    esi,0xffffffff
c00037b3:	53                   	push   ebx
c00037b4:	89 c3                	mov    ebx,eax
c00037b6:	83 ec 1c             	sub    esp,0x1c
c00037b9:	8b 38                	mov    edi,DWORD PTR [eax]
c00037bb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00037bf:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00037c4:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00037c7:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00037ca:	89 c8                	mov    eax,ecx
c00037cc:	09 d0                	or     eax,edx
c00037ce:	0f 84 25 01 00 00    	je     c00038f9 <dir_read+0x153>
c00037d4:	89 f8                	mov    eax,edi
c00037d6:	e8 41 ea ff ff       	call   c000221c <move_window>
c00037db:	89 c5                	mov    ebp,eax
c00037dd:	85 c0                	test   eax,eax
c00037df:	0f 85 23 01 00 00    	jne    c0003908 <dir_read+0x162>
c00037e5:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00037e8:	8a 0a                	mov    cl,BYTE PTR [edx]
c00037ea:	84 c9                	test   cl,cl
c00037ec:	0f 84 11 01 00 00    	je     c0003903 <dir_read+0x15d>
c00037f2:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00037f5:	75 48                	jne    c000383f <dir_read+0x99>
c00037f7:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00037fc:	74 10                	je     c000380e <dir_read+0x68>
c00037fe:	80 f9 83             	cmp    cl,0x83
c0003801:	0f 85 dd 00 00 00    	jne    c00038e4 <dir_read+0x13e>
c0003807:	31 ed                	xor    ebp,ebp
c0003809:	e9 08 01 00 00       	jmp    c0003916 <dir_read+0x170>
c000380e:	80 f9 85             	cmp    cl,0x85
c0003811:	0f 85 cd 00 00 00    	jne    c00038e4 <dir_read+0x13e>
c0003817:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000381a:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000381d:	89 d8                	mov    eax,ebx
c000381f:	e8 fc fd ff ff       	call   c0003620 <load_xdir>
c0003824:	89 c5                	mov    ebp,eax
c0003826:	85 c0                	test   eax,eax
c0003828:	0f 85 da 00 00 00    	jne    c0003908 <dir_read+0x162>
c000382e:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003831:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003834:	83 e0 3f             	and    eax,0x3f
c0003837:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000383a:	e9 d7 00 00 00       	jmp    c0003916 <dir_read+0x170>
c000383f:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003842:	83 e0 3f             	and    eax,0x3f
c0003845:	80 f9 e5             	cmp    cl,0xe5
c0003848:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000384c:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000384f:	0f 84 8a 00 00 00    	je     c00038df <dir_read+0x139>
c0003855:	80 f9 2e             	cmp    cl,0x2e
c0003858:	0f 84 81 00 00 00    	je     c00038df <dir_read+0x139>
c000385e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003862:	83 e0 1f             	and    eax,0x1f
c0003865:	83 f8 08             	cmp    eax,0x8
c0003868:	0f 94 c0             	sete   al
c000386b:	0f b6 c0             	movzx  eax,al
c000386e:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003872:	75 6b                	jne    c00038df <dir_read+0x139>
c0003874:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003879:	75 44                	jne    c00038bf <dir_read+0x119>
c000387b:	f6 c1 40             	test   cl,0x40
c000387e:	74 12                	je     c0003892 <dir_read+0xec>
c0003880:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003883:	83 e1 bf             	and    ecx,0xffffffbf
c0003886:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000388a:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000388d:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003890:	eb 06                	jmp    c0003898 <dir_read+0xf2>
c0003892:	89 f0                	mov    eax,esi
c0003894:	38 c8                	cmp    al,cl
c0003896:	75 47                	jne    c00038df <dir_read+0x139>
c0003898:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000389c:	be ff ff ff ff       	mov    esi,0xffffffff
c00038a1:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00038a4:	75 3e                	jne    c00038e4 <dir_read+0x13e>
c00038a6:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00038a9:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00038ad:	e8 95 e4 ff ff       	call   c0001d47 <pick_lfn>
c00038b2:	85 c0                	test   eax,eax
c00038b4:	74 2e                	je     c00038e4 <dir_read+0x13e>
c00038b6:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00038ba:	8d 71 ff             	lea    esi,[ecx-0x1]
c00038bd:	eb 25                	jmp    c00038e4 <dir_read+0x13e>
c00038bf:	89 f0                	mov    eax,esi
c00038c1:	84 c0                	test   al,al
c00038c3:	75 11                	jne    c00038d6 <dir_read+0x130>
c00038c5:	89 d0                	mov    eax,edx
c00038c7:	e8 35 e6 ff ff       	call   c0001f01 <sum_sfn>
c00038cc:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c00038d0:	0f 84 31 ff ff ff    	je     c0003807 <dir_read+0x61>
c00038d6:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00038dd:	eb 37                	jmp    c0003916 <dir_read+0x170>
c00038df:	be ff ff ff ff       	mov    esi,0xffffffff
c00038e4:	31 d2                	xor    edx,edx
c00038e6:	89 d8                	mov    eax,ebx
c00038e8:	e8 01 fc ff ff       	call   c00034ee <dir_next>
c00038ed:	89 c5                	mov    ebp,eax
c00038ef:	85 c0                	test   eax,eax
c00038f1:	0f 84 cd fe ff ff    	je     c00037c4 <dir_read+0x1e>
c00038f7:	eb 0f                	jmp    c0003908 <dir_read+0x162>
c00038f9:	85 ed                	test   ebp,ebp
c00038fb:	0f 84 06 ff ff ff    	je     c0003807 <dir_read+0x61>
c0003901:	eb 05                	jmp    c0003908 <dir_read+0x162>
c0003903:	bd 04 00 00 00       	mov    ebp,0x4
c0003908:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000390f:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003916:	83 c4 1c             	add    esp,0x1c
c0003919:	89 e8                	mov    eax,ebp
c000391b:	5b                   	pop    ebx
c000391c:	5e                   	pop    esi
c000391d:	5f                   	pop    edi
c000391e:	5d                   	pop    ebp
c000391f:	c3                   	ret    

c0003920 <dir_alloc>:
c0003920:	55                   	push   ebp
c0003921:	89 d5                	mov    ebp,edx
c0003923:	57                   	push   edi
c0003924:	31 d2                	xor    edx,edx
c0003926:	56                   	push   esi
c0003927:	53                   	push   ebx
c0003928:	89 c3                	mov    ebx,eax
c000392a:	83 ec 0c             	sub    esp,0xc
c000392d:	8b 38                	mov    edi,DWORD PTR [eax]
c000392f:	e8 60 f6 ff ff       	call   c0002f94 <dir_sdi>
c0003934:	85 c0                	test   eax,eax
c0003936:	75 4e                	jne    c0003986 <dir_alloc+0x66>
c0003938:	31 f6                	xor    esi,esi
c000393a:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000393d:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003940:	89 f8                	mov    eax,edi
c0003942:	e8 d5 e8 ff ff       	call   c000221c <move_window>
c0003947:	85 c0                	test   eax,eax
c0003949:	75 3b                	jne    c0003986 <dir_alloc+0x66>
c000394b:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000394e:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003951:	8a 12                	mov    dl,BYTE PTR [edx]
c0003953:	75 07                	jne    c000395c <dir_alloc+0x3c>
c0003955:	f7 d2                	not    edx
c0003957:	c0 ea 07             	shr    dl,0x7
c000395a:	eb 0d                	jmp    c0003969 <dir_alloc+0x49>
c000395c:	80 fa e5             	cmp    dl,0xe5
c000395f:	0f 94 c1             	sete   cl
c0003962:	84 d2                	test   dl,dl
c0003964:	0f 94 c2             	sete   dl
c0003967:	09 ca                	or     edx,ecx
c0003969:	84 d2                	test   dl,dl
c000396b:	74 07                	je     c0003974 <dir_alloc+0x54>
c000396d:	46                   	inc    esi
c000396e:	39 ee                	cmp    esi,ebp
c0003970:	75 04                	jne    c0003976 <dir_alloc+0x56>
c0003972:	eb 1c                	jmp    c0003990 <dir_alloc+0x70>
c0003974:	31 f6                	xor    esi,esi
c0003976:	ba 01 00 00 00       	mov    edx,0x1
c000397b:	89 d8                	mov    eax,ebx
c000397d:	e8 6c fb ff ff       	call   c00034ee <dir_next>
c0003982:	85 c0                	test   eax,eax
c0003984:	74 b4                	je     c000393a <dir_alloc+0x1a>
c0003986:	83 f8 04             	cmp    eax,0x4
c0003989:	75 05                	jne    c0003990 <dir_alloc+0x70>
c000398b:	b8 07 00 00 00       	mov    eax,0x7
c0003990:	83 c4 0c             	add    esp,0xc
c0003993:	5b                   	pop    ebx
c0003994:	5e                   	pop    esi
c0003995:	5f                   	pop    edi
c0003996:	5d                   	pop    ebp
c0003997:	c3                   	ret    

c0003998 <store_xdir>:
c0003998:	55                   	push   ebp
c0003999:	57                   	push   edi
c000399a:	89 c7                	mov    edi,eax
c000399c:	56                   	push   esi
c000399d:	53                   	push   ebx
c000399e:	83 ec 0c             	sub    esp,0xc
c00039a1:	8b 00                	mov    eax,DWORD PTR [eax]
c00039a3:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c00039a6:	89 e8                	mov    eax,ebp
c00039a8:	e8 66 e5 ff ff       	call   c0001f13 <xdir_sum>
c00039ad:	0f b7 d0             	movzx  edx,ax
c00039b0:	8d 45 02             	lea    eax,[ebp+0x2]
c00039b3:	e8 ff e0 ff ff       	call   c0001ab7 <st_word>
c00039b8:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c00039bb:	89 f8                	mov    eax,edi
c00039bd:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c00039c1:	e8 ce f5 ff ff       	call   c0002f94 <dir_sdi>
c00039c6:	89 c6                	mov    esi,eax
c00039c8:	85 f6                	test   esi,esi
c00039ca:	75 3d                	jne    c0003a09 <store_xdir+0x71>
c00039cc:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c00039cf:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c00039d2:	8b 07                	mov    eax,DWORD PTR [edi]
c00039d4:	e8 43 e8 ff ff       	call   c000221c <move_window>
c00039d9:	89 c6                	mov    esi,eax
c00039db:	85 c0                	test   eax,eax
c00039dd:	75 2a                	jne    c0003a09 <store_xdir+0x71>
c00039df:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c00039e2:	b9 20 00 00 00       	mov    ecx,0x20
c00039e7:	89 ea                	mov    edx,ebp
c00039e9:	e8 d6 e0 ff ff       	call   c0001ac4 <mem_cpy>
c00039ee:	8b 07                	mov    eax,DWORD PTR [edi]
c00039f0:	85 db                	test   ebx,ebx
c00039f2:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00039f6:	74 11                	je     c0003a09 <store_xdir+0x71>
c00039f8:	31 d2                	xor    edx,edx
c00039fa:	89 f8                	mov    eax,edi
c00039fc:	e8 ed fa ff ff       	call   c00034ee <dir_next>
c0003a01:	83 c5 20             	add    ebp,0x20
c0003a04:	89 c6                	mov    esi,eax
c0003a06:	4b                   	dec    ebx
c0003a07:	eb bf                	jmp    c00039c8 <store_xdir+0x30>
c0003a09:	89 f0                	mov    eax,esi
c0003a0b:	83 fe 02             	cmp    esi,0x2
c0003a0e:	76 05                	jbe    c0003a15 <store_xdir+0x7d>
c0003a10:	b8 02 00 00 00       	mov    eax,0x2
c0003a15:	83 c4 0c             	add    esp,0xc
c0003a18:	5b                   	pop    ebx
c0003a19:	5e                   	pop    esi
c0003a1a:	5f                   	pop    edi
c0003a1b:	5d                   	pop    ebp
c0003a1c:	c3                   	ret    

c0003a1d <dir_remove>:
c0003a1d:	57                   	push   edi
c0003a1e:	56                   	push   esi
c0003a1f:	53                   	push   ebx
c0003a20:	89 c3                	mov    ebx,eax
c0003a22:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003a25:	8b 30                	mov    esi,DWORD PTR [eax]
c0003a27:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003a2a:	83 fa ff             	cmp    edx,0xffffffff
c0003a2d:	74 09                	je     c0003a38 <dir_remove+0x1b>
c0003a2f:	e8 60 f5 ff ff       	call   c0002f94 <dir_sdi>
c0003a34:	85 c0                	test   eax,eax
c0003a36:	75 41                	jne    c0003a79 <dir_remove+0x5c>
c0003a38:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003a3b:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003a3e:	89 f0                	mov    eax,esi
c0003a40:	e8 d7 e7 ff ff       	call   c000221c <move_window>
c0003a45:	85 c0                	test   eax,eax
c0003a47:	75 26                	jne    c0003a6f <dir_remove+0x52>
c0003a49:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a4c:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003a4f:	75 05                	jne    c0003a56 <dir_remove+0x39>
c0003a51:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003a54:	eb 03                	jmp    c0003a59 <dir_remove+0x3c>
c0003a56:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003a59:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003a5d:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003a60:	73 17                	jae    c0003a79 <dir_remove+0x5c>
c0003a62:	31 d2                	xor    edx,edx
c0003a64:	89 d8                	mov    eax,ebx
c0003a66:	e8 83 fa ff ff       	call   c00034ee <dir_next>
c0003a6b:	85 c0                	test   eax,eax
c0003a6d:	74 c9                	je     c0003a38 <dir_remove+0x1b>
c0003a6f:	83 f8 04             	cmp    eax,0x4
c0003a72:	75 05                	jne    c0003a79 <dir_remove+0x5c>
c0003a74:	b8 02 00 00 00       	mov    eax,0x2
c0003a79:	5b                   	pop    ebx
c0003a7a:	5e                   	pop    esi
c0003a7b:	5f                   	pop    edi
c0003a7c:	c3                   	ret    

c0003a7d <create_name>:
c0003a7d:	55                   	push   ebp
c0003a7e:	89 d5                	mov    ebp,edx
c0003a80:	57                   	push   edi
c0003a81:	89 c7                	mov    edi,eax
c0003a83:	56                   	push   esi
c0003a84:	31 f6                	xor    esi,esi
c0003a86:	53                   	push   ebx
c0003a87:	83 ec 3c             	sub    esp,0x3c
c0003a8a:	8b 02                	mov    eax,DWORD PTR [edx]
c0003a8c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003a90:	8b 07                	mov    eax,DWORD PTR [edi]
c0003a92:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003a95:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003a99:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003a9d:	e8 7d e0 ff ff       	call   c0001b1f <tchar2uni>
c0003aa2:	89 c3                	mov    ebx,eax
c0003aa4:	83 f8 ff             	cmp    eax,0xffffffff
c0003aa7:	75 0a                	jne    c0003ab3 <create_name+0x36>
c0003aa9:	b8 06 00 00 00       	mov    eax,0x6
c0003aae:	e9 83 02 00 00       	jmp    c0003d36 <create_name+0x2b9>
c0003ab3:	3d ff ff 00 00       	cmp    eax,0xffff
c0003ab8:	76 0c                	jbe    c0003ac6 <create_name+0x49>
c0003aba:	c1 e8 10             	shr    eax,0x10
c0003abd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003ac1:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003ac5:	46                   	inc    esi
c0003ac6:	66 83 fb 1f          	cmp    bx,0x1f
c0003aca:	89 d8                	mov    eax,ebx
c0003acc:	76 36                	jbe    c0003b04 <create_name+0x87>
c0003ace:	66 83 fb 2f          	cmp    bx,0x2f
c0003ad2:	74 30                	je     c0003b04 <create_name+0x87>
c0003ad4:	66 83 fb 5c          	cmp    bx,0x5c
c0003ad8:	74 39                	je     c0003b13 <create_name+0x96>
c0003ada:	66 83 fb 7f          	cmp    bx,0x7f
c0003ade:	77 11                	ja     c0003af1 <create_name+0x74>
c0003ae0:	0f b7 d3             	movzx  edx,bx
c0003ae3:	b8 32 04 02 c0       	mov    eax,0xc0020432
c0003ae8:	e8 1a e0 ff ff       	call   c0001b07 <chk_chr>
c0003aed:	85 c0                	test   eax,eax
c0003aef:	75 b8                	jne    c0003aa9 <create_name+0x2c>
c0003af1:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003af7:	77 b0                	ja     c0003aa9 <create_name+0x2c>
c0003af9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003afd:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003b01:	46                   	inc    esi
c0003b02:	eb 95                	jmp    c0003a99 <create_name+0x1c>
c0003b04:	66 83 f8 1f          	cmp    ax,0x1f
c0003b08:	b3 04                	mov    bl,0x4
c0003b0a:	76 19                	jbe    c0003b25 <create_name+0xa8>
c0003b0c:	eb 05                	jmp    c0003b13 <create_name+0x96>
c0003b0e:	40                   	inc    eax
c0003b0f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003b13:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003b17:	8a 10                	mov    dl,BYTE PTR [eax]
c0003b19:	80 fa 2f             	cmp    dl,0x2f
c0003b1c:	74 f0                	je     c0003b0e <create_name+0x91>
c0003b1e:	80 fa 5c             	cmp    dl,0x5c
c0003b21:	74 eb                	je     c0003b0e <create_name+0x91>
c0003b23:	31 db                	xor    ebx,ebx
c0003b25:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003b29:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003b2c:	85 f6                	test   esi,esi
c0003b2e:	74 18                	je     c0003b48 <create_name+0xcb>
c0003b30:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b34:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003b39:	66 83 f8 20          	cmp    ax,0x20
c0003b3d:	74 06                	je     c0003b45 <create_name+0xc8>
c0003b3f:	66 83 f8 2e          	cmp    ax,0x2e
c0003b43:	75 03                	jne    c0003b48 <create_name+0xcb>
c0003b45:	4e                   	dec    esi
c0003b46:	eb e4                	jmp    c0003b2c <create_name+0xaf>
c0003b48:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b4c:	31 ed                	xor    ebp,ebp
c0003b4e:	85 f6                	test   esi,esi
c0003b50:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003b56:	0f 84 4d ff ff ff    	je     c0003aa9 <create_name+0x2c>
c0003b5c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b60:	8d 55 01             	lea    edx,[ebp+0x1]
c0003b63:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003b67:	66 83 f8 20          	cmp    ax,0x20
c0003b6b:	75 04                	jne    c0003b71 <create_name+0xf4>
c0003b6d:	89 d5                	mov    ebp,edx
c0003b6f:	eb eb                	jmp    c0003b5c <create_name+0xdf>
c0003b71:	85 ed                	test   ebp,ebp
c0003b73:	75 06                	jne    c0003b7b <create_name+0xfe>
c0003b75:	66 83 f8 2e          	cmp    ax,0x2e
c0003b79:	75 08                	jne    c0003b83 <create_name+0x106>
c0003b7b:	83 cb 03             	or     ebx,0x3
c0003b7e:	eb 03                	jmp    c0003b83 <create_name+0x106>
c0003b80:	4e                   	dec    esi
c0003b81:	74 0c                	je     c0003b8f <create_name+0x112>
c0003b83:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b87:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003b8d:	75 f1                	jne    c0003b80 <create_name+0x103>
c0003b8f:	b9 0b 00 00 00       	mov    ecx,0xb
c0003b94:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003b97:	ba 20 00 00 00       	mov    edx,0x20
c0003b9c:	e8 38 df ff ff       	call   c0001ad9 <mem_set>
c0003ba1:	c7 44 24 14 08 00 00 00 	mov    DWORD PTR [esp+0x14],0x8
c0003ba9:	31 c9                	xor    ecx,ecx
c0003bab:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0003bb0:	8d 45 01             	lea    eax,[ebp+0x1]
c0003bb3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003bb7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003bbb:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003bbf:	66 85 ed             	test   bp,bp
c0003bc2:	0f 84 1f 01 00 00    	je     c0003ce7 <create_name+0x26a>
c0003bc8:	66 83 fd 20          	cmp    bp,0x20
c0003bcc:	74 0c                	je     c0003bda <create_name+0x15d>
c0003bce:	66 83 fd 2e          	cmp    bp,0x2e
c0003bd2:	75 0f                	jne    c0003be3 <create_name+0x166>
c0003bd4:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0003bd8:	74 09                	je     c0003be3 <create_name+0x166>
c0003bda:	83 cb 03             	or     ebx,0x3
c0003bdd:	8b 6c 24 10          	mov    ebp,DWORD PTR [esp+0x10]
c0003be1:	eb cd                	jmp    c0003bb0 <create_name+0x133>
c0003be3:	3b 4c 24 14          	cmp    ecx,DWORD PTR [esp+0x14]
c0003be7:	73 06                	jae    c0003bef <create_name+0x172>
c0003be9:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0003bed:	75 3a                	jne    c0003c29 <create_name+0x1ac>
c0003bef:	83 7c 24 14 0b       	cmp    DWORD PTR [esp+0x14],0xb
c0003bf4:	75 08                	jne    c0003bfe <create_name+0x181>
c0003bf6:	83 cb 03             	or     ebx,0x3
c0003bf9:	e9 e9 00 00 00       	jmp    c0003ce7 <create_name+0x26a>
c0003bfe:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0003c02:	74 0d                	je     c0003c11 <create_name+0x194>
c0003c04:	83 cb 03             	or     ebx,0x3
c0003c07:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0003c0b:	0f 87 d6 00 00 00    	ja     c0003ce7 <create_name+0x26a>
c0003c11:	c0 64 24 0b 02       	shl    BYTE PTR [esp+0xb],0x2
c0003c16:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0003c1a:	c7 44 24 14 0b 00 00 00 	mov    DWORD PTR [esp+0x14],0xb
c0003c22:	b9 08 00 00 00       	mov    ecx,0x8
c0003c27:	eb b4                	jmp    c0003bdd <create_name+0x160>
c0003c29:	66 83 fd 7f          	cmp    bp,0x7f
c0003c2d:	76 68                	jbe    c0003c97 <create_name+0x21a>
c0003c2f:	88 da                	mov    dl,bl
c0003c31:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003c35:	83 ca 02             	or     edx,0x2
c0003c38:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003c3c:	50                   	push   eax
c0003c3d:	50                   	push   eax
c0003c3e:	68 b5 01 00 00       	push   0x1b5
c0003c43:	55                   	push   ebp
c0003c44:	e8 0f 46 00 00       	call   c0008258 <ff_uni2oem>
c0003c49:	83 c4 10             	add    esp,0x10
c0003c4c:	89 c5                	mov    ebp,eax
c0003c4e:	a8 80                	test   al,0x80
c0003c50:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003c54:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003c58:	74 0c                	je     c0003c66 <create_name+0x1e9>
c0003c5a:	83 e5 7f             	and    ebp,0x7f
c0003c5d:	0f b6 ad 80 03 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffdfc80]
c0003c64:	eb 2a                	jmp    c0003c90 <create_name+0x213>
c0003c66:	66 3d ff 00          	cmp    ax,0xff
c0003c6a:	76 24                	jbe    c0003c90 <create_name+0x213>
c0003c6c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0003c70:	48                   	dec    eax
c0003c71:	39 c8                	cmp    eax,ecx
c0003c73:	77 0c                	ja     c0003c81 <create_name+0x204>
c0003c75:	83 cb 03             	or     ebx,0x3
c0003c78:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0003c7c:	e9 5c ff ff ff       	jmp    c0003bdd <create_name+0x160>
c0003c81:	89 e8                	mov    eax,ebp
c0003c83:	88 d3                	mov    bl,dl
c0003c85:	66 c1 e8 08          	shr    ax,0x8
c0003c89:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003c8d:	41                   	inc    ecx
c0003c8e:	eb 4b                	jmp    c0003cdb <create_name+0x25e>
c0003c90:	66 85 ed             	test   bp,bp
c0003c93:	88 d3                	mov    bl,dl
c0003c95:	74 19                	je     c0003cb0 <create_name+0x233>
c0003c97:	0f b7 d5             	movzx  edx,bp
c0003c9a:	b8 3b 04 02 c0       	mov    eax,0xc002043b
c0003c9f:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003ca3:	e8 5f de ff ff       	call   c0001b07 <chk_chr>
c0003ca8:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003cac:	85 c0                	test   eax,eax
c0003cae:	74 0a                	je     c0003cba <create_name+0x23d>
c0003cb0:	83 cb 03             	or     ebx,0x3
c0003cb3:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003cb8:	eb 21                	jmp    c0003cdb <create_name+0x25e>
c0003cba:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003cbd:	66 83 f8 19          	cmp    ax,0x19
c0003cc1:	77 07                	ja     c0003cca <create_name+0x24d>
c0003cc3:	80 4c 24 0b 02       	or     BYTE PTR [esp+0xb],0x2
c0003cc8:	eb 11                	jmp    c0003cdb <create_name+0x25e>
c0003cca:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003ccd:	66 83 f8 19          	cmp    ax,0x19
c0003cd1:	77 08                	ja     c0003cdb <create_name+0x25e>
c0003cd3:	80 4c 24 0b 01       	or     BYTE PTR [esp+0xb],0x1
c0003cd8:	83 ed 20             	sub    ebp,0x20
c0003cdb:	89 e8                	mov    eax,ebp
c0003cdd:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003ce1:	41                   	inc    ecx
c0003ce2:	e9 f6 fe ff ff       	jmp    c0003bdd <create_name+0x160>
c0003ce7:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003ceb:	75 04                	jne    c0003cf1 <create_name+0x274>
c0003ced:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003cf1:	83 7c 24 14 08       	cmp    DWORD PTR [esp+0x14],0x8
c0003cf6:	75 05                	jne    c0003cfd <create_name+0x280>
c0003cf8:	c0 64 24 0b 02       	shl    BYTE PTR [esp+0xb],0x2
c0003cfd:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0003d01:	83 e0 0c             	and    eax,0xc
c0003d04:	3c 0c                	cmp    al,0xc
c0003d06:	74 0b                	je     c0003d13 <create_name+0x296>
c0003d08:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0003d0c:	83 e0 03             	and    eax,0x3
c0003d0f:	3c 03                	cmp    al,0x3
c0003d11:	75 05                	jne    c0003d18 <create_name+0x29b>
c0003d13:	83 cb 02             	or     ebx,0x2
c0003d16:	eb 19                	jmp    c0003d31 <create_name+0x2b4>
c0003d18:	f6 c3 02             	test   bl,0x2
c0003d1b:	75 14                	jne    c0003d31 <create_name+0x2b4>
c0003d1d:	f6 44 24 0b 01       	test   BYTE PTR [esp+0xb],0x1
c0003d22:	74 03                	je     c0003d27 <create_name+0x2aa>
c0003d24:	83 cb 10             	or     ebx,0x10
c0003d27:	f6 44 24 0b 04       	test   BYTE PTR [esp+0xb],0x4
c0003d2c:	74 03                	je     c0003d31 <create_name+0x2b4>
c0003d2e:	83 cb 08             	or     ebx,0x8
c0003d31:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003d34:	31 c0                	xor    eax,eax
c0003d36:	83 c4 3c             	add    esp,0x3c
c0003d39:	5b                   	pop    ebx
c0003d3a:	5e                   	pop    esi
c0003d3b:	5f                   	pop    edi
c0003d3c:	5d                   	pop    ebp
c0003d3d:	c3                   	ret    

c0003d3e <xname_sum>:
c0003d3e:	56                   	push   esi
c0003d3f:	89 c6                	mov    esi,eax
c0003d41:	53                   	push   ebx
c0003d42:	31 db                	xor    ebx,ebx
c0003d44:	51                   	push   ecx
c0003d45:	83 c6 02             	add    esi,0x2
c0003d48:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003d4c:	66 85 c0             	test   ax,ax
c0003d4f:	74 1f                	je     c0003d70 <xname_sum+0x32>
c0003d51:	66 d1 cb             	ror    bx,1
c0003d54:	83 ec 0c             	sub    esp,0xc
c0003d57:	50                   	push   eax
c0003d58:	e8 00 46 00 00       	call   c000835d <ff_wtoupper>
c0003d5d:	0f b6 d0             	movzx  edx,al
c0003d60:	01 d3                	add    ebx,edx
c0003d62:	83 c4 10             	add    esp,0x10
c0003d65:	66 c1 e8 08          	shr    ax,0x8
c0003d69:	66 d1 cb             	ror    bx,1
c0003d6c:	01 c3                	add    ebx,eax
c0003d6e:	eb d5                	jmp    c0003d45 <xname_sum+0x7>
c0003d70:	5a                   	pop    edx
c0003d71:	89 d8                	mov    eax,ebx
c0003d73:	5b                   	pop    ebx
c0003d74:	5e                   	pop    esi
c0003d75:	c3                   	ret    

c0003d76 <create_xdir>:
c0003d76:	55                   	push   ebp
c0003d77:	b9 40 00 00 00       	mov    ecx,0x40
c0003d7c:	57                   	push   edi
c0003d7d:	bd 01 00 00 00       	mov    ebp,0x1
c0003d82:	56                   	push   esi
c0003d83:	31 ff                	xor    edi,edi
c0003d85:	53                   	push   ebx
c0003d86:	89 c3                	mov    ebx,eax
c0003d88:	83 ec 1c             	sub    esp,0x1c
c0003d8b:	be 40 00 00 00       	mov    esi,0x40
c0003d90:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003d94:	31 d2                	xor    edx,edx
c0003d96:	e8 3e dd ff ff       	call   c0001ad9 <mem_set>
c0003d9b:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003d9e:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003da2:	31 c9                	xor    ecx,ecx
c0003da4:	8d 46 01             	lea    eax,[esi+0x1]
c0003da7:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003dab:	83 c6 02             	add    esi,0x2
c0003dae:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003db2:	66 85 ed             	test   bp,bp
c0003db5:	74 12                	je     c0003dc9 <create_xdir+0x53>
c0003db7:	0f b6 c1             	movzx  eax,cl
c0003dba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003dbe:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003dc2:	66 83 fd 01          	cmp    bp,0x1
c0003dc6:	80 d9 ff             	sbb    cl,0xff
c0003dc9:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003dcc:	83 c6 02             	add    esi,0x2
c0003dcf:	0f b7 d5             	movzx  edx,bp
c0003dd2:	e8 e0 dc ff ff       	call   c0001ab7 <st_word>
c0003dd7:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003ddd:	75 d3                	jne    c0003db2 <create_xdir+0x3c>
c0003ddf:	8d 47 01             	lea    eax,[edi+0x1]
c0003de2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003de6:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003dea:	0f b6 c1             	movzx  eax,cl
c0003ded:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003df2:	74 07                	je     c0003dfb <create_xdir+0x85>
c0003df4:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0003df9:	eb a9                	jmp    c0003da4 <create_xdir+0x2e>
c0003dfb:	8d 47 02             	lea    eax,[edi+0x2]
c0003dfe:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0003e01:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0003e04:	89 d0                	mov    eax,edx
c0003e06:	e8 33 ff ff ff       	call   c0003d3e <xname_sum>
c0003e0b:	83 c4 1c             	add    esp,0x1c
c0003e0e:	0f b7 d0             	movzx  edx,ax
c0003e11:	8d 43 24             	lea    eax,[ebx+0x24]
c0003e14:	5b                   	pop    ebx
c0003e15:	5e                   	pop    esi
c0003e16:	5f                   	pop    edi
c0003e17:	5d                   	pop    ebp
c0003e18:	e9 9a dc ff ff       	jmp    c0001ab7 <st_word>

c0003e1d <cmp_lfn>:
c0003e1d:	55                   	push   ebp
c0003e1e:	57                   	push   edi
c0003e1f:	89 d7                	mov    edi,edx
c0003e21:	56                   	push   esi
c0003e22:	53                   	push   ebx
c0003e23:	83 ec 1c             	sub    esp,0x1c
c0003e26:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003e2a:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003e2d:	e8 13 dc ff ff       	call   c0001a45 <ld_word>
c0003e32:	66 85 c0             	test   ax,ax
c0003e35:	74 07                	je     c0003e3e <cmp_lfn+0x21>
c0003e37:	31 c0                	xor    eax,eax
c0003e39:	e9 9a 00 00 00       	jmp    c0003ed8 <cmp_lfn+0xbb>
c0003e3e:	8a 1f                	mov    bl,BYTE PTR [edi]
c0003e40:	bd 01 00 00 00       	mov    ebp,0x1
c0003e45:	83 e3 3f             	and    ebx,0x3f
c0003e48:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0003e50:	4b                   	dec    ebx
c0003e51:	6b db 0d             	imul   ebx,ebx,0xd
c0003e54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003e58:	0f b6 80 00 04 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdfc00]
c0003e5f:	01 f8                	add    eax,edi
c0003e61:	e8 df db ff ff       	call   c0001a45 <ld_word>
c0003e66:	66 85 ed             	test   bp,bp
c0003e69:	89 c6                	mov    esi,eax
c0003e6b:	74 3c                	je     c0003ea9 <cmp_lfn+0x8c>
c0003e6d:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0003e73:	77 c2                	ja     c0003e37 <cmp_lfn+0x1a>
c0003e75:	83 ec 0c             	sub    esp,0xc
c0003e78:	0f b7 c0             	movzx  eax,ax
c0003e7b:	50                   	push   eax
c0003e7c:	e8 dc 44 00 00       	call   c000835d <ff_wtoupper>
c0003e81:	89 c5                	mov    ebp,eax
c0003e83:	8d 43 01             	lea    eax,[ebx+0x1]
c0003e86:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0003e8a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0003e8e:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0003e92:	89 04 24             	mov    DWORD PTR [esp],eax
c0003e95:	e8 c3 44 00 00       	call   c000835d <ff_wtoupper>
c0003e9a:	83 c4 10             	add    esp,0x10
c0003e9d:	39 c5                	cmp    ebp,eax
c0003e9f:	75 96                	jne    c0003e37 <cmp_lfn+0x1a>
c0003ea1:	89 f5                	mov    ebp,esi
c0003ea3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0003ea7:	eb 04                	jmp    c0003ead <cmp_lfn+0x90>
c0003ea9:	66 46                	inc    si
c0003eab:	75 8a                	jne    c0003e37 <cmp_lfn+0x1a>
c0003ead:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0003eb1:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0003eb6:	75 9c                	jne    c0003e54 <cmp_lfn+0x37>
c0003eb8:	f6 07 40             	test   BYTE PTR [edi],0x40
c0003ebb:	74 16                	je     c0003ed3 <cmp_lfn+0xb6>
c0003ebd:	66 85 ed             	test   bp,bp
c0003ec0:	74 11                	je     c0003ed3 <cmp_lfn+0xb6>
c0003ec2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003ec6:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0003ecb:	0f 94 c0             	sete   al
c0003ece:	0f b6 c0             	movzx  eax,al
c0003ed1:	eb 05                	jmp    c0003ed8 <cmp_lfn+0xbb>
c0003ed3:	b8 01 00 00 00       	mov    eax,0x1
c0003ed8:	83 c4 1c             	add    esp,0x1c
c0003edb:	5b                   	pop    ebx
c0003edc:	5e                   	pop    esi
c0003edd:	5f                   	pop    edi
c0003ede:	5d                   	pop    ebp
c0003edf:	c3                   	ret    

c0003ee0 <dir_find>:
c0003ee0:	55                   	push   ebp
c0003ee1:	31 d2                	xor    edx,edx
c0003ee3:	57                   	push   edi
c0003ee4:	56                   	push   esi
c0003ee5:	53                   	push   ebx
c0003ee6:	89 c3                	mov    ebx,eax
c0003ee8:	83 ec 1c             	sub    esp,0x1c
c0003eeb:	8b 30                	mov    esi,DWORD PTR [eax]
c0003eed:	e8 a2 f0 ff ff       	call   c0002f94 <dir_sdi>
c0003ef2:	89 04 24             	mov    DWORD PTR [esp],eax
c0003ef5:	85 c0                	test   eax,eax
c0003ef7:	0f 85 9f 01 00 00    	jne    c000409c <dir_find+0x1bc>
c0003efd:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003f00:	0f 85 8e 00 00 00    	jne    c0003f94 <dir_find+0xb4>
c0003f06:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003f09:	e8 30 fe ff ff       	call   c0003d3e <xname_sum>
c0003f0e:	89 c5                	mov    ebp,eax
c0003f10:	31 d2                	xor    edx,edx
c0003f12:	89 d8                	mov    eax,ebx
c0003f14:	e8 8d f8 ff ff       	call   c00037a6 <dir_read>
c0003f19:	85 c0                	test   eax,eax
c0003f1b:	0f 85 5f 01 00 00    	jne    c0004080 <dir_find+0x1a0>
c0003f21:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0003f24:	8d 41 24             	lea    eax,[ecx+0x24]
c0003f27:	e8 19 db ff ff       	call   c0001a45 <ld_word>
c0003f2c:	66 39 e8             	cmp    ax,bp
c0003f2f:	75 df                	jne    c0003f10 <dir_find+0x30>
c0003f31:	0f b6 49 23          	movzx  ecx,BYTE PTR [ecx+0x23]
c0003f35:	31 ff                	xor    edi,edi
c0003f37:	ba 40 00 00 00       	mov    edx,0x40
c0003f3c:	39 f9                	cmp    ecx,edi
c0003f3e:	0f 84 4a 01 00 00    	je     c000408e <dir_find+0x1ae>
c0003f44:	f6 c2 1f             	test   dl,0x1f
c0003f47:	75 03                	jne    c0003f4c <dir_find+0x6c>
c0003f49:	83 c2 02             	add    edx,0x2
c0003f4c:	89 d0                	mov    eax,edx
c0003f4e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003f52:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0003f55:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003f59:	e8 e7 da ff ff       	call   c0001a45 <ld_word>
c0003f5e:	83 ec 0c             	sub    esp,0xc
c0003f61:	0f b7 c0             	movzx  eax,ax
c0003f64:	50                   	push   eax
c0003f65:	e8 f3 43 00 00       	call   c000835d <ff_wtoupper>
c0003f6a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003f6e:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003f71:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0003f75:	89 04 24             	mov    DWORD PTR [esp],eax
c0003f78:	e8 e0 43 00 00       	call   c000835d <ff_wtoupper>
c0003f7d:	83 c4 10             	add    esp,0x10
c0003f80:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0003f84:	75 8a                	jne    c0003f10 <dir_find+0x30>
c0003f86:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003f8a:	47                   	inc    edi
c0003f8b:	83 c2 02             	add    edx,0x2
c0003f8e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003f92:	eb a8                	jmp    c0003f3c <dir_find+0x5c>
c0003f94:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003f9b:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c0003fa0:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003fa5:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003fa8:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003fab:	89 f0                	mov    eax,esi
c0003fad:	e8 6a e2 ff ff       	call   c000221c <move_window>
c0003fb2:	85 c0                	test   eax,eax
c0003fb4:	0f 85 c6 00 00 00    	jne    c0004080 <dir_find+0x1a0>
c0003fba:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0003fbd:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c0003fc0:	84 c9                	test   cl,cl
c0003fc2:	0f 84 bd 00 00 00    	je     c0004085 <dir_find+0x1a5>
c0003fc8:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0003fcb:	88 d0                	mov    al,dl
c0003fcd:	83 e0 3f             	and    eax,0x3f
c0003fd0:	80 f9 e5             	cmp    cl,0xe5
c0003fd3:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003fd6:	0f 84 87 00 00 00    	je     c0004063 <dir_find+0x183>
c0003fdc:	80 e2 08             	and    dl,0x8
c0003fdf:	74 06                	je     c0003fe7 <dir_find+0x107>
c0003fe1:	3c 0f                	cmp    al,0xf
c0003fe3:	75 7e                	jne    c0004063 <dir_find+0x183>
c0003fe5:	eb 04                	jmp    c0003feb <dir_find+0x10b>
c0003fe7:	3c 0f                	cmp    al,0xf
c0003fe9:	75 4c                	jne    c0004037 <dir_find+0x157>
c0003feb:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0003fef:	75 7e                	jne    c000406f <dir_find+0x18f>
c0003ff1:	f6 c1 40             	test   cl,0x40
c0003ff4:	74 12                	je     c0004008 <dir_find+0x128>
c0003ff6:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003ff9:	83 e1 bf             	and    ecx,0xffffffbf
c0003ffc:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0004000:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004003:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004006:	eb 06                	jmp    c000400e <dir_find+0x12e>
c0004008:	89 f8                	mov    eax,edi
c000400a:	38 c8                	cmp    al,cl
c000400c:	75 5c                	jne    c000406a <dir_find+0x18a>
c000400e:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004012:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004017:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c000401a:	75 53                	jne    c000406f <dir_find+0x18f>
c000401c:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000401f:	89 ea                	mov    edx,ebp
c0004021:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0004025:	e8 f3 fd ff ff       	call   c0003e1d <cmp_lfn>
c000402a:	85 c0                	test   eax,eax
c000402c:	74 41                	je     c000406f <dir_find+0x18f>
c000402e:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0004032:	8d 79 ff             	lea    edi,[ecx-0x1]
c0004035:	eb 38                	jmp    c000406f <dir_find+0x18f>
c0004037:	89 f8                	mov    eax,edi
c0004039:	84 c0                	test   al,al
c000403b:	75 0d                	jne    c000404a <dir_find+0x16a>
c000403d:	89 e8                	mov    eax,ebp
c000403f:	e8 bd de ff ff       	call   c0001f01 <sum_sfn>
c0004044:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0004048:	74 52                	je     c000409c <dir_find+0x1bc>
c000404a:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c000404e:	75 13                	jne    c0004063 <dir_find+0x183>
c0004050:	8d 53 3c             	lea    edx,[ebx+0x3c]
c0004053:	b9 0b 00 00 00       	mov    ecx,0xb
c0004058:	89 e8                	mov    eax,ebp
c000405a:	e8 85 da ff ff       	call   c0001ae4 <mem_cmp>
c000405f:	85 c0                	test   eax,eax
c0004061:	74 39                	je     c000409c <dir_find+0x1bc>
c0004063:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c000406a:	bf ff ff ff ff       	mov    edi,0xffffffff
c000406f:	31 d2                	xor    edx,edx
c0004071:	89 d8                	mov    eax,ebx
c0004073:	e8 76 f4 ff ff       	call   c00034ee <dir_next>
c0004078:	85 c0                	test   eax,eax
c000407a:	0f 84 25 ff ff ff    	je     c0003fa5 <dir_find+0xc5>
c0004080:	89 04 24             	mov    DWORD PTR [esp],eax
c0004083:	eb 17                	jmp    c000409c <dir_find+0x1bc>
c0004085:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000408c:	eb 0e                	jmp    c000409c <dir_find+0x1bc>
c000408e:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004091:	66 83 3c 48 00       	cmp    WORD PTR [eax+ecx*2],0x0
c0004096:	0f 85 74 fe ff ff    	jne    c0003f10 <dir_find+0x30>
c000409c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000409f:	83 c4 1c             	add    esp,0x1c
c00040a2:	5b                   	pop    ebx
c00040a3:	5e                   	pop    esi
c00040a4:	5f                   	pop    edi
c00040a5:	5d                   	pop    ebp
c00040a6:	c3                   	ret    

c00040a7 <dir_register>:
c00040a7:	55                   	push   ebp
c00040a8:	57                   	push   edi
c00040a9:	56                   	push   esi
c00040aa:	be 06 00 00 00       	mov    esi,0x6
c00040af:	53                   	push   ebx
c00040b0:	83 ec 6c             	sub    esp,0x6c
c00040b3:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00040b7:	0f 85 63 02 00 00    	jne    c0004320 <dir_register+0x279>
c00040bd:	8b 28                	mov    ebp,DWORD PTR [eax]
c00040bf:	31 ff                	xor    edi,edi
c00040c1:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00040c4:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c00040c9:	74 03                	je     c00040ce <dir_register+0x27>
c00040cb:	47                   	inc    edi
c00040cc:	eb f6                	jmp    c00040c4 <dir_register+0x1d>
c00040ce:	89 c3                	mov    ebx,eax
c00040d0:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00040d4:	0f 85 e1 00 00 00    	jne    c00041bb <dir_register+0x114>
c00040da:	83 c7 0e             	add    edi,0xe
c00040dd:	b9 0f 00 00 00       	mov    ecx,0xf
c00040e2:	89 f8                	mov    eax,edi
c00040e4:	31 d2                	xor    edx,edx
c00040e6:	f7 f1                	div    ecx
c00040e8:	89 c7                	mov    edi,eax
c00040ea:	8d 50 02             	lea    edx,[eax+0x2]
c00040ed:	89 d8                	mov    eax,ebx
c00040ef:	e8 2c f8 ff ff       	call   c0003920 <dir_alloc>
c00040f4:	89 c6                	mov    esi,eax
c00040f6:	85 c0                	test   eax,eax
c00040f8:	0f 85 22 02 00 00    	jne    c0004320 <dir_register+0x279>
c00040fe:	81 c7 01 00 00 08    	add    edi,0x8000001
c0004104:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004107:	c1 e7 05             	shl    edi,0x5
c000410a:	29 f8                	sub    eax,edi
c000410c:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000410f:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004112:	a8 04                	test   al,0x4
c0004114:	0f 84 91 00 00 00    	je     c00041ab <dir_register+0x104>
c000411a:	83 e0 fb             	and    eax,0xfffffffb
c000411d:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004120:	89 d8                	mov    eax,ebx
c0004122:	e8 3d ec ff ff       	call   c0002d64 <fill_first_frag>
c0004127:	85 c0                	test   eax,eax
c0004129:	0f 85 ef 01 00 00    	jne    c000431e <dir_register+0x277>
c000412f:	83 c9 ff             	or     ecx,0xffffffff
c0004132:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004135:	89 d8                	mov    eax,ebx
c0004137:	e8 f3 eb ff ff       	call   c0002d2f <fill_last_frag>
c000413c:	85 c0                	test   eax,eax
c000413e:	0f 85 da 01 00 00    	jne    c000431e <dir_register+0x277>
c0004144:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004148:	74 61                	je     c00041ab <dir_register+0x104>
c000414a:	89 da                	mov    edx,ebx
c000414c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004150:	e8 04 f6 ff ff       	call   c0003759 <load_obj_xdir>
c0004155:	85 c0                	test   eax,eax
c0004157:	0f 85 c1 01 00 00    	jne    c000431e <dir_register+0x277>
c000415d:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c0004161:	c1 e2 09             	shl    edx,0x9
c0004164:	31 c9                	xor    ecx,ecx
c0004166:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c0004169:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c000416c:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000416f:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0004172:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004175:	83 c0 38             	add    eax,0x38
c0004178:	e8 41 d9 ff ff       	call   c0001abe <st_qword>
c000417d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004180:	83 c0 28             	add    eax,0x28
c0004183:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0004186:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0004189:	e8 30 d9 ff ff       	call   c0001abe <st_qword>
c000418e:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004191:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0004194:	83 c8 01             	or     eax,0x1
c0004197:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c000419a:	8d 44 24 14          	lea    eax,[esp+0x14]
c000419e:	e8 f5 f7 ff ff       	call   c0003998 <store_xdir>
c00041a3:	85 c0                	test   eax,eax
c00041a5:	0f 85 73 01 00 00    	jne    c000431e <dir_register+0x277>
c00041ab:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00041ae:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00041b1:	e8 c0 fb ff ff       	call   c0003d76 <create_xdir>
c00041b6:	e9 65 01 00 00       	jmp    c0004320 <dir_register+0x279>
c00041bb:	8d 40 3c             	lea    eax,[eax+0x3c]
c00041be:	b9 0c 00 00 00       	mov    ecx,0xc
c00041c3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00041c7:	89 c2                	mov    edx,eax
c00041c9:	8d 44 24 14          	lea    eax,[esp+0x14]
c00041cd:	e8 f2 d8 ff ff       	call   c0001ac4 <mem_cpy>
c00041d2:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c00041d7:	74 58                	je     c0004231 <dir_register+0x18a>
c00041d9:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c00041dd:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00041e5:	83 ec 0c             	sub    esp,0xc
c00041e8:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00041eb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00041ef:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00041f3:	8d 54 24 24          	lea    edx,[esp+0x24]
c00041f7:	e8 49 dc ff ff       	call   c0001e45 <gen_numname>
c00041fc:	89 d8                	mov    eax,ebx
c00041fe:	e8 dd fc ff ff       	call   c0003ee0 <dir_find>
c0004203:	83 c4 10             	add    esp,0x10
c0004206:	89 c6                	mov    esi,eax
c0004208:	85 c0                	test   eax,eax
c000420a:	75 15                	jne    c0004221 <dir_register+0x17a>
c000420c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004210:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004215:	75 ce                	jne    c00041e5 <dir_register+0x13e>
c0004217:	be 07 00 00 00       	mov    esi,0x7
c000421c:	e9 ff 00 00 00       	jmp    c0004320 <dir_register+0x279>
c0004221:	83 f8 04             	cmp    eax,0x4
c0004224:	0f 85 f6 00 00 00    	jne    c0004320 <dir_register+0x279>
c000422a:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000422e:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004231:	b9 01 00 00 00       	mov    ecx,0x1
c0004236:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c000423b:	74 0f                	je     c000424c <dir_register+0x1a5>
c000423d:	b9 0d 00 00 00       	mov    ecx,0xd
c0004242:	8d 47 0c             	lea    eax,[edi+0xc]
c0004245:	31 d2                	xor    edx,edx
c0004247:	f7 f1                	div    ecx
c0004249:	8d 48 01             	lea    ecx,[eax+0x1]
c000424c:	89 ca                	mov    edx,ecx
c000424e:	89 d8                	mov    eax,ebx
c0004250:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004254:	e8 c7 f6 ff ff       	call   c0003920 <dir_alloc>
c0004259:	89 c6                	mov    esi,eax
c000425b:	85 c0                	test   eax,eax
c000425d:	0f 85 bd 00 00 00    	jne    c0004320 <dir_register+0x279>
c0004263:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004267:	89 cf                	mov    edi,ecx
c0004269:	4f                   	dec    edi
c000426a:	74 6d                	je     c00042d9 <dir_register+0x232>
c000426c:	89 f8                	mov    eax,edi
c000426e:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004271:	c1 e0 05             	shl    eax,0x5
c0004274:	29 c2                	sub    edx,eax
c0004276:	89 d8                	mov    eax,ebx
c0004278:	e8 17 ed ff ff       	call   c0002f94 <dir_sdi>
c000427d:	89 c6                	mov    esi,eax
c000427f:	85 c0                	test   eax,eax
c0004281:	0f 85 99 00 00 00    	jne    c0004320 <dir_register+0x279>
c0004287:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000428b:	e8 71 dc ff ff       	call   c0001f01 <sum_sfn>
c0004290:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0004294:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0004297:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000429a:	89 e8                	mov    eax,ebp
c000429c:	e8 7b df ff ff       	call   c000221c <move_window>
c00042a1:	89 c6                	mov    esi,eax
c00042a3:	85 c0                	test   eax,eax
c00042a5:	75 79                	jne    c0004320 <dir_register+0x279>
c00042a7:	83 ec 0c             	sub    esp,0xc
c00042aa:	89 f8                	mov    eax,edi
c00042ac:	0f b6 c8             	movzx  ecx,al
c00042af:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c00042b4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00042b7:	52                   	push   edx
c00042b8:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00042bb:	e8 01 db ff ff       	call   c0001dc1 <put_lfn>
c00042c0:	31 d2                	xor    edx,edx
c00042c2:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00042c6:	89 d8                	mov    eax,ebx
c00042c8:	e8 21 f2 ff ff       	call   c00034ee <dir_next>
c00042cd:	83 c4 10             	add    esp,0x10
c00042d0:	89 c6                	mov    esi,eax
c00042d2:	85 c0                	test   eax,eax
c00042d4:	75 4a                	jne    c0004320 <dir_register+0x279>
c00042d6:	4f                   	dec    edi
c00042d7:	75 bb                	jne    c0004294 <dir_register+0x1ed>
c00042d9:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00042dc:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00042df:	89 e8                	mov    eax,ebp
c00042e1:	e8 36 df ff ff       	call   c000221c <move_window>
c00042e6:	89 c6                	mov    esi,eax
c00042e8:	85 c0                	test   eax,eax
c00042ea:	75 34                	jne    c0004320 <dir_register+0x279>
c00042ec:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00042ef:	b9 20 00 00 00       	mov    ecx,0x20
c00042f4:	31 d2                	xor    edx,edx
c00042f6:	e8 de d7 ff ff       	call   c0001ad9 <mem_set>
c00042fb:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00042fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004302:	b9 0b 00 00 00       	mov    ecx,0xb
c0004307:	e8 b8 d7 ff ff       	call   c0001ac4 <mem_cpy>
c000430c:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c000430f:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004312:	83 e0 18             	and    eax,0x18
c0004315:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004318:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c000431c:	eb 02                	jmp    c0004320 <dir_register+0x279>
c000431e:	89 c6                	mov    esi,eax
c0004320:	83 c4 6c             	add    esp,0x6c
c0004323:	89 f0                	mov    eax,esi
c0004325:	5b                   	pop    ebx
c0004326:	5e                   	pop    esi
c0004327:	5f                   	pop    edi
c0004328:	5d                   	pop    ebp
c0004329:	c3                   	ret    

c000432a <sync_fs>:
c000432a:	56                   	push   esi
c000432b:	53                   	push   ebx
c000432c:	53                   	push   ebx
c000432d:	89 c3                	mov    ebx,eax
c000432f:	e8 54 de ff ff       	call   c0002188 <sync_window>
c0004334:	85 c0                	test   eax,eax
c0004336:	0f 85 b1 00 00 00    	jne    c00043ed <sync_fs+0xc3>
c000433c:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c000433f:	0f 85 8e 00 00 00    	jne    c00043d3 <sync_fs+0xa9>
c0004345:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0004349:	0f 85 84 00 00 00    	jne    c00043d3 <sync_fs+0xa9>
c000434f:	8d 73 54             	lea    esi,[ebx+0x54]
c0004352:	b9 00 02 00 00       	mov    ecx,0x200
c0004357:	31 d2                	xor    edx,edx
c0004359:	89 f0                	mov    eax,esi
c000435b:	e8 79 d7 ff ff       	call   c0001ad9 <mem_set>
c0004360:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c0004366:	ba 55 aa 00 00       	mov    edx,0xaa55
c000436b:	e8 47 d7 ff ff       	call   c0001ab7 <st_word>
c0004370:	ba 52 52 61 41       	mov    edx,0x41615252
c0004375:	89 f0                	mov    eax,esi
c0004377:	e8 3f d7 ff ff       	call   c0001abb <st_dword>
c000437c:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c0004382:	ba 72 72 41 61       	mov    edx,0x61417272
c0004387:	e8 2f d7 ff ff       	call   c0001abb <st_dword>
c000438c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000438f:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c0004395:	e8 21 d7 ff ff       	call   c0001abb <st_dword>
c000439a:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000439d:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00043a3:	e8 13 d7 ff ff       	call   c0001abb <st_dword>
c00043a8:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00043ab:	83 c0 01             	add    eax,0x1
c00043ae:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00043b1:	83 d2 00             	adc    edx,0x0
c00043b4:	83 ec 0c             	sub    esp,0xc
c00043b7:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00043ba:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00043bd:	6a 01                	push   0x1
c00043bf:	52                   	push   edx
c00043c0:	50                   	push   eax
c00043c1:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00043c5:	56                   	push   esi
c00043c6:	50                   	push   eax
c00043c7:	e8 44 d6 ff ff       	call   c0001a10 <disk_write>
c00043cc:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c00043d0:	83 c4 20             	add    esp,0x20
c00043d3:	51                   	push   ecx
c00043d4:	6a 00                	push   0x0
c00043d6:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00043da:	6a 00                	push   0x0
c00043dc:	50                   	push   eax
c00043dd:	e8 44 d6 ff ff       	call   c0001a26 <disk_ioctl>
c00043e2:	83 c4 10             	add    esp,0x10
c00043e5:	85 c0                	test   eax,eax
c00043e7:	0f 95 c0             	setne  al
c00043ea:	0f b6 c0             	movzx  eax,al
c00043ed:	5a                   	pop    edx
c00043ee:	5b                   	pop    ebx
c00043ef:	5e                   	pop    esi
c00043f0:	c3                   	ret    

c00043f1 <create_partition>:
c00043f1:	55                   	push   ebp
c00043f2:	57                   	push   edi
c00043f3:	56                   	push   esi
c00043f4:	53                   	push   ebx
c00043f5:	83 ec 60             	sub    esp,0x60
c00043f8:	0f b6 c0             	movzx  eax,al
c00043fb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00043ff:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c0004403:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004407:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000440b:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000440f:	50                   	push   eax
c0004410:	6a 01                	push   0x1
c0004412:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004416:	e8 0b d6 ff ff       	call   c0001a26 <disk_ioctl>
c000441b:	83 c4 10             	add    esp,0x10
c000441e:	85 c0                	test   eax,eax
c0004420:	74 0a                	je     c000442c <create_partition+0x3b>
c0004422:	b8 01 00 00 00       	mov    eax,0x1
c0004427:	e9 73 05 00 00       	jmp    c000499f <create_partition+0x5ae>
c000442c:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0004430:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004434:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0004438:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000443c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004441:	0f 86 ed 03 00 00    	jbe    c0004834 <create_partition+0x443>
c0004447:	83 c0 df             	add    eax,0xffffffdf
c000444a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004452:	83 d2 ff             	adc    edx,0xffffffff
c0004455:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004459:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000445d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0004461:	83 c0 bd             	add    eax,0xffffffbd
c0004464:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004468:	83 d2 ff             	adc    edx,0xffffffff
c000446b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000446f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0004473:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000447a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004482:	be 22 00 00 00       	mov    esi,0x22
c0004487:	31 ff                	xor    edi,edi
c0004489:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c0004491:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c0004499:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00044a1:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00044a5:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00044ab:	75 0e                	jne    c00044bb <create_partition+0xca>
c00044ad:	b9 00 02 00 00       	mov    ecx,0x200
c00044b2:	31 d2                	xor    edx,edx
c00044b4:	89 d8                	mov    eax,ebx
c00044b6:	e8 1e d6 ff ff       	call   c0001ad9 <mem_set>
c00044bb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00044bf:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00044c3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00044c7:	0b 04 24             	or     eax,DWORD PTR [esp]
c00044ca:	0f 84 23 01 00 00    	je     c00045f3 <create_partition+0x202>
c00044d0:	89 f0                	mov    eax,esi
c00044d2:	89 fa                	mov    edx,edi
c00044d4:	05 ff 07 00 00       	add    eax,0x7ff
c00044d9:	83 d2 00             	adc    edx,0x0
c00044dc:	89 c1                	mov    ecx,eax
c00044de:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00044e4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00044e8:	89 ce                	mov    esi,ecx
c00044ea:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00044ee:	89 d7                	mov    edi,edx
c00044f0:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c00044f4:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c00044f8:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c00044fb:	89 04 24             	mov    DWORD PTR [esp],eax
c00044fe:	b8 64 00 00 00       	mov    eax,0x64
c0004503:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004506:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000450a:	b8 00 00 00 00       	mov    eax,0x0
c000450f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004513:	72 41                	jb     c0004556 <create_partition+0x165>
c0004515:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004519:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000451d:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004522:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004526:	01 c1                	add    ecx,eax
c0004528:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000452c:	f7 24 24             	mul    DWORD PTR [esp]
c000452f:	6a 00                	push   0x0
c0004531:	01 ca                	add    edx,ecx
c0004533:	6a 64                	push   0x64
c0004535:	52                   	push   edx
c0004536:	50                   	push   eax
c0004537:	e8 90 ae 01 00       	call   c001f3cc <__udivdi3>
c000453c:	83 c4 10             	add    esp,0x10
c000453f:	05 ff 07 00 00       	add    eax,0x7ff
c0004544:	83 d2 00             	adc    edx,0x0
c0004547:	89 c1                	mov    ecx,eax
c0004549:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c000454f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004553:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0004556:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004559:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000455d:	01 f0                	add    eax,esi
c000455f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004563:	11 fa                	adc    edx,edi
c0004565:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0004569:	19 d1                	sbb    ecx,edx
c000456b:	73 2e                	jae    c000459b <create_partition+0x1aa>
c000456d:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0004571:	89 f8                	mov    eax,edi
c0004573:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c0004577:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000457e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004586:	73 6b                	jae    c00045f3 <create_partition+0x202>
c0004588:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000458c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0004590:	29 f0                	sub    eax,esi
c0004592:	19 fa                	sbb    edx,edi
c0004594:	89 04 24             	mov    DWORD PTR [esp],eax
c0004597:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000459b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000459f:	0b 04 24             	or     eax,DWORD PTR [esp]
c00045a2:	74 4f                	je     c00045f3 <create_partition+0x202>
c00045a4:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00045a7:	b9 10 00 00 00       	mov    ecx,0x10
c00045ac:	ba 10 04 02 c0       	mov    edx,0xc0020410
c00045b1:	e8 0e d5 ff ff       	call   c0001ac4 <mem_cpy>
c00045b6:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00045ba:	b9 10 00 00 00       	mov    ecx,0x10
c00045bf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00045c3:	e8 49 db ff ff       	call   c0002111 <make_rand>
c00045c8:	89 f2                	mov    edx,esi
c00045ca:	89 f9                	mov    ecx,edi
c00045cc:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00045d0:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c00045d4:	e8 e5 d4 ff ff       	call   c0001abe <st_qword>
c00045d9:	03 34 24             	add    esi,DWORD PTR [esp]
c00045dc:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00045e0:	89 f2                	mov    edx,esi
c00045e2:	89 f9                	mov    ecx,edi
c00045e4:	83 c2 ff             	add    edx,0xffffffff
c00045e7:	83 d1 ff             	adc    ecx,0xffffffff
c00045ea:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c00045ee:	e8 cb d4 ff ff       	call   c0001abe <st_qword>
c00045f3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00045f7:	83 e8 80             	sub    eax,0xffffff80
c00045fa:	89 c5                	mov    ebp,eax
c00045fc:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004600:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004606:	75 6b                	jne    c0004673 <create_partition+0x282>
c0004608:	45                   	inc    ebp
c0004609:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000460d:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004612:	e8 56 da ff ff       	call   c000206d <crc32>
c0004617:	81 fd 00 02 00 00    	cmp    ebp,0x200
c000461d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004621:	75 e5                	jne    c0004608 <create_partition+0x217>
c0004623:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004627:	83 ec 0c             	sub    esp,0xc
c000462a:	c1 ed 09             	shr    ebp,0x9
c000462d:	31 d2                	xor    edx,edx
c000462f:	6a 01                	push   0x1
c0004631:	52                   	push   edx
c0004632:	8d 45 02             	lea    eax,[ebp+0x2]
c0004635:	50                   	push   eax
c0004636:	53                   	push   ebx
c0004637:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000463b:	e8 d0 d3 ff ff       	call   c0001a10 <disk_write>
c0004640:	83 c4 20             	add    esp,0x20
c0004643:	85 c0                	test   eax,eax
c0004645:	0f 85 d7 fd ff ff    	jne    c0004422 <create_partition+0x31>
c000464b:	83 ec 0c             	sub    esp,0xc
c000464e:	89 e8                	mov    eax,ebp
c0004650:	31 d2                	xor    edx,edx
c0004652:	6a 01                	push   0x1
c0004654:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0004658:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000465c:	52                   	push   edx
c000465d:	50                   	push   eax
c000465e:	53                   	push   ebx
c000465f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004663:	e8 a8 d3 ff ff       	call   c0001a10 <disk_write>
c0004668:	83 c4 20             	add    esp,0x20
c000466b:	85 c0                	test   eax,eax
c000466d:	0f 85 af fd ff ff    	jne    c0004422 <create_partition+0x31>
c0004673:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004677:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000467b:	3d 00 40 00 00       	cmp    eax,0x4000
c0004680:	74 0d                	je     c000468f <create_partition+0x29e>
c0004682:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0004686:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000468a:	e9 12 fe ff ff       	jmp    c00044a1 <create_partition+0xb0>
c000468f:	31 d2                	xor    edx,edx
c0004691:	b9 00 02 00 00       	mov    ecx,0x200
c0004696:	89 d8                	mov    eax,ebx
c0004698:	8d 6b 20             	lea    ebp,[ebx+0x20]
c000469b:	e8 39 d4 ff ff       	call   c0001ad9 <mem_set>
c00046a0:	b9 10 00 00 00       	mov    ecx,0x10
c00046a5:	ba 00 03 02 c0       	mov    edx,0xc0020300
c00046aa:	89 d8                	mov    eax,ebx
c00046ac:	e8 13 d4 ff ff       	call   c0001ac4 <mem_cpy>
c00046b1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00046b5:	f7 d2                	not    edx
c00046b7:	8d 43 58             	lea    eax,[ebx+0x58]
c00046ba:	8d 7b 48             	lea    edi,[ebx+0x48]
c00046bd:	e8 f9 d3 ff ff       	call   c0001abb <st_dword>
c00046c2:	8d 43 18             	lea    eax,[ebx+0x18]
c00046c5:	31 c9                	xor    ecx,ecx
c00046c7:	ba 01 00 00 00       	mov    edx,0x1
c00046cc:	89 04 24             	mov    DWORD PTR [esp],eax
c00046cf:	e8 ea d3 ff ff       	call   c0001abe <st_qword>
c00046d4:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00046d8:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00046dc:	83 c2 ff             	add    edx,0xffffffff
c00046df:	89 e8                	mov    eax,ebp
c00046e1:	83 d1 ff             	adc    ecx,0xffffffff
c00046e4:	e8 d5 d3 ff ff       	call   c0001abe <st_qword>
c00046e9:	31 c9                	xor    ecx,ecx
c00046eb:	8d 43 28             	lea    eax,[ebx+0x28]
c00046ee:	ba 22 00 00 00       	mov    edx,0x22
c00046f3:	e8 c6 d3 ff ff       	call   c0001abe <st_qword>
c00046f8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00046fc:	83 c2 de             	add    edx,0xffffffde
c00046ff:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004703:	83 d1 ff             	adc    ecx,0xffffffff
c0004706:	8d 43 30             	lea    eax,[ebx+0x30]
c0004709:	e8 b0 d3 ff ff       	call   c0001abe <st_qword>
c000470e:	8d 43 54             	lea    eax,[ebx+0x54]
c0004711:	ba 80 00 00 00       	mov    edx,0x80
c0004716:	31 f6                	xor    esi,esi
c0004718:	e8 9e d3 ff ff       	call   c0001abb <st_dword>
c000471d:	8d 43 50             	lea    eax,[ebx+0x50]
c0004720:	ba 80 00 00 00       	mov    edx,0x80
c0004725:	e8 91 d3 ff ff       	call   c0001abb <st_dword>
c000472a:	ba 02 00 00 00       	mov    edx,0x2
c000472f:	89 f8                	mov    eax,edi
c0004731:	e8 85 d3 ff ff       	call   c0001abb <st_dword>
c0004736:	8d 53 38             	lea    edx,[ebx+0x38]
c0004739:	b9 10 00 00 00       	mov    ecx,0x10
c000473e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004742:	e8 ca d9 ff ff       	call   c0002111 <make_rand>
c0004747:	83 c8 ff             	or     eax,0xffffffff
c000474a:	46                   	inc    esi
c000474b:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004750:	e8 18 d9 ff ff       	call   c000206d <crc32>
c0004755:	83 fe 5c             	cmp    esi,0x5c
c0004758:	75 f0                	jne    c000474a <create_partition+0x359>
c000475a:	f7 d0                	not    eax
c000475c:	8d 73 10             	lea    esi,[ebx+0x10]
c000475f:	89 c2                	mov    edx,eax
c0004761:	89 f0                	mov    eax,esi
c0004763:	e8 53 d3 ff ff       	call   c0001abb <st_dword>
c0004768:	83 ec 0c             	sub    esp,0xc
c000476b:	6a 01                	push   0x1
c000476d:	6a 00                	push   0x0
c000476f:	6a 01                	push   0x1
c0004771:	53                   	push   ebx
c0004772:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004776:	e8 95 d2 ff ff       	call   c0001a10 <disk_write>
c000477b:	83 c4 20             	add    esp,0x20
c000477e:	85 c0                	test   eax,eax
c0004780:	0f 85 9c fc ff ff    	jne    c0004422 <create_partition+0x31>
c0004786:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c000478a:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000478e:	83 c2 ff             	add    edx,0xffffffff
c0004791:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004794:	83 d1 ff             	adc    ecx,0xffffffff
c0004797:	e8 22 d3 ff ff       	call   c0001abe <st_qword>
c000479c:	ba 01 00 00 00       	mov    edx,0x1
c00047a1:	31 c9                	xor    ecx,ecx
c00047a3:	89 e8                	mov    eax,ebp
c00047a5:	e8 14 d3 ff ff       	call   c0001abe <st_qword>
c00047aa:	89 f8                	mov    eax,edi
c00047ac:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00047b0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00047b4:	e8 05 d3 ff ff       	call   c0001abe <st_qword>
c00047b9:	89 f0                	mov    eax,esi
c00047bb:	31 d2                	xor    edx,edx
c00047bd:	31 ff                	xor    edi,edi
c00047bf:	e8 f7 d2 ff ff       	call   c0001abb <st_dword>
c00047c4:	83 c8 ff             	or     eax,0xffffffff
c00047c7:	47                   	inc    edi
c00047c8:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c00047cd:	e8 9b d8 ff ff       	call   c000206d <crc32>
c00047d2:	83 ff 5c             	cmp    edi,0x5c
c00047d5:	75 f0                	jne    c00047c7 <create_partition+0x3d6>
c00047d7:	f7 d0                	not    eax
c00047d9:	89 c2                	mov    edx,eax
c00047db:	89 f0                	mov    eax,esi
c00047dd:	e8 d9 d2 ff ff       	call   c0001abb <st_dword>
c00047e2:	83 ec 0c             	sub    esp,0xc
c00047e5:	6a 01                	push   0x1
c00047e7:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00047eb:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c00047ef:	83 c0 ff             	add    eax,0xffffffff
c00047f2:	83 d2 ff             	adc    edx,0xffffffff
c00047f5:	52                   	push   edx
c00047f6:	50                   	push   eax
c00047f7:	53                   	push   ebx
c00047f8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00047fc:	e8 0f d2 ff ff       	call   c0001a10 <disk_write>
c0004801:	83 c4 20             	add    esp,0x20
c0004804:	85 c0                	test   eax,eax
c0004806:	0f 85 16 fc ff ff    	jne    c0004422 <create_partition+0x31>
c000480c:	31 d2                	xor    edx,edx
c000480e:	89 d8                	mov    eax,ebx
c0004810:	b9 00 02 00 00       	mov    ecx,0x200
c0004815:	e8 bf d2 ff ff       	call   c0001ad9 <mem_set>
c000481a:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004820:	b9 10 00 00 00       	mov    ecx,0x10
c0004825:	ba 10 03 02 c0       	mov    edx,0xc0020310
c000482a:	e8 95 d2 ff ff       	call   c0001ac4 <mem_cpy>
c000482f:	e9 3d 01 00 00       	jmp    c0004971 <create_partition+0x580>
c0004834:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004838:	b9 05 00 00 00       	mov    ecx,0x5
c000483d:	89 04 24             	mov    DWORD PTR [esp],eax
c0004840:	c6 44 24 10 08       	mov    BYTE PTR [esp+0x10],0x8
c0004845:	0f b6 74 24 10       	movzx  esi,BYTE PTR [esp+0x10]
c000484a:	31 d2                	xor    edx,edx
c000484c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000484f:	f7 f6                	div    esi
c0004851:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004856:	76 0c                	jbe    c0004864 <create_partition+0x473>
c0004858:	d0 64 24 10          	shl    BYTE PTR [esp+0x10],1
c000485c:	49                   	dec    ecx
c000485d:	75 e6                	jne    c0004845 <create_partition+0x454>
c000485f:	c6 44 24 10 ff       	mov    BYTE PTR [esp+0x10],0xff
c0004864:	b9 00 02 00 00       	mov    ecx,0x200
c0004869:	31 d2                	xor    edx,edx
c000486b:	89 d8                	mov    eax,ebx
c000486d:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004872:	e8 62 d2 ff ff       	call   c0001ad9 <mem_set>
c0004877:	b9 64 00 00 00       	mov    ecx,0x64
c000487c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000487f:	31 d2                	xor    edx,edx
c0004881:	f7 f1                	div    ecx
c0004883:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004887:	8d 8b c6 01 00 00    	lea    ecx,[ebx+0x1c6]
c000488d:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0004895:	83 7c 24 18 03       	cmp    DWORD PTR [esp+0x18],0x3
c000489a:	0f 96 c2             	setbe  dl
c000489d:	85 ed                	test   ebp,ebp
c000489f:	0f 95 c0             	setne  al
c00048a2:	84 c2                	test   dl,al
c00048a4:	0f 84 c7 00 00 00    	je     c0004971 <create_partition+0x580>
c00048aa:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c00048ad:	0f 83 be 00 00 00    	jae    c0004971 <create_partition+0x580>
c00048b3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00048b7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00048bb:	8b 34 f8             	mov    esi,DWORD PTR [eax+edi*8]
c00048be:	83 fe 64             	cmp    esi,0x64
c00048c1:	77 0c                	ja     c00048cf <create_partition+0x4de>
c00048c3:	74 07                	je     c00048cc <create_partition+0x4db>
c00048c5:	0f af 74 24 28       	imul   esi,DWORD PTR [esp+0x28]
c00048ca:	eb 03                	jmp    c00048cf <create_partition+0x4de>
c00048cc:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00048cf:	89 e8                	mov    eax,ebp
c00048d1:	01 f0                	add    eax,esi
c00048d3:	72 05                	jb     c00048da <create_partition+0x4e9>
c00048d5:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00048d8:	76 07                	jbe    c00048e1 <create_partition+0x4f0>
c00048da:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00048dd:	29 ee                	sub    esi,ebp
c00048df:	eb 08                	jmp    c00048e9 <create_partition+0x4f8>
c00048e1:	85 f6                	test   esi,esi
c00048e3:	0f 84 88 00 00 00    	je     c0004971 <create_partition+0x580>
c00048e9:	89 c8                	mov    eax,ecx
c00048eb:	89 ea                	mov    edx,ebp
c00048ed:	e8 c9 d1 ff ff       	call   c0001abb <st_dword>
c00048f2:	89 f2                	mov    edx,esi
c00048f4:	bf 3f 00 00 00       	mov    edi,0x3f
c00048f9:	8d 41 04             	lea    eax,[ecx+0x4]
c00048fc:	e8 ba d1 ff ff       	call   c0001abb <st_dword>
c0004901:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c0004905:	31 d2                	xor    edx,edx
c0004907:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000490b:	88 41 fc             	mov    BYTE PTR [ecx-0x4],al
c000490e:	83 c1 10             	add    ecx,0x10
c0004911:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0004916:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000491a:	89 e8                	mov    eax,ebp
c000491c:	f7 f7                	div    edi
c000491e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0004922:	31 d2                	xor    edx,edx
c0004924:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c0004928:	88 51 e9             	mov    BYTE PTR [ecx-0x17],dl
c000492b:	89 c2                	mov    edx,eax
c000492d:	c1 ea 02             	shr    edx,0x2
c0004930:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0004934:	47                   	inc    edi
c0004935:	01 f5                	add    ebp,esi
c0004937:	83 e2 c0             	and    edx,0xffffffc0
c000493a:	88 41 eb             	mov    BYTE PTR [ecx-0x15],al
c000493d:	09 fa                	or     edx,edi
c000493f:	8d 45 ff             	lea    eax,[ebp-0x1]
c0004942:	88 51 ea             	mov    BYTE PTR [ecx-0x16],dl
c0004945:	bf 3f 00 00 00       	mov    edi,0x3f
c000494a:	31 d2                	xor    edx,edx
c000494c:	f7 f7                	div    edi
c000494e:	89 d6                	mov    esi,edx
c0004950:	31 d2                	xor    edx,edx
c0004952:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c0004956:	89 c7                	mov    edi,eax
c0004958:	46                   	inc    esi
c0004959:	c1 ef 02             	shr    edi,0x2
c000495c:	88 51 ed             	mov    BYTE PTR [ecx-0x13],dl
c000495f:	83 e7 c0             	and    edi,0xffffffc0
c0004962:	88 41 ef             	mov    BYTE PTR [ecx-0x11],al
c0004965:	09 fe                	or     esi,edi
c0004967:	89 f2                	mov    edx,esi
c0004969:	88 51 ee             	mov    BYTE PTR [ecx-0x12],dl
c000496c:	e9 24 ff ff ff       	jmp    c0004895 <create_partition+0x4a4>
c0004971:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004977:	ba 55 aa 00 00       	mov    edx,0xaa55
c000497c:	e8 36 d1 ff ff       	call   c0001ab7 <st_word>
c0004981:	83 ec 0c             	sub    esp,0xc
c0004984:	6a 01                	push   0x1
c0004986:	6a 00                	push   0x0
c0004988:	6a 00                	push   0x0
c000498a:	53                   	push   ebx
c000498b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000498f:	e8 7c d0 ff ff       	call   c0001a10 <disk_write>
c0004994:	83 c4 20             	add    esp,0x20
c0004997:	85 c0                	test   eax,eax
c0004999:	0f 95 c0             	setne  al
c000499c:	0f b6 c0             	movzx  eax,al
c000499f:	83 c4 5c             	add    esp,0x5c
c00049a2:	5b                   	pop    ebx
c00049a3:	5e                   	pop    esi
c00049a4:	5f                   	pop    edi
c00049a5:	5d                   	pop    ebp
c00049a6:	c3                   	ret    

c00049a7 <get_fileinfo>:
c00049a7:	55                   	push   ebp
c00049a8:	57                   	push   edi
c00049a9:	56                   	push   esi
c00049aa:	53                   	push   ebx
c00049ab:	83 ec 1c             	sub    esp,0x1c
c00049ae:	8b 30                	mov    esi,DWORD PTR [eax]
c00049b0:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c00049b4:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c00049b7:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00049bb:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c00049be:	0f 84 dc 01 00 00    	je     c0004ba0 <get_fileinfo+0x1f9>
c00049c4:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00049c7:	75 0f                	jne    c00049d8 <get_fileinfo+0x31>
c00049c9:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00049cc:	83 c4 1c             	add    esp,0x1c
c00049cf:	5b                   	pop    ebx
c00049d0:	5e                   	pop    esi
c00049d1:	5f                   	pop    edi
c00049d2:	5d                   	pop    ebp
c00049d3:	e9 70 d5 ff ff       	jmp    c0001f48 <get_xfileinfo>
c00049d8:	89 d3                	mov    ebx,edx
c00049da:	89 c6                	mov    esi,eax
c00049dc:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c00049e0:	74 6a                	je     c0004a4c <get_fileinfo+0xa5>
c00049e2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00049ea:	31 ed                	xor    ebp,ebp
c00049ec:	31 ff                	xor    edi,edi
c00049ee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00049f2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00049f6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00049f9:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c00049fd:	66 85 d2             	test   dx,dx
c0004a00:	74 3e                	je     c0004a40 <get_fileinfo+0x99>
c0004a02:	66 85 ed             	test   bp,bp
c0004a05:	75 0c                	jne    c0004a13 <get_fileinfo+0x6c>
c0004a07:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004a0d:	66 3d ff 07          	cmp    ax,0x7ff
c0004a11:	76 22                	jbe    c0004a35 <get_fileinfo+0x8e>
c0004a13:	89 e8                	mov    eax,ebp
c0004a15:	b9 ff 00 00 00       	mov    ecx,0xff
c0004a1a:	c1 e0 10             	shl    eax,0x10
c0004a1d:	29 f9                	sub    ecx,edi
c0004a1f:	09 d0                	or     eax,edx
c0004a21:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004a25:	e8 bb d1 ff ff       	call   c0001be5 <put_utf>
c0004a2a:	84 c0                	test   al,al
c0004a2c:	74 10                	je     c0004a3e <get_fileinfo+0x97>
c0004a2e:	0f b6 c0             	movzx  eax,al
c0004a31:	01 c7                	add    edi,eax
c0004a33:	31 d2                	xor    edx,edx
c0004a35:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004a3a:	89 d5                	mov    ebp,edx
c0004a3c:	eb b0                	jmp    c00049ee <get_fileinfo+0x47>
c0004a3e:	31 ff                	xor    edi,edi
c0004a40:	66 85 ed             	test   bp,bp
c0004a43:	74 02                	je     c0004a47 <get_fileinfo+0xa0>
c0004a45:	31 ff                	xor    edi,edi
c0004a47:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004a4c:	31 ff                	xor    edi,edi
c0004a4e:	31 c9                	xor    ecx,ecx
c0004a50:	83 f9 0a             	cmp    ecx,0xa
c0004a53:	0f 87 ad 00 00 00    	ja     c0004b06 <get_fileinfo+0x15f>
c0004a59:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004a5c:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004a5f:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004a63:	66 83 fa 20          	cmp    dx,0x20
c0004a67:	0f 84 92 00 00 00    	je     c0004aff <get_fileinfo+0x158>
c0004a6d:	66 83 fa 05          	cmp    dx,0x5
c0004a71:	75 05                	jne    c0004a78 <get_fileinfo+0xd1>
c0004a73:	ba e5 00 00 00       	mov    edx,0xe5
c0004a78:	83 fd 09             	cmp    ebp,0x9
c0004a7b:	75 0b                	jne    c0004a88 <get_fileinfo+0xe1>
c0004a7d:	83 ff 0b             	cmp    edi,0xb
c0004a80:	77 06                	ja     c0004a88 <get_fileinfo+0xe1>
c0004a82:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004a87:	47                   	inc    edi
c0004a88:	0f b7 c2             	movzx  eax,dx
c0004a8b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004a8f:	e8 85 d0 ff ff       	call   c0001b19 <dbc_1st>
c0004a94:	85 c0                	test   eax,eax
c0004a96:	74 2f                	je     c0004ac7 <get_fileinfo+0x120>
c0004a98:	83 fd 08             	cmp    ebp,0x8
c0004a9b:	74 2a                	je     c0004ac7 <get_fileinfo+0x120>
c0004a9d:	83 fd 0b             	cmp    ebp,0xb
c0004aa0:	74 25                	je     c0004ac7 <get_fileinfo+0x120>
c0004aa2:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004aa5:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004aa9:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004aad:	e8 6a d0 ff ff       	call   c0001b1c <dbc_2nd>
c0004ab2:	85 c0                	test   eax,eax
c0004ab4:	74 11                	je     c0004ac7 <get_fileinfo+0x120>
c0004ab6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004aba:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004abd:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004ac2:	c1 e2 08             	shl    edx,0x8
c0004ac5:	09 c2                	or     edx,eax
c0004ac7:	50                   	push   eax
c0004ac8:	50                   	push   eax
c0004ac9:	68 b5 01 00 00       	push   0x1b5
c0004ace:	0f b7 d2             	movzx  edx,dx
c0004ad1:	52                   	push   edx
c0004ad2:	e8 17 38 00 00       	call   c00082ee <ff_oem2uni>
c0004ad7:	83 c4 10             	add    esp,0x10
c0004ada:	66 85 c0             	test   ax,ax
c0004add:	75 04                	jne    c0004ae3 <get_fileinfo+0x13c>
c0004adf:	31 ff                	xor    edi,edi
c0004ae1:	eb 23                	jmp    c0004b06 <get_fileinfo+0x15f>
c0004ae3:	b9 0c 00 00 00       	mov    ecx,0xc
c0004ae8:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004aec:	29 f9                	sub    ecx,edi
c0004aee:	0f b7 c0             	movzx  eax,ax
c0004af1:	e8 ef d0 ff ff       	call   c0001be5 <put_utf>
c0004af6:	84 c0                	test   al,al
c0004af8:	74 e5                	je     c0004adf <get_fileinfo+0x138>
c0004afa:	0f b6 c0             	movzx  eax,al
c0004afd:	01 c7                	add    edi,eax
c0004aff:	89 e9                	mov    ecx,ebp
c0004b01:	e9 4a ff ff ff       	jmp    c0004a50 <get_fileinfo+0xa9>
c0004b06:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004b0b:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004b0f:	75 54                	jne    c0004b65 <get_fileinfo+0x1be>
c0004b11:	85 ff                	test   edi,edi
c0004b13:	75 0b                	jne    c0004b20 <get_fileinfo+0x179>
c0004b15:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004b19:	ba 01 00 00 00       	mov    edx,0x1
c0004b1e:	eb 33                	jmp    c0004b53 <get_fileinfo+0x1ac>
c0004b20:	b1 08                	mov    cl,0x8
c0004b22:	31 d2                	xor    edx,edx
c0004b24:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004b2a:	84 c0                	test   al,al
c0004b2c:	74 25                	je     c0004b53 <get_fileinfo+0x1ac>
c0004b2e:	66 83 f8 2e          	cmp    ax,0x2e
c0004b32:	74 16                	je     c0004b4a <get_fileinfo+0x1a3>
c0004b34:	8d 78 bf             	lea    edi,[eax-0x41]
c0004b37:	66 83 ff 19          	cmp    di,0x19
c0004b3b:	77 0f                	ja     c0004b4c <get_fileinfo+0x1a5>
c0004b3d:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004b40:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004b43:	74 07                	je     c0004b4c <get_fileinfo+0x1a5>
c0004b45:	83 c0 20             	add    eax,0x20
c0004b48:	eb 02                	jmp    c0004b4c <get_fileinfo+0x1a5>
c0004b4a:	b1 10                	mov    cl,0x10
c0004b4c:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004b50:	42                   	inc    edx
c0004b51:	eb d1                	jmp    c0004b24 <get_fileinfo+0x17d>
c0004b53:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004b58:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b5b:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004b5f:	75 04                	jne    c0004b65 <get_fileinfo+0x1be>
c0004b61:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004b65:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b68:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004b6b:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004b6e:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b71:	83 c0 1c             	add    eax,0x1c
c0004b74:	e8 d9 ce ff ff       	call   c0001a52 <ld_dword>
c0004b79:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004b80:	89 03                	mov    DWORD PTR [ebx],eax
c0004b82:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b85:	83 c0 16             	add    eax,0x16
c0004b88:	e8 b8 ce ff ff       	call   c0001a45 <ld_word>
c0004b8d:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004b91:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b94:	83 c0 18             	add    eax,0x18
c0004b97:	e8 a9 ce ff ff       	call   c0001a45 <ld_word>
c0004b9c:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004ba0:	83 c4 1c             	add    esp,0x1c
c0004ba3:	5b                   	pop    ebx
c0004ba4:	5e                   	pop    esi
c0004ba5:	5f                   	pop    edi
c0004ba6:	5d                   	pop    ebp
c0004ba7:	c3                   	ret    

c0004ba8 <ld_clust.isra.0>:
c0004ba8:	56                   	push   esi
c0004ba9:	89 c6                	mov    esi,eax
c0004bab:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004bae:	53                   	push   ebx
c0004baf:	89 d3                	mov    ebx,edx
c0004bb1:	e8 8f ce ff ff       	call   c0001a45 <ld_word>
c0004bb6:	0f b7 c8             	movzx  ecx,ax
c0004bb9:	89 f0                	mov    eax,esi
c0004bbb:	3c 03                	cmp    al,0x3
c0004bbd:	75 0d                	jne    c0004bcc <ld_clust.isra.0+0x24>
c0004bbf:	8d 43 14             	lea    eax,[ebx+0x14]
c0004bc2:	e8 7e ce ff ff       	call   c0001a45 <ld_word>
c0004bc7:	c1 e0 10             	shl    eax,0x10
c0004bca:	09 c1                	or     ecx,eax
c0004bcc:	5b                   	pop    ebx
c0004bcd:	89 c8                	mov    eax,ecx
c0004bcf:	5e                   	pop    esi
c0004bd0:	c3                   	ret    

c0004bd1 <st_clust.isra.1>:
c0004bd1:	56                   	push   esi
c0004bd2:	89 c6                	mov    esi,eax
c0004bd4:	53                   	push   ebx
c0004bd5:	89 d3                	mov    ebx,edx
c0004bd7:	0f b7 d1             	movzx  edx,cx
c0004bda:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004bdd:	e8 d5 ce ff ff       	call   c0001ab7 <st_word>
c0004be2:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004be5:	75 0f                	jne    c0004bf6 <st_clust.isra.1+0x25>
c0004be7:	c1 e9 10             	shr    ecx,0x10
c0004bea:	8d 43 14             	lea    eax,[ebx+0x14]
c0004bed:	89 ca                	mov    edx,ecx
c0004bef:	5b                   	pop    ebx
c0004bf0:	5e                   	pop    esi
c0004bf1:	e9 c1 ce ff ff       	jmp    c0001ab7 <st_word>
c0004bf6:	5b                   	pop    ebx
c0004bf7:	5e                   	pop    esi
c0004bf8:	c3                   	ret    

c0004bf9 <init_alloc_info.isra.2>:
c0004bf9:	56                   	push   esi
c0004bfa:	89 c6                	mov    esi,eax
c0004bfc:	53                   	push   ebx
c0004bfd:	89 d3                	mov    ebx,edx
c0004bff:	51                   	push   ecx
c0004c00:	8b 00                	mov    eax,DWORD PTR [eax]
c0004c02:	83 c0 34             	add    eax,0x34
c0004c05:	e8 48 ce ff ff       	call   c0001a52 <ld_dword>
c0004c0a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004c0d:	8b 06                	mov    eax,DWORD PTR [esi]
c0004c0f:	83 c0 38             	add    eax,0x38
c0004c12:	e8 53 ce ff ff       	call   c0001a6a <ld_qword>
c0004c17:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004c1a:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004c1d:	8b 06                	mov    eax,DWORD PTR [esi]
c0004c1f:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004c22:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004c29:	83 e0 02             	and    eax,0x2
c0004c2c:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004c2f:	5b                   	pop    ebx
c0004c30:	5b                   	pop    ebx
c0004c31:	5e                   	pop    esi
c0004c32:	c3                   	ret    

c0004c33 <follow_path>:
c0004c33:	56                   	push   esi
c0004c34:	53                   	push   ebx
c0004c35:	89 c3                	mov    ebx,eax
c0004c37:	83 ec 14             	sub    esp,0x14
c0004c3a:	8b 30                	mov    esi,DWORD PTR [eax]
c0004c3c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004c40:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c44:	8a 10                	mov    dl,BYTE PTR [eax]
c0004c46:	80 fa 2f             	cmp    dl,0x2f
c0004c49:	75 07                	jne    c0004c52 <follow_path+0x1f>
c0004c4b:	40                   	inc    eax
c0004c4c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004c50:	eb ee                	jmp    c0004c40 <follow_path+0xd>
c0004c52:	80 fa 5c             	cmp    dl,0x5c
c0004c55:	74 f4                	je     c0004c4b <follow_path+0x18>
c0004c57:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004c5e:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004c65:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004c68:	77 52                	ja     c0004cbc <follow_path+0x89>
c0004c6a:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004c6e:	31 d2                	xor    edx,edx
c0004c70:	89 d8                	mov    eax,ebx
c0004c72:	e8 1d e3 ff ff       	call   c0002f94 <dir_sdi>
c0004c77:	eb 7c                	jmp    c0004cf5 <follow_path+0xc2>
c0004c79:	89 d8                	mov    eax,ebx
c0004c7b:	e8 60 f2 ff ff       	call   c0003ee0 <dir_find>
c0004c80:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004c83:	85 c0                	test   eax,eax
c0004c85:	75 46                	jne    c0004ccd <follow_path+0x9a>
c0004c87:	80 e2 04             	and    dl,0x4
c0004c8a:	75 69                	jne    c0004cf5 <follow_path+0xc2>
c0004c8c:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004c90:	74 5e                	je     c0004cf0 <follow_path+0xbd>
c0004c92:	8a 06                	mov    al,BYTE PTR [esi]
c0004c94:	3c 04                	cmp    al,0x4
c0004c96:	75 41                	jne    c0004cd9 <follow_path+0xa6>
c0004c98:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004c9b:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004c9f:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004ca2:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004ca5:	30 c0                	xor    al,al
c0004ca7:	09 d0                	or     eax,edx
c0004ca9:	89 da                	mov    edx,ebx
c0004cab:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004cae:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004cb1:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004cb4:	8d 46 10             	lea    eax,[esi+0x10]
c0004cb7:	e8 3d ff ff ff       	call   c0004bf9 <init_alloc_info.isra.2>
c0004cbc:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004cc0:	89 d8                	mov    eax,ebx
c0004cc2:	e8 b6 ed ff ff       	call   c0003a7d <create_name>
c0004cc7:	85 c0                	test   eax,eax
c0004cc9:	74 ae                	je     c0004c79 <follow_path+0x46>
c0004ccb:	eb 28                	jmp    c0004cf5 <follow_path+0xc2>
c0004ccd:	83 f8 04             	cmp    eax,0x4
c0004cd0:	75 23                	jne    c0004cf5 <follow_path+0xc2>
c0004cd2:	80 e2 04             	and    dl,0x4
c0004cd5:	74 19                	je     c0004cf0 <follow_path+0xbd>
c0004cd7:	eb 1c                	jmp    c0004cf5 <follow_path+0xc2>
c0004cd9:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004cdc:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004ce2:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004ce6:	e8 bd fe ff ff       	call   c0004ba8 <ld_clust.isra.0>
c0004ceb:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004cee:	eb cc                	jmp    c0004cbc <follow_path+0x89>
c0004cf0:	b8 05 00 00 00       	mov    eax,0x5
c0004cf5:	83 c4 14             	add    esp,0x14
c0004cf8:	5b                   	pop    ebx
c0004cf9:	5e                   	pop    esi
c0004cfa:	c3                   	ret    

c0004cfb <f_mount>:
c0004cfb:	53                   	push   ebx
c0004cfc:	83 ec 18             	sub    esp,0x18
c0004cff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004d03:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004d07:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d0b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004d0f:	e8 13 d3 ff ff       	call   c0002027 <get_ldnumber>
c0004d14:	89 c2                	mov    edx,eax
c0004d16:	b8 0b 00 00 00       	mov    eax,0xb
c0004d1b:	85 d2                	test   edx,edx
c0004d1d:	78 39                	js     c0004d58 <f_mount+0x5d>
c0004d1f:	8b 04 95 20 45 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdbae0]
c0004d26:	85 c0                	test   eax,eax
c0004d28:	74 03                	je     c0004d2d <f_mount+0x32>
c0004d2a:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004d2d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d31:	85 c0                	test   eax,eax
c0004d33:	74 03                	je     c0004d38 <f_mount+0x3d>
c0004d35:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004d38:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d3c:	89 04 95 20 45 02 c0 	mov    DWORD PTR [edx*4-0x3ffdbae0],eax
c0004d43:	31 c0                	xor    eax,eax
c0004d45:	84 db                	test   bl,bl
c0004d47:	74 0f                	je     c0004d58 <f_mount+0x5d>
c0004d49:	31 c9                	xor    ecx,ecx
c0004d4b:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004d4f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004d53:	e8 6f d7 ff ff       	call   c00024c7 <mount_volume>
c0004d58:	83 c4 18             	add    esp,0x18
c0004d5b:	5b                   	pop    ebx
c0004d5c:	c3                   	ret    

c0004d5d <f_open>:
c0004d5d:	55                   	push   ebp
c0004d5e:	bd 09 00 00 00       	mov    ebp,0x9
c0004d63:	57                   	push   edi
c0004d64:	56                   	push   esi
c0004d65:	53                   	push   ebx
c0004d66:	83 ec 7c             	sub    esp,0x7c
c0004d69:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004d70:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004d77:	85 db                	test   ebx,ebx
c0004d79:	0f 84 10 04 00 00    	je     c000518f <f_open+0x432>
c0004d7f:	89 fe                	mov    esi,edi
c0004d81:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004d85:	83 e6 3f             	and    esi,0x3f
c0004d88:	89 f0                	mov    eax,esi
c0004d8a:	0f b6 c8             	movzx  ecx,al
c0004d8d:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004d94:	e8 2e d7 ff ff       	call   c00024c7 <mount_volume>
c0004d99:	89 c5                	mov    ebp,eax
c0004d9b:	85 c0                	test   eax,eax
c0004d9d:	0f 85 e6 03 00 00    	jne    c0005189 <f_open+0x42c>
c0004da3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004da7:	83 ec 0c             	sub    esp,0xc
c0004daa:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0004dae:	bd 11 00 00 00       	mov    ebp,0x11
c0004db3:	68 60 04 00 00       	push   0x460
c0004db8:	e8 6e 34 00 00       	call   c000822b <ff_memalloc>
c0004dbd:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004dc1:	83 c4 10             	add    esp,0x10
c0004dc4:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004dc9:	0f 84 c0 03 00 00    	je     c000518f <f_open+0x432>
c0004dcf:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004dd3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004dd7:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004ddd:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004de0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004de3:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004dea:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004dee:	e8 40 fe ff ff       	call   c0004c33 <follow_path>
c0004df3:	89 c5                	mov    ebp,eax
c0004df5:	85 c0                	test   eax,eax
c0004df7:	75 0c                	jne    c0004e05 <f_open+0xa8>
c0004df9:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004dfe:	79 05                	jns    c0004e05 <f_open+0xa8>
c0004e00:	bd 06 00 00 00       	mov    ebp,0x6
c0004e05:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0004e0b:	0f 84 84 01 00 00    	je     c0004f95 <f_open+0x238>
c0004e11:	85 ed                	test   ebp,ebp
c0004e13:	74 20                	je     c0004e35 <f_open+0xd8>
c0004e15:	83 fd 04             	cmp    ebp,0x4
c0004e18:	0f 85 58 03 00 00    	jne    c0005176 <f_open+0x419>
c0004e1e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004e22:	83 ce 08             	or     esi,0x8
c0004e25:	e8 7d f2 ff ff       	call   c00040a7 <dir_register>
c0004e2a:	89 c5                	mov    ebp,eax
c0004e2c:	85 c0                	test   eax,eax
c0004e2e:	74 2f                	je     c0004e5f <f_open+0x102>
c0004e30:	e9 41 03 00 00       	jmp    c0005176 <f_open+0x419>
c0004e35:	bd 07 00 00 00       	mov    ebp,0x7
c0004e3a:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0004e3f:	0f 85 31 03 00 00    	jne    c0005176 <f_open+0x419>
c0004e45:	bd 08 00 00 00       	mov    ebp,0x8
c0004e4a:	f7 c7 04 00 00 00    	test   edi,0x4
c0004e50:	0f 85 20 03 00 00    	jne    c0005176 <f_open+0x419>
c0004e56:	83 e7 08             	and    edi,0x8
c0004e59:	0f 84 65 01 00 00    	je     c0004fc4 <f_open+0x267>
c0004e5f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004e63:	8a 02                	mov    al,BYTE PTR [edx]
c0004e65:	3c 04                	cmp    al,0x4
c0004e67:	0f 85 97 00 00 00    	jne    c0004f04 <f_open+0x1a7>
c0004e6d:	8d 42 10             	lea    eax,[edx+0x10]
c0004e70:	89 13                	mov    DWORD PTR [ebx],edx
c0004e72:	89 da                	mov    edx,ebx
c0004e74:	e8 80 fd ff ff       	call   c0004bf9 <init_alloc_info.isra.2>
c0004e79:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e7d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e80:	31 d2                	xor    edx,edx
c0004e82:	83 c0 02             	add    eax,0x2
c0004e85:	b9 1e 00 00 00       	mov    ecx,0x1e
c0004e8a:	e8 4a cc ff ff       	call   c0001ad9 <mem_set>
c0004e8f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e93:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e96:	b9 1a 00 00 00       	mov    ecx,0x1a
c0004e9b:	83 c0 26             	add    eax,0x26
c0004e9e:	31 d2                	xor    edx,edx
c0004ea0:	e8 34 cc ff ff       	call   c0001ad9 <mem_set>
c0004ea5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ea9:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0004eac:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c0004eb0:	ba 00 00 21 50       	mov    edx,0x50210000
c0004eb5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004eb8:	83 c0 08             	add    eax,0x8
c0004ebb:	e8 fb cb ff ff       	call   c0001abb <st_dword>
c0004ec0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ec4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004ec7:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c0004ecb:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004ecf:	e8 c4 ea ff ff       	call   c0003998 <store_xdir>
c0004ed4:	89 c5                	mov    ebp,eax
c0004ed6:	85 c0                	test   eax,eax
c0004ed8:	0f 85 98 02 00 00    	jne    c0005176 <f_open+0x419>
c0004ede:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004ee1:	85 d2                	test   edx,edx
c0004ee3:	0f 84 db 00 00 00    	je     c0004fc4 <f_open+0x267>
c0004ee9:	31 c9                	xor    ecx,ecx
c0004eeb:	89 d8                	mov    eax,ebx
c0004eed:	e8 9b e3 ff ff       	call   c000328d <remove_chain>
c0004ef2:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004ef6:	89 c5                	mov    ebp,eax
c0004ef8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004efb:	48                   	dec    eax
c0004efc:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0004eff:	e9 b8 00 00 00       	jmp    c0004fbc <f_open+0x25f>
c0004f04:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0004f08:	89 ea                	mov    edx,ebp
c0004f0a:	e8 99 fc ff ff       	call   c0004ba8 <ld_clust.isra.0>
c0004f0f:	ba 00 00 21 50       	mov    edx,0x50210000
c0004f14:	89 c7                	mov    edi,eax
c0004f16:	8d 45 0e             	lea    eax,[ebp+0xe]
c0004f19:	e8 9d cb ff ff       	call   c0001abb <st_dword>
c0004f1e:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004f22:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0004f26:	31 c9                	xor    ecx,ecx
c0004f28:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004f2c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f30:	e8 9c fc ff ff       	call   c0004bd1 <st_clust.isra.1>
c0004f35:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004f39:	83 c0 1c             	add    eax,0x1c
c0004f3c:	31 d2                	xor    edx,edx
c0004f3e:	e8 78 cb ff ff       	call   c0001abb <st_dword>
c0004f43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f47:	85 ff                	test   edi,edi
c0004f49:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004f4d:	74 75                	je     c0004fc4 <f_open+0x267>
c0004f4f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f53:	31 c9                	xor    ecx,ecx
c0004f55:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0004f58:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0004f5b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004f5f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004f63:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f67:	89 fa                	mov    edx,edi
c0004f69:	e8 1f e3 ff ff       	call   c000328d <remove_chain>
c0004f6e:	89 c5                	mov    ebp,eax
c0004f70:	85 c0                	test   eax,eax
c0004f72:	0f 85 fe 01 00 00    	jne    c0005176 <f_open+0x419>
c0004f78:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004f7c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004f80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f84:	4f                   	dec    edi
c0004f85:	e8 92 d2 ff ff       	call   c000221c <move_window>
c0004f8a:	89 c5                	mov    ebp,eax
c0004f8c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f90:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0004f93:	eb 27                	jmp    c0004fbc <f_open+0x25f>
c0004f95:	85 ed                	test   ebp,ebp
c0004f97:	0f 85 d9 01 00 00    	jne    c0005176 <f_open+0x419>
c0004f9d:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c0004fa1:	bd 04 00 00 00       	mov    ebp,0x4
c0004fa6:	a8 10                	test   al,0x10
c0004fa8:	0f 85 c8 01 00 00    	jne    c0005176 <f_open+0x419>
c0004fae:	83 e7 02             	and    edi,0x2
c0004fb1:	74 11                	je     c0004fc4 <f_open+0x267>
c0004fb3:	bd 07 00 00 00       	mov    ebp,0x7
c0004fb8:	a8 01                	test   al,0x1
c0004fba:	eb 02                	jmp    c0004fbe <f_open+0x261>
c0004fbc:	85 ed                	test   ebp,ebp
c0004fbe:	0f 85 b2 01 00 00    	jne    c0005176 <f_open+0x419>
c0004fc4:	f7 c6 08 00 00 00    	test   esi,0x8
c0004fca:	74 03                	je     c0004fcf <f_open+0x272>
c0004fcc:	83 ce 40             	or     esi,0x40
c0004fcf:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004fd3:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c0004fd6:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c0004fd9:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c0004fdc:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0004fe0:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c0004fe3:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c0004fe6:	8a 02                	mov    al,BYTE PTR [edx]
c0004fe8:	3c 04                	cmp    al,0x4
c0004fea:	75 2a                	jne    c0005016 <f_open+0x2b9>
c0004fec:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004ff0:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004ff3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004ff7:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0004ffc:	30 c0                	xor    al,al
c0004ffe:	09 c8                	or     eax,ecx
c0005000:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0005003:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005007:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000500a:	8d 42 10             	lea    eax,[edx+0x10]
c000500d:	89 da                	mov    edx,ebx
c000500f:	e8 e5 fb ff ff       	call   c0004bf9 <init_alloc_info.isra.2>
c0005014:	eb 1c                	jmp    c0005032 <f_open+0x2d5>
c0005016:	89 fa                	mov    edx,edi
c0005018:	e8 8b fb ff ff       	call   c0004ba8 <ld_clust.isra.0>
c000501d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005020:	8d 47 1c             	lea    eax,[edi+0x1c]
c0005023:	e8 2a ca ff ff       	call   c0001a52 <ld_dword>
c0005028:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000502f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005032:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005036:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c000503d:	89 03                	mov    DWORD PTR [ebx],eax
c000503f:	31 d2                	xor    edx,edx
c0005041:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005045:	b9 00 02 00 00       	mov    ecx,0x200
c000504a:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000504e:	89 f0                	mov    eax,esi
c0005050:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005053:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0005057:	8d 43 50             	lea    eax,[ebx+0x50]
c000505a:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0005061:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c0005068:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c000506f:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005076:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000507a:	e8 5a ca ff ff       	call   c0001ad9 <mem_set>
c000507f:	83 e6 20             	and    esi,0x20
c0005082:	75 07                	jne    c000508b <f_open+0x32e>
c0005084:	31 ed                	xor    ebp,ebp
c0005086:	e9 eb 00 00 00       	jmp    c0005176 <f_open+0x419>
c000508b:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000508e:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005091:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005095:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005099:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000509d:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00050a1:	74 e1                	je     c0005084 <f_open+0x327>
c00050a3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00050a7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00050ab:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00050ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050b2:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00050b5:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00050b8:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00050bc:	c1 e5 09             	shl    ebp,0x9
c00050bf:	31 ff                	xor    edi,edi
c00050c1:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00050c5:	89 f8                	mov    eax,edi
c00050c7:	89 ee                	mov    esi,ebp
c00050c9:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00050cd:	73 22                	jae    c00050f1 <f_open+0x394>
c00050cf:	89 d8                	mov    eax,ebx
c00050d1:	e8 c8 dc ff ff       	call   c0002d9e <get_fat>
c00050d6:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00050da:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c00050de:	89 c2                	mov    edx,eax
c00050e0:	83 f8 01             	cmp    eax,0x1
c00050e3:	76 10                	jbe    c00050f5 <f_open+0x398>
c00050e5:	83 f8 ff             	cmp    eax,0xffffffff
c00050e8:	75 d5                	jne    c00050bf <f_open+0x362>
c00050ea:	bd 01 00 00 00       	mov    ebp,0x1
c00050ef:	eb 09                	jmp    c00050fa <f_open+0x39d>
c00050f1:	31 ed                	xor    ebp,ebp
c00050f3:	eb 05                	jmp    c00050fa <f_open+0x39d>
c00050f5:	bd 02 00 00 00       	mov    ebp,0x2
c00050fa:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00050fd:	85 ed                	test   ebp,ebp
c00050ff:	75 75                	jne    c0005176 <f_open+0x419>
c0005101:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005105:	25 ff 01 00 00       	and    eax,0x1ff
c000510a:	0f 84 74 ff ff ff    	je     c0005084 <f_open+0x327>
c0005110:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005114:	bd 02 00 00 00       	mov    ebp,0x2
c0005119:	89 c8                	mov    eax,ecx
c000511b:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000511f:	e8 ba cb ff ff       	call   c0001cde <clst2sect>
c0005124:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005128:	89 d7                	mov    edi,edx
c000512a:	09 c7                	or     edi,eax
c000512c:	74 48                	je     c0005176 <f_open+0x419>
c000512e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005132:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005136:	0f ac fe 09          	shrd   esi,edi,0x9
c000513a:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000513e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005146:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000514a:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000514e:	83 ec 0c             	sub    esp,0xc
c0005151:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005154:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0005157:	6a 01                	push   0x1
c0005159:	52                   	push   edx
c000515a:	50                   	push   eax
c000515b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000515f:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005163:	50                   	push   eax
c0005164:	e8 91 c8 ff ff       	call   c00019fa <disk_read>
c0005169:	83 c4 20             	add    esp,0x20
c000516c:	85 c0                	test   eax,eax
c000516e:	0f 95 c0             	setne  al
c0005171:	0f b6 c0             	movzx  eax,al
c0005174:	89 c5                	mov    ebp,eax
c0005176:	83 ec 0c             	sub    esp,0xc
c0005179:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000517d:	e8 bf 30 00 00       	call   c0008241 <ff_memfree>
c0005182:	83 c4 10             	add    esp,0x10
c0005185:	85 ed                	test   ebp,ebp
c0005187:	74 06                	je     c000518f <f_open+0x432>
c0005189:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000518f:	83 c4 7c             	add    esp,0x7c
c0005192:	89 e8                	mov    eax,ebp
c0005194:	5b                   	pop    ebx
c0005195:	5e                   	pop    esi
c0005196:	5f                   	pop    edi
c0005197:	5d                   	pop    ebp
c0005198:	c3                   	ret    

c0005199 <f_read>:
c0005199:	55                   	push   ebp
c000519a:	57                   	push   edi
c000519b:	56                   	push   esi
c000519c:	53                   	push   ebx
c000519d:	83 ec 2c             	sub    esp,0x2c
c00051a0:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00051a4:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00051a8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00051ac:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00051b2:	89 d8                	mov    eax,ebx
c00051b4:	e8 88 cf ff ff       	call   c0002141 <validate>
c00051b9:	89 c5                	mov    ebp,eax
c00051bb:	85 c0                	test   eax,eax
c00051bd:	0f 85 4c 02 00 00    	jne    c000540f <f_read+0x276>
c00051c3:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00051c7:	85 ed                	test   ebp,ebp
c00051c9:	0f 85 40 02 00 00    	jne    c000540f <f_read+0x276>
c00051cf:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00051d3:	0f 84 31 02 00 00    	je     c000540a <f_read+0x271>
c00051d9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00051dc:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00051df:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00051e2:	bf 00 00 00 00       	mov    edi,0x0
c00051e7:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00051ea:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00051ee:	89 d1                	mov    ecx,edx
c00051f0:	19 f9                	sbb    ecx,edi
c00051f2:	0f 83 cf 00 00 00    	jae    c00052c7 <f_read+0x12e>
c00051f8:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00051fc:	e9 c6 00 00 00       	jmp    c00052c7 <f_read+0x12e>
c0005201:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005204:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005207:	89 d0                	mov    eax,edx
c0005209:	25 ff 01 00 00       	and    eax,0x1ff
c000520e:	0f 85 c9 01 00 00    	jne    c00053dd <f_read+0x244>
c0005214:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005218:	89 d6                	mov    esi,edx
c000521a:	89 cf                	mov    edi,ecx
c000521c:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005220:	0f ac fe 09          	shrd   esi,edi,0x9
c0005224:	48                   	dec    eax
c0005225:	21 f0                	and    eax,esi
c0005227:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000522b:	0f 84 a6 00 00 00    	je     c00052d7 <f_read+0x13e>
c0005231:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005235:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005238:	89 c8                	mov    eax,ecx
c000523a:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000523d:	e8 9c ca ff ff       	call   c0001cde <clst2sect>
c0005242:	89 d7                	mov    edi,edx
c0005244:	09 c7                	or     edi,eax
c0005246:	0f 84 b4 00 00 00    	je     c0005300 <f_read+0x167>
c000524c:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005250:	31 ff                	xor    edi,edi
c0005252:	01 c6                	add    esi,eax
c0005254:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005257:	11 d7                	adc    edi,edx
c0005259:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005261:	0f 86 fd 00 00 00    	jbe    c0005364 <f_read+0x1cb>
c0005267:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000526b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000526f:	c1 e8 09             	shr    eax,0x9
c0005272:	89 04 24             	mov    DWORD PTR [esp],eax
c0005275:	03 14 24             	add    edx,DWORD PTR [esp]
c0005278:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000527c:	39 c2                	cmp    edx,eax
c000527e:	76 07                	jbe    c0005287 <f_read+0xee>
c0005280:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0005284:	89 04 24             	mov    DWORD PTR [esp],eax
c0005287:	83 ec 0c             	sub    esp,0xc
c000528a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000528e:	57                   	push   edi
c000528f:	56                   	push   esi
c0005290:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005294:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005298:	50                   	push   eax
c0005299:	e8 5c c7 ff ff       	call   c00019fa <disk_read>
c000529e:	83 c4 20             	add    esp,0x20
c00052a1:	85 c0                	test   eax,eax
c00052a3:	75 6e                	jne    c0005313 <f_read+0x17a>
c00052a5:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00052a9:	78 7e                	js     c0005329 <f_read+0x190>
c00052ab:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00052ae:	c1 e6 09             	shl    esi,0x9
c00052b1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00052b5:	31 ff                	xor    edi,edi
c00052b7:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00052bb:	01 30                	add    DWORD PTR [eax],esi
c00052bd:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00052c1:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00052c4:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00052c7:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00052cc:	0f 85 2f ff ff ff    	jne    c0005201 <f_read+0x68>
c00052d2:	e9 38 01 00 00       	jmp    c000540f <f_read+0x276>
c00052d7:	89 c8                	mov    eax,ecx
c00052d9:	09 d0                	or     eax,edx
c00052db:	75 05                	jne    c00052e2 <f_read+0x149>
c00052dd:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00052e0:	eb 19                	jmp    c00052fb <f_read+0x162>
c00052e2:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00052e6:	74 09                	je     c00052f1 <f_read+0x158>
c00052e8:	89 d8                	mov    eax,ebx
c00052ea:	e8 10 ca ff ff       	call   c0001cff <clmt_clust>
c00052ef:	eb 0a                	jmp    c00052fb <f_read+0x162>
c00052f1:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00052f4:	89 d8                	mov    eax,ebx
c00052f6:	e8 a3 da ff ff       	call   c0002d9e <get_fat>
c00052fb:	83 f8 01             	cmp    eax,0x1
c00052fe:	77 0e                	ja     c000530e <f_read+0x175>
c0005300:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005304:	bd 02 00 00 00       	mov    ebp,0x2
c0005309:	e9 01 01 00 00       	jmp    c000540f <f_read+0x276>
c000530e:	83 f8 ff             	cmp    eax,0xffffffff
c0005311:	75 0e                	jne    c0005321 <f_read+0x188>
c0005313:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005317:	bd 01 00 00 00       	mov    ebp,0x1
c000531c:	e9 ee 00 00 00       	jmp    c000540f <f_read+0x276>
c0005321:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005324:	e9 08 ff ff ff       	jmp    c0005231 <f_read+0x98>
c0005329:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000532c:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000532f:	29 f0                	sub    eax,esi
c0005331:	19 fa                	sbb    edx,edi
c0005333:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0005336:	89 d7                	mov    edi,edx
c0005338:	ba 00 00 00 00       	mov    edx,0x0
c000533d:	89 f9                	mov    ecx,edi
c000533f:	19 d1                	sbb    ecx,edx
c0005341:	0f 83 64 ff ff ff    	jae    c00052ab <f_read+0x112>
c0005347:	89 c7                	mov    edi,eax
c0005349:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000534d:	c1 e7 09             	shl    edi,0x9
c0005350:	8d 53 50             	lea    edx,[ebx+0x50]
c0005353:	01 f8                	add    eax,edi
c0005355:	b9 00 02 00 00       	mov    ecx,0x200
c000535a:	e8 65 c7 ff ff       	call   c0001ac4 <mem_cpy>
c000535f:	e9 47 ff ff ff       	jmp    c00052ab <f_read+0x112>
c0005364:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005367:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000536a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000536e:	89 04 24             	mov    DWORD PTR [esp],eax
c0005371:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c0005375:	75 05                	jne    c000537c <f_read+0x1e3>
c0005377:	39 34 24             	cmp    DWORD PTR [esp],esi
c000537a:	74 5b                	je     c00053d7 <f_read+0x23e>
c000537c:	8d 43 50             	lea    eax,[ebx+0x50]
c000537f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005383:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005387:	79 2a                	jns    c00053b3 <f_read+0x21a>
c0005389:	83 ec 0c             	sub    esp,0xc
c000538c:	6a 01                	push   0x1
c000538e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005392:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005396:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000539a:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000539e:	50                   	push   eax
c000539f:	e8 6c c6 ff ff       	call   c0001a10 <disk_write>
c00053a4:	83 c4 20             	add    esp,0x20
c00053a7:	85 c0                	test   eax,eax
c00053a9:	0f 85 64 ff ff ff    	jne    c0005313 <f_read+0x17a>
c00053af:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00053b3:	83 ec 0c             	sub    esp,0xc
c00053b6:	6a 01                	push   0x1
c00053b8:	57                   	push   edi
c00053b9:	56                   	push   esi
c00053ba:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00053be:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00053c2:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00053c6:	50                   	push   eax
c00053c7:	e8 2e c6 ff ff       	call   c00019fa <disk_read>
c00053cc:	83 c4 20             	add    esp,0x20
c00053cf:	85 c0                	test   eax,eax
c00053d1:	0f 85 3c ff ff ff    	jne    c0005313 <f_read+0x17a>
c00053d7:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00053da:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00053dd:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00053e0:	ba 00 02 00 00       	mov    edx,0x200
c00053e5:	25 ff 01 00 00       	and    eax,0x1ff
c00053ea:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00053ee:	29 c2                	sub    edx,eax
c00053f0:	39 d6                	cmp    esi,edx
c00053f2:	76 02                	jbe    c00053f6 <f_read+0x25d>
c00053f4:	89 d6                	mov    esi,edx
c00053f6:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c00053fa:	89 f1                	mov    ecx,esi
c00053fc:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005400:	e8 bf c6 ff ff       	call   c0001ac4 <mem_cpy>
c0005405:	e9 a7 fe ff ff       	jmp    c00052b1 <f_read+0x118>
c000540a:	bd 07 00 00 00       	mov    ebp,0x7
c000540f:	83 c4 2c             	add    esp,0x2c
c0005412:	89 e8                	mov    eax,ebp
c0005414:	5b                   	pop    ebx
c0005415:	5e                   	pop    esi
c0005416:	5f                   	pop    edi
c0005417:	5d                   	pop    ebp
c0005418:	c3                   	ret    

c0005419 <f_write>:
c0005419:	55                   	push   ebp
c000541a:	57                   	push   edi
c000541b:	56                   	push   esi
c000541c:	53                   	push   ebx
c000541d:	83 ec 2c             	sub    esp,0x2c
c0005420:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005424:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005428:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000542c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005432:	89 d8                	mov    eax,ebx
c0005434:	e8 08 cd ff ff       	call   c0002141 <validate>
c0005439:	89 c5                	mov    ebp,eax
c000543b:	85 c0                	test   eax,eax
c000543d:	0f 85 86 02 00 00    	jne    c00056c9 <f_write+0x2b0>
c0005443:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005447:	85 ed                	test   ebp,ebp
c0005449:	0f 85 7a 02 00 00    	jne    c00056c9 <f_write+0x2b0>
c000544f:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005453:	0f 84 6b 02 00 00    	je     c00056c4 <f_write+0x2ab>
c0005459:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000545d:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005460:	0f 84 43 01 00 00    	je     c00055a9 <f_write+0x190>
c0005466:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005469:	89 c1                	mov    ecx,eax
c000546b:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c000546f:	0f 83 34 01 00 00    	jae    c00055a9 <f_write+0x190>
c0005475:	f7 d0                	not    eax
c0005477:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000547b:	e9 29 01 00 00       	jmp    c00055a9 <f_write+0x190>
c0005480:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005483:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005486:	89 d0                	mov    eax,edx
c0005488:	25 ff 01 00 00       	and    eax,0x1ff
c000548d:	0f 85 00 02 00 00    	jne    c0005693 <f_write+0x27a>
c0005493:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005497:	89 d6                	mov    esi,edx
c0005499:	89 cf                	mov    edi,ecx
c000549b:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000549f:	0f ac fe 09          	shrd   esi,edi,0x9
c00054a3:	48                   	dec    eax
c00054a4:	21 f0                	and    eax,esi
c00054a6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00054aa:	0f 84 06 01 00 00    	je     c00055b6 <f_write+0x19d>
c00054b0:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054b4:	0f 88 6e 01 00 00    	js     c0005628 <f_write+0x20f>
c00054ba:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00054be:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00054c1:	89 c8                	mov    eax,ecx
c00054c3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00054c7:	e8 12 c8 ff ff       	call   c0001cde <clst2sect>
c00054cc:	89 d1                	mov    ecx,edx
c00054ce:	09 c1                	or     ecx,eax
c00054d0:	0f 84 1c 01 00 00    	je     c00055f2 <f_write+0x1d9>
c00054d6:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00054da:	31 ff                	xor    edi,edi
c00054dc:	01 c6                	add    esi,eax
c00054de:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00054e2:	11 d7                	adc    edi,edx
c00054e4:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00054ec:	0f 86 63 01 00 00    	jbe    c0005655 <f_write+0x23c>
c00054f2:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00054f6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00054fa:	c1 e8 09             	shr    eax,0x9
c00054fd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005501:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0005505:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005509:	39 c2                	cmp    edx,eax
c000550b:	76 08                	jbe    c0005515 <f_write+0xfc>
c000550d:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0005511:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005515:	83 ec 0c             	sub    esp,0xc
c0005518:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000551c:	57                   	push   edi
c000551d:	56                   	push   esi
c000551e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005522:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005526:	50                   	push   eax
c0005527:	e8 e4 c4 ff ff       	call   c0001a10 <disk_write>
c000552c:	83 c4 20             	add    esp,0x20
c000552f:	85 c0                	test   eax,eax
c0005531:	0f 85 ce 00 00 00    	jne    c0005605 <f_write+0x1ec>
c0005537:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000553a:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000553d:	29 f0                	sub    eax,esi
c000553f:	19 fa                	sbb    edx,edi
c0005541:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005545:	89 d7                	mov    edi,edx
c0005547:	ba 00 00 00 00       	mov    edx,0x0
c000554c:	89 f9                	mov    ecx,edi
c000554e:	19 d1                	sbb    ecx,edx
c0005550:	73 1c                	jae    c000556e <f_write+0x155>
c0005552:	89 c7                	mov    edi,eax
c0005554:	b9 00 02 00 00       	mov    ecx,0x200
c0005559:	c1 e7 09             	shl    edi,0x9
c000555c:	8d 43 50             	lea    eax,[ebx+0x50]
c000555f:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c0005563:	89 fa                	mov    edx,edi
c0005565:	e8 5a c5 ff ff       	call   c0001ac4 <mem_cpy>
c000556a:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000556e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005572:	c1 e6 09             	shl    esi,0x9
c0005575:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005579:	31 ff                	xor    edi,edi
c000557b:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000557f:	01 30                	add    DWORD PTR [eax],esi
c0005581:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0005585:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005588:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c000558b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000558e:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c0005591:	89 c1                	mov    ecx,eax
c0005593:	39 f2                	cmp    edx,esi
c0005595:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0005598:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c000559b:	19 f9                	sbb    ecx,edi
c000559d:	73 04                	jae    c00055a3 <f_write+0x18a>
c000559f:	89 f2                	mov    edx,esi
c00055a1:	89 f8                	mov    eax,edi
c00055a3:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00055a6:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00055a9:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00055ae:	0f 85 cc fe ff ff    	jne    c0005480 <f_write+0x67>
c00055b4:	eb 2e                	jmp    c00055e4 <f_write+0x1cb>
c00055b6:	89 c8                	mov    eax,ecx
c00055b8:	09 d0                	or     eax,edx
c00055ba:	75 0b                	jne    c00055c7 <f_write+0x1ae>
c00055bc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00055bf:	31 d2                	xor    edx,edx
c00055c1:	85 c0                	test   eax,eax
c00055c3:	75 28                	jne    c00055ed <f_write+0x1d4>
c00055c5:	eb 12                	jmp    c00055d9 <f_write+0x1c0>
c00055c7:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00055cb:	74 09                	je     c00055d6 <f_write+0x1bd>
c00055cd:	89 d8                	mov    eax,ebx
c00055cf:	e8 2b c7 ff ff       	call   c0001cff <clmt_clust>
c00055d4:	eb 0a                	jmp    c00055e0 <f_write+0x1c7>
c00055d6:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00055d9:	89 d8                	mov    eax,ebx
c00055db:	e8 ac da ff ff       	call   c000308c <create_chain>
c00055e0:	85 c0                	test   eax,eax
c00055e2:	75 09                	jne    c00055ed <f_write+0x1d4>
c00055e4:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c00055e8:	e9 dc 00 00 00       	jmp    c00056c9 <f_write+0x2b0>
c00055ed:	83 f8 01             	cmp    eax,0x1
c00055f0:	75 0e                	jne    c0005600 <f_write+0x1e7>
c00055f2:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00055f6:	bd 02 00 00 00       	mov    ebp,0x2
c00055fb:	e9 c9 00 00 00       	jmp    c00056c9 <f_write+0x2b0>
c0005600:	83 f8 ff             	cmp    eax,0xffffffff
c0005603:	75 0e                	jne    c0005613 <f_write+0x1fa>
c0005605:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005609:	bd 01 00 00 00       	mov    ebp,0x1
c000560e:	e9 b6 00 00 00       	jmp    c00056c9 <f_write+0x2b0>
c0005613:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005616:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000561a:	0f 85 90 fe ff ff    	jne    c00054b0 <f_write+0x97>
c0005620:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005623:	e9 88 fe ff ff       	jmp    c00054b0 <f_write+0x97>
c0005628:	83 ec 0c             	sub    esp,0xc
c000562b:	8d 43 50             	lea    eax,[ebx+0x50]
c000562e:	6a 01                	push   0x1
c0005630:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005633:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005636:	50                   	push   eax
c0005637:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000563b:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000563f:	50                   	push   eax
c0005640:	e8 cb c3 ff ff       	call   c0001a10 <disk_write>
c0005645:	83 c4 20             	add    esp,0x20
c0005648:	85 c0                	test   eax,eax
c000564a:	75 b9                	jne    c0005605 <f_write+0x1ec>
c000564c:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005650:	e9 65 fe ff ff       	jmp    c00054ba <f_write+0xa1>
c0005655:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c0005658:	75 05                	jne    c000565f <f_write+0x246>
c000565a:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c000565d:	74 2e                	je     c000568d <f_write+0x274>
c000565f:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005662:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0005665:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c0005668:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c000566b:	73 20                	jae    c000568d <f_write+0x274>
c000566d:	83 ec 0c             	sub    esp,0xc
c0005670:	8d 43 50             	lea    eax,[ebx+0x50]
c0005673:	6a 01                	push   0x1
c0005675:	57                   	push   edi
c0005676:	56                   	push   esi
c0005677:	50                   	push   eax
c0005678:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000567c:	50                   	push   eax
c000567d:	e8 78 c3 ff ff       	call   c00019fa <disk_read>
c0005682:	83 c4 20             	add    esp,0x20
c0005685:	85 c0                	test   eax,eax
c0005687:	0f 85 78 ff ff ff    	jne    c0005605 <f_write+0x1ec>
c000568d:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005690:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005693:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005696:	ba 00 02 00 00       	mov    edx,0x200
c000569b:	25 ff 01 00 00       	and    eax,0x1ff
c00056a0:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00056a4:	29 c2                	sub    edx,eax
c00056a6:	39 d6                	cmp    esi,edx
c00056a8:	76 02                	jbe    c00056ac <f_write+0x293>
c00056aa:	89 d6                	mov    esi,edx
c00056ac:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00056b0:	89 f1                	mov    ecx,esi
c00056b2:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00056b6:	e8 09 c4 ff ff       	call   c0001ac4 <mem_cpy>
c00056bb:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00056bf:	e9 b1 fe ff ff       	jmp    c0005575 <f_write+0x15c>
c00056c4:	bd 07 00 00 00       	mov    ebp,0x7
c00056c9:	83 c4 2c             	add    esp,0x2c
c00056cc:	89 e8                	mov    eax,ebp
c00056ce:	5b                   	pop    ebx
c00056cf:	5e                   	pop    esi
c00056d0:	5f                   	pop    edi
c00056d1:	5d                   	pop    ebp
c00056d2:	c3                   	ret    

c00056d3 <f_sync>:
c00056d3:	56                   	push   esi
c00056d4:	53                   	push   ebx
c00056d5:	83 ec 64             	sub    esp,0x64
c00056d8:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c00056dc:	8d 54 24 10          	lea    edx,[esp+0x10]
c00056e0:	89 d8                	mov    eax,ebx
c00056e2:	e8 5a ca ff ff       	call   c0002141 <validate>
c00056e7:	85 c0                	test   eax,eax
c00056e9:	0f 85 ba 01 00 00    	jne    c00058a9 <f_sync+0x1d6>
c00056ef:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c00056f2:	f6 c2 40             	test   dl,0x40
c00056f5:	0f 84 ae 01 00 00    	je     c00058a9 <f_sync+0x1d6>
c00056fb:	84 d2                	test   dl,dl
c00056fd:	79 33                	jns    c0005732 <f_sync+0x5f>
c00056ff:	83 ec 0c             	sub    esp,0xc
c0005702:	8d 43 50             	lea    eax,[ebx+0x50]
c0005705:	6a 01                	push   0x1
c0005707:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000570a:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000570d:	50                   	push   eax
c000570e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005712:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005716:	50                   	push   eax
c0005717:	e8 f4 c2 ff ff       	call   c0001a10 <disk_write>
c000571c:	89 c2                	mov    edx,eax
c000571e:	83 c4 20             	add    esp,0x20
c0005721:	b8 01 00 00 00       	mov    eax,0x1
c0005726:	85 d2                	test   edx,edx
c0005728:	0f 85 7b 01 00 00    	jne    c00058a9 <f_sync+0x1d6>
c000572e:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005732:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005736:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005739:	0f 85 11 01 00 00    	jne    c0005850 <f_sync+0x17d>
c000573f:	89 d8                	mov    eax,ebx
c0005741:	e8 1e d6 ff ff       	call   c0002d64 <fill_first_frag>
c0005746:	85 c0                	test   eax,eax
c0005748:	0f 85 5b 01 00 00    	jne    c00058a9 <f_sync+0x1d6>
c000574e:	83 c9 ff             	or     ecx,0xffffffff
c0005751:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005754:	89 d8                	mov    eax,ebx
c0005756:	e8 d4 d5 ff ff       	call   c0002d2f <fill_last_frag>
c000575b:	85 c0                	test   eax,eax
c000575d:	0f 85 46 01 00 00    	jne    c00058a9 <f_sync+0x1d6>
c0005763:	83 ec 0c             	sub    esp,0xc
c0005766:	68 60 04 00 00       	push   0x460
c000576b:	e8 bb 2a 00 00       	call   c000822b <ff_memalloc>
c0005770:	89 c6                	mov    esi,eax
c0005772:	83 c4 10             	add    esp,0x10
c0005775:	b8 11 00 00 00       	mov    eax,0x11
c000577a:	85 f6                	test   esi,esi
c000577c:	0f 84 27 01 00 00    	je     c00058a9 <f_sync+0x1d6>
c0005782:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005786:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c000578c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000578f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005792:	89 da                	mov    edx,ebx
c0005794:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005798:	e8 bc df ff ff       	call   c0003759 <load_obj_xdir>
c000579d:	85 c0                	test   eax,eax
c000579f:	0f 85 95 00 00 00    	jne    c000583a <f_sync+0x167>
c00057a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057a9:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00057ac:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00057b0:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00057b3:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00057b6:	83 ca 01             	or     edx,0x1
c00057b9:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00057bc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057bf:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00057c2:	83 c0 34             	add    eax,0x34
c00057c5:	e8 f1 c2 ff ff       	call   c0001abb <st_dword>
c00057ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057ce:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057d1:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057d4:	83 c0 38             	add    eax,0x38
c00057d7:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00057da:	e8 df c2 ff ff       	call   c0001abe <st_qword>
c00057df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057e3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057e6:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00057e9:	83 c0 28             	add    eax,0x28
c00057ec:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057ef:	e8 ca c2 ff ff       	call   c0001abe <st_qword>
c00057f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057f8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057fb:	ba 00 00 21 50       	mov    edx,0x50210000
c0005800:	83 c0 0c             	add    eax,0xc
c0005803:	e8 b3 c2 ff ff       	call   c0001abb <st_dword>
c0005808:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000580c:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000580f:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005813:	31 d2                	xor    edx,edx
c0005815:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005818:	83 c0 10             	add    eax,0x10
c000581b:	e8 9b c2 ff ff       	call   c0001abb <st_dword>
c0005820:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005824:	e8 6f e1 ff ff       	call   c0003998 <store_xdir>
c0005829:	85 c0                	test   eax,eax
c000582b:	75 0d                	jne    c000583a <f_sync+0x167>
c000582d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005831:	e8 f4 ea ff ff       	call   c000432a <sync_fs>
c0005836:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c000583a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000583e:	83 ec 0c             	sub    esp,0xc
c0005841:	56                   	push   esi
c0005842:	e8 fa 29 00 00       	call   c0008241 <ff_memfree>
c0005847:	83 c4 10             	add    esp,0x10
c000584a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000584e:	eb 59                	jmp    c00058a9 <f_sync+0x1d6>
c0005850:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005853:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005856:	e8 c1 c9 ff ff       	call   c000221c <move_window>
c000585b:	85 c0                	test   eax,eax
c000585d:	75 4a                	jne    c00058a9 <f_sync+0x1d6>
c000585f:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005862:	89 f2                	mov    edx,esi
c0005864:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005868:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c000586b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000586d:	e8 5f f3 ff ff       	call   c0004bd1 <st_clust.isra.1>
c0005872:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005875:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005878:	e8 3e c2 ff ff       	call   c0001abb <st_dword>
c000587d:	8d 46 16             	lea    eax,[esi+0x16]
c0005880:	ba 00 00 21 50       	mov    edx,0x50210000
c0005885:	e8 31 c2 ff ff       	call   c0001abb <st_dword>
c000588a:	8d 46 12             	lea    eax,[esi+0x12]
c000588d:	31 d2                	xor    edx,edx
c000588f:	e8 23 c2 ff ff       	call   c0001ab7 <st_word>
c0005894:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005898:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000589c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058a0:	e8 85 ea ff ff       	call   c000432a <sync_fs>
c00058a5:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c00058a9:	83 c4 64             	add    esp,0x64
c00058ac:	5b                   	pop    ebx
c00058ad:	5e                   	pop    esi
c00058ae:	c3                   	ret    

c00058af <f_close>:
c00058af:	53                   	push   ebx
c00058b0:	83 ec 24             	sub    esp,0x24
c00058b3:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00058b7:	53                   	push   ebx
c00058b8:	e8 16 fe ff ff       	call   c00056d3 <f_sync>
c00058bd:	83 c4 10             	add    esp,0x10
c00058c0:	85 c0                	test   eax,eax
c00058c2:	75 15                	jne    c00058d9 <f_close+0x2a>
c00058c4:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00058c8:	89 d8                	mov    eax,ebx
c00058ca:	e8 72 c8 ff ff       	call   c0002141 <validate>
c00058cf:	85 c0                	test   eax,eax
c00058d1:	75 06                	jne    c00058d9 <f_close+0x2a>
c00058d3:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00058d9:	83 c4 18             	add    esp,0x18
c00058dc:	5b                   	pop    ebx
c00058dd:	c3                   	ret    

c00058de <f_lseek>:
c00058de:	55                   	push   ebp
c00058df:	57                   	push   edi
c00058e0:	56                   	push   esi
c00058e1:	53                   	push   ebx
c00058e2:	83 ec 3c             	sub    esp,0x3c
c00058e5:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00058e9:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00058ed:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c00058f1:	89 04 24             	mov    DWORD PTR [esp],eax
c00058f4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00058f8:	89 d8                	mov    eax,ebx
c00058fa:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c00058fe:	e8 3e c8 ff ff       	call   c0002141 <validate>
c0005903:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005907:	85 c0                	test   eax,eax
c0005909:	0f 85 28 04 00 00    	jne    c0005d37 <f_lseek+0x459>
c000590f:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005913:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005917:	85 c0                	test   eax,eax
c0005919:	0f 85 18 04 00 00    	jne    c0005d37 <f_lseek+0x459>
c000591f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005923:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005926:	74 0c                	je     c0005934 <f_lseek+0x56>
c0005928:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c000592b:	85 c0                	test   eax,eax
c000592d:	75 1f                	jne    c000594e <f_lseek+0x70>
c000592f:	e9 8b 01 00 00       	jmp    c0005abf <f_lseek+0x1e1>
c0005934:	83 c9 ff             	or     ecx,0xffffffff
c0005937:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000593a:	89 d8                	mov    eax,ebx
c000593c:	e8 ee d3 ff ff       	call   c0002d2f <fill_last_frag>
c0005941:	85 c0                	test   eax,eax
c0005943:	74 e3                	je     c0005928 <f_lseek+0x4a>
c0005945:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005949:	e9 e9 03 00 00       	jmp    c0005d37 <f_lseek+0x459>
c000594e:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005953:	0f 85 ac 00 00 00    	jne    c0005a05 <f_lseek+0x127>
c0005959:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c000595d:	0f 85 a2 00 00 00    	jne    c0005a05 <f_lseek+0x127>
c0005963:	8d 78 04             	lea    edi,[eax+0x4]
c0005966:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005969:	8b 00                	mov    eax,DWORD PTR [eax]
c000596b:	be 02 00 00 00       	mov    esi,0x2
c0005970:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005974:	85 ed                	test   ebp,ebp
c0005976:	74 73                	je     c00059eb <f_lseek+0x10d>
c0005978:	89 e9                	mov    ecx,ebp
c000597a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005981:	89 ca                	mov    edx,ecx
c0005983:	89 d8                	mov    eax,ebx
c0005985:	ff 04 24             	inc    DWORD PTR [esp]
c0005988:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000598c:	e8 0d d4 ff ff       	call   c0002d9e <get_fat>
c0005991:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005995:	83 f8 01             	cmp    eax,0x1
c0005998:	77 11                	ja     c00059ab <f_lseek+0xcd>
c000599a:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c000599e:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00059a6:	e9 8c 03 00 00       	jmp    c0005d37 <f_lseek+0x459>
c00059ab:	83 f8 ff             	cmp    eax,0xffffffff
c00059ae:	75 11                	jne    c00059c1 <f_lseek+0xe3>
c00059b0:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00059b4:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00059bc:	e9 76 03 00 00       	jmp    c0005d37 <f_lseek+0x459>
c00059c1:	8d 51 01             	lea    edx,[ecx+0x1]
c00059c4:	89 c1                	mov    ecx,eax
c00059c6:	39 c2                	cmp    edx,eax
c00059c8:	74 b7                	je     c0005981 <f_lseek+0xa3>
c00059ca:	83 c6 02             	add    esi,0x2
c00059cd:	39 74 24 18          	cmp    DWORD PTR [esp+0x18],esi
c00059d1:	72 0b                	jb     c00059de <f_lseek+0x100>
c00059d3:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00059d6:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c00059d9:	89 0f                	mov    DWORD PTR [edi],ecx
c00059db:	83 c7 08             	add    edi,0x8
c00059de:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00059e2:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c00059e5:	76 04                	jbe    c00059eb <f_lseek+0x10d>
c00059e7:	89 c5                	mov    ebp,eax
c00059e9:	eb 8d                	jmp    c0005978 <f_lseek+0x9a>
c00059eb:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00059ee:	3b 74 24 18          	cmp    esi,DWORD PTR [esp+0x18]
c00059f2:	89 30                	mov    DWORD PTR [eax],esi
c00059f4:	0f 87 35 03 00 00    	ja     c0005d2f <f_lseek+0x451>
c00059fa:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005a00:	e9 32 03 00 00       	jmp    c0005d37 <f_lseek+0x459>
c0005a05:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0005a08:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005a0b:	39 34 24             	cmp    DWORD PTR [esp],esi
c0005a0e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005a12:	19 f8                	sbb    eax,edi
c0005a14:	73 07                	jae    c0005a1d <f_lseek+0x13f>
c0005a16:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005a19:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005a1d:	89 f8                	mov    eax,edi
c0005a1f:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0005a22:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0005a25:	09 f0                	or     eax,esi
c0005a27:	0f 84 0a 03 00 00    	je     c0005d37 <f_lseek+0x459>
c0005a2d:	89 f0                	mov    eax,esi
c0005a2f:	89 fa                	mov    edx,edi
c0005a31:	83 c0 ff             	add    eax,0xffffffff
c0005a34:	83 d2 ff             	adc    edx,0xffffffff
c0005a37:	89 04 24             	mov    DWORD PTR [esp],eax
c0005a3a:	89 d1                	mov    ecx,edx
c0005a3c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005a40:	89 c2                	mov    edx,eax
c0005a42:	89 d8                	mov    eax,ebx
c0005a44:	e8 b6 c2 ff ff       	call   c0001cff <clmt_clust>
c0005a49:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005a4d:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005a50:	89 c2                	mov    edx,eax
c0005a52:	89 c8                	mov    eax,ecx
c0005a54:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0005a58:	e8 81 c2 ff ff       	call   c0001cde <clst2sect>
c0005a5d:	89 d1                	mov    ecx,edx
c0005a5f:	09 c1                	or     ecx,eax
c0005a61:	0f 84 33 ff ff ff    	je     c000599a <f_lseek+0xbc>
c0005a67:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0005a6d:	0f 84 c4 02 00 00    	je     c0005d37 <f_lseek+0x459>
c0005a73:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0005a77:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005a7b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005a7e:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005a82:	0f ac fe 09          	shrd   esi,edi,0x9
c0005a86:	4d                   	dec    ebp
c0005a87:	31 ff                	xor    edi,edi
c0005a89:	21 ee                	and    esi,ebp
c0005a8b:	01 c6                	add    esi,eax
c0005a8d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005a90:	11 d7                	adc    edi,edx
c0005a92:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005a95:	39 fa                	cmp    edx,edi
c0005a97:	75 08                	jne    c0005aa1 <f_lseek+0x1c3>
c0005a99:	39 f0                	cmp    eax,esi
c0005a9b:	0f 84 96 02 00 00    	je     c0005d37 <f_lseek+0x459>
c0005aa1:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005aa4:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005aa8:	0f 89 58 02 00 00    	jns    c0005d06 <f_lseek+0x428>
c0005aae:	83 ec 0c             	sub    esp,0xc
c0005ab1:	6a 01                	push   0x1
c0005ab3:	52                   	push   edx
c0005ab4:	50                   	push   eax
c0005ab5:	55                   	push   ebp
c0005ab6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005aba:	e9 32 02 00 00       	jmp    c0005cf1 <f_lseek+0x413>
c0005abf:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ac3:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005ac6:	74 16                	je     c0005ade <f_lseek+0x200>
c0005ac8:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005acd:	76 0f                	jbe    c0005ade <f_lseek+0x200>
c0005acf:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005ad6:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005ade:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005ae1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005ae4:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005ae7:	89 c7                	mov    edi,eax
c0005ae9:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005aed:	73 0d                	jae    c0005afc <f_lseek+0x21e>
c0005aef:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005af3:	75 07                	jne    c0005afc <f_lseek+0x21e>
c0005af5:	89 14 24             	mov    DWORD PTR [esp],edx
c0005af8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005afc:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005b00:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005b03:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005b06:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005b0d:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005b14:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005b17:	75 09                	jne    c0005b22 <f_lseek+0x244>
c0005b19:	31 f6                	xor    esi,esi
c0005b1b:	31 ff                	xor    edi,edi
c0005b1d:	e9 87 01 00 00       	jmp    c0005ca9 <f_lseek+0x3cb>
c0005b22:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005b26:	c1 e1 09             	shl    ecx,0x9
c0005b29:	89 d7                	mov    edi,edx
c0005b2b:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0005b2f:	09 c7                	or     edi,eax
c0005b31:	74 6b                	je     c0005b9e <f_lseek+0x2c0>
c0005b33:	83 c0 ff             	add    eax,0xffffffff
c0005b36:	89 cf                	mov    edi,ecx
c0005b38:	83 d2 ff             	adc    edx,0xffffffff
c0005b3b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005b3f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005b42:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0005b46:	83 c0 ff             	add    eax,0xffffffff
c0005b49:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005b4d:	83 d2 ff             	adc    edx,0xffffffff
c0005b50:	31 ed                	xor    ebp,ebp
c0005b52:	55                   	push   ebp
c0005b53:	51                   	push   ecx
c0005b54:	52                   	push   edx
c0005b55:	50                   	push   eax
c0005b56:	e8 71 98 01 00       	call   c001f3cc <__udivdi3>
c0005b5b:	83 c4 10             	add    esp,0x10
c0005b5e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0005b62:	89 d6                	mov    esi,edx
c0005b64:	55                   	push   ebp
c0005b65:	57                   	push   edi
c0005b66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005b6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005b6e:	e8 59 98 01 00       	call   c001f3cc <__udivdi3>
c0005b73:	83 c4 10             	add    esp,0x10
c0005b76:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0005b7a:	19 d6                	sbb    esi,edx
c0005b7c:	72 20                	jb     c0005b9e <f_lseek+0x2c0>
c0005b7e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0005b82:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005b86:	f7 d9                	neg    ecx
c0005b88:	23 4c 24 10          	and    ecx,DWORD PTR [esp+0x10]
c0005b8c:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005b8f:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005b92:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005b95:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005b99:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005b9c:	eb 28                	jmp    c0005bc6 <f_lseek+0x2e8>
c0005b9e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005ba1:	85 c0                	test   eax,eax
c0005ba3:	75 1e                	jne    c0005bc3 <f_lseek+0x2e5>
c0005ba5:	31 d2                	xor    edx,edx
c0005ba7:	89 d8                	mov    eax,ebx
c0005ba9:	e8 de d4 ff ff       	call   c000308c <create_chain>
c0005bae:	83 f8 01             	cmp    eax,0x1
c0005bb1:	0f 84 e3 fd ff ff    	je     c000599a <f_lseek+0xbc>
c0005bb7:	83 f8 ff             	cmp    eax,0xffffffff
c0005bba:	0f 84 f0 fd ff ff    	je     c00059b0 <f_lseek+0xd2>
c0005bc0:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005bc3:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005bc6:	85 c0                	test   eax,eax
c0005bc8:	0f 84 4b ff ff ff    	je     c0005b19 <f_lseek+0x23b>
c0005bce:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0005bd2:	31 ff                	xor    edi,edi
c0005bd4:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005bd7:	89 fd                	mov    ebp,edi
c0005bd9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0005bdd:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005be0:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005be3:	1b 6c 24 04          	sbb    ebp,DWORD PTR [esp+0x4]
c0005be7:	73 7d                	jae    c0005c66 <f_lseek+0x388>
c0005be9:	29 34 24             	sub    DWORD PTR [esp],esi
c0005bec:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005bf0:	01 d6                	add    esi,edx
c0005bf2:	11 cf                	adc    edi,ecx
c0005bf4:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005bf7:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0005bfa:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0005bfd:	f6 c2 02             	test   dl,0x2
c0005c00:	74 25                	je     c0005c27 <f_lseek+0x349>
c0005c02:	39 73 0c             	cmp    DWORD PTR [ebx+0xc],esi
c0005c05:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005c08:	19 f9                	sbb    ecx,edi
c0005c0a:	73 0c                	jae    c0005c18 <f_lseek+0x33a>
c0005c0c:	83 ca 40             	or     edx,0x40
c0005c0f:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005c12:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005c15:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005c18:	89 c2                	mov    edx,eax
c0005c1a:	89 d8                	mov    eax,ebx
c0005c1c:	e8 6b d4 ff ff       	call   c000308c <create_chain>
c0005c21:	85 c0                	test   eax,eax
c0005c23:	75 0b                	jne    c0005c30 <f_lseek+0x352>
c0005c25:	eb 30                	jmp    c0005c57 <f_lseek+0x379>
c0005c27:	89 c2                	mov    edx,eax
c0005c29:	89 d8                	mov    eax,ebx
c0005c2b:	e8 6e d1 ff ff       	call   c0002d9e <get_fat>
c0005c30:	83 f8 ff             	cmp    eax,0xffffffff
c0005c33:	0f 84 77 fd ff ff    	je     c00059b0 <f_lseek+0xd2>
c0005c39:	83 f8 01             	cmp    eax,0x1
c0005c3c:	0f 86 58 fd ff ff    	jbe    c000599a <f_lseek+0xbc>
c0005c42:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005c46:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005c49:	0f 86 4b fd ff ff    	jbe    c000599a <f_lseek+0xbc>
c0005c4f:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005c52:	e9 77 ff ff ff       	jmp    c0005bce <f_lseek+0x2f0>
c0005c57:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005c5e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005c66:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005c69:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005c6d:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005c70:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005c73:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005c76:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005c7c:	0f 84 97 fe ff ff    	je     c0005b19 <f_lseek+0x23b>
c0005c82:	89 c2                	mov    edx,eax
c0005c84:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005c88:	e8 51 c0 ff ff       	call   c0001cde <clst2sect>
c0005c8d:	89 d7                	mov    edi,edx
c0005c8f:	09 c7                	or     edi,eax
c0005c91:	0f 84 03 fd ff ff    	je     c000599a <f_lseek+0xbc>
c0005c97:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005c9b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005c9e:	0f ac fe 09          	shrd   esi,edi,0x9
c0005ca2:	c1 ef 09             	shr    edi,0x9
c0005ca5:	01 c6                	add    esi,eax
c0005ca7:	11 d7                	adc    edi,edx
c0005ca9:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005cac:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005caf:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005cb2:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005cb5:	19 d1                	sbb    ecx,edx
c0005cb7:	73 0a                	jae    c0005cc3 <f_lseek+0x3e5>
c0005cb9:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005cbd:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005cc0:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005cc3:	a9 ff 01 00 00       	test   eax,0x1ff
c0005cc8:	74 6d                	je     c0005d37 <f_lseek+0x459>
c0005cca:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005ccd:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005cd0:	39 fa                	cmp    edx,edi
c0005cd2:	75 04                	jne    c0005cd8 <f_lseek+0x3fa>
c0005cd4:	39 f0                	cmp    eax,esi
c0005cd6:	74 5f                	je     c0005d37 <f_lseek+0x459>
c0005cd8:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005cdb:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005cdf:	79 25                	jns    c0005d06 <f_lseek+0x428>
c0005ce1:	83 ec 0c             	sub    esp,0xc
c0005ce4:	6a 01                	push   0x1
c0005ce6:	52                   	push   edx
c0005ce7:	50                   	push   eax
c0005ce8:	55                   	push   ebp
c0005ce9:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005ced:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005cf1:	50                   	push   eax
c0005cf2:	e8 19 bd ff ff       	call   c0001a10 <disk_write>
c0005cf7:	83 c4 20             	add    esp,0x20
c0005cfa:	85 c0                	test   eax,eax
c0005cfc:	0f 85 ae fc ff ff    	jne    c00059b0 <f_lseek+0xd2>
c0005d02:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005d06:	83 ec 0c             	sub    esp,0xc
c0005d09:	6a 01                	push   0x1
c0005d0b:	57                   	push   edi
c0005d0c:	56                   	push   esi
c0005d0d:	55                   	push   ebp
c0005d0e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005d12:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005d16:	50                   	push   eax
c0005d17:	e8 de bc ff ff       	call   c00019fa <disk_read>
c0005d1c:	83 c4 20             	add    esp,0x20
c0005d1f:	85 c0                	test   eax,eax
c0005d21:	0f 85 89 fc ff ff    	jne    c00059b0 <f_lseek+0xd2>
c0005d27:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005d2a:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005d2d:	eb 08                	jmp    c0005d37 <f_lseek+0x459>
c0005d2f:	c7 44 24 0c 11 00 00 00 	mov    DWORD PTR [esp+0xc],0x11
c0005d37:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005d3b:	83 c4 3c             	add    esp,0x3c
c0005d3e:	5b                   	pop    ebx
c0005d3f:	5e                   	pop    esi
c0005d40:	5f                   	pop    edi
c0005d41:	5d                   	pop    ebp
c0005d42:	c3                   	ret    

c0005d43 <f_opendir>:
c0005d43:	56                   	push   esi
c0005d44:	b8 09 00 00 00       	mov    eax,0x9
c0005d49:	53                   	push   ebx
c0005d4a:	83 ec 24             	sub    esp,0x24
c0005d4d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005d51:	85 db                	test   ebx,ebx
c0005d53:	0f 84 e6 00 00 00    	je     c0005e3f <f_opendir+0xfc>
c0005d59:	31 c9                	xor    ecx,ecx
c0005d5b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005d5f:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005d63:	e8 5f c7 ff ff       	call   c00024c7 <mount_volume>
c0005d68:	85 c0                	test   eax,eax
c0005d6a:	0f 85 c9 00 00 00    	jne    c0005e39 <f_opendir+0xf6>
c0005d70:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005d74:	83 ec 0c             	sub    esp,0xc
c0005d77:	89 03                	mov    DWORD PTR [ebx],eax
c0005d79:	68 60 04 00 00       	push   0x460
c0005d7e:	e8 a8 24 00 00       	call   c000822b <ff_memalloc>
c0005d83:	89 c6                	mov    esi,eax
c0005d85:	83 c4 10             	add    esp,0x10
c0005d88:	b8 11 00 00 00       	mov    eax,0x11
c0005d8d:	85 f6                	test   esi,esi
c0005d8f:	0f 84 aa 00 00 00    	je     c0005e3f <f_opendir+0xfc>
c0005d95:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005d99:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005d9f:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005da2:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005da5:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005da9:	89 d8                	mov    eax,ebx
c0005dab:	e8 83 ee ff ff       	call   c0004c33 <follow_path>
c0005db0:	85 c0                	test   eax,eax
c0005db2:	75 61                	jne    c0005e15 <f_opendir+0xd2>
c0005db4:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0005db8:	78 46                	js     c0005e00 <f_opendir+0xbd>
c0005dba:	b8 05 00 00 00       	mov    eax,0x5
c0005dbf:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0005dc3:	74 50                	je     c0005e15 <f_opendir+0xd2>
c0005dc5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005dc9:	8a 01                	mov    al,BYTE PTR [ecx]
c0005dcb:	3c 04                	cmp    al,0x4
c0005dcd:	75 26                	jne    c0005df5 <f_opendir+0xb2>
c0005dcf:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005dd2:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005dd5:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005dd8:	30 d2                	xor    dl,dl
c0005dda:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0005dde:	09 c2                	or     edx,eax
c0005de0:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0005de3:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0005de6:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005de9:	89 da                	mov    edx,ebx
c0005deb:	8d 41 10             	lea    eax,[ecx+0x10]
c0005dee:	e8 06 ee ff ff       	call   c0004bf9 <init_alloc_info.isra.2>
c0005df3:	eb 0b                	jmp    c0005e00 <f_opendir+0xbd>
c0005df5:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0005df8:	e8 ab ed ff ff       	call   c0004ba8 <ld_clust.isra.0>
c0005dfd:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005e00:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e04:	31 d2                	xor    edx,edx
c0005e06:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005e0a:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005e0e:	89 d8                	mov    eax,ebx
c0005e10:	e8 7f d1 ff ff       	call   c0002f94 <dir_sdi>
c0005e15:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005e19:	83 ec 0c             	sub    esp,0xc
c0005e1c:	56                   	push   esi
c0005e1d:	e8 1f 24 00 00       	call   c0008241 <ff_memfree>
c0005e22:	83 c4 10             	add    esp,0x10
c0005e25:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e29:	83 f8 04             	cmp    eax,0x4
c0005e2c:	74 06                	je     c0005e34 <f_opendir+0xf1>
c0005e2e:	85 c0                	test   eax,eax
c0005e30:	74 0d                	je     c0005e3f <f_opendir+0xfc>
c0005e32:	eb 05                	jmp    c0005e39 <f_opendir+0xf6>
c0005e34:	b8 05 00 00 00       	mov    eax,0x5
c0005e39:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005e3f:	83 c4 24             	add    esp,0x24
c0005e42:	5b                   	pop    ebx
c0005e43:	5e                   	pop    esi
c0005e44:	c3                   	ret    

c0005e45 <f_closedir>:
c0005e45:	53                   	push   ebx
c0005e46:	83 ec 18             	sub    esp,0x18
c0005e49:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0005e4d:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005e51:	89 d8                	mov    eax,ebx
c0005e53:	e8 e9 c2 ff ff       	call   c0002141 <validate>
c0005e58:	85 c0                	test   eax,eax
c0005e5a:	75 06                	jne    c0005e62 <f_closedir+0x1d>
c0005e5c:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005e62:	83 c4 18             	add    esp,0x18
c0005e65:	5b                   	pop    ebx
c0005e66:	c3                   	ret    

c0005e67 <f_readdir>:
c0005e67:	57                   	push   edi
c0005e68:	56                   	push   esi
c0005e69:	53                   	push   ebx
c0005e6a:	83 ec 20             	sub    esp,0x20
c0005e6d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005e71:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005e75:	89 d8                	mov    eax,ebx
c0005e77:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0005e7b:	e8 c1 c2 ff ff       	call   c0002141 <validate>
c0005e80:	85 c0                	test   eax,eax
c0005e82:	75 77                	jne    c0005efb <f_readdir+0x94>
c0005e84:	85 ff                	test   edi,edi
c0005e86:	75 0b                	jne    c0005e93 <f_readdir+0x2c>
c0005e88:	31 d2                	xor    edx,edx
c0005e8a:	89 d8                	mov    eax,ebx
c0005e8c:	e8 03 d1 ff ff       	call   c0002f94 <dir_sdi>
c0005e91:	eb 68                	jmp    c0005efb <f_readdir+0x94>
c0005e93:	83 ec 0c             	sub    esp,0xc
c0005e96:	68 60 04 00 00       	push   0x460
c0005e9b:	e8 8b 23 00 00       	call   c000822b <ff_memalloc>
c0005ea0:	89 c6                	mov    esi,eax
c0005ea2:	83 c4 10             	add    esp,0x10
c0005ea5:	b8 11 00 00 00       	mov    eax,0x11
c0005eaa:	85 f6                	test   esi,esi
c0005eac:	74 4d                	je     c0005efb <f_readdir+0x94>
c0005eae:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005eb2:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005eb8:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005ebb:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005ebe:	31 d2                	xor    edx,edx
c0005ec0:	89 d8                	mov    eax,ebx
c0005ec2:	e8 df d8 ff ff       	call   c00037a6 <dir_read>
c0005ec7:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0005ecc:	75 19                	jne    c0005ee7 <f_readdir+0x80>
c0005ece:	89 fa                	mov    edx,edi
c0005ed0:	89 d8                	mov    eax,ebx
c0005ed2:	e8 d0 ea ff ff       	call   c00049a7 <get_fileinfo>
c0005ed7:	31 d2                	xor    edx,edx
c0005ed9:	89 d8                	mov    eax,ebx
c0005edb:	e8 0e d6 ff ff       	call   c00034ee <dir_next>
c0005ee0:	83 f8 04             	cmp    eax,0x4
c0005ee3:	75 02                	jne    c0005ee7 <f_readdir+0x80>
c0005ee5:	31 c0                	xor    eax,eax
c0005ee7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005eeb:	83 ec 0c             	sub    esp,0xc
c0005eee:	56                   	push   esi
c0005eef:	e8 4d 23 00 00       	call   c0008241 <ff_memfree>
c0005ef4:	83 c4 10             	add    esp,0x10
c0005ef7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005efb:	83 c4 20             	add    esp,0x20
c0005efe:	5b                   	pop    ebx
c0005eff:	5e                   	pop    esi
c0005f00:	5f                   	pop    edi
c0005f01:	c3                   	ret    

c0005f02 <f_stat>:
c0005f02:	57                   	push   edi
c0005f03:	31 c9                	xor    ecx,ecx
c0005f05:	56                   	push   esi
c0005f06:	53                   	push   ebx
c0005f07:	83 ec 50             	sub    esp,0x50
c0005f0a:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005f0e:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005f12:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0005f16:	e8 ac c5 ff ff       	call   c00024c7 <mount_volume>
c0005f1b:	89 c3                	mov    ebx,eax
c0005f1d:	85 c0                	test   eax,eax
c0005f1f:	75 67                	jne    c0005f88 <f_stat+0x86>
c0005f21:	83 ec 0c             	sub    esp,0xc
c0005f24:	bb 11 00 00 00       	mov    ebx,0x11
c0005f29:	68 60 04 00 00       	push   0x460
c0005f2e:	e8 f8 22 00 00       	call   c000822b <ff_memalloc>
c0005f33:	83 c4 10             	add    esp,0x10
c0005f36:	89 c6                	mov    esi,eax
c0005f38:	85 c0                	test   eax,eax
c0005f3a:	74 4c                	je     c0005f88 <f_stat+0x86>
c0005f3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005f40:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005f46:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005f49:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005f4c:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0005f50:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005f54:	e8 da ec ff ff       	call   c0004c33 <follow_path>
c0005f59:	89 c3                	mov    ebx,eax
c0005f5b:	85 c0                	test   eax,eax
c0005f5d:	75 1d                	jne    c0005f7c <f_stat+0x7a>
c0005f5f:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0005f64:	78 11                	js     c0005f77 <f_stat+0x75>
c0005f66:	85 ff                	test   edi,edi
c0005f68:	74 12                	je     c0005f7c <f_stat+0x7a>
c0005f6a:	89 fa                	mov    edx,edi
c0005f6c:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005f70:	e8 32 ea ff ff       	call   c00049a7 <get_fileinfo>
c0005f75:	eb 05                	jmp    c0005f7c <f_stat+0x7a>
c0005f77:	bb 06 00 00 00       	mov    ebx,0x6
c0005f7c:	83 ec 0c             	sub    esp,0xc
c0005f7f:	56                   	push   esi
c0005f80:	e8 bc 22 00 00       	call   c0008241 <ff_memfree>
c0005f85:	83 c4 10             	add    esp,0x10
c0005f88:	83 c4 50             	add    esp,0x50
c0005f8b:	89 d8                	mov    eax,ebx
c0005f8d:	5b                   	pop    ebx
c0005f8e:	5e                   	pop    esi
c0005f8f:	5f                   	pop    edi
c0005f90:	c3                   	ret    

c0005f91 <f_getfree>:
c0005f91:	55                   	push   ebp
c0005f92:	31 c9                	xor    ecx,ecx
c0005f94:	57                   	push   edi
c0005f95:	56                   	push   esi
c0005f96:	53                   	push   ebx
c0005f97:	83 ec 5c             	sub    esp,0x5c
c0005f9a:	8d 54 24 24          	lea    edx,[esp+0x24]
c0005f9e:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005fa2:	e8 20 c5 ff ff       	call   c00024c7 <mount_volume>
c0005fa7:	89 c5                	mov    ebp,eax
c0005fa9:	85 c0                	test   eax,eax
c0005fab:	0f 85 be 01 00 00    	jne    c000616f <f_getfree+0x1de>
c0005fb1:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0005fb5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005fb9:	89 02                	mov    DWORD PTR [edx],eax
c0005fbb:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0005fbe:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0005fc1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0005fc5:	8d 73 fe             	lea    esi,[ebx-0x2]
c0005fc8:	39 f2                	cmp    edx,esi
c0005fca:	77 0b                	ja     c0005fd7 <f_getfree+0x46>
c0005fcc:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0005fd0:	89 10                	mov    DWORD PTR [eax],edx
c0005fd2:	e9 98 01 00 00       	jmp    c000616f <f_getfree+0x1de>
c0005fd7:	8a 10                	mov    dl,BYTE PTR [eax]
c0005fd9:	80 fa 01             	cmp    dl,0x1
c0005fdc:	75 3a                	jne    c0006018 <f_getfree+0x87>
c0005fde:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0005fe2:	be 02 00 00 00       	mov    esi,0x2
c0005fe7:	31 db                	xor    ebx,ebx
c0005fe9:	89 f2                	mov    edx,esi
c0005feb:	8d 44 24 28          	lea    eax,[esp+0x28]
c0005fef:	e8 aa cd ff ff       	call   c0002d9e <get_fat>
c0005ff4:	83 f8 ff             	cmp    eax,0xffffffff
c0005ff7:	0f 84 51 01 00 00    	je     c000614e <f_getfree+0x1bd>
c0005ffd:	83 f8 01             	cmp    eax,0x1
c0006000:	0f 84 4f 01 00 00    	je     c0006155 <f_getfree+0x1c4>
c0006006:	83 d3 00             	adc    ebx,0x0
c0006009:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000600d:	46                   	inc    esi
c000600e:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c0006011:	77 d6                	ja     c0005fe9 <f_getfree+0x58>
c0006013:	e9 46 01 00 00       	jmp    c000615e <f_getfree+0x1cd>
c0006018:	80 fa 04             	cmp    dl,0x4
c000601b:	0f 85 94 00 00 00    	jne    c00060b5 <f_getfree+0x124>
c0006021:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0006024:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0006027:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000602b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000602f:	31 ff                	xor    edi,edi
c0006031:	31 db                	xor    ebx,ebx
c0006033:	85 ff                	test   edi,edi
c0006035:	75 3f                	jne    c0006076 <f_getfree+0xe5>
c0006037:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000603b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000603f:	83 c0 01             	add    eax,0x1
c0006042:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006046:	83 d2 00             	adc    edx,0x0
c0006049:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000604d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0006051:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006055:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006059:	e8 be c1 ff ff       	call   c000221c <move_window>
c000605e:	85 c0                	test   eax,eax
c0006060:	0f 85 f6 00 00 00    	jne    c000615c <f_getfree+0x1cb>
c0006066:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000606a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000606e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006072:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006076:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000607a:	8a 44 38 54          	mov    al,BYTE PTR [eax+edi*1+0x54]
c000607e:	88 c2                	mov    dl,al
c0006080:	b8 08 00 00 00       	mov    eax,0x8
c0006085:	29 f0                	sub    eax,esi
c0006087:	89 c1                	mov    ecx,eax
c0006089:	01 f1                	add    ecx,esi
c000608b:	74 18                	je     c00060a5 <f_getfree+0x114>
c000608d:	85 f6                	test   esi,esi
c000608f:	74 14                	je     c00060a5 <f_getfree+0x114>
c0006091:	88 d1                	mov    cl,dl
c0006093:	83 e1 01             	and    ecx,0x1
c0006096:	80 f9 01             	cmp    cl,0x1
c0006099:	88 d1                	mov    cl,dl
c000609b:	83 d3 00             	adc    ebx,0x0
c000609e:	4e                   	dec    esi
c000609f:	d0 e9                	shr    cl,1
c00060a1:	88 ca                	mov    dl,cl
c00060a3:	eb e2                	jmp    c0006087 <f_getfree+0xf6>
c00060a5:	47                   	inc    edi
c00060a6:	81 e7 ff 01 00 00    	and    edi,0x1ff
c00060ac:	85 f6                	test   esi,esi
c00060ae:	75 83                	jne    c0006033 <f_getfree+0xa2>
c00060b0:	e9 a9 00 00 00       	jmp    c000615e <f_getfree+0x1cd>
c00060b5:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00060b8:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00060bb:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00060c3:	31 db                	xor    ebx,ebx
c00060c5:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00060ca:	75 1b                	jne    c00060e7 <f_getfree+0x156>
c00060cc:	89 d6                	mov    esi,edx
c00060ce:	89 cf                	mov    edi,ecx
c00060d0:	83 c6 01             	add    esi,0x1
c00060d3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00060d7:	83 d7 00             	adc    edi,0x0
c00060da:	e8 3d c1 ff ff       	call   c000221c <move_window>
c00060df:	85 c0                	test   eax,eax
c00060e1:	75 79                	jne    c000615c <f_getfree+0x1cb>
c00060e3:	89 f2                	mov    edx,esi
c00060e5:	89 f9                	mov    ecx,edi
c00060e7:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00060eb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00060ef:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00060f3:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00060f7:	8d 44 38 54          	lea    eax,[eax+edi*1+0x54]
c00060fb:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00060ff:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006102:	75 15                	jne    c0006119 <f_getfree+0x188>
c0006104:	e8 3c b9 ff ff       	call   c0001a45 <ld_word>
c0006109:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000610d:	66 83 f8 01          	cmp    ax,0x1
c0006111:	83 d3 00             	adc    ebx,0x0
c0006114:	83 c6 02             	add    esi,0x2
c0006117:	eb 17                	jmp    c0006130 <f_getfree+0x19f>
c0006119:	e8 34 b9 ff ff       	call   c0001a52 <ld_dword>
c000611e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0006122:	25 ff ff ff 0f       	and    eax,0xfffffff
c0006127:	83 f8 01             	cmp    eax,0x1
c000612a:	83 d3 00             	adc    ebx,0x0
c000612d:	83 c6 04             	add    esi,0x4
c0006130:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0006136:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c000613a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000613e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006142:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0006146:	0f 85 79 ff ff ff    	jne    c00060c5 <f_getfree+0x134>
c000614c:	eb 10                	jmp    c000615e <f_getfree+0x1cd>
c000614e:	bd 01 00 00 00       	mov    ebp,0x1
c0006153:	eb 09                	jmp    c000615e <f_getfree+0x1cd>
c0006155:	bd 02 00 00 00       	mov    ebp,0x2
c000615a:	eb 02                	jmp    c000615e <f_getfree+0x1cd>
c000615c:	89 c5                	mov    ebp,eax
c000615e:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006162:	89 18                	mov    DWORD PTR [eax],ebx
c0006164:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006168:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c000616c:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c000616f:	83 c4 5c             	add    esp,0x5c
c0006172:	89 e8                	mov    eax,ebp
c0006174:	5b                   	pop    ebx
c0006175:	5e                   	pop    esi
c0006176:	5f                   	pop    edi
c0006177:	5d                   	pop    ebp
c0006178:	c3                   	ret    

c0006179 <f_truncate>:
c0006179:	56                   	push   esi
c000617a:	53                   	push   ebx
c000617b:	83 ec 14             	sub    esp,0x14
c000617e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006182:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0006186:	89 d8                	mov    eax,ebx
c0006188:	e8 b4 bf ff ff       	call   c0002141 <validate>
c000618d:	89 c6                	mov    esi,eax
c000618f:	85 c0                	test   eax,eax
c0006191:	0f 85 d2 00 00 00    	jne    c0006269 <f_truncate+0xf0>
c0006197:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c000619b:	85 f6                	test   esi,esi
c000619d:	0f 85 c6 00 00 00    	jne    c0006269 <f_truncate+0xf0>
c00061a3:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00061a7:	0f 84 b7 00 00 00    	je     c0006264 <f_truncate+0xeb>
c00061ad:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00061b0:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00061b3:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00061b6:	89 d1                	mov    ecx,edx
c00061b8:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c00061bb:	0f 83 a8 00 00 00    	jae    c0006269 <f_truncate+0xf0>
c00061c1:	09 c2                	or     edx,eax
c00061c3:	75 15                	jne    c00061da <f_truncate+0x61>
c00061c5:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00061c8:	31 c9                	xor    ecx,ecx
c00061ca:	89 d8                	mov    eax,ebx
c00061cc:	e8 bc d0 ff ff       	call   c000328d <remove_chain>
c00061d1:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00061d8:	eb 35                	jmp    c000620f <f_truncate+0x96>
c00061da:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00061dd:	89 d8                	mov    eax,ebx
c00061df:	e8 ba cb ff ff       	call   c0002d9e <get_fat>
c00061e4:	89 c2                	mov    edx,eax
c00061e6:	b8 01 00 00 00       	mov    eax,0x1
c00061eb:	83 fa ff             	cmp    edx,0xffffffff
c00061ee:	74 1f                	je     c000620f <f_truncate+0x96>
c00061f0:	b8 02 00 00 00       	mov    eax,0x2
c00061f5:	83 fa 01             	cmp    edx,0x1
c00061f8:	74 15                	je     c000620f <f_truncate+0x96>
c00061fa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00061fe:	31 c0                	xor    eax,eax
c0006200:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c0006203:	76 0a                	jbe    c000620f <f_truncate+0x96>
c0006205:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006208:	89 d8                	mov    eax,ebx
c000620a:	e8 7e d0 ff ff       	call   c000328d <remove_chain>
c000620f:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0006212:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0006215:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006218:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c000621b:	83 ca 40             	or     edx,0x40
c000621e:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0006221:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0006224:	85 c0                	test   eax,eax
c0006226:	75 35                	jne    c000625d <f_truncate+0xe4>
c0006228:	84 d2                	test   dl,dl
c000622a:	79 3d                	jns    c0006269 <f_truncate+0xf0>
c000622c:	83 ec 0c             	sub    esp,0xc
c000622f:	8d 43 50             	lea    eax,[ebx+0x50]
c0006232:	6a 01                	push   0x1
c0006234:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0006237:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000623a:	50                   	push   eax
c000623b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000623f:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0006243:	50                   	push   eax
c0006244:	e8 c7 b7 ff ff       	call   c0001a10 <disk_write>
c0006249:	83 c4 20             	add    esp,0x20
c000624c:	85 c0                	test   eax,eax
c000624e:	75 08                	jne    c0006258 <f_truncate+0xdf>
c0006250:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0006254:	31 f6                	xor    esi,esi
c0006256:	eb 11                	jmp    c0006269 <f_truncate+0xf0>
c0006258:	b8 01 00 00 00       	mov    eax,0x1
c000625d:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c0006260:	89 c6                	mov    esi,eax
c0006262:	eb 05                	jmp    c0006269 <f_truncate+0xf0>
c0006264:	be 07 00 00 00       	mov    esi,0x7
c0006269:	83 c4 14             	add    esp,0x14
c000626c:	89 f0                	mov    eax,esi
c000626e:	5b                   	pop    ebx
c000626f:	5e                   	pop    esi
c0006270:	c3                   	ret    

c0006271 <f_unlink>:
c0006271:	56                   	push   esi
c0006272:	b9 02 00 00 00       	mov    ecx,0x2
c0006277:	53                   	push   ebx
c0006278:	81 ec e4 00 00 00    	sub    esp,0xe4
c000627e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0006282:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c0006289:	e8 39 c2 ff ff       	call   c00024c7 <mount_volume>
c000628e:	85 c0                	test   eax,eax
c0006290:	0f 85 53 01 00 00    	jne    c00063e9 <f_unlink+0x178>
c0006296:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000629a:	83 ec 0c             	sub    esp,0xc
c000629d:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00062a1:	68 60 04 00 00       	push   0x460
c00062a6:	e8 80 1f 00 00       	call   c000822b <ff_memalloc>
c00062ab:	89 c3                	mov    ebx,eax
c00062ad:	83 c4 10             	add    esp,0x10
c00062b0:	b8 11 00 00 00       	mov    eax,0x11
c00062b5:	85 db                	test   ebx,ebx
c00062b7:	0f 84 2c 01 00 00    	je     c00063e9 <f_unlink+0x178>
c00062bd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00062c1:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00062c7:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00062ca:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00062cd:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c00062d4:	8d 44 24 48          	lea    eax,[esp+0x48]
c00062d8:	e8 56 e9 ff ff       	call   c0004c33 <follow_path>
c00062dd:	85 c0                	test   eax,eax
c00062df:	0f 85 f0 00 00 00    	jne    c00063d5 <f_unlink+0x164>
c00062e5:	b8 06 00 00 00       	mov    eax,0x6
c00062ea:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c00062f2:	0f 88 dd 00 00 00    	js     c00063d5 <f_unlink+0x164>
c00062f8:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c00062fd:	74 0a                	je     c0006309 <f_unlink+0x98>
c00062ff:	b8 07 00 00 00       	mov    eax,0x7
c0006304:	e9 cc 00 00 00       	jmp    c00063d5 <f_unlink+0x164>
c0006309:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000630d:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0006311:	8a 02                	mov    al,BYTE PTR [edx]
c0006313:	3c 04                	cmp    al,0x4
c0006315:	75 12                	jne    c0006329 <f_unlink+0xb8>
c0006317:	8d 42 10             	lea    eax,[edx+0x10]
c000631a:	8d 54 24 20          	lea    edx,[esp+0x20]
c000631e:	e8 d6 e8 ff ff       	call   c0004bf9 <init_alloc_info.isra.2>
c0006323:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006327:	eb 0e                	jmp    c0006337 <f_unlink+0xc6>
c0006329:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0006330:	e8 73 e8 ff ff       	call   c0004ba8 <ld_clust.isra.0>
c0006335:	89 c6                	mov    esi,eax
c0006337:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c000633c:	75 20                	jne    c000635e <f_unlink+0xed>
c000633e:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006342:	e8 d6 d6 ff ff       	call   c0003a1d <dir_remove>
c0006347:	85 c0                	test   eax,eax
c0006349:	75 7d                	jne    c00063c8 <f_unlink+0x157>
c000634b:	85 f6                	test   esi,esi
c000634d:	74 79                	je     c00063c8 <f_unlink+0x157>
c000634f:	31 c9                	xor    ecx,ecx
c0006351:	89 f2                	mov    edx,esi
c0006353:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006357:	e8 31 cf ff ff       	call   c000328d <remove_chain>
c000635c:	eb 6a                	jmp    c00063c8 <f_unlink+0x157>
c000635e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006362:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c0006369:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c0006370:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006373:	75 21                	jne    c0006396 <f_unlink+0x125>
c0006375:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0006379:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000637d:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c0006384:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c0006388:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c000638f:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c0006396:	31 d2                	xor    edx,edx
c0006398:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c000639f:	e8 f0 cb ff ff       	call   c0002f94 <dir_sdi>
c00063a4:	85 c0                	test   eax,eax
c00063a6:	75 2d                	jne    c00063d5 <f_unlink+0x164>
c00063a8:	31 d2                	xor    edx,edx
c00063aa:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00063b1:	e8 f0 d3 ff ff       	call   c00037a6 <dir_read>
c00063b6:	85 c0                	test   eax,eax
c00063b8:	0f 84 41 ff ff ff    	je     c00062ff <f_unlink+0x8e>
c00063be:	83 f8 04             	cmp    eax,0x4
c00063c1:	75 12                	jne    c00063d5 <f_unlink+0x164>
c00063c3:	e9 76 ff ff ff       	jmp    c000633e <f_unlink+0xcd>
c00063c8:	85 c0                	test   eax,eax
c00063ca:	75 09                	jne    c00063d5 <f_unlink+0x164>
c00063cc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00063d0:	e8 55 df ff ff       	call   c000432a <sync_fs>
c00063d5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00063d9:	83 ec 0c             	sub    esp,0xc
c00063dc:	53                   	push   ebx
c00063dd:	e8 5f 1e 00 00       	call   c0008241 <ff_memfree>
c00063e2:	83 c4 10             	add    esp,0x10
c00063e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00063e9:	81 c4 e4 00 00 00    	add    esp,0xe4
c00063ef:	5b                   	pop    ebx
c00063f0:	5e                   	pop    esi
c00063f1:	c3                   	ret    

c00063f2 <f_mkdir>:
c00063f2:	57                   	push   edi
c00063f3:	b9 02 00 00 00       	mov    ecx,0x2
c00063f8:	56                   	push   esi
c00063f9:	53                   	push   ebx
c00063fa:	83 c4 80             	add    esp,0xffffff80
c00063fd:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006401:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006408:	e8 ba c0 ff ff       	call   c00024c7 <mount_volume>
c000640d:	89 c3                	mov    ebx,eax
c000640f:	85 c0                	test   eax,eax
c0006411:	0f 85 fe 01 00 00    	jne    c0006615 <f_mkdir+0x223>
c0006417:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000641b:	83 ec 0c             	sub    esp,0xc
c000641e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0006422:	bb 11 00 00 00       	mov    ebx,0x11
c0006427:	68 60 04 00 00       	push   0x460
c000642c:	e8 fa 1d 00 00       	call   c000822b <ff_memalloc>
c0006431:	83 c4 10             	add    esp,0x10
c0006434:	89 c7                	mov    edi,eax
c0006436:	85 c0                	test   eax,eax
c0006438:	0f 84 d7 01 00 00    	je     c0006615 <f_mkdir+0x223>
c000643e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006442:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c0006448:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000644b:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c000644e:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006455:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006459:	e8 d5 e7 ff ff       	call   c0004c33 <follow_path>
c000645e:	89 c3                	mov    ebx,eax
c0006460:	85 c0                	test   eax,eax
c0006462:	74 3e                	je     c00064a2 <f_mkdir+0xb0>
c0006464:	83 f8 04             	cmp    eax,0x4
c0006467:	75 3e                	jne    c00064a7 <f_mkdir+0xb5>
c0006469:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000646d:	31 d2                	xor    edx,edx
c000646f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006473:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006477:	e8 10 cc ff ff       	call   c000308c <create_chain>
c000647c:	89 c6                	mov    esi,eax
c000647e:	85 c0                	test   eax,eax
c0006480:	74 0c                	je     c000648e <f_mkdir+0x9c>
c0006482:	bb 02 00 00 00       	mov    ebx,0x2
c0006487:	83 f8 01             	cmp    eax,0x1
c000648a:	74 07                	je     c0006493 <f_mkdir+0xa1>
c000648c:	eb 2a                	jmp    c00064b8 <f_mkdir+0xc6>
c000648e:	bb 07 00 00 00       	mov    ebx,0x7
c0006493:	31 c9                	xor    ecx,ecx
c0006495:	89 f2                	mov    edx,esi
c0006497:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000649b:	e8 ed cd ff ff       	call   c000328d <remove_chain>
c00064a0:	eb 05                	jmp    c00064a7 <f_mkdir+0xb5>
c00064a2:	bb 08 00 00 00       	mov    ebx,0x8
c00064a7:	83 ec 0c             	sub    esp,0xc
c00064aa:	57                   	push   edi
c00064ab:	e8 91 1d 00 00       	call   c0008241 <ff_memfree>
c00064b0:	83 c4 10             	add    esp,0x10
c00064b3:	e9 5d 01 00 00       	jmp    c0006615 <f_mkdir+0x223>
c00064b8:	bb 01 00 00 00       	mov    ebx,0x1
c00064bd:	83 f8 ff             	cmp    eax,0xffffffff
c00064c0:	74 d1                	je     c0006493 <f_mkdir+0xa1>
c00064c2:	89 f2                	mov    edx,esi
c00064c4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064c8:	e8 08 cf ff ff       	call   c00033d5 <dir_clear>
c00064cd:	89 c3                	mov    ebx,eax
c00064cf:	85 c0                	test   eax,eax
c00064d1:	75 c0                	jne    c0006493 <f_mkdir+0xa1>
c00064d3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064d7:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00064da:	74 69                	je     c0006545 <f_mkdir+0x153>
c00064dc:	b9 0b 00 00 00       	mov    ecx,0xb
c00064e1:	83 c0 54             	add    eax,0x54
c00064e4:	ba 20 00 00 00       	mov    edx,0x20
c00064e9:	e8 eb b5 ff ff       	call   c0001ad9 <mem_set>
c00064ee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064f2:	83 c0 6a             	add    eax,0x6a
c00064f5:	c6 40 ea 2e          	mov    BYTE PTR [eax-0x16],0x2e
c00064f9:	c6 40 f5 10          	mov    BYTE PTR [eax-0xb],0x10
c00064fd:	ba 00 00 21 50       	mov    edx,0x50210000
c0006502:	e8 b4 b5 ff ff       	call   c0001abb <st_dword>
c0006507:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000650b:	89 f1                	mov    ecx,esi
c000650d:	8d 50 54             	lea    edx,[eax+0x54]
c0006510:	e8 bc e6 ff ff       	call   c0004bd1 <st_clust.isra.1>
c0006515:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006519:	b9 20 00 00 00       	mov    ecx,0x20
c000651e:	8d 50 54             	lea    edx,[eax+0x54]
c0006521:	83 c0 74             	add    eax,0x74
c0006524:	e8 9b b5 ff ff       	call   c0001ac4 <mem_cpy>
c0006529:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000652d:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0006531:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c0006535:	8d 50 74             	lea    edx,[eax+0x74]
c0006538:	e8 94 e6 ff ff       	call   c0004bd1 <st_clust.isra.1>
c000653d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006541:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006545:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006549:	e8 59 db ff ff       	call   c00040a7 <dir_register>
c000654e:	89 c3                	mov    ebx,eax
c0006550:	85 c0                	test   eax,eax
c0006552:	0f 85 3b ff ff ff    	jne    c0006493 <f_mkdir+0xa1>
c0006558:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000655c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000655f:	75 74                	jne    c00065d5 <f_mkdir+0x1e3>
c0006561:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006564:	ba 00 00 21 50       	mov    edx,0x50210000
c0006569:	83 c0 0c             	add    eax,0xc
c000656c:	e8 4a b5 ff ff       	call   c0001abb <st_dword>
c0006571:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006575:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006578:	89 f2                	mov    edx,esi
c000657a:	83 c0 34             	add    eax,0x34
c000657d:	e8 39 b5 ff ff       	call   c0001abb <st_dword>
c0006582:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006586:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c000658a:	c1 e2 09             	shl    edx,0x9
c000658d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006590:	83 c0 38             	add    eax,0x38
c0006593:	e8 23 b5 ff ff       	call   c0001abb <st_dword>
c0006598:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000659c:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00065a0:	c1 e2 09             	shl    edx,0x9
c00065a3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065a6:	83 c0 28             	add    eax,0x28
c00065a9:	e8 0d b5 ff ff       	call   c0001abb <st_dword>
c00065ae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065b2:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00065b5:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c00065b9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065bc:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c00065c0:	8d 44 24 34          	lea    eax,[esp+0x34]
c00065c4:	e8 cf d3 ff ff       	call   c0003998 <store_xdir>
c00065c9:	89 c3                	mov    ebx,eax
c00065cb:	85 c0                	test   eax,eax
c00065cd:	0f 85 d4 fe ff ff    	jne    c00064a7 <f_mkdir+0xb5>
c00065d3:	eb 30                	jmp    c0006605 <f_mkdir+0x213>
c00065d5:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00065d9:	ba 00 00 21 50       	mov    edx,0x50210000
c00065de:	83 c0 16             	add    eax,0x16
c00065e1:	e8 d5 b4 ff ff       	call   c0001abb <st_dword>
c00065e6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065ea:	89 f1                	mov    ecx,esi
c00065ec:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c00065f0:	e8 dc e5 ff ff       	call   c0004bd1 <st_clust.isra.1>
c00065f5:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00065f9:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c00065fd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006601:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006605:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006609:	e8 1c dd ff ff       	call   c000432a <sync_fs>
c000660e:	89 c3                	mov    ebx,eax
c0006610:	e9 92 fe ff ff       	jmp    c00064a7 <f_mkdir+0xb5>
c0006615:	83 ec 80             	sub    esp,0xffffff80
c0006618:	89 d8                	mov    eax,ebx
c000661a:	5b                   	pop    ebx
c000661b:	5e                   	pop    esi
c000661c:	5f                   	pop    edi
c000661d:	c3                   	ret    

c000661e <f_rename>:
c000661e:	55                   	push   ebp
c000661f:	57                   	push   edi
c0006620:	56                   	push   esi
c0006621:	53                   	push   ebx
c0006622:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006628:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c000662f:	e8 f3 b9 ff ff       	call   c0002027 <get_ldnumber>
c0006634:	b9 02 00 00 00       	mov    ecx,0x2
c0006639:	8d 54 24 14          	lea    edx,[esp+0x14]
c000663d:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c0006644:	e8 7e be ff ff       	call   c00024c7 <mount_volume>
c0006649:	85 c0                	test   eax,eax
c000664b:	0f 85 b5 02 00 00    	jne    c0006906 <f_rename+0x2e8>
c0006651:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006655:	83 ec 0c             	sub    esp,0xc
c0006658:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000665c:	68 60 04 00 00       	push   0x460
c0006661:	e8 c5 1b 00 00       	call   c000822b <ff_memalloc>
c0006666:	89 c3                	mov    ebx,eax
c0006668:	83 c4 10             	add    esp,0x10
c000666b:	b8 11 00 00 00       	mov    eax,0x11
c0006670:	85 db                	test   ebx,ebx
c0006672:	0f 84 8e 02 00 00    	je     c0006906 <f_rename+0x2e8>
c0006678:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000667c:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006682:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006685:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006688:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c000668f:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006693:	e8 9b e5 ff ff       	call   c0004c33 <follow_path>
c0006698:	85 c0                	test   eax,eax
c000669a:	0f 85 52 02 00 00    	jne    c00068f2 <f_rename+0x2d4>
c00066a0:	b8 06 00 00 00       	mov    eax,0x6
c00066a5:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c00066ad:	0f 85 3f 02 00 00    	jne    c00068f2 <f_rename+0x2d4>
c00066b3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066b7:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00066ba:	0f 85 05 01 00 00    	jne    c00067c5 <f_rename+0x1a7>
c00066c0:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00066c3:	b9 40 00 00 00       	mov    ecx,0x40
c00066c8:	8d 44 24 18          	lea    eax,[esp+0x18]
c00066cc:	e8 f3 b3 ff ff       	call   c0001ac4 <mem_cpy>
c00066d1:	b9 4c 00 00 00       	mov    ecx,0x4c
c00066d6:	8d 54 24 58          	lea    edx,[esp+0x58]
c00066da:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00066e1:	e8 de b3 ff ff       	call   c0001ac4 <mem_cpy>
c00066e6:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c00066ed:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00066f4:	e8 3a e5 ff ff       	call   c0004c33 <follow_path>
c00066f9:	85 c0                	test   eax,eax
c00066fb:	75 29                	jne    c0006726 <f_rename+0x108>
c00066fd:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006701:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006708:	74 0a                	je     c0006714 <f_rename+0xf6>
c000670a:	b8 08 00 00 00       	mov    eax,0x8
c000670f:	e9 de 01 00 00       	jmp    c00068f2 <f_rename+0x2d4>
c0006714:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c000671b:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006722:	75 e6                	jne    c000670a <f_rename+0xec>
c0006724:	eb 09                	jmp    c000672f <f_rename+0x111>
c0006726:	83 f8 04             	cmp    eax,0x4
c0006729:	0f 85 c3 01 00 00    	jne    c00068f2 <f_rename+0x2d4>
c000672f:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006736:	e8 6c d9 ff ff       	call   c00040a7 <dir_register>
c000673b:	85 c0                	test   eax,eax
c000673d:	0f 85 af 01 00 00    	jne    c00068f2 <f_rename+0x2d4>
c0006743:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006747:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c000674a:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000674d:	89 c5                	mov    ebp,eax
c000674f:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c0006752:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0006756:	8d 46 24             	lea    eax,[esi+0x24]
c0006759:	e8 e7 b2 ff ff       	call   c0001a45 <ld_word>
c000675e:	b9 40 00 00 00       	mov    ecx,0x40
c0006763:	89 c7                	mov    edi,eax
c0006765:	8d 54 24 18          	lea    edx,[esp+0x18]
c0006769:	89 f0                	mov    eax,esi
c000676b:	e8 54 b3 ff ff       	call   c0001ac4 <mem_cpy>
c0006770:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006774:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006777:	89 e9                	mov    ecx,ebp
c0006779:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c000677c:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0006780:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006784:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006787:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c000678a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000678d:	83 c0 24             	add    eax,0x24
c0006790:	0f b7 d7             	movzx  edx,di
c0006793:	e8 1f b3 ff ff       	call   c0001ab7 <st_word>
c0006798:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000679c:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000679f:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00067a2:	a8 10                	test   al,0x10
c00067a4:	75 06                	jne    c00067ac <f_rename+0x18e>
c00067a6:	83 c8 20             	or     eax,0x20
c00067a9:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c00067ac:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00067b3:	e8 e0 d1 ff ff       	call   c0003998 <store_xdir>
c00067b8:	85 c0                	test   eax,eax
c00067ba:	0f 84 1c 01 00 00    	je     c00068dc <f_rename+0x2be>
c00067c0:	e9 2d 01 00 00       	jmp    c00068f2 <f_rename+0x2d4>
c00067c5:	b9 20 00 00 00       	mov    ecx,0x20
c00067ca:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00067d1:	8d 44 24 18          	lea    eax,[esp+0x18]
c00067d5:	e8 ea b2 ff ff       	call   c0001ac4 <mem_cpy>
c00067da:	b9 4c 00 00 00       	mov    ecx,0x4c
c00067df:	8d 54 24 58          	lea    edx,[esp+0x58]
c00067e3:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00067ea:	e8 d5 b2 ff ff       	call   c0001ac4 <mem_cpy>
c00067ef:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c00067f6:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00067fd:	e8 31 e4 ff ff       	call   c0004c33 <follow_path>
c0006802:	85 c0                	test   eax,eax
c0006804:	75 27                	jne    c000682d <f_rename+0x20f>
c0006806:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000680a:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006811:	0f 85 f3 fe ff ff    	jne    c000670a <f_rename+0xec>
c0006817:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c000681e:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006825:	0f 85 df fe ff ff    	jne    c000670a <f_rename+0xec>
c000682b:	eb 09                	jmp    c0006836 <f_rename+0x218>
c000682d:	83 f8 04             	cmp    eax,0x4
c0006830:	0f 85 bc 00 00 00    	jne    c00068f2 <f_rename+0x2d4>
c0006836:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000683d:	e8 65 d8 ff ff       	call   c00040a7 <dir_register>
c0006842:	85 c0                	test   eax,eax
c0006844:	0f 85 a8 00 00 00    	jne    c00068f2 <f_rename+0x2d4>
c000684a:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c0006851:	b9 13 00 00 00       	mov    ecx,0x13
c0006856:	8d 54 24 25          	lea    edx,[esp+0x25]
c000685a:	8d 46 0d             	lea    eax,[esi+0xd]
c000685d:	e8 62 b2 ff ff       	call   c0001ac4 <mem_cpy>
c0006862:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006866:	a8 10                	test   al,0x10
c0006868:	75 03                	jne    c000686d <f_rename+0x24f>
c000686a:	83 c8 20             	or     eax,0x20
c000686d:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006870:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006874:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006878:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c000687c:	74 5e                	je     c00068dc <f_rename+0x2be>
c000687e:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c0006885:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006889:	74 51                	je     c00068dc <f_rename+0x2be>
c000688b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000688f:	89 f2                	mov    edx,esi
c0006891:	8a 07                	mov    al,BYTE PTR [edi]
c0006893:	e8 10 e3 ff ff       	call   c0004ba8 <ld_clust.isra.0>
c0006898:	89 c2                	mov    edx,eax
c000689a:	89 f8                	mov    eax,edi
c000689c:	e8 3d b4 ff ff       	call   c0001cde <clst2sect>
c00068a1:	89 c6                	mov    esi,eax
c00068a3:	89 d1                	mov    ecx,edx
c00068a5:	b8 02 00 00 00       	mov    eax,0x2
c00068aa:	09 f2                	or     edx,esi
c00068ac:	74 44                	je     c00068f2 <f_rename+0x2d4>
c00068ae:	89 f2                	mov    edx,esi
c00068b0:	89 f8                	mov    eax,edi
c00068b2:	e8 65 b9 ff ff       	call   c000221c <move_window>
c00068b7:	85 c0                	test   eax,eax
c00068b9:	75 37                	jne    c00068f2 <f_rename+0x2d4>
c00068bb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068bf:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c00068c3:	75 17                	jne    c00068dc <f_rename+0x2be>
c00068c5:	8d 50 74             	lea    edx,[eax+0x74]
c00068c8:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c00068cf:	e8 fd e2 ff ff       	call   c0004bd1 <st_clust.isra.1>
c00068d4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068d8:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00068dc:	8d 44 24 58          	lea    eax,[esp+0x58]
c00068e0:	e8 38 d1 ff ff       	call   c0003a1d <dir_remove>
c00068e5:	85 c0                	test   eax,eax
c00068e7:	75 09                	jne    c00068f2 <f_rename+0x2d4>
c00068e9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068ed:	e8 38 da ff ff       	call   c000432a <sync_fs>
c00068f2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00068f6:	83 ec 0c             	sub    esp,0xc
c00068f9:	53                   	push   ebx
c00068fa:	e8 42 19 00 00       	call   c0008241 <ff_memfree>
c00068ff:	83 c4 10             	add    esp,0x10
c0006902:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006906:	81 c4 fc 00 00 00    	add    esp,0xfc
c000690c:	5b                   	pop    ebx
c000690d:	5e                   	pop    esi
c000690e:	5f                   	pop    edi
c000690f:	5d                   	pop    ebp
c0006910:	c3                   	ret    

c0006911 <f_chmod>:
c0006911:	57                   	push   edi
c0006912:	b9 02 00 00 00       	mov    ecx,0x2
c0006917:	56                   	push   esi
c0006918:	53                   	push   ebx
c0006919:	83 ec 60             	sub    esp,0x60
c000691c:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006920:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006924:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006928:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c000692c:	e8 96 bb ff ff       	call   c00024c7 <mount_volume>
c0006931:	85 c0                	test   eax,eax
c0006933:	0f 85 af 00 00 00    	jne    c00069e8 <f_chmod+0xd7>
c0006939:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000693d:	83 ec 0c             	sub    esp,0xc
c0006940:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006944:	68 60 04 00 00       	push   0x460
c0006949:	e8 dd 18 00 00       	call   c000822b <ff_memalloc>
c000694e:	89 c6                	mov    esi,eax
c0006950:	83 c4 10             	add    esp,0x10
c0006953:	b8 11 00 00 00       	mov    eax,0x11
c0006958:	85 f6                	test   esi,esi
c000695a:	0f 84 88 00 00 00    	je     c00069e8 <f_chmod+0xd7>
c0006960:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006964:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c000696a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000696d:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006970:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006974:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006978:	e8 b6 e2 ff ff       	call   c0004c33 <follow_path>
c000697d:	85 c0                	test   eax,eax
c000697f:	75 53                	jne    c00069d4 <f_chmod+0xc3>
c0006981:	b8 06 00 00 00       	mov    eax,0x6
c0006986:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c000698b:	75 47                	jne    c00069d4 <f_chmod+0xc3>
c000698d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006991:	89 f9                	mov    ecx,edi
c0006993:	83 e1 27             	and    ecx,0x27
c0006996:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006999:	75 1d                	jne    c00069b8 <f_chmod+0xa7>
c000699b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000699e:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c00069a1:	21 cb                	and    ebx,ecx
c00069a3:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c00069a6:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c00069a9:	8d 44 24 14          	lea    eax,[esp+0x14]
c00069ad:	e8 e6 cf ff ff       	call   c0003998 <store_xdir>
c00069b2:	85 c0                	test   eax,eax
c00069b4:	75 1e                	jne    c00069d4 <f_chmod+0xc3>
c00069b6:	eb 13                	jmp    c00069cb <f_chmod+0xba>
c00069b8:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00069bc:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c00069bf:	21 cb                	and    ebx,ecx
c00069c1:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c00069c4:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c00069c7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00069cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069cf:	e8 56 d9 ff ff       	call   c000432a <sync_fs>
c00069d4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00069d8:	83 ec 0c             	sub    esp,0xc
c00069db:	56                   	push   esi
c00069dc:	e8 60 18 00 00       	call   c0008241 <ff_memfree>
c00069e1:	83 c4 10             	add    esp,0x10
c00069e4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00069e8:	83 c4 60             	add    esp,0x60
c00069eb:	5b                   	pop    ebx
c00069ec:	5e                   	pop    esi
c00069ed:	5f                   	pop    edi
c00069ee:	c3                   	ret    

c00069ef <f_utime>:
c00069ef:	56                   	push   esi
c00069f0:	b9 02 00 00 00       	mov    ecx,0x2
c00069f5:	53                   	push   ebx
c00069f6:	83 ec 64             	sub    esp,0x64
c00069f9:	8d 54 24 10          	lea    edx,[esp+0x10]
c00069fd:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006a01:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006a05:	e8 bd ba ff ff       	call   c00024c7 <mount_volume>
c0006a0a:	85 c0                	test   eax,eax
c0006a0c:	0f 85 b5 00 00 00    	jne    c0006ac7 <f_utime+0xd8>
c0006a12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a16:	83 ec 0c             	sub    esp,0xc
c0006a19:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006a1d:	68 60 04 00 00       	push   0x460
c0006a22:	e8 04 18 00 00       	call   c000822b <ff_memalloc>
c0006a27:	89 c3                	mov    ebx,eax
c0006a29:	83 c4 10             	add    esp,0x10
c0006a2c:	b8 11 00 00 00       	mov    eax,0x11
c0006a31:	85 db                	test   ebx,ebx
c0006a33:	0f 84 8e 00 00 00    	je     c0006ac7 <f_utime+0xd8>
c0006a39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a3d:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006a43:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006a46:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006a49:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006a4d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006a51:	e8 dd e1 ff ff       	call   c0004c33 <follow_path>
c0006a56:	85 c0                	test   eax,eax
c0006a58:	75 59                	jne    c0006ab3 <f_utime+0xc4>
c0006a5a:	b8 06 00 00 00       	mov    eax,0x6
c0006a5f:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006a64:	75 4d                	jne    c0006ab3 <f_utime+0xc4>
c0006a66:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006a6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a6e:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006a72:	c1 e2 10             	shl    edx,0x10
c0006a75:	09 ca                	or     edx,ecx
c0006a77:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006a7a:	75 1a                	jne    c0006a96 <f_utime+0xa7>
c0006a7c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006a7f:	83 c0 0c             	add    eax,0xc
c0006a82:	e8 34 b0 ff ff       	call   c0001abb <st_dword>
c0006a87:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006a8b:	e8 08 cf ff ff       	call   c0003998 <store_xdir>
c0006a90:	85 c0                	test   eax,eax
c0006a92:	75 1f                	jne    c0006ab3 <f_utime+0xc4>
c0006a94:	eb 14                	jmp    c0006aaa <f_utime+0xbb>
c0006a96:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006a9a:	83 c0 16             	add    eax,0x16
c0006a9d:	e8 19 b0 ff ff       	call   c0001abb <st_dword>
c0006aa2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006aa6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006aaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006aae:	e8 77 d8 ff ff       	call   c000432a <sync_fs>
c0006ab3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006ab7:	83 ec 0c             	sub    esp,0xc
c0006aba:	53                   	push   ebx
c0006abb:	e8 81 17 00 00       	call   c0008241 <ff_memfree>
c0006ac0:	83 c4 10             	add    esp,0x10
c0006ac3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006ac7:	83 c4 64             	add    esp,0x64
c0006aca:	5b                   	pop    ebx
c0006acb:	5e                   	pop    esi
c0006acc:	c3                   	ret    

c0006acd <f_getlabel>:
c0006acd:	55                   	push   ebp
c0006ace:	31 c9                	xor    ecx,ecx
c0006ad0:	57                   	push   edi
c0006ad1:	56                   	push   esi
c0006ad2:	53                   	push   ebx
c0006ad3:	83 ec 6c             	sub    esp,0x6c
c0006ad6:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006ada:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006ae1:	e8 e1 b9 ff ff       	call   c00024c7 <mount_volume>
c0006ae6:	89 c3                	mov    ebx,eax
c0006ae8:	85 c0                	test   eax,eax
c0006aea:	0f 85 73 01 00 00    	jne    c0006c63 <f_getlabel+0x196>
c0006af0:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006af8:	0f 84 65 01 00 00    	je     c0006c63 <f_getlabel+0x196>
c0006afe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b02:	31 d2                	xor    edx,edx
c0006b04:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006b08:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b0c:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006b14:	e8 7b c4 ff ff       	call   c0002f94 <dir_sdi>
c0006b19:	89 c3                	mov    ebx,eax
c0006b1b:	85 c0                	test   eax,eax
c0006b1d:	0f 85 2f 01 00 00    	jne    c0006c52 <f_getlabel+0x185>
c0006b23:	ba 01 00 00 00       	mov    edx,0x1
c0006b28:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b2c:	e8 75 cc ff ff       	call   c00037a6 <dir_read>
c0006b31:	89 c3                	mov    ebx,eax
c0006b33:	85 c0                	test   eax,eax
c0006b35:	0f 85 17 01 00 00    	jne    c0006c52 <f_getlabel+0x185>
c0006b3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b3f:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006b42:	74 09                	je     c0006b4d <f_getlabel+0x80>
c0006b44:	31 f6                	xor    esi,esi
c0006b46:	31 c9                	xor    ecx,ecx
c0006b48:	e9 c8 00 00 00       	jmp    c0006c15 <f_getlabel+0x148>
c0006b4d:	31 ed                	xor    ebp,ebp
c0006b4f:	31 f6                	xor    esi,esi
c0006b51:	31 ff                	xor    edi,edi
c0006b53:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006b57:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006b5b:	39 fa                	cmp    edx,edi
c0006b5d:	76 4b                	jbe    c0006baa <f_getlabel+0xdd>
c0006b5f:	47                   	inc    edi
c0006b60:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006b63:	01 d0                	add    eax,edx
c0006b65:	e8 db ae ff ff       	call   c0001a45 <ld_word>
c0006b6a:	66 85 ed             	test   bp,bp
c0006b6d:	75 0d                	jne    c0006b7c <f_getlabel+0xaf>
c0006b6f:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006b75:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006b7a:	76 28                	jbe    c0006ba4 <f_getlabel+0xd7>
c0006b7c:	89 e9                	mov    ecx,ebp
c0006b7e:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006b85:	c1 e1 10             	shl    ecx,0x10
c0006b88:	01 f2                	add    edx,esi
c0006b8a:	0f b7 c0             	movzx  eax,ax
c0006b8d:	09 c8                	or     eax,ecx
c0006b8f:	b9 04 00 00 00       	mov    ecx,0x4
c0006b94:	e8 4c b0 ff ff       	call   c0001be5 <put_utf>
c0006b99:	84 c0                	test   al,al
c0006b9b:	74 0b                	je     c0006ba8 <f_getlabel+0xdb>
c0006b9d:	0f b6 c0             	movzx  eax,al
c0006ba0:	01 c6                	add    esi,eax
c0006ba2:	31 c0                	xor    eax,eax
c0006ba4:	89 c5                	mov    ebp,eax
c0006ba6:	eb ab                	jmp    c0006b53 <f_getlabel+0x86>
c0006ba8:	31 f6                	xor    esi,esi
c0006baa:	66 85 ed             	test   bp,bp
c0006bad:	74 02                	je     c0006bb1 <f_getlabel+0xe4>
c0006baf:	31 f6                	xor    esi,esi
c0006bb1:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006bb8:	c6 04 30 00          	mov    BYTE PTR [eax+esi*1],0x0
c0006bbc:	e9 a2 00 00 00       	jmp    c0006c63 <f_getlabel+0x196>
c0006bc1:	83 ff 0b             	cmp    edi,0xb
c0006bc4:	74 11                	je     c0006bd7 <f_getlabel+0x10a>
c0006bc6:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006bcb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006bcf:	8d 79 02             	lea    edi,[ecx+0x2]
c0006bd2:	c1 e0 08             	shl    eax,0x8
c0006bd5:	09 c2                	or     edx,eax
c0006bd7:	50                   	push   eax
c0006bd8:	50                   	push   eax
c0006bd9:	68 b5 01 00 00       	push   0x1b5
c0006bde:	0f b7 d2             	movzx  edx,dx
c0006be1:	52                   	push   edx
c0006be2:	e8 07 17 00 00       	call   c00082ee <ff_oem2uni>
c0006be7:	83 c4 10             	add    esp,0x10
c0006bea:	66 85 c0             	test   ax,ax
c0006bed:	74 46                	je     c0006c35 <f_getlabel+0x168>
c0006bef:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006bf6:	b9 04 00 00 00       	mov    ecx,0x4
c0006bfb:	01 f2                	add    edx,esi
c0006bfd:	0f b7 c0             	movzx  eax,ax
c0006c00:	e8 e0 af ff ff       	call   c0001be5 <put_utf>
c0006c05:	84 c0                	test   al,al
c0006c07:	74 2c                	je     c0006c35 <f_getlabel+0x168>
c0006c09:	0f b6 c0             	movzx  eax,al
c0006c0c:	01 c6                	add    esi,eax
c0006c0e:	83 ff 0b             	cmp    edi,0xb
c0006c11:	74 24                	je     c0006c37 <f_getlabel+0x16a>
c0006c13:	89 f9                	mov    ecx,edi
c0006c15:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006c19:	8d 79 01             	lea    edi,[ecx+0x1]
c0006c1c:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006c21:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006c26:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c2a:	e8 ea ae ff ff       	call   c0001b19 <dbc_1st>
c0006c2f:	85 c0                	test   eax,eax
c0006c31:	74 a4                	je     c0006bd7 <f_getlabel+0x10a>
c0006c33:	eb 8c                	jmp    c0006bc1 <f_getlabel+0xf4>
c0006c35:	31 f6                	xor    esi,esi
c0006c37:	03 b4 24 84 00 00 00 	add    esi,DWORD PTR [esp+0x84]
c0006c3e:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0006c41:	39 b4 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],esi
c0006c48:	74 19                	je     c0006c63 <f_getlabel+0x196>
c0006c4a:	4e                   	dec    esi
c0006c4b:	80 3e 20             	cmp    BYTE PTR [esi],0x20
c0006c4e:	74 ee                	je     c0006c3e <f_getlabel+0x171>
c0006c50:	eb 11                	jmp    c0006c63 <f_getlabel+0x196>
c0006c52:	83 fb 04             	cmp    ebx,0x4
c0006c55:	75 0c                	jne    c0006c63 <f_getlabel+0x196>
c0006c57:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006c5e:	31 db                	xor    ebx,ebx
c0006c60:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006c63:	85 db                	test   ebx,ebx
c0006c65:	75 50                	jne    c0006cb7 <f_getlabel+0x1ea>
c0006c67:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006c6f:	74 46                	je     c0006cb7 <f_getlabel+0x1ea>
c0006c71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c75:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006c78:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006c7b:	e8 9c b5 ff ff       	call   c000221c <move_window>
c0006c80:	89 c3                	mov    ebx,eax
c0006c82:	85 c0                	test   eax,eax
c0006c84:	75 31                	jne    c0006cb7 <f_getlabel+0x1ea>
c0006c86:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006c8a:	b8 43 00 00 00       	mov    eax,0x43
c0006c8f:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006c91:	80 f9 03             	cmp    cl,0x3
c0006c94:	74 0f                	je     c0006ca5 <f_getlabel+0x1d8>
c0006c96:	31 c0                	xor    eax,eax
c0006c98:	80 f9 04             	cmp    cl,0x4
c0006c9b:	0f 94 c0             	sete   al
c0006c9e:	48                   	dec    eax
c0006c9f:	83 e0 c3             	and    eax,0xffffffc3
c0006ca2:	83 c0 64             	add    eax,0x64
c0006ca5:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006ca9:	e8 a4 ad ff ff       	call   c0001a52 <ld_dword>
c0006cae:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006cb5:	89 07                	mov    DWORD PTR [edi],eax
c0006cb7:	83 c4 6c             	add    esp,0x6c
c0006cba:	89 d8                	mov    eax,ebx
c0006cbc:	5b                   	pop    ebx
c0006cbd:	5e                   	pop    esi
c0006cbe:	5f                   	pop    edi
c0006cbf:	5d                   	pop    ebp
c0006cc0:	c3                   	ret    

c0006cc1 <f_setlabel>:
c0006cc1:	56                   	push   esi
c0006cc2:	b9 02 00 00 00       	mov    ecx,0x2
c0006cc7:	53                   	push   ebx
c0006cc8:	83 ec 74             	sub    esp,0x74
c0006ccb:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006ccf:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006cd6:	e8 ec b7 ff ff       	call   c00024c7 <mount_volume>
c0006cdb:	89 c6                	mov    esi,eax
c0006cdd:	85 c0                	test   eax,eax
c0006cdf:	0f 85 41 02 00 00    	jne    c0006f26 <f_setlabel+0x265>
c0006ce5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006ce9:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006cec:	0f 85 8e 00 00 00    	jne    c0006d80 <f_setlabel+0xbf>
c0006cf2:	b9 16 00 00 00       	mov    ecx,0x16
c0006cf7:	31 d2                	xor    edx,edx
c0006cf9:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006cfd:	31 db                	xor    ebx,ebx
c0006cff:	e8 d5 ad ff ff       	call   c0001ad9 <mem_set>
c0006d04:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006d0b:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006d0e:	0f 86 0a 01 00 00    	jbe    c0006e1e <f_setlabel+0x15d>
c0006d14:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d1b:	e8 ff ad ff ff       	call   c0001b1f <tchar2uni>
c0006d20:	89 c6                	mov    esi,eax
c0006d22:	3d ff ff 00 00       	cmp    eax,0xffff
c0006d27:	76 2a                	jbe    c0006d53 <f_setlabel+0x92>
c0006d29:	83 f8 ff             	cmp    eax,0xffffffff
c0006d2c:	74 05                	je     c0006d33 <f_setlabel+0x72>
c0006d2e:	83 fb 09             	cmp    ebx,0x9
c0006d31:	76 0a                	jbe    c0006d3d <f_setlabel+0x7c>
c0006d33:	be 06 00 00 00       	mov    esi,0x6
c0006d38:	e9 e9 01 00 00       	jmp    c0006f26 <f_setlabel+0x265>
c0006d3d:	89 c2                	mov    edx,eax
c0006d3f:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006d43:	c1 ea 10             	shr    edx,0x10
c0006d46:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006d49:	01 c8                	add    eax,ecx
c0006d4b:	43                   	inc    ebx
c0006d4c:	e8 66 ad ff ff       	call   c0001ab7 <st_word>
c0006d51:	eb 04                	jmp    c0006d57 <f_setlabel+0x96>
c0006d53:	85 c0                	test   eax,eax
c0006d55:	74 dc                	je     c0006d33 <f_setlabel+0x72>
c0006d57:	89 f2                	mov    edx,esi
c0006d59:	b8 57 03 02 c0       	mov    eax,0xc0020357
c0006d5e:	e8 a4 ad ff ff       	call   c0001b07 <chk_chr>
c0006d63:	85 c0                	test   eax,eax
c0006d65:	75 cc                	jne    c0006d33 <f_setlabel+0x72>
c0006d67:	83 fb 0a             	cmp    ebx,0xa
c0006d6a:	77 c7                	ja     c0006d33 <f_setlabel+0x72>
c0006d6c:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006d6f:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006d73:	0f b7 d6             	movzx  edx,si
c0006d76:	01 c8                	add    eax,ecx
c0006d78:	43                   	inc    ebx
c0006d79:	e8 39 ad ff ff       	call   c0001ab7 <st_word>
c0006d7e:	eb 84                	jmp    c0006d04 <f_setlabel+0x43>
c0006d80:	b9 0b 00 00 00       	mov    ecx,0xb
c0006d85:	ba 20 00 00 00       	mov    edx,0x20
c0006d8a:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006d8e:	31 db                	xor    ebx,ebx
c0006d90:	e8 44 ad ff ff       	call   c0001ad9 <mem_set>
c0006d95:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006d9c:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006d9f:	76 60                	jbe    c0006e01 <f_setlabel+0x140>
c0006da1:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006da8:	e8 72 ad ff ff       	call   c0001b1f <tchar2uni>
c0006dad:	3d ff ff 00 00       	cmp    eax,0xffff
c0006db2:	0f 87 7b ff ff ff    	ja     c0006d33 <f_setlabel+0x72>
c0006db8:	83 ec 0c             	sub    esp,0xc
c0006dbb:	50                   	push   eax
c0006dbc:	e8 9c 15 00 00       	call   c000835d <ff_wtoupper>
c0006dc1:	5a                   	pop    edx
c0006dc2:	59                   	pop    ecx
c0006dc3:	68 b5 01 00 00       	push   0x1b5
c0006dc8:	50                   	push   eax
c0006dc9:	e8 8a 14 00 00       	call   c0008258 <ff_uni2oem>
c0006dce:	83 c4 10             	add    esp,0x10
c0006dd1:	89 c6                	mov    esi,eax
c0006dd3:	66 85 c0             	test   ax,ax
c0006dd6:	0f 84 57 ff ff ff    	je     c0006d33 <f_setlabel+0x72>
c0006ddc:	0f b7 d0             	movzx  edx,ax
c0006ddf:	b8 50 03 02 c0       	mov    eax,0xc0020350
c0006de4:	e8 1e ad ff ff       	call   c0001b07 <chk_chr>
c0006de9:	85 c0                	test   eax,eax
c0006deb:	0f 85 42 ff ff ff    	jne    c0006d33 <f_setlabel+0x72>
c0006df1:	66 81 fe ff 00       	cmp    si,0xff
c0006df6:	0f 87 14 01 00 00    	ja     c0006f10 <f_setlabel+0x24f>
c0006dfc:	e9 fa 00 00 00       	jmp    c0006efb <f_setlabel+0x23a>
c0006e01:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0006e06:	0f 84 27 ff ff ff    	je     c0006d33 <f_setlabel+0x72>
c0006e0c:	85 db                	test   ebx,ebx
c0006e0e:	74 0e                	je     c0006e1e <f_setlabel+0x15d>
c0006e10:	8d 43 ff             	lea    eax,[ebx-0x1]
c0006e13:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0006e18:	75 04                	jne    c0006e1e <f_setlabel+0x15d>
c0006e1a:	89 c3                	mov    ebx,eax
c0006e1c:	eb ee                	jmp    c0006e0c <f_setlabel+0x14b>
c0006e1e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e22:	31 d2                	xor    edx,edx
c0006e24:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0006e28:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006e2c:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0006e34:	e8 5b c1 ff ff       	call   c0002f94 <dir_sdi>
c0006e39:	89 c6                	mov    esi,eax
c0006e3b:	85 c0                	test   eax,eax
c0006e3d:	0f 85 e3 00 00 00    	jne    c0006f26 <f_setlabel+0x265>
c0006e43:	ba 01 00 00 00       	mov    edx,0x1
c0006e48:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006e4c:	e8 55 c9 ff ff       	call   c00037a6 <dir_read>
c0006e51:	85 c0                	test   eax,eax
c0006e53:	75 21                	jne    c0006e76 <f_setlabel+0x1b5>
c0006e55:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006e59:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e5d:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c0006e60:	74 5d                	je     c0006ebf <f_setlabel+0x1fe>
c0006e62:	85 db                	test   ebx,ebx
c0006e64:	74 0b                	je     c0006e71 <f_setlabel+0x1b0>
c0006e66:	b9 0b 00 00 00       	mov    ecx,0xb
c0006e6b:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006e6f:	eb 70                	jmp    c0006ee1 <f_setlabel+0x220>
c0006e71:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0006e74:	eb 70                	jmp    c0006ee6 <f_setlabel+0x225>
c0006e76:	83 f8 04             	cmp    eax,0x4
c0006e79:	75 7c                	jne    c0006ef7 <f_setlabel+0x236>
c0006e7b:	85 db                	test   ebx,ebx
c0006e7d:	0f 84 a3 00 00 00    	je     c0006f26 <f_setlabel+0x265>
c0006e83:	ba 01 00 00 00       	mov    edx,0x1
c0006e88:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006e8c:	e8 8f ca ff ff       	call   c0003920 <dir_alloc>
c0006e91:	89 c6                	mov    esi,eax
c0006e93:	85 c0                	test   eax,eax
c0006e95:	0f 85 8b 00 00 00    	jne    c0006f26 <f_setlabel+0x265>
c0006e9b:	31 d2                	xor    edx,edx
c0006e9d:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ea1:	b9 20 00 00 00       	mov    ecx,0x20
c0006ea6:	e8 2e ac ff ff       	call   c0001ad9 <mem_set>
c0006eab:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006eaf:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006eb2:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006eb6:	75 18                	jne    c0006ed0 <f_setlabel+0x20f>
c0006eb8:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0006ebb:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ebf:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0006ec2:	b9 16 00 00 00       	mov    ecx,0x16
c0006ec7:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ecb:	83 c0 02             	add    eax,0x2
c0006ece:	eb 9b                	jmp    c0006e6b <f_setlabel+0x1aa>
c0006ed0:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0006ed4:	b9 0b 00 00 00       	mov    ecx,0xb
c0006ed9:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006edd:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ee1:	e8 de ab ff ff       	call   c0001ac4 <mem_cpy>
c0006ee6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006eea:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006eee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006ef2:	e8 33 d4 ff ff       	call   c000432a <sync_fs>
c0006ef7:	89 c6                	mov    esi,eax
c0006ef9:	eb 2b                	jmp    c0006f26 <f_setlabel+0x265>
c0006efb:	83 fb 0a             	cmp    ebx,0xa
c0006efe:	0f 87 2f fe ff ff    	ja     c0006d33 <f_setlabel+0x72>
c0006f04:	89 f0                	mov    eax,esi
c0006f06:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006f0a:	43                   	inc    ebx
c0006f0b:	e9 85 fe ff ff       	jmp    c0006d95 <f_setlabel+0xd4>
c0006f10:	83 fb 09             	cmp    ebx,0x9
c0006f13:	0f 87 1a fe ff ff    	ja     c0006d33 <f_setlabel+0x72>
c0006f19:	89 f0                	mov    eax,esi
c0006f1b:	66 c1 e8 08          	shr    ax,0x8
c0006f1f:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006f23:	43                   	inc    ebx
c0006f24:	eb de                	jmp    c0006f04 <f_setlabel+0x243>
c0006f26:	83 c4 74             	add    esp,0x74
c0006f29:	89 f0                	mov    eax,esi
c0006f2b:	5b                   	pop    ebx
c0006f2c:	5e                   	pop    esi
c0006f2d:	c3                   	ret    

c0006f2e <f_forward>:
c0006f2e:	55                   	push   ebp
c0006f2f:	57                   	push   edi
c0006f30:	56                   	push   esi
c0006f31:	53                   	push   ebx
c0006f32:	83 ec 2c             	sub    esp,0x2c
c0006f35:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006f39:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0006f3d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0006f41:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0006f47:	89 d8                	mov    eax,ebx
c0006f49:	e8 f3 b1 ff ff       	call   c0002141 <validate>
c0006f4e:	89 c5                	mov    ebp,eax
c0006f50:	85 c0                	test   eax,eax
c0006f52:	0f 85 aa 01 00 00    	jne    c0007102 <f_forward+0x1d4>
c0006f58:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0006f5c:	85 ed                	test   ebp,ebp
c0006f5e:	0f 85 9e 01 00 00    	jne    c0007102 <f_forward+0x1d4>
c0006f64:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0006f68:	0f 84 8f 01 00 00    	je     c00070fd <f_forward+0x1cf>
c0006f6e:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0006f71:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0006f74:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0006f77:	bf 00 00 00 00       	mov    edi,0x0
c0006f7c:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0006f7f:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0006f83:	89 d1                	mov    ecx,edx
c0006f85:	19 f9                	sbb    ecx,edi
c0006f87:	0f 83 cf 00 00 00    	jae    c000705c <f_forward+0x12e>
c0006f8d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0006f91:	e9 c6 00 00 00       	jmp    c000705c <f_forward+0x12e>
c0006f96:	50                   	push   eax
c0006f97:	50                   	push   eax
c0006f98:	6a 00                	push   0x0
c0006f9a:	6a 00                	push   0x0
c0006f9c:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0006fa0:	83 c4 10             	add    esp,0x10
c0006fa3:	85 c0                	test   eax,eax
c0006fa5:	0f 84 57 01 00 00    	je     c0007102 <f_forward+0x1d4>
c0006fab:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006faf:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006fb2:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0006fb5:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c0006fb9:	89 d7                	mov    edi,edx
c0006fbb:	8d 4e ff             	lea    ecx,[esi-0x1]
c0006fbe:	89 c6                	mov    esi,eax
c0006fc0:	0f ac fe 09          	shrd   esi,edi,0x9
c0006fc4:	21 ce                	and    esi,ecx
c0006fc6:	89 c1                	mov    ecx,eax
c0006fc8:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0006fce:	0f 84 98 00 00 00    	je     c000706c <f_forward+0x13e>
c0006fd4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006fd8:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006fdb:	89 c8                	mov    eax,ecx
c0006fdd:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0006fe1:	e8 f8 ac ff ff       	call   c0001cde <clst2sect>
c0006fe6:	89 d7                	mov    edi,edx
c0006fe8:	09 c7                	or     edi,eax
c0006fea:	0f 84 9e 00 00 00    	je     c000708e <f_forward+0x160>
c0006ff0:	31 ff                	xor    edi,edi
c0006ff2:	01 c6                	add    esi,eax
c0006ff4:	11 d7                	adc    edi,edx
c0006ff6:	8d 4b 50             	lea    ecx,[ebx+0x50]
c0006ff9:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0006ffc:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007000:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0007003:	39 fa                	cmp    edx,edi
c0007005:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007009:	0f 85 a2 00 00 00    	jne    c00070b1 <f_forward+0x183>
c000700f:	39 f0                	cmp    eax,esi
c0007011:	0f 85 9a 00 00 00    	jne    c00070b1 <f_forward+0x183>
c0007017:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000701a:	ba 00 02 00 00       	mov    edx,0x200
c000701f:	25 ff 01 00 00       	and    eax,0x1ff
c0007024:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0007028:	29 c2                	sub    edx,eax
c000702a:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000702d:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0007030:	39 d1                	cmp    ecx,edx
c0007032:	76 02                	jbe    c0007036 <f_forward+0x108>
c0007034:	89 d1                	mov    ecx,edx
c0007036:	52                   	push   edx
c0007037:	8d 73 50             	lea    esi,[ebx+0x50]
c000703a:	52                   	push   edx
c000703b:	01 c6                	add    esi,eax
c000703d:	51                   	push   ecx
c000703e:	56                   	push   esi
c000703f:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007043:	83 c4 10             	add    esp,0x10
c0007046:	85 c0                	test   eax,eax
c0007048:	74 44                	je     c000708e <f_forward+0x160>
c000704a:	31 ff                	xor    edi,edi
c000704c:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c000704f:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c0007052:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0007056:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c000705a:	01 07                	add    DWORD PTR [edi],eax
c000705c:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0007061:	0f 85 2f ff ff ff    	jne    c0006f96 <f_forward+0x68>
c0007067:	e9 96 00 00 00       	jmp    c0007102 <f_forward+0x1d4>
c000706c:	85 f6                	test   esi,esi
c000706e:	0f 85 60 ff ff ff    	jne    c0006fd4 <f_forward+0xa6>
c0007074:	89 d7                	mov    edi,edx
c0007076:	09 c7                	or     edi,eax
c0007078:	75 05                	jne    c000707f <f_forward+0x151>
c000707a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000707d:	eb 0a                	jmp    c0007089 <f_forward+0x15b>
c000707f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007082:	89 d8                	mov    eax,ebx
c0007084:	e8 15 bd ff ff       	call   c0002d9e <get_fat>
c0007089:	83 f8 01             	cmp    eax,0x1
c000708c:	77 0b                	ja     c0007099 <f_forward+0x16b>
c000708e:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0007092:	bd 02 00 00 00       	mov    ebp,0x2
c0007097:	eb 69                	jmp    c0007102 <f_forward+0x1d4>
c0007099:	83 f8 ff             	cmp    eax,0xffffffff
c000709c:	75 0b                	jne    c00070a9 <f_forward+0x17b>
c000709e:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00070a2:	bd 01 00 00 00       	mov    ebp,0x1
c00070a7:	eb 59                	jmp    c0007102 <f_forward+0x1d4>
c00070a9:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00070ac:	e9 23 ff ff ff       	jmp    c0006fd4 <f_forward+0xa6>
c00070b1:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00070b5:	79 20                	jns    c00070d7 <f_forward+0x1a9>
c00070b7:	83 ec 0c             	sub    esp,0xc
c00070ba:	6a 01                	push   0x1
c00070bc:	52                   	push   edx
c00070bd:	50                   	push   eax
c00070be:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00070c2:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00070c6:	50                   	push   eax
c00070c7:	e8 44 a9 ff ff       	call   c0001a10 <disk_write>
c00070cc:	83 c4 20             	add    esp,0x20
c00070cf:	85 c0                	test   eax,eax
c00070d1:	75 cb                	jne    c000709e <f_forward+0x170>
c00070d3:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00070d7:	83 ec 0c             	sub    esp,0xc
c00070da:	6a 01                	push   0x1
c00070dc:	57                   	push   edi
c00070dd:	56                   	push   esi
c00070de:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00070e2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00070e6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00070ea:	50                   	push   eax
c00070eb:	e8 0a a9 ff ff       	call   c00019fa <disk_read>
c00070f0:	83 c4 20             	add    esp,0x20
c00070f3:	85 c0                	test   eax,eax
c00070f5:	0f 84 1c ff ff ff    	je     c0007017 <f_forward+0xe9>
c00070fb:	eb a1                	jmp    c000709e <f_forward+0x170>
c00070fd:	bd 07 00 00 00       	mov    ebp,0x7
c0007102:	83 c4 2c             	add    esp,0x2c
c0007105:	89 e8                	mov    eax,ebp
c0007107:	5b                   	pop    ebx
c0007108:	5e                   	pop    esi
c0007109:	5f                   	pop    edi
c000710a:	5d                   	pop    ebp
c000710b:	c3                   	ret    

c000710c <f_mkfs>:
c000710c:	55                   	push   ebp
c000710d:	57                   	push   edi
c000710e:	56                   	push   esi
c000710f:	53                   	push   ebx
c0007110:	bb 0b 00 00 00       	mov    ebx,0xb
c0007115:	81 ec 9c 00 00 00    	sub    esp,0x9c
c000711b:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0007122:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c0007129:	e8 f9 ae ff ff       	call   c0002027 <get_ldnumber>
c000712e:	85 c0                	test   eax,eax
c0007130:	0f 88 e8 10 00 00    	js     c000821e <f_mkfs+0x1112>
c0007136:	8b 14 85 20 45 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbae0]
c000713d:	85 d2                	test   edx,edx
c000713f:	74 03                	je     c0007144 <f_mkfs+0x38>
c0007141:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0007144:	85 f6                	test   esi,esi
c0007146:	75 05                	jne    c000714d <f_mkfs+0x41>
c0007148:	be 40 03 02 c0       	mov    esi,0xc0020340
c000714d:	0f b6 c0             	movzx  eax,al
c0007150:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007154:	83 ec 0c             	sub    esp,0xc
c0007157:	bb 03 00 00 00       	mov    ebx,0x3
c000715c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007160:	e8 92 a8 ff ff       	call   c00019f7 <disk_initialize>
c0007165:	83 c4 10             	add    esp,0x10
c0007168:	a8 01                	test   al,0x1
c000716a:	0f 85 ae 10 00 00    	jne    c000821e <f_mkfs+0x1112>
c0007170:	bb 0a 00 00 00       	mov    ebx,0xa
c0007175:	a8 04                	test   al,0x4
c0007177:	0f 85 a1 10 00 00    	jne    c000821e <f_mkfs+0x1112>
c000717d:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0007180:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c0007184:	85 c0                	test   eax,eax
c0007186:	75 20                	jne    c00071a8 <f_mkfs+0x9c>
c0007188:	51                   	push   ecx
c0007189:	8d 44 24 78          	lea    eax,[esp+0x78]
c000718d:	50                   	push   eax
c000718e:	6a 03                	push   0x3
c0007190:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007194:	e8 8d a8 ff ff       	call   c0001a26 <disk_ioctl>
c0007199:	83 c4 10             	add    esp,0x10
c000719c:	85 c0                	test   eax,eax
c000719e:	74 08                	je     c00071a8 <f_mkfs+0x9c>
c00071a0:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00071a8:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c00071ac:	8d 42 ff             	lea    eax,[edx-0x1]
c00071af:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00071b4:	77 04                	ja     c00071ba <f_mkfs+0xae>
c00071b6:	85 c2                	test   edx,eax
c00071b8:	74 08                	je     c00071c2 <f_mkfs+0xb6>
c00071ba:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00071c2:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00071c5:	88 44 24 40          	mov    BYTE PTR [esp+0x40],al
c00071c9:	48                   	dec    eax
c00071ca:	3c 01                	cmp    al,0x1
c00071cc:	76 05                	jbe    c00071d3 <f_mkfs+0xc7>
c00071ce:	c6 44 24 40 01       	mov    BYTE PTR [esp+0x40],0x1
c00071d3:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c00071d6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00071da:	48                   	dec    eax
c00071db:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00071e0:	77 07                	ja     c00071e9 <f_mkfs+0xdd>
c00071e2:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c00071e7:	74 08                	je     c00071f1 <f_mkfs+0xe5>
c00071e9:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c00071f1:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c00071f4:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c00071fa:	77 07                	ja     c0007203 <f_mkfs+0xf7>
c00071fc:	8d 43 ff             	lea    eax,[ebx-0x1]
c00071ff:	85 d8                	test   eax,ebx
c0007201:	74 02                	je     c0007205 <f_mkfs+0xf9>
c0007203:	31 db                	xor    ebx,ebx
c0007205:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c0007210:	77 0a                	ja     c000721c <f_mkfs+0x110>
c0007212:	bb 11 00 00 00       	mov    ebx,0x11
c0007217:	e9 02 10 00 00       	jmp    c000821e <f_mkfs+0x1112>
c000721c:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c0007223:	8b 36                	mov    esi,DWORD PTR [esi]
c0007225:	85 ed                	test   ebp,ebp
c0007227:	75 1e                	jne    c0007247 <f_mkfs+0x13b>
c0007229:	83 ec 0c             	sub    esp,0xc
c000722c:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c0007233:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007238:	50                   	push   eax
c0007239:	e8 ed 0f 00 00       	call   c000822b <ff_memalloc>
c000723e:	83 c4 10             	add    esp,0x10
c0007241:	89 c5                	mov    ebp,eax
c0007243:	85 c0                	test   eax,eax
c0007245:	74 cb                	je     c0007212 <f_mkfs+0x106>
c0007247:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c000724f:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c0007257:	52                   	push   edx
c0007258:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c000725c:	50                   	push   eax
c000725d:	6a 01                	push   0x1
c000725f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007263:	e8 be a7 ff ff       	call   c0001a26 <disk_ioctl>
c0007268:	83 c4 10             	add    esp,0x10
c000726b:	85 c0                	test   eax,eax
c000726d:	0f 85 46 0f 00 00    	jne    c00081b9 <f_mkfs+0x10ad>
c0007273:	89 f1                	mov    ecx,esi
c0007275:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000727d:	83 e1 0f             	and    ecx,0xf
c0007280:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007288:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c000728c:	83 e6 08             	and    esi,0x8
c000728f:	75 56                	jne    c00072e7 <f_mkfs+0x1db>
c0007291:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c0007295:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c0007299:	83 ff 00             	cmp    edi,0x0
c000729c:	76 20                	jbe    c00072be <f_mkfs+0x1b2>
c000729e:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c00072a3:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c00072a9:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c00072b1:	83 d7 ff             	adc    edi,0xffffffff
c00072b4:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c00072b8:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c00072bc:	eb 21                	jmp    c00072df <f_mkfs+0x1d3>
c00072be:	ba 3f 00 00 00       	mov    edx,0x3f
c00072c3:	39 f2                	cmp    edx,esi
c00072c5:	19 f8                	sbb    eax,edi
c00072c7:	73 1e                	jae    c00072e7 <f_mkfs+0x1db>
c00072c9:	83 c6 c1             	add    esi,0xffffffc1
c00072cc:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c00072d4:	83 d7 ff             	adc    edi,0xffffffff
c00072d7:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c00072db:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c00072df:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00072e7:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00072eb:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00072ef:	89 04 24             	mov    DWORD PTR [esp],eax
c00072f2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00072f6:	ba 7f 00 00 00       	mov    edx,0x7f
c00072fb:	31 c0                	xor    eax,eax
c00072fd:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007300:	89 c7                	mov    edi,eax
c0007302:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007306:	0f 83 c1 0a 00 00    	jae    c0007dcd <f_mkfs+0xcc1>
c000730c:	89 df                	mov    edi,ebx
c000730e:	c1 ef 09             	shr    edi,0x9
c0007311:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007315:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c000731c:	c1 ef 09             	shr    edi,0x9
c000731f:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c0007324:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0007328:	74 29                	je     c0007353 <f_mkfs+0x247>
c000732a:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c000732f:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c0007335:	0f 97 c2             	seta   dl
c0007338:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c000733b:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000733f:	0f 92 c0             	setb   al
c0007342:	08 c2                	or     dl,al
c0007344:	75 5b                	jne    c00073a1 <f_mkfs+0x295>
c0007346:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c000734a:	83 e0 07             	and    eax,0x7
c000734d:	3c 04                	cmp    al,0x4
c000734f:	74 50                	je     c00073a1 <f_mkfs+0x295>
c0007351:	eb 1b                	jmp    c000736e <f_mkfs+0x262>
c0007353:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0007358:	0f 87 6f 0a 00 00    	ja     c0007dcd <f_mkfs+0xcc1>
c000735e:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c0007364:	76 08                	jbe    c000736e <f_mkfs+0x262>
c0007366:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c000736e:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007372:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c0007376:	83 e0 01             	and    eax,0x1
c0007379:	80 e1 02             	and    cl,0x2
c000737c:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c0007380:	74 0d                	je     c000738f <f_mkfs+0x283>
c0007382:	84 c0                	test   al,al
c0007384:	0f 84 4f 09 00 00    	je     c0007cd9 <f_mkfs+0xbcd>
c000738a:	e9 0e 08 00 00       	jmp    c0007b9d <f_mkfs+0xa91>
c000738f:	bb 13 00 00 00       	mov    ebx,0x13
c0007394:	84 c0                	test   al,al
c0007396:	0f 85 01 08 00 00    	jne    c0007b9d <f_mkfs+0xa91>
c000739c:	e9 35 0e 00 00       	jmp    c00081d6 <f_mkfs+0x10ca>
c00073a1:	ba ff 0f 00 00       	mov    edx,0xfff
c00073a6:	31 c0                	xor    eax,eax
c00073a8:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00073ab:	89 c7                	mov    edi,eax
c00073ad:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c00073b1:	0f 83 16 0a 00 00    	jae    c0007dcd <f_mkfs+0xcc1>
c00073b7:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c00073bd:	77 39                	ja     c00073f8 <f_mkfs+0x2ec>
c00073bf:	ba ff ff 07 00       	mov    edx,0x7ffff
c00073c4:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c00073cc:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00073cf:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00073d3:	73 08                	jae    c00073dd <f_mkfs+0x2d1>
c00073d5:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c00073dd:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c00073e2:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00073e5:	b8 00 00 00 00       	mov    eax,0x0
c00073ea:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00073ee:	73 08                	jae    c00073f8 <f_mkfs+0x2ec>
c00073f0:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c00073f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00073fc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007400:	83 c0 20             	add    eax,0x20
c0007403:	83 d2 00             	adc    edx,0x0
c0007406:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000740a:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000740e:	31 d2                	xor    edx,edx
c0007410:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007414:	52                   	push   edx
c0007415:	50                   	push   eax
c0007416:	31 ff                	xor    edi,edi
c0007418:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000741c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007420:	e8 a7 7f 01 00       	call   c001f3cc <__udivdi3>
c0007425:	83 c4 10             	add    esp,0x10
c0007428:	c1 e0 02             	shl    eax,0x2
c000742b:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c000742f:	05 07 02 00 00       	add    eax,0x207
c0007434:	89 f1                	mov    ecx,esi
c0007436:	c1 e8 09             	shr    eax,0x9
c0007439:	89 fb                	mov    ebx,edi
c000743b:	83 c1 ff             	add    ecx,0xffffffff
c000743e:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0007442:	83 d3 ff             	adc    ebx,0xffffffff
c0007445:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0007449:	13 5c 24 44          	adc    ebx,DWORD PTR [esp+0x44]
c000744d:	31 d2                	xor    edx,edx
c000744f:	01 c8                	add    eax,ecx
c0007451:	11 da                	adc    edx,ebx
c0007453:	89 c1                	mov    ecx,eax
c0007455:	f7 de                	neg    esi
c0007457:	83 d7 00             	adc    edi,0x0
c000745a:	21 f1                	and    ecx,esi
c000745c:	f7 df                	neg    edi
c000745e:	89 d0                	mov    eax,edx
c0007460:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0007464:	21 f8                	and    eax,edi
c0007466:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000746a:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c000746e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007472:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0007476:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000747a:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c000747e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007481:	0f ac d0 01          	shrd   eax,edx,0x1
c0007485:	d1 ea                	shr    edx,1
c0007487:	89 df                	mov    edi,ebx
c0007489:	39 c1                	cmp    ecx,eax
c000748b:	19 d7                	sbb    edi,edx
c000748d:	0f 83 3a 09 00 00    	jae    c0007dcd <f_mkfs+0xcc1>
c0007493:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007497:	31 d2                	xor    edx,edx
c0007499:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c000749d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00074a1:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c00074a5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00074a8:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c00074ac:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c00074b0:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00074b4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00074b8:	83 f8 0f             	cmp    eax,0xf
c00074bb:	0f 86 0c 09 00 00    	jbe    c0007dcd <f_mkfs+0xcc1>
c00074c1:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c00074c9:	0f 87 fe 08 00 00    	ja     c0007dcd <f_mkfs+0xcc1>
c00074cf:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00074d3:	31 d2                	xor    edx,edx
c00074d5:	83 c0 07             	add    eax,0x7
c00074d8:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c00074e0:	c1 e8 03             	shr    eax,0x3
c00074e3:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c00074eb:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00074ef:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00074f3:	c1 e0 09             	shl    eax,0x9
c00074f6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00074fd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007501:	48                   	dec    eax
c0007502:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007506:	03 44 24 64          	add    eax,DWORD PTR [esp+0x64]
c000750a:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c000750e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007512:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0007519:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000751d:	31 d2                	xor    edx,edx
c000751f:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0007524:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0007528:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000752c:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007530:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0007534:	31 ff                	xor    edi,edi
c0007536:	31 f6                	xor    esi,esi
c0007538:	31 db                	xor    ebx,ebx
c000753a:	85 ff                	test   edi,edi
c000753c:	74 05                	je     c0007543 <f_mkfs+0x437>
c000753e:	4f                   	dec    edi
c000753f:	74 44                	je     c0007585 <f_mkfs+0x479>
c0007541:	eb 4f                	jmp    c0007592 <f_mkfs+0x486>
c0007543:	83 ec 0c             	sub    esp,0xc
c0007546:	0f b7 c3             	movzx  eax,bx
c0007549:	50                   	push   eax
c000754a:	e8 0e 0e 00 00       	call   c000835d <ff_wtoupper>
c000754f:	83 c4 10             	add    esp,0x10
c0007552:	89 c1                	mov    ecx,eax
c0007554:	66 39 c3             	cmp    bx,ax
c0007557:	8d 53 01             	lea    edx,[ebx+0x1]
c000755a:	75 3e                	jne    c000759a <f_mkfs+0x48e>
c000755c:	be 01 00 00 00       	mov    esi,0x1
c0007561:	89 df                	mov    edi,ebx
c0007563:	66 01 f7             	add    di,si
c0007566:	75 07                	jne    c000756f <f_mkfs+0x463>
c0007568:	83 fe 7f             	cmp    esi,0x7f
c000756b:	77 31                	ja     c000759e <f_mkfs+0x492>
c000756d:	eb 16                	jmp    c0007585 <f_mkfs+0x479>
c000756f:	83 ec 0c             	sub    esp,0xc
c0007572:	0f b7 ff             	movzx  edi,di
c0007575:	57                   	push   edi
c0007576:	e8 e2 0d 00 00       	call   c000835d <ff_wtoupper>
c000757b:	83 c4 10             	add    esp,0x10
c000757e:	39 c7                	cmp    edi,eax
c0007580:	75 e6                	jne    c0007568 <f_mkfs+0x45c>
c0007582:	46                   	inc    esi
c0007583:	eb dc                	jmp    c0007561 <f_mkfs+0x455>
c0007585:	31 c0                	xor    eax,eax
c0007587:	4e                   	dec    esi
c0007588:	0f 95 c0             	setne  al
c000758b:	89 d9                	mov    ecx,ebx
c000758d:	89 c7                	mov    edi,eax
c000758f:	43                   	inc    ebx
c0007590:	eb 14                	jmp    c00075a6 <f_mkfs+0x49a>
c0007592:	89 f1                	mov    ecx,esi
c0007594:	01 f3                	add    ebx,esi
c0007596:	31 ff                	xor    edi,edi
c0007598:	eb 0c                	jmp    c00075a6 <f_mkfs+0x49a>
c000759a:	89 d3                	mov    ebx,edx
c000759c:	eb 08                	jmp    c00075a6 <f_mkfs+0x49a>
c000759e:	bf 02 00 00 00       	mov    edi,0x2
c00075a3:	83 c9 ff             	or     ecx,0xffffffff
c00075a6:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00075a9:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00075ad:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c00075b1:	0f b6 c1             	movzx  eax,cl
c00075b4:	e8 87 a9 ff ff       	call   c0001f40 <xsum32>
c00075b9:	66 c1 e9 08          	shr    cx,0x8
c00075bd:	89 c2                	mov    edx,eax
c00075bf:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00075c2:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c00075c6:	0f b7 c1             	movzx  eax,cx
c00075c9:	e8 72 a9 ff ff       	call   c0001f40 <xsum32>
c00075ce:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c00075d3:	66 85 db             	test   bx,bx
c00075d6:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c00075da:	74 1f                	je     c00075fb <f_mkfs+0x4ef>
c00075dc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00075df:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c00075e6:	83 c0 02             	add    eax,0x2
c00075e9:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c00075ef:	39 c2                	cmp    edx,eax
c00075f1:	74 08                	je     c00075fb <f_mkfs+0x4ef>
c00075f3:	89 04 24             	mov    DWORD PTR [esp],eax
c00075f6:	e9 3f ff ff ff       	jmp    c000753a <f_mkfs+0x42e>
c00075fb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00075fe:	83 ec 0c             	sub    esp,0xc
c0007601:	05 01 02 00 00       	add    eax,0x201
c0007606:	c1 e8 09             	shr    eax,0x9
c0007609:	50                   	push   eax
c000760a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000760e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007612:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007616:	55                   	push   ebp
c0007617:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000761b:	e8 f0 a3 ff ff       	call   c0001a10 <disk_write>
c0007620:	83 c4 20             	add    esp,0x20
c0007623:	85 c0                	test   eax,eax
c0007625:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007628:	0f 85 8b 0b 00 00    	jne    c00081b9 <f_mkfs+0x10ad>
c000762e:	89 d0                	mov    eax,edx
c0007630:	31 d2                	xor    edx,edx
c0007632:	01 44 24 48          	add    DWORD PTR [esp+0x48],eax
c0007636:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c000763a:	66 85 db             	test   bx,bx
c000763d:	74 04                	je     c0007643 <f_mkfs+0x537>
c000763f:	31 c0                	xor    eax,eax
c0007641:	eb b0                	jmp    c00075f3 <f_mkfs+0x4e7>
c0007643:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007647:	31 d2                	xor    edx,edx
c0007649:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c000764d:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0007651:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007655:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c000765c:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007660:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c0007666:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000766a:	8d 70 01             	lea    esi,[eax+0x1]
c000766d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007671:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007675:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c0007680:	c1 eb 09             	shr    ebx,0x9
c0007683:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007687:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000768b:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c0007692:	31 d2                	xor    edx,edx
c0007694:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007699:	89 04 24             	mov    DWORD PTR [esp],eax
c000769c:	89 c1                	mov    ecx,eax
c000769e:	89 e8                	mov    eax,ebp
c00076a0:	e8 34 a4 ff ff       	call   c0001ad9 <mem_set>
c00076a5:	31 c0                	xor    eax,eax
c00076a7:	83 fe 07             	cmp    esi,0x7
c00076aa:	76 10                	jbe    c00076bc <f_mkfs+0x5b0>
c00076ac:	39 04 24             	cmp    DWORD PTR [esp],eax
c00076af:	76 0b                	jbe    c00076bc <f_mkfs+0x5b0>
c00076b1:	40                   	inc    eax
c00076b2:	83 ee 08             	sub    esi,0x8
c00076b5:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c00076ba:	eb eb                	jmp    c00076a7 <f_mkfs+0x59b>
c00076bc:	b2 01                	mov    dl,0x1
c00076be:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c00076c2:	85 f6                	test   esi,esi
c00076c4:	74 0c                	je     c00076d2 <f_mkfs+0x5c6>
c00076c6:	39 04 24             	cmp    DWORD PTR [esp],eax
c00076c9:	76 07                	jbe    c00076d2 <f_mkfs+0x5c6>
c00076cb:	08 11                	or     BYTE PTR [ecx],dl
c00076cd:	4e                   	dec    esi
c00076ce:	01 d2                	add    edx,edx
c00076d0:	eb f0                	jmp    c00076c2 <f_mkfs+0x5b6>
c00076d2:	89 df                	mov    edi,ebx
c00076d4:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c00076d8:	76 04                	jbe    c00076de <f_mkfs+0x5d2>
c00076da:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00076de:	83 ec 0c             	sub    esp,0xc
c00076e1:	57                   	push   edi
c00076e2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00076e6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00076ea:	55                   	push   ebp
c00076eb:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00076ef:	e8 1c a3 ff ff       	call   c0001a10 <disk_write>
c00076f4:	83 c4 20             	add    esp,0x20
c00076f7:	85 c0                	test   eax,eax
c00076f9:	0f 85 ba 0a 00 00    	jne    c00081b9 <f_mkfs+0x10ad>
c00076ff:	31 d2                	xor    edx,edx
c0007701:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c0007705:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007709:	29 fb                	sub    ebx,edi
c000770b:	0f 85 7a ff ff ff    	jne    c000768b <f_mkfs+0x57f>
c0007711:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007715:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000771d:	31 f6                	xor    esi,esi
c000771f:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007723:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007726:	31 d2                	xor    edx,edx
c0007728:	89 e8                	mov    eax,ebp
c000772a:	e8 aa a3 ff ff       	call   c0001ad9 <mem_set>
c000772f:	31 c9                	xor    ecx,ecx
c0007731:	85 db                	test   ebx,ebx
c0007733:	75 40                	jne    c0007775 <f_mkfs+0x669>
c0007735:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c000773a:	89 e8                	mov    eax,ebp
c000773c:	e8 7a a3 ff ff       	call   c0001abb <st_dword>
c0007741:	8d 45 04             	lea    eax,[ebp+0x4]
c0007744:	83 ca ff             	or     edx,0xffffffff
c0007747:	bb 02 00 00 00       	mov    ebx,0x2
c000774c:	e8 6a a3 ff ff       	call   c0001abb <st_dword>
c0007751:	b9 08 00 00 00       	mov    ecx,0x8
c0007756:	eb 1d                	jmp    c0007775 <f_mkfs+0x669>
c0007758:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000775b:	76 3b                	jbe    c0007798 <f_mkfs+0x68c>
c000775d:	43                   	inc    ebx
c000775e:	83 fe 01             	cmp    esi,0x1
c0007761:	89 da                	mov    edx,ebx
c0007763:	77 03                	ja     c0007768 <f_mkfs+0x65c>
c0007765:	83 ca ff             	or     edx,0xffffffff
c0007768:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c000776c:	4e                   	dec    esi
c000776d:	e8 49 a3 ff ff       	call   c0001abb <st_dword>
c0007772:	83 c1 04             	add    ecx,0x4
c0007775:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007779:	85 f6                	test   esi,esi
c000777b:	75 db                	jne    c0007758 <f_mkfs+0x64c>
c000777d:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c0007782:	77 14                	ja     c0007798 <f_mkfs+0x68c>
c0007784:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c000778b:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c000778f:	85 f6                	test   esi,esi
c0007791:	74 05                	je     c0007798 <f_mkfs+0x68c>
c0007793:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007796:	77 dd                	ja     c0007775 <f_mkfs+0x669>
c0007798:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000779c:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00077a0:	39 cf                	cmp    edi,ecx
c00077a2:	76 02                	jbe    c00077a6 <f_mkfs+0x69a>
c00077a4:	89 cf                	mov    edi,ecx
c00077a6:	83 ec 0c             	sub    esp,0xc
c00077a9:	57                   	push   edi
c00077aa:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00077ae:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00077b2:	55                   	push   ebp
c00077b3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00077b7:	e8 54 a2 ff ff       	call   c0001a10 <disk_write>
c00077bc:	83 c4 20             	add    esp,0x20
c00077bf:	85 c0                	test   eax,eax
c00077c1:	0f 85 f2 09 00 00    	jne    c00081b9 <f_mkfs+0x10ad>
c00077c7:	31 d2                	xor    edx,edx
c00077c9:	01 7c 24 40          	add    DWORD PTR [esp+0x40],edi
c00077cd:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c00077d1:	29 7c 24 50          	sub    DWORD PTR [esp+0x50],edi
c00077d5:	0f 85 48 ff ff ff    	jne    c0007723 <f_mkfs+0x617>
c00077db:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00077de:	31 d2                	xor    edx,edx
c00077e0:	89 e8                	mov    eax,ebp
c00077e2:	31 ff                	xor    edi,edi
c00077e4:	e8 f0 a2 ff ff       	call   c0001ad9 <mem_set>
c00077e9:	8d 45 34             	lea    eax,[ebp+0x34]
c00077ec:	ba 02 00 00 00       	mov    edx,0x2
c00077f1:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c00077f5:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c00077f9:	e8 bd a2 ff ff       	call   c0001abb <st_dword>
c00077fe:	8d 45 38             	lea    eax,[ebp+0x38]
c0007801:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007805:	e8 b1 a2 ff ff       	call   c0001abb <st_dword>
c000780a:	8d 45 44             	lea    eax,[ebp+0x44]
c000780d:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007811:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007815:	e8 a1 a2 ff ff       	call   c0001abb <st_dword>
c000781a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000781e:	8d 45 54             	lea    eax,[ebp+0x54]
c0007821:	83 c2 02             	add    edx,0x2
c0007824:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007828:	e8 8e a2 ff ff       	call   c0001abb <st_dword>
c000782d:	8d 45 58             	lea    eax,[ebp+0x58]
c0007830:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007834:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007838:	e8 7e a2 ff ff       	call   c0001abb <st_dword>
c000783d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007841:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c0007846:	89 c6                	mov    esi,eax
c0007848:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000784c:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007850:	89 04 24             	mov    DWORD PTR [esp],eax
c0007853:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007857:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c000785a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000785e:	39 cb                	cmp    ebx,ecx
c0007860:	76 02                	jbe    c0007864 <f_mkfs+0x758>
c0007862:	89 cb                	mov    ebx,ecx
c0007864:	83 ec 0c             	sub    esp,0xc
c0007867:	53                   	push   ebx
c0007868:	57                   	push   edi
c0007869:	56                   	push   esi
c000786a:	55                   	push   ebp
c000786b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000786f:	e8 9c a1 ff ff       	call   c0001a10 <disk_write>
c0007874:	83 c4 20             	add    esp,0x20
c0007877:	85 c0                	test   eax,eax
c0007879:	0f 85 3a 09 00 00    	jne    c00081b9 <f_mkfs+0x10ad>
c000787f:	31 d2                	xor    edx,edx
c0007881:	b9 00 02 00 00       	mov    ecx,0x200
c0007886:	89 e8                	mov    eax,ebp
c0007888:	e8 4c a2 ff ff       	call   c0001ad9 <mem_set>
c000788d:	31 d2                	xor    edx,edx
c000788f:	01 de                	add    esi,ebx
c0007891:	11 d7                	adc    edi,edx
c0007893:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007896:	75 bf                	jne    c0007857 <f_mkfs+0x74b>
c0007898:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000789c:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00078a0:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c00078a8:	b9 00 02 00 00       	mov    ecx,0x200
c00078ad:	31 d2                	xor    edx,edx
c00078af:	89 e8                	mov    eax,ebp
c00078b1:	e8 23 a2 ff ff       	call   c0001ad9 <mem_set>
c00078b6:	b9 0b 00 00 00       	mov    ecx,0xb
c00078bb:	ba 20 04 02 c0       	mov    edx,0xc0020420
c00078c0:	89 e8                	mov    eax,ebp
c00078c2:	e8 fd a1 ff ff       	call   c0001ac4 <mem_cpy>
c00078c7:	8d 45 40             	lea    eax,[ebp+0x40]
c00078ca:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00078ce:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00078d2:	e8 e7 a1 ff ff       	call   c0001abe <st_qword>
c00078d7:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c00078db:	8d 45 48             	lea    eax,[ebp+0x48]
c00078de:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00078e2:	e8 d7 a1 ff ff       	call   c0001abe <st_qword>
c00078e7:	8d 45 50             	lea    eax,[ebp+0x50]
c00078ea:	ba 20 00 00 00       	mov    edx,0x20
c00078ef:	e8 c7 a1 ff ff       	call   c0001abb <st_dword>
c00078f4:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00078f8:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00078fc:	e8 ba a1 ff ff       	call   c0001abb <st_dword>
c0007901:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007905:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007909:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000790d:	e8 a9 a1 ff ff       	call   c0001abb <st_dword>
c0007912:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007915:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007919:	e8 9d a1 ff ff       	call   c0001abb <st_dword>
c000791e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007922:	8d 50 02             	lea    edx,[eax+0x2]
c0007925:	8d 45 60             	lea    eax,[ebp+0x60]
c0007928:	e8 8e a1 ff ff       	call   c0001abb <st_dword>
c000792d:	8d 45 64             	lea    eax,[ebp+0x64]
c0007930:	ba 00 00 21 50       	mov    edx,0x50210000
c0007935:	e8 81 a1 ff ff       	call   c0001abb <st_dword>
c000793a:	8d 45 68             	lea    eax,[ebp+0x68]
c000793d:	ba 00 01 00 00       	mov    edx,0x100
c0007942:	e8 70 a1 ff ff       	call   c0001ab7 <st_word>
c0007947:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c000794b:	b8 0a 00 00 00       	mov    eax,0xa
c0007950:	48                   	dec    eax
c0007951:	74 05                	je     c0007958 <f_mkfs+0x84c>
c0007953:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007956:	eb f8                	jmp    c0007950 <f_mkfs+0x844>
c0007958:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000795c:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007960:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007964:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007968:	74 05                	je     c000796f <f_mkfs+0x863>
c000796a:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c000796d:	eb f5                	jmp    c0007964 <f_mkfs+0x858>
c000796f:	8d 45 78             	lea    eax,[ebp+0x78]
c0007972:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007977:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c000797d:	31 db                	xor    ebx,ebx
c000797f:	e8 33 a1 ff ff       	call   c0001ab7 <st_word>
c0007984:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c000798a:	ba 55 aa 00 00       	mov    edx,0xaa55
c000798f:	89 04 24             	mov    DWORD PTR [esp],eax
c0007992:	e8 20 a1 ff ff       	call   c0001ab7 <st_word>
c0007997:	31 c9                	xor    ecx,ecx
c0007999:	8d 41 96             	lea    eax,[ecx-0x6a]
c000799c:	83 f8 01             	cmp    eax,0x1
c000799f:	76 13                	jbe    c00079b4 <f_mkfs+0x8a8>
c00079a1:	83 f9 70             	cmp    ecx,0x70
c00079a4:	74 0e                	je     c00079b4 <f_mkfs+0x8a8>
c00079a6:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c00079ab:	89 da                	mov    edx,ebx
c00079ad:	e8 8e a5 ff ff       	call   c0001f40 <xsum32>
c00079b2:	89 c3                	mov    ebx,eax
c00079b4:	41                   	inc    ecx
c00079b5:	81 f9 00 02 00 00    	cmp    ecx,0x200
c00079bb:	75 dc                	jne    c0007999 <f_mkfs+0x88d>
c00079bd:	89 f0                	mov    eax,esi
c00079bf:	89 fa                	mov    edx,edi
c00079c1:	83 c0 01             	add    eax,0x1
c00079c4:	83 d2 00             	adc    edx,0x0
c00079c7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00079cb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00079cf:	83 ec 0c             	sub    esp,0xc
c00079d2:	6a 01                	push   0x1
c00079d4:	57                   	push   edi
c00079d5:	56                   	push   esi
c00079d6:	55                   	push   ebp
c00079d7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079db:	e8 30 a0 ff ff       	call   c0001a10 <disk_write>
c00079e0:	83 c4 20             	add    esp,0x20
c00079e3:	85 c0                	test   eax,eax
c00079e5:	0f 85 ce 07 00 00    	jne    c00081b9 <f_mkfs+0x10ad>
c00079eb:	31 d2                	xor    edx,edx
c00079ed:	b9 00 02 00 00       	mov    ecx,0x200
c00079f2:	89 e8                	mov    eax,ebp
c00079f4:	e8 e0 a0 ff ff       	call   c0001ad9 <mem_set>
c00079f9:	ba 55 aa 00 00       	mov    edx,0xaa55
c00079fe:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a01:	e8 b1 a0 ff ff       	call   c0001ab7 <st_word>
c0007a06:	89 f0                	mov    eax,esi
c0007a08:	83 c0 09             	add    eax,0x9
c0007a0b:	89 fa                	mov    edx,edi
c0007a0d:	83 d2 00             	adc    edx,0x0
c0007a10:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a13:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007a17:	31 c9                	xor    ecx,ecx
c0007a19:	41                   	inc    ecx
c0007a1a:	89 da                	mov    edx,ebx
c0007a1c:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007a21:	e8 1a a5 ff ff       	call   c0001f40 <xsum32>
c0007a26:	89 c3                	mov    ebx,eax
c0007a28:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007a2e:	75 e9                	jne    c0007a19 <f_mkfs+0x90d>
c0007a30:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007a34:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007a38:	83 c0 01             	add    eax,0x1
c0007a3b:	83 d2 00             	adc    edx,0x0
c0007a3e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007a42:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0007a46:	83 ec 0c             	sub    esp,0xc
c0007a49:	6a 01                	push   0x1
c0007a4b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a4f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a53:	55                   	push   ebp
c0007a54:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a58:	e8 b3 9f ff ff       	call   c0001a10 <disk_write>
c0007a5d:	83 c4 20             	add    esp,0x20
c0007a60:	85 c0                	test   eax,eax
c0007a62:	0f 85 51 07 00 00    	jne    c00081b9 <f_mkfs+0x10ad>
c0007a68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007a6c:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007a70:	75 09                	jne    c0007a7b <f_mkfs+0x96f>
c0007a72:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a75:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007a79:	74 12                	je     c0007a8d <f_mkfs+0x981>
c0007a7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007a7f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007a83:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007a87:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007a8b:	eb 8a                	jmp    c0007a17 <f_mkfs+0x90b>
c0007a8d:	31 d2                	xor    edx,edx
c0007a8f:	b9 00 02 00 00       	mov    ecx,0x200
c0007a94:	89 e8                	mov    eax,ebp
c0007a96:	e8 3e a0 ff ff       	call   c0001ad9 <mem_set>
c0007a9b:	83 c6 0b             	add    esi,0xb
c0007a9e:	83 d7 00             	adc    edi,0x0
c0007aa1:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007aa5:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007aa9:	31 c9                	xor    ecx,ecx
c0007aab:	41                   	inc    ecx
c0007aac:	89 da                	mov    edx,ebx
c0007aae:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007ab3:	e8 88 a4 ff ff       	call   c0001f40 <xsum32>
c0007ab8:	89 c3                	mov    ebx,eax
c0007aba:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007ac0:	75 e9                	jne    c0007aab <f_mkfs+0x99f>
c0007ac2:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007ac5:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007ac9:	83 c6 01             	add    esi,0x1
c0007acc:	83 d7 00             	adc    edi,0x0
c0007acf:	83 ec 0c             	sub    esp,0xc
c0007ad2:	6a 01                	push   0x1
c0007ad4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007ad8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007adc:	55                   	push   ebp
c0007add:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ae1:	e8 2a 9f ff ff       	call   c0001a10 <disk_write>
c0007ae6:	83 c4 20             	add    esp,0x20
c0007ae9:	85 c0                	test   eax,eax
c0007aeb:	0f 85 c8 06 00 00    	jne    c00081b9 <f_mkfs+0x10ad>
c0007af1:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007af5:	75 06                	jne    c0007afd <f_mkfs+0x9f1>
c0007af7:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007afb:	74 09                	je     c0007b06 <f_mkfs+0x9fa>
c0007afd:	89 34 24             	mov    DWORD PTR [esp],esi
c0007b00:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007b04:	eb a3                	jmp    c0007aa9 <f_mkfs+0x99d>
c0007b06:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007b0a:	89 da                	mov    edx,ebx
c0007b0c:	01 e8                	add    eax,ebp
c0007b0e:	e8 a8 9f ff ff       	call   c0001abb <st_dword>
c0007b13:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007b18:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007b20:	75 e4                	jne    c0007b06 <f_mkfs+0x9fa>
c0007b22:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007b25:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007b29:	83 c6 02             	add    esi,0x2
c0007b2c:	83 d7 00             	adc    edi,0x0
c0007b2f:	83 ec 0c             	sub    esp,0xc
c0007b32:	6a 01                	push   0x1
c0007b34:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007b38:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007b3c:	55                   	push   ebp
c0007b3d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007b41:	e8 ca 9e ff ff       	call   c0001a10 <disk_write>
c0007b46:	83 c4 20             	add    esp,0x20
c0007b49:	85 c0                	test   eax,eax
c0007b4b:	0f 85 68 06 00 00    	jne    c00081b9 <f_mkfs+0x10ad>
c0007b51:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007b56:	74 0d                	je     c0007b65 <f_mkfs+0xa59>
c0007b58:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007b60:	e9 43 fd ff ff       	jmp    c00078a8 <f_mkfs+0x79c>
c0007b65:	b1 07                	mov    cl,0x7
c0007b67:	e9 e3 05 00 00       	jmp    c000814f <f_mkfs+0x1043>
c0007b6c:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007b71:	0f 85 4f 02 00 00    	jne    c0007dc6 <f_mkfs+0xcba>
c0007b77:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007b7c:	0f 86 22 02 00 00    	jbe    c0007da4 <f_mkfs+0xc98>
c0007b82:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007b87:	0f 85 81 06 00 00    	jne    c000820e <f_mkfs+0x1102>
c0007b8d:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007b90:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007b94:	83 f8 40             	cmp    eax,0x40
c0007b97:	0f 87 51 06 00 00    	ja     c00081ee <f_mkfs+0x10e2>
c0007b9d:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007ba1:	85 ff                	test   edi,edi
c0007ba3:	75 1c                	jne    c0007bc1 <f_mkfs+0xab5>
c0007ba5:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ba8:	ba 20 03 02 c0       	mov    edx,0xc0020320
c0007bad:	c1 e9 0c             	shr    ecx,0xc
c0007bb0:	bf 01 00 00 00       	mov    edi,0x1
c0007bb5:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007bb8:	66 85 c0             	test   ax,ax
c0007bbb:	0f 85 95 01 00 00    	jne    c0007d56 <f_mkfs+0xc4a>
c0007bc1:	31 d2                	xor    edx,edx
c0007bc3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007bc6:	f7 f7                	div    edi
c0007bc8:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007bcd:	0f 86 95 01 00 00    	jbe    c0007d68 <f_mkfs+0xc5c>
c0007bd3:	83 c0 02             	add    eax,0x2
c0007bd6:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007bdb:	01 c0                	add    eax,eax
c0007bdd:	05 ff 01 00 00       	add    eax,0x1ff
c0007be2:	be 01 00 00 00       	mov    esi,0x1
c0007be7:	c1 e8 09             	shr    eax,0x9
c0007bea:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007bee:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007bf2:	c1 e0 05             	shl    eax,0x5
c0007bf5:	c1 e8 09             	shr    eax,0x9
c0007bf8:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007bfc:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0007c01:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007c05:	89 f0                	mov    eax,esi
c0007c07:	31 d2                	xor    edx,edx
c0007c09:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007c0d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007c11:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007c15:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007c19:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0007c1d:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007c22:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007c26:	31 d2                	xor    edx,edx
c0007c28:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007c2c:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007c30:	31 db                	xor    ebx,ebx
c0007c32:	01 c8                	add    eax,ecx
c0007c34:	11 da                	adc    edx,ebx
c0007c36:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007c3a:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007c3e:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007c42:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007c46:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007c4a:	f7 da                	neg    edx
c0007c4c:	21 d1                	and    ecx,edx
c0007c4e:	29 d9                	sub    ecx,ebx
c0007c50:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007c55:	0f 85 20 01 00 00    	jne    c0007d7b <f_mkfs+0xc6f>
c0007c5b:	31 db                	xor    ebx,ebx
c0007c5d:	01 ce                	add    esi,ecx
c0007c5f:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007c63:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007c67:	89 f8                	mov    eax,edi
c0007c69:	31 d2                	xor    edx,edx
c0007c6b:	c1 e0 04             	shl    eax,0x4
c0007c6e:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007c72:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007c76:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007c7a:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007c7e:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007c82:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007c85:	19 d3                	sbb    ebx,edx
c0007c87:	0f 82 40 01 00 00    	jb     c0007dcd <f_mkfs+0xcc1>
c0007c8d:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007c91:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007c94:	0f af 54 24 50       	imul   edx,DWORD PTR [esp+0x50]
c0007c99:	89 c8                	mov    eax,ecx
c0007c9b:	2b 44 24 48          	sub    eax,DWORD PTR [esp+0x48]
c0007c9f:	29 f0                	sub    eax,esi
c0007ca1:	29 d0                	sub    eax,edx
c0007ca3:	31 d2                	xor    edx,edx
c0007ca5:	f7 f7                	div    edi
c0007ca7:	89 c3                	mov    ebx,eax
c0007ca9:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007cae:	0f 85 b8 fe ff ff    	jne    c0007b6c <f_mkfs+0xa60>
c0007cb4:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007cb9:	0f 87 1d 01 00 00    	ja     c0007ddc <f_mkfs+0xcd0>
c0007cbf:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007cc4:	0f 85 03 01 00 00    	jne    c0007dcd <f_mkfs+0xcc1>
c0007cca:	83 ff 01             	cmp    edi,0x1
c0007ccd:	0f 86 fa 00 00 00    	jbe    c0007dcd <f_mkfs+0xcc1>
c0007cd3:	d1 ef                	shr    edi,1
c0007cd5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007cd9:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007cdd:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ce0:	85 db                	test   ebx,ebx
c0007ce2:	75 2d                	jne    c0007d11 <f_mkfs+0xc05>
c0007ce4:	89 cb                	mov    ebx,ecx
c0007ce6:	ba 30 03 02 c0       	mov    edx,0xc0020330
c0007ceb:	c1 eb 11             	shr    ebx,0x11
c0007cee:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007cf6:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007cf9:	66 85 c0             	test   ax,ax
c0007cfc:	74 11                	je     c0007d0f <f_mkfs+0xc03>
c0007cfe:	83 c2 02             	add    edx,0x2
c0007d01:	39 d8                	cmp    eax,ebx
c0007d03:	77 0a                	ja     c0007d0f <f_mkfs+0xc03>
c0007d05:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007d09:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007d0d:	eb e7                	jmp    c0007cf6 <f_mkfs+0xbea>
c0007d0f:	31 db                	xor    ebx,ebx
c0007d11:	31 d2                	xor    edx,edx
c0007d13:	89 c8                	mov    eax,ecx
c0007d15:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007d19:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007d20:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007d25:	c1 ea 09             	shr    edx,0x9
c0007d28:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007d2d:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007d31:	0f 87 96 00 00 00    	ja     c0007dcd <f_mkfs+0xcc1>
c0007d37:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007d3b:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0007d43:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007d47:	be 20 00 00 00       	mov    esi,0x20
c0007d4c:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007d51:	e9 a6 fe ff ff       	jmp    c0007bfc <f_mkfs+0xaf0>
c0007d56:	83 c2 02             	add    edx,0x2
c0007d59:	39 c8                	cmp    eax,ecx
c0007d5b:	0f 87 60 fe ff ff    	ja     c0007bc1 <f_mkfs+0xab5>
c0007d61:	01 ff                	add    edi,edi
c0007d63:	e9 4d fe ff ff       	jmp    c0007bb5 <f_mkfs+0xaa9>
c0007d68:	8d 04 40             	lea    eax,[eax+eax*2]
c0007d6b:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007d70:	40                   	inc    eax
c0007d71:	d1 e8                	shr    eax,1
c0007d73:	83 c0 03             	add    eax,0x3
c0007d76:	e9 62 fe ff ff       	jmp    c0007bdd <f_mkfs+0xad1>
c0007d7b:	31 d2                	xor    edx,edx
c0007d7d:	89 c8                	mov    eax,ecx
c0007d7f:	f7 74 24 50          	div    DWORD PTR [esp+0x50]
c0007d83:	85 d2                	test   edx,edx
c0007d85:	74 0c                	je     c0007d93 <f_mkfs+0xc87>
c0007d87:	49                   	dec    ecx
c0007d88:	46                   	inc    esi
c0007d89:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007d8e:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007d93:	89 c8                	mov    eax,ecx
c0007d95:	31 d2                	xor    edx,edx
c0007d97:	f7 74 24 50          	div    DWORD PTR [esp+0x50]
c0007d9b:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0007d9f:	e9 c3 fe ff ff       	jmp    c0007c67 <f_mkfs+0xb5b>
c0007da4:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007da9:	77 31                	ja     c0007ddc <f_mkfs+0xcd0>
c0007dab:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007db0:	75 1b                	jne    c0007dcd <f_mkfs+0xcc1>
c0007db2:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007db5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007db9:	3d 80 00 00 00       	cmp    eax,0x80
c0007dbe:	0f 86 d9 fd ff ff    	jbe    c0007b9d <f_mkfs+0xa91>
c0007dc4:	eb 07                	jmp    c0007dcd <f_mkfs+0xcc1>
c0007dc6:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007dcb:	76 0a                	jbe    c0007dd7 <f_mkfs+0xccb>
c0007dcd:	bb 0e 00 00 00       	mov    ebx,0xe
c0007dd2:	e9 ff 03 00 00       	jmp    c00081d6 <f_mkfs+0x10ca>
c0007dd7:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007ddc:	31 d2                	xor    edx,edx
c0007dde:	b9 00 02 00 00       	mov    ecx,0x200
c0007de3:	89 e8                	mov    eax,ebp
c0007de5:	e8 ef 9c ff ff       	call   c0001ad9 <mem_set>
c0007dea:	b9 0b 00 00 00       	mov    ecx,0xb
c0007def:	ba 42 04 02 c0       	mov    edx,0xc0020442
c0007df4:	89 e8                	mov    eax,ebp
c0007df6:	e8 c9 9c ff ff       	call   c0001ac4 <mem_cpy>
c0007dfb:	8d 45 0b             	lea    eax,[ebp+0xb]
c0007dfe:	ba 00 02 00 00       	mov    edx,0x200
c0007e03:	e8 af 9c ff ff       	call   c0001ab7 <st_word>
c0007e08:	89 f8                	mov    eax,edi
c0007e0a:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0007e0d:	8d 45 0e             	lea    eax,[ebp+0xe]
c0007e10:	0f b7 d6             	movzx  edx,si
c0007e13:	e8 9f 9c ff ff       	call   c0001ab7 <st_word>
c0007e18:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0007e1c:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c0007e1f:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e24:	75 08                	jne    c0007e2e <f_mkfs+0xd22>
c0007e26:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007e2e:	8d 45 11             	lea    eax,[ebp+0x11]
c0007e31:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0007e35:	e8 7d 9c ff ff       	call   c0001ab7 <st_word>
c0007e3a:	b8 ff ff 00 00       	mov    eax,0xffff
c0007e3f:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007e43:	39 d0                	cmp    eax,edx
c0007e45:	b8 00 00 00 00       	mov    eax,0x0
c0007e4a:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c0007e4e:	72 0a                	jb     c0007e5a <f_mkfs+0xd4e>
c0007e50:	8d 45 13             	lea    eax,[ebp+0x13]
c0007e53:	e8 5f 9c ff ff       	call   c0001ab7 <st_word>
c0007e58:	eb 08                	jmp    c0007e62 <f_mkfs+0xd56>
c0007e5a:	8d 45 20             	lea    eax,[ebp+0x20]
c0007e5d:	e8 59 9c ff ff       	call   c0001abb <st_dword>
c0007e62:	8d 45 18             	lea    eax,[ebp+0x18]
c0007e65:	ba 3f 00 00 00       	mov    edx,0x3f
c0007e6a:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c0007e6e:	e8 44 9c ff ff       	call   c0001ab7 <st_word>
c0007e73:	8d 45 1a             	lea    eax,[ebp+0x1a]
c0007e76:	ba ff 00 00 00       	mov    edx,0xff
c0007e7b:	e8 37 9c ff ff       	call   c0001ab7 <st_word>
c0007e80:	8d 45 1c             	lea    eax,[ebp+0x1c]
c0007e83:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007e87:	e8 2f 9c ff ff       	call   c0001abb <st_dword>
c0007e8c:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e91:	75 57                	jne    c0007eea <f_mkfs+0xdde>
c0007e93:	8d 45 43             	lea    eax,[ebp+0x43]
c0007e96:	ba 00 00 21 50       	mov    edx,0x50210000
c0007e9b:	e8 1b 9c ff ff       	call   c0001abb <st_dword>
c0007ea0:	8d 45 24             	lea    eax,[ebp+0x24]
c0007ea3:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007ea7:	e8 0f 9c ff ff       	call   c0001abb <st_dword>
c0007eac:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0007eaf:	ba 02 00 00 00       	mov    edx,0x2
c0007eb4:	e8 02 9c ff ff       	call   c0001abb <st_dword>
c0007eb9:	8d 45 30             	lea    eax,[ebp+0x30]
c0007ebc:	ba 01 00 00 00       	mov    edx,0x1
c0007ec1:	e8 f1 9b ff ff       	call   c0001ab7 <st_word>
c0007ec6:	8d 45 32             	lea    eax,[ebp+0x32]
c0007ec9:	ba 06 00 00 00       	mov    edx,0x6
c0007ece:	e8 e4 9b ff ff       	call   c0001ab7 <st_word>
c0007ed3:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0007ed7:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0007edb:	8d 45 47             	lea    eax,[ebp+0x47]
c0007ede:	b9 13 00 00 00       	mov    ecx,0x13
c0007ee3:	ba 4e 04 02 c0       	mov    edx,0xc002044e
c0007ee8:	eb 2f                	jmp    c0007f19 <f_mkfs+0xe0d>
c0007eea:	8d 45 27             	lea    eax,[ebp+0x27]
c0007eed:	ba 00 00 21 50       	mov    edx,0x50210000
c0007ef2:	e8 c4 9b ff ff       	call   c0001abb <st_dword>
c0007ef7:	8d 45 16             	lea    eax,[ebp+0x16]
c0007efa:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0007eff:	e8 b3 9b ff ff       	call   c0001ab7 <st_word>
c0007f04:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0007f08:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0007f0c:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0007f0f:	b9 13 00 00 00       	mov    ecx,0x13
c0007f14:	ba 62 04 02 c0       	mov    edx,0xc0020462
c0007f19:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c0007f1f:	e8 a0 9b ff ff       	call   c0001ac4 <mem_cpy>
c0007f24:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007f29:	89 f0                	mov    eax,esi
c0007f2b:	e8 87 9b ff ff       	call   c0001ab7 <st_word>
c0007f30:	83 ec 0c             	sub    esp,0xc
c0007f33:	6a 01                	push   0x1
c0007f35:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007f39:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007f3d:	55                   	push   ebp
c0007f3e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007f42:	e8 c9 9a ff ff       	call   c0001a10 <disk_write>
c0007f47:	83 c4 20             	add    esp,0x20
c0007f4a:	85 c0                	test   eax,eax
c0007f4c:	0f 85 67 02 00 00    	jne    c00081b9 <f_mkfs+0x10ad>
c0007f52:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007f57:	0f 85 b7 00 00 00    	jne    c0008014 <f_mkfs+0xf08>
c0007f5d:	83 ec 0c             	sub    esp,0xc
c0007f60:	6a 01                	push   0x1
c0007f62:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007f66:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007f6a:	83 c0 06             	add    eax,0x6
c0007f6d:	83 d2 00             	adc    edx,0x0
c0007f70:	52                   	push   edx
c0007f71:	50                   	push   eax
c0007f72:	55                   	push   ebp
c0007f73:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007f77:	e8 94 9a ff ff       	call   c0001a10 <disk_write>
c0007f7c:	83 c4 20             	add    esp,0x20
c0007f7f:	b9 00 02 00 00       	mov    ecx,0x200
c0007f84:	31 d2                	xor    edx,edx
c0007f86:	89 e8                	mov    eax,ebp
c0007f88:	e8 4c 9b ff ff       	call   c0001ad9 <mem_set>
c0007f8d:	ba 52 52 61 41       	mov    edx,0x41615252
c0007f92:	89 e8                	mov    eax,ebp
c0007f94:	e8 22 9b ff ff       	call   c0001abb <st_dword>
c0007f99:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0007f9f:	ba 72 72 41 61       	mov    edx,0x61417272
c0007fa4:	e8 12 9b ff ff       	call   c0001abb <st_dword>
c0007fa9:	8d 53 ff             	lea    edx,[ebx-0x1]
c0007fac:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c0007fb2:	e8 04 9b ff ff       	call   c0001abb <st_dword>
c0007fb7:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0007fbd:	ba 02 00 00 00       	mov    edx,0x2
c0007fc2:	e8 f4 9a ff ff       	call   c0001abb <st_dword>
c0007fc7:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007fcc:	89 f0                	mov    eax,esi
c0007fce:	e8 e4 9a ff ff       	call   c0001ab7 <st_word>
c0007fd3:	83 ec 0c             	sub    esp,0xc
c0007fd6:	6a 01                	push   0x1
c0007fd8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007fdc:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007fe0:	83 c0 07             	add    eax,0x7
c0007fe3:	83 d2 00             	adc    edx,0x0
c0007fe6:	52                   	push   edx
c0007fe7:	50                   	push   eax
c0007fe8:	55                   	push   ebp
c0007fe9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007fed:	e8 1e 9a ff ff       	call   c0001a10 <disk_write>
c0007ff2:	83 c4 14             	add    esp,0x14
c0007ff5:	6a 01                	push   0x1
c0007ff7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007ffb:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007fff:	83 c0 01             	add    eax,0x1
c0008002:	83 d2 00             	adc    edx,0x0
c0008005:	52                   	push   edx
c0008006:	50                   	push   eax
c0008007:	55                   	push   ebp
c0008008:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000800c:	e8 ff 99 ff ff       	call   c0001a10 <disk_write>
c0008011:	83 c4 20             	add    esp,0x20
c0008014:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c000801b:	31 d2                	xor    edx,edx
c000801d:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0008023:	31 db                	xor    ebx,ebx
c0008025:	89 e8                	mov    eax,ebp
c0008027:	e8 ad 9a ff ff       	call   c0001ad9 <mem_set>
c000802c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008033:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c0008038:	0f 94 c3             	sete   bl
c000803b:	4b                   	dec    ebx
c000803c:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c0008042:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c0008048:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000804d:	75 21                	jne    c0008070 <f_mkfs+0xf64>
c000804f:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0008054:	89 e8                	mov    eax,ebp
c0008056:	e8 60 9a ff ff       	call   c0001abb <st_dword>
c000805b:	8d 45 04             	lea    eax,[ebp+0x4]
c000805e:	83 ca ff             	or     edx,0xffffffff
c0008061:	e8 55 9a ff ff       	call   c0001abb <st_dword>
c0008066:	8d 45 08             	lea    eax,[ebp+0x8]
c0008069:	ba ff ff ff 0f       	mov    edx,0xfffffff
c000806e:	eb 04                	jmp    c0008074 <f_mkfs+0xf68>
c0008070:	89 da                	mov    edx,ebx
c0008072:	89 e8                	mov    eax,ebp
c0008074:	e8 42 9a ff ff       	call   c0001abb <st_dword>
c0008079:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000807d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008081:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0008085:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008089:	39 ce                	cmp    esi,ecx
c000808b:	76 02                	jbe    c000808f <f_mkfs+0xf83>
c000808d:	89 ce                	mov    esi,ecx
c000808f:	83 ec 0c             	sub    esp,0xc
c0008092:	56                   	push   esi
c0008093:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008097:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000809b:	55                   	push   ebp
c000809c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00080a0:	e8 6b 99 ff ff       	call   c0001a10 <disk_write>
c00080a5:	83 c4 20             	add    esp,0x20
c00080a8:	85 c0                	test   eax,eax
c00080aa:	0f 85 09 01 00 00    	jne    c00081b9 <f_mkfs+0x10ad>
c00080b0:	31 d2                	xor    edx,edx
c00080b2:	b9 00 02 00 00       	mov    ecx,0x200
c00080b7:	89 e8                	mov    eax,ebp
c00080b9:	e8 1b 9a ff ff       	call   c0001ad9 <mem_set>
c00080be:	31 d2                	xor    edx,edx
c00080c0:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c00080c4:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00080c8:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00080cc:	75 b3                	jne    c0008081 <f_mkfs+0xf75>
c00080ce:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00080d1:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00080d8:	40                   	inc    eax
c00080d9:	39 44 24 50          	cmp    DWORD PTR [esp+0x50],eax
c00080dd:	0f 87 65 ff ff ff    	ja     c0008048 <f_mkfs+0xf3c>
c00080e3:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080e8:	74 04                	je     c00080ee <f_mkfs+0xfe2>
c00080ea:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c00080ee:	89 fb                	mov    ebx,edi
c00080f0:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c00080f4:	76 04                	jbe    c00080fa <f_mkfs+0xfee>
c00080f6:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00080fa:	83 ec 0c             	sub    esp,0xc
c00080fd:	53                   	push   ebx
c00080fe:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008102:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008106:	55                   	push   ebp
c0008107:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000810b:	e8 00 99 ff ff       	call   c0001a10 <disk_write>
c0008110:	83 c4 20             	add    esp,0x20
c0008113:	85 c0                	test   eax,eax
c0008115:	0f 85 9e 00 00 00    	jne    c00081b9 <f_mkfs+0x10ad>
c000811b:	31 d2                	xor    edx,edx
c000811d:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c0008121:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008125:	29 df                	sub    edi,ebx
c0008127:	75 c5                	jne    c00080ee <f_mkfs+0xfe2>
c0008129:	b1 0c                	mov    cl,0xc
c000812b:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008130:	74 1d                	je     c000814f <f_mkfs+0x1043>
c0008132:	b8 ff ff 00 00       	mov    eax,0xffff
c0008137:	b1 06                	mov    cl,0x6
c0008139:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c000813d:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c0008141:	72 0c                	jb     c000814f <f_mkfs+0x1043>
c0008143:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0008148:	0f 94 c1             	sete   cl
c000814b:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c000814f:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c0008154:	75 4c                	jne    c00081a2 <f_mkfs+0x1096>
c0008156:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000815a:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c000815e:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0008165:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c000816c:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c0008177:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c0008182:	83 ec 0c             	sub    esp,0xc
c0008185:	0f b6 c9             	movzx  ecx,cl
c0008188:	55                   	push   ebp
c0008189:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000818d:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c0008194:	e8 58 c2 ff ff       	call   c00043f1 <create_partition>
c0008199:	83 c4 10             	add    esp,0x10
c000819c:	89 c3                	mov    ebx,eax
c000819e:	85 c0                	test   eax,eax
c00081a0:	75 34                	jne    c00081d6 <f_mkfs+0x10ca>
c00081a2:	50                   	push   eax
c00081a3:	31 db                	xor    ebx,ebx
c00081a5:	6a 00                	push   0x0
c00081a7:	6a 00                	push   0x0
c00081a9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00081ad:	e8 74 98 ff ff       	call   c0001a26 <disk_ioctl>
c00081b2:	83 c4 10             	add    esp,0x10
c00081b5:	85 c0                	test   eax,eax
c00081b7:	74 1d                	je     c00081d6 <f_mkfs+0x10ca>
c00081b9:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c00081c1:	75 0c                	jne    c00081cf <f_mkfs+0x10c3>
c00081c3:	83 ec 0c             	sub    esp,0xc
c00081c6:	55                   	push   ebp
c00081c7:	e8 75 00 00 00       	call   c0008241 <ff_memfree>
c00081cc:	83 c4 10             	add    esp,0x10
c00081cf:	bb 01 00 00 00       	mov    ebx,0x1
c00081d4:	eb 48                	jmp    c000821e <f_mkfs+0x1112>
c00081d6:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c00081de:	75 3e                	jne    c000821e <f_mkfs+0x1112>
c00081e0:	83 ec 0c             	sub    esp,0xc
c00081e3:	55                   	push   ebp
c00081e4:	e8 58 00 00 00       	call   c0008241 <ff_memfree>
c00081e9:	83 c4 10             	add    esp,0x10
c00081ec:	eb 30                	jmp    c000821e <f_mkfs+0x1112>
c00081ee:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c00081f3:	0f 85 eb fa ff ff    	jne    c0007ce4 <f_mkfs+0xbd8>
c00081f9:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00081fd:	81 ff 80 00 00 00    	cmp    edi,0x80
c0008203:	0f 86 b8 f9 ff ff    	jbe    c0007bc1 <f_mkfs+0xab5>
c0008209:	e9 bf fb ff ff       	jmp    c0007dcd <f_mkfs+0xcc1>
c000820e:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008213:	0f 85 c0 fa ff ff    	jne    c0007cd9 <f_mkfs+0xbcd>
c0008219:	e9 af fb ff ff       	jmp    c0007dcd <f_mkfs+0xcc1>
c000821e:	81 c4 9c 00 00 00    	add    esp,0x9c
c0008224:	89 d8                	mov    eax,ebx
c0008226:	5b                   	pop    ebx
c0008227:	5e                   	pop    esi
c0008228:	5f                   	pop    edi
c0008229:	5d                   	pop    ebp
c000822a:	c3                   	ret    

c000822b <ff_memalloc>:
c000822b:	83 ec 0c             	sub    esp,0xc
c000822e:	83 ec 0c             	sub    esp,0xc
c0008231:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008235:	e8 cf 3d 00 00       	call   c000c009 <malloc>
c000823a:	83 c4 10             	add    esp,0x10
c000823d:	83 c4 0c             	add    esp,0xc
c0008240:	c3                   	ret    

c0008241 <ff_memfree>:
c0008241:	83 ec 0c             	sub    esp,0xc
c0008244:	83 ec 0c             	sub    esp,0xc
c0008247:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000824b:	e8 c9 3d 00 00       	call   c000c019 <free>
c0008250:	83 c4 10             	add    esp,0x10
c0008253:	90                   	nop
c0008254:	83 c4 0c             	add    esp,0xc
c0008257:	c3                   	ret    

c0008258 <ff_uni2oem>:
c0008258:	83 ec 14             	sub    esp,0x14
c000825b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000825f:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008263:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c000826a:	c7 44 24 0c 80 07 02 c0 	mov    DWORD PTR [esp+0xc],0xc0020780
c0008272:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0008277:	77 0b                	ja     c0008284 <ff_uni2oem+0x2c>
c0008279:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000827d:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008282:	eb 61                	jmp    c00082e5 <ff_uni2oem+0x8d>
c0008284:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c000828c:	77 57                	ja     c00082e5 <ff_uni2oem+0x8d>
c000828e:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008294:	75 4f                	jne    c00082e5 <ff_uni2oem+0x8d>
c0008296:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c000829d:	eb 0b                	jmp    c00082aa <ff_uni2oem+0x52>
c000829f:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00082a4:	40                   	inc    eax
c00082a5:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00082aa:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c00082b0:	77 21                	ja     c00082d3 <ff_uni2oem+0x7b>
c00082b2:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00082b7:	25 ff ff 00 00       	and    eax,0xffff
c00082bc:	8d 14 00             	lea    edx,[eax+eax*1]
c00082bf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00082c3:	01 d0                	add    eax,edx
c00082c5:	66 8b 00             	mov    ax,WORD PTR [eax]
c00082c8:	25 ff ff 00 00       	and    eax,0xffff
c00082cd:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00082d1:	75 cc                	jne    c000829f <ff_uni2oem+0x47>
c00082d3:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00082d8:	83 e8 80             	sub    eax,0xffffff80
c00082db:	25 ff 00 00 00       	and    eax,0xff
c00082e0:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00082e5:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00082ea:	83 c4 14             	add    esp,0x14
c00082ed:	c3                   	ret    

c00082ee <ff_oem2uni>:
c00082ee:	83 ec 18             	sub    esp,0x18
c00082f1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00082f5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00082f9:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c00082fe:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008302:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0008309:	c7 44 24 10 80 07 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020780
c0008311:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0008317:	77 0b                	ja     c0008324 <ff_oem2uni+0x36>
c0008319:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000831d:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008322:	eb 30                	jmp    c0008354 <ff_oem2uni+0x66>
c0008324:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c000832a:	75 28                	jne    c0008354 <ff_oem2uni+0x66>
c000832c:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0008333:	77 1f                	ja     c0008354 <ff_oem2uni+0x66>
c0008335:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008339:	25 ff ff 00 00       	and    eax,0xffff
c000833e:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0008343:	8d 14 00             	lea    edx,[eax+eax*1]
c0008346:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000834a:	01 d0                	add    eax,edx
c000834c:	66 8b 00             	mov    ax,WORD PTR [eax]
c000834f:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008354:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0008359:	83 c4 18             	add    esp,0x18
c000835c:	c3                   	ret    

c000835d <ff_wtoupper>:
c000835d:	83 ec 10             	sub    esp,0x10
c0008360:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0008368:	0f 87 62 01 00 00    	ja     c00084d0 <ff_wtoupper+0x173>
c000836e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008372:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008377:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c000837e:	77 07                	ja     c0008387 <ff_wtoupper+0x2a>
c0008380:	b8 80 05 02 c0       	mov    eax,0xc0020580
c0008385:	eb 05                	jmp    c000838c <ff_wtoupper+0x2f>
c0008387:	b8 c0 04 02 c0       	mov    eax,0xc00204c0
c000838c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008390:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008394:	8d 50 02             	lea    edx,[eax+0x2]
c0008397:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000839b:	66 8b 00             	mov    ax,WORD PTR [eax]
c000839e:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00083a3:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c00083a9:	0f 84 13 01 00 00    	je     c00084c2 <ff_wtoupper+0x165>
c00083af:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00083b4:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c00083b9:	0f 82 03 01 00 00    	jb     c00084c2 <ff_wtoupper+0x165>
c00083bf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083c3:	8d 50 02             	lea    edx,[eax+0x2]
c00083c6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00083ca:	66 8b 00             	mov    ax,WORD PTR [eax]
c00083cd:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c00083d2:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c00083d7:	66 c1 e8 08          	shr    ax,0x8
c00083db:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c00083e0:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c00083e7:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00083ec:	31 d2                	xor    edx,edx
c00083ee:	66 89 c2             	mov    dx,ax
c00083f1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00083f5:	31 c9                	xor    ecx,ecx
c00083f7:	66 89 c1             	mov    cx,ax
c00083fa:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c00083ff:	25 ff ff 00 00       	and    eax,0xffff
c0008404:	01 c8                	add    eax,ecx
c0008406:	39 c2                	cmp    edx,eax
c0008408:	0f 8d 92 00 00 00    	jge    c00084a0 <ff_wtoupper+0x143>
c000840e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008412:	25 ff ff 00 00       	and    eax,0xffff
c0008417:	83 f8 08             	cmp    eax,0x8
c000841a:	0f 87 a1 00 00 00    	ja     c00084c1 <ff_wtoupper+0x164>
c0008420:	8b 04 85 80 04 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdfb80]
c0008427:	ff e0                	jmp    eax
c0008429:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000842e:	31 d2                	xor    edx,edx
c0008430:	66 89 c2             	mov    dx,ax
c0008433:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008437:	25 ff ff 00 00       	and    eax,0xffff
c000843c:	29 c2                	sub    edx,eax
c000843e:	89 d0                	mov    eax,edx
c0008440:	8d 14 00             	lea    edx,[eax+eax*1]
c0008443:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008447:	01 d0                	add    eax,edx
c0008449:	66 8b 00             	mov    ax,WORD PTR [eax]
c000844c:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008451:	eb 4b                	jmp    c000849e <ff_wtoupper+0x141>
c0008453:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008458:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c000845c:	83 e0 01             	and    eax,0x1
c000845f:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c0008464:	eb 38                	jmp    c000849e <ff_wtoupper+0x141>
c0008466:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c000846c:	eb 30                	jmp    c000849e <ff_wtoupper+0x141>
c000846e:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0008474:	eb 28                	jmp    c000849e <ff_wtoupper+0x141>
c0008476:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c000847c:	eb 20                	jmp    c000849e <ff_wtoupper+0x141>
c000847e:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0008484:	eb 18                	jmp    c000849e <ff_wtoupper+0x141>
c0008486:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c000848c:	eb 10                	jmp    c000849e <ff_wtoupper+0x141>
c000848e:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c0008494:	eb 08                	jmp    c000849e <ff_wtoupper+0x141>
c0008496:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c000849d:	90                   	nop
c000849e:	eb 21                	jmp    c00084c1 <ff_wtoupper+0x164>
c00084a0:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00084a6:	0f 85 e4 fe ff ff    	jne    c0008390 <ff_wtoupper+0x33>
c00084ac:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c00084b1:	25 ff ff 00 00       	and    eax,0xffff
c00084b6:	01 c0                	add    eax,eax
c00084b8:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00084bc:	e9 cf fe ff ff       	jmp    c0008390 <ff_wtoupper+0x33>
c00084c1:	90                   	nop
c00084c2:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00084c7:	25 ff ff 00 00       	and    eax,0xffff
c00084cc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00084d0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00084d4:	83 c4 10             	add    esp,0x10
c00084d7:	c3                   	ret    

c00084d8 <is_bad_src_ratio>:
c00084d8:	83 ec 0c             	sub    esp,0xc
c00084db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084df:	89 04 24             	mov    DWORD PTR [esp],eax
c00084e2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00084e6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00084ea:	dd 04 24             	fld    QWORD PTR [esp]
c00084ed:	dd 05 40 0d 02 c0    	fld    QWORD PTR ds:0xc0020d40
c00084f3:	de d9                	fcompp 
c00084f5:	df e0                	fnstsw ax
c00084f7:	f6 c4 45             	test   ah,0x45
c00084fa:	74 10                	je     c000850c <is_bad_src_ratio+0x34>
c00084fc:	dd 04 24             	fld    QWORD PTR [esp]
c00084ff:	dc 1d 48 0d 02 c0    	fcomp  QWORD PTR ds:0xc0020d48
c0008505:	df e0                	fnstsw ax
c0008507:	f6 c4 45             	test   ah,0x45
c000850a:	75 07                	jne    c0008513 <is_bad_src_ratio+0x3b>
c000850c:	b8 01 00 00 00       	mov    eax,0x1
c0008511:	eb 05                	jmp    c0008518 <is_bad_src_ratio+0x40>
c0008513:	b8 00 00 00 00       	mov    eax,0x0
c0008518:	83 c4 0c             	add    esp,0xc
c000851b:	c3                   	ret    

c000851c <psrc_set_converter>:
c000851c:	56                   	push   esi
c000851d:	89 d6                	mov    esi,edx
c000851f:	53                   	push   ebx
c0008520:	89 c3                	mov    ebx,eax
c0008522:	83 ec 0c             	sub    esp,0xc
c0008525:	52                   	push   edx
c0008526:	50                   	push   eax
c0008527:	e8 21 24 00 00       	call   c000a94d <sinc_set_converter>
c000852c:	83 c4 10             	add    esp,0x10
c000852f:	85 c0                	test   eax,eax
c0008531:	74 25                	je     c0008558 <psrc_set_converter+0x3c>
c0008533:	50                   	push   eax
c0008534:	50                   	push   eax
c0008535:	56                   	push   esi
c0008536:	53                   	push   ebx
c0008537:	e8 1c 28 00 00       	call   c000ad58 <zoh_set_converter>
c000853c:	83 c4 10             	add    esp,0x10
c000853f:	85 c0                	test   eax,eax
c0008541:	74 15                	je     c0008558 <psrc_set_converter+0x3c>
c0008543:	51                   	push   ecx
c0008544:	51                   	push   ecx
c0008545:	56                   	push   esi
c0008546:	53                   	push   ebx
c0008547:	e8 0c 0a 00 00       	call   c0008f58 <linear_set_converter>
c000854c:	83 c4 10             	add    esp,0x10
c000854f:	ba 0a 00 00 00       	mov    edx,0xa
c0008554:	85 c0                	test   eax,eax
c0008556:	75 02                	jne    c000855a <psrc_set_converter+0x3e>
c0008558:	31 d2                	xor    edx,edx
c000855a:	89 d0                	mov    eax,edx
c000855c:	5a                   	pop    edx
c000855d:	5b                   	pop    ebx
c000855e:	5e                   	pop    esi
c000855f:	c3                   	ret    

c0008560 <src_delete>:
c0008560:	53                   	push   ebx
c0008561:	83 ec 08             	sub    esp,0x8
c0008564:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008568:	85 db                	test   ebx,ebx
c000856a:	74 29                	je     c0008595 <src_delete+0x35>
c000856c:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000856f:	85 c0                	test   eax,eax
c0008571:	74 0c                	je     c000857f <src_delete+0x1f>
c0008573:	83 ec 0c             	sub    esp,0xc
c0008576:	50                   	push   eax
c0008577:	e8 9d 3a 00 00       	call   c000c019 <free>
c000857c:	83 c4 10             	add    esp,0x10
c000857f:	50                   	push   eax
c0008580:	6a 3c                	push   0x3c
c0008582:	6a 00                	push   0x0
c0008584:	53                   	push   ebx
c0008585:	e8 30 81 ff ff       	call   c00006ba <memset>
c000858a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000858d:	e8 87 3a 00 00       	call   c000c019 <free>
c0008592:	83 c4 10             	add    esp,0x10
c0008595:	83 c4 08             	add    esp,0x8
c0008598:	31 c0                	xor    eax,eax
c000859a:	5b                   	pop    ebx
c000859b:	c3                   	ret    

c000859c <src_process>:
c000859c:	56                   	push   esi
c000859d:	53                   	push   ebx
c000859e:	53                   	push   ebx
c000859f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00085a3:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00085a7:	85 f6                	test   esi,esi
c00085a9:	0f 84 e2 00 00 00    	je     c0008691 <src_process+0xf5>
c00085af:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c00085b3:	0f 84 df 00 00 00    	je     c0008698 <src_process+0xfc>
c00085b9:	83 7e 24 00          	cmp    DWORD PTR [esi+0x24],0x0
c00085bd:	0f 84 d5 00 00 00    	je     c0008698 <src_process+0xfc>
c00085c3:	81 7e 18 2b 02 00 00 	cmp    DWORD PTR [esi+0x18],0x22b
c00085ca:	0f 85 cf 00 00 00    	jne    c000869f <src_process+0x103>
c00085d0:	85 db                	test   ebx,ebx
c00085d2:	0f 84 ce 00 00 00    	je     c00086a6 <src_process+0x10a>
c00085d8:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00085db:	0f 84 cc 00 00 00    	je     c00086ad <src_process+0x111>
c00085e1:	83 7b 04 00          	cmp    DWORD PTR [ebx+0x4],0x0
c00085e5:	0f 84 c2 00 00 00    	je     c00086ad <src_process+0x111>
c00085eb:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00085ee:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00085f1:	e8 e2 fe ff ff       	call   c00084d8 <is_bad_src_ratio>
c00085f6:	5a                   	pop    edx
c00085f7:	85 c0                	test   eax,eax
c00085f9:	59                   	pop    ecx
c00085fa:	0f 85 b4 00 00 00    	jne    c00086b4 <src_process+0x118>
c0008600:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008604:	79 07                	jns    c000860d <src_process+0x71>
c0008606:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000860d:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c0008611:	79 07                	jns    c000861a <src_process+0x7e>
c0008613:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000861a:	8b 13                	mov    edx,DWORD PTR [ebx]
c000861c:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000861f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0008622:	39 ca                	cmp    edx,ecx
c0008624:	73 0b                	jae    c0008631 <src_process+0x95>
c0008626:	0f af 43 08          	imul   eax,DWORD PTR [ebx+0x8]
c000862a:	8d 04 82             	lea    eax,[edx+eax*4]
c000862d:	39 c1                	cmp    ecx,eax
c000862f:	eb 09                	jmp    c000863a <src_process+0x9e>
c0008631:	0f af 43 0c          	imul   eax,DWORD PTR [ebx+0xc]
c0008635:	8d 04 81             	lea    eax,[ecx+eax*4]
c0008638:	39 c2                	cmp    edx,eax
c000863a:	72 7f                	jb     c00086bb <src_process+0x11f>
c000863c:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008643:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000864a:	d9 05 60 0d 02 c0    	fld    DWORD PTR ds:0xc0020d60
c0008650:	dc 1e                	fcomp  QWORD PTR [esi]
c0008652:	df e0                	fnstsw ax
c0008654:	9e                   	sahf   
c0008655:	76 05                	jbe    c000865c <src_process+0xc0>
c0008657:	dd 43 1c             	fld    QWORD PTR [ebx+0x1c]
c000865a:	dd 1e                	fstp   QWORD PTR [esi]
c000865c:	dd 06                	fld    QWORD PTR [esi]
c000865e:	dc 63 1c             	fsub   QWORD PTR [ebx+0x1c]
c0008661:	83 ec 10             	sub    esp,0x10
c0008664:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008667:	e8 84 6f 01 00       	call   c001f5f0 <fabs>
c000866c:	83 c4 10             	add    esp,0x10
c000866f:	dd 05 50 0d 02 c0    	fld    QWORD PTR ds:0xc0020d50
c0008675:	de d9                	fcompp 
c0008677:	df e0                	fnstsw ax
c0008679:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000867d:	9e                   	sahf   
c000867e:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0008682:	76 05                	jbe    c0008689 <src_process+0xed>
c0008684:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0008687:	eb 03                	jmp    c000868c <src_process+0xf0>
c0008689:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c000868c:	59                   	pop    ecx
c000868d:	5b                   	pop    ebx
c000868e:	5e                   	pop    esi
c000868f:	ff e0                	jmp    eax
c0008691:	b8 02 00 00 00       	mov    eax,0x2
c0008696:	eb 28                	jmp    c00086c0 <src_process+0x124>
c0008698:	b8 07 00 00 00       	mov    eax,0x7
c000869d:	eb 21                	jmp    c00086c0 <src_process+0x124>
c000869f:	b8 12 00 00 00       	mov    eax,0x12
c00086a4:	eb 1a                	jmp    c00086c0 <src_process+0x124>
c00086a6:	b8 03 00 00 00       	mov    eax,0x3
c00086ab:	eb 13                	jmp    c00086c0 <src_process+0x124>
c00086ad:	b8 04 00 00 00       	mov    eax,0x4
c00086b2:	eb 0c                	jmp    c00086c0 <src_process+0x124>
c00086b4:	b8 06 00 00 00       	mov    eax,0x6
c00086b9:	eb 05                	jmp    c00086c0 <src_process+0x124>
c00086bb:	b8 10 00 00 00       	mov    eax,0x10
c00086c0:	5a                   	pop    edx
c00086c1:	5b                   	pop    ebx
c00086c2:	5e                   	pop    esi
c00086c3:	c3                   	ret    

c00086c4 <src_callback_read>:
c00086c4:	55                   	push   ebp
c00086c5:	57                   	push   edi
c00086c6:	56                   	push   esi
c00086c7:	53                   	push   ebx
c00086c8:	83 ec 4c             	sub    esp,0x4c
c00086cb:	dd 44 24 64          	fld    QWORD PTR [esp+0x64]
c00086cf:	8b 7c 24 6c          	mov    edi,DWORD PTR [esp+0x6c]
c00086d3:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c00086d7:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c00086db:	85 ff                	test   edi,edi
c00086dd:	0f 8e 36 01 00 00    	jle    c0008819 <src_callback_read+0x155>
c00086e3:	85 db                	test   ebx,ebx
c00086e5:	0f 84 2e 01 00 00    	je     c0008819 <src_callback_read+0x155>
c00086eb:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c00086f2:	74 0c                	je     c0008700 <src_callback_read+0x3c>
c00086f4:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c00086fb:	e9 19 01 00 00       	jmp    c0008819 <src_callback_read+0x155>
c0008700:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c0008704:	75 0c                	jne    c0008712 <src_callback_read+0x4e>
c0008706:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c000870d:	e9 07 01 00 00       	jmp    c0008819 <src_callback_read+0x155>
c0008712:	51                   	push   ecx
c0008713:	6a 24                	push   0x24
c0008715:	6a 00                	push   0x0
c0008717:	8d 44 24 28          	lea    eax,[esp+0x28]
c000871b:	50                   	push   eax
c000871c:	e8 99 7f ff ff       	call   c00006ba <memset>
c0008721:	5e                   	pop    esi
c0008722:	5d                   	pop    ebp
c0008723:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008727:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000872b:	e8 a8 fd ff ff       	call   c00084d8 <is_bad_src_ratio>
c0008730:	83 c4 10             	add    esp,0x10
c0008733:	85 c0                	test   eax,eax
c0008735:	74 0c                	je     c0008743 <src_callback_read+0x7f>
c0008737:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c000873e:	e9 d6 00 00 00       	jmp    c0008819 <src_callback_read+0x155>
c0008743:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0008747:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000874b:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000874f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0008753:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0008756:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000875a:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000875d:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0008761:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0008765:	31 f6                	xor    esi,esi
c0008767:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000876c:	75 30                	jne    c000879e <src_callback_read+0xda>
c000876e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0008772:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008776:	52                   	push   edx
c0008777:	52                   	push   edx
c0008778:	8d 44 24 20          	lea    eax,[esp+0x20]
c000877c:	50                   	push   eax
c000877d:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008780:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c0008783:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0008787:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000878b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000878f:	83 c4 10             	add    esp,0x10
c0008792:	85 c0                	test   eax,eax
c0008794:	75 08                	jne    c000879e <src_callback_read+0xda>
c0008796:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c000879e:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c00087a5:	50                   	push   eax
c00087a6:	50                   	push   eax
c00087a7:	8d 44 24 24          	lea    eax,[esp+0x24]
c00087ab:	50                   	push   eax
c00087ac:	53                   	push   ebx
c00087ad:	e8 ea fd ff ff       	call   c000859c <src_process>
c00087b2:	83 c4 10             	add    esp,0x10
c00087b5:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c00087bc:	85 c0                	test   eax,eax
c00087be:	75 42                	jne    c0008802 <src_callback_read+0x13e>
c00087c0:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c00087c4:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00087c7:	89 e9                	mov    ecx,ebp
c00087c9:	29 6c 24 24          	sub    DWORD PTR [esp+0x24],ebp
c00087cd:	0f af ca             	imul   ecx,edx
c00087d0:	c1 e1 02             	shl    ecx,0x2
c00087d3:	01 4c 24 1c          	add    DWORD PTR [esp+0x1c],ecx
c00087d7:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00087db:	0f af d1             	imul   edx,ecx
c00087de:	c1 e2 02             	shl    edx,0x2
c00087e1:	29 4c 24 28          	sub    DWORD PTR [esp+0x28],ecx
c00087e5:	01 54 24 20          	add    DWORD PTR [esp+0x20],edx
c00087e9:	8d 14 31             	lea    edx,[ecx+esi*1]
c00087ec:	83 7c 24 34 01       	cmp    DWORD PTR [esp+0x34],0x1
c00087f1:	75 04                	jne    c00087f7 <src_callback_read+0x133>
c00087f3:	85 c9                	test   ecx,ecx
c00087f5:	74 0b                	je     c0008802 <src_callback_read+0x13e>
c00087f7:	39 d7                	cmp    edi,edx
c00087f9:	7e 09                	jle    c0008804 <src_callback_read+0x140>
c00087fb:	89 d6                	mov    esi,edx
c00087fd:	e9 65 ff ff ff       	jmp    c0008767 <src_callback_read+0xa3>
c0008802:	89 f2                	mov    edx,esi
c0008804:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0008808:	85 c0                	test   eax,eax
c000880a:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c000880d:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0008811:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008814:	74 05                	je     c000881b <src_callback_read+0x157>
c0008816:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008819:	31 d2                	xor    edx,edx
c000881b:	83 c4 4c             	add    esp,0x4c
c000881e:	89 d0                	mov    eax,edx
c0008820:	5b                   	pop    ebx
c0008821:	5e                   	pop    esi
c0008822:	5f                   	pop    edi
c0008823:	5d                   	pop    ebp
c0008824:	c3                   	ret    

c0008825 <src_set_ratio>:
c0008825:	53                   	push   ebx
c0008826:	b8 02 00 00 00       	mov    eax,0x2
c000882b:	83 ec 08             	sub    esp,0x8
c000882e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008832:	dd 44 24 14          	fld    QWORD PTR [esp+0x14]
c0008836:	85 db                	test   ebx,ebx
c0008838:	74 33                	je     c000886d <src_set_ratio+0x48>
c000883a:	b8 07 00 00 00       	mov    eax,0x7
c000883f:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008843:	74 2c                	je     c0008871 <src_set_ratio+0x4c>
c0008845:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0008849:	74 2a                	je     c0008875 <src_set_ratio+0x50>
c000884b:	50                   	push   eax
c000884c:	50                   	push   eax
c000884d:	dd 14 24             	fst    QWORD PTR [esp]
c0008850:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0008854:	e8 7f fc ff ff       	call   c00084d8 <is_bad_src_ratio>
c0008859:	5a                   	pop    edx
c000885a:	59                   	pop    ecx
c000885b:	85 c0                	test   eax,eax
c000885d:	75 07                	jne    c0008866 <src_set_ratio+0x41>
c000885f:	dd 04 24             	fld    QWORD PTR [esp]
c0008862:	dd 1b                	fstp   QWORD PTR [ebx]
c0008864:	eb 11                	jmp    c0008877 <src_set_ratio+0x52>
c0008866:	b8 06 00 00 00       	mov    eax,0x6
c000886b:	eb 0a                	jmp    c0008877 <src_set_ratio+0x52>
c000886d:	dd d8                	fstp   st(0)
c000886f:	eb 06                	jmp    c0008877 <src_set_ratio+0x52>
c0008871:	dd d8                	fstp   st(0)
c0008873:	eb 02                	jmp    c0008877 <src_set_ratio+0x52>
c0008875:	dd d8                	fstp   st(0)
c0008877:	83 c4 08             	add    esp,0x8
c000887a:	5b                   	pop    ebx
c000887b:	c3                   	ret    

c000887c <src_get_channels>:
c000887c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008880:	b8 02 00 00 00       	mov    eax,0x2
c0008885:	85 d2                	test   edx,edx
c0008887:	74 14                	je     c000889d <src_get_channels+0x21>
c0008889:	b8 07 00 00 00       	mov    eax,0x7
c000888e:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008892:	74 09                	je     c000889d <src_get_channels+0x21>
c0008894:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008898:	74 03                	je     c000889d <src_get_channels+0x21>
c000889a:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000889d:	c3                   	ret    

c000889e <src_reset>:
c000889e:	53                   	push   ebx
c000889f:	b8 02 00 00 00       	mov    eax,0x2
c00088a4:	83 ec 08             	sub    esp,0x8
c00088a7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00088ab:	85 db                	test   ebx,ebx
c00088ad:	74 2e                	je     c00088dd <src_reset+0x3f>
c00088af:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00088b2:	85 c0                	test   eax,eax
c00088b4:	74 09                	je     c00088bf <src_reset+0x21>
c00088b6:	83 ec 0c             	sub    esp,0xc
c00088b9:	53                   	push   ebx
c00088ba:	ff d0                	call   eax
c00088bc:	83 c4 10             	add    esp,0x10
c00088bf:	d9 ee                	fldz   
c00088c1:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c00088c8:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00088cf:	dd 53 08             	fst    QWORD PTR [ebx+0x8]
c00088d2:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00088d9:	31 c0                	xor    eax,eax
c00088db:	dd 1b                	fstp   QWORD PTR [ebx]
c00088dd:	83 c4 08             	add    esp,0x8
c00088e0:	5b                   	pop    ebx
c00088e1:	c3                   	ret    

c00088e2 <src_new>:
c00088e2:	57                   	push   edi
c00088e3:	56                   	push   esi
c00088e4:	53                   	push   ebx
c00088e5:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00088e9:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00088ed:	85 f6                	test   esi,esi
c00088ef:	74 73                	je     c0008964 <src_new+0x82>
c00088f1:	85 ff                	test   edi,edi
c00088f3:	7f 08                	jg     c00088fd <src_new+0x1b>
c00088f5:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c00088fb:	eb 1e                	jmp    c000891b <src_new+0x39>
c00088fd:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008903:	50                   	push   eax
c0008904:	50                   	push   eax
c0008905:	6a 3c                	push   0x3c
c0008907:	6a 01                	push   0x1
c0008909:	e8 2b 37 00 00       	call   c000c039 <calloc>
c000890e:	83 c4 10             	add    esp,0x10
c0008911:	89 c3                	mov    ebx,eax
c0008913:	85 c0                	test   eax,eax
c0008915:	75 10                	jne    c0008927 <src_new+0x45>
c0008917:	85 f6                	test   esi,esi
c0008919:	75 04                	jne    c000891f <src_new+0x3d>
c000891b:	31 db                	xor    ebx,ebx
c000891d:	eb 4b                	jmp    c000896a <src_new+0x88>
c000891f:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008925:	eb 43                	jmp    c000896a <src_new+0x88>
c0008927:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c000892a:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c0008931:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008935:	e8 e2 fb ff ff       	call   c000851c <psrc_set_converter>
c000893a:	85 c0                	test   eax,eax
c000893c:	74 18                	je     c0008956 <src_new+0x74>
c000893e:	85 f6                	test   esi,esi
c0008940:	74 06                	je     c0008948 <src_new+0x66>
c0008942:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c0008948:	83 ec 0c             	sub    esp,0xc
c000894b:	53                   	push   ebx
c000894c:	31 db                	xor    ebx,ebx
c000894e:	e8 c6 36 00 00       	call   c000c019 <free>
c0008953:	83 c4 10             	add    esp,0x10
c0008956:	83 ec 0c             	sub    esp,0xc
c0008959:	53                   	push   ebx
c000895a:	e8 3f ff ff ff       	call   c000889e <src_reset>
c000895f:	83 c4 10             	add    esp,0x10
c0008962:	eb 06                	jmp    c000896a <src_new+0x88>
c0008964:	85 ff                	test   edi,edi
c0008966:	7f 9b                	jg     c0008903 <src_new+0x21>
c0008968:	eb b1                	jmp    c000891b <src_new+0x39>
c000896a:	89 d8                	mov    eax,ebx
c000896c:	5b                   	pop    ebx
c000896d:	5e                   	pop    esi
c000896e:	5f                   	pop    edi
c000896f:	c3                   	ret    

c0008970 <src_callback_new>:
c0008970:	56                   	push   esi
c0008971:	53                   	push   ebx
c0008972:	53                   	push   ebx
c0008973:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008977:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000897b:	85 f6                	test   esi,esi
c000897d:	75 0e                	jne    c000898d <src_callback_new+0x1d>
c000897f:	31 db                	xor    ebx,ebx
c0008981:	85 c0                	test   eax,eax
c0008983:	74 47                	je     c00089cc <src_callback_new+0x5c>
c0008985:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c000898b:	eb 3f                	jmp    c00089cc <src_callback_new+0x5c>
c000898d:	85 c0                	test   eax,eax
c000898f:	74 06                	je     c0008997 <src_callback_new+0x27>
c0008991:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008997:	51                   	push   ecx
c0008998:	50                   	push   eax
c0008999:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000899d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00089a1:	e8 3c ff ff ff       	call   c00088e2 <src_new>
c00089a6:	83 c4 10             	add    esp,0x10
c00089a9:	89 c3                	mov    ebx,eax
c00089ab:	85 c0                	test   eax,eax
c00089ad:	74 1d                	je     c00089cc <src_callback_new+0x5c>
c00089af:	83 ec 0c             	sub    esp,0xc
c00089b2:	50                   	push   eax
c00089b3:	e8 e6 fe ff ff       	call   c000889e <src_reset>
c00089b8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00089bc:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c00089c3:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00089c6:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00089c9:	83 c4 10             	add    esp,0x10
c00089cc:	5a                   	pop    edx
c00089cd:	89 d8                	mov    eax,ebx
c00089cf:	5b                   	pop    ebx
c00089d0:	5e                   	pop    esi
c00089d1:	c3                   	ret    

c00089d2 <src_get_name>:
c00089d2:	53                   	push   ebx
c00089d3:	83 ec 14             	sub    esp,0x14
c00089d6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00089da:	53                   	push   ebx
c00089db:	e8 47 1f 00 00       	call   c000a927 <sinc_get_name>
c00089e0:	83 c4 10             	add    esp,0x10
c00089e3:	85 c0                	test   eax,eax
c00089e5:	75 1d                	jne    c0008a04 <src_get_name+0x32>
c00089e7:	83 ec 0c             	sub    esp,0xc
c00089ea:	53                   	push   ebx
c00089eb:	e8 4a 23 00 00       	call   c000ad3a <zoh_get_name>
c00089f0:	83 c4 10             	add    esp,0x10
c00089f3:	85 c0                	test   eax,eax
c00089f5:	75 0d                	jne    c0008a04 <src_get_name+0x32>
c00089f7:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00089fb:	83 c4 08             	add    esp,0x8
c00089fe:	5b                   	pop    ebx
c00089ff:	e9 36 05 00 00       	jmp    c0008f3a <linear_get_name>
c0008a04:	83 c4 08             	add    esp,0x8
c0008a07:	5b                   	pop    ebx
c0008a08:	c3                   	ret    

c0008a09 <src_get_description>:
c0008a09:	53                   	push   ebx
c0008a0a:	83 ec 14             	sub    esp,0x14
c0008a0d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008a11:	53                   	push   ebx
c0008a12:	e8 23 1f 00 00       	call   c000a93a <sinc_get_description>
c0008a17:	83 c4 10             	add    esp,0x10
c0008a1a:	85 c0                	test   eax,eax
c0008a1c:	75 1d                	jne    c0008a3b <src_get_description+0x32>
c0008a1e:	83 ec 0c             	sub    esp,0xc
c0008a21:	53                   	push   ebx
c0008a22:	e8 22 23 00 00       	call   c000ad49 <zoh_get_description>
c0008a27:	83 c4 10             	add    esp,0x10
c0008a2a:	85 c0                	test   eax,eax
c0008a2c:	75 0d                	jne    c0008a3b <src_get_description+0x32>
c0008a2e:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008a32:	83 c4 08             	add    esp,0x8
c0008a35:	5b                   	pop    ebx
c0008a36:	e9 0e 05 00 00       	jmp    c0008f49 <linear_get_description>
c0008a3b:	83 c4 08             	add    esp,0x8
c0008a3e:	5b                   	pop    ebx
c0008a3f:	c3                   	ret    

c0008a40 <src_get_version>:
c0008a40:	b8 80 08 02 c0       	mov    eax,0xc0020880
c0008a45:	c3                   	ret    

c0008a46 <src_is_valid_ratio>:
c0008a46:	50                   	push   eax
c0008a47:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008a4b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008a4f:	e8 84 fa ff ff       	call   c00084d8 <is_bad_src_ratio>
c0008a54:	85 c0                	test   eax,eax
c0008a56:	0f 94 c0             	sete   al
c0008a59:	0f b6 c0             	movzx  eax,al
c0008a5c:	83 c4 0c             	add    esp,0xc
c0008a5f:	c3                   	ret    

c0008a60 <src_error>:
c0008a60:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008a64:	31 c0                	xor    eax,eax
c0008a66:	85 d2                	test   edx,edx
c0008a68:	74 03                	je     c0008a6d <src_error+0xd>
c0008a6a:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008a6d:	c3                   	ret    

c0008a6e <src_strerror>:
c0008a6e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008a72:	31 c0                	xor    eax,eax
c0008a74:	83 fa 17             	cmp    edx,0x17
c0008a77:	77 07                	ja     c0008a80 <src_strerror+0x12>
c0008a79:	8b 04 95 e0 0c 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdf320]
c0008a80:	c3                   	ret    

c0008a81 <src_simple>:
c0008a81:	56                   	push   esi
c0008a82:	53                   	push   ebx
c0008a83:	83 ec 18             	sub    esp,0x18
c0008a86:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008a8a:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008a8e:	50                   	push   eax
c0008a8f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008a93:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008a97:	e8 46 fe ff ff       	call   c00088e2 <src_new>
c0008a9c:	83 c4 10             	add    esp,0x10
c0008a9f:	85 c0                	test   eax,eax
c0008aa1:	75 06                	jne    c0008aa9 <src_simple+0x28>
c0008aa3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008aa7:	eb 25                	jmp    c0008ace <src_simple+0x4d>
c0008aa9:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008ab0:	89 c3                	mov    ebx,eax
c0008ab2:	50                   	push   eax
c0008ab3:	50                   	push   eax
c0008ab4:	56                   	push   esi
c0008ab5:	53                   	push   ebx
c0008ab6:	e8 e1 fa ff ff       	call   c000859c <src_process>
c0008abb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008abe:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008ac2:	e8 99 fa ff ff       	call   c0008560 <src_delete>
c0008ac7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008acb:	83 c4 10             	add    esp,0x10
c0008ace:	83 c4 14             	add    esp,0x14
c0008ad1:	5b                   	pop    ebx
c0008ad2:	5e                   	pop    esi
c0008ad3:	c3                   	ret    

c0008ad4 <src_short_to_float_array>:
c0008ad4:	83 ec 0c             	sub    esp,0xc
c0008ad7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008adb:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008adf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008ae3:	85 c0                	test   eax,eax
c0008ae5:	74 0f                	je     c0008af6 <src_short_to_float_array+0x22>
c0008ae7:	48                   	dec    eax
c0008ae8:	d9 05 64 0d 02 c0    	fld    DWORD PTR ds:0xc0020d64
c0008aee:	de 0c 42             	fimul  WORD PTR [edx+eax*2]
c0008af1:	d9 1c 81             	fstp   DWORD PTR [ecx+eax*4]
c0008af4:	eb ed                	jmp    c0008ae3 <src_short_to_float_array+0xf>
c0008af6:	83 c4 0c             	add    esp,0xc
c0008af9:	c3                   	ret    

c0008afa <src_float_to_short_array>:
c0008afa:	56                   	push   esi
c0008afb:	53                   	push   ebx
c0008afc:	52                   	push   edx
c0008afd:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008b01:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008b05:	85 db                	test   ebx,ebx
c0008b07:	74 51                	je     c0008b5a <src_float_to_short_array+0x60>
c0008b09:	4b                   	dec    ebx
c0008b0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b0e:	d9 05 68 0d 02 c0    	fld    DWORD PTR ds:0xc0020d68
c0008b14:	d8 0c 98             	fmul   DWORD PTR [eax+ebx*4]
c0008b17:	dc 15 58 0d 02 c0    	fcom   QWORD PTR ds:0xc0020d58
c0008b1d:	df e0                	fnstsw ax
c0008b1f:	9e                   	sahf   
c0008b20:	72 0a                	jb     c0008b2c <src_float_to_short_array+0x32>
c0008b22:	dd d8                	fstp   st(0)
c0008b24:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008b2a:	eb d9                	jmp    c0008b05 <src_float_to_short_array+0xb>
c0008b2c:	d9 05 6c 0d 02 c0    	fld    DWORD PTR ds:0xc0020d6c
c0008b32:	d8 d9                	fcomp  st(1)
c0008b34:	df e0                	fnstsw ax
c0008b36:	9e                   	sahf   
c0008b37:	72 0a                	jb     c0008b43 <src_float_to_short_array+0x49>
c0008b39:	dd d8                	fstp   st(0)
c0008b3b:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008b41:	eb c2                	jmp    c0008b05 <src_float_to_short_array+0xb>
c0008b43:	83 ec 10             	sub    esp,0x10
c0008b46:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008b49:	e8 c2 6a 01 00       	call   c001f610 <lrint>
c0008b4e:	83 c4 10             	add    esp,0x10
c0008b51:	c1 f8 10             	sar    eax,0x10
c0008b54:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008b58:	eb ab                	jmp    c0008b05 <src_float_to_short_array+0xb>
c0008b5a:	58                   	pop    eax
c0008b5b:	5b                   	pop    ebx
c0008b5c:	5e                   	pop    esi
c0008b5d:	c3                   	ret    

c0008b5e <src_int_to_float_array>:
c0008b5e:	83 ec 0c             	sub    esp,0xc
c0008b61:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008b65:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008b69:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008b6d:	85 c0                	test   eax,eax
c0008b6f:	74 0f                	je     c0008b80 <src_int_to_float_array+0x22>
c0008b71:	48                   	dec    eax
c0008b72:	d9 05 70 0d 02 c0    	fld    DWORD PTR ds:0xc0020d70
c0008b78:	da 0c 82             	fimul  DWORD PTR [edx+eax*4]
c0008b7b:	d9 1c 81             	fstp   DWORD PTR [ecx+eax*4]
c0008b7e:	eb ed                	jmp    c0008b6d <src_int_to_float_array+0xf>
c0008b80:	83 c4 0c             	add    esp,0xc
c0008b83:	c3                   	ret    

c0008b84 <src_float_to_int_array>:
c0008b84:	56                   	push   esi
c0008b85:	53                   	push   ebx
c0008b86:	52                   	push   edx
c0008b87:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008b8b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008b8f:	85 db                	test   ebx,ebx
c0008b91:	74 4f                	je     c0008be2 <src_float_to_int_array+0x5e>
c0008b93:	4b                   	dec    ebx
c0008b94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b98:	d9 05 68 0d 02 c0    	fld    DWORD PTR ds:0xc0020d68
c0008b9e:	d8 0c 98             	fmul   DWORD PTR [eax+ebx*4]
c0008ba1:	dc 15 58 0d 02 c0    	fcom   QWORD PTR ds:0xc0020d58
c0008ba7:	df e0                	fnstsw ax
c0008ba9:	9e                   	sahf   
c0008baa:	72 0b                	jb     c0008bb7 <src_float_to_int_array+0x33>
c0008bac:	dd d8                	fstp   st(0)
c0008bae:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008bb5:	eb d8                	jmp    c0008b8f <src_float_to_int_array+0xb>
c0008bb7:	d9 05 6c 0d 02 c0    	fld    DWORD PTR ds:0xc0020d6c
c0008bbd:	d8 d9                	fcomp  st(1)
c0008bbf:	df e0                	fnstsw ax
c0008bc1:	9e                   	sahf   
c0008bc2:	72 0b                	jb     c0008bcf <src_float_to_int_array+0x4b>
c0008bc4:	dd d8                	fstp   st(0)
c0008bc6:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008bcd:	eb c0                	jmp    c0008b8f <src_float_to_int_array+0xb>
c0008bcf:	83 ec 10             	sub    esp,0x10
c0008bd2:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008bd5:	e8 36 6a 01 00       	call   c001f610 <lrint>
c0008bda:	83 c4 10             	add    esp,0x10
c0008bdd:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0008be0:	eb ad                	jmp    c0008b8f <src_float_to_int_array+0xb>
c0008be2:	58                   	pop    eax
c0008be3:	5b                   	pop    ebx
c0008be4:	5e                   	pop    esi
c0008be5:	c3                   	ret    

c0008be6 <is_bad_src_ratio>:
c0008be6:	83 ec 0c             	sub    esp,0xc
c0008be9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bed:	89 04 24             	mov    DWORD PTR [esp],eax
c0008bf0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008bf4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008bf8:	dd 04 24             	fld    QWORD PTR [esp]
c0008bfb:	dd 05 40 0d 02 c0    	fld    QWORD PTR ds:0xc0020d40
c0008c01:	de d9                	fcompp 
c0008c03:	df e0                	fnstsw ax
c0008c05:	f6 c4 45             	test   ah,0x45
c0008c08:	74 10                	je     c0008c1a <is_bad_src_ratio+0x34>
c0008c0a:	dd 04 24             	fld    QWORD PTR [esp]
c0008c0d:	dc 1d 48 0d 02 c0    	fcomp  QWORD PTR ds:0xc0020d48
c0008c13:	df e0                	fnstsw ax
c0008c15:	f6 c4 45             	test   ah,0x45
c0008c18:	75 07                	jne    c0008c21 <is_bad_src_ratio+0x3b>
c0008c1a:	b8 01 00 00 00       	mov    eax,0x1
c0008c1f:	eb 05                	jmp    c0008c26 <is_bad_src_ratio+0x40>
c0008c21:	b8 00 00 00 00       	mov    eax,0x0
c0008c26:	83 c4 0c             	add    esp,0xc
c0008c29:	c3                   	ret    

c0008c2a <fmod_one>:
c0008c2a:	83 ec 2c             	sub    esp,0x2c
c0008c2d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008c31:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008c35:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0008c39:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008c3d:	83 ec 08             	sub    esp,0x8
c0008c40:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c44:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c48:	e8 c3 69 01 00       	call   c001f610 <lrint>
c0008c4d:	83 c4 10             	add    esp,0x10
c0008c50:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008c54:	db 44 24 04          	fild   DWORD PTR [esp+0x4]
c0008c58:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008c5c:	de e1                	fsubrp st(1),st
c0008c5e:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0008c62:	d9 ee                	fldz   
c0008c64:	dc 5c 24 18          	fcomp  QWORD PTR [esp+0x18]
c0008c68:	df e0                	fnstsw ax
c0008c6a:	f6 c4 45             	test   ah,0x45
c0008c6d:	75 0a                	jne    c0008c79 <fmod_one+0x4f>
c0008c6f:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0008c73:	d9 e8                	fld1   
c0008c75:	de c1                	faddp  st(1),st
c0008c77:	eb 04                	jmp    c0008c7d <fmod_one+0x53>
c0008c79:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0008c7d:	83 c4 2c             	add    esp,0x2c
c0008c80:	c3                   	ret    

c0008c81 <linear_vari_process>:
c0008c81:	55                   	push   ebp
c0008c82:	57                   	push   edi
c0008c83:	56                   	push   esi
c0008c84:	53                   	push   ebx
c0008c85:	83 ec 2c             	sub    esp,0x2c
c0008c88:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0008c8c:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0008c90:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0008c98:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0008c9c:	0f 8e 5a 02 00 00    	jle    c0008efc <linear_vari_process+0x27b>
c0008ca2:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c0008ca5:	c7 44 24 18 05 00 00 00 	mov    DWORD PTR [esp+0x18],0x5
c0008cad:	85 db                	test   ebx,ebx
c0008caf:	0f 84 47 02 00 00    	je     c0008efc <linear_vari_process+0x27b>
c0008cb5:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0008cb8:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008cbc:	74 19                	je     c0008cd7 <linear_vari_process+0x56>
c0008cbe:	31 d2                	xor    edx,edx
c0008cc0:	39 c2                	cmp    edx,eax
c0008cc2:	7d 0c                	jge    c0008cd0 <linear_vari_process+0x4f>
c0008cc4:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0008cc6:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c0008cc9:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c0008ccd:	42                   	inc    edx
c0008cce:	eb f0                	jmp    c0008cc0 <linear_vari_process+0x3f>
c0008cd0:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008cd7:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0008cda:	0f af d0             	imul   edx,eax
c0008cdd:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008ce0:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0008ce4:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0008ceb:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0008cee:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008cf5:	dd 07                	fld    QWORD PTR [edi]
c0008cf7:	dd 14 24             	fst    QWORD PTR [esp]
c0008cfa:	50                   	push   eax
c0008cfb:	50                   	push   eax
c0008cfc:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008cff:	e8 e2 fe ff ff       	call   c0008be6 <is_bad_src_ratio>
c0008d04:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0008d08:	5a                   	pop    edx
c0008d09:	59                   	pop    ecx
c0008d0a:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0008d0f:	0f 85 df 01 00 00    	jne    c0008ef4 <linear_vari_process+0x273>
c0008d15:	dd 47 08             	fld    QWORD PTR [edi+0x8]
c0008d18:	d9 e8                	fld1   
c0008d1a:	d8 d1                	fcom   st(1)
c0008d1c:	df e0                	fnstsw ax
c0008d1e:	9e                   	sahf   
c0008d1f:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0008d23:	0f 86 97 00 00 00    	jbe    c0008dc0 <linear_vari_process+0x13f>
c0008d29:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008d2c:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0008d2f:	0f 8d 8b 00 00 00    	jge    c0008dc0 <linear_vari_process+0x13f>
c0008d35:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008d39:	d8 c1                	fadd   st,st(1)
c0008d3b:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c0008d3e:	da 43 10             	fiadd  DWORD PTR [ebx+0x10]
c0008d41:	da 5b 0c             	ficomp DWORD PTR [ebx+0xc]
c0008d44:	df e0                	fnstsw ax
c0008d46:	9e                   	sahf   
c0008d47:	73 77                	jae    c0008dc0 <linear_vari_process+0x13f>
c0008d49:	85 d2                	test   edx,edx
c0008d4b:	7e 36                	jle    c0008d83 <linear_vari_process+0x102>
c0008d4d:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0008d51:	dd 07                	fld    QWORD PTR [edi]
c0008d53:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c0008d56:	83 ec 10             	sub    esp,0x10
c0008d59:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008d5c:	e8 8f 68 01 00       	call   c001f5f0 <fabs>
c0008d61:	83 c4 10             	add    esp,0x10
c0008d64:	dc 1d b8 0d 02 c0    	fcomp  QWORD PTR ds:0xc0020db8
c0008d6a:	df e0                	fnstsw ax
c0008d6c:	9e                   	sahf   
c0008d6d:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0008d71:	76 10                	jbe    c0008d83 <linear_vari_process+0x102>
c0008d73:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c0008d76:	dc 27                	fsub   QWORD PTR [edi]
c0008d78:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c0008d7b:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c0008d7e:	dc 07                	fadd   QWORD PTR [edi]
c0008d80:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008d83:	31 c0                	xor    eax,eax
c0008d85:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c0008d88:	7e 1f                	jle    c0008da9 <linear_vari_process+0x128>
c0008d8a:	8b 2e                	mov    ebp,DWORD PTR [esi]
c0008d8c:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0008d8f:	d9 44 83 1c          	fld    DWORD PTR [ebx+eax*4+0x1c]
c0008d93:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0008d97:	d8 e1                	fsub   st,st(1)
c0008d99:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0008d9c:	40                   	inc    eax
c0008d9d:	d8 ca                	fmul   st,st(2)
c0008d9f:	de c1                	faddp  st(1),st
c0008da1:	d9 1c 8a             	fstp   DWORD PTR [edx+ecx*4]
c0008da4:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0008da7:	eb dc                	jmp    c0008d85 <linear_vari_process+0x104>
c0008da9:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008dad:	dc 34 24             	fdiv   QWORD PTR [esp]
c0008db0:	de c1                	faddp  st(1),st
c0008db2:	e9 61 ff ff ff       	jmp    c0008d18 <linear_vari_process+0x97>
c0008db7:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008dbb:	dc 34 24             	fdiv   QWORD PTR [esp]
c0008dbe:	de c1                	faddp  st(1),st
c0008dc0:	83 ec 10             	sub    esp,0x10
c0008dc3:	dd 14 24             	fst    QWORD PTR [esp]
c0008dc6:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0008dca:	e8 5b fe ff ff       	call   c0008c2a <fmod_one>
c0008dcf:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0008dd2:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0008dd6:	d8 e1                	fsub   st,st(1)
c0008dd8:	d9 c9                	fxch   st(1)
c0008dda:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0008dde:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008de1:	e8 2a 68 01 00       	call   c001f610 <lrint>
c0008de6:	83 c4 10             	add    esp,0x10
c0008de9:	0f af e8             	imul   ebp,eax
c0008dec:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c0008def:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c0008df2:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0008df6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0008df9:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c0008dfc:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c0008dff:	0f 8d 95 00 00 00    	jge    c0008e9a <linear_vari_process+0x219>
c0008e05:	d9 c0                	fld    st(0)
c0008e07:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c0008e0a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0008e0e:	da 44 24 10          	fiadd  DWORD PTR [esp+0x10]
c0008e12:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0008e16:	db 44 24 10          	fild   DWORD PTR [esp+0x10]
c0008e1a:	de d9                	fcompp 
c0008e1c:	df e0                	fnstsw ax
c0008e1e:	9e                   	sahf   
c0008e1f:	76 79                	jbe    c0008e9a <linear_vari_process+0x219>
c0008e21:	85 ed                	test   ebp,ebp
c0008e23:	7e 36                	jle    c0008e5b <linear_vari_process+0x1da>
c0008e25:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0008e29:	dd 07                	fld    QWORD PTR [edi]
c0008e2b:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c0008e2e:	83 ec 10             	sub    esp,0x10
c0008e31:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008e34:	e8 b7 67 01 00       	call   c001f5f0 <fabs>
c0008e39:	83 c4 10             	add    esp,0x10
c0008e3c:	dc 1d b8 0d 02 c0    	fcomp  QWORD PTR ds:0xc0020db8
c0008e42:	df e0                	fnstsw ax
c0008e44:	9e                   	sahf   
c0008e45:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0008e49:	76 10                	jbe    c0008e5b <linear_vari_process+0x1da>
c0008e4b:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c0008e4e:	dc 27                	fsub   QWORD PTR [edi]
c0008e50:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c0008e53:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c0008e56:	dc 07                	fadd   QWORD PTR [edi]
c0008e58:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008e5b:	31 c0                	xor    eax,eax
c0008e5d:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0008e60:	39 c2                	cmp    edx,eax
c0008e62:	0f 8e 4f ff ff ff    	jle    c0008db7 <linear_vari_process+0x136>
c0008e68:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0008e6a:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0008e6d:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0008e71:	89 e9                	mov    ecx,ebp
c0008e73:	29 d1                	sub    ecx,edx
c0008e75:	01 c5                	add    ebp,eax
c0008e77:	89 ca                	mov    edx,ecx
c0008e79:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008e7d:	01 c2                	add    edx,eax
c0008e7f:	40                   	inc    eax
c0008e80:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c0008e83:	d9 04 a9             	fld    DWORD PTR [ecx+ebp*4]
c0008e86:	d8 e1                	fsub   st,st(1)
c0008e88:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0008e8b:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0008e8e:	d8 ca                	fmul   st,st(2)
c0008e90:	de c1                	faddp  st(1),st
c0008e92:	d9 1c 91             	fstp   DWORD PTR [ecx+edx*4]
c0008e95:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0008e98:	eb c3                	jmp    c0008e5d <linear_vari_process+0x1dc>
c0008e9a:	39 d1                	cmp    ecx,edx
c0008e9c:	7d 13                	jge    c0008eb1 <linear_vari_process+0x230>
c0008e9e:	89 d0                	mov    eax,edx
c0008ea0:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0008ea3:	29 c8                	sub    eax,ecx
c0008ea5:	99                   	cdq    
c0008ea6:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0008ea9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008ead:	da 44 24 08          	fiadd  DWORD PTR [esp+0x8]
c0008eb1:	dd 5f 08             	fstp   QWORD PTR [edi+0x8]
c0008eb4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0008eb7:	85 c0                	test   eax,eax
c0008eb9:	7f 1b                	jg     c0008ed6 <linear_vari_process+0x255>
c0008ebb:	dd 04 24             	fld    QWORD PTR [esp]
c0008ebe:	dd 1f                	fstp   QWORD PTR [edi]
c0008ec0:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0008ec3:	99                   	cdq    
c0008ec4:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0008ec7:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0008eca:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008ecd:	99                   	cdq    
c0008ece:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0008ed1:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0008ed4:	eb 26                	jmp    c0008efc <linear_vari_process+0x27b>
c0008ed6:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c0008ed9:	31 d2                	xor    edx,edx
c0008edb:	29 c8                	sub    eax,ecx
c0008edd:	c1 e0 02             	shl    eax,0x2
c0008ee0:	39 d1                	cmp    ecx,edx
c0008ee2:	7e d7                	jle    c0008ebb <linear_vari_process+0x23a>
c0008ee4:	8b 2e                	mov    ebp,DWORD PTR [esi]
c0008ee6:	d9 44 05 00          	fld    DWORD PTR [ebp+eax*1+0x0]
c0008eea:	83 c0 04             	add    eax,0x4
c0008eed:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c0008ef1:	42                   	inc    edx
c0008ef2:	eb ec                	jmp    c0008ee0 <linear_vari_process+0x25f>
c0008ef4:	c7 44 24 18 16 00 00 00 	mov    DWORD PTR [esp+0x18],0x16
c0008efc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008f00:	83 c4 2c             	add    esp,0x2c
c0008f03:	5b                   	pop    ebx
c0008f04:	5e                   	pop    esi
c0008f05:	5f                   	pop    edi
c0008f06:	5d                   	pop    ebp
c0008f07:	c3                   	ret    

c0008f08 <linear_reset>:
c0008f08:	83 ec 0c             	sub    esp,0xc
c0008f0b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008f0f:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0008f12:	85 c0                	test   eax,eax
c0008f14:	74 20                	je     c0008f36 <linear_reset+0x2e>
c0008f16:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c0008f19:	c7 40 08 01 00 00 00 	mov    DWORD PTR [eax+0x8],0x1
c0008f20:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008f23:	51                   	push   ecx
c0008f24:	c1 e2 02             	shl    edx,0x2
c0008f27:	83 c0 1c             	add    eax,0x1c
c0008f2a:	52                   	push   edx
c0008f2b:	6a 00                	push   0x0
c0008f2d:	50                   	push   eax
c0008f2e:	e8 87 77 ff ff       	call   c00006ba <memset>
c0008f33:	83 c4 10             	add    esp,0x10
c0008f36:	83 c4 0c             	add    esp,0xc
c0008f39:	c3                   	ret    

c0008f3a <linear_get_name>:
c0008f3a:	31 c0                	xor    eax,eax
c0008f3c:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0008f41:	75 05                	jne    c0008f48 <linear_get_name+0xe>
c0008f43:	b8 74 0d 02 c0       	mov    eax,0xc0020d74
c0008f48:	c3                   	ret    

c0008f49 <linear_get_description>:
c0008f49:	31 c0                	xor    eax,eax
c0008f4b:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0008f50:	75 05                	jne    c0008f57 <linear_get_description+0xe>
c0008f52:	b8 88 0d 02 c0       	mov    eax,0xc0020d88
c0008f57:	c3                   	ret    

c0008f58 <linear_set_converter>:
c0008f58:	53                   	push   ebx
c0008f59:	b8 0a 00 00 00       	mov    eax,0xa
c0008f5e:	83 ec 08             	sub    esp,0x8
c0008f61:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008f65:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c0008f6a:	75 6e                	jne    c0008fda <linear_set_converter+0x82>
c0008f6c:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0008f6f:	85 c0                	test   eax,eax
c0008f71:	74 13                	je     c0008f86 <linear_set_converter+0x2e>
c0008f73:	83 ec 0c             	sub    esp,0xc
c0008f76:	50                   	push   eax
c0008f77:	e8 9d 30 00 00       	call   c000c019 <free>
c0008f7c:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0008f83:	83 c4 10             	add    esp,0x10
c0008f86:	50                   	push   eax
c0008f87:	50                   	push   eax
c0008f88:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008f8b:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0008f92:	50                   	push   eax
c0008f93:	6a 01                	push   0x1
c0008f95:	e8 9f 30 00 00       	call   c000c039 <calloc>
c0008f9a:	89 c2                	mov    edx,eax
c0008f9c:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0008f9f:	83 c4 10             	add    esp,0x10
c0008fa2:	b8 01 00 00 00       	mov    eax,0x1
c0008fa7:	85 d2                	test   edx,edx
c0008fa9:	74 2f                	je     c0008fda <linear_set_converter+0x82>
c0008fab:	83 ec 0c             	sub    esp,0xc
c0008fae:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008fb1:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0008fb4:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c0008fba:	c7 43 24 81 8c 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0008c81
c0008fc1:	c7 43 20 81 8c 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0008c81
c0008fc8:	c7 43 28 08 8f 00 c0 	mov    DWORD PTR [ebx+0x28],0xc0008f08
c0008fcf:	53                   	push   ebx
c0008fd0:	e8 33 ff ff ff       	call   c0008f08 <linear_reset>
c0008fd5:	83 c4 10             	add    esp,0x10
c0008fd8:	31 c0                	xor    eax,eax
c0008fda:	83 c4 08             	add    esp,0x8
c0008fdd:	5b                   	pop    ebx
c0008fde:	c3                   	ret    

c0008fdf <is_bad_src_ratio>:
c0008fdf:	83 ec 0c             	sub    esp,0xc
c0008fe2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008fe6:	89 04 24             	mov    DWORD PTR [esp],eax
c0008fe9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008fed:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008ff1:	dd 04 24             	fld    QWORD PTR [esp]
c0008ff4:	dd 05 40 0d 02 c0    	fld    QWORD PTR ds:0xc0020d40
c0008ffa:	de d9                	fcompp 
c0008ffc:	df e0                	fnstsw ax
c0008ffe:	f6 c4 45             	test   ah,0x45
c0009001:	74 10                	je     c0009013 <is_bad_src_ratio+0x34>
c0009003:	dd 04 24             	fld    QWORD PTR [esp]
c0009006:	dc 1d 48 0d 02 c0    	fcomp  QWORD PTR ds:0xc0020d48
c000900c:	df e0                	fnstsw ax
c000900e:	f6 c4 45             	test   ah,0x45
c0009011:	75 07                	jne    c000901a <is_bad_src_ratio+0x3b>
c0009013:	b8 01 00 00 00       	mov    eax,0x1
c0009018:	eb 05                	jmp    c000901f <is_bad_src_ratio+0x40>
c000901a:	b8 00 00 00 00       	mov    eax,0x0
c000901f:	83 c4 0c             	add    esp,0xc
c0009022:	c3                   	ret    

c0009023 <int_to_fp>:
c0009023:	c1 e0 0c             	shl    eax,0xc
c0009026:	c3                   	ret    

c0009027 <fp_to_int>:
c0009027:	c1 f8 0c             	sar    eax,0xc
c000902a:	c3                   	ret    

c000902b <fp_fraction_part>:
c000902b:	25 ff 0f 00 00       	and    eax,0xfff
c0009030:	c3                   	ret    

c0009031 <fp_to_double>:
c0009031:	83 ec 0c             	sub    esp,0xc
c0009034:	e8 f2 ff ff ff       	call   c000902b <fp_fraction_part>
c0009039:	d9 05 48 0f 02 c0    	fld    DWORD PTR ds:0xc0020f48
c000903f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009043:	da 4c 24 04          	fimul  DWORD PTR [esp+0x4]
c0009047:	83 c4 0c             	add    esp,0xc
c000904a:	c3                   	ret    

c000904b <calc_output_single>:
c000904b:	55                   	push   ebp
c000904c:	57                   	push   edi
c000904d:	89 c7                	mov    edi,eax
c000904f:	56                   	push   esi
c0009050:	53                   	push   ebx
c0009051:	89 d3                	mov    ebx,edx
c0009053:	83 ec 24             	sub    esp,0x24
c0009056:	89 de                	mov    esi,ebx
c0009058:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000905b:	e8 c3 ff ff ff       	call   c0009023 <int_to_fp>
c0009060:	8b 6f 30             	mov    ebp,DWORD PTR [edi+0x30]
c0009063:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009067:	29 c8                	sub    eax,ecx
c0009069:	99                   	cdq    
c000906a:	f7 fb                	idiv   ebx
c000906c:	0f af f0             	imul   esi,eax
c000906f:	8b 57 34             	mov    edx,DWORD PTR [edi+0x34]
c0009072:	01 ce                	add    esi,ecx
c0009074:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009078:	29 c2                	sub    edx,eax
c000907a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0009081:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0009089:	8d 14 97             	lea    edx,[edi+edx*4]
c000908c:	89 f0                	mov    eax,esi
c000908e:	e8 9e ff ff ff       	call   c0009031 <fp_to_double>
c0009093:	89 f0                	mov    eax,esi
c0009095:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009099:	e8 89 ff ff ff       	call   c0009027 <fp_to_int>
c000909e:	83 c2 04             	add    edx,0x4
c00090a1:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c00090a5:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c00090a9:	d8 e1                	fsub   st,st(1)
c00090ab:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00090af:	de c9                	fmulp  st(1),st
c00090b1:	de c1                	faddp  st(1),st
c00090b3:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c00090b9:	29 de                	sub    esi,ebx
c00090bb:	dc 04 24             	fadd   QWORD PTR [esp]
c00090be:	dd 1c 24             	fstp   QWORD PTR [esp]
c00090c1:	79 c9                	jns    c000908c <calc_output_single+0x41>
c00090c3:	89 d8                	mov    eax,ebx
c00090c5:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00090c9:	29 c8                	sub    eax,ecx
c00090cb:	89 c1                	mov    ecx,eax
c00090cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090d1:	29 c8                	sub    eax,ecx
c00090d3:	99                   	cdq    
c00090d4:	f7 fb                	idiv   ebx
c00090d6:	89 da                	mov    edx,ebx
c00090d8:	0f af d0             	imul   edx,eax
c00090db:	8d 44 06 01          	lea    eax,[esi+eax*1+0x1]
c00090df:	01 d1                	add    ecx,edx
c00090e1:	d9 ee                	fldz   
c00090e3:	8d 14 87             	lea    edx,[edi+eax*4]
c00090e6:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c00090ea:	89 c8                	mov    eax,ecx
c00090ec:	e8 40 ff ff ff       	call   c0009031 <fp_to_double>
c00090f1:	89 c8                	mov    eax,ecx
c00090f3:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c00090f7:	e8 2b ff ff ff       	call   c0009027 <fp_to_int>
c00090fc:	29 d9                	sub    ecx,ebx
c00090fe:	83 ea 04             	sub    edx,0x4
c0009101:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0009105:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009109:	d8 e1                	fsub   st,st(1)
c000910b:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000910f:	de c9                	fmulp  st(1),st
c0009111:	de c1                	faddp  st(1),st
c0009113:	d8 8a 48 08 00 00    	fmul   DWORD PTR [edx+0x848]
c0009119:	85 c9                	test   ecx,ecx
c000911b:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000911f:	de c1                	faddp  st(1),st
c0009121:	7f c3                	jg     c00090e6 <calc_output_single+0x9b>
c0009123:	dd 04 24             	fld    QWORD PTR [esp]
c0009126:	de c1                	faddp  st(1),st
c0009128:	83 c4 24             	add    esp,0x24
c000912b:	5b                   	pop    ebx
c000912c:	5e                   	pop    esi
c000912d:	5f                   	pop    edi
c000912e:	5d                   	pop    ebp
c000912f:	c3                   	ret    

c0009130 <calc_output_stereo>:
c0009130:	55                   	push   ebp
c0009131:	57                   	push   edi
c0009132:	89 c7                	mov    edi,eax
c0009134:	56                   	push   esi
c0009135:	53                   	push   ebx
c0009136:	89 d3                	mov    ebx,edx
c0009138:	83 ec 44             	sub    esp,0x44
c000913b:	89 de                	mov    esi,ebx
c000913d:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0009140:	dd 44 24 58          	fld    QWORD PTR [esp+0x58]
c0009144:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0009148:	e8 d6 fe ff ff       	call   c0009023 <int_to_fp>
c000914d:	8b 6f 30             	mov    ebp,DWORD PTR [edi+0x30]
c0009150:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009154:	29 c8                	sub    eax,ecx
c0009156:	99                   	cdq    
c0009157:	f7 fb                	idiv   ebx
c0009159:	8b 57 34             	mov    edx,DWORD PTR [edi+0x34]
c000915c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0009164:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009168:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000916b:	0f af f0             	imul   esi,eax
c000916e:	0f af c2             	imul   eax,edx
c0009171:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0009175:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009179:	d9 ee                	fldz   
c000917b:	29 c2                	sub    edx,eax
c000917d:	01 ce                	add    esi,ecx
c000917f:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009182:	8d 14 97             	lea    edx,[edi+edx*4]
c0009185:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000918d:	89 f0                	mov    eax,esi
c000918f:	e8 9d fe ff ff       	call   c0009031 <fp_to_double>
c0009194:	89 f0                	mov    eax,esi
c0009196:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000919a:	e8 88 fe ff ff       	call   c0009027 <fp_to_int>
c000919f:	83 c2 08             	add    edx,0x8
c00091a2:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c00091a6:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c00091aa:	d8 e1                	fsub   st,st(1)
c00091ac:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c00091b0:	de c9                	fmulp  st(1),st
c00091b2:	de c1                	faddp  st(1),st
c00091b4:	d9 c0                	fld    st(0)
c00091b6:	d8 8a 3c 08 00 00    	fmul   DWORD PTR [edx+0x83c]
c00091bc:	dc 04 24             	fadd   QWORD PTR [esp]
c00091bf:	dd 1c 24             	fstp   QWORD PTR [esp]
c00091c2:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c00091c8:	29 de                	sub    esi,ebx
c00091ca:	dc 44 24 08          	fadd   QWORD PTR [esp+0x8]
c00091ce:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c00091d2:	79 b9                	jns    c000918d <calc_output_stereo+0x5d>
c00091d4:	89 d8                	mov    eax,ebx
c00091d6:	29 c8                	sub    eax,ecx
c00091d8:	89 c1                	mov    ecx,eax
c00091da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00091de:	29 c8                	sub    eax,ecx
c00091e0:	99                   	cdq    
c00091e1:	f7 fb                	idiv   ebx
c00091e3:	89 da                	mov    edx,ebx
c00091e5:	0f af d0             	imul   edx,eax
c00091e8:	40                   	inc    eax
c00091e9:	01 d1                	add    ecx,edx
c00091eb:	0f af 44 24 18       	imul   eax,DWORD PTR [esp+0x18]
c00091f0:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c00091f4:	d9 ee                	fldz   
c00091f6:	d9 ee                	fldz   
c00091f8:	8d 14 87             	lea    edx,[edi+eax*4]
c00091fb:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c00091ff:	89 c8                	mov    eax,ecx
c0009201:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009205:	e8 27 fe ff ff       	call   c0009031 <fp_to_double>
c000920a:	89 c8                	mov    eax,ecx
c000920c:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009210:	e8 12 fe ff ff       	call   c0009027 <fp_to_int>
c0009215:	29 d9                	sub    ecx,ebx
c0009217:	83 ea 08             	sub    edx,0x8
c000921a:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c000921e:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009222:	d8 e1                	fsub   st,st(1)
c0009224:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0009228:	de c9                	fmulp  st(1),st
c000922a:	de c1                	faddp  st(1),st
c000922c:	d9 c0                	fld    st(0)
c000922e:	d8 8a 4c 08 00 00    	fmul   DWORD PTR [edx+0x84c]
c0009234:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0009238:	de c1                	faddp  st(1),st
c000923a:	d9 c9                	fxch   st(1)
c000923c:	d8 8a 50 08 00 00    	fmul   DWORD PTR [edx+0x850]
c0009242:	85 c9                	test   ecx,ecx
c0009244:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0009248:	de c1                	faddp  st(1),st
c000924a:	7f af                	jg     c00091fb <calc_output_stereo+0xcb>
c000924c:	dd 04 24             	fld    QWORD PTR [esp]
c000924f:	de c2                	faddp  st(2),st
c0009251:	d9 c9                	fxch   st(1)
c0009253:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0009257:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000925b:	d9 18                	fstp   DWORD PTR [eax]
c000925d:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009261:	de c1                	faddp  st(1),st
c0009263:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c0009267:	d9 58 04             	fstp   DWORD PTR [eax+0x4]
c000926a:	83 c4 44             	add    esp,0x44
c000926d:	5b                   	pop    ebx
c000926e:	5e                   	pop    esi
c000926f:	5f                   	pop    edi
c0009270:	5d                   	pop    ebp
c0009271:	c3                   	ret    

c0009272 <calc_output_quad>:
c0009272:	55                   	push   ebp
c0009273:	57                   	push   edi
c0009274:	56                   	push   esi
c0009275:	89 c6                	mov    esi,eax
c0009277:	53                   	push   ebx
c0009278:	89 d3                	mov    ebx,edx
c000927a:	83 ec 5c             	sub    esp,0x5c
c000927d:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0009280:	dd 44 24 70          	fld    QWORD PTR [esp+0x70]
c0009284:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0009288:	dd 1c 24             	fstp   QWORD PTR [esp]
c000928b:	e8 93 fd ff ff       	call   c0009023 <int_to_fp>
c0009290:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009293:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009297:	29 c8                	sub    eax,ecx
c0009299:	99                   	cdq    
c000929a:	f7 fb                	idiv   ebx
c000929c:	89 da                	mov    edx,ebx
c000929e:	0f af d0             	imul   edx,eax
c00092a1:	01 ca                	add    edx,ecx
c00092a3:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00092a7:	8b 56 34             	mov    edx,DWORD PTR [esi+0x34]
c00092aa:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00092ae:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c00092b1:	0f af c2             	imul   eax,edx
c00092b4:	d9 ee                	fldz   
c00092b6:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c00092ba:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00092be:	dd 54 24 10          	fst    QWORD PTR [esp+0x10]
c00092c2:	29 c2                	sub    edx,eax
c00092c4:	dd 54 24 18          	fst    QWORD PTR [esp+0x18]
c00092c8:	8d 14 96             	lea    edx,[esi+edx*4]
c00092cb:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c00092cf:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c00092d3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00092d7:	e8 55 fd ff ff       	call   c0009031 <fp_to_double>
c00092dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00092e0:	dd 5c 24 40          	fstp   QWORD PTR [esp+0x40]
c00092e4:	e8 3e fd ff ff       	call   c0009027 <fp_to_int>
c00092e9:	83 c2 10             	add    edx,0x10
c00092ec:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c00092f0:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c00092f4:	d8 e1                	fsub   st,st(1)
c00092f6:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c00092fa:	de c9                	fmulp  st(1),st
c00092fc:	de c1                	faddp  st(1),st
c00092fe:	d9 c0                	fld    st(0)
c0009300:	d8 8a 34 08 00 00    	fmul   DWORD PTR [edx+0x834]
c0009306:	dc 44 24 08          	fadd   QWORD PTR [esp+0x8]
c000930a:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000930e:	d9 c0                	fld    st(0)
c0009310:	d8 8a 38 08 00 00    	fmul   DWORD PTR [edx+0x838]
c0009316:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c000931a:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000931e:	d9 c0                	fld    st(0)
c0009320:	d8 8a 3c 08 00 00    	fmul   DWORD PTR [edx+0x83c]
c0009326:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000932a:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000932e:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c0009334:	29 5c 24 20          	sub    DWORD PTR [esp+0x20],ebx
c0009338:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c000933c:	de c1                	faddp  st(1),st
c000933e:	79 8f                	jns    c00092cf <calc_output_quad+0x5d>
c0009340:	89 d8                	mov    eax,ebx
c0009342:	29 c8                	sub    eax,ecx
c0009344:	89 c1                	mov    ecx,eax
c0009346:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000934a:	29 c8                	sub    eax,ecx
c000934c:	99                   	cdq    
c000934d:	f7 fb                	idiv   ebx
c000934f:	89 da                	mov    edx,ebx
c0009351:	0f af d0             	imul   edx,eax
c0009354:	40                   	inc    eax
c0009355:	01 d1                	add    ecx,edx
c0009357:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000935c:	d9 ee                	fldz   
c000935e:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009362:	d9 ee                	fldz   
c0009364:	d9 ee                	fldz   
c0009366:	d9 ee                	fldz   
c0009368:	8d 14 86             	lea    edx,[esi+eax*4]
c000936b:	eb 0a                	jmp    c0009377 <calc_output_quad+0x105>
c000936d:	d9 cc                	fxch   st(4)
c000936f:	d9 ca                	fxch   st(2)
c0009371:	d9 c9                	fxch   st(1)
c0009373:	d9 cb                	fxch   st(3)
c0009375:	d9 c9                	fxch   st(1)
c0009377:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c000937b:	d9 c9                	fxch   st(1)
c000937d:	89 c8                	mov    eax,ecx
c000937f:	dd 5c 24 40          	fstp   QWORD PTR [esp+0x40]
c0009383:	d9 c9                	fxch   st(1)
c0009385:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0009389:	d9 c9                	fxch   st(1)
c000938b:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000938f:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0009393:	e8 99 fc ff ff       	call   c0009031 <fp_to_double>
c0009398:	89 c8                	mov    eax,ecx
c000939a:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c000939e:	e8 84 fc ff ff       	call   c0009027 <fp_to_int>
c00093a3:	29 d9                	sub    ecx,ebx
c00093a5:	83 ea 10             	sub    edx,0x10
c00093a8:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c00093ac:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c00093b0:	d8 e1                	fsub   st,st(1)
c00093b2:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c00093b6:	de c9                	fmulp  st(1),st
c00093b8:	de c1                	faddp  st(1),st
c00093ba:	d9 c0                	fld    st(0)
c00093bc:	d8 8a 54 08 00 00    	fmul   DWORD PTR [edx+0x854]
c00093c2:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00093c6:	de c1                	faddp  st(1),st
c00093c8:	d9 c1                	fld    st(1)
c00093ca:	d8 8a 58 08 00 00    	fmul   DWORD PTR [edx+0x858]
c00093d0:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c00093d4:	de c1                	faddp  st(1),st
c00093d6:	d9 c2                	fld    st(2)
c00093d8:	d8 8a 5c 08 00 00    	fmul   DWORD PTR [edx+0x85c]
c00093de:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c00093e2:	de c1                	faddp  st(1),st
c00093e4:	d9 cb                	fxch   st(3)
c00093e6:	d8 8a 60 08 00 00    	fmul   DWORD PTR [edx+0x860]
c00093ec:	85 c9                	test   ecx,ecx
c00093ee:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00093f2:	de c1                	faddp  st(1),st
c00093f4:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c00093f8:	0f 8f 6f ff ff ff    	jg     c000936d <calc_output_quad+0xfb>
c00093fe:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009402:	de c4                	faddp  st(4),st
c0009404:	d9 cb                	fxch   st(3)
c0009406:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009409:	d9 1f                	fstp   DWORD PTR [edi]
c000940b:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000940f:	de c2                	faddp  st(2),st
c0009411:	d9 c9                	fxch   st(1)
c0009413:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009416:	d9 5f 04             	fstp   DWORD PTR [edi+0x4]
c0009419:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000941d:	de c3                	faddp  st(3),st
c000941f:	d9 ca                	fxch   st(2)
c0009421:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009424:	d9 5f 08             	fstp   DWORD PTR [edi+0x8]
c0009427:	de c1                	faddp  st(1),st
c0009429:	dc 0c 24             	fmul   QWORD PTR [esp]
c000942c:	d9 5f 0c             	fstp   DWORD PTR [edi+0xc]
c000942f:	83 c4 5c             	add    esp,0x5c
c0009432:	5b                   	pop    ebx
c0009433:	5e                   	pop    esi
c0009434:	5f                   	pop    edi
c0009435:	5d                   	pop    ebp
c0009436:	c3                   	ret    

c0009437 <calc_output_hex>:
c0009437:	55                   	push   ebp
c0009438:	57                   	push   edi
c0009439:	89 c7                	mov    edi,eax
c000943b:	56                   	push   esi
c000943c:	53                   	push   ebx
c000943d:	89 d3                	mov    ebx,edx
c000943f:	83 ec 7c             	sub    esp,0x7c
c0009442:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0009445:	dd 84 24 90 00 00 00 	fld    QWORD PTR [esp+0x90]
c000944c:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c0009453:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009456:	e8 c8 fb ff ff       	call   c0009023 <int_to_fp>
c000945b:	8b 6f 30             	mov    ebp,DWORD PTR [edi+0x30]
c000945e:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009462:	29 c8                	sub    eax,ecx
c0009464:	99                   	cdq    
c0009465:	f7 fb                	idiv   ebx
c0009467:	89 da                	mov    edx,ebx
c0009469:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c0009471:	0f af d0             	imul   edx,eax
c0009474:	01 ca                	add    edx,ecx
c0009476:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c000947e:	d9 ee                	fldz   
c0009480:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0009484:	8b 57 34             	mov    edx,DWORD PTR [edi+0x34]
c0009487:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000948b:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000948e:	0f af c2             	imul   eax,edx
c0009491:	dd 54 24 10          	fst    QWORD PTR [esp+0x10]
c0009495:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c0009499:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000949d:	dd 54 24 18          	fst    QWORD PTR [esp+0x18]
c00094a1:	29 c2                	sub    edx,eax
c00094a3:	dd 54 24 20          	fst    QWORD PTR [esp+0x20]
c00094a7:	8d 14 97             	lea    edx,[edi+edx*4]
c00094aa:	dd 54 24 28          	fst    QWORD PTR [esp+0x28]
c00094ae:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c00094b2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00094b6:	e8 76 fb ff ff       	call   c0009031 <fp_to_double>
c00094bb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00094bf:	dd 5c 24 58          	fstp   QWORD PTR [esp+0x58]
c00094c3:	e8 5f fb ff ff       	call   c0009027 <fp_to_int>
c00094c8:	83 c2 18             	add    edx,0x18
c00094cb:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c00094cf:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c00094d3:	d8 e1                	fsub   st,st(1)
c00094d5:	dd 44 24 58          	fld    QWORD PTR [esp+0x58]
c00094d9:	de c9                	fmulp  st(1),st
c00094db:	de c1                	faddp  st(1),st
c00094dd:	d9 c0                	fld    st(0)
c00094df:	d8 8a 2c 08 00 00    	fmul   DWORD PTR [edx+0x82c]
c00094e5:	dc 44 24 08          	fadd   QWORD PTR [esp+0x8]
c00094e9:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c00094ed:	d9 c0                	fld    st(0)
c00094ef:	d8 8a 30 08 00 00    	fmul   DWORD PTR [edx+0x830]
c00094f5:	dc 44 24 28          	fadd   QWORD PTR [esp+0x28]
c00094f9:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00094fd:	d9 c0                	fld    st(0)
c00094ff:	d8 8a 34 08 00 00    	fmul   DWORD PTR [edx+0x834]
c0009505:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c0009509:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c000950d:	d9 c0                	fld    st(0)
c000950f:	d8 8a 38 08 00 00    	fmul   DWORD PTR [edx+0x838]
c0009515:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c0009519:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000951d:	d9 c0                	fld    st(0)
c000951f:	d8 8a 3c 08 00 00    	fmul   DWORD PTR [edx+0x83c]
c0009525:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c0009529:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000952d:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c0009533:	29 5c 24 30          	sub    DWORD PTR [esp+0x30],ebx
c0009537:	dc 44 24 38          	fadd   QWORD PTR [esp+0x38]
c000953b:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000953f:	0f 89 6d ff ff ff    	jns    c00094b2 <calc_output_hex+0x7b>
c0009545:	89 d8                	mov    eax,ebx
c0009547:	29 c8                	sub    eax,ecx
c0009549:	89 c1                	mov    ecx,eax
c000954b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000954f:	29 c8                	sub    eax,ecx
c0009551:	99                   	cdq    
c0009552:	f7 fb                	idiv   ebx
c0009554:	89 da                	mov    edx,ebx
c0009556:	0f af d0             	imul   edx,eax
c0009559:	40                   	inc    eax
c000955a:	01 d1                	add    ecx,edx
c000955c:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c0009561:	d9 ee                	fldz   
c0009563:	d9 ee                	fldz   
c0009565:	d9 ee                	fldz   
c0009567:	d9 ca                	fxch   st(2)
c0009569:	03 44 24 40          	add    eax,DWORD PTR [esp+0x40]
c000956d:	dd 54 24 30          	fst    QWORD PTR [esp+0x30]
c0009571:	d9 ee                	fldz   
c0009573:	8d 14 87             	lea    edx,[edi+eax*4]
c0009576:	d9 ee                	fldz   
c0009578:	d9 ca                	fxch   st(2)
c000957a:	eb 0a                	jmp    c0009586 <calc_output_hex+0x14f>
c000957c:	d9 c9                	fxch   st(1)
c000957e:	d9 cc                	fxch   st(4)
c0009580:	d9 cb                	fxch   st(3)
c0009582:	d9 ca                	fxch   st(2)
c0009584:	d9 c9                	fxch   st(1)
c0009586:	dd 5c 24 68          	fstp   QWORD PTR [esp+0x68]
c000958a:	89 c8                	mov    eax,ecx
c000958c:	dd 5c 24 60          	fstp   QWORD PTR [esp+0x60]
c0009590:	d9 ca                	fxch   st(2)
c0009592:	dd 5c 24 58          	fstp   QWORD PTR [esp+0x58]
c0009596:	dd 5c 24 50          	fstp   QWORD PTR [esp+0x50]
c000959a:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c000959e:	e8 8e fa ff ff       	call   c0009031 <fp_to_double>
c00095a3:	89 c8                	mov    eax,ecx
c00095a5:	dd 5c 24 40          	fstp   QWORD PTR [esp+0x40]
c00095a9:	e8 79 fa ff ff       	call   c0009027 <fp_to_int>
c00095ae:	29 d9                	sub    ecx,ebx
c00095b0:	83 ea 18             	sub    edx,0x18
c00095b3:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c00095b7:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c00095bb:	d8 e1                	fsub   st,st(1)
c00095bd:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c00095c1:	de c9                	fmulp  st(1),st
c00095c3:	de c1                	faddp  st(1),st
c00095c5:	d9 c0                	fld    st(0)
c00095c7:	d8 8a 5c 08 00 00    	fmul   DWORD PTR [edx+0x85c]
c00095cd:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c00095d1:	de c1                	faddp  st(1),st
c00095d3:	d9 c1                	fld    st(1)
c00095d5:	d8 8a 60 08 00 00    	fmul   DWORD PTR [edx+0x860]
c00095db:	dd 44 24 60          	fld    QWORD PTR [esp+0x60]
c00095df:	de c1                	faddp  st(1),st
c00095e1:	d9 c2                	fld    st(2)
c00095e3:	d8 8a 64 08 00 00    	fmul   DWORD PTR [edx+0x864]
c00095e9:	dc 44 24 30          	fadd   QWORD PTR [esp+0x30]
c00095ed:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c00095f1:	d9 c2                	fld    st(2)
c00095f3:	d8 8a 68 08 00 00    	fmul   DWORD PTR [edx+0x868]
c00095f9:	dd 44 24 58          	fld    QWORD PTR [esp+0x58]
c00095fd:	de c1                	faddp  st(1),st
c00095ff:	d9 c3                	fld    st(3)
c0009601:	d8 8a 6c 08 00 00    	fmul   DWORD PTR [edx+0x86c]
c0009607:	dd 44 24 50          	fld    QWORD PTR [esp+0x50]
c000960b:	de c1                	faddp  st(1),st
c000960d:	d9 cc                	fxch   st(4)
c000960f:	d8 8a 70 08 00 00    	fmul   DWORD PTR [edx+0x870]
c0009615:	85 c9                	test   ecx,ecx
c0009617:	dd 44 24 68          	fld    QWORD PTR [esp+0x68]
c000961b:	de c1                	faddp  st(1),st
c000961d:	0f 8f 59 ff ff ff    	jg     c000957c <calc_output_hex+0x145>
c0009623:	d9 cb                	fxch   st(3)
c0009625:	dc 44 24 08          	fadd   QWORD PTR [esp+0x8]
c0009629:	dc 0c 24             	fmul   QWORD PTR [esp]
c000962c:	d9 1e                	fstp   DWORD PTR [esi]
c000962e:	d9 c9                	fxch   st(1)
c0009630:	dc 44 24 28          	fadd   QWORD PTR [esp+0x28]
c0009634:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009637:	d9 5e 04             	fstp   DWORD PTR [esi+0x4]
c000963a:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000963e:	dc 44 24 30          	fadd   QWORD PTR [esp+0x30]
c0009642:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009645:	d9 5e 08             	fstp   DWORD PTR [esi+0x8]
c0009648:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c000964c:	dc 0c 24             	fmul   QWORD PTR [esp]
c000964f:	d9 5e 0c             	fstp   DWORD PTR [esi+0xc]
c0009652:	d9 c9                	fxch   st(1)
c0009654:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c0009658:	dc 0c 24             	fmul   QWORD PTR [esp]
c000965b:	d9 5e 10             	fstp   DWORD PTR [esi+0x10]
c000965e:	dc 44 24 38          	fadd   QWORD PTR [esp+0x38]
c0009662:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009665:	d9 5e 14             	fstp   DWORD PTR [esi+0x14]
c0009668:	83 c4 7c             	add    esp,0x7c
c000966b:	5b                   	pop    ebx
c000966c:	5e                   	pop    esi
c000966d:	5f                   	pop    edi
c000966e:	5d                   	pop    ebp
c000966f:	c3                   	ret    

c0009670 <sinc_reset>:
c0009670:	56                   	push   esi
c0009671:	53                   	push   ebx
c0009672:	51                   	push   ecx
c0009673:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009677:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000967a:	85 db                	test   ebx,ebx
c000967c:	74 51                	je     c00096cf <sinc_reset+0x5f>
c000967e:	d9 ee                	fldz   
c0009680:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0009687:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000968e:	dd 53 28             	fst    QWORD PTR [ebx+0x28]
c0009691:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c0009698:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000969e:	dd 5b 20             	fstp   QWORD PTR [ebx+0x20]
c00096a1:	52                   	push   edx
c00096a2:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00096a5:	c1 e0 02             	shl    eax,0x2
c00096a8:	50                   	push   eax
c00096a9:	6a 00                	push   0x0
c00096ab:	56                   	push   esi
c00096ac:	e8 09 70 ff ff       	call   c00006ba <memset>
c00096b1:	83 c4 0c             	add    esp,0xc
c00096b4:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00096b7:	c1 e0 02             	shl    eax,0x2
c00096ba:	50                   	push   eax
c00096bb:	68 aa 00 00 00       	push   0xaa
c00096c0:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00096c3:	8d 04 86             	lea    eax,[esi+eax*4]
c00096c6:	50                   	push   eax
c00096c7:	e8 ee 6f ff ff       	call   c00006ba <memset>
c00096cc:	83 c4 10             	add    esp,0x10
c00096cf:	58                   	pop    eax
c00096d0:	5b                   	pop    ebx
c00096d1:	5e                   	pop    esi
c00096d2:	c3                   	ret    

c00096d3 <calc_output_multi>:
c00096d3:	55                   	push   ebp
c00096d4:	57                   	push   edi
c00096d5:	8d 78 44             	lea    edi,[eax+0x44]
c00096d8:	56                   	push   esi
c00096d9:	89 c6                	mov    esi,eax
c00096db:	53                   	push   ebx
c00096dc:	8d 80 44 04 00 00    	lea    eax,[eax+0x444]
c00096e2:	83 ec 4c             	sub    esp,0x4c
c00096e5:	dd 44 24 64          	fld    QWORD PTR [esp+0x64]
c00096e9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00096ed:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c00096f0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00096f4:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c00096f8:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c00096fc:	e8 22 f9 ff ff       	call   c0009023 <int_to_fp>
c0009701:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c0009705:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009709:	2b 44 24 20          	sub    eax,DWORD PTR [esp+0x20]
c000970d:	99                   	cdq    
c000970e:	f7 7c 24 1c          	idiv   DWORD PTR [esp+0x1c]
c0009712:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009716:	8b 6e 34             	mov    ebp,DWORD PTR [esi+0x34]
c0009719:	0f af d0             	imul   edx,eax
c000971c:	0f af c3             	imul   eax,ebx
c000971f:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c0009723:	29 c5                	sub    ebp,eax
c0009725:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000972c:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009730:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c0009734:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0009738:	52                   	push   edx
c0009739:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000973d:	6a 00                	push   0x0
c000973f:	57                   	push   edi
c0009740:	e8 75 6f ff ff       	call   c00006ba <memset>
c0009745:	83 c4 10             	add    esp,0x10
c0009748:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000974c:	e8 e0 f8 ff ff       	call   c0009031 <fp_to_double>
c0009751:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009755:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009759:	e8 c9 f8 ff ff       	call   c0009027 <fp_to_int>
c000975e:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0009761:	89 d9                	mov    ecx,ebx
c0009763:	d9 04 82             	fld    DWORD PTR [edx+eax*4]
c0009766:	d9 44 82 04          	fld    DWORD PTR [edx+eax*4+0x4]
c000976a:	d8 e1                	fsub   st,st(1)
c000976c:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0009770:	de c9                	fmulp  st(1),st
c0009772:	de c1                	faddp  st(1),st
c0009774:	89 c8                	mov    eax,ecx
c0009776:	bd 08 00 00 00       	mov    ebp,0x8
c000977b:	99                   	cdq    
c000977c:	f7 fd                	idiv   ebp
c000977e:	4a                   	dec    edx
c000977f:	83 fa 06             	cmp    edx,0x6
c0009782:	77 07                	ja     c000978b <calc_output_multi+0xb8>
c0009784:	ff 24 95 c0 0d 02 c0 	jmp    DWORD PTR [edx*4-0x3ffdf240]
c000978b:	49                   	dec    ecx
c000978c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009790:	d9 c0                	fld    st(0)
c0009792:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009799:	8d 04 cf             	lea    eax,[edi+ecx*8]
c000979c:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00097a0:	dc 00                	fadd   QWORD PTR [eax]
c00097a2:	dd 18                	fstp   QWORD PTR [eax]
c00097a4:	49                   	dec    ecx
c00097a5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00097a9:	d9 c0                	fld    st(0)
c00097ab:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00097b2:	8d 04 cf             	lea    eax,[edi+ecx*8]
c00097b5:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00097b9:	dc 00                	fadd   QWORD PTR [eax]
c00097bb:	dd 18                	fstp   QWORD PTR [eax]
c00097bd:	49                   	dec    ecx
c00097be:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00097c2:	d9 c0                	fld    st(0)
c00097c4:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00097cb:	8d 04 cf             	lea    eax,[edi+ecx*8]
c00097ce:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00097d2:	dc 00                	fadd   QWORD PTR [eax]
c00097d4:	dd 18                	fstp   QWORD PTR [eax]
c00097d6:	49                   	dec    ecx
c00097d7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00097db:	d9 c0                	fld    st(0)
c00097dd:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00097e4:	8d 04 cf             	lea    eax,[edi+ecx*8]
c00097e7:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00097eb:	dc 00                	fadd   QWORD PTR [eax]
c00097ed:	dd 18                	fstp   QWORD PTR [eax]
c00097ef:	49                   	dec    ecx
c00097f0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00097f4:	d9 c0                	fld    st(0)
c00097f6:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00097fd:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009800:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009804:	dc 00                	fadd   QWORD PTR [eax]
c0009806:	dd 18                	fstp   QWORD PTR [eax]
c0009808:	49                   	dec    ecx
c0009809:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000980d:	d9 c0                	fld    st(0)
c000980f:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009816:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009819:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c000981d:	dc 00                	fadd   QWORD PTR [eax]
c000981f:	dd 18                	fstp   QWORD PTR [eax]
c0009821:	49                   	dec    ecx
c0009822:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009826:	d9 c0                	fld    st(0)
c0009828:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000982f:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009832:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009836:	dc 00                	fadd   QWORD PTR [eax]
c0009838:	dd 18                	fstp   QWORD PTR [eax]
c000983a:	49                   	dec    ecx
c000983b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000983f:	d9 c0                	fld    st(0)
c0009841:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009848:	8d 04 cf             	lea    eax,[edi+ecx*8]
c000984b:	85 c9                	test   ecx,ecx
c000984d:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009851:	dc 00                	fadd   QWORD PTR [eax]
c0009853:	dd 18                	fstp   QWORD PTR [eax]
c0009855:	0f 8f 19 ff ff ff    	jg     c0009774 <calc_output_multi+0xa1>
c000985b:	dd d8                	fstp   st(0)
c000985d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009861:	01 5c 24 18          	add    DWORD PTR [esp+0x18],ebx
c0009865:	29 54 24 28          	sub    DWORD PTR [esp+0x28],edx
c0009869:	0f 89 d9 fe ff ff    	jns    c0009748 <calc_output_multi+0x75>
c000986f:	89 d1                	mov    ecx,edx
c0009871:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009875:	2b 4c 24 20          	sub    ecx,DWORD PTR [esp+0x20]
c0009879:	29 c8                	sub    eax,ecx
c000987b:	99                   	cdq    
c000987c:	f7 7c 24 1c          	idiv   DWORD PTR [esp+0x1c]
c0009880:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009884:	0f af d0             	imul   edx,eax
c0009887:	40                   	inc    eax
c0009888:	01 d1                	add    ecx,edx
c000988a:	0f af c3             	imul   eax,ebx
c000988d:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c0009890:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009894:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009898:	50                   	push   eax
c0009899:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000989d:	6a 00                	push   0x0
c000989f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00098a3:	e8 12 6e ff ff       	call   c00006ba <memset>
c00098a8:	83 c4 10             	add    esp,0x10
c00098ab:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00098af:	e8 7d f7 ff ff       	call   c0009031 <fp_to_double>
c00098b4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00098b8:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c00098bc:	e8 66 f7 ff ff       	call   c0009027 <fp_to_int>
c00098c1:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00098c4:	89 d9                	mov    ecx,ebx
c00098c6:	d9 04 82             	fld    DWORD PTR [edx+eax*4]
c00098c9:	d9 44 82 04          	fld    DWORD PTR [edx+eax*4+0x4]
c00098cd:	d8 e1                	fsub   st,st(1)
c00098cf:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c00098d3:	de c9                	fmulp  st(1),st
c00098d5:	de c1                	faddp  st(1),st
c00098d7:	89 c8                	mov    eax,ecx
c00098d9:	bd 08 00 00 00       	mov    ebp,0x8
c00098de:	99                   	cdq    
c00098df:	f7 fd                	idiv   ebp
c00098e1:	4a                   	dec    edx
c00098e2:	83 fa 06             	cmp    edx,0x6
c00098e5:	77 07                	ja     c00098ee <calc_output_multi+0x21b>
c00098e7:	ff 24 95 dc 0d 02 c0 	jmp    DWORD PTR [edx*4-0x3ffdf224]
c00098ee:	49                   	dec    ecx
c00098ef:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00098f3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00098f7:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00098fe:	d9 c0                	fld    st(0)
c0009900:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009904:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009907:	dc 00                	fadd   QWORD PTR [eax]
c0009909:	dd 18                	fstp   QWORD PTR [eax]
c000990b:	49                   	dec    ecx
c000990c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009910:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009914:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000991b:	d9 c0                	fld    st(0)
c000991d:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009921:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009924:	dc 00                	fadd   QWORD PTR [eax]
c0009926:	dd 18                	fstp   QWORD PTR [eax]
c0009928:	49                   	dec    ecx
c0009929:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000992d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009931:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009938:	d9 c0                	fld    st(0)
c000993a:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c000993e:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009941:	dc 00                	fadd   QWORD PTR [eax]
c0009943:	dd 18                	fstp   QWORD PTR [eax]
c0009945:	49                   	dec    ecx
c0009946:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000994a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000994e:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009955:	d9 c0                	fld    st(0)
c0009957:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c000995b:	8d 04 c8             	lea    eax,[eax+ecx*8]
c000995e:	dc 00                	fadd   QWORD PTR [eax]
c0009960:	dd 18                	fstp   QWORD PTR [eax]
c0009962:	49                   	dec    ecx
c0009963:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009967:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000996b:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009972:	d9 c0                	fld    st(0)
c0009974:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009978:	8d 04 c8             	lea    eax,[eax+ecx*8]
c000997b:	dc 00                	fadd   QWORD PTR [eax]
c000997d:	dd 18                	fstp   QWORD PTR [eax]
c000997f:	49                   	dec    ecx
c0009980:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009984:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009988:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000998f:	d9 c0                	fld    st(0)
c0009991:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009995:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009998:	dc 00                	fadd   QWORD PTR [eax]
c000999a:	dd 18                	fstp   QWORD PTR [eax]
c000999c:	49                   	dec    ecx
c000999d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00099a1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00099a5:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00099ac:	d9 c0                	fld    st(0)
c00099ae:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00099b2:	8d 04 c8             	lea    eax,[eax+ecx*8]
c00099b5:	dc 00                	fadd   QWORD PTR [eax]
c00099b7:	dd 18                	fstp   QWORD PTR [eax]
c00099b9:	49                   	dec    ecx
c00099ba:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00099be:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00099c2:	85 c9                	test   ecx,ecx
c00099c4:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00099cb:	d9 c0                	fld    st(0)
c00099cd:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00099d1:	8d 04 c8             	lea    eax,[eax+ecx*8]
c00099d4:	dc 00                	fadd   QWORD PTR [eax]
c00099d6:	dd 18                	fstp   QWORD PTR [eax]
c00099d8:	0f 8f f9 fe ff ff    	jg     c00098d7 <calc_output_multi+0x204>
c00099de:	dd d8                	fstp   st(0)
c00099e0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00099e4:	29 5c 24 18          	sub    DWORD PTR [esp+0x18],ebx
c00099e8:	29 54 24 28          	sub    DWORD PTR [esp+0x28],edx
c00099ec:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c00099f1:	0f 8f b4 fe ff ff    	jg     c00098ab <calc_output_multi+0x1d8>
c00099f7:	b9 08 00 00 00       	mov    ecx,0x8
c00099fc:	89 d8                	mov    eax,ebx
c00099fe:	99                   	cdq    
c00099ff:	f7 f9                	idiv   ecx
c0009a01:	4a                   	dec    edx
c0009a02:	83 fa 06             	cmp    edx,0x6
c0009a05:	77 07                	ja     c0009a0e <calc_output_multi+0x33b>
c0009a07:	ff 24 95 f8 0d 02 c0 	jmp    DWORD PTR [edx*4-0x3ffdf208]
c0009a0e:	4b                   	dec    ebx
c0009a0f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009a13:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009a16:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009a19:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009a1d:	dc 4c 24 10          	fmul   QWORD PTR [esp+0x10]
c0009a21:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009a24:	4b                   	dec    ebx
c0009a25:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009a29:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009a2c:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009a2f:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009a33:	dc 4c 24 10          	fmul   QWORD PTR [esp+0x10]
c0009a37:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009a3a:	4b                   	dec    ebx
c0009a3b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009a3f:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009a42:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009a45:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009a49:	dc 4c 24 10          	fmul   QWORD PTR [esp+0x10]
c0009a4d:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009a50:	4b                   	dec    ebx
c0009a51:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009a55:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009a58:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009a5b:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009a5f:	dc 4c 24 10          	fmul   QWORD PTR [esp+0x10]
c0009a63:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009a66:	4b                   	dec    ebx
c0009a67:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009a6b:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009a6e:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009a71:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009a75:	dc 4c 24 10          	fmul   QWORD PTR [esp+0x10]
c0009a79:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009a7c:	4b                   	dec    ebx
c0009a7d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009a81:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009a84:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009a87:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009a8b:	dc 4c 24 10          	fmul   QWORD PTR [esp+0x10]
c0009a8f:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009a92:	4b                   	dec    ebx
c0009a93:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009a97:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009a9a:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009a9d:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009aa1:	dc 4c 24 10          	fmul   QWORD PTR [esp+0x10]
c0009aa5:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009aa8:	4b                   	dec    ebx
c0009aa9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009aad:	85 db                	test   ebx,ebx
c0009aaf:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009ab2:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009ab5:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009ab9:	dc 4c 24 10          	fmul   QWORD PTR [esp+0x10]
c0009abd:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009ac0:	0f 8f 36 ff ff ff    	jg     c00099fc <calc_output_multi+0x329>
c0009ac6:	83 c4 4c             	add    esp,0x4c
c0009ac9:	5b                   	pop    ebx
c0009aca:	5e                   	pop    esi
c0009acb:	5f                   	pop    edi
c0009acc:	5d                   	pop    ebp
c0009acd:	c3                   	ret    

c0009ace <double_to_fp>:
c0009ace:	d9 05 4c 0f 02 c0    	fld    DWORD PTR ds:0xc0020f4c
c0009ad4:	dc 4c 24 04          	fmul   QWORD PTR [esp+0x4]
c0009ad8:	dd 5c 24 04          	fstp   QWORD PTR [esp+0x4]
c0009adc:	e9 2f 5b 01 00       	jmp    c001f610 <lrint>

c0009ae1 <fmod_one>:
c0009ae1:	83 ec 2c             	sub    esp,0x2c
c0009ae4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ae8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009aec:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009af0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009af4:	83 ec 08             	sub    esp,0x8
c0009af7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009afb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009aff:	e8 0c 5b 01 00       	call   c001f610 <lrint>
c0009b04:	83 c4 10             	add    esp,0x10
c0009b07:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009b0b:	db 44 24 04          	fild   DWORD PTR [esp+0x4]
c0009b0f:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009b13:	de e1                	fsubrp st(1),st
c0009b15:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009b19:	d9 ee                	fldz   
c0009b1b:	dc 5c 24 18          	fcomp  QWORD PTR [esp+0x18]
c0009b1f:	df e0                	fnstsw ax
c0009b21:	f6 c4 45             	test   ah,0x45
c0009b24:	75 0a                	jne    c0009b30 <fmod_one+0x4f>
c0009b26:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0009b2a:	d9 e8                	fld1   
c0009b2c:	de c1                	faddp  st(1),st
c0009b2e:	eb 04                	jmp    c0009b34 <fmod_one+0x53>
c0009b30:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0009b34:	83 c4 2c             	add    esp,0x2c
c0009b37:	c3                   	ret    

c0009b38 <prepare_data>:
c0009b38:	55                   	push   ebp
c0009b39:	57                   	push   edi
c0009b3a:	56                   	push   esi
c0009b3b:	53                   	push   ebx
c0009b3c:	83 ec 1c             	sub    esp,0x1c
c0009b3f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0009b43:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009b47:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c0009b4b:	0f 89 57 01 00 00    	jns    c0009ca8 <prepare_data+0x170>
c0009b51:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0009b54:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0009b57:	85 d2                	test   edx,edx
c0009b59:	75 0d                	jne    c0009b68 <prepare_data+0x30>
c0009b5b:	8d 14 36             	lea    edx,[esi+esi*1]
c0009b5e:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0009b61:	29 d0                	sub    eax,edx
c0009b63:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c0009b66:	eb 44                	jmp    c0009bac <prepare_data+0x74>
c0009b68:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c0009b6b:	8d 0c 37             	lea    ecx,[edi+esi*1]
c0009b6e:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c0009b71:	39 c1                	cmp    ecx,eax
c0009b73:	7d 04                	jge    c0009b79 <prepare_data+0x41>
c0009b75:	29 d0                	sub    eax,edx
c0009b77:	eb 2d                	jmp    c0009ba6 <prepare_data+0x6e>
c0009b79:	29 d7                	sub    edi,edx
c0009b7b:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c0009b81:	01 f7                	add    edi,esi
c0009b83:	29 f2                	sub    edx,esi
c0009b85:	51                   	push   ecx
c0009b86:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c0009b8d:	8d 14 90             	lea    edx,[eax+edx*4]
c0009b90:	51                   	push   ecx
c0009b91:	52                   	push   edx
c0009b92:	50                   	push   eax
c0009b93:	e8 b4 6a ff ff       	call   c000064c <memmove>
c0009b98:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0009b9b:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c0009b9e:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c0009ba1:	29 f0                	sub    eax,esi
c0009ba3:	83 c4 10             	add    esp,0x10
c0009ba6:	29 f0                	sub    eax,esi
c0009ba8:	79 02                	jns    c0009bac <prepare_data+0x74>
c0009baa:	31 c0                	xor    eax,eax
c0009bac:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0009baf:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0009bb2:	29 ef                	sub    edi,ebp
c0009bb4:	39 c7                	cmp    edi,eax
c0009bb6:	7e 02                	jle    c0009bba <prepare_data+0x82>
c0009bb8:	89 c7                	mov    edi,eax
c0009bba:	89 f8                	mov    eax,edi
c0009bbc:	99                   	cdq    
c0009bbd:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009bc0:	29 d7                	sub    edi,edx
c0009bc2:	b8 15 00 00 00       	mov    eax,0x15
c0009bc7:	0f 88 dd 00 00 00    	js     c0009caa <prepare_data+0x172>
c0009bcd:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0009bd0:	8d 14 39             	lea    edx,[ecx+edi*1]
c0009bd3:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c0009bd6:	0f 8f ce 00 00 00    	jg     c0009caa <prepare_data+0x172>
c0009bdc:	50                   	push   eax
c0009bdd:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c0009be4:	50                   	push   eax
c0009be5:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c0009beb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009bef:	8b 00                	mov    eax,DWORD PTR [eax]
c0009bf1:	8d 04 a8             	lea    eax,[eax+ebp*4]
c0009bf4:	50                   	push   eax
c0009bf5:	8d 04 8a             	lea    eax,[edx+ecx*4]
c0009bf8:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0009bfc:	50                   	push   eax
c0009bfd:	e8 82 6a ff ff       	call   c0000684 <memcpy>
c0009c02:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0009c05:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c0009c08:	83 c4 10             	add    esp,0x10
c0009c0b:	01 fd                	add    ebp,edi
c0009c0d:	01 f9                	add    ecx,edi
c0009c0f:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c0009c12:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c0009c15:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c0009c18:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009c1c:	0f 85 86 00 00 00    	jne    c0009ca8 <prepare_data+0x170>
c0009c22:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0009c25:	89 e8                	mov    eax,ebp
c0009c27:	29 c8                	sub    eax,ecx
c0009c29:	8d 3c 36             	lea    edi,[esi+esi*1]
c0009c2c:	39 f8                	cmp    eax,edi
c0009c2e:	7d 78                	jge    c0009ca8 <prepare_data+0x170>
c0009c30:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0009c34:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c0009c38:	74 6e                	je     c0009ca8 <prepare_data+0x170>
c0009c3a:	8d 7e 04             	lea    edi,[esi+0x4]
c0009c3d:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0009c41:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c0009c44:	29 ef                	sub    edi,ebp
c0009c46:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0009c4a:	7c 29                	jl     c0009c75 <prepare_data+0x13d>
c0009c4c:	8d 3c 30             	lea    edi,[eax+esi*1]
c0009c4f:	29 f1                	sub    ecx,esi
c0009c51:	55                   	push   ebp
c0009c52:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c0009c59:	50                   	push   eax
c0009c5a:	8d 04 8a             	lea    eax,[edx+ecx*4]
c0009c5d:	50                   	push   eax
c0009c5e:	52                   	push   edx
c0009c5f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009c63:	e8 e4 69 ff ff       	call   c000064c <memmove>
c0009c68:	83 c4 10             	add    esp,0x10
c0009c6b:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c0009c6e:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c0009c71:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009c75:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009c78:	83 c6 05             	add    esi,0x5
c0009c7b:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c0009c7e:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009c81:	78 07                	js     c0009c8a <prepare_data+0x152>
c0009c83:	8d 3c 30             	lea    edi,[eax+esi*1]
c0009c86:	39 cf                	cmp    edi,ecx
c0009c88:	7e 04                	jle    c0009c8e <prepare_data+0x156>
c0009c8a:	89 ce                	mov    esi,ecx
c0009c8c:	29 c6                	sub    esi,eax
c0009c8e:	51                   	push   ecx
c0009c8f:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c0009c96:	51                   	push   ecx
c0009c97:	8d 04 82             	lea    eax,[edx+eax*4]
c0009c9a:	6a 00                	push   0x0
c0009c9c:	50                   	push   eax
c0009c9d:	e8 18 6a ff ff       	call   c00006ba <memset>
c0009ca2:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c0009ca5:	83 c4 10             	add    esp,0x10
c0009ca8:	31 c0                	xor    eax,eax
c0009caa:	83 c4 1c             	add    esp,0x1c
c0009cad:	5b                   	pop    ebx
c0009cae:	5e                   	pop    esi
c0009caf:	5f                   	pop    edi
c0009cb0:	5d                   	pop    ebp
c0009cb1:	c3                   	ret    

c0009cb2 <sinc_multichan_vari_process>:
c0009cb2:	55                   	push   ebp
c0009cb3:	b8 05 00 00 00       	mov    eax,0x5
c0009cb8:	57                   	push   edi
c0009cb9:	56                   	push   esi
c0009cba:	53                   	push   ebx
c0009cbb:	83 ec 3c             	sub    esp,0x3c
c0009cbe:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0009cc2:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0009cc6:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c0009cc9:	85 db                	test   ebx,ebx
c0009ccb:	0f 84 5b 02 00 00    	je     c0009f2c <sinc_multichan_vari_process+0x27a>
c0009cd1:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0009cd4:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009cd7:	0f af d0             	imul   edx,eax
c0009cda:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0009cdd:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c0009ce1:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0009ce8:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0009ceb:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0009cf2:	dd 06                	fld    QWORD PTR [esi]
c0009cf4:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c0009cf8:	55                   	push   ebp
c0009cf9:	55                   	push   ebp
c0009cfa:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009cfd:	e8 dd f2 ff ff       	call   c0008fdf <is_bad_src_ratio>
c0009d02:	89 c2                	mov    edx,eax
c0009d04:	58                   	pop    eax
c0009d05:	59                   	pop    ecx
c0009d06:	b8 16 00 00 00       	mov    eax,0x16
c0009d0b:	85 d2                	test   edx,edx
c0009d0d:	0f 85 19 02 00 00    	jne    c0009f2c <sinc_multichan_vari_process+0x27a>
c0009d13:	d9 05 50 0f 02 c0    	fld    DWORD PTR ds:0xc0020f50
c0009d19:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c0009d1c:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c0009d1f:	dd 06                	fld    QWORD PTR [esi]
c0009d21:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c0009d24:	d8 d1                	fcom   st(1)
c0009d26:	df e0                	fnstsw ax
c0009d28:	9e                   	sahf   
c0009d29:	76 0f                	jbe    c0009d3a <sinc_multichan_vari_process+0x88>
c0009d2b:	dd d8                	fstp   st(0)
c0009d2d:	d9 e8                	fld1   
c0009d2f:	d8 d9                	fcomp  st(1)
c0009d31:	df e0                	fnstsw ax
c0009d33:	9e                   	sahf   
c0009d34:	77 0f                	ja     c0009d45 <sinc_multichan_vari_process+0x93>
c0009d36:	dd d8                	fstp   st(0)
c0009d38:	eb 11                	jmp    c0009d4b <sinc_multichan_vari_process+0x99>
c0009d3a:	dd d9                	fstp   st(1)
c0009d3c:	d9 e8                	fld1   
c0009d3e:	d8 d9                	fcomp  st(1)
c0009d40:	df e0                	fnstsw ax
c0009d42:	9e                   	sahf   
c0009d43:	76 04                	jbe    c0009d49 <sinc_multichan_vari_process+0x97>
c0009d45:	de f9                	fdivp  st(1),st
c0009d47:	eb 02                	jmp    c0009d4b <sinc_multichan_vari_process+0x99>
c0009d49:	dd d8                	fstp   st(0)
c0009d4b:	83 ec 10             	sub    esp,0x10
c0009d4e:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009d51:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009d54:	e8 b7 58 01 00       	call   c001f610 <lrint>
c0009d59:	40                   	inc    eax
c0009d5a:	0f af c5             	imul   eax,ebp
c0009d5d:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c0009d60:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009d64:	dd 14 24             	fst    QWORD PTR [esp]
c0009d67:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009d6b:	e8 71 fd ff ff       	call   c0009ae1 <fmod_one>
c0009d70:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0009d73:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009d76:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009d7a:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009d7e:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0009d82:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c0009d86:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009d89:	e8 82 58 01 00       	call   c001f610 <lrint>
c0009d8e:	d9 e8                	fld1   
c0009d90:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c0009d94:	0f af e8             	imul   ebp,eax
c0009d97:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009d9b:	01 e8                	add    eax,ebp
c0009d9d:	99                   	cdq    
c0009d9e:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c0009da1:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0009da4:	dc 05 b8 0d 02 c0    	fadd   QWORD PTR ds:0xc0020db8
c0009daa:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009dae:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009db1:	83 c4 10             	add    esp,0x10
c0009db4:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c0009db7:	7d 4b                	jge    c0009e04 <sinc_multichan_vari_process+0x152>
c0009db9:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009dbc:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009dbf:	01 c8                	add    eax,ecx
c0009dc1:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c0009dc4:	99                   	cdq    
c0009dc5:	f7 f9                	idiv   ecx
c0009dc7:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0009dcb:	7d 09                	jge    c0009dd6 <sinc_multichan_vari_process+0x124>
c0009dcd:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0009dd0:	85 c0                	test   eax,eax
c0009dd2:	79 57                	jns    c0009e2b <sinc_multichan_vari_process+0x179>
c0009dd4:	eb 70                	jmp    c0009e46 <sinc_multichan_vari_process+0x194>
c0009dd6:	51                   	push   ecx
c0009dd7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009ddb:	57                   	push   edi
c0009ddc:	53                   	push   ebx
c0009ddd:	e8 56 fd ff ff       	call   c0009b38 <prepare_data>
c0009de2:	83 c4 10             	add    esp,0x10
c0009de5:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0009de8:	85 c0                	test   eax,eax
c0009dea:	0f 85 3c 01 00 00    	jne    c0009f2c <sinc_multichan_vari_process+0x27a>
c0009df0:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009df3:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009df6:	01 c8                	add    eax,ecx
c0009df8:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c0009dfb:	99                   	cdq    
c0009dfc:	f7 f9                	idiv   ecx
c0009dfe:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0009e02:	7c c9                	jl     c0009dcd <sinc_multichan_vari_process+0x11b>
c0009e04:	dd 04 24             	fld    QWORD PTR [esp]
c0009e07:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c0009e0a:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009e0e:	dd 1e                	fstp   QWORD PTR [esi]
c0009e10:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0009e13:	99                   	cdq    
c0009e14:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009e17:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c0009e1a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009e1d:	99                   	cdq    
c0009e1e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009e21:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c0009e24:	31 c0                	xor    eax,eax
c0009e26:	e9 01 01 00 00       	jmp    c0009f2c <sinc_multichan_vari_process+0x27a>
c0009e2b:	dd 04 24             	fld    QWORD PTR [esp]
c0009e2e:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c0009e31:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009e35:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c0009e39:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c0009e3d:	d9 c9                	fxch   st(1)
c0009e3f:	de d9                	fcompp 
c0009e41:	df e0                	fnstsw ax
c0009e43:	9e                   	sahf   
c0009e44:	73 be                	jae    c0009e04 <sinc_multichan_vari_process+0x152>
c0009e46:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c0009e4a:	7e 2f                	jle    c0009e7b <sinc_multichan_vari_process+0x1c9>
c0009e4c:	dd 06                	fld    QWORD PTR [esi]
c0009e4e:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c0009e51:	83 ec 10             	sub    esp,0x10
c0009e54:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009e57:	e8 94 57 01 00       	call   c001f5f0 <fabs>
c0009e5c:	83 c4 10             	add    esp,0x10
c0009e5f:	dc 1d 40 0f 02 c0    	fcomp  QWORD PTR ds:0xc0020f40
c0009e65:	df e0                	fnstsw ax
c0009e67:	9e                   	sahf   
c0009e68:	76 11                	jbe    c0009e7b <sinc_multichan_vari_process+0x1c9>
c0009e6a:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c0009e6d:	dc 26                	fsub   QWORD PTR [esi]
c0009e6f:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c0009e72:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c0009e75:	dc 06                	fadd   QWORD PTR [esi]
c0009e77:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0009e7b:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c0009e7e:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009e82:	d9 e8                	fld1   
c0009e84:	d8 d9                	fcomp  st(1)
c0009e86:	df e0                	fnstsw ax
c0009e88:	9e                   	sahf   
c0009e89:	77 04                	ja     c0009e8f <sinc_multichan_vari_process+0x1dd>
c0009e8b:	dd d8                	fstp   st(0)
c0009e8d:	d9 e8                	fld1   
c0009e8f:	de c9                	fmulp  st(1),st
c0009e91:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009e95:	50                   	push   eax
c0009e96:	50                   	push   eax
c0009e97:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e9b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e9f:	e8 2a fc ff ff       	call   c0009ace <double_to_fp>
c0009ea4:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0009ea8:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c0009eac:	89 c5                	mov    ebp,eax
c0009eae:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009eb1:	e8 18 fc ff ff       	call   c0009ace <double_to_fp>
c0009eb6:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0009eb9:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c0009ebc:	8d 14 8a             	lea    edx,[edx+ecx*4]
c0009ebf:	89 c1                	mov    ecx,eax
c0009ec1:	52                   	push   edx
c0009ec2:	89 d8                	mov    eax,ebx
c0009ec4:	dd 44 24 2c          	fld    QWORD PTR [esp+0x2c]
c0009ec8:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c0009ecb:	52                   	push   edx
c0009ecc:	52                   	push   edx
c0009ecd:	89 ea                	mov    edx,ebp
c0009ecf:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009ed2:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009ed5:	e8 f9 f7 ff ff       	call   c00096d3 <calc_output_multi>
c0009eda:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0009edd:	d9 e8                	fld1   
c0009edf:	dc 74 24 28          	fdiv   QWORD PTR [esp+0x28]
c0009ee3:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c0009ee6:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c0009eea:	83 c4 10             	add    esp,0x10
c0009eed:	dd 14 24             	fst    QWORD PTR [esp]
c0009ef0:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0009ef4:	e8 e8 fb ff ff       	call   c0009ae1 <fmod_one>
c0009ef9:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0009efc:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009eff:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009f03:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009f07:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0009f0b:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c0009f0f:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009f12:	e8 f9 56 01 00       	call   c001f610 <lrint>
c0009f17:	0f af e8             	imul   ebp,eax
c0009f1a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009f1e:	01 e8                	add    eax,ebp
c0009f20:	99                   	cdq    
c0009f21:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c0009f24:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0009f27:	e9 82 fe ff ff       	jmp    c0009dae <sinc_multichan_vari_process+0xfc>
c0009f2c:	83 c4 3c             	add    esp,0x3c
c0009f2f:	5b                   	pop    ebx
c0009f30:	5e                   	pop    esi
c0009f31:	5f                   	pop    edi
c0009f32:	5d                   	pop    ebp
c0009f33:	c3                   	ret    

c0009f34 <sinc_hex_vari_process>:
c0009f34:	55                   	push   ebp
c0009f35:	b8 05 00 00 00       	mov    eax,0x5
c0009f3a:	57                   	push   edi
c0009f3b:	56                   	push   esi
c0009f3c:	53                   	push   ebx
c0009f3d:	83 ec 3c             	sub    esp,0x3c
c0009f40:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0009f44:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0009f48:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c0009f4b:	85 db                	test   ebx,ebx
c0009f4d:	0f 84 56 02 00 00    	je     c000a1a9 <sinc_hex_vari_process+0x275>
c0009f53:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0009f56:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009f59:	0f af d0             	imul   edx,eax
c0009f5c:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0009f5f:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c0009f63:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0009f6a:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0009f6d:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0009f74:	dd 06                	fld    QWORD PTR [esi]
c0009f76:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c0009f7a:	55                   	push   ebp
c0009f7b:	55                   	push   ebp
c0009f7c:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009f7f:	e8 5b f0 ff ff       	call   c0008fdf <is_bad_src_ratio>
c0009f84:	89 c2                	mov    edx,eax
c0009f86:	58                   	pop    eax
c0009f87:	59                   	pop    ecx
c0009f88:	b8 16 00 00 00       	mov    eax,0x16
c0009f8d:	85 d2                	test   edx,edx
c0009f8f:	0f 85 14 02 00 00    	jne    c000a1a9 <sinc_hex_vari_process+0x275>
c0009f95:	d9 05 50 0f 02 c0    	fld    DWORD PTR ds:0xc0020f50
c0009f9b:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c0009f9e:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c0009fa1:	dd 06                	fld    QWORD PTR [esi]
c0009fa3:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c0009fa6:	d8 d1                	fcom   st(1)
c0009fa8:	df e0                	fnstsw ax
c0009faa:	9e                   	sahf   
c0009fab:	76 0f                	jbe    c0009fbc <sinc_hex_vari_process+0x88>
c0009fad:	dd d8                	fstp   st(0)
c0009faf:	d9 e8                	fld1   
c0009fb1:	d8 d9                	fcomp  st(1)
c0009fb3:	df e0                	fnstsw ax
c0009fb5:	9e                   	sahf   
c0009fb6:	77 0f                	ja     c0009fc7 <sinc_hex_vari_process+0x93>
c0009fb8:	dd d8                	fstp   st(0)
c0009fba:	eb 11                	jmp    c0009fcd <sinc_hex_vari_process+0x99>
c0009fbc:	dd d9                	fstp   st(1)
c0009fbe:	d9 e8                	fld1   
c0009fc0:	d8 d9                	fcomp  st(1)
c0009fc2:	df e0                	fnstsw ax
c0009fc4:	9e                   	sahf   
c0009fc5:	76 04                	jbe    c0009fcb <sinc_hex_vari_process+0x97>
c0009fc7:	de f9                	fdivp  st(1),st
c0009fc9:	eb 02                	jmp    c0009fcd <sinc_hex_vari_process+0x99>
c0009fcb:	dd d8                	fstp   st(0)
c0009fcd:	83 ec 10             	sub    esp,0x10
c0009fd0:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009fd3:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009fd6:	e8 35 56 01 00       	call   c001f610 <lrint>
c0009fdb:	40                   	inc    eax
c0009fdc:	0f af c5             	imul   eax,ebp
c0009fdf:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c0009fe2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009fe6:	dd 14 24             	fst    QWORD PTR [esp]
c0009fe9:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009fed:	e8 ef fa ff ff       	call   c0009ae1 <fmod_one>
c0009ff2:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0009ff5:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009ff8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009ffc:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a000:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a004:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a008:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a00b:	e8 00 56 01 00       	call   c001f610 <lrint>
c000a010:	d9 e8                	fld1   
c000a012:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a016:	0f af e8             	imul   ebp,eax
c000a019:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a01d:	01 e8                	add    eax,ebp
c000a01f:	99                   	cdq    
c000a020:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a023:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a026:	dc 05 b8 0d 02 c0    	fadd   QWORD PTR ds:0xc0020db8
c000a02c:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a030:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a033:	83 c4 10             	add    esp,0x10
c000a036:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a039:	7d 4b                	jge    c000a086 <sinc_hex_vari_process+0x152>
c000a03b:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a03e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a041:	01 c8                	add    eax,ecx
c000a043:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a046:	99                   	cdq    
c000a047:	f7 f9                	idiv   ecx
c000a049:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a04d:	7d 09                	jge    c000a058 <sinc_hex_vari_process+0x124>
c000a04f:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a052:	85 c0                	test   eax,eax
c000a054:	79 57                	jns    c000a0ad <sinc_hex_vari_process+0x179>
c000a056:	eb 70                	jmp    c000a0c8 <sinc_hex_vari_process+0x194>
c000a058:	51                   	push   ecx
c000a059:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a05d:	57                   	push   edi
c000a05e:	53                   	push   ebx
c000a05f:	e8 d4 fa ff ff       	call   c0009b38 <prepare_data>
c000a064:	83 c4 10             	add    esp,0x10
c000a067:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a06a:	85 c0                	test   eax,eax
c000a06c:	0f 85 37 01 00 00    	jne    c000a1a9 <sinc_hex_vari_process+0x275>
c000a072:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a075:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a078:	01 c8                	add    eax,ecx
c000a07a:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a07d:	99                   	cdq    
c000a07e:	f7 f9                	idiv   ecx
c000a080:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a084:	7c c9                	jl     c000a04f <sinc_hex_vari_process+0x11b>
c000a086:	dd 04 24             	fld    QWORD PTR [esp]
c000a089:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a08c:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a090:	dd 1e                	fstp   QWORD PTR [esi]
c000a092:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a095:	99                   	cdq    
c000a096:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a099:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a09c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a09f:	99                   	cdq    
c000a0a0:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a0a3:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a0a6:	31 c0                	xor    eax,eax
c000a0a8:	e9 fc 00 00 00       	jmp    c000a1a9 <sinc_hex_vari_process+0x275>
c000a0ad:	dd 04 24             	fld    QWORD PTR [esp]
c000a0b0:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a0b3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a0b7:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c000a0bb:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000a0bf:	d9 c9                	fxch   st(1)
c000a0c1:	de d9                	fcompp 
c000a0c3:	df e0                	fnstsw ax
c000a0c5:	9e                   	sahf   
c000a0c6:	73 be                	jae    c000a086 <sinc_hex_vari_process+0x152>
c000a0c8:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a0cc:	7e 2f                	jle    c000a0fd <sinc_hex_vari_process+0x1c9>
c000a0ce:	dd 06                	fld    QWORD PTR [esi]
c000a0d0:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a0d3:	83 ec 10             	sub    esp,0x10
c000a0d6:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a0d9:	e8 12 55 01 00       	call   c001f5f0 <fabs>
c000a0de:	83 c4 10             	add    esp,0x10
c000a0e1:	dc 1d 40 0f 02 c0    	fcomp  QWORD PTR ds:0xc0020f40
c000a0e7:	df e0                	fnstsw ax
c000a0e9:	9e                   	sahf   
c000a0ea:	76 11                	jbe    c000a0fd <sinc_hex_vari_process+0x1c9>
c000a0ec:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a0ef:	dc 26                	fsub   QWORD PTR [esi]
c000a0f1:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a0f4:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a0f7:	dc 06                	fadd   QWORD PTR [esi]
c000a0f9:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a0fd:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a100:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a104:	d9 e8                	fld1   
c000a106:	d8 d9                	fcomp  st(1)
c000a108:	df e0                	fnstsw ax
c000a10a:	9e                   	sahf   
c000a10b:	77 04                	ja     c000a111 <sinc_hex_vari_process+0x1dd>
c000a10d:	dd d8                	fstp   st(0)
c000a10f:	d9 e8                	fld1   
c000a111:	de c9                	fmulp  st(1),st
c000a113:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000a117:	50                   	push   eax
c000a118:	50                   	push   eax
c000a119:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a11d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a121:	e8 a8 f9 ff ff       	call   c0009ace <double_to_fp>
c000a126:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a12a:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000a12e:	89 c5                	mov    ebp,eax
c000a130:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a133:	e8 96 f9 ff ff       	call   c0009ace <double_to_fp>
c000a138:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a13b:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000a13e:	83 c4 0c             	add    esp,0xc
c000a141:	8d 14 8a             	lea    edx,[edx+ecx*4]
c000a144:	89 c1                	mov    ecx,eax
c000a146:	52                   	push   edx
c000a147:	89 d8                	mov    eax,ebx
c000a149:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a14d:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a150:	52                   	push   edx
c000a151:	52                   	push   edx
c000a152:	89 ea                	mov    edx,ebp
c000a154:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a157:	e8 db f2 ff ff       	call   c0009437 <calc_output_hex>
c000a15c:	d9 e8                	fld1   
c000a15e:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a162:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000a166:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a16a:	dd 14 24             	fst    QWORD PTR [esp]
c000a16d:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000a171:	e8 6b f9 ff ff       	call   c0009ae1 <fmod_one>
c000a176:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a179:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a17c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a180:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a184:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000a188:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a18c:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a18f:	e8 7c 54 01 00       	call   c001f610 <lrint>
c000a194:	0f af e8             	imul   ebp,eax
c000a197:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a19b:	01 e8                	add    eax,ebp
c000a19d:	99                   	cdq    
c000a19e:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a1a1:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a1a4:	e9 87 fe ff ff       	jmp    c000a030 <sinc_hex_vari_process+0xfc>
c000a1a9:	83 c4 3c             	add    esp,0x3c
c000a1ac:	5b                   	pop    ebx
c000a1ad:	5e                   	pop    esi
c000a1ae:	5f                   	pop    edi
c000a1af:	5d                   	pop    ebp
c000a1b0:	c3                   	ret    

c000a1b1 <sinc_quad_vari_process>:
c000a1b1:	55                   	push   ebp
c000a1b2:	b8 05 00 00 00       	mov    eax,0x5
c000a1b7:	57                   	push   edi
c000a1b8:	56                   	push   esi
c000a1b9:	53                   	push   ebx
c000a1ba:	83 ec 3c             	sub    esp,0x3c
c000a1bd:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000a1c1:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000a1c5:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000a1c8:	85 db                	test   ebx,ebx
c000a1ca:	0f 84 56 02 00 00    	je     c000a426 <sinc_quad_vari_process+0x275>
c000a1d0:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000a1d3:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a1d6:	0f af d0             	imul   edx,eax
c000a1d9:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000a1dc:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c000a1e0:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a1e7:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a1ea:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000a1f1:	dd 06                	fld    QWORD PTR [esi]
c000a1f3:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c000a1f7:	55                   	push   ebp
c000a1f8:	55                   	push   ebp
c000a1f9:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a1fc:	e8 de ed ff ff       	call   c0008fdf <is_bad_src_ratio>
c000a201:	89 c2                	mov    edx,eax
c000a203:	58                   	pop    eax
c000a204:	59                   	pop    ecx
c000a205:	b8 16 00 00 00       	mov    eax,0x16
c000a20a:	85 d2                	test   edx,edx
c000a20c:	0f 85 14 02 00 00    	jne    c000a426 <sinc_quad_vari_process+0x275>
c000a212:	d9 05 50 0f 02 c0    	fld    DWORD PTR ds:0xc0020f50
c000a218:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c000a21b:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a21e:	dd 06                	fld    QWORD PTR [esi]
c000a220:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a223:	d8 d1                	fcom   st(1)
c000a225:	df e0                	fnstsw ax
c000a227:	9e                   	sahf   
c000a228:	76 0f                	jbe    c000a239 <sinc_quad_vari_process+0x88>
c000a22a:	dd d8                	fstp   st(0)
c000a22c:	d9 e8                	fld1   
c000a22e:	d8 d9                	fcomp  st(1)
c000a230:	df e0                	fnstsw ax
c000a232:	9e                   	sahf   
c000a233:	77 0f                	ja     c000a244 <sinc_quad_vari_process+0x93>
c000a235:	dd d8                	fstp   st(0)
c000a237:	eb 11                	jmp    c000a24a <sinc_quad_vari_process+0x99>
c000a239:	dd d9                	fstp   st(1)
c000a23b:	d9 e8                	fld1   
c000a23d:	d8 d9                	fcomp  st(1)
c000a23f:	df e0                	fnstsw ax
c000a241:	9e                   	sahf   
c000a242:	76 04                	jbe    c000a248 <sinc_quad_vari_process+0x97>
c000a244:	de f9                	fdivp  st(1),st
c000a246:	eb 02                	jmp    c000a24a <sinc_quad_vari_process+0x99>
c000a248:	dd d8                	fstp   st(0)
c000a24a:	83 ec 10             	sub    esp,0x10
c000a24d:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a250:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a253:	e8 b8 53 01 00       	call   c001f610 <lrint>
c000a258:	40                   	inc    eax
c000a259:	0f af c5             	imul   eax,ebp
c000a25c:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c000a25f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a263:	dd 14 24             	fst    QWORD PTR [esp]
c000a266:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a26a:	e8 72 f8 ff ff       	call   c0009ae1 <fmod_one>
c000a26f:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a272:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a275:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a279:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a27d:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a281:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a285:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a288:	e8 83 53 01 00       	call   c001f610 <lrint>
c000a28d:	d9 e8                	fld1   
c000a28f:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a293:	0f af e8             	imul   ebp,eax
c000a296:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a29a:	01 e8                	add    eax,ebp
c000a29c:	99                   	cdq    
c000a29d:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a2a0:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a2a3:	dc 05 b8 0d 02 c0    	fadd   QWORD PTR ds:0xc0020db8
c000a2a9:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a2ad:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a2b0:	83 c4 10             	add    esp,0x10
c000a2b3:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a2b6:	7d 4b                	jge    c000a303 <sinc_quad_vari_process+0x152>
c000a2b8:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a2bb:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a2be:	01 c8                	add    eax,ecx
c000a2c0:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a2c3:	99                   	cdq    
c000a2c4:	f7 f9                	idiv   ecx
c000a2c6:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a2ca:	7d 09                	jge    c000a2d5 <sinc_quad_vari_process+0x124>
c000a2cc:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a2cf:	85 c0                	test   eax,eax
c000a2d1:	79 57                	jns    c000a32a <sinc_quad_vari_process+0x179>
c000a2d3:	eb 70                	jmp    c000a345 <sinc_quad_vari_process+0x194>
c000a2d5:	51                   	push   ecx
c000a2d6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a2da:	57                   	push   edi
c000a2db:	53                   	push   ebx
c000a2dc:	e8 57 f8 ff ff       	call   c0009b38 <prepare_data>
c000a2e1:	83 c4 10             	add    esp,0x10
c000a2e4:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a2e7:	85 c0                	test   eax,eax
c000a2e9:	0f 85 37 01 00 00    	jne    c000a426 <sinc_quad_vari_process+0x275>
c000a2ef:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a2f2:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a2f5:	01 c8                	add    eax,ecx
c000a2f7:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a2fa:	99                   	cdq    
c000a2fb:	f7 f9                	idiv   ecx
c000a2fd:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a301:	7c c9                	jl     c000a2cc <sinc_quad_vari_process+0x11b>
c000a303:	dd 04 24             	fld    QWORD PTR [esp]
c000a306:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a309:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a30d:	dd 1e                	fstp   QWORD PTR [esi]
c000a30f:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a312:	99                   	cdq    
c000a313:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a316:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a319:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a31c:	99                   	cdq    
c000a31d:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a320:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a323:	31 c0                	xor    eax,eax
c000a325:	e9 fc 00 00 00       	jmp    c000a426 <sinc_quad_vari_process+0x275>
c000a32a:	dd 04 24             	fld    QWORD PTR [esp]
c000a32d:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a330:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a334:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c000a338:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000a33c:	d9 c9                	fxch   st(1)
c000a33e:	de d9                	fcompp 
c000a340:	df e0                	fnstsw ax
c000a342:	9e                   	sahf   
c000a343:	73 be                	jae    c000a303 <sinc_quad_vari_process+0x152>
c000a345:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a349:	7e 2f                	jle    c000a37a <sinc_quad_vari_process+0x1c9>
c000a34b:	dd 06                	fld    QWORD PTR [esi]
c000a34d:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a350:	83 ec 10             	sub    esp,0x10
c000a353:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a356:	e8 95 52 01 00       	call   c001f5f0 <fabs>
c000a35b:	83 c4 10             	add    esp,0x10
c000a35e:	dc 1d 40 0f 02 c0    	fcomp  QWORD PTR ds:0xc0020f40
c000a364:	df e0                	fnstsw ax
c000a366:	9e                   	sahf   
c000a367:	76 11                	jbe    c000a37a <sinc_quad_vari_process+0x1c9>
c000a369:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a36c:	dc 26                	fsub   QWORD PTR [esi]
c000a36e:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a371:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a374:	dc 06                	fadd   QWORD PTR [esi]
c000a376:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a37a:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a37d:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a381:	d9 e8                	fld1   
c000a383:	d8 d9                	fcomp  st(1)
c000a385:	df e0                	fnstsw ax
c000a387:	9e                   	sahf   
c000a388:	77 04                	ja     c000a38e <sinc_quad_vari_process+0x1dd>
c000a38a:	dd d8                	fstp   st(0)
c000a38c:	d9 e8                	fld1   
c000a38e:	de c9                	fmulp  st(1),st
c000a390:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000a394:	50                   	push   eax
c000a395:	50                   	push   eax
c000a396:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a39a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a39e:	e8 2b f7 ff ff       	call   c0009ace <double_to_fp>
c000a3a3:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a3a7:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000a3ab:	89 c5                	mov    ebp,eax
c000a3ad:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a3b0:	e8 19 f7 ff ff       	call   c0009ace <double_to_fp>
c000a3b5:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a3b8:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000a3bb:	83 c4 0c             	add    esp,0xc
c000a3be:	8d 14 8a             	lea    edx,[edx+ecx*4]
c000a3c1:	89 c1                	mov    ecx,eax
c000a3c3:	52                   	push   edx
c000a3c4:	89 d8                	mov    eax,ebx
c000a3c6:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a3ca:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a3cd:	52                   	push   edx
c000a3ce:	52                   	push   edx
c000a3cf:	89 ea                	mov    edx,ebp
c000a3d1:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a3d4:	e8 99 ee ff ff       	call   c0009272 <calc_output_quad>
c000a3d9:	d9 e8                	fld1   
c000a3db:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a3df:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000a3e3:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a3e7:	dd 14 24             	fst    QWORD PTR [esp]
c000a3ea:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000a3ee:	e8 ee f6 ff ff       	call   c0009ae1 <fmod_one>
c000a3f3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a3f6:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a3f9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a3fd:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a401:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000a405:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a409:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a40c:	e8 ff 51 01 00       	call   c001f610 <lrint>
c000a411:	0f af e8             	imul   ebp,eax
c000a414:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a418:	01 e8                	add    eax,ebp
c000a41a:	99                   	cdq    
c000a41b:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a41e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a421:	e9 87 fe ff ff       	jmp    c000a2ad <sinc_quad_vari_process+0xfc>
c000a426:	83 c4 3c             	add    esp,0x3c
c000a429:	5b                   	pop    ebx
c000a42a:	5e                   	pop    esi
c000a42b:	5f                   	pop    edi
c000a42c:	5d                   	pop    ebp
c000a42d:	c3                   	ret    

c000a42e <sinc_stereo_vari_process>:
c000a42e:	55                   	push   ebp
c000a42f:	b8 05 00 00 00       	mov    eax,0x5
c000a434:	57                   	push   edi
c000a435:	56                   	push   esi
c000a436:	53                   	push   ebx
c000a437:	83 ec 3c             	sub    esp,0x3c
c000a43a:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000a43e:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000a442:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000a445:	85 db                	test   ebx,ebx
c000a447:	0f 84 56 02 00 00    	je     c000a6a3 <sinc_stereo_vari_process+0x275>
c000a44d:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000a450:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a453:	0f af d0             	imul   edx,eax
c000a456:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000a459:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c000a45d:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a464:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a467:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000a46e:	dd 06                	fld    QWORD PTR [esi]
c000a470:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c000a474:	55                   	push   ebp
c000a475:	55                   	push   ebp
c000a476:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a479:	e8 61 eb ff ff       	call   c0008fdf <is_bad_src_ratio>
c000a47e:	89 c2                	mov    edx,eax
c000a480:	58                   	pop    eax
c000a481:	59                   	pop    ecx
c000a482:	b8 16 00 00 00       	mov    eax,0x16
c000a487:	85 d2                	test   edx,edx
c000a489:	0f 85 14 02 00 00    	jne    c000a6a3 <sinc_stereo_vari_process+0x275>
c000a48f:	d9 05 50 0f 02 c0    	fld    DWORD PTR ds:0xc0020f50
c000a495:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c000a498:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a49b:	dd 06                	fld    QWORD PTR [esi]
c000a49d:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a4a0:	d8 d1                	fcom   st(1)
c000a4a2:	df e0                	fnstsw ax
c000a4a4:	9e                   	sahf   
c000a4a5:	76 0f                	jbe    c000a4b6 <sinc_stereo_vari_process+0x88>
c000a4a7:	dd d8                	fstp   st(0)
c000a4a9:	d9 e8                	fld1   
c000a4ab:	d8 d9                	fcomp  st(1)
c000a4ad:	df e0                	fnstsw ax
c000a4af:	9e                   	sahf   
c000a4b0:	77 0f                	ja     c000a4c1 <sinc_stereo_vari_process+0x93>
c000a4b2:	dd d8                	fstp   st(0)
c000a4b4:	eb 11                	jmp    c000a4c7 <sinc_stereo_vari_process+0x99>
c000a4b6:	dd d9                	fstp   st(1)
c000a4b8:	d9 e8                	fld1   
c000a4ba:	d8 d9                	fcomp  st(1)
c000a4bc:	df e0                	fnstsw ax
c000a4be:	9e                   	sahf   
c000a4bf:	76 04                	jbe    c000a4c5 <sinc_stereo_vari_process+0x97>
c000a4c1:	de f9                	fdivp  st(1),st
c000a4c3:	eb 02                	jmp    c000a4c7 <sinc_stereo_vari_process+0x99>
c000a4c5:	dd d8                	fstp   st(0)
c000a4c7:	83 ec 10             	sub    esp,0x10
c000a4ca:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a4cd:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a4d0:	e8 3b 51 01 00       	call   c001f610 <lrint>
c000a4d5:	40                   	inc    eax
c000a4d6:	0f af c5             	imul   eax,ebp
c000a4d9:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c000a4dc:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a4e0:	dd 14 24             	fst    QWORD PTR [esp]
c000a4e3:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a4e7:	e8 f5 f5 ff ff       	call   c0009ae1 <fmod_one>
c000a4ec:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a4ef:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a4f2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a4f6:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a4fa:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a4fe:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a502:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a505:	e8 06 51 01 00       	call   c001f610 <lrint>
c000a50a:	d9 e8                	fld1   
c000a50c:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a510:	0f af e8             	imul   ebp,eax
c000a513:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a517:	01 e8                	add    eax,ebp
c000a519:	99                   	cdq    
c000a51a:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a51d:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a520:	dc 05 b8 0d 02 c0    	fadd   QWORD PTR ds:0xc0020db8
c000a526:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a52a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a52d:	83 c4 10             	add    esp,0x10
c000a530:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a533:	7d 4b                	jge    c000a580 <sinc_stereo_vari_process+0x152>
c000a535:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a538:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a53b:	01 c8                	add    eax,ecx
c000a53d:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a540:	99                   	cdq    
c000a541:	f7 f9                	idiv   ecx
c000a543:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a547:	7d 09                	jge    c000a552 <sinc_stereo_vari_process+0x124>
c000a549:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a54c:	85 c0                	test   eax,eax
c000a54e:	79 57                	jns    c000a5a7 <sinc_stereo_vari_process+0x179>
c000a550:	eb 70                	jmp    c000a5c2 <sinc_stereo_vari_process+0x194>
c000a552:	51                   	push   ecx
c000a553:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a557:	57                   	push   edi
c000a558:	53                   	push   ebx
c000a559:	e8 da f5 ff ff       	call   c0009b38 <prepare_data>
c000a55e:	83 c4 10             	add    esp,0x10
c000a561:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a564:	85 c0                	test   eax,eax
c000a566:	0f 85 37 01 00 00    	jne    c000a6a3 <sinc_stereo_vari_process+0x275>
c000a56c:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a56f:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a572:	01 c8                	add    eax,ecx
c000a574:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a577:	99                   	cdq    
c000a578:	f7 f9                	idiv   ecx
c000a57a:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a57e:	7c c9                	jl     c000a549 <sinc_stereo_vari_process+0x11b>
c000a580:	dd 04 24             	fld    QWORD PTR [esp]
c000a583:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a586:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a58a:	dd 1e                	fstp   QWORD PTR [esi]
c000a58c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a58f:	99                   	cdq    
c000a590:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a593:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a596:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a599:	99                   	cdq    
c000a59a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a59d:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a5a0:	31 c0                	xor    eax,eax
c000a5a2:	e9 fc 00 00 00       	jmp    c000a6a3 <sinc_stereo_vari_process+0x275>
c000a5a7:	dd 04 24             	fld    QWORD PTR [esp]
c000a5aa:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a5ad:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a5b1:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c000a5b5:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000a5b9:	d9 c9                	fxch   st(1)
c000a5bb:	de d9                	fcompp 
c000a5bd:	df e0                	fnstsw ax
c000a5bf:	9e                   	sahf   
c000a5c0:	73 be                	jae    c000a580 <sinc_stereo_vari_process+0x152>
c000a5c2:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a5c6:	7e 2f                	jle    c000a5f7 <sinc_stereo_vari_process+0x1c9>
c000a5c8:	dd 06                	fld    QWORD PTR [esi]
c000a5ca:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a5cd:	83 ec 10             	sub    esp,0x10
c000a5d0:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a5d3:	e8 18 50 01 00       	call   c001f5f0 <fabs>
c000a5d8:	83 c4 10             	add    esp,0x10
c000a5db:	dc 1d 40 0f 02 c0    	fcomp  QWORD PTR ds:0xc0020f40
c000a5e1:	df e0                	fnstsw ax
c000a5e3:	9e                   	sahf   
c000a5e4:	76 11                	jbe    c000a5f7 <sinc_stereo_vari_process+0x1c9>
c000a5e6:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a5e9:	dc 26                	fsub   QWORD PTR [esi]
c000a5eb:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a5ee:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a5f1:	dc 06                	fadd   QWORD PTR [esi]
c000a5f3:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a5f7:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a5fa:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a5fe:	d9 e8                	fld1   
c000a600:	d8 d9                	fcomp  st(1)
c000a602:	df e0                	fnstsw ax
c000a604:	9e                   	sahf   
c000a605:	77 04                	ja     c000a60b <sinc_stereo_vari_process+0x1dd>
c000a607:	dd d8                	fstp   st(0)
c000a609:	d9 e8                	fld1   
c000a60b:	de c9                	fmulp  st(1),st
c000a60d:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000a611:	50                   	push   eax
c000a612:	50                   	push   eax
c000a613:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a617:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a61b:	e8 ae f4 ff ff       	call   c0009ace <double_to_fp>
c000a620:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a624:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000a628:	89 c5                	mov    ebp,eax
c000a62a:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a62d:	e8 9c f4 ff ff       	call   c0009ace <double_to_fp>
c000a632:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a635:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000a638:	83 c4 0c             	add    esp,0xc
c000a63b:	8d 14 8a             	lea    edx,[edx+ecx*4]
c000a63e:	89 c1                	mov    ecx,eax
c000a640:	52                   	push   edx
c000a641:	89 d8                	mov    eax,ebx
c000a643:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a647:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a64a:	52                   	push   edx
c000a64b:	52                   	push   edx
c000a64c:	89 ea                	mov    edx,ebp
c000a64e:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a651:	e8 da ea ff ff       	call   c0009130 <calc_output_stereo>
c000a656:	d9 e8                	fld1   
c000a658:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a65c:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000a660:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a664:	dd 14 24             	fst    QWORD PTR [esp]
c000a667:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000a66b:	e8 71 f4 ff ff       	call   c0009ae1 <fmod_one>
c000a670:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a673:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a676:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a67a:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a67e:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000a682:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a686:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a689:	e8 82 4f 01 00       	call   c001f610 <lrint>
c000a68e:	0f af e8             	imul   ebp,eax
c000a691:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a695:	01 e8                	add    eax,ebp
c000a697:	99                   	cdq    
c000a698:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a69b:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a69e:	e9 87 fe ff ff       	jmp    c000a52a <sinc_stereo_vari_process+0xfc>
c000a6a3:	83 c4 3c             	add    esp,0x3c
c000a6a6:	5b                   	pop    ebx
c000a6a7:	5e                   	pop    esi
c000a6a8:	5f                   	pop    edi
c000a6a9:	5d                   	pop    ebp
c000a6aa:	c3                   	ret    

c000a6ab <sinc_mono_vari_process>:
c000a6ab:	55                   	push   ebp
c000a6ac:	b8 05 00 00 00       	mov    eax,0x5
c000a6b1:	57                   	push   edi
c000a6b2:	56                   	push   esi
c000a6b3:	53                   	push   ebx
c000a6b4:	83 ec 3c             	sub    esp,0x3c
c000a6b7:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000a6bb:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000a6bf:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000a6c2:	85 db                	test   ebx,ebx
c000a6c4:	0f 84 55 02 00 00    	je     c000a91f <sinc_mono_vari_process+0x274>
c000a6ca:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000a6cd:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a6d0:	0f af d0             	imul   edx,eax
c000a6d3:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000a6d6:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c000a6da:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a6e1:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a6e4:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000a6eb:	dd 06                	fld    QWORD PTR [esi]
c000a6ed:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c000a6f1:	51                   	push   ecx
c000a6f2:	51                   	push   ecx
c000a6f3:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a6f6:	e8 e4 e8 ff ff       	call   c0008fdf <is_bad_src_ratio>
c000a6fb:	5d                   	pop    ebp
c000a6fc:	89 c2                	mov    edx,eax
c000a6fe:	58                   	pop    eax
c000a6ff:	85 d2                	test   edx,edx
c000a701:	b8 16 00 00 00       	mov    eax,0x16
c000a706:	0f 85 13 02 00 00    	jne    c000a91f <sinc_mono_vari_process+0x274>
c000a70c:	d9 05 50 0f 02 c0    	fld    DWORD PTR ds:0xc0020f50
c000a712:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c000a715:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a718:	dd 06                	fld    QWORD PTR [esi]
c000a71a:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a71d:	d8 d1                	fcom   st(1)
c000a71f:	df e0                	fnstsw ax
c000a721:	9e                   	sahf   
c000a722:	76 0f                	jbe    c000a733 <sinc_mono_vari_process+0x88>
c000a724:	dd d8                	fstp   st(0)
c000a726:	d9 e8                	fld1   
c000a728:	d8 d9                	fcomp  st(1)
c000a72a:	df e0                	fnstsw ax
c000a72c:	9e                   	sahf   
c000a72d:	77 0f                	ja     c000a73e <sinc_mono_vari_process+0x93>
c000a72f:	dd d8                	fstp   st(0)
c000a731:	eb 11                	jmp    c000a744 <sinc_mono_vari_process+0x99>
c000a733:	dd d9                	fstp   st(1)
c000a735:	d9 e8                	fld1   
c000a737:	d8 d9                	fcomp  st(1)
c000a739:	df e0                	fnstsw ax
c000a73b:	9e                   	sahf   
c000a73c:	76 04                	jbe    c000a742 <sinc_mono_vari_process+0x97>
c000a73e:	de f9                	fdivp  st(1),st
c000a740:	eb 02                	jmp    c000a744 <sinc_mono_vari_process+0x99>
c000a742:	dd d8                	fstp   st(0)
c000a744:	83 ec 10             	sub    esp,0x10
c000a747:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a74a:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a74d:	e8 be 4e 01 00       	call   c001f610 <lrint>
c000a752:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c000a755:	40                   	inc    eax
c000a756:	dd 14 24             	fst    QWORD PTR [esp]
c000a759:	0f af e8             	imul   ebp,eax
c000a75c:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000a760:	e8 7c f3 ff ff       	call   c0009ae1 <fmod_one>
c000a765:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a768:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a76c:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a76f:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a773:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c000a777:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a77b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a77f:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a782:	e8 89 4e 01 00       	call   c001f610 <lrint>
c000a787:	d9 e8                	fld1   
c000a789:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a78d:	0f af 44 24 38       	imul   eax,DWORD PTR [esp+0x38]
c000a792:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a796:	99                   	cdq    
c000a797:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a79a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a79d:	dc 05 b8 0d 02 c0    	fadd   QWORD PTR ds:0xc0020db8
c000a7a3:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000a7a7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a7aa:	83 c4 10             	add    esp,0x10
c000a7ad:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a7b0:	7d 44                	jge    c000a7f6 <sinc_mono_vari_process+0x14b>
c000a7b2:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a7b5:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a7b8:	01 c8                	add    eax,ecx
c000a7ba:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a7bd:	99                   	cdq    
c000a7be:	f7 f9                	idiv   ecx
c000a7c0:	39 d5                	cmp    ebp,edx
c000a7c2:	7d 09                	jge    c000a7cd <sinc_mono_vari_process+0x122>
c000a7c4:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a7c7:	85 c0                	test   eax,eax
c000a7c9:	79 52                	jns    c000a81d <sinc_mono_vari_process+0x172>
c000a7cb:	eb 6b                	jmp    c000a838 <sinc_mono_vari_process+0x18d>
c000a7cd:	52                   	push   edx
c000a7ce:	55                   	push   ebp
c000a7cf:	57                   	push   edi
c000a7d0:	53                   	push   ebx
c000a7d1:	e8 62 f3 ff ff       	call   c0009b38 <prepare_data>
c000a7d6:	83 c4 10             	add    esp,0x10
c000a7d9:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a7dc:	85 c0                	test   eax,eax
c000a7de:	0f 85 3b 01 00 00    	jne    c000a91f <sinc_mono_vari_process+0x274>
c000a7e4:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a7e7:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a7ea:	01 c8                	add    eax,ecx
c000a7ec:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a7ef:	99                   	cdq    
c000a7f0:	f7 f9                	idiv   ecx
c000a7f2:	39 d5                	cmp    ebp,edx
c000a7f4:	7c ce                	jl     c000a7c4 <sinc_mono_vari_process+0x119>
c000a7f6:	dd 04 24             	fld    QWORD PTR [esp]
c000a7f9:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a7fc:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a800:	dd 1e                	fstp   QWORD PTR [esi]
c000a802:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a805:	99                   	cdq    
c000a806:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a809:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a80c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a80f:	99                   	cdq    
c000a810:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a813:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a816:	31 c0                	xor    eax,eax
c000a818:	e9 02 01 00 00       	jmp    c000a91f <sinc_mono_vari_process+0x274>
c000a81d:	dd 04 24             	fld    QWORD PTR [esp]
c000a820:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a823:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a827:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c000a82b:	db 44 24 10          	fild   DWORD PTR [esp+0x10]
c000a82f:	d9 c9                	fxch   st(1)
c000a831:	de d9                	fcompp 
c000a833:	df e0                	fnstsw ax
c000a835:	9e                   	sahf   
c000a836:	77 be                	ja     c000a7f6 <sinc_mono_vari_process+0x14b>
c000a838:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a83c:	7e 2f                	jle    c000a86d <sinc_mono_vari_process+0x1c2>
c000a83e:	dd 06                	fld    QWORD PTR [esi]
c000a840:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a843:	83 ec 10             	sub    esp,0x10
c000a846:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a849:	e8 a2 4d 01 00       	call   c001f5f0 <fabs>
c000a84e:	83 c4 10             	add    esp,0x10
c000a851:	dc 1d 40 0f 02 c0    	fcomp  QWORD PTR ds:0xc0020f40
c000a857:	df e0                	fnstsw ax
c000a859:	9e                   	sahf   
c000a85a:	76 11                	jbe    c000a86d <sinc_mono_vari_process+0x1c2>
c000a85c:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a85f:	dc 26                	fsub   QWORD PTR [esi]
c000a861:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a864:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a867:	dc 06                	fadd   QWORD PTR [esi]
c000a869:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a86d:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a870:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a874:	d9 e8                	fld1   
c000a876:	d8 d9                	fcomp  st(1)
c000a878:	df e0                	fnstsw ax
c000a87a:	9e                   	sahf   
c000a87b:	77 04                	ja     c000a881 <sinc_mono_vari_process+0x1d6>
c000a87d:	dd d8                	fstp   st(0)
c000a87f:	d9 e8                	fld1   
c000a881:	de c9                	fmulp  st(1),st
c000a883:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a887:	50                   	push   eax
c000a888:	50                   	push   eax
c000a889:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a88d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a891:	e8 38 f2 ff ff       	call   c0009ace <double_to_fp>
c000a896:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a89a:	dc 4c 24 20          	fmul   QWORD PTR [esp+0x20]
c000a89e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a8a2:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a8a5:	e8 24 f2 ff ff       	call   c0009ace <double_to_fp>
c000a8aa:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000a8ae:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a8b2:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a8b5:	89 c1                	mov    ecx,eax
c000a8b7:	89 d8                	mov    eax,ebx
c000a8b9:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c000a8bd:	e8 89 e7 ff ff       	call   c000904b <calc_output_single>
c000a8c2:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000a8c5:	dc 4c 24 20          	fmul   QWORD PTR [esp+0x20]
c000a8c9:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000a8cc:	d9 1c 90             	fstp   DWORD PTR [eax+edx*4]
c000a8cf:	d9 e8                	fld1   
c000a8d1:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a8d5:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000a8d8:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a8dc:	dd 14 24             	fst    QWORD PTR [esp]
c000a8df:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a8e3:	e8 f9 f1 ff ff       	call   c0009ae1 <fmod_one>
c000a8e8:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a8eb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a8ef:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a8f2:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a8f6:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a8fa:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a8fe:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a902:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a905:	e8 06 4d 01 00       	call   c001f610 <lrint>
c000a90a:	0f af 44 24 38       	imul   eax,DWORD PTR [esp+0x38]
c000a90f:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a913:	99                   	cdq    
c000a914:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a917:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a91a:	e9 88 fe ff ff       	jmp    c000a7a7 <sinc_mono_vari_process+0xfc>
c000a91f:	83 c4 3c             	add    esp,0x3c
c000a922:	5b                   	pop    ebx
c000a923:	5e                   	pop    esi
c000a924:	5f                   	pop    edi
c000a925:	5d                   	pop    ebp
c000a926:	c3                   	ret    

c000a927 <sinc_get_name>:
c000a927:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a92b:	31 c0                	xor    eax,eax
c000a92d:	83 fa 02             	cmp    edx,0x2
c000a930:	77 07                	ja     c000a939 <sinc_get_name+0x12>
c000a932:	8b 04 95 20 0e 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdf1e0]
c000a939:	c3                   	ret    

c000a93a <sinc_get_description>:
c000a93a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a93e:	31 c0                	xor    eax,eax
c000a940:	83 fa 02             	cmp    edx,0x2
c000a943:	77 07                	ja     c000a94c <sinc_get_description+0x12>
c000a945:	8b 04 95 14 0e 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdf1ec]
c000a94c:	c3                   	ret    

c000a94d <sinc_set_converter>:
c000a94d:	53                   	push   ebx
c000a94e:	81 ec 58 08 00 00    	sub    esp,0x858
c000a954:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000a95b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000a95e:	85 c0                	test   eax,eax
c000a960:	74 13                	je     c000a975 <sinc_set_converter+0x28>
c000a962:	83 ec 0c             	sub    esp,0xc
c000a965:	50                   	push   eax
c000a966:	e8 ae 16 00 00       	call   c000c019 <free>
c000a96b:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000a972:	83 c4 10             	add    esp,0x10
c000a975:	50                   	push   eax
c000a976:	68 44 08 00 00       	push   0x844
c000a97b:	6a 00                	push   0x0
c000a97d:	8d 44 24 18          	lea    eax,[esp+0x18]
c000a981:	50                   	push   eax
c000a982:	e8 33 5d ff ff       	call   c00006ba <memset>
c000a987:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000a98a:	83 c4 10             	add    esp,0x10
c000a98d:	b8 0b 00 00 00       	mov    eax,0xb
c000a992:	81 fa 80 00 00 00    	cmp    edx,0x80
c000a998:	7f 6e                	jg     c000aa08 <sinc_set_converter+0xbb>
c000a99a:	83 fa 01             	cmp    edx,0x1
c000a99d:	75 10                	jne    c000a9af <sinc_set_converter+0x62>
c000a99f:	c7 43 24 ab a6 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000a6ab
c000a9a6:	c7 43 20 ab a6 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000a6ab
c000a9ad:	eb 4d                	jmp    c000a9fc <sinc_set_converter+0xaf>
c000a9af:	83 fa 02             	cmp    edx,0x2
c000a9b2:	75 10                	jne    c000a9c4 <sinc_set_converter+0x77>
c000a9b4:	c7 43 24 2e a4 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000a42e
c000a9bb:	c7 43 20 2e a4 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000a42e
c000a9c2:	eb 38                	jmp    c000a9fc <sinc_set_converter+0xaf>
c000a9c4:	83 fa 04             	cmp    edx,0x4
c000a9c7:	75 10                	jne    c000a9d9 <sinc_set_converter+0x8c>
c000a9c9:	c7 43 24 b1 a1 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000a1b1
c000a9d0:	c7 43 20 b1 a1 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000a1b1
c000a9d7:	eb 23                	jmp    c000a9fc <sinc_set_converter+0xaf>
c000a9d9:	83 fa 06             	cmp    edx,0x6
c000a9dc:	75 10                	jne    c000a9ee <sinc_set_converter+0xa1>
c000a9de:	c7 43 24 34 9f 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0009f34
c000a9e5:	c7 43 20 34 9f 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0009f34
c000a9ec:	eb 0e                	jmp    c000a9fc <sinc_set_converter+0xaf>
c000a9ee:	c7 43 24 b2 9c 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0009cb2
c000a9f5:	c7 43 20 b2 9c 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0009cb2
c000a9fc:	c7 43 28 70 96 00 c0 	mov    DWORD PTR [ebx+0x28],0xc0009670
c000aa03:	b8 0a 00 00 00       	mov    eax,0xa
c000aa08:	81 c4 58 08 00 00    	add    esp,0x858
c000aa0e:	5b                   	pop    ebx
c000aa0f:	c3                   	ret    

c000aa10 <is_bad_src_ratio>:
c000aa10:	83 ec 0c             	sub    esp,0xc
c000aa13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa17:	89 04 24             	mov    DWORD PTR [esp],eax
c000aa1a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aa1e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000aa22:	dd 04 24             	fld    QWORD PTR [esp]
c000aa25:	dd 05 40 0d 02 c0    	fld    QWORD PTR ds:0xc0020d40
c000aa2b:	de d9                	fcompp 
c000aa2d:	df e0                	fnstsw ax
c000aa2f:	f6 c4 45             	test   ah,0x45
c000aa32:	74 10                	je     c000aa44 <is_bad_src_ratio+0x34>
c000aa34:	dd 04 24             	fld    QWORD PTR [esp]
c000aa37:	dc 1d 48 0d 02 c0    	fcomp  QWORD PTR ds:0xc0020d48
c000aa3d:	df e0                	fnstsw ax
c000aa3f:	f6 c4 45             	test   ah,0x45
c000aa42:	75 07                	jne    c000aa4b <is_bad_src_ratio+0x3b>
c000aa44:	b8 01 00 00 00       	mov    eax,0x1
c000aa49:	eb 05                	jmp    c000aa50 <is_bad_src_ratio+0x40>
c000aa4b:	b8 00 00 00 00       	mov    eax,0x0
c000aa50:	83 c4 0c             	add    esp,0xc
c000aa53:	c3                   	ret    

c000aa54 <fmod_one>:
c000aa54:	83 ec 2c             	sub    esp,0x2c
c000aa57:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000aa5b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aa5f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000aa63:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000aa67:	83 ec 08             	sub    esp,0x8
c000aa6a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa6e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa72:	e8 99 4b 01 00       	call   c001f610 <lrint>
c000aa77:	83 c4 10             	add    esp,0x10
c000aa7a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000aa7e:	db 44 24 04          	fild   DWORD PTR [esp+0x4]
c000aa82:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000aa86:	de e1                	fsubrp st(1),st
c000aa88:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000aa8c:	d9 ee                	fldz   
c000aa8e:	dc 5c 24 18          	fcomp  QWORD PTR [esp+0x18]
c000aa92:	df e0                	fnstsw ax
c000aa94:	f6 c4 45             	test   ah,0x45
c000aa97:	75 0a                	jne    c000aaa3 <fmod_one+0x4f>
c000aa99:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000aa9d:	d9 e8                	fld1   
c000aa9f:	de c1                	faddp  st(1),st
c000aaa1:	eb 04                	jmp    c000aaa7 <fmod_one+0x53>
c000aaa3:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000aaa7:	83 c4 2c             	add    esp,0x2c
c000aaaa:	c3                   	ret    

c000aaab <zoh_vari_process>:
c000aaab:	55                   	push   ebp
c000aaac:	57                   	push   edi
c000aaad:	56                   	push   esi
c000aaae:	53                   	push   ebx
c000aaaf:	83 ec 2c             	sub    esp,0x2c
c000aab2:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c000aab6:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000aaba:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000aac2:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000aac6:	0f 8e 30 02 00 00    	jle    c000acfc <zoh_vari_process+0x251>
c000aacc:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000aacf:	c7 44 24 0c 05 00 00 00 	mov    DWORD PTR [esp+0xc],0x5
c000aad7:	85 db                	test   ebx,ebx
c000aad9:	0f 84 1d 02 00 00    	je     c000acfc <zoh_vari_process+0x251>
c000aadf:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000aae2:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000aae6:	74 19                	je     c000ab01 <zoh_vari_process+0x56>
c000aae8:	31 d2                	xor    edx,edx
c000aaea:	39 c2                	cmp    edx,eax
c000aaec:	7d 0c                	jge    c000aafa <zoh_vari_process+0x4f>
c000aaee:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000aaf0:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c000aaf3:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c000aaf7:	42                   	inc    edx
c000aaf8:	eb f0                	jmp    c000aaea <zoh_vari_process+0x3f>
c000aafa:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000ab01:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000ab04:	0f af d0             	imul   edx,eax
c000ab07:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000ab0a:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000ab0e:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000ab15:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000ab18:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000ab1f:	dd 07                	fld    QWORD PTR [edi]
c000ab21:	dd 14 24             	fst    QWORD PTR [esp]
c000ab24:	50                   	push   eax
c000ab25:	50                   	push   eax
c000ab26:	dd 1c 24             	fstp   QWORD PTR [esp]
c000ab29:	e8 e2 fe ff ff       	call   c000aa10 <is_bad_src_ratio>
c000ab2e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ab32:	5a                   	pop    edx
c000ab33:	59                   	pop    ecx
c000ab34:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000ab39:	0f 85 b5 01 00 00    	jne    c000acf4 <zoh_vari_process+0x249>
c000ab3f:	dd 47 08             	fld    QWORD PTR [edi+0x8]
c000ab42:	d9 e8                	fld1   
c000ab44:	d8 d1                	fcom   st(1)
c000ab46:	df e0                	fnstsw ax
c000ab48:	9e                   	sahf   
c000ab49:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000ab4d:	0f 86 83 00 00 00    	jbe    c000abd6 <zoh_vari_process+0x12b>
c000ab53:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000ab56:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000ab59:	7d 7b                	jge    c000abd6 <zoh_vari_process+0x12b>
c000ab5b:	d9 c0                	fld    st(0)
c000ab5d:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c000ab60:	da 43 10             	fiadd  DWORD PTR [ebx+0x10]
c000ab63:	da 5b 0c             	ficomp DWORD PTR [ebx+0xc]
c000ab66:	df e0                	fnstsw ax
c000ab68:	9e                   	sahf   
c000ab69:	73 6b                	jae    c000abd6 <zoh_vari_process+0x12b>
c000ab6b:	85 d2                	test   edx,edx
c000ab6d:	7e 36                	jle    c000aba5 <zoh_vari_process+0xfa>
c000ab6f:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000ab73:	dd 07                	fld    QWORD PTR [edi]
c000ab75:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c000ab78:	83 ec 10             	sub    esp,0x10
c000ab7b:	dd 1c 24             	fstp   QWORD PTR [esp]
c000ab7e:	e8 6d 4a 01 00       	call   c001f5f0 <fabs>
c000ab83:	83 c4 10             	add    esp,0x10
c000ab86:	dc 1d b8 0d 02 c0    	fcomp  QWORD PTR ds:0xc0020db8
c000ab8c:	df e0                	fnstsw ax
c000ab8e:	9e                   	sahf   
c000ab8f:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000ab93:	76 10                	jbe    c000aba5 <zoh_vari_process+0xfa>
c000ab95:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c000ab98:	dc 27                	fsub   QWORD PTR [edi]
c000ab9a:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c000ab9d:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c000aba0:	dc 07                	fadd   QWORD PTR [edi]
c000aba2:	dd 1c 24             	fstp   QWORD PTR [esp]
c000aba5:	31 c0                	xor    eax,eax
c000aba7:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000abaa:	7e 13                	jle    c000abbf <zoh_vari_process+0x114>
c000abac:	d9 44 83 1c          	fld    DWORD PTR [ebx+eax*4+0x1c]
c000abb0:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000abb3:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000abb6:	40                   	inc    eax
c000abb7:	d9 1c 8a             	fstp   DWORD PTR [edx+ecx*4]
c000abba:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000abbd:	eb e8                	jmp    c000aba7 <zoh_vari_process+0xfc>
c000abbf:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000abc3:	dc 34 24             	fdiv   QWORD PTR [esp]
c000abc6:	de c1                	faddp  st(1),st
c000abc8:	e9 75 ff ff ff       	jmp    c000ab42 <zoh_vari_process+0x97>
c000abcd:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000abd1:	dc 34 24             	fdiv   QWORD PTR [esp]
c000abd4:	de c1                	faddp  st(1),st
c000abd6:	83 ec 10             	sub    esp,0x10
c000abd9:	dd 14 24             	fst    QWORD PTR [esp]
c000abdc:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000abe0:	e8 6f fe ff ff       	call   c000aa54 <fmod_one>
c000abe5:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000abe8:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c000abec:	d8 e1                	fsub   st,st(1)
c000abee:	d9 c9                	fxch   st(1)
c000abf0:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000abf4:	dd 1c 24             	fstp   QWORD PTR [esp]
c000abf7:	e8 14 4a 01 00       	call   c001f610 <lrint>
c000abfc:	83 c4 10             	add    esp,0x10
c000abff:	0f af e8             	imul   ebp,eax
c000ac02:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000ac05:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000ac08:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000ac0c:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000ac0f:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000ac12:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000ac15:	0f 8d 80 00 00 00    	jge    c000ac9b <zoh_vari_process+0x1f0>
c000ac1b:	d9 c0                	fld    st(0)
c000ac1d:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c000ac20:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c000ac24:	da 44 24 18          	fiadd  DWORD PTR [esp+0x18]
c000ac28:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000ac2c:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000ac30:	de d9                	fcompp 
c000ac32:	df e0                	fnstsw ax
c000ac34:	9e                   	sahf   
c000ac35:	72 64                	jb     c000ac9b <zoh_vari_process+0x1f0>
c000ac37:	85 d2                	test   edx,edx
c000ac39:	7e 36                	jle    c000ac71 <zoh_vari_process+0x1c6>
c000ac3b:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000ac3f:	dd 07                	fld    QWORD PTR [edi]
c000ac41:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c000ac44:	83 ec 10             	sub    esp,0x10
c000ac47:	dd 1c 24             	fstp   QWORD PTR [esp]
c000ac4a:	e8 a1 49 01 00       	call   c001f5f0 <fabs>
c000ac4f:	83 c4 10             	add    esp,0x10
c000ac52:	dc 1d b8 0d 02 c0    	fcomp  QWORD PTR ds:0xc0020db8
c000ac58:	df e0                	fnstsw ax
c000ac5a:	9e                   	sahf   
c000ac5b:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000ac5f:	76 10                	jbe    c000ac71 <zoh_vari_process+0x1c6>
c000ac61:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c000ac64:	dc 27                	fsub   QWORD PTR [edi]
c000ac66:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c000ac69:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c000ac6c:	dc 07                	fadd   QWORD PTR [edi]
c000ac6e:	dd 1c 24             	fstp   QWORD PTR [esp]
c000ac71:	31 d2                	xor    edx,edx
c000ac73:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ac76:	39 d0                	cmp    eax,edx
c000ac78:	0f 8e 4f ff ff ff    	jle    c000abcd <zoh_vari_process+0x122>
c000ac7e:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000ac81:	29 c1                	sub    ecx,eax
c000ac83:	89 c8                	mov    eax,ecx
c000ac85:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000ac87:	01 d0                	add    eax,edx
c000ac89:	42                   	inc    edx
c000ac8a:	d9 04 81             	fld    DWORD PTR [ecx+eax*4]
c000ac8d:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000ac90:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000ac93:	d9 1c 88             	fstp   DWORD PTR [eax+ecx*4]
c000ac96:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000ac99:	eb d8                	jmp    c000ac73 <zoh_vari_process+0x1c8>
c000ac9b:	39 e9                	cmp    ecx,ebp
c000ac9d:	7d 13                	jge    c000acb2 <zoh_vari_process+0x207>
c000ac9f:	89 e8                	mov    eax,ebp
c000aca1:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000aca4:	29 c8                	sub    eax,ecx
c000aca6:	99                   	cdq    
c000aca7:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000acaa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000acae:	da 44 24 10          	fiadd  DWORD PTR [esp+0x10]
c000acb2:	dd 5f 08             	fstp   QWORD PTR [edi+0x8]
c000acb5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000acb8:	85 c0                	test   eax,eax
c000acba:	7f 1b                	jg     c000acd7 <zoh_vari_process+0x22c>
c000acbc:	dd 04 24             	fld    QWORD PTR [esp]
c000acbf:	dd 1f                	fstp   QWORD PTR [edi]
c000acc1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000acc4:	99                   	cdq    
c000acc5:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000acc8:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000accb:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000acce:	99                   	cdq    
c000accf:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000acd2:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000acd5:	eb 25                	jmp    c000acfc <zoh_vari_process+0x251>
c000acd7:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000acda:	31 d2                	xor    edx,edx
c000acdc:	29 e8                	sub    eax,ebp
c000acde:	c1 e0 02             	shl    eax,0x2
c000ace1:	39 d5                	cmp    ebp,edx
c000ace3:	7e d7                	jle    c000acbc <zoh_vari_process+0x211>
c000ace5:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000ace7:	d9 04 01             	fld    DWORD PTR [ecx+eax*1]
c000acea:	83 c0 04             	add    eax,0x4
c000aced:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c000acf1:	42                   	inc    edx
c000acf2:	eb ed                	jmp    c000ace1 <zoh_vari_process+0x236>
c000acf4:	c7 44 24 0c 16 00 00 00 	mov    DWORD PTR [esp+0xc],0x16
c000acfc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ad00:	83 c4 2c             	add    esp,0x2c
c000ad03:	5b                   	pop    ebx
c000ad04:	5e                   	pop    esi
c000ad05:	5f                   	pop    edi
c000ad06:	5d                   	pop    ebp
c000ad07:	c3                   	ret    

c000ad08 <zoh_reset>:
c000ad08:	83 ec 0c             	sub    esp,0xc
c000ad0b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ad0f:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000ad12:	85 c0                	test   eax,eax
c000ad14:	74 20                	je     c000ad36 <zoh_reset+0x2e>
c000ad16:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000ad19:	c7 40 08 01 00 00 00 	mov    DWORD PTR [eax+0x8],0x1
c000ad20:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000ad23:	51                   	push   ecx
c000ad24:	c1 e2 02             	shl    edx,0x2
c000ad27:	83 c0 1c             	add    eax,0x1c
c000ad2a:	52                   	push   edx
c000ad2b:	6a 00                	push   0x0
c000ad2d:	50                   	push   eax
c000ad2e:	e8 87 59 ff ff       	call   c00006ba <memset>
c000ad33:	83 c4 10             	add    esp,0x10
c000ad36:	83 c4 0c             	add    esp,0xc
c000ad39:	c3                   	ret    

c000ad3a <zoh_get_name>:
c000ad3a:	31 c0                	xor    eax,eax
c000ad3c:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000ad41:	75 05                	jne    c000ad48 <zoh_get_name+0xe>
c000ad43:	b8 54 0f 02 c0       	mov    eax,0xc0020f54
c000ad48:	c3                   	ret    

c000ad49 <zoh_get_description>:
c000ad49:	31 c0                	xor    eax,eax
c000ad4b:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000ad50:	75 05                	jne    c000ad57 <zoh_get_description+0xe>
c000ad52:	b8 65 0f 02 c0       	mov    eax,0xc0020f65
c000ad57:	c3                   	ret    

c000ad58 <zoh_set_converter>:
c000ad58:	53                   	push   ebx
c000ad59:	b8 0a 00 00 00       	mov    eax,0xa
c000ad5e:	83 ec 08             	sub    esp,0x8
c000ad61:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ad65:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000ad6a:	75 6e                	jne    c000adda <zoh_set_converter+0x82>
c000ad6c:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000ad6f:	85 c0                	test   eax,eax
c000ad71:	74 13                	je     c000ad86 <zoh_set_converter+0x2e>
c000ad73:	83 ec 0c             	sub    esp,0xc
c000ad76:	50                   	push   eax
c000ad77:	e8 9d 12 00 00       	call   c000c019 <free>
c000ad7c:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000ad83:	83 c4 10             	add    esp,0x10
c000ad86:	50                   	push   eax
c000ad87:	50                   	push   eax
c000ad88:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000ad8b:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000ad92:	50                   	push   eax
c000ad93:	6a 01                	push   0x1
c000ad95:	e8 9f 12 00 00       	call   c000c039 <calloc>
c000ad9a:	89 c2                	mov    edx,eax
c000ad9c:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000ad9f:	83 c4 10             	add    esp,0x10
c000ada2:	b8 01 00 00 00       	mov    eax,0x1
c000ada7:	85 d2                	test   edx,edx
c000ada9:	74 2f                	je     c000adda <zoh_set_converter+0x82>
c000adab:	83 ec 0c             	sub    esp,0xc
c000adae:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000adb1:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000adb4:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000adba:	c7 43 24 ab aa 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000aaab
c000adc1:	c7 43 20 ab aa 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000aaab
c000adc8:	c7 43 28 08 ad 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ad08
c000adcf:	53                   	push   ebx
c000add0:	e8 33 ff ff ff       	call   c000ad08 <zoh_reset>
c000add5:	83 c4 10             	add    esp,0x10
c000add8:	31 c0                	xor    eax,eax
c000adda:	83 c4 08             	add    esp,0x8
c000addd:	5b                   	pop    ebx
c000adde:	c3                   	ret    
c000addf:	90                   	nop

c000ade0 <Computer::close(int, int, void*)>:
c000ade0:	57                   	push   edi
c000ade1:	56                   	push   esi
c000ade2:	53                   	push   ebx
c000ade3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ade7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000adeb:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000adef:	83 ec 0c             	sub    esp,0xc
c000adf2:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000adf8:	e8 05 59 00 00       	call   c0010702 <Device::closeAll()>
c000adfd:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000ae03:	83 c4 10             	add    esp,0x10
c000ae06:	8b 10                	mov    edx,DWORD PTR [eax]
c000ae08:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000ae0c:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000ae14:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000ae18:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae1c:	5b                   	pop    ebx
c000ae1d:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000ae20:	5e                   	pop    esi
c000ae21:	5f                   	pop    edi
c000ae22:	ff e0                	jmp    eax

c000ae24 <Computer::Computer()>:
c000ae24:	83 ec 0c             	sub    esp,0xc
c000ae27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae2b:	83 ec 08             	sub    esp,0x8
c000ae2e:	68 9c 0f 02 c0       	push   0xc0020f9c
c000ae33:	50                   	push   eax
c000ae34:	e8 43 59 00 00       	call   c001077c <Device::Device(char const*)>
c000ae39:	83 c4 10             	add    esp,0x10
c000ae3c:	ba 80 11 02 c0       	mov    edx,0xc0021180
c000ae41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae45:	89 10                	mov    DWORD PTR [eax],edx
c000ae47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae4b:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000ae55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae59:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000ae63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae67:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000ae6d:	83 ca 04             	or     edx,0x4
c000ae70:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000ae76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae7a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ae80:	0f b6 d0             	movzx  edx,al
c000ae83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae87:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000ae8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae92:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ae98:	0f b6 d0             	movzx  edx,al
c000ae9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae9f:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000aea4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aea8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000aeae:	8d 50 01             	lea    edx,[eax+0x1]
c000aeb1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000aeb5:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000aebb:	0f b6 d0             	movzx  edx,al
c000aebe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aec2:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000aec6:	83 e1 3f             	and    ecx,0x3f
c000aec9:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000aecd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aed1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000aed7:	0f b6 d0             	movzx  edx,al
c000aeda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aede:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000aee5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aee9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000aeef:	0f b6 d0             	movzx  edx,al
c000aef2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aef6:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000aefb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aeff:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000af05:	8d 50 01             	lea    edx,[eax+0x1]
c000af08:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000af0c:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000af12:	0f b6 d0             	movzx  edx,al
c000af15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af19:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000af1d:	83 e1 3f             	and    ecx,0x3f
c000af20:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000af24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af28:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000af2e:	0f b6 d0             	movzx  edx,al
c000af31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af35:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000af3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af40:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000af46:	0f b6 d0             	movzx  edx,al
c000af49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af4d:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000af52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af56:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000af5c:	8d 50 01             	lea    edx,[eax+0x1]
c000af5f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000af63:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000af69:	0f b6 d0             	movzx  edx,al
c000af6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af70:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000af74:	83 e1 3f             	and    ecx,0x3f
c000af77:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000af7b:	90                   	nop
c000af7c:	83 c4 0c             	add    esp,0xc
c000af7f:	c3                   	ret    

c000af80 <Computer::setBootMessage(char const*)>:
c000af80:	c3                   	ret    
c000af81:	90                   	nop

c000af82 <Computer::start()>:
c000af82:	56                   	push   esi
c000af83:	53                   	push   ebx
c000af84:	50                   	push   eax
c000af85:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000af89:	e8 a1 d9 00 00       	call   c001892f <lockScheduler()>
c000af8e:	e8 e5 dc 00 00       	call   c0018c78 <schedule()>
c000af93:	e8 99 d9 00 00       	call   c0018931 <unlockScheduler()>
c000af98:	fb                   	sti    
c000af99:	83 ec 0c             	sub    esp,0xc
c000af9c:	68 3b 07 00 00       	push   0x73b
c000afa1:	e8 9c 40 00 00       	call   c000f042 <operator new(unsigned long)>
c000afa6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000afad:	89 c6                	mov    esi,eax
c000afaf:	ff 35 d4 59 02 c0    	push   DWORD PTR ds:0xc00259d4
c000afb5:	68 a5 0f 02 c0       	push   0xc0020fa5
c000afba:	6a 01                	push   0x1
c000afbc:	50                   	push   eax
c000afbd:	e8 c4 d7 00 00       	call   c0018786 <Process::Process(bool, char const*, Process*, char**)>
c000afc2:	83 c4 20             	add    esp,0x20
c000afc5:	68 ff 00 00 00       	push   0xff
c000afca:	6a 00                	push   0x0
c000afcc:	68 97 b9 00 c0       	push   0xc000b997
c000afd1:	56                   	push   esi
c000afd2:	e8 8d da 00 00       	call   c0018a64 <Process::createThread(void (*)(void*), void*, int)>
c000afd7:	6a 7a                	push   0x7a
c000afd9:	6a 00                	push   0x0
c000afdb:	68 a9 92 01 c0       	push   0xc00192a9
c000afe0:	ff 35 d4 59 02 c0    	push   DWORD PTR ds:0xc00259d4
c000afe6:	e8 79 da 00 00       	call   c0018a64 <Process::createThread(void (*)(void*), void*, int)>
c000afeb:	83 c4 20             	add    esp,0x20
c000afee:	a3 88 59 02 c0       	mov    ds:0xc0025988,eax
c000aff3:	c6 05 8d 45 02 c0 01 	mov    BYTE PTR ds:0xc002458d,0x1
c000affa:	e8 db 44 00 00       	call   c000f4da <initVFS()>
c000afff:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000b005:	8b 10                	mov    edx,DWORD PTR [eax]
c000b007:	6a 00                	push   0x0
c000b009:	6a 00                	push   0x0
c000b00b:	6a 00                	push   0x0
c000b00d:	50                   	push   eax
c000b00e:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000b011:	e8 68 c1 00 00       	call   c001717e <setupSystemCalls()>
c000b016:	e8 bd 4f 00 00       	call   c000ffd8 <loadClockSettings()>
c000b01b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b01e:	e8 b3 56 00 00       	call   c00106d6 <Device::loadDriversForAll()>
c000b023:	5a                   	pop    edx
c000b024:	8b 1d 88 45 02 c0    	mov    ebx,DWORD PTR ds:0xc0024588
c000b02a:	59                   	pop    ecx
c000b02b:	6a 01                	push   0x1
c000b02d:	68 b2 0f 02 c0       	push   0xc0020fb2
c000b032:	e8 13 d3 00 00       	call   c001834a <Thr::loadDLL(char const*, bool)>
c000b037:	5e                   	pop    esi
c000b038:	5a                   	pop    edx
c000b039:	53                   	push   ebx
c000b03a:	50                   	push   eax
c000b03b:	e8 d0 d4 00 00       	call   c0018510 <Thr::executeDLL(unsigned long, void*)>
c000b040:	59                   	pop    ecx
c000b041:	8b 1d 88 45 02 c0    	mov    ebx,DWORD PTR ds:0xc0024588
c000b047:	5e                   	pop    esi
c000b048:	6a 01                	push   0x1
c000b04a:	68 cf 0f 02 c0       	push   0xc0020fcf
c000b04f:	e8 f6 d2 00 00       	call   c001834a <Thr::loadDLL(char const*, bool)>
c000b054:	5a                   	pop    edx
c000b055:	59                   	pop    ecx
c000b056:	53                   	push   ebx
c000b057:	50                   	push   eax
c000b058:	e8 b3 d4 00 00       	call   c0018510 <Thr::executeDLL(unsigned long, void*)>
c000b05d:	c7 04 24 48 21 02 c0 	mov    DWORD PTR [esp],0xc0022148
c000b064:	e8 0e 41 00 00       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c000b069:	83 c4 10             	add    esp,0x10
c000b06c:	83 ec 0c             	sub    esp,0xc
c000b06f:	6a 02                	push   0x2
c000b071:	e8 5b dd 00 00       	call   c0018dd1 <blockTask(TaskState)>
c000b076:	83 c4 10             	add    esp,0x10
c000b079:	eb f1                	jmp    c000b06c <Computer::start()+0xea>

c000b07b <firstTask()>:
c000b07b:	83 ec 18             	sub    esp,0x18
c000b07e:	ff 35 88 45 02 c0    	push   DWORD PTR ds:0xc0024588
c000b084:	e8 f9 fe ff ff       	call   c000af82 <Computer::start()>
c000b089:	90                   	nop

c000b08a <Computer::detectFeatures()>:
c000b08a:	55                   	push   ebp
c000b08b:	57                   	push   edi
c000b08c:	56                   	push   esi
c000b08d:	53                   	push   ebx
c000b08e:	83 ec 1c             	sub    esp,0x1c
c000b091:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b095:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000b09f:	e8 cd 52 ff ff       	call   c0000371 <detectCPUID>
c000b0a4:	85 c0                	test   eax,eax
c000b0a6:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b0ac:	0f 95 c2             	setne  dl
c000b0af:	83 e0 fd             	and    eax,0xfffffffd
c000b0b2:	d1 e2                	shl    edx,1
c000b0b4:	09 d0                	or     eax,edx
c000b0b6:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b0bc:	a8 02                	test   al,0x2
c000b0be:	75 46                	jne    c000b106 <Computer::detectFeatures()+0x7c>
c000b0c0:	f6 05 a1 45 02 c0 04 	test   BYTE PTR ds:0xc00245a1,0x4
c000b0c7:	74 07                	je     c000b0d0 <Computer::detectFeatures()+0x46>
c000b0c9:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000b0d0:	e8 c1 3f 01 00       	call   c001f096 <x87Detect>
c000b0d5:	83 e0 01             	and    eax,0x1
c000b0d8:	c1 e0 04             	shl    eax,0x4
c000b0db:	88 c2                	mov    dl,al
c000b0dd:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b0e3:	83 e0 ef             	and    eax,0xffffffef
c000b0e6:	09 d0                	or     eax,edx
c000b0e8:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b0ee:	a8 10                	test   al,0x10
c000b0f0:	0f 85 10 01 00 00    	jne    c000b206 <Computer::detectFeatures()+0x17c>
c000b0f6:	84 c0                	test   al,al
c000b0f8:	0f 88 2b 01 00 00    	js     c000b229 <Computer::detectFeatures()+0x19f>
c000b0fe:	83 c4 1c             	add    esp,0x1c
c000b101:	5b                   	pop    ebx
c000b102:	5e                   	pop    esi
c000b103:	5f                   	pop    edi
c000b104:	5d                   	pop    ebp
c000b105:	c3                   	ret    
c000b106:	83 ec 0c             	sub    esp,0xc
c000b109:	6a 20                	push   0x20
c000b10b:	e8 0f 96 00 00       	call   c001471f <cpuidCheckEDX(unsigned int)>
c000b110:	83 e0 01             	and    eax,0x1
c000b113:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000b11a:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b120:	83 e0 f7             	and    eax,0xfffffff7
c000b123:	09 d0                	or     eax,edx
c000b125:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b12b:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000b132:	e8 e8 95 00 00       	call   c001471f <cpuidCheckEDX(unsigned int)>
c000b137:	83 e0 01             	and    eax,0x1
c000b13a:	88 c2                	mov    dl,al
c000b13c:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000b142:	83 e0 fe             	and    eax,0xfffffffe
c000b145:	09 d0                	or     eax,edx
c000b147:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000b14d:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000b154:	e8 c6 95 00 00       	call   c001471f <cpuidCheckEDX(unsigned int)>
c000b159:	c1 e0 07             	shl    eax,0x7
c000b15c:	88 c2                	mov    dl,al
c000b15e:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000b164:	83 e0 7f             	and    eax,0x7f
c000b167:	09 d0                	or     eax,edx
c000b169:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000b16f:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000b176:	e8 a4 95 00 00       	call   c001471f <cpuidCheckEDX(unsigned int)>
c000b17b:	83 c4 10             	add    esp,0x10
c000b17e:	83 e0 01             	and    eax,0x1
c000b181:	c1 e0 05             	shl    eax,0x5
c000b184:	88 c2                	mov    dl,al
c000b186:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b18c:	83 e0 df             	and    eax,0xffffffdf
c000b18f:	09 d0                	or     eax,edx
c000b191:	f7 05 a0 45 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc00245a0,0x401
c000b19b:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b1a1:	0f 84 a8 00 00 00    	je     c000b24f <Computer::detectFeatures()+0x1c5>
c000b1a7:	83 ec 0c             	sub    esp,0xc
c000b1aa:	80 a3 e8 01 00 00 fe 	and    BYTE PTR [ebx+0x1e8],0xfe
c000b1b1:	8d 44 24 18          	lea    eax,[esp+0x18]
c000b1b5:	50                   	push   eax
c000b1b6:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000b1ba:	55                   	push   ebp
c000b1bb:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000b1bf:	57                   	push   edi
c000b1c0:	8d 74 24 18          	lea    esi,[esp+0x18]
c000b1c4:	56                   	push   esi
c000b1c5:	68 00 00 00 80       	push   0x80000000
c000b1ca:	e8 cd 94 00 00       	call   c001469c <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000b1cf:	83 c4 20             	add    esp,0x20
c000b1d2:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000b1d9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000b1dd:	0f 86 dd fe ff ff    	jbe    c000b0c0 <Computer::detectFeatures()+0x36>
c000b1e3:	83 ec 0c             	sub    esp,0xc
c000b1e6:	50                   	push   eax
c000b1e7:	55                   	push   ebp
c000b1e8:	57                   	push   edi
c000b1e9:	56                   	push   esi
c000b1ea:	68 01 00 00 80       	push   0x80000001
c000b1ef:	e8 a8 94 00 00       	call   c001469c <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000b1f4:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000b1fe:	83 c4 20             	add    esp,0x20
c000b201:	e9 ba fe ff ff       	jmp    c000b0c0 <Computer::detectFeatures()+0x36>
c000b206:	e8 45 3e 01 00       	call   c001f050 <sseDetect>
c000b20b:	88 c2                	mov    dl,al
c000b20d:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b213:	c1 e2 07             	shl    edx,0x7
c000b216:	83 e0 7f             	and    eax,0x7f
c000b219:	09 d0                	or     eax,edx
c000b21b:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b221:	84 c0                	test   al,al
c000b223:	0f 89 d5 fe ff ff    	jns    c000b0fe <Computer::detectFeatures()+0x74>
c000b229:	e8 12 3e 01 00       	call   c001f040 <avxDetect>
c000b22e:	83 e0 01             	and    eax,0x1
c000b231:	c1 e0 05             	shl    eax,0x5
c000b234:	88 c2                	mov    dl,al
c000b236:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000b23c:	83 e0 df             	and    eax,0xffffffdf
c000b23f:	09 d0                	or     eax,edx
c000b241:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000b247:	83 c4 1c             	add    esp,0x1c
c000b24a:	5b                   	pop    ebx
c000b24b:	5e                   	pop    esi
c000b24c:	5f                   	pop    edi
c000b24d:	5d                   	pop    ebp
c000b24e:	c3                   	ret    
c000b24f:	83 ec 0c             	sub    esp,0xc
c000b252:	68 00 02 00 00       	push   0x200
c000b257:	e8 c3 94 00 00       	call   c001471f <cpuidCheckEDX(unsigned int)>
c000b25c:	83 c4 10             	add    esp,0x10
c000b25f:	e9 43 ff ff ff       	jmp    c000b1a7 <Computer::detectFeatures()+0x11d>

c000b264 <Computer::displayFeatures()>:
c000b264:	53                   	push   ebx
c000b265:	83 ec 14             	sub    esp,0x14
c000b268:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b26c:	68 f2 0f 02 c0       	push   0xc0020ff2
c000b271:	e8 01 3f 00 00       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c000b276:	83 c4 10             	add    esp,0x10
c000b279:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c000b280:	0f 85 73 02 00 00    	jne    c000b4f9 <Computer::displayFeatures()+0x295>
c000b286:	b8 ef 0f 02 c0       	mov    eax,0xc0020fef
c000b28b:	83 ec 08             	sub    esp,0x8
c000b28e:	50                   	push   eax
c000b28f:	68 05 10 02 c0       	push   0xc0021005
c000b294:	e8 de 3e 00 00       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c000b299:	83 c4 10             	add    esp,0x10
c000b29c:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c000b2a3:	0f 85 8c 02 00 00    	jne    c000b535 <Computer::displayFeatures()+0x2d1>
c000b2a9:	b8 ef 0f 02 c0       	mov    eax,0xc0020fef
c000b2ae:	83 ec 08             	sub    esp,0x8
c000b2b1:	50                   	push   eax
c000b2b2:	68 16 10 02 c0       	push   0xc0021016
c000b2b7:	e8 bb 3e 00 00       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c000b2bc:	83 c4 10             	add    esp,0x10
c000b2bf:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c000b2c6:	0f 85 5f 02 00 00    	jne    c000b52b <Computer::displayFeatures()+0x2c7>
c000b2cc:	b8 ef 0f 02 c0       	mov    eax,0xc0020fef
c000b2d1:	83 ec 08             	sub    esp,0x8
c000b2d4:	50                   	push   eax
c000b2d5:	68 27 10 02 c0       	push   0xc0021027
c000b2da:	e8 98 3e 00 00       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c000b2df:	83 c4 10             	add    esp,0x10
c000b2e2:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c000b2e9:	0f 85 32 02 00 00    	jne    c000b521 <Computer::displayFeatures()+0x2bd>
c000b2ef:	b8 ef 0f 02 c0       	mov    eax,0xc0020fef
c000b2f4:	83 ec 08             	sub    esp,0x8
c000b2f7:	50                   	push   eax
c000b2f8:	68 38 10 02 c0       	push   0xc0021038
c000b2fd:	e8 75 3e 00 00       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c000b302:	83 c4 10             	add    esp,0x10
c000b305:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c000b30c:	0f 85 05 02 00 00    	jne    c000b517 <Computer::displayFeatures()+0x2b3>
c000b312:	b8 ef 0f 02 c0       	mov    eax,0xc0020fef
c000b317:	83 ec 08             	sub    esp,0x8
c000b31a:	50                   	push   eax
c000b31b:	68 49 10 02 c0       	push   0xc0021049
c000b320:	e8 52 3e 00 00       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c000b325:	83 c4 10             	add    esp,0x10
c000b328:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c000b32f:	0f 85 d8 01 00 00    	jne    c000b50d <Computer::displayFeatures()+0x2a9>
c000b335:	b8 ef 0f 02 c0       	mov    eax,0xc0020fef
c000b33a:	83 ec 08             	sub    esp,0x8
c000b33d:	50                   	push   eax
c000b33e:	68 5a 10 02 c0       	push   0xc002105a
c000b343:	e8 2f 3e 00 00       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c000b348:	83 c4 10             	add    esp,0x10
c000b34b:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000b352:	0f 85 ab 01 00 00    	jne    c000b503 <Computer::displayFeatures()+0x29f>
c000b358:	b8 ef 0f 02 c0       	mov    eax,0xc0020fef
c000b35d:	83 ec 08             	sub    esp,0x8
c000b360:	50                   	push   eax
c000b361:	68 6b 10 02 c0       	push   0xc002106b
c000b366:	e8 0c 3e 00 00       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c000b36b:	83 c4 10             	add    esp,0x10
c000b36e:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c000b375:	0f 88 1b 02 00 00    	js     c000b596 <Computer::displayFeatures()+0x332>
c000b37b:	b8 ef 0f 02 c0       	mov    eax,0xc0020fef
c000b380:	83 ec 08             	sub    esp,0x8
c000b383:	50                   	push   eax
c000b384:	68 7c 10 02 c0       	push   0xc002107c
c000b389:	e8 e9 3d 00 00       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c000b38e:	83 c4 10             	add    esp,0x10
c000b391:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000b398:	0f 85 a1 01 00 00    	jne    c000b53f <Computer::displayFeatures()+0x2db>
c000b39e:	b8 ef 0f 02 c0       	mov    eax,0xc0020fef
c000b3a3:	83 ec 08             	sub    esp,0x8
c000b3a6:	50                   	push   eax
c000b3a7:	68 8d 10 02 c0       	push   0xc002108d
c000b3ac:	e8 c6 3d 00 00       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c000b3b1:	83 c4 10             	add    esp,0x10
c000b3b4:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000b3bb:	0f 85 cb 01 00 00    	jne    c000b58c <Computer::displayFeatures()+0x328>
c000b3c1:	b8 ef 0f 02 c0       	mov    eax,0xc0020fef
c000b3c6:	83 ec 08             	sub    esp,0x8
c000b3c9:	50                   	push   eax
c000b3ca:	68 9e 10 02 c0       	push   0xc002109e
c000b3cf:	e8 a3 3d 00 00       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c000b3d4:	83 c4 10             	add    esp,0x10
c000b3d7:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000b3de:	0f 85 9e 01 00 00    	jne    c000b582 <Computer::displayFeatures()+0x31e>
c000b3e4:	b8 ef 0f 02 c0       	mov    eax,0xc0020fef
c000b3e9:	83 ec 08             	sub    esp,0x8
c000b3ec:	50                   	push   eax
c000b3ed:	68 af 10 02 c0       	push   0xc00210af
c000b3f2:	e8 80 3d 00 00       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c000b3f7:	83 c4 10             	add    esp,0x10
c000b3fa:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c000b401:	0f 85 71 01 00 00    	jne    c000b578 <Computer::displayFeatures()+0x314>
c000b407:	b8 ef 0f 02 c0       	mov    eax,0xc0020fef
c000b40c:	83 ec 08             	sub    esp,0x8
c000b40f:	50                   	push   eax
c000b410:	68 c0 10 02 c0       	push   0xc00210c0
c000b415:	e8 5d 3d 00 00       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c000b41a:	83 c4 10             	add    esp,0x10
c000b41d:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c000b424:	0f 85 44 01 00 00    	jne    c000b56e <Computer::displayFeatures()+0x30a>
c000b42a:	b8 ef 0f 02 c0       	mov    eax,0xc0020fef
c000b42f:	83 ec 08             	sub    esp,0x8
c000b432:	50                   	push   eax
c000b433:	68 d1 10 02 c0       	push   0xc00210d1
c000b438:	e8 3a 3d 00 00       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c000b43d:	83 c4 10             	add    esp,0x10
c000b440:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000b447:	0f 85 17 01 00 00    	jne    c000b564 <Computer::displayFeatures()+0x300>
c000b44d:	b8 ef 0f 02 c0       	mov    eax,0xc0020fef
c000b452:	83 ec 08             	sub    esp,0x8
c000b455:	50                   	push   eax
c000b456:	68 e2 10 02 c0       	push   0xc00210e2
c000b45b:	e8 17 3d 00 00       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c000b460:	83 c4 10             	add    esp,0x10
c000b463:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000b46a:	0f 85 ea 00 00 00    	jne    c000b55a <Computer::displayFeatures()+0x2f6>
c000b470:	b8 ef 0f 02 c0       	mov    eax,0xc0020fef
c000b475:	83 ec 08             	sub    esp,0x8
c000b478:	50                   	push   eax
c000b479:	68 f3 10 02 c0       	push   0xc00210f3
c000b47e:	e8 f4 3c 00 00       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c000b483:	83 c4 10             	add    esp,0x10
c000b486:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c000b48d:	0f 88 0d 01 00 00    	js     c000b5a0 <Computer::displayFeatures()+0x33c>
c000b493:	b8 ef 0f 02 c0       	mov    eax,0xc0020fef
c000b498:	83 ec 08             	sub    esp,0x8
c000b49b:	50                   	push   eax
c000b49c:	68 04 11 02 c0       	push   0xc0021104
c000b4a1:	e8 d1 3c 00 00       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c000b4a6:	83 c4 10             	add    esp,0x10
c000b4a9:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000b4b0:	0f 85 9a 00 00 00    	jne    c000b550 <Computer::displayFeatures()+0x2ec>
c000b4b6:	b8 ef 0f 02 c0       	mov    eax,0xc0020fef
c000b4bb:	83 ec 08             	sub    esp,0x8
c000b4be:	50                   	push   eax
c000b4bf:	68 15 11 02 c0       	push   0xc0021115
c000b4c4:	e8 ae 3c 00 00       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c000b4c9:	83 c4 10             	add    esp,0x10
c000b4cc:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000b4d3:	75 74                	jne    c000b549 <Computer::displayFeatures()+0x2e5>
c000b4d5:	b8 ef 0f 02 c0       	mov    eax,0xc0020fef
c000b4da:	83 ec 08             	sub    esp,0x8
c000b4dd:	50                   	push   eax
c000b4de:	68 26 11 02 c0       	push   0xc0021126
c000b4e3:	e8 8f 3c 00 00       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c000b4e8:	c7 44 24 20 06 27 02 c0 	mov    DWORD PTR [esp+0x20],0xc0022706
c000b4f0:	83 c4 18             	add    esp,0x18
c000b4f3:	5b                   	pop    ebx
c000b4f4:	e9 7e 3c 00 00       	jmp    c000f177 <Dbg::kprintf(char const*, ...)>
c000b4f9:	b8 eb 0f 02 c0       	mov    eax,0xc0020feb
c000b4fe:	e9 88 fd ff ff       	jmp    c000b28b <Computer::displayFeatures()+0x27>
c000b503:	b8 eb 0f 02 c0       	mov    eax,0xc0020feb
c000b508:	e9 50 fe ff ff       	jmp    c000b35d <Computer::displayFeatures()+0xf9>
c000b50d:	b8 eb 0f 02 c0       	mov    eax,0xc0020feb
c000b512:	e9 23 fe ff ff       	jmp    c000b33a <Computer::displayFeatures()+0xd6>
c000b517:	b8 eb 0f 02 c0       	mov    eax,0xc0020feb
c000b51c:	e9 f6 fd ff ff       	jmp    c000b317 <Computer::displayFeatures()+0xb3>
c000b521:	b8 eb 0f 02 c0       	mov    eax,0xc0020feb
c000b526:	e9 c9 fd ff ff       	jmp    c000b2f4 <Computer::displayFeatures()+0x90>
c000b52b:	b8 eb 0f 02 c0       	mov    eax,0xc0020feb
c000b530:	e9 9c fd ff ff       	jmp    c000b2d1 <Computer::displayFeatures()+0x6d>
c000b535:	b8 eb 0f 02 c0       	mov    eax,0xc0020feb
c000b53a:	e9 6f fd ff ff       	jmp    c000b2ae <Computer::displayFeatures()+0x4a>
c000b53f:	b8 eb 0f 02 c0       	mov    eax,0xc0020feb
c000b544:	e9 5a fe ff ff       	jmp    c000b3a3 <Computer::displayFeatures()+0x13f>
c000b549:	b8 eb 0f 02 c0       	mov    eax,0xc0020feb
c000b54e:	eb 8a                	jmp    c000b4da <Computer::displayFeatures()+0x276>
c000b550:	b8 eb 0f 02 c0       	mov    eax,0xc0020feb
c000b555:	e9 61 ff ff ff       	jmp    c000b4bb <Computer::displayFeatures()+0x257>
c000b55a:	b8 eb 0f 02 c0       	mov    eax,0xc0020feb
c000b55f:	e9 11 ff ff ff       	jmp    c000b475 <Computer::displayFeatures()+0x211>
c000b564:	b8 eb 0f 02 c0       	mov    eax,0xc0020feb
c000b569:	e9 e4 fe ff ff       	jmp    c000b452 <Computer::displayFeatures()+0x1ee>
c000b56e:	b8 eb 0f 02 c0       	mov    eax,0xc0020feb
c000b573:	e9 b7 fe ff ff       	jmp    c000b42f <Computer::displayFeatures()+0x1cb>
c000b578:	b8 eb 0f 02 c0       	mov    eax,0xc0020feb
c000b57d:	e9 8a fe ff ff       	jmp    c000b40c <Computer::displayFeatures()+0x1a8>
c000b582:	b8 eb 0f 02 c0       	mov    eax,0xc0020feb
c000b587:	e9 5d fe ff ff       	jmp    c000b3e9 <Computer::displayFeatures()+0x185>
c000b58c:	b8 eb 0f 02 c0       	mov    eax,0xc0020feb
c000b591:	e9 30 fe ff ff       	jmp    c000b3c6 <Computer::displayFeatures()+0x162>
c000b596:	b8 eb 0f 02 c0       	mov    eax,0xc0020feb
c000b59b:	e9 e0 fd ff ff       	jmp    c000b380 <Computer::displayFeatures()+0x11c>
c000b5a0:	b8 eb 0f 02 c0       	mov    eax,0xc0020feb
c000b5a5:	e9 ee fe ff ff       	jmp    c000b498 <Computer::displayFeatures()+0x234>

c000b5aa <Computer::rdmsr(unsigned int)>:
c000b5aa:	83 ec 0c             	sub    esp,0xc
c000b5ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b5b1:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000b5b8:	74 0a                	je     c000b5c4 <Computer::rdmsr(unsigned int)+0x1a>
c000b5ba:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b5be:	0f 32                	rdmsr  
c000b5c0:	83 c4 0c             	add    esp,0xc
c000b5c3:	c3                   	ret    
c000b5c4:	83 ec 0c             	sub    esp,0xc
c000b5c7:	68 37 11 02 c0       	push   0xc0021137
c000b5cc:	e8 71 a3 00 00       	call   c0015942 <Krnl::panic(char const*)>
c000b5d1:	83 c4 10             	add    esp,0x10
c000b5d4:	eb e4                	jmp    c000b5ba <Computer::rdmsr(unsigned int)+0x10>

c000b5d6 <Computer::wrmsr(unsigned int, unsigned long long)>:
c000b5d6:	57                   	push   edi
c000b5d7:	56                   	push   esi
c000b5d8:	52                   	push   edx
c000b5d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b5dd:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000b5e1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000b5e5:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000b5ec:	74 0e                	je     c000b5fc <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000b5ee:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b5f2:	89 f0                	mov    eax,esi
c000b5f4:	89 fa                	mov    edx,edi
c000b5f6:	0f 30                	wrmsr  
c000b5f8:	58                   	pop    eax
c000b5f9:	5e                   	pop    esi
c000b5fa:	5f                   	pop    edi
c000b5fb:	c3                   	ret    
c000b5fc:	83 ec 0c             	sub    esp,0xc
c000b5ff:	68 3d 11 02 c0       	push   0xc002113d
c000b604:	e8 39 a3 00 00       	call   c0015942 <Krnl::panic(char const*)>
c000b609:	83 c4 10             	add    esp,0x10
c000b60c:	eb e0                	jmp    c000b5ee <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000b60e <Computer::nmiEnabled()>:
c000b60e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b612:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000b618:	c3                   	ret    
c000b619:	90                   	nop

c000b61a <Computer::readCMOS(unsigned char)>:
c000b61a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b61e:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000b625:	19 c0                	sbb    eax,eax
c000b627:	83 e0 80             	and    eax,0xffffff80
c000b62a:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000b62e:	e6 70                	out    0x70,al
c000b630:	e4 71                	in     al,0x71
c000b632:	c3                   	ret    
c000b633:	90                   	nop

c000b634 <Computer::enableNMI(bool)>:
c000b634:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b638:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b63c:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000b642:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000b64a:	eb ce                	jmp    c000b61a <Computer::readCMOS(unsigned char)>

c000b64c <Computer::open(int, int, void*)>:
c000b64c:	56                   	push   esi
c000b64d:	53                   	push   ebx
c000b64e:	83 ec 10             	sub    esp,0x10
c000b651:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b655:	f6 05 a0 45 02 c0 04 	test   BYTE PTR ds:0xc00245a0,0x4
c000b65c:	68 68 22 00 00       	push   0x2268
c000b661:	0f 94 05 c0 39 02 c0 	sete   BYTE PTR ds:0xc00239c0
c000b668:	e8 d5 39 00 00       	call   c000f042 <operator new(unsigned long)>
c000b66d:	89 04 24             	mov    DWORD PTR [esp],eax
c000b670:	89 c6                	mov    esi,eax
c000b672:	e8 cd 86 00 00       	call   c0013d44 <ACPI::ACPI()>
c000b677:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000b67d:	58                   	pop    eax
c000b67e:	5a                   	pop    edx
c000b67f:	56                   	push   esi
c000b680:	53                   	push   ebx
c000b681:	e8 06 4f 00 00       	call   c001058c <Device::addChild(Device*)>
c000b686:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b689:	e8 fc f9 ff ff       	call   c000b08a <Computer::detectFeatures()>
c000b68e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b691:	e8 ce fb ff ff       	call   c000b264 <Computer::displayFeatures()>
c000b696:	59                   	pop    ecx
c000b697:	5e                   	pop    esi
c000b698:	6a 01                	push   0x1
c000b69a:	53                   	push   ebx
c000b69b:	e8 94 ff ff ff       	call   c000b634 <Computer::enableNMI(bool)>
c000b6a0:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000b6a7:	e8 96 39 00 00       	call   c000f042 <operator new(unsigned long)>
c000b6ac:	89 04 24             	mov    DWORD PTR [esp],eax
c000b6af:	89 c6                	mov    esi,eax
c000b6b1:	e8 34 91 00 00       	call   c00147ea <CPU::CPU()>
c000b6b6:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000b6bc:	58                   	pop    eax
c000b6bd:	5a                   	pop    edx
c000b6be:	56                   	push   esi
c000b6bf:	53                   	push   ebx
c000b6c0:	e8 c7 4e 00 00       	call   c001058c <Device::addChild(Device*)>
c000b6c5:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000b6cb:	8b 10                	mov    edx,DWORD PTR [eax]
c000b6cd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000b6d1:	6a 00                	push   0x0
c000b6d3:	6a 00                	push   0x0
c000b6d5:	50                   	push   eax
c000b6d6:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000b6d9:	83 c4 20             	add    esp,0x20
c000b6dc:	e8 13 54 00 00       	call   c0010af4 <setupFPU()>
c000b6e1:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000b6e7:	85 c0                	test   eax,eax
c000b6e9:	74 1f                	je     c000b70a <Computer::open(int, int, void*)+0xbe>
c000b6eb:	83 ec 08             	sub    esp,0x8
c000b6ee:	50                   	push   eax
c000b6ef:	53                   	push   ebx
c000b6f0:	e8 97 4e 00 00       	call   c001058c <Device::addChild(Device*)>
c000b6f5:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000b6fb:	8b 10                	mov    edx,DWORD PTR [eax]
c000b6fd:	6a 00                	push   0x0
c000b6ff:	6a 00                	push   0x0
c000b701:	6a 00                	push   0x0
c000b703:	50                   	push   eax
c000b704:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000b707:	83 c4 20             	add    esp,0x20
c000b70a:	83 ec 0c             	sub    esp,0xc
c000b70d:	68 7b b0 00 c0       	push   0xc000b07b
c000b712:	e8 4c d4 00 00       	call   c0018b63 <setupMultitasking(void (*)())>
c000b717:	83 c4 14             	add    esp,0x14
c000b71a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000b71f:	5b                   	pop    ebx
c000b720:	5e                   	pop    esi
c000b721:	c3                   	ret    

c000b722 <Computer::disableNMI()>:
c000b722:	6a 00                	push   0x0
c000b724:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000b728:	e8 07 ff ff ff       	call   c000b634 <Computer::enableNMI(bool)>
c000b72d:	58                   	pop    eax
c000b72e:	5a                   	pop    edx
c000b72f:	c3                   	ret    

c000b730 <Computer::writeCMOS(unsigned char, unsigned char)>:
c000b730:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b734:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000b73b:	19 c0                	sbb    eax,eax
c000b73d:	83 e0 80             	and    eax,0xffffff80
c000b740:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000b744:	e6 70                	out    0x70,al
c000b746:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b74a:	e6 71                	out    0x71,al
c000b74c:	c3                   	ret    
c000b74d:	90                   	nop

c000b74e <Computer::handleNMI()>:
c000b74e:	56                   	push   esi
c000b74f:	53                   	push   ebx
c000b750:	83 ec 10             	sub    esp,0x10
c000b753:	e4 92                	in     al,0x92
c000b755:	89 c6                	mov    esi,eax
c000b757:	e4 61                	in     al,0x61
c000b759:	68 43 11 02 c0       	push   0xc0021143
c000b75e:	88 c3                	mov    bl,al
c000b760:	e8 12 3a 00 00       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c000b765:	83 c4 10             	add    esp,0x10
c000b768:	83 e6 10             	and    esi,0x10
c000b76b:	75 0d                	jne    c000b77a <Computer::handleNMI()+0x2c>
c000b76d:	f6 c3 40             	test   bl,0x40
c000b770:	75 1d                	jne    c000b78f <Computer::handleNMI()+0x41>
c000b772:	84 db                	test   bl,bl
c000b774:	78 2d                	js     c000b7a3 <Computer::handleNMI()+0x55>
c000b776:	58                   	pop    eax
c000b777:	5b                   	pop    ebx
c000b778:	5e                   	pop    esi
c000b779:	c3                   	ret    
c000b77a:	83 ec 0c             	sub    esp,0xc
c000b77d:	68 54 11 02 c0       	push   0xc0021154
c000b782:	e8 bb a1 00 00       	call   c0015942 <Krnl::panic(char const*)>
c000b787:	83 c4 10             	add    esp,0x10
c000b78a:	f6 c3 40             	test   bl,0x40
c000b78d:	74 e3                	je     c000b772 <Computer::handleNMI()+0x24>
c000b78f:	83 ec 0c             	sub    esp,0xc
c000b792:	68 61 11 02 c0       	push   0xc0021161
c000b797:	e8 a6 a1 00 00       	call   c0015942 <Krnl::panic(char const*)>
c000b79c:	83 c4 10             	add    esp,0x10
c000b79f:	84 db                	test   bl,bl
c000b7a1:	79 d3                	jns    c000b776 <Computer::handleNMI()+0x28>
c000b7a3:	c7 44 24 10 6b 11 02 c0 	mov    DWORD PTR [esp+0x10],0xc002116b
c000b7ab:	5a                   	pop    edx
c000b7ac:	5b                   	pop    ebx
c000b7ad:	5e                   	pop    esi
c000b7ae:	e9 8f a1 00 00       	jmp    c0015942 <Krnl::panic(char const*)>
c000b7b3:	90                   	nop

c000b7b4 <Computer::setDiskActivityLight(int, bool)>:
c000b7b4:	56                   	push   esi
c000b7b5:	53                   	push   ebx
c000b7b6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b7ba:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000b7bf:	77 1b                	ja     c000b7dc <Computer::setDiskActivityLight(int, bool)+0x28>
c000b7c1:	e4 92                	in     al,0x92
c000b7c3:	bb 40 00 00 00       	mov    ebx,0x40
c000b7c8:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000b7cc:	89 da                	mov    edx,ebx
c000b7ce:	d3 e2                	shl    edx,cl
c000b7d0:	89 f1                	mov    ecx,esi
c000b7d2:	f7 d2                	not    edx
c000b7d4:	d3 e3                	shl    ebx,cl
c000b7d6:	21 d0                	and    eax,edx
c000b7d8:	09 d8                	or     eax,ebx
c000b7da:	e6 92                	out    0x92,al
c000b7dc:	5b                   	pop    ebx
c000b7dd:	5e                   	pop    esi
c000b7de:	c3                   	ret    
c000b7df:	90                   	nop

c000b7e0 <GDTEntry::setBase(unsigned int)>:
c000b7e0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7e4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000b7e8:	89 c1                	mov    ecx,eax
c000b7ea:	c1 e9 10             	shr    ecx,0x10
c000b7ed:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000b7f1:	c1 e8 18             	shr    eax,0x18
c000b7f4:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000b7f7:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000b7fa:	c3                   	ret    
c000b7fb:	90                   	nop

c000b7fc <GDTEntry::setLimit(unsigned int)>:
c000b7fc:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000b800:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b804:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000b807:	66 89 01             	mov    WORD PTR [ecx],ax
c000b80a:	c1 e8 10             	shr    eax,0x10
c000b80d:	83 e2 f0             	and    edx,0xfffffff0
c000b810:	83 e0 0f             	and    eax,0xf
c000b813:	09 d0                	or     eax,edx
c000b815:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000b818:	c3                   	ret    
c000b819:	90                   	nop

c000b81a <GDT::GDT()>:
c000b81a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b81e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000b824:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b828:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000b82e:	90                   	nop
c000b82f:	c3                   	ret    

c000b830 <GDT::addEntry(GDTEntry)>:
c000b830:	53                   	push   ebx
c000b831:	83 ec 0c             	sub    esp,0xc
c000b834:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000b838:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b83a:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000b841:	52                   	push   edx
c000b842:	50                   	push   eax
c000b843:	68 a4 11 02 c0       	push   0xc00211a4
c000b848:	e8 2a 39 00 00       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c000b84d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b84f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000b853:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000b857:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000b85b:	8d 50 01             	lea    edx,[eax+0x1]
c000b85e:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000b862:	89 13                	mov    DWORD PTR [ebx],edx
c000b864:	c1 e0 03             	shl    eax,0x3
c000b867:	83 c4 18             	add    esp,0x18
c000b86a:	5b                   	pop    ebx
c000b86b:	c3                   	ret    

c000b86c <GDT::getNumberOfEntries()>:
c000b86c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b870:	8b 00                	mov    eax,DWORD PTR [eax]
c000b872:	c3                   	ret    
c000b873:	90                   	nop

c000b874 <GDT::flush()>:
c000b874:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b878:	83 c0 04             	add    eax,0x4
c000b87b:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c000b87e:	a3 92 45 02 c0       	mov    ds:0xc0024592,eax
c000b883:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000b88a:	66 89 15 90 45 02 c0 	mov    WORD PTR ds:0xc0024590,dx
c000b891:	e9 4f 4b ff ff       	jmp    c00003e5 <loadGDT>

c000b896 <GDT::setup()>:
c000b896:	55                   	push   ebp
c000b897:	57                   	push   edi
c000b898:	56                   	push   esi
c000b899:	53                   	push   ebx
c000b89a:	83 ec 3c             	sub    esp,0x3c
c000b89d:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000b8a1:	6a 00                	push   0x0
c000b8a3:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000b8a7:	53                   	push   ebx
c000b8a8:	e8 33 ff ff ff       	call   c000b7e0 <GDTEntry::setBase(unsigned int)>
c000b8ad:	6a 00                	push   0x0
c000b8af:	53                   	push   ebx
c000b8b0:	e8 47 ff ff ff       	call   c000b7fc <GDTEntry::setLimit(unsigned int)>
c000b8b5:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000b8bd:	6a 00                	push   0x0
c000b8bf:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000b8c3:	53                   	push   ebx
c000b8c4:	e8 17 ff ff ff       	call   c000b7e0 <GDTEntry::setBase(unsigned int)>
c000b8c9:	68 ff ff ff 00       	push   0xffffff
c000b8ce:	53                   	push   ebx
c000b8cf:	e8 28 ff ff ff       	call   c000b7fc <GDTEntry::setLimit(unsigned int)>
c000b8d4:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000b8d8:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000b8dd:	0d 00 9a c0 00       	or     eax,0xc09a00
c000b8e2:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000b8e6:	83 c4 20             	add    esp,0x20
c000b8e9:	6a 00                	push   0x0
c000b8eb:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000b8ef:	53                   	push   ebx
c000b8f0:	e8 eb fe ff ff       	call   c000b7e0 <GDTEntry::setBase(unsigned int)>
c000b8f5:	68 ff ff ff 00       	push   0xffffff
c000b8fa:	53                   	push   ebx
c000b8fb:	e8 fc fe ff ff       	call   c000b7fc <GDTEntry::setLimit(unsigned int)>
c000b900:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b904:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000b908:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000b90d:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000b911:	0d 00 92 c0 00       	or     eax,0xc09200
c000b916:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000b91a:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000b91e:	89 d8                	mov    eax,ebx
c000b920:	80 cc 60             	or     ah,0x60
c000b923:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b927:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000b92b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b92f:	83 c4 0c             	add    esp,0xc
c000b932:	89 f8                	mov    eax,edi
c000b934:	80 cc 60             	or     ah,0x60
c000b937:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b93b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b93f:	89 c7                	mov    edi,eax
c000b941:	55                   	push   ebp
c000b942:	e8 e9 fe ff ff       	call   c000b830 <GDT::addEntry(GDTEntry)>
c000b947:	83 c4 0c             	add    esp,0xc
c000b94a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b94e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b952:	55                   	push   ebp
c000b953:	e8 d8 fe ff ff       	call   c000b830 <GDT::addEntry(GDTEntry)>
c000b958:	83 c4 0c             	add    esp,0xc
c000b95b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b95f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b963:	55                   	push   ebp
c000b964:	e8 c7 fe ff ff       	call   c000b830 <GDT::addEntry(GDTEntry)>
c000b969:	83 c4 0c             	add    esp,0xc
c000b96c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b970:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000b974:	53                   	push   ebx
c000b975:	51                   	push   ecx
c000b976:	55                   	push   ebp
c000b977:	e8 b4 fe ff ff       	call   c000b830 <GDT::addEntry(GDTEntry)>
c000b97c:	83 c4 0c             	add    esp,0xc
c000b97f:	57                   	push   edi
c000b980:	56                   	push   esi
c000b981:	55                   	push   ebp
c000b982:	e8 a9 fe ff ff       	call   c000b830 <GDT::addEntry(GDTEntry)>
c000b987:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b98a:	e8 e5 fe ff ff       	call   c000b874 <GDT::flush()>
c000b98f:	83 c4 4c             	add    esp,0x4c
c000b992:	5b                   	pop    ebx
c000b993:	5e                   	pop    esi
c000b994:	5f                   	pop    edi
c000b995:	5d                   	pop    ebp
c000b996:	c3                   	ret    

c000b997 <idleFunction(void*)>:
c000b997:	53                   	push   ebx
c000b998:	83 ec 08             	sub    esp,0x8
c000b99b:	e8 91 cf 00 00       	call   c0018931 <unlockScheduler()>
c000b9a0:	e8 31 8e 00 00       	call   c00147d6 <thisCPU()>
c000b9a5:	f6 80 92 11 00 00 04 	test   BYTE PTR [eax+0x1192],0x4
c000b9ac:	74 41                	je     c000b9ef <idleFunction(void*)+0x58>
c000b9ae:	a1 88 45 02 c0       	mov    eax,ds:0xc0024588
c000b9b3:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000b9ba:	74 33                	je     c000b9ef <idleFunction(void*)+0x58>
c000b9bc:	52                   	push   edx
c000b9bd:	31 db                	xor    ebx,ebx
c000b9bf:	52                   	push   edx
c000b9c0:	68 e1 00 00 00       	push   0xe1
c000b9c5:	50                   	push   eax
c000b9c6:	e8 df fb ff ff       	call   c000b5aa <Computer::rdmsr(unsigned int)>
c000b9cb:	53                   	push   ebx
c000b9cc:	83 e0 02             	and    eax,0x2
c000b9cf:	50                   	push   eax
c000b9d0:	68 e1 00 00 00       	push   0xe1
c000b9d5:	ff 35 88 45 02 c0    	push   DWORD PTR ds:0xc0024588
c000b9db:	e8 f6 fb ff ff       	call   c000b5d6 <Computer::wrmsr(unsigned int, unsigned long long)>
c000b9e0:	83 c4 20             	add    esp,0x20
c000b9e3:	e8 1a 48 ff ff       	call   c0000202 <doTPAUSE>
c000b9e8:	e8 a3 3c 01 00       	call   c001f690 <idleCommon()>
c000b9ed:	eb f4                	jmp    c000b9e3 <idleFunction(void*)+0x4c>
c000b9ef:	fb                   	sti    
c000b9f0:	f4                   	hlt    
c000b9f1:	e8 9a 3c 01 00       	call   c001f690 <idleCommon()>
c000b9f6:	eb f7                	jmp    c000b9ef <idleFunction(void*)+0x58>

c000b9f8 <IDTEntry::IDTEntry(bool)>:
c000b9f8:	83 ec 04             	sub    esp,0x4
c000b9fb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b9ff:	88 04 24             	mov    BYTE PTR [esp],al
c000ba02:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ba06:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000ba0c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ba10:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000ba14:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ba18:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ba1b:	83 e2 f0             	and    edx,0xfffffff0
c000ba1e:	83 ca 0e             	or     edx,0xe
c000ba21:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ba24:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ba28:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ba2b:	83 e2 ef             	and    edx,0xffffffef
c000ba2e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ba31:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000ba35:	74 04                	je     c000ba3b <IDTEntry::IDTEntry(bool)+0x43>
c000ba37:	b2 03                	mov    dl,0x3
c000ba39:	eb 02                	jmp    c000ba3d <IDTEntry::IDTEntry(bool)+0x45>
c000ba3b:	b2 00                	mov    dl,0x0
c000ba3d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ba41:	83 e2 03             	and    edx,0x3
c000ba44:	88 d1                	mov    cl,dl
c000ba46:	c1 e1 05             	shl    ecx,0x5
c000ba49:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ba4c:	83 e2 9f             	and    edx,0xffffff9f
c000ba4f:	09 ca                	or     edx,ecx
c000ba51:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ba54:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ba58:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ba5b:	83 ca 80             	or     edx,0xffffff80
c000ba5e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ba61:	90                   	nop
c000ba62:	83 c4 04             	add    esp,0x4
c000ba65:	c3                   	ret    

c000ba66 <IDTEntry::setOffset(unsigned int)>:
c000ba66:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ba6a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ba6e:	66 89 02             	mov    WORD PTR [edx],ax
c000ba71:	c1 e8 10             	shr    eax,0x10
c000ba74:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000ba78:	c3                   	ret    
c000ba79:	90                   	nop

c000ba7a <IDT::IDT()>:
c000ba7a:	90                   	nop
c000ba7b:	c3                   	ret    

c000ba7c <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000ba7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ba80:	83 c0 30             	add    eax,0x30
c000ba83:	c3                   	ret    

c000ba84 <IDT::addEntry(IDTEntry, int)>:
c000ba84:	53                   	push   ebx
c000ba85:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ba89:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ba8d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ba91:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ba95:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000ba98:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000ba9c:	5b                   	pop    ebx
c000ba9d:	c3                   	ret    

c000ba9e <IDT::addEntry(int, void (*)(), bool)>:
c000ba9e:	53                   	push   ebx
c000ba9f:	83 ec 10             	sub    esp,0x10
c000baa2:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000baa7:	50                   	push   eax
c000baa8:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000baac:	53                   	push   ebx
c000baad:	e8 46 ff ff ff       	call   c000b9f8 <IDTEntry::IDTEntry(bool)>
c000bab2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000bab6:	53                   	push   ebx
c000bab7:	e8 aa ff ff ff       	call   c000ba66 <IDTEntry::setOffset(unsigned int)>
c000babc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bac0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000bac4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000bac8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bacc:	e8 b3 ff ff ff       	call   c000ba84 <IDT::addEntry(IDTEntry, int)>
c000bad1:	83 c4 30             	add    esp,0x30
c000bad4:	5b                   	pop    ebx
c000bad5:	c3                   	ret    

c000bad6 <IDT::flush()>:
c000bad6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bada:	66 c7 05 98 45 02 c0 ff 07 	mov    WORD PTR ds:0xc0024598,0x7ff
c000bae3:	a3 9a 45 02 c0       	mov    ds:0xc002459a,eax
c000bae8:	0f 01 1d 98 45 02 c0 	lidtd  ds:0xc0024598
c000baef:	c3                   	ret    

c000baf0 <IDT::setup()>:
c000baf0:	57                   	push   edi
c000baf1:	56                   	push   esi
c000baf2:	53                   	push   ebx
c000baf3:	83 ec 10             	sub    esp,0x10
c000baf6:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000bafa:	6a 00                	push   0x0
c000bafc:	68 05 04 00 c0       	push   0xc0000405
c000bb01:	6a 00                	push   0x0
c000bb03:	53                   	push   ebx
c000bb04:	e8 95 ff ff ff       	call   c000ba9e <IDT::addEntry(int, void (*)(), bool)>
c000bb09:	6a 00                	push   0x0
c000bb0b:	68 15 04 00 c0       	push   0xc0000415
c000bb10:	6a 01                	push   0x1
c000bb12:	53                   	push   ebx
c000bb13:	e8 86 ff ff ff       	call   c000ba9e <IDT::addEntry(int, void (*)(), bool)>
c000bb18:	83 c4 20             	add    esp,0x20
c000bb1b:	6a 00                	push   0x0
c000bb1d:	68 1f 04 00 c0       	push   0xc000041f
c000bb22:	6a 02                	push   0x2
c000bb24:	53                   	push   ebx
c000bb25:	e8 74 ff ff ff       	call   c000ba9e <IDT::addEntry(int, void (*)(), bool)>
c000bb2a:	6a 00                	push   0x0
c000bb2c:	68 29 04 00 c0       	push   0xc0000429
c000bb31:	6a 03                	push   0x3
c000bb33:	53                   	push   ebx
c000bb34:	e8 65 ff ff ff       	call   c000ba9e <IDT::addEntry(int, void (*)(), bool)>
c000bb39:	83 c4 20             	add    esp,0x20
c000bb3c:	6a 00                	push   0x0
c000bb3e:	68 33 04 00 c0       	push   0xc0000433
c000bb43:	6a 04                	push   0x4
c000bb45:	53                   	push   ebx
c000bb46:	e8 53 ff ff ff       	call   c000ba9e <IDT::addEntry(int, void (*)(), bool)>
c000bb4b:	6a 00                	push   0x0
c000bb4d:	68 3d 04 00 c0       	push   0xc000043d
c000bb52:	6a 05                	push   0x5
c000bb54:	53                   	push   ebx
c000bb55:	e8 44 ff ff ff       	call   c000ba9e <IDT::addEntry(int, void (*)(), bool)>
c000bb5a:	83 c4 20             	add    esp,0x20
c000bb5d:	6a 00                	push   0x0
c000bb5f:	68 47 04 00 c0       	push   0xc0000447
c000bb64:	6a 06                	push   0x6
c000bb66:	53                   	push   ebx
c000bb67:	e8 32 ff ff ff       	call   c000ba9e <IDT::addEntry(int, void (*)(), bool)>
c000bb6c:	6a 00                	push   0x0
c000bb6e:	68 51 04 00 c0       	push   0xc0000451
c000bb73:	6a 07                	push   0x7
c000bb75:	53                   	push   ebx
c000bb76:	e8 23 ff ff ff       	call   c000ba9e <IDT::addEntry(int, void (*)(), bool)>
c000bb7b:	83 c4 20             	add    esp,0x20
c000bb7e:	6a 00                	push   0x0
c000bb80:	68 5b 04 00 c0       	push   0xc000045b
c000bb85:	6a 08                	push   0x8
c000bb87:	53                   	push   ebx
c000bb88:	e8 11 ff ff ff       	call   c000ba9e <IDT::addEntry(int, void (*)(), bool)>
c000bb8d:	6a 00                	push   0x0
c000bb8f:	68 63 04 00 c0       	push   0xc0000463
c000bb94:	6a 09                	push   0x9
c000bb96:	53                   	push   ebx
c000bb97:	e8 02 ff ff ff       	call   c000ba9e <IDT::addEntry(int, void (*)(), bool)>
c000bb9c:	83 c4 20             	add    esp,0x20
c000bb9f:	6a 00                	push   0x0
c000bba1:	68 6d 04 00 c0       	push   0xc000046d
c000bba6:	6a 0a                	push   0xa
c000bba8:	53                   	push   ebx
c000bba9:	e8 f0 fe ff ff       	call   c000ba9e <IDT::addEntry(int, void (*)(), bool)>
c000bbae:	6a 00                	push   0x0
c000bbb0:	68 75 04 00 c0       	push   0xc0000475
c000bbb5:	6a 0b                	push   0xb
c000bbb7:	53                   	push   ebx
c000bbb8:	e8 e1 fe ff ff       	call   c000ba9e <IDT::addEntry(int, void (*)(), bool)>
c000bbbd:	83 c4 20             	add    esp,0x20
c000bbc0:	6a 00                	push   0x0
c000bbc2:	68 7d 04 00 c0       	push   0xc000047d
c000bbc7:	6a 0c                	push   0xc
c000bbc9:	53                   	push   ebx
c000bbca:	e8 cf fe ff ff       	call   c000ba9e <IDT::addEntry(int, void (*)(), bool)>
c000bbcf:	6a 00                	push   0x0
c000bbd1:	68 85 04 00 c0       	push   0xc0000485
c000bbd6:	6a 0d                	push   0xd
c000bbd8:	53                   	push   ebx
c000bbd9:	e8 c0 fe ff ff       	call   c000ba9e <IDT::addEntry(int, void (*)(), bool)>
c000bbde:	83 c4 20             	add    esp,0x20
c000bbe1:	6a 00                	push   0x0
c000bbe3:	68 8d 04 00 c0       	push   0xc000048d
c000bbe8:	6a 0e                	push   0xe
c000bbea:	53                   	push   ebx
c000bbeb:	e8 ae fe ff ff       	call   c000ba9e <IDT::addEntry(int, void (*)(), bool)>
c000bbf0:	6a 00                	push   0x0
c000bbf2:	68 95 04 00 c0       	push   0xc0000495
c000bbf7:	6a 0f                	push   0xf
c000bbf9:	53                   	push   ebx
c000bbfa:	e8 9f fe ff ff       	call   c000ba9e <IDT::addEntry(int, void (*)(), bool)>
c000bbff:	83 c4 20             	add    esp,0x20
c000bc02:	6a 00                	push   0x0
c000bc04:	68 9f 04 00 c0       	push   0xc000049f
c000bc09:	6a 10                	push   0x10
c000bc0b:	53                   	push   ebx
c000bc0c:	e8 8d fe ff ff       	call   c000ba9e <IDT::addEntry(int, void (*)(), bool)>
c000bc11:	6a 00                	push   0x0
c000bc13:	68 a9 04 00 c0       	push   0xc00004a9
c000bc18:	6a 11                	push   0x11
c000bc1a:	53                   	push   ebx
c000bc1b:	e8 7e fe ff ff       	call   c000ba9e <IDT::addEntry(int, void (*)(), bool)>
c000bc20:	83 c4 20             	add    esp,0x20
c000bc23:	6a 00                	push   0x0
c000bc25:	68 b3 04 00 c0       	push   0xc00004b3
c000bc2a:	6a 12                	push   0x12
c000bc2c:	53                   	push   ebx
c000bc2d:	e8 6c fe ff ff       	call   c000ba9e <IDT::addEntry(int, void (*)(), bool)>
c000bc32:	6a 01                	push   0x1
c000bc34:	68 bd 04 00 c0       	push   0xc00004bd
c000bc39:	6a 60                	push   0x60
c000bc3b:	53                   	push   ebx
c000bc3c:	e8 5d fe ff ff       	call   c000ba9e <IDT::addEntry(int, void (*)(), bool)>
c000bc41:	83 c4 20             	add    esp,0x20
c000bc44:	6a 00                	push   0x0
c000bc46:	68 c7 04 00 c0       	push   0xc00004c7
c000bc4b:	6a 20                	push   0x20
c000bc4d:	53                   	push   ebx
c000bc4e:	e8 4b fe ff ff       	call   c000ba9e <IDT::addEntry(int, void (*)(), bool)>
c000bc53:	6a 00                	push   0x0
c000bc55:	68 d1 04 00 c0       	push   0xc00004d1
c000bc5a:	6a 21                	push   0x21
c000bc5c:	53                   	push   ebx
c000bc5d:	e8 3c fe ff ff       	call   c000ba9e <IDT::addEntry(int, void (*)(), bool)>
c000bc62:	83 c4 20             	add    esp,0x20
c000bc65:	6a 00                	push   0x0
c000bc67:	68 db 04 00 c0       	push   0xc00004db
c000bc6c:	6a 22                	push   0x22
c000bc6e:	53                   	push   ebx
c000bc6f:	e8 2a fe ff ff       	call   c000ba9e <IDT::addEntry(int, void (*)(), bool)>
c000bc74:	6a 00                	push   0x0
c000bc76:	68 e5 04 00 c0       	push   0xc00004e5
c000bc7b:	6a 23                	push   0x23
c000bc7d:	53                   	push   ebx
c000bc7e:	e8 1b fe ff ff       	call   c000ba9e <IDT::addEntry(int, void (*)(), bool)>
c000bc83:	83 c4 20             	add    esp,0x20
c000bc86:	6a 00                	push   0x0
c000bc88:	68 ef 04 00 c0       	push   0xc00004ef
c000bc8d:	6a 24                	push   0x24
c000bc8f:	53                   	push   ebx
c000bc90:	e8 09 fe ff ff       	call   c000ba9e <IDT::addEntry(int, void (*)(), bool)>
c000bc95:	6a 00                	push   0x0
c000bc97:	68 f9 04 00 c0       	push   0xc00004f9
c000bc9c:	6a 25                	push   0x25
c000bc9e:	53                   	push   ebx
c000bc9f:	e8 fa fd ff ff       	call   c000ba9e <IDT::addEntry(int, void (*)(), bool)>
c000bca4:	83 c4 20             	add    esp,0x20
c000bca7:	6a 00                	push   0x0
c000bca9:	68 03 05 00 c0       	push   0xc0000503
c000bcae:	6a 26                	push   0x26
c000bcb0:	53                   	push   ebx
c000bcb1:	e8 e8 fd ff ff       	call   c000ba9e <IDT::addEntry(int, void (*)(), bool)>
c000bcb6:	6a 00                	push   0x0
c000bcb8:	68 0d 05 00 c0       	push   0xc000050d
c000bcbd:	6a 27                	push   0x27
c000bcbf:	53                   	push   ebx
c000bcc0:	e8 d9 fd ff ff       	call   c000ba9e <IDT::addEntry(int, void (*)(), bool)>
c000bcc5:	83 c4 20             	add    esp,0x20
c000bcc8:	6a 00                	push   0x0
c000bcca:	68 17 05 00 c0       	push   0xc0000517
c000bccf:	6a 28                	push   0x28
c000bcd1:	53                   	push   ebx
c000bcd2:	e8 c7 fd ff ff       	call   c000ba9e <IDT::addEntry(int, void (*)(), bool)>
c000bcd7:	6a 00                	push   0x0
c000bcd9:	68 21 05 00 c0       	push   0xc0000521
c000bcde:	6a 29                	push   0x29
c000bce0:	53                   	push   ebx
c000bce1:	e8 b8 fd ff ff       	call   c000ba9e <IDT::addEntry(int, void (*)(), bool)>
c000bce6:	83 c4 20             	add    esp,0x20
c000bce9:	6a 00                	push   0x0
c000bceb:	68 2b 05 00 c0       	push   0xc000052b
c000bcf0:	6a 2a                	push   0x2a
c000bcf2:	53                   	push   ebx
c000bcf3:	e8 a6 fd ff ff       	call   c000ba9e <IDT::addEntry(int, void (*)(), bool)>
c000bcf8:	6a 00                	push   0x0
c000bcfa:	68 35 05 00 c0       	push   0xc0000535
c000bcff:	6a 2b                	push   0x2b
c000bd01:	53                   	push   ebx
c000bd02:	e8 97 fd ff ff       	call   c000ba9e <IDT::addEntry(int, void (*)(), bool)>
c000bd07:	83 c4 20             	add    esp,0x20
c000bd0a:	6a 00                	push   0x0
c000bd0c:	68 3f 05 00 c0       	push   0xc000053f
c000bd11:	6a 2c                	push   0x2c
c000bd13:	53                   	push   ebx
c000bd14:	e8 85 fd ff ff       	call   c000ba9e <IDT::addEntry(int, void (*)(), bool)>
c000bd19:	6a 00                	push   0x0
c000bd1b:	68 49 05 00 c0       	push   0xc0000549
c000bd20:	6a 2d                	push   0x2d
c000bd22:	53                   	push   ebx
c000bd23:	e8 76 fd ff ff       	call   c000ba9e <IDT::addEntry(int, void (*)(), bool)>
c000bd28:	83 c4 20             	add    esp,0x20
c000bd2b:	6a 00                	push   0x0
c000bd2d:	68 53 05 00 c0       	push   0xc0000553
c000bd32:	6a 2e                	push   0x2e
c000bd34:	53                   	push   ebx
c000bd35:	e8 64 fd ff ff       	call   c000ba9e <IDT::addEntry(int, void (*)(), bool)>
c000bd3a:	6a 00                	push   0x0
c000bd3c:	68 5d 05 00 c0       	push   0xc000055d
c000bd41:	6a 2f                	push   0x2f
c000bd43:	53                   	push   ebx
c000bd44:	e8 55 fd ff ff       	call   c000ba9e <IDT::addEntry(int, void (*)(), bool)>
c000bd49:	83 c4 20             	add    esp,0x20
c000bd4c:	6a 00                	push   0x0
c000bd4e:	68 67 05 00 c0       	push   0xc0000567
c000bd53:	6a 30                	push   0x30
c000bd55:	53                   	push   ebx
c000bd56:	e8 43 fd ff ff       	call   c000ba9e <IDT::addEntry(int, void (*)(), bool)>
c000bd5b:	6a 00                	push   0x0
c000bd5d:	68 71 05 00 c0       	push   0xc0000571
c000bd62:	6a 31                	push   0x31
c000bd64:	53                   	push   ebx
c000bd65:	e8 34 fd ff ff       	call   c000ba9e <IDT::addEntry(int, void (*)(), bool)>
c000bd6a:	83 c4 20             	add    esp,0x20
c000bd6d:	6a 00                	push   0x0
c000bd6f:	68 7b 05 00 c0       	push   0xc000057b
c000bd74:	6a 32                	push   0x32
c000bd76:	53                   	push   ebx
c000bd77:	e8 22 fd ff ff       	call   c000ba9e <IDT::addEntry(int, void (*)(), bool)>
c000bd7c:	6a 00                	push   0x0
c000bd7e:	68 85 05 00 c0       	push   0xc0000585
c000bd83:	6a 33                	push   0x33
c000bd85:	53                   	push   ebx
c000bd86:	e8 13 fd ff ff       	call   c000ba9e <IDT::addEntry(int, void (*)(), bool)>
c000bd8b:	83 c4 20             	add    esp,0x20
c000bd8e:	6a 00                	push   0x0
c000bd90:	68 8f 05 00 c0       	push   0xc000058f
c000bd95:	6a 34                	push   0x34
c000bd97:	53                   	push   ebx
c000bd98:	e8 01 fd ff ff       	call   c000ba9e <IDT::addEntry(int, void (*)(), bool)>
c000bd9d:	6a 00                	push   0x0
c000bd9f:	68 99 05 00 c0       	push   0xc0000599
c000bda4:	6a 35                	push   0x35
c000bda6:	53                   	push   ebx
c000bda7:	e8 f2 fc ff ff       	call   c000ba9e <IDT::addEntry(int, void (*)(), bool)>
c000bdac:	83 c4 20             	add    esp,0x20
c000bdaf:	6a 00                	push   0x0
c000bdb1:	68 a3 05 00 c0       	push   0xc00005a3
c000bdb6:	6a 36                	push   0x36
c000bdb8:	53                   	push   ebx
c000bdb9:	e8 e0 fc ff ff       	call   c000ba9e <IDT::addEntry(int, void (*)(), bool)>
c000bdbe:	6a 00                	push   0x0
c000bdc0:	68 ad 05 00 c0       	push   0xc00005ad
c000bdc5:	6a 37                	push   0x37
c000bdc7:	53                   	push   ebx
c000bdc8:	e8 d1 fc ff ff       	call   c000ba9e <IDT::addEntry(int, void (*)(), bool)>
c000bdcd:	83 c4 20             	add    esp,0x20
c000bdd0:	e8 14 25 00 00       	call   c000e2e9 <Virt::getAKernelVAS()>
c000bdd5:	52                   	push   edx
c000bdd6:	6a 03                	push   0x3
c000bdd8:	6a 02                	push   0x2
c000bdda:	50                   	push   eax
c000bddb:	e8 4a 2b 00 00       	call   c000e92a <VAS::allocatePages(int, int)>
c000bde0:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000bde7:	89 c6                	mov    esi,eax
c000bde9:	e8 54 32 00 00       	call   c000f042 <operator new(unsigned long)>
c000bdee:	81 c6 00 20 00 00    	add    esi,0x2000
c000bdf4:	89 04 24             	mov    DWORD PTR [esp],eax
c000bdf7:	89 c7                	mov    edi,eax
c000bdf9:	e8 ee 1c 00 00       	call   c000daec <TSS::TSS()>
c000bdfe:	83 c4 0c             	add    esp,0xc
c000be01:	68 5b 04 00 c0       	push   0xc000045b
c000be06:	56                   	push   esi
c000be07:	57                   	push   edi
c000be08:	e8 1f 1d 00 00       	call   c000db2c <TSS::setup(unsigned long, unsigned long)>
c000be0d:	59                   	pop    ecx
c000be0e:	89 c6                	mov    esi,eax
c000be10:	5f                   	pop    edi
c000be11:	6a 00                	push   0x0
c000be13:	8d 44 24 14          	lea    eax,[esp+0x14]
c000be17:	50                   	push   eax
c000be18:	e8 db fb ff ff       	call   c000b9f8 <IDTEntry::IDTEntry(bool)>
c000be1d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000be21:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000be26:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000be2c:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000be33:	80 ce 05             	or     dh,0x5
c000be36:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000be3a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000be3e:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000be41:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000be45:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000be48:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000be4b:	e8 86 fc ff ff       	call   c000bad6 <IDT::flush()>
c000be50:	83 c4 20             	add    esp,0x20
c000be53:	5b                   	pop    ebx
c000be54:	5e                   	pop    esi
c000be55:	5f                   	pop    edi
c000be56:	c3                   	ret    

c000be57 <sbrk>:
c000be57:	55                   	push   ebp
c000be58:	57                   	push   edi
c000be59:	56                   	push   esi
c000be5a:	53                   	push   ebx
c000be5b:	83 ec 1c             	sub    esp,0x1c
c000be5e:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000be62:	85 db                	test   ebx,ebx
c000be64:	a1 a0 39 02 c0       	mov    eax,ds:0xc00239a0
c000be69:	0f 84 e4 00 00 00    	je     c000bf53 <sbrk+0xfc>
c000be6f:	78 3d                	js     c000beae <sbrk+0x57>
c000be71:	e8 60 89 00 00       	call   c00147d6 <thisCPU()>
c000be76:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000be7c:	83 e0 01             	and    eax,0x1
c000be7f:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000be83:	a1 a0 39 02 c0       	mov    eax,ds:0xc00239a0
c000be88:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000be8c:	81 c3 ff 0f 00 00    	add    ebx,0xfff
c000be92:	89 d8                	mov    eax,ebx
c000be94:	c1 f8 1f             	sar    eax,0x1f
c000be97:	25 ff 0f 00 00       	and    eax,0xfff
c000be9c:	01 c3                	add    ebx,eax
c000be9e:	c1 fb 0c             	sar    ebx,0xc
c000bea1:	89 df                	mov    edi,ebx
c000bea3:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000bea7:	be 00 00 00 00       	mov    esi,0x0
c000beac:	eb 2a                	jmp    c000bed8 <sbrk+0x81>
c000beae:	83 ec 08             	sub    esp,0x8
c000beb1:	53                   	push   ebx
c000beb2:	68 c0 11 02 c0       	push   0xc00211c0
c000beb7:	e8 bb 32 00 00       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c000bebc:	83 c4 10             	add    esp,0x10
c000bebf:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000bec4:	e9 8a 00 00 00       	jmp    c000bf53 <sbrk+0xfc>
c000bec9:	81 05 a0 39 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc00239a0,0x1000
c000bed3:	46                   	inc    esi
c000bed4:	39 f7                	cmp    edi,esi
c000bed6:	74 34                	je     c000bf0c <sbrk+0xb5>
c000bed8:	e8 0c 24 00 00       	call   c000e2e9 <Virt::getAKernelVAS()>
c000bedd:	89 c3                	mov    ebx,eax
c000bedf:	8b 2d a0 39 02 c0    	mov    ebp,DWORD PTR ds:0xc00239a0
c000bee5:	e8 f5 06 00 00       	call   c000c5df <Phys::allocatePage()>
c000beea:	68 01 04 00 00       	push   0x401
c000beef:	55                   	push   ebp
c000bef0:	50                   	push   eax
c000bef1:	53                   	push   ebx
c000bef2:	e8 31 29 00 00       	call   c000e828 <VAS::mapPage(unsigned long, unsigned long, int)>
c000bef7:	83 c4 10             	add    esp,0x10
c000befa:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000beff:	74 c8                	je     c000bec9 <sbrk+0x72>
c000bf01:	8b 1d a0 39 02 c0    	mov    ebx,DWORD PTR ds:0xc00239a0
c000bf07:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000bf0a:	eb bd                	jmp    c000bec9 <sbrk+0x72>
c000bf0c:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000bf11:	74 48                	je     c000bf5b <sbrk+0x104>
c000bf13:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000bf17:	89 d3                	mov    ebx,edx
c000bf19:	c1 eb 0a             	shr    ebx,0xa
c000bf1c:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000bf22:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000bf28:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bf2c:	c1 e0 0c             	shl    eax,0xc
c000bf2f:	01 d0                	add    eax,edx
c000bf31:	c1 e8 0a             	shr    eax,0xa
c000bf34:	25 00 f0 ff ff       	and    eax,0xfffff000
c000bf39:	2d 00 00 40 00       	sub    eax,0x400000
c000bf3e:	39 c3                	cmp    ebx,eax
c000bf40:	77 0d                	ja     c000bf4f <sbrk+0xf8>
c000bf42:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000bf45:	81 c3 00 10 00 00    	add    ebx,0x1000
c000bf4b:	39 d8                	cmp    eax,ebx
c000bf4d:	73 f3                	jae    c000bf42 <sbrk+0xeb>
c000bf4f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bf53:	83 c4 1c             	add    esp,0x1c
c000bf56:	5b                   	pop    ebx
c000bf57:	5e                   	pop    esi
c000bf58:	5f                   	pop    edi
c000bf59:	5d                   	pop    ebp
c000bf5a:	c3                   	ret    
c000bf5b:	e8 45 37 01 00       	call   c001f6a5 <CPU::readCR3()>
c000bf60:	83 ec 0c             	sub    esp,0xc
c000bf63:	50                   	push   eax
c000bf64:	e8 4e 37 01 00       	call   c001f6b7 <CPU::writeCR3(unsigned long)>
c000bf69:	83 c4 10             	add    esp,0x10
c000bf6c:	eb e1                	jmp    c000bf4f <sbrk+0xf8>

c000bf6e <mmap>:
c000bf6e:	83 ec 18             	sub    esp,0x18
c000bf71:	68 f0 11 02 c0       	push   0xc00211f0
c000bf76:	e8 c7 99 00 00       	call   c0015942 <Krnl::panic(char const*)>
c000bf7b:	b8 00 00 00 00       	mov    eax,0x0
c000bf80:	83 c4 1c             	add    esp,0x1c
c000bf83:	c3                   	ret    

c000bf84 <munmap>:
c000bf84:	83 ec 18             	sub    esp,0x18
c000bf87:	68 f5 11 02 c0       	push   0xc00211f5
c000bf8c:	e8 b1 99 00 00       	call   c0015942 <Krnl::panic(char const*)>
c000bf91:	b8 00 00 00 00       	mov    eax,0x0
c000bf96:	83 c4 1c             	add    esp,0x1c
c000bf99:	c3                   	ret    

c000bf9a <liballoc_lock()>:
c000bf9a:	83 ec 0c             	sub    esp,0xc
c000bf9d:	e8 8d c9 00 00       	call   c001892f <lockScheduler()>
c000bfa2:	b8 00 00 00 00       	mov    eax,0x0
c000bfa7:	83 c4 0c             	add    esp,0xc
c000bfaa:	c3                   	ret    

c000bfab <liballoc_unlock()>:
c000bfab:	83 ec 0c             	sub    esp,0xc
c000bfae:	e8 7e c9 00 00       	call   c0018931 <unlockScheduler()>
c000bfb3:	b8 00 00 00 00       	mov    eax,0x0
c000bfb8:	83 c4 0c             	add    esp,0xc
c000bfbb:	c3                   	ret    

c000bfbc <liballoc_alloc(int)>:
c000bfbc:	83 ec 0c             	sub    esp,0xc
c000bfbf:	e8 25 23 00 00       	call   c000e2e9 <Virt::getAKernelVAS()>
c000bfc4:	83 ec 04             	sub    esp,0x4
c000bfc7:	6a 01                	push   0x1
c000bfc9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bfcd:	50                   	push   eax
c000bfce:	e8 57 29 00 00       	call   c000e92a <VAS::allocatePages(int, int)>
c000bfd3:	83 c4 1c             	add    esp,0x1c
c000bfd6:	c3                   	ret    

c000bfd7 <liballoc_free(void*, int)>:
c000bfd7:	83 ec 0c             	sub    esp,0xc
c000bfda:	e8 0a 23 00 00       	call   c000e2e9 <Virt::getAKernelVAS()>
c000bfdf:	83 ec 08             	sub    esp,0x8
c000bfe2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bfe6:	50                   	push   eax
c000bfe7:	e8 de 25 00 00       	call   c000e5ca <VAS::freeAllocatedPages(unsigned long)>
c000bfec:	b8 00 00 00 00       	mov    eax,0x0
c000bff1:	83 c4 1c             	add    esp,0x1c
c000bff4:	c3                   	ret    

c000bff5 <realloc>:
c000bff5:	83 ec 14             	sub    esp,0x14
c000bff8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bffc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c000:	e8 33 54 ff ff       	call   c0001438 <dlrealloc>
c000c005:	83 c4 1c             	add    esp,0x1c
c000c008:	c3                   	ret    

c000c009 <malloc>:
c000c009:	83 ec 18             	sub    esp,0x18
c000c00c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c010:	e8 e6 4e ff ff       	call   c0000efb <dlmalloc>
c000c015:	83 c4 1c             	add    esp,0x1c
c000c018:	c3                   	ret    

c000c019 <free>:
c000c019:	83 ec 18             	sub    esp,0x18
c000c01c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c020:	e8 78 4b ff ff       	call   c0000b9d <dlfree>
c000c025:	83 c4 1c             	add    esp,0x1c
c000c028:	c3                   	ret    

c000c029 <rfree>:
c000c029:	83 ec 18             	sub    esp,0x18
c000c02c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c030:	e8 e4 ff ff ff       	call   c000c019 <free>
c000c035:	83 c4 1c             	add    esp,0x1c
c000c038:	c3                   	ret    

c000c039 <calloc>:
c000c039:	56                   	push   esi
c000c03a:	53                   	push   ebx
c000c03b:	83 ec 10             	sub    esp,0x10
c000c03e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c042:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000c047:	53                   	push   ebx
c000c048:	e8 bc ff ff ff       	call   c000c009 <malloc>
c000c04d:	89 c6                	mov    esi,eax
c000c04f:	83 c4 0c             	add    esp,0xc
c000c052:	53                   	push   ebx
c000c053:	6a 00                	push   0x0
c000c055:	50                   	push   eax
c000c056:	e8 5f 46 ff ff       	call   c00006ba <memset>
c000c05b:	89 f0                	mov    eax,esi
c000c05d:	83 c4 14             	add    esp,0x14
c000c060:	5b                   	pop    ebx
c000c061:	5e                   	pop    esi
c000c062:	c3                   	ret    

c000c063 <hwTextMode_loadInData(VgaText*)>:
c000c063:	57                   	push   edi
c000c064:	56                   	push   esi
c000c065:	53                   	push   ebx
c000c066:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000c06a:	8b 87 ac 0f 00 00    	mov    eax,DWORD PTR [edi+0xfac]
c000c070:	85 c0                	test   eax,eax
c000c072:	7e 30                	jle    c000c0a4 <hwTextMode_loadInData(VgaText*)+0x41>
c000c074:	8d 5f 0c             	lea    ebx,[edi+0xc]
c000c077:	31 f6                	xor    esi,esi
c000c079:	8d 0c b6             	lea    ecx,[esi+esi*4]
c000c07c:	31 c0                	xor    eax,eax
c000c07e:	c1 e1 05             	shl    ecx,0x5
c000c081:	81 e9 60 7f f4 3d    	sub    ecx,0x3df47f60
c000c087:	66 8b 14 43          	mov    dx,WORD PTR [ebx+eax*2]
c000c08b:	66 89 14 41          	mov    WORD PTR [ecx+eax*2],dx
c000c08f:	40                   	inc    eax
c000c090:	83 f8 50             	cmp    eax,0x50
c000c093:	75 f2                	jne    c000c087 <hwTextMode_loadInData(VgaText*)+0x24>
c000c095:	46                   	inc    esi
c000c096:	81 c3 a0 00 00 00    	add    ebx,0xa0
c000c09c:	39 b7 ac 0f 00 00    	cmp    DWORD PTR [edi+0xfac],esi
c000c0a2:	7f d5                	jg     c000c079 <hwTextMode_loadInData(VgaText*)+0x16>
c000c0a4:	5b                   	pop    ebx
c000c0a5:	5e                   	pop    esi
c000c0a6:	5f                   	pop    edi
c000c0a7:	c3                   	ret    

c000c0a8 <hwTextMode_loadInTitle(VgaText*, char*)>:
c000c0a8:	56                   	push   esi
c000c0a9:	ba 00 80 0b c2       	mov    edx,0xc20b8000
c000c0ae:	53                   	push   ebx
c000c0af:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c0b3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c0b7:	8b 83 d4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfd4]
c000c0bd:	8b b3 d8 0f 00 00    	mov    esi,DWORD PTR [ebx+0xfd8]
c000c0c3:	c1 e0 04             	shl    eax,0x4
c000c0c6:	83 e6 0f             	and    esi,0xf
c000c0c9:	25 ff 00 00 00       	and    eax,0xff
c000c0ce:	83 c2 02             	add    edx,0x2
c000c0d1:	09 f0                	or     eax,esi
c000c0d3:	41                   	inc    ecx
c000c0d4:	0f b6 71 ff          	movzx  esi,BYTE PTR [ecx-0x1]
c000c0d8:	c1 e0 08             	shl    eax,0x8
c000c0db:	81 e6 ff 00 00 00    	and    esi,0xff
c000c0e1:	09 f0                	or     eax,esi
c000c0e3:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c000c0e7:	81 fa a0 80 0b c2    	cmp    edx,0xc20b80a0
c000c0ed:	75 c8                	jne    c000c0b7 <hwTextMode_loadInTitle(VgaText*, char*)+0xf>
c000c0ef:	5b                   	pop    ebx
c000c0f0:	5e                   	pop    esi
c000c0f1:	c3                   	ret    

c000c0f2 <hwTextMode_showCursor(VgaText*, bool)>:
c000c0f2:	56                   	push   esi
c000c0f3:	53                   	push   ebx
c000c0f4:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c000c0f9:	74 38                	je     c000c133 <hwTextMode_showCursor(VgaText*, bool)+0x41>
c000c0fb:	bb d4 03 00 00       	mov    ebx,0x3d4
c000c100:	b0 0a                	mov    al,0xa
c000c102:	89 da                	mov    edx,ebx
c000c104:	ee                   	out    dx,al
c000c105:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000c10a:	89 ca                	mov    edx,ecx
c000c10c:	ec                   	in     al,dx
c000c10d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000c111:	b2 0f                	mov    dl,0xf
c000c113:	83 e0 c0             	and    eax,0xffffffc0
c000c116:	2b 96 b8 0f 00 00    	sub    edx,DWORD PTR [esi+0xfb8]
c000c11c:	09 d0                	or     eax,edx
c000c11e:	89 ca                	mov    edx,ecx
c000c120:	ee                   	out    dx,al
c000c121:	b0 0b                	mov    al,0xb
c000c123:	89 da                	mov    edx,ebx
c000c125:	ee                   	out    dx,al
c000c126:	89 ca                	mov    edx,ecx
c000c128:	ec                   	in     al,dx
c000c129:	83 e0 e0             	and    eax,0xffffffe0
c000c12c:	83 c8 0f             	or     eax,0xf
c000c12f:	ee                   	out    dx,al
c000c130:	5b                   	pop    ebx
c000c131:	5e                   	pop    esi
c000c132:	c3                   	ret    
c000c133:	b0 0a                	mov    al,0xa
c000c135:	ba d4 03 00 00       	mov    edx,0x3d4
c000c13a:	ee                   	out    dx,al
c000c13b:	b0 20                	mov    al,0x20
c000c13d:	ba d5 03 00 00       	mov    edx,0x3d5
c000c142:	ee                   	out    dx,al
c000c143:	5b                   	pop    ebx
c000c144:	5e                   	pop    esi
c000c145:	c3                   	ret    

c000c146 <hwTextMode_update(VgaText*)>:
c000c146:	c3                   	ret    

c000c147 <hwTextMode_updateCursor(VgaText*)>:
c000c147:	56                   	push   esi
c000c148:	b9 19 00 00 00       	mov    ecx,0x19
c000c14d:	53                   	push   ebx
c000c14e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c152:	8b 90 ac 0f 00 00    	mov    edx,DWORD PTR [eax+0xfac]
c000c158:	8b 98 b4 0f 00 00    	mov    ebx,DWORD PTR [eax+0xfb4]
c000c15e:	29 d1                	sub    ecx,edx
c000c160:	8b b0 b0 0f 00 00    	mov    esi,DWORD PTR [eax+0xfb0]
c000c166:	01 d9                	add    ecx,ebx
c000c168:	b0 0f                	mov    al,0xf
c000c16a:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000c16d:	c1 e1 04             	shl    ecx,0x4
c000c170:	01 f1                	add    ecx,esi
c000c172:	be d4 03 00 00       	mov    esi,0x3d4
c000c177:	89 f2                	mov    edx,esi
c000c179:	ee                   	out    dx,al
c000c17a:	bb d5 03 00 00       	mov    ebx,0x3d5
c000c17f:	88 c8                	mov    al,cl
c000c181:	89 da                	mov    edx,ebx
c000c183:	ee                   	out    dx,al
c000c184:	b0 0e                	mov    al,0xe
c000c186:	89 f2                	mov    edx,esi
c000c188:	ee                   	out    dx,al
c000c189:	89 c8                	mov    eax,ecx
c000c18b:	89 da                	mov    edx,ebx
c000c18d:	66 c1 e8 08          	shr    ax,0x8
c000c191:	ee                   	out    dx,al
c000c192:	5b                   	pop    ebx
c000c193:	5e                   	pop    esi
c000c194:	c3                   	ret    

c000c195 <hwTextMode_disableBlink(VgaText*, bool)>:
c000c195:	ba da 03 00 00       	mov    edx,0x3da
c000c19a:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000c19f:	75 18                	jne    c000c1b9 <hwTextMode_disableBlink(VgaText*, bool)+0x24>
c000c1a1:	ec                   	in     al,dx
c000c1a2:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000c1a7:	b0 30                	mov    al,0x30
c000c1a9:	89 ca                	mov    edx,ecx
c000c1ab:	ee                   	out    dx,al
c000c1ac:	ba c1 03 00 00       	mov    edx,0x3c1
c000c1b1:	ec                   	in     al,dx
c000c1b2:	83 c8 08             	or     eax,0x8
c000c1b5:	89 ca                	mov    edx,ecx
c000c1b7:	ee                   	out    dx,al
c000c1b8:	c3                   	ret    
c000c1b9:	ec                   	in     al,dx
c000c1ba:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000c1bf:	b0 30                	mov    al,0x30
c000c1c1:	89 ca                	mov    edx,ecx
c000c1c3:	ee                   	out    dx,al
c000c1c4:	ba c1 03 00 00       	mov    edx,0x3c1
c000c1c9:	ec                   	in     al,dx
c000c1ca:	83 e0 f7             	and    eax,0xfffffff7
c000c1cd:	89 ca                	mov    edx,ecx
c000c1cf:	ee                   	out    dx,al
c000c1d0:	c3                   	ret    

c000c1d1 <hwTextMode_scrollScreen(VgaText*)>:
c000c1d1:	55                   	push   ebp
c000c1d2:	bd 02 00 00 00       	mov    ebp,0x2
c000c1d7:	57                   	push   edi
c000c1d8:	56                   	push   esi
c000c1d9:	53                   	push   ebx
c000c1da:	83 ec 1c             	sub    esp,0x1c
c000c1dd:	c7 44 24 0c a0 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b80a0
c000c1e5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c1e9:	31 c0                	xor    eax,eax
c000c1eb:	eb 0b                	jmp    c000c1f8 <hwTextMode_scrollScreen(VgaText*)+0x27>
c000c1ed:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000c1f3:	74 58                	je     c000c24d <hwTextMode_scrollScreen(VgaText*)+0x7c>
c000c1f5:	43                   	inc    ebx
c000c1f6:	89 f0                	mov    eax,esi
c000c1f8:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000c1fe:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000c204:	88 13                	mov    BYTE PTR [ebx],dl
c000c206:	8d 70 01             	lea    esi,[eax+0x1]
c000c209:	83 fd 18             	cmp    ebp,0x18
c000c20c:	75 df                	jne    c000c1ed <hwTextMode_scrollScreen(VgaText*)+0x1c>
c000c20e:	a8 01                	test   al,0x1
c000c210:	75 13                	jne    c000c225 <hwTextMode_scrollScreen(VgaText*)+0x54>
c000c212:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000c215:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000c21b:	75 d8                	jne    c000c1f5 <hwTextMode_scrollScreen(VgaText*)+0x24>
c000c21d:	83 c4 1c             	add    esp,0x1c
c000c220:	5b                   	pop    ebx
c000c221:	5e                   	pop    esi
c000c222:	5f                   	pop    edi
c000c223:	5d                   	pop    ebp
c000c224:	c3                   	ret    
c000c225:	52                   	push   edx
c000c226:	31 c0                	xor    eax,eax
c000c228:	52                   	push   edx
c000c229:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000c22d:	8a 81 cc 0f 00 00    	mov    al,BYTE PTR [ecx+0xfcc]
c000c233:	50                   	push   eax
c000c234:	31 c0                	xor    eax,eax
c000c236:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000c23a:	8a 81 d0 0f 00 00    	mov    al,BYTE PTR [ecx+0xfd0]
c000c240:	50                   	push   eax
c000c241:	e8 84 0b 00 00       	call   c000cdca <VgaText::combineColours(unsigned char, unsigned char)>
c000c246:	83 c4 10             	add    esp,0x10
c000c249:	88 07                	mov    BYTE PTR [edi],al
c000c24b:	eb c8                	jmp    c000c215 <hwTextMode_scrollScreen(VgaText*)+0x44>
c000c24d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c251:	45                   	inc    ebp
c000c252:	05 a0 00 00 00       	add    eax,0xa0
c000c257:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c25b:	eb 88                	jmp    c000c1e5 <hwTextMode_scrollScreen(VgaText*)+0x14>

c000c25d <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000c25d:	56                   	push   esi
c000c25e:	31 c0                	xor    eax,eax
c000c260:	53                   	push   ebx
c000c261:	83 ec 0c             	sub    esp,0xc
c000c264:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c000c268:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000c26c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000c270:	50                   	push   eax
c000c271:	31 c0                	xor    eax,eax
c000c273:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c000c277:	50                   	push   eax
c000c278:	e8 4d 0b 00 00       	call   c000cdca <VgaText::combineColours(unsigned char, unsigned char)>
c000c27d:	5a                   	pop    edx
c000c27e:	25 ff 00 00 00       	and    eax,0xff
c000c283:	59                   	pop    ecx
c000c284:	50                   	push   eax
c000c285:	89 f0                	mov    eax,esi
c000c287:	0f be f0             	movsx  esi,al
c000c28a:	56                   	push   esi
c000c28b:	e8 e0 0b 00 00       	call   c000ce70 <VgaText::combineCharAndColour(char, unsigned char)>
c000c290:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000c294:	ba 19 00 00 00       	mov    edx,0x19
c000c299:	8b b1 ac 0f 00 00    	mov    esi,DWORD PTR [ecx+0xfac]
c000c29f:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000c2a2:	29 f2                	sub    edx,esi
c000c2a4:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000c2a8:	c1 e1 04             	shl    ecx,0x4
c000c2ab:	8d 14 92             	lea    edx,[edx+edx*4]
c000c2ae:	01 d9                	add    ecx,ebx
c000c2b0:	c1 e2 04             	shl    edx,0x4
c000c2b3:	01 ca                	add    edx,ecx
c000c2b5:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c000c2bd:	83 c4 14             	add    esp,0x14
c000c2c0:	5b                   	pop    ebx
c000c2c1:	5e                   	pop    esi
c000c2c2:	c3                   	ret    

c000c2c3 <setupTextMode()>:
c000c2c3:	c7 05 38 46 02 c0 95 c1 00 c0 	mov    DWORD PTR ds:0xc0024638,0xc000c195
c000c2cd:	c7 05 24 46 02 c0 63 c0 00 c0 	mov    DWORD PTR ds:0xc0024624,0xc000c063
c000c2d7:	c7 05 20 46 02 c0 a8 c0 00 c0 	mov    DWORD PTR ds:0xc0024620,0xc000c0a8
c000c2e1:	c7 05 2c 46 02 c0 d1 c1 00 c0 	mov    DWORD PTR ds:0xc002462c,0xc000c1d1
c000c2eb:	c7 05 34 46 02 c0 f2 c0 00 c0 	mov    DWORD PTR ds:0xc0024634,0xc000c0f2
c000c2f5:	c7 05 28 46 02 c0 46 c1 00 c0 	mov    DWORD PTR ds:0xc0024628,0xc000c146
c000c2ff:	c7 05 30 46 02 c0 47 c1 00 c0 	mov    DWORD PTR ds:0xc0024630,0xc000c147
c000c309:	c7 05 3c 46 02 c0 5d c2 00 c0 	mov    DWORD PTR ds:0xc002463c,0xc000c25d
c000c313:	c3                   	ret    

c000c314 <kernel_main>:
c000c314:	57                   	push   edi
c000c315:	bf f9 03 00 00       	mov    edi,0x3f9
c000c31a:	56                   	push   esi
c000c31b:	31 f6                	xor    esi,esi
c000c31d:	53                   	push   ebx
c000c31e:	83 ec 10             	sub    esp,0x10
c000c321:	e8 fe 08 00 00       	call   c000cc24 <installVgaTextImplementation()>
c000c326:	e8 98 ff ff ff       	call   c000c2c3 <setupTextMode()>
c000c32b:	89 f0                	mov    eax,esi
c000c32d:	89 fa                	mov    edx,edi
c000c32f:	ee                   	out    dx,al
c000c330:	bb fb 03 00 00       	mov    ebx,0x3fb
c000c335:	b0 80                	mov    al,0x80
c000c337:	89 da                	mov    edx,ebx
c000c339:	ee                   	out    dx,al
c000c33a:	b1 03                	mov    cl,0x3
c000c33c:	ba f8 03 00 00       	mov    edx,0x3f8
c000c341:	88 c8                	mov    al,cl
c000c343:	ee                   	out    dx,al
c000c344:	89 f0                	mov    eax,esi
c000c346:	89 fa                	mov    edx,edi
c000c348:	ee                   	out    dx,al
c000c349:	88 c8                	mov    al,cl
c000c34b:	89 da                	mov    edx,ebx
c000c34d:	ee                   	out    dx,al
c000c34e:	b0 c7                	mov    al,0xc7
c000c350:	ba fa 03 00 00       	mov    edx,0x3fa
c000c355:	ee                   	out    dx,al
c000c356:	b0 0b                	mov    al,0xb
c000c358:	ba fc 03 00 00       	mov    edx,0x3fc
c000c35d:	ee                   	out    dx,al
c000c35e:	a1 24 05 00 00       	mov    eax,ds:0x524
c000c363:	83 ec 0c             	sub    esp,0xc
c000c366:	05 ff 0f 00 00       	add    eax,0xfff
c000c36b:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c370:	50                   	push   eax
c000c371:	e8 6d 03 00 00       	call   c000c6e3 <Phys::physicalMemorySetup(unsigned int)>
c000c376:	e8 f2 1e 00 00       	call   c000e26d <Virt::virtualMemorySetup()>
c000c37b:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000c381:	83 c4 10             	add    esp,0x10
c000c384:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000c38a:	75 0e                	jne    c000c39a <kernel_main+0x86>
c000c38c:	89 d8                	mov    eax,ebx
c000c38e:	25 48 03 00 00       	and    eax,0x348
c000c393:	3d 00 03 00 00       	cmp    eax,0x300
c000c398:	74 10                	je     c000c3aa <kernel_main+0x96>
c000c39a:	83 ec 0c             	sub    esp,0xc
c000c39d:	68 07 27 02 c0       	push   0xc0022707
c000c3a2:	e8 9b 95 00 00       	call   c0015942 <Krnl::panic(char const*)>
c000c3a7:	83 c4 10             	add    esp,0x10
c000c3aa:	83 ec 0c             	sub    esp,0xc
c000c3ad:	89 1d a0 45 02 c0    	mov    DWORD PTR ds:0xc00245a0,ebx
c000c3b3:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000c3b7:	53                   	push   ebx
c000c3b8:	e8 4d 20 00 00       	call   c000e40a <VAS::VAS()>
c000c3bd:	89 1d e4 46 02 c0    	mov    DWORD PTR ds:0xc00246e4,ebx
c000c3c3:	e8 58 3c ff ff       	call   c0000020 <callGlobalConstructors>
c000c3c8:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000c3cf:	e8 6e 2c 00 00       	call   c000f042 <operator new(unsigned long)>
c000c3d4:	89 04 24             	mov    DWORD PTR [esp],eax
c000c3d7:	89 c6                	mov    esi,eax
c000c3d9:	e8 46 ea ff ff       	call   c000ae24 <Computer::Computer()>
c000c3de:	6a 00                	push   0x0
c000c3e0:	6a 00                	push   0x0
c000c3e2:	89 35 88 45 02 c0    	mov    DWORD PTR ds:0xc0024588,esi
c000c3e8:	6a 00                	push   0x0
c000c3ea:	56                   	push   esi
c000c3eb:	e8 5c f2 ff ff       	call   c000b64c <Computer::open(int, int, void*)>
c000c3f0:	83 c4 14             	add    esp,0x14
c000c3f3:	53                   	push   ebx
c000c3f4:	e8 c3 22 00 00       	call   c000e6bc <VAS::~VAS()>
c000c3f9:	c7 04 24 fc 11 02 c0 	mov    DWORD PTR [esp],0xc00211fc
c000c400:	e8 3d 95 00 00       	call   c0015942 <Krnl::panic(char const*)>
c000c405:	83 c4 20             	add    esp,0x20
c000c408:	5b                   	pop    ebx
c000c409:	5e                   	pop    esi
c000c40a:	5f                   	pop    edi
c000c40b:	c3                   	ret    

c000c40c <Phys::allocateDMA(unsigned long)>:
c000c40c:	57                   	push   edi
c000c40d:	31 d2                	xor    edx,edx
c000c40f:	56                   	push   esi
c000c410:	31 ff                	xor    edi,edi
c000c412:	53                   	push   ebx
c000c413:	31 c9                	xor    ecx,ecx
c000c415:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c419:	31 f6                	xor    esi,esi
c000c41b:	05 ff 0f 00 00       	add    eax,0xfff
c000c420:	c1 e8 0c             	shr    eax,0xc
c000c423:	eb 17                	jmp    c000c43c <Phys::allocateDMA(unsigned long)+0x30>
c000c425:	85 c9                	test   ecx,ecx
c000c427:	75 04                	jne    c000c42d <Phys::allocateDMA(unsigned long)+0x21>
c000c429:	89 d7                	mov    edi,edx
c000c42b:	89 d6                	mov    esi,edx
c000c42d:	8d 59 01             	lea    ebx,[ecx+0x1]
c000c430:	39 d8                	cmp    eax,ebx
c000c432:	74 1f                	je     c000c453 <Phys::allocateDMA(unsigned long)+0x47>
c000c434:	42                   	inc    edx
c000c435:	89 d9                	mov    ecx,ebx
c000c437:	83 fa 2f             	cmp    edx,0x2f
c000c43a:	7f 11                	jg     c000c44d <Phys::allocateDMA(unsigned long)+0x41>
c000c43c:	80 ba e0 45 02 c0 00 	cmp    BYTE PTR [edx-0x3ffdba20],0x0
c000c443:	74 e0                	je     c000c425 <Phys::allocateDMA(unsigned long)+0x19>
c000c445:	31 c9                	xor    ecx,ecx
c000c447:	42                   	inc    edx
c000c448:	83 fa 2f             	cmp    edx,0x2f
c000c44b:	7e ef                	jle    c000c43c <Phys::allocateDMA(unsigned long)+0x30>
c000c44d:	5b                   	pop    ebx
c000c44e:	31 c0                	xor    eax,eax
c000c450:	5e                   	pop    esi
c000c451:	5f                   	pop    edi
c000c452:	c3                   	ret    
c000c453:	8d 54 06 ff          	lea    edx,[esi+eax*1-0x1]
c000c457:	89 d3                	mov    ebx,edx
c000c459:	c1 fb 1f             	sar    ebx,0x1f
c000c45c:	83 e3 0f             	and    ebx,0xf
c000c45f:	01 d3                	add    ebx,edx
c000c461:	89 f2                	mov    edx,esi
c000c463:	c1 fb 04             	sar    ebx,0x4
c000c466:	c1 fa 04             	sar    edx,0x4
c000c469:	39 da                	cmp    edx,ebx
c000c46b:	75 30                	jne    c000c49d <Phys::allocateDMA(unsigned long)+0x91>
c000c46d:	85 c0                	test   eax,eax
c000c46f:	74 1b                	je     c000c48c <Phys::allocateDMA(unsigned long)+0x80>
c000c471:	bf e0 45 02 c0       	mov    edi,0xc00245e0
c000c476:	8d 96 e0 45 02 c0    	lea    edx,[esi-0x3ffdba20]
c000c47c:	83 f7 ff             	xor    edi,0xffffffff
c000c47f:	29 f7                	sub    edi,esi
c000c481:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000c484:	42                   	inc    edx
c000c485:	8d 04 17             	lea    eax,[edi+edx*1]
c000c488:	39 c1                	cmp    ecx,eax
c000c48a:	7f f5                	jg     c000c481 <Phys::allocateDMA(unsigned long)+0x75>
c000c48c:	85 db                	test   ebx,ebx
c000c48e:	74 13                	je     c000c4a3 <Phys::allocateDMA(unsigned long)+0x97>
c000c490:	5b                   	pop    ebx
c000c491:	8d 86 50 20 0c 00    	lea    eax,[esi+0xc2050]
c000c497:	c1 e0 0c             	shl    eax,0xc
c000c49a:	5e                   	pop    esi
c000c49b:	5f                   	pop    edi
c000c49c:	c3                   	ret    
c000c49d:	89 fa                	mov    edx,edi
c000c49f:	31 c9                	xor    ecx,ecx
c000c4a1:	eb a4                	jmp    c000c447 <Phys::allocateDMA(unsigned long)+0x3b>
c000c4a3:	c1 e6 0c             	shl    esi,0xc
c000c4a6:	5b                   	pop    ebx
c000c4a7:	8d 86 00 00 01 c2    	lea    eax,[esi-0x3dff0000]
c000c4ad:	5e                   	pop    esi
c000c4ae:	5f                   	pop    edi
c000c4af:	c3                   	ret    

c000c4b0 <Phys::freeDMA(unsigned long, unsigned long)>:
c000c4b0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c4b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c4b8:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000c4be:	c1 e9 0c             	shr    ecx,0xc
c000c4c1:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000c4c6:	76 25                	jbe    c000c4ed <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000c4c8:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000c4cd:	c1 e8 0c             	shr    eax,0xc
c000c4d0:	8d 50 10             	lea    edx,[eax+0x10]
c000c4d3:	85 c9                	test   ecx,ecx
c000c4d5:	74 15                	je     c000c4ec <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000c4d7:	8d 82 e0 45 02 c0    	lea    eax,[edx-0x3ffdba20]
c000c4dd:	8d 94 11 e0 45 02 c0 	lea    edx,[ecx+edx*1-0x3ffdba20]
c000c4e4:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000c4e7:	40                   	inc    eax
c000c4e8:	39 d0                	cmp    eax,edx
c000c4ea:	75 f8                	jne    c000c4e4 <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000c4ec:	c3                   	ret    
c000c4ed:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000c4f3:	c1 ea 0c             	shr    edx,0xc
c000c4f6:	eb db                	jmp    c000c4d3 <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000c4f8 <Phys::setPageState(unsigned long, bool)>:
c000c4f8:	56                   	push   esi
c000c4f9:	ba 01 00 00 00       	mov    edx,0x1
c000c4fe:	53                   	push   ebx
c000c4ff:	8b 35 a4 39 02 c0    	mov    esi,DWORD PTR ds:0xc00239a4
c000c505:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c509:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c50d:	89 c8                	mov    eax,ecx
c000c50f:	83 e1 07             	and    ecx,0x7
c000c512:	c1 e8 03             	shr    eax,0x3
c000c515:	01 c6                	add    esi,eax
c000c517:	d3 e2                	shl    edx,cl
c000c519:	83 f2 ff             	xor    edx,0xffffffff
c000c51c:	20 16                	and    BYTE PTR [esi],dl
c000c51e:	8b 15 a4 39 02 c0    	mov    edx,DWORD PTR ds:0xc00239a4
c000c524:	01 d0                	add    eax,edx
c000c526:	d3 e3                	shl    ebx,cl
c000c528:	8a 08                	mov    cl,BYTE PTR [eax]
c000c52a:	09 d9                	or     ecx,ebx
c000c52c:	88 08                	mov    BYTE PTR [eax],cl
c000c52e:	5b                   	pop    ebx
c000c52f:	5e                   	pop    esi
c000c530:	c3                   	ret    

c000c531 <Phys::getPageState(unsigned long)>:
c000c531:	53                   	push   ebx
c000c532:	8b 15 a4 39 02 c0    	mov    edx,DWORD PTR ds:0xc00239a4
c000c538:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c53c:	31 db                	xor    ebx,ebx
c000c53e:	89 c8                	mov    eax,ecx
c000c540:	83 e1 07             	and    ecx,0x7
c000c543:	c1 e8 03             	shr    eax,0x3
c000c546:	8a 1c 02             	mov    bl,BYTE PTR [edx+eax*1]
c000c549:	89 d8                	mov    eax,ebx
c000c54b:	5b                   	pop    ebx
c000c54c:	d3 f8                	sar    eax,cl
c000c54e:	83 e0 01             	and    eax,0x1
c000c551:	c3                   	ret    

c000c552 <Phys::freePage(unsigned long)>:
c000c552:	53                   	push   ebx
c000c553:	83 ec 08             	sub    esp,0x8
c000c556:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c55a:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000c560:	76 5a                	jbe    c000c5bc <Phys::freePage(unsigned long)+0x6a>
c000c562:	c1 eb 0c             	shr    ebx,0xc
c000c565:	53                   	push   ebx
c000c566:	e8 c6 ff ff ff       	call   c000c531 <Phys::getPageState(unsigned long)>
c000c56b:	5a                   	pop    edx
c000c56c:	84 c0                	test   al,al
c000c56e:	74 5e                	je     c000c5ce <Phys::freePage(unsigned long)+0x7c>
c000c570:	a1 cc 45 02 c0       	mov    eax,ds:0xc00245cc
c000c575:	48                   	dec    eax
c000c576:	a3 cc 45 02 c0       	mov    ds:0xc00245cc,eax
c000c57b:	8d 04 80             	lea    eax,[eax+eax*4]
c000c57e:	8d 04 80             	lea    eax,[eax+eax*4]
c000c581:	c1 e0 02             	shl    eax,0x2
c000c584:	89 c2                	mov    edx,eax
c000c586:	c1 fa 1f             	sar    edx,0x1f
c000c589:	f7 3d d0 45 02 c0    	idiv   DWORD PTR ds:0xc00245d0
c000c58f:	39 05 c8 45 02 c0    	cmp    DWORD PTR ds:0xc00245c8,eax
c000c595:	75 12                	jne    c000c5a9 <Phys::freePage(unsigned long)+0x57>
c000c597:	51                   	push   ecx
c000c598:	51                   	push   ecx
c000c599:	6a 00                	push   0x0
c000c59b:	53                   	push   ebx
c000c59c:	e8 57 ff ff ff       	call   c000c4f8 <Phys::setPageState(unsigned long, bool)>
c000c5a1:	83 c4 10             	add    esp,0x10
c000c5a4:	83 c4 08             	add    esp,0x8
c000c5a7:	5b                   	pop    ebx
c000c5a8:	c3                   	ret    
c000c5a9:	83 ec 0c             	sub    esp,0xc
c000c5ac:	a3 c8 45 02 c0       	mov    ds:0xc00245c8,eax
c000c5b1:	50                   	push   eax
c000c5b2:	e8 01 0a 00 00       	call   c000cfb8 <VgaText::updateRAMUsageDisplay(int)>
c000c5b7:	83 c4 10             	add    esp,0x10
c000c5ba:	eb db                	jmp    c000c597 <Phys::freePage(unsigned long)+0x45>
c000c5bc:	68 00 10 00 00       	push   0x1000
c000c5c1:	53                   	push   ebx
c000c5c2:	e8 e9 fe ff ff       	call   c000c4b0 <Phys::freeDMA(unsigned long, unsigned long)>
c000c5c7:	59                   	pop    ecx
c000c5c8:	5b                   	pop    ebx
c000c5c9:	83 c4 08             	add    esp,0x8
c000c5cc:	5b                   	pop    ebx
c000c5cd:	c3                   	ret    
c000c5ce:	c7 44 24 10 17 12 02 c0 	mov    DWORD PTR [esp+0x10],0xc0021217
c000c5d6:	83 c4 08             	add    esp,0x8
c000c5d9:	5b                   	pop    ebx
c000c5da:	e9 63 93 00 00       	jmp    c0015942 <Krnl::panic(char const*)>

c000c5df <Phys::allocatePage()>:
c000c5df:	56                   	push   esi
c000c5e0:	53                   	push   ebx
c000c5e1:	51                   	push   ecx
c000c5e2:	8b 35 c0 45 02 c0    	mov    esi,DWORD PTR ds:0xc00245c0
c000c5e8:	89 f3                	mov    ebx,esi
c000c5ea:	eb 0a                	jmp    c000c5f6 <Phys::allocatePage()+0x17>
c000c5ec:	89 1d c0 45 02 c0    	mov    DWORD PTR ds:0xc00245c0,ebx
c000c5f2:	39 de                	cmp    esi,ebx
c000c5f4:	74 24                	je     c000c61a <Phys::allocatePage()+0x3b>
c000c5f6:	53                   	push   ebx
c000c5f7:	e8 35 ff ff ff       	call   c000c531 <Phys::getPageState(unsigned long)>
c000c5fc:	5a                   	pop    edx
c000c5fd:	84 c0                	test   al,al
c000c5ff:	74 5a                	je     c000c65b <Phys::allocatePage()+0x7c>
c000c601:	43                   	inc    ebx
c000c602:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000c608:	75 e2                	jne    c000c5ec <Phys::allocatePage()+0xd>
c000c60a:	31 db                	xor    ebx,ebx
c000c60c:	c7 05 c0 45 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00245c0,0x0
c000c616:	39 de                	cmp    esi,ebx
c000c618:	75 dc                	jne    c000c5f6 <Phys::allocatePage()+0x17>
c000c61a:	83 ec 0c             	sub    esp,0xc
c000c61d:	68 2d 12 02 c0       	push   0xc002122d
c000c622:	e8 50 2b 00 00       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c000c627:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c000c62e:	e8 d9 fd ff ff       	call   c000c40c <Phys::allocateDMA(unsigned long)>
c000c633:	83 c4 10             	add    esp,0x10
c000c636:	85 c0                	test   eax,eax
c000c638:	75 5a                	jne    c000c694 <Phys::allocatePage()+0xb5>
c000c63a:	83 ec 0c             	sub    esp,0xc
c000c63d:	68 3e 12 02 c0       	push   0xc002123e
c000c642:	e8 fb 92 00 00       	call   c0015942 <Krnl::panic(char const*)>
c000c647:	83 c4 10             	add    esp,0x10
c000c64a:	8b 1d c0 45 02 c0    	mov    ebx,DWORD PTR ds:0xc00245c0
c000c650:	53                   	push   ebx
c000c651:	e8 db fe ff ff       	call   c000c531 <Phys::getPageState(unsigned long)>
c000c656:	5a                   	pop    edx
c000c657:	84 c0                	test   al,al
c000c659:	75 a6                	jne    c000c601 <Phys::allocatePage()+0x22>
c000c65b:	6a 01                	push   0x1
c000c65d:	53                   	push   ebx
c000c65e:	e8 95 fe ff ff       	call   c000c4f8 <Phys::setPageState(unsigned long, bool)>
c000c663:	a1 cc 45 02 c0       	mov    eax,ds:0xc00245cc
c000c668:	59                   	pop    ecx
c000c669:	40                   	inc    eax
c000c66a:	5b                   	pop    ebx
c000c66b:	a3 cc 45 02 c0       	mov    ds:0xc00245cc,eax
c000c670:	8d 04 80             	lea    eax,[eax+eax*4]
c000c673:	8d 04 80             	lea    eax,[eax+eax*4]
c000c676:	c1 e0 02             	shl    eax,0x2
c000c679:	89 c2                	mov    edx,eax
c000c67b:	c1 fa 1f             	sar    edx,0x1f
c000c67e:	f7 3d d0 45 02 c0    	idiv   DWORD PTR ds:0xc00245d0
c000c684:	39 05 c8 45 02 c0    	cmp    DWORD PTR ds:0xc00245c8,eax
c000c68a:	75 0c                	jne    c000c698 <Phys::allocatePage()+0xb9>
c000c68c:	a1 c0 45 02 c0       	mov    eax,ds:0xc00245c0
c000c691:	c1 e0 0c             	shl    eax,0xc
c000c694:	5a                   	pop    edx
c000c695:	5b                   	pop    ebx
c000c696:	5e                   	pop    esi
c000c697:	c3                   	ret    
c000c698:	83 ec 0c             	sub    esp,0xc
c000c69b:	a3 c8 45 02 c0       	mov    ds:0xc00245c8,eax
c000c6a0:	50                   	push   eax
c000c6a1:	e8 12 09 00 00       	call   c000cfb8 <VgaText::updateRAMUsageDisplay(int)>
c000c6a6:	83 c4 10             	add    esp,0x10
c000c6a9:	eb e1                	jmp    c000c68c <Phys::allocatePage()+0xad>

c000c6ab <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000c6ab:	56                   	push   esi
c000c6ac:	53                   	push   ebx
c000c6ad:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c6b1:	39 1d c4 45 02 c0    	cmp    DWORD PTR ds:0xc00245c4,ebx
c000c6b7:	73 06                	jae    c000c6bf <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000c6b9:	89 1d c4 45 02 c0    	mov    DWORD PTR ds:0xc00245c4,ebx
c000c6bf:	c1 eb 0c             	shr    ebx,0xc
c000c6c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c6c6:	c1 e8 0c             	shr    eax,0xc
c000c6c9:	39 d8                	cmp    eax,ebx
c000c6cb:	73 13                	jae    c000c6e0 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000c6cd:	6a 00                	push   0x0
c000c6cf:	8d 70 01             	lea    esi,[eax+0x1]
c000c6d2:	50                   	push   eax
c000c6d3:	e8 20 fe ff ff       	call   c000c4f8 <Phys::setPageState(unsigned long, bool)>
c000c6d8:	5a                   	pop    edx
c000c6d9:	89 f0                	mov    eax,esi
c000c6db:	59                   	pop    ecx
c000c6dc:	39 f3                	cmp    ebx,esi
c000c6de:	75 ed                	jne    c000c6cd <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000c6e0:	5b                   	pop    ebx
c000c6e1:	5e                   	pop    esi
c000c6e2:	c3                   	ret    

c000c6e3 <Phys::physicalMemorySetup(unsigned int)>:
c000c6e3:	55                   	push   ebp
c000c6e4:	57                   	push   edi
c000c6e5:	56                   	push   esi
c000c6e6:	53                   	push   ebx
c000c6e7:	31 db                	xor    ebx,ebx
c000c6e9:	83 ec 40             	sub    esp,0x40
c000c6ec:	6a 30                	push   0x30
c000c6ee:	6a 00                	push   0x0
c000c6f0:	68 e0 45 02 c0       	push   0xc00245e0
c000c6f5:	e8 c0 3f ff ff       	call   c00006ba <memset>
c000c6fa:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000c6fe:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c703:	05 00 10 00 00       	add    eax,0x1000
c000c708:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000c70c:	83 c4 10             	add    esp,0x10
c000c70f:	56                   	push   esi
c000c710:	56                   	push   esi
c000c711:	6a 01                	push   0x1
c000c713:	53                   	push   ebx
c000c714:	43                   	inc    ebx
c000c715:	e8 de fd ff ff       	call   c000c4f8 <Phys::setPageState(unsigned long, bool)>
c000c71a:	83 c4 10             	add    esp,0x10
c000c71d:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000c723:	75 ea                	jne    c000c70f <Phys::physicalMemorySetup(unsigned int)+0x2c>
c000c725:	66 a1 13 05 00 c2    	mov    ax,ds:0xc2000513
c000c72b:	66 85 c0             	test   ax,ax
c000c72e:	0f 84 3b 01 00 00    	je     c000c86f <Phys::physicalMemorySetup(unsigned int)+0x18c>
c000c734:	89 c7                	mov    edi,eax
c000c736:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000c73e:	81 e7 ff ff 00 00    	and    edi,0xffff
c000c744:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000c749:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000c74d:	eb 6d                	jmp    c000c7bc <Phys::physicalMemorySetup(unsigned int)+0xd9>
c000c74f:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000c753:	89 c1                	mov    ecx,eax
c000c755:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000c759:	0f 83 bc 00 00 00    	jae    c000c81b <Phys::physicalMemorySetup(unsigned int)+0x138>
c000c75f:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000c763:	ba 00 00 0a 00       	mov    edx,0xa0000
c000c768:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000c76c:	39 f2                	cmp    edx,esi
c000c76e:	19 f8                	sbb    eax,edi
c000c770:	73 07                	jae    c000c779 <Phys::physicalMemorySetup(unsigned int)+0x96>
c000c772:	be 00 00 0a 00       	mov    esi,0xa0000
c000c777:	31 ff                	xor    edi,edi
c000c779:	89 f2                	mov    edx,esi
c000c77b:	b8 ff 1f 00 00       	mov    eax,0x1fff
c000c780:	81 c2 00 00 f8 ff    	add    edx,0xfff80000
c000c786:	89 f9                	mov    ecx,edi
c000c788:	83 d1 ff             	adc    ecx,0xffffffff
c000c78b:	39 d0                	cmp    eax,edx
c000c78d:	b8 00 00 00 00       	mov    eax,0x0
c000c792:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c796:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000c79a:	19 c8                	sbb    eax,ecx
c000c79c:	0f 82 0d 01 00 00    	jb     c000c8af <Phys::physicalMemorySetup(unsigned int)+0x1cc>
c000c7a2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c7a6:	83 c3 18             	add    ebx,0x18
c000c7a9:	41                   	inc    ecx
c000c7aa:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000c7ae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c7b2:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c000c7b6:	0f 84 c3 00 00 00    	je     c000c87f <Phys::physicalMemorySetup(unsigned int)+0x19c>
c000c7bc:	8b 33                	mov    esi,DWORD PTR [ebx]
c000c7be:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000c7c1:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000c7c4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c7c8:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000c7cb:	01 f0                	add    eax,esi
c000c7cd:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c7d0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c7d4:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c7d8:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000c7dc:	11 fa                	adc    edx,edi
c000c7de:	55                   	push   ebp
c000c7df:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c7e3:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000c7e7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c7eb:	51                   	push   ecx
c000c7ec:	56                   	push   esi
c000c7ed:	68 78 12 02 c0       	push   0xc0021278
c000c7f2:	e8 80 29 00 00       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c000c7f7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c7fb:	83 c4 10             	add    esp,0x10
c000c7fe:	09 f8                	or     eax,edi
c000c800:	75 7d                	jne    c000c87f <Phys::physicalMemorySetup(unsigned int)+0x19c>
c000c802:	83 fd 01             	cmp    ebp,0x1
c000c805:	75 11                	jne    c000c818 <Phys::physicalMemorySetup(unsigned int)+0x135>
c000c807:	ba 00 00 08 00       	mov    edx,0x80000
c000c80c:	89 c1                	mov    ecx,eax
c000c80e:	39 f2                	cmp    edx,esi
c000c810:	19 f9                	sbb    ecx,edi
c000c812:	0f 83 37 ff ff ff    	jae    c000c74f <Phys::physicalMemorySetup(unsigned int)+0x6c>
c000c818:	4d                   	dec    ebp
c000c819:	75 87                	jne    c000c7a2 <Phys::physicalMemorySetup(unsigned int)+0xbf>
c000c81b:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000c81f:	31 d2                	xor    edx,edx
c000c821:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c000c825:	89 c8                	mov    eax,ecx
c000c827:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c82b:	19 d1                	sbb    ecx,edx
c000c82d:	0f 82 6f ff ff ff    	jb     c000c7a2 <Phys::physicalMemorySetup(unsigned int)+0xbf>
c000c833:	b9 ff 1f 00 00       	mov    ecx,0x1fff
c000c838:	3b 4c 24 18          	cmp    ecx,DWORD PTR [esp+0x18]
c000c83c:	b9 00 00 00 00       	mov    ecx,0x0
c000c841:	1b 4c 24 1c          	sbb    ecx,DWORD PTR [esp+0x1c]
c000c845:	0f 83 57 ff ff ff    	jae    c000c7a2 <Phys::physicalMemorySetup(unsigned int)+0xbf>
c000c84b:	39 c6                	cmp    esi,eax
c000c84d:	19 d7                	sbb    edi,edx
c000c84f:	73 6a                	jae    c000c8bb <Phys::physicalMemorySetup(unsigned int)+0x1d8>
c000c851:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000c855:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000c859:	29 c7                	sub    edi,eax
c000c85b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c85f:	19 d5                	sbb    ebp,edx
c000c861:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000c865:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000c869:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c86d:	eb 4c                	jmp    c000c8bb <Phys::physicalMemorySetup(unsigned int)+0x1d8>
c000c86f:	83 ec 0c             	sub    esp,0xc
c000c872:	68 4c 12 02 c0       	push   0xc002124c
c000c877:	e8 c6 90 00 00       	call   c0015942 <Krnl::panic(char const*)>
c000c87c:	83 c4 10             	add    esp,0x10
c000c87f:	bb 40 01 00 00       	mov    ebx,0x140
c000c884:	50                   	push   eax
c000c885:	50                   	push   eax
c000c886:	6a 00                	push   0x0
c000c888:	53                   	push   ebx
c000c889:	e8 6a fc ff ff       	call   c000c4f8 <Phys::setPageState(unsigned long, bool)>
c000c88e:	8b 15 d0 45 02 c0    	mov    edx,DWORD PTR ds:0xc00245d0
c000c894:	43                   	inc    ebx
c000c895:	42                   	inc    edx
c000c896:	83 c4 10             	add    esp,0x10
c000c899:	89 15 d0 45 02 c0    	mov    DWORD PTR ds:0xc00245d0,edx
c000c89f:	81 fb 80 01 00 00    	cmp    ebx,0x180
c000c8a5:	75 dd                	jne    c000c884 <Phys::physicalMemorySetup(unsigned int)+0x1a1>
c000c8a7:	83 c4 3c             	add    esp,0x3c
c000c8aa:	5b                   	pop    ebx
c000c8ab:	5e                   	pop    esi
c000c8ac:	5f                   	pop    edi
c000c8ad:	5d                   	pop    ebp
c000c8ae:	c3                   	ret    
c000c8af:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c000c8b3:	c7 44 24 20 00 00 08 00 	mov    DWORD PTR [esp+0x20],0x80000
c000c8bb:	56                   	push   esi
c000c8bc:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c000c8c0:	56                   	push   esi
c000c8c1:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000c8c5:	57                   	push   edi
c000c8c6:	68 9c 12 02 c0       	push   0xc002129c
c000c8cb:	e8 a7 28 00 00       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c000c8d0:	5d                   	pop    ebp
c000c8d1:	58                   	pop    eax
c000c8d2:	56                   	push   esi
c000c8d3:	57                   	push   edi
c000c8d4:	e8 d2 fd ff ff       	call   c000c6ab <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000c8d9:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000c8dd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c8e1:	0f ac d0 0c          	shrd   eax,edx,0xc
c000c8e5:	8b 15 d0 45 02 c0    	mov    edx,DWORD PTR ds:0xc00245d0
c000c8eb:	83 c4 0c             	add    esp,0xc
c000c8ee:	01 d0                	add    eax,edx
c000c8f0:	a3 d0 45 02 c0       	mov    ds:0xc00245d0,eax
c000c8f5:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000c8fc:	52                   	push   edx
c000c8fd:	50                   	push   eax
c000c8fe:	68 5a 12 02 c0       	push   0xc002125a
c000c903:	e8 6f 28 00 00       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c000c908:	83 c4 10             	add    esp,0x10
c000c90b:	e9 92 fe ff ff       	jmp    c000c7a2 <Phys::physicalMemorySetup(unsigned int)+0xbf>

c000c910 <Pipe::isAtty()>:
c000c910:	31 c0                	xor    eax,eax
c000c912:	c3                   	ret    
c000c913:	90                   	nop

c000c914 <Pipe::~Pipe()>:
c000c914:	83 ec 0c             	sub    esp,0xc
c000c917:	ba 08 13 02 c0       	mov    edx,0xc0021308
c000c91c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c920:	89 10                	mov    DWORD PTR [eax],edx
c000c922:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c926:	83 ec 0c             	sub    esp,0xc
c000c929:	50                   	push   eax
c000c92a:	e8 c7 15 00 00       	call   c000def6 <UnixFile::~UnixFile()>
c000c92f:	83 c4 10             	add    esp,0x10
c000c932:	90                   	nop
c000c933:	83 c4 0c             	add    esp,0xc
c000c936:	c3                   	ret    
c000c937:	90                   	nop

c000c938 <Pipe::~Pipe()>:
c000c938:	83 ec 0c             	sub    esp,0xc
c000c93b:	83 ec 0c             	sub    esp,0xc
c000c93e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c942:	e8 cd ff ff ff       	call   c000c914 <Pipe::~Pipe()>
c000c947:	83 c4 10             	add    esp,0x10
c000c94a:	83 ec 08             	sub    esp,0x8
c000c94d:	6a 20                	push   0x20
c000c94f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c953:	e8 f9 26 00 00       	call   c000f051 <operator delete(void*, unsigned long)>
c000c958:	83 c4 10             	add    esp,0x10
c000c95b:	83 c4 0c             	add    esp,0xc
c000c95e:	c3                   	ret    
c000c95f:	90                   	nop

c000c960 <Pipe::read(unsigned long long, void*, int*)>:
c000c960:	55                   	push   ebp
c000c961:	57                   	push   edi
c000c962:	56                   	push   esi
c000c963:	53                   	push   ebx
c000c964:	83 ec 1c             	sub    esp,0x1c
c000c967:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000c96b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000c96f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000c973:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000c976:	89 c8                	mov    eax,ecx
c000c978:	99                   	cdq    
c000c979:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000c97d:	74 19                	je     c000c998 <Pipe::read(unsigned long long, void*, int*)+0x38>
c000c97f:	39 f9                	cmp    ecx,edi
c000c981:	89 d1                	mov    ecx,edx
c000c983:	19 f1                	sbb    ecx,esi
c000c985:	73 11                	jae    c000c998 <Pipe::read(unsigned long long, void*, int*)+0x38>
c000c987:	e8 a3 bf 00 00       	call   c001892f <lockScheduler()>
c000c98c:	e8 e7 c2 00 00       	call   c0018c78 <schedule()>
c000c991:	e8 9b bf 00 00       	call   c0018931 <unlockScheduler()>
c000c996:	eb db                	jmp    c000c973 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000c998:	39 f8                	cmp    eax,edi
c000c99a:	89 d1                	mov    ecx,edx
c000c99c:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000c9a0:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000c9a4:	19 f1                	sbb    ecx,esi
c000c9a6:	73 08                	jae    c000c9b0 <Pipe::read(unsigned long long, void*, int*)+0x50>
c000c9a8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c9ac:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c9b0:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c9b3:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000c9b6:	29 c6                	sub    esi,eax
c000c9b8:	89 f1                	mov    ecx,esi
c000c9ba:	c1 f9 1f             	sar    ecx,0x1f
c000c9bd:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c000c9c1:	89 ca                	mov    edx,ecx
c000c9c3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c9c7:	19 d1                	sbb    ecx,edx
c000c9c9:	73 04                	jae    c000c9cf <Pipe::read(unsigned long long, void*, int*)+0x6f>
c000c9cb:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000c9cf:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000c9d3:	89 fd                	mov    ebp,edi
c000c9d5:	29 f5                	sub    ebp,esi
c000c9d7:	85 f6                	test   esi,esi
c000c9d9:	74 12                	je     c000c9ed <Pipe::read(unsigned long long, void*, int*)+0x8d>
c000c9db:	52                   	push   edx
c000c9dc:	56                   	push   esi
c000c9dd:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
c000c9e0:	50                   	push   eax
c000c9e1:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000c9e5:	e8 9a 3c ff ff       	call   c0000684 <memcpy>
c000c9ea:	83 c4 10             	add    esp,0x10
c000c9ed:	85 ed                	test   ebp,ebp
c000c9ef:	74 12                	je     c000ca03 <Pipe::read(unsigned long long, void*, int*)+0xa3>
c000c9f1:	50                   	push   eax
c000c9f2:	55                   	push   ebp
c000c9f3:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000c9f6:	03 74 24 48          	add    esi,DWORD PTR [esp+0x48]
c000c9fa:	56                   	push   esi
c000c9fb:	e8 84 3c ff ff       	call   c0000684 <memcpy>
c000ca00:	83 c4 10             	add    esp,0x10
c000ca03:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000ca06:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c000ca09:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000ca0c:	99                   	cdq    
c000ca0d:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000ca11:	89 f7                	mov    edi,esi
c000ca13:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000ca17:	c1 ff 1f             	sar    edi,0x1f
c000ca1a:	57                   	push   edi
c000ca1b:	56                   	push   esi
c000ca1c:	52                   	push   edx
c000ca1d:	50                   	push   eax
c000ca1e:	e8 a9 2a 01 00       	call   c001f4cc <__umoddi3>
c000ca23:	83 c4 10             	add    esp,0x10
c000ca26:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ca29:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000ca2e:	75 10                	jne    c000ca40 <Pipe::read(unsigned long long, void*, int*)+0xe0>
c000ca30:	83 ec 0c             	sub    esp,0xc
c000ca33:	68 c5 12 02 c0       	push   0xc00212c5
c000ca38:	e8 05 8f 00 00       	call   c0015942 <Krnl::panic(char const*)>
c000ca3d:	83 c4 10             	add    esp,0x10
c000ca40:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ca44:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ca48:	89 10                	mov    DWORD PTR [eax],edx
c000ca4a:	83 c4 1c             	add    esp,0x1c
c000ca4d:	31 c0                	xor    eax,eax
c000ca4f:	5b                   	pop    ebx
c000ca50:	5e                   	pop    esi
c000ca51:	5f                   	pop    edi
c000ca52:	5d                   	pop    ebp
c000ca53:	c3                   	ret    

c000ca54 <Pipe::write(unsigned long long, void*, int*)>:
c000ca54:	55                   	push   ebp
c000ca55:	57                   	push   edi
c000ca56:	56                   	push   esi
c000ca57:	53                   	push   ebx
c000ca58:	83 ec 1c             	sub    esp,0x1c
c000ca5b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000ca5f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ca63:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000ca67:	89 04 24             	mov    DWORD PTR [esp],eax
c000ca6a:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c000ca6d:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c000ca70:	89 de                	mov    esi,ebx
c000ca72:	89 df                	mov    edi,ebx
c000ca74:	c1 ff 1f             	sar    edi,0x1f
c000ca77:	01 c6                	add    esi,eax
c000ca79:	89 c8                	mov    eax,ecx
c000ca7b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ca7f:	11 d7                	adc    edi,edx
c000ca81:	99                   	cdq    
c000ca82:	89 d0                	mov    eax,edx
c000ca84:	39 f1                	cmp    ecx,esi
c000ca86:	19 f8                	sbb    eax,edi
c000ca88:	b8 01 00 00 00       	mov    eax,0x1
c000ca8d:	0f 82 80 00 00 00    	jb     c000cb13 <Pipe::write(unsigned long long, void*, int*)+0xbf>
c000ca93:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000ca96:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000ca99:	01 d8                	add    eax,ebx
c000ca9b:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000ca9f:	99                   	cdq    
c000caa0:	f7 f9                	idiv   ecx
c000caa2:	29 d1                	sub    ecx,edx
c000caa4:	89 d7                	mov    edi,edx
c000caa6:	89 c8                	mov    eax,ecx
c000caa8:	99                   	cdq    
c000caa9:	39 ce                	cmp    esi,ecx
c000caab:	19 d3                	sbb    ebx,edx
c000caad:	bb 00 00 00 00       	mov    ebx,0x0
c000cab2:	72 04                	jb     c000cab8 <Pipe::write(unsigned long long, void*, int*)+0x64>
c000cab4:	89 f3                	mov    ebx,esi
c000cab6:	29 cb                	sub    ebx,ecx
c000cab8:	89 f1                	mov    ecx,esi
c000caba:	29 d9                	sub    ecx,ebx
c000cabc:	74 1a                	je     c000cad8 <Pipe::write(unsigned long long, void*, int*)+0x84>
c000cabe:	52                   	push   edx
c000cabf:	51                   	push   ecx
c000cac0:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000cac4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000cac8:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000cacb:	57                   	push   edi
c000cacc:	e8 b3 3b ff ff       	call   c0000684 <memcpy>
c000cad1:	83 c4 10             	add    esp,0x10
c000cad4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000cad8:	85 db                	test   ebx,ebx
c000cada:	74 12                	je     c000caee <Pipe::write(unsigned long long, void*, int*)+0x9a>
c000cadc:	50                   	push   eax
c000cadd:	53                   	push   ebx
c000cade:	03 4c 24 44          	add    ecx,DWORD PTR [esp+0x44]
c000cae2:	51                   	push   ecx
c000cae3:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c000cae6:	e8 99 3b ff ff       	call   c0000684 <memcpy>
c000caeb:	83 c4 10             	add    esp,0x10
c000caee:	01 75 14             	add    DWORD PTR [ebp+0x14],esi
c000caf1:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000caf6:	75 10                	jne    c000cb08 <Pipe::write(unsigned long long, void*, int*)+0xb4>
c000caf8:	83 ec 0c             	sub    esp,0xc
c000cafb:	68 e1 12 02 c0       	push   0xc00212e1
c000cb00:	e8 3d 8e 00 00       	call   c0015942 <Krnl::panic(char const*)>
c000cb05:	83 c4 10             	add    esp,0x10
c000cb08:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cb0c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000cb0f:	89 38                	mov    DWORD PTR [eax],edi
c000cb11:	31 c0                	xor    eax,eax
c000cb13:	83 c4 1c             	add    esp,0x1c
c000cb16:	5b                   	pop    ebx
c000cb17:	5e                   	pop    esi
c000cb18:	5f                   	pop    edi
c000cb19:	5d                   	pop    ebp
c000cb1a:	c3                   	ret    
c000cb1b:	90                   	nop

c000cb1c <Pipe::Pipe(int)>:
c000cb1c:	83 ec 0c             	sub    esp,0xc
c000cb1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb23:	83 ec 08             	sub    esp,0x8
c000cb26:	6a 00                	push   0x0
c000cb28:	50                   	push   eax
c000cb29:	e8 26 12 00 00       	call   c000dd54 <UnixFile::UnixFile(int)>
c000cb2e:	83 c4 10             	add    esp,0x10
c000cb31:	ba 08 13 02 c0       	mov    edx,0xc0021308
c000cb36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb3a:	89 10                	mov    DWORD PTR [eax],edx
c000cb3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb40:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cb44:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000cb47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb4b:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000cb52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb56:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000cb5d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000cb61:	83 ec 0c             	sub    esp,0xc
c000cb64:	50                   	push   eax
c000cb65:	e8 9f f4 ff ff       	call   c000c009 <malloc>
c000cb6a:	83 c4 10             	add    esp,0x10
c000cb6d:	89 c2                	mov    edx,eax
c000cb6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb73:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000cb76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb7a:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000cb7e:	90                   	nop
c000cb7f:	83 c4 0c             	add    esp,0xc
c000cb82:	c3                   	ret    
c000cb83:	90                   	nop

c000cb84 <VgaText::isAtty()>:
c000cb84:	b0 01                	mov    al,0x1
c000cb86:	c3                   	ret    
c000cb87:	90                   	nop

c000cb88 <VgaText::~VgaText()>:
c000cb88:	83 ec 0c             	sub    esp,0xc
c000cb8b:	ba c4 13 02 c0       	mov    edx,0xc00213c4
c000cb90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb94:	89 10                	mov    DWORD PTR [eax],edx
c000cb96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb9a:	83 ec 0c             	sub    esp,0xc
c000cb9d:	50                   	push   eax
c000cb9e:	e8 53 13 00 00       	call   c000def6 <UnixFile::~UnixFile()>
c000cba3:	83 c4 10             	add    esp,0x10
c000cba6:	90                   	nop
c000cba7:	83 c4 0c             	add    esp,0xc
c000cbaa:	c3                   	ret    
c000cbab:	90                   	nop

c000cbac <VgaText::~VgaText()>:
c000cbac:	83 ec 0c             	sub    esp,0xc
c000cbaf:	83 ec 0c             	sub    esp,0xc
c000cbb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cbb6:	e8 cd ff ff ff       	call   c000cb88 <VgaText::~VgaText()>
c000cbbb:	83 c4 10             	add    esp,0x10
c000cbbe:	83 ec 08             	sub    esp,0x8
c000cbc1:	68 60 12 00 00       	push   0x1260
c000cbc6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cbca:	e8 82 24 00 00       	call   c000f051 <operator delete(void*, unsigned long)>
c000cbcf:	83 c4 10             	add    esp,0x10
c000cbd2:	83 c4 0c             	add    esp,0xc
c000cbd5:	c3                   	ret    

c000cbd6 <VgaText::read(unsigned long long, void*, int*)>:
c000cbd6:	83 ec 10             	sub    esp,0x10
c000cbd9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cbdd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cbe1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cbe5:	e8 a5 57 00 00       	call   c001238f <readKeyboard(VgaText*, char*, unsigned long)>
c000cbea:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000cbee:	89 02                	mov    DWORD PTR [edx],eax
c000cbf0:	31 c0                	xor    eax,eax
c000cbf2:	83 c4 1c             	add    esp,0x1c
c000cbf5:	c3                   	ret    

c000cbf6 <setTerminalScrollLock(bool)>:
c000cbf6:	c3                   	ret    

c000cbf7 <addToTerminalCycle(VgaText*)>:
c000cbf7:	8b 15 40 46 02 c0    	mov    edx,DWORD PTR ds:0xc0024640
c000cbfd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cc01:	85 d2                	test   edx,edx
c000cc03:	75 0c                	jne    c000cc11 <addToTerminalCycle(VgaText*)+0x1a>
c000cc05:	89 80 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],eax
c000cc0b:	a3 40 46 02 c0       	mov    ds:0xc0024640,eax
c000cc10:	c3                   	ret    
c000cc11:	8b 8a c0 0f 00 00    	mov    ecx,DWORD PTR [edx+0xfc0]
c000cc17:	89 82 c0 0f 00 00    	mov    DWORD PTR [edx+0xfc0],eax
c000cc1d:	89 88 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],ecx
c000cc23:	c3                   	ret    

c000cc24 <installVgaTextImplementation()>:
c000cc24:	83 ec 10             	sub    esp,0x10
c000cc27:	6a 20                	push   0x20
c000cc29:	6a 00                	push   0x0
c000cc2b:	68 20 46 02 c0       	push   0xc0024620
c000cc30:	e8 85 3a ff ff       	call   c00006ba <memset>
c000cc35:	83 c4 1c             	add    esp,0x1c
c000cc38:	c3                   	ret    

c000cc39 <scrollTerminalScrollLock(int)>:
c000cc39:	c3                   	ret    

c000cc3a <VgaText::load()>:
c000cc3a:	53                   	push   ebx
c000cc3b:	31 c0                	xor    eax,eax
c000cc3d:	83 ec 58             	sub    esp,0x58
c000cc40:	89 e2                	mov    edx,esp
c000cc42:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000cc46:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c000cc4a:	40                   	inc    eax
c000cc4b:	83 f8 50             	cmp    eax,0x50
c000cc4e:	75 f6                	jne    c000cc46 <VgaText::load()+0xc>
c000cc50:	31 c0                	xor    eax,eax
c000cc52:	8a 8c 03 1e 10 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x101e]
c000cc59:	84 c9                	test   cl,cl
c000cc5b:	74 06                	je     c000cc63 <VgaText::load()+0x29>
c000cc5d:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000cc60:	40                   	inc    eax
c000cc61:	eb ef                	jmp    c000cc52 <VgaText::load()+0x18>
c000cc63:	8b 83 fc 0f 00 00    	mov    eax,DWORD PTR [ebx+0xffc]
c000cc69:	85 c0                	test   eax,eax
c000cc6b:	74 09                	je     c000cc76 <VgaText::load()+0x3c>
c000cc6d:	51                   	push   ecx
c000cc6e:	51                   	push   ecx
c000cc6f:	52                   	push   edx
c000cc70:	53                   	push   ebx
c000cc71:	ff d0                	call   eax
c000cc73:	83 c4 10             	add    esp,0x10
c000cc76:	8b 83 00 10 00 00    	mov    eax,DWORD PTR [ebx+0x1000]
c000cc7c:	85 c0                	test   eax,eax
c000cc7e:	74 09                	je     c000cc89 <VgaText::load()+0x4f>
c000cc80:	83 ec 0c             	sub    esp,0xc
c000cc83:	53                   	push   ebx
c000cc84:	ff d0                	call   eax
c000cc86:	83 c4 10             	add    esp,0x10
c000cc89:	83 c4 58             	add    esp,0x58
c000cc8c:	5b                   	pop    ebx
c000cc8d:	c3                   	ret    

c000cc8e <VgaText::updateCursor()>:
c000cc8e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cc92:	39 05 44 46 02 c0    	cmp    DWORD PTR ds:0xc0024644,eax
c000cc98:	75 0c                	jne    c000cca6 <VgaText::updateCursor()+0x18>
c000cc9a:	8b 80 0c 10 00 00    	mov    eax,DWORD PTR [eax+0x100c]
c000cca0:	85 c0                	test   eax,eax
c000cca2:	74 02                	je     c000cca6 <VgaText::updateCursor()+0x18>
c000cca4:	ff e0                	jmp    eax
c000cca6:	c3                   	ret    
c000cca7:	90                   	nop

c000cca8 <VgaText::showCursor(bool)>:
c000cca8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ccac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ccb0:	88 90 bc 0f 00 00    	mov    BYTE PTR [eax+0xfbc],dl
c000ccb6:	c3                   	ret    
c000ccb7:	90                   	nop

c000ccb8 <VgaText::disableBlink(bool)>:
c000ccb8:	56                   	push   esi
c000ccb9:	53                   	push   ebx
c000ccba:	51                   	push   ecx
c000ccbb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ccbf:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ccc3:	39 1d 44 46 02 c0    	cmp    DWORD PTR ds:0xc0024644,ebx
c000ccc9:	75 18                	jne    c000cce3 <VgaText::disableBlink(bool)+0x2b>
c000cccb:	8b 83 14 10 00 00    	mov    eax,DWORD PTR [ebx+0x1014]
c000ccd1:	85 c0                	test   eax,eax
c000ccd3:	74 0e                	je     c000cce3 <VgaText::disableBlink(bool)+0x2b>
c000ccd5:	89 f1                	mov    ecx,esi
c000ccd7:	52                   	push   edx
c000ccd8:	52                   	push   edx
c000ccd9:	0f b6 d1             	movzx  edx,cl
c000ccdc:	52                   	push   edx
c000ccdd:	53                   	push   ebx
c000ccde:	ff d0                	call   eax
c000cce0:	83 c4 10             	add    esp,0x10
c000cce3:	89 f0                	mov    eax,esi
c000cce5:	83 f0 01             	xor    eax,0x1
c000cce8:	88 83 bd 0f 00 00    	mov    BYTE PTR [ebx+0xfbd],al
c000ccee:	58                   	pop    eax
c000ccef:	5b                   	pop    ebx
c000ccf0:	5e                   	pop    esi
c000ccf1:	c3                   	ret    

c000ccf2 <VgaText::doANSI_SGR(int)>:
c000ccf2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ccf6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ccfa:	85 d2                	test   edx,edx
c000ccfc:	75 14                	jne    c000cd12 <VgaText::doANSI_SGR(int)+0x20>
c000ccfe:	8b 90 c8 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc8]
c000cd04:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000cd0a:	8b 90 c4 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc4]
c000cd10:	eb 65                	jmp    c000cd77 <VgaText::doANSI_SGR(int)+0x85>
c000cd12:	83 fa 07             	cmp    edx,0x7
c000cd15:	75 14                	jne    c000cd2b <VgaText::doANSI_SGR(int)+0x39>
c000cd17:	8b 88 cc 0f 00 00    	mov    ecx,DWORD PTR [eax+0xfcc]
c000cd1d:	8b 90 d0 0f 00 00    	mov    edx,DWORD PTR [eax+0xfd0]
c000cd23:	89 88 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],ecx
c000cd29:	eb 4c                	jmp    c000cd77 <VgaText::doANSI_SGR(int)+0x85>
c000cd2b:	83 fa 1b             	cmp    edx,0x1b
c000cd2e:	74 ce                	je     c000ccfe <VgaText::doANSI_SGR(int)+0xc>
c000cd30:	8d 4a e2             	lea    ecx,[edx-0x1e]
c000cd33:	83 f9 07             	cmp    ecx,0x7
c000cd36:	77 09                	ja     c000cd41 <VgaText::doANSI_SGR(int)+0x4f>
c000cd38:	8b 14 8d e0 39 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdc620]
c000cd3f:	eb 20                	jmp    c000cd61 <VgaText::doANSI_SGR(int)+0x6f>
c000cd41:	8d 4a d8             	lea    ecx,[edx-0x28]
c000cd44:	83 f9 07             	cmp    ecx,0x7
c000cd47:	77 09                	ja     c000cd52 <VgaText::doANSI_SGR(int)+0x60>
c000cd49:	8b 14 8d e0 39 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdc620]
c000cd50:	eb 25                	jmp    c000cd77 <VgaText::doANSI_SGR(int)+0x85>
c000cd52:	8d 4a a6             	lea    ecx,[edx-0x5a]
c000cd55:	83 f9 07             	cmp    ecx,0x7
c000cd58:	77 0e                	ja     c000cd68 <VgaText::doANSI_SGR(int)+0x76>
c000cd5a:	8b 14 95 98 38 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc768]
c000cd61:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000cd67:	c3                   	ret    
c000cd68:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000cd6b:	83 f9 07             	cmp    ecx,0x7
c000cd6e:	77 0d                	ja     c000cd7d <VgaText::doANSI_SGR(int)+0x8b>
c000cd70:	8b 14 95 70 38 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc790]
c000cd77:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c000cd7d:	c3                   	ret    

c000cd7e <VgaText::setDefaultBgColour(VgaColour)>:
c000cd7e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cd82:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cd86:	89 90 c4 0f 00 00    	mov    DWORD PTR [eax+0xfc4],edx
c000cd8c:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c000cd92:	c3                   	ret    
c000cd93:	90                   	nop

c000cd94 <VgaText::setDefaultFgColour(VgaColour)>:
c000cd94:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cd98:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cd9c:	89 90 c8 0f 00 00    	mov    DWORD PTR [eax+0xfc8],edx
c000cda2:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000cda8:	c3                   	ret    
c000cda9:	90                   	nop

c000cdaa <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c000cdaa:	53                   	push   ebx
c000cdab:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000cdaf:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000cdb3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000cdb7:	51                   	push   ecx
c000cdb8:	e8 c1 ff ff ff       	call   c000cd7e <VgaText::setDefaultBgColour(VgaColour)>
c000cdbd:	58                   	pop    eax
c000cdbe:	5a                   	pop    edx
c000cdbf:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000cdc3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000cdc7:	5b                   	pop    ebx
c000cdc8:	eb ca                	jmp    c000cd94 <VgaText::setDefaultFgColour(VgaColour)>

c000cdca <VgaText::combineColours(unsigned char, unsigned char)>:
c000cdca:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000cdcf:	c1 e2 04             	shl    edx,0x4
c000cdd2:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000cdd6:	83 e0 0f             	and    eax,0xf
c000cdd9:	09 d0                	or     eax,edx
c000cddb:	c3                   	ret    

c000cddc <VgaText::scrollScreen()>:
c000cddc:	57                   	push   edi
c000cddd:	56                   	push   esi
c000cdde:	be 01 00 00 00       	mov    esi,0x1
c000cde3:	53                   	push   ebx
c000cde4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cde8:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c000cdee:	31 ff                	xor    edi,edi
c000cdf0:	01 d9                	add    ecx,ebx
c000cdf2:	8a 41 0c             	mov    al,BYTE PTR [ecx+0xc]
c000cdf5:	83 fe 17             	cmp    esi,0x17
c000cdf8:	88 81 6c ff ff ff    	mov    BYTE PTR [ecx-0x94],al
c000cdfe:	75 28                	jne    c000ce28 <VgaText::scrollScreen()+0x4c>
c000ce00:	f7 c7 01 00 00 00    	test   edi,0x1
c000ce06:	74 1c                	je     c000ce24 <VgaText::scrollScreen()+0x48>
c000ce08:	0f b6 83 cc 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfcc]
c000ce0f:	50                   	push   eax
c000ce10:	0f b6 83 d0 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfd0]
c000ce17:	50                   	push   eax
c000ce18:	e8 ad ff ff ff       	call   c000cdca <VgaText::combineColours(unsigned char, unsigned char)>
c000ce1d:	5a                   	pop    edx
c000ce1e:	5a                   	pop    edx
c000ce1f:	88 41 0c             	mov    BYTE PTR [ecx+0xc],al
c000ce22:	eb 04                	jmp    c000ce28 <VgaText::scrollScreen()+0x4c>
c000ce24:	c6 41 0c 20          	mov    BYTE PTR [ecx+0xc],0x20
c000ce28:	47                   	inc    edi
c000ce29:	41                   	inc    ecx
c000ce2a:	81 ff a0 00 00 00    	cmp    edi,0xa0
c000ce30:	75 c0                	jne    c000cdf2 <VgaText::scrollScreen()+0x16>
c000ce32:	46                   	inc    esi
c000ce33:	83 fe 18             	cmp    esi,0x18
c000ce36:	75 b0                	jne    c000cde8 <VgaText::scrollScreen()+0xc>
c000ce38:	39 1d 44 46 02 c0    	cmp    DWORD PTR ds:0xc0024644,ebx
c000ce3e:	75 24                	jne    c000ce64 <VgaText::scrollScreen()+0x88>
c000ce40:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c000ce47:	74 08                	je     c000ce51 <VgaText::scrollScreen()+0x75>
c000ce49:	ff 8b f8 0f 00 00    	dec    DWORD PTR [ebx+0xff8]
c000ce4f:	eb 13                	jmp    c000ce64 <VgaText::scrollScreen()+0x88>
c000ce51:	8b 83 08 10 00 00    	mov    eax,DWORD PTR [ebx+0x1008]
c000ce57:	85 c0                	test   eax,eax
c000ce59:	74 09                	je     c000ce64 <VgaText::scrollScreen()+0x88>
c000ce5b:	83 ec 0c             	sub    esp,0xc
c000ce5e:	53                   	push   ebx
c000ce5f:	ff d0                	call   eax
c000ce61:	83 c4 10             	add    esp,0x10
c000ce64:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ce68:	5b                   	pop    ebx
c000ce69:	5e                   	pop    esi
c000ce6a:	5f                   	pop    edi
c000ce6b:	e9 1e fe ff ff       	jmp    c000cc8e <VgaText::updateCursor()>

c000ce70 <VgaText::combineCharAndColour(char, unsigned char)>:
c000ce70:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000ce75:	c1 e0 08             	shl    eax,0x8
c000ce78:	89 c2                	mov    edx,eax
c000ce7a:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000ce7f:	09 d0                	or     eax,edx
c000ce81:	c3                   	ret    

c000ce82 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c000ce82:	53                   	push   ebx
c000ce83:	83 ec 08             	sub    esp,0x8
c000ce86:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000ce8b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ce8f:	50                   	push   eax
c000ce90:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000ce95:	50                   	push   eax
c000ce96:	e8 2f ff ff ff       	call   c000cdca <VgaText::combineColours(unsigned char, unsigned char)>
c000ce9b:	5a                   	pop    edx
c000ce9c:	5b                   	pop    ebx
c000ce9d:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c000cea2:	0f b6 c0             	movzx  eax,al
c000cea5:	50                   	push   eax
c000cea6:	53                   	push   ebx
c000cea7:	e8 c4 ff ff ff       	call   c000ce70 <VgaText::combineCharAndColour(char, unsigned char)>
c000ceac:	5a                   	pop    edx
c000cead:	5a                   	pop    edx
c000ceae:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c000ceb4:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c000ceb8:	0f b7 d2             	movzx  edx,dx
c000cebb:	66 89 44 51 0c       	mov    WORD PTR [ecx+edx*2+0xc],ax
c000cec0:	39 0d 44 46 02 c0    	cmp    DWORD PTR ds:0xc0024644,ecx
c000cec6:	75 14                	jne    c000cedc <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c000cec8:	8b 81 18 10 00 00    	mov    eax,DWORD PTR [ecx+0x1018]
c000cece:	85 c0                	test   eax,eax
c000ced0:	74 0a                	je     c000cedc <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c000ced2:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000ced6:	83 c4 08             	add    esp,0x8
c000ced9:	5b                   	pop    ebx
c000ceda:	ff e0                	jmp    eax
c000cedc:	83 c4 08             	add    esp,0x8
c000cedf:	5b                   	pop    ebx
c000cee0:	c3                   	ret    
c000cee1:	90                   	nop

c000cee2 <VgaText::getCursorX()>:
c000cee2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cee6:	8b 80 b0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb0]
c000ceec:	c3                   	ret    
c000ceed:	90                   	nop

c000ceee <VgaText::getCursorY()>:
c000ceee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cef2:	8b 80 b4 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb4]
c000cef8:	c3                   	ret    
c000cef9:	90                   	nop

c000cefa <VgaText::setCursor(int, int)>:
c000cefa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cefe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cf02:	89 90 b0 0f 00 00    	mov    DWORD PTR [eax+0xfb0],edx
c000cf08:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cf0c:	89 90 b4 0f 00 00    	mov    DWORD PTR [eax+0xfb4],edx
c000cf12:	e9 77 fd ff ff       	jmp    c000cc8e <VgaText::updateCursor()>
c000cf17:	90                   	nop

c000cf18 <VgaText::setCursorX(int)>:
c000cf18:	83 ec 10             	sub    esp,0x10
c000cf1b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000cf1f:	ff b0 b4 0f 00 00    	push   DWORD PTR [eax+0xfb4]
c000cf25:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf29:	50                   	push   eax
c000cf2a:	e8 cb ff ff ff       	call   c000cefa <VgaText::setCursor(int, int)>
c000cf2f:	83 c4 1c             	add    esp,0x1c
c000cf32:	c3                   	ret    
c000cf33:	90                   	nop

c000cf34 <VgaText::setCursorY(int)>:
c000cf34:	83 ec 10             	sub    esp,0x10
c000cf37:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000cf3b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cf3f:	ff b0 b0 0f 00 00    	push   DWORD PTR [eax+0xfb0]
c000cf45:	50                   	push   eax
c000cf46:	e8 af ff ff ff       	call   c000cefa <VgaText::setCursor(int, int)>
c000cf4b:	83 c4 1c             	add    esp,0x1c
c000cf4e:	c3                   	ret    
c000cf4f:	90                   	nop

c000cf50 <VgaText::incrementCursor(bool)>:
c000cf50:	56                   	push   esi
c000cf51:	53                   	push   ebx
c000cf52:	51                   	push   ecx
c000cf53:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cf57:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000cf5b:	8b 83 b0 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb0]
c000cf61:	40                   	inc    eax
c000cf62:	83 f8 50             	cmp    eax,0x50
c000cf65:	74 08                	je     c000cf6f <VgaText::incrementCursor(bool)+0x1f>
c000cf67:	89 83 b0 0f 00 00    	mov    DWORD PTR [ebx+0xfb0],eax
c000cf6d:	eb 33                	jmp    c000cfa2 <VgaText::incrementCursor(bool)+0x52>
c000cf6f:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c000cf75:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c000cf7f:	8d 50 01             	lea    edx,[eax+0x1]
c000cf82:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c000cf88:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c000cf8e:	75 12                	jne    c000cfa2 <VgaText::incrementCursor(bool)+0x52>
c000cf90:	83 ec 0c             	sub    esp,0xc
c000cf93:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c000cf99:	53                   	push   ebx
c000cf9a:	e8 3d fe ff ff       	call   c000cddc <VgaText::scrollScreen()>
c000cf9f:	83 c4 10             	add    esp,0x10
c000cfa2:	89 f0                	mov    eax,esi
c000cfa4:	84 c0                	test   al,al
c000cfa6:	74 0c                	je     c000cfb4 <VgaText::incrementCursor(bool)+0x64>
c000cfa8:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000cfac:	5a                   	pop    edx
c000cfad:	5b                   	pop    ebx
c000cfae:	5e                   	pop    esi
c000cfaf:	e9 da fc ff ff       	jmp    c000cc8e <VgaText::updateCursor()>
c000cfb4:	58                   	pop    eax
c000cfb5:	5b                   	pop    ebx
c000cfb6:	5e                   	pop    esi
c000cfb7:	c3                   	ret    

c000cfb8 <VgaText::updateRAMUsageDisplay(int)>:
c000cfb8:	53                   	push   ebx
c000cfb9:	bb 0a 00 00 00       	mov    ebx,0xa
c000cfbe:	6a 0f                	push   0xf
c000cfc0:	6a 00                	push   0x0
c000cfc2:	e8 03 fe ff ff       	call   c000cdca <VgaText::combineColours(unsigned char, unsigned char)>
c000cfc7:	5a                   	pop    edx
c000cfc8:	59                   	pop    ecx
c000cfc9:	0f b6 c8             	movzx  ecx,al
c000cfcc:	51                   	push   ecx
c000cfcd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000cfd1:	99                   	cdq    
c000cfd2:	f7 fb                	idiv   ebx
c000cfd4:	83 c0 30             	add    eax,0x30
c000cfd7:	89 d3                	mov    ebx,edx
c000cfd9:	0f be c0             	movsx  eax,al
c000cfdc:	50                   	push   eax
c000cfdd:	e8 8e fe ff ff       	call   c000ce70 <VgaText::combineCharAndColour(char, unsigned char)>
c000cfe2:	5a                   	pop    edx
c000cfe3:	83 c3 30             	add    ebx,0x30
c000cfe6:	5a                   	pop    edx
c000cfe7:	66 a3 96 80 0b c2    	mov    ds:0xc20b8096,ax
c000cfed:	0f b6 db             	movzx  ebx,bl
c000cff0:	51                   	push   ecx
c000cff1:	53                   	push   ebx
c000cff2:	e8 79 fe ff ff       	call   c000ce70 <VgaText::combineCharAndColour(char, unsigned char)>
c000cff7:	5b                   	pop    ebx
c000cff8:	5a                   	pop    edx
c000cff9:	66 a3 98 80 0b c2    	mov    ds:0xc20b8098,ax
c000cfff:	51                   	push   ecx
c000d000:	6a 25                	push   0x25
c000d002:	e8 69 fe ff ff       	call   c000ce70 <VgaText::combineCharAndColour(char, unsigned char)>
c000d007:	59                   	pop    ecx
c000d008:	5b                   	pop    ebx
c000d009:	66 a3 9a 80 0b c2    	mov    ds:0xc20b809a,ax
c000d00f:	5b                   	pop    ebx
c000d010:	c3                   	ret    
c000d011:	90                   	nop

c000d012 <VgaText::updateDiskUsage()>:
c000d012:	55                   	push   ebp
c000d013:	bd 10 27 00 00       	mov    ebp,0x2710
c000d018:	57                   	push   edi
c000d019:	56                   	push   esi
c000d01a:	53                   	push   ebx
c000d01b:	6a 0f                	push   0xf
c000d01d:	6a 00                	push   0x0
c000d01f:	e8 a6 fd ff ff       	call   c000cdca <VgaText::combineColours(unsigned char, unsigned char)>
c000d024:	0f b6 d8             	movzx  ebx,al
c000d027:	a1 24 63 02 c0       	mov    eax,ds:0xc0026324
c000d02c:	5a                   	pop    edx
c000d02d:	99                   	cdq    
c000d02e:	f7 fd                	idiv   ebp
c000d030:	59                   	pop    ecx
c000d031:	b9 0a 00 00 00       	mov    ecx,0xa
c000d036:	99                   	cdq    
c000d037:	f7 f9                	idiv   ecx
c000d039:	53                   	push   ebx
c000d03a:	8d 42 30             	lea    eax,[edx+0x30]
c000d03d:	0f b6 c0             	movzx  eax,al
c000d040:	50                   	push   eax
c000d041:	e8 2a fe ff ff       	call   c000ce70 <VgaText::combineCharAndColour(char, unsigned char)>
c000d046:	5e                   	pop    esi
c000d047:	5f                   	pop    edi
c000d048:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c000d04e:	a1 24 63 02 c0       	mov    eax,ds:0xc0026324
c000d053:	bf e8 03 00 00       	mov    edi,0x3e8
c000d058:	99                   	cdq    
c000d059:	f7 ff                	idiv   edi
c000d05b:	99                   	cdq    
c000d05c:	f7 f9                	idiv   ecx
c000d05e:	53                   	push   ebx
c000d05f:	8d 42 30             	lea    eax,[edx+0x30]
c000d062:	0f b6 c0             	movzx  eax,al
c000d065:	50                   	push   eax
c000d066:	e8 05 fe ff ff       	call   c000ce70 <VgaText::combineCharAndColour(char, unsigned char)>
c000d06b:	5a                   	pop    edx
c000d06c:	5e                   	pop    esi
c000d06d:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c000d073:	a1 24 63 02 c0       	mov    eax,ds:0xc0026324
c000d078:	be 64 00 00 00       	mov    esi,0x64
c000d07d:	99                   	cdq    
c000d07e:	f7 fe                	idiv   esi
c000d080:	99                   	cdq    
c000d081:	f7 f9                	idiv   ecx
c000d083:	53                   	push   ebx
c000d084:	8d 42 30             	lea    eax,[edx+0x30]
c000d087:	0f b6 c0             	movzx  eax,al
c000d08a:	50                   	push   eax
c000d08b:	e8 e0 fd ff ff       	call   c000ce70 <VgaText::combineCharAndColour(char, unsigned char)>
c000d090:	5a                   	pop    edx
c000d091:	5a                   	pop    edx
c000d092:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c000d098:	a1 24 63 02 c0       	mov    eax,ds:0xc0026324
c000d09d:	53                   	push   ebx
c000d09e:	99                   	cdq    
c000d09f:	f7 f9                	idiv   ecx
c000d0a1:	99                   	cdq    
c000d0a2:	f7 f9                	idiv   ecx
c000d0a4:	8d 42 30             	lea    eax,[edx+0x30]
c000d0a7:	0f b6 c0             	movzx  eax,al
c000d0aa:	50                   	push   eax
c000d0ab:	e8 c0 fd ff ff       	call   c000ce70 <VgaText::combineCharAndColour(char, unsigned char)>
c000d0b0:	5a                   	pop    edx
c000d0b1:	5a                   	pop    edx
c000d0b2:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c000d0b8:	a1 24 63 02 c0       	mov    eax,ds:0xc0026324
c000d0bd:	53                   	push   ebx
c000d0be:	99                   	cdq    
c000d0bf:	f7 f9                	idiv   ecx
c000d0c1:	8d 42 30             	lea    eax,[edx+0x30]
c000d0c4:	0f b6 c0             	movzx  eax,al
c000d0c7:	50                   	push   eax
c000d0c8:	e8 a3 fd ff ff       	call   c000ce70 <VgaText::combineCharAndColour(char, unsigned char)>
c000d0cd:	5a                   	pop    edx
c000d0ce:	5a                   	pop    edx
c000d0cf:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c000d0d5:	a1 20 63 02 c0       	mov    eax,ds:0xc0026320
c000d0da:	53                   	push   ebx
c000d0db:	99                   	cdq    
c000d0dc:	f7 fd                	idiv   ebp
c000d0de:	99                   	cdq    
c000d0df:	f7 f9                	idiv   ecx
c000d0e1:	8d 42 30             	lea    eax,[edx+0x30]
c000d0e4:	0f b6 c0             	movzx  eax,al
c000d0e7:	50                   	push   eax
c000d0e8:	e8 83 fd ff ff       	call   c000ce70 <VgaText::combineCharAndColour(char, unsigned char)>
c000d0ed:	5d                   	pop    ebp
c000d0ee:	5a                   	pop    edx
c000d0ef:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c000d0f5:	a1 20 63 02 c0       	mov    eax,ds:0xc0026320
c000d0fa:	53                   	push   ebx
c000d0fb:	99                   	cdq    
c000d0fc:	f7 ff                	idiv   edi
c000d0fe:	99                   	cdq    
c000d0ff:	f7 f9                	idiv   ecx
c000d101:	8d 42 30             	lea    eax,[edx+0x30]
c000d104:	0f b6 c0             	movzx  eax,al
c000d107:	50                   	push   eax
c000d108:	e8 63 fd ff ff       	call   c000ce70 <VgaText::combineCharAndColour(char, unsigned char)>
c000d10d:	5f                   	pop    edi
c000d10e:	5d                   	pop    ebp
c000d10f:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c000d115:	53                   	push   ebx
c000d116:	a1 20 63 02 c0       	mov    eax,ds:0xc0026320
c000d11b:	99                   	cdq    
c000d11c:	f7 fe                	idiv   esi
c000d11e:	99                   	cdq    
c000d11f:	f7 f9                	idiv   ecx
c000d121:	8d 42 30             	lea    eax,[edx+0x30]
c000d124:	0f b6 c0             	movzx  eax,al
c000d127:	50                   	push   eax
c000d128:	e8 43 fd ff ff       	call   c000ce70 <VgaText::combineCharAndColour(char, unsigned char)>
c000d12d:	5a                   	pop    edx
c000d12e:	5e                   	pop    esi
c000d12f:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c000d135:	a1 20 63 02 c0       	mov    eax,ds:0xc0026320
c000d13a:	53                   	push   ebx
c000d13b:	99                   	cdq    
c000d13c:	f7 f9                	idiv   ecx
c000d13e:	99                   	cdq    
c000d13f:	f7 f9                	idiv   ecx
c000d141:	8d 42 30             	lea    eax,[edx+0x30]
c000d144:	0f b6 c0             	movzx  eax,al
c000d147:	50                   	push   eax
c000d148:	e8 23 fd ff ff       	call   c000ce70 <VgaText::combineCharAndColour(char, unsigned char)>
c000d14d:	5f                   	pop    edi
c000d14e:	5d                   	pop    ebp
c000d14f:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c000d155:	a1 20 63 02 c0       	mov    eax,ds:0xc0026320
c000d15a:	53                   	push   ebx
c000d15b:	99                   	cdq    
c000d15c:	f7 f9                	idiv   ecx
c000d15e:	83 c2 30             	add    edx,0x30
c000d161:	0f b6 d2             	movzx  edx,dl
c000d164:	52                   	push   edx
c000d165:	e8 06 fd ff ff       	call   c000ce70 <VgaText::combineCharAndColour(char, unsigned char)>
c000d16a:	5a                   	pop    edx
c000d16b:	59                   	pop    ecx
c000d16c:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c000d172:	5b                   	pop    ebx
c000d173:	5e                   	pop    esi
c000d174:	5f                   	pop    edi
c000d175:	5d                   	pop    ebp
c000d176:	c3                   	ret    
c000d177:	90                   	nop

c000d178 <VgaText::updateTitle()>:
c000d178:	53                   	push   ebx
c000d179:	31 c0                	xor    eax,eax
c000d17b:	83 ec 58             	sub    esp,0x58
c000d17e:	89 e1                	mov    ecx,esp
c000d180:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000d184:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c000d188:	40                   	inc    eax
c000d189:	83 f8 50             	cmp    eax,0x50
c000d18c:	75 f6                	jne    c000d184 <VgaText::updateTitle()+0xc>
c000d18e:	31 c0                	xor    eax,eax
c000d190:	8a 9c 02 1e 10 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x101e]
c000d197:	84 db                	test   bl,bl
c000d199:	74 06                	je     c000d1a1 <VgaText::updateTitle()+0x29>
c000d19b:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c000d19e:	40                   	inc    eax
c000d19f:	eb ef                	jmp    c000d190 <VgaText::updateTitle()+0x18>
c000d1a1:	8b 82 fc 0f 00 00    	mov    eax,DWORD PTR [edx+0xffc]
c000d1a7:	85 c0                	test   eax,eax
c000d1a9:	74 09                	je     c000d1b4 <VgaText::updateTitle()+0x3c>
c000d1ab:	53                   	push   ebx
c000d1ac:	53                   	push   ebx
c000d1ad:	51                   	push   ecx
c000d1ae:	52                   	push   edx
c000d1af:	ff d0                	call   eax
c000d1b1:	83 c4 10             	add    esp,0x10
c000d1b4:	e8 59 fe ff ff       	call   c000d012 <VgaText::updateDiskUsage()>
c000d1b9:	83 c4 58             	add    esp,0x58
c000d1bc:	5b                   	pop    ebx
c000d1bd:	c3                   	ret    

c000d1be <VgaText::setTitleTextColour(VgaColour)>:
c000d1be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d1c2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d1c6:	89 90 d8 0f 00 00    	mov    DWORD PTR [eax+0xfd8],edx
c000d1cc:	eb aa                	jmp    c000d178 <VgaText::updateTitle()>

c000d1ce <VgaText::setTitleColour(VgaColour)>:
c000d1ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d1d2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d1d6:	89 90 d4 0f 00 00    	mov    DWORD PTR [eax+0xfd4],edx
c000d1dc:	eb 9a                	jmp    c000d178 <VgaText::updateTitle()>

c000d1de <VgaText::setTitle(char*)>:
c000d1de:	53                   	push   ebx
c000d1df:	83 ec 10             	sub    esp,0x10
c000d1e2:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d1e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d1ea:	8d 83 1e 10 00 00    	lea    eax,[ebx+0x101e]
c000d1f0:	50                   	push   eax
c000d1f1:	e8 63 35 ff ff       	call   c0000759 <strcpy>
c000d1f6:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000d1fa:	83 c4 18             	add    esp,0x18
c000d1fd:	5b                   	pop    ebx
c000d1fe:	e9 75 ff ff ff       	jmp    c000d178 <VgaText::updateTitle()>
c000d203:	90                   	nop

c000d204 <VgaText::decrementCursor(bool)>:
c000d204:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d208:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d20c:	8b 82 b0 0f 00 00    	mov    eax,DWORD PTR [edx+0xfb0]
c000d212:	85 c0                	test   eax,eax
c000d214:	74 07                	je     c000d21d <VgaText::decrementCursor(bool)+0x19>
c000d216:	48                   	dec    eax
c000d217:	89 82 b0 0f 00 00    	mov    DWORD PTR [edx+0xfb0],eax
c000d21d:	84 c9                	test   cl,cl
c000d21f:	74 09                	je     c000d22a <VgaText::decrementCursor(bool)+0x26>
c000d221:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000d225:	e9 64 fa ff ff       	jmp    c000cc8e <VgaText::updateCursor()>
c000d22a:	c3                   	ret    
c000d22b:	90                   	nop

c000d22c <VgaText::putchar(char, VgaColour, VgaColour)>:
c000d22c:	53                   	push   ebx
c000d22d:	83 ec 08             	sub    esp,0x8
c000d230:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000d234:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d238:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000d23c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000d240:	3c 07                	cmp    al,0x7
c000d242:	75 2a                	jne    c000d26e <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c000d244:	a1 ec 46 02 c0       	mov    eax,ds:0xc00246ec
c000d249:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000d251:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c000d259:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c000d261:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d265:	83 c4 08             	add    esp,0x8
c000d268:	5b                   	pop    ebx
c000d269:	e9 fc 2c 00 00       	jmp    c000ff6a <Buzzer::beep(int, int, bool)>
c000d26e:	3c 0d                	cmp    al,0xd
c000d270:	75 0c                	jne    c000d27e <VgaText::putchar(char, VgaColour, VgaColour)+0x52>
c000d272:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c000d27c:	eb 3b                	jmp    c000d2b9 <VgaText::putchar(char, VgaColour, VgaColour)+0x8d>
c000d27e:	3c 0a                	cmp    al,0xa
c000d280:	75 40                	jne    c000d2c2 <VgaText::putchar(char, VgaColour, VgaColour)+0x96>
c000d282:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c000d288:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c000d292:	8d 50 01             	lea    edx,[eax+0x1]
c000d295:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c000d29b:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c000d2a1:	75 12                	jne    c000d2b5 <VgaText::putchar(char, VgaColour, VgaColour)+0x89>
c000d2a3:	83 ec 0c             	sub    esp,0xc
c000d2a6:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c000d2ac:	53                   	push   ebx
c000d2ad:	e8 2a fb ff ff       	call   c000cddc <VgaText::scrollScreen()>
c000d2b2:	83 c4 10             	add    esp,0x10
c000d2b5:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000d2b9:	83 c4 08             	add    esp,0x8
c000d2bc:	5b                   	pop    ebx
c000d2bd:	e9 cc f9 ff ff       	jmp    c000cc8e <VgaText::updateCursor()>
c000d2c2:	3c 08                	cmp    al,0x8
c000d2c4:	75 31                	jne    c000d2f7 <VgaText::putchar(char, VgaColour, VgaColour)+0xcb>
c000d2c6:	50                   	push   eax
c000d2c7:	50                   	push   eax
c000d2c8:	6a 01                	push   0x1
c000d2ca:	53                   	push   ebx
c000d2cb:	e8 34 ff ff ff       	call   c000d204 <VgaText::decrementCursor(bool)>
c000d2d0:	5a                   	pop    edx
c000d2d1:	59                   	pop    ecx
c000d2d2:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c000d2d8:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c000d2de:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c000d2e4:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c000d2ea:	6a 20                	push   0x20
c000d2ec:	53                   	push   ebx
c000d2ed:	e8 90 fb ff ff       	call   c000ce82 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000d2f2:	83 c4 28             	add    esp,0x28
c000d2f5:	5b                   	pop    ebx
c000d2f6:	c3                   	ret    
c000d2f7:	83 ec 08             	sub    esp,0x8
c000d2fa:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c000d300:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c000d306:	0f be c0             	movsx  eax,al
c000d309:	51                   	push   ecx
c000d30a:	52                   	push   edx
c000d30b:	50                   	push   eax
c000d30c:	53                   	push   ebx
c000d30d:	e8 70 fb ff ff       	call   c000ce82 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000d312:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c000d316:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c000d31e:	83 c4 28             	add    esp,0x28
c000d321:	5b                   	pop    ebx
c000d322:	e9 29 fc ff ff       	jmp    c000cf50 <VgaText::incrementCursor(bool)>
c000d327:	90                   	nop

c000d328 <VgaText::isShowingCursor()>:
c000d328:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d32c:	8a 80 bc 0f 00 00    	mov    al,BYTE PTR [eax+0xfbc]
c000d332:	c3                   	ret    
c000d333:	90                   	nop

c000d334 <VgaText::isBlinkDisabled()>:
c000d334:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d338:	8a 80 bd 0f 00 00    	mov    al,BYTE PTR [eax+0xfbd]
c000d33e:	83 f0 01             	xor    eax,0x1
c000d341:	c3                   	ret    

c000d342 <VgaText::setCursorHeight(int)>:
c000d342:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d346:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d34a:	89 90 b8 0f 00 00    	mov    DWORD PTR [eax+0xfb8],edx
c000d350:	0f b6 80 bc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfbc]
c000d357:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d35b:	e9 48 f9 ff ff       	jmp    c000cca8 <VgaText::showCursor(bool)>

c000d360 <VgaText::getCursorHeight()>:
c000d360:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d364:	8b 80 b8 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb8]
c000d36a:	c3                   	ret    

c000d36b <setActiveTerminal(VgaText*)>:
c000d36b:	53                   	push   ebx
c000d36c:	83 ec 08             	sub    esp,0x8
c000d36f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d373:	85 db                	test   ebx,ebx
c000d375:	75 11                	jne    c000d388 <setActiveTerminal(VgaText*)+0x1d>
c000d377:	c7 44 24 10 1c 13 02 c0 	mov    DWORD PTR [esp+0x10],0xc002131c
c000d37f:	83 c4 08             	add    esp,0x8
c000d382:	5b                   	pop    ebx
c000d383:	e9 ba 85 00 00       	jmp    c0015942 <Krnl::panic(char const*)>
c000d388:	50                   	push   eax
c000d389:	50                   	push   eax
c000d38a:	53                   	push   ebx
c000d38b:	68 2a 13 02 c0       	push   0xc002132a
c000d390:	e8 e2 1d 00 00       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c000d395:	a1 44 46 02 c0       	mov    eax,ds:0xc0024644
c000d39a:	83 c4 10             	add    esp,0x10
c000d39d:	85 c0                	test   eax,eax
c000d39f:	74 0c                	je     c000d3ad <setActiveTerminal(VgaText*)+0x42>
c000d3a1:	83 ec 0c             	sub    esp,0xc
c000d3a4:	50                   	push   eax
c000d3a5:	e8 e4 f8 ff ff       	call   c000cc8e <VgaText::updateCursor()>
c000d3aa:	83 c4 10             	add    esp,0x10
c000d3ad:	51                   	push   ecx
c000d3ae:	89 1d 44 46 02 c0    	mov    DWORD PTR ds:0xc0024644,ebx
c000d3b4:	51                   	push   ecx
c000d3b5:	53                   	push   ebx
c000d3b6:	68 42 13 02 c0       	push   0xc0021342
c000d3bb:	e8 b7 1d 00 00       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c000d3c0:	83 c4 0c             	add    esp,0xc
c000d3c3:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c000d3c9:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c000d3cf:	53                   	push   ebx
c000d3d0:	e8 25 fb ff ff       	call   c000cefa <VgaText::setCursor(int, int)>
c000d3d5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d3d8:	e8 57 ff ff ff       	call   c000d334 <VgaText::isBlinkDisabled()>
c000d3dd:	5a                   	pop    edx
c000d3de:	59                   	pop    ecx
c000d3df:	0f b6 c0             	movzx  eax,al
c000d3e2:	50                   	push   eax
c000d3e3:	53                   	push   ebx
c000d3e4:	e8 cf f8 ff ff       	call   c000ccb8 <VgaText::disableBlink(bool)>
c000d3e9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d3ec:	e8 6f ff ff ff       	call   c000d360 <VgaText::getCursorHeight()>
c000d3f1:	5a                   	pop    edx
c000d3f2:	59                   	pop    ecx
c000d3f3:	50                   	push   eax
c000d3f4:	53                   	push   ebx
c000d3f5:	e8 48 ff ff ff       	call   c000d342 <VgaText::setCursorHeight(int)>
c000d3fa:	83 c4 10             	add    esp,0x10
c000d3fd:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c000d404:	75 0a                	jne    c000d410 <setActiveTerminal(VgaText*)+0xa5>
c000d406:	c7 83 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff8],0x0
c000d410:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000d414:	83 c4 08             	add    esp,0x8
c000d417:	5b                   	pop    ebx
c000d418:	e9 1d f8 ff ff       	jmp    c000cc3a <VgaText::load()>

c000d41d <doTerminalCycle()>:
c000d41d:	83 ec 18             	sub    esp,0x18
c000d420:	a1 40 46 02 c0       	mov    eax,ds:0xc0024640
c000d425:	8b 80 c0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfc0]
c000d42b:	50                   	push   eax
c000d42c:	a3 40 46 02 c0       	mov    ds:0xc0024640,eax
c000d431:	e8 35 ff ff ff       	call   c000d36b <setActiveTerminal(VgaText*)>
c000d436:	83 c4 1c             	add    esp,0x1c
c000d439:	c3                   	ret    

c000d43a <VgaText::doUpdate()>:
c000d43a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d43e:	8b 80 04 10 00 00    	mov    eax,DWORD PTR [eax+0x1004]
c000d444:	85 c0                	test   eax,eax
c000d446:	74 02                	je     c000d44a <VgaText::doUpdate()+0x10>
c000d448:	ff e0                	jmp    eax
c000d44a:	c3                   	ret    
c000d44b:	90                   	nop

c000d44c <VgaText::puts(char const*, VgaColour, VgaColour)>:
c000d44c:	55                   	push   ebp
c000d44d:	57                   	push   edi
c000d44e:	56                   	push   esi
c000d44f:	53                   	push   ebx
c000d450:	83 ec 1c             	sub    esp,0x1c
c000d453:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000d457:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000d45c:	c6 85 1d 10 00 00 01 	mov    BYTE PTR [ebp+0x101d],0x1
c000d463:	50                   	push   eax
c000d464:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000d469:	50                   	push   eax
c000d46a:	e8 5b f9 ff ff       	call   c000cdca <VgaText::combineColours(unsigned char, unsigned char)>
c000d46f:	59                   	pop    ecx
c000d470:	8d 7d 0c             	lea    edi,[ebp+0xc]
c000d473:	5b                   	pop    ebx
c000d474:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c000d47c:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c000d482:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000d486:	0f b7 db             	movzx  ebx,bx
c000d489:	01 db                	add    ebx,ebx
c000d48b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000d48f:	01 fb                	add    ebx,edi
c000d491:	31 c0                	xor    eax,eax
c000d493:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c000d496:	84 c9                	test   cl,cl
c000d498:	0f 84 3d 01 00 00    	je     c000d5db <VgaText::puts(char const*, VgaColour, VgaColour)+0x18f>
c000d49e:	80 f9 0d             	cmp    cl,0xd
c000d4a1:	75 0f                	jne    c000d4b2 <VgaText::puts(char const*, VgaColour, VgaColour)+0x66>
c000d4a3:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c000d4ad:	e9 23 01 00 00       	jmp    c000d5d5 <VgaText::puts(char const*, VgaColour, VgaColour)+0x189>
c000d4b2:	80 f9 0a             	cmp    cl,0xa
c000d4b5:	75 5b                	jne    c000d512 <VgaText::puts(char const*, VgaColour, VgaColour)+0xc6>
c000d4b7:	8b 85 b4 0f 00 00    	mov    eax,DWORD PTR [ebp+0xfb4]
c000d4bd:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c000d4c7:	8d 48 01             	lea    ecx,[eax+0x1]
c000d4ca:	89 8d b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],ecx
c000d4d0:	3b 8d ac 0f 00 00    	cmp    ecx,DWORD PTR [ebp+0xfac]
c000d4d6:	75 12                	jne    c000d4ea <VgaText::puts(char const*, VgaColour, VgaColour)+0x9e>
c000d4d8:	83 ec 0c             	sub    esp,0xc
c000d4db:	89 85 b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],eax
c000d4e1:	55                   	push   ebp
c000d4e2:	e8 f5 f8 ff ff       	call   c000cddc <VgaText::scrollScreen()>
c000d4e7:	83 c4 10             	add    esp,0x10
c000d4ea:	83 ec 0c             	sub    esp,0xc
c000d4ed:	55                   	push   ebp
c000d4ee:	e8 9b f7 ff ff       	call   c000cc8e <VgaText::updateCursor()>
c000d4f3:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c000d4fb:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c000d501:	83 c4 10             	add    esp,0x10
c000d504:	0f b7 db             	movzx  ebx,bx
c000d507:	01 db                	add    ebx,ebx
c000d509:	31 c0                	xor    eax,eax
c000d50b:	01 fb                	add    ebx,edi
c000d50d:	e9 c3 00 00 00       	jmp    c000d5d5 <VgaText::puts(char const*, VgaColour, VgaColour)+0x189>
c000d512:	80 f9 08             	cmp    cl,0x8
c000d515:	75 4e                	jne    c000d565 <VgaText::puts(char const*, VgaColour, VgaColour)+0x119>
c000d517:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000d51b:	50                   	push   eax
c000d51c:	50                   	push   eax
c000d51d:	6a 01                	push   0x1
c000d51f:	55                   	push   ebp
c000d520:	e8 df fc ff ff       	call   c000d204 <VgaText::decrementCursor(bool)>
c000d525:	58                   	pop    eax
c000d526:	5a                   	pop    edx
c000d527:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c000d52d:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c000d533:	ff b5 cc 0f 00 00    	push   DWORD PTR [ebp+0xfcc]
c000d539:	ff b5 d0 0f 00 00    	push   DWORD PTR [ebp+0xfd0]
c000d53f:	6a 20                	push   0x20
c000d541:	55                   	push   ebp
c000d542:	e8 3b f9 ff ff       	call   c000ce82 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000d547:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c000d54f:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c000d555:	83 c4 20             	add    esp,0x20
c000d558:	0f b7 db             	movzx  ebx,bx
c000d55b:	01 db                	add    ebx,ebx
c000d55d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000d561:	01 fb                	add    ebx,edi
c000d563:	eb 70                	jmp    c000d5d5 <VgaText::puts(char const*, VgaColour, VgaColour)+0x189>
c000d565:	50                   	push   eax
c000d566:	50                   	push   eax
c000d567:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c000d56c:	50                   	push   eax
c000d56d:	51                   	push   ecx
c000d56e:	e8 fd f8 ff ff       	call   c000ce70 <VgaText::combineCharAndColour(char, unsigned char)>
c000d573:	66 89 03             	mov    WORD PTR [ebx],ax
c000d576:	83 c4 10             	add    esp,0x10
c000d579:	39 2d 44 46 02 c0    	cmp    DWORD PTR ds:0xc0024644,ebp
c000d57f:	75 2a                	jne    c000d5ab <VgaText::puts(char const*, VgaColour, VgaColour)+0x15f>
c000d581:	8b 85 18 10 00 00    	mov    eax,DWORD PTR [ebp+0x1018]
c000d587:	85 c0                	test   eax,eax
c000d589:	74 20                	je     c000d5ab <VgaText::puts(char const*, VgaColour, VgaColour)+0x15f>
c000d58b:	52                   	push   edx
c000d58c:	52                   	push   edx
c000d58d:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c000d593:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c000d599:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d59d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d5a1:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c000d5a4:	51                   	push   ecx
c000d5a5:	55                   	push   ebp
c000d5a6:	ff d0                	call   eax
c000d5a8:	83 c4 20             	add    esp,0x20
c000d5ab:	50                   	push   eax
c000d5ac:	83 c3 02             	add    ebx,0x2
c000d5af:	50                   	push   eax
c000d5b0:	6a 00                	push   0x0
c000d5b2:	55                   	push   ebp
c000d5b3:	e8 98 f9 ff ff       	call   c000cf50 <VgaText::incrementCursor(bool)>
c000d5b8:	83 c4 10             	add    esp,0x10
c000d5bb:	83 bd b0 0f 00 00 00 	cmp    DWORD PTR [ebp+0xfb0],0x0
c000d5c2:	75 0f                	jne    c000d5d3 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c000d5c4:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c000d5cc:	0f b7 db             	movzx  ebx,bx
c000d5cf:	01 db                	add    ebx,ebx
c000d5d1:	01 fb                	add    ebx,edi
c000d5d3:	b0 01                	mov    al,0x1
c000d5d5:	46                   	inc    esi
c000d5d6:	e9 b8 fe ff ff       	jmp    c000d493 <VgaText::puts(char const*, VgaColour, VgaColour)+0x47>
c000d5db:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000d5df:	83 ec 0c             	sub    esp,0xc
c000d5e2:	55                   	push   ebp
c000d5e3:	e8 a6 f6 ff ff       	call   c000cc8e <VgaText::updateCursor()>
c000d5e8:	83 c4 10             	add    esp,0x10
c000d5eb:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c000d5ef:	84 c0                	test   al,al
c000d5f1:	74 0c                	je     c000d5ff <VgaText::puts(char const*, VgaColour, VgaColour)+0x1b3>
c000d5f3:	83 ec 0c             	sub    esp,0xc
c000d5f6:	55                   	push   ebp
c000d5f7:	e8 3e fe ff ff       	call   c000d43a <VgaText::doUpdate()>
c000d5fc:	83 c4 10             	add    esp,0x10
c000d5ff:	c6 85 1d 10 00 00 00 	mov    BYTE PTR [ebp+0x101d],0x0
c000d606:	83 c4 1c             	add    esp,0x1c
c000d609:	5b                   	pop    ebx
c000d60a:	5e                   	pop    esi
c000d60b:	5f                   	pop    edi
c000d60c:	5d                   	pop    ebp
c000d60d:	c3                   	ret    

c000d60e <VgaText::clearScreen()>:
c000d60e:	57                   	push   edi
c000d60f:	56                   	push   esi
c000d610:	31 f6                	xor    esi,esi
c000d612:	53                   	push   ebx
c000d613:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d617:	52                   	push   edx
c000d618:	6a 00                	push   0x0
c000d61a:	6a 00                	push   0x0
c000d61c:	53                   	push   ebx
c000d61d:	e8 d8 f8 ff ff       	call   c000cefa <VgaText::setCursor(int, int)>
c000d622:	c6 83 1d 10 00 00 01 	mov    BYTE PTR [ebx+0x101d],0x1
c000d629:	83 c4 10             	add    esp,0x10
c000d62c:	39 b3 ac 0f 00 00    	cmp    DWORD PTR [ebx+0xfac],esi
c000d632:	7e 26                	jle    c000d65a <VgaText::clearScreen()+0x4c>
c000d634:	31 ff                	xor    edi,edi
c000d636:	50                   	push   eax
c000d637:	50                   	push   eax
c000d638:	56                   	push   esi
c000d639:	57                   	push   edi
c000d63a:	47                   	inc    edi
c000d63b:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c000d641:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c000d647:	6a 20                	push   0x20
c000d649:	53                   	push   ebx
c000d64a:	e8 33 f8 ff ff       	call   c000ce82 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000d64f:	83 c4 20             	add    esp,0x20
c000d652:	83 ff 50             	cmp    edi,0x50
c000d655:	75 df                	jne    c000d636 <VgaText::clearScreen()+0x28>
c000d657:	46                   	inc    esi
c000d658:	eb d2                	jmp    c000d62c <VgaText::clearScreen()+0x1e>
c000d65a:	83 ec 0c             	sub    esp,0xc
c000d65d:	53                   	push   ebx
c000d65e:	e8 d7 fd ff ff       	call   c000d43a <VgaText::doUpdate()>
c000d663:	83 c4 10             	add    esp,0x10
c000d666:	c6 83 1d 10 00 00 00 	mov    BYTE PTR [ebx+0x101d],0x0
c000d66d:	5b                   	pop    ebx
c000d66e:	5e                   	pop    esi
c000d66f:	5f                   	pop    edi
c000d670:	c3                   	ret    
c000d671:	90                   	nop

c000d672 <VgaText::putchar(char)>:
c000d672:	56                   	push   esi
c000d673:	53                   	push   ebx
c000d674:	83 ec 14             	sub    esp,0x14
c000d677:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d67b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000d67f:	3c 5b                	cmp    al,0x5b
c000d681:	75 21                	jne    c000d6a4 <VgaText::putchar(char)+0x32>
c000d683:	80 bb dc 0f 00 00 00 	cmp    BYTE PTR [ebx+0xfdc],0x0
c000d68a:	74 28                	je     c000d6b4 <VgaText::putchar(char)+0x42>
c000d68c:	66 c7 83 dc 0f 00 00 00 01 	mov    WORD PTR [ebx+0xfdc],0x100
c000d695:	c7 83 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff0],0x0
c000d69f:	e9 e2 00 00 00       	jmp    c000d786 <VgaText::putchar(char)+0x114>
c000d6a4:	3c 1b                	cmp    al,0x1b
c000d6a6:	75 0c                	jne    c000d6b4 <VgaText::putchar(char)+0x42>
c000d6a8:	c6 83 dc 0f 00 00 01 	mov    BYTE PTR [ebx+0xfdc],0x1
c000d6af:	e9 d2 00 00 00       	jmp    c000d786 <VgaText::putchar(char)+0x114>
c000d6b4:	8a 8b dd 0f 00 00    	mov    cl,BYTE PTR [ebx+0xfdd]
c000d6ba:	84 c9                	test   cl,cl
c000d6bc:	0f 84 ab 00 00 00    	je     c000d76d <VgaText::putchar(char)+0xfb>
c000d6c2:	8d 50 c0             	lea    edx,[eax-0x40]
c000d6c5:	80 fa 3e             	cmp    dl,0x3e
c000d6c8:	0f 87 82 00 00 00    	ja     c000d750 <VgaText::putchar(char)+0xde>
c000d6ce:	3c 6d                	cmp    al,0x6d
c000d6d0:	75 4d                	jne    c000d71f <VgaText::putchar(char)+0xad>
c000d6d2:	31 f6                	xor    esi,esi
c000d6d4:	31 d2                	xor    edx,edx
c000d6d6:	31 c0                	xor    eax,eax
c000d6d8:	39 b3 f0 0f 00 00    	cmp    DWORD PTR [ebx+0xff0],esi
c000d6de:	7e 30                	jle    c000d710 <VgaText::putchar(char)+0x9e>
c000d6e0:	0f be 94 33 de 0f 00 00 	movsx  edx,BYTE PTR [ebx+esi*1+0xfde]
c000d6e8:	80 fa 3b             	cmp    dl,0x3b
c000d6eb:	75 17                	jne    c000d704 <VgaText::putchar(char)+0x92>
c000d6ed:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000d6f1:	50                   	push   eax
c000d6f2:	53                   	push   ebx
c000d6f3:	e8 fa f5 ff ff       	call   c000ccf2 <VgaText::doANSI_SGR(int)>
c000d6f8:	59                   	pop    ecx
c000d6f9:	31 d2                	xor    edx,edx
c000d6fb:	58                   	pop    eax
c000d6fc:	31 c0                	xor    eax,eax
c000d6fe:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000d702:	eb 09                	jmp    c000d70d <VgaText::putchar(char)+0x9b>
c000d704:	6b c0 0a             	imul   eax,eax,0xa
c000d707:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c000d70b:	88 ca                	mov    dl,cl
c000d70d:	46                   	inc    esi
c000d70e:	eb c8                	jmp    c000d6d8 <VgaText::putchar(char)+0x66>
c000d710:	84 d2                	test   dl,dl
c000d712:	74 31                	je     c000d745 <VgaText::putchar(char)+0xd3>
c000d714:	50                   	push   eax
c000d715:	53                   	push   ebx
c000d716:	e8 d7 f5 ff ff       	call   c000ccf2 <VgaText::doANSI_SGR(int)>
c000d71b:	58                   	pop    eax
c000d71c:	5a                   	pop    edx
c000d71d:	eb 26                	jmp    c000d745 <VgaText::putchar(char)+0xd3>
c000d71f:	3c 4a                	cmp    al,0x4a
c000d721:	75 22                	jne    c000d745 <VgaText::putchar(char)+0xd3>
c000d723:	80 bb de 0f 00 00 32 	cmp    BYTE PTR [ebx+0xfde],0x32
c000d72a:	75 19                	jne    c000d745 <VgaText::putchar(char)+0xd3>
c000d72c:	83 ec 0c             	sub    esp,0xc
c000d72f:	53                   	push   ebx
c000d730:	e8 d9 fe ff ff       	call   c000d60e <VgaText::clearScreen()>
c000d735:	83 c4 0c             	add    esp,0xc
c000d738:	6a 00                	push   0x0
c000d73a:	6a 00                	push   0x0
c000d73c:	53                   	push   ebx
c000d73d:	e8 b8 f7 ff ff       	call   c000cefa <VgaText::setCursor(int, int)>
c000d742:	83 c4 10             	add    esp,0x10
c000d745:	66 c7 83 dc 0f 00 00 00 00 	mov    WORD PTR [ebx+0xfdc],0x0
c000d74e:	eb 36                	jmp    c000d786 <VgaText::putchar(char)+0x114>
c000d750:	8b 93 f0 0f 00 00    	mov    edx,DWORD PTR [ebx+0xff0]
c000d756:	83 fa 0e             	cmp    edx,0xe
c000d759:	7f 2b                	jg     c000d786 <VgaText::putchar(char)+0x114>
c000d75b:	8d 4a 01             	lea    ecx,[edx+0x1]
c000d75e:	89 8b f0 0f 00 00    	mov    DWORD PTR [ebx+0xff0],ecx
c000d764:	88 84 13 de 0f 00 00 	mov    BYTE PTR [ebx+edx*1+0xfde],al
c000d76b:	eb 19                	jmp    c000d786 <VgaText::putchar(char)+0x114>
c000d76d:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c000d773:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c000d779:	0f be c0             	movsx  eax,al
c000d77c:	50                   	push   eax
c000d77d:	53                   	push   ebx
c000d77e:	e8 a9 fa ff ff       	call   c000d22c <VgaText::putchar(char, VgaColour, VgaColour)>
c000d783:	83 c4 10             	add    esp,0x10
c000d786:	83 c4 14             	add    esp,0x14
c000d789:	5b                   	pop    ebx
c000d78a:	5e                   	pop    esi
c000d78b:	c3                   	ret    

c000d78c <VgaText::puts(char const*)>:
c000d78c:	53                   	push   ebx
c000d78d:	83 ec 08             	sub    esp,0x8
c000d790:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d794:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000d797:	84 c0                	test   al,al
c000d799:	74 12                	je     c000d7ad <VgaText::puts(char const*)+0x21>
c000d79b:	51                   	push   ecx
c000d79c:	43                   	inc    ebx
c000d79d:	51                   	push   ecx
c000d79e:	50                   	push   eax
c000d79f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7a3:	e8 ca fe ff ff       	call   c000d672 <VgaText::putchar(char)>
c000d7a8:	83 c4 10             	add    esp,0x10
c000d7ab:	eb e7                	jmp    c000d794 <VgaText::puts(char const*)+0x8>
c000d7ad:	83 c4 08             	add    esp,0x8
c000d7b0:	5b                   	pop    ebx
c000d7b1:	c3                   	ret    

c000d7b2 <VgaText::putx(unsigned int)>:
c000d7b2:	57                   	push   edi
c000d7b3:	b9 11 00 00 00       	mov    ecx,0x11
c000d7b8:	56                   	push   esi
c000d7b9:	be 5e 13 02 c0       	mov    esi,0xc002135e
c000d7be:	53                   	push   ebx
c000d7bf:	83 ec 20             	sub    esp,0x20
c000d7c2:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000d7c6:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c000d7ca:	fc                   	cld    
c000d7cb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d7cd:	be 08 00 00 00       	mov    esi,0x8
c000d7d2:	50                   	push   eax
c000d7d3:	50                   	push   eax
c000d7d4:	89 d8                	mov    eax,ebx
c000d7d6:	c1 e8 1c             	shr    eax,0x1c
c000d7d9:	c1 e3 04             	shl    ebx,0x4
c000d7dc:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c000d7e1:	50                   	push   eax
c000d7e2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d7e6:	e8 87 fe ff ff       	call   c000d672 <VgaText::putchar(char)>
c000d7eb:	83 c4 10             	add    esp,0x10
c000d7ee:	4e                   	dec    esi
c000d7ef:	75 e1                	jne    c000d7d2 <VgaText::putx(unsigned int)+0x20>
c000d7f1:	83 c4 20             	add    esp,0x20
c000d7f4:	5b                   	pop    ebx
c000d7f5:	5e                   	pop    esi
c000d7f6:	5f                   	pop    edi
c000d7f7:	c3                   	ret    

c000d7f8 <VgaText::VgaText(char const*)>:
c000d7f8:	57                   	push   edi
c000d7f9:	56                   	push   esi
c000d7fa:	53                   	push   ebx
c000d7fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7ff:	83 ec 08             	sub    esp,0x8
c000d802:	6a 00                	push   0x0
c000d804:	50                   	push   eax
c000d805:	e8 4a 05 00 00       	call   c000dd54 <UnixFile::UnixFile(int)>
c000d80a:	83 c4 10             	add    esp,0x10
c000d80d:	ba c4 13 02 c0       	mov    edx,0xc00213c4
c000d812:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d816:	89 10                	mov    DWORD PTR [eax],edx
c000d818:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d81c:	c7 80 d4 0f 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xfd4],0x1
c000d826:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d82a:	c7 80 d8 0f 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0xfd8],0xf
c000d834:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d838:	c6 80 dc 0f 00 00 00 	mov    BYTE PTR [eax+0xfdc],0x0
c000d83f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d843:	c6 80 dd 0f 00 00 00 	mov    BYTE PTR [eax+0xfdd],0x0
c000d84a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d84e:	c7 80 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff0],0x0
c000d858:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d85c:	c7 80 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff8],0x0
c000d866:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d86a:	c6 80 1c 10 00 00 00 	mov    BYTE PTR [eax+0x101c],0x0
c000d871:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d875:	c6 80 1d 10 00 00 00 	mov    BYTE PTR [eax+0x101d],0x0
c000d87c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d880:	8d 90 fc 0f 00 00    	lea    edx,[eax+0xffc]
c000d886:	bb 20 46 02 c0       	mov    ebx,0xc0024620
c000d88b:	b8 08 00 00 00       	mov    eax,0x8
c000d890:	fc                   	cld    
c000d891:	89 d7                	mov    edi,edx
c000d893:	89 de                	mov    esi,ebx
c000d895:	89 c1                	mov    ecx,eax
c000d897:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000d899:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d89d:	05 1e 10 00 00       	add    eax,0x101e
c000d8a2:	83 ec 08             	sub    esp,0x8
c000d8a5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d8a9:	50                   	push   eax
c000d8aa:	e8 aa 2e ff ff       	call   c0000759 <strcpy>
c000d8af:	83 c4 10             	add    esp,0x10
c000d8b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8b6:	c7 80 ac 0f 00 00 18 00 00 00 	mov    DWORD PTR [eax+0xfac],0x18
c000d8c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8c4:	83 c0 0c             	add    eax,0xc
c000d8c7:	83 ec 04             	sub    esp,0x4
c000d8ca:	68 00 0f 00 00       	push   0xf00
c000d8cf:	6a 00                	push   0x0
c000d8d1:	50                   	push   eax
c000d8d2:	e8 e3 2d ff ff       	call   c00006ba <memset>
c000d8d7:	83 c4 10             	add    esp,0x10
c000d8da:	83 ec 04             	sub    esp,0x4
c000d8dd:	6a 00                	push   0x0
c000d8df:	6a 07                	push   0x7
c000d8e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d8e5:	e8 c0 f4 ff ff       	call   c000cdaa <VgaText::setDefaultColours(VgaColour, VgaColour)>
c000d8ea:	83 c4 10             	add    esp,0x10
c000d8ed:	83 ec 08             	sub    esp,0x8
c000d8f0:	6a 02                	push   0x2
c000d8f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d8f6:	e8 47 fa ff ff       	call   c000d342 <VgaText::setCursorHeight(int)>
c000d8fb:	83 c4 10             	add    esp,0x10
c000d8fe:	83 ec 04             	sub    esp,0x4
c000d901:	6a 00                	push   0x0
c000d903:	6a 00                	push   0x0
c000d905:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d909:	e8 ec f5 ff ff       	call   c000cefa <VgaText::setCursor(int, int)>
c000d90e:	83 c4 10             	add    esp,0x10
c000d911:	83 ec 08             	sub    esp,0x8
c000d914:	6a 01                	push   0x1
c000d916:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d91a:	e8 89 f3 ff ff       	call   c000cca8 <VgaText::showCursor(bool)>
c000d91f:	83 c4 10             	add    esp,0x10
c000d922:	83 ec 08             	sub    esp,0x8
c000d925:	6a 01                	push   0x1
c000d927:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d92b:	e8 88 f3 ff ff       	call   c000ccb8 <VgaText::disableBlink(bool)>
c000d930:	83 c4 10             	add    esp,0x10
c000d933:	83 ec 0c             	sub    esp,0xc
c000d936:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d93a:	e8 cf fc ff ff       	call   c000d60e <VgaText::clearScreen()>
c000d93f:	83 c4 10             	add    esp,0x10
c000d942:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d946:	c6 80 f4 0f 00 00 00 	mov    BYTE PTR [eax+0xff4],0x0
c000d94d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d951:	05 9e 10 00 00       	add    eax,0x109e
c000d956:	83 ec 04             	sub    esp,0x4
c000d959:	68 96 00 00 00       	push   0x96
c000d95e:	6a 00                	push   0x0
c000d960:	50                   	push   eax
c000d961:	e8 54 2d ff ff       	call   c00006ba <memset>
c000d966:	83 c4 10             	add    esp,0x10
c000d969:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d96d:	05 34 11 00 00       	add    eax,0x1134
c000d972:	83 ec 04             	sub    esp,0x4
c000d975:	68 2c 01 00 00       	push   0x12c
c000d97a:	6a 00                	push   0x0
c000d97c:	50                   	push   eax
c000d97d:	e8 38 2d ff ff       	call   c00006ba <memset>
c000d982:	83 c4 10             	add    esp,0x10
c000d985:	90                   	nop
c000d986:	5b                   	pop    ebx
c000d987:	5e                   	pop    esi
c000d988:	5f                   	pop    edi
c000d989:	c3                   	ret    

c000d98a <VgaText::receiveKey(unsigned char)>:
c000d98a:	55                   	push   ebp
c000d98b:	57                   	push   edi
c000d98c:	56                   	push   esi
c000d98d:	53                   	push   ebx
c000d98e:	83 ec 1c             	sub    esp,0x1c
c000d991:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000d995:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d999:	84 db                	test   bl,bl
c000d99b:	0f 84 c9 00 00 00    	je     c000da6a <VgaText::receiveKey(unsigned char)+0xe0>
c000d9a1:	8d be 9e 10 00 00    	lea    edi,[esi+0x109e]
c000d9a7:	80 fb 08             	cmp    bl,0x8
c000d9aa:	75 2c                	jne    c000d9d8 <VgaText::receiveKey(unsigned char)+0x4e>
c000d9ac:	83 ec 0c             	sub    esp,0xc
c000d9af:	57                   	push   edi
c000d9b0:	e8 22 2d ff ff       	call   c00006d7 <strlen>
c000d9b5:	83 c4 10             	add    esp,0x10
c000d9b8:	85 c0                	test   eax,eax
c000d9ba:	74 41                	je     c000d9fd <VgaText::receiveKey(unsigned char)+0x73>
c000d9bc:	50                   	push   eax
c000d9bd:	50                   	push   eax
c000d9be:	6a 08                	push   0x8
c000d9c0:	56                   	push   esi
c000d9c1:	e8 ac fc ff ff       	call   c000d672 <VgaText::putchar(char)>
c000d9c6:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d9c9:	e8 09 2d ff ff       	call   c00006d7 <strlen>
c000d9ce:	c6 84 06 9d 10 00 00 00 	mov    BYTE PTR [esi+eax*1+0x109d],0x0
c000d9d6:	eb 22                	jmp    c000d9fa <VgaText::receiveKey(unsigned char)+0x70>
c000d9d8:	52                   	push   edx
c000d9d9:	52                   	push   edx
c000d9da:	0f be c3             	movsx  eax,bl
c000d9dd:	50                   	push   eax
c000d9de:	56                   	push   esi
c000d9df:	e8 8e fc ff ff       	call   c000d672 <VgaText::putchar(char)>
c000d9e4:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c000d9e8:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000d9ed:	59                   	pop    ecx
c000d9ee:	5d                   	pop    ebp
c000d9ef:	8d 44 24 16          	lea    eax,[esp+0x16]
c000d9f3:	50                   	push   eax
c000d9f4:	57                   	push   edi
c000d9f5:	e8 16 2e ff ff       	call   c0000810 <strcat>
c000d9fa:	83 c4 10             	add    esp,0x10
c000d9fd:	80 be 1c 10 00 00 00 	cmp    BYTE PTR [esi+0x101c],0x0
c000da04:	75 05                	jne    c000da0b <VgaText::receiveKey(unsigned char)+0x81>
c000da06:	80 fb 0a             	cmp    bl,0xa
c000da09:	75 53                	jne    c000da5e <VgaText::receiveKey(unsigned char)+0xd4>
c000da0b:	83 ec 0c             	sub    esp,0xc
c000da0e:	8d 9e 34 11 00 00    	lea    ebx,[esi+0x1134]
c000da14:	53                   	push   ebx
c000da15:	e8 bd 2c ff ff       	call   c00006d7 <strlen>
c000da1a:	89 3c 24             	mov    DWORD PTR [esp],edi
c000da1d:	89 c5                	mov    ebp,eax
c000da1f:	e8 b3 2c ff ff       	call   c00006d7 <strlen>
c000da24:	83 c4 10             	add    esp,0x10
c000da27:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c000da2b:	3d 2c 01 00 00       	cmp    eax,0x12c
c000da30:	76 10                	jbe    c000da42 <VgaText::receiveKey(unsigned char)+0xb8>
c000da32:	83 ec 0c             	sub    esp,0xc
c000da35:	68 6f 13 02 c0       	push   0xc002136f
c000da3a:	e8 03 7f 00 00       	call   c0015942 <Krnl::panic(char const*)>
c000da3f:	83 c4 10             	add    esp,0x10
c000da42:	50                   	push   eax
c000da43:	50                   	push   eax
c000da44:	57                   	push   edi
c000da45:	53                   	push   ebx
c000da46:	e8 c5 2d ff ff       	call   c0000810 <strcat>
c000da4b:	83 c4 0c             	add    esp,0xc
c000da4e:	68 96 00 00 00       	push   0x96
c000da53:	6a 00                	push   0x0
c000da55:	57                   	push   edi
c000da56:	e8 5f 2c ff ff       	call   c00006ba <memset>
c000da5b:	83 c4 10             	add    esp,0x10
c000da5e:	83 ec 0c             	sub    esp,0xc
c000da61:	56                   	push   esi
c000da62:	e8 d3 f9 ff ff       	call   c000d43a <VgaText::doUpdate()>
c000da67:	83 c4 10             	add    esp,0x10
c000da6a:	83 c4 1c             	add    esp,0x1c
c000da6d:	5b                   	pop    ebx
c000da6e:	5e                   	pop    esi
c000da6f:	5f                   	pop    edi
c000da70:	5d                   	pop    ebp
c000da71:	c3                   	ret    

c000da72 <VgaText::write(unsigned long long, void*, int*)>:
c000da72:	55                   	push   ebp
c000da73:	57                   	push   edi
c000da74:	56                   	push   esi
c000da75:	53                   	push   ebx
c000da76:	83 ec 0c             	sub    esp,0xc
c000da79:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000da7d:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000da81:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000da85:	c6 86 1d 10 00 00 01 	mov    BYTE PTR [esi+0x101d],0x1
c000da8c:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c000da8f:	39 eb                	cmp    ebx,ebp
c000da91:	74 13                	je     c000daa6 <VgaText::write(unsigned long long, void*, int*)+0x34>
c000da93:	50                   	push   eax
c000da94:	43                   	inc    ebx
c000da95:	50                   	push   eax
c000da96:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c000da9a:	50                   	push   eax
c000da9b:	56                   	push   esi
c000da9c:	e8 d1 fb ff ff       	call   c000d672 <VgaText::putchar(char)>
c000daa1:	83 c4 10             	add    esp,0x10
c000daa4:	eb e9                	jmp    c000da8f <VgaText::write(unsigned long long, void*, int*)+0x1d>
c000daa6:	83 ec 0c             	sub    esp,0xc
c000daa9:	c6 86 1d 10 00 00 00 	mov    BYTE PTR [esi+0x101d],0x0
c000dab0:	56                   	push   esi
c000dab1:	e8 84 f9 ff ff       	call   c000d43a <VgaText::doUpdate()>
c000dab6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000daba:	89 38                	mov    DWORD PTR [eax],edi
c000dabc:	83 c4 1c             	add    esp,0x1c
c000dabf:	31 c0                	xor    eax,eax
c000dac1:	5b                   	pop    ebx
c000dac2:	5e                   	pop    esi
c000dac3:	5f                   	pop    edi
c000dac4:	5d                   	pop    ebp
c000dac5:	c3                   	ret    

c000dac6 <newTerminal(char*)>:
c000dac6:	83 ec 28             	sub    esp,0x28
c000dac9:	68 60 12 00 00       	push   0x1260
c000dace:	e8 6f 15 00 00       	call   c000f042 <operator new(unsigned long)>
c000dad3:	5a                   	pop    edx
c000dad4:	59                   	pop    ecx
c000dad5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000dad9:	50                   	push   eax
c000dada:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000dade:	e8 15 fd ff ff       	call   c000d7f8 <VgaText::VgaText(char const*)>
c000dae3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000dae7:	83 c4 2c             	add    esp,0x2c
c000daea:	c3                   	ret    
c000daeb:	90                   	nop

c000daec <TSS::TSS()>:
c000daec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000daf0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000daf7:	90                   	nop
c000daf8:	c3                   	ret    
c000daf9:	90                   	nop

c000dafa <TSS::setESP(unsigned long)>:
c000dafa:	55                   	push   ebp
c000dafb:	89 e5                	mov    ebp,esp
c000dafd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db00:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db03:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000db06:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000db09:	90                   	nop
c000db0a:	5d                   	pop    ebp
c000db0b:	c3                   	ret    

c000db0c <TSS::flush()>:
c000db0c:	55                   	push   ebp
c000db0d:	89 e5                	mov    ebp,esp
c000db0f:	83 ec 10             	sub    esp,0x10
c000db12:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db15:	8b 00                	mov    eax,DWORD PTR [eax]
c000db17:	83 c8 03             	or     eax,0x3
c000db1a:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c000db1e:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c000db22:	66 89 d0             	mov    ax,dx
c000db25:	0f 00 d8             	ltr    ax
c000db28:	90                   	nop
c000db29:	c9                   	leave  
c000db2a:	c3                   	ret    
c000db2b:	90                   	nop

c000db2c <TSS::setup(unsigned long, unsigned long)>:
c000db2c:	55                   	push   ebp
c000db2d:	89 e5                	mov    ebp,esp
c000db2f:	53                   	push   ebx
c000db30:	83 ec 14             	sub    esp,0x14
c000db33:	83 ec 0c             	sub    esp,0xc
c000db36:	6a 68                	push   0x68
c000db38:	e8 cc e4 ff ff       	call   c000c009 <malloc>
c000db3d:	83 c4 10             	add    esp,0x10
c000db40:	89 c2                	mov    edx,eax
c000db42:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db45:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000db48:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db4b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db4e:	83 ec 04             	sub    esp,0x4
c000db51:	6a 68                	push   0x68
c000db53:	6a 00                	push   0x0
c000db55:	50                   	push   eax
c000db56:	e8 5f 2b ff ff       	call   c00006ba <memset>
c000db5b:	83 c4 10             	add    esp,0x10
c000db5e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db61:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db64:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c000db6a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db6d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db70:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c000db76:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db79:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db7c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000db7f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000db82:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db85:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db88:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c000db8e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db91:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db94:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c000db9a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db9d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dba0:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c000dba6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dba9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dbac:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c000dbb2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dbb5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dbb8:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000dbbb:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000dbbe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dbc1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dbc4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000dbc7:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000dbca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dbcd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dbd0:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c000dbd7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dbda:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
c000dbdd:	e8 c3 1a 01 00       	call   c001f6a5 <CPU::readCR3()>
c000dbe2:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000dbe5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dbe8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dbeb:	83 ec 08             	sub    esp,0x8
c000dbee:	50                   	push   eax
c000dbef:	8d 45 f0             	lea    eax,[ebp-0x10]
c000dbf2:	50                   	push   eax
c000dbf3:	e8 e8 db ff ff       	call   c000b7e0 <GDTEntry::setBase(unsigned int)>
c000dbf8:	83 c4 10             	add    esp,0x10
c000dbfb:	83 ec 08             	sub    esp,0x8
c000dbfe:	6a 68                	push   0x68
c000dc00:	8d 45 f0             	lea    eax,[ebp-0x10]
c000dc03:	50                   	push   eax
c000dc04:	e8 f3 db ff ff       	call   c000b7fc <GDTEntry::setLimit(unsigned int)>
c000dc09:	83 c4 10             	add    esp,0x10
c000dc0c:	c6 45 f5 89          	mov    BYTE PTR [ebp-0xb],0x89
c000dc10:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000dc13:	83 e0 0f             	and    eax,0xf
c000dc16:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c000dc19:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000dc1c:	83 c8 40             	or     eax,0x40
c000dc1f:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c000dc22:	e8 af 6b 00 00       	call   c00147d6 <thisCPU()>
c000dc27:	05 78 01 00 00       	add    eax,0x178
c000dc2c:	83 ec 04             	sub    esp,0x4
c000dc2f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000dc32:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000dc35:	50                   	push   eax
c000dc36:	e8 f5 db ff ff       	call   c000b830 <GDT::addEntry(GDTEntry)>
c000dc3b:	83 c4 10             	add    esp,0x10
c000dc3e:	89 c2                	mov    edx,eax
c000dc40:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dc43:	89 10                	mov    DWORD PTR [eax],edx
c000dc45:	e8 8c 6b 00 00       	call   c00147d6 <thisCPU()>
c000dc4a:	05 78 01 00 00       	add    eax,0x178
c000dc4f:	83 ec 0c             	sub    esp,0xc
c000dc52:	50                   	push   eax
c000dc53:	e8 1c dc ff ff       	call   c000b874 <GDT::flush()>
c000dc58:	83 c4 10             	add    esp,0x10
c000dc5b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dc5e:	8b 00                	mov    eax,DWORD PTR [eax]
c000dc60:	83 ec 08             	sub    esp,0x8
c000dc63:	50                   	push   eax
c000dc64:	68 d8 13 02 c0       	push   0xc00213d8
c000dc69:	e8 09 15 00 00       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c000dc6e:	83 c4 10             	add    esp,0x10
c000dc71:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dc74:	8b 00                	mov    eax,DWORD PTR [eax]
c000dc76:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000dc79:	c9                   	leave  
c000dc7a:	c3                   	ret    
c000dc7b:	90                   	nop

c000dc7c <ReservedFilename::read(unsigned long long, void*, int*)>:
c000dc7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dc80:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000dc84:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dc87:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000dc8c:	75 08                	jne    c000dc96 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c000dc8e:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000dc94:	eb 38                	jmp    c000dcce <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c000dc96:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000dc9b:	75 17                	jne    c000dcb4 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c000dc9d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000dca2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000dca5:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000dcab:	8b 10                	mov    edx,DWORD PTR [eax]
c000dcad:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000dcb1:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c000dcb4:	89 c1                	mov    ecx,eax
c000dcb6:	83 e1 fd             	and    ecx,0xfffffffd
c000dcb9:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c000dcbf:	74 cd                	je     c000dc8e <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000dcc1:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000dcc6:	83 e0 ef             	and    eax,0xffffffef
c000dcc9:	83 f8 08             	cmp    eax,0x8
c000dccc:	76 c0                	jbe    c000dc8e <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000dcce:	31 c0                	xor    eax,eax
c000dcd0:	c3                   	ret    
c000dcd1:	90                   	nop

c000dcd2 <ReservedFilename::isAtty()>:
c000dcd2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dcd6:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000dcd9:	31 c0                	xor    eax,eax
c000dcdb:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c000dce1:	74 09                	je     c000dcec <ReservedFilename::isAtty()+0x1a>
c000dce3:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c000dce9:	0f 94 c0             	sete   al
c000dcec:	c3                   	ret    
c000dced:	90                   	nop

c000dcee <ReservedFilename::write(unsigned long long, void*, int*)>:
c000dcee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dcf2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000dcf6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dcf9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000dcfd:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000dd02:	75 08                	jne    c000dd0c <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c000dd04:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000dd0a:	eb 3d                	jmp    c000dd49 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000dd0c:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000dd11:	75 17                	jne    c000dd2a <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c000dd13:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000dd18:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000dd1b:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000dd21:	8b 10                	mov    edx,DWORD PTR [eax]
c000dd23:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000dd27:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c000dd2a:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c000dd2f:	75 04                	jne    c000dd35 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c000dd31:	89 0a                	mov    DWORD PTR [edx],ecx
c000dd33:	eb 14                	jmp    c000dd49 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000dd35:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c000dd3a:	74 c8                	je     c000dd04 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000dd3c:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000dd41:	83 e0 ef             	and    eax,0xffffffef
c000dd44:	83 f8 08             	cmp    eax,0x8
c000dd47:	76 bb                	jbe    c000dd04 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000dd49:	31 c0                	xor    eax,eax
c000dd4b:	c3                   	ret    

c000dd4c <UnixFile::getFileDescriptor()>:
c000dd4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dd50:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dd53:	c3                   	ret    

c000dd54 <UnixFile::UnixFile(int)>:
c000dd54:	53                   	push   ebx
c000dd55:	83 ec 18             	sub    esp,0x18
c000dd58:	ba c4 14 02 c0       	mov    edx,0xc00214c4
c000dd5d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd61:	89 10                	mov    DWORD PTR [eax],edx
c000dd63:	81 7c 24 24 ff fe ff 0f 	cmp    DWORD PTR [esp+0x24],0xffffeff
c000dd6b:	0f 8f 4d 01 00 00    	jg     c000debe <UnixFile::UnixFile(int)+0x16a>
c000dd71:	a1 20 3a 02 c0       	mov    eax,ds:0xc0023a20
c000dd76:	8d 50 01             	lea    edx,[eax+0x1]
c000dd79:	89 15 20 3a 02 c0    	mov    DWORD PTR ds:0xc0023a20,edx
c000dd7f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000dd83:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000dd86:	83 ec 08             	sub    esp,0x8
c000dd89:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000dd8d:	68 d8 46 02 c0       	push   0xc00246d8
c000dd92:	e8 83 19 01 00       	call   c001f71a <LinkedList<UnixFile>::addElement(UnixFile*)>
c000dd97:	83 c4 10             	add    esp,0x10
c000dd9a:	a0 d4 46 02 c0       	mov    al,ds:0xc00246d4
c000dd9f:	83 f0 01             	xor    eax,0x1
c000dda2:	84 c0                	test   al,al
c000dda4:	0f 84 15 01 00 00    	je     c000debf <UnixFile::UnixFile(int)+0x16b>
c000ddaa:	c6 05 d4 46 02 c0 01 	mov    BYTE PTR ds:0xc00246d4,0x1
c000ddb1:	83 ec 0c             	sub    esp,0xc
c000ddb4:	6a 0c                	push   0xc
c000ddb6:	e8 87 12 00 00       	call   c000f042 <operator new(unsigned long)>
c000ddbb:	83 c4 10             	add    esp,0x10
c000ddbe:	89 c3                	mov    ebx,eax
c000ddc0:	83 ec 08             	sub    esp,0x8
c000ddc3:	68 03 ff ff 0f       	push   0xfffff03
c000ddc8:	53                   	push   ebx
c000ddc9:	e8 f6 00 00 00       	call   c000dec4 <ReservedFilename::ReservedFilename(int)>
c000ddce:	83 c4 10             	add    esp,0x10
c000ddd1:	89 1d cc 46 02 c0    	mov    DWORD PTR ds:0xc00246cc,ebx
c000ddd7:	83 ec 0c             	sub    esp,0xc
c000ddda:	6a 0c                	push   0xc
c000dddc:	e8 61 12 00 00       	call   c000f042 <operator new(unsigned long)>
c000dde1:	83 c4 10             	add    esp,0x10
c000dde4:	89 c3                	mov    ebx,eax
c000dde6:	83 ec 08             	sub    esp,0x8
c000dde9:	68 01 ff ff 0f       	push   0xfffff01
c000ddee:	53                   	push   ebx
c000ddef:	e8 d0 00 00 00       	call   c000dec4 <ReservedFilename::ReservedFilename(int)>
c000ddf4:	83 c4 10             	add    esp,0x10
c000ddf7:	89 1d d0 46 02 c0    	mov    DWORD PTR ds:0xc00246d0,ebx
c000ddfd:	83 ec 0c             	sub    esp,0xc
c000de00:	6a 0c                	push   0xc
c000de02:	e8 3b 12 00 00       	call   c000f042 <operator new(unsigned long)>
c000de07:	83 c4 10             	add    esp,0x10
c000de0a:	89 c3                	mov    ebx,eax
c000de0c:	83 ec 08             	sub    esp,0x8
c000de0f:	68 00 ff ff 0f       	push   0xfffff00
c000de14:	53                   	push   ebx
c000de15:	e8 aa 00 00 00       	call   c000dec4 <ReservedFilename::ReservedFilename(int)>
c000de1a:	83 c4 10             	add    esp,0x10
c000de1d:	89 1d c4 46 02 c0    	mov    DWORD PTR ds:0xc00246c4,ebx
c000de23:	83 ec 0c             	sub    esp,0xc
c000de26:	6a 0c                	push   0xc
c000de28:	e8 15 12 00 00       	call   c000f042 <operator new(unsigned long)>
c000de2d:	83 c4 10             	add    esp,0x10
c000de30:	89 c3                	mov    ebx,eax
c000de32:	83 ec 08             	sub    esp,0x8
c000de35:	68 02 ff ff 0f       	push   0xfffff02
c000de3a:	53                   	push   ebx
c000de3b:	e8 84 00 00 00       	call   c000dec4 <ReservedFilename::ReservedFilename(int)>
c000de40:	83 c4 10             	add    esp,0x10
c000de43:	89 1d c8 46 02 c0    	mov    DWORD PTR ds:0xc00246c8,ebx
c000de49:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000de51:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000de56:	7f 67                	jg     c000debf <UnixFile::UnixFile(int)+0x16b>
c000de58:	83 ec 0c             	sub    esp,0xc
c000de5b:	6a 0c                	push   0xc
c000de5d:	e8 e0 11 00 00       	call   c000f042 <operator new(unsigned long)>
c000de62:	83 c4 10             	add    esp,0x10
c000de65:	89 c3                	mov    ebx,eax
c000de67:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000de6b:	05 10 ff ff 0f       	add    eax,0xfffff10
c000de70:	83 ec 08             	sub    esp,0x8
c000de73:	50                   	push   eax
c000de74:	53                   	push   ebx
c000de75:	e8 4a 00 00 00       	call   c000dec4 <ReservedFilename::ReservedFilename(int)>
c000de7a:	83 c4 10             	add    esp,0x10
c000de7d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000de81:	89 1c 85 a0 46 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb960],ebx
c000de88:	83 ec 0c             	sub    esp,0xc
c000de8b:	6a 0c                	push   0xc
c000de8d:	e8 b0 11 00 00       	call   c000f042 <operator new(unsigned long)>
c000de92:	83 c4 10             	add    esp,0x10
c000de95:	89 c3                	mov    ebx,eax
c000de97:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000de9b:	05 20 ff ff 0f       	add    eax,0xfffff20
c000dea0:	83 ec 08             	sub    esp,0x8
c000dea3:	50                   	push   eax
c000dea4:	53                   	push   ebx
c000dea5:	e8 1a 00 00 00       	call   c000dec4 <ReservedFilename::ReservedFilename(int)>
c000deaa:	83 c4 10             	add    esp,0x10
c000dead:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000deb1:	89 1c 85 60 46 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb9a0],ebx
c000deb8:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000debc:	eb 93                	jmp    c000de51 <UnixFile::UnixFile(int)+0xfd>
c000debe:	90                   	nop
c000debf:	83 c4 18             	add    esp,0x18
c000dec2:	5b                   	pop    ebx
c000dec3:	c3                   	ret    

c000dec4 <ReservedFilename::ReservedFilename(int)>:
c000dec4:	83 ec 0c             	sub    esp,0xc
c000dec7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000decb:	83 ec 08             	sub    esp,0x8
c000dece:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ded2:	50                   	push   eax
c000ded3:	e8 7c fe ff ff       	call   c000dd54 <UnixFile::UnixFile(int)>
c000ded8:	83 c4 10             	add    esp,0x10
c000dedb:	ba e0 14 02 c0       	mov    edx,0xc00214e0
c000dee0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dee4:	89 10                	mov    DWORD PTR [eax],edx
c000dee6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000deea:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000deee:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000def1:	90                   	nop
c000def2:	83 c4 0c             	add    esp,0xc
c000def5:	c3                   	ret    

c000def6 <UnixFile::~UnixFile()>:
c000def6:	83 ec 1c             	sub    esp,0x1c
c000def9:	ba c4 14 02 c0       	mov    edx,0xc00214c4
c000defe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000df02:	89 10                	mov    DWORD PTR [eax],edx
c000df04:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000df08:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000df0b:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c000df10:	7f 73                	jg     c000df85 <UnixFile::~UnixFile()+0x8f>
c000df12:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000df1a:	83 ec 0c             	sub    esp,0xc
c000df1d:	68 d8 46 02 c0       	push   0xc00246d8
c000df22:	e8 c7 18 01 00       	call   c001f7ee <LinkedList<UnixFile>::getFirstElement()>
c000df27:	83 c4 10             	add    esp,0x10
c000df2a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df2e:	83 ec 0c             	sub    esp,0xc
c000df31:	68 d8 46 02 c0       	push   0xc00246d8
c000df36:	e8 bb 18 01 00       	call   c001f7f6 <LinkedList<UnixFile>::removeFirst()>
c000df3b:	83 c4 10             	add    esp,0x10
c000df3e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000df42:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000df46:	74 40                	je     c000df88 <UnixFile::~UnixFile()+0x92>
c000df48:	83 ec 08             	sub    esp,0x8
c000df4b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000df4f:	68 d8 46 02 c0       	push   0xc00246d8
c000df54:	e8 c1 17 01 00       	call   c001f71a <LinkedList<UnixFile>::addElement(UnixFile*)>
c000df59:	83 c4 10             	add    esp,0x10
c000df5c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000df60:	8d 50 01             	lea    edx,[eax+0x1]
c000df63:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df67:	3d 88 13 00 00       	cmp    eax,0x1388
c000df6c:	0f 94 c0             	sete   al
c000df6f:	84 c0                	test   al,al
c000df71:	74 a7                	je     c000df1a <UnixFile::~UnixFile()+0x24>
c000df73:	83 ec 0c             	sub    esp,0xc
c000df76:	68 9c 14 02 c0       	push   0xc002149c
c000df7b:	e8 c2 79 00 00       	call   c0015942 <Krnl::panic(char const*)>
c000df80:	83 c4 10             	add    esp,0x10
c000df83:	eb 95                	jmp    c000df1a <UnixFile::~UnixFile()+0x24>
c000df85:	90                   	nop
c000df86:	eb 01                	jmp    c000df89 <UnixFile::~UnixFile()+0x93>
c000df88:	90                   	nop
c000df89:	90                   	nop
c000df8a:	83 c4 1c             	add    esp,0x1c
c000df8d:	c3                   	ret    

c000df8e <UnixFile::~UnixFile()>:
c000df8e:	83 ec 0c             	sub    esp,0xc
c000df91:	83 ec 0c             	sub    esp,0xc
c000df94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df98:	e8 59 ff ff ff       	call   c000def6 <UnixFile::~UnixFile()>
c000df9d:	83 c4 10             	add    esp,0x10
c000dfa0:	83 ec 08             	sub    esp,0x8
c000dfa3:	6a 0c                	push   0xc
c000dfa5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfa9:	e8 a3 10 00 00       	call   c000f051 <operator delete(void*, unsigned long)>
c000dfae:	83 c4 10             	add    esp,0x10
c000dfb1:	83 c4 0c             	add    esp,0xc
c000dfb4:	c3                   	ret    
c000dfb5:	90                   	nop

c000dfb6 <ReservedFilename::~ReservedFilename()>:
c000dfb6:	83 ec 0c             	sub    esp,0xc
c000dfb9:	ba e0 14 02 c0       	mov    edx,0xc00214e0
c000dfbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfc2:	89 10                	mov    DWORD PTR [eax],edx
c000dfc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfc8:	83 ec 0c             	sub    esp,0xc
c000dfcb:	50                   	push   eax
c000dfcc:	e8 25 ff ff ff       	call   c000def6 <UnixFile::~UnixFile()>
c000dfd1:	83 c4 10             	add    esp,0x10
c000dfd4:	90                   	nop
c000dfd5:	83 c4 0c             	add    esp,0xc
c000dfd8:	c3                   	ret    
c000dfd9:	90                   	nop

c000dfda <ReservedFilename::~ReservedFilename()>:
c000dfda:	83 ec 0c             	sub    esp,0xc
c000dfdd:	83 ec 0c             	sub    esp,0xc
c000dfe0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfe4:	e8 cd ff ff ff       	call   c000dfb6 <ReservedFilename::~ReservedFilename()>
c000dfe9:	83 c4 10             	add    esp,0x10
c000dfec:	83 ec 08             	sub    esp,0x8
c000dfef:	6a 0c                	push   0xc
c000dff1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dff5:	e8 57 10 00 00       	call   c000f051 <operator delete(void*, unsigned long)>
c000dffa:	83 c4 10             	add    esp,0x10
c000dffd:	83 c4 0c             	add    esp,0xc
c000e000:	c3                   	ret    

c000e001 <getFromFileDescriptor(int)>:
c000e001:	53                   	push   ebx
c000e002:	83 ec 08             	sub    esp,0x8
c000e005:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e009:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c000e00f:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c000e015:	7f 2c                	jg     c000e043 <getFromFileDescriptor(int)+0x42>
c000e017:	83 ec 0c             	sub    esp,0xc
c000e01a:	68 d8 46 02 c0       	push   0xc00246d8
c000e01f:	e8 ca 17 01 00       	call   c001f7ee <LinkedList<UnixFile>::getFirstElement()>
c000e024:	83 c4 10             	add    esp,0x10
c000e027:	85 c0                	test   eax,eax
c000e029:	75 04                	jne    c000e02f <getFromFileDescriptor(int)+0x2e>
c000e02b:	31 c0                	xor    eax,eax
c000e02d:	eb 6e                	jmp    c000e09d <getFromFileDescriptor(int)+0x9c>
c000e02f:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c000e032:	74 69                	je     c000e09d <getFromFileDescriptor(int)+0x9c>
c000e034:	52                   	push   edx
c000e035:	52                   	push   edx
c000e036:	50                   	push   eax
c000e037:	68 d8 46 02 c0       	push   0xc00246d8
c000e03c:	e8 57 18 01 00       	call   c001f898 <LinkedList<UnixFile>::getNext(UnixFile*)>
c000e041:	eb e1                	jmp    c000e024 <getFromFileDescriptor(int)+0x23>
c000e043:	a1 cc 46 02 c0       	mov    eax,ds:0xc00246cc
c000e048:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c000e04e:	74 4d                	je     c000e09d <getFromFileDescriptor(int)+0x9c>
c000e050:	a1 d0 46 02 c0       	mov    eax,ds:0xc00246d0
c000e055:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c000e05b:	74 40                	je     c000e09d <getFromFileDescriptor(int)+0x9c>
c000e05d:	a1 c8 46 02 c0       	mov    eax,ds:0xc00246c8
c000e062:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c000e068:	74 33                	je     c000e09d <getFromFileDescriptor(int)+0x9c>
c000e06a:	a1 c4 46 02 c0       	mov    eax,ds:0xc00246c4
c000e06f:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c000e075:	74 26                	je     c000e09d <getFromFileDescriptor(int)+0x9c>
c000e077:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c000e07d:	83 f8 08             	cmp    eax,0x8
c000e080:	77 09                	ja     c000e08b <getFromFileDescriptor(int)+0x8a>
c000e082:	8b 04 85 a0 46 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb960]
c000e089:	eb 12                	jmp    c000e09d <getFromFileDescriptor(int)+0x9c>
c000e08b:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c000e091:	83 fb 08             	cmp    ebx,0x8
c000e094:	77 95                	ja     c000e02b <getFromFileDescriptor(int)+0x2a>
c000e096:	8b 04 9d 60 46 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdb9a0]
c000e09d:	83 c4 08             	add    esp,0x8
c000e0a0:	5b                   	pop    ebx
c000e0a1:	c3                   	ret    

c000e0a2 <__static_initialization_and_destruction_0(int, int)>:
c000e0a2:	83 ec 0c             	sub    esp,0xc
c000e0a5:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000e0aa:	75 34                	jne    c000e0e0 <__static_initialization_and_destruction_0(int, int)+0x3e>
c000e0ac:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000e0b4:	75 2a                	jne    c000e0e0 <__static_initialization_and_destruction_0(int, int)+0x3e>
c000e0b6:	83 ec 0c             	sub    esp,0xc
c000e0b9:	68 d8 46 02 c0       	push   0xc00246d8
c000e0be:	e8 ff 15 01 00       	call   c001f6c2 <LinkedList<UnixFile>::LinkedList()>
c000e0c3:	83 c4 10             	add    esp,0x10
c000e0c6:	83 ec 04             	sub    esp,0x4
c000e0c9:	68 9c 39 02 c0       	push   0xc002399c
c000e0ce:	68 d8 46 02 c0       	push   0xc00246d8
c000e0d3:	68 c0 f6 01 c0       	push   0xc001f6c0
c000e0d8:	e8 f0 0e 00 00       	call   c000efcd <__cxa_atexit>
c000e0dd:	83 c4 10             	add    esp,0x10
c000e0e0:	90                   	nop
c000e0e1:	83 c4 0c             	add    esp,0xc
c000e0e4:	c3                   	ret    

c000e0e5 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c000e0e5:	83 ec 0c             	sub    esp,0xc
c000e0e8:	83 ec 08             	sub    esp,0x8
c000e0eb:	68 ff ff 00 00       	push   0xffff
c000e0f0:	6a 01                	push   0x1
c000e0f2:	e8 ab ff ff ff       	call   c000e0a2 <__static_initialization_and_destruction_0(int, int)>
c000e0f7:	83 c4 10             	add    esp,0x10
c000e0fa:	83 c4 0c             	add    esp,0xc
c000e0fd:	c3                   	ret    

c000e0fe <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c000e0fe:	53                   	push   ebx
c000e0ff:	8b 15 28 3a 02 c0    	mov    edx,DWORD PTR ds:0xc0023a28
c000e105:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e109:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000e10d:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c000e113:	89 c8                	mov    eax,ecx
c000e115:	d1 e8                	shr    eax,1
c000e117:	01 d0                	add    eax,edx
c000e119:	83 e1 01             	and    ecx,0x1
c000e11c:	8a 10                	mov    dl,BYTE PTR [eax]
c000e11e:	75 09                	jne    c000e129 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c000e120:	83 e2 f0             	and    edx,0xfffffff0
c000e123:	09 da                	or     edx,ebx
c000e125:	88 10                	mov    BYTE PTR [eax],dl
c000e127:	5b                   	pop    ebx
c000e128:	c3                   	ret    
c000e129:	c1 e3 04             	shl    ebx,0x4
c000e12c:	83 e2 0f             	and    edx,0xf
c000e12f:	09 da                	or     edx,ebx
c000e131:	88 10                	mov    BYTE PTR [eax],dl
c000e133:	5b                   	pop    ebx
c000e134:	c3                   	ret    

c000e135 <Virt::getPageState(unsigned long)>:
c000e135:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e139:	8b 0d 28 3a 02 c0    	mov    ecx,DWORD PTR ds:0xc0023a28
c000e13f:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c000e145:	89 d0                	mov    eax,edx
c000e147:	d1 e8                	shr    eax,1
c000e149:	8a 0c 01             	mov    cl,BYTE PTR [ecx+eax*1]
c000e14c:	88 c8                	mov    al,cl
c000e14e:	c0 e8 04             	shr    al,0x4
c000e151:	83 e2 01             	and    edx,0x1
c000e154:	75 05                	jne    c000e15b <Virt::getPageState(unsigned long)+0x26>
c000e156:	88 c8                	mov    al,cl
c000e158:	83 e0 0f             	and    eax,0xf
c000e15b:	c3                   	ret    

c000e15c <Virt::allocateKernelVirtualPages(int)>:
c000e15c:	55                   	push   ebp
c000e15d:	31 ed                	xor    ebp,ebp
c000e15f:	57                   	push   edi
c000e160:	56                   	push   esi
c000e161:	53                   	push   ebx
c000e162:	31 db                	xor    ebx,ebx
c000e164:	83 ec 1c             	sub    esp,0x1c
c000e167:	8b 3d 24 3a 02 c0    	mov    edi,DWORD PTR ds:0xc0023a24
c000e16d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000e171:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000e176:	57                   	push   edi
c000e177:	e8 b9 ff ff ff       	call   c000e135 <Virt::getPageState(unsigned long)>
c000e17c:	5a                   	pop    edx
c000e17d:	84 c0                	test   al,al
c000e17f:	75 3a                	jne    c000e1bb <Virt::allocateKernelVirtualPages(int)+0x5f>
c000e181:	85 db                	test   ebx,ebx
c000e183:	75 02                	jne    c000e187 <Virt::allocateKernelVirtualPages(int)+0x2b>
c000e185:	89 fd                	mov    ebp,edi
c000e187:	43                   	inc    ebx
c000e188:	39 f3                	cmp    ebx,esi
c000e18a:	74 5a                	je     c000e1e6 <Virt::allocateKernelVirtualPages(int)+0x8a>
c000e18c:	47                   	inc    edi
c000e18d:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000e193:	76 31                	jbe    c000e1c6 <Virt::allocateKernelVirtualPages(int)+0x6a>
c000e195:	c7 05 24 3a 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0023a24,0xc8000
c000e19f:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000e1a4:	75 28                	jne    c000e1ce <Virt::allocateKernelVirtualPages(int)+0x72>
c000e1a6:	bf 00 80 0c 00       	mov    edi,0xc8000
c000e1ab:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000e1b0:	57                   	push   edi
c000e1b1:	e8 7f ff ff ff       	call   c000e135 <Virt::getPageState(unsigned long)>
c000e1b6:	5a                   	pop    edx
c000e1b7:	84 c0                	test   al,al
c000e1b9:	74 c6                	je     c000e181 <Virt::allocateKernelVirtualPages(int)+0x25>
c000e1bb:	47                   	inc    edi
c000e1bc:	31 db                	xor    ebx,ebx
c000e1be:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000e1c4:	77 cf                	ja     c000e195 <Virt::allocateKernelVirtualPages(int)+0x39>
c000e1c6:	89 3d 24 3a 02 c0    	mov    DWORD PTR ds:0xc0023a24,edi
c000e1cc:	eb a8                	jmp    c000e176 <Virt::allocateKernelVirtualPages(int)+0x1a>
c000e1ce:	83 ec 0c             	sub    esp,0xc
c000e1d1:	68 f4 14 02 c0       	push   0xc00214f4
c000e1d6:	e8 67 77 00 00       	call   c0015942 <Krnl::panic(char const*)>
c000e1db:	8b 3d 24 3a 02 c0    	mov    edi,DWORD PTR ds:0xc0023a24
c000e1e1:	83 c4 10             	add    esp,0x10
c000e1e4:	eb 90                	jmp    c000e176 <Virt::allocateKernelVirtualPages(int)+0x1a>
c000e1e6:	89 2d 24 3a 02 c0    	mov    DWORD PTR ds:0xc0023a24,ebp
c000e1ec:	4b                   	dec    ebx
c000e1ed:	74 5f                	je     c000e24e <Virt::allocateKernelVirtualPages(int)+0xf2>
c000e1ef:	85 f6                	test   esi,esi
c000e1f1:	74 3d                	je     c000e230 <Virt::allocateKernelVirtualPages(int)+0xd4>
c000e1f3:	89 e8                	mov    eax,ebp
c000e1f5:	31 db                	xor    ebx,ebx
c000e1f7:	8d 7e ff             	lea    edi,[esi-0x1]
c000e1fa:	eb 14                	jmp    c000e210 <Virt::allocateKernelVirtualPages(int)+0xb4>
c000e1fc:	6a 01                	push   0x1
c000e1fe:	43                   	inc    ebx
c000e1ff:	50                   	push   eax
c000e200:	e8 f9 fe ff ff       	call   c000e0fe <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e205:	58                   	pop    eax
c000e206:	39 f3                	cmp    ebx,esi
c000e208:	5a                   	pop    edx
c000e209:	74 25                	je     c000e230 <Virt::allocateKernelVirtualPages(int)+0xd4>
c000e20b:	a1 24 3a 02 c0       	mov    eax,ds:0xc0023a24
c000e210:	8d 50 01             	lea    edx,[eax+0x1]
c000e213:	85 db                	test   ebx,ebx
c000e215:	89 15 24 3a 02 c0    	mov    DWORD PTR ds:0xc0023a24,edx
c000e21b:	74 20                	je     c000e23d <Virt::allocateKernelVirtualPages(int)+0xe1>
c000e21d:	39 df                	cmp    edi,ebx
c000e21f:	75 db                	jne    c000e1fc <Virt::allocateKernelVirtualPages(int)+0xa0>
c000e221:	6a 03                	push   0x3
c000e223:	43                   	inc    ebx
c000e224:	50                   	push   eax
c000e225:	e8 d4 fe ff ff       	call   c000e0fe <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e22a:	59                   	pop    ecx
c000e22b:	39 f3                	cmp    ebx,esi
c000e22d:	58                   	pop    eax
c000e22e:	75 db                	jne    c000e20b <Virt::allocateKernelVirtualPages(int)+0xaf>
c000e230:	83 c4 1c             	add    esp,0x1c
c000e233:	89 e8                	mov    eax,ebp
c000e235:	c1 e0 0c             	shl    eax,0xc
c000e238:	5b                   	pop    ebx
c000e239:	5e                   	pop    esi
c000e23a:	5f                   	pop    edi
c000e23b:	5d                   	pop    ebp
c000e23c:	c3                   	ret    
c000e23d:	6a 02                	push   0x2
c000e23f:	bb 01 00 00 00       	mov    ebx,0x1
c000e244:	50                   	push   eax
c000e245:	e8 b4 fe ff ff       	call   c000e0fe <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e24a:	58                   	pop    eax
c000e24b:	5a                   	pop    edx
c000e24c:	eb bd                	jmp    c000e20b <Virt::allocateKernelVirtualPages(int)+0xaf>
c000e24e:	6a 04                	push   0x4
c000e250:	8d 45 01             	lea    eax,[ebp+0x1]
c000e253:	55                   	push   ebp
c000e254:	a3 24 3a 02 c0       	mov    ds:0xc0023a24,eax
c000e259:	e8 a0 fe ff ff       	call   c000e0fe <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e25e:	59                   	pop    ecx
c000e25f:	5b                   	pop    ebx
c000e260:	89 e8                	mov    eax,ebp
c000e262:	c1 e0 0c             	shl    eax,0xc
c000e265:	83 c4 1c             	add    esp,0x1c
c000e268:	5b                   	pop    ebx
c000e269:	5e                   	pop    esi
c000e26a:	5f                   	pop    edi
c000e26b:	5d                   	pop    ebp
c000e26c:	c3                   	ret    

c000e26d <Virt::virtualMemorySetup()>:
c000e26d:	53                   	push   ebx
c000e26e:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000e273:	83 ec 08             	sub    esp,0x8
c000e276:	6a 0f                	push   0xf
c000e278:	53                   	push   ebx
c000e279:	43                   	inc    ebx
c000e27a:	e8 7f fe ff ff       	call   c000e0fe <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e27f:	59                   	pop    ecx
c000e280:	58                   	pop    eax
c000e281:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000e287:	75 ed                	jne    c000e276 <Virt::virtualMemorySetup()+0x9>
c000e289:	50                   	push   eax
c000e28a:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000e28f:	50                   	push   eax
c000e290:	68 00 00 00 c8       	push   0xc8000000
c000e295:	68 7b 16 02 c0       	push   0xc002167b
c000e29a:	e8 d8 0e 00 00       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c000e29f:	58                   	pop    eax
c000e2a0:	5a                   	pop    edx
c000e2a1:	68 00 f0 ff ef       	push   0xeffff000
c000e2a6:	68 8f 16 02 c0       	push   0xc002168f
c000e2ab:	e8 c7 0e 00 00       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c000e2b0:	83 c4 10             	add    esp,0x10
c000e2b3:	50                   	push   eax
c000e2b4:	50                   	push   eax
c000e2b5:	6a 00                	push   0x0
c000e2b7:	53                   	push   ebx
c000e2b8:	43                   	inc    ebx
c000e2b9:	e8 40 fe ff ff       	call   c000e0fe <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e2be:	83 c4 10             	add    esp,0x10
c000e2c1:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000e2c7:	75 ea                	jne    c000e2b3 <Virt::virtualMemorySetup()+0x46>
c000e2c9:	bb 00 00 0d 00       	mov    ebx,0xd0000
c000e2ce:	51                   	push   ecx
c000e2cf:	51                   	push   ecx
c000e2d0:	6a 0f                	push   0xf
c000e2d2:	53                   	push   ebx
c000e2d3:	43                   	inc    ebx
c000e2d4:	e8 25 fe ff ff       	call   c000e0fe <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e2d9:	83 c4 10             	add    esp,0x10
c000e2dc:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c000e2e2:	75 ea                	jne    c000e2ce <Virt::virtualMemorySetup()+0x61>
c000e2e4:	83 c4 08             	add    esp,0x8
c000e2e7:	5b                   	pop    ebx
c000e2e8:	c3                   	ret    

c000e2e9 <Virt::getAKernelVAS()>:
c000e2e9:	a1 e4 46 02 c0       	mov    eax,ds:0xc00246e4
c000e2ee:	c3                   	ret    

c000e2ef <Virt::setupPageSwapping(int)>:
c000e2ef:	57                   	push   edi
c000e2f0:	56                   	push   esi
c000e2f1:	53                   	push   ebx
c000e2f2:	83 ec 1c             	sub    esp,0x1c
c000e2f5:	68 14 01 00 00       	push   0x114
c000e2fa:	e8 43 0d 00 00       	call   c000f042 <operator new(unsigned long)>
c000e2ff:	83 c4 0c             	add    esp,0xc
c000e302:	8b 3d d4 59 02 c0    	mov    edi,DWORD PTR ds:0xc00259d4
c000e308:	89 c6                	mov    esi,eax
c000e30a:	57                   	push   edi
c000e30b:	68 a3 16 02 c0       	push   0xc00216a3
c000e310:	50                   	push   eax
c000e311:	e8 98 13 00 00       	call   c000f6ae <File::File(char const*, Process*)>
c000e316:	89 34 24             	mov    DWORD PTR [esp],esi
c000e319:	e8 6c 15 00 00       	call   c000f88a <File::unlink()>
c000e31e:	58                   	pop    eax
c000e31f:	5a                   	pop    edx
c000e320:	6a 12                	push   0x12
c000e322:	56                   	push   esi
c000e323:	e8 ea 13 00 00       	call   c000f712 <File::open(FileOpenMode)>
c000e328:	83 c4 10             	add    esp,0x10
c000e32b:	85 c0                	test   eax,eax
c000e32d:	0f 85 b6 00 00 00    	jne    c000e3e9 <Virt::setupPageSwapping(int)+0xfa>
c000e333:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000e337:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e33f:	c1 e3 08             	shl    ebx,0x8
c000e342:	83 ec 0c             	sub    esp,0xc
c000e345:	c1 fb 04             	sar    ebx,0x4
c000e348:	68 00 00 01 00       	push   0x10000
c000e34d:	e8 b7 dc ff ff       	call   c000c009 <malloc>
c000e352:	83 c4 0c             	add    esp,0xc
c000e355:	89 c7                	mov    edi,eax
c000e357:	68 00 00 01 00       	push   0x10000
c000e35c:	6a 00                	push   0x0
c000e35e:	50                   	push   eax
c000e35f:	e8 56 23 ff ff       	call   c00006ba <memset>
c000e364:	83 c4 10             	add    esp,0x10
c000e367:	4b                   	dec    ebx
c000e368:	83 fb ff             	cmp    ebx,0xffffffff
c000e36b:	74 4a                	je     c000e3b7 <Virt::setupPageSwapping(int)+0xc8>
c000e36d:	83 ec 0c             	sub    esp,0xc
c000e370:	8b 06                	mov    eax,DWORD PTR [esi]
c000e372:	8d 54 24 18          	lea    edx,[esp+0x18]
c000e376:	52                   	push   edx
c000e377:	57                   	push   edi
c000e378:	6a 00                	push   0x0
c000e37a:	68 00 00 01 00       	push   0x10000
c000e37f:	56                   	push   esi
c000e380:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000e383:	83 c4 20             	add    esp,0x20
c000e386:	85 c0                	test   eax,eax
c000e388:	75 4d                	jne    c000e3d7 <Virt::setupPageSwapping(int)+0xe8>
c000e38a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e38e:	3d 00 00 01 00       	cmp    eax,0x10000
c000e393:	74 d2                	je     c000e367 <Virt::setupPageSwapping(int)+0x78>
c000e395:	52                   	push   edx
c000e396:	4b                   	dec    ebx
c000e397:	52                   	push   edx
c000e398:	50                   	push   eax
c000e399:	68 f6 16 02 c0       	push   0xc00216f6
c000e39e:	e8 d4 0d 00 00       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c000e3a3:	c7 04 24 ff 16 02 c0 	mov    DWORD PTR [esp],0xc00216ff
c000e3aa:	e8 93 75 00 00       	call   c0015942 <Krnl::panic(char const*)>
c000e3af:	83 c4 10             	add    esp,0x10
c000e3b2:	83 fb ff             	cmp    ebx,0xffffffff
c000e3b5:	75 b6                	jne    c000e36d <Virt::setupPageSwapping(int)+0x7e>
c000e3b7:	83 ec 0c             	sub    esp,0xc
c000e3ba:	56                   	push   esi
c000e3bb:	e8 b0 13 00 00       	call   c000f770 <File::close()>
c000e3c0:	89 3c 24             	mov    DWORD PTR [esp],edi
c000e3c3:	e8 61 dc ff ff       	call   c000c029 <rfree>
c000e3c8:	8b 06                	mov    eax,DWORD PTR [esi]
c000e3ca:	89 34 24             	mov    DWORD PTR [esp],esi
c000e3cd:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000e3d0:	83 c4 20             	add    esp,0x20
c000e3d3:	5b                   	pop    ebx
c000e3d4:	5e                   	pop    esi
c000e3d5:	5f                   	pop    edi
c000e3d6:	c3                   	ret    
c000e3d7:	51                   	push   ecx
c000e3d8:	51                   	push   ecx
c000e3d9:	50                   	push   eax
c000e3da:	68 de 16 02 c0       	push   0xc00216de
c000e3df:	e8 93 0d 00 00       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c000e3e4:	83 c4 10             	add    esp,0x10
c000e3e7:	eb a1                	jmp    c000e38a <Virt::setupPageSwapping(int)+0x9b>
c000e3e9:	53                   	push   ebx
c000e3ea:	53                   	push   ebx
c000e3eb:	50                   	push   eax
c000e3ec:	68 ba 16 02 c0       	push   0xc00216ba
c000e3f1:	e8 81 0d 00 00       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c000e3f6:	c7 04 24 c3 16 02 c0 	mov    DWORD PTR [esp],0xc00216c3
c000e3fd:	e8 40 75 00 00       	call   c0015942 <Krnl::panic(char const*)>
c000e402:	83 c4 10             	add    esp,0x10
c000e405:	e9 29 ff ff ff       	jmp    c000e333 <Virt::setupPageSwapping(int)+0x44>

c000e40a <VAS::VAS()>:
c000e40a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e40e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e415:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e419:	a3 e4 46 02 c0       	mov    ds:0xc00246e4,eax
c000e41e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e422:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c000e426:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e42a:	c6 00 01             	mov    BYTE PTR [eax],0x1
c000e42d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e431:	c7 40 08 00 10 00 c2 	mov    DWORD PTR [eax+0x8],0xc2001000
c000e438:	90                   	nop
c000e439:	c3                   	ret    

c000e43a <VAS::VAS(VAS*)>:
c000e43a:	83 ec 0c             	sub    esp,0xc
c000e43d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e441:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e448:	83 ec 0c             	sub    esp,0xc
c000e44b:	68 14 15 02 c0       	push   0xc0021514
c000e450:	e8 ed 74 00 00       	call   c0015942 <Krnl::panic(char const*)>
c000e455:	83 c4 10             	add    esp,0x10
c000e458:	90                   	nop
c000e459:	83 c4 0c             	add    esp,0xc
c000e45c:	c3                   	ret    
c000e45d:	90                   	nop

c000e45e <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c000e45e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e462:	89 c2                	mov    edx,eax
c000e464:	c1 ea 16             	shr    edx,0x16
c000e467:	c1 e8 0a             	shr    eax,0xa
c000e46a:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000e46f:	19 c9                	sbb    ecx,ecx
c000e471:	25 fc 0f 00 00       	and    eax,0xffc
c000e476:	c1 e2 0c             	shl    edx,0xc
c000e479:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c000e47f:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c000e486:	01 d0                	add    eax,edx
c000e488:	c3                   	ret    
c000e489:	90                   	nop

c000e48a <VAS::getPageTableEntry(unsigned long)>:
c000e48a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000e48e:	89 ca                	mov    edx,ecx
c000e490:	c1 ea 16             	shr    edx,0x16
c000e493:	c1 e9 0a             	shr    ecx,0xa
c000e496:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c000e49c:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c000e4a2:	c1 e0 0c             	shl    eax,0xc
c000e4a5:	8d 04 08             	lea    eax,[eax+ecx*1]
c000e4a8:	c3                   	ret    

c000e4a9 <Virt::freeKernelVirtualPages(unsigned long)>:
c000e4a9:	57                   	push   edi
c000e4aa:	56                   	push   esi
c000e4ab:	be 01 00 00 00       	mov    esi,0x1
c000e4b0:	53                   	push   ebx
c000e4b1:	83 ec 10             	sub    esp,0x10
c000e4b4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000e4b8:	c1 eb 0c             	shr    ebx,0xc
c000e4bb:	eb 3e                	jmp    c000e4fb <Virt::freeKernelVirtualPages(unsigned long)+0x52>
c000e4bd:	e8 27 fe ff ff       	call   c000e2e9 <Virt::getAKernelVAS()>
c000e4c2:	51                   	push   ecx
c000e4c3:	51                   	push   ecx
c000e4c4:	57                   	push   edi
c000e4c5:	50                   	push   eax
c000e4c6:	e8 bf ff ff ff       	call   c000e48a <VAS::getPageTableEntry(unsigned long)>
c000e4cb:	83 c4 10             	add    esp,0x10
c000e4ce:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000e4d2:	8b 00                	mov    eax,DWORD PTR [eax]
c000e4d4:	f6 c4 04             	test   ah,0x4
c000e4d7:	75 5f                	jne    c000e538 <Virt::freeKernelVirtualPages(unsigned long)+0x8f>
c000e4d9:	80 fa 04             	cmp    dl,0x4
c000e4dc:	74 78                	je     c000e556 <Virt::freeKernelVirtualPages(unsigned long)+0xad>
c000e4de:	80 fa 02             	cmp    dl,0x2
c000e4e1:	0f 84 88 00 00 00    	je     c000e56f <Virt::freeKernelVirtualPages(unsigned long)+0xc6>
c000e4e7:	80 fa 03             	cmp    dl,0x3
c000e4ea:	0f 84 ac 00 00 00    	je     c000e59c <Virt::freeKernelVirtualPages(unsigned long)+0xf3>
c000e4f0:	fe ca                	dec    dl
c000e4f2:	0f 84 92 00 00 00    	je     c000e58a <Virt::freeKernelVirtualPages(unsigned long)+0xe1>
c000e4f8:	43                   	inc    ebx
c000e4f9:	31 f6                	xor    esi,esi
c000e4fb:	53                   	push   ebx
c000e4fc:	e8 34 fc ff ff       	call   c000e135 <Virt::getPageState(unsigned long)>
c000e501:	5f                   	pop    edi
c000e502:	89 df                	mov    edi,ebx
c000e504:	c1 e7 0c             	shl    edi,0xc
c000e507:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000e50b:	84 c0                	test   al,al
c000e50d:	75 ae                	jne    c000e4bd <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c000e50f:	83 ec 0c             	sub    esp,0xc
c000e512:	68 05 17 02 c0       	push   0xc0021705
c000e517:	e8 26 74 00 00       	call   c0015942 <Krnl::panic(char const*)>
c000e51c:	e8 c8 fd ff ff       	call   c000e2e9 <Virt::getAKernelVAS()>
c000e521:	5a                   	pop    edx
c000e522:	59                   	pop    ecx
c000e523:	57                   	push   edi
c000e524:	50                   	push   eax
c000e525:	e8 60 ff ff ff       	call   c000e48a <VAS::getPageTableEntry(unsigned long)>
c000e52a:	83 c4 10             	add    esp,0x10
c000e52d:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000e531:	8b 00                	mov    eax,DWORD PTR [eax]
c000e533:	f6 c4 04             	test   ah,0x4
c000e536:	74 c0                	je     c000e4f8 <Virt::freeKernelVirtualPages(unsigned long)+0x4f>
c000e538:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c000e53c:	83 ec 0c             	sub    esp,0xc
c000e53f:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e544:	50                   	push   eax
c000e545:	e8 08 e0 ff ff       	call   c000c552 <Phys::freePage(unsigned long)>
c000e54a:	83 c4 10             	add    esp,0x10
c000e54d:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000e551:	80 fa 04             	cmp    dl,0x4
c000e554:	75 88                	jne    c000e4de <Virt::freeKernelVirtualPages(unsigned long)+0x35>
c000e556:	89 f0                	mov    eax,esi
c000e558:	84 c0                	test   al,al
c000e55a:	75 46                	jne    c000e5a2 <Virt::freeKernelVirtualPages(unsigned long)+0xf9>
c000e55c:	c7 44 24 20 38 15 02 c0 	mov    DWORD PTR [esp+0x20],0xc0021538
c000e564:	83 c4 10             	add    esp,0x10
c000e567:	5b                   	pop    ebx
c000e568:	5e                   	pop    esi
c000e569:	5f                   	pop    edi
c000e56a:	e9 d3 73 00 00       	jmp    c0015942 <Krnl::panic(char const*)>
c000e56f:	89 f0                	mov    eax,esi
c000e571:	84 c0                	test   al,al
c000e573:	75 15                	jne    c000e58a <Virt::freeKernelVirtualPages(unsigned long)+0xe1>
c000e575:	83 ec 0c             	sub    esp,0xc
c000e578:	68 21 17 02 c0       	push   0xc0021721
c000e57d:	e8 c0 73 00 00       	call   c0015942 <Krnl::panic(char const*)>
c000e582:	83 c4 10             	add    esp,0x10
c000e585:	e9 6e ff ff ff       	jmp    c000e4f8 <Virt::freeKernelVirtualPages(unsigned long)+0x4f>
c000e58a:	50                   	push   eax
c000e58b:	50                   	push   eax
c000e58c:	6a 00                	push   0x0
c000e58e:	53                   	push   ebx
c000e58f:	e8 6a fb ff ff       	call   c000e0fe <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e594:	83 c4 10             	add    esp,0x10
c000e597:	e9 5c ff ff ff       	jmp    c000e4f8 <Virt::freeKernelVirtualPages(unsigned long)+0x4f>
c000e59c:	89 f0                	mov    eax,esi
c000e59e:	84 c0                	test   al,al
c000e5a0:	75 14                	jne    c000e5b6 <Virt::freeKernelVirtualPages(unsigned long)+0x10d>
c000e5a2:	52                   	push   edx
c000e5a3:	52                   	push   edx
c000e5a4:	6a 00                	push   0x0
c000e5a6:	53                   	push   ebx
c000e5a7:	e8 52 fb ff ff       	call   c000e0fe <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e5ac:	83 c4 10             	add    esp,0x10
c000e5af:	83 c4 10             	add    esp,0x10
c000e5b2:	5b                   	pop    ebx
c000e5b3:	5e                   	pop    esi
c000e5b4:	5f                   	pop    edi
c000e5b5:	c3                   	ret    
c000e5b6:	c7 44 24 20 3d 17 02 c0 	mov    DWORD PTR [esp+0x20],0xc002173d
c000e5be:	83 c4 10             	add    esp,0x10
c000e5c1:	5b                   	pop    ebx
c000e5c2:	5e                   	pop    esi
c000e5c3:	5f                   	pop    edi
c000e5c4:	e9 79 73 00 00       	jmp    c0015942 <Krnl::panic(char const*)>
c000e5c9:	90                   	nop

c000e5ca <VAS::freeAllocatedPages(unsigned long)>:
c000e5ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e5ce:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e5d2:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c000e5d6:	74 09                	je     c000e5e1 <VAS::freeAllocatedPages(unsigned long)+0x17>
c000e5d8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e5dc:	e9 c8 fe ff ff       	jmp    c000e4a9 <Virt::freeKernelVirtualPages(unsigned long)>
c000e5e1:	c7 44 24 04 5c 15 02 c0 	mov    DWORD PTR [esp+0x4],0xc002155c
c000e5e9:	e9 89 0b 00 00       	jmp    c000f177 <Dbg::kprintf(char const*, ...)>

c000e5ee <VAS::virtualToPhysical(unsigned long)>:
c000e5ee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e5f2:	50                   	push   eax
c000e5f3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e5f7:	52                   	push   edx
c000e5f8:	e8 8d fe ff ff       	call   c000e48a <VAS::getPageTableEntry(unsigned long)>
c000e5fd:	59                   	pop    ecx
c000e5fe:	8b 00                	mov    eax,DWORD PTR [eax]
c000e600:	5a                   	pop    edx
c000e601:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e606:	c3                   	ret    
c000e607:	90                   	nop

c000e608 <VAS::reflagRange(unsigned long, int, int, int)>:
c000e608:	55                   	push   ebp
c000e609:	57                   	push   edi
c000e60a:	56                   	push   esi
c000e60b:	53                   	push   ebx
c000e60c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e610:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000e614:	89 c3                	mov    ebx,eax
c000e616:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000e61a:	c1 e3 0c             	shl    ebx,0xc
c000e61d:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000e621:	01 f3                	add    ebx,esi
c000e623:	85 c0                	test   eax,eax
c000e625:	7e 1f                	jle    c000e646 <VAS::reflagRange(unsigned long, int, int, int)+0x3e>
c000e627:	56                   	push   esi
c000e628:	81 c6 00 10 00 00    	add    esi,0x1000
c000e62e:	55                   	push   ebp
c000e62f:	e8 56 fe ff ff       	call   c000e48a <VAS::getPageTableEntry(unsigned long)>
c000e634:	5a                   	pop    edx
c000e635:	59                   	pop    ecx
c000e636:	8b 08                	mov    ecx,DWORD PTR [eax]
c000e638:	21 f9                	and    ecx,edi
c000e63a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000e63e:	09 d1                	or     ecx,edx
c000e640:	39 f3                	cmp    ebx,esi
c000e642:	89 08                	mov    DWORD PTR [eax],ecx
c000e644:	75 e1                	jne    c000e627 <VAS::reflagRange(unsigned long, int, int, int)+0x1f>
c000e646:	5b                   	pop    ebx
c000e647:	5e                   	pop    esi
c000e648:	5f                   	pop    edi
c000e649:	5d                   	pop    ebp
c000e64a:	c3                   	ret    
c000e64b:	90                   	nop

c000e64c <VAS::setToWriteCombining(unsigned long, int)>:
c000e64c:	83 ec 0c             	sub    esp,0xc
c000e64f:	e8 82 61 00 00       	call   c00147d6 <thisCPU()>
c000e654:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c000e65b:	75 04                	jne    c000e661 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c000e65d:	83 c4 0c             	add    esp,0xc
c000e660:	c3                   	ret    
c000e661:	83 ec 0c             	sub    esp,0xc
c000e664:	68 80 00 00 00       	push   0x80
c000e669:	6a ff                	push   0xffffffff
c000e66b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e66f:	50                   	push   eax
c000e670:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e674:	52                   	push   edx
c000e675:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e679:	51                   	push   ecx
c000e67a:	e8 89 ff ff ff       	call   c000e608 <VAS::reflagRange(unsigned long, int, int, int)>
c000e67f:	83 c4 20             	add    esp,0x20
c000e682:	83 c4 0c             	add    esp,0xc
c000e685:	c3                   	ret    

c000e686 <VAS::mapOtherVASIn(bool, VAS*)>:
c000e686:	83 ec 0c             	sub    esp,0xc
c000e689:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e68d:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c000e692:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000e695:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e699:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000e69c:	19 c0                	sbb    eax,eax
c000e69e:	83 ca 03             	or     edx,0x3
c000e6a1:	83 e0 fc             	and    eax,0xfffffffc
c000e6a4:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c000e6ab:	e8 f5 0f 01 00       	call   c001f6a5 <CPU::readCR3()>
c000e6b0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e6b4:	83 c4 0c             	add    esp,0xc
c000e6b7:	e9 fb 0f 01 00       	jmp    c001f6b7 <CPU::writeCR3(unsigned long)>

c000e6bc <VAS::~VAS()>:
c000e6bc:	83 ec 2c             	sub    esp,0x2c
c000e6bf:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000e6c7:	e8 63 a2 00 00       	call   c001892f <lockScheduler()>
c000e6cc:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000e6d1:	8b 00                	mov    eax,DWORD PTR [eax]
c000e6d3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e6d6:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c000e6dc:	83 ec 04             	sub    esp,0x4
c000e6df:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000e6e3:	6a 01                	push   0x1
c000e6e5:	50                   	push   eax
c000e6e6:	e8 9b ff ff ff       	call   c000e686 <VAS::mapOtherVASIn(bool, VAS*)>
c000e6eb:	83 c4 10             	add    esp,0x10
c000e6ee:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000e6f6:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c000e6fe:	0f 8f d7 00 00 00    	jg     c000e7db <VAS::~VAS()+0x11f>
c000e704:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e708:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e70b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e70f:	c1 e2 02             	shl    edx,0x2
c000e712:	01 d0                	add    eax,edx
c000e714:	8b 00                	mov    eax,DWORD PTR [eax]
c000e716:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e71a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e71e:	83 e0 01             	and    eax,0x1
c000e721:	0f 84 ab 00 00 00    	je     c000e7d2 <VAS::~VAS()+0x116>
c000e727:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000e72f:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c000e737:	7f 75                	jg     c000e7ae <VAS::~VAS()+0xf2>
c000e739:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e73d:	c1 e0 0a             	shl    eax,0xa
c000e740:	89 c2                	mov    edx,eax
c000e742:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e746:	01 d0                	add    eax,edx
c000e748:	c1 e0 0c             	shl    eax,0xc
c000e74b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e74f:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000e754:	8b 00                	mov    eax,DWORD PTR [eax]
c000e756:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e759:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c000e75f:	83 ec 04             	sub    esp,0x4
c000e762:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e766:	6a 01                	push   0x1
c000e768:	50                   	push   eax
c000e769:	e8 f0 fc ff ff       	call   c000e45e <VAS::getForeignPageTableEntry(bool, unsigned long)>
c000e76e:	83 c4 10             	add    esp,0x10
c000e771:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e775:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e779:	8b 00                	mov    eax,DWORD PTR [eax]
c000e77b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e77f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e783:	25 01 04 00 00       	and    eax,0x401
c000e788:	3d 01 04 00 00       	cmp    eax,0x401
c000e78d:	75 19                	jne    c000e7a8 <VAS::~VAS()+0xec>
c000e78f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e793:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e798:	83 ec 0c             	sub    esp,0xc
c000e79b:	50                   	push   eax
c000e79c:	e8 b1 dd ff ff       	call   c000c552 <Phys::freePage(unsigned long)>
c000e7a1:	83 c4 10             	add    esp,0x10
c000e7a4:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000e7a8:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000e7ac:	eb 81                	jmp    c000e72f <VAS::~VAS()+0x73>
c000e7ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7b2:	25 00 04 00 00       	and    eax,0x400
c000e7b7:	74 19                	je     c000e7d2 <VAS::~VAS()+0x116>
c000e7b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7bd:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e7c2:	83 ec 0c             	sub    esp,0xc
c000e7c5:	50                   	push   eax
c000e7c6:	e8 87 dd ff ff       	call   c000c552 <Phys::freePage(unsigned long)>
c000e7cb:	83 c4 10             	add    esp,0x10
c000e7ce:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000e7d2:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000e7d6:	e9 1b ff ff ff       	jmp    c000e6f6 <VAS::~VAS()+0x3a>
c000e7db:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e7df:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e7e2:	83 ec 0c             	sub    esp,0xc
c000e7e5:	50                   	push   eax
c000e7e6:	e8 be fc ff ff       	call   c000e4a9 <Virt::freeKernelVirtualPages(unsigned long)>
c000e7eb:	83 c4 10             	add    esp,0x10
c000e7ee:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e7f2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e7f5:	83 ec 0c             	sub    esp,0xc
c000e7f8:	50                   	push   eax
c000e7f9:	e8 54 dd ff ff       	call   c000c552 <Phys::freePage(unsigned long)>
c000e7fe:	83 c4 10             	add    esp,0x10
c000e801:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000e805:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e809:	c1 e0 02             	shl    eax,0x2
c000e80c:	83 ec 08             	sub    esp,0x8
c000e80f:	50                   	push   eax
c000e810:	68 80 15 02 c0       	push   0xc0021580
c000e815:	e8 5d 09 00 00       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c000e81a:	83 c4 10             	add    esp,0x10
c000e81d:	e8 0f a1 00 00       	call   c0018931 <unlockScheduler()>
c000e822:	90                   	nop
c000e823:	83 c4 2c             	add    esp,0x2c
c000e826:	c3                   	ret    
c000e827:	90                   	nop

c000e828 <VAS::mapPage(unsigned long, unsigned long, int)>:
c000e828:	55                   	push   ebp
c000e829:	57                   	push   edi
c000e82a:	56                   	push   esi
c000e82b:	53                   	push   ebx
c000e82c:	83 ec 1c             	sub    esp,0x1c
c000e82f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000e833:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000e837:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c000e83d:	77 08                	ja     c000e847 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c000e83f:	0f 20 d8             	mov    eax,cr3
c000e842:	39 47 0c             	cmp    DWORD PTR [edi+0xc],eax
c000e845:	75 49                	jne    c000e890 <VAS::mapPage(unsigned long, unsigned long, int)+0x68>
c000e847:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e84b:	09 d8                	or     eax,ebx
c000e84d:	a9 ff 0f 00 00       	test   eax,0xfff
c000e852:	75 59                	jne    c000e8ad <VAS::mapPage(unsigned long, unsigned long, int)+0x85>
c000e854:	89 de                	mov    esi,ebx
c000e856:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e859:	c1 ee 16             	shr    esi,0x16
c000e85c:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c000e863:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c000e867:	74 56                	je     c000e8bf <VAS::mapPage(unsigned long, unsigned long, int)+0x97>
c000e869:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c000e86f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e873:	c1 eb 0a             	shr    ebx,0xa
c000e876:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000e87a:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c000e880:	09 d0                	or     eax,edx
c000e882:	c1 e6 0c             	shl    esi,0xc
c000e885:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c000e888:	83 c4 1c             	add    esp,0x1c
c000e88b:	5b                   	pop    ebx
c000e88c:	5e                   	pop    esi
c000e88d:	5f                   	pop    edi
c000e88e:	5d                   	pop    ebp
c000e88f:	c3                   	ret    
c000e890:	83 ec 0c             	sub    esp,0xc
c000e893:	68 a0 15 02 c0       	push   0xc00215a0
c000e898:	e8 da 08 00 00       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c000e89d:	83 c4 10             	add    esp,0x10
c000e8a0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e8a4:	09 d8                	or     eax,ebx
c000e8a6:	a9 ff 0f 00 00       	test   eax,0xfff
c000e8ab:	74 a7                	je     c000e854 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c000e8ad:	83 ec 0c             	sub    esp,0xc
c000e8b0:	68 08 16 02 c0       	push   0xc0021608
c000e8b5:	e8 88 70 00 00       	call   c0015942 <Krnl::panic(char const*)>
c000e8ba:	83 c4 10             	add    esp,0x10
c000e8bd:	eb 95                	jmp    c000e854 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c000e8bf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e8c3:	e8 17 dd ff ff       	call   c000c5df <Phys::allocatePage()>
c000e8c8:	89 c5                	mov    ebp,eax
c000e8ca:	e8 1a fa ff ff       	call   c000e2e9 <Virt::getAKernelVAS()>
c000e8cf:	83 ec 0c             	sub    esp,0xc
c000e8d2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e8d6:	6a 01                	push   0x1
c000e8d8:	e8 7f f8 ff ff       	call   c000e15c <Virt::allocateKernelVirtualPages(int)>
c000e8dd:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000e8e4:	6a 01                	push   0x1
c000e8e6:	50                   	push   eax
c000e8e7:	55                   	push   ebp
c000e8e8:	81 cd 07 04 00 00    	or     ebp,0x407
c000e8ee:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000e8f2:	51                   	push   ecx
c000e8f3:	e8 22 02 00 00       	call   c000eb1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e8f8:	83 c4 1c             	add    esp,0x1c
c000e8fb:	68 00 10 00 00       	push   0x1000
c000e900:	6a 00                	push   0x0
c000e902:	50                   	push   eax
c000e903:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e907:	e8 ae 1d ff ff       	call   c00006ba <memset>
c000e90c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000e910:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000e913:	e8 91 fb ff ff       	call   c000e4a9 <Virt::freeKernelVirtualPages(unsigned long)>
c000e918:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e91c:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e91f:	83 c4 10             	add    esp,0x10
c000e922:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c000e925:	e9 3f ff ff ff       	jmp    c000e869 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>

c000e92a <VAS::allocatePages(int, int)>:
c000e92a:	55                   	push   ebp
c000e92b:	57                   	push   edi
c000e92c:	56                   	push   esi
c000e92d:	53                   	push   ebx
c000e92e:	83 ec 1c             	sub    esp,0x1c
c000e931:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000e935:	e8 9c 5e 00 00       	call   c00147d6 <thisCPU()>
c000e93a:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000e940:	83 e0 01             	and    eax,0x1
c000e943:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000e947:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c000e94b:	0f 85 d5 00 00 00    	jne    c000ea26 <VAS::allocatePages(int, int)+0xfc>
c000e951:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000e954:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e958:	85 c0                	test   eax,eax
c000e95a:	0f 84 aa 00 00 00    	je     c000ea0a <VAS::allocatePages(int, int)+0xe0>
c000e960:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000e964:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000e968:	c1 e6 0c             	shl    esi,0xc
c000e96b:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000e96f:	01 de                	add    esi,ebx
c000e971:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e975:	81 cd 00 04 00 00    	or     ebp,0x400
c000e97b:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000e97e:	85 c0                	test   eax,eax
c000e980:	7e 25                	jle    c000e9a7 <VAS::allocatePages(int, int)+0x7d>
c000e982:	e8 58 dc ff ff       	call   c000c5df <Phys::allocatePage()>
c000e987:	55                   	push   ebp
c000e988:	53                   	push   ebx
c000e989:	50                   	push   eax
c000e98a:	57                   	push   edi
c000e98b:	e8 98 fe ff ff       	call   c000e828 <VAS::mapPage(unsigned long, unsigned long, int)>
c000e990:	83 c4 10             	add    esp,0x10
c000e993:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000e998:	74 03                	je     c000e99d <VAS::allocatePages(int, int)+0x73>
c000e99a:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000e99d:	81 c3 00 10 00 00    	add    ebx,0x1000
c000e9a3:	39 de                	cmp    esi,ebx
c000e9a5:	75 db                	jne    c000e982 <VAS::allocatePages(int, int)+0x58>
c000e9a7:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000e9ac:	74 3f                	je     c000e9ed <VAS::allocatePages(int, int)+0xc3>
c000e9ae:	c1 ee 0a             	shr    esi,0xa
c000e9b1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000e9b5:	c1 eb 0a             	shr    ebx,0xa
c000e9b8:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c000e9be:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000e9c4:	81 ee 00 00 40 00    	sub    esi,0x400000
c000e9ca:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000e9d0:	39 f3                	cmp    ebx,esi
c000e9d2:	77 0d                	ja     c000e9e1 <VAS::allocatePages(int, int)+0xb7>
c000e9d4:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000e9d7:	81 c3 00 10 00 00    	add    ebx,0x1000
c000e9dd:	39 de                	cmp    esi,ebx
c000e9df:	73 f3                	jae    c000e9d4 <VAS::allocatePages(int, int)+0xaa>
c000e9e1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e9e5:	83 c4 1c             	add    esp,0x1c
c000e9e8:	5b                   	pop    ebx
c000e9e9:	5e                   	pop    esi
c000e9ea:	5f                   	pop    edi
c000e9eb:	5d                   	pop    ebp
c000e9ec:	c3                   	ret    
c000e9ed:	e8 b3 0c 01 00       	call   c001f6a5 <CPU::readCR3()>
c000e9f2:	83 ec 0c             	sub    esp,0xc
c000e9f5:	50                   	push   eax
c000e9f6:	e8 bc 0c 01 00       	call   c001f6b7 <CPU::writeCR3(unsigned long)>
c000e9fb:	83 c4 10             	add    esp,0x10
c000e9fe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ea02:	83 c4 1c             	add    esp,0x1c
c000ea05:	5b                   	pop    ebx
c000ea06:	5e                   	pop    esi
c000ea07:	5f                   	pop    edi
c000ea08:	5d                   	pop    ebp
c000ea09:	c3                   	ret    
c000ea0a:	83 ec 0c             	sub    esp,0xc
c000ea0d:	68 2c 16 02 c0       	push   0xc002162c
c000ea12:	e8 2b 6f 00 00       	call   c0015942 <Krnl::panic(char const*)>
c000ea17:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000ea1a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ea1e:	83 c4 10             	add    esp,0x10
c000ea21:	e9 3a ff ff ff       	jmp    c000e960 <VAS::allocatePages(int, int)+0x36>
c000ea26:	83 ec 0c             	sub    esp,0xc
c000ea29:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000ea2d:	53                   	push   ebx
c000ea2e:	e8 29 f7 ff ff       	call   c000e15c <Virt::allocateKernelVirtualPages(int)>
c000ea33:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ea37:	83 c4 10             	add    esp,0x10
c000ea3a:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c000ea3f:	0f 87 94 00 00 00    	ja     c000ead9 <VAS::allocatePages(int, int)+0x1af>
c000ea45:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000ea49:	85 d2                	test   edx,edx
c000ea4b:	7e 3c                	jle    c000ea89 <VAS::allocatePages(int, int)+0x15f>
c000ea4d:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000ea51:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000ea55:	c1 e5 0c             	shl    ebp,0xc
c000ea58:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ea5c:	81 ce 00 04 00 00    	or     esi,0x400
c000ea62:	01 dd                	add    ebp,ebx
c000ea64:	e8 76 db ff ff       	call   c000c5df <Phys::allocatePage()>
c000ea69:	56                   	push   esi
c000ea6a:	53                   	push   ebx
c000ea6b:	50                   	push   eax
c000ea6c:	57                   	push   edi
c000ea6d:	e8 b6 fd ff ff       	call   c000e828 <VAS::mapPage(unsigned long, unsigned long, int)>
c000ea72:	83 c4 10             	add    esp,0x10
c000ea75:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000ea7a:	74 03                	je     c000ea7f <VAS::allocatePages(int, int)+0x155>
c000ea7c:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000ea7f:	81 c3 00 10 00 00    	add    ebx,0x1000
c000ea85:	39 dd                	cmp    ebp,ebx
c000ea87:	75 db                	jne    c000ea64 <VAS::allocatePages(int, int)+0x13a>
c000ea89:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000ea8e:	0f 84 59 ff ff ff    	je     c000e9ed <VAS::allocatePages(int, int)+0xc3>
c000ea94:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ea98:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ea9c:	c1 e0 0c             	shl    eax,0xc
c000ea9f:	89 d3                	mov    ebx,edx
c000eaa1:	c1 eb 0a             	shr    ebx,0xa
c000eaa4:	01 d0                	add    eax,edx
c000eaa6:	c1 e8 0a             	shr    eax,0xa
c000eaa9:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000eaaf:	25 00 f0 ff ff       	and    eax,0xfffff000
c000eab4:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000eaba:	2d 00 00 40 00       	sub    eax,0x400000
c000eabf:	39 c3                	cmp    ebx,eax
c000eac1:	0f 87 1a ff ff ff    	ja     c000e9e1 <VAS::allocatePages(int, int)+0xb7>
c000eac7:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000eaca:	81 c3 00 10 00 00    	add    ebx,0x1000
c000ead0:	39 d8                	cmp    eax,ebx
c000ead2:	73 f3                	jae    c000eac7 <VAS::allocatePages(int, int)+0x19d>
c000ead4:	e9 08 ff ff ff       	jmp    c000e9e1 <VAS::allocatePages(int, int)+0xb7>
c000ead9:	e8 f8 5c 00 00       	call   c00147d6 <thisCPU()>
c000eade:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c000eae5:	0f 84 5a ff ff ff    	je     c000ea45 <VAS::allocatePages(int, int)+0x11b>
c000eaeb:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000eaef:	80 cd 01             	or     ch,0x1
c000eaf2:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c000eaf6:	e9 4a ff ff ff       	jmp    c000ea45 <VAS::allocatePages(int, int)+0x11b>
c000eafb:	90                   	nop

c000eafc <VAS::setCPUSpecific(unsigned long)>:
c000eafc:	83 ec 0c             	sub    esp,0xc
c000eaff:	6a 05                	push   0x5
c000eb01:	68 00 00 40 c2       	push   0xc2400000
c000eb06:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000eb0a:	50                   	push   eax
c000eb0b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000eb0f:	52                   	push   edx
c000eb10:	e8 13 fd ff ff       	call   c000e828 <VAS::mapPage(unsigned long, unsigned long, int)>
c000eb15:	83 c4 1c             	add    esp,0x1c
c000eb18:	c3                   	ret    
c000eb19:	90                   	nop

c000eb1a <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c000eb1a:	55                   	push   ebp
c000eb1b:	57                   	push   edi
c000eb1c:	56                   	push   esi
c000eb1d:	53                   	push   ebx
c000eb1e:	83 ec 1c             	sub    esp,0x1c
c000eb21:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000eb25:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000eb29:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c000eb2d:	e8 a4 5c 00 00       	call   c00147d6 <thisCPU()>
c000eb32:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000eb38:	83 e0 01             	and    eax,0x1
c000eb3b:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000eb3f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eb43:	85 c0                	test   eax,eax
c000eb45:	7e 39                	jle    c000eb80 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x66>
c000eb47:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eb4b:	89 f3                	mov    ebx,esi
c000eb4d:	c1 e0 0c             	shl    eax,0xc
c000eb50:	01 f0                	add    eax,esi
c000eb52:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000eb56:	55                   	push   ebp
c000eb57:	53                   	push   ebx
c000eb58:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eb5c:	29 f0                	sub    eax,esi
c000eb5e:	01 d8                	add    eax,ebx
c000eb60:	50                   	push   eax
c000eb61:	57                   	push   edi
c000eb62:	e8 c1 fc ff ff       	call   c000e828 <VAS::mapPage(unsigned long, unsigned long, int)>
c000eb67:	83 c4 10             	add    esp,0x10
c000eb6a:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000eb6f:	74 03                	je     c000eb74 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x5a>
c000eb71:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000eb74:	81 c3 00 10 00 00    	add    ebx,0x1000
c000eb7a:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c000eb7e:	75 d6                	jne    c000eb56 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x3c>
c000eb80:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000eb85:	74 42                	je     c000ebc9 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xaf>
c000eb87:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eb8b:	89 f3                	mov    ebx,esi
c000eb8d:	c1 e0 0c             	shl    eax,0xc
c000eb90:	c1 eb 0a             	shr    ebx,0xa
c000eb93:	01 f0                	add    eax,esi
c000eb95:	c1 e8 0a             	shr    eax,0xa
c000eb98:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000eb9e:	25 00 f0 ff ff       	and    eax,0xfffff000
c000eba3:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000eba9:	2d 00 00 40 00       	sub    eax,0x400000
c000ebae:	39 c3                	cmp    ebx,eax
c000ebb0:	77 0d                	ja     c000ebbf <VAS::mapRange(unsigned long, unsigned long, int, int)+0xa5>
c000ebb2:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000ebb5:	81 c3 00 10 00 00    	add    ebx,0x1000
c000ebbb:	39 d8                	cmp    eax,ebx
c000ebbd:	73 f3                	jae    c000ebb2 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x98>
c000ebbf:	83 c4 1c             	add    esp,0x1c
c000ebc2:	89 f0                	mov    eax,esi
c000ebc4:	5b                   	pop    ebx
c000ebc5:	5e                   	pop    esi
c000ebc6:	5f                   	pop    edi
c000ebc7:	5d                   	pop    ebp
c000ebc8:	c3                   	ret    
c000ebc9:	e8 d7 0a 01 00       	call   c001f6a5 <CPU::readCR3()>
c000ebce:	83 ec 0c             	sub    esp,0xc
c000ebd1:	50                   	push   eax
c000ebd2:	e8 e0 0a 01 00       	call   c001f6b7 <CPU::writeCR3(unsigned long)>
c000ebd7:	83 c4 10             	add    esp,0x10
c000ebda:	89 f0                	mov    eax,esi
c000ebdc:	83 c4 1c             	add    esp,0x1c
c000ebdf:	5b                   	pop    ebx
c000ebe0:	5e                   	pop    esi
c000ebe1:	5f                   	pop    edi
c000ebe2:	5d                   	pop    ebp
c000ebe3:	c3                   	ret    

c000ebe4 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c000ebe4:	55                   	push   ebp
c000ebe5:	57                   	push   edi
c000ebe6:	56                   	push   esi
c000ebe7:	53                   	push   ebx
c000ebe8:	83 ec 1c             	sub    esp,0x1c
c000ebeb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ebef:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000ebf3:	09 f0                	or     eax,esi
c000ebf5:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000ebf9:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000ebfd:	a9 ff 0f 00 00       	test   eax,0xfff
c000ec02:	75 4c                	jne    c000ec50 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6c>
c000ec04:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000ec08:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ec0b:	c1 eb 16             	shr    ebx,0x16
c000ec0e:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c000ec15:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c000ec19:	74 4f                	je     c000ec6a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x86>
c000ec1b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ec1f:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c000ec23:	c1 e8 0a             	shr    eax,0xa
c000ec26:	80 fa 01             	cmp    dl,0x1
c000ec29:	19 d2                	sbb    edx,edx
c000ec2b:	25 fc 0f 00 00       	and    eax,0xffc
c000ec30:	c1 e3 0c             	shl    ebx,0xc
c000ec33:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c000ec39:	01 d8                	add    eax,ebx
c000ec3b:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000ec3f:	09 d9                	or     ecx,ebx
c000ec41:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c000ec48:	83 c4 1c             	add    esp,0x1c
c000ec4b:	5b                   	pop    ebx
c000ec4c:	5e                   	pop    esi
c000ec4d:	5f                   	pop    edi
c000ec4e:	5d                   	pop    ebp
c000ec4f:	c3                   	ret    
c000ec50:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000ec54:	83 ec 0c             	sub    esp,0xc
c000ec57:	68 58 16 02 c0       	push   0xc0021658
c000ec5c:	e8 e1 6c 00 00       	call   c0015942 <Krnl::panic(char const*)>
c000ec61:	83 c4 10             	add    esp,0x10
c000ec64:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ec68:	eb 9a                	jmp    c000ec04 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x20>
c000ec6a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ec6e:	e8 6c d9 ff ff       	call   c000c5df <Phys::allocatePage()>
c000ec73:	89 c5                	mov    ebp,eax
c000ec75:	e8 6f f6 ff ff       	call   c000e2e9 <Virt::getAKernelVAS()>
c000ec7a:	83 ec 0c             	sub    esp,0xc
c000ec7d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ec81:	6a 01                	push   0x1
c000ec83:	e8 d4 f4 ff ff       	call   c000e15c <Virt::allocateKernelVirtualPages(int)>
c000ec88:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000ec8f:	6a 01                	push   0x1
c000ec91:	50                   	push   eax
c000ec92:	55                   	push   ebp
c000ec93:	81 cd 07 04 00 00    	or     ebp,0x407
c000ec99:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000ec9d:	51                   	push   ecx
c000ec9e:	e8 77 fe ff ff       	call   c000eb1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000eca3:	83 c4 1c             	add    esp,0x1c
c000eca6:	68 00 10 00 00       	push   0x1000
c000ecab:	6a 00                	push   0x0
c000ecad:	50                   	push   eax
c000ecae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ecb2:	e8 03 1a ff ff       	call   c00006ba <memset>
c000ecb7:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000ecbb:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000ecbe:	e8 e6 f7 ff ff       	call   c000e4a9 <Virt::freeKernelVirtualPages(unsigned long)>
c000ecc3:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ecc6:	83 c4 10             	add    esp,0x10
c000ecc9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000eccd:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c000ecd0:	e9 46 ff ff ff       	jmp    c000ec1b <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x37>
c000ecd5:	90                   	nop

c000ecd6 <VAS::VAS(bool)>:
c000ecd6:	53                   	push   ebx
c000ecd7:	83 ec 28             	sub    esp,0x28
c000ecda:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ecde:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000ece2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ece6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000eced:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ecf1:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000ecf5:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000ecf8:	e8 e2 d8 ff ff       	call   c000c5df <Phys::allocatePage()>
c000ecfd:	89 c2                	mov    edx,eax
c000ecff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ed03:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000ed06:	e8 de f5 ff ff       	call   c000e2e9 <Virt::getAKernelVAS()>
c000ed0b:	89 c3                	mov    ebx,eax
c000ed0d:	83 ec 0c             	sub    esp,0xc
c000ed10:	6a 01                	push   0x1
c000ed12:	e8 45 f4 ff ff       	call   c000e15c <Virt::allocateKernelVirtualPages(int)>
c000ed17:	83 c4 10             	add    esp,0x10
c000ed1a:	89 c2                	mov    edx,eax
c000ed1c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ed20:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ed23:	83 ec 0c             	sub    esp,0xc
c000ed26:	6a 03                	push   0x3
c000ed28:	6a 01                	push   0x1
c000ed2a:	52                   	push   edx
c000ed2b:	50                   	push   eax
c000ed2c:	53                   	push   ebx
c000ed2d:	e8 e8 fd ff ff       	call   c000eb1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ed32:	83 c4 20             	add    esp,0x20
c000ed35:	89 c2                	mov    edx,eax
c000ed37:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ed3b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000ed3e:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000ed46:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000ed4e:	7f 1c                	jg     c000ed6c <VAS::VAS(bool)+0x96>
c000ed50:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ed54:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ed57:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ed5b:	c1 e2 02             	shl    edx,0x2
c000ed5e:	01 d0                	add    eax,edx
c000ed60:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000ed66:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000ed6a:	eb da                	jmp    c000ed46 <VAS::VAS(bool)+0x70>
c000ed6c:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000ed74:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000ed7c:	7f 71                	jg     c000edef <VAS::VAS(bool)+0x119>
c000ed7e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ed82:	2d 00 02 00 00       	sub    eax,0x200
c000ed87:	c1 e0 0c             	shl    eax,0xc
c000ed8a:	83 c8 03             	or     eax,0x3
c000ed8d:	89 c3                	mov    ebx,eax
c000ed8f:	e8 42 5a 00 00       	call   c00147d6 <thisCPU()>
c000ed94:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000ed9a:	83 e0 10             	and    eax,0x10
c000ed9d:	84 c0                	test   al,al
c000ed9f:	74 07                	je     c000eda8 <VAS::VAS(bool)+0xd2>
c000eda1:	b8 00 01 00 00       	mov    eax,0x100
c000eda6:	eb 05                	jmp    c000edad <VAS::VAS(bool)+0xd7>
c000eda8:	b8 00 00 00 00       	mov    eax,0x0
c000edad:	09 d8                	or     eax,ebx
c000edaf:	89 c1                	mov    ecx,eax
c000edb1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000edb5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000edb8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000edbc:	c1 e2 02             	shl    edx,0x2
c000edbf:	01 d0                	add    eax,edx
c000edc1:	89 ca                	mov    edx,ecx
c000edc3:	89 10                	mov    DWORD PTR [eax],edx
c000edc5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000edc9:	2d 40 03 00 00       	sub    eax,0x340
c000edce:	83 f8 7f             	cmp    eax,0x7f
c000edd1:	77 16                	ja     c000ede9 <VAS::VAS(bool)+0x113>
c000edd3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000edd7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000edda:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000edde:	c1 e2 02             	shl    edx,0x2
c000ede1:	01 d0                	add    eax,edx
c000ede3:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000ede9:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000eded:	eb 85                	jmp    c000ed74 <VAS::VAS(bool)+0x9e>
c000edef:	e8 e2 59 00 00       	call   c00147d6 <thisCPU()>
c000edf4:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000edfa:	83 e0 10             	and    eax,0x10
c000edfd:	84 c0                	test   al,al
c000edff:	74 07                	je     c000ee08 <VAS::VAS(bool)+0x132>
c000ee01:	b8 03 41 00 00       	mov    eax,0x4103
c000ee06:	eb 05                	jmp    c000ee0d <VAS::VAS(bool)+0x137>
c000ee08:	b8 03 40 00 00       	mov    eax,0x4003
c000ee0d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000ee11:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000ee14:	81 c2 20 0c 00 00    	add    edx,0xc20
c000ee1a:	89 02                	mov    DWORD PTR [edx],eax
c000ee1c:	e8 b5 59 00 00       	call   c00147d6 <thisCPU()>
c000ee21:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000ee27:	83 ec 08             	sub    esp,0x8
c000ee2a:	50                   	push   eax
c000ee2b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ee2f:	e8 c8 fc ff ff       	call   c000eafc <VAS::setCPUSpecific(unsigned long)>
c000ee34:	83 c4 10             	add    esp,0x10
c000ee37:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ee3b:	8b 58 0c             	mov    ebx,DWORD PTR [eax+0xc]
c000ee3e:	e8 93 59 00 00       	call   c00147d6 <thisCPU()>
c000ee43:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000ee49:	83 e0 10             	and    eax,0x10
c000ee4c:	84 c0                	test   al,al
c000ee4e:	74 07                	je     c000ee57 <VAS::VAS(bool)+0x181>
c000ee50:	b8 00 01 00 00       	mov    eax,0x100
c000ee55:	eb 05                	jmp    c000ee5c <VAS::VAS(bool)+0x186>
c000ee57:	b8 00 00 00 00       	mov    eax,0x0
c000ee5c:	09 d8                	or     eax,ebx
c000ee5e:	89 c2                	mov    edx,eax
c000ee60:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ee64:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ee67:	05 fc 0f 00 00       	add    eax,0xffc
c000ee6c:	83 ca 03             	or     edx,0x3
c000ee6f:	89 10                	mov    DWORD PTR [eax],edx
c000ee71:	e8 60 59 00 00       	call   c00147d6 <thisCPU()>
c000ee76:	83 ec 0c             	sub    esp,0xc
c000ee79:	50                   	push   eax
c000ee7a:	e8 ef 19 00 00       	call   c001086e <Device::getName()>
c000ee7f:	83 c4 10             	add    esp,0x10
c000ee82:	83 ec 08             	sub    esp,0x8
c000ee85:	68 57 17 02 c0       	push   0xc0021757
c000ee8a:	50                   	push   eax
c000ee8b:	e8 1a 19 ff ff       	call   c00007aa <strcmp>
c000ee90:	83 c4 10             	add    esp,0x10
c000ee93:	85 c0                	test   eax,eax
c000ee95:	0f 94 c0             	sete   al
c000ee98:	84 c0                	test   al,al
c000ee9a:	74 64                	je     c000ef00 <VAS::VAS(bool)+0x22a>
c000ee9c:	e8 6c 9a 00 00       	call   c001890d <disableIRQs()>
c000eea1:	e8 30 59 00 00       	call   c00147d6 <thisCPU()>
c000eea6:	05 7c 09 00 00       	add    eax,0x97c
c000eeab:	83 ec 0c             	sub    esp,0xc
c000eeae:	50                   	push   eax
c000eeaf:	e8 c8 cb ff ff       	call   c000ba7c <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000eeb4:	83 c4 10             	add    esp,0x10
c000eeb7:	25 00 f0 ff ff       	and    eax,0xfffff000
c000eebc:	89 c3                	mov    ebx,eax
c000eebe:	e8 13 59 00 00       	call   c00147d6 <thisCPU()>
c000eec3:	05 7c 09 00 00       	add    eax,0x97c
c000eec8:	83 ec 0c             	sub    esp,0xc
c000eecb:	50                   	push   eax
c000eecc:	e8 ab cb ff ff       	call   c000ba7c <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000eed1:	83 c4 10             	add    esp,0x10
c000eed4:	83 ec 08             	sub    esp,0x8
c000eed7:	50                   	push   eax
c000eed8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000eedc:	e8 a9 f5 ff ff       	call   c000e48a <VAS::getPageTableEntry(unsigned long)>
c000eee1:	83 c4 10             	add    esp,0x10
c000eee4:	8b 00                	mov    eax,DWORD PTR [eax]
c000eee6:	25 00 f0 ff ff       	and    eax,0xfffff000
c000eeeb:	6a 11                	push   0x11
c000eeed:	53                   	push   ebx
c000eeee:	50                   	push   eax
c000eeef:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000eef3:	e8 30 f9 ff ff       	call   c000e828 <VAS::mapPage(unsigned long, unsigned long, int)>
c000eef8:	83 c4 10             	add    esp,0x10
c000eefb:	e8 20 9a 00 00       	call   c0018920 <enableIRQs()>
c000ef00:	90                   	nop
c000ef01:	83 c4 28             	add    esp,0x28
c000ef04:	5b                   	pop    ebx
c000ef05:	c3                   	ret    

c000ef06 <mapVASFirstTime>:
c000ef06:	55                   	push   ebp
c000ef07:	57                   	push   edi
c000ef08:	56                   	push   esi
c000ef09:	53                   	push   ebx
c000ef0a:	83 ec 0c             	sub    esp,0xc
c000ef0d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ef12:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000ef15:	4a                   	dec    edx
c000ef16:	0f 84 99 00 00 00    	je     c000efb5 <mapVASFirstTime+0xaf>
c000ef1c:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c000ef1f:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c000ef22:	c1 e5 15             	shl    ebp,0x15
c000ef25:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000ef2a:	be 00 c0 e7 01       	mov    esi,0x1e7c000
c000ef2f:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c000ef35:	29 eb                	sub    ebx,ebp
c000ef37:	29 ee                	sub    esi,ebp
c000ef39:	e8 a1 d6 ff ff       	call   c000c5df <Phys::allocatePage()>
c000ef3e:	83 ec 0c             	sub    esp,0xc
c000ef41:	68 03 04 00 00       	push   0x403
c000ef46:	6a 01                	push   0x1
c000ef48:	53                   	push   ebx
c000ef49:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000ef4f:	50                   	push   eax
c000ef50:	57                   	push   edi
c000ef51:	e8 c4 fb ff ff       	call   c000eb1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ef56:	83 c4 20             	add    esp,0x20
c000ef59:	39 f3                	cmp    ebx,esi
c000ef5b:	75 dc                	jne    c000ef39 <mapVASFirstTime+0x33>
c000ef5d:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c000ef62:	be 00 f0 ff 01       	mov    esi,0x1fff000
c000ef67:	29 e8                	sub    eax,ebp
c000ef69:	29 ee                	sub    esi,ebp
c000ef6b:	89 c5                	mov    ebp,eax
c000ef6d:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c000ef71:	19 db                	sbb    ebx,ebx
c000ef73:	e8 67 d6 ff ff       	call   c000c5df <Phys::allocatePage()>
c000ef78:	83 e3 04             	and    ebx,0x4
c000ef7b:	83 ec 0c             	sub    esp,0xc
c000ef7e:	81 c3 03 04 00 00    	add    ebx,0x403
c000ef84:	53                   	push   ebx
c000ef85:	6a 01                	push   0x1
c000ef87:	56                   	push   esi
c000ef88:	81 ee 00 10 00 00    	sub    esi,0x1000
c000ef8e:	50                   	push   eax
c000ef8f:	57                   	push   edi
c000ef90:	e8 85 fb ff ff       	call   c000eb1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ef95:	83 c4 20             	add    esp,0x20
c000ef98:	39 f5                	cmp    ebp,esi
c000ef9a:	75 d1                	jne    c000ef6d <mapVASFirstTime+0x67>
c000ef9c:	e8 04 07 01 00       	call   c001f6a5 <CPU::readCR3()>
c000efa1:	83 ec 0c             	sub    esp,0xc
c000efa4:	50                   	push   eax
c000efa5:	e8 0d 07 01 00       	call   c001f6b7 <CPU::writeCR3(unsigned long)>
c000efaa:	83 c4 10             	add    esp,0x10
c000efad:	83 c4 0c             	add    esp,0xc
c000efb0:	5b                   	pop    ebx
c000efb1:	5e                   	pop    esi
c000efb2:	5f                   	pop    edi
c000efb3:	5d                   	pop    ebp
c000efb4:	c3                   	ret    
c000efb5:	83 ec 0c             	sub    esp,0xc
c000efb8:	68 65 17 02 c0       	push   0xc0021765
c000efbd:	e8 b5 01 00 00       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c000efc2:	83 c4 10             	add    esp,0x10
c000efc5:	83 c4 0c             	add    esp,0xc
c000efc8:	5b                   	pop    ebx
c000efc9:	5e                   	pop    esi
c000efca:	5f                   	pop    edi
c000efcb:	5d                   	pop    ebp
c000efcc:	c3                   	ret    

c000efcd <__cxa_atexit>:
c000efcd:	31 c0                	xor    eax,eax
c000efcf:	c3                   	ret    

c000efd0 <__cxa_finalize>:
c000efd0:	c3                   	ret    

c000efd1 <__stack_chk_fail>:
c000efd1:	55                   	push   ebp
c000efd2:	89 e5                	mov    ebp,esp
c000efd4:	83 ec 10             	sub    esp,0x10
c000efd7:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000efda:	68 7e 17 02 c0       	push   0xc002177e
c000efdf:	e8 93 01 00 00       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c000efe4:	58                   	pop    eax
c000efe5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000efe8:	5a                   	pop    edx
c000efe9:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000efec:	68 7e 17 02 c0       	push   0xc002177e
c000eff1:	e8 81 01 00 00       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c000eff6:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000eff9:	59                   	pop    ecx
c000effa:	5a                   	pop    edx
c000effb:	8b 00                	mov    eax,DWORD PTR [eax]
c000effd:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000f000:	68 7e 17 02 c0       	push   0xc002177e
c000f005:	e8 6d 01 00 00       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c000f00a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000f00d:	59                   	pop    ecx
c000f00e:	5a                   	pop    edx
c000f00f:	8b 00                	mov    eax,DWORD PTR [eax]
c000f011:	8b 00                	mov    eax,DWORD PTR [eax]
c000f013:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000f016:	68 7e 17 02 c0       	push   0xc002177e
c000f01b:	e8 57 01 00 00       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c000f020:	c7 04 24 86 17 02 c0 	mov    DWORD PTR [esp],0xc0021786
c000f027:	e8 16 69 00 00       	call   c0015942 <Krnl::panic(char const*)>
c000f02c:	83 c4 10             	add    esp,0x10
c000f02f:	c9                   	leave  
c000f030:	c3                   	ret    

c000f031 <__cxa_pure_virtual>:
c000f031:	83 ec 18             	sub    esp,0x18
c000f034:	68 9e 17 02 c0       	push   0xc002179e
c000f039:	e8 04 69 00 00       	call   c0015942 <Krnl::panic(char const*)>
c000f03e:	83 c4 1c             	add    esp,0x1c
c000f041:	c3                   	ret    

c000f042 <operator new(unsigned long)>:
c000f042:	e9 c2 cf ff ff       	jmp    c000c009 <malloc>

c000f047 <operator new[](unsigned long)>:
c000f047:	e9 bd cf ff ff       	jmp    c000c009 <malloc>

c000f04c <operator delete(void*)>:
c000f04c:	e9 d8 cf ff ff       	jmp    c000c029 <rfree>

c000f051 <operator delete(void*, unsigned long)>:
c000f051:	e9 d3 cf ff ff       	jmp    c000c029 <rfree>

c000f056 <operator delete[](void*)>:
c000f056:	e9 ce cf ff ff       	jmp    c000c029 <rfree>

c000f05b <operator delete[](void*, unsigned long)>:
c000f05b:	e9 c9 cf ff ff       	jmp    c000c029 <rfree>

c000f060 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000f060:	57                   	push   edi
c000f061:	56                   	push   esi
c000f062:	be b5 17 02 c0       	mov    esi,0xc00217b5
c000f067:	53                   	push   ebx
c000f068:	83 ec 40             	sub    esp,0x40
c000f06b:	a0 b4 17 02 c0       	mov    al,ds:0xc00217b4
c000f070:	8d 7c 24 02          	lea    edi,[esp+0x2]
c000f074:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c000f078:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000f07c:	b8 3e 00 00 00       	mov    eax,0x3e
c000f081:	f7 c7 02 00 00 00    	test   edi,0x2
c000f087:	75 69                	jne    c000f0f2 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x92>
c000f089:	89 c1                	mov    ecx,eax
c000f08b:	c1 e9 02             	shr    ecx,0x2
c000f08e:	fc                   	cld    
c000f08f:	31 d2                	xor    edx,edx
c000f091:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f093:	a8 02                	test   al,0x2
c000f095:	74 0b                	je     c000f0a2 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x42>
c000f097:	66 8b 16             	mov    dx,WORD PTR [esi]
c000f09a:	66 89 17             	mov    WORD PTR [edi],dx
c000f09d:	ba 02 00 00 00       	mov    edx,0x2
c000f0a2:	a8 01                	test   al,0x1
c000f0a4:	74 06                	je     c000f0ac <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x4c>
c000f0a6:	8a 04 16             	mov    al,BYTE PTR [esi+edx*1]
c000f0a9:	88 04 17             	mov    BYTE PTR [edi+edx*1],al
c000f0ac:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c000f0b0:	83 f9 3e             	cmp    ecx,0x3e
c000f0b3:	7e 05                	jle    c000f0ba <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x5a>
c000f0b5:	b9 3e 00 00 00       	mov    ecx,0x3e
c000f0ba:	89 df                	mov    edi,ebx
c000f0bc:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000f0c0:	eb 02                	jmp    c000f0c4 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x64>
c000f0c2:	89 c7                	mov    edi,eax
c000f0c4:	31 d2                	xor    edx,edx
c000f0c6:	89 f8                	mov    eax,edi
c000f0c8:	46                   	inc    esi
c000f0c9:	f7 f1                	div    ecx
c000f0cb:	39 cf                	cmp    edi,ecx
c000f0cd:	73 f3                	jae    c000f0c2 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x62>
c000f0cf:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000f0d2:	eb 02                	jmp    c000f0d6 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x76>
c000f0d4:	89 c3                	mov    ebx,eax
c000f0d6:	31 d2                	xor    edx,edx
c000f0d8:	89 d8                	mov    eax,ebx
c000f0da:	f7 f1                	div    ecx
c000f0dc:	4e                   	dec    esi
c000f0dd:	39 cb                	cmp    ebx,ecx
c000f0df:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c000f0e3:	88 16                	mov    BYTE PTR [esi],dl
c000f0e5:	73 ed                	jae    c000f0d4 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x74>
c000f0e7:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000f0eb:	83 c4 40             	add    esp,0x40
c000f0ee:	5b                   	pop    ebx
c000f0ef:	5e                   	pop    esi
c000f0f0:	5f                   	pop    edi
c000f0f1:	c3                   	ret    
c000f0f2:	66 8b 16             	mov    dx,WORD PTR [esi]
c000f0f5:	83 c7 02             	add    edi,0x2
c000f0f8:	66 89 57 fe          	mov    WORD PTR [edi-0x2],dx
c000f0fc:	83 c6 02             	add    esi,0x2
c000f0ff:	83 e8 02             	sub    eax,0x2
c000f102:	eb 85                	jmp    c000f089 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>

c000f104 <Dbg::logc(char)>:
c000f104:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f108:	ba fd 03 00 00       	mov    edx,0x3fd
c000f10d:	ec                   	in     al,dx
c000f10e:	a8 20                	test   al,0x20
c000f110:	74 fb                	je     c000f10d <Dbg::logc(char)+0x9>
c000f112:	ba f8 03 00 00       	mov    edx,0x3f8
c000f117:	88 c8                	mov    al,cl
c000f119:	ee                   	out    dx,al
c000f11a:	c3                   	ret    

c000f11b <Dbg::logs(char*)>:
c000f11b:	53                   	push   ebx
c000f11c:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000f120:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000f123:	84 c0                	test   al,al
c000f125:	74 0f                	je     c000f136 <Dbg::logs(char*)+0x1b>
c000f127:	43                   	inc    ebx
c000f128:	50                   	push   eax
c000f129:	e8 d6 ff ff ff       	call   c000f104 <Dbg::logc(char)>
c000f12e:	5a                   	pop    edx
c000f12f:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000f132:	84 c0                	test   al,al
c000f134:	75 f1                	jne    c000f127 <Dbg::logs(char*)+0xc>
c000f136:	5b                   	pop    ebx
c000f137:	c3                   	ret    

c000f138 <Dbg::logWriteInt(unsigned int)>:
c000f138:	83 ec 10             	sub    esp,0x10
c000f13b:	6a 0a                	push   0xa
c000f13d:	8d 44 24 08          	lea    eax,[esp+0x8]
c000f141:	50                   	push   eax
c000f142:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f146:	50                   	push   eax
c000f147:	e8 14 ff ff ff       	call   c000f060 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000f14c:	50                   	push   eax
c000f14d:	e8 c9 ff ff ff       	call   c000f11b <Dbg::logs(char*)>
c000f152:	83 c4 20             	add    esp,0x20
c000f155:	c3                   	ret    

c000f156 <Dbg::logWriteIntBase(unsigned int, int)>:
c000f156:	83 ec 10             	sub    esp,0x10
c000f159:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f15d:	50                   	push   eax
c000f15e:	8d 44 24 08          	lea    eax,[esp+0x8]
c000f162:	50                   	push   eax
c000f163:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f167:	52                   	push   edx
c000f168:	e8 f3 fe ff ff       	call   c000f060 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000f16d:	50                   	push   eax
c000f16e:	e8 a8 ff ff ff       	call   c000f11b <Dbg::logs(char*)>
c000f173:	83 c4 20             	add    esp,0x20
c000f176:	c3                   	ret    

c000f177 <Dbg::kprintf(char const*, ...)>:
c000f177:	55                   	push   ebp
c000f178:	57                   	push   edi
c000f179:	56                   	push   esi
c000f17a:	53                   	push   ebx
c000f17b:	83 ec 0c             	sub    esp,0xc
c000f17e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f182:	8d 44 24 24          	lea    eax,[esp+0x24]
c000f186:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000f18a:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000f18d:	84 c0                	test   al,al
c000f18f:	74 4d                	je     c000f1de <Dbg::kprintf(char const*, ...)+0x67>
c000f191:	31 ff                	xor    edi,edi
c000f193:	8d 77 01             	lea    esi,[edi+0x1]
c000f196:	3c 25                	cmp    al,0x25
c000f198:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000f19b:	0f 85 ec 00 00 00    	jne    c000f28d <Dbg::kprintf(char const*, ...)+0x116>
c000f1a1:	83 c7 02             	add    edi,0x2
c000f1a4:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000f1a7:	83 e8 25             	sub    eax,0x25
c000f1aa:	8d 34 3b             	lea    esi,[ebx+edi*1]
c000f1ad:	3c 53                	cmp    al,0x53
c000f1af:	0f 87 c0 00 00 00    	ja     c000f275 <Dbg::kprintf(char const*, ...)+0xfe>
c000f1b5:	25 ff 00 00 00       	and    eax,0xff
c000f1ba:	ff 24 85 f4 17 02 c0 	jmp    DWORD PTR [eax*4-0x3ffde80c]
c000f1c1:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f1c5:	89 c8                	mov    eax,ecx
c000f1c7:	83 c1 04             	add    ecx,0x4
c000f1ca:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000f1ce:	8b 00                	mov    eax,DWORD PTR [eax]
c000f1d0:	50                   	push   eax
c000f1d1:	e8 45 ff ff ff       	call   c000f11b <Dbg::logs(char*)>
c000f1d6:	58                   	pop    eax
c000f1d7:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000f1da:	84 c0                	test   al,al
c000f1dc:	75 b5                	jne    c000f193 <Dbg::kprintf(char const*, ...)+0x1c>
c000f1de:	83 c4 0c             	add    esp,0xc
c000f1e1:	5b                   	pop    ebx
c000f1e2:	5e                   	pop    esi
c000f1e3:	5f                   	pop    edi
c000f1e4:	5d                   	pop    ebp
c000f1e5:	c3                   	ret    
c000f1e6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f1ea:	89 d0                	mov    eax,edx
c000f1ec:	83 c2 04             	add    edx,0x4
c000f1ef:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000f1f3:	8b 00                	mov    eax,DWORD PTR [eax]
c000f1f5:	50                   	push   eax
c000f1f6:	e8 3d ff ff ff       	call   c000f138 <Dbg::logWriteInt(unsigned int)>
c000f1fb:	58                   	pop    eax
c000f1fc:	eb d9                	jmp    c000f1d7 <Dbg::kprintf(char const*, ...)+0x60>
c000f1fe:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f202:	89 d0                	mov    eax,edx
c000f204:	83 c2 04             	add    edx,0x4
c000f207:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000f20b:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000f20e:	50                   	push   eax
c000f20f:	e8 f0 fe ff ff       	call   c000f104 <Dbg::logc(char)>
c000f214:	58                   	pop    eax
c000f215:	eb c0                	jmp    c000f1d7 <Dbg::kprintf(char const*, ...)+0x60>
c000f217:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f21b:	89 c8                	mov    eax,ecx
c000f21d:	83 c1 04             	add    ecx,0x4
c000f220:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000f224:	8b 28                	mov    ebp,DWORD PTR [eax]
c000f226:	55                   	push   ebp
c000f227:	e8 0c ff ff ff       	call   c000f138 <Dbg::logWriteInt(unsigned int)>
c000f22c:	58                   	pop    eax
c000f22d:	eb a8                	jmp    c000f1d7 <Dbg::kprintf(char const*, ...)+0x60>
c000f22f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f233:	89 c8                	mov    eax,ecx
c000f235:	83 c1 04             	add    ecx,0x4
c000f238:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000f23c:	6a 10                	push   0x10
c000f23e:	8b 08                	mov    ecx,DWORD PTR [eax]
c000f240:	51                   	push   ecx
c000f241:	e8 10 ff ff ff       	call   c000f156 <Dbg::logWriteIntBase(unsigned int, int)>
c000f246:	5d                   	pop    ebp
c000f247:	58                   	pop    eax
c000f248:	eb 8d                	jmp    c000f1d7 <Dbg::kprintf(char const*, ...)+0x60>
c000f24a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f24e:	89 d0                	mov    eax,edx
c000f250:	83 c2 08             	add    edx,0x8
c000f253:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000f257:	6a 10                	push   0x10
c000f259:	8b 00                	mov    eax,DWORD PTR [eax]
c000f25b:	50                   	push   eax
c000f25c:	e8 f5 fe ff ff       	call   c000f156 <Dbg::logWriteIntBase(unsigned int, int)>
c000f261:	58                   	pop    eax
c000f262:	5a                   	pop    edx
c000f263:	e9 6f ff ff ff       	jmp    c000f1d7 <Dbg::kprintf(char const*, ...)+0x60>
c000f268:	6a 25                	push   0x25
c000f26a:	e8 95 fe ff ff       	call   c000f104 <Dbg::logc(char)>
c000f26f:	5a                   	pop    edx
c000f270:	e9 62 ff ff ff       	jmp    c000f1d7 <Dbg::kprintf(char const*, ...)+0x60>
c000f275:	6a 25                	push   0x25
c000f277:	e8 88 fe ff ff       	call   c000f104 <Dbg::logc(char)>
c000f27c:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000f280:	50                   	push   eax
c000f281:	e8 7e fe ff ff       	call   c000f104 <Dbg::logc(char)>
c000f286:	5a                   	pop    edx
c000f287:	59                   	pop    ecx
c000f288:	e9 4a ff ff ff       	jmp    c000f1d7 <Dbg::kprintf(char const*, ...)+0x60>
c000f28d:	50                   	push   eax
c000f28e:	89 f7                	mov    edi,esi
c000f290:	e8 6f fe ff ff       	call   c000f104 <Dbg::logc(char)>
c000f295:	89 ee                	mov    esi,ebp
c000f297:	58                   	pop    eax
c000f298:	e9 3a ff ff ff       	jmp    c000f1d7 <Dbg::kprintf(char const*, ...)+0x60>
c000f29d:	90                   	nop

c000f29e <File::read(unsigned long long, void*, int*)>:
c000f29e:	53                   	push   ebx
c000f29f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f2a3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f2a7:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000f2ae:	3c 19                	cmp    al,0x19
c000f2b0:	77 35                	ja     c000f2e7 <File::read(unsigned long long, void*, int*)+0x49>
c000f2b2:	8b 04 85 80 4b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb480]
c000f2b9:	85 c0                	test   eax,eax
c000f2bb:	74 2a                	je     c000f2e7 <File::read(unsigned long long, void*, int*)+0x49>
c000f2bd:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000f2c3:	85 c0                	test   eax,eax
c000f2c5:	74 20                	je     c000f2e7 <File::read(unsigned long long, void*, int*)+0x49>
c000f2c7:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f2cb:	74 21                	je     c000f2ee <File::read(unsigned long long, void*, int*)+0x50>
c000f2cd:	8b 08                	mov    ecx,DWORD PTR [eax]
c000f2cf:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000f2d3:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000f2d9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f2dd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f2e1:	5b                   	pop    ebx
c000f2e2:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000f2e5:	ff e0                	jmp    eax
c000f2e7:	b8 0b 00 00 00       	mov    eax,0xb
c000f2ec:	eb 05                	jmp    c000f2f3 <File::read(unsigned long long, void*, int*)+0x55>
c000f2ee:	b8 05 00 00 00       	mov    eax,0x5
c000f2f3:	5b                   	pop    ebx
c000f2f4:	c3                   	ret    
c000f2f5:	90                   	nop

c000f2f6 <File::write(unsigned long long, void*, int*)>:
c000f2f6:	53                   	push   ebx
c000f2f7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f2fb:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f2ff:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000f306:	3c 19                	cmp    al,0x19
c000f308:	77 35                	ja     c000f33f <File::write(unsigned long long, void*, int*)+0x49>
c000f30a:	8b 04 85 80 4b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb480]
c000f311:	85 c0                	test   eax,eax
c000f313:	74 2a                	je     c000f33f <File::write(unsigned long long, void*, int*)+0x49>
c000f315:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000f31b:	85 c0                	test   eax,eax
c000f31d:	74 20                	je     c000f33f <File::write(unsigned long long, void*, int*)+0x49>
c000f31f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f323:	74 21                	je     c000f346 <File::write(unsigned long long, void*, int*)+0x50>
c000f325:	8b 08                	mov    ecx,DWORD PTR [eax]
c000f327:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000f32b:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000f331:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f335:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f339:	5b                   	pop    ebx
c000f33a:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000f33d:	ff e0                	jmp    eax
c000f33f:	b8 0b 00 00 00       	mov    eax,0xb
c000f344:	eb 05                	jmp    c000f34b <File::write(unsigned long long, void*, int*)+0x55>
c000f346:	b8 05 00 00 00       	mov    eax,0x5
c000f34b:	5b                   	pop    ebx
c000f34c:	c3                   	ret    
c000f34d:	90                   	nop

c000f34e <Directory::read(unsigned long long, void*, int*)>:
c000f34e:	53                   	push   ebx
c000f34f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f353:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f357:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000f35e:	3c 19                	cmp    al,0x19
c000f360:	77 35                	ja     c000f397 <Directory::read(unsigned long long, void*, int*)+0x49>
c000f362:	8b 04 85 80 4b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb480]
c000f369:	85 c0                	test   eax,eax
c000f36b:	74 2a                	je     c000f397 <Directory::read(unsigned long long, void*, int*)+0x49>
c000f36d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000f373:	85 c0                	test   eax,eax
c000f375:	74 20                	je     c000f397 <Directory::read(unsigned long long, void*, int*)+0x49>
c000f377:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f37b:	74 21                	je     c000f39e <Directory::read(unsigned long long, void*, int*)+0x50>
c000f37d:	8b 08                	mov    ecx,DWORD PTR [eax]
c000f37f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000f383:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000f389:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f38d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f391:	5b                   	pop    ebx
c000f392:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000f395:	ff e0                	jmp    eax
c000f397:	b8 0b 00 00 00       	mov    eax,0xb
c000f39c:	eb 05                	jmp    c000f3a3 <Directory::read(unsigned long long, void*, int*)+0x55>
c000f39e:	b8 05 00 00 00       	mov    eax,0x5
c000f3a3:	5b                   	pop    ebx
c000f3a4:	c3                   	ret    
c000f3a5:	90                   	nop

c000f3a6 <Directory::write(unsigned long long, void*, int*)>:
c000f3a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f3aa:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000f3b1:	b8 0b 00 00 00       	mov    eax,0xb
c000f3b6:	80 fa 19             	cmp    dl,0x19
c000f3b9:	77 18                	ja     c000f3d3 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000f3bb:	8b 14 95 80 4b 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdb480]
c000f3c2:	85 d2                	test   edx,edx
c000f3c4:	74 0d                	je     c000f3d3 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000f3c6:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c000f3cd:	19 c0                	sbb    eax,eax
c000f3cf:	83 e0 0a             	and    eax,0xa
c000f3d2:	40                   	inc    eax
c000f3d3:	c3                   	ret    

c000f3d4 <File::isAtty()>:
c000f3d4:	31 c0                	xor    eax,eax
c000f3d6:	c3                   	ret    
c000f3d7:	90                   	nop

c000f3d8 <Directory::isAtty()>:
c000f3d8:	31 c0                	xor    eax,eax
c000f3da:	c3                   	ret    
c000f3db:	90                   	nop

c000f3dc <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000f3dc:	b8 0a 00 00 00       	mov    eax,0xa
c000f3e1:	c3                   	ret    

c000f3e2 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000f3e2:	b8 0a 00 00 00       	mov    eax,0xa
c000f3e7:	c3                   	ret    

c000f3e8 <File::~File()>:
c000f3e8:	83 ec 0c             	sub    esp,0xc
c000f3eb:	ba b0 19 02 c0       	mov    edx,0xc00219b0
c000f3f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f3f4:	89 10                	mov    DWORD PTR [eax],edx
c000f3f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f3fa:	83 ec 0c             	sub    esp,0xc
c000f3fd:	50                   	push   eax
c000f3fe:	e8 f3 ea ff ff       	call   c000def6 <UnixFile::~UnixFile()>
c000f403:	83 c4 10             	add    esp,0x10
c000f406:	90                   	nop
c000f407:	83 c4 0c             	add    esp,0xc
c000f40a:	c3                   	ret    
c000f40b:	90                   	nop

c000f40c <File::~File()>:
c000f40c:	83 ec 0c             	sub    esp,0xc
c000f40f:	83 ec 0c             	sub    esp,0xc
c000f412:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f416:	e8 cd ff ff ff       	call   c000f3e8 <File::~File()>
c000f41b:	83 c4 10             	add    esp,0x10
c000f41e:	83 ec 08             	sub    esp,0x8
c000f421:	68 14 01 00 00       	push   0x114
c000f426:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f42a:	e8 22 fc ff ff       	call   c000f051 <operator delete(void*, unsigned long)>
c000f42f:	83 c4 10             	add    esp,0x10
c000f432:	83 c4 0c             	add    esp,0xc
c000f435:	c3                   	ret    

c000f436 <Directory::~Directory()>:
c000f436:	83 ec 0c             	sub    esp,0xc
c000f439:	ba cc 19 02 c0       	mov    edx,0xc00219cc
c000f43e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f442:	89 10                	mov    DWORD PTR [eax],edx
c000f444:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f448:	83 ec 0c             	sub    esp,0xc
c000f44b:	50                   	push   eax
c000f44c:	e8 a5 ea ff ff       	call   c000def6 <UnixFile::~UnixFile()>
c000f451:	83 c4 10             	add    esp,0x10
c000f454:	90                   	nop
c000f455:	83 c4 0c             	add    esp,0xc
c000f458:	c3                   	ret    
c000f459:	90                   	nop

c000f45a <Directory::~Directory()>:
c000f45a:	83 ec 0c             	sub    esp,0xc
c000f45d:	83 ec 0c             	sub    esp,0xc
c000f460:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f464:	e8 cd ff ff ff       	call   c000f436 <Directory::~Directory()>
c000f469:	83 c4 10             	add    esp,0x10
c000f46c:	83 ec 08             	sub    esp,0x8
c000f46f:	68 14 01 00 00       	push   0x114
c000f474:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f478:	e8 d4 fb ff ff       	call   c000f051 <operator delete(void*, unsigned long)>
c000f47d:	83 c4 10             	add    esp,0x10
c000f480:	83 c4 0c             	add    esp,0xc
c000f483:	c3                   	ret    

c000f484 <Filesystem::Filesystem()>:
c000f484:	ba 4c 19 02 c0       	mov    edx,0xc002194c
c000f489:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f48d:	89 10                	mov    DWORD PTR [eax],edx
c000f48f:	8b 15 e8 46 02 c0    	mov    edx,DWORD PTR ds:0xc00246e8
c000f495:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f499:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000f49c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f4a0:	a3 e8 46 02 c0       	mov    ds:0xc00246e8,eax
c000f4a5:	90                   	nop
c000f4a6:	c3                   	ret    
c000f4a7:	90                   	nop

c000f4a8 <Filesystem::~Filesystem()>:
c000f4a8:	ba 4c 19 02 c0       	mov    edx,0xc002194c
c000f4ad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f4b1:	89 10                	mov    DWORD PTR [eax],edx
c000f4b3:	90                   	nop
c000f4b4:	c3                   	ret    
c000f4b5:	90                   	nop

c000f4b6 <Filesystem::~Filesystem()>:
c000f4b6:	83 ec 0c             	sub    esp,0xc
c000f4b9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000f4bd:	e8 e6 ff ff ff       	call   c000f4a8 <Filesystem::~Filesystem()>
c000f4c2:	83 c4 04             	add    esp,0x4
c000f4c5:	83 ec 08             	sub    esp,0x8
c000f4c8:	6a 08                	push   0x8
c000f4ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f4ce:	e8 7e fb ff ff       	call   c000f051 <operator delete(void*, unsigned long)>
c000f4d3:	83 c4 10             	add    esp,0x10
c000f4d6:	83 c4 0c             	add    esp,0xc
c000f4d9:	c3                   	ret    

c000f4da <initVFS()>:
c000f4da:	83 ec 18             	sub    esp,0x18
c000f4dd:	6a 08                	push   0x8
c000f4df:	e8 5e fb ff ff       	call   c000f042 <operator new(unsigned long)>
c000f4e4:	89 04 24             	mov    DWORD PTR [esp],eax
c000f4e7:	e8 5a b3 00 00       	call   c001a846 <FAT::FAT()>
c000f4ec:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f4f3:	e8 4a fb ff ff       	call   c000f042 <operator new(unsigned long)>
c000f4f8:	89 04 24             	mov    DWORD PTR [esp],eax
c000f4fb:	e8 e6 c5 00 00       	call   c001bae6 <ISO9660::ISO9660()>
c000f500:	83 c4 1c             	add    esp,0x1c
c000f503:	c3                   	ret    

c000f504 <standardiseFiles(char*, char const*, char const*)>:
c000f504:	55                   	push   ebp
c000f505:	57                   	push   edi
c000f506:	56                   	push   esi
c000f507:	53                   	push   ebx
c000f508:	81 ec 10 04 00 00    	sub    esp,0x410
c000f50e:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000f515:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000f51c:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000f523:	68 00 04 00 00       	push   0x400
c000f528:	6a 00                	push   0x0
c000f52a:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000f52e:	56                   	push   esi
c000f52f:	e8 86 11 ff ff       	call   c00006ba <memset>
c000f534:	83 c4 10             	add    esp,0x10
c000f537:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000f53b:	75 0b                	jne    c000f548 <standardiseFiles(char*, char const*, char const*)+0x44>
c000f53d:	50                   	push   eax
c000f53e:	50                   	push   eax
c000f53f:	57                   	push   edi
c000f540:	56                   	push   esi
c000f541:	e8 13 12 ff ff       	call   c0000759 <strcpy>
c000f546:	eb 41                	jmp    c000f589 <standardiseFiles(char*, char const*, char const*)+0x85>
c000f548:	8a 07                	mov    al,BYTE PTR [edi]
c000f54a:	3c 5c                	cmp    al,0x5c
c000f54c:	74 04                	je     c000f552 <standardiseFiles(char*, char const*, char const*)+0x4e>
c000f54e:	3c 2f                	cmp    al,0x2f
c000f550:	75 18                	jne    c000f56a <standardiseFiles(char*, char const*, char const*)+0x66>
c000f552:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000f555:	3c 60                	cmp    al,0x60
c000f557:	7e 03                	jle    c000f55c <standardiseFiles(char*, char const*, char const*)+0x58>
c000f559:	83 e8 20             	sub    eax,0x20
c000f55c:	88 04 24             	mov    BYTE PTR [esp],al
c000f55f:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000f566:	50                   	push   eax
c000f567:	50                   	push   eax
c000f568:	eb 18                	jmp    c000f582 <standardiseFiles(char*, char const*, char const*)+0x7e>
c000f56a:	50                   	push   eax
c000f56b:	50                   	push   eax
c000f56c:	55                   	push   ebp
c000f56d:	56                   	push   esi
c000f56e:	e8 e6 11 ff ff       	call   c0000759 <strcpy>
c000f573:	5a                   	pop    edx
c000f574:	59                   	pop    ecx
c000f575:	68 54 2c 02 c0       	push   0xc0022c54
c000f57a:	56                   	push   esi
c000f57b:	e8 90 12 ff ff       	call   c0000810 <strcat>
c000f580:	5d                   	pop    ebp
c000f581:	58                   	pop    eax
c000f582:	57                   	push   edi
c000f583:	56                   	push   esi
c000f584:	e8 87 12 ff ff       	call   c0000810 <strcat>
c000f589:	83 c4 10             	add    esp,0x10
c000f58c:	8a 04 24             	mov    al,BYTE PTR [esp]
c000f58f:	3c 60                	cmp    al,0x60
c000f591:	7e 03                	jle    c000f596 <standardiseFiles(char*, char const*, char const*)+0x92>
c000f593:	83 e8 20             	sub    eax,0x20
c000f596:	88 04 24             	mov    BYTE PTR [esp],al
c000f599:	88 03                	mov    BYTE PTR [ebx],al
c000f59b:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000f5a2:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000f5a8:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000f5ac:	bf 03 00 00 00       	mov    edi,0x3
c000f5b1:	b8 03 00 00 00       	mov    eax,0x3
c000f5b6:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c000f5b9:	84 d2                	test   dl,dl
c000f5bb:	0f 84 91 00 00 00    	je     c000f652 <standardiseFiles(char*, char const*, char const*)+0x14e>
c000f5c1:	8d 4f 01             	lea    ecx,[edi+0x1]
c000f5c4:	80 fa 2f             	cmp    dl,0x2f
c000f5c7:	74 05                	je     c000f5ce <standardiseFiles(char*, char const*, char const*)+0xca>
c000f5c9:	80 fa 5c             	cmp    dl,0x5c
c000f5cc:	75 12                	jne    c000f5e0 <standardiseFiles(char*, char const*, char const*)+0xdc>
c000f5ce:	89 c5                	mov    ebp,eax
c000f5d0:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000f5d5:	74 09                	je     c000f5e0 <standardiseFiles(char*, char const*, char const*)+0xdc>
c000f5d7:	40                   	inc    eax
c000f5d8:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000f5dc:	89 cf                	mov    edi,ecx
c000f5de:	eb d6                	jmp    c000f5b6 <standardiseFiles(char*, char const*, char const*)+0xb2>
c000f5e0:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000f5e5:	75 5b                	jne    c000f642 <standardiseFiles(char*, char const*, char const*)+0x13e>
c000f5e7:	80 fa 2e             	cmp    dl,0x2e
c000f5ea:	75 56                	jne    c000f642 <standardiseFiles(char*, char const*, char const*)+0x13e>
c000f5ec:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000f5f0:	74 19                	je     c000f60b <standardiseFiles(char*, char const*, char const*)+0x107>
c000f5f2:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000f5f7:	74 53                	je     c000f64c <standardiseFiles(char*, char const*, char const*)+0x148>
c000f5f9:	89 f9                	mov    ecx,edi
c000f5fb:	41                   	inc    ecx
c000f5fc:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000f5ff:	80 fa 5c             	cmp    dl,0x5c
c000f602:	74 f7                	je     c000f5fb <standardiseFiles(char*, char const*, char const*)+0xf7>
c000f604:	80 fa 2f             	cmp    dl,0x2f
c000f607:	74 f2                	je     c000f5fb <standardiseFiles(char*, char const*, char const*)+0xf7>
c000f609:	eb d1                	jmp    c000f5dc <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f60b:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000f610:	74 3a                	je     c000f64c <standardiseFiles(char*, char const*, char const*)+0x148>
c000f612:	83 f8 03             	cmp    eax,0x3
c000f615:	74 c5                	je     c000f5dc <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f617:	41                   	inc    ecx
c000f618:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000f61b:	80 fa 2f             	cmp    dl,0x2f
c000f61e:	74 f7                	je     c000f617 <standardiseFiles(char*, char const*, char const*)+0x113>
c000f620:	80 fa 5c             	cmp    dl,0x5c
c000f623:	74 f2                	je     c000f617 <standardiseFiles(char*, char const*, char const*)+0x113>
c000f625:	48                   	dec    eax
c000f626:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000f62a:	75 06                	jne    c000f632 <standardiseFiles(char*, char const*, char const*)+0x12e>
c000f62c:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000f630:	eb f3                	jmp    c000f625 <standardiseFiles(char*, char const*, char const*)+0x121>
c000f632:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000f636:	74 07                	je     c000f63f <standardiseFiles(char*, char const*, char const*)+0x13b>
c000f638:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000f63c:	48                   	dec    eax
c000f63d:	eb f3                	jmp    c000f632 <standardiseFiles(char*, char const*, char const*)+0x12e>
c000f63f:	40                   	inc    eax
c000f640:	eb 9a                	jmp    c000f5dc <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f642:	80 fa 2f             	cmp    dl,0x2f
c000f645:	74 95                	je     c000f5dc <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f647:	80 fa 5c             	cmp    dl,0x5c
c000f64a:	74 90                	je     c000f5dc <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f64c:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000f64f:	40                   	inc    eax
c000f650:	eb 8a                	jmp    c000f5dc <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f652:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000f656:	83 ec 0c             	sub    esp,0xc
c000f659:	53                   	push   ebx
c000f65a:	e8 78 10 ff ff       	call   c00006d7 <strlen>
c000f65f:	83 c4 10             	add    esp,0x10
c000f662:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000f667:	75 26                	jne    c000f68f <standardiseFiles(char*, char const*, char const*)+0x18b>
c000f669:	83 ec 0c             	sub    esp,0xc
c000f66c:	53                   	push   ebx
c000f66d:	e8 65 10 ff ff       	call   c00006d7 <strlen>
c000f672:	83 c4 10             	add    esp,0x10
c000f675:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000f67a:	74 26                	je     c000f6a2 <standardiseFiles(char*, char const*, char const*)+0x19e>
c000f67c:	83 ec 0c             	sub    esp,0xc
c000f67f:	53                   	push   ebx
c000f680:	e8 52 10 ff ff       	call   c00006d7 <strlen>
c000f685:	83 c4 10             	add    esp,0x10
c000f688:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000f68d:	eb c7                	jmp    c000f656 <standardiseFiles(char*, char const*, char const*)+0x152>
c000f68f:	83 ec 0c             	sub    esp,0xc
c000f692:	53                   	push   ebx
c000f693:	e8 3f 10 ff ff       	call   c00006d7 <strlen>
c000f698:	83 c4 10             	add    esp,0x10
c000f69b:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000f6a0:	74 c7                	je     c000f669 <standardiseFiles(char*, char const*, char const*)+0x165>
c000f6a2:	81 c4 0c 04 00 00    	add    esp,0x40c
c000f6a8:	5b                   	pop    ebx
c000f6a9:	5e                   	pop    esi
c000f6aa:	5f                   	pop    edi
c000f6ab:	5d                   	pop    ebp
c000f6ac:	c3                   	ret    
c000f6ad:	90                   	nop

c000f6ae <File::File(char const*, Process*)>:
c000f6ae:	83 ec 0c             	sub    esp,0xc
c000f6b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f6b5:	83 ec 08             	sub    esp,0x8
c000f6b8:	6a 00                	push   0x0
c000f6ba:	50                   	push   eax
c000f6bb:	e8 94 e6 ff ff       	call   c000dd54 <UnixFile::UnixFile(int)>
c000f6c0:	83 c4 10             	add    esp,0x10
c000f6c3:	ba b0 19 02 c0       	mov    edx,0xc00219b0
c000f6c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f6cc:	89 10                	mov    DWORD PTR [eax],edx
c000f6ce:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f6d2:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000f6d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f6dc:	83 c0 0d             	add    eax,0xd
c000f6df:	83 ec 04             	sub    esp,0x4
c000f6e2:	52                   	push   edx
c000f6e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f6e7:	50                   	push   eax
c000f6e8:	e8 17 fe ff ff       	call   c000f504 <standardiseFiles(char*, char const*, char const*)>
c000f6ed:	83 c4 10             	add    esp,0x10
c000f6f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f6f4:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000f6f7:	8d 50 bf             	lea    edx,[eax-0x41]
c000f6fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f6fe:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000f704:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f708:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000f70c:	90                   	nop
c000f70d:	83 c4 0c             	add    esp,0xc
c000f710:	c3                   	ret    
c000f711:	90                   	nop

c000f712 <File::open(FileOpenMode)>:
c000f712:	53                   	push   ebx
c000f713:	b8 0b 00 00 00       	mov    eax,0xb
c000f718:	83 ec 08             	sub    esp,0x8
c000f71b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f71f:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000f726:	80 fa 19             	cmp    dl,0x19
c000f729:	77 40                	ja     c000f76b <File::open(FileOpenMode)+0x59>
c000f72b:	8b 14 95 80 4b 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdb480]
c000f732:	85 d2                	test   edx,edx
c000f734:	74 35                	je     c000f76b <File::open(FileOpenMode)+0x59>
c000f736:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000f73c:	85 d2                	test   edx,edx
c000f73e:	74 2b                	je     c000f76b <File::open(FileOpenMode)+0x59>
c000f740:	b8 06 00 00 00       	mov    eax,0x6
c000f745:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000f749:	75 20                	jne    c000f76b <File::open(FileOpenMode)+0x59>
c000f74b:	8b 02                	mov    eax,DWORD PTR [edx]
c000f74d:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000f753:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f757:	51                   	push   ecx
c000f758:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000f75b:	51                   	push   ecx
c000f75c:	52                   	push   edx
c000f75d:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000f760:	83 c4 10             	add    esp,0x10
c000f763:	85 c0                	test   eax,eax
c000f765:	75 04                	jne    c000f76b <File::open(FileOpenMode)+0x59>
c000f767:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000f76b:	83 c4 08             	add    esp,0x8
c000f76e:	5b                   	pop    ebx
c000f76f:	c3                   	ret    

c000f770 <File::close()>:
c000f770:	53                   	push   ebx
c000f771:	b8 0b 00 00 00       	mov    eax,0xb
c000f776:	83 ec 08             	sub    esp,0x8
c000f779:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000f77d:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000f784:	80 fa 19             	cmp    dl,0x19
c000f787:	77 41                	ja     c000f7ca <File::close()+0x5a>
c000f789:	8b 1c 95 80 4b 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdb480]
c000f790:	85 db                	test   ebx,ebx
c000f792:	74 36                	je     c000f7ca <File::close()+0x5a>
c000f794:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000f79b:	74 2d                	je     c000f7ca <File::close()+0x5a>
c000f79d:	b8 05 00 00 00       	mov    eax,0x5
c000f7a2:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000f7a6:	74 22                	je     c000f7ca <File::close()+0x5a>
c000f7a8:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000f7ac:	8b 04 95 80 4b 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdb480]
c000f7b3:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000f7b9:	53                   	push   ebx
c000f7ba:	53                   	push   ebx
c000f7bb:	8b 10                	mov    edx,DWORD PTR [eax]
c000f7bd:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000f7c3:	50                   	push   eax
c000f7c4:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c000f7c7:	83 c4 10             	add    esp,0x10
c000f7ca:	83 c4 08             	add    esp,0x8
c000f7cd:	5b                   	pop    ebx
c000f7ce:	c3                   	ret    
c000f7cf:	90                   	nop

c000f7d0 <File::seek(unsigned long long)>:
c000f7d0:	56                   	push   esi
c000f7d1:	b8 0b 00 00 00       	mov    eax,0xb
c000f7d6:	53                   	push   ebx
c000f7d7:	51                   	push   ecx
c000f7d8:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000f7dc:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000f7e0:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000f7e4:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000f7eb:	80 fa 19             	cmp    dl,0x19
c000f7ee:	77 31                	ja     c000f821 <File::seek(unsigned long long)+0x51>
c000f7f0:	8b 14 95 80 4b 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdb480]
c000f7f7:	85 d2                	test   edx,edx
c000f7f9:	74 26                	je     c000f821 <File::seek(unsigned long long)+0x51>
c000f7fb:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000f801:	85 d2                	test   edx,edx
c000f803:	74 1c                	je     c000f821 <File::seek(unsigned long long)+0x51>
c000f805:	b8 05 00 00 00       	mov    eax,0x5
c000f80a:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000f80e:	74 11                	je     c000f821 <File::seek(unsigned long long)+0x51>
c000f810:	8b 02                	mov    eax,DWORD PTR [edx]
c000f812:	53                   	push   ebx
c000f813:	51                   	push   ecx
c000f814:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000f81a:	52                   	push   edx
c000f81b:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000f81e:	83 c4 10             	add    esp,0x10
c000f821:	5a                   	pop    edx
c000f822:	5b                   	pop    ebx
c000f823:	5e                   	pop    esi
c000f824:	c3                   	ret    
c000f825:	90                   	nop

c000f826 <File::tell(unsigned long long*)>:
c000f826:	83 ec 0c             	sub    esp,0xc
c000f829:	b8 0b 00 00 00       	mov    eax,0xb
c000f82e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000f832:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000f839:	80 fa 19             	cmp    dl,0x19
c000f83c:	77 34                	ja     c000f872 <File::tell(unsigned long long*)+0x4c>
c000f83e:	8b 14 95 80 4b 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdb480]
c000f845:	85 d2                	test   edx,edx
c000f847:	74 29                	je     c000f872 <File::tell(unsigned long long*)+0x4c>
c000f849:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000f84f:	85 d2                	test   edx,edx
c000f851:	74 1f                	je     c000f872 <File::tell(unsigned long long*)+0x4c>
c000f853:	b8 05 00 00 00       	mov    eax,0x5
c000f858:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000f85c:	74 14                	je     c000f872 <File::tell(unsigned long long*)+0x4c>
c000f85e:	50                   	push   eax
c000f85f:	8b 02                	mov    eax,DWORD PTR [edx]
c000f861:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f865:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000f86b:	52                   	push   edx
c000f86c:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000f86f:	83 c4 10             	add    esp,0x10
c000f872:	83 c4 0c             	add    esp,0xc
c000f875:	c3                   	ret    

c000f876 <File::rewind()>:
c000f876:	83 ec 10             	sub    esp,0x10
c000f879:	6a 00                	push   0x0
c000f87b:	6a 00                	push   0x0
c000f87d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f881:	e8 4a ff ff ff       	call   c000f7d0 <File::seek(unsigned long long)>
c000f886:	83 c4 1c             	add    esp,0x1c
c000f889:	c3                   	ret    

c000f88a <File::unlink()>:
c000f88a:	83 ec 0c             	sub    esp,0xc
c000f88d:	b8 0b 00 00 00       	mov    eax,0xb
c000f892:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f896:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f89d:	80 f9 19             	cmp    cl,0x19
c000f8a0:	77 2f                	ja     c000f8d1 <File::unlink()+0x47>
c000f8a2:	8b 0c 8d 80 4b 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb480]
c000f8a9:	85 c9                	test   ecx,ecx
c000f8ab:	74 24                	je     c000f8d1 <File::unlink()+0x47>
c000f8ad:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f8b3:	85 c9                	test   ecx,ecx
c000f8b5:	74 1a                	je     c000f8d1 <File::unlink()+0x47>
c000f8b7:	b8 06 00 00 00       	mov    eax,0x6
c000f8bc:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f8c0:	75 0f                	jne    c000f8d1 <File::unlink()+0x47>
c000f8c2:	50                   	push   eax
c000f8c3:	83 c2 0d             	add    edx,0xd
c000f8c6:	50                   	push   eax
c000f8c7:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f8c9:	52                   	push   edx
c000f8ca:	51                   	push   ecx
c000f8cb:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000f8ce:	83 c4 10             	add    esp,0x10
c000f8d1:	83 c4 0c             	add    esp,0xc
c000f8d4:	c3                   	ret    
c000f8d5:	90                   	nop

c000f8d6 <File::rename(char const*)>:
c000f8d6:	83 ec 0c             	sub    esp,0xc
c000f8d9:	b8 0b 00 00 00       	mov    eax,0xb
c000f8de:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f8e2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f8e9:	80 f9 19             	cmp    cl,0x19
c000f8ec:	77 32                	ja     c000f920 <File::rename(char const*)+0x4a>
c000f8ee:	8b 0c 8d 80 4b 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb480]
c000f8f5:	85 c9                	test   ecx,ecx
c000f8f7:	74 27                	je     c000f920 <File::rename(char const*)+0x4a>
c000f8f9:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f8ff:	85 c9                	test   ecx,ecx
c000f901:	74 1d                	je     c000f920 <File::rename(char const*)+0x4a>
c000f903:	b8 06 00 00 00       	mov    eax,0x6
c000f908:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f90c:	75 12                	jne    c000f920 <File::rename(char const*)+0x4a>
c000f90e:	50                   	push   eax
c000f90f:	83 c2 0d             	add    edx,0xd
c000f912:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f914:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f918:	52                   	push   edx
c000f919:	51                   	push   ecx
c000f91a:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000f91d:	83 c4 10             	add    esp,0x10
c000f920:	83 c4 0c             	add    esp,0xc
c000f923:	c3                   	ret    

c000f924 <File::chfatattr(unsigned char, unsigned char)>:
c000f924:	57                   	push   edi
c000f925:	b8 0b 00 00 00       	mov    eax,0xb
c000f92a:	56                   	push   esi
c000f92b:	53                   	push   ebx
c000f92c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f930:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f934:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000f938:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f93f:	80 f9 19             	cmp    cl,0x19
c000f942:	77 37                	ja     c000f97b <File::chfatattr(unsigned char, unsigned char)+0x57>
c000f944:	8b 0c 8d 80 4b 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb480]
c000f94b:	85 c9                	test   ecx,ecx
c000f94d:	74 2c                	je     c000f97b <File::chfatattr(unsigned char, unsigned char)+0x57>
c000f94f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f955:	85 c9                	test   ecx,ecx
c000f957:	74 22                	je     c000f97b <File::chfatattr(unsigned char, unsigned char)+0x57>
c000f959:	b8 06 00 00 00       	mov    eax,0x6
c000f95e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f962:	75 17                	jne    c000f97b <File::chfatattr(unsigned char, unsigned char)+0x57>
c000f964:	89 f0                	mov    eax,esi
c000f966:	8b 39                	mov    edi,DWORD PTR [ecx]
c000f968:	0f b6 f0             	movzx  esi,al
c000f96b:	56                   	push   esi
c000f96c:	83 c2 0d             	add    edx,0xd
c000f96f:	0f b6 db             	movzx  ebx,bl
c000f972:	53                   	push   ebx
c000f973:	52                   	push   edx
c000f974:	51                   	push   ecx
c000f975:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000f978:	83 c4 10             	add    esp,0x10
c000f97b:	5b                   	pop    ebx
c000f97c:	5e                   	pop    esi
c000f97d:	5f                   	pop    edi
c000f97e:	c3                   	ret    
c000f97f:	90                   	nop

c000f980 <File::exists()>:
c000f980:	83 ec 0c             	sub    esp,0xc
c000f983:	31 c0                	xor    eax,eax
c000f985:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f989:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f990:	80 f9 19             	cmp    cl,0x19
c000f993:	77 24                	ja     c000f9b9 <File::exists()+0x39>
c000f995:	8b 0c 8d 80 4b 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb480]
c000f99c:	85 c9                	test   ecx,ecx
c000f99e:	74 19                	je     c000f9b9 <File::exists()+0x39>
c000f9a0:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f9a6:	85 c9                	test   ecx,ecx
c000f9a8:	74 0f                	je     c000f9b9 <File::exists()+0x39>
c000f9aa:	50                   	push   eax
c000f9ab:	83 c2 0d             	add    edx,0xd
c000f9ae:	50                   	push   eax
c000f9af:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f9b1:	52                   	push   edx
c000f9b2:	51                   	push   ecx
c000f9b3:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000f9b6:	83 c4 10             	add    esp,0x10
c000f9b9:	83 c4 0c             	add    esp,0xc
c000f9bc:	c3                   	ret    
c000f9bd:	90                   	nop

c000f9be <File::stat(unsigned long long*, bool*)>:
c000f9be:	56                   	push   esi
c000f9bf:	53                   	push   ebx
c000f9c0:	50                   	push   eax
c000f9c1:	b8 0b 00 00 00       	mov    eax,0xb
c000f9c6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f9ca:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f9ce:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000f9d2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f9d9:	80 f9 19             	cmp    cl,0x19
c000f9dc:	77 3d                	ja     c000fa1b <File::stat(unsigned long long*, bool*)+0x5d>
c000f9de:	8b 0c 8d 80 4b 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb480]
c000f9e5:	85 c9                	test   ecx,ecx
c000f9e7:	74 32                	je     c000fa1b <File::stat(unsigned long long*, bool*)+0x5d>
c000f9e9:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f9ef:	85 c9                	test   ecx,ecx
c000f9f1:	74 28                	je     c000fa1b <File::stat(unsigned long long*, bool*)+0x5d>
c000f9f3:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f9f5:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f9f9:	74 13                	je     c000fa0e <File::stat(unsigned long long*, bool*)+0x50>
c000f9fb:	83 ec 04             	sub    esp,0x4
c000f9fe:	56                   	push   esi
c000f9ff:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000fa05:	51                   	push   ecx
c000fa06:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000fa09:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000fa0c:	eb 0a                	jmp    c000fa18 <File::stat(unsigned long long*, bool*)+0x5a>
c000fa0e:	53                   	push   ebx
c000fa0f:	83 c2 0d             	add    edx,0xd
c000fa12:	56                   	push   esi
c000fa13:	52                   	push   edx
c000fa14:	51                   	push   ecx
c000fa15:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000fa18:	83 c4 10             	add    esp,0x10
c000fa1b:	5a                   	pop    edx
c000fa1c:	5b                   	pop    ebx
c000fa1d:	5e                   	pop    esi
c000fa1e:	c3                   	ret    

c000fa1f <getcwd(Process*, char*, int)>:
c000fa1f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fa23:	31 c0                	xor    eax,eax
c000fa25:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000fa28:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000fa2c:	7d 15                	jge    c000fa43 <getcwd(Process*, char*, int)+0x24>
c000fa2e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fa32:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000fa39:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000fa3c:	84 c9                	test   cl,cl
c000fa3e:	74 06                	je     c000fa46 <getcwd(Process*, char*, int)+0x27>
c000fa40:	40                   	inc    eax
c000fa41:	eb e2                	jmp    c000fa25 <getcwd(Process*, char*, int)+0x6>
c000fa43:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000fa46:	31 c0                	xor    eax,eax
c000fa48:	c3                   	ret    

c000fa49 <setcwd(Process*, char*)>:
c000fa49:	55                   	push   ebp
c000fa4a:	57                   	push   edi
c000fa4b:	56                   	push   esi
c000fa4c:	53                   	push   ebx
c000fa4d:	81 ec 20 02 00 00    	sub    esp,0x220
c000fa53:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000fa5a:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000fa60:	57                   	push   edi
c000fa61:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000fa68:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000fa6c:	56                   	push   esi
c000fa6d:	e8 92 fa ff ff       	call   c000f504 <standardiseFiles(char*, char const*, char const*)>
c000fa72:	89 34 24             	mov    DWORD PTR [esp],esi
c000fa75:	e8 5d 0c ff ff       	call   c00006d7 <strlen>
c000fa7a:	83 c4 10             	add    esp,0x10
c000fa7d:	83 f8 02             	cmp    eax,0x2
c000fa80:	77 17                	ja     c000fa99 <setcwd(Process*, char*)+0x50>
c000fa82:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c000fa87:	83 e8 41             	sub    eax,0x41
c000fa8a:	83 f8 19             	cmp    eax,0x19
c000fa8d:	76 24                	jbe    c000fab3 <setcwd(Process*, char*)+0x6a>
c000fa8f:	b8 03 00 00 00       	mov    eax,0x3
c000fa94:	e9 cb 00 00 00       	jmp    c000fb64 <setcwd(Process*, char*)+0x11b>
c000fa99:	83 ec 0c             	sub    esp,0xc
c000fa9c:	56                   	push   esi
c000fa9d:	e8 35 0c ff ff       	call   c00006d7 <strlen>
c000faa2:	83 c4 10             	add    esp,0x10
c000faa5:	83 f8 03             	cmp    eax,0x3
c000faa8:	75 33                	jne    c000fadd <setcwd(Process*, char*)+0x94>
c000faaa:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000faaf:	75 2c                	jne    c000fadd <setcwd(Process*, char*)+0x94>
c000fab1:	eb cf                	jmp    c000fa82 <setcwd(Process*, char*)+0x39>
c000fab3:	8b 14 85 80 4b 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdb480]
c000faba:	b8 05 00 00 00       	mov    eax,0x5
c000fabf:	85 d2                	test   edx,edx
c000fac1:	0f 84 9d 00 00 00    	je     c000fb64 <setcwd(Process*, char*)+0x11b>
c000fac7:	b8 06 00 00 00       	mov    eax,0x6
c000facc:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000fad3:	0f 84 8b 00 00 00    	je     c000fb64 <setcwd(Process*, char*)+0x11b>
c000fad9:	51                   	push   ecx
c000fada:	51                   	push   ecx
c000fadb:	eb 7b                	jmp    c000fb58 <setcwd(Process*, char*)+0x10f>
c000fadd:	83 ec 0c             	sub    esp,0xc
c000fae0:	68 14 01 00 00       	push   0x114
c000fae5:	e8 58 f5 ff ff       	call   c000f042 <operator new(unsigned long)>
c000faea:	83 c4 0c             	add    esp,0xc
c000faed:	89 c3                	mov    ebx,eax
c000faef:	55                   	push   ebp
c000faf0:	56                   	push   esi
c000faf1:	50                   	push   eax
c000faf2:	e8 b7 fb ff ff       	call   c000f6ae <File::File(char const*, Process*)>
c000faf7:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000fafc:	83 c4 0c             	add    esp,0xc
c000faff:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000fb03:	50                   	push   eax
c000fb04:	8d 44 24 10          	lea    eax,[esp+0x10]
c000fb08:	50                   	push   eax
c000fb09:	53                   	push   ebx
c000fb0a:	e8 af fe ff ff       	call   c000f9be <File::stat(unsigned long long*, bool*)>
c000fb0f:	83 c4 10             	add    esp,0x10
c000fb12:	8b 13                	mov    edx,DWORD PTR [ebx]
c000fb14:	83 f8 02             	cmp    eax,0x2
c000fb17:	75 09                	jne    c000fb22 <setcwd(Process*, char*)+0xd9>
c000fb19:	83 ec 0c             	sub    esp,0xc
c000fb1c:	53                   	push   ebx
c000fb1d:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000fb20:	eb 0d                	jmp    c000fb2f <setcwd(Process*, char*)+0xe6>
c000fb22:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000fb25:	85 c0                	test   eax,eax
c000fb27:	74 10                	je     c000fb39 <setcwd(Process*, char*)+0xf0>
c000fb29:	83 ec 0c             	sub    esp,0xc
c000fb2c:	53                   	push   ebx
c000fb2d:	ff d2                	call   edx
c000fb2f:	83 c4 10             	add    esp,0x10
c000fb32:	b8 01 00 00 00       	mov    eax,0x1
c000fb37:	eb 2b                	jmp    c000fb64 <setcwd(Process*, char*)+0x11b>
c000fb39:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000fb3e:	75 10                	jne    c000fb50 <setcwd(Process*, char*)+0x107>
c000fb40:	83 ec 0c             	sub    esp,0xc
c000fb43:	53                   	push   ebx
c000fb44:	ff d2                	call   edx
c000fb46:	83 c4 10             	add    esp,0x10
c000fb49:	b8 02 00 00 00       	mov    eax,0x2
c000fb4e:	eb 14                	jmp    c000fb64 <setcwd(Process*, char*)+0x11b>
c000fb50:	83 ec 0c             	sub    esp,0xc
c000fb53:	53                   	push   ebx
c000fb54:	ff d2                	call   edx
c000fb56:	58                   	pop    eax
c000fb57:	5a                   	pop    edx
c000fb58:	56                   	push   esi
c000fb59:	57                   	push   edi
c000fb5a:	e8 fa 0b ff ff       	call   c0000759 <strcpy>
c000fb5f:	83 c4 10             	add    esp,0x10
c000fb62:	31 c0                	xor    eax,eax
c000fb64:	81 c4 1c 02 00 00    	add    esp,0x21c
c000fb6a:	5b                   	pop    ebx
c000fb6b:	5e                   	pop    esi
c000fb6c:	5f                   	pop    edi
c000fb6d:	5d                   	pop    ebp
c000fb6e:	c3                   	ret    
c000fb6f:	90                   	nop

c000fb70 <Directory::Directory(char const*, Process*)>:
c000fb70:	83 ec 0c             	sub    esp,0xc
c000fb73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fb77:	83 ec 08             	sub    esp,0x8
c000fb7a:	6a 00                	push   0x0
c000fb7c:	50                   	push   eax
c000fb7d:	e8 d2 e1 ff ff       	call   c000dd54 <UnixFile::UnixFile(int)>
c000fb82:	83 c4 10             	add    esp,0x10
c000fb85:	ba cc 19 02 c0       	mov    edx,0xc00219cc
c000fb8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fb8e:	89 10                	mov    DWORD PTR [eax],edx
c000fb90:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000fb94:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000fb9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fb9e:	83 c0 0d             	add    eax,0xd
c000fba1:	83 ec 04             	sub    esp,0x4
c000fba4:	52                   	push   edx
c000fba5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fba9:	50                   	push   eax
c000fbaa:	e8 55 f9 ff ff       	call   c000f504 <standardiseFiles(char*, char const*, char const*)>
c000fbaf:	83 c4 10             	add    esp,0x10
c000fbb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fbb6:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000fbb9:	8d 50 bf             	lea    edx,[eax-0x41]
c000fbbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fbc0:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000fbc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fbca:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000fbce:	90                   	nop
c000fbcf:	83 c4 0c             	add    esp,0xc
c000fbd2:	c3                   	ret    
c000fbd3:	90                   	nop

c000fbd4 <Directory::open()>:
c000fbd4:	53                   	push   ebx
c000fbd5:	b8 0b 00 00 00       	mov    eax,0xb
c000fbda:	83 ec 08             	sub    esp,0x8
c000fbdd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fbe1:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000fbe8:	80 fa 19             	cmp    dl,0x19
c000fbeb:	77 3d                	ja     c000fc2a <Directory::open()+0x56>
c000fbed:	8b 14 95 80 4b 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdb480]
c000fbf4:	85 d2                	test   edx,edx
c000fbf6:	74 32                	je     c000fc2a <Directory::open()+0x56>
c000fbf8:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000fbfe:	85 d2                	test   edx,edx
c000fc00:	74 28                	je     c000fc2a <Directory::open()+0x56>
c000fc02:	b8 06 00 00 00       	mov    eax,0x6
c000fc07:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000fc0b:	75 1d                	jne    c000fc2a <Directory::open()+0x56>
c000fc0d:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000fc13:	50                   	push   eax
c000fc14:	8b 02                	mov    eax,DWORD PTR [edx]
c000fc16:	51                   	push   ecx
c000fc17:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000fc1a:	51                   	push   ecx
c000fc1b:	52                   	push   edx
c000fc1c:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000fc1f:	83 c4 10             	add    esp,0x10
c000fc22:	85 c0                	test   eax,eax
c000fc24:	75 04                	jne    c000fc2a <Directory::open()+0x56>
c000fc26:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000fc2a:	83 c4 08             	add    esp,0x8
c000fc2d:	5b                   	pop    ebx
c000fc2e:	c3                   	ret    
c000fc2f:	90                   	nop

c000fc30 <Directory::close()>:
c000fc30:	53                   	push   ebx
c000fc31:	b8 0b 00 00 00       	mov    eax,0xb
c000fc36:	83 ec 08             	sub    esp,0x8
c000fc39:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000fc3d:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000fc44:	80 fa 19             	cmp    dl,0x19
c000fc47:	77 41                	ja     c000fc8a <Directory::close()+0x5a>
c000fc49:	8b 1c 95 80 4b 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdb480]
c000fc50:	85 db                	test   ebx,ebx
c000fc52:	74 36                	je     c000fc8a <Directory::close()+0x5a>
c000fc54:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000fc5b:	74 2d                	je     c000fc8a <Directory::close()+0x5a>
c000fc5d:	b8 05 00 00 00       	mov    eax,0x5
c000fc62:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000fc66:	74 22                	je     c000fc8a <Directory::close()+0x5a>
c000fc68:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000fc6c:	8b 04 95 80 4b 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdb480]
c000fc73:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000fc79:	53                   	push   ebx
c000fc7a:	53                   	push   ebx
c000fc7b:	8b 10                	mov    edx,DWORD PTR [eax]
c000fc7d:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000fc83:	50                   	push   eax
c000fc84:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000fc87:	83 c4 10             	add    esp,0x10
c000fc8a:	83 c4 08             	add    esp,0x8
c000fc8d:	5b                   	pop    ebx
c000fc8e:	c3                   	ret    
c000fc8f:	90                   	nop

c000fc90 <Directory::unlink()>:
c000fc90:	83 ec 0c             	sub    esp,0xc
c000fc93:	b8 0b 00 00 00       	mov    eax,0xb
c000fc98:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fc9c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000fca3:	80 f9 19             	cmp    cl,0x19
c000fca6:	77 2f                	ja     c000fcd7 <Directory::unlink()+0x47>
c000fca8:	8b 0c 8d 80 4b 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb480]
c000fcaf:	85 c9                	test   ecx,ecx
c000fcb1:	74 24                	je     c000fcd7 <Directory::unlink()+0x47>
c000fcb3:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000fcb9:	85 c9                	test   ecx,ecx
c000fcbb:	74 1a                	je     c000fcd7 <Directory::unlink()+0x47>
c000fcbd:	b8 06 00 00 00       	mov    eax,0x6
c000fcc2:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000fcc6:	75 0f                	jne    c000fcd7 <Directory::unlink()+0x47>
c000fcc8:	50                   	push   eax
c000fcc9:	83 c2 0d             	add    edx,0xd
c000fccc:	50                   	push   eax
c000fccd:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fccf:	52                   	push   edx
c000fcd0:	51                   	push   ecx
c000fcd1:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000fcd4:	83 c4 10             	add    esp,0x10
c000fcd7:	83 c4 0c             	add    esp,0xc
c000fcda:	c3                   	ret    
c000fcdb:	90                   	nop

c000fcdc <Directory::rename(char const*)>:
c000fcdc:	83 ec 0c             	sub    esp,0xc
c000fcdf:	b8 0b 00 00 00       	mov    eax,0xb
c000fce4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fce8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000fcef:	80 f9 19             	cmp    cl,0x19
c000fcf2:	77 32                	ja     c000fd26 <Directory::rename(char const*)+0x4a>
c000fcf4:	8b 0c 8d 80 4b 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb480]
c000fcfb:	85 c9                	test   ecx,ecx
c000fcfd:	74 27                	je     c000fd26 <Directory::rename(char const*)+0x4a>
c000fcff:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000fd05:	85 c9                	test   ecx,ecx
c000fd07:	74 1d                	je     c000fd26 <Directory::rename(char const*)+0x4a>
c000fd09:	b8 06 00 00 00       	mov    eax,0x6
c000fd0e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000fd12:	75 12                	jne    c000fd26 <Directory::rename(char const*)+0x4a>
c000fd14:	50                   	push   eax
c000fd15:	83 c2 0d             	add    edx,0xd
c000fd18:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fd1a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fd1e:	52                   	push   edx
c000fd1f:	51                   	push   ecx
c000fd20:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000fd23:	83 c4 10             	add    esp,0x10
c000fd26:	83 c4 0c             	add    esp,0xc
c000fd29:	c3                   	ret    

c000fd2a <Directory::exists()>:
c000fd2a:	83 ec 0c             	sub    esp,0xc
c000fd2d:	31 c0                	xor    eax,eax
c000fd2f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fd33:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000fd3a:	80 f9 19             	cmp    cl,0x19
c000fd3d:	77 24                	ja     c000fd63 <Directory::exists()+0x39>
c000fd3f:	8b 0c 8d 80 4b 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb480]
c000fd46:	85 c9                	test   ecx,ecx
c000fd48:	74 19                	je     c000fd63 <Directory::exists()+0x39>
c000fd4a:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000fd50:	85 c9                	test   ecx,ecx
c000fd52:	74 0f                	je     c000fd63 <Directory::exists()+0x39>
c000fd54:	50                   	push   eax
c000fd55:	83 c2 0d             	add    edx,0xd
c000fd58:	50                   	push   eax
c000fd59:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fd5b:	52                   	push   edx
c000fd5c:	51                   	push   ecx
c000fd5d:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000fd60:	83 c4 10             	add    esp,0x10
c000fd63:	83 c4 0c             	add    esp,0xc
c000fd66:	c3                   	ret    
c000fd67:	90                   	nop

c000fd68 <Directory::read(dirent*)>:
c000fd68:	83 ec 1c             	sub    esp,0x1c
c000fd6b:	b8 0b 00 00 00       	mov    eax,0xb
c000fd70:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000fd74:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000fd7b:	80 fa 19             	cmp    dl,0x19
c000fd7e:	77 30                	ja     c000fdb0 <Directory::read(dirent*)+0x48>
c000fd80:	8b 14 95 80 4b 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdb480]
c000fd87:	85 d2                	test   edx,edx
c000fd89:	74 25                	je     c000fdb0 <Directory::read(dirent*)+0x48>
c000fd8b:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000fd92:	74 1c                	je     c000fdb0 <Directory::read(dirent*)+0x48>
c000fd94:	83 ec 0c             	sub    esp,0xc
c000fd97:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fd99:	8d 54 24 18          	lea    edx,[esp+0x18]
c000fd9d:	52                   	push   edx
c000fd9e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000fda2:	6a 00                	push   0x0
c000fda4:	68 10 01 00 00       	push   0x110
c000fda9:	51                   	push   ecx
c000fdaa:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000fdad:	83 c4 20             	add    esp,0x20
c000fdb0:	83 c4 1c             	add    esp,0x1c
c000fdb3:	c3                   	ret    

c000fdb4 <Directory::create()>:
c000fdb4:	83 ec 0c             	sub    esp,0xc
c000fdb7:	b8 0b 00 00 00       	mov    eax,0xb
c000fdbc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fdc0:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000fdc7:	80 f9 19             	cmp    cl,0x19
c000fdca:	77 2f                	ja     c000fdfb <Directory::create()+0x47>
c000fdcc:	8b 0c 8d 80 4b 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb480]
c000fdd3:	85 c9                	test   ecx,ecx
c000fdd5:	74 24                	je     c000fdfb <Directory::create()+0x47>
c000fdd7:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000fddd:	85 c9                	test   ecx,ecx
c000fddf:	74 1a                	je     c000fdfb <Directory::create()+0x47>
c000fde1:	b8 06 00 00 00       	mov    eax,0x6
c000fde6:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000fdea:	75 0f                	jne    c000fdfb <Directory::create()+0x47>
c000fdec:	50                   	push   eax
c000fded:	83 c2 0d             	add    edx,0xd
c000fdf0:	50                   	push   eax
c000fdf1:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fdf3:	52                   	push   edx
c000fdf4:	51                   	push   ecx
c000fdf5:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000fdf8:	83 c4 10             	add    esp,0x10
c000fdfb:	83 c4 0c             	add    esp,0xc
c000fdfe:	c3                   	ret    
c000fdff:	90                   	nop

c000fe00 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000fe00:	b8 0a 00 00 00       	mov    eax,0xa
c000fe05:	c3                   	ret    

c000fe06 <Bus::Bus(char const*)>:
c000fe06:	83 ec 0c             	sub    esp,0xc
c000fe09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe0d:	83 ec 08             	sub    esp,0x8
c000fe10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fe14:	50                   	push   eax
c000fe15:	e8 62 09 00 00       	call   c001077c <Device::Device(char const*)>
c000fe1a:	83 c4 10             	add    esp,0x10
c000fe1d:	ba e8 19 02 c0       	mov    edx,0xc00219e8
c000fe22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe26:	89 10                	mov    DWORD PTR [eax],edx
c000fe28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe2c:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000fe36:	90                   	nop
c000fe37:	83 c4 0c             	add    esp,0xc
c000fe3a:	c3                   	ret    
c000fe3b:	90                   	nop

c000fe3c <Bus::~Bus()>:
c000fe3c:	83 ec 0c             	sub    esp,0xc
c000fe3f:	ba e8 19 02 c0       	mov    edx,0xc00219e8
c000fe44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe48:	89 10                	mov    DWORD PTR [eax],edx
c000fe4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe4e:	83 ec 0c             	sub    esp,0xc
c000fe51:	50                   	push   eax
c000fe52:	e8 db 05 00 00       	call   c0010432 <Device::~Device()>
c000fe57:	83 c4 10             	add    esp,0x10
c000fe5a:	90                   	nop
c000fe5b:	83 c4 0c             	add    esp,0xc
c000fe5e:	c3                   	ret    
c000fe5f:	90                   	nop

c000fe60 <Bus::~Bus()>:
c000fe60:	83 ec 0c             	sub    esp,0xc
c000fe63:	83 ec 0c             	sub    esp,0xc
c000fe66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fe6a:	e8 cd ff ff ff       	call   c000fe3c <Bus::~Bus()>
c000fe6f:	83 c4 10             	add    esp,0x10
c000fe72:	83 ec 08             	sub    esp,0x8
c000fe75:	68 58 01 00 00       	push   0x158
c000fe7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fe7e:	e8 ce f1 ff ff       	call   c000f051 <operator delete(void*, unsigned long)>
c000fe83:	83 c4 10             	add    esp,0x10
c000fe86:	83 c4 0c             	add    esp,0xc
c000fe89:	c3                   	ret    

c000fe8a <Buzzer::Buzzer(char const*)>:
c000fe8a:	83 ec 0c             	sub    esp,0xc
c000fe8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe91:	83 ec 08             	sub    esp,0x8
c000fe94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fe98:	50                   	push   eax
c000fe99:	e8 de 08 00 00       	call   c001077c <Device::Device(char const*)>
c000fe9e:	83 c4 10             	add    esp,0x10
c000fea1:	ba 14 1a 02 c0       	mov    edx,0xc0021a14
c000fea6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000feaa:	89 10                	mov    DWORD PTR [eax],edx
c000feac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000feb0:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000feba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000febe:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c000fec8:	90                   	nop
c000fec9:	83 c4 0c             	add    esp,0xc
c000fecc:	c3                   	ret    
c000fecd:	90                   	nop

c000fece <Buzzer::~Buzzer()>:
c000fece:	83 ec 0c             	sub    esp,0xc
c000fed1:	ba 14 1a 02 c0       	mov    edx,0xc0021a14
c000fed6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000feda:	89 10                	mov    DWORD PTR [eax],edx
c000fedc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fee0:	83 ec 0c             	sub    esp,0xc
c000fee3:	50                   	push   eax
c000fee4:	e8 49 05 00 00       	call   c0010432 <Device::~Device()>
c000fee9:	83 c4 10             	add    esp,0x10
c000feec:	90                   	nop
c000feed:	83 c4 0c             	add    esp,0xc
c000fef0:	c3                   	ret    
c000fef1:	90                   	nop

c000fef2 <Buzzer::~Buzzer()>:
c000fef2:	83 ec 0c             	sub    esp,0xc
c000fef5:	83 ec 0c             	sub    esp,0xc
c000fef8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fefc:	e8 cd ff ff ff       	call   c000fece <Buzzer::~Buzzer()>
c000ff01:	83 c4 10             	add    esp,0x10
c000ff04:	83 ec 08             	sub    esp,0x8
c000ff07:	68 5c 01 00 00       	push   0x15c
c000ff0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ff10:	e8 3c f1 ff ff       	call   c000f051 <operator delete(void*, unsigned long)>
c000ff15:	83 c4 10             	add    esp,0x10
c000ff18:	83 c4 0c             	add    esp,0xc
c000ff1b:	c3                   	ret    

c000ff1c <Buzzer::stop()>:
c000ff1c:	83 ec 14             	sub    esp,0x14
c000ff1f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ff23:	8b 10                	mov    edx,DWORD PTR [eax]
c000ff25:	6a 00                	push   0x0
c000ff27:	50                   	push   eax
c000ff28:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000ff2b:	83 c4 1c             	add    esp,0x1c
c000ff2e:	c3                   	ret    

c000ff2f <beepThread(void*)>:
c000ff2f:	53                   	push   ebx
c000ff30:	83 ec 08             	sub    esp,0x8
c000ff33:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ff37:	e8 f5 89 00 00       	call   c0018931 <unlockScheduler()>
c000ff3c:	52                   	push   edx
c000ff3d:	b8 40 42 0f 00       	mov    eax,0xf4240
c000ff42:	52                   	push   edx
c000ff43:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c000ff49:	52                   	push   edx
c000ff4a:	50                   	push   eax
c000ff4b:	e8 3d 8f 00 00       	call   c0018e8d <nanoSleep(unsigned long long)>
c000ff50:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ff53:	e8 c4 ff ff ff       	call   c000ff1c <Buzzer::stop()>
c000ff58:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000ff60:	83 c4 18             	add    esp,0x18
c000ff63:	5b                   	pop    ebx
c000ff64:	e9 68 8e 00 00       	jmp    c0018dd1 <blockTask(TaskState)>
c000ff69:	90                   	nop

c000ff6a <Buzzer::beep(int, int, bool)>:
c000ff6a:	57                   	push   edi
c000ff6b:	56                   	push   esi
c000ff6c:	53                   	push   ebx
c000ff6d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ff71:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ff75:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ff79:	52                   	push   edx
c000ff7a:	52                   	push   edx
c000ff7b:	8b 06                	mov    eax,DWORD PTR [esi]
c000ff7d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ff81:	56                   	push   esi
c000ff82:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ff85:	89 f8                	mov    eax,edi
c000ff87:	83 c4 10             	add    esp,0x10
c000ff8a:	84 c0                	test   al,al
c000ff8c:	74 1f                	je     c000ffad <Buzzer::beep(int, int, bool)+0x43>
c000ff8e:	50                   	push   eax
c000ff8f:	50                   	push   eax
c000ff90:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c000ff96:	99                   	cdq    
c000ff97:	52                   	push   edx
c000ff98:	50                   	push   eax
c000ff99:	e8 ef 8e 00 00       	call   c0018e8d <nanoSleep(unsigned long long)>
c000ff9e:	83 c4 10             	add    esp,0x10
c000ffa1:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000ffa5:	5b                   	pop    ebx
c000ffa6:	5e                   	pop    esi
c000ffa7:	5f                   	pop    edi
c000ffa8:	e9 6f ff ff ff       	jmp    c000ff1c <Buzzer::stop()>
c000ffad:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c000ffb3:	a1 d4 59 02 c0       	mov    eax,ds:0xc00259d4
c000ffb8:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c000ffc0:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c000ffc4:	c7 44 24 14 2f ff 00 c0 	mov    DWORD PTR [esp+0x14],0xc000ff2f
c000ffcc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ffd0:	5b                   	pop    ebx
c000ffd1:	5e                   	pop    esi
c000ffd2:	5f                   	pop    edi
c000ffd3:	e9 8c 8a 00 00       	jmp    c0018a64 <Process::createThread(void (*)(void*), void*, int)>

c000ffd8 <loadClockSettings()>:
c000ffd8:	c7 05 f4 46 02 c0 0a 00 00 00 	mov    DWORD PTR ds:0xc00246f4,0xa
c000ffe2:	c6 05 f1 46 02 c0 00 	mov    BYTE PTR ds:0xc00246f1,0x0
c000ffe9:	c6 05 f0 46 02 c0 01 	mov    BYTE PTR ds:0xc00246f0,0x1
c000fff0:	c3                   	ret    
c000fff1:	90                   	nop

c000fff2 <Clock::Clock(char const*)>:
c000fff2:	83 ec 0c             	sub    esp,0xc
c000fff5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fff9:	83 ec 08             	sub    esp,0x8
c000fffc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010000:	50                   	push   eax
c0010001:	e8 76 07 00 00       	call   c001077c <Device::Device(char const*)>
c0010006:	83 c4 10             	add    esp,0x10
c0010009:	ba 44 1a 02 c0       	mov    edx,0xc0021a44
c001000e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010012:	89 10                	mov    DWORD PTR [eax],edx
c0010014:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010018:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c0010022:	90                   	nop
c0010023:	83 c4 0c             	add    esp,0xc
c0010026:	c3                   	ret    
c0010027:	90                   	nop

c0010028 <Clock::~Clock()>:
c0010028:	83 ec 0c             	sub    esp,0xc
c001002b:	ba 44 1a 02 c0       	mov    edx,0xc0021a44
c0010030:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010034:	89 10                	mov    DWORD PTR [eax],edx
c0010036:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001003a:	83 ec 0c             	sub    esp,0xc
c001003d:	50                   	push   eax
c001003e:	e8 ef 03 00 00       	call   c0010432 <Device::~Device()>
c0010043:	83 c4 10             	add    esp,0x10
c0010046:	90                   	nop
c0010047:	83 c4 0c             	add    esp,0xc
c001004a:	c3                   	ret    
c001004b:	90                   	nop

c001004c <Clock::~Clock()>:
c001004c:	83 ec 0c             	sub    esp,0xc
c001004f:	83 ec 0c             	sub    esp,0xc
c0010052:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010056:	e8 cd ff ff ff       	call   c0010028 <Clock::~Clock()>
c001005b:	83 c4 10             	add    esp,0x10
c001005e:	83 ec 08             	sub    esp,0x8
c0010061:	68 58 01 00 00       	push   0x158
c0010066:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001006a:	e8 e2 ef ff ff       	call   c000f051 <operator delete(void*, unsigned long)>
c001006f:	83 c4 10             	add    esp,0x10
c0010072:	83 c4 0c             	add    esp,0xc
c0010075:	c3                   	ret    

c0010076 <Clock::timeInSecondsLocal()>:
c0010076:	53                   	push   ebx
c0010077:	83 ec 14             	sub    esp,0x14
c001007a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001007e:	8b 10                	mov    edx,DWORD PTR [eax]
c0010080:	50                   	push   eax
c0010081:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0010084:	0f b6 0d f0 46 02 c0 	movzx  ecx,BYTE PTR ds:0xc00246f0
c001008b:	03 0d f4 46 02 c0    	add    ecx,DWORD PTR ds:0xc00246f4
c0010091:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0010097:	89 cb                	mov    ebx,ecx
c0010099:	c1 fb 1f             	sar    ebx,0x1f
c001009c:	01 c8                	add    eax,ecx
c001009e:	11 da                	adc    edx,ebx
c00100a0:	83 c4 10             	add    esp,0x10
c00100a3:	31 c9                	xor    ecx,ecx
c00100a5:	80 3d f1 46 02 c0 00 	cmp    BYTE PTR ds:0xc00246f1,0x0
c00100ac:	74 05                	je     c00100b3 <Clock::timeInSecondsLocal()+0x3d>
c00100ae:	b9 08 07 00 00       	mov    ecx,0x708
c00100b3:	31 db                	xor    ebx,ebx
c00100b5:	01 c8                	add    eax,ecx
c00100b7:	11 da                	adc    edx,ebx
c00100b9:	83 c4 08             	add    esp,0x8
c00100bc:	5b                   	pop    ebx
c00100bd:	c3                   	ret    

c00100be <Clock::setTimeInSecondsLocal(unsigned long long)>:
c00100be:	57                   	push   edi
c00100bf:	56                   	push   esi
c00100c0:	53                   	push   ebx
c00100c1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00100c5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00100c9:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00100cd:	8b 01                	mov    eax,DWORD PTR [ecx]
c00100cf:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c00100d2:	0f b6 05 f0 46 02 c0 	movzx  eax,BYTE PTR ds:0xc00246f0
c00100d9:	03 05 f4 46 02 c0    	add    eax,DWORD PTR ds:0xc00246f4
c00100df:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c00100e5:	99                   	cdq    
c00100e6:	29 c6                	sub    esi,eax
c00100e8:	19 d7                	sbb    edi,edx
c00100ea:	89 f0                	mov    eax,esi
c00100ec:	89 fa                	mov    edx,edi
c00100ee:	31 f6                	xor    esi,esi
c00100f0:	80 3d f1 46 02 c0 00 	cmp    BYTE PTR ds:0xc00246f1,0x0
c00100f7:	74 05                	je     c00100fe <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c00100f9:	be 08 07 00 00       	mov    esi,0x708
c00100fe:	31 ff                	xor    edi,edi
c0010100:	29 f0                	sub    eax,esi
c0010102:	19 fa                	sbb    edx,edi
c0010104:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0010108:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001010c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0010110:	89 d8                	mov    eax,ebx
c0010112:	5b                   	pop    ebx
c0010113:	5e                   	pop    esi
c0010114:	5f                   	pop    edi
c0010115:	ff e0                	jmp    eax

c0010117 <datetimeToSeconds(datetime_t)>:
c0010117:	55                   	push   ebp
c0010118:	57                   	push   edi
c0010119:	56                   	push   esi
c001011a:	53                   	push   ebx
c001011b:	83 ec 14             	sub    esp,0x14
c001011e:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0010122:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0010126:	0f b6 f5             	movzx  esi,ch
c0010129:	6b f6 3c             	imul   esi,esi,0x3c
c001012c:	89 cf                	mov    edi,ecx
c001012e:	89 d3                	mov    ebx,edx
c0010130:	0f b6 c9             	movzx  ecx,cl
c0010133:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0010139:	0f b6 c6             	movzx  eax,dh
c001013c:	c1 ef 10             	shr    edi,0x10
c001013f:	48                   	dec    eax
c0010140:	c1 eb 10             	shr    ebx,0x10
c0010143:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0010147:	89 f8                	mov    eax,edi
c0010149:	0f b6 f8             	movzx  edi,al
c001014c:	01 fe                	add    esi,edi
c001014e:	01 f1                	add    ecx,esi
c0010150:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0010154:	c1 f9 1f             	sar    ecx,0x1f
c0010157:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001015b:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c0010160:	0f b6 d2             	movzx  edx,dl
c0010163:	66 81 eb 6c 07       	sub    bx,0x76c
c0010168:	8b 0c 8d 80 1a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffde580]
c001016f:	0f b7 f3             	movzx  esi,bx
c0010172:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c0010176:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c001017b:	76 29                	jbe    c00101a6 <datetimeToSeconds(datetime_t)+0x8f>
c001017d:	f6 c3 03             	test   bl,0x3
c0010180:	75 24                	jne    c00101a6 <datetimeToSeconds(datetime_t)+0x8f>
c0010182:	31 d2                	xor    edx,edx
c0010184:	bf 64 00 00 00       	mov    edi,0x64
c0010189:	89 d8                	mov    eax,ebx
c001018b:	66 f7 f7             	div    di
c001018e:	66 85 d2             	test   dx,dx
c0010191:	75 12                	jne    c00101a5 <datetimeToSeconds(datetime_t)+0x8e>
c0010193:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0010199:	bf 90 01 00 00       	mov    edi,0x190
c001019e:	99                   	cdq    
c001019f:	f7 ff                	idiv   edi
c00101a1:	85 d2                	test   edx,edx
c00101a3:	75 01                	jne    c00101a6 <datetimeToSeconds(datetime_t)+0x8f>
c00101a5:	41                   	inc    ecx
c00101a6:	66 83 fb 46          	cmp    bx,0x46
c00101aa:	76 45                	jbe    c00101f1 <datetimeToSeconds(datetime_t)+0xda>
c00101ac:	bb 46 00 00 00       	mov    ebx,0x46
c00101b1:	bf 64 00 00 00       	mov    edi,0x64
c00101b6:	bd 90 01 00 00       	mov    ebp,0x190
c00101bb:	b8 6d 01 00 00       	mov    eax,0x16d
c00101c0:	f6 c3 03             	test   bl,0x3
c00101c3:	75 23                	jne    c00101e8 <datetimeToSeconds(datetime_t)+0xd1>
c00101c5:	89 d8                	mov    eax,ebx
c00101c7:	99                   	cdq    
c00101c8:	f7 ff                	idiv   edi
c00101ca:	85 d2                	test   edx,edx
c00101cc:	b8 6e 01 00 00       	mov    eax,0x16e
c00101d1:	75 15                	jne    c00101e8 <datetimeToSeconds(datetime_t)+0xd1>
c00101d3:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c00101d9:	99                   	cdq    
c00101da:	f7 fd                	idiv   ebp
c00101dc:	31 c0                	xor    eax,eax
c00101de:	85 d2                	test   edx,edx
c00101e0:	0f 94 c0             	sete   al
c00101e3:	05 6d 01 00 00       	add    eax,0x16d
c00101e8:	43                   	inc    ebx
c00101e9:	01 c1                	add    ecx,eax
c00101eb:	39 f3                	cmp    ebx,esi
c00101ed:	7c cc                	jl     c00101bb <datetimeToSeconds(datetime_t)+0xa4>
c00101ef:	eb 3b                	jmp    c001022c <datetimeToSeconds(datetime_t)+0x115>
c00101f1:	74 39                	je     c001022c <datetimeToSeconds(datetime_t)+0x115>
c00101f3:	b8 45 00 00 00       	mov    eax,0x45
c00101f8:	89 c2                	mov    edx,eax
c00101fa:	83 e2 03             	and    edx,0x3
c00101fd:	39 f0                	cmp    eax,esi
c00101ff:	7e 13                	jle    c0010214 <datetimeToSeconds(datetime_t)+0xfd>
c0010201:	85 d2                	test   edx,edx
c0010203:	0f 94 c2             	sete   dl
c0010206:	0f b6 d2             	movzx  edx,dl
c0010209:	81 c2 6d 01 00 00    	add    edx,0x16d
c001020f:	48                   	dec    eax
c0010210:	29 d1                	sub    ecx,edx
c0010212:	eb e4                	jmp    c00101f8 <datetimeToSeconds(datetime_t)+0xe1>
c0010214:	b8 6d 01 00 00       	mov    eax,0x16d
c0010219:	85 d2                	test   edx,edx
c001021b:	75 0d                	jne    c001022a <datetimeToSeconds(datetime_t)+0x113>
c001021d:	31 c0                	xor    eax,eax
c001021f:	66 85 db             	test   bx,bx
c0010222:	0f 95 c0             	setne  al
c0010225:	05 6d 01 00 00       	add    eax,0x16d
c001022a:	29 c1                	sub    ecx,eax
c001022c:	b8 80 51 01 00       	mov    eax,0x15180
c0010231:	f7 e9                	imul   ecx
c0010233:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0010237:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c001023b:	83 c4 14             	add    esp,0x14
c001023e:	5b                   	pop    ebx
c001023f:	5e                   	pop    esi
c0010240:	5f                   	pop    edi
c0010241:	5d                   	pop    ebp
c0010242:	c3                   	ret    
c0010243:	90                   	nop

c0010244 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c0010244:	57                   	push   edi
c0010245:	56                   	push   esi
c0010246:	53                   	push   ebx
c0010247:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001024b:	8b 06                	mov    eax,DWORD PTR [esi]
c001024d:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c0010250:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010254:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010258:	e8 ba fe ff ff       	call   c0010117 <datetimeToSeconds(datetime_t)>
c001025d:	59                   	pop    ecx
c001025e:	0f b6 0d f0 46 02 c0 	movzx  ecx,BYTE PTR ds:0xc00246f0
c0010265:	03 0d f4 46 02 c0    	add    ecx,DWORD PTR ds:0xc00246f4
c001026b:	5b                   	pop    ebx
c001026c:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0010272:	89 cb                	mov    ebx,ecx
c0010274:	c1 fb 1f             	sar    ebx,0x1f
c0010277:	29 c8                	sub    eax,ecx
c0010279:	19 da                	sbb    edx,ebx
c001027b:	31 c9                	xor    ecx,ecx
c001027d:	80 3d f1 46 02 c0 00 	cmp    BYTE PTR ds:0xc00246f1,0x0
c0010284:	74 05                	je     c001028b <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c0010286:	b9 08 07 00 00       	mov    ecx,0x708
c001028b:	31 db                	xor    ebx,ebx
c001028d:	29 c8                	sub    eax,ecx
c001028f:	19 da                	sbb    edx,ebx
c0010291:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0010295:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0010299:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001029d:	5b                   	pop    ebx
c001029e:	89 f8                	mov    eax,edi
c00102a0:	5e                   	pop    esi
c00102a1:	5f                   	pop    edi
c00102a2:	ff e0                	jmp    eax

c00102a4 <secondsToDatetime(unsigned long long)>:
c00102a4:	55                   	push   ebp
c00102a5:	57                   	push   edi
c00102a6:	56                   	push   esi
c00102a7:	53                   	push   ebx
c00102a8:	83 ec 1c             	sub    esp,0x1c
c00102ab:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00102af:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00102b3:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00102b7:	6a 00                	push   0x0
c00102b9:	68 80 51 01 00       	push   0x15180
c00102be:	55                   	push   ebp
c00102bf:	57                   	push   edi
c00102c0:	e8 07 f1 00 00       	call   c001f3cc <__udivdi3>
c00102c5:	83 c4 10             	add    esp,0x10
c00102c8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00102cc:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c00102d2:	6a 00                	push   0x0
c00102d4:	68 80 51 01 00       	push   0x15180
c00102d9:	55                   	push   ebp
c00102da:	57                   	push   edi
c00102db:	e8 ec f1 00 00       	call   c001f4cc <__umoddi3>
c00102e0:	bf 10 0e 00 00       	mov    edi,0xe10
c00102e5:	83 c4 10             	add    esp,0x10
c00102e8:	99                   	cdq    
c00102e9:	f7 ff                	idiv   edi
c00102eb:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c00102ee:	89 d0                	mov    eax,edx
c00102f0:	99                   	cdq    
c00102f1:	bf 3c 00 00 00       	mov    edi,0x3c
c00102f6:	f7 ff                	idiv   edi
c00102f8:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c00102fb:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c00102fe:	85 db                	test   ebx,ebx
c0010300:	79 11                	jns    c0010313 <secondsToDatetime(unsigned long long)+0x6f>
c0010302:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010306:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c001030c:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0010311:	eb 07                	jmp    c001031a <secondsToDatetime(unsigned long long)+0x76>
c0010313:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0010318:	89 d8                	mov    eax,ebx
c001031a:	99                   	cdq    
c001031b:	f7 f9                	idiv   ecx
c001031d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010321:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c0010326:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c001032e:	01 c3                	add    ebx,eax
c0010330:	31 d2                	xor    edx,edx
c0010332:	89 d8                	mov    eax,ebx
c0010334:	bf b4 05 00 00       	mov    edi,0x5b4
c0010339:	f7 f1                	div    ecx
c001033b:	31 d2                	xor    edx,edx
c001033d:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c0010342:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c0010345:	89 d8                	mov    eax,ebx
c0010347:	f7 f7                	div    edi
c0010349:	29 c1                	sub    ecx,eax
c001034b:	31 d2                	xor    edx,edx
c001034d:	89 d8                	mov    eax,ebx
c001034f:	f7 f5                	div    ebp
c0010351:	29 c1                	sub    ecx,eax
c0010353:	bd 6d 01 00 00       	mov    ebp,0x16d
c0010358:	89 c8                	mov    eax,ecx
c001035a:	31 d2                	xor    edx,edx
c001035c:	f7 f5                	div    ebp
c001035e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010362:	bd 94 8e 00 00       	mov    ebp,0x8e94
c0010367:	89 c8                	mov    eax,ecx
c0010369:	31 d2                	xor    edx,edx
c001036b:	f7 f5                	div    ebp
c001036d:	01 c3                	add    ebx,eax
c001036f:	31 d2                	xor    edx,edx
c0010371:	89 c8                	mov    eax,ecx
c0010373:	f7 f7                	div    edi
c0010375:	29 c3                	sub    ebx,eax
c0010377:	bf 99 00 00 00       	mov    edi,0x99
c001037c:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c0010384:	29 c3                	sub    ebx,eax
c0010386:	31 d2                	xor    edx,edx
c0010388:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c001038b:	8d 6b 01             	lea    ebp,[ebx+0x1]
c001038e:	83 c1 02             	add    ecx,0x2
c0010391:	bb 05 00 00 00       	mov    ebx,0x5
c0010396:	89 c8                	mov    eax,ecx
c0010398:	f7 f7                	div    edi
c001039a:	89 c7                	mov    edi,eax
c001039c:	31 d2                	xor    edx,edx
c001039e:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c00103a4:	83 c0 02             	add    eax,0x2
c00103a7:	f7 f3                	div    ebx
c00103a9:	89 eb                	mov    ebx,ebp
c00103ab:	29 c3                	sub    ebx,eax
c00103ad:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c00103b3:	19 c0                	sbb    eax,eax
c00103b5:	31 d2                	xor    edx,edx
c00103b7:	83 e0 0c             	and    eax,0xc
c00103ba:	88 1e                	mov    BYTE PTR [esi],bl
c00103bc:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c00103c0:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c00103c8:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00103cc:	83 f9 01             	cmp    ecx,0x1
c00103cf:	0f 96 c2             	setbe  dl
c00103d2:	01 d0                	add    eax,edx
c00103d4:	41                   	inc    ecx
c00103d5:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c00103d9:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c00103dc:	83 c4 1c             	add    esp,0x1c
c00103df:	89 f0                	mov    eax,esi
c00103e1:	5b                   	pop    ebx
c00103e2:	5e                   	pop    esi
c00103e3:	5f                   	pop    edi
c00103e4:	5d                   	pop    ebp
c00103e5:	c2 04 00             	ret    0x4

c00103e8 <Clock::timeInDatetimeLocal()>:
c00103e8:	53                   	push   ebx
c00103e9:	83 ec 14             	sub    esp,0x14
c00103ec:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00103f0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00103f4:	e8 7d fc ff ff       	call   c0010076 <Clock::timeInSecondsLocal()>
c00103f9:	83 c4 0c             	add    esp,0xc
c00103fc:	52                   	push   edx
c00103fd:	50                   	push   eax
c00103fe:	53                   	push   ebx
c00103ff:	e8 a0 fe ff ff       	call   c00102a4 <secondsToDatetime(unsigned long long)>
c0010404:	83 c4 14             	add    esp,0x14
c0010407:	89 d8                	mov    eax,ebx
c0010409:	5b                   	pop    ebx
c001040a:	c2 04 00             	ret    0x4
c001040d:	90                   	nop

c001040e <Device::hibernate()>:
c001040e:	c3                   	ret    
c001040f:	90                   	nop

c0010410 <Device::wake()>:
c0010410:	c3                   	ret    
c0010411:	90                   	nop

c0010412 <Device::detect()>:
c0010412:	c3                   	ret    
c0010413:	90                   	nop

c0010414 <Device::disableLegacy()>:
c0010414:	c3                   	ret    
c0010415:	90                   	nop

c0010416 <Device::powerSaving(PowerSavingLevel)>:
c0010416:	c3                   	ret    
c0010417:	90                   	nop

c0010418 <DriverlessDevice::close(int, int, void*)>:
c0010418:	31 c0                	xor    eax,eax
c001041a:	c3                   	ret    
c001041b:	90                   	nop

c001041c <DriverlessDevice::detect()>:
c001041c:	c3                   	ret    
c001041d:	90                   	nop

c001041e <DriverlessDevice::open(int, int, void*)>:
c001041e:	83 ec 18             	sub    esp,0x18
c0010421:	68 b0 1a 02 c0       	push   0xc0021ab0
c0010426:	e8 17 55 00 00       	call   c0015942 <Krnl::panic(char const*)>
c001042b:	83 c8 ff             	or     eax,0xffffffff
c001042e:	83 c4 1c             	add    esp,0x1c
c0010431:	c3                   	ret    

c0010432 <Device::~Device()>:
c0010432:	ba d8 1a 02 c0       	mov    edx,0xc0021ad8
c0010437:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001043b:	89 10                	mov    DWORD PTR [eax],edx
c001043d:	90                   	nop
c001043e:	c3                   	ret    
c001043f:	90                   	nop

c0010440 <Device::~Device()>:
c0010440:	83 ec 0c             	sub    esp,0xc
c0010443:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010447:	e8 e6 ff ff ff       	call   c0010432 <Device::~Device()>
c001044c:	83 c4 04             	add    esp,0x4
c001044f:	83 ec 08             	sub    esp,0x8
c0010452:	68 58 01 00 00       	push   0x158
c0010457:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001045b:	e8 f1 eb ff ff       	call   c000f051 <operator delete(void*, unsigned long)>
c0010460:	83 c4 10             	add    esp,0x10
c0010463:	83 c4 0c             	add    esp,0xc
c0010466:	c3                   	ret    
c0010467:	90                   	nop

c0010468 <Device::findAndLoadDriver()>:
c0010468:	c3                   	ret    
c0010469:	90                   	nop

c001046a <Device::preOpenPCI(PCIDeviceInfo)>:
c001046a:	57                   	push   edi
c001046b:	b9 09 00 00 00       	mov    ecx,0x9
c0010470:	56                   	push   esi
c0010471:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0010475:	81 c7 18 01 00 00    	add    edi,0x118
c001047b:	8d 74 24 10          	lea    esi,[esp+0x10]
c001047f:	c7 47 fc 02 00 00 00 	mov    DWORD PTR [edi-0x4],0x2
c0010486:	fc                   	cld    
c0010487:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010489:	5e                   	pop    esi
c001048a:	5f                   	pop    edi
c001048b:	c3                   	ret    

c001048c <Device::preOpenACPI(void*, char*, char*)>:
c001048c:	56                   	push   esi
c001048d:	53                   	push   ebx
c001048e:	83 ec 08             	sub    esp,0x8
c0010491:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010495:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010499:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001049d:	89 83 18 01 00 00    	mov    DWORD PTR [ebx+0x118],eax
c00104a3:	c7 83 14 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x114],0x3
c00104ad:	6a 1e                	push   0x1e
c00104af:	8d 83 1c 01 00 00    	lea    eax,[ebx+0x11c]
c00104b5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00104b9:	81 c3 3a 01 00 00    	add    ebx,0x13a
c00104bf:	50                   	push   eax
c00104c0:	e8 bf 01 ff ff       	call   c0000684 <memcpy>
c00104c5:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c00104c9:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00104cd:	c7 44 24 28 0e 00 00 00 	mov    DWORD PTR [esp+0x28],0xe
c00104d5:	83 c4 14             	add    esp,0x14
c00104d8:	5b                   	pop    ebx
c00104d9:	5e                   	pop    esi
c00104da:	e9 a5 01 ff ff       	jmp    c0000684 <memcpy>
c00104df:	90                   	nop

c00104e0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00104e0:	55                   	push   ebp
c00104e1:	57                   	push   edi
c00104e2:	56                   	push   esi
c00104e3:	53                   	push   ebx
c00104e4:	83 ec 0c             	sub    esp,0xc
c00104e7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00104eb:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00104ef:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00104f3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00104f7:	0f b6 5c 24 2c       	movzx  ebx,BYTE PTR [esp+0x2c]
c00104fc:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0010503:	75 0b                	jne    c0010510 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x30>
c0010505:	8b 00                	mov    eax,DWORD PTR [eax]
c0010507:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c001050b:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001050e:	eb 24                	jmp    c0010534 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x54>
c0010510:	e8 c1 42 00 00       	call   c00147d6 <thisCPU()>
c0010515:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c001051b:	8b 10                	mov    edx,DWORD PTR [eax]
c001051d:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c0010521:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0010525:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c0010529:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c001052d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0010531:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0010534:	83 c4 0c             	add    esp,0xc
c0010537:	5b                   	pop    ebx
c0010538:	5e                   	pop    esi
c0010539:	5f                   	pop    edi
c001053a:	5d                   	pop    ebp
c001053b:	ff e0                	jmp    eax
c001053d:	90                   	nop

c001053e <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c001053e:	57                   	push   edi
c001053f:	56                   	push   esi
c0010540:	53                   	push   ebx
c0010541:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010545:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010549:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001054d:	0f b6 5c 24 1c       	movzx  ebx,BYTE PTR [esp+0x1c]
c0010552:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0010559:	75 0b                	jne    c0010566 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x28>
c001055b:	8b 00                	mov    eax,DWORD PTR [eax]
c001055d:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c0010561:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0010564:	eb 20                	jmp    c0010586 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x48>
c0010566:	e8 6b 42 00 00       	call   c00147d6 <thisCPU()>
c001056b:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0010571:	8b 10                	mov    edx,DWORD PTR [eax]
c0010573:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c0010577:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c001057b:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001057f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010583:	8b 42 30             	mov    eax,DWORD PTR [edx+0x30]
c0010586:	5b                   	pop    ebx
c0010587:	5e                   	pop    esi
c0010588:	5f                   	pop    edi
c0010589:	ff e0                	jmp    eax
c001058b:	90                   	nop

c001058c <Device::addChild(Device*)>:
c001058c:	53                   	push   ebx
c001058d:	83 ec 08             	sub    esp,0x8
c0010590:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010594:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010598:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c001059e:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c00105a4:	8b 13                	mov    edx,DWORD PTR [ebx]
c00105a6:	85 d2                	test   edx,edx
c00105a8:	74 04                	je     c00105ae <Device::addChild(Device*)+0x22>
c00105aa:	89 d3                	mov    ebx,edx
c00105ac:	eb f6                	jmp    c00105a4 <Device::addChild(Device*)+0x18>
c00105ae:	83 ec 0c             	sub    esp,0xc
c00105b1:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00105b4:	6a 08                	push   0x8
c00105b6:	e8 87 ea ff ff       	call   c000f042 <operator new(unsigned long)>
c00105bb:	89 03                	mov    DWORD PTR [ebx],eax
c00105bd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00105c3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00105ca:	83 c4 18             	add    esp,0x18
c00105cd:	5b                   	pop    ebx
c00105ce:	c3                   	ret    
c00105cf:	90                   	nop

c00105d0 <Device::removeAllChildren()>:
c00105d0:	56                   	push   esi
c00105d1:	53                   	push   ebx
c00105d2:	52                   	push   edx
c00105d3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00105d7:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c00105dd:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00105e0:	74 17                	je     c00105f9 <Device::removeAllChildren()+0x29>
c00105e2:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00105e5:	85 c0                	test   eax,eax
c00105e7:	74 0c                	je     c00105f5 <Device::removeAllChildren()+0x25>
c00105e9:	83 ec 0c             	sub    esp,0xc
c00105ec:	8b 10                	mov    edx,DWORD PTR [eax]
c00105ee:	50                   	push   eax
c00105ef:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00105f2:	83 c4 10             	add    esp,0x10
c00105f5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00105f7:	eb e4                	jmp    c00105dd <Device::removeAllChildren()+0xd>
c00105f9:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00105ff:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010605:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001060b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010612:	58                   	pop    eax
c0010613:	5b                   	pop    ebx
c0010614:	5e                   	pop    esi
c0010615:	c3                   	ret    

c0010616 <Device::hibernateAll()>:
c0010616:	53                   	push   ebx
c0010617:	83 ec 14             	sub    esp,0x14
c001061a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001061e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010620:	53                   	push   ebx
c0010621:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0010624:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001062a:	83 c4 10             	add    esp,0x10
c001062d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0010630:	74 0f                	je     c0010641 <Device::hibernateAll()+0x2b>
c0010632:	83 ec 0c             	sub    esp,0xc
c0010635:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0010638:	e8 d9 ff ff ff       	call   c0010616 <Device::hibernateAll()>
c001063d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001063f:	eb e9                	jmp    c001062a <Device::hibernateAll()+0x14>
c0010641:	83 c4 08             	add    esp,0x8
c0010644:	5b                   	pop    ebx
c0010645:	c3                   	ret    

c0010646 <Device::wakeAll()>:
c0010646:	53                   	push   ebx
c0010647:	83 ec 14             	sub    esp,0x14
c001064a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001064e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010650:	53                   	push   ebx
c0010651:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0010654:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001065a:	83 c4 10             	add    esp,0x10
c001065d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0010660:	74 0f                	je     c0010671 <Device::wakeAll()+0x2b>
c0010662:	83 ec 0c             	sub    esp,0xc
c0010665:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0010668:	e8 d9 ff ff ff       	call   c0010646 <Device::wakeAll()>
c001066d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001066f:	eb e9                	jmp    c001065a <Device::wakeAll()+0x14>
c0010671:	83 c4 08             	add    esp,0x8
c0010674:	5b                   	pop    ebx
c0010675:	c3                   	ret    

c0010676 <Device::detectAll()>:
c0010676:	53                   	push   ebx
c0010677:	83 ec 14             	sub    esp,0x14
c001067a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001067e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010680:	53                   	push   ebx
c0010681:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0010684:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001068a:	83 c4 10             	add    esp,0x10
c001068d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0010690:	74 0f                	je     c00106a1 <Device::detectAll()+0x2b>
c0010692:	83 ec 0c             	sub    esp,0xc
c0010695:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0010698:	e8 d9 ff ff ff       	call   c0010676 <Device::detectAll()>
c001069d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001069f:	eb e9                	jmp    c001068a <Device::detectAll()+0x14>
c00106a1:	83 c4 08             	add    esp,0x8
c00106a4:	5b                   	pop    ebx
c00106a5:	c3                   	ret    

c00106a6 <Device::disableLegacyAll()>:
c00106a6:	53                   	push   ebx
c00106a7:	83 ec 14             	sub    esp,0x14
c00106aa:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00106ae:	8b 03                	mov    eax,DWORD PTR [ebx]
c00106b0:	53                   	push   ebx
c00106b1:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c00106b4:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00106ba:	83 c4 10             	add    esp,0x10
c00106bd:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00106c0:	74 0f                	je     c00106d1 <Device::disableLegacyAll()+0x2b>
c00106c2:	83 ec 0c             	sub    esp,0xc
c00106c5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00106c8:	e8 d9 ff ff ff       	call   c00106a6 <Device::disableLegacyAll()>
c00106cd:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00106cf:	eb e9                	jmp    c00106ba <Device::disableLegacyAll()+0x14>
c00106d1:	83 c4 08             	add    esp,0x8
c00106d4:	5b                   	pop    ebx
c00106d5:	c3                   	ret    

c00106d6 <Device::loadDriversForAll()>:
c00106d6:	53                   	push   ebx
c00106d7:	83 ec 08             	sub    esp,0x8
c00106da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106de:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00106e4:	8b 18                	mov    ebx,DWORD PTR [eax]
c00106e6:	85 db                	test   ebx,ebx
c00106e8:	74 12                	je     c00106fc <Device::loadDriversForAll()+0x26>
c00106ea:	83 ec 0c             	sub    esp,0xc
c00106ed:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00106f0:	e8 e1 ff ff ff       	call   c00106d6 <Device::loadDriversForAll()>
c00106f5:	83 c4 10             	add    esp,0x10
c00106f8:	89 d8                	mov    eax,ebx
c00106fa:	eb e8                	jmp    c00106e4 <Device::loadDriversForAll()+0xe>
c00106fc:	83 c4 08             	add    esp,0x8
c00106ff:	5b                   	pop    ebx
c0010700:	c3                   	ret    
c0010701:	90                   	nop

c0010702 <Device::closeAll()>:
c0010702:	53                   	push   ebx
c0010703:	83 ec 08             	sub    esp,0x8
c0010706:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001070a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001070c:	6a 00                	push   0x0
c001070e:	6a 00                	push   0x0
c0010710:	6a 00                	push   0x0
c0010712:	53                   	push   ebx
c0010713:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0010716:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001071c:	83 c4 10             	add    esp,0x10
c001071f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0010722:	74 0f                	je     c0010733 <Device::closeAll()+0x31>
c0010724:	83 ec 0c             	sub    esp,0xc
c0010727:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001072a:	e8 d3 ff ff ff       	call   c0010702 <Device::closeAll()>
c001072f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0010731:	eb e9                	jmp    c001071c <Device::closeAll()+0x1a>
c0010733:	83 c4 08             	add    esp,0x8
c0010736:	5b                   	pop    ebx
c0010737:	c3                   	ret    

c0010738 <Device::powerSavingAll(PowerSavingLevel)>:
c0010738:	56                   	push   esi
c0010739:	53                   	push   ebx
c001073a:	83 ec 0c             	sub    esp,0xc
c001073d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010741:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0010745:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010747:	56                   	push   esi
c0010748:	53                   	push   ebx
c0010749:	ff 50 20             	call   DWORD PTR [eax+0x20]
c001074c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0010752:	83 c4 10             	add    esp,0x10
c0010755:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0010758:	74 0f                	je     c0010769 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c001075a:	52                   	push   edx
c001075b:	52                   	push   edx
c001075c:	56                   	push   esi
c001075d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0010760:	e8 d3 ff ff ff       	call   c0010738 <Device::powerSavingAll(PowerSavingLevel)>
c0010765:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0010767:	eb e9                	jmp    c0010752 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0010769:	58                   	pop    eax
c001076a:	5b                   	pop    ebx
c001076b:	5e                   	pop    esi
c001076c:	c3                   	ret    
c001076d:	90                   	nop

c001076e <Device::setName(char const*)>:
c001076e:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0010776:	e9 de ff fe ff       	jmp    c0000759 <strcpy>
c001077b:	90                   	nop

c001077c <Device::Device(char const*)>:
c001077c:	83 ec 0c             	sub    esp,0xc
c001077f:	ba d8 1a 02 c0       	mov    edx,0xc0021ad8
c0010784:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010788:	89 10                	mov    DWORD PTR [eax],edx
c001078a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001078e:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0010798:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001079c:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c00107a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00107aa:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00107b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00107b8:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c00107c2:	83 ec 08             	sub    esp,0x8
c00107c5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00107c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00107cd:	e8 9c ff ff ff       	call   c001076e <Device::setName(char const*)>
c00107d2:	83 c4 10             	add    esp,0x10
c00107d5:	83 ec 0c             	sub    esp,0xc
c00107d8:	6a 08                	push   0x8
c00107da:	e8 63 e8 ff ff       	call   c000f042 <operator new(unsigned long)>
c00107df:	83 c4 10             	add    esp,0x10
c00107e2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00107e8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00107ef:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00107f3:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c00107f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00107fd:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0010803:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010809:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001080d:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0010813:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001081a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001081e:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0010825:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010829:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0010830:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010834:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001083e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010842:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c001084c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010850:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c001085a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001085e:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c0010868:	90                   	nop
c0010869:	83 c4 0c             	add    esp,0xc
c001086c:	c3                   	ret    
c001086d:	90                   	nop

c001086e <Device::getName()>:
c001086e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010872:	05 d0 00 00 00       	add    eax,0xd0
c0010877:	c3                   	ret    

c0010878 <DriverlessDevice::DriverlessDevice(char const*)>:
c0010878:	83 ec 0c             	sub    esp,0xc
c001087b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001087f:	83 ec 08             	sub    esp,0x8
c0010882:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010886:	50                   	push   eax
c0010887:	e8 f0 fe ff ff       	call   c001077c <Device::Device(char const*)>
c001088c:	83 c4 10             	add    esp,0x10
c001088f:	ba 04 1b 02 c0       	mov    edx,0xc0021b04
c0010894:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010898:	89 10                	mov    DWORD PTR [eax],edx
c001089a:	90                   	nop
c001089b:	83 c4 0c             	add    esp,0xc
c001089e:	c3                   	ret    
c001089f:	90                   	nop

c00108a0 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c00108a0:	57                   	push   edi
c00108a1:	56                   	push   esi
c00108a2:	53                   	push   ebx
c00108a3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00108a7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00108ab:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00108af:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c00108b5:	75 0c                	jne    c00108c3 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c00108b7:	52                   	push   edx
c00108b8:	52                   	push   edx
c00108b9:	53                   	push   ebx
c00108ba:	56                   	push   esi
c00108bb:	e8 24 f0 00 00       	call   c001f8e4 <LinkedList<Device>::addElement(Device*)>
c00108c0:	83 c4 10             	add    esp,0x10
c00108c3:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00108c9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00108cc:	74 12                	je     c00108e0 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c00108ce:	50                   	push   eax
c00108cf:	57                   	push   edi
c00108d0:	56                   	push   esi
c00108d1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00108d4:	e8 c7 ff ff ff       	call   c00108a0 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c00108d9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00108db:	83 c4 10             	add    esp,0x10
c00108de:	eb e9                	jmp    c00108c9 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c00108e0:	5b                   	pop    ebx
c00108e1:	5e                   	pop    esi
c00108e2:	5f                   	pop    edi
c00108e3:	c3                   	ret    

c00108e4 <getDevicesOfType(DeviceType)>:
c00108e4:	53                   	push   ebx
c00108e5:	83 ec 14             	sub    esp,0x14
c00108e8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00108ec:	53                   	push   ebx
c00108ed:	e8 ce f0 00 00       	call   c001f9c0 <LinkedList<Device>::LinkedList()>
c00108f2:	83 c4 0c             	add    esp,0xc
c00108f5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00108f9:	53                   	push   ebx
c00108fa:	ff 35 88 45 02 c0    	push   DWORD PTR ds:0xc0024588
c0010900:	e8 9b ff ff ff       	call   c00108a0 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0010905:	83 c4 18             	add    esp,0x18
c0010908:	89 d8                	mov    eax,ebx
c001090a:	5b                   	pop    ebx
c001090b:	c2 04 00             	ret    0x4

c001090e <HardDiskController::HardDiskController(char const*)>:
c001090e:	83 ec 0c             	sub    esp,0xc
c0010911:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010915:	83 ec 08             	sub    esp,0x8
c0010918:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001091c:	50                   	push   eax
c001091d:	e8 5a fe ff ff       	call   c001077c <Device::Device(char const*)>
c0010922:	83 c4 10             	add    esp,0x10
c0010925:	ba 30 1b 02 c0       	mov    edx,0xc0021b30
c001092a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001092e:	89 10                	mov    DWORD PTR [eax],edx
c0010930:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010934:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c001093e:	90                   	nop
c001093f:	83 c4 0c             	add    esp,0xc
c0010942:	c3                   	ret    
c0010943:	90                   	nop

c0010944 <HardDiskController::~HardDiskController()>:
c0010944:	83 ec 0c             	sub    esp,0xc
c0010947:	ba 30 1b 02 c0       	mov    edx,0xc0021b30
c001094c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010950:	89 10                	mov    DWORD PTR [eax],edx
c0010952:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010956:	83 ec 0c             	sub    esp,0xc
c0010959:	50                   	push   eax
c001095a:	e8 d3 fa ff ff       	call   c0010432 <Device::~Device()>
c001095f:	83 c4 10             	add    esp,0x10
c0010962:	90                   	nop
c0010963:	83 c4 0c             	add    esp,0xc
c0010966:	c3                   	ret    
c0010967:	90                   	nop

c0010968 <HardDiskController::~HardDiskController()>:
c0010968:	83 ec 0c             	sub    esp,0xc
c001096b:	83 ec 0c             	sub    esp,0xc
c001096e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010972:	e8 cd ff ff ff       	call   c0010944 <HardDiskController::~HardDiskController()>
c0010977:	83 c4 10             	add    esp,0x10
c001097a:	83 ec 08             	sub    esp,0x8
c001097d:	68 58 01 00 00       	push   0x158
c0010982:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010986:	e8 c6 e6 ff ff       	call   c000f051 <operator delete(void*, unsigned long)>
c001098b:	83 c4 10             	add    esp,0x10
c001098e:	83 c4 0c             	add    esp,0xc
c0010991:	c3                   	ret    

c0010992 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0010992:	83 ec 0c             	sub    esp,0xc
c0010995:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010999:	83 ec 08             	sub    esp,0x8
c001099c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00109a0:	50                   	push   eax
c00109a1:	e8 d6 fd ff ff       	call   c001077c <Device::Device(char const*)>
c00109a6:	83 c4 10             	add    esp,0x10
c00109a9:	ba 5c 1b 02 c0       	mov    edx,0xc0021b5c
c00109ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109b2:	89 10                	mov    DWORD PTR [eax],edx
c00109b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109b8:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00109bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109c3:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c00109ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109ce:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c00109d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109dc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00109e0:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00109e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109ea:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00109f4:	90                   	nop
c00109f5:	83 c4 0c             	add    esp,0xc
c00109f8:	c3                   	ret    
c00109f9:	90                   	nop

c00109fa <PhysicalDisk::startCache()>:
c00109fa:	56                   	push   esi
c00109fb:	53                   	push   ebx
c00109fc:	83 ec 10             	sub    esp,0x10
c00109ff:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0010a03:	6a 30                	push   0x30
c0010a05:	e8 38 e6 ff ff       	call   c000f042 <operator new(unsigned long)>
c0010a0a:	89 c6                	mov    esi,eax
c0010a0c:	58                   	pop    eax
c0010a0d:	5a                   	pop    edx
c0010a0e:	53                   	push   ebx
c0010a0f:	56                   	push   esi
c0010a10:	e8 3b 25 00 00       	call   c0012f50 <VCache::VCache(PhysicalDisk*)>
c0010a15:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c0010a1b:	83 c4 14             	add    esp,0x14
c0010a1e:	5b                   	pop    ebx
c0010a1f:	5e                   	pop    esi
c0010a20:	c3                   	ret    
c0010a21:	90                   	nop

c0010a22 <PhysicalDisk::~PhysicalDisk()>:
c0010a22:	83 ec 0c             	sub    esp,0xc
c0010a25:	ba 5c 1b 02 c0       	mov    edx,0xc0021b5c
c0010a2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a2e:	89 10                	mov    DWORD PTR [eax],edx
c0010a30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a34:	83 ec 0c             	sub    esp,0xc
c0010a37:	50                   	push   eax
c0010a38:	e8 f5 f9 ff ff       	call   c0010432 <Device::~Device()>
c0010a3d:	83 c4 10             	add    esp,0x10
c0010a40:	90                   	nop
c0010a41:	83 c4 0c             	add    esp,0xc
c0010a44:	c3                   	ret    
c0010a45:	90                   	nop

c0010a46 <PhysicalDisk::~PhysicalDisk()>:
c0010a46:	83 ec 0c             	sub    esp,0xc
c0010a49:	83 ec 0c             	sub    esp,0xc
c0010a4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a50:	e8 cd ff ff ff       	call   c0010a22 <PhysicalDisk::~PhysicalDisk()>
c0010a55:	83 c4 10             	add    esp,0x10
c0010a58:	83 ec 08             	sub    esp,0x8
c0010a5b:	68 6c 01 00 00       	push   0x16c
c0010a60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a64:	e8 e8 e5 ff ff       	call   c000f051 <operator delete(void*, unsigned long)>
c0010a69:	83 c4 10             	add    esp,0x10
c0010a6c:	83 c4 0c             	add    esp,0xc
c0010a6f:	c3                   	ret    

c0010a70 <FPU::FPU(char const*)>:
c0010a70:	83 ec 0c             	sub    esp,0xc
c0010a73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a77:	83 ec 08             	sub    esp,0x8
c0010a7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a7e:	50                   	push   eax
c0010a7f:	e8 f8 fc ff ff       	call   c001077c <Device::Device(char const*)>
c0010a84:	83 c4 10             	add    esp,0x10
c0010a87:	ba 9c 1b 02 c0       	mov    edx,0xc0021b9c
c0010a8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a90:	89 10                	mov    DWORD PTR [eax],edx
c0010a92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a96:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c0010aa0:	90                   	nop
c0010aa1:	83 c4 0c             	add    esp,0xc
c0010aa4:	c3                   	ret    
c0010aa5:	90                   	nop

c0010aa6 <FPU::~FPU()>:
c0010aa6:	83 ec 0c             	sub    esp,0xc
c0010aa9:	ba 9c 1b 02 c0       	mov    edx,0xc0021b9c
c0010aae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ab2:	89 10                	mov    DWORD PTR [eax],edx
c0010ab4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ab8:	83 ec 0c             	sub    esp,0xc
c0010abb:	50                   	push   eax
c0010abc:	e8 71 f9 ff ff       	call   c0010432 <Device::~Device()>
c0010ac1:	83 c4 10             	add    esp,0x10
c0010ac4:	90                   	nop
c0010ac5:	83 c4 0c             	add    esp,0xc
c0010ac8:	c3                   	ret    
c0010ac9:	90                   	nop

c0010aca <FPU::~FPU()>:
c0010aca:	83 ec 0c             	sub    esp,0xc
c0010acd:	83 ec 0c             	sub    esp,0xc
c0010ad0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ad4:	e8 cd ff ff ff       	call   c0010aa6 <FPU::~FPU()>
c0010ad9:	83 c4 10             	add    esp,0x10
c0010adc:	83 ec 08             	sub    esp,0x8
c0010adf:	68 58 01 00 00       	push   0x158
c0010ae4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ae8:	e8 64 e5 ff ff       	call   c000f051 <operator delete(void*, unsigned long)>
c0010aed:	83 c4 10             	add    esp,0x10
c0010af0:	83 c4 0c             	add    esp,0xc
c0010af3:	c3                   	ret    

c0010af4 <setupFPU()>:
c0010af4:	53                   	push   ebx
c0010af5:	83 ec 08             	sub    esp,0x8
c0010af8:	a1 88 45 02 c0       	mov    eax,ds:0xc0024588
c0010afd:	f6 80 e9 01 00 00 20 	test   BYTE PTR [eax+0x1e9],0x20
c0010b04:	74 19                	je     c0010b1f <setupFPU()+0x2b>
c0010b06:	83 ec 0c             	sub    esp,0xc
c0010b09:	68 58 01 00 00       	push   0x158
c0010b0e:	e8 2f e5 ff ff       	call   c000f042 <operator new(unsigned long)>
c0010b13:	89 c3                	mov    ebx,eax
c0010b15:	89 04 24             	mov    DWORD PTR [esp],eax
c0010b18:	e8 ef d4 00 00       	call   c001e00c <AVX::AVX()>
c0010b1d:	eb 5b                	jmp    c0010b7a <setupFPU()+0x86>
c0010b1f:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0010b25:	84 c0                	test   al,al
c0010b27:	79 19                	jns    c0010b42 <setupFPU()+0x4e>
c0010b29:	83 ec 0c             	sub    esp,0xc
c0010b2c:	68 58 01 00 00       	push   0x158
c0010b31:	e8 0c e5 ff ff       	call   c000f042 <operator new(unsigned long)>
c0010b36:	89 c3                	mov    ebx,eax
c0010b38:	89 04 24             	mov    DWORD PTR [esp],eax
c0010b3b:	e8 f2 d5 00 00       	call   c001e132 <SSE::SSE()>
c0010b40:	eb 38                	jmp    c0010b7a <setupFPU()+0x86>
c0010b42:	a8 20                	test   al,0x20
c0010b44:	74 19                	je     c0010b5f <setupFPU()+0x6b>
c0010b46:	83 ec 0c             	sub    esp,0xc
c0010b49:	68 58 01 00 00       	push   0x158
c0010b4e:	e8 ef e4 ff ff       	call   c000f042 <operator new(unsigned long)>
c0010b53:	89 c3                	mov    ebx,eax
c0010b55:	89 04 24             	mov    DWORD PTR [esp],eax
c0010b58:	e8 3f d5 00 00       	call   c001e09c <MMX::MMX()>
c0010b5d:	eb 1b                	jmp    c0010b7a <setupFPU()+0x86>
c0010b5f:	a8 10                	test   al,0x10
c0010b61:	74 1c                	je     c0010b7f <setupFPU()+0x8b>
c0010b63:	83 ec 0c             	sub    esp,0xc
c0010b66:	68 58 01 00 00       	push   0x158
c0010b6b:	e8 d2 e4 ff ff       	call   c000f042 <operator new(unsigned long)>
c0010b70:	89 c3                	mov    ebx,eax
c0010b72:	89 04 24             	mov    DWORD PTR [esp],eax
c0010b75:	e8 46 d6 00 00       	call   c001e1c0 <x87::x87()>
c0010b7a:	83 c4 10             	add    esp,0x10
c0010b7d:	eb 2c                	jmp    c0010bab <setupFPU()+0xb7>
c0010b7f:	83 ec 0c             	sub    esp,0xc
c0010b82:	31 db                	xor    ebx,ebx
c0010b84:	68 88 1b 02 c0       	push   0xc0021b88
c0010b89:	e8 e9 e5 ff ff       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c0010b8e:	e8 43 3c 00 00       	call   c00147d6 <thisCPU()>
c0010b93:	e8 3e 3c 00 00       	call   c00147d6 <thisCPU()>
c0010b98:	e8 7b ee 00 00       	call   c001fa18 <CPU::readCR0()>
c0010b9d:	83 c8 04             	or     eax,0x4
c0010ba0:	89 04 24             	mov    DWORD PTR [esp],eax
c0010ba3:	e8 82 ee 00 00       	call   c001fa2a <CPU::writeCR0(unsigned long)>
c0010ba8:	83 c4 10             	add    esp,0x10
c0010bab:	83 c4 08             	add    esp,0x8
c0010bae:	89 d8                	mov    eax,ebx
c0010bb0:	5b                   	pop    ebx
c0010bb1:	c3                   	ret    

c0010bb2 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c0010bb2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010bb6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010bba:	c1 e0 04             	shl    eax,0x4
c0010bbd:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0010bc1:	8d 50 10             	lea    edx,[eax+0x10]
c0010bc4:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c0010bca:	74 08                	je     c0010bd4 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c0010bcc:	83 c0 04             	add    eax,0x4
c0010bcf:	39 d0                	cmp    eax,edx
c0010bd1:	75 f1                	jne    c0010bc4 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c0010bd3:	c3                   	ret    
c0010bd4:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0010bde:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0010be8:	eb e2                	jmp    c0010bcc <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c0010bea <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c0010bea:	57                   	push   edi
c0010beb:	31 c0                	xor    eax,eax
c0010bed:	56                   	push   esi
c0010bee:	53                   	push   ebx
c0010bef:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0010bf3:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010bf7:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0010bfb:	89 da                	mov    edx,ebx
c0010bfd:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0010c01:	c1 e2 04             	shl    edx,0x4
c0010c04:	01 ca                	add    edx,ecx
c0010c06:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0010c0e:	74 16                	je     c0010c26 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c0010c10:	40                   	inc    eax
c0010c11:	83 f8 04             	cmp    eax,0x4
c0010c14:	75 f0                	jne    c0010c06 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c0010c16:	c7 44 24 10 cc 1b 02 c0 	mov    DWORD PTR [esp+0x10],0xc0021bcc
c0010c1e:	5b                   	pop    ebx
c0010c1f:	5e                   	pop    esi
c0010c20:	5f                   	pop    edi
c0010c21:	e9 1c 4d 00 00       	jmp    c0015942 <Krnl::panic(char const*)>
c0010c26:	8d 04 98             	lea    eax,[eax+ebx*4]
c0010c29:	8d 04 81             	lea    eax,[ecx+eax*4]
c0010c2c:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c0010c32:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c0010c38:	5b                   	pop    ebx
c0010c39:	5e                   	pop    esi
c0010c3a:	5f                   	pop    edi
c0010c3b:	c3                   	ret    

c0010c3c <doubleFault(regs*, void*)>:
c0010c3c:	55                   	push   ebp
c0010c3d:	89 e5                	mov    ebp,esp
c0010c3f:	83 ec 08             	sub    esp,0x8
c0010c42:	83 ec 0c             	sub    esp,0xc
c0010c45:	68 07 1c 02 c0       	push   0xc0021c07
c0010c4a:	e8 f3 4c 00 00       	call   c0015942 <Krnl::panic(char const*)>
c0010c4f:	83 c4 10             	add    esp,0x10
c0010c52:	90                   	nop
c0010c53:	c9                   	leave  
c0010c54:	c3                   	ret    
c0010c55:	90                   	nop

c0010c56 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0010c56:	56                   	push   esi
c0010c57:	53                   	push   ebx
c0010c58:	50                   	push   eax
c0010c59:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010c5d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010c61:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0010c66:	75 35                	jne    c0010c9d <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c0010c68:	8d 43 20             	lea    eax,[ebx+0x20]
c0010c6b:	31 d2                	xor    edx,edx
c0010c6d:	89 c1                	mov    ecx,eax
c0010c6f:	c1 e1 04             	shl    ecx,0x4
c0010c72:	01 f1                	add    ecx,esi
c0010c74:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c0010c7c:	74 3e                	je     c0010cbc <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c0010c7e:	42                   	inc    edx
c0010c7f:	83 fa 04             	cmp    edx,0x4
c0010c82:	75 f0                	jne    c0010c74 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c0010c84:	83 ec 0c             	sub    esp,0xc
c0010c87:	68 4c 1c 02 c0       	push   0xc0021c4c
c0010c8c:	e8 b1 4c 00 00       	call   c0015942 <Krnl::panic(char const*)>
c0010c91:	83 c4 10             	add    esp,0x10
c0010c94:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010c99:	5a                   	pop    edx
c0010c9a:	5b                   	pop    ebx
c0010c9b:	5e                   	pop    esi
c0010c9c:	c3                   	ret    
c0010c9d:	83 ec 0c             	sub    esp,0xc
c0010ca0:	56                   	push   esi
c0010ca1:	e8 c8 fb ff ff       	call   c001086e <Device::getName()>
c0010ca6:	83 c4 10             	add    esp,0x10
c0010ca9:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0010cac:	75 ba                	jne    c0010c68 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0010cae:	83 fb 0f             	cmp    ebx,0xf
c0010cb1:	7f 29                	jg     c0010cdc <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c0010cb3:	0f b6 9b e0 3c 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffdc320]
c0010cba:	eb ac                	jmp    c0010c68 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0010cbc:	8d 04 82             	lea    eax,[edx+eax*4]
c0010cbf:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010cc3:	8d 04 86             	lea    eax,[esi+eax*4]
c0010cc6:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0010ccc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0010cd0:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c0010cd6:	89 d8                	mov    eax,ebx
c0010cd8:	5a                   	pop    edx
c0010cd9:	5b                   	pop    ebx
c0010cda:	5e                   	pop    esi
c0010cdb:	c3                   	ret    
c0010cdc:	83 ec 0c             	sub    esp,0xc
c0010cdf:	68 14 1c 02 c0       	push   0xc0021c14
c0010ce4:	e8 59 4c 00 00       	call   c0015942 <Krnl::panic(char const*)>
c0010ce9:	83 c4 10             	add    esp,0x10
c0010cec:	e9 77 ff ff ff       	jmp    c0010c68 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0010cf1:	90                   	nop

c0010cf2 <InterruptController::clearAllHandlers(int, bool)>:
c0010cf2:	56                   	push   esi
c0010cf3:	53                   	push   ebx
c0010cf4:	52                   	push   edx
c0010cf5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010cf9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010cfd:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0010d02:	75 61                	jne    c0010d65 <InterruptController::clearAllHandlers(int, bool)+0x73>
c0010d04:	8d 46 20             	lea    eax,[esi+0x20]
c0010d07:	c1 e6 04             	shl    esi,0x4
c0010d0a:	c1 e0 04             	shl    eax,0x4
c0010d0d:	01 de                	add    esi,ebx
c0010d0f:	01 d8                	add    eax,ebx
c0010d11:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c0010d1b:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c0010d25:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0010d2f:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0010d39:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c0010d43:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c0010d4d:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c0010d57:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c0010d61:	58                   	pop    eax
c0010d62:	5b                   	pop    ebx
c0010d63:	5e                   	pop    esi
c0010d64:	c3                   	ret    
c0010d65:	83 ec 0c             	sub    esp,0xc
c0010d68:	53                   	push   ebx
c0010d69:	e8 00 fb ff ff       	call   c001086e <Device::getName()>
c0010d6e:	83 c4 10             	add    esp,0x10
c0010d71:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0010d74:	75 8e                	jne    c0010d04 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0010d76:	83 fe 0f             	cmp    esi,0xf
c0010d79:	7f 09                	jg     c0010d84 <InterruptController::clearAllHandlers(int, bool)+0x92>
c0010d7b:	0f b6 b6 e0 3c 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffdc320]
c0010d82:	eb 80                	jmp    c0010d04 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0010d84:	83 ec 0c             	sub    esp,0xc
c0010d87:	68 88 1c 02 c0       	push   0xc0021c88
c0010d8c:	e8 b1 4b 00 00       	call   c0015942 <Krnl::panic(char const*)>
c0010d91:	83 c4 10             	add    esp,0x10
c0010d94:	e9 6b ff ff ff       	jmp    c0010d04 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0010d99:	90                   	nop

c0010d9a <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0010d9a:	56                   	push   esi
c0010d9b:	53                   	push   ebx
c0010d9c:	52                   	push   edx
c0010d9d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010da1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010da5:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0010daa:	75 3a                	jne    c0010de6 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0010dac:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010db0:	8d 50 20             	lea    edx,[eax+0x20]
c0010db3:	c1 e2 04             	shl    edx,0x4
c0010db6:	8d 04 16             	lea    eax,[esi+edx*1]
c0010db9:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0010dbd:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0010dc3:	74 0b                	je     c0010dd0 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0010dc5:	83 c0 04             	add    eax,0x4
c0010dc8:	39 d0                	cmp    eax,edx
c0010dca:	75 f1                	jne    c0010dbd <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0010dcc:	58                   	pop    eax
c0010dcd:	5b                   	pop    ebx
c0010dce:	5e                   	pop    esi
c0010dcf:	c3                   	ret    
c0010dd0:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0010dda:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0010de4:	eb df                	jmp    c0010dc5 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c0010de6:	83 ec 0c             	sub    esp,0xc
c0010de9:	56                   	push   esi
c0010dea:	e8 7f fa ff ff       	call   c001086e <Device::getName()>
c0010def:	83 c4 10             	add    esp,0x10
c0010df2:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0010df5:	75 b5                	jne    c0010dac <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0010df7:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0010dfc:	7f 11                	jg     c0010e0f <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c0010dfe:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010e02:	0f b6 80 e0 3c 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdc320]
c0010e09:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0010e0d:	eb 9d                	jmp    c0010dac <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0010e0f:	83 ec 0c             	sub    esp,0xc
c0010e12:	68 88 1c 02 c0       	push   0xc0021c88
c0010e17:	e8 26 4b 00 00       	call   c0015942 <Krnl::panic(char const*)>
c0010e1c:	83 c4 10             	add    esp,0x10
c0010e1f:	eb 8b                	jmp    c0010dac <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c0010e21 <nmiHandler(regs*, void*)>:
c0010e21:	a1 88 45 02 c0       	mov    eax,ds:0xc0024588
c0010e26:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010e2a:	e9 1f a9 ff ff       	jmp    c000b74e <Computer::handleNMI()>

c0010e2f <int_handler>:
c0010e2f:	55                   	push   ebp
c0010e30:	57                   	push   edi
c0010e31:	56                   	push   esi
c0010e32:	53                   	push   ebx
c0010e33:	83 ec 0c             	sub    esp,0xc
c0010e36:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0010e3a:	80 3d d4 4f 02 c0 00 	cmp    BYTE PTR ds:0xc0024fd4,0x0
c0010e41:	74 0b                	je     c0010e4e <int_handler+0x1f>
c0010e43:	fa                   	cli    
c0010e44:	f4                   	hlt    
c0010e45:	80 3d d4 4f 02 c0 00 	cmp    BYTE PTR ds:0xc0024fd4,0x0
c0010e4c:	75 f5                	jne    c0010e43 <int_handler+0x14>
c0010e4e:	e8 83 39 00 00       	call   c00147d6 <thisCPU()>
c0010e53:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0010e56:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0010e5c:	8d 43 e0             	lea    eax,[ebx-0x20]
c0010e5f:	83 f8 17             	cmp    eax,0x17
c0010e62:	77 13                	ja     c0010e77 <int_handler+0x48>
c0010e64:	83 ec 08             	sub    esp,0x8
c0010e67:	8b 17                	mov    edx,DWORD PTR [edi]
c0010e69:	8d 43 e0             	lea    eax,[ebx-0x20]
c0010e6c:	0f b6 c0             	movzx  eax,al
c0010e6f:	50                   	push   eax
c0010e70:	57                   	push   edi
c0010e71:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0010e74:	83 c4 10             	add    esp,0x10
c0010e77:	83 c3 15             	add    ebx,0x15
c0010e7a:	c1 e3 04             	shl    ebx,0x4
c0010e7d:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0010e81:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0010e88:	31 db                	xor    ebx,ebx
c0010e8a:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0010e8e:	85 c0                	test   eax,eax
c0010e90:	74 13                	je     c0010ea5 <int_handler+0x76>
c0010e92:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0010e95:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0010e99:	74 1c                	je     c0010eb7 <int_handler+0x88>
c0010e9b:	83 ec 08             	sub    esp,0x8
c0010e9e:	52                   	push   edx
c0010e9f:	56                   	push   esi
c0010ea0:	ff d0                	call   eax
c0010ea2:	83 c4 10             	add    esp,0x10
c0010ea5:	43                   	inc    ebx
c0010ea6:	83 fb 04             	cmp    ebx,0x4
c0010ea9:	75 df                	jne    c0010e8a <int_handler+0x5b>
c0010eab:	83 c4 0c             	add    esp,0xc
c0010eae:	31 c0                	xor    eax,eax
c0010eb0:	5b                   	pop    ebx
c0010eb1:	31 d2                	xor    edx,edx
c0010eb3:	5e                   	pop    esi
c0010eb4:	5f                   	pop    edi
c0010eb5:	5d                   	pop    ebp
c0010eb6:	c3                   	ret    
c0010eb7:	83 ec 08             	sub    esp,0x8
c0010eba:	52                   	push   edx
c0010ebb:	56                   	push   esi
c0010ebc:	ff d0                	call   eax
c0010ebe:	83 c4 10             	add    esp,0x10
c0010ec1:	83 c4 0c             	add    esp,0xc
c0010ec4:	5b                   	pop    ebx
c0010ec5:	5e                   	pop    esi
c0010ec6:	5f                   	pop    edi
c0010ec7:	5d                   	pop    ebp
c0010ec8:	c3                   	ret    
c0010ec9:	90                   	nop

c0010eca <InterruptController::InterruptController(char const*)>:
c0010eca:	83 ec 1c             	sub    esp,0x1c
c0010ecd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010ed1:	83 ec 08             	sub    esp,0x8
c0010ed4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010ed8:	50                   	push   eax
c0010ed9:	e8 9e f8 ff ff       	call   c001077c <Device::Device(char const*)>
c0010ede:	83 c4 10             	add    esp,0x10
c0010ee1:	ba c4 1e 02 c0       	mov    edx,0xc0021ec4
c0010ee6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010eea:	89 10                	mov    DWORD PTR [eax],edx
c0010eec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010ef0:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c0010efa:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010f02:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0010f0a:	7f 5e                	jg     c0010f6a <InterruptController::InterruptController(char const*)+0xa0>
c0010f0c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0010f14:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0010f19:	7f 49                	jg     c0010f64 <InterruptController::InterruptController(char const*)+0x9a>
c0010f1b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010f1f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010f23:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0010f2a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010f2e:	01 ca                	add    edx,ecx
c0010f30:	83 c2 54             	add    edx,0x54
c0010f33:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0010f3b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010f3f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010f43:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0010f4a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010f4e:	01 ca                	add    edx,ecx
c0010f50:	81 c2 54 04 00 00    	add    edx,0x454
c0010f56:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0010f5e:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0010f62:	eb b0                	jmp    c0010f14 <InterruptController::InterruptController(char const*)+0x4a>
c0010f64:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0010f68:	eb 98                	jmp    c0010f02 <InterruptController::InterruptController(char const*)+0x38>
c0010f6a:	90                   	nop
c0010f6b:	83 c4 1c             	add    esp,0x1c
c0010f6e:	c3                   	ret    
c0010f6f:	90                   	nop

c0010f70 <InterruptController::~InterruptController()>:
c0010f70:	83 ec 0c             	sub    esp,0xc
c0010f73:	ba c4 1e 02 c0       	mov    edx,0xc0021ec4
c0010f78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f7c:	89 10                	mov    DWORD PTR [eax],edx
c0010f7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f82:	83 ec 0c             	sub    esp,0xc
c0010f85:	50                   	push   eax
c0010f86:	e8 a7 f4 ff ff       	call   c0010432 <Device::~Device()>
c0010f8b:	83 c4 10             	add    esp,0x10
c0010f8e:	90                   	nop
c0010f8f:	83 c4 0c             	add    esp,0xc
c0010f92:	c3                   	ret    
c0010f93:	90                   	nop

c0010f94 <InterruptController::~InterruptController()>:
c0010f94:	83 ec 0c             	sub    esp,0xc
c0010f97:	83 ec 0c             	sub    esp,0xc
c0010f9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010f9e:	e8 cd ff ff ff       	call   c0010f70 <InterruptController::~InterruptController()>
c0010fa3:	83 c4 10             	add    esp,0x10
c0010fa6:	83 ec 08             	sub    esp,0x8
c0010fa9:	68 58 21 00 00       	push   0x2158
c0010fae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010fb2:	e8 9a e0 ff ff       	call   c000f051 <operator delete(void*, unsigned long)>
c0010fb7:	83 c4 10             	add    esp,0x10
c0010fba:	83 c4 0c             	add    esp,0xc
c0010fbd:	c3                   	ret    

c0010fbe <displayDebugInfo(regs*)>:
c0010fbe:	55                   	push   ebp
c0010fbf:	57                   	push   edi
c0010fc0:	56                   	push   esi
c0010fc1:	53                   	push   ebx
c0010fc2:	83 ec 24             	sub    esp,0x24
c0010fc5:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0010fc9:	0f 20 c2             	mov    edx,cr0
c0010fcc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0010fd0:	0f 20 d7             	mov    edi,cr2
c0010fd3:	0f 20 de             	mov    esi,cr3
c0010fd6:	0f 20 e5             	mov    ebp,cr4
c0010fd9:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0010fdc:	68 c2 1c 02 c0       	push   0xc0021cc2
c0010fe1:	e8 91 e1 ff ff       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c0010fe6:	58                   	pop    eax
c0010fe7:	5a                   	pop    edx
c0010fe8:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0010feb:	68 cd 1c 02 c0       	push   0xc0021ccd
c0010ff0:	e8 82 e1 ff ff       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c0010ff5:	59                   	pop    ecx
c0010ff6:	58                   	pop    eax
c0010ff7:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0010ffa:	68 d8 1c 02 c0       	push   0xc0021cd8
c0010fff:	e8 73 e1 ff ff       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c0011004:	58                   	pop    eax
c0011005:	5a                   	pop    edx
c0011006:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0011009:	68 e3 1c 02 c0       	push   0xc0021ce3
c001100e:	e8 64 e1 ff ff       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c0011013:	59                   	pop    ecx
c0011014:	58                   	pop    eax
c0011015:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0011018:	68 ee 1c 02 c0       	push   0xc0021cee
c001101d:	e8 55 e1 ff ff       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c0011022:	58                   	pop    eax
c0011023:	5a                   	pop    edx
c0011024:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0011027:	68 f9 1c 02 c0       	push   0xc0021cf9
c001102c:	e8 46 e1 ff ff       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c0011031:	59                   	pop    ecx
c0011032:	58                   	pop    eax
c0011033:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0011036:	68 04 1d 02 c0       	push   0xc0021d04
c001103b:	e8 37 e1 ff ff       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c0011040:	58                   	pop    eax
c0011041:	5a                   	pop    edx
c0011042:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0011045:	68 0f 1d 02 c0       	push   0xc0021d0f
c001104a:	e8 28 e1 ff ff       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c001104f:	59                   	pop    ecx
c0011050:	58                   	pop    eax
c0011051:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0011054:	68 1a 1d 02 c0       	push   0xc0021d1a
c0011059:	e8 19 e1 ff ff       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c001105e:	58                   	pop    eax
c001105f:	5a                   	pop    edx
c0011060:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0011063:	68 29 1d 02 c0       	push   0xc0021d29
c0011068:	e8 0a e1 ff ff       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c001106d:	59                   	pop    ecx
c001106e:	58                   	pop    eax
c001106f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0011072:	68 34 1d 02 c0       	push   0xc0021d34
c0011077:	e8 fb e0 ff ff       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c001107c:	58                   	pop    eax
c001107d:	5a                   	pop    edx
c001107e:	57                   	push   edi
c001107f:	68 3f 1d 02 c0       	push   0xc0021d3f
c0011084:	e8 ee e0 ff ff       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c0011089:	59                   	pop    ecx
c001108a:	58                   	pop    eax
c001108b:	56                   	push   esi
c001108c:	68 4a 1d 02 c0       	push   0xc0021d4a
c0011091:	e8 e1 e0 ff ff       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c0011096:	58                   	pop    eax
c0011097:	a1 d4 59 02 c0       	mov    eax,ds:0xc00259d4
c001109c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00110a2:	e8 c4 c2 ff ff       	call   c000d36b <setActiveTerminal(VgaText*)>
c00110a7:	58                   	pop    eax
c00110a8:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00110ab:	5a                   	pop    edx
c00110ac:	c1 e0 05             	shl    eax,0x5
c00110af:	05 40 3a 02 c0       	add    eax,0xc0023a40
c00110b4:	50                   	push   eax
c00110b5:	a1 d4 59 02 c0       	mov    eax,ds:0xc00259d4
c00110ba:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00110c0:	e8 c7 c6 ff ff       	call   c000d78c <VgaText::puts(char const*)>
c00110c5:	59                   	pop    ecx
c00110c6:	58                   	pop    eax
c00110c7:	a1 d4 59 02 c0       	mov    eax,ds:0xc00259d4
c00110cc:	68 55 1d 02 c0       	push   0xc0021d55
c00110d1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00110d7:	e8 b0 c6 ff ff       	call   c000d78c <VgaText::puts(char const*)>
c00110dc:	58                   	pop    eax
c00110dd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00110e2:	5a                   	pop    edx
c00110e3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00110e6:	83 c0 0c             	add    eax,0xc
c00110e9:	50                   	push   eax
c00110ea:	a1 d4 59 02 c0       	mov    eax,ds:0xc00259d4
c00110ef:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00110f5:	e8 92 c6 ff ff       	call   c000d78c <VgaText::puts(char const*)>
c00110fa:	59                   	pop    ecx
c00110fb:	58                   	pop    eax
c00110fc:	a1 d4 59 02 c0       	mov    eax,ds:0xc00259d4
c0011101:	68 5e 1d 02 c0       	push   0xc0021d5e
c0011106:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001110c:	e8 7b c6 ff ff       	call   c000d78c <VgaText::puts(char const*)>
c0011111:	58                   	pop    eax
c0011112:	a1 d4 59 02 c0       	mov    eax,ds:0xc00259d4
c0011117:	5a                   	pop    edx
c0011118:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c001111b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011121:	e8 8c c6 ff ff       	call   c000d7b2 <VgaText::putx(unsigned int)>
c0011126:	59                   	pop    ecx
c0011127:	58                   	pop    eax
c0011128:	a1 d4 59 02 c0       	mov    eax,ds:0xc00259d4
c001112d:	68 66 1d 02 c0       	push   0xc0021d66
c0011132:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011138:	e8 4f c6 ff ff       	call   c000d78c <VgaText::puts(char const*)>
c001113d:	58                   	pop    eax
c001113e:	a1 d4 59 02 c0       	mov    eax,ds:0xc00259d4
c0011143:	5a                   	pop    edx
c0011144:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0011147:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001114d:	e8 60 c6 ff ff       	call   c000d7b2 <VgaText::putx(unsigned int)>
c0011152:	59                   	pop    ecx
c0011153:	58                   	pop    eax
c0011154:	a1 d4 59 02 c0       	mov    eax,ds:0xc00259d4
c0011159:	68 6e 1d 02 c0       	push   0xc0021d6e
c001115e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011164:	e8 23 c6 ff ff       	call   c000d78c <VgaText::puts(char const*)>
c0011169:	58                   	pop    eax
c001116a:	a1 d4 59 02 c0       	mov    eax,ds:0xc00259d4
c001116f:	5a                   	pop    edx
c0011170:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0011173:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011179:	e8 34 c6 ff ff       	call   c000d7b2 <VgaText::putx(unsigned int)>
c001117e:	59                   	pop    ecx
c001117f:	58                   	pop    eax
c0011180:	a1 d4 59 02 c0       	mov    eax,ds:0xc00259d4
c0011185:	68 76 1d 02 c0       	push   0xc0021d76
c001118a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011190:	e8 f7 c5 ff ff       	call   c000d78c <VgaText::puts(char const*)>
c0011195:	58                   	pop    eax
c0011196:	a1 d4 59 02 c0       	mov    eax,ds:0xc00259d4
c001119b:	5a                   	pop    edx
c001119c:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c001119f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00111a5:	e8 08 c6 ff ff       	call   c000d7b2 <VgaText::putx(unsigned int)>
c00111aa:	59                   	pop    ecx
c00111ab:	58                   	pop    eax
c00111ac:	a1 d4 59 02 c0       	mov    eax,ds:0xc00259d4
c00111b1:	68 7e 1d 02 c0       	push   0xc0021d7e
c00111b6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00111bc:	e8 cb c5 ff ff       	call   c000d78c <VgaText::puts(char const*)>
c00111c1:	58                   	pop    eax
c00111c2:	a1 d4 59 02 c0       	mov    eax,ds:0xc00259d4
c00111c7:	5a                   	pop    edx
c00111c8:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00111cb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00111d1:	e8 dc c5 ff ff       	call   c000d7b2 <VgaText::putx(unsigned int)>
c00111d6:	59                   	pop    ecx
c00111d7:	58                   	pop    eax
c00111d8:	a1 d4 59 02 c0       	mov    eax,ds:0xc00259d4
c00111dd:	68 86 1d 02 c0       	push   0xc0021d86
c00111e2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00111e8:	e8 9f c5 ff ff       	call   c000d78c <VgaText::puts(char const*)>
c00111ed:	58                   	pop    eax
c00111ee:	a1 d4 59 02 c0       	mov    eax,ds:0xc00259d4
c00111f3:	5a                   	pop    edx
c00111f4:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c00111f7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00111fd:	e8 b0 c5 ff ff       	call   c000d7b2 <VgaText::putx(unsigned int)>
c0011202:	59                   	pop    ecx
c0011203:	a1 d4 59 02 c0       	mov    eax,ds:0xc00259d4
c0011208:	5b                   	pop    ebx
c0011209:	68 8e 1d 02 c0       	push   0xc0021d8e
c001120e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011214:	e8 73 c5 ff ff       	call   c000d78c <VgaText::puts(char const*)>
c0011219:	58                   	pop    eax
c001121a:	a1 d4 59 02 c0       	mov    eax,ds:0xc00259d4
c001121f:	5a                   	pop    edx
c0011220:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011224:	52                   	push   edx
c0011225:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001122b:	e8 82 c5 ff ff       	call   c000d7b2 <VgaText::putx(unsigned int)>
c0011230:	59                   	pop    ecx
c0011231:	a1 d4 59 02 c0       	mov    eax,ds:0xc00259d4
c0011236:	5b                   	pop    ebx
c0011237:	68 97 1d 02 c0       	push   0xc0021d97
c001123c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011242:	e8 45 c5 ff ff       	call   c000d78c <VgaText::puts(char const*)>
c0011247:	58                   	pop    eax
c0011248:	a1 d4 59 02 c0       	mov    eax,ds:0xc00259d4
c001124d:	5a                   	pop    edx
c001124e:	57                   	push   edi
c001124f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011255:	e8 58 c5 ff ff       	call   c000d7b2 <VgaText::putx(unsigned int)>
c001125a:	59                   	pop    ecx
c001125b:	a1 d4 59 02 c0       	mov    eax,ds:0xc00259d4
c0011260:	5b                   	pop    ebx
c0011261:	68 9f 1d 02 c0       	push   0xc0021d9f
c0011266:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001126c:	e8 1b c5 ff ff       	call   c000d78c <VgaText::puts(char const*)>
c0011271:	5f                   	pop    edi
c0011272:	58                   	pop    eax
c0011273:	a1 d4 59 02 c0       	mov    eax,ds:0xc00259d4
c0011278:	56                   	push   esi
c0011279:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001127f:	e8 2e c5 ff ff       	call   c000d7b2 <VgaText::putx(unsigned int)>
c0011284:	58                   	pop    eax
c0011285:	a1 d4 59 02 c0       	mov    eax,ds:0xc00259d4
c001128a:	5a                   	pop    edx
c001128b:	68 a7 1d 02 c0       	push   0xc0021da7
c0011290:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011296:	e8 f1 c4 ff ff       	call   c000d78c <VgaText::puts(char const*)>
c001129b:	59                   	pop    ecx
c001129c:	a1 d4 59 02 c0       	mov    eax,ds:0xc00259d4
c00112a1:	5b                   	pop    ebx
c00112a2:	55                   	push   ebp
c00112a3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00112a9:	e8 04 c5 ff ff       	call   c000d7b2 <VgaText::putx(unsigned int)>
c00112ae:	5e                   	pop    esi
c00112af:	a1 d4 59 02 c0       	mov    eax,ds:0xc00259d4
c00112b4:	5f                   	pop    edi
c00112b5:	68 af 1d 02 c0       	push   0xc0021daf
c00112ba:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00112c0:	e8 c7 c4 ff ff       	call   c000d78c <VgaText::puts(char const*)>
c00112c5:	a1 d4 59 02 c0       	mov    eax,ds:0xc00259d4
c00112ca:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c00112d0:	e8 5e e7 00 00       	call   c001fa33 <CPU::readDR0()>
c00112d5:	5d                   	pop    ebp
c00112d6:	5a                   	pop    edx
c00112d7:	50                   	push   eax
c00112d8:	53                   	push   ebx
c00112d9:	e8 d4 c4 ff ff       	call   c000d7b2 <VgaText::putx(unsigned int)>
c00112de:	59                   	pop    ecx
c00112df:	a1 d4 59 02 c0       	mov    eax,ds:0xc00259d4
c00112e4:	5b                   	pop    ebx
c00112e5:	68 b8 1d 02 c0       	push   0xc0021db8
c00112ea:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00112f0:	e8 97 c4 ff ff       	call   c000d78c <VgaText::puts(char const*)>
c00112f5:	a1 d4 59 02 c0       	mov    eax,ds:0xc00259d4
c00112fa:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0011300:	e8 40 e7 00 00       	call   c001fa45 <CPU::readDR1()>
c0011305:	5e                   	pop    esi
c0011306:	5f                   	pop    edi
c0011307:	50                   	push   eax
c0011308:	53                   	push   ebx
c0011309:	e8 a4 c4 ff ff       	call   c000d7b2 <VgaText::putx(unsigned int)>
c001130e:	5d                   	pop    ebp
c001130f:	58                   	pop    eax
c0011310:	a1 d4 59 02 c0       	mov    eax,ds:0xc00259d4
c0011315:	68 c0 1d 02 c0       	push   0xc0021dc0
c001131a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011320:	e8 67 c4 ff ff       	call   c000d78c <VgaText::puts(char const*)>
c0011325:	a1 d4 59 02 c0       	mov    eax,ds:0xc00259d4
c001132a:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0011330:	e8 22 e7 00 00       	call   c001fa57 <CPU::readDR2()>
c0011335:	5a                   	pop    edx
c0011336:	59                   	pop    ecx
c0011337:	50                   	push   eax
c0011338:	53                   	push   ebx
c0011339:	e8 74 c4 ff ff       	call   c000d7b2 <VgaText::putx(unsigned int)>
c001133e:	5b                   	pop    ebx
c001133f:	a1 d4 59 02 c0       	mov    eax,ds:0xc00259d4
c0011344:	5e                   	pop    esi
c0011345:	68 c8 1d 02 c0       	push   0xc0021dc8
c001134a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011350:	e8 37 c4 ff ff       	call   c000d78c <VgaText::puts(char const*)>
c0011355:	a1 d4 59 02 c0       	mov    eax,ds:0xc00259d4
c001135a:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0011360:	e8 04 e7 00 00       	call   c001fa69 <CPU::readDR3()>
c0011365:	5f                   	pop    edi
c0011366:	5d                   	pop    ebp
c0011367:	50                   	push   eax
c0011368:	53                   	push   ebx
c0011369:	e8 44 c4 ff ff       	call   c000d7b2 <VgaText::putx(unsigned int)>
c001136e:	58                   	pop    eax
c001136f:	a1 d4 59 02 c0       	mov    eax,ds:0xc00259d4
c0011374:	5a                   	pop    edx
c0011375:	68 d0 1d 02 c0       	push   0xc0021dd0
c001137a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011380:	e8 07 c4 ff ff       	call   c000d78c <VgaText::puts(char const*)>
c0011385:	a1 d4 59 02 c0       	mov    eax,ds:0xc00259d4
c001138a:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0011390:	e8 e6 e6 00 00       	call   c001fa7b <CPU::readDR6()>
c0011395:	59                   	pop    ecx
c0011396:	5e                   	pop    esi
c0011397:	50                   	push   eax
c0011398:	53                   	push   ebx
c0011399:	e8 14 c4 ff ff       	call   c000d7b2 <VgaText::putx(unsigned int)>
c001139e:	5f                   	pop    edi
c001139f:	a1 d4 59 02 c0       	mov    eax,ds:0xc00259d4
c00113a4:	5d                   	pop    ebp
c00113a5:	68 d8 1d 02 c0       	push   0xc0021dd8
c00113aa:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00113b0:	e8 d7 c3 ff ff       	call   c000d78c <VgaText::puts(char const*)>
c00113b5:	a1 d4 59 02 c0       	mov    eax,ds:0xc00259d4
c00113ba:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c00113c0:	e8 c8 e6 00 00       	call   c001fa8d <CPU::readDR7()>
c00113c5:	5a                   	pop    edx
c00113c6:	59                   	pop    ecx
c00113c7:	50                   	push   eax
c00113c8:	53                   	push   ebx
c00113c9:	e8 e4 c3 ff ff       	call   c000d7b2 <VgaText::putx(unsigned int)>
c00113ce:	fa                   	cli    
c00113cf:	f4                   	hlt    
c00113d0:	83 c4 10             	add    esp,0x10
c00113d3:	eb fe                	jmp    c00113d3 <displayDebugInfo(regs*)+0x415>

c00113d5 <x87EmulHandler(regs*, void*)>:
c00113d5:	53                   	push   ebx
c00113d6:	83 ec 08             	sub    esp,0x8
c00113d9:	a1 14 47 02 c0       	mov    eax,ds:0xc0024714
c00113de:	85 c0                	test   eax,eax
c00113e0:	74 15                	je     c00113f7 <x87EmulHandler(regs*, void*)+0x22>
c00113e2:	83 ec 0c             	sub    esp,0xc
c00113e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00113e9:	ff d0                	call   eax
c00113eb:	83 c4 10             	add    esp,0x10
c00113ee:	84 c0                	test   al,al
c00113f0:	74 2f                	je     c0011421 <x87EmulHandler(regs*, void*)+0x4c>
c00113f2:	83 c4 08             	add    esp,0x8
c00113f5:	5b                   	pop    ebx
c00113f6:	c3                   	ret    
c00113f7:	83 ec 08             	sub    esp,0x8
c00113fa:	8b 1d 88 45 02 c0    	mov    ebx,DWORD PTR ds:0xc0024588
c0011400:	6a 01                	push   0x1
c0011402:	68 e0 1d 02 c0       	push   0xc0021de0
c0011407:	e8 3e 6f 00 00       	call   c001834a <Thr::loadDLL(char const*, bool)>
c001140c:	5a                   	pop    edx
c001140d:	59                   	pop    ecx
c001140e:	53                   	push   ebx
c001140f:	50                   	push   eax
c0011410:	e8 fb 70 00 00       	call   c0018510 <Thr::executeDLL(unsigned long, void*)>
c0011415:	a1 14 47 02 c0       	mov    eax,ds:0xc0024714
c001141a:	83 c4 10             	add    esp,0x10
c001141d:	85 c0                	test   eax,eax
c001141f:	75 c1                	jne    c00113e2 <x87EmulHandler(regs*, void*)+0xd>
c0011421:	83 ec 0c             	sub    esp,0xc
c0011424:	68 fd 1d 02 c0       	push   0xc0021dfd
c0011429:	e8 49 dd ff ff       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c001142e:	58                   	pop    eax
c001142f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011433:	e8 86 fb ff ff       	call   c0010fbe <displayDebugInfo(regs*)>

c0011438 <gpFault(regs*, void*)>:
c0011438:	53                   	push   ebx
c0011439:	83 ec 14             	sub    esp,0x14
c001143c:	c7 05 10 47 02 c0 c1 97 01 c0 	mov    DWORD PTR ds:0xc0024710,0xc00197c1
c0011446:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001144a:	53                   	push   ebx
c001144b:	e8 71 83 00 00       	call   c00197c1 <Vm::faultHandler(regs*)>
c0011450:	83 c4 10             	add    esp,0x10
c0011453:	84 c0                	test   al,al
c0011455:	74 05                	je     c001145c <gpFault(regs*, void*)+0x24>
c0011457:	83 c4 08             	add    esp,0x8
c001145a:	5b                   	pop    ebx
c001145b:	c3                   	ret    
c001145c:	83 ec 0c             	sub    esp,0xc
c001145f:	68 fd 1d 02 c0       	push   0xc0021dfd
c0011464:	e8 0e dd ff ff       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c0011469:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001146c:	e8 4d fb ff ff       	call   c0010fbe <displayDebugInfo(regs*)>

c0011471 <pgFault(regs*, void*)>:
c0011471:	83 ec 18             	sub    esp,0x18
c0011474:	68 18 1e 02 c0       	push   0xc0021e18
c0011479:	e8 f9 dc ff ff       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c001147e:	58                   	pop    eax
c001147f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011483:	e8 36 fb ff ff       	call   c0010fbe <displayDebugInfo(regs*)>

c0011488 <otherISRHandler(regs*, void*)>:
c0011488:	53                   	push   ebx
c0011489:	83 ec 0c             	sub    esp,0xc
c001148c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0011490:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0011493:	50                   	push   eax
c0011494:	50                   	push   eax
c0011495:	68 25 1e 02 c0       	push   0xc0021e25
c001149a:	e8 d8 dc ff ff       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c001149f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00114a2:	e8 17 fb ff ff       	call   c0010fbe <displayDebugInfo(regs*)>

c00114a7 <opcodeFault(regs*, void*)>:
c00114a7:	55                   	push   ebp
c00114a8:	89 e5                	mov    ebp,esp
c00114aa:	56                   	push   esi
c00114ab:	53                   	push   ebx
c00114ac:	83 ec 40             	sub    esp,0x40
c00114af:	e8 22 33 00 00       	call   c00147d6 <thisCPU()>
c00114b4:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c00114ba:	84 c0                	test   al,al
c00114bc:	74 24                	je     c00114e2 <opcodeFault(regs*, void*)+0x3b>
c00114be:	83 ec 0c             	sub    esp,0xc
c00114c1:	68 44 1e 02 c0       	push   0xc0021e44
c00114c6:	e8 ac dc ff ff       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c00114cb:	83 c4 10             	add    esp,0x10
c00114ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114d1:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00114d4:	8d 50 19             	lea    edx,[eax+0x19]
c00114d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114da:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00114dd:	e9 77 05 00 00       	jmp    c0011a59 <opcodeFault(regs*, void*)+0x5b2>
c00114e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114e5:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00114e8:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00114eb:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c00114ef:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c00114f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114f6:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00114f9:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00114fc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00114ff:	8a 00                	mov    al,BYTE PTR [eax]
c0011501:	3c f0                	cmp    al,0xf0
c0011503:	75 17                	jne    c001151c <opcodeFault(regs*, void*)+0x75>
c0011505:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0011508:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001150b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001150e:	8d 50 01             	lea    edx,[eax+0x1]
c0011511:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011514:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011517:	e9 da 00 00 00       	jmp    c00115f6 <opcodeFault(regs*, void*)+0x14f>
c001151c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001151f:	8a 00                	mov    al,BYTE PTR [eax]
c0011521:	3c f2                	cmp    al,0xf2
c0011523:	74 09                	je     c001152e <opcodeFault(regs*, void*)+0x87>
c0011525:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011528:	8a 00                	mov    al,BYTE PTR [eax]
c001152a:	3c f3                	cmp    al,0xf3
c001152c:	75 1b                	jne    c0011549 <opcodeFault(regs*, void*)+0xa2>
c001152e:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0011532:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0011535:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011538:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001153b:	8d 50 01             	lea    edx,[eax+0x1]
c001153e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011541:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011544:	e9 ad 00 00 00       	jmp    c00115f6 <opcodeFault(regs*, void*)+0x14f>
c0011549:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001154c:	8a 00                	mov    al,BYTE PTR [eax]
c001154e:	3c 66                	cmp    al,0x66
c0011550:	75 1f                	jne    c0011571 <opcodeFault(regs*, void*)+0xca>
c0011552:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0011556:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c001155a:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001155d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011560:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0011563:	8d 50 01             	lea    edx,[eax+0x1]
c0011566:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011569:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001156c:	e9 85 00 00 00       	jmp    c00115f6 <opcodeFault(regs*, void*)+0x14f>
c0011571:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011574:	8a 00                	mov    al,BYTE PTR [eax]
c0011576:	3c 67                	cmp    al,0x67
c0011578:	75 18                	jne    c0011592 <opcodeFault(regs*, void*)+0xeb>
c001157a:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c001157e:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0011581:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011584:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0011587:	8d 50 01             	lea    edx,[eax+0x1]
c001158a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001158d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011590:	eb 64                	jmp    c00115f6 <opcodeFault(regs*, void*)+0x14f>
c0011592:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011595:	8a 00                	mov    al,BYTE PTR [eax]
c0011597:	3c 2e                	cmp    al,0x2e
c0011599:	74 09                	je     c00115a4 <opcodeFault(regs*, void*)+0xfd>
c001159b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001159e:	8a 00                	mov    al,BYTE PTR [eax]
c00115a0:	3c 3e                	cmp    al,0x3e
c00115a2:	75 18                	jne    c00115bc <opcodeFault(regs*, void*)+0x115>
c00115a4:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00115a8:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00115ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115ae:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00115b1:	8d 50 01             	lea    edx,[eax+0x1]
c00115b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115b7:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00115ba:	eb 3a                	jmp    c00115f6 <opcodeFault(regs*, void*)+0x14f>
c00115bc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00115bf:	8a 00                	mov    al,BYTE PTR [eax]
c00115c1:	3c 36                	cmp    al,0x36
c00115c3:	74 1b                	je     c00115e0 <opcodeFault(regs*, void*)+0x139>
c00115c5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00115c8:	8a 00                	mov    al,BYTE PTR [eax]
c00115ca:	3c 26                	cmp    al,0x26
c00115cc:	74 12                	je     c00115e0 <opcodeFault(regs*, void*)+0x139>
c00115ce:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00115d1:	8a 00                	mov    al,BYTE PTR [eax]
c00115d3:	3c 64                	cmp    al,0x64
c00115d5:	74 09                	je     c00115e0 <opcodeFault(regs*, void*)+0x139>
c00115d7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00115da:	8a 00                	mov    al,BYTE PTR [eax]
c00115dc:	3c 65                	cmp    al,0x65
c00115de:	75 16                	jne    c00115f6 <opcodeFault(regs*, void*)+0x14f>
c00115e0:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00115e4:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00115e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115ea:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00115ed:	8d 50 01             	lea    edx,[eax+0x1]
c00115f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115f3:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00115f6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00115f9:	8a 00                	mov    al,BYTE PTR [eax]
c00115fb:	3c 0f                	cmp    al,0xf
c00115fd:	0f 85 ad 00 00 00    	jne    c00116b0 <opcodeFault(regs*, void*)+0x209>
c0011603:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011606:	40                   	inc    eax
c0011607:	8a 00                	mov    al,BYTE PTR [eax]
c0011609:	3c c2                	cmp    al,0xc2
c001160b:	74 0e                	je     c001161b <opcodeFault(regs*, void*)+0x174>
c001160d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011610:	40                   	inc    eax
c0011611:	8a 00                	mov    al,BYTE PTR [eax]
c0011613:	3c c3                	cmp    al,0xc3
c0011615:	0f 85 95 00 00 00    	jne    c00116b0 <opcodeFault(regs*, void*)+0x209>
c001161b:	83 ec 0c             	sub    esp,0xc
c001161e:	68 67 1e 02 c0       	push   0xc0021e67
c0011623:	e8 4f db ff ff       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c0011628:	83 c4 10             	add    esp,0x10
c001162b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001162e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0011631:	8d 50 01             	lea    edx,[eax+0x1]
c0011634:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011637:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001163a:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001163d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011640:	8a 00                	mov    al,BYTE PTR [eax]
c0011642:	8d 50 fe             	lea    edx,[eax-0x2]
c0011645:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011648:	88 10                	mov    BYTE PTR [eax],dl
c001164a:	8d 45 c2             	lea    eax,[ebp-0x3e]
c001164d:	50                   	push   eax
c001164e:	8d 45 c3             	lea    eax,[ebp-0x3d]
c0011651:	50                   	push   eax
c0011652:	8d 45 c4             	lea    eax,[ebp-0x3c]
c0011655:	50                   	push   eax
c0011656:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0011659:	e8 e4 40 00 00       	call   c0015742 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001165e:	83 c4 10             	add    esp,0x10
c0011661:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011664:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0011667:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c001166a:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c001166d:	01 d0                	add    eax,edx
c001166f:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0011672:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011675:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0011678:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c001167b:	48                   	dec    eax
c001167c:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001167f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011682:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0011685:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011688:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001168b:	83 ec 04             	sub    esp,0x4
c001168e:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0011691:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0011694:	50                   	push   eax
c0011695:	e8 b6 ea fe ff       	call   c0000150 <voodooXADD>
c001169a:	83 c4 10             	add    esp,0x10
c001169d:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00116a0:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00116a3:	01 c2                	add    edx,eax
c00116a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00116a8:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00116ab:	e9 a9 03 00 00       	jmp    c0011a59 <opcodeFault(regs*, void*)+0x5b2>
c00116b0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00116b3:	8a 00                	mov    al,BYTE PTR [eax]
c00116b5:	3c 0f                	cmp    al,0xf
c00116b7:	0f 85 8b 01 00 00    	jne    c0011848 <opcodeFault(regs*, void*)+0x3a1>
c00116bd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00116c0:	40                   	inc    eax
c00116c1:	8a 00                	mov    al,BYTE PTR [eax]
c00116c3:	3c c7                	cmp    al,0xc7
c00116c5:	0f 86 7d 01 00 00    	jbe    c0011848 <opcodeFault(regs*, void*)+0x3a1>
c00116cb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00116ce:	40                   	inc    eax
c00116cf:	8a 00                	mov    al,BYTE PTR [eax]
c00116d1:	3c cf                	cmp    al,0xcf
c00116d3:	0f 87 6f 01 00 00    	ja     c0011848 <opcodeFault(regs*, void*)+0x3a1>
c00116d9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00116dc:	40                   	inc    eax
c00116dd:	8a 00                	mov    al,BYTE PTR [eax]
c00116df:	83 c0 38             	add    eax,0x38
c00116e2:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c00116e5:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c00116e9:	75 0b                	jne    c00116f6 <opcodeFault(regs*, void*)+0x24f>
c00116eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00116ee:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00116f1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00116f4:	eb 75                	jmp    c001176b <opcodeFault(regs*, void*)+0x2c4>
c00116f6:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c00116fa:	75 0b                	jne    c0011707 <opcodeFault(regs*, void*)+0x260>
c00116fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00116ff:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0011702:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0011705:	eb 64                	jmp    c001176b <opcodeFault(regs*, void*)+0x2c4>
c0011707:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c001170b:	75 0b                	jne    c0011718 <opcodeFault(regs*, void*)+0x271>
c001170d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011710:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0011713:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0011716:	eb 53                	jmp    c001176b <opcodeFault(regs*, void*)+0x2c4>
c0011718:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c001171c:	75 0b                	jne    c0011729 <opcodeFault(regs*, void*)+0x282>
c001171e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011721:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011724:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0011727:	eb 42                	jmp    c001176b <opcodeFault(regs*, void*)+0x2c4>
c0011729:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c001172d:	75 0b                	jne    c001173a <opcodeFault(regs*, void*)+0x293>
c001172f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011732:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0011735:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0011738:	eb 31                	jmp    c001176b <opcodeFault(regs*, void*)+0x2c4>
c001173a:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c001173e:	75 0b                	jne    c001174b <opcodeFault(regs*, void*)+0x2a4>
c0011740:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011743:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0011746:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0011749:	eb 20                	jmp    c001176b <opcodeFault(regs*, void*)+0x2c4>
c001174b:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c001174f:	75 0b                	jne    c001175c <opcodeFault(regs*, void*)+0x2b5>
c0011751:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011754:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0011757:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001175a:	eb 0f                	jmp    c001176b <opcodeFault(regs*, void*)+0x2c4>
c001175c:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0011760:	75 09                	jne    c001176b <opcodeFault(regs*, void*)+0x2c4>
c0011762:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011765:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0011768:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001176b:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c001176f:	74 10                	je     c0011781 <opcodeFault(regs*, void*)+0x2da>
c0011771:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c0011778:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c001177f:	eb 2d                	jmp    c00117ae <opcodeFault(regs*, void*)+0x307>
c0011781:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0011784:	c1 e0 18             	shl    eax,0x18
c0011787:	89 c2                	mov    edx,eax
c0011789:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001178c:	c1 e0 08             	shl    eax,0x8
c001178f:	25 00 00 ff 00       	and    eax,0xff0000
c0011794:	09 c2                	or     edx,eax
c0011796:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0011799:	c1 e8 08             	shr    eax,0x8
c001179c:	25 00 ff 00 00       	and    eax,0xff00
c00117a1:	09 c2                	or     edx,eax
c00117a3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00117a6:	c1 e8 18             	shr    eax,0x18
c00117a9:	09 d0                	or     eax,edx
c00117ab:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00117ae:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c00117b2:	75 0b                	jne    c00117bf <opcodeFault(regs*, void*)+0x318>
c00117b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117b7:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00117ba:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00117bd:	eb 75                	jmp    c0011834 <opcodeFault(regs*, void*)+0x38d>
c00117bf:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c00117c3:	75 0b                	jne    c00117d0 <opcodeFault(regs*, void*)+0x329>
c00117c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117c8:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00117cb:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00117ce:	eb 64                	jmp    c0011834 <opcodeFault(regs*, void*)+0x38d>
c00117d0:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c00117d4:	75 0b                	jne    c00117e1 <opcodeFault(regs*, void*)+0x33a>
c00117d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117d9:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00117dc:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c00117df:	eb 53                	jmp    c0011834 <opcodeFault(regs*, void*)+0x38d>
c00117e1:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c00117e5:	75 0b                	jne    c00117f2 <opcodeFault(regs*, void*)+0x34b>
c00117e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117ea:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00117ed:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00117f0:	eb 42                	jmp    c0011834 <opcodeFault(regs*, void*)+0x38d>
c00117f2:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c00117f6:	75 0b                	jne    c0011803 <opcodeFault(regs*, void*)+0x35c>
c00117f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117fb:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00117fe:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c0011801:	eb 31                	jmp    c0011834 <opcodeFault(regs*, void*)+0x38d>
c0011803:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0011807:	75 0b                	jne    c0011814 <opcodeFault(regs*, void*)+0x36d>
c0011809:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001180c:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001180f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0011812:	eb 20                	jmp    c0011834 <opcodeFault(regs*, void*)+0x38d>
c0011814:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0011818:	75 0b                	jne    c0011825 <opcodeFault(regs*, void*)+0x37e>
c001181a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001181d:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0011820:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0011823:	eb 0f                	jmp    c0011834 <opcodeFault(regs*, void*)+0x38d>
c0011825:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0011829:	75 09                	jne    c0011834 <opcodeFault(regs*, void*)+0x38d>
c001182b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001182e:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0011831:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0011834:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011837:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001183a:	8d 50 02             	lea    edx,[eax+0x2]
c001183d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011840:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011843:	e9 11 02 00 00       	jmp    c0011a59 <opcodeFault(regs*, void*)+0x5b2>
c0011848:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001184b:	8a 00                	mov    al,BYTE PTR [eax]
c001184d:	3c 0f                	cmp    al,0xf
c001184f:	0f 85 76 01 00 00    	jne    c00119cb <opcodeFault(regs*, void*)+0x524>
c0011855:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011858:	40                   	inc    eax
c0011859:	8a 00                	mov    al,BYTE PTR [eax]
c001185b:	3c c7                	cmp    al,0xc7
c001185d:	0f 85 68 01 00 00    	jne    c00119cb <opcodeFault(regs*, void*)+0x524>
c0011863:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0011866:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011869:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001186c:	8d 50 01             	lea    edx,[eax+0x1]
c001186f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011872:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011875:	8d 45 ba             	lea    eax,[ebp-0x46]
c0011878:	50                   	push   eax
c0011879:	8d 45 bb             	lea    eax,[ebp-0x45]
c001187c:	50                   	push   eax
c001187d:	8d 45 bc             	lea    eax,[ebp-0x44]
c0011880:	50                   	push   eax
c0011881:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0011884:	e8 b9 3e 00 00       	call   c0015742 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0011889:	83 c4 10             	add    esp,0x10
c001188c:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001188f:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c0011892:	83 f0 01             	xor    eax,0x1
c0011895:	84 c0                	test   al,al
c0011897:	0f 84 2e 01 00 00    	je     c00119cb <opcodeFault(regs*, void*)+0x524>
c001189d:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c00118a0:	3c 01                	cmp    al,0x1
c00118a2:	0f 85 23 01 00 00    	jne    c00119cb <opcodeFault(regs*, void*)+0x524>
c00118a8:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c00118ab:	83 f0 01             	xor    eax,0x1
c00118ae:	84 c0                	test   al,al
c00118b0:	0f 84 15 01 00 00    	je     c00119cb <opcodeFault(regs*, void*)+0x524>
c00118b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118b9:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00118bc:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00118bf:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c00118c6:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00118c9:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00118cc:	89 c2                	mov    edx,eax
c00118ce:	b8 00 00 00 00       	mov    eax,0x0
c00118d3:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00118d6:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c00118d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118dc:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00118df:	ba 00 00 00 00       	mov    edx,0x0
c00118e4:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c00118e7:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c00118ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118ed:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00118f0:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c00118f3:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c00118fa:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c00118fd:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0011900:	89 c2                	mov    edx,eax
c0011902:	b8 00 00 00 00       	mov    eax,0x0
c0011907:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c001190a:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c001190d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011910:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011913:	ba 00 00 00 00       	mov    edx,0x0
c0011918:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c001191b:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c001191e:	e8 0c 70 00 00       	call   c001892f <lockScheduler()>
c0011923:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0011926:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0011929:	8b 00                	mov    eax,DWORD PTR [eax]
c001192b:	89 c1                	mov    ecx,eax
c001192d:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c0011930:	89 cb                	mov    ebx,ecx
c0011932:	89 d0                	mov    eax,edx
c0011934:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c0011937:	89 c6                	mov    esi,eax
c0011939:	89 f0                	mov    eax,esi
c001193b:	09 d8                	or     eax,ebx
c001193d:	85 c0                	test   eax,eax
c001193f:	75 21                	jne    c0011962 <opcodeFault(regs*, void*)+0x4bb>
c0011941:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0011944:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0011947:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c001194a:	89 01                	mov    DWORD PTR [ecx],eax
c001194c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001194f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011952:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011955:	83 c8 40             	or     eax,0x40
c0011958:	89 c2                	mov    edx,eax
c001195a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001195d:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0011960:	eb 3e                	jmp    c00119a0 <opcodeFault(regs*, void*)+0x4f9>
c0011962:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0011965:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0011968:	8b 00                	mov    eax,DWORD PTR [eax]
c001196a:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c001196d:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0011970:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0011973:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011976:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0011979:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c001197c:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001197f:	89 d0                	mov    eax,edx
c0011981:	31 d2                	xor    edx,edx
c0011983:	89 c3                	mov    ebx,eax
c0011985:	89 d6                	mov    esi,edx
c0011987:	89 da                	mov    edx,ebx
c0011989:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001198c:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c001198f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011992:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011995:	83 e0 bf             	and    eax,0xffffffbf
c0011998:	89 c2                	mov    edx,eax
c001199a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001199d:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c00119a0:	e8 8c 6f 00 00       	call   c0018931 <unlockScheduler()>
c00119a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00119a8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00119ab:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c00119ae:	01 c2                	add    edx,eax
c00119b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00119b3:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00119b6:	83 ec 0c             	sub    esp,0xc
c00119b9:	68 76 1e 02 c0       	push   0xc0021e76
c00119be:	e8 b4 d7 ff ff       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c00119c3:	83 c4 10             	add    esp,0x10
c00119c6:	e9 8e 00 00 00       	jmp    c0011a59 <opcodeFault(regs*, void*)+0x5b2>
c00119cb:	83 ec 0c             	sub    esp,0xc
c00119ce:	68 89 1e 02 c0       	push   0xc0021e89
c00119d3:	e8 9f d7 ff ff       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c00119d8:	83 c4 10             	add    esp,0x10
c00119db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00119de:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00119e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00119e4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00119e7:	c1 e0 04             	shl    eax,0x4
c00119ea:	01 d0                	add    eax,edx
c00119ec:	83 c0 03             	add    eax,0x3
c00119ef:	8a 00                	mov    al,BYTE PTR [eax]
c00119f1:	0f b6 d8             	movzx  ebx,al
c00119f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00119f7:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00119fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00119fd:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011a00:	c1 e0 04             	shl    eax,0x4
c0011a03:	01 d0                	add    eax,edx
c0011a05:	83 c0 02             	add    eax,0x2
c0011a08:	8a 00                	mov    al,BYTE PTR [eax]
c0011a0a:	0f b6 c8             	movzx  ecx,al
c0011a0d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a10:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0011a13:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a16:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011a19:	c1 e0 04             	shl    eax,0x4
c0011a1c:	01 d0                	add    eax,edx
c0011a1e:	40                   	inc    eax
c0011a1f:	8a 00                	mov    al,BYTE PTR [eax]
c0011a21:	0f b6 d0             	movzx  edx,al
c0011a24:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a27:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c0011a2a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a2d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011a30:	c1 e0 04             	shl    eax,0x4
c0011a33:	01 f0                	add    eax,esi
c0011a35:	8a 00                	mov    al,BYTE PTR [eax]
c0011a37:	0f b6 c0             	movzx  eax,al
c0011a3a:	83 ec 0c             	sub    esp,0xc
c0011a3d:	53                   	push   ebx
c0011a3e:	51                   	push   ecx
c0011a3f:	52                   	push   edx
c0011a40:	50                   	push   eax
c0011a41:	68 9c 1e 02 c0       	push   0xc0021e9c
c0011a46:	e8 2c d7 ff ff       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c0011a4b:	83 c4 20             	add    esp,0x20
c0011a4e:	83 ec 0c             	sub    esp,0xc
c0011a51:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0011a54:	e8 65 f5 ff ff       	call   c0010fbe <displayDebugInfo(regs*)>
c0011a59:	8d 65 f8             	lea    esp,[ebp-0x8]
c0011a5c:	5b                   	pop    ebx
c0011a5d:	5e                   	pop    esi
c0011a5e:	5d                   	pop    ebp
c0011a5f:	c3                   	ret    

c0011a60 <displayProgramFault(char const*)>:
c0011a60:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011a65:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011a68:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0011a6e:	85 c0                	test   eax,eax
c0011a70:	74 15                	je     c0011a87 <displayProgramFault(char const*)+0x27>
c0011a72:	83 ec 0c             	sub    esp,0xc
c0011a75:	6a 04                	push   0x4
c0011a77:	6a 0f                	push   0xf
c0011a79:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011a7d:	50                   	push   eax
c0011a7e:	e8 c9 b9 ff ff       	call   c000d44c <VgaText::puts(char const*, VgaColour, VgaColour)>
c0011a83:	83 c4 1c             	add    esp,0x1c
c0011a86:	c3                   	ret    
c0011a87:	c3                   	ret    

c0011a88 <setupInterruptController()>:
c0011a88:	55                   	push   ebp
c0011a89:	89 e5                	mov    ebp,esp
c0011a8b:	53                   	push   ebx
c0011a8c:	83 ec 14             	sub    esp,0x14
c0011a8f:	e8 3f 2d 00 00       	call   c00147d3 <getCPUNumber()>
c0011a94:	85 c0                	test   eax,eax
c0011a96:	0f 95 c0             	setne  al
c0011a99:	84 c0                	test   al,al
c0011a9b:	74 56                	je     c0011af3 <setupInterruptController()+0x6b>
c0011a9d:	83 ec 0c             	sub    esp,0xc
c0011aa0:	68 58 21 00 00       	push   0x2158
c0011aa5:	e8 98 d5 ff ff       	call   c000f042 <operator new(unsigned long)>
c0011aaa:	83 c4 10             	add    esp,0x10
c0011aad:	89 c3                	mov    ebx,eax
c0011aaf:	83 ec 0c             	sub    esp,0xc
c0011ab2:	53                   	push   ebx
c0011ab3:	e8 c2 c8 00 00       	call   c001e37a <APIC::APIC()>
c0011ab8:	83 c4 10             	add    esp,0x10
c0011abb:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c0011abe:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c0011ac1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0011ac4:	8b 00                	mov    eax,DWORD PTR [eax]
c0011ac6:	83 c0 08             	add    eax,0x8
c0011ac9:	8b 00                	mov    eax,DWORD PTR [eax]
c0011acb:	6a 00                	push   0x0
c0011acd:	6a 00                	push   0x0
c0011acf:	6a 00                	push   0x0
c0011ad1:	52                   	push   edx
c0011ad2:	ff d0                	call   eax
c0011ad4:	83 c4 10             	add    esp,0x10
c0011ad7:	a1 88 45 02 c0       	mov    eax,ds:0xc0024588
c0011adc:	83 ec 08             	sub    esp,0x8
c0011adf:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0011ae2:	50                   	push   eax
c0011ae3:	e8 a4 ea ff ff       	call   c001058c <Device::addChild(Device*)>
c0011ae8:	83 c4 10             	add    esp,0x10
c0011aeb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0011aee:	e9 48 03 00 00       	jmp    c0011e3b <setupInterruptController()+0x3b3>
c0011af3:	a1 88 45 02 c0       	mov    eax,ds:0xc0024588
c0011af8:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011afe:	83 e0 01             	and    eax,0x1
c0011b01:	84 c0                	test   al,al
c0011b03:	0f 95 c0             	setne  al
c0011b06:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0011b09:	83 ec 0c             	sub    esp,0xc
c0011b0c:	68 58 21 00 00       	push   0x2158
c0011b11:	e8 2c d5 ff ff       	call   c000f042 <operator new(unsigned long)>
c0011b16:	83 c4 10             	add    esp,0x10
c0011b19:	89 c3                	mov    ebx,eax
c0011b1b:	83 ec 0c             	sub    esp,0xc
c0011b1e:	53                   	push   ebx
c0011b1f:	e8 50 cd 00 00       	call   c001e874 <PIC::PIC()>
c0011b24:	83 c4 10             	add    esp,0x10
c0011b27:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0011b2a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0011b2d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011b30:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b32:	83 c0 08             	add    eax,0x8
c0011b35:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b37:	6a 00                	push   0x0
c0011b39:	6a 00                	push   0x0
c0011b3b:	6a 00                	push   0x0
c0011b3d:	52                   	push   edx
c0011b3e:	ff d0                	call   eax
c0011b40:	83 c4 10             	add    esp,0x10
c0011b43:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c0011b47:	74 6e                	je     c0011bb7 <setupInterruptController()+0x12f>
c0011b49:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0011b4c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011b4f:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b51:	83 c0 0c             	add    eax,0xc
c0011b54:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b56:	6a 00                	push   0x0
c0011b58:	6a 00                	push   0x0
c0011b5a:	6a 00                	push   0x0
c0011b5c:	52                   	push   edx
c0011b5d:	ff d0                	call   eax
c0011b5f:	83 c4 10             	add    esp,0x10
c0011b62:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0011b66:	74 15                	je     c0011b7d <setupInterruptController()+0xf5>
c0011b68:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011b6b:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b6d:	83 c0 04             	add    eax,0x4
c0011b70:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b72:	83 ec 0c             	sub    esp,0xc
c0011b75:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011b78:	ff d0                	call   eax
c0011b7a:	83 c4 10             	add    esp,0x10
c0011b7d:	83 ec 0c             	sub    esp,0xc
c0011b80:	68 58 21 00 00       	push   0x2158
c0011b85:	e8 b8 d4 ff ff       	call   c000f042 <operator new(unsigned long)>
c0011b8a:	83 c4 10             	add    esp,0x10
c0011b8d:	89 c3                	mov    ebx,eax
c0011b8f:	83 ec 0c             	sub    esp,0xc
c0011b92:	53                   	push   ebx
c0011b93:	e8 e2 c7 00 00       	call   c001e37a <APIC::APIC()>
c0011b98:	83 c4 10             	add    esp,0x10
c0011b9b:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0011b9e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0011ba1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011ba4:	8b 00                	mov    eax,DWORD PTR [eax]
c0011ba6:	83 c0 08             	add    eax,0x8
c0011ba9:	8b 00                	mov    eax,DWORD PTR [eax]
c0011bab:	6a 00                	push   0x0
c0011bad:	6a 00                	push   0x0
c0011baf:	6a 00                	push   0x0
c0011bb1:	52                   	push   edx
c0011bb2:	ff d0                	call   eax
c0011bb4:	83 c4 10             	add    esp,0x10
c0011bb7:	a1 88 45 02 c0       	mov    eax,ds:0xc0024588
c0011bbc:	83 ec 08             	sub    esp,0x8
c0011bbf:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011bc2:	50                   	push   eax
c0011bc3:	e8 c4 e9 ff ff       	call   c001058c <Device::addChild(Device*)>
c0011bc8:	83 c4 10             	add    esp,0x10
c0011bcb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011bce:	8b 00                	mov    eax,DWORD PTR [eax]
c0011bd0:	83 c0 24             	add    eax,0x24
c0011bd3:	8b 00                	mov    eax,DWORD PTR [eax]
c0011bd5:	6a 00                	push   0x0
c0011bd7:	68 88 14 01 c0       	push   0xc0011488
c0011bdc:	6a 00                	push   0x0
c0011bde:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011be1:	ff d0                	call   eax
c0011be3:	83 c4 10             	add    esp,0x10
c0011be6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011be9:	8b 00                	mov    eax,DWORD PTR [eax]
c0011beb:	83 c0 24             	add    eax,0x24
c0011bee:	8b 00                	mov    eax,DWORD PTR [eax]
c0011bf0:	6a 00                	push   0x0
c0011bf2:	68 88 14 01 c0       	push   0xc0011488
c0011bf7:	6a 01                	push   0x1
c0011bf9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011bfc:	ff d0                	call   eax
c0011bfe:	83 c4 10             	add    esp,0x10
c0011c01:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011c04:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c06:	83 c0 24             	add    eax,0x24
c0011c09:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c0b:	6a 00                	push   0x0
c0011c0d:	68 21 0e 01 c0       	push   0xc0010e21
c0011c12:	6a 02                	push   0x2
c0011c14:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011c17:	ff d0                	call   eax
c0011c19:	83 c4 10             	add    esp,0x10
c0011c1c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011c1f:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c21:	83 c0 24             	add    eax,0x24
c0011c24:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c26:	6a 00                	push   0x0
c0011c28:	68 88 14 01 c0       	push   0xc0011488
c0011c2d:	6a 03                	push   0x3
c0011c2f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011c32:	ff d0                	call   eax
c0011c34:	83 c4 10             	add    esp,0x10
c0011c37:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011c3a:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c3c:	83 c0 24             	add    eax,0x24
c0011c3f:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c41:	6a 00                	push   0x0
c0011c43:	68 88 14 01 c0       	push   0xc0011488
c0011c48:	6a 04                	push   0x4
c0011c4a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011c4d:	ff d0                	call   eax
c0011c4f:	83 c4 10             	add    esp,0x10
c0011c52:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011c55:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c57:	83 c0 24             	add    eax,0x24
c0011c5a:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c5c:	6a 00                	push   0x0
c0011c5e:	68 88 14 01 c0       	push   0xc0011488
c0011c63:	6a 05                	push   0x5
c0011c65:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011c68:	ff d0                	call   eax
c0011c6a:	83 c4 10             	add    esp,0x10
c0011c6d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011c70:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c72:	83 c0 24             	add    eax,0x24
c0011c75:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c77:	6a 00                	push   0x0
c0011c79:	68 a7 14 01 c0       	push   0xc00114a7
c0011c7e:	6a 06                	push   0x6
c0011c80:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011c83:	ff d0                	call   eax
c0011c85:	83 c4 10             	add    esp,0x10
c0011c88:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011c8b:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c8d:	83 c0 24             	add    eax,0x24
c0011c90:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c92:	6a 00                	push   0x0
c0011c94:	68 d5 13 01 c0       	push   0xc00113d5
c0011c99:	6a 07                	push   0x7
c0011c9b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011c9e:	ff d0                	call   eax
c0011ca0:	83 c4 10             	add    esp,0x10
c0011ca3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011ca6:	8b 00                	mov    eax,DWORD PTR [eax]
c0011ca8:	83 c0 24             	add    eax,0x24
c0011cab:	8b 00                	mov    eax,DWORD PTR [eax]
c0011cad:	6a 00                	push   0x0
c0011caf:	68 3c 0c 01 c0       	push   0xc0010c3c
c0011cb4:	6a 08                	push   0x8
c0011cb6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011cb9:	ff d0                	call   eax
c0011cbb:	83 c4 10             	add    esp,0x10
c0011cbe:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011cc1:	8b 00                	mov    eax,DWORD PTR [eax]
c0011cc3:	83 c0 24             	add    eax,0x24
c0011cc6:	8b 00                	mov    eax,DWORD PTR [eax]
c0011cc8:	6a 00                	push   0x0
c0011cca:	68 88 14 01 c0       	push   0xc0011488
c0011ccf:	6a 09                	push   0x9
c0011cd1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011cd4:	ff d0                	call   eax
c0011cd6:	83 c4 10             	add    esp,0x10
c0011cd9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011cdc:	8b 00                	mov    eax,DWORD PTR [eax]
c0011cde:	83 c0 24             	add    eax,0x24
c0011ce1:	8b 00                	mov    eax,DWORD PTR [eax]
c0011ce3:	6a 00                	push   0x0
c0011ce5:	68 88 14 01 c0       	push   0xc0011488
c0011cea:	6a 0a                	push   0xa
c0011cec:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011cef:	ff d0                	call   eax
c0011cf1:	83 c4 10             	add    esp,0x10
c0011cf4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011cf7:	8b 00                	mov    eax,DWORD PTR [eax]
c0011cf9:	83 c0 24             	add    eax,0x24
c0011cfc:	8b 00                	mov    eax,DWORD PTR [eax]
c0011cfe:	6a 00                	push   0x0
c0011d00:	68 88 14 01 c0       	push   0xc0011488
c0011d05:	6a 0b                	push   0xb
c0011d07:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011d0a:	ff d0                	call   eax
c0011d0c:	83 c4 10             	add    esp,0x10
c0011d0f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011d12:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d14:	83 c0 24             	add    eax,0x24
c0011d17:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d19:	6a 00                	push   0x0
c0011d1b:	68 88 14 01 c0       	push   0xc0011488
c0011d20:	6a 0c                	push   0xc
c0011d22:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011d25:	ff d0                	call   eax
c0011d27:	83 c4 10             	add    esp,0x10
c0011d2a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011d2d:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d2f:	83 c0 24             	add    eax,0x24
c0011d32:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d34:	6a 00                	push   0x0
c0011d36:	68 38 14 01 c0       	push   0xc0011438
c0011d3b:	6a 0d                	push   0xd
c0011d3d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011d40:	ff d0                	call   eax
c0011d42:	83 c4 10             	add    esp,0x10
c0011d45:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011d48:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d4a:	83 c0 24             	add    eax,0x24
c0011d4d:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d4f:	6a 00                	push   0x0
c0011d51:	68 71 14 01 c0       	push   0xc0011471
c0011d56:	6a 0e                	push   0xe
c0011d58:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011d5b:	ff d0                	call   eax
c0011d5d:	83 c4 10             	add    esp,0x10
c0011d60:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011d63:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d65:	83 c0 24             	add    eax,0x24
c0011d68:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d6a:	6a 00                	push   0x0
c0011d6c:	68 88 14 01 c0       	push   0xc0011488
c0011d71:	6a 0f                	push   0xf
c0011d73:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011d76:	ff d0                	call   eax
c0011d78:	83 c4 10             	add    esp,0x10
c0011d7b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011d7e:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d80:	83 c0 24             	add    eax,0x24
c0011d83:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d85:	6a 00                	push   0x0
c0011d87:	68 88 14 01 c0       	push   0xc0011488
c0011d8c:	6a 10                	push   0x10
c0011d8e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011d91:	ff d0                	call   eax
c0011d93:	83 c4 10             	add    esp,0x10
c0011d96:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011d99:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d9b:	83 c0 24             	add    eax,0x24
c0011d9e:	8b 00                	mov    eax,DWORD PTR [eax]
c0011da0:	6a 00                	push   0x0
c0011da2:	68 88 14 01 c0       	push   0xc0011488
c0011da7:	6a 11                	push   0x11
c0011da9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011dac:	ff d0                	call   eax
c0011dae:	83 c4 10             	add    esp,0x10
c0011db1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011db4:	8b 00                	mov    eax,DWORD PTR [eax]
c0011db6:	83 c0 24             	add    eax,0x24
c0011db9:	8b 00                	mov    eax,DWORD PTR [eax]
c0011dbb:	6a 00                	push   0x0
c0011dbd:	68 88 14 01 c0       	push   0xc0011488
c0011dc2:	6a 12                	push   0x12
c0011dc4:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011dc7:	ff d0                	call   eax
c0011dc9:	83 c4 10             	add    esp,0x10
c0011dcc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011dcf:	8b 00                	mov    eax,DWORD PTR [eax]
c0011dd1:	83 c0 24             	add    eax,0x24
c0011dd4:	8b 00                	mov    eax,DWORD PTR [eax]
c0011dd6:	6a 00                	push   0x0
c0011dd8:	68 88 14 01 c0       	push   0xc0011488
c0011ddd:	6a 13                	push   0x13
c0011ddf:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011de2:	ff d0                	call   eax
c0011de4:	83 c4 10             	add    esp,0x10
c0011de7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011dea:	8b 00                	mov    eax,DWORD PTR [eax]
c0011dec:	83 c0 24             	add    eax,0x24
c0011def:	8b 00                	mov    eax,DWORD PTR [eax]
c0011df1:	6a 00                	push   0x0
c0011df3:	68 88 14 01 c0       	push   0xc0011488
c0011df8:	6a 14                	push   0x14
c0011dfa:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011dfd:	ff d0                	call   eax
c0011dff:	83 c4 10             	add    esp,0x10
c0011e02:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011e05:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e07:	83 c0 24             	add    eax,0x24
c0011e0a:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e0c:	6a 00                	push   0x0
c0011e0e:	68 88 14 01 c0       	push   0xc0011488
c0011e13:	6a 1e                	push   0x1e
c0011e15:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011e18:	ff d0                	call   eax
c0011e1a:	83 c4 10             	add    esp,0x10
c0011e1d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011e20:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e22:	83 c0 24             	add    eax,0x24
c0011e25:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e27:	6a 00                	push   0x0
c0011e29:	68 37 73 01 c0       	push   0xc0017337
c0011e2e:	6a 60                	push   0x60
c0011e30:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011e33:	ff d0                	call   eax
c0011e35:	83 c4 10             	add    esp,0x10
c0011e38:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011e3b:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0011e3e:	c9                   	leave  
c0011e3f:	c3                   	ret    

c0011e40 <InterruptController::convertLegacyIRQNumber(int)>:
c0011e40:	55                   	push   ebp
c0011e41:	89 e5                	mov    ebp,esp
c0011e43:	83 ec 08             	sub    esp,0x8
c0011e46:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011e49:	83 ec 0c             	sub    esp,0xc
c0011e4c:	50                   	push   eax
c0011e4d:	e8 1c ea ff ff       	call   c001086e <Device::getName()>
c0011e52:	83 c4 10             	add    esp,0x10
c0011e55:	8a 00                	mov    al,BYTE PTR [eax]
c0011e57:	3c 41                	cmp    al,0x41
c0011e59:	0f 94 c0             	sete   al
c0011e5c:	84 c0                	test   al,al
c0011e5e:	74 28                	je     c0011e88 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0011e60:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0011e64:	7f 12                	jg     c0011e78 <InterruptController::convertLegacyIRQNumber(int)+0x38>
c0011e66:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0011e69:	05 e0 3c 02 c0       	add    eax,0xc0023ce0
c0011e6e:	8a 00                	mov    al,BYTE PTR [eax]
c0011e70:	0f b6 c0             	movzx  eax,al
c0011e73:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0011e76:	eb 10                	jmp    c0011e88 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0011e78:	83 ec 0c             	sub    esp,0xc
c0011e7b:	68 14 1c 02 c0       	push   0xc0021c14
c0011e80:	e8 bd 3a 00 00       	call   c0015942 <Krnl::panic(char const*)>
c0011e85:	83 c4 10             	add    esp,0x10
c0011e88:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0011e8b:	c9                   	leave  
c0011e8c:	c3                   	ret    
c0011e8d:	90                   	nop

c0011e8e <startGUI(void*)>:
c0011e8e:	55                   	push   ebp
c0011e8f:	89 e5                	mov    ebp,esp
c0011e91:	53                   	push   ebx
c0011e92:	83 ec 04             	sub    esp,0x4
c0011e95:	e8 97 6a 00 00       	call   c0018931 <unlockScheduler()>
c0011e9a:	e8 7b 6a 00 00       	call   c001891a <getIRQNestingLevel()>
c0011e9f:	83 ec 08             	sub    esp,0x8
c0011ea2:	50                   	push   eax
c0011ea3:	68 04 1f 02 c0       	push   0xc0021f04
c0011ea8:	e8 ca d2 ff ff       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c0011ead:	83 c4 10             	add    esp,0x10
c0011eb0:	8b 1d 88 45 02 c0    	mov    ebx,DWORD PTR ds:0xc0024588
c0011eb6:	83 ec 08             	sub    esp,0x8
c0011eb9:	6a 01                	push   0x1
c0011ebb:	68 1e 1f 02 c0       	push   0xc0021f1e
c0011ec0:	e8 85 64 00 00       	call   c001834a <Thr::loadDLL(char const*, bool)>
c0011ec5:	83 c4 10             	add    esp,0x10
c0011ec8:	83 ec 08             	sub    esp,0x8
c0011ecb:	53                   	push   ebx
c0011ecc:	50                   	push   eax
c0011ecd:	e8 3e 66 00 00       	call   c0018510 <Thr::executeDLL(unsigned long, void*)>
c0011ed2:	83 c4 10             	add    esp,0x10
c0011ed5:	8b 1d 88 45 02 c0    	mov    ebx,DWORD PTR ds:0xc0024588
c0011edb:	83 ec 08             	sub    esp,0x8
c0011ede:	6a 01                	push   0x1
c0011ee0:	68 38 1f 02 c0       	push   0xc0021f38
c0011ee5:	e8 60 64 00 00       	call   c001834a <Thr::loadDLL(char const*, bool)>
c0011eea:	83 c4 10             	add    esp,0x10
c0011eed:	83 ec 08             	sub    esp,0x8
c0011ef0:	53                   	push   ebx
c0011ef1:	50                   	push   eax
c0011ef2:	e8 19 66 00 00       	call   c0018510 <Thr::executeDLL(unsigned long, void*)>
c0011ef7:	83 c4 10             	add    esp,0x10
c0011efa:	90                   	nop
c0011efb:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0011efe:	c9                   	leave  
c0011eff:	c3                   	ret    

c0011f00 <sendKeyToTerminal(unsigned char)>:
c0011f00:	55                   	push   ebp
c0011f01:	89 e5                	mov    ebp,esp
c0011f03:	83 ec 28             	sub    esp,0x28
c0011f06:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011f09:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0011f0c:	8b 15 44 46 02 c0    	mov    edx,DWORD PTR ds:0xc0024644
c0011f12:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c0011f15:	25 ff 00 00 00       	and    eax,0xff
c0011f1a:	83 ec 08             	sub    esp,0x8
c0011f1d:	50                   	push   eax
c0011f1e:	52                   	push   edx
c0011f1f:	e8 66 ba ff ff       	call   c000d98a <VgaText::receiveKey(unsigned char)>
c0011f24:	83 c4 10             	add    esp,0x10
c0011f27:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c0011f2b:	75 41                	jne    c0011f6e <sendKeyToTerminal(unsigned char)+0x6e>
c0011f2d:	e8 24 6a 00 00       	call   c0018956 <lockStuff()>
c0011f32:	a1 20 47 02 c0       	mov    eax,ds:0xc0024720
c0011f37:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0011f3a:	c7 05 20 47 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024720,0x0
c0011f44:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0011f48:	74 1f                	je     c0011f69 <sendKeyToTerminal(unsigned char)+0x69>
c0011f4a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011f4d:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0011f50:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0011f53:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011f56:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0011f59:	83 ec 0c             	sub    esp,0xc
c0011f5c:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0011f5f:	e8 ef 6f 00 00       	call   c0018f53 <unblockTask(ThreadControlBlock*)>
c0011f64:	83 c4 10             	add    esp,0x10
c0011f67:	eb db                	jmp    c0011f44 <sendKeyToTerminal(unsigned char)+0x44>
c0011f69:	e8 8f 6d 00 00       	call   c0018cfd <unlockStuff()>
c0011f6e:	90                   	nop
c0011f6f:	c9                   	leave  
c0011f70:	c3                   	ret    

c0011f71 <sendKeyboardToken(KeyboardToken)>:
c0011f71:	55                   	push   ebp
c0011f72:	89 e5                	mov    ebp,esp
c0011f74:	83 ec 18             	sub    esp,0x18
c0011f77:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0011f7a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011f7d:	25 ff ff 00 00       	and    eax,0xffff
c0011f82:	83 f2 01             	xor    edx,0x1
c0011f85:	88 90 40 47 02 c0    	mov    BYTE PTR [eax-0x3ffdb8c0],dl
c0011f8b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011f8e:	66 3d 03 02          	cmp    ax,0x203
c0011f92:	75 07                	jne    c0011f9b <sendKeyboardToken(KeyboardToken)+0x2a>
c0011f94:	a0 40 48 02 c0       	mov    al,ds:0xc0024840
c0011f99:	84 c0                	test   al,al
c0011f9b:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0011f9f:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c0011fa2:	a0 48 4b 02 c0       	mov    al,ds:0xc0024b48
c0011fa7:	38 c2                	cmp    dl,al
c0011fa9:	74 1e                	je     c0011fc9 <sendKeyboardToken(KeyboardToken)+0x58>
c0011fab:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0011fae:	a2 48 4b 02 c0       	mov    ds:0xc0024b48,al
c0011fb3:	a0 48 4b 02 c0       	mov    al,ds:0xc0024b48
c0011fb8:	25 ff 00 00 00       	and    eax,0xff
c0011fbd:	83 ec 0c             	sub    esp,0xc
c0011fc0:	50                   	push   eax
c0011fc1:	e8 30 ac ff ff       	call   c000cbf6 <setTerminalScrollLock(bool)>
c0011fc6:	83 c4 10             	add    esp,0x10
c0011fc9:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0011fcc:	84 c0                	test   al,al
c0011fce:	0f 84 ae 00 00 00    	je     c0012082 <sendKeyboardToken(KeyboardToken)+0x111>
c0011fd4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011fd7:	66 3d 10 03          	cmp    ax,0x310
c0011fdb:	75 06                	jne    c0011fe3 <sendKeyboardToken(KeyboardToken)+0x72>
c0011fdd:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0011fe3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011fe6:	66 3d 11 03          	cmp    ax,0x311
c0011fea:	75 06                	jne    c0011ff2 <sendKeyboardToken(KeyboardToken)+0x81>
c0011fec:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0011ff2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011ff5:	66 3d 12 03          	cmp    ax,0x312
c0011ff9:	75 06                	jne    c0012001 <sendKeyboardToken(KeyboardToken)+0x90>
c0011ffb:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c0012001:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012004:	66 3d 13 03          	cmp    ax,0x313
c0012008:	75 06                	jne    c0012010 <sendKeyboardToken(KeyboardToken)+0x9f>
c001200a:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c0012010:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012013:	66 3d 14 03          	cmp    ax,0x314
c0012017:	75 06                	jne    c001201f <sendKeyboardToken(KeyboardToken)+0xae>
c0012019:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c001201f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012022:	66 3d 15 03          	cmp    ax,0x315
c0012026:	75 06                	jne    c001202e <sendKeyboardToken(KeyboardToken)+0xbd>
c0012028:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c001202e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012031:	66 3d 16 03          	cmp    ax,0x316
c0012035:	75 06                	jne    c001203d <sendKeyboardToken(KeyboardToken)+0xcc>
c0012037:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c001203d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012040:	66 3d 17 03          	cmp    ax,0x317
c0012044:	75 06                	jne    c001204c <sendKeyboardToken(KeyboardToken)+0xdb>
c0012046:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c001204c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001204f:	66 3d 18 03          	cmp    ax,0x318
c0012053:	75 06                	jne    c001205b <sendKeyboardToken(KeyboardToken)+0xea>
c0012055:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c001205b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001205e:	66 3d 19 03          	cmp    ax,0x319
c0012062:	75 06                	jne    c001206a <sendKeyboardToken(KeyboardToken)+0xf9>
c0012064:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c001206a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001206d:	66 3d 1a 03          	cmp    ax,0x31a
c0012071:	0f 85 c9 00 00 00    	jne    c0012140 <sendKeyboardToken(KeyboardToken)+0x1cf>
c0012077:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c001207d:	e9 be 00 00 00       	jmp    c0012140 <sendKeyboardToken(KeyboardToken)+0x1cf>
c0012082:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012085:	66 3d 10 03          	cmp    ax,0x310
c0012089:	75 0a                	jne    c0012095 <sendKeyboardToken(KeyboardToken)+0x124>
c001208b:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0012091:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0012095:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012098:	66 3d 11 03          	cmp    ax,0x311
c001209c:	75 0a                	jne    c00120a8 <sendKeyboardToken(KeyboardToken)+0x137>
c001209e:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c00120a4:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00120a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00120ab:	66 3d 12 03          	cmp    ax,0x312
c00120af:	75 0a                	jne    c00120bb <sendKeyboardToken(KeyboardToken)+0x14a>
c00120b1:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c00120b7:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00120bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00120be:	66 3d 13 03          	cmp    ax,0x313
c00120c2:	75 0a                	jne    c00120ce <sendKeyboardToken(KeyboardToken)+0x15d>
c00120c4:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c00120ca:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00120ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00120d1:	66 3d 14 03          	cmp    ax,0x314
c00120d5:	75 0a                	jne    c00120e1 <sendKeyboardToken(KeyboardToken)+0x170>
c00120d7:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c00120dd:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00120e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00120e4:	66 3d 15 03          	cmp    ax,0x315
c00120e8:	75 0a                	jne    c00120f4 <sendKeyboardToken(KeyboardToken)+0x183>
c00120ea:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c00120f0:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00120f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00120f7:	66 3d 16 03          	cmp    ax,0x316
c00120fb:	75 0a                	jne    c0012107 <sendKeyboardToken(KeyboardToken)+0x196>
c00120fd:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c0012103:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0012107:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001210a:	66 3d 17 03          	cmp    ax,0x317
c001210e:	75 0a                	jne    c001211a <sendKeyboardToken(KeyboardToken)+0x1a9>
c0012110:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c0012116:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001211a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001211d:	66 3d 18 03          	cmp    ax,0x318
c0012121:	75 0a                	jne    c001212d <sendKeyboardToken(KeyboardToken)+0x1bc>
c0012123:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c0012129:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001212d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012130:	66 3d 19 03          	cmp    ax,0x319
c0012134:	75 0a                	jne    c0012140 <sendKeyboardToken(KeyboardToken)+0x1cf>
c0012136:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c001213c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0012140:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012143:	66 3d 00 02          	cmp    ax,0x200
c0012147:	75 2a                	jne    c0012173 <sendKeyboardToken(KeyboardToken)+0x202>
c0012149:	a0 40 4b 02 c0       	mov    al,ds:0xc0024b40
c001214e:	83 f0 01             	xor    eax,0x1
c0012151:	84 c0                	test   al,al
c0012153:	74 1e                	je     c0012173 <sendKeyboardToken(KeyboardToken)+0x202>
c0012155:	a1 d4 59 02 c0       	mov    eax,ds:0xc00259d4
c001215a:	6a 01                	push   0x1
c001215c:	6a 00                	push   0x0
c001215e:	68 8e 1e 01 c0       	push   0xc0011e8e
c0012163:	50                   	push   eax
c0012164:	e8 fb 68 00 00       	call   c0018a64 <Process::createThread(void (*)(void*), void*, int)>
c0012169:	83 c4 10             	add    esp,0x10
c001216c:	c6 05 40 4b 02 c0 01 	mov    BYTE PTR ds:0xc0024b40,0x1
c0012173:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012176:	66 3d 1d 03          	cmp    ax,0x31d
c001217a:	75 06                	jne    c0012182 <sendKeyboardToken(KeyboardToken)+0x211>
c001217c:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c0012182:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012185:	66 3d 1c 03          	cmp    ax,0x31c
c0012189:	75 06                	jne    c0012191 <sendKeyboardToken(KeyboardToken)+0x220>
c001218b:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c0012191:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012194:	66 3d 1b 03          	cmp    ax,0x31b
c0012198:	75 06                	jne    c00121a0 <sendKeyboardToken(KeyboardToken)+0x22f>
c001219a:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c00121a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00121a3:	66 3d 1e 03          	cmp    ax,0x31e
c00121a7:	75 06                	jne    c00121af <sendKeyboardToken(KeyboardToken)+0x23e>
c00121a9:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c00121af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00121b2:	66 3d 1f 03          	cmp    ax,0x31f
c00121b6:	75 06                	jne    c00121be <sendKeyboardToken(KeyboardToken)+0x24d>
c00121b8:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c00121be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00121c1:	66 3d 1a 03          	cmp    ax,0x31a
c00121c5:	75 06                	jne    c00121cd <sendKeyboardToken(KeyboardToken)+0x25c>
c00121c7:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c00121cd:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c00121d1:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00121d4:	83 f0 01             	xor    eax,0x1
c00121d7:	84 c0                	test   al,al
c00121d9:	74 7b                	je     c0012256 <sendKeyboardToken(KeyboardToken)+0x2e5>
c00121db:	a0 41 48 02 c0       	mov    al,ds:0xc0024841
c00121e0:	84 c0                	test   al,al
c00121e2:	74 43                	je     c0012227 <sendKeyboardToken(KeyboardToken)+0x2b6>
c00121e4:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00121e8:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c00121ec:	74 2d                	je     c001221b <sendKeyboardToken(KeyboardToken)+0x2aa>
c00121ee:	8b 15 44 4b 02 c0    	mov    edx,DWORD PTR ds:0xc0024b44
c00121f4:	89 d0                	mov    eax,edx
c00121f6:	c1 e0 02             	shl    eax,0x2
c00121f9:	01 d0                	add    eax,edx
c00121fb:	01 c0                	add    eax,eax
c00121fd:	a3 44 4b 02 c0       	mov    ds:0xc0024b44,eax
c0012202:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012205:	25 ff ff 00 00       	and    eax,0xffff
c001220a:	8d 50 d0             	lea    edx,[eax-0x30]
c001220d:	a1 44 4b 02 c0       	mov    eax,ds:0xc0024b44
c0012212:	01 d0                	add    eax,edx
c0012214:	a3 44 4b 02 c0       	mov    ds:0xc0024b44,eax
c0012219:	eb 71                	jmp    c001228c <sendKeyboardToken(KeyboardToken)+0x31b>
c001221b:	c7 05 44 4b 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024b44,0x0
c0012225:	eb 65                	jmp    c001228c <sendKeyboardToken(KeyboardToken)+0x31b>
c0012227:	a1 44 4b 02 c0       	mov    eax,ds:0xc0024b44
c001222c:	85 c0                	test   eax,eax
c001222e:	74 1a                	je     c001224a <sendKeyboardToken(KeyboardToken)+0x2d9>
c0012230:	a1 44 4b 02 c0       	mov    eax,ds:0xc0024b44
c0012235:	25 ff 00 00 00       	and    eax,0xff
c001223a:	83 ec 0c             	sub    esp,0xc
c001223d:	50                   	push   eax
c001223e:	e8 bd fc ff ff       	call   c0011f00 <sendKeyToTerminal(unsigned char)>
c0012243:	83 c4 10             	add    esp,0x10
c0012246:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001224a:	c7 05 44 4b 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024b44,0x0
c0012254:	eb 36                	jmp    c001228c <sendKeyboardToken(KeyboardToken)+0x31b>
c0012256:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012259:	66 3d 01 01          	cmp    ax,0x101
c001225d:	75 2d                	jne    c001228c <sendKeyboardToken(KeyboardToken)+0x31b>
c001225f:	a1 44 4b 02 c0       	mov    eax,ds:0xc0024b44
c0012264:	85 c0                	test   eax,eax
c0012266:	74 1a                	je     c0012282 <sendKeyboardToken(KeyboardToken)+0x311>
c0012268:	a1 44 4b 02 c0       	mov    eax,ds:0xc0024b44
c001226d:	25 ff 00 00 00       	and    eax,0xff
c0012272:	83 ec 0c             	sub    esp,0xc
c0012275:	50                   	push   eax
c0012276:	e8 85 fc ff ff       	call   c0011f00 <sendKeyToTerminal(unsigned char)>
c001227b:	83 c4 10             	add    esp,0x10
c001227e:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0012282:	c7 05 44 4b 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024b44,0x0
c001228c:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c001228f:	83 f0 01             	xor    eax,0x1
c0012292:	84 c0                	test   al,al
c0012294:	74 4e                	je     c00122e4 <sendKeyboardToken(KeyboardToken)+0x373>
c0012296:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0012299:	83 f0 01             	xor    eax,0x1
c001229c:	84 c0                	test   al,al
c001229e:	74 44                	je     c00122e4 <sendKeyboardToken(KeyboardToken)+0x373>
c00122a0:	a0 40 48 02 c0       	mov    al,ds:0xc0024840
c00122a5:	83 f0 01             	xor    eax,0x1
c00122a8:	84 c0                	test   al,al
c00122aa:	74 38                	je     c00122e4 <sendKeyboardToken(KeyboardToken)+0x373>
c00122ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00122af:	66 83 f8 1f          	cmp    ax,0x1f
c00122b3:	76 09                	jbe    c00122be <sendKeyboardToken(KeyboardToken)+0x34d>
c00122b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00122b8:	66 83 f8 7e          	cmp    ax,0x7e
c00122bc:	76 12                	jbe    c00122d0 <sendKeyboardToken(KeyboardToken)+0x35f>
c00122be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00122c1:	66 83 f8 0a          	cmp    ax,0xa
c00122c5:	74 09                	je     c00122d0 <sendKeyboardToken(KeyboardToken)+0x35f>
c00122c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00122ca:	66 83 f8 08          	cmp    ax,0x8
c00122ce:	75 14                	jne    c00122e4 <sendKeyboardToken(KeyboardToken)+0x373>
c00122d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00122d3:	25 ff 00 00 00       	and    eax,0xff
c00122d8:	83 ec 0c             	sub    esp,0xc
c00122db:	50                   	push   eax
c00122dc:	e8 1f fc ff ff       	call   c0011f00 <sendKeyToTerminal(unsigned char)>
c00122e1:	83 c4 10             	add    esp,0x10
c00122e4:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c00122e7:	83 f0 01             	xor    eax,0x1
c00122ea:	84 c0                	test   al,al
c00122ec:	74 51                	je     c001233f <sendKeyboardToken(KeyboardToken)+0x3ce>
c00122ee:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00122f1:	83 f0 01             	xor    eax,0x1
c00122f4:	84 c0                	test   al,al
c00122f6:	74 47                	je     c001233f <sendKeyboardToken(KeyboardToken)+0x3ce>
c00122f8:	a0 40 48 02 c0       	mov    al,ds:0xc0024840
c00122fd:	84 c0                	test   al,al
c00122ff:	74 3e                	je     c001233f <sendKeyboardToken(KeyboardToken)+0x3ce>
c0012301:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012304:	66 83 f8 3f          	cmp    ax,0x3f
c0012308:	76 35                	jbe    c001233f <sendKeyboardToken(KeyboardToken)+0x3ce>
c001230a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001230d:	66 83 f8 7f          	cmp    ax,0x7f
c0012311:	77 2c                	ja     c001233f <sendKeyboardToken(KeyboardToken)+0x3ce>
c0012313:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012316:	88 c2                	mov    dl,al
c0012318:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001231b:	66 83 f8 5f          	cmp    ax,0x5f
c001231f:	76 04                	jbe    c0012325 <sendKeyboardToken(KeyboardToken)+0x3b4>
c0012321:	b0 20                	mov    al,0x20
c0012323:	eb 02                	jmp    c0012327 <sendKeyboardToken(KeyboardToken)+0x3b6>
c0012325:	b0 00                	mov    al,0x0
c0012327:	29 c2                	sub    edx,eax
c0012329:	88 d0                	mov    al,dl
c001232b:	83 e8 40             	sub    eax,0x40
c001232e:	25 ff 00 00 00       	and    eax,0xff
c0012333:	83 ec 0c             	sub    esp,0xc
c0012336:	50                   	push   eax
c0012337:	e8 c4 fb ff ff       	call   c0011f00 <sendKeyToTerminal(unsigned char)>
c001233c:	83 c4 10             	add    esp,0x10
c001233f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012342:	66 3d 00 03          	cmp    ax,0x300
c0012346:	75 0f                	jne    c0012357 <sendKeyboardToken(KeyboardToken)+0x3e6>
c0012348:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001234b:	83 f0 01             	xor    eax,0x1
c001234e:	84 c0                	test   al,al
c0012350:	74 05                	je     c0012357 <sendKeyboardToken(KeyboardToken)+0x3e6>
c0012352:	e8 c6 b0 ff ff       	call   c000d41d <doTerminalCycle()>
c0012357:	90                   	nop
c0012358:	c9                   	leave  
c0012359:	c3                   	ret    

c001235a <clearInternalKeybuffer(VgaText*)>:
c001235a:	55                   	push   ebp
c001235b:	89 e5                	mov    ebp,esp
c001235d:	83 ec 08             	sub    esp,0x8
c0012360:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012363:	05 34 11 00 00       	add    eax,0x1134
c0012368:	83 ec 0c             	sub    esp,0xc
c001236b:	50                   	push   eax
c001236c:	e8 66 e3 fe ff       	call   c00006d7 <strlen>
c0012371:	83 c4 10             	add    esp,0x10
c0012374:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0012377:	81 c2 34 11 00 00    	add    edx,0x1134
c001237d:	83 ec 04             	sub    esp,0x4
c0012380:	50                   	push   eax
c0012381:	6a 00                	push   0x0
c0012383:	52                   	push   edx
c0012384:	e8 31 e3 fe ff       	call   c00006ba <memset>
c0012389:	83 c4 10             	add    esp,0x10
c001238c:	90                   	nop
c001238d:	c9                   	leave  
c001238e:	c3                   	ret    

c001238f <readKeyboard(VgaText*, char*, unsigned long)>:
c001238f:	55                   	push   ebp
c0012390:	89 e5                	mov    ebp,esp
c0012392:	83 ec 18             	sub    esp,0x18
c0012395:	fb                   	sti    
c0012396:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c001239d:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c00123a1:	74 77                	je     c001241a <readKeyboard(VgaText*, char*, unsigned long)+0x8b>
c00123a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00123a6:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c00123ac:	84 c0                	test   al,al
c00123ae:	75 02                	jne    c00123b2 <readKeyboard(VgaText*, char*, unsigned long)+0x23>
c00123b0:	eb f1                	jmp    c00123a3 <readKeyboard(VgaText*, char*, unsigned long)+0x14>
c00123b2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00123b5:	8d 50 01             	lea    edx,[eax+0x1]
c00123b8:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c00123bb:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00123be:	8a 92 34 11 00 00    	mov    dl,BYTE PTR [edx+0x1134]
c00123c4:	88 10                	mov    BYTE PTR [eax],dl
c00123c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00123c9:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c00123cf:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c00123d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00123d5:	05 34 11 00 00       	add    eax,0x1134
c00123da:	83 ec 0c             	sub    esp,0xc
c00123dd:	50                   	push   eax
c00123de:	e8 f4 e2 fe ff       	call   c00006d7 <strlen>
c00123e3:	83 c4 10             	add    esp,0x10
c00123e6:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00123e9:	81 c2 34 11 00 00    	add    edx,0x1134
c00123ef:	8d 4a 01             	lea    ecx,[edx+0x1]
c00123f2:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00123f5:	81 c2 34 11 00 00    	add    edx,0x1134
c00123fb:	83 ec 04             	sub    esp,0x4
c00123fe:	50                   	push   eax
c00123ff:	51                   	push   ecx
c0012400:	52                   	push   edx
c0012401:	e8 46 e2 fe ff       	call   c000064c <memmove>
c0012406:	83 c4 10             	add    esp,0x10
c0012409:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c001240c:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001240f:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c0012413:	75 88                	jne    c001239d <readKeyboard(VgaText*, char*, unsigned long)+0xe>
c0012415:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0012418:	eb 03                	jmp    c001241d <readKeyboard(VgaText*, char*, unsigned long)+0x8e>
c001241a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001241d:	c9                   	leave  
c001241e:	c3                   	ret    
c001241f:	90                   	nop

c0012420 <Keyboard::Keyboard(char const*)>:
c0012420:	83 ec 0c             	sub    esp,0xc
c0012423:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012427:	83 ec 08             	sub    esp,0x8
c001242a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001242e:	50                   	push   eax
c001242f:	e8 48 e3 ff ff       	call   c001077c <Device::Device(char const*)>
c0012434:	83 c4 10             	add    esp,0x10
c0012437:	ba 5c 1f 02 c0       	mov    edx,0xc0021f5c
c001243c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012440:	89 10                	mov    DWORD PTR [eax],edx
c0012442:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012446:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0012450:	c6 05 24 47 02 c0 01 	mov    BYTE PTR ds:0xc0024724,0x1
c0012457:	90                   	nop
c0012458:	83 c4 0c             	add    esp,0xc
c001245b:	c3                   	ret    

c001245c <Keyboard::~Keyboard()>:
c001245c:	83 ec 0c             	sub    esp,0xc
c001245f:	ba 5c 1f 02 c0       	mov    edx,0xc0021f5c
c0012464:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012468:	89 10                	mov    DWORD PTR [eax],edx
c001246a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001246e:	83 ec 0c             	sub    esp,0xc
c0012471:	50                   	push   eax
c0012472:	e8 bb df ff ff       	call   c0010432 <Device::~Device()>
c0012477:	83 c4 10             	add    esp,0x10
c001247a:	90                   	nop
c001247b:	83 c4 0c             	add    esp,0xc
c001247e:	c3                   	ret    
c001247f:	90                   	nop

c0012480 <Keyboard::~Keyboard()>:
c0012480:	83 ec 0c             	sub    esp,0xc
c0012483:	83 ec 0c             	sub    esp,0xc
c0012486:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001248a:	e8 cd ff ff ff       	call   c001245c <Keyboard::~Keyboard()>
c001248f:	83 c4 10             	add    esp,0x10
c0012492:	83 ec 08             	sub    esp,0x8
c0012495:	68 5c 01 00 00       	push   0x15c
c001249a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001249e:	e8 ae cb ff ff       	call   c000f051 <operator delete(void*, unsigned long)>
c00124a3:	83 c4 10             	add    esp,0x10
c00124a6:	83 c4 0c             	add    esp,0xc
c00124a9:	c3                   	ret    

c00124aa <LogicalDisk::close(int, int, void*)>:
c00124aa:	83 c8 ff             	or     eax,0xffffffff
c00124ad:	c3                   	ret    

c00124ae <LogicalDisk::~LogicalDisk()>:
c00124ae:	83 ec 0c             	sub    esp,0xc
c00124b1:	ba 0c 20 02 c0       	mov    edx,0xc002200c
c00124b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00124ba:	89 10                	mov    DWORD PTR [eax],edx
c00124bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00124c0:	83 ec 0c             	sub    esp,0xc
c00124c3:	50                   	push   eax
c00124c4:	e8 69 df ff ff       	call   c0010432 <Device::~Device()>
c00124c9:	83 c4 10             	add    esp,0x10
c00124cc:	90                   	nop
c00124cd:	83 c4 0c             	add    esp,0xc
c00124d0:	c3                   	ret    
c00124d1:	90                   	nop

c00124d2 <LogicalDisk::~LogicalDisk()>:
c00124d2:	83 ec 0c             	sub    esp,0xc
c00124d5:	83 ec 0c             	sub    esp,0xc
c00124d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00124dc:	e8 cd ff ff ff       	call   c00124ae <LogicalDisk::~LogicalDisk()>
c00124e1:	83 c4 10             	add    esp,0x10
c00124e4:	83 ec 08             	sub    esp,0x8
c00124e7:	68 74 01 00 00       	push   0x174
c00124ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00124f0:	e8 5c cb ff ff       	call   c000f051 <operator delete(void*, unsigned long)>
c00124f5:	83 c4 10             	add    esp,0x10
c00124f8:	83 c4 0c             	add    esp,0xc
c00124fb:	c3                   	ret    

c00124fc <LogicalDisk::open(int, int, void*)>:
c00124fc:	83 ec 18             	sub    esp,0x18
c00124ff:	68 88 1f 02 c0       	push   0xc0021f88
c0012504:	e8 39 34 00 00       	call   c0015942 <Krnl::panic(char const*)>
c0012509:	83 c8 ff             	or     eax,0xffffffff
c001250c:	83 c4 1c             	add    esp,0x1c
c001250f:	c3                   	ret    

c0012510 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0012510:	53                   	push   ebx
c0012511:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0012515:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012519:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001251d:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0012523:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c0012529:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c001252f:	77 10                	ja     c0012541 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0012531:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0012537:	89 d3                	mov    ebx,edx
c0012539:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c001253f:	72 05                	jb     c0012546 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0012541:	83 c8 ff             	or     eax,0xffffffff
c0012544:	89 c2                	mov    edx,eax
c0012546:	5b                   	pop    ebx
c0012547:	c3                   	ret    

c0012548 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c0012548:	56                   	push   esi
c0012549:	83 c8 ff             	or     eax,0xffffffff
c001254c:	53                   	push   ebx
c001254d:	89 c2                	mov    edx,eax
c001254f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012553:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0012557:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001255b:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0012561:	77 27                	ja     c001258a <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0012563:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0012569:	89 d8                	mov    eax,ebx
c001256b:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0012571:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012576:	89 c2                	mov    edx,eax
c0012578:	73 10                	jae    c001258a <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c001257a:	89 c8                	mov    eax,ecx
c001257c:	89 da                	mov    edx,ebx
c001257e:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0012584:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c001258a:	5b                   	pop    ebx
c001258b:	5e                   	pop    esi
c001258c:	c3                   	ret    
c001258d:	90                   	nop

c001258e <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c001258e:	83 ec 1c             	sub    esp,0x1c
c0012591:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012595:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012599:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001259d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00125a1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00125a5:	89 04 24             	mov    DWORD PTR [esp],eax
c00125a8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00125ac:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00125b0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00125b4:	83 ec 08             	sub    esp,0x8
c00125b7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00125bb:	50                   	push   eax
c00125bc:	e8 bb e1 ff ff       	call   c001077c <Device::Device(char const*)>
c00125c1:	83 c4 10             	add    esp,0x10
c00125c4:	ba 0c 20 02 c0       	mov    edx,0xc002200c
c00125c9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00125cd:	89 10                	mov    DWORD PTR [eax],edx
c00125cf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00125d3:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00125da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00125de:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00125e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00125e9:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c00125f3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00125f7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00125fb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00125ff:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0012605:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c001260b:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001260f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0012612:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012616:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c001261c:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0012622:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012626:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001262a:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0012630:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012634:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c001263e:	90                   	nop
c001263f:	83 c4 1c             	add    esp,0x1c
c0012642:	c3                   	ret    
c0012643:	90                   	nop

c0012644 <LogicalDisk::assignDriveLetter()>:
c0012644:	55                   	push   ebp
c0012645:	57                   	push   edi
c0012646:	56                   	push   esi
c0012647:	53                   	push   ebx
c0012648:	83 ec 14             	sub    esp,0x14
c001264b:	8b 3d 60 4b 02 c0    	mov    edi,DWORD PTR ds:0xc0024b60
c0012651:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012655:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0012659:	8b 3d 64 4b 02 c0    	mov    edi,DWORD PTR ds:0xc0024b64
c001265f:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c0012665:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0012669:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c001266f:	3c 01                	cmp    al,0x1
c0012671:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0012675:	19 c0                	sbb    eax,eax
c0012677:	83 e0 02             	and    eax,0x2
c001267a:	83 c0 41             	add    eax,0x41
c001267d:	0f be e8             	movsx  ebp,al
c0012680:	3c 43                	cmp    al,0x43
c0012682:	75 10                	jne    c0012694 <LogicalDisk::assignDriveLetter()+0x50>
c0012684:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c001268b:	75 5d                	jne    c00126ea <LogicalDisk::assignDriveLetter()+0xa6>
c001268d:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0012692:	75 56                	jne    c00126ea <LogicalDisk::assignDriveLetter()+0xa6>
c0012694:	8d 75 bf             	lea    esi,[ebp-0x41]
c0012697:	ba 01 00 00 00       	mov    edx,0x1
c001269c:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c00126a0:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c00126a4:	d3 e2                	shl    edx,cl
c00126a6:	89 d7                	mov    edi,edx
c00126a8:	89 d6                	mov    esi,edx
c00126aa:	c1 ff 1f             	sar    edi,0x1f
c00126ad:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c00126b1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00126b5:	21 f9                	and    ecx,edi
c00126b7:	09 d1                	or     ecx,edx
c00126b9:	75 2f                	jne    c00126ea <LogicalDisk::assignDriveLetter()+0xa6>
c00126bb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00126bf:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00126c3:	09 f2                	or     edx,esi
c00126c5:	89 15 60 4b 02 c0    	mov    DWORD PTR ds:0xc0024b60,edx
c00126cb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00126cf:	09 fa                	or     edx,edi
c00126d1:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c00126d5:	89 15 64 4b 02 c0    	mov    DWORD PTR ds:0xc0024b64,edx
c00126db:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c00126e1:	89 1c bd 80 4b 02 c0 	mov    DWORD PTR [edi*4-0x3ffdb480],ebx
c00126e8:	eb 08                	jmp    c00126f2 <LogicalDisk::assignDriveLetter()+0xae>
c00126ea:	40                   	inc    eax
c00126eb:	45                   	inc    ebp
c00126ec:	3c 5b                	cmp    al,0x5b
c00126ee:	75 90                	jne    c0012680 <LogicalDisk::assignDriveLetter()+0x3c>
c00126f0:	31 c0                	xor    eax,eax
c00126f2:	83 c4 14             	add    esp,0x14
c00126f5:	5b                   	pop    ebx
c00126f6:	5e                   	pop    esi
c00126f7:	5f                   	pop    edi
c00126f8:	5d                   	pop    ebp
c00126f9:	c3                   	ret    

c00126fa <LogicalDisk::mount()>:
c00126fa:	56                   	push   esi
c00126fb:	53                   	push   ebx
c00126fc:	51                   	push   ecx
c00126fd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012701:	8b 1d e8 46 02 c0    	mov    ebx,DWORD PTR ds:0xc00246e8
c0012707:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c0012711:	85 db                	test   ebx,ebx
c0012713:	74 50                	je     c0012765 <LogicalDisk::mount()+0x6b>
c0012715:	e8 00 62 00 00       	call   c001891a <getIRQNestingLevel()>
c001271a:	52                   	push   edx
c001271b:	52                   	push   edx
c001271c:	50                   	push   eax
c001271d:	68 ac 1f 02 c0       	push   0xc0021fac
c0012722:	e8 50 ca ff ff       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c0012727:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c001272e:	83 c4 0c             	add    esp,0xc
c0012731:	83 e8 41             	sub    eax,0x41
c0012734:	8b 13                	mov    edx,DWORD PTR [ebx]
c0012736:	50                   	push   eax
c0012737:	56                   	push   esi
c0012738:	53                   	push   ebx
c0012739:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001273c:	83 c4 10             	add    esp,0x10
c001273f:	84 c0                	test   al,al
c0012741:	74 08                	je     c001274b <LogicalDisk::mount()+0x51>
c0012743:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c0012749:	eb 1c                	jmp    c0012767 <LogicalDisk::mount()+0x6d>
c001274b:	e8 ca 61 00 00       	call   c001891a <getIRQNestingLevel()>
c0012750:	51                   	push   ecx
c0012751:	51                   	push   ecx
c0012752:	50                   	push   eax
c0012753:	68 c7 1f 02 c0       	push   0xc0021fc7
c0012758:	e8 1a ca ff ff       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c001275d:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0012760:	83 c4 10             	add    esp,0x10
c0012763:	eb ac                	jmp    c0012711 <LogicalDisk::mount()+0x17>
c0012765:	31 c0                	xor    eax,eax
c0012767:	5a                   	pop    edx
c0012768:	5b                   	pop    ebx
c0012769:	5e                   	pop    esi
c001276a:	c3                   	ret    
c001276b:	90                   	nop

c001276c <LogicalDisk::unmount()>:
c001276c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012770:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c001277a:	c3                   	ret    
c001277b:	90                   	nop

c001277c <LogicalDisk::unassignDriveLetter()>:
c001277c:	57                   	push   edi
c001277d:	56                   	push   esi
c001277e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012782:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c0012789:	84 c9                	test   cl,cl
c001278b:	75 0f                	jne    c001279c <LogicalDisk::unassignDriveLetter()+0x20>
c001278d:	c7 44 24 0c e2 1f 02 c0 	mov    DWORD PTR [esp+0xc],0xc0021fe2
c0012795:	5e                   	pop    esi
c0012796:	5f                   	pop    edi
c0012797:	e9 a6 31 00 00       	jmp    c0015942 <Krnl::panic(char const*)>
c001279c:	83 e9 41             	sub    ecx,0x41
c001279f:	b8 01 00 00 00       	mov    eax,0x1
c00127a4:	d3 e0                	shl    eax,cl
c00127a6:	89 c7                	mov    edi,eax
c00127a8:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c00127af:	c1 ff 1f             	sar    edi,0x1f
c00127b2:	c7 04 8d 80 4b 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffdb480],0x0
c00127bd:	89 fe                	mov    esi,edi
c00127bf:	f7 d6                	not    esi
c00127c1:	f7 d0                	not    eax
c00127c3:	21 35 64 4b 02 c0    	and    DWORD PTR ds:0xc0024b64,esi
c00127c9:	5e                   	pop    esi
c00127ca:	21 05 60 4b 02 c0    	and    DWORD PTR ds:0xc0024b60,eax
c00127d0:	5f                   	pop    edi
c00127d1:	c3                   	ret    

c00127d2 <LogicalDisk::read(unsigned long long, int, void*)>:
c00127d2:	57                   	push   edi
c00127d3:	56                   	push   esi
c00127d4:	53                   	push   ebx
c00127d5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00127d9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00127dd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00127e1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00127e5:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00127eb:	77 41                	ja     c001282e <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c00127ed:	99                   	cdq    
c00127ee:	01 c8                	add    eax,ecx
c00127f0:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c00127f6:	11 da                	adc    edx,ebx
c00127f8:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c00127fe:	19 d7                	sbb    edi,edx
c0012800:	72 33                	jb     c0012835 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c0012802:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0012808:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c001280e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0012812:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0012816:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c001281c:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0012822:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012826:	5b                   	pop    ebx
c0012827:	5e                   	pop    esi
c0012828:	5f                   	pop    edi
c0012829:	e9 9a 09 00 00       	jmp    c00131c8 <VCache::read(unsigned long long, int, void*)>
c001282e:	b8 05 00 00 00       	mov    eax,0x5
c0012833:	eb 05                	jmp    c001283a <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c0012835:	b8 07 00 00 00       	mov    eax,0x7
c001283a:	5b                   	pop    ebx
c001283b:	5e                   	pop    esi
c001283c:	5f                   	pop    edi
c001283d:	c3                   	ret    

c001283e <LogicalDisk::write(unsigned long long, int, void*)>:
c001283e:	57                   	push   edi
c001283f:	56                   	push   esi
c0012840:	53                   	push   ebx
c0012841:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012845:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012849:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001284d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012851:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0012857:	77 41                	ja     c001289a <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c0012859:	99                   	cdq    
c001285a:	01 c8                	add    eax,ecx
c001285c:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0012862:	11 da                	adc    edx,ebx
c0012864:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c001286a:	19 d7                	sbb    edi,edx
c001286c:	72 33                	jb     c00128a1 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c001286e:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0012874:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c001287a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001287e:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0012882:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0012888:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001288e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012892:	5b                   	pop    ebx
c0012893:	5e                   	pop    esi
c0012894:	5f                   	pop    edi
c0012895:	e9 4a 08 00 00       	jmp    c00130e4 <VCache::write(unsigned long long, int, void*)>
c001289a:	b8 05 00 00 00       	mov    eax,0x5
c001289f:	eb 05                	jmp    c00128a6 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c00128a1:	b8 07 00 00 00       	mov    eax,0x7
c00128a6:	5b                   	pop    ebx
c00128a7:	5e                   	pop    esi
c00128a8:	5f                   	pop    edi
c00128a9:	c3                   	ret    

c00128aa <Mouse::Mouse(char const*)>:
c00128aa:	83 ec 0c             	sub    esp,0xc
c00128ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00128b1:	83 ec 08             	sub    esp,0x8
c00128b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00128b8:	50                   	push   eax
c00128b9:	e8 be de ff ff       	call   c001077c <Device::Device(char const*)>
c00128be:	83 c4 10             	add    esp,0x10
c00128c1:	ba 38 20 02 c0       	mov    edx,0xc0022038
c00128c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00128ca:	89 10                	mov    DWORD PTR [eax],edx
c00128cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00128d0:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c00128da:	90                   	nop
c00128db:	83 c4 0c             	add    esp,0xc
c00128de:	c3                   	ret    
c00128df:	90                   	nop

c00128e0 <Mouse::~Mouse()>:
c00128e0:	83 ec 0c             	sub    esp,0xc
c00128e3:	ba 38 20 02 c0       	mov    edx,0xc0022038
c00128e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00128ec:	89 10                	mov    DWORD PTR [eax],edx
c00128ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00128f2:	83 ec 0c             	sub    esp,0xc
c00128f5:	50                   	push   eax
c00128f6:	e8 37 db ff ff       	call   c0010432 <Device::~Device()>
c00128fb:	83 c4 10             	add    esp,0x10
c00128fe:	90                   	nop
c00128ff:	83 c4 0c             	add    esp,0xc
c0012902:	c3                   	ret    
c0012903:	90                   	nop

c0012904 <Mouse::~Mouse()>:
c0012904:	83 ec 0c             	sub    esp,0xc
c0012907:	83 ec 0c             	sub    esp,0xc
c001290a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001290e:	e8 cd ff ff ff       	call   c00128e0 <Mouse::~Mouse()>
c0012913:	83 c4 10             	add    esp,0x10
c0012916:	83 ec 08             	sub    esp,0x8
c0012919:	68 58 01 00 00       	push   0x158
c001291e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012922:	e8 2a c7 ff ff       	call   c000f051 <operator delete(void*, unsigned long)>
c0012927:	83 c4 10             	add    esp,0x10
c001292a:	83 c4 0c             	add    esp,0xc
c001292d:	c3                   	ret    

c001292e <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c001292e:	55                   	push   ebp
c001292f:	57                   	push   edi
c0012930:	56                   	push   esi
c0012931:	53                   	push   ebx
c0012932:	81 ec 28 01 00 00    	sub    esp,0x128
c0012938:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c001293f:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c0012946:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001294d:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0012954:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012958:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001295c:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0012963:	e8 06 df ff ff       	call   c001086e <Device::getName()>
c0012968:	5a                   	pop    edx
c0012969:	59                   	pop    ecx
c001296a:	50                   	push   eax
c001296b:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c001296f:	55                   	push   ebp
c0012970:	e8 e4 dd fe ff       	call   c0000759 <strcpy>
c0012975:	5b                   	pop    ebx
c0012976:	58                   	pop    eax
c0012977:	68 5c 20 02 c0       	push   0xc002205c
c001297c:	55                   	push   ebp
c001297d:	e8 8e de fe ff       	call   c0000810 <strcat>
c0012982:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0012989:	e8 b4 c6 ff ff       	call   c000f042 <operator new(unsigned long)>
c001298e:	83 c4 0c             	add    esp,0xc
c0012991:	89 c3                	mov    ebx,eax
c0012993:	57                   	push   edi
c0012994:	56                   	push   esi
c0012995:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012999:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001299d:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c00129a4:	55                   	push   ebp
c00129a5:	50                   	push   eax
c00129a6:	e8 e3 fb ff ff       	call   c001258e <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c00129ab:	83 c4 14             	add    esp,0x14
c00129ae:	53                   	push   ebx
c00129af:	e8 90 fc ff ff       	call   c0012644 <LogicalDisk::assignDriveLetter()>
c00129b4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00129b7:	e8 3e fd ff ff       	call   c00126fa <LogicalDisk::mount()>
c00129bc:	58                   	pop    eax
c00129bd:	5a                   	pop    edx
c00129be:	53                   	push   ebx
c00129bf:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00129c6:	e8 c1 db ff ff       	call   c001058c <Device::addChild(Device*)>
c00129cb:	81 c4 2c 01 00 00    	add    esp,0x12c
c00129d1:	5b                   	pop    ebx
c00129d2:	5e                   	pop    esi
c00129d3:	5f                   	pop    edi
c00129d4:	5d                   	pop    ebp
c00129d5:	c3                   	ret    

c00129d6 <createPartitionsForDisk(PhysicalDisk*)>:
c00129d6:	55                   	push   ebp
c00129d7:	57                   	push   edi
c00129d8:	56                   	push   esi
c00129d9:	53                   	push   ebx
c00129da:	81 ec 5c 02 00 00    	sub    esp,0x25c
c00129e0:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c00129e7:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00129ed:	3d 00 02 00 00       	cmp    eax,0x200
c00129f2:	74 27                	je     c0012a1b <createPartitionsForDisk(PhysicalDisk*)+0x45>
c00129f4:	83 ec 10             	sub    esp,0x10
c00129f7:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c00129fd:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c0012a03:	99                   	cdq    
c0012a04:	52                   	push   edx
c0012a05:	0f a4 f7 0a          	shld   edi,esi,0xa
c0012a09:	50                   	push   eax
c0012a0a:	89 fd                	mov    ebp,edi
c0012a0c:	c1 e6 0a             	shl    esi,0xa
c0012a0f:	55                   	push   ebp
c0012a10:	56                   	push   esi
c0012a11:	e8 b6 c9 00 00       	call   c001f3cc <__udivdi3>
c0012a16:	e9 b1 00 00 00       	jmp    c0012acc <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0012a1b:	83 ec 0c             	sub    esp,0xc
c0012a1e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012a20:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c0012a24:	56                   	push   esi
c0012a25:	6a 01                	push   0x1
c0012a27:	6a 00                	push   0x0
c0012a29:	6a 00                	push   0x0
c0012a2b:	53                   	push   ebx
c0012a2c:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0012a2f:	83 c4 20             	add    esp,0x20
c0012a32:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c0012a3a:	75 0a                	jne    c0012a46 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0012a3c:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c0012a44:	74 2c                	je     c0012a72 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c0012a46:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0012a4c:	83 ec 10             	sub    esp,0x10
c0012a4f:	89 f7                	mov    edi,esi
c0012a51:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0012a57:	c1 ff 1f             	sar    edi,0x1f
c0012a5a:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0012a60:	57                   	push   edi
c0012a61:	0f a4 c2 0a          	shld   edx,eax,0xa
c0012a65:	c1 e0 0a             	shl    eax,0xa
c0012a68:	56                   	push   esi
c0012a69:	52                   	push   edx
c0012a6a:	50                   	push   eax
c0012a6b:	e8 5c c9 00 00       	call   c001f3cc <__udivdi3>
c0012a70:	eb 5a                	jmp    c0012acc <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0012a72:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0012a79:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0012a80:	83 e0 7f             	and    eax,0x7f
c0012a83:	83 e1 7f             	and    ecx,0x7f
c0012a86:	01 c1                	add    ecx,eax
c0012a88:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0012a8f:	83 e0 7f             	and    eax,0x7f
c0012a92:	01 c1                	add    ecx,eax
c0012a94:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c0012a9b:	83 e0 7f             	and    eax,0x7f
c0012a9e:	00 c1                	add    cl,al
c0012aa0:	74 41                	je     c0012ae3 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c0012aa2:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0012aa8:	83 ec 10             	sub    esp,0x10
c0012aab:	89 f7                	mov    edi,esi
c0012aad:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0012ab3:	c1 ff 1f             	sar    edi,0x1f
c0012ab6:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0012abc:	57                   	push   edi
c0012abd:	0f a4 c2 0a          	shld   edx,eax,0xa
c0012ac1:	c1 e0 0a             	shl    eax,0xa
c0012ac4:	56                   	push   esi
c0012ac5:	52                   	push   edx
c0012ac6:	50                   	push   eax
c0012ac7:	e8 00 c9 00 00       	call   c001f3cc <__udivdi3>
c0012acc:	83 c4 14             	add    esp,0x14
c0012acf:	52                   	push   edx
c0012ad0:	50                   	push   eax
c0012ad1:	6a 00                	push   0x0
c0012ad3:	6a 00                	push   0x0
c0012ad5:	53                   	push   ebx
c0012ad6:	e8 53 fe ff ff       	call   c001292e <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0012adb:	83 c4 20             	add    esp,0x20
c0012ade:	e9 79 01 00 00       	jmp    c0012c5c <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0012ae3:	89 f0                	mov    eax,esi
c0012ae5:	31 f6                	xor    esi,esi
c0012ae7:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0012aee:	75 02                	jne    c0012af2 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0012af0:	89 f1                	mov    ecx,esi
c0012af2:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0012af9:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0012b00:	c1 e2 08             	shl    edx,0x8
c0012b03:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0012b0b:	c1 e7 10             	shl    edi,0x10
c0012b0e:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0012b16:	09 fa                	or     edx,edi
c0012b18:	83 c0 10             	add    eax,0x10
c0012b1b:	0f b6 b8 b6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b6]
c0012b22:	09 fa                	or     edx,edi
c0012b24:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0012b2b:	c1 e7 18             	shl    edi,0x18
c0012b2e:	09 fa                	or     edx,edi
c0012b30:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0012b34:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0012b3b:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0012b42:	c1 e7 10             	shl    edi,0x10
c0012b45:	c1 e2 08             	shl    edx,0x8
c0012b48:	09 fa                	or     edx,edi
c0012b4a:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0012b51:	09 fa                	or     edx,edi
c0012b53:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0012b5a:	c1 e7 18             	shl    edi,0x18
c0012b5d:	09 fa                	or     edx,edi
c0012b5f:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c0012b63:	46                   	inc    esi
c0012b64:	83 fe 04             	cmp    esi,0x4
c0012b67:	0f 85 7a ff ff ff    	jne    c0012ae7 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0012b6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b71:	83 f0 01             	xor    eax,0x1
c0012b74:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0012b78:	75 57                	jne    c0012bd1 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0012b7a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012b7e:	83 f0 01             	xor    eax,0x1
c0012b81:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0012b85:	75 4a                	jne    c0012bd1 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0012b87:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0012b8d:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0012b91:	89 f7                	mov    edi,esi
c0012b93:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0012b9b:	c1 ff 1f             	sar    edi,0x1f
c0012b9e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012ba6:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0012bac:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0012bb2:	57                   	push   edi
c0012bb3:	56                   	push   esi
c0012bb4:	0f a4 c2 0a          	shld   edx,eax,0xa
c0012bb8:	c1 e0 0a             	shl    eax,0xa
c0012bbb:	52                   	push   edx
c0012bbc:	50                   	push   eax
c0012bbd:	e8 0a c8 00 00       	call   c001f3cc <__udivdi3>
c0012bc2:	83 c4 10             	add    esp,0x10
c0012bc5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0012bc9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0012bcd:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0012bd1:	84 c9                	test   cl,cl
c0012bd3:	74 53                	je     c0012c28 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0012bd5:	0f b6 c9             	movzx  ecx,cl
c0012bd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012bdc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012be0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012be4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012be8:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0012bec:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0012bf0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0012bf4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012bf8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012bfc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012c00:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0012c04:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0012c08:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0012c0c:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0012c10:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0012c14:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0012c18:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0012c1c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0012c20:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0012c24:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0012c28:	31 ed                	xor    ebp,ebp
c0012c2a:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0012c2e:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0012c32:	89 f8                	mov    eax,edi
c0012c34:	09 f0                	or     eax,esi
c0012c36:	74 1e                	je     c0012c56 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0012c38:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0012c3c:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0012c40:	89 d1                	mov    ecx,edx
c0012c42:	09 c1                	or     ecx,eax
c0012c44:	74 10                	je     c0012c56 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0012c46:	83 ec 0c             	sub    esp,0xc
c0012c49:	57                   	push   edi
c0012c4a:	56                   	push   esi
c0012c4b:	52                   	push   edx
c0012c4c:	50                   	push   eax
c0012c4d:	53                   	push   ebx
c0012c4e:	e8 db fc ff ff       	call   c001292e <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0012c53:	83 c4 20             	add    esp,0x20
c0012c56:	45                   	inc    ebp
c0012c57:	83 fd 04             	cmp    ebp,0x4
c0012c5a:	75 ce                	jne    c0012c2a <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0012c5c:	81 c4 5c 02 00 00    	add    esp,0x25c
c0012c62:	5b                   	pop    ebx
c0012c63:	5e                   	pop    esi
c0012c64:	5f                   	pop    edi
c0012c65:	5d                   	pop    ebp
c0012c66:	c3                   	ret    
c0012c67:	90                   	nop

c0012c68 <Timer::Timer(char const*)>:
c0012c68:	83 ec 0c             	sub    esp,0xc
c0012c6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c6f:	83 ec 08             	sub    esp,0x8
c0012c72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012c76:	50                   	push   eax
c0012c77:	e8 00 db ff ff       	call   c001077c <Device::Device(char const*)>
c0012c7c:	83 c4 10             	add    esp,0x10
c0012c7f:	ba 70 20 02 c0       	mov    edx,0xc0022070
c0012c84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c88:	89 10                	mov    DWORD PTR [eax],edx
c0012c8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c8e:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0012c98:	90                   	nop
c0012c99:	83 c4 0c             	add    esp,0xc
c0012c9c:	c3                   	ret    
c0012c9d:	90                   	nop

c0012c9e <Timer::~Timer()>:
c0012c9e:	83 ec 0c             	sub    esp,0xc
c0012ca1:	ba 70 20 02 c0       	mov    edx,0xc0022070
c0012ca6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012caa:	89 10                	mov    DWORD PTR [eax],edx
c0012cac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012cb0:	83 ec 0c             	sub    esp,0xc
c0012cb3:	50                   	push   eax
c0012cb4:	e8 79 d7 ff ff       	call   c0010432 <Device::~Device()>
c0012cb9:	83 c4 10             	add    esp,0x10
c0012cbc:	90                   	nop
c0012cbd:	83 c4 0c             	add    esp,0xc
c0012cc0:	c3                   	ret    
c0012cc1:	90                   	nop

c0012cc2 <Timer::~Timer()>:
c0012cc2:	83 ec 0c             	sub    esp,0xc
c0012cc5:	83 ec 0c             	sub    esp,0xc
c0012cc8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012ccc:	e8 cd ff ff ff       	call   c0012c9e <Timer::~Timer()>
c0012cd1:	83 c4 10             	add    esp,0x10
c0012cd4:	83 ec 08             	sub    esp,0x8
c0012cd7:	68 5c 01 00 00       	push   0x15c
c0012cdc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012ce0:	e8 6c c3 ff ff       	call   c000f051 <operator delete(void*, unsigned long)>
c0012ce5:	83 c4 10             	add    esp,0x10
c0012ce8:	83 c4 0c             	add    esp,0xc
c0012ceb:	c3                   	ret    

c0012cec <Timer::read()>:
c0012cec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012cf0:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0012cf6:	c3                   	ret    

c0012cf7 <timerHandler(unsigned long long)>:
c0012cf7:	55                   	push   ebp
c0012cf8:	57                   	push   edi
c0012cf9:	56                   	push   esi
c0012cfa:	53                   	push   ebx
c0012cfb:	83 ec 0c             	sub    esp,0xc
c0012cfe:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012d02:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0012d06:	01 35 f0 4b 02 c0    	add    DWORD PTR ds:0xc0024bf0,esi
c0012d0c:	11 3d f4 4b 02 c0    	adc    DWORD PTR ds:0xc0024bf4,edi
c0012d12:	80 3d 8d 45 02 c0 00 	cmp    BYTE PTR ds:0xc002458d,0x0
c0012d19:	0f 84 07 01 00 00    	je     c0012e26 <timerHandler(unsigned long long)+0x12f>
c0012d1f:	e8 32 5c 00 00       	call   c0018956 <lockStuff()>
c0012d24:	83 ec 0c             	sub    esp,0xc
c0012d27:	68 bc 59 02 c0       	push   0xc00259bc
c0012d2c:	e8 6f cd 00 00       	call   c001faa0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012d31:	c7 04 24 bc 59 02 c0 	mov    DWORD PTR [esp],0xc00259bc
c0012d38:	89 c3                	mov    ebx,eax
c0012d3a:	e8 69 cd 00 00       	call   c001faa8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0012d3f:	83 c4 10             	add    esp,0x10
c0012d42:	84 c0                	test   al,al
c0012d44:	74 60                	je     c0012da6 <timerHandler(unsigned long long)+0xaf>
c0012d46:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0012d4c:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c0012d4f:	85 c0                	test   eax,eax
c0012d51:	0f 85 91 00 00 00    	jne    c0012de8 <timerHandler(unsigned long long)+0xf1>
c0012d57:	e9 be 00 00 00       	jmp    c0012e1a <timerHandler(unsigned long long)+0x123>
c0012d5c:	83 ec 0c             	sub    esp,0xc
c0012d5f:	55                   	push   ebp
c0012d60:	e8 ee 61 00 00       	call   c0018f53 <unblockTask(ThreadControlBlock*)>
c0012d65:	83 c4 10             	add    esp,0x10
c0012d68:	39 eb                	cmp    ebx,ebp
c0012d6a:	75 12                	jne    c0012d7e <timerHandler(unsigned long long)+0x87>
c0012d6c:	83 ec 0c             	sub    esp,0xc
c0012d6f:	68 bc 59 02 c0       	push   0xc00259bc
c0012d74:	e8 27 cd 00 00       	call   c001faa0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012d79:	89 c3                	mov    ebx,eax
c0012d7b:	83 c4 10             	add    esp,0x10
c0012d7e:	83 ec 0c             	sub    esp,0xc
c0012d81:	68 bc 59 02 c0       	push   0xc00259bc
c0012d86:	e8 1d cd 00 00       	call   c001faa8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0012d8b:	83 c4 10             	add    esp,0x10
c0012d8e:	84 c0                	test   al,al
c0012d90:	75 b4                	jne    c0012d46 <timerHandler(unsigned long long)+0x4f>
c0012d92:	83 ec 0c             	sub    esp,0xc
c0012d95:	68 bc 59 02 c0       	push   0xc00259bc
c0012d9a:	e8 01 cd 00 00       	call   c001faa0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012d9f:	83 c4 10             	add    esp,0x10
c0012da2:	39 d8                	cmp    eax,ebx
c0012da4:	74 a0                	je     c0012d46 <timerHandler(unsigned long long)+0x4f>
c0012da6:	83 ec 0c             	sub    esp,0xc
c0012da9:	68 bc 59 02 c0       	push   0xc00259bc
c0012dae:	e8 ed cc 00 00       	call   c001faa0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012db3:	89 c5                	mov    ebp,eax
c0012db5:	c7 04 24 bc 59 02 c0 	mov    DWORD PTR [esp],0xc00259bc
c0012dbc:	e8 03 cd 00 00       	call   c001fac4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0012dc1:	83 c4 10             	add    esp,0x10
c0012dc4:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c0012dc7:	a1 f4 4b 02 c0       	mov    eax,ds:0xc0024bf4
c0012dcc:	39 15 f0 4b 02 c0    	cmp    DWORD PTR ds:0xc0024bf0,edx
c0012dd2:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0012dd5:	19 c8                	sbb    eax,ecx
c0012dd7:	73 83                	jae    c0012d5c <timerHandler(unsigned long long)+0x65>
c0012dd9:	50                   	push   eax
c0012dda:	50                   	push   eax
c0012ddb:	55                   	push   ebp
c0012ddc:	68 bc 59 02 c0       	push   0xc00259bc
c0012de1:	e8 8c cd 00 00       	call   c001fb72 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0012de6:	eb 93                	jmp    c0012d7b <timerHandler(unsigned long long)+0x84>
c0012de8:	80 3d 8c 45 02 c0 00 	cmp    BYTE PTR ds:0xc002458c,0x0
c0012def:	74 29                	je     c0012e1a <timerHandler(unsigned long long)+0x123>
c0012df1:	39 c6                	cmp    esi,eax
c0012df3:	bb 00 00 00 00       	mov    ebx,0x0
c0012df8:	19 df                	sbb    edi,ebx
c0012dfa:	72 19                	jb     c0012e15 <timerHandler(unsigned long long)+0x11e>
c0012dfc:	e8 2e 5b 00 00       	call   c001892f <lockScheduler()>
c0012e01:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012e06:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c0012e09:	e8 6a 5e 00 00       	call   c0018c78 <schedule()>
c0012e0e:	e8 1e 5b 00 00       	call   c0018931 <unlockScheduler()>
c0012e13:	eb 05                	jmp    c0012e1a <timerHandler(unsigned long long)+0x123>
c0012e15:	29 f0                	sub    eax,esi
c0012e17:	89 42 38             	mov    DWORD PTR [edx+0x38],eax
c0012e1a:	83 c4 0c             	add    esp,0xc
c0012e1d:	5b                   	pop    ebx
c0012e1e:	5e                   	pop    esi
c0012e1f:	5f                   	pop    edi
c0012e20:	5d                   	pop    ebp
c0012e21:	e9 d7 5e 00 00       	jmp    c0018cfd <unlockStuff()>
c0012e26:	83 c4 0c             	add    esp,0xc
c0012e29:	5b                   	pop    ebx
c0012e2a:	5e                   	pop    esi
c0012e2b:	5f                   	pop    edi
c0012e2c:	5d                   	pop    ebp
c0012e2d:	c3                   	ret    

c0012e2e <setupTimer(int)>:
c0012e2e:	57                   	push   edi
c0012e2f:	56                   	push   esi
c0012e30:	53                   	push   ebx
c0012e31:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012e35:	e8 99 19 00 00       	call   c00147d3 <getCPUNumber()>
c0012e3a:	85 c0                	test   eax,eax
c0012e3c:	74 32                	je     c0012e70 <setupTimer(int)+0x42>
c0012e3e:	83 ec 0c             	sub    esp,0xc
c0012e41:	68 60 01 00 00       	push   0x160
c0012e46:	e8 f7 c1 ff ff       	call   c000f042 <operator new(unsigned long)>
c0012e4b:	89 04 24             	mov    DWORD PTR [esp],eax
c0012e4e:	89 c3                	mov    ebx,eax
c0012e50:	e8 ff bf 00 00       	call   c001ee54 <APICTimer::APICTimer()>
c0012e55:	6a 00                	push   0x0
c0012e57:	6a 00                	push   0x0
c0012e59:	56                   	push   esi
c0012e5a:	53                   	push   ebx
c0012e5b:	e8 ee be 00 00       	call   c001ed4e <APICTimer::open(int, int, void*)>
c0012e60:	83 c4 20             	add    esp,0x20
c0012e63:	e8 6e 19 00 00       	call   c00147d6 <thisCPU()>
c0012e68:	56                   	push   esi
c0012e69:	56                   	push   esi
c0012e6a:	53                   	push   ebx
c0012e6b:	e9 96 00 00 00       	jmp    c0012f06 <setupTimer(int)+0xd8>
c0012e70:	e8 61 19 00 00       	call   c00147d6 <thisCPU()>
c0012e75:	83 ec 0c             	sub    esp,0xc
c0012e78:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0012e7e:	e8 eb d9 ff ff       	call   c001086e <Device::getName()>
c0012e83:	83 c4 10             	add    esp,0x10
c0012e86:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0012e89:	0f 85 87 00 00 00    	jne    c0012f16 <setupTimer(int)+0xe8>
c0012e8f:	a1 88 45 02 c0       	mov    eax,ds:0xc0024588
c0012e94:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0012e9b:	74 79                	je     c0012f16 <setupTimer(int)+0xe8>
c0012e9d:	83 ec 0c             	sub    esp,0xc
c0012ea0:	68 5c 01 00 00       	push   0x15c
c0012ea5:	e8 98 c1 ff ff       	call   c000f042 <operator new(unsigned long)>
c0012eaa:	89 04 24             	mov    DWORD PTR [esp],eax
c0012ead:	89 c3                	mov    ebx,eax
c0012eaf:	e8 fc c0 00 00       	call   c001efb0 <PIT::PIT()>
c0012eb4:	59                   	pop    ecx
c0012eb5:	5f                   	pop    edi
c0012eb6:	53                   	push   ebx
c0012eb7:	ff 35 88 45 02 c0    	push   DWORD PTR ds:0xc0024588
c0012ebd:	e8 ca d6 ff ff       	call   c001058c <Device::addChild(Device*)>
c0012ec2:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012ec4:	6a 00                	push   0x0
c0012ec6:	6a 00                	push   0x0
c0012ec8:	56                   	push   esi
c0012ec9:	53                   	push   ebx
c0012eca:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012ecd:	83 c4 14             	add    esp,0x14
c0012ed0:	68 60 01 00 00       	push   0x160
c0012ed5:	e8 68 c1 ff ff       	call   c000f042 <operator new(unsigned long)>
c0012eda:	89 04 24             	mov    DWORD PTR [esp],eax
c0012edd:	89 c7                	mov    edi,eax
c0012edf:	e8 70 bf 00 00       	call   c001ee54 <APICTimer::APICTimer()>
c0012ee4:	6a 00                	push   0x0
c0012ee6:	6a 00                	push   0x0
c0012ee8:	56                   	push   esi
c0012ee9:	57                   	push   edi
c0012eea:	e8 5f be 00 00       	call   c001ed4e <APICTimer::open(int, int, void*)>
c0012eef:	83 c4 20             	add    esp,0x20
c0012ef2:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012ef4:	6a 00                	push   0x0
c0012ef6:	6a 00                	push   0x0
c0012ef8:	6a 00                	push   0x0
c0012efa:	53                   	push   ebx
c0012efb:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012efe:	e8 d3 18 00 00       	call   c00147d6 <thisCPU()>
c0012f03:	5a                   	pop    edx
c0012f04:	59                   	pop    ecx
c0012f05:	57                   	push   edi
c0012f06:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0012f0c:	e8 7b d6 ff ff       	call   c001058c <Device::addChild(Device*)>
c0012f11:	83 c4 10             	add    esp,0x10
c0012f14:	eb 33                	jmp    c0012f49 <setupTimer(int)+0x11b>
c0012f16:	83 ec 0c             	sub    esp,0xc
c0012f19:	68 5c 01 00 00       	push   0x15c
c0012f1e:	e8 1f c1 ff ff       	call   c000f042 <operator new(unsigned long)>
c0012f23:	89 04 24             	mov    DWORD PTR [esp],eax
c0012f26:	89 c3                	mov    ebx,eax
c0012f28:	e8 83 c0 00 00       	call   c001efb0 <PIT::PIT()>
c0012f2d:	58                   	pop    eax
c0012f2e:	5a                   	pop    edx
c0012f2f:	53                   	push   ebx
c0012f30:	ff 35 88 45 02 c0    	push   DWORD PTR ds:0xc0024588
c0012f36:	e8 51 d6 ff ff       	call   c001058c <Device::addChild(Device*)>
c0012f3b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012f3d:	6a 00                	push   0x0
c0012f3f:	6a 00                	push   0x0
c0012f41:	56                   	push   esi
c0012f42:	53                   	push   ebx
c0012f43:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012f46:	83 c4 20             	add    esp,0x20
c0012f49:	89 d8                	mov    eax,ebx
c0012f4b:	5b                   	pop    ebx
c0012f4c:	5e                   	pop    esi
c0012f4d:	5f                   	pop    edi
c0012f4e:	c3                   	ret    
c0012f4f:	90                   	nop

c0012f50 <VCache::VCache(PhysicalDisk*)>:
c0012f50:	53                   	push   ebx
c0012f51:	83 ec 08             	sub    esp,0x8
c0012f54:	ba a0 20 02 c0       	mov    edx,0xc00220a0
c0012f59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f5d:	89 10                	mov    DWORD PTR [eax],edx
c0012f5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f63:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0012f6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f6e:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0012f75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f79:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0012f80:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0012f87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f8b:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0012f92:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0012f99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f9d:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0012fa4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012fa8:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0012fac:	83 ec 0c             	sub    esp,0xc
c0012faf:	6a 10                	push   0x10
c0012fb1:	e8 8c c0 ff ff       	call   c000f042 <operator new(unsigned long)>
c0012fb6:	83 c4 10             	add    esp,0x10
c0012fb9:	89 c3                	mov    ebx,eax
c0012fbb:	83 ec 0c             	sub    esp,0xc
c0012fbe:	53                   	push   ebx
c0012fbf:	e8 8e 5a 00 00       	call   c0018a52 <Mutex::Mutex()>
c0012fc4:	83 c4 10             	add    esp,0x10
c0012fc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012fcb:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0012fce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012fd2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012fd6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0012fd9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012fdd:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0012fe4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012fe8:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0012fee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ff2:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0012ff5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012ff9:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0012fff:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013005:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013009:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c001300c:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c001300f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013013:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0013017:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001301b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0013021:	c1 e0 06             	shl    eax,0x6
c0013024:	83 ec 0c             	sub    esp,0xc
c0013027:	50                   	push   eax
c0013028:	e8 dc 8f ff ff       	call   c000c009 <malloc>
c001302d:	83 c4 10             	add    esp,0x10
c0013030:	89 c2                	mov    edx,eax
c0013032:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013036:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0013039:	90                   	nop
c001303a:	83 c4 08             	add    esp,0x8
c001303d:	5b                   	pop    ebx
c001303e:	c3                   	ret    
c001303f:	90                   	nop

c0013040 <VCache::writeWriteBuffer()>:
c0013040:	53                   	push   ebx
c0013041:	83 ec 14             	sub    esp,0x14
c0013044:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013048:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001304b:	8b 10                	mov    edx,DWORD PTR [eax]
c001304d:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013050:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013053:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013056:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0013059:	50                   	push   eax
c001305a:	ff 52 28             	call   DWORD PTR [edx+0x28]
c001305d:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0013064:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c001306b:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c001306f:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0013076:	83 c4 28             	add    esp,0x28
c0013079:	5b                   	pop    ebx
c001307a:	c3                   	ret    
c001307b:	90                   	nop

c001307c <VCache::~VCache()>:
c001307c:	83 ec 0c             	sub    esp,0xc
c001307f:	ba a0 20 02 c0       	mov    edx,0xc00220a0
c0013084:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013088:	89 10                	mov    DWORD PTR [eax],edx
c001308a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001308e:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0013091:	84 c0                	test   al,al
c0013093:	74 0f                	je     c00130a4 <VCache::~VCache()+0x28>
c0013095:	83 ec 0c             	sub    esp,0xc
c0013098:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001309c:	e8 9f ff ff ff       	call   c0013040 <VCache::writeWriteBuffer()>
c00130a1:	83 c4 10             	add    esp,0x10
c00130a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130a8:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00130ab:	83 ec 0c             	sub    esp,0xc
c00130ae:	50                   	push   eax
c00130af:	e8 65 8f ff ff       	call   c000c019 <free>
c00130b4:	83 c4 10             	add    esp,0x10
c00130b7:	90                   	nop
c00130b8:	83 c4 0c             	add    esp,0xc
c00130bb:	c3                   	ret    

c00130bc <VCache::~VCache()>:
c00130bc:	83 ec 0c             	sub    esp,0xc
c00130bf:	83 ec 0c             	sub    esp,0xc
c00130c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00130c6:	e8 b1 ff ff ff       	call   c001307c <VCache::~VCache()>
c00130cb:	83 c4 10             	add    esp,0x10
c00130ce:	83 ec 08             	sub    esp,0x8
c00130d1:	6a 30                	push   0x30
c00130d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00130d7:	e8 75 bf ff ff       	call   c000f051 <operator delete(void*, unsigned long)>
c00130dc:	83 c4 10             	add    esp,0x10
c00130df:	83 c4 0c             	add    esp,0xc
c00130e2:	c3                   	ret    
c00130e3:	90                   	nop

c00130e4 <VCache::write(unsigned long long, int, void*)>:
c00130e4:	55                   	push   ebp
c00130e5:	57                   	push   edi
c00130e6:	56                   	push   esi
c00130e7:	53                   	push   ebx
c00130e8:	83 ec 28             	sub    esp,0x28
c00130eb:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00130ef:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00130f3:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00130f7:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c00130fb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00130fe:	e8 bd 5d 00 00       	call   c0018ec0 <Semaphore::acquire()>
c0013103:	83 c4 10             	add    esp,0x10
c0013106:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c001310a:	74 66                	je     c0013172 <VCache::write(unsigned long long, int, void*)+0x8e>
c001310c:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001310f:	99                   	cdq    
c0013110:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013114:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c0013117:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c001311a:	89 c1                	mov    ecx,eax
c001311c:	31 f1                	xor    ecx,esi
c001311e:	89 d0                	mov    eax,edx
c0013120:	31 f8                	xor    eax,edi
c0013122:	89 ca                	mov    edx,ecx
c0013124:	09 c2                	or     edx,eax
c0013126:	75 3e                	jne    c0013166 <VCache::write(unsigned long long, int, void*)+0x82>
c0013128:	83 fd 01             	cmp    ebp,0x1
c001312b:	75 39                	jne    c0013166 <VCache::write(unsigned long long, int, void*)+0x82>
c001312d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0013130:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0013136:	51                   	push   ecx
c0013137:	50                   	push   eax
c0013138:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001313c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0013140:	0f af c8             	imul   ecx,eax
c0013143:	03 4b 28             	add    ecx,DWORD PTR [ebx+0x28]
c0013146:	51                   	push   ecx
c0013147:	e8 38 d5 fe ff       	call   c0000684 <memcpy>
c001314c:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001314f:	83 c4 10             	add    esp,0x10
c0013152:	40                   	inc    eax
c0013153:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0013156:	83 f8 40             	cmp    eax,0x40
c0013159:	75 57                	jne    c00131b2 <VCache::write(unsigned long long, int, void*)+0xce>
c001315b:	83 ec 0c             	sub    esp,0xc
c001315e:	53                   	push   ebx
c001315f:	e8 dc fe ff ff       	call   c0013040 <VCache::writeWriteBuffer()>
c0013164:	eb 34                	jmp    c001319a <VCache::write(unsigned long long, int, void*)+0xb6>
c0013166:	83 ec 0c             	sub    esp,0xc
c0013169:	53                   	push   ebx
c001316a:	e8 d1 fe ff ff       	call   c0013040 <VCache::writeWriteBuffer()>
c001316f:	83 c4 10             	add    esp,0x10
c0013172:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0013175:	83 fd 3f             	cmp    ebp,0x3f
c0013178:	7f 25                	jg     c001319f <VCache::write(unsigned long long, int, void*)+0xbb>
c001317a:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c001317d:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c0013180:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c0013183:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0013187:	52                   	push   edx
c0013188:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001318e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0013192:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013195:	e8 ea d4 fe ff       	call   c0000684 <memcpy>
c001319a:	83 c4 10             	add    esp,0x10
c001319d:	eb 13                	jmp    c00131b2 <VCache::write(unsigned long long, int, void*)+0xce>
c001319f:	83 ec 0c             	sub    esp,0xc
c00131a2:	8b 10                	mov    edx,DWORD PTR [eax]
c00131a4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00131a8:	55                   	push   ebp
c00131a9:	57                   	push   edi
c00131aa:	56                   	push   esi
c00131ab:	50                   	push   eax
c00131ac:	ff 52 28             	call   DWORD PTR [edx+0x28]
c00131af:	83 c4 20             	add    esp,0x20
c00131b2:	83 ec 0c             	sub    esp,0xc
c00131b5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00131b8:	e8 8f 62 00 00       	call   c001944c <Semaphore::release()>
c00131bd:	83 c4 2c             	add    esp,0x2c
c00131c0:	5b                   	pop    ebx
c00131c1:	31 c0                	xor    eax,eax
c00131c3:	5e                   	pop    esi
c00131c4:	5f                   	pop    edi
c00131c5:	5d                   	pop    ebp
c00131c6:	c3                   	ret    
c00131c7:	90                   	nop

c00131c8 <VCache::read(unsigned long long, int, void*)>:
c00131c8:	57                   	push   edi
c00131c9:	56                   	push   esi
c00131ca:	53                   	push   ebx
c00131cb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00131cf:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00131d3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00131d7:	83 ec 0c             	sub    esp,0xc
c00131da:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00131dd:	e8 de 5c 00 00       	call   c0018ec0 <Semaphore::acquire()>
c00131e2:	83 c4 10             	add    esp,0x10
c00131e5:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c00131e9:	74 0c                	je     c00131f7 <VCache::read(unsigned long long, int, void*)+0x2f>
c00131eb:	83 ec 0c             	sub    esp,0xc
c00131ee:	53                   	push   ebx
c00131ef:	e8 4c fe ff ff       	call   c0013040 <VCache::writeWriteBuffer()>
c00131f4:	83 c4 10             	add    esp,0x10
c00131f7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00131fa:	83 ec 0c             	sub    esp,0xc
c00131fd:	8b 10                	mov    edx,DWORD PTR [eax]
c00131ff:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013203:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013207:	57                   	push   edi
c0013208:	56                   	push   esi
c0013209:	50                   	push   eax
c001320a:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001320d:	83 c4 14             	add    esp,0x14
c0013210:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013213:	e8 34 62 00 00       	call   c001944c <Semaphore::release()>
c0013218:	83 c4 10             	add    esp,0x10
c001321b:	5b                   	pop    ebx
c001321c:	31 c0                	xor    eax,eax
c001321e:	5e                   	pop    esi
c001321f:	5f                   	pop    edi
c0013220:	c3                   	ret    
c0013221:	90                   	nop

c0013222 <Video::putrect(int, int, int, int, unsigned int)>:
c0013222:	55                   	push   ebp
c0013223:	57                   	push   edi
c0013224:	56                   	push   esi
c0013225:	53                   	push   ebx
c0013226:	83 ec 1c             	sub    esp,0x1c
c0013229:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001322d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0013231:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0013235:	01 e8                	add    eax,ebp
c0013237:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c001323b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001323f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013243:	01 df                	add    edi,ebx
c0013245:	39 fb                	cmp    ebx,edi
c0013247:	7d 1b                	jge    c0013264 <Video::putrect(int, int, int, int, unsigned int)+0x42>
c0013249:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c001324d:	7d 12                	jge    c0013261 <Video::putrect(int, int, int, int, unsigned int)+0x3f>
c001324f:	8b 16                	mov    edx,DWORD PTR [esi]
c0013251:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0013255:	53                   	push   ebx
c0013256:	55                   	push   ebp
c0013257:	45                   	inc    ebp
c0013258:	56                   	push   esi
c0013259:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001325c:	83 c4 10             	add    esp,0x10
c001325f:	eb e8                	jmp    c0013249 <Video::putrect(int, int, int, int, unsigned int)+0x27>
c0013261:	43                   	inc    ebx
c0013262:	eb e1                	jmp    c0013245 <Video::putrect(int, int, int, int, unsigned int)+0x23>
c0013264:	83 c4 1c             	add    esp,0x1c
c0013267:	5b                   	pop    ebx
c0013268:	5e                   	pop    esi
c0013269:	5f                   	pop    edi
c001326a:	5d                   	pop    ebp
c001326b:	c3                   	ret    

c001326c <Video::blit(unsigned int*, int, int, int, int)>:
c001326c:	55                   	push   ebp
c001326d:	57                   	push   edi
c001326e:	56                   	push   esi
c001326f:	53                   	push   ebx
c0013270:	83 ec 1c             	sub    esp,0x1c
c0013273:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0013277:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001327b:	85 c0                	test   eax,eax
c001327d:	79 02                	jns    c0013281 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c001327f:	31 c0                	xor    eax,eax
c0013281:	c1 e0 02             	shl    eax,0x2
c0013284:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0013288:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001328c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0013290:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0013294:	39 d8                	cmp    eax,ebx
c0013296:	7e 49                	jle    c00132e1 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0013298:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c001329e:	7c 41                	jl     c00132e1 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c00132a0:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00132a4:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00132a8:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00132ac:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c00132b0:	39 f9                	cmp    ecx,edi
c00132b2:	7e 22                	jle    c00132d6 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c00132b4:	83 c5 04             	add    ebp,0x4
c00132b7:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c00132bd:	7c 14                	jl     c00132d3 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c00132bf:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00132c1:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c00132c4:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00132c8:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00132cc:	56                   	push   esi
c00132cd:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c00132d0:	83 c4 10             	add    esp,0x10
c00132d3:	47                   	inc    edi
c00132d4:	eb d2                	jmp    c00132a8 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c00132d6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00132da:	43                   	inc    ebx
c00132db:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c00132df:	eb ab                	jmp    c001328c <Video::blit(unsigned int*, int, int, int, int)+0x20>
c00132e1:	83 c4 1c             	add    esp,0x1c
c00132e4:	5b                   	pop    ebx
c00132e5:	5e                   	pop    esi
c00132e6:	5f                   	pop    edi
c00132e7:	5d                   	pop    ebp
c00132e8:	c3                   	ret    
c00132e9:	90                   	nop

c00132ea <Video::clearScreen(unsigned int)>:
c00132ea:	57                   	push   edi
c00132eb:	56                   	push   esi
c00132ec:	53                   	push   ebx
c00132ed:	31 db                	xor    ebx,ebx
c00132ef:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00132f3:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c00132f9:	7e 1f                	jle    c001331a <Video::clearScreen(unsigned int)+0x30>
c00132fb:	31 ff                	xor    edi,edi
c00132fd:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0013303:	7e 12                	jle    c0013317 <Video::clearScreen(unsigned int)+0x2d>
c0013305:	8b 06                	mov    eax,DWORD PTR [esi]
c0013307:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001330b:	53                   	push   ebx
c001330c:	57                   	push   edi
c001330d:	47                   	inc    edi
c001330e:	56                   	push   esi
c001330f:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0013312:	83 c4 10             	add    esp,0x10
c0013315:	eb e6                	jmp    c00132fd <Video::clearScreen(unsigned int)+0x13>
c0013317:	43                   	inc    ebx
c0013318:	eb d9                	jmp    c00132f3 <Video::clearScreen(unsigned int)+0x9>
c001331a:	5b                   	pop    ebx
c001331b:	5e                   	pop    esi
c001331c:	5f                   	pop    edi
c001331d:	c3                   	ret    

c001331e <Video::putpixel(int, int, unsigned int)>:
c001331e:	c7 44 24 04 a8 20 02 c0 	mov    DWORD PTR [esp+0x4],0xc00220a8
c0013326:	e9 4c be ff ff       	jmp    c000f177 <Dbg::kprintf(char const*, ...)>
c001332b:	90                   	nop

c001332c <Video::Video(char const*)>:
c001332c:	83 ec 0c             	sub    esp,0xc
c001332f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013333:	83 ec 08             	sub    esp,0x8
c0013336:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001333a:	50                   	push   eax
c001333b:	e8 3c d4 ff ff       	call   c001077c <Device::Device(char const*)>
c0013340:	83 c4 10             	add    esp,0x10
c0013343:	ba c0 20 02 c0       	mov    edx,0xc00220c0
c0013348:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001334c:	89 10                	mov    DWORD PTR [eax],edx
c001334e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013352:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c001335c:	90                   	nop
c001335d:	83 c4 0c             	add    esp,0xc
c0013360:	c3                   	ret    
c0013361:	90                   	nop

c0013362 <Video::~Video()>:
c0013362:	83 ec 0c             	sub    esp,0xc
c0013365:	ba c0 20 02 c0       	mov    edx,0xc00220c0
c001336a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001336e:	89 10                	mov    DWORD PTR [eax],edx
c0013370:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013374:	83 ec 0c             	sub    esp,0xc
c0013377:	50                   	push   eax
c0013378:	e8 b5 d0 ff ff       	call   c0010432 <Device::~Device()>
c001337d:	83 c4 10             	add    esp,0x10
c0013380:	90                   	nop
c0013381:	83 c4 0c             	add    esp,0xc
c0013384:	c3                   	ret    
c0013385:	90                   	nop

c0013386 <Video::~Video()>:
c0013386:	83 ec 0c             	sub    esp,0xc
c0013389:	83 ec 0c             	sub    esp,0xc
c001338c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013390:	e8 cd ff ff ff       	call   c0013362 <Video::~Video()>
c0013395:	83 c4 10             	add    esp,0x10
c0013398:	83 ec 08             	sub    esp,0x8
c001339b:	68 64 01 00 00       	push   0x164
c00133a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00133a4:	e8 a8 bc ff ff       	call   c000f051 <operator delete(void*, unsigned long)>
c00133a9:	83 c4 10             	add    esp,0x10
c00133ac:	83 c4 0c             	add    esp,0xc
c00133af:	c3                   	ret    

c00133b0 <Video::isMonochrome()>:
c00133b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00133b4:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c00133ba:	c3                   	ret    
c00133bb:	90                   	nop

c00133bc <Video::getWidth()>:
c00133bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00133c0:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00133c6:	c3                   	ret    
c00133c7:	90                   	nop

c00133c8 <Video::getHeight()>:
c00133c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00133cc:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00133d2:	c3                   	ret    
c00133d3:	90                   	nop

c00133d4 <Video::drawCursor(int, int, unsigned char*, int)>:
c00133d4:	55                   	push   ebp
c00133d5:	57                   	push   edi
c00133d6:	56                   	push   esi
c00133d7:	53                   	push   ebx
c00133d8:	83 ec 2c             	sub    esp,0x2c
c00133db:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00133df:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00133e3:	83 f8 01             	cmp    eax,0x1
c00133e6:	19 c9                	sbb    ecx,ecx
c00133e8:	31 db                	xor    ebx,ebx
c00133ea:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00133ee:	89 cd                	mov    ebp,ecx
c00133f0:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c00133f8:	f7 d5                	not    ebp
c00133fa:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c0013400:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0013404:	01 d8                	add    eax,ebx
c0013406:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001340a:	56                   	push   esi
c001340b:	e8 b8 ff ff ff       	call   c00133c8 <Video::getHeight()>
c0013410:	59                   	pop    ecx
c0013411:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0013415:	7e 70                	jle    c0013487 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c0013417:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001341b:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c001341f:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0013422:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013426:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001342a:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c0013431:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013435:	89 f8                	mov    eax,edi
c0013437:	83 c0 20             	add    eax,0x20
c001343a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001343e:	56                   	push   esi
c001343f:	e8 78 ff ff ff       	call   c00133bc <Video::getWidth()>
c0013444:	5a                   	pop    edx
c0013445:	39 c7                	cmp    edi,eax
c0013447:	7d 34                	jge    c001347d <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c0013449:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c001344e:	74 05                	je     c0013455 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c0013450:	8b 06                	mov    eax,DWORD PTR [esi]
c0013452:	55                   	push   ebp
c0013453:	eb 0d                	jmp    c0013462 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c0013455:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c001345a:	74 12                	je     c001346e <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c001345c:	8b 06                	mov    eax,DWORD PTR [esi]
c001345e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013462:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013466:	57                   	push   edi
c0013467:	56                   	push   esi
c0013468:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001346b:	83 c4 10             	add    esp,0x10
c001346e:	47                   	inc    edi
c001346f:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c0013473:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c0013477:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001347b:	75 c1                	jne    c001343e <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c001347d:	43                   	inc    ebx
c001347e:	83 fb 20             	cmp    ebx,0x20
c0013481:	0f 85 79 ff ff ff    	jne    c0013400 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c0013487:	83 c4 2c             	add    esp,0x2c
c001348a:	5b                   	pop    ebx
c001348b:	5e                   	pop    esi
c001348c:	5f                   	pop    edi
c001348d:	5d                   	pop    ebp
c001348e:	c3                   	ret    
c001348f:	90                   	nop

c0013490 <ACPI::close(int, int, void*)>:
c0013490:	83 ec 1c             	sub    esp,0x1c
c0013493:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c001349b:	74 0a                	je     c00134a7 <ACPI::close(int, int, void*)+0x17>
c001349d:	b8 00 00 00 00       	mov    eax,0x0
c00134a2:	e9 9a 00 00 00       	jmp    c0013541 <ACPI::close(int, int, void*)+0xb1>
c00134a7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00134ac:	75 37                	jne    c00134e5 <ACPI::close(int, int, void*)+0x55>
c00134ae:	83 ec 0c             	sub    esp,0xc
c00134b1:	68 f8 20 02 c0       	push   0xc00220f8
c00134b6:	e8 bc bc ff ff       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c00134bb:	83 c4 10             	add    esp,0x10
c00134be:	a1 08 4c 02 c0       	mov    eax,ds:0xc0024c08
c00134c3:	85 c0                	test   eax,eax
c00134c5:	74 07                	je     c00134ce <ACPI::close(int, int, void*)+0x3e>
c00134c7:	a1 08 4c 02 c0       	mov    eax,ds:0xc0024c08
c00134cc:	ff d0                	call   eax
c00134ce:	83 ec 0c             	sub    esp,0xc
c00134d1:	68 ac 21 02 c0       	push   0xc00221ac
c00134d6:	e8 67 24 00 00       	call   c0015942 <Krnl::panic(char const*)>
c00134db:	83 c4 10             	add    esp,0x10
c00134de:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00134e3:	eb 5c                	jmp    c0013541 <ACPI::close(int, int, void*)+0xb1>
c00134e5:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c00134ea:	75 50                	jne    c001353c <ACPI::close(int, int, void*)+0xac>
c00134ec:	a1 04 4c 02 c0       	mov    eax,ds:0xc0024c04
c00134f1:	85 c0                	test   eax,eax
c00134f3:	74 07                	je     c00134fc <ACPI::close(int, int, void*)+0x6c>
c00134f5:	a1 04 4c 02 c0       	mov    eax,ds:0xc0024c04
c00134fa:	ff d0                	call   eax
c00134fc:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c0013501:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0013506:	83 e0 02             	and    eax,0x2
c0013509:	74 1c                	je     c0013527 <ACPI::close(int, int, void*)+0x97>
c001350b:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c0013512:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013516:	89 c2                	mov    edx,eax
c0013518:	ec                   	in     al,dx
c0013519:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001351d:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0013521:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0013525:	eb da                	jmp    c0013501 <ACPI::close(int, int, void*)+0x71>
c0013527:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c001352e:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c0013533:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0013537:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001353b:	ee                   	out    dx,al
c001353c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0013541:	83 c4 1c             	add    esp,0x1c
c0013544:	c3                   	ret    

c0013545 <findRSDP()>:
c0013545:	83 ec 1c             	sub    esp,0x1c
c0013548:	a1 88 45 02 c0       	mov    eax,ds:0xc0024588
c001354d:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0013553:	83 e0 04             	and    eax,0x4
c0013556:	84 c0                	test   al,al
c0013558:	75 07                	jne    c0013561 <findRSDP()+0x1c>
c001355a:	b8 00 00 00 00       	mov    eax,0x0
c001355f:	eb 6a                	jmp    c00135cb <findRSDP()+0x86>
c0013561:	a1 d0 45 02 c0       	mov    eax,ds:0xc00245d0
c0013566:	3d ff 07 00 00       	cmp    eax,0x7ff
c001356b:	7f 1b                	jg     c0013588 <findRSDP()+0x43>
c001356d:	a1 88 45 02 c0       	mov    eax,ds:0xc0024588
c0013572:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0013578:	83 e2 fb             	and    edx,0xfffffffb
c001357b:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0013581:	b8 00 00 00 00       	mov    eax,0x0
c0013586:	eb 43                	jmp    c00135cb <findRSDP()+0x86>
c0013588:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0013590:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0013598:	77 2c                	ja     c00135c6 <findRSDP()+0x81>
c001359a:	83 ec 04             	sub    esp,0x4
c001359d:	6a 08                	push   0x8
c001359f:	68 05 21 02 c0       	push   0xc0022105
c00135a4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00135a8:	e8 74 d0 fe ff       	call   c0000621 <memcmp>
c00135ad:	83 c4 10             	add    esp,0x10
c00135b0:	85 c0                	test   eax,eax
c00135b2:	0f 94 c0             	sete   al
c00135b5:	84 c0                	test   al,al
c00135b7:	74 06                	je     c00135bf <findRSDP()+0x7a>
c00135b9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00135bd:	eb 0c                	jmp    c00135cb <findRSDP()+0x86>
c00135bf:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c00135c4:	eb ca                	jmp    c0013590 <findRSDP()+0x4b>
c00135c6:	b8 00 00 00 00       	mov    eax,0x0
c00135cb:	83 c4 1c             	add    esp,0x1c
c00135ce:	c3                   	ret    

c00135cf <loadACPITables(unsigned char*)>:
c00135cf:	56                   	push   esi
c00135d0:	53                   	push   ebx
c00135d1:	83 ec 44             	sub    esp,0x44
c00135d4:	a1 88 45 02 c0       	mov    eax,ds:0xc0024588
c00135d9:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00135df:	83 e0 04             	and    eax,0x4
c00135e2:	84 c0                	test   al,al
c00135e4:	0f 84 05 02 00 00    	je     c00137ef <loadACPITables(unsigned char*)+0x220>
c00135ea:	a0 20 4e 02 c0       	mov    al,ds:0xc0024e20
c00135ef:	84 c0                	test   al,al
c00135f1:	74 75                	je     c0013668 <loadACPITables(unsigned char*)+0x99>
c00135f3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00135f7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00135fb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00135ff:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013602:	83 e8 24             	sub    eax,0x24
c0013605:	c1 e8 03             	shr    eax,0x3
c0013608:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001360c:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0013614:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0013618:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c001361c:	0f 8d b2 00 00 00    	jge    c00136d4 <loadACPITables(unsigned char*)+0x105>
c0013622:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0013626:	83 c0 24             	add    eax,0x24
c0013629:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001362d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013631:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0013635:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0013639:	c1 e0 03             	shl    eax,0x3
c001363c:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
c0013640:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013644:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0013647:	8b 00                	mov    eax,DWORD PTR [eax]
c0013649:	89 c1                	mov    ecx,eax
c001364b:	a1 0c 4c 02 c0       	mov    eax,ds:0xc0024c0c
c0013650:	8d 50 01             	lea    edx,[eax+0x1]
c0013653:	89 15 0c 4c 02 c0    	mov    DWORD PTR ds:0xc0024c0c,edx
c0013659:	89 ca                	mov    edx,ecx
c001365b:	89 14 c5 24 4c 02 c0 	mov    DWORD PTR [eax*8-0x3ffdb3dc],edx
c0013662:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c0013666:	eb ac                	jmp    c0013614 <loadACPITables(unsigned char*)+0x45>
c0013668:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001366c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0013670:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013674:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013677:	83 e8 24             	sub    eax,0x24
c001367a:	c1 e8 02             	shr    eax,0x2
c001367d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013681:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c0013689:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001368d:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c0013691:	7d 41                	jge    c00136d4 <loadACPITables(unsigned char*)+0x105>
c0013693:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0013697:	83 c0 24             	add    eax,0x24
c001369a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001369e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00136a2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00136a6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00136aa:	c1 e0 02             	shl    eax,0x2
c00136ad:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c00136b1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00136b5:	8b 08                	mov    ecx,DWORD PTR [eax]
c00136b7:	a1 0c 4c 02 c0       	mov    eax,ds:0xc0024c0c
c00136bc:	8d 50 01             	lea    edx,[eax+0x1]
c00136bf:	89 15 0c 4c 02 c0    	mov    DWORD PTR ds:0xc0024c0c,edx
c00136c5:	89 ca                	mov    edx,ecx
c00136c7:	89 14 c5 24 4c 02 c0 	mov    DWORD PTR [eax*8-0x3ffdb3dc],edx
c00136ce:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c00136d2:	eb b5                	jmp    c0013689 <loadACPITables(unsigned char*)+0xba>
c00136d4:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c00136dc:	a1 0c 4c 02 c0       	mov    eax,ds:0xc0024c0c
c00136e1:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
c00136e5:	0f 8d 05 01 00 00    	jge    c00137f0 <loadACPITables(unsigned char*)+0x221>
c00136eb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00136ef:	8b 04 c5 24 4c 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdb3dc]
c00136f6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00136fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00136fe:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013702:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013706:	25 ff 0f 00 00       	and    eax,0xfff
c001370b:	89 c6                	mov    esi,eax
c001370d:	e8 d7 ab ff ff       	call   c000e2e9 <Virt::getAKernelVAS()>
c0013712:	89 c3                	mov    ebx,eax
c0013714:	83 ec 0c             	sub    esp,0xc
c0013717:	6a 01                	push   0x1
c0013719:	e8 3e aa ff ff       	call   c000e15c <Virt::allocateKernelVirtualPages(int)>
c001371e:	83 c4 10             	add    esp,0x10
c0013721:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013725:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001372b:	83 ec 0c             	sub    esp,0xc
c001372e:	6a 01                	push   0x1
c0013730:	6a 01                	push   0x1
c0013732:	50                   	push   eax
c0013733:	52                   	push   edx
c0013734:	53                   	push   ebx
c0013735:	e8 e0 b3 ff ff       	call   c000eb1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001373a:	83 c4 20             	add    esp,0x20
c001373d:	09 f0                	or     eax,esi
c001373f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013743:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013747:	c1 e0 03             	shl    eax,0x3
c001374a:	05 20 4c 02 c0       	add    eax,0xc0024c20
c001374f:	83 ec 04             	sub    esp,0x4
c0013752:	6a 04                	push   0x4
c0013754:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013758:	50                   	push   eax
c0013759:	e8 26 cf fe ff       	call   c0000684 <memcpy>
c001375e:	83 c4 10             	add    esp,0x10
c0013761:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013765:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013768:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001376c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013770:	05 00 10 00 00       	add    eax,0x1000
c0013775:	c1 e8 0c             	shr    eax,0xc
c0013778:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001377c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013780:	89 04 24             	mov    DWORD PTR [esp],eax
c0013783:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013787:	25 ff 0f 00 00       	and    eax,0xfff
c001378c:	89 c6                	mov    esi,eax
c001378e:	e8 56 ab ff ff       	call   c000e2e9 <Virt::getAKernelVAS()>
c0013793:	89 c3                	mov    ebx,eax
c0013795:	83 ec 0c             	sub    esp,0xc
c0013798:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001379c:	e8 bb a9 ff ff       	call   c000e15c <Virt::allocateKernelVirtualPages(int)>
c00137a1:	83 c4 10             	add    esp,0x10
c00137a4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00137a8:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00137ae:	83 ec 0c             	sub    esp,0xc
c00137b1:	6a 01                	push   0x1
c00137b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00137b7:	50                   	push   eax
c00137b8:	52                   	push   edx
c00137b9:	53                   	push   ebx
c00137ba:	e8 5b b3 ff ff       	call   c000eb1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00137bf:	83 c4 20             	add    esp,0x20
c00137c2:	09 f0                	or     eax,esi
c00137c4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00137c8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00137cb:	83 ec 0c             	sub    esp,0xc
c00137ce:	50                   	push   eax
c00137cf:	e8 d5 ac ff ff       	call   c000e4a9 <Virt::freeKernelVirtualPages(unsigned long)>
c00137d4:	83 c4 10             	add    esp,0x10
c00137d7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00137db:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00137df:	89 14 c5 24 4c 02 c0 	mov    DWORD PTR [eax*8-0x3ffdb3dc],edx
c00137e6:	ff 44 24 34          	inc    DWORD PTR [esp+0x34]
c00137ea:	e9 ed fe ff ff       	jmp    c00136dc <loadACPITables(unsigned char*)+0x10d>
c00137ef:	90                   	nop
c00137f0:	83 c4 44             	add    esp,0x44
c00137f3:	5b                   	pop    ebx
c00137f4:	5e                   	pop    esi
c00137f5:	c3                   	ret    

c00137f6 <findRSDT(unsigned char*)>:
c00137f6:	56                   	push   esi
c00137f7:	53                   	push   ebx
c00137f8:	83 ec 44             	sub    esp,0x44
c00137fb:	a1 88 45 02 c0       	mov    eax,ds:0xc0024588
c0013800:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0013806:	83 e0 04             	and    eax,0x4
c0013809:	84 c0                	test   al,al
c001380b:	75 0a                	jne    c0013817 <findRSDT(unsigned char*)+0x21>
c001380d:	b8 00 00 00 00       	mov    eax,0x0
c0013812:	e9 f7 00 00 00       	jmp    c001390e <findRSDT(unsigned char*)+0x118>
c0013817:	83 ec 04             	sub    esp,0x4
c001381a:	6a 24                	push   0x24
c001381c:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0013820:	8d 44 24 18          	lea    eax,[esp+0x18]
c0013824:	50                   	push   eax
c0013825:	e8 5a ce fe ff       	call   c0000684 <memcpy>
c001382a:	83 c4 10             	add    esp,0x10
c001382d:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0013831:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0013835:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c001383d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013841:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0013845:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0013849:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001384d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0013851:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013855:	25 ff 0f 00 00       	and    eax,0xfff
c001385a:	89 c6                	mov    esi,eax
c001385c:	e8 88 aa ff ff       	call   c000e2e9 <Virt::getAKernelVAS()>
c0013861:	89 c3                	mov    ebx,eax
c0013863:	83 ec 0c             	sub    esp,0xc
c0013866:	6a 02                	push   0x2
c0013868:	e8 ef a8 ff ff       	call   c000e15c <Virt::allocateKernelVirtualPages(int)>
c001386d:	83 c4 10             	add    esp,0x10
c0013870:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0013874:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001387a:	83 ec 0c             	sub    esp,0xc
c001387d:	6a 01                	push   0x1
c001387f:	6a 02                	push   0x2
c0013881:	50                   	push   eax
c0013882:	52                   	push   edx
c0013883:	53                   	push   ebx
c0013884:	e8 91 b2 ff ff       	call   c000eb1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0013889:	83 c4 20             	add    esp,0x20
c001388c:	09 f0                	or     eax,esi
c001388e:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0013892:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013896:	25 ff 0f 00 00       	and    eax,0xfff
c001389b:	89 c6                	mov    esi,eax
c001389d:	e8 47 aa ff ff       	call   c000e2e9 <Virt::getAKernelVAS()>
c00138a2:	89 c3                	mov    ebx,eax
c00138a4:	83 ec 0c             	sub    esp,0xc
c00138a7:	6a 02                	push   0x2
c00138a9:	e8 ae a8 ff ff       	call   c000e15c <Virt::allocateKernelVirtualPages(int)>
c00138ae:	83 c4 10             	add    esp,0x10
c00138b1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00138b5:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00138bb:	83 ec 0c             	sub    esp,0xc
c00138be:	6a 01                	push   0x1
c00138c0:	6a 02                	push   0x2
c00138c2:	50                   	push   eax
c00138c3:	52                   	push   edx
c00138c4:	53                   	push   ebx
c00138c5:	e8 50 b2 ff ff       	call   c000eb1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00138ca:	83 c4 20             	add    esp,0x20
c00138cd:	09 f0                	or     eax,esi
c00138cf:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00138d3:	80 7c 24 3b 00       	cmp    BYTE PTR [esp+0x3b],0x0
c00138d8:	75 11                	jne    c00138eb <findRSDT(unsigned char*)+0xf5>
c00138da:	c6 05 20 4e 02 c0 00 	mov    BYTE PTR ds:0xc0024e20,0x0
c00138e1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00138e5:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00138e9:	eb 1f                	jmp    c001390a <findRSDT(unsigned char*)+0x114>
c00138eb:	80 7c 24 3b 02       	cmp    BYTE PTR [esp+0x3b],0x2
c00138f0:	75 11                	jne    c0013903 <findRSDT(unsigned char*)+0x10d>
c00138f2:	c6 05 20 4e 02 c0 01 	mov    BYTE PTR ds:0xc0024e20,0x1
c00138f9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00138fd:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0013901:	eb 07                	jmp    c001390a <findRSDT(unsigned char*)+0x114>
c0013903:	b8 00 00 00 00       	mov    eax,0x0
c0013908:	eb 04                	jmp    c001390e <findRSDT(unsigned char*)+0x118>
c001390a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001390e:	83 c4 44             	add    esp,0x44
c0013911:	5b                   	pop    ebx
c0013912:	5e                   	pop    esi
c0013913:	c3                   	ret    

c0013914 <findDataTable(unsigned char*, char*)>:
c0013914:	83 ec 1c             	sub    esp,0x1c
c0013917:	a1 88 45 02 c0       	mov    eax,ds:0xc0024588
c001391c:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0013922:	83 e0 04             	and    eax,0x4
c0013925:	84 c0                	test   al,al
c0013927:	75 07                	jne    c0013930 <findDataTable(unsigned char*, char*)+0x1c>
c0013929:	b8 00 00 00 00       	mov    eax,0x0
c001392e:	eb 7c                	jmp    c00139ac <findDataTable(unsigned char*, char*)+0x98>
c0013930:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013938:	a1 0c 4c 02 c0       	mov    eax,ds:0xc0024c0c
c001393d:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0013941:	7d 3a                	jge    c001397d <findDataTable(unsigned char*, char*)+0x69>
c0013943:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013947:	c1 e0 03             	shl    eax,0x3
c001394a:	05 20 4c 02 c0       	add    eax,0xc0024c20
c001394f:	83 ec 04             	sub    esp,0x4
c0013952:	6a 04                	push   0x4
c0013954:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013958:	50                   	push   eax
c0013959:	e8 c3 cc fe ff       	call   c0000621 <memcmp>
c001395e:	83 c4 10             	add    esp,0x10
c0013961:	85 c0                	test   eax,eax
c0013963:	0f 94 c0             	sete   al
c0013966:	84 c0                	test   al,al
c0013968:	74 0d                	je     c0013977 <findDataTable(unsigned char*, char*)+0x63>
c001396a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001396e:	8b 04 c5 24 4c 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdb3dc]
c0013975:	eb 35                	jmp    c00139ac <findDataTable(unsigned char*, char*)+0x98>
c0013977:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001397b:	eb bb                	jmp    c0013938 <findDataTable(unsigned char*, char*)+0x24>
c001397d:	a0 20 4e 02 c0       	mov    al,ds:0xc0024e20
c0013982:	84 c0                	test   al,al
c0013984:	74 07                	je     c001398d <findDataTable(unsigned char*, char*)+0x79>
c0013986:	b8 58 00 00 00       	mov    eax,0x58
c001398b:	eb 05                	jmp    c0013992 <findDataTable(unsigned char*, char*)+0x7e>
c001398d:	b8 52 00 00 00       	mov    eax,0x52
c0013992:	83 ec 04             	sub    esp,0x4
c0013995:	50                   	push   eax
c0013996:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001399a:	68 d0 21 02 c0       	push   0xc00221d0
c001399f:	e8 d3 b7 ff ff       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c00139a4:	83 c4 10             	add    esp,0x10
c00139a7:	b8 00 00 00 00       	mov    eax,0x0
c00139ac:	83 c4 1c             	add    esp,0x1c
c00139af:	c3                   	ret    

c00139b0 <scanMADT()>:
c00139b0:	83 ec 2c             	sub    esp,0x2c
c00139b3:	a1 88 45 02 c0       	mov    eax,ds:0xc0024588
c00139b8:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00139be:	83 e0 04             	and    eax,0x4
c00139c1:	84 c0                	test   al,al
c00139c3:	0f 84 73 03 00 00    	je     c0013d3c <scanMADT()+0x38c>
c00139c9:	e8 77 fb ff ff       	call   c0013545 <findRSDP()>
c00139ce:	a3 2c 4e 02 c0       	mov    ds:0xc0024e2c,eax
c00139d3:	a1 2c 4e 02 c0       	mov    eax,ds:0xc0024e2c
c00139d8:	85 c0                	test   eax,eax
c00139da:	75 19                	jne    c00139f5 <scanMADT()+0x45>
c00139dc:	a1 88 45 02 c0       	mov    eax,ds:0xc0024588
c00139e1:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00139e7:	83 e2 fb             	and    edx,0xfffffffb
c00139ea:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00139f0:	e9 4b 03 00 00       	jmp    c0013d40 <scanMADT()+0x390>
c00139f5:	a1 2c 4e 02 c0       	mov    eax,ds:0xc0024e2c
c00139fa:	83 ec 0c             	sub    esp,0xc
c00139fd:	50                   	push   eax
c00139fe:	e8 f3 fd ff ff       	call   c00137f6 <findRSDT(unsigned char*)>
c0013a03:	83 c4 10             	add    esp,0x10
c0013a06:	a3 28 4e 02 c0       	mov    ds:0xc0024e28,eax
c0013a0b:	a1 28 4e 02 c0       	mov    eax,ds:0xc0024e28
c0013a10:	85 c0                	test   eax,eax
c0013a12:	75 19                	jne    c0013a2d <scanMADT()+0x7d>
c0013a14:	a1 88 45 02 c0       	mov    eax,ds:0xc0024588
c0013a19:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0013a1f:	83 e2 fb             	and    edx,0xfffffffb
c0013a22:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0013a28:	e9 13 03 00 00       	jmp    c0013d40 <scanMADT()+0x390>
c0013a2d:	a1 28 4e 02 c0       	mov    eax,ds:0xc0024e28
c0013a32:	83 ec 0c             	sub    esp,0xc
c0013a35:	50                   	push   eax
c0013a36:	e8 94 fb ff ff       	call   c00135cf <loadACPITables(unsigned char*)>
c0013a3b:	83 c4 10             	add    esp,0x10
c0013a3e:	a1 28 4e 02 c0       	mov    eax,ds:0xc0024e28
c0013a43:	83 ec 08             	sub    esp,0x8
c0013a46:	68 0e 21 02 c0       	push   0xc002210e
c0013a4b:	50                   	push   eax
c0013a4c:	e8 c3 fe ff ff       	call   c0013914 <findDataTable(unsigned char*, char*)>
c0013a51:	83 c4 10             	add    esp,0x10
c0013a54:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013a58:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0013a5d:	75 19                	jne    c0013a78 <scanMADT()+0xc8>
c0013a5f:	a1 88 45 02 c0       	mov    eax,ds:0xc0024588
c0013a64:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0013a6a:	83 e2 fe             	and    edx,0xfffffffe
c0013a6d:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0013a73:	e9 c8 02 00 00       	jmp    c0013d40 <scanMADT()+0x390>
c0013a78:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0013a80:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013a84:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013a87:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0013a8b:	0f 87 af 02 00 00    	ja     c0013d40 <scanMADT()+0x390>
c0013a91:	81 7c 24 1c f3 01 00 00 	cmp    DWORD PTR [esp+0x1c],0x1f3
c0013a99:	0f 87 a1 02 00 00    	ja     c0013d40 <scanMADT()+0x390>
c0013a9f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013aa3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013aa7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013aab:	8d 50 01             	lea    edx,[eax+0x1]
c0013aae:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013ab2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013ab6:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0013aba:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0013abe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013ac2:	8d 50 01             	lea    edx,[eax+0x1]
c0013ac5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013ac9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013acd:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0013ad1:	88 44 24 12          	mov    BYTE PTR [esp+0x12],al
c0013ad5:	80 7c 24 12 02       	cmp    BYTE PTR [esp+0x12],0x2
c0013ada:	0f 86 5f 02 00 00    	jbe    c0013d3f <scanMADT()+0x38f>
c0013ae0:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c0013ae5:	75 57                	jne    c0013b3e <scanMADT()+0x18e>
c0013ae7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013aeb:	8d 50 01             	lea    edx,[eax+0x1]
c0013aee:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013af2:	8a 15 60 4f 02 c0    	mov    dl,BYTE PTR ds:0xc0024f60
c0013af8:	0f b6 d2             	movzx  edx,dl
c0013afb:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0013aff:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0013b03:	88 82 a0 4f 02 c0    	mov    BYTE PTR [edx-0x3ffdb060],al
c0013b09:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013b0d:	8d 50 01             	lea    edx,[eax+0x1]
c0013b10:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013b14:	8a 15 60 4f 02 c0    	mov    dl,BYTE PTR ds:0xc0024f60
c0013b1a:	8d 4a 01             	lea    ecx,[edx+0x1]
c0013b1d:	88 0d 60 4f 02 c0    	mov    BYTE PTR ds:0xc0024f60,cl
c0013b23:	0f b6 d2             	movzx  edx,dl
c0013b26:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0013b2a:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0013b2e:	88 82 80 4f 02 c0    	mov    BYTE PTR [edx-0x3ffdb080],al
c0013b34:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0013b39:	e9 ea 01 00 00       	jmp    c0013d28 <scanMADT()+0x378>
c0013b3e:	80 7c 24 13 01       	cmp    BYTE PTR [esp+0x13],0x1
c0013b43:	0f 85 14 01 00 00    	jne    c0013c5d <scanMADT()+0x2ad>
c0013b49:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013b4d:	8d 50 01             	lea    edx,[eax+0x1]
c0013b50:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013b54:	8a 15 30 4e 02 c0    	mov    dl,BYTE PTR ds:0xc0024e30
c0013b5a:	0f b6 d2             	movzx  edx,dl
c0013b5d:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0013b61:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0013b65:	88 82 40 4e 02 c0    	mov    BYTE PTR [edx-0x3ffdb1c0],al
c0013b6b:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0013b6f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013b73:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013b77:	01 d0                	add    eax,edx
c0013b79:	83 c0 2c             	add    eax,0x2c
c0013b7c:	8a 00                	mov    al,BYTE PTR [eax]
c0013b7e:	0f b6 d0             	movzx  edx,al
c0013b81:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013b85:	8d 48 01             	lea    ecx,[eax+0x1]
c0013b88:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013b8c:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0013b90:	0f b6 c0             	movzx  eax,al
c0013b93:	c1 e0 08             	shl    eax,0x8
c0013b96:	89 d1                	mov    ecx,edx
c0013b98:	09 c1                	or     ecx,eax
c0013b9a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013b9e:	8d 50 02             	lea    edx,[eax+0x2]
c0013ba1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013ba5:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0013ba9:	0f b6 c0             	movzx  eax,al
c0013bac:	c1 e0 10             	shl    eax,0x10
c0013baf:	09 c1                	or     ecx,eax
c0013bb1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013bb5:	8d 50 03             	lea    edx,[eax+0x3]
c0013bb8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013bbc:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0013bc0:	0f b6 c0             	movzx  eax,al
c0013bc3:	c1 e0 18             	shl    eax,0x18
c0013bc6:	09 c1                	or     ecx,eax
c0013bc8:	89 ca                	mov    edx,ecx
c0013bca:	a0 30 4e 02 c0       	mov    al,ds:0xc0024e30
c0013bcf:	0f b6 c0             	movzx  eax,al
c0013bd2:	89 14 85 60 4e 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb1a0],edx
c0013bd9:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0013bde:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013be2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013be6:	01 d0                	add    eax,edx
c0013be8:	83 c0 2c             	add    eax,0x2c
c0013beb:	8a 00                	mov    al,BYTE PTR [eax]
c0013bed:	0f b6 d0             	movzx  edx,al
c0013bf0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013bf4:	8d 48 01             	lea    ecx,[eax+0x1]
c0013bf7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013bfb:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0013bff:	0f b6 c0             	movzx  eax,al
c0013c02:	c1 e0 08             	shl    eax,0x8
c0013c05:	89 d1                	mov    ecx,edx
c0013c07:	09 c1                	or     ecx,eax
c0013c09:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013c0d:	8d 50 02             	lea    edx,[eax+0x2]
c0013c10:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013c14:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0013c18:	0f b6 c0             	movzx  eax,al
c0013c1b:	c1 e0 10             	shl    eax,0x10
c0013c1e:	09 c1                	or     ecx,eax
c0013c20:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013c24:	8d 50 03             	lea    edx,[eax+0x3]
c0013c27:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013c2b:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0013c2f:	0f b6 c0             	movzx  eax,al
c0013c32:	c1 e0 18             	shl    eax,0x18
c0013c35:	09 c1                	or     ecx,eax
c0013c37:	89 ca                	mov    edx,ecx
c0013c39:	a0 30 4e 02 c0       	mov    al,ds:0xc0024e30
c0013c3e:	0f b6 c0             	movzx  eax,al
c0013c41:	89 14 85 e0 4e 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb120],edx
c0013c48:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0013c4d:	a0 30 4e 02 c0       	mov    al,ds:0xc0024e30
c0013c52:	40                   	inc    eax
c0013c53:	a2 30 4e 02 c0       	mov    ds:0xc0024e30,al
c0013c58:	e9 cb 00 00 00       	jmp    c0013d28 <scanMADT()+0x378>
c0013c5d:	80 7c 24 13 02       	cmp    BYTE PTR [esp+0x13],0x2
c0013c62:	0f 85 a6 00 00 00    	jne    c0013d0e <scanMADT()+0x35e>
c0013c68:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013c6c:	8d 50 01             	lea    edx,[eax+0x1]
c0013c6f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013c73:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013c77:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0013c7b:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0013c7f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013c83:	8d 50 01             	lea    edx,[eax+0x1]
c0013c86:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013c8a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013c8e:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0013c92:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0013c96:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013c9a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013c9e:	01 d0                	add    eax,edx
c0013ca0:	83 c0 2c             	add    eax,0x2c
c0013ca3:	8a 00                	mov    al,BYTE PTR [eax]
c0013ca5:	0f b6 d0             	movzx  edx,al
c0013ca8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013cac:	8d 48 01             	lea    ecx,[eax+0x1]
c0013caf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013cb3:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0013cb7:	0f b6 c0             	movzx  eax,al
c0013cba:	c1 e0 08             	shl    eax,0x8
c0013cbd:	89 d1                	mov    ecx,edx
c0013cbf:	09 c1                	or     ecx,eax
c0013cc1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013cc5:	8d 50 02             	lea    edx,[eax+0x2]
c0013cc8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013ccc:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0013cd0:	0f b6 c0             	movzx  eax,al
c0013cd3:	c1 e0 10             	shl    eax,0x10
c0013cd6:	09 c1                	or     ecx,eax
c0013cd8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013cdc:	8d 50 03             	lea    edx,[eax+0x3]
c0013cdf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013ce3:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0013ce7:	0f b6 c0             	movzx  eax,al
c0013cea:	c1 e0 18             	shl    eax,0x18
c0013ced:	09 c8                	or     eax,ecx
c0013cef:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013cf3:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0013cf8:	83 44 24 1c 02       	add    DWORD PTR [esp+0x1c],0x2
c0013cfd:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0013d02:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013d06:	88 90 e0 3c 02 c0    	mov    BYTE PTR [eax-0x3ffdc320],dl
c0013d0c:	eb 1a                	jmp    c0013d28 <scanMADT()+0x378>
c0013d0e:	80 7c 24 13 04       	cmp    BYTE PTR [esp+0x13],0x4
c0013d13:	75 07                	jne    c0013d1c <scanMADT()+0x36c>
c0013d15:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0013d1a:	eb 0c                	jmp    c0013d28 <scanMADT()+0x378>
c0013d1c:	80 7c 24 13 05       	cmp    BYTE PTR [esp+0x13],0x5
c0013d21:	75 05                	jne    c0013d28 <scanMADT()+0x378>
c0013d23:	83 44 24 1c 0a       	add    DWORD PTR [esp+0x1c],0xa
c0013d28:	0f b6 54 24 12       	movzx  edx,BYTE PTR [esp+0x12]
c0013d2d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013d31:	01 d0                	add    eax,edx
c0013d33:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013d37:	e9 44 fd ff ff       	jmp    c0013a80 <scanMADT()+0xd0>
c0013d3c:	90                   	nop
c0013d3d:	eb 01                	jmp    c0013d40 <scanMADT()+0x390>
c0013d3f:	90                   	nop
c0013d40:	83 c4 2c             	add    esp,0x2c
c0013d43:	c3                   	ret    

c0013d44 <ACPI::ACPI()>:
c0013d44:	83 ec 0c             	sub    esp,0xc
c0013d47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d4b:	83 ec 08             	sub    esp,0x8
c0013d4e:	68 13 21 02 c0       	push   0xc0022113
c0013d53:	50                   	push   eax
c0013d54:	e8 23 ca ff ff       	call   c001077c <Device::Device(char const*)>
c0013d59:	83 c4 10             	add    esp,0x10
c0013d5c:	ba 9c 22 02 c0       	mov    edx,0xc002229c
c0013d61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d65:	89 10                	mov    DWORD PTR [eax],edx
c0013d67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d6b:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0013d72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d76:	c7 80 5c 21 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x215c],0x0
c0013d80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d84:	c7 80 60 22 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x2260],0x0
c0013d8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d92:	c6 80 64 22 00 00 00 	mov    BYTE PTR [eax+0x2264],0x0
c0013d99:	e8 12 fc ff ff       	call   c00139b0 <scanMADT()>
c0013d9e:	90                   	nop
c0013d9f:	83 c4 0c             	add    esp,0xc
c0013da2:	c3                   	ret    
c0013da3:	90                   	nop

c0013da4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0013da4:	83 ec 2c             	sub    esp,0x2c
c0013da7:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0013dab:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0013daf:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0013db3:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0013db7:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0013dbc:	88 d0                	mov    al,dl
c0013dbe:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0013dc2:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0013dc7:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0013dcf:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013dd3:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0013dd9:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0013ddd:	0f 8d 97 00 00 00    	jge    c0013e7a <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c0013de3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013de7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013deb:	83 c2 2a             	add    edx,0x2a
c0013dee:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0013df2:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0013df7:	75 78                	jne    c0013e71 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0013df9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013dfd:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013e01:	83 c2 2a             	add    edx,0x2a
c0013e04:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0013e08:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0013e0c:	75 63                	jne    c0013e71 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0013e0e:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0013e13:	74 3a                	je     c0013e4f <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c0013e15:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013e19:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013e1d:	83 c2 2a             	add    edx,0x2a
c0013e20:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0013e24:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013e28:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013e2b:	39 c2                	cmp    edx,eax
c0013e2d:	74 10                	je     c0013e3f <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c0013e2f:	83 ec 0c             	sub    esp,0xc
c0013e32:	68 00 22 02 c0       	push   0xc0022200
c0013e37:	e8 06 1b 00 00       	call   c0015942 <Krnl::panic(char const*)>
c0013e3c:	83 c4 10             	add    esp,0x10
c0013e3f:	83 ec 0c             	sub    esp,0xc
c0013e42:	68 18 21 02 c0       	push   0xc0022118
c0013e47:	e8 f6 1a 00 00       	call   c0015942 <Krnl::panic(char const*)>
c0013e4c:	83 c4 10             	add    esp,0x10
c0013e4f:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0013e53:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013e57:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013e5b:	83 c2 2a             	add    edx,0x2a
c0013e5e:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c0013e62:	8b 02                	mov    eax,DWORD PTR [edx]
c0013e64:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0013e67:	89 01                	mov    DWORD PTR [ecx],eax
c0013e69:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0013e6c:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0013e71:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0013e75:	e9 55 ff ff ff       	jmp    c0013dcf <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c0013e7a:	90                   	nop
c0013e7b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013e7f:	83 c4 2c             	add    esp,0x2c
c0013e82:	c2 04 00             	ret    0x4
c0013e85:	90                   	nop

c0013e86 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0013e86:	56                   	push   esi
c0013e87:	53                   	push   ebx
c0013e88:	83 ec 14             	sub    esp,0x14
c0013e8b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013e8f:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0013e93:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0013e97:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0013e9c:	88 c8                	mov    al,cl
c0013e9e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0013ea2:	88 d0                	mov    al,dl
c0013ea4:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0013ea8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013eac:	8d b0 5c 01 00 00    	lea    esi,[eax+0x15c]
c0013eb2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013eb6:	8b 98 5c 21 00 00    	mov    ebx,DWORD PTR [eax+0x215c]
c0013ebc:	0f b6 4c 24 04       	movzx  ecx,BYTE PTR [esp+0x4]
c0013ec1:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0013ec6:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0013ecb:	83 ec 04             	sub    esp,0x4
c0013ece:	56                   	push   esi
c0013ecf:	53                   	push   ebx
c0013ed0:	51                   	push   ecx
c0013ed1:	52                   	push   edx
c0013ed2:	50                   	push   eax
c0013ed3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013ed7:	68 30 22 02 c0       	push   0xc0022230
c0013edc:	e8 96 b2 ff ff       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c0013ee1:	83 c4 20             	add    esp,0x20
c0013ee4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013ee8:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c0013eee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013ef2:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0013ef5:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0013ef9:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0013efd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f01:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0013f07:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013f0b:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0013f0e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013f12:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0013f17:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f1b:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c0013f21:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0013f25:	8d 48 01             	lea    ecx,[eax+0x1]
c0013f28:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f2c:	83 c2 2a             	add    edx,0x2a
c0013f2f:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0013f33:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f37:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c0013f3d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f41:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0013f44:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0013f48:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0013f4c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f50:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0013f56:	8d 50 01             	lea    edx,[eax+0x1]
c0013f59:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f5d:	89 90 5c 21 00 00    	mov    DWORD PTR [eax+0x215c],edx
c0013f63:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f67:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0013f6d:	3d 00 08 00 00       	cmp    eax,0x800
c0013f72:	75 10                	jne    c0013f84 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xfe>
c0013f74:	83 ec 0c             	sub    esp,0xc
c0013f77:	68 27 21 02 c0       	push   0xc0022127
c0013f7c:	e8 c1 19 00 00       	call   c0015942 <Krnl::panic(char const*)>
c0013f81:	83 c4 10             	add    esp,0x10
c0013f84:	90                   	nop
c0013f85:	83 c4 14             	add    esp,0x14
c0013f88:	5b                   	pop    ebx
c0013f89:	5e                   	pop    esi
c0013f8a:	c3                   	ret    
c0013f8b:	90                   	nop

c0013f8c <ACPI::setScreenBrightnessLevel(void*, int)>:
c0013f8c:	b8 00 00 00 00       	mov    eax,0x0
c0013f91:	c3                   	ret    

c0013f92 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c0013f92:	83 ec 1c             	sub    esp,0x1c
c0013f95:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013f99:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0013f9c:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0013fa0:	a1 88 45 02 c0       	mov    eax,ds:0xc0024588
c0013fa5:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0013faa:	83 ec 08             	sub    esp,0x8
c0013fad:	52                   	push   edx
c0013fae:	50                   	push   eax
c0013faf:	e8 66 76 ff ff       	call   c000b61a <Computer::readCMOS(unsigned char)>
c0013fb4:	83 c4 10             	add    esp,0x10
c0013fb7:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0013fbb:	a1 88 45 02 c0       	mov    eax,ds:0xc0024588
c0013fc0:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0013fc5:	83 ec 04             	sub    esp,0x4
c0013fc8:	6a 01                	push   0x1
c0013fca:	52                   	push   edx
c0013fcb:	50                   	push   eax
c0013fcc:	e8 5f 77 ff ff       	call   c000b730 <Computer::writeCMOS(unsigned char, unsigned char)>
c0013fd1:	83 c4 10             	add    esp,0x10
c0013fd4:	90                   	nop
c0013fd5:	83 c4 1c             	add    esp,0x1c
c0013fd8:	c3                   	ret    
c0013fd9:	90                   	nop

c0013fda <ACPI::open(int, int, void*)>:
c0013fda:	53                   	push   ebx
c0013fdb:	83 ec 18             	sub    esp,0x18
c0013fde:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fe2:	c6 80 64 22 00 00 01 	mov    BYTE PTR [eax+0x2264],0x1
c0013fe9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fed:	8a 80 64 22 00 00    	mov    al,BYTE PTR [eax+0x2264]
c0013ff3:	84 c0                	test   al,al
c0013ff5:	74 60                	je     c0014057 <ACPI::open(int, int, void*)+0x7d>
c0013ff7:	83 ec 0c             	sub    esp,0xc
c0013ffa:	68 58 01 00 00       	push   0x158
c0013fff:	e8 3e b0 ff ff       	call   c000f042 <operator new(unsigned long)>
c0014004:	83 c4 10             	add    esp,0x10
c0014007:	89 c3                	mov    ebx,eax
c0014009:	83 ec 0c             	sub    esp,0xc
c001400c:	53                   	push   ebx
c001400d:	e8 68 80 00 00       	call   c001c07a <PCI::PCI()>
c0014012:	83 c4 10             	add    esp,0x10
c0014015:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0014019:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001401d:	83 ec 08             	sub    esp,0x8
c0014020:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014024:	50                   	push   eax
c0014025:	e8 62 c5 ff ff       	call   c001058c <Device::addChild(Device*)>
c001402a:	83 c4 10             	add    esp,0x10
c001402d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014031:	8b 00                	mov    eax,DWORD PTR [eax]
c0014033:	83 c0 08             	add    eax,0x8
c0014036:	8b 00                	mov    eax,DWORD PTR [eax]
c0014038:	6a 00                	push   0x0
c001403a:	6a 00                	push   0x0
c001403c:	6a 00                	push   0x0
c001403e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014042:	ff d0                	call   eax
c0014044:	83 c4 10             	add    esp,0x10
c0014047:	83 ec 0c             	sub    esp,0xc
c001404a:	68 44 21 02 c0       	push   0xc0022144
c001404f:	e8 23 b1 ff ff       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c0014054:	83 c4 10             	add    esp,0x10
c0014057:	83 ec 0c             	sub    esp,0xc
c001405a:	68 4f 21 02 c0       	push   0xc002214f
c001405f:	e8 04 38 00 00       	call   c0017868 <Thr::loadKernelSymbolTable(char const*)>
c0014064:	83 c4 10             	add    esp,0x10
c0014067:	8b 1d 88 45 02 c0    	mov    ebx,DWORD PTR ds:0xc0024588
c001406d:	83 ec 08             	sub    esp,0x8
c0014070:	6a 01                	push   0x1
c0014072:	68 6d 21 02 c0       	push   0xc002216d
c0014077:	e8 ce 42 00 00       	call   c001834a <Thr::loadDLL(char const*, bool)>
c001407c:	83 c4 10             	add    esp,0x10
c001407f:	83 ec 08             	sub    esp,0x8
c0014082:	53                   	push   ebx
c0014083:	50                   	push   eax
c0014084:	e8 87 44 00 00       	call   c0018510 <Thr::executeDLL(unsigned long, void*)>
c0014089:	83 c4 10             	add    esp,0x10
c001408c:	a1 88 45 02 c0       	mov    eax,ds:0xc0024588
c0014091:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0014097:	83 e0 04             	and    eax,0x4
c001409a:	84 c0                	test   al,al
c001409c:	0f 84 cf 00 00 00    	je     c0014171 <ACPI::open(int, int, void*)+0x197>
c00140a2:	83 ec 0c             	sub    esp,0xc
c00140a5:	68 14 01 00 00       	push   0x114
c00140aa:	e8 93 af ff ff       	call   c000f042 <operator new(unsigned long)>
c00140af:	83 c4 10             	add    esp,0x10
c00140b2:	89 c3                	mov    ebx,eax
c00140b4:	a1 d4 59 02 c0       	mov    eax,ds:0xc00259d4
c00140b9:	83 ec 04             	sub    esp,0x4
c00140bc:	50                   	push   eax
c00140bd:	68 8a 21 02 c0       	push   0xc002218a
c00140c2:	53                   	push   ebx
c00140c3:	e8 e6 b5 ff ff       	call   c000f6ae <File::File(char const*, Process*)>
c00140c8:	83 c4 10             	add    esp,0x10
c00140cb:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00140cf:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00140d4:	74 17                	je     c00140ed <ACPI::open(int, int, void*)+0x113>
c00140d6:	83 ec 0c             	sub    esp,0xc
c00140d9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00140dd:	e8 9e b8 ff ff       	call   c000f980 <File::exists()>
c00140e2:	83 c4 10             	add    esp,0x10
c00140e5:	84 c0                	test   al,al
c00140e7:	74 04                	je     c00140ed <ACPI::open(int, int, void*)+0x113>
c00140e9:	b0 01                	mov    al,0x1
c00140eb:	eb 02                	jmp    c00140ef <ACPI::open(int, int, void*)+0x115>
c00140ed:	b0 00                	mov    al,0x0
c00140ef:	84 c0                	test   al,al
c00140f1:	74 25                	je     c0014118 <ACPI::open(int, int, void*)+0x13e>
c00140f3:	8b 1d 88 45 02 c0    	mov    ebx,DWORD PTR ds:0xc0024588
c00140f9:	83 ec 08             	sub    esp,0x8
c00140fc:	6a 01                	push   0x1
c00140fe:	68 8a 21 02 c0       	push   0xc002218a
c0014103:	e8 42 42 00 00       	call   c001834a <Thr::loadDLL(char const*, bool)>
c0014108:	83 c4 10             	add    esp,0x10
c001410b:	83 ec 08             	sub    esp,0x8
c001410e:	53                   	push   ebx
c001410f:	50                   	push   eax
c0014110:	e8 fb 43 00 00       	call   c0018510 <Thr::executeDLL(unsigned long, void*)>
c0014115:	83 c4 10             	add    esp,0x10
c0014118:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001411d:	74 1e                	je     c001413d <ACPI::open(int, int, void*)+0x163>
c001411f:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0014124:	74 17                	je     c001413d <ACPI::open(int, int, void*)+0x163>
c0014126:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001412a:	8b 00                	mov    eax,DWORD PTR [eax]
c001412c:	83 c0 08             	add    eax,0x8
c001412f:	8b 00                	mov    eax,DWORD PTR [eax]
c0014131:	83 ec 0c             	sub    esp,0xc
c0014134:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014138:	ff d0                	call   eax
c001413a:	83 c4 10             	add    esp,0x10
c001413d:	a1 28 4e 02 c0       	mov    eax,ds:0xc0024e28
c0014142:	83 ec 08             	sub    esp,0x8
c0014145:	68 a7 21 02 c0       	push   0xc00221a7
c001414a:	50                   	push   eax
c001414b:	e8 c4 f7 ff ff       	call   c0013914 <findDataTable(unsigned char*, char*)>
c0014150:	83 c4 10             	add    esp,0x10
c0014153:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014157:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001415c:	74 13                	je     c0014171 <ACPI::open(int, int, void*)+0x197>
c001415e:	83 ec 08             	sub    esp,0x8
c0014161:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0014165:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014169:	e8 24 fe ff ff       	call   c0013f92 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c001416e:	83 c4 10             	add    esp,0x10
c0014171:	b8 00 00 00 00       	mov    eax,0x0
c0014176:	83 c4 18             	add    esp,0x18
c0014179:	5b                   	pop    ebx
c001417a:	c3                   	ret    
c001417b:	90                   	nop

c001417c <ACPI::sleep()>:
c001417c:	83 ec 0c             	sub    esp,0xc
c001417f:	a1 00 4c 02 c0       	mov    eax,ds:0xc0024c00
c0014184:	85 c0                	test   eax,eax
c0014186:	74 07                	je     c001418f <ACPI::sleep()+0x13>
c0014188:	a1 00 4c 02 c0       	mov    eax,ds:0xc0024c00
c001418d:	ff d0                	call   eax
c001418f:	90                   	nop
c0014190:	83 c4 0c             	add    esp,0xc
c0014193:	c3                   	ret    

c0014194 <CPU::close(int, int, void*)>:
c0014194:	31 c0                	xor    eax,eax
c0014196:	c3                   	ret    

c0014197 <lookupAMDCPUName(unsigned char, unsigned char)>:
c0014197:	55                   	push   ebp
c0014198:	57                   	push   edi
c0014199:	56                   	push   esi
c001419a:	53                   	push   ebx
c001419b:	51                   	push   ecx
c001419c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00141a0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00141a4:	89 d6                	mov    esi,edx
c00141a6:	89 cd                	mov    ebp,ecx
c00141a8:	80 fa 04             	cmp    dl,0x4
c00141ab:	75 28                	jne    c00141d5 <lookupAMDCPUName(unsigned char, unsigned char)+0x3e>
c00141ad:	8d 41 f9             	lea    eax,[ecx-0x7]
c00141b0:	3c 03                	cmp    al,0x3
c00141b2:	0f 86 64 01 00 00    	jbe    c001431c <lookupAMDCPUName(unsigned char, unsigned char)+0x185>
c00141b8:	80 f9 03             	cmp    cl,0x3
c00141bb:	0f 84 5b 01 00 00    	je     c001431c <lookupAMDCPUName(unsigned char, unsigned char)+0x185>
c00141c1:	8d 79 f2             	lea    edi,[ecx-0xe]
c00141c4:	b8 b0 3e 02 c0       	mov    eax,0xc0023eb0
c00141c9:	89 fb                	mov    ebx,edi
c00141cb:	80 fb 01             	cmp    bl,0x1
c00141ce:	77 4e                	ja     c001421e <lookupAMDCPUName(unsigned char, unsigned char)+0x87>
c00141d0:	e9 61 01 00 00       	jmp    c0014336 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c00141d5:	80 fa 05             	cmp    dl,0x5
c00141d8:	75 4d                	jne    c0014227 <lookupAMDCPUName(unsigned char, unsigned char)+0x90>
c00141da:	b8 c0 3e 02 c0       	mov    eax,0xc0023ec0
c00141df:	80 f9 03             	cmp    cl,0x3
c00141e2:	0f 86 4e 01 00 00    	jbe    c0014336 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c00141e8:	8d 79 fa             	lea    edi,[ecx-0x6]
c00141eb:	b8 d0 3e 02 c0       	mov    eax,0xc0023ed0
c00141f0:	89 fb                	mov    ebx,edi
c00141f2:	80 fb 01             	cmp    bl,0x1
c00141f5:	0f 86 3b 01 00 00    	jbe    c0014336 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c00141fb:	b8 e0 3e 02 c0       	mov    eax,0xc0023ee0
c0014200:	80 f9 08             	cmp    cl,0x8
c0014203:	0f 84 2d 01 00 00    	je     c0014336 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c0014209:	89 cf                	mov    edi,ecx
c001420b:	b8 f0 3e 02 c0       	mov    eax,0xc0023ef0
c0014210:	83 e7 fb             	and    edi,0xfffffffb
c0014213:	89 fb                	mov    ebx,edi
c0014215:	80 fb 09             	cmp    bl,0x9
c0014218:	0f 84 18 01 00 00    	je     c0014336 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c001421e:	31 c0                	xor    eax,eax
c0014220:	89 eb                	mov    ebx,ebp
c0014222:	0f b6 fb             	movzx  edi,bl
c0014225:	eb 30                	jmp    c0014257 <lookupAMDCPUName(unsigned char, unsigned char)+0xc0>
c0014227:	31 c0                	xor    eax,eax
c0014229:	80 fa 06             	cmp    dl,0x6
c001422c:	75 f2                	jne    c0014220 <lookupAMDCPUName(unsigned char, unsigned char)+0x89>
c001422e:	80 f9 0a             	cmp    cl,0xa
c0014231:	77 ed                	ja     c0014220 <lookupAMDCPUName(unsigned char, unsigned char)+0x89>
c0014233:	bf de 05 00 00       	mov    edi,0x5de
c0014238:	0f a3 cf             	bt     edi,ecx
c001423b:	73 e3                	jae    c0014220 <lookupAMDCPUName(unsigned char, unsigned char)+0x89>
c001423d:	b8 00 3f 02 c0       	mov    eax,0xc0023f00
c0014242:	e9 ef 00 00 00       	jmp    c0014336 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c0014247:	39 c7                	cmp    edi,eax
c0014249:	0f 84 d4 00 00 00    	je     c0014323 <lookupAMDCPUName(unsigned char, unsigned char)+0x18c>
c001424f:	40                   	inc    eax
c0014250:	3d d0 00 00 00       	cmp    eax,0xd0
c0014255:	74 09                	je     c0014260 <lookupAMDCPUName(unsigned char, unsigned char)+0xc9>
c0014257:	89 f3                	mov    ebx,esi
c0014259:	80 fb 0f             	cmp    bl,0xf
c001425c:	75 f1                	jne    c001424f <lookupAMDCPUName(unsigned char, unsigned char)+0xb8>
c001425e:	eb e7                	jmp    c0014247 <lookupAMDCPUName(unsigned char, unsigned char)+0xb0>
c0014260:	80 fa 10             	cmp    dl,0x10
c0014263:	75 19                	jne    c001427e <lookupAMDCPUName(unsigned char, unsigned char)+0xe7>
c0014265:	8d 41 fc             	lea    eax,[ecx-0x4]
c0014268:	83 e0 fb             	and    eax,0xfffffffb
c001426b:	3c 02                	cmp    al,0x2
c001426d:	0f 86 b7 00 00 00    	jbe    c001432a <lookupAMDCPUName(unsigned char, unsigned char)+0x193>
c0014273:	80 f9 02             	cmp    cl,0x2
c0014276:	0f 84 ae 00 00 00    	je     c001432a <lookupAMDCPUName(unsigned char, unsigned char)+0x193>
c001427c:	eb 13                	jmp    c0014291 <lookupAMDCPUName(unsigned char, unsigned char)+0xfa>
c001427e:	80 fa 11             	cmp    dl,0x11
c0014281:	75 0e                	jne    c0014291 <lookupAMDCPUName(unsigned char, unsigned char)+0xfa>
c0014283:	b8 10 3f 02 c0       	mov    eax,0xc0023f10
c0014288:	80 f9 03             	cmp    cl,0x3
c001428b:	0f 84 a5 00 00 00    	je     c0014336 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c0014291:	80 fa 12             	cmp    dl,0x12
c0014294:	75 0e                	jne    c00142a4 <lookupAMDCPUName(unsigned char, unsigned char)+0x10d>
c0014296:	b8 20 3f 02 c0       	mov    eax,0xc0023f20
c001429b:	80 f9 01             	cmp    cl,0x1
c001429e:	0f 84 92 00 00 00    	je     c0014336 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c00142a4:	80 fa 14             	cmp    dl,0x14
c00142a7:	be 01 00 00 00       	mov    esi,0x1
c00142ac:	0f 94 c3             	sete   bl
c00142af:	80 f9 13             	cmp    cl,0x13
c00142b2:	77 0c                	ja     c00142c0 <lookupAMDCPUName(unsigned char, unsigned char)+0x129>
c00142b4:	be 04 00 09 00       	mov    esi,0x90004
c00142b9:	d3 ee                	shr    esi,cl
c00142bb:	f7 d6                	not    esi
c00142bd:	83 e6 01             	and    esi,0x1
c00142c0:	8d 41 ff             	lea    eax,[ecx-0x1]
c00142c3:	3c 01                	cmp    al,0x1
c00142c5:	b8 30 3f 02 c0       	mov    eax,0xc0023f30
c00142ca:	0f 96 44 24 03       	setbe  BYTE PTR [esp+0x3]
c00142cf:	84 5c 24 03          	test   BYTE PTR [esp+0x3],bl
c00142d3:	75 61                	jne    c0014336 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c00142d5:	80 fa 15             	cmp    dl,0x15
c00142d8:	75 1f                	jne    c00142f9 <lookupAMDCPUName(unsigned char, unsigned char)+0x162>
c00142da:	b8 40 3f 02 c0       	mov    eax,0xc0023f40
c00142df:	80 f9 01             	cmp    cl,0x1
c00142e2:	74 52                	je     c0014336 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c00142e4:	89 f3                	mov    ebx,esi
c00142e6:	b8 50 3f 02 c0       	mov    eax,0xc0023f50
c00142eb:	84 db                	test   bl,bl
c00142ed:	74 47                	je     c0014336 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c00142ef:	b8 60 3f 02 c0       	mov    eax,0xc0023f60
c00142f4:	80 f9 30             	cmp    cl,0x30
c00142f7:	74 3d                	je     c0014336 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c00142f9:	80 fa 16             	cmp    dl,0x16
c00142fc:	0f 94 c2             	sete   dl
c00142ff:	84 c9                	test   cl,cl
c0014301:	75 09                	jne    c001430c <lookupAMDCPUName(unsigned char, unsigned char)+0x175>
c0014303:	b8 70 3f 02 c0       	mov    eax,0xc0023f70
c0014308:	84 d2                	test   dl,dl
c001430a:	75 2a                	jne    c0014336 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c001430c:	80 f9 30             	cmp    cl,0x30
c001430f:	75 20                	jne    c0014331 <lookupAMDCPUName(unsigned char, unsigned char)+0x19a>
c0014311:	b8 80 3f 02 c0       	mov    eax,0xc0023f80
c0014316:	84 d2                	test   dl,dl
c0014318:	75 1c                	jne    c0014336 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c001431a:	eb 15                	jmp    c0014331 <lookupAMDCPUName(unsigned char, unsigned char)+0x19a>
c001431c:	b8 a0 3e 02 c0       	mov    eax,0xc0023ea0
c0014321:	eb 13                	jmp    c0014336 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c0014323:	b8 10 3f 02 c0       	mov    eax,0xc0023f10
c0014328:	eb 0c                	jmp    c0014336 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c001432a:	b8 20 3f 02 c0       	mov    eax,0xc0023f20
c001432f:	eb 05                	jmp    c0014336 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c0014331:	b8 b2 25 02 c0       	mov    eax,0xc00225b2
c0014336:	5a                   	pop    edx
c0014337:	5b                   	pop    ebx
c0014338:	5e                   	pop    esi
c0014339:	5f                   	pop    edi
c001433a:	5d                   	pop    ebp
c001433b:	c3                   	ret    

c001433c <lookupIntelCPUName(unsigned char, unsigned char)>:
c001433c:	53                   	push   ebx
c001433d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0014341:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014345:	80 f9 04             	cmp    cl,0x4
c0014348:	75 6a                	jne    c00143b4 <lookupIntelCPUName(unsigned char, unsigned char)+0x78>
c001434a:	b8 00 3d 02 c0       	mov    eax,0xc0023d00
c001434f:	80 fa 01             	cmp    dl,0x1
c0014352:	0f 86 9b 02 00 00    	jbe    c00145f3 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014358:	b8 10 3d 02 c0       	mov    eax,0xc0023d10
c001435d:	80 fa 02             	cmp    dl,0x2
c0014360:	0f 84 8d 02 00 00    	je     c00145f3 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014366:	b8 20 3d 02 c0       	mov    eax,0xc0023d20
c001436b:	80 fa 03             	cmp    dl,0x3
c001436e:	0f 84 7f 02 00 00    	je     c00145f3 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014374:	b8 30 3d 02 c0       	mov    eax,0xc0023d30
c0014379:	80 fa 04             	cmp    dl,0x4
c001437c:	0f 84 71 02 00 00    	je     c00145f3 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014382:	b8 40 3d 02 c0       	mov    eax,0xc0023d40
c0014387:	80 fa 05             	cmp    dl,0x5
c001438a:	0f 84 63 02 00 00    	je     c00145f3 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014390:	b8 20 3d 02 c0       	mov    eax,0xc0023d20
c0014395:	80 fa 07             	cmp    dl,0x7
c0014398:	0f 84 55 02 00 00    	je     c00145f3 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c001439e:	8d 5a f8             	lea    ebx,[edx-0x8]
c00143a1:	b8 50 3d 02 c0       	mov    eax,0xc0023d50
c00143a6:	80 fb 01             	cmp    bl,0x1
c00143a9:	0f 87 e0 01 00 00    	ja     c001458f <lookupIntelCPUName(unsigned char, unsigned char)+0x253>
c00143af:	e9 3f 02 00 00       	jmp    c00145f3 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00143b4:	80 f9 05             	cmp    cl,0x5
c00143b7:	75 3e                	jne    c00143f7 <lookupIntelCPUName(unsigned char, unsigned char)+0xbb>
c00143b9:	8d 5a ff             	lea    ebx,[edx-0x1]
c00143bc:	b8 60 3d 02 c0       	mov    eax,0xc0023d60
c00143c1:	80 fb 02             	cmp    bl,0x2
c00143c4:	0f 86 29 02 00 00    	jbe    c00145f3 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00143ca:	80 fa 04             	cmp    dl,0x4
c00143cd:	0f 84 f1 01 00 00    	je     c00145c4 <lookupIntelCPUName(unsigned char, unsigned char)+0x288>
c00143d3:	80 fa 07             	cmp    dl,0x7
c00143d6:	0f 84 17 02 00 00    	je     c00145f3 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00143dc:	b8 70 3d 02 c0       	mov    eax,0xc0023d70
c00143e1:	80 fa 08             	cmp    dl,0x8
c00143e4:	0f 84 09 02 00 00    	je     c00145f3 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00143ea:	b8 80 3d 02 c0       	mov    eax,0xc0023d80
c00143ef:	80 fa 09             	cmp    dl,0x9
c00143f2:	e9 96 01 00 00       	jmp    c001458d <lookupIntelCPUName(unsigned char, unsigned char)+0x251>
c00143f7:	80 f9 06             	cmp    cl,0x6
c00143fa:	0f 85 80 01 00 00    	jne    c0014580 <lookupIntelCPUName(unsigned char, unsigned char)+0x244>
c0014400:	b8 90 3d 02 c0       	mov    eax,0xc0023d90
c0014405:	80 fa 01             	cmp    dl,0x1
c0014408:	0f 84 e5 01 00 00    	je     c00145f3 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c001440e:	8d 42 fb             	lea    eax,[edx-0x5]
c0014411:	3c 01                	cmp    al,0x1
c0014413:	0f 86 b2 01 00 00    	jbe    c00145cb <lookupIntelCPUName(unsigned char, unsigned char)+0x28f>
c0014419:	80 fa 03             	cmp    dl,0x3
c001441c:	0f 84 a9 01 00 00    	je     c00145cb <lookupIntelCPUName(unsigned char, unsigned char)+0x28f>
c0014422:	8d 5a f9             	lea    ebx,[edx-0x7]
c0014425:	b8 b0 3d 02 c0       	mov    eax,0xc0023db0
c001442a:	80 fb 01             	cmp    bl,0x1
c001442d:	0f 86 c0 01 00 00    	jbe    c00145f3 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014433:	80 fa 09             	cmp    dl,0x9
c0014436:	0f 84 96 01 00 00    	je     c00145d2 <lookupIntelCPUName(unsigned char, unsigned char)+0x296>
c001443c:	8d 5a f6             	lea    ebx,[edx-0xa]
c001443f:	80 fb 01             	cmp    bl,0x1
c0014442:	0f 86 ab 01 00 00    	jbe    c00145f3 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014448:	b8 c0 3d 02 c0       	mov    eax,0xc0023dc0
c001444d:	80 fa 0d             	cmp    dl,0xd
c0014450:	0f 84 9d 01 00 00    	je     c00145f3 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014456:	b8 d0 3d 02 c0       	mov    eax,0xc0023dd0
c001445b:	80 fa 0e             	cmp    dl,0xe
c001445e:	0f 84 8f 01 00 00    	je     c00145f3 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014464:	b8 e0 3d 02 c0       	mov    eax,0xc0023de0
c0014469:	80 fa 0f             	cmp    dl,0xf
c001446c:	0f 84 81 01 00 00    	je     c00145f3 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014472:	b8 c0 3d 02 c0       	mov    eax,0xc0023dc0
c0014477:	80 fa 15             	cmp    dl,0x15
c001447a:	0f 84 73 01 00 00    	je     c00145f3 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014480:	8d 5a ea             	lea    ebx,[edx-0x16]
c0014483:	b8 e0 3d 02 c0       	mov    eax,0xc0023de0
c0014488:	80 fb 01             	cmp    bl,0x1
c001448b:	0f 86 62 01 00 00    	jbe    c00145f3 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014491:	80 fa 1a             	cmp    dl,0x1a
c0014494:	0f 84 3f 01 00 00    	je     c00145d9 <lookupIntelCPUName(unsigned char, unsigned char)+0x29d>
c001449a:	80 fa 1c             	cmp    dl,0x1c
c001449d:	0f 84 3d 01 00 00    	je     c00145e0 <lookupIntelCPUName(unsigned char, unsigned char)+0x2a4>
c00144a3:	80 fa 1d             	cmp    dl,0x1d
c00144a6:	0f 84 47 01 00 00    	je     c00145f3 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00144ac:	b8 10 3e 02 c0       	mov    eax,0xc0023e10
c00144b1:	80 fa 25             	cmp    dl,0x25
c00144b4:	0f 84 39 01 00 00    	je     c00145f3 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00144ba:	8d 5a da             	lea    ebx,[edx-0x26]
c00144bd:	b8 00 3e 02 c0       	mov    eax,0xc0023e00
c00144c2:	80 fb 01             	cmp    bl,0x1
c00144c5:	0f 86 28 01 00 00    	jbe    c00145f3 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00144cb:	b8 20 3e 02 c0       	mov    eax,0xc0023e20
c00144d0:	80 fa 2a             	cmp    dl,0x2a
c00144d3:	0f 84 1a 01 00 00    	je     c00145f3 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00144d9:	b8 10 3e 02 c0       	mov    eax,0xc0023e10
c00144de:	80 fa 2c             	cmp    dl,0x2c
c00144e1:	0f 84 0c 01 00 00    	je     c00145f3 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00144e7:	b8 20 3e 02 c0       	mov    eax,0xc0023e20
c00144ec:	80 fa 2d             	cmp    dl,0x2d
c00144ef:	0f 84 fe 00 00 00    	je     c00145f3 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00144f5:	b8 f0 3d 02 c0       	mov    eax,0xc0023df0
c00144fa:	80 fa 2e             	cmp    dl,0x2e
c00144fd:	0f 84 f0 00 00 00    	je     c00145f3 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014503:	b8 10 3e 02 c0       	mov    eax,0xc0023e10
c0014508:	80 fa 2f             	cmp    dl,0x2f
c001450b:	0f 84 e2 00 00 00    	je     c00145f3 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014511:	8d 5a cb             	lea    ebx,[edx-0x35]
c0014514:	b8 00 3e 02 c0       	mov    eax,0xc0023e00
c0014519:	80 fb 01             	cmp    bl,0x1
c001451c:	0f 86 d1 00 00 00    	jbe    c00145f3 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014522:	b8 30 3e 02 c0       	mov    eax,0xc0023e30
c0014527:	80 fa 37             	cmp    dl,0x37
c001452a:	0f 84 c3 00 00 00    	je     c00145f3 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014530:	b8 40 3e 02 c0       	mov    eax,0xc0023e40
c0014535:	80 fa 3a             	cmp    dl,0x3a
c0014538:	0f 84 b5 00 00 00    	je     c00145f3 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c001453e:	b8 50 3e 02 c0       	mov    eax,0xc0023e50
c0014543:	80 fa 3c             	cmp    dl,0x3c
c0014546:	0f 84 a7 00 00 00    	je     c00145f3 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c001454c:	b8 60 3e 02 c0       	mov    eax,0xc0023e60
c0014551:	80 fa 3d             	cmp    dl,0x3d
c0014554:	0f 84 99 00 00 00    	je     c00145f3 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c001455a:	b8 40 3e 02 c0       	mov    eax,0xc0023e40
c001455f:	80 fa 3e             	cmp    dl,0x3e
c0014562:	0f 84 8b 00 00 00    	je     c00145f3 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014568:	8d 42 bb             	lea    eax,[edx-0x45]
c001456b:	3c 01                	cmp    al,0x1
c001456d:	76 78                	jbe    c00145e7 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ab>
c001456f:	80 fa 3f             	cmp    dl,0x3f
c0014572:	74 73                	je     c00145e7 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ab>
c0014574:	80 fa 4a             	cmp    dl,0x4a
c0014577:	74 75                	je     c00145ee <lookupIntelCPUName(unsigned char, unsigned char)+0x2b2>
c0014579:	80 fa 4d             	cmp    dl,0x4d
c001457c:	75 11                	jne    c001458f <lookupIntelCPUName(unsigned char, unsigned char)+0x253>
c001457e:	eb 6e                	jmp    c00145ee <lookupIntelCPUName(unsigned char, unsigned char)+0x2b2>
c0014580:	80 f9 0b             	cmp    cl,0xb
c0014583:	75 0a                	jne    c001458f <lookupIntelCPUName(unsigned char, unsigned char)+0x253>
c0014585:	b8 70 3e 02 c0       	mov    eax,0xc0023e70
c001458a:	80 fa 01             	cmp    dl,0x1
c001458d:	74 64                	je     c00145f3 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c001458f:	80 f9 0f             	cmp    cl,0xf
c0014592:	b8 80 3e 02 c0       	mov    eax,0xc0023e80
c0014597:	0f 94 c1             	sete   cl
c001459a:	80 fa 02             	cmp    dl,0x2
c001459d:	0f 96 c3             	setbe  bl
c00145a0:	84 cb                	test   bl,cl
c00145a2:	75 4f                	jne    c00145f3 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00145a4:	8d 42 fd             	lea    eax,[edx-0x3]
c00145a7:	3c 01                	cmp    al,0x1
c00145a9:	0f 96 c0             	setbe  al
c00145ac:	80 fa 06             	cmp    dl,0x6
c00145af:	0f 94 c2             	sete   dl
c00145b2:	09 c2                	or     edx,eax
c00145b4:	b8 b2 25 02 c0       	mov    eax,0xc00225b2
c00145b9:	84 ca                	test   dl,cl
c00145bb:	74 36                	je     c00145f3 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00145bd:	b8 90 3e 02 c0       	mov    eax,0xc0023e90
c00145c2:	eb 2f                	jmp    c00145f3 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00145c4:	b8 70 3d 02 c0       	mov    eax,0xc0023d70
c00145c9:	eb 28                	jmp    c00145f3 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00145cb:	b8 a0 3d 02 c0       	mov    eax,0xc0023da0
c00145d0:	eb 21                	jmp    c00145f3 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00145d2:	b8 c0 3d 02 c0       	mov    eax,0xc0023dc0
c00145d7:	eb 1a                	jmp    c00145f3 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00145d9:	b8 f0 3d 02 c0       	mov    eax,0xc0023df0
c00145de:	eb 13                	jmp    c00145f3 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00145e0:	b8 00 3e 02 c0       	mov    eax,0xc0023e00
c00145e5:	eb 0c                	jmp    c00145f3 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00145e7:	b8 50 3e 02 c0       	mov    eax,0xc0023e50
c00145ec:	eb 05                	jmp    c00145f3 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00145ee:	b8 30 3e 02 c0       	mov    eax,0xc0023e30
c00145f3:	5b                   	pop    ebx
c00145f4:	c3                   	ret    

c00145f5 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>:
c00145f5:	60                   	pusha  
c00145f6:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00145fa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00145fe:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014602:	9c                   	pushf  
c0014603:	fa                   	cli    
c0014604:	0f 09                	wbinvd 
c0014606:	0f 30                	wrmsr  
c0014608:	9d                   	popf   
c0014609:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001460d:	89 02                	mov    DWORD PTR [edx],eax
c001460f:	61                   	popa   
c0014610:	c3                   	ret    

c0014611 <AMD_K6_read_msr(unsigned int, REGS*)>:
c0014611:	60                   	pusha  
c0014612:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0014616:	9c                   	pushf  
c0014617:	fa                   	cli    
c0014618:	0f 09                	wbinvd 
c001461a:	31 c0                	xor    eax,eax
c001461c:	31 d2                	xor    edx,edx
c001461e:	0f 32                	rdmsr  
c0014620:	9d                   	popf   
c0014621:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014625:	89 02                	mov    DWORD PTR [edx],eax
c0014627:	61                   	popa   
c0014628:	c3                   	ret    

c0014629 <AMD_K6_writeback(int, int, int)>:
c0014629:	56                   	push   esi
c001462a:	53                   	push   ebx
c001462b:	83 ec 10             	sub    esp,0x10
c001462e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014632:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0014637:	75 5d                	jne    c0014696 <AMD_K6_writeback(int, int, int)+0x6d>
c0014639:	83 f8 08             	cmp    eax,0x8
c001463c:	75 09                	jne    c0014647 <AMD_K6_writeback(int, int, int)+0x1e>
c001463e:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0014643:	7e 13                	jle    c0014658 <AMD_K6_writeback(int, int, int)+0x2f>
c0014645:	eb 30                	jmp    c0014677 <AMD_K6_writeback(int, int, int)+0x4e>
c0014647:	83 f8 06             	cmp    eax,0x6
c001464a:	7c 4a                	jl     c0014696 <AMD_K6_writeback(int, int, int)+0x6d>
c001464c:	83 f8 07             	cmp    eax,0x7
c001464f:	7e 07                	jle    c0014658 <AMD_K6_writeback(int, int, int)+0x2f>
c0014651:	83 f8 09             	cmp    eax,0x9
c0014654:	74 21                	je     c0014677 <AMD_K6_writeback(int, int, int)+0x4e>
c0014656:	eb 3e                	jmp    c0014696 <AMD_K6_writeback(int, int, int)+0x6d>
c0014658:	89 e6                	mov    esi,esp
c001465a:	8b 1d c4 45 02 c0    	mov    ebx,DWORD PTR ds:0xc00245c4
c0014660:	c1 eb 15             	shr    ebx,0x15
c0014663:	56                   	push   esi
c0014664:	68 82 00 00 c0       	push   0xc0000082
c0014669:	e8 a3 ff ff ff       	call   c0014611 <AMD_K6_read_msr(unsigned int, REGS*)>
c001466e:	56                   	push   esi
c001466f:	83 e3 7e             	and    ebx,0x7e
c0014672:	6a 00                	push   0x0
c0014674:	53                   	push   ebx
c0014675:	eb 12                	jmp    c0014689 <AMD_K6_writeback(int, int, int)+0x60>
c0014677:	89 e3                	mov    ebx,esp
c0014679:	53                   	push   ebx
c001467a:	68 82 00 00 c0       	push   0xc0000082
c001467f:	e8 8d ff ff ff       	call   c0014611 <AMD_K6_read_msr(unsigned int, REGS*)>
c0014684:	53                   	push   ebx
c0014685:	6a 00                	push   0x0
c0014687:	6a 00                	push   0x0
c0014689:	68 82 00 00 c0       	push   0xc0000082
c001468e:	e8 62 ff ff ff       	call   c00145f5 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>
c0014693:	83 c4 18             	add    esp,0x18
c0014696:	83 c4 10             	add    esp,0x10
c0014699:	5b                   	pop    ebx
c001469a:	5e                   	pop    esi
c001469b:	c3                   	ret    

c001469c <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c001469c:	55                   	push   ebp
c001469d:	57                   	push   edi
c001469e:	56                   	push   esi
c001469f:	53                   	push   ebx
c00146a0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00146a4:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00146a8:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00146ac:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00146b0:	39 05 a0 3f 02 c0    	cmp    DWORD PTR ds:0xc0023fa0,eax
c00146b6:	75 23                	jne    c00146db <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c00146b8:	a1 cc 4f 02 c0       	mov    eax,ds:0xc0024fcc
c00146bd:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00146c1:	89 06                	mov    DWORD PTR [esi],eax
c00146c3:	a1 c8 4f 02 c0       	mov    eax,ds:0xc0024fc8
c00146c8:	89 07                	mov    DWORD PTR [edi],eax
c00146ca:	a1 c4 4f 02 c0       	mov    eax,ds:0xc0024fc4
c00146cf:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00146d2:	a1 c0 4f 02 c0       	mov    eax,ds:0xc0024fc0
c00146d7:	89 02                	mov    DWORD PTR [edx],eax
c00146d9:	eb 3f                	jmp    c001471a <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c00146db:	31 c9                	xor    ecx,ecx
c00146dd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00146e1:	0f a2                	cpuid  
c00146e3:	89 06                	mov    DWORD PTR [esi],eax
c00146e5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00146e9:	89 1f                	mov    DWORD PTR [edi],ebx
c00146eb:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c00146ee:	89 10                	mov    DWORD PTR [eax],edx
c00146f0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00146f4:	a3 a0 3f 02 c0       	mov    ds:0xc0023fa0,eax
c00146f9:	8b 06                	mov    eax,DWORD PTR [esi]
c00146fb:	a3 cc 4f 02 c0       	mov    ds:0xc0024fcc,eax
c0014700:	8b 07                	mov    eax,DWORD PTR [edi]
c0014702:	a3 c8 4f 02 c0       	mov    ds:0xc0024fc8,eax
c0014707:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001470a:	a3 c4 4f 02 c0       	mov    ds:0xc0024fc4,eax
c001470f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014713:	8b 00                	mov    eax,DWORD PTR [eax]
c0014715:	a3 c0 4f 02 c0       	mov    ds:0xc0024fc0,eax
c001471a:	5b                   	pop    ebx
c001471b:	5e                   	pop    esi
c001471c:	5f                   	pop    edi
c001471d:	5d                   	pop    ebp
c001471e:	c3                   	ret    

c001471f <cpuidCheckEDX(unsigned int)>:
c001471f:	83 ec 10             	sub    esp,0x10
c0014722:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0014726:	50                   	push   eax
c0014727:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001472b:	50                   	push   eax
c001472c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0014730:	50                   	push   eax
c0014731:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0014735:	50                   	push   eax
c0014736:	6a 01                	push   0x1
c0014738:	e8 5f ff ff ff       	call   c001469c <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001473d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014741:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0014745:	0f 95 c0             	setne  al
c0014748:	83 c4 24             	add    esp,0x24
c001474b:	c3                   	ret    

c001474c <cpuidCheckECX(unsigned int)>:
c001474c:	83 ec 10             	sub    esp,0x10
c001474f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0014753:	50                   	push   eax
c0014754:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0014758:	50                   	push   eax
c0014759:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001475d:	50                   	push   eax
c001475e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0014762:	50                   	push   eax
c0014763:	6a 01                	push   0x1
c0014765:	e8 32 ff ff ff       	call   c001469c <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001476a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001476e:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0014772:	0f 95 c0             	setne  al
c0014775:	83 c4 24             	add    esp,0x24
c0014778:	c3                   	ret    

c0014779 <cpuidCheckExtendedEBX(unsigned int)>:
c0014779:	83 ec 10             	sub    esp,0x10
c001477c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0014780:	50                   	push   eax
c0014781:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0014785:	50                   	push   eax
c0014786:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001478a:	50                   	push   eax
c001478b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001478f:	50                   	push   eax
c0014790:	6a 07                	push   0x7
c0014792:	e8 05 ff ff ff       	call   c001469c <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0014797:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001479b:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c001479f:	0f 95 c0             	setne  al
c00147a2:	83 c4 24             	add    esp,0x24
c00147a5:	c3                   	ret    

c00147a6 <cpuidCheckExtendedECX(unsigned int)>:
c00147a6:	83 ec 10             	sub    esp,0x10
c00147a9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00147ad:	50                   	push   eax
c00147ae:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00147b2:	50                   	push   eax
c00147b3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00147b7:	50                   	push   eax
c00147b8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00147bc:	50                   	push   eax
c00147bd:	6a 07                	push   0x7
c00147bf:	e8 d8 fe ff ff       	call   c001469c <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00147c4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00147c8:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c00147cc:	0f 95 c0             	setne  al
c00147cf:	83 c4 24             	add    esp,0x24
c00147d2:	c3                   	ret    

c00147d3 <getCPUNumber()>:
c00147d3:	31 c0                	xor    eax,eax
c00147d5:	c3                   	ret    

c00147d6 <thisCPU()>:
c00147d6:	e8 f8 ff ff ff       	call   c00147d3 <getCPUNumber()>
c00147db:	8b 15 88 45 02 c0    	mov    edx,DWORD PTR ds:0xc0024588
c00147e1:	8b 84 82 60 01 00 00 	mov    eax,DWORD PTR [edx+eax*4+0x160]
c00147e8:	c3                   	ret    
c00147e9:	90                   	nop

c00147ea <CPU::CPU()>:
c00147ea:	83 ec 0c             	sub    esp,0xc
c00147ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147f1:	83 ec 08             	sub    esp,0x8
c00147f4:	68 b2 25 02 c0       	push   0xc00225b2
c00147f9:	50                   	push   eax
c00147fa:	e8 7d bf ff ff       	call   c001077c <Device::Device(char const*)>
c00147ff:	83 c4 10             	add    esp,0x10
c0014802:	ba 8c 26 02 c0       	mov    edx,0xc002268c
c0014807:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001480b:	89 10                	mov    DWORD PTR [eax],edx
c001480d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014811:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c001481b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001481f:	05 78 01 00 00       	add    eax,0x178
c0014824:	83 ec 0c             	sub    esp,0xc
c0014827:	50                   	push   eax
c0014828:	e8 ed 6f ff ff       	call   c000b81a <GDT::GDT()>
c001482d:	83 c4 10             	add    esp,0x10
c0014830:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014834:	05 7c 09 00 00       	add    eax,0x97c
c0014839:	83 ec 0c             	sub    esp,0xc
c001483c:	50                   	push   eax
c001483d:	e8 38 72 ff ff       	call   c000ba7a <IDT::IDT()>
c0014842:	83 c4 10             	add    esp,0x10
c0014845:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014849:	05 7c 11 00 00       	add    eax,0x117c
c001484e:	83 ec 0c             	sub    esp,0xc
c0014851:	50                   	push   eax
c0014852:	e8 95 92 ff ff       	call   c000daec <TSS::TSS()>
c0014857:	83 c4 10             	add    esp,0x10
c001485a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001485e:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0014865:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014869:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0014873:	90                   	nop
c0014874:	83 c4 0c             	add    esp,0xc
c0014877:	c3                   	ret    

c0014878 <CPU::displayFeatures()>:
c0014878:	53                   	push   ebx
c0014879:	83 ec 10             	sub    esp,0x10
c001487c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014880:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0014886:	68 c0 22 02 c0       	push   0xc00222c0
c001488b:	e8 e7 a8 ff ff       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c0014890:	59                   	pop    ecx
c0014891:	58                   	pop    eax
c0014892:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c0014898:	50                   	push   eax
c0014899:	68 d1 22 02 c0       	push   0xc00222d1
c001489e:	e8 d4 a8 ff ff       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c00148a3:	58                   	pop    eax
c00148a4:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00148aa:	c1 e8 0e             	shr    eax,0xe
c00148ad:	5a                   	pop    edx
c00148ae:	0f b6 c0             	movzx  eax,al
c00148b1:	50                   	push   eax
c00148b2:	68 e2 22 02 c0       	push   0xc00222e2
c00148b7:	e8 bb a8 ff ff       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c00148bc:	59                   	pop    ecx
c00148bd:	58                   	pop    eax
c00148be:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00148c4:	66 c1 e8 06          	shr    ax,0x6
c00148c8:	0f b6 c0             	movzx  eax,al
c00148cb:	50                   	push   eax
c00148cc:	68 f3 22 02 c0       	push   0xc00222f3
c00148d1:	e8 a1 a8 ff ff       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c00148d6:	c7 04 24 06 27 02 c0 	mov    DWORD PTR [esp],0xc0022706
c00148dd:	e8 95 a8 ff ff       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c00148e2:	83 c4 10             	add    esp,0x10
c00148e5:	b8 ef 0f 02 c0       	mov    eax,0xc0020fef
c00148ea:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c00148f1:	74 05                	je     c00148f8 <CPU::displayFeatures()+0x80>
c00148f3:	b8 eb 0f 02 c0       	mov    eax,0xc0020feb
c00148f8:	52                   	push   edx
c00148f9:	52                   	push   edx
c00148fa:	50                   	push   eax
c00148fb:	68 04 23 02 c0       	push   0xc0022304
c0014900:	e8 72 a8 ff ff       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c0014905:	83 c4 10             	add    esp,0x10
c0014908:	b8 eb 0f 02 c0       	mov    eax,0xc0020feb
c001490d:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c0014914:	78 05                	js     c001491b <CPU::displayFeatures()+0xa3>
c0014916:	b8 ef 0f 02 c0       	mov    eax,0xc0020fef
c001491b:	51                   	push   ecx
c001491c:	51                   	push   ecx
c001491d:	50                   	push   eax
c001491e:	68 1b 23 02 c0       	push   0xc002231b
c0014923:	e8 4f a8 ff ff       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c0014928:	83 c4 10             	add    esp,0x10
c001492b:	b8 eb 0f 02 c0       	mov    eax,0xc0020feb
c0014930:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0014937:	75 05                	jne    c001493e <CPU::displayFeatures()+0xc6>
c0014939:	b8 ef 0f 02 c0       	mov    eax,0xc0020fef
c001493e:	52                   	push   edx
c001493f:	52                   	push   edx
c0014940:	50                   	push   eax
c0014941:	68 32 23 02 c0       	push   0xc0022332
c0014946:	e8 2c a8 ff ff       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c001494b:	83 c4 10             	add    esp,0x10
c001494e:	b8 eb 0f 02 c0       	mov    eax,0xc0020feb
c0014953:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c001495a:	75 05                	jne    c0014961 <CPU::displayFeatures()+0xe9>
c001495c:	b8 ef 0f 02 c0       	mov    eax,0xc0020fef
c0014961:	51                   	push   ecx
c0014962:	51                   	push   ecx
c0014963:	50                   	push   eax
c0014964:	68 49 23 02 c0       	push   0xc0022349
c0014969:	e8 09 a8 ff ff       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c001496e:	83 c4 10             	add    esp,0x10
c0014971:	b8 eb 0f 02 c0       	mov    eax,0xc0020feb
c0014976:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c001497d:	75 05                	jne    c0014984 <CPU::displayFeatures()+0x10c>
c001497f:	b8 ef 0f 02 c0       	mov    eax,0xc0020fef
c0014984:	52                   	push   edx
c0014985:	52                   	push   edx
c0014986:	50                   	push   eax
c0014987:	68 60 23 02 c0       	push   0xc0022360
c001498c:	e8 e6 a7 ff ff       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c0014991:	83 c4 10             	add    esp,0x10
c0014994:	b8 eb 0f 02 c0       	mov    eax,0xc0020feb
c0014999:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c00149a0:	75 05                	jne    c00149a7 <CPU::displayFeatures()+0x12f>
c00149a2:	b8 ef 0f 02 c0       	mov    eax,0xc0020fef
c00149a7:	51                   	push   ecx
c00149a8:	51                   	push   ecx
c00149a9:	50                   	push   eax
c00149aa:	68 77 23 02 c0       	push   0xc0022377
c00149af:	e8 c3 a7 ff ff       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c00149b4:	83 c4 10             	add    esp,0x10
c00149b7:	b8 eb 0f 02 c0       	mov    eax,0xc0020feb
c00149bc:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c00149c3:	75 05                	jne    c00149ca <CPU::displayFeatures()+0x152>
c00149c5:	b8 ef 0f 02 c0       	mov    eax,0xc0020fef
c00149ca:	52                   	push   edx
c00149cb:	52                   	push   edx
c00149cc:	50                   	push   eax
c00149cd:	68 8e 23 02 c0       	push   0xc002238e
c00149d2:	e8 a0 a7 ff ff       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c00149d7:	83 c4 10             	add    esp,0x10
c00149da:	b8 eb 0f 02 c0       	mov    eax,0xc0020feb
c00149df:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c00149e6:	75 05                	jne    c00149ed <CPU::displayFeatures()+0x175>
c00149e8:	b8 ef 0f 02 c0       	mov    eax,0xc0020fef
c00149ed:	51                   	push   ecx
c00149ee:	51                   	push   ecx
c00149ef:	50                   	push   eax
c00149f0:	68 a5 23 02 c0       	push   0xc00223a5
c00149f5:	e8 7d a7 ff ff       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c00149fa:	83 c4 10             	add    esp,0x10
c00149fd:	b8 eb 0f 02 c0       	mov    eax,0xc0020feb
c0014a02:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c0014a09:	75 05                	jne    c0014a10 <CPU::displayFeatures()+0x198>
c0014a0b:	b8 ef 0f 02 c0       	mov    eax,0xc0020fef
c0014a10:	52                   	push   edx
c0014a11:	52                   	push   edx
c0014a12:	50                   	push   eax
c0014a13:	68 bc 23 02 c0       	push   0xc00223bc
c0014a18:	e8 5a a7 ff ff       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c0014a1d:	83 c4 10             	add    esp,0x10
c0014a20:	b8 eb 0f 02 c0       	mov    eax,0xc0020feb
c0014a25:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c0014a2c:	75 05                	jne    c0014a33 <CPU::displayFeatures()+0x1bb>
c0014a2e:	b8 ef 0f 02 c0       	mov    eax,0xc0020fef
c0014a33:	51                   	push   ecx
c0014a34:	51                   	push   ecx
c0014a35:	50                   	push   eax
c0014a36:	68 d3 23 02 c0       	push   0xc00223d3
c0014a3b:	e8 37 a7 ff ff       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c0014a40:	83 c4 10             	add    esp,0x10
c0014a43:	b8 eb 0f 02 c0       	mov    eax,0xc0020feb
c0014a48:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0014a4f:	75 05                	jne    c0014a56 <CPU::displayFeatures()+0x1de>
c0014a51:	b8 ef 0f 02 c0       	mov    eax,0xc0020fef
c0014a56:	52                   	push   edx
c0014a57:	52                   	push   edx
c0014a58:	50                   	push   eax
c0014a59:	68 ea 23 02 c0       	push   0xc00223ea
c0014a5e:	e8 14 a7 ff ff       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c0014a63:	83 c4 10             	add    esp,0x10
c0014a66:	b8 eb 0f 02 c0       	mov    eax,0xc0020feb
c0014a6b:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c0014a72:	75 05                	jne    c0014a79 <CPU::displayFeatures()+0x201>
c0014a74:	b8 ef 0f 02 c0       	mov    eax,0xc0020fef
c0014a79:	51                   	push   ecx
c0014a7a:	51                   	push   ecx
c0014a7b:	50                   	push   eax
c0014a7c:	68 01 24 02 c0       	push   0xc0022401
c0014a81:	e8 f1 a6 ff ff       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c0014a86:	83 c4 10             	add    esp,0x10
c0014a89:	b8 eb 0f 02 c0       	mov    eax,0xc0020feb
c0014a8e:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c0014a95:	75 05                	jne    c0014a9c <CPU::displayFeatures()+0x224>
c0014a97:	b8 ef 0f 02 c0       	mov    eax,0xc0020fef
c0014a9c:	52                   	push   edx
c0014a9d:	52                   	push   edx
c0014a9e:	50                   	push   eax
c0014a9f:	68 18 24 02 c0       	push   0xc0022418
c0014aa4:	e8 ce a6 ff ff       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c0014aa9:	83 c4 10             	add    esp,0x10
c0014aac:	b8 eb 0f 02 c0       	mov    eax,0xc0020feb
c0014ab1:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c0014ab8:	78 05                	js     c0014abf <CPU::displayFeatures()+0x247>
c0014aba:	b8 ef 0f 02 c0       	mov    eax,0xc0020fef
c0014abf:	51                   	push   ecx
c0014ac0:	51                   	push   ecx
c0014ac1:	50                   	push   eax
c0014ac2:	68 2f 24 02 c0       	push   0xc002242f
c0014ac7:	e8 ab a6 ff ff       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c0014acc:	83 c4 10             	add    esp,0x10
c0014acf:	b8 eb 0f 02 c0       	mov    eax,0xc0020feb
c0014ad4:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c0014adb:	75 05                	jne    c0014ae2 <CPU::displayFeatures()+0x26a>
c0014add:	b8 ef 0f 02 c0       	mov    eax,0xc0020fef
c0014ae2:	52                   	push   edx
c0014ae3:	52                   	push   edx
c0014ae4:	50                   	push   eax
c0014ae5:	68 46 24 02 c0       	push   0xc0022446
c0014aea:	e8 88 a6 ff ff       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c0014aef:	83 c4 18             	add    esp,0x18
c0014af2:	5b                   	pop    ebx
c0014af3:	c3                   	ret    

c0014af4 <CPU::detectFeatures()>:
c0014af4:	55                   	push   ebp
c0014af5:	57                   	push   edi
c0014af6:	56                   	push   esi
c0014af7:	53                   	push   ebx
c0014af8:	83 ec 50             	sub    esp,0x50
c0014afb:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0014aff:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0014b09:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0014b10:	6a 0d                	push   0xd
c0014b12:	6a 00                	push   0x0
c0014b14:	8d bb 5f 01 00 00    	lea    edi,[ebx+0x15f]
c0014b1a:	57                   	push   edi
c0014b1b:	e8 9a bb fe ff       	call   c00006ba <memset>
c0014b20:	a1 88 45 02 c0       	mov    eax,ds:0xc0024588
c0014b25:	83 c4 10             	add    esp,0x10
c0014b28:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0014b2f:	0f 84 04 09 00 00    	je     c0015439 <CPU::detectFeatures()+0x945>
c0014b35:	83 ec 0c             	sub    esp,0xc
c0014b38:	6a 10                	push   0x10
c0014b3a:	e8 e0 fb ff ff       	call   c001471f <cpuidCheckEDX(unsigned int)>
c0014b3f:	83 e0 01             	and    eax,0x1
c0014b42:	8d 14 00             	lea    edx,[eax+eax*1]
c0014b45:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0014b4b:	83 e0 fd             	and    eax,0xfffffffd
c0014b4e:	09 d0                	or     eax,edx
c0014b50:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014b56:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0014b5d:	e8 bd fb ff ff       	call   c001471f <cpuidCheckEDX(unsigned int)>
c0014b62:	83 e0 01             	and    eax,0x1
c0014b65:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0014b6c:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0014b72:	83 e0 fb             	and    eax,0xfffffffb
c0014b75:	09 d0                	or     eax,edx
c0014b77:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014b7d:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0014b84:	e8 96 fb ff ff       	call   c001471f <cpuidCheckEDX(unsigned int)>
c0014b89:	83 e0 01             	and    eax,0x1
c0014b8c:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0014b93:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0014b99:	83 e0 f7             	and    eax,0xfffffff7
c0014b9c:	09 d0                	or     eax,edx
c0014b9e:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014ba4:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0014bab:	e8 6f fb ff ff       	call   c001471f <cpuidCheckEDX(unsigned int)>
c0014bb0:	83 e0 01             	and    eax,0x1
c0014bb3:	c1 e0 04             	shl    eax,0x4
c0014bb6:	88 c2                	mov    dl,al
c0014bb8:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0014bbe:	83 e0 ef             	and    eax,0xffffffef
c0014bc1:	09 d0                	or     eax,edx
c0014bc3:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014bc9:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0014bd0:	e8 4a fb ff ff       	call   c001471f <cpuidCheckEDX(unsigned int)>
c0014bd5:	83 e0 01             	and    eax,0x1
c0014bd8:	c1 e0 05             	shl    eax,0x5
c0014bdb:	88 c2                	mov    dl,al
c0014bdd:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0014be3:	83 e0 df             	and    eax,0xffffffdf
c0014be6:	09 d0                	or     eax,edx
c0014be8:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014bee:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0014bf5:	e8 25 fb ff ff       	call   c001471f <cpuidCheckEDX(unsigned int)>
c0014bfa:	83 e0 01             	and    eax,0x1
c0014bfd:	8d 14 00             	lea    edx,[eax+eax*1]
c0014c00:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0014c06:	83 e0 fd             	and    eax,0xfffffffd
c0014c09:	09 d0                	or     eax,edx
c0014c0b:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0014c11:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0014c18:	e8 02 fb ff ff       	call   c001471f <cpuidCheckEDX(unsigned int)>
c0014c1d:	83 e0 01             	and    eax,0x1
c0014c20:	c1 e0 06             	shl    eax,0x6
c0014c23:	88 c2                	mov    dl,al
c0014c25:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0014c2b:	83 e0 bf             	and    eax,0xffffffbf
c0014c2e:	09 d0                	or     eax,edx
c0014c30:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0014c36:	58                   	pop    eax
c0014c37:	8d 74 24 28          	lea    esi,[esp+0x28]
c0014c3b:	56                   	push   esi
c0014c3c:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0014c40:	55                   	push   ebp
c0014c41:	8d 44 24 28          	lea    eax,[esp+0x28]
c0014c45:	50                   	push   eax
c0014c46:	8d 54 24 28          	lea    edx,[esp+0x28]
c0014c4a:	52                   	push   edx
c0014c4b:	6a 00                	push   0x0
c0014c4d:	e8 4a fa ff ff       	call   c001469c <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0014c52:	83 c4 1c             	add    esp,0x1c
c0014c55:	6a 04                	push   0x4
c0014c57:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0014c5b:	50                   	push   eax
c0014c5c:	57                   	push   edi
c0014c5d:	e8 22 ba fe ff       	call   c0000684 <memcpy>
c0014c62:	83 c4 0c             	add    esp,0xc
c0014c65:	8d 83 63 01 00 00    	lea    eax,[ebx+0x163]
c0014c6b:	6a 04                	push   0x4
c0014c6d:	56                   	push   esi
c0014c6e:	50                   	push   eax
c0014c6f:	e8 10 ba fe ff       	call   c0000684 <memcpy>
c0014c74:	83 c4 0c             	add    esp,0xc
c0014c77:	8d 83 67 01 00 00    	lea    eax,[ebx+0x167]
c0014c7d:	6a 04                	push   0x4
c0014c7f:	55                   	push   ebp
c0014c80:	50                   	push   eax
c0014c81:	e8 fe b9 fe ff       	call   c0000684 <memcpy>
c0014c86:	58                   	pop    eax
c0014c87:	5a                   	pop    edx
c0014c88:	68 5d 24 02 c0       	push   0xc002245d
c0014c8d:	57                   	push   edi
c0014c8e:	e8 17 bb fe ff       	call   c00007aa <strcmp>
c0014c93:	83 c4 10             	add    esp,0x10
c0014c96:	85 c0                	test   eax,eax
c0014c98:	75 0f                	jne    c0014ca9 <CPU::detectFeatures()+0x1b5>
c0014c9a:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0014ca4:	e9 22 02 00 00       	jmp    c0014ecb <CPU::detectFeatures()+0x3d7>
c0014ca9:	50                   	push   eax
c0014caa:	50                   	push   eax
c0014cab:	68 6a 24 02 c0       	push   0xc002246a
c0014cb0:	57                   	push   edi
c0014cb1:	e8 f4 ba fe ff       	call   c00007aa <strcmp>
c0014cb6:	83 c4 10             	add    esp,0x10
c0014cb9:	85 c0                	test   eax,eax
c0014cbb:	74 dd                	je     c0014c9a <CPU::detectFeatures()+0x1a6>
c0014cbd:	51                   	push   ecx
c0014cbe:	51                   	push   ecx
c0014cbf:	68 77 24 02 c0       	push   0xc0022477
c0014cc4:	57                   	push   edi
c0014cc5:	e8 e0 ba fe ff       	call   c00007aa <strcmp>
c0014cca:	83 c4 10             	add    esp,0x10
c0014ccd:	85 c0                	test   eax,eax
c0014ccf:	74 2a                	je     c0014cfb <CPU::detectFeatures()+0x207>
c0014cd1:	52                   	push   edx
c0014cd2:	52                   	push   edx
c0014cd3:	68 84 24 02 c0       	push   0xc0022484
c0014cd8:	57                   	push   edi
c0014cd9:	e8 cc ba fe ff       	call   c00007aa <strcmp>
c0014cde:	83 c4 10             	add    esp,0x10
c0014ce1:	85 c0                	test   eax,eax
c0014ce3:	74 16                	je     c0014cfb <CPU::detectFeatures()+0x207>
c0014ce5:	50                   	push   eax
c0014ce6:	50                   	push   eax
c0014ce7:	68 91 24 02 c0       	push   0xc0022491
c0014cec:	57                   	push   edi
c0014ced:	e8 b8 ba fe ff       	call   c00007aa <strcmp>
c0014cf2:	83 c4 10             	add    esp,0x10
c0014cf5:	85 c0                	test   eax,eax
c0014cf7:	74 48                	je     c0014d41 <CPU::detectFeatures()+0x24d>
c0014cf9:	eb 0f                	jmp    c0014d0a <CPU::detectFeatures()+0x216>
c0014cfb:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0014d05:	e9 c1 01 00 00       	jmp    c0014ecb <CPU::detectFeatures()+0x3d7>
c0014d0a:	50                   	push   eax
c0014d0b:	50                   	push   eax
c0014d0c:	68 9e 24 02 c0       	push   0xc002249e
c0014d11:	57                   	push   edi
c0014d12:	e8 93 ba fe ff       	call   c00007aa <strcmp>
c0014d17:	83 c4 10             	add    esp,0x10
c0014d1a:	85 c0                	test   eax,eax
c0014d1c:	74 23                	je     c0014d41 <CPU::detectFeatures()+0x24d>
c0014d1e:	50                   	push   eax
c0014d1f:	50                   	push   eax
c0014d20:	68 ab 24 02 c0       	push   0xc00224ab
c0014d25:	57                   	push   edi
c0014d26:	e8 7f ba fe ff       	call   c00007aa <strcmp>
c0014d2b:	83 c4 10             	add    esp,0x10
c0014d2e:	85 c0                	test   eax,eax
c0014d30:	75 1e                	jne    c0014d50 <CPU::detectFeatures()+0x25c>
c0014d32:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0014d3c:	e9 8a 01 00 00       	jmp    c0014ecb <CPU::detectFeatures()+0x3d7>
c0014d41:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0014d4b:	e9 7b 01 00 00       	jmp    c0014ecb <CPU::detectFeatures()+0x3d7>
c0014d50:	50                   	push   eax
c0014d51:	50                   	push   eax
c0014d52:	68 b8 24 02 c0       	push   0xc00224b8
c0014d57:	57                   	push   edi
c0014d58:	e8 4d ba fe ff       	call   c00007aa <strcmp>
c0014d5d:	83 c4 10             	add    esp,0x10
c0014d60:	85 c0                	test   eax,eax
c0014d62:	75 0f                	jne    c0014d73 <CPU::detectFeatures()+0x27f>
c0014d64:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0014d6e:	e9 58 01 00 00       	jmp    c0014ecb <CPU::detectFeatures()+0x3d7>
c0014d73:	50                   	push   eax
c0014d74:	50                   	push   eax
c0014d75:	68 77 24 02 c0       	push   0xc0022477
c0014d7a:	57                   	push   edi
c0014d7b:	e8 2a ba fe ff       	call   c00007aa <strcmp>
c0014d80:	83 c4 10             	add    esp,0x10
c0014d83:	85 c0                	test   eax,eax
c0014d85:	75 0f                	jne    c0014d96 <CPU::detectFeatures()+0x2a2>
c0014d87:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0014d91:	e9 35 01 00 00       	jmp    c0014ecb <CPU::detectFeatures()+0x3d7>
c0014d96:	50                   	push   eax
c0014d97:	50                   	push   eax
c0014d98:	68 c5 24 02 c0       	push   0xc00224c5
c0014d9d:	57                   	push   edi
c0014d9e:	e8 07 ba fe ff       	call   c00007aa <strcmp>
c0014da3:	83 c4 10             	add    esp,0x10
c0014da6:	85 c0                	test   eax,eax
c0014da8:	75 0f                	jne    c0014db9 <CPU::detectFeatures()+0x2c5>
c0014daa:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0014db4:	e9 12 01 00 00       	jmp    c0014ecb <CPU::detectFeatures()+0x3d7>
c0014db9:	51                   	push   ecx
c0014dba:	51                   	push   ecx
c0014dbb:	68 d2 24 02 c0       	push   0xc00224d2
c0014dc0:	57                   	push   edi
c0014dc1:	e8 e4 b9 fe ff       	call   c00007aa <strcmp>
c0014dc6:	83 c4 10             	add    esp,0x10
c0014dc9:	85 c0                	test   eax,eax
c0014dcb:	75 0f                	jne    c0014ddc <CPU::detectFeatures()+0x2e8>
c0014dcd:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0014dd7:	e9 ef 00 00 00       	jmp    c0014ecb <CPU::detectFeatures()+0x3d7>
c0014ddc:	52                   	push   edx
c0014ddd:	52                   	push   edx
c0014dde:	68 df 24 02 c0       	push   0xc00224df
c0014de3:	57                   	push   edi
c0014de4:	e8 c1 b9 fe ff       	call   c00007aa <strcmp>
c0014de9:	83 c4 10             	add    esp,0x10
c0014dec:	85 c0                	test   eax,eax
c0014dee:	75 0f                	jne    c0014dff <CPU::detectFeatures()+0x30b>
c0014df0:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0014dfa:	e9 cc 00 00 00       	jmp    c0014ecb <CPU::detectFeatures()+0x3d7>
c0014dff:	50                   	push   eax
c0014e00:	50                   	push   eax
c0014e01:	68 ec 24 02 c0       	push   0xc00224ec
c0014e06:	57                   	push   edi
c0014e07:	e8 9e b9 fe ff       	call   c00007aa <strcmp>
c0014e0c:	83 c4 10             	add    esp,0x10
c0014e0f:	85 c0                	test   eax,eax
c0014e11:	75 0f                	jne    c0014e22 <CPU::detectFeatures()+0x32e>
c0014e13:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0014e1d:	e9 a9 00 00 00       	jmp    c0014ecb <CPU::detectFeatures()+0x3d7>
c0014e22:	50                   	push   eax
c0014e23:	50                   	push   eax
c0014e24:	68 f9 24 02 c0       	push   0xc00224f9
c0014e29:	57                   	push   edi
c0014e2a:	e8 7b b9 fe ff       	call   c00007aa <strcmp>
c0014e2f:	83 c4 10             	add    esp,0x10
c0014e32:	85 c0                	test   eax,eax
c0014e34:	75 0f                	jne    c0014e45 <CPU::detectFeatures()+0x351>
c0014e36:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0014e40:	e9 86 00 00 00       	jmp    c0014ecb <CPU::detectFeatures()+0x3d7>
c0014e45:	50                   	push   eax
c0014e46:	50                   	push   eax
c0014e47:	68 06 25 02 c0       	push   0xc0022506
c0014e4c:	57                   	push   edi
c0014e4d:	e8 58 b9 fe ff       	call   c00007aa <strcmp>
c0014e52:	83 c4 10             	add    esp,0x10
c0014e55:	85 c0                	test   eax,eax
c0014e57:	75 0c                	jne    c0014e65 <CPU::detectFeatures()+0x371>
c0014e59:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0014e63:	eb 66                	jmp    c0014ecb <CPU::detectFeatures()+0x3d7>
c0014e65:	50                   	push   eax
c0014e66:	50                   	push   eax
c0014e67:	68 13 25 02 c0       	push   0xc0022513
c0014e6c:	57                   	push   edi
c0014e6d:	e8 38 b9 fe ff       	call   c00007aa <strcmp>
c0014e72:	83 c4 10             	add    esp,0x10
c0014e75:	85 c0                	test   eax,eax
c0014e77:	75 0c                	jne    c0014e85 <CPU::detectFeatures()+0x391>
c0014e79:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0014e83:	eb 46                	jmp    c0014ecb <CPU::detectFeatures()+0x3d7>
c0014e85:	50                   	push   eax
c0014e86:	50                   	push   eax
c0014e87:	68 20 25 02 c0       	push   0xc0022520
c0014e8c:	57                   	push   edi
c0014e8d:	e8 18 b9 fe ff       	call   c00007aa <strcmp>
c0014e92:	83 c4 10             	add    esp,0x10
c0014e95:	85 c0                	test   eax,eax
c0014e97:	74 e0                	je     c0014e79 <CPU::detectFeatures()+0x385>
c0014e99:	50                   	push   eax
c0014e9a:	50                   	push   eax
c0014e9b:	68 2d 25 02 c0       	push   0xc002252d
c0014ea0:	57                   	push   edi
c0014ea1:	e8 04 b9 fe ff       	call   c00007aa <strcmp>
c0014ea6:	83 c4 10             	add    esp,0x10
c0014ea9:	85 c0                	test   eax,eax
c0014eab:	74 cc                	je     c0014e79 <CPU::detectFeatures()+0x385>
c0014ead:	51                   	push   ecx
c0014eae:	51                   	push   ecx
c0014eaf:	68 3a 25 02 c0       	push   0xc002253a
c0014eb4:	57                   	push   edi
c0014eb5:	e8 f0 b8 fe ff       	call   c00007aa <strcmp>
c0014eba:	83 c4 10             	add    esp,0x10
c0014ebd:	85 c0                	test   eax,eax
c0014ebf:	74 b8                	je     c0014e79 <CPU::detectFeatures()+0x385>
c0014ec1:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0014ecb:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0014ed0:	0f 86 be 00 00 00    	jbe    c0014f94 <CPU::detectFeatures()+0x4a0>
c0014ed6:	83 ec 0c             	sub    esp,0xc
c0014ed9:	68 80 00 00 00       	push   0x80
c0014ede:	e8 96 f8 ff ff       	call   c0014779 <cpuidCheckExtendedEBX(unsigned int)>
c0014ee3:	83 e0 01             	and    eax,0x1
c0014ee6:	c1 e0 06             	shl    eax,0x6
c0014ee9:	88 c2                	mov    dl,al
c0014eeb:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0014ef1:	83 e0 bf             	and    eax,0xffffffbf
c0014ef4:	09 d0                	or     eax,edx
c0014ef6:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014efc:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0014f03:	e8 71 f8 ff ff       	call   c0014779 <cpuidCheckExtendedEBX(unsigned int)>
c0014f08:	83 e0 01             	and    eax,0x1
c0014f0b:	c1 e0 04             	shl    eax,0x4
c0014f0e:	88 c2                	mov    dl,al
c0014f10:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0014f16:	83 e0 ef             	and    eax,0xffffffef
c0014f19:	09 d0                	or     eax,edx
c0014f1b:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0014f21:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0014f28:	e8 4c f8 ff ff       	call   c0014779 <cpuidCheckExtendedEBX(unsigned int)>
c0014f2d:	c1 e0 07             	shl    eax,0x7
c0014f30:	88 c2                	mov    dl,al
c0014f32:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0014f38:	83 e0 7f             	and    eax,0x7f
c0014f3b:	09 d0                	or     eax,edx
c0014f3d:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014f43:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0014f4a:	e8 57 f8 ff ff       	call   c00147a6 <cpuidCheckExtendedECX(unsigned int)>
c0014f4f:	83 e0 01             	and    eax,0x1
c0014f52:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0014f59:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0014f5f:	83 e0 f7             	and    eax,0xfffffff7
c0014f62:	09 d0                	or     eax,edx
c0014f64:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0014f6a:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0014f71:	e8 30 f8 ff ff       	call   c00147a6 <cpuidCheckExtendedECX(unsigned int)>
c0014f76:	83 c4 10             	add    esp,0x10
c0014f79:	83 e0 01             	and    eax,0x1
c0014f7c:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0014f83:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0014f89:	83 e0 fb             	and    eax,0xfffffffb
c0014f8c:	09 d0                	or     eax,edx
c0014f8e:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0014f94:	83 ec 0c             	sub    esp,0xc
c0014f97:	56                   	push   esi
c0014f98:	55                   	push   ebp
c0014f99:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0014f9d:	57                   	push   edi
c0014f9e:	8d 44 24 28          	lea    eax,[esp+0x28]
c0014fa2:	50                   	push   eax
c0014fa3:	6a 01                	push   0x1
c0014fa5:	e8 f2 f6 ff ff       	call   c001469c <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0014faa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014fae:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c0014fb4:	88 c1                	mov    cl,al
c0014fb6:	83 e2 f0             	and    edx,0xfffffff0
c0014fb9:	83 e1 0f             	and    ecx,0xf
c0014fbc:	09 ca                	or     edx,ecx
c0014fbe:	88 c1                	mov    cl,al
c0014fc0:	c0 e9 04             	shr    cl,0x4
c0014fc3:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0014fc9:	0f b6 d1             	movzx  edx,cl
c0014fcc:	c1 e2 06             	shl    edx,0x6
c0014fcf:	88 4c 24 2f          	mov    BYTE PTR [esp+0x2f],cl
c0014fd3:	89 d5                	mov    ebp,edx
c0014fd5:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0014fdb:	66 81 e2 3f c0       	and    dx,0xc03f
c0014fe0:	83 c4 20             	add    esp,0x20
c0014fe3:	09 ea                	or     edx,ebp
c0014fe5:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0014fec:	89 c2                	mov    edx,eax
c0014fee:	c1 ea 08             	shr    edx,0x8
c0014ff1:	8a 8b 5d 01 00 00    	mov    cl,BYTE PTR [ebx+0x15d]
c0014ff7:	83 e2 0f             	and    edx,0xf
c0014ffa:	83 e1 3f             	and    ecx,0x3f
c0014ffd:	89 d5                	mov    ebp,edx
c0014fff:	c1 e5 06             	shl    ebp,0x6
c0015002:	09 cd                	or     ebp,ecx
c0015004:	89 e9                	mov    ecx,ebp
c0015006:	88 8b 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],cl
c001500c:	88 d1                	mov    cl,dl
c001500e:	c0 e9 02             	shr    cl,0x2
c0015011:	89 cd                	mov    ebp,ecx
c0015013:	8a 8b 5e 01 00 00    	mov    cl,BYTE PTR [ebx+0x15e]
c0015019:	83 e1 c0             	and    ecx,0xffffffc0
c001501c:	09 cd                	or     ebp,ecx
c001501e:	89 e9                	mov    ecx,ebp
c0015020:	89 c5                	mov    ebp,eax
c0015022:	c1 ed 0c             	shr    ebp,0xc
c0015025:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c001502b:	83 e5 03             	and    ebp,0x3
c001502e:	8a 8b 5c 01 00 00    	mov    cl,BYTE PTR [ebx+0x15c]
c0015034:	c1 e5 04             	shl    ebp,0x4
c0015037:	83 e1 cf             	and    ecx,0xffffffcf
c001503a:	09 cd                	or     ebp,ecx
c001503c:	80 fa 06             	cmp    dl,0x6
c001503f:	89 e9                	mov    ecx,ebp
c0015041:	88 8b 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],cl
c0015047:	74 05                	je     c001504e <CPU::detectFeatures()+0x55a>
c0015049:	80 fa 0f             	cmp    dl,0xf
c001504c:	75 5d                	jne    c00150ab <CPU::detectFeatures()+0x5b7>
c001504e:	89 c5                	mov    ebp,eax
c0015050:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0015054:	c1 ed 10             	shr    ebp,0x10
c0015057:	c1 e5 04             	shl    ebp,0x4
c001505a:	09 e9                	or     ecx,ebp
c001505c:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0015062:	0f b6 c9             	movzx  ecx,cl
c0015065:	c1 e1 06             	shl    ecx,0x6
c0015068:	66 81 e5 3f c0       	and    bp,0xc03f
c001506d:	09 e9                	or     ecx,ebp
c001506f:	80 fa 0f             	cmp    dl,0xf
c0015072:	66 89 8b 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],cx
c0015079:	75 30                	jne    c00150ab <CPU::detectFeatures()+0x5b7>
c001507b:	c1 e8 14             	shr    eax,0x14
c001507e:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c0015084:	83 c0 0f             	add    eax,0xf
c0015087:	83 e2 3f             	and    edx,0x3f
c001508a:	88 c1                	mov    cl,al
c001508c:	c1 e1 06             	shl    ecx,0x6
c001508f:	c0 e8 02             	shr    al,0x2
c0015092:	09 ca                	or     edx,ecx
c0015094:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c001509a:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c00150a0:	83 e2 c0             	and    edx,0xffffffc0
c00150a3:	09 d0                	or     eax,edx
c00150a5:	88 83 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],al
c00150ab:	83 ec 0c             	sub    esp,0xc
c00150ae:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c00150b5:	56                   	push   esi
c00150b6:	8d 44 24 28          	lea    eax,[esp+0x28]
c00150ba:	50                   	push   eax
c00150bb:	57                   	push   edi
c00150bc:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c00150c0:	55                   	push   ebp
c00150c1:	68 00 00 00 80       	push   0x80000000
c00150c6:	e8 d1 f5 ff ff       	call   c001469c <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00150cb:	83 c4 20             	add    esp,0x20
c00150ce:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c00150d6:	8d 44 24 18          	lea    eax,[esp+0x18]
c00150da:	76 1e                	jbe    c00150fa <CPU::detectFeatures()+0x606>
c00150dc:	83 ec 0c             	sub    esp,0xc
c00150df:	56                   	push   esi
c00150e0:	50                   	push   eax
c00150e1:	57                   	push   edi
c00150e2:	55                   	push   ebp
c00150e3:	68 01 00 00 80       	push   0x80000001
c00150e8:	e8 af f5 ff ff       	call   c001469c <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00150ed:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c00150f7:	83 c4 20             	add    esp,0x20
c00150fa:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0015100:	83 f8 01             	cmp    eax,0x1
c0015103:	75 6f                	jne    c0015174 <CPU::detectFeatures()+0x680>
c0015105:	51                   	push   ecx
c0015106:	51                   	push   ecx
c0015107:	68 46 25 02 c0       	push   0xc0022546
c001510c:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0015110:	56                   	push   esi
c0015111:	e8 43 b6 fe ff       	call   c0000759 <strcpy>
c0015116:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001511c:	5f                   	pop    edi
c001511d:	66 c1 e8 06          	shr    ax,0x6
c0015121:	5d                   	pop    ebp
c0015122:	0f b6 c0             	movzx  eax,al
c0015125:	50                   	push   eax
c0015126:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001512c:	c1 e8 0e             	shr    eax,0xe
c001512f:	0f b6 c0             	movzx  eax,al
c0015132:	50                   	push   eax
c0015133:	e8 04 f2 ff ff       	call   c001433c <lookupIntelCPUName(unsigned char, unsigned char)>
c0015138:	5a                   	pop    edx
c0015139:	59                   	pop    ecx
c001513a:	50                   	push   eax
c001513b:	56                   	push   esi
c001513c:	e8 cf b6 fe ff       	call   c0000810 <strcat>
c0015141:	5f                   	pop    edi
c0015142:	5d                   	pop    ebp
c0015143:	56                   	push   esi
c0015144:	53                   	push   ebx
c0015145:	e8 24 b6 ff ff       	call   c001076e <Device::setName(char const*)>
c001514a:	58                   	pop    eax
c001514b:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0015151:	5a                   	pop    edx
c0015152:	68 4d 25 02 c0       	push   0xc002254d
c0015157:	50                   	push   eax
c0015158:	e8 4d b6 fe ff       	call   c00007aa <strcmp>
c001515d:	83 c4 10             	add    esp,0x10
c0015160:	85 c0                	test   eax,eax
c0015162:	0f 85 53 03 00 00    	jne    c00154bb <CPU::detectFeatures()+0x9c7>
c0015168:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c001516f:	e9 47 03 00 00       	jmp    c00154bb <CPU::detectFeatures()+0x9c7>
c0015174:	83 f8 02             	cmp    eax,0x2
c0015177:	0f 85 b5 00 00 00    	jne    c0015232 <CPU::detectFeatures()+0x73e>
c001517d:	57                   	push   edi
c001517e:	57                   	push   edi
c001517f:	68 5f 25 02 c0       	push   0xc002255f
c0015184:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0015188:	56                   	push   esi
c0015189:	e8 cb b5 fe ff       	call   c0000759 <strcpy>
c001518e:	5d                   	pop    ebp
c001518f:	58                   	pop    eax
c0015190:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0015196:	66 c1 e8 06          	shr    ax,0x6
c001519a:	0f b6 c0             	movzx  eax,al
c001519d:	50                   	push   eax
c001519e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00151a4:	c1 e8 0e             	shr    eax,0xe
c00151a7:	0f b6 c0             	movzx  eax,al
c00151aa:	50                   	push   eax
c00151ab:	e8 e7 ef ff ff       	call   c0014197 <lookupAMDCPUName(unsigned char, unsigned char)>
c00151b0:	5a                   	pop    edx
c00151b1:	59                   	pop    ecx
c00151b2:	50                   	push   eax
c00151b3:	56                   	push   esi
c00151b4:	e8 57 b6 fe ff       	call   c0000810 <strcat>
c00151b9:	5f                   	pop    edi
c00151ba:	5d                   	pop    ebp
c00151bb:	56                   	push   esi
c00151bc:	53                   	push   ebx
c00151bd:	e8 ac b5 ff ff       	call   c001076e <Device::setName(char const*)>
c00151c2:	58                   	pop    eax
c00151c3:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c00151c9:	5a                   	pop    edx
c00151ca:	68 64 25 02 c0       	push   0xc0022564
c00151cf:	50                   	push   eax
c00151d0:	e8 d5 b5 fe ff       	call   c00007aa <strcmp>
c00151d5:	83 c4 10             	add    esp,0x10
c00151d8:	85 c0                	test   eax,eax
c00151da:	75 20                	jne    c00151fc <CPU::detectFeatures()+0x708>
c00151dc:	8b 15 88 45 02 c0    	mov    edx,DWORD PTR ds:0xc0024588
c00151e2:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c00151e8:	a8 01                	test   al,0x1
c00151ea:	74 10                	je     c00151fc <CPU::detectFeatures()+0x708>
c00151ec:	83 e0 fe             	and    eax,0xfffffffe
c00151ef:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c00151f5:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c00151fc:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0015202:	c1 e8 0e             	shr    eax,0xe
c0015205:	3c 05                	cmp    al,0x5
c0015207:	0f 85 ae 02 00 00    	jne    c00154bb <CPU::detectFeatures()+0x9c7>
c001520d:	56                   	push   esi
c001520e:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0015214:	83 e0 0f             	and    eax,0xf
c0015217:	50                   	push   eax
c0015218:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001521e:	66 c1 e8 06          	shr    ax,0x6
c0015222:	0f b6 c0             	movzx  eax,al
c0015225:	50                   	push   eax
c0015226:	6a 05                	push   0x5
c0015228:	e8 fc f3 ff ff       	call   c0014629 <AMD_K6_writeback(int, int, int)>
c001522d:	e9 ff 01 00 00       	jmp    c0015431 <CPU::detectFeatures()+0x93d>
c0015232:	89 c1                	mov    ecx,eax
c0015234:	83 e1 fd             	and    ecx,0xfffffffd
c0015237:	83 f9 04             	cmp    ecx,0x4
c001523a:	74 09                	je     c0015245 <CPU::detectFeatures()+0x751>
c001523c:	83 f8 03             	cmp    eax,0x3
c001523f:	0f 85 6f 01 00 00    	jne    c00153b4 <CPU::detectFeatures()+0x8c0>
c0015245:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001524b:	c1 ea 0e             	shr    edx,0xe
c001524e:	80 fa 05             	cmp    dl,0x5
c0015251:	75 62                	jne    c00152b5 <CPU::detectFeatures()+0x7c1>
c0015253:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0015259:	66 81 e2 c0 3f       	and    dx,0x3fc0
c001525e:	66 81 fa 00 01       	cmp    dx,0x100
c0015263:	75 0c                	jne    c0015271 <CPU::detectFeatures()+0x77d>
c0015265:	51                   	push   ecx
c0015266:	51                   	push   ecx
c0015267:	68 6b 25 02 c0       	push   0xc002256b
c001526c:	e9 ba 01 00 00       	jmp    c001542b <CPU::detectFeatures()+0x937>
c0015271:	66 81 fa 00 02       	cmp    dx,0x200
c0015276:	75 0c                	jne    c0015284 <CPU::detectFeatures()+0x790>
c0015278:	52                   	push   edx
c0015279:	52                   	push   edx
c001527a:	68 7e 25 02 c0       	push   0xc002257e
c001527f:	e9 a7 01 00 00       	jmp    c001542b <CPU::detectFeatures()+0x937>
c0015284:	66 81 fa 40 02       	cmp    dx,0x240
c0015289:	75 0c                	jne    c0015297 <CPU::detectFeatures()+0x7a3>
c001528b:	50                   	push   eax
c001528c:	50                   	push   eax
c001528d:	68 90 25 02 c0       	push   0xc0022590
c0015292:	e9 94 01 00 00       	jmp    c001542b <CPU::detectFeatures()+0x937>
c0015297:	83 f8 06             	cmp    eax,0x6
c001529a:	0f 84 ee 00 00 00    	je     c001538e <CPU::detectFeatures()+0x89a>
c00152a0:	83 f9 04             	cmp    ecx,0x4
c00152a3:	0f 84 f6 00 00 00    	je     c001539f <CPU::detectFeatures()+0x8ab>
c00152a9:	50                   	push   eax
c00152aa:	50                   	push   eax
c00152ab:	68 b6 25 02 c0       	push   0xc00225b6
c00152b0:	e9 76 01 00 00       	jmp    c001542b <CPU::detectFeatures()+0x937>
c00152b5:	80 fa 06             	cmp    dl,0x6
c00152b8:	0f 85 cb 00 00 00    	jne    c0015389 <CPU::detectFeatures()+0x895>
c00152be:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00152c4:	66 81 e2 c0 3f       	and    dx,0x3fc0
c00152c9:	66 81 fa 80 01       	cmp    dx,0x180
c00152ce:	75 0c                	jne    c00152dc <CPU::detectFeatures()+0x7e8>
c00152d0:	50                   	push   eax
c00152d1:	50                   	push   eax
c00152d2:	68 c1 25 02 c0       	push   0xc00225c1
c00152d7:	e9 4f 01 00 00       	jmp    c001542b <CPU::detectFeatures()+0x937>
c00152dc:	66 81 fa c0 01       	cmp    dx,0x1c0
c00152e1:	74 07                	je     c00152ea <CPU::detectFeatures()+0x7f6>
c00152e3:	66 81 fa 00 02       	cmp    dx,0x200
c00152e8:	75 0c                	jne    c00152f6 <CPU::detectFeatures()+0x802>
c00152ea:	50                   	push   eax
c00152eb:	50                   	push   eax
c00152ec:	68 d1 25 02 c0       	push   0xc00225d1
c00152f1:	e9 35 01 00 00       	jmp    c001542b <CPU::detectFeatures()+0x937>
c00152f6:	66 81 fa 40 02       	cmp    dx,0x240
c00152fb:	75 0c                	jne    c0015309 <CPU::detectFeatures()+0x815>
c00152fd:	50                   	push   eax
c00152fe:	50                   	push   eax
c00152ff:	68 d8 25 02 c0       	push   0xc00225d8
c0015304:	e9 22 01 00 00       	jmp    c001542b <CPU::detectFeatures()+0x937>
c0015309:	66 81 fa 80 02       	cmp    dx,0x280
c001530e:	74 07                	je     c0015317 <CPU::detectFeatures()+0x823>
c0015310:	66 81 fa 40 03       	cmp    dx,0x340
c0015315:	75 0c                	jne    c0015323 <CPU::detectFeatures()+0x82f>
c0015317:	50                   	push   eax
c0015318:	50                   	push   eax
c0015319:	68 e1 25 02 c0       	push   0xc00225e1
c001531e:	e9 08 01 00 00       	jmp    c001542b <CPU::detectFeatures()+0x937>
c0015323:	66 81 fa c0 03       	cmp    dx,0x3c0
c0015328:	75 0c                	jne    c0015336 <CPU::detectFeatures()+0x842>
c001532a:	55                   	push   ebp
c001532b:	55                   	push   ebp
c001532c:	68 e8 25 02 c0       	push   0xc00225e8
c0015331:	e9 f5 00 00 00       	jmp    c001542b <CPU::detectFeatures()+0x937>
c0015336:	83 f8 06             	cmp    eax,0x6
c0015339:	74 53                	je     c001538e <CPU::detectFeatures()+0x89a>
c001533b:	83 f9 04             	cmp    ecx,0x4
c001533e:	74 5f                	je     c001539f <CPU::detectFeatures()+0x8ab>
c0015340:	57                   	push   edi
c0015341:	57                   	push   edi
c0015342:	68 f1 25 02 c0       	push   0xc00225f1
c0015347:	53                   	push   ebx
c0015348:	e8 21 b4 ff ff       	call   c001076e <Device::setName(char const*)>
c001534d:	b1 c1                	mov    cl,0xc1
c001534f:	88 c8                	mov    al,cl
c0015351:	e6 22                	out    0x22,al
c0015353:	e4 23                	in     al,0x23
c0015355:	88 c2                	mov    dl,al
c0015357:	88 c8                	mov    al,cl
c0015359:	e6 22                	out    0x22,al
c001535b:	88 d0                	mov    al,dl
c001535d:	83 c8 10             	or     eax,0x10
c0015360:	e6 23                	out    0x23,al
c0015362:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0015369:	89 d0                	mov    eax,edx
c001536b:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001536e:	40                   	inc    eax
c001536f:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c0015375:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c0015379:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001537f:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0015384:	e9 a8 00 00 00       	jmp    c0015431 <CPU::detectFeatures()+0x93d>
c0015389:	83 f8 06             	cmp    eax,0x6
c001538c:	75 0c                	jne    c001539a <CPU::detectFeatures()+0x8a6>
c001538e:	56                   	push   esi
c001538f:	56                   	push   esi
c0015390:	68 a2 25 02 c0       	push   0xc00225a2
c0015395:	e9 91 00 00 00       	jmp    c001542b <CPU::detectFeatures()+0x937>
c001539a:	83 f9 04             	cmp    ecx,0x4
c001539d:	75 0c                	jne    c00153ab <CPU::detectFeatures()+0x8b7>
c001539f:	51                   	push   ecx
c00153a0:	51                   	push   ecx
c00153a1:	68 ae 25 02 c0       	push   0xc00225ae
c00153a6:	e9 80 00 00 00       	jmp    c001542b <CPU::detectFeatures()+0x937>
c00153ab:	52                   	push   edx
c00153ac:	52                   	push   edx
c00153ad:	68 fc 25 02 c0       	push   0xc00225fc
c00153b2:	eb 77                	jmp    c001542b <CPU::detectFeatures()+0x937>
c00153b4:	83 f8 07             	cmp    eax,0x7
c00153b7:	75 09                	jne    c00153c2 <CPU::detectFeatures()+0x8ce>
c00153b9:	50                   	push   eax
c00153ba:	50                   	push   eax
c00153bb:	68 06 26 02 c0       	push   0xc0022606
c00153c0:	eb 69                	jmp    c001542b <CPU::detectFeatures()+0x937>
c00153c2:	83 f8 0a             	cmp    eax,0xa
c00153c5:	75 09                	jne    c00153d0 <CPU::detectFeatures()+0x8dc>
c00153c7:	50                   	push   eax
c00153c8:	50                   	push   eax
c00153c9:	68 11 26 02 c0       	push   0xc0022611
c00153ce:	eb 5b                	jmp    c001542b <CPU::detectFeatures()+0x937>
c00153d0:	83 f8 0b             	cmp    eax,0xb
c00153d3:	75 09                	jne    c00153de <CPU::detectFeatures()+0x8ea>
c00153d5:	50                   	push   eax
c00153d6:	50                   	push   eax
c00153d7:	68 19 26 02 c0       	push   0xc0022619
c00153dc:	eb 4d                	jmp    c001542b <CPU::detectFeatures()+0x937>
c00153de:	83 f8 08             	cmp    eax,0x8
c00153e1:	75 09                	jne    c00153ec <CPU::detectFeatures()+0x8f8>
c00153e3:	50                   	push   eax
c00153e4:	50                   	push   eax
c00153e5:	68 22 26 02 c0       	push   0xc0022622
c00153ea:	eb 3f                	jmp    c001542b <CPU::detectFeatures()+0x937>
c00153ec:	83 f8 09             	cmp    eax,0x9
c00153ef:	75 09                	jne    c00153fa <CPU::detectFeatures()+0x906>
c00153f1:	50                   	push   eax
c00153f2:	50                   	push   eax
c00153f3:	68 2a 26 02 c0       	push   0xc002262a
c00153f8:	eb 31                	jmp    c001542b <CPU::detectFeatures()+0x937>
c00153fa:	83 f8 05             	cmp    eax,0x5
c00153fd:	75 09                	jne    c0015408 <CPU::detectFeatures()+0x914>
c00153ff:	50                   	push   eax
c0015400:	50                   	push   eax
c0015401:	68 32 26 02 c0       	push   0xc0022632
c0015406:	eb 23                	jmp    c001542b <CPU::detectFeatures()+0x937>
c0015408:	83 f8 0c             	cmp    eax,0xc
c001540b:	75 09                	jne    c0015416 <CPU::detectFeatures()+0x922>
c001540d:	55                   	push   ebp
c001540e:	55                   	push   ebp
c001540f:	68 40 26 02 c0       	push   0xc0022640
c0015414:	eb 15                	jmp    c001542b <CPU::detectFeatures()+0x937>
c0015416:	83 f8 0d             	cmp    eax,0xd
c0015419:	75 09                	jne    c0015424 <CPU::detectFeatures()+0x930>
c001541b:	57                   	push   edi
c001541c:	57                   	push   edi
c001541d:	68 4b 26 02 c0       	push   0xc002264b
c0015422:	eb 07                	jmp    c001542b <CPU::detectFeatures()+0x937>
c0015424:	56                   	push   esi
c0015425:	56                   	push   esi
c0015426:	68 5f 26 02 c0       	push   0xc002265f
c001542b:	53                   	push   ebx
c001542c:	e8 3d b3 ff ff       	call   c001076e <Device::setName(char const*)>
c0015431:	83 c4 10             	add    esp,0x10
c0015434:	e9 82 00 00 00       	jmp    c00154bb <CPU::detectFeatures()+0x9c7>
c0015439:	51                   	push   ecx
c001543a:	51                   	push   ecx
c001543b:	68 ab 24 02 c0       	push   0xc00224ab
c0015440:	57                   	push   edi
c0015441:	e8 13 b3 fe ff       	call   c0000759 <strcpy>
c0015446:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0015450:	e8 dc ad fe ff       	call   c0000231 <is486>
c0015455:	83 c4 10             	add    esp,0x10
c0015458:	85 c0                	test   eax,eax
c001545a:	74 2d                	je     c0015489 <CPU::detectFeatures()+0x995>
c001545c:	52                   	push   edx
c001545d:	52                   	push   edx
c001545e:	68 6b 26 02 c0       	push   0xc002266b
c0015463:	53                   	push   ebx
c0015464:	e8 05 b3 ff ff       	call   c001076e <Device::setName(char const*)>
c0015469:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0015470:	e8 a3 a5 00 00       	call   c001fa18 <CPU::readCR0()>
c0015475:	83 c4 10             	add    esp,0x10
c0015478:	83 e0 14             	and    eax,0x14
c001547b:	83 f8 04             	cmp    eax,0x4
c001547e:	75 1f                	jne    c001549f <CPU::detectFeatures()+0x9ab>
c0015480:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0015487:	eb 32                	jmp    c00154bb <CPU::detectFeatures()+0x9c7>
c0015489:	50                   	push   eax
c001548a:	50                   	push   eax
c001548b:	68 76 26 02 c0       	push   0xc0022676
c0015490:	53                   	push   ebx
c0015491:	e8 d8 b2 ff ff       	call   c001076e <Device::setName(char const*)>
c0015496:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c001549d:	eb d1                	jmp    c0015470 <CPU::detectFeatures()+0x97c>
c001549f:	e8 68 ad fe ff       	call   c000020c <hasLegacyFPU>
c00154a4:	83 e0 01             	and    eax,0x1
c00154a7:	8d 14 00             	lea    edx,[eax+eax*1]
c00154aa:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00154b0:	83 e0 fd             	and    eax,0xfffffffd
c00154b3:	09 d0                	or     eax,edx
c00154b5:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00154bb:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c00154c2:	83 c4 4c             	add    esp,0x4c
c00154c5:	5b                   	pop    ebx
c00154c6:	5e                   	pop    esi
c00154c7:	5f                   	pop    edi
c00154c8:	5d                   	pop    ebp
c00154c9:	c3                   	ret    

c00154ca <CPU::setupSMEP()>:
c00154ca:	83 ec 0c             	sub    esp,0xc
c00154cd:	e8 10 a8 00 00       	call   c001fce2 <CPU::readCR4()>
c00154d2:	0d 00 00 10 00       	or     eax,0x100000
c00154d7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00154db:	83 c4 0c             	add    esp,0xc
c00154de:	e9 1a a8 00 00       	jmp    c001fcfd <CPU::writeCR4(unsigned long)>
c00154e3:	90                   	nop

c00154e4 <CPU::setupUMIP()>:
c00154e4:	83 ec 0c             	sub    esp,0xc
c00154e7:	e8 f6 a7 00 00       	call   c001fce2 <CPU::readCR4()>
c00154ec:	80 cc 08             	or     ah,0x8
c00154ef:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00154f3:	83 c4 0c             	add    esp,0xc
c00154f6:	e9 02 a8 00 00       	jmp    c001fcfd <CPU::writeCR4(unsigned long)>
c00154fb:	90                   	nop

c00154fc <CPU::setupTSC()>:
c00154fc:	83 ec 0c             	sub    esp,0xc
c00154ff:	e8 de a7 00 00       	call   c001fce2 <CPU::readCR4()>
c0015504:	83 c8 04             	or     eax,0x4
c0015507:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001550b:	83 c4 0c             	add    esp,0xc
c001550e:	e9 ea a7 00 00       	jmp    c001fcfd <CPU::writeCR4(unsigned long)>
c0015513:	90                   	nop

c0015514 <CPU::setupLargePages()>:
c0015514:	83 ec 0c             	sub    esp,0xc
c0015517:	e8 c6 a7 00 00       	call   c001fce2 <CPU::readCR4()>
c001551c:	83 c8 10             	or     eax,0x10
c001551f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015523:	83 c4 0c             	add    esp,0xc
c0015526:	e9 d2 a7 00 00       	jmp    c001fcfd <CPU::writeCR4(unsigned long)>
c001552b:	90                   	nop

c001552c <CPU::setupPAT()>:
c001552c:	a1 88 45 02 c0       	mov    eax,ds:0xc0024588
c0015531:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0015538:	74 2c                	je     c0015566 <CPU::setupPAT()+0x3a>
c001553a:	53                   	push   ebx
c001553b:	83 ec 10             	sub    esp,0x10
c001553e:	68 77 02 00 00       	push   0x277
c0015543:	50                   	push   eax
c0015544:	e8 61 60 ff ff       	call   c000b5aa <Computer::rdmsr(unsigned int)>
c0015549:	83 e2 f8             	and    edx,0xfffffff8
c001554c:	83 ca 01             	or     edx,0x1
c001554f:	52                   	push   edx
c0015550:	50                   	push   eax
c0015551:	68 77 02 00 00       	push   0x277
c0015556:	ff 35 88 45 02 c0    	push   DWORD PTR ds:0xc0024588
c001555c:	e8 75 60 ff ff       	call   c000b5d6 <Computer::wrmsr(unsigned int, unsigned long long)>
c0015561:	83 c4 28             	add    esp,0x28
c0015564:	5b                   	pop    ebx
c0015565:	c3                   	ret    
c0015566:	c3                   	ret    
c0015567:	90                   	nop

c0015568 <CPU::setupMTRR()>:
c0015568:	c3                   	ret    
c0015569:	90                   	nop

c001556a <CPU::setupGlobalPages()>:
c001556a:	83 ec 0c             	sub    esp,0xc
c001556d:	e8 70 a7 00 00       	call   c001fce2 <CPU::readCR4()>
c0015572:	0c 80                	or     al,0x80
c0015574:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015578:	83 c4 0c             	add    esp,0xc
c001557b:	e9 7d a7 00 00       	jmp    c001fcfd <CPU::writeCR4(unsigned long)>

c0015580 <CPU::allowUsermodeDataAccess()>:
c0015580:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015584:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c001558b:	74 03                	je     c0015590 <CPU::allowUsermodeDataAccess()+0x10>
c001558d:	0f 01 cb             	stac   
c0015590:	c3                   	ret    
c0015591:	90                   	nop

c0015592 <CPU::prohibitUsermodeDataAccess()>:
c0015592:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015596:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c001559d:	74 03                	je     c00155a2 <CPU::prohibitUsermodeDataAccess()+0x10>
c001559f:	0f 01 ca             	clac   
c00155a2:	c3                   	ret    
c00155a3:	90                   	nop

c00155a4 <CPU::setupSMAP()>:
c00155a4:	53                   	push   ebx
c00155a5:	83 ec 08             	sub    esp,0x8
c00155a8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00155ac:	e8 31 a7 00 00       	call   c001fce2 <CPU::readCR4()>
c00155b1:	83 ec 0c             	sub    esp,0xc
c00155b4:	0d 00 00 20 00       	or     eax,0x200000
c00155b9:	50                   	push   eax
c00155ba:	e8 3e a7 00 00       	call   c001fcfd <CPU::writeCR4(unsigned long)>
c00155bf:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00155c3:	83 c4 18             	add    esp,0x18
c00155c6:	5b                   	pop    ebx
c00155c7:	eb c9                	jmp    c0015592 <CPU::prohibitUsermodeDataAccess()>
c00155c9:	90                   	nop

c00155ca <CPU::setupFeatures()>:
c00155ca:	53                   	push   ebx
c00155cb:	83 ec 08             	sub    esp,0x8
c00155ce:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00155d2:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c00155d9:	74 0c                	je     c00155e7 <CPU::setupFeatures()+0x1d>
c00155db:	83 ec 0c             	sub    esp,0xc
c00155de:	53                   	push   ebx
c00155df:	e8 e6 fe ff ff       	call   c00154ca <CPU::setupSMEP()>
c00155e4:	83 c4 10             	add    esp,0x10
c00155e7:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c00155ee:	74 0c                	je     c00155fc <CPU::setupFeatures()+0x32>
c00155f0:	83 ec 0c             	sub    esp,0xc
c00155f3:	53                   	push   ebx
c00155f4:	e8 ab ff ff ff       	call   c00155a4 <CPU::setupSMAP()>
c00155f9:	83 c4 10             	add    esp,0x10
c00155fc:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0015603:	74 0c                	je     c0015611 <CPU::setupFeatures()+0x47>
c0015605:	83 ec 0c             	sub    esp,0xc
c0015608:	53                   	push   ebx
c0015609:	e8 d6 fe ff ff       	call   c00154e4 <CPU::setupUMIP()>
c001560e:	83 c4 10             	add    esp,0x10
c0015611:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0015618:	74 0c                	je     c0015626 <CPU::setupFeatures()+0x5c>
c001561a:	83 ec 0c             	sub    esp,0xc
c001561d:	53                   	push   ebx
c001561e:	e8 d9 fe ff ff       	call   c00154fc <CPU::setupTSC()>
c0015623:	83 c4 10             	add    esp,0x10
c0015626:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c001562d:	74 0c                	je     c001563b <CPU::setupFeatures()+0x71>
c001562f:	83 ec 0c             	sub    esp,0xc
c0015632:	53                   	push   ebx
c0015633:	e8 dc fe ff ff       	call   c0015514 <CPU::setupLargePages()>
c0015638:	83 c4 10             	add    esp,0x10
c001563b:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0015642:	74 0c                	je     c0015650 <CPU::setupFeatures()+0x86>
c0015644:	83 ec 0c             	sub    esp,0xc
c0015647:	53                   	push   ebx
c0015648:	e8 1d ff ff ff       	call   c001556a <CPU::setupGlobalPages()>
c001564d:	83 c4 10             	add    esp,0x10
c0015650:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0015657:	74 0d                	je     c0015666 <CPU::setupFeatures()+0x9c>
c0015659:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001565d:	83 c4 08             	add    esp,0x8
c0015660:	5b                   	pop    ebx
c0015661:	e9 c6 fe ff ff       	jmp    c001552c <CPU::setupPAT()>
c0015666:	83 c4 08             	add    esp,0x8
c0015669:	5b                   	pop    ebx
c001566a:	c3                   	ret    
c001566b:	90                   	nop

c001566c <CPU::open(int, int, void*)>:
c001566c:	57                   	push   edi
c001566d:	56                   	push   esi
c001566e:	53                   	push   ebx
c001566f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015673:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0015677:	83 ec 0c             	sub    esp,0xc
c001567a:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0015680:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0015686:	50                   	push   eax
c0015687:	e8 0a 62 ff ff       	call   c000b896 <GDT::setup()>
c001568c:	83 c4 0c             	add    esp,0xc
c001568f:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0015695:	6a 00                	push   0x0
c0015697:	68 ef be ad de       	push   0xdeadbeef
c001569c:	57                   	push   edi
c001569d:	e8 8a 84 ff ff       	call   c000db2c <TSS::setup(unsigned long, unsigned long)>
c00156a2:	89 3c 24             	mov    DWORD PTR [esp],edi
c00156a5:	e8 62 84 ff ff       	call   c000db0c <TSS::flush()>
c00156aa:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c00156b0:	89 04 24             	mov    DWORD PTR [esp],eax
c00156b3:	e8 38 64 ff ff       	call   c000baf0 <IDT::setup()>
c00156b8:	c7 04 24 00 04 00 00 	mov    DWORD PTR [esp],0x400
c00156bf:	e8 30 a6 00 00       	call   c001fcf4 <CPU::writeDR7(unsigned long)>
c00156c4:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c00156ce:	e8 0c 6f ff ff       	call   c000c5df <Phys::allocatePage()>
c00156d3:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00156d9:	89 30                	mov    DWORD PTR [eax],esi
c00156db:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c00156e1:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00156e4:	58                   	pop    eax
c00156e5:	5a                   	pop    edx
c00156e6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00156ec:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00156f0:	e8 07 94 ff ff       	call   c000eafc <VAS::setCPUSpecific(unsigned long)>
c00156f5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00156f8:	e8 f7 f3 ff ff       	call   c0014af4 <CPU::detectFeatures()>
c00156fd:	e8 86 c3 ff ff       	call   c0011a88 <setupInterruptController()>
c0015702:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0015708:	a1 a0 45 02 c0       	mov    eax,ds:0xc00245a0
c001570d:	83 e0 10             	and    eax,0x10
c0015710:	83 f8 01             	cmp    eax,0x1
c0015713:	19 c0                	sbb    eax,eax
c0015715:	83 e0 46             	and    eax,0x46
c0015718:	83 c0 1e             	add    eax,0x1e
c001571b:	89 04 24             	mov    DWORD PTR [esp],eax
c001571e:	e8 0b d7 ff ff       	call   c0012e2e <setupTimer(int)>
c0015723:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0015729:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001572c:	e8 99 fe ff ff       	call   c00155ca <CPU::setupFeatures()>
c0015731:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015734:	e8 3f f1 ff ff       	call   c0014878 <CPU::displayFeatures()>
c0015739:	83 c4 10             	add    esp,0x10
c001573c:	5b                   	pop    ebx
c001573d:	31 c0                	xor    eax,eax
c001573f:	5e                   	pop    esi
c0015740:	5f                   	pop    edi
c0015741:	c3                   	ret    

c0015742 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0015742:	56                   	push   esi
c0015743:	53                   	push   ebx
c0015744:	51                   	push   ecx
c0015745:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015749:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001574d:	8b 5a 38             	mov    ebx,DWORD PTR [edx+0x38]
c0015750:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0015753:	88 c1                	mov    cl,al
c0015755:	c0 e9 06             	shr    cl,0x6
c0015758:	88 0c 24             	mov    BYTE PTR [esp],cl
c001575b:	88 c1                	mov    cl,al
c001575d:	66 c1 e8 03          	shr    ax,0x3
c0015761:	83 e1 07             	and    ecx,0x7
c0015764:	83 e0 07             	and    eax,0x7
c0015767:	80 3c 24 03          	cmp    BYTE PTR [esp],0x3
c001576b:	88 06                	mov    BYTE PTR [esi],al
c001576d:	74 7f                	je     c00157ee <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xac>
c001576f:	80 f9 04             	cmp    cl,0x4
c0015772:	74 7a                	je     c00157ee <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xac>
c0015774:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0015778:	75 05                	jne    c001577f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x3d>
c001577a:	80 f9 05             	cmp    cl,0x5
c001577d:	74 6f                	je     c00157ee <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xac>
c001577f:	84 c9                	test   cl,cl
c0015781:	75 05                	jne    c0015788 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x46>
c0015783:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c0015786:	eb 3c                	jmp    c00157c4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x82>
c0015788:	80 f9 01             	cmp    cl,0x1
c001578b:	75 05                	jne    c0015792 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x50>
c001578d:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0015790:	eb 32                	jmp    c00157c4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x82>
c0015792:	80 f9 02             	cmp    cl,0x2
c0015795:	75 05                	jne    c001579c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5a>
c0015797:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c001579a:	eb 28                	jmp    c00157c4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x82>
c001579c:	31 c0                	xor    eax,eax
c001579e:	80 f9 03             	cmp    cl,0x3
c00157a1:	75 05                	jne    c00157a8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x66>
c00157a3:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00157a6:	eb 1c                	jmp    c00157c4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x82>
c00157a8:	80 f9 05             	cmp    cl,0x5
c00157ab:	75 05                	jne    c00157b2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x70>
c00157ad:	8b 42 18             	mov    eax,DWORD PTR [edx+0x18]
c00157b0:	eb 12                	jmp    c00157c4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x82>
c00157b2:	80 f9 06             	cmp    cl,0x6
c00157b5:	75 05                	jne    c00157bc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7a>
c00157b7:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00157ba:	eb 08                	jmp    c00157c4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x82>
c00157bc:	80 f9 07             	cmp    cl,0x7
c00157bf:	75 03                	jne    c00157c4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x82>
c00157c1:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c00157c4:	80 3c 24 01          	cmp    BYTE PTR [esp],0x1
c00157c8:	75 10                	jne    c00157da <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x98>
c00157ca:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c00157ce:	b9 03 00 00 00       	mov    ecx,0x3
c00157d3:	01 d0                	add    eax,edx
c00157d5:	e9 42 01 00 00       	jmp    c001591c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1da>
c00157da:	b9 02 00 00 00       	mov    ecx,0x2
c00157df:	80 3c 24 02          	cmp    BYTE PTR [esp],0x2
c00157e3:	0f 85 33 01 00 00    	jne    c001591c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1da>
c00157e9:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c00157ec:	eb 18                	jmp    c0015806 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xc4>
c00157ee:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c00157f2:	0f 94 44 24 02       	sete   BYTE PTR [esp+0x2]
c00157f7:	80 f9 05             	cmp    cl,0x5
c00157fa:	0f 94 c0             	sete   al
c00157fd:	84 44 24 02          	test   BYTE PTR [esp+0x2],al
c0015801:	74 0d                	je     c0015810 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0015803:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c0015806:	b9 06 00 00 00       	mov    ecx,0x6
c001580b:	e9 0c 01 00 00       	jmp    c001591c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1da>
c0015810:	80 3c 24 03          	cmp    BYTE PTR [esp],0x3
c0015814:	0f 84 06 01 00 00    	je     c0015920 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1de>
c001581a:	80 f9 04             	cmp    cl,0x4
c001581d:	0f 85 06 01 00 00    	jne    c0015929 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e7>
c0015823:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0015826:	89 c6                	mov    esi,eax
c0015828:	88 c1                	mov    cl,al
c001582a:	66 c1 ee 03          	shr    si,0x3
c001582e:	c0 e9 06             	shr    cl,0x6
c0015831:	83 e6 07             	and    esi,0x7
c0015834:	24 07                	and    al,0x7
c0015836:	88 4c 24 03          	mov    BYTE PTR [esp+0x3],cl
c001583a:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c001583e:	89 f1                	mov    ecx,esi
c0015840:	75 05                	jne    c0015847 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x105>
c0015842:	8b 72 2c             	mov    esi,DWORD PTR [edx+0x2c]
c0015845:	eb 4b                	jmp    c0015892 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x150>
c0015847:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c001584c:	75 05                	jne    c0015853 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x111>
c001584e:	8b 72 28             	mov    esi,DWORD PTR [edx+0x28]
c0015851:	eb 3f                	jmp    c0015892 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x150>
c0015853:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c0015858:	75 05                	jne    c001585f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x11d>
c001585a:	8b 72 24             	mov    esi,DWORD PTR [edx+0x24]
c001585d:	eb 33                	jmp    c0015892 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x150>
c001585f:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0015864:	75 05                	jne    c001586b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x129>
c0015866:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c0015869:	eb 27                	jmp    c0015892 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x150>
c001586b:	80 7c 24 01 04       	cmp    BYTE PTR [esp+0x1],0x4
c0015870:	75 05                	jne    c0015877 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x135>
c0015872:	8b 72 44             	mov    esi,DWORD PTR [edx+0x44]
c0015875:	eb 1b                	jmp    c0015892 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x150>
c0015877:	80 7c 24 01 05       	cmp    BYTE PTR [esp+0x1],0x5
c001587c:	75 05                	jne    c0015883 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x141>
c001587e:	8b 72 18             	mov    esi,DWORD PTR [edx+0x18]
c0015881:	eb 0f                	jmp    c0015892 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x150>
c0015883:	80 7c 24 01 06       	cmp    BYTE PTR [esp+0x1],0x6
c0015888:	75 05                	jne    c001588f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14d>
c001588a:	8b 72 14             	mov    esi,DWORD PTR [edx+0x14]
c001588d:	eb 03                	jmp    c0015892 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x150>
c001588f:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c0015892:	84 c9                	test   cl,cl
c0015894:	75 05                	jne    c001589b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c0015896:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c0015899:	eb 3c                	jmp    c00158d7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x195>
c001589b:	80 f9 01             	cmp    cl,0x1
c001589e:	75 05                	jne    c00158a5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c00158a0:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c00158a3:	eb 32                	jmp    c00158d7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x195>
c00158a5:	80 f9 02             	cmp    cl,0x2
c00158a8:	75 05                	jne    c00158af <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c00158aa:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c00158ad:	eb 28                	jmp    c00158d7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x195>
c00158af:	80 f9 03             	cmp    cl,0x3
c00158b2:	75 05                	jne    c00158b9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x177>
c00158b4:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00158b7:	eb 1e                	jmp    c00158d7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x195>
c00158b9:	31 c0                	xor    eax,eax
c00158bb:	80 f9 04             	cmp    cl,0x4
c00158be:	74 17                	je     c00158d7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x195>
c00158c0:	80 f9 05             	cmp    cl,0x5
c00158c3:	75 05                	jne    c00158ca <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c00158c5:	8b 42 18             	mov    eax,DWORD PTR [edx+0x18]
c00158c8:	eb 0d                	jmp    c00158d7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x195>
c00158ca:	80 f9 06             	cmp    cl,0x6
c00158cd:	75 05                	jne    c00158d4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x192>
c00158cf:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00158d2:	eb 03                	jmp    c00158d7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x195>
c00158d4:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c00158d7:	80 7c 24 01 05       	cmp    BYTE PTR [esp+0x1],0x5
c00158dc:	8a 4c 24 03          	mov    cl,BYTE PTR [esp+0x3]
c00158e0:	0f 94 c2             	sete   dl
c00158e3:	d3 e0                	shl    eax,cl
c00158e5:	22 54 24 02          	and    dl,BYTE PTR [esp+0x2]
c00158e9:	74 07                	je     c00158f2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b0>
c00158eb:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c00158ee:	31 d2                	xor    edx,edx
c00158f0:	eb 23                	jmp    c0015915 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c00158f2:	01 f0                	add    eax,esi
c00158f4:	b9 03 00 00 00       	mov    ecx,0x3
c00158f9:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c00158fd:	74 33                	je     c0015932 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1f0>
c00158ff:	80 3c 24 01          	cmp    BYTE PTR [esp],0x1
c0015903:	75 0d                	jne    c0015912 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d0>
c0015905:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c0015909:	01 c8                	add    eax,ecx
c001590b:	b9 04 00 00 00       	mov    ecx,0x4
c0015910:	eb 20                	jmp    c0015932 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1f0>
c0015912:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0015915:	b9 07 00 00 00       	mov    ecx,0x7
c001591a:	eb 16                	jmp    c0015932 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1f0>
c001591c:	31 d2                	xor    edx,edx
c001591e:	eb 12                	jmp    c0015932 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1f0>
c0015920:	b9 02 00 00 00       	mov    ecx,0x2
c0015925:	b2 01                	mov    dl,0x1
c0015927:	eb 07                	jmp    c0015930 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ee>
c0015929:	31 d2                	xor    edx,edx
c001592b:	b9 02 00 00 00       	mov    ecx,0x2
c0015930:	31 c0                	xor    eax,eax
c0015932:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0015936:	89 0b                	mov    DWORD PTR [ebx],ecx
c0015938:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001593c:	88 11                	mov    BYTE PTR [ecx],dl
c001593e:	5a                   	pop    edx
c001593f:	5b                   	pop    ebx
c0015940:	5e                   	pop    esi
c0015941:	c3                   	ret    

c0015942 <Krnl::panic(char const*)>:
c0015942:	55                   	push   ebp
c0015943:	89 e5                	mov    ebp,esp
c0015945:	53                   	push   ebx
c0015946:	51                   	push   ecx
c0015947:	a1 d0 4f 02 c0       	mov    eax,ds:0xc0024fd0
c001594c:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c001594f:	85 c0                	test   eax,eax
c0015951:	74 02                	je     c0015955 <Krnl::panic(char const*)+0x13>
c0015953:	ff d0                	call   eax
c0015955:	fa                   	cli    
c0015956:	50                   	push   eax
c0015957:	c6 05 d4 4f 02 c0 01 	mov    BYTE PTR ds:0xc0024fd4,0x1
c001595e:	50                   	push   eax
c001595f:	c6 05 c0 39 02 c0 00 	mov    BYTE PTR ds:0xc00239c0,0x0
c0015966:	53                   	push   ebx
c0015967:	68 b0 26 02 c0       	push   0xc00226b0
c001596c:	e8 06 98 ff ff       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c0015971:	a1 d4 59 02 c0       	mov    eax,ds:0xc00259d4
c0015976:	5a                   	pop    edx
c0015977:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001597d:	51                   	push   ecx
c001597e:	e8 e8 79 ff ff       	call   c000d36b <setActiveTerminal(VgaText*)>
c0015983:	83 c4 0c             	add    esp,0xc
c0015986:	a1 d4 59 02 c0       	mov    eax,ds:0xc00259d4
c001598b:	6a 01                	push   0x1
c001598d:	6a 0f                	push   0xf
c001598f:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015995:	50                   	push   eax
c0015996:	e8 0f 74 ff ff       	call   c000cdaa <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001599b:	58                   	pop    eax
c001599c:	a1 d4 59 02 c0       	mov    eax,ds:0xc00259d4
c00159a1:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00159a7:	50                   	push   eax
c00159a8:	e8 61 7c ff ff       	call   c000d60e <VgaText::clearScreen()>
c00159ad:	58                   	pop    eax
c00159ae:	a1 d4 59 02 c0       	mov    eax,ds:0xc00259d4
c00159b3:	5a                   	pop    edx
c00159b4:	68 c9 26 02 c0       	push   0xc00226c9
c00159b9:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c00159bf:	51                   	push   ecx
c00159c0:	e8 c7 7d ff ff       	call   c000d78c <VgaText::puts(char const*)>
c00159c5:	58                   	pop    eax
c00159c6:	a1 d4 59 02 c0       	mov    eax,ds:0xc00259d4
c00159cb:	5a                   	pop    edx
c00159cc:	68 70 27 02 c0       	push   0xc0022770
c00159d1:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c00159d7:	51                   	push   ecx
c00159d8:	e8 af 7d ff ff       	call   c000d78c <VgaText::puts(char const*)>
c00159dd:	58                   	pop    eax
c00159de:	a1 d4 59 02 c0       	mov    eax,ds:0xc00259d4
c00159e3:	5a                   	pop    edx
c00159e4:	68 e5 26 02 c0       	push   0xc00226e5
c00159e9:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c00159ef:	51                   	push   ecx
c00159f0:	e8 97 7d ff ff       	call   c000d78c <VgaText::puts(char const*)>
c00159f5:	58                   	pop    eax
c00159f6:	a1 d4 59 02 c0       	mov    eax,ds:0xc00259d4
c00159fb:	5a                   	pop    edx
c00159fc:	53                   	push   ebx
c00159fd:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015a03:	51                   	push   ecx
c0015a04:	e8 83 7d ff ff       	call   c000d78c <VgaText::puts(char const*)>
c0015a09:	5b                   	pop    ebx
c0015a0a:	58                   	pop    eax
c0015a0b:	a1 d4 59 02 c0       	mov    eax,ds:0xc00259d4
c0015a10:	68 05 27 02 c0       	push   0xc0022705
c0015a15:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015a1b:	50                   	push   eax
c0015a1c:	e8 6b 7d ff ff       	call   c000d78c <VgaText::puts(char const*)>
c0015a21:	58                   	pop    eax
c0015a22:	a1 d4 59 02 c0       	mov    eax,ds:0xc00259d4
c0015a27:	5a                   	pop    edx
c0015a28:	68 ac 27 02 c0       	push   0xc00227ac
c0015a2d:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015a33:	51                   	push   ecx
c0015a34:	e8 53 7d ff ff       	call   c000d78c <VgaText::puts(char const*)>
c0015a39:	5b                   	pop    ebx
c0015a3a:	58                   	pop    eax
c0015a3b:	a1 d4 59 02 c0       	mov    eax,ds:0xc00259d4
c0015a40:	68 e5 26 02 c0       	push   0xc00226e5
c0015a45:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015a4b:	50                   	push   eax
c0015a4c:	e8 3b 7d ff ff       	call   c000d78c <VgaText::puts(char const*)>
c0015a51:	58                   	pop    eax
c0015a52:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015a57:	5a                   	pop    edx
c0015a58:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015a5b:	83 c0 0c             	add    eax,0xc
c0015a5e:	50                   	push   eax
c0015a5f:	a1 d4 59 02 c0       	mov    eax,ds:0xc00259d4
c0015a64:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015a6a:	51                   	push   ecx
c0015a6b:	e8 1c 7d ff ff       	call   c000d78c <VgaText::puts(char const*)>
c0015a70:	5b                   	pop    ebx
c0015a71:	58                   	pop    eax
c0015a72:	a1 d4 59 02 c0       	mov    eax,ds:0xc00259d4
c0015a77:	68 04 27 02 c0       	push   0xc0022704
c0015a7c:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015a82:	50                   	push   eax
c0015a83:	e8 04 7d ff ff       	call   c000d78c <VgaText::puts(char const*)>
c0015a88:	58                   	pop    eax
c0015a89:	a1 d4 59 02 c0       	mov    eax,ds:0xc00259d4
c0015a8e:	5a                   	pop    edx
c0015a8f:	68 d8 27 02 c0       	push   0xc00227d8
c0015a94:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015a9a:	51                   	push   ecx
c0015a9b:	e8 ec 7c ff ff       	call   c000d78c <VgaText::puts(char const*)>
c0015aa0:	5b                   	pop    ebx
c0015aa1:	58                   	pop    eax
c0015aa2:	a1 d4 59 02 c0       	mov    eax,ds:0xc00259d4
c0015aa7:	68 18 28 02 c0       	push   0xc0022818
c0015aac:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015ab2:	50                   	push   eax
c0015ab3:	e8 d4 7c ff ff       	call   c000d78c <VgaText::puts(char const*)>
c0015ab8:	58                   	pop    eax
c0015ab9:	a1 d4 59 02 c0       	mov    eax,ds:0xc00259d4
c0015abe:	5a                   	pop    edx
c0015abf:	68 f0 26 02 c0       	push   0xc00226f0
c0015ac4:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015aca:	51                   	push   ecx
c0015acb:	e8 bc 7c ff ff       	call   c000d78c <VgaText::puts(char const*)>
c0015ad0:	5b                   	pop    ebx
c0015ad1:	58                   	pop    eax
c0015ad2:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0015ad5:	50                   	push   eax
c0015ad6:	68 08 27 02 c0       	push   0xc0022708
c0015adb:	e8 97 96 ff ff       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c0015ae0:	58                   	pop    eax
c0015ae1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0015ae4:	5a                   	pop    edx
c0015ae5:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0015ae8:	51                   	push   ecx
c0015ae9:	68 11 27 02 c0       	push   0xc0022711
c0015aee:	e8 84 96 ff ff       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c0015af3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0015af6:	5b                   	pop    ebx
c0015af7:	5a                   	pop    edx
c0015af8:	8b 00                	mov    eax,DWORD PTR [eax]
c0015afa:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0015afd:	51                   	push   ecx
c0015afe:	68 1a 27 02 c0       	push   0xc002271a
c0015b03:	e8 6f 96 ff ff       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c0015b08:	5b                   	pop    ebx
c0015b09:	58                   	pop    eax
c0015b0a:	a1 d4 59 02 c0       	mov    eax,ds:0xc00259d4
c0015b0f:	68 5c 28 02 c0       	push   0xc002285c
c0015b14:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015b1a:	50                   	push   eax
c0015b1b:	e8 6c 7c ff ff       	call   c000d78c <VgaText::puts(char const*)>
c0015b20:	58                   	pop    eax
c0015b21:	a1 d4 59 02 c0       	mov    eax,ds:0xc00259d4
c0015b26:	5a                   	pop    edx
c0015b27:	68 23 27 02 c0       	push   0xc0022723
c0015b2c:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015b32:	51                   	push   ecx
c0015b33:	e8 54 7c ff ff       	call   c000d78c <VgaText::puts(char const*)>
c0015b38:	a1 d4 59 02 c0       	mov    eax,ds:0xc00259d4
c0015b3d:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0015b43:	e8 d0 9e 00 00       	call   c001fa18 <CPU::readCR0()>
c0015b48:	5a                   	pop    edx
c0015b49:	59                   	pop    ecx
c0015b4a:	50                   	push   eax
c0015b4b:	53                   	push   ebx
c0015b4c:	e8 61 7c ff ff       	call   c000d7b2 <VgaText::putx(unsigned int)>
c0015b51:	5b                   	pop    ebx
c0015b52:	58                   	pop    eax
c0015b53:	a1 d4 59 02 c0       	mov    eax,ds:0xc00259d4
c0015b58:	68 2d 27 02 c0       	push   0xc002272d
c0015b5d:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015b63:	50                   	push   eax
c0015b64:	e8 23 7c ff ff       	call   c000d78c <VgaText::puts(char const*)>
c0015b69:	a1 d4 59 02 c0       	mov    eax,ds:0xc00259d4
c0015b6e:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0015b74:	e8 8d a1 00 00       	call   c001fd06 <CPU::readCR2()>
c0015b79:	5a                   	pop    edx
c0015b7a:	59                   	pop    ecx
c0015b7b:	50                   	push   eax
c0015b7c:	53                   	push   ebx
c0015b7d:	e8 30 7c ff ff       	call   c000d7b2 <VgaText::putx(unsigned int)>
c0015b82:	5b                   	pop    ebx
c0015b83:	58                   	pop    eax
c0015b84:	a1 d4 59 02 c0       	mov    eax,ds:0xc00259d4
c0015b89:	68 37 27 02 c0       	push   0xc0022737
c0015b8e:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015b94:	50                   	push   eax
c0015b95:	e8 f2 7b ff ff       	call   c000d78c <VgaText::puts(char const*)>
c0015b9a:	a1 d4 59 02 c0       	mov    eax,ds:0xc00259d4
c0015b9f:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0015ba5:	e8 fb 9a 00 00       	call   c001f6a5 <CPU::readCR3()>
c0015baa:	5a                   	pop    edx
c0015bab:	59                   	pop    ecx
c0015bac:	50                   	push   eax
c0015bad:	53                   	push   ebx
c0015bae:	e8 ff 7b ff ff       	call   c000d7b2 <VgaText::putx(unsigned int)>
c0015bb3:	5b                   	pop    ebx
c0015bb4:	58                   	pop    eax
c0015bb5:	a1 d4 59 02 c0       	mov    eax,ds:0xc00259d4
c0015bba:	68 4a 27 02 c0       	push   0xc002274a
c0015bbf:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015bc5:	50                   	push   eax
c0015bc6:	e8 c1 7b ff ff       	call   c000d78c <VgaText::puts(char const*)>
c0015bcb:	a1 d4 59 02 c0       	mov    eax,ds:0xc00259d4
c0015bd0:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0015bd6:	e8 07 a1 00 00       	call   c001fce2 <CPU::readCR4()>
c0015bdb:	5a                   	pop    edx
c0015bdc:	59                   	pop    ecx
c0015bdd:	50                   	push   eax
c0015bde:	53                   	push   ebx
c0015bdf:	e8 ce 7b ff ff       	call   c000d7b2 <VgaText::putx(unsigned int)>
c0015be4:	5b                   	pop    ebx
c0015be5:	58                   	pop    eax
c0015be6:	a1 d4 59 02 c0       	mov    eax,ds:0xc00259d4
c0015beb:	68 54 27 02 c0       	push   0xc0022754
c0015bf0:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015bf6:	50                   	push   eax
c0015bf7:	e8 90 7b ff ff       	call   c000d78c <VgaText::puts(char const*)>
c0015bfc:	5a                   	pop    edx
c0015bfd:	a1 d4 59 02 c0       	mov    eax,ds:0xc00259d4
c0015c02:	59                   	pop    ecx
c0015c03:	8b 5d 04             	mov    ebx,DWORD PTR [ebp+0x4]
c0015c06:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015c0c:	53                   	push   ebx
c0015c0d:	50                   	push   eax
c0015c0e:	e8 9f 7b ff ff       	call   c000d7b2 <VgaText::putx(unsigned int)>
c0015c13:	58                   	pop    eax
c0015c14:	a1 d4 59 02 c0       	mov    eax,ds:0xc00259d4
c0015c19:	5a                   	pop    edx
c0015c1a:	68 6b 27 02 c0       	push   0xc002276b
c0015c1f:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015c25:	51                   	push   ecx
c0015c26:	e8 61 7b ff ff       	call   c000d78c <VgaText::puts(char const*)>
c0015c2b:	5b                   	pop    ebx
c0015c2c:	a1 d4 59 02 c0       	mov    eax,ds:0xc00259d4
c0015c31:	5a                   	pop    edx
c0015c32:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0015c35:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015c3b:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0015c3e:	51                   	push   ecx
c0015c3f:	50                   	push   eax
c0015c40:	e8 6d 7b ff ff       	call   c000d7b2 <VgaText::putx(unsigned int)>
c0015c45:	5b                   	pop    ebx
c0015c46:	58                   	pop    eax
c0015c47:	a1 d4 59 02 c0       	mov    eax,ds:0xc00259d4
c0015c4c:	68 6b 27 02 c0       	push   0xc002276b
c0015c51:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015c57:	50                   	push   eax
c0015c58:	e8 2f 7b ff ff       	call   c000d78c <VgaText::puts(char const*)>
c0015c5d:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0015c60:	59                   	pop    ecx
c0015c61:	a1 d4 59 02 c0       	mov    eax,ds:0xc00259d4
c0015c66:	5b                   	pop    ebx
c0015c67:	8b 12                	mov    edx,DWORD PTR [edx]
c0015c69:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015c6f:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0015c72:	52                   	push   edx
c0015c73:	50                   	push   eax
c0015c74:	e8 39 7b ff ff       	call   c000d7b2 <VgaText::putx(unsigned int)>
c0015c79:	83 c4 10             	add    esp,0x10
c0015c7c:	b2 fe                	mov    dl,0xfe
c0015c7e:	e4 60                	in     al,0x60
c0015c80:	3c 1c                	cmp    al,0x1c
c0015c82:	74 04                	je     c0015c88 <Krnl::panic(char const*)+0x346>
c0015c84:	3c 5a                	cmp    al,0x5a
c0015c86:	75 f6                	jne    c0015c7e <Krnl::panic(char const*)+0x33c>
c0015c88:	e4 64                	in     al,0x64
c0015c8a:	a8 02                	test   al,0x2
c0015c8c:	75 fa                	jne    c0015c88 <Krnl::panic(char const*)+0x346>
c0015c8e:	88 d0                	mov    al,dl
c0015c90:	e6 64                	out    0x64,al
c0015c92:	fa                   	cli    
c0015c93:	f4                   	hlt    
c0015c94:	eb e8                	jmp    c0015c7e <Krnl::panic(char const*)+0x33c>

c0015c96 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0015c96:	55                   	push   ebp
c0015c97:	57                   	push   edi
c0015c98:	56                   	push   esi
c0015c99:	53                   	push   ebx
c0015c9a:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0015ca0:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0015ca7:	8d 46 01             	lea    eax,[esi+0x1]
c0015caa:	8a 1e                	mov    bl,BYTE PTR [esi]
c0015cac:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015cb0:	80 fb 40             	cmp    bl,0x40
c0015cb3:	75 19                	jne    c0015cce <Reg::findLineFromLoadedData(char*, char*, char*)+0x38>
c0015cb5:	8a 06                	mov    al,BYTE PTR [esi]
c0015cb7:	84 c0                	test   al,al
c0015cb9:	74 07                	je     c0015cc2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x2c>
c0015cbb:	3c 3a                	cmp    al,0x3a
c0015cbd:	74 03                	je     c0015cc2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x2c>
c0015cbf:	46                   	inc    esi
c0015cc0:	eb f3                	jmp    c0015cb5 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1f>
c0015cc2:	84 c0                	test   al,al
c0015cc4:	0f 84 1f 01 00 00    	je     c0015de9 <Reg::findLineFromLoadedData(char*, char*, char*)+0x153>
c0015cca:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0015ccd:	46                   	inc    esi
c0015cce:	50                   	push   eax
c0015ccf:	6a 40                	push   0x40
c0015cd1:	6a 00                	push   0x0
c0015cd3:	8d 44 24 24          	lea    eax,[esp+0x24]
c0015cd7:	50                   	push   eax
c0015cd8:	e8 dd a9 fe ff       	call   c00006ba <memset>
c0015cdd:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0015ce4:	31 d2                	xor    edx,edx
c0015ce6:	83 c4 10             	add    esp,0x10
c0015ce9:	8a 07                	mov    al,BYTE PTR [edi]
c0015ceb:	84 c0                	test   al,al
c0015ced:	0f 84 f6 00 00 00    	je     c0015de9 <Reg::findLineFromLoadedData(char*, char*, char*)+0x153>
c0015cf3:	81 fa c7 00 00 00    	cmp    edx,0xc7
c0015cf9:	0f 8f ea 00 00 00    	jg     c0015de9 <Reg::findLineFromLoadedData(char*, char*, char*)+0x153>
c0015cff:	3c 0a                	cmp    al,0xa
c0015d01:	0f 85 d3 00 00 00    	jne    c0015dda <Reg::findLineFromLoadedData(char*, char*, char*)+0x144>
c0015d07:	c6 44 14 58 00       	mov    BYTE PTR [esp+edx*1+0x58],0x0
c0015d0c:	8a 4c 24 58          	mov    cl,BYTE PTR [esp+0x58]
c0015d10:	f6 c1 df             	test   cl,0xdf
c0015d13:	0f 94 c2             	sete   dl
c0015d16:	80 f9 23             	cmp    cl,0x23
c0015d19:	0f 94 c0             	sete   al
c0015d1c:	08 c2                	or     dl,al
c0015d1e:	75 47                	jne    c0015d67 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd1>
c0015d20:	8d 41 f7             	lea    eax,[ecx-0x9]
c0015d23:	3c 01                	cmp    al,0x1
c0015d25:	76 40                	jbe    c0015d67 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd1>
c0015d27:	80 f9 5b             	cmp    cl,0x5b
c0015d2a:	75 3f                	jne    c0015d6b <Reg::findLineFromLoadedData(char*, char*, char*)+0xd5>
c0015d2c:	80 fb 40             	cmp    bl,0x40
c0015d2f:	75 36                	jne    c0015d67 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd1>
c0015d31:	83 ec 0c             	sub    esp,0xc
c0015d34:	8d 6c 24 65          	lea    ebp,[esp+0x65]
c0015d38:	55                   	push   ebp
c0015d39:	e8 99 a9 fe ff       	call   c00006d7 <strlen>
c0015d3e:	83 c4 10             	add    esp,0x10
c0015d41:	83 f8 3f             	cmp    eax,0x3f
c0015d44:	0f 87 9f 00 00 00    	ja     c0015de9 <Reg::findLineFromLoadedData(char*, char*, char*)+0x153>
c0015d4a:	50                   	push   eax
c0015d4b:	50                   	push   eax
c0015d4c:	55                   	push   ebp
c0015d4d:	8d 6c 24 24          	lea    ebp,[esp+0x24]
c0015d51:	55                   	push   ebp
c0015d52:	e8 02 aa fe ff       	call   c0000759 <strcpy>
c0015d57:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0015d5a:	e8 78 a9 fe ff       	call   c00006d7 <strlen>
c0015d5f:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0015d64:	83 c4 10             	add    esp,0x10
c0015d67:	31 c9                	xor    ecx,ecx
c0015d69:	eb 76                	jmp    c0015de1 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14b>
c0015d6b:	80 fb 40             	cmp    bl,0x40
c0015d6e:	74 06                	je     c0015d76 <Reg::findLineFromLoadedData(char*, char*, char*)+0xe0>
c0015d70:	8d 6c 24 58          	lea    ebp,[esp+0x58]
c0015d74:	eb 19                	jmp    c0015d8f <Reg::findLineFromLoadedData(char*, char*, char*)+0xf9>
c0015d76:	51                   	push   ecx
c0015d77:	51                   	push   ecx
c0015d78:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015d7c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0015d80:	50                   	push   eax
c0015d81:	e8 24 aa fe ff       	call   c00007aa <strcmp>
c0015d86:	83 c4 10             	add    esp,0x10
c0015d89:	85 c0                	test   eax,eax
c0015d8b:	75 da                	jne    c0015d67 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd1>
c0015d8d:	eb e1                	jmp    c0015d70 <Reg::findLineFromLoadedData(char*, char*, char*)+0xda>
c0015d8f:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0015d92:	84 c0                	test   al,al
c0015d94:	0f 94 c1             	sete   cl
c0015d97:	3c 3d                	cmp    al,0x3d
c0015d99:	0f 94 c2             	sete   dl
c0015d9c:	08 d1                	or     cl,dl
c0015d9e:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0015da2:	75 03                	jne    c0015da7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x111>
c0015da4:	45                   	inc    ebp
c0015da5:	eb e8                	jmp    c0015d8f <Reg::findLineFromLoadedData(char*, char*, char*)+0xf9>
c0015da7:	84 c0                	test   al,al
c0015da9:	74 3e                	je     c0015de9 <Reg::findLineFromLoadedData(char*, char*, char*)+0x153>
c0015dab:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0015daf:	52                   	push   edx
c0015db0:	52                   	push   edx
c0015db1:	8d 44 24 60          	lea    eax,[esp+0x60]
c0015db5:	50                   	push   eax
c0015db6:	56                   	push   esi
c0015db7:	e8 ee a9 fe ff       	call   c00007aa <strcmp>
c0015dbc:	83 c4 10             	add    esp,0x10
c0015dbf:	85 c0                	test   eax,eax
c0015dc1:	75 a4                	jne    c0015d67 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd1>
c0015dc3:	50                   	push   eax
c0015dc4:	8d 55 01             	lea    edx,[ebp+0x1]
c0015dc7:	50                   	push   eax
c0015dc8:	52                   	push   edx
c0015dc9:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0015dd0:	e8 84 a9 fe ff       	call   c0000759 <strcpy>
c0015dd5:	83 c4 10             	add    esp,0x10
c0015dd8:	eb 14                	jmp    c0015dee <Reg::findLineFromLoadedData(char*, char*, char*)+0x158>
c0015dda:	8d 4a 01             	lea    ecx,[edx+0x1]
c0015ddd:	88 44 14 58          	mov    BYTE PTR [esp+edx*1+0x58],al
c0015de1:	47                   	inc    edi
c0015de2:	89 ca                	mov    edx,ecx
c0015de4:	e9 00 ff ff ff       	jmp    c0015ce9 <Reg::findLineFromLoadedData(char*, char*, char*)+0x53>
c0015de9:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0015dee:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0015df2:	81 c4 2c 01 00 00    	add    esp,0x12c
c0015df8:	5b                   	pop    ebx
c0015df9:	5e                   	pop    esi
c0015dfa:	5f                   	pop    edi
c0015dfb:	5d                   	pop    ebp
c0015dfc:	c3                   	ret    

c0015dfd <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0015dfd:	57                   	push   edi
c0015dfe:	56                   	push   esi
c0015dff:	53                   	push   ebx
c0015e00:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0015e06:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0015e0d:	8b b4 24 2c 01 00 00 	mov    esi,DWORD PTR [esp+0x12c]
c0015e14:	53                   	push   ebx
c0015e15:	e8 bd a8 fe ff       	call   c00006d7 <strlen>
c0015e1a:	89 34 24             	mov    DWORD PTR [esp],esi
c0015e1d:	89 c7                	mov    edi,eax
c0015e1f:	e8 b3 a8 fe ff       	call   c00006d7 <strlen>
c0015e24:	83 c4 10             	add    esp,0x10
c0015e27:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0015e2b:	31 ff                	xor    edi,edi
c0015e2d:	3d ff 00 00 00       	cmp    eax,0xff
c0015e32:	0f 87 18 01 00 00    	ja     c0015f50 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x153>
c0015e38:	51                   	push   ecx
c0015e39:	51                   	push   ecx
c0015e3a:	56                   	push   esi
c0015e3b:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0015e3f:	56                   	push   esi
c0015e40:	e8 14 a9 fe ff       	call   c0000759 <strcpy>
c0015e45:	58                   	pop    eax
c0015e46:	5a                   	pop    edx
c0015e47:	68 54 2c 02 c0       	push   0xc0022c54
c0015e4c:	56                   	push   esi
c0015e4d:	e8 be a9 fe ff       	call   c0000810 <strcat>
c0015e52:	59                   	pop    ecx
c0015e53:	58                   	pop    eax
c0015e54:	53                   	push   ebx
c0015e55:	56                   	push   esi
c0015e56:	e8 b5 a9 fe ff       	call   c0000810 <strcat>
c0015e5b:	58                   	pop    eax
c0015e5c:	5a                   	pop    edx
c0015e5d:	68 82 28 02 c0       	push   0xc0022882
c0015e62:	56                   	push   esi
c0015e63:	e8 a8 a9 fe ff       	call   c0000810 <strcat>
c0015e68:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0015e6f:	e8 ce 91 ff ff       	call   c000f042 <operator new(unsigned long)>
c0015e74:	83 c4 0c             	add    esp,0xc
c0015e77:	89 c3                	mov    ebx,eax
c0015e79:	ff 35 d4 59 02 c0    	push   DWORD PTR ds:0xc00259d4
c0015e7f:	56                   	push   esi
c0015e80:	50                   	push   eax
c0015e81:	e8 28 98 ff ff       	call   c000f6ae <File::File(char const*, Process*)>
c0015e86:	59                   	pop    ecx
c0015e87:	5e                   	pop    esi
c0015e88:	6a 01                	push   0x1
c0015e8a:	53                   	push   ebx
c0015e8b:	e8 82 98 ff ff       	call   c000f712 <File::open(FileOpenMode)>
c0015e90:	83 c4 10             	add    esp,0x10
c0015e93:	85 c0                	test   eax,eax
c0015e95:	74 08                	je     c0015e9f <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa2>
c0015e97:	83 ec 0c             	sub    esp,0xc
c0015e9a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015e9c:	53                   	push   ebx
c0015e9d:	eb 2e                	jmp    c0015ecd <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xd0>
c0015e9f:	52                   	push   edx
c0015ea0:	8d 44 24 07          	lea    eax,[esp+0x7]
c0015ea4:	50                   	push   eax
c0015ea5:	8d 44 24 10          	lea    eax,[esp+0x10]
c0015ea9:	50                   	push   eax
c0015eaa:	53                   	push   ebx
c0015eab:	e8 0e 9b ff ff       	call   c000f9be <File::stat(unsigned long long*, bool*)>
c0015eb0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015eb4:	83 c4 10             	add    esp,0x10
c0015eb7:	89 c1                	mov    ecx,eax
c0015eb9:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c0015ebd:	75 13                	jne    c0015ed2 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xd5>
c0015ebf:	83 ec 0c             	sub    esp,0xc
c0015ec2:	53                   	push   ebx
c0015ec3:	e8 a8 98 ff ff       	call   c000f770 <File::close()>
c0015ec8:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015eca:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015ecd:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015ed0:	eb 7b                	jmp    c0015f4d <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x150>
c0015ed2:	83 ec 0c             	sub    esp,0xc
c0015ed5:	50                   	push   eax
c0015ed6:	e8 2e 61 ff ff       	call   c000c009 <malloc>
c0015edb:	89 c6                	mov    esi,eax
c0015edd:	58                   	pop    eax
c0015ede:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015ee0:	8d 54 24 10          	lea    edx,[esp+0x10]
c0015ee4:	52                   	push   edx
c0015ee5:	56                   	push   esi
c0015ee6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015eea:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015eee:	53                   	push   ebx
c0015eef:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015ef2:	83 c4 20             	add    esp,0x20
c0015ef5:	85 c0                	test   eax,eax
c0015ef7:	75 0a                	jne    c0015f03 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0015ef9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015efd:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0015f01:	74 18                	je     c0015f1b <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x11e>
c0015f03:	83 ec 0c             	sub    esp,0xc
c0015f06:	31 ff                	xor    edi,edi
c0015f08:	53                   	push   ebx
c0015f09:	e8 62 98 ff ff       	call   c000f770 <File::close()>
c0015f0e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015f10:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015f13:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015f16:	83 c4 10             	add    esp,0x10
c0015f19:	eb 35                	jmp    c0015f50 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x153>
c0015f1b:	83 ec 0c             	sub    esp,0xc
c0015f1e:	53                   	push   ebx
c0015f1f:	e8 4c 98 ff ff       	call   c000f770 <File::close()>
c0015f24:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015f26:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015f29:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015f2c:	83 c4 0c             	add    esp,0xc
c0015f2f:	ff b4 24 30 01 00 00 	push   DWORD PTR [esp+0x130]
c0015f36:	ff b4 24 30 01 00 00 	push   DWORD PTR [esp+0x130]
c0015f3d:	56                   	push   esi
c0015f3e:	e8 53 fd ff ff       	call   c0015c96 <Reg::findLineFromLoadedData(char*, char*, char*)>
c0015f43:	89 34 24             	mov    DWORD PTR [esp],esi
c0015f46:	89 c7                	mov    edi,eax
c0015f48:	e8 cc 60 ff ff       	call   c000c019 <free>
c0015f4d:	83 c4 10             	add    esp,0x10
c0015f50:	81 c4 10 01 00 00    	add    esp,0x110
c0015f56:	89 f8                	mov    eax,edi
c0015f58:	5b                   	pop    ebx
c0015f59:	5e                   	pop    esi
c0015f5a:	5f                   	pop    edi
c0015f5b:	c3                   	ret    

c0015f5c <Reg::getLine(char*, char*, char*)>:
c0015f5c:	57                   	push   edi
c0015f5d:	56                   	push   esi
c0015f5e:	53                   	push   ebx
c0015f5f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0015f63:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015f67:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0015f6b:	57                   	push   edi
c0015f6c:	56                   	push   esi
c0015f6d:	53                   	push   ebx
c0015f6e:	68 87 28 02 c0       	push   0xc0022887
c0015f73:	e8 85 fe ff ff       	call   c0015dfd <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0015f78:	83 c4 10             	add    esp,0x10
c0015f7b:	84 c0                	test   al,al
c0015f7d:	75 10                	jne    c0015f8f <Reg::getLine(char*, char*, char*)+0x33>
c0015f7f:	57                   	push   edi
c0015f80:	56                   	push   esi
c0015f81:	53                   	push   ebx
c0015f82:	68 ac 28 02 c0       	push   0xc00228ac
c0015f87:	e8 71 fe ff ff       	call   c0015dfd <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0015f8c:	83 c4 10             	add    esp,0x10
c0015f8f:	5b                   	pop    ebx
c0015f90:	5e                   	pop    esi
c0015f91:	5f                   	pop    edi
c0015f92:	c3                   	ret    

c0015f93 <Reg::readInt(char*, char*, int*)>:
c0015f93:	55                   	push   ebp
c0015f94:	57                   	push   edi
c0015f95:	56                   	push   esi
c0015f96:	53                   	push   ebx
c0015f97:	81 ec f0 00 00 00    	sub    esp,0xf0
c0015f9d:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0015fa1:	57                   	push   edi
c0015fa2:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0015fa9:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0015fb0:	e8 a7 ff ff ff       	call   c0015f5c <Reg::getLine(char*, char*, char*)>
c0015fb5:	83 c4 10             	add    esp,0x10
c0015fb8:	84 c0                	test   al,al
c0015fba:	0f 84 b2 00 00 00    	je     c0016072 <Reg::readInt(char*, char*, int*)+0xdf>
c0015fc0:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0015fc4:	80 fa 2b             	cmp    dl,0x2b
c0015fc7:	74 0c                	je     c0015fd5 <Reg::readInt(char*, char*, int*)+0x42>
c0015fc9:	80 fa 2d             	cmp    dl,0x2d
c0015fcc:	75 0e                	jne    c0015fdc <Reg::readInt(char*, char*, int*)+0x49>
c0015fce:	ba 01 00 00 00       	mov    edx,0x1
c0015fd3:	eb 0b                	jmp    c0015fe0 <Reg::readInt(char*, char*, int*)+0x4d>
c0015fd5:	ba 01 00 00 00       	mov    edx,0x1
c0015fda:	eb 02                	jmp    c0015fde <Reg::readInt(char*, char*, int*)+0x4b>
c0015fdc:	31 d2                	xor    edx,edx
c0015fde:	31 c0                	xor    eax,eax
c0015fe0:	be 0a 00 00 00       	mov    esi,0xa
c0015fe5:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0015fea:	75 20                	jne    c001600c <Reg::readInt(char*, char*, int*)+0x79>
c0015fec:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c0015ff0:	80 f9 78             	cmp    cl,0x78
c0015ff3:	75 0a                	jne    c0015fff <Reg::readInt(char*, char*, int*)+0x6c>
c0015ff5:	83 c2 02             	add    edx,0x2
c0015ff8:	be 10 00 00 00       	mov    esi,0x10
c0015ffd:	eb 0d                	jmp    c001600c <Reg::readInt(char*, char*, int*)+0x79>
c0015fff:	80 f9 62             	cmp    cl,0x62
c0016002:	75 08                	jne    c001600c <Reg::readInt(char*, char*, int*)+0x79>
c0016004:	83 c2 02             	add    edx,0x2
c0016007:	be 02 00 00 00       	mov    esi,0x2
c001600c:	01 d7                	add    edi,edx
c001600e:	31 d2                	xor    edx,edx
c0016010:	8a 1f                	mov    bl,BYTE PTR [edi]
c0016012:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c0016016:	84 db                	test   bl,bl
c0016018:	0f 94 c3             	sete   bl
c001601b:	80 7c 24 0f 0d       	cmp    BYTE PTR [esp+0xf],0xd
c0016020:	0f 94 c1             	sete   cl
c0016023:	08 cb                	or     bl,cl
c0016025:	75 3a                	jne    c0016061 <Reg::readInt(char*, char*, int*)+0xce>
c0016027:	0f af d6             	imul   edx,esi
c001602a:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001602f:	83 fe 10             	cmp    esi,0x10
c0016032:	75 26                	jne    c001605a <Reg::readInt(char*, char*, int*)+0xc7>
c0016034:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0016038:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001603b:	89 e9                	mov    ecx,ebp
c001603d:	80 f9 05             	cmp    cl,0x5
c0016040:	77 06                	ja     c0016048 <Reg::readInt(char*, char*, int*)+0xb5>
c0016042:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c0016046:	eb 16                	jmp    c001605e <Reg::readInt(char*, char*, int*)+0xcb>
c0016048:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001604c:	83 e9 61             	sub    ecx,0x61
c001604f:	80 f9 05             	cmp    cl,0x5
c0016052:	77 06                	ja     c001605a <Reg::readInt(char*, char*, int*)+0xc7>
c0016054:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c0016058:	eb 04                	jmp    c001605e <Reg::readInt(char*, char*, int*)+0xcb>
c001605a:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001605e:	47                   	inc    edi
c001605f:	eb af                	jmp    c0016010 <Reg::readInt(char*, char*, int*)+0x7d>
c0016061:	84 c0                	test   al,al
c0016063:	74 02                	je     c0016067 <Reg::readInt(char*, char*, int*)+0xd4>
c0016065:	f7 da                	neg    edx
c0016067:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001606e:	89 10                	mov    DWORD PTR [eax],edx
c0016070:	88 d8                	mov    al,bl
c0016072:	81 c4 ec 00 00 00    	add    esp,0xec
c0016078:	5b                   	pop    ebx
c0016079:	5e                   	pop    esi
c001607a:	5f                   	pop    edi
c001607b:	5d                   	pop    ebp
c001607c:	c3                   	ret    

c001607d <Reg::readString(char*, char*, char*, int)>:
c001607d:	57                   	push   edi
c001607e:	56                   	push   esi
c001607f:	53                   	push   ebx
c0016080:	81 ec d4 00 00 00    	sub    esp,0xd4
c0016086:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001608a:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0016091:	57                   	push   edi
c0016092:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0016099:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c00160a0:	e8 b7 fe ff ff       	call   c0015f5c <Reg::getLine(char*, char*, char*)>
c00160a5:	83 c4 10             	add    esp,0x10
c00160a8:	89 c6                	mov    esi,eax
c00160aa:	84 c0                	test   al,al
c00160ac:	74 44                	je     c00160f2 <Reg::readString(char*, char*, char*, int)+0x75>
c00160ae:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c00160b5:	31 c0                	xor    eax,eax
c00160b7:	4a                   	dec    edx
c00160b8:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c00160bb:	84 c9                	test   cl,cl
c00160bd:	74 0f                	je     c00160ce <Reg::readString(char*, char*, char*, int)+0x51>
c00160bf:	39 c2                	cmp    edx,eax
c00160c1:	7e 0b                	jle    c00160ce <Reg::readString(char*, char*, char*, int)+0x51>
c00160c3:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c00160c6:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c00160cb:	40                   	inc    eax
c00160cc:	eb ea                	jmp    c00160b8 <Reg::readString(char*, char*, char*, int)+0x3b>
c00160ce:	83 ec 0c             	sub    esp,0xc
c00160d1:	53                   	push   ebx
c00160d2:	e8 00 a6 fe ff       	call   c00006d7 <strlen>
c00160d7:	83 c4 10             	add    esp,0x10
c00160da:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c00160df:	75 11                	jne    c00160f2 <Reg::readString(char*, char*, char*, int)+0x75>
c00160e1:	83 ec 0c             	sub    esp,0xc
c00160e4:	53                   	push   ebx
c00160e5:	e8 ed a5 fe ff       	call   c00006d7 <strlen>
c00160ea:	83 c4 10             	add    esp,0x10
c00160ed:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c00160f2:	81 c4 d0 00 00 00    	add    esp,0xd0
c00160f8:	89 f0                	mov    eax,esi
c00160fa:	5b                   	pop    ebx
c00160fb:	5e                   	pop    esi
c00160fc:	5f                   	pop    edi
c00160fd:	c3                   	ret    

c00160fe <Reg::readBool(char*, char*, bool*)>:
c00160fe:	83 ec 20             	sub    esp,0x20
c0016101:	8d 44 24 10          	lea    eax,[esp+0x10]
c0016105:	50                   	push   eax
c0016106:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001610a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001610e:	e8 80 fe ff ff       	call   c0015f93 <Reg::readInt(char*, char*, int*)>
c0016113:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0016117:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001611c:	0f 95 02             	setne  BYTE PTR [edx]
c001611f:	83 c4 2c             	add    esp,0x2c
c0016122:	c3                   	ret    

c0016123 <Reg::readBoolWithDefault(char*, char*, bool)>:
c0016123:	53                   	push   ebx
c0016124:	83 ec 1c             	sub    esp,0x1c
c0016127:	8d 44 24 13          	lea    eax,[esp+0x13]
c001612b:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001612f:	50                   	push   eax
c0016130:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016134:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016138:	e8 c1 ff ff ff       	call   c00160fe <Reg::readBool(char*, char*, bool*)>
c001613d:	83 c4 10             	add    esp,0x10
c0016140:	84 c0                	test   al,al
c0016142:	74 04                	je     c0016148 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0016144:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0016148:	83 c4 18             	add    esp,0x18
c001614b:	88 d8                	mov    al,bl
c001614d:	5b                   	pop    ebx
c001614e:	c3                   	ret    

c001614f <Reg::readIntWithDefault(char*, char*, int)>:
c001614f:	53                   	push   ebx
c0016150:	83 ec 1c             	sub    esp,0x1c
c0016153:	8d 44 24 10          	lea    eax,[esp+0x10]
c0016157:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001615b:	50                   	push   eax
c001615c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016160:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016164:	e8 2a fe ff ff       	call   c0015f93 <Reg::readInt(char*, char*, int*)>
c0016169:	83 c4 10             	add    esp,0x10
c001616c:	84 c0                	test   al,al
c001616e:	74 04                	je     c0016174 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0016170:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0016174:	83 c4 18             	add    esp,0x18
c0016177:	89 d8                	mov    eax,ebx
c0016179:	5b                   	pop    ebx
c001617a:	c3                   	ret    

c001617b <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001617b:	56                   	push   esi
c001617c:	53                   	push   ebx
c001617d:	51                   	push   ecx
c001617e:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0016182:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0016186:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001618a:	56                   	push   esi
c001618b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001618f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016193:	e8 e5 fe ff ff       	call   c001607d <Reg::readString(char*, char*, char*, int)>
c0016198:	83 c4 10             	add    esp,0x10
c001619b:	84 c0                	test   al,al
c001619d:	74 02                	je     c00161a1 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x26>
c001619f:	89 f3                	mov    ebx,esi
c00161a1:	5a                   	pop    edx
c00161a2:	89 d8                	mov    eax,ebx
c00161a4:	5b                   	pop    ebx
c00161a5:	5e                   	pop    esi
c00161a6:	c3                   	ret    

c00161a7 <Sys::exit(regs*)>:
c00161a7:	83 ec 18             	sub    esp,0x18
c00161aa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00161ae:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00161b1:	e8 a6 31 00 00       	call   c001935c <terminateTask(int)>
c00161b6:	83 c8 ff             	or     eax,0xffffffff
c00161b9:	89 c2                	mov    edx,eax
c00161bb:	83 c4 1c             	add    esp,0x1c
c00161be:	c3                   	ret    

c00161bf <Sys::loadDLL(regs*)>:
c00161bf:	56                   	push   esi
c00161c0:	31 d2                	xor    edx,edx
c00161c2:	53                   	push   ebx
c00161c3:	b8 01 00 00 00       	mov    eax,0x1
c00161c8:	51                   	push   ecx
c00161c9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00161cd:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c00161d1:	74 7d                	je     c0016250 <Sys::loadDLL(regs*)+0x91>
c00161d3:	83 ec 0c             	sub    esp,0xc
c00161d6:	68 14 01 00 00       	push   0x114
c00161db:	e8 62 8e ff ff       	call   c000f042 <operator new(unsigned long)>
c00161e0:	89 c3                	mov    ebx,eax
c00161e2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00161e7:	83 c4 0c             	add    esp,0xc
c00161ea:	ff 70 40             	push   DWORD PTR [eax+0x40]
c00161ed:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00161f0:	53                   	push   ebx
c00161f1:	e8 b8 94 ff ff       	call   c000f6ae <File::File(char const*, Process*)>
c00161f6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00161f9:	e8 82 97 ff ff       	call   c000f980 <File::exists()>
c00161fe:	83 c4 10             	add    esp,0x10
c0016201:	84 c0                	test   al,al
c0016203:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016205:	75 11                	jne    c0016218 <Sys::loadDLL(regs*)+0x59>
c0016207:	83 ec 0c             	sub    esp,0xc
c001620a:	53                   	push   ebx
c001620b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001620e:	83 c4 10             	add    esp,0x10
c0016211:	b8 03 00 00 00       	mov    eax,0x3
c0016216:	eb 36                	jmp    c001624e <Sys::loadDLL(regs*)+0x8f>
c0016218:	83 ec 0c             	sub    esp,0xc
c001621b:	53                   	push   ebx
c001621c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001621f:	58                   	pop    eax
c0016220:	5a                   	pop    edx
c0016221:	6a 00                	push   0x0
c0016223:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0016226:	e8 1f 21 00 00       	call   c001834a <Thr::loadDLL(char const*, bool)>
c001622b:	83 c4 10             	add    esp,0x10
c001622e:	89 c1                	mov    ecx,eax
c0016230:	31 d2                	xor    edx,edx
c0016232:	b8 04 00 00 00       	mov    eax,0x4
c0016237:	85 c9                	test   ecx,ecx
c0016239:	74 15                	je     c0016250 <Sys::loadDLL(regs*)+0x91>
c001623b:	53                   	push   ebx
c001623c:	53                   	push   ebx
c001623d:	ff 35 88 45 02 c0    	push   DWORD PTR ds:0xc0024588
c0016243:	51                   	push   ecx
c0016244:	e8 c7 22 00 00       	call   c0018510 <Thr::executeDLL(unsigned long, void*)>
c0016249:	83 c4 10             	add    esp,0x10
c001624c:	31 c0                	xor    eax,eax
c001624e:	31 d2                	xor    edx,edx
c0016250:	59                   	pop    ecx
c0016251:	5b                   	pop    ebx
c0016252:	5e                   	pop    esi
c0016253:	c3                   	ret    

c0016254 <Sys::read(regs*)>:
c0016254:	57                   	push   edi
c0016255:	56                   	push   esi
c0016256:	53                   	push   ebx
c0016257:	83 ec 10             	sub    esp,0x10
c001625a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001625e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016261:	83 f8 02             	cmp    eax,0x2
c0016264:	77 10                	ja     c0016276 <Sys::read(regs*)+0x22>
c0016266:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001626b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001626e:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0016274:	eb 0e                	jmp    c0016284 <Sys::read(regs*)+0x30>
c0016276:	83 ec 0c             	sub    esp,0xc
c0016279:	50                   	push   eax
c001627a:	e8 82 7d ff ff       	call   c000e001 <getFromFileDescriptor(int)>
c001627f:	83 c4 10             	add    esp,0x10
c0016282:	89 c1                	mov    ecx,eax
c0016284:	83 c8 ff             	or     eax,0xffffffff
c0016287:	85 c9                	test   ecx,ecx
c0016289:	89 c2                	mov    edx,eax
c001628b:	74 28                	je     c00162b5 <Sys::read(regs*)+0x61>
c001628d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0016295:	83 ec 0c             	sub    esp,0xc
c0016298:	8b 01                	mov    eax,DWORD PTR [ecx]
c001629a:	31 ff                	xor    edi,edi
c001629c:	8d 54 24 18          	lea    edx,[esp+0x18]
c00162a0:	52                   	push   edx
c00162a1:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00162a4:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00162a7:	57                   	push   edi
c00162a8:	56                   	push   esi
c00162a9:	51                   	push   ecx
c00162aa:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00162ad:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00162b1:	83 c4 20             	add    esp,0x20
c00162b4:	99                   	cdq    
c00162b5:	83 c4 10             	add    esp,0x10
c00162b8:	5b                   	pop    ebx
c00162b9:	5e                   	pop    esi
c00162ba:	5f                   	pop    edi
c00162bb:	c3                   	ret    

c00162bc <Sys::sbrk(regs*)>:
c00162bc:	56                   	push   esi
c00162bd:	53                   	push   ebx
c00162be:	50                   	push   eax
c00162bf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00162c4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00162c8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00162cb:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c00162ce:	85 db                	test   ebx,ebx
c00162d0:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c00162d6:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c00162d9:	74 02                	je     c00162dd <Sys::sbrk(regs*)+0x21>
c00162db:	79 06                	jns    c00162e3 <Sys::sbrk(regs*)+0x27>
c00162dd:	89 f0                	mov    eax,esi
c00162df:	31 d2                	xor    edx,edx
c00162e1:	eb 2a                	jmp    c001630d <Sys::sbrk(regs*)+0x51>
c00162e3:	83 c8 ff             	or     eax,0xffffffff
c00162e6:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c00162ec:	89 c2                	mov    edx,eax
c00162ee:	77 1d                	ja     c001630d <Sys::sbrk(regs*)+0x51>
c00162f0:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c00162f6:	50                   	push   eax
c00162f7:	c1 ea 0c             	shr    edx,0xc
c00162fa:	68 07 04 00 00       	push   0x407
c00162ff:	52                   	push   edx
c0016300:	51                   	push   ecx
c0016301:	e8 24 86 ff ff       	call   c000e92a <VAS::allocatePages(int, int)>
c0016306:	89 f0                	mov    eax,esi
c0016308:	31 d2                	xor    edx,edx
c001630a:	83 c4 10             	add    esp,0x10
c001630d:	59                   	pop    ecx
c001630e:	5b                   	pop    ebx
c001630f:	5e                   	pop    esi
c0016310:	c3                   	ret    

c0016311 <Sys::write(regs*)>:
c0016311:	57                   	push   edi
c0016312:	56                   	push   esi
c0016313:	53                   	push   ebx
c0016314:	83 ec 10             	sub    esp,0x10
c0016317:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001631b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001631e:	83 f8 02             	cmp    eax,0x2
c0016321:	77 10                	ja     c0016333 <Sys::write(regs*)+0x22>
c0016323:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016328:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001632b:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0016331:	eb 0e                	jmp    c0016341 <Sys::write(regs*)+0x30>
c0016333:	83 ec 0c             	sub    esp,0xc
c0016336:	50                   	push   eax
c0016337:	e8 c5 7c ff ff       	call   c000e001 <getFromFileDescriptor(int)>
c001633c:	83 c4 10             	add    esp,0x10
c001633f:	89 c1                	mov    ecx,eax
c0016341:	83 c8 ff             	or     eax,0xffffffff
c0016344:	85 c9                	test   ecx,ecx
c0016346:	89 c2                	mov    edx,eax
c0016348:	74 28                	je     c0016372 <Sys::write(regs*)+0x61>
c001634a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0016352:	31 ff                	xor    edi,edi
c0016354:	83 ec 0c             	sub    esp,0xc
c0016357:	8b 01                	mov    eax,DWORD PTR [ecx]
c0016359:	8d 54 24 18          	lea    edx,[esp+0x18]
c001635d:	52                   	push   edx
c001635e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016361:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0016364:	57                   	push   edi
c0016365:	56                   	push   esi
c0016366:	51                   	push   ecx
c0016367:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001636a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001636e:	83 c4 20             	add    esp,0x20
c0016371:	99                   	cdq    
c0016372:	83 c4 10             	add    esp,0x10
c0016375:	5b                   	pop    ebx
c0016376:	5e                   	pop    esi
c0016377:	5f                   	pop    edi
c0016378:	c3                   	ret    

c0016379 <Sys::yield(regs*)>:
c0016379:	83 ec 0c             	sub    esp,0xc
c001637c:	e8 ae 25 00 00       	call   c001892f <lockScheduler()>
c0016381:	e8 f2 28 00 00       	call   c0018c78 <schedule()>
c0016386:	e8 a6 25 00 00       	call   c0018931 <unlockScheduler()>
c001638b:	31 c0                	xor    eax,eax
c001638d:	31 d2                	xor    edx,edx
c001638f:	83 c4 0c             	add    esp,0xc
c0016392:	c3                   	ret    

c0016393 <sysCallGetPID(regs*)>:
c0016393:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016398:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001639b:	8b 00                	mov    eax,DWORD PTR [eax]
c001639d:	89 c2                	mov    edx,eax
c001639f:	c1 fa 1f             	sar    edx,0x1f
c00163a2:	c3                   	ret    

c00163a3 <sysCallSeekDir(regs*)>:
c00163a3:	31 c0                	xor    eax,eax
c00163a5:	31 d2                	xor    edx,edx
c00163a7:	c3                   	ret    

c00163a8 <sysCallTellDir(regs*)>:
c00163a8:	31 c0                	xor    eax,eax
c00163aa:	31 d2                	xor    edx,edx
c00163ac:	c3                   	ret    

c00163ad <sysCallVerify(regs*)>:
c00163ad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00163b1:	31 d2                	xor    edx,edx
c00163b3:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00163b6:	c3                   	ret    

c00163b7 <sysCallFork(regs*)>:
c00163b7:	83 c8 ff             	or     eax,0xffffffff
c00163ba:	83 ca ff             	or     edx,0xffffffff
c00163bd:	c3                   	ret    

c00163be <sysCallExecve(regs*)>:
c00163be:	83 c8 ff             	or     eax,0xffffffff
c00163c1:	83 ca ff             	or     edx,0xffffffff
c00163c4:	c3                   	ret    

c00163c5 <sysCallGetArgc(regs*)>:
c00163c5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00163ca:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00163cd:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c00163d3:	89 c2                	mov    edx,eax
c00163d5:	c1 fa 1f             	sar    edx,0x1f
c00163d8:	c3                   	ret    

c00163d9 <sysFormatDisk(regs*)>:
c00163d9:	56                   	push   esi
c00163da:	53                   	push   ebx
c00163db:	50                   	push   eax
c00163dc:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00163e0:	8b 1d e8 46 02 c0    	mov    ebx,DWORD PTR ds:0xc00246e8
c00163e6:	eb 2a                	jmp    c0016412 <sysFormatDisk(regs*)+0x39>
c00163e8:	83 ec 0c             	sub    esp,0xc
c00163eb:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c00163ee:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00163f1:	8b 13                	mov    edx,DWORD PTR [ebx]
c00163f3:	51                   	push   ecx
c00163f4:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c00163f7:	51                   	push   ecx
c00163f8:	50                   	push   eax
c00163f9:	8b 04 85 80 4b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb480]
c0016400:	50                   	push   eax
c0016401:	53                   	push   ebx
c0016402:	ff 52 48             	call   DWORD PTR [edx+0x48]
c0016405:	83 c4 20             	add    esp,0x20
c0016408:	89 c1                	mov    ecx,eax
c001640a:	83 f8 08             	cmp    eax,0x8
c001640d:	75 12                	jne    c0016421 <sysFormatDisk(regs*)+0x48>
c001640f:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0016412:	85 db                	test   ebx,ebx
c0016414:	75 d2                	jne    c00163e8 <sysFormatDisk(regs*)+0xf>
c0016416:	b8 03 00 00 00       	mov    eax,0x3
c001641b:	31 d2                	xor    edx,edx
c001641d:	59                   	pop    ecx
c001641e:	5b                   	pop    ebx
c001641f:	5e                   	pop    esi
c0016420:	c3                   	ret    
c0016421:	85 c0                	test   eax,eax
c0016423:	74 13                	je     c0016438 <sysFormatDisk(regs*)+0x5f>
c0016425:	31 d2                	xor    edx,edx
c0016427:	b8 01 00 00 00       	mov    eax,0x1
c001642c:	83 f9 09             	cmp    ecx,0x9
c001642f:	74 ec                	je     c001641d <sysFormatDisk(regs*)+0x44>
c0016431:	b8 02 00 00 00       	mov    eax,0x2
c0016436:	eb e3                	jmp    c001641b <sysFormatDisk(regs*)+0x42>
c0016438:	31 c0                	xor    eax,eax
c001643a:	eb df                	jmp    c001641b <sysFormatDisk(regs*)+0x42>

c001643c <sysSetDiskVolumeLabel(regs*)>:
c001643c:	56                   	push   esi
c001643d:	53                   	push   ebx
c001643e:	53                   	push   ebx
c001643f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016443:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0016446:	83 f8 19             	cmp    eax,0x19
c0016449:	77 2d                	ja     c0016478 <sysSetDiskVolumeLabel(regs*)+0x3c>
c001644b:	8b 0c 85 80 4b 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdb480]
c0016452:	85 c9                	test   ecx,ecx
c0016454:	74 22                	je     c0016478 <sysSetDiskVolumeLabel(regs*)+0x3c>
c0016456:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c0016459:	85 d2                	test   edx,edx
c001645b:	74 1b                	je     c0016478 <sysSetDiskVolumeLabel(regs*)+0x3c>
c001645d:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c0016463:	8b 33                	mov    esi,DWORD PTR [ebx]
c0016465:	52                   	push   edx
c0016466:	50                   	push   eax
c0016467:	51                   	push   ecx
c0016468:	53                   	push   ebx
c0016469:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001646c:	83 c4 10             	add    esp,0x10
c001646f:	89 c2                	mov    edx,eax
c0016471:	c1 fa 1f             	sar    edx,0x1f
c0016474:	59                   	pop    ecx
c0016475:	5b                   	pop    ebx
c0016476:	5e                   	pop    esi
c0016477:	c3                   	ret    
c0016478:	59                   	pop    ecx
c0016479:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001647e:	5b                   	pop    ebx
c001647f:	83 ca ff             	or     edx,0xffffffff
c0016482:	5e                   	pop    esi
c0016483:	c3                   	ret    

c0016484 <sysGetDiskVolumeLabel(regs*)>:
c0016484:	57                   	push   edi
c0016485:	56                   	push   esi
c0016486:	53                   	push   ebx
c0016487:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001648b:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001648e:	83 fa 19             	cmp    edx,0x19
c0016491:	77 38                	ja     c00164cb <sysGetDiskVolumeLabel(regs*)+0x47>
c0016493:	8b 0c 95 80 4b 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffdb480]
c001649a:	85 c9                	test   ecx,ecx
c001649c:	74 2d                	je     c00164cb <sysGetDiskVolumeLabel(regs*)+0x47>
c001649e:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c00164a1:	85 db                	test   ebx,ebx
c00164a3:	74 26                	je     c00164cb <sysGetDiskVolumeLabel(regs*)+0x47>
c00164a5:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00164a8:	85 c0                	test   eax,eax
c00164aa:	74 1f                	je     c00164cb <sysGetDiskVolumeLabel(regs*)+0x47>
c00164ac:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c00164b2:	83 ec 0c             	sub    esp,0xc
c00164b5:	8b 3e                	mov    edi,DWORD PTR [esi]
c00164b7:	50                   	push   eax
c00164b8:	53                   	push   ebx
c00164b9:	52                   	push   edx
c00164ba:	51                   	push   ecx
c00164bb:	56                   	push   esi
c00164bc:	ff 57 54             	call   DWORD PTR [edi+0x54]
c00164bf:	83 c4 20             	add    esp,0x20
c00164c2:	89 c2                	mov    edx,eax
c00164c4:	c1 fa 1f             	sar    edx,0x1f
c00164c7:	5b                   	pop    ebx
c00164c8:	5e                   	pop    esi
c00164c9:	5f                   	pop    edi
c00164ca:	c3                   	ret    
c00164cb:	5b                   	pop    ebx
c00164cc:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00164d1:	5e                   	pop    esi
c00164d2:	83 ca ff             	or     edx,0xffffffff
c00164d5:	5f                   	pop    edi
c00164d6:	c3                   	ret    

c00164d7 <sysShutdown(regs*)>:
c00164d7:	57                   	push   edi
c00164d8:	56                   	push   esi
c00164d9:	56                   	push   esi
c00164da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164de:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00164e1:	85 c0                	test   eax,eax
c00164e3:	74 18                	je     c00164fd <sysShutdown(regs*)+0x26>
c00164e5:	83 f8 01             	cmp    eax,0x1
c00164e8:	74 51                	je     c001653b <sysShutdown(regs*)+0x64>
c00164ea:	83 ce ff             	or     esi,0xffffffff
c00164ed:	83 cf ff             	or     edi,0xffffffff
c00164f0:	83 f8 02             	cmp    eax,0x2
c00164f3:	74 2a                	je     c001651f <sysShutdown(regs*)+0x48>
c00164f5:	59                   	pop    ecx
c00164f6:	89 f0                	mov    eax,esi
c00164f8:	5e                   	pop    esi
c00164f9:	89 fa                	mov    edx,edi
c00164fb:	5f                   	pop    edi
c00164fc:	c3                   	ret    
c00164fd:	a1 88 45 02 c0       	mov    eax,ds:0xc0024588
c0016502:	83 ce ff             	or     esi,0xffffffff
c0016505:	83 cf ff             	or     edi,0xffffffff
c0016508:	8b 10                	mov    edx,DWORD PTR [eax]
c001650a:	6a 00                	push   0x0
c001650c:	6a 00                	push   0x0
c001650e:	6a 00                	push   0x0
c0016510:	50                   	push   eax
c0016511:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0016514:	83 c4 10             	add    esp,0x10
c0016517:	89 f0                	mov    eax,esi
c0016519:	89 fa                	mov    edx,edi
c001651b:	59                   	pop    ecx
c001651c:	5e                   	pop    esi
c001651d:	5f                   	pop    edi
c001651e:	c3                   	ret    
c001651f:	a1 88 45 02 c0       	mov    eax,ds:0xc0024588
c0016524:	8b 10                	mov    edx,DWORD PTR [eax]
c0016526:	6a 00                	push   0x0
c0016528:	6a 00                	push   0x0
c001652a:	6a 01                	push   0x1
c001652c:	50                   	push   eax
c001652d:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0016530:	83 c4 10             	add    esp,0x10
c0016533:	89 f0                	mov    eax,esi
c0016535:	89 fa                	mov    edx,edi
c0016537:	59                   	pop    ecx
c0016538:	5e                   	pop    esi
c0016539:	5f                   	pop    edi
c001653a:	c3                   	ret    
c001653b:	a1 00 4c 02 c0       	mov    eax,ds:0xc0024c00
c0016540:	85 c0                	test   eax,eax
c0016542:	74 02                	je     c0016546 <sysShutdown(regs*)+0x6f>
c0016544:	ff d0                	call   eax
c0016546:	31 f6                	xor    esi,esi
c0016548:	59                   	pop    ecx
c0016549:	31 ff                	xor    edi,edi
c001654b:	89 f0                	mov    eax,esi
c001654d:	5e                   	pop    esi
c001654e:	89 fa                	mov    edx,edi
c0016550:	5f                   	pop    edi
c0016551:	c3                   	ret    

c0016552 <sysCallGetCwd(regs*)>:
c0016552:	83 ec 10             	sub    esp,0x10
c0016555:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016559:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001655c:	52                   	push   edx
c001655d:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0016560:	51                   	push   ecx
c0016561:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016566:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016569:	50                   	push   eax
c001656a:	e8 b0 94 ff ff       	call   c000fa1f <getcwd(Process*, char*, int)>
c001656f:	89 c2                	mov    edx,eax
c0016571:	83 c4 1c             	add    esp,0x1c
c0016574:	c1 fa 1f             	sar    edx,0x1f
c0016577:	c3                   	ret    

c0016578 <sysCallSetCwd(regs*)>:
c0016578:	83 ec 14             	sub    esp,0x14
c001657b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001657f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0016582:	50                   	push   eax
c0016583:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016588:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c001658b:	52                   	push   edx
c001658c:	e8 b8 94 ff ff       	call   c000fa49 <setcwd(Process*, char*)>
c0016591:	89 c2                	mov    edx,eax
c0016593:	83 c4 1c             	add    esp,0x1c
c0016596:	c1 fa 1f             	sar    edx,0x1f
c0016599:	c3                   	ret    

c001659a <sysCallRealpath(regs*)>:
c001659a:	53                   	push   ebx
c001659b:	83 ec 08             	sub    esp,0x8
c001659e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00165a2:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c00165a5:	85 c9                	test   ecx,ecx
c00165a7:	74 35                	je     c00165de <sysCallRealpath(regs*)+0x44>
c00165a9:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c00165ac:	31 d2                	xor    edx,edx
c00165ae:	b8 01 00 00 00       	mov    eax,0x1
c00165b3:	85 db                	test   ebx,ebx
c00165b5:	75 05                	jne    c00165bc <sysCallRealpath(regs*)+0x22>
c00165b7:	83 c4 08             	add    esp,0x8
c00165ba:	5b                   	pop    ebx
c00165bb:	c3                   	ret    
c00165bc:	50                   	push   eax
c00165bd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00165c2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00165c5:	05 0c 01 00 00       	add    eax,0x10c
c00165ca:	50                   	push   eax
c00165cb:	51                   	push   ecx
c00165cc:	53                   	push   ebx
c00165cd:	e8 32 8f ff ff       	call   c000f504 <standardiseFiles(char*, char const*, char const*)>
c00165d2:	83 c4 10             	add    esp,0x10
c00165d5:	31 c0                	xor    eax,eax
c00165d7:	31 d2                	xor    edx,edx
c00165d9:	83 c4 08             	add    esp,0x8
c00165dc:	5b                   	pop    ebx
c00165dd:	c3                   	ret    
c00165de:	b8 01 00 00 00       	mov    eax,0x1
c00165e3:	31 d2                	xor    edx,edx
c00165e5:	eb f2                	jmp    c00165d9 <sysCallRealpath(regs*)+0x3f>

c00165e7 <sysCallReadDir(regs*)>:
c00165e7:	53                   	push   ebx
c00165e8:	83 ec 18             	sub    esp,0x18
c00165eb:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00165ef:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00165f2:	83 f8 02             	cmp    eax,0x2
c00165f5:	76 56                	jbe    c001664d <sysCallReadDir(regs*)+0x66>
c00165f7:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00165fa:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c0016600:	77 57                	ja     c0016659 <sysCallReadDir(regs*)+0x72>
c0016602:	83 ec 0c             	sub    esp,0xc
c0016605:	50                   	push   eax
c0016606:	e8 f6 79 ff ff       	call   c000e001 <getFromFileDescriptor(int)>
c001660b:	83 c4 10             	add    esp,0x10
c001660e:	85 c0                	test   eax,eax
c0016610:	74 57                	je     c0016669 <sysCallReadDir(regs*)+0x82>
c0016612:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001661a:	83 ec 0c             	sub    esp,0xc
c001661d:	8b 10                	mov    edx,DWORD PTR [eax]
c001661f:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0016623:	51                   	push   ecx
c0016624:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0016627:	51                   	push   ecx
c0016628:	6a 00                	push   0x0
c001662a:	68 10 01 00 00       	push   0x110
c001662f:	50                   	push   eax
c0016630:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0016633:	83 c4 20             	add    esp,0x20
c0016636:	89 c1                	mov    ecx,eax
c0016638:	85 c0                	test   eax,eax
c001663a:	74 38                	je     c0016674 <sysCallReadDir(regs*)+0x8d>
c001663c:	31 d2                	xor    edx,edx
c001663e:	b8 02 00 00 00       	mov    eax,0x2
c0016643:	83 f9 07             	cmp    ecx,0x7
c0016646:	74 05                	je     c001664d <sysCallReadDir(regs*)+0x66>
c0016648:	83 c4 18             	add    esp,0x18
c001664b:	5b                   	pop    ebx
c001664c:	c3                   	ret    
c001664d:	b8 01 00 00 00       	mov    eax,0x1
c0016652:	31 d2                	xor    edx,edx
c0016654:	83 c4 18             	add    esp,0x18
c0016657:	5b                   	pop    ebx
c0016658:	c3                   	ret    
c0016659:	53                   	push   ebx
c001665a:	53                   	push   ebx
c001665b:	52                   	push   edx
c001665c:	68 c8 28 02 c0       	push   0xc00228c8
c0016661:	e8 11 8b ff ff       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c0016666:	83 c4 10             	add    esp,0x10
c0016669:	83 c4 18             	add    esp,0x18
c001666c:	83 c8 ff             	or     eax,0xffffffff
c001666f:	83 ca ff             	or     edx,0xffffffff
c0016672:	5b                   	pop    ebx
c0016673:	c3                   	ret    
c0016674:	31 c0                	xor    eax,eax
c0016676:	31 d2                	xor    edx,edx
c0016678:	eb da                	jmp    c0016654 <sysCallReadDir(regs*)+0x6d>

c001667a <sysCallIsATTY(regs*)>:
c001667a:	83 ec 0c             	sub    esp,0xc
c001667d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016681:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0016684:	83 f8 02             	cmp    eax,0x2
c0016687:	76 07                	jbe    c0016690 <sysCallIsATTY(regs*)+0x16>
c0016689:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001668e:	75 28                	jne    c00166b8 <sysCallIsATTY(regs*)+0x3e>
c0016690:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016695:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016698:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001669e:	85 c0                	test   eax,eax
c00166a0:	74 26                	je     c00166c8 <sysCallIsATTY(regs*)+0x4e>
c00166a2:	83 ec 0c             	sub    esp,0xc
c00166a5:	8b 10                	mov    edx,DWORD PTR [eax]
c00166a7:	50                   	push   eax
c00166a8:	ff 12                	call   DWORD PTR [edx]
c00166aa:	83 c4 10             	add    esp,0x10
c00166ad:	25 ff 00 00 00       	and    eax,0xff
c00166b2:	31 d2                	xor    edx,edx
c00166b4:	83 c4 0c             	add    esp,0xc
c00166b7:	c3                   	ret    
c00166b8:	83 ec 0c             	sub    esp,0xc
c00166bb:	50                   	push   eax
c00166bc:	e8 40 79 ff ff       	call   c000e001 <getFromFileDescriptor(int)>
c00166c1:	83 c4 10             	add    esp,0x10
c00166c4:	85 c0                	test   eax,eax
c00166c6:	75 da                	jne    c00166a2 <sysCallIsATTY(regs*)+0x28>
c00166c8:	83 c8 ff             	or     eax,0xffffffff
c00166cb:	83 ca ff             	or     edx,0xffffffff
c00166ce:	83 c4 0c             	add    esp,0xc
c00166d1:	c3                   	ret    

c00166d2 <sysCallSeek(regs*)>:
c00166d2:	53                   	push   ebx
c00166d3:	83 ec 08             	sub    esp,0x8
c00166d6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00166da:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00166dd:	83 f8 02             	cmp    eax,0x2
c00166e0:	76 4b                	jbe    c001672d <sysCallSeek(regs*)+0x5b>
c00166e2:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00166e7:	77 34                	ja     c001671d <sysCallSeek(regs*)+0x4b>
c00166e9:	83 ec 0c             	sub    esp,0xc
c00166ec:	50                   	push   eax
c00166ed:	e8 0f 79 ff ff       	call   c000e001 <getFromFileDescriptor(int)>
c00166f2:	83 c4 0c             	add    esp,0xc
c00166f5:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00166f8:	31 db                	xor    ebx,ebx
c00166fa:	53                   	push   ebx
c00166fb:	51                   	push   ecx
c00166fc:	50                   	push   eax
c00166fd:	e8 ce 90 ff ff       	call   c000f7d0 <File::seek(unsigned long long)>
c0016702:	83 c4 10             	add    esp,0x10
c0016705:	85 c0                	test   eax,eax
c0016707:	0f 95 c0             	setne  al
c001670a:	25 ff 00 00 00       	and    eax,0xff
c001670f:	31 d2                	xor    edx,edx
c0016711:	f7 d8                	neg    eax
c0016713:	83 d2 00             	adc    edx,0x0
c0016716:	83 c4 08             	add    esp,0x8
c0016719:	f7 da                	neg    edx
c001671b:	5b                   	pop    ebx
c001671c:	c3                   	ret    
c001671d:	52                   	push   edx
c001671e:	52                   	push   edx
c001671f:	50                   	push   eax
c0016720:	68 84 29 02 c0       	push   0xc0022984
c0016725:	e8 4d 8a ff ff       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c001672a:	83 c4 10             	add    esp,0x10
c001672d:	83 c4 08             	add    esp,0x8
c0016730:	83 c8 ff             	or     eax,0xffffffff
c0016733:	83 ca ff             	or     edx,0xffffffff
c0016736:	5b                   	pop    ebx
c0016737:	c3                   	ret    

c0016738 <sysCallTell(regs*)>:
c0016738:	53                   	push   ebx
c0016739:	83 ec 08             	sub    esp,0x8
c001673c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016740:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016743:	83 f8 02             	cmp    eax,0x2
c0016746:	76 60                	jbe    c00167a8 <sysCallTell(regs*)+0x70>
c0016748:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001674d:	77 30                	ja     c001677f <sysCallTell(regs*)+0x47>
c001674f:	83 ec 0c             	sub    esp,0xc
c0016752:	50                   	push   eax
c0016753:	e8 a9 78 ff ff       	call   c000e001 <getFromFileDescriptor(int)>
c0016758:	5a                   	pop    edx
c0016759:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c001675c:	59                   	pop    ecx
c001675d:	53                   	push   ebx
c001675e:	50                   	push   eax
c001675f:	e8 c2 90 ff ff       	call   c000f826 <File::tell(unsigned long long*)>
c0016764:	83 c4 10             	add    esp,0x10
c0016767:	85 c0                	test   eax,eax
c0016769:	0f 95 c0             	setne  al
c001676c:	25 ff 00 00 00       	and    eax,0xff
c0016771:	31 d2                	xor    edx,edx
c0016773:	f7 d8                	neg    eax
c0016775:	83 d2 00             	adc    edx,0x0
c0016778:	83 c4 08             	add    esp,0x8
c001677b:	f7 da                	neg    edx
c001677d:	5b                   	pop    ebx
c001677e:	c3                   	ret    
c001677f:	52                   	push   edx
c0016780:	52                   	push   edx
c0016781:	50                   	push   eax
c0016782:	68 9e 29 02 c0       	push   0xc002299e
c0016787:	e8 eb 89 ff ff       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c001678c:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001678f:	83 c4 10             	add    esp,0x10
c0016792:	31 d2                	xor    edx,edx
c0016794:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001679a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00167a1:	83 c4 08             	add    esp,0x8
c00167a4:	31 c0                	xor    eax,eax
c00167a6:	5b                   	pop    ebx
c00167a7:	c3                   	ret    
c00167a8:	83 c4 08             	add    esp,0x8
c00167ab:	83 c8 ff             	or     eax,0xffffffff
c00167ae:	83 ca ff             	or     edx,0xffffffff
c00167b1:	5b                   	pop    ebx
c00167b2:	c3                   	ret    

c00167b3 <sysCallSizeFromFilename(regs*)>:
c00167b3:	57                   	push   edi
c00167b4:	56                   	push   esi
c00167b5:	53                   	push   ebx
c00167b6:	83 ec 10             	sub    esp,0x10
c00167b9:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00167bd:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c00167c0:	83 fb 02             	cmp    ebx,0x2
c00167c3:	0f 86 8b 00 00 00    	jbe    c0016854 <sysCallSizeFromFilename(regs*)+0xa1>
c00167c9:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00167cf:	77 58                	ja     c0016829 <sysCallSizeFromFilename(regs*)+0x76>
c00167d1:	83 ec 0c             	sub    esp,0xc
c00167d4:	68 14 01 00 00       	push   0x114
c00167d9:	e8 64 88 ff ff       	call   c000f042 <operator new(unsigned long)>
c00167de:	89 c7                	mov    edi,eax
c00167e0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00167e5:	83 c4 0c             	add    esp,0xc
c00167e8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00167eb:	50                   	push   eax
c00167ec:	53                   	push   ebx
c00167ed:	57                   	push   edi
c00167ee:	e8 bb 8e ff ff       	call   c000f6ae <File::File(char const*, Process*)>
c00167f3:	83 c4 0c             	add    esp,0xc
c00167f6:	8d 44 24 13          	lea    eax,[esp+0x13]
c00167fa:	50                   	push   eax
c00167fb:	8b 56 28             	mov    edx,DWORD PTR [esi+0x28]
c00167fe:	52                   	push   edx
c00167ff:	57                   	push   edi
c0016800:	e8 b9 91 ff ff       	call   c000f9be <File::stat(unsigned long long*, bool*)>
c0016805:	89 c3                	mov    ebx,eax
c0016807:	8b 07                	mov    eax,DWORD PTR [edi]
c0016809:	89 3c 24             	mov    DWORD PTR [esp],edi
c001680c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001680f:	31 c0                	xor    eax,eax
c0016811:	83 c4 10             	add    esp,0x10
c0016814:	85 db                	test   ebx,ebx
c0016816:	0f 95 c0             	setne  al
c0016819:	31 d2                	xor    edx,edx
c001681b:	f7 d8                	neg    eax
c001681d:	83 d2 00             	adc    edx,0x0
c0016820:	83 c4 10             	add    esp,0x10
c0016823:	f7 da                	neg    edx
c0016825:	5b                   	pop    ebx
c0016826:	5e                   	pop    esi
c0016827:	5f                   	pop    edi
c0016828:	c3                   	ret    
c0016829:	51                   	push   ecx
c001682a:	51                   	push   ecx
c001682b:	53                   	push   ebx
c001682c:	68 b8 29 02 c0       	push   0xc00229b8
c0016831:	e8 41 89 ff ff       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c0016836:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0016839:	83 c4 10             	add    esp,0x10
c001683c:	31 d2                	xor    edx,edx
c001683e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0016844:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001684b:	83 c4 10             	add    esp,0x10
c001684e:	31 c0                	xor    eax,eax
c0016850:	5b                   	pop    ebx
c0016851:	5e                   	pop    esi
c0016852:	5f                   	pop    edi
c0016853:	c3                   	ret    
c0016854:	83 c4 10             	add    esp,0x10
c0016857:	83 c8 ff             	or     eax,0xffffffff
c001685a:	83 ca ff             	or     edx,0xffffffff
c001685d:	5b                   	pop    ebx
c001685e:	5e                   	pop    esi
c001685f:	5f                   	pop    edi
c0016860:	c3                   	ret    

c0016861 <sysCallSize(regs*)>:
c0016861:	53                   	push   ebx
c0016862:	83 ec 18             	sub    esp,0x18
c0016865:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0016869:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001686c:	83 f8 02             	cmp    eax,0x2
c001686f:	76 66                	jbe    c00168d7 <sysCallSize(regs*)+0x76>
c0016871:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0016876:	77 36                	ja     c00168ae <sysCallSize(regs*)+0x4d>
c0016878:	83 ec 0c             	sub    esp,0xc
c001687b:	50                   	push   eax
c001687c:	e8 80 77 ff ff       	call   c000e001 <getFromFileDescriptor(int)>
c0016881:	83 c4 0c             	add    esp,0xc
c0016884:	8d 54 24 13          	lea    edx,[esp+0x13]
c0016888:	52                   	push   edx
c0016889:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001688c:	52                   	push   edx
c001688d:	50                   	push   eax
c001688e:	e8 2b 91 ff ff       	call   c000f9be <File::stat(unsigned long long*, bool*)>
c0016893:	83 c4 10             	add    esp,0x10
c0016896:	85 c0                	test   eax,eax
c0016898:	0f 95 c0             	setne  al
c001689b:	25 ff 00 00 00       	and    eax,0xff
c00168a0:	31 d2                	xor    edx,edx
c00168a2:	f7 d8                	neg    eax
c00168a4:	83 d2 00             	adc    edx,0x0
c00168a7:	83 c4 18             	add    esp,0x18
c00168aa:	f7 da                	neg    edx
c00168ac:	5b                   	pop    ebx
c00168ad:	c3                   	ret    
c00168ae:	51                   	push   ecx
c00168af:	51                   	push   ecx
c00168b0:	50                   	push   eax
c00168b1:	68 b8 29 02 c0       	push   0xc00229b8
c00168b6:	e8 bc 88 ff ff       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c00168bb:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00168be:	83 c4 10             	add    esp,0x10
c00168c1:	31 d2                	xor    edx,edx
c00168c3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00168c9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00168d0:	83 c4 18             	add    esp,0x18
c00168d3:	31 c0                	xor    eax,eax
c00168d5:	5b                   	pop    ebx
c00168d6:	c3                   	ret    
c00168d7:	83 c4 18             	add    esp,0x18
c00168da:	83 c8 ff             	or     eax,0xffffffff
c00168dd:	83 ca ff             	or     edx,0xffffffff
c00168e0:	5b                   	pop    ebx
c00168e1:	c3                   	ret    

c00168e2 <sysCallClose(regs*)>:
c00168e2:	53                   	push   ebx
c00168e3:	83 ec 08             	sub    esp,0x8
c00168e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168ea:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00168ed:	83 f8 02             	cmp    eax,0x2
c00168f0:	76 4f                	jbe    c0016941 <sysCallClose(regs*)+0x5f>
c00168f2:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00168f7:	74 53                	je     c001694c <sysCallClose(regs*)+0x6a>
c00168f9:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00168fe:	74 5b                	je     c001695b <sysCallClose(regs*)+0x79>
c0016900:	77 2f                	ja     c0016931 <sysCallClose(regs*)+0x4f>
c0016902:	83 ec 0c             	sub    esp,0xc
c0016905:	50                   	push   eax
c0016906:	e8 f6 76 ff ff       	call   c000e001 <getFromFileDescriptor(int)>
c001690b:	89 c3                	mov    ebx,eax
c001690d:	89 04 24             	mov    DWORD PTR [esp],eax
c0016910:	e8 5b 8e ff ff       	call   c000f770 <File::close()>
c0016915:	83 c4 10             	add    esp,0x10
c0016918:	85 db                	test   ebx,ebx
c001691a:	74 0c                	je     c0016928 <sysCallClose(regs*)+0x46>
c001691c:	83 ec 0c             	sub    esp,0xc
c001691f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016921:	53                   	push   ebx
c0016922:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016925:	83 c4 10             	add    esp,0x10
c0016928:	83 c4 08             	add    esp,0x8
c001692b:	31 c0                	xor    eax,eax
c001692d:	31 d2                	xor    edx,edx
c001692f:	5b                   	pop    ebx
c0016930:	c3                   	ret    
c0016931:	52                   	push   edx
c0016932:	52                   	push   edx
c0016933:	50                   	push   eax
c0016934:	68 ec 28 02 c0       	push   0xc00228ec
c0016939:	e8 39 88 ff ff       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c001693e:	83 c4 10             	add    esp,0x10
c0016941:	83 c4 08             	add    esp,0x8
c0016944:	83 c8 ff             	or     eax,0xffffffff
c0016947:	83 ca ff             	or     edx,0xffffffff
c001694a:	5b                   	pop    ebx
c001694b:	c3                   	ret    
c001694c:	83 ec 0c             	sub    esp,0xc
c001694f:	68 d3 29 02 c0       	push   0xc00229d3
c0016954:	e8 1e 88 ff ff       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c0016959:	eb ca                	jmp    c0016925 <sysCallClose(regs*)+0x43>
c001695b:	83 ec 0c             	sub    esp,0xc
c001695e:	68 e1 29 02 c0       	push   0xc00229e1
c0016963:	eb ef                	jmp    c0016954 <sysCallClose(regs*)+0x72>

c0016965 <sysCallOpenDir(regs*)>:
c0016965:	56                   	push   esi
c0016966:	53                   	push   ebx
c0016967:	50                   	push   eax
c0016968:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001696c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001696f:	85 c0                	test   eax,eax
c0016971:	74 53                	je     c00169c6 <sysCallOpenDir(regs*)+0x61>
c0016973:	83 ec 0c             	sub    esp,0xc
c0016976:	68 14 01 00 00       	push   0x114
c001697b:	e8 c2 86 ff ff       	call   c000f042 <operator new(unsigned long)>
c0016980:	89 c6                	mov    esi,eax
c0016982:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016987:	83 c4 0c             	add    esp,0xc
c001698a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001698d:	50                   	push   eax
c001698e:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016991:	50                   	push   eax
c0016992:	56                   	push   esi
c0016993:	e8 d8 91 ff ff       	call   c000fb70 <Directory::Directory(char const*, Process*)>
c0016998:	89 34 24             	mov    DWORD PTR [esp],esi
c001699b:	e8 34 92 ff ff       	call   c000fbd4 <Directory::open()>
c00169a0:	83 c4 10             	add    esp,0x10
c00169a3:	85 c0                	test   eax,eax
c00169a5:	75 1f                	jne    c00169c6 <sysCallOpenDir(regs*)+0x61>
c00169a7:	83 ec 0c             	sub    esp,0xc
c00169aa:	56                   	push   esi
c00169ab:	e8 9c 73 ff ff       	call   c000dd4c <UnixFile::getFileDescriptor()>
c00169b0:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00169b3:	83 c4 10             	add    esp,0x10
c00169b6:	89 02                	mov    DWORD PTR [edx],eax
c00169b8:	c1 f8 1f             	sar    eax,0x1f
c00169bb:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00169be:	31 c0                	xor    eax,eax
c00169c0:	59                   	pop    ecx
c00169c1:	31 d2                	xor    edx,edx
c00169c3:	5b                   	pop    ebx
c00169c4:	5e                   	pop    esi
c00169c5:	c3                   	ret    
c00169c6:	59                   	pop    ecx
c00169c7:	83 c8 ff             	or     eax,0xffffffff
c00169ca:	5b                   	pop    ebx
c00169cb:	83 ca ff             	or     edx,0xffffffff
c00169ce:	5e                   	pop    esi
c00169cf:	c3                   	ret    

c00169d0 <sysCallMakeDir(regs*)>:
c00169d0:	56                   	push   esi
c00169d1:	53                   	push   ebx
c00169d2:	83 ec 10             	sub    esp,0x10
c00169d5:	68 14 01 00 00       	push   0x114
c00169da:	e8 63 86 ff ff       	call   c000f042 <operator new(unsigned long)>
c00169df:	89 c3                	mov    ebx,eax
c00169e1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00169e6:	83 c4 0c             	add    esp,0xc
c00169e9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00169ec:	50                   	push   eax
c00169ed:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00169f1:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c00169f4:	52                   	push   edx
c00169f5:	53                   	push   ebx
c00169f6:	e8 75 91 ff ff       	call   c000fb70 <Directory::Directory(char const*, Process*)>
c00169fb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00169fe:	e8 b1 93 ff ff       	call   c000fdb4 <Directory::create()>
c0016a03:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016a06:	89 c6                	mov    esi,eax
c0016a08:	e8 23 92 ff ff       	call   c000fc30 <Directory::close()>
c0016a0d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016a0f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016a12:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016a15:	31 c0                	xor    eax,eax
c0016a17:	85 f6                	test   esi,esi
c0016a19:	0f 95 c0             	setne  al
c0016a1c:	31 d2                	xor    edx,edx
c0016a1e:	f7 d8                	neg    eax
c0016a20:	83 d2 00             	adc    edx,0x0
c0016a23:	83 c4 14             	add    esp,0x14
c0016a26:	f7 da                	neg    edx
c0016a28:	5b                   	pop    ebx
c0016a29:	5e                   	pop    esi
c0016a2a:	c3                   	ret    

c0016a2b <sysCallCloseDir(regs*)>:
c0016a2b:	53                   	push   ebx
c0016a2c:	83 ec 08             	sub    esp,0x8
c0016a2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016a33:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0016a36:	83 f8 02             	cmp    eax,0x2
c0016a39:	76 46                	jbe    c0016a81 <sysCallCloseDir(regs*)+0x56>
c0016a3b:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0016a40:	77 2f                	ja     c0016a71 <sysCallCloseDir(regs*)+0x46>
c0016a42:	83 ec 0c             	sub    esp,0xc
c0016a45:	50                   	push   eax
c0016a46:	e8 b6 75 ff ff       	call   c000e001 <getFromFileDescriptor(int)>
c0016a4b:	89 c3                	mov    ebx,eax
c0016a4d:	89 04 24             	mov    DWORD PTR [esp],eax
c0016a50:	e8 db 91 ff ff       	call   c000fc30 <Directory::close()>
c0016a55:	83 c4 10             	add    esp,0x10
c0016a58:	85 db                	test   ebx,ebx
c0016a5a:	74 0c                	je     c0016a68 <sysCallCloseDir(regs*)+0x3d>
c0016a5c:	83 ec 0c             	sub    esp,0xc
c0016a5f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016a61:	53                   	push   ebx
c0016a62:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016a65:	83 c4 10             	add    esp,0x10
c0016a68:	83 c4 08             	add    esp,0x8
c0016a6b:	31 c0                	xor    eax,eax
c0016a6d:	31 d2                	xor    edx,edx
c0016a6f:	5b                   	pop    ebx
c0016a70:	c3                   	ret    
c0016a71:	52                   	push   edx
c0016a72:	52                   	push   edx
c0016a73:	50                   	push   eax
c0016a74:	68 14 29 02 c0       	push   0xc0022914
c0016a79:	e8 f9 86 ff ff       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c0016a7e:	83 c4 10             	add    esp,0x10
c0016a81:	83 c4 08             	add    esp,0x8
c0016a84:	83 c8 ff             	or     eax,0xffffffff
c0016a87:	83 ca ff             	or     edx,0xffffffff
c0016a8a:	5b                   	pop    ebx
c0016a8b:	c3                   	ret    

c0016a8c <sysCallWait(regs*)>:
c0016a8c:	83 ec 10             	sub    esp,0x10
c0016a8f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016a93:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0016a96:	52                   	push   edx
c0016a97:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c0016a9a:	51                   	push   ecx
c0016a9b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0016a9e:	50                   	push   eax
c0016a9f:	e8 4e 23 00 00       	call   c0018df2 <waitTask(int, int*, int)>
c0016aa4:	89 c2                	mov    edx,eax
c0016aa6:	83 c4 1c             	add    esp,0x1c
c0016aa9:	c1 fa 1f             	sar    edx,0x1f
c0016aac:	c3                   	ret    

c0016aad <sysCallRmdir(regs*)>:
c0016aad:	56                   	push   esi
c0016aae:	53                   	push   ebx
c0016aaf:	83 ec 10             	sub    esp,0x10
c0016ab2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016ab6:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0016ab9:	68 14 01 00 00       	push   0x114
c0016abe:	e8 7f 85 ff ff       	call   c000f042 <operator new(unsigned long)>
c0016ac3:	83 c4 0c             	add    esp,0xc
c0016ac6:	89 c3                	mov    ebx,eax
c0016ac8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016acd:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016ad0:	50                   	push   eax
c0016ad1:	56                   	push   esi
c0016ad2:	53                   	push   ebx
c0016ad3:	e8 d6 8b ff ff       	call   c000f6ae <File::File(char const*, Process*)>
c0016ad8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016adb:	e8 aa 8d ff ff       	call   c000f88a <File::unlink()>
c0016ae0:	89 c6                	mov    esi,eax
c0016ae2:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016ae4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016ae7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016aea:	31 c0                	xor    eax,eax
c0016aec:	85 f6                	test   esi,esi
c0016aee:	0f 95 c0             	setne  al
c0016af1:	31 d2                	xor    edx,edx
c0016af3:	f7 d8                	neg    eax
c0016af5:	83 d2 00             	adc    edx,0x0
c0016af8:	83 c4 14             	add    esp,0x14
c0016afb:	f7 da                	neg    edx
c0016afd:	5b                   	pop    ebx
c0016afe:	5e                   	pop    esi
c0016aff:	c3                   	ret    

c0016b00 <sysCallUnlink(regs*)>:
c0016b00:	56                   	push   esi
c0016b01:	53                   	push   ebx
c0016b02:	83 ec 10             	sub    esp,0x10
c0016b05:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016b09:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0016b0c:	68 14 01 00 00       	push   0x114
c0016b11:	e8 2c 85 ff ff       	call   c000f042 <operator new(unsigned long)>
c0016b16:	83 c4 0c             	add    esp,0xc
c0016b19:	89 c3                	mov    ebx,eax
c0016b1b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016b20:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016b23:	50                   	push   eax
c0016b24:	56                   	push   esi
c0016b25:	53                   	push   ebx
c0016b26:	e8 83 8b ff ff       	call   c000f6ae <File::File(char const*, Process*)>
c0016b2b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016b2e:	e8 57 8d ff ff       	call   c000f88a <File::unlink()>
c0016b33:	89 c6                	mov    esi,eax
c0016b35:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016b37:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016b3a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016b3d:	31 c0                	xor    eax,eax
c0016b3f:	85 f6                	test   esi,esi
c0016b41:	0f 95 c0             	setne  al
c0016b44:	31 d2                	xor    edx,edx
c0016b46:	f7 d8                	neg    eax
c0016b48:	83 d2 00             	adc    edx,0x0
c0016b4b:	83 c4 14             	add    esp,0x14
c0016b4e:	f7 da                	neg    edx
c0016b50:	5b                   	pop    ebx
c0016b51:	5e                   	pop    esi
c0016b52:	c3                   	ret    

c0016b53 <sysCallGetArgv(regs*)>:
c0016b53:	83 ec 0c             	sub    esp,0xc
c0016b56:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016b5a:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0016b5d:	85 c0                	test   eax,eax
c0016b5f:	78 2b                	js     c0016b8c <sysCallGetArgv(regs*)+0x39>
c0016b61:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016b67:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c0016b6a:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c0016b70:	7d 1a                	jge    c0016b8c <sysCallGetArgv(regs*)+0x39>
c0016b72:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c0016b79:	85 c0                	test   eax,eax
c0016b7b:	74 17                	je     c0016b94 <sysCallGetArgv(regs*)+0x41>
c0016b7d:	51                   	push   ecx
c0016b7e:	51                   	push   ecx
c0016b7f:	50                   	push   eax
c0016b80:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c0016b83:	50                   	push   eax
c0016b84:	e8 d0 9b fe ff       	call   c0000759 <strcpy>
c0016b89:	83 c4 10             	add    esp,0x10
c0016b8c:	31 c0                	xor    eax,eax
c0016b8e:	31 d2                	xor    edx,edx
c0016b90:	83 c4 0c             	add    esp,0xc
c0016b93:	c3                   	ret    
c0016b94:	b8 01 00 00 00       	mov    eax,0x1
c0016b99:	31 d2                	xor    edx,edx
c0016b9b:	83 c4 0c             	add    esp,0xc
c0016b9e:	c3                   	ret    

c0016b9f <sysCallTTYName(regs*)>:
c0016b9f:	56                   	push   esi
c0016ba0:	53                   	push   ebx
c0016ba1:	50                   	push   eax
c0016ba2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016ba6:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0016ba9:	85 c0                	test   eax,eax
c0016bab:	74 4d                	je     c0016bfa <sysCallTTYName(regs*)+0x5b>
c0016bad:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0016bb0:	83 f8 02             	cmp    eax,0x2
c0016bb3:	76 07                	jbe    c0016bbc <sysCallTTYName(regs*)+0x1d>
c0016bb5:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0016bba:	75 54                	jne    c0016c10 <sysCallTTYName(regs*)+0x71>
c0016bbc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016bc1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016bc4:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0016bca:	85 db                	test   ebx,ebx
c0016bcc:	74 2c                	je     c0016bfa <sysCallTTYName(regs*)+0x5b>
c0016bce:	83 ec 0c             	sub    esp,0xc
c0016bd1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016bd3:	53                   	push   ebx
c0016bd4:	ff 10                	call   DWORD PTR [eax]
c0016bd6:	83 c4 10             	add    esp,0x10
c0016bd9:	84 c0                	test   al,al
c0016bdb:	74 28                	je     c0016c05 <sysCallTTYName(regs*)+0x66>
c0016bdd:	50                   	push   eax
c0016bde:	81 c3 1e 10 00 00    	add    ebx,0x101e
c0016be4:	50                   	push   eax
c0016be5:	53                   	push   ebx
c0016be6:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0016be9:	50                   	push   eax
c0016bea:	e8 6a 9b fe ff       	call   c0000759 <strcpy>
c0016bef:	83 c4 10             	add    esp,0x10
c0016bf2:	31 c0                	xor    eax,eax
c0016bf4:	31 d2                	xor    edx,edx
c0016bf6:	59                   	pop    ecx
c0016bf7:	5b                   	pop    ebx
c0016bf8:	5e                   	pop    esi
c0016bf9:	c3                   	ret    
c0016bfa:	59                   	pop    ecx
c0016bfb:	b8 01 00 00 00       	mov    eax,0x1
c0016c00:	5b                   	pop    ebx
c0016c01:	31 d2                	xor    edx,edx
c0016c03:	5e                   	pop    esi
c0016c04:	c3                   	ret    
c0016c05:	59                   	pop    ecx
c0016c06:	b8 02 00 00 00       	mov    eax,0x2
c0016c0b:	5b                   	pop    ebx
c0016c0c:	31 d2                	xor    edx,edx
c0016c0e:	5e                   	pop    esi
c0016c0f:	c3                   	ret    
c0016c10:	83 ec 0c             	sub    esp,0xc
c0016c13:	50                   	push   eax
c0016c14:	e8 e8 73 ff ff       	call   c000e001 <getFromFileDescriptor(int)>
c0016c19:	83 c4 10             	add    esp,0x10
c0016c1c:	89 c3                	mov    ebx,eax
c0016c1e:	eb aa                	jmp    c0016bca <sysCallTTYName(regs*)+0x2b>

c0016c20 <sysCallGetEnv(regs*)>:
c0016c20:	83 ec 0c             	sub    esp,0xc
c0016c23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c27:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0016c2a:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0016c2d:	85 d2                	test   edx,edx
c0016c2f:	75 22                	jne    c0016c53 <sysCallGetEnv(regs*)+0x33>
c0016c31:	31 c0                	xor    eax,eax
c0016c33:	31 d2                	xor    edx,edx
c0016c35:	85 c9                	test   ecx,ecx
c0016c37:	74 04                	je     c0016c3d <sysCallGetEnv(regs*)+0x1d>
c0016c39:	83 c4 0c             	add    esp,0xc
c0016c3c:	c3                   	ret    
c0016c3d:	83 ec 0c             	sub    esp,0xc
c0016c40:	68 38 29 02 c0       	push   0xc0022938
c0016c45:	e8 8d 9a fe ff       	call   c00006d7 <strlen>
c0016c4a:	83 c4 10             	add    esp,0x10
c0016c4d:	31 d2                	xor    edx,edx
c0016c4f:	83 c4 0c             	add    esp,0xc
c0016c52:	c3                   	ret    
c0016c53:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0016c56:	85 c9                	test   ecx,ecx
c0016c58:	74 0b                	je     c0016c65 <sysCallGetEnv(regs*)+0x45>
c0016c5a:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0016c5d:	31 c0                	xor    eax,eax
c0016c5f:	31 d2                	xor    edx,edx
c0016c61:	83 c4 0c             	add    esp,0xc
c0016c64:	c3                   	ret    
c0016c65:	52                   	push   edx
c0016c66:	52                   	push   edx
c0016c67:	68 38 29 02 c0       	push   0xc0022938
c0016c6c:	50                   	push   eax
c0016c6d:	e8 e7 9a fe ff       	call   c0000759 <strcpy>
c0016c72:	83 c4 10             	add    esp,0x10
c0016c75:	eb e6                	jmp    c0016c5d <sysCallGetEnv(regs*)+0x3d>

c0016c77 <sysCallUSleep(regs*)>:
c0016c77:	57                   	push   edi
c0016c78:	56                   	push   esi
c0016c79:	53                   	push   ebx
c0016c7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c7e:	52                   	push   edx
c0016c7f:	52                   	push   edx
c0016c80:	8b 58 28             	mov    ebx,DWORD PTR [eax+0x28]
c0016c83:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0016c86:	89 c8                	mov    eax,ecx
c0016c88:	89 da                	mov    edx,ebx
c0016c8a:	0f a4 c2 05          	shld   edx,eax,0x5
c0016c8e:	c1 e0 05             	shl    eax,0x5
c0016c91:	29 c8                	sub    eax,ecx
c0016c93:	19 da                	sbb    edx,ebx
c0016c95:	0f a4 c2 02          	shld   edx,eax,0x2
c0016c99:	c1 e0 02             	shl    eax,0x2
c0016c9c:	01 c8                	add    eax,ecx
c0016c9e:	11 da                	adc    edx,ebx
c0016ca0:	0f a4 c2 03          	shld   edx,eax,0x3
c0016ca4:	c1 e0 03             	shl    eax,0x3
c0016ca7:	52                   	push   edx
c0016ca8:	50                   	push   eax
c0016ca9:	e8 df 21 00 00       	call   c0018e8d <nanoSleep(unsigned long long)>
c0016cae:	83 c4 10             	add    esp,0x10
c0016cb1:	31 c0                	xor    eax,eax
c0016cb3:	31 d2                	xor    edx,edx
c0016cb5:	5b                   	pop    ebx
c0016cb6:	5e                   	pop    esi
c0016cb7:	5f                   	pop    edi
c0016cb8:	c3                   	ret    

c0016cb9 <sysCallSpawn(regs*)>:
c0016cb9:	56                   	push   esi
c0016cba:	53                   	push   ebx
c0016cbb:	50                   	push   eax
c0016cbc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016cc0:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016cc3:	85 c0                	test   eax,eax
c0016cc5:	75 08                	jne    c0016ccf <sysCallSpawn(regs*)+0x16>
c0016cc7:	59                   	pop    ecx
c0016cc8:	31 c0                	xor    eax,eax
c0016cca:	5b                   	pop    ebx
c0016ccb:	31 d2                	xor    edx,edx
c0016ccd:	5e                   	pop    esi
c0016cce:	c3                   	ret    
c0016ccf:	83 ec 0c             	sub    esp,0xc
c0016cd2:	68 3b 07 00 00       	push   0x73b
c0016cd7:	e8 66 83 ff ff       	call   c000f042 <operator new(unsigned long)>
c0016cdc:	89 c6                	mov    esi,eax
c0016cde:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0016ce1:	50                   	push   eax
c0016ce2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016ce7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016cea:	50                   	push   eax
c0016ceb:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016cee:	50                   	push   eax
c0016cef:	56                   	push   esi
c0016cf0:	e8 d5 18 00 00       	call   c00185ca <Process::Process(char const*, Process*, char**)>
c0016cf5:	83 c4 20             	add    esp,0x20
c0016cf8:	80 be 3a 07 00 00 00 	cmp    BYTE PTR [esi+0x73a],0x0
c0016cff:	75 c6                	jne    c0016cc7 <sysCallSpawn(regs*)+0xe>
c0016d01:	83 ec 0c             	sub    esp,0xc
c0016d04:	56                   	push   esi
c0016d05:	e8 3c 1e 00 00       	call   c0018b46 <Process::createUserThread()>
c0016d0a:	83 c4 10             	add    esp,0x10
c0016d0d:	8b 06                	mov    eax,DWORD PTR [esi]
c0016d0f:	89 c2                	mov    edx,eax
c0016d11:	c1 fa 1f             	sar    edx,0x1f
c0016d14:	59                   	pop    ecx
c0016d15:	5b                   	pop    ebx
c0016d16:	5e                   	pop    esi
c0016d17:	c3                   	ret    

c0016d18 <sysAppSettings(regs*)>:
c0016d18:	53                   	push   ebx
c0016d19:	31 d2                	xor    edx,edx
c0016d1b:	83 ec 08             	sub    esp,0x8
c0016d1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d22:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0016d25:	b8 01 00 00 00       	mov    eax,0x1
c0016d2a:	8b 8b 00 01 00 00    	mov    ecx,DWORD PTR [ebx+0x100]
c0016d30:	81 e1 e0 1f 00 00    	and    ecx,0x1fe0
c0016d36:	66 81 f9 c0 09       	cmp    cx,0x9c0
c0016d3b:	75 30                	jne    c0016d6d <sysAppSettings(regs*)+0x55>
c0016d3d:	8a 83 00 01 00 00    	mov    al,BYTE PTR [ebx+0x100]
c0016d43:	83 e0 1f             	and    eax,0x1f
c0016d46:	3c 01                	cmp    al,0x1
c0016d48:	74 28                	je     c0016d72 <sysAppSettings(regs*)+0x5a>
c0016d4a:	3c 07                	cmp    al,0x7
c0016d4c:	0f 84 be 00 00 00    	je     c0016e10 <sysAppSettings(regs*)+0xf8>
c0016d52:	84 c0                	test   al,al
c0016d54:	0f 84 da 00 00 00    	je     c0016e34 <sysAppSettings(regs*)+0x11c>
c0016d5a:	3c 08                	cmp    al,0x8
c0016d5c:	74 6d                	je     c0016dcb <sysAppSettings(regs*)+0xb3>
c0016d5e:	25 ff 00 00 00       	and    eax,0xff
c0016d63:	05 e8 03 00 00       	add    eax,0x3e8
c0016d68:	89 c2                	mov    edx,eax
c0016d6a:	c1 fa 1f             	sar    edx,0x1f
c0016d6d:	83 c4 08             	add    esp,0x8
c0016d70:	5b                   	pop    ebx
c0016d71:	c3                   	ret    
c0016d72:	50                   	push   eax
c0016d73:	68 00 01 00 00       	push   0x100
c0016d78:	6a 00                	push   0x0
c0016d7a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016d7f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016d82:	83 c0 0c             	add    eax,0xc
c0016d85:	50                   	push   eax
c0016d86:	e8 2f 99 fe ff       	call   c00006ba <memset>
c0016d8b:	83 c4 0c             	add    esp,0xc
c0016d8e:	68 ff 00 00 00       	push   0xff
c0016d93:	53                   	push   ebx
c0016d94:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016d99:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016d9c:	83 c0 0c             	add    eax,0xc
c0016d9f:	50                   	push   eax
c0016da0:	e8 df 98 fe ff       	call   c0000684 <memcpy>
c0016da5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016daa:	5a                   	pop    edx
c0016dab:	59                   	pop    ecx
c0016dac:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016daf:	8d 50 0c             	lea    edx,[eax+0xc]
c0016db2:	52                   	push   edx
c0016db3:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0016db9:	53                   	push   ebx
c0016dba:	e8 1f 64 ff ff       	call   c000d1de <VgaText::setTitle(char*)>
c0016dbf:	83 c4 10             	add    esp,0x10
c0016dc2:	31 c0                	xor    eax,eax
c0016dc4:	31 d2                	xor    edx,edx
c0016dc6:	83 c4 08             	add    esp,0x8
c0016dc9:	5b                   	pop    ebx
c0016dca:	c3                   	ret    
c0016dcb:	50                   	push   eax
c0016dcc:	50                   	push   eax
c0016dcd:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c0016dd3:	83 e0 0f             	and    eax,0xf
c0016dd6:	50                   	push   eax
c0016dd7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016ddc:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016ddf:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0016de5:	50                   	push   eax
c0016de6:	e8 e3 63 ff ff       	call   c000d1ce <VgaText::setTitleColour(VgaColour)>
c0016deb:	58                   	pop    eax
c0016dec:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c0016df2:	c1 e8 04             	shr    eax,0x4
c0016df5:	5a                   	pop    edx
c0016df6:	83 e0 0f             	and    eax,0xf
c0016df9:	50                   	push   eax
c0016dfa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016dff:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016e02:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0016e08:	51                   	push   ecx
c0016e09:	e8 b0 63 ff ff       	call   c000d1be <VgaText::setTitleTextColour(VgaColour)>
c0016e0e:	eb af                	jmp    c0016dbf <sysAppSettings(regs*)+0xa7>
c0016e10:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016e15:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016e18:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c0016e1e:	8a 83 01 01 00 00    	mov    al,BYTE PTR [ebx+0x101]
c0016e24:	c0 e8 06             	shr    al,0x6
c0016e27:	83 e0 01             	and    eax,0x1
c0016e2a:	88 82 1c 10 00 00    	mov    BYTE PTR [edx+0x101c],al
c0016e30:	31 c0                	xor    eax,eax
c0016e32:	eb 90                	jmp    c0016dc4 <sysAppSettings(regs*)+0xac>
c0016e34:	b8 02 00 00 00       	mov    eax,0x2
c0016e39:	31 d2                	xor    edx,edx
c0016e3b:	eb 89                	jmp    c0016dc6 <sysAppSettings(regs*)+0xae>

c0016e3d <sysSetFatAttrib(regs*)>:
c0016e3d:	57                   	push   edi
c0016e3e:	56                   	push   esi
c0016e3f:	53                   	push   ebx
c0016e40:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016e44:	83 ec 0c             	sub    esp,0xc
c0016e47:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0016e4a:	68 14 01 00 00       	push   0x114
c0016e4f:	e8 ee 81 ff ff       	call   c000f042 <operator new(unsigned long)>
c0016e54:	83 c4 0c             	add    esp,0xc
c0016e57:	89 c3                	mov    ebx,eax
c0016e59:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016e5e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016e61:	50                   	push   eax
c0016e62:	57                   	push   edi
c0016e63:	53                   	push   ebx
c0016e64:	e8 45 88 ff ff       	call   c000f6ae <File::File(char const*, Process*)>
c0016e69:	83 c4 0c             	add    esp,0xc
c0016e6c:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0016e6f:	0f b6 d4             	movzx  edx,ah
c0016e72:	52                   	push   edx
c0016e73:	25 ff 00 00 00       	and    eax,0xff
c0016e78:	50                   	push   eax
c0016e79:	53                   	push   ebx
c0016e7a:	e8 a5 8a ff ff       	call   c000f924 <File::chfatattr(unsigned char, unsigned char)>
c0016e7f:	89 c6                	mov    esi,eax
c0016e81:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016e83:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016e86:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016e89:	83 c4 10             	add    esp,0x10
c0016e8c:	31 c0                	xor    eax,eax
c0016e8e:	85 f6                	test   esi,esi
c0016e90:	0f 95 c0             	setne  al
c0016e93:	5b                   	pop    ebx
c0016e94:	31 d2                	xor    edx,edx
c0016e96:	f7 d8                	neg    eax
c0016e98:	83 d2 00             	adc    edx,0x0
c0016e9b:	5e                   	pop    esi
c0016e9c:	f7 da                	neg    edx
c0016e9e:	5f                   	pop    edi
c0016e9f:	c3                   	ret    

c0016ea0 <sysPanic(regs*)>:
c0016ea0:	83 ec 18             	sub    esp,0x18
c0016ea3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016ea7:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0016eaa:	50                   	push   eax
c0016eab:	e8 92 ea ff ff       	call   c0015942 <Krnl::panic(char const*)>
c0016eb0:	c7 04 24 ef 29 02 c0 	mov    DWORD PTR [esp],0xc00229ef
c0016eb7:	e8 86 ea ff ff       	call   c0015942 <Krnl::panic(char const*)>
c0016ebc:	b8 01 00 00 00       	mov    eax,0x1
c0016ec1:	31 d2                	xor    edx,edx
c0016ec3:	83 c4 1c             	add    esp,0x1c
c0016ec6:	c3                   	ret    

c0016ec7 <sysPipe(regs*)>:
c0016ec7:	57                   	push   edi
c0016ec8:	56                   	push   esi
c0016ec9:	53                   	push   ebx
c0016eca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016ece:	83 ec 0c             	sub    esp,0xc
c0016ed1:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0016ed4:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0016ed7:	6a 20                	push   0x20
c0016ed9:	e8 64 81 ff ff       	call   c000f042 <operator new(unsigned long)>
c0016ede:	89 c3                	mov    ebx,eax
c0016ee0:	58                   	pop    eax
c0016ee1:	5a                   	pop    edx
c0016ee2:	68 00 50 00 00       	push   0x5000
c0016ee7:	53                   	push   ebx
c0016ee8:	e8 2f 5c ff ff       	call   c000cb1c <Pipe::Pipe(int)>
c0016eed:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016ef0:	e8 57 6e ff ff       	call   c000dd4c <UnixFile::getFileDescriptor()>
c0016ef5:	89 07                	mov    DWORD PTR [edi],eax
c0016ef7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016efa:	e8 4d 6e ff ff       	call   c000dd4c <UnixFile::getFileDescriptor()>
c0016eff:	83 c4 10             	add    esp,0x10
c0016f02:	89 06                	mov    DWORD PTR [esi],eax
c0016f04:	31 d2                	xor    edx,edx
c0016f06:	5b                   	pop    ebx
c0016f07:	31 c0                	xor    eax,eax
c0016f09:	5e                   	pop    esi
c0016f0a:	5f                   	pop    edi
c0016f0b:	c3                   	ret    

c0016f0c <sysGetUnixTime(regs*)>:
c0016f0c:	a1 88 45 02 c0       	mov    eax,ds:0xc0024588
c0016f11:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016f17:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016f1b:	e9 56 91 ff ff       	jmp    c0010076 <Clock::timeInSecondsLocal()>

c0016f20 <string_ends_with(char const*, char const*)>:
c0016f20:	57                   	push   edi
c0016f21:	56                   	push   esi
c0016f22:	53                   	push   ebx
c0016f23:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016f27:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0016f2b:	83 ec 0c             	sub    esp,0xc
c0016f2e:	53                   	push   ebx
c0016f2f:	e8 a3 97 fe ff       	call   c00006d7 <strlen>
c0016f34:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016f37:	89 c6                	mov    esi,eax
c0016f39:	e8 99 97 fe ff       	call   c00006d7 <strlen>
c0016f3e:	83 c4 10             	add    esp,0x10
c0016f41:	31 d2                	xor    edx,edx
c0016f43:	39 c6                	cmp    esi,eax
c0016f45:	7d 06                	jge    c0016f4d <string_ends_with(char const*, char const*)+0x2d>
c0016f47:	5b                   	pop    ebx
c0016f48:	89 d0                	mov    eax,edx
c0016f4a:	5e                   	pop    esi
c0016f4b:	5f                   	pop    edi
c0016f4c:	c3                   	ret    
c0016f4d:	52                   	push   edx
c0016f4e:	29 c6                	sub    esi,eax
c0016f50:	52                   	push   edx
c0016f51:	01 f3                	add    ebx,esi
c0016f53:	57                   	push   edi
c0016f54:	53                   	push   ebx
c0016f55:	e8 50 98 fe ff       	call   c00007aa <strcmp>
c0016f5a:	83 c4 10             	add    esp,0x10
c0016f5d:	31 d2                	xor    edx,edx
c0016f5f:	85 c0                	test   eax,eax
c0016f61:	5b                   	pop    ebx
c0016f62:	0f 94 c2             	sete   dl
c0016f65:	5e                   	pop    esi
c0016f66:	89 d0                	mov    eax,edx
c0016f68:	5f                   	pop    edi
c0016f69:	c3                   	ret    

c0016f6a <sysCallOpen(regs*)>:
c0016f6a:	56                   	push   esi
c0016f6b:	53                   	push   ebx
c0016f6c:	81 ec 04 01 00 00    	sub    esp,0x104
c0016f72:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0016f79:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0016f7c:	85 c9                	test   ecx,ecx
c0016f7e:	0f 84 bb 00 00 00    	je     c001703f <sysCallOpen(regs*)+0xd5>
c0016f84:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016f87:	85 c0                	test   eax,eax
c0016f89:	0f 84 b0 00 00 00    	je     c001703f <sysCallOpen(regs*)+0xd5>
c0016f8f:	52                   	push   edx
c0016f90:	68 fe 29 02 c0       	push   0xc00229fe
c0016f95:	50                   	push   eax
c0016f96:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0016f9a:	56                   	push   esi
c0016f9b:	e8 64 85 ff ff       	call   c000f504 <standardiseFiles(char*, char const*, char const*)>
c0016fa0:	89 34 24             	mov    DWORD PTR [esp],esi
c0016fa3:	e8 2f 97 fe ff       	call   c00006d7 <strlen>
c0016fa8:	83 c4 10             	add    esp,0x10
c0016fab:	48                   	dec    eax
c0016fac:	74 25                	je     c0016fd3 <sysCallOpen(regs*)+0x69>
c0016fae:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c0016fb1:	80 fa 2e             	cmp    dl,0x2e
c0016fb4:	74 19                	je     c0016fcf <sysCallOpen(regs*)+0x65>
c0016fb6:	80 fa 3a             	cmp    dl,0x3a
c0016fb9:	74 14                	je     c0016fcf <sysCallOpen(regs*)+0x65>
c0016fbb:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0016fbf:	48                   	dec    eax
c0016fc0:	74 11                	je     c0016fd3 <sysCallOpen(regs*)+0x69>
c0016fc2:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0016fc5:	80 fa 3a             	cmp    dl,0x3a
c0016fc8:	74 05                	je     c0016fcf <sysCallOpen(regs*)+0x65>
c0016fca:	80 fa 2e             	cmp    dl,0x2e
c0016fcd:	75 ec                	jne    c0016fbb <sysCallOpen(regs*)+0x51>
c0016fcf:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0016fd3:	51                   	push   ecx
c0016fd4:	51                   	push   ecx
c0016fd5:	68 02 2a 02 c0       	push   0xc0022a02
c0016fda:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016fdd:	50                   	push   eax
c0016fde:	e8 3d ff ff ff       	call   c0016f20 <string_ends_with(char const*, char const*)>
c0016fe3:	83 c4 10             	add    esp,0x10
c0016fe6:	85 c0                	test   eax,eax
c0016fe8:	75 17                	jne    c0017001 <sysCallOpen(regs*)+0x97>
c0016fea:	50                   	push   eax
c0016feb:	50                   	push   eax
c0016fec:	68 23 2a 02 c0       	push   0xc0022a23
c0016ff1:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016ff4:	50                   	push   eax
c0016ff5:	e8 26 ff ff ff       	call   c0016f20 <string_ends_with(char const*, char const*)>
c0016ffa:	83 c4 10             	add    esp,0x10
c0016ffd:	85 c0                	test   eax,eax
c0016fff:	74 4d                	je     c001704e <sysCallOpen(regs*)+0xe4>
c0017001:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0017004:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001700a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0017011:	50                   	push   eax
c0017012:	50                   	push   eax
c0017013:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0017016:	8b 10                	mov    edx,DWORD PTR [eax]
c0017018:	52                   	push   edx
c0017019:	68 07 2a 02 c0       	push   0xc0022a07
c001701e:	e8 54 81 ff ff       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c0017023:	c7 04 24 16 2a 02 c0 	mov    DWORD PTR [esp],0xc0022a16
c001702a:	e8 48 81 ff ff       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c001702f:	83 c4 10             	add    esp,0x10
c0017032:	81 c4 04 01 00 00    	add    esp,0x104
c0017038:	31 c0                	xor    eax,eax
c001703a:	31 d2                	xor    edx,edx
c001703c:	5b                   	pop    ebx
c001703d:	5e                   	pop    esi
c001703e:	c3                   	ret    
c001703f:	81 c4 04 01 00 00    	add    esp,0x104
c0017045:	83 c8 ff             	or     eax,0xffffffff
c0017048:	83 ca ff             	or     edx,0xffffffff
c001704b:	5b                   	pop    ebx
c001704c:	5e                   	pop    esi
c001704d:	c3                   	ret    
c001704e:	50                   	push   eax
c001704f:	50                   	push   eax
c0017050:	68 03 2a 02 c0       	push   0xc0022a03
c0017055:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0017058:	50                   	push   eax
c0017059:	e8 4c 97 fe ff       	call   c00007aa <strcmp>
c001705e:	83 c4 10             	add    esp,0x10
c0017061:	85 c0                	test   eax,eax
c0017063:	74 9c                	je     c0017001 <sysCallOpen(regs*)+0x97>
c0017065:	50                   	push   eax
c0017066:	50                   	push   eax
c0017067:	68 02 2a 02 c0       	push   0xc0022a02
c001706c:	56                   	push   esi
c001706d:	e8 ae fe ff ff       	call   c0016f20 <string_ends_with(char const*, char const*)>
c0017072:	83 c4 10             	add    esp,0x10
c0017075:	85 c0                	test   eax,eax
c0017077:	75 88                	jne    c0017001 <sysCallOpen(regs*)+0x97>
c0017079:	52                   	push   edx
c001707a:	52                   	push   edx
c001707b:	68 28 2a 02 c0       	push   0xc0022a28
c0017080:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0017083:	51                   	push   ecx
c0017084:	e8 97 fe ff ff       	call   c0016f20 <string_ends_with(char const*, char const*)>
c0017089:	83 c4 10             	add    esp,0x10
c001708c:	85 c0                	test   eax,eax
c001708e:	0f 85 d5 00 00 00    	jne    c0017169 <sysCallOpen(regs*)+0x1ff>
c0017094:	50                   	push   eax
c0017095:	50                   	push   eax
c0017096:	68 2d 2a 02 c0       	push   0xc0022a2d
c001709b:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001709e:	50                   	push   eax
c001709f:	e8 7c fe ff ff       	call   c0016f20 <string_ends_with(char const*, char const*)>
c00170a4:	83 c4 10             	add    esp,0x10
c00170a7:	85 c0                	test   eax,eax
c00170a9:	0f 85 ba 00 00 00    	jne    c0017169 <sysCallOpen(regs*)+0x1ff>
c00170af:	50                   	push   eax
c00170b0:	50                   	push   eax
c00170b1:	68 29 2a 02 c0       	push   0xc0022a29
c00170b6:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00170b9:	50                   	push   eax
c00170ba:	e8 eb 96 fe ff       	call   c00007aa <strcmp>
c00170bf:	83 c4 10             	add    esp,0x10
c00170c2:	85 c0                	test   eax,eax
c00170c4:	0f 84 9f 00 00 00    	je     c0017169 <sysCallOpen(regs*)+0x1ff>
c00170ca:	50                   	push   eax
c00170cb:	50                   	push   eax
c00170cc:	68 28 2a 02 c0       	push   0xc0022a28
c00170d1:	56                   	push   esi
c00170d2:	e8 49 fe ff ff       	call   c0016f20 <string_ends_with(char const*, char const*)>
c00170d7:	83 c4 10             	add    esp,0x10
c00170da:	85 c0                	test   eax,eax
c00170dc:	0f 85 87 00 00 00    	jne    c0017169 <sysCallOpen(regs*)+0x1ff>
c00170e2:	83 ec 0c             	sub    esp,0xc
c00170e5:	68 14 01 00 00       	push   0x114
c00170ea:	e8 53 7f ff ff       	call   c000f042 <operator new(unsigned long)>
c00170ef:	89 c6                	mov    esi,eax
c00170f1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00170f6:	83 c4 0c             	add    esp,0xc
c00170f9:	8b 48 40             	mov    ecx,DWORD PTR [eax+0x40]
c00170fc:	51                   	push   ecx
c00170fd:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0017100:	50                   	push   eax
c0017101:	56                   	push   esi
c0017102:	e8 a7 85 ff ff       	call   c000f6ae <File::File(char const*, Process*)>
c0017107:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001710a:	83 c4 10             	add    esp,0x10
c001710d:	89 d0                	mov    eax,edx
c001710f:	25 ff 00 00 00       	and    eax,0xff
c0017114:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0017117:	89 d0                	mov    eax,edx
c0017119:	83 e0 01             	and    eax,0x1
c001711c:	f6 c2 02             	test   dl,0x2
c001711f:	74 03                	je     c0017124 <sysCallOpen(regs*)+0x1ba>
c0017121:	83 c8 02             	or     eax,0x2
c0017124:	f6 c2 04             	test   dl,0x4
c0017127:	74 03                	je     c001712c <sysCallOpen(regs*)+0x1c2>
c0017129:	83 c8 04             	or     eax,0x4
c001712c:	f6 c2 08             	test   dl,0x8
c001712f:	74 03                	je     c0017134 <sysCallOpen(regs*)+0x1ca>
c0017131:	83 c8 0a             	or     eax,0xa
c0017134:	83 e2 10             	and    edx,0x10
c0017137:	74 03                	je     c001713c <sysCallOpen(regs*)+0x1d2>
c0017139:	83 c8 12             	or     eax,0x12
c001713c:	52                   	push   edx
c001713d:	52                   	push   edx
c001713e:	50                   	push   eax
c001713f:	56                   	push   esi
c0017140:	e8 cd 85 ff ff       	call   c000f712 <File::open(FileOpenMode)>
c0017145:	83 c4 10             	add    esp,0x10
c0017148:	85 c0                	test   eax,eax
c001714a:	0f 85 ef fe ff ff    	jne    c001703f <sysCallOpen(regs*)+0xd5>
c0017150:	83 ec 0c             	sub    esp,0xc
c0017153:	56                   	push   esi
c0017154:	e8 f3 6b ff ff       	call   c000dd4c <UnixFile::getFileDescriptor()>
c0017159:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001715c:	89 02                	mov    DWORD PTR [edx],eax
c001715e:	c1 f8 1f             	sar    eax,0x1f
c0017161:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0017164:	e9 c6 fe ff ff       	jmp    c001702f <sysCallOpen(regs*)+0xc5>
c0017169:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001716c:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0017172:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0017179:	e9 b4 fe ff ff       	jmp    c0017032 <sysCallOpen(regs*)+0xc8>

c001717e <setupSystemCalls()>:
c001717e:	c7 05 e0 4f 02 c0 79 63 01 c0 	mov    DWORD PTR ds:0xc0024fe0,0xc0016379
c0017188:	c7 05 e4 4f 02 c0 a7 61 01 c0 	mov    DWORD PTR ds:0xc0024fe4,0xc00161a7
c0017192:	c7 05 e8 4f 02 c0 bc 62 01 c0 	mov    DWORD PTR ds:0xc0024fe8,0xc00162bc
c001719c:	c7 05 ec 4f 02 c0 11 63 01 c0 	mov    DWORD PTR ds:0xc0024fec,0xc0016311
c00171a6:	c7 05 f0 4f 02 c0 54 62 01 c0 	mov    DWORD PTR ds:0xc0024ff0,0xc0016254
c00171b0:	c7 05 f4 4f 02 c0 93 63 01 c0 	mov    DWORD PTR ds:0xc0024ff4,0xc0016393
c00171ba:	c7 05 f8 4f 02 c0 52 65 01 c0 	mov    DWORD PTR ds:0xc0024ff8,0xc0016552
c00171c4:	c7 05 fc 4f 02 c0 78 65 01 c0 	mov    DWORD PTR ds:0xc0024ffc,0xc0016578
c00171ce:	c7 05 04 50 02 c0 e2 68 01 c0 	mov    DWORD PTR ds:0xc0025004,0xc00168e2
c00171d8:	c7 05 00 50 02 c0 6a 6f 01 c0 	mov    DWORD PTR ds:0xc0025000,0xc0016f6a
c00171e2:	c7 05 08 50 02 c0 65 69 01 c0 	mov    DWORD PTR ds:0xc0025008,0xc0016965
c00171ec:	c7 05 0c 50 02 c0 e7 65 01 c0 	mov    DWORD PTR ds:0xc002500c,0xc00165e7
c00171f6:	c7 05 10 50 02 c0 a3 63 01 c0 	mov    DWORD PTR ds:0xc0025010,0xc00163a3
c0017200:	c7 05 14 50 02 c0 a8 63 01 c0 	mov    DWORD PTR ds:0xc0025014,0xc00163a8
c001720a:	c7 05 18 50 02 c0 d0 69 01 c0 	mov    DWORD PTR ds:0xc0025018,0xc00169d0
c0017214:	c7 05 1c 50 02 c0 2b 6a 01 c0 	mov    DWORD PTR ds:0xc002501c,0xc0016a2b
c001721e:	c7 05 20 50 02 c0 d2 66 01 c0 	mov    DWORD PTR ds:0xc0025020,0xc00166d2
c0017228:	c7 05 24 50 02 c0 38 67 01 c0 	mov    DWORD PTR ds:0xc0025024,0xc0016738
c0017232:	c7 05 28 50 02 c0 61 68 01 c0 	mov    DWORD PTR ds:0xc0025028,0xc0016861
c001723c:	c7 05 2c 50 02 c0 ad 63 01 c0 	mov    DWORD PTR ds:0xc002502c,0xc00163ad
c0017246:	c7 05 30 50 02 c0 8c 6a 01 c0 	mov    DWORD PTR ds:0xc0025030,0xc0016a8c
c0017250:	c7 05 34 50 02 c0 b7 63 01 c0 	mov    DWORD PTR ds:0xc0025034,0xc00163b7
c001725a:	c7 05 38 50 02 c0 be 63 01 c0 	mov    DWORD PTR ds:0xc0025038,0xc00163be
c0017264:	c7 05 3c 50 02 c0 ad 6a 01 c0 	mov    DWORD PTR ds:0xc002503c,0xc0016aad
c001726e:	c7 05 40 50 02 c0 00 6b 01 c0 	mov    DWORD PTR ds:0xc0025040,0xc0016b00
c0017278:	c7 05 44 50 02 c0 c5 63 01 c0 	mov    DWORD PTR ds:0xc0025044,0xc00163c5
c0017282:	c7 05 48 50 02 c0 53 6b 01 c0 	mov    DWORD PTR ds:0xc0025048,0xc0016b53
c001728c:	c7 05 4c 50 02 c0 9a 65 01 c0 	mov    DWORD PTR ds:0xc002504c,0xc001659a
c0017296:	c7 05 50 50 02 c0 9f 6b 01 c0 	mov    DWORD PTR ds:0xc0025050,0xc0016b9f
c00172a0:	c7 05 54 50 02 c0 7a 66 01 c0 	mov    DWORD PTR ds:0xc0025054,0xc001667a
c00172aa:	c7 05 58 50 02 c0 77 6c 01 c0 	mov    DWORD PTR ds:0xc0025058,0xc0016c77
c00172b4:	c7 05 5c 50 02 c0 b3 67 01 c0 	mov    DWORD PTR ds:0xc002505c,0xc00167b3
c00172be:	c7 05 60 50 02 c0 b9 6c 01 c0 	mov    DWORD PTR ds:0xc0025060,0xc0016cb9
c00172c8:	c7 05 64 50 02 c0 20 6c 01 c0 	mov    DWORD PTR ds:0xc0025064,0xc0016c20
c00172d2:	c7 05 68 50 02 c0 18 6d 01 c0 	mov    DWORD PTR ds:0xc0025068,0xc0016d18
c00172dc:	c7 05 6c 50 02 c0 d9 63 01 c0 	mov    DWORD PTR ds:0xc002506c,0xc00163d9
c00172e6:	c7 05 70 50 02 c0 3c 64 01 c0 	mov    DWORD PTR ds:0xc0025070,0xc001643c
c00172f0:	c7 05 74 50 02 c0 84 64 01 c0 	mov    DWORD PTR ds:0xc0025074,0xc0016484
c00172fa:	c7 05 78 50 02 c0 3d 6e 01 c0 	mov    DWORD PTR ds:0xc0025078,0xc0016e3d
c0017304:	c7 05 7c 50 02 c0 a0 6e 01 c0 	mov    DWORD PTR ds:0xc002507c,0xc0016ea0
c001730e:	c7 05 80 50 02 c0 d7 64 01 c0 	mov    DWORD PTR ds:0xc0025080,0xc00164d7
c0017318:	c7 05 84 50 02 c0 c7 6e 01 c0 	mov    DWORD PTR ds:0xc0025084,0xc0016ec7
c0017322:	c7 05 88 50 02 c0 0c 6f 01 c0 	mov    DWORD PTR ds:0xc0025088,0xc0016f0c
c001732c:	c7 05 8c 50 02 c0 bf 61 01 c0 	mov    DWORD PTR ds:0xc002508c,0xc00161bf
c0017336:	c3                   	ret    

c0017337 <systemCall(regs*, void*)>:
c0017337:	53                   	push   ebx
c0017338:	83 ec 08             	sub    esp,0x8
c001733b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001733f:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0017342:	83 f8 7f             	cmp    eax,0x7f
c0017345:	77 16                	ja     c001735d <systemCall(regs*, void*)+0x26>
c0017347:	8b 14 85 e0 4f 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdb020]
c001734e:	85 d2                	test   edx,edx
c0017350:	74 0b                	je     c001735d <systemCall(regs*, void*)+0x26>
c0017352:	83 ec 0c             	sub    esp,0xc
c0017355:	53                   	push   ebx
c0017356:	ff d2                	call   edx
c0017358:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001735b:	eb 0d                	jmp    c001736a <systemCall(regs*, void*)+0x33>
c001735d:	52                   	push   edx
c001735e:	52                   	push   edx
c001735f:	50                   	push   eax
c0017360:	68 32 2a 02 c0       	push   0xc0022a32
c0017365:	e8 0d 7e ff ff       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c001736a:	83 c4 10             	add    esp,0x10
c001736d:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0017372:	83 c4 08             	add    esp,0x8
c0017375:	31 d2                	xor    edx,edx
c0017377:	5b                   	pop    ebx
c0017378:	c3                   	ret    

c0017379 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0017379:	55                   	push   ebp
c001737a:	89 e5                	mov    ebp,esp
c001737c:	57                   	push   edi
c001737d:	56                   	push   esi
c001737e:	53                   	push   ebx
c001737f:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0017385:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0017388:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c001738b:	f7 45 14 ff 0f 00 00 	test   DWORD PTR [ebp+0x14],0xfff
c0017392:	74 27                	je     c00173bb <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x42>
c0017394:	85 c0                	test   eax,eax
c0017396:	74 23                	je     c00173bb <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x42>
c0017398:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c001739c:	75 1d                	jne    c00173bb <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x42>
c001739e:	8b 75 14             	mov    esi,DWORD PTR [ebp+0x14]
c00173a1:	8d 96 00 10 00 00    	lea    edx,[esi+0x1000]
c00173a7:	89 d1                	mov    ecx,edx
c00173a9:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00173af:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c00173b5:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c00173b8:	89 4d 10             	mov    DWORD PTR [ebp+0x10],ecx
c00173bb:	83 ec 0c             	sub    esp,0xc
c00173be:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c00173c1:	05 ff 0f 00 00       	add    eax,0xfff
c00173c6:	8d 99 ff 0f 00 00    	lea    ebx,[ecx+0xfff]
c00173cc:	6a 01                	push   0x1
c00173ce:	89 85 d4 ef ff ff    	mov    DWORD PTR [ebp-0x102c],eax
c00173d4:	e8 83 6d ff ff       	call   c000e15c <Virt::allocateKernelVirtualPages(int)>
c00173d9:	83 c4 10             	add    esp,0x10
c00173dc:	89 c6                	mov    esi,eax
c00173de:	81 fb ff 0f 00 00    	cmp    ebx,0xfff
c00173e4:	0f 86 21 01 00 00    	jbe    c001750b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x192>
c00173ea:	c1 eb 0c             	shr    ebx,0xc
c00173ed:	c7 85 d0 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x1030],0x0
c00173f7:	89 9d cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],ebx
c00173fd:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c0017400:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0017403:	8b 95 cc ef ff ff    	mov    edx,DWORD PTR [ebp-0x1034]
c0017409:	03 45 14             	add    eax,DWORD PTR [ebp+0x14]
c001740c:	29 d8                	sub    eax,ebx
c001740e:	39 95 d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],edx
c0017414:	0f 83 f4 00 00 00    	jae    c001750e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x195>
c001741a:	83 ec 0c             	sub    esp,0xc
c001741d:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0017420:	8d 95 e4 ef ff ff    	lea    edx,[ebp-0x101c]
c0017426:	3d 00 10 00 00       	cmp    eax,0x1000
c001742b:	8b 09                	mov    ecx,DWORD PTR [ecx]
c001742d:	52                   	push   edx
c001742e:	8d 95 e8 ef ff ff    	lea    edx,[ebp-0x1018]
c0017434:	52                   	push   edx
c0017435:	76 05                	jbe    c001743c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc3>
c0017437:	b8 00 10 00 00       	mov    eax,0x1000
c001743c:	31 d2                	xor    edx,edx
c001743e:	52                   	push   edx
c001743f:	50                   	push   eax
c0017440:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0017443:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017446:	83 c4 20             	add    esp,0x20
c0017449:	85 c0                	test   eax,eax
c001744b:	74 1f                	je     c001746c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf3>
c001744d:	51                   	push   ecx
c001744e:	51                   	push   ecx
c001744f:	50                   	push   eax
c0017450:	68 46 2a 02 c0       	push   0xc0022a46
c0017455:	e8 1d 7d ff ff       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c001745a:	89 34 24             	mov    DWORD PTR [esp],esi
c001745d:	e8 47 70 ff ff       	call   c000e4a9 <Virt::freeKernelVirtualPages(unsigned long)>
c0017462:	83 c4 10             	add    esp,0x10
c0017465:	31 c0                	xor    eax,eax
c0017467:	e9 7c 01 00 00       	jmp    c00175e8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x26f>
c001746c:	e8 be 14 00 00       	call   c001892f <lockScheduler()>
c0017471:	e8 69 51 ff ff       	call   c000c5df <Phys::allocatePage()>
c0017476:	6a 07                	push   0x7
c0017478:	56                   	push   esi
c0017479:	89 85 c8 ef ff ff    	mov    DWORD PTR [ebp-0x1038],eax
c001747f:	50                   	push   eax
c0017480:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0017486:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0017489:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c001748f:	e8 94 73 ff ff       	call   c000e828 <VAS::mapPage(unsigned long, unsigned long, int)>
c0017494:	83 c4 0c             	add    esp,0xc
c0017497:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001749d:	6a 00                	push   0x0
c001749f:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00174a5:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c00174a8:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c00174ae:	e8 d3 71 ff ff       	call   c000e686 <VAS::mapOtherVASIn(bool, VAS*)>
c00174b3:	58                   	pop    eax
c00174b4:	8b 85 c8 ef ff ff    	mov    eax,DWORD PTR [ebp-0x1038]
c00174ba:	5a                   	pop    edx
c00174bb:	68 07 04 00 00       	push   0x407
c00174c0:	53                   	push   ebx
c00174c1:	81 c3 00 10 00 00    	add    ebx,0x1000
c00174c7:	50                   	push   eax
c00174c8:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c00174ce:	6a 00                	push   0x0
c00174d0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00174d5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00174d8:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c00174de:	e8 01 77 ff ff       	call   c000ebe4 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00174e3:	83 c4 1c             	add    esp,0x1c
c00174e6:	8d 85 e8 ef ff ff    	lea    eax,[ebp-0x1018]
c00174ec:	68 00 10 00 00       	push   0x1000
c00174f1:	50                   	push   eax
c00174f2:	56                   	push   esi
c00174f3:	e8 8c 91 fe ff       	call   c0000684 <memcpy>
c00174f8:	e8 34 14 00 00       	call   c0018931 <unlockScheduler()>
c00174fd:	ff 85 d0 ef ff ff    	inc    DWORD PTR [ebp-0x1030]
c0017503:	83 c4 10             	add    esp,0x10
c0017506:	e9 f5 fe ff ff       	jmp    c0017400 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x87>
c001750b:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001750e:	81 bd d4 ef ff ff ff 0f 00 00 	cmp    DWORD PTR [ebp-0x102c],0xfff
c0017518:	0f 86 bc 00 00 00    	jbe    c00175da <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x261>
c001751e:	e8 0c 14 00 00       	call   c001892f <lockScheduler()>
c0017523:	51                   	push   ecx
c0017524:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001752a:	6a 00                	push   0x0
c001752c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017531:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0017534:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001753a:	e8 47 71 ff ff       	call   c000e686 <VAS::mapOtherVASIn(bool, VAS*)>
c001753f:	8b 85 d4 ef ff ff    	mov    eax,DWORD PTR [ebp-0x102c]
c0017545:	c1 e8 0c             	shr    eax,0xc
c0017548:	83 c4 10             	add    esp,0x10
c001754b:	89 85 d0 ef ff ff    	mov    DWORD PTR [ebp-0x1030],eax
c0017551:	c7 85 d4 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x102c],0x0
c001755b:	e8 7f 50 ff ff       	call   c000c5df <Phys::allocatePage()>
c0017560:	6a 07                	push   0x7
c0017562:	56                   	push   esi
c0017563:	89 85 cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],eax
c0017569:	50                   	push   eax
c001756a:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0017570:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c0017573:	ff b1 32 05 00 00    	push   DWORD PTR [ecx+0x532]
c0017579:	e8 aa 72 ff ff       	call   c000e828 <VAS::mapPage(unsigned long, unsigned long, int)>
c001757e:	58                   	pop    eax
c001757f:	8b 85 cc ef ff ff    	mov    eax,DWORD PTR [ebp-0x1034]
c0017585:	5a                   	pop    edx
c0017586:	68 07 04 00 00       	push   0x407
c001758b:	53                   	push   ebx
c001758c:	81 c3 00 10 00 00    	add    ebx,0x1000
c0017592:	50                   	push   eax
c0017593:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c0017599:	6a 00                	push   0x0
c001759b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00175a0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00175a3:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c00175a9:	e8 36 76 ff ff       	call   c000ebe4 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00175ae:	83 c4 1c             	add    esp,0x1c
c00175b1:	68 00 10 00 00       	push   0x1000
c00175b6:	6a 00                	push   0x0
c00175b8:	56                   	push   esi
c00175b9:	e8 fc 90 fe ff       	call   c00006ba <memset>
c00175be:	ff 85 d4 ef ff ff    	inc    DWORD PTR [ebp-0x102c]
c00175c4:	83 c4 10             	add    esp,0x10
c00175c7:	8b 8d d4 ef ff ff    	mov    ecx,DWORD PTR [ebp-0x102c]
c00175cd:	39 8d d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],ecx
c00175d3:	77 86                	ja     c001755b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1e2>
c00175d5:	e8 57 13 00 00       	call   c0018931 <unlockScheduler()>
c00175da:	83 ec 0c             	sub    esp,0xc
c00175dd:	56                   	push   esi
c00175de:	e8 c6 6e ff ff       	call   c000e4a9 <Virt::freeKernelVirtualPages(unsigned long)>
c00175e3:	83 c4 10             	add    esp,0x10
c00175e6:	b0 01                	mov    al,0x1
c00175e8:	8d 65 f4             	lea    esp,[ebp-0xc]
c00175eb:	5b                   	pop    ebx
c00175ec:	5e                   	pop    esi
c00175ed:	5f                   	pop    edi
c00175ee:	5d                   	pop    ebp
c00175ef:	c3                   	ret    

c00175f0 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c00175f0:	55                   	push   ebp
c00175f1:	57                   	push   edi
c00175f2:	56                   	push   esi
c00175f3:	53                   	push   ebx
c00175f4:	83 ec 48             	sub    esp,0x48
c00175f7:	68 14 01 00 00       	push   0x114
c00175fc:	e8 41 7a ff ff       	call   c000f042 <operator new(unsigned long)>
c0017601:	83 c4 0c             	add    esp,0xc
c0017604:	89 c6                	mov    esi,eax
c0017606:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001760a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001760e:	50                   	push   eax
c001760f:	e8 9a 80 ff ff       	call   c000f6ae <File::File(char const*, Process*)>
c0017614:	58                   	pop    eax
c0017615:	5a                   	pop    edx
c0017616:	6a 01                	push   0x1
c0017618:	56                   	push   esi
c0017619:	e8 f4 80 ff ff       	call   c000f712 <File::open(FileOpenMode)>
c001761e:	83 c4 10             	add    esp,0x10
c0017621:	85 c0                	test   eax,eax
c0017623:	0f 85 47 01 00 00    	jne    c0017770 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0017629:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0017631:	83 ec 0c             	sub    esp,0xc
c0017634:	6a 34                	push   0x34
c0017636:	e8 ce 49 ff ff       	call   c000c009 <malloc>
c001763b:	89 c3                	mov    ebx,eax
c001763d:	58                   	pop    eax
c001763e:	8b 06                	mov    eax,DWORD PTR [esi]
c0017640:	8d 7c 24 38          	lea    edi,[esp+0x38]
c0017644:	57                   	push   edi
c0017645:	53                   	push   ebx
c0017646:	6a 00                	push   0x0
c0017648:	6a 34                	push   0x34
c001764a:	56                   	push   esi
c001764b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001764e:	83 c4 20             	add    esp,0x20
c0017651:	85 c0                	test   eax,eax
c0017653:	0f 85 17 01 00 00    	jne    c0017770 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0017659:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001765f:	0f 85 0b 01 00 00    	jne    c0017770 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0017665:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0017668:	85 c0                	test   eax,eax
c001766a:	0f 84 00 01 00 00    	je     c0017770 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0017670:	31 d2                	xor    edx,edx
c0017672:	55                   	push   ebp
c0017673:	52                   	push   edx
c0017674:	50                   	push   eax
c0017675:	56                   	push   esi
c0017676:	e8 55 81 ff ff       	call   c000f7d0 <File::seek(unsigned long long)>
c001767b:	83 c4 10             	add    esp,0x10
c001767e:	85 c0                	test   eax,eax
c0017680:	0f 85 ea 00 00 00    	jne    c0017770 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0017686:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0017689:	83 ec 0c             	sub    esp,0xc
c001768c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017690:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0017694:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0017698:	0f af c2             	imul   eax,edx
c001769b:	50                   	push   eax
c001769c:	e8 68 49 ff ff       	call   c000c009 <malloc>
c00176a1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00176a5:	89 3c 24             	mov    DWORD PTR [esp],edi
c00176a8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00176ac:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00176b0:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00176b4:	0f af c2             	imul   eax,edx
c00176b7:	99                   	cdq    
c00176b8:	52                   	push   edx
c00176b9:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00176bb:	50                   	push   eax
c00176bc:	56                   	push   esi
c00176bd:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00176c0:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00176c3:	83 c4 20             	add    esp,0x20
c00176c6:	85 c0                	test   eax,eax
c00176c8:	0f 84 a2 00 00 00    	je     c0017770 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00176ce:	31 d2                	xor    edx,edx
c00176d0:	51                   	push   ecx
c00176d1:	52                   	push   edx
c00176d2:	50                   	push   eax
c00176d3:	56                   	push   esi
c00176d4:	e8 f7 80 ff ff       	call   c000f7d0 <File::seek(unsigned long long)>
c00176d9:	83 c4 10             	add    esp,0x10
c00176dc:	85 c0                	test   eax,eax
c00176de:	0f 85 8c 00 00 00    	jne    c0017770 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00176e4:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c00176e8:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00176ec:	0f af c2             	imul   eax,edx
c00176ef:	83 ec 0c             	sub    esp,0xc
c00176f2:	31 ed                	xor    ebp,ebp
c00176f4:	50                   	push   eax
c00176f5:	e8 0f 49 ff ff       	call   c000c009 <malloc>
c00176fa:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00176fe:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017701:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017705:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0017709:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001770d:	0f af c2             	imul   eax,edx
c0017710:	99                   	cdq    
c0017711:	52                   	push   edx
c0017712:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0017714:	50                   	push   eax
c0017715:	56                   	push   esi
c0017716:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017719:	83 c4 20             	add    esp,0x20
c001771c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0017724:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c0017728:	0f 86 80 00 00 00    	jbe    c00177ae <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001772e:	0f b7 fd             	movzx  edi,bp
c0017731:	c1 e7 05             	shl    edi,0x5
c0017734:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c0017738:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001773b:	75 6b                	jne    c00177a8 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001773d:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0017740:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017744:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0017747:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001774b:	52                   	push   edx
c001774c:	31 d2                	xor    edx,edx
c001774e:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0017751:	52                   	push   edx
c0017752:	50                   	push   eax
c0017753:	56                   	push   esi
c0017754:	e8 77 80 ff ff       	call   c000f7d0 <File::seek(unsigned long long)>
c0017759:	83 c4 10             	add    esp,0x10
c001775c:	85 c0                	test   eax,eax
c001775e:	74 17                	je     c0017777 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c0017760:	83 ec 0c             	sub    esp,0xc
c0017763:	68 71 2a 02 c0       	push   0xc0022a71
c0017768:	e8 0a 7a ff ff       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c001776d:	83 c4 10             	add    esp,0x10
c0017770:	31 c0                	xor    eax,eax
c0017772:	e9 87 00 00 00       	jmp    c00177fe <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c0017777:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001777a:	83 ec 0c             	sub    esp,0xc
c001777d:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0017780:	50                   	push   eax
c0017781:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017785:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017789:	56                   	push   esi
c001778a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001778e:	e8 e6 fb ff ff       	call   c0017379 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0017793:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017797:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001779b:	83 c4 20             	add    esp,0x20
c001779e:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c00177a2:	73 04                	jae    c00177a8 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c00177a4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00177a8:	45                   	inc    ebp
c00177a9:	e9 76 ff ff ff       	jmp    c0017724 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c00177ae:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00177b2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00177b6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00177ba:	83 ec 0c             	sub    esp,0xc
c00177bd:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c00177c3:	25 00 f0 ff ff       	and    eax,0xfffff000
c00177c8:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c00177ce:	05 00 10 00 00       	add    eax,0x1000
c00177d3:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00177d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00177da:	e8 3a 48 ff ff       	call   c000c019 <free>
c00177df:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00177e2:	e8 32 48 ff ff       	call   c000c019 <free>
c00177e7:	58                   	pop    eax
c00177e8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00177ec:	e8 28 48 ff ff       	call   c000c019 <free>
c00177f1:	89 34 24             	mov    DWORD PTR [esp],esi
c00177f4:	e8 77 7f ff ff       	call   c000f770 <File::close()>
c00177f9:	83 c4 10             	add    esp,0x10
c00177fc:	b0 01                	mov    al,0x1
c00177fe:	83 c4 3c             	add    esp,0x3c
c0017801:	5b                   	pop    ebx
c0017802:	5e                   	pop    esi
c0017803:	5f                   	pop    edi
c0017804:	5d                   	pop    ebp
c0017805:	c3                   	ret    

c0017806 <Thr::runtimeReferenceHelper()>:
c0017806:	83 ec 18             	sub    esp,0x18
c0017809:	68 79 2a 02 c0       	push   0xc0022a79
c001780e:	e8 64 79 ff ff       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c0017813:	fa                   	cli    
c0017814:	83 c4 10             	add    esp,0x10
c0017817:	eb fe                	jmp    c0017817 <Thr::runtimeReferenceHelper()+0x11>

c0017819 <Thr::getAddressOfKernelSymbol(char const*)>:
c0017819:	57                   	push   edi
c001781a:	56                   	push   esi
c001781b:	53                   	push   ebx
c001781c:	31 db                	xor    ebx,ebx
c001781e:	39 1d 80 59 02 c0    	cmp    DWORD PTR ds:0xc0025980,ebx
c0017824:	7e 3c                	jle    c0017862 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0017826:	8b 34 9d 00 59 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffda700]
c001782d:	31 ff                	xor    edi,edi
c001782f:	39 3c 9d 00 58 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffda800],edi
c0017836:	7e 27                	jle    c001785f <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0017838:	50                   	push   eax
c0017839:	50                   	push   eax
c001783a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001783e:	8b 06                	mov    eax,DWORD PTR [esi]
c0017840:	03 04 9d 80 58 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffda780]
c0017847:	50                   	push   eax
c0017848:	e8 5d 8f fe ff       	call   c00007aa <strcmp>
c001784d:	83 c4 10             	add    esp,0x10
c0017850:	85 c0                	test   eax,eax
c0017852:	75 05                	jne    c0017859 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0017854:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0017857:	eb 0b                	jmp    c0017864 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0017859:	83 c6 10             	add    esi,0x10
c001785c:	47                   	inc    edi
c001785d:	eb d0                	jmp    c001782f <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001785f:	43                   	inc    ebx
c0017860:	eb bc                	jmp    c001781e <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0017862:	31 c0                	xor    eax,eax
c0017864:	5b                   	pop    ebx
c0017865:	5e                   	pop    esi
c0017866:	5f                   	pop    edi
c0017867:	c3                   	ret    

c0017868 <Thr::loadKernelSymbolTable(char const*)>:
c0017868:	55                   	push   ebp
c0017869:	57                   	push   edi
c001786a:	56                   	push   esi
c001786b:	53                   	push   ebx
c001786c:	83 ec 68             	sub    esp,0x68
c001786f:	8b 35 d4 59 02 c0    	mov    esi,DWORD PTR ds:0xc00259d4
c0017875:	68 14 01 00 00       	push   0x114
c001787a:	e8 c3 77 ff ff       	call   c000f042 <operator new(unsigned long)>
c001787f:	83 c4 0c             	add    esp,0xc
c0017882:	89 c3                	mov    ebx,eax
c0017884:	56                   	push   esi
c0017885:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0017889:	50                   	push   eax
c001788a:	e8 1f 7e ff ff       	call   c000f6ae <File::File(char const*, Process*)>
c001788f:	5e                   	pop    esi
c0017890:	5f                   	pop    edi
c0017891:	6a 01                	push   0x1
c0017893:	53                   	push   ebx
c0017894:	e8 79 7e ff ff       	call   c000f712 <File::open(FileOpenMode)>
c0017899:	83 c4 10             	add    esp,0x10
c001789c:	31 d2                	xor    edx,edx
c001789e:	85 c0                	test   eax,eax
c00178a0:	0f 85 79 02 00 00    	jne    c0017b1f <Thr::loadKernelSymbolTable(char const*)+0x2b7>
c00178a6:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00178ae:	83 ec 0c             	sub    esp,0xc
c00178b1:	6a 34                	push   0x34
c00178b3:	e8 51 47 ff ff       	call   c000c009 <malloc>
c00178b8:	59                   	pop    ecx
c00178b9:	89 c7                	mov    edi,eax
c00178bb:	8b 03                	mov    eax,DWORD PTR [ebx]
c00178bd:	8d 74 24 34          	lea    esi,[esp+0x34]
c00178c1:	56                   	push   esi
c00178c2:	57                   	push   edi
c00178c3:	6a 00                	push   0x0
c00178c5:	6a 34                	push   0x34
c00178c7:	53                   	push   ebx
c00178c8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00178cb:	83 c4 20             	add    esp,0x20
c00178ce:	85 c0                	test   eax,eax
c00178d0:	74 17                	je     c00178e9 <Thr::loadKernelSymbolTable(char const*)+0x81>
c00178d2:	83 ec 0c             	sub    esp,0xc
c00178d5:	68 9b 2a 02 c0       	push   0xc0022a9b
c00178da:	e8 63 e0 ff ff       	call   c0015942 <Krnl::panic(char const*)>
c00178df:	83 c4 10             	add    esp,0x10
c00178e2:	31 d2                	xor    edx,edx
c00178e4:	e9 36 02 00 00       	jmp    c0017b1f <Thr::loadKernelSymbolTable(char const*)+0x2b7>
c00178e9:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c00178ef:	75 e1                	jne    c00178d2 <Thr::loadKernelSymbolTable(char const*)+0x6a>
c00178f1:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c00178f4:	85 c0                	test   eax,eax
c00178f6:	74 da                	je     c00178d2 <Thr::loadKernelSymbolTable(char const*)+0x6a>
c00178f8:	52                   	push   edx
c00178f9:	31 d2                	xor    edx,edx
c00178fb:	52                   	push   edx
c00178fc:	50                   	push   eax
c00178fd:	53                   	push   ebx
c00178fe:	e8 cd 7e ff ff       	call   c000f7d0 <File::seek(unsigned long long)>
c0017903:	83 c4 10             	add    esp,0x10
c0017906:	85 c0                	test   eax,eax
c0017908:	75 c8                	jne    c00178d2 <Thr::loadKernelSymbolTable(char const*)+0x6a>
c001790a:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001790e:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0017912:	0f af c2             	imul   eax,edx
c0017915:	83 ec 0c             	sub    esp,0xc
c0017918:	31 ed                	xor    ebp,ebp
c001791a:	50                   	push   eax
c001791b:	e8 e9 46 ff ff       	call   c000c009 <malloc>
c0017920:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017924:	89 34 24             	mov    DWORD PTR [esp],esi
c0017927:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001792b:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001792f:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0017933:	0f af c2             	imul   eax,edx
c0017936:	99                   	cdq    
c0017937:	52                   	push   edx
c0017938:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001793a:	50                   	push   eax
c001793b:	53                   	push   ebx
c001793c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001793f:	83 c4 20             	add    esp,0x20
c0017942:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001794a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0017952:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001795a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0017962:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c0017966:	0f 86 aa 00 00 00    	jbe    c0017a16 <Thr::loadKernelSymbolTable(char const*)+0x1ae>
c001796c:	0f b7 f5             	movzx  esi,bp
c001796f:	6b f6 28             	imul   esi,esi,0x28
c0017972:	03 74 24 10          	add    esi,DWORD PTR [esp+0x10]
c0017976:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0017979:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001797d:	50                   	push   eax
c001797e:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0017982:	6b c0 28             	imul   eax,eax,0x28
c0017985:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0017989:	8b 16                	mov    edx,DWORD PTR [esi]
c001798b:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001798f:	89 d0                	mov    eax,edx
c0017991:	31 d2                	xor    edx,edx
c0017993:	52                   	push   edx
c0017994:	50                   	push   eax
c0017995:	53                   	push   ebx
c0017996:	e8 35 7e ff ff       	call   c000f7d0 <File::seek(unsigned long long)>
c001799b:	83 c4 0c             	add    esp,0xc
c001799e:	6a 20                	push   0x20
c00179a0:	6a 00                	push   0x0
c00179a2:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c00179a6:	52                   	push   edx
c00179a7:	e8 0e 8d fe ff       	call   c00006ba <memset>
c00179ac:	58                   	pop    eax
c00179ad:	8b 03                	mov    eax,DWORD PTR [ebx]
c00179af:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c00179b3:	51                   	push   ecx
c00179b4:	8d 54 24 40          	lea    edx,[esp+0x40]
c00179b8:	52                   	push   edx
c00179b9:	6a 00                	push   0x0
c00179bb:	6a 1f                	push   0x1f
c00179bd:	53                   	push   ebx
c00179be:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00179c1:	83 c4 18             	add    esp,0x18
c00179c4:	68 b2 2a 02 c0       	push   0xc0022ab2
c00179c9:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c00179cd:	52                   	push   edx
c00179ce:	e8 d7 8d fe ff       	call   c00007aa <strcmp>
c00179d3:	83 c4 10             	add    esp,0x10
c00179d6:	85 c0                	test   eax,eax
c00179d8:	75 0f                	jne    c00179e9 <Thr::loadKernelSymbolTable(char const*)+0x181>
c00179da:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00179dd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00179e1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00179e5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00179e9:	50                   	push   eax
c00179ea:	50                   	push   eax
c00179eb:	68 ba 2a 02 c0       	push   0xc0022aba
c00179f0:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c00179f4:	50                   	push   eax
c00179f5:	e8 b0 8d fe ff       	call   c00007aa <strcmp>
c00179fa:	83 c4 10             	add    esp,0x10
c00179fd:	85 c0                	test   eax,eax
c00179ff:	75 0f                	jne    c0017a10 <Thr::loadKernelSymbolTable(char const*)+0x1a8>
c0017a01:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017a04:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017a08:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017a0c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017a10:	45                   	inc    ebp
c0017a11:	e9 4c ff ff ff       	jmp    c0017962 <Thr::loadKernelSymbolTable(char const*)+0xfa>
c0017a16:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0017a1b:	75 10                	jne    c0017a2d <Thr::loadKernelSymbolTable(char const*)+0x1c5>
c0017a1d:	83 ec 0c             	sub    esp,0xc
c0017a20:	68 c2 2a 02 c0       	push   0xc0022ac2
c0017a25:	e8 18 df ff ff       	call   c0015942 <Krnl::panic(char const*)>
c0017a2a:	83 c4 10             	add    esp,0x10
c0017a2d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0017a32:	75 10                	jne    c0017a44 <Thr::loadKernelSymbolTable(char const*)+0x1dc>
c0017a34:	83 ec 0c             	sub    esp,0xc
c0017a37:	68 c2 2a 02 c0       	push   0xc0022ac2
c0017a3c:	e8 01 df ff ff       	call   c0015942 <Krnl::panic(char const*)>
c0017a41:	83 c4 10             	add    esp,0x10
c0017a44:	31 d2                	xor    edx,edx
c0017a46:	50                   	push   eax
c0017a47:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017a4b:	52                   	push   edx
c0017a4c:	50                   	push   eax
c0017a4d:	53                   	push   ebx
c0017a4e:	e8 7d 7d ff ff       	call   c000f7d0 <File::seek(unsigned long long)>
c0017a53:	5a                   	pop    edx
c0017a54:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017a58:	e8 ac 45 ff ff       	call   c000c009 <malloc>
c0017a5d:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0017a65:	89 c1                	mov    ecx,eax
c0017a67:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017a6b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017a6f:	5e                   	pop    esi
c0017a70:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017a72:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0017a76:	55                   	push   ebp
c0017a77:	51                   	push   ecx
c0017a78:	89 4c 24 30          	mov    DWORD PTR [esp+0x30],ecx
c0017a7c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017a80:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017a84:	53                   	push   ebx
c0017a85:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017a88:	83 c4 14             	add    esp,0x14
c0017a8b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017a8f:	e8 75 45 ff ff       	call   c000c009 <malloc>
c0017a94:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017a97:	89 c6                	mov    esi,eax
c0017a99:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017a9b:	56                   	push   esi
c0017a9c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017aa0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017aa4:	53                   	push   ebx
c0017aa5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017aa8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017aac:	8b 15 80 59 02 c0    	mov    edx,DWORD PTR ds:0xc0025980
c0017ab2:	c1 e8 04             	shr    eax,0x4
c0017ab5:	83 c4 1c             	add    esp,0x1c
c0017ab8:	89 04 95 00 58 02 c0 	mov    DWORD PTR [edx*4-0x3ffda800],eax
c0017abf:	31 d2                	xor    edx,edx
c0017ac1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017ac5:	52                   	push   edx
c0017ac6:	50                   	push   eax
c0017ac7:	53                   	push   ebx
c0017ac8:	e8 03 7d ff ff       	call   c000f7d0 <File::seek(unsigned long long)>
c0017acd:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017ad0:	31 d2                	xor    edx,edx
c0017ad2:	56                   	push   esi
c0017ad3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ad7:	52                   	push   edx
c0017ad8:	50                   	push   eax
c0017ad9:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017adb:	53                   	push   ebx
c0017adc:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017adf:	83 c4 14             	add    esp,0x14
c0017ae2:	53                   	push   ebx
c0017ae3:	e8 88 7c ff ff       	call   c000f770 <File::close()>
c0017ae8:	5d                   	pop    ebp
c0017ae9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017aed:	e8 27 45 ff ff       	call   c000c019 <free>
c0017af2:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017af5:	e8 1f 45 ff ff       	call   c000c019 <free>
c0017afa:	a1 80 59 02 c0       	mov    eax,ds:0xc0025980
c0017aff:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0017b03:	8d 50 01             	lea    edx,[eax+0x1]
c0017b06:	89 15 80 59 02 c0    	mov    DWORD PTR ds:0xc0025980,edx
c0017b0c:	89 0c 85 00 59 02 c0 	mov    DWORD PTR [eax*4-0x3ffda700],ecx
c0017b13:	89 34 85 80 58 02 c0 	mov    DWORD PTR [eax*4-0x3ffda780],esi
c0017b1a:	83 c4 10             	add    esp,0x10
c0017b1d:	b2 01                	mov    dl,0x1
c0017b1f:	83 c4 5c             	add    esp,0x5c
c0017b22:	88 d0                	mov    al,dl
c0017b24:	5b                   	pop    ebx
c0017b25:	5e                   	pop    esi
c0017b26:	5f                   	pop    edi
c0017b27:	5d                   	pop    ebp
c0017b28:	c3                   	ret    

c0017b29 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0017b29:	55                   	push   ebp
c0017b2a:	57                   	push   edi
c0017b2b:	56                   	push   esi
c0017b2c:	53                   	push   ebx
c0017b2d:	81 ec 68 03 00 00    	sub    esp,0x368
c0017b33:	8b 1d d4 59 02 c0    	mov    ebx,DWORD PTR ds:0xc00259d4
c0017b39:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0017b40:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c0017b44:	68 14 01 00 00       	push   0x114
c0017b49:	e8 f4 74 ff ff       	call   c000f042 <operator new(unsigned long)>
c0017b4e:	83 c4 0c             	add    esp,0xc
c0017b51:	53                   	push   ebx
c0017b52:	89 c7                	mov    edi,eax
c0017b54:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0017b5b:	50                   	push   eax
c0017b5c:	e8 4d 7b ff ff       	call   c000f6ae <File::File(char const*, Process*)>
c0017b61:	5e                   	pop    esi
c0017b62:	5d                   	pop    ebp
c0017b63:	6a 01                	push   0x1
c0017b65:	57                   	push   edi
c0017b66:	e8 a7 7b ff ff       	call   c000f712 <File::open(FileOpenMode)>
c0017b6b:	83 c4 10             	add    esp,0x10
c0017b6e:	85 c0                	test   eax,eax
c0017b70:	0f 85 10 07 00 00    	jne    c0018286 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017b76:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0017b7e:	83 ec 0c             	sub    esp,0xc
c0017b81:	6a 34                	push   0x34
c0017b83:	e8 81 44 ff ff       	call   c000c009 <malloc>
c0017b88:	5b                   	pop    ebx
c0017b89:	89 c5                	mov    ebp,eax
c0017b8b:	8b 07                	mov    eax,DWORD PTR [edi]
c0017b8d:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0017b91:	53                   	push   ebx
c0017b92:	55                   	push   ebp
c0017b93:	6a 00                	push   0x0
c0017b95:	6a 34                	push   0x34
c0017b97:	57                   	push   edi
c0017b98:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017b9b:	83 c4 20             	add    esp,0x20
c0017b9e:	85 c0                	test   eax,eax
c0017ba0:	0f 85 e0 06 00 00    	jne    c0018286 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017ba6:	81 7d 00 7f 45 4c 46 	cmp    DWORD PTR [ebp+0x0],0x464c457f
c0017bad:	0f 85 d3 06 00 00    	jne    c0018286 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017bb3:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0017bb6:	85 c0                	test   eax,eax
c0017bb8:	0f 84 c8 06 00 00    	je     c0018286 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017bbe:	31 d2                	xor    edx,edx
c0017bc0:	51                   	push   ecx
c0017bc1:	52                   	push   edx
c0017bc2:	50                   	push   eax
c0017bc3:	57                   	push   edi
c0017bc4:	e8 07 7c ff ff       	call   c000f7d0 <File::seek(unsigned long long)>
c0017bc9:	83 c4 10             	add    esp,0x10
c0017bcc:	85 c0                	test   eax,eax
c0017bce:	0f 85 b2 06 00 00    	jne    c0018286 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017bd4:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0017bd7:	83 ec 0c             	sub    esp,0xc
c0017bda:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0017bde:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c0017be2:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0017be6:	0f af c2             	imul   eax,edx
c0017be9:	50                   	push   eax
c0017bea:	e8 1a 44 ff ff       	call   c000c009 <malloc>
c0017bef:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017bf3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017bf6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017bfa:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c0017bfe:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0017c02:	0f af c2             	imul   eax,edx
c0017c05:	99                   	cdq    
c0017c06:	52                   	push   edx
c0017c07:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0017c09:	50                   	push   eax
c0017c0a:	57                   	push   edi
c0017c0b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017c0e:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
c0017c11:	83 c4 20             	add    esp,0x20
c0017c14:	85 c0                	test   eax,eax
c0017c16:	0f 84 6a 06 00 00    	je     c0018286 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017c1c:	52                   	push   edx
c0017c1d:	31 d2                	xor    edx,edx
c0017c1f:	52                   	push   edx
c0017c20:	50                   	push   eax
c0017c21:	57                   	push   edi
c0017c22:	e8 a9 7b ff ff       	call   c000f7d0 <File::seek(unsigned long long)>
c0017c27:	83 c4 10             	add    esp,0x10
c0017c2a:	85 c0                	test   eax,eax
c0017c2c:	0f 85 54 06 00 00    	jne    c0018286 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017c32:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c0017c36:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0017c3a:	0f af c2             	imul   eax,edx
c0017c3d:	83 ec 0c             	sub    esp,0xc
c0017c40:	31 f6                	xor    esi,esi
c0017c42:	50                   	push   eax
c0017c43:	e8 c1 43 ff ff       	call   c000c009 <malloc>
c0017c48:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017c4c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017c4f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017c53:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c0017c57:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0017c5b:	0f af c2             	imul   eax,edx
c0017c5e:	99                   	cdq    
c0017c5f:	52                   	push   edx
c0017c60:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0017c62:	50                   	push   eax
c0017c63:	57                   	push   edi
c0017c64:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017c67:	83 c4 20             	add    esp,0x20
c0017c6a:	66 39 75 2c          	cmp    WORD PTR [ebp+0x2c],si
c0017c6e:	0f 86 af 00 00 00    	jbe    c0017d23 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1fa>
c0017c74:	0f b7 de             	movzx  ebx,si
c0017c77:	c1 e3 05             	shl    ebx,0x5
c0017c7a:	03 5c 24 1c          	add    ebx,DWORD PTR [esp+0x1c]
c0017c7e:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c0017c81:	0f 85 96 00 00 00    	jne    c0017d1d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1f4>
c0017c87:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017c8a:	31 d2                	xor    edx,edx
c0017c8c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017c90:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017c93:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017c97:	50                   	push   eax
c0017c98:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0017c9b:	52                   	push   edx
c0017c9c:	50                   	push   eax
c0017c9d:	57                   	push   edi
c0017c9e:	e8 2d 7b ff ff       	call   c000f7d0 <File::seek(unsigned long long)>
c0017ca3:	83 c4 10             	add    esp,0x10
c0017ca6:	85 c0                	test   eax,eax
c0017ca8:	0f 85 d8 05 00 00    	jne    c0018286 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017cae:	52                   	push   edx
c0017caf:	52                   	push   edx
c0017cb0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017cb4:	68 dc 2a 02 c0       	push   0xc0022adc
c0017cb9:	e8 b9 74 ff ff       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c0017cbe:	8b 84 24 84 03 00 00 	mov    eax,DWORD PTR [esp+0x384]
c0017cc5:	31 d2                	xor    edx,edx
c0017cc7:	2b 44 24 3c          	sub    eax,DWORD PTR [esp+0x3c]
c0017ccb:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0017ccf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017cd3:	59                   	pop    ecx
c0017cd4:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0017cd6:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017cdd:	50                   	push   eax
c0017cde:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017ce2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017ce6:	52                   	push   edx
c0017ce7:	50                   	push   eax
c0017ce8:	57                   	push   edi
c0017ce9:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017cec:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0017cef:	83 c4 18             	add    esp,0x18
c0017cf2:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0017cf5:	50                   	push   eax
c0017cf6:	68 00 2b 02 c0       	push   0xc0022b00
c0017cfb:	e8 77 74 ff ff       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c0017d00:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0017d03:	83 c4 0c             	add    esp,0xc
c0017d06:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0017d09:	50                   	push   eax
c0017d0a:	6a 00                	push   0x0
c0017d0c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017d10:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0017d14:	50                   	push   eax
c0017d15:	e8 a0 89 fe ff       	call   c00006ba <memset>
c0017d1a:	83 c4 10             	add    esp,0x10
c0017d1d:	46                   	inc    esi
c0017d1e:	e9 47 ff ff ff       	jmp    c0017c6a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x141>
c0017d23:	50                   	push   eax
c0017d24:	31 db                	xor    ebx,ebx
c0017d26:	68 00 01 00 00       	push   0x100
c0017d2b:	6a 00                	push   0x0
c0017d2d:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0017d31:	50                   	push   eax
c0017d32:	e8 83 89 fe ff       	call   c00006ba <memset>
c0017d37:	83 c4 0c             	add    esp,0xc
c0017d3a:	68 00 01 00 00       	push   0x100
c0017d3f:	6a 00                	push   0x0
c0017d41:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0017d48:	50                   	push   eax
c0017d49:	e8 6c 89 fe ff       	call   c00006ba <memset>
c0017d4e:	83 c4 10             	add    esp,0x10
c0017d51:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0017d59:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0017d61:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0017d69:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0017d71:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017d79:	66 39 5d 30          	cmp    WORD PTR [ebp+0x30],bx
c0017d7d:	0f 86 2f 01 00 00    	jbe    c0017eb2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x389>
c0017d83:	0f b7 f3             	movzx  esi,bx
c0017d86:	6b f6 28             	imul   esi,esi,0x28
c0017d89:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0017d8d:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0017d90:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017d94:	50                   	push   eax
c0017d95:	0f b7 55 32          	movzx  edx,WORD PTR [ebp+0x32]
c0017d99:	6b d2 28             	imul   edx,edx,0x28
c0017d9c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0017da0:	8b 06                	mov    eax,DWORD PTR [esi]
c0017da2:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0017da6:	31 d2                	xor    edx,edx
c0017da8:	52                   	push   edx
c0017da9:	50                   	push   eax
c0017daa:	57                   	push   edi
c0017dab:	e8 20 7a ff ff       	call   c000f7d0 <File::seek(unsigned long long)>
c0017db0:	83 c4 0c             	add    esp,0xc
c0017db3:	6a 20                	push   0x20
c0017db5:	6a 00                	push   0x0
c0017db7:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0017dbe:	51                   	push   ecx
c0017dbf:	e8 f6 88 fe ff       	call   c00006ba <memset>
c0017dc4:	58                   	pop    eax
c0017dc5:	8b 07                	mov    eax,DWORD PTR [edi]
c0017dc7:	8d 54 24 58          	lea    edx,[esp+0x58]
c0017dcb:	52                   	push   edx
c0017dcc:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0017dd3:	51                   	push   ecx
c0017dd4:	6a 00                	push   0x0
c0017dd6:	6a 1f                	push   0x1f
c0017dd8:	57                   	push   edi
c0017dd9:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017ddc:	83 c4 1c             	add    esp,0x1c
c0017ddf:	6a 09                	push   0x9
c0017de1:	68 1d 2b 02 c0       	push   0xc0022b1d
c0017de6:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0017ded:	51                   	push   ecx
c0017dee:	e8 2e 88 fe ff       	call   c0000621 <memcmp>
c0017df3:	83 c4 10             	add    esp,0x10
c0017df6:	85 c0                	test   eax,eax
c0017df8:	75 21                	jne    c0017e1b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2f2>
c0017dfa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017dfe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017e02:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0017e06:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0017e0a:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017e0d:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c0017e14:	89 c8                	mov    eax,ecx
c0017e16:	40                   	inc    eax
c0017e17:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017e1b:	50                   	push   eax
c0017e1c:	6a 09                	push   0x9
c0017e1e:	68 27 2b 02 c0       	push   0xc0022b27
c0017e23:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017e2a:	50                   	push   eax
c0017e2b:	e8 f1 87 fe ff       	call   c0000621 <memcmp>
c0017e30:	83 c4 10             	add    esp,0x10
c0017e33:	85 c0                	test   eax,eax
c0017e35:	75 21                	jne    c0017e58 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x32f>
c0017e37:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017e3b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017e3f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0017e43:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0017e47:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017e4a:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c0017e51:	89 c8                	mov    eax,ecx
c0017e53:	40                   	inc    eax
c0017e54:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017e58:	50                   	push   eax
c0017e59:	50                   	push   eax
c0017e5a:	68 b2 2a 02 c0       	push   0xc0022ab2
c0017e5f:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017e66:	50                   	push   eax
c0017e67:	e8 3e 89 fe ff       	call   c00007aa <strcmp>
c0017e6c:	83 c4 10             	add    esp,0x10
c0017e6f:	85 c0                	test   eax,eax
c0017e71:	75 0f                	jne    c0017e82 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x359>
c0017e73:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017e76:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017e7a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017e7e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017e82:	50                   	push   eax
c0017e83:	50                   	push   eax
c0017e84:	68 ba 2a 02 c0       	push   0xc0022aba
c0017e89:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017e90:	50                   	push   eax
c0017e91:	e8 14 89 fe ff       	call   c00007aa <strcmp>
c0017e96:	83 c4 10             	add    esp,0x10
c0017e99:	85 c0                	test   eax,eax
c0017e9b:	75 0f                	jne    c0017eac <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x383>
c0017e9d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017ea0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017ea4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017ea8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017eac:	43                   	inc    ebx
c0017ead:	e9 c7 fe ff ff       	jmp    c0017d79 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x250>
c0017eb2:	31 d2                	xor    edx,edx
c0017eb4:	50                   	push   eax
c0017eb5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017eb9:	52                   	push   edx
c0017eba:	50                   	push   eax
c0017ebb:	57                   	push   edi
c0017ebc:	e8 0f 79 ff ff       	call   c000f7d0 <File::seek(unsigned long long)>
c0017ec1:	5a                   	pop    edx
c0017ec2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017ec6:	e8 3e 41 ff ff       	call   c000c009 <malloc>
c0017ecb:	31 d2                	xor    edx,edx
c0017ecd:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0017ed1:	59                   	pop    ecx
c0017ed2:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0017ed4:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0017ed8:	53                   	push   ebx
c0017ed9:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017edd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017ee1:	52                   	push   edx
c0017ee2:	50                   	push   eax
c0017ee3:	57                   	push   edi
c0017ee4:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017ee7:	83 c4 14             	add    esp,0x14
c0017eea:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017eee:	e8 16 41 ff ff       	call   c000c009 <malloc>
c0017ef3:	31 d2                	xor    edx,edx
c0017ef5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017ef9:	83 c4 0c             	add    esp,0xc
c0017efc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017f00:	52                   	push   edx
c0017f01:	50                   	push   eax
c0017f02:	57                   	push   edi
c0017f03:	e8 c8 78 ff ff       	call   c000f7d0 <File::seek(unsigned long long)>
c0017f08:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017f0b:	31 d2                	xor    edx,edx
c0017f0d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017f11:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f15:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0017f17:	52                   	push   edx
c0017f18:	50                   	push   eax
c0017f19:	57                   	push   edi
c0017f1a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017f1d:	83 c4 20             	add    esp,0x20
c0017f20:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0017f28:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017f2c:	39 54 24 04          	cmp    DWORD PTR [esp+0x4],edx
c0017f30:	0f 84 54 03 00 00    	je     c001828a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x761>
c0017f36:	8b 84 94 50 01 00 00 	mov    eax,DWORD PTR [esp+edx*4+0x150]
c0017f3d:	31 d2                	xor    edx,edx
c0017f3f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017f43:	c1 e8 03             	shr    eax,0x3
c0017f46:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017f4a:	50                   	push   eax
c0017f4b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017f4f:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0017f53:	52                   	push   edx
c0017f54:	50                   	push   eax
c0017f55:	57                   	push   edi
c0017f56:	e8 75 78 ff ff       	call   c000f7d0 <File::seek(unsigned long long)>
c0017f5b:	58                   	pop    eax
c0017f5c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f60:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0017f67:	e8 9d 40 ff ff       	call   c000c009 <malloc>
c0017f6c:	31 d2                	xor    edx,edx
c0017f6e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017f72:	58                   	pop    eax
c0017f73:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0017f75:	8d 44 24 58          	lea    eax,[esp+0x58]
c0017f79:	50                   	push   eax
c0017f7a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017f7e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017f82:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0017f89:	52                   	push   edx
c0017f8a:	50                   	push   eax
c0017f8b:	57                   	push   edi
c0017f8c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017f8f:	83 c4 20             	add    esp,0x20
c0017f92:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0017f9a:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0017f9e:	39 4c 24 28          	cmp    DWORD PTR [esp+0x28],ecx
c0017fa2:	0f 8d c6 02 00 00    	jge    c001826e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x745>
c0017fa8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017fac:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017fb0:	31 db                	xor    ebx,ebx
c0017fb2:	8b 04 d0             	mov    eax,DWORD PTR [eax+edx*8]
c0017fb5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017fb9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017fbd:	8b 44 d0 04          	mov    eax,DWORD PTR [eax+edx*8+0x4]
c0017fc1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017fc5:	c1 e8 08             	shr    eax,0x8
c0017fc8:	89 c6                	mov    esi,eax
c0017fca:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017fce:	c1 e6 04             	shl    esi,0x4
c0017fd1:	03 74 24 38          	add    esi,DWORD PTR [esp+0x38]
c0017fd5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0017fd8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017fdc:	85 c0                	test   eax,eax
c0017fde:	0f 85 17 01 00 00    	jne    c00180fb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d2>
c0017fe4:	83 ec 0c             	sub    esp,0xc
c0017fe7:	b3 01                	mov    bl,0x1
c0017fe9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017fed:	03 06                	add    eax,DWORD PTR [esi]
c0017fef:	50                   	push   eax
c0017ff0:	e8 24 f8 ff ff       	call   c0017819 <Thr::getAddressOfKernelSymbol(char const*)>
c0017ff5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017ff9:	83 c4 10             	add    esp,0x10
c0017ffc:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018001:	0f 85 f4 00 00 00    	jne    c00180fb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d2>
c0018007:	50                   	push   eax
c0018008:	50                   	push   eax
c0018009:	68 31 2b 02 c0       	push   0xc0022b31
c001800e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018012:	03 06                	add    eax,DWORD PTR [esi]
c0018014:	50                   	push   eax
c0018015:	e8 90 87 fe ff       	call   c00007aa <strcmp>
c001801a:	83 c4 10             	add    esp,0x10
c001801d:	85 c0                	test   eax,eax
c001801f:	75 0a                	jne    c001802b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x502>
c0018021:	b8 cc f3 01 c0       	mov    eax,0xc001f3cc
c0018026:	e9 ca 00 00 00       	jmp    c00180f5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5cc>
c001802b:	50                   	push   eax
c001802c:	50                   	push   eax
c001802d:	68 3b 2b 02 c0       	push   0xc0022b3b
c0018032:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018036:	03 06                	add    eax,DWORD PTR [esi]
c0018038:	50                   	push   eax
c0018039:	e8 6c 87 fe ff       	call   c00007aa <strcmp>
c001803e:	83 c4 10             	add    esp,0x10
c0018041:	85 c0                	test   eax,eax
c0018043:	75 0a                	jne    c001804f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x526>
c0018045:	b8 00 f1 01 c0       	mov    eax,0xc001f100
c001804a:	e9 a6 00 00 00       	jmp    c00180f5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5cc>
c001804f:	53                   	push   ebx
c0018050:	53                   	push   ebx
c0018051:	68 44 2b 02 c0       	push   0xc0022b44
c0018056:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001805a:	03 06                	add    eax,DWORD PTR [esi]
c001805c:	50                   	push   eax
c001805d:	e8 48 87 fe ff       	call   c00007aa <strcmp>
c0018062:	83 c4 10             	add    esp,0x10
c0018065:	85 c0                	test   eax,eax
c0018067:	75 0a                	jne    c0018073 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54a>
c0018069:	b8 cc f4 01 c0       	mov    eax,0xc001f4cc
c001806e:	e9 82 00 00 00       	jmp    c00180f5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5cc>
c0018073:	51                   	push   ecx
c0018074:	51                   	push   ecx
c0018075:	68 4e 2b 02 c0       	push   0xc0022b4e
c001807a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001807e:	03 06                	add    eax,DWORD PTR [esi]
c0018080:	50                   	push   eax
c0018081:	e8 24 87 fe ff       	call   c00007aa <strcmp>
c0018086:	83 c4 10             	add    esp,0x10
c0018089:	85 c0                	test   eax,eax
c001808b:	74 63                	je     c00180f0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5c7>
c001808d:	50                   	push   eax
c001808e:	50                   	push   eax
c001808f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018093:	03 06                	add    eax,DWORD PTR [esi]
c0018095:	50                   	push   eax
c0018096:	68 57 2b 02 c0       	push   0xc0022b57
c001809b:	e8 d7 70 ff ff       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c00180a0:	58                   	pop    eax
c00180a1:	5a                   	pop    edx
c00180a2:	68 71 2b 02 c0       	push   0xc0022b71
c00180a7:	8d 9c 24 5c 02 00 00 	lea    ebx,[esp+0x25c]
c00180ae:	53                   	push   ebx
c00180af:	e8 a5 86 fe ff       	call   c0000759 <strcpy>
c00180b4:	59                   	pop    ecx
c00180b5:	58                   	pop    eax
c00180b6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00180ba:	03 06                	add    eax,DWORD PTR [esi]
c00180bc:	50                   	push   eax
c00180bd:	53                   	push   ebx
c00180be:	e8 4d 87 fe ff       	call   c0000810 <strcat>
c00180c3:	58                   	pop    eax
c00180c4:	5a                   	pop    edx
c00180c5:	68 07 2c 02 c0       	push   0xc0022c07
c00180ca:	53                   	push   ebx
c00180cb:	e8 40 87 fe ff       	call   c0000810 <strcat>
c00180d0:	83 c4 10             	add    esp,0x10
c00180d3:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c00180d8:	0f 84 4b 01 00 00    	je     c0018229 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c00180de:	83 ec 0c             	sub    esp,0xc
c00180e1:	53                   	push   ebx
c00180e2:	e8 5b d8 ff ff       	call   c0015942 <Krnl::panic(char const*)>
c00180e7:	83 c4 10             	add    esp,0x10
c00180ea:	8a 5c 24 27          	mov    bl,BYTE PTR [esp+0x27]
c00180ee:	eb 0b                	jmp    c00180fb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d2>
c00180f0:	b8 4c f2 01 c0       	mov    eax,0xc001f24c
c00180f5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00180f9:	b3 01                	mov    bl,0x1
c00180fb:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c0018100:	0f 85 80 00 00 00    	jne    c0018186 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x65d>
c0018106:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001810d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0018111:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c0018115:	01 ce                	add    esi,ecx
c0018117:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c001811f:	0f 94 c2             	sete   dl
c0018122:	8b 06                	mov    eax,DWORD PTR [esi]
c0018124:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c001812c:	0f 94 44 24 18       	sete   BYTE PTR [esp+0x18]
c0018131:	0b 54 24 18          	or     edx,DWORD PTR [esp+0x18]
c0018135:	84 db                	test   bl,bl
c0018137:	74 31                	je     c001816a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x641>
c0018139:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001813d:	01 c3                	add    ebx,eax
c001813f:	84 d2                	test   dl,dl
c0018141:	75 0a                	jne    c001814d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x624>
c0018143:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0018147:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c001814b:	76 32                	jbe    c001817f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x656>
c001814d:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c0018152:	0f 84 d1 00 00 00    	je     c0018229 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0018158:	83 ec 0c             	sub    esp,0xc
c001815b:	68 88 2b 02 c0       	push   0xc0022b88
c0018160:	e8 dd d7 ff ff       	call   c0015942 <Krnl::panic(char const*)>
c0018165:	83 c4 10             	add    esp,0x10
c0018168:	eb 15                	jmp    c001817f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x656>
c001816a:	8d 1c 01             	lea    ebx,[ecx+eax*1]
c001816d:	84 d2                	test   dl,dl
c001816f:	75 0e                	jne    c001817f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x656>
c0018171:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0018175:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c0018179:	77 04                	ja     c001817f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x656>
c001817b:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c001817f:	89 1e                	mov    DWORD PTR [esi],ebx
c0018181:	e9 df 00 00 00       	jmp    c0018265 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73c>
c0018186:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c001818b:	75 6e                	jne    c00181fb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d2>
c001818d:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c0018194:	2b 74 24 2c          	sub    esi,DWORD PTR [esp+0x2c]
c0018198:	03 74 24 30          	add    esi,DWORD PTR [esp+0x30]
c001819c:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c00181a4:	74 17                	je     c00181bd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x694>
c00181a6:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c00181ae:	74 0d                	je     c00181bd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x694>
c00181b0:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c00181b4:	83 e8 04             	sub    eax,0x4
c00181b7:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c00181bb:	76 17                	jbe    c00181d4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6ab>
c00181bd:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c00181c2:	74 65                	je     c0018229 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c00181c4:	83 ec 0c             	sub    esp,0xc
c00181c7:	68 a4 2b 02 c0       	push   0xc0022ba4
c00181cc:	e8 71 d7 ff ff       	call   c0015942 <Krnl::panic(char const*)>
c00181d1:	83 c4 10             	add    esp,0x10
c00181d4:	8b 16                	mov    edx,DWORD PTR [esi]
c00181d6:	84 db                	test   bl,bl
c00181d8:	74 13                	je     c00181ed <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6c4>
c00181da:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00181de:	2b 84 24 74 03 00 00 	sub    eax,DWORD PTR [esp+0x374]
c00181e5:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c00181e9:	01 d0                	add    eax,edx
c00181eb:	eb 06                	jmp    c00181f3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6ca>
c00181ed:	89 d0                	mov    eax,edx
c00181ef:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c00181f3:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00181f7:	89 06                	mov    DWORD PTR [esi],eax
c00181f9:	eb 6a                	jmp    c0018265 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73c>
c00181fb:	50                   	push   eax
c00181fc:	50                   	push   eax
c00181fd:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c0018202:	50                   	push   eax
c0018203:	68 c0 2b 02 c0       	push   0xc0022bc0
c0018208:	e8 6a 6f ff ff       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c001820d:	83 c4 10             	add    esp,0x10
c0018210:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c0018215:	74 12                	je     c0018229 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0018217:	83 ec 0c             	sub    esp,0xc
c001821a:	68 cb 2b 02 c0       	push   0xc0022bcb
c001821f:	e8 1e d7 ff ff       	call   c0015942 <Krnl::panic(char const*)>
c0018224:	83 c4 10             	add    esp,0x10
c0018227:	eb 3c                	jmp    c0018265 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73c>
c0018229:	83 ec 0c             	sub    esp,0xc
c001822c:	57                   	push   edi
c001822d:	e8 3e 75 ff ff       	call   c000f770 <File::close()>
c0018232:	8b 07                	mov    eax,DWORD PTR [edi]
c0018234:	89 3c 24             	mov    DWORD PTR [esp],edi
c0018237:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001823a:	59                   	pop    ecx
c001823b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001823f:	e8 d5 3d ff ff       	call   c000c019 <free>
c0018244:	5b                   	pop    ebx
c0018245:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0018249:	e8 cb 3d ff ff       	call   c000c019 <free>
c001824e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0018251:	e8 c3 3d ff ff       	call   c000c019 <free>
c0018256:	5e                   	pop    esi
c0018257:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001825b:	e8 b9 3d ff ff       	call   c000c019 <free>
c0018260:	83 c4 10             	add    esp,0x10
c0018263:	eb 21                	jmp    c0018286 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0018265:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c0018269:	e9 2c fd ff ff       	jmp    c0017f9a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x471>
c001826e:	83 ec 0c             	sub    esp,0xc
c0018271:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0018275:	e8 9f 3d ff ff       	call   c000c019 <free>
c001827a:	ff 44 24 30          	inc    DWORD PTR [esp+0x30]
c001827e:	83 c4 10             	add    esp,0x10
c0018281:	e9 a2 fc ff ff       	jmp    c0017f28 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3ff>
c0018286:	31 c0                	xor    eax,eax
c0018288:	eb 32                	jmp    c00182bc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x793>
c001828a:	83 ec 0c             	sub    esp,0xc
c001828d:	57                   	push   edi
c001828e:	e8 dd 74 ff ff       	call   c000f770 <File::close()>
c0018293:	8b 07                	mov    eax,DWORD PTR [edi]
c0018295:	89 3c 24             	mov    DWORD PTR [esp],edi
c0018298:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001829b:	58                   	pop    eax
c001829c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00182a0:	e8 74 3d ff ff       	call   c000c019 <free>
c00182a5:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00182a8:	e8 6c 3d ff ff       	call   c000c019 <free>
c00182ad:	5a                   	pop    edx
c00182ae:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00182b2:	e8 62 3d ff ff       	call   c000c019 <free>
c00182b7:	83 c4 10             	add    esp,0x10
c00182ba:	b0 01                	mov    al,0x1
c00182bc:	81 c4 5c 03 00 00    	add    esp,0x35c
c00182c2:	5b                   	pop    ebx
c00182c3:	5e                   	pop    esi
c00182c4:	5f                   	pop    edi
c00182c5:	5d                   	pop    ebp
c00182c6:	c3                   	ret    

c00182c7 <Thr::getDriverBaseFromAddress(unsigned long)>:
c00182c7:	56                   	push   esi
c00182c8:	31 d2                	xor    edx,edx
c00182ca:	53                   	push   ebx
c00182cb:	8b 1d e0 51 02 c0    	mov    ebx,DWORD PTR ds:0xc00251e0
c00182d1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00182d5:	39 d3                	cmp    ebx,edx
c00182d7:	7e 1b                	jle    c00182f4 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c00182d9:	8b 04 95 00 54 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdac00]
c00182e0:	39 c8                	cmp    eax,ecx
c00182e2:	77 0d                	ja     c00182f1 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c00182e4:	8b 34 95 00 52 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffdae00]
c00182eb:	01 c6                	add    esi,eax
c00182ed:	39 ce                	cmp    esi,ecx
c00182ef:	77 05                	ja     c00182f6 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c00182f1:	42                   	inc    edx
c00182f2:	eb e1                	jmp    c00182d5 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c00182f4:	31 c0                	xor    eax,eax
c00182f6:	5b                   	pop    ebx
c00182f7:	5e                   	pop    esi
c00182f8:	c3                   	ret    

c00182f9 <Thr::getDriverNameFromAddress(unsigned long)>:
c00182f9:	53                   	push   ebx
c00182fa:	31 c0                	xor    eax,eax
c00182fc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0018300:	8b 1d e0 51 02 c0    	mov    ebx,DWORD PTR ds:0xc00251e0
c0018306:	39 c3                	cmp    ebx,eax
c0018308:	7e 22                	jle    c001832c <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001830a:	8b 14 85 00 54 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdac00]
c0018311:	39 ca                	cmp    edx,ecx
c0018313:	77 14                	ja     c0018329 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0018315:	03 14 85 00 52 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffdae00]
c001831c:	39 ca                	cmp    edx,ecx
c001831e:	76 09                	jbe    c0018329 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0018320:	8b 04 85 00 56 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdaa00]
c0018327:	eb 05                	jmp    c001832e <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0018329:	40                   	inc    eax
c001832a:	eb da                	jmp    c0018306 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001832c:	31 c0                	xor    eax,eax
c001832e:	5b                   	pop    ebx
c001832f:	c3                   	ret    

c0018330 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0018330:	53                   	push   ebx
c0018331:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0018335:	53                   	push   ebx
c0018336:	e8 8c ff ff ff       	call   c00182c7 <Thr::getDriverBaseFromAddress(unsigned long)>
c001833b:	5a                   	pop    edx
c001833c:	31 d2                	xor    edx,edx
c001833e:	85 c0                	test   eax,eax
c0018340:	74 04                	je     c0018346 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0018342:	89 da                	mov    edx,ebx
c0018344:	29 c2                	sub    edx,eax
c0018346:	89 d0                	mov    eax,edx
c0018348:	5b                   	pop    ebx
c0018349:	c3                   	ret    

c001834a <Thr::loadDLL(char const*, bool)>:
c001834a:	55                   	push   ebp
c001834b:	57                   	push   edi
c001834c:	56                   	push   esi
c001834d:	53                   	push   ebx
c001834e:	81 ec 34 01 00 00    	sub    esp,0x134
c0018354:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001835b:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0018362:	56                   	push   esi
c0018363:	68 e3 2b 02 c0       	push   0xc0022be3
c0018368:	e8 0a 6e ff ff       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c001836d:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0018374:	e8 c9 6c ff ff       	call   c000f042 <operator new(unsigned long)>
c0018379:	83 c4 0c             	add    esp,0xc
c001837c:	89 c3                	mov    ebx,eax
c001837e:	ff 35 d4 59 02 c0    	push   DWORD PTR ds:0xc00259d4
c0018384:	56                   	push   esi
c0018385:	50                   	push   eax
c0018386:	e8 23 73 ff ff       	call   c000f6ae <File::File(char const*, Process*)>
c001838b:	83 c4 0c             	add    esp,0xc
c001838e:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0018392:	50                   	push   eax
c0018393:	8d 44 24 20          	lea    eax,[esp+0x20]
c0018397:	50                   	push   eax
c0018398:	53                   	push   ebx
c0018399:	e8 20 76 ff ff       	call   c000f9be <File::stat(unsigned long long*, bool*)>
c001839e:	8b 03                	mov    eax,DWORD PTR [ebx]
c00183a0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00183a3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00183a6:	83 c4 10             	add    esp,0x10
c00183a9:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c00183ae:	75 0a                	jne    c00183ba <Thr::loadDLL(char const*, bool)+0x70>
c00183b0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00183b4:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c00183b8:	75 3c                	jne    c00183f6 <Thr::loadDLL(char const*, bool)+0xac>
c00183ba:	89 e8                	mov    eax,ebp
c00183bc:	84 c0                	test   al,al
c00183be:	0f 84 3d 01 00 00    	je     c0018501 <Thr::loadDLL(char const*, bool)+0x1b7>
c00183c4:	50                   	push   eax
c00183c5:	50                   	push   eax
c00183c6:	68 f4 2b 02 c0       	push   0xc0022bf4
c00183cb:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c00183cf:	53                   	push   ebx
c00183d0:	e8 84 83 fe ff       	call   c0000759 <strcpy>
c00183d5:	58                   	pop    eax
c00183d6:	5a                   	pop    edx
c00183d7:	56                   	push   esi
c00183d8:	53                   	push   ebx
c00183d9:	e8 32 84 fe ff       	call   c0000810 <strcat>
c00183de:	59                   	pop    ecx
c00183df:	5f                   	pop    edi
c00183e0:	68 07 2c 02 c0       	push   0xc0022c07
c00183e5:	53                   	push   ebx
c00183e6:	e8 25 84 fe ff       	call   c0000810 <strcat>
c00183eb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00183ee:	e8 4f d5 ff ff       	call   c0015942 <Krnl::panic(char const*)>
c00183f3:	83 c4 10             	add    esp,0x10
c00183f6:	e8 ee 5e ff ff       	call   c000e2e9 <Virt::getAKernelVAS()>
c00183fb:	51                   	push   ecx
c00183fc:	6a 03                	push   0x3
c00183fe:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0018402:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0018406:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c001840c:	83 d3 00             	adc    ebx,0x0
c001840f:	89 ca                	mov    edx,ecx
c0018411:	89 d1                	mov    ecx,edx
c0018413:	0f ac d9 0c          	shrd   ecx,ebx,0xc
c0018417:	51                   	push   ecx
c0018418:	50                   	push   eax
c0018419:	e8 0c 65 ff ff       	call   c000e92a <VAS::allocatePages(int, int)>
c001841e:	89 34 24             	mov    DWORD PTR [esp],esi
c0018421:	89 c3                	mov    ebx,eax
c0018423:	e8 af 82 fe ff       	call   c00006d7 <strlen>
c0018428:	8b 3d e0 51 02 c0    	mov    edi,DWORD PTR ds:0xc00251e0
c001842e:	40                   	inc    eax
c001842f:	89 04 24             	mov    DWORD PTR [esp],eax
c0018432:	e8 d2 3b ff ff       	call   c000c009 <malloc>
c0018437:	89 04 bd 00 56 02 c0 	mov    DWORD PTR [edi*4-0x3ffdaa00],eax
c001843e:	5f                   	pop    edi
c001843f:	58                   	pop    eax
c0018440:	a1 e0 51 02 c0       	mov    eax,ds:0xc00251e0
c0018445:	56                   	push   esi
c0018446:	ff 34 85 00 56 02 c0 	push   DWORD PTR [eax*4-0x3ffdaa00]
c001844d:	e8 07 83 fe ff       	call   c0000759 <strcpy>
c0018452:	a1 e0 51 02 c0       	mov    eax,ds:0xc00251e0
c0018457:	8d 50 01             	lea    edx,[eax+0x1]
c001845a:	89 1c 85 00 54 02 c0 	mov    DWORD PTR [eax*4-0x3ffdac00],ebx
c0018461:	89 15 e0 51 02 c0    	mov    DWORD PTR ds:0xc00251e0,edx
c0018467:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001846b:	83 c4 0c             	add    esp,0xc
c001846e:	89 14 85 00 52 02 c0 	mov    DWORD PTR [eax*4-0x3ffdae00],edx
c0018475:	6a 01                	push   0x1
c0018477:	53                   	push   ebx
c0018478:	56                   	push   esi
c0018479:	e8 ab f6 ff ff       	call   c0017b29 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001847e:	83 c4 10             	add    esp,0x10
c0018481:	89 c7                	mov    edi,eax
c0018483:	fe c8                	dec    al
c0018485:	74 16                	je     c001849d <Thr::loadDLL(char const*, bool)+0x153>
c0018487:	89 e8                	mov    eax,ebp
c0018489:	84 c0                	test   al,al
c001848b:	74 10                	je     c001849d <Thr::loadDLL(char const*, bool)+0x153>
c001848d:	83 ec 0c             	sub    esp,0xc
c0018490:	68 09 2c 02 c0       	push   0xc0022c09
c0018495:	e8 a8 d4 ff ff       	call   c0015942 <Krnl::panic(char const*)>
c001849a:	83 c4 10             	add    esp,0x10
c001849d:	31 f6                	xor    esi,esi
c001849f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00184a3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00184a7:	05 ff 0f 00 00       	add    eax,0xfff
c00184ac:	83 d2 00             	adc    edx,0x0
c00184af:	0f ac d0 0c          	shrd   eax,edx,0xc
c00184b3:	c1 ea 0c             	shr    edx,0xc
c00184b6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00184ba:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00184be:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00184c2:	ba 00 00 00 00       	mov    edx,0x0
c00184c7:	89 d0                	mov    eax,edx
c00184c9:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00184cd:	73 2c                	jae    c00184fb <Thr::loadDLL(char const*, bool)+0x1b1>
c00184cf:	e8 15 5e ff ff       	call   c000e2e9 <Virt::getAKernelVAS()>
c00184d4:	89 f5                	mov    ebp,esi
c00184d6:	c1 e5 0c             	shl    ebp,0xc
c00184d9:	52                   	push   edx
c00184da:	52                   	push   edx
c00184db:	01 dd                	add    ebp,ebx
c00184dd:	55                   	push   ebp
c00184de:	50                   	push   eax
c00184df:	e8 a6 5f ff ff       	call   c000e48a <VAS::getPageTableEntry(unsigned long)>
c00184e4:	83 c4 10             	add    esp,0x10
c00184e7:	f6 00 60             	test   BYTE PTR [eax],0x60
c00184ea:	75 0c                	jne    c00184f8 <Thr::loadDLL(char const*, bool)+0x1ae>
c00184ec:	83 ec 0c             	sub    esp,0xc
c00184ef:	55                   	push   ebp
c00184f0:	e8 5d 40 ff ff       	call   c000c552 <Phys::freePage(unsigned long)>
c00184f5:	83 c4 10             	add    esp,0x10
c00184f8:	46                   	inc    esi
c00184f9:	eb a4                	jmp    c001849f <Thr::loadDLL(char const*, bool)+0x155>
c00184fb:	89 f8                	mov    eax,edi
c00184fd:	84 c0                	test   al,al
c00184ff:	75 02                	jne    c0018503 <Thr::loadDLL(char const*, bool)+0x1b9>
c0018501:	31 db                	xor    ebx,ebx
c0018503:	81 c4 2c 01 00 00    	add    esp,0x12c
c0018509:	89 d8                	mov    eax,ebx
c001850b:	5b                   	pop    ebx
c001850c:	5e                   	pop    esi
c001850d:	5f                   	pop    edi
c001850e:	5d                   	pop    ebp
c001850f:	c3                   	ret    

c0018510 <Thr::executeDLL(unsigned long, void*)>:
c0018510:	56                   	push   esi
c0018511:	53                   	push   ebx
c0018512:	51                   	push   ecx
c0018513:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018517:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001851b:	85 db                	test   ebx,ebx
c001851d:	75 10                	jne    c001852f <Thr::executeDLL(unsigned long, void*)+0x1f>
c001851f:	83 ec 0c             	sub    esp,0xc
c0018522:	68 28 2c 02 c0       	push   0xc0022c28
c0018527:	e8 16 d4 ff ff       	call   c0015942 <Krnl::panic(char const*)>
c001852c:	83 c4 10             	add    esp,0x10
c001852f:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0018533:	5a                   	pop    edx
c0018534:	89 d8                	mov    eax,ebx
c0018536:	5b                   	pop    ebx
c0018537:	5e                   	pop    esi
c0018538:	ff e0                	jmp    eax

c001853a <changeTSS>:
c001853a:	83 ec 0c             	sub    esp,0xc
c001853d:	e8 94 c2 ff ff       	call   c00147d6 <thisCPU()>
c0018542:	52                   	push   edx
c0018543:	05 7c 11 00 00       	add    eax,0x117c
c0018548:	52                   	push   edx
c0018549:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001854f:	8b 4a 3c             	mov    ecx,DWORD PTR [edx+0x3c]
c0018552:	ba 00 00 e8 01       	mov    edx,0x1e80000
c0018557:	c1 e1 15             	shl    ecx,0x15
c001855a:	29 ca                	sub    edx,ecx
c001855c:	52                   	push   edx
c001855d:	50                   	push   eax
c001855e:	e8 97 55 ff ff       	call   c000dafa <TSS::setESP(unsigned long)>
c0018563:	83 c4 1c             	add    esp,0x1c
c0018566:	c3                   	ret    
c0018567:	90                   	nop

c0018568 <Process::addArgs(char**)>:
c0018568:	57                   	push   edi
c0018569:	56                   	push   esi
c001856a:	53                   	push   ebx
c001856b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001856f:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0018573:	85 ff                	test   edi,edi
c0018575:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001857f:	74 45                	je     c00185c6 <Process::addArgs(char**)+0x5e>
c0018581:	8b 07                	mov    eax,DWORD PTR [edi]
c0018583:	85 c0                	test   eax,eax
c0018585:	74 3f                	je     c00185c6 <Process::addArgs(char**)+0x5e>
c0018587:	31 db                	xor    ebx,ebx
c0018589:	83 ec 0c             	sub    esp,0xc
c001858c:	50                   	push   eax
c001858d:	e8 45 81 fe ff       	call   c00006d7 <strlen>
c0018592:	40                   	inc    eax
c0018593:	89 04 24             	mov    DWORD PTR [esp],eax
c0018596:	e8 6e 3a ff ff       	call   c000c009 <malloc>
c001859b:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c00185a2:	5a                   	pop    edx
c00185a3:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c00185a6:	59                   	pop    ecx
c00185a7:	43                   	inc    ebx
c00185a8:	52                   	push   edx
c00185a9:	50                   	push   eax
c00185aa:	e8 aa 81 fe ff       	call   c0000759 <strcpy>
c00185af:	8b 8e 36 05 00 00    	mov    ecx,DWORD PTR [esi+0x536]
c00185b5:	83 c4 10             	add    esp,0x10
c00185b8:	41                   	inc    ecx
c00185b9:	89 8e 36 05 00 00    	mov    DWORD PTR [esi+0x536],ecx
c00185bf:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c00185c2:	85 c0                	test   eax,eax
c00185c4:	75 c3                	jne    c0018589 <Process::addArgs(char**)+0x21>
c00185c6:	5b                   	pop    ebx
c00185c7:	5e                   	pop    esi
c00185c8:	5f                   	pop    edi
c00185c9:	c3                   	ret    

c00185ca <Process::Process(char const*, Process*, char**)>:
c00185ca:	56                   	push   esi
c00185cb:	53                   	push   ebx
c00185cc:	83 ec 14             	sub    esp,0x14
c00185cf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00185d3:	05 0c 02 00 00       	add    eax,0x20c
c00185d8:	bb 07 00 00 00       	mov    ebx,0x7
c00185dd:	89 c6                	mov    esi,eax
c00185df:	85 db                	test   ebx,ebx
c00185e1:	78 12                	js     c00185f5 <Process::Process(char const*, Process*, char**)+0x2b>
c00185e3:	83 ec 0c             	sub    esp,0xc
c00185e6:	56                   	push   esi
c00185e7:	e8 2e 77 00 00       	call   c001fd1a <ThreadControlBlock::ThreadControlBlock()>
c00185ec:	83 c4 10             	add    esp,0x10
c00185ef:	83 c6 63             	add    esi,0x63
c00185f2:	4b                   	dec    ebx
c00185f3:	eb ea                	jmp    c00185df <Process::Process(char const*, Process*, char**)+0x15>
c00185f5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00185f9:	c6 80 3a 07 00 00 00 	mov    BYTE PTR [eax+0x73a],0x0
c0018600:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018604:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001860d:	a1 a4 3f 02 c0       	mov    eax,ds:0xc0023fa4
c0018612:	8d 50 01             	lea    edx,[eax+0x1]
c0018615:	89 15 a4 3f 02 c0    	mov    DWORD PTR ds:0xc0023fa4,edx
c001861b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001861f:	89 02                	mov    DWORD PTR [edx],eax
c0018621:	83 ec 0c             	sub    esp,0xc
c0018624:	6a 10                	push   0x10
c0018626:	e8 17 6a ff ff       	call   c000f042 <operator new(unsigned long)>
c001862b:	83 c4 10             	add    esp,0x10
c001862e:	89 c3                	mov    ebx,eax
c0018630:	83 ec 08             	sub    esp,0x8
c0018633:	6a 00                	push   0x0
c0018635:	53                   	push   ebx
c0018636:	e8 9b 66 ff ff       	call   c000ecd6 <VAS::VAS(bool)>
c001863b:	83 c4 10             	add    esp,0x10
c001863e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018642:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c0018648:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001864c:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c0018656:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001865a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001865e:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c0018664:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018668:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001866e:	85 c0                	test   eax,eax
c0018670:	74 42                	je     c00186b4 <Process::Process(char const*, Process*, char**)+0xea>
c0018672:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018676:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001867c:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c0018682:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018686:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001868c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018690:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c0018696:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001869c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00186a0:	05 0c 01 00 00       	add    eax,0x10c
c00186a5:	83 ec 08             	sub    esp,0x8
c00186a8:	52                   	push   edx
c00186a9:	50                   	push   eax
c00186aa:	e8 aa 80 fe ff       	call   c0000759 <strcpy>
c00186af:	83 c4 10             	add    esp,0x10
c00186b2:	eb 5c                	jmp    c0018710 <Process::Process(char const*, Process*, char**)+0x146>
c00186b4:	83 ec 0c             	sub    esp,0xc
c00186b7:	68 60 12 00 00       	push   0x1260
c00186bc:	e8 81 69 ff ff       	call   c000f042 <operator new(unsigned long)>
c00186c1:	83 c4 10             	add    esp,0x10
c00186c4:	89 c3                	mov    ebx,eax
c00186c6:	83 ec 08             	sub    esp,0x8
c00186c9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00186cd:	53                   	push   ebx
c00186ce:	e8 25 51 ff ff       	call   c000d7f8 <VgaText::VgaText(char const*)>
c00186d3:	83 c4 10             	add    esp,0x10
c00186d6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00186da:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c00186e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00186e4:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00186ea:	83 ec 0c             	sub    esp,0xc
c00186ed:	50                   	push   eax
c00186ee:	e8 04 45 ff ff       	call   c000cbf7 <addToTerminalCycle(VgaText*)>
c00186f3:	83 c4 10             	add    esp,0x10
c00186f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00186fa:	05 0c 01 00 00       	add    eax,0x10c
c00186ff:	83 ec 08             	sub    esp,0x8
c0018702:	68 52 2c 02 c0       	push   0xc0022c52
c0018707:	50                   	push   eax
c0018708:	e8 4c 80 fe ff       	call   c0000759 <strcpy>
c001870d:	83 c4 10             	add    esp,0x10
c0018710:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018714:	83 c0 0c             	add    eax,0xc
c0018717:	83 ec 08             	sub    esp,0x8
c001871a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001871e:	50                   	push   eax
c001871f:	e8 35 80 fe ff       	call   c0000759 <strcpy>
c0018724:	83 c4 10             	add    esp,0x10
c0018727:	83 ec 08             	sub    esp,0x8
c001872a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001872e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018732:	e8 31 fe ff ff       	call   c0018568 <Process::addArgs(char**)>
c0018737:	83 c4 10             	add    esp,0x10
c001873a:	83 ec 08             	sub    esp,0x8
c001873d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018741:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018745:	e8 a6 ee ff ff       	call   c00175f0 <Thr::loadProgramIntoMemory(Process*, char const*)>
c001874a:	83 c4 10             	add    esp,0x10
c001874d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018751:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018755:	83 f0 01             	xor    eax,0x1
c0018758:	88 c2                	mov    dl,al
c001875a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001875e:	88 90 3a 07 00 00    	mov    BYTE PTR [eax+0x73a],dl
c0018764:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018768:	25 ff 00 00 00       	and    eax,0xff
c001876d:	83 ec 08             	sub    esp,0x8
c0018770:	50                   	push   eax
c0018771:	68 50 2d 02 c0       	push   0xc0022d50
c0018776:	e8 fc 69 ff ff       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c001877b:	83 c4 10             	add    esp,0x10
c001877e:	90                   	nop
c001877f:	83 c4 14             	add    esp,0x14
c0018782:	5b                   	pop    ebx
c0018783:	5e                   	pop    esi
c0018784:	c3                   	ret    
c0018785:	90                   	nop

c0018786 <Process::Process(bool, char const*, Process*, char**)>:
c0018786:	56                   	push   esi
c0018787:	53                   	push   ebx
c0018788:	83 ec 14             	sub    esp,0x14
c001878b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001878f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018793:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018797:	05 0c 02 00 00       	add    eax,0x20c
c001879c:	bb 07 00 00 00       	mov    ebx,0x7
c00187a1:	89 c6                	mov    esi,eax
c00187a3:	85 db                	test   ebx,ebx
c00187a5:	78 12                	js     c00187b9 <Process::Process(bool, char const*, Process*, char**)+0x33>
c00187a7:	83 ec 0c             	sub    esp,0xc
c00187aa:	56                   	push   esi
c00187ab:	e8 6a 75 00 00       	call   c001fd1a <ThreadControlBlock::ThreadControlBlock()>
c00187b0:	83 c4 10             	add    esp,0x10
c00187b3:	83 c6 63             	add    esi,0x63
c00187b6:	4b                   	dec    ebx
c00187b7:	eb ea                	jmp    c00187a3 <Process::Process(bool, char const*, Process*, char**)+0x1d>
c00187b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00187bd:	c6 80 3a 07 00 00 00 	mov    BYTE PTR [eax+0x73a],0x0
c00187c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00187c8:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c00187d1:	a1 a4 3f 02 c0       	mov    eax,ds:0xc0023fa4
c00187d6:	8d 50 01             	lea    edx,[eax+0x1]
c00187d9:	89 15 a4 3f 02 c0    	mov    DWORD PTR ds:0xc0023fa4,edx
c00187df:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00187e3:	89 02                	mov    DWORD PTR [edx],eax
c00187e5:	83 ec 0c             	sub    esp,0xc
c00187e8:	6a 10                	push   0x10
c00187ea:	e8 53 68 ff ff       	call   c000f042 <operator new(unsigned long)>
c00187ef:	83 c4 10             	add    esp,0x10
c00187f2:	89 c3                	mov    ebx,eax
c00187f4:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00187f8:	25 ff 00 00 00       	and    eax,0xff
c00187fd:	83 ec 08             	sub    esp,0x8
c0018800:	50                   	push   eax
c0018801:	53                   	push   ebx
c0018802:	e8 cf 64 ff ff       	call   c000ecd6 <VAS::VAS(bool)>
c0018807:	83 c4 10             	add    esp,0x10
c001880a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001880e:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c0018814:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018818:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c0018822:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018826:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001882a:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c0018830:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018834:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001883a:	85 c0                	test   eax,eax
c001883c:	74 42                	je     c0018880 <Process::Process(bool, char const*, Process*, char**)+0xfa>
c001883e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018842:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c0018848:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001884e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018852:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c0018858:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001885c:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c0018862:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0018868:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001886c:	05 0c 01 00 00       	add    eax,0x10c
c0018871:	83 ec 08             	sub    esp,0x8
c0018874:	52                   	push   edx
c0018875:	50                   	push   eax
c0018876:	e8 de 7e fe ff       	call   c0000759 <strcpy>
c001887b:	83 c4 10             	add    esp,0x10
c001887e:	eb 5c                	jmp    c00188dc <Process::Process(bool, char const*, Process*, char**)+0x156>
c0018880:	83 ec 0c             	sub    esp,0xc
c0018883:	68 60 12 00 00       	push   0x1260
c0018888:	e8 b5 67 ff ff       	call   c000f042 <operator new(unsigned long)>
c001888d:	83 c4 10             	add    esp,0x10
c0018890:	89 c3                	mov    ebx,eax
c0018892:	83 ec 08             	sub    esp,0x8
c0018895:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018899:	53                   	push   ebx
c001889a:	e8 59 4f ff ff       	call   c000d7f8 <VgaText::VgaText(char const*)>
c001889f:	83 c4 10             	add    esp,0x10
c00188a2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00188a6:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c00188ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00188b0:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00188b6:	83 ec 0c             	sub    esp,0xc
c00188b9:	50                   	push   eax
c00188ba:	e8 38 43 ff ff       	call   c000cbf7 <addToTerminalCycle(VgaText*)>
c00188bf:	83 c4 10             	add    esp,0x10
c00188c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00188c6:	05 0c 01 00 00       	add    eax,0x10c
c00188cb:	83 ec 08             	sub    esp,0x8
c00188ce:	68 52 2c 02 c0       	push   0xc0022c52
c00188d3:	50                   	push   eax
c00188d4:	e8 80 7e fe ff       	call   c0000759 <strcpy>
c00188d9:	83 c4 10             	add    esp,0x10
c00188dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00188e0:	83 c0 0c             	add    eax,0xc
c00188e3:	83 ec 08             	sub    esp,0x8
c00188e6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00188ea:	50                   	push   eax
c00188eb:	e8 69 7e fe ff       	call   c0000759 <strcpy>
c00188f0:	83 c4 10             	add    esp,0x10
c00188f3:	83 ec 08             	sub    esp,0x8
c00188f6:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00188fa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00188fe:	e8 65 fc ff ff       	call   c0018568 <Process::addArgs(char**)>
c0018903:	83 c4 10             	add    esp,0x10
c0018906:	90                   	nop
c0018907:	83 c4 14             	add    esp,0x14
c001890a:	5b                   	pop    ebx
c001890b:	5e                   	pop    esi
c001890c:	c3                   	ret    

c001890d <disableIRQs()>:
c001890d:	fa                   	cli    
c001890e:	a1 ac 59 02 c0       	mov    eax,ds:0xc00259ac
c0018913:	40                   	inc    eax
c0018914:	a3 ac 59 02 c0       	mov    ds:0xc00259ac,eax
c0018919:	c3                   	ret    

c001891a <getIRQNestingLevel()>:
c001891a:	a1 ac 59 02 c0       	mov    eax,ds:0xc00259ac
c001891f:	c3                   	ret    

c0018920 <enableIRQs()>:
c0018920:	a1 ac 59 02 c0       	mov    eax,ds:0xc00259ac
c0018925:	48                   	dec    eax
c0018926:	a3 ac 59 02 c0       	mov    ds:0xc00259ac,eax
c001892b:	75 01                	jne    c001892e <enableIRQs()+0xe>
c001892d:	fb                   	sti    
c001892e:	c3                   	ret    

c001892f <lockScheduler()>:
c001892f:	eb dc                	jmp    c001890d <disableIRQs()>

c0018931 <unlockScheduler()>:
c0018931:	eb ed                	jmp    c0018920 <enableIRQs()>

c0018933 <userModeEntryPoint(void*)>:
c0018933:	83 ec 0c             	sub    esp,0xc
c0018936:	e8 f6 ff ff ff       	call   c0018931 <unlockScheduler()>
c001893b:	fb                   	sti    
c001893c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018941:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0018944:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001894a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001894e:	83 c4 0c             	add    esp,0xc
c0018951:	e9 42 79 fe ff       	jmp    c0000298 <goToUsermode>

c0018956 <lockStuff()>:
c0018956:	e8 b2 ff ff ff       	call   c001890d <disableIRQs()>
c001895b:	a1 a8 59 02 c0       	mov    eax,ds:0xc00259a8
c0018960:	40                   	inc    eax
c0018961:	a3 a8 59 02 c0       	mov    ds:0xc00259a8,eax
c0018966:	c3                   	ret    

c0018967 <taskStartupFunction>:
c0018967:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001896c:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001896f:	c3                   	ret    

c0018970 <updateTimeUsed()>:
c0018970:	57                   	push   edi
c0018971:	56                   	push   esi
c0018972:	53                   	push   ebx
c0018973:	e8 5e be ff ff       	call   c00147d6 <thisCPU()>
c0018978:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001897f:	74 49                	je     c00189ca <updateTimeUsed()+0x5a>
c0018981:	0f 31                	rdtsc  
c0018983:	89 c1                	mov    ecx,eax
c0018985:	a3 e8 59 02 c0       	mov    ds:0xc00259e8,eax
c001898a:	2b 0d d8 59 02 c0    	sub    ecx,DWORD PTR ds:0xc00259d8
c0018990:	a3 d8 59 02 c0       	mov    ds:0xc00259d8,eax
c0018995:	89 0d e0 59 02 c0    	mov    DWORD PTR ds:0xc00259e0,ecx
c001899b:	89 d3                	mov    ebx,edx
c001899d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00189a2:	89 15 ec 59 02 c0    	mov    DWORD PTR ds:0xc00259ec,edx
c00189a8:	1b 1d dc 59 02 c0    	sbb    ebx,DWORD PTR ds:0xc00259dc
c00189ae:	89 15 dc 59 02 c0    	mov    DWORD PTR ds:0xc00259dc,edx
c00189b4:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00189b7:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c00189ba:	01 f1                	add    ecx,esi
c00189bc:	89 1d e4 59 02 c0    	mov    DWORD PTR ds:0xc00259e4,ebx
c00189c2:	11 fb                	adc    ebx,edi
c00189c4:	89 48 10             	mov    DWORD PTR [eax+0x10],ecx
c00189c7:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c00189ca:	5b                   	pop    ebx
c00189cb:	5e                   	pop    esi
c00189cc:	5f                   	pop    edi
c00189cd:	c3                   	ret    

c00189ce <switchToThread(ThreadControlBlock*)>:
c00189ce:	53                   	push   ebx
c00189cf:	83 ec 08             	sub    esp,0x8
c00189d2:	a1 a8 59 02 c0       	mov    eax,ds:0xc00259a8
c00189d7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00189db:	85 c0                	test   eax,eax
c00189dd:	75 36                	jne    c0018a15 <switchToThread(ThreadControlBlock*)+0x47>
c00189df:	8a 53 44             	mov    dl,BYTE PTR [ebx+0x44]
c00189e2:	80 fa ff             	cmp    dl,0xff
c00189e5:	74 2a                	je     c0018a11 <switchToThread(ThreadControlBlock*)+0x43>
c00189e7:	81 e2 ff 00 00 00    	and    edx,0xff
c00189ed:	b8 84 03 00 00       	mov    eax,0x384
c00189f2:	29 d0                	sub    eax,edx
c00189f4:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c00189f7:	c1 e0 10             	shl    eax,0x10
c00189fa:	01 c8                	add    eax,ecx
c00189fc:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00189ff:	e8 6c ff ff ff       	call   c0018970 <updateTimeUsed()>
c0018a04:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0018a08:	83 c4 08             	add    esp,0x8
c0018a0b:	5b                   	pop    ebx
c0018a0c:	e9 c0 78 fe ff       	jmp    c00002d1 <switchToThreadASM>
c0018a11:	31 c0                	xor    eax,eax
c0018a13:	eb e7                	jmp    c00189fc <switchToThread(ThreadControlBlock*)+0x2e>
c0018a15:	c7 05 a4 59 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00259a4,0x1
c0018a1f:	83 c4 08             	add    esp,0x8
c0018a22:	5b                   	pop    ebx
c0018a23:	c3                   	ret    

c0018a24 <Semaphore::Semaphore(int)>:
c0018a24:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018a28:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018a2c:	89 10                	mov    DWORD PTR [eax],edx
c0018a2e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018a32:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0018a39:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018a3d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0018a44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018a48:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0018a4f:	90                   	nop
c0018a50:	c3                   	ret    
c0018a51:	90                   	nop

c0018a52 <Mutex::Mutex()>:
c0018a52:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018a56:	6a 01                	push   0x1
c0018a58:	50                   	push   eax
c0018a59:	e8 c6 ff ff ff       	call   c0018a24 <Semaphore::Semaphore(int)>
c0018a5e:	83 c4 08             	add    esp,0x8
c0018a61:	90                   	nop
c0018a62:	c3                   	ret    
c0018a63:	90                   	nop

c0018a64 <Process::createThread(void (*)(void*), void*, int)>:
c0018a64:	55                   	push   ebp
c0018a65:	31 c9                	xor    ecx,ecx
c0018a67:	57                   	push   edi
c0018a68:	56                   	push   esi
c0018a69:	53                   	push   ebx
c0018a6a:	83 ec 1c             	sub    esp,0x1c
c0018a6d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0018a71:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c0018a78:	89 f2                	mov    edx,esi
c0018a7a:	31 c0                	xor    eax,eax
c0018a7c:	66 89 d0             	mov    ax,dx
c0018a7f:	83 e2 01             	and    edx,0x1
c0018a82:	74 14                	je     c0018a98 <Process::createThread(void (*)(void*), void*, int)+0x34>
c0018a84:	d1 f8                	sar    eax,1
c0018a86:	41                   	inc    ecx
c0018a87:	89 c2                	mov    edx,eax
c0018a89:	83 f9 10             	cmp    ecx,0x10
c0018a8c:	75 ec                	jne    c0018a7a <Process::createThread(void (*)(void*), void*, int)+0x16>
c0018a8e:	83 c4 1c             	add    esp,0x1c
c0018a91:	31 c0                	xor    eax,eax
c0018a93:	5b                   	pop    ebx
c0018a94:	5e                   	pop    esi
c0018a95:	5f                   	pop    edi
c0018a96:	5d                   	pop    ebp
c0018a97:	c3                   	ret    
c0018a98:	b8 01 00 00 00       	mov    eax,0x1
c0018a9d:	d3 e0                	shl    eax,cl
c0018a9f:	09 c6                	or     esi,eax
c0018aa1:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c0018aa7:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c0018aae:	8d 34 49             	lea    esi,[ecx+ecx*2]
c0018ab1:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0018ab4:	89 f0                	mov    eax,esi
c0018ab6:	c1 e0 05             	shl    eax,0x5
c0018ab9:	01 c6                	add    esi,eax
c0018abb:	8d 04 33             	lea    eax,[ebx+esi*1]
c0018abe:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0018ac4:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0018ac8:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c0018ace:	89 ca                	mov    edx,ecx
c0018ad0:	f7 da                	neg    edx
c0018ad2:	c1 e2 15             	shl    edx,0x15
c0018ad5:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c0018adb:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0018ae1:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c0018ae7:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0018aed:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0018af1:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c0018af7:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0018afb:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0018b05:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0018b0b:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0018b15:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0018b1f:	52                   	push   edx
c0018b20:	8d 84 33 0c 02 00 00 	lea    eax,[ebx+esi*1+0x20c]
c0018b27:	52                   	push   edx
c0018b28:	50                   	push   eax
c0018b29:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018b2d:	68 c8 59 02 c0       	push   0xc00259c8
c0018b32:	e8 3b 70 00 00       	call   c001fb72 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018b37:	83 c4 10             	add    esp,0x10
c0018b3a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018b3e:	83 c4 1c             	add    esp,0x1c
c0018b41:	5b                   	pop    ebx
c0018b42:	5e                   	pop    esi
c0018b43:	5f                   	pop    edi
c0018b44:	5d                   	pop    ebp
c0018b45:	c3                   	ret    

c0018b46 <Process::createUserThread()>:
c0018b46:	83 ec 0c             	sub    esp,0xc
c0018b49:	68 80 00 00 00       	push   0x80
c0018b4e:	6a 00                	push   0x0
c0018b50:	68 33 89 01 c0       	push   0xc0018933
c0018b55:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018b59:	50                   	push   eax
c0018b5a:	e8 05 ff ff ff       	call   c0018a64 <Process::createThread(void (*)(void*), void*, int)>
c0018b5f:	83 c4 1c             	add    esp,0x1c
c0018b62:	c3                   	ret    

c0018b63 <setupMultitasking(void (*)())>:
c0018b63:	56                   	push   esi
c0018b64:	53                   	push   ebx
c0018b65:	51                   	push   ecx
c0018b66:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018b6a:	eb 10                	jmp    c0018b7c <setupMultitasking(void (*)())+0x19>
c0018b6c:	83 ec 0c             	sub    esp,0xc
c0018b6f:	68 c8 59 02 c0       	push   0xc00259c8
c0018b74:	e8 4b 6f 00 00       	call   c001fac4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0018b79:	83 c4 10             	add    esp,0x10
c0018b7c:	83 ec 0c             	sub    esp,0xc
c0018b7f:	68 c8 59 02 c0       	push   0xc00259c8
c0018b84:	e8 1f 6f 00 00       	call   c001faa8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0018b89:	83 c4 10             	add    esp,0x10
c0018b8c:	84 c0                	test   al,al
c0018b8e:	74 dc                	je     c0018b6c <setupMultitasking(void (*)())+0x9>
c0018b90:	83 ec 0c             	sub    esp,0xc
c0018b93:	68 3b 07 00 00       	push   0x73b
c0018b98:	e8 a5 64 ff ff       	call   c000f042 <operator new(unsigned long)>
c0018b9d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0018ba4:	6a 00                	push   0x0
c0018ba6:	68 56 2c 02 c0       	push   0xc0022c56
c0018bab:	89 c3                	mov    ebx,eax
c0018bad:	6a 01                	push   0x1
c0018baf:	50                   	push   eax
c0018bb0:	e8 d1 fb ff ff       	call   c0018786 <Process::Process(bool, char const*, Process*, char**)>
c0018bb5:	83 c4 18             	add    esp,0x18
c0018bb8:	8b 83 26 05 00 00    	mov    eax,DWORD PTR [ebx+0x526]
c0018bbe:	89 1d d4 59 02 c0    	mov    DWORD PTR ds:0xc00259d4,ebx
c0018bc4:	50                   	push   eax
c0018bc5:	68 78 2d 02 c0       	push   0xc0022d78
c0018bca:	e8 a8 65 ff ff       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c0018bcf:	5a                   	pop    edx
c0018bd0:	8b 8b 26 05 00 00    	mov    ecx,DWORD PTR [ebx+0x526]
c0018bd6:	51                   	push   ecx
c0018bd7:	e8 8f 47 ff ff       	call   c000d36b <setActiveTerminal(VgaText*)>
c0018bdc:	66 8b 83 24 05 00 00 	mov    ax,WORD PTR [ebx+0x524]
c0018be3:	83 c8 01             	or     eax,0x1
c0018be6:	66 89 83 24 05 00 00 	mov    WORD PTR [ebx+0x524],ax
c0018bed:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c0018bf3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018bf6:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c0018c00:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0018c06:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0018c10:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0018c1a:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0018c20:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0018c26:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0018c30:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c0018c36:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0018c40:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c0018c4a:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0018c50:	58                   	pop    eax
c0018c51:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0018c57:	5a                   	pop    edx
c0018c58:	68 52 2c 02 c0       	push   0xc0022c52
c0018c5d:	50                   	push   eax
c0018c5e:	e8 f6 7a fe ff       	call   c0000759 <strcpy>
c0018c63:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c0018c6a:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0018c6e:	83 c4 14             	add    esp,0x14
c0018c71:	5b                   	pop    ebx
c0018c72:	5e                   	pop    esi
c0018c73:	e9 4b 76 fe ff       	jmp    c00002c3 <switchToThreadASMFirstTime>

c0018c78 <schedule()>:
c0018c78:	a1 a8 59 02 c0       	mov    eax,ds:0xc00259a8
c0018c7d:	85 c0                	test   eax,eax
c0018c7f:	74 0b                	je     c0018c8c <schedule()+0x14>
c0018c81:	c7 05 a4 59 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00259a4,0x1
c0018c8b:	c3                   	ret    
c0018c8c:	53                   	push   ebx
c0018c8d:	83 ec 14             	sub    esp,0x14
c0018c90:	68 c8 59 02 c0       	push   0xc00259c8
c0018c95:	e8 0e 6e 00 00       	call   c001faa8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0018c9a:	83 c4 10             	add    esp,0x10
c0018c9d:	84 c0                	test   al,al
c0018c9f:	75 38                	jne    c0018cd9 <schedule()+0x61>
c0018ca1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018ca6:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0018ca9:	4a                   	dec    edx
c0018caa:	74 32                	je     c0018cde <schedule()+0x66>
c0018cac:	83 ec 0c             	sub    esp,0xc
c0018caf:	68 c8 59 02 c0       	push   0xc00259c8
c0018cb4:	e8 e7 6d 00 00       	call   c001faa0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018cb9:	89 c3                	mov    ebx,eax
c0018cbb:	c7 04 24 c8 59 02 c0 	mov    DWORD PTR [esp],0xc00259c8
c0018cc2:	e8 fd 6d 00 00       	call   c001fac4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0018cc7:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0018cce:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018cd1:	e8 f8 fc ff ff       	call   c00189ce <switchToThread(ThreadControlBlock*)>
c0018cd6:	83 c4 10             	add    esp,0x10
c0018cd9:	83 c4 08             	add    esp,0x8
c0018cdc:	5b                   	pop    ebx
c0018cdd:	c3                   	ret    
c0018cde:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0018ce5:	51                   	push   ecx
c0018ce6:	51                   	push   ecx
c0018ce7:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0018ced:	53                   	push   ebx
c0018cee:	68 c8 59 02 c0       	push   0xc00259c8
c0018cf3:	e8 7a 6e 00 00       	call   c001fb72 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018cf8:	83 c4 10             	add    esp,0x10
c0018cfb:	eb af                	jmp    c0018cac <schedule()+0x34>

c0018cfd <unlockStuff()>:
c0018cfd:	a1 a8 59 02 c0       	mov    eax,ds:0xc00259a8
c0018d02:	48                   	dec    eax
c0018d03:	a3 a8 59 02 c0       	mov    ds:0xc00259a8,eax
c0018d08:	75 09                	jne    c0018d13 <unlockStuff()+0x16>
c0018d0a:	a1 a4 59 02 c0       	mov    eax,ds:0xc00259a4
c0018d0f:	85 c0                	test   eax,eax
c0018d11:	75 05                	jne    c0018d18 <unlockStuff()+0x1b>
c0018d13:	e9 08 fc ff ff       	jmp    c0018920 <enableIRQs()>
c0018d18:	83 ec 0c             	sub    esp,0xc
c0018d1b:	c7 05 a4 59 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00259a4,0x0
c0018d25:	e8 4e ff ff ff       	call   c0018c78 <schedule()>
c0018d2a:	83 c4 0c             	add    esp,0xc
c0018d2d:	e9 ee fb ff ff       	jmp    c0018920 <enableIRQs()>

c0018d32 <Semaphore::tryAcquire()>:
c0018d32:	83 ec 0c             	sub    esp,0xc
c0018d35:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018d39:	e8 18 fc ff ff       	call   c0018956 <lockStuff()>
c0018d3e:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0018d41:	3b 02                	cmp    eax,DWORD PTR [edx]
c0018d43:	7c 0b                	jl     c0018d50 <Semaphore::tryAcquire()+0x1e>
c0018d45:	e8 b3 ff ff ff       	call   c0018cfd <unlockStuff()>
c0018d4a:	31 c0                	xor    eax,eax
c0018d4c:	83 c4 0c             	add    esp,0xc
c0018d4f:	c3                   	ret    
c0018d50:	40                   	inc    eax
c0018d51:	89 42 0c             	mov    DWORD PTR [edx+0xc],eax
c0018d54:	e8 a4 ff ff ff       	call   c0018cfd <unlockStuff()>
c0018d59:	b0 01                	mov    al,0x1
c0018d5b:	83 c4 0c             	add    esp,0xc
c0018d5e:	c3                   	ret    
c0018d5f:	90                   	nop

c0018d60 <Semaphore::assertLocked(char const*)>:
c0018d60:	83 ec 0c             	sub    esp,0xc
c0018d63:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018d67:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0018d6b:	e8 e6 fb ff ff       	call   c0018956 <lockStuff()>
c0018d70:	8b 02                	mov    eax,DWORD PTR [edx]
c0018d72:	39 42 0c             	cmp    DWORD PTR [edx+0xc],eax
c0018d75:	7c 05                	jl     c0018d7c <Semaphore::assertLocked(char const*)+0x1c>
c0018d77:	83 c4 0c             	add    esp,0xc
c0018d7a:	eb 81                	jmp    c0018cfd <unlockStuff()>
c0018d7c:	83 ec 0c             	sub    esp,0xc
c0018d7f:	51                   	push   ecx
c0018d80:	e8 bd cb ff ff       	call   c0015942 <Krnl::panic(char const*)>
c0018d85:	83 c4 10             	add    esp,0x10
c0018d88:	83 c4 0c             	add    esp,0xc
c0018d8b:	e9 6d ff ff ff       	jmp    c0018cfd <unlockStuff()>

c0018d90 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0018d90:	83 ec 0c             	sub    esp,0xc
c0018d93:	e8 82 fb ff ff       	call   c001891a <getIRQNestingLevel()>
c0018d98:	52                   	push   edx
c0018d99:	52                   	push   edx
c0018d9a:	50                   	push   eax
c0018d9b:	68 ac 2d 02 c0       	push   0xc0022dac
c0018da0:	e8 d2 63 ff ff       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c0018da5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018daa:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018dae:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0018db1:	e8 c2 fe ff ff       	call   c0018c78 <schedule()>
c0018db6:	e8 76 fb ff ff       	call   c0018931 <unlockScheduler()>
c0018dbb:	e8 5a fb ff ff       	call   c001891a <getIRQNestingLevel()>
c0018dc0:	59                   	pop    ecx
c0018dc1:	5a                   	pop    edx
c0018dc2:	50                   	push   eax
c0018dc3:	68 e0 2d 02 c0       	push   0xc0022de0
c0018dc8:	e8 aa 63 ff ff       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c0018dcd:	83 c4 1c             	add    esp,0x1c
c0018dd0:	c3                   	ret    

c0018dd1 <blockTask(TaskState)>:
c0018dd1:	83 ec 0c             	sub    esp,0xc
c0018dd4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018dd8:	e8 52 fb ff ff       	call   c001892f <lockScheduler()>
c0018ddd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018de2:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0018de5:	e8 8e fe ff ff       	call   c0018c78 <schedule()>
c0018dea:	83 c4 0c             	add    esp,0xc
c0018ded:	e9 3f fb ff ff       	jmp    c0018931 <unlockScheduler()>

c0018df2 <waitTask(int, int*, int)>:
c0018df2:	83 ec 18             	sub    esp,0x18
c0018df5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018dfa:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018dfe:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0018e01:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018e05:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018e0a:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c0018e0d:	6a 07                	push   0x7
c0018e0f:	e8 bd ff ff ff       	call   c0018dd1 <blockTask(TaskState)>
c0018e14:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018e19:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c0018e1c:	83 c4 10             	add    esp,0x10
c0018e1f:	85 d2                	test   edx,edx
c0018e21:	74 0a                	je     c0018e2d <waitTask(int, int*, int)+0x3b>
c0018e23:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c0018e26:	89 02                	mov    DWORD PTR [edx],eax
c0018e28:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018e2d:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c0018e30:	83 c4 0c             	add    esp,0xc
c0018e33:	c3                   	ret    

c0018e34 <nanoSleepUntil(unsigned long long)>:
c0018e34:	53                   	push   ebx
c0018e35:	83 ec 08             	sub    esp,0x8
c0018e38:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018e3c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0018e40:	3b 0d f0 4b 02 c0    	cmp    ecx,DWORD PTR ds:0xc0024bf0
c0018e46:	89 d8                	mov    eax,ebx
c0018e48:	1b 05 f4 4b 02 c0    	sbb    eax,DWORD PTR ds:0xc0024bf4
c0018e4e:	73 05                	jae    c0018e55 <nanoSleepUntil(unsigned long long)+0x21>
c0018e50:	83 c4 08             	add    esp,0x8
c0018e53:	5b                   	pop    ebx
c0018e54:	c3                   	ret    
c0018e55:	e8 fc fa ff ff       	call   c0018956 <lockStuff()>
c0018e5a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018e5f:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0018e62:	89 58 30             	mov    DWORD PTR [eax+0x30],ebx
c0018e65:	51                   	push   ecx
c0018e66:	51                   	push   ecx
c0018e67:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0018e6d:	53                   	push   ebx
c0018e6e:	68 bc 59 02 c0       	push   0xc00259bc
c0018e73:	e8 fa 6c 00 00       	call   c001fb72 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018e78:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0018e7f:	e8 4d ff ff ff       	call   c0018dd1 <blockTask(TaskState)>
c0018e84:	83 c4 18             	add    esp,0x18
c0018e87:	5b                   	pop    ebx
c0018e88:	e9 70 fe ff ff       	jmp    c0018cfd <unlockStuff()>

c0018e8d <nanoSleep(unsigned long long)>:
c0018e8d:	a1 f0 4b 02 c0       	mov    eax,ds:0xc0024bf0
c0018e92:	8b 15 f4 4b 02 c0    	mov    edx,DWORD PTR ds:0xc0024bf4
c0018e98:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c0018e9c:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c0018ea0:	eb 92                	jmp    c0018e34 <nanoSleepUntil(unsigned long long)>

c0018ea2 <sleep(unsigned long long)>:
c0018ea2:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c0018ea7:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c0018eaf:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c0018eb3:	01 ca                	add    edx,ecx
c0018eb5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018eb9:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0018ebd:	eb ce                	jmp    c0018e8d <nanoSleep(unsigned long long)>
c0018ebf:	90                   	nop

c0018ec0 <Semaphore::acquire()>:
c0018ec0:	83 ec 0c             	sub    esp,0xc
c0018ec3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018ec7:	e8 8a fa ff ff       	call   c0018956 <lockStuff()>
c0018ecc:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0018ecf:	3b 02                	cmp    eax,DWORD PTR [edx]
c0018ed1:	7d 0c                	jge    c0018edf <Semaphore::acquire()+0x1f>
c0018ed3:	40                   	inc    eax
c0018ed4:	89 42 0c             	mov    DWORD PTR [edx+0xc],eax
c0018ed7:	83 c4 0c             	add    esp,0xc
c0018eda:	e9 1e fe ff ff       	jmp    c0018cfd <unlockStuff()>
c0018edf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018ee4:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0018eeb:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0018eee:	85 c0                	test   eax,eax
c0018ef0:	74 29                	je     c0018f1b <Semaphore::acquire()+0x5b>
c0018ef2:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c0018ef5:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0018efb:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c0018efe:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018f03:	83 ec 0c             	sub    esp,0xc
c0018f06:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0018f09:	6a 05                	push   0x5
c0018f0b:	e8 c1 fe ff ff       	call   c0018dd1 <blockTask(TaskState)>
c0018f10:	83 c4 10             	add    esp,0x10
c0018f13:	83 c4 0c             	add    esp,0xc
c0018f16:	e9 e2 fd ff ff       	jmp    c0018cfd <unlockStuff()>
c0018f1b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018f20:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0018f23:	eb d9                	jmp    c0018efe <Semaphore::acquire()+0x3e>

c0018f25 <taskReturned>:
c0018f25:	83 ec 18             	sub    esp,0x18
c0018f28:	68 14 2e 02 c0       	push   0xc0022e14
c0018f2d:	e8 10 ca ff ff       	call   c0015942 <Krnl::panic(char const*)>
c0018f32:	83 c4 10             	add    esp,0x10
c0018f35:	83 ec 0c             	sub    esp,0xc
c0018f38:	6a 02                	push   0x2
c0018f3a:	e8 92 fe ff ff       	call   c0018dd1 <blockTask(TaskState)>
c0018f3f:	e8 eb f9 ff ff       	call   c001892f <lockScheduler()>
c0018f44:	e8 2f fd ff ff       	call   c0018c78 <schedule()>
c0018f49:	e8 e3 f9 ff ff       	call   c0018931 <unlockScheduler()>
c0018f4e:	83 c4 10             	add    esp,0x10
c0018f51:	eb e2                	jmp    c0018f35 <taskReturned+0x10>

c0018f53 <unblockTask(ThreadControlBlock*)>:
c0018f53:	53                   	push   ebx
c0018f54:	83 ec 08             	sub    esp,0x8
c0018f57:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018f5b:	e8 cf f9 ff ff       	call   c001892f <lockScheduler()>
c0018f60:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0018f63:	85 c0                	test   eax,eax
c0018f65:	74 5b                	je     c0018fc2 <unblockTask(ThreadControlBlock*)+0x6f>
c0018f67:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0018f6a:	48                   	dec    eax
c0018f6b:	74 30                	je     c0018f9d <unblockTask(ThreadControlBlock*)+0x4a>
c0018f6d:	83 ec 0c             	sub    esp,0xc
c0018f70:	68 c8 59 02 c0       	push   0xc00259c8
c0018f75:	e8 26 6b 00 00       	call   c001faa0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018f7a:	83 c4 10             	add    esp,0x10
c0018f7d:	85 c0                	test   eax,eax
c0018f7f:	75 16                	jne    c0018f97 <unblockTask(ThreadControlBlock*)+0x44>
c0018f81:	eb 64                	jmp    c0018fe7 <unblockTask(ThreadControlBlock*)+0x94>
c0018f83:	52                   	push   edx
c0018f84:	52                   	push   edx
c0018f85:	50                   	push   eax
c0018f86:	68 c8 59 02 c0       	push   0xc00259c8
c0018f8b:	e8 20 6e 00 00       	call   c001fdb0 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0018f90:	83 c4 10             	add    esp,0x10
c0018f93:	85 c0                	test   eax,eax
c0018f95:	74 50                	je     c0018fe7 <unblockTask(ThreadControlBlock*)+0x94>
c0018f97:	39 c3                	cmp    ebx,eax
c0018f99:	75 e8                	jne    c0018f83 <unblockTask(ThreadControlBlock*)+0x30>
c0018f9b:	eb 1c                	jmp    c0018fb9 <unblockTask(ThreadControlBlock*)+0x66>
c0018f9d:	83 ec 0c             	sub    esp,0xc
c0018fa0:	68 04 2f 02 c0       	push   0xc0022f04
c0018fa5:	e8 cd 61 ff ff       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c0018faa:	c7 04 24 90 2e 02 c0 	mov    DWORD PTR [esp],0xc0022e90
c0018fb1:	e8 c1 61 ff ff       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c0018fb6:	83 c4 10             	add    esp,0x10
c0018fb9:	83 c4 08             	add    esp,0x8
c0018fbc:	5b                   	pop    ebx
c0018fbd:	e9 6f f9 ff ff       	jmp    c0018931 <unlockScheduler()>
c0018fc2:	83 ec 0c             	sub    esp,0xc
c0018fc5:	68 48 2e 02 c0       	push   0xc0022e48
c0018fca:	e8 a8 61 ff ff       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c0018fcf:	c7 04 24 90 2e 02 c0 	mov    DWORD PTR [esp],0xc0022e90
c0018fd6:	e8 9c 61 ff ff       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c0018fdb:	83 c4 10             	add    esp,0x10
c0018fde:	83 c4 08             	add    esp,0x8
c0018fe1:	5b                   	pop    ebx
c0018fe2:	e9 4a f9 ff ff       	jmp    c0018931 <unlockScheduler()>
c0018fe7:	50                   	push   eax
c0018fe8:	50                   	push   eax
c0018fe9:	53                   	push   ebx
c0018fea:	68 c8 59 02 c0       	push   0xc00259c8
c0018fef:	e8 7e 6b 00 00       	call   c001fb72 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018ff4:	83 c4 10             	add    esp,0x10
c0018ff7:	83 c4 08             	add    esp,0x8
c0018ffa:	5b                   	pop    ebx
c0018ffb:	e9 31 f9 ff ff       	jmp    c0018931 <unlockScheduler()>

c0019000 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0019000:	55                   	push   ebp
c0019001:	57                   	push   edi
c0019002:	56                   	push   esi
c0019003:	53                   	push   ebx
c0019004:	83 ec 1c             	sub    esp,0x1c
c0019007:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001900b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001900e:	8b a8 36 05 00 00    	mov    ebp,DWORD PTR [eax+0x536]
c0019014:	85 ed                	test   ebp,ebp
c0019016:	7e 21                	jle    c0019039 <cleanupTerminatedTask(ThreadControlBlock*)+0x39>
c0019018:	31 f6                	xor    esi,esi
c001901a:	83 ec 0c             	sub    esp,0xc
c001901d:	8b bc b0 3a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x53a]
c0019024:	46                   	inc    esi
c0019025:	57                   	push   edi
c0019026:	e8 ee 2f ff ff       	call   c000c019 <free>
c001902b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001902e:	83 c4 10             	add    esp,0x10
c0019031:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c0019037:	7f e1                	jg     c001901a <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c0019039:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c0019043:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0019048:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001904b:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001904e:	d3 c0                	rol    eax,cl
c0019050:	66 8b 8a 24 05 00 00 	mov    cx,WORD PTR [edx+0x524]
c0019057:	21 c1                	and    ecx,eax
c0019059:	66 89 8a 24 05 00 00 	mov    WORD PTR [edx+0x524],cx
c0019060:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0019063:	89 f7                	mov    edi,esi
c0019065:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001906d:	0f 85 4f 01 00 00    	jne    c00191c2 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c2>
c0019073:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c0019079:	85 c0                	test   eax,eax
c001907b:	0f 84 aa 00 00 00    	je     c001912b <cleanupTerminatedTask(ThreadControlBlock*)+0x12b>
c0019081:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c0019084:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0019088:	31 c9                	xor    ecx,ecx
c001908a:	eb 10                	jmp    c001909c <cleanupTerminatedTask(ThreadControlBlock*)+0x9c>
c001908c:	41                   	inc    ecx
c001908d:	83 f9 10             	cmp    ecx,0x10
c0019090:	0f 84 95 00 00 00    	je     c001912b <cleanupTerminatedTask(ThreadControlBlock*)+0x12b>
c0019096:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001909c:	31 d2                	xor    edx,edx
c001909e:	66 8b 90 24 05 00 00 	mov    dx,WORD PTR [eax+0x524]
c00190a5:	d3 fa                	sar    edx,cl
c00190a7:	83 e2 01             	and    edx,0x1
c00190aa:	74 e0                	je     c001908c <cleanupTerminatedTask(ThreadControlBlock*)+0x8c>
c00190ac:	8d 14 49             	lea    edx,[ecx+ecx*2]
c00190af:	89 d5                	mov    ebp,edx
c00190b1:	c1 e5 05             	shl    ebp,0x5
c00190b4:	01 ea                	add    edx,ebp
c00190b6:	01 d0                	add    eax,edx
c00190b8:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c00190be:	83 fd 07             	cmp    ebp,0x7
c00190c1:	75 c9                	jne    c001908c <cleanupTerminatedTask(ThreadControlBlock*)+0x8c>
c00190c3:	05 40 02 00 00       	add    eax,0x240
c00190c8:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c00190cb:	83 fd ff             	cmp    ebp,0xffffffff
c00190ce:	0f 8c 07 01 00 00    	jl     c00191db <cleanupTerminatedTask(ThreadControlBlock*)+0x1db>
c00190d4:	0f 84 b4 01 00 00    	je     c001928e <cleanupTerminatedTask(ThreadControlBlock*)+0x28e>
c00190da:	85 ed                	test   ebp,ebp
c00190dc:	0f 84 9b 01 00 00    	je     c001927d <cleanupTerminatedTask(ThreadControlBlock*)+0x27d>
c00190e2:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c00190e4:	75 a6                	jne    c001908c <cleanupTerminatedTask(ThreadControlBlock*)+0x8c>
c00190e6:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c00190ec:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00190f0:	01 d0                	add    eax,edx
c00190f2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00190f6:	83 ec 0c             	sub    esp,0xc
c00190f9:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c00190ff:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0019102:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c0019108:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001910f:	50                   	push   eax
c0019110:	e8 3e fe ff ff       	call   c0018f53 <unblockTask(ThreadControlBlock*)>
c0019115:	83 c4 10             	add    esp,0x10
c0019118:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001911c:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001911f:	41                   	inc    ecx
c0019120:	89 f7                	mov    edi,esi
c0019122:	83 f9 10             	cmp    ecx,0x10
c0019125:	0f 85 6b ff ff ff    	jne    c0019096 <cleanupTerminatedTask(ThreadControlBlock*)+0x96>
c001912b:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c0019131:	85 c0                	test   eax,eax
c0019133:	74 5d                	je     c0019192 <cleanupTerminatedTask(ThreadControlBlock*)+0x192>
c0019135:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001913b:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c0019141:	74 4f                	je     c0019192 <cleanupTerminatedTask(ThreadControlBlock*)+0x192>
c0019143:	83 ec 0c             	sub    esp,0xc
c0019146:	68 c8 59 02 c0       	push   0xc00259c8
c001914b:	e8 50 69 00 00       	call   c001faa0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0019150:	c7 04 24 c8 59 02 c0 	mov    DWORD PTR [esp],0xc00259c8
c0019157:	89 c7                	mov    edi,eax
c0019159:	e8 4a 69 00 00       	call   c001faa8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001915e:	83 c4 10             	add    esp,0x10
c0019161:	84 c0                	test   al,al
c0019163:	0f 84 e2 00 00 00    	je     c001924b <cleanupTerminatedTask(ThreadControlBlock*)+0x24b>
c0019169:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001916c:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c0019172:	85 d2                	test   edx,edx
c0019174:	74 0f                	je     c0019185 <cleanupTerminatedTask(ThreadControlBlock*)+0x185>
c0019176:	83 ec 0c             	sub    esp,0xc
c0019179:	8b 02                	mov    eax,DWORD PTR [edx]
c001917b:	52                   	push   edx
c001917c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001917f:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0019182:	83 c4 10             	add    esp,0x10
c0019185:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001918f:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c0019192:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c0019198:	85 db                	test   ebx,ebx
c001919a:	74 16                	je     c00191b2 <cleanupTerminatedTask(ThreadControlBlock*)+0x1b2>
c001919c:	83 ec 0c             	sub    esp,0xc
c001919f:	53                   	push   ebx
c00191a0:	e8 17 55 ff ff       	call   c000e6bc <VAS::~VAS()>
c00191a5:	5a                   	pop    edx
c00191a6:	59                   	pop    ecx
c00191a7:	6a 10                	push   0x10
c00191a9:	53                   	push   ebx
c00191aa:	e8 a2 5e ff ff       	call   c000f051 <operator delete(void*, unsigned long)>
c00191af:	83 c4 10             	add    esp,0x10
c00191b2:	83 ec 0c             	sub    esp,0xc
c00191b5:	68 5d 2c 02 c0       	push   0xc0022c5d
c00191ba:	e8 b8 5f ff ff       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c00191bf:	83 c4 10             	add    esp,0x10
c00191c2:	50                   	push   eax
c00191c3:	50                   	push   eax
c00191c4:	68 3b 07 00 00       	push   0x73b
c00191c9:	68 6b 2c 02 c0       	push   0xc0022c6b
c00191ce:	e8 a4 5f ff ff       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c00191d3:	83 c4 2c             	add    esp,0x2c
c00191d6:	5b                   	pop    ebx
c00191d7:	5e                   	pop    esi
c00191d8:	5f                   	pop    edi
c00191d9:	5d                   	pop    ebp
c00191da:	c3                   	ret    
c00191db:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00191df:	83 ec 0c             	sub    esp,0xc
c00191e2:	68 48 2f 02 c0       	push   0xc0022f48
c00191e7:	e8 56 c7 ff ff       	call   c0015942 <Krnl::panic(char const*)>
c00191ec:	83 c4 10             	add    esp,0x10
c00191ef:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c00191f2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00191f6:	89 f7                	mov    edi,esi
c00191f8:	e9 8f fe ff ff       	jmp    c001908c <cleanupTerminatedTask(ThreadControlBlock*)+0x8c>
c00191fd:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0019203:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c0019209:	75 1c                	jne    c0019227 <cleanupTerminatedTask(ThreadControlBlock*)+0x227>
c001920b:	83 ec 0c             	sub    esp,0xc
c001920e:	68 b0 2f 02 c0       	push   0xc0022fb0
c0019213:	e8 5f 5f ff ff       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c0019218:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001921f:	e8 ad fb ff ff       	call   c0018dd1 <blockTask(TaskState)>
c0019224:	83 c4 10             	add    esp,0x10
c0019227:	55                   	push   ebp
c0019228:	55                   	push   ebp
c0019229:	56                   	push   esi
c001922a:	68 c8 59 02 c0       	push   0xc00259c8
c001922f:	e8 3e 69 00 00       	call   c001fb72 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0019234:	c7 04 24 c8 59 02 c0 	mov    DWORD PTR [esp],0xc00259c8
c001923b:	e8 60 68 00 00       	call   c001faa0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0019240:	83 c4 10             	add    esp,0x10
c0019243:	39 f8                	cmp    eax,edi
c0019245:	0f 84 1e ff ff ff    	je     c0019169 <cleanupTerminatedTask(ThreadControlBlock*)+0x169>
c001924b:	83 ec 0c             	sub    esp,0xc
c001924e:	68 c8 59 02 c0       	push   0xc00259c8
c0019253:	e8 48 68 00 00       	call   c001faa0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0019258:	89 c6                	mov    esi,eax
c001925a:	c7 04 24 c8 59 02 c0 	mov    DWORD PTR [esp],0xc00259c8
c0019261:	e8 5e 68 00 00       	call   c001fac4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0019266:	83 c4 10             	add    esp,0x10
c0019269:	39 f3                	cmp    ebx,esi
c001926b:	74 ba                	je     c0019227 <cleanupTerminatedTask(ThreadControlBlock*)+0x227>
c001926d:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c0019270:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0019273:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c0019279:	75 ac                	jne    c0019227 <cleanupTerminatedTask(ThreadControlBlock*)+0x227>
c001927b:	eb 80                	jmp    c00191fd <cleanupTerminatedTask(ThreadControlBlock*)+0x1fd>
c001927d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0019281:	83 ec 0c             	sub    esp,0xc
c0019284:	68 7c 2f 02 c0       	push   0xc0022f7c
c0019289:	e9 59 ff ff ff       	jmp    c00191e7 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e7>
c001928e:	8b 36                	mov    esi,DWORD PTR [esi]
c0019290:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0019294:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c0019297:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001929a:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c00192a0:	01 d7                	add    edi,edx
c00192a2:	89 f8                	mov    eax,edi
c00192a4:	e9 49 fe ff ff       	jmp    c00190f2 <cleanupTerminatedTask(ThreadControlBlock*)+0xf2>

c00192a9 <cleanerTaskFunction(void*)>:
c00192a9:	53                   	push   ebx
c00192aa:	83 ec 08             	sub    esp,0x8
c00192ad:	e8 7f f6 ff ff       	call   c0018931 <unlockScheduler()>
c00192b2:	e8 78 f6 ff ff       	call   c001892f <lockScheduler()>
c00192b7:	80 3d 8c 59 02 c0 00 	cmp    BYTE PTR ds:0xc002598c,0x0
c00192be:	0f 85 8e 00 00 00    	jne    c0019352 <cleanerTaskFunction(void*)+0xa9>
c00192c4:	83 ec 0c             	sub    esp,0xc
c00192c7:	6a 02                	push   0x2
c00192c9:	e8 c2 fa ff ff       	call   c0018d90 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00192ce:	83 c4 10             	add    esp,0x10
c00192d1:	c6 05 8c 59 02 c0 00 	mov    BYTE PTR ds:0xc002598c,0x0
c00192d8:	e8 79 f6 ff ff       	call   c0018956 <lockStuff()>
c00192dd:	e8 4d f6 ff ff       	call   c001892f <lockScheduler()>
c00192e2:	83 ec 0c             	sub    esp,0xc
c00192e5:	68 b0 59 02 c0       	push   0xc00259b0
c00192ea:	e8 b9 67 00 00       	call   c001faa8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00192ef:	83 c4 10             	add    esp,0x10
c00192f2:	84 c0                	test   al,al
c00192f4:	75 40                	jne    c0019336 <cleanerTaskFunction(void*)+0x8d>
c00192f6:	83 ec 0c             	sub    esp,0xc
c00192f9:	68 b0 59 02 c0       	push   0xc00259b0
c00192fe:	e8 9d 67 00 00       	call   c001faa0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0019303:	89 c3                	mov    ebx,eax
c0019305:	c7 04 24 b0 59 02 c0 	mov    DWORD PTR [esp],0xc00259b0
c001930c:	e8 b3 67 00 00       	call   c001fac4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0019311:	c7 04 24 81 2c 02 c0 	mov    DWORD PTR [esp],0xc0022c81
c0019318:	e8 5a 5e ff ff       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c001931d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019320:	e8 db fc ff ff       	call   c0019000 <cleanupTerminatedTask(ThreadControlBlock*)>
c0019325:	c7 04 24 9a 2c 02 c0 	mov    DWORD PTR [esp],0xc0022c9a
c001932c:	e8 46 5e ff ff       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c0019331:	83 c4 10             	add    esp,0x10
c0019334:	eb ac                	jmp    c00192e2 <cleanerTaskFunction(void*)+0x39>
c0019336:	e8 f6 f5 ff ff       	call   c0018931 <unlockScheduler()>
c001933b:	e8 bd f9 ff ff       	call   c0018cfd <unlockStuff()>
c0019340:	e8 ea f5 ff ff       	call   c001892f <lockScheduler()>
c0019345:	80 3d 8c 59 02 c0 00 	cmp    BYTE PTR ds:0xc002598c,0x0
c001934c:	0f 84 72 ff ff ff    	je     c00192c4 <cleanerTaskFunction(void*)+0x1b>
c0019352:	e8 da f5 ff ff       	call   c0018931 <unlockScheduler()>
c0019357:	e9 75 ff ff ff       	jmp    c00192d1 <cleanerTaskFunction(void*)+0x28>

c001935c <terminateTask(int)>:
c001935c:	83 ec 14             	sub    esp,0x14
c001935f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019364:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019367:	83 c0 0c             	add    eax,0xc
c001936a:	50                   	push   eax
c001936b:	68 d8 2f 02 c0       	push   0xc0022fd8
c0019370:	e8 02 5e ff ff       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c0019375:	e8 dc f5 ff ff       	call   c0018956 <lockStuff()>
c001937a:	e8 b0 f5 ff ff       	call   c001892f <lockScheduler()>
c001937f:	c7 04 24 ad 2c 02 c0 	mov    DWORD PTR [esp],0xc0022cad
c0019386:	e8 ec 5d ff ff       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c001938b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019390:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0019394:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c0019397:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001939c:	59                   	pop    ecx
c001939d:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00193a0:	5a                   	pop    edx
c00193a1:	50                   	push   eax
c00193a2:	68 b0 59 02 c0       	push   0xc00259b0
c00193a7:	e8 c6 67 00 00       	call   c001fb72 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00193ac:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00193b1:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c00193b8:	c7 04 24 c7 2c 02 c0 	mov    DWORD PTR [esp],0xc0022cc7
c00193bf:	e8 b3 5d ff ff       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c00193c4:	8b 0d 88 59 02 c0    	mov    ecx,DWORD PTR ds:0xc0025988
c00193ca:	83 c4 10             	add    esp,0x10
c00193cd:	85 c9                	test   ecx,ecx
c00193cf:	74 5b                	je     c001942c <terminateTask(int)+0xd0>
c00193d1:	83 ec 0c             	sub    esp,0xc
c00193d4:	68 e1 2c 02 c0       	push   0xc0022ce1
c00193d9:	e8 99 5d ff ff       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c00193de:	58                   	pop    eax
c00193df:	8b 15 88 59 02 c0    	mov    edx,DWORD PTR ds:0xc0025988
c00193e5:	52                   	push   edx
c00193e6:	c6 05 8c 59 02 c0 01 	mov    BYTE PTR ds:0xc002598c,0x1
c00193ed:	e8 61 fb ff ff       	call   c0018f53 <unblockTask(ThreadControlBlock*)>
c00193f2:	c7 04 24 fb 2c 02 c0 	mov    DWORD PTR [esp],0xc0022cfb
c00193f9:	e8 79 5d ff ff       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c00193fe:	83 c4 10             	add    esp,0x10
c0019401:	e8 2b f5 ff ff       	call   c0018931 <unlockScheduler()>
c0019406:	e8 f2 f8 ff ff       	call   c0018cfd <unlockStuff()>
c001940b:	83 ec 0c             	sub    esp,0xc
c001940e:	68 33 2d 02 c0       	push   0xc0022d33
c0019413:	e8 5f 5d ff ff       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c0019418:	83 c4 10             	add    esp,0x10
c001941b:	e8 0f f5 ff ff       	call   c001892f <lockScheduler()>
c0019420:	e8 53 f8 ff ff       	call   c0018c78 <schedule()>
c0019425:	e8 07 f5 ff ff       	call   c0018931 <unlockScheduler()>
c001942a:	eb ef                	jmp    c001941b <terminateTask(int)+0xbf>
c001942c:	83 ec 0c             	sub    esp,0xc
c001942f:	68 15 2d 02 c0       	push   0xc0022d15
c0019434:	e8 3e 5d ff ff       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c0019439:	83 c4 10             	add    esp,0x10
c001943c:	eb c3                	jmp    c0019401 <terminateTask(int)+0xa5>

c001943e <Thr::terminateFromIRQ(int)>:
c001943e:	83 ec 18             	sub    esp,0x18
c0019441:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019445:	50                   	push   eax
c0019446:	e8 11 ff ff ff       	call   c001935c <terminateTask(int)>
c001944b:	90                   	nop

c001944c <Semaphore::release()>:
c001944c:	83 ec 0c             	sub    esp,0xc
c001944f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019453:	e8 fe f4 ff ff       	call   c0018956 <lockStuff()>
c0019458:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001945b:	85 c0                	test   eax,eax
c001945d:	74 1a                	je     c0019479 <Semaphore::release()+0x2d>
c001945f:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0019462:	83 ec 0c             	sub    esp,0xc
c0019465:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0019468:	50                   	push   eax
c0019469:	e8 e5 fa ff ff       	call   c0018f53 <unblockTask(ThreadControlBlock*)>
c001946e:	83 c4 10             	add    esp,0x10
c0019471:	83 c4 0c             	add    esp,0xc
c0019474:	e9 84 f8 ff ff       	jmp    c0018cfd <unlockStuff()>
c0019479:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c001947c:	48                   	dec    eax
c001947d:	89 42 0c             	mov    DWORD PTR [edx+0xc],eax
c0019480:	83 c4 0c             	add    esp,0xc
c0019483:	e9 75 f8 ff ff       	jmp    c0018cfd <unlockStuff()>

c0019488 <__static_initialization_and_destruction_0(int, int)>:
c0019488:	83 ec 0c             	sub    esp,0xc
c001948b:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0019490:	0f 85 88 00 00 00    	jne    c001951e <__static_initialization_and_destruction_0(int, int)+0x96>
c0019496:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001949e:	75 7e                	jne    c001951e <__static_initialization_and_destruction_0(int, int)+0x96>
c00194a0:	83 ec 0c             	sub    esp,0xc
c00194a3:	68 c8 59 02 c0       	push   0xc00259c8
c00194a8:	e8 ab 68 00 00       	call   c001fd58 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00194ad:	83 c4 10             	add    esp,0x10
c00194b0:	83 ec 04             	sub    esp,0x4
c00194b3:	68 9c 39 02 c0       	push   0xc002399c
c00194b8:	68 c8 59 02 c0       	push   0xc00259c8
c00194bd:	68 18 fd 01 c0       	push   0xc001fd18
c00194c2:	e8 06 5b ff ff       	call   c000efcd <__cxa_atexit>
c00194c7:	83 c4 10             	add    esp,0x10
c00194ca:	83 ec 0c             	sub    esp,0xc
c00194cd:	68 bc 59 02 c0       	push   0xc00259bc
c00194d2:	e8 81 68 00 00       	call   c001fd58 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00194d7:	83 c4 10             	add    esp,0x10
c00194da:	83 ec 04             	sub    esp,0x4
c00194dd:	68 9c 39 02 c0       	push   0xc002399c
c00194e2:	68 bc 59 02 c0       	push   0xc00259bc
c00194e7:	68 18 fd 01 c0       	push   0xc001fd18
c00194ec:	e8 dc 5a ff ff       	call   c000efcd <__cxa_atexit>
c00194f1:	83 c4 10             	add    esp,0x10
c00194f4:	83 ec 0c             	sub    esp,0xc
c00194f7:	68 b0 59 02 c0       	push   0xc00259b0
c00194fc:	e8 57 68 00 00       	call   c001fd58 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0019501:	83 c4 10             	add    esp,0x10
c0019504:	83 ec 04             	sub    esp,0x4
c0019507:	68 9c 39 02 c0       	push   0xc002399c
c001950c:	68 b0 59 02 c0       	push   0xc00259b0
c0019511:	68 18 fd 01 c0       	push   0xc001fd18
c0019516:	e8 b2 5a ff ff       	call   c000efcd <__cxa_atexit>
c001951b:	83 c4 10             	add    esp,0x10
c001951e:	90                   	nop
c001951f:	83 c4 0c             	add    esp,0xc
c0019522:	c3                   	ret    

c0019523 <_GLOBAL__sub_I_kernelProcess>:
c0019523:	83 ec 0c             	sub    esp,0xc
c0019526:	83 ec 08             	sub    esp,0x8
c0019529:	68 ff ff 00 00       	push   0xffff
c001952e:	6a 01                	push   0x1
c0019530:	e8 53 ff ff ff       	call   c0019488 <__static_initialization_and_destruction_0(int, int)>
c0019535:	83 c4 10             	add    esp,0x10
c0019538:	83 c4 0c             	add    esp,0xc
c001953b:	c3                   	ret    

c001953c <Vm::vm8086EntryPoint(void*)>:
c001953c:	83 ec 0c             	sub    esp,0xc
c001953f:	e8 ed f3 ff ff       	call   c0018931 <unlockScheduler()>
c0019544:	fb                   	sti    
c0019545:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001954a:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001954e:	52                   	push   edx
c001954f:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c0019553:	52                   	push   edx
c0019554:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0019558:	52                   	push   edx
c0019559:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001955d:	50                   	push   eax
c001955e:	e8 04 6d fe ff       	call   c0000267 <goToVM86>
c0019563:	83 c4 1c             	add    esp,0x1c
c0019566:	c3                   	ret    

c0019567 <Vm::inbv(unsigned short)>:
c0019567:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001956b:	ec                   	in     al,dx
c001956c:	c3                   	ret    

c001956d <Vm::outbv(unsigned short, unsigned char)>:
c001956d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019571:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019575:	ee                   	out    dx,al
c0019576:	c3                   	ret    

c0019577 <Vm::realToLinear(unsigned short, unsigned short)>:
c0019577:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001957c:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019581:	c1 e0 04             	shl    eax,0x4
c0019584:	01 d0                	add    eax,edx
c0019586:	c3                   	ret    

c0019587 <Vm::getSegment(unsigned int)>:
c0019587:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001958b:	c1 e8 10             	shr    eax,0x10
c001958e:	c3                   	ret    

c001958f <Vm::getOffset(unsigned int)>:
c001958f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019593:	c3                   	ret    

c0019594 <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0019594:	55                   	push   ebp
c0019595:	57                   	push   edi
c0019596:	56                   	push   esi
c0019597:	53                   	push   ebx
c0019598:	83 ec 2c             	sub    esp,0x2c
c001959b:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001959f:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c00195a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00195a7:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c00195ab:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c00195af:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c00195b3:	e8 77 f3 ff ff       	call   c001892f <lockScheduler()>
c00195b8:	68 80 00 00 00       	push   0x80
c00195bd:	6a 00                	push   0x0
c00195bf:	68 3c 95 01 c0       	push   0xc001953c
c00195c4:	55                   	push   ebp
c00195c5:	e8 9a f4 ff ff       	call   c0018a64 <Process::createThread(void (*)(void*), void*, int)>
c00195ca:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00195ce:	66 89 50 5d          	mov    WORD PTR [eax+0x5d],dx
c00195d2:	66 89 58 5f          	mov    WORD PTR [eax+0x5f],bx
c00195d6:	66 89 78 59          	mov    WORD PTR [eax+0x59],di
c00195da:	66 89 70 5b          	mov    WORD PTR [eax+0x5b],si
c00195de:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c00195e2:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00195e9:	e8 54 5a ff ff       	call   c000f042 <operator new(unsigned long)>
c00195ee:	83 c4 0c             	add    esp,0xc
c00195f1:	55                   	push   ebp
c00195f2:	89 c3                	mov    ebx,eax
c00195f4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00195f8:	50                   	push   eax
c00195f9:	e8 b0 60 ff ff       	call   c000f6ae <File::File(char const*, Process*)>
c00195fe:	83 c4 0c             	add    esp,0xc
c0019601:	8d 44 24 17          	lea    eax,[esp+0x17]
c0019605:	50                   	push   eax
c0019606:	8d 44 24 20          	lea    eax,[esp+0x20]
c001960a:	50                   	push   eax
c001960b:	53                   	push   ebx
c001960c:	e8 ad 63 ff ff       	call   c000f9be <File::stat(unsigned long long*, bool*)>
c0019611:	8a 54 24 23          	mov    dl,BYTE PTR [esp+0x23]
c0019615:	83 c4 10             	add    esp,0x10
c0019618:	84 d2                	test   dl,dl
c001961a:	74 1c                	je     c0019638 <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xa4>
c001961c:	83 ec 0c             	sub    esp,0xc
c001961f:	68 f7 2f 02 c0       	push   0xc0022ff7
c0019624:	e8 19 c3 ff ff       	call   c0015942 <Krnl::panic(char const*)>
c0019629:	e8 03 f3 ff ff       	call   c0018931 <unlockScheduler()>
c001962e:	83 c4 10             	add    esp,0x10
c0019631:	31 d2                	xor    edx,edx
c0019633:	e9 81 00 00 00       	jmp    c00196b9 <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x125>
c0019638:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001963c:	51                   	push   ecx
c001963d:	51                   	push   ecx
c001963e:	6a 01                	push   0x1
c0019640:	53                   	push   ebx
c0019641:	e8 cc 60 ff ff       	call   c000f712 <File::open(FileOpenMode)>
c0019646:	83 c4 10             	add    esp,0x10
c0019649:	85 c0                	test   eax,eax
c001964b:	74 1b                	je     c0019668 <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd4>
c001964d:	83 ec 0c             	sub    esp,0xc
c0019650:	68 10 30 02 c0       	push   0xc0023010
c0019655:	e8 e8 c2 ff ff       	call   c0015942 <Krnl::panic(char const*)>
c001965a:	e8 d2 f2 ff ff       	call   c0018931 <unlockScheduler()>
c001965f:	83 c4 10             	add    esp,0x10
c0019662:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0019666:	eb 51                	jmp    c00196b9 <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x125>
c0019668:	83 ec 0c             	sub    esp,0xc
c001966b:	0f b7 ff             	movzx  edi,di
c001966e:	6a 07                	push   0x7
c0019670:	68 00 01 00 00       	push   0x100
c0019675:	6a 00                	push   0x0
c0019677:	6a 00                	push   0x0
c0019679:	ff b5 32 05 00 00    	push   DWORD PTR [ebp+0x532]
c001967f:	e8 96 54 ff ff       	call   c000eb1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0019684:	83 c4 18             	add    esp,0x18
c0019687:	0f b7 f6             	movzx  esi,si
c001968a:	57                   	push   edi
c001968b:	56                   	push   esi
c001968c:	e8 e6 fe ff ff       	call   c0019577 <Vm::realToLinear(unsigned short, unsigned short)>
c0019691:	5a                   	pop    edx
c0019692:	8b 13                	mov    edx,DWORD PTR [ebx]
c0019694:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0019698:	51                   	push   ecx
c0019699:	50                   	push   eax
c001969a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001969e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00196a2:	53                   	push   ebx
c00196a3:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00196a6:	83 c4 14             	add    esp,0x14
c00196a9:	53                   	push   ebx
c00196aa:	e8 c1 60 ff ff       	call   c000f770 <File::close()>
c00196af:	e8 7d f2 ff ff       	call   c0018931 <unlockScheduler()>
c00196b4:	83 c4 10             	add    esp,0x10
c00196b7:	b2 01                	mov    dl,0x1
c00196b9:	83 c4 2c             	add    esp,0x2c
c00196bc:	88 d0                	mov    al,dl
c00196be:	5b                   	pop    ebx
c00196bf:	5e                   	pop    esi
c00196c0:	5f                   	pop    edi
c00196c1:	5d                   	pop    ebp
c00196c2:	c3                   	ret    

c00196c3 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c00196c3:	57                   	push   edi
c00196c4:	56                   	push   esi
c00196c5:	53                   	push   ebx
c00196c6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00196ca:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00196ce:	83 e8 06             	sub    eax,0x6
c00196d1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00196d5:	0f b7 c0             	movzx  eax,ax
c00196d8:	50                   	push   eax
c00196d9:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c00196de:	50                   	push   eax
c00196df:	e8 93 fe ff ff       	call   c0019577 <Vm::realToLinear(unsigned short, unsigned short)>
c00196e4:	5a                   	pop    edx
c00196e5:	5e                   	pop    esi
c00196e6:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c00196e9:	8d 56 fa             	lea    edx,[esi-0x6]
c00196ec:	81 e2 ff ff 00 00    	and    edx,0xffff
c00196f2:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c00196f5:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c00196f8:	83 c2 02             	add    edx,0x2
c00196fb:	66 89 10             	mov    WORD PTR [eax],dx
c00196fe:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c0019701:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0019705:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c0019708:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001970c:	89 d6                	mov    esi,edx
c001970e:	66 81 e6 ff fd       	and    si,0xfdff
c0019713:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0019719:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001971d:	74 07                	je     c0019726 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001971f:	89 d6                	mov    esi,edx
c0019721:	66 81 ce 00 02       	or     si,0x200
c0019726:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001972a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001972f:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0019733:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001973b:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001973e:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c0019746:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c0019749:	5b                   	pop    ebx
c001974a:	5e                   	pop    esi
c001974b:	5f                   	pop    edi
c001974c:	c3                   	ret    

c001974d <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001974d:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019752:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019757:	c1 e0 04             	shl    eax,0x4
c001975a:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001975d:	c3                   	ret    

c001975e <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001975e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019763:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019768:	c1 e0 04             	shl    eax,0x4
c001976b:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001976f:	c3                   	ret    

c0019770 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0019770:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019775:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001977a:	c1 e0 04             	shl    eax,0x4
c001977d:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0019780:	c3                   	ret    

c0019781 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0019781:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019786:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001978b:	c1 e0 04             	shl    eax,0x4
c001978e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019792:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0019795:	c3                   	ret    

c0019796 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0019796:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001979b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00197a0:	c1 e0 04             	shl    eax,0x4
c00197a3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00197a7:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c00197ab:	c3                   	ret    

c00197ac <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c00197ac:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00197b1:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00197b6:	c1 e0 04             	shl    eax,0x4
c00197b9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00197bd:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c00197c0:	c3                   	ret    

c00197c1 <Vm::faultHandler(regs*)>:
c00197c1:	55                   	push   ebp
c00197c2:	57                   	push   edi
c00197c3:	56                   	push   esi
c00197c4:	53                   	push   ebx
c00197c5:	83 ec 1c             	sub    esp,0x1c
c00197c8:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00197cc:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c00197d0:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00197d3:	52                   	push   edx
c00197d4:	0f b7 f0             	movzx  esi,ax
c00197d7:	0f b7 c0             	movzx  eax,ax
c00197da:	50                   	push   eax
c00197db:	e8 97 fd ff ff       	call   c0019577 <Vm::realToLinear(unsigned short, unsigned short)>
c00197e0:	5a                   	pop    edx
c00197e1:	89 c7                	mov    edi,eax
c00197e3:	59                   	pop    ecx
c00197e4:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00197e7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00197eb:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c00197ee:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00197f3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00197f7:	0f b7 c5             	movzx  eax,bp
c00197fa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00197fe:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0019802:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0019806:	e8 6c fd ff ff       	call   c0019577 <Vm::realToLinear(unsigned short, unsigned short)>
c001980b:	5a                   	pop    edx
c001980c:	59                   	pop    ecx
c001980d:	b1 06                	mov    cl,0x6
c001980f:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c0019814:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c0019819:	0f b6 17             	movzx  edx,BYTE PTR [edi]
c001981c:	80 fa 9d             	cmp    dl,0x9d
c001981f:	0f 84 1d 02 00 00    	je     c0019a42 <Vm::faultHandler(regs*)+0x281>
c0019825:	0f 87 8e 00 00 00    	ja     c00198b9 <Vm::faultHandler(regs*)+0xf8>
c001982b:	80 fa 66             	cmp    dl,0x66
c001982e:	0f 84 89 01 00 00    	je     c00199bd <Vm::faultHandler(regs*)+0x1fc>
c0019834:	77 44                	ja     c001987a <Vm::faultHandler(regs*)+0xb9>
c0019836:	80 fa 36             	cmp    dl,0x36
c0019839:	0f 84 74 01 00 00    	je     c00199b3 <Vm::faultHandler(regs*)+0x1f2>
c001983f:	77 1a                	ja     c001985b <Vm::faultHandler(regs*)+0x9a>
c0019841:	80 fa 26             	cmp    dl,0x26
c0019844:	0f 84 4b 01 00 00    	je     c0019995 <Vm::faultHandler(regs*)+0x1d4>
c001984a:	80 fa 2e             	cmp    dl,0x2e
c001984d:	0f 85 4a 05 00 00    	jne    c0019d9d <Vm::faultHandler(regs*)+0x5dc>
c0019853:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019856:	31 c9                	xor    ecx,ecx
c0019858:	47                   	inc    edi
c0019859:	eb be                	jmp    c0019819 <Vm::faultHandler(regs*)+0x58>
c001985b:	80 fa 64             	cmp    dl,0x64
c001985e:	0f 84 3b 01 00 00    	je     c001999f <Vm::faultHandler(regs*)+0x1de>
c0019864:	0f 87 3f 01 00 00    	ja     c00199a9 <Vm::faultHandler(regs*)+0x1e8>
c001986a:	80 fa 3e             	cmp    dl,0x3e
c001986d:	0f 85 2a 05 00 00    	jne    c0019d9d <Vm::faultHandler(regs*)+0x5dc>
c0019873:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019876:	b1 01                	mov    cl,0x1
c0019878:	eb de                	jmp    c0019858 <Vm::faultHandler(regs*)+0x97>
c001987a:	80 fa 6d             	cmp    dl,0x6d
c001987d:	0f 84 bf 02 00 00    	je     c0019b42 <Vm::faultHandler(regs*)+0x381>
c0019883:	77 17                	ja     c001989c <Vm::faultHandler(regs*)+0xdb>
c0019885:	80 fa 67             	cmp    dl,0x67
c0019888:	0f 84 3c 01 00 00    	je     c00199ca <Vm::faultHandler(regs*)+0x209>
c001988e:	80 fa 6c             	cmp    dl,0x6c
c0019891:	0f 84 5d 02 00 00    	je     c0019af4 <Vm::faultHandler(regs*)+0x333>
c0019897:	e9 01 05 00 00       	jmp    c0019d9d <Vm::faultHandler(regs*)+0x5dc>
c001989c:	80 fa 6f             	cmp    dl,0x6f
c001989f:	0f 84 8b 03 00 00    	je     c0019c30 <Vm::faultHandler(regs*)+0x46f>
c00198a5:	0f 82 0f 03 00 00    	jb     c0019bba <Vm::faultHandler(regs*)+0x3f9>
c00198ab:	80 fa 9c             	cmp    dl,0x9c
c00198ae:	0f 84 23 01 00 00    	je     c00199d7 <Vm::faultHandler(regs*)+0x216>
c00198b4:	e9 e4 04 00 00       	jmp    c0019d9d <Vm::faultHandler(regs*)+0x5dc>
c00198b9:	80 fa ec             	cmp    dl,0xec
c00198bc:	0f 84 7f 04 00 00    	je     c0019d41 <Vm::faultHandler(regs*)+0x580>
c00198c2:	77 7b                	ja     c001993f <Vm::faultHandler(regs*)+0x17e>
c00198c4:	80 fa e4             	cmp    dl,0xe4
c00198c7:	0f 84 fe 03 00 00    	je     c0019ccb <Vm::faultHandler(regs*)+0x50a>
c00198cd:	77 53                	ja     c0019922 <Vm::faultHandler(regs*)+0x161>
c00198cf:	80 fa cd             	cmp    dl,0xcd
c00198d2:	0f 84 cd 01 00 00    	je     c0019aa5 <Vm::faultHandler(regs*)+0x2e4>
c00198d8:	80 fa cf             	cmp    dl,0xcf
c00198db:	0f 85 bc 04 00 00    	jne    c0019d9d <Vm::faultHandler(regs*)+0x5dc>
c00198e1:	0f b7 10             	movzx  edx,WORD PTR [eax]
c00198e4:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c00198e7:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c00198eb:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c00198ee:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c00198f2:	81 ca 00 02 02 00    	or     edx,0x20200
c00198f8:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00198fb:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c00198ff:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0019905:	66 c1 e8 09          	shr    ax,0x9
c0019909:	83 e0 01             	and    eax,0x1
c001990c:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001990f:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0019912:	83 c0 06             	add    eax,0x6
c0019915:	25 ff ff 00 00       	and    eax,0xffff
c001991a:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001991d:	e9 77 04 00 00       	jmp    c0019d99 <Vm::faultHandler(regs*)+0x5d8>
c0019922:	80 fa e6             	cmp    dl,0xe6
c0019925:	0f 84 ea 03 00 00    	je     c0019d15 <Vm::faultHandler(regs*)+0x554>
c001992b:	0f 82 b6 03 00 00    	jb     c0019ce7 <Vm::faultHandler(regs*)+0x526>
c0019931:	80 fa e7             	cmp    dl,0xe7
c0019934:	0f 84 f2 03 00 00    	je     c0019d2c <Vm::faultHandler(regs*)+0x56b>
c001993a:	e9 5e 04 00 00       	jmp    c0019d9d <Vm::faultHandler(regs*)+0x5dc>
c001993f:	80 fa ef             	cmp    dl,0xef
c0019942:	0f 84 3c 04 00 00    	je     c0019d84 <Vm::faultHandler(regs*)+0x5c3>
c0019948:	77 28                	ja     c0019972 <Vm::faultHandler(regs*)+0x1b1>
c001994a:	80 fa ed             	cmp    dl,0xed
c001994d:	0f 84 0a 04 00 00    	je     c0019d5d <Vm::faultHandler(regs*)+0x59c>
c0019953:	80 fa ee             	cmp    dl,0xee
c0019956:	0f 85 41 04 00 00    	jne    c0019d9d <Vm::faultHandler(regs*)+0x5dc>
c001995c:	50                   	push   eax
c001995d:	50                   	push   eax
c001995e:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0019962:	50                   	push   eax
c0019963:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0019967:	50                   	push   eax
c0019968:	e8 00 fc ff ff       	call   c001956d <Vm::outbv(unsigned short, unsigned char)>
c001996d:	e9 0a 04 00 00       	jmp    c0019d7c <Vm::faultHandler(regs*)+0x5bb>
c0019972:	80 fa fa             	cmp    dl,0xfa
c0019975:	0f 84 5d 01 00 00    	je     c0019ad8 <Vm::faultHandler(regs*)+0x317>
c001997b:	80 fa fb             	cmp    dl,0xfb
c001997e:	0f 84 62 01 00 00    	je     c0019ae6 <Vm::faultHandler(regs*)+0x325>
c0019984:	80 fa f3             	cmp    dl,0xf3
c0019987:	0f 85 10 04 00 00    	jne    c0019d9d <Vm::faultHandler(regs*)+0x5dc>
c001998d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019990:	e9 c3 fe ff ff       	jmp    c0019858 <Vm::faultHandler(regs*)+0x97>
c0019995:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019998:	b1 02                	mov    cl,0x2
c001999a:	e9 b9 fe ff ff       	jmp    c0019858 <Vm::faultHandler(regs*)+0x97>
c001999f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00199a2:	b1 03                	mov    cl,0x3
c00199a4:	e9 af fe ff ff       	jmp    c0019858 <Vm::faultHandler(regs*)+0x97>
c00199a9:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00199ac:	b1 04                	mov    cl,0x4
c00199ae:	e9 a5 fe ff ff       	jmp    c0019858 <Vm::faultHandler(regs*)+0x97>
c00199b3:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00199b6:	b1 05                	mov    cl,0x5
c00199b8:	e9 9b fe ff ff       	jmp    c0019858 <Vm::faultHandler(regs*)+0x97>
c00199bd:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00199c0:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c00199c5:	e9 8e fe ff ff       	jmp    c0019858 <Vm::faultHandler(regs*)+0x97>
c00199ca:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00199cd:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c00199d2:	e9 81 fe ff ff       	jmp    c0019858 <Vm::faultHandler(regs*)+0x97>
c00199d7:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c00199da:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00199de:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00199e3:	74 30                	je     c0019a15 <Vm::faultHandler(regs*)+0x254>
c00199e5:	83 e9 04             	sub    ecx,0x4
c00199e8:	81 e2 ff 0d 00 00    	and    edx,0xdff
c00199ee:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00199f4:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c00199f7:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c00199fa:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0019a00:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c0019a04:	0f 84 8c 03 00 00    	je     c0019d96 <Vm::faultHandler(regs*)+0x5d5>
c0019a0a:	80 ce 02             	or     dh,0x2
c0019a0d:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0019a10:	e9 81 03 00 00       	jmp    c0019d96 <Vm::faultHandler(regs*)+0x5d5>
c0019a15:	83 e9 02             	sub    ecx,0x2
c0019a18:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0019a1e:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0019a21:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0019a25:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0019a2b:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c0019a2f:	74 05                	je     c0019a36 <Vm::faultHandler(regs*)+0x275>
c0019a31:	80 ce 02             	or     dh,0x2
c0019a34:	eb 03                	jmp    c0019a39 <Vm::faultHandler(regs*)+0x278>
c0019a36:	80 e6 fd             	and    dh,0xfd
c0019a39:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0019a3d:	e9 54 03 00 00       	jmp    c0019d96 <Vm::faultHandler(regs*)+0x5d5>
c0019a42:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019a47:	74 2a                	je     c0019a73 <Vm::faultHandler(regs*)+0x2b2>
c0019a49:	8b 10                	mov    edx,DWORD PTR [eax]
c0019a4b:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0019a51:	81 ca 00 02 02 00    	or     edx,0x20200
c0019a57:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0019a5a:	8b 00                	mov    eax,DWORD PTR [eax]
c0019a5c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0019a62:	c1 e8 09             	shr    eax,0x9
c0019a65:	83 e0 01             	and    eax,0x1
c0019a68:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c0019a6b:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0019a6e:	83 c0 04             	add    eax,0x4
c0019a71:	eb 25                	jmp    c0019a98 <Vm::faultHandler(regs*)+0x2d7>
c0019a73:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0019a76:	81 ca 00 02 02 00    	or     edx,0x20200
c0019a7c:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0019a7f:	66 8b 00             	mov    ax,WORD PTR [eax]
c0019a82:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0019a88:	66 c1 e8 09          	shr    ax,0x9
c0019a8c:	83 e0 01             	and    eax,0x1
c0019a8f:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c0019a92:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0019a95:	83 c0 02             	add    eax,0x2
c0019a98:	25 ff ff 00 00       	and    eax,0xffff
c0019a9d:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0019aa0:	e9 f1 02 00 00       	jmp    c0019d96 <Vm::faultHandler(regs*)+0x5d5>
c0019aa5:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0019aa9:	3c ff                	cmp    al,0xff
c0019aab:	75 10                	jne    c0019abd <Vm::faultHandler(regs*)+0x2fc>
c0019aad:	83 ec 0c             	sub    esp,0xc
c0019ab0:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0019ab3:	e8 86 f9 ff ff       	call   c001943e <Thr::terminateFromIRQ(int)>
c0019ab8:	e9 c2 02 00 00       	jmp    c0019d7f <Vm::faultHandler(regs*)+0x5be>
c0019abd:	83 ec 0c             	sub    esp,0xc
c0019ac0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019ac4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019ac8:	57                   	push   edi
c0019ac9:	50                   	push   eax
c0019aca:	53                   	push   ebx
c0019acb:	e8 f3 fb ff ff       	call   c00196c3 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0019ad0:	83 c4 20             	add    esp,0x20
c0019ad3:	e9 c1 02 00 00       	jmp    c0019d99 <Vm::faultHandler(regs*)+0x5d8>
c0019ad8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019add:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0019ae1:	e9 b0 02 00 00       	jmp    c0019d96 <Vm::faultHandler(regs*)+0x5d5>
c0019ae6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019aeb:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c0019aef:	e9 a2 02 00 00       	jmp    c0019d96 <Vm::faultHandler(regs*)+0x5d5>
c0019af4:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0019af9:	74 0d                	je     c0019b08 <Vm::faultHandler(regs*)+0x347>
c0019afb:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0019b02:	0f 87 e9 02 00 00    	ja     c0019df1 <Vm::faultHandler(regs*)+0x630>
c0019b08:	83 ec 0c             	sub    esp,0xc
c0019b0b:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0019b0e:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0019b12:	50                   	push   eax
c0019b13:	e8 4f fa ff ff       	call   c0019567 <Vm::inbv(unsigned short)>
c0019b18:	83 c4 0c             	add    esp,0xc
c0019b1b:	0f b6 c0             	movzx  eax,al
c0019b1e:	50                   	push   eax
c0019b1f:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0019b23:	0f b7 c9             	movzx  ecx,cx
c0019b26:	50                   	push   eax
c0019b27:	51                   	push   ecx
c0019b28:	e8 54 fc ff ff       	call   c0019781 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0019b2d:	83 c4 10             	add    esp,0x10
c0019b30:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019b33:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0019b37:	74 03                	je     c0019b3c <Vm::faultHandler(regs*)+0x37b>
c0019b39:	48                   	dec    eax
c0019b3a:	eb 01                	jmp    c0019b3d <Vm::faultHandler(regs*)+0x37c>
c0019b3c:	40                   	inc    eax
c0019b3d:	0f b7 c0             	movzx  eax,ax
c0019b40:	eb 70                	jmp    c0019bb2 <Vm::faultHandler(regs*)+0x3f1>
c0019b42:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0019b45:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0019b48:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0019b4d:	74 0c                	je     c0019b5b <Vm::faultHandler(regs*)+0x39a>
c0019b4f:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c0019b55:	0f 87 96 02 00 00    	ja     c0019df1 <Vm::faultHandler(regs*)+0x630>
c0019b5b:	0f b7 c9             	movzx  ecx,cx
c0019b5e:	0f b7 f6             	movzx  esi,si
c0019b61:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0019b64:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019b69:	74 20                	je     c0019b8b <Vm::faultHandler(regs*)+0x3ca>
c0019b6b:	ed                   	in     eax,dx
c0019b6c:	55                   	push   ebp
c0019b6d:	50                   	push   eax
c0019b6e:	51                   	push   ecx
c0019b6f:	56                   	push   esi
c0019b70:	e8 37 fc ff ff       	call   c00197ac <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0019b75:	83 c4 10             	add    esp,0x10
c0019b78:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019b7b:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0019b7f:	74 05                	je     c0019b86 <Vm::faultHandler(regs*)+0x3c5>
c0019b81:	83 e8 04             	sub    eax,0x4
c0019b84:	eb 27                	jmp    c0019bad <Vm::faultHandler(regs*)+0x3ec>
c0019b86:	83 c0 04             	add    eax,0x4
c0019b89:	eb 22                	jmp    c0019bad <Vm::faultHandler(regs*)+0x3ec>
c0019b8b:	66 ed                	in     ax,dx
c0019b8d:	0f b7 c0             	movzx  eax,ax
c0019b90:	57                   	push   edi
c0019b91:	50                   	push   eax
c0019b92:	51                   	push   ecx
c0019b93:	56                   	push   esi
c0019b94:	e8 fd fb ff ff       	call   c0019796 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0019b99:	83 c4 10             	add    esp,0x10
c0019b9c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019b9f:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0019ba3:	74 05                	je     c0019baa <Vm::faultHandler(regs*)+0x3e9>
c0019ba5:	83 e8 02             	sub    eax,0x2
c0019ba8:	eb 03                	jmp    c0019bad <Vm::faultHandler(regs*)+0x3ec>
c0019baa:	83 c0 02             	add    eax,0x2
c0019bad:	25 ff ff 00 00       	and    eax,0xffff
c0019bb2:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0019bb5:	e9 dc 01 00 00       	jmp    c0019d96 <Vm::faultHandler(regs*)+0x5d5>
c0019bba:	49                   	dec    ecx
c0019bbb:	80 f9 05             	cmp    cl,0x5
c0019bbe:	77 24                	ja     c0019be4 <Vm::faultHandler(regs*)+0x423>
c0019bc0:	0f b6 c9             	movzx  ecx,cl
c0019bc3:	ff 24 8d 58 30 02 c0 	jmp    DWORD PTR [ecx*4-0x3ffdcfa8]
c0019bca:	0f b7 f5             	movzx  esi,bp
c0019bcd:	eb 15                	jmp    c0019be4 <Vm::faultHandler(regs*)+0x423>
c0019bcf:	0f b7 73 0c          	movzx  esi,WORD PTR [ebx+0xc]
c0019bd3:	eb 0f                	jmp    c0019be4 <Vm::faultHandler(regs*)+0x423>
c0019bd5:	0f b7 73 08          	movzx  esi,WORD PTR [ebx+0x8]
c0019bd9:	eb 09                	jmp    c0019be4 <Vm::faultHandler(regs*)+0x423>
c0019bdb:	0f b7 73 04          	movzx  esi,WORD PTR [ebx+0x4]
c0019bdf:	eb 03                	jmp    c0019be4 <Vm::faultHandler(regs*)+0x423>
c0019be1:	0f b7 33             	movzx  esi,WORD PTR [ebx]
c0019be4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0019be7:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0019bec:	74 0b                	je     c0019bf9 <Vm::faultHandler(regs*)+0x438>
c0019bee:	3d ff ff 00 00       	cmp    eax,0xffff
c0019bf3:	0f 87 f8 01 00 00    	ja     c0019df1 <Vm::faultHandler(regs*)+0x630>
c0019bf9:	52                   	push   edx
c0019bfa:	52                   	push   edx
c0019bfb:	0f b7 c0             	movzx  eax,ax
c0019bfe:	50                   	push   eax
c0019bff:	56                   	push   esi
c0019c00:	e8 48 fb ff ff       	call   c001974d <Vm::readByteFromReal(unsigned short, unsigned short)>
c0019c05:	59                   	pop    ecx
c0019c06:	5e                   	pop    esi
c0019c07:	0f b6 c0             	movzx  eax,al
c0019c0a:	50                   	push   eax
c0019c0b:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0019c0f:	50                   	push   eax
c0019c10:	e8 58 f9 ff ff       	call   c001956d <Vm::outbv(unsigned short, unsigned char)>
c0019c15:	83 c4 10             	add    esp,0x10
c0019c18:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0019c1b:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0019c1f:	74 03                	je     c0019c24 <Vm::faultHandler(regs*)+0x463>
c0019c21:	48                   	dec    eax
c0019c22:	eb 01                	jmp    c0019c25 <Vm::faultHandler(regs*)+0x464>
c0019c24:	40                   	inc    eax
c0019c25:	0f b7 c0             	movzx  eax,ax
c0019c28:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0019c2b:	e9 66 01 00 00       	jmp    c0019d96 <Vm::faultHandler(regs*)+0x5d5>
c0019c30:	49                   	dec    ecx
c0019c31:	80 f9 05             	cmp    cl,0x5
c0019c34:	77 1f                	ja     c0019c55 <Vm::faultHandler(regs*)+0x494>
c0019c36:	0f b6 c9             	movzx  ecx,cl
c0019c39:	ff 24 8d 70 30 02 c0 	jmp    DWORD PTR [ecx*4-0x3ffdcf90]
c0019c40:	89 ee                	mov    esi,ebp
c0019c42:	eb 11                	jmp    c0019c55 <Vm::faultHandler(regs*)+0x494>
c0019c44:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0019c47:	eb 0c                	jmp    c0019c55 <Vm::faultHandler(regs*)+0x494>
c0019c49:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0019c4c:	eb 07                	jmp    c0019c55 <Vm::faultHandler(regs*)+0x494>
c0019c4e:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0019c51:	eb 02                	jmp    c0019c55 <Vm::faultHandler(regs*)+0x494>
c0019c53:	8b 33                	mov    esi,DWORD PTR [ebx]
c0019c55:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0019c58:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0019c5d:	74 0c                	je     c0019c6b <Vm::faultHandler(regs*)+0x4aa>
c0019c5f:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c0019c65:	0f 87 86 01 00 00    	ja     c0019df1 <Vm::faultHandler(regs*)+0x630>
c0019c6b:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c0019c6e:	0f b7 d6             	movzx  edx,si
c0019c71:	81 e7 00 04 00 00    	and    edi,0x400
c0019c77:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0019c7a:	0f b7 c1             	movzx  eax,cx
c0019c7d:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019c82:	74 1d                	je     c0019ca1 <Vm::faultHandler(regs*)+0x4e0>
c0019c84:	55                   	push   ebp
c0019c85:	55                   	push   ebp
c0019c86:	50                   	push   eax
c0019c87:	52                   	push   edx
c0019c88:	e8 e3 fa ff ff       	call   c0019770 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0019c8d:	83 c4 10             	add    esp,0x10
c0019c90:	89 f2                	mov    edx,esi
c0019c92:	ef                   	out    dx,eax
c0019c93:	85 ff                	test   edi,edi
c0019c95:	74 05                	je     c0019c9c <Vm::faultHandler(regs*)+0x4db>
c0019c97:	83 e9 04             	sub    ecx,0x4
c0019c9a:	eb 21                	jmp    c0019cbd <Vm::faultHandler(regs*)+0x4fc>
c0019c9c:	83 c1 04             	add    ecx,0x4
c0019c9f:	eb 1c                	jmp    c0019cbd <Vm::faultHandler(regs*)+0x4fc>
c0019ca1:	55                   	push   ebp
c0019ca2:	55                   	push   ebp
c0019ca3:	50                   	push   eax
c0019ca4:	52                   	push   edx
c0019ca5:	e8 b4 fa ff ff       	call   c001975e <Vm::readWordFromReal(unsigned short, unsigned short)>
c0019caa:	83 c4 10             	add    esp,0x10
c0019cad:	89 f2                	mov    edx,esi
c0019caf:	66 ef                	out    dx,ax
c0019cb1:	85 ff                	test   edi,edi
c0019cb3:	74 05                	je     c0019cba <Vm::faultHandler(regs*)+0x4f9>
c0019cb5:	83 e9 02             	sub    ecx,0x2
c0019cb8:	eb 03                	jmp    c0019cbd <Vm::faultHandler(regs*)+0x4fc>
c0019cba:	83 c1 02             	add    ecx,0x2
c0019cbd:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0019cc3:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c0019cc6:	e9 cb 00 00 00       	jmp    c0019d96 <Vm::faultHandler(regs*)+0x5d5>
c0019ccb:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0019cd2:	83 ec 0c             	sub    esp,0xc
c0019cd5:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0019cd9:	50                   	push   eax
c0019cda:	e8 88 f8 ff ff       	call   c0019567 <Vm::inbv(unsigned short)>
c0019cdf:	0f b6 c0             	movzx  eax,al
c0019ce2:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0019ce5:	eb 3f                	jmp    c0019d26 <Vm::faultHandler(regs*)+0x565>
c0019ce7:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019cec:	74 07                	je     c0019cf5 <Vm::faultHandler(regs*)+0x534>
c0019cee:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c0019cf2:	ed                   	in     eax,dx
c0019cf3:	eb 14                	jmp    c0019d09 <Vm::faultHandler(regs*)+0x548>
c0019cf5:	8b 4b 2c             	mov    ecx,DWORD PTR [ebx+0x2c]
c0019cf8:	66 31 c9             	xor    cx,cx
c0019cfb:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0019cfe:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c0019d02:	66 ed                	in     ax,dx
c0019d04:	0f b7 c0             	movzx  eax,ax
c0019d07:	09 c8                	or     eax,ecx
c0019d09:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0019d0c:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0019d10:	e9 84 00 00 00       	jmp    c0019d99 <Vm::faultHandler(regs*)+0x5d8>
c0019d15:	52                   	push   edx
c0019d16:	52                   	push   edx
c0019d17:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0019d1b:	50                   	push   eax
c0019d1c:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0019d20:	50                   	push   eax
c0019d21:	e8 47 f8 ff ff       	call   c001956d <Vm::outbv(unsigned short, unsigned char)>
c0019d26:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0019d2a:	eb 53                	jmp    c0019d7f <Vm::faultHandler(regs*)+0x5be>
c0019d2c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0019d2f:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c0019d33:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019d38:	74 03                	je     c0019d3d <Vm::faultHandler(regs*)+0x57c>
c0019d3a:	ef                   	out    dx,eax
c0019d3b:	eb cf                	jmp    c0019d0c <Vm::faultHandler(regs*)+0x54b>
c0019d3d:	66 ef                	out    dx,ax
c0019d3f:	eb cb                	jmp    c0019d0c <Vm::faultHandler(regs*)+0x54b>
c0019d41:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0019d48:	83 ec 0c             	sub    esp,0xc
c0019d4b:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0019d4f:	50                   	push   eax
c0019d50:	e8 12 f8 ff ff       	call   c0019567 <Vm::inbv(unsigned short)>
c0019d55:	0f b6 c0             	movzx  eax,al
c0019d58:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0019d5b:	eb 1f                	jmp    c0019d7c <Vm::faultHandler(regs*)+0x5bb>
c0019d5d:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0019d60:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019d65:	74 03                	je     c0019d6a <Vm::faultHandler(regs*)+0x5a9>
c0019d67:	ed                   	in     eax,dx
c0019d68:	eb 0d                	jmp    c0019d77 <Vm::faultHandler(regs*)+0x5b6>
c0019d6a:	66 ed                	in     ax,dx
c0019d6c:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0019d6f:	66 31 d2             	xor    dx,dx
c0019d72:	0f b7 c0             	movzx  eax,ax
c0019d75:	09 d0                	or     eax,edx
c0019d77:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0019d7a:	eb 1a                	jmp    c0019d96 <Vm::faultHandler(regs*)+0x5d5>
c0019d7c:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019d7f:	83 c4 10             	add    esp,0x10
c0019d82:	eb 15                	jmp    c0019d99 <Vm::faultHandler(regs*)+0x5d8>
c0019d84:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0019d87:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0019d8a:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019d8f:	74 03                	je     c0019d94 <Vm::faultHandler(regs*)+0x5d3>
c0019d91:	ef                   	out    dx,eax
c0019d92:	eb 02                	jmp    c0019d96 <Vm::faultHandler(regs*)+0x5d5>
c0019d94:	66 ef                	out    dx,ax
c0019d96:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019d99:	b0 01                	mov    al,0x1
c0019d9b:	eb 56                	jmp    c0019df3 <Vm::faultHandler(regs*)+0x632>
c0019d9d:	0f b6 47 05          	movzx  eax,BYTE PTR [edi+0x5]
c0019da1:	50                   	push   eax
c0019da2:	0f b6 47 04          	movzx  eax,BYTE PTR [edi+0x4]
c0019da6:	50                   	push   eax
c0019da7:	0f b6 47 03          	movzx  eax,BYTE PTR [edi+0x3]
c0019dab:	50                   	push   eax
c0019dac:	0f b6 47 02          	movzx  eax,BYTE PTR [edi+0x2]
c0019db0:	50                   	push   eax
c0019db1:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0019db5:	50                   	push   eax
c0019db6:	52                   	push   edx
c0019db7:	52                   	push   edx
c0019db8:	68 29 30 02 c0       	push   0xc0023029
c0019dbd:	e8 b5 53 ff ff       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c0019dc2:	83 c4 20             	add    esp,0x20
c0019dc5:	83 ec 0c             	sub    esp,0xc
c0019dc8:	6a 60                	push   0x60
c0019dca:	e8 98 f7 ff ff       	call   c0019567 <Vm::inbv(unsigned short)>
c0019dcf:	83 c4 10             	add    esp,0x10
c0019dd2:	3c 1c                	cmp    al,0x1c
c0019dd4:	74 04                	je     c0019dda <Vm::faultHandler(regs*)+0x619>
c0019dd6:	3c 5a                	cmp    al,0x5a
c0019dd8:	75 eb                	jne    c0019dc5 <Vm::faultHandler(regs*)+0x604>
c0019dda:	3c 1c                	cmp    al,0x1c
c0019ddc:	74 04                	je     c0019de2 <Vm::faultHandler(regs*)+0x621>
c0019dde:	3c 5a                	cmp    al,0x5a
c0019de0:	75 0f                	jne    c0019df1 <Vm::faultHandler(regs*)+0x630>
c0019de2:	83 ec 0c             	sub    esp,0xc
c0019de5:	6a 60                	push   0x60
c0019de7:	e8 7b f7 ff ff       	call   c0019567 <Vm::inbv(unsigned short)>
c0019dec:	83 c4 10             	add    esp,0x10
c0019def:	eb e9                	jmp    c0019dda <Vm::faultHandler(regs*)+0x619>
c0019df1:	31 c0                	xor    eax,eax
c0019df3:	83 c4 1c             	add    esp,0x1c
c0019df6:	5b                   	pop    ebx
c0019df7:	5e                   	pop    esi
c0019df8:	5f                   	pop    edi
c0019df9:	5d                   	pop    ebp
c0019dfa:	c3                   	ret    
c0019dfb:	90                   	nop

c0019dfc <FAT::getName()>:
c0019dfc:	b8 88 30 02 c0       	mov    eax,0xc0023088
c0019e01:	c3                   	ret    

c0019e02 <FAT::tell(void*, unsigned long long*)>:
c0019e02:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0019e07:	75 06                	jne    c0019e0f <FAT::tell(void*, unsigned long long*)+0xd>
c0019e09:	b8 04 00 00 00       	mov    eax,0x4
c0019e0e:	c3                   	ret    
c0019e0f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0019e14:	75 06                	jne    c0019e1c <FAT::tell(void*, unsigned long long*)+0x1a>
c0019e16:	b8 04 00 00 00       	mov    eax,0x4
c0019e1b:	c3                   	ret    
c0019e1c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019e20:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c0019e23:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0019e26:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019e2a:	89 01                	mov    DWORD PTR [ecx],eax
c0019e2c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019e2f:	b8 00 00 00 00       	mov    eax,0x0
c0019e34:	c3                   	ret    
c0019e35:	90                   	nop

c0019e36 <FAT::stat(void*, unsigned long long*)>:
c0019e36:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0019e3b:	75 06                	jne    c0019e43 <FAT::stat(void*, unsigned long long*)+0xd>
c0019e3d:	b8 04 00 00 00       	mov    eax,0x4
c0019e42:	c3                   	ret    
c0019e43:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0019e48:	75 06                	jne    c0019e50 <FAT::stat(void*, unsigned long long*)+0x1a>
c0019e4a:	b8 04 00 00 00       	mov    eax,0x4
c0019e4f:	c3                   	ret    
c0019e50:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019e54:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0019e57:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0019e5a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019e5e:	89 01                	mov    DWORD PTR [ecx],eax
c0019e60:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019e63:	b8 00 00 00 00       	mov    eax,0x0
c0019e68:	c3                   	ret    
c0019e69:	90                   	nop

c0019e6a <FAT::~FAT()>:
c0019e6a:	83 ec 0c             	sub    esp,0xc
c0019e6d:	ba 0c 31 02 c0       	mov    edx,0xc002310c
c0019e72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019e76:	89 10                	mov    DWORD PTR [eax],edx
c0019e78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019e7c:	83 ec 0c             	sub    esp,0xc
c0019e7f:	50                   	push   eax
c0019e80:	e8 23 56 ff ff       	call   c000f4a8 <Filesystem::~Filesystem()>
c0019e85:	83 c4 10             	add    esp,0x10
c0019e88:	90                   	nop
c0019e89:	83 c4 0c             	add    esp,0xc
c0019e8c:	c3                   	ret    
c0019e8d:	90                   	nop

c0019e8e <FAT::~FAT()>:
c0019e8e:	83 ec 0c             	sub    esp,0xc
c0019e91:	83 ec 0c             	sub    esp,0xc
c0019e94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019e98:	e8 cd ff ff ff       	call   c0019e6a <FAT::~FAT()>
c0019e9d:	83 c4 10             	add    esp,0x10
c0019ea0:	83 ec 08             	sub    esp,0x8
c0019ea3:	6a 08                	push   0x8
c0019ea5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019ea9:	e8 a3 51 ff ff       	call   c000f051 <operator delete(void*, unsigned long)>
c0019eae:	83 c4 10             	add    esp,0x10
c0019eb1:	83 c4 0c             	add    esp,0xc
c0019eb4:	c3                   	ret    
c0019eb5:	90                   	nop

c0019eb6 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0019eb6:	83 ec 1c             	sub    esp,0x1c
c0019eb9:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0019ec0:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0019ec5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019ec9:	8b 04 85 20 5a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda5e0]
c0019ed0:	83 f8 ff             	cmp    eax,0xffffffff
c0019ed3:	75 34                	jne    c0019f09 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c0019ed5:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0019ed9:	88 c2                	mov    dl,al
c0019edb:	a1 00 5a 02 c0       	mov    eax,ds:0xc0025a00
c0019ee0:	01 d0                	add    eax,edx
c0019ee2:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0019ee6:	8b 15 00 5a 02 c0    	mov    edx,DWORD PTR ds:0xc0025a00
c0019eec:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019ef0:	89 14 85 20 5a 02 c0 	mov    DWORD PTR [eax*4-0x3ffda5e0],edx
c0019ef7:	a1 00 5a 02 c0       	mov    eax,ds:0xc0025a00
c0019efc:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0019f00:	89 14 85 a0 5a 02 c0 	mov    DWORD PTR [eax*4-0x3ffda560],edx
c0019f07:	eb 17                	jmp    c0019f20 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c0019f09:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0019f0d:	88 c2                	mov    dl,al
c0019f0f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019f13:	8b 04 85 20 5a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda5e0]
c0019f1a:	01 d0                	add    eax,edx
c0019f1c:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0019f20:	83 ec 04             	sub    esp,0x4
c0019f23:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0019f27:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0019f2b:	8d 44 24 15          	lea    eax,[esp+0x15]
c0019f2f:	50                   	push   eax
c0019f30:	e8 98 cb fe ff       	call   c0006acd <f_getlabel>
c0019f35:	83 c4 10             	add    esp,0x10
c0019f38:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019f3c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0019f41:	75 07                	jne    c0019f4a <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c0019f43:	b8 00 00 00 00       	mov    eax,0x0
c0019f48:	eb 05                	jmp    c0019f4f <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c0019f4a:	b8 01 00 00 00       	mov    eax,0x1
c0019f4f:	83 c4 1c             	add    esp,0x1c
c0019f52:	c3                   	ret    
c0019f53:	90                   	nop

c0019f54 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0019f54:	57                   	push   edi
c0019f55:	83 ec 58             	sub    esp,0x58
c0019f58:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0019f60:	8d 54 24 10          	lea    edx,[esp+0x10]
c0019f64:	b8 00 00 00 00       	mov    eax,0x0
c0019f69:	b9 0f 00 00 00       	mov    ecx,0xf
c0019f6e:	fc                   	cld    
c0019f6f:	89 d7                	mov    edi,edx
c0019f71:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0019f73:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0019f77:	8b 04 85 20 5a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda5e0]
c0019f7e:	83 f8 ff             	cmp    eax,0xffffffff
c0019f81:	75 34                	jne    c0019fb7 <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c0019f83:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019f87:	88 c2                	mov    dl,al
c0019f89:	a1 00 5a 02 c0       	mov    eax,ds:0xc0025a00
c0019f8e:	01 d0                	add    eax,edx
c0019f90:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019f94:	8b 15 00 5a 02 c0    	mov    edx,DWORD PTR ds:0xc0025a00
c0019f9a:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0019f9e:	89 14 85 20 5a 02 c0 	mov    DWORD PTR [eax*4-0x3ffda5e0],edx
c0019fa5:	a1 00 5a 02 c0       	mov    eax,ds:0xc0025a00
c0019faa:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0019fae:	89 14 85 a0 5a 02 c0 	mov    DWORD PTR [eax*4-0x3ffda560],edx
c0019fb5:	eb 17                	jmp    c0019fce <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c0019fb7:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019fbb:	88 c2                	mov    dl,al
c0019fbd:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0019fc1:	8b 04 85 20 5a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda5e0]
c0019fc8:	01 d0                	add    eax,edx
c0019fca:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019fce:	83 ec 08             	sub    esp,0x8
c0019fd1:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0019fd5:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019fd9:	50                   	push   eax
c0019fda:	e8 31 68 fe ff       	call   c0000810 <strcat>
c0019fdf:	83 c4 10             	add    esp,0x10
c0019fe2:	83 ec 0c             	sub    esp,0xc
c0019fe5:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019fe9:	50                   	push   eax
c0019fea:	e8 d2 cc fe ff       	call   c0006cc1 <f_setlabel>
c0019fef:	83 c4 10             	add    esp,0x10
c0019ff2:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0019ff6:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0019ffb:	75 07                	jne    c001a004 <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c0019ffd:	b8 00 00 00 00       	mov    eax,0x0
c001a002:	eb 05                	jmp    c001a009 <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c001a004:	b8 01 00 00 00       	mov    eax,0x1
c001a009:	83 c4 58             	add    esp,0x58
c001a00c:	5f                   	pop    edi
c001a00d:	c3                   	ret    

c001a00e <FAT::format(LogicalDisk*, int, char const*, int)>:
c001a00e:	83 ec 2c             	sub    esp,0x2c
c001a011:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001a019:	83 ec 08             	sub    esp,0x8
c001a01c:	68 ac 30 02 c0       	push   0xc00230ac
c001a021:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a025:	e8 80 67 fe ff       	call   c00007aa <strcmp>
c001a02a:	83 c4 10             	add    esp,0x10
c001a02d:	85 c0                	test   eax,eax
c001a02f:	0f 94 c0             	sete   al
c001a032:	84 c0                	test   al,al
c001a034:	74 0d                	je     c001a043 <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c001a036:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001a03e:	e9 a6 00 00 00       	jmp    c001a0e9 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001a043:	83 ec 08             	sub    esp,0x8
c001a046:	68 9e 30 02 c0       	push   0xc002309e
c001a04b:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a04f:	e8 56 67 fe ff       	call   c00007aa <strcmp>
c001a054:	83 c4 10             	add    esp,0x10
c001a057:	85 c0                	test   eax,eax
c001a059:	0f 94 c0             	sete   al
c001a05c:	84 c0                	test   al,al
c001a05e:	74 0a                	je     c001a06a <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c001a060:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001a068:	eb 7f                	jmp    c001a0e9 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001a06a:	83 ec 08             	sub    esp,0x8
c001a06d:	68 a4 30 02 c0       	push   0xc00230a4
c001a072:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a076:	e8 2f 67 fe ff       	call   c00007aa <strcmp>
c001a07b:	83 c4 10             	add    esp,0x10
c001a07e:	85 c0                	test   eax,eax
c001a080:	0f 94 c0             	sete   al
c001a083:	84 c0                	test   al,al
c001a085:	74 0a                	je     c001a091 <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c001a087:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001a08f:	eb 58                	jmp    c001a0e9 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001a091:	83 ec 08             	sub    esp,0x8
c001a094:	68 2c 04 02 c0       	push   0xc002042c
c001a099:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a09d:	e8 08 67 fe ff       	call   c00007aa <strcmp>
c001a0a2:	83 c4 10             	add    esp,0x10
c001a0a5:	85 c0                	test   eax,eax
c001a0a7:	0f 94 c0             	sete   al
c001a0aa:	84 c0                	test   al,al
c001a0ac:	74 0a                	je     c001a0b8 <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c001a0ae:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001a0b6:	eb 31                	jmp    c001a0e9 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001a0b8:	83 ec 08             	sub    esp,0x8
c001a0bb:	68 aa 30 02 c0       	push   0xc00230aa
c001a0c0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a0c4:	e8 e1 66 fe ff       	call   c00007aa <strcmp>
c001a0c9:	83 c4 10             	add    esp,0x10
c001a0cc:	85 c0                	test   eax,eax
c001a0ce:	0f 94 c0             	sete   al
c001a0d1:	84 c0                	test   al,al
c001a0d3:	74 0a                	je     c001a0df <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c001a0d5:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001a0dd:	eb 0a                	jmp    c001a0e9 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001a0df:	b8 08 00 00 00       	mov    eax,0x8
c001a0e4:	e9 04 01 00 00       	jmp    c001a1ed <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001a0e9:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001a0f0:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001a0f5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a0f9:	8b 04 85 20 5a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda5e0]
c001a100:	83 f8 ff             	cmp    eax,0xffffffff
c001a103:	75 34                	jne    c001a139 <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c001a105:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001a109:	88 c2                	mov    dl,al
c001a10b:	a1 00 5a 02 c0       	mov    eax,ds:0xc0025a00
c001a110:	01 d0                	add    eax,edx
c001a112:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001a116:	8b 15 00 5a 02 c0    	mov    edx,DWORD PTR ds:0xc0025a00
c001a11c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a120:	89 14 85 20 5a 02 c0 	mov    DWORD PTR [eax*4-0x3ffda5e0],edx
c001a127:	a1 00 5a 02 c0       	mov    eax,ds:0xc0025a00
c001a12c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001a130:	89 14 85 a0 5a 02 c0 	mov    DWORD PTR [eax*4-0x3ffda560],edx
c001a137:	eb 17                	jmp    c001a150 <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c001a139:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001a13d:	88 c2                	mov    dl,al
c001a13f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a143:	8b 04 85 20 5a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda5e0]
c001a14a:	01 d0                	add    eax,edx
c001a14c:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001a150:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a154:	88 04 24             	mov    BYTE PTR [esp],al
c001a157:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001a15b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a15f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001a167:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001a16c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a174:	83 ec 0c             	sub    esp,0xc
c001a177:	68 00 20 00 00       	push   0x2000
c001a17c:	e8 88 1e ff ff       	call   c000c009 <malloc>
c001a181:	83 c4 10             	add    esp,0x10
c001a184:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a188:	68 00 20 00 00       	push   0x2000
c001a18d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a191:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a195:	50                   	push   eax
c001a196:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001a19a:	50                   	push   eax
c001a19b:	e8 6c cf fe ff       	call   c000710c <f_mkfs>
c001a1a0:	83 c4 10             	add    esp,0x10
c001a1a3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a1a7:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a1ac:	75 07                	jne    c001a1b5 <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c001a1ae:	b8 00 00 00 00       	mov    eax,0x0
c001a1b3:	eb 38                	jmp    c001a1ed <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001a1b5:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001a1ba:	75 17                	jne    c001a1d3 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c001a1bc:	83 ec 0c             	sub    esp,0xc
c001a1bf:	68 dc 30 02 c0       	push   0xc00230dc
c001a1c4:	e8 ae 4f ff ff       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c001a1c9:	83 c4 10             	add    esp,0x10
c001a1cc:	b8 09 00 00 00       	mov    eax,0x9
c001a1d1:	eb 1a                	jmp    c001a1ed <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001a1d3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a1d7:	83 ec 08             	sub    esp,0x8
c001a1da:	50                   	push   eax
c001a1db:	68 b0 30 02 c0       	push   0xc00230b0
c001a1e0:	e8 92 4f ff ff       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c001a1e5:	83 c4 10             	add    esp,0x10
c001a1e8:	b8 01 00 00 00       	mov    eax,0x1
c001a1ed:	83 c4 2c             	add    esp,0x2c
c001a1f0:	c3                   	ret    
c001a1f1:	90                   	nop

c001a1f2 <FAT::tryMount(LogicalDisk*, int)>:
c001a1f2:	81 ec 6c 03 00 00    	sub    esp,0x36c
c001a1f8:	a1 00 5a 02 c0       	mov    eax,ds:0xc0025a00
c001a1fd:	83 f8 14             	cmp    eax,0x14
c001a200:	75 17                	jne    c001a219 <FAT::tryMount(LogicalDisk*, int)+0x27>
c001a202:	83 ec 0c             	sub    esp,0xc
c001a205:	68 c2 30 02 c0       	push   0xc00230c2
c001a20a:	e8 33 b7 ff ff       	call   c0015942 <Krnl::panic(char const*)>
c001a20f:	83 c4 10             	add    esp,0x10
c001a212:	b0 00                	mov    al,0x0
c001a214:	e9 d7 01 00 00       	jmp    c001a3f0 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001a219:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001a220:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001a226:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001a22c:	3d 00 02 00 00       	cmp    eax,0x200
c001a231:	74 07                	je     c001a23a <FAT::tryMount(LogicalDisk*, int)+0x48>
c001a233:	b0 00                	mov    al,0x0
c001a235:	e9 b6 01 00 00       	jmp    c001a3f0 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001a23a:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c001a242:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001a249:	8b 04 85 20 5a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda5e0]
c001a250:	83 f8 ff             	cmp    eax,0xffffffff
c001a253:	74 07                	je     c001a25c <FAT::tryMount(LogicalDisk*, int)+0x6a>
c001a255:	b0 01                	mov    al,0x1
c001a257:	e9 94 01 00 00       	jmp    c001a3f0 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001a25c:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c001a266:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c001a26e:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c001a275:	88 c2                	mov    dl,al
c001a277:	a1 00 5a 02 c0       	mov    eax,ds:0xc0025a00
c001a27c:	01 d0                	add    eax,edx
c001a27e:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c001a285:	8b 15 00 5a 02 c0    	mov    edx,DWORD PTR ds:0xc0025a00
c001a28b:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001a292:	89 14 85 20 5a 02 c0 	mov    DWORD PTR [eax*4-0x3ffda5e0],edx
c001a299:	a1 00 5a 02 c0       	mov    eax,ds:0xc0025a00
c001a29e:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c001a2a5:	89 14 85 a0 5a 02 c0 	mov    DWORD PTR [eax*4-0x3ffda560],edx
c001a2ac:	83 ec 0c             	sub    esp,0xc
c001a2af:	68 54 02 00 00       	push   0x254
c001a2b4:	e8 50 1d ff ff       	call   c000c009 <malloc>
c001a2b9:	83 c4 10             	add    esp,0x10
c001a2bc:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c001a2c3:	83 ec 04             	sub    esp,0x4
c001a2c6:	6a 00                	push   0x0
c001a2c8:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001a2cf:	50                   	push   eax
c001a2d0:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001a2d7:	e8 1f aa fe ff       	call   c0004cfb <f_mount>
c001a2dc:	83 c4 10             	add    esp,0x10
c001a2df:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001a2e6:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c001a2ee:	74 19                	je     c001a309 <FAT::tryMount(LogicalDisk*, int)+0x117>
c001a2f0:	83 ec 0c             	sub    esp,0xc
c001a2f3:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001a2fa:	e8 2a 1d ff ff       	call   c000c029 <rfree>
c001a2ff:	83 c4 10             	add    esp,0x10
c001a302:	b0 00                	mov    al,0x0
c001a304:	e9 e7 00 00 00       	jmp    c001a3f0 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001a309:	83 ec 04             	sub    esp,0x4
c001a30c:	68 00 01 00 00       	push   0x100
c001a311:	6a 00                	push   0x0
c001a313:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001a31a:	50                   	push   eax
c001a31b:	e8 9a 63 fe ff       	call   c00006ba <memset>
c001a320:	83 c4 10             	add    esp,0x10
c001a323:	83 ec 08             	sub    esp,0x8
c001a326:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001a32d:	50                   	push   eax
c001a32e:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001a335:	50                   	push   eax
c001a336:	e8 d5 64 fe ff       	call   c0000810 <strcat>
c001a33b:	83 c4 10             	add    esp,0x10
c001a33e:	83 ec 08             	sub    esp,0x8
c001a341:	68 d0 30 02 c0       	push   0xc00230d0
c001a346:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001a34d:	50                   	push   eax
c001a34e:	e8 bd 64 fe ff       	call   c0000810 <strcat>
c001a353:	83 c4 10             	add    esp,0x10
c001a356:	83 ec 04             	sub    esp,0x4
c001a359:	6a 01                	push   0x1
c001a35b:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c001a362:	50                   	push   eax
c001a363:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001a367:	50                   	push   eax
c001a368:	e8 f0 a9 fe ff       	call   c0004d5d <f_open>
c001a36d:	83 c4 10             	add    esp,0x10
c001a370:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001a377:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001a37e:	85 c0                	test   eax,eax
c001a380:	74 0a                	je     c001a38c <FAT::tryMount(LogicalDisk*, int)+0x19a>
c001a382:	78 2d                	js     c001a3b1 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c001a384:	83 e8 04             	sub    eax,0x4
c001a387:	83 f8 01             	cmp    eax,0x1
c001a38a:	77 25                	ja     c001a3b1 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c001a38c:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c001a394:	83 ec 0c             	sub    esp,0xc
c001a397:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001a39b:	50                   	push   eax
c001a39c:	e8 0e b5 fe ff       	call   c00058af <f_close>
c001a3a1:	83 c4 10             	add    esp,0x10
c001a3a4:	90                   	nop
c001a3a5:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c001a3ad:	74 3a                	je     c001a3e9 <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c001a3af:	eb 2d                	jmp    c001a3de <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c001a3b1:	83 ec 0c             	sub    esp,0xc
c001a3b4:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001a3bb:	e8 69 1c ff ff       	call   c000c029 <rfree>
c001a3c0:	83 c4 10             	add    esp,0x10
c001a3c3:	83 ec 04             	sub    esp,0x4
c001a3c6:	6a 00                	push   0x0
c001a3c8:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001a3cf:	50                   	push   eax
c001a3d0:	6a 00                	push   0x0
c001a3d2:	e8 24 a9 fe ff       	call   c0004cfb <f_mount>
c001a3d7:	83 c4 10             	add    esp,0x10
c001a3da:	b0 00                	mov    al,0x0
c001a3dc:	eb 12                	jmp    c001a3f0 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001a3de:	a1 00 5a 02 c0       	mov    eax,ds:0xc0025a00
c001a3e3:	40                   	inc    eax
c001a3e4:	a3 00 5a 02 c0       	mov    ds:0xc0025a00,eax
c001a3e9:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c001a3f0:	81 c4 6c 03 00 00    	add    esp,0x36c
c001a3f6:	c3                   	ret    
c001a3f7:	90                   	nop

c001a3f8 <FAT::readDir(void*, unsigned long, void*, int*)>:
c001a3f8:	81 ec 3c 02 00 00    	sub    esp,0x23c
c001a3fe:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c001a406:	74 0a                	je     c001a412 <FAT::readDir(void*, unsigned long, void*, int*)+0x1a>
c001a408:	83 bc 24 50 02 00 00 00 	cmp    DWORD PTR [esp+0x250],0x0
c001a410:	75 0a                	jne    c001a41c <FAT::readDir(void*, unsigned long, void*, int*)+0x24>
c001a412:	b8 04 00 00 00       	mov    eax,0x4
c001a417:	e9 dd 00 00 00       	jmp    c001a4f9 <FAT::readDir(void*, unsigned long, void*, int*)+0x101>
c001a41c:	83 ec 08             	sub    esp,0x8
c001a41f:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001a426:	50                   	push   eax
c001a427:	ff b4 24 50 02 00 00 	push   DWORD PTR [esp+0x250]
c001a42e:	e8 34 ba fe ff       	call   c0005e67 <f_readdir>
c001a433:	83 c4 10             	add    esp,0x10
c001a436:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c001a43d:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001a443:	83 ec 0c             	sub    esp,0xc
c001a446:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001a44d:	83 c0 1a             	add    eax,0x1a
c001a450:	50                   	push   eax
c001a451:	e8 81 62 fe ff       	call   c00006d7 <strlen>
c001a456:	83 c4 10             	add    esp,0x10
c001a459:	ba 00 00 00 00       	mov    edx,0x0
c001a45e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a462:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001a466:	8a 84 24 1c 01 00 00 	mov    al,BYTE PTR [esp+0x11c]
c001a46d:	25 ff 00 00 00       	and    eax,0xff
c001a472:	83 e0 10             	and    eax,0x10
c001a475:	74 07                	je     c001a47e <FAT::readDir(void*, unsigned long, void*, int*)+0x86>
c001a477:	b8 02 00 00 00       	mov    eax,0x2
c001a47c:	eb 05                	jmp    c001a483 <FAT::readDir(void*, unsigned long, void*, int*)+0x8b>
c001a47e:	b8 01 00 00 00       	mov    eax,0x1
c001a483:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a487:	83 ec 08             	sub    esp,0x8
c001a48a:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001a491:	83 c0 1a             	add    eax,0x1a
c001a494:	50                   	push   eax
c001a495:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001a499:	83 c0 10             	add    eax,0x10
c001a49c:	50                   	push   eax
c001a49d:	e8 b7 62 fe ff       	call   c0000759 <strcpy>
c001a4a2:	83 c4 10             	add    esp,0x10
c001a4a5:	83 ec 04             	sub    esp,0x4
c001a4a8:	ff b4 24 4c 02 00 00 	push   DWORD PTR [esp+0x24c]
c001a4af:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a4b3:	50                   	push   eax
c001a4b4:	ff b4 24 58 02 00 00 	push   DWORD PTR [esp+0x258]
c001a4bb:	e8 c4 61 fe ff       	call   c0000684 <memcpy>
c001a4c0:	83 c4 10             	add    esp,0x10
c001a4c3:	8b 84 24 50 02 00 00 	mov    eax,DWORD PTR [esp+0x250]
c001a4ca:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001a4d0:	8a 84 24 2a 01 00 00 	mov    al,BYTE PTR [esp+0x12a]
c001a4d7:	84 c0                	test   al,al
c001a4d9:	75 07                	jne    c001a4e2 <FAT::readDir(void*, unsigned long, void*, int*)+0xea>
c001a4db:	b8 07 00 00 00       	mov    eax,0x7
c001a4e0:	eb 17                	jmp    c001a4f9 <FAT::readDir(void*, unsigned long, void*, int*)+0x101>
c001a4e2:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c001a4e9:	85 c0                	test   eax,eax
c001a4eb:	75 07                	jne    c001a4f4 <FAT::readDir(void*, unsigned long, void*, int*)+0xfc>
c001a4ed:	b8 00 00 00 00       	mov    eax,0x0
c001a4f2:	eb 05                	jmp    c001a4f9 <FAT::readDir(void*, unsigned long, void*, int*)+0x101>
c001a4f4:	b8 01 00 00 00       	mov    eax,0x1
c001a4f9:	81 c4 3c 02 00 00    	add    esp,0x23c
c001a4ff:	c3                   	ret    

c001a500 <FAT::read(void*, unsigned long, void*, int*)>:
c001a500:	83 ec 1c             	sub    esp,0x1c
c001a503:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001a508:	74 07                	je     c001a511 <FAT::read(void*, unsigned long, void*, int*)+0x11>
c001a50a:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001a50f:	75 07                	jne    c001a518 <FAT::read(void*, unsigned long, void*, int*)+0x18>
c001a511:	b8 04 00 00 00       	mov    eax,0x4
c001a516:	eb 3d                	jmp    c001a555 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c001a518:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a51c:	50                   	push   eax
c001a51d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a521:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001a525:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a529:	e8 6b ac fe ff       	call   c0005199 <f_read>
c001a52e:	83 c4 10             	add    esp,0x10
c001a531:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a535:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a539:	89 c2                	mov    edx,eax
c001a53b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a53f:	89 10                	mov    DWORD PTR [eax],edx
c001a541:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a545:	85 c0                	test   eax,eax
c001a547:	75 07                	jne    c001a550 <FAT::read(void*, unsigned long, void*, int*)+0x50>
c001a549:	b8 00 00 00 00       	mov    eax,0x0
c001a54e:	eb 05                	jmp    c001a555 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c001a550:	b8 01 00 00 00       	mov    eax,0x1
c001a555:	83 c4 1c             	add    esp,0x1c
c001a558:	c3                   	ret    
c001a559:	90                   	nop

c001a55a <FAT::write(void*, unsigned long, void*, int*)>:
c001a55a:	83 ec 1c             	sub    esp,0x1c
c001a55d:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001a562:	74 07                	je     c001a56b <FAT::write(void*, unsigned long, void*, int*)+0x11>
c001a564:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001a569:	75 07                	jne    c001a572 <FAT::write(void*, unsigned long, void*, int*)+0x18>
c001a56b:	b8 04 00 00 00       	mov    eax,0x4
c001a570:	eb 3d                	jmp    c001a5af <FAT::write(void*, unsigned long, void*, int*)+0x55>
c001a572:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a576:	50                   	push   eax
c001a577:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a57b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001a57f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a583:	e8 91 ae fe ff       	call   c0005419 <f_write>
c001a588:	83 c4 10             	add    esp,0x10
c001a58b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a58f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a593:	89 c2                	mov    edx,eax
c001a595:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a599:	89 10                	mov    DWORD PTR [eax],edx
c001a59b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a59f:	85 c0                	test   eax,eax
c001a5a1:	75 07                	jne    c001a5aa <FAT::write(void*, unsigned long, void*, int*)+0x50>
c001a5a3:	b8 00 00 00 00       	mov    eax,0x0
c001a5a8:	eb 05                	jmp    c001a5af <FAT::write(void*, unsigned long, void*, int*)+0x55>
c001a5aa:	b8 01 00 00 00       	mov    eax,0x1
c001a5af:	83 c4 1c             	add    esp,0x1c
c001a5b2:	c3                   	ret    
c001a5b3:	90                   	nop

c001a5b4 <FAT::close(void*)>:
c001a5b4:	83 ec 1c             	sub    esp,0x1c
c001a5b7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001a5bc:	75 07                	jne    c001a5c5 <FAT::close(void*)+0x11>
c001a5be:	b8 04 00 00 00       	mov    eax,0x4
c001a5c3:	eb 36                	jmp    c001a5fb <FAT::close(void*)+0x47>
c001a5c5:	83 ec 0c             	sub    esp,0xc
c001a5c8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a5cc:	e8 de b2 fe ff       	call   c00058af <f_close>
c001a5d1:	83 c4 10             	add    esp,0x10
c001a5d4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a5d8:	83 ec 0c             	sub    esp,0xc
c001a5db:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a5df:	e8 35 1a ff ff       	call   c000c019 <free>
c001a5e4:	83 c4 10             	add    esp,0x10
c001a5e7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a5eb:	85 c0                	test   eax,eax
c001a5ed:	75 07                	jne    c001a5f6 <FAT::close(void*)+0x42>
c001a5ef:	b8 00 00 00 00       	mov    eax,0x0
c001a5f4:	eb 05                	jmp    c001a5fb <FAT::close(void*)+0x47>
c001a5f6:	b8 01 00 00 00       	mov    eax,0x1
c001a5fb:	83 c4 1c             	add    esp,0x1c
c001a5fe:	c3                   	ret    
c001a5ff:	90                   	nop

c001a600 <FAT::closeDir(void*)>:
c001a600:	83 ec 1c             	sub    esp,0x1c
c001a603:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001a608:	75 07                	jne    c001a611 <FAT::closeDir(void*)+0x11>
c001a60a:	b8 04 00 00 00       	mov    eax,0x4
c001a60f:	eb 36                	jmp    c001a647 <FAT::closeDir(void*)+0x47>
c001a611:	83 ec 0c             	sub    esp,0xc
c001a614:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a618:	e8 28 b8 fe ff       	call   c0005e45 <f_closedir>
c001a61d:	83 c4 10             	add    esp,0x10
c001a620:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a624:	83 ec 0c             	sub    esp,0xc
c001a627:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a62b:	e8 e9 19 ff ff       	call   c000c019 <free>
c001a630:	83 c4 10             	add    esp,0x10
c001a633:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a637:	85 c0                	test   eax,eax
c001a639:	75 07                	jne    c001a642 <FAT::closeDir(void*)+0x42>
c001a63b:	b8 00 00 00 00       	mov    eax,0x0
c001a640:	eb 05                	jmp    c001a647 <FAT::closeDir(void*)+0x47>
c001a642:	b8 01 00 00 00       	mov    eax,0x1
c001a647:	83 c4 1c             	add    esp,0x1c
c001a64a:	c3                   	ret    
c001a64b:	90                   	nop

c001a64c <FAT::seek(void*, unsigned long long)>:
c001a64c:	83 ec 2c             	sub    esp,0x2c
c001a64f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a653:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a657:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001a65b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a65f:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001a664:	75 07                	jne    c001a66d <FAT::seek(void*, unsigned long long)+0x21>
c001a666:	b8 04 00 00 00       	mov    eax,0x4
c001a66b:	eb 2f                	jmp    c001a69c <FAT::seek(void*, unsigned long long)+0x50>
c001a66d:	83 ec 04             	sub    esp,0x4
c001a670:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001a674:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001a678:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001a67c:	e8 5d b2 fe ff       	call   c00058de <f_lseek>
c001a681:	83 c4 10             	add    esp,0x10
c001a684:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a688:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a68c:	85 c0                	test   eax,eax
c001a68e:	75 07                	jne    c001a697 <FAT::seek(void*, unsigned long long)+0x4b>
c001a690:	b8 00 00 00 00       	mov    eax,0x0
c001a695:	eb 05                	jmp    c001a69c <FAT::seek(void*, unsigned long long)+0x50>
c001a697:	b8 01 00 00 00       	mov    eax,0x1
c001a69c:	83 c4 2c             	add    esp,0x2c
c001a69f:	c3                   	ret    

c001a6a0 <fatWrapperReadDisk>:
c001a6a0:	83 ec 1c             	sub    esp,0x1c
c001a6a3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a6a7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a6ab:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a6af:	89 04 24             	mov    DWORD PTR [esp],eax
c001a6b2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001a6b6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a6ba:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a6be:	25 ff 00 00 00       	and    eax,0xff
c001a6c3:	8b 04 85 80 4b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb480]
c001a6ca:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001a6ce:	83 ec 0c             	sub    esp,0xc
c001a6d1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a6d5:	52                   	push   edx
c001a6d6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a6da:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a6de:	50                   	push   eax
c001a6df:	e8 ee 80 ff ff       	call   c00127d2 <LogicalDisk::read(unsigned long long, int, void*)>
c001a6e4:	83 c4 20             	add    esp,0x20
c001a6e7:	83 c4 1c             	add    esp,0x1c
c001a6ea:	c3                   	ret    

c001a6eb <fatWrapperWriteDisk>:
c001a6eb:	83 ec 1c             	sub    esp,0x1c
c001a6ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a6f2:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a6f6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a6fa:	89 04 24             	mov    DWORD PTR [esp],eax
c001a6fd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001a701:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a705:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a709:	25 ff 00 00 00       	and    eax,0xff
c001a70e:	8b 04 85 80 4b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb480]
c001a715:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001a719:	83 ec 0c             	sub    esp,0xc
c001a71c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a720:	52                   	push   edx
c001a721:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a725:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a729:	50                   	push   eax
c001a72a:	e8 0f 81 ff ff       	call   c001283e <LogicalDisk::write(unsigned long long, int, void*)>
c001a72f:	83 c4 20             	add    esp,0x20
c001a732:	83 c4 1c             	add    esp,0x1c
c001a735:	c3                   	ret    

c001a736 <fatWrapperIoctl>:
c001a736:	53                   	push   ebx
c001a737:	83 ec 28             	sub    esp,0x28
c001a73a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001a73e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a742:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001a746:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001a74a:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c001a74f:	75 35                	jne    c001a786 <fatWrapperIoctl+0x50>
c001a751:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a755:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a759:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a75d:	25 ff 00 00 00       	and    eax,0xff
c001a762:	8b 04 85 80 4b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb480]
c001a769:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001a76f:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001a775:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a779:	66 89 02             	mov    WORD PTR [edx],ax
c001a77c:	b8 00 00 00 00       	mov    eax,0x0
c001a781:	e9 bb 00 00 00       	jmp    c001a841 <fatWrapperIoctl+0x10b>
c001a786:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001a78b:	75 73                	jne    c001a800 <fatWrapperIoctl+0xca>
c001a78d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a791:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a795:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a799:	25 ff 00 00 00       	and    eax,0xff
c001a79e:	8b 04 85 80 4b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb480]
c001a7a5:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001a7ab:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001a7b1:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001a7b7:	89 c8                	mov    eax,ecx
c001a7b9:	89 da                	mov    edx,ebx
c001a7bb:	0f a4 c2 0a          	shld   edx,eax,0xa
c001a7bf:	c1 e0 0a             	shl    eax,0xa
c001a7c2:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001a7c6:	81 e1 ff 00 00 00    	and    ecx,0xff
c001a7cc:	8b 0c 8d 80 4b 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb480]
c001a7d3:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001a7d9:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001a7df:	89 cb                	mov    ebx,ecx
c001a7e1:	c1 fb 1f             	sar    ebx,0x1f
c001a7e4:	53                   	push   ebx
c001a7e5:	51                   	push   ecx
c001a7e6:	52                   	push   edx
c001a7e7:	50                   	push   eax
c001a7e8:	e8 df 4b 00 00       	call   c001f3cc <__udivdi3>
c001a7ed:	83 c4 10             	add    esp,0x10
c001a7f0:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001a7f4:	89 01                	mov    DWORD PTR [ecx],eax
c001a7f6:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001a7f9:	b8 00 00 00 00       	mov    eax,0x0
c001a7fe:	eb 41                	jmp    c001a841 <fatWrapperIoctl+0x10b>
c001a800:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001a805:	75 07                	jne    c001a80e <fatWrapperIoctl+0xd8>
c001a807:	b8 00 00 00 00       	mov    eax,0x0
c001a80c:	eb 33                	jmp    c001a841 <fatWrapperIoctl+0x10b>
c001a80e:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c001a813:	75 19                	jne    c001a82e <fatWrapperIoctl+0xf8>
c001a815:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a819:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a81d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a821:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001a827:	b8 00 00 00 00       	mov    eax,0x0
c001a82c:	eb 13                	jmp    c001a841 <fatWrapperIoctl+0x10b>
c001a82e:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c001a833:	75 07                	jne    c001a83c <fatWrapperIoctl+0x106>
c001a835:	b8 00 00 00 00       	mov    eax,0x0
c001a83a:	eb 05                	jmp    c001a841 <fatWrapperIoctl+0x10b>
c001a83c:	b8 04 00 00 00       	mov    eax,0x4
c001a841:	83 c4 28             	add    esp,0x28
c001a844:	5b                   	pop    ebx
c001a845:	c3                   	ret    

c001a846 <FAT::FAT()>:
c001a846:	83 ec 1c             	sub    esp,0x1c
c001a849:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a84d:	83 ec 0c             	sub    esp,0xc
c001a850:	50                   	push   eax
c001a851:	e8 2e 4c ff ff       	call   c000f484 <Filesystem::Filesystem()>
c001a856:	83 c4 10             	add    esp,0x10
c001a859:	ba 0c 31 02 c0       	mov    edx,0xc002310c
c001a85e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a862:	89 10                	mov    DWORD PTR [eax],edx
c001a864:	c7 05 00 5a 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025a00,0x0
c001a86e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a876:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001a87b:	7f 15                	jg     c001a892 <FAT::FAT()+0x4c>
c001a87d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a881:	c7 04 85 20 5a 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffda5e0],0xffffffff
c001a88c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001a890:	eb e4                	jmp    c001a876 <FAT::FAT()+0x30>
c001a892:	90                   	nop
c001a893:	83 c4 1c             	add    esp,0x1c
c001a896:	c3                   	ret    
c001a897:	90                   	nop

c001a898 <FAT::fixFilepath(char*)>:
c001a898:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a89c:	8a 00                	mov    al,BYTE PTR [eax]
c001a89e:	3c 40                	cmp    al,0x40
c001a8a0:	7e 2c                	jle    c001a8ce <FAT::fixFilepath(char*)+0x36>
c001a8a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a8a6:	8a 00                	mov    al,BYTE PTR [eax]
c001a8a8:	83 e8 41             	sub    eax,0x41
c001a8ab:	88 c2                	mov    dl,al
c001a8ad:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a8b1:	88 10                	mov    BYTE PTR [eax],dl
c001a8b3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a8b7:	8a 00                	mov    al,BYTE PTR [eax]
c001a8b9:	0f be c0             	movsx  eax,al
c001a8bc:	8b 04 85 20 5a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda5e0]
c001a8c3:	83 c0 30             	add    eax,0x30
c001a8c6:	88 c2                	mov    dl,al
c001a8c8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a8cc:	88 10                	mov    BYTE PTR [eax],dl
c001a8ce:	90                   	nop
c001a8cf:	c3                   	ret    

c001a8d0 <FAT::open(char const*, void**, FileOpenMode)>:
c001a8d0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a8d6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001a8de:	74 0a                	je     c001a8ea <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c001a8e0:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001a8e8:	75 0a                	jne    c001a8f4 <FAT::open(char const*, void**, FileOpenMode)+0x24>
c001a8ea:	b8 04 00 00 00       	mov    eax,0x4
c001a8ef:	e9 00 01 00 00       	jmp    c001a9f4 <FAT::open(char const*, void**, FileOpenMode)+0x124>
c001a8f4:	83 ec 08             	sub    esp,0x8
c001a8f7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a8fe:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a902:	50                   	push   eax
c001a903:	e8 51 5e fe ff       	call   c0000759 <strcpy>
c001a908:	83 c4 10             	add    esp,0x10
c001a90b:	83 ec 08             	sub    esp,0x8
c001a90e:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a912:	50                   	push   eax
c001a913:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a91a:	e8 79 ff ff ff       	call   c001a898 <FAT::fixFilepath(char*)>
c001a91f:	83 c4 10             	add    esp,0x10
c001a922:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001a92a:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001a931:	83 e0 01             	and    eax,0x1
c001a934:	74 08                	je     c001a93e <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c001a936:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c001a93e:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001a945:	83 e0 04             	and    eax,0x4
c001a948:	74 10                	je     c001a95a <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c001a94a:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c001a952:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001a95a:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001a961:	83 e0 02             	and    eax,0x2
c001a964:	74 08                	je     c001a96e <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c001a966:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001a96e:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001a975:	83 e0 08             	and    eax,0x8
c001a978:	74 08                	je     c001a982 <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c001a97a:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c001a982:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001a989:	83 e0 10             	and    eax,0x10
c001a98c:	74 08                	je     c001a996 <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c001a98e:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c001a996:	83 ec 0c             	sub    esp,0xc
c001a999:	68 50 02 00 00       	push   0x250
c001a99e:	e8 66 16 ff ff       	call   c000c009 <malloc>
c001a9a3:	83 c4 10             	add    esp,0x10
c001a9a6:	89 c2                	mov    edx,eax
c001a9a8:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001a9af:	89 10                	mov    DWORD PTR [eax],edx
c001a9b1:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001a9b8:	31 d2                	xor    edx,edx
c001a9ba:	88 c2                	mov    dl,al
c001a9bc:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001a9c3:	8b 00                	mov    eax,DWORD PTR [eax]
c001a9c5:	83 ec 04             	sub    esp,0x4
c001a9c8:	52                   	push   edx
c001a9c9:	8d 54 24 10          	lea    edx,[esp+0x10]
c001a9cd:	52                   	push   edx
c001a9ce:	50                   	push   eax
c001a9cf:	e8 89 a3 fe ff       	call   c0004d5d <f_open>
c001a9d4:	83 c4 10             	add    esp,0x10
c001a9d7:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001a9de:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001a9e6:	74 07                	je     c001a9ef <FAT::open(char const*, void**, FileOpenMode)+0x11f>
c001a9e8:	b8 01 00 00 00       	mov    eax,0x1
c001a9ed:	eb 05                	jmp    c001a9f4 <FAT::open(char const*, void**, FileOpenMode)+0x124>
c001a9ef:	b8 00 00 00 00       	mov    eax,0x0
c001a9f4:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a9fa:	c3                   	ret    
c001a9fb:	90                   	nop

c001a9fc <FAT::openDir(char const*, void**)>:
c001a9fc:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001aa02:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001aa0a:	74 0a                	je     c001aa16 <FAT::openDir(char const*, void**)+0x1a>
c001aa0c:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001aa14:	75 07                	jne    c001aa1d <FAT::openDir(char const*, void**)+0x21>
c001aa16:	b8 04 00 00 00       	mov    eax,0x4
c001aa1b:	eb 7d                	jmp    c001aa9a <FAT::openDir(char const*, void**)+0x9e>
c001aa1d:	83 ec 08             	sub    esp,0x8
c001aa20:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001aa27:	8d 44 24 18          	lea    eax,[esp+0x18]
c001aa2b:	50                   	push   eax
c001aa2c:	e8 28 5d fe ff       	call   c0000759 <strcpy>
c001aa31:	83 c4 10             	add    esp,0x10
c001aa34:	83 ec 08             	sub    esp,0x8
c001aa37:	8d 44 24 14          	lea    eax,[esp+0x14]
c001aa3b:	50                   	push   eax
c001aa3c:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001aa43:	e8 50 fe ff ff       	call   c001a898 <FAT::fixFilepath(char*)>
c001aa48:	83 c4 10             	add    esp,0x10
c001aa4b:	83 ec 0c             	sub    esp,0xc
c001aa4e:	6a 4c                	push   0x4c
c001aa50:	e8 b4 15 ff ff       	call   c000c009 <malloc>
c001aa55:	83 c4 10             	add    esp,0x10
c001aa58:	89 c2                	mov    edx,eax
c001aa5a:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001aa61:	89 10                	mov    DWORD PTR [eax],edx
c001aa63:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001aa6a:	8b 00                	mov    eax,DWORD PTR [eax]
c001aa6c:	83 ec 08             	sub    esp,0x8
c001aa6f:	8d 54 24 14          	lea    edx,[esp+0x14]
c001aa73:	52                   	push   edx
c001aa74:	50                   	push   eax
c001aa75:	e8 c9 b2 fe ff       	call   c0005d43 <f_opendir>
c001aa7a:	83 c4 10             	add    esp,0x10
c001aa7d:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001aa84:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001aa8c:	74 07                	je     c001aa95 <FAT::openDir(char const*, void**)+0x99>
c001aa8e:	b8 01 00 00 00       	mov    eax,0x1
c001aa93:	eb 05                	jmp    c001aa9a <FAT::openDir(char const*, void**)+0x9e>
c001aa95:	b8 00 00 00 00       	mov    eax,0x0
c001aa9a:	81 c4 1c 01 00 00    	add    esp,0x11c
c001aaa0:	c3                   	ret    
c001aaa1:	90                   	nop

c001aaa2 <FAT::stat(char const*, unsigned long long*, bool*)>:
c001aaa2:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001aaa8:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001aab0:	75 0a                	jne    c001aabc <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c001aab2:	b8 04 00 00 00       	mov    eax,0x4
c001aab7:	e9 cb 00 00 00       	jmp    c001ab87 <FAT::stat(char const*, unsigned long long*, bool*)+0xe5>
c001aabc:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001aac4:	75 0a                	jne    c001aad0 <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c001aac6:	b8 04 00 00 00       	mov    eax,0x4
c001aacb:	e9 b7 00 00 00       	jmp    c001ab87 <FAT::stat(char const*, unsigned long long*, bool*)+0xe5>
c001aad0:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001aad8:	75 0a                	jne    c001aae4 <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c001aada:	b8 04 00 00 00       	mov    eax,0x4
c001aadf:	e9 a3 00 00 00       	jmp    c001ab87 <FAT::stat(char const*, unsigned long long*, bool*)+0xe5>
c001aae4:	83 ec 08             	sub    esp,0x8
c001aae7:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001aaee:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001aaf5:	50                   	push   eax
c001aaf6:	e8 5e 5c fe ff       	call   c0000759 <strcpy>
c001aafb:	83 c4 10             	add    esp,0x10
c001aafe:	83 ec 08             	sub    esp,0x8
c001ab01:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001ab08:	50                   	push   eax
c001ab09:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001ab10:	e8 83 fd ff ff       	call   c001a898 <FAT::fixFilepath(char*)>
c001ab15:	83 c4 10             	add    esp,0x10
c001ab18:	83 ec 08             	sub    esp,0x8
c001ab1b:	8d 44 24 08          	lea    eax,[esp+0x8]
c001ab1f:	50                   	push   eax
c001ab20:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001ab27:	50                   	push   eax
c001ab28:	e8 d5 b3 fe ff       	call   c0005f02 <f_stat>
c001ab2d:	83 c4 10             	add    esp,0x10
c001ab30:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001ab37:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001ab3e:	85 c0                	test   eax,eax
c001ab40:	74 07                	je     c001ab49 <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c001ab42:	83 f8 04             	cmp    eax,0x4
c001ab45:	74 34                	je     c001ab7b <FAT::stat(char const*, unsigned long long*, bool*)+0xd9>
c001ab47:	eb 39                	jmp    c001ab82 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c001ab49:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001ab4d:	25 ff 00 00 00       	and    eax,0xff
c001ab52:	83 e0 10             	and    eax,0x10
c001ab55:	0f 95 c2             	setne  dl
c001ab58:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001ab5f:	88 10                	mov    BYTE PTR [eax],dl
c001ab61:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001ab64:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ab68:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001ab6f:	89 01                	mov    DWORD PTR [ecx],eax
c001ab71:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001ab74:	b8 00 00 00 00       	mov    eax,0x0
c001ab79:	eb 0c                	jmp    c001ab87 <FAT::stat(char const*, unsigned long long*, bool*)+0xe5>
c001ab7b:	b8 02 00 00 00       	mov    eax,0x2
c001ab80:	eb 05                	jmp    c001ab87 <FAT::stat(char const*, unsigned long long*, bool*)+0xe5>
c001ab82:	b8 01 00 00 00       	mov    eax,0x1
c001ab87:	81 c4 2c 02 00 00    	add    esp,0x22c
c001ab8d:	c3                   	ret    

c001ab8e <FAT::unlink(char const*)>:
c001ab8e:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001ab94:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001ab9c:	75 07                	jne    c001aba5 <FAT::unlink(char const*)+0x17>
c001ab9e:	b8 04 00 00 00       	mov    eax,0x4
c001aba3:	eb 5c                	jmp    c001ac01 <FAT::unlink(char const*)+0x73>
c001aba5:	83 ec 08             	sub    esp,0x8
c001aba8:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001abaf:	8d 44 24 18          	lea    eax,[esp+0x18]
c001abb3:	50                   	push   eax
c001abb4:	e8 a0 5b fe ff       	call   c0000759 <strcpy>
c001abb9:	83 c4 10             	add    esp,0x10
c001abbc:	83 ec 08             	sub    esp,0x8
c001abbf:	8d 44 24 14          	lea    eax,[esp+0x14]
c001abc3:	50                   	push   eax
c001abc4:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001abcb:	e8 c8 fc ff ff       	call   c001a898 <FAT::fixFilepath(char*)>
c001abd0:	83 c4 10             	add    esp,0x10
c001abd3:	83 ec 0c             	sub    esp,0xc
c001abd6:	8d 44 24 18          	lea    eax,[esp+0x18]
c001abda:	50                   	push   eax
c001abdb:	e8 91 b6 fe ff       	call   c0006271 <f_unlink>
c001abe0:	83 c4 10             	add    esp,0x10
c001abe3:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001abea:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001abf1:	85 c0                	test   eax,eax
c001abf3:	75 07                	jne    c001abfc <FAT::unlink(char const*)+0x6e>
c001abf5:	b8 00 00 00 00       	mov    eax,0x0
c001abfa:	eb 05                	jmp    c001ac01 <FAT::unlink(char const*)+0x73>
c001abfc:	b8 01 00 00 00       	mov    eax,0x1
c001ac01:	81 c4 1c 01 00 00    	add    esp,0x11c
c001ac07:	c3                   	ret    

c001ac08 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001ac08:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001ac0e:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c001ac15:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c001ac1c:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001ac20:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001ac24:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001ac2c:	75 0a                	jne    c001ac38 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001ac2e:	b8 04 00 00 00       	mov    eax,0x4
c001ac33:	e9 43 01 00 00       	jmp    c001ad7b <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x173>
c001ac38:	83 ec 08             	sub    esp,0x8
c001ac3b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001ac42:	8d 44 24 24          	lea    eax,[esp+0x24]
c001ac46:	50                   	push   eax
c001ac47:	e8 0d 5b fe ff       	call   c0000759 <strcpy>
c001ac4c:	83 c4 10             	add    esp,0x10
c001ac4f:	83 ec 08             	sub    esp,0x8
c001ac52:	8d 44 24 20          	lea    eax,[esp+0x20]
c001ac56:	50                   	push   eax
c001ac57:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001ac5e:	e8 35 fc ff ff       	call   c001a898 <FAT::fixFilepath(char*)>
c001ac63:	83 c4 10             	add    esp,0x10
c001ac66:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001ac6e:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001ac76:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001ac7a:	25 ff 00 00 00       	and    eax,0xff
c001ac7f:	83 e0 01             	and    eax,0x1
c001ac82:	74 08                	je     c001ac8c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x84>
c001ac84:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c001ac8c:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001ac90:	25 ff 00 00 00       	and    eax,0xff
c001ac95:	83 e0 02             	and    eax,0x2
c001ac98:	74 08                	je     c001aca2 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x9a>
c001ac9a:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c001aca2:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001aca6:	25 ff 00 00 00       	and    eax,0xff
c001acab:	83 e0 04             	and    eax,0x4
c001acae:	74 08                	je     c001acb8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb0>
c001acb0:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c001acb8:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001acbc:	25 ff 00 00 00       	and    eax,0xff
c001acc1:	83 e0 08             	and    eax,0x8
c001acc4:	74 08                	je     c001acce <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc6>
c001acc6:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c001acce:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001acd2:	25 ff 00 00 00       	and    eax,0xff
c001acd7:	83 e0 01             	and    eax,0x1
c001acda:	74 08                	je     c001ace4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xdc>
c001acdc:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c001ace4:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001ace8:	25 ff 00 00 00       	and    eax,0xff
c001aced:	83 e0 02             	and    eax,0x2
c001acf0:	74 08                	je     c001acfa <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xf2>
c001acf2:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c001acfa:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001acfe:	25 ff 00 00 00       	and    eax,0xff
c001ad03:	83 e0 04             	and    eax,0x4
c001ad06:	74 08                	je     c001ad10 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x108>
c001ad08:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c001ad10:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001ad14:	25 ff 00 00 00       	and    eax,0xff
c001ad19:	83 e0 08             	and    eax,0x8
c001ad1c:	74 08                	je     c001ad26 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x11e>
c001ad1e:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c001ad26:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001ad2d:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c001ad34:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001ad3b:	31 d2                	xor    edx,edx
c001ad3d:	88 c2                	mov    dl,al
c001ad3f:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001ad46:	25 ff 00 00 00       	and    eax,0xff
c001ad4b:	83 ec 04             	sub    esp,0x4
c001ad4e:	52                   	push   edx
c001ad4f:	50                   	push   eax
c001ad50:	8d 44 24 24          	lea    eax,[esp+0x24]
c001ad54:	50                   	push   eax
c001ad55:	e8 b7 bb fe ff       	call   c0006911 <f_chmod>
c001ad5a:	83 c4 10             	add    esp,0x10
c001ad5d:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001ad64:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001ad6b:	85 c0                	test   eax,eax
c001ad6d:	75 07                	jne    c001ad76 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x16e>
c001ad6f:	b8 00 00 00 00       	mov    eax,0x0
c001ad74:	eb 05                	jmp    c001ad7b <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x173>
c001ad76:	b8 01 00 00 00       	mov    eax,0x1
c001ad7b:	81 c4 2c 01 00 00    	add    esp,0x12c
c001ad81:	c3                   	ret    

c001ad82 <FAT::rename(char const*, char const*)>:
c001ad82:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001ad88:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001ad90:	74 0a                	je     c001ad9c <FAT::rename(char const*, char const*)+0x1a>
c001ad92:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001ad9a:	75 0a                	jne    c001ada6 <FAT::rename(char const*, char const*)+0x24>
c001ad9c:	b8 04 00 00 00       	mov    eax,0x4
c001ada1:	e9 98 00 00 00       	jmp    c001ae3e <FAT::rename(char const*, char const*)+0xbc>
c001ada6:	83 ec 08             	sub    esp,0x8
c001ada9:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001adb0:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001adb7:	50                   	push   eax
c001adb8:	e8 9c 59 fe ff       	call   c0000759 <strcpy>
c001adbd:	83 c4 10             	add    esp,0x10
c001adc0:	83 ec 08             	sub    esp,0x8
c001adc3:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001adca:	50                   	push   eax
c001adcb:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001add2:	e8 c1 fa ff ff       	call   c001a898 <FAT::fixFilepath(char*)>
c001add7:	83 c4 10             	add    esp,0x10
c001adda:	83 ec 08             	sub    esp,0x8
c001addd:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001ade4:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ade8:	50                   	push   eax
c001ade9:	e8 6b 59 fe ff       	call   c0000759 <strcpy>
c001adee:	83 c4 10             	add    esp,0x10
c001adf1:	83 ec 08             	sub    esp,0x8
c001adf4:	8d 44 24 14          	lea    eax,[esp+0x14]
c001adf8:	50                   	push   eax
c001adf9:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001ae00:	e8 93 fa ff ff       	call   c001a898 <FAT::fixFilepath(char*)>
c001ae05:	83 c4 10             	add    esp,0x10
c001ae08:	83 ec 08             	sub    esp,0x8
c001ae0b:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ae0f:	50                   	push   eax
c001ae10:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001ae17:	50                   	push   eax
c001ae18:	e8 01 b8 fe ff       	call   c000661e <f_rename>
c001ae1d:	83 c4 10             	add    esp,0x10
c001ae20:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001ae27:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001ae2e:	85 c0                	test   eax,eax
c001ae30:	75 07                	jne    c001ae39 <FAT::rename(char const*, char const*)+0xb7>
c001ae32:	b8 00 00 00 00       	mov    eax,0x0
c001ae37:	eb 05                	jmp    c001ae3e <FAT::rename(char const*, char const*)+0xbc>
c001ae39:	b8 01 00 00 00       	mov    eax,0x1
c001ae3e:	81 c4 1c 02 00 00    	add    esp,0x21c
c001ae44:	c3                   	ret    
c001ae45:	90                   	nop

c001ae46 <FAT::mkdir(char const*)>:
c001ae46:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001ae4c:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001ae54:	75 07                	jne    c001ae5d <FAT::mkdir(char const*)+0x17>
c001ae56:	b8 04 00 00 00       	mov    eax,0x4
c001ae5b:	eb 5c                	jmp    c001aeb9 <FAT::mkdir(char const*)+0x73>
c001ae5d:	83 ec 08             	sub    esp,0x8
c001ae60:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001ae67:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ae6b:	50                   	push   eax
c001ae6c:	e8 e8 58 fe ff       	call   c0000759 <strcpy>
c001ae71:	83 c4 10             	add    esp,0x10
c001ae74:	83 ec 08             	sub    esp,0x8
c001ae77:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ae7b:	50                   	push   eax
c001ae7c:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001ae83:	e8 10 fa ff ff       	call   c001a898 <FAT::fixFilepath(char*)>
c001ae88:	83 c4 10             	add    esp,0x10
c001ae8b:	83 ec 0c             	sub    esp,0xc
c001ae8e:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ae92:	50                   	push   eax
c001ae93:	e8 5a b5 fe ff       	call   c00063f2 <f_mkdir>
c001ae98:	83 c4 10             	add    esp,0x10
c001ae9b:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001aea2:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001aea9:	85 c0                	test   eax,eax
c001aeab:	75 07                	jne    c001aeb4 <FAT::mkdir(char const*)+0x6e>
c001aead:	b8 00 00 00 00       	mov    eax,0x0
c001aeb2:	eb 05                	jmp    c001aeb9 <FAT::mkdir(char const*)+0x73>
c001aeb4:	b8 01 00 00 00       	mov    eax,0x1
c001aeb9:	81 c4 1c 01 00 00    	add    esp,0x11c
c001aebf:	c3                   	ret    

c001aec0 <FAT::exists(char const*)>:
c001aec0:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001aec6:	83 ec 08             	sub    esp,0x8
c001aec9:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001aed0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001aed4:	50                   	push   eax
c001aed5:	e8 7f 58 fe ff       	call   c0000759 <strcpy>
c001aeda:	83 c4 10             	add    esp,0x10
c001aedd:	83 ec 08             	sub    esp,0x8
c001aee0:	8d 44 24 08          	lea    eax,[esp+0x8]
c001aee4:	50                   	push   eax
c001aee5:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001aeec:	e8 a7 f9 ff ff       	call   c001a898 <FAT::fixFilepath(char*)>
c001aef1:	83 c4 10             	add    esp,0x10
c001aef4:	83 ec 08             	sub    esp,0x8
c001aef7:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c001aefe:	50                   	push   eax
c001aeff:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001af03:	50                   	push   eax
c001af04:	e8 f9 af fe ff       	call   c0005f02 <f_stat>
c001af09:	83 c4 10             	add    esp,0x10
c001af0c:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001af13:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001af1a:	85 c0                	test   eax,eax
c001af1c:	75 04                	jne    c001af22 <FAT::exists(char const*)+0x62>
c001af1e:	b0 01                	mov    al,0x1
c001af20:	eb 02                	jmp    c001af24 <FAT::exists(char const*)+0x64>
c001af22:	b0 00                	mov    al,0x0
c001af24:	81 c4 2c 02 00 00    	add    esp,0x22c
c001af2a:	c3                   	ret    
c001af2b:	90                   	nop

c001af2c <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001af2c:	b8 08 00 00 00       	mov    eax,0x8
c001af31:	c3                   	ret    

c001af32 <ISO9660::seek(void*, unsigned long long)>:
c001af32:	53                   	push   ebx
c001af33:	b8 04 00 00 00       	mov    eax,0x4
c001af38:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001af3c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001af40:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001af44:	85 d2                	test   edx,edx
c001af46:	74 17                	je     c001af5f <ISO9660::seek(void*, unsigned long long)+0x2d>
c001af48:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c001af4b:	89 c8                	mov    eax,ecx
c001af4d:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c001af50:	b8 01 00 00 00       	mov    eax,0x1
c001af55:	73 08                	jae    c001af5f <ISO9660::seek(void*, unsigned long long)+0x2d>
c001af57:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c001af5a:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001af5d:	31 c0                	xor    eax,eax
c001af5f:	5b                   	pop    ebx
c001af60:	c3                   	ret    
c001af61:	90                   	nop

c001af62 <ISO9660::tell(void*, unsigned long long*)>:
c001af62:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001af66:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001af6a:	85 d2                	test   edx,edx
c001af6c:	74 12                	je     c001af80 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001af6e:	85 c0                	test   eax,eax
c001af70:	74 0e                	je     c001af80 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001af72:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001af75:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c001af78:	89 10                	mov    DWORD PTR [eax],edx
c001af7a:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001af7d:	31 c0                	xor    eax,eax
c001af7f:	c3                   	ret    
c001af80:	b8 04 00 00 00       	mov    eax,0x4
c001af85:	c3                   	ret    

c001af86 <ISO9660::getName()>:
c001af86:	b8 68 31 02 c0       	mov    eax,0xc0023168
c001af8b:	c3                   	ret    

c001af8c <ISO9660::stat(void*, unsigned long long*)>:
c001af8c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001af90:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001af94:	85 d2                	test   edx,edx
c001af96:	74 12                	je     c001afaa <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001af98:	85 c0                	test   eax,eax
c001af9a:	74 0e                	je     c001afaa <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001af9c:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001af9f:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c001afa2:	89 10                	mov    DWORD PTR [eax],edx
c001afa4:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001afa7:	31 c0                	xor    eax,eax
c001afa9:	c3                   	ret    
c001afaa:	b8 04 00 00 00       	mov    eax,0x4
c001afaf:	c3                   	ret    

c001afb0 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001afb0:	b8 01 00 00 00       	mov    eax,0x1
c001afb5:	c3                   	ret    

c001afb6 <ISO9660::unlink(char const*)>:
c001afb6:	b8 01 00 00 00       	mov    eax,0x1
c001afbb:	c3                   	ret    

c001afbc <ISO9660::write(void*, unsigned long, void*, int*)>:
c001afbc:	b8 01 00 00 00       	mov    eax,0x1
c001afc1:	c3                   	ret    

c001afc2 <ISO9660::rename(char const*, char const*)>:
c001afc2:	b8 01 00 00 00       	mov    eax,0x1
c001afc7:	c3                   	ret    

c001afc8 <ISO9660::mkdir(char const*)>:
c001afc8:	b8 01 00 00 00       	mov    eax,0x1
c001afcd:	c3                   	ret    

c001afce <ISO9660::close(void*)>:
c001afce:	83 ec 0c             	sub    esp,0xc
c001afd1:	b8 04 00 00 00       	mov    eax,0x4
c001afd6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001afda:	85 d2                	test   edx,edx
c001afdc:	74 0e                	je     c001afec <ISO9660::close(void*)+0x1e>
c001afde:	83 ec 0c             	sub    esp,0xc
c001afe1:	52                   	push   edx
c001afe2:	e8 32 10 ff ff       	call   c000c019 <free>
c001afe7:	83 c4 10             	add    esp,0x10
c001afea:	31 c0                	xor    eax,eax
c001afec:	83 c4 0c             	add    esp,0xc
c001afef:	c3                   	ret    

c001aff0 <ISO9660::closeDir(void*)>:
c001aff0:	83 ec 0c             	sub    esp,0xc
c001aff3:	b8 04 00 00 00       	mov    eax,0x4
c001aff8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001affc:	85 d2                	test   edx,edx
c001affe:	74 0e                	je     c001b00e <ISO9660::closeDir(void*)+0x1e>
c001b000:	83 ec 0c             	sub    esp,0xc
c001b003:	52                   	push   edx
c001b004:	e8 10 10 ff ff       	call   c000c019 <free>
c001b009:	83 c4 10             	add    esp,0x10
c001b00c:	31 c0                	xor    eax,eax
c001b00e:	83 c4 0c             	add    esp,0xc
c001b011:	c3                   	ret    

c001b012 <ISO9660::~ISO9660()>:
c001b012:	83 ec 0c             	sub    esp,0xc
c001b015:	ba bc 31 02 c0       	mov    edx,0xc00231bc
c001b01a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b01e:	89 10                	mov    DWORD PTR [eax],edx
c001b020:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b024:	83 ec 0c             	sub    esp,0xc
c001b027:	50                   	push   eax
c001b028:	e8 7b 44 ff ff       	call   c000f4a8 <Filesystem::~Filesystem()>
c001b02d:	83 c4 10             	add    esp,0x10
c001b030:	90                   	nop
c001b031:	83 c4 0c             	add    esp,0xc
c001b034:	c3                   	ret    
c001b035:	90                   	nop

c001b036 <ISO9660::~ISO9660()>:
c001b036:	83 ec 0c             	sub    esp,0xc
c001b039:	83 ec 0c             	sub    esp,0xc
c001b03c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b040:	e8 cd ff ff ff       	call   c001b012 <ISO9660::~ISO9660()>
c001b045:	83 c4 10             	add    esp,0x10
c001b048:	83 ec 08             	sub    esp,0x8
c001b04b:	6a 08                	push   0x8
c001b04d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b051:	e8 fb 3f ff ff       	call   c000f051 <operator delete(void*, unsigned long)>
c001b056:	83 c4 10             	add    esp,0x10
c001b059:	83 c4 0c             	add    esp,0xc
c001b05c:	c3                   	ret    

c001b05d <__memmem(unsigned char*, int, unsigned char*, int)>:
c001b05d:	55                   	push   ebp
c001b05e:	31 c9                	xor    ecx,ecx
c001b060:	57                   	push   edi
c001b061:	56                   	push   esi
c001b062:	53                   	push   ebx
c001b063:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001b067:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001b06b:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c001b06f:	89 eb                	mov    ebx,ebp
c001b071:	39 ce                	cmp    esi,ecx
c001b073:	7e 17                	jle    c001b08c <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c001b075:	31 d2                	xor    edx,edx
c001b077:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c001b07b:	7d 13                	jge    c001b090 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c001b07d:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001b081:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001b084:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c001b087:	75 0d                	jne    c001b096 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c001b089:	42                   	inc    edx
c001b08a:	eb eb                	jmp    c001b077 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c001b08c:	31 c0                	xor    eax,eax
c001b08e:	eb 0a                	jmp    c001b09a <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001b090:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c001b094:	eb 04                	jmp    c001b09a <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001b096:	41                   	inc    ecx
c001b097:	43                   	inc    ebx
c001b098:	eb d7                	jmp    c001b071 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c001b09a:	5b                   	pop    ebx
c001b09b:	5e                   	pop    esi
c001b09c:	5f                   	pop    edi
c001b09d:	5d                   	pop    ebp
c001b09e:	c3                   	ret    

c001b09f <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001b09f:	56                   	push   esi
c001b0a0:	53                   	push   ebx
c001b0a1:	52                   	push   edx
c001b0a2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b0a6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b0aa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b0ae:	39 0d 00 5b 02 c0    	cmp    DWORD PTR ds:0xc0025b00,ecx
c001b0b4:	75 08                	jne    c001b0be <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c001b0b6:	38 05 a8 3f 02 c0    	cmp    BYTE PTR ds:0xc0023fa8,al
c001b0bc:	74 2b                	je     c001b0e9 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x4a>
c001b0be:	83 ec 0c             	sub    esp,0xc
c001b0c1:	31 db                	xor    ebx,ebx
c001b0c3:	a2 a8 3f 02 c0       	mov    ds:0xc0023fa8,al
c001b0c8:	89 0d 00 5b 02 c0    	mov    DWORD PTR ds:0xc0025b00,ecx
c001b0ce:	68 20 5b 02 c0       	push   0xc0025b20
c001b0d3:	6a 01                	push   0x1
c001b0d5:	53                   	push   ebx
c001b0d6:	0f be c0             	movsx  eax,al
c001b0d9:	51                   	push   ecx
c001b0da:	ff 34 85 7c 4a 02 c0 	push   DWORD PTR [eax*4-0x3ffdb584]
c001b0e1:	e8 ec 76 ff ff       	call   c00127d2 <LogicalDisk::read(unsigned long long, int, void*)>
c001b0e6:	83 c4 20             	add    esp,0x20
c001b0e9:	c7 44 24 18 00 08 00 00 	mov    DWORD PTR [esp+0x18],0x800
c001b0f1:	c7 44 24 14 20 5b 02 c0 	mov    DWORD PTR [esp+0x14],0xc0025b20
c001b0f9:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001b0fd:	58                   	pop    eax
c001b0fe:	5b                   	pop    ebx
c001b0ff:	5e                   	pop    esi
c001b100:	e9 7f 55 fe ff       	jmp    c0000684 <memcpy>
c001b105:	90                   	nop

c001b106 <ISO9660::tryMount(LogicalDisk*, int)>:
c001b106:	81 ec 10 08 00 00    	sub    esp,0x810
c001b10c:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c001b113:	83 c0 41             	add    eax,0x41
c001b116:	0f be c0             	movsx  eax,al
c001b119:	50                   	push   eax
c001b11a:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b11e:	50                   	push   eax
c001b11f:	6a 10                	push   0x10
c001b121:	e8 79 ff ff ff       	call   c001b09f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b126:	83 c4 10             	add    esp,0x10
c001b129:	31 c0                	xor    eax,eax
c001b12b:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001b130:	75 1d                	jne    c001b14f <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001b132:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001b137:	75 16                	jne    c001b14f <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001b139:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001b13e:	75 0f                	jne    c001b14f <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001b140:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001b145:	75 08                	jne    c001b14f <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001b147:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001b14c:	0f 94 c0             	sete   al
c001b14f:	81 c4 0c 08 00 00    	add    esp,0x80c
c001b155:	c3                   	ret    

c001b156 <ISO9660::read(void*, unsigned long, void*, int*)>:
c001b156:	55                   	push   ebp
c001b157:	57                   	push   edi
c001b158:	56                   	push   esi
c001b159:	53                   	push   ebx
c001b15a:	81 ec 34 08 00 00    	sub    esp,0x834
c001b160:	8b ac 24 50 08 00 00 	mov    ebp,DWORD PTR [esp+0x850]
c001b167:	55                   	push   ebp
c001b168:	68 83 31 02 c0       	push   0xc0023183
c001b16d:	e8 05 40 ff ff       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c001b172:	83 c4 10             	add    esp,0x10
c001b175:	83 bc 24 44 08 00 00 00 	cmp    DWORD PTR [esp+0x844],0x0
c001b17d:	0f 84 06 02 00 00    	je     c001b389 <ISO9660::read(void*, unsigned long, void*, int*)+0x233>
c001b183:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c001b18b:	0f 84 f8 01 00 00    	je     c001b389 <ISO9660::read(void*, unsigned long, void*, int*)+0x233>
c001b191:	8b bc 24 44 08 00 00 	mov    edi,DWORD PTR [esp+0x844]
c001b198:	b8 01 00 00 00       	mov    eax,0x1
c001b19d:	80 7f 18 00          	cmp    BYTE PTR [edi+0x18],0x0
c001b1a1:	0f 85 e7 01 00 00    	jne    c001b38e <ISO9660::read(void*, unsigned long, void*, int*)+0x238>
c001b1a7:	8b 77 10             	mov    esi,DWORD PTR [edi+0x10]
c001b1aa:	31 d2                	xor    edx,edx
c001b1ac:	89 e9                	mov    ecx,ebp
c001b1ae:	8b 7f 14             	mov    edi,DWORD PTR [edi+0x14]
c001b1b1:	01 f1                	add    ecx,esi
c001b1b3:	89 d3                	mov    ebx,edx
c001b1b5:	11 fb                	adc    ebx,edi
c001b1b7:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001b1bb:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001b1bf:	8b 9c 24 44 08 00 00 	mov    ebx,DWORD PTR [esp+0x844]
c001b1c6:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c001b1c9:	8b 5b 0c             	mov    ebx,DWORD PTR [ebx+0xc]
c001b1cc:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001b1d0:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001b1d4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b1d8:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001b1dc:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001b1e0:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c001b1e4:	72 19                	jb     c001b1ff <ISO9660::read(void*, unsigned long, void*, int*)+0xa9>
c001b1e6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b1ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b1ee:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b1f2:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001b1f5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b1f9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b1fd:	eb 13                	jmp    c001b212 <ISO9660::read(void*, unsigned long, void*, int*)+0xbc>
c001b1ff:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b203:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b207:	29 f0                	sub    eax,esi
c001b209:	19 fa                	sbb    edx,edi
c001b20b:	89 04 24             	mov    DWORD PTR [esp],eax
c001b20e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b212:	8b 84 24 44 08 00 00 	mov    eax,DWORD PTR [esp+0x844]
c001b219:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001b21c:	8b 00                	mov    eax,DWORD PTR [eax]
c001b21e:	0f a4 c2 0b          	shld   edx,eax,0xb
c001b222:	c1 e0 0b             	shl    eax,0xb
c001b225:	53                   	push   ebx
c001b226:	01 c6                	add    esi,eax
c001b228:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001b22f:	11 d7                	adc    edi,edx
c001b231:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001b235:	50                   	push   eax
c001b236:	89 fa                	mov    edx,edi
c001b238:	8d 44 24 28          	lea    eax,[esp+0x28]
c001b23c:	50                   	push   eax
c001b23d:	89 f0                	mov    eax,esi
c001b23f:	0f ac d0 0b          	shrd   eax,edx,0xb
c001b243:	50                   	push   eax
c001b244:	e8 56 fe ff ff       	call   c001b09f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b249:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001b250:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b254:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c001b258:	83 c4 10             	add    esp,0x10
c001b25b:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001b25e:	b8 00 08 00 00       	mov    eax,0x800
c001b263:	81 e2 ff 07 00 00    	and    edx,0x7ff
c001b269:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c001b26d:	29 d0                	sub    eax,edx
c001b26f:	39 c1                	cmp    ecx,eax
c001b271:	83 db 00             	sbb    ebx,0x0
c001b274:	7d 19                	jge    c001b28f <ISO9660::read(void*, unsigned long, void*, int*)+0x139>
c001b276:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001b27b:	75 16                	jne    c001b293 <ISO9660::read(void*, unsigned long, void*, int*)+0x13d>
c001b27d:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001b284:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b28a:	e9 f6 00 00 00       	jmp    c001b385 <ISO9660::read(void*, unsigned long, void*, int*)+0x22f>
c001b28f:	89 c5                	mov    ebp,eax
c001b291:	eb 03                	jmp    c001b296 <ISO9660::read(void*, unsigned long, void*, int*)+0x140>
c001b293:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c001b296:	51                   	push   ecx
c001b297:	55                   	push   ebp
c001b298:	8d 44 14 28          	lea    eax,[esp+edx*1+0x28]
c001b29c:	50                   	push   eax
c001b29d:	ff b4 24 58 08 00 00 	push   DWORD PTR [esp+0x858]
c001b2a4:	e8 db 53 fe ff       	call   c0000684 <memcpy>
c001b2a9:	8b 84 24 5c 08 00 00 	mov    eax,DWORD PTR [esp+0x85c]
c001b2b0:	01 e8                	add    eax,ebp
c001b2b2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b2b6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001b2ba:	89 e8                	mov    eax,ebp
c001b2bc:	99                   	cdq    
c001b2bd:	01 ee                	add    esi,ebp
c001b2bf:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001b2c3:	11 d7                	adc    edi,edx
c001b2c5:	29 e9                	sub    ecx,ebp
c001b2c7:	19 d3                	sbb    ebx,edx
c001b2c9:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001b2cd:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001b2d1:	83 c4 10             	add    esp,0x10
c001b2d4:	b8 ff 07 00 00       	mov    eax,0x7ff
c001b2d9:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c001b2dc:	b8 00 00 00 00       	mov    eax,0x0
c001b2e1:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001b2e5:	7d 3f                	jge    c001b326 <ISO9660::read(void*, unsigned long, void*, int*)+0x1d0>
c001b2e7:	52                   	push   edx
c001b2e8:	89 fa                	mov    edx,edi
c001b2ea:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001b2f1:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001b2f5:	50                   	push   eax
c001b2f6:	89 f0                	mov    eax,esi
c001b2f8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b2fc:	0f ac d0 0b          	shrd   eax,edx,0xb
c001b300:	50                   	push   eax
c001b301:	e8 99 fd ff ff       	call   c001b09f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b306:	81 c6 00 08 00 00    	add    esi,0x800
c001b30c:	83 d7 00             	adc    edi,0x0
c001b30f:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c001b317:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c001b31f:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c001b324:	eb ab                	jmp    c001b2d1 <ISO9660::read(void*, unsigned long, void*, int*)+0x17b>
c001b326:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b32a:	0b 04 24             	or     eax,DWORD PTR [esp]
c001b32d:	74 34                	je     c001b363 <ISO9660::read(void*, unsigned long, void*, int*)+0x20d>
c001b32f:	50                   	push   eax
c001b330:	89 fa                	mov    edx,edi
c001b332:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001b339:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001b33d:	50                   	push   eax
c001b33e:	89 f0                	mov    eax,esi
c001b340:	0f ac d0 0b          	shrd   eax,edx,0xb
c001b344:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001b348:	55                   	push   ebp
c001b349:	50                   	push   eax
c001b34a:	e8 50 fd ff ff       	call   c001b09f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b34f:	83 c4 0c             	add    esp,0xc
c001b352:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c001b356:	55                   	push   ebp
c001b357:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b35b:	e8 24 53 fe ff       	call   c0000684 <memcpy>
c001b360:	83 c4 10             	add    esp,0x10
c001b363:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001b36a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001b36e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b372:	89 38                	mov    DWORD PTR [eax],edi
c001b374:	8b bc 24 44 08 00 00 	mov    edi,DWORD PTR [esp+0x844]
c001b37b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b37f:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001b382:	89 57 14             	mov    DWORD PTR [edi+0x14],edx
c001b385:	31 c0                	xor    eax,eax
c001b387:	eb 05                	jmp    c001b38e <ISO9660::read(void*, unsigned long, void*, int*)+0x238>
c001b389:	b8 04 00 00 00       	mov    eax,0x4
c001b38e:	81 c4 2c 08 00 00    	add    esp,0x82c
c001b394:	5b                   	pop    ebx
c001b395:	5e                   	pop    esi
c001b396:	5f                   	pop    edi
c001b397:	5d                   	pop    ebp
c001b398:	c3                   	ret    
c001b399:	90                   	nop

c001b39a <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001b39a:	55                   	push   ebp
c001b39b:	57                   	push   edi
c001b39c:	56                   	push   esi
c001b39d:	53                   	push   ebx
c001b39e:	81 ec 5c 09 00 00    	sub    esp,0x95c
c001b3a4:	8b b4 24 74 09 00 00 	mov    esi,DWORD PTR [esp+0x974]
c001b3ab:	85 f6                	test   esi,esi
c001b3ad:	0f 84 62 02 00 00    	je     c001b615 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27b>
c001b3b3:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c001b3bb:	0f 84 54 02 00 00    	je     c001b615 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27b>
c001b3c1:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c001b3c4:	0b 46 08             	or     eax,DWORD PTR [esi+0x8]
c001b3c7:	75 0a                	jne    c001b3d3 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c001b3c9:	b8 07 00 00 00       	mov    eax,0x7
c001b3ce:	e9 47 02 00 00       	jmp    c001b61a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x280>
c001b3d3:	50                   	push   eax
c001b3d4:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c001b3d8:	50                   	push   eax
c001b3d9:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001b3e0:	53                   	push   ebx
c001b3e1:	8b 06                	mov    eax,DWORD PTR [esi]
c001b3e3:	c1 e0 0b             	shl    eax,0xb
c001b3e6:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c001b3e9:	c1 e8 0b             	shr    eax,0xb
c001b3ec:	50                   	push   eax
c001b3ed:	e8 ad fc ff ff       	call   c001b09f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b3f2:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001b3f5:	83 c4 10             	add    esp,0x10
c001b3f8:	89 c1                	mov    ecx,eax
c001b3fa:	8b 56 14             	mov    edx,DWORD PTR [esi+0x14]
c001b3fd:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001b403:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c001b406:	84 db                	test   bl,bl
c001b408:	0f 85 90 00 00 00    	jne    c001b49e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x104>
c001b40e:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c001b414:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001b41a:	29 c7                	sub    edi,eax
c001b41c:	89 fb                	mov    ebx,edi
c001b41e:	c1 fb 1f             	sar    ebx,0x1f
c001b421:	01 f8                	add    eax,edi
c001b423:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b427:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c001b42a:	11 da                	adc    edx,ebx
c001b42c:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c001b42f:	89 04 24             	mov    DWORD PTR [esp],eax
c001b432:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b436:	89 56 14             	mov    DWORD PTR [esi+0x14],edx
c001b439:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001b43c:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001b43f:	89 d8                	mov    eax,ebx
c001b441:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b445:	ba 00 00 00 00       	mov    edx,0x0
c001b44a:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001b44e:	b8 00 00 00 00       	mov    eax,0x0
c001b453:	73 0b                	jae    c001b460 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c001b455:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001b458:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001b45c:	29 f8                	sub    eax,edi
c001b45e:	19 da                	sbb    edx,ebx
c001b460:	89 d3                	mov    ebx,edx
c001b462:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c001b465:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c001b468:	09 c3                	or     ebx,eax
c001b46a:	0f 84 59 ff ff ff    	je     c001b3c9 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c001b470:	55                   	push   ebp
c001b471:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c001b475:	50                   	push   eax
c001b476:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001b47d:	53                   	push   ebx
c001b47e:	8b 06                	mov    eax,DWORD PTR [esi]
c001b480:	c1 e0 0b             	shl    eax,0xb
c001b483:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c001b487:	c1 e8 0b             	shr    eax,0xb
c001b48a:	50                   	push   eax
c001b48b:	e8 0f fc ff ff       	call   c001b09f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b490:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001b493:	83 c4 10             	add    esp,0x10
c001b496:	25 ff 07 00 00       	and    eax,0x7ff
c001b49b:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c001b49e:	57                   	push   edi
c001b49f:	6a 28                	push   0x28
c001b4a1:	6a 00                	push   0x0
c001b4a3:	8d 44 24 24          	lea    eax,[esp+0x24]
c001b4a7:	50                   	push   eax
c001b4a8:	e8 0d 52 fe ff       	call   c00006ba <memset>
c001b4ad:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c001b4b0:	31 d2                	xor    edx,edx
c001b4b2:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001b4b8:	89 f8                	mov    eax,edi
c001b4ba:	83 c0 21             	add    eax,0x21
c001b4bd:	83 d2 00             	adc    edx,0x0
c001b4c0:	89 c7                	mov    edi,eax
c001b4c2:	89 d5                	mov    ebp,edx
c001b4c4:	83 c4 10             	add    esp,0x10
c001b4c7:	31 c9                	xor    ecx,ecx
c001b4c9:	8a 84 3c 50 01 00 00 	mov    al,BYTE PTR [esp+edi*1+0x150]
c001b4d0:	83 f9 28             	cmp    ecx,0x28
c001b4d3:	0f 94 c2             	sete   dl
c001b4d6:	88 04 24             	mov    BYTE PTR [esp],al
c001b4d9:	88 d0                	mov    al,dl
c001b4db:	ba ff 07 00 00       	mov    edx,0x7ff
c001b4e0:	39 fa                	cmp    edx,edi
c001b4e2:	ba 00 00 00 00       	mov    edx,0x0
c001b4e7:	19 ea                	sbb    edx,ebp
c001b4e9:	0f 92 c2             	setb   dl
c001b4ec:	09 c2                	or     edx,eax
c001b4ee:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c001b4f2:	0f 94 c0             	sete   al
c001b4f5:	08 d0                	or     al,dl
c001b4f7:	75 16                	jne    c001b50f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c001b4f9:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001b4fd:	74 10                	je     c001b50f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c001b4ff:	8a 04 24             	mov    al,BYTE PTR [esp]
c001b502:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c001b506:	41                   	inc    ecx
c001b507:	83 c7 01             	add    edi,0x1
c001b50a:	83 d5 00             	adc    ebp,0x0
c001b50d:	eb ba                	jmp    c001b4c9 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x12f>
c001b50f:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c001b516:	83 ec 0c             	sub    esp,0xc
c001b519:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001b51d:	57                   	push   edi
c001b51e:	e8 b4 51 fe ff       	call   c00006d7 <strlen>
c001b523:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001b527:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001b52a:	8d 8c 24 60 09 00 00 	lea    ecx,[esp+0x960]
c001b531:	25 ff 07 00 00       	and    eax,0x7ff
c001b536:	01 c8                	add    eax,ecx
c001b538:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c001b540:	5a                   	pop    edx
c001b541:	f6 80 19 f8 ff ff 02 	test   BYTE PTR [eax-0x7e7],0x2
c001b548:	59                   	pop    ecx
c001b549:	0f 95 c0             	setne  al
c001b54c:	0f b6 c0             	movzx  eax,al
c001b54f:	40                   	inc    eax
c001b550:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001b554:	57                   	push   edi
c001b555:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001b559:	50                   	push   eax
c001b55a:	e8 fa 51 fe ff       	call   c0000759 <strcpy>
c001b55f:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c001b563:	83 c4 10             	add    esp,0x10
c001b566:	84 c0                	test   al,al
c001b568:	75 21                	jne    c001b58b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1f1>
c001b56a:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c001b572:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001b57a:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001b582:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c001b589:	eb 28                	jmp    c001b5b3 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x219>
c001b58b:	fe c8                	dec    al
c001b58d:	75 24                	jne    c001b5b3 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x219>
c001b58f:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c001b597:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001b59f:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001b5a7:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c001b5ae:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c001b5b3:	50                   	push   eax
c001b5b4:	ff b4 24 7c 09 00 00 	push   DWORD PTR [esp+0x97c]
c001b5bb:	0f b6 fb             	movzx  edi,bl
c001b5be:	8d 44 24 48          	lea    eax,[esp+0x48]
c001b5c2:	31 db                	xor    ebx,ebx
c001b5c4:	50                   	push   eax
c001b5c5:	ff b4 24 88 09 00 00 	push   DWORD PTR [esp+0x988]
c001b5cc:	e8 b3 50 fe ff       	call   c0000684 <memcpy>
c001b5d1:	8b 84 24 90 09 00 00 	mov    eax,DWORD PTR [esp+0x990]
c001b5d8:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001b5de:	89 f9                	mov    ecx,edi
c001b5e0:	01 7e 10             	add    DWORD PTR [esi+0x10],edi
c001b5e3:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c001b5e6:	11 5e 14             	adc    DWORD PTR [esi+0x14],ebx
c001b5e9:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001b5ec:	83 c4 10             	add    esp,0x10
c001b5ef:	39 c7                	cmp    edi,eax
c001b5f1:	89 df                	mov    edi,ebx
c001b5f3:	19 d7                	sbb    edi,edx
c001b5f5:	72 10                	jb     c001b607 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26d>
c001b5f7:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c001b5fe:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c001b605:	eb 0a                	jmp    c001b611 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x277>
c001b607:	29 c8                	sub    eax,ecx
c001b609:	19 da                	sbb    edx,ebx
c001b60b:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c001b60e:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c001b611:	31 c0                	xor    eax,eax
c001b613:	eb 05                	jmp    c001b61a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x280>
c001b615:	b8 04 00 00 00       	mov    eax,0x4
c001b61a:	81 c4 5c 09 00 00    	add    esp,0x95c
c001b620:	5b                   	pop    ebx
c001b621:	5e                   	pop    esi
c001b622:	5f                   	pop    edi
c001b623:	5d                   	pop    ebp
c001b624:	c3                   	ret    

c001b625 <readRoot(unsigned int*, unsigned int*, char)>:
c001b625:	81 ec 40 08 00 00    	sub    esp,0x840
c001b62b:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c001b633:	50                   	push   eax
c001b634:	8d 44 24 38          	lea    eax,[esp+0x38]
c001b638:	50                   	push   eax
c001b639:	6a 10                	push   0x10
c001b63b:	e8 5f fa ff ff       	call   c001b09f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b640:	83 c4 0c             	add    esp,0xc
c001b643:	6a 22                	push   0x22
c001b645:	8d 84 24 d4 00 00 00 	lea    eax,[esp+0xd4]
c001b64c:	50                   	push   eax
c001b64d:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001b651:	50                   	push   eax
c001b652:	e8 2d 50 fe ff       	call   c0000684 <memcpy>
c001b657:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001b65e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b662:	89 10                	mov    DWORD PTR [eax],edx
c001b664:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001b66b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b66f:	89 10                	mov    DWORD PTR [eax],edx
c001b671:	b0 01                	mov    al,0x1
c001b673:	81 c4 4c 08 00 00    	add    esp,0x84c
c001b679:	c3                   	ret    

c001b67a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c001b67a:	55                   	push   ebp
c001b67b:	57                   	push   edi
c001b67c:	56                   	push   esi
c001b67d:	53                   	push   ebx
c001b67e:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001b684:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001b68b:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c001b692:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b696:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001b69a:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001b69e:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c001b6a2:	75 03                	jne    c001b6a7 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001b6a4:	83 c3 02             	add    ebx,0x2
c001b6a7:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c001b6aa:	75 03                	jne    c001b6af <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c001b6ac:	43                   	inc    ebx
c001b6ad:	eb f8                	jmp    c001b6a7 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001b6af:	51                   	push   ecx
c001b6b0:	68 00 01 00 00       	push   0x100
c001b6b5:	6a 00                	push   0x0
c001b6b7:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001b6bb:	50                   	push   eax
c001b6bc:	e8 f9 4f fe ff       	call   c00006ba <memset>
c001b6c1:	83 c4 10             	add    esp,0x10
c001b6c4:	31 d2                	xor    edx,edx
c001b6c6:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001b6c9:	84 c0                	test   al,al
c001b6cb:	74 21                	je     c001b6ee <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c001b6cd:	3c 2f                	cmp    al,0x2f
c001b6cf:	75 0b                	jne    c001b6dc <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c001b6d1:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c001b6d5:	bd 01 00 00 00       	mov    ebp,0x1
c001b6da:	eb 14                	jmp    c001b6f0 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c001b6dc:	8d 48 9f             	lea    ecx,[eax-0x61]
c001b6df:	80 f9 19             	cmp    cl,0x19
c001b6e2:	77 03                	ja     c001b6e7 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c001b6e4:	83 e8 20             	sub    eax,0x20
c001b6e7:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c001b6eb:	42                   	inc    edx
c001b6ec:	eb d8                	jmp    c001b6c6 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c001b6ee:	31 ed                	xor    ebp,ebp
c001b6f0:	83 ec 0c             	sub    esp,0xc
c001b6f3:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001b6fa:	e8 0a 09 ff ff       	call   c000c009 <malloc>
c001b6ff:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001b706:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c001b70c:	89 c6                	mov    esi,eax
c001b70e:	c1 ef 0b             	shr    edi,0xb
c001b711:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c001b718:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c001b71c:	83 c4 10             	add    esp,0x10
c001b71f:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c001b724:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b728:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c001b72f:	74 28                	je     c001b759 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c001b731:	52                   	push   edx
c001b732:	57                   	push   edi
c001b733:	50                   	push   eax
c001b734:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b738:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001b73f:	e8 5b f9 ff ff       	call   c001b09f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b744:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b748:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c001b74f:	05 00 08 00 00       	add    eax,0x800
c001b754:	83 c4 10             	add    esp,0x10
c001b757:	eb cb                	jmp    c001b724 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c001b759:	83 ec 0c             	sub    esp,0xc
c001b75c:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001b760:	57                   	push   edi
c001b761:	e8 71 4f fe ff       	call   c00006d7 <strlen>
c001b766:	50                   	push   eax
c001b767:	57                   	push   edi
c001b768:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c001b76f:	56                   	push   esi
c001b770:	e8 e8 f8 ff ff       	call   c001b05d <__memmem(unsigned char*, int, unsigned char*, int)>
c001b775:	83 c4 20             	add    esp,0x20
c001b778:	85 c0                	test   eax,eax
c001b77a:	75 13                	jne    c001b78f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c001b77c:	83 ec 0c             	sub    esp,0xc
c001b77f:	56                   	push   esi
c001b780:	e8 94 08 ff ff       	call   c000c019 <free>
c001b785:	83 c4 10             	add    esp,0x10
c001b788:	31 c0                	xor    eax,eax
c001b78a:	e9 b3 00 00 00       	jmp    c001b842 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001b78f:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c001b793:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c001b797:	c1 e7 08             	shl    edi,0x8
c001b79a:	c1 e2 10             	shl    edx,0x10
c001b79d:	09 d7                	or     edi,edx
c001b79f:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c001b7a3:	09 d7                	or     edi,edx
c001b7a5:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c001b7a9:	c1 e2 18             	shl    edx,0x18
c001b7ac:	09 d7                	or     edi,edx
c001b7ae:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c001b7b2:	89 d1                	mov    ecx,edx
c001b7b4:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c001b7b8:	c1 e1 08             	shl    ecx,0x8
c001b7bb:	c1 e2 10             	shl    edx,0x10
c001b7be:	09 ca                	or     edx,ecx
c001b7c0:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c001b7c4:	09 ca                	or     edx,ecx
c001b7c6:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c001b7ca:	c1 e1 18             	shl    ecx,0x18
c001b7cd:	09 ca                	or     edx,ecx
c001b7cf:	89 e9                	mov    ecx,ebp
c001b7d1:	84 c9                	test   cl,cl
c001b7d3:	74 3c                	je     c001b811 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c001b7d5:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001b7d9:	83 ec 0c             	sub    esp,0xc
c001b7dc:	56                   	push   esi
c001b7dd:	e8 37 08 ff ff       	call   c000c019 <free>
c001b7e2:	83 c4 0c             	add    esp,0xc
c001b7e5:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001b7ec:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001b7f1:	50                   	push   eax
c001b7f2:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001b7f9:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001b800:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b804:	52                   	push   edx
c001b805:	57                   	push   edi
c001b806:	53                   	push   ebx
c001b807:	e8 6e fe ff ff       	call   c001b67a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001b80c:	83 c4 20             	add    esp,0x20
c001b80f:	eb 31                	jmp    c001b842 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001b811:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c001b818:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c001b81b:	d0 e8                	shr    al,1
c001b81d:	83 ec 0c             	sub    esp,0xc
c001b820:	89 3b                	mov    DWORD PTR [ebx],edi
c001b822:	8b 9c 24 4c 01 00 00 	mov    ebx,DWORD PTR [esp+0x14c]
c001b829:	83 e0 01             	and    eax,0x1
c001b82c:	89 13                	mov    DWORD PTR [ebx],edx
c001b82e:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c001b835:	89 03                	mov    DWORD PTR [ebx],eax
c001b837:	56                   	push   esi
c001b838:	e8 dc 07 ff ff       	call   c000c019 <free>
c001b83d:	83 c4 10             	add    esp,0x10
c001b840:	b0 01                	mov    al,0x1
c001b842:	81 c4 1c 01 00 00    	add    esp,0x11c
c001b848:	5b                   	pop    ebx
c001b849:	5e                   	pop    esi
c001b84a:	5f                   	pop    edi
c001b84b:	5d                   	pop    ebp
c001b84c:	c3                   	ret    

c001b84d <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c001b84d:	55                   	push   ebp
c001b84e:	57                   	push   edi
c001b84f:	56                   	push   esi
c001b850:	53                   	push   ebx
c001b851:	83 ec 20             	sub    esp,0x20
c001b854:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001b858:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001b85c:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c001b861:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001b865:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b86d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001b875:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c001b87b:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c001b881:	57                   	push   edi
c001b882:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b886:	50                   	push   eax
c001b887:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b88b:	50                   	push   eax
c001b88c:	e8 94 fd ff ff       	call   c001b625 <readRoot(unsigned int*, unsigned int*, char)>
c001b891:	5a                   	pop    edx
c001b892:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b896:	e8 3c 4e fe ff       	call   c00006d7 <strlen>
c001b89b:	83 c4 10             	add    esp,0x10
c001b89e:	83 f8 03             	cmp    eax,0x3
c001b8a1:	77 17                	ja     c001b8ba <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c001b8a3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b8a7:	89 03                	mov    DWORD PTR [ebx],eax
c001b8a9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b8ad:	89 06                	mov    DWORD PTR [esi],eax
c001b8af:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c001b8b6:	b0 01                	mov    al,0x1
c001b8b8:	eb 19                	jmp    c001b8d3 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c001b8ba:	50                   	push   eax
c001b8bb:	55                   	push   ebp
c001b8bc:	57                   	push   edi
c001b8bd:	56                   	push   esi
c001b8be:	53                   	push   ebx
c001b8bf:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b8c3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b8c7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001b8cb:	e8 aa fd ff ff       	call   c001b67a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001b8d0:	83 c4 20             	add    esp,0x20
c001b8d3:	83 c4 1c             	add    esp,0x1c
c001b8d6:	5b                   	pop    ebx
c001b8d7:	5e                   	pop    esi
c001b8d8:	5f                   	pop    edi
c001b8d9:	5d                   	pop    ebp
c001b8da:	c3                   	ret    
c001b8db:	90                   	nop

c001b8dc <ISO9660::open(char const*, void**, FileOpenMode)>:
c001b8dc:	57                   	push   edi
c001b8dd:	56                   	push   esi
c001b8de:	53                   	push   ebx
c001b8df:	83 ec 10             	sub    esp,0x10
c001b8e2:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001b8e6:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001b8ea:	85 f6                	test   esi,esi
c001b8ec:	74 7b                	je     c001b969 <ISO9660::open(char const*, void**, FileOpenMode)+0x8d>
c001b8ee:	85 ff                	test   edi,edi
c001b8f0:	74 77                	je     c001b969 <ISO9660::open(char const*, void**, FileOpenMode)+0x8d>
c001b8f2:	83 ec 0c             	sub    esp,0xc
c001b8f5:	6a 1c                	push   0x1c
c001b8f7:	e8 0d 07 ff ff       	call   c000c009 <malloc>
c001b8fc:	89 07                	mov    DWORD PTR [edi],eax
c001b8fe:	89 c3                	mov    ebx,eax
c001b900:	58                   	pop    eax
c001b901:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b905:	50                   	push   eax
c001b906:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001b909:	50                   	push   eax
c001b90a:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001b90e:	50                   	push   eax
c001b90f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001b913:	50                   	push   eax
c001b914:	56                   	push   esi
c001b915:	e8 33 ff ff ff       	call   c001b84d <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001b91a:	83 c4 20             	add    esp,0x20
c001b91d:	84 c0                	test   al,al
c001b91f:	74 07                	je     c001b928 <ISO9660::open(char const*, void**, FileOpenMode)+0x4c>
c001b921:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001b926:	74 0b                	je     c001b933 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001b928:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001b92c:	b8 01 00 00 00       	mov    eax,0x1
c001b931:	eb 3b                	jmp    c001b96e <ISO9660::open(char const*, void**, FileOpenMode)+0x92>
c001b933:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b937:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001b93b:	89 03                	mov    DWORD PTR [ebx],eax
c001b93d:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001b944:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b948:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001b94f:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001b956:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001b959:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001b960:	8a 06                	mov    al,BYTE PTR [esi]
c001b962:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001b965:	31 c0                	xor    eax,eax
c001b967:	eb 05                	jmp    c001b96e <ISO9660::open(char const*, void**, FileOpenMode)+0x92>
c001b969:	b8 04 00 00 00       	mov    eax,0x4
c001b96e:	83 c4 10             	add    esp,0x10
c001b971:	5b                   	pop    ebx
c001b972:	5e                   	pop    esi
c001b973:	5f                   	pop    edi
c001b974:	c3                   	ret    
c001b975:	90                   	nop

c001b976 <ISO9660::exists(char const*)>:
c001b976:	83 ec 28             	sub    esp,0x28
c001b979:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001b97d:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b981:	52                   	push   edx
c001b982:	0f be 10             	movsx  edx,BYTE PTR [eax]
c001b985:	52                   	push   edx
c001b986:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001b98a:	52                   	push   edx
c001b98b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001b98f:	52                   	push   edx
c001b990:	50                   	push   eax
c001b991:	e8 b7 fe ff ff       	call   c001b84d <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001b996:	83 c4 3c             	add    esp,0x3c
c001b999:	c3                   	ret    

c001b99a <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001b99a:	56                   	push   esi
c001b99b:	53                   	push   ebx
c001b99c:	83 ec 14             	sub    esp,0x14
c001b99f:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001b9a3:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001b9a7:	85 db                	test   ebx,ebx
c001b9a9:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001b9ad:	0f 94 c2             	sete   dl
c001b9b0:	85 f6                	test   esi,esi
c001b9b2:	0f 94 c0             	sete   al
c001b9b5:	08 c2                	or     dl,al
c001b9b7:	75 68                	jne    c001ba21 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001b9b9:	85 c9                	test   ecx,ecx
c001b9bb:	74 64                	je     c001ba21 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001b9bd:	83 ec 0c             	sub    esp,0xc
c001b9c0:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001b9c3:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001b9c9:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001b9d0:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b9d4:	50                   	push   eax
c001b9d5:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c001b9d8:	50                   	push   eax
c001b9d9:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001b9dd:	50                   	push   eax
c001b9de:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001b9e2:	50                   	push   eax
c001b9e3:	51                   	push   ecx
c001b9e4:	e8 64 fe ff ff       	call   c001b84d <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001b9e9:	83 c4 20             	add    esp,0x20
c001b9ec:	ba 01 00 00 00       	mov    edx,0x1
c001b9f1:	84 c0                	test   al,al
c001b9f3:	74 31                	je     c001ba26 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001b9f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b9f9:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001ba00:	89 03                	mov    DWORD PTR [ebx],eax
c001ba02:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ba06:	85 c0                	test   eax,eax
c001ba08:	ba 00 00 00 00       	mov    edx,0x0
c001ba0d:	0f 95 06             	setne  BYTE PTR [esi]
c001ba10:	74 14                	je     c001ba26 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001ba12:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001ba18:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001ba1f:	eb 05                	jmp    c001ba26 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001ba21:	ba 04 00 00 00       	mov    edx,0x4
c001ba26:	83 c4 14             	add    esp,0x14
c001ba29:	89 d0                	mov    eax,edx
c001ba2b:	5b                   	pop    ebx
c001ba2c:	5e                   	pop    esi
c001ba2d:	c3                   	ret    

c001ba2e <ISO9660::openDir(char const*, void**)>:
c001ba2e:	57                   	push   edi
c001ba2f:	56                   	push   esi
c001ba30:	53                   	push   ebx
c001ba31:	83 ec 10             	sub    esp,0x10
c001ba34:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001ba38:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001ba3c:	85 f6                	test   esi,esi
c001ba3e:	0f 84 95 00 00 00    	je     c001bad9 <ISO9660::openDir(char const*, void**)+0xab>
c001ba44:	85 ff                	test   edi,edi
c001ba46:	0f 84 8d 00 00 00    	je     c001bad9 <ISO9660::openDir(char const*, void**)+0xab>
c001ba4c:	83 ec 0c             	sub    esp,0xc
c001ba4f:	6a 1c                	push   0x1c
c001ba51:	e8 b3 05 ff ff       	call   c000c009 <malloc>
c001ba56:	89 07                	mov    DWORD PTR [edi],eax
c001ba58:	89 c3                	mov    ebx,eax
c001ba5a:	59                   	pop    ecx
c001ba5b:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ba5f:	50                   	push   eax
c001ba60:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001ba63:	50                   	push   eax
c001ba64:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ba68:	50                   	push   eax
c001ba69:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ba6d:	50                   	push   eax
c001ba6e:	56                   	push   esi
c001ba6f:	e8 d9 fd ff ff       	call   c001b84d <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001ba74:	83 c4 20             	add    esp,0x20
c001ba77:	84 c0                	test   al,al
c001ba79:	74 07                	je     c001ba82 <ISO9660::openDir(char const*, void**)+0x54>
c001ba7b:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001ba80:	75 21                	jne    c001baa3 <ISO9660::openDir(char const*, void**)+0x75>
c001ba82:	52                   	push   edx
c001ba83:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001ba87:	0f b6 c0             	movzx  eax,al
c001ba8a:	50                   	push   eax
c001ba8b:	68 96 31 02 c0       	push   0xc0023196
c001ba90:	e8 e2 36 ff ff       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c001ba95:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001ba99:	83 c4 10             	add    esp,0x10
c001ba9c:	b8 01 00 00 00       	mov    eax,0x1
c001baa1:	eb 3b                	jmp    c001bade <ISO9660::openDir(char const*, void**)+0xb0>
c001baa3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001baa7:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001baab:	89 03                	mov    DWORD PTR [ebx],eax
c001baad:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001bab4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bab8:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001babf:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001bac6:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001bac9:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001bad0:	8a 06                	mov    al,BYTE PTR [esi]
c001bad2:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001bad5:	31 c0                	xor    eax,eax
c001bad7:	eb 05                	jmp    c001bade <ISO9660::openDir(char const*, void**)+0xb0>
c001bad9:	b8 04 00 00 00       	mov    eax,0x4
c001bade:	83 c4 10             	add    esp,0x10
c001bae1:	5b                   	pop    ebx
c001bae2:	5e                   	pop    esi
c001bae3:	5f                   	pop    edi
c001bae4:	c3                   	ret    
c001bae5:	90                   	nop

c001bae6 <ISO9660::ISO9660()>:
c001bae6:	83 ec 0c             	sub    esp,0xc
c001bae9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001baed:	83 ec 0c             	sub    esp,0xc
c001baf0:	50                   	push   eax
c001baf1:	e8 8e 39 ff ff       	call   c000f484 <Filesystem::Filesystem()>
c001baf6:	83 c4 10             	add    esp,0x10
c001baf9:	ba bc 31 02 c0       	mov    edx,0xc00231bc
c001bafe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb02:	89 10                	mov    DWORD PTR [eax],edx
c001bb04:	90                   	nop
c001bb05:	83 c4 0c             	add    esp,0xc
c001bb08:	c3                   	ret    
c001bb09:	90                   	nop

c001bb0a <SoundChannel::~SoundChannel()>:
c001bb0a:	83 ec 0c             	sub    esp,0xc
c001bb0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb11:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001bb14:	83 ec 0c             	sub    esp,0xc
c001bb17:	50                   	push   eax
c001bb18:	e8 fc 04 ff ff       	call   c000c019 <free>
c001bb1d:	83 c4 10             	add    esp,0x10
c001bb20:	90                   	nop
c001bb21:	83 c4 0c             	add    esp,0xc
c001bb24:	c3                   	ret    
c001bb25:	90                   	nop

c001bb26 <SoundChannel::setSpeed(float)>:
c001bb26:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bb2a:	d9 44 24 08          	fld    DWORD PTR [esp+0x8]
c001bb2e:	d9 58 28             	fstp   DWORD PTR [eax+0x28]
c001bb31:	c3                   	ret    

c001bb32 <SoundChannel::getSpeed()>:
c001bb32:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bb36:	d9 40 28             	fld    DWORD PTR [eax+0x28]
c001bb39:	c3                   	ret    

c001bb3a <SoundChannel::setVolume(int)>:
c001bb3a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bb3e:	83 f8 64             	cmp    eax,0x64
c001bb41:	7e 05                	jle    c001bb48 <SoundChannel::setVolume(int)+0xe>
c001bb43:	b8 64 00 00 00       	mov    eax,0x64
c001bb48:	85 c0                	test   eax,eax
c001bb4a:	79 02                	jns    c001bb4e <SoundChannel::setVolume(int)+0x14>
c001bb4c:	31 c0                	xor    eax,eax
c001bb4e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001bb52:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c001bb55:	c3                   	ret    

c001bb56 <SoundChannel::getVolume()>:
c001bb56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bb5a:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001bb5d:	c3                   	ret    

c001bb5e <SoundChannel::pause()>:
c001bb5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bb62:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c001bb66:	c3                   	ret    
c001bb67:	90                   	nop

c001bb68 <SoundChannel::SoundChannel(int, int, int, int)>:
c001bb68:	83 ec 1c             	sub    esp,0x1c
c001bb6b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001bb6f:	e8 ea ff ff ff       	call   c001bb5e <SoundChannel::pause()>
c001bb74:	83 c4 04             	add    esp,0x4
c001bb77:	6a 50                	push   0x50
c001bb79:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001bb7d:	e8 b8 ff ff ff       	call   c001bb3a <SoundChannel::setVolume(int)>
c001bb82:	83 c4 08             	add    esp,0x8
c001bb85:	d9 e8                	fld1   
c001bb87:	8d 64 24 fc          	lea    esp,[esp-0x4]
c001bb8b:	d9 1c 24             	fstp   DWORD PTR [esp]
c001bb8e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001bb92:	e8 8f ff ff ff       	call   c001bb26 <SoundChannel::setSpeed(float)>
c001bb97:	83 c4 08             	add    esp,0x8
c001bb9a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bb9e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001bba2:	89 10                	mov    DWORD PTR [eax],edx
c001bba4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bba8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001bbac:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001bbaf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bbb3:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001bbb7:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001bbba:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c001bbbf:	75 26                	jne    c001bbe7 <SoundChannel::SoundChannel(int, int, int, int)+0x7f>
c001bbc1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bbc5:	8b 10                	mov    edx,DWORD PTR [eax]
c001bbc7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bbcb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bbce:	0f af c2             	imul   eax,edx
c001bbd1:	89 c2                	mov    edx,eax
c001bbd3:	c1 fa 1f             	sar    edx,0x1f
c001bbd6:	83 e2 03             	and    edx,0x3
c001bbd9:	01 d0                	add    eax,edx
c001bbdb:	c1 f8 02             	sar    eax,0x2
c001bbde:	05 a0 0f 00 00       	add    eax,0xfa0
c001bbe3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001bbe7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bbeb:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001bbef:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c001bbf2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bbf6:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001bbfd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bc01:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c001bc08:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bc0c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001bc0f:	c1 e0 02             	shl    eax,0x2
c001bc12:	83 ec 0c             	sub    esp,0xc
c001bc15:	50                   	push   eax
c001bc16:	e8 ee 03 ff ff       	call   c000c009 <malloc>
c001bc1b:	83 c4 10             	add    esp,0x10
c001bc1e:	89 c2                	mov    edx,eax
c001bc20:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bc24:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001bc27:	83 ec 04             	sub    esp,0x4
c001bc2a:	8d 44 24 10          	lea    eax,[esp+0x10]
c001bc2e:	50                   	push   eax
c001bc2f:	6a 01                	push   0x1
c001bc31:	6a 04                	push   0x4
c001bc33:	e8 aa cc fe ff       	call   c00088e2 <src_new>
c001bc38:	83 c4 10             	add    esp,0x10
c001bc3b:	89 c2                	mov    edx,eax
c001bc3d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bc41:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001bc44:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bc48:	85 c0                	test   eax,eax
c001bc4a:	74 10                	je     c001bc5c <SoundChannel::SoundChannel(int, int, int, int)+0xf4>
c001bc4c:	83 ec 0c             	sub    esp,0xc
c001bc4f:	68 18 32 02 c0       	push   0xc0023218
c001bc54:	e8 e9 9c ff ff       	call   c0015942 <Krnl::panic(char const*)>
c001bc59:	83 c4 10             	add    esp,0x10
c001bc5c:	90                   	nop
c001bc5d:	83 c4 1c             	add    esp,0x1c
c001bc60:	c3                   	ret    
c001bc61:	90                   	nop

c001bc62 <SoundChannel::play()>:
c001bc62:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bc66:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c001bc6a:	c3                   	ret    
c001bc6b:	90                   	nop

c001bc6c <SoundChannel::paused()>:
c001bc6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bc70:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c001bc73:	c3                   	ret    

c001bc74 <SoundChannel::getSampleRate()>:
c001bc74:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bc78:	8b 00                	mov    eax,DWORD PTR [eax]
c001bc7a:	c3                   	ret    
c001bc7b:	90                   	nop

c001bc7c <SoundChannel::getBits()>:
c001bc7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bc80:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bc83:	c3                   	ret    

c001bc84 <SoundChannel::getBufferUsed()>:
c001bc84:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bc88:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001bc8b:	c3                   	ret    

c001bc8c <SoundChannel::getBufferSize()>:
c001bc8c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bc90:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001bc93:	c3                   	ret    

c001bc94 <SoundChannel::unbuffer(float*, int, int)>:
c001bc94:	53                   	push   ebx
c001bc95:	83 ec 40             	sub    esp,0x40
c001bc98:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
c001bc9c:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001bca4:	db 03                	fild   DWORD PTR [ebx]
c001bca6:	da 7c 24 50          	fidivr DWORD PTR [esp+0x50]
c001bcaa:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001bcad:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001bcb1:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001bcb4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001bcb8:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001bcbc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001bcc0:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001bcc4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001bcc8:	8d 44 24 14          	lea    eax,[esp+0x14]
c001bccc:	d8 73 28             	fdiv   DWORD PTR [ebx+0x28]
c001bccf:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c001bcd3:	50                   	push   eax
c001bcd4:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c001bcd7:	e8 c0 c8 fe ff       	call   c000859c <src_process>
c001bcdc:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001bce0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001bce3:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c001bce6:	83 c4 0c             	add    esp,0xc
c001bce9:	29 d0                	sub    eax,edx
c001bceb:	c1 e0 02             	shl    eax,0x2
c001bcee:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c001bcf1:	50                   	push   eax
c001bcf2:	8d 04 91             	lea    eax,[ecx+edx*4]
c001bcf5:	50                   	push   eax
c001bcf6:	51                   	push   ecx
c001bcf7:	e8 50 49 fe ff       	call   c000064c <memmove>
c001bcfc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001bd00:	83 c4 48             	add    esp,0x48
c001bd03:	5b                   	pop    ebx
c001bd04:	c3                   	ret    
c001bd05:	90                   	nop

c001bd06 <SoundChannel::buffer8(unsigned char*, int)>:
c001bd06:	53                   	push   ebx
c001bd07:	31 c0                	xor    eax,eax
c001bd09:	83 ec 08             	sub    esp,0x8
c001bd0c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001bd10:	8b 5a 14             	mov    ebx,DWORD PTR [edx+0x14]
c001bd13:	39 5a 1c             	cmp    DWORD PTR [edx+0x1c],ebx
c001bd16:	74 35                	je     c001bd4d <SoundChannel::buffer8(unsigned char*, int)+0x47>
c001bd18:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001bd1c:	7d 2f                	jge    c001bd4d <SoundChannel::buffer8(unsigned char*, int)+0x47>
c001bd1e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001bd22:	d9 05 34 32 02 c0    	fld    DWORD PTR ds:0xc0023234
c001bd28:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c001bd2c:	66 89 4c 24 02       	mov    WORD PTR [esp+0x2],cx
c001bd31:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c001bd34:	de 4c 24 02          	fimul  WORD PTR [esp+0x2]
c001bd38:	40                   	inc    eax
c001bd39:	8d 59 01             	lea    ebx,[ecx+0x1]
c001bd3c:	89 5a 1c             	mov    DWORD PTR [edx+0x1c],ebx
c001bd3f:	8b 5a 10             	mov    ebx,DWORD PTR [edx+0x10]
c001bd42:	d9 1c 8b             	fstp   DWORD PTR [ebx+ecx*4]
c001bd45:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001bd48:	39 4a 1c             	cmp    DWORD PTR [edx+0x1c],ecx
c001bd4b:	eb c9                	jmp    c001bd16 <SoundChannel::buffer8(unsigned char*, int)+0x10>
c001bd4d:	83 c4 08             	add    esp,0x8
c001bd50:	5b                   	pop    ebx
c001bd51:	c3                   	ret    

c001bd52 <SoundDevice::SoundDevice(char const*)>:
c001bd52:	83 ec 1c             	sub    esp,0x1c
c001bd55:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bd59:	83 ec 08             	sub    esp,0x8
c001bd5c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bd60:	50                   	push   eax
c001bd61:	e8 16 4a ff ff       	call   c001077c <Device::Device(char const*)>
c001bd66:	83 c4 10             	add    esp,0x10
c001bd69:	ba 40 32 02 c0       	mov    edx,0xc0023240
c001bd6e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bd72:	89 10                	mov    DWORD PTR [eax],edx
c001bd74:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bd78:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001bd82:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bd86:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001bd90:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001bd98:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001bd9d:	7f 19                	jg     c001bdb8 <SoundDevice::SoundDevice(char const*)+0x66>
c001bd9f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bda3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001bda7:	83 c2 54             	add    edx,0x54
c001bdaa:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c001bdb2:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001bdb6:	eb e0                	jmp    c001bd98 <SoundDevice::SoundDevice(char const*)+0x46>
c001bdb8:	90                   	nop
c001bdb9:	83 c4 1c             	add    esp,0x1c
c001bdbc:	c3                   	ret    
c001bdbd:	90                   	nop

c001bdbe <SoundDevice::~SoundDevice()>:
c001bdbe:	53                   	push   ebx
c001bdbf:	83 ec 18             	sub    esp,0x18
c001bdc2:	ba 40 32 02 c0       	mov    edx,0xc0023240
c001bdc7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bdcb:	89 10                	mov    DWORD PTR [eax],edx
c001bdcd:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001bdd5:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001bdda:	7f 46                	jg     c001be22 <SoundDevice::~SoundDevice()+0x64>
c001bddc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bde0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001bde4:	83 c2 54             	add    edx,0x54
c001bde7:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c001bdeb:	85 c0                	test   eax,eax
c001bded:	74 2d                	je     c001be1c <SoundDevice::~SoundDevice()+0x5e>
c001bdef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bdf3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001bdf7:	83 c2 54             	add    edx,0x54
c001bdfa:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c001bdfe:	85 db                	test   ebx,ebx
c001be00:	74 1a                	je     c001be1c <SoundDevice::~SoundDevice()+0x5e>
c001be02:	83 ec 0c             	sub    esp,0xc
c001be05:	53                   	push   ebx
c001be06:	e8 ff fc ff ff       	call   c001bb0a <SoundChannel::~SoundChannel()>
c001be0b:	83 c4 10             	add    esp,0x10
c001be0e:	83 ec 08             	sub    esp,0x8
c001be11:	6a 2c                	push   0x2c
c001be13:	53                   	push   ebx
c001be14:	e8 38 32 ff ff       	call   c000f051 <operator delete(void*, unsigned long)>
c001be19:	83 c4 10             	add    esp,0x10
c001be1c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001be20:	eb b3                	jmp    c001bdd5 <SoundDevice::~SoundDevice()+0x17>
c001be22:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001be26:	83 ec 0c             	sub    esp,0xc
c001be29:	50                   	push   eax
c001be2a:	e8 03 46 ff ff       	call   c0010432 <Device::~Device()>
c001be2f:	83 c4 10             	add    esp,0x10
c001be32:	90                   	nop
c001be33:	83 c4 18             	add    esp,0x18
c001be36:	5b                   	pop    ebx
c001be37:	c3                   	ret    

c001be38 <SoundDevice::~SoundDevice()>:
c001be38:	83 ec 0c             	sub    esp,0xc
c001be3b:	83 ec 0c             	sub    esp,0xc
c001be3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001be42:	e8 77 ff ff ff       	call   c001bdbe <SoundDevice::~SoundDevice()>
c001be47:	83 c4 10             	add    esp,0x10
c001be4a:	83 ec 08             	sub    esp,0x8
c001be4d:	68 e4 01 00 00       	push   0x1e4
c001be52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001be56:	e8 f6 31 ff ff       	call   c000f051 <operator delete(void*, unsigned long)>
c001be5b:	83 c4 10             	add    esp,0x10
c001be5e:	83 c4 0c             	add    esp,0xc
c001be61:	c3                   	ret    

c001be62 <SoundDevice::getFreeChannelNum()>:
c001be62:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001be66:	31 c0                	xor    eax,eax
c001be68:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c001be70:	74 09                	je     c001be7b <SoundDevice::getFreeChannelNum()+0x19>
c001be72:	40                   	inc    eax
c001be73:	83 f8 20             	cmp    eax,0x20
c001be76:	75 f0                	jne    c001be68 <SoundDevice::getFreeChannelNum()+0x6>
c001be78:	83 c8 ff             	or     eax,0xffffffff
c001be7b:	c3                   	ret    

c001be7c <SoundDevice::addChannel(SoundChannel*)>:
c001be7c:	56                   	push   esi
c001be7d:	53                   	push   ebx
c001be7e:	51                   	push   ecx
c001be7f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001be83:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001be87:	53                   	push   ebx
c001be88:	e8 d5 ff ff ff       	call   c001be62 <SoundDevice::getFreeChannelNum()>
c001be8d:	5a                   	pop    edx
c001be8e:	83 f8 ff             	cmp    eax,0xffffffff
c001be91:	74 51                	je     c001bee4 <SoundDevice::addChannel(SoundChannel*)+0x68>
c001be93:	85 f6                	test   esi,esi
c001be95:	74 4d                	je     c001bee4 <SoundDevice::addChannel(SoundChannel*)+0x68>
c001be97:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c001be9e:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c001bea5:	75 30                	jne    c001bed7 <SoundDevice::addChannel(SoundChannel*)+0x5b>
c001bea7:	83 ec 0c             	sub    esp,0xc
c001beaa:	56                   	push   esi
c001beab:	e8 c4 fd ff ff       	call   c001bc74 <SoundChannel::getSampleRate()>
c001beb0:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c001beb6:	89 34 24             	mov    DWORD PTR [esp],esi
c001beb9:	e8 be fd ff ff       	call   c001bc7c <SoundChannel::getBits()>
c001bebe:	83 c4 0c             	add    esp,0xc
c001bec1:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c001bec7:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bec9:	50                   	push   eax
c001beca:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c001bed0:	53                   	push   ebx
c001bed1:	ff 52 28             	call   DWORD PTR [edx+0x28]
c001bed4:	83 c4 10             	add    esp,0x10
c001bed7:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c001bedd:	b8 01 00 00 00       	mov    eax,0x1
c001bee2:	eb 03                	jmp    c001bee7 <SoundDevice::addChannel(SoundChannel*)+0x6b>
c001bee4:	83 c8 ff             	or     eax,0xffffffff
c001bee7:	5a                   	pop    edx
c001bee8:	5b                   	pop    ebx
c001bee9:	5e                   	pop    esi
c001beea:	c3                   	ret    
c001beeb:	90                   	nop

c001beec <SoundDevice::removeChannel(int)>:
c001beec:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001bef0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bef4:	83 fa 1f             	cmp    edx,0x1f
c001bef7:	77 23                	ja     c001bf1c <SoundDevice::removeChannel(int)+0x30>
c001bef9:	8d 14 90             	lea    edx,[eax+edx*4]
c001befc:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c001bf03:	74 17                	je     c001bf1c <SoundDevice::removeChannel(int)+0x30>
c001bf05:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c001bf0f:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c001bf15:	75 05                	jne    c001bf1c <SoundDevice::removeChannel(int)+0x30>
c001bf17:	8b 00                	mov    eax,DWORD PTR [eax]
c001bf19:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c001bf1c:	c3                   	ret    
c001bf1d:	90                   	nop

c001bf1e <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c001bf1e:	56                   	push   esi
c001bf1f:	53                   	push   ebx
c001bf20:	31 db                	xor    ebx,ebx
c001bf22:	83 ec 14             	sub    esp,0x14
c001bf25:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001bf29:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c001bf2d:	7d 55                	jge    c001bf84 <SoundDevice::floatTo8(float*, unsigned char*, int)+0x66>
c001bf2f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001bf33:	d9 e8                	fld1   
c001bf35:	d8 04 98             	fadd   DWORD PTR [eax+ebx*4]
c001bf38:	d8 0d 70 32 02 c0    	fmul   DWORD PTR ds:0xc0023270
c001bf3e:	d8 0d 74 32 02 c0    	fmul   DWORD PTR ds:0xc0023274
c001bf44:	d9 5c 24 0c          	fstp   DWORD PTR [esp+0xc]
c001bf48:	d9 44 24 0c          	fld    DWORD PTR [esp+0xc]
c001bf4c:	d8 15 78 32 02 c0    	fcom   DWORD PTR ds:0xc0023278
c001bf52:	df e0                	fnstsw ax
c001bf54:	9e                   	sahf   
c001bf55:	72 08                	jb     c001bf5f <SoundDevice::floatTo8(float*, unsigned char*, int)+0x41>
c001bf57:	dd d8                	fstp   st(0)
c001bf59:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c001bf5d:	eb 22                	jmp    c001bf81 <SoundDevice::floatTo8(float*, unsigned char*, int)+0x63>
c001bf5f:	d9 ee                	fldz   
c001bf61:	d8 d9                	fcomp  st(1)
c001bf63:	df e0                	fnstsw ax
c001bf65:	9e                   	sahf   
c001bf66:	72 08                	jb     c001bf70 <SoundDevice::floatTo8(float*, unsigned char*, int)+0x52>
c001bf68:	dd d8                	fstp   st(0)
c001bf6a:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c001bf6e:	eb 11                	jmp    c001bf81 <SoundDevice::floatTo8(float*, unsigned char*, int)+0x63>
c001bf70:	83 ec 10             	sub    esp,0x10
c001bf73:	d9 1c 24             	fstp   DWORD PTR [esp]
c001bf76:	e8 a1 36 00 00       	call   c001f61c <lrintf>
c001bf7b:	83 c4 10             	add    esp,0x10
c001bf7e:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c001bf81:	43                   	inc    ebx
c001bf82:	eb a5                	jmp    c001bf29 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb>
c001bf84:	83 c4 14             	add    esp,0x14
c001bf87:	5b                   	pop    ebx
c001bf88:	5e                   	pop    esi
c001bf89:	c3                   	ret    

c001bf8a <SoundDevice::getAudio(int, float*, float*)>:
c001bf8a:	55                   	push   ebp
c001bf8b:	57                   	push   edi
c001bf8c:	56                   	push   esi
c001bf8d:	53                   	push   ebx
c001bf8e:	31 db                	xor    ebx,ebx
c001bf90:	83 ec 20             	sub    esp,0x20
c001bf93:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001bf97:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001bf9b:	c1 e0 02             	shl    eax,0x2
c001bf9e:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001bfa2:	50                   	push   eax
c001bfa3:	6a 00                	push   0x0
c001bfa5:	55                   	push   ebp
c001bfa6:	e8 0f 47 fe ff       	call   c00006ba <memset>
c001bfab:	83 c4 10             	add    esp,0x10
c001bfae:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001bfb2:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c001bfb9:	85 c0                	test   eax,eax
c001bfbb:	0f 84 8c 00 00 00    	je     c001c04d <SoundDevice::getAudio(int, float*, float*)+0xc3>
c001bfc1:	83 ec 0c             	sub    esp,0xc
c001bfc4:	50                   	push   eax
c001bfc5:	e8 a2 fc ff ff       	call   c001bc6c <SoundChannel::paused()>
c001bfca:	83 c4 10             	add    esp,0x10
c001bfcd:	84 c0                	test   al,al
c001bfcf:	75 7c                	jne    c001c04d <SoundDevice::getAudio(int, float*, float*)+0xc3>
c001bfd1:	83 ec 0c             	sub    esp,0xc
c001bfd4:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c001bfdb:	e8 76 fb ff ff       	call   c001bb56 <SoundChannel::getVolume()>
c001bfe0:	83 c4 10             	add    esp,0x10
c001bfe3:	85 c0                	test   eax,eax
c001bfe5:	74 66                	je     c001c04d <SoundDevice::getAudio(int, float*, float*)+0xc3>
c001bfe7:	83 ec 0c             	sub    esp,0xc
c001bfea:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c001bff1:	e8 60 fb ff ff       	call   c001bb56 <SoundChannel::getVolume()>
c001bff6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001bffa:	d9 05 7c 32 02 c0    	fld    DWORD PTR ds:0xc002327c
c001c000:	da 7c 24 1c          	fidivr DWORD PTR [esp+0x1c]
c001c004:	d9 5c 24 1c          	fstp   DWORD PTR [esp+0x1c]
c001c008:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001c00c:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c001c012:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c001c016:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c001c01d:	e8 72 fc ff ff       	call   c001bc94 <SoundChannel::unbuffer(float*, int, int)>
c001c022:	83 c4 20             	add    esp,0x20
c001c025:	31 d2                	xor    edx,edx
c001c027:	39 c2                	cmp    edx,eax
c001c029:	7d 1c                	jge    c001c047 <SoundDevice::getAudio(int, float*, float*)+0xbd>
c001c02b:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001c02f:	d9 44 24 0c          	fld    DWORD PTR [esp+0xc]
c001c033:	d8 0c 91             	fmul   DWORD PTR [ecx+edx*4]
c001c036:	da b6 58 01 00 00    	fidiv  DWORD PTR [esi+0x158]
c001c03c:	d8 44 95 00          	fadd   DWORD PTR [ebp+edx*4+0x0]
c001c040:	d9 5c 95 00          	fstp   DWORD PTR [ebp+edx*4+0x0]
c001c044:	42                   	inc    edx
c001c045:	eb e0                	jmp    c001c027 <SoundDevice::getAudio(int, float*, float*)+0x9d>
c001c047:	39 c7                	cmp    edi,eax
c001c049:	7e 02                	jle    c001c04d <SoundDevice::getAudio(int, float*, float*)+0xc3>
c001c04b:	89 c7                	mov    edi,eax
c001c04d:	43                   	inc    ebx
c001c04e:	83 fb 20             	cmp    ebx,0x20
c001c051:	0f 85 5b ff ff ff    	jne    c001bfb2 <SoundDevice::getAudio(int, float*, float*)+0x28>
c001c057:	83 c4 1c             	add    esp,0x1c
c001c05a:	89 f8                	mov    eax,edi
c001c05c:	5b                   	pop    ebx
c001c05d:	5e                   	pop    esi
c001c05e:	5f                   	pop    edi
c001c05f:	5d                   	pop    ebp
c001c060:	c3                   	ret    
c001c061:	90                   	nop

c001c062 <PCI::open(int, int, void*)>:
c001c062:	83 ec 18             	sub    esp,0x18
c001c065:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c069:	8b 10                	mov    edx,DWORD PTR [eax]
c001c06b:	50                   	push   eax
c001c06c:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001c06f:	31 c0                	xor    eax,eax
c001c071:	83 c4 1c             	add    esp,0x1c
c001c074:	c3                   	ret    
c001c075:	90                   	nop

c001c076 <PCI::close(int, int, void*)>:
c001c076:	31 c0                	xor    eax,eax
c001c078:	c3                   	ret    
c001c079:	90                   	nop

c001c07a <PCI::PCI()>:
c001c07a:	83 ec 0c             	sub    esp,0xc
c001c07d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c081:	83 ec 08             	sub    esp,0x8
c001c084:	68 80 32 02 c0       	push   0xc0023280
c001c089:	50                   	push   eax
c001c08a:	e8 77 3d ff ff       	call   c000fe06 <Bus::Bus(char const*)>
c001c08f:	83 c4 10             	add    esp,0x10
c001c092:	ba 0c 33 02 c0       	mov    edx,0xc002330c
c001c097:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c09b:	89 10                	mov    DWORD PTR [eax],edx
c001c09d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c0a1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001c0a7:	0f b6 d0             	movzx  edx,al
c001c0aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c0ae:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001c0b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c0b9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001c0bf:	0f b6 d0             	movzx  edx,al
c001c0c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c0c6:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001c0cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c0cf:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001c0d5:	8d 50 01             	lea    edx,[eax+0x1]
c001c0d8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001c0dc:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001c0e2:	0f b6 d0             	movzx  edx,al
c001c0e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c0e9:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001c0ed:	83 c9 c0             	or     ecx,0xffffffc0
c001c0f0:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001c0f4:	90                   	nop
c001c0f5:	83 c4 0c             	add    esp,0xc
c001c0f8:	c3                   	ret    
c001c0f9:	90                   	nop

c001c0fa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001c0fa:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001c0fe:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c103:	89 ca                	mov    edx,ecx
c001c105:	c1 e0 10             	shl    eax,0x10
c001c108:	81 e2 fc 00 00 00    	and    edx,0xfc
c001c10e:	09 d0                	or     eax,edx
c001c110:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c001c115:	c1 e2 08             	shl    edx,0x8
c001c118:	09 d0                	or     eax,edx
c001c11a:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c001c11f:	c1 e2 0b             	shl    edx,0xb
c001c122:	09 d0                	or     eax,edx
c001c124:	ba f8 0c 00 00       	mov    edx,0xcf8
c001c129:	0d 00 00 00 80       	or     eax,0x80000000
c001c12e:	ef                   	out    dx,eax
c001c12f:	ba fc 0c 00 00       	mov    edx,0xcfc
c001c134:	ed                   	in     eax,dx
c001c135:	83 e1 02             	and    ecx,0x2
c001c138:	0f b6 c9             	movzx  ecx,cl
c001c13b:	c1 e1 03             	shl    ecx,0x3
c001c13e:	d3 e8                	shr    eax,cl
c001c140:	c3                   	ret    
c001c141:	90                   	nop

c001c142 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001c142:	6a 00                	push   0x0
c001c144:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c149:	50                   	push   eax
c001c14a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c14f:	50                   	push   eax
c001c150:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c155:	50                   	push   eax
c001c156:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c15a:	e8 9b ff ff ff       	call   c001c0fa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c15f:	83 c4 14             	add    esp,0x14
c001c162:	c3                   	ret    
c001c163:	90                   	nop

c001c164 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001c164:	6a 0e                	push   0xe
c001c166:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c16b:	50                   	push   eax
c001c16c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c171:	50                   	push   eax
c001c172:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c177:	50                   	push   eax
c001c178:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c17c:	e8 79 ff ff ff       	call   c001c0fa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c181:	83 c4 14             	add    esp,0x14
c001c184:	0f b6 c0             	movzx  eax,al
c001c187:	c3                   	ret    

c001c188 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001c188:	55                   	push   ebp
c001c189:	57                   	push   edi
c001c18a:	56                   	push   esi
c001c18b:	53                   	push   ebx
c001c18c:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001c191:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c001c196:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c001c19b:	6a 0a                	push   0xa
c001c19d:	56                   	push   esi
c001c19e:	55                   	push   ebp
c001c19f:	57                   	push   edi
c001c1a0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001c1a4:	e8 51 ff ff ff       	call   c001c0fa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c1a9:	6a 0a                	push   0xa
c001c1ab:	89 c3                	mov    ebx,eax
c001c1ad:	56                   	push   esi
c001c1ae:	0f b6 db             	movzx  ebx,bl
c001c1b1:	55                   	push   ebp
c001c1b2:	57                   	push   edi
c001c1b3:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001c1b7:	e8 3e ff ff ff       	call   c001c0fa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c1bc:	83 c4 28             	add    esp,0x28
c001c1bf:	25 00 ff 00 00       	and    eax,0xff00
c001c1c4:	09 d8                	or     eax,ebx
c001c1c6:	5b                   	pop    ebx
c001c1c7:	5e                   	pop    esi
c001c1c8:	5f                   	pop    edi
c001c1c9:	5d                   	pop    ebp
c001c1ca:	c3                   	ret    
c001c1cb:	90                   	nop

c001c1cc <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001c1cc:	6a 08                	push   0x8
c001c1ce:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c1d3:	50                   	push   eax
c001c1d4:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c1d9:	50                   	push   eax
c001c1da:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c1df:	50                   	push   eax
c001c1e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c1e4:	e8 11 ff ff ff       	call   c001c0fa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c1e9:	83 c4 14             	add    esp,0x14
c001c1ec:	0f b6 c4             	movzx  eax,ah
c001c1ef:	c3                   	ret    

c001c1f0 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001c1f0:	6a 08                	push   0x8
c001c1f2:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c1f7:	50                   	push   eax
c001c1f8:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c1fd:	50                   	push   eax
c001c1fe:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c203:	50                   	push   eax
c001c204:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c208:	e8 ed fe ff ff       	call   c001c0fa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c20d:	83 c4 14             	add    esp,0x14
c001c210:	c3                   	ret    
c001c211:	90                   	nop

c001c212 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001c212:	6a 3c                	push   0x3c
c001c214:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c219:	50                   	push   eax
c001c21a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c21f:	50                   	push   eax
c001c220:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c225:	50                   	push   eax
c001c226:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c22a:	e8 cb fe ff ff       	call   c001c0fa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c22f:	83 c4 14             	add    esp,0x14
c001c232:	c3                   	ret    
c001c233:	90                   	nop

c001c234 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001c234:	6a 18                	push   0x18
c001c236:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c23b:	50                   	push   eax
c001c23c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c241:	50                   	push   eax
c001c242:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c247:	50                   	push   eax
c001c248:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c24c:	e8 a9 fe ff ff       	call   c001c0fa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c251:	83 c4 14             	add    esp,0x14
c001c254:	0f b6 c4             	movzx  eax,ah
c001c257:	c3                   	ret    

c001c258 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001c258:	55                   	push   ebp
c001c259:	57                   	push   edi
c001c25a:	56                   	push   esi
c001c25b:	53                   	push   ebx
c001c25c:	50                   	push   eax
c001c25d:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c001c261:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c001c266:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001c26b:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c001c270:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001c277:	8d 43 12             	lea    eax,[ebx+0x12]
c001c27a:	83 c3 10             	add    ebx,0x10
c001c27d:	0f b6 c0             	movzx  eax,al
c001c280:	0f b6 db             	movzx  ebx,bl
c001c283:	50                   	push   eax
c001c284:	51                   	push   ecx
c001c285:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001c289:	57                   	push   edi
c001c28a:	55                   	push   ebp
c001c28b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001c28f:	e8 66 fe ff ff       	call   c001c0fa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c294:	53                   	push   ebx
c001c295:	89 c6                	mov    esi,eax
c001c297:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001c29b:	c1 e6 10             	shl    esi,0x10
c001c29e:	51                   	push   ecx
c001c29f:	57                   	push   edi
c001c2a0:	55                   	push   ebp
c001c2a1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001c2a5:	e8 50 fe ff ff       	call   c001c0fa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c2aa:	83 c4 2c             	add    esp,0x2c
c001c2ad:	0f b7 c0             	movzx  eax,ax
c001c2b0:	5b                   	pop    ebx
c001c2b1:	09 f0                	or     eax,esi
c001c2b3:	5e                   	pop    esi
c001c2b4:	5f                   	pop    edi
c001c2b5:	5d                   	pop    ebp
c001c2b6:	c3                   	ret    
c001c2b7:	90                   	nop

c001c2b8 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001c2b8:	53                   	push   ebx
c001c2b9:	ba f8 0c 00 00       	mov    edx,0xcf8
c001c2be:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001c2c3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c2c7:	c1 e1 10             	shl    ecx,0x10
c001c2ca:	25 fc 00 00 00       	and    eax,0xfc
c001c2cf:	09 c1                	or     ecx,eax
c001c2d1:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c2d6:	c1 e0 08             	shl    eax,0x8
c001c2d9:	09 c1                	or     ecx,eax
c001c2db:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001c2e0:	c1 e0 0b             	shl    eax,0xb
c001c2e3:	09 c1                	or     ecx,eax
c001c2e5:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001c2eb:	89 c8                	mov    eax,ecx
c001c2ed:	ef                   	out    dx,eax
c001c2ee:	ba fc 0c 00 00       	mov    edx,0xcfc
c001c2f3:	ed                   	in     eax,dx
c001c2f4:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c001c2f9:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c001c2fe:	74 0a                	je     c001c30a <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c001c300:	0f b7 d8             	movzx  ebx,ax
c001c303:	89 d0                	mov    eax,edx
c001c305:	c1 e0 10             	shl    eax,0x10
c001c308:	eb 05                	jmp    c001c30f <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c001c30a:	66 31 c0             	xor    ax,ax
c001c30d:	89 d3                	mov    ebx,edx
c001c30f:	09 c3                	or     ebx,eax
c001c311:	ba f8 0c 00 00       	mov    edx,0xcf8
c001c316:	89 c8                	mov    eax,ecx
c001c318:	ef                   	out    dx,eax
c001c319:	ba fc 0c 00 00       	mov    edx,0xcfc
c001c31e:	89 d8                	mov    eax,ebx
c001c320:	ef                   	out    dx,eax
c001c321:	5b                   	pop    ebx
c001c322:	c3                   	ret    
c001c323:	90                   	nop

c001c324 <PCI::checkBus(unsigned char)>:
c001c324:	56                   	push   esi
c001c325:	53                   	push   ebx
c001c326:	31 db                	xor    ebx,ebx
c001c328:	51                   	push   ecx
c001c329:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001c32e:	52                   	push   edx
c001c32f:	53                   	push   ebx
c001c330:	43                   	inc    ebx
c001c331:	56                   	push   esi
c001c332:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c336:	e8 29 03 00 00       	call   c001c664 <PCI::checkDevice(unsigned char, unsigned char)>
c001c33b:	83 c4 10             	add    esp,0x10
c001c33e:	83 fb 20             	cmp    ebx,0x20
c001c341:	75 eb                	jne    c001c32e <PCI::checkBus(unsigned char)+0xa>
c001c343:	58                   	pop    eax
c001c344:	5b                   	pop    ebx
c001c345:	5e                   	pop    esi
c001c346:	c3                   	ret    
c001c347:	90                   	nop

c001c348 <PCI::foundDevice(PCIDeviceInfo)>:
c001c348:	55                   	push   ebp
c001c349:	57                   	push   edi
c001c34a:	56                   	push   esi
c001c34b:	53                   	push   ebx
c001c34c:	83 ec 1c             	sub    esp,0x1c
c001c34f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c353:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c001c359:	0f 84 51 01 00 00    	je     c001c4b0 <PCI::foundDevice(PCIDeviceInfo)+0x168>
c001c35f:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001c363:	66 81 f9 06 04       	cmp    cx,0x406
c001c368:	75 2c                	jne    c001c396 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c001c36a:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001c36f:	50                   	push   eax
c001c370:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001c375:	50                   	push   eax
c001c376:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001c37b:	50                   	push   eax
c001c37c:	56                   	push   esi
c001c37d:	e8 b2 fe ff ff       	call   c001c234 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001c382:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001c386:	0f b6 c0             	movzx  eax,al
c001c389:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001c38d:	83 c4 2c             	add    esp,0x2c
c001c390:	5b                   	pop    ebx
c001c391:	5e                   	pop    esi
c001c392:	5f                   	pop    edi
c001c393:	5d                   	pop    ebp
c001c394:	eb 8e                	jmp    c001c324 <PCI::checkBus(unsigned char)>
c001c396:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001c39a:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001c3a0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001c3a4:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001c3a8:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c001c3ac:	88 d3                	mov    bl,dl
c001c3ae:	85 c0                	test   eax,eax
c001c3b0:	74 33                	je     c001c3e5 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001c3b2:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001c3b5:	85 d2                	test   edx,edx
c001c3b7:	74 28                	je     c001c3e1 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001c3b9:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c001c3bf:	31 ef                	xor    edi,ebp
c001c3c1:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c001c3c7:	75 18                	jne    c001c3e1 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001c3c9:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001c3cd:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c001c3d3:	75 0c                	jne    c001c3e1 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001c3d5:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c001c3db:	0f 84 cf 00 00 00    	je     c001c4b0 <PCI::foundDevice(PCIDeviceInfo)+0x168>
c001c3e1:	8b 00                	mov    eax,DWORD PTR [eax]
c001c3e3:	eb c9                	jmp    c001c3ae <PCI::foundDevice(PCIDeviceInfo)+0x66>
c001c3e5:	66 81 f9 01 06       	cmp    cx,0x601
c001c3ea:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c001c3ee:	75 18                	jne    c001c408 <PCI::foundDevice(PCIDeviceInfo)+0xc0>
c001c3f0:	83 ec 0c             	sub    esp,0xc
c001c3f3:	68 58 01 00 00       	push   0x158
c001c3f8:	e8 45 2c ff ff       	call   c000f042 <operator new(unsigned long)>
c001c3fd:	59                   	pop    ecx
c001c3fe:	89 c5                	mov    ebp,eax
c001c400:	5f                   	pop    edi
c001c401:	68 88 32 02 c0       	push   0xc0023288
c001c406:	eb 7d                	jmp    c001c485 <PCI::foundDevice(PCIDeviceInfo)+0x13d>
c001c408:	66 81 f9 01 01       	cmp    cx,0x101
c001c40d:	75 60                	jne    c001c46f <PCI::foundDevice(PCIDeviceInfo)+0x127>
c001c40f:	83 ec 0c             	sub    esp,0xc
c001c412:	68 70 02 00 00       	push   0x270
c001c417:	e8 26 2c ff ff       	call   c000f042 <operator new(unsigned long)>
c001c41c:	89 04 24             	mov    DWORD PTR [esp],eax
c001c41f:	89 c5                	mov    ebp,eax
c001c421:	e8 02 03 00 00       	call   c001c728 <IDE::IDE()>
c001c426:	58                   	pop    eax
c001c427:	5a                   	pop    edx
c001c428:	55                   	push   ebp
c001c429:	56                   	push   esi
c001c42a:	e8 5d 41 ff ff       	call   c001058c <Device::addChild(Device*)>
c001c42f:	83 ec 1c             	sub    esp,0x1c
c001c432:	b9 09 00 00 00       	mov    ecx,0x9
c001c437:	fc                   	cld    
c001c438:	89 e7                	mov    edi,esp
c001c43a:	89 de                	mov    esi,ebx
c001c43c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001c43e:	55                   	push   ebp
c001c43f:	e8 26 40 ff ff       	call   c001046a <Device::preOpenPCI(PCIDeviceInfo)>
c001c444:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c447:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001c44b:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001c453:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001c45b:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001c463:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c466:	83 c4 4c             	add    esp,0x4c
c001c469:	5b                   	pop    ebx
c001c46a:	5e                   	pop    esi
c001c46b:	5f                   	pop    edi
c001c46c:	5d                   	pop    ebp
c001c46d:	ff e0                	jmp    eax
c001c46f:	83 ec 0c             	sub    esp,0xc
c001c472:	68 58 01 00 00       	push   0x158
c001c477:	e8 c6 2b ff ff       	call   c000f042 <operator new(unsigned long)>
c001c47c:	59                   	pop    ecx
c001c47d:	89 c5                	mov    ebp,eax
c001c47f:	5f                   	pop    edi
c001c480:	68 a7 32 02 c0       	push   0xc00232a7
c001c485:	55                   	push   ebp
c001c486:	e8 ed 43 ff ff       	call   c0010878 <DriverlessDevice::DriverlessDevice(char const*)>
c001c48b:	58                   	pop    eax
c001c48c:	5a                   	pop    edx
c001c48d:	55                   	push   ebp
c001c48e:	56                   	push   esi
c001c48f:	e8 f8 40 ff ff       	call   c001058c <Device::addChild(Device*)>
c001c494:	b9 09 00 00 00       	mov    ecx,0x9
c001c499:	fc                   	cld    
c001c49a:	89 df                	mov    edi,ebx
c001c49c:	89 de                	mov    esi,ebx
c001c49e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001c4a0:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c001c4a4:	83 c4 2c             	add    esp,0x2c
c001c4a7:	5b                   	pop    ebx
c001c4a8:	5e                   	pop    esi
c001c4a9:	5f                   	pop    edi
c001c4aa:	5d                   	pop    ebp
c001c4ab:	e9 ba 3f ff ff       	jmp    c001046a <Device::preOpenPCI(PCIDeviceInfo)>
c001c4b0:	83 c4 1c             	add    esp,0x1c
c001c4b3:	5b                   	pop    ebx
c001c4b4:	5e                   	pop    esi
c001c4b5:	5f                   	pop    edi
c001c4b6:	5d                   	pop    ebp
c001c4b7:	c3                   	ret    

c001c4b8 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001c4b8:	55                   	push   ebp
c001c4b9:	57                   	push   edi
c001c4ba:	56                   	push   esi
c001c4bb:	53                   	push   ebx
c001c4bc:	83 ec 5c             	sub    esp,0x5c
c001c4bf:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001c4c3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c4c7:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c001c4cb:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c001c4d0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c4d4:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c001c4d8:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c001c4dd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c4e1:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c001c4e6:	6a 0c                	push   0xc
c001c4e8:	55                   	push   ebp
c001c4e9:	53                   	push   ebx
c001c4ea:	57                   	push   edi
c001c4eb:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c001c4f2:	e8 03 fc ff ff       	call   c001c0fa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c4f7:	55                   	push   ebp
c001c4f8:	53                   	push   ebx
c001c4f9:	57                   	push   edi
c001c4fa:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c001c501:	e8 82 fc ff ff       	call   c001c188 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001c506:	66 89 44 24 42       	mov    WORD PTR [esp+0x42],ax
c001c50b:	83 c4 24             	add    esp,0x24
c001c50e:	55                   	push   ebp
c001c50f:	53                   	push   ebx
c001c510:	57                   	push   edi
c001c511:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c001c515:	e8 f8 fc ff ff       	call   c001c212 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001c51a:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001c51e:	6a 3c                	push   0x3c
c001c520:	55                   	push   ebp
c001c521:	53                   	push   ebx
c001c522:	57                   	push   edi
c001c523:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c001c52a:	e8 cb fb ff ff       	call   c001c0fa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c52f:	0f b6 c4             	movzx  eax,ah
c001c532:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001c536:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001c53a:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c001c53e:	a1 88 45 02 c0       	mov    eax,ds:0xc0024588
c001c543:	83 c4 24             	add    esp,0x24
c001c546:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001c54c:	83 b8 5c 21 00 00 00 	cmp    DWORD PTR [eax+0x215c],0x0
c001c553:	74 6c                	je     c001c5c1 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c001c555:	31 f6                	xor    esi,esi
c001c557:	8b 15 88 45 02 c0    	mov    edx,DWORD PTR ds:0xc0024588
c001c55d:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c001c563:	39 b2 5c 21 00 00    	cmp    DWORD PTR [edx+0x215c],esi
c001c569:	7e 56                	jle    c001c5c1 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c001c56b:	8d 14 f2             	lea    edx,[edx+esi*8]
c001c56e:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c001c575:	39 cb                	cmp    ebx,ecx
c001c577:	75 45                	jne    c001c5be <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c001c579:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c001c580:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c001c584:	75 38                	jne    c001c5be <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c001c586:	83 ec 0c             	sub    esp,0xc
c001c589:	68 c1 32 02 c0       	push   0xc00232c1
c001c58e:	e8 e4 2b ff ff       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c001c593:	8b 15 88 45 02 c0    	mov    edx,DWORD PTR ds:0xc0024588
c001c599:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c001c59f:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c001c5a7:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c001c5ab:	52                   	push   edx
c001c5ac:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c5b0:	53                   	push   ebx
c001c5b1:	68 e6 32 02 c0       	push   0xc00232e6
c001c5b6:	e8 bc 2b ff ff       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c001c5bb:	83 c4 20             	add    esp,0x20
c001c5be:	46                   	inc    esi
c001c5bf:	eb 96                	jmp    c001c557 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9f>
c001c5c1:	31 d2                	xor    edx,edx
c001c5c3:	83 ec 0c             	sub    esp,0xc
c001c5c6:	55                   	push   ebp
c001c5c7:	53                   	push   ebx
c001c5c8:	57                   	push   edi
c001c5c9:	52                   	push   edx
c001c5ca:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001c5ce:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001c5d5:	e8 7e fc ff ff       	call   c001c258 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c5da:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c001c5de:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001c5e2:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001c5e6:	42                   	inc    edx
c001c5e7:	83 c4 20             	add    esp,0x20
c001c5ea:	83 fa 06             	cmp    edx,0x6
c001c5ed:	75 d4                	jne    c001c5c3 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x10b>
c001c5ef:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001c5f3:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c001c5f7:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c001c5fb:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c001c5ff:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001c603:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c001c607:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001c60c:	86 e0                	xchg   al,ah
c001c60e:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c001c613:	55                   	push   ebp
c001c614:	53                   	push   ebx
c001c615:	57                   	push   edi
c001c616:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c001c61a:	e8 ad fb ff ff       	call   c001c1cc <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001c61f:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001c623:	55                   	push   ebp
c001c624:	53                   	push   ebx
c001c625:	57                   	push   edi
c001c626:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001c62d:	e8 10 fb ff ff       	call   c001c142 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001c632:	83 ec 0c             	sub    esp,0xc
c001c635:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c001c63a:	b9 09 00 00 00       	mov    ecx,0x9
c001c63f:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c001c643:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c001c647:	fc                   	cld    
c001c648:	89 e7                	mov    edi,esp
c001c64a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001c64c:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c001c653:	e8 f0 fc ff ff       	call   c001c348 <PCI::foundDevice(PCIDeviceInfo)>
c001c658:	81 c4 8c 00 00 00    	add    esp,0x8c
c001c65e:	5b                   	pop    ebx
c001c65f:	5e                   	pop    esi
c001c660:	5f                   	pop    edi
c001c661:	5d                   	pop    ebp
c001c662:	c3                   	ret    
c001c663:	90                   	nop

c001c664 <PCI::checkDevice(unsigned char, unsigned char)>:
c001c664:	55                   	push   ebp
c001c665:	57                   	push   edi
c001c666:	56                   	push   esi
c001c667:	53                   	push   ebx
c001c668:	83 ec 0c             	sub    esp,0xc
c001c66b:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001c66f:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001c674:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001c679:	6a 00                	push   0x0
c001c67b:	56                   	push   esi
c001c67c:	57                   	push   edi
c001c67d:	55                   	push   ebp
c001c67e:	e8 bf fa ff ff       	call   c001c142 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001c683:	6a 00                	push   0x0
c001c685:	56                   	push   esi
c001c686:	57                   	push   edi
c001c687:	55                   	push   ebp
c001c688:	e8 2b fe ff ff       	call   c001c4b8 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001c68d:	83 c4 20             	add    esp,0x20
c001c690:	6a 00                	push   0x0
c001c692:	56                   	push   esi
c001c693:	57                   	push   edi
c001c694:	55                   	push   ebp
c001c695:	e8 ca fa ff ff       	call   c001c164 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001c69a:	83 c4 10             	add    esp,0x10
c001c69d:	84 c0                	test   al,al
c001c69f:	79 27                	jns    c001c6c8 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001c6a1:	bb 01 00 00 00       	mov    ebx,0x1
c001c6a6:	53                   	push   ebx
c001c6a7:	56                   	push   esi
c001c6a8:	57                   	push   edi
c001c6a9:	55                   	push   ebp
c001c6aa:	e8 93 fa ff ff       	call   c001c142 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001c6af:	83 c4 10             	add    esp,0x10
c001c6b2:	66 40                	inc    ax
c001c6b4:	74 0c                	je     c001c6c2 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c001c6b6:	53                   	push   ebx
c001c6b7:	56                   	push   esi
c001c6b8:	57                   	push   edi
c001c6b9:	55                   	push   ebp
c001c6ba:	e8 f9 fd ff ff       	call   c001c4b8 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001c6bf:	83 c4 10             	add    esp,0x10
c001c6c2:	43                   	inc    ebx
c001c6c3:	83 fb 08             	cmp    ebx,0x8
c001c6c6:	75 de                	jne    c001c6a6 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001c6c8:	83 c4 0c             	add    esp,0xc
c001c6cb:	5b                   	pop    ebx
c001c6cc:	5e                   	pop    esi
c001c6cd:	5f                   	pop    edi
c001c6ce:	5d                   	pop    ebp
c001c6cf:	c3                   	ret    

c001c6d0 <PCI::detect()>:
c001c6d0:	56                   	push   esi
c001c6d1:	53                   	push   ebx
c001c6d2:	53                   	push   ebx
c001c6d3:	31 db                	xor    ebx,ebx
c001c6d5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c6d9:	6a 00                	push   0x0
c001c6db:	6a 00                	push   0x0
c001c6dd:	6a 00                	push   0x0
c001c6df:	56                   	push   esi
c001c6e0:	e8 7f fa ff ff       	call   c001c164 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001c6e5:	83 c4 10             	add    esp,0x10
c001c6e8:	a8 80                	test   al,0x80
c001c6ea:	75 21                	jne    c001c70d <PCI::detect()+0x3d>
c001c6ec:	51                   	push   ecx
c001c6ed:	51                   	push   ecx
c001c6ee:	6a 00                	push   0x0
c001c6f0:	56                   	push   esi
c001c6f1:	e8 2e fc ff ff       	call   c001c324 <PCI::checkBus(unsigned char)>
c001c6f6:	83 c4 10             	add    esp,0x10
c001c6f9:	eb 24                	jmp    c001c71f <PCI::detect()+0x4f>
c001c6fb:	52                   	push   edx
c001c6fc:	52                   	push   edx
c001c6fd:	53                   	push   ebx
c001c6fe:	43                   	inc    ebx
c001c6ff:	56                   	push   esi
c001c700:	e8 1f fc ff ff       	call   c001c324 <PCI::checkBus(unsigned char)>
c001c705:	83 c4 10             	add    esp,0x10
c001c708:	83 fb 08             	cmp    ebx,0x8
c001c70b:	74 12                	je     c001c71f <PCI::detect()+0x4f>
c001c70d:	53                   	push   ebx
c001c70e:	6a 00                	push   0x0
c001c710:	6a 00                	push   0x0
c001c712:	56                   	push   esi
c001c713:	e8 2a fa ff ff       	call   c001c142 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001c718:	83 c4 10             	add    esp,0x10
c001c71b:	66 40                	inc    ax
c001c71d:	74 dc                	je     c001c6fb <PCI::detect()+0x2b>
c001c71f:	58                   	pop    eax
c001c720:	5b                   	pop    ebx
c001c721:	5e                   	pop    esi
c001c722:	c3                   	ret    
c001c723:	90                   	nop

c001c724 <IDE::close(int, int, void*)>:
c001c724:	83 c8 ff             	or     eax,0xffffffff
c001c727:	c3                   	ret    

c001c728 <IDE::IDE()>:
c001c728:	83 ec 0c             	sub    esp,0xc
c001c72b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c72f:	83 ec 08             	sub    esp,0x8
c001c732:	68 30 33 02 c0       	push   0xc0023330
c001c737:	50                   	push   eax
c001c738:	e8 d1 41 ff ff       	call   c001090e <HardDiskController::HardDiskController(char const*)>
c001c73d:	83 c4 10             	add    esp,0x10
c001c740:	ba 70 35 02 c0       	mov    edx,0xc0023570
c001c745:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c749:	89 10                	mov    DWORD PTR [eax],edx
c001c74b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c74f:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001c756:	90                   	nop
c001c757:	83 c4 0c             	add    esp,0xc
c001c75a:	c3                   	ret    
c001c75b:	90                   	nop

c001c75c <IDE::prepareInterrupt(unsigned char)>:
c001c75c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c761:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c765:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001c76d:	c3                   	ret    

c001c76e <selectDrive(unsigned char, unsigned char)>:
c001c76e:	c3                   	ret    
c001c76f:	90                   	nop

c001c770 <IDE::getBase(unsigned char)>:
c001c770:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001c775:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c779:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001c781:	c3                   	ret    

c001c782 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001c782:	55                   	push   ebp
c001c783:	57                   	push   edi
c001c784:	56                   	push   esi
c001c785:	53                   	push   ebx
c001c786:	83 ec 1c             	sub    esp,0x1c
c001c789:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001c78d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001c791:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001c795:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c799:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001c79c:	80 f9 03             	cmp    cl,0x3
c001c79f:	77 51                	ja     c001c7f2 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c001c7a1:	0f b6 f2             	movzx  esi,dl
c001c7a4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c7a8:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001c7ab:	0f b6 db             	movzx  ebx,bl
c001c7ae:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c001c7b2:	83 ca 80             	or     edx,0xffffff80
c001c7b5:	0f b6 d2             	movzx  edx,dl
c001c7b8:	52                   	push   edx
c001c7b9:	6a 0c                	push   0xc
c001c7bb:	56                   	push   esi
c001c7bc:	57                   	push   edi
c001c7bd:	e8 c0 ff ff ff       	call   c001c782 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c7c2:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001c7c7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c7cb:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001c7cf:	ee                   	out    dx,al
c001c7d0:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001c7d5:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001c7d9:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001c7dd:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001c7e1:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001c7e9:	83 c4 2c             	add    esp,0x2c
c001c7ec:	5b                   	pop    ebx
c001c7ed:	5e                   	pop    esi
c001c7ee:	5f                   	pop    edi
c001c7ef:	5d                   	pop    ebp
c001c7f0:	eb 90                	jmp    c001c782 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c7f2:	80 fb 07             	cmp    bl,0x7
c001c7f5:	77 12                	ja     c001c809 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c001c7f7:	0f b6 d2             	movzx  edx,dl
c001c7fa:	0f b6 db             	movzx  ebx,bl
c001c7fd:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c001c805:	89 da                	mov    edx,ebx
c001c807:	eb 2f                	jmp    c001c838 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001c809:	80 fb 0d             	cmp    bl,0xd
c001c80c:	77 13                	ja     c001c821 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c001c80e:	0f b6 d2             	movzx  edx,dl
c001c811:	0f b6 db             	movzx  ebx,bl
c001c814:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001c81b:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001c81f:	eb 17                	jmp    c001c838 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001c821:	80 fb 15             	cmp    bl,0x15
c001c824:	77 13                	ja     c001c839 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001c826:	0f b6 d2             	movzx  edx,dl
c001c829:	0f b6 db             	movzx  ebx,bl
c001c82c:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001c834:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001c838:	ee                   	out    dx,al
c001c839:	83 c4 1c             	add    esp,0x1c
c001c83c:	5b                   	pop    ebx
c001c83d:	5e                   	pop    esi
c001c83e:	5f                   	pop    edi
c001c83f:	5d                   	pop    ebp
c001c840:	c3                   	ret    
c001c841:	90                   	nop

c001c842 <IDE::read(unsigned char, unsigned char)>:
c001c842:	55                   	push   ebp
c001c843:	57                   	push   edi
c001c844:	56                   	push   esi
c001c845:	53                   	push   ebx
c001c846:	83 ec 1c             	sub    esp,0x1c
c001c849:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001c84d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001c851:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001c855:	8d 43 f8             	lea    eax,[ebx-0x8]
c001c858:	3c 03                	cmp    al,0x3
c001c85a:	77 43                	ja     c001c89f <IDE::read(unsigned char, unsigned char)+0x5d>
c001c85c:	0f b6 f2             	movzx  esi,dl
c001c85f:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001c862:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c001c866:	83 c8 80             	or     eax,0xffffff80
c001c869:	0f b6 c0             	movzx  eax,al
c001c86c:	50                   	push   eax
c001c86d:	6a 0c                	push   0xc
c001c86f:	56                   	push   esi
c001c870:	57                   	push   edi
c001c871:	e8 0c ff ff ff       	call   c001c782 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c876:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c001c87b:	0f b6 c3             	movzx  eax,bl
c001c87e:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c001c882:	ec                   	in     al,dx
c001c883:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001c888:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001c88c:	52                   	push   edx
c001c88d:	6a 0c                	push   0xc
c001c88f:	56                   	push   esi
c001c890:	57                   	push   edi
c001c891:	e8 ec fe ff ff       	call   c001c782 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c896:	83 c4 20             	add    esp,0x20
c001c899:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001c89d:	eb 49                	jmp    c001c8e8 <IDE::read(unsigned char, unsigned char)+0xa6>
c001c89f:	80 fb 07             	cmp    bl,0x7
c001c8a2:	77 12                	ja     c001c8b6 <IDE::read(unsigned char, unsigned char)+0x74>
c001c8a4:	0f b6 d2             	movzx  edx,dl
c001c8a7:	0f b6 c3             	movzx  eax,bl
c001c8aa:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c001c8b2:	89 c2                	mov    edx,eax
c001c8b4:	eb 31                	jmp    c001c8e7 <IDE::read(unsigned char, unsigned char)+0xa5>
c001c8b6:	80 fb 0d             	cmp    bl,0xd
c001c8b9:	77 13                	ja     c001c8ce <IDE::read(unsigned char, unsigned char)+0x8c>
c001c8bb:	0f b6 d2             	movzx  edx,dl
c001c8be:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c001c8c5:	0f b6 d3             	movzx  edx,bl
c001c8c8:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001c8cc:	eb 19                	jmp    c001c8e7 <IDE::read(unsigned char, unsigned char)+0xa5>
c001c8ce:	31 c0                	xor    eax,eax
c001c8d0:	80 fb 15             	cmp    bl,0x15
c001c8d3:	77 13                	ja     c001c8e8 <IDE::read(unsigned char, unsigned char)+0xa6>
c001c8d5:	0f b6 d2             	movzx  edx,dl
c001c8d8:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c001c8e0:	0f b6 d3             	movzx  edx,bl
c001c8e3:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001c8e7:	ec                   	in     al,dx
c001c8e8:	83 c4 1c             	add    esp,0x1c
c001c8eb:	5b                   	pop    ebx
c001c8ec:	5e                   	pop    esi
c001c8ed:	5f                   	pop    edi
c001c8ee:	5d                   	pop    ebp
c001c8ef:	c3                   	ret    

c001c8f0 <IDE::waitInterrupt(unsigned char)>:
c001c8f0:	57                   	push   edi
c001c8f1:	56                   	push   esi
c001c8f2:	31 f6                	xor    esi,esi
c001c8f4:	53                   	push   ebx
c001c8f5:	83 ec 10             	sub    esp,0x10
c001c8f8:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c001c8fc:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001c900:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001c904:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001c909:	8a 9c 07 6c 02 00 00 	mov    bl,BYTE PTR [edi+eax*1+0x26c]
c001c910:	84 db                	test   bl,bl
c001c912:	75 37                	jne    c001c94b <IDE::waitInterrupt(unsigned char)+0x5b>
c001c914:	52                   	push   edx
c001c915:	6a 0c                	push   0xc
c001c917:	50                   	push   eax
c001c918:	57                   	push   edi
c001c919:	e8 24 ff ff ff       	call   c001c842 <IDE::read(unsigned char, unsigned char)>
c001c91e:	83 c4 10             	add    esp,0x10
c001c921:	a8 01                	test   al,0x1
c001c923:	75 2e                	jne    c001c953 <IDE::waitInterrupt(unsigned char)+0x63>
c001c925:	f7 c6 04 00 00 00    	test   esi,0x4
c001c92b:	75 16                	jne    c001c943 <IDE::waitInterrupt(unsigned char)+0x53>
c001c92d:	83 fe 32             	cmp    esi,0x32
c001c930:	7e 11                	jle    c001c943 <IDE::waitInterrupt(unsigned char)+0x53>
c001c932:	50                   	push   eax
c001c933:	50                   	push   eax
c001c934:	6a 00                	push   0x0
c001c936:	68 80 96 98 00       	push   0x989680
c001c93b:	e8 4d c5 ff ff       	call   c0018e8d <nanoSleep(unsigned long long)>
c001c940:	83 c4 10             	add    esp,0x10
c001c943:	83 fe 3c             	cmp    esi,0x3c
c001c946:	74 0b                	je     c001c953 <IDE::waitInterrupt(unsigned char)+0x63>
c001c948:	46                   	inc    esi
c001c949:	eb b9                	jmp    c001c904 <IDE::waitInterrupt(unsigned char)+0x14>
c001c94b:	c6 84 07 6c 02 00 00 00 	mov    BYTE PTR [edi+eax*1+0x26c],0x0
c001c953:	83 c4 10             	add    esp,0x10
c001c956:	88 d8                	mov    al,bl
c001c958:	5b                   	pop    ebx
c001c959:	5e                   	pop    esi
c001c95a:	5f                   	pop    edi
c001c95b:	c3                   	ret    

c001c95c <ideChannel0IRQHandler(regs*, void*)>:
c001c95c:	83 ec 10             	sub    esp,0x10
c001c95f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c963:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001c96a:	6a 07                	push   0x7
c001c96c:	6a 00                	push   0x0
c001c96e:	50                   	push   eax
c001c96f:	e8 ce fe ff ff       	call   c001c842 <IDE::read(unsigned char, unsigned char)>
c001c974:	83 c4 1c             	add    esp,0x1c
c001c977:	c3                   	ret    

c001c978 <ideChannel1IRQHandler(regs*, void*)>:
c001c978:	83 ec 10             	sub    esp,0x10
c001c97b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c97f:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001c986:	6a 07                	push   0x7
c001c988:	6a 01                	push   0x1
c001c98a:	50                   	push   eax
c001c98b:	e8 b2 fe ff ff       	call   c001c842 <IDE::read(unsigned char, unsigned char)>
c001c990:	83 c4 1c             	add    esp,0x1c
c001c993:	c3                   	ret    

c001c994 <IDE::enableIRQs(unsigned char, bool)>:
c001c994:	57                   	push   edi
c001c995:	56                   	push   esi
c001c996:	be 04 00 00 00       	mov    esi,0x4
c001c99b:	53                   	push   ebx
c001c99c:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c001c9a1:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001c9a6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c9aa:	0f 94 c0             	sete   al
c001c9ad:	01 c0                	add    eax,eax
c001c9af:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c001c9b6:	0f b6 c0             	movzx  eax,al
c001c9b9:	50                   	push   eax
c001c9ba:	6a 0c                	push   0xc
c001c9bc:	57                   	push   edi
c001c9bd:	53                   	push   ebx
c001c9be:	e8 bf fd ff ff       	call   c001c782 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c9c3:	83 c4 10             	add    esp,0x10
c001c9c6:	50                   	push   eax
c001c9c7:	6a 0c                	push   0xc
c001c9c9:	57                   	push   edi
c001c9ca:	53                   	push   ebx
c001c9cb:	e8 72 fe ff ff       	call   c001c842 <IDE::read(unsigned char, unsigned char)>
c001c9d0:	83 c4 10             	add    esp,0x10
c001c9d3:	4e                   	dec    esi
c001c9d4:	75 f0                	jne    c001c9c6 <IDE::enableIRQs(unsigned char, bool)+0x32>
c001c9d6:	5b                   	pop    ebx
c001c9d7:	5e                   	pop    esi
c001c9d8:	5f                   	pop    edi
c001c9d9:	c3                   	ret    

c001c9da <IDE::open(int, int, void*)>:
c001c9da:	55                   	push   ebp
c001c9db:	57                   	push   edi
c001c9dc:	56                   	push   esi
c001c9dd:	53                   	push   ebx
c001c9de:	83 ec 1c             	sub    esp,0x1c
c001c9e1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001c9e5:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001c9ee:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001c9f7:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001c9fe:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001ca05:	0f 85 b2 02 00 00    	jne    c001ccbd <IDE::open(int, int, void*)+0x2e3>
c001ca0b:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001ca11:	88 04 24             	mov    BYTE PTR [esp],al
c001ca14:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001ca17:	83 e0 7f             	and    eax,0x7f
c001ca1a:	83 f8 05             	cmp    eax,0x5
c001ca1d:	74 05                	je     c001ca24 <IDE::open(int, int, void*)+0x4a>
c001ca1f:	83 f8 0f             	cmp    eax,0xf
c001ca22:	75 32                	jne    c001ca56 <IDE::open(int, int, void*)+0x7c>
c001ca24:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001ca2a:	83 e0 fc             	and    eax,0xfffffffc
c001ca2d:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001ca34:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001ca3a:	83 e0 fc             	and    eax,0xfffffffc
c001ca3d:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001ca44:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001ca4a:	83 e0 fc             	and    eax,0xfffffffc
c001ca4d:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001ca54:	eb 14                	jmp    c001ca6a <IDE::open(int, int, void*)+0x90>
c001ca56:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001ca60:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001ca6a:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001ca71:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001ca78:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ca7c:	89 c6                	mov    esi,eax
c001ca7e:	89 e8                	mov    eax,ebp
c001ca80:	bf f8 0c 00 00       	mov    edi,0xcf8
c001ca85:	c1 e6 10             	shl    esi,0x10
c001ca88:	89 fa                	mov    edx,edi
c001ca8a:	c1 e0 0b             	shl    eax,0xb
c001ca8d:	09 f0                	or     eax,esi
c001ca8f:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c001ca96:	c1 e6 08             	shl    esi,0x8
c001ca99:	09 c6                	or     esi,eax
c001ca9b:	89 f0                	mov    eax,esi
c001ca9d:	0d 08 00 00 80       	or     eax,0x80000008
c001caa2:	ef                   	out    dx,eax
c001caa3:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001caa8:	89 ca                	mov    edx,ecx
c001caaa:	ed                   	in     eax,dx
c001caab:	c1 e8 10             	shr    eax,0x10
c001caae:	3d ff ff 00 00       	cmp    eax,0xffff
c001cab3:	0f 84 f3 00 00 00    	je     c001cbac <IDE::open(int, int, void*)+0x1d2>
c001cab9:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001cabf:	89 fa                	mov    edx,edi
c001cac1:	89 f0                	mov    eax,esi
c001cac3:	ef                   	out    dx,eax
c001cac4:	b0 fe                	mov    al,0xfe
c001cac6:	89 ca                	mov    edx,ecx
c001cac8:	ee                   	out    dx,al
c001cac9:	89 f0                	mov    eax,esi
c001cacb:	89 fa                	mov    edx,edi
c001cacd:	ef                   	out    dx,eax
c001cace:	89 ca                	mov    edx,ecx
c001cad0:	ed                   	in     eax,dx
c001cad1:	3c fe                	cmp    al,0xfe
c001cad3:	0f 85 a9 00 00 00    	jne    c001cb82 <IDE::open(int, int, void*)+0x1a8>
c001cad9:	8b 15 88 45 02 c0    	mov    edx,DWORD PTR ds:0xc0024588
c001cadf:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c001cae6:	74 33                	je     c001cb1b <IDE::open(int, int, void*)+0x141>
c001cae8:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001caee:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001caf2:	40                   	inc    eax
c001caf3:	83 ec 0c             	sub    esp,0xc
c001caf6:	0f b6 c0             	movzx  eax,al
c001caf9:	50                   	push   eax
c001cafa:	55                   	push   ebp
c001cafb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001caff:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c001cb05:	51                   	push   ecx
c001cb06:	e8 99 72 ff ff       	call   c0013da4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001cb0b:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001cb10:	83 c4 1c             	add    esp,0x1c
c001cb13:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001cb19:	eb 0a                	jmp    c001cb25 <IDE::open(int, int, void*)+0x14b>
c001cb1b:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001cb25:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001cb2c:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001cb33:	c1 e1 10             	shl    ecx,0x10
c001cb36:	bf f8 0c 00 00       	mov    edi,0xcf8
c001cb3b:	c1 e0 08             	shl    eax,0x8
c001cb3e:	89 fa                	mov    edx,edi
c001cb40:	09 c1                	or     ecx,eax
c001cb42:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001cb49:	c1 e0 0b             	shl    eax,0xb
c001cb4c:	09 c1                	or     ecx,eax
c001cb4e:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001cb54:	89 c8                	mov    eax,ecx
c001cb56:	ef                   	out    dx,eax
c001cb57:	be fc 0c 00 00       	mov    esi,0xcfc
c001cb5c:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001cb62:	89 f2                	mov    edx,esi
c001cb64:	ee                   	out    dx,al
c001cb65:	89 c8                	mov    eax,ecx
c001cb67:	89 fa                	mov    edx,edi
c001cb69:	ef                   	out    dx,eax
c001cb6a:	89 f2                	mov    edx,esi
c001cb6c:	ed                   	in     eax,dx
c001cb6d:	0f b6 c0             	movzx  eax,al
c001cb70:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001cb76:	74 44                	je     c001cbbc <IDE::open(int, int, void*)+0x1e2>
c001cb78:	83 ec 0c             	sub    esp,0xc
c001cb7b:	68 48 33 02 c0       	push   0xc0023348
c001cb80:	eb 32                	jmp    c001cbb4 <IDE::open(int, int, void*)+0x1da>
c001cb82:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001cb8b:	75 15                	jne    c001cba2 <IDE::open(int, int, void*)+0x1c8>
c001cb8d:	80 3c 24 8a          	cmp    BYTE PTR [esp],0x8a
c001cb91:	74 06                	je     c001cb99 <IDE::open(int, int, void*)+0x1bf>
c001cb93:	80 3c 24 80          	cmp    BYTE PTR [esp],0x80
c001cb97:	75 09                	jne    c001cba2 <IDE::open(int, int, void*)+0x1c8>
c001cb99:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001cba0:	eb 1a                	jmp    c001cbbc <IDE::open(int, int, void*)+0x1e2>
c001cba2:	83 ec 0c             	sub    esp,0xc
c001cba5:	68 50 33 02 c0       	push   0xc0023350
c001cbaa:	eb 08                	jmp    c001cbb4 <IDE::open(int, int, void*)+0x1da>
c001cbac:	83 ec 0c             	sub    esp,0xc
c001cbaf:	68 81 33 02 c0       	push   0xc0023381
c001cbb4:	e8 89 8d ff ff       	call   c0015942 <Krnl::panic(char const*)>
c001cbb9:	83 c4 10             	add    esp,0x10
c001cbbc:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c001cbc3:	79 1a                	jns    c001cbdf <IDE::open(int, int, void*)+0x205>
c001cbc5:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001cbcb:	83 e0 fc             	and    eax,0xfffffffc
c001cbce:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001cbd5:	83 c0 08             	add    eax,0x8
c001cbd8:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001cbdf:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001cbe5:	89 c2                	mov    edx,eax
c001cbe7:	83 e2 0f             	and    edx,0xf
c001cbea:	66 83 fa 08          	cmp    dx,0x8
c001cbee:	75 0a                	jne    c001cbfa <IDE::open(int, int, void*)+0x220>
c001cbf0:	83 e8 02             	sub    eax,0x2
c001cbf3:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001cbfa:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001cc00:	89 c2                	mov    edx,eax
c001cc02:	83 e2 0f             	and    edx,0xf
c001cc05:	66 83 fa 08          	cmp    dx,0x8
c001cc09:	75 0a                	jne    c001cc15 <IDE::open(int, int, void*)+0x23b>
c001cc0b:	83 e8 02             	sub    eax,0x2
c001cc0e:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001cc15:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001cc1c:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001cc23:	89 d0                	mov    eax,edx
c001cc25:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001cc28:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001cc2c:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001cc30:	8d 4a 01             	lea    ecx,[edx+0x1]
c001cc33:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001cc38:	0f b6 c9             	movzx  ecx,cl
c001cc3b:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001cc42:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001cc45:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001cc49:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001cc4d:	8d 50 02             	lea    edx,[eax+0x2]
c001cc50:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001cc55:	0f b6 d2             	movzx  edx,dl
c001cc58:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001cc5e:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001cc61:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001cc65:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001cc69:	8d 48 03             	lea    ecx,[eax+0x3]
c001cc6c:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001cc71:	0f b6 c9             	movzx  ecx,cl
c001cc74:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001cc7a:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001cc7d:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001cc81:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001cc85:	8d 50 04             	lea    edx,[eax+0x4]
c001cc88:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001cc8e:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001cc93:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001cc9a:	66 85 f6             	test   si,si
c001cc9d:	74 3e                	je     c001ccdd <IDE::open(int, int, void*)+0x303>
c001cc9f:	0f b6 d2             	movzx  edx,dl
c001cca2:	83 c0 05             	add    eax,0x5
c001cca5:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001cca8:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001ccac:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001ccb0:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001ccb6:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001ccbb:	eb 20                	jmp    c001ccdd <IDE::open(int, int, void*)+0x303>
c001ccbd:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001ccc7:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001ccd1:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001ccd8:	e9 02 ff ff ff       	jmp    c001cbdf <IDE::open(int, int, void*)+0x205>
c001ccdd:	52                   	push   edx
c001ccde:	52                   	push   edx
c001ccdf:	6a 00                	push   0x0
c001cce1:	53                   	push   ebx
c001cce2:	e8 75 fa ff ff       	call   c001c75c <IDE::prepareInterrupt(unsigned char)>
c001cce7:	59                   	pop    ecx
c001cce8:	5e                   	pop    esi
c001cce9:	6a 01                	push   0x1
c001cceb:	53                   	push   ebx
c001ccec:	e8 6b fa ff ff       	call   c001c75c <IDE::prepareInterrupt(unsigned char)>
c001ccf1:	83 c4 0c             	add    esp,0xc
c001ccf4:	6a 00                	push   0x0
c001ccf6:	6a 00                	push   0x0
c001ccf8:	53                   	push   ebx
c001ccf9:	e8 96 fc ff ff       	call   c001c994 <IDE::enableIRQs(unsigned char, bool)>
c001ccfe:	83 c4 0c             	add    esp,0xc
c001cd01:	6a 00                	push   0x0
c001cd03:	6a 01                	push   0x1
c001cd05:	53                   	push   ebx
c001cd06:	e8 89 fc ff ff       	call   c001c994 <IDE::enableIRQs(unsigned char, bool)>
c001cd0b:	83 c4 10             	add    esp,0x10
c001cd0e:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001cd15:	74 40                	je     c001cd57 <IDE::open(int, int, void*)+0x37d>
c001cd17:	83 ec 0c             	sub    esp,0xc
c001cd1a:	68 ab 33 02 c0       	push   0xc00233ab
c001cd1f:	e8 53 24 ff ff       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c001cd24:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cd27:	6a 01                	push   0x1
c001cd29:	68 5c c9 01 c0       	push   0xc001c95c
c001cd2e:	6a 0e                	push   0xe
c001cd30:	53                   	push   ebx
c001cd31:	e8 aa 37 ff ff       	call   c00104e0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001cd36:	83 c4 14             	add    esp,0x14
c001cd39:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001cd3f:	53                   	push   ebx
c001cd40:	6a 01                	push   0x1
c001cd42:	68 78 c9 01 c0       	push   0xc001c978
c001cd47:	6a 0f                	push   0xf
c001cd49:	53                   	push   ebx
c001cd4a:	e8 91 37 ff ff       	call   c00104e0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001cd4f:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001cd55:	eb 4a                	jmp    c001cda1 <IDE::open(int, int, void*)+0x3c7>
c001cd57:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001cd61:	50                   	push   eax
c001cd62:	6a 0f                	push   0xf
c001cd64:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001cd6a:	68 c7 33 02 c0       	push   0xc00233c7
c001cd6f:	e8 03 24 ff ff       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c001cd74:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cd77:	6a 00                	push   0x0
c001cd79:	68 5c c9 01 c0       	push   0xc001c95c
c001cd7e:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001cd84:	53                   	push   ebx
c001cd85:	e8 56 37 ff ff       	call   c00104e0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001cd8a:	83 c4 14             	add    esp,0x14
c001cd8d:	53                   	push   ebx
c001cd8e:	6a 00                	push   0x0
c001cd90:	68 78 c9 01 c0       	push   0xc001c978
c001cd95:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001cd9b:	53                   	push   ebx
c001cd9c:	e8 3f 37 ff ff       	call   c00104e0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001cda1:	83 c4 20             	add    esp,0x20
c001cda4:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cda6:	83 ec 0c             	sub    esp,0xc
c001cda9:	53                   	push   ebx
c001cdaa:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001cdad:	83 c4 0c             	add    esp,0xc
c001cdb0:	6a 07                	push   0x7
c001cdb2:	6a 00                	push   0x0
c001cdb4:	53                   	push   ebx
c001cdb5:	e8 88 fa ff ff       	call   c001c842 <IDE::read(unsigned char, unsigned char)>
c001cdba:	83 c4 0c             	add    esp,0xc
c001cdbd:	6a 07                	push   0x7
c001cdbf:	6a 01                	push   0x1
c001cdc1:	53                   	push   ebx
c001cdc2:	e8 7b fa ff ff       	call   c001c842 <IDE::read(unsigned char, unsigned char)>
c001cdc7:	83 c4 0c             	add    esp,0xc
c001cdca:	6a 01                	push   0x1
c001cdcc:	6a 00                	push   0x0
c001cdce:	53                   	push   ebx
c001cdcf:	e8 c0 fb ff ff       	call   c001c994 <IDE::enableIRQs(unsigned char, bool)>
c001cdd4:	83 c4 0c             	add    esp,0xc
c001cdd7:	6a 01                	push   0x1
c001cdd9:	6a 01                	push   0x1
c001cddb:	53                   	push   ebx
c001cddc:	e8 b3 fb ff ff       	call   c001c994 <IDE::enableIRQs(unsigned char, bool)>
c001cde1:	83 c4 2c             	add    esp,0x2c
c001cde4:	31 c0                	xor    eax,eax
c001cde6:	5b                   	pop    ebx
c001cde7:	5e                   	pop    esi
c001cde8:	5f                   	pop    edi
c001cde9:	5d                   	pop    ebp
c001cdea:	c3                   	ret    
c001cdeb:	90                   	nop

c001cdec <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001cdec:	55                   	push   ebp
c001cded:	57                   	push   edi
c001cdee:	56                   	push   esi
c001cdef:	53                   	push   ebx
c001cdf0:	83 ec 1c             	sub    esp,0x1c
c001cdf3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001cdf7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001cdfb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001cdff:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001ce03:	8d 50 f8             	lea    edx,[eax-0x8]
c001ce06:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001ce0a:	80 fa 03             	cmp    dl,0x3
c001ce0d:	77 5d                	ja     c001ce6c <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c001ce0f:	0f b6 db             	movzx  ebx,bl
c001ce12:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001ce16:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ce1a:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001ce1d:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c001ce21:	83 ca 80             	or     edx,0xffffff80
c001ce24:	0f b6 d2             	movzx  edx,dl
c001ce27:	52                   	push   edx
c001ce28:	6a 0c                	push   0xc
c001ce2a:	53                   	push   ebx
c001ce2b:	56                   	push   esi
c001ce2c:	e8 51 f9 ff ff       	call   c001c782 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ce31:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ce35:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001ce3a:	0f b6 c0             	movzx  eax,al
c001ce3d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001ce41:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c001ce45:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001ce47:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001ce4c:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001ce50:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001ce54:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001ce58:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001ce60:	83 c4 2c             	add    esp,0x2c
c001ce63:	5b                   	pop    ebx
c001ce64:	5e                   	pop    esi
c001ce65:	5f                   	pop    edi
c001ce66:	5d                   	pop    ebp
c001ce67:	e9 16 f9 ff ff       	jmp    c001c782 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ce6c:	3c 07                	cmp    al,0x7
c001ce6e:	77 10                	ja     c001ce80 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c001ce70:	0f b6 db             	movzx  ebx,bl
c001ce73:	0f b6 d0             	movzx  edx,al
c001ce76:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c001ce7e:	eb 2d                	jmp    c001cead <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001ce80:	3c 0d                	cmp    al,0xd
c001ce82:	77 13                	ja     c001ce97 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c001ce84:	0f b6 db             	movzx  ebx,bl
c001ce87:	0f b6 c0             	movzx  eax,al
c001ce8a:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c001ce91:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c001ce95:	eb 16                	jmp    c001cead <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001ce97:	3c 15                	cmp    al,0x15
c001ce99:	77 14                	ja     c001ceaf <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c001ce9b:	0f b6 db             	movzx  ebx,bl
c001ce9e:	0f b6 c0             	movzx  eax,al
c001cea1:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c001cea9:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c001cead:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001ceaf:	83 c4 1c             	add    esp,0x1c
c001ceb2:	5b                   	pop    ebx
c001ceb3:	5e                   	pop    esi
c001ceb4:	5f                   	pop    edi
c001ceb5:	5d                   	pop    ebp
c001ceb6:	c3                   	ret    
c001ceb7:	90                   	nop

c001ceb8 <IDE::detect()>:
c001ceb8:	55                   	push   ebp
c001ceb9:	57                   	push   edi
c001ceba:	56                   	push   esi
c001cebb:	53                   	push   ebx
c001cebc:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001cec2:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001cec9:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001ced0:	0f 85 c0 02 00 00    	jne    c001d196 <IDE::detect()+0x2de>
c001ced6:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001cedd:	31 f6                	xor    esi,esi
c001cedf:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001cee7:	31 ed                	xor    ebp,ebp
c001cee9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ceed:	c1 e0 06             	shl    eax,0x6
c001cef0:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001cef8:	89 e8                	mov    eax,ebp
c001cefa:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001cefe:	c1 e0 04             	shl    eax,0x4
c001cf01:	83 c8 a0             	or     eax,0xffffffa0
c001cf04:	0f b6 c0             	movzx  eax,al
c001cf07:	50                   	push   eax
c001cf08:	6a 06                	push   0x6
c001cf0a:	56                   	push   esi
c001cf0b:	53                   	push   ebx
c001cf0c:	e8 71 f8 ff ff       	call   c001c782 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf11:	83 c4 0c             	add    esp,0xc
c001cf14:	6a 0c                	push   0xc
c001cf16:	56                   	push   esi
c001cf17:	53                   	push   ebx
c001cf18:	e8 25 f9 ff ff       	call   c001c842 <IDE::read(unsigned char, unsigned char)>
c001cf1d:	83 c4 0c             	add    esp,0xc
c001cf20:	6a 0c                	push   0xc
c001cf22:	56                   	push   esi
c001cf23:	53                   	push   ebx
c001cf24:	e8 19 f9 ff ff       	call   c001c842 <IDE::read(unsigned char, unsigned char)>
c001cf29:	83 c4 0c             	add    esp,0xc
c001cf2c:	6a 0c                	push   0xc
c001cf2e:	56                   	push   esi
c001cf2f:	53                   	push   ebx
c001cf30:	e8 0d f9 ff ff       	call   c001c842 <IDE::read(unsigned char, unsigned char)>
c001cf35:	83 c4 0c             	add    esp,0xc
c001cf38:	6a 0c                	push   0xc
c001cf3a:	56                   	push   esi
c001cf3b:	53                   	push   ebx
c001cf3c:	e8 01 f9 ff ff       	call   c001c842 <IDE::read(unsigned char, unsigned char)>
c001cf41:	68 ec 00 00 00       	push   0xec
c001cf46:	6a 07                	push   0x7
c001cf48:	56                   	push   esi
c001cf49:	53                   	push   ebx
c001cf4a:	e8 33 f8 ff ff       	call   c001c782 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf4f:	83 c4 1c             	add    esp,0x1c
c001cf52:	6a 0c                	push   0xc
c001cf54:	56                   	push   esi
c001cf55:	53                   	push   ebx
c001cf56:	e8 e7 f8 ff ff       	call   c001c842 <IDE::read(unsigned char, unsigned char)>
c001cf5b:	83 c4 0c             	add    esp,0xc
c001cf5e:	6a 0c                	push   0xc
c001cf60:	56                   	push   esi
c001cf61:	53                   	push   ebx
c001cf62:	e8 db f8 ff ff       	call   c001c842 <IDE::read(unsigned char, unsigned char)>
c001cf67:	83 c4 0c             	add    esp,0xc
c001cf6a:	6a 0c                	push   0xc
c001cf6c:	56                   	push   esi
c001cf6d:	53                   	push   ebx
c001cf6e:	e8 cf f8 ff ff       	call   c001c842 <IDE::read(unsigned char, unsigned char)>
c001cf73:	83 c4 0c             	add    esp,0xc
c001cf76:	6a 0c                	push   0xc
c001cf78:	56                   	push   esi
c001cf79:	53                   	push   ebx
c001cf7a:	e8 c3 f8 ff ff       	call   c001c842 <IDE::read(unsigned char, unsigned char)>
c001cf7f:	83 c4 0c             	add    esp,0xc
c001cf82:	6a 0c                	push   0xc
c001cf84:	56                   	push   esi
c001cf85:	53                   	push   ebx
c001cf86:	e8 b7 f8 ff ff       	call   c001c842 <IDE::read(unsigned char, unsigned char)>
c001cf8b:	83 c4 10             	add    esp,0x10
c001cf8e:	84 c0                	test   al,al
c001cf90:	0f 84 8b 01 00 00    	je     c001d121 <IDE::detect()+0x269>
c001cf96:	31 ff                	xor    edi,edi
c001cf98:	50                   	push   eax
c001cf99:	6a 0c                	push   0xc
c001cf9b:	56                   	push   esi
c001cf9c:	53                   	push   ebx
c001cf9d:	e8 a0 f8 ff ff       	call   c001c842 <IDE::read(unsigned char, unsigned char)>
c001cfa2:	83 c4 10             	add    esp,0x10
c001cfa5:	a8 01                	test   al,0x1
c001cfa7:	0f 85 8e 01 00 00    	jne    c001d13b <IDE::detect()+0x283>
c001cfad:	84 c0                	test   al,al
c001cfaf:	78 04                	js     c001cfb5 <IDE::detect()+0xfd>
c001cfb1:	a8 08                	test   al,0x8
c001cfb3:	75 27                	jne    c001cfdc <IDE::detect()+0x124>
c001cfb5:	47                   	inc    edi
c001cfb6:	81 ff 17 01 00 00    	cmp    edi,0x117
c001cfbc:	7e da                	jle    c001cf98 <IDE::detect()+0xe0>
c001cfbe:	50                   	push   eax
c001cfbf:	50                   	push   eax
c001cfc0:	6a 00                	push   0x0
c001cfc2:	68 40 4b 4c 00       	push   0x4c4b40
c001cfc7:	e8 c1 be ff ff       	call   c0018e8d <nanoSleep(unsigned long long)>
c001cfcc:	83 c4 10             	add    esp,0x10
c001cfcf:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001cfd5:	75 c1                	jne    c001cf98 <IDE::detect()+0xe0>
c001cfd7:	e9 5f 01 00 00       	jmp    c001d13b <IDE::detect()+0x283>
c001cfdc:	31 c9                	xor    ecx,ecx
c001cfde:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001cfe2:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001cfe6:	83 ec 0c             	sub    esp,0xc
c001cfe9:	68 80 00 00 00       	push   0x80
c001cfee:	57                   	push   edi
c001cfef:	6a 00                	push   0x0
c001cff1:	56                   	push   esi
c001cff2:	53                   	push   ebx
c001cff3:	e8 f4 fd ff ff       	call   c001cdec <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001cff8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cffc:	c1 e0 06             	shl    eax,0x6
c001cfff:	01 d8                	add    eax,ebx
c001d001:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001d006:	89 d1                	mov    ecx,edx
c001d008:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001d00f:	89 f2                	mov    edx,esi
c001d011:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001d018:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001d01e:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001d022:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001d028:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d02c:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001d033:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001d03b:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001d042:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001d04a:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001d050:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001d057:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001d05d:	8d 54 24 58          	lea    edx,[esp+0x58]
c001d061:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001d065:	83 c4 20             	add    esp,0x20
c001d068:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001d06b:	83 c7 02             	add    edi,0x2
c001d06e:	88 90 80 01 00 00    	mov    BYTE PTR [eax+0x180],dl
c001d074:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001d077:	88 90 81 01 00 00    	mov    BYTE PTR [eax+0x181],dl
c001d07d:	83 c0 02             	add    eax,0x2
c001d080:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c001d084:	75 e2                	jne    c001d068 <IDE::detect()+0x1b0>
c001d086:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d08a:	c1 e0 06             	shl    eax,0x6
c001d08d:	01 d8                	add    eax,ebx
c001d08f:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c001d095:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001d09c:	66 c1 ea 09          	shr    dx,0x9
c001d0a0:	83 e2 01             	and    edx,0x1
c001d0a3:	84 c9                	test   cl,cl
c001d0a5:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001d0ab:	75 2f                	jne    c001d0dc <IDE::detect()+0x224>
c001d0ad:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c001d0b3:	85 c0                	test   eax,eax
c001d0b5:	74 66                	je     c001d11d <IDE::detect()+0x265>
c001d0b7:	50                   	push   eax
c001d0b8:	55                   	push   ebp
c001d0b9:	56                   	push   esi
c001d0ba:	68 e3 33 02 c0       	push   0xc00233e3
c001d0bf:	e8 b3 20 ff ff       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c001d0c4:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001d0cb:	e8 72 1f ff ff       	call   c000f042 <operator new(unsigned long)>
c001d0d0:	89 c7                	mov    edi,eax
c001d0d2:	89 04 24             	mov    DWORD PTR [esp],eax
c001d0d5:	e8 f4 02 00 00       	call   c001d3ce <ATA::ATA()>
c001d0da:	eb 28                	jmp    c001d104 <IDE::detect()+0x24c>
c001d0dc:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c001d0e2:	55                   	push   ebp
c001d0e3:	56                   	push   esi
c001d0e4:	68 12 34 02 c0       	push   0xc0023412
c001d0e9:	e8 89 20 ff ff       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c001d0ee:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c001d0f5:	e8 48 1f ff ff       	call   c000f042 <operator new(unsigned long)>
c001d0fa:	89 c7                	mov    edi,eax
c001d0fc:	89 04 24             	mov    DWORD PTR [esp],eax
c001d0ff:	e8 1e 09 00 00       	call   c001da22 <ATAPI::ATAPI()>
c001d104:	5a                   	pop    edx
c001d105:	59                   	pop    ecx
c001d106:	57                   	push   edi
c001d107:	53                   	push   ebx
c001d108:	e8 7f 34 ff ff       	call   c001058c <Device::addChild(Device*)>
c001d10d:	8b 07                	mov    eax,DWORD PTR [edi]
c001d10f:	53                   	push   ebx
c001d110:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d114:	6a 00                	push   0x0
c001d116:	57                   	push   edi
c001d117:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d11a:	83 c4 20             	add    esp,0x20
c001d11d:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c001d121:	4d                   	dec    ebp
c001d122:	74 0a                	je     c001d12e <IDE::detect()+0x276>
c001d124:	bd 01 00 00 00       	mov    ebp,0x1
c001d129:	e9 bb fd ff ff       	jmp    c001cee9 <IDE::detect()+0x31>
c001d12e:	4e                   	dec    esi
c001d12f:	74 65                	je     c001d196 <IDE::detect()+0x2de>
c001d131:	be 01 00 00 00       	mov    esi,0x1
c001d136:	e9 ac fd ff ff       	jmp    c001cee7 <IDE::detect()+0x2f>
c001d13b:	50                   	push   eax
c001d13c:	6a 04                	push   0x4
c001d13e:	56                   	push   esi
c001d13f:	53                   	push   ebx
c001d140:	e8 fd f6 ff ff       	call   c001c842 <IDE::read(unsigned char, unsigned char)>
c001d145:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001d149:	83 c4 0c             	add    esp,0xc
c001d14c:	6a 05                	push   0x5
c001d14e:	56                   	push   esi
c001d14f:	53                   	push   ebx
c001d150:	e8 ed f6 ff ff       	call   c001c842 <IDE::read(unsigned char, unsigned char)>
c001d155:	83 c4 10             	add    esp,0x10
c001d158:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001d15c:	80 fa 14             	cmp    dl,0x14
c001d15f:	74 2f                	je     c001d190 <IDE::detect()+0x2d8>
c001d161:	80 fa 69             	cmp    dl,0x69
c001d164:	75 bb                	jne    c001d121 <IDE::detect()+0x269>
c001d166:	3c 96                	cmp    al,0x96
c001d168:	75 b7                	jne    c001d121 <IDE::detect()+0x269>
c001d16a:	68 a1 00 00 00       	push   0xa1
c001d16f:	6a 07                	push   0x7
c001d171:	56                   	push   esi
c001d172:	53                   	push   ebx
c001d173:	e8 0a f6 ff ff       	call   c001c782 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d178:	5f                   	pop    edi
c001d179:	58                   	pop    eax
c001d17a:	6a 00                	push   0x0
c001d17c:	68 40 42 0f 00       	push   0xf4240
c001d181:	e8 07 bd ff ff       	call   c0018e8d <nanoSleep(unsigned long long)>
c001d186:	83 c4 10             	add    esp,0x10
c001d189:	b1 01                	mov    cl,0x1
c001d18b:	e9 4e fe ff ff       	jmp    c001cfde <IDE::detect()+0x126>
c001d190:	3c eb                	cmp    al,0xeb
c001d192:	75 cd                	jne    c001d161 <IDE::detect()+0x2a9>
c001d194:	eb d4                	jmp    c001d16a <IDE::detect()+0x2b2>
c001d196:	81 c4 1c 02 00 00    	add    esp,0x21c
c001d19c:	5b                   	pop    ebx
c001d19d:	5e                   	pop    esi
c001d19e:	5f                   	pop    edi
c001d19f:	5d                   	pop    ebp
c001d1a0:	c3                   	ret    
c001d1a1:	90                   	nop

c001d1a2 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001d1a2:	55                   	push   ebp
c001d1a3:	57                   	push   edi
c001d1a4:	56                   	push   esi
c001d1a5:	53                   	push   ebx
c001d1a6:	83 ec 1c             	sub    esp,0x1c
c001d1a9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001d1ad:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001d1b1:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001d1b5:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001d1b9:	88 c3                	mov    bl,al
c001d1bb:	84 c0                	test   al,al
c001d1bd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d1c1:	0f 84 67 01 00 00    	je     c001d32e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c001d1c7:	83 ec 0c             	sub    esp,0xc
c001d1ca:	68 43 34 02 c0       	push   0xc0023443
c001d1cf:	e8 a3 1f ff ff       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c001d1d4:	83 c4 10             	add    esp,0x10
c001d1d7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d1db:	3c 01                	cmp    al,0x1
c001d1dd:	75 17                	jne    c001d1f6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c001d1df:	83 ec 0c             	sub    esp,0xc
c001d1e2:	b3 13                	mov    bl,0x13
c001d1e4:	68 4f 34 02 c0       	push   0xc002344f
c001d1e9:	e8 89 1f ff ff       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c001d1ee:	83 c4 10             	add    esp,0x10
c001d1f1:	e9 25 01 00 00       	jmp    c001d31b <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001d1f6:	3c 02                	cmp    al,0x2
c001d1f8:	0f 85 ef 00 00 00    	jne    c001d2ed <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c001d1fe:	01 f6                	add    esi,esi
c001d200:	52                   	push   edx
c001d201:	09 ee                	or     esi,ebp
c001d203:	6a 01                	push   0x1
c001d205:	89 f0                	mov    eax,esi
c001d207:	0f b6 f0             	movzx  esi,al
c001d20a:	c1 e6 06             	shl    esi,0x6
c001d20d:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c001d215:	50                   	push   eax
c001d216:	57                   	push   edi
c001d217:	e8 26 f6 ff ff       	call   c001c842 <IDE::read(unsigned char, unsigned char)>
c001d21c:	83 c4 10             	add    esp,0x10
c001d21f:	89 c6                	mov    esi,eax
c001d221:	a8 01                	test   al,0x1
c001d223:	74 12                	je     c001d237 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c001d225:	83 ec 0c             	sub    esp,0xc
c001d228:	b3 07                	mov    bl,0x7
c001d22a:	68 64 34 02 c0       	push   0xc0023464
c001d22f:	e8 43 1f ff ff       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c001d234:	83 c4 10             	add    esp,0x10
c001d237:	f7 c6 02 00 00 00    	test   esi,0x2
c001d23d:	74 12                	je     c001d251 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c001d23f:	83 ec 0c             	sub    esp,0xc
c001d242:	b3 03                	mov    bl,0x3
c001d244:	68 82 34 02 c0       	push   0xc0023482
c001d249:	e8 29 1f ff ff       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c001d24e:	83 c4 10             	add    esp,0x10
c001d251:	f7 c6 04 00 00 00    	test   esi,0x4
c001d257:	74 12                	je     c001d26b <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c001d259:	83 ec 0c             	sub    esp,0xc
c001d25c:	b3 14                	mov    bl,0x14
c001d25e:	68 a2 34 02 c0       	push   0xc00234a2
c001d263:	e8 0f 1f ff ff       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c001d268:	83 c4 10             	add    esp,0x10
c001d26b:	f7 c6 08 00 00 00    	test   esi,0x8
c001d271:	74 12                	je     c001d285 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c001d273:	83 ec 0c             	sub    esp,0xc
c001d276:	b3 03                	mov    bl,0x3
c001d278:	68 82 34 02 c0       	push   0xc0023482
c001d27d:	e8 f5 1e ff ff       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c001d282:	83 c4 10             	add    esp,0x10
c001d285:	f7 c6 10 00 00 00    	test   esi,0x10
c001d28b:	74 12                	je     c001d29f <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c001d28d:	83 ec 0c             	sub    esp,0xc
c001d290:	b3 15                	mov    bl,0x15
c001d292:	68 ba 34 02 c0       	push   0xc00234ba
c001d297:	e8 db 1e ff ff       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c001d29c:	83 c4 10             	add    esp,0x10
c001d29f:	f7 c6 20 00 00 00    	test   esi,0x20
c001d2a5:	74 12                	je     c001d2b9 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c001d2a7:	83 ec 0c             	sub    esp,0xc
c001d2aa:	b3 03                	mov    bl,0x3
c001d2ac:	68 82 34 02 c0       	push   0xc0023482
c001d2b1:	e8 c1 1e ff ff       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c001d2b6:	83 c4 10             	add    esp,0x10
c001d2b9:	f7 c6 40 00 00 00    	test   esi,0x40
c001d2bf:	74 12                	je     c001d2d3 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c001d2c1:	83 ec 0c             	sub    esp,0xc
c001d2c4:	b3 16                	mov    bl,0x16
c001d2c6:	68 d4 34 02 c0       	push   0xc00234d4
c001d2cb:	e8 a7 1e ff ff       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c001d2d0:	83 c4 10             	add    esp,0x10
c001d2d3:	89 f0                	mov    eax,esi
c001d2d5:	84 c0                	test   al,al
c001d2d7:	79 42                	jns    c001d31b <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001d2d9:	83 ec 0c             	sub    esp,0xc
c001d2dc:	b3 0d                	mov    bl,0xd
c001d2de:	68 f5 34 02 c0       	push   0xc00234f5
c001d2e3:	e8 8f 1e ff ff       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c001d2e8:	83 c4 10             	add    esp,0x10
c001d2eb:	eb 2e                	jmp    c001d31b <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001d2ed:	3c 03                	cmp    al,0x3
c001d2ef:	75 14                	jne    c001d305 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c001d2f1:	83 ec 0c             	sub    esp,0xc
c001d2f4:	b3 17                	mov    bl,0x17
c001d2f6:	68 09 35 02 c0       	push   0xc0023509
c001d2fb:	e8 77 1e ff ff       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c001d300:	83 c4 10             	add    esp,0x10
c001d303:	eb 16                	jmp    c001d31b <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001d305:	3c 04                	cmp    al,0x4
c001d307:	75 12                	jne    c001d31b <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001d309:	83 ec 0c             	sub    esp,0xc
c001d30c:	b3 08                	mov    bl,0x8
c001d30e:	68 1f 35 02 c0       	push   0xc002351f
c001d313:	e8 5f 1e ff ff       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c001d318:	83 c4 10             	add    esp,0x10
c001d31b:	50                   	push   eax
c001d31c:	50                   	push   eax
c001d31d:	0f b6 c3             	movzx  eax,bl
c001d320:	50                   	push   eax
c001d321:	68 37 35 02 c0       	push   0xc0023537
c001d326:	e8 4c 1e ff ff       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c001d32b:	83 c4 10             	add    esp,0x10
c001d32e:	83 c4 1c             	add    esp,0x1c
c001d331:	88 d8                	mov    al,bl
c001d333:	5b                   	pop    ebx
c001d334:	5e                   	pop    esi
c001d335:	5f                   	pop    edi
c001d336:	5d                   	pop    ebp
c001d337:	c3                   	ret    

c001d338 <IDE::polling(unsigned char, unsigned int)>:
c001d338:	55                   	push   ebp
c001d339:	bd 04 00 00 00       	mov    ebp,0x4
c001d33e:	57                   	push   edi
c001d33f:	56                   	push   esi
c001d340:	53                   	push   ebx
c001d341:	83 ec 0c             	sub    esp,0xc
c001d344:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001d348:	8a 5c 24 24          	mov    bl,BYTE PTR [esp+0x24]
c001d34c:	52                   	push   edx
c001d34d:	6a 0c                	push   0xc
c001d34f:	0f b6 f3             	movzx  esi,bl
c001d352:	56                   	push   esi
c001d353:	57                   	push   edi
c001d354:	e8 e9 f4 ff ff       	call   c001c842 <IDE::read(unsigned char, unsigned char)>
c001d359:	83 c4 10             	add    esp,0x10
c001d35c:	4d                   	dec    ebp
c001d35d:	75 ed                	jne    c001d34c <IDE::polling(unsigned char, unsigned int)+0x14>
c001d35f:	bb a0 86 01 00       	mov    ebx,0x186a0
c001d364:	50                   	push   eax
c001d365:	6a 0c                	push   0xc
c001d367:	56                   	push   esi
c001d368:	57                   	push   edi
c001d369:	e8 d4 f4 ff ff       	call   c001c842 <IDE::read(unsigned char, unsigned char)>
c001d36e:	83 c4 10             	add    esp,0x10
c001d371:	a8 01                	test   al,0x1
c001d373:	74 12                	je     c001d387 <IDE::polling(unsigned char, unsigned int)+0x4f>
c001d375:	83 ec 0c             	sub    esp,0xc
c001d378:	68 51 35 02 c0       	push   0xc0023551
c001d37d:	e8 f5 1d ff ff       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c001d382:	83 c4 10             	add    esp,0x10
c001d385:	eb 17                	jmp    c001d39e <IDE::polling(unsigned char, unsigned int)+0x66>
c001d387:	a8 20                	test   al,0x20
c001d389:	75 0f                	jne    c001d39a <IDE::polling(unsigned char, unsigned int)+0x62>
c001d38b:	4b                   	dec    ebx
c001d38c:	74 10                	je     c001d39e <IDE::polling(unsigned char, unsigned int)+0x66>
c001d38e:	84 c0                	test   al,al
c001d390:	78 d2                	js     c001d364 <IDE::polling(unsigned char, unsigned int)+0x2c>
c001d392:	a8 08                	test   al,0x8
c001d394:	74 ce                	je     c001d364 <IDE::polling(unsigned char, unsigned int)+0x2c>
c001d396:	31 c0                	xor    eax,eax
c001d398:	eb 06                	jmp    c001d3a0 <IDE::polling(unsigned char, unsigned int)+0x68>
c001d39a:	b0 01                	mov    al,0x1
c001d39c:	eb 02                	jmp    c001d3a0 <IDE::polling(unsigned char, unsigned int)+0x68>
c001d39e:	b0 02                	mov    al,0x2
c001d3a0:	83 c4 0c             	add    esp,0xc
c001d3a3:	5b                   	pop    ebx
c001d3a4:	5e                   	pop    esi
c001d3a5:	5f                   	pop    edi
c001d3a6:	5d                   	pop    ebp
c001d3a7:	c3                   	ret    

c001d3a8 <ATA::close(int, int, void*)>:
c001d3a8:	83 ec 0c             	sub    esp,0xc
c001d3ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d3af:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d3b5:	85 c0                	test   eax,eax
c001d3b7:	74 0c                	je     c001d3c5 <ATA::close(int, int, void*)+0x1d>
c001d3b9:	83 ec 0c             	sub    esp,0xc
c001d3bc:	8b 10                	mov    edx,DWORD PTR [eax]
c001d3be:	50                   	push   eax
c001d3bf:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001d3c2:	83 c4 10             	add    esp,0x10
c001d3c5:	31 c0                	xor    eax,eax
c001d3c7:	83 c4 0c             	add    esp,0xc
c001d3ca:	c3                   	ret    
c001d3cb:	90                   	nop

c001d3cc <ATA::powerSaving(PowerSavingLevel)>:
c001d3cc:	c3                   	ret    
c001d3cd:	90                   	nop

c001d3ce <ATA::ATA()>:
c001d3ce:	83 ec 0c             	sub    esp,0xc
c001d3d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d3d5:	83 ec 04             	sub    esp,0x4
c001d3d8:	68 00 02 00 00       	push   0x200
c001d3dd:	68 94 35 02 c0       	push   0xc0023594
c001d3e2:	50                   	push   eax
c001d3e3:	e8 aa 35 ff ff       	call   c0010992 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001d3e8:	83 c4 10             	add    esp,0x10
c001d3eb:	ba c0 35 02 c0       	mov    edx,0xc00235c0
c001d3f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d3f4:	89 10                	mov    DWORD PTR [eax],edx
c001d3f6:	90                   	nop
c001d3f7:	83 c4 0c             	add    esp,0xc
c001d3fa:	c3                   	ret    
c001d3fb:	90                   	nop

c001d3fc <ATA::flush(bool)>:
c001d3fc:	53                   	push   ebx
c001d3fd:	83 ec 08             	sub    esp,0x8
c001d400:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c001d405:	19 c0                	sbb    eax,eax
c001d407:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d40b:	83 e0 fd             	and    eax,0xfffffffd
c001d40e:	05 ea 00 00 00       	add    eax,0xea
c001d413:	50                   	push   eax
c001d414:	6a 07                	push   0x7
c001d416:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d41d:	50                   	push   eax
c001d41e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d424:	e8 59 f3 ff ff       	call   c001c782 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d429:	83 c4 0c             	add    esp,0xc
c001d42c:	6a 00                	push   0x0
c001d42e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d435:	50                   	push   eax
c001d436:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d43c:	e8 f7 fe ff ff       	call   c001d338 <IDE::polling(unsigned char, unsigned int)>
c001d441:	83 c4 18             	add    esp,0x18
c001d444:	5b                   	pop    ebx
c001d445:	c3                   	ret    

c001d446 <ATA::readyForCommand()>:
c001d446:	56                   	push   esi
c001d447:	53                   	push   ebx
c001d448:	31 db                	xor    ebx,ebx
c001d44a:	50                   	push   eax
c001d44b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d44f:	50                   	push   eax
c001d450:	6a 0c                	push   0xc
c001d452:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001d459:	50                   	push   eax
c001d45a:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001d460:	e8 dd f3 ff ff       	call   c001c842 <IDE::read(unsigned char, unsigned char)>
c001d465:	83 c4 10             	add    esp,0x10
c001d468:	a8 88                	test   al,0x88
c001d46a:	74 23                	je     c001d48f <ATA::readyForCommand()+0x49>
c001d46c:	43                   	inc    ebx
c001d46d:	83 fb 63             	cmp    ebx,0x63
c001d470:	7e dd                	jle    c001d44f <ATA::readyForCommand()+0x9>
c001d472:	51                   	push   ecx
c001d473:	51                   	push   ecx
c001d474:	6a 00                	push   0x0
c001d476:	68 40 42 0f 00       	push   0xf4240
c001d47b:	e8 0d ba ff ff       	call   c0018e8d <nanoSleep(unsigned long long)>
c001d480:	83 c4 10             	add    esp,0x10
c001d483:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001d489:	75 c4                	jne    c001d44f <ATA::readyForCommand()+0x9>
c001d48b:	31 c0                	xor    eax,eax
c001d48d:	eb 02                	jmp    c001d491 <ATA::readyForCommand()+0x4b>
c001d48f:	b0 01                	mov    al,0x1
c001d491:	5a                   	pop    edx
c001d492:	5b                   	pop    ebx
c001d493:	5e                   	pop    esi
c001d494:	c3                   	ret    
c001d495:	90                   	nop

c001d496 <ATA::access(unsigned long long, int, void*, bool)>:
c001d496:	55                   	push   ebp
c001d497:	57                   	push   edi
c001d498:	56                   	push   esi
c001d499:	53                   	push   ebx
c001d49a:	83 ec 2c             	sub    esp,0x2c
c001d49d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001d4a1:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001d4a5:	89 04 24             	mov    DWORD PTR [esp],eax
c001d4a8:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001d4ac:	8a 04 24             	mov    al,BYTE PTR [esp]
c001d4af:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001d4b3:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001d4b7:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001d4bd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d4c1:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001d4c7:	c1 e0 06             	shl    eax,0x6
c001d4ca:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001d4ce:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001d4d6:	74 5d                	je     c001d535 <ATA::access(unsigned long long, int, void*, bool)+0x9f>
c001d4d8:	89 fa                	mov    edx,edi
c001d4da:	89 f0                	mov    eax,esi
c001d4dc:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001d4e0:	c1 ea 1c             	shr    edx,0x1c
c001d4e3:	89 d1                	mov    ecx,edx
c001d4e5:	09 c1                	or     ecx,eax
c001d4e7:	74 25                	je     c001d50e <ATA::access(unsigned long long, int, void*, bool)+0x78>
c001d4e9:	31 ed                	xor    ebp,ebp
c001d4eb:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001d4f2:	89 fa                	mov    edx,edi
c001d4f4:	89 f0                	mov    eax,esi
c001d4f6:	0f ad d0             	shrd   eax,edx,cl
c001d4f9:	d3 ea                	shr    edx,cl
c001d4fb:	f6 c1 20             	test   cl,0x20
c001d4fe:	74 02                	je     c001d502 <ATA::access(unsigned long long, int, void*, bool)+0x6c>
c001d500:	89 d0                	mov    eax,edx
c001d502:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001d506:	45                   	inc    ebp
c001d507:	83 fd 06             	cmp    ebp,0x6
c001d50a:	75 df                	jne    c001d4eb <ATA::access(unsigned long long, int, void*, bool)+0x55>
c001d50c:	eb 73                	jmp    c001d581 <ATA::access(unsigned long long, int, void*, bool)+0xeb>
c001d50e:	89 f0                	mov    eax,esi
c001d510:	89 fa                	mov    edx,edi
c001d512:	0f ac d0 10          	shrd   eax,edx,0x10
c001d516:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001d51b:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001d51f:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001d526:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001d52b:	c1 ee 18             	shr    esi,0x18
c001d52e:	bf 01 00 00 00       	mov    edi,0x1
c001d533:	eb 53                	jmp    c001d588 <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c001d535:	6a 00                	push   0x0
c001d537:	6a 3f                	push   0x3f
c001d539:	57                   	push   edi
c001d53a:	56                   	push   esi
c001d53b:	e8 8c 1f 00 00       	call   c001f4cc <__umoddi3>
c001d540:	83 c4 10             	add    esp,0x10
c001d543:	40                   	inc    eax
c001d544:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001d548:	6a 00                	push   0x0
c001d54a:	68 f0 03 00 00       	push   0x3f0
c001d54f:	57                   	push   edi
c001d550:	56                   	push   esi
c001d551:	e8 76 1e 00 00       	call   c001f3cc <__udivdi3>
c001d556:	83 c4 10             	add    esp,0x10
c001d559:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001d55e:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001d565:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001d56a:	6a 00                	push   0x0
c001d56c:	6a 3f                	push   0x3f
c001d56e:	57                   	push   edi
c001d56f:	31 ff                	xor    edi,edi
c001d571:	56                   	push   esi
c001d572:	e8 55 1e 00 00       	call   c001f3cc <__udivdi3>
c001d577:	89 c6                	mov    esi,eax
c001d579:	83 c4 10             	add    esp,0x10
c001d57c:	83 e6 0f             	and    esi,0xf
c001d57f:	eb 07                	jmp    c001d588 <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c001d581:	31 f6                	xor    esi,esi
c001d583:	bf 02 00 00 00       	mov    edi,0x2
c001d588:	50                   	push   eax
c001d589:	6a 00                	push   0x0
c001d58b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d592:	50                   	push   eax
c001d593:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001d597:	e8 f8 f3 ff ff       	call   c001c994 <IDE::enableIRQs(unsigned char, bool)>
c001d59c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d59f:	e8 a2 fe ff ff       	call   c001d446 <ATA::readyForCommand()>
c001d5a4:	83 c4 10             	add    esp,0x10
c001d5a7:	84 c0                	test   al,al
c001d5a9:	75 0a                	jne    c001d5b5 <ATA::access(unsigned long long, int, void*, bool)+0x11f>
c001d5ab:	be 01 00 00 00       	mov    esi,0x1
c001d5b0:	e9 79 02 00 00       	jmp    c001d82e <ATA::access(unsigned long long, int, void*, bool)+0x398>
c001d5b5:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001d5bb:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001d5c1:	c1 e0 04             	shl    eax,0x4
c001d5c4:	09 c6                	or     esi,eax
c001d5c6:	89 f8                	mov    eax,edi
c001d5c8:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001d5cf:	84 c0                	test   al,al
c001d5d1:	75 05                	jne    c001d5d8 <ATA::access(unsigned long long, int, void*, bool)+0x142>
c001d5d3:	83 ce a0             	or     esi,0xffffffa0
c001d5d6:	eb 03                	jmp    c001d5db <ATA::access(unsigned long long, int, void*, bool)+0x145>
c001d5d8:	83 ce e0             	or     esi,0xffffffe0
c001d5db:	89 f0                	mov    eax,esi
c001d5dd:	0f b6 f0             	movzx  esi,al
c001d5e0:	56                   	push   esi
c001d5e1:	6a 06                	push   0x6
c001d5e3:	51                   	push   ecx
c001d5e4:	52                   	push   edx
c001d5e5:	e8 98 f1 ff ff       	call   c001c782 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d5ea:	83 c4 10             	add    esp,0x10
c001d5ed:	6a 00                	push   0x0
c001d5ef:	6a 01                	push   0x1
c001d5f1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d5f8:	50                   	push   eax
c001d5f9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d5ff:	e8 7e f1 ff ff       	call   c001c782 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d604:	89 f8                	mov    eax,edi
c001d606:	83 c4 10             	add    esp,0x10
c001d609:	3c 02                	cmp    al,0x2
c001d60b:	75 6e                	jne    c001d67b <ATA::access(unsigned long long, int, void*, bool)+0x1e5>
c001d60d:	6a 00                	push   0x0
c001d60f:	6a 08                	push   0x8
c001d611:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d618:	50                   	push   eax
c001d619:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d61f:	e8 5e f1 ff ff       	call   c001c782 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d624:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001d629:	50                   	push   eax
c001d62a:	6a 09                	push   0x9
c001d62c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d633:	50                   	push   eax
c001d634:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d63a:	e8 43 f1 ff ff       	call   c001c782 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d63f:	83 c4 20             	add    esp,0x20
c001d642:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001d647:	50                   	push   eax
c001d648:	6a 0a                	push   0xa
c001d64a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d651:	50                   	push   eax
c001d652:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d658:	e8 25 f1 ff ff       	call   c001c782 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d65d:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001d662:	50                   	push   eax
c001d663:	6a 0b                	push   0xb
c001d665:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d66c:	50                   	push   eax
c001d66d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d673:	e8 0a f1 ff ff       	call   c001c782 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d678:	83 c4 20             	add    esp,0x20
c001d67b:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001d680:	50                   	push   eax
c001d681:	6a 02                	push   0x2
c001d683:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d68a:	50                   	push   eax
c001d68b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d691:	e8 ec f0 ff ff       	call   c001c782 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d696:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001d69b:	50                   	push   eax
c001d69c:	6a 03                	push   0x3
c001d69e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d6a5:	50                   	push   eax
c001d6a6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d6ac:	e8 d1 f0 ff ff       	call   c001c782 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d6b1:	83 c4 20             	add    esp,0x20
c001d6b4:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001d6b9:	50                   	push   eax
c001d6ba:	6a 04                	push   0x4
c001d6bc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d6c3:	50                   	push   eax
c001d6c4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d6ca:	e8 b3 f0 ff ff       	call   c001c782 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d6cf:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d6d4:	50                   	push   eax
c001d6d5:	6a 05                	push   0x5
c001d6d7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d6de:	50                   	push   eax
c001d6df:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d6e5:	e8 98 f0 ff ff       	call   c001c782 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d6ea:	83 c4 20             	add    esp,0x20
c001d6ed:	89 f8                	mov    eax,edi
c001d6ef:	3c 02                	cmp    al,0x2
c001d6f1:	0f 94 44 24 04       	sete   BYTE PTR [esp+0x4]
c001d6f6:	75 06                	jne    c001d6fe <ATA::access(unsigned long long, int, void*, bool)+0x268>
c001d6f8:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001d6fc:	75 40                	jne    c001d73e <ATA::access(unsigned long long, int, void*, bool)+0x2a8>
c001d6fe:	89 f8                	mov    eax,edi
c001d700:	3c 02                	cmp    al,0x2
c001d702:	0f 95 c1             	setne  cl
c001d705:	74 0b                	je     c001d712 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c001d707:	b8 30 00 00 00       	mov    eax,0x30
c001d70c:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001d710:	75 31                	jne    c001d743 <ATA::access(unsigned long long, int, void*, bool)+0x2ad>
c001d712:	8a 14 24             	mov    dl,BYTE PTR [esp]
c001d715:	83 f2 01             	xor    edx,0x1
c001d718:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001d71d:	74 09                	je     c001d728 <ATA::access(unsigned long long, int, void*, bool)+0x292>
c001d71f:	b8 24 00 00 00       	mov    eax,0x24
c001d724:	84 d2                	test   dl,dl
c001d726:	75 1b                	jne    c001d743 <ATA::access(unsigned long long, int, void*, bool)+0x2ad>
c001d728:	84 c9                	test   cl,cl
c001d72a:	0f 84 7b fe ff ff    	je     c001d5ab <ATA::access(unsigned long long, int, void*, bool)+0x115>
c001d730:	b8 20 00 00 00       	mov    eax,0x20
c001d735:	84 d2                	test   dl,dl
c001d737:	75 0a                	jne    c001d743 <ATA::access(unsigned long long, int, void*, bool)+0x2ad>
c001d739:	e9 6d fe ff ff       	jmp    c001d5ab <ATA::access(unsigned long long, int, void*, bool)+0x115>
c001d73e:	b8 34 00 00 00       	mov    eax,0x34
c001d743:	50                   	push   eax
c001d744:	6a 07                	push   0x7
c001d746:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d74d:	50                   	push   eax
c001d74e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d754:	e8 29 f0 ff ff       	call   c001c782 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d759:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001d75d:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001d761:	83 c4 10             	add    esp,0x10
c001d764:	85 f6                	test   esi,esi
c001d766:	0f 84 a9 00 00 00    	je     c001d815 <ATA::access(unsigned long long, int, void*, bool)+0x37f>
c001d76c:	50                   	push   eax
c001d76d:	6a 01                	push   0x1
c001d76f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d776:	50                   	push   eax
c001d777:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d77d:	e8 b6 fb ff ff       	call   c001d338 <IDE::polling(unsigned char, unsigned int)>
c001d782:	83 c4 10             	add    esp,0x10
c001d785:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001d78b:	84 c0                	test   al,al
c001d78d:	74 1d                	je     c001d7ac <ATA::access(unsigned long long, int, void*, bool)+0x316>
c001d78f:	0f b6 f0             	movzx  esi,al
c001d792:	56                   	push   esi
c001d793:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001d79a:	0f b6 d2             	movzx  edx,dl
c001d79d:	50                   	push   eax
c001d79e:	52                   	push   edx
c001d79f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d7a5:	e8 f8 f9 ff ff       	call   c001d1a2 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001d7aa:	eb 7f                	jmp    c001d82b <ATA::access(unsigned long long, int, void*, bool)+0x395>
c001d7ac:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001d7b1:	74 41                	je     c001d7f4 <ATA::access(unsigned long long, int, void*, bool)+0x35e>
c001d7b3:	31 c9                	xor    ecx,ecx
c001d7b5:	66 8b 2c 4f          	mov    bp,WORD PTR [edi+ecx*2]
c001d7b9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001d7bd:	50                   	push   eax
c001d7be:	50                   	push   eax
c001d7bf:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d7c6:	50                   	push   eax
c001d7c7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d7cd:	e8 9e ef ff ff       	call   c001c770 <IDE::getBase(unsigned char)>
c001d7d2:	89 c2                	mov    edx,eax
c001d7d4:	89 e8                	mov    eax,ebp
c001d7d6:	66 ef                	out    dx,ax
c001d7d8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d7dc:	83 c4 10             	add    esp,0x10
c001d7df:	41                   	inc    ecx
c001d7e0:	81 f9 00 01 00 00    	cmp    ecx,0x100
c001d7e6:	75 cd                	jne    c001d7b5 <ATA::access(unsigned long long, int, void*, bool)+0x31f>
c001d7e8:	4e                   	dec    esi
c001d7e9:	81 c7 00 02 00 00    	add    edi,0x200
c001d7ef:	e9 70 ff ff ff       	jmp    c001d764 <ATA::access(unsigned long long, int, void*, bool)+0x2ce>
c001d7f4:	51                   	push   ecx
c001d7f5:	51                   	push   ecx
c001d7f6:	0f b6 d2             	movzx  edx,dl
c001d7f9:	52                   	push   edx
c001d7fa:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d800:	e8 6b ef ff ff       	call   c001c770 <IDE::getBase(unsigned char)>
c001d805:	b9 00 01 00 00       	mov    ecx,0x100
c001d80a:	89 c2                	mov    edx,eax
c001d80c:	fc                   	cld    
c001d80d:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001d810:	83 c4 10             	add    esp,0x10
c001d813:	eb d3                	jmp    c001d7e8 <ATA::access(unsigned long long, int, void*, bool)+0x352>
c001d815:	31 f6                	xor    esi,esi
c001d817:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001d81b:	74 11                	je     c001d82e <ATA::access(unsigned long long, int, void*, bool)+0x398>
c001d81d:	50                   	push   eax
c001d81e:	50                   	push   eax
c001d81f:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001d824:	50                   	push   eax
c001d825:	53                   	push   ebx
c001d826:	e8 d1 fb ff ff       	call   c001d3fc <ATA::flush(bool)>
c001d82b:	83 c4 10             	add    esp,0x10
c001d82e:	83 c4 2c             	add    esp,0x2c
c001d831:	89 f0                	mov    eax,esi
c001d833:	5b                   	pop    ebx
c001d834:	5e                   	pop    esi
c001d835:	5f                   	pop    edi
c001d836:	5d                   	pop    ebp
c001d837:	c3                   	ret    

c001d838 <ATA::read(unsigned long long, int, void*)>:
c001d838:	57                   	push   edi
c001d839:	b8 04 00 00 00       	mov    eax,0x4
c001d83e:	56                   	push   esi
c001d83f:	53                   	push   ebx
c001d840:	83 ec 10             	sub    esp,0x10
c001d843:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001d847:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001d84b:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001d84f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d853:	8d 4b ff             	lea    ecx,[ebx-0x1]
c001d856:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c001d85c:	77 3b                	ja     c001d899 <ATA::read(unsigned long long, int, void*)+0x61>
c001d85e:	b8 06 00 00 00       	mov    eax,0x6
c001d863:	85 d2                	test   edx,edx
c001d865:	74 32                	je     c001d899 <ATA::read(unsigned long long, int, void*)+0x61>
c001d867:	50                   	push   eax
c001d868:	50                   	push   eax
c001d869:	6a 00                	push   0x0
c001d86b:	52                   	push   edx
c001d86c:	53                   	push   ebx
c001d86d:	57                   	push   edi
c001d86e:	56                   	push   esi
c001d86f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d873:	e8 1e fc ff ff       	call   c001d496 <ATA::access(unsigned long long, int, void*, bool)>
c001d878:	83 c4 20             	add    esp,0x20
c001d87b:	85 c0                	test   eax,eax
c001d87d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d881:	75 11                	jne    c001d894 <ATA::read(unsigned long long, int, void*)+0x5c>
c001d883:	01 1d 24 63 02 c0    	add    DWORD PTR ds:0xc0026324,ebx
c001d889:	e8 84 f7 fe ff       	call   c000d012 <VgaText::updateDiskUsage()>
c001d88e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d892:	eb 05                	jmp    c001d899 <ATA::read(unsigned long long, int, void*)+0x61>
c001d894:	b8 01 00 00 00       	mov    eax,0x1
c001d899:	83 c4 10             	add    esp,0x10
c001d89c:	5b                   	pop    ebx
c001d89d:	5e                   	pop    esi
c001d89e:	5f                   	pop    edi
c001d89f:	c3                   	ret    

c001d8a0 <ATA::write(unsigned long long, int, void*)>:
c001d8a0:	57                   	push   edi
c001d8a1:	b8 04 00 00 00       	mov    eax,0x4
c001d8a6:	56                   	push   esi
c001d8a7:	53                   	push   ebx
c001d8a8:	83 ec 10             	sub    esp,0x10
c001d8ab:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001d8af:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001d8b3:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001d8b7:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d8bb:	8d 4b ff             	lea    ecx,[ebx-0x1]
c001d8be:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c001d8c4:	77 3b                	ja     c001d901 <ATA::write(unsigned long long, int, void*)+0x61>
c001d8c6:	b8 06 00 00 00       	mov    eax,0x6
c001d8cb:	85 d2                	test   edx,edx
c001d8cd:	74 32                	je     c001d901 <ATA::write(unsigned long long, int, void*)+0x61>
c001d8cf:	50                   	push   eax
c001d8d0:	50                   	push   eax
c001d8d1:	6a 01                	push   0x1
c001d8d3:	52                   	push   edx
c001d8d4:	53                   	push   ebx
c001d8d5:	57                   	push   edi
c001d8d6:	56                   	push   esi
c001d8d7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d8db:	e8 b6 fb ff ff       	call   c001d496 <ATA::access(unsigned long long, int, void*, bool)>
c001d8e0:	83 c4 20             	add    esp,0x20
c001d8e3:	85 c0                	test   eax,eax
c001d8e5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d8e9:	75 11                	jne    c001d8fc <ATA::write(unsigned long long, int, void*)+0x5c>
c001d8eb:	01 1d 20 63 02 c0    	add    DWORD PTR ds:0xc0026320,ebx
c001d8f1:	e8 1c f7 fe ff       	call   c000d012 <VgaText::updateDiskUsage()>
c001d8f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d8fa:	eb 05                	jmp    c001d901 <ATA::write(unsigned long long, int, void*)+0x61>
c001d8fc:	b8 01 00 00 00       	mov    eax,0x1
c001d901:	83 c4 10             	add    esp,0x10
c001d904:	5b                   	pop    ebx
c001d905:	5e                   	pop    esi
c001d906:	5f                   	pop    edi
c001d907:	c3                   	ret    

c001d908 <ATA::detectCHS()>:
c001d908:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d90c:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001d912:	c1 e0 06             	shl    eax,0x6
c001d915:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001d91b:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001d925:	c7 44 24 04 a3 35 02 c0 	mov    DWORD PTR [esp+0x4],0xc00235a3
c001d92d:	e9 10 80 ff ff       	jmp    c0015942 <Krnl::panic(char const*)>

c001d932 <ATA::open(int, int, void*)>:
c001d932:	53                   	push   ebx
c001d933:	83 ec 08             	sub    esp,0x8
c001d936:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d93a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d93e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d942:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001d948:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001d94e:	c1 e0 06             	shl    eax,0x6
c001d951:	01 d0                	add    eax,edx
c001d953:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001d95a:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001d960:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001d967:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001d971:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001d977:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001d97e:	75 0c                	jne    c001d98c <ATA::open(int, int, void*)+0x5a>
c001d980:	83 ec 0c             	sub    esp,0xc
c001d983:	53                   	push   ebx
c001d984:	e8 7f ff ff ff       	call   c001d908 <ATA::detectCHS()>
c001d989:	83 c4 10             	add    esp,0x10
c001d98c:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001d992:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001d998:	c1 e0 06             	shl    eax,0x6
c001d99b:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001d9a2:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001d9ac:	d1 e8                	shr    eax,1
c001d9ae:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001d9b4:	6a 04                	push   0x4
c001d9b6:	6a 0c                	push   0xc
c001d9b8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d9bf:	50                   	push   eax
c001d9c0:	52                   	push   edx
c001d9c1:	e8 bc ed ff ff       	call   c001c782 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d9c6:	90                   	nop
c001d9c7:	90                   	nop
c001d9c8:	6a 00                	push   0x0
c001d9ca:	6a 0c                	push   0xc
c001d9cc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d9d3:	50                   	push   eax
c001d9d4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d9da:	e8 a3 ed ff ff       	call   c001c782 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d9df:	83 c4 14             	add    esp,0x14
c001d9e2:	53                   	push   ebx
c001d9e3:	e8 12 30 ff ff       	call   c00109fa <PhysicalDisk::startCache()>
c001d9e8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d9eb:	e8 e6 4f ff ff       	call   c00129d6 <createPartitionsForDisk(PhysicalDisk*)>
c001d9f0:	83 c4 18             	add    esp,0x18
c001d9f3:	31 c0                	xor    eax,eax
c001d9f5:	5b                   	pop    ebx
c001d9f6:	c3                   	ret    
c001d9f7:	90                   	nop

c001d9f8 <ATAPI::write(unsigned long long, int, void*)>:
c001d9f8:	b8 03 00 00 00       	mov    eax,0x3
c001d9fd:	c3                   	ret    

c001d9fe <ATAPI::close(int, int, void*)>:
c001d9fe:	83 ec 0c             	sub    esp,0xc
c001da01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001da05:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001da0b:	85 c0                	test   eax,eax
c001da0d:	74 0c                	je     c001da1b <ATAPI::close(int, int, void*)+0x1d>
c001da0f:	83 ec 0c             	sub    esp,0xc
c001da12:	8b 10                	mov    edx,DWORD PTR [eax]
c001da14:	50                   	push   eax
c001da15:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001da18:	83 c4 10             	add    esp,0x10
c001da1b:	31 c0                	xor    eax,eax
c001da1d:	83 c4 0c             	add    esp,0xc
c001da20:	c3                   	ret    
c001da21:	90                   	nop

c001da22 <ATAPI::ATAPI()>:
c001da22:	83 ec 0c             	sub    esp,0xc
c001da25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001da29:	83 ec 04             	sub    esp,0x4
c001da2c:	68 00 08 00 00       	push   0x800
c001da31:	68 ec 35 02 c0       	push   0xc00235ec
c001da36:	50                   	push   eax
c001da37:	e8 56 2f ff ff       	call   c0010992 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001da3c:	83 c4 10             	add    esp,0x10
c001da3f:	ba 2c 36 02 c0       	mov    edx,0xc002362c
c001da44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001da48:	89 10                	mov    DWORD PTR [eax],edx
c001da4a:	90                   	nop
c001da4b:	83 c4 0c             	add    esp,0xc
c001da4e:	c3                   	ret    
c001da4f:	90                   	nop

c001da50 <ATAPI::readyForCommand()>:
c001da50:	56                   	push   esi
c001da51:	53                   	push   ebx
c001da52:	31 db                	xor    ebx,ebx
c001da54:	50                   	push   eax
c001da55:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001da59:	50                   	push   eax
c001da5a:	6a 0c                	push   0xc
c001da5c:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001da63:	50                   	push   eax
c001da64:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001da6a:	e8 d3 ed ff ff       	call   c001c842 <IDE::read(unsigned char, unsigned char)>
c001da6f:	83 c4 10             	add    esp,0x10
c001da72:	a8 88                	test   al,0x88
c001da74:	74 23                	je     c001da99 <ATAPI::readyForCommand()+0x49>
c001da76:	43                   	inc    ebx
c001da77:	83 fb 63             	cmp    ebx,0x63
c001da7a:	7e dd                	jle    c001da59 <ATAPI::readyForCommand()+0x9>
c001da7c:	51                   	push   ecx
c001da7d:	51                   	push   ecx
c001da7e:	6a 00                	push   0x0
c001da80:	68 40 42 0f 00       	push   0xf4240
c001da85:	e8 03 b4 ff ff       	call   c0018e8d <nanoSleep(unsigned long long)>
c001da8a:	83 c4 10             	add    esp,0x10
c001da8d:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001da93:	75 c4                	jne    c001da59 <ATAPI::readyForCommand()+0x9>
c001da95:	31 c0                	xor    eax,eax
c001da97:	eb 02                	jmp    c001da9b <ATAPI::readyForCommand()+0x4b>
c001da99:	b0 01                	mov    al,0x1
c001da9b:	5a                   	pop    edx
c001da9c:	5b                   	pop    ebx
c001da9d:	5e                   	pop    esi
c001da9e:	c3                   	ret    
c001da9f:	90                   	nop

c001daa0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001daa0:	55                   	push   ebp
c001daa1:	57                   	push   edi
c001daa2:	56                   	push   esi
c001daa3:	53                   	push   ebx
c001daa4:	83 ec 20             	sub    esp,0x20
c001daa7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001daab:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001daaf:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001dab3:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001dab7:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001dabb:	6a 01                	push   0x1
c001dabd:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dac4:	50                   	push   eax
c001dac5:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dacb:	e8 c4 ee ff ff       	call   c001c994 <IDE::enableIRQs(unsigned char, bool)>
c001dad0:	5e                   	pop    esi
c001dad1:	58                   	pop    eax
c001dad2:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dad9:	50                   	push   eax
c001dada:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dae0:	e8 77 ec ff ff       	call   c001c75c <IDE::prepareInterrupt(unsigned char)>
c001dae5:	89 3c 24             	mov    DWORD PTR [esp],edi
c001dae8:	e8 63 ff ff ff       	call   c001da50 <ATAPI::readyForCommand()>
c001daed:	83 c4 10             	add    esp,0x10
c001daf0:	84 c0                	test   al,al
c001daf2:	75 0a                	jne    c001dafe <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001daf4:	bb 01 00 00 00       	mov    ebx,0x1
c001daf9:	e9 57 02 00 00       	jmp    c001dd55 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001dafe:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c001db04:	c1 e0 04             	shl    eax,0x4
c001db07:	0f b6 c0             	movzx  eax,al
c001db0a:	50                   	push   eax
c001db0b:	6a 06                	push   0x6
c001db0d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001db14:	50                   	push   eax
c001db15:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001db1b:	e8 62 ec ff ff       	call   c001c782 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001db20:	6a 00                	push   0x0
c001db22:	6a 01                	push   0x1
c001db24:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001db2b:	50                   	push   eax
c001db2c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001db32:	e8 4b ec ff ff       	call   c001c782 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001db37:	83 c4 20             	add    esp,0x20
c001db3a:	0f b6 c3             	movzx  eax,bl
c001db3d:	50                   	push   eax
c001db3e:	6a 04                	push   0x4
c001db40:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001db47:	50                   	push   eax
c001db48:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001db4e:	0f b6 df             	movzx  ebx,bh
c001db51:	e8 2c ec ff ff       	call   c001c782 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001db56:	53                   	push   ebx
c001db57:	6a 05                	push   0x5
c001db59:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001db60:	50                   	push   eax
c001db61:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001db67:	e8 16 ec ff ff       	call   c001c782 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001db6c:	83 c4 20             	add    esp,0x20
c001db6f:	68 a0 00 00 00       	push   0xa0
c001db74:	6a 07                	push   0x7
c001db76:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001db7d:	50                   	push   eax
c001db7e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001db84:	e8 f9 eb ff ff       	call   c001c782 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001db89:	83 c4 0c             	add    esp,0xc
c001db8c:	6a 01                	push   0x1
c001db8e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001db95:	50                   	push   eax
c001db96:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001db9c:	e8 97 f7 ff ff       	call   c001d338 <IDE::polling(unsigned char, unsigned int)>
c001dba1:	83 c4 10             	add    esp,0x10
c001dba4:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c001dbaa:	84 c0                	test   al,al
c001dbac:	74 23                	je     c001dbd1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001dbae:	0f b6 d8             	movzx  ebx,al
c001dbb1:	53                   	push   ebx
c001dbb2:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c001dbb9:	0f b6 d2             	movzx  edx,dl
c001dbbc:	50                   	push   eax
c001dbbd:	52                   	push   edx
c001dbbe:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dbc4:	e8 d9 f5 ff ff       	call   c001d1a2 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001dbc9:	83 c4 10             	add    esp,0x10
c001dbcc:	e9 84 01 00 00       	jmp    c001dd55 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001dbd1:	53                   	push   ebx
c001dbd2:	53                   	push   ebx
c001dbd3:	0f b6 d2             	movzx  edx,dl
c001dbd6:	52                   	push   edx
c001dbd7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dbdd:	e8 8e eb ff ff       	call   c001c770 <IDE::getBase(unsigned char)>
c001dbe2:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001dbe6:	b9 06 00 00 00       	mov    ecx,0x6
c001dbeb:	89 c2                	mov    edx,eax
c001dbed:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001dbf0:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001dbf4:	83 c4 10             	add    esp,0x10
c001dbf7:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001dbfd:	85 db                	test   ebx,ebx
c001dbff:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001dc06:	0f 84 ec 00 00 00    	je     c001dcf8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001dc0c:	51                   	push   ecx
c001dc0d:	51                   	push   ecx
c001dc0e:	52                   	push   edx
c001dc0f:	50                   	push   eax
c001dc10:	e8 db ec ff ff       	call   c001c8f0 <IDE::waitInterrupt(unsigned char)>
c001dc15:	83 c4 10             	add    esp,0x10
c001dc18:	84 c0                	test   al,al
c001dc1a:	0f 84 d4 fe ff ff    	je     c001daf4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001dc20:	56                   	push   esi
c001dc21:	56                   	push   esi
c001dc22:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dc29:	50                   	push   eax
c001dc2a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dc30:	e8 27 eb ff ff       	call   c001c75c <IDE::prepareInterrupt(unsigned char)>
c001dc35:	83 c4 0c             	add    esp,0xc
c001dc38:	6a 04                	push   0x4
c001dc3a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dc41:	50                   	push   eax
c001dc42:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dc48:	e8 f5 eb ff ff       	call   c001c842 <IDE::read(unsigned char, unsigned char)>
c001dc4d:	83 c4 0c             	add    esp,0xc
c001dc50:	6a 05                	push   0x5
c001dc52:	89 c6                	mov    esi,eax
c001dc54:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dc5b:	50                   	push   eax
c001dc5c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dc62:	e8 db eb ff ff       	call   c001c842 <IDE::read(unsigned char, unsigned char)>
c001dc67:	89 f1                	mov    ecx,esi
c001dc69:	0f b6 c0             	movzx  eax,al
c001dc6c:	c1 e0 08             	shl    eax,0x8
c001dc6f:	0f b6 f1             	movzx  esi,cl
c001dc72:	09 c6                	or     esi,eax
c001dc74:	d1 fe                	sar    esi,1
c001dc76:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001dc7a:	83 c4 10             	add    esp,0x10
c001dc7d:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001dc82:	74 41                	je     c001dcc5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c001dc84:	31 c9                	xor    ecx,ecx
c001dc86:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001dc8c:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001dc90:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001dc97:	75 0a                	jne    c001dca3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c001dc99:	01 c9                	add    ecx,ecx
c001dc9b:	01 cd                	add    ebp,ecx
c001dc9d:	4b                   	dec    ebx
c001dc9e:	e9 54 ff ff ff       	jmp    c001dbf7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c001dca3:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001dca8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001dcac:	51                   	push   ecx
c001dcad:	51                   	push   ecx
c001dcae:	52                   	push   edx
c001dcaf:	50                   	push   eax
c001dcb0:	e8 bb ea ff ff       	call   c001c770 <IDE::getBase(unsigned char)>
c001dcb5:	89 c2                	mov    edx,eax
c001dcb7:	89 f0                	mov    eax,esi
c001dcb9:	66 ef                	out    dx,ax
c001dcbb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001dcbf:	83 c4 10             	add    esp,0x10
c001dcc2:	41                   	inc    ecx
c001dcc3:	eb c1                	jmp    c001dc86 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c001dcc5:	31 f6                	xor    esi,esi
c001dcc7:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001dccd:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001dcd1:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001dcd8:	75 06                	jne    c001dce0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c001dcda:	01 f6                	add    esi,esi
c001dcdc:	01 f5                	add    ebp,esi
c001dcde:	eb bd                	jmp    c001dc9d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c001dce0:	51                   	push   ecx
c001dce1:	51                   	push   ecx
c001dce2:	52                   	push   edx
c001dce3:	50                   	push   eax
c001dce4:	e8 87 ea ff ff       	call   c001c770 <IDE::getBase(unsigned char)>
c001dce9:	89 c2                	mov    edx,eax
c001dceb:	66 ed                	in     ax,dx
c001dced:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001dcf2:	83 c4 10             	add    esp,0x10
c001dcf5:	46                   	inc    esi
c001dcf6:	eb cf                	jmp    c001dcc7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c001dcf8:	51                   	push   ecx
c001dcf9:	51                   	push   ecx
c001dcfa:	52                   	push   edx
c001dcfb:	50                   	push   eax
c001dcfc:	e8 ef eb ff ff       	call   c001c8f0 <IDE::waitInterrupt(unsigned char)>
c001dd01:	83 c4 10             	add    esp,0x10
c001dd04:	84 c0                	test   al,al
c001dd06:	0f 84 e8 fd ff ff    	je     c001daf4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001dd0c:	52                   	push   edx
c001dd0d:	bb a0 86 01 00       	mov    ebx,0x186a0
c001dd12:	52                   	push   edx
c001dd13:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dd1a:	50                   	push   eax
c001dd1b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dd21:	e8 36 ea ff ff       	call   c001c75c <IDE::prepareInterrupt(unsigned char)>
c001dd26:	83 c4 10             	add    esp,0x10
c001dd29:	50                   	push   eax
c001dd2a:	50                   	push   eax
c001dd2b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dd32:	50                   	push   eax
c001dd33:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dd39:	e8 32 ea ff ff       	call   c001c770 <IDE::getBase(unsigned char)>
c001dd3e:	8d 50 07             	lea    edx,[eax+0x7]
c001dd41:	ec                   	in     al,dx
c001dd42:	83 c4 10             	add    esp,0x10
c001dd45:	a8 88                	test   al,0x88
c001dd47:	74 0a                	je     c001dd53 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001dd49:	4b                   	dec    ebx
c001dd4a:	75 dd                	jne    c001dd29 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001dd4c:	bb 02 00 00 00       	mov    ebx,0x2
c001dd51:	eb 02                	jmp    c001dd55 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001dd53:	31 db                	xor    ebx,ebx
c001dd55:	83 c4 1c             	add    esp,0x1c
c001dd58:	89 d8                	mov    eax,ebx
c001dd5a:	5b                   	pop    ebx
c001dd5b:	5e                   	pop    esi
c001dd5c:	5f                   	pop    edi
c001dd5d:	5d                   	pop    ebp
c001dd5e:	c3                   	ret    
c001dd5f:	90                   	nop

c001dd60 <ATAPI::diskRemoved()>:
c001dd60:	83 ec 18             	sub    esp,0x18
c001dd63:	68 f7 35 02 c0       	push   0xc00235f7
c001dd68:	e8 0a 14 ff ff       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c001dd6d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dd71:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c001dd78:	83 c4 1c             	add    esp,0x1c
c001dd7b:	c3                   	ret    

c001dd7c <ATAPI::eject()>:
c001dd7c:	57                   	push   edi
c001dd7d:	b9 03 00 00 00       	mov    ecx,0x3
c001dd82:	53                   	push   ebx
c001dd83:	83 ec 14             	sub    esp,0x14
c001dd86:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001dd8a:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001dd8e:	fc                   	cld    
c001dd8f:	31 c0                	xor    eax,eax
c001dd91:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001dd93:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001dd98:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001dd9d:	50                   	push   eax
c001dd9e:	50                   	push   eax
c001dd9f:	6a 00                	push   0x0
c001dda1:	6a 00                	push   0x0
c001dda3:	6a 00                	push   0x0
c001dda5:	6a 02                	push   0x2
c001dda7:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ddab:	50                   	push   eax
c001ddac:	53                   	push   ebx
c001ddad:	e8 ee fc ff ff       	call   c001daa0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001ddb2:	83 c4 14             	add    esp,0x14
c001ddb5:	53                   	push   ebx
c001ddb6:	e8 a5 ff ff ff       	call   c001dd60 <ATAPI::diskRemoved()>
c001ddbb:	83 c4 24             	add    esp,0x24
c001ddbe:	5b                   	pop    ebx
c001ddbf:	5f                   	pop    edi
c001ddc0:	c3                   	ret    
c001ddc1:	90                   	nop

c001ddc2 <ATAPI::diskInserted()>:
c001ddc2:	53                   	push   ebx
c001ddc3:	83 ec 14             	sub    esp,0x14
c001ddc6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001ddca:	68 0d 36 02 c0       	push   0xc002360d
c001ddcf:	e8 a3 13 ff ff       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c001ddd4:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c001dddb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ddde:	e8 17 2c ff ff       	call   c00109fa <PhysicalDisk::startCache()>
c001dde3:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001dde7:	83 c4 18             	add    esp,0x18
c001ddea:	5b                   	pop    ebx
c001ddeb:	e9 e6 4b ff ff       	jmp    c00129d6 <createPartitionsForDisk(PhysicalDisk*)>

c001ddf0 <ATAPI::detectMedia()>:
c001ddf0:	56                   	push   esi
c001ddf1:	53                   	push   ebx
c001ddf2:	83 ec 28             	sub    esp,0x28
c001ddf5:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001ddf9:	6a 0c                	push   0xc
c001ddfb:	6a 00                	push   0x0
c001ddfd:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001de01:	56                   	push   esi
c001de02:	e8 b3 28 fe ff       	call   c00006ba <memset>
c001de07:	58                   	pop    eax
c001de08:	5a                   	pop    edx
c001de09:	6a 00                	push   0x0
c001de0b:	6a 00                	push   0x0
c001de0d:	6a 00                	push   0x0
c001de0f:	6a 00                	push   0x0
c001de11:	56                   	push   esi
c001de12:	53                   	push   ebx
c001de13:	e8 88 fc ff ff       	call   c001daa0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001de18:	83 c4 1c             	add    esp,0x1c
c001de1b:	6a 0c                	push   0xc
c001de1d:	6a 00                	push   0x0
c001de1f:	56                   	push   esi
c001de20:	e8 95 28 fe ff       	call   c00006ba <memset>
c001de25:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001de2a:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001de2f:	59                   	pop    ecx
c001de30:	58                   	pop    eax
c001de31:	6a 01                	push   0x1
c001de33:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001de37:	50                   	push   eax
c001de38:	6a 00                	push   0x0
c001de3a:	6a 12                	push   0x12
c001de3c:	56                   	push   esi
c001de3d:	53                   	push   ebx
c001de3e:	e8 5d fc ff ff       	call   c001daa0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001de43:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001de47:	83 c4 20             	add    esp,0x20
c001de4a:	83 e0 7f             	and    eax,0x7f
c001de4d:	3c 70                	cmp    al,0x70
c001de4f:	74 15                	je     c001de66 <ATAPI::detectMedia()+0x76>
c001de51:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001de58:	75 0c                	jne    c001de66 <ATAPI::detectMedia()+0x76>
c001de5a:	83 ec 0c             	sub    esp,0xc
c001de5d:	53                   	push   ebx
c001de5e:	e8 5f ff ff ff       	call   c001ddc2 <ATAPI::diskInserted()>
c001de63:	83 c4 10             	add    esp,0x10
c001de66:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001de6a:	83 e0 0f             	and    eax,0xf
c001de6d:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001de72:	75 18                	jne    c001de8c <ATAPI::detectMedia()+0x9c>
c001de74:	3c 02                	cmp    al,0x2
c001de76:	75 14                	jne    c001de8c <ATAPI::detectMedia()+0x9c>
c001de78:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001de7f:	74 24                	je     c001dea5 <ATAPI::detectMedia()+0xb5>
c001de81:	83 ec 0c             	sub    esp,0xc
c001de84:	53                   	push   ebx
c001de85:	e8 d6 fe ff ff       	call   c001dd60 <ATAPI::diskRemoved()>
c001de8a:	eb 16                	jmp    c001dea2 <ATAPI::detectMedia()+0xb2>
c001de8c:	84 c0                	test   al,al
c001de8e:	75 15                	jne    c001dea5 <ATAPI::detectMedia()+0xb5>
c001de90:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001de97:	75 0c                	jne    c001dea5 <ATAPI::detectMedia()+0xb5>
c001de99:	83 ec 0c             	sub    esp,0xc
c001de9c:	53                   	push   ebx
c001de9d:	e8 20 ff ff ff       	call   c001ddc2 <ATAPI::diskInserted()>
c001dea2:	83 c4 10             	add    esp,0x10
c001dea5:	83 c4 24             	add    esp,0x24
c001dea8:	5b                   	pop    ebx
c001dea9:	5e                   	pop    esi
c001deaa:	c3                   	ret    
c001deab:	90                   	nop

c001deac <ATAPI::open(int, int, void*)>:
c001deac:	53                   	push   ebx
c001dead:	83 ec 08             	sub    esp,0x8
c001deb0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001deb4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001deb8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001debc:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001dec2:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001dec8:	c1 e0 06             	shl    eax,0x6
c001decb:	01 d0                	add    eax,edx
c001decd:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001ded4:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001deda:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001dee1:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001deeb:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001def1:	6a 04                	push   0x4
c001def3:	6a 0c                	push   0xc
c001def5:	51                   	push   ecx
c001def6:	52                   	push   edx
c001def7:	e8 86 e8 ff ff       	call   c001c782 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001defc:	90                   	nop
c001defd:	90                   	nop
c001defe:	6a 00                	push   0x0
c001df00:	6a 0c                	push   0xc
c001df02:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001df09:	50                   	push   eax
c001df0a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001df10:	e8 6d e8 ff ff       	call   c001c782 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001df15:	83 c4 14             	add    esp,0x14
c001df18:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001df1f:	53                   	push   ebx
c001df20:	e8 cb fe ff ff       	call   c001ddf0 <ATAPI::detectMedia()>
c001df25:	83 c4 18             	add    esp,0x18
c001df28:	31 c0                	xor    eax,eax
c001df2a:	5b                   	pop    ebx
c001df2b:	c3                   	ret    

c001df2c <ATAPI::read(unsigned long long, int, void*)>:
c001df2c:	55                   	push   ebp
c001df2d:	57                   	push   edi
c001df2e:	56                   	push   esi
c001df2f:	53                   	push   ebx
c001df30:	83 ec 1c             	sub    esp,0x1c
c001df33:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001df37:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001df3b:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001df3f:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001df46:	74 3c                	je     c001df84 <ATAPI::read(unsigned long long, int, void*)+0x58>
c001df48:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001df4c:	b9 03 00 00 00       	mov    ecx,0x3
c001df51:	fc                   	cld    
c001df52:	31 c0                	xor    eax,eax
c001df54:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001df56:	0f ce                	bswap  esi
c001df58:	89 e8                	mov    eax,ebp
c001df5a:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001df5f:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001df63:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001df67:	50                   	push   eax
c001df68:	50                   	push   eax
c001df69:	55                   	push   ebp
c001df6a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001df6e:	c1 e5 0b             	shl    ebp,0xb
c001df71:	6a 00                	push   0x0
c001df73:	55                   	push   ebp
c001df74:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001df78:	50                   	push   eax
c001df79:	53                   	push   ebx
c001df7a:	e8 21 fb ff ff       	call   c001daa0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001df7f:	83 c4 20             	add    esp,0x20
c001df82:	eb 1a                	jmp    c001df9e <ATAPI::read(unsigned long long, int, void*)+0x72>
c001df84:	83 ec 0c             	sub    esp,0xc
c001df87:	53                   	push   ebx
c001df88:	e8 63 fe ff ff       	call   c001ddf0 <ATAPI::detectMedia()>
c001df8d:	83 c4 10             	add    esp,0x10
c001df90:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001df97:	75 af                	jne    c001df48 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001df99:	b8 02 00 00 00       	mov    eax,0x2
c001df9e:	83 c4 1c             	add    esp,0x1c
c001dfa1:	5b                   	pop    ebx
c001dfa2:	5e                   	pop    esi
c001dfa3:	5f                   	pop    edi
c001dfa4:	5d                   	pop    ebp
c001dfa5:	c3                   	ret    

c001dfa6 <AVX::open(int, int, void*)>:
c001dfa6:	83 ec 0c             	sub    esp,0xc
c001dfa9:	e8 9a 10 00 00       	call   c001f048 <avxInit>
c001dfae:	b8 00 00 00 00       	mov    eax,0x0
c001dfb3:	83 c4 0c             	add    esp,0xc
c001dfb6:	c3                   	ret    
c001dfb7:	90                   	nop

c001dfb8 <AVX::close(int, int, void*)>:
c001dfb8:	83 ec 0c             	sub    esp,0xc
c001dfbb:	e8 89 10 00 00       	call   c001f049 <avxClose>
c001dfc0:	b8 00 00 00 00       	mov    eax,0x0
c001dfc5:	83 c4 0c             	add    esp,0xc
c001dfc8:	c3                   	ret    
c001dfc9:	90                   	nop

c001dfca <AVX::available()>:
c001dfca:	83 ec 0c             	sub    esp,0xc
c001dfcd:	e8 6e 10 00 00       	call   c001f040 <avxDetect>
c001dfd2:	85 c0                	test   eax,eax
c001dfd4:	0f 95 c0             	setne  al
c001dfd7:	83 c4 0c             	add    esp,0xc
c001dfda:	c3                   	ret    
c001dfdb:	90                   	nop

c001dfdc <AVX::save(void*)>:
c001dfdc:	83 ec 0c             	sub    esp,0xc
c001dfdf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001dfe3:	83 ec 0c             	sub    esp,0xc
c001dfe6:	50                   	push   eax
c001dfe7:	e8 5a 10 00 00       	call   c001f046 <avxSave>
c001dfec:	83 c4 10             	add    esp,0x10
c001dfef:	90                   	nop
c001dff0:	83 c4 0c             	add    esp,0xc
c001dff3:	c3                   	ret    

c001dff4 <AVX::load(void*)>:
c001dff4:	83 ec 0c             	sub    esp,0xc
c001dff7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001dffb:	83 ec 0c             	sub    esp,0xc
c001dffe:	50                   	push   eax
c001dfff:	e8 43 10 00 00       	call   c001f047 <avxLoad>
c001e004:	83 c4 10             	add    esp,0x10
c001e007:	90                   	nop
c001e008:	83 c4 0c             	add    esp,0xc
c001e00b:	c3                   	ret    

c001e00c <AVX::AVX()>:
c001e00c:	83 ec 0c             	sub    esp,0xc
c001e00f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e013:	83 ec 08             	sub    esp,0x8
c001e016:	68 58 36 02 c0       	push   0xc0023658
c001e01b:	50                   	push   eax
c001e01c:	e8 4f 2a ff ff       	call   c0010a70 <FPU::FPU(char const*)>
c001e021:	83 c4 10             	add    esp,0x10
c001e024:	ba 68 36 02 c0       	mov    edx,0xc0023668
c001e029:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e02d:	89 10                	mov    DWORD PTR [eax],edx
c001e02f:	90                   	nop
c001e030:	83 c4 0c             	add    esp,0xc
c001e033:	c3                   	ret    

c001e034 <MMX::available()>:
c001e034:	a1 88 45 02 c0       	mov    eax,ds:0xc0024588
c001e039:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001e03f:	83 e0 20             	and    eax,0x20
c001e042:	84 c0                	test   al,al
c001e044:	0f 95 c0             	setne  al
c001e047:	c3                   	ret    

c001e048 <MMX::open(int, int, void*)>:
c001e048:	83 ec 0c             	sub    esp,0xc
c001e04b:	e8 6c 10 00 00       	call   c001f0bc <x87Init>
c001e050:	b8 00 00 00 00       	mov    eax,0x0
c001e055:	83 c4 0c             	add    esp,0xc
c001e058:	c3                   	ret    
c001e059:	90                   	nop

c001e05a <MMX::close(int, int, void*)>:
c001e05a:	83 ec 0c             	sub    esp,0xc
c001e05d:	e8 74 10 00 00       	call   c001f0d6 <x87Close>
c001e062:	b8 00 00 00 00       	mov    eax,0x0
c001e067:	83 c4 0c             	add    esp,0xc
c001e06a:	c3                   	ret    
c001e06b:	90                   	nop

c001e06c <MMX::save(void*)>:
c001e06c:	83 ec 0c             	sub    esp,0xc
c001e06f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e073:	83 ec 0c             	sub    esp,0xc
c001e076:	50                   	push   eax
c001e077:	e8 35 10 00 00       	call   c001f0b1 <x87Save>
c001e07c:	83 c4 10             	add    esp,0x10
c001e07f:	90                   	nop
c001e080:	83 c4 0c             	add    esp,0xc
c001e083:	c3                   	ret    

c001e084 <MMX::load(void*)>:
c001e084:	83 ec 0c             	sub    esp,0xc
c001e087:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e08b:	83 ec 0c             	sub    esp,0xc
c001e08e:	50                   	push   eax
c001e08f:	e8 23 10 00 00       	call   c001f0b7 <x87Load>
c001e094:	83 c4 10             	add    esp,0x10
c001e097:	90                   	nop
c001e098:	83 c4 0c             	add    esp,0xc
c001e09b:	c3                   	ret    

c001e09c <MMX::MMX()>:
c001e09c:	83 ec 0c             	sub    esp,0xc
c001e09f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e0a3:	83 ec 08             	sub    esp,0x8
c001e0a6:	68 98 36 02 c0       	push   0xc0023698
c001e0ab:	50                   	push   eax
c001e0ac:	e8 bf 29 ff ff       	call   c0010a70 <FPU::FPU(char const*)>
c001e0b1:	83 c4 10             	add    esp,0x10
c001e0b4:	ba a8 36 02 c0       	mov    edx,0xc00236a8
c001e0b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e0bd:	89 10                	mov    DWORD PTR [eax],edx
c001e0bf:	90                   	nop
c001e0c0:	83 c4 0c             	add    esp,0xc
c001e0c3:	c3                   	ret    

c001e0c4 <SSE::open(int, int, void*)>:
c001e0c4:	83 ec 0c             	sub    esp,0xc
c001e0c7:	e8 ab 0f 00 00       	call   c001f077 <sseInit>
c001e0cc:	b8 00 00 00 00       	mov    eax,0x0
c001e0d1:	83 c4 0c             	add    esp,0xc
c001e0d4:	c3                   	ret    
c001e0d5:	90                   	nop

c001e0d6 <SSE::close(int, int, void*)>:
c001e0d6:	83 ec 0c             	sub    esp,0xc
c001e0d9:	e8 a9 0f 00 00       	call   c001f087 <sseClose>
c001e0de:	b8 00 00 00 00       	mov    eax,0x0
c001e0e3:	83 c4 0c             	add    esp,0xc
c001e0e6:	c3                   	ret    
c001e0e7:	90                   	nop

c001e0e8 <SSE::available()>:
c001e0e8:	83 ec 1c             	sub    esp,0x1c
c001e0eb:	e8 60 0f 00 00       	call   c001f050 <sseDetect>
c001e0f0:	85 c0                	test   eax,eax
c001e0f2:	0f 95 c0             	setne  al
c001e0f5:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001e0f9:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001e0fd:	83 c4 1c             	add    esp,0x1c
c001e100:	c3                   	ret    
c001e101:	90                   	nop

c001e102 <SSE::save(void*)>:
c001e102:	83 ec 0c             	sub    esp,0xc
c001e105:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e109:	83 ec 0c             	sub    esp,0xc
c001e10c:	50                   	push   eax
c001e10d:	e8 59 0f 00 00       	call   c001f06b <sseSave>
c001e112:	83 c4 10             	add    esp,0x10
c001e115:	90                   	nop
c001e116:	83 c4 0c             	add    esp,0xc
c001e119:	c3                   	ret    

c001e11a <SSE::load(void*)>:
c001e11a:	83 ec 0c             	sub    esp,0xc
c001e11d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e121:	83 ec 0c             	sub    esp,0xc
c001e124:	50                   	push   eax
c001e125:	e8 47 0f 00 00       	call   c001f071 <sseLoad>
c001e12a:	83 c4 10             	add    esp,0x10
c001e12d:	90                   	nop
c001e12e:	83 c4 0c             	add    esp,0xc
c001e131:	c3                   	ret    

c001e132 <SSE::SSE()>:
c001e132:	83 ec 0c             	sub    esp,0xc
c001e135:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e139:	83 ec 08             	sub    esp,0x8
c001e13c:	68 d8 36 02 c0       	push   0xc00236d8
c001e141:	50                   	push   eax
c001e142:	e8 29 29 ff ff       	call   c0010a70 <FPU::FPU(char const*)>
c001e147:	83 c4 10             	add    esp,0x10
c001e14a:	ba e8 36 02 c0       	mov    edx,0xc00236e8
c001e14f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e153:	89 10                	mov    DWORD PTR [eax],edx
c001e155:	90                   	nop
c001e156:	83 c4 0c             	add    esp,0xc
c001e159:	c3                   	ret    

c001e15a <x87::open(int, int, void*)>:
c001e15a:	83 ec 0c             	sub    esp,0xc
c001e15d:	e8 5a 0f 00 00       	call   c001f0bc <x87Init>
c001e162:	b8 00 00 00 00       	mov    eax,0x0
c001e167:	83 c4 0c             	add    esp,0xc
c001e16a:	c3                   	ret    
c001e16b:	90                   	nop

c001e16c <x87::close(int, int, void*)>:
c001e16c:	83 ec 0c             	sub    esp,0xc
c001e16f:	e8 62 0f 00 00       	call   c001f0d6 <x87Close>
c001e174:	b8 00 00 00 00       	mov    eax,0x0
c001e179:	83 c4 0c             	add    esp,0xc
c001e17c:	c3                   	ret    
c001e17d:	90                   	nop

c001e17e <x87::available()>:
c001e17e:	83 ec 0c             	sub    esp,0xc
c001e181:	e8 10 0f 00 00       	call   c001f096 <x87Detect>
c001e186:	85 c0                	test   eax,eax
c001e188:	0f 95 c0             	setne  al
c001e18b:	83 c4 0c             	add    esp,0xc
c001e18e:	c3                   	ret    
c001e18f:	90                   	nop

c001e190 <x87::save(void*)>:
c001e190:	83 ec 0c             	sub    esp,0xc
c001e193:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e197:	83 ec 0c             	sub    esp,0xc
c001e19a:	50                   	push   eax
c001e19b:	e8 11 0f 00 00       	call   c001f0b1 <x87Save>
c001e1a0:	83 c4 10             	add    esp,0x10
c001e1a3:	90                   	nop
c001e1a4:	83 c4 0c             	add    esp,0xc
c001e1a7:	c3                   	ret    

c001e1a8 <x87::load(void*)>:
c001e1a8:	83 ec 0c             	sub    esp,0xc
c001e1ab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e1af:	83 ec 0c             	sub    esp,0xc
c001e1b2:	50                   	push   eax
c001e1b3:	e8 ff 0e 00 00       	call   c001f0b7 <x87Load>
c001e1b8:	83 c4 10             	add    esp,0x10
c001e1bb:	90                   	nop
c001e1bc:	83 c4 0c             	add    esp,0xc
c001e1bf:	c3                   	ret    

c001e1c0 <x87::x87()>:
c001e1c0:	83 ec 0c             	sub    esp,0xc
c001e1c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1c7:	83 ec 08             	sub    esp,0x8
c001e1ca:	68 18 37 02 c0       	push   0xc0023718
c001e1cf:	50                   	push   eax
c001e1d0:	e8 9b 28 ff ff       	call   c0010a70 <FPU::FPU(char const*)>
c001e1d5:	83 c4 10             	add    esp,0x10
c001e1d8:	ba 28 37 02 c0       	mov    edx,0xc0023728
c001e1dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1e1:	89 10                	mov    DWORD PTR [eax],edx
c001e1e3:	90                   	nop
c001e1e4:	83 c4 0c             	add    esp,0xc
c001e1e7:	c3                   	ret    

c001e1e8 <APIC::disable()>:
c001e1e8:	90                   	nop
c001e1e9:	c3                   	ret    

c001e1ea <APIC::close(int, int, void*)>:
c001e1ea:	55                   	push   ebp
c001e1eb:	89 e5                	mov    ebp,esp
c001e1ed:	83 ec 08             	sub    esp,0x8
c001e1f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e1f3:	8b 00                	mov    eax,DWORD PTR [eax]
c001e1f5:	83 c0 3c             	add    eax,0x3c
c001e1f8:	8b 00                	mov    eax,DWORD PTR [eax]
c001e1fa:	83 ec 0c             	sub    esp,0xc
c001e1fd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e200:	ff d0                	call   eax
c001e202:	83 c4 10             	add    esp,0x10
c001e205:	b8 00 00 00 00       	mov    eax,0x0
c001e20a:	c9                   	leave  
c001e20b:	c3                   	ret    

c001e20c <IOAPIC::close(int, int, void*)>:
c001e20c:	b8 00 00 00 00       	mov    eax,0x0
c001e211:	c3                   	ret    

c001e212 <APIC::io_wait()>:
c001e212:	eb 00                	jmp    c001e214 <APIC::io_wait()+0x2>
c001e214:	eb 00                	jmp    c001e216 <APIC::io_wait()+0x4>
c001e216:	90                   	nop
c001e217:	c3                   	ret    

c001e218 <APIC::getBase()>:
c001e218:	55                   	push   ebp
c001e219:	89 e5                	mov    ebp,esp
c001e21b:	83 ec 18             	sub    esp,0x18
c001e21e:	a1 88 45 02 c0       	mov    eax,ds:0xc0024588
c001e223:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001e229:	83 e0 08             	and    eax,0x8
c001e22c:	84 c0                	test   al,al
c001e22e:	75 07                	jne    c001e237 <APIC::getBase()+0x1f>
c001e230:	b8 00 00 00 00       	mov    eax,0x0
c001e235:	eb 21                	jmp    c001e258 <APIC::getBase()+0x40>
c001e237:	a1 88 45 02 c0       	mov    eax,ds:0xc0024588
c001e23c:	83 ec 08             	sub    esp,0x8
c001e23f:	6a 1b                	push   0x1b
c001e241:	50                   	push   eax
c001e242:	e8 63 d3 fe ff       	call   c000b5aa <Computer::rdmsr(unsigned int)>
c001e247:	83 c4 10             	add    esp,0x10
c001e24a:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001e24d:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001e250:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e253:	25 00 f0 ff ff       	and    eax,0xfffff000
c001e258:	c9                   	leave  
c001e259:	c3                   	ret    

c001e25a <APIC::eoi(unsigned char)>:
c001e25a:	55                   	push   ebp
c001e25b:	89 e5                	mov    ebp,esp
c001e25d:	83 ec 28             	sub    esp,0x28
c001e260:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e263:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001e266:	83 ec 0c             	sub    esp,0xc
c001e269:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e26c:	e8 a7 ff ff ff       	call   c001e218 <APIC::getBase()>
c001e271:	83 c4 10             	add    esp,0x10
c001e274:	05 b0 00 00 00       	add    eax,0xb0
c001e279:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001e27c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001e27f:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001e285:	90                   	nop
c001e286:	c9                   	leave  
c001e287:	c3                   	ret    

c001e288 <APIC::open(int, int, void*)>:
c001e288:	55                   	push   ebp
c001e289:	89 e5                	mov    ebp,esp
c001e28b:	57                   	push   edi
c001e28c:	56                   	push   esi
c001e28d:	53                   	push   ebx
c001e28e:	83 ec 1c             	sub    esp,0x1c
c001e291:	83 ec 0c             	sub    esp,0xc
c001e294:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e297:	e8 7c ff ff ff       	call   c001e218 <APIC::getBase()>
c001e29c:	83 c4 10             	add    esp,0x10
c001e29f:	05 f0 00 00 00       	add    eax,0xf0
c001e2a4:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001e2a7:	83 ec 0c             	sub    esp,0xc
c001e2aa:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e2ad:	e8 66 ff ff ff       	call   c001e218 <APIC::getBase()>
c001e2b2:	83 c4 10             	add    esp,0x10
c001e2b5:	89 c2                	mov    edx,eax
c001e2b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e2ba:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e2c0:	89 c7                	mov    edi,eax
c001e2c2:	81 e7 ff 00 00 00    	and    edi,0xff
c001e2c8:	89 d0                	mov    eax,edx
c001e2ca:	ba 00 00 00 00       	mov    edx,0x0
c001e2cf:	89 c1                	mov    ecx,eax
c001e2d1:	80 e5 ff             	and    ch,0xff
c001e2d4:	89 cb                	mov    ebx,ecx
c001e2d6:	89 d0                	mov    eax,edx
c001e2d8:	25 ff 00 00 00       	and    eax,0xff
c001e2dd:	89 c6                	mov    esi,eax
c001e2df:	89 d8                	mov    eax,ebx
c001e2e1:	89 f2                	mov    edx,esi
c001e2e3:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001e2e6:	8d 5f 08             	lea    ebx,[edi+0x8]
c001e2e9:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001e2ed:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001e2f1:	83 e0 00             	and    eax,0x0
c001e2f4:	09 d0                	or     eax,edx
c001e2f6:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001e2fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e2fd:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e303:	8d 50 01             	lea    edx,[eax+0x1]
c001e306:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001e309:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001e30f:	31 d2                	xor    edx,edx
c001e311:	88 c2                	mov    dl,al
c001e313:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e316:	83 c2 08             	add    edx,0x8
c001e319:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001e31d:	81 e1 ff 00 00 00    	and    ecx,0xff
c001e323:	81 c9 00 00 01 00    	or     ecx,0x10000
c001e329:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001e32d:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001e330:	8b 00                	mov    eax,DWORD PTR [eax]
c001e332:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001e335:	81 4d e0 00 01 00 00 	or     DWORD PTR [ebp-0x20],0x100
c001e33c:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001e33f:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c001e342:	89 10                	mov    DWORD PTR [eax],edx
c001e344:	b8 00 00 00 00       	mov    eax,0x0
c001e349:	8d 65 f4             	lea    esp,[ebp-0xc]
c001e34c:	5b                   	pop    ebx
c001e34d:	5e                   	pop    esi
c001e34e:	5f                   	pop    edi
c001e34f:	5d                   	pop    ebp
c001e350:	c3                   	ret    
c001e351:	90                   	nop

c001e352 <IOAPIC::IOAPIC()>:
c001e352:	83 ec 0c             	sub    esp,0xc
c001e355:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e359:	83 ec 08             	sub    esp,0x8
c001e35c:	68 58 37 02 c0       	push   0xc0023758
c001e361:	50                   	push   eax
c001e362:	e8 15 24 ff ff       	call   c001077c <Device::Device(char const*)>
c001e367:	83 c4 10             	add    esp,0x10
c001e36a:	ba 80 38 02 c0       	mov    edx,0xc0023880
c001e36f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e373:	89 10                	mov    DWORD PTR [eax],edx
c001e375:	90                   	nop
c001e376:	83 c4 0c             	add    esp,0xc
c001e379:	c3                   	ret    

c001e37a <APIC::APIC()>:
c001e37a:	53                   	push   ebx
c001e37b:	83 ec 18             	sub    esp,0x18
c001e37e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e382:	83 ec 08             	sub    esp,0x8
c001e385:	68 60 37 02 c0       	push   0xc0023760
c001e38a:	50                   	push   eax
c001e38b:	e8 3a 2b ff ff       	call   c0010eca <InterruptController::InterruptController(char const*)>
c001e390:	83 c4 10             	add    esp,0x10
c001e393:	ba 38 38 02 c0       	mov    edx,0xc0023838
c001e398:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e39c:	89 10                	mov    DWORD PTR [eax],edx
c001e39e:	a0 80 63 02 c0       	mov    al,ds:0xc0026380
c001e3a3:	83 f0 01             	xor    eax,0x1
c001e3a6:	84 c0                	test   al,al
c001e3a8:	0f 84 a2 00 00 00    	je     c001e450 <APIC::APIC()+0xd6>
c001e3ae:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001e3b3:	a0 30 4e 02 c0       	mov    al,ds:0xc0024e30
c001e3b8:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c001e3bc:	0f 83 87 00 00 00    	jae    c001e449 <APIC::APIC()+0xcf>
c001e3c2:	83 ec 0c             	sub    esp,0xc
c001e3c5:	68 68 01 00 00       	push   0x168
c001e3ca:	e8 73 0c ff ff       	call   c000f042 <operator new(unsigned long)>
c001e3cf:	83 c4 10             	add    esp,0x10
c001e3d2:	89 c3                	mov    ebx,eax
c001e3d4:	83 ec 0c             	sub    esp,0xc
c001e3d7:	53                   	push   ebx
c001e3d8:	e8 75 ff ff ff       	call   c001e352 <IOAPIC::IOAPIC()>
c001e3dd:	83 c4 10             	add    esp,0x10
c001e3e0:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001e3e4:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001e3e8:	25 ff 00 00 00       	and    eax,0xff
c001e3ed:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001e3f1:	89 14 85 60 63 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9ca0],edx
c001e3f8:	a1 40 63 02 c0       	mov    eax,ds:0xc0026340
c001e3fd:	40                   	inc    eax
c001e3fe:	a3 40 63 02 c0       	mov    ds:0xc0026340,eax
c001e403:	a1 88 45 02 c0       	mov    eax,ds:0xc0024588
c001e408:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001e40e:	83 ec 08             	sub    esp,0x8
c001e411:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001e415:	50                   	push   eax
c001e416:	e8 71 21 ff ff       	call   c001058c <Device::addChild(Device*)>
c001e41b:	83 c4 10             	add    esp,0x10
c001e41e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e422:	8b 00                	mov    eax,DWORD PTR [eax]
c001e424:	83 c0 08             	add    eax,0x8
c001e427:	8b 10                	mov    edx,DWORD PTR [eax]
c001e429:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001e42d:	25 ff 00 00 00       	and    eax,0xff
c001e432:	6a 00                	push   0x0
c001e434:	6a 00                	push   0x0
c001e436:	50                   	push   eax
c001e437:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001e43b:	ff d2                	call   edx
c001e43d:	83 c4 10             	add    esp,0x10
c001e440:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c001e444:	e9 6a ff ff ff       	jmp    c001e3b3 <APIC::APIC()+0x39>
c001e449:	c6 05 80 63 02 c0 01 	mov    BYTE PTR ds:0xc0026380,0x1
c001e450:	90                   	nop
c001e451:	83 c4 18             	add    esp,0x18
c001e454:	5b                   	pop    ebx
c001e455:	c3                   	ret    

c001e456 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001e456:	55                   	push   ebp
c001e457:	89 e5                	mov    ebp,esp
c001e459:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e45c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001e462:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001e465:	72 1d                	jb     c001e484 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001e467:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e46a:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001e470:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e473:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001e479:	01 d0                	add    eax,edx
c001e47b:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001e47e:	73 04                	jae    c001e484 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001e480:	b0 01                	mov    al,0x1
c001e482:	eb 02                	jmp    c001e486 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001e484:	b0 00                	mov    al,0x0
c001e486:	5d                   	pop    ebp
c001e487:	c3                   	ret    

c001e488 <IOAPIC::read(int)>:
c001e488:	55                   	push   ebp
c001e489:	89 e5                	mov    ebp,esp
c001e48b:	83 ec 10             	sub    esp,0x10
c001e48e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e491:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001e497:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001e49a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e49d:	31 d2                	xor    edx,edx
c001e49f:	88 c2                	mov    dl,al
c001e4a1:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e4a4:	89 10                	mov    DWORD PTR [eax],edx
c001e4a6:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e4a9:	83 c0 10             	add    eax,0x10
c001e4ac:	8b 00                	mov    eax,DWORD PTR [eax]
c001e4ae:	c9                   	leave  
c001e4af:	c3                   	ret    

c001e4b0 <IOAPIC::open(int, int, void*)>:
c001e4b0:	55                   	push   ebp
c001e4b1:	89 e5                	mov    ebp,esp
c001e4b3:	57                   	push   edi
c001e4b4:	56                   	push   esi
c001e4b5:	53                   	push   ebx
c001e4b6:	83 ec 0c             	sub    esp,0xc
c001e4b9:	83 ec 0c             	sub    esp,0xc
c001e4bc:	68 8b 37 02 c0       	push   0xc002378b
c001e4c1:	e8 b1 0c ff ff       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c001e4c6:	83 c4 10             	add    esp,0x10
c001e4c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e4cc:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001e4cf:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001e4d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e4d8:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e4de:	8b 14 85 60 4e 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdb1a0]
c001e4e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e4e8:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001e4ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e4f1:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e4f7:	8b 14 85 e0 4e 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdb120]
c001e4fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e501:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001e507:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e50a:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001e510:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e513:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e519:	89 c7                	mov    edi,eax
c001e51b:	81 e7 ff 00 00 00    	and    edi,0xff
c001e521:	89 d0                	mov    eax,edx
c001e523:	ba 00 00 00 00       	mov    edx,0x0
c001e528:	89 c1                	mov    ecx,eax
c001e52a:	80 e5 ff             	and    ch,0xff
c001e52d:	89 cb                	mov    ebx,ecx
c001e52f:	89 d0                	mov    eax,edx
c001e531:	25 ff 00 00 00       	and    eax,0xff
c001e536:	89 c6                	mov    esi,eax
c001e538:	89 d8                	mov    eax,ebx
c001e53a:	89 f2                	mov    edx,esi
c001e53c:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001e53f:	8d 5f 08             	lea    ebx,[edi+0x8]
c001e542:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001e546:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001e54a:	83 e0 00             	and    eax,0x0
c001e54d:	09 d0                	or     eax,edx
c001e54f:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001e553:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e556:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e55c:	8d 50 01             	lea    edx,[eax+0x1]
c001e55f:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001e562:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001e568:	31 d2                	xor    edx,edx
c001e56a:	88 c2                	mov    dl,al
c001e56c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e56f:	83 c2 08             	add    edx,0x8
c001e572:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001e576:	81 e1 ff 00 00 00    	and    ecx,0xff
c001e57c:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001e582:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001e586:	83 ec 08             	sub    esp,0x8
c001e589:	6a 01                	push   0x1
c001e58b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e58e:	e8 f5 fe ff ff       	call   c001e488 <IOAPIC::read(int)>
c001e593:	83 c4 10             	add    esp,0x10
c001e596:	c1 f8 10             	sar    eax,0x10
c001e599:	25 ff 00 00 00       	and    eax,0xff
c001e59e:	8d 50 01             	lea    edx,[eax+0x1]
c001e5a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e5a4:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001e5aa:	b8 00 00 00 00       	mov    eax,0x0
c001e5af:	8d 65 f4             	lea    esp,[ebp-0xc]
c001e5b2:	5b                   	pop    ebx
c001e5b3:	5e                   	pop    esi
c001e5b4:	5f                   	pop    edi
c001e5b5:	5d                   	pop    ebp
c001e5b6:	c3                   	ret    
c001e5b7:	90                   	nop

c001e5b8 <IOAPIC::write(int, int)>:
c001e5b8:	55                   	push   ebp
c001e5b9:	89 e5                	mov    ebp,esp
c001e5bb:	83 ec 10             	sub    esp,0x10
c001e5be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e5c1:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001e5c7:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001e5ca:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e5cd:	31 d2                	xor    edx,edx
c001e5cf:	88 c2                	mov    dl,al
c001e5d1:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e5d4:	89 10                	mov    DWORD PTR [eax],edx
c001e5d6:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e5d9:	8d 50 10             	lea    edx,[eax+0x10]
c001e5dc:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001e5df:	89 02                	mov    DWORD PTR [edx],eax
c001e5e1:	90                   	nop
c001e5e2:	c9                   	leave  
c001e5e3:	c3                   	ret    

c001e5e4 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char)>:
c001e5e4:	55                   	push   ebp
c001e5e5:	89 e5                	mov    ebp,esp
c001e5e7:	83 ec 20             	sub    esp,0x20
c001e5ea:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e5ed:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001e5f0:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c001e5f3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001e5f6:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001e5f9:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001e5fc:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001e5ff:	88 d0                	mov    al,dl
c001e601:	88 45 e8             	mov    BYTE PTR [ebp-0x18],al
c001e604:	8a 45 ec             	mov    al,BYTE PTR [ebp-0x14]
c001e607:	25 ff 00 00 00       	and    eax,0xff
c001e60c:	83 c0 08             	add    eax,0x8
c001e60f:	01 c0                	add    eax,eax
c001e611:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001e614:	8a 45 ec             	mov    al,BYTE PTR [ebp-0x14]
c001e617:	25 ff 00 00 00       	and    eax,0xff
c001e61c:	83 c0 08             	add    eax,0x8
c001e61f:	01 c0                	add    eax,eax
c001e621:	40                   	inc    eax
c001e622:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
c001e625:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c001e628:	50                   	push   eax
c001e629:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e62c:	e8 57 fe ff ff       	call   c001e488 <IOAPIC::read(int)>
c001e631:	83 c4 08             	add    esp,0x8
c001e634:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001e637:	81 65 f4 ff ff ff 00 	and    DWORD PTR [ebp-0xc],0xffffff
c001e63e:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c001e641:	c1 e0 18             	shl    eax,0x18
c001e644:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001e647:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001e64a:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c001e64d:	52                   	push   edx
c001e64e:	50                   	push   eax
c001e64f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e652:	e8 61 ff ff ff       	call   c001e5b8 <IOAPIC::write(int, int)>
c001e657:	83 c4 0c             	add    esp,0xc
c001e65a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e65d:	50                   	push   eax
c001e65e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e661:	e8 22 fe ff ff       	call   c001e488 <IOAPIC::read(int)>
c001e666:	83 c4 08             	add    esp,0x8
c001e669:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001e66c:	81 65 f0 ff ff fe ff 	and    DWORD PTR [ebp-0x10],0xfffeffff
c001e673:	81 65 f0 ff f7 ff ff 	and    DWORD PTR [ebp-0x10],0xfffff7ff
c001e67a:	81 65 f0 ff f8 ff ff 	and    DWORD PTR [ebp-0x10],0xfffff8ff
c001e681:	81 65 f0 00 ff ff ff 	and    DWORD PTR [ebp-0x10],0xffffff00
c001e688:	8a 45 e8             	mov    al,BYTE PTR [ebp-0x18]
c001e68b:	25 ff 00 00 00       	and    eax,0xff
c001e690:	09 45 f0             	or     DWORD PTR [ebp-0x10],eax
c001e693:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c001e696:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e699:	52                   	push   edx
c001e69a:	50                   	push   eax
c001e69b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e69e:	e8 15 ff ff ff       	call   c001e5b8 <IOAPIC::write(int, int)>
c001e6a3:	83 c4 0c             	add    esp,0xc
c001e6a6:	90                   	nop
c001e6a7:	c9                   	leave  
c001e6a8:	c3                   	ret    
c001e6a9:	90                   	nop

c001e6aa <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001e6aa:	55                   	push   ebp
c001e6ab:	89 e5                	mov    ebp,esp
c001e6ad:	56                   	push   esi
c001e6ae:	53                   	push   ebx
c001e6af:	83 ec 20             	sub    esp,0x20
c001e6b2:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001e6b5:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001e6b8:	80 7d e4 00          	cmp    BYTE PTR [ebp-0x1c],0x0
c001e6bc:	74 2a                	je     c001e6e8 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3e>
c001e6be:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c001e6c2:	7f 14                	jg     c001e6d8 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x2e>
c001e6c4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e6c7:	05 e0 3c 02 c0       	add    eax,0xc0023ce0
c001e6cc:	8a 00                	mov    al,BYTE PTR [eax]
c001e6ce:	25 ff 00 00 00       	and    eax,0xff
c001e6d3:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c001e6d6:	eb 10                	jmp    c001e6e8 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3e>
c001e6d8:	83 ec 0c             	sub    esp,0xc
c001e6db:	68 9c 37 02 c0       	push   0xc002379c
c001e6e0:	e8 5d 72 ff ff       	call   c0015942 <Krnl::panic(char const*)>
c001e6e5:	83 c4 10             	add    esp,0x10
c001e6e8:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001e6ec:	a1 40 63 02 c0       	mov    eax,ds:0xc0026340
c001e6f1:	83 ec 08             	sub    esp,0x8
c001e6f4:	50                   	push   eax
c001e6f5:	68 d4 37 02 c0       	push   0xc00237d4
c001e6fa:	e8 78 0a ff ff       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c001e6ff:	83 c4 10             	add    esp,0x10
c001e702:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001e709:	a1 40 63 02 c0       	mov    eax,ds:0xc0026340
c001e70e:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001e711:	7d 64                	jge    c001e777 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xcd>
c001e713:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e716:	8b 04 85 60 63 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9ca0]
c001e71d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001e720:	83 ec 08             	sub    esp,0x8
c001e723:	52                   	push   edx
c001e724:	50                   	push   eax
c001e725:	e8 2c fd ff ff       	call   c001e456 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c001e72a:	83 c4 10             	add    esp,0x10
c001e72d:	84 c0                	test   al,al
c001e72f:	74 41                	je     c001e772 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xc8>
c001e731:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e734:	8b 1c 85 60 63 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffd9ca0]
c001e73b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e73e:	83 c0 20             	add    eax,0x20
c001e741:	89 c6                	mov    esi,eax
c001e743:	81 e6 ff 00 00 00    	and    esi,0xff
c001e749:	e8 85 60 ff ff       	call   c00147d3 <getCPUNumber()>
c001e74e:	89 c2                	mov    edx,eax
c001e750:	c1 fa 1f             	sar    edx,0x1f
c001e753:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c001e756:	81 e1 ff 00 00 00    	and    ecx,0xff
c001e75c:	83 ec 0c             	sub    esp,0xc
c001e75f:	56                   	push   esi
c001e760:	52                   	push   edx
c001e761:	50                   	push   eax
c001e762:	51                   	push   ecx
c001e763:	53                   	push   ebx
c001e764:	e8 7b fe ff ff       	call   c001e5e4 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char)>
c001e769:	83 c4 20             	add    esp,0x20
c001e76c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001e770:	eb 05                	jmp    c001e777 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xcd>
c001e772:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
c001e775:	eb 92                	jmp    c001e709 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x5f>
c001e777:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001e77a:	83 f0 01             	xor    eax,0x1
c001e77d:	84 c0                	test   al,al
c001e77f:	74 10                	je     c001e791 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xe7>
c001e781:	83 ec 0c             	sub    esp,0xc
c001e784:	68 eb 37 02 c0       	push   0xc00237eb
c001e789:	e8 b4 71 ff ff       	call   c0015942 <Krnl::panic(char const*)>
c001e78e:	83 c4 10             	add    esp,0x10
c001e791:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c001e795:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001e79c:	83 7d ec 03          	cmp    DWORD PTR [ebp-0x14],0x3
c001e7a0:	7f 65                	jg     c001e807 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x15d>
c001e7a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e7a5:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001e7a8:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001e7af:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001e7b2:	01 ca                	add    edx,ecx
c001e7b4:	83 c2 54             	add    edx,0x54
c001e7b7:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c001e7bb:	85 c0                	test   eax,eax
c001e7bd:	75 43                	jne    c001e802 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x158>
c001e7bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e7c2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001e7c5:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001e7cc:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001e7cf:	01 ca                	add    edx,ecx
c001e7d1:	8d 4a 54             	lea    ecx,[edx+0x54]
c001e7d4:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c001e7d7:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c001e7db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e7de:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001e7e1:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001e7e8:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001e7eb:	01 ca                	add    edx,ecx
c001e7ed:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c001e7f3:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001e7f6:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c001e7fa:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e7fd:	83 e8 20             	sub    eax,0x20
c001e800:	eb 1a                	jmp    c001e81c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x172>
c001e802:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c001e805:	eb 95                	jmp    c001e79c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xf2>
c001e807:	83 ec 0c             	sub    esp,0xc
c001e80a:	68 f8 37 02 c0       	push   0xc00237f8
c001e80f:	e8 2e 71 ff ff       	call   c0015942 <Krnl::panic(char const*)>
c001e814:	83 c4 10             	add    esp,0x10
c001e817:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001e81c:	8d 65 f8             	lea    esp,[ebp-0x8]
c001e81f:	5b                   	pop    ebx
c001e820:	5e                   	pop    esi
c001e821:	5d                   	pop    ebp
c001e822:	c3                   	ret    
c001e823:	90                   	nop

c001e824 <PIC::disable()>:
c001e824:	55                   	push   ebp
c001e825:	89 e5                	mov    ebp,esp
c001e827:	83 ec 10             	sub    esp,0x10
c001e82a:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c001e830:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c001e834:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c001e837:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c001e83b:	ee                   	out    dx,al
c001e83c:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c001e842:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c001e846:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c001e849:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c001e84d:	ee                   	out    dx,al
c001e84e:	90                   	nop
c001e84f:	c9                   	leave  
c001e850:	c3                   	ret    
c001e851:	90                   	nop

c001e852 <PIC::close(int, int, void*)>:
c001e852:	55                   	push   ebp
c001e853:	89 e5                	mov    ebp,esp
c001e855:	83 ec 08             	sub    esp,0x8
c001e858:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e85b:	8b 00                	mov    eax,DWORD PTR [eax]
c001e85d:	83 c0 3c             	add    eax,0x3c
c001e860:	8b 00                	mov    eax,DWORD PTR [eax]
c001e862:	83 ec 0c             	sub    esp,0xc
c001e865:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e868:	ff d0                	call   eax
c001e86a:	83 c4 10             	add    esp,0x10
c001e86d:	b8 00 00 00 00       	mov    eax,0x0
c001e872:	c9                   	leave  
c001e873:	c3                   	ret    

c001e874 <PIC::PIC()>:
c001e874:	83 ec 0c             	sub    esp,0xc
c001e877:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e87b:	83 ec 08             	sub    esp,0x8
c001e87e:	68 a4 38 02 c0       	push   0xc00238a4
c001e883:	50                   	push   eax
c001e884:	e8 41 26 ff ff       	call   c0010eca <InterruptController::InterruptController(char const*)>
c001e889:	83 c4 10             	add    esp,0x10
c001e88c:	ba d0 38 02 c0       	mov    edx,0xc00238d0
c001e891:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e895:	89 10                	mov    DWORD PTR [eax],edx
c001e897:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e89b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e8a1:	31 d2                	xor    edx,edx
c001e8a3:	88 c2                	mov    dl,al
c001e8a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8a9:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c001e8b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8b4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e8ba:	31 d2                	xor    edx,edx
c001e8bc:	88 c2                	mov    dl,al
c001e8be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8c2:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c001e8c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8cb:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e8d1:	8d 50 01             	lea    edx,[eax+0x1]
c001e8d4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e8d8:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001e8de:	31 d2                	xor    edx,edx
c001e8e0:	88 c2                	mov    dl,al
c001e8e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8e6:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001e8ea:	83 e1 3f             	and    ecx,0x3f
c001e8ed:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001e8f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8f5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e8fb:	31 d2                	xor    edx,edx
c001e8fd:	88 c2                	mov    dl,al
c001e8ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e903:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c001e90a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e90e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e914:	31 d2                	xor    edx,edx
c001e916:	88 c2                	mov    dl,al
c001e918:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e91c:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c001e921:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e925:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e92b:	8d 50 01             	lea    edx,[eax+0x1]
c001e92e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e932:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001e938:	31 d2                	xor    edx,edx
c001e93a:	88 c2                	mov    dl,al
c001e93c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e940:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001e944:	83 e1 3f             	and    ecx,0x3f
c001e947:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001e94b:	90                   	nop
c001e94c:	83 c4 0c             	add    esp,0xc
c001e94f:	c3                   	ret    

c001e950 <PIC::ioWait()>:
c001e950:	eb 00                	jmp    c001e952 <PIC::ioWait()+0x2>
c001e952:	eb 00                	jmp    c001e954 <PIC::ioWait()+0x4>
c001e954:	90                   	nop
c001e955:	c3                   	ret    

c001e956 <PIC::getIRQReg(int)>:
c001e956:	55                   	push   ebp
c001e957:	89 e5                	mov    ebp,esp
c001e959:	83 ec 10             	sub    esp,0x10
c001e95c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e95f:	25 ff 00 00 00       	and    eax,0xff
c001e964:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c001e96a:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c001e96d:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c001e970:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c001e974:	ee                   	out    dx,al
c001e975:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e978:	25 ff 00 00 00       	and    eax,0xff
c001e97d:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c001e983:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c001e986:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c001e989:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c001e98d:	ee                   	out    dx,al
c001e98e:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c001e994:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c001e998:	89 c2                	mov    edx,eax
c001e99a:	ec                   	in     al,dx
c001e99b:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c001e99e:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c001e9a1:	25 ff 00 00 00       	and    eax,0xff
c001e9a6:	c1 e0 08             	shl    eax,0x8
c001e9a9:	89 c1                	mov    ecx,eax
c001e9ab:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c001e9b1:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c001e9b5:	89 c2                	mov    edx,eax
c001e9b7:	ec                   	in     al,dx
c001e9b8:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c001e9bb:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c001e9be:	25 ff 00 00 00       	and    eax,0xff
c001e9c3:	09 c8                	or     eax,ecx
c001e9c5:	c9                   	leave  
c001e9c6:	c3                   	ret    
c001e9c7:	90                   	nop

c001e9c8 <PIC::eoi(unsigned char)>:
c001e9c8:	55                   	push   ebp
c001e9c9:	89 e5                	mov    ebp,esp
c001e9cb:	83 ec 14             	sub    esp,0x14
c001e9ce:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e9d1:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c001e9d4:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c001e9d8:	75 23                	jne    c001e9fd <PIC::eoi(unsigned char)+0x35>
c001e9da:	6a 0b                	push   0xb
c001e9dc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e9df:	e8 72 ff ff ff       	call   c001e956 <PIC::getIRQReg(int)>
c001e9e4:	83 c4 08             	add    esp,0x8
c001e9e7:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c001e9eb:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c001e9ef:	25 ff ff 00 00       	and    eax,0xffff
c001e9f4:	25 80 00 00 00       	and    eax,0x80
c001e9f9:	85 c0                	test   eax,eax
c001e9fb:	74 5f                	je     c001ea5c <PIC::eoi(unsigned char)+0x94>
c001e9fd:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c001ea01:	75 2d                	jne    c001ea30 <PIC::eoi(unsigned char)+0x68>
c001ea03:	6a 0b                	push   0xb
c001ea05:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ea08:	e8 49 ff ff ff       	call   c001e956 <PIC::getIRQReg(int)>
c001ea0d:	83 c4 08             	add    esp,0x8
c001ea10:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c001ea14:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001ea17:	66 85 c0             	test   ax,ax
c001ea1a:	78 14                	js     c001ea30 <PIC::eoi(unsigned char)+0x68>
c001ea1c:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c001ea22:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c001ea26:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c001ea29:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c001ea2d:	ee                   	out    dx,al
c001ea2e:	eb 2d                	jmp    c001ea5d <PIC::eoi(unsigned char)+0x95>
c001ea30:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c001ea34:	76 12                	jbe    c001ea48 <PIC::eoi(unsigned char)+0x80>
c001ea36:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c001ea3c:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c001ea40:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c001ea43:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c001ea47:	ee                   	out    dx,al
c001ea48:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c001ea4e:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c001ea52:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c001ea55:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c001ea59:	ee                   	out    dx,al
c001ea5a:	eb 01                	jmp    c001ea5d <PIC::eoi(unsigned char)+0x95>
c001ea5c:	90                   	nop
c001ea5d:	c9                   	leave  
c001ea5e:	c3                   	ret    
c001ea5f:	90                   	nop

c001ea60 <PIC::remap()>:
c001ea60:	55                   	push   ebp
c001ea61:	89 e5                	mov    ebp,esp
c001ea63:	83 ec 48             	sub    esp,0x48
c001ea66:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c001ea6d:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c001ea74:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c001ea7a:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c001ea7d:	89 c2                	mov    edx,eax
c001ea7f:	ec                   	in     al,dx
c001ea80:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c001ea83:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c001ea86:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c001ea89:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c001ea8f:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c001ea92:	89 c2                	mov    edx,eax
c001ea94:	ec                   	in     al,dx
c001ea95:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c001ea98:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c001ea9b:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c001ea9e:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c001eaa4:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c001eaa8:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c001eaab:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c001eaae:	ee                   	out    dx,al
c001eaaf:	83 ec 0c             	sub    esp,0xc
c001eab2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001eab5:	e8 96 fe ff ff       	call   c001e950 <PIC::ioWait()>
c001eaba:	83 c4 10             	add    esp,0x10
c001eabd:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c001eac3:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c001eac7:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c001eaca:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c001eacd:	ee                   	out    dx,al
c001eace:	83 ec 0c             	sub    esp,0xc
c001ead1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ead4:	e8 77 fe ff ff       	call   c001e950 <PIC::ioWait()>
c001ead9:	83 c4 10             	add    esp,0x10
c001eadc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001eadf:	25 ff 00 00 00       	and    eax,0xff
c001eae4:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c001eaea:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c001eaed:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c001eaf0:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c001eaf3:	ee                   	out    dx,al
c001eaf4:	83 ec 0c             	sub    esp,0xc
c001eaf7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001eafa:	e8 51 fe ff ff       	call   c001e950 <PIC::ioWait()>
c001eaff:	83 c4 10             	add    esp,0x10
c001eb02:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001eb05:	25 ff 00 00 00       	and    eax,0xff
c001eb0a:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c001eb10:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c001eb13:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c001eb16:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001eb19:	ee                   	out    dx,al
c001eb1a:	83 ec 0c             	sub    esp,0xc
c001eb1d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001eb20:	e8 2b fe ff ff       	call   c001e950 <PIC::ioWait()>
c001eb25:	83 c4 10             	add    esp,0x10
c001eb28:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c001eb2e:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c001eb32:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c001eb35:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c001eb38:	ee                   	out    dx,al
c001eb39:	83 ec 0c             	sub    esp,0xc
c001eb3c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001eb3f:	e8 0c fe ff ff       	call   c001e950 <PIC::ioWait()>
c001eb44:	83 c4 10             	add    esp,0x10
c001eb47:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c001eb4d:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c001eb51:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c001eb54:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c001eb57:	ee                   	out    dx,al
c001eb58:	83 ec 0c             	sub    esp,0xc
c001eb5b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001eb5e:	e8 ed fd ff ff       	call   c001e950 <PIC::ioWait()>
c001eb63:	83 c4 10             	add    esp,0x10
c001eb66:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c001eb6c:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c001eb70:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c001eb73:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c001eb76:	ee                   	out    dx,al
c001eb77:	83 ec 0c             	sub    esp,0xc
c001eb7a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001eb7d:	e8 ce fd ff ff       	call   c001e950 <PIC::ioWait()>
c001eb82:	83 c4 10             	add    esp,0x10
c001eb85:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c001eb8b:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c001eb8f:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c001eb92:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001eb95:	ee                   	out    dx,al
c001eb96:	83 ec 0c             	sub    esp,0xc
c001eb99:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001eb9c:	e8 af fd ff ff       	call   c001e950 <PIC::ioWait()>
c001eba1:	83 c4 10             	add    esp,0x10
c001eba4:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
c001eba7:	25 ff 00 00 00       	and    eax,0xff
c001ebac:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c001ebb2:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c001ebb5:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c001ebb8:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001ebbb:	ee                   	out    dx,al
c001ebbc:	8a 45 ee             	mov    al,BYTE PTR [ebp-0x12]
c001ebbf:	25 ff 00 00 00       	and    eax,0xff
c001ebc4:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c001ebca:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c001ebcd:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c001ebd0:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001ebd3:	ee                   	out    dx,al
c001ebd4:	90                   	nop
c001ebd5:	c9                   	leave  
c001ebd6:	c3                   	ret    
c001ebd7:	90                   	nop

c001ebd8 <PIC::open(int, int, void*)>:
c001ebd8:	55                   	push   ebp
c001ebd9:	89 e5                	mov    ebp,esp
c001ebdb:	83 ec 18             	sub    esp,0x18
c001ebde:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c001ebe4:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c001ebe8:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c001ebeb:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c001ebef:	ee                   	out    dx,al
c001ebf0:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c001ebf6:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c001ebfa:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c001ebfd:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c001ec01:	ee                   	out    dx,al
c001ec02:	83 ec 0c             	sub    esp,0xc
c001ec05:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ec08:	e8 53 fe ff ff       	call   c001ea60 <PIC::remap()>
c001ec0d:	83 c4 10             	add    esp,0x10
c001ec10:	b8 00 00 00 00       	mov    eax,0x0
c001ec15:	c9                   	leave  
c001ec16:	c3                   	ret    
c001ec17:	90                   	nop

c001ec18 <APICTimer::close(int, int, void*)>:
c001ec18:	b8 00 00 00 00       	mov    eax,0x0
c001ec1d:	c3                   	ret    

c001ec1e <apicTimerHandler(regs*, void*)>:
c001ec1e:	83 ec 0c             	sub    esp,0xc
c001ec21:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ec25:	8b 00                	mov    eax,DWORD PTR [eax]
c001ec27:	89 c2                	mov    edx,eax
c001ec29:	c1 fa 1f             	sar    edx,0x1f
c001ec2c:	52                   	push   edx
c001ec2d:	50                   	push   eax
c001ec2e:	6a 00                	push   0x0
c001ec30:	68 00 ca 9a 3b       	push   0x3b9aca00
c001ec35:	e8 92 07 00 00       	call   c001f3cc <__udivdi3>
c001ec3a:	83 c4 10             	add    esp,0x10
c001ec3d:	83 ec 08             	sub    esp,0x8
c001ec40:	52                   	push   edx
c001ec41:	50                   	push   eax
c001ec42:	e8 b0 40 ff ff       	call   c0012cf7 <timerHandler(unsigned long long)>
c001ec47:	83 c4 10             	add    esp,0x10
c001ec4a:	90                   	nop
c001ec4b:	83 c4 0c             	add    esp,0xc
c001ec4e:	c3                   	ret    
c001ec4f:	90                   	nop

c001ec50 <APICTimer::write(int)>:
c001ec50:	53                   	push   ebx
c001ec51:	83 ec 28             	sub    esp,0x28
c001ec54:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ec58:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001ec5c:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ec62:	e8 6f 5b ff ff       	call   c00147d6 <thisCPU()>
c001ec67:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c001ec6d:	83 ec 0c             	sub    esp,0xc
c001ec70:	50                   	push   eax
c001ec71:	e8 a2 f5 ff ff       	call   c001e218 <APIC::getBase()>
c001ec76:	83 c4 10             	add    esp,0x10
c001ec79:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ec7d:	a1 f0 4b 02 c0       	mov    eax,ds:0xc0024bf0
c001ec82:	8b 15 f4 4b 02 c0    	mov    edx,DWORD PTR ds:0xc0024bf4
c001ec88:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ec8c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001ec90:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ec94:	05 e0 03 00 00       	add    eax,0x3e0
c001ec99:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c001ec9f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001eca3:	05 80 03 00 00       	add    eax,0x380
c001eca8:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c001ecae:	fb                   	sti    
c001ecaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecb3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ecb7:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c001ecbc:	83 d2 00             	adc    edx,0x0
c001ecbf:	89 c1                	mov    ecx,eax
c001ecc1:	89 d3                	mov    ebx,edx
c001ecc3:	a1 f0 4b 02 c0       	mov    eax,ds:0xc0024bf0
c001ecc8:	8b 15 f4 4b 02 c0    	mov    edx,DWORD PTR ds:0xc0024bf4
c001ecce:	39 c8                	cmp    eax,ecx
c001ecd0:	89 d0                	mov    eax,edx
c001ecd2:	19 d8                	sbb    eax,ebx
c001ecd4:	73 02                	jae    c001ecd8 <APICTimer::write(int)+0x88>
c001ecd6:	eb d7                	jmp    c001ecaf <APICTimer::write(int)+0x5f>
c001ecd8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ecdc:	05 20 03 00 00       	add    eax,0x320
c001ece1:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c001ece7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001eceb:	05 90 03 00 00       	add    eax,0x390
c001ecf0:	8b 00                	mov    eax,DWORD PTR [eax]
c001ecf2:	f7 d0                	not    eax
c001ecf4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ecf8:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001ecfc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ed00:	ba 00 00 00 00       	mov    edx,0x0
c001ed05:	f7 f3                	div    ebx
c001ed07:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ed0b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ed0f:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001ed15:	0d 00 00 02 00       	or     eax,0x20000
c001ed1a:	89 c2                	mov    edx,eax
c001ed1c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ed20:	05 20 03 00 00       	add    eax,0x320
c001ed25:	89 10                	mov    DWORD PTR [eax],edx
c001ed27:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ed2b:	05 e0 03 00 00       	add    eax,0x3e0
c001ed30:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c001ed36:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ed3a:	05 80 03 00 00       	add    eax,0x380
c001ed3f:	89 c2                	mov    edx,eax
c001ed41:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ed45:	89 02                	mov    DWORD PTR [edx],eax
c001ed47:	90                   	nop
c001ed48:	83 c4 28             	add    esp,0x28
c001ed4b:	5b                   	pop    ebx
c001ed4c:	c3                   	ret    
c001ed4d:	90                   	nop

c001ed4e <APICTimer::open(int, int, void*)>:
c001ed4e:	57                   	push   edi
c001ed4f:	56                   	push   esi
c001ed50:	53                   	push   ebx
c001ed51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed55:	8b 00                	mov    eax,DWORD PTR [eax]
c001ed57:	83 c0 24             	add    eax,0x24
c001ed5a:	8b 00                	mov    eax,DWORD PTR [eax]
c001ed5c:	83 ec 08             	sub    esp,0x8
c001ed5f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ed63:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ed67:	ff d0                	call   eax
c001ed69:	83 c4 10             	add    esp,0x10
c001ed6c:	e8 65 5a ff ff       	call   c00147d6 <thisCPU()>
c001ed71:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c001ed77:	83 ec 0c             	sub    esp,0xc
c001ed7a:	50                   	push   eax
c001ed7b:	e8 98 f4 ff ff       	call   c001e218 <APIC::getBase()>
c001ed80:	83 c4 10             	add    esp,0x10
c001ed83:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c001ed89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed8d:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001ed93:	89 c7                	mov    edi,eax
c001ed95:	81 e7 ff 00 00 00    	and    edi,0xff
c001ed9b:	89 d0                	mov    eax,edx
c001ed9d:	ba 00 00 00 00       	mov    edx,0x0
c001eda2:	89 c1                	mov    ecx,eax
c001eda4:	80 e5 ff             	and    ch,0xff
c001eda7:	89 cb                	mov    ebx,ecx
c001eda9:	89 d0                	mov    eax,edx
c001edab:	25 ff 00 00 00       	and    eax,0xff
c001edb0:	89 c6                	mov    esi,eax
c001edb2:	89 d8                	mov    eax,ebx
c001edb4:	89 f2                	mov    edx,esi
c001edb6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001edba:	8d 5f 08             	lea    ebx,[edi+0x8]
c001edbd:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001edc1:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001edc5:	83 e0 00             	and    eax,0x0
c001edc8:	09 d0                	or     eax,edx
c001edca:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001edce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edd2:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001edd8:	8d 50 01             	lea    edx,[eax+0x1]
c001eddb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001eddf:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001ede5:	31 d2                	xor    edx,edx
c001ede7:	88 c2                	mov    dl,al
c001ede9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eded:	83 c2 08             	add    edx,0x8
c001edf0:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001edf4:	81 e1 ff 00 00 00    	and    ecx,0xff
c001edfa:	81 c9 00 00 01 00    	or     ecx,0x10000
c001ee00:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001ee04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee08:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ee0c:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001ee12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee16:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ee1a:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001ee20:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ee24:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001ee2a:	83 ec 0c             	sub    esp,0xc
c001ee2d:	51                   	push   ecx
c001ee2e:	6a 01                	push   0x1
c001ee30:	68 1e ec 01 c0       	push   0xc001ec1e
c001ee35:	52                   	push   edx
c001ee36:	50                   	push   eax
c001ee37:	e8 a4 16 ff ff       	call   c00104e0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ee3c:	83 c4 20             	add    esp,0x20
c001ee3f:	89 c2                	mov    edx,eax
c001ee41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee45:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001ee4b:	b8 00 00 00 00       	mov    eax,0x0
c001ee50:	5b                   	pop    ebx
c001ee51:	5e                   	pop    esi
c001ee52:	5f                   	pop    edi
c001ee53:	c3                   	ret    

c001ee54 <APICTimer::APICTimer()>:
c001ee54:	83 ec 0c             	sub    esp,0xc
c001ee57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee5b:	83 ec 08             	sub    esp,0x8
c001ee5e:	68 10 39 02 c0       	push   0xc0023910
c001ee63:	50                   	push   eax
c001ee64:	e8 ff 3d ff ff       	call   c0012c68 <Timer::Timer(char const*)>
c001ee69:	83 c4 10             	add    esp,0x10
c001ee6c:	ba 24 39 02 c0       	mov    edx,0xc0023924
c001ee71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee75:	89 10                	mov    DWORD PTR [eax],edx
c001ee77:	90                   	nop
c001ee78:	83 c4 0c             	add    esp,0xc
c001ee7b:	c3                   	ret    

c001ee7c <PIT::write(int)>:
c001ee7c:	83 ec 10             	sub    esp,0x10
c001ee7f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ee83:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ee87:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ee8d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ee91:	a3 84 63 02 c0       	mov    ds:0xc0026384,eax
c001ee96:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001ee9b:	89 c2                	mov    edx,eax
c001ee9d:	c1 fa 1f             	sar    edx,0x1f
c001eea0:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001eea4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001eea8:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001eeaf:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001eeb4:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001eeb8:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001eebd:	ee                   	out    dx,al
c001eebe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001eec2:	25 ff 00 00 00       	and    eax,0xff
c001eec7:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001eece:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001eed2:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001eed6:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001eedb:	ee                   	out    dx,al
c001eedc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001eee0:	c1 f8 08             	sar    eax,0x8
c001eee3:	25 ff 00 00 00       	and    eax,0xff
c001eee8:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001eeef:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001eef3:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001eef7:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001eefc:	ee                   	out    dx,al
c001eefd:	90                   	nop
c001eefe:	83 c4 10             	add    esp,0x10
c001ef01:	c3                   	ret    

c001ef02 <pitHandler(regs*, void*)>:
c001ef02:	83 ec 0c             	sub    esp,0xc
c001ef05:	a1 84 63 02 c0       	mov    eax,ds:0xc0026384
c001ef0a:	89 c2                	mov    edx,eax
c001ef0c:	c1 fa 1f             	sar    edx,0x1f
c001ef0f:	52                   	push   edx
c001ef10:	50                   	push   eax
c001ef11:	6a 00                	push   0x0
c001ef13:	68 00 ca 9a 3b       	push   0x3b9aca00
c001ef18:	e8 af 04 00 00       	call   c001f3cc <__udivdi3>
c001ef1d:	83 c4 10             	add    esp,0x10
c001ef20:	83 ec 08             	sub    esp,0x8
c001ef23:	52                   	push   edx
c001ef24:	50                   	push   eax
c001ef25:	e8 cd 3d ff ff       	call   c0012cf7 <timerHandler(unsigned long long)>
c001ef2a:	83 c4 10             	add    esp,0x10
c001ef2d:	90                   	nop
c001ef2e:	83 c4 0c             	add    esp,0xc
c001ef31:	c3                   	ret    

c001ef32 <PIT::open(int, int, void*)>:
c001ef32:	83 ec 0c             	sub    esp,0xc
c001ef35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef39:	8b 00                	mov    eax,DWORD PTR [eax]
c001ef3b:	83 c0 24             	add    eax,0x24
c001ef3e:	8b 00                	mov    eax,DWORD PTR [eax]
c001ef40:	83 ec 08             	sub    esp,0x8
c001ef43:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ef47:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ef4b:	ff d0                	call   eax
c001ef4d:	83 c4 10             	add    esp,0x10
c001ef50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef54:	83 ec 0c             	sub    esp,0xc
c001ef57:	6a 00                	push   0x0
c001ef59:	6a 01                	push   0x1
c001ef5b:	68 02 ef 01 c0       	push   0xc001ef02
c001ef60:	6a 00                	push   0x0
c001ef62:	50                   	push   eax
c001ef63:	e8 78 15 ff ff       	call   c00104e0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ef68:	83 c4 20             	add    esp,0x20
c001ef6b:	89 c2                	mov    edx,eax
c001ef6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef71:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001ef77:	b8 00 00 00 00       	mov    eax,0x0
c001ef7c:	83 c4 0c             	add    esp,0xc
c001ef7f:	c3                   	ret    

c001ef80 <PIT::close(int, int, void*)>:
c001ef80:	83 ec 0c             	sub    esp,0xc
c001ef83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef87:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001ef91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef95:	6a 01                	push   0x1
c001ef97:	68 02 ef 01 c0       	push   0xc001ef02
c001ef9c:	6a 00                	push   0x0
c001ef9e:	50                   	push   eax
c001ef9f:	e8 9a 15 ff ff       	call   c001053e <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001efa4:	83 c4 10             	add    esp,0x10
c001efa7:	b8 00 00 00 00       	mov    eax,0x0
c001efac:	83 c4 0c             	add    esp,0xc
c001efaf:	c3                   	ret    

c001efb0 <PIT::PIT()>:
c001efb0:	83 ec 0c             	sub    esp,0xc
c001efb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efb7:	83 ec 08             	sub    esp,0x8
c001efba:	68 4c 39 02 c0       	push   0xc002394c
c001efbf:	50                   	push   eax
c001efc0:	e8 a3 3c ff ff       	call   c0012c68 <Timer::Timer(char const*)>
c001efc5:	83 c4 10             	add    esp,0x10
c001efc8:	ba 74 39 02 c0       	mov    edx,0xc0023974
c001efcd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efd1:	89 10                	mov    DWORD PTR [eax],edx
c001efd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efd7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001efdd:	31 d2                	xor    edx,edx
c001efdf:	88 c2                	mov    dl,al
c001efe1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efe5:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001efec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eff0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001eff6:	31 d2                	xor    edx,edx
c001eff8:	88 c2                	mov    dl,al
c001effa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001effe:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001f003:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f007:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001f00d:	8d 50 01             	lea    edx,[eax+0x1]
c001f010:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f014:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001f01a:	31 d2                	xor    edx,edx
c001f01c:	88 c2                	mov    dl,al
c001f01e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f022:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001f026:	83 e1 3f             	and    ecx,0x3f
c001f029:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001f02d:	90                   	nop
c001f02e:	83 c4 0c             	add    esp,0xc
c001f031:	c3                   	ret    
c001f032:	66 90                	xchg   ax,ax
c001f034:	66 90                	xchg   ax,ax
c001f036:	66 90                	xchg   ax,ax
c001f038:	66 90                	xchg   ax,ax
c001f03a:	66 90                	xchg   ax,ax
c001f03c:	66 90                	xchg   ax,ax
c001f03e:	66 90                	xchg   ax,ax

c001f040 <avxDetect>:
c001f040:	b8 00 00 00 00       	mov    eax,0x0
c001f045:	c3                   	ret    

c001f046 <avxSave>:
c001f046:	c3                   	ret    

c001f047 <avxLoad>:
c001f047:	c3                   	ret    

c001f048 <avxInit>:
c001f048:	c3                   	ret    

c001f049 <avxClose>:
c001f049:	c3                   	ret    
c001f04a:	66 90                	xchg   ax,ax
c001f04c:	66 90                	xchg   ax,ax
c001f04e:	66 90                	xchg   ax,ax

c001f050 <sseDetect>:
c001f050:	b8 01 00 00 00       	mov    eax,0x1
c001f055:	0f a2                	cpuid  
c001f057:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001f05d:	74 06                	je     c001f065 <sseDetect.noSSE>
c001f05f:	b8 01 00 00 00       	mov    eax,0x1
c001f064:	c3                   	ret    

c001f065 <sseDetect.noSSE>:
c001f065:	b8 00 00 00 00       	mov    eax,0x0
c001f06a:	c3                   	ret    

c001f06b <sseSave>:
c001f06b:	0f ae 44 24 08       	fxsave [esp+0x8]
c001f070:	c3                   	ret    

c001f071 <sseLoad>:
c001f071:	0f ae 4c 24 08       	fxrstor [esp+0x8]
c001f076:	c3                   	ret    

c001f077 <sseInit>:
c001f077:	e8 40 00 00 00       	call   c001f0bc <x87Init>
c001f07c:	0f 20 e0             	mov    eax,cr4
c001f07f:	66 0d 00 06          	or     ax,0x600
c001f083:	0f 22 e0             	mov    cr4,eax
c001f086:	c3                   	ret    

c001f087 <sseClose>:
c001f087:	c3                   	ret    
c001f088:	66 90                	xchg   ax,ax
c001f08a:	66 90                	xchg   ax,ax
c001f08c:	66 90                	xchg   ax,ax
c001f08e:	66 90                	xchg   ax,ax

c001f090 <value_37F>:
c001f090:	7f 03                	jg     c001f095 <value_37A+0x1>

c001f092 <value_37E>:
c001f092:	7e 03                	jle    c001f097 <x87Detect+0x1>

c001f094 <value_37A>:
c001f094:	7a 03                	jp     c001f099 <x87Detect+0x3>

c001f096 <x87Detect>:
c001f096:	b8 01 00 00 00       	mov    eax,0x1
c001f09b:	0f a2                	cpuid  
c001f09d:	f7 c2 01 00 00 00    	test   edx,0x1
c001f0a3:	74 06                	je     c001f0ab <x87Detect.nox87>
c001f0a5:	b8 01 00 00 00       	mov    eax,0x1
c001f0aa:	c3                   	ret    

c001f0ab <x87Detect.nox87>:
c001f0ab:	b8 00 00 00 00       	mov    eax,0x0
c001f0b0:	c3                   	ret    

c001f0b1 <x87Save>:
c001f0b1:	9b dd 74 24 08       	fsave  [esp+0x8]
c001f0b6:	c3                   	ret    

c001f0b7 <x87Load>:
c001f0b7:	dd 64 24 08          	frstor [esp+0x8]
c001f0bb:	c3                   	ret    

c001f0bc <x87Init>:
c001f0bc:	9b db e3             	finit  
c001f0bf:	0f 20 c0             	mov    eax,cr0
c001f0c2:	66 25 fb ff          	and    ax,0xfffb
c001f0c6:	66 0d 22 00          	or     ax,0x22
c001f0ca:	0f 22 c0             	mov    cr0,eax
c001f0cd:	0f 06                	clts   
c001f0cf:	d9 2d 94 f0 01 c0    	fldcw  WORD PTR ds:0xc001f094
c001f0d5:	c3                   	ret    

c001f0d6 <x87Close>:
c001f0d6:	c3                   	ret    
c001f0d7:	90                   	nop

c001f0d8 <__do_global_ctors_aux>:
c001f0d8:	a1 b8 01 02 c0       	mov    eax,ds:0xc00201b8
c001f0dd:	83 f8 ff             	cmp    eax,0xffffffff
c001f0e0:	74 1a                	je     c001f0fc <__do_global_ctors_aux+0x24>
c001f0e2:	55                   	push   ebp
c001f0e3:	89 e5                	mov    ebp,esp
c001f0e5:	53                   	push   ebx
c001f0e6:	52                   	push   edx
c001f0e7:	bb b8 01 02 c0       	mov    ebx,0xc00201b8
c001f0ec:	ff d0                	call   eax
c001f0ee:	83 eb 04             	sub    ebx,0x4
c001f0f1:	8b 03                	mov    eax,DWORD PTR [ebx]
c001f0f3:	83 f8 ff             	cmp    eax,0xffffffff
c001f0f6:	75 f4                	jne    c001f0ec <__do_global_ctors_aux+0x14>
c001f0f8:	58                   	pop    eax
c001f0f9:	5b                   	pop    ebx
c001f0fa:	5d                   	pop    ebp
c001f0fb:	c3                   	ret    
c001f0fc:	c3                   	ret    
c001f0fd:	66 90                	xchg   ax,ax
c001f0ff:	90                   	nop

c001f100 <__divdi3>:
c001f100:	55                   	push   ebp
c001f101:	57                   	push   edi
c001f102:	56                   	push   esi
c001f103:	53                   	push   ebx
c001f104:	83 ec 1c             	sub    esp,0x1c
c001f107:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001f10b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f10f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001f112:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001f116:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001f11a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001f11e:	85 db                	test   ebx,ebx
c001f120:	0f 88 8e 00 00 00    	js     c001f1b4 <__divdi3+0xb4>
c001f126:	89 dd                	mov    ebp,ebx
c001f128:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001f130:	89 d3                	mov    ebx,edx
c001f132:	85 d2                	test   edx,edx
c001f134:	79 0d                	jns    c001f143 <__divdi3+0x43>
c001f136:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001f13a:	f7 d8                	neg    eax
c001f13c:	83 d2 00             	adc    edx,0x0
c001f13f:	f7 da                	neg    edx
c001f141:	89 d3                	mov    ebx,edx
c001f143:	89 c7                	mov    edi,eax
c001f145:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001f148:	85 db                	test   ebx,ebx
c001f14a:	75 48                	jne    c001f194 <__divdi3+0x94>
c001f14c:	39 ef                	cmp    edi,ebp
c001f14e:	76 24                	jbe    c001f174 <__divdi3+0x74>
c001f150:	89 ea                	mov    edx,ebp
c001f152:	f7 f7                	div    edi
c001f154:	89 c1                	mov    ecx,eax
c001f156:	31 f6                	xor    esi,esi
c001f158:	89 c8                	mov    eax,ecx
c001f15a:	89 f2                	mov    edx,esi
c001f15c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f160:	85 c9                	test   ecx,ecx
c001f162:	74 07                	je     c001f16b <__divdi3+0x6b>
c001f164:	f7 d8                	neg    eax
c001f166:	83 d2 00             	adc    edx,0x0
c001f169:	f7 da                	neg    edx
c001f16b:	83 c4 1c             	add    esp,0x1c
c001f16e:	5b                   	pop    ebx
c001f16f:	5e                   	pop    esi
c001f170:	5f                   	pop    edi
c001f171:	5d                   	pop    ebp
c001f172:	c3                   	ret    
c001f173:	90                   	nop
c001f174:	85 ff                	test   edi,edi
c001f176:	75 0b                	jne    c001f183 <__divdi3+0x83>
c001f178:	b8 01 00 00 00       	mov    eax,0x1
c001f17d:	31 d2                	xor    edx,edx
c001f17f:	f7 f3                	div    ebx
c001f181:	89 c7                	mov    edi,eax
c001f183:	31 d2                	xor    edx,edx
c001f185:	89 e8                	mov    eax,ebp
c001f187:	f7 f7                	div    edi
c001f189:	89 c6                	mov    esi,eax
c001f18b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001f18e:	f7 f7                	div    edi
c001f190:	89 c1                	mov    ecx,eax
c001f192:	eb c4                	jmp    c001f158 <__divdi3+0x58>
c001f194:	39 eb                	cmp    ebx,ebp
c001f196:	77 3c                	ja     c001f1d4 <__divdi3+0xd4>
c001f198:	0f bd f3             	bsr    esi,ebx
c001f19b:	83 f6 1f             	xor    esi,0x1f
c001f19e:	75 40                	jne    c001f1e0 <__divdi3+0xe0>
c001f1a0:	39 eb                	cmp    ebx,ebp
c001f1a2:	72 09                	jb     c001f1ad <__divdi3+0xad>
c001f1a4:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001f1a7:	0f 87 97 00 00 00    	ja     c001f244 <__divdi3+0x144>
c001f1ad:	b9 01 00 00 00       	mov    ecx,0x1
c001f1b2:	eb a4                	jmp    c001f158 <__divdi3+0x58>
c001f1b4:	f7 d9                	neg    ecx
c001f1b6:	83 d3 00             	adc    ebx,0x0
c001f1b9:	f7 db                	neg    ebx
c001f1bb:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001f1be:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001f1c2:	89 dd                	mov    ebp,ebx
c001f1c4:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001f1cc:	e9 5f ff ff ff       	jmp    c001f130 <__divdi3+0x30>
c001f1d1:	8d 76 00             	lea    esi,[esi+0x0]
c001f1d4:	31 f6                	xor    esi,esi
c001f1d6:	31 c9                	xor    ecx,ecx
c001f1d8:	e9 7b ff ff ff       	jmp    c001f158 <__divdi3+0x58>
c001f1dd:	8d 76 00             	lea    esi,[esi+0x0]
c001f1e0:	b8 20 00 00 00       	mov    eax,0x20
c001f1e5:	29 f0                	sub    eax,esi
c001f1e7:	89 f1                	mov    ecx,esi
c001f1e9:	d3 e3                	shl    ebx,cl
c001f1eb:	89 fa                	mov    edx,edi
c001f1ed:	88 c1                	mov    cl,al
c001f1ef:	d3 ea                	shr    edx,cl
c001f1f1:	09 da                	or     edx,ebx
c001f1f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001f1f7:	89 f1                	mov    ecx,esi
c001f1f9:	d3 e7                	shl    edi,cl
c001f1fb:	89 eb                	mov    ebx,ebp
c001f1fd:	88 c1                	mov    cl,al
c001f1ff:	d3 eb                	shr    ebx,cl
c001f201:	89 f1                	mov    ecx,esi
c001f203:	d3 e5                	shl    ebp,cl
c001f205:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001f208:	88 c1                	mov    cl,al
c001f20a:	d3 ea                	shr    edx,cl
c001f20c:	09 d5                	or     ebp,edx
c001f20e:	89 e8                	mov    eax,ebp
c001f210:	89 da                	mov    edx,ebx
c001f212:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001f216:	89 d3                	mov    ebx,edx
c001f218:	89 c5                	mov    ebp,eax
c001f21a:	f7 e7                	mul    edi
c001f21c:	39 d3                	cmp    ebx,edx
c001f21e:	72 18                	jb     c001f238 <__divdi3+0x138>
c001f220:	74 0a                	je     c001f22c <__divdi3+0x12c>
c001f222:	89 e9                	mov    ecx,ebp
c001f224:	31 f6                	xor    esi,esi
c001f226:	e9 2d ff ff ff       	jmp    c001f158 <__divdi3+0x58>
c001f22b:	90                   	nop
c001f22c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001f22f:	89 f1                	mov    ecx,esi
c001f231:	d3 e7                	shl    edi,cl
c001f233:	39 c7                	cmp    edi,eax
c001f235:	73 eb                	jae    c001f222 <__divdi3+0x122>
c001f237:	90                   	nop
c001f238:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001f23b:	31 f6                	xor    esi,esi
c001f23d:	e9 16 ff ff ff       	jmp    c001f158 <__divdi3+0x58>
c001f242:	66 90                	xchg   ax,ax
c001f244:	31 c9                	xor    ecx,ecx
c001f246:	e9 0d ff ff ff       	jmp    c001f158 <__divdi3+0x58>
c001f24b:	90                   	nop

c001f24c <__moddi3>:
c001f24c:	55                   	push   ebp
c001f24d:	57                   	push   edi
c001f24e:	56                   	push   esi
c001f24f:	53                   	push   ebx
c001f250:	83 ec 2c             	sub    esp,0x2c
c001f253:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001f257:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001f25b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001f25f:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001f263:	85 db                	test   ebx,ebx
c001f265:	0f 88 85 00 00 00    	js     c001f2f0 <__moddi3+0xa4>
c001f26b:	89 de                	mov    esi,ebx
c001f26d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001f275:	89 d7                	mov    edi,edx
c001f277:	85 d2                	test   edx,edx
c001f279:	79 09                	jns    c001f284 <__moddi3+0x38>
c001f27b:	f7 d8                	neg    eax
c001f27d:	83 d2 00             	adc    edx,0x0
c001f280:	f7 da                	neg    edx
c001f282:	89 d7                	mov    edi,edx
c001f284:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f288:	89 cd                	mov    ebp,ecx
c001f28a:	85 ff                	test   edi,edi
c001f28c:	75 52                	jne    c001f2e0 <__moddi3+0x94>
c001f28e:	89 c3                	mov    ebx,eax
c001f290:	39 f0                	cmp    eax,esi
c001f292:	76 24                	jbe    c001f2b8 <__moddi3+0x6c>
c001f294:	89 c8                	mov    eax,ecx
c001f296:	89 f2                	mov    edx,esi
c001f298:	f7 f3                	div    ebx
c001f29a:	89 d6                	mov    esi,edx
c001f29c:	89 f0                	mov    eax,esi
c001f29e:	31 d2                	xor    edx,edx
c001f2a0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f2a4:	85 c9                	test   ecx,ecx
c001f2a6:	74 07                	je     c001f2af <__moddi3+0x63>
c001f2a8:	f7 d8                	neg    eax
c001f2aa:	83 d2 00             	adc    edx,0x0
c001f2ad:	f7 da                	neg    edx
c001f2af:	83 c4 2c             	add    esp,0x2c
c001f2b2:	5b                   	pop    ebx
c001f2b3:	5e                   	pop    esi
c001f2b4:	5f                   	pop    edi
c001f2b5:	5d                   	pop    ebp
c001f2b6:	c3                   	ret    
c001f2b7:	90                   	nop
c001f2b8:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f2bc:	85 db                	test   ebx,ebx
c001f2be:	75 0d                	jne    c001f2cd <__moddi3+0x81>
c001f2c0:	b8 01 00 00 00       	mov    eax,0x1
c001f2c5:	31 d2                	xor    edx,edx
c001f2c7:	f7 f7                	div    edi
c001f2c9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f2cd:	89 f0                	mov    eax,esi
c001f2cf:	31 d2                	xor    edx,edx
c001f2d1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f2d5:	f7 f7                	div    edi
c001f2d7:	89 e8                	mov    eax,ebp
c001f2d9:	f7 f7                	div    edi
c001f2db:	89 d6                	mov    esi,edx
c001f2dd:	eb bd                	jmp    c001f29c <__moddi3+0x50>
c001f2df:	90                   	nop
c001f2e0:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f2e4:	39 f7                	cmp    edi,esi
c001f2e6:	76 20                	jbe    c001f308 <__moddi3+0xbc>
c001f2e8:	89 c8                	mov    eax,ecx
c001f2ea:	89 f2                	mov    edx,esi
c001f2ec:	eb b2                	jmp    c001f2a0 <__moddi3+0x54>
c001f2ee:	66 90                	xchg   ax,ax
c001f2f0:	f7 d9                	neg    ecx
c001f2f2:	83 d3 00             	adc    ebx,0x0
c001f2f5:	f7 db                	neg    ebx
c001f2f7:	89 de                	mov    esi,ebx
c001f2f9:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001f301:	e9 6f ff ff ff       	jmp    c001f275 <__moddi3+0x29>
c001f306:	66 90                	xchg   ax,ax
c001f308:	0f bd c7             	bsr    eax,edi
c001f30b:	83 f0 1f             	xor    eax,0x1f
c001f30e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001f312:	75 24                	jne    c001f338 <__moddi3+0xec>
c001f314:	39 f7                	cmp    edi,esi
c001f316:	72 06                	jb     c001f31e <__moddi3+0xd2>
c001f318:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001f31c:	77 0c                	ja     c001f32a <__moddi3+0xde>
c001f31e:	89 e9                	mov    ecx,ebp
c001f320:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001f324:	19 fe                	sbb    esi,edi
c001f326:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f32a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f32e:	89 f2                	mov    edx,esi
c001f330:	e9 6b ff ff ff       	jmp    c001f2a0 <__moddi3+0x54>
c001f335:	8d 76 00             	lea    esi,[esi+0x0]
c001f338:	b8 20 00 00 00       	mov    eax,0x20
c001f33d:	89 c2                	mov    edx,eax
c001f33f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001f343:	29 da                	sub    edx,ebx
c001f345:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001f349:	88 d9                	mov    cl,bl
c001f34b:	d3 e7                	shl    edi,cl
c001f34d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f351:	88 d1                	mov    cl,dl
c001f353:	d3 e8                	shr    eax,cl
c001f355:	09 c7                	or     edi,eax
c001f357:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001f35b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f35f:	89 d8                	mov    eax,ebx
c001f361:	88 d9                	mov    cl,bl
c001f363:	d3 e7                	shl    edi,cl
c001f365:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f369:	89 f3                	mov    ebx,esi
c001f36b:	88 d1                	mov    cl,dl
c001f36d:	d3 eb                	shr    ebx,cl
c001f36f:	89 c7                	mov    edi,eax
c001f371:	88 c1                	mov    cl,al
c001f373:	d3 e6                	shl    esi,cl
c001f375:	89 e8                	mov    eax,ebp
c001f377:	88 d1                	mov    cl,dl
c001f379:	d3 e8                	shr    eax,cl
c001f37b:	09 f0                	or     eax,esi
c001f37d:	89 f9                	mov    ecx,edi
c001f37f:	d3 e5                	shl    ebp,cl
c001f381:	89 da                	mov    edx,ebx
c001f383:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001f387:	89 d3                	mov    ebx,edx
c001f389:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f38d:	89 c6                	mov    esi,eax
c001f38f:	89 d1                	mov    ecx,edx
c001f391:	39 d3                	cmp    ebx,edx
c001f393:	72 27                	jb     c001f3bc <__moddi3+0x170>
c001f395:	74 21                	je     c001f3b8 <__moddi3+0x16c>
c001f397:	29 f5                	sub    ebp,esi
c001f399:	19 cb                	sbb    ebx,ecx
c001f39b:	89 de                	mov    esi,ebx
c001f39d:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001f3a1:	d3 e6                	shl    esi,cl
c001f3a3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f3a7:	89 f9                	mov    ecx,edi
c001f3a9:	d3 ed                	shr    ebp,cl
c001f3ab:	09 ee                	or     esi,ebp
c001f3ad:	89 f0                	mov    eax,esi
c001f3af:	d3 eb                	shr    ebx,cl
c001f3b1:	89 da                	mov    edx,ebx
c001f3b3:	e9 e8 fe ff ff       	jmp    c001f2a0 <__moddi3+0x54>
c001f3b8:	39 c5                	cmp    ebp,eax
c001f3ba:	73 db                	jae    c001f397 <__moddi3+0x14b>
c001f3bc:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001f3c0:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001f3c4:	89 d1                	mov    ecx,edx
c001f3c6:	89 c6                	mov    esi,eax
c001f3c8:	eb cd                	jmp    c001f397 <__moddi3+0x14b>
c001f3ca:	66 90                	xchg   ax,ax

c001f3cc <__udivdi3>:
c001f3cc:	55                   	push   ebp
c001f3cd:	57                   	push   edi
c001f3ce:	56                   	push   esi
c001f3cf:	53                   	push   ebx
c001f3d0:	83 ec 1c             	sub    esp,0x1c
c001f3d3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001f3d7:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001f3db:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f3df:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001f3e3:	85 d2                	test   edx,edx
c001f3e5:	75 41                	jne    c001f428 <__udivdi3+0x5c>
c001f3e7:	39 f7                	cmp    edi,esi
c001f3e9:	76 15                	jbe    c001f400 <__udivdi3+0x34>
c001f3eb:	89 e8                	mov    eax,ebp
c001f3ed:	89 f2                	mov    edx,esi
c001f3ef:	f7 f7                	div    edi
c001f3f1:	31 db                	xor    ebx,ebx
c001f3f3:	89 da                	mov    edx,ebx
c001f3f5:	83 c4 1c             	add    esp,0x1c
c001f3f8:	5b                   	pop    ebx
c001f3f9:	5e                   	pop    esi
c001f3fa:	5f                   	pop    edi
c001f3fb:	5d                   	pop    ebp
c001f3fc:	c3                   	ret    
c001f3fd:	8d 76 00             	lea    esi,[esi+0x0]
c001f400:	89 f9                	mov    ecx,edi
c001f402:	85 ff                	test   edi,edi
c001f404:	75 0b                	jne    c001f411 <__udivdi3+0x45>
c001f406:	b8 01 00 00 00       	mov    eax,0x1
c001f40b:	31 d2                	xor    edx,edx
c001f40d:	f7 f7                	div    edi
c001f40f:	89 c1                	mov    ecx,eax
c001f411:	31 d2                	xor    edx,edx
c001f413:	89 f0                	mov    eax,esi
c001f415:	f7 f1                	div    ecx
c001f417:	89 c3                	mov    ebx,eax
c001f419:	89 e8                	mov    eax,ebp
c001f41b:	f7 f1                	div    ecx
c001f41d:	89 da                	mov    edx,ebx
c001f41f:	83 c4 1c             	add    esp,0x1c
c001f422:	5b                   	pop    ebx
c001f423:	5e                   	pop    esi
c001f424:	5f                   	pop    edi
c001f425:	5d                   	pop    ebp
c001f426:	c3                   	ret    
c001f427:	90                   	nop
c001f428:	39 f2                	cmp    edx,esi
c001f42a:	77 1c                	ja     c001f448 <__udivdi3+0x7c>
c001f42c:	0f bd da             	bsr    ebx,edx
c001f42f:	83 f3 1f             	xor    ebx,0x1f
c001f432:	75 24                	jne    c001f458 <__udivdi3+0x8c>
c001f434:	39 f2                	cmp    edx,esi
c001f436:	72 08                	jb     c001f440 <__udivdi3+0x74>
c001f438:	39 ef                	cmp    edi,ebp
c001f43a:	0f 87 84 00 00 00    	ja     c001f4c4 <__udivdi3+0xf8>
c001f440:	b8 01 00 00 00       	mov    eax,0x1
c001f445:	eb ac                	jmp    c001f3f3 <__udivdi3+0x27>
c001f447:	90                   	nop
c001f448:	31 db                	xor    ebx,ebx
c001f44a:	31 c0                	xor    eax,eax
c001f44c:	89 da                	mov    edx,ebx
c001f44e:	83 c4 1c             	add    esp,0x1c
c001f451:	5b                   	pop    ebx
c001f452:	5e                   	pop    esi
c001f453:	5f                   	pop    edi
c001f454:	5d                   	pop    ebp
c001f455:	c3                   	ret    
c001f456:	66 90                	xchg   ax,ax
c001f458:	b8 20 00 00 00       	mov    eax,0x20
c001f45d:	29 d8                	sub    eax,ebx
c001f45f:	88 d9                	mov    cl,bl
c001f461:	d3 e2                	shl    edx,cl
c001f463:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001f467:	89 fa                	mov    edx,edi
c001f469:	88 c1                	mov    cl,al
c001f46b:	d3 ea                	shr    edx,cl
c001f46d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f471:	09 d1                	or     ecx,edx
c001f473:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f477:	88 d9                	mov    cl,bl
c001f479:	d3 e7                	shl    edi,cl
c001f47b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f47f:	89 f7                	mov    edi,esi
c001f481:	88 c1                	mov    cl,al
c001f483:	d3 ef                	shr    edi,cl
c001f485:	88 d9                	mov    cl,bl
c001f487:	d3 e6                	shl    esi,cl
c001f489:	89 ea                	mov    edx,ebp
c001f48b:	88 c1                	mov    cl,al
c001f48d:	d3 ea                	shr    edx,cl
c001f48f:	09 d6                	or     esi,edx
c001f491:	89 f0                	mov    eax,esi
c001f493:	89 fa                	mov    edx,edi
c001f495:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001f499:	89 d7                	mov    edi,edx
c001f49b:	89 c6                	mov    esi,eax
c001f49d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f4a1:	39 d7                	cmp    edi,edx
c001f4a3:	72 13                	jb     c001f4b8 <__udivdi3+0xec>
c001f4a5:	74 09                	je     c001f4b0 <__udivdi3+0xe4>
c001f4a7:	89 f0                	mov    eax,esi
c001f4a9:	31 db                	xor    ebx,ebx
c001f4ab:	e9 43 ff ff ff       	jmp    c001f3f3 <__udivdi3+0x27>
c001f4b0:	88 d9                	mov    cl,bl
c001f4b2:	d3 e5                	shl    ebp,cl
c001f4b4:	39 c5                	cmp    ebp,eax
c001f4b6:	73 ef                	jae    c001f4a7 <__udivdi3+0xdb>
c001f4b8:	8d 46 ff             	lea    eax,[esi-0x1]
c001f4bb:	31 db                	xor    ebx,ebx
c001f4bd:	e9 31 ff ff ff       	jmp    c001f3f3 <__udivdi3+0x27>
c001f4c2:	66 90                	xchg   ax,ax
c001f4c4:	31 c0                	xor    eax,eax
c001f4c6:	e9 28 ff ff ff       	jmp    c001f3f3 <__udivdi3+0x27>
c001f4cb:	90                   	nop

c001f4cc <__umoddi3>:
c001f4cc:	55                   	push   ebp
c001f4cd:	57                   	push   edi
c001f4ce:	56                   	push   esi
c001f4cf:	53                   	push   ebx
c001f4d0:	83 ec 1c             	sub    esp,0x1c
c001f4d3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001f4d7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f4db:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f4df:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001f4e3:	89 da                	mov    edx,ebx
c001f4e5:	85 c0                	test   eax,eax
c001f4e7:	75 37                	jne    c001f520 <__umoddi3+0x54>
c001f4e9:	39 df                	cmp    edi,ebx
c001f4eb:	76 13                	jbe    c001f500 <__umoddi3+0x34>
c001f4ed:	89 f0                	mov    eax,esi
c001f4ef:	f7 f7                	div    edi
c001f4f1:	89 d0                	mov    eax,edx
c001f4f3:	31 d2                	xor    edx,edx
c001f4f5:	83 c4 1c             	add    esp,0x1c
c001f4f8:	5b                   	pop    ebx
c001f4f9:	5e                   	pop    esi
c001f4fa:	5f                   	pop    edi
c001f4fb:	5d                   	pop    ebp
c001f4fc:	c3                   	ret    
c001f4fd:	8d 76 00             	lea    esi,[esi+0x0]
c001f500:	89 fd                	mov    ebp,edi
c001f502:	85 ff                	test   edi,edi
c001f504:	75 0b                	jne    c001f511 <__umoddi3+0x45>
c001f506:	b8 01 00 00 00       	mov    eax,0x1
c001f50b:	31 d2                	xor    edx,edx
c001f50d:	f7 f7                	div    edi
c001f50f:	89 c5                	mov    ebp,eax
c001f511:	89 d8                	mov    eax,ebx
c001f513:	31 d2                	xor    edx,edx
c001f515:	f7 f5                	div    ebp
c001f517:	89 f0                	mov    eax,esi
c001f519:	f7 f5                	div    ebp
c001f51b:	89 d0                	mov    eax,edx
c001f51d:	eb d4                	jmp    c001f4f3 <__umoddi3+0x27>
c001f51f:	90                   	nop
c001f520:	89 f1                	mov    ecx,esi
c001f522:	39 d8                	cmp    eax,ebx
c001f524:	76 0a                	jbe    c001f530 <__umoddi3+0x64>
c001f526:	89 f0                	mov    eax,esi
c001f528:	83 c4 1c             	add    esp,0x1c
c001f52b:	5b                   	pop    ebx
c001f52c:	5e                   	pop    esi
c001f52d:	5f                   	pop    edi
c001f52e:	5d                   	pop    ebp
c001f52f:	c3                   	ret    
c001f530:	0f bd e8             	bsr    ebp,eax
c001f533:	83 f5 1f             	xor    ebp,0x1f
c001f536:	75 1c                	jne    c001f554 <__umoddi3+0x88>
c001f538:	39 d8                	cmp    eax,ebx
c001f53a:	72 04                	jb     c001f540 <__umoddi3+0x74>
c001f53c:	39 f7                	cmp    edi,esi
c001f53e:	77 08                	ja     c001f548 <__umoddi3+0x7c>
c001f540:	89 da                	mov    edx,ebx
c001f542:	29 fe                	sub    esi,edi
c001f544:	19 c2                	sbb    edx,eax
c001f546:	89 f1                	mov    ecx,esi
c001f548:	89 c8                	mov    eax,ecx
c001f54a:	83 c4 1c             	add    esp,0x1c
c001f54d:	5b                   	pop    ebx
c001f54e:	5e                   	pop    esi
c001f54f:	5f                   	pop    edi
c001f550:	5d                   	pop    ebp
c001f551:	c3                   	ret    
c001f552:	66 90                	xchg   ax,ax
c001f554:	ba 20 00 00 00       	mov    edx,0x20
c001f559:	29 ea                	sub    edx,ebp
c001f55b:	89 e9                	mov    ecx,ebp
c001f55d:	d3 e0                	shl    eax,cl
c001f55f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f563:	89 f8                	mov    eax,edi
c001f565:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001f569:	88 d1                	mov    cl,dl
c001f56b:	d3 e8                	shr    eax,cl
c001f56d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f571:	09 c1                	or     ecx,eax
c001f573:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f577:	89 e9                	mov    ecx,ebp
c001f579:	d3 e7                	shl    edi,cl
c001f57b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f57f:	89 d8                	mov    eax,ebx
c001f581:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f585:	88 d1                	mov    cl,dl
c001f587:	d3 e8                	shr    eax,cl
c001f589:	89 c7                	mov    edi,eax
c001f58b:	89 e9                	mov    ecx,ebp
c001f58d:	d3 e3                	shl    ebx,cl
c001f58f:	89 f0                	mov    eax,esi
c001f591:	88 d1                	mov    cl,dl
c001f593:	d3 e8                	shr    eax,cl
c001f595:	09 d8                	or     eax,ebx
c001f597:	89 e9                	mov    ecx,ebp
c001f599:	d3 e6                	shl    esi,cl
c001f59b:	89 f3                	mov    ebx,esi
c001f59d:	89 fa                	mov    edx,edi
c001f59f:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001f5a3:	89 d1                	mov    ecx,edx
c001f5a5:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f5a9:	89 c6                	mov    esi,eax
c001f5ab:	89 d7                	mov    edi,edx
c001f5ad:	39 d1                	cmp    ecx,edx
c001f5af:	72 27                	jb     c001f5d8 <__umoddi3+0x10c>
c001f5b1:	74 21                	je     c001f5d4 <__umoddi3+0x108>
c001f5b3:	89 ca                	mov    edx,ecx
c001f5b5:	29 f3                	sub    ebx,esi
c001f5b7:	19 fa                	sbb    edx,edi
c001f5b9:	89 d0                	mov    eax,edx
c001f5bb:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001f5bf:	d3 e0                	shl    eax,cl
c001f5c1:	89 e9                	mov    ecx,ebp
c001f5c3:	d3 eb                	shr    ebx,cl
c001f5c5:	09 d8                	or     eax,ebx
c001f5c7:	d3 ea                	shr    edx,cl
c001f5c9:	83 c4 1c             	add    esp,0x1c
c001f5cc:	5b                   	pop    ebx
c001f5cd:	5e                   	pop    esi
c001f5ce:	5f                   	pop    edi
c001f5cf:	5d                   	pop    ebp
c001f5d0:	c3                   	ret    
c001f5d1:	8d 76 00             	lea    esi,[esi+0x0]
c001f5d4:	39 c3                	cmp    ebx,eax
c001f5d6:	73 db                	jae    c001f5b3 <__umoddi3+0xe7>
c001f5d8:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001f5dc:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001f5e0:	89 d7                	mov    edi,edx
c001f5e2:	89 c6                	mov    esi,eax
c001f5e4:	eb cd                	jmp    c001f5b3 <__umoddi3+0xe7>
c001f5e6:	66 90                	xchg   ax,ax
c001f5e8:	66 90                	xchg   ax,ax
c001f5ea:	66 90                	xchg   ax,ax
c001f5ec:	66 90                	xchg   ax,ax
c001f5ee:	66 90                	xchg   ax,ax

c001f5f0 <fabs>:
c001f5f0:	83 ec 0c             	sub    esp,0xc
c001f5f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5f7:	89 04 24             	mov    DWORD PTR [esp],eax
c001f5fa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f5fe:	25 ff ff ff 7f       	and    eax,0x7fffffff
c001f603:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001f607:	dd 04 24             	fld    QWORD PTR [esp]
c001f60a:	83 c4 0c             	add    esp,0xc
c001f60d:	c3                   	ret    
c001f60e:	66 90                	xchg   ax,ax

c001f610 <lrint>:
c001f610:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c001f614:	83 ec 04             	sub    esp,0x4
c001f617:	db 1c 24             	fistp  DWORD PTR [esp]
c001f61a:	58                   	pop    eax
c001f61b:	c3                   	ret    

c001f61c <lrintf>:
c001f61c:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c001f620:	83 ec 04             	sub    esp,0x4
c001f623:	db 1c 24             	fistp  DWORD PTR [esp]
c001f626:	58                   	pop    eax
c001f627:	c3                   	ret    

Disassembly of section .init:

c001f628 <_init>:
c001f628:	55                   	push   ebp
c001f629:	89 e5                	mov    ebp,esp
c001f62b:	e8 e8 0a fe ff       	call   c0000118 <frame_dummy>
c001f630:	e8 a3 fa ff ff       	call   c001f0d8 <__do_global_ctors_aux>
c001f635:	5d                   	pop    ebp
c001f636:	c3                   	ret    

Disassembly of section .fini:

c001f637 <_fini>:
c001f637:	55                   	push   ebp
c001f638:	89 e5                	mov    ebp,esp
c001f63a:	e8 69 0a fe ff       	call   c00000a8 <__do_global_dtors_aux>
c001f63f:	5d                   	pop    ebp
c001f640:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001f642 <Computer::~Computer()>:
c001f642:	83 ec 0c             	sub    esp,0xc
c001f645:	ba 80 11 02 c0       	mov    edx,0xc0021180
c001f64a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f64e:	89 10                	mov    DWORD PTR [eax],edx
c001f650:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f654:	83 ec 0c             	sub    esp,0xc
c001f657:	50                   	push   eax
c001f658:	e8 d5 0d ff ff       	call   c0010432 <Device::~Device()>
c001f65d:	83 c4 10             	add    esp,0x10
c001f660:	90                   	nop
c001f661:	83 c4 0c             	add    esp,0xc
c001f664:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001f666 <Computer::~Computer()>:
c001f666:	83 ec 0c             	sub    esp,0xc
c001f669:	83 ec 0c             	sub    esp,0xc
c001f66c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f670:	e8 cd ff ff ff       	call   c001f642 <Computer::~Computer()>
c001f675:	83 c4 10             	add    esp,0x10
c001f678:	83 ec 08             	sub    esp,0x8
c001f67b:	68 ec 01 00 00       	push   0x1ec
c001f680:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f684:	e8 c8 f9 fe ff       	call   c000f051 <operator delete(void*, unsigned long)>
c001f689:	83 c4 10             	add    esp,0x10
c001f68c:	83 c4 0c             	add    esp,0xc
c001f68f:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001f690 <idleCommon()>:
c001f690:	83 ec 0c             	sub    esp,0xc
c001f693:	e8 97 92 ff ff       	call   c001892f <lockScheduler()>
c001f698:	e8 db 95 ff ff       	call   c0018c78 <schedule()>
c001f69d:	83 c4 0c             	add    esp,0xc
c001f6a0:	e9 8c 92 ff ff       	jmp    c0018931 <unlockScheduler()>

Disassembly of section .text._ZN3CPU7readCR3Ev:

c001f6a5 <CPU::readCR3()>:
c001f6a5:	83 ec 10             	sub    esp,0x10
c001f6a8:	0f 20 d8             	mov    eax,cr3
c001f6ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f6af:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f6b3:	83 c4 10             	add    esp,0x10
c001f6b6:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeCR3Em:

c001f6b7 <CPU::writeCR3(unsigned long)>:
c001f6b7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f6bb:	0f 22 d8             	mov    cr3,eax
c001f6be:	90                   	nop
c001f6bf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001f6c0 <LinkedList<UnixFile>::~LinkedList()>:
c001f6c0:	90                   	nop
c001f6c1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001f6c2 <LinkedList<UnixFile>::LinkedList()>:
c001f6c2:	83 ec 0c             	sub    esp,0xc
c001f6c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6c9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f6cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6d3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f6da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6de:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f6e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6e9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f6ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6f3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f6fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6fe:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f705:	83 ec 0c             	sub    esp,0xc
c001f708:	68 f6 13 02 c0       	push   0xc00213f6
c001f70d:	e8 65 fa fe ff       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c001f712:	83 c4 10             	add    esp,0x10
c001f715:	90                   	nop
c001f716:	83 c4 0c             	add    esp,0xc
c001f719:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001f71a <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001f71a:	83 ec 0c             	sub    esp,0xc
c001f71d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001f722:	75 10                	jne    c001f734 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001f724:	83 ec 0c             	sub    esp,0xc
c001f727:	68 10 14 02 c0       	push   0xc0021410
c001f72c:	e8 11 62 ff ff       	call   c0015942 <Krnl::panic(char const*)>
c001f731:	83 c4 10             	add    esp,0x10
c001f734:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f738:	8b 00                	mov    eax,DWORD PTR [eax]
c001f73a:	85 c0                	test   eax,eax
c001f73c:	74 34                	je     c001f772 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001f73e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f742:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f745:	85 c0                	test   eax,eax
c001f747:	74 29                	je     c001f772 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001f749:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f74d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f750:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f754:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f757:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f75b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f75f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f762:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f766:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f769:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f770:	eb 65                	jmp    c001f7d7 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001f772:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f776:	8b 00                	mov    eax,DWORD PTR [eax]
c001f778:	85 c0                	test   eax,eax
c001f77a:	75 4b                	jne    c001f7c7 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001f77c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f780:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f783:	85 c0                	test   eax,eax
c001f785:	75 40                	jne    c001f7c7 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001f787:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f78b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f78f:	89 10                	mov    DWORD PTR [eax],edx
c001f791:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f795:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f799:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f79c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7a0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f7a3:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f7aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7ae:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f7b1:	85 c0                	test   eax,eax
c001f7b3:	74 22                	je     c001f7d7 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001f7b5:	83 ec 0c             	sub    esp,0xc
c001f7b8:	68 32 14 02 c0       	push   0xc0021432
c001f7bd:	e8 80 61 ff ff       	call   c0015942 <Krnl::panic(char const*)>
c001f7c2:	83 c4 10             	add    esp,0x10
c001f7c5:	eb 10                	jmp    c001f7d7 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001f7c7:	83 ec 0c             	sub    esp,0xc
c001f7ca:	68 3c 14 02 c0       	push   0xc002143c
c001f7cf:	e8 6e 61 ff ff       	call   c0015942 <Krnl::panic(char const*)>
c001f7d4:	83 c4 10             	add    esp,0x10
c001f7d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7db:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f7de:	8d 50 01             	lea    edx,[eax+0x1]
c001f7e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7e5:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f7e8:	90                   	nop
c001f7e9:	83 c4 0c             	add    esp,0xc
c001f7ec:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001f7ee <LinkedList<UnixFile>::getFirstElement()>:
c001f7ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f7f2:	8b 00                	mov    eax,DWORD PTR [eax]
c001f7f4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001f7f6 <LinkedList<UnixFile>::removeFirst()>:
c001f7f6:	83 ec 0c             	sub    esp,0xc
c001f7f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7fd:	8b 00                	mov    eax,DWORD PTR [eax]
c001f7ff:	85 c0                	test   eax,eax
c001f801:	75 12                	jne    c001f815 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001f803:	83 ec 0c             	sub    esp,0xc
c001f806:	68 48 14 02 c0       	push   0xc0021448
c001f80b:	e8 32 61 ff ff       	call   c0015942 <Krnl::panic(char const*)>
c001f810:	83 c4 10             	add    esp,0x10
c001f813:	eb 7e                	jmp    c001f893 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001f815:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f819:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f81c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f81f:	85 c0                	test   eax,eax
c001f821:	74 10                	je     c001f833 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001f823:	83 ec 0c             	sub    esp,0xc
c001f826:	68 93 14 02 c0       	push   0xc0021493
c001f82b:	e8 12 61 ff ff       	call   c0015942 <Krnl::panic(char const*)>
c001f830:	83 c4 10             	add    esp,0x10
c001f833:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f837:	8b 00                	mov    eax,DWORD PTR [eax]
c001f839:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f83c:	85 c0                	test   eax,eax
c001f83e:	75 33                	jne    c001f873 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001f840:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f844:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f84a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f84e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f855:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f859:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f85c:	83 f8 01             	cmp    eax,0x1
c001f85f:	74 21                	je     c001f882 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001f861:	83 ec 0c             	sub    esp,0xc
c001f864:	68 6c 14 02 c0       	push   0xc002146c
c001f869:	e8 d4 60 ff ff       	call   c0015942 <Krnl::panic(char const*)>
c001f86e:	83 c4 10             	add    esp,0x10
c001f871:	eb 0f                	jmp    c001f882 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001f873:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f877:	8b 00                	mov    eax,DWORD PTR [eax]
c001f879:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001f87c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f880:	89 10                	mov    DWORD PTR [eax],edx
c001f882:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f886:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f889:	8d 50 ff             	lea    edx,[eax-0x1]
c001f88c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f890:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f893:	83 c4 0c             	add    esp,0xc
c001f896:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001f898 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001f898:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f89c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f89f:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001f8a0 <DriverlessDevice::~DriverlessDevice()>:
c001f8a0:	ba 04 1b 02 c0       	mov    edx,0xc0021b04
c001f8a5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f8a9:	89 10                	mov    DWORD PTR [eax],edx
c001f8ab:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f8af:	50                   	push   eax
c001f8b0:	e8 7d 0b ff ff       	call   c0010432 <Device::~Device()>
c001f8b5:	83 c4 04             	add    esp,0x4
c001f8b8:	90                   	nop
c001f8b9:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001f8ba <DriverlessDevice::~DriverlessDevice()>:
c001f8ba:	83 ec 0c             	sub    esp,0xc
c001f8bd:	83 ec 0c             	sub    esp,0xc
c001f8c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f8c4:	e8 d7 ff ff ff       	call   c001f8a0 <DriverlessDevice::~DriverlessDevice()>
c001f8c9:	83 c4 10             	add    esp,0x10
c001f8cc:	83 ec 08             	sub    esp,0x8
c001f8cf:	68 58 01 00 00       	push   0x158
c001f8d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f8d8:	e8 74 f7 fe ff       	call   c000f051 <operator delete(void*, unsigned long)>
c001f8dd:	83 c4 10             	add    esp,0x10
c001f8e0:	83 c4 0c             	add    esp,0xc
c001f8e3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001f8e4 <LinkedList<Device>::addElement(Device*)>:
c001f8e4:	83 ec 0c             	sub    esp,0xc
c001f8e7:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001f8ec:	75 10                	jne    c001f8fe <LinkedList<Device>::addElement(Device*)+0x1a>
c001f8ee:	83 ec 0c             	sub    esp,0xc
c001f8f1:	68 10 14 02 c0       	push   0xc0021410
c001f8f6:	e8 47 60 ff ff       	call   c0015942 <Krnl::panic(char const*)>
c001f8fb:	83 c4 10             	add    esp,0x10
c001f8fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f902:	8b 00                	mov    eax,DWORD PTR [eax]
c001f904:	85 c0                	test   eax,eax
c001f906:	74 3a                	je     c001f942 <LinkedList<Device>::addElement(Device*)+0x5e>
c001f908:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f90c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f90f:	85 c0                	test   eax,eax
c001f911:	74 2f                	je     c001f942 <LinkedList<Device>::addElement(Device*)+0x5e>
c001f913:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f917:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f91a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f91e:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001f924:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f928:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f92c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f92f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f933:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f936:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001f940:	eb 68                	jmp    c001f9aa <LinkedList<Device>::addElement(Device*)+0xc6>
c001f942:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f946:	8b 00                	mov    eax,DWORD PTR [eax]
c001f948:	85 c0                	test   eax,eax
c001f94a:	75 4e                	jne    c001f99a <LinkedList<Device>::addElement(Device*)+0xb6>
c001f94c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f950:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f953:	85 c0                	test   eax,eax
c001f955:	75 43                	jne    c001f99a <LinkedList<Device>::addElement(Device*)+0xb6>
c001f957:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f95b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f95f:	89 10                	mov    DWORD PTR [eax],edx
c001f961:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f965:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f969:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f96c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f970:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f973:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001f97d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f981:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f984:	85 c0                	test   eax,eax
c001f986:	74 22                	je     c001f9aa <LinkedList<Device>::addElement(Device*)+0xc6>
c001f988:	83 ec 0c             	sub    esp,0xc
c001f98b:	68 32 14 02 c0       	push   0xc0021432
c001f990:	e8 ad 5f ff ff       	call   c0015942 <Krnl::panic(char const*)>
c001f995:	83 c4 10             	add    esp,0x10
c001f998:	eb 10                	jmp    c001f9aa <LinkedList<Device>::addElement(Device*)+0xc6>
c001f99a:	83 ec 0c             	sub    esp,0xc
c001f99d:	68 3c 14 02 c0       	push   0xc002143c
c001f9a2:	e8 9b 5f ff ff       	call   c0015942 <Krnl::panic(char const*)>
c001f9a7:	83 c4 10             	add    esp,0x10
c001f9aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9ae:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f9b1:	8d 50 01             	lea    edx,[eax+0x1]
c001f9b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9b8:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f9bb:	90                   	nop
c001f9bc:	83 c4 0c             	add    esp,0xc
c001f9bf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001f9c0 <LinkedList<Device>::LinkedList()>:
c001f9c0:	83 ec 0c             	sub    esp,0xc
c001f9c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9c7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f9cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9d1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f9d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9dc:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f9e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9e7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f9ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9f1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f9f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9fc:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fa03:	83 ec 0c             	sub    esp,0xc
c001fa06:	68 f6 13 02 c0       	push   0xc00213f6
c001fa0b:	e8 67 f7 fe ff       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c001fa10:	83 c4 10             	add    esp,0x10
c001fa13:	90                   	nop
c001fa14:	83 c4 0c             	add    esp,0xc
c001fa17:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR0Ev:

c001fa18 <CPU::readCR0()>:
c001fa18:	83 ec 10             	sub    esp,0x10
c001fa1b:	0f 20 c0             	mov    eax,cr0
c001fa1e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fa22:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fa26:	83 c4 10             	add    esp,0x10
c001fa29:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeCR0Em:

c001fa2a <CPU::writeCR0(unsigned long)>:
c001fa2a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa2e:	0f 22 c0             	mov    cr0,eax
c001fa31:	90                   	nop
c001fa32:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR0Ev:

c001fa33 <CPU::readDR0()>:
c001fa33:	83 ec 10             	sub    esp,0x10
c001fa36:	0f 21 c0             	mov    eax,db0
c001fa39:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fa3d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fa41:	83 c4 10             	add    esp,0x10
c001fa44:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR1Ev:

c001fa45 <CPU::readDR1()>:
c001fa45:	83 ec 10             	sub    esp,0x10
c001fa48:	0f 21 c8             	mov    eax,db1
c001fa4b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fa4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fa53:	83 c4 10             	add    esp,0x10
c001fa56:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR2Ev:

c001fa57 <CPU::readDR2()>:
c001fa57:	83 ec 10             	sub    esp,0x10
c001fa5a:	0f 21 d0             	mov    eax,db2
c001fa5d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fa61:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fa65:	83 c4 10             	add    esp,0x10
c001fa68:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR3Ev:

c001fa69 <CPU::readDR3()>:
c001fa69:	83 ec 10             	sub    esp,0x10
c001fa6c:	0f 21 d8             	mov    eax,db3
c001fa6f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fa73:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fa77:	83 c4 10             	add    esp,0x10
c001fa7a:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR6Ev:

c001fa7b <CPU::readDR6()>:
c001fa7b:	83 ec 10             	sub    esp,0x10
c001fa7e:	0f 21 f0             	mov    eax,db6
c001fa81:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fa85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fa89:	83 c4 10             	add    esp,0x10
c001fa8c:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR7Ev:

c001fa8d <CPU::readDR7()>:
c001fa8d:	83 ec 10             	sub    esp,0x10
c001fa90:	0f 21 f8             	mov    eax,db7
c001fa93:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fa97:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fa9b:	83 c4 10             	add    esp,0x10
c001fa9e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001faa0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001faa0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001faa4:	8b 00                	mov    eax,DWORD PTR [eax]
c001faa6:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001faa8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001faa8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001faac:	8b 00                	mov    eax,DWORD PTR [eax]
c001faae:	85 c0                	test   eax,eax
c001fab0:	75 0e                	jne    c001fac0 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001fab2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fab6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fab9:	85 c0                	test   eax,eax
c001fabb:	75 03                	jne    c001fac0 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001fabd:	b0 01                	mov    al,0x1
c001fabf:	c3                   	ret    
c001fac0:	b0 00                	mov    al,0x0
c001fac2:	90                   	nop
c001fac3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001fac4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001fac4:	83 ec 0c             	sub    esp,0xc
c001fac7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001facb:	8b 00                	mov    eax,DWORD PTR [eax]
c001facd:	85 c0                	test   eax,eax
c001facf:	75 15                	jne    c001fae6 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c001fad1:	83 ec 0c             	sub    esp,0xc
c001fad4:	68 48 14 02 c0       	push   0xc0021448
c001fad9:	e8 64 5e ff ff       	call   c0015942 <Krnl::panic(char const*)>
c001fade:	83 c4 10             	add    esp,0x10
c001fae1:	e9 88 00 00 00       	jmp    c001fb6e <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c001fae6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001faea:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001faed:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001faf0:	85 c0                	test   eax,eax
c001faf2:	0f 95 c0             	setne  al
c001faf5:	84 c0                	test   al,al
c001faf7:	74 10                	je     c001fb09 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c001faf9:	83 ec 0c             	sub    esp,0xc
c001fafc:	68 93 14 02 c0       	push   0xc0021493
c001fb01:	e8 3c 5e ff ff       	call   c0015942 <Krnl::panic(char const*)>
c001fb06:	83 c4 10             	add    esp,0x10
c001fb09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb0d:	8b 00                	mov    eax,DWORD PTR [eax]
c001fb0f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001fb12:	85 c0                	test   eax,eax
c001fb14:	0f 94 c0             	sete   al
c001fb17:	84 c0                	test   al,al
c001fb19:	74 33                	je     c001fb4e <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c001fb1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb1f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fb25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb29:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fb30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb34:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fb37:	83 f8 01             	cmp    eax,0x1
c001fb3a:	74 21                	je     c001fb5d <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c001fb3c:	83 ec 0c             	sub    esp,0xc
c001fb3f:	68 6c 14 02 c0       	push   0xc002146c
c001fb44:	e8 f9 5d ff ff       	call   c0015942 <Krnl::panic(char const*)>
c001fb49:	83 c4 10             	add    esp,0x10
c001fb4c:	eb 0f                	jmp    c001fb5d <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c001fb4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb52:	8b 00                	mov    eax,DWORD PTR [eax]
c001fb54:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001fb57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb5b:	89 10                	mov    DWORD PTR [eax],edx
c001fb5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb61:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fb64:	8d 50 ff             	lea    edx,[eax-0x1]
c001fb67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb6b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fb6e:	83 c4 0c             	add    esp,0xc
c001fb71:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001fb72 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001fb72:	83 ec 0c             	sub    esp,0xc
c001fb75:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001fb7a:	75 10                	jne    c001fb8c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c001fb7c:	83 ec 0c             	sub    esp,0xc
c001fb7f:	68 10 14 02 c0       	push   0xc0021410
c001fb84:	e8 b9 5d ff ff       	call   c0015942 <Krnl::panic(char const*)>
c001fb89:	83 c4 10             	add    esp,0x10
c001fb8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb90:	8b 00                	mov    eax,DWORD PTR [eax]
c001fb92:	85 c0                	test   eax,eax
c001fb94:	74 34                	je     c001fbca <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c001fb96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb9a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fb9d:	85 c0                	test   eax,eax
c001fb9f:	74 29                	je     c001fbca <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c001fba1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fba5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fba8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fbac:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001fbaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbb3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fbb7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fbba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbbe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fbc1:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001fbc8:	eb 65                	jmp    c001fc2f <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c001fbca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbce:	8b 00                	mov    eax,DWORD PTR [eax]
c001fbd0:	85 c0                	test   eax,eax
c001fbd2:	75 4b                	jne    c001fc1f <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c001fbd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbd8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fbdb:	85 c0                	test   eax,eax
c001fbdd:	75 40                	jne    c001fc1f <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c001fbdf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbe3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fbe7:	89 10                	mov    DWORD PTR [eax],edx
c001fbe9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbed:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fbf1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fbf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbf8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fbfb:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001fc02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc06:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fc09:	85 c0                	test   eax,eax
c001fc0b:	74 22                	je     c001fc2f <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c001fc0d:	83 ec 0c             	sub    esp,0xc
c001fc10:	68 32 14 02 c0       	push   0xc0021432
c001fc15:	e8 28 5d ff ff       	call   c0015942 <Krnl::panic(char const*)>
c001fc1a:	83 c4 10             	add    esp,0x10
c001fc1d:	eb 10                	jmp    c001fc2f <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c001fc1f:	83 ec 0c             	sub    esp,0xc
c001fc22:	68 3c 14 02 c0       	push   0xc002143c
c001fc27:	e8 16 5d ff ff       	call   c0015942 <Krnl::panic(char const*)>
c001fc2c:	83 c4 10             	add    esp,0x10
c001fc2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc33:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fc36:	8d 50 01             	lea    edx,[eax+0x1]
c001fc39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc3d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fc40:	90                   	nop
c001fc41:	83 c4 0c             	add    esp,0xc
c001fc44:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001fc46 <ACPI::~ACPI()>:
c001fc46:	83 ec 0c             	sub    esp,0xc
c001fc49:	ba 9c 22 02 c0       	mov    edx,0xc002229c
c001fc4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc52:	89 10                	mov    DWORD PTR [eax],edx
c001fc54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc58:	83 ec 0c             	sub    esp,0xc
c001fc5b:	50                   	push   eax
c001fc5c:	e8 d1 07 ff ff       	call   c0010432 <Device::~Device()>
c001fc61:	83 c4 10             	add    esp,0x10
c001fc64:	90                   	nop
c001fc65:	83 c4 0c             	add    esp,0xc
c001fc68:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001fc6a <ACPI::~ACPI()>:
c001fc6a:	83 ec 0c             	sub    esp,0xc
c001fc6d:	83 ec 0c             	sub    esp,0xc
c001fc70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fc74:	e8 cd ff ff ff       	call   c001fc46 <ACPI::~ACPI()>
c001fc79:	83 c4 10             	add    esp,0x10
c001fc7c:	83 ec 08             	sub    esp,0x8
c001fc7f:	68 68 22 00 00       	push   0x2268
c001fc84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fc88:	e8 c4 f3 fe ff       	call   c000f051 <operator delete(void*, unsigned long)>
c001fc8d:	83 c4 10             	add    esp,0x10
c001fc90:	83 c4 0c             	add    esp,0xc
c001fc93:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001fc94 <CPU::~CPU()>:
c001fc94:	83 ec 0c             	sub    esp,0xc
c001fc97:	ba 8c 26 02 c0       	mov    edx,0xc002268c
c001fc9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fca0:	89 10                	mov    DWORD PTR [eax],edx
c001fca2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fca6:	83 ec 0c             	sub    esp,0xc
c001fca9:	50                   	push   eax
c001fcaa:	e8 83 07 ff ff       	call   c0010432 <Device::~Device()>
c001fcaf:	83 c4 10             	add    esp,0x10
c001fcb2:	90                   	nop
c001fcb3:	83 c4 0c             	add    esp,0xc
c001fcb6:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001fcb8 <CPU::~CPU()>:
c001fcb8:	83 ec 0c             	sub    esp,0xc
c001fcbb:	83 ec 0c             	sub    esp,0xc
c001fcbe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fcc2:	e8 cd ff ff ff       	call   c001fc94 <CPU::~CPU()>
c001fcc7:	83 c4 10             	add    esp,0x10
c001fcca:	83 ec 08             	sub    esp,0x8
c001fccd:	68 98 11 00 00       	push   0x1198
c001fcd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fcd6:	e8 76 f3 fe ff       	call   c000f051 <operator delete(void*, unsigned long)>
c001fcdb:	83 c4 10             	add    esp,0x10
c001fcde:	83 c4 0c             	add    esp,0xc
c001fce1:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR4Ev:

c001fce2 <CPU::readCR4()>:
c001fce2:	83 ec 10             	sub    esp,0x10
c001fce5:	0f 20 e0             	mov    eax,cr4
c001fce8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fcec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fcf0:	83 c4 10             	add    esp,0x10
c001fcf3:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeDR7Em:

c001fcf4 <CPU::writeDR7(unsigned long)>:
c001fcf4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fcf8:	0f 23 f8             	mov    db7,eax
c001fcfb:	90                   	nop
c001fcfc:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeCR4Em:

c001fcfd <CPU::writeCR4(unsigned long)>:
c001fcfd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd01:	0f 22 e0             	mov    cr4,eax
c001fd04:	90                   	nop
c001fd05:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR2Ev:

c001fd06 <CPU::readCR2()>:
c001fd06:	83 ec 10             	sub    esp,0x10
c001fd09:	0f 20 d0             	mov    eax,cr2
c001fd0c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fd10:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fd14:	83 c4 10             	add    esp,0x10
c001fd17:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001fd18 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001fd18:	90                   	nop
c001fd19:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001fd1a <ThreadControlBlock::ThreadControlBlock()>:
c001fd1a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd1e:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001fd25:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd29:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001fd30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd34:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001fd3b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd3f:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c001fd46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd4a:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001fd4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd52:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c001fd56:	90                   	nop
c001fd57:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001fd58 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001fd58:	83 ec 0c             	sub    esp,0xc
c001fd5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd5f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fd65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd69:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fd70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd74:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fd7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd7f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fd85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd89:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fd90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd94:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fd9b:	83 ec 0c             	sub    esp,0xc
c001fd9e:	68 f6 13 02 c0       	push   0xc00213f6
c001fda3:	e8 cf f3 fe ff       	call   c000f177 <Dbg::kprintf(char const*, ...)>
c001fda8:	83 c4 10             	add    esp,0x10
c001fdab:	90                   	nop
c001fdac:	83 c4 0c             	add    esp,0xc
c001fdaf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001fdb0 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001fdb0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fdb4:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001fdb7:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001fdb8 <PCI::~PCI()>:
c001fdb8:	83 ec 0c             	sub    esp,0xc
c001fdbb:	ba 0c 33 02 c0       	mov    edx,0xc002330c
c001fdc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdc4:	89 10                	mov    DWORD PTR [eax],edx
c001fdc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdca:	83 ec 0c             	sub    esp,0xc
c001fdcd:	50                   	push   eax
c001fdce:	e8 69 00 ff ff       	call   c000fe3c <Bus::~Bus()>
c001fdd3:	83 c4 10             	add    esp,0x10
c001fdd6:	90                   	nop
c001fdd7:	83 c4 0c             	add    esp,0xc
c001fdda:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001fddc <PCI::~PCI()>:
c001fddc:	83 ec 0c             	sub    esp,0xc
c001fddf:	83 ec 0c             	sub    esp,0xc
c001fde2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fde6:	e8 cd ff ff ff       	call   c001fdb8 <PCI::~PCI()>
c001fdeb:	83 c4 10             	add    esp,0x10
c001fdee:	83 ec 08             	sub    esp,0x8
c001fdf1:	68 58 01 00 00       	push   0x158
c001fdf6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fdfa:	e8 52 f2 fe ff       	call   c000f051 <operator delete(void*, unsigned long)>
c001fdff:	83 c4 10             	add    esp,0x10
c001fe02:	83 c4 0c             	add    esp,0xc
c001fe05:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001fe06 <IDE::~IDE()>:
c001fe06:	83 ec 0c             	sub    esp,0xc
c001fe09:	ba 70 35 02 c0       	mov    edx,0xc0023570
c001fe0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe12:	89 10                	mov    DWORD PTR [eax],edx
c001fe14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe18:	83 ec 0c             	sub    esp,0xc
c001fe1b:	50                   	push   eax
c001fe1c:	e8 23 0b ff ff       	call   c0010944 <HardDiskController::~HardDiskController()>
c001fe21:	83 c4 10             	add    esp,0x10
c001fe24:	90                   	nop
c001fe25:	83 c4 0c             	add    esp,0xc
c001fe28:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001fe2a <IDE::~IDE()>:
c001fe2a:	83 ec 0c             	sub    esp,0xc
c001fe2d:	83 ec 0c             	sub    esp,0xc
c001fe30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe34:	e8 cd ff ff ff       	call   c001fe06 <IDE::~IDE()>
c001fe39:	83 c4 10             	add    esp,0x10
c001fe3c:	83 ec 08             	sub    esp,0x8
c001fe3f:	68 70 02 00 00       	push   0x270
c001fe44:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe48:	e8 04 f2 fe ff       	call   c000f051 <operator delete(void*, unsigned long)>
c001fe4d:	83 c4 10             	add    esp,0x10
c001fe50:	83 c4 0c             	add    esp,0xc
c001fe53:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001fe54 <ATA::~ATA()>:
c001fe54:	83 ec 0c             	sub    esp,0xc
c001fe57:	ba c0 35 02 c0       	mov    edx,0xc00235c0
c001fe5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe60:	89 10                	mov    DWORD PTR [eax],edx
c001fe62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe66:	83 ec 0c             	sub    esp,0xc
c001fe69:	50                   	push   eax
c001fe6a:	e8 b3 0b ff ff       	call   c0010a22 <PhysicalDisk::~PhysicalDisk()>
c001fe6f:	83 c4 10             	add    esp,0x10
c001fe72:	90                   	nop
c001fe73:	83 c4 0c             	add    esp,0xc
c001fe76:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001fe78 <ATA::~ATA()>:
c001fe78:	83 ec 0c             	sub    esp,0xc
c001fe7b:	83 ec 0c             	sub    esp,0xc
c001fe7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe82:	e8 cd ff ff ff       	call   c001fe54 <ATA::~ATA()>
c001fe87:	83 c4 10             	add    esp,0x10
c001fe8a:	83 ec 08             	sub    esp,0x8
c001fe8d:	68 7c 01 00 00       	push   0x17c
c001fe92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe96:	e8 b6 f1 fe ff       	call   c000f051 <operator delete(void*, unsigned long)>
c001fe9b:	83 c4 10             	add    esp,0x10
c001fe9e:	83 c4 0c             	add    esp,0xc
c001fea1:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001fea2 <ATAPI::~ATAPI()>:
c001fea2:	83 ec 0c             	sub    esp,0xc
c001fea5:	ba 2c 36 02 c0       	mov    edx,0xc002362c
c001feaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001feae:	89 10                	mov    DWORD PTR [eax],edx
c001feb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001feb4:	83 ec 0c             	sub    esp,0xc
c001feb7:	50                   	push   eax
c001feb8:	e8 65 0b ff ff       	call   c0010a22 <PhysicalDisk::~PhysicalDisk()>
c001febd:	83 c4 10             	add    esp,0x10
c001fec0:	90                   	nop
c001fec1:	83 c4 0c             	add    esp,0xc
c001fec4:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001fec6 <ATAPI::~ATAPI()>:
c001fec6:	83 ec 0c             	sub    esp,0xc
c001fec9:	83 ec 0c             	sub    esp,0xc
c001fecc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fed0:	e8 cd ff ff ff       	call   c001fea2 <ATAPI::~ATAPI()>
c001fed5:	83 c4 10             	add    esp,0x10
c001fed8:	83 ec 08             	sub    esp,0x8
c001fedb:	68 80 01 00 00       	push   0x180
c001fee0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fee4:	e8 68 f1 fe ff       	call   c000f051 <operator delete(void*, unsigned long)>
c001fee9:	83 c4 10             	add    esp,0x10
c001feec:	83 c4 0c             	add    esp,0xc
c001feef:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c001fef0 <AVX::~AVX()>:
c001fef0:	83 ec 0c             	sub    esp,0xc
c001fef3:	ba 68 36 02 c0       	mov    edx,0xc0023668
c001fef8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fefc:	89 10                	mov    DWORD PTR [eax],edx
c001fefe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff02:	83 ec 0c             	sub    esp,0xc
c001ff05:	50                   	push   eax
c001ff06:	e8 9b 0b ff ff       	call   c0010aa6 <FPU::~FPU()>
c001ff0b:	83 c4 10             	add    esp,0x10
c001ff0e:	90                   	nop
c001ff0f:	83 c4 0c             	add    esp,0xc
c001ff12:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c001ff14 <AVX::~AVX()>:
c001ff14:	83 ec 0c             	sub    esp,0xc
c001ff17:	83 ec 0c             	sub    esp,0xc
c001ff1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff1e:	e8 cd ff ff ff       	call   c001fef0 <AVX::~AVX()>
c001ff23:	83 c4 10             	add    esp,0x10
c001ff26:	83 ec 08             	sub    esp,0x8
c001ff29:	68 58 01 00 00       	push   0x158
c001ff2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff32:	e8 1a f1 fe ff       	call   c000f051 <operator delete(void*, unsigned long)>
c001ff37:	83 c4 10             	add    esp,0x10
c001ff3a:	83 c4 0c             	add    esp,0xc
c001ff3d:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c001ff3e <MMX::~MMX()>:
c001ff3e:	83 ec 0c             	sub    esp,0xc
c001ff41:	ba a8 36 02 c0       	mov    edx,0xc00236a8
c001ff46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff4a:	89 10                	mov    DWORD PTR [eax],edx
c001ff4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff50:	83 ec 0c             	sub    esp,0xc
c001ff53:	50                   	push   eax
c001ff54:	e8 4d 0b ff ff       	call   c0010aa6 <FPU::~FPU()>
c001ff59:	83 c4 10             	add    esp,0x10
c001ff5c:	90                   	nop
c001ff5d:	83 c4 0c             	add    esp,0xc
c001ff60:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c001ff62 <MMX::~MMX()>:
c001ff62:	83 ec 0c             	sub    esp,0xc
c001ff65:	83 ec 0c             	sub    esp,0xc
c001ff68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff6c:	e8 cd ff ff ff       	call   c001ff3e <MMX::~MMX()>
c001ff71:	83 c4 10             	add    esp,0x10
c001ff74:	83 ec 08             	sub    esp,0x8
c001ff77:	68 58 01 00 00       	push   0x158
c001ff7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff80:	e8 cc f0 fe ff       	call   c000f051 <operator delete(void*, unsigned long)>
c001ff85:	83 c4 10             	add    esp,0x10
c001ff88:	83 c4 0c             	add    esp,0xc
c001ff8b:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c001ff8c <SSE::~SSE()>:
c001ff8c:	83 ec 0c             	sub    esp,0xc
c001ff8f:	ba e8 36 02 c0       	mov    edx,0xc00236e8
c001ff94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff98:	89 10                	mov    DWORD PTR [eax],edx
c001ff9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff9e:	83 ec 0c             	sub    esp,0xc
c001ffa1:	50                   	push   eax
c001ffa2:	e8 ff 0a ff ff       	call   c0010aa6 <FPU::~FPU()>
c001ffa7:	83 c4 10             	add    esp,0x10
c001ffaa:	90                   	nop
c001ffab:	83 c4 0c             	add    esp,0xc
c001ffae:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c001ffb0 <SSE::~SSE()>:
c001ffb0:	83 ec 0c             	sub    esp,0xc
c001ffb3:	83 ec 0c             	sub    esp,0xc
c001ffb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ffba:	e8 cd ff ff ff       	call   c001ff8c <SSE::~SSE()>
c001ffbf:	83 c4 10             	add    esp,0x10
c001ffc2:	83 ec 08             	sub    esp,0x8
c001ffc5:	68 58 01 00 00       	push   0x158
c001ffca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ffce:	e8 7e f0 fe ff       	call   c000f051 <operator delete(void*, unsigned long)>
c001ffd3:	83 c4 10             	add    esp,0x10
c001ffd6:	83 c4 0c             	add    esp,0xc
c001ffd9:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c001ffda <x87::~x87()>:
c001ffda:	83 ec 0c             	sub    esp,0xc
c001ffdd:	ba 28 37 02 c0       	mov    edx,0xc0023728
c001ffe2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffe6:	89 10                	mov    DWORD PTR [eax],edx
c001ffe8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffec:	83 ec 0c             	sub    esp,0xc
c001ffef:	50                   	push   eax
c001fff0:	e8 b1 0a ff ff       	call   c0010aa6 <FPU::~FPU()>
c001fff5:	83 c4 10             	add    esp,0x10
c001fff8:	90                   	nop
c001fff9:	83 c4 0c             	add    esp,0xc
c001fffc:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c001fffe <x87::~x87()>:
c001fffe:	83 ec 0c             	sub    esp,0xc
c0020001:	83 ec 0c             	sub    esp,0xc
c0020004:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020008:	e8 cd ff ff ff       	call   c001ffda <x87::~x87()>
c002000d:	83 c4 10             	add    esp,0x10
c0020010:	83 ec 08             	sub    esp,0x8
c0020013:	68 58 01 00 00       	push   0x158
c0020018:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002001c:	e8 30 f0 fe ff       	call   c000f051 <operator delete(void*, unsigned long)>
c0020021:	83 c4 10             	add    esp,0x10
c0020024:	83 c4 0c             	add    esp,0xc
c0020027:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0020028 <IOAPIC::~IOAPIC()>:
c0020028:	83 ec 0c             	sub    esp,0xc
c002002b:	ba 80 38 02 c0       	mov    edx,0xc0023880
c0020030:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020034:	89 10                	mov    DWORD PTR [eax],edx
c0020036:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002003a:	83 ec 0c             	sub    esp,0xc
c002003d:	50                   	push   eax
c002003e:	e8 ef 03 ff ff       	call   c0010432 <Device::~Device()>
c0020043:	83 c4 10             	add    esp,0x10
c0020046:	90                   	nop
c0020047:	83 c4 0c             	add    esp,0xc
c002004a:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c002004c <IOAPIC::~IOAPIC()>:
c002004c:	83 ec 0c             	sub    esp,0xc
c002004f:	83 ec 0c             	sub    esp,0xc
c0020052:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020056:	e8 cd ff ff ff       	call   c0020028 <IOAPIC::~IOAPIC()>
c002005b:	83 c4 10             	add    esp,0x10
c002005e:	83 ec 08             	sub    esp,0x8
c0020061:	68 68 01 00 00       	push   0x168
c0020066:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002006a:	e8 e2 ef fe ff       	call   c000f051 <operator delete(void*, unsigned long)>
c002006f:	83 c4 10             	add    esp,0x10
c0020072:	83 c4 0c             	add    esp,0xc
c0020075:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0020076 <APIC::~APIC()>:
c0020076:	83 ec 0c             	sub    esp,0xc
c0020079:	ba 38 38 02 c0       	mov    edx,0xc0023838
c002007e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020082:	89 10                	mov    DWORD PTR [eax],edx
c0020084:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020088:	83 ec 0c             	sub    esp,0xc
c002008b:	50                   	push   eax
c002008c:	e8 df 0e ff ff       	call   c0010f70 <InterruptController::~InterruptController()>
c0020091:	83 c4 10             	add    esp,0x10
c0020094:	90                   	nop
c0020095:	83 c4 0c             	add    esp,0xc
c0020098:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c002009a <APIC::~APIC()>:
c002009a:	83 ec 0c             	sub    esp,0xc
c002009d:	83 ec 0c             	sub    esp,0xc
c00200a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00200a4:	e8 cd ff ff ff       	call   c0020076 <APIC::~APIC()>
c00200a9:	83 c4 10             	add    esp,0x10
c00200ac:	83 ec 08             	sub    esp,0x8
c00200af:	68 58 21 00 00       	push   0x2158
c00200b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00200b8:	e8 94 ef fe ff       	call   c000f051 <operator delete(void*, unsigned long)>
c00200bd:	83 c4 10             	add    esp,0x10
c00200c0:	83 c4 0c             	add    esp,0xc
c00200c3:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c00200c4 <PIC::~PIC()>:
c00200c4:	83 ec 0c             	sub    esp,0xc
c00200c7:	ba d0 38 02 c0       	mov    edx,0xc00238d0
c00200cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200d0:	89 10                	mov    DWORD PTR [eax],edx
c00200d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200d6:	83 ec 0c             	sub    esp,0xc
c00200d9:	50                   	push   eax
c00200da:	e8 91 0e ff ff       	call   c0010f70 <InterruptController::~InterruptController()>
c00200df:	83 c4 10             	add    esp,0x10
c00200e2:	90                   	nop
c00200e3:	83 c4 0c             	add    esp,0xc
c00200e6:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c00200e8 <PIC::~PIC()>:
c00200e8:	83 ec 0c             	sub    esp,0xc
c00200eb:	83 ec 0c             	sub    esp,0xc
c00200ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00200f2:	e8 cd ff ff ff       	call   c00200c4 <PIC::~PIC()>
c00200f7:	83 c4 10             	add    esp,0x10
c00200fa:	83 ec 08             	sub    esp,0x8
c00200fd:	68 58 21 00 00       	push   0x2158
c0020102:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020106:	e8 46 ef fe ff       	call   c000f051 <operator delete(void*, unsigned long)>
c002010b:	83 c4 10             	add    esp,0x10
c002010e:	83 c4 0c             	add    esp,0xc
c0020111:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0020112 <APICTimer::~APICTimer()>:
c0020112:	83 ec 0c             	sub    esp,0xc
c0020115:	ba 24 39 02 c0       	mov    edx,0xc0023924
c002011a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002011e:	89 10                	mov    DWORD PTR [eax],edx
c0020120:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020124:	83 ec 0c             	sub    esp,0xc
c0020127:	50                   	push   eax
c0020128:	e8 71 2b ff ff       	call   c0012c9e <Timer::~Timer()>
c002012d:	83 c4 10             	add    esp,0x10
c0020130:	90                   	nop
c0020131:	83 c4 0c             	add    esp,0xc
c0020134:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0020136 <APICTimer::~APICTimer()>:
c0020136:	83 ec 0c             	sub    esp,0xc
c0020139:	83 ec 0c             	sub    esp,0xc
c002013c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020140:	e8 cd ff ff ff       	call   c0020112 <APICTimer::~APICTimer()>
c0020145:	83 c4 10             	add    esp,0x10
c0020148:	83 ec 08             	sub    esp,0x8
c002014b:	68 60 01 00 00       	push   0x160
c0020150:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020154:	e8 f8 ee fe ff       	call   c000f051 <operator delete(void*, unsigned long)>
c0020159:	83 c4 10             	add    esp,0x10
c002015c:	83 c4 0c             	add    esp,0xc
c002015f:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0020160 <PIT::~PIT()>:
c0020160:	83 ec 0c             	sub    esp,0xc
c0020163:	ba 74 39 02 c0       	mov    edx,0xc0023974
c0020168:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002016c:	89 10                	mov    DWORD PTR [eax],edx
c002016e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020172:	83 ec 0c             	sub    esp,0xc
c0020175:	50                   	push   eax
c0020176:	e8 23 2b ff ff       	call   c0012c9e <Timer::~Timer()>
c002017b:	83 c4 10             	add    esp,0x10
c002017e:	90                   	nop
c002017f:	83 c4 0c             	add    esp,0xc
c0020182:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0020184 <PIT::~PIT()>:
c0020184:	83 ec 0c             	sub    esp,0xc
c0020187:	83 ec 0c             	sub    esp,0xc
c002018a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002018e:	e8 cd ff ff ff       	call   c0020160 <PIT::~PIT()>
c0020193:	83 c4 10             	add    esp,0x10
c0020196:	83 ec 08             	sub    esp,0x8
c0020199:	68 5c 01 00 00       	push   0x15c
c002019e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00201a2:	e8 aa ee fe ff       	call   c000f051 <operator delete(void*, unsigned long)>
c00201a7:	83 c4 10             	add    esp,0x10
c00201aa:	83 c4 0c             	add    esp,0xc
c00201ad:	c3                   	ret    
