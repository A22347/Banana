
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 ed be 00 00       	call   c000bf0d <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 f3 e5 01 00       	call   c001e618 <_init>
c0000025:	c3                   	ret    
c0000026:	bb a2 f1 01 c0       	mov    ebx,0xc001f1a2
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb ac f1 01 c0    	cmp    ebx,0xc001f1ac
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 2c 2e 02 c0       	mov    eax,0xc0022e2c
c0000049:	3d 2c 2e 02 c0       	cmp    eax,0xc0022e2c
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 2c 2e 02 c0       	push   0xc0022e2c
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 2c 2e 02 c0       	mov    eax,0xc0022e2c
c0000075:	2d 2c 2e 02 c0       	sub    eax,0xc0022e2c
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 2c 2e 02 c0       	push   0xc0022e2c
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d cc 2f 02 c0 00 	cmp    BYTE PTR ds:0xc0022fcc,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb b4 f1 01 c0       	mov    ebx,0xc001f1b4
c00000bb:	81 eb b0 f1 01 c0    	sub    ebx,0xc001f1b0
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be b0 f1 01 c0       	mov    esi,0xc001f1b0
c00000ca:	a1 d0 2f 02 c0       	mov    eax,ds:0xc0022fd0
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 d0 2f 02 c0       	mov    ds:0xc0022fd0,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 d0 2f 02 c0       	mov    eax,ds:0xc0022fd0
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 2c 2e 02 c0       	push   0xc0022e2c
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 cc 2f 02 c0 01 	mov    BYTE PTR ds:0xc0022fcc,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 d4 2f 02 c0       	push   0xc0022fd4
c000012c:	68 2c 2e 02 c0       	push   0xc0022e2c
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <doTPAUSE>:
c0000150:	fb                   	sti    
c0000151:	31 c0                	xor    eax,eax
c0000153:	31 d2                	xor    edx,edx
c0000155:	66 0f ae f0          	tpause eax
c0000159:	c3                   	ret    

c000015a <hasLegacyFPU>:
c000015a:	0f 20 c2             	mov    edx,cr0
c000015d:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000163:	0f 22 c2             	mov    cr0,edx
c0000166:	db e3                	fninit 
c0000168:	dd 3d 7d 01 00 c0    	fnstsw WORD PTR ds:0xc000017d
c000016e:	31 c0                	xor    eax,eax
c0000170:	66 81 3d 7d 01 00 c0 00 00 	cmp    WORD PTR ds:0xc000017d,0x0
c0000179:	75 01                	jne    c000017c <hasLegacyFPU.nofpu>

c000017b <hasLegacyFPU.hasfpu>:
c000017b:	40                   	inc    eax

c000017c <hasLegacyFPU.nofpu>:
c000017c:	c3                   	ret    

c000017d <testword>:
c000017d:	aa                   	stos   BYTE PTR es:[edi],al
c000017e:	55                   	push   ebp

c000017f <is486>:
c000017f:	0f 09                	wbinvd 
c0000181:	31 c0                	xor    eax,eax
c0000183:	40                   	inc    eax
c0000184:	c3                   	ret    
c0000185:	90                   	nop
c0000186:	90                   	nop
c0000187:	90                   	nop
c0000188:	90                   	nop
c0000189:	90                   	nop
c000018a:	90                   	nop
c000018b:	90                   	nop
c000018c:	90                   	nop
c000018d:	90                   	nop
c000018e:	90                   	nop
c000018f:	90                   	nop
c0000190:	90                   	nop
c0000191:	90                   	nop
c0000192:	90                   	nop
c0000193:	90                   	nop
c0000194:	90                   	nop
c0000195:	90                   	nop
c0000196:	90                   	nop
c0000197:	90                   	nop
c0000198:	90                   	nop
c0000199:	90                   	nop
c000019a:	90                   	nop
c000019b:	90                   	nop
c000019c:	90                   	nop
c000019d:	90                   	nop
c000019e:	90                   	nop
c000019f:	90                   	nop
c00001a0:	90                   	nop
c00001a1:	90                   	nop
c00001a2:	90                   	nop
c00001a3:	90                   	nop
c00001a4:	90                   	nop
c00001a5:	90                   	nop
c00001a6:	90                   	nop
c00001a7:	90                   	nop
c00001a8:	90                   	nop
c00001a9:	90                   	nop
c00001aa:	90                   	nop
c00001ab:	90                   	nop
c00001ac:	90                   	nop
c00001ad:	90                   	nop
c00001ae:	90                   	nop
c00001af:	90                   	nop
c00001b0:	90                   	nop
c00001b1:	90                   	nop
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	c3                   	ret    

c00001b5 <goToVM86>:
c00001b5:	fa                   	cli    
c00001b6:	55                   	push   ebp
c00001b7:	89 e5                	mov    ebp,esp
c00001b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bc:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00001bf:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c00001c2:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00001c5:	25 ff ff 00 00       	and    eax,0xffff
c00001ca:	81 e3 ff ff 00 00    	and    ebx,0xffff
c00001d0:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00001d6:	81 e2 ff ff 00 00    	and    edx,0xffff
c00001dc:	52                   	push   edx
c00001dd:	51                   	push   ecx
c00001de:	68 02 02 02 00       	push   0x20202
c00001e3:	53                   	push   ebx
c00001e4:	50                   	push   eax
c00001e5:	cf                   	iret   

c00001e6 <goToUsermode>:
c00001e6:	fa                   	cli    
c00001e7:	55                   	push   ebp
c00001e8:	89 e5                	mov    ebp,esp
c00001ea:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00001ed:	66 b8 23 00          	mov    ax,0x23
c00001f1:	66 8e d8             	mov    ds,ax
c00001f4:	66 8e c0             	mov    es,ax
c00001f7:	66 8e e0             	mov    fs,ax
c00001fa:	66 8e e8             	mov    gs,ax
c00001fd:	89 e0                	mov    eax,esp
c00001ff:	68 23 00 00 00       	push   0x23
c0000204:	50                   	push   eax
c0000205:	68 02 02 00 00       	push   0x202
c000020a:	68 1b 00 00 00       	push   0x1b
c000020f:	53                   	push   ebx
c0000210:	cf                   	iret   

c0000211 <switchToThreadASMFirstTime>:
c0000211:	9c                   	pushf  
c0000212:	fa                   	cli    
c0000213:	50                   	push   eax
c0000214:	53                   	push   ebx
c0000215:	51                   	push   ecx
c0000216:	52                   	push   edx
c0000217:	56                   	push   esi
c0000218:	57                   	push   edi
c0000219:	55                   	push   ebp
c000021a:	e9 11 00 00 00       	jmp    c0000230 <commonThreadSwitch>

c000021f <switchToThreadASM>:
c000021f:	9c                   	pushf  
c0000220:	50                   	push   eax
c0000221:	53                   	push   ebx
c0000222:	51                   	push   ecx
c0000223:	52                   	push   edx
c0000224:	56                   	push   esi
c0000225:	57                   	push   edi
c0000226:	55                   	push   ebp
c0000227:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c000022d:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000230 <commonThreadSwitch>:
c0000230:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000234:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000023a:	8b 06                	mov    eax,DWORD PTR [esi]
c000023c:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000023f:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000242:	0f 20 d9             	mov    ecx,cr3
c0000245:	39 c8                	cmp    eax,ecx
c0000247:	74 03                	je     c000024c <commonThreadSwitch.doneVAS>
c0000249:	0f 22 d8             	mov    cr3,eax

c000024c <commonThreadSwitch.doneVAS>:
c000024c:	85 d2                	test   edx,edx
c000024e:	74 4e                	je     c000029e <commonThreadSwitch.notFirstTime>
c0000250:	fa                   	cli    
c0000251:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0000254:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c0000259:	60                   	pusha  
c000025a:	e8 d1 e8 00 00       	call   c000eb30 <mapVASFirstTime>
c000025f:	61                   	popa   
c0000260:	89 c4                	mov    esp,eax
c0000262:	56                   	push   esi
c0000263:	52                   	push   edx
c0000264:	e8 cf 73 01 00       	call   c0017638 <changeTSS>
c0000269:	5a                   	pop    edx
c000026a:	5e                   	pop    esi
c000026b:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c0000272:	81 fa 01 00 00 00    	cmp    edx,0x1
c0000278:	74 39                	je     c00002b3 <commonThreadSwitch.cameOffAFork>
c000027a:	5d                   	pop    ebp
c000027b:	5f                   	pop    edi
c000027c:	5e                   	pop    esi
c000027d:	59                   	pop    ecx
c000027e:	59                   	pop    ecx
c000027f:	5b                   	pop    ebx
c0000280:	58                   	pop    eax
c0000281:	81 c4 04 00 00 00    	add    esp,0x4
c0000287:	6a 02                	push   0x2
c0000289:	9d                   	popf   
c000028a:	52                   	push   edx
c000028b:	e8 bb 77 01 00       	call   c0017a4b <taskStartupFunction>
c0000290:	5a                   	pop    edx
c0000291:	50                   	push   eax
c0000292:	ff d2                	call   edx
c0000294:	e8 61 7d 01 00       	call   c0017ffa <taskReturned>
c0000299:	e9 fb ff ff ff       	jmp    c0000299 <commonThreadSwitch.doneVAS+0x4d>

c000029e <commonThreadSwitch.notFirstTime>:
c000029e:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a1:	56                   	push   esi
c00002a2:	52                   	push   edx
c00002a3:	e8 90 73 01 00       	call   c0017638 <changeTSS>
c00002a8:	5a                   	pop    edx
c00002a9:	5e                   	pop    esi
c00002aa:	5d                   	pop    ebp
c00002ab:	5f                   	pop    edi
c00002ac:	5e                   	pop    esi
c00002ad:	5a                   	pop    edx
c00002ae:	59                   	pop    ecx
c00002af:	5b                   	pop    ebx
c00002b0:	58                   	pop    eax
c00002b1:	9d                   	popf   
c00002b2:	c3                   	ret    

c00002b3 <commonThreadSwitch.cameOffAFork>:
c00002b3:	31 c0                	xor    eax,eax
c00002b5:	31 d2                	xor    edx,edx
c00002b7:	8b 66 1c             	mov    esp,DWORD PTR [esi+0x1c]
c00002ba:	e9 a2 02 00 00       	jmp    c0000561 <offAForkJumpThingy>

c00002bf <detectCPUID>:
c00002bf:	9c                   	pushf  
c00002c0:	9c                   	pushf  
c00002c1:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002c8:	9d                   	popf   
c00002c9:	9c                   	pushf  
c00002ca:	58                   	pop    eax
c00002cb:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002ce:	9d                   	popf   
c00002cf:	25 00 00 20 00       	and    eax,0x200000
c00002d4:	c3                   	ret    

c00002d5 <asmQuickAcquireLock>:
c00002d5:	55                   	push   ebp
c00002d6:	89 e5                	mov    ebp,esp
c00002d8:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00002db <asmQuickAcquireLock.retry>:
c00002db:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00002e0:	72 02                	jb     c00002e4 <asmQuickAcquireLock.spin_with_pause>
c00002e2:	fa                   	cli    
c00002e3:	c3                   	ret    

c00002e4 <asmQuickAcquireLock.spin_with_pause>:
c00002e4:	f3 90                	pause  
c00002e6:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c00002ec:	75 f6                	jne    c00002e4 <asmQuickAcquireLock.spin_with_pause>
c00002ee:	e9 e8 ff ff ff       	jmp    c00002db <asmQuickAcquireLock.retry>

c00002f3 <asmQuickReleaseLock>:
c00002f3:	55                   	push   ebp
c00002f4:	89 e5                	mov    ebp,esp
c00002f6:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c00002fd:	5d                   	pop    ebp
c00002fe:	c3                   	ret    

c00002ff <asmAcquireLock>:
c00002ff:	55                   	push   ebp
c0000300:	89 e5                	mov    ebp,esp
c0000302:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000305 <asmAcquireLock.retry>:
c0000305:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000030a:	72 05                	jb     c0000311 <asmAcquireLock.spin_with_pause>
c000030c:	9c                   	pushf  
c000030d:	58                   	pop    eax
c000030e:	fa                   	cli    
c000030f:	5d                   	pop    ebp
c0000310:	c3                   	ret    

c0000311 <asmAcquireLock.spin_with_pause>:
c0000311:	f3 90                	pause  
c0000313:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000319:	75 f6                	jne    c0000311 <asmAcquireLock.spin_with_pause>
c000031b:	e9 e5 ff ff ff       	jmp    c0000305 <asmAcquireLock.retry>

c0000320 <asmReleaseLock>:
c0000320:	55                   	push   ebp
c0000321:	89 e5                	mov    ebp,esp
c0000323:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000326:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000329:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000032f:	52                   	push   edx
c0000330:	9d                   	popf   
c0000331:	5d                   	pop    ebp
c0000332:	c3                   	ret    

c0000333 <loadGDT>:
c0000333:	0f 01 15 10 34 02 c0 	lgdtd  ds:0xc0023410
c000033a:	66 b8 10 00          	mov    ax,0x10
c000033e:	66 8e d8             	mov    ds,ax
c0000341:	66 8e c0             	mov    es,ax
c0000344:	66 8e e0             	mov    fs,ax
c0000347:	66 8e e8             	mov    gs,ax
c000034a:	66 8e d0             	mov    ss,ax
c000034d:	e9 00 00 00 00       	jmp    c0000352 <flush2>

c0000352 <flush2>:
c0000352:	c3                   	ret    

c0000353 <isr0>:
c0000353:	fa                   	cli    
c0000354:	68 00 00 00 00       	push   0x0
c0000359:	68 00 00 00 00       	push   0x0
c000035e:	e9 a2 01 00 00       	jmp    c0000505 <int_common_stub>

c0000363 <isr1>:
c0000363:	fa                   	cli    
c0000364:	6a 00                	push   0x0
c0000366:	6a 01                	push   0x1
c0000368:	e9 98 01 00 00       	jmp    c0000505 <int_common_stub>

c000036d <isr2>:
c000036d:	fa                   	cli    
c000036e:	6a 00                	push   0x0
c0000370:	6a 02                	push   0x2
c0000372:	e9 8e 01 00 00       	jmp    c0000505 <int_common_stub>

c0000377 <isr3>:
c0000377:	fa                   	cli    
c0000378:	6a 00                	push   0x0
c000037a:	6a 03                	push   0x3
c000037c:	e9 84 01 00 00       	jmp    c0000505 <int_common_stub>

c0000381 <isr4>:
c0000381:	fa                   	cli    
c0000382:	6a 00                	push   0x0
c0000384:	6a 04                	push   0x4
c0000386:	e9 7a 01 00 00       	jmp    c0000505 <int_common_stub>

c000038b <isr5>:
c000038b:	fa                   	cli    
c000038c:	6a 00                	push   0x0
c000038e:	6a 05                	push   0x5
c0000390:	e9 70 01 00 00       	jmp    c0000505 <int_common_stub>

c0000395 <isr6>:
c0000395:	fa                   	cli    
c0000396:	6a 00                	push   0x0
c0000398:	6a 06                	push   0x6
c000039a:	e9 66 01 00 00       	jmp    c0000505 <int_common_stub>

c000039f <isr7>:
c000039f:	fa                   	cli    
c00003a0:	6a 00                	push   0x0
c00003a2:	6a 07                	push   0x7
c00003a4:	e9 5c 01 00 00       	jmp    c0000505 <int_common_stub>

c00003a9 <isr8>:
c00003a9:	fa                   	cli    
c00003aa:	6a 08                	push   0x8
c00003ac:	e9 54 01 00 00       	jmp    c0000505 <int_common_stub>

c00003b1 <isr9>:
c00003b1:	fa                   	cli    
c00003b2:	6a 00                	push   0x0
c00003b4:	6a 09                	push   0x9
c00003b6:	e9 4a 01 00 00       	jmp    c0000505 <int_common_stub>

c00003bb <isr10>:
c00003bb:	fa                   	cli    
c00003bc:	6a 0a                	push   0xa
c00003be:	e9 42 01 00 00       	jmp    c0000505 <int_common_stub>

c00003c3 <isr11>:
c00003c3:	fa                   	cli    
c00003c4:	6a 0b                	push   0xb
c00003c6:	e9 3a 01 00 00       	jmp    c0000505 <int_common_stub>

c00003cb <isr12>:
c00003cb:	fa                   	cli    
c00003cc:	6a 0c                	push   0xc
c00003ce:	e9 32 01 00 00       	jmp    c0000505 <int_common_stub>

c00003d3 <isr13>:
c00003d3:	fa                   	cli    
c00003d4:	6a 0d                	push   0xd
c00003d6:	e9 2a 01 00 00       	jmp    c0000505 <int_common_stub>

c00003db <isr14>:
c00003db:	fa                   	cli    
c00003dc:	6a 0e                	push   0xe
c00003de:	e9 22 01 00 00       	jmp    c0000505 <int_common_stub>

c00003e3 <isr15>:
c00003e3:	fa                   	cli    
c00003e4:	6a 00                	push   0x0
c00003e6:	6a 0f                	push   0xf
c00003e8:	e9 18 01 00 00       	jmp    c0000505 <int_common_stub>

c00003ed <isr16>:
c00003ed:	fa                   	cli    
c00003ee:	6a 00                	push   0x0
c00003f0:	6a 10                	push   0x10
c00003f2:	e9 0e 01 00 00       	jmp    c0000505 <int_common_stub>

c00003f7 <isr17>:
c00003f7:	fa                   	cli    
c00003f8:	6a 00                	push   0x0
c00003fa:	6a 11                	push   0x11
c00003fc:	e9 04 01 00 00       	jmp    c0000505 <int_common_stub>

c0000401 <isr18>:
c0000401:	fa                   	cli    
c0000402:	6a 00                	push   0x0
c0000404:	6a 12                	push   0x12
c0000406:	e9 fa 00 00 00       	jmp    c0000505 <int_common_stub>

c000040b <isr96>:
c000040b:	fa                   	cli    
c000040c:	6a 00                	push   0x0
c000040e:	6a 60                	push   0x60
c0000410:	e9 20 01 00 00       	jmp    c0000535 <syscall_common_stub>

c0000415 <irq0>:
c0000415:	fa                   	cli    
c0000416:	6a 00                	push   0x0
c0000418:	6a 20                	push   0x20
c000041a:	e9 e6 00 00 00       	jmp    c0000505 <int_common_stub>

c000041f <irq1>:
c000041f:	fa                   	cli    
c0000420:	6a 00                	push   0x0
c0000422:	6a 21                	push   0x21
c0000424:	e9 dc 00 00 00       	jmp    c0000505 <int_common_stub>

c0000429 <irq2>:
c0000429:	fa                   	cli    
c000042a:	6a 00                	push   0x0
c000042c:	6a 22                	push   0x22
c000042e:	e9 d2 00 00 00       	jmp    c0000505 <int_common_stub>

c0000433 <irq3>:
c0000433:	fa                   	cli    
c0000434:	6a 00                	push   0x0
c0000436:	6a 23                	push   0x23
c0000438:	e9 c8 00 00 00       	jmp    c0000505 <int_common_stub>

c000043d <irq4>:
c000043d:	fa                   	cli    
c000043e:	6a 00                	push   0x0
c0000440:	6a 24                	push   0x24
c0000442:	e9 be 00 00 00       	jmp    c0000505 <int_common_stub>

c0000447 <irq5>:
c0000447:	fa                   	cli    
c0000448:	6a 00                	push   0x0
c000044a:	6a 25                	push   0x25
c000044c:	e9 b4 00 00 00       	jmp    c0000505 <int_common_stub>

c0000451 <irq6>:
c0000451:	fa                   	cli    
c0000452:	6a 00                	push   0x0
c0000454:	6a 26                	push   0x26
c0000456:	e9 aa 00 00 00       	jmp    c0000505 <int_common_stub>

c000045b <irq7>:
c000045b:	fa                   	cli    
c000045c:	6a 00                	push   0x0
c000045e:	6a 27                	push   0x27
c0000460:	e9 a0 00 00 00       	jmp    c0000505 <int_common_stub>

c0000465 <irq8>:
c0000465:	fa                   	cli    
c0000466:	6a 00                	push   0x0
c0000468:	6a 28                	push   0x28
c000046a:	e9 96 00 00 00       	jmp    c0000505 <int_common_stub>

c000046f <irq9>:
c000046f:	fa                   	cli    
c0000470:	6a 00                	push   0x0
c0000472:	6a 29                	push   0x29
c0000474:	e9 8c 00 00 00       	jmp    c0000505 <int_common_stub>

c0000479 <irq10>:
c0000479:	fa                   	cli    
c000047a:	6a 00                	push   0x0
c000047c:	6a 2a                	push   0x2a
c000047e:	e9 82 00 00 00       	jmp    c0000505 <int_common_stub>

c0000483 <irq11>:
c0000483:	fa                   	cli    
c0000484:	6a 00                	push   0x0
c0000486:	6a 2b                	push   0x2b
c0000488:	e9 78 00 00 00       	jmp    c0000505 <int_common_stub>

c000048d <irq12>:
c000048d:	fa                   	cli    
c000048e:	6a 00                	push   0x0
c0000490:	6a 2c                	push   0x2c
c0000492:	e9 6e 00 00 00       	jmp    c0000505 <int_common_stub>

c0000497 <irq13>:
c0000497:	fa                   	cli    
c0000498:	6a 00                	push   0x0
c000049a:	6a 2d                	push   0x2d
c000049c:	e9 64 00 00 00       	jmp    c0000505 <int_common_stub>

c00004a1 <irq14>:
c00004a1:	fa                   	cli    
c00004a2:	6a 00                	push   0x0
c00004a4:	6a 2e                	push   0x2e
c00004a6:	e9 5a 00 00 00       	jmp    c0000505 <int_common_stub>

c00004ab <irq15>:
c00004ab:	fa                   	cli    
c00004ac:	6a 00                	push   0x0
c00004ae:	6a 2f                	push   0x2f
c00004b0:	e9 50 00 00 00       	jmp    c0000505 <int_common_stub>

c00004b5 <irq16>:
c00004b5:	fa                   	cli    
c00004b6:	6a 00                	push   0x0
c00004b8:	6a 30                	push   0x30
c00004ba:	e9 46 00 00 00       	jmp    c0000505 <int_common_stub>

c00004bf <irq17>:
c00004bf:	fa                   	cli    
c00004c0:	6a 00                	push   0x0
c00004c2:	6a 31                	push   0x31
c00004c4:	e9 3c 00 00 00       	jmp    c0000505 <int_common_stub>

c00004c9 <irq18>:
c00004c9:	fa                   	cli    
c00004ca:	6a 00                	push   0x0
c00004cc:	6a 32                	push   0x32
c00004ce:	e9 32 00 00 00       	jmp    c0000505 <int_common_stub>

c00004d3 <irq19>:
c00004d3:	fa                   	cli    
c00004d4:	6a 00                	push   0x0
c00004d6:	6a 33                	push   0x33
c00004d8:	e9 28 00 00 00       	jmp    c0000505 <int_common_stub>

c00004dd <irq20>:
c00004dd:	fa                   	cli    
c00004de:	6a 00                	push   0x0
c00004e0:	6a 34                	push   0x34
c00004e2:	e9 1e 00 00 00       	jmp    c0000505 <int_common_stub>

c00004e7 <irq21>:
c00004e7:	fa                   	cli    
c00004e8:	6a 00                	push   0x0
c00004ea:	6a 35                	push   0x35
c00004ec:	e9 14 00 00 00       	jmp    c0000505 <int_common_stub>

c00004f1 <irq22>:
c00004f1:	fa                   	cli    
c00004f2:	6a 00                	push   0x0
c00004f4:	6a 36                	push   0x36
c00004f6:	e9 0a 00 00 00       	jmp    c0000505 <int_common_stub>

c00004fb <irq23>:
c00004fb:	fa                   	cli    
c00004fc:	6a 00                	push   0x0
c00004fe:	6a 37                	push   0x37
c0000500:	e9 00 00 00 00       	jmp    c0000505 <int_common_stub>

c0000505 <int_common_stub>:
c0000505:	60                   	pusha  
c0000506:	1e                   	push   ds
c0000507:	06                   	push   es
c0000508:	0f a0                	push   fs
c000050a:	0f a8                	push   gs
c000050c:	66 b8 10 00          	mov    ax,0x10
c0000510:	66 8e d8             	mov    ds,ax
c0000513:	66 8e c0             	mov    es,ax
c0000516:	66 8e e0             	mov    fs,ax
c0000519:	66 8e e8             	mov    gs,ax
c000051c:	89 e1                	mov    ecx,esp
c000051e:	51                   	push   ecx
c000051f:	b9 fd 09 01 c0       	mov    ecx,0xc00109fd
c0000524:	ff d1                	call   ecx
c0000526:	59                   	pop    ecx
c0000527:	0f a9                	pop    gs
c0000529:	0f a1                	pop    fs
c000052b:	07                   	pop    es
c000052c:	1f                   	pop    ds
c000052d:	61                   	popa   
c000052e:	81 c4 08 00 00 00    	add    esp,0x8
c0000534:	cf                   	iret   

c0000535 <syscall_common_stub>:
c0000535:	60                   	pusha  
c0000536:	1e                   	push   ds
c0000537:	06                   	push   es
c0000538:	0f a0                	push   fs
c000053a:	0f a8                	push   gs
c000053c:	66 b8 10 00          	mov    ax,0x10
c0000540:	66 8e d8             	mov    ds,ax
c0000543:	66 8e c0             	mov    es,ax
c0000546:	66 8e e0             	mov    fs,ax
c0000549:	66 8e e8             	mov    gs,ax
c000054c:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0000552:	89 61 1c             	mov    DWORD PTR [ecx+0x1c],esp
c0000555:	89 e1                	mov    ecx,esp
c0000557:	51                   	push   ecx
c0000558:	fb                   	sti    
c0000559:	b9 fd 09 01 c0       	mov    ecx,0xc00109fd
c000055e:	ff d1                	call   ecx
c0000560:	59                   	pop    ecx

c0000561 <offAForkJumpThingy>:
c0000561:	0f a9                	pop    gs
c0000563:	0f a1                	pop    fs
c0000565:	07                   	pop    es
c0000566:	1f                   	pop    ds
c0000567:	61                   	popa   
c0000568:	81 c4 08 00 00 00    	add    esp,0x8
c000056e:	cf                   	iret   

c000056f <memcmp>:
c000056f:	56                   	push   esi
c0000570:	53                   	push   ebx
c0000571:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000575:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000579:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000057d:	01 d6                	add    esi,edx
c000057f:	39 f2                	cmp    edx,esi
c0000581:	74 0e                	je     c0000591 <memcmp+0x22>
c0000583:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0000586:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000589:	38 c8                	cmp    al,cl
c000058b:	75 08                	jne    c0000595 <memcmp+0x26>
c000058d:	42                   	inc    edx
c000058e:	43                   	inc    ebx
c000058f:	eb ee                	jmp    c000057f <memcmp+0x10>
c0000591:	31 c0                	xor    eax,eax
c0000593:	eb 02                	jmp    c0000597 <memcmp+0x28>
c0000595:	29 c8                	sub    eax,ecx
c0000597:	5b                   	pop    ebx
c0000598:	5e                   	pop    esi
c0000599:	c3                   	ret    

c000059a <memmove>:
c000059a:	56                   	push   esi
c000059b:	53                   	push   ebx
c000059c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00005a0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00005a4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00005a8:	39 c8                	cmp    eax,ecx
c00005aa:	73 12                	jae    c00005be <memmove+0x24>
c00005ac:	8d 34 0a             	lea    esi,[edx+ecx*1]
c00005af:	89 c3                	mov    ebx,eax
c00005b1:	39 f1                	cmp    ecx,esi
c00005b3:	74 1a                	je     c00005cf <memmove+0x35>
c00005b5:	8a 11                	mov    dl,BYTE PTR [ecx]
c00005b7:	43                   	inc    ebx
c00005b8:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c00005bb:	41                   	inc    ecx
c00005bc:	eb f3                	jmp    c00005b1 <memmove+0x17>
c00005be:	76 0f                	jbe    c00005cf <memmove+0x35>
c00005c0:	85 d2                	test   edx,edx
c00005c2:	74 0b                	je     c00005cf <memmove+0x35>
c00005c4:	8a 5c 11 ff          	mov    bl,BYTE PTR [ecx+edx*1-0x1]
c00005c8:	88 5c 10 ff          	mov    BYTE PTR [eax+edx*1-0x1],bl
c00005cc:	4a                   	dec    edx
c00005cd:	eb f1                	jmp    c00005c0 <memmove+0x26>
c00005cf:	5b                   	pop    ebx
c00005d0:	5e                   	pop    esi
c00005d1:	c3                   	ret    

c00005d2 <memcpy>:
c00005d2:	57                   	push   edi
c00005d3:	56                   	push   esi
c00005d4:	53                   	push   ebx
c00005d5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00005d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005dd:	89 da                	mov    edx,ebx
c00005df:	89 d9                	mov    ecx,ebx
c00005e1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00005e5:	83 e2 fc             	and    edx,0xfffffffc
c00005e8:	c1 e9 02             	shr    ecx,0x2
c00005eb:	89 c7                	mov    edi,eax
c00005ed:	fc                   	cld    
c00005ee:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00005f0:	8d 0c 16             	lea    ecx,[esi+edx*1]
c00005f3:	01 c2                	add    edx,eax
c00005f5:	01 de                	add    esi,ebx
c00005f7:	39 f1                	cmp    ecx,esi
c00005f9:	74 09                	je     c0000604 <memcpy+0x32>
c00005fb:	8a 19                	mov    bl,BYTE PTR [ecx]
c00005fd:	42                   	inc    edx
c00005fe:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000601:	41                   	inc    ecx
c0000602:	eb f3                	jmp    c00005f7 <memcpy+0x25>
c0000604:	5b                   	pop    ebx
c0000605:	5e                   	pop    esi
c0000606:	5f                   	pop    edi
c0000607:	c3                   	ret    

c0000608 <memset>:
c0000608:	53                   	push   ebx
c0000609:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000060d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000611:	89 c2                	mov    edx,eax
c0000613:	01 c1                	add    ecx,eax
c0000615:	39 ca                	cmp    edx,ecx
c0000617:	74 0a                	je     c0000623 <memset+0x1b>
c0000619:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c000061d:	42                   	inc    edx
c000061e:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000621:	eb f2                	jmp    c0000615 <memset+0xd>
c0000623:	5b                   	pop    ebx
c0000624:	c3                   	ret    

c0000625 <strlen>:
c0000625:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000629:	31 c0                	xor    eax,eax
c000062b:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c000062f:	74 03                	je     c0000634 <strlen+0xf>
c0000631:	40                   	inc    eax
c0000632:	eb f7                	jmp    c000062b <strlen+0x6>
c0000634:	c3                   	ret    

c0000635 <strpbrk>:
c0000635:	53                   	push   ebx
c0000636:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000063a:	8a 08                	mov    cl,BYTE PTR [eax]
c000063c:	84 c9                	test   cl,cl
c000063e:	74 14                	je     c0000654 <strpbrk+0x1f>
c0000640:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000644:	8a 1a                	mov    bl,BYTE PTR [edx]
c0000646:	84 db                	test   bl,bl
c0000648:	74 07                	je     c0000651 <strpbrk+0x1c>
c000064a:	38 cb                	cmp    bl,cl
c000064c:	74 08                	je     c0000656 <strpbrk+0x21>
c000064e:	42                   	inc    edx
c000064f:	eb f3                	jmp    c0000644 <strpbrk+0xf>
c0000651:	40                   	inc    eax
c0000652:	eb e6                	jmp    c000063a <strpbrk+0x5>
c0000654:	31 c0                	xor    eax,eax
c0000656:	5b                   	pop    ebx
c0000657:	c3                   	ret    

c0000658 <strtok>:
c0000658:	56                   	push   esi
c0000659:	53                   	push   ebx
c000065a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000065e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000662:	85 db                	test   ebx,ebx
c0000664:	75 0e                	jne    c0000674 <strtok+0x1c>
c0000666:	8b 1d ec 2f 02 c0    	mov    ebx,DWORD PTR ds:0xc0022fec
c000066c:	85 db                	test   ebx,ebx
c000066e:	75 04                	jne    c0000674 <strtok+0x1c>
c0000670:	31 db                	xor    ebx,ebx
c0000672:	eb 2e                	jmp    c00006a2 <strtok+0x4a>
c0000674:	56                   	push   esi
c0000675:	53                   	push   ebx
c0000676:	e8 ba ff ff ff       	call   c0000635 <strpbrk>
c000067b:	5a                   	pop    edx
c000067c:	a3 ec 2f 02 c0       	mov    ds:0xc0022fec,eax
c0000681:	59                   	pop    ecx
c0000682:	a1 ec 2f 02 c0       	mov    eax,ds:0xc0022fec
c0000687:	39 d8                	cmp    eax,ebx
c0000689:	75 07                	jne    c0000692 <strtok+0x3a>
c000068b:	43                   	inc    ebx
c000068c:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000690:	eb e2                	jmp    c0000674 <strtok+0x1c>
c0000692:	85 c0                	test   eax,eax
c0000694:	74 da                	je     c0000670 <strtok+0x18>
c0000696:	8d 50 01             	lea    edx,[eax+0x1]
c0000699:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000069c:	89 15 ec 2f 02 c0    	mov    DWORD PTR ds:0xc0022fec,edx
c00006a2:	89 d8                	mov    eax,ebx
c00006a4:	5b                   	pop    ebx
c00006a5:	5e                   	pop    esi
c00006a6:	c3                   	ret    

c00006a7 <strcpy>:
c00006a7:	53                   	push   ebx
c00006a8:	31 d2                	xor    edx,edx
c00006aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00006ae:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00006b2:	8d 1c 10             	lea    ebx,[eax+edx*1]
c00006b5:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c00006b8:	84 c9                	test   cl,cl
c00006ba:	74 06                	je     c00006c2 <strcpy+0x1b>
c00006bc:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c00006bf:	42                   	inc    edx
c00006c0:	eb ec                	jmp    c00006ae <strcpy+0x7>
c00006c2:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00006c5:	5b                   	pop    ebx
c00006c6:	c3                   	ret    

c00006c7 <strncpy>:
c00006c7:	56                   	push   esi
c00006c8:	53                   	push   ebx
c00006c9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00006cd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00006d1:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00006d5:	89 c3                	mov    ebx,eax
c00006d7:	85 c9                	test   ecx,ecx
c00006d9:	74 1a                	je     c00006f5 <strncpy+0x2e>
c00006db:	46                   	inc    esi
c00006dc:	43                   	inc    ebx
c00006dd:	8a 56 ff             	mov    dl,BYTE PTR [esi-0x1]
c00006e0:	49                   	dec    ecx
c00006e1:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c00006e4:	84 d2                	test   dl,dl
c00006e6:	75 ef                	jne    c00006d7 <strncpy+0x10>
c00006e8:	31 d2                	xor    edx,edx
c00006ea:	39 d1                	cmp    ecx,edx
c00006ec:	74 07                	je     c00006f5 <strncpy+0x2e>
c00006ee:	c6 04 13 00          	mov    BYTE PTR [ebx+edx*1],0x0
c00006f2:	42                   	inc    edx
c00006f3:	eb f5                	jmp    c00006ea <strncpy+0x23>
c00006f5:	5b                   	pop    ebx
c00006f6:	5e                   	pop    esi
c00006f7:	c3                   	ret    

c00006f8 <strcmp>:
c00006f8:	31 c9                	xor    ecx,ecx
c00006fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00006fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0000702:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c0000706:	0f b6 14 0a          	movzx  edx,BYTE PTR [edx+ecx*1]
c000070a:	38 d0                	cmp    al,dl
c000070c:	75 08                	jne    c0000716 <strcmp+0x1e>
c000070e:	41                   	inc    ecx
c000070f:	84 c0                	test   al,al
c0000711:	75 e7                	jne    c00006fa <strcmp+0x2>
c0000713:	31 c0                	xor    eax,eax
c0000715:	c3                   	ret    
c0000716:	29 d0                	sub    eax,edx
c0000718:	c3                   	ret    

c0000719 <strchr>:
c0000719:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000071d:	8a 10                	mov    dl,BYTE PTR [eax]
c000071f:	84 d2                	test   dl,dl
c0000721:	74 09                	je     c000072c <strchr+0x13>
c0000723:	3a 54 24 08          	cmp    dl,BYTE PTR [esp+0x8]
c0000727:	74 05                	je     c000072e <strchr+0x15>
c0000729:	40                   	inc    eax
c000072a:	eb f1                	jmp    c000071d <strchr+0x4>
c000072c:	31 c0                	xor    eax,eax
c000072e:	c3                   	ret    

c000072f <strncmp>:
c000072f:	56                   	push   esi
c0000730:	53                   	push   ebx
c0000731:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000735:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000739:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000073d:	01 d6                	add    esi,edx
c000073f:	39 f2                	cmp    edx,esi
c0000741:	74 12                	je     c0000755 <strncmp+0x26>
c0000743:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0000746:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000749:	38 c8                	cmp    al,cl
c000074b:	75 0c                	jne    c0000759 <strncmp+0x2a>
c000074d:	42                   	inc    edx
c000074e:	84 c0                	test   al,al
c0000750:	74 03                	je     c0000755 <strncmp+0x26>
c0000752:	43                   	inc    ebx
c0000753:	eb ea                	jmp    c000073f <strncmp+0x10>
c0000755:	31 c0                	xor    eax,eax
c0000757:	eb 02                	jmp    c000075b <strncmp+0x2c>
c0000759:	29 c8                	sub    eax,ecx
c000075b:	5b                   	pop    ebx
c000075c:	5e                   	pop    esi
c000075d:	c3                   	ret    

c000075e <strcat>:
c000075e:	53                   	push   ebx
c000075f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000763:	89 c1                	mov    ecx,eax
c0000765:	8d 51 01             	lea    edx,[ecx+0x1]
c0000768:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c000076c:	74 04                	je     c0000772 <strcat+0x14>
c000076e:	89 d1                	mov    ecx,edx
c0000770:	eb f3                	jmp    c0000765 <strcat+0x7>
c0000772:	31 d2                	xor    edx,edx
c0000774:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0000778:	8a 1c 13             	mov    bl,BYTE PTR [ebx+edx*1]
c000077b:	88 1c 11             	mov    BYTE PTR [ecx+edx*1],bl
c000077e:	42                   	inc    edx
c000077f:	84 db                	test   bl,bl
c0000781:	75 f1                	jne    c0000774 <strcat+0x16>
c0000783:	5b                   	pop    ebx
c0000784:	c3                   	ret    

c0000785 <strncat>:
c0000785:	56                   	push   esi
c0000786:	53                   	push   ebx
c0000787:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000078b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000078f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000793:	89 c2                	mov    edx,eax
c0000795:	85 db                	test   ebx,ebx
c0000797:	74 23                	je     c00007bc <strncat+0x37>
c0000799:	8d 72 01             	lea    esi,[edx+0x1]
c000079c:	80 7e ff 00          	cmp    BYTE PTR [esi-0x1],0x0
c00007a0:	74 04                	je     c00007a6 <strncat+0x21>
c00007a2:	89 f2                	mov    edx,esi
c00007a4:	eb f3                	jmp    c0000799 <strncat+0x14>
c00007a6:	8d 34 19             	lea    esi,[ecx+ebx*1]
c00007a9:	41                   	inc    ecx
c00007aa:	42                   	inc    edx
c00007ab:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00007ae:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00007b1:	84 db                	test   bl,bl
c00007b3:	74 07                	je     c00007bc <strncat+0x37>
c00007b5:	39 f1                	cmp    ecx,esi
c00007b7:	75 f0                	jne    c00007a9 <strncat+0x24>
c00007b9:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00007bc:	5b                   	pop    ebx
c00007bd:	5e                   	pop    esi
c00007be:	c3                   	ret    

c00007bf <strstr>:
c00007bf:	57                   	push   edi
c00007c0:	56                   	push   esi
c00007c1:	53                   	push   ebx
c00007c2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00007c6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007ca:	57                   	push   edi
c00007cb:	e8 55 fe ff ff       	call   c0000625 <strlen>
c00007d0:	59                   	pop    ecx
c00007d1:	89 c6                	mov    esi,eax
c00007d3:	85 c0                	test   eax,eax
c00007d5:	74 1f                	je     c00007f6 <strstr+0x37>
c00007d7:	53                   	push   ebx
c00007d8:	e8 48 fe ff ff       	call   c0000625 <strlen>
c00007dd:	5a                   	pop    edx
c00007de:	39 f0                	cmp    eax,esi
c00007e0:	72 12                	jb     c00007f4 <strstr+0x35>
c00007e2:	56                   	push   esi
c00007e3:	57                   	push   edi
c00007e4:	53                   	push   ebx
c00007e5:	e8 85 fd ff ff       	call   c000056f <memcmp>
c00007ea:	83 c4 0c             	add    esp,0xc
c00007ed:	85 c0                	test   eax,eax
c00007ef:	74 05                	je     c00007f6 <strstr+0x37>
c00007f1:	43                   	inc    ebx
c00007f2:	eb e3                	jmp    c00007d7 <strstr+0x18>
c00007f4:	31 db                	xor    ebx,ebx
c00007f6:	89 d8                	mov    eax,ebx
c00007f8:	5b                   	pop    ebx
c00007f9:	5e                   	pop    esi
c00007fa:	5f                   	pop    edi
c00007fb:	c3                   	ret    

c00007fc <toupper>:
c00007fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000800:	0f b6 d0             	movzx  edx,al
c0000803:	f6 82 c0 f1 01 c0 02 	test   BYTE PTR [edx-0x3ffe0e40],0x2
c000080a:	74 03                	je     c000080f <toupper+0x13>
c000080c:	83 e8 20             	sub    eax,0x20
c000080f:	c3                   	ret    

c0000810 <tolower>:
c0000810:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000814:	0f b6 d0             	movzx  edx,al
c0000817:	f6 82 c0 f1 01 c0 01 	test   BYTE PTR [edx-0x3ffe0e40],0x1
c000081e:	74 03                	je     c0000823 <tolower+0x13>
c0000820:	83 c0 20             	add    eax,0x20
c0000823:	c3                   	ret    

c0000824 <simple_strtoul>:
c0000824:	55                   	push   ebp
c0000825:	57                   	push   edi
c0000826:	56                   	push   esi
c0000827:	53                   	push   ebx
c0000828:	83 ec 08             	sub    esp,0x8
c000082b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000082f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000833:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000836:	f6 82 c0 f1 01 c0 08 	test   BYTE PTR [edx-0x3ffe0e40],0x8
c000083d:	74 03                	je     c0000842 <simple_strtoul+0x1e>
c000083f:	41                   	inc    ecx
c0000840:	eb f1                	jmp    c0000833 <simple_strtoul+0xf>
c0000842:	80 fa 09             	cmp    dl,0x9
c0000845:	74 f8                	je     c000083f <simple_strtoul+0x1b>
c0000847:	80 fa 2d             	cmp    dl,0x2d
c000084a:	75 0b                	jne    c0000857 <simple_strtoul+0x33>
c000084c:	41                   	inc    ecx
c000084d:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000855:	eb 0e                	jmp    c0000865 <simple_strtoul+0x41>
c0000857:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000085f:	80 fa 2b             	cmp    dl,0x2b
c0000862:	75 01                	jne    c0000865 <simple_strtoul+0x41>
c0000864:	41                   	inc    ecx
c0000865:	85 f6                	test   esi,esi
c0000867:	75 22                	jne    c000088b <simple_strtoul+0x67>
c0000869:	be 0a 00 00 00       	mov    esi,0xa
c000086e:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c0000871:	75 5a                	jne    c00008cd <simple_strtoul+0xa9>
c0000873:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000877:	50                   	push   eax
c0000878:	e8 93 ff ff ff       	call   c0000810 <tolower>
c000087d:	5a                   	pop    edx
c000087e:	83 f8 78             	cmp    eax,0x78
c0000881:	74 03                	je     c0000886 <simple_strtoul+0x62>
c0000883:	41                   	inc    ecx
c0000884:	eb 16                	jmp    c000089c <simple_strtoul+0x78>
c0000886:	83 c1 02             	add    ecx,0x2
c0000889:	eb 22                	jmp    c00008ad <simple_strtoul+0x89>
c000088b:	8d 46 fe             	lea    eax,[esi-0x2]
c000088e:	83 f8 22             	cmp    eax,0x22
c0000891:	0f 87 b7 00 00 00    	ja     c000094e <simple_strtoul+0x12a>
c0000897:	83 fe 08             	cmp    esi,0x8
c000089a:	75 0c                	jne    c00008a8 <simple_strtoul+0x84>
c000089c:	be 08 00 00 00       	mov    esi,0x8
c00008a1:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c00008a4:	75 27                	jne    c00008cd <simple_strtoul+0xa9>
c00008a6:	eb 1f                	jmp    c00008c7 <simple_strtoul+0xa3>
c00008a8:	83 fe 10             	cmp    esi,0x10
c00008ab:	75 20                	jne    c00008cd <simple_strtoul+0xa9>
c00008ad:	be 10 00 00 00       	mov    esi,0x10
c00008b2:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c00008b5:	75 16                	jne    c00008cd <simple_strtoul+0xa9>
c00008b7:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c00008bb:	50                   	push   eax
c00008bc:	e8 4f ff ff ff       	call   c0000810 <tolower>
c00008c1:	5d                   	pop    ebp
c00008c2:	83 f8 78             	cmp    eax,0x78
c00008c5:	74 03                	je     c00008ca <simple_strtoul+0xa6>
c00008c7:	41                   	inc    ecx
c00008c8:	eb 03                	jmp    c00008cd <simple_strtoul+0xa9>
c00008ca:	83 c1 02             	add    ecx,0x2
c00008cd:	31 ed                	xor    ebp,ebp
c00008cf:	31 db                	xor    ebx,ebx
c00008d1:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00008d8:	8a 11                	mov    dl,BYTE PTR [ecx]
c00008da:	84 d2                	test   dl,dl
c00008dc:	74 27                	je     c0000905 <simple_strtoul+0xe1>
c00008de:	0f b6 fa             	movzx  edi,dl
c00008e1:	f6 87 c0 f1 01 c0 04 	test   BYTE PTR [edi-0x3ffe0e40],0x4
c00008e8:	74 05                	je     c00008ef <simple_strtoul+0xcb>
c00008ea:	83 ef 30             	sub    edi,0x30
c00008ed:	eb 22                	jmp    c0000911 <simple_strtoul+0xed>
c00008ef:	0f be d2             	movsx  edx,dl
c00008f2:	52                   	push   edx
c00008f3:	e8 04 ff ff ff       	call   c00007fc <toupper>
c00008f8:	5f                   	pop    edi
c00008f9:	0f b6 d0             	movzx  edx,al
c00008fc:	f6 82 c0 f1 01 c0 01 	test   BYTE PTR [edx-0x3ffe0e40],0x1
c0000903:	75 09                	jne    c000090e <simple_strtoul+0xea>
c0000905:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c000090a:	75 2d                	jne    c0000939 <simple_strtoul+0x115>
c000090c:	eb 57                	jmp    c0000965 <simple_strtoul+0x141>
c000090e:	8d 78 c9             	lea    edi,[eax-0x37]
c0000911:	39 f7                	cmp    edi,esi
c0000913:	73 f0                	jae    c0000905 <simple_strtoul+0xe1>
c0000915:	31 d2                	xor    edx,edx
c0000917:	89 f8                	mov    eax,edi
c0000919:	f7 d0                	not    eax
c000091b:	f7 f6                	div    esi
c000091d:	39 d8                	cmp    eax,ebx
c000091f:	72 0e                	jb     c000092f <simple_strtoul+0x10b>
c0000921:	0f af de             	imul   ebx,esi
c0000924:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000092b:	01 fb                	add    ebx,edi
c000092d:	eb 07                	jmp    c0000936 <simple_strtoul+0x112>
c000092f:	bd 01 00 00 00       	mov    ebp,0x1
c0000934:	31 db                	xor    ebx,ebx
c0000936:	41                   	inc    ecx
c0000937:	eb 9f                	jmp    c00008d8 <simple_strtoul+0xb4>
c0000939:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000093c:	09 d8                	or     eax,ebx
c000093e:	75 1f                	jne    c000095f <simple_strtoul+0x13b>
c0000940:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000944:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000948:	31 db                	xor    ebx,ebx
c000094a:	89 38                	mov    DWORD PTR [eax],edi
c000094c:	eb 17                	jmp    c0000965 <simple_strtoul+0x141>
c000094e:	31 db                	xor    ebx,ebx
c0000950:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0000955:	74 14                	je     c000096b <simple_strtoul+0x147>
c0000957:	31 ed                	xor    ebp,ebp
c0000959:	85 c9                	test   ecx,ecx
c000095b:	75 e3                	jne    c0000940 <simple_strtoul+0x11c>
c000095d:	31 db                	xor    ebx,ebx
c000095f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000963:	89 08                	mov    DWORD PTR [eax],ecx
c0000965:	4d                   	dec    ebp
c0000966:	75 03                	jne    c000096b <simple_strtoul+0x147>
c0000968:	83 cb ff             	or     ebx,0xffffffff
c000096b:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000970:	75 02                	jne    c0000974 <simple_strtoul+0x150>
c0000972:	f7 db                	neg    ebx
c0000974:	83 c4 08             	add    esp,0x8
c0000977:	89 d8                	mov    eax,ebx
c0000979:	5b                   	pop    ebx
c000097a:	5e                   	pop    esi
c000097b:	5f                   	pop    edi
c000097c:	5d                   	pop    ebp
c000097d:	c3                   	ret    

c000097e <largebin_index>:
c000097e:	89 c2                	mov    edx,eax
c0000980:	c1 ea 08             	shr    edx,0x8
c0000983:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000989:	77 10                	ja     c000099b <largebin_index+0x1d>
c000098b:	0f bd d2             	bsr    edx,edx
c000098e:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000991:	d3 e8                	shr    eax,cl
c0000993:	83 e0 03             	and    eax,0x3
c0000996:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c000099a:	c3                   	ret    
c000099b:	b8 5f 00 00 00       	mov    eax,0x5f
c00009a0:	c3                   	ret    

c00009a1 <malloc_init_state>:
c00009a1:	53                   	push   ebx
c00009a2:	8d 50 34             	lea    edx,[eax+0x34]
c00009a5:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c00009ab:	89 d1                	mov    ecx,edx
c00009ad:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c00009b0:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c00009b3:	83 c2 08             	add    edx,0x8
c00009b6:	39 da                	cmp    edx,ebx
c00009b8:	75 f3                	jne    c00009ad <malloc_init_state+0xc>
c00009ba:	8b 10                	mov    edx,DWORD PTR [eax]
c00009bc:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c00009c6:	83 e2 03             	and    edx,0x3
c00009c9:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c00009d3:	83 ca 48             	or     edx,0x48
c00009d6:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c00009e0:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c00009ea:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c00009f1:	89 10                	mov    DWORD PTR [eax],edx
c00009f3:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c00009f6:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000a00:	5b                   	pop    ebx
c0000a01:	c3                   	ret    

c0000a02 <malloc_consolidate>:
c0000a02:	8b 10                	mov    edx,DWORD PTR [eax]
c0000a04:	85 d2                	test   edx,edx
c0000a06:	0f 84 d8 00 00 00    	je     c0000ae4 <malloc_consolidate+0xe2>
c0000a0c:	55                   	push   ebp
c0000a0d:	83 e2 fd             	and    edx,0xfffffffd
c0000a10:	57                   	push   edi
c0000a11:	89 c5                	mov    ebp,eax
c0000a13:	56                   	push   esi
c0000a14:	8d 78 34             	lea    edi,[eax+0x34]
c0000a17:	53                   	push   ebx
c0000a18:	83 ec 10             	sub    esp,0x10
c0000a1b:	89 10                	mov    DWORD PTR [eax],edx
c0000a1d:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000a21:	c1 ea 03             	shr    edx,0x3
c0000a24:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000a28:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000a2c:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000a2f:	85 d2                	test   edx,edx
c0000a31:	0f 84 98 00 00 00    	je     c0000acf <malloc_consolidate+0xcd>
c0000a37:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000a3e:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000a41:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000a44:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000a48:	89 f9                	mov    ecx,edi
c0000a4a:	83 e1 fe             	and    ecx,0xfffffffe
c0000a4d:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000a50:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000a53:	83 e3 fc             	and    ebx,0xfffffffc
c0000a56:	83 e7 01             	and    edi,0x1
c0000a59:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000a5c:	75 14                	jne    c0000a72 <malloc_consolidate+0x70>
c0000a5e:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000a60:	29 fa                	sub    edx,edi
c0000a62:	01 f9                	add    ecx,edi
c0000a64:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000a67:	89 fb                	mov    ebx,edi
c0000a69:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000a6c:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000a6f:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000a72:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000a75:	74 40                	je     c0000ab7 <malloc_consolidate+0xb5>
c0000a77:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000a7a:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000a7d:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000a81:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000a84:	83 e7 01             	and    edi,0x1
c0000a87:	75 0e                	jne    c0000a97 <malloc_consolidate+0x95>
c0000a89:	01 d9                	add    ecx,ebx
c0000a8b:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000a8e:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000a91:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000a94:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000a97:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000a9a:	89 ce                	mov    esi,ecx
c0000a9c:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000a9f:	83 ce 01             	or     esi,0x1
c0000aa2:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000aa5:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000aa8:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000aab:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000aaf:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000ab2:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000ab5:	eb 0c                	jmp    c0000ac3 <malloc_consolidate+0xc1>
c0000ab7:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000aba:	83 c9 01             	or     ecx,0x1
c0000abd:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000ac0:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000ac3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000ac7:	85 d2                	test   edx,edx
c0000ac9:	0f 85 6f ff ff ff    	jne    c0000a3e <malloc_consolidate+0x3c>
c0000acf:	83 c5 04             	add    ebp,0x4
c0000ad2:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000ad6:	0f 85 50 ff ff ff    	jne    c0000a2c <malloc_consolidate+0x2a>
c0000adc:	83 c4 10             	add    esp,0x10
c0000adf:	5b                   	pop    ebx
c0000ae0:	5e                   	pop    esi
c0000ae1:	5f                   	pop    edi
c0000ae2:	5d                   	pop    ebp
c0000ae3:	c3                   	ret    
c0000ae4:	e9 b8 fe ff ff       	jmp    c00009a1 <malloc_init_state>

c0000ae9 <dlfree>:
c0000ae9:	57                   	push   edi
c0000aea:	56                   	push   esi
c0000aeb:	53                   	push   ebx
c0000aec:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000af0:	85 db                	test   ebx,ebx
c0000af2:	0f 84 e2 00 00 00    	je     c0000bda <dlfree+0xf1>
c0000af8:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000afb:	8b 0d 00 30 02 c0    	mov    ecx,DWORD PTR ds:0xc0023000
c0000b01:	89 f0                	mov    eax,esi
c0000b03:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000b06:	83 e0 fc             	and    eax,0xfffffffc
c0000b09:	39 c1                	cmp    ecx,eax
c0000b0b:	72 24                	jb     c0000b31 <dlfree+0x48>
c0000b0d:	83 c9 03             	or     ecx,0x3
c0000b10:	c1 e8 03             	shr    eax,0x3
c0000b13:	89 0d 00 30 02 c0    	mov    DWORD PTR ds:0xc0023000,ecx
c0000b19:	83 e8 02             	sub    eax,0x2
c0000b1c:	8b 0c 85 04 30 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdcffc]
c0000b23:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000b25:	89 14 85 04 30 02 c0 	mov    DWORD PTR [eax*4-0x3ffdcffc],edx
c0000b2c:	e9 a9 00 00 00       	jmp    c0000bda <dlfree+0xf1>
c0000b31:	83 e6 02             	and    esi,0x2
c0000b34:	0f 85 a0 00 00 00    	jne    c0000bda <dlfree+0xf1>
c0000b3a:	83 c9 01             	or     ecx,0x1
c0000b3d:	8d 34 02             	lea    esi,[edx+eax*1]
c0000b40:	89 0d 00 30 02 c0    	mov    DWORD PTR ds:0xc0023000,ecx
c0000b46:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000b49:	83 e1 fc             	and    ecx,0xfffffffc
c0000b4c:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000b50:	75 13                	jne    c0000b65 <dlfree+0x7c>
c0000b52:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000b55:	29 da                	sub    edx,ebx
c0000b57:	01 d8                	add    eax,ebx
c0000b59:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000b5c:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000b5f:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000b62:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000b65:	39 35 2c 30 02 c0    	cmp    DWORD PTR ds:0xc002302c,esi
c0000b6b:	74 40                	je     c0000bad <dlfree+0xc4>
c0000b6d:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000b71:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000b74:	80 e3 01             	and    bl,0x1
c0000b77:	75 0e                	jne    c0000b87 <dlfree+0x9e>
c0000b79:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000b7c:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000b7f:	01 c8                	add    eax,ecx
c0000b81:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000b84:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000b87:	8b 0d 3c 30 02 c0    	mov    ecx,DWORD PTR ds:0xc002303c
c0000b8d:	c7 42 0c 34 30 02 c0 	mov    DWORD PTR [edx+0xc],0xc0023034
c0000b94:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000b97:	89 15 3c 30 02 c0    	mov    DWORD PTR ds:0xc002303c,edx
c0000b9d:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000ba0:	89 c1                	mov    ecx,eax
c0000ba2:	83 c9 01             	or     ecx,0x1
c0000ba5:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000ba8:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000bab:	eb 10                	jmp    c0000bbd <dlfree+0xd4>
c0000bad:	01 c8                	add    eax,ecx
c0000baf:	89 c1                	mov    ecx,eax
c0000bb1:	83 c9 01             	or     ecx,0x1
c0000bb4:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000bb7:	89 15 2c 30 02 c0    	mov    DWORD PTR ds:0xc002302c,edx
c0000bbd:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000bc2:	76 16                	jbe    c0000bda <dlfree+0xf1>
c0000bc4:	f6 05 00 30 02 c0 02 	test   BYTE PTR ds:0xc0023000,0x2
c0000bcb:	74 0d                	je     c0000bda <dlfree+0xf1>
c0000bcd:	5b                   	pop    ebx
c0000bce:	b8 00 30 02 c0       	mov    eax,0xc0023000
c0000bd3:	5e                   	pop    esi
c0000bd4:	5f                   	pop    edi
c0000bd5:	e9 28 fe ff ff       	jmp    c0000a02 <malloc_consolidate>
c0000bda:	5b                   	pop    ebx
c0000bdb:	5e                   	pop    esi
c0000bdc:	5f                   	pop    edi
c0000bdd:	c3                   	ret    

c0000bde <sYSMALLOc>:
c0000bde:	55                   	push   ebp
c0000bdf:	57                   	push   edi
c0000be0:	56                   	push   esi
c0000be1:	53                   	push   ebx
c0000be2:	89 d3                	mov    ebx,edx
c0000be4:	83 ec 2c             	sub    esp,0x2c
c0000be7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000beb:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000bf1:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000bf4:	8d 42 ff             	lea    eax,[edx-0x1]
c0000bf7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000bfb:	74 1f                	je     c0000c1c <sYSMALLOc+0x3e>
c0000bfd:	89 d8                	mov    eax,ebx
c0000bff:	e8 fe fd ff ff       	call   c0000a02 <malloc_consolidate>
c0000c04:	83 ec 0c             	sub    esp,0xc
c0000c07:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000c0b:	83 e8 07             	sub    eax,0x7
c0000c0e:	50                   	push   eax
c0000c0f:	e8 30 02 00 00       	call   c0000e44 <dlmalloc>
c0000c14:	83 c4 10             	add    esp,0x10
c0000c17:	e9 20 02 00 00       	jmp    c0000e3c <sYSMALLOc+0x25e>
c0000c1c:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000c1f:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000c25:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000c28:	83 e0 fc             	and    eax,0xfffffffc
c0000c2b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000c2f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000c33:	83 c0 10             	add    eax,0x10
c0000c36:	01 c1                	add    ecx,eax
c0000c38:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000c3c:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000c43:	74 04                	je     c0000c49 <sYSMALLOc+0x6b>
c0000c45:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000c49:	f7 da                	neg    edx
c0000c4b:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000c4f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000c53:	21 d1                	and    ecx,edx
c0000c55:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000c59:	7f 07                	jg     c0000c62 <sYSMALLOc+0x84>
c0000c5b:	31 c0                	xor    eax,eax
c0000c5d:	e9 da 01 00 00       	jmp    c0000e3c <sYSMALLOc+0x25e>
c0000c62:	83 ec 0c             	sub    esp,0xc
c0000c65:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000c69:	e8 fd ad 00 00       	call   c000ba6b <sbrk>
c0000c6e:	83 c4 10             	add    esp,0x10
c0000c71:	89 c6                	mov    esi,eax
c0000c73:	83 f8 ff             	cmp    eax,0xffffffff
c0000c76:	74 e3                	je     c0000c5b <sYSMALLOc+0x7d>
c0000c78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000c7c:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000c80:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000c83:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000c89:	39 f1                	cmp    ecx,esi
c0000c8b:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000c91:	75 13                	jne    c0000ca6 <sYSMALLOc+0xc8>
c0000c93:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000c97:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000c9b:	83 c8 01             	or     eax,0x1
c0000c9e:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000ca1:	e9 3e 01 00 00       	jmp    c0000de4 <sYSMALLOc+0x206>
c0000ca6:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000cac:	88 d0                	mov    al,dl
c0000cae:	83 e0 01             	and    eax,0x1
c0000cb1:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000cb6:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000cba:	0f 95 c0             	setne  al
c0000cbd:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000cc1:	39 f1                	cmp    ecx,esi
c0000cc3:	76 12                	jbe    c0000cd7 <sYSMALLOc+0xf9>
c0000cc5:	84 c0                	test   al,al
c0000cc7:	74 0e                	je     c0000cd7 <sYSMALLOc+0xf9>
c0000cc9:	83 e2 fe             	and    edx,0xfffffffe
c0000ccc:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000cd2:	e9 83 00 00 00       	jmp    c0000d5a <sYSMALLOc+0x17c>
c0000cd7:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000cdc:	74 7c                	je     c0000d5a <sYSMALLOc+0x17c>
c0000cde:	84 c0                	test   al,al
c0000ce0:	74 0c                	je     c0000cee <sYSMALLOc+0x110>
c0000ce2:	89 f0                	mov    eax,esi
c0000ce4:	29 c8                	sub    eax,ecx
c0000ce6:	01 e8                	add    eax,ebp
c0000ce8:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000cee:	89 f2                	mov    edx,esi
c0000cf0:	83 e2 07             	and    edx,0x7
c0000cf3:	74 0c                	je     c0000d01 <sYSMALLOc+0x123>
c0000cf5:	b8 08 00 00 00       	mov    eax,0x8
c0000cfa:	29 d0                	sub    eax,edx
c0000cfc:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000cff:	eb 04                	jmp    c0000d05 <sYSMALLOc+0x127>
c0000d01:	89 f5                	mov    ebp,esi
c0000d03:	31 c0                	xor    eax,eax
c0000d05:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000d09:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000d0d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000d11:	01 c1                	add    ecx,eax
c0000d13:	83 ec 0c             	sub    esp,0xc
c0000d16:	01 f1                	add    ecx,esi
c0000d18:	01 ca                	add    edx,ecx
c0000d1a:	29 c8                	sub    eax,ecx
c0000d1c:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000d20:	01 c2                	add    edx,eax
c0000d22:	52                   	push   edx
c0000d23:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000d27:	e8 3f ad 00 00       	call   c000ba6b <sbrk>
c0000d2c:	83 c4 10             	add    esp,0x10
c0000d2f:	83 f8 ff             	cmp    eax,0xffffffff
c0000d32:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000d36:	75 0f                	jne    c0000d47 <sYSMALLOc+0x169>
c0000d38:	83 ec 0c             	sub    esp,0xc
c0000d3b:	6a 00                	push   0x0
c0000d3d:	e8 29 ad 00 00       	call   c000ba6b <sbrk>
c0000d42:	83 c4 10             	add    esp,0x10
c0000d45:	eb 30                	jmp    c0000d77 <sYSMALLOc+0x199>
c0000d47:	39 c6                	cmp    esi,eax
c0000d49:	76 33                	jbe    c0000d7e <sYSMALLOc+0x1a0>
c0000d4b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000d4f:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000d56:	01 f0                	add    eax,esi
c0000d58:	eb 1d                	jmp    c0000d77 <sYSMALLOc+0x199>
c0000d5a:	83 ec 0c             	sub    esp,0xc
c0000d5d:	89 f5                	mov    ebp,esi
c0000d5f:	6a 00                	push   0x0
c0000d61:	e8 05 ad 00 00       	call   c000ba6b <sbrk>
c0000d66:	89 c2                	mov    edx,eax
c0000d68:	29 f2                	sub    edx,esi
c0000d6a:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000d6e:	83 c4 10             	add    esp,0x10
c0000d71:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000d77:	31 d2                	xor    edx,edx
c0000d79:	83 f8 ff             	cmp    eax,0xffffffff
c0000d7c:	74 66                	je     c0000de4 <sYSMALLOc+0x206>
c0000d7e:	29 e8                	sub    eax,ebp
c0000d80:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000d83:	01 d0                	add    eax,edx
c0000d85:	83 c8 01             	or     eax,0x1
c0000d88:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000d8b:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000d91:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000d96:	74 4c                	je     c0000de4 <sYSMALLOc+0x206>
c0000d98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000d9c:	83 e8 0c             	sub    eax,0xc
c0000d9f:	83 e0 f8             	and    eax,0xfffffff8
c0000da2:	89 c2                	mov    edx,eax
c0000da4:	83 ca 01             	or     edx,0x1
c0000da7:	83 f8 0f             	cmp    eax,0xf
c0000daa:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000dad:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000db5:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000dbd:	76 25                	jbe    c0000de4 <sYSMALLOc+0x206>
c0000dbf:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000dc5:	83 ec 0c             	sub    esp,0xc
c0000dc8:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000dd2:	83 c7 08             	add    edi,0x8
c0000dd5:	57                   	push   edi
c0000dd6:	e8 0e fd ff ff       	call   c0000ae9 <dlfree>
c0000ddb:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000de1:	83 c4 10             	add    esp,0x10
c0000de4:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000dea:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000df0:	73 06                	jae    c0000df8 <sYSMALLOc+0x21a>
c0000df2:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000df8:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000dfe:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000e04:	73 06                	jae    c0000e0c <sYSMALLOc+0x22e>
c0000e06:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000e0c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000e0f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000e12:	83 e2 fc             	and    edx,0xfffffffc
c0000e15:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000e19:	0f 82 3c fe ff ff    	jb     c0000c5b <sYSMALLOc+0x7d>
c0000e1f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000e23:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000e26:	29 fa                	sub    edx,edi
c0000e28:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000e2b:	83 ca 01             	or     edx,0x1
c0000e2e:	89 fb                	mov    ebx,edi
c0000e30:	83 c0 08             	add    eax,0x8
c0000e33:	83 cb 01             	or     ebx,0x1
c0000e36:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0000e39:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0000e3c:	83 c4 2c             	add    esp,0x2c
c0000e3f:	5b                   	pop    ebx
c0000e40:	5e                   	pop    esi
c0000e41:	5f                   	pop    edi
c0000e42:	5d                   	pop    ebp
c0000e43:	c3                   	ret    

c0000e44 <dlmalloc>:
c0000e44:	55                   	push   ebp
c0000e45:	57                   	push   edi
c0000e46:	56                   	push   esi
c0000e47:	53                   	push   ebx
c0000e48:	83 ec 1c             	sub    esp,0x1c
c0000e4b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0000e4f:	83 f8 df             	cmp    eax,0xffffffdf
c0000e52:	0f 87 70 03 00 00    	ja     c00011c8 <dlmalloc+0x384>
c0000e58:	83 c0 0b             	add    eax,0xb
c0000e5b:	be 10 00 00 00       	mov    esi,0x10
c0000e60:	83 f8 0f             	cmp    eax,0xf
c0000e63:	76 05                	jbe    c0000e6a <dlmalloc+0x26>
c0000e65:	83 e0 f8             	and    eax,0xfffffff8
c0000e68:	89 c6                	mov    esi,eax
c0000e6a:	8b 3d 00 30 02 c0    	mov    edi,DWORD PTR ds:0xc0023000
c0000e70:	f7 c7 01 00 00 00    	test   edi,0x1
c0000e76:	75 17                	jne    c0000e8f <dlmalloc+0x4b>
c0000e78:	85 ff                	test   edi,edi
c0000e7a:	0f 85 05 03 00 00    	jne    c0001185 <dlmalloc+0x341>
c0000e80:	b8 00 30 02 c0       	mov    eax,0xc0023000
c0000e85:	e8 78 fb ff ff       	call   c0000a02 <malloc_consolidate>
c0000e8a:	e9 f6 02 00 00       	jmp    c0001185 <dlmalloc+0x341>
c0000e8f:	39 f7                	cmp    edi,esi
c0000e91:	72 1f                	jb     c0000eb2 <dlmalloc+0x6e>
c0000e93:	89 f2                	mov    edx,esi
c0000e95:	c1 ea 03             	shr    edx,0x3
c0000e98:	83 ea 02             	sub    edx,0x2
c0000e9b:	8b 04 95 04 30 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdcffc]
c0000ea2:	85 c0                	test   eax,eax
c0000ea4:	74 0c                	je     c0000eb2 <dlmalloc+0x6e>
c0000ea6:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0000ea9:	89 0c 95 04 30 02 c0 	mov    DWORD PTR [edx*4-0x3ffdcffc],ecx
c0000eb0:	eb 30                	jmp    c0000ee2 <dlmalloc+0x9e>
c0000eb2:	89 f0                	mov    eax,esi
c0000eb4:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000eba:	77 2e                	ja     c0000eea <dlmalloc+0xa6>
c0000ebc:	c1 e8 03             	shr    eax,0x3
c0000ebf:	8d 14 c5 34 30 02 c0 	lea    edx,[eax*8-0x3ffdcfcc]
c0000ec6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000eca:	8d 5a f8             	lea    ebx,[edx-0x8]
c0000ecd:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0000ed0:	39 c3                	cmp    ebx,eax
c0000ed2:	74 2e                	je     c0000f02 <dlmalloc+0xbe>
c0000ed4:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0000ed7:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0000edc:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000edf:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0000ee2:	83 c0 08             	add    eax,0x8
c0000ee5:	e9 e0 02 00 00       	jmp    c00011ca <dlmalloc+0x386>
c0000eea:	e8 8f fa ff ff       	call   c000097e <largebin_index>
c0000eef:	83 e7 02             	and    edi,0x2
c0000ef2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000ef6:	74 0a                	je     c0000f02 <dlmalloc+0xbe>
c0000ef8:	b8 00 30 02 c0       	mov    eax,0xc0023000
c0000efd:	e8 00 fb ff ff       	call   c0000a02 <malloc_consolidate>
c0000f02:	8d 46 10             	lea    eax,[esi+0x10]
c0000f05:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000f09:	8b 1d 40 30 02 c0    	mov    ebx,DWORD PTR ds:0xc0023040
c0000f0f:	81 fb 34 30 02 c0    	cmp    ebx,0xc0023034
c0000f15:	0f 84 13 01 00 00    	je     c000102e <dlmalloc+0x1ea>
c0000f1b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0000f1e:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0000f21:	83 e7 fc             	and    edi,0xfffffffc
c0000f24:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000f2a:	77 4c                	ja     c0000f78 <dlmalloc+0x134>
c0000f2c:	3d 34 30 02 c0       	cmp    eax,0xc0023034
c0000f31:	75 45                	jne    c0000f78 <dlmalloc+0x134>
c0000f33:	39 1d 30 30 02 c0    	cmp    DWORD PTR ds:0xc0023030,ebx
c0000f39:	75 3d                	jne    c0000f78 <dlmalloc+0x134>
c0000f3b:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0000f3f:	73 37                	jae    c0000f78 <dlmalloc+0x134>
c0000f41:	8d 04 33             	lea    eax,[ebx+esi*1]
c0000f44:	89 fa                	mov    edx,edi
c0000f46:	a3 3c 30 02 c0       	mov    ds:0xc002303c,eax
c0000f4b:	a3 40 30 02 c0       	mov    ds:0xc0023040,eax
c0000f50:	a3 30 30 02 c0       	mov    ds:0xc0023030,eax
c0000f55:	29 f2                	sub    edx,esi
c0000f57:	c7 40 08 34 30 02 c0 	mov    DWORD PTR [eax+0x8],0xc0023034
c0000f5e:	c7 40 0c 34 30 02 c0 	mov    DWORD PTR [eax+0xc],0xc0023034
c0000f65:	83 ce 01             	or     esi,0x1
c0000f68:	89 d1                	mov    ecx,edx
c0000f6a:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0000f6d:	83 c9 01             	or     ecx,0x1
c0000f70:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0000f73:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0000f76:	eb 15                	jmp    c0000f8d <dlmalloc+0x149>
c0000f78:	a3 40 30 02 c0       	mov    ds:0xc0023040,eax
c0000f7d:	39 fe                	cmp    esi,edi
c0000f7f:	c7 40 08 34 30 02 c0 	mov    DWORD PTR [eax+0x8],0xc0023034
c0000f86:	75 0d                	jne    c0000f95 <dlmalloc+0x151>
c0000f88:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0000f8d:	8d 43 08             	lea    eax,[ebx+0x8]
c0000f90:	e9 35 02 00 00       	jmp    c00011ca <dlmalloc+0x386>
c0000f95:	89 f8                	mov    eax,edi
c0000f97:	81 ff ff 00 00 00    	cmp    edi,0xff
c0000f9d:	77 19                	ja     c0000fb8 <dlmalloc+0x174>
c0000f9f:	c1 e8 03             	shr    eax,0x3
c0000fa2:	8d 14 00             	lea    edx,[eax+eax*1]
c0000fa5:	83 c2 0d             	add    edx,0xd
c0000fa8:	8d 2c 95 f8 2f 02 c0 	lea    ebp,[edx*4-0x3ffdd008]
c0000faf:	8b 14 95 00 30 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd000]
c0000fb6:	eb 46                	jmp    c0000ffe <dlmalloc+0x1ba>
c0000fb8:	e8 c1 f9 ff ff       	call   c000097e <largebin_index>
c0000fbd:	8d 14 00             	lea    edx,[eax+eax*1]
c0000fc0:	83 c2 0d             	add    edx,0xd
c0000fc3:	8d 0c 95 00 30 02 c0 	lea    ecx,[edx*4-0x3ffdd000]
c0000fca:	8b 14 95 00 30 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd000]
c0000fd1:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0000fd4:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0000fd8:	89 d5                	mov    ebp,edx
c0000fda:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0000fde:	74 1e                	je     c0000ffe <dlmalloc+0x1ba>
c0000fe0:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c0000fe3:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0000fe6:	77 12                	ja     c0000ffa <dlmalloc+0x1b6>
c0000fe8:	83 cf 01             	or     edi,0x1
c0000feb:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0000fee:	76 05                	jbe    c0000ff5 <dlmalloc+0x1b1>
c0000ff0:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0000ff3:	eb f6                	jmp    c0000feb <dlmalloc+0x1a7>
c0000ff5:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0000ff8:	eb 04                	jmp    c0000ffe <dlmalloc+0x1ba>
c0000ffa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0000ffe:	89 c7                	mov    edi,eax
c0001000:	88 c1                	mov    cl,al
c0001002:	c1 ff 05             	sar    edi,0x5
c0001005:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0001009:	bf 01 00 00 00       	mov    edi,0x1
c000100e:	d3 e7                	shl    edi,cl
c0001010:	89 f8                	mov    eax,edi
c0001012:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0001016:	09 04 bd 34 33 02 c0 	or     DWORD PTR [edi*4-0x3ffdcccc],eax
c000101d:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c0001020:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0001023:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c0001026:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c0001029:	e9 db fe ff ff       	jmp    c0000f09 <dlmalloc+0xc5>
c000102e:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001034:	76 78                	jbe    c00010ae <dlmalloc+0x26a>
c0001036:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000103a:	8d 04 c5 34 30 02 c0 	lea    eax,[eax*8-0x3ffdcfcc]
c0001041:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001044:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001047:	39 ca                	cmp    edx,ecx
c0001049:	74 63                	je     c00010ae <dlmalloc+0x26a>
c000104b:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c000104e:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001051:	83 e3 fc             	and    ebx,0xfffffffc
c0001054:	39 de                	cmp    esi,ebx
c0001056:	77 52                	ja     c00010aa <dlmalloc+0x266>
c0001058:	89 df                	mov    edi,ebx
c000105a:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000105d:	29 f7                	sub    edi,esi
c000105f:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001062:	01 d3                	add    ebx,edx
c0001064:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001067:	83 ff 0f             	cmp    edi,0xf
c000106a:	8d 42 08             	lea    eax,[edx+0x8]
c000106d:	77 09                	ja     c0001078 <dlmalloc+0x234>
c000106f:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001073:	e9 52 01 00 00       	jmp    c00011ca <dlmalloc+0x386>
c0001078:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000107b:	83 ce 01             	or     esi,0x1
c000107e:	89 0d 3c 30 02 c0    	mov    DWORD PTR ds:0xc002303c,ecx
c0001084:	89 0d 40 30 02 c0    	mov    DWORD PTR ds:0xc0023040,ecx
c000108a:	c7 41 08 34 30 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0023034
c0001091:	c7 41 0c 34 30 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0023034
c0001098:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000109b:	89 fa                	mov    edx,edi
c000109d:	83 ca 01             	or     edx,0x1
c00010a0:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010a3:	89 3b                	mov    DWORD PTR [ebx],edi
c00010a5:	e9 20 01 00 00       	jmp    c00011ca <dlmalloc+0x386>
c00010aa:	89 c2                	mov    edx,eax
c00010ac:	eb 99                	jmp    c0001047 <dlmalloc+0x203>
c00010ae:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00010b2:	b8 01 00 00 00       	mov    eax,0x1
c00010b7:	41                   	inc    ecx
c00010b8:	89 cb                	mov    ebx,ecx
c00010ba:	8d 14 cd 2c 30 02 c0 	lea    edx,[ecx*8-0x3ffdcfd4]
c00010c1:	c1 eb 05             	shr    ebx,0x5
c00010c4:	d3 e0                	shl    eax,cl
c00010c6:	8b 3c 9d 34 33 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdcccc]
c00010cd:	39 f8                	cmp    eax,edi
c00010cf:	77 04                	ja     c00010d5 <dlmalloc+0x291>
c00010d1:	85 c0                	test   eax,eax
c00010d3:	75 26                	jne    c00010fb <dlmalloc+0x2b7>
c00010d5:	43                   	inc    ebx
c00010d6:	83 fb 02             	cmp    ebx,0x2
c00010d9:	0f 87 a6 00 00 00    	ja     c0001185 <dlmalloc+0x341>
c00010df:	8b 3c 9d 34 33 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdcccc]
c00010e6:	85 ff                	test   edi,edi
c00010e8:	74 eb                	je     c00010d5 <dlmalloc+0x291>
c00010ea:	89 d8                	mov    eax,ebx
c00010ec:	c1 e0 06             	shl    eax,0x6
c00010ef:	8d 14 85 2c 30 02 c0 	lea    edx,[eax*4-0x3ffdcfd4]
c00010f6:	b8 01 00 00 00       	mov    eax,0x1
c00010fb:	85 f8                	test   eax,edi
c00010fd:	75 07                	jne    c0001106 <dlmalloc+0x2c2>
c00010ff:	83 c2 08             	add    edx,0x8
c0001102:	01 c0                	add    eax,eax
c0001104:	eb f5                	jmp    c00010fb <dlmalloc+0x2b7>
c0001106:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0001109:	39 ca                	cmp    edx,ecx
c000110b:	75 14                	jne    c0001121 <dlmalloc+0x2dd>
c000110d:	89 c1                	mov    ecx,eax
c000110f:	83 c2 08             	add    edx,0x8
c0001112:	f7 d1                	not    ecx
c0001114:	01 c0                	add    eax,eax
c0001116:	21 cf                	and    edi,ecx
c0001118:	89 3c 9d 34 33 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdcccc],edi
c000111f:	eb ac                	jmp    c00010cd <dlmalloc+0x289>
c0001121:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0001124:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c0001127:	83 e0 fc             	and    eax,0xfffffffc
c000112a:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c000112d:	89 c3                	mov    ebx,eax
c000112f:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001132:	29 f3                	sub    ebx,esi
c0001134:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001137:	83 fb 0f             	cmp    ebx,0xf
c000113a:	8d 41 08             	lea    eax,[ecx+0x8]
c000113d:	77 09                	ja     c0001148 <dlmalloc+0x304>
c000113f:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001143:	e9 82 00 00 00       	jmp    c00011ca <dlmalloc+0x386>
c0001148:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000114b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001151:	89 3d 3c 30 02 c0    	mov    DWORD PTR ds:0xc002303c,edi
c0001157:	89 3d 40 30 02 c0    	mov    DWORD PTR ds:0xc0023040,edi
c000115d:	c7 47 08 34 30 02 c0 	mov    DWORD PTR [edi+0x8],0xc0023034
c0001164:	c7 47 0c 34 30 02 c0 	mov    DWORD PTR [edi+0xc],0xc0023034
c000116b:	77 06                	ja     c0001173 <dlmalloc+0x32f>
c000116d:	89 3d 30 30 02 c0    	mov    DWORD PTR ds:0xc0023030,edi
c0001173:	83 ce 01             	or     esi,0x1
c0001176:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001179:	89 d9                	mov    ecx,ebx
c000117b:	83 c9 01             	or     ecx,0x1
c000117e:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001181:	89 1a                	mov    DWORD PTR [edx],ebx
c0001183:	eb 45                	jmp    c00011ca <dlmalloc+0x386>
c0001185:	a1 2c 30 02 c0       	mov    eax,ds:0xc002302c
c000118a:	8d 4e 10             	lea    ecx,[esi+0x10]
c000118d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001190:	83 e2 fc             	and    edx,0xfffffffc
c0001193:	39 d1                	cmp    ecx,edx
c0001195:	77 1e                	ja     c00011b5 <dlmalloc+0x371>
c0001197:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000119a:	89 f3                	mov    ebx,esi
c000119c:	89 0d 2c 30 02 c0    	mov    DWORD PTR ds:0xc002302c,ecx
c00011a2:	83 cb 01             	or     ebx,0x1
c00011a5:	29 f2                	sub    edx,esi
c00011a7:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00011aa:	83 ca 01             	or     edx,0x1
c00011ad:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00011b0:	e9 2d fd ff ff       	jmp    c0000ee2 <dlmalloc+0x9e>
c00011b5:	83 c4 1c             	add    esp,0x1c
c00011b8:	89 f0                	mov    eax,esi
c00011ba:	5b                   	pop    ebx
c00011bb:	ba 00 30 02 c0       	mov    edx,0xc0023000
c00011c0:	5e                   	pop    esi
c00011c1:	5f                   	pop    edi
c00011c2:	5d                   	pop    ebp
c00011c3:	e9 16 fa ff ff       	jmp    c0000bde <sYSMALLOc>
c00011c8:	31 c0                	xor    eax,eax
c00011ca:	83 c4 1c             	add    esp,0x1c
c00011cd:	5b                   	pop    ebx
c00011ce:	5e                   	pop    esi
c00011cf:	5f                   	pop    edi
c00011d0:	5d                   	pop    ebp
c00011d1:	c3                   	ret    

c00011d2 <iALLOc>:
c00011d2:	55                   	push   ebp
c00011d3:	89 c5                	mov    ebp,eax
c00011d5:	57                   	push   edi
c00011d6:	56                   	push   esi
c00011d7:	53                   	push   ebx
c00011d8:	83 ec 2c             	sub    esp,0x2c
c00011db:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00011df:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00011e3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011e7:	83 3d 00 30 02 c0 00 	cmp    DWORD PTR ds:0xc0023000,0x0
c00011ee:	75 12                	jne    c0001202 <iALLOc+0x30>
c00011f0:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00011f4:	b8 00 30 02 c0       	mov    eax,0xc0023000
c00011f9:	e8 04 f8 ff ff       	call   c0000a02 <malloc_consolidate>
c00011fe:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001202:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001207:	74 12                	je     c000121b <iALLOc+0x49>
c0001209:	85 ed                	test   ebp,ebp
c000120b:	0f 84 64 01 00 00    	je     c0001375 <iALLOc+0x1a3>
c0001211:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0001219:	eb 33                	jmp    c000124e <iALLOc+0x7c>
c000121b:	85 ed                	test   ebp,ebp
c000121d:	75 14                	jne    c0001233 <iALLOc+0x61>
c000121f:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0001227:	83 c4 2c             	add    esp,0x2c
c000122a:	5b                   	pop    ebx
c000122b:	5e                   	pop    esi
c000122c:	5f                   	pop    edi
c000122d:	5d                   	pop    ebp
c000122e:	e9 11 fc ff ff       	jmp    c0000e44 <dlmalloc>
c0001233:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c000123a:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001242:	83 f8 0f             	cmp    eax,0xf
c0001245:	76 07                	jbe    c000124e <iALLOc+0x7c>
c0001247:	83 e0 f8             	and    eax,0xfffffff8
c000124a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000124e:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001253:	75 09                	jne    c000125e <iALLOc+0x8c>
c0001255:	89 d0                	mov    eax,edx
c0001257:	8d 3c aa             	lea    edi,[edx+ebp*4]
c000125a:	31 f6                	xor    esi,esi
c000125c:	eb 3b                	jmp    c0001299 <iALLOc+0xc7>
c000125e:	8b 02                	mov    eax,DWORD PTR [edx]
c0001260:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001268:	83 c0 0b             	add    eax,0xb
c000126b:	83 f8 0f             	cmp    eax,0xf
c000126e:	76 07                	jbe    c0001277 <iALLOc+0xa5>
c0001270:	83 e0 f8             	and    eax,0xfffffff8
c0001273:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001277:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000127b:	0f af f5             	imul   esi,ebp
c000127e:	eb 25                	jmp    c00012a5 <iALLOc+0xd3>
c0001280:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001282:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001285:	bb 10 00 00 00       	mov    ebx,0x10
c000128a:	83 f9 0f             	cmp    ecx,0xf
c000128d:	76 05                	jbe    c0001294 <iALLOc+0xc2>
c000128f:	83 e1 f8             	and    ecx,0xfffffff8
c0001292:	89 cb                	mov    ebx,ecx
c0001294:	01 de                	add    esi,ebx
c0001296:	83 c0 04             	add    eax,0x4
c0001299:	39 c7                	cmp    edi,eax
c000129b:	75 e3                	jne    c0001280 <iALLOc+0xae>
c000129d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00012a5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00012a9:	8b 1d 54 33 02 c0    	mov    ebx,DWORD PTR ds:0xc0023354
c00012af:	83 ec 0c             	sub    esp,0xc
c00012b2:	c7 05 54 33 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023354,0x0
c00012bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00012c0:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c00012c4:	50                   	push   eax
c00012c5:	e8 7a fb ff ff       	call   c0000e44 <dlmalloc>
c00012ca:	83 c4 10             	add    esp,0x10
c00012cd:	89 1d 54 33 02 c0    	mov    DWORD PTR ds:0xc0023354,ebx
c00012d3:	85 c0                	test   eax,eax
c00012d5:	0f 84 92 00 00 00    	je     c000136d <iALLOc+0x19b>
c00012db:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00012de:	8d 78 f8             	lea    edi,[eax-0x8]
c00012e1:	83 e3 fc             	and    ebx,0xfffffffc
c00012e4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00012e8:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00012ed:	74 1e                	je     c000130d <iALLOc+0x13b>
c00012ef:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00012f3:	89 d9                	mov    ecx,ebx
c00012f5:	52                   	push   edx
c00012f6:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00012fa:	83 e9 04             	sub    ecx,0x4
c00012fd:	51                   	push   ecx
c00012fe:	6a 00                	push   0x0
c0001300:	50                   	push   eax
c0001301:	e8 02 f3 ff ff       	call   c0000608 <memset>
c0001306:	83 c4 10             	add    esp,0x10
c0001309:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000130d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001312:	75 14                	jne    c0001328 <iALLOc+0x156>
c0001314:	8d 04 37             	lea    eax,[edi+esi*1]
c0001317:	29 f3                	sub    ebx,esi
c0001319:	8d 48 08             	lea    ecx,[eax+0x8]
c000131c:	83 cb 01             	or     ebx,0x1
c000131f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001323:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001326:	89 f3                	mov    ebx,esi
c0001328:	31 c0                	xor    eax,eax
c000132a:	4d                   	dec    ebp
c000132b:	8d 4f 08             	lea    ecx,[edi+0x8]
c000132e:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001332:	39 c5                	cmp    ebp,eax
c0001334:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c0001337:	74 2c                	je     c0001365 <iALLOc+0x193>
c0001339:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000133d:	85 c9                	test   ecx,ecx
c000133f:	75 15                	jne    c0001356 <iALLOc+0x184>
c0001341:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001344:	8d 71 0b             	lea    esi,[ecx+0xb]
c0001347:	b9 10 00 00 00       	mov    ecx,0x10
c000134c:	83 fe 0f             	cmp    esi,0xf
c000134f:	76 05                	jbe    c0001356 <iALLOc+0x184>
c0001351:	83 e6 f8             	and    esi,0xfffffff8
c0001354:	89 f1                	mov    ecx,esi
c0001356:	89 ce                	mov    esi,ecx
c0001358:	29 cb                	sub    ebx,ecx
c000135a:	83 ce 01             	or     esi,0x1
c000135d:	40                   	inc    eax
c000135e:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001361:	01 cf                	add    edi,ecx
c0001363:	eb c6                	jmp    c000132b <iALLOc+0x159>
c0001365:	83 cb 01             	or     ebx,0x1
c0001368:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000136b:	eb 08                	jmp    c0001375 <iALLOc+0x1a3>
c000136d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001375:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001379:	83 c4 2c             	add    esp,0x2c
c000137c:	5b                   	pop    ebx
c000137d:	5e                   	pop    esi
c000137e:	5f                   	pop    edi
c000137f:	5d                   	pop    ebp
c0001380:	c3                   	ret    

c0001381 <dlrealloc>:
c0001381:	55                   	push   ebp
c0001382:	57                   	push   edi
c0001383:	56                   	push   esi
c0001384:	53                   	push   ebx
c0001385:	83 ec 1c             	sub    esp,0x1c
c0001388:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000138c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001390:	85 db                	test   ebx,ebx
c0001392:	75 10                	jne    c00013a4 <dlrealloc+0x23>
c0001394:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001398:	83 c4 1c             	add    esp,0x1c
c000139b:	5b                   	pop    ebx
c000139c:	5e                   	pop    esi
c000139d:	5f                   	pop    edi
c000139e:	5d                   	pop    ebp
c000139f:	e9 a0 fa ff ff       	jmp    c0000e44 <dlmalloc>
c00013a4:	83 f8 df             	cmp    eax,0xffffffdf
c00013a7:	76 07                	jbe    c00013b0 <dlrealloc+0x2f>
c00013a9:	31 db                	xor    ebx,ebx
c00013ab:	e9 7c 01 00 00       	jmp    c000152c <dlrealloc+0x1ab>
c00013b0:	83 c0 0b             	add    eax,0xb
c00013b3:	bf 10 00 00 00       	mov    edi,0x10
c00013b8:	83 f8 0f             	cmp    eax,0xf
c00013bb:	76 05                	jbe    c00013c2 <dlrealloc+0x41>
c00013bd:	83 e0 f8             	and    eax,0xfffffff8
c00013c0:	89 c7                	mov    edi,eax
c00013c2:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c00013c5:	8d 6b f8             	lea    ebp,[ebx-0x8]
c00013c8:	89 c6                	mov    esi,eax
c00013ca:	83 e6 fc             	and    esi,0xfffffffc
c00013cd:	a8 02                	test   al,0x2
c00013cf:	75 d8                	jne    c00013a9 <dlrealloc+0x28>
c00013d1:	39 f7                	cmp    edi,esi
c00013d3:	0f 86 15 01 00 00    	jbe    c00014ee <dlrealloc+0x16d>
c00013d9:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c00013dd:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00013e0:	39 15 2c 30 02 c0    	cmp    DWORD PTR ds:0xc002302c,edx
c00013e6:	75 33                	jne    c000141b <dlrealloc+0x9a>
c00013e8:	83 e1 fc             	and    ecx,0xfffffffc
c00013eb:	01 f1                	add    ecx,esi
c00013ed:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00013f1:	8d 4f 10             	lea    ecx,[edi+0x10]
c00013f4:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00013f8:	77 49                	ja     c0001443 <dlrealloc+0xc2>
c00013fa:	01 fd                	add    ebp,edi
c00013fc:	83 e0 01             	and    eax,0x1
c00013ff:	09 f8                	or     eax,edi
c0001401:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c0001404:	89 2d 2c 30 02 c0    	mov    DWORD PTR ds:0xc002302c,ebp
c000140a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000140e:	29 f8                	sub    eax,edi
c0001410:	83 c8 01             	or     eax,0x1
c0001413:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0001416:	e9 11 01 00 00       	jmp    c000152c <dlrealloc+0x1ab>
c000141b:	89 c8                	mov    eax,ecx
c000141d:	83 e0 fe             	and    eax,0xfffffffe
c0001420:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c0001425:	75 1c                	jne    c0001443 <dlrealloc+0xc2>
c0001427:	83 e1 fc             	and    ecx,0xfffffffc
c000142a:	01 f1                	add    ecx,esi
c000142c:	39 cf                	cmp    edi,ecx
c000142e:	77 13                	ja     c0001443 <dlrealloc+0xc2>
c0001430:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001433:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001436:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c0001439:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c000143c:	89 ce                	mov    esi,ecx
c000143e:	e9 ab 00 00 00       	jmp    c00014ee <dlrealloc+0x16d>
c0001443:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001447:	8d 47 f9             	lea    eax,[edi-0x7]
c000144a:	83 ec 0c             	sub    esp,0xc
c000144d:	50                   	push   eax
c000144e:	e8 f1 f9 ff ff       	call   c0000e44 <dlmalloc>
c0001453:	83 c4 10             	add    esp,0x10
c0001456:	89 c1                	mov    ecx,eax
c0001458:	85 c0                	test   eax,eax
c000145a:	0f 84 49 ff ff ff    	je     c00013a9 <dlrealloc+0x28>
c0001460:	8d 40 f8             	lea    eax,[eax-0x8]
c0001463:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001467:	39 c2                	cmp    edx,eax
c0001469:	75 0a                	jne    c0001475 <dlrealloc+0xf4>
c000146b:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000146e:	83 e0 fc             	and    eax,0xfffffffc
c0001471:	01 c6                	add    esi,eax
c0001473:	eb 79                	jmp    c00014ee <dlrealloc+0x16d>
c0001475:	83 ee 04             	sub    esi,0x4
c0001478:	83 fe 27             	cmp    esi,0x27
c000147b:	76 16                	jbe    c0001493 <dlrealloc+0x112>
c000147d:	50                   	push   eax
c000147e:	56                   	push   esi
c000147f:	53                   	push   ebx
c0001480:	51                   	push   ecx
c0001481:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0001485:	e8 48 f1 ff ff       	call   c00005d2 <memcpy>
c000148a:	83 c4 10             	add    esp,0x10
c000148d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0001491:	eb 43                	jmp    c00014d6 <dlrealloc+0x155>
c0001493:	8b 03                	mov    eax,DWORD PTR [ebx]
c0001495:	83 fe 13             	cmp    esi,0x13
c0001498:	89 01                	mov    DWORD PTR [ecx],eax
c000149a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000149d:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
c00014a0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00014a3:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c00014a6:	76 2e                	jbe    c00014d6 <dlrealloc+0x155>
c00014a8:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00014ab:	83 fe 1b             	cmp    esi,0x1b
c00014ae:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c00014b1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00014b4:	89 41 10             	mov    DWORD PTR [ecx+0x10],eax
c00014b7:	76 1d                	jbe    c00014d6 <dlrealloc+0x155>
c00014b9:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00014bc:	83 fe 23             	cmp    esi,0x23
c00014bf:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c00014c2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00014c5:	89 41 18             	mov    DWORD PTR [ecx+0x18],eax
c00014c8:	76 0c                	jbe    c00014d6 <dlrealloc+0x155>
c00014ca:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00014cd:	89 41 1c             	mov    DWORD PTR [ecx+0x1c],eax
c00014d0:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00014d3:	89 41 20             	mov    DWORD PTR [ecx+0x20],eax
c00014d6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00014da:	83 ec 0c             	sub    esp,0xc
c00014dd:	53                   	push   ebx
c00014de:	e8 06 f6 ff ff       	call   c0000ae9 <dlfree>
c00014e3:	83 c4 10             	add    esp,0x10
c00014e6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00014ea:	89 cb                	mov    ebx,ecx
c00014ec:	eb 3e                	jmp    c000152c <dlrealloc+0x1ab>
c00014ee:	89 f2                	mov    edx,esi
c00014f0:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00014f3:	29 fa                	sub    edx,edi
c00014f5:	83 e1 01             	and    ecx,0x1
c00014f8:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c00014fc:	83 fa 0f             	cmp    edx,0xf
c00014ff:	77 0b                	ja     c000150c <dlrealloc+0x18b>
c0001501:	09 ce                	or     esi,ecx
c0001503:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c0001506:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c000150a:	eb 20                	jmp    c000152c <dlrealloc+0x1ab>
c000150c:	01 fd                	add    ebp,edi
c000150e:	83 ec 0c             	sub    esp,0xc
c0001511:	09 cf                	or     edi,ecx
c0001513:	83 ca 01             	or     edx,0x1
c0001516:	89 7b fc             	mov    DWORD PTR [ebx-0x4],edi
c0001519:	83 c5 08             	add    ebp,0x8
c000151c:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
c000151f:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001523:	55                   	push   ebp
c0001524:	e8 c0 f5 ff ff       	call   c0000ae9 <dlfree>
c0001529:	83 c4 10             	add    esp,0x10
c000152c:	83 c4 1c             	add    esp,0x1c
c000152f:	89 d8                	mov    eax,ebx
c0001531:	5b                   	pop    ebx
c0001532:	5e                   	pop    esi
c0001533:	5f                   	pop    edi
c0001534:	5d                   	pop    ebp
c0001535:	c3                   	ret    

c0001536 <dlmemalign>:
c0001536:	55                   	push   ebp
c0001537:	57                   	push   edi
c0001538:	56                   	push   esi
c0001539:	53                   	push   ebx
c000153a:	83 ec 0c             	sub    esp,0xc
c000153d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001541:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001545:	83 fa 08             	cmp    edx,0x8
c0001548:	77 10                	ja     c000155a <dlmemalign+0x24>
c000154a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000154e:	83 c4 0c             	add    esp,0xc
c0001551:	5b                   	pop    ebx
c0001552:	5e                   	pop    esi
c0001553:	5f                   	pop    edi
c0001554:	5d                   	pop    ebp
c0001555:	e9 ea f8 ff ff       	jmp    c0000e44 <dlmalloc>
c000155a:	bf 10 00 00 00       	mov    edi,0x10
c000155f:	83 fa 0f             	cmp    edx,0xf
c0001562:	76 13                	jbe    c0001577 <dlmemalign+0x41>
c0001564:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001567:	85 d1                	test   ecx,edx
c0001569:	75 04                	jne    c000156f <dlmemalign+0x39>
c000156b:	89 d7                	mov    edi,edx
c000156d:	eb 08                	jmp    c0001577 <dlmemalign+0x41>
c000156f:	39 d7                	cmp    edi,edx
c0001571:	73 04                	jae    c0001577 <dlmemalign+0x41>
c0001573:	01 ff                	add    edi,edi
c0001575:	eb f8                	jmp    c000156f <dlmemalign+0x39>
c0001577:	83 f8 df             	cmp    eax,0xffffffdf
c000157a:	76 07                	jbe    c0001583 <dlmemalign+0x4d>
c000157c:	31 c0                	xor    eax,eax
c000157e:	e9 ce 00 00 00       	jmp    c0001651 <dlmemalign+0x11b>
c0001583:	83 c0 0b             	add    eax,0xb
c0001586:	bd 10 00 00 00       	mov    ebp,0x10
c000158b:	83 f8 0f             	cmp    eax,0xf
c000158e:	76 05                	jbe    c0001595 <dlmemalign+0x5f>
c0001590:	83 e0 f8             	and    eax,0xfffffff8
c0001593:	89 c5                	mov    ebp,eax
c0001595:	83 ec 0c             	sub    esp,0xc
c0001598:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000159c:	50                   	push   eax
c000159d:	e8 a2 f8 ff ff       	call   c0000e44 <dlmalloc>
c00015a2:	83 c4 10             	add    esp,0x10
c00015a5:	89 c1                	mov    ecx,eax
c00015a7:	85 c0                	test   eax,eax
c00015a9:	74 d1                	je     c000157c <dlmemalign+0x46>
c00015ab:	31 d2                	xor    edx,edx
c00015ad:	8d 70 f8             	lea    esi,[eax-0x8]
c00015b0:	f7 f7                	div    edi
c00015b2:	85 d2                	test   edx,edx
c00015b4:	74 62                	je     c0001618 <dlmemalign+0xe2>
c00015b6:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c00015ba:	89 f8                	mov    eax,edi
c00015bc:	f7 d8                	neg    eax
c00015be:	21 c3                	and    ebx,eax
c00015c0:	83 eb 08             	sub    ebx,0x8
c00015c3:	89 d8                	mov    eax,ebx
c00015c5:	29 f0                	sub    eax,esi
c00015c7:	83 f8 0f             	cmp    eax,0xf
c00015ca:	77 02                	ja     c00015ce <dlmemalign+0x98>
c00015cc:	01 fb                	add    ebx,edi
c00015ce:	89 d8                	mov    eax,ebx
c00015d0:	29 f0                	sub    eax,esi
c00015d2:	89 c6                	mov    esi,eax
c00015d4:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00015d7:	89 c2                	mov    edx,eax
c00015d9:	83 e2 fc             	and    edx,0xfffffffc
c00015dc:	29 f2                	sub    edx,esi
c00015de:	a8 02                	test   al,0x2
c00015e0:	74 10                	je     c00015f2 <dlmemalign+0xbc>
c00015e2:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00015e5:	83 ca 02             	or     edx,0x2
c00015e8:	8d 43 08             	lea    eax,[ebx+0x8]
c00015eb:	89 33                	mov    DWORD PTR [ebx],esi
c00015ed:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00015f0:	eb 5f                	jmp    c0001651 <dlmemalign+0x11b>
c00015f2:	83 ec 0c             	sub    esp,0xc
c00015f5:	89 d0                	mov    eax,edx
c00015f7:	83 c8 01             	or     eax,0x1
c00015fa:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00015fd:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001602:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001605:	83 e0 01             	and    eax,0x1
c0001608:	09 f0                	or     eax,esi
c000160a:	89 de                	mov    esi,ebx
c000160c:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c000160f:	51                   	push   ecx
c0001610:	e8 d4 f4 ff ff       	call   c0000ae9 <dlfree>
c0001615:	83 c4 10             	add    esp,0x10
c0001618:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000161b:	a8 02                	test   al,0x2
c000161d:	75 2f                	jne    c000164e <dlmemalign+0x118>
c000161f:	83 e0 fc             	and    eax,0xfffffffc
c0001622:	8d 55 10             	lea    edx,[ebp+0x10]
c0001625:	39 c2                	cmp    edx,eax
c0001627:	73 25                	jae    c000164e <dlmemalign+0x118>
c0001629:	8d 14 2e             	lea    edx,[esi+ebp*1]
c000162c:	83 ec 0c             	sub    esp,0xc
c000162f:	29 e8                	sub    eax,ebp
c0001631:	83 c2 08             	add    edx,0x8
c0001634:	83 c8 01             	or     eax,0x1
c0001637:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c000163a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000163d:	83 e0 01             	and    eax,0x1
c0001640:	09 c5                	or     ebp,eax
c0001642:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001645:	52                   	push   edx
c0001646:	e8 9e f4 ff ff       	call   c0000ae9 <dlfree>
c000164b:	83 c4 10             	add    esp,0x10
c000164e:	8d 46 08             	lea    eax,[esi+0x8]
c0001651:	83 c4 0c             	add    esp,0xc
c0001654:	5b                   	pop    ebx
c0001655:	5e                   	pop    esi
c0001656:	5f                   	pop    edi
c0001657:	5d                   	pop    ebp
c0001658:	c3                   	ret    

c0001659 <dlcalloc>:
c0001659:	53                   	push   ebx
c000165a:	83 ec 14             	sub    esp,0x14
c000165d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001661:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001666:	50                   	push   eax
c0001667:	e8 d8 f7 ff ff       	call   c0000e44 <dlmalloc>
c000166c:	83 c4 10             	add    esp,0x10
c000166f:	89 c3                	mov    ebx,eax
c0001671:	85 c0                	test   eax,eax
c0001673:	74 77                	je     c00016ec <dlcalloc+0x93>
c0001675:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001678:	89 d0                	mov    eax,edx
c000167a:	83 e0 fc             	and    eax,0xfffffffc
c000167d:	80 e2 02             	and    dl,0x2
c0001680:	75 5a                	jne    c00016dc <dlcalloc+0x83>
c0001682:	83 e8 04             	sub    eax,0x4
c0001685:	83 f8 27             	cmp    eax,0x27
c0001688:	76 03                	jbe    c000168d <dlcalloc+0x34>
c000168a:	51                   	push   ecx
c000168b:	eb 53                	jmp    c00016e0 <dlcalloc+0x87>
c000168d:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001693:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000169a:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00016a1:	83 f8 13             	cmp    eax,0x13
c00016a4:	76 46                	jbe    c00016ec <dlcalloc+0x93>
c00016a6:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00016ad:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00016b4:	83 f8 1b             	cmp    eax,0x1b
c00016b7:	76 33                	jbe    c00016ec <dlcalloc+0x93>
c00016b9:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00016c0:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00016c7:	83 f8 23             	cmp    eax,0x23
c00016ca:	76 20                	jbe    c00016ec <dlcalloc+0x93>
c00016cc:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00016d3:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00016da:	eb 10                	jmp    c00016ec <dlcalloc+0x93>
c00016dc:	83 e8 08             	sub    eax,0x8
c00016df:	52                   	push   edx
c00016e0:	50                   	push   eax
c00016e1:	6a 00                	push   0x0
c00016e3:	53                   	push   ebx
c00016e4:	e8 1f ef ff ff       	call   c0000608 <memset>
c00016e9:	83 c4 10             	add    esp,0x10
c00016ec:	89 d8                	mov    eax,ebx
c00016ee:	83 c4 08             	add    esp,0x8
c00016f1:	5b                   	pop    ebx
c00016f2:	c3                   	ret    

c00016f3 <dlcfree>:
c00016f3:	e9 f1 f3 ff ff       	jmp    c0000ae9 <dlfree>

c00016f8 <dlindependent_calloc>:
c00016f8:	83 ec 28             	sub    esp,0x28
c00016fb:	b9 03 00 00 00       	mov    ecx,0x3
c0001700:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001704:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0001708:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000170c:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001710:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001714:	e8 b9 fa ff ff       	call   c00011d2 <iALLOc>
c0001719:	83 c4 2c             	add    esp,0x2c
c000171c:	c3                   	ret    

c000171d <dlindependent_comalloc>:
c000171d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001721:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001725:	31 c9                	xor    ecx,ecx
c0001727:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000172b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000172f:	e9 9e fa ff ff       	jmp    c00011d2 <iALLOc>

c0001734 <dlvalloc>:
c0001734:	83 ec 0c             	sub    esp,0xc
c0001737:	83 3d 00 30 02 c0 00 	cmp    DWORD PTR ds:0xc0023000,0x0
c000173e:	75 0a                	jne    c000174a <dlvalloc+0x16>
c0001740:	b8 00 30 02 c0       	mov    eax,0xc0023000
c0001745:	e8 b8 f2 ff ff       	call   c0000a02 <malloc_consolidate>
c000174a:	50                   	push   eax
c000174b:	50                   	push   eax
c000174c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001750:	ff 35 5c 33 02 c0    	push   DWORD PTR ds:0xc002335c
c0001756:	e8 db fd ff ff       	call   c0001536 <dlmemalign>
c000175b:	83 c4 1c             	add    esp,0x1c
c000175e:	c3                   	ret    

c000175f <dlpvalloc>:
c000175f:	83 ec 0c             	sub    esp,0xc
c0001762:	83 3d 00 30 02 c0 00 	cmp    DWORD PTR ds:0xc0023000,0x0
c0001769:	75 0a                	jne    c0001775 <dlpvalloc+0x16>
c000176b:	b8 00 30 02 c0       	mov    eax,0xc0023000
c0001770:	e8 8d f2 ff ff       	call   c0000a02 <malloc_consolidate>
c0001775:	a1 5c 33 02 c0       	mov    eax,ds:0xc002335c
c000177a:	89 c1                	mov    ecx,eax
c000177c:	52                   	push   edx
c000177d:	f7 d9                	neg    ecx
c000177f:	52                   	push   edx
c0001780:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001784:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001788:	21 ca                	and    edx,ecx
c000178a:	52                   	push   edx
c000178b:	50                   	push   eax
c000178c:	e8 a5 fd ff ff       	call   c0001536 <dlmemalign>
c0001791:	83 c4 1c             	add    esp,0x1c
c0001794:	c3                   	ret    

c0001795 <dlmalloc_trim>:
c0001795:	b8 00 30 02 c0       	mov    eax,0xc0023000
c000179a:	e8 63 f2 ff ff       	call   c0000a02 <malloc_consolidate>
c000179f:	31 c0                	xor    eax,eax
c00017a1:	c3                   	ret    

c00017a2 <dlmalloc_usable_size>:
c00017a2:	53                   	push   ebx
c00017a3:	31 c0                	xor    eax,eax
c00017a5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00017a9:	85 c9                	test   ecx,ecx
c00017ab:	74 24                	je     c00017d1 <dlmalloc_usable_size+0x2f>
c00017ad:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c00017b0:	f6 c2 02             	test   dl,0x2
c00017b3:	74 08                	je     c00017bd <dlmalloc_usable_size+0x1b>
c00017b5:	83 e2 fc             	and    edx,0xfffffffc
c00017b8:	8d 42 f8             	lea    eax,[edx-0x8]
c00017bb:	eb 14                	jmp    c00017d1 <dlmalloc_usable_size+0x2f>
c00017bd:	89 d3                	mov    ebx,edx
c00017bf:	31 c0                	xor    eax,eax
c00017c1:	83 e3 fe             	and    ebx,0xfffffffe
c00017c4:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c00017c9:	74 06                	je     c00017d1 <dlmalloc_usable_size+0x2f>
c00017cb:	83 e2 fc             	and    edx,0xfffffffc
c00017ce:	8d 42 fc             	lea    eax,[edx-0x4]
c00017d1:	5b                   	pop    ebx
c00017d2:	c3                   	ret    

c00017d3 <dlmallinfo>:
c00017d3:	55                   	push   ebp
c00017d4:	57                   	push   edi
c00017d5:	56                   	push   esi
c00017d6:	53                   	push   ebx
c00017d7:	83 ec 08             	sub    esp,0x8
c00017da:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00017de:	83 3d 2c 30 02 c0 00 	cmp    DWORD PTR ds:0xc002302c,0x0
c00017e5:	75 0a                	jne    c00017f1 <dlmallinfo+0x1e>
c00017e7:	b8 00 30 02 c0       	mov    eax,0xc0023000
c00017ec:	e8 11 f2 ff ff       	call   c0000a02 <malloc_consolidate>
c00017f1:	a1 2c 30 02 c0       	mov    eax,ds:0xc002302c
c00017f6:	31 ed                	xor    ebp,ebp
c00017f8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00017fb:	31 c9                	xor    ecx,ecx
c00017fd:	83 e0 fc             	and    eax,0xfffffffc
c0001800:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001804:	31 c0                	xor    eax,eax
c0001806:	8b 14 85 04 30 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdcffc]
c000180d:	85 d2                	test   edx,edx
c000180f:	74 0e                	je     c000181f <dlmallinfo+0x4c>
c0001811:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001814:	45                   	inc    ebp
c0001815:	83 e6 fc             	and    esi,0xfffffffc
c0001818:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000181b:	01 f1                	add    ecx,esi
c000181d:	eb ee                	jmp    c000180d <dlmallinfo+0x3a>
c000181f:	40                   	inc    eax
c0001820:	83 f8 0a             	cmp    eax,0xa
c0001823:	75 e1                	jne    c0001806 <dlmallinfo+0x33>
c0001825:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001829:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001830:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001833:	b8 34 30 02 c0       	mov    eax,0xc0023034
c0001838:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c000183b:	39 f0                	cmp    eax,esi
c000183d:	74 10                	je     c000184f <dlmallinfo+0x7c>
c000183f:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001842:	ff 04 24             	inc    DWORD PTR [esp]
c0001845:	83 e7 fc             	and    edi,0xfffffffc
c0001848:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c000184b:	01 fa                	add    edx,edi
c000184d:	eb ec                	jmp    c000183b <dlmallinfo+0x68>
c000184f:	83 c0 08             	add    eax,0x8
c0001852:	3d 2c 33 02 c0       	cmp    eax,0xc002332c
c0001857:	75 df                	jne    c0001838 <dlmallinfo+0x65>
c0001859:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c000185c:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c000185f:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001862:	a1 68 33 02 c0       	mov    eax,ds:0xc0023368
c0001867:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000186a:	89 03                	mov    DWORD PTR [ebx],eax
c000186c:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c000186f:	8b 35 50 33 02 c0    	mov    esi,DWORD PTR ds:0xc0023350
c0001875:	29 d0                	sub    eax,edx
c0001877:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c000187a:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000187d:	8b 35 64 33 02 c0    	mov    esi,DWORD PTR ds:0xc0023364
c0001883:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001887:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c000188a:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000188d:	8b 35 74 33 02 c0    	mov    esi,DWORD PTR ds:0xc0023374
c0001893:	89 d8                	mov    eax,ebx
c0001895:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001898:	83 c4 08             	add    esp,0x8
c000189b:	5b                   	pop    ebx
c000189c:	5e                   	pop    esi
c000189d:	5f                   	pop    edi
c000189e:	5d                   	pop    ebp
c000189f:	c2 04 00             	ret    0x4

c00018a2 <dlmalloc_stats>:
c00018a2:	83 ec 30             	sub    esp,0x30
c00018a5:	8d 44 24 08          	lea    eax,[esp+0x8]
c00018a9:	50                   	push   eax
c00018aa:	e8 24 ff ff ff       	call   c00017d3 <dlmallinfo>
c00018af:	83 c4 30             	add    esp,0x30
c00018b2:	c3                   	ret    

c00018b3 <dlmallopt>:
c00018b3:	56                   	push   esi
c00018b4:	b8 00 30 02 c0       	mov    eax,0xc0023000
c00018b9:	53                   	push   ebx
c00018ba:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00018be:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00018c2:	e8 3b f1 ff ff       	call   c0000a02 <malloc_consolidate>
c00018c7:	8d 46 04             	lea    eax,[esi+0x4]
c00018ca:	83 f8 05             	cmp    eax,0x5
c00018cd:	77 67                	ja     c0001936 <dlmallopt+0x83>
c00018cf:	ff 24 85 c4 f2 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe0d3c]
c00018d6:	83 fb 50             	cmp    ebx,0x50
c00018d9:	77 5b                	ja     c0001936 <dlmallopt+0x83>
c00018db:	ba 08 00 00 00       	mov    edx,0x8
c00018e0:	85 db                	test   ebx,ebx
c00018e2:	74 12                	je     c00018f6 <dlmallopt+0x43>
c00018e4:	83 c3 0b             	add    ebx,0xb
c00018e7:	ba 10 00 00 00       	mov    edx,0x10
c00018ec:	83 fb 0f             	cmp    ebx,0xf
c00018ef:	76 05                	jbe    c00018f6 <dlmallopt+0x43>
c00018f1:	89 da                	mov    edx,ebx
c00018f3:	83 e2 f8             	and    edx,0xfffffff8
c00018f6:	a1 00 30 02 c0       	mov    eax,ds:0xc0023000
c00018fb:	83 e0 03             	and    eax,0x3
c00018fe:	09 d0                	or     eax,edx
c0001900:	a3 00 30 02 c0       	mov    ds:0xc0023000,eax
c0001905:	eb 31                	jmp    c0001938 <dlmallopt+0x85>
c0001907:	89 1d 44 33 02 c0    	mov    DWORD PTR ds:0xc0023344,ebx
c000190d:	eb 06                	jmp    c0001915 <dlmallopt+0x62>
c000190f:	89 1d 48 33 02 c0    	mov    DWORD PTR ds:0xc0023348,ebx
c0001915:	be 01 00 00 00       	mov    esi,0x1
c000191a:	eb 1c                	jmp    c0001938 <dlmallopt+0x85>
c000191c:	89 1d 4c 33 02 c0    	mov    DWORD PTR ds:0xc002334c,ebx
c0001922:	eb f1                	jmp    c0001915 <dlmallopt+0x62>
c0001924:	31 f6                	xor    esi,esi
c0001926:	85 db                	test   ebx,ebx
c0001928:	75 0e                	jne    c0001938 <dlmallopt+0x85>
c000192a:	c7 05 54 33 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023354,0x0
c0001934:	eb df                	jmp    c0001915 <dlmallopt+0x62>
c0001936:	31 f6                	xor    esi,esi
c0001938:	89 f0                	mov    eax,esi
c000193a:	5b                   	pop    ebx
c000193b:	5e                   	pop    esi
c000193c:	c3                   	ret    

c000193d <disk_status>:
c000193d:	31 c0                	xor    eax,eax
c000193f:	c3                   	ret    

c0001940 <disk_initialize>:
c0001940:	31 c0                	xor    eax,eax
c0001942:	c3                   	ret    

c0001943 <disk_read>:
c0001943:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001948:	0f b6 04 85 20 49 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdb6e0]
c0001950:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001954:	e9 0f 7e 01 00       	jmp    c0019768 <fatWrapperReadDisk>

c0001959 <disk_write>:
c0001959:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000195e:	0f b6 04 85 20 49 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdb6e0]
c0001966:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000196a:	e9 40 7e 01 00       	jmp    c00197af <fatWrapperWriteDisk>

c000196f <disk_ioctl>:
c000196f:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001974:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001978:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000197d:	0f b6 04 85 20 49 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdb6e0]
c0001985:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001989:	e9 68 7e 01 00       	jmp    c00197f6 <fatWrapperIoctl>

c000198e <ld_word>:
c000198e:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001992:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001995:	c1 e2 08             	shl    edx,0x8
c0001998:	09 d0                	or     eax,edx
c000199a:	c3                   	ret    

c000199b <ld_dword>:
c000199b:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c000199f:	89 d1                	mov    ecx,edx
c00019a1:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c00019a5:	c1 e1 08             	shl    ecx,0x8
c00019a8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00019ab:	09 ca                	or     edx,ecx
c00019ad:	c1 e2 08             	shl    edx,0x8
c00019b0:	09 d0                	or     eax,edx
c00019b2:	c3                   	ret    

c00019b3 <ld_qword>:
c00019b3:	57                   	push   edi
c00019b4:	56                   	push   esi
c00019b5:	53                   	push   ebx
c00019b6:	31 db                	xor    ebx,ebx
c00019b8:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c00019bb:	89 df                	mov    edi,ebx
c00019bd:	89 ce                	mov    esi,ecx
c00019bf:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c00019c3:	0f a4 f7 08          	shld   edi,esi,0x8
c00019c7:	c1 e6 08             	shl    esi,0x8
c00019ca:	09 f2                	or     edx,esi
c00019cc:	89 d6                	mov    esi,edx
c00019ce:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c00019d2:	0f a4 f7 08          	shld   edi,esi,0x8
c00019d6:	c1 e6 08             	shl    esi,0x8
c00019d9:	09 f2                	or     edx,esi
c00019db:	89 d6                	mov    esi,edx
c00019dd:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c00019e1:	0f a4 f7 08          	shld   edi,esi,0x8
c00019e5:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00019e8:	c1 e6 08             	shl    esi,0x8
c00019eb:	89 fb                	mov    ebx,edi
c00019ed:	09 f2                	or     edx,esi
c00019ef:	89 d1                	mov    ecx,edx
c00019f1:	0f a4 cb 08          	shld   ebx,ecx,0x8
c00019f5:	c1 e1 08             	shl    ecx,0x8
c00019f8:	89 da                	mov    edx,ebx
c00019fa:	09 c8                	or     eax,ecx
c00019fc:	5b                   	pop    ebx
c00019fd:	5e                   	pop    esi
c00019fe:	5f                   	pop    edi
c00019ff:	c3                   	ret    

c0001a00 <st_word>:
c0001a00:	66 89 10             	mov    WORD PTR [eax],dx
c0001a03:	c3                   	ret    

c0001a04 <st_dword>:
c0001a04:	89 10                	mov    DWORD PTR [eax],edx
c0001a06:	c3                   	ret    

c0001a07 <st_qword>:
c0001a07:	89 10                	mov    DWORD PTR [eax],edx
c0001a09:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001a0c:	c3                   	ret    

c0001a0d <mem_cpy>:
c0001a0d:	85 c9                	test   ecx,ecx
c0001a0f:	74 10                	je     c0001a21 <mem_cpy+0x14>
c0001a11:	57                   	push   edi
c0001a12:	01 c1                	add    ecx,eax
c0001a14:	56                   	push   esi
c0001a15:	89 c7                	mov    edi,eax
c0001a17:	89 d6                	mov    esi,edx
c0001a19:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001a1a:	39 f9                	cmp    ecx,edi
c0001a1c:	75 fb                	jne    c0001a19 <mem_cpy+0xc>
c0001a1e:	5e                   	pop    esi
c0001a1f:	5f                   	pop    edi
c0001a20:	c3                   	ret    
c0001a21:	c3                   	ret    

c0001a22 <mem_set>:
c0001a22:	01 c1                	add    ecx,eax
c0001a24:	40                   	inc    eax
c0001a25:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001a28:	39 c8                	cmp    eax,ecx
c0001a2a:	75 f8                	jne    c0001a24 <mem_set+0x2>
c0001a2c:	c3                   	ret    

c0001a2d <mem_cmp>:
c0001a2d:	57                   	push   edi
c0001a2e:	56                   	push   esi
c0001a2f:	89 c6                	mov    esi,eax
c0001a31:	53                   	push   ebx
c0001a32:	46                   	inc    esi
c0001a33:	42                   	inc    edx
c0001a34:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001a38:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001a3c:	29 fb                	sub    ebx,edi
c0001a3e:	89 cf                	mov    edi,ecx
c0001a40:	29 f7                	sub    edi,esi
c0001a42:	01 c7                	add    edi,eax
c0001a44:	74 04                	je     c0001a4a <mem_cmp+0x1d>
c0001a46:	85 db                	test   ebx,ebx
c0001a48:	74 e8                	je     c0001a32 <mem_cmp+0x5>
c0001a4a:	89 d8                	mov    eax,ebx
c0001a4c:	5b                   	pop    ebx
c0001a4d:	5e                   	pop    esi
c0001a4e:	5f                   	pop    edi
c0001a4f:	c3                   	ret    

c0001a50 <chk_chr>:
c0001a50:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001a53:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001a56:	74 07                	je     c0001a5f <chk_chr+0xf>
c0001a58:	39 d1                	cmp    ecx,edx
c0001a5a:	74 03                	je     c0001a5f <chk_chr+0xf>
c0001a5c:	40                   	inc    eax
c0001a5d:	eb f1                	jmp    c0001a50 <chk_chr>
c0001a5f:	89 c8                	mov    eax,ecx
c0001a61:	c3                   	ret    

c0001a62 <dbc_1st>:
c0001a62:	31 c0                	xor    eax,eax
c0001a64:	c3                   	ret    

c0001a65 <dbc_2nd>:
c0001a65:	31 c0                	xor    eax,eax
c0001a67:	c3                   	ret    

c0001a68 <tchar2uni>:
c0001a68:	57                   	push   edi
c0001a69:	89 c7                	mov    edi,eax
c0001a6b:	56                   	push   esi
c0001a6c:	53                   	push   ebx
c0001a6d:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001a6f:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001a71:	8d 73 01             	lea    esi,[ebx+0x1]
c0001a74:	84 c9                	test   cl,cl
c0001a76:	78 0a                	js     c0001a82 <tchar2uni+0x1a>
c0001a78:	0f b6 d1             	movzx  edx,cl
c0001a7b:	89 f3                	mov    ebx,esi
c0001a7d:	e9 9f 00 00 00       	jmp    c0001b21 <tchar2uni+0xb9>
c0001a82:	88 ca                	mov    dl,cl
c0001a84:	83 e2 e0             	and    edx,0xffffffe0
c0001a87:	80 fa c0             	cmp    dl,0xc0
c0001a8a:	75 0c                	jne    c0001a98 <tchar2uni+0x30>
c0001a8c:	89 ca                	mov    edx,ecx
c0001a8e:	b9 01 00 00 00       	mov    ecx,0x1
c0001a93:	83 e2 1f             	and    edx,0x1f
c0001a96:	eb 2e                	jmp    c0001ac6 <tchar2uni+0x5e>
c0001a98:	88 ca                	mov    dl,cl
c0001a9a:	83 e2 f0             	and    edx,0xfffffff0
c0001a9d:	80 fa e0             	cmp    dl,0xe0
c0001aa0:	75 0c                	jne    c0001aae <tchar2uni+0x46>
c0001aa2:	89 ca                	mov    edx,ecx
c0001aa4:	b9 02 00 00 00       	mov    ecx,0x2
c0001aa9:	83 e2 0f             	and    edx,0xf
c0001aac:	eb 18                	jmp    c0001ac6 <tchar2uni+0x5e>
c0001aae:	88 ca                	mov    dl,cl
c0001ab0:	83 e2 f8             	and    edx,0xfffffff8
c0001ab3:	88 d0                	mov    al,dl
c0001ab5:	83 ca ff             	or     edx,0xffffffff
c0001ab8:	3c f0                	cmp    al,0xf0
c0001aba:	75 6c                	jne    c0001b28 <tchar2uni+0xc0>
c0001abc:	89 ca                	mov    edx,ecx
c0001abe:	b9 03 00 00 00       	mov    ecx,0x3
c0001ac3:	83 e2 07             	and    edx,0x7
c0001ac6:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001aca:	46                   	inc    esi
c0001acb:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001ace:	88 c8                	mov    al,cl
c0001ad0:	83 e0 c0             	and    eax,0xffffffc0
c0001ad3:	3c 80                	cmp    al,0x80
c0001ad5:	75 4e                	jne    c0001b25 <tchar2uni+0xbd>
c0001ad7:	c1 e2 06             	shl    edx,0x6
c0001ada:	83 e1 3f             	and    ecx,0x3f
c0001add:	09 ca                	or     edx,ecx
c0001adf:	39 de                	cmp    esi,ebx
c0001ae1:	75 e7                	jne    c0001aca <tchar2uni+0x62>
c0001ae3:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001ae6:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001aec:	77 37                	ja     c0001b25 <tchar2uni+0xbd>
c0001aee:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001af4:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001afa:	76 29                	jbe    c0001b25 <tchar2uni+0xbd>
c0001afc:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001b02:	76 1d                	jbe    c0001b21 <tchar2uni+0xb9>
c0001b04:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001b0a:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001b10:	c1 e1 06             	shl    ecx,0x6
c0001b13:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001b19:	09 ca                	or     edx,ecx
c0001b1b:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001b21:	89 1f                	mov    DWORD PTR [edi],ebx
c0001b23:	eb 03                	jmp    c0001b28 <tchar2uni+0xc0>
c0001b25:	83 ca ff             	or     edx,0xffffffff
c0001b28:	5b                   	pop    ebx
c0001b29:	89 d0                	mov    eax,edx
c0001b2b:	5e                   	pop    esi
c0001b2c:	5f                   	pop    edi
c0001b2d:	c3                   	ret    

c0001b2e <put_utf>:
c0001b2e:	53                   	push   ebx
c0001b2f:	83 f8 7f             	cmp    eax,0x7f
c0001b32:	89 c3                	mov    ebx,eax
c0001b34:	b0 00                	mov    al,0x0
c0001b36:	77 11                	ja     c0001b49 <put_utf+0x1b>
c0001b38:	85 c9                	test   ecx,ecx
c0001b3a:	0f 84 e5 00 00 00    	je     c0001c25 <put_utf+0xf7>
c0001b40:	88 1a                	mov    BYTE PTR [edx],bl
c0001b42:	b0 01                	mov    al,0x1
c0001b44:	e9 dc 00 00 00       	jmp    c0001c25 <put_utf+0xf7>
c0001b49:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001b4f:	77 23                	ja     c0001b74 <put_utf+0x46>
c0001b51:	83 f9 01             	cmp    ecx,0x1
c0001b54:	0f 86 cb 00 00 00    	jbe    c0001c25 <put_utf+0xf7>
c0001b5a:	89 d8                	mov    eax,ebx
c0001b5c:	83 e3 3f             	and    ebx,0x3f
c0001b5f:	c1 e8 06             	shr    eax,0x6
c0001b62:	83 cb 80             	or     ebx,0xffffff80
c0001b65:	83 c8 c0             	or     eax,0xffffffc0
c0001b68:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001b6b:	88 02                	mov    BYTE PTR [edx],al
c0001b6d:	b0 02                	mov    al,0x2
c0001b6f:	e9 b1 00 00 00       	jmp    c0001c25 <put_utf+0xf7>
c0001b74:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001b7a:	77 40                	ja     c0001bbc <put_utf+0x8e>
c0001b7c:	83 f9 02             	cmp    ecx,0x2
c0001b7f:	0f 86 a0 00 00 00    	jbe    c0001c25 <put_utf+0xf7>
c0001b85:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001b8b:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001b91:	0f 86 8e 00 00 00    	jbe    c0001c25 <put_utf+0xf7>
c0001b97:	89 d8                	mov    eax,ebx
c0001b99:	c1 e8 0c             	shr    eax,0xc
c0001b9c:	83 c8 e0             	or     eax,0xffffffe0
c0001b9f:	88 02                	mov    BYTE PTR [edx],al
c0001ba1:	89 d8                	mov    eax,ebx
c0001ba3:	83 e3 3f             	and    ebx,0x3f
c0001ba6:	c1 e8 06             	shr    eax,0x6
c0001ba9:	83 cb 80             	or     ebx,0xffffff80
c0001bac:	83 e0 3f             	and    eax,0x3f
c0001baf:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001bb2:	83 c8 80             	or     eax,0xffffff80
c0001bb5:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001bb8:	b0 03                	mov    al,0x3
c0001bba:	eb 69                	jmp    c0001c25 <put_utf+0xf7>
c0001bbc:	83 f9 03             	cmp    ecx,0x3
c0001bbf:	76 64                	jbe    c0001c25 <put_utf+0xf7>
c0001bc1:	89 d9                	mov    ecx,ebx
c0001bc3:	0f b7 c3             	movzx  eax,bx
c0001bc6:	66 31 c9             	xor    cx,cx
c0001bc9:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001bcf:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001bd5:	c1 e9 06             	shr    ecx,0x6
c0001bd8:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001bde:	77 43                	ja     c0001c23 <put_utf+0xf5>
c0001be0:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001be6:	77 3b                	ja     c0001c23 <put_utf+0xf5>
c0001be8:	09 cb                	or     ebx,ecx
c0001bea:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001bf0:	89 d8                	mov    eax,ebx
c0001bf2:	c1 e8 12             	shr    eax,0x12
c0001bf5:	83 c8 f0             	or     eax,0xfffffff0
c0001bf8:	88 02                	mov    BYTE PTR [edx],al
c0001bfa:	89 d8                	mov    eax,ebx
c0001bfc:	c1 e8 0c             	shr    eax,0xc
c0001bff:	83 e0 3f             	and    eax,0x3f
c0001c02:	83 c8 80             	or     eax,0xffffff80
c0001c05:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001c08:	89 d8                	mov    eax,ebx
c0001c0a:	83 e3 3f             	and    ebx,0x3f
c0001c0d:	c1 e8 06             	shr    eax,0x6
c0001c10:	83 cb 80             	or     ebx,0xffffff80
c0001c13:	83 e0 3f             	and    eax,0x3f
c0001c16:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001c19:	83 c8 80             	or     eax,0xffffff80
c0001c1c:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001c1f:	b0 04                	mov    al,0x4
c0001c21:	eb 02                	jmp    c0001c25 <put_utf+0xf7>
c0001c23:	31 c0                	xor    eax,eax
c0001c25:	5b                   	pop    ebx
c0001c26:	c3                   	ret    

c0001c27 <clst2sect>:
c0001c27:	89 c1                	mov    ecx,eax
c0001c29:	83 ea 02             	sub    edx,0x2
c0001c2c:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001c2f:	83 e8 02             	sub    eax,0x2
c0001c32:	39 d0                	cmp    eax,edx
c0001c34:	76 0d                	jbe    c0001c43 <clst2sect+0x1c>
c0001c36:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001c3a:	f7 e2                	mul    edx
c0001c3c:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001c3f:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001c42:	c3                   	ret    
c0001c43:	31 c0                	xor    eax,eax
c0001c45:	31 d2                	xor    edx,edx
c0001c47:	c3                   	ret    

c0001c48 <clmt_clust>:
c0001c48:	57                   	push   edi
c0001c49:	89 cf                	mov    edi,ecx
c0001c4b:	56                   	push   esi
c0001c4c:	89 d6                	mov    esi,edx
c0001c4e:	53                   	push   ebx
c0001c4f:	0f ac fe 09          	shrd   esi,edi,0x9
c0001c53:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001c56:	89 f2                	mov    edx,esi
c0001c58:	8b 00                	mov    eax,DWORD PTR [eax]
c0001c5a:	c1 ef 09             	shr    edi,0x9
c0001c5d:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001c61:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001c64:	89 f9                	mov    ecx,edi
c0001c66:	31 ff                	xor    edi,edi
c0001c68:	57                   	push   edi
c0001c69:	56                   	push   esi
c0001c6a:	51                   	push   ecx
c0001c6b:	52                   	push   edx
c0001c6c:	e8 4b c7 01 00       	call   c001e3bc <__udivdi3>
c0001c71:	83 c4 10             	add    esp,0x10
c0001c74:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001c76:	85 d2                	test   edx,edx
c0001c78:	74 10                	je     c0001c8a <clmt_clust+0x42>
c0001c7a:	39 d0                	cmp    eax,edx
c0001c7c:	72 07                	jb     c0001c85 <clmt_clust+0x3d>
c0001c7e:	29 d0                	sub    eax,edx
c0001c80:	83 c3 08             	add    ebx,0x8
c0001c83:	eb ef                	jmp    c0001c74 <clmt_clust+0x2c>
c0001c85:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001c88:	89 c2                	mov    edx,eax
c0001c8a:	5b                   	pop    ebx
c0001c8b:	89 d0                	mov    eax,edx
c0001c8d:	5e                   	pop    esi
c0001c8e:	5f                   	pop    edi
c0001c8f:	c3                   	ret    

c0001c90 <pick_lfn>:
c0001c90:	55                   	push   ebp
c0001c91:	57                   	push   edi
c0001c92:	56                   	push   esi
c0001c93:	89 d6                	mov    esi,edx
c0001c95:	53                   	push   ebx
c0001c96:	89 c3                	mov    ebx,eax
c0001c98:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001c9b:	e8 ee fc ff ff       	call   c000198e <ld_word>
c0001ca0:	66 85 c0             	test   ax,ax
c0001ca3:	74 04                	je     c0001ca9 <pick_lfn+0x19>
c0001ca5:	31 c0                	xor    eax,eax
c0001ca7:	eb 5c                	jmp    c0001d05 <pick_lfn+0x75>
c0001ca9:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001cac:	bd 01 00 00 00       	mov    ebp,0x1
c0001cb1:	83 e1 bf             	and    ecx,0xffffffbf
c0001cb4:	31 ff                	xor    edi,edi
c0001cb6:	49                   	dec    ecx
c0001cb7:	6b c9 0d             	imul   ecx,ecx,0xd
c0001cba:	0f b6 87 e0 f3 01 c0 	movzx  eax,BYTE PTR [edi-0x3ffe0c20]
c0001cc1:	01 f0                	add    eax,esi
c0001cc3:	e8 c6 fc ff ff       	call   c000198e <ld_word>
c0001cc8:	66 85 ed             	test   bp,bp
c0001ccb:	74 11                	je     c0001cde <pick_lfn+0x4e>
c0001ccd:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001cd3:	77 d0                	ja     c0001ca5 <pick_lfn+0x15>
c0001cd5:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001cd9:	89 c5                	mov    ebp,eax
c0001cdb:	41                   	inc    ecx
c0001cdc:	eb 04                	jmp    c0001ce2 <pick_lfn+0x52>
c0001cde:	66 40                	inc    ax
c0001ce0:	75 c3                	jne    c0001ca5 <pick_lfn+0x15>
c0001ce2:	47                   	inc    edi
c0001ce3:	83 ff 0d             	cmp    edi,0xd
c0001ce6:	75 d2                	jne    c0001cba <pick_lfn+0x2a>
c0001ce8:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001ceb:	74 13                	je     c0001d00 <pick_lfn+0x70>
c0001ced:	66 85 ed             	test   bp,bp
c0001cf0:	74 0e                	je     c0001d00 <pick_lfn+0x70>
c0001cf2:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001cf8:	77 ab                	ja     c0001ca5 <pick_lfn+0x15>
c0001cfa:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001d00:	b8 01 00 00 00       	mov    eax,0x1
c0001d05:	5b                   	pop    ebx
c0001d06:	5e                   	pop    esi
c0001d07:	5f                   	pop    edi
c0001d08:	5d                   	pop    ebp
c0001d09:	c3                   	ret    

c0001d0a <put_lfn>:
c0001d0a:	55                   	push   ebp
c0001d0b:	31 ed                	xor    ebp,ebp
c0001d0d:	57                   	push   edi
c0001d0e:	89 d7                	mov    edi,edx
c0001d10:	56                   	push   esi
c0001d11:	31 f6                	xor    esi,esi
c0001d13:	53                   	push   ebx
c0001d14:	83 ec 08             	sub    esp,0x8
c0001d17:	89 04 24             	mov    DWORD PTR [esp],eax
c0001d1a:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001d1e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001d22:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001d28:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001d2b:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001d2e:	31 d2                	xor    edx,edx
c0001d30:	e8 cb fc ff ff       	call   c0001a00 <st_word>
c0001d35:	0f b6 d9             	movzx  ebx,cl
c0001d38:	4b                   	dec    ebx
c0001d39:	6b db 0d             	imul   ebx,ebx,0xd
c0001d3c:	66 83 fe ff          	cmp    si,0xffff
c0001d40:	74 08                	je     c0001d4a <put_lfn+0x40>
c0001d42:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001d45:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001d49:	43                   	inc    ebx
c0001d4a:	0f b6 85 e0 f3 01 c0 	movzx  eax,BYTE PTR [ebp-0x3ffe0c20]
c0001d51:	0f b7 d6             	movzx  edx,si
c0001d54:	01 f8                	add    eax,edi
c0001d56:	e8 a5 fc ff ff       	call   c0001a00 <st_word>
c0001d5b:	66 85 f6             	test   si,si
c0001d5e:	75 03                	jne    c0001d63 <put_lfn+0x59>
c0001d60:	83 ce ff             	or     esi,0xffffffff
c0001d63:	45                   	inc    ebp
c0001d64:	83 fd 0d             	cmp    ebp,0xd
c0001d67:	75 d3                	jne    c0001d3c <put_lfn+0x32>
c0001d69:	66 46                	inc    si
c0001d6b:	74 0a                	je     c0001d77 <put_lfn+0x6d>
c0001d6d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001d70:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0001d75:	75 09                	jne    c0001d80 <put_lfn+0x76>
c0001d77:	88 c8                	mov    al,cl
c0001d79:	83 c8 40             	or     eax,0x40
c0001d7c:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0001d80:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0001d84:	88 07                	mov    BYTE PTR [edi],al
c0001d86:	83 c4 08             	add    esp,0x8
c0001d89:	5b                   	pop    ebx
c0001d8a:	5e                   	pop    esi
c0001d8b:	5f                   	pop    edi
c0001d8c:	5d                   	pop    ebp
c0001d8d:	c3                   	ret    

c0001d8e <gen_numname>:
c0001d8e:	57                   	push   edi
c0001d8f:	89 cf                	mov    edi,ecx
c0001d91:	56                   	push   esi
c0001d92:	b9 0b 00 00 00       	mov    ecx,0xb
c0001d97:	53                   	push   ebx
c0001d98:	89 c6                	mov    esi,eax
c0001d9a:	83 ec 10             	sub    esp,0x10
c0001d9d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0001da1:	e8 67 fc ff ff       	call   c0001a0d <mem_cpy>
c0001da6:	83 fb 05             	cmp    ebx,0x5
c0001da9:	76 2d                	jbe    c0001dd8 <gen_numname+0x4a>
c0001dab:	66 8b 07             	mov    ax,WORD PTR [edi]
c0001dae:	66 85 c0             	test   ax,ax
c0001db1:	74 25                	je     c0001dd8 <gen_numname+0x4a>
c0001db3:	83 c7 02             	add    edi,0x2
c0001db6:	ba 10 00 00 00       	mov    edx,0x10
c0001dbb:	01 db                	add    ebx,ebx
c0001dbd:	89 c1                	mov    ecx,eax
c0001dbf:	66 d1 e8             	shr    ax,1
c0001dc2:	83 e1 01             	and    ecx,0x1
c0001dc5:	01 cb                	add    ebx,ecx
c0001dc7:	0f ba e3 10          	bt     ebx,0x10
c0001dcb:	73 06                	jae    c0001dd3 <gen_numname+0x45>
c0001dcd:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0001dd3:	4a                   	dec    edx
c0001dd4:	75 e5                	jne    c0001dbb <gen_numname+0x2d>
c0001dd6:	eb d3                	jmp    c0001dab <gen_numname+0x1d>
c0001dd8:	b8 07 00 00 00       	mov    eax,0x7
c0001ddd:	88 d9                	mov    cl,bl
c0001ddf:	83 e1 0f             	and    ecx,0xf
c0001de2:	8d 51 30             	lea    edx,[ecx+0x30]
c0001de5:	80 fa 39             	cmp    dl,0x39
c0001de8:	76 03                	jbe    c0001ded <gen_numname+0x5f>
c0001dea:	8d 51 37             	lea    edx,[ecx+0x37]
c0001ded:	8d 48 ff             	lea    ecx,[eax-0x1]
c0001df0:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0001df4:	89 da                	mov    edx,ebx
c0001df6:	c1 ea 04             	shr    edx,0x4
c0001df9:	83 fb 0f             	cmp    ebx,0xf
c0001dfc:	76 06                	jbe    c0001e04 <gen_numname+0x76>
c0001dfe:	89 c8                	mov    eax,ecx
c0001e00:	89 d3                	mov    ebx,edx
c0001e02:	eb d9                	jmp    c0001ddd <gen_numname+0x4f>
c0001e04:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0001e09:	31 d2                	xor    edx,edx
c0001e0b:	8d 58 fe             	lea    ebx,[eax-0x2]
c0001e0e:	8d 04 16             	lea    eax,[esi+edx*1]
c0001e11:	39 ca                	cmp    edx,ecx
c0001e13:	73 18                	jae    c0001e2d <gen_numname+0x9f>
c0001e15:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001e18:	3c 20                	cmp    al,0x20
c0001e1a:	74 11                	je     c0001e2d <gen_numname+0x9f>
c0001e1c:	e8 41 fc ff ff       	call   c0001a62 <dbc_1st>
c0001e21:	85 c0                	test   eax,eax
c0001e23:	74 05                	je     c0001e2a <gen_numname+0x9c>
c0001e25:	39 d3                	cmp    ebx,edx
c0001e27:	74 04                	je     c0001e2d <gen_numname+0x9f>
c0001e29:	42                   	inc    edx
c0001e2a:	42                   	inc    edx
c0001e2b:	eb e1                	jmp    c0001e0e <gen_numname+0x80>
c0001e2d:	b0 20                	mov    al,0x20
c0001e2f:	83 f9 07             	cmp    ecx,0x7
c0001e32:	77 05                	ja     c0001e39 <gen_numname+0xab>
c0001e34:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0001e38:	41                   	inc    ecx
c0001e39:	42                   	inc    edx
c0001e3a:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0001e3e:	83 fa 07             	cmp    edx,0x7
c0001e41:	76 ea                	jbe    c0001e2d <gen_numname+0x9f>
c0001e43:	83 c4 10             	add    esp,0x10
c0001e46:	5b                   	pop    ebx
c0001e47:	5e                   	pop    esi
c0001e48:	5f                   	pop    edi
c0001e49:	c3                   	ret    

c0001e4a <sum_sfn>:
c0001e4a:	31 c9                	xor    ecx,ecx
c0001e4c:	31 d2                	xor    edx,edx
c0001e4e:	d0 ca                	ror    dl,1
c0001e50:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0001e53:	41                   	inc    ecx
c0001e54:	83 f9 0b             	cmp    ecx,0xb
c0001e57:	75 f5                	jne    c0001e4e <sum_sfn+0x4>
c0001e59:	88 d0                	mov    al,dl
c0001e5b:	c3                   	ret    

c0001e5c <xdir_sum>:
c0001e5c:	56                   	push   esi
c0001e5d:	31 c9                	xor    ecx,ecx
c0001e5f:	53                   	push   ebx
c0001e60:	31 d2                	xor    edx,edx
c0001e62:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0001e66:	43                   	inc    ebx
c0001e67:	c1 e3 05             	shl    ebx,0x5
c0001e6a:	83 fa 02             	cmp    edx,0x2
c0001e6d:	74 0b                	je     c0001e7a <xdir_sum+0x1e>
c0001e6f:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0001e73:	66 d1 c9             	ror    cx,1
c0001e76:	01 f1                	add    ecx,esi
c0001e78:	eb 05                	jmp    c0001e7f <xdir_sum+0x23>
c0001e7a:	ba 03 00 00 00       	mov    edx,0x3
c0001e7f:	42                   	inc    edx
c0001e80:	39 d3                	cmp    ebx,edx
c0001e82:	77 e6                	ja     c0001e6a <xdir_sum+0xe>
c0001e84:	89 c8                	mov    eax,ecx
c0001e86:	5b                   	pop    ebx
c0001e87:	5e                   	pop    esi
c0001e88:	c3                   	ret    

c0001e89 <xsum32>:
c0001e89:	d1 ca                	ror    edx,1
c0001e8b:	0f b6 c0             	movzx  eax,al
c0001e8e:	01 d0                	add    eax,edx
c0001e90:	c3                   	ret    

c0001e91 <get_xfileinfo>:
c0001e91:	55                   	push   ebp
c0001e92:	31 c9                	xor    ecx,ecx
c0001e94:	57                   	push   edi
c0001e95:	bd 40 00 00 00       	mov    ebp,0x40
c0001e9a:	56                   	push   esi
c0001e9b:	31 ff                	xor    edi,edi
c0001e9d:	53                   	push   ebx
c0001e9e:	89 c6                	mov    esi,eax
c0001ea0:	83 ec 0c             	sub    esp,0xc
c0001ea3:	89 d3                	mov    ebx,edx
c0001ea5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0001eac:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0001eb0:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0001eb3:	76 6d                	jbe    c0001f22 <get_xfileinfo+0x91>
c0001eb5:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0001ebb:	76 0b                	jbe    c0001ec8 <get_xfileinfo+0x37>
c0001ebd:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0001ec1:	bf 01 00 00 00       	mov    edi,0x1
c0001ec6:	eb 63                	jmp    c0001f2b <get_xfileinfo+0x9a>
c0001ec8:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0001ece:	75 03                	jne    c0001ed3 <get_xfileinfo+0x42>
c0001ed0:	83 c5 02             	add    ebp,0x2
c0001ed3:	8d 04 2e             	lea    eax,[esi+ebp*1]
c0001ed6:	83 c5 02             	add    ebp,0x2
c0001ed9:	e8 b0 fa ff ff       	call   c000198e <ld_word>
c0001ede:	ff 04 24             	inc    DWORD PTR [esp]
c0001ee1:	66 85 c9             	test   cx,cx
c0001ee4:	75 0d                	jne    c0001ef3 <get_xfileinfo+0x62>
c0001ee6:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0001eec:	66 81 fa ff 07       	cmp    dx,0x7ff
c0001ef1:	76 2b                	jbe    c0001f1e <get_xfileinfo+0x8d>
c0001ef3:	c1 e1 10             	shl    ecx,0x10
c0001ef6:	ba ff 00 00 00       	mov    edx,0xff
c0001efb:	0f b7 c0             	movzx  eax,ax
c0001efe:	29 fa                	sub    edx,edi
c0001f00:	09 c8                	or     eax,ecx
c0001f02:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001f06:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0001f0a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001f0e:	e8 1b fc ff ff       	call   c0001b2e <put_utf>
c0001f13:	84 c0                	test   al,al
c0001f15:	74 a6                	je     c0001ebd <get_xfileinfo+0x2c>
c0001f17:	0f b6 c0             	movzx  eax,al
c0001f1a:	01 c7                	add    edi,eax
c0001f1c:	31 c0                	xor    eax,eax
c0001f1e:	89 c1                	mov    ecx,eax
c0001f20:	eb 8a                	jmp    c0001eac <get_xfileinfo+0x1b>
c0001f22:	85 ff                	test   edi,edi
c0001f24:	74 97                	je     c0001ebd <get_xfileinfo+0x2c>
c0001f26:	66 85 c9             	test   cx,cx
c0001f29:	75 92                	jne    c0001ebd <get_xfileinfo+0x2c>
c0001f2b:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0001f30:	31 c0                	xor    eax,eax
c0001f32:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0001f36:	31 d2                	xor    edx,edx
c0001f38:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c0001f3b:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c0001f3e:	80 e1 10             	and    cl,0x10
c0001f41:	75 08                	jne    c0001f4b <get_xfileinfo+0xba>
c0001f43:	8d 46 38             	lea    eax,[esi+0x38]
c0001f46:	e8 68 fa ff ff       	call   c00019b3 <ld_qword>
c0001f4b:	89 03                	mov    DWORD PTR [ebx],eax
c0001f4d:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001f50:	8d 46 0c             	lea    eax,[esi+0xc]
c0001f53:	e8 36 fa ff ff       	call   c000198e <ld_word>
c0001f58:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0001f5c:	8d 46 0e             	lea    eax,[esi+0xe]
c0001f5f:	e8 2a fa ff ff       	call   c000198e <ld_word>
c0001f64:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0001f68:	83 c4 0c             	add    esp,0xc
c0001f6b:	5b                   	pop    ebx
c0001f6c:	5e                   	pop    esi
c0001f6d:	5f                   	pop    edi
c0001f6e:	5d                   	pop    ebp
c0001f6f:	c3                   	ret    

c0001f70 <get_ldnumber>:
c0001f70:	8b 10                	mov    edx,DWORD PTR [eax]
c0001f72:	85 d2                	test   edx,edx
c0001f74:	74 14                	je     c0001f8a <get_ldnumber+0x1a>
c0001f76:	56                   	push   esi
c0001f77:	53                   	push   ebx
c0001f78:	89 d3                	mov    ebx,edx
c0001f7a:	43                   	inc    ebx
c0001f7b:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0001f7e:	80 f9 1f             	cmp    cl,0x1f
c0001f81:	76 0d                	jbe    c0001f90 <get_ldnumber+0x20>
c0001f83:	80 f9 3a             	cmp    cl,0x3a
c0001f86:	75 f2                	jne    c0001f7a <get_ldnumber+0xa>
c0001f88:	eb 0a                	jmp    c0001f94 <get_ldnumber+0x24>
c0001f8a:	83 c9 ff             	or     ecx,0xffffffff
c0001f8d:	89 c8                	mov    eax,ecx
c0001f8f:	c3                   	ret    
c0001f90:	31 c9                	xor    ecx,ecx
c0001f92:	eb 24                	jmp    c0001fb8 <get_ldnumber+0x48>
c0001f94:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0001f97:	8d 4e d0             	lea    ecx,[esi-0x30]
c0001f9a:	80 f9 09             	cmp    cl,0x9
c0001f9d:	77 16                	ja     c0001fb5 <get_ldnumber+0x45>
c0001f9f:	83 c2 02             	add    edx,0x2
c0001fa2:	83 c9 ff             	or     ecx,0xffffffff
c0001fa5:	39 d3                	cmp    ebx,edx
c0001fa7:	75 0f                	jne    c0001fb8 <get_ldnumber+0x48>
c0001fa9:	89 f2                	mov    edx,esi
c0001fab:	89 18                	mov    DWORD PTR [eax],ebx
c0001fad:	0f be ca             	movsx  ecx,dl
c0001fb0:	83 e9 30             	sub    ecx,0x30
c0001fb3:	eb 03                	jmp    c0001fb8 <get_ldnumber+0x48>
c0001fb5:	83 c9 ff             	or     ecx,0xffffffff
c0001fb8:	89 c8                	mov    eax,ecx
c0001fba:	5b                   	pop    ebx
c0001fbb:	5e                   	pop    esi
c0001fbc:	c3                   	ret    

c0001fbd <crc32>:
c0001fbd:	56                   	push   esi
c0001fbe:	89 d6                	mov    esi,edx
c0001fc0:	53                   	push   ebx
c0001fc1:	b2 01                	mov    dl,0x1
c0001fc3:	bb 08 00 00 00       	mov    ebx,0x8
c0001fc8:	89 f1                	mov    ecx,esi
c0001fca:	84 d1                	test   cl,dl
c0001fcc:	0f 95 c1             	setne  cl
c0001fcf:	0f b6 c9             	movzx  ecx,cl
c0001fd2:	31 c1                	xor    ecx,eax
c0001fd4:	89 c8                	mov    eax,ecx
c0001fd6:	d1 e8                	shr    eax,1
c0001fd8:	80 e1 01             	and    cl,0x1
c0001fdb:	74 05                	je     c0001fe2 <crc32+0x25>
c0001fdd:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0001fe2:	d1 e2                	shl    edx,1
c0001fe4:	4b                   	dec    ebx
c0001fe5:	75 e1                	jne    c0001fc8 <crc32+0xb>
c0001fe7:	5b                   	pop    ebx
c0001fe8:	5e                   	pop    esi
c0001fe9:	c3                   	ret    

c0001fea <test_gpt_header>:
c0001fea:	55                   	push   ebp
c0001feb:	b9 10 00 00 00       	mov    ecx,0x10
c0001ff0:	57                   	push   edi
c0001ff1:	ba e0 f2 01 c0       	mov    edx,0xc001f2e0
c0001ff6:	56                   	push   esi
c0001ff7:	31 ff                	xor    edi,edi
c0001ff9:	53                   	push   ebx
c0001ffa:	89 c3                	mov    ebx,eax
c0001ffc:	e8 2c fa ff ff       	call   c0001a2d <mem_cmp>
c0002001:	85 c0                	test   eax,eax
c0002003:	75 55                	jne    c000205a <test_gpt_header+0x70>
c0002005:	89 c7                	mov    edi,eax
c0002007:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c000200c:	83 ce ff             	or     esi,0xffffffff
c000200f:	31 d2                	xor    edx,edx
c0002011:	83 fd 03             	cmp    ebp,0x3
c0002014:	76 05                	jbe    c000201b <test_gpt_header+0x31>
c0002016:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c000201b:	89 f0                	mov    eax,esi
c000201d:	45                   	inc    ebp
c000201e:	e8 9a ff ff ff       	call   c0001fbd <crc32>
c0002023:	83 fd 4c             	cmp    ebp,0x4c
c0002026:	89 c6                	mov    esi,eax
c0002028:	75 e5                	jne    c000200f <test_gpt_header+0x25>
c000202a:	8d 43 10             	lea    eax,[ebx+0x10]
c000202d:	f7 d6                	not    esi
c000202f:	e8 67 f9 ff ff       	call   c000199b <ld_dword>
c0002034:	39 c6                	cmp    esi,eax
c0002036:	75 22                	jne    c000205a <test_gpt_header+0x70>
c0002038:	8d 43 54             	lea    eax,[ebx+0x54]
c000203b:	e8 5b f9 ff ff       	call   c000199b <ld_dword>
c0002040:	83 c0 80             	add    eax,0xffffff80
c0002043:	75 15                	jne    c000205a <test_gpt_header+0x70>
c0002045:	8d 43 50             	lea    eax,[ebx+0x50]
c0002048:	e8 4e f9 ff ff       	call   c000199b <ld_dword>
c000204d:	3d 80 00 00 00       	cmp    eax,0x80
c0002052:	0f 96 c0             	setbe  al
c0002055:	0f b6 c0             	movzx  eax,al
c0002058:	89 c7                	mov    edi,eax
c000205a:	5b                   	pop    ebx
c000205b:	89 f8                	mov    eax,edi
c000205d:	5e                   	pop    esi
c000205e:	5f                   	pop    edi
c000205f:	5d                   	pop    ebp
c0002060:	c3                   	ret    

c0002061 <make_rand>:
c0002061:	56                   	push   esi
c0002062:	85 c0                	test   eax,eax
c0002064:	53                   	push   ebx
c0002065:	75 05                	jne    c000206c <make_rand+0xb>
c0002067:	b8 01 00 00 00       	mov    eax,0x1
c000206c:	01 d1                	add    ecx,edx
c000206e:	bb 08 00 00 00       	mov    ebx,0x8
c0002073:	89 c6                	mov    esi,eax
c0002075:	d1 e8                	shr    eax,1
c0002077:	83 e6 01             	and    esi,0x1
c000207a:	85 f6                	test   esi,esi
c000207c:	74 05                	je     c0002083 <make_rand+0x22>
c000207e:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002083:	4b                   	dec    ebx
c0002084:	75 ed                	jne    c0002073 <make_rand+0x12>
c0002086:	42                   	inc    edx
c0002087:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c000208a:	39 ca                	cmp    edx,ecx
c000208c:	75 e0                	jne    c000206e <make_rand+0xd>
c000208e:	5b                   	pop    ebx
c000208f:	5e                   	pop    esi
c0002090:	c3                   	ret    

c0002091 <validate>:
c0002091:	56                   	push   esi
c0002092:	53                   	push   ebx
c0002093:	89 d6                	mov    esi,edx
c0002095:	51                   	push   ecx
c0002096:	85 c0                	test   eax,eax
c0002098:	75 09                	jne    c00020a3 <validate+0x12>
c000209a:	b8 09 00 00 00       	mov    eax,0x9
c000209f:	31 c9                	xor    ecx,ecx
c00020a1:	eb 2f                	jmp    c00020d2 <validate+0x41>
c00020a3:	89 c3                	mov    ebx,eax
c00020a5:	8b 00                	mov    eax,DWORD PTR [eax]
c00020a7:	85 c0                	test   eax,eax
c00020a9:	74 ef                	je     c000209a <validate+0x9>
c00020ab:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00020ae:	74 ea                	je     c000209a <validate+0x9>
c00020b0:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c00020b4:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c00020b8:	75 e0                	jne    c000209a <validate+0x9>
c00020ba:	83 ec 0c             	sub    esp,0xc
c00020bd:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00020c1:	50                   	push   eax
c00020c2:	e8 76 f8 ff ff       	call   c000193d <disk_status>
c00020c7:	83 c4 10             	add    esp,0x10
c00020ca:	a8 01                	test   al,0x1
c00020cc:	75 cc                	jne    c000209a <validate+0x9>
c00020ce:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00020d0:	31 c0                	xor    eax,eax
c00020d2:	89 0e                	mov    DWORD PTR [esi],ecx
c00020d4:	5a                   	pop    edx
c00020d5:	5b                   	pop    ebx
c00020d6:	5e                   	pop    esi
c00020d7:	c3                   	ret    

c00020d8 <sync_window>:
c00020d8:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00020dc:	0f 84 85 00 00 00    	je     c0002167 <sync_window+0x8f>
c00020e2:	55                   	push   ebp
c00020e3:	8d 68 54             	lea    ebp,[eax+0x54]
c00020e6:	57                   	push   edi
c00020e7:	56                   	push   esi
c00020e8:	53                   	push   ebx
c00020e9:	89 c3                	mov    ebx,eax
c00020eb:	83 ec 28             	sub    esp,0x28
c00020ee:	6a 01                	push   0x1
c00020f0:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00020f3:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00020f6:	55                   	push   ebp
c00020f7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00020fb:	50                   	push   eax
c00020fc:	e8 58 f8 ff ff       	call   c0001959 <disk_write>
c0002101:	83 c4 20             	add    esp,0x20
c0002104:	ba 01 00 00 00       	mov    edx,0x1
c0002109:	85 c0                	test   eax,eax
c000210b:	75 50                	jne    c000215d <sync_window+0x85>
c000210d:	31 ff                	xor    edi,edi
c000210f:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c0002112:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0002116:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000211a:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c000211d:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c0002120:	89 c6                	mov    esi,eax
c0002122:	89 d7                	mov    edi,edx
c0002124:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c0002127:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000212b:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c000212e:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0002132:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0002136:	73 23                	jae    c000215b <sync_window+0x83>
c0002138:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c000213c:	75 1d                	jne    c000215b <sync_window+0x83>
c000213e:	83 ec 0c             	sub    esp,0xc
c0002141:	6a 01                	push   0x1
c0002143:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0002147:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000214b:	52                   	push   edx
c000214c:	50                   	push   eax
c000214d:	55                   	push   ebp
c000214e:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002152:	50                   	push   eax
c0002153:	e8 01 f8 ff ff       	call   c0001959 <disk_write>
c0002158:	83 c4 20             	add    esp,0x20
c000215b:	31 d2                	xor    edx,edx
c000215d:	83 c4 1c             	add    esp,0x1c
c0002160:	89 d0                	mov    eax,edx
c0002162:	5b                   	pop    ebx
c0002163:	5e                   	pop    esi
c0002164:	5f                   	pop    edi
c0002165:	5d                   	pop    ebp
c0002166:	c3                   	ret    
c0002167:	31 d2                	xor    edx,edx
c0002169:	89 d0                	mov    eax,edx
c000216b:	c3                   	ret    

c000216c <move_window>:
c000216c:	56                   	push   esi
c000216d:	53                   	push   ebx
c000216e:	89 c3                	mov    ebx,eax
c0002170:	83 ec 14             	sub    esp,0x14
c0002173:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002176:	75 07                	jne    c000217f <move_window+0x13>
c0002178:	31 f6                	xor    esi,esi
c000217a:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c000217d:	74 59                	je     c00021d8 <move_window+0x6c>
c000217f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002183:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002187:	89 d8                	mov    eax,ebx
c0002189:	e8 4a ff ff ff       	call   c00020d8 <sync_window>
c000218e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002192:	89 c6                	mov    esi,eax
c0002194:	85 c0                	test   eax,eax
c0002196:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000219a:	75 3c                	jne    c00021d8 <move_window+0x6c>
c000219c:	83 ec 0c             	sub    esp,0xc
c000219f:	8d 43 54             	lea    eax,[ebx+0x54]
c00021a2:	6a 01                	push   0x1
c00021a4:	51                   	push   ecx
c00021a5:	52                   	push   edx
c00021a6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00021aa:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c00021ae:	50                   	push   eax
c00021af:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00021b3:	50                   	push   eax
c00021b4:	e8 8a f7 ff ff       	call   c0001943 <disk_read>
c00021b9:	83 c4 20             	add    esp,0x20
c00021bc:	85 c0                	test   eax,eax
c00021be:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00021c2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00021c6:	74 0a                	je     c00021d2 <move_window+0x66>
c00021c8:	83 ca ff             	or     edx,0xffffffff
c00021cb:	be 01 00 00 00       	mov    esi,0x1
c00021d0:	89 d1                	mov    ecx,edx
c00021d2:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c00021d5:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c00021d8:	89 f0                	mov    eax,esi
c00021da:	83 c4 14             	add    esp,0x14
c00021dd:	5b                   	pop    ebx
c00021de:	5e                   	pop    esi
c00021df:	c3                   	ret    

c00021e0 <check_fs>:
c00021e0:	53                   	push   ebx
c00021e1:	89 c3                	mov    ebx,eax
c00021e3:	83 ec 08             	sub    esp,0x8
c00021e6:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00021ea:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00021f1:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00021f8:	e8 6f ff ff ff       	call   c000216c <move_window>
c00021fd:	ba 04 00 00 00       	mov    edx,0x4
c0002202:	85 c0                	test   eax,eax
c0002204:	0f 85 89 00 00 00    	jne    c0002293 <check_fs+0xb3>
c000220a:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c0002210:	e8 79 f7 ff ff       	call   c000198e <ld_word>
c0002215:	ba 03 00 00 00       	mov    edx,0x3
c000221a:	66 3d 55 aa          	cmp    ax,0xaa55
c000221e:	75 73                	jne    c0002293 <check_fs+0xb3>
c0002220:	ba 00 f4 01 c0       	mov    edx,0xc001f400
c0002225:	8d 43 54             	lea    eax,[ebx+0x54]
c0002228:	b9 0b 00 00 00       	mov    ecx,0xb
c000222d:	e8 fb f7 ff ff       	call   c0001a2d <mem_cmp>
c0002232:	ba 01 00 00 00       	mov    edx,0x1
c0002237:	85 c0                	test   eax,eax
c0002239:	74 58                	je     c0002293 <check_fs+0xb3>
c000223b:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c000223e:	8d 50 18             	lea    edx,[eax+0x18]
c0002241:	80 fa 01             	cmp    dl,0x1
c0002244:	76 09                	jbe    c000224f <check_fs+0x6f>
c0002246:	ba 02 00 00 00       	mov    edx,0x2
c000224b:	3c eb                	cmp    al,0xeb
c000224d:	75 44                	jne    c0002293 <check_fs+0xb3>
c000224f:	ba 10 1f 02 c0       	mov    edx,0xc0021f10
c0002254:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c000225a:	b9 03 00 00 00       	mov    ecx,0x3
c000225f:	e8 c9 f7 ff ff       	call   c0001a2d <mem_cmp>
c0002264:	31 d2                	xor    edx,edx
c0002266:	85 c0                	test   eax,eax
c0002268:	74 29                	je     c0002293 <check_fs+0xb3>
c000226a:	ba 0c f4 01 c0       	mov    edx,0xc001f40c
c000226f:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002275:	b9 05 00 00 00       	mov    ecx,0x5
c000227a:	e8 ae f7 ff ff       	call   c0001a2d <mem_cmp>
c000227f:	31 d2                	xor    edx,edx
c0002281:	85 c0                	test   eax,eax
c0002283:	74 0e                	je     c0002293 <check_fs+0xb3>
c0002285:	31 d2                	xor    edx,edx
c0002287:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c000228e:	0f 95 c2             	setne  dl
c0002291:	01 d2                	add    edx,edx
c0002293:	89 d0                	mov    eax,edx
c0002295:	83 c4 08             	add    esp,0x8
c0002298:	5b                   	pop    ebx
c0002299:	c3                   	ret    

c000229a <find_volume>:
c000229a:	55                   	push   ebp
c000229b:	31 c9                	xor    ecx,ecx
c000229d:	57                   	push   edi
c000229e:	56                   	push   esi
c000229f:	89 d6                	mov    esi,edx
c00022a1:	53                   	push   ebx
c00022a2:	31 d2                	xor    edx,edx
c00022a4:	83 ec 3c             	sub    esp,0x3c
c00022a7:	89 c3                	mov    ebx,eax
c00022a9:	e8 32 ff ff ff       	call   c00021e0 <check_fs>
c00022ae:	83 f8 02             	cmp    eax,0x2
c00022b1:	74 0e                	je     c00022c1 <find_volume+0x27>
c00022b3:	0f 87 5d 01 00 00    	ja     c0002416 <find_volume+0x17c>
c00022b9:	85 f6                	test   esi,esi
c00022bb:	0f 84 55 01 00 00    	je     c0002416 <find_volume+0x17c>
c00022c1:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c00022c8:	0f 85 dd 00 00 00    	jne    c00023ab <find_volume+0x111>
c00022ce:	31 c9                	xor    ecx,ecx
c00022d0:	ba 01 00 00 00       	mov    edx,0x1
c00022d5:	89 d8                	mov    eax,ebx
c00022d7:	e8 90 fe ff ff       	call   c000216c <move_window>
c00022dc:	85 c0                	test   eax,eax
c00022de:	74 0a                	je     c00022ea <find_volume+0x50>
c00022e0:	b8 04 00 00 00       	mov    eax,0x4
c00022e5:	e9 2c 01 00 00       	jmp    c0002416 <find_volume+0x17c>
c00022ea:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00022ed:	89 e8                	mov    eax,ebp
c00022ef:	e8 f6 fc ff ff       	call   c0001fea <test_gpt_header>
c00022f4:	85 c0                	test   eax,eax
c00022f6:	75 0a                	jne    c0002302 <find_volume+0x68>
c00022f8:	b8 03 00 00 00       	mov    eax,0x3
c00022fd:	e9 14 01 00 00       	jmp    c0002416 <find_volume+0x17c>
c0002302:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c0002308:	e8 8e f6 ff ff       	call   c000199b <ld_dword>
c000230d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002311:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c0002317:	e8 97 f6 ff ff       	call   c00019b3 <ld_qword>
c000231c:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0002324:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002328:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000232c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002334:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002338:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c000233c:	74 ba                	je     c00022f8 <find_volume+0x5e>
c000233e:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002342:	31 c9                	xor    ecx,ecx
c0002344:	c1 e7 07             	shl    edi,0x7
c0002347:	89 d8                	mov    eax,ebx
c0002349:	89 fa                	mov    edx,edi
c000234b:	c1 ea 09             	shr    edx,0x9
c000234e:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0002352:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002356:	e8 11 fe ff ff       	call   c000216c <move_window>
c000235b:	85 c0                	test   eax,eax
c000235d:	75 81                	jne    c00022e0 <find_volume+0x46>
c000235f:	81 e7 80 01 00 00    	and    edi,0x180
c0002365:	b9 10 00 00 00       	mov    ecx,0x10
c000236a:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c000236e:	ba f0 f3 01 c0       	mov    edx,0xc001f3f0
c0002373:	e8 b5 f6 ff ff       	call   c0001a2d <mem_cmp>
c0002378:	85 c0                	test   eax,eax
c000237a:	75 29                	jne    c00023a5 <find_volume+0x10b>
c000237c:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002380:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002384:	e8 2a f6 ff ff       	call   c00019b3 <ld_qword>
c0002389:	89 d1                	mov    ecx,edx
c000238b:	89 c2                	mov    edx,eax
c000238d:	89 d8                	mov    eax,ebx
c000238f:	e8 4c fe ff ff       	call   c00021e0 <check_fs>
c0002394:	85 f6                	test   esi,esi
c0002396:	75 07                	jne    c000239f <find_volume+0x105>
c0002398:	83 f8 01             	cmp    eax,0x1
c000239b:	77 08                	ja     c00023a5 <find_volume+0x10b>
c000239d:	eb 77                	jmp    c0002416 <find_volume+0x17c>
c000239f:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00023a3:	74 71                	je     c0002416 <find_volume+0x17c>
c00023a5:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00023a9:	eb 89                	jmp    c0002334 <find_volume+0x9a>
c00023ab:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00023af:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c00023b5:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c00023bb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00023bf:	89 cd                	mov    ebp,ecx
c00023c1:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00023c5:	89 f8                	mov    eax,edi
c00023c7:	83 c7 10             	add    edi,0x10
c00023ca:	e8 cc f5 ff ff       	call   c000199b <ld_dword>
c00023cf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00023d3:	89 01                	mov    DWORD PTR [ecx],eax
c00023d5:	83 c1 04             	add    ecx,0x4
c00023d8:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00023dc:	75 e3                	jne    c00023c1 <find_volume+0x127>
c00023de:	31 ff                	xor    edi,edi
c00023e0:	85 f6                	test   esi,esi
c00023e2:	74 03                	je     c00023e7 <find_volume+0x14d>
c00023e4:	8d 7e ff             	lea    edi,[esi-0x1]
c00023e7:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00023eb:	85 d2                	test   edx,edx
c00023ed:	74 14                	je     c0002403 <find_volume+0x169>
c00023ef:	31 c9                	xor    ecx,ecx
c00023f1:	89 d8                	mov    eax,ebx
c00023f3:	e8 e8 fd ff ff       	call   c00021e0 <check_fs>
c00023f8:	83 f8 01             	cmp    eax,0x1
c00023fb:	76 19                	jbe    c0002416 <find_volume+0x17c>
c00023fd:	85 f6                	test   esi,esi
c00023ff:	74 0f                	je     c0002410 <find_volume+0x176>
c0002401:	eb 13                	jmp    c0002416 <find_volume+0x17c>
c0002403:	85 f6                	test   esi,esi
c0002405:	0f 85 ed fe ff ff    	jne    c00022f8 <find_volume+0x5e>
c000240b:	b8 03 00 00 00       	mov    eax,0x3
c0002410:	47                   	inc    edi
c0002411:	83 ff 03             	cmp    edi,0x3
c0002414:	76 d1                	jbe    c00023e7 <find_volume+0x14d>
c0002416:	83 c4 3c             	add    esp,0x3c
c0002419:	5b                   	pop    ebx
c000241a:	5e                   	pop    esi
c000241b:	5f                   	pop    edi
c000241c:	5d                   	pop    ebp
c000241d:	c3                   	ret    

c000241e <mount_volume>:
c000241e:	55                   	push   ebp
c000241f:	57                   	push   edi
c0002420:	89 cf                	mov    edi,ecx
c0002422:	56                   	push   esi
c0002423:	53                   	push   ebx
c0002424:	bb 0b 00 00 00       	mov    ebx,0xb
c0002429:	83 ec 3c             	sub    esp,0x3c
c000242c:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0002432:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002436:	e8 35 fb ff ff       	call   c0001f70 <get_ldnumber>
c000243b:	85 c0                	test   eax,eax
c000243d:	0f 88 3a 05 00 00    	js     c000297d <mount_volume+0x55f>
c0002443:	8b 2c 85 a0 33 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffdcc60]
c000244a:	89 c6                	mov    esi,eax
c000244c:	bb 0c 00 00 00       	mov    ebx,0xc
c0002451:	85 ed                	test   ebp,ebp
c0002453:	0f 84 24 05 00 00    	je     c000297d <mount_volume+0x55f>
c0002459:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000245d:	83 e7 fe             	and    edi,0xfffffffe
c0002460:	89 2a                	mov    DWORD PTR [edx],ebp
c0002462:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c0002466:	74 32                	je     c000249a <mount_volume+0x7c>
c0002468:	83 ec 0c             	sub    esp,0xc
c000246b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c000246f:	50                   	push   eax
c0002470:	e8 c8 f4 ff ff       	call   c000193d <disk_status>
c0002475:	83 c4 10             	add    esp,0x10
c0002478:	a8 01                	test   al,0x1
c000247a:	75 1e                	jne    c000249a <mount_volume+0x7c>
c000247c:	31 db                	xor    ebx,ebx
c000247e:	89 f9                	mov    ecx,edi
c0002480:	84 c9                	test   cl,cl
c0002482:	0f 84 f5 04 00 00    	je     c000297d <mount_volume+0x55f>
c0002488:	a8 04                	test   al,0x4
c000248a:	0f 84 ed 04 00 00    	je     c000297d <mount_volume+0x55f>
c0002490:	bb 0a 00 00 00       	mov    ebx,0xa
c0002495:	e9 e3 04 00 00       	jmp    c000297d <mount_volume+0x55f>
c000249a:	83 ec 0c             	sub    esp,0xc
c000249d:	89 f0                	mov    eax,esi
c000249f:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c00024a3:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c00024a6:	0f b6 f0             	movzx  esi,al
c00024a9:	bb 03 00 00 00       	mov    ebx,0x3
c00024ae:	56                   	push   esi
c00024af:	e8 8c f4 ff ff       	call   c0001940 <disk_initialize>
c00024b4:	83 c4 10             	add    esp,0x10
c00024b7:	a8 01                	test   al,0x1
c00024b9:	0f 85 be 04 00 00    	jne    c000297d <mount_volume+0x55f>
c00024bf:	89 f9                	mov    ecx,edi
c00024c1:	84 c9                	test   cl,cl
c00024c3:	74 04                	je     c00024c9 <mount_volume+0xab>
c00024c5:	a8 04                	test   al,0x4
c00024c7:	75 c7                	jne    c0002490 <mount_volume+0x72>
c00024c9:	31 d2                	xor    edx,edx
c00024cb:	89 e8                	mov    eax,ebp
c00024cd:	e8 c8 fd ff ff       	call   c000229a <find_volume>
c00024d2:	83 f8 04             	cmp    eax,0x4
c00024d5:	75 0a                	jne    c00024e1 <mount_volume+0xc3>
c00024d7:	bb 01 00 00 00       	mov    ebx,0x1
c00024dc:	e9 9c 04 00 00       	jmp    c000297d <mount_volume+0x55f>
c00024e1:	83 f8 01             	cmp    eax,0x1
c00024e4:	76 0a                	jbe    c00024f0 <mount_volume+0xd2>
c00024e6:	bb 0d 00 00 00       	mov    ebx,0xd
c00024eb:	e9 8d 04 00 00       	jmp    c000297d <mount_volume+0x55f>
c00024f0:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00024f3:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00024f6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00024fa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00024fe:	75 17                	jne    c0002517 <mount_volume+0xf9>
c0002500:	b8 0b 00 00 00       	mov    eax,0xb
c0002505:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c000250a:	75 da                	jne    c00024e6 <mount_volume+0xc8>
c000250c:	40                   	inc    eax
c000250d:	83 f8 40             	cmp    eax,0x40
c0002510:	75 f3                	jne    c0002505 <mount_volume+0xe7>
c0002512:	e9 5a 02 00 00       	jmp    c0002771 <mount_volume+0x353>
c0002517:	8d 45 5f             	lea    eax,[ebp+0x5f]
c000251a:	e8 6f f4 ff ff       	call   c000198e <ld_word>
c000251f:	66 3d 00 02          	cmp    ax,0x200
c0002523:	75 c1                	jne    c00024e6 <mount_volume+0xc8>
c0002525:	8d 45 6a             	lea    eax,[ebp+0x6a]
c0002528:	e8 61 f4 ff ff       	call   c000198e <ld_word>
c000252d:	0f b7 c0             	movzx  eax,ax
c0002530:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002534:	85 c0                	test   eax,eax
c0002536:	75 0c                	jne    c0002544 <mount_volume+0x126>
c0002538:	8d 45 78             	lea    eax,[ebp+0x78]
c000253b:	e8 5b f4 ff ff       	call   c000199b <ld_dword>
c0002540:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002544:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002548:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c000254b:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c000254e:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0002552:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002555:	48                   	dec    eax
c0002556:	3c 01                	cmp    al,0x1
c0002558:	77 8c                	ja     c00024e6 <mount_volume+0xc8>
c000255a:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c000255e:	89 c3                	mov    ebx,eax
c0002560:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002564:	66 85 c0             	test   ax,ax
c0002567:	0f 84 79 ff ff ff    	je     c00024e6 <mount_volume+0xc8>
c000256d:	8d 40 ff             	lea    eax,[eax-0x1]
c0002570:	85 d8                	test   eax,ebx
c0002572:	0f 85 6e ff ff ff    	jne    c00024e6 <mount_volume+0xc8>
c0002578:	8d 45 65             	lea    eax,[ebp+0x65]
c000257b:	e8 0e f4 ff ff       	call   c000198e <ld_word>
c0002580:	89 c7                	mov    edi,eax
c0002582:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002586:	a8 0f                	test   al,0xf
c0002588:	0f 85 58 ff ff ff    	jne    c00024e6 <mount_volume+0xc8>
c000258e:	8d 45 67             	lea    eax,[ebp+0x67]
c0002591:	e8 f8 f3 ff ff       	call   c000198e <ld_word>
c0002596:	0f b7 f0             	movzx  esi,ax
c0002599:	85 f6                	test   esi,esi
c000259b:	75 0a                	jne    c00025a7 <mount_volume+0x189>
c000259d:	8d 45 74             	lea    eax,[ebp+0x74]
c00025a0:	e8 f6 f3 ff ff       	call   c000199b <ld_dword>
c00025a5:	89 c6                	mov    esi,eax
c00025a7:	8d 45 62             	lea    eax,[ebp+0x62]
c00025aa:	e8 df f3 ff ff       	call   c000198e <ld_word>
c00025af:	66 85 c0             	test   ax,ax
c00025b2:	0f 84 2e ff ff ff    	je     c00024e6 <mount_volume+0xc8>
c00025b8:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c00025bd:	0f b7 c8             	movzx  ecx,ax
c00025c0:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c00025c5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00025c9:	89 fa                	mov    edx,edi
c00025cb:	66 c1 ea 04          	shr    dx,0x4
c00025cf:	0f b7 d2             	movzx  edx,dx
c00025d2:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c00025d6:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00025d9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00025dd:	39 c6                	cmp    esi,eax
c00025df:	0f 82 01 ff ff ff    	jb     c00024e6 <mount_volume+0xc8>
c00025e5:	29 c6                	sub    esi,eax
c00025e7:	31 d2                	xor    edx,edx
c00025e9:	89 f0                	mov    eax,esi
c00025eb:	f7 f3                	div    ebx
c00025ed:	39 de                	cmp    esi,ebx
c00025ef:	0f 82 f1 fe ff ff    	jb     c00024e6 <mount_volume+0xc8>
c00025f5:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00025fa:	0f 87 e6 fe ff ff    	ja     c00024e6 <mount_volume+0xc8>
c0002600:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002605:	0f 86 63 03 00 00    	jbe    c000296e <mount_volume+0x550>
c000260b:	bb 03 00 00 00       	mov    ebx,0x3
c0002610:	8d 70 02             	lea    esi,[eax+0x2]
c0002613:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002617:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000261b:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c000261e:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002621:	31 d2                	xor    edx,edx
c0002623:	89 c8                	mov    eax,ecx
c0002625:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c0002628:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000262c:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002630:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0002634:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0002638:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c000263b:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c000263e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002642:	31 d2                	xor    edx,edx
c0002644:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002648:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000264c:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c000264f:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002652:	83 fb 03             	cmp    ebx,0x3
c0002655:	75 2b                	jne    c0002682 <mount_volume+0x264>
c0002657:	8d 45 7e             	lea    eax,[ebp+0x7e]
c000265a:	e8 2f f3 ff ff       	call   c000198e <ld_word>
c000265f:	66 09 c7             	or     di,ax
c0002662:	0f 85 7e fe ff ff    	jne    c00024e6 <mount_volume+0xc8>
c0002668:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c000266e:	c1 e6 02             	shl    esi,0x2
c0002671:	e8 25 f3 ff ff       	call   c000199b <ld_dword>
c0002676:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c000267d:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002680:	eb 30                	jmp    c00026b2 <mount_volume+0x294>
c0002682:	66 85 ff             	test   di,di
c0002685:	0f 84 5b fe ff ff    	je     c00024e6 <mount_volume+0xc8>
c000268b:	31 d2                	xor    edx,edx
c000268d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002691:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002695:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0002699:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000269c:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c000269f:	83 fb 02             	cmp    ebx,0x2
c00026a2:	75 04                	jne    c00026a8 <mount_volume+0x28a>
c00026a4:	01 f6                	add    esi,esi
c00026a6:	eb 0a                	jmp    c00026b2 <mount_volume+0x294>
c00026a8:	8d 04 76             	lea    eax,[esi+esi*2]
c00026ab:	83 e6 01             	and    esi,0x1
c00026ae:	d1 e8                	shr    eax,1
c00026b0:	01 c6                	add    esi,eax
c00026b2:	81 c6 ff 01 00 00    	add    esi,0x1ff
c00026b8:	c1 ee 09             	shr    esi,0x9
c00026bb:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00026bf:	0f 87 21 fe ff ff    	ja     c00024e6 <mount_volume+0xc8>
c00026c5:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c00026cc:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00026d3:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c00026d7:	83 fb 03             	cmp    ebx,0x3
c00026da:	75 7a                	jne    c0002756 <mount_volume+0x338>
c00026dc:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c00026e2:	e8 a7 f2 ff ff       	call   c000198e <ld_word>
c00026e7:	66 48                	dec    ax
c00026e9:	75 6b                	jne    c0002756 <mount_volume+0x338>
c00026eb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00026ef:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00026f3:	83 c2 01             	add    edx,0x1
c00026f6:	89 e8                	mov    eax,ebp
c00026f8:	83 d1 00             	adc    ecx,0x0
c00026fb:	e8 6c fa ff ff       	call   c000216c <move_window>
c0002700:	85 c0                	test   eax,eax
c0002702:	75 52                	jne    c0002756 <mount_volume+0x338>
c0002704:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c0002708:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c000270e:	e8 7b f2 ff ff       	call   c000198e <ld_word>
c0002713:	66 3d 55 aa          	cmp    ax,0xaa55
c0002717:	75 3d                	jne    c0002756 <mount_volume+0x338>
c0002719:	8d 45 54             	lea    eax,[ebp+0x54]
c000271c:	e8 7a f2 ff ff       	call   c000199b <ld_dword>
c0002721:	3d 52 52 61 41       	cmp    eax,0x41615252
c0002726:	75 2e                	jne    c0002756 <mount_volume+0x338>
c0002728:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c000272e:	e8 68 f2 ff ff       	call   c000199b <ld_dword>
c0002733:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002738:	75 1c                	jne    c0002756 <mount_volume+0x338>
c000273a:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c0002740:	e8 56 f2 ff ff       	call   c000199b <ld_dword>
c0002745:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0002748:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c000274e:	e8 48 f2 ff ff       	call   c000199b <ld_dword>
c0002753:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002756:	66 a1 80 33 02 c0    	mov    ax,ds:0xc0023380
c000275c:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000275f:	40                   	inc    eax
c0002760:	31 db                	xor    ebx,ebx
c0002762:	66 a3 80 33 02 c0    	mov    ds:0xc0023380,ax
c0002768:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c000276c:	e9 0c 02 00 00       	jmp    c000297d <mount_volume+0x55f>
c0002771:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002777:	e8 12 f2 ff ff       	call   c000198e <ld_word>
c000277c:	66 3d 00 01          	cmp    ax,0x100
c0002780:	0f 85 60 fd ff ff    	jne    c00024e6 <mount_volume+0xc8>
c0002786:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c000278d:	0f 85 53 fd ff ff    	jne    c00024e6 <mount_volume+0xc8>
c0002793:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002799:	e8 15 f2 ff ff       	call   c00019b3 <ld_qword>
c000279e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00027a2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00027a6:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c00027ac:	e8 ea f1 ff ff       	call   c000199b <ld_dword>
c00027b1:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c00027b4:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c00027ba:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c00027bd:	fe c8                	dec    al
c00027bf:	0f 85 21 fd ff ff    	jne    c00024e6 <mount_volume+0xc8>
c00027c5:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c00027cc:	bb 01 00 00 00       	mov    ebx,0x1
c00027d1:	d3 e3                	shl    ebx,cl
c00027d3:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c00027d7:	66 85 db             	test   bx,bx
c00027da:	0f 84 06 fd ff ff    	je     c00024e6 <mount_volume+0xc8>
c00027e0:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c00027e6:	e8 b0 f1 ff ff       	call   c000199b <ld_dword>
c00027eb:	89 c6                	mov    esi,eax
c00027ed:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c00027f2:	0f 87 ee fc ff ff    	ja     c00024e6 <mount_volume+0xc8>
c00027f8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00027fc:	8d 40 02             	lea    eax,[eax+0x2]
c00027ff:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002802:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002805:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002809:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c000280c:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002812:	e8 84 f1 ff ff       	call   c000199b <ld_dword>
c0002817:	31 d2                	xor    edx,edx
c0002819:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000281d:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002821:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002825:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002829:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c000282c:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c000282f:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002835:	e8 61 f1 ff ff       	call   c000199b <ld_dword>
c000283a:	31 d2                	xor    edx,edx
c000283c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002840:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002844:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002848:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c000284b:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c000284e:	0f b7 c3             	movzx  eax,bx
c0002851:	31 d2                	xor    edx,edx
c0002853:	0f af f0             	imul   esi,eax
c0002856:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000285a:	89 f0                	mov    eax,esi
c000285c:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002860:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002864:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002868:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c000286c:	39 c1                	cmp    ecx,eax
c000286e:	89 df                	mov    edi,ebx
c0002870:	19 d7                	sbb    edi,edx
c0002872:	0f 82 6e fc ff ff    	jb     c00024e6 <mount_volume+0xc8>
c0002878:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c000287e:	31 db                	xor    ebx,ebx
c0002880:	e8 16 f1 ff ff       	call   c000199b <ld_dword>
c0002885:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c000288c:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000288f:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002897:	85 db                	test   ebx,ebx
c0002899:	75 39                	jne    c00028d4 <mount_volume+0x4b6>
c000289b:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000289f:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00028a3:	0f 86 3d fc ff ff    	jbe    c00024e6 <mount_volume+0xc8>
c00028a9:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c00028ac:	31 ff                	xor    edi,edi
c00028ae:	89 e8                	mov    eax,ebp
c00028b0:	e8 72 f3 ff ff       	call   c0001c27 <clst2sect>
c00028b5:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00028b9:	01 c6                	add    esi,eax
c00028bb:	89 e8                	mov    eax,ebp
c00028bd:	11 d7                	adc    edi,edx
c00028bf:	89 f2                	mov    edx,esi
c00028c1:	89 f9                	mov    ecx,edi
c00028c3:	e8 a4 f8 ff ff       	call   c000216c <move_window>
c00028c8:	85 c0                	test   eax,eax
c00028ca:	0f 85 07 fc ff ff    	jne    c00024d7 <mount_volume+0xb9>
c00028d0:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00028d4:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c00028d9:	74 0b                	je     c00028e6 <mount_volume+0x4c8>
c00028db:	83 c3 20             	add    ebx,0x20
c00028de:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00028e4:	eb b1                	jmp    c0002897 <mount_volume+0x479>
c00028e6:	8d 75 54             	lea    esi,[ebp+0x54]
c00028e9:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c00028ed:	e8 a9 f0 ff ff       	call   c000199b <ld_dword>
c00028f2:	89 c3                	mov    ebx,eax
c00028f4:	83 f8 01             	cmp    eax,0x1
c00028f7:	0f 86 e9 fb ff ff    	jbe    c00024e6 <mount_volume+0xc8>
c00028fd:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002900:	0f 86 e0 fb ff ff    	jbe    c00024e6 <mount_volume+0xc8>
c0002906:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002909:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000290d:	0f af c2             	imul   eax,edx
c0002910:	31 d2                	xor    edx,edx
c0002912:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002915:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002918:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c000291b:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c000291e:	31 c9                	xor    ecx,ecx
c0002920:	89 da                	mov    edx,ebx
c0002922:	89 e8                	mov    eax,ebp
c0002924:	c1 ea 07             	shr    edx,0x7
c0002927:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c000292a:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c000292d:	e8 3a f8 ff ff       	call   c000216c <move_window>
c0002932:	85 c0                	test   eax,eax
c0002934:	0f 85 9d fb ff ff    	jne    c00024d7 <mount_volume+0xb9>
c000293a:	89 d8                	mov    eax,ebx
c000293c:	83 e0 7f             	and    eax,0x7f
c000293f:	8d 04 86             	lea    eax,[esi+eax*4]
c0002942:	e8 54 f0 ff ff       	call   c000199b <ld_dword>
c0002947:	83 f8 ff             	cmp    eax,0xffffffff
c000294a:	74 0a                	je     c0002956 <mount_volume+0x538>
c000294c:	43                   	inc    ebx
c000294d:	39 d8                	cmp    eax,ebx
c000294f:	74 cd                	je     c000291e <mount_volume+0x500>
c0002951:	e9 90 fb ff ff       	jmp    c00024e6 <mount_volume+0xc8>
c0002956:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c000295d:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002964:	bb 04 00 00 00       	mov    ebx,0x4
c0002969:	e9 e8 fd ff ff       	jmp    c0002756 <mount_volume+0x338>
c000296e:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002973:	19 db                	sbb    ebx,ebx
c0002975:	83 c3 02             	add    ebx,0x2
c0002978:	e9 93 fc ff ff       	jmp    c0002610 <mount_volume+0x1f2>
c000297d:	83 c4 3c             	add    esp,0x3c
c0002980:	89 d8                	mov    eax,ebx
c0002982:	5b                   	pop    ebx
c0002983:	5e                   	pop    esi
c0002984:	5f                   	pop    edi
c0002985:	5d                   	pop    ebp
c0002986:	c3                   	ret    

c0002987 <find_bitmap>:
c0002987:	55                   	push   ebp
c0002988:	57                   	push   edi
c0002989:	89 c7                	mov    edi,eax
c000298b:	56                   	push   esi
c000298c:	8d 72 fe             	lea    esi,[edx-0x2]
c000298f:	53                   	push   ebx
c0002990:	83 ec 1c             	sub    esp,0x1c
c0002993:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002996:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000299a:	83 e8 02             	sub    eax,0x2
c000299d:	39 f0                	cmp    eax,esi
c000299f:	77 02                	ja     c00029a3 <find_bitmap+0x1c>
c00029a1:	31 f6                	xor    esi,esi
c00029a3:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c00029a7:	89 f3                	mov    ebx,esi
c00029a9:	31 ed                	xor    ebp,ebp
c00029ab:	31 c9                	xor    ecx,ecx
c00029ad:	89 da                	mov    edx,ebx
c00029af:	89 f8                	mov    eax,edi
c00029b1:	c1 ea 0c             	shr    edx,0xc
c00029b4:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c00029b7:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c00029ba:	e8 ad f7 ff ff       	call   c000216c <move_window>
c00029bf:	85 c0                	test   eax,eax
c00029c1:	75 68                	jne    c0002a2b <find_bitmap+0xa4>
c00029c3:	89 da                	mov    edx,ebx
c00029c5:	89 d9                	mov    ecx,ebx
c00029c7:	c1 ea 03             	shr    edx,0x3
c00029ca:	83 e1 07             	and    ecx,0x7
c00029cd:	b8 01 00 00 00       	mov    eax,0x1
c00029d2:	81 e2 ff 01 00 00    	and    edx,0x1ff
c00029d8:	d3 e0                	shl    eax,cl
c00029da:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c00029dd:	83 e9 02             	sub    ecx,0x2
c00029e0:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00029e4:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c00029e8:	43                   	inc    ebx
c00029e9:	21 c1                	and    ecx,eax
c00029eb:	d1 e0                	shl    eax,1
c00029ed:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c00029f1:	77 09                	ja     c00029fc <find_bitmap+0x75>
c00029f3:	31 db                	xor    ebx,ebx
c00029f5:	ba 00 02 00 00       	mov    edx,0x200
c00029fa:	31 c0                	xor    eax,eax
c00029fc:	84 c9                	test   cl,cl
c00029fe:	75 10                	jne    c0002a10 <find_bitmap+0x89>
c0002a00:	45                   	inc    ebp
c0002a01:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002a05:	75 0f                	jne    c0002a16 <find_bitmap+0x8f>
c0002a07:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002a0b:	83 c0 02             	add    eax,0x2
c0002a0e:	eb 22                	jmp    c0002a32 <find_bitmap+0xab>
c0002a10:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002a14:	31 ed                	xor    ebp,ebp
c0002a16:	39 de                	cmp    esi,ebx
c0002a18:	74 16                	je     c0002a30 <find_bitmap+0xa9>
c0002a1a:	84 c0                	test   al,al
c0002a1c:	75 c6                	jne    c00029e4 <find_bitmap+0x5d>
c0002a1e:	42                   	inc    edx
c0002a1f:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002a25:	77 84                	ja     c00029ab <find_bitmap+0x24>
c0002a27:	b0 01                	mov    al,0x1
c0002a29:	eb b9                	jmp    c00029e4 <find_bitmap+0x5d>
c0002a2b:	83 c8 ff             	or     eax,0xffffffff
c0002a2e:	eb 02                	jmp    c0002a32 <find_bitmap+0xab>
c0002a30:	31 c0                	xor    eax,eax
c0002a32:	83 c4 1c             	add    esp,0x1c
c0002a35:	5b                   	pop    ebx
c0002a36:	5e                   	pop    esi
c0002a37:	5f                   	pop    edi
c0002a38:	5d                   	pop    ebp
c0002a39:	c3                   	ret    

c0002a3a <change_bitmap>:
c0002a3a:	55                   	push   ebp
c0002a3b:	89 cd                	mov    ebp,ecx
c0002a3d:	57                   	push   edi
c0002a3e:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002a41:	56                   	push   esi
c0002a42:	89 c7                	mov    edi,eax
c0002a44:	53                   	push   ebx
c0002a45:	89 c8                	mov    eax,ecx
c0002a47:	83 ec 1c             	sub    esp,0x1c
c0002a4a:	31 d2                	xor    edx,edx
c0002a4c:	89 ce                	mov    esi,ecx
c0002a4e:	c1 e8 0c             	shr    eax,0xc
c0002a51:	bb 01 00 00 00       	mov    ebx,0x1
c0002a56:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002a59:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002a5c:	c1 ee 03             	shr    esi,0x3
c0002a5f:	83 e1 07             	and    ecx,0x7
c0002a62:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002a68:	d3 e3                	shl    ebx,cl
c0002a6a:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002a6e:	89 c1                	mov    ecx,eax
c0002a70:	89 d3                	mov    ebx,edx
c0002a72:	83 c1 01             	add    ecx,0x1
c0002a75:	83 d3 00             	adc    ebx,0x0
c0002a78:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002a7c:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002a80:	89 d1                	mov    ecx,edx
c0002a82:	89 c2                	mov    edx,eax
c0002a84:	89 f8                	mov    eax,edi
c0002a86:	e8 e1 f6 ff ff       	call   c000216c <move_window>
c0002a8b:	89 c1                	mov    ecx,eax
c0002a8d:	85 c0                	test   eax,eax
c0002a8f:	75 48                	jne    c0002ad9 <change_bitmap+0x9f>
c0002a91:	31 d2                	xor    edx,edx
c0002a93:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002a97:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002a9b:	0f 95 c2             	setne  dl
c0002a9e:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002aa2:	74 3c                	je     c0002ae0 <change_bitmap+0xa6>
c0002aa4:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002aa8:	4d                   	dec    ebp
c0002aa9:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002aad:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002ab1:	74 32                	je     c0002ae5 <change_bitmap+0xab>
c0002ab3:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002ab7:	75 d8                	jne    c0002a91 <change_bitmap+0x57>
c0002ab9:	8d 46 01             	lea    eax,[esi+0x1]
c0002abc:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002ac1:	89 c3                	mov    ebx,eax
c0002ac3:	31 f6                	xor    esi,esi
c0002ac5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002ac9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002acd:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002ad3:	74 99                	je     c0002a6e <change_bitmap+0x34>
c0002ad5:	89 de                	mov    esi,ebx
c0002ad7:	eb b8                	jmp    c0002a91 <change_bitmap+0x57>
c0002ad9:	b9 01 00 00 00       	mov    ecx,0x1
c0002ade:	eb 05                	jmp    c0002ae5 <change_bitmap+0xab>
c0002ae0:	b9 02 00 00 00       	mov    ecx,0x2
c0002ae5:	83 c4 1c             	add    esp,0x1c
c0002ae8:	89 c8                	mov    eax,ecx
c0002aea:	5b                   	pop    ebx
c0002aeb:	5e                   	pop    esi
c0002aec:	5f                   	pop    edi
c0002aed:	5d                   	pop    ebp
c0002aee:	c3                   	ret    

c0002aef <put_fat>:
c0002aef:	83 fa 01             	cmp    edx,0x1
c0002af2:	0f 86 7b 01 00 00    	jbe    c0002c73 <put_fat+0x184>
c0002af8:	55                   	push   ebp
c0002af9:	57                   	push   edi
c0002afa:	89 cf                	mov    edi,ecx
c0002afc:	56                   	push   esi
c0002afd:	b9 02 00 00 00       	mov    ecx,0x2
c0002b02:	53                   	push   ebx
c0002b03:	89 c6                	mov    esi,eax
c0002b05:	83 ec 1c             	sub    esp,0x1c
c0002b08:	89 d3                	mov    ebx,edx
c0002b0a:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002b0d:	0f 86 68 01 00 00    	jbe    c0002c7b <put_fat+0x18c>
c0002b13:	8a 00                	mov    al,BYTE PTR [eax]
c0002b15:	3c 02                	cmp    al,0x2
c0002b17:	0f 84 c7 00 00 00    	je     c0002be4 <put_fat+0xf5>
c0002b1d:	77 09                	ja     c0002b28 <put_fat+0x39>
c0002b1f:	fe c8                	dec    al
c0002b21:	74 17                	je     c0002b3a <put_fat+0x4b>
c0002b23:	e9 53 01 00 00       	jmp    c0002c7b <put_fat+0x18c>
c0002b28:	b9 02 00 00 00       	mov    ecx,0x2
c0002b2d:	3c 04                	cmp    al,0x4
c0002b2f:	0f 86 e1 00 00 00    	jbe    c0002c16 <put_fat+0x127>
c0002b35:	e9 41 01 00 00       	jmp    c0002c7b <put_fat+0x18c>
c0002b3a:	89 d5                	mov    ebp,edx
c0002b3c:	31 c9                	xor    ecx,ecx
c0002b3e:	d1 ed                	shr    ebp,1
c0002b40:	89 f0                	mov    eax,esi
c0002b42:	01 d5                	add    ebp,edx
c0002b44:	89 ea                	mov    edx,ebp
c0002b46:	c1 ea 09             	shr    edx,0x9
c0002b49:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002b4c:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002b4f:	e8 18 f6 ff ff       	call   c000216c <move_window>
c0002b54:	89 c1                	mov    ecx,eax
c0002b56:	85 c0                	test   eax,eax
c0002b58:	0f 85 1d 01 00 00    	jne    c0002c7b <put_fat+0x18c>
c0002b5e:	8d 46 54             	lea    eax,[esi+0x54]
c0002b61:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002b65:	8d 45 01             	lea    eax,[ebp+0x1]
c0002b68:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002b6e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002b72:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002b76:	89 f8                	mov    eax,edi
c0002b78:	83 e3 01             	and    ebx,0x1
c0002b7b:	74 0d                	je     c0002b8a <put_fat+0x9b>
c0002b7d:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002b80:	89 fa                	mov    edx,edi
c0002b82:	83 e0 0f             	and    eax,0xf
c0002b85:	c1 e2 04             	shl    edx,0x4
c0002b88:	09 d0                	or     eax,edx
c0002b8a:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002b8d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002b91:	31 c9                	xor    ecx,ecx
c0002b93:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002b97:	c1 ea 09             	shr    edx,0x9
c0002b9a:	89 f0                	mov    eax,esi
c0002b9c:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002b9f:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ba2:	e8 c5 f5 ff ff       	call   c000216c <move_window>
c0002ba7:	89 c1                	mov    ecx,eax
c0002ba9:	85 c0                	test   eax,eax
c0002bab:	0f 85 ca 00 00 00    	jne    c0002c7b <put_fat+0x18c>
c0002bb1:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002bb5:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002bbb:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002bbf:	85 db                	test   ebx,ebx
c0002bc1:	74 07                	je     c0002bca <put_fat+0xdb>
c0002bc3:	c1 ef 04             	shr    edi,0x4
c0002bc6:	89 fa                	mov    edx,edi
c0002bc8:	eb 0e                	jmp    c0002bd8 <put_fat+0xe9>
c0002bca:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002bcd:	c1 ef 08             	shr    edi,0x8
c0002bd0:	83 e2 f0             	and    edx,0xfffffff0
c0002bd3:	83 e7 0f             	and    edi,0xf
c0002bd6:	09 fa                	or     edx,edi
c0002bd8:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002bdb:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002bdf:	e9 97 00 00 00       	jmp    c0002c7b <put_fat+0x18c>
c0002be4:	31 c9                	xor    ecx,ecx
c0002be6:	c1 ea 08             	shr    edx,0x8
c0002be9:	89 f0                	mov    eax,esi
c0002beb:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002bee:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002bf1:	e8 76 f5 ff ff       	call   c000216c <move_window>
c0002bf6:	89 c1                	mov    ecx,eax
c0002bf8:	85 c0                	test   eax,eax
c0002bfa:	75 7f                	jne    c0002c7b <put_fat+0x18c>
c0002bfc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002c00:	01 db                	add    ebx,ebx
c0002c02:	0f b7 d7             	movzx  edx,di
c0002c05:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002c0b:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002c0f:	e8 ec ed ff ff       	call   c0001a00 <st_word>
c0002c14:	eb 53                	jmp    c0002c69 <put_fat+0x17a>
c0002c16:	31 c9                	xor    ecx,ecx
c0002c18:	c1 ea 07             	shr    edx,0x7
c0002c1b:	89 f0                	mov    eax,esi
c0002c1d:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002c20:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002c23:	e8 44 f5 ff ff       	call   c000216c <move_window>
c0002c28:	89 c1                	mov    ecx,eax
c0002c2a:	85 c0                	test   eax,eax
c0002c2c:	75 4d                	jne    c0002c7b <put_fat+0x18c>
c0002c2e:	c1 e3 02             	shl    ebx,0x2
c0002c31:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002c37:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002c3a:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002c3e:	74 1c                	je     c0002c5c <put_fat+0x16d>
c0002c40:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002c44:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002c4a:	89 d8                	mov    eax,ebx
c0002c4c:	e8 4a ed ff ff       	call   c000199b <ld_dword>
c0002c51:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002c55:	25 00 00 00 f0       	and    eax,0xf0000000
c0002c5a:	09 c7                	or     edi,eax
c0002c5c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002c60:	89 fa                	mov    edx,edi
c0002c62:	89 d8                	mov    eax,ebx
c0002c64:	e8 9b ed ff ff       	call   c0001a04 <st_dword>
c0002c69:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002c6d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002c71:	eb 08                	jmp    c0002c7b <put_fat+0x18c>
c0002c73:	b9 02 00 00 00       	mov    ecx,0x2
c0002c78:	89 c8                	mov    eax,ecx
c0002c7a:	c3                   	ret    
c0002c7b:	83 c4 1c             	add    esp,0x1c
c0002c7e:	89 c8                	mov    eax,ecx
c0002c80:	5b                   	pop    ebx
c0002c81:	5e                   	pop    esi
c0002c82:	5f                   	pop    edi
c0002c83:	5d                   	pop    ebp
c0002c84:	c3                   	ret    

c0002c85 <fill_last_frag>:
c0002c85:	57                   	push   edi
c0002c86:	89 cf                	mov    edi,ecx
c0002c88:	56                   	push   esi
c0002c89:	89 d6                	mov    esi,edx
c0002c8b:	53                   	push   ebx
c0002c8c:	89 c3                	mov    ebx,eax
c0002c8e:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002c91:	85 c0                	test   eax,eax
c0002c93:	74 21                	je     c0002cb6 <fill_last_frag+0x31>
c0002c95:	89 f9                	mov    ecx,edi
c0002c97:	83 f8 01             	cmp    eax,0x1
c0002c9a:	76 05                	jbe    c0002ca1 <fill_last_frag+0x1c>
c0002c9c:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002c9f:	29 c1                	sub    ecx,eax
c0002ca1:	8d 56 01             	lea    edx,[esi+0x1]
c0002ca4:	29 c2                	sub    edx,eax
c0002ca6:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002ca8:	e8 42 fe ff ff       	call   c0002aef <put_fat>
c0002cad:	85 c0                	test   eax,eax
c0002caf:	75 05                	jne    c0002cb6 <fill_last_frag+0x31>
c0002cb1:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002cb4:	eb d8                	jmp    c0002c8e <fill_last_frag+0x9>
c0002cb6:	5b                   	pop    ebx
c0002cb7:	5e                   	pop    esi
c0002cb8:	5f                   	pop    edi
c0002cb9:	c3                   	ret    

c0002cba <fill_first_frag>:
c0002cba:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002cbe:	75 2d                	jne    c0002ced <fill_first_frag+0x33>
c0002cc0:	57                   	push   edi
c0002cc1:	56                   	push   esi
c0002cc2:	53                   	push   ebx
c0002cc3:	89 c3                	mov    ebx,eax
c0002cc5:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002cc8:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002ccb:	01 d7                	add    edi,edx
c0002ccd:	39 fa                	cmp    edx,edi
c0002ccf:	74 14                	je     c0002ce5 <fill_first_frag+0x2b>
c0002cd1:	8d 72 01             	lea    esi,[edx+0x1]
c0002cd4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002cd6:	89 f1                	mov    ecx,esi
c0002cd8:	e8 12 fe ff ff       	call   c0002aef <put_fat>
c0002cdd:	89 f2                	mov    edx,esi
c0002cdf:	85 c0                	test   eax,eax
c0002ce1:	74 ea                	je     c0002ccd <fill_first_frag+0x13>
c0002ce3:	eb 0b                	jmp    c0002cf0 <fill_first_frag+0x36>
c0002ce5:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002ce9:	31 c0                	xor    eax,eax
c0002ceb:	eb 03                	jmp    c0002cf0 <fill_first_frag+0x36>
c0002ced:	31 c0                	xor    eax,eax
c0002cef:	c3                   	ret    
c0002cf0:	5b                   	pop    ebx
c0002cf1:	5e                   	pop    esi
c0002cf2:	5f                   	pop    edi
c0002cf3:	c3                   	ret    

c0002cf4 <get_fat>:
c0002cf4:	83 fa 01             	cmp    edx,0x1
c0002cf7:	0f 86 db 01 00 00    	jbe    c0002ed8 <get_fat+0x1e4>
c0002cfd:	55                   	push   ebp
c0002cfe:	b9 01 00 00 00       	mov    ecx,0x1
c0002d03:	57                   	push   edi
c0002d04:	56                   	push   esi
c0002d05:	53                   	push   ebx
c0002d06:	83 ec 1c             	sub    esp,0x1c
c0002d09:	8b 38                	mov    edi,DWORD PTR [eax]
c0002d0b:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002d0e:	0f 86 cc 01 00 00    	jbe    c0002ee0 <get_fat+0x1ec>
c0002d14:	89 c3                	mov    ebx,eax
c0002d16:	89 d6                	mov    esi,edx
c0002d18:	8a 07                	mov    al,BYTE PTR [edi]
c0002d1a:	3c 02                	cmp    al,0x2
c0002d1c:	0f 84 99 00 00 00    	je     c0002dbb <get_fat+0xc7>
c0002d22:	77 09                	ja     c0002d2d <get_fat+0x39>
c0002d24:	fe c8                	dec    al
c0002d26:	74 1a                	je     c0002d42 <get_fat+0x4e>
c0002d28:	e9 b3 01 00 00       	jmp    c0002ee0 <get_fat+0x1ec>
c0002d2d:	3c 03                	cmp    al,0x3
c0002d2f:	0f 84 b5 00 00 00    	je     c0002dea <get_fat+0xf6>
c0002d35:	3c 04                	cmp    al,0x4
c0002d37:	0f 84 e3 00 00 00    	je     c0002e20 <get_fat+0x12c>
c0002d3d:	e9 9e 01 00 00       	jmp    c0002ee0 <get_fat+0x1ec>
c0002d42:	89 d3                	mov    ebx,edx
c0002d44:	31 c9                	xor    ecx,ecx
c0002d46:	d1 eb                	shr    ebx,1
c0002d48:	89 f8                	mov    eax,edi
c0002d4a:	01 d3                	add    ebx,edx
c0002d4c:	89 da                	mov    edx,ebx
c0002d4e:	c1 ea 09             	shr    edx,0x9
c0002d51:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002d54:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002d57:	e8 10 f4 ff ff       	call   c000216c <move_window>
c0002d5c:	85 c0                	test   eax,eax
c0002d5e:	74 08                	je     c0002d68 <get_fat+0x74>
c0002d60:	83 c9 ff             	or     ecx,0xffffffff
c0002d63:	e9 78 01 00 00       	jmp    c0002ee0 <get_fat+0x1ec>
c0002d68:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0002d6b:	31 c9                	xor    ecx,ecx
c0002d6d:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002d73:	89 ea                	mov    edx,ebp
c0002d75:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0002d79:	c1 ea 09             	shr    edx,0x9
c0002d7c:	89 f8                	mov    eax,edi
c0002d7e:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002d81:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002d84:	e8 e3 f3 ff ff       	call   c000216c <move_window>
c0002d89:	85 c0                	test   eax,eax
c0002d8b:	75 d3                	jne    c0002d60 <get_fat+0x6c>
c0002d8d:	0f b6 c3             	movzx  eax,bl
c0002d90:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002d96:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0002d9b:	c1 e3 08             	shl    ebx,0x8
c0002d9e:	09 c3                	or     ebx,eax
c0002da0:	89 d9                	mov    ecx,ebx
c0002da2:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0002da8:	83 e6 01             	and    esi,0x1
c0002dab:	0f 84 2f 01 00 00    	je     c0002ee0 <get_fat+0x1ec>
c0002db1:	89 d9                	mov    ecx,ebx
c0002db3:	c1 e9 04             	shr    ecx,0x4
c0002db6:	e9 25 01 00 00       	jmp    c0002ee0 <get_fat+0x1ec>
c0002dbb:	31 c9                	xor    ecx,ecx
c0002dbd:	c1 ea 08             	shr    edx,0x8
c0002dc0:	89 f8                	mov    eax,edi
c0002dc2:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002dc5:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002dc8:	e8 9f f3 ff ff       	call   c000216c <move_window>
c0002dcd:	85 c0                	test   eax,eax
c0002dcf:	75 8f                	jne    c0002d60 <get_fat+0x6c>
c0002dd1:	01 f6                	add    esi,esi
c0002dd3:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0002dd9:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002ddd:	e8 ac eb ff ff       	call   c000198e <ld_word>
c0002de2:	0f b7 c8             	movzx  ecx,ax
c0002de5:	e9 f6 00 00 00       	jmp    c0002ee0 <get_fat+0x1ec>
c0002dea:	31 c9                	xor    ecx,ecx
c0002dec:	c1 ea 07             	shr    edx,0x7
c0002def:	89 f8                	mov    eax,edi
c0002df1:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002df4:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002df7:	e8 70 f3 ff ff       	call   c000216c <move_window>
c0002dfc:	85 c0                	test   eax,eax
c0002dfe:	0f 85 5c ff ff ff    	jne    c0002d60 <get_fat+0x6c>
c0002e04:	c1 e6 02             	shl    esi,0x2
c0002e07:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002e0d:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002e11:	e8 85 eb ff ff       	call   c000199b <ld_dword>
c0002e16:	25 ff ff ff 0f       	and    eax,0xfffffff
c0002e1b:	e9 b4 00 00 00       	jmp    c0002ed4 <get_fat+0x1e0>
c0002e20:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0002e23:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002e26:	89 d1                	mov    ecx,edx
c0002e28:	09 c1                	or     ecx,eax
c0002e2a:	74 06                	je     c0002e32 <get_fat+0x13e>
c0002e2c:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0002e30:	75 0f                	jne    c0002e41 <get_fat+0x14d>
c0002e32:	b9 01 00 00 00       	mov    ecx,0x1
c0002e37:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c0002e3b:	0f 85 9f 00 00 00    	jne    c0002ee0 <get_fat+0x1ec>
c0002e41:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0002e45:	89 f5                	mov    ebp,esi
c0002e47:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c0002e4c:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0002e4f:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0002e52:	80 f9 02             	cmp    cl,0x2
c0002e55:	75 35                	jne    c0002e8c <get_fat+0x198>
c0002e57:	83 c0 ff             	add    eax,0xffffffff
c0002e5a:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0002e5f:	83 d2 ff             	adc    edx,0xffffffff
c0002e62:	31 db                	xor    ebx,ebx
c0002e64:	0f ac d0 09          	shrd   eax,edx,0x9
c0002e68:	53                   	push   ebx
c0002e69:	c1 ea 09             	shr    edx,0x9
c0002e6c:	51                   	push   ecx
c0002e6d:	52                   	push   edx
c0002e6e:	50                   	push   eax
c0002e6f:	e8 48 b5 01 00       	call   c001e3bc <__udivdi3>
c0002e74:	83 c4 10             	add    esp,0x10
c0002e77:	b9 01 00 00 00       	mov    ecx,0x1
c0002e7c:	39 c5                	cmp    ebp,eax
c0002e7e:	77 60                	ja     c0002ee0 <get_fat+0x1ec>
c0002e80:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002e85:	74 59                	je     c0002ee0 <get_fat+0x1ec>
c0002e87:	8d 4e 01             	lea    ecx,[esi+0x1]
c0002e8a:	eb 54                	jmp    c0002ee0 <get_fat+0x1ec>
c0002e8c:	80 f9 03             	cmp    cl,0x3
c0002e8f:	75 05                	jne    c0002e96 <get_fat+0x1a2>
c0002e91:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0002e94:	77 f1                	ja     c0002e87 <get_fat+0x193>
c0002e96:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002e9b:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0002e9f:	75 3f                	jne    c0002ee0 <get_fat+0x1ec>
c0002ea1:	31 c9                	xor    ecx,ecx
c0002ea3:	89 f2                	mov    edx,esi
c0002ea5:	89 f8                	mov    eax,edi
c0002ea7:	c1 ea 07             	shr    edx,0x7
c0002eaa:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002ead:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002eb0:	e8 b7 f2 ff ff       	call   c000216c <move_window>
c0002eb5:	85 c0                	test   eax,eax
c0002eb7:	0f 85 a3 fe ff ff    	jne    c0002d60 <get_fat+0x6c>
c0002ebd:	c1 e6 02             	shl    esi,0x2
c0002ec0:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002ec6:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002eca:	e8 cc ea ff ff       	call   c000199b <ld_dword>
c0002ecf:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0002ed4:	89 c1                	mov    ecx,eax
c0002ed6:	eb 08                	jmp    c0002ee0 <get_fat+0x1ec>
c0002ed8:	b9 01 00 00 00       	mov    ecx,0x1
c0002edd:	89 c8                	mov    eax,ecx
c0002edf:	c3                   	ret    
c0002ee0:	83 c4 1c             	add    esp,0x1c
c0002ee3:	89 c8                	mov    eax,ecx
c0002ee5:	5b                   	pop    ebx
c0002ee6:	5e                   	pop    esi
c0002ee7:	5f                   	pop    edi
c0002ee8:	5d                   	pop    ebp
c0002ee9:	c3                   	ret    

c0002eea <dir_sdi>:
c0002eea:	55                   	push   ebp
c0002eeb:	57                   	push   edi
c0002eec:	56                   	push   esi
c0002eed:	53                   	push   ebx
c0002eee:	89 c3                	mov    ebx,eax
c0002ef0:	83 ec 1c             	sub    esp,0x1c
c0002ef3:	8b 38                	mov    edi,DWORD PTR [eax]
c0002ef5:	31 c0                	xor    eax,eax
c0002ef7:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0002efa:	0f 94 c0             	sete   al
c0002efd:	48                   	dec    eax
c0002efe:	25 00 00 20 f0       	and    eax,0xf0200000
c0002f03:	05 00 00 00 10       	add    eax,0x10000000
c0002f08:	39 d0                	cmp    eax,edx
c0002f0a:	77 0a                	ja     c0002f16 <dir_sdi+0x2c>
c0002f0c:	b8 02 00 00 00       	mov    eax,0x2
c0002f11:	e9 c4 00 00 00       	jmp    c0002fda <dir_sdi+0xf0>
c0002f16:	89 d6                	mov    esi,edx
c0002f18:	f6 c2 1f             	test   dl,0x1f
c0002f1b:	75 ef                	jne    c0002f0c <dir_sdi+0x22>
c0002f1d:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0002f20:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c0002f23:	85 c9                	test   ecx,ecx
c0002f25:	75 2d                	jne    c0002f54 <dir_sdi+0x6a>
c0002f27:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0002f2a:	77 1b                	ja     c0002f47 <dir_sdi+0x5d>
c0002f2c:	89 f2                	mov    edx,esi
c0002f2e:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0002f32:	c1 ea 05             	shr    edx,0x5
c0002f35:	39 c2                	cmp    edx,eax
c0002f37:	73 d3                	jae    c0002f0c <dir_sdi+0x22>
c0002f39:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0002f3c:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c0002f3f:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002f42:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0002f45:	eb 4b                	jmp    c0002f92 <dir_sdi+0xa8>
c0002f47:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0002f4a:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002f4e:	85 c0                	test   eax,eax
c0002f50:	74 da                	je     c0002f2c <dir_sdi+0x42>
c0002f52:	89 c1                	mov    ecx,eax
c0002f54:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0002f58:	c1 e5 09             	shl    ebp,0x9
c0002f5b:	89 ca                	mov    edx,ecx
c0002f5d:	39 ee                	cmp    esi,ebp
c0002f5f:	72 1c                	jb     c0002f7d <dir_sdi+0x93>
c0002f61:	89 d8                	mov    eax,ebx
c0002f63:	e8 8c fd ff ff       	call   c0002cf4 <get_fat>
c0002f68:	89 c1                	mov    ecx,eax
c0002f6a:	83 f8 ff             	cmp    eax,0xffffffff
c0002f6d:	74 66                	je     c0002fd5 <dir_sdi+0xeb>
c0002f6f:	83 f8 01             	cmp    eax,0x1
c0002f72:	76 98                	jbe    c0002f0c <dir_sdi+0x22>
c0002f74:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0002f77:	76 93                	jbe    c0002f0c <dir_sdi+0x22>
c0002f79:	29 ee                	sub    esi,ebp
c0002f7b:	eb de                	jmp    c0002f5b <dir_sdi+0x71>
c0002f7d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002f81:	89 f8                	mov    eax,edi
c0002f83:	e8 9f ec ff ff       	call   c0001c27 <clst2sect>
c0002f88:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f8c:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002f8f:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0002f92:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0002f95:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0002f98:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0002f9b:	89 d1                	mov    ecx,edx
c0002f9d:	09 c1                	or     ecx,eax
c0002f9f:	0f 84 67 ff ff ff    	je     c0002f0c <dir_sdi+0x22>
c0002fa5:	89 f1                	mov    ecx,esi
c0002fa7:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002faf:	c1 e9 09             	shr    ecx,0x9
c0002fb2:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002fb6:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002fba:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002fbe:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002fc1:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002fc7:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0002fca:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002fce:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0002fd1:	31 c0                	xor    eax,eax
c0002fd3:	eb 05                	jmp    c0002fda <dir_sdi+0xf0>
c0002fd5:	b8 01 00 00 00       	mov    eax,0x1
c0002fda:	83 c4 1c             	add    esp,0x1c
c0002fdd:	5b                   	pop    ebx
c0002fde:	5e                   	pop    esi
c0002fdf:	5f                   	pop    edi
c0002fe0:	5d                   	pop    ebp
c0002fe1:	c3                   	ret    

c0002fe2 <create_chain>:
c0002fe2:	55                   	push   ebp
c0002fe3:	89 c5                	mov    ebp,eax
c0002fe5:	57                   	push   edi
c0002fe6:	56                   	push   esi
c0002fe7:	53                   	push   ebx
c0002fe8:	83 ec 1c             	sub    esp,0x1c
c0002feb:	85 d2                	test   edx,edx
c0002fed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002ff1:	8b 30                	mov    esi,DWORD PTR [eax]
c0002ff3:	75 0e                	jne    c0003003 <create_chain+0x21>
c0002ff5:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0002ff8:	85 ff                	test   edi,edi
c0002ffa:	74 39                	je     c0003035 <create_chain+0x53>
c0002ffc:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0002fff:	77 39                	ja     c000303a <create_chain+0x58>
c0003001:	eb 32                	jmp    c0003035 <create_chain+0x53>
c0003003:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003007:	e8 e8 fc ff ff       	call   c0002cf4 <get_fat>
c000300c:	89 c3                	mov    ebx,eax
c000300e:	83 f8 01             	cmp    eax,0x1
c0003011:	77 0a                	ja     c000301d <create_chain+0x3b>
c0003013:	bb 01 00 00 00       	mov    ebx,0x1
c0003018:	e9 ba 01 00 00       	jmp    c00031d7 <create_chain+0x1f5>
c000301d:	83 f8 ff             	cmp    eax,0xffffffff
c0003020:	0f 84 62 01 00 00    	je     c0003188 <create_chain+0x1a6>
c0003026:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c0003029:	0f 87 a8 01 00 00    	ja     c00031d7 <create_chain+0x1f5>
c000302f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0003033:	eb 05                	jmp    c000303a <create_chain+0x58>
c0003035:	bf 01 00 00 00       	mov    edi,0x1
c000303a:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c000303e:	75 07                	jne    c0003047 <create_chain+0x65>
c0003040:	31 db                	xor    ebx,ebx
c0003042:	e9 90 01 00 00       	jmp    c00031d7 <create_chain+0x1f5>
c0003047:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c000304a:	75 74                	jne    c00030c0 <create_chain+0xde>
c000304c:	b9 01 00 00 00       	mov    ecx,0x1
c0003051:	89 fa                	mov    edx,edi
c0003053:	89 f0                	mov    eax,esi
c0003055:	e8 2d f9 ff ff       	call   c0002987 <find_bitmap>
c000305a:	89 c3                	mov    ebx,eax
c000305c:	8d 40 ff             	lea    eax,[eax-0x1]
c000305f:	83 f8 fd             	cmp    eax,0xfffffffd
c0003062:	0f 87 6f 01 00 00    	ja     c00031d7 <create_chain+0x1f5>
c0003068:	83 ec 0c             	sub    esp,0xc
c000306b:	b9 01 00 00 00       	mov    ecx,0x1
c0003070:	6a 01                	push   0x1
c0003072:	89 da                	mov    edx,ebx
c0003074:	89 f0                	mov    eax,esi
c0003076:	e8 bf f9 ff ff       	call   c0002a3a <change_bitmap>
c000307b:	83 c4 10             	add    esp,0x10
c000307e:	83 f8 02             	cmp    eax,0x2
c0003081:	74 90                	je     c0003013 <create_chain+0x31>
c0003083:	83 f8 01             	cmp    eax,0x1
c0003086:	0f 84 fc 00 00 00    	je     c0003188 <create_chain+0x1a6>
c000308c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003091:	75 09                	jne    c000309c <create_chain+0xba>
c0003093:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c0003097:	e9 0c 01 00 00       	jmp    c00031a8 <create_chain+0x1c6>
c000309c:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c00030a0:	0f 85 e7 00 00 00    	jne    c000318d <create_chain+0x1ab>
c00030a6:	8d 57 01             	lea    edx,[edi+0x1]
c00030a9:	39 da                	cmp    edx,ebx
c00030ab:	0f 84 f7 00 00 00    	je     c00031a8 <create_chain+0x1c6>
c00030b1:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c00030b4:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c00030b8:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c00030bb:	e9 cd 00 00 00       	jmp    c000318d <create_chain+0x1ab>
c00030c0:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00030c4:	75 41                	jne    c0003107 <create_chain+0x125>
c00030c6:	8d 5f 01             	lea    ebx,[edi+0x1]
c00030c9:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00030cc:	77 05                	ja     c00030d3 <create_chain+0xf1>
c00030ce:	bb 02 00 00 00       	mov    ebx,0x2
c00030d3:	89 da                	mov    edx,ebx
c00030d5:	89 e8                	mov    eax,ebp
c00030d7:	e8 18 fc ff ff       	call   c0002cf4 <get_fat>
c00030dc:	83 f8 01             	cmp    eax,0x1
c00030df:	0f 84 2e ff ff ff    	je     c0003013 <create_chain+0x31>
c00030e5:	83 f8 ff             	cmp    eax,0xffffffff
c00030e8:	0f 84 9a 00 00 00    	je     c0003188 <create_chain+0x1a6>
c00030ee:	85 c0                	test   eax,eax
c00030f0:	74 11                	je     c0003103 <create_chain+0x121>
c00030f2:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00030f5:	83 f8 01             	cmp    eax,0x1
c00030f8:	76 0d                	jbe    c0003107 <create_chain+0x125>
c00030fa:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00030fd:	76 08                	jbe    c0003107 <create_chain+0x125>
c00030ff:	89 c7                	mov    edi,eax
c0003101:	eb 04                	jmp    c0003107 <create_chain+0x125>
c0003103:	85 db                	test   ebx,ebx
c0003105:	75 38                	jne    c000313f <create_chain+0x15d>
c0003107:	89 fb                	mov    ebx,edi
c0003109:	43                   	inc    ebx
c000310a:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c000310d:	77 0e                	ja     c000311d <create_chain+0x13b>
c000310f:	83 ff 01             	cmp    edi,0x1
c0003112:	0f 86 28 ff ff ff    	jbe    c0003040 <create_chain+0x5e>
c0003118:	bb 02 00 00 00       	mov    ebx,0x2
c000311d:	89 da                	mov    edx,ebx
c000311f:	89 e8                	mov    eax,ebp
c0003121:	e8 ce fb ff ff       	call   c0002cf4 <get_fat>
c0003126:	85 c0                	test   eax,eax
c0003128:	74 15                	je     c000313f <create_chain+0x15d>
c000312a:	83 f8 01             	cmp    eax,0x1
c000312d:	0f 84 e0 fe ff ff    	je     c0003013 <create_chain+0x31>
c0003133:	40                   	inc    eax
c0003134:	74 52                	je     c0003188 <create_chain+0x1a6>
c0003136:	39 fb                	cmp    ebx,edi
c0003138:	75 cf                	jne    c0003109 <create_chain+0x127>
c000313a:	e9 01 ff ff ff       	jmp    c0003040 <create_chain+0x5e>
c000313f:	83 c9 ff             	or     ecx,0xffffffff
c0003142:	89 da                	mov    edx,ebx
c0003144:	89 f0                	mov    eax,esi
c0003146:	e8 a4 f9 ff ff       	call   c0002aef <put_fat>
c000314b:	85 c0                	test   eax,eax
c000314d:	75 32                	jne    c0003181 <create_chain+0x19f>
c000314f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003154:	74 11                	je     c0003167 <create_chain+0x185>
c0003156:	89 d9                	mov    ecx,ebx
c0003158:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000315c:	89 f0                	mov    eax,esi
c000315e:	e8 8c f9 ff ff       	call   c0002aef <put_fat>
c0003163:	85 c0                	test   eax,eax
c0003165:	75 1a                	jne    c0003181 <create_chain+0x19f>
c0003167:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000316a:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c000316d:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003170:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003173:	39 d0                	cmp    eax,edx
c0003175:	77 04                	ja     c000317b <create_chain+0x199>
c0003177:	48                   	dec    eax
c0003178:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c000317b:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c000317f:	eb 56                	jmp    c00031d7 <create_chain+0x1f5>
c0003181:	48                   	dec    eax
c0003182:	0f 85 8b fe ff ff    	jne    c0003013 <create_chain+0x31>
c0003188:	83 cb ff             	or     ebx,0xffffffff
c000318b:	eb 4a                	jmp    c00031d7 <create_chain+0x1f5>
c000318d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003191:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003194:	41                   	inc    ecx
c0003195:	39 d9                	cmp    ecx,ebx
c0003197:	75 19                	jne    c00031b2 <create_chain+0x1d0>
c0003199:	b9 02 00 00 00       	mov    ecx,0x2
c000319e:	85 d2                	test   edx,edx
c00031a0:	74 03                	je     c00031a5 <create_chain+0x1c3>
c00031a2:	8d 4a 01             	lea    ecx,[edx+0x1]
c00031a5:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c00031a8:	85 c0                	test   eax,eax
c00031aa:	0f 85 63 fe ff ff    	jne    c0003013 <create_chain+0x31>
c00031b0:	eb b5                	jmp    c0003167 <create_chain+0x185>
c00031b2:	85 d2                	test   edx,edx
c00031b4:	75 07                	jne    c00031bd <create_chain+0x1db>
c00031b6:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00031bd:	89 d9                	mov    ecx,ebx
c00031bf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00031c3:	89 e8                	mov    eax,ebp
c00031c5:	e8 bb fa ff ff       	call   c0002c85 <fill_last_frag>
c00031ca:	85 c0                	test   eax,eax
c00031cc:	75 b3                	jne    c0003181 <create_chain+0x19f>
c00031ce:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00031d5:	eb 90                	jmp    c0003167 <create_chain+0x185>
c00031d7:	83 c4 1c             	add    esp,0x1c
c00031da:	89 d8                	mov    eax,ebx
c00031dc:	5b                   	pop    ebx
c00031dd:	5e                   	pop    esi
c00031de:	5f                   	pop    edi
c00031df:	5d                   	pop    ebp
c00031e0:	c3                   	ret    

c00031e1 <remove_chain>:
c00031e1:	55                   	push   ebp
c00031e2:	57                   	push   edi
c00031e3:	56                   	push   esi
c00031e4:	53                   	push   ebx
c00031e5:	83 ec 1c             	sub    esp,0x1c
c00031e8:	83 fa 01             	cmp    edx,0x1
c00031eb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00031ef:	8b 18                	mov    ebx,DWORD PTR [eax]
c00031f1:	77 0a                	ja     c00031fd <remove_chain+0x1c>
c00031f3:	b8 02 00 00 00       	mov    eax,0x2
c00031f8:	e9 24 01 00 00       	jmp    c0003321 <remove_chain+0x140>
c00031fd:	89 d6                	mov    esi,edx
c00031ff:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c0003202:	76 ef                	jbe    c00031f3 <remove_chain+0x12>
c0003204:	89 c7                	mov    edi,eax
c0003206:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000320b:	75 06                	jne    c0003213 <remove_chain+0x32>
c000320d:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0003211:	eb 54                	jmp    c0003267 <remove_chain+0x86>
c0003213:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003216:	75 06                	jne    c000321e <remove_chain+0x3d>
c0003218:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c000321c:	74 ef                	je     c000320d <remove_chain+0x2c>
c000321e:	83 c9 ff             	or     ecx,0xffffffff
c0003221:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003225:	89 d8                	mov    eax,ebx
c0003227:	e8 c3 f8 ff ff       	call   c0002aef <put_fat>
c000322c:	85 c0                	test   eax,eax
c000322e:	74 dd                	je     c000320d <remove_chain+0x2c>
c0003230:	e9 ec 00 00 00       	jmp    c0003321 <remove_chain+0x140>
c0003235:	83 f8 01             	cmp    eax,0x1
c0003238:	74 b9                	je     c00031f3 <remove_chain+0x12>
c000323a:	83 f8 ff             	cmp    eax,0xffffffff
c000323d:	74 6d                	je     c00032ac <remove_chain+0xcb>
c000323f:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003242:	75 6f                	jne    c00032b3 <remove_chain+0xd2>
c0003244:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0003247:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c000324a:	8d 51 fe             	lea    edx,[ecx-0x2]
c000324d:	39 d0                	cmp    eax,edx
c000324f:	73 08                	jae    c0003259 <remove_chain+0x78>
c0003251:	40                   	inc    eax
c0003252:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003256:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003259:	8d 4e 01             	lea    ecx,[esi+0x1]
c000325c:	39 e9                	cmp    ecx,ebp
c000325e:	75 64                	jne    c00032c4 <remove_chain+0xe3>
c0003260:	89 ee                	mov    esi,ebp
c0003262:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003265:	76 0f                	jbe    c0003276 <remove_chain+0x95>
c0003267:	89 f2                	mov    edx,esi
c0003269:	89 f8                	mov    eax,edi
c000326b:	e8 84 fa ff ff       	call   c0002cf4 <get_fat>
c0003270:	89 c5                	mov    ebp,eax
c0003272:	85 c0                	test   eax,eax
c0003274:	75 bf                	jne    c0003235 <remove_chain+0x54>
c0003276:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003279:	0f 85 a0 00 00 00    	jne    c000331f <remove_chain+0x13e>
c000327f:	eb 6c                	jmp    c00032ed <remove_chain+0x10c>
c0003281:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003284:	84 c0                	test   al,al
c0003286:	75 7d                	jne    c0003305 <remove_chain+0x124>
c0003288:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000328b:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c000328f:	0f 84 86 00 00 00    	je     c000331b <remove_chain+0x13a>
c0003295:	89 da                	mov    edx,ebx
c0003297:	89 f8                	mov    eax,edi
c0003299:	e8 56 fa ff ff       	call   c0002cf4 <get_fat>
c000329e:	83 f8 01             	cmp    eax,0x1
c00032a1:	0f 86 4c ff ff ff    	jbe    c00031f3 <remove_chain+0x12>
c00032a7:	83 f8 ff             	cmp    eax,0xffffffff
c00032aa:	75 4e                	jne    c00032fa <remove_chain+0x119>
c00032ac:	b8 01 00 00 00       	mov    eax,0x1
c00032b1:	eb 6e                	jmp    c0003321 <remove_chain+0x140>
c00032b3:	31 c9                	xor    ecx,ecx
c00032b5:	89 f2                	mov    edx,esi
c00032b7:	89 d8                	mov    eax,ebx
c00032b9:	e8 31 f8 ff ff       	call   c0002aef <put_fat>
c00032be:	85 c0                	test   eax,eax
c00032c0:	74 82                	je     c0003244 <remove_chain+0x63>
c00032c2:	eb 5d                	jmp    c0003321 <remove_chain+0x140>
c00032c4:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00032c7:	75 1b                	jne    c00032e4 <remove_chain+0x103>
c00032c9:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00032cd:	89 d8                	mov    eax,ebx
c00032cf:	83 ec 0c             	sub    esp,0xc
c00032d2:	6a 00                	push   0x0
c00032d4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00032d8:	e8 5d f7 ff ff       	call   c0002a3a <change_bitmap>
c00032dd:	83 c4 10             	add    esp,0x10
c00032e0:	85 c0                	test   eax,eax
c00032e2:	75 3d                	jne    c0003321 <remove_chain+0x140>
c00032e4:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00032e8:	e9 73 ff ff ff       	jmp    c0003260 <remove_chain+0x7f>
c00032ed:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00032f2:	75 8d                	jne    c0003281 <remove_chain+0xa0>
c00032f4:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00032f8:	eb 25                	jmp    c000331f <remove_chain+0x13e>
c00032fa:	8d 53 01             	lea    edx,[ebx+0x1]
c00032fd:	89 c3                	mov    ebx,eax
c00032ff:	39 c2                	cmp    edx,eax
c0003301:	74 88                	je     c000328b <remove_chain+0xaa>
c0003303:	eb 1a                	jmp    c000331f <remove_chain+0x13e>
c0003305:	3c 03                	cmp    al,0x3
c0003307:	75 16                	jne    c000331f <remove_chain+0x13e>
c0003309:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000330c:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0003310:	77 0d                	ja     c000331f <remove_chain+0x13e>
c0003312:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c0003315:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0003319:	72 04                	jb     c000331f <remove_chain+0x13e>
c000331b:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c000331f:	31 c0                	xor    eax,eax
c0003321:	83 c4 1c             	add    esp,0x1c
c0003324:	5b                   	pop    ebx
c0003325:	5e                   	pop    esi
c0003326:	5f                   	pop    edi
c0003327:	5d                   	pop    ebp
c0003328:	c3                   	ret    

c0003329 <dir_clear>:
c0003329:	55                   	push   ebp
c000332a:	57                   	push   edi
c000332b:	56                   	push   esi
c000332c:	89 c6                	mov    esi,eax
c000332e:	53                   	push   ebx
c000332f:	83 ec 1c             	sub    esp,0x1c
c0003332:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003336:	e8 9d ed ff ff       	call   c00020d8 <sync_window>
c000333b:	85 c0                	test   eax,eax
c000333d:	0f 85 de 00 00 00    	jne    c0003421 <dir_clear+0xf8>
c0003343:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003347:	89 f0                	mov    eax,esi
c0003349:	8d 6e 54             	lea    ebp,[esi+0x54]
c000334c:	e8 d6 e8 ff ff       	call   c0001c27 <clst2sect>
c0003351:	b9 00 02 00 00       	mov    ecx,0x200
c0003356:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000335a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000335e:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c0003361:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003364:	89 e8                	mov    eax,ebp
c0003366:	31 d2                	xor    edx,edx
c0003368:	e8 b5 e6 ff ff       	call   c0001a22 <mem_set>
c000336d:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0003371:	c1 e3 09             	shl    ebx,0x9
c0003374:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c000337a:	76 1f                	jbe    c000339b <dir_clear+0x72>
c000337c:	bb 00 80 00 00       	mov    ebx,0x8000
c0003381:	eb 18                	jmp    c000339b <dir_clear+0x72>
c0003383:	83 ec 0c             	sub    esp,0xc
c0003386:	53                   	push   ebx
c0003387:	e8 35 4e 00 00       	call   c00081c1 <ff_memalloc>
c000338c:	83 c4 10             	add    esp,0x10
c000338f:	89 c7                	mov    edi,eax
c0003391:	85 c0                	test   eax,eax
c0003393:	0f 85 8f 00 00 00    	jne    c0003428 <dir_clear+0xff>
c0003399:	d1 eb                	shr    ebx,1
c000339b:	81 fb 00 02 00 00    	cmp    ebx,0x200
c00033a1:	77 e0                	ja     c0003383 <dir_clear+0x5a>
c00033a3:	31 db                	xor    ebx,ebx
c00033a5:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00033a9:	39 d8                	cmp    eax,ebx
c00033ab:	76 66                	jbe    c0003413 <dir_clear+0xea>
c00033ad:	83 ec 0c             	sub    esp,0xc
c00033b0:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00033b4:	6a 01                	push   0x1
c00033b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00033ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00033be:	55                   	push   ebp
c00033bf:	50                   	push   eax
c00033c0:	e8 94 e5 ff ff       	call   c0001959 <disk_write>
c00033c5:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c00033ca:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c00033cf:	83 c4 20             	add    esp,0x20
c00033d2:	85 c0                	test   eax,eax
c00033d4:	75 3d                	jne    c0003413 <dir_clear+0xea>
c00033d6:	43                   	inc    ebx
c00033d7:	eb cc                	jmp    c00033a5 <dir_clear+0x7c>
c00033d9:	83 ec 0c             	sub    esp,0xc
c00033dc:	31 d2                	xor    edx,edx
c00033de:	55                   	push   ebp
c00033df:	89 d8                	mov    eax,ebx
c00033e1:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00033e5:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00033e9:	52                   	push   edx
c00033ea:	50                   	push   eax
c00033eb:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00033ef:	57                   	push   edi
c00033f0:	50                   	push   eax
c00033f1:	e8 63 e5 ff ff       	call   c0001959 <disk_write>
c00033f6:	83 c4 20             	add    esp,0x20
c00033f9:	85 c0                	test   eax,eax
c00033fb:	75 0a                	jne    c0003407 <dir_clear+0xde>
c00033fd:	01 eb                	add    ebx,ebp
c00033ff:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003403:	39 d8                	cmp    eax,ebx
c0003405:	77 d2                	ja     c00033d9 <dir_clear+0xb0>
c0003407:	83 ec 0c             	sub    esp,0xc
c000340a:	57                   	push   edi
c000340b:	e8 c7 4d 00 00       	call   c00081d7 <ff_memfree>
c0003410:	83 c4 10             	add    esp,0x10
c0003413:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003417:	39 d8                	cmp    eax,ebx
c0003419:	0f 95 c0             	setne  al
c000341c:	0f b6 c0             	movzx  eax,al
c000341f:	eb 19                	jmp    c000343a <dir_clear+0x111>
c0003421:	b8 01 00 00 00       	mov    eax,0x1
c0003426:	eb 12                	jmp    c000343a <dir_clear+0x111>
c0003428:	89 d9                	mov    ecx,ebx
c000342a:	31 d2                	xor    edx,edx
c000342c:	c1 eb 09             	shr    ebx,0x9
c000342f:	e8 ee e5 ff ff       	call   c0001a22 <mem_set>
c0003434:	89 dd                	mov    ebp,ebx
c0003436:	31 db                	xor    ebx,ebx
c0003438:	eb c5                	jmp    c00033ff <dir_clear+0xd6>
c000343a:	83 c4 1c             	add    esp,0x1c
c000343d:	5b                   	pop    ebx
c000343e:	5e                   	pop    esi
c000343f:	5f                   	pop    edi
c0003440:	5d                   	pop    ebp
c0003441:	c3                   	ret    

c0003442 <dir_next>:
c0003442:	55                   	push   ebp
c0003443:	57                   	push   edi
c0003444:	56                   	push   esi
c0003445:	53                   	push   ebx
c0003446:	89 c3                	mov    ebx,eax
c0003448:	83 ec 1c             	sub    esp,0x1c
c000344b:	8b 28                	mov    ebp,DWORD PTR [eax]
c000344d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003451:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003454:	8d 78 20             	lea    edi,[eax+0x20]
c0003457:	31 c0                	xor    eax,eax
c0003459:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c000345d:	0f 94 c0             	sete   al
c0003460:	48                   	dec    eax
c0003461:	25 00 00 20 f0       	and    eax,0xf0200000
c0003466:	05 00 00 00 10       	add    eax,0x10000000
c000346b:	39 f8                	cmp    eax,edi
c000346d:	77 0e                	ja     c000347d <dir_next+0x3b>
c000346f:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003476:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000347d:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003480:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003483:	b8 04 00 00 00       	mov    eax,0x4
c0003488:	89 ce                	mov    esi,ecx
c000348a:	09 d6                	or     esi,edx
c000348c:	0f 84 da 00 00 00    	je     c000356c <dir_next+0x12a>
c0003492:	89 f8                	mov    eax,edi
c0003494:	25 ff 01 00 00       	and    eax,0x1ff
c0003499:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000349d:	0f 85 b9 00 00 00    	jne    c000355c <dir_next+0x11a>
c00034a3:	83 c2 01             	add    edx,0x1
c00034a6:	83 d1 00             	adc    ecx,0x0
c00034a9:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00034ac:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c00034af:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00034b2:	85 d2                	test   edx,edx
c00034b4:	75 29                	jne    c00034df <dir_next+0x9d>
c00034b6:	89 fa                	mov    edx,edi
c00034b8:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c00034bc:	c1 ea 05             	shr    edx,0x5
c00034bf:	39 c2                	cmp    edx,eax
c00034c1:	0f 82 95 00 00 00    	jb     c000355c <dir_next+0x11a>
c00034c7:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00034ce:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00034d5:	b8 04 00 00 00       	mov    eax,0x4
c00034da:	e9 8d 00 00 00       	jmp    c000356c <dir_next+0x12a>
c00034df:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00034e3:	89 f9                	mov    ecx,edi
c00034e5:	48                   	dec    eax
c00034e6:	c1 e9 09             	shr    ecx,0x9
c00034e9:	85 c8                	test   eax,ecx
c00034eb:	75 6f                	jne    c000355c <dir_next+0x11a>
c00034ed:	89 d8                	mov    eax,ebx
c00034ef:	e8 00 f8 ff ff       	call   c0002cf4 <get_fat>
c00034f4:	89 c6                	mov    esi,eax
c00034f6:	83 f8 01             	cmp    eax,0x1
c00034f9:	77 07                	ja     c0003502 <dir_next+0xc0>
c00034fb:	b8 02 00 00 00       	mov    eax,0x2
c0003500:	eb 6a                	jmp    c000356c <dir_next+0x12a>
c0003502:	83 f8 ff             	cmp    eax,0xffffffff
c0003505:	75 07                	jne    c000350e <dir_next+0xcc>
c0003507:	b8 01 00 00 00       	mov    eax,0x1
c000350c:	eb 5e                	jmp    c000356c <dir_next+0x12a>
c000350e:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0003511:	77 37                	ja     c000354a <dir_next+0x108>
c0003513:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003518:	74 ad                	je     c00034c7 <dir_next+0x85>
c000351a:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000351d:	89 d8                	mov    eax,ebx
c000351f:	e8 be fa ff ff       	call   c0002fe2 <create_chain>
c0003524:	89 c6                	mov    esi,eax
c0003526:	b8 07 00 00 00       	mov    eax,0x7
c000352b:	85 f6                	test   esi,esi
c000352d:	74 3d                	je     c000356c <dir_next+0x12a>
c000352f:	83 fe 01             	cmp    esi,0x1
c0003532:	74 c7                	je     c00034fb <dir_next+0xb9>
c0003534:	83 fe ff             	cmp    esi,0xffffffff
c0003537:	74 ce                	je     c0003507 <dir_next+0xc5>
c0003539:	89 f2                	mov    edx,esi
c000353b:	89 e8                	mov    eax,ebp
c000353d:	e8 e7 fd ff ff       	call   c0003329 <dir_clear>
c0003542:	85 c0                	test   eax,eax
c0003544:	75 c1                	jne    c0003507 <dir_next+0xc5>
c0003546:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c000354a:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000354d:	89 f2                	mov    edx,esi
c000354f:	89 e8                	mov    eax,ebp
c0003551:	e8 d1 e6 ff ff       	call   c0001c27 <clst2sect>
c0003556:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003559:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000355c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003560:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c0003563:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003567:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000356a:	31 c0                	xor    eax,eax
c000356c:	83 c4 1c             	add    esp,0x1c
c000356f:	5b                   	pop    ebx
c0003570:	5e                   	pop    esi
c0003571:	5f                   	pop    edi
c0003572:	5d                   	pop    ebp
c0003573:	c3                   	ret    

c0003574 <load_xdir>:
c0003574:	55                   	push   ebp
c0003575:	57                   	push   edi
c0003576:	56                   	push   esi
c0003577:	89 c6                	mov    esi,eax
c0003579:	53                   	push   ebx
c000357a:	83 ec 1c             	sub    esp,0x1c
c000357d:	8b 00                	mov    eax,DWORD PTR [eax]
c000357f:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003582:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003585:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003588:	e8 df eb ff ff       	call   c000216c <move_window>
c000358d:	89 c3                	mov    ebx,eax
c000358f:	85 c0                	test   eax,eax
c0003591:	0f 85 0c 01 00 00    	jne    c00036a3 <load_xdir+0x12f>
c0003597:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000359a:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c000359d:	0f 85 fb 00 00 00    	jne    c000369e <load_xdir+0x12a>
c00035a3:	89 f8                	mov    eax,edi
c00035a5:	b9 20 00 00 00       	mov    ecx,0x20
c00035aa:	e8 5e e4 ff ff       	call   c0001a0d <mem_cpy>
c00035af:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c00035b3:	40                   	inc    eax
c00035b4:	c1 e0 05             	shl    eax,0x5
c00035b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00035bb:	83 e8 60             	sub    eax,0x60
c00035be:	3d 00 02 00 00       	cmp    eax,0x200
c00035c3:	0f 87 d5 00 00 00    	ja     c000369e <load_xdir+0x12a>
c00035c9:	31 d2                	xor    edx,edx
c00035cb:	89 f0                	mov    eax,esi
c00035cd:	e8 70 fe ff ff       	call   c0003442 <dir_next>
c00035d2:	89 c3                	mov    ebx,eax
c00035d4:	83 f8 04             	cmp    eax,0x4
c00035d7:	0f 84 c1 00 00 00    	je     c000369e <load_xdir+0x12a>
c00035dd:	85 c0                	test   eax,eax
c00035df:	0f 85 be 00 00 00    	jne    c00036a3 <load_xdir+0x12f>
c00035e5:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00035e8:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00035eb:	8b 06                	mov    eax,DWORD PTR [esi]
c00035ed:	e8 7a eb ff ff       	call   c000216c <move_window>
c00035f2:	89 c3                	mov    ebx,eax
c00035f4:	85 c0                	test   eax,eax
c00035f6:	0f 85 a7 00 00 00    	jne    c00036a3 <load_xdir+0x12f>
c00035fc:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00035ff:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c0003602:	0f 85 96 00 00 00    	jne    c000369e <load_xdir+0x12a>
c0003608:	8d 47 20             	lea    eax,[edi+0x20]
c000360b:	b9 20 00 00 00       	mov    ecx,0x20
c0003610:	e8 f8 e3 ff ff       	call   c0001a0d <mem_cpy>
c0003615:	31 d2                	xor    edx,edx
c0003617:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c000361b:	b9 0f 00 00 00       	mov    ecx,0xf
c0003620:	83 c0 2c             	add    eax,0x2c
c0003623:	f7 f1                	div    ecx
c0003625:	c1 e0 05             	shl    eax,0x5
c0003628:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000362c:	77 70                	ja     c000369e <load_xdir+0x12a>
c000362e:	bd 40 00 00 00       	mov    ebp,0x40
c0003633:	31 d2                	xor    edx,edx
c0003635:	89 f0                	mov    eax,esi
c0003637:	e8 06 fe ff ff       	call   c0003442 <dir_next>
c000363c:	89 c3                	mov    ebx,eax
c000363e:	83 f8 04             	cmp    eax,0x4
c0003641:	74 5b                	je     c000369e <load_xdir+0x12a>
c0003643:	85 c0                	test   eax,eax
c0003645:	75 5c                	jne    c00036a3 <load_xdir+0x12f>
c0003647:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000364a:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000364d:	8b 06                	mov    eax,DWORD PTR [esi]
c000364f:	e8 18 eb ff ff       	call   c000216c <move_window>
c0003654:	89 c3                	mov    ebx,eax
c0003656:	85 c0                	test   eax,eax
c0003658:	75 49                	jne    c00036a3 <load_xdir+0x12f>
c000365a:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000365d:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c0003660:	75 3c                	jne    c000369e <load_xdir+0x12a>
c0003662:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003668:	77 0d                	ja     c0003677 <load_xdir+0x103>
c000366a:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000366d:	b9 20 00 00 00       	mov    ecx,0x20
c0003672:	e8 96 e3 ff ff       	call   c0001a0d <mem_cpy>
c0003677:	83 c5 20             	add    ebp,0x20
c000367a:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c000367e:	77 b3                	ja     c0003633 <load_xdir+0xbf>
c0003680:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003686:	77 1b                	ja     c00036a3 <load_xdir+0x12f>
c0003688:	89 f8                	mov    eax,edi
c000368a:	e8 cd e7 ff ff       	call   c0001e5c <xdir_sum>
c000368f:	89 c1                	mov    ecx,eax
c0003691:	8d 47 02             	lea    eax,[edi+0x2]
c0003694:	e8 f5 e2 ff ff       	call   c000198e <ld_word>
c0003699:	66 39 c1             	cmp    cx,ax
c000369c:	74 05                	je     c00036a3 <load_xdir+0x12f>
c000369e:	bb 02 00 00 00       	mov    ebx,0x2
c00036a3:	83 c4 1c             	add    esp,0x1c
c00036a6:	89 d8                	mov    eax,ebx
c00036a8:	5b                   	pop    ebx
c00036a9:	5e                   	pop    esi
c00036aa:	5f                   	pop    edi
c00036ab:	5d                   	pop    ebp
c00036ac:	c3                   	ret    

c00036ad <load_obj_xdir>:
c00036ad:	53                   	push   ebx
c00036ae:	89 c3                	mov    ebx,eax
c00036b0:	83 ec 08             	sub    esp,0x8
c00036b3:	8b 02                	mov    eax,DWORD PTR [edx]
c00036b5:	89 03                	mov    DWORD PTR [ebx],eax
c00036b7:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00036ba:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00036bd:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00036c0:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c00036c3:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00036c6:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00036cd:	30 c0                	xor    al,al
c00036cf:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00036d6:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00036d9:	89 d8                	mov    eax,ebx
c00036db:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00036de:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c00036e1:	e8 04 f8 ff ff       	call   c0002eea <dir_sdi>
c00036e6:	85 c0                	test   eax,eax
c00036e8:	75 0b                	jne    c00036f5 <load_obj_xdir+0x48>
c00036ea:	89 d8                	mov    eax,ebx
c00036ec:	83 c4 08             	add    esp,0x8
c00036ef:	5b                   	pop    ebx
c00036f0:	e9 7f fe ff ff       	jmp    c0003574 <load_xdir>
c00036f5:	83 c4 08             	add    esp,0x8
c00036f8:	5b                   	pop    ebx
c00036f9:	c3                   	ret    

c00036fa <dir_read>:
c00036fa:	55                   	push   ebp
c00036fb:	bd 04 00 00 00       	mov    ebp,0x4
c0003700:	57                   	push   edi
c0003701:	56                   	push   esi
c0003702:	be ff ff ff ff       	mov    esi,0xffffffff
c0003707:	53                   	push   ebx
c0003708:	89 c3                	mov    ebx,eax
c000370a:	83 ec 1c             	sub    esp,0x1c
c000370d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003711:	8b 38                	mov    edi,DWORD PTR [eax]
c0003713:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003718:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000371b:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000371e:	89 c8                	mov    eax,ecx
c0003720:	09 d0                	or     eax,edx
c0003722:	0f 84 25 01 00 00    	je     c000384d <dir_read+0x153>
c0003728:	89 f8                	mov    eax,edi
c000372a:	e8 3d ea ff ff       	call   c000216c <move_window>
c000372f:	89 c5                	mov    ebp,eax
c0003731:	85 c0                	test   eax,eax
c0003733:	0f 85 23 01 00 00    	jne    c000385c <dir_read+0x162>
c0003739:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000373c:	8a 0a                	mov    cl,BYTE PTR [edx]
c000373e:	84 c9                	test   cl,cl
c0003740:	0f 84 11 01 00 00    	je     c0003857 <dir_read+0x15d>
c0003746:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003749:	75 48                	jne    c0003793 <dir_read+0x99>
c000374b:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003750:	74 10                	je     c0003762 <dir_read+0x68>
c0003752:	80 f9 83             	cmp    cl,0x83
c0003755:	0f 85 dd 00 00 00    	jne    c0003838 <dir_read+0x13e>
c000375b:	31 ed                	xor    ebp,ebp
c000375d:	e9 08 01 00 00       	jmp    c000386a <dir_read+0x170>
c0003762:	80 f9 85             	cmp    cl,0x85
c0003765:	0f 85 cd 00 00 00    	jne    c0003838 <dir_read+0x13e>
c000376b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000376e:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003771:	89 d8                	mov    eax,ebx
c0003773:	e8 fc fd ff ff       	call   c0003574 <load_xdir>
c0003778:	89 c5                	mov    ebp,eax
c000377a:	85 c0                	test   eax,eax
c000377c:	0f 85 da 00 00 00    	jne    c000385c <dir_read+0x162>
c0003782:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003785:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003788:	83 e0 3f             	and    eax,0x3f
c000378b:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000378e:	e9 d7 00 00 00       	jmp    c000386a <dir_read+0x170>
c0003793:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003796:	83 e0 3f             	and    eax,0x3f
c0003799:	80 f9 2e             	cmp    cl,0x2e
c000379c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00037a0:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00037a3:	0f 84 8a 00 00 00    	je     c0003833 <dir_read+0x139>
c00037a9:	80 f9 e5             	cmp    cl,0xe5
c00037ac:	0f 84 81 00 00 00    	je     c0003833 <dir_read+0x139>
c00037b2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00037b6:	83 e0 1f             	and    eax,0x1f
c00037b9:	83 f8 08             	cmp    eax,0x8
c00037bc:	0f 94 c0             	sete   al
c00037bf:	0f b6 c0             	movzx  eax,al
c00037c2:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00037c6:	75 6b                	jne    c0003833 <dir_read+0x139>
c00037c8:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c00037cd:	75 44                	jne    c0003813 <dir_read+0x119>
c00037cf:	f6 c1 40             	test   cl,0x40
c00037d2:	74 12                	je     c00037e6 <dir_read+0xec>
c00037d4:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00037d7:	83 e1 bf             	and    ecx,0xffffffbf
c00037da:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00037de:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00037e1:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c00037e4:	eb 06                	jmp    c00037ec <dir_read+0xf2>
c00037e6:	89 f0                	mov    eax,esi
c00037e8:	38 c8                	cmp    al,cl
c00037ea:	75 47                	jne    c0003833 <dir_read+0x139>
c00037ec:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00037f0:	be ff ff ff ff       	mov    esi,0xffffffff
c00037f5:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00037f8:	75 3e                	jne    c0003838 <dir_read+0x13e>
c00037fa:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00037fe:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003801:	e8 8a e4 ff ff       	call   c0001c90 <pick_lfn>
c0003806:	85 c0                	test   eax,eax
c0003808:	74 2e                	je     c0003838 <dir_read+0x13e>
c000380a:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000380e:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003811:	eb 25                	jmp    c0003838 <dir_read+0x13e>
c0003813:	89 f0                	mov    eax,esi
c0003815:	84 c0                	test   al,al
c0003817:	75 11                	jne    c000382a <dir_read+0x130>
c0003819:	89 d0                	mov    eax,edx
c000381b:	e8 2a e6 ff ff       	call   c0001e4a <sum_sfn>
c0003820:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003824:	0f 84 31 ff ff ff    	je     c000375b <dir_read+0x61>
c000382a:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003831:	eb 37                	jmp    c000386a <dir_read+0x170>
c0003833:	be ff ff ff ff       	mov    esi,0xffffffff
c0003838:	31 d2                	xor    edx,edx
c000383a:	89 d8                	mov    eax,ebx
c000383c:	e8 01 fc ff ff       	call   c0003442 <dir_next>
c0003841:	89 c5                	mov    ebp,eax
c0003843:	85 c0                	test   eax,eax
c0003845:	0f 84 cd fe ff ff    	je     c0003718 <dir_read+0x1e>
c000384b:	eb 0f                	jmp    c000385c <dir_read+0x162>
c000384d:	85 ed                	test   ebp,ebp
c000384f:	0f 84 06 ff ff ff    	je     c000375b <dir_read+0x61>
c0003855:	eb 05                	jmp    c000385c <dir_read+0x162>
c0003857:	bd 04 00 00 00       	mov    ebp,0x4
c000385c:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003863:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000386a:	83 c4 1c             	add    esp,0x1c
c000386d:	89 e8                	mov    eax,ebp
c000386f:	5b                   	pop    ebx
c0003870:	5e                   	pop    esi
c0003871:	5f                   	pop    edi
c0003872:	5d                   	pop    ebp
c0003873:	c3                   	ret    

c0003874 <dir_alloc>:
c0003874:	55                   	push   ebp
c0003875:	89 d5                	mov    ebp,edx
c0003877:	57                   	push   edi
c0003878:	31 d2                	xor    edx,edx
c000387a:	56                   	push   esi
c000387b:	53                   	push   ebx
c000387c:	89 c3                	mov    ebx,eax
c000387e:	83 ec 0c             	sub    esp,0xc
c0003881:	8b 38                	mov    edi,DWORD PTR [eax]
c0003883:	e8 62 f6 ff ff       	call   c0002eea <dir_sdi>
c0003888:	85 c0                	test   eax,eax
c000388a:	75 4e                	jne    c00038da <dir_alloc+0x66>
c000388c:	31 f6                	xor    esi,esi
c000388e:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003891:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003894:	89 f8                	mov    eax,edi
c0003896:	e8 d1 e8 ff ff       	call   c000216c <move_window>
c000389b:	85 c0                	test   eax,eax
c000389d:	75 3b                	jne    c00038da <dir_alloc+0x66>
c000389f:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00038a2:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00038a5:	8a 12                	mov    dl,BYTE PTR [edx]
c00038a7:	75 07                	jne    c00038b0 <dir_alloc+0x3c>
c00038a9:	f7 d2                	not    edx
c00038ab:	c0 ea 07             	shr    dl,0x7
c00038ae:	eb 0d                	jmp    c00038bd <dir_alloc+0x49>
c00038b0:	84 d2                	test   dl,dl
c00038b2:	0f 94 c1             	sete   cl
c00038b5:	80 fa e5             	cmp    dl,0xe5
c00038b8:	0f 94 c2             	sete   dl
c00038bb:	09 ca                	or     edx,ecx
c00038bd:	84 d2                	test   dl,dl
c00038bf:	74 07                	je     c00038c8 <dir_alloc+0x54>
c00038c1:	46                   	inc    esi
c00038c2:	39 ee                	cmp    esi,ebp
c00038c4:	75 04                	jne    c00038ca <dir_alloc+0x56>
c00038c6:	eb 1c                	jmp    c00038e4 <dir_alloc+0x70>
c00038c8:	31 f6                	xor    esi,esi
c00038ca:	ba 01 00 00 00       	mov    edx,0x1
c00038cf:	89 d8                	mov    eax,ebx
c00038d1:	e8 6c fb ff ff       	call   c0003442 <dir_next>
c00038d6:	85 c0                	test   eax,eax
c00038d8:	74 b4                	je     c000388e <dir_alloc+0x1a>
c00038da:	83 f8 04             	cmp    eax,0x4
c00038dd:	75 05                	jne    c00038e4 <dir_alloc+0x70>
c00038df:	b8 07 00 00 00       	mov    eax,0x7
c00038e4:	83 c4 0c             	add    esp,0xc
c00038e7:	5b                   	pop    ebx
c00038e8:	5e                   	pop    esi
c00038e9:	5f                   	pop    edi
c00038ea:	5d                   	pop    ebp
c00038eb:	c3                   	ret    

c00038ec <store_xdir>:
c00038ec:	55                   	push   ebp
c00038ed:	57                   	push   edi
c00038ee:	89 c7                	mov    edi,eax
c00038f0:	56                   	push   esi
c00038f1:	53                   	push   ebx
c00038f2:	83 ec 0c             	sub    esp,0xc
c00038f5:	8b 00                	mov    eax,DWORD PTR [eax]
c00038f7:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c00038fa:	89 e8                	mov    eax,ebp
c00038fc:	e8 5b e5 ff ff       	call   c0001e5c <xdir_sum>
c0003901:	0f b7 d0             	movzx  edx,ax
c0003904:	8d 45 02             	lea    eax,[ebp+0x2]
c0003907:	e8 f4 e0 ff ff       	call   c0001a00 <st_word>
c000390c:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003910:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003913:	89 f8                	mov    eax,edi
c0003915:	e8 d0 f5 ff ff       	call   c0002eea <dir_sdi>
c000391a:	89 c6                	mov    esi,eax
c000391c:	85 f6                	test   esi,esi
c000391e:	75 3d                	jne    c000395d <store_xdir+0x71>
c0003920:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003923:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003926:	8b 07                	mov    eax,DWORD PTR [edi]
c0003928:	e8 3f e8 ff ff       	call   c000216c <move_window>
c000392d:	89 c6                	mov    esi,eax
c000392f:	85 c0                	test   eax,eax
c0003931:	75 2a                	jne    c000395d <store_xdir+0x71>
c0003933:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003936:	b9 20 00 00 00       	mov    ecx,0x20
c000393b:	89 ea                	mov    edx,ebp
c000393d:	e8 cb e0 ff ff       	call   c0001a0d <mem_cpy>
c0003942:	8b 07                	mov    eax,DWORD PTR [edi]
c0003944:	85 db                	test   ebx,ebx
c0003946:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000394a:	74 11                	je     c000395d <store_xdir+0x71>
c000394c:	31 d2                	xor    edx,edx
c000394e:	89 f8                	mov    eax,edi
c0003950:	83 c5 20             	add    ebp,0x20
c0003953:	e8 ea fa ff ff       	call   c0003442 <dir_next>
c0003958:	4b                   	dec    ebx
c0003959:	89 c6                	mov    esi,eax
c000395b:	eb bf                	jmp    c000391c <store_xdir+0x30>
c000395d:	89 f0                	mov    eax,esi
c000395f:	83 fe 02             	cmp    esi,0x2
c0003962:	76 05                	jbe    c0003969 <store_xdir+0x7d>
c0003964:	b8 02 00 00 00       	mov    eax,0x2
c0003969:	83 c4 0c             	add    esp,0xc
c000396c:	5b                   	pop    ebx
c000396d:	5e                   	pop    esi
c000396e:	5f                   	pop    edi
c000396f:	5d                   	pop    ebp
c0003970:	c3                   	ret    

c0003971 <dir_remove>:
c0003971:	57                   	push   edi
c0003972:	56                   	push   esi
c0003973:	53                   	push   ebx
c0003974:	89 c3                	mov    ebx,eax
c0003976:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003979:	8b 30                	mov    esi,DWORD PTR [eax]
c000397b:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c000397e:	83 fa ff             	cmp    edx,0xffffffff
c0003981:	74 09                	je     c000398c <dir_remove+0x1b>
c0003983:	e8 62 f5 ff ff       	call   c0002eea <dir_sdi>
c0003988:	85 c0                	test   eax,eax
c000398a:	75 41                	jne    c00039cd <dir_remove+0x5c>
c000398c:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000398f:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003992:	89 f0                	mov    eax,esi
c0003994:	e8 d3 e7 ff ff       	call   c000216c <move_window>
c0003999:	85 c0                	test   eax,eax
c000399b:	75 26                	jne    c00039c3 <dir_remove+0x52>
c000399d:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00039a0:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00039a3:	75 05                	jne    c00039aa <dir_remove+0x39>
c00039a5:	80 22 7f             	and    BYTE PTR [edx],0x7f
c00039a8:	eb 03                	jmp    c00039ad <dir_remove+0x3c>
c00039aa:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c00039ad:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00039b1:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c00039b4:	73 17                	jae    c00039cd <dir_remove+0x5c>
c00039b6:	31 d2                	xor    edx,edx
c00039b8:	89 d8                	mov    eax,ebx
c00039ba:	e8 83 fa ff ff       	call   c0003442 <dir_next>
c00039bf:	85 c0                	test   eax,eax
c00039c1:	74 c9                	je     c000398c <dir_remove+0x1b>
c00039c3:	83 f8 04             	cmp    eax,0x4
c00039c6:	75 05                	jne    c00039cd <dir_remove+0x5c>
c00039c8:	b8 02 00 00 00       	mov    eax,0x2
c00039cd:	5b                   	pop    ebx
c00039ce:	5e                   	pop    esi
c00039cf:	5f                   	pop    edi
c00039d0:	c3                   	ret    

c00039d1 <create_name>:
c00039d1:	55                   	push   ebp
c00039d2:	89 d5                	mov    ebp,edx
c00039d4:	57                   	push   edi
c00039d5:	89 c7                	mov    edi,eax
c00039d7:	56                   	push   esi
c00039d8:	31 f6                	xor    esi,esi
c00039da:	53                   	push   ebx
c00039db:	83 ec 3c             	sub    esp,0x3c
c00039de:	8b 02                	mov    eax,DWORD PTR [edx]
c00039e0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00039e4:	8b 07                	mov    eax,DWORD PTR [edi]
c00039e6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00039e9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00039ed:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00039f1:	e8 72 e0 ff ff       	call   c0001a68 <tchar2uni>
c00039f6:	89 c3                	mov    ebx,eax
c00039f8:	83 f8 ff             	cmp    eax,0xffffffff
c00039fb:	75 0a                	jne    c0003a07 <create_name+0x36>
c00039fd:	b8 06 00 00 00       	mov    eax,0x6
c0003a02:	e9 9e 02 00 00       	jmp    c0003ca5 <create_name+0x2d4>
c0003a07:	3d ff ff 00 00       	cmp    eax,0xffff
c0003a0c:	76 0c                	jbe    c0003a1a <create_name+0x49>
c0003a0e:	c1 e8 10             	shr    eax,0x10
c0003a11:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003a15:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003a19:	46                   	inc    esi
c0003a1a:	66 83 fb 1f          	cmp    bx,0x1f
c0003a1e:	76 4f                	jbe    c0003a6f <create_name+0x9e>
c0003a20:	66 83 fb 5c          	cmp    bx,0x5c
c0003a24:	74 35                	je     c0003a5b <create_name+0x8a>
c0003a26:	66 83 fb 2f          	cmp    bx,0x2f
c0003a2a:	74 2f                	je     c0003a5b <create_name+0x8a>
c0003a2c:	66 83 fb 7f          	cmp    bx,0x7f
c0003a30:	77 11                	ja     c0003a43 <create_name+0x72>
c0003a32:	0f b7 d3             	movzx  edx,bx
c0003a35:	b8 12 f4 01 c0       	mov    eax,0xc001f412
c0003a3a:	e8 11 e0 ff ff       	call   c0001a50 <chk_chr>
c0003a3f:	85 c0                	test   eax,eax
c0003a41:	75 ba                	jne    c00039fd <create_name+0x2c>
c0003a43:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003a49:	77 b2                	ja     c00039fd <create_name+0x2c>
c0003a4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003a4f:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003a53:	46                   	inc    esi
c0003a54:	eb 97                	jmp    c00039ed <create_name+0x1c>
c0003a56:	40                   	inc    eax
c0003a57:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003a5b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003a5f:	8a 10                	mov    dl,BYTE PTR [eax]
c0003a61:	80 fa 2f             	cmp    dl,0x2f
c0003a64:	74 f0                	je     c0003a56 <create_name+0x85>
c0003a66:	80 fa 5c             	cmp    dl,0x5c
c0003a69:	74 eb                	je     c0003a56 <create_name+0x85>
c0003a6b:	31 db                	xor    ebx,ebx
c0003a6d:	eb 02                	jmp    c0003a71 <create_name+0xa0>
c0003a6f:	b3 04                	mov    bl,0x4
c0003a71:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003a75:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003a78:	85 f6                	test   esi,esi
c0003a7a:	74 18                	je     c0003a94 <create_name+0xc3>
c0003a7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003a80:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003a85:	66 83 f8 20          	cmp    ax,0x20
c0003a89:	74 06                	je     c0003a91 <create_name+0xc0>
c0003a8b:	66 83 f8 2e          	cmp    ax,0x2e
c0003a8f:	75 03                	jne    c0003a94 <create_name+0xc3>
c0003a91:	4e                   	dec    esi
c0003a92:	eb e4                	jmp    c0003a78 <create_name+0xa7>
c0003a94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003a98:	31 ed                	xor    ebp,ebp
c0003a9a:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003aa0:	85 f6                	test   esi,esi
c0003aa2:	0f 84 55 ff ff ff    	je     c00039fd <create_name+0x2c>
c0003aa8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003aac:	8d 55 01             	lea    edx,[ebp+0x1]
c0003aaf:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003ab3:	66 83 f8 20          	cmp    ax,0x20
c0003ab7:	75 04                	jne    c0003abd <create_name+0xec>
c0003ab9:	89 d5                	mov    ebp,edx
c0003abb:	eb eb                	jmp    c0003aa8 <create_name+0xd7>
c0003abd:	85 ed                	test   ebp,ebp
c0003abf:	75 06                	jne    c0003ac7 <create_name+0xf6>
c0003ac1:	66 83 f8 2e          	cmp    ax,0x2e
c0003ac5:	75 08                	jne    c0003acf <create_name+0xfe>
c0003ac7:	83 cb 03             	or     ebx,0x3
c0003aca:	eb 03                	jmp    c0003acf <create_name+0xfe>
c0003acc:	4e                   	dec    esi
c0003acd:	74 0c                	je     c0003adb <create_name+0x10a>
c0003acf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003ad3:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003ad9:	75 f1                	jne    c0003acc <create_name+0xfb>
c0003adb:	b9 0b 00 00 00       	mov    ecx,0xb
c0003ae0:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003ae3:	ba 20 00 00 00       	mov    edx,0x20
c0003ae8:	e8 35 df ff ff       	call   c0001a22 <mem_set>
c0003aed:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003af5:	31 c9                	xor    ecx,ecx
c0003af7:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003afc:	8d 45 01             	lea    eax,[ebp+0x1]
c0003aff:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003b03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b07:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003b0b:	66 85 ed             	test   bp,bp
c0003b0e:	0f 84 30 01 00 00    	je     c0003c44 <create_name+0x273>
c0003b14:	66 83 fd 20          	cmp    bp,0x20
c0003b18:	74 10                	je     c0003b2a <create_name+0x159>
c0003b1a:	66 83 fd 2e          	cmp    bp,0x2e
c0003b1e:	75 13                	jne    c0003b33 <create_name+0x162>
c0003b20:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003b24:	0f 84 6b 01 00 00    	je     c0003c95 <create_name+0x2c4>
c0003b2a:	83 cb 03             	or     ebx,0x3
c0003b2d:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003b31:	eb c9                	jmp    c0003afc <create_name+0x12b>
c0003b33:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003b37:	73 0b                	jae    c0003b44 <create_name+0x173>
c0003b39:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003b3d:	75 47                	jne    c0003b86 <create_name+0x1b5>
c0003b3f:	e9 51 01 00 00       	jmp    c0003c95 <create_name+0x2c4>
c0003b44:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003b49:	75 10                	jne    c0003b5b <create_name+0x18a>
c0003b4b:	83 cb 03             	or     ebx,0x3
c0003b4e:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003b56:	e9 e9 00 00 00       	jmp    c0003c44 <create_name+0x273>
c0003b5b:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003b5f:	74 0d                	je     c0003b6e <create_name+0x19d>
c0003b61:	83 cb 03             	or     ebx,0x3
c0003b64:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003b68:	0f 87 d6 00 00 00    	ja     c0003c44 <create_name+0x273>
c0003b6e:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003b73:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003b77:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003b7f:	b9 08 00 00 00       	mov    ecx,0x8
c0003b84:	eb a7                	jmp    c0003b2d <create_name+0x15c>
c0003b86:	66 83 fd 7f          	cmp    bp,0x7f
c0003b8a:	76 68                	jbe    c0003bf4 <create_name+0x223>
c0003b8c:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003b90:	88 da                	mov    dl,bl
c0003b92:	83 ca 02             	or     edx,0x2
c0003b95:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003b99:	50                   	push   eax
c0003b9a:	50                   	push   eax
c0003b9b:	68 b5 01 00 00       	push   0x1b5
c0003ba0:	55                   	push   ebp
c0003ba1:	e8 48 46 00 00       	call   c00081ee <ff_uni2oem>
c0003ba6:	83 c4 10             	add    esp,0x10
c0003ba9:	89 c5                	mov    ebp,eax
c0003bab:	a8 80                	test   al,0x80
c0003bad:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003bb1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003bb5:	74 0c                	je     c0003bc3 <create_name+0x1f2>
c0003bb7:	83 e5 7f             	and    ebp,0x7f
c0003bba:	0f b6 ad 60 f3 01 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffe0ca0]
c0003bc1:	eb 2a                	jmp    c0003bed <create_name+0x21c>
c0003bc3:	66 3d ff 00          	cmp    ax,0xff
c0003bc7:	76 24                	jbe    c0003bed <create_name+0x21c>
c0003bc9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003bcd:	48                   	dec    eax
c0003bce:	39 c8                	cmp    eax,ecx
c0003bd0:	77 0c                	ja     c0003bde <create_name+0x20d>
c0003bd2:	83 cb 03             	or     ebx,0x3
c0003bd5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003bd9:	e9 4f ff ff ff       	jmp    c0003b2d <create_name+0x15c>
c0003bde:	89 e8                	mov    eax,ebp
c0003be0:	88 d3                	mov    bl,dl
c0003be2:	66 c1 e8 08          	shr    ax,0x8
c0003be6:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003bea:	41                   	inc    ecx
c0003beb:	eb 4b                	jmp    c0003c38 <create_name+0x267>
c0003bed:	88 d3                	mov    bl,dl
c0003bef:	66 85 ed             	test   bp,bp
c0003bf2:	74 19                	je     c0003c0d <create_name+0x23c>
c0003bf4:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003bf8:	0f b7 d5             	movzx  edx,bp
c0003bfb:	b8 1b f4 01 c0       	mov    eax,0xc001f41b
c0003c00:	e8 4b de ff ff       	call   c0001a50 <chk_chr>
c0003c05:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003c09:	85 c0                	test   eax,eax
c0003c0b:	74 0a                	je     c0003c17 <create_name+0x246>
c0003c0d:	83 cb 03             	or     ebx,0x3
c0003c10:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003c15:	eb 21                	jmp    c0003c38 <create_name+0x267>
c0003c17:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003c1a:	66 83 f8 19          	cmp    ax,0x19
c0003c1e:	77 07                	ja     c0003c27 <create_name+0x256>
c0003c20:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003c25:	eb 11                	jmp    c0003c38 <create_name+0x267>
c0003c27:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003c2a:	66 83 f8 19          	cmp    ax,0x19
c0003c2e:	77 08                	ja     c0003c38 <create_name+0x267>
c0003c30:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003c35:	83 ed 20             	sub    ebp,0x20
c0003c38:	89 e8                	mov    eax,ebp
c0003c3a:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003c3e:	41                   	inc    ecx
c0003c3f:	e9 e9 fe ff ff       	jmp    c0003b2d <create_name+0x15c>
c0003c44:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003c48:	75 04                	jne    c0003c4e <create_name+0x27d>
c0003c4a:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003c4e:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003c53:	75 05                	jne    c0003c5a <create_name+0x289>
c0003c55:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003c5a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003c5e:	83 e0 0c             	and    eax,0xc
c0003c61:	3c 0c                	cmp    al,0xc
c0003c63:	74 0b                	je     c0003c70 <create_name+0x29f>
c0003c65:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003c69:	83 e0 03             	and    eax,0x3
c0003c6c:	3c 03                	cmp    al,0x3
c0003c6e:	75 05                	jne    c0003c75 <create_name+0x2a4>
c0003c70:	83 cb 02             	or     ebx,0x2
c0003c73:	eb 19                	jmp    c0003c8e <create_name+0x2bd>
c0003c75:	f6 c3 02             	test   bl,0x2
c0003c78:	75 14                	jne    c0003c8e <create_name+0x2bd>
c0003c7a:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003c7f:	74 03                	je     c0003c84 <create_name+0x2b3>
c0003c81:	83 cb 10             	or     ebx,0x10
c0003c84:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003c89:	74 03                	je     c0003c8e <create_name+0x2bd>
c0003c8b:	83 cb 08             	or     ebx,0x8
c0003c8e:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003c91:	31 c0                	xor    eax,eax
c0003c93:	eb 10                	jmp    c0003ca5 <create_name+0x2d4>
c0003c95:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003c9a:	0f 85 ce fe ff ff    	jne    c0003b6e <create_name+0x19d>
c0003ca0:	e9 a6 fe ff ff       	jmp    c0003b4b <create_name+0x17a>
c0003ca5:	83 c4 3c             	add    esp,0x3c
c0003ca8:	5b                   	pop    ebx
c0003ca9:	5e                   	pop    esi
c0003caa:	5f                   	pop    edi
c0003cab:	5d                   	pop    ebp
c0003cac:	c3                   	ret    

c0003cad <xname_sum>:
c0003cad:	56                   	push   esi
c0003cae:	53                   	push   ebx
c0003caf:	89 c6                	mov    esi,eax
c0003cb1:	51                   	push   ecx
c0003cb2:	31 db                	xor    ebx,ebx
c0003cb4:	83 c6 02             	add    esi,0x2
c0003cb7:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003cbb:	66 85 c0             	test   ax,ax
c0003cbe:	74 1f                	je     c0003cdf <xname_sum+0x32>
c0003cc0:	83 ec 0c             	sub    esp,0xc
c0003cc3:	66 d1 cb             	ror    bx,1
c0003cc6:	50                   	push   eax
c0003cc7:	e8 1e 46 00 00       	call   c00082ea <ff_wtoupper>
c0003ccc:	83 c4 10             	add    esp,0x10
c0003ccf:	0f b6 d0             	movzx  edx,al
c0003cd2:	66 c1 e8 08          	shr    ax,0x8
c0003cd6:	01 d3                	add    ebx,edx
c0003cd8:	66 d1 cb             	ror    bx,1
c0003cdb:	01 c3                	add    ebx,eax
c0003cdd:	eb d5                	jmp    c0003cb4 <xname_sum+0x7>
c0003cdf:	89 d8                	mov    eax,ebx
c0003ce1:	5a                   	pop    edx
c0003ce2:	5b                   	pop    ebx
c0003ce3:	5e                   	pop    esi
c0003ce4:	c3                   	ret    

c0003ce5 <create_xdir>:
c0003ce5:	55                   	push   ebp
c0003ce6:	b9 40 00 00 00       	mov    ecx,0x40
c0003ceb:	57                   	push   edi
c0003cec:	bd 01 00 00 00       	mov    ebp,0x1
c0003cf1:	56                   	push   esi
c0003cf2:	31 ff                	xor    edi,edi
c0003cf4:	53                   	push   ebx
c0003cf5:	be 40 00 00 00       	mov    esi,0x40
c0003cfa:	89 c3                	mov    ebx,eax
c0003cfc:	83 ec 1c             	sub    esp,0x1c
c0003cff:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003d03:	31 d2                	xor    edx,edx
c0003d05:	e8 18 dd ff ff       	call   c0001a22 <mem_set>
c0003d0a:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003d0d:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003d11:	31 c9                	xor    ecx,ecx
c0003d13:	8d 46 01             	lea    eax,[esi+0x1]
c0003d16:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003d1a:	83 c6 02             	add    esi,0x2
c0003d1d:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003d21:	66 85 ed             	test   bp,bp
c0003d24:	74 12                	je     c0003d38 <create_xdir+0x53>
c0003d26:	0f b6 c1             	movzx  eax,cl
c0003d29:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003d2d:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003d31:	66 83 fd 01          	cmp    bp,0x1
c0003d35:	80 d9 ff             	sbb    cl,0xff
c0003d38:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003d3b:	0f b7 d5             	movzx  edx,bp
c0003d3e:	83 c6 02             	add    esi,0x2
c0003d41:	e8 ba dc ff ff       	call   c0001a00 <st_word>
c0003d46:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003d4c:	75 d3                	jne    c0003d21 <create_xdir+0x3c>
c0003d4e:	8d 47 01             	lea    eax,[edi+0x1]
c0003d51:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003d55:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003d59:	0f b6 c1             	movzx  eax,cl
c0003d5c:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003d61:	74 07                	je     c0003d6a <create_xdir+0x85>
c0003d63:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0003d68:	eb a9                	jmp    c0003d13 <create_xdir+0x2e>
c0003d6a:	8d 47 02             	lea    eax,[edi+0x2]
c0003d6d:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0003d70:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0003d73:	89 d0                	mov    eax,edx
c0003d75:	e8 33 ff ff ff       	call   c0003cad <xname_sum>
c0003d7a:	83 c4 1c             	add    esp,0x1c
c0003d7d:	0f b7 d0             	movzx  edx,ax
c0003d80:	8d 43 24             	lea    eax,[ebx+0x24]
c0003d83:	5b                   	pop    ebx
c0003d84:	5e                   	pop    esi
c0003d85:	5f                   	pop    edi
c0003d86:	5d                   	pop    ebp
c0003d87:	e9 74 dc ff ff       	jmp    c0001a00 <st_word>

c0003d8c <cmp_lfn>:
c0003d8c:	55                   	push   ebp
c0003d8d:	57                   	push   edi
c0003d8e:	89 d7                	mov    edi,edx
c0003d90:	56                   	push   esi
c0003d91:	53                   	push   ebx
c0003d92:	83 ec 1c             	sub    esp,0x1c
c0003d95:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003d99:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003d9c:	e8 ed db ff ff       	call   c000198e <ld_word>
c0003da1:	66 85 c0             	test   ax,ax
c0003da4:	74 07                	je     c0003dad <cmp_lfn+0x21>
c0003da6:	31 c0                	xor    eax,eax
c0003da8:	e9 9a 00 00 00       	jmp    c0003e47 <cmp_lfn+0xbb>
c0003dad:	8a 1f                	mov    bl,BYTE PTR [edi]
c0003daf:	bd 01 00 00 00       	mov    ebp,0x1
c0003db4:	83 e3 3f             	and    ebx,0x3f
c0003db7:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0003dbf:	4b                   	dec    ebx
c0003dc0:	6b db 0d             	imul   ebx,ebx,0xd
c0003dc3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003dc7:	0f b6 80 e0 f3 01 c0 	movzx  eax,BYTE PTR [eax-0x3ffe0c20]
c0003dce:	01 f8                	add    eax,edi
c0003dd0:	e8 b9 db ff ff       	call   c000198e <ld_word>
c0003dd5:	66 85 ed             	test   bp,bp
c0003dd8:	89 c6                	mov    esi,eax
c0003dda:	74 3c                	je     c0003e18 <cmp_lfn+0x8c>
c0003ddc:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0003de2:	77 c2                	ja     c0003da6 <cmp_lfn+0x1a>
c0003de4:	83 ec 0c             	sub    esp,0xc
c0003de7:	0f b7 c0             	movzx  eax,ax
c0003dea:	50                   	push   eax
c0003deb:	e8 fa 44 00 00       	call   c00082ea <ff_wtoupper>
c0003df0:	89 c5                	mov    ebp,eax
c0003df2:	8d 43 01             	lea    eax,[ebx+0x1]
c0003df5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0003df9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0003dfd:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0003e01:	89 04 24             	mov    DWORD PTR [esp],eax
c0003e04:	e8 e1 44 00 00       	call   c00082ea <ff_wtoupper>
c0003e09:	83 c4 10             	add    esp,0x10
c0003e0c:	39 c5                	cmp    ebp,eax
c0003e0e:	75 96                	jne    c0003da6 <cmp_lfn+0x1a>
c0003e10:	89 f5                	mov    ebp,esi
c0003e12:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0003e16:	eb 04                	jmp    c0003e1c <cmp_lfn+0x90>
c0003e18:	66 46                	inc    si
c0003e1a:	75 8a                	jne    c0003da6 <cmp_lfn+0x1a>
c0003e1c:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0003e20:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0003e25:	75 9c                	jne    c0003dc3 <cmp_lfn+0x37>
c0003e27:	f6 07 40             	test   BYTE PTR [edi],0x40
c0003e2a:	74 16                	je     c0003e42 <cmp_lfn+0xb6>
c0003e2c:	66 85 ed             	test   bp,bp
c0003e2f:	74 11                	je     c0003e42 <cmp_lfn+0xb6>
c0003e31:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003e35:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0003e3a:	0f 94 c0             	sete   al
c0003e3d:	0f b6 c0             	movzx  eax,al
c0003e40:	eb 05                	jmp    c0003e47 <cmp_lfn+0xbb>
c0003e42:	b8 01 00 00 00       	mov    eax,0x1
c0003e47:	83 c4 1c             	add    esp,0x1c
c0003e4a:	5b                   	pop    ebx
c0003e4b:	5e                   	pop    esi
c0003e4c:	5f                   	pop    edi
c0003e4d:	5d                   	pop    ebp
c0003e4e:	c3                   	ret    

c0003e4f <dir_find>:
c0003e4f:	55                   	push   ebp
c0003e50:	31 d2                	xor    edx,edx
c0003e52:	57                   	push   edi
c0003e53:	56                   	push   esi
c0003e54:	53                   	push   ebx
c0003e55:	89 c3                	mov    ebx,eax
c0003e57:	83 ec 1c             	sub    esp,0x1c
c0003e5a:	8b 30                	mov    esi,DWORD PTR [eax]
c0003e5c:	e8 89 f0 ff ff       	call   c0002eea <dir_sdi>
c0003e61:	89 04 24             	mov    DWORD PTR [esp],eax
c0003e64:	85 c0                	test   eax,eax
c0003e66:	0f 85 9e 01 00 00    	jne    c000400a <dir_find+0x1bb>
c0003e6c:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003e6f:	0f 85 8d 00 00 00    	jne    c0003f02 <dir_find+0xb3>
c0003e75:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003e78:	e8 30 fe ff ff       	call   c0003cad <xname_sum>
c0003e7d:	89 c7                	mov    edi,eax
c0003e7f:	31 d2                	xor    edx,edx
c0003e81:	89 d8                	mov    eax,ebx
c0003e83:	e8 72 f8 ff ff       	call   c00036fa <dir_read>
c0003e88:	85 c0                	test   eax,eax
c0003e8a:	0f 85 5e 01 00 00    	jne    c0003fee <dir_find+0x19f>
c0003e90:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0003e93:	8d 41 24             	lea    eax,[ecx+0x24]
c0003e96:	e8 f3 da ff ff       	call   c000198e <ld_word>
c0003e9b:	66 39 f8             	cmp    ax,di
c0003e9e:	75 df                	jne    c0003e7f <dir_find+0x30>
c0003ea0:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0003ea3:	31 ed                	xor    ebp,ebp
c0003ea5:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0003ea9:	ba 40 00 00 00       	mov    edx,0x40
c0003eae:	89 e9                	mov    ecx,ebp
c0003eb0:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0003eb4:	0f 84 42 01 00 00    	je     c0003ffc <dir_find+0x1ad>
c0003eba:	f6 c2 1f             	test   dl,0x1f
c0003ebd:	75 03                	jne    c0003ec2 <dir_find+0x73>
c0003ebf:	83 c2 02             	add    edx,0x2
c0003ec2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003ec6:	89 d0                	mov    eax,edx
c0003ec8:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0003ecb:	e8 be da ff ff       	call   c000198e <ld_word>
c0003ed0:	83 ec 0c             	sub    esp,0xc
c0003ed3:	0f b7 c0             	movzx  eax,ax
c0003ed6:	50                   	push   eax
c0003ed7:	e8 0e 44 00 00       	call   c00082ea <ff_wtoupper>
c0003edc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003ee0:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003ee3:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c0003ee7:	89 04 24             	mov    DWORD PTR [esp],eax
c0003eea:	e8 fb 43 00 00       	call   c00082ea <ff_wtoupper>
c0003eef:	83 c4 10             	add    esp,0x10
c0003ef2:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0003ef6:	75 87                	jne    c0003e7f <dir_find+0x30>
c0003ef8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003efc:	45                   	inc    ebp
c0003efd:	83 c2 02             	add    edx,0x2
c0003f00:	eb ac                	jmp    c0003eae <dir_find+0x5f>
c0003f02:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003f09:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c0003f0e:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003f13:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003f16:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003f19:	89 f0                	mov    eax,esi
c0003f1b:	e8 4c e2 ff ff       	call   c000216c <move_window>
c0003f20:	85 c0                	test   eax,eax
c0003f22:	0f 85 c6 00 00 00    	jne    c0003fee <dir_find+0x19f>
c0003f28:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0003f2b:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c0003f2e:	84 c9                	test   cl,cl
c0003f30:	0f 84 bd 00 00 00    	je     c0003ff3 <dir_find+0x1a4>
c0003f36:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0003f39:	88 d0                	mov    al,dl
c0003f3b:	83 e0 3f             	and    eax,0x3f
c0003f3e:	80 f9 e5             	cmp    cl,0xe5
c0003f41:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003f44:	0f 84 87 00 00 00    	je     c0003fd1 <dir_find+0x182>
c0003f4a:	80 e2 08             	and    dl,0x8
c0003f4d:	74 06                	je     c0003f55 <dir_find+0x106>
c0003f4f:	3c 0f                	cmp    al,0xf
c0003f51:	75 7e                	jne    c0003fd1 <dir_find+0x182>
c0003f53:	eb 04                	jmp    c0003f59 <dir_find+0x10a>
c0003f55:	3c 0f                	cmp    al,0xf
c0003f57:	75 4c                	jne    c0003fa5 <dir_find+0x156>
c0003f59:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0003f5d:	75 7e                	jne    c0003fdd <dir_find+0x18e>
c0003f5f:	f6 c1 40             	test   cl,0x40
c0003f62:	74 12                	je     c0003f76 <dir_find+0x127>
c0003f64:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003f67:	83 e1 bf             	and    ecx,0xffffffbf
c0003f6a:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0003f6e:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003f71:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003f74:	eb 06                	jmp    c0003f7c <dir_find+0x12d>
c0003f76:	89 f8                	mov    eax,edi
c0003f78:	38 c8                	cmp    al,cl
c0003f7a:	75 5c                	jne    c0003fd8 <dir_find+0x189>
c0003f7c:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0003f80:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003f85:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0003f88:	75 53                	jne    c0003fdd <dir_find+0x18e>
c0003f8a:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0003f8e:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003f91:	89 ea                	mov    edx,ebp
c0003f93:	e8 f4 fd ff ff       	call   c0003d8c <cmp_lfn>
c0003f98:	85 c0                	test   eax,eax
c0003f9a:	74 41                	je     c0003fdd <dir_find+0x18e>
c0003f9c:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0003fa0:	8d 79 ff             	lea    edi,[ecx-0x1]
c0003fa3:	eb 38                	jmp    c0003fdd <dir_find+0x18e>
c0003fa5:	89 f8                	mov    eax,edi
c0003fa7:	84 c0                	test   al,al
c0003fa9:	75 0d                	jne    c0003fb8 <dir_find+0x169>
c0003fab:	89 e8                	mov    eax,ebp
c0003fad:	e8 98 de ff ff       	call   c0001e4a <sum_sfn>
c0003fb2:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0003fb6:	74 52                	je     c000400a <dir_find+0x1bb>
c0003fb8:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0003fbc:	75 13                	jne    c0003fd1 <dir_find+0x182>
c0003fbe:	8d 53 3c             	lea    edx,[ebx+0x3c]
c0003fc1:	b9 0b 00 00 00       	mov    ecx,0xb
c0003fc6:	89 e8                	mov    eax,ebp
c0003fc8:	e8 60 da ff ff       	call   c0001a2d <mem_cmp>
c0003fcd:	85 c0                	test   eax,eax
c0003fcf:	74 39                	je     c000400a <dir_find+0x1bb>
c0003fd1:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003fd8:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003fdd:	31 d2                	xor    edx,edx
c0003fdf:	89 d8                	mov    eax,ebx
c0003fe1:	e8 5c f4 ff ff       	call   c0003442 <dir_next>
c0003fe6:	85 c0                	test   eax,eax
c0003fe8:	0f 84 25 ff ff ff    	je     c0003f13 <dir_find+0xc4>
c0003fee:	89 04 24             	mov    DWORD PTR [esp],eax
c0003ff1:	eb 17                	jmp    c000400a <dir_find+0x1bb>
c0003ff3:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0003ffa:	eb 0e                	jmp    c000400a <dir_find+0x1bb>
c0003ffc:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003fff:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c0004004:	0f 85 75 fe ff ff    	jne    c0003e7f <dir_find+0x30>
c000400a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000400d:	83 c4 1c             	add    esp,0x1c
c0004010:	5b                   	pop    ebx
c0004011:	5e                   	pop    esi
c0004012:	5f                   	pop    edi
c0004013:	5d                   	pop    ebp
c0004014:	c3                   	ret    

c0004015 <dir_register>:
c0004015:	55                   	push   ebp
c0004016:	57                   	push   edi
c0004017:	56                   	push   esi
c0004018:	be 06 00 00 00       	mov    esi,0x6
c000401d:	53                   	push   ebx
c000401e:	83 ec 6c             	sub    esp,0x6c
c0004021:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c0004025:	0f 85 62 02 00 00    	jne    c000428d <dir_register+0x278>
c000402b:	8b 28                	mov    ebp,DWORD PTR [eax]
c000402d:	31 ff                	xor    edi,edi
c000402f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0004032:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c0004037:	74 03                	je     c000403c <dir_register+0x27>
c0004039:	47                   	inc    edi
c000403a:	eb f6                	jmp    c0004032 <dir_register+0x1d>
c000403c:	89 c3                	mov    ebx,eax
c000403e:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0004042:	0f 85 e1 00 00 00    	jne    c0004129 <dir_register+0x114>
c0004048:	83 c7 0e             	add    edi,0xe
c000404b:	b9 0f 00 00 00       	mov    ecx,0xf
c0004050:	89 f8                	mov    eax,edi
c0004052:	31 d2                	xor    edx,edx
c0004054:	f7 f1                	div    ecx
c0004056:	8d 50 02             	lea    edx,[eax+0x2]
c0004059:	89 c7                	mov    edi,eax
c000405b:	89 d8                	mov    eax,ebx
c000405d:	e8 12 f8 ff ff       	call   c0003874 <dir_alloc>
c0004062:	89 c6                	mov    esi,eax
c0004064:	85 c0                	test   eax,eax
c0004066:	0f 85 21 02 00 00    	jne    c000428d <dir_register+0x278>
c000406c:	81 c7 01 00 00 08    	add    edi,0x8000001
c0004072:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004075:	c1 e7 05             	shl    edi,0x5
c0004078:	29 f8                	sub    eax,edi
c000407a:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000407d:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004080:	a8 04                	test   al,0x4
c0004082:	0f 84 91 00 00 00    	je     c0004119 <dir_register+0x104>
c0004088:	83 e0 fb             	and    eax,0xfffffffb
c000408b:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000408e:	89 d8                	mov    eax,ebx
c0004090:	e8 25 ec ff ff       	call   c0002cba <fill_first_frag>
c0004095:	85 c0                	test   eax,eax
c0004097:	0f 85 ee 01 00 00    	jne    c000428b <dir_register+0x276>
c000409d:	83 c9 ff             	or     ecx,0xffffffff
c00040a0:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00040a3:	89 d8                	mov    eax,ebx
c00040a5:	e8 db eb ff ff       	call   c0002c85 <fill_last_frag>
c00040aa:	85 c0                	test   eax,eax
c00040ac:	0f 85 d9 01 00 00    	jne    c000428b <dir_register+0x276>
c00040b2:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00040b6:	74 61                	je     c0004119 <dir_register+0x104>
c00040b8:	89 da                	mov    edx,ebx
c00040ba:	8d 44 24 14          	lea    eax,[esp+0x14]
c00040be:	e8 ea f5 ff ff       	call   c00036ad <load_obj_xdir>
c00040c3:	85 c0                	test   eax,eax
c00040c5:	0f 85 c0 01 00 00    	jne    c000428b <dir_register+0x276>
c00040cb:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c00040cf:	31 c9                	xor    ecx,ecx
c00040d1:	c1 e2 09             	shl    edx,0x9
c00040d4:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c00040d7:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c00040da:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00040dd:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00040e0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00040e3:	83 c0 38             	add    eax,0x38
c00040e6:	e8 1c d9 ff ff       	call   c0001a07 <st_qword>
c00040eb:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00040ee:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00040f1:	83 c0 28             	add    eax,0x28
c00040f4:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00040f7:	e8 0b d9 ff ff       	call   c0001a07 <st_qword>
c00040fc:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00040ff:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0004102:	83 c8 01             	or     eax,0x1
c0004105:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c0004108:	8d 44 24 14          	lea    eax,[esp+0x14]
c000410c:	e8 db f7 ff ff       	call   c00038ec <store_xdir>
c0004111:	85 c0                	test   eax,eax
c0004113:	0f 85 72 01 00 00    	jne    c000428b <dir_register+0x276>
c0004119:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000411c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000411f:	e8 c1 fb ff ff       	call   c0003ce5 <create_xdir>
c0004124:	e9 64 01 00 00       	jmp    c000428d <dir_register+0x278>
c0004129:	8d 40 3c             	lea    eax,[eax+0x3c]
c000412c:	b9 0c 00 00 00       	mov    ecx,0xc
c0004131:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004135:	89 c2                	mov    edx,eax
c0004137:	8d 44 24 14          	lea    eax,[esp+0x14]
c000413b:	e8 cd d8 ff ff       	call   c0001a0d <mem_cpy>
c0004140:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0004145:	74 58                	je     c000419f <dir_register+0x18a>
c0004147:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c000414b:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0004153:	83 ec 0c             	sub    esp,0xc
c0004156:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0004159:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000415d:	8d 54 24 24          	lea    edx,[esp+0x24]
c0004161:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004165:	e8 24 dc ff ff       	call   c0001d8e <gen_numname>
c000416a:	89 d8                	mov    eax,ebx
c000416c:	e8 de fc ff ff       	call   c0003e4f <dir_find>
c0004171:	83 c4 10             	add    esp,0x10
c0004174:	89 c6                	mov    esi,eax
c0004176:	85 c0                	test   eax,eax
c0004178:	75 15                	jne    c000418f <dir_register+0x17a>
c000417a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000417e:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004183:	75 ce                	jne    c0004153 <dir_register+0x13e>
c0004185:	be 07 00 00 00       	mov    esi,0x7
c000418a:	e9 fe 00 00 00       	jmp    c000428d <dir_register+0x278>
c000418f:	83 f8 04             	cmp    eax,0x4
c0004192:	0f 85 f5 00 00 00    	jne    c000428d <dir_register+0x278>
c0004198:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000419c:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c000419f:	b9 01 00 00 00       	mov    ecx,0x1
c00041a4:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c00041a9:	74 0f                	je     c00041ba <dir_register+0x1a5>
c00041ab:	b9 0d 00 00 00       	mov    ecx,0xd
c00041b0:	8d 47 0c             	lea    eax,[edi+0xc]
c00041b3:	31 d2                	xor    edx,edx
c00041b5:	f7 f1                	div    ecx
c00041b7:	8d 48 01             	lea    ecx,[eax+0x1]
c00041ba:	89 ca                	mov    edx,ecx
c00041bc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00041c0:	89 d8                	mov    eax,ebx
c00041c2:	e8 ad f6 ff ff       	call   c0003874 <dir_alloc>
c00041c7:	89 c6                	mov    esi,eax
c00041c9:	85 c0                	test   eax,eax
c00041cb:	0f 85 bc 00 00 00    	jne    c000428d <dir_register+0x278>
c00041d1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00041d5:	49                   	dec    ecx
c00041d6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00041da:	74 6a                	je     c0004246 <dir_register+0x231>
c00041dc:	89 c8                	mov    eax,ecx
c00041de:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00041e1:	c1 e0 05             	shl    eax,0x5
c00041e4:	29 c2                	sub    edx,eax
c00041e6:	89 d8                	mov    eax,ebx
c00041e8:	e8 fd ec ff ff       	call   c0002eea <dir_sdi>
c00041ed:	89 c6                	mov    esi,eax
c00041ef:	85 c0                	test   eax,eax
c00041f1:	0f 85 96 00 00 00    	jne    c000428d <dir_register+0x278>
c00041f7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00041fb:	e8 4a dc ff ff       	call   c0001e4a <sum_sfn>
c0004200:	0f b6 f8             	movzx  edi,al
c0004203:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0004206:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0004209:	89 e8                	mov    eax,ebp
c000420b:	e8 5c df ff ff       	call   c000216c <move_window>
c0004210:	89 c6                	mov    esi,eax
c0004212:	85 c0                	test   eax,eax
c0004214:	75 77                	jne    c000428d <dir_register+0x278>
c0004216:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c000421b:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000421e:	83 ec 0c             	sub    esp,0xc
c0004221:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0004224:	57                   	push   edi
c0004225:	e8 e0 da ff ff       	call   c0001d0a <put_lfn>
c000422a:	31 d2                	xor    edx,edx
c000422c:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004230:	89 d8                	mov    eax,ebx
c0004232:	e8 0b f2 ff ff       	call   c0003442 <dir_next>
c0004237:	83 c4 10             	add    esp,0x10
c000423a:	89 c6                	mov    esi,eax
c000423c:	85 c0                	test   eax,eax
c000423e:	75 4d                	jne    c000428d <dir_register+0x278>
c0004240:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0004244:	75 bd                	jne    c0004203 <dir_register+0x1ee>
c0004246:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0004249:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000424c:	89 e8                	mov    eax,ebp
c000424e:	e8 19 df ff ff       	call   c000216c <move_window>
c0004253:	89 c6                	mov    esi,eax
c0004255:	85 c0                	test   eax,eax
c0004257:	75 34                	jne    c000428d <dir_register+0x278>
c0004259:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000425c:	b9 20 00 00 00       	mov    ecx,0x20
c0004261:	31 d2                	xor    edx,edx
c0004263:	e8 ba d7 ff ff       	call   c0001a22 <mem_set>
c0004268:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000426b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000426f:	b9 0b 00 00 00       	mov    ecx,0xb
c0004274:	e8 94 d7 ff ff       	call   c0001a0d <mem_cpy>
c0004279:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c000427c:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000427f:	83 e0 18             	and    eax,0x18
c0004282:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004285:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004289:	eb 02                	jmp    c000428d <dir_register+0x278>
c000428b:	89 c6                	mov    esi,eax
c000428d:	83 c4 6c             	add    esp,0x6c
c0004290:	89 f0                	mov    eax,esi
c0004292:	5b                   	pop    ebx
c0004293:	5e                   	pop    esi
c0004294:	5f                   	pop    edi
c0004295:	5d                   	pop    ebp
c0004296:	c3                   	ret    

c0004297 <sync_fs>:
c0004297:	56                   	push   esi
c0004298:	53                   	push   ebx
c0004299:	53                   	push   ebx
c000429a:	89 c3                	mov    ebx,eax
c000429c:	e8 37 de ff ff       	call   c00020d8 <sync_window>
c00042a1:	85 c0                	test   eax,eax
c00042a3:	0f 85 b1 00 00 00    	jne    c000435a <sync_fs+0xc3>
c00042a9:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c00042ac:	0f 85 8e 00 00 00    	jne    c0004340 <sync_fs+0xa9>
c00042b2:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c00042b6:	0f 85 84 00 00 00    	jne    c0004340 <sync_fs+0xa9>
c00042bc:	b9 00 02 00 00       	mov    ecx,0x200
c00042c1:	8d 73 54             	lea    esi,[ebx+0x54]
c00042c4:	31 d2                	xor    edx,edx
c00042c6:	89 f0                	mov    eax,esi
c00042c8:	e8 55 d7 ff ff       	call   c0001a22 <mem_set>
c00042cd:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00042d3:	ba 55 aa 00 00       	mov    edx,0xaa55
c00042d8:	e8 23 d7 ff ff       	call   c0001a00 <st_word>
c00042dd:	ba 52 52 61 41       	mov    edx,0x41615252
c00042e2:	89 f0                	mov    eax,esi
c00042e4:	e8 1b d7 ff ff       	call   c0001a04 <st_dword>
c00042e9:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00042ef:	ba 72 72 41 61       	mov    edx,0x61417272
c00042f4:	e8 0b d7 ff ff       	call   c0001a04 <st_dword>
c00042f9:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00042fc:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c0004302:	e8 fd d6 ff ff       	call   c0001a04 <st_dword>
c0004307:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000430a:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c0004310:	e8 ef d6 ff ff       	call   c0001a04 <st_dword>
c0004315:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0004318:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c000431b:	83 c0 01             	add    eax,0x1
c000431e:	83 d2 00             	adc    edx,0x0
c0004321:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c0004324:	83 ec 0c             	sub    esp,0xc
c0004327:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c000432a:	6a 01                	push   0x1
c000432c:	52                   	push   edx
c000432d:	50                   	push   eax
c000432e:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004332:	56                   	push   esi
c0004333:	50                   	push   eax
c0004334:	e8 20 d6 ff ff       	call   c0001959 <disk_write>
c0004339:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c000433d:	83 c4 20             	add    esp,0x20
c0004340:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004344:	51                   	push   ecx
c0004345:	6a 00                	push   0x0
c0004347:	6a 00                	push   0x0
c0004349:	50                   	push   eax
c000434a:	e8 20 d6 ff ff       	call   c000196f <disk_ioctl>
c000434f:	83 c4 10             	add    esp,0x10
c0004352:	85 c0                	test   eax,eax
c0004354:	0f 95 c0             	setne  al
c0004357:	0f b6 c0             	movzx  eax,al
c000435a:	5a                   	pop    edx
c000435b:	5b                   	pop    ebx
c000435c:	5e                   	pop    esi
c000435d:	c3                   	ret    

c000435e <create_partition>:
c000435e:	55                   	push   ebp
c000435f:	0f b6 c0             	movzx  eax,al
c0004362:	57                   	push   edi
c0004363:	56                   	push   esi
c0004364:	53                   	push   ebx
c0004365:	83 ec 60             	sub    esp,0x60
c0004368:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000436c:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004370:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0004374:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0004378:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c000437c:	50                   	push   eax
c000437d:	6a 01                	push   0x1
c000437f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004383:	e8 e7 d5 ff ff       	call   c000196f <disk_ioctl>
c0004388:	83 c4 10             	add    esp,0x10
c000438b:	85 c0                	test   eax,eax
c000438d:	74 0a                	je     c0004399 <create_partition+0x3b>
c000438f:	b8 01 00 00 00       	mov    eax,0x1
c0004394:	e9 67 05 00 00       	jmp    c0004900 <create_partition+0x5a2>
c0004399:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000439d:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00043a1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00043a5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00043a9:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00043ae:	0f 86 ed 03 00 00    	jbe    c00047a1 <create_partition+0x443>
c00043b4:	83 c0 df             	add    eax,0xffffffdf
c00043b7:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00043bf:	83 d2 ff             	adc    edx,0xffffffff
c00043c2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00043c6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00043ca:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00043ce:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00043d2:	83 c0 bd             	add    eax,0xffffffbd
c00043d5:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00043dc:	83 d2 ff             	adc    edx,0xffffffff
c00043df:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00043e3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00043e7:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00043ef:	be 22 00 00 00       	mov    esi,0x22
c00043f4:	31 ff                	xor    edi,edi
c00043f6:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00043fe:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c0004406:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c000440e:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004412:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004418:	75 0e                	jne    c0004428 <create_partition+0xca>
c000441a:	b9 00 02 00 00       	mov    ecx,0x200
c000441f:	31 d2                	xor    edx,edx
c0004421:	89 d8                	mov    eax,ebx
c0004423:	e8 fa d5 ff ff       	call   c0001a22 <mem_set>
c0004428:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000442c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0004430:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004434:	0b 04 24             	or     eax,DWORD PTR [esp]
c0004437:	0f 84 23 01 00 00    	je     c0004560 <create_partition+0x202>
c000443d:	89 f0                	mov    eax,esi
c000443f:	89 fa                	mov    edx,edi
c0004441:	05 ff 07 00 00       	add    eax,0x7ff
c0004446:	83 d2 00             	adc    edx,0x0
c0004449:	89 c1                	mov    ecx,eax
c000444b:	89 d7                	mov    edi,edx
c000444d:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004453:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004457:	89 ce                	mov    esi,ecx
c0004459:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c000445d:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0004461:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004465:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004468:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000446c:	89 04 24             	mov    DWORD PTR [esp],eax
c000446f:	b8 64 00 00 00       	mov    eax,0x64
c0004474:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004477:	b8 00 00 00 00       	mov    eax,0x0
c000447c:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004480:	72 41                	jb     c00044c3 <create_partition+0x165>
c0004482:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004486:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000448a:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c000448e:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004493:	01 c1                	add    ecx,eax
c0004495:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004499:	f7 24 24             	mul    DWORD PTR [esp]
c000449c:	6a 00                	push   0x0
c000449e:	01 ca                	add    edx,ecx
c00044a0:	6a 64                	push   0x64
c00044a2:	52                   	push   edx
c00044a3:	50                   	push   eax
c00044a4:	e8 13 9f 01 00       	call   c001e3bc <__udivdi3>
c00044a9:	83 c4 10             	add    esp,0x10
c00044ac:	05 ff 07 00 00       	add    eax,0x7ff
c00044b1:	83 d2 00             	adc    edx,0x0
c00044b4:	89 c1                	mov    ecx,eax
c00044b6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00044ba:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00044c0:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00044c3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00044c6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00044ca:	01 f0                	add    eax,esi
c00044cc:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00044d0:	11 fa                	adc    edx,edi
c00044d2:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00044d6:	19 d1                	sbb    ecx,edx
c00044d8:	73 2e                	jae    c0004508 <create_partition+0x1aa>
c00044da:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00044de:	89 f8                	mov    eax,edi
c00044e0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00044e7:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00044eb:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00044f3:	73 6b                	jae    c0004560 <create_partition+0x202>
c00044f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00044f9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00044fd:	29 f0                	sub    eax,esi
c00044ff:	19 fa                	sbb    edx,edi
c0004501:	89 04 24             	mov    DWORD PTR [esp],eax
c0004504:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004508:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000450c:	0b 04 24             	or     eax,DWORD PTR [esp]
c000450f:	74 4f                	je     c0004560 <create_partition+0x202>
c0004511:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0004514:	b9 10 00 00 00       	mov    ecx,0x10
c0004519:	ba f0 f3 01 c0       	mov    edx,0xc001f3f0
c000451e:	e8 ea d4 ff ff       	call   c0001a0d <mem_cpy>
c0004523:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c0004527:	b9 10 00 00 00       	mov    ecx,0x10
c000452c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004530:	e8 2c db ff ff       	call   c0002061 <make_rand>
c0004535:	89 f2                	mov    edx,esi
c0004537:	89 f9                	mov    ecx,edi
c0004539:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000453d:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c0004541:	e8 c1 d4 ff ff       	call   c0001a07 <st_qword>
c0004546:	03 34 24             	add    esi,DWORD PTR [esp]
c0004549:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c000454d:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0004551:	89 f2                	mov    edx,esi
c0004553:	89 f9                	mov    ecx,edi
c0004555:	83 c2 ff             	add    edx,0xffffffff
c0004558:	83 d1 ff             	adc    ecx,0xffffffff
c000455b:	e8 a7 d4 ff ff       	call   c0001a07 <st_qword>
c0004560:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004564:	83 e8 80             	sub    eax,0xffffff80
c0004567:	89 c5                	mov    ebp,eax
c0004569:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000456d:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004573:	75 6b                	jne    c00045e0 <create_partition+0x282>
c0004575:	45                   	inc    ebp
c0004576:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000457a:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c000457f:	e8 39 da ff ff       	call   c0001fbd <crc32>
c0004584:	81 fd 00 02 00 00    	cmp    ebp,0x200
c000458a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000458e:	75 e5                	jne    c0004575 <create_partition+0x217>
c0004590:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004594:	31 d2                	xor    edx,edx
c0004596:	83 ec 0c             	sub    esp,0xc
c0004599:	c1 ed 09             	shr    ebp,0x9
c000459c:	6a 01                	push   0x1
c000459e:	8d 45 02             	lea    eax,[ebp+0x2]
c00045a1:	52                   	push   edx
c00045a2:	50                   	push   eax
c00045a3:	53                   	push   ebx
c00045a4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00045a8:	e8 ac d3 ff ff       	call   c0001959 <disk_write>
c00045ad:	83 c4 20             	add    esp,0x20
c00045b0:	85 c0                	test   eax,eax
c00045b2:	0f 85 d7 fd ff ff    	jne    c000438f <create_partition+0x31>
c00045b8:	83 ec 0c             	sub    esp,0xc
c00045bb:	31 d2                	xor    edx,edx
c00045bd:	6a 01                	push   0x1
c00045bf:	89 e8                	mov    eax,ebp
c00045c1:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c00045c5:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c00045c9:	52                   	push   edx
c00045ca:	50                   	push   eax
c00045cb:	53                   	push   ebx
c00045cc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00045d0:	e8 84 d3 ff ff       	call   c0001959 <disk_write>
c00045d5:	83 c4 20             	add    esp,0x20
c00045d8:	85 c0                	test   eax,eax
c00045da:	0f 85 af fd ff ff    	jne    c000438f <create_partition+0x31>
c00045e0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00045e4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00045e8:	3d 00 40 00 00       	cmp    eax,0x4000
c00045ed:	74 0d                	je     c00045fc <create_partition+0x29e>
c00045ef:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00045f3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00045f7:	e9 12 fe ff ff       	jmp    c000440e <create_partition+0xb0>
c00045fc:	31 d2                	xor    edx,edx
c00045fe:	b9 00 02 00 00       	mov    ecx,0x200
c0004603:	89 d8                	mov    eax,ebx
c0004605:	8d 6b 20             	lea    ebp,[ebx+0x20]
c0004608:	e8 15 d4 ff ff       	call   c0001a22 <mem_set>
c000460d:	8d 7b 48             	lea    edi,[ebx+0x48]
c0004610:	b9 10 00 00 00       	mov    ecx,0x10
c0004615:	ba e0 f2 01 c0       	mov    edx,0xc001f2e0
c000461a:	89 d8                	mov    eax,ebx
c000461c:	e8 ec d3 ff ff       	call   c0001a0d <mem_cpy>
c0004621:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0004625:	8d 43 58             	lea    eax,[ebx+0x58]
c0004628:	f7 d2                	not    edx
c000462a:	e8 d5 d3 ff ff       	call   c0001a04 <st_dword>
c000462f:	8d 43 18             	lea    eax,[ebx+0x18]
c0004632:	31 c9                	xor    ecx,ecx
c0004634:	89 04 24             	mov    DWORD PTR [esp],eax
c0004637:	ba 01 00 00 00       	mov    edx,0x1
c000463c:	e8 c6 d3 ff ff       	call   c0001a07 <st_qword>
c0004641:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004645:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004649:	83 c2 ff             	add    edx,0xffffffff
c000464c:	89 e8                	mov    eax,ebp
c000464e:	83 d1 ff             	adc    ecx,0xffffffff
c0004651:	e8 b1 d3 ff ff       	call   c0001a07 <st_qword>
c0004656:	31 c9                	xor    ecx,ecx
c0004658:	8d 43 28             	lea    eax,[ebx+0x28]
c000465b:	ba 22 00 00 00       	mov    edx,0x22
c0004660:	e8 a2 d3 ff ff       	call   c0001a07 <st_qword>
c0004665:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0004669:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000466d:	83 c2 de             	add    edx,0xffffffde
c0004670:	8d 43 30             	lea    eax,[ebx+0x30]
c0004673:	83 d1 ff             	adc    ecx,0xffffffff
c0004676:	31 f6                	xor    esi,esi
c0004678:	e8 8a d3 ff ff       	call   c0001a07 <st_qword>
c000467d:	8d 43 54             	lea    eax,[ebx+0x54]
c0004680:	ba 80 00 00 00       	mov    edx,0x80
c0004685:	e8 7a d3 ff ff       	call   c0001a04 <st_dword>
c000468a:	8d 43 50             	lea    eax,[ebx+0x50]
c000468d:	ba 80 00 00 00       	mov    edx,0x80
c0004692:	e8 6d d3 ff ff       	call   c0001a04 <st_dword>
c0004697:	ba 02 00 00 00       	mov    edx,0x2
c000469c:	89 f8                	mov    eax,edi
c000469e:	e8 61 d3 ff ff       	call   c0001a04 <st_dword>
c00046a3:	8d 53 38             	lea    edx,[ebx+0x38]
c00046a6:	b9 10 00 00 00       	mov    ecx,0x10
c00046ab:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00046af:	e8 ad d9 ff ff       	call   c0002061 <make_rand>
c00046b4:	83 c8 ff             	or     eax,0xffffffff
c00046b7:	46                   	inc    esi
c00046b8:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c00046bd:	e8 fb d8 ff ff       	call   c0001fbd <crc32>
c00046c2:	83 fe 5c             	cmp    esi,0x5c
c00046c5:	75 f0                	jne    c00046b7 <create_partition+0x359>
c00046c7:	f7 d0                	not    eax
c00046c9:	8d 73 10             	lea    esi,[ebx+0x10]
c00046cc:	89 c2                	mov    edx,eax
c00046ce:	89 f0                	mov    eax,esi
c00046d0:	e8 2f d3 ff ff       	call   c0001a04 <st_dword>
c00046d5:	83 ec 0c             	sub    esp,0xc
c00046d8:	6a 01                	push   0x1
c00046da:	6a 00                	push   0x0
c00046dc:	6a 01                	push   0x1
c00046de:	53                   	push   ebx
c00046df:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00046e3:	e8 71 d2 ff ff       	call   c0001959 <disk_write>
c00046e8:	83 c4 20             	add    esp,0x20
c00046eb:	85 c0                	test   eax,eax
c00046ed:	0f 85 9c fc ff ff    	jne    c000438f <create_partition+0x31>
c00046f3:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00046f7:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00046fb:	83 c2 ff             	add    edx,0xffffffff
c00046fe:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004701:	83 d1 ff             	adc    ecx,0xffffffff
c0004704:	e8 fe d2 ff ff       	call   c0001a07 <st_qword>
c0004709:	ba 01 00 00 00       	mov    edx,0x1
c000470e:	31 c9                	xor    ecx,ecx
c0004710:	89 e8                	mov    eax,ebp
c0004712:	e8 f0 d2 ff ff       	call   c0001a07 <st_qword>
c0004717:	89 f8                	mov    eax,edi
c0004719:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000471d:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004721:	31 ff                	xor    edi,edi
c0004723:	e8 df d2 ff ff       	call   c0001a07 <st_qword>
c0004728:	89 f0                	mov    eax,esi
c000472a:	31 d2                	xor    edx,edx
c000472c:	e8 d3 d2 ff ff       	call   c0001a04 <st_dword>
c0004731:	83 c8 ff             	or     eax,0xffffffff
c0004734:	47                   	inc    edi
c0004735:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c000473a:	e8 7e d8 ff ff       	call   c0001fbd <crc32>
c000473f:	83 ff 5c             	cmp    edi,0x5c
c0004742:	75 f0                	jne    c0004734 <create_partition+0x3d6>
c0004744:	f7 d0                	not    eax
c0004746:	89 c2                	mov    edx,eax
c0004748:	89 f0                	mov    eax,esi
c000474a:	e8 b5 d2 ff ff       	call   c0001a04 <st_dword>
c000474f:	83 ec 0c             	sub    esp,0xc
c0004752:	6a 01                	push   0x1
c0004754:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004758:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c000475c:	83 c0 ff             	add    eax,0xffffffff
c000475f:	83 d2 ff             	adc    edx,0xffffffff
c0004762:	52                   	push   edx
c0004763:	50                   	push   eax
c0004764:	53                   	push   ebx
c0004765:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004769:	e8 eb d1 ff ff       	call   c0001959 <disk_write>
c000476e:	83 c4 20             	add    esp,0x20
c0004771:	85 c0                	test   eax,eax
c0004773:	0f 85 16 fc ff ff    	jne    c000438f <create_partition+0x31>
c0004779:	31 d2                	xor    edx,edx
c000477b:	89 d8                	mov    eax,ebx
c000477d:	b9 00 02 00 00       	mov    ecx,0x200
c0004782:	e8 9b d2 ff ff       	call   c0001a22 <mem_set>
c0004787:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c000478d:	b9 10 00 00 00       	mov    ecx,0x10
c0004792:	ba f0 f2 01 c0       	mov    edx,0xc001f2f0
c0004797:	e8 71 d2 ff ff       	call   c0001a0d <mem_cpy>
c000479c:	e9 21 01 00 00       	jmp    c00048c2 <create_partition+0x564>
c00047a1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00047a5:	b9 05 00 00 00       	mov    ecx,0x5
c00047aa:	89 04 24             	mov    DWORD PTR [esp],eax
c00047ad:	bf 08 00 00 00       	mov    edi,0x8
c00047b2:	89 f8                	mov    eax,edi
c00047b4:	31 d2                	xor    edx,edx
c00047b6:	0f b6 f0             	movzx  esi,al
c00047b9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047bc:	f7 f6                	div    esi
c00047be:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c00047c3:	76 0a                	jbe    c00047cf <create_partition+0x471>
c00047c5:	d1 e7                	shl    edi,1
c00047c7:	49                   	dec    ecx
c00047c8:	75 e8                	jne    c00047b2 <create_partition+0x454>
c00047ca:	bf ff ff ff ff       	mov    edi,0xffffffff
c00047cf:	b9 00 02 00 00       	mov    ecx,0x200
c00047d4:	31 d2                	xor    edx,edx
c00047d6:	89 d8                	mov    eax,ebx
c00047d8:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c00047de:	e8 3f d2 ff ff       	call   c0001a22 <mem_set>
c00047e3:	b9 64 00 00 00       	mov    ecx,0x64
c00047e8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047eb:	31 d2                	xor    edx,edx
c00047ed:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00047f5:	f7 f1                	div    ecx
c00047f7:	b9 3f 00 00 00       	mov    ecx,0x3f
c00047fc:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004800:	89 f8                	mov    eax,edi
c0004802:	0f b6 c0             	movzx  eax,al
c0004805:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004809:	e9 80 00 00 00       	jmp    c000488e <create_partition+0x530>
c000480e:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004811:	29 cf                	sub    edi,ecx
c0004813:	89 ca                	mov    edx,ecx
c0004815:	89 f0                	mov    eax,esi
c0004817:	bd 3f 00 00 00       	mov    ebp,0x3f
c000481c:	e8 e3 d1 ff ff       	call   c0001a04 <st_dword>
c0004821:	8d 46 04             	lea    eax,[esi+0x4]
c0004824:	89 fa                	mov    edx,edi
c0004826:	83 c6 10             	add    esi,0x10
c0004829:	e8 d6 d1 ff ff       	call   c0001a04 <st_dword>
c000482e:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004832:	31 d2                	xor    edx,edx
c0004834:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004837:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c000483b:	89 c8                	mov    eax,ecx
c000483d:	01 f9                	add    ecx,edi
c000483f:	f7 f5                	div    ebp
c0004841:	89 d5                	mov    ebp,edx
c0004843:	31 d2                	xor    edx,edx
c0004845:	45                   	inc    ebp
c0004846:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c000484a:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c000484d:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004850:	89 c2                	mov    edx,eax
c0004852:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004855:	c1 ea 02             	shr    edx,0x2
c0004858:	83 e2 c0             	and    edx,0xffffffc0
c000485b:	09 ea                	or     edx,ebp
c000485d:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004862:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004865:	31 d2                	xor    edx,edx
c0004867:	f7 f5                	div    ebp
c0004869:	89 d7                	mov    edi,edx
c000486b:	31 d2                	xor    edx,edx
c000486d:	47                   	inc    edi
c000486e:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004872:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004875:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004878:	89 c5                	mov    ebp,eax
c000487a:	c1 ed 02             	shr    ebp,0x2
c000487d:	83 e5 c0             	and    ebp,0xffffffc0
c0004880:	09 ef                	or     edi,ebp
c0004882:	89 fa                	mov    edx,edi
c0004884:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004887:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c000488c:	74 34                	je     c00048c2 <create_partition+0x564>
c000488e:	85 c9                	test   ecx,ecx
c0004890:	74 30                	je     c00048c2 <create_partition+0x564>
c0004892:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004895:	76 2b                	jbe    c00048c2 <create_partition+0x564>
c0004897:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000489b:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000489f:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c00048a2:	83 ff 64             	cmp    edi,0x64
c00048a5:	76 4b                	jbe    c00048f2 <create_partition+0x594>
c00048a7:	89 f8                	mov    eax,edi
c00048a9:	01 c8                	add    eax,ecx
c00048ab:	0f 82 5d ff ff ff    	jb     c000480e <create_partition+0x4b0>
c00048b1:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00048b4:	0f 87 54 ff ff ff    	ja     c000480e <create_partition+0x4b0>
c00048ba:	85 ff                	test   edi,edi
c00048bc:	0f 85 51 ff ff ff    	jne    c0004813 <create_partition+0x4b5>
c00048c2:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c00048c8:	ba 55 aa 00 00       	mov    edx,0xaa55
c00048cd:	e8 2e d1 ff ff       	call   c0001a00 <st_word>
c00048d2:	83 ec 0c             	sub    esp,0xc
c00048d5:	6a 01                	push   0x1
c00048d7:	6a 00                	push   0x0
c00048d9:	6a 00                	push   0x0
c00048db:	53                   	push   ebx
c00048dc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00048e0:	e8 74 d0 ff ff       	call   c0001959 <disk_write>
c00048e5:	83 c4 20             	add    esp,0x20
c00048e8:	85 c0                	test   eax,eax
c00048ea:	0f 95 c0             	setne  al
c00048ed:	0f b6 c0             	movzx  eax,al
c00048f0:	eb 0e                	jmp    c0004900 <create_partition+0x5a2>
c00048f2:	74 07                	je     c00048fb <create_partition+0x59d>
c00048f4:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c00048f9:	eb ac                	jmp    c00048a7 <create_partition+0x549>
c00048fb:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00048fe:	eb a7                	jmp    c00048a7 <create_partition+0x549>
c0004900:	83 c4 5c             	add    esp,0x5c
c0004903:	5b                   	pop    ebx
c0004904:	5e                   	pop    esi
c0004905:	5f                   	pop    edi
c0004906:	5d                   	pop    ebp
c0004907:	c3                   	ret    

c0004908 <get_fileinfo>:
c0004908:	55                   	push   ebp
c0004909:	57                   	push   edi
c000490a:	56                   	push   esi
c000490b:	53                   	push   ebx
c000490c:	83 ec 1c             	sub    esp,0x1c
c000490f:	8b 30                	mov    esi,DWORD PTR [eax]
c0004911:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004915:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004919:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c000491c:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c000491f:	0f 84 dc 01 00 00    	je     c0004b01 <get_fileinfo+0x1f9>
c0004925:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004928:	75 0f                	jne    c0004939 <get_fileinfo+0x31>
c000492a:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c000492d:	83 c4 1c             	add    esp,0x1c
c0004930:	5b                   	pop    ebx
c0004931:	5e                   	pop    esi
c0004932:	5f                   	pop    edi
c0004933:	5d                   	pop    ebp
c0004934:	e9 58 d5 ff ff       	jmp    c0001e91 <get_xfileinfo>
c0004939:	89 d3                	mov    ebx,edx
c000493b:	89 c6                	mov    esi,eax
c000493d:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004941:	74 6a                	je     c00049ad <get_fileinfo+0xa5>
c0004943:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000494b:	31 ed                	xor    ebp,ebp
c000494d:	31 ff                	xor    edi,edi
c000494f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004953:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004957:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000495a:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c000495e:	66 85 d2             	test   dx,dx
c0004961:	74 3e                	je     c00049a1 <get_fileinfo+0x99>
c0004963:	66 85 ed             	test   bp,bp
c0004966:	75 0c                	jne    c0004974 <get_fileinfo+0x6c>
c0004968:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c000496e:	66 3d ff 07          	cmp    ax,0x7ff
c0004972:	76 22                	jbe    c0004996 <get_fileinfo+0x8e>
c0004974:	b9 ff 00 00 00       	mov    ecx,0xff
c0004979:	89 e8                	mov    eax,ebp
c000497b:	29 f9                	sub    ecx,edi
c000497d:	c1 e0 10             	shl    eax,0x10
c0004980:	09 d0                	or     eax,edx
c0004982:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004986:	e8 a3 d1 ff ff       	call   c0001b2e <put_utf>
c000498b:	84 c0                	test   al,al
c000498d:	74 10                	je     c000499f <get_fileinfo+0x97>
c000498f:	0f b6 c0             	movzx  eax,al
c0004992:	31 d2                	xor    edx,edx
c0004994:	01 c7                	add    edi,eax
c0004996:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c000499b:	89 d5                	mov    ebp,edx
c000499d:	eb b0                	jmp    c000494f <get_fileinfo+0x47>
c000499f:	31 ff                	xor    edi,edi
c00049a1:	66 85 ed             	test   bp,bp
c00049a4:	74 02                	je     c00049a8 <get_fileinfo+0xa0>
c00049a6:	31 ff                	xor    edi,edi
c00049a8:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c00049ad:	31 ff                	xor    edi,edi
c00049af:	31 c9                	xor    ecx,ecx
c00049b1:	83 f9 0a             	cmp    ecx,0xa
c00049b4:	0f 87 ad 00 00 00    	ja     c0004a67 <get_fileinfo+0x15f>
c00049ba:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c00049bd:	8d 69 01             	lea    ebp,[ecx+0x1]
c00049c0:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c00049c4:	66 83 fa 20          	cmp    dx,0x20
c00049c8:	0f 84 92 00 00 00    	je     c0004a60 <get_fileinfo+0x158>
c00049ce:	66 83 fa 05          	cmp    dx,0x5
c00049d2:	75 05                	jne    c00049d9 <get_fileinfo+0xd1>
c00049d4:	ba e5 00 00 00       	mov    edx,0xe5
c00049d9:	83 ff 0b             	cmp    edi,0xb
c00049dc:	77 0b                	ja     c00049e9 <get_fileinfo+0xe1>
c00049de:	83 fd 09             	cmp    ebp,0x9
c00049e1:	75 06                	jne    c00049e9 <get_fileinfo+0xe1>
c00049e3:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c00049e8:	47                   	inc    edi
c00049e9:	0f b7 c2             	movzx  eax,dx
c00049ec:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00049f0:	e8 6d d0 ff ff       	call   c0001a62 <dbc_1st>
c00049f5:	85 c0                	test   eax,eax
c00049f7:	74 2f                	je     c0004a28 <get_fileinfo+0x120>
c00049f9:	83 fd 08             	cmp    ebp,0x8
c00049fc:	74 2a                	je     c0004a28 <get_fileinfo+0x120>
c00049fe:	83 fd 0b             	cmp    ebp,0xb
c0004a01:	74 25                	je     c0004a28 <get_fileinfo+0x120>
c0004a03:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004a06:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004a0a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004a0e:	e8 52 d0 ff ff       	call   c0001a65 <dbc_2nd>
c0004a13:	85 c0                	test   eax,eax
c0004a15:	74 11                	je     c0004a28 <get_fileinfo+0x120>
c0004a17:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004a1b:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004a20:	c1 e2 08             	shl    edx,0x8
c0004a23:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004a26:	09 c2                	or     edx,eax
c0004a28:	0f b7 d2             	movzx  edx,dx
c0004a2b:	50                   	push   eax
c0004a2c:	50                   	push   eax
c0004a2d:	68 b5 01 00 00       	push   0x1b5
c0004a32:	52                   	push   edx
c0004a33:	e8 46 38 00 00       	call   c000827e <ff_oem2uni>
c0004a38:	83 c4 10             	add    esp,0x10
c0004a3b:	66 85 c0             	test   ax,ax
c0004a3e:	75 04                	jne    c0004a44 <get_fileinfo+0x13c>
c0004a40:	31 ff                	xor    edi,edi
c0004a42:	eb 23                	jmp    c0004a67 <get_fileinfo+0x15f>
c0004a44:	b9 0c 00 00 00       	mov    ecx,0xc
c0004a49:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004a4d:	29 f9                	sub    ecx,edi
c0004a4f:	0f b7 c0             	movzx  eax,ax
c0004a52:	e8 d7 d0 ff ff       	call   c0001b2e <put_utf>
c0004a57:	84 c0                	test   al,al
c0004a59:	74 e5                	je     c0004a40 <get_fileinfo+0x138>
c0004a5b:	0f b6 c0             	movzx  eax,al
c0004a5e:	01 c7                	add    edi,eax
c0004a60:	89 e9                	mov    ecx,ebp
c0004a62:	e9 4a ff ff ff       	jmp    c00049b1 <get_fileinfo+0xa9>
c0004a67:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004a6c:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004a70:	75 54                	jne    c0004ac6 <get_fileinfo+0x1be>
c0004a72:	85 ff                	test   edi,edi
c0004a74:	75 0b                	jne    c0004a81 <get_fileinfo+0x179>
c0004a76:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004a7a:	ba 01 00 00 00       	mov    edx,0x1
c0004a7f:	eb 33                	jmp    c0004ab4 <get_fileinfo+0x1ac>
c0004a81:	b1 08                	mov    cl,0x8
c0004a83:	31 d2                	xor    edx,edx
c0004a85:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004a8b:	84 c0                	test   al,al
c0004a8d:	74 25                	je     c0004ab4 <get_fileinfo+0x1ac>
c0004a8f:	66 83 f8 2e          	cmp    ax,0x2e
c0004a93:	74 16                	je     c0004aab <get_fileinfo+0x1a3>
c0004a95:	8d 78 bf             	lea    edi,[eax-0x41]
c0004a98:	66 83 ff 19          	cmp    di,0x19
c0004a9c:	77 0f                	ja     c0004aad <get_fileinfo+0x1a5>
c0004a9e:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004aa1:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004aa4:	74 07                	je     c0004aad <get_fileinfo+0x1a5>
c0004aa6:	83 c0 20             	add    eax,0x20
c0004aa9:	eb 02                	jmp    c0004aad <get_fileinfo+0x1a5>
c0004aab:	b1 10                	mov    cl,0x10
c0004aad:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004ab1:	42                   	inc    edx
c0004ab2:	eb d1                	jmp    c0004a85 <get_fileinfo+0x17d>
c0004ab4:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004ab9:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004abc:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004ac0:	75 04                	jne    c0004ac6 <get_fileinfo+0x1be>
c0004ac2:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004ac6:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004ac9:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004acc:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004acf:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004ad2:	83 c0 1c             	add    eax,0x1c
c0004ad5:	e8 c1 ce ff ff       	call   c000199b <ld_dword>
c0004ada:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004ae1:	89 03                	mov    DWORD PTR [ebx],eax
c0004ae3:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004ae6:	83 c0 16             	add    eax,0x16
c0004ae9:	e8 a0 ce ff ff       	call   c000198e <ld_word>
c0004aee:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004af2:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004af5:	83 c0 18             	add    eax,0x18
c0004af8:	e8 91 ce ff ff       	call   c000198e <ld_word>
c0004afd:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004b01:	83 c4 1c             	add    esp,0x1c
c0004b04:	5b                   	pop    ebx
c0004b05:	5e                   	pop    esi
c0004b06:	5f                   	pop    edi
c0004b07:	5d                   	pop    ebp
c0004b08:	c3                   	ret    

c0004b09 <ld_clust.isra.0>:
c0004b09:	56                   	push   esi
c0004b0a:	89 c6                	mov    esi,eax
c0004b0c:	53                   	push   ebx
c0004b0d:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004b10:	89 d3                	mov    ebx,edx
c0004b12:	e8 77 ce ff ff       	call   c000198e <ld_word>
c0004b17:	0f b7 c8             	movzx  ecx,ax
c0004b1a:	89 f0                	mov    eax,esi
c0004b1c:	3c 03                	cmp    al,0x3
c0004b1e:	75 0d                	jne    c0004b2d <ld_clust.isra.0+0x24>
c0004b20:	8d 43 14             	lea    eax,[ebx+0x14]
c0004b23:	e8 66 ce ff ff       	call   c000198e <ld_word>
c0004b28:	c1 e0 10             	shl    eax,0x10
c0004b2b:	09 c1                	or     ecx,eax
c0004b2d:	89 c8                	mov    eax,ecx
c0004b2f:	5b                   	pop    ebx
c0004b30:	5e                   	pop    esi
c0004b31:	c3                   	ret    

c0004b32 <st_clust.isra.1>:
c0004b32:	56                   	push   esi
c0004b33:	89 c6                	mov    esi,eax
c0004b35:	53                   	push   ebx
c0004b36:	89 d3                	mov    ebx,edx
c0004b38:	0f b7 d1             	movzx  edx,cx
c0004b3b:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004b3e:	e8 bd ce ff ff       	call   c0001a00 <st_word>
c0004b43:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004b46:	75 0f                	jne    c0004b57 <st_clust.isra.1+0x25>
c0004b48:	c1 e9 10             	shr    ecx,0x10
c0004b4b:	8d 43 14             	lea    eax,[ebx+0x14]
c0004b4e:	89 ca                	mov    edx,ecx
c0004b50:	5b                   	pop    ebx
c0004b51:	5e                   	pop    esi
c0004b52:	e9 a9 ce ff ff       	jmp    c0001a00 <st_word>
c0004b57:	5b                   	pop    ebx
c0004b58:	5e                   	pop    esi
c0004b59:	c3                   	ret    

c0004b5a <init_alloc_info.isra.2>:
c0004b5a:	56                   	push   esi
c0004b5b:	53                   	push   ebx
c0004b5c:	89 c6                	mov    esi,eax
c0004b5e:	89 d3                	mov    ebx,edx
c0004b60:	51                   	push   ecx
c0004b61:	8b 00                	mov    eax,DWORD PTR [eax]
c0004b63:	83 c0 34             	add    eax,0x34
c0004b66:	e8 30 ce ff ff       	call   c000199b <ld_dword>
c0004b6b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004b6e:	8b 06                	mov    eax,DWORD PTR [esi]
c0004b70:	83 c0 38             	add    eax,0x38
c0004b73:	e8 3b ce ff ff       	call   c00019b3 <ld_qword>
c0004b78:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004b7b:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004b7e:	8b 06                	mov    eax,DWORD PTR [esi]
c0004b80:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004b83:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004b8a:	83 e0 02             	and    eax,0x2
c0004b8d:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004b90:	5b                   	pop    ebx
c0004b91:	5b                   	pop    ebx
c0004b92:	5e                   	pop    esi
c0004b93:	c3                   	ret    

c0004b94 <follow_path>:
c0004b94:	56                   	push   esi
c0004b95:	53                   	push   ebx
c0004b96:	89 c3                	mov    ebx,eax
c0004b98:	83 ec 14             	sub    esp,0x14
c0004b9b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004b9f:	8b 30                	mov    esi,DWORD PTR [eax]
c0004ba1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ba5:	8a 10                	mov    dl,BYTE PTR [eax]
c0004ba7:	80 fa 5c             	cmp    dl,0x5c
c0004baa:	75 07                	jne    c0004bb3 <follow_path+0x1f>
c0004bac:	40                   	inc    eax
c0004bad:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004bb1:	eb ee                	jmp    c0004ba1 <follow_path+0xd>
c0004bb3:	80 fa 2f             	cmp    dl,0x2f
c0004bb6:	74 f4                	je     c0004bac <follow_path+0x18>
c0004bb8:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004bbf:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004bc6:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004bc9:	77 52                	ja     c0004c1d <follow_path+0x89>
c0004bcb:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004bcf:	31 d2                	xor    edx,edx
c0004bd1:	89 d8                	mov    eax,ebx
c0004bd3:	e8 12 e3 ff ff       	call   c0002eea <dir_sdi>
c0004bd8:	eb 7c                	jmp    c0004c56 <follow_path+0xc2>
c0004bda:	89 d8                	mov    eax,ebx
c0004bdc:	e8 6e f2 ff ff       	call   c0003e4f <dir_find>
c0004be1:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004be4:	85 c0                	test   eax,eax
c0004be6:	75 46                	jne    c0004c2e <follow_path+0x9a>
c0004be8:	80 e2 04             	and    dl,0x4
c0004beb:	75 69                	jne    c0004c56 <follow_path+0xc2>
c0004bed:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004bf1:	74 5e                	je     c0004c51 <follow_path+0xbd>
c0004bf3:	8a 06                	mov    al,BYTE PTR [esi]
c0004bf5:	3c 04                	cmp    al,0x4
c0004bf7:	75 41                	jne    c0004c3a <follow_path+0xa6>
c0004bf9:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004bfc:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004c00:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004c03:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004c06:	30 c0                	xor    al,al
c0004c08:	09 d0                	or     eax,edx
c0004c0a:	89 da                	mov    edx,ebx
c0004c0c:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004c0f:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004c12:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004c15:	8d 46 10             	lea    eax,[esi+0x10]
c0004c18:	e8 3d ff ff ff       	call   c0004b5a <init_alloc_info.isra.2>
c0004c1d:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004c21:	89 d8                	mov    eax,ebx
c0004c23:	e8 a9 ed ff ff       	call   c00039d1 <create_name>
c0004c28:	85 c0                	test   eax,eax
c0004c2a:	74 ae                	je     c0004bda <follow_path+0x46>
c0004c2c:	eb 28                	jmp    c0004c56 <follow_path+0xc2>
c0004c2e:	83 f8 04             	cmp    eax,0x4
c0004c31:	75 23                	jne    c0004c56 <follow_path+0xc2>
c0004c33:	80 e2 04             	and    dl,0x4
c0004c36:	74 19                	je     c0004c51 <follow_path+0xbd>
c0004c38:	eb 1c                	jmp    c0004c56 <follow_path+0xc2>
c0004c3a:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004c3d:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004c43:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004c47:	e8 bd fe ff ff       	call   c0004b09 <ld_clust.isra.0>
c0004c4c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004c4f:	eb cc                	jmp    c0004c1d <follow_path+0x89>
c0004c51:	b8 05 00 00 00       	mov    eax,0x5
c0004c56:	83 c4 14             	add    esp,0x14
c0004c59:	5b                   	pop    ebx
c0004c5a:	5e                   	pop    esi
c0004c5b:	c3                   	ret    

c0004c5c <f_mount>:
c0004c5c:	53                   	push   ebx
c0004c5d:	83 ec 18             	sub    esp,0x18
c0004c60:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004c64:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004c68:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004c6c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004c70:	e8 fb d2 ff ff       	call   c0001f70 <get_ldnumber>
c0004c75:	89 c2                	mov    edx,eax
c0004c77:	b8 0b 00 00 00       	mov    eax,0xb
c0004c7c:	85 d2                	test   edx,edx
c0004c7e:	78 39                	js     c0004cb9 <f_mount+0x5d>
c0004c80:	8b 04 95 a0 33 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdcc60]
c0004c87:	85 c0                	test   eax,eax
c0004c89:	74 03                	je     c0004c8e <f_mount+0x32>
c0004c8b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004c8e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004c92:	85 c0                	test   eax,eax
c0004c94:	74 03                	je     c0004c99 <f_mount+0x3d>
c0004c96:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004c99:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004c9d:	89 04 95 a0 33 02 c0 	mov    DWORD PTR [edx*4-0x3ffdcc60],eax
c0004ca4:	31 c0                	xor    eax,eax
c0004ca6:	84 db                	test   bl,bl
c0004ca8:	74 0f                	je     c0004cb9 <f_mount+0x5d>
c0004caa:	31 c9                	xor    ecx,ecx
c0004cac:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004cb0:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004cb4:	e8 65 d7 ff ff       	call   c000241e <mount_volume>
c0004cb9:	83 c4 18             	add    esp,0x18
c0004cbc:	5b                   	pop    ebx
c0004cbd:	c3                   	ret    

c0004cbe <f_open>:
c0004cbe:	55                   	push   ebp
c0004cbf:	bd 09 00 00 00       	mov    ebp,0x9
c0004cc4:	57                   	push   edi
c0004cc5:	56                   	push   esi
c0004cc6:	53                   	push   ebx
c0004cc7:	83 ec 7c             	sub    esp,0x7c
c0004cca:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004cd1:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004cd8:	85 db                	test   ebx,ebx
c0004cda:	0f 84 10 04 00 00    	je     c00050f0 <f_open+0x432>
c0004ce0:	89 fe                	mov    esi,edi
c0004ce2:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004ce6:	83 e6 3f             	and    esi,0x3f
c0004ce9:	89 f0                	mov    eax,esi
c0004ceb:	0f b6 c8             	movzx  ecx,al
c0004cee:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004cf5:	e8 24 d7 ff ff       	call   c000241e <mount_volume>
c0004cfa:	89 c5                	mov    ebp,eax
c0004cfc:	85 c0                	test   eax,eax
c0004cfe:	0f 85 e6 03 00 00    	jne    c00050ea <f_open+0x42c>
c0004d04:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d08:	bd 11 00 00 00       	mov    ebp,0x11
c0004d0d:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004d11:	83 ec 0c             	sub    esp,0xc
c0004d14:	68 60 04 00 00       	push   0x460
c0004d19:	e8 a3 34 00 00       	call   c00081c1 <ff_memalloc>
c0004d1e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004d22:	83 c4 10             	add    esp,0x10
c0004d25:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004d2a:	0f 84 c0 03 00 00    	je     c00050f0 <f_open+0x432>
c0004d30:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d34:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004d38:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004d3e:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004d41:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004d44:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004d4b:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004d4f:	e8 40 fe ff ff       	call   c0004b94 <follow_path>
c0004d54:	89 c5                	mov    ebp,eax
c0004d56:	85 c0                	test   eax,eax
c0004d58:	75 0c                	jne    c0004d66 <f_open+0xa8>
c0004d5a:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004d5f:	79 05                	jns    c0004d66 <f_open+0xa8>
c0004d61:	bd 06 00 00 00       	mov    ebp,0x6
c0004d66:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0004d6c:	0f 84 84 01 00 00    	je     c0004ef6 <f_open+0x238>
c0004d72:	85 ed                	test   ebp,ebp
c0004d74:	74 20                	je     c0004d96 <f_open+0xd8>
c0004d76:	83 fd 04             	cmp    ebp,0x4
c0004d79:	0f 85 58 03 00 00    	jne    c00050d7 <f_open+0x419>
c0004d7f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004d83:	83 ce 08             	or     esi,0x8
c0004d86:	e8 8a f2 ff ff       	call   c0004015 <dir_register>
c0004d8b:	89 c5                	mov    ebp,eax
c0004d8d:	85 c0                	test   eax,eax
c0004d8f:	74 2f                	je     c0004dc0 <f_open+0x102>
c0004d91:	e9 41 03 00 00       	jmp    c00050d7 <f_open+0x419>
c0004d96:	bd 07 00 00 00       	mov    ebp,0x7
c0004d9b:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0004da0:	0f 85 31 03 00 00    	jne    c00050d7 <f_open+0x419>
c0004da6:	bd 08 00 00 00       	mov    ebp,0x8
c0004dab:	f7 c7 04 00 00 00    	test   edi,0x4
c0004db1:	0f 85 20 03 00 00    	jne    c00050d7 <f_open+0x419>
c0004db7:	83 e7 08             	and    edi,0x8
c0004dba:	0f 84 65 01 00 00    	je     c0004f25 <f_open+0x267>
c0004dc0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004dc4:	8a 02                	mov    al,BYTE PTR [edx]
c0004dc6:	3c 04                	cmp    al,0x4
c0004dc8:	0f 85 97 00 00 00    	jne    c0004e65 <f_open+0x1a7>
c0004dce:	8d 42 10             	lea    eax,[edx+0x10]
c0004dd1:	89 13                	mov    DWORD PTR [ebx],edx
c0004dd3:	89 da                	mov    edx,ebx
c0004dd5:	e8 80 fd ff ff       	call   c0004b5a <init_alloc_info.isra.2>
c0004dda:	31 d2                	xor    edx,edx
c0004ddc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004de0:	b9 1e 00 00 00       	mov    ecx,0x1e
c0004de5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004de8:	83 c0 02             	add    eax,0x2
c0004deb:	e8 32 cc ff ff       	call   c0001a22 <mem_set>
c0004df0:	b9 1a 00 00 00       	mov    ecx,0x1a
c0004df5:	31 d2                	xor    edx,edx
c0004df7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004dfb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004dfe:	83 c0 26             	add    eax,0x26
c0004e01:	e8 1c cc ff ff       	call   c0001a22 <mem_set>
c0004e06:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e0a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0004e0d:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c0004e11:	ba 00 00 21 50       	mov    edx,0x50210000
c0004e16:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e19:	83 c0 08             	add    eax,0x8
c0004e1c:	e8 e3 cb ff ff       	call   c0001a04 <st_dword>
c0004e21:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e25:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e28:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c0004e2c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004e30:	e8 b7 ea ff ff       	call   c00038ec <store_xdir>
c0004e35:	89 c5                	mov    ebp,eax
c0004e37:	85 c0                	test   eax,eax
c0004e39:	0f 85 98 02 00 00    	jne    c00050d7 <f_open+0x419>
c0004e3f:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004e42:	85 d2                	test   edx,edx
c0004e44:	0f 84 db 00 00 00    	je     c0004f25 <f_open+0x267>
c0004e4a:	31 c9                	xor    ecx,ecx
c0004e4c:	89 d8                	mov    eax,ebx
c0004e4e:	e8 8e e3 ff ff       	call   c00031e1 <remove_chain>
c0004e53:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004e57:	89 c5                	mov    ebp,eax
c0004e59:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004e5c:	48                   	dec    eax
c0004e5d:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0004e60:	e9 b8 00 00 00       	jmp    c0004f1d <f_open+0x25f>
c0004e65:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0004e69:	89 ea                	mov    edx,ebp
c0004e6b:	e8 99 fc ff ff       	call   c0004b09 <ld_clust.isra.0>
c0004e70:	ba 00 00 21 50       	mov    edx,0x50210000
c0004e75:	89 c7                	mov    edi,eax
c0004e77:	8d 45 0e             	lea    eax,[ebp+0xe]
c0004e7a:	e8 85 cb ff ff       	call   c0001a04 <st_dword>
c0004e7f:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004e83:	31 c9                	xor    ecx,ecx
c0004e85:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0004e89:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e8d:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004e91:	e8 9c fc ff ff       	call   c0004b32 <st_clust.isra.1>
c0004e96:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004e9a:	31 d2                	xor    edx,edx
c0004e9c:	83 c0 1c             	add    eax,0x1c
c0004e9f:	e8 60 cb ff ff       	call   c0001a04 <st_dword>
c0004ea4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ea8:	85 ff                	test   edi,edi
c0004eaa:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004eae:	74 75                	je     c0004f25 <f_open+0x267>
c0004eb0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004eb4:	31 c9                	xor    ecx,ecx
c0004eb6:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0004eb9:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0004ebc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004ec0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004ec4:	89 fa                	mov    edx,edi
c0004ec6:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004eca:	e8 12 e3 ff ff       	call   c00031e1 <remove_chain>
c0004ecf:	89 c5                	mov    ebp,eax
c0004ed1:	85 c0                	test   eax,eax
c0004ed3:	0f 85 fe 01 00 00    	jne    c00050d7 <f_open+0x419>
c0004ed9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004edd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004ee1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ee5:	4f                   	dec    edi
c0004ee6:	e8 81 d2 ff ff       	call   c000216c <move_window>
c0004eeb:	89 c5                	mov    ebp,eax
c0004eed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ef1:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0004ef4:	eb 27                	jmp    c0004f1d <f_open+0x25f>
c0004ef6:	85 ed                	test   ebp,ebp
c0004ef8:	0f 85 d9 01 00 00    	jne    c00050d7 <f_open+0x419>
c0004efe:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c0004f02:	bd 04 00 00 00       	mov    ebp,0x4
c0004f07:	a8 10                	test   al,0x10
c0004f09:	0f 85 c8 01 00 00    	jne    c00050d7 <f_open+0x419>
c0004f0f:	83 e7 02             	and    edi,0x2
c0004f12:	74 11                	je     c0004f25 <f_open+0x267>
c0004f14:	bd 07 00 00 00       	mov    ebp,0x7
c0004f19:	a8 01                	test   al,0x1
c0004f1b:	eb 02                	jmp    c0004f1f <f_open+0x261>
c0004f1d:	85 ed                	test   ebp,ebp
c0004f1f:	0f 85 b2 01 00 00    	jne    c00050d7 <f_open+0x419>
c0004f25:	f7 c6 08 00 00 00    	test   esi,0x8
c0004f2b:	74 03                	je     c0004f30 <f_open+0x272>
c0004f2d:	83 ce 40             	or     esi,0x40
c0004f30:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004f34:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c0004f37:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c0004f3a:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c0004f3d:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c0004f40:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0004f44:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c0004f47:	8a 02                	mov    al,BYTE PTR [edx]
c0004f49:	3c 04                	cmp    al,0x4
c0004f4b:	75 2a                	jne    c0004f77 <f_open+0x2b9>
c0004f4d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004f51:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0004f56:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004f59:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004f5d:	30 c0                	xor    al,al
c0004f5f:	09 c8                	or     eax,ecx
c0004f61:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004f64:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0004f68:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004f6b:	8d 42 10             	lea    eax,[edx+0x10]
c0004f6e:	89 da                	mov    edx,ebx
c0004f70:	e8 e5 fb ff ff       	call   c0004b5a <init_alloc_info.isra.2>
c0004f75:	eb 1c                	jmp    c0004f93 <f_open+0x2d5>
c0004f77:	89 fa                	mov    edx,edi
c0004f79:	e8 8b fb ff ff       	call   c0004b09 <ld_clust.isra.0>
c0004f7e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004f81:	8d 47 1c             	lea    eax,[edi+0x1c]
c0004f84:	e8 12 ca ff ff       	call   c000199b <ld_dword>
c0004f89:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0004f90:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004f93:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f97:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0004f9e:	89 03                	mov    DWORD PTR [ebx],eax
c0004fa0:	31 d2                	xor    edx,edx
c0004fa2:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004fa6:	b9 00 02 00 00       	mov    ecx,0x200
c0004fab:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0004faf:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0004fb3:	89 f0                	mov    eax,esi
c0004fb5:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0004fbc:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0004fbf:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c0004fc6:	8d 43 50             	lea    eax,[ebx+0x50]
c0004fc9:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0004fd0:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0004fd7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004fdb:	e8 42 ca ff ff       	call   c0001a22 <mem_set>
c0004fe0:	83 e6 20             	and    esi,0x20
c0004fe3:	75 07                	jne    c0004fec <f_open+0x32e>
c0004fe5:	31 ed                	xor    ebp,ebp
c0004fe7:	e9 eb 00 00 00       	jmp    c00050d7 <f_open+0x419>
c0004fec:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004fef:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0004ff2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004ff6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004ffa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ffe:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005002:	74 e1                	je     c0004fe5 <f_open+0x327>
c0005004:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005008:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000500c:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c000500f:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005012:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005016:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0005019:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c000501d:	31 ff                	xor    edi,edi
c000501f:	c1 e5 09             	shl    ebp,0x9
c0005022:	89 ee                	mov    esi,ebp
c0005024:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0005028:	89 f8                	mov    eax,edi
c000502a:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c000502e:	73 22                	jae    c0005052 <f_open+0x394>
c0005030:	89 d8                	mov    eax,ebx
c0005032:	e8 bd dc ff ff       	call   c0002cf4 <get_fat>
c0005037:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c000503b:	89 c2                	mov    edx,eax
c000503d:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c0005041:	83 f8 01             	cmp    eax,0x1
c0005044:	76 10                	jbe    c0005056 <f_open+0x398>
c0005046:	83 f8 ff             	cmp    eax,0xffffffff
c0005049:	75 d9                	jne    c0005024 <f_open+0x366>
c000504b:	bd 01 00 00 00       	mov    ebp,0x1
c0005050:	eb 09                	jmp    c000505b <f_open+0x39d>
c0005052:	31 ed                	xor    ebp,ebp
c0005054:	eb 05                	jmp    c000505b <f_open+0x39d>
c0005056:	bd 02 00 00 00       	mov    ebp,0x2
c000505b:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000505e:	85 ed                	test   ebp,ebp
c0005060:	75 75                	jne    c00050d7 <f_open+0x419>
c0005062:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005066:	25 ff 01 00 00       	and    eax,0x1ff
c000506b:	0f 84 74 ff ff ff    	je     c0004fe5 <f_open+0x327>
c0005071:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005075:	bd 02 00 00 00       	mov    ebp,0x2
c000507a:	89 c8                	mov    eax,ecx
c000507c:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005080:	e8 a2 cb ff ff       	call   c0001c27 <clst2sect>
c0005085:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005089:	89 d7                	mov    edi,edx
c000508b:	09 c7                	or     edi,eax
c000508d:	74 48                	je     c00050d7 <f_open+0x419>
c000508f:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005093:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005097:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000509f:	0f ac fe 09          	shrd   esi,edi,0x9
c00050a3:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00050a7:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00050ab:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00050ae:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00050b2:	83 ec 0c             	sub    esp,0xc
c00050b5:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c00050b8:	6a 01                	push   0x1
c00050ba:	52                   	push   edx
c00050bb:	50                   	push   eax
c00050bc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00050c0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00050c4:	50                   	push   eax
c00050c5:	e8 79 c8 ff ff       	call   c0001943 <disk_read>
c00050ca:	83 c4 20             	add    esp,0x20
c00050cd:	85 c0                	test   eax,eax
c00050cf:	0f 95 c0             	setne  al
c00050d2:	0f b6 c0             	movzx  eax,al
c00050d5:	89 c5                	mov    ebp,eax
c00050d7:	83 ec 0c             	sub    esp,0xc
c00050da:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00050de:	e8 f4 30 00 00       	call   c00081d7 <ff_memfree>
c00050e3:	83 c4 10             	add    esp,0x10
c00050e6:	85 ed                	test   ebp,ebp
c00050e8:	74 06                	je     c00050f0 <f_open+0x432>
c00050ea:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00050f0:	83 c4 7c             	add    esp,0x7c
c00050f3:	89 e8                	mov    eax,ebp
c00050f5:	5b                   	pop    ebx
c00050f6:	5e                   	pop    esi
c00050f7:	5f                   	pop    edi
c00050f8:	5d                   	pop    ebp
c00050f9:	c3                   	ret    

c00050fa <f_read>:
c00050fa:	55                   	push   ebp
c00050fb:	57                   	push   edi
c00050fc:	56                   	push   esi
c00050fd:	53                   	push   ebx
c00050fe:	83 ec 2c             	sub    esp,0x2c
c0005101:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005105:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005109:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000510f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005113:	89 d8                	mov    eax,ebx
c0005115:	e8 77 cf ff ff       	call   c0002091 <validate>
c000511a:	89 c5                	mov    ebp,eax
c000511c:	85 c0                	test   eax,eax
c000511e:	0f 85 4c 02 00 00    	jne    c0005370 <f_read+0x276>
c0005124:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005128:	85 ed                	test   ebp,ebp
c000512a:	0f 85 40 02 00 00    	jne    c0005370 <f_read+0x276>
c0005130:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0005134:	0f 84 31 02 00 00    	je     c000536b <f_read+0x271>
c000513a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000513d:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005140:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0005143:	bf 00 00 00 00       	mov    edi,0x0
c0005148:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c000514b:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c000514f:	89 d1                	mov    ecx,edx
c0005151:	19 f9                	sbb    ecx,edi
c0005153:	0f 83 cf 00 00 00    	jae    c0005228 <f_read+0x12e>
c0005159:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000515d:	e9 c6 00 00 00       	jmp    c0005228 <f_read+0x12e>
c0005162:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005165:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005168:	89 d0                	mov    eax,edx
c000516a:	25 ff 01 00 00       	and    eax,0x1ff
c000516f:	0f 85 c9 01 00 00    	jne    c000533e <f_read+0x244>
c0005175:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005179:	89 d6                	mov    esi,edx
c000517b:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000517f:	89 cf                	mov    edi,ecx
c0005181:	48                   	dec    eax
c0005182:	0f ac fe 09          	shrd   esi,edi,0x9
c0005186:	21 f0                	and    eax,esi
c0005188:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000518c:	0f 84 a6 00 00 00    	je     c0005238 <f_read+0x13e>
c0005192:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005196:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005199:	89 c8                	mov    eax,ecx
c000519b:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000519e:	e8 84 ca ff ff       	call   c0001c27 <clst2sect>
c00051a3:	89 d7                	mov    edi,edx
c00051a5:	09 c7                	or     edi,eax
c00051a7:	0f 84 b4 00 00 00    	je     c0005261 <f_read+0x167>
c00051ad:	31 ff                	xor    edi,edi
c00051af:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00051b3:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00051b6:	01 c6                	add    esi,eax
c00051b8:	11 d7                	adc    edi,edx
c00051ba:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00051c2:	0f 86 fd 00 00 00    	jbe    c00052c5 <f_read+0x1cb>
c00051c8:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00051cc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00051d0:	c1 e8 09             	shr    eax,0x9
c00051d3:	89 04 24             	mov    DWORD PTR [esp],eax
c00051d6:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00051da:	03 14 24             	add    edx,DWORD PTR [esp]
c00051dd:	39 c2                	cmp    edx,eax
c00051df:	76 07                	jbe    c00051e8 <f_read+0xee>
c00051e1:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00051e5:	89 04 24             	mov    DWORD PTR [esp],eax
c00051e8:	83 ec 0c             	sub    esp,0xc
c00051eb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00051ef:	57                   	push   edi
c00051f0:	56                   	push   esi
c00051f1:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00051f5:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00051f9:	50                   	push   eax
c00051fa:	e8 44 c7 ff ff       	call   c0001943 <disk_read>
c00051ff:	83 c4 20             	add    esp,0x20
c0005202:	85 c0                	test   eax,eax
c0005204:	75 6e                	jne    c0005274 <f_read+0x17a>
c0005206:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000520a:	78 7e                	js     c000528a <f_read+0x190>
c000520c:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000520f:	c1 e6 09             	shl    esi,0x9
c0005212:	31 ff                	xor    edi,edi
c0005214:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0005218:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000521c:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0005220:	01 30                	add    DWORD PTR [eax],esi
c0005222:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c0005225:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c0005228:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000522d:	0f 85 2f ff ff ff    	jne    c0005162 <f_read+0x68>
c0005233:	e9 38 01 00 00       	jmp    c0005370 <f_read+0x276>
c0005238:	89 c8                	mov    eax,ecx
c000523a:	09 d0                	or     eax,edx
c000523c:	75 05                	jne    c0005243 <f_read+0x149>
c000523e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005241:	eb 19                	jmp    c000525c <f_read+0x162>
c0005243:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c0005247:	74 09                	je     c0005252 <f_read+0x158>
c0005249:	89 d8                	mov    eax,ebx
c000524b:	e8 f8 c9 ff ff       	call   c0001c48 <clmt_clust>
c0005250:	eb 0a                	jmp    c000525c <f_read+0x162>
c0005252:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005255:	89 d8                	mov    eax,ebx
c0005257:	e8 98 da ff ff       	call   c0002cf4 <get_fat>
c000525c:	83 f8 01             	cmp    eax,0x1
c000525f:	77 0e                	ja     c000526f <f_read+0x175>
c0005261:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005265:	bd 02 00 00 00       	mov    ebp,0x2
c000526a:	e9 01 01 00 00       	jmp    c0005370 <f_read+0x276>
c000526f:	83 f8 ff             	cmp    eax,0xffffffff
c0005272:	75 0e                	jne    c0005282 <f_read+0x188>
c0005274:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005278:	bd 01 00 00 00       	mov    ebp,0x1
c000527d:	e9 ee 00 00 00       	jmp    c0005370 <f_read+0x276>
c0005282:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005285:	e9 08 ff ff ff       	jmp    c0005192 <f_read+0x98>
c000528a:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000528d:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005290:	29 f0                	sub    eax,esi
c0005292:	19 fa                	sbb    edx,edi
c0005294:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0005297:	89 d7                	mov    edi,edx
c0005299:	ba 00 00 00 00       	mov    edx,0x0
c000529e:	89 f9                	mov    ecx,edi
c00052a0:	19 d1                	sbb    ecx,edx
c00052a2:	0f 83 64 ff ff ff    	jae    c000520c <f_read+0x112>
c00052a8:	89 c7                	mov    edi,eax
c00052aa:	8d 53 50             	lea    edx,[ebx+0x50]
c00052ad:	c1 e7 09             	shl    edi,0x9
c00052b0:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00052b4:	b9 00 02 00 00       	mov    ecx,0x200
c00052b9:	01 f8                	add    eax,edi
c00052bb:	e8 4d c7 ff ff       	call   c0001a0d <mem_cpy>
c00052c0:	e9 47 ff ff ff       	jmp    c000520c <f_read+0x112>
c00052c5:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00052c8:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00052cb:	89 04 24             	mov    DWORD PTR [esp],eax
c00052ce:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00052d2:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c00052d6:	75 05                	jne    c00052dd <f_read+0x1e3>
c00052d8:	39 34 24             	cmp    DWORD PTR [esp],esi
c00052db:	74 5b                	je     c0005338 <f_read+0x23e>
c00052dd:	8d 43 50             	lea    eax,[ebx+0x50]
c00052e0:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00052e4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00052e8:	79 2a                	jns    c0005314 <f_read+0x21a>
c00052ea:	83 ec 0c             	sub    esp,0xc
c00052ed:	6a 01                	push   0x1
c00052ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00052f3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00052f7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00052fb:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00052ff:	50                   	push   eax
c0005300:	e8 54 c6 ff ff       	call   c0001959 <disk_write>
c0005305:	83 c4 20             	add    esp,0x20
c0005308:	85 c0                	test   eax,eax
c000530a:	0f 85 64 ff ff ff    	jne    c0005274 <f_read+0x17a>
c0005310:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005314:	83 ec 0c             	sub    esp,0xc
c0005317:	6a 01                	push   0x1
c0005319:	57                   	push   edi
c000531a:	56                   	push   esi
c000531b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000531f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005323:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005327:	50                   	push   eax
c0005328:	e8 16 c6 ff ff       	call   c0001943 <disk_read>
c000532d:	83 c4 20             	add    esp,0x20
c0005330:	85 c0                	test   eax,eax
c0005332:	0f 85 3c ff ff ff    	jne    c0005274 <f_read+0x17a>
c0005338:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000533b:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000533e:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005341:	ba 00 02 00 00       	mov    edx,0x200
c0005346:	25 ff 01 00 00       	and    eax,0x1ff
c000534b:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000534f:	29 c2                	sub    edx,eax
c0005351:	39 d6                	cmp    esi,edx
c0005353:	76 02                	jbe    c0005357 <f_read+0x25d>
c0005355:	89 d6                	mov    esi,edx
c0005357:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c000535b:	89 f1                	mov    ecx,esi
c000535d:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005361:	e8 a7 c6 ff ff       	call   c0001a0d <mem_cpy>
c0005366:	e9 a7 fe ff ff       	jmp    c0005212 <f_read+0x118>
c000536b:	bd 07 00 00 00       	mov    ebp,0x7
c0005370:	83 c4 2c             	add    esp,0x2c
c0005373:	89 e8                	mov    eax,ebp
c0005375:	5b                   	pop    ebx
c0005376:	5e                   	pop    esi
c0005377:	5f                   	pop    edi
c0005378:	5d                   	pop    ebp
c0005379:	c3                   	ret    

c000537a <f_write>:
c000537a:	55                   	push   ebp
c000537b:	57                   	push   edi
c000537c:	56                   	push   esi
c000537d:	53                   	push   ebx
c000537e:	83 ec 2c             	sub    esp,0x2c
c0005381:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005385:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005389:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000538f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005393:	89 d8                	mov    eax,ebx
c0005395:	e8 f7 cc ff ff       	call   c0002091 <validate>
c000539a:	89 c5                	mov    ebp,eax
c000539c:	85 c0                	test   eax,eax
c000539e:	0f 85 86 02 00 00    	jne    c000562a <f_write+0x2b0>
c00053a4:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00053a8:	85 ed                	test   ebp,ebp
c00053aa:	0f 85 7a 02 00 00    	jne    c000562a <f_write+0x2b0>
c00053b0:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00053b4:	0f 84 6b 02 00 00    	je     c0005625 <f_write+0x2ab>
c00053ba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00053be:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00053c1:	0f 84 43 01 00 00    	je     c000550a <f_write+0x190>
c00053c7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00053ca:	89 c1                	mov    ecx,eax
c00053cc:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00053d0:	0f 83 34 01 00 00    	jae    c000550a <f_write+0x190>
c00053d6:	f7 d0                	not    eax
c00053d8:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00053dc:	e9 29 01 00 00       	jmp    c000550a <f_write+0x190>
c00053e1:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00053e4:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00053e7:	89 d0                	mov    eax,edx
c00053e9:	25 ff 01 00 00       	and    eax,0x1ff
c00053ee:	0f 85 00 02 00 00    	jne    c00055f4 <f_write+0x27a>
c00053f4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00053f8:	89 d6                	mov    esi,edx
c00053fa:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00053fe:	89 cf                	mov    edi,ecx
c0005400:	48                   	dec    eax
c0005401:	0f ac fe 09          	shrd   esi,edi,0x9
c0005405:	21 f0                	and    eax,esi
c0005407:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000540b:	0f 84 06 01 00 00    	je     c0005517 <f_write+0x19d>
c0005411:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005415:	0f 88 6e 01 00 00    	js     c0005589 <f_write+0x20f>
c000541b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000541f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005422:	89 c8                	mov    eax,ecx
c0005424:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0005428:	e8 fa c7 ff ff       	call   c0001c27 <clst2sect>
c000542d:	89 d1                	mov    ecx,edx
c000542f:	09 c1                	or     ecx,eax
c0005431:	0f 84 1c 01 00 00    	je     c0005553 <f_write+0x1d9>
c0005437:	31 ff                	xor    edi,edi
c0005439:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000543d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0005441:	01 c6                	add    esi,eax
c0005443:	11 d7                	adc    edi,edx
c0005445:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000544d:	0f 86 63 01 00 00    	jbe    c00055b6 <f_write+0x23c>
c0005453:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005457:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000545b:	c1 e8 09             	shr    eax,0x9
c000545e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005462:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005466:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c000546a:	39 c2                	cmp    edx,eax
c000546c:	76 08                	jbe    c0005476 <f_write+0xfc>
c000546e:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0005472:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005476:	83 ec 0c             	sub    esp,0xc
c0005479:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000547d:	57                   	push   edi
c000547e:	56                   	push   esi
c000547f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005483:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005487:	50                   	push   eax
c0005488:	e8 cc c4 ff ff       	call   c0001959 <disk_write>
c000548d:	83 c4 20             	add    esp,0x20
c0005490:	85 c0                	test   eax,eax
c0005492:	0f 85 ce 00 00 00    	jne    c0005566 <f_write+0x1ec>
c0005498:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000549b:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000549e:	29 f0                	sub    eax,esi
c00054a0:	19 fa                	sbb    edx,edi
c00054a2:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00054a6:	89 d7                	mov    edi,edx
c00054a8:	ba 00 00 00 00       	mov    edx,0x0
c00054ad:	89 f9                	mov    ecx,edi
c00054af:	19 d1                	sbb    ecx,edx
c00054b1:	73 1c                	jae    c00054cf <f_write+0x155>
c00054b3:	89 c7                	mov    edi,eax
c00054b5:	b9 00 02 00 00       	mov    ecx,0x200
c00054ba:	c1 e7 09             	shl    edi,0x9
c00054bd:	8d 43 50             	lea    eax,[ebx+0x50]
c00054c0:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c00054c4:	89 fa                	mov    edx,edi
c00054c6:	e8 42 c5 ff ff       	call   c0001a0d <mem_cpy>
c00054cb:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00054cf:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00054d3:	c1 e6 09             	shl    esi,0x9
c00054d6:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00054da:	31 ff                	xor    edi,edi
c00054dc:	01 30                	add    DWORD PTR [eax],esi
c00054de:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00054e2:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00054e6:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00054e9:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00054ec:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00054ef:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00054f2:	89 c1                	mov    ecx,eax
c00054f4:	39 f2                	cmp    edx,esi
c00054f6:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00054f9:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00054fc:	19 f9                	sbb    ecx,edi
c00054fe:	73 04                	jae    c0005504 <f_write+0x18a>
c0005500:	89 f2                	mov    edx,esi
c0005502:	89 f8                	mov    eax,edi
c0005504:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0005507:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000550a:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000550f:	0f 85 cc fe ff ff    	jne    c00053e1 <f_write+0x67>
c0005515:	eb 2e                	jmp    c0005545 <f_write+0x1cb>
c0005517:	89 c8                	mov    eax,ecx
c0005519:	09 d0                	or     eax,edx
c000551b:	75 0b                	jne    c0005528 <f_write+0x1ae>
c000551d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005520:	31 d2                	xor    edx,edx
c0005522:	85 c0                	test   eax,eax
c0005524:	75 28                	jne    c000554e <f_write+0x1d4>
c0005526:	eb 12                	jmp    c000553a <f_write+0x1c0>
c0005528:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c000552c:	74 09                	je     c0005537 <f_write+0x1bd>
c000552e:	89 d8                	mov    eax,ebx
c0005530:	e8 13 c7 ff ff       	call   c0001c48 <clmt_clust>
c0005535:	eb 0a                	jmp    c0005541 <f_write+0x1c7>
c0005537:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000553a:	89 d8                	mov    eax,ebx
c000553c:	e8 a1 da ff ff       	call   c0002fe2 <create_chain>
c0005541:	85 c0                	test   eax,eax
c0005543:	75 09                	jne    c000554e <f_write+0x1d4>
c0005545:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005549:	e9 dc 00 00 00       	jmp    c000562a <f_write+0x2b0>
c000554e:	83 f8 01             	cmp    eax,0x1
c0005551:	75 0e                	jne    c0005561 <f_write+0x1e7>
c0005553:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005557:	bd 02 00 00 00       	mov    ebp,0x2
c000555c:	e9 c9 00 00 00       	jmp    c000562a <f_write+0x2b0>
c0005561:	83 f8 ff             	cmp    eax,0xffffffff
c0005564:	75 0e                	jne    c0005574 <f_write+0x1fa>
c0005566:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000556a:	bd 01 00 00 00       	mov    ebp,0x1
c000556f:	e9 b6 00 00 00       	jmp    c000562a <f_write+0x2b0>
c0005574:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005577:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000557b:	0f 85 90 fe ff ff    	jne    c0005411 <f_write+0x97>
c0005581:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005584:	e9 88 fe ff ff       	jmp    c0005411 <f_write+0x97>
c0005589:	83 ec 0c             	sub    esp,0xc
c000558c:	8d 43 50             	lea    eax,[ebx+0x50]
c000558f:	6a 01                	push   0x1
c0005591:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005594:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005597:	50                   	push   eax
c0005598:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000559c:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00055a0:	50                   	push   eax
c00055a1:	e8 b3 c3 ff ff       	call   c0001959 <disk_write>
c00055a6:	83 c4 20             	add    esp,0x20
c00055a9:	85 c0                	test   eax,eax
c00055ab:	75 b9                	jne    c0005566 <f_write+0x1ec>
c00055ad:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00055b1:	e9 65 fe ff ff       	jmp    c000541b <f_write+0xa1>
c00055b6:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c00055b9:	75 05                	jne    c00055c0 <f_write+0x246>
c00055bb:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c00055be:	74 2e                	je     c00055ee <f_write+0x274>
c00055c0:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00055c3:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00055c6:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c00055c9:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c00055cc:	73 20                	jae    c00055ee <f_write+0x274>
c00055ce:	83 ec 0c             	sub    esp,0xc
c00055d1:	8d 43 50             	lea    eax,[ebx+0x50]
c00055d4:	6a 01                	push   0x1
c00055d6:	57                   	push   edi
c00055d7:	56                   	push   esi
c00055d8:	50                   	push   eax
c00055d9:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00055dd:	50                   	push   eax
c00055de:	e8 60 c3 ff ff       	call   c0001943 <disk_read>
c00055e3:	83 c4 20             	add    esp,0x20
c00055e6:	85 c0                	test   eax,eax
c00055e8:	0f 85 78 ff ff ff    	jne    c0005566 <f_write+0x1ec>
c00055ee:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00055f1:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00055f4:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00055f7:	ba 00 02 00 00       	mov    edx,0x200
c00055fc:	25 ff 01 00 00       	and    eax,0x1ff
c0005601:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0005605:	29 c2                	sub    edx,eax
c0005607:	39 d6                	cmp    esi,edx
c0005609:	76 02                	jbe    c000560d <f_write+0x293>
c000560b:	89 d6                	mov    esi,edx
c000560d:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c0005611:	89 f1                	mov    ecx,esi
c0005613:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0005617:	e8 f1 c3 ff ff       	call   c0001a0d <mem_cpy>
c000561c:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c0005620:	e9 b1 fe ff ff       	jmp    c00054d6 <f_write+0x15c>
c0005625:	bd 07 00 00 00       	mov    ebp,0x7
c000562a:	83 c4 2c             	add    esp,0x2c
c000562d:	89 e8                	mov    eax,ebp
c000562f:	5b                   	pop    ebx
c0005630:	5e                   	pop    esi
c0005631:	5f                   	pop    edi
c0005632:	5d                   	pop    ebp
c0005633:	c3                   	ret    

c0005634 <f_sync>:
c0005634:	56                   	push   esi
c0005635:	53                   	push   ebx
c0005636:	83 ec 64             	sub    esp,0x64
c0005639:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c000563d:	8d 54 24 10          	lea    edx,[esp+0x10]
c0005641:	89 d8                	mov    eax,ebx
c0005643:	e8 49 ca ff ff       	call   c0002091 <validate>
c0005648:	85 c0                	test   eax,eax
c000564a:	0f 85 ba 01 00 00    	jne    c000580a <f_sync+0x1d6>
c0005650:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005653:	f6 c2 40             	test   dl,0x40
c0005656:	0f 84 ae 01 00 00    	je     c000580a <f_sync+0x1d6>
c000565c:	84 d2                	test   dl,dl
c000565e:	79 33                	jns    c0005693 <f_sync+0x5f>
c0005660:	83 ec 0c             	sub    esp,0xc
c0005663:	8d 43 50             	lea    eax,[ebx+0x50]
c0005666:	6a 01                	push   0x1
c0005668:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000566b:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000566e:	50                   	push   eax
c000566f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005673:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005677:	50                   	push   eax
c0005678:	e8 dc c2 ff ff       	call   c0001959 <disk_write>
c000567d:	83 c4 20             	add    esp,0x20
c0005680:	89 c2                	mov    edx,eax
c0005682:	b8 01 00 00 00       	mov    eax,0x1
c0005687:	85 d2                	test   edx,edx
c0005689:	0f 85 7b 01 00 00    	jne    c000580a <f_sync+0x1d6>
c000568f:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005693:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005697:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000569a:	0f 85 11 01 00 00    	jne    c00057b1 <f_sync+0x17d>
c00056a0:	89 d8                	mov    eax,ebx
c00056a2:	e8 13 d6 ff ff       	call   c0002cba <fill_first_frag>
c00056a7:	85 c0                	test   eax,eax
c00056a9:	0f 85 5b 01 00 00    	jne    c000580a <f_sync+0x1d6>
c00056af:	83 c9 ff             	or     ecx,0xffffffff
c00056b2:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056b5:	89 d8                	mov    eax,ebx
c00056b7:	e8 c9 d5 ff ff       	call   c0002c85 <fill_last_frag>
c00056bc:	85 c0                	test   eax,eax
c00056be:	0f 85 46 01 00 00    	jne    c000580a <f_sync+0x1d6>
c00056c4:	83 ec 0c             	sub    esp,0xc
c00056c7:	68 60 04 00 00       	push   0x460
c00056cc:	e8 f0 2a 00 00       	call   c00081c1 <ff_memalloc>
c00056d1:	83 c4 10             	add    esp,0x10
c00056d4:	89 c6                	mov    esi,eax
c00056d6:	b8 11 00 00 00       	mov    eax,0x11
c00056db:	85 f6                	test   esi,esi
c00056dd:	0f 84 27 01 00 00    	je     c000580a <f_sync+0x1d6>
c00056e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00056e7:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00056ed:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00056f0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00056f3:	89 da                	mov    edx,ebx
c00056f5:	8d 44 24 14          	lea    eax,[esp+0x14]
c00056f9:	e8 af df ff ff       	call   c00036ad <load_obj_xdir>
c00056fe:	85 c0                	test   eax,eax
c0005700:	0f 85 95 00 00 00    	jne    c000579b <f_sync+0x167>
c0005706:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000570a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000570d:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c0005711:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c0005714:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c0005717:	83 ca 01             	or     edx,0x1
c000571a:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c000571d:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0005720:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005723:	83 c0 34             	add    eax,0x34
c0005726:	e8 d9 c2 ff ff       	call   c0001a04 <st_dword>
c000572b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000572f:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005732:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005735:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005738:	83 c0 38             	add    eax,0x38
c000573b:	e8 c7 c2 ff ff       	call   c0001a07 <st_qword>
c0005740:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005743:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005747:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000574a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000574d:	83 c0 28             	add    eax,0x28
c0005750:	e8 b2 c2 ff ff       	call   c0001a07 <st_qword>
c0005755:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005759:	ba 00 00 21 50       	mov    edx,0x50210000
c000575e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005761:	83 c0 0c             	add    eax,0xc
c0005764:	e8 9b c2 ff ff       	call   c0001a04 <st_dword>
c0005769:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000576d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005770:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005774:	31 d2                	xor    edx,edx
c0005776:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005779:	83 c0 10             	add    eax,0x10
c000577c:	e8 83 c2 ff ff       	call   c0001a04 <st_dword>
c0005781:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005785:	e8 62 e1 ff ff       	call   c00038ec <store_xdir>
c000578a:	85 c0                	test   eax,eax
c000578c:	75 0d                	jne    c000579b <f_sync+0x167>
c000578e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005792:	e8 00 eb ff ff       	call   c0004297 <sync_fs>
c0005797:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c000579b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000579f:	83 ec 0c             	sub    esp,0xc
c00057a2:	56                   	push   esi
c00057a3:	e8 2f 2a 00 00       	call   c00081d7 <ff_memfree>
c00057a8:	83 c4 10             	add    esp,0x10
c00057ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00057af:	eb 59                	jmp    c000580a <f_sync+0x1d6>
c00057b1:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c00057b4:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c00057b7:	e8 b0 c9 ff ff       	call   c000216c <move_window>
c00057bc:	85 c0                	test   eax,eax
c00057be:	75 4a                	jne    c000580a <f_sync+0x1d6>
c00057c0:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c00057c3:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c00057c7:	89 f2                	mov    edx,esi
c00057c9:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00057cc:	8b 03                	mov    eax,DWORD PTR [ebx]
c00057ce:	e8 5f f3 ff ff       	call   c0004b32 <st_clust.isra.1>
c00057d3:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057d6:	8d 46 1c             	lea    eax,[esi+0x1c]
c00057d9:	e8 26 c2 ff ff       	call   c0001a04 <st_dword>
c00057de:	8d 46 16             	lea    eax,[esi+0x16]
c00057e1:	ba 00 00 21 50       	mov    edx,0x50210000
c00057e6:	e8 19 c2 ff ff       	call   c0001a04 <st_dword>
c00057eb:	8d 46 12             	lea    eax,[esi+0x12]
c00057ee:	31 d2                	xor    edx,edx
c00057f0:	e8 0b c2 ff ff       	call   c0001a00 <st_word>
c00057f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057f9:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00057fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005801:	e8 91 ea ff ff       	call   c0004297 <sync_fs>
c0005806:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c000580a:	83 c4 64             	add    esp,0x64
c000580d:	5b                   	pop    ebx
c000580e:	5e                   	pop    esi
c000580f:	c3                   	ret    

c0005810 <f_close>:
c0005810:	53                   	push   ebx
c0005811:	83 ec 24             	sub    esp,0x24
c0005814:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005818:	53                   	push   ebx
c0005819:	e8 16 fe ff ff       	call   c0005634 <f_sync>
c000581e:	83 c4 10             	add    esp,0x10
c0005821:	85 c0                	test   eax,eax
c0005823:	75 15                	jne    c000583a <f_close+0x2a>
c0005825:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005829:	89 d8                	mov    eax,ebx
c000582b:	e8 61 c8 ff ff       	call   c0002091 <validate>
c0005830:	85 c0                	test   eax,eax
c0005832:	75 06                	jne    c000583a <f_close+0x2a>
c0005834:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000583a:	83 c4 18             	add    esp,0x18
c000583d:	5b                   	pop    ebx
c000583e:	c3                   	ret    

c000583f <f_lseek>:
c000583f:	55                   	push   ebp
c0005840:	57                   	push   edi
c0005841:	56                   	push   esi
c0005842:	53                   	push   ebx
c0005843:	83 ec 3c             	sub    esp,0x3c
c0005846:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000584a:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c000584e:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005852:	89 04 24             	mov    DWORD PTR [esp],eax
c0005855:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005859:	89 d8                	mov    eax,ebx
c000585b:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c000585f:	e8 2d c8 ff ff       	call   c0002091 <validate>
c0005864:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005868:	85 c0                	test   eax,eax
c000586a:	0f 85 7a 04 00 00    	jne    c0005cea <f_lseek+0x4ab>
c0005870:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005874:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005878:	85 c0                	test   eax,eax
c000587a:	0f 85 6a 04 00 00    	jne    c0005cea <f_lseek+0x4ab>
c0005880:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005884:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005887:	74 0c                	je     c0005895 <f_lseek+0x56>
c0005889:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c000588c:	85 c0                	test   eax,eax
c000588e:	75 1f                	jne    c00058af <f_lseek+0x70>
c0005890:	e9 b5 01 00 00       	jmp    c0005a4a <f_lseek+0x20b>
c0005895:	83 c9 ff             	or     ecx,0xffffffff
c0005898:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000589b:	89 d8                	mov    eax,ebx
c000589d:	e8 e3 d3 ff ff       	call   c0002c85 <fill_last_frag>
c00058a2:	85 c0                	test   eax,eax
c00058a4:	74 e3                	je     c0005889 <f_lseek+0x4a>
c00058a6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00058aa:	e9 3b 04 00 00       	jmp    c0005cea <f_lseek+0x4ab>
c00058af:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c00058b4:	0f 85 ac 00 00 00    	jne    c0005966 <f_lseek+0x127>
c00058ba:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c00058be:	0f 85 a2 00 00 00    	jne    c0005966 <f_lseek+0x127>
c00058c4:	8d 78 04             	lea    edi,[eax+0x4]
c00058c7:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c00058ca:	8b 00                	mov    eax,DWORD PTR [eax]
c00058cc:	be 02 00 00 00       	mov    esi,0x2
c00058d1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00058d5:	85 ed                	test   ebp,ebp
c00058d7:	74 73                	je     c000594c <f_lseek+0x10d>
c00058d9:	89 e9                	mov    ecx,ebp
c00058db:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00058e2:	ff 04 24             	inc    DWORD PTR [esp]
c00058e5:	89 ca                	mov    edx,ecx
c00058e7:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00058eb:	89 d8                	mov    eax,ebx
c00058ed:	e8 02 d4 ff ff       	call   c0002cf4 <get_fat>
c00058f2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00058f6:	83 f8 01             	cmp    eax,0x1
c00058f9:	77 11                	ja     c000590c <f_lseek+0xcd>
c00058fb:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00058ff:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005907:	e9 de 03 00 00       	jmp    c0005cea <f_lseek+0x4ab>
c000590c:	83 f8 ff             	cmp    eax,0xffffffff
c000590f:	75 11                	jne    c0005922 <f_lseek+0xe3>
c0005911:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005915:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c000591d:	e9 c8 03 00 00       	jmp    c0005cea <f_lseek+0x4ab>
c0005922:	8d 51 01             	lea    edx,[ecx+0x1]
c0005925:	89 c1                	mov    ecx,eax
c0005927:	39 c2                	cmp    edx,eax
c0005929:	74 b7                	je     c00058e2 <f_lseek+0xa3>
c000592b:	83 c6 02             	add    esi,0x2
c000592e:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005932:	72 0b                	jb     c000593f <f_lseek+0x100>
c0005934:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005937:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c000593a:	89 0f                	mov    DWORD PTR [edi],ecx
c000593c:	83 c7 08             	add    edi,0x8
c000593f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005943:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005946:	76 04                	jbe    c000594c <f_lseek+0x10d>
c0005948:	89 c5                	mov    ebp,eax
c000594a:	eb 8d                	jmp    c00058d9 <f_lseek+0x9a>
c000594c:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c000594f:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005953:	89 30                	mov    DWORD PTR [eax],esi
c0005955:	0f 87 87 03 00 00    	ja     c0005ce2 <f_lseek+0x4a3>
c000595b:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005961:	e9 84 03 00 00       	jmp    c0005cea <f_lseek+0x4ab>
c0005966:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005969:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000596c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005970:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005974:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005978:	39 04 24             	cmp    DWORD PTR [esp],eax
c000597b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000597f:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005983:	73 0f                	jae    c0005994 <f_lseek+0x155>
c0005985:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005988:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000598c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005990:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005994:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005998:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000599c:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c000599f:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00059a2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00059a6:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00059aa:	0f 84 3a 03 00 00    	je     c0005cea <f_lseek+0x4ab>
c00059b0:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00059b4:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00059b8:	83 c6 ff             	add    esi,0xffffffff
c00059bb:	89 d8                	mov    eax,ebx
c00059bd:	83 d7 ff             	adc    edi,0xffffffff
c00059c0:	89 f2                	mov    edx,esi
c00059c2:	89 f9                	mov    ecx,edi
c00059c4:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c00059c8:	89 34 24             	mov    DWORD PTR [esp],esi
c00059cb:	e8 78 c2 ff ff       	call   c0001c48 <clmt_clust>
c00059d0:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00059d4:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00059d7:	89 c2                	mov    edx,eax
c00059d9:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00059dd:	89 c8                	mov    eax,ecx
c00059df:	e8 43 c2 ff ff       	call   c0001c27 <clst2sect>
c00059e4:	89 d7                	mov    edi,edx
c00059e6:	09 c7                	or     edi,eax
c00059e8:	0f 84 0d ff ff ff    	je     c00058fb <f_lseek+0xbc>
c00059ee:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c00059f2:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00059f8:	0f 84 ec 02 00 00    	je     c0005cea <f_lseek+0x4ab>
c00059fe:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005a02:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005a06:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005a09:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005a0d:	0f ac fe 09          	shrd   esi,edi,0x9
c0005a11:	4d                   	dec    ebp
c0005a12:	31 ff                	xor    edi,edi
c0005a14:	21 ee                	and    esi,ebp
c0005a16:	01 c6                	add    esi,eax
c0005a18:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005a1b:	11 d7                	adc    edi,edx
c0005a1d:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005a20:	39 fa                	cmp    edx,edi
c0005a22:	75 08                	jne    c0005a2c <f_lseek+0x1ed>
c0005a24:	39 f0                	cmp    eax,esi
c0005a26:	0f 84 be 02 00 00    	je     c0005cea <f_lseek+0x4ab>
c0005a2c:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005a2f:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005a33:	0f 89 80 02 00 00    	jns    c0005cb9 <f_lseek+0x47a>
c0005a39:	83 ec 0c             	sub    esp,0xc
c0005a3c:	6a 01                	push   0x1
c0005a3e:	52                   	push   edx
c0005a3f:	50                   	push   eax
c0005a40:	55                   	push   ebp
c0005a41:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005a45:	e9 5a 02 00 00       	jmp    c0005ca4 <f_lseek+0x465>
c0005a4a:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005a4e:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005a51:	74 16                	je     c0005a69 <f_lseek+0x22a>
c0005a53:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005a58:	76 0f                	jbe    c0005a69 <f_lseek+0x22a>
c0005a5a:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005a61:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005a69:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a6c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005a6f:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005a72:	89 c7                	mov    edi,eax
c0005a74:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005a78:	73 0d                	jae    c0005a87 <f_lseek+0x248>
c0005a7a:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005a7e:	75 07                	jne    c0005a87 <f_lseek+0x248>
c0005a80:	89 14 24             	mov    DWORD PTR [esp],edx
c0005a83:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005a87:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005a8a:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005a8d:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005a91:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005a98:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005a9f:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005aa2:	75 09                	jne    c0005aad <f_lseek+0x26e>
c0005aa4:	31 f6                	xor    esi,esi
c0005aa6:	31 ff                	xor    edi,edi
c0005aa8:	e9 af 01 00 00       	jmp    c0005c5c <f_lseek+0x41d>
c0005aad:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005ab1:	89 d7                	mov    edi,edx
c0005ab3:	c1 e1 09             	shl    ecx,0x9
c0005ab6:	09 c7                	or     edi,eax
c0005ab8:	89 cd                	mov    ebp,ecx
c0005aba:	74 6d                	je     c0005b29 <f_lseek+0x2ea>
c0005abc:	83 c0 ff             	add    eax,0xffffffff
c0005abf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005ac3:	83 d2 ff             	adc    edx,0xffffffff
c0005ac6:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005ac9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005acd:	83 c0 ff             	add    eax,0xffffffff
c0005ad0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005ad4:	83 d2 ff             	adc    edx,0xffffffff
c0005ad7:	31 ff                	xor    edi,edi
c0005ad9:	57                   	push   edi
c0005ada:	51                   	push   ecx
c0005adb:	52                   	push   edx
c0005adc:	50                   	push   eax
c0005add:	e8 da 88 01 00       	call   c001e3bc <__udivdi3>
c0005ae2:	83 c4 10             	add    esp,0x10
c0005ae5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005ae9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005aed:	57                   	push   edi
c0005aee:	55                   	push   ebp
c0005aef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005af3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005af7:	e8 c0 88 01 00       	call   c001e3bc <__udivdi3>
c0005afc:	83 c4 10             	add    esp,0x10
c0005aff:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005b03:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005b07:	19 d1                	sbb    ecx,edx
c0005b09:	72 1e                	jb     c0005b29 <f_lseek+0x2ea>
c0005b0b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005b0f:	89 e9                	mov    ecx,ebp
c0005b11:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005b14:	f7 d9                	neg    ecx
c0005b16:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005b19:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005b1d:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005b20:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005b23:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005b27:	eb 28                	jmp    c0005b51 <f_lseek+0x312>
c0005b29:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005b2c:	85 c0                	test   eax,eax
c0005b2e:	75 1e                	jne    c0005b4e <f_lseek+0x30f>
c0005b30:	31 d2                	xor    edx,edx
c0005b32:	89 d8                	mov    eax,ebx
c0005b34:	e8 a9 d4 ff ff       	call   c0002fe2 <create_chain>
c0005b39:	83 f8 01             	cmp    eax,0x1
c0005b3c:	0f 84 b9 fd ff ff    	je     c00058fb <f_lseek+0xbc>
c0005b42:	83 f8 ff             	cmp    eax,0xffffffff
c0005b45:	0f 84 c6 fd ff ff    	je     c0005911 <f_lseek+0xd2>
c0005b4b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005b4e:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005b51:	85 c0                	test   eax,eax
c0005b53:	0f 84 4b ff ff ff    	je     c0005aa4 <f_lseek+0x265>
c0005b59:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005b5d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005b65:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005b68:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005b6c:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005b6f:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005b72:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005b76:	0f 83 9d 00 00 00    	jae    c0005c19 <f_lseek+0x3da>
c0005b7c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005b80:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005b84:	29 34 24             	sub    DWORD PTR [esp],esi
c0005b87:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005b8b:	01 f2                	add    edx,esi
c0005b8d:	11 f9                	adc    ecx,edi
c0005b8f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005b93:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005b97:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005b9a:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005b9d:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005ba0:	f6 c1 02             	test   cl,0x2
c0005ba3:	74 35                	je     c0005bda <f_lseek+0x39b>
c0005ba5:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005ba9:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005bac:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005baf:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005bb3:	73 16                	jae    c0005bcb <f_lseek+0x38c>
c0005bb5:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005bb9:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005bbd:	88 ca                	mov    dl,cl
c0005bbf:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005bc2:	83 ca 40             	or     edx,0x40
c0005bc5:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005bc8:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005bcb:	89 c2                	mov    edx,eax
c0005bcd:	89 d8                	mov    eax,ebx
c0005bcf:	e8 0e d4 ff ff       	call   c0002fe2 <create_chain>
c0005bd4:	85 c0                	test   eax,eax
c0005bd6:	75 0b                	jne    c0005be3 <f_lseek+0x3a4>
c0005bd8:	eb 30                	jmp    c0005c0a <f_lseek+0x3cb>
c0005bda:	89 c2                	mov    edx,eax
c0005bdc:	89 d8                	mov    eax,ebx
c0005bde:	e8 11 d1 ff ff       	call   c0002cf4 <get_fat>
c0005be3:	83 f8 ff             	cmp    eax,0xffffffff
c0005be6:	0f 84 25 fd ff ff    	je     c0005911 <f_lseek+0xd2>
c0005bec:	83 f8 01             	cmp    eax,0x1
c0005bef:	0f 86 06 fd ff ff    	jbe    c00058fb <f_lseek+0xbc>
c0005bf5:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005bf9:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005bfc:	0f 86 f9 fc ff ff    	jbe    c00058fb <f_lseek+0xbc>
c0005c02:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005c05:	e9 5b ff ff ff       	jmp    c0005b65 <f_lseek+0x326>
c0005c0a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005c11:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005c19:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005c1c:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005c20:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005c23:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005c26:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005c29:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005c2f:	0f 84 6f fe ff ff    	je     c0005aa4 <f_lseek+0x265>
c0005c35:	89 c2                	mov    edx,eax
c0005c37:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005c3b:	e8 e7 bf ff ff       	call   c0001c27 <clst2sect>
c0005c40:	89 d7                	mov    edi,edx
c0005c42:	09 c7                	or     edi,eax
c0005c44:	0f 84 b1 fc ff ff    	je     c00058fb <f_lseek+0xbc>
c0005c4a:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005c4e:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005c51:	0f ac fe 09          	shrd   esi,edi,0x9
c0005c55:	c1 ef 09             	shr    edi,0x9
c0005c58:	01 c6                	add    esi,eax
c0005c5a:	11 d7                	adc    edi,edx
c0005c5c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005c5f:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005c62:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005c65:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005c68:	19 d1                	sbb    ecx,edx
c0005c6a:	73 0a                	jae    c0005c76 <f_lseek+0x437>
c0005c6c:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005c6f:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005c72:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005c76:	a9 ff 01 00 00       	test   eax,0x1ff
c0005c7b:	74 6d                	je     c0005cea <f_lseek+0x4ab>
c0005c7d:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005c80:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005c83:	39 fa                	cmp    edx,edi
c0005c85:	75 04                	jne    c0005c8b <f_lseek+0x44c>
c0005c87:	39 f0                	cmp    eax,esi
c0005c89:	74 5f                	je     c0005cea <f_lseek+0x4ab>
c0005c8b:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005c8e:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005c92:	79 25                	jns    c0005cb9 <f_lseek+0x47a>
c0005c94:	83 ec 0c             	sub    esp,0xc
c0005c97:	6a 01                	push   0x1
c0005c99:	52                   	push   edx
c0005c9a:	50                   	push   eax
c0005c9b:	55                   	push   ebp
c0005c9c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005ca0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005ca4:	50                   	push   eax
c0005ca5:	e8 af bc ff ff       	call   c0001959 <disk_write>
c0005caa:	83 c4 20             	add    esp,0x20
c0005cad:	85 c0                	test   eax,eax
c0005caf:	0f 85 5c fc ff ff    	jne    c0005911 <f_lseek+0xd2>
c0005cb5:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005cb9:	83 ec 0c             	sub    esp,0xc
c0005cbc:	6a 01                	push   0x1
c0005cbe:	57                   	push   edi
c0005cbf:	56                   	push   esi
c0005cc0:	55                   	push   ebp
c0005cc1:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005cc5:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005cc9:	50                   	push   eax
c0005cca:	e8 74 bc ff ff       	call   c0001943 <disk_read>
c0005ccf:	83 c4 20             	add    esp,0x20
c0005cd2:	85 c0                	test   eax,eax
c0005cd4:	0f 85 37 fc ff ff    	jne    c0005911 <f_lseek+0xd2>
c0005cda:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005cdd:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005ce0:	eb 08                	jmp    c0005cea <f_lseek+0x4ab>
c0005ce2:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005cea:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005cee:	83 c4 3c             	add    esp,0x3c
c0005cf1:	5b                   	pop    ebx
c0005cf2:	5e                   	pop    esi
c0005cf3:	5f                   	pop    edi
c0005cf4:	5d                   	pop    ebp
c0005cf5:	c3                   	ret    

c0005cf6 <f_opendir>:
c0005cf6:	56                   	push   esi
c0005cf7:	b8 09 00 00 00       	mov    eax,0x9
c0005cfc:	53                   	push   ebx
c0005cfd:	83 ec 24             	sub    esp,0x24
c0005d00:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005d04:	85 db                	test   ebx,ebx
c0005d06:	0f 84 e6 00 00 00    	je     c0005df2 <f_opendir+0xfc>
c0005d0c:	31 c9                	xor    ecx,ecx
c0005d0e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005d12:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005d16:	e8 03 c7 ff ff       	call   c000241e <mount_volume>
c0005d1b:	85 c0                	test   eax,eax
c0005d1d:	0f 85 c9 00 00 00    	jne    c0005dec <f_opendir+0xf6>
c0005d23:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005d27:	83 ec 0c             	sub    esp,0xc
c0005d2a:	89 03                	mov    DWORD PTR [ebx],eax
c0005d2c:	68 60 04 00 00       	push   0x460
c0005d31:	e8 8b 24 00 00       	call   c00081c1 <ff_memalloc>
c0005d36:	83 c4 10             	add    esp,0x10
c0005d39:	89 c6                	mov    esi,eax
c0005d3b:	b8 11 00 00 00       	mov    eax,0x11
c0005d40:	85 f6                	test   esi,esi
c0005d42:	0f 84 aa 00 00 00    	je     c0005df2 <f_opendir+0xfc>
c0005d48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005d4c:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005d52:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005d55:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005d58:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005d5c:	89 d8                	mov    eax,ebx
c0005d5e:	e8 31 ee ff ff       	call   c0004b94 <follow_path>
c0005d63:	85 c0                	test   eax,eax
c0005d65:	75 61                	jne    c0005dc8 <f_opendir+0xd2>
c0005d67:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0005d6b:	78 46                	js     c0005db3 <f_opendir+0xbd>
c0005d6d:	b8 05 00 00 00       	mov    eax,0x5
c0005d72:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0005d76:	74 50                	je     c0005dc8 <f_opendir+0xd2>
c0005d78:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005d7c:	8a 01                	mov    al,BYTE PTR [ecx]
c0005d7e:	3c 04                	cmp    al,0x4
c0005d80:	75 26                	jne    c0005da8 <f_opendir+0xb2>
c0005d82:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005d85:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d88:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005d8b:	30 d2                	xor    dl,dl
c0005d8d:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0005d91:	09 c2                	or     edx,eax
c0005d93:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0005d96:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0005d99:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005d9c:	89 da                	mov    edx,ebx
c0005d9e:	8d 41 10             	lea    eax,[ecx+0x10]
c0005da1:	e8 b4 ed ff ff       	call   c0004b5a <init_alloc_info.isra.2>
c0005da6:	eb 0b                	jmp    c0005db3 <f_opendir+0xbd>
c0005da8:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0005dab:	e8 59 ed ff ff       	call   c0004b09 <ld_clust.isra.0>
c0005db0:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005db3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005db7:	31 d2                	xor    edx,edx
c0005db9:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005dbd:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005dc1:	89 d8                	mov    eax,ebx
c0005dc3:	e8 22 d1 ff ff       	call   c0002eea <dir_sdi>
c0005dc8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005dcc:	83 ec 0c             	sub    esp,0xc
c0005dcf:	56                   	push   esi
c0005dd0:	e8 02 24 00 00       	call   c00081d7 <ff_memfree>
c0005dd5:	83 c4 10             	add    esp,0x10
c0005dd8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005ddc:	83 f8 04             	cmp    eax,0x4
c0005ddf:	74 06                	je     c0005de7 <f_opendir+0xf1>
c0005de1:	85 c0                	test   eax,eax
c0005de3:	74 0d                	je     c0005df2 <f_opendir+0xfc>
c0005de5:	eb 05                	jmp    c0005dec <f_opendir+0xf6>
c0005de7:	b8 05 00 00 00       	mov    eax,0x5
c0005dec:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005df2:	83 c4 24             	add    esp,0x24
c0005df5:	5b                   	pop    ebx
c0005df6:	5e                   	pop    esi
c0005df7:	c3                   	ret    

c0005df8 <f_closedir>:
c0005df8:	53                   	push   ebx
c0005df9:	83 ec 18             	sub    esp,0x18
c0005dfc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0005e00:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005e04:	89 d8                	mov    eax,ebx
c0005e06:	e8 86 c2 ff ff       	call   c0002091 <validate>
c0005e0b:	85 c0                	test   eax,eax
c0005e0d:	75 06                	jne    c0005e15 <f_closedir+0x1d>
c0005e0f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005e15:	83 c4 18             	add    esp,0x18
c0005e18:	5b                   	pop    ebx
c0005e19:	c3                   	ret    

c0005e1a <f_readdir>:
c0005e1a:	57                   	push   edi
c0005e1b:	56                   	push   esi
c0005e1c:	53                   	push   ebx
c0005e1d:	83 ec 20             	sub    esp,0x20
c0005e20:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005e24:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0005e28:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005e2c:	89 d8                	mov    eax,ebx
c0005e2e:	e8 5e c2 ff ff       	call   c0002091 <validate>
c0005e33:	85 c0                	test   eax,eax
c0005e35:	75 77                	jne    c0005eae <f_readdir+0x94>
c0005e37:	85 ff                	test   edi,edi
c0005e39:	75 0b                	jne    c0005e46 <f_readdir+0x2c>
c0005e3b:	31 d2                	xor    edx,edx
c0005e3d:	89 d8                	mov    eax,ebx
c0005e3f:	e8 a6 d0 ff ff       	call   c0002eea <dir_sdi>
c0005e44:	eb 68                	jmp    c0005eae <f_readdir+0x94>
c0005e46:	83 ec 0c             	sub    esp,0xc
c0005e49:	68 60 04 00 00       	push   0x460
c0005e4e:	e8 6e 23 00 00       	call   c00081c1 <ff_memalloc>
c0005e53:	83 c4 10             	add    esp,0x10
c0005e56:	89 c6                	mov    esi,eax
c0005e58:	b8 11 00 00 00       	mov    eax,0x11
c0005e5d:	85 f6                	test   esi,esi
c0005e5f:	74 4d                	je     c0005eae <f_readdir+0x94>
c0005e61:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e65:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005e6b:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005e6e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005e71:	31 d2                	xor    edx,edx
c0005e73:	89 d8                	mov    eax,ebx
c0005e75:	e8 80 d8 ff ff       	call   c00036fa <dir_read>
c0005e7a:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0005e7f:	75 19                	jne    c0005e9a <f_readdir+0x80>
c0005e81:	89 fa                	mov    edx,edi
c0005e83:	89 d8                	mov    eax,ebx
c0005e85:	e8 7e ea ff ff       	call   c0004908 <get_fileinfo>
c0005e8a:	31 d2                	xor    edx,edx
c0005e8c:	89 d8                	mov    eax,ebx
c0005e8e:	e8 af d5 ff ff       	call   c0003442 <dir_next>
c0005e93:	83 f8 04             	cmp    eax,0x4
c0005e96:	75 02                	jne    c0005e9a <f_readdir+0x80>
c0005e98:	31 c0                	xor    eax,eax
c0005e9a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005e9e:	83 ec 0c             	sub    esp,0xc
c0005ea1:	56                   	push   esi
c0005ea2:	e8 30 23 00 00       	call   c00081d7 <ff_memfree>
c0005ea7:	83 c4 10             	add    esp,0x10
c0005eaa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005eae:	83 c4 20             	add    esp,0x20
c0005eb1:	5b                   	pop    ebx
c0005eb2:	5e                   	pop    esi
c0005eb3:	5f                   	pop    edi
c0005eb4:	c3                   	ret    

c0005eb5 <f_stat>:
c0005eb5:	57                   	push   edi
c0005eb6:	31 c9                	xor    ecx,ecx
c0005eb8:	56                   	push   esi
c0005eb9:	53                   	push   ebx
c0005eba:	83 ec 50             	sub    esp,0x50
c0005ebd:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0005ec1:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005ec5:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005ec9:	e8 50 c5 ff ff       	call   c000241e <mount_volume>
c0005ece:	89 c3                	mov    ebx,eax
c0005ed0:	85 c0                	test   eax,eax
c0005ed2:	75 67                	jne    c0005f3b <f_stat+0x86>
c0005ed4:	83 ec 0c             	sub    esp,0xc
c0005ed7:	bb 11 00 00 00       	mov    ebx,0x11
c0005edc:	68 60 04 00 00       	push   0x460
c0005ee1:	e8 db 22 00 00       	call   c00081c1 <ff_memalloc>
c0005ee6:	83 c4 10             	add    esp,0x10
c0005ee9:	89 c6                	mov    esi,eax
c0005eeb:	85 c0                	test   eax,eax
c0005eed:	74 4c                	je     c0005f3b <f_stat+0x86>
c0005eef:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005ef3:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005ef9:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005efc:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005eff:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0005f03:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005f07:	e8 88 ec ff ff       	call   c0004b94 <follow_path>
c0005f0c:	89 c3                	mov    ebx,eax
c0005f0e:	85 c0                	test   eax,eax
c0005f10:	75 1d                	jne    c0005f2f <f_stat+0x7a>
c0005f12:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0005f17:	78 11                	js     c0005f2a <f_stat+0x75>
c0005f19:	85 ff                	test   edi,edi
c0005f1b:	74 12                	je     c0005f2f <f_stat+0x7a>
c0005f1d:	89 fa                	mov    edx,edi
c0005f1f:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005f23:	e8 e0 e9 ff ff       	call   c0004908 <get_fileinfo>
c0005f28:	eb 05                	jmp    c0005f2f <f_stat+0x7a>
c0005f2a:	bb 06 00 00 00       	mov    ebx,0x6
c0005f2f:	83 ec 0c             	sub    esp,0xc
c0005f32:	56                   	push   esi
c0005f33:	e8 9f 22 00 00       	call   c00081d7 <ff_memfree>
c0005f38:	83 c4 10             	add    esp,0x10
c0005f3b:	83 c4 50             	add    esp,0x50
c0005f3e:	89 d8                	mov    eax,ebx
c0005f40:	5b                   	pop    ebx
c0005f41:	5e                   	pop    esi
c0005f42:	5f                   	pop    edi
c0005f43:	c3                   	ret    

c0005f44 <f_getfree>:
c0005f44:	55                   	push   ebp
c0005f45:	31 c9                	xor    ecx,ecx
c0005f47:	57                   	push   edi
c0005f48:	56                   	push   esi
c0005f49:	53                   	push   ebx
c0005f4a:	83 ec 5c             	sub    esp,0x5c
c0005f4d:	8d 54 24 24          	lea    edx,[esp+0x24]
c0005f51:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005f55:	e8 c4 c4 ff ff       	call   c000241e <mount_volume>
c0005f5a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005f5e:	85 c0                	test   eax,eax
c0005f60:	0f 85 9d 01 00 00    	jne    c0006103 <f_getfree+0x1bf>
c0005f66:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005f6a:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0005f6e:	89 02                	mov    DWORD PTR [edx],eax
c0005f70:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0005f73:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0005f76:	8d 71 fe             	lea    esi,[ecx-0x2]
c0005f79:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005f7d:	39 f2                	cmp    edx,esi
c0005f7f:	77 0b                	ja     c0005f8c <f_getfree+0x48>
c0005f81:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0005f85:	89 10                	mov    DWORD PTR [eax],edx
c0005f87:	e9 77 01 00 00       	jmp    c0006103 <f_getfree+0x1bf>
c0005f8c:	8a 10                	mov    dl,BYTE PTR [eax]
c0005f8e:	80 fa 01             	cmp    dl,0x1
c0005f91:	75 3a                	jne    c0005fcd <f_getfree+0x89>
c0005f93:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0005f97:	be 02 00 00 00       	mov    esi,0x2
c0005f9c:	31 db                	xor    ebx,ebx
c0005f9e:	89 f2                	mov    edx,esi
c0005fa0:	8d 44 24 28          	lea    eax,[esp+0x28]
c0005fa4:	e8 4b cd ff ff       	call   c0002cf4 <get_fat>
c0005fa9:	83 f8 ff             	cmp    eax,0xffffffff
c0005fac:	0f 84 28 01 00 00    	je     c00060da <f_getfree+0x196>
c0005fb2:	83 f8 01             	cmp    eax,0x1
c0005fb5:	0f 84 29 01 00 00    	je     c00060e4 <f_getfree+0x1a0>
c0005fbb:	83 d3 00             	adc    ebx,0x0
c0005fbe:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005fc2:	46                   	inc    esi
c0005fc3:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c0005fc6:	77 d6                	ja     c0005f9e <f_getfree+0x5a>
c0005fc8:	e9 25 01 00 00       	jmp    c00060f2 <f_getfree+0x1ae>
c0005fcd:	80 fa 04             	cmp    dl,0x4
c0005fd0:	0f 85 88 00 00 00    	jne    c000605e <f_getfree+0x11a>
c0005fd6:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0005fd9:	31 ed                	xor    ebp,ebp
c0005fdb:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0005fde:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0005fe2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005fe6:	31 db                	xor    ebx,ebx
c0005fe8:	85 ed                	test   ebp,ebp
c0005fea:	75 3f                	jne    c000602b <f_getfree+0xe7>
c0005fec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005ff0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005ff4:	83 c0 01             	add    eax,0x1
c0005ff7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0005ffb:	83 d2 00             	adc    edx,0x0
c0005ffe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0006002:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0006006:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000600a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000600e:	e8 59 c1 ff ff       	call   c000216c <move_window>
c0006013:	85 c0                	test   eax,eax
c0006015:	0f 85 d3 00 00 00    	jne    c00060ee <f_getfree+0x1aa>
c000601b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000601f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006023:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006027:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000602b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000602f:	8d 4e f8             	lea    ecx,[esi-0x8]
c0006032:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c0006036:	89 cf                	mov    edi,ecx
c0006038:	85 f6                	test   esi,esi
c000603a:	74 12                	je     c000604e <f_getfree+0x10a>
c000603c:	88 c1                	mov    cl,al
c000603e:	83 e1 01             	and    ecx,0x1
c0006041:	80 f9 01             	cmp    cl,0x1
c0006044:	83 d3 00             	adc    ebx,0x0
c0006047:	d0 e8                	shr    al,1
c0006049:	4e                   	dec    esi
c000604a:	39 fe                	cmp    esi,edi
c000604c:	75 ea                	jne    c0006038 <f_getfree+0xf4>
c000604e:	45                   	inc    ebp
c000604f:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0006055:	85 f6                	test   esi,esi
c0006057:	75 8f                	jne    c0005fe8 <f_getfree+0xa4>
c0006059:	e9 94 00 00 00       	jmp    c00060f2 <f_getfree+0x1ae>
c000605e:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0006061:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0006064:	31 f6                	xor    esi,esi
c0006066:	31 db                	xor    ebx,ebx
c0006068:	85 f6                	test   esi,esi
c000606a:	75 1b                	jne    c0006087 <f_getfree+0x143>
c000606c:	89 d7                	mov    edi,edx
c000606e:	89 cd                	mov    ebp,ecx
c0006070:	83 c7 01             	add    edi,0x1
c0006073:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006077:	83 d5 00             	adc    ebp,0x0
c000607a:	e8 ed c0 ff ff       	call   c000216c <move_window>
c000607f:	85 c0                	test   eax,eax
c0006081:	75 6b                	jne    c00060ee <f_getfree+0x1aa>
c0006083:	89 fa                	mov    edx,edi
c0006085:	89 e9                	mov    ecx,ebp
c0006087:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000608b:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000608f:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006093:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006096:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000609a:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000609e:	75 11                	jne    c00060b1 <f_getfree+0x16d>
c00060a0:	e8 e9 b8 ff ff       	call   c000198e <ld_word>
c00060a5:	66 83 f8 01          	cmp    ax,0x1
c00060a9:	83 d3 00             	adc    ebx,0x0
c00060ac:	83 c6 02             	add    esi,0x2
c00060af:	eb 13                	jmp    c00060c4 <f_getfree+0x180>
c00060b1:	e8 e5 b8 ff ff       	call   c000199b <ld_dword>
c00060b6:	25 ff ff ff 0f       	and    eax,0xfffffff
c00060bb:	83 f8 01             	cmp    eax,0x1
c00060be:	83 d3 00             	adc    ebx,0x0
c00060c1:	83 c6 04             	add    esi,0x4
c00060c4:	81 e6 ff 01 00 00    	and    esi,0x1ff
c00060ca:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00060ce:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00060d2:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c00060d6:	75 90                	jne    c0006068 <f_getfree+0x124>
c00060d8:	eb 18                	jmp    c00060f2 <f_getfree+0x1ae>
c00060da:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00060e2:	eb 0e                	jmp    c00060f2 <f_getfree+0x1ae>
c00060e4:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00060ec:	eb 04                	jmp    c00060f2 <f_getfree+0x1ae>
c00060ee:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00060f2:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00060f6:	89 18                	mov    DWORD PTR [eax],ebx
c00060f8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00060fc:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00060ff:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c0006103:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006107:	83 c4 5c             	add    esp,0x5c
c000610a:	5b                   	pop    ebx
c000610b:	5e                   	pop    esi
c000610c:	5f                   	pop    edi
c000610d:	5d                   	pop    ebp
c000610e:	c3                   	ret    

c000610f <f_truncate>:
c000610f:	56                   	push   esi
c0006110:	53                   	push   ebx
c0006111:	83 ec 14             	sub    esp,0x14
c0006114:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006118:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000611c:	89 d8                	mov    eax,ebx
c000611e:	e8 6e bf ff ff       	call   c0002091 <validate>
c0006123:	89 c6                	mov    esi,eax
c0006125:	85 c0                	test   eax,eax
c0006127:	0f 85 d2 00 00 00    	jne    c00061ff <f_truncate+0xf0>
c000612d:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c0006131:	85 f6                	test   esi,esi
c0006133:	0f 85 c6 00 00 00    	jne    c00061ff <f_truncate+0xf0>
c0006139:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c000613d:	0f 84 b7 00 00 00    	je     c00061fa <f_truncate+0xeb>
c0006143:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006146:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0006149:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000614c:	89 d1                	mov    ecx,edx
c000614e:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c0006151:	0f 83 a8 00 00 00    	jae    c00061ff <f_truncate+0xf0>
c0006157:	09 c2                	or     edx,eax
c0006159:	75 15                	jne    c0006170 <f_truncate+0x61>
c000615b:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000615e:	31 c9                	xor    ecx,ecx
c0006160:	89 d8                	mov    eax,ebx
c0006162:	e8 7a d0 ff ff       	call   c00031e1 <remove_chain>
c0006167:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000616e:	eb 35                	jmp    c00061a5 <f_truncate+0x96>
c0006170:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006173:	89 d8                	mov    eax,ebx
c0006175:	e8 7a cb ff ff       	call   c0002cf4 <get_fat>
c000617a:	89 c2                	mov    edx,eax
c000617c:	b8 01 00 00 00       	mov    eax,0x1
c0006181:	83 fa ff             	cmp    edx,0xffffffff
c0006184:	74 1f                	je     c00061a5 <f_truncate+0x96>
c0006186:	b8 02 00 00 00       	mov    eax,0x2
c000618b:	83 fa 01             	cmp    edx,0x1
c000618e:	74 15                	je     c00061a5 <f_truncate+0x96>
c0006190:	31 c0                	xor    eax,eax
c0006192:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006196:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c0006199:	76 0a                	jbe    c00061a5 <f_truncate+0x96>
c000619b:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000619e:	89 d8                	mov    eax,ebx
c00061a0:	e8 3c d0 ff ff       	call   c00031e1 <remove_chain>
c00061a5:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00061a8:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00061ab:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00061ae:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00061b1:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c00061b4:	83 ca 40             	or     edx,0x40
c00061b7:	85 c0                	test   eax,eax
c00061b9:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c00061bc:	75 35                	jne    c00061f3 <f_truncate+0xe4>
c00061be:	84 d2                	test   dl,dl
c00061c0:	79 3d                	jns    c00061ff <f_truncate+0xf0>
c00061c2:	83 ec 0c             	sub    esp,0xc
c00061c5:	8d 43 50             	lea    eax,[ebx+0x50]
c00061c8:	6a 01                	push   0x1
c00061ca:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00061cd:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00061d0:	50                   	push   eax
c00061d1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00061d5:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00061d9:	50                   	push   eax
c00061da:	e8 7a b7 ff ff       	call   c0001959 <disk_write>
c00061df:	83 c4 20             	add    esp,0x20
c00061e2:	85 c0                	test   eax,eax
c00061e4:	75 08                	jne    c00061ee <f_truncate+0xdf>
c00061e6:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00061ea:	31 f6                	xor    esi,esi
c00061ec:	eb 11                	jmp    c00061ff <f_truncate+0xf0>
c00061ee:	b8 01 00 00 00       	mov    eax,0x1
c00061f3:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00061f6:	89 c6                	mov    esi,eax
c00061f8:	eb 05                	jmp    c00061ff <f_truncate+0xf0>
c00061fa:	be 07 00 00 00       	mov    esi,0x7
c00061ff:	89 f0                	mov    eax,esi
c0006201:	83 c4 14             	add    esp,0x14
c0006204:	5b                   	pop    ebx
c0006205:	5e                   	pop    esi
c0006206:	c3                   	ret    

c0006207 <f_unlink>:
c0006207:	56                   	push   esi
c0006208:	b9 02 00 00 00       	mov    ecx,0x2
c000620d:	53                   	push   ebx
c000620e:	81 ec e4 00 00 00    	sub    esp,0xe4
c0006214:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0006218:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c000621f:	e8 fa c1 ff ff       	call   c000241e <mount_volume>
c0006224:	85 c0                	test   eax,eax
c0006226:	0f 85 55 01 00 00    	jne    c0006381 <f_unlink+0x17a>
c000622c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006230:	83 ec 0c             	sub    esp,0xc
c0006233:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0006237:	68 60 04 00 00       	push   0x460
c000623c:	e8 80 1f 00 00       	call   c00081c1 <ff_memalloc>
c0006241:	83 c4 10             	add    esp,0x10
c0006244:	89 c3                	mov    ebx,eax
c0006246:	b8 11 00 00 00       	mov    eax,0x11
c000624b:	85 db                	test   ebx,ebx
c000624d:	0f 84 2e 01 00 00    	je     c0006381 <f_unlink+0x17a>
c0006253:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006257:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c000625d:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006260:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006263:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c000626a:	8d 44 24 48          	lea    eax,[esp+0x48]
c000626e:	e8 21 e9 ff ff       	call   c0004b94 <follow_path>
c0006273:	85 c0                	test   eax,eax
c0006275:	0f 85 f2 00 00 00    	jne    c000636d <f_unlink+0x166>
c000627b:	b8 06 00 00 00       	mov    eax,0x6
c0006280:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c0006288:	0f 88 df 00 00 00    	js     c000636d <f_unlink+0x166>
c000628e:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006293:	74 0a                	je     c000629f <f_unlink+0x98>
c0006295:	b8 07 00 00 00       	mov    eax,0x7
c000629a:	e9 ce 00 00 00       	jmp    c000636d <f_unlink+0x166>
c000629f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00062a3:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00062a7:	8a 02                	mov    al,BYTE PTR [edx]
c00062a9:	3c 04                	cmp    al,0x4
c00062ab:	75 12                	jne    c00062bf <f_unlink+0xb8>
c00062ad:	8d 42 10             	lea    eax,[edx+0x10]
c00062b0:	8d 54 24 20          	lea    edx,[esp+0x20]
c00062b4:	e8 a1 e8 ff ff       	call   c0004b5a <init_alloc_info.isra.2>
c00062b9:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00062bd:	eb 0e                	jmp    c00062cd <f_unlink+0xc6>
c00062bf:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c00062c6:	e8 3e e8 ff ff       	call   c0004b09 <ld_clust.isra.0>
c00062cb:	89 c6                	mov    esi,eax
c00062cd:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c00062d2:	75 12                	jne    c00062e6 <f_unlink+0xdf>
c00062d4:	8d 44 24 48          	lea    eax,[esp+0x48]
c00062d8:	e8 94 d6 ff ff       	call   c0003971 <dir_remove>
c00062dd:	85 c0                	test   eax,eax
c00062df:	74 6c                	je     c000634d <f_unlink+0x146>
c00062e1:	e9 87 00 00 00       	jmp    c000636d <f_unlink+0x166>
c00062e6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00062ea:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00062f1:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00062f8:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00062fb:	75 21                	jne    c000631e <f_unlink+0x117>
c00062fd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0006301:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0006305:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c000630c:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c0006313:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c0006317:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c000631e:	31 d2                	xor    edx,edx
c0006320:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0006327:	e8 be cb ff ff       	call   c0002eea <dir_sdi>
c000632c:	85 c0                	test   eax,eax
c000632e:	75 3d                	jne    c000636d <f_unlink+0x166>
c0006330:	31 d2                	xor    edx,edx
c0006332:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0006339:	e8 bc d3 ff ff       	call   c00036fa <dir_read>
c000633e:	85 c0                	test   eax,eax
c0006340:	0f 84 4f ff ff ff    	je     c0006295 <f_unlink+0x8e>
c0006346:	83 f8 04             	cmp    eax,0x4
c0006349:	75 22                	jne    c000636d <f_unlink+0x166>
c000634b:	eb 87                	jmp    c00062d4 <f_unlink+0xcd>
c000634d:	85 f6                	test   esi,esi
c000634f:	75 0b                	jne    c000635c <f_unlink+0x155>
c0006351:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006355:	e8 3d df ff ff       	call   c0004297 <sync_fs>
c000635a:	eb 11                	jmp    c000636d <f_unlink+0x166>
c000635c:	31 c9                	xor    ecx,ecx
c000635e:	89 f2                	mov    edx,esi
c0006360:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006364:	e8 78 ce ff ff       	call   c00031e1 <remove_chain>
c0006369:	85 c0                	test   eax,eax
c000636b:	74 e4                	je     c0006351 <f_unlink+0x14a>
c000636d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006371:	83 ec 0c             	sub    esp,0xc
c0006374:	53                   	push   ebx
c0006375:	e8 5d 1e 00 00       	call   c00081d7 <ff_memfree>
c000637a:	83 c4 10             	add    esp,0x10
c000637d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006381:	81 c4 e4 00 00 00    	add    esp,0xe4
c0006387:	5b                   	pop    ebx
c0006388:	5e                   	pop    esi
c0006389:	c3                   	ret    

c000638a <f_mkdir>:
c000638a:	57                   	push   edi
c000638b:	b9 02 00 00 00       	mov    ecx,0x2
c0006390:	56                   	push   esi
c0006391:	53                   	push   ebx
c0006392:	83 c4 80             	add    esp,0xffffff80
c0006395:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006399:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c00063a0:	e8 79 c0 ff ff       	call   c000241e <mount_volume>
c00063a5:	89 c3                	mov    ebx,eax
c00063a7:	85 c0                	test   eax,eax
c00063a9:	0f 85 fe 01 00 00    	jne    c00065ad <f_mkdir+0x223>
c00063af:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00063b3:	bb 11 00 00 00       	mov    ebx,0x11
c00063b8:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00063bc:	83 ec 0c             	sub    esp,0xc
c00063bf:	68 60 04 00 00       	push   0x460
c00063c4:	e8 f8 1d 00 00       	call   c00081c1 <ff_memalloc>
c00063c9:	83 c4 10             	add    esp,0x10
c00063cc:	89 c7                	mov    edi,eax
c00063ce:	85 c0                	test   eax,eax
c00063d0:	0f 84 d7 01 00 00    	je     c00065ad <f_mkdir+0x223>
c00063d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00063da:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c00063e0:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c00063e3:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00063e6:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00063ed:	8d 44 24 34          	lea    eax,[esp+0x34]
c00063f1:	e8 9e e7 ff ff       	call   c0004b94 <follow_path>
c00063f6:	89 c3                	mov    ebx,eax
c00063f8:	85 c0                	test   eax,eax
c00063fa:	74 3e                	je     c000643a <f_mkdir+0xb0>
c00063fc:	83 f8 04             	cmp    eax,0x4
c00063ff:	75 3e                	jne    c000643f <f_mkdir+0xb5>
c0006401:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006405:	31 d2                	xor    edx,edx
c0006407:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000640b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000640f:	e8 ce cb ff ff       	call   c0002fe2 <create_chain>
c0006414:	89 c6                	mov    esi,eax
c0006416:	85 c0                	test   eax,eax
c0006418:	74 0c                	je     c0006426 <f_mkdir+0x9c>
c000641a:	bb 02 00 00 00       	mov    ebx,0x2
c000641f:	83 f8 01             	cmp    eax,0x1
c0006422:	74 07                	je     c000642b <f_mkdir+0xa1>
c0006424:	eb 2a                	jmp    c0006450 <f_mkdir+0xc6>
c0006426:	bb 07 00 00 00       	mov    ebx,0x7
c000642b:	31 c9                	xor    ecx,ecx
c000642d:	89 f2                	mov    edx,esi
c000642f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006433:	e8 a9 cd ff ff       	call   c00031e1 <remove_chain>
c0006438:	eb 05                	jmp    c000643f <f_mkdir+0xb5>
c000643a:	bb 08 00 00 00       	mov    ebx,0x8
c000643f:	83 ec 0c             	sub    esp,0xc
c0006442:	57                   	push   edi
c0006443:	e8 8f 1d 00 00       	call   c00081d7 <ff_memfree>
c0006448:	83 c4 10             	add    esp,0x10
c000644b:	e9 5d 01 00 00       	jmp    c00065ad <f_mkdir+0x223>
c0006450:	bb 01 00 00 00       	mov    ebx,0x1
c0006455:	83 f8 ff             	cmp    eax,0xffffffff
c0006458:	74 d1                	je     c000642b <f_mkdir+0xa1>
c000645a:	89 f2                	mov    edx,esi
c000645c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006460:	e8 c4 ce ff ff       	call   c0003329 <dir_clear>
c0006465:	89 c3                	mov    ebx,eax
c0006467:	85 c0                	test   eax,eax
c0006469:	75 c0                	jne    c000642b <f_mkdir+0xa1>
c000646b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000646f:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006472:	74 69                	je     c00064dd <f_mkdir+0x153>
c0006474:	b9 0b 00 00 00       	mov    ecx,0xb
c0006479:	83 c0 54             	add    eax,0x54
c000647c:	ba 20 00 00 00       	mov    edx,0x20
c0006481:	e8 9c b5 ff ff       	call   c0001a22 <mem_set>
c0006486:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000648a:	ba 00 00 21 50       	mov    edx,0x50210000
c000648f:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006493:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c0006497:	83 c0 6a             	add    eax,0x6a
c000649a:	e8 65 b5 ff ff       	call   c0001a04 <st_dword>
c000649f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064a3:	89 f1                	mov    ecx,esi
c00064a5:	8d 50 54             	lea    edx,[eax+0x54]
c00064a8:	e8 85 e6 ff ff       	call   c0004b32 <st_clust.isra.1>
c00064ad:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064b1:	b9 20 00 00 00       	mov    ecx,0x20
c00064b6:	8d 50 54             	lea    edx,[eax+0x54]
c00064b9:	83 c0 74             	add    eax,0x74
c00064bc:	e8 4c b5 ff ff       	call   c0001a0d <mem_cpy>
c00064c1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064c5:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c00064c9:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c00064cd:	8d 50 74             	lea    edx,[eax+0x74]
c00064d0:	e8 5d e6 ff ff       	call   c0004b32 <st_clust.isra.1>
c00064d5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064d9:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00064dd:	8d 44 24 34          	lea    eax,[esp+0x34]
c00064e1:	e8 2f db ff ff       	call   c0004015 <dir_register>
c00064e6:	89 c3                	mov    ebx,eax
c00064e8:	85 c0                	test   eax,eax
c00064ea:	0f 85 3b ff ff ff    	jne    c000642b <f_mkdir+0xa1>
c00064f0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064f4:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00064f7:	75 74                	jne    c000656d <f_mkdir+0x1e3>
c00064f9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00064fc:	ba 00 00 21 50       	mov    edx,0x50210000
c0006501:	83 c0 0c             	add    eax,0xc
c0006504:	e8 fb b4 ff ff       	call   c0001a04 <st_dword>
c0006509:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000650d:	89 f2                	mov    edx,esi
c000650f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006512:	83 c0 34             	add    eax,0x34
c0006515:	e8 ea b4 ff ff       	call   c0001a04 <st_dword>
c000651a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000651e:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0006522:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006525:	c1 e2 09             	shl    edx,0x9
c0006528:	83 c0 38             	add    eax,0x38
c000652b:	e8 d4 b4 ff ff       	call   c0001a04 <st_dword>
c0006530:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006534:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0006538:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000653b:	c1 e2 09             	shl    edx,0x9
c000653e:	83 c0 28             	add    eax,0x28
c0006541:	e8 be b4 ff ff       	call   c0001a04 <st_dword>
c0006546:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000654a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000654d:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c0006551:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006554:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c0006558:	8d 44 24 34          	lea    eax,[esp+0x34]
c000655c:	e8 8b d3 ff ff       	call   c00038ec <store_xdir>
c0006561:	89 c3                	mov    ebx,eax
c0006563:	85 c0                	test   eax,eax
c0006565:	0f 85 d4 fe ff ff    	jne    c000643f <f_mkdir+0xb5>
c000656b:	eb 30                	jmp    c000659d <f_mkdir+0x213>
c000656d:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006571:	ba 00 00 21 50       	mov    edx,0x50210000
c0006576:	83 c0 16             	add    eax,0x16
c0006579:	e8 86 b4 ff ff       	call   c0001a04 <st_dword>
c000657e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006582:	89 f1                	mov    ecx,esi
c0006584:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0006588:	e8 a5 e5 ff ff       	call   c0004b32 <st_clust.isra.1>
c000658d:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006591:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006595:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006599:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000659d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065a1:	e8 f1 dc ff ff       	call   c0004297 <sync_fs>
c00065a6:	89 c3                	mov    ebx,eax
c00065a8:	e9 92 fe ff ff       	jmp    c000643f <f_mkdir+0xb5>
c00065ad:	83 ec 80             	sub    esp,0xffffff80
c00065b0:	89 d8                	mov    eax,ebx
c00065b2:	5b                   	pop    ebx
c00065b3:	5e                   	pop    esi
c00065b4:	5f                   	pop    edi
c00065b5:	c3                   	ret    

c00065b6 <f_rename>:
c00065b6:	55                   	push   ebp
c00065b7:	57                   	push   edi
c00065b8:	56                   	push   esi
c00065b9:	53                   	push   ebx
c00065ba:	81 ec fc 00 00 00    	sub    esp,0xfc
c00065c0:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c00065c7:	e8 a4 b9 ff ff       	call   c0001f70 <get_ldnumber>
c00065cc:	b9 02 00 00 00       	mov    ecx,0x2
c00065d1:	8d 54 24 14          	lea    edx,[esp+0x14]
c00065d5:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c00065dc:	e8 3d be ff ff       	call   c000241e <mount_volume>
c00065e1:	85 c0                	test   eax,eax
c00065e3:	0f 85 b5 02 00 00    	jne    c000689e <f_rename+0x2e8>
c00065e9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00065ed:	83 ec 0c             	sub    esp,0xc
c00065f0:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00065f4:	68 60 04 00 00       	push   0x460
c00065f9:	e8 c3 1b 00 00       	call   c00081c1 <ff_memalloc>
c00065fe:	83 c4 10             	add    esp,0x10
c0006601:	89 c3                	mov    ebx,eax
c0006603:	b8 11 00 00 00       	mov    eax,0x11
c0006608:	85 db                	test   ebx,ebx
c000660a:	0f 84 8e 02 00 00    	je     c000689e <f_rename+0x2e8>
c0006610:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006614:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c000661a:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c000661d:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006620:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c0006627:	8d 44 24 58          	lea    eax,[esp+0x58]
c000662b:	e8 64 e5 ff ff       	call   c0004b94 <follow_path>
c0006630:	85 c0                	test   eax,eax
c0006632:	0f 85 52 02 00 00    	jne    c000688a <f_rename+0x2d4>
c0006638:	b8 06 00 00 00       	mov    eax,0x6
c000663d:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c0006645:	0f 85 3f 02 00 00    	jne    c000688a <f_rename+0x2d4>
c000664b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000664f:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006652:	0f 85 05 01 00 00    	jne    c000675d <f_rename+0x1a7>
c0006658:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000665b:	b9 40 00 00 00       	mov    ecx,0x40
c0006660:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006664:	e8 a4 b3 ff ff       	call   c0001a0d <mem_cpy>
c0006669:	b9 4c 00 00 00       	mov    ecx,0x4c
c000666e:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006672:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006679:	e8 8f b3 ff ff       	call   c0001a0d <mem_cpy>
c000667e:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006685:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000668c:	e8 03 e5 ff ff       	call   c0004b94 <follow_path>
c0006691:	85 c0                	test   eax,eax
c0006693:	75 29                	jne    c00066be <f_rename+0x108>
c0006695:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006699:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c00066a0:	74 0a                	je     c00066ac <f_rename+0xf6>
c00066a2:	b8 08 00 00 00       	mov    eax,0x8
c00066a7:	e9 de 01 00 00       	jmp    c000688a <f_rename+0x2d4>
c00066ac:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c00066b3:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c00066ba:	75 e6                	jne    c00066a2 <f_rename+0xec>
c00066bc:	eb 09                	jmp    c00066c7 <f_rename+0x111>
c00066be:	83 f8 04             	cmp    eax,0x4
c00066c1:	0f 85 c3 01 00 00    	jne    c000688a <f_rename+0x2d4>
c00066c7:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00066ce:	e8 42 d9 ff ff       	call   c0004015 <dir_register>
c00066d3:	85 c0                	test   eax,eax
c00066d5:	0f 85 af 01 00 00    	jne    c000688a <f_rename+0x2d4>
c00066db:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066df:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00066e2:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00066e5:	89 c5                	mov    ebp,eax
c00066e7:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c00066ea:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00066ee:	8d 46 24             	lea    eax,[esi+0x24]
c00066f1:	e8 98 b2 ff ff       	call   c000198e <ld_word>
c00066f6:	b9 40 00 00 00       	mov    ecx,0x40
c00066fb:	89 c7                	mov    edi,eax
c00066fd:	8d 54 24 18          	lea    edx,[esp+0x18]
c0006701:	89 f0                	mov    eax,esi
c0006703:	e8 05 b3 ff ff       	call   c0001a0d <mem_cpy>
c0006708:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000670c:	89 e9                	mov    ecx,ebp
c000670e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006711:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c0006714:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0006718:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000671c:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000671f:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c0006722:	0f b7 d7             	movzx  edx,di
c0006725:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006728:	83 c0 24             	add    eax,0x24
c000672b:	e8 d0 b2 ff ff       	call   c0001a00 <st_word>
c0006730:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006734:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006737:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c000673a:	a8 10                	test   al,0x10
c000673c:	75 06                	jne    c0006744 <f_rename+0x18e>
c000673e:	83 c8 20             	or     eax,0x20
c0006741:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0006744:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000674b:	e8 9c d1 ff ff       	call   c00038ec <store_xdir>
c0006750:	85 c0                	test   eax,eax
c0006752:	0f 84 1c 01 00 00    	je     c0006874 <f_rename+0x2be>
c0006758:	e9 2d 01 00 00       	jmp    c000688a <f_rename+0x2d4>
c000675d:	b9 20 00 00 00       	mov    ecx,0x20
c0006762:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006769:	8d 44 24 18          	lea    eax,[esp+0x18]
c000676d:	e8 9b b2 ff ff       	call   c0001a0d <mem_cpy>
c0006772:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006777:	8d 54 24 58          	lea    edx,[esp+0x58]
c000677b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006782:	e8 86 b2 ff ff       	call   c0001a0d <mem_cpy>
c0006787:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c000678e:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006795:	e8 fa e3 ff ff       	call   c0004b94 <follow_path>
c000679a:	85 c0                	test   eax,eax
c000679c:	75 27                	jne    c00067c5 <f_rename+0x20f>
c000679e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00067a2:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c00067a9:	0f 85 f3 fe ff ff    	jne    c00066a2 <f_rename+0xec>
c00067af:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c00067b6:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c00067bd:	0f 85 df fe ff ff    	jne    c00066a2 <f_rename+0xec>
c00067c3:	eb 09                	jmp    c00067ce <f_rename+0x218>
c00067c5:	83 f8 04             	cmp    eax,0x4
c00067c8:	0f 85 bc 00 00 00    	jne    c000688a <f_rename+0x2d4>
c00067ce:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00067d5:	e8 3b d8 ff ff       	call   c0004015 <dir_register>
c00067da:	85 c0                	test   eax,eax
c00067dc:	0f 85 a8 00 00 00    	jne    c000688a <f_rename+0x2d4>
c00067e2:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c00067e9:	b9 13 00 00 00       	mov    ecx,0x13
c00067ee:	8d 46 0d             	lea    eax,[esi+0xd]
c00067f1:	8d 54 24 25          	lea    edx,[esp+0x25]
c00067f5:	e8 13 b2 ff ff       	call   c0001a0d <mem_cpy>
c00067fa:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00067fe:	a8 10                	test   al,0x10
c0006800:	75 03                	jne    c0006805 <f_rename+0x24f>
c0006802:	83 c8 20             	or     eax,0x20
c0006805:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006808:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000680c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006810:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006814:	74 5e                	je     c0006874 <f_rename+0x2be>
c0006816:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c000681d:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006821:	74 51                	je     c0006874 <f_rename+0x2be>
c0006823:	89 f2                	mov    edx,esi
c0006825:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006829:	8a 07                	mov    al,BYTE PTR [edi]
c000682b:	e8 d9 e2 ff ff       	call   c0004b09 <ld_clust.isra.0>
c0006830:	89 c2                	mov    edx,eax
c0006832:	89 f8                	mov    eax,edi
c0006834:	e8 ee b3 ff ff       	call   c0001c27 <clst2sect>
c0006839:	89 c6                	mov    esi,eax
c000683b:	89 d1                	mov    ecx,edx
c000683d:	b8 02 00 00 00       	mov    eax,0x2
c0006842:	09 f2                	or     edx,esi
c0006844:	74 44                	je     c000688a <f_rename+0x2d4>
c0006846:	89 f2                	mov    edx,esi
c0006848:	89 f8                	mov    eax,edi
c000684a:	e8 1d b9 ff ff       	call   c000216c <move_window>
c000684f:	85 c0                	test   eax,eax
c0006851:	75 37                	jne    c000688a <f_rename+0x2d4>
c0006853:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006857:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c000685b:	75 17                	jne    c0006874 <f_rename+0x2be>
c000685d:	8d 50 74             	lea    edx,[eax+0x74]
c0006860:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006867:	e8 c6 e2 ff ff       	call   c0004b32 <st_clust.isra.1>
c000686c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006870:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006874:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006878:	e8 f4 d0 ff ff       	call   c0003971 <dir_remove>
c000687d:	85 c0                	test   eax,eax
c000687f:	75 09                	jne    c000688a <f_rename+0x2d4>
c0006881:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006885:	e8 0d da ff ff       	call   c0004297 <sync_fs>
c000688a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000688e:	83 ec 0c             	sub    esp,0xc
c0006891:	53                   	push   ebx
c0006892:	e8 40 19 00 00       	call   c00081d7 <ff_memfree>
c0006897:	83 c4 10             	add    esp,0x10
c000689a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000689e:	81 c4 fc 00 00 00    	add    esp,0xfc
c00068a4:	5b                   	pop    ebx
c00068a5:	5e                   	pop    esi
c00068a6:	5f                   	pop    edi
c00068a7:	5d                   	pop    ebp
c00068a8:	c3                   	ret    

c00068a9 <f_chmod>:
c00068a9:	57                   	push   edi
c00068aa:	b9 02 00 00 00       	mov    ecx,0x2
c00068af:	56                   	push   esi
c00068b0:	53                   	push   ebx
c00068b1:	83 ec 60             	sub    esp,0x60
c00068b4:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c00068b8:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c00068bc:	8d 54 24 10          	lea    edx,[esp+0x10]
c00068c0:	8d 44 24 70          	lea    eax,[esp+0x70]
c00068c4:	e8 55 bb ff ff       	call   c000241e <mount_volume>
c00068c9:	85 c0                	test   eax,eax
c00068cb:	0f 85 af 00 00 00    	jne    c0006980 <f_chmod+0xd7>
c00068d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00068d5:	83 ec 0c             	sub    esp,0xc
c00068d8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00068dc:	68 60 04 00 00       	push   0x460
c00068e1:	e8 db 18 00 00       	call   c00081c1 <ff_memalloc>
c00068e6:	83 c4 10             	add    esp,0x10
c00068e9:	89 c6                	mov    esi,eax
c00068eb:	b8 11 00 00 00       	mov    eax,0x11
c00068f0:	85 f6                	test   esi,esi
c00068f2:	0f 84 88 00 00 00    	je     c0006980 <f_chmod+0xd7>
c00068f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00068fc:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006902:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006905:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006908:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c000690c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006910:	e8 7f e2 ff ff       	call   c0004b94 <follow_path>
c0006915:	85 c0                	test   eax,eax
c0006917:	75 53                	jne    c000696c <f_chmod+0xc3>
c0006919:	b8 06 00 00 00       	mov    eax,0x6
c000691e:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006923:	75 47                	jne    c000696c <f_chmod+0xc3>
c0006925:	89 f9                	mov    ecx,edi
c0006927:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000692b:	83 e1 27             	and    ecx,0x27
c000692e:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006931:	75 1d                	jne    c0006950 <f_chmod+0xa7>
c0006933:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006936:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006939:	21 cb                	and    ebx,ecx
c000693b:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c000693e:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006941:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006945:	e8 a2 cf ff ff       	call   c00038ec <store_xdir>
c000694a:	85 c0                	test   eax,eax
c000694c:	75 1e                	jne    c000696c <f_chmod+0xc3>
c000694e:	eb 13                	jmp    c0006963 <f_chmod+0xba>
c0006950:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006954:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006957:	21 cb                	and    ebx,ecx
c0006959:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c000695c:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c000695f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006963:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006967:	e8 2b d9 ff ff       	call   c0004297 <sync_fs>
c000696c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006970:	83 ec 0c             	sub    esp,0xc
c0006973:	56                   	push   esi
c0006974:	e8 5e 18 00 00       	call   c00081d7 <ff_memfree>
c0006979:	83 c4 10             	add    esp,0x10
c000697c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006980:	83 c4 60             	add    esp,0x60
c0006983:	5b                   	pop    ebx
c0006984:	5e                   	pop    esi
c0006985:	5f                   	pop    edi
c0006986:	c3                   	ret    

c0006987 <f_utime>:
c0006987:	56                   	push   esi
c0006988:	b9 02 00 00 00       	mov    ecx,0x2
c000698d:	53                   	push   ebx
c000698e:	83 ec 64             	sub    esp,0x64
c0006991:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006995:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006999:	8d 44 24 70          	lea    eax,[esp+0x70]
c000699d:	e8 7c ba ff ff       	call   c000241e <mount_volume>
c00069a2:	85 c0                	test   eax,eax
c00069a4:	0f 85 b5 00 00 00    	jne    c0006a5f <f_utime+0xd8>
c00069aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069ae:	83 ec 0c             	sub    esp,0xc
c00069b1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00069b5:	68 60 04 00 00       	push   0x460
c00069ba:	e8 02 18 00 00       	call   c00081c1 <ff_memalloc>
c00069bf:	83 c4 10             	add    esp,0x10
c00069c2:	89 c3                	mov    ebx,eax
c00069c4:	b8 11 00 00 00       	mov    eax,0x11
c00069c9:	85 db                	test   ebx,ebx
c00069cb:	0f 84 8e 00 00 00    	je     c0006a5f <f_utime+0xd8>
c00069d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069d5:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00069db:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00069de:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00069e1:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c00069e5:	8d 44 24 14          	lea    eax,[esp+0x14]
c00069e9:	e8 a6 e1 ff ff       	call   c0004b94 <follow_path>
c00069ee:	85 c0                	test   eax,eax
c00069f0:	75 59                	jne    c0006a4b <f_utime+0xc4>
c00069f2:	b8 06 00 00 00       	mov    eax,0x6
c00069f7:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c00069fc:	75 4d                	jne    c0006a4b <f_utime+0xc4>
c00069fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a02:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006a06:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006a0a:	c1 e2 10             	shl    edx,0x10
c0006a0d:	09 ca                	or     edx,ecx
c0006a0f:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006a12:	75 1a                	jne    c0006a2e <f_utime+0xa7>
c0006a14:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006a17:	83 c0 0c             	add    eax,0xc
c0006a1a:	e8 e5 af ff ff       	call   c0001a04 <st_dword>
c0006a1f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006a23:	e8 c4 ce ff ff       	call   c00038ec <store_xdir>
c0006a28:	85 c0                	test   eax,eax
c0006a2a:	75 1f                	jne    c0006a4b <f_utime+0xc4>
c0006a2c:	eb 14                	jmp    c0006a42 <f_utime+0xbb>
c0006a2e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006a32:	83 c0 16             	add    eax,0x16
c0006a35:	e8 ca af ff ff       	call   c0001a04 <st_dword>
c0006a3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a3e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006a42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a46:	e8 4c d8 ff ff       	call   c0004297 <sync_fs>
c0006a4b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006a4f:	83 ec 0c             	sub    esp,0xc
c0006a52:	53                   	push   ebx
c0006a53:	e8 7f 17 00 00       	call   c00081d7 <ff_memfree>
c0006a58:	83 c4 10             	add    esp,0x10
c0006a5b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006a5f:	83 c4 64             	add    esp,0x64
c0006a62:	5b                   	pop    ebx
c0006a63:	5e                   	pop    esi
c0006a64:	c3                   	ret    

c0006a65 <f_getlabel>:
c0006a65:	55                   	push   ebp
c0006a66:	31 c9                	xor    ecx,ecx
c0006a68:	57                   	push   edi
c0006a69:	56                   	push   esi
c0006a6a:	53                   	push   ebx
c0006a6b:	83 ec 6c             	sub    esp,0x6c
c0006a6e:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006a72:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006a79:	e8 a0 b9 ff ff       	call   c000241e <mount_volume>
c0006a7e:	89 c6                	mov    esi,eax
c0006a80:	85 c0                	test   eax,eax
c0006a82:	0f 85 c1 01 00 00    	jne    c0006c49 <f_getlabel+0x1e4>
c0006a88:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006a90:	0f 84 5f 01 00 00    	je     c0006bf5 <f_getlabel+0x190>
c0006a96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a9a:	31 d2                	xor    edx,edx
c0006a9c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006aa0:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006aa8:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006aac:	e8 39 c4 ff ff       	call   c0002eea <dir_sdi>
c0006ab1:	85 c0                	test   eax,eax
c0006ab3:	0f 85 2d 01 00 00    	jne    c0006be6 <f_getlabel+0x181>
c0006ab9:	ba 01 00 00 00       	mov    edx,0x1
c0006abe:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006ac2:	e8 33 cc ff ff       	call   c00036fa <dir_read>
c0006ac7:	85 c0                	test   eax,eax
c0006ac9:	0f 85 17 01 00 00    	jne    c0006be6 <f_getlabel+0x181>
c0006acf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ad3:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006ad6:	74 09                	je     c0006ae1 <f_getlabel+0x7c>
c0006ad8:	31 db                	xor    ebx,ebx
c0006ada:	31 c9                	xor    ecx,ecx
c0006adc:	e9 c8 00 00 00       	jmp    c0006ba9 <f_getlabel+0x144>
c0006ae1:	31 ed                	xor    ebp,ebp
c0006ae3:	31 db                	xor    ebx,ebx
c0006ae5:	31 ff                	xor    edi,edi
c0006ae7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006aeb:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006aef:	39 fa                	cmp    edx,edi
c0006af1:	76 4b                	jbe    c0006b3e <f_getlabel+0xd9>
c0006af3:	47                   	inc    edi
c0006af4:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006af7:	01 d0                	add    eax,edx
c0006af9:	e8 90 ae ff ff       	call   c000198e <ld_word>
c0006afe:	66 85 ed             	test   bp,bp
c0006b01:	75 0d                	jne    c0006b10 <f_getlabel+0xab>
c0006b03:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006b09:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006b0e:	76 28                	jbe    c0006b38 <f_getlabel+0xd3>
c0006b10:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006b17:	89 e9                	mov    ecx,ebp
c0006b19:	01 da                	add    edx,ebx
c0006b1b:	c1 e1 10             	shl    ecx,0x10
c0006b1e:	0f b7 c0             	movzx  eax,ax
c0006b21:	09 c8                	or     eax,ecx
c0006b23:	b9 04 00 00 00       	mov    ecx,0x4
c0006b28:	e8 01 b0 ff ff       	call   c0001b2e <put_utf>
c0006b2d:	84 c0                	test   al,al
c0006b2f:	74 0b                	je     c0006b3c <f_getlabel+0xd7>
c0006b31:	0f b6 c0             	movzx  eax,al
c0006b34:	01 c3                	add    ebx,eax
c0006b36:	31 c0                	xor    eax,eax
c0006b38:	89 c5                	mov    ebp,eax
c0006b3a:	eb ab                	jmp    c0006ae7 <f_getlabel+0x82>
c0006b3c:	31 db                	xor    ebx,ebx
c0006b3e:	66 85 ed             	test   bp,bp
c0006b41:	74 02                	je     c0006b45 <f_getlabel+0xe0>
c0006b43:	31 db                	xor    ebx,ebx
c0006b45:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006b4c:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006b50:	e9 a0 00 00 00       	jmp    c0006bf5 <f_getlabel+0x190>
c0006b55:	83 ff 0b             	cmp    edi,0xb
c0006b58:	74 11                	je     c0006b6b <f_getlabel+0x106>
c0006b5a:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006b5f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b63:	8d 79 02             	lea    edi,[ecx+0x2]
c0006b66:	c1 e0 08             	shl    eax,0x8
c0006b69:	09 c2                	or     edx,eax
c0006b6b:	0f b7 d2             	movzx  edx,dx
c0006b6e:	50                   	push   eax
c0006b6f:	50                   	push   eax
c0006b70:	68 b5 01 00 00       	push   0x1b5
c0006b75:	52                   	push   edx
c0006b76:	e8 03 17 00 00       	call   c000827e <ff_oem2uni>
c0006b7b:	83 c4 10             	add    esp,0x10
c0006b7e:	66 85 c0             	test   ax,ax
c0006b81:	74 46                	je     c0006bc9 <f_getlabel+0x164>
c0006b83:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006b8a:	0f b7 c0             	movzx  eax,ax
c0006b8d:	01 da                	add    edx,ebx
c0006b8f:	b9 04 00 00 00       	mov    ecx,0x4
c0006b94:	e8 95 af ff ff       	call   c0001b2e <put_utf>
c0006b99:	84 c0                	test   al,al
c0006b9b:	74 2c                	je     c0006bc9 <f_getlabel+0x164>
c0006b9d:	0f b6 c0             	movzx  eax,al
c0006ba0:	01 c3                	add    ebx,eax
c0006ba2:	83 ff 0b             	cmp    edi,0xb
c0006ba5:	74 24                	je     c0006bcb <f_getlabel+0x166>
c0006ba7:	89 f9                	mov    ecx,edi
c0006ba9:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006bad:	8d 79 01             	lea    edi,[ecx+0x1]
c0006bb0:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006bb5:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006bba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006bbe:	e8 9f ae ff ff       	call   c0001a62 <dbc_1st>
c0006bc3:	85 c0                	test   eax,eax
c0006bc5:	74 a4                	je     c0006b6b <f_getlabel+0x106>
c0006bc7:	eb 8c                	jmp    c0006b55 <f_getlabel+0xf0>
c0006bc9:	31 db                	xor    ebx,ebx
c0006bcb:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006bd2:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006bd5:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006bdc:	74 17                	je     c0006bf5 <f_getlabel+0x190>
c0006bde:	4b                   	dec    ebx
c0006bdf:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006be2:	74 ee                	je     c0006bd2 <f_getlabel+0x16d>
c0006be4:	eb 0f                	jmp    c0006bf5 <f_getlabel+0x190>
c0006be6:	83 f8 04             	cmp    eax,0x4
c0006be9:	75 5c                	jne    c0006c47 <f_getlabel+0x1e2>
c0006beb:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006bf2:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006bf5:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006bfd:	74 4a                	je     c0006c49 <f_getlabel+0x1e4>
c0006bff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c03:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006c06:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006c09:	e8 5e b5 ff ff       	call   c000216c <move_window>
c0006c0e:	89 c6                	mov    esi,eax
c0006c10:	85 c0                	test   eax,eax
c0006c12:	75 35                	jne    c0006c49 <f_getlabel+0x1e4>
c0006c14:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006c18:	b8 43 00 00 00       	mov    eax,0x43
c0006c1d:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006c1f:	80 f9 03             	cmp    cl,0x3
c0006c22:	74 0f                	je     c0006c33 <f_getlabel+0x1ce>
c0006c24:	31 c0                	xor    eax,eax
c0006c26:	80 f9 04             	cmp    cl,0x4
c0006c29:	0f 94 c0             	sete   al
c0006c2c:	48                   	dec    eax
c0006c2d:	83 e0 c3             	and    eax,0xffffffc3
c0006c30:	83 c0 64             	add    eax,0x64
c0006c33:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006c37:	e8 5f ad ff ff       	call   c000199b <ld_dword>
c0006c3c:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006c43:	89 07                	mov    DWORD PTR [edi],eax
c0006c45:	eb 02                	jmp    c0006c49 <f_getlabel+0x1e4>
c0006c47:	89 c6                	mov    esi,eax
c0006c49:	83 c4 6c             	add    esp,0x6c
c0006c4c:	89 f0                	mov    eax,esi
c0006c4e:	5b                   	pop    ebx
c0006c4f:	5e                   	pop    esi
c0006c50:	5f                   	pop    edi
c0006c51:	5d                   	pop    ebp
c0006c52:	c3                   	ret    

c0006c53 <f_setlabel>:
c0006c53:	56                   	push   esi
c0006c54:	b9 02 00 00 00       	mov    ecx,0x2
c0006c59:	53                   	push   ebx
c0006c5a:	83 ec 74             	sub    esp,0x74
c0006c5d:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006c61:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006c68:	e8 b1 b7 ff ff       	call   c000241e <mount_volume>
c0006c6d:	89 c6                	mov    esi,eax
c0006c6f:	85 c0                	test   eax,eax
c0006c71:	0f 85 41 02 00 00    	jne    c0006eb8 <f_setlabel+0x265>
c0006c77:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006c7b:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006c7e:	0f 85 8e 00 00 00    	jne    c0006d12 <f_setlabel+0xbf>
c0006c84:	b9 16 00 00 00       	mov    ecx,0x16
c0006c89:	31 d2                	xor    edx,edx
c0006c8b:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006c8f:	31 db                	xor    ebx,ebx
c0006c91:	e8 8c ad ff ff       	call   c0001a22 <mem_set>
c0006c96:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006c9d:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006ca0:	0f 86 0a 01 00 00    	jbe    c0006db0 <f_setlabel+0x15d>
c0006ca6:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006cad:	e8 b6 ad ff ff       	call   c0001a68 <tchar2uni>
c0006cb2:	89 c6                	mov    esi,eax
c0006cb4:	3d ff ff 00 00       	cmp    eax,0xffff
c0006cb9:	76 2a                	jbe    c0006ce5 <f_setlabel+0x92>
c0006cbb:	83 f8 ff             	cmp    eax,0xffffffff
c0006cbe:	74 05                	je     c0006cc5 <f_setlabel+0x72>
c0006cc0:	83 fb 09             	cmp    ebx,0x9
c0006cc3:	76 0a                	jbe    c0006ccf <f_setlabel+0x7c>
c0006cc5:	be 06 00 00 00       	mov    esi,0x6
c0006cca:	e9 e9 01 00 00       	jmp    c0006eb8 <f_setlabel+0x265>
c0006ccf:	89 c2                	mov    edx,eax
c0006cd1:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006cd5:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006cd8:	c1 ea 10             	shr    edx,0x10
c0006cdb:	01 c8                	add    eax,ecx
c0006cdd:	43                   	inc    ebx
c0006cde:	e8 1d ad ff ff       	call   c0001a00 <st_word>
c0006ce3:	eb 04                	jmp    c0006ce9 <f_setlabel+0x96>
c0006ce5:	85 c0                	test   eax,eax
c0006ce7:	74 dc                	je     c0006cc5 <f_setlabel+0x72>
c0006ce9:	89 f2                	mov    edx,esi
c0006ceb:	b8 37 f3 01 c0       	mov    eax,0xc001f337
c0006cf0:	e8 5b ad ff ff       	call   c0001a50 <chk_chr>
c0006cf5:	85 c0                	test   eax,eax
c0006cf7:	75 cc                	jne    c0006cc5 <f_setlabel+0x72>
c0006cf9:	83 fb 0a             	cmp    ebx,0xa
c0006cfc:	77 c7                	ja     c0006cc5 <f_setlabel+0x72>
c0006cfe:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006d01:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006d05:	0f b7 d6             	movzx  edx,si
c0006d08:	01 c8                	add    eax,ecx
c0006d0a:	43                   	inc    ebx
c0006d0b:	e8 f0 ac ff ff       	call   c0001a00 <st_word>
c0006d10:	eb 84                	jmp    c0006c96 <f_setlabel+0x43>
c0006d12:	b9 0b 00 00 00       	mov    ecx,0xb
c0006d17:	ba 20 00 00 00       	mov    edx,0x20
c0006d1c:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006d20:	31 db                	xor    ebx,ebx
c0006d22:	e8 fb ac ff ff       	call   c0001a22 <mem_set>
c0006d27:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006d2e:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006d31:	76 60                	jbe    c0006d93 <f_setlabel+0x140>
c0006d33:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d3a:	e8 29 ad ff ff       	call   c0001a68 <tchar2uni>
c0006d3f:	3d ff ff 00 00       	cmp    eax,0xffff
c0006d44:	0f 87 7b ff ff ff    	ja     c0006cc5 <f_setlabel+0x72>
c0006d4a:	83 ec 0c             	sub    esp,0xc
c0006d4d:	50                   	push   eax
c0006d4e:	e8 97 15 00 00       	call   c00082ea <ff_wtoupper>
c0006d53:	5a                   	pop    edx
c0006d54:	59                   	pop    ecx
c0006d55:	68 b5 01 00 00       	push   0x1b5
c0006d5a:	50                   	push   eax
c0006d5b:	e8 8e 14 00 00       	call   c00081ee <ff_uni2oem>
c0006d60:	83 c4 10             	add    esp,0x10
c0006d63:	89 c6                	mov    esi,eax
c0006d65:	66 85 c0             	test   ax,ax
c0006d68:	0f 84 57 ff ff ff    	je     c0006cc5 <f_setlabel+0x72>
c0006d6e:	0f b7 d0             	movzx  edx,ax
c0006d71:	b8 30 f3 01 c0       	mov    eax,0xc001f330
c0006d76:	e8 d5 ac ff ff       	call   c0001a50 <chk_chr>
c0006d7b:	85 c0                	test   eax,eax
c0006d7d:	0f 85 42 ff ff ff    	jne    c0006cc5 <f_setlabel+0x72>
c0006d83:	66 81 fe ff 00       	cmp    si,0xff
c0006d88:	0f 87 14 01 00 00    	ja     c0006ea2 <f_setlabel+0x24f>
c0006d8e:	e9 fa 00 00 00       	jmp    c0006e8d <f_setlabel+0x23a>
c0006d93:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0006d98:	0f 84 27 ff ff ff    	je     c0006cc5 <f_setlabel+0x72>
c0006d9e:	85 db                	test   ebx,ebx
c0006da0:	74 0e                	je     c0006db0 <f_setlabel+0x15d>
c0006da2:	8d 43 ff             	lea    eax,[ebx-0x1]
c0006da5:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0006daa:	75 04                	jne    c0006db0 <f_setlabel+0x15d>
c0006dac:	89 c3                	mov    ebx,eax
c0006dae:	eb ee                	jmp    c0006d9e <f_setlabel+0x14b>
c0006db0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006db4:	31 d2                	xor    edx,edx
c0006db6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0006dba:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0006dc2:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006dc6:	e8 1f c1 ff ff       	call   c0002eea <dir_sdi>
c0006dcb:	89 c6                	mov    esi,eax
c0006dcd:	85 c0                	test   eax,eax
c0006dcf:	0f 85 e3 00 00 00    	jne    c0006eb8 <f_setlabel+0x265>
c0006dd5:	ba 01 00 00 00       	mov    edx,0x1
c0006dda:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006dde:	e8 17 c9 ff ff       	call   c00036fa <dir_read>
c0006de3:	85 c0                	test   eax,eax
c0006de5:	75 21                	jne    c0006e08 <f_setlabel+0x1b5>
c0006de7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006deb:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006def:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c0006df2:	74 5d                	je     c0006e51 <f_setlabel+0x1fe>
c0006df4:	85 db                	test   ebx,ebx
c0006df6:	74 0b                	je     c0006e03 <f_setlabel+0x1b0>
c0006df8:	b9 0b 00 00 00       	mov    ecx,0xb
c0006dfd:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006e01:	eb 70                	jmp    c0006e73 <f_setlabel+0x220>
c0006e03:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0006e06:	eb 70                	jmp    c0006e78 <f_setlabel+0x225>
c0006e08:	83 f8 04             	cmp    eax,0x4
c0006e0b:	75 7c                	jne    c0006e89 <f_setlabel+0x236>
c0006e0d:	85 db                	test   ebx,ebx
c0006e0f:	0f 84 a3 00 00 00    	je     c0006eb8 <f_setlabel+0x265>
c0006e15:	ba 01 00 00 00       	mov    edx,0x1
c0006e1a:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006e1e:	e8 51 ca ff ff       	call   c0003874 <dir_alloc>
c0006e23:	89 c6                	mov    esi,eax
c0006e25:	85 c0                	test   eax,eax
c0006e27:	0f 85 8b 00 00 00    	jne    c0006eb8 <f_setlabel+0x265>
c0006e2d:	31 d2                	xor    edx,edx
c0006e2f:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e33:	b9 20 00 00 00       	mov    ecx,0x20
c0006e38:	e8 e5 ab ff ff       	call   c0001a22 <mem_set>
c0006e3d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e41:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006e44:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e48:	75 18                	jne    c0006e62 <f_setlabel+0x20f>
c0006e4a:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0006e4d:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e51:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0006e54:	b9 16 00 00 00       	mov    ecx,0x16
c0006e59:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e5d:	83 c0 02             	add    eax,0x2
c0006e60:	eb 9b                	jmp    c0006dfd <f_setlabel+0x1aa>
c0006e62:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0006e66:	b9 0b 00 00 00       	mov    ecx,0xb
c0006e6b:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006e6f:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e73:	e8 95 ab ff ff       	call   c0001a0d <mem_cpy>
c0006e78:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e7c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006e80:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e84:	e8 0e d4 ff ff       	call   c0004297 <sync_fs>
c0006e89:	89 c6                	mov    esi,eax
c0006e8b:	eb 2b                	jmp    c0006eb8 <f_setlabel+0x265>
c0006e8d:	83 fb 0a             	cmp    ebx,0xa
c0006e90:	0f 87 2f fe ff ff    	ja     c0006cc5 <f_setlabel+0x72>
c0006e96:	89 f0                	mov    eax,esi
c0006e98:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006e9c:	43                   	inc    ebx
c0006e9d:	e9 85 fe ff ff       	jmp    c0006d27 <f_setlabel+0xd4>
c0006ea2:	83 fb 09             	cmp    ebx,0x9
c0006ea5:	0f 87 1a fe ff ff    	ja     c0006cc5 <f_setlabel+0x72>
c0006eab:	89 f0                	mov    eax,esi
c0006ead:	66 c1 e8 08          	shr    ax,0x8
c0006eb1:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006eb5:	43                   	inc    ebx
c0006eb6:	eb de                	jmp    c0006e96 <f_setlabel+0x243>
c0006eb8:	89 f0                	mov    eax,esi
c0006eba:	83 c4 74             	add    esp,0x74
c0006ebd:	5b                   	pop    ebx
c0006ebe:	5e                   	pop    esi
c0006ebf:	c3                   	ret    

c0006ec0 <f_forward>:
c0006ec0:	55                   	push   ebp
c0006ec1:	57                   	push   edi
c0006ec2:	56                   	push   esi
c0006ec3:	53                   	push   ebx
c0006ec4:	83 ec 2c             	sub    esp,0x2c
c0006ec7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006ecb:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0006ecf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0006ed5:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0006ed9:	89 d8                	mov    eax,ebx
c0006edb:	e8 b1 b1 ff ff       	call   c0002091 <validate>
c0006ee0:	89 c5                	mov    ebp,eax
c0006ee2:	85 c0                	test   eax,eax
c0006ee4:	0f 85 aa 01 00 00    	jne    c0007094 <f_forward+0x1d4>
c0006eea:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0006eee:	85 ed                	test   ebp,ebp
c0006ef0:	0f 85 9e 01 00 00    	jne    c0007094 <f_forward+0x1d4>
c0006ef6:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0006efa:	0f 84 8f 01 00 00    	je     c000708f <f_forward+0x1cf>
c0006f00:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0006f03:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0006f06:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0006f09:	bf 00 00 00 00       	mov    edi,0x0
c0006f0e:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0006f11:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0006f15:	89 d1                	mov    ecx,edx
c0006f17:	19 f9                	sbb    ecx,edi
c0006f19:	0f 83 cf 00 00 00    	jae    c0006fee <f_forward+0x12e>
c0006f1f:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0006f23:	e9 c6 00 00 00       	jmp    c0006fee <f_forward+0x12e>
c0006f28:	50                   	push   eax
c0006f29:	50                   	push   eax
c0006f2a:	6a 00                	push   0x0
c0006f2c:	6a 00                	push   0x0
c0006f2e:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0006f32:	83 c4 10             	add    esp,0x10
c0006f35:	85 c0                	test   eax,eax
c0006f37:	0f 84 57 01 00 00    	je     c0007094 <f_forward+0x1d4>
c0006f3d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006f40:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006f44:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0006f47:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c0006f4b:	89 d7                	mov    edi,edx
c0006f4d:	8d 4e ff             	lea    ecx,[esi-0x1]
c0006f50:	89 c6                	mov    esi,eax
c0006f52:	0f ac fe 09          	shrd   esi,edi,0x9
c0006f56:	21 ce                	and    esi,ecx
c0006f58:	89 c1                	mov    ecx,eax
c0006f5a:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0006f60:	0f 84 98 00 00 00    	je     c0006ffe <f_forward+0x13e>
c0006f66:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006f6a:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006f6d:	89 c8                	mov    eax,ecx
c0006f6f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0006f73:	e8 af ac ff ff       	call   c0001c27 <clst2sect>
c0006f78:	89 d7                	mov    edi,edx
c0006f7a:	09 c7                	or     edi,eax
c0006f7c:	0f 84 9e 00 00 00    	je     c0007020 <f_forward+0x160>
c0006f82:	31 ff                	xor    edi,edi
c0006f84:	8d 4b 50             	lea    ecx,[ebx+0x50]
c0006f87:	01 c6                	add    esi,eax
c0006f89:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0006f8d:	11 d7                	adc    edi,edx
c0006f8f:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0006f92:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0006f95:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006f99:	39 fa                	cmp    edx,edi
c0006f9b:	0f 85 a2 00 00 00    	jne    c0007043 <f_forward+0x183>
c0006fa1:	39 f0                	cmp    eax,esi
c0006fa3:	0f 85 9a 00 00 00    	jne    c0007043 <f_forward+0x183>
c0006fa9:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006fac:	ba 00 02 00 00       	mov    edx,0x200
c0006fb1:	25 ff 01 00 00       	and    eax,0x1ff
c0006fb6:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0006fba:	29 c2                	sub    edx,eax
c0006fbc:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0006fbf:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0006fc2:	39 d1                	cmp    ecx,edx
c0006fc4:	76 02                	jbe    c0006fc8 <f_forward+0x108>
c0006fc6:	89 d1                	mov    ecx,edx
c0006fc8:	8d 73 50             	lea    esi,[ebx+0x50]
c0006fcb:	52                   	push   edx
c0006fcc:	01 c6                	add    esi,eax
c0006fce:	52                   	push   edx
c0006fcf:	51                   	push   ecx
c0006fd0:	56                   	push   esi
c0006fd1:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0006fd5:	83 c4 10             	add    esp,0x10
c0006fd8:	85 c0                	test   eax,eax
c0006fda:	74 44                	je     c0007020 <f_forward+0x160>
c0006fdc:	31 ff                	xor    edi,edi
c0006fde:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c0006fe1:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c0006fe4:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0006fe8:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c0006fec:	01 07                	add    DWORD PTR [edi],eax
c0006fee:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0006ff3:	0f 85 2f ff ff ff    	jne    c0006f28 <f_forward+0x68>
c0006ff9:	e9 96 00 00 00       	jmp    c0007094 <f_forward+0x1d4>
c0006ffe:	85 f6                	test   esi,esi
c0007000:	0f 85 60 ff ff ff    	jne    c0006f66 <f_forward+0xa6>
c0007006:	89 d7                	mov    edi,edx
c0007008:	09 c7                	or     edi,eax
c000700a:	75 05                	jne    c0007011 <f_forward+0x151>
c000700c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000700f:	eb 0a                	jmp    c000701b <f_forward+0x15b>
c0007011:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007014:	89 d8                	mov    eax,ebx
c0007016:	e8 d9 bc ff ff       	call   c0002cf4 <get_fat>
c000701b:	83 f8 01             	cmp    eax,0x1
c000701e:	77 0b                	ja     c000702b <f_forward+0x16b>
c0007020:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0007024:	bd 02 00 00 00       	mov    ebp,0x2
c0007029:	eb 69                	jmp    c0007094 <f_forward+0x1d4>
c000702b:	83 f8 ff             	cmp    eax,0xffffffff
c000702e:	75 0b                	jne    c000703b <f_forward+0x17b>
c0007030:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0007034:	bd 01 00 00 00       	mov    ebp,0x1
c0007039:	eb 59                	jmp    c0007094 <f_forward+0x1d4>
c000703b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000703e:	e9 23 ff ff ff       	jmp    c0006f66 <f_forward+0xa6>
c0007043:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0007047:	79 20                	jns    c0007069 <f_forward+0x1a9>
c0007049:	83 ec 0c             	sub    esp,0xc
c000704c:	6a 01                	push   0x1
c000704e:	52                   	push   edx
c000704f:	50                   	push   eax
c0007050:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007054:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0007058:	50                   	push   eax
c0007059:	e8 fb a8 ff ff       	call   c0001959 <disk_write>
c000705e:	83 c4 20             	add    esp,0x20
c0007061:	85 c0                	test   eax,eax
c0007063:	75 cb                	jne    c0007030 <f_forward+0x170>
c0007065:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0007069:	83 ec 0c             	sub    esp,0xc
c000706c:	6a 01                	push   0x1
c000706e:	57                   	push   edi
c000706f:	56                   	push   esi
c0007070:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007074:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007078:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000707c:	50                   	push   eax
c000707d:	e8 c1 a8 ff ff       	call   c0001943 <disk_read>
c0007082:	83 c4 20             	add    esp,0x20
c0007085:	85 c0                	test   eax,eax
c0007087:	0f 84 1c ff ff ff    	je     c0006fa9 <f_forward+0xe9>
c000708d:	eb a1                	jmp    c0007030 <f_forward+0x170>
c000708f:	bd 07 00 00 00       	mov    ebp,0x7
c0007094:	83 c4 2c             	add    esp,0x2c
c0007097:	89 e8                	mov    eax,ebp
c0007099:	5b                   	pop    ebx
c000709a:	5e                   	pop    esi
c000709b:	5f                   	pop    edi
c000709c:	5d                   	pop    ebp
c000709d:	c3                   	ret    

c000709e <f_mkfs>:
c000709e:	55                   	push   ebp
c000709f:	57                   	push   edi
c00070a0:	56                   	push   esi
c00070a1:	53                   	push   ebx
c00070a2:	bb 0b 00 00 00       	mov    ebx,0xb
c00070a7:	81 ec 9c 00 00 00    	sub    esp,0x9c
c00070ad:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c00070b4:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c00070bb:	e8 b0 ae ff ff       	call   c0001f70 <get_ldnumber>
c00070c0:	85 c0                	test   eax,eax
c00070c2:	0f 88 ec 10 00 00    	js     c00081b4 <f_mkfs+0x1116>
c00070c8:	8b 14 85 a0 33 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdcc60]
c00070cf:	85 d2                	test   edx,edx
c00070d1:	74 03                	je     c00070d6 <f_mkfs+0x38>
c00070d3:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00070d6:	85 f6                	test   esi,esi
c00070d8:	75 05                	jne    c00070df <f_mkfs+0x41>
c00070da:	be 20 f3 01 c0       	mov    esi,0xc001f320
c00070df:	83 ec 0c             	sub    esp,0xc
c00070e2:	0f b6 c0             	movzx  eax,al
c00070e5:	bb 03 00 00 00       	mov    ebx,0x3
c00070ea:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00070ee:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00070f2:	e8 49 a8 ff ff       	call   c0001940 <disk_initialize>
c00070f7:	83 c4 10             	add    esp,0x10
c00070fa:	a8 01                	test   al,0x1
c00070fc:	0f 85 b2 10 00 00    	jne    c00081b4 <f_mkfs+0x1116>
c0007102:	bb 0a 00 00 00       	mov    ebx,0xa
c0007107:	a8 04                	test   al,0x4
c0007109:	0f 85 a5 10 00 00    	jne    c00081b4 <f_mkfs+0x1116>
c000710f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0007112:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c0007116:	85 c0                	test   eax,eax
c0007118:	75 20                	jne    c000713a <f_mkfs+0x9c>
c000711a:	51                   	push   ecx
c000711b:	8d 44 24 78          	lea    eax,[esp+0x78]
c000711f:	50                   	push   eax
c0007120:	6a 03                	push   0x3
c0007122:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007126:	e8 44 a8 ff ff       	call   c000196f <disk_ioctl>
c000712b:	83 c4 10             	add    esp,0x10
c000712e:	85 c0                	test   eax,eax
c0007130:	74 08                	je     c000713a <f_mkfs+0x9c>
c0007132:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c000713a:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c000713e:	8d 42 ff             	lea    eax,[edx-0x1]
c0007141:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007146:	77 04                	ja     c000714c <f_mkfs+0xae>
c0007148:	85 c2                	test   edx,eax
c000714a:	74 08                	je     c0007154 <f_mkfs+0xb6>
c000714c:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007154:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c0007157:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000715b:	48                   	dec    eax
c000715c:	3c 01                	cmp    al,0x1
c000715e:	76 05                	jbe    c0007165 <f_mkfs+0xc7>
c0007160:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007165:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0007168:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000716c:	48                   	dec    eax
c000716d:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007172:	77 07                	ja     c000717b <f_mkfs+0xdd>
c0007174:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c0007179:	74 08                	je     c0007183 <f_mkfs+0xe5>
c000717b:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007183:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007186:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c000718c:	77 07                	ja     c0007195 <f_mkfs+0xf7>
c000718e:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007191:	85 d8                	test   eax,ebx
c0007193:	74 02                	je     c0007197 <f_mkfs+0xf9>
c0007195:	31 db                	xor    ebx,ebx
c0007197:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c00071a2:	77 0a                	ja     c00071ae <f_mkfs+0x110>
c00071a4:	bb 11 00 00 00       	mov    ebx,0x11
c00071a9:	e9 06 10 00 00       	jmp    c00081b4 <f_mkfs+0x1116>
c00071ae:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c00071b5:	8b 36                	mov    esi,DWORD PTR [esi]
c00071b7:	85 ed                	test   ebp,ebp
c00071b9:	75 1e                	jne    c00071d9 <f_mkfs+0x13b>
c00071bb:	83 ec 0c             	sub    esp,0xc
c00071be:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c00071c5:	25 00 fe ff ff       	and    eax,0xfffffe00
c00071ca:	50                   	push   eax
c00071cb:	e8 f1 0f 00 00       	call   c00081c1 <ff_memalloc>
c00071d0:	83 c4 10             	add    esp,0x10
c00071d3:	89 c5                	mov    ebp,eax
c00071d5:	85 c0                	test   eax,eax
c00071d7:	74 cb                	je     c00071a4 <f_mkfs+0x106>
c00071d9:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c00071e1:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00071e9:	52                   	push   edx
c00071ea:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00071ee:	50                   	push   eax
c00071ef:	6a 01                	push   0x1
c00071f1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00071f5:	e8 75 a7 ff ff       	call   c000196f <disk_ioctl>
c00071fa:	83 c4 10             	add    esp,0x10
c00071fd:	85 c0                	test   eax,eax
c00071ff:	0f 85 4a 0f 00 00    	jne    c000814f <f_mkfs+0x10b1>
c0007205:	89 f1                	mov    ecx,esi
c0007207:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000720f:	83 e1 0f             	and    ecx,0xf
c0007212:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000721a:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c000721e:	83 e6 08             	and    esi,0x8
c0007221:	75 56                	jne    c0007279 <f_mkfs+0x1db>
c0007223:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c0007227:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c000722b:	83 ff 00             	cmp    edi,0x0
c000722e:	76 20                	jbe    c0007250 <f_mkfs+0x1b2>
c0007230:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c0007235:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c000723d:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c0007243:	83 d7 ff             	adc    edi,0xffffffff
c0007246:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000724a:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c000724e:	eb 21                	jmp    c0007271 <f_mkfs+0x1d3>
c0007250:	ba 3f 00 00 00       	mov    edx,0x3f
c0007255:	39 f2                	cmp    edx,esi
c0007257:	19 f8                	sbb    eax,edi
c0007259:	73 1e                	jae    c0007279 <f_mkfs+0x1db>
c000725b:	83 c6 c1             	add    esi,0xffffffc1
c000725e:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007266:	83 d7 ff             	adc    edi,0xffffffff
c0007269:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000726d:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007271:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007279:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000727d:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0007281:	89 04 24             	mov    DWORD PTR [esp],eax
c0007284:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007288:	31 c0                	xor    eax,eax
c000728a:	ba 7f 00 00 00       	mov    edx,0x7f
c000728f:	89 c7                	mov    edi,eax
c0007291:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007294:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007298:	0f 83 c5 0a 00 00    	jae    c0007d63 <f_mkfs+0xcc5>
c000729e:	89 df                	mov    edi,ebx
c00072a0:	c1 ef 09             	shr    edi,0x9
c00072a3:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00072a7:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c00072ae:	c1 ef 09             	shr    edi,0x9
c00072b1:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c00072b6:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c00072ba:	74 29                	je     c00072e5 <f_mkfs+0x247>
c00072bc:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00072c2:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c00072c7:	0f 97 c2             	seta   dl
c00072ca:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c00072cd:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00072d1:	0f 92 c0             	setb   al
c00072d4:	08 c2                	or     dl,al
c00072d6:	75 5b                	jne    c0007333 <f_mkfs+0x295>
c00072d8:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00072dc:	83 e0 07             	and    eax,0x7
c00072df:	3c 04                	cmp    al,0x4
c00072e1:	74 50                	je     c0007333 <f_mkfs+0x295>
c00072e3:	eb 1b                	jmp    c0007300 <f_mkfs+0x262>
c00072e5:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00072ea:	0f 87 73 0a 00 00    	ja     c0007d63 <f_mkfs+0xcc5>
c00072f0:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00072f6:	76 08                	jbe    c0007300 <f_mkfs+0x262>
c00072f8:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c0007300:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007304:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c0007308:	83 e0 01             	and    eax,0x1
c000730b:	80 e1 02             	and    cl,0x2
c000730e:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c0007312:	74 0d                	je     c0007321 <f_mkfs+0x283>
c0007314:	84 c0                	test   al,al
c0007316:	0f 84 53 09 00 00    	je     c0007c6f <f_mkfs+0xbd1>
c000731c:	e9 12 08 00 00       	jmp    c0007b33 <f_mkfs+0xa95>
c0007321:	bb 13 00 00 00       	mov    ebx,0x13
c0007326:	84 c0                	test   al,al
c0007328:	0f 85 05 08 00 00    	jne    c0007b33 <f_mkfs+0xa95>
c000732e:	e9 39 0e 00 00       	jmp    c000816c <f_mkfs+0x10ce>
c0007333:	31 c0                	xor    eax,eax
c0007335:	ba ff 0f 00 00       	mov    edx,0xfff
c000733a:	89 c7                	mov    edi,eax
c000733c:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000733f:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007343:	0f 83 1a 0a 00 00    	jae    c0007d63 <f_mkfs+0xcc5>
c0007349:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c000734f:	77 39                	ja     c000738a <f_mkfs+0x2ec>
c0007351:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007356:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c000735e:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007361:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007365:	73 08                	jae    c000736f <f_mkfs+0x2d1>
c0007367:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c000736f:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c0007374:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0007377:	b8 00 00 00 00       	mov    eax,0x0
c000737c:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007380:	73 08                	jae    c000738a <f_mkfs+0x2ec>
c0007382:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c000738a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000738e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007392:	83 c0 20             	add    eax,0x20
c0007395:	83 d2 00             	adc    edx,0x0
c0007398:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000739c:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c00073a0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00073a4:	31 d2                	xor    edx,edx
c00073a6:	31 ff                	xor    edi,edi
c00073a8:	52                   	push   edx
c00073a9:	89 fb                	mov    ebx,edi
c00073ab:	50                   	push   eax
c00073ac:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00073b0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00073b4:	e8 03 70 01 00       	call   c001e3bc <__udivdi3>
c00073b9:	83 c4 10             	add    esp,0x10
c00073bc:	c1 e0 02             	shl    eax,0x2
c00073bf:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c00073c3:	05 07 02 00 00       	add    eax,0x207
c00073c8:	89 f1                	mov    ecx,esi
c00073ca:	c1 e8 09             	shr    eax,0x9
c00073cd:	83 c1 ff             	add    ecx,0xffffffff
c00073d0:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00073d4:	83 d3 ff             	adc    ebx,0xffffffff
c00073d7:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00073db:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c00073df:	31 d2                	xor    edx,edx
c00073e1:	01 c8                	add    eax,ecx
c00073e3:	11 da                	adc    edx,ebx
c00073e5:	89 c1                	mov    ecx,eax
c00073e7:	f7 de                	neg    esi
c00073e9:	89 d0                	mov    eax,edx
c00073eb:	83 d7 00             	adc    edi,0x0
c00073ee:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00073f2:	f7 df                	neg    edi
c00073f4:	21 f1                	and    ecx,esi
c00073f6:	21 f8                	and    eax,edi
c00073f8:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00073fc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007400:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0007404:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0007408:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c000740c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000740f:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c0007413:	0f ac d0 01          	shrd   eax,edx,0x1
c0007417:	89 df                	mov    edi,ebx
c0007419:	d1 ea                	shr    edx,1
c000741b:	39 c1                	cmp    ecx,eax
c000741d:	19 d7                	sbb    edi,edx
c000741f:	0f 83 3e 09 00 00    	jae    c0007d63 <f_mkfs+0xcc5>
c0007425:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007429:	31 d2                	xor    edx,edx
c000742b:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c000742f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007433:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c0007437:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000743a:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c000743e:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0007442:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007446:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000744a:	83 f8 0f             	cmp    eax,0xf
c000744d:	0f 86 10 09 00 00    	jbe    c0007d63 <f_mkfs+0xcc5>
c0007453:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c000745b:	0f 87 02 09 00 00    	ja     c0007d63 <f_mkfs+0xcc5>
c0007461:	31 d2                	xor    edx,edx
c0007463:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007467:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000746f:	83 c0 07             	add    eax,0x7
c0007472:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000747a:	c1 e8 03             	shr    eax,0x3
c000747d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007484:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0007488:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000748c:	c1 e0 09             	shl    eax,0x9
c000748f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007493:	48                   	dec    eax
c0007494:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007498:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000749c:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c00074a0:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00074a4:	31 d2                	xor    edx,edx
c00074a6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00074aa:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00074b1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00074b5:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c00074ba:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00074be:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00074c2:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00074c6:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c00074ca:	31 ff                	xor    edi,edi
c00074cc:	31 f6                	xor    esi,esi
c00074ce:	31 db                	xor    ebx,ebx
c00074d0:	85 ff                	test   edi,edi
c00074d2:	74 05                	je     c00074d9 <f_mkfs+0x43b>
c00074d4:	4f                   	dec    edi
c00074d5:	74 44                	je     c000751b <f_mkfs+0x47d>
c00074d7:	eb 4f                	jmp    c0007528 <f_mkfs+0x48a>
c00074d9:	83 ec 0c             	sub    esp,0xc
c00074dc:	0f b7 c3             	movzx  eax,bx
c00074df:	50                   	push   eax
c00074e0:	e8 05 0e 00 00       	call   c00082ea <ff_wtoupper>
c00074e5:	83 c4 10             	add    esp,0x10
c00074e8:	89 c1                	mov    ecx,eax
c00074ea:	8d 53 01             	lea    edx,[ebx+0x1]
c00074ed:	66 39 c3             	cmp    bx,ax
c00074f0:	75 3e                	jne    c0007530 <f_mkfs+0x492>
c00074f2:	be 01 00 00 00       	mov    esi,0x1
c00074f7:	89 df                	mov    edi,ebx
c00074f9:	66 01 f7             	add    di,si
c00074fc:	75 07                	jne    c0007505 <f_mkfs+0x467>
c00074fe:	83 fe 7f             	cmp    esi,0x7f
c0007501:	77 31                	ja     c0007534 <f_mkfs+0x496>
c0007503:	eb 16                	jmp    c000751b <f_mkfs+0x47d>
c0007505:	83 ec 0c             	sub    esp,0xc
c0007508:	0f b7 ff             	movzx  edi,di
c000750b:	57                   	push   edi
c000750c:	e8 d9 0d 00 00       	call   c00082ea <ff_wtoupper>
c0007511:	83 c4 10             	add    esp,0x10
c0007514:	39 c7                	cmp    edi,eax
c0007516:	75 e6                	jne    c00074fe <f_mkfs+0x460>
c0007518:	46                   	inc    esi
c0007519:	eb dc                	jmp    c00074f7 <f_mkfs+0x459>
c000751b:	31 c0                	xor    eax,eax
c000751d:	89 d9                	mov    ecx,ebx
c000751f:	4e                   	dec    esi
c0007520:	0f 95 c0             	setne  al
c0007523:	43                   	inc    ebx
c0007524:	89 c7                	mov    edi,eax
c0007526:	eb 14                	jmp    c000753c <f_mkfs+0x49e>
c0007528:	89 f1                	mov    ecx,esi
c000752a:	01 f3                	add    ebx,esi
c000752c:	31 ff                	xor    edi,edi
c000752e:	eb 0c                	jmp    c000753c <f_mkfs+0x49e>
c0007530:	89 d3                	mov    ebx,edx
c0007532:	eb 08                	jmp    c000753c <f_mkfs+0x49e>
c0007534:	bf 02 00 00 00       	mov    edi,0x2
c0007539:	83 c9 ff             	or     ecx,0xffffffff
c000753c:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007540:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007543:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c0007547:	0f b6 c1             	movzx  eax,cl
c000754a:	e8 3a a9 ff ff       	call   c0001e89 <xsum32>
c000754f:	66 c1 e9 08          	shr    cx,0x8
c0007553:	89 c2                	mov    edx,eax
c0007555:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007558:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c000755c:	0f b7 c1             	movzx  eax,cx
c000755f:	e8 25 a9 ff ff       	call   c0001e89 <xsum32>
c0007564:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c0007569:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000756d:	66 85 db             	test   bx,bx
c0007570:	74 1f                	je     c0007591 <f_mkfs+0x4f3>
c0007572:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007575:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c000757c:	83 c0 02             	add    eax,0x2
c000757f:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007585:	39 c2                	cmp    edx,eax
c0007587:	74 08                	je     c0007591 <f_mkfs+0x4f3>
c0007589:	89 04 24             	mov    DWORD PTR [esp],eax
c000758c:	e9 3f ff ff ff       	jmp    c00074d0 <f_mkfs+0x432>
c0007591:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007594:	83 ec 0c             	sub    esp,0xc
c0007597:	05 01 02 00 00       	add    eax,0x201
c000759c:	c1 e8 09             	shr    eax,0x9
c000759f:	50                   	push   eax
c00075a0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00075a4:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00075a8:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00075ac:	55                   	push   ebp
c00075ad:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00075b1:	e8 a3 a3 ff ff       	call   c0001959 <disk_write>
c00075b6:	83 c4 20             	add    esp,0x20
c00075b9:	85 c0                	test   eax,eax
c00075bb:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00075be:	0f 85 8b 0b 00 00    	jne    c000814f <f_mkfs+0x10b1>
c00075c4:	89 d0                	mov    eax,edx
c00075c6:	31 d2                	xor    edx,edx
c00075c8:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c00075cc:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c00075d0:	66 85 db             	test   bx,bx
c00075d3:	74 04                	je     c00075d9 <f_mkfs+0x53b>
c00075d5:	31 c0                	xor    eax,eax
c00075d7:	eb b0                	jmp    c0007589 <f_mkfs+0x4eb>
c00075d9:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00075dd:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c00075e1:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c00075e5:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c00075eb:	31 d2                	xor    edx,edx
c00075ed:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c00075f8:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00075fc:	c1 eb 09             	shr    ebx,0x9
c00075ff:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c0007606:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000760a:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c000760e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007612:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007616:	8d 70 01             	lea    esi,[eax+0x1]
c0007619:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000761d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007621:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c0007628:	31 d2                	xor    edx,edx
c000762a:	25 00 fe ff ff       	and    eax,0xfffffe00
c000762f:	89 04 24             	mov    DWORD PTR [esp],eax
c0007632:	89 c1                	mov    ecx,eax
c0007634:	89 e8                	mov    eax,ebp
c0007636:	e8 e7 a3 ff ff       	call   c0001a22 <mem_set>
c000763b:	31 c0                	xor    eax,eax
c000763d:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007640:	76 10                	jbe    c0007652 <f_mkfs+0x5b4>
c0007642:	83 fe 07             	cmp    esi,0x7
c0007645:	76 0b                	jbe    c0007652 <f_mkfs+0x5b4>
c0007647:	40                   	inc    eax
c0007648:	83 ee 08             	sub    esi,0x8
c000764b:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c0007650:	eb eb                	jmp    c000763d <f_mkfs+0x59f>
c0007652:	b2 01                	mov    dl,0x1
c0007654:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c0007658:	85 f6                	test   esi,esi
c000765a:	74 0c                	je     c0007668 <f_mkfs+0x5ca>
c000765c:	39 04 24             	cmp    DWORD PTR [esp],eax
c000765f:	76 07                	jbe    c0007668 <f_mkfs+0x5ca>
c0007661:	08 11                	or     BYTE PTR [ecx],dl
c0007663:	4e                   	dec    esi
c0007664:	d1 e2                	shl    edx,1
c0007666:	eb f0                	jmp    c0007658 <f_mkfs+0x5ba>
c0007668:	89 df                	mov    edi,ebx
c000766a:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c000766e:	76 04                	jbe    c0007674 <f_mkfs+0x5d6>
c0007670:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007674:	83 ec 0c             	sub    esp,0xc
c0007677:	57                   	push   edi
c0007678:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000767c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007680:	55                   	push   ebp
c0007681:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007685:	e8 cf a2 ff ff       	call   c0001959 <disk_write>
c000768a:	83 c4 20             	add    esp,0x20
c000768d:	85 c0                	test   eax,eax
c000768f:	0f 85 ba 0a 00 00    	jne    c000814f <f_mkfs+0x10b1>
c0007695:	31 d2                	xor    edx,edx
c0007697:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c000769b:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c000769f:	29 fb                	sub    ebx,edi
c00076a1:	0f 85 7a ff ff ff    	jne    c0007621 <f_mkfs+0x583>
c00076a7:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00076ab:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00076b3:	31 f6                	xor    esi,esi
c00076b5:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00076b9:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00076bc:	31 d2                	xor    edx,edx
c00076be:	89 e8                	mov    eax,ebp
c00076c0:	e8 5d a3 ff ff       	call   c0001a22 <mem_set>
c00076c5:	31 c9                	xor    ecx,ecx
c00076c7:	85 db                	test   ebx,ebx
c00076c9:	75 40                	jne    c000770b <f_mkfs+0x66d>
c00076cb:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00076d0:	89 e8                	mov    eax,ebp
c00076d2:	bb 02 00 00 00       	mov    ebx,0x2
c00076d7:	e8 28 a3 ff ff       	call   c0001a04 <st_dword>
c00076dc:	8d 45 04             	lea    eax,[ebp+0x4]
c00076df:	83 ca ff             	or     edx,0xffffffff
c00076e2:	e8 1d a3 ff ff       	call   c0001a04 <st_dword>
c00076e7:	b9 08 00 00 00       	mov    ecx,0x8
c00076ec:	eb 1d                	jmp    c000770b <f_mkfs+0x66d>
c00076ee:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00076f1:	76 3b                	jbe    c000772e <f_mkfs+0x690>
c00076f3:	43                   	inc    ebx
c00076f4:	83 fe 01             	cmp    esi,0x1
c00076f7:	89 da                	mov    edx,ebx
c00076f9:	77 03                	ja     c00076fe <f_mkfs+0x660>
c00076fb:	83 ca ff             	or     edx,0xffffffff
c00076fe:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0007702:	4e                   	dec    esi
c0007703:	e8 fc a2 ff ff       	call   c0001a04 <st_dword>
c0007708:	83 c1 04             	add    ecx,0x4
c000770b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000770f:	85 f6                	test   esi,esi
c0007711:	75 db                	jne    c00076ee <f_mkfs+0x650>
c0007713:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c0007718:	77 14                	ja     c000772e <f_mkfs+0x690>
c000771a:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c000771e:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c0007725:	85 f6                	test   esi,esi
c0007727:	74 05                	je     c000772e <f_mkfs+0x690>
c0007729:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000772c:	77 dd                	ja     c000770b <f_mkfs+0x66d>
c000772e:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0007732:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007736:	39 cf                	cmp    edi,ecx
c0007738:	76 02                	jbe    c000773c <f_mkfs+0x69e>
c000773a:	89 cf                	mov    edi,ecx
c000773c:	83 ec 0c             	sub    esp,0xc
c000773f:	57                   	push   edi
c0007740:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007744:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007748:	55                   	push   ebp
c0007749:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000774d:	e8 07 a2 ff ff       	call   c0001959 <disk_write>
c0007752:	83 c4 20             	add    esp,0x20
c0007755:	85 c0                	test   eax,eax
c0007757:	0f 85 f2 09 00 00    	jne    c000814f <f_mkfs+0x10b1>
c000775d:	31 d2                	xor    edx,edx
c000775f:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007763:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007767:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c000776b:	0f 85 48 ff ff ff    	jne    c00076b9 <f_mkfs+0x61b>
c0007771:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007774:	31 d2                	xor    edx,edx
c0007776:	89 e8                	mov    eax,ebp
c0007778:	31 ff                	xor    edi,edi
c000777a:	e8 a3 a2 ff ff       	call   c0001a22 <mem_set>
c000777f:	8d 45 34             	lea    eax,[ebp+0x34]
c0007782:	ba 02 00 00 00       	mov    edx,0x2
c0007787:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c000778b:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c000778f:	e8 70 a2 ff ff       	call   c0001a04 <st_dword>
c0007794:	8d 45 38             	lea    eax,[ebp+0x38]
c0007797:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c000779b:	e8 64 a2 ff ff       	call   c0001a04 <st_dword>
c00077a0:	8d 45 44             	lea    eax,[ebp+0x44]
c00077a3:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00077a7:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c00077ab:	e8 54 a2 ff ff       	call   c0001a04 <st_dword>
c00077b0:	8d 45 54             	lea    eax,[ebp+0x54]
c00077b3:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00077b7:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00077bb:	83 c2 02             	add    edx,0x2
c00077be:	e8 41 a2 ff ff       	call   c0001a04 <st_dword>
c00077c3:	8d 45 58             	lea    eax,[ebp+0x58]
c00077c6:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c00077ca:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00077ce:	e8 31 a2 ff ff       	call   c0001a04 <st_dword>
c00077d3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00077d7:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c00077dc:	89 c6                	mov    esi,eax
c00077de:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00077e2:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c00077e6:	89 04 24             	mov    DWORD PTR [esp],eax
c00077e9:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c00077ed:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c00077f0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00077f4:	39 cb                	cmp    ebx,ecx
c00077f6:	76 02                	jbe    c00077fa <f_mkfs+0x75c>
c00077f8:	89 cb                	mov    ebx,ecx
c00077fa:	83 ec 0c             	sub    esp,0xc
c00077fd:	53                   	push   ebx
c00077fe:	57                   	push   edi
c00077ff:	56                   	push   esi
c0007800:	55                   	push   ebp
c0007801:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007805:	e8 4f a1 ff ff       	call   c0001959 <disk_write>
c000780a:	83 c4 20             	add    esp,0x20
c000780d:	85 c0                	test   eax,eax
c000780f:	0f 85 3a 09 00 00    	jne    c000814f <f_mkfs+0x10b1>
c0007815:	31 d2                	xor    edx,edx
c0007817:	b9 00 02 00 00       	mov    ecx,0x200
c000781c:	89 e8                	mov    eax,ebp
c000781e:	e8 ff a1 ff ff       	call   c0001a22 <mem_set>
c0007823:	31 d2                	xor    edx,edx
c0007825:	01 de                	add    esi,ebx
c0007827:	11 d7                	adc    edi,edx
c0007829:	29 1c 24             	sub    DWORD PTR [esp],ebx
c000782c:	75 bf                	jne    c00077ed <f_mkfs+0x74f>
c000782e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007832:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007836:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c000783e:	b9 00 02 00 00       	mov    ecx,0x200
c0007843:	31 d2                	xor    edx,edx
c0007845:	89 e8                	mov    eax,ebp
c0007847:	e8 d6 a1 ff ff       	call   c0001a22 <mem_set>
c000784c:	b9 0b 00 00 00       	mov    ecx,0xb
c0007851:	ba 00 f4 01 c0       	mov    edx,0xc001f400
c0007856:	89 e8                	mov    eax,ebp
c0007858:	e8 b0 a1 ff ff       	call   c0001a0d <mem_cpy>
c000785d:	8d 45 40             	lea    eax,[ebp+0x40]
c0007860:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007864:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007868:	e8 9a a1 ff ff       	call   c0001a07 <st_qword>
c000786d:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007871:	8d 45 48             	lea    eax,[ebp+0x48]
c0007874:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007878:	e8 8a a1 ff ff       	call   c0001a07 <st_qword>
c000787d:	8d 45 50             	lea    eax,[ebp+0x50]
c0007880:	ba 20 00 00 00       	mov    edx,0x20
c0007885:	e8 7a a1 ff ff       	call   c0001a04 <st_dword>
c000788a:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000788e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007892:	e8 6d a1 ff ff       	call   c0001a04 <st_dword>
c0007897:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000789b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000789f:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c00078a3:	e8 5c a1 ff ff       	call   c0001a04 <st_dword>
c00078a8:	8d 45 5c             	lea    eax,[ebp+0x5c]
c00078ab:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00078af:	e8 50 a1 ff ff       	call   c0001a04 <st_dword>
c00078b4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00078b8:	8d 50 02             	lea    edx,[eax+0x2]
c00078bb:	8d 45 60             	lea    eax,[ebp+0x60]
c00078be:	e8 41 a1 ff ff       	call   c0001a04 <st_dword>
c00078c3:	8d 45 64             	lea    eax,[ebp+0x64]
c00078c6:	ba 00 00 21 50       	mov    edx,0x50210000
c00078cb:	e8 34 a1 ff ff       	call   c0001a04 <st_dword>
c00078d0:	8d 45 68             	lea    eax,[ebp+0x68]
c00078d3:	ba 00 01 00 00       	mov    edx,0x100
c00078d8:	e8 23 a1 ff ff       	call   c0001a00 <st_word>
c00078dd:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c00078e1:	b8 0a 00 00 00       	mov    eax,0xa
c00078e6:	48                   	dec    eax
c00078e7:	74 05                	je     c00078ee <f_mkfs+0x850>
c00078e9:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c00078ec:	eb f8                	jmp    c00078e6 <f_mkfs+0x848>
c00078ee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00078f2:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c00078f6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00078fa:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c00078fe:	74 05                	je     c0007905 <f_mkfs+0x867>
c0007900:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007903:	eb f5                	jmp    c00078fa <f_mkfs+0x85c>
c0007905:	8d 45 78             	lea    eax,[ebp+0x78]
c0007908:	ba eb fe 00 00       	mov    edx,0xfeeb
c000790d:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007913:	31 db                	xor    ebx,ebx
c0007915:	e8 e6 a0 ff ff       	call   c0001a00 <st_word>
c000791a:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007920:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007925:	89 04 24             	mov    DWORD PTR [esp],eax
c0007928:	e8 d3 a0 ff ff       	call   c0001a00 <st_word>
c000792d:	31 c9                	xor    ecx,ecx
c000792f:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007932:	83 f8 01             	cmp    eax,0x1
c0007935:	76 13                	jbe    c000794a <f_mkfs+0x8ac>
c0007937:	83 f9 70             	cmp    ecx,0x70
c000793a:	74 0e                	je     c000794a <f_mkfs+0x8ac>
c000793c:	89 da                	mov    edx,ebx
c000793e:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007943:	e8 41 a5 ff ff       	call   c0001e89 <xsum32>
c0007948:	89 c3                	mov    ebx,eax
c000794a:	41                   	inc    ecx
c000794b:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007951:	75 dc                	jne    c000792f <f_mkfs+0x891>
c0007953:	89 f0                	mov    eax,esi
c0007955:	89 fa                	mov    edx,edi
c0007957:	83 c0 01             	add    eax,0x1
c000795a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000795e:	83 d2 00             	adc    edx,0x0
c0007961:	83 ec 0c             	sub    esp,0xc
c0007964:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007968:	6a 01                	push   0x1
c000796a:	57                   	push   edi
c000796b:	56                   	push   esi
c000796c:	55                   	push   ebp
c000796d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007971:	e8 e3 9f ff ff       	call   c0001959 <disk_write>
c0007976:	83 c4 20             	add    esp,0x20
c0007979:	85 c0                	test   eax,eax
c000797b:	0f 85 ce 07 00 00    	jne    c000814f <f_mkfs+0x10b1>
c0007981:	31 d2                	xor    edx,edx
c0007983:	b9 00 02 00 00       	mov    ecx,0x200
c0007988:	89 e8                	mov    eax,ebp
c000798a:	e8 93 a0 ff ff       	call   c0001a22 <mem_set>
c000798f:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007994:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007997:	e8 64 a0 ff ff       	call   c0001a00 <st_word>
c000799c:	89 f0                	mov    eax,esi
c000799e:	89 fa                	mov    edx,edi
c00079a0:	83 c0 09             	add    eax,0x9
c00079a3:	83 d2 00             	adc    edx,0x0
c00079a6:	89 04 24             	mov    DWORD PTR [esp],eax
c00079a9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00079ad:	31 c9                	xor    ecx,ecx
c00079af:	41                   	inc    ecx
c00079b0:	89 da                	mov    edx,ebx
c00079b2:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c00079b7:	e8 cd a4 ff ff       	call   c0001e89 <xsum32>
c00079bc:	89 c3                	mov    ebx,eax
c00079be:	81 f9 00 02 00 00    	cmp    ecx,0x200
c00079c4:	75 e9                	jne    c00079af <f_mkfs+0x911>
c00079c6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00079ca:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00079ce:	83 c0 01             	add    eax,0x1
c00079d1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00079d5:	83 d2 00             	adc    edx,0x0
c00079d8:	83 ec 0c             	sub    esp,0xc
c00079db:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c00079df:	6a 01                	push   0x1
c00079e1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00079e5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00079e9:	55                   	push   ebp
c00079ea:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079ee:	e8 66 9f ff ff       	call   c0001959 <disk_write>
c00079f3:	83 c4 20             	add    esp,0x20
c00079f6:	85 c0                	test   eax,eax
c00079f8:	0f 85 51 07 00 00    	jne    c000814f <f_mkfs+0x10b1>
c00079fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007a02:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007a06:	75 09                	jne    c0007a11 <f_mkfs+0x973>
c0007a08:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a0b:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007a0f:	74 12                	je     c0007a23 <f_mkfs+0x985>
c0007a11:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007a15:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007a19:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007a1d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007a21:	eb 8a                	jmp    c00079ad <f_mkfs+0x90f>
c0007a23:	31 d2                	xor    edx,edx
c0007a25:	b9 00 02 00 00       	mov    ecx,0x200
c0007a2a:	89 e8                	mov    eax,ebp
c0007a2c:	e8 f1 9f ff ff       	call   c0001a22 <mem_set>
c0007a31:	83 c6 0b             	add    esi,0xb
c0007a34:	83 d7 00             	adc    edi,0x0
c0007a37:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007a3b:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007a3f:	31 c9                	xor    ecx,ecx
c0007a41:	41                   	inc    ecx
c0007a42:	89 da                	mov    edx,ebx
c0007a44:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007a49:	e8 3b a4 ff ff       	call   c0001e89 <xsum32>
c0007a4e:	89 c3                	mov    ebx,eax
c0007a50:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007a56:	75 e9                	jne    c0007a41 <f_mkfs+0x9a3>
c0007a58:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007a5b:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007a5f:	83 c6 01             	add    esi,0x1
c0007a62:	83 d7 00             	adc    edi,0x0
c0007a65:	83 ec 0c             	sub    esp,0xc
c0007a68:	6a 01                	push   0x1
c0007a6a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007a6e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007a72:	55                   	push   ebp
c0007a73:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a77:	e8 dd 9e ff ff       	call   c0001959 <disk_write>
c0007a7c:	83 c4 20             	add    esp,0x20
c0007a7f:	85 c0                	test   eax,eax
c0007a81:	0f 85 c8 06 00 00    	jne    c000814f <f_mkfs+0x10b1>
c0007a87:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007a8b:	75 06                	jne    c0007a93 <f_mkfs+0x9f5>
c0007a8d:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007a91:	74 09                	je     c0007a9c <f_mkfs+0x9fe>
c0007a93:	89 34 24             	mov    DWORD PTR [esp],esi
c0007a96:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007a9a:	eb a3                	jmp    c0007a3f <f_mkfs+0x9a1>
c0007a9c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007aa0:	89 da                	mov    edx,ebx
c0007aa2:	01 e8                	add    eax,ebp
c0007aa4:	e8 5b 9f ff ff       	call   c0001a04 <st_dword>
c0007aa9:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007aae:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007ab6:	75 e4                	jne    c0007a9c <f_mkfs+0x9fe>
c0007ab8:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007abb:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007abf:	83 c6 02             	add    esi,0x2
c0007ac2:	83 d7 00             	adc    edi,0x0
c0007ac5:	83 ec 0c             	sub    esp,0xc
c0007ac8:	6a 01                	push   0x1
c0007aca:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007ace:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007ad2:	55                   	push   ebp
c0007ad3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ad7:	e8 7d 9e ff ff       	call   c0001959 <disk_write>
c0007adc:	83 c4 20             	add    esp,0x20
c0007adf:	85 c0                	test   eax,eax
c0007ae1:	0f 85 68 06 00 00    	jne    c000814f <f_mkfs+0x10b1>
c0007ae7:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007aec:	74 0d                	je     c0007afb <f_mkfs+0xa5d>
c0007aee:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007af6:	e9 43 fd ff ff       	jmp    c000783e <f_mkfs+0x7a0>
c0007afb:	b1 07                	mov    cl,0x7
c0007afd:	e9 e3 05 00 00       	jmp    c00080e5 <f_mkfs+0x1047>
c0007b02:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007b07:	0f 85 4f 02 00 00    	jne    c0007d5c <f_mkfs+0xcbe>
c0007b0d:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007b12:	0f 86 22 02 00 00    	jbe    c0007d3a <f_mkfs+0xc9c>
c0007b18:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007b1d:	0f 85 81 06 00 00    	jne    c00081a4 <f_mkfs+0x1106>
c0007b23:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007b26:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007b2a:	83 f8 40             	cmp    eax,0x40
c0007b2d:	0f 87 51 06 00 00    	ja     c0008184 <f_mkfs+0x10e6>
c0007b33:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007b37:	85 ff                	test   edi,edi
c0007b39:	75 1c                	jne    c0007b57 <f_mkfs+0xab9>
c0007b3b:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007b3e:	ba 00 f3 01 c0       	mov    edx,0xc001f300
c0007b43:	c1 e9 0c             	shr    ecx,0xc
c0007b46:	bf 01 00 00 00       	mov    edi,0x1
c0007b4b:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007b4e:	66 85 c0             	test   ax,ax
c0007b51:	0f 85 95 01 00 00    	jne    c0007cec <f_mkfs+0xc4e>
c0007b57:	31 d2                	xor    edx,edx
c0007b59:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007b5c:	f7 f7                	div    edi
c0007b5e:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007b63:	0f 86 95 01 00 00    	jbe    c0007cfe <f_mkfs+0xc60>
c0007b69:	83 c0 02             	add    eax,0x2
c0007b6c:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007b71:	01 c0                	add    eax,eax
c0007b73:	05 ff 01 00 00       	add    eax,0x1ff
c0007b78:	be 01 00 00 00       	mov    esi,0x1
c0007b7d:	c1 e8 09             	shr    eax,0x9
c0007b80:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007b84:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007b88:	c1 e0 05             	shl    eax,0x5
c0007b8b:	c1 e8 09             	shr    eax,0x9
c0007b8e:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007b92:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007b97:	31 d2                	xor    edx,edx
c0007b99:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007b9d:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007ba1:	89 f0                	mov    eax,esi
c0007ba3:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007ba7:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007bab:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007baf:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007bb3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007bb7:	31 d2                	xor    edx,edx
c0007bb9:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007bbe:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007bc2:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007bc6:	31 db                	xor    ebx,ebx
c0007bc8:	01 c8                	add    eax,ecx
c0007bca:	11 da                	adc    edx,ebx
c0007bcc:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007bd0:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007bd4:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007bd8:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007bdc:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007be0:	f7 da                	neg    edx
c0007be2:	21 d1                	and    ecx,edx
c0007be4:	29 d9                	sub    ecx,ebx
c0007be6:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007beb:	0f 85 20 01 00 00    	jne    c0007d11 <f_mkfs+0xc73>
c0007bf1:	31 db                	xor    ebx,ebx
c0007bf3:	01 ce                	add    esi,ecx
c0007bf5:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007bf9:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007bfd:	31 d2                	xor    edx,edx
c0007bff:	89 f8                	mov    eax,edi
c0007c01:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007c05:	c1 e0 04             	shl    eax,0x4
c0007c08:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007c0c:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007c10:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007c14:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007c18:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007c1b:	19 d3                	sbb    ebx,edx
c0007c1d:	0f 82 40 01 00 00    	jb     c0007d63 <f_mkfs+0xcc5>
c0007c23:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007c26:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007c2a:	89 c8                	mov    eax,ecx
c0007c2c:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007c31:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007c35:	29 f0                	sub    eax,esi
c0007c37:	29 d0                	sub    eax,edx
c0007c39:	31 d2                	xor    edx,edx
c0007c3b:	f7 f7                	div    edi
c0007c3d:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007c42:	89 c3                	mov    ebx,eax
c0007c44:	0f 85 b8 fe ff ff    	jne    c0007b02 <f_mkfs+0xa64>
c0007c4a:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007c4f:	0f 87 1d 01 00 00    	ja     c0007d72 <f_mkfs+0xcd4>
c0007c55:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007c5a:	0f 85 03 01 00 00    	jne    c0007d63 <f_mkfs+0xcc5>
c0007c60:	83 ff 01             	cmp    edi,0x1
c0007c63:	0f 86 fa 00 00 00    	jbe    c0007d63 <f_mkfs+0xcc5>
c0007c69:	d1 ef                	shr    edi,1
c0007c6b:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007c6f:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007c73:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007c76:	85 db                	test   ebx,ebx
c0007c78:	75 2d                	jne    c0007ca7 <f_mkfs+0xc09>
c0007c7a:	89 cb                	mov    ebx,ecx
c0007c7c:	ba 10 f3 01 c0       	mov    edx,0xc001f310
c0007c81:	c1 eb 11             	shr    ebx,0x11
c0007c84:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007c8c:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007c8f:	66 85 c0             	test   ax,ax
c0007c92:	74 11                	je     c0007ca5 <f_mkfs+0xc07>
c0007c94:	83 c2 02             	add    edx,0x2
c0007c97:	39 d8                	cmp    eax,ebx
c0007c99:	77 0a                	ja     c0007ca5 <f_mkfs+0xc07>
c0007c9b:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007c9f:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007ca3:	eb e7                	jmp    c0007c8c <f_mkfs+0xbee>
c0007ca5:	31 db                	xor    ebx,ebx
c0007ca7:	31 d2                	xor    edx,edx
c0007ca9:	89 c8                	mov    eax,ecx
c0007cab:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007caf:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007cb6:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007cbb:	c1 ea 09             	shr    edx,0x9
c0007cbe:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007cc3:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007cc7:	0f 87 96 00 00 00    	ja     c0007d63 <f_mkfs+0xcc5>
c0007ccd:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007cd1:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007cd9:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007cdd:	be 20 00 00 00       	mov    esi,0x20
c0007ce2:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007ce7:	e9 a6 fe ff ff       	jmp    c0007b92 <f_mkfs+0xaf4>
c0007cec:	83 c2 02             	add    edx,0x2
c0007cef:	39 c8                	cmp    eax,ecx
c0007cf1:	0f 87 60 fe ff ff    	ja     c0007b57 <f_mkfs+0xab9>
c0007cf7:	01 ff                	add    edi,edi
c0007cf9:	e9 4d fe ff ff       	jmp    c0007b4b <f_mkfs+0xaad>
c0007cfe:	8d 04 40             	lea    eax,[eax+eax*2]
c0007d01:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007d06:	40                   	inc    eax
c0007d07:	d1 e8                	shr    eax,1
c0007d09:	83 c0 03             	add    eax,0x3
c0007d0c:	e9 62 fe ff ff       	jmp    c0007b73 <f_mkfs+0xad5>
c0007d11:	31 d2                	xor    edx,edx
c0007d13:	89 c8                	mov    eax,ecx
c0007d15:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007d19:	85 d2                	test   edx,edx
c0007d1b:	74 0c                	je     c0007d29 <f_mkfs+0xc8b>
c0007d1d:	49                   	dec    ecx
c0007d1e:	46                   	inc    esi
c0007d1f:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007d24:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007d29:	89 c8                	mov    eax,ecx
c0007d2b:	31 d2                	xor    edx,edx
c0007d2d:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007d31:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0007d35:	e9 c3 fe ff ff       	jmp    c0007bfd <f_mkfs+0xb5f>
c0007d3a:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007d3f:	77 31                	ja     c0007d72 <f_mkfs+0xcd4>
c0007d41:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007d46:	75 1b                	jne    c0007d63 <f_mkfs+0xcc5>
c0007d48:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007d4b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007d4f:	3d 80 00 00 00       	cmp    eax,0x80
c0007d54:	0f 86 d9 fd ff ff    	jbe    c0007b33 <f_mkfs+0xa95>
c0007d5a:	eb 07                	jmp    c0007d63 <f_mkfs+0xcc5>
c0007d5c:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007d61:	76 0a                	jbe    c0007d6d <f_mkfs+0xccf>
c0007d63:	bb 0e 00 00 00       	mov    ebx,0xe
c0007d68:	e9 ff 03 00 00       	jmp    c000816c <f_mkfs+0x10ce>
c0007d6d:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007d72:	31 d2                	xor    edx,edx
c0007d74:	b9 00 02 00 00       	mov    ecx,0x200
c0007d79:	89 e8                	mov    eax,ebp
c0007d7b:	e8 a2 9c ff ff       	call   c0001a22 <mem_set>
c0007d80:	b9 0b 00 00 00       	mov    ecx,0xb
c0007d85:	ba 22 f4 01 c0       	mov    edx,0xc001f422
c0007d8a:	89 e8                	mov    eax,ebp
c0007d8c:	e8 7c 9c ff ff       	call   c0001a0d <mem_cpy>
c0007d91:	8d 45 0b             	lea    eax,[ebp+0xb]
c0007d94:	ba 00 02 00 00       	mov    edx,0x200
c0007d99:	e8 62 9c ff ff       	call   c0001a00 <st_word>
c0007d9e:	89 f8                	mov    eax,edi
c0007da0:	0f b7 d6             	movzx  edx,si
c0007da3:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0007da6:	8d 45 0e             	lea    eax,[ebp+0xe]
c0007da9:	e8 52 9c ff ff       	call   c0001a00 <st_word>
c0007dae:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c0007db2:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007db7:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c0007dba:	75 08                	jne    c0007dc4 <f_mkfs+0xd26>
c0007dbc:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007dc4:	8d 45 11             	lea    eax,[ebp+0x11]
c0007dc7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0007dcb:	e8 30 9c ff ff       	call   c0001a00 <st_word>
c0007dd0:	b8 ff ff 00 00       	mov    eax,0xffff
c0007dd5:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007dd9:	39 d0                	cmp    eax,edx
c0007ddb:	b8 00 00 00 00       	mov    eax,0x0
c0007de0:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c0007de4:	72 0a                	jb     c0007df0 <f_mkfs+0xd52>
c0007de6:	8d 45 13             	lea    eax,[ebp+0x13]
c0007de9:	e8 12 9c ff ff       	call   c0001a00 <st_word>
c0007dee:	eb 08                	jmp    c0007df8 <f_mkfs+0xd5a>
c0007df0:	8d 45 20             	lea    eax,[ebp+0x20]
c0007df3:	e8 0c 9c ff ff       	call   c0001a04 <st_dword>
c0007df8:	8d 45 18             	lea    eax,[ebp+0x18]
c0007dfb:	ba 3f 00 00 00       	mov    edx,0x3f
c0007e00:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c0007e04:	e8 f7 9b ff ff       	call   c0001a00 <st_word>
c0007e09:	8d 45 1a             	lea    eax,[ebp+0x1a]
c0007e0c:	ba ff 00 00 00       	mov    edx,0xff
c0007e11:	e8 ea 9b ff ff       	call   c0001a00 <st_word>
c0007e16:	8d 45 1c             	lea    eax,[ebp+0x1c]
c0007e19:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007e1d:	e8 e2 9b ff ff       	call   c0001a04 <st_dword>
c0007e22:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e27:	75 57                	jne    c0007e80 <f_mkfs+0xde2>
c0007e29:	8d 45 43             	lea    eax,[ebp+0x43]
c0007e2c:	ba 00 00 21 50       	mov    edx,0x50210000
c0007e31:	e8 ce 9b ff ff       	call   c0001a04 <st_dword>
c0007e36:	8d 45 24             	lea    eax,[ebp+0x24]
c0007e39:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007e3d:	e8 c2 9b ff ff       	call   c0001a04 <st_dword>
c0007e42:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0007e45:	ba 02 00 00 00       	mov    edx,0x2
c0007e4a:	e8 b5 9b ff ff       	call   c0001a04 <st_dword>
c0007e4f:	8d 45 30             	lea    eax,[ebp+0x30]
c0007e52:	ba 01 00 00 00       	mov    edx,0x1
c0007e57:	e8 a4 9b ff ff       	call   c0001a00 <st_word>
c0007e5c:	8d 45 32             	lea    eax,[ebp+0x32]
c0007e5f:	ba 06 00 00 00       	mov    edx,0x6
c0007e64:	e8 97 9b ff ff       	call   c0001a00 <st_word>
c0007e69:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0007e6d:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0007e71:	8d 45 47             	lea    eax,[ebp+0x47]
c0007e74:	b9 13 00 00 00       	mov    ecx,0x13
c0007e79:	ba 2e f4 01 c0       	mov    edx,0xc001f42e
c0007e7e:	eb 2f                	jmp    c0007eaf <f_mkfs+0xe11>
c0007e80:	8d 45 27             	lea    eax,[ebp+0x27]
c0007e83:	ba 00 00 21 50       	mov    edx,0x50210000
c0007e88:	e8 77 9b ff ff       	call   c0001a04 <st_dword>
c0007e8d:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0007e92:	8d 45 16             	lea    eax,[ebp+0x16]
c0007e95:	e8 66 9b ff ff       	call   c0001a00 <st_word>
c0007e9a:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0007e9e:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0007ea2:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0007ea5:	b9 13 00 00 00       	mov    ecx,0x13
c0007eaa:	ba 42 f4 01 c0       	mov    edx,0xc001f442
c0007eaf:	e8 59 9b ff ff       	call   c0001a0d <mem_cpy>
c0007eb4:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c0007eba:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007ebf:	89 f0                	mov    eax,esi
c0007ec1:	e8 3a 9b ff ff       	call   c0001a00 <st_word>
c0007ec6:	83 ec 0c             	sub    esp,0xc
c0007ec9:	6a 01                	push   0x1
c0007ecb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007ecf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007ed3:	55                   	push   ebp
c0007ed4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ed8:	e8 7c 9a ff ff       	call   c0001959 <disk_write>
c0007edd:	83 c4 20             	add    esp,0x20
c0007ee0:	85 c0                	test   eax,eax
c0007ee2:	0f 85 67 02 00 00    	jne    c000814f <f_mkfs+0x10b1>
c0007ee8:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007eed:	0f 85 b7 00 00 00    	jne    c0007faa <f_mkfs+0xf0c>
c0007ef3:	83 ec 0c             	sub    esp,0xc
c0007ef6:	6a 01                	push   0x1
c0007ef8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007efc:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007f00:	83 c0 06             	add    eax,0x6
c0007f03:	83 d2 00             	adc    edx,0x0
c0007f06:	52                   	push   edx
c0007f07:	50                   	push   eax
c0007f08:	55                   	push   ebp
c0007f09:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007f0d:	e8 47 9a ff ff       	call   c0001959 <disk_write>
c0007f12:	83 c4 20             	add    esp,0x20
c0007f15:	b9 00 02 00 00       	mov    ecx,0x200
c0007f1a:	31 d2                	xor    edx,edx
c0007f1c:	89 e8                	mov    eax,ebp
c0007f1e:	e8 ff 9a ff ff       	call   c0001a22 <mem_set>
c0007f23:	ba 52 52 61 41       	mov    edx,0x41615252
c0007f28:	89 e8                	mov    eax,ebp
c0007f2a:	e8 d5 9a ff ff       	call   c0001a04 <st_dword>
c0007f2f:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0007f35:	ba 72 72 41 61       	mov    edx,0x61417272
c0007f3a:	e8 c5 9a ff ff       	call   c0001a04 <st_dword>
c0007f3f:	8d 53 ff             	lea    edx,[ebx-0x1]
c0007f42:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c0007f48:	e8 b7 9a ff ff       	call   c0001a04 <st_dword>
c0007f4d:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0007f53:	ba 02 00 00 00       	mov    edx,0x2
c0007f58:	e8 a7 9a ff ff       	call   c0001a04 <st_dword>
c0007f5d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007f62:	89 f0                	mov    eax,esi
c0007f64:	e8 97 9a ff ff       	call   c0001a00 <st_word>
c0007f69:	83 ec 0c             	sub    esp,0xc
c0007f6c:	6a 01                	push   0x1
c0007f6e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007f72:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007f76:	83 c0 07             	add    eax,0x7
c0007f79:	83 d2 00             	adc    edx,0x0
c0007f7c:	52                   	push   edx
c0007f7d:	50                   	push   eax
c0007f7e:	55                   	push   ebp
c0007f7f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007f83:	e8 d1 99 ff ff       	call   c0001959 <disk_write>
c0007f88:	83 c4 14             	add    esp,0x14
c0007f8b:	6a 01                	push   0x1
c0007f8d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007f91:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007f95:	83 c0 01             	add    eax,0x1
c0007f98:	83 d2 00             	adc    edx,0x0
c0007f9b:	52                   	push   edx
c0007f9c:	50                   	push   eax
c0007f9d:	55                   	push   ebp
c0007f9e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007fa2:	e8 b2 99 ff ff       	call   c0001959 <disk_write>
c0007fa7:	83 c4 20             	add    esp,0x20
c0007faa:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c0007fb1:	31 d2                	xor    edx,edx
c0007fb3:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0007fb9:	31 db                	xor    ebx,ebx
c0007fbb:	89 e8                	mov    eax,ebp
c0007fbd:	e8 60 9a ff ff       	call   c0001a22 <mem_set>
c0007fc2:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c0007fc7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007fce:	0f 94 c3             	sete   bl
c0007fd1:	4b                   	dec    ebx
c0007fd2:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c0007fd8:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c0007fde:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007fe3:	75 21                	jne    c0008006 <f_mkfs+0xf68>
c0007fe5:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007fea:	89 e8                	mov    eax,ebp
c0007fec:	e8 13 9a ff ff       	call   c0001a04 <st_dword>
c0007ff1:	8d 45 04             	lea    eax,[ebp+0x4]
c0007ff4:	83 ca ff             	or     edx,0xffffffff
c0007ff7:	e8 08 9a ff ff       	call   c0001a04 <st_dword>
c0007ffc:	8d 45 08             	lea    eax,[ebp+0x8]
c0007fff:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0008004:	eb 04                	jmp    c000800a <f_mkfs+0xf6c>
c0008006:	89 da                	mov    edx,ebx
c0008008:	89 e8                	mov    eax,ebp
c000800a:	e8 f5 99 ff ff       	call   c0001a04 <st_dword>
c000800f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0008013:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008017:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000801b:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000801f:	39 ce                	cmp    esi,ecx
c0008021:	76 02                	jbe    c0008025 <f_mkfs+0xf87>
c0008023:	89 ce                	mov    esi,ecx
c0008025:	83 ec 0c             	sub    esp,0xc
c0008028:	56                   	push   esi
c0008029:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000802d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008031:	55                   	push   ebp
c0008032:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008036:	e8 1e 99 ff ff       	call   c0001959 <disk_write>
c000803b:	83 c4 20             	add    esp,0x20
c000803e:	85 c0                	test   eax,eax
c0008040:	0f 85 09 01 00 00    	jne    c000814f <f_mkfs+0x10b1>
c0008046:	31 d2                	xor    edx,edx
c0008048:	b9 00 02 00 00       	mov    ecx,0x200
c000804d:	89 e8                	mov    eax,ebp
c000804f:	e8 ce 99 ff ff       	call   c0001a22 <mem_set>
c0008054:	31 d2                	xor    edx,edx
c0008056:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c000805a:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c000805e:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0008062:	75 b3                	jne    c0008017 <f_mkfs+0xf79>
c0008064:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008067:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000806e:	40                   	inc    eax
c000806f:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c0008073:	0f 87 65 ff ff ff    	ja     c0007fde <f_mkfs+0xf40>
c0008079:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000807e:	74 04                	je     c0008084 <f_mkfs+0xfe6>
c0008080:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008084:	89 fb                	mov    ebx,edi
c0008086:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c000808a:	76 04                	jbe    c0008090 <f_mkfs+0xff2>
c000808c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008090:	83 ec 0c             	sub    esp,0xc
c0008093:	53                   	push   ebx
c0008094:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008098:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000809c:	55                   	push   ebp
c000809d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00080a1:	e8 b3 98 ff ff       	call   c0001959 <disk_write>
c00080a6:	83 c4 20             	add    esp,0x20
c00080a9:	85 c0                	test   eax,eax
c00080ab:	0f 85 9e 00 00 00    	jne    c000814f <f_mkfs+0x10b1>
c00080b1:	31 d2                	xor    edx,edx
c00080b3:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c00080b7:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00080bb:	29 df                	sub    edi,ebx
c00080bd:	75 c5                	jne    c0008084 <f_mkfs+0xfe6>
c00080bf:	b1 0c                	mov    cl,0xc
c00080c1:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080c6:	74 1d                	je     c00080e5 <f_mkfs+0x1047>
c00080c8:	b8 ff ff 00 00       	mov    eax,0xffff
c00080cd:	b1 06                	mov    cl,0x6
c00080cf:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c00080d3:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c00080d7:	72 0c                	jb     c00080e5 <f_mkfs+0x1047>
c00080d9:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00080de:	0f 94 c1             	sete   cl
c00080e1:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00080e5:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00080ea:	75 4c                	jne    c0008138 <f_mkfs+0x109a>
c00080ec:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00080f0:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00080f4:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00080fb:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0008102:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c000810d:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c0008118:	0f b6 c9             	movzx  ecx,cl
c000811b:	83 ec 0c             	sub    esp,0xc
c000811e:	55                   	push   ebp
c000811f:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c0008126:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000812a:	e8 2f c2 ff ff       	call   c000435e <create_partition>
c000812f:	83 c4 10             	add    esp,0x10
c0008132:	89 c3                	mov    ebx,eax
c0008134:	85 c0                	test   eax,eax
c0008136:	75 34                	jne    c000816c <f_mkfs+0x10ce>
c0008138:	31 db                	xor    ebx,ebx
c000813a:	50                   	push   eax
c000813b:	6a 00                	push   0x0
c000813d:	6a 00                	push   0x0
c000813f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008143:	e8 27 98 ff ff       	call   c000196f <disk_ioctl>
c0008148:	83 c4 10             	add    esp,0x10
c000814b:	85 c0                	test   eax,eax
c000814d:	74 1d                	je     c000816c <f_mkfs+0x10ce>
c000814f:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008157:	75 0c                	jne    c0008165 <f_mkfs+0x10c7>
c0008159:	83 ec 0c             	sub    esp,0xc
c000815c:	55                   	push   ebp
c000815d:	e8 75 00 00 00       	call   c00081d7 <ff_memfree>
c0008162:	83 c4 10             	add    esp,0x10
c0008165:	bb 01 00 00 00       	mov    ebx,0x1
c000816a:	eb 48                	jmp    c00081b4 <f_mkfs+0x1116>
c000816c:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008174:	75 3e                	jne    c00081b4 <f_mkfs+0x1116>
c0008176:	83 ec 0c             	sub    esp,0xc
c0008179:	55                   	push   ebp
c000817a:	e8 58 00 00 00       	call   c00081d7 <ff_memfree>
c000817f:	83 c4 10             	add    esp,0x10
c0008182:	eb 30                	jmp    c00081b4 <f_mkfs+0x1116>
c0008184:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008189:	0f 85 eb fa ff ff    	jne    c0007c7a <f_mkfs+0xbdc>
c000818f:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008193:	81 ff 80 00 00 00    	cmp    edi,0x80
c0008199:	0f 86 b8 f9 ff ff    	jbe    c0007b57 <f_mkfs+0xab9>
c000819f:	e9 bf fb ff ff       	jmp    c0007d63 <f_mkfs+0xcc5>
c00081a4:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c00081a9:	0f 85 c0 fa ff ff    	jne    c0007c6f <f_mkfs+0xbd1>
c00081af:	e9 af fb ff ff       	jmp    c0007d63 <f_mkfs+0xcc5>
c00081b4:	81 c4 9c 00 00 00    	add    esp,0x9c
c00081ba:	89 d8                	mov    eax,ebx
c00081bc:	5b                   	pop    ebx
c00081bd:	5e                   	pop    esi
c00081be:	5f                   	pop    edi
c00081bf:	5d                   	pop    ebp
c00081c0:	c3                   	ret    

c00081c1 <ff_memalloc>:
c00081c1:	83 ec 0c             	sub    esp,0xc
c00081c4:	83 ec 0c             	sub    esp,0xc
c00081c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00081cb:	e8 4e 3a 00 00       	call   c000bc1e <malloc>
c00081d0:	83 c4 10             	add    esp,0x10
c00081d3:	83 c4 0c             	add    esp,0xc
c00081d6:	c3                   	ret    

c00081d7 <ff_memfree>:
c00081d7:	83 ec 0c             	sub    esp,0xc
c00081da:	83 ec 0c             	sub    esp,0xc
c00081dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00081e1:	e8 48 3a 00 00       	call   c000bc2e <free>
c00081e6:	83 c4 10             	add    esp,0x10
c00081e9:	90                   	nop
c00081ea:	83 c4 0c             	add    esp,0xc
c00081ed:	c3                   	ret    

c00081ee <ff_uni2oem>:
c00081ee:	83 ec 14             	sub    esp,0x14
c00081f1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00081f5:	66 89 04 24          	mov    WORD PTR [esp],ax
c00081f9:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008200:	c7 44 24 0c 60 f7 01 c0 	mov    DWORD PTR [esp+0xc],0xc001f760
c0008208:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c000820d:	77 0b                	ja     c000821a <ff_uni2oem+0x2c>
c000820f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008213:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008218:	eb 5b                	jmp    c0008275 <ff_uni2oem+0x87>
c000821a:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0008222:	77 51                	ja     c0008275 <ff_uni2oem+0x87>
c0008224:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c000822a:	75 49                	jne    c0008275 <ff_uni2oem+0x87>
c000822c:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008233:	eb 0b                	jmp    c0008240 <ff_uni2oem+0x52>
c0008235:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000823a:	40                   	inc    eax
c000823b:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008240:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0008246:	77 1b                	ja     c0008263 <ff_uni2oem+0x75>
c0008248:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c000824d:	01 c0                	add    eax,eax
c000824f:	89 c2                	mov    edx,eax
c0008251:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008255:	01 d0                	add    eax,edx
c0008257:	66 8b 00             	mov    ax,WORD PTR [eax]
c000825a:	0f b7 c0             	movzx  eax,ax
c000825d:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008261:	75 d2                	jne    c0008235 <ff_uni2oem+0x47>
c0008263:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008268:	83 e8 80             	sub    eax,0xffffff80
c000826b:	25 ff 00 00 00       	and    eax,0xff
c0008270:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008275:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000827a:	83 c4 14             	add    esp,0x14
c000827d:	c3                   	ret    

c000827e <ff_oem2uni>:
c000827e:	83 ec 18             	sub    esp,0x18
c0008281:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008285:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008289:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c000828e:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008292:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0008299:	c7 44 24 10 60 f7 01 c0 	mov    DWORD PTR [esp+0x10],0xc001f760
c00082a1:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c00082a7:	77 0b                	ja     c00082b4 <ff_oem2uni+0x36>
c00082a9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00082ad:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00082b2:	eb 2d                	jmp    c00082e1 <ff_oem2uni+0x63>
c00082b4:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00082ba:	75 25                	jne    c00082e1 <ff_oem2uni+0x63>
c00082bc:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c00082c3:	77 1c                	ja     c00082e1 <ff_oem2uni+0x63>
c00082c5:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00082ca:	05 80 ff ff 7f       	add    eax,0x7fffff80
c00082cf:	01 c0                	add    eax,eax
c00082d1:	89 c2                	mov    edx,eax
c00082d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00082d7:	01 d0                	add    eax,edx
c00082d9:	66 8b 00             	mov    ax,WORD PTR [eax]
c00082dc:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00082e1:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00082e6:	83 c4 18             	add    esp,0x18
c00082e9:	c3                   	ret    

c00082ea <ff_wtoupper>:
c00082ea:	83 ec 10             	sub    esp,0x10
c00082ed:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00082f5:	0f 87 3e 01 00 00    	ja     c0008439 <ff_wtoupper+0x14f>
c00082fb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00082ff:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008304:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c000830b:	77 07                	ja     c0008314 <ff_wtoupper+0x2a>
c000830d:	b8 60 f5 01 c0       	mov    eax,0xc001f560
c0008312:	eb 05                	jmp    c0008319 <ff_wtoupper+0x2f>
c0008314:	b8 a0 f4 01 c0       	mov    eax,0xc001f4a0
c0008319:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000831d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008321:	8d 50 02             	lea    edx,[eax+0x2]
c0008324:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008328:	66 8b 00             	mov    ax,WORD PTR [eax]
c000832b:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0008330:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0008336:	0f 84 f4 00 00 00    	je     c0008430 <ff_wtoupper+0x146>
c000833c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008341:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008346:	0f 82 e4 00 00 00    	jb     c0008430 <ff_wtoupper+0x146>
c000834c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008350:	8d 50 02             	lea    edx,[eax+0x2]
c0008353:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008357:	66 8b 00             	mov    ax,WORD PTR [eax]
c000835a:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000835f:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0008364:	66 c1 e8 08          	shr    ax,0x8
c0008368:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c000836d:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0008374:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008379:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c000837e:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0008383:	01 ca                	add    edx,ecx
c0008385:	39 d0                	cmp    eax,edx
c0008387:	0f 8d 86 00 00 00    	jge    c0008413 <ff_wtoupper+0x129>
c000838d:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008392:	83 f8 08             	cmp    eax,0x8
c0008395:	0f 87 94 00 00 00    	ja     c000842f <ff_wtoupper+0x145>
c000839b:	8b 04 85 60 f4 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe0ba0]
c00083a2:	ff e0                	jmp    eax
c00083a4:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c00083a9:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c00083ae:	29 c2                	sub    edx,eax
c00083b0:	89 d0                	mov    eax,edx
c00083b2:	01 c0                	add    eax,eax
c00083b4:	89 c2                	mov    edx,eax
c00083b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083ba:	01 d0                	add    eax,edx
c00083bc:	66 8b 00             	mov    ax,WORD PTR [eax]
c00083bf:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00083c4:	eb 4b                	jmp    c0008411 <ff_wtoupper+0x127>
c00083c6:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00083cb:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00083cf:	83 e0 01             	and    eax,0x1
c00083d2:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c00083d7:	eb 38                	jmp    c0008411 <ff_wtoupper+0x127>
c00083d9:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c00083df:	eb 30                	jmp    c0008411 <ff_wtoupper+0x127>
c00083e1:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c00083e7:	eb 28                	jmp    c0008411 <ff_wtoupper+0x127>
c00083e9:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c00083ef:	eb 20                	jmp    c0008411 <ff_wtoupper+0x127>
c00083f1:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c00083f7:	eb 18                	jmp    c0008411 <ff_wtoupper+0x127>
c00083f9:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c00083ff:	eb 10                	jmp    c0008411 <ff_wtoupper+0x127>
c0008401:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c0008407:	eb 08                	jmp    c0008411 <ff_wtoupper+0x127>
c0008409:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c0008410:	90                   	nop
c0008411:	eb 1c                	jmp    c000842f <ff_wtoupper+0x145>
c0008413:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c0008419:	0f 85 fe fe ff ff    	jne    c000831d <ff_wtoupper+0x33>
c000841f:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0008424:	01 c0                	add    eax,eax
c0008426:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c000842a:	e9 ee fe ff ff       	jmp    c000831d <ff_wtoupper+0x33>
c000842f:	90                   	nop
c0008430:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008435:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008439:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000843d:	83 c4 10             	add    esp,0x10
c0008440:	c3                   	ret    

c0008441 <is_bad_src_ratio>:
c0008441:	83 ec 0c             	sub    esp,0xc
c0008444:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008448:	89 04 24             	mov    DWORD PTR [esp],eax
c000844b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000844f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008453:	dd 04 24             	fld    QWORD PTR [esp]
c0008456:	dd 05 20 fd 01 c0    	fld    QWORD PTR ds:0xc001fd20
c000845c:	de d9                	fcompp 
c000845e:	df e0                	fnstsw ax
c0008460:	f6 c4 45             	test   ah,0x45
c0008463:	74 10                	je     c0008475 <is_bad_src_ratio+0x34>
c0008465:	dd 04 24             	fld    QWORD PTR [esp]
c0008468:	dc 1d 28 fd 01 c0    	fcomp  QWORD PTR ds:0xc001fd28
c000846e:	df e0                	fnstsw ax
c0008470:	f6 c4 45             	test   ah,0x45
c0008473:	75 07                	jne    c000847c <is_bad_src_ratio+0x3b>
c0008475:	b8 01 00 00 00       	mov    eax,0x1
c000847a:	eb 05                	jmp    c0008481 <is_bad_src_ratio+0x40>
c000847c:	b8 00 00 00 00       	mov    eax,0x0
c0008481:	83 c4 0c             	add    esp,0xc
c0008484:	c3                   	ret    

c0008485 <psrc_set_converter>:
c0008485:	56                   	push   esi
c0008486:	89 d6                	mov    esi,edx
c0008488:	53                   	push   ebx
c0008489:	89 c3                	mov    ebx,eax
c000848b:	83 ec 0c             	sub    esp,0xc
c000848e:	52                   	push   edx
c000848f:	50                   	push   eax
c0008490:	e8 33 24 00 00       	call   c000a8c8 <sinc_set_converter>
c0008495:	83 c4 10             	add    esp,0x10
c0008498:	85 c0                	test   eax,eax
c000849a:	74 25                	je     c00084c1 <psrc_set_converter+0x3c>
c000849c:	50                   	push   eax
c000849d:	50                   	push   eax
c000849e:	56                   	push   esi
c000849f:	53                   	push   ebx
c00084a0:	e8 32 28 00 00       	call   c000acd7 <zoh_set_converter>
c00084a5:	83 c4 10             	add    esp,0x10
c00084a8:	85 c0                	test   eax,eax
c00084aa:	74 15                	je     c00084c1 <psrc_set_converter+0x3c>
c00084ac:	51                   	push   ecx
c00084ad:	51                   	push   ecx
c00084ae:	56                   	push   esi
c00084af:	53                   	push   ebx
c00084b0:	e8 10 0a 00 00       	call   c0008ec5 <linear_set_converter>
c00084b5:	83 c4 10             	add    esp,0x10
c00084b8:	ba 0a 00 00 00       	mov    edx,0xa
c00084bd:	85 c0                	test   eax,eax
c00084bf:	75 02                	jne    c00084c3 <psrc_set_converter+0x3e>
c00084c1:	31 d2                	xor    edx,edx
c00084c3:	89 d0                	mov    eax,edx
c00084c5:	5a                   	pop    edx
c00084c6:	5b                   	pop    ebx
c00084c7:	5e                   	pop    esi
c00084c8:	c3                   	ret    

c00084c9 <src_delete>:
c00084c9:	53                   	push   ebx
c00084ca:	83 ec 08             	sub    esp,0x8
c00084cd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00084d1:	85 db                	test   ebx,ebx
c00084d3:	74 29                	je     c00084fe <src_delete+0x35>
c00084d5:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00084d8:	85 c0                	test   eax,eax
c00084da:	74 0c                	je     c00084e8 <src_delete+0x1f>
c00084dc:	83 ec 0c             	sub    esp,0xc
c00084df:	50                   	push   eax
c00084e0:	e8 49 37 00 00       	call   c000bc2e <free>
c00084e5:	83 c4 10             	add    esp,0x10
c00084e8:	50                   	push   eax
c00084e9:	6a 3c                	push   0x3c
c00084eb:	6a 00                	push   0x0
c00084ed:	53                   	push   ebx
c00084ee:	e8 15 81 ff ff       	call   c0000608 <memset>
c00084f3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00084f6:	e8 33 37 00 00       	call   c000bc2e <free>
c00084fb:	83 c4 10             	add    esp,0x10
c00084fe:	31 c0                	xor    eax,eax
c0008500:	83 c4 08             	add    esp,0x8
c0008503:	5b                   	pop    ebx
c0008504:	c3                   	ret    

c0008505 <src_process>:
c0008505:	56                   	push   esi
c0008506:	53                   	push   ebx
c0008507:	53                   	push   ebx
c0008508:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000850c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0008510:	85 f6                	test   esi,esi
c0008512:	0f 84 e2 00 00 00    	je     c00085fa <src_process+0xf5>
c0008518:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c000851c:	0f 84 df 00 00 00    	je     c0008601 <src_process+0xfc>
c0008522:	83 7e 24 00          	cmp    DWORD PTR [esi+0x24],0x0
c0008526:	0f 84 d5 00 00 00    	je     c0008601 <src_process+0xfc>
c000852c:	81 7e 18 2b 02 00 00 	cmp    DWORD PTR [esi+0x18],0x22b
c0008533:	0f 85 cf 00 00 00    	jne    c0008608 <src_process+0x103>
c0008539:	85 db                	test   ebx,ebx
c000853b:	0f 84 ce 00 00 00    	je     c000860f <src_process+0x10a>
c0008541:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0008544:	0f 84 cc 00 00 00    	je     c0008616 <src_process+0x111>
c000854a:	83 7b 04 00          	cmp    DWORD PTR [ebx+0x4],0x0
c000854e:	0f 84 c2 00 00 00    	je     c0008616 <src_process+0x111>
c0008554:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0008557:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000855a:	e8 e2 fe ff ff       	call   c0008441 <is_bad_src_ratio>
c000855f:	5a                   	pop    edx
c0008560:	85 c0                	test   eax,eax
c0008562:	59                   	pop    ecx
c0008563:	0f 85 b4 00 00 00    	jne    c000861d <src_process+0x118>
c0008569:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000856d:	79 07                	jns    c0008576 <src_process+0x71>
c000856f:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008576:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c000857a:	79 07                	jns    c0008583 <src_process+0x7e>
c000857c:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008583:	8b 13                	mov    edx,DWORD PTR [ebx]
c0008585:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c0008588:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000858b:	39 ca                	cmp    edx,ecx
c000858d:	73 0b                	jae    c000859a <src_process+0x95>
c000858f:	0f af 43 08          	imul   eax,DWORD PTR [ebx+0x8]
c0008593:	8d 04 82             	lea    eax,[edx+eax*4]
c0008596:	39 c1                	cmp    ecx,eax
c0008598:	eb 09                	jmp    c00085a3 <src_process+0x9e>
c000859a:	0f af 43 0c          	imul   eax,DWORD PTR [ebx+0xc]
c000859e:	8d 04 81             	lea    eax,[ecx+eax*4]
c00085a1:	39 c2                	cmp    edx,eax
c00085a3:	72 7f                	jb     c0008624 <src_process+0x11f>
c00085a5:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00085ac:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00085b3:	d9 05 40 fd 01 c0    	fld    DWORD PTR ds:0xc001fd40
c00085b9:	dc 1e                	fcomp  QWORD PTR [esi]
c00085bb:	df e0                	fnstsw ax
c00085bd:	9e                   	sahf   
c00085be:	76 05                	jbe    c00085c5 <src_process+0xc0>
c00085c0:	dd 43 1c             	fld    QWORD PTR [ebx+0x1c]
c00085c3:	dd 1e                	fstp   QWORD PTR [esi]
c00085c5:	83 ec 10             	sub    esp,0x10
c00085c8:	dd 06                	fld    QWORD PTR [esi]
c00085ca:	dc 63 1c             	fsub   QWORD PTR [ebx+0x1c]
c00085cd:	dd 1c 24             	fstp   QWORD PTR [esp]
c00085d0:	e8 0b 60 01 00       	call   c001e5e0 <fabs>
c00085d5:	83 c4 10             	add    esp,0x10
c00085d8:	dd 05 30 fd 01 c0    	fld    QWORD PTR ds:0xc001fd30
c00085de:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00085e2:	de d9                	fcompp 
c00085e4:	df e0                	fnstsw ax
c00085e6:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00085ea:	9e                   	sahf   
c00085eb:	76 05                	jbe    c00085f2 <src_process+0xed>
c00085ed:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c00085f0:	eb 03                	jmp    c00085f5 <src_process+0xf0>
c00085f2:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00085f5:	59                   	pop    ecx
c00085f6:	5b                   	pop    ebx
c00085f7:	5e                   	pop    esi
c00085f8:	ff e0                	jmp    eax
c00085fa:	b8 02 00 00 00       	mov    eax,0x2
c00085ff:	eb 28                	jmp    c0008629 <src_process+0x124>
c0008601:	b8 07 00 00 00       	mov    eax,0x7
c0008606:	eb 21                	jmp    c0008629 <src_process+0x124>
c0008608:	b8 12 00 00 00       	mov    eax,0x12
c000860d:	eb 1a                	jmp    c0008629 <src_process+0x124>
c000860f:	b8 03 00 00 00       	mov    eax,0x3
c0008614:	eb 13                	jmp    c0008629 <src_process+0x124>
c0008616:	b8 04 00 00 00       	mov    eax,0x4
c000861b:	eb 0c                	jmp    c0008629 <src_process+0x124>
c000861d:	b8 06 00 00 00       	mov    eax,0x6
c0008622:	eb 05                	jmp    c0008629 <src_process+0x124>
c0008624:	b8 10 00 00 00       	mov    eax,0x10
c0008629:	5a                   	pop    edx
c000862a:	5b                   	pop    ebx
c000862b:	5e                   	pop    esi
c000862c:	c3                   	ret    

c000862d <src_callback_read>:
c000862d:	55                   	push   ebp
c000862e:	57                   	push   edi
c000862f:	56                   	push   esi
c0008630:	53                   	push   ebx
c0008631:	83 ec 4c             	sub    esp,0x4c
c0008634:	dd 44 24 64          	fld    QWORD PTR [esp+0x64]
c0008638:	8b 7c 24 6c          	mov    edi,DWORD PTR [esp+0x6c]
c000863c:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c0008640:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0008644:	85 ff                	test   edi,edi
c0008646:	0f 8e 36 01 00 00    	jle    c0008782 <src_callback_read+0x155>
c000864c:	85 db                	test   ebx,ebx
c000864e:	0f 84 2e 01 00 00    	je     c0008782 <src_callback_read+0x155>
c0008654:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c000865b:	74 0c                	je     c0008669 <src_callback_read+0x3c>
c000865d:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008664:	e9 19 01 00 00       	jmp    c0008782 <src_callback_read+0x155>
c0008669:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c000866d:	75 0c                	jne    c000867b <src_callback_read+0x4e>
c000866f:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008676:	e9 07 01 00 00       	jmp    c0008782 <src_callback_read+0x155>
c000867b:	51                   	push   ecx
c000867c:	6a 24                	push   0x24
c000867e:	6a 00                	push   0x0
c0008680:	8d 44 24 28          	lea    eax,[esp+0x28]
c0008684:	50                   	push   eax
c0008685:	e8 7e 7f ff ff       	call   c0000608 <memset>
c000868a:	5e                   	pop    esi
c000868b:	5d                   	pop    ebp
c000868c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008690:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008694:	e8 a8 fd ff ff       	call   c0008441 <is_bad_src_ratio>
c0008699:	83 c4 10             	add    esp,0x10
c000869c:	85 c0                	test   eax,eax
c000869e:	74 0c                	je     c00086ac <src_callback_read+0x7f>
c00086a0:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c00086a7:	e9 d6 00 00 00       	jmp    c0008782 <src_callback_read+0x155>
c00086ac:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00086b0:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c00086b4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00086b8:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00086bc:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00086bf:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c00086c3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00086c7:	31 f6                	xor    esi,esi
c00086c9:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00086cc:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00086d0:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00086d5:	75 30                	jne    c0008707 <src_callback_read+0xda>
c00086d7:	8d 44 24 14          	lea    eax,[esp+0x14]
c00086db:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00086df:	52                   	push   edx
c00086e0:	52                   	push   edx
c00086e1:	8d 44 24 20          	lea    eax,[esp+0x20]
c00086e5:	50                   	push   eax
c00086e6:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00086e9:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c00086ec:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00086f0:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00086f4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00086f8:	83 c4 10             	add    esp,0x10
c00086fb:	85 c0                	test   eax,eax
c00086fd:	75 08                	jne    c0008707 <src_callback_read+0xda>
c00086ff:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0008707:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c000870e:	50                   	push   eax
c000870f:	50                   	push   eax
c0008710:	8d 44 24 24          	lea    eax,[esp+0x24]
c0008714:	50                   	push   eax
c0008715:	53                   	push   ebx
c0008716:	e8 ea fd ff ff       	call   c0008505 <src_process>
c000871b:	83 c4 10             	add    esp,0x10
c000871e:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008725:	85 c0                	test   eax,eax
c0008727:	75 42                	jne    c000876b <src_callback_read+0x13e>
c0008729:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c000872d:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008730:	89 e9                	mov    ecx,ebp
c0008732:	29 6c 24 24          	sub    DWORD PTR [esp+0x24],ebp
c0008736:	0f af ca             	imul   ecx,edx
c0008739:	c1 e1 02             	shl    ecx,0x2
c000873c:	01 4c 24 1c          	add    DWORD PTR [esp+0x1c],ecx
c0008740:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0008744:	0f af d1             	imul   edx,ecx
c0008747:	29 4c 24 28          	sub    DWORD PTR [esp+0x28],ecx
c000874b:	c1 e2 02             	shl    edx,0x2
c000874e:	01 54 24 20          	add    DWORD PTR [esp+0x20],edx
c0008752:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008755:	83 7c 24 34 01       	cmp    DWORD PTR [esp+0x34],0x1
c000875a:	75 04                	jne    c0008760 <src_callback_read+0x133>
c000875c:	85 c9                	test   ecx,ecx
c000875e:	74 0b                	je     c000876b <src_callback_read+0x13e>
c0008760:	39 d7                	cmp    edi,edx
c0008762:	7e 09                	jle    c000876d <src_callback_read+0x140>
c0008764:	89 d6                	mov    esi,edx
c0008766:	e9 65 ff ff ff       	jmp    c00086d0 <src_callback_read+0xa3>
c000876b:	89 f2                	mov    edx,esi
c000876d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0008771:	85 c0                	test   eax,eax
c0008773:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008776:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000877a:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c000877d:	74 05                	je     c0008784 <src_callback_read+0x157>
c000877f:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008782:	31 d2                	xor    edx,edx
c0008784:	83 c4 4c             	add    esp,0x4c
c0008787:	89 d0                	mov    eax,edx
c0008789:	5b                   	pop    ebx
c000878a:	5e                   	pop    esi
c000878b:	5f                   	pop    edi
c000878c:	5d                   	pop    ebp
c000878d:	c3                   	ret    

c000878e <src_set_ratio>:
c000878e:	53                   	push   ebx
c000878f:	b8 02 00 00 00       	mov    eax,0x2
c0008794:	83 ec 08             	sub    esp,0x8
c0008797:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000879b:	dd 44 24 14          	fld    QWORD PTR [esp+0x14]
c000879f:	85 db                	test   ebx,ebx
c00087a1:	74 33                	je     c00087d6 <src_set_ratio+0x48>
c00087a3:	b8 07 00 00 00       	mov    eax,0x7
c00087a8:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c00087ac:	74 2c                	je     c00087da <src_set_ratio+0x4c>
c00087ae:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c00087b2:	74 2a                	je     c00087de <src_set_ratio+0x50>
c00087b4:	50                   	push   eax
c00087b5:	50                   	push   eax
c00087b6:	dd 14 24             	fst    QWORD PTR [esp]
c00087b9:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c00087bd:	e8 7f fc ff ff       	call   c0008441 <is_bad_src_ratio>
c00087c2:	5a                   	pop    edx
c00087c3:	85 c0                	test   eax,eax
c00087c5:	59                   	pop    ecx
c00087c6:	75 07                	jne    c00087cf <src_set_ratio+0x41>
c00087c8:	dd 04 24             	fld    QWORD PTR [esp]
c00087cb:	dd 1b                	fstp   QWORD PTR [ebx]
c00087cd:	eb 11                	jmp    c00087e0 <src_set_ratio+0x52>
c00087cf:	b8 06 00 00 00       	mov    eax,0x6
c00087d4:	eb 0a                	jmp    c00087e0 <src_set_ratio+0x52>
c00087d6:	dd d8                	fstp   st(0)
c00087d8:	eb 06                	jmp    c00087e0 <src_set_ratio+0x52>
c00087da:	dd d8                	fstp   st(0)
c00087dc:	eb 02                	jmp    c00087e0 <src_set_ratio+0x52>
c00087de:	dd d8                	fstp   st(0)
c00087e0:	83 c4 08             	add    esp,0x8
c00087e3:	5b                   	pop    ebx
c00087e4:	c3                   	ret    

c00087e5 <src_get_channels>:
c00087e5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00087e9:	b8 02 00 00 00       	mov    eax,0x2
c00087ee:	85 d2                	test   edx,edx
c00087f0:	74 14                	je     c0008806 <src_get_channels+0x21>
c00087f2:	b8 07 00 00 00       	mov    eax,0x7
c00087f7:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c00087fb:	74 09                	je     c0008806 <src_get_channels+0x21>
c00087fd:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008801:	74 03                	je     c0008806 <src_get_channels+0x21>
c0008803:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008806:	c3                   	ret    

c0008807 <src_reset>:
c0008807:	53                   	push   ebx
c0008808:	b8 02 00 00 00       	mov    eax,0x2
c000880d:	83 ec 08             	sub    esp,0x8
c0008810:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008814:	85 db                	test   ebx,ebx
c0008816:	74 2e                	je     c0008846 <src_reset+0x3f>
c0008818:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000881b:	85 c0                	test   eax,eax
c000881d:	74 09                	je     c0008828 <src_reset+0x21>
c000881f:	83 ec 0c             	sub    esp,0xc
c0008822:	53                   	push   ebx
c0008823:	ff d0                	call   eax
c0008825:	83 c4 10             	add    esp,0x10
c0008828:	d9 ee                	fldz   
c000882a:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008831:	dd 53 08             	fst    QWORD PTR [ebx+0x8]
c0008834:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000883b:	dd 1b                	fstp   QWORD PTR [ebx]
c000883d:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008844:	31 c0                	xor    eax,eax
c0008846:	83 c4 08             	add    esp,0x8
c0008849:	5b                   	pop    ebx
c000884a:	c3                   	ret    

c000884b <src_new>:
c000884b:	57                   	push   edi
c000884c:	56                   	push   esi
c000884d:	53                   	push   ebx
c000884e:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008852:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008856:	85 f6                	test   esi,esi
c0008858:	74 73                	je     c00088cd <src_new+0x82>
c000885a:	85 ff                	test   edi,edi
c000885c:	7f 08                	jg     c0008866 <src_new+0x1b>
c000885e:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008864:	eb 1e                	jmp    c0008884 <src_new+0x39>
c0008866:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c000886c:	50                   	push   eax
c000886d:	50                   	push   eax
c000886e:	6a 3c                	push   0x3c
c0008870:	6a 01                	push   0x1
c0008872:	e8 d7 33 00 00       	call   c000bc4e <calloc>
c0008877:	83 c4 10             	add    esp,0x10
c000887a:	89 c3                	mov    ebx,eax
c000887c:	85 c0                	test   eax,eax
c000887e:	75 10                	jne    c0008890 <src_new+0x45>
c0008880:	85 f6                	test   esi,esi
c0008882:	75 04                	jne    c0008888 <src_new+0x3d>
c0008884:	31 db                	xor    ebx,ebx
c0008886:	eb 4b                	jmp    c00088d3 <src_new+0x88>
c0008888:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c000888e:	eb 43                	jmp    c00088d3 <src_new+0x88>
c0008890:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008893:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c000889a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000889e:	e8 e2 fb ff ff       	call   c0008485 <psrc_set_converter>
c00088a3:	85 c0                	test   eax,eax
c00088a5:	74 18                	je     c00088bf <src_new+0x74>
c00088a7:	85 f6                	test   esi,esi
c00088a9:	74 06                	je     c00088b1 <src_new+0x66>
c00088ab:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c00088b1:	83 ec 0c             	sub    esp,0xc
c00088b4:	53                   	push   ebx
c00088b5:	31 db                	xor    ebx,ebx
c00088b7:	e8 72 33 00 00       	call   c000bc2e <free>
c00088bc:	83 c4 10             	add    esp,0x10
c00088bf:	83 ec 0c             	sub    esp,0xc
c00088c2:	53                   	push   ebx
c00088c3:	e8 3f ff ff ff       	call   c0008807 <src_reset>
c00088c8:	83 c4 10             	add    esp,0x10
c00088cb:	eb 06                	jmp    c00088d3 <src_new+0x88>
c00088cd:	85 ff                	test   edi,edi
c00088cf:	7f 9b                	jg     c000886c <src_new+0x21>
c00088d1:	eb b1                	jmp    c0008884 <src_new+0x39>
c00088d3:	89 d8                	mov    eax,ebx
c00088d5:	5b                   	pop    ebx
c00088d6:	5e                   	pop    esi
c00088d7:	5f                   	pop    edi
c00088d8:	c3                   	ret    

c00088d9 <src_callback_new>:
c00088d9:	56                   	push   esi
c00088da:	53                   	push   ebx
c00088db:	53                   	push   ebx
c00088dc:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00088e0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00088e4:	85 f6                	test   esi,esi
c00088e6:	75 0e                	jne    c00088f6 <src_callback_new+0x1d>
c00088e8:	31 db                	xor    ebx,ebx
c00088ea:	85 c0                	test   eax,eax
c00088ec:	74 47                	je     c0008935 <src_callback_new+0x5c>
c00088ee:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c00088f4:	eb 3f                	jmp    c0008935 <src_callback_new+0x5c>
c00088f6:	85 c0                	test   eax,eax
c00088f8:	74 06                	je     c0008900 <src_callback_new+0x27>
c00088fa:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008900:	51                   	push   ecx
c0008901:	50                   	push   eax
c0008902:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008906:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000890a:	e8 3c ff ff ff       	call   c000884b <src_new>
c000890f:	83 c4 10             	add    esp,0x10
c0008912:	89 c3                	mov    ebx,eax
c0008914:	85 c0                	test   eax,eax
c0008916:	74 1d                	je     c0008935 <src_callback_new+0x5c>
c0008918:	83 ec 0c             	sub    esp,0xc
c000891b:	50                   	push   eax
c000891c:	e8 e6 fe ff ff       	call   c0008807 <src_reset>
c0008921:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008925:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c000892c:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000892f:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008932:	83 c4 10             	add    esp,0x10
c0008935:	89 d8                	mov    eax,ebx
c0008937:	5a                   	pop    edx
c0008938:	5b                   	pop    ebx
c0008939:	5e                   	pop    esi
c000893a:	c3                   	ret    

c000893b <src_get_name>:
c000893b:	53                   	push   ebx
c000893c:	83 ec 14             	sub    esp,0x14
c000893f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008943:	53                   	push   ebx
c0008944:	e8 59 1f 00 00       	call   c000a8a2 <sinc_get_name>
c0008949:	83 c4 10             	add    esp,0x10
c000894c:	85 c0                	test   eax,eax
c000894e:	75 1d                	jne    c000896d <src_get_name+0x32>
c0008950:	83 ec 0c             	sub    esp,0xc
c0008953:	53                   	push   ebx
c0008954:	e8 60 23 00 00       	call   c000acb9 <zoh_get_name>
c0008959:	83 c4 10             	add    esp,0x10
c000895c:	85 c0                	test   eax,eax
c000895e:	75 0d                	jne    c000896d <src_get_name+0x32>
c0008960:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008964:	83 c4 08             	add    esp,0x8
c0008967:	5b                   	pop    ebx
c0008968:	e9 3a 05 00 00       	jmp    c0008ea7 <linear_get_name>
c000896d:	83 c4 08             	add    esp,0x8
c0008970:	5b                   	pop    ebx
c0008971:	c3                   	ret    

c0008972 <src_get_description>:
c0008972:	53                   	push   ebx
c0008973:	83 ec 14             	sub    esp,0x14
c0008976:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000897a:	53                   	push   ebx
c000897b:	e8 35 1f 00 00       	call   c000a8b5 <sinc_get_description>
c0008980:	83 c4 10             	add    esp,0x10
c0008983:	85 c0                	test   eax,eax
c0008985:	75 1d                	jne    c00089a4 <src_get_description+0x32>
c0008987:	83 ec 0c             	sub    esp,0xc
c000898a:	53                   	push   ebx
c000898b:	e8 38 23 00 00       	call   c000acc8 <zoh_get_description>
c0008990:	83 c4 10             	add    esp,0x10
c0008993:	85 c0                	test   eax,eax
c0008995:	75 0d                	jne    c00089a4 <src_get_description+0x32>
c0008997:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000899b:	83 c4 08             	add    esp,0x8
c000899e:	5b                   	pop    ebx
c000899f:	e9 12 05 00 00       	jmp    c0008eb6 <linear_get_description>
c00089a4:	83 c4 08             	add    esp,0x8
c00089a7:	5b                   	pop    ebx
c00089a8:	c3                   	ret    

c00089a9 <src_get_version>:
c00089a9:	b8 60 f8 01 c0       	mov    eax,0xc001f860
c00089ae:	c3                   	ret    

c00089af <src_is_valid_ratio>:
c00089af:	50                   	push   eax
c00089b0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00089b4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00089b8:	e8 84 fa ff ff       	call   c0008441 <is_bad_src_ratio>
c00089bd:	85 c0                	test   eax,eax
c00089bf:	0f 94 c0             	sete   al
c00089c2:	83 c4 0c             	add    esp,0xc
c00089c5:	0f b6 c0             	movzx  eax,al
c00089c8:	c3                   	ret    

c00089c9 <src_error>:
c00089c9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00089cd:	31 c0                	xor    eax,eax
c00089cf:	85 d2                	test   edx,edx
c00089d1:	74 03                	je     c00089d6 <src_error+0xd>
c00089d3:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c00089d6:	c3                   	ret    

c00089d7 <src_strerror>:
c00089d7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00089db:	31 c0                	xor    eax,eax
c00089dd:	83 fa 17             	cmp    edx,0x17
c00089e0:	77 07                	ja     c00089e9 <src_strerror+0x12>
c00089e2:	8b 04 95 c0 fc 01 c0 	mov    eax,DWORD PTR [edx*4-0x3ffe0340]
c00089e9:	c3                   	ret    

c00089ea <src_simple>:
c00089ea:	56                   	push   esi
c00089eb:	53                   	push   ebx
c00089ec:	83 ec 18             	sub    esp,0x18
c00089ef:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00089f3:	8d 44 24 10          	lea    eax,[esp+0x10]
c00089f7:	50                   	push   eax
c00089f8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00089fc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008a00:	e8 46 fe ff ff       	call   c000884b <src_new>
c0008a05:	83 c4 10             	add    esp,0x10
c0008a08:	85 c0                	test   eax,eax
c0008a0a:	75 06                	jne    c0008a12 <src_simple+0x28>
c0008a0c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008a10:	eb 25                	jmp    c0008a37 <src_simple+0x4d>
c0008a12:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008a19:	89 c3                	mov    ebx,eax
c0008a1b:	50                   	push   eax
c0008a1c:	50                   	push   eax
c0008a1d:	56                   	push   esi
c0008a1e:	53                   	push   ebx
c0008a1f:	e8 e1 fa ff ff       	call   c0008505 <src_process>
c0008a24:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008a27:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008a2b:	e8 99 fa ff ff       	call   c00084c9 <src_delete>
c0008a30:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008a34:	83 c4 10             	add    esp,0x10
c0008a37:	83 c4 14             	add    esp,0x14
c0008a3a:	5b                   	pop    ebx
c0008a3b:	5e                   	pop    esi
c0008a3c:	c3                   	ret    

c0008a3d <src_short_to_float_array>:
c0008a3d:	83 ec 0c             	sub    esp,0xc
c0008a40:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008a44:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008a48:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008a4c:	85 c0                	test   eax,eax
c0008a4e:	74 0f                	je     c0008a5f <src_short_to_float_array+0x22>
c0008a50:	48                   	dec    eax
c0008a51:	d9 05 44 fd 01 c0    	fld    DWORD PTR ds:0xc001fd44
c0008a57:	de 0c 42             	fimul  WORD PTR [edx+eax*2]
c0008a5a:	d9 1c 81             	fstp   DWORD PTR [ecx+eax*4]
c0008a5d:	eb ed                	jmp    c0008a4c <src_short_to_float_array+0xf>
c0008a5f:	83 c4 0c             	add    esp,0xc
c0008a62:	c3                   	ret    

c0008a63 <src_float_to_short_array>:
c0008a63:	56                   	push   esi
c0008a64:	53                   	push   ebx
c0008a65:	52                   	push   edx
c0008a66:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008a6a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008a6e:	85 db                	test   ebx,ebx
c0008a70:	74 51                	je     c0008ac3 <src_float_to_short_array+0x60>
c0008a72:	4b                   	dec    ebx
c0008a73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a77:	d9 05 48 fd 01 c0    	fld    DWORD PTR ds:0xc001fd48
c0008a7d:	d8 0c 98             	fmul   DWORD PTR [eax+ebx*4]
c0008a80:	dc 15 38 fd 01 c0    	fcom   QWORD PTR ds:0xc001fd38
c0008a86:	df e0                	fnstsw ax
c0008a88:	9e                   	sahf   
c0008a89:	72 0a                	jb     c0008a95 <src_float_to_short_array+0x32>
c0008a8b:	dd d8                	fstp   st(0)
c0008a8d:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008a93:	eb d9                	jmp    c0008a6e <src_float_to_short_array+0xb>
c0008a95:	d9 05 4c fd 01 c0    	fld    DWORD PTR ds:0xc001fd4c
c0008a9b:	d8 d9                	fcomp  st(1)
c0008a9d:	df e0                	fnstsw ax
c0008a9f:	9e                   	sahf   
c0008aa0:	72 0a                	jb     c0008aac <src_float_to_short_array+0x49>
c0008aa2:	dd d8                	fstp   st(0)
c0008aa4:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008aaa:	eb c2                	jmp    c0008a6e <src_float_to_short_array+0xb>
c0008aac:	83 ec 10             	sub    esp,0x10
c0008aaf:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008ab2:	e8 49 5b 01 00       	call   c001e600 <lrint>
c0008ab7:	83 c4 10             	add    esp,0x10
c0008aba:	c1 f8 10             	sar    eax,0x10
c0008abd:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008ac1:	eb ab                	jmp    c0008a6e <src_float_to_short_array+0xb>
c0008ac3:	58                   	pop    eax
c0008ac4:	5b                   	pop    ebx
c0008ac5:	5e                   	pop    esi
c0008ac6:	c3                   	ret    

c0008ac7 <src_int_to_float_array>:
c0008ac7:	83 ec 0c             	sub    esp,0xc
c0008aca:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008ace:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008ad2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008ad6:	85 c0                	test   eax,eax
c0008ad8:	74 0f                	je     c0008ae9 <src_int_to_float_array+0x22>
c0008ada:	48                   	dec    eax
c0008adb:	d9 05 50 fd 01 c0    	fld    DWORD PTR ds:0xc001fd50
c0008ae1:	da 0c 82             	fimul  DWORD PTR [edx+eax*4]
c0008ae4:	d9 1c 81             	fstp   DWORD PTR [ecx+eax*4]
c0008ae7:	eb ed                	jmp    c0008ad6 <src_int_to_float_array+0xf>
c0008ae9:	83 c4 0c             	add    esp,0xc
c0008aec:	c3                   	ret    

c0008aed <src_float_to_int_array>:
c0008aed:	56                   	push   esi
c0008aee:	53                   	push   ebx
c0008aef:	52                   	push   edx
c0008af0:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008af4:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008af8:	85 db                	test   ebx,ebx
c0008afa:	74 4f                	je     c0008b4b <src_float_to_int_array+0x5e>
c0008afc:	4b                   	dec    ebx
c0008afd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b01:	d9 05 48 fd 01 c0    	fld    DWORD PTR ds:0xc001fd48
c0008b07:	d8 0c 98             	fmul   DWORD PTR [eax+ebx*4]
c0008b0a:	dc 15 38 fd 01 c0    	fcom   QWORD PTR ds:0xc001fd38
c0008b10:	df e0                	fnstsw ax
c0008b12:	9e                   	sahf   
c0008b13:	72 0b                	jb     c0008b20 <src_float_to_int_array+0x33>
c0008b15:	dd d8                	fstp   st(0)
c0008b17:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008b1e:	eb d8                	jmp    c0008af8 <src_float_to_int_array+0xb>
c0008b20:	d9 05 4c fd 01 c0    	fld    DWORD PTR ds:0xc001fd4c
c0008b26:	d8 d9                	fcomp  st(1)
c0008b28:	df e0                	fnstsw ax
c0008b2a:	9e                   	sahf   
c0008b2b:	72 0b                	jb     c0008b38 <src_float_to_int_array+0x4b>
c0008b2d:	dd d8                	fstp   st(0)
c0008b2f:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008b36:	eb c0                	jmp    c0008af8 <src_float_to_int_array+0xb>
c0008b38:	83 ec 10             	sub    esp,0x10
c0008b3b:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008b3e:	e8 bd 5a 01 00       	call   c001e600 <lrint>
c0008b43:	83 c4 10             	add    esp,0x10
c0008b46:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0008b49:	eb ad                	jmp    c0008af8 <src_float_to_int_array+0xb>
c0008b4b:	58                   	pop    eax
c0008b4c:	5b                   	pop    ebx
c0008b4d:	5e                   	pop    esi
c0008b4e:	c3                   	ret    

c0008b4f <is_bad_src_ratio>:
c0008b4f:	83 ec 0c             	sub    esp,0xc
c0008b52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b56:	89 04 24             	mov    DWORD PTR [esp],eax
c0008b59:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008b5d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008b61:	dd 04 24             	fld    QWORD PTR [esp]
c0008b64:	dd 05 20 fd 01 c0    	fld    QWORD PTR ds:0xc001fd20
c0008b6a:	de d9                	fcompp 
c0008b6c:	df e0                	fnstsw ax
c0008b6e:	f6 c4 45             	test   ah,0x45
c0008b71:	74 10                	je     c0008b83 <is_bad_src_ratio+0x34>
c0008b73:	dd 04 24             	fld    QWORD PTR [esp]
c0008b76:	dc 1d 28 fd 01 c0    	fcomp  QWORD PTR ds:0xc001fd28
c0008b7c:	df e0                	fnstsw ax
c0008b7e:	f6 c4 45             	test   ah,0x45
c0008b81:	75 07                	jne    c0008b8a <is_bad_src_ratio+0x3b>
c0008b83:	b8 01 00 00 00       	mov    eax,0x1
c0008b88:	eb 05                	jmp    c0008b8f <is_bad_src_ratio+0x40>
c0008b8a:	b8 00 00 00 00       	mov    eax,0x0
c0008b8f:	83 c4 0c             	add    esp,0xc
c0008b92:	c3                   	ret    

c0008b93 <fmod_one>:
c0008b93:	83 ec 2c             	sub    esp,0x2c
c0008b96:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008b9a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008b9e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0008ba2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008ba6:	83 ec 08             	sub    esp,0x8
c0008ba9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bb1:	e8 4a 5a 01 00       	call   c001e600 <lrint>
c0008bb6:	83 c4 10             	add    esp,0x10
c0008bb9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008bbd:	db 44 24 04          	fild   DWORD PTR [esp+0x4]
c0008bc1:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008bc5:	de e1                	fsubrp st(1),st
c0008bc7:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0008bcb:	d9 ee                	fldz   
c0008bcd:	dc 5c 24 18          	fcomp  QWORD PTR [esp+0x18]
c0008bd1:	df e0                	fnstsw ax
c0008bd3:	f6 c4 45             	test   ah,0x45
c0008bd6:	75 0a                	jne    c0008be2 <fmod_one+0x4f>
c0008bd8:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0008bdc:	d9 e8                	fld1   
c0008bde:	de c1                	faddp  st(1),st
c0008be0:	eb 04                	jmp    c0008be6 <fmod_one+0x53>
c0008be2:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0008be6:	83 c4 2c             	add    esp,0x2c
c0008be9:	c3                   	ret    

c0008bea <linear_vari_process>:
c0008bea:	55                   	push   ebp
c0008beb:	57                   	push   edi
c0008bec:	56                   	push   esi
c0008bed:	53                   	push   ebx
c0008bee:	83 ec 2c             	sub    esp,0x2c
c0008bf1:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0008bf5:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0008bf9:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0008c01:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0008c05:	0f 8e 5e 02 00 00    	jle    c0008e69 <linear_vari_process+0x27f>
c0008c0b:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c0008c0e:	c7 44 24 18 05 00 00 00 	mov    DWORD PTR [esp+0x18],0x5
c0008c16:	85 db                	test   ebx,ebx
c0008c18:	0f 84 4b 02 00 00    	je     c0008e69 <linear_vari_process+0x27f>
c0008c1e:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0008c21:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008c25:	74 19                	je     c0008c40 <linear_vari_process+0x56>
c0008c27:	31 d2                	xor    edx,edx
c0008c29:	39 c2                	cmp    edx,eax
c0008c2b:	7d 0c                	jge    c0008c39 <linear_vari_process+0x4f>
c0008c2d:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0008c2f:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c0008c32:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c0008c36:	42                   	inc    edx
c0008c37:	eb f0                	jmp    c0008c29 <linear_vari_process+0x3f>
c0008c39:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008c40:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0008c43:	0f af d0             	imul   edx,eax
c0008c46:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008c49:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0008c4d:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0008c54:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0008c57:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008c5e:	dd 07                	fld    QWORD PTR [edi]
c0008c60:	dd 14 24             	fst    QWORD PTR [esp]
c0008c63:	50                   	push   eax
c0008c64:	50                   	push   eax
c0008c65:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008c68:	e8 e2 fe ff ff       	call   c0008b4f <is_bad_src_ratio>
c0008c6d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0008c71:	5a                   	pop    edx
c0008c72:	59                   	pop    ecx
c0008c73:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0008c78:	0f 85 e3 01 00 00    	jne    c0008e61 <linear_vari_process+0x277>
c0008c7e:	dd 47 08             	fld    QWORD PTR [edi+0x8]
c0008c81:	d9 e8                	fld1   
c0008c83:	d8 d1                	fcom   st(1)
c0008c85:	df e0                	fnstsw ax
c0008c87:	9e                   	sahf   
c0008c88:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0008c8c:	0f 86 99 00 00 00    	jbe    c0008d2b <linear_vari_process+0x141>
c0008c92:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008c95:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0008c98:	0f 8d 8d 00 00 00    	jge    c0008d2b <linear_vari_process+0x141>
c0008c9e:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008ca2:	d8 c1                	fadd   st,st(1)
c0008ca4:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c0008ca7:	da 43 10             	fiadd  DWORD PTR [ebx+0x10]
c0008caa:	da 5b 0c             	ficomp DWORD PTR [ebx+0xc]
c0008cad:	df e0                	fnstsw ax
c0008caf:	9e                   	sahf   
c0008cb0:	73 79                	jae    c0008d2b <linear_vari_process+0x141>
c0008cb2:	85 d2                	test   edx,edx
c0008cb4:	7e 38                	jle    c0008cee <linear_vari_process+0x104>
c0008cb6:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0008cba:	83 ec 10             	sub    esp,0x10
c0008cbd:	dd 07                	fld    QWORD PTR [edi]
c0008cbf:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c0008cc2:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008cc5:	e8 16 59 01 00       	call   c001e5e0 <fabs>
c0008cca:	83 c4 10             	add    esp,0x10
c0008ccd:	dc 1d 98 fd 01 c0    	fcomp  QWORD PTR ds:0xc001fd98
c0008cd3:	df e0                	fnstsw ax
c0008cd5:	9e                   	sahf   
c0008cd6:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0008cda:	76 12                	jbe    c0008cee <linear_vari_process+0x104>
c0008cdc:	dd 07                	fld    QWORD PTR [edi]
c0008cde:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c0008ce1:	d8 e1                	fsub   st,st(1)
c0008ce3:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c0008ce6:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c0008ce9:	de c1                	faddp  st(1),st
c0008ceb:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008cee:	31 c0                	xor    eax,eax
c0008cf0:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c0008cf3:	7e 1f                	jle    c0008d14 <linear_vari_process+0x12a>
c0008cf5:	d9 44 83 1c          	fld    DWORD PTR [ebx+eax*4+0x1c]
c0008cf9:	8b 2e                	mov    ebp,DWORD PTR [esi]
c0008cfb:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0008cfe:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0008d02:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0008d05:	d8 e1                	fsub   st,st(1)
c0008d07:	40                   	inc    eax
c0008d08:	d8 ca                	fmul   st,st(2)
c0008d0a:	de c1                	faddp  st(1),st
c0008d0c:	d9 1c 8a             	fstp   DWORD PTR [edx+ecx*4]
c0008d0f:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0008d12:	eb dc                	jmp    c0008cf0 <linear_vari_process+0x106>
c0008d14:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008d18:	dc 34 24             	fdiv   QWORD PTR [esp]
c0008d1b:	de c1                	faddp  st(1),st
c0008d1d:	e9 5f ff ff ff       	jmp    c0008c81 <linear_vari_process+0x97>
c0008d22:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008d26:	dc 34 24             	fdiv   QWORD PTR [esp]
c0008d29:	de c1                	faddp  st(1),st
c0008d2b:	83 ec 10             	sub    esp,0x10
c0008d2e:	dd 14 24             	fst    QWORD PTR [esp]
c0008d31:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0008d35:	e8 59 fe ff ff       	call   c0008b93 <fmod_one>
c0008d3a:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0008d3d:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0008d41:	d8 e1                	fsub   st,st(1)
c0008d43:	d9 c9                	fxch   st(1)
c0008d45:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0008d49:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008d4c:	e8 af 58 01 00       	call   c001e600 <lrint>
c0008d51:	83 c4 10             	add    esp,0x10
c0008d54:	0f af e8             	imul   ebp,eax
c0008d57:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0008d5b:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c0008d5e:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c0008d61:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c0008d64:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0008d67:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c0008d6a:	0f 8d 97 00 00 00    	jge    c0008e07 <linear_vari_process+0x21d>
c0008d70:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0008d74:	d9 c0                	fld    st(0)
c0008d76:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c0008d79:	da 44 24 10          	fiadd  DWORD PTR [esp+0x10]
c0008d7d:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0008d81:	db 44 24 10          	fild   DWORD PTR [esp+0x10]
c0008d85:	de d9                	fcompp 
c0008d87:	df e0                	fnstsw ax
c0008d89:	9e                   	sahf   
c0008d8a:	76 7b                	jbe    c0008e07 <linear_vari_process+0x21d>
c0008d8c:	85 ed                	test   ebp,ebp
c0008d8e:	7e 38                	jle    c0008dc8 <linear_vari_process+0x1de>
c0008d90:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0008d94:	83 ec 10             	sub    esp,0x10
c0008d97:	dd 07                	fld    QWORD PTR [edi]
c0008d99:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c0008d9c:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008d9f:	e8 3c 58 01 00       	call   c001e5e0 <fabs>
c0008da4:	83 c4 10             	add    esp,0x10
c0008da7:	dc 1d 98 fd 01 c0    	fcomp  QWORD PTR ds:0xc001fd98
c0008dad:	df e0                	fnstsw ax
c0008daf:	9e                   	sahf   
c0008db0:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0008db4:	76 12                	jbe    c0008dc8 <linear_vari_process+0x1de>
c0008db6:	dd 07                	fld    QWORD PTR [edi]
c0008db8:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c0008dbb:	d8 e1                	fsub   st,st(1)
c0008dbd:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c0008dc0:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c0008dc3:	de c1                	faddp  st(1),st
c0008dc5:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008dc8:	31 c0                	xor    eax,eax
c0008dca:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0008dcd:	39 c2                	cmp    edx,eax
c0008dcf:	0f 8e 4d ff ff ff    	jle    c0008d22 <linear_vari_process+0x138>
c0008dd5:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0008dd7:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0008dda:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0008dde:	89 e9                	mov    ecx,ebp
c0008de0:	01 c5                	add    ebp,eax
c0008de2:	29 d1                	sub    ecx,edx
c0008de4:	89 ca                	mov    edx,ecx
c0008de6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008dea:	01 c2                	add    edx,eax
c0008dec:	40                   	inc    eax
c0008ded:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c0008df0:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0008df3:	d9 04 a9             	fld    DWORD PTR [ecx+ebp*4]
c0008df6:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0008df9:	d8 e1                	fsub   st,st(1)
c0008dfb:	d8 ca                	fmul   st,st(2)
c0008dfd:	de c1                	faddp  st(1),st
c0008dff:	d9 1c 91             	fstp   DWORD PTR [ecx+edx*4]
c0008e02:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0008e05:	eb c3                	jmp    c0008dca <linear_vari_process+0x1e0>
c0008e07:	39 d1                	cmp    ecx,edx
c0008e09:	7d 13                	jge    c0008e1e <linear_vari_process+0x234>
c0008e0b:	89 d0                	mov    eax,edx
c0008e0d:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0008e10:	29 c8                	sub    eax,ecx
c0008e12:	99                   	cdq    
c0008e13:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0008e16:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e1a:	da 44 24 08          	fiadd  DWORD PTR [esp+0x8]
c0008e1e:	dd 5f 08             	fstp   QWORD PTR [edi+0x8]
c0008e21:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0008e24:	85 c0                	test   eax,eax
c0008e26:	7f 1b                	jg     c0008e43 <linear_vari_process+0x259>
c0008e28:	dd 04 24             	fld    QWORD PTR [esp]
c0008e2b:	dd 1f                	fstp   QWORD PTR [edi]
c0008e2d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0008e30:	99                   	cdq    
c0008e31:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0008e34:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0008e37:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008e3a:	99                   	cdq    
c0008e3b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0008e3e:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0008e41:	eb 26                	jmp    c0008e69 <linear_vari_process+0x27f>
c0008e43:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c0008e46:	31 d2                	xor    edx,edx
c0008e48:	29 c8                	sub    eax,ecx
c0008e4a:	c1 e0 02             	shl    eax,0x2
c0008e4d:	39 d1                	cmp    ecx,edx
c0008e4f:	7e d7                	jle    c0008e28 <linear_vari_process+0x23e>
c0008e51:	8b 2e                	mov    ebp,DWORD PTR [esi]
c0008e53:	d9 44 05 00          	fld    DWORD PTR [ebp+eax*1+0x0]
c0008e57:	83 c0 04             	add    eax,0x4
c0008e5a:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c0008e5e:	42                   	inc    edx
c0008e5f:	eb ec                	jmp    c0008e4d <linear_vari_process+0x263>
c0008e61:	c7 44 24 18 16 00 00 00 	mov    DWORD PTR [esp+0x18],0x16
c0008e69:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008e6d:	83 c4 2c             	add    esp,0x2c
c0008e70:	5b                   	pop    ebx
c0008e71:	5e                   	pop    esi
c0008e72:	5f                   	pop    edi
c0008e73:	5d                   	pop    ebp
c0008e74:	c3                   	ret    

c0008e75 <linear_reset>:
c0008e75:	83 ec 0c             	sub    esp,0xc
c0008e78:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008e7c:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0008e7f:	85 c0                	test   eax,eax
c0008e81:	74 20                	je     c0008ea3 <linear_reset+0x2e>
c0008e83:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c0008e86:	83 c0 1c             	add    eax,0x1c
c0008e89:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c0008e8c:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c0008e93:	c1 e2 02             	shl    edx,0x2
c0008e96:	51                   	push   ecx
c0008e97:	52                   	push   edx
c0008e98:	6a 00                	push   0x0
c0008e9a:	50                   	push   eax
c0008e9b:	e8 68 77 ff ff       	call   c0000608 <memset>
c0008ea0:	83 c4 10             	add    esp,0x10
c0008ea3:	83 c4 0c             	add    esp,0xc
c0008ea6:	c3                   	ret    

c0008ea7 <linear_get_name>:
c0008ea7:	31 c0                	xor    eax,eax
c0008ea9:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0008eae:	75 05                	jne    c0008eb5 <linear_get_name+0xe>
c0008eb0:	b8 54 fd 01 c0       	mov    eax,0xc001fd54
c0008eb5:	c3                   	ret    

c0008eb6 <linear_get_description>:
c0008eb6:	31 c0                	xor    eax,eax
c0008eb8:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0008ebd:	75 05                	jne    c0008ec4 <linear_get_description+0xe>
c0008ebf:	b8 68 fd 01 c0       	mov    eax,0xc001fd68
c0008ec4:	c3                   	ret    

c0008ec5 <linear_set_converter>:
c0008ec5:	53                   	push   ebx
c0008ec6:	b8 0a 00 00 00       	mov    eax,0xa
c0008ecb:	83 ec 08             	sub    esp,0x8
c0008ece:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008ed2:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c0008ed7:	75 6e                	jne    c0008f47 <linear_set_converter+0x82>
c0008ed9:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0008edc:	85 c0                	test   eax,eax
c0008ede:	74 13                	je     c0008ef3 <linear_set_converter+0x2e>
c0008ee0:	83 ec 0c             	sub    esp,0xc
c0008ee3:	50                   	push   eax
c0008ee4:	e8 45 2d 00 00       	call   c000bc2e <free>
c0008ee9:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0008ef0:	83 c4 10             	add    esp,0x10
c0008ef3:	50                   	push   eax
c0008ef4:	50                   	push   eax
c0008ef5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008ef8:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0008eff:	50                   	push   eax
c0008f00:	6a 01                	push   0x1
c0008f02:	e8 47 2d 00 00       	call   c000bc4e <calloc>
c0008f07:	83 c4 10             	add    esp,0x10
c0008f0a:	89 c2                	mov    edx,eax
c0008f0c:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0008f0f:	85 d2                	test   edx,edx
c0008f11:	b8 01 00 00 00       	mov    eax,0x1
c0008f16:	74 2f                	je     c0008f47 <linear_set_converter+0x82>
c0008f18:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008f1b:	83 ec 0c             	sub    esp,0xc
c0008f1e:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0008f21:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c0008f27:	c7 43 24 ea 8b 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0008bea
c0008f2e:	c7 43 20 ea 8b 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0008bea
c0008f35:	c7 43 28 75 8e 00 c0 	mov    DWORD PTR [ebx+0x28],0xc0008e75
c0008f3c:	53                   	push   ebx
c0008f3d:	e8 33 ff ff ff       	call   c0008e75 <linear_reset>
c0008f42:	83 c4 10             	add    esp,0x10
c0008f45:	31 c0                	xor    eax,eax
c0008f47:	83 c4 08             	add    esp,0x8
c0008f4a:	5b                   	pop    ebx
c0008f4b:	c3                   	ret    

c0008f4c <is_bad_src_ratio>:
c0008f4c:	83 ec 0c             	sub    esp,0xc
c0008f4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008f53:	89 04 24             	mov    DWORD PTR [esp],eax
c0008f56:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008f5a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008f5e:	dd 04 24             	fld    QWORD PTR [esp]
c0008f61:	dd 05 20 fd 01 c0    	fld    QWORD PTR ds:0xc001fd20
c0008f67:	de d9                	fcompp 
c0008f69:	df e0                	fnstsw ax
c0008f6b:	f6 c4 45             	test   ah,0x45
c0008f6e:	74 10                	je     c0008f80 <is_bad_src_ratio+0x34>
c0008f70:	dd 04 24             	fld    QWORD PTR [esp]
c0008f73:	dc 1d 28 fd 01 c0    	fcomp  QWORD PTR ds:0xc001fd28
c0008f79:	df e0                	fnstsw ax
c0008f7b:	f6 c4 45             	test   ah,0x45
c0008f7e:	75 07                	jne    c0008f87 <is_bad_src_ratio+0x3b>
c0008f80:	b8 01 00 00 00       	mov    eax,0x1
c0008f85:	eb 05                	jmp    c0008f8c <is_bad_src_ratio+0x40>
c0008f87:	b8 00 00 00 00       	mov    eax,0x0
c0008f8c:	83 c4 0c             	add    esp,0xc
c0008f8f:	c3                   	ret    

c0008f90 <int_to_fp>:
c0008f90:	c1 e0 0c             	shl    eax,0xc
c0008f93:	c3                   	ret    

c0008f94 <fp_to_int>:
c0008f94:	c1 f8 0c             	sar    eax,0xc
c0008f97:	c3                   	ret    

c0008f98 <fp_fraction_part>:
c0008f98:	25 ff 0f 00 00       	and    eax,0xfff
c0008f9d:	c3                   	ret    

c0008f9e <fp_to_double>:
c0008f9e:	83 ec 0c             	sub    esp,0xc
c0008fa1:	e8 f2 ff ff ff       	call   c0008f98 <fp_fraction_part>
c0008fa6:	d9 05 28 ff 01 c0    	fld    DWORD PTR ds:0xc001ff28
c0008fac:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008fb0:	da 4c 24 04          	fimul  DWORD PTR [esp+0x4]
c0008fb4:	83 c4 0c             	add    esp,0xc
c0008fb7:	c3                   	ret    

c0008fb8 <calc_output_single>:
c0008fb8:	55                   	push   ebp
c0008fb9:	57                   	push   edi
c0008fba:	89 c7                	mov    edi,eax
c0008fbc:	56                   	push   esi
c0008fbd:	53                   	push   ebx
c0008fbe:	89 d3                	mov    ebx,edx
c0008fc0:	83 ec 24             	sub    esp,0x24
c0008fc3:	89 de                	mov    esi,ebx
c0008fc5:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0008fc8:	e8 c3 ff ff ff       	call   c0008f90 <int_to_fp>
c0008fcd:	8b 6f 30             	mov    ebp,DWORD PTR [edi+0x30]
c0008fd0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008fd4:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008fdb:	29 c8                	sub    eax,ecx
c0008fdd:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0008fe5:	99                   	cdq    
c0008fe6:	f7 fb                	idiv   ebx
c0008fe8:	8b 57 34             	mov    edx,DWORD PTR [edi+0x34]
c0008feb:	0f af f0             	imul   esi,eax
c0008fee:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0008ff2:	01 ce                	add    esi,ecx
c0008ff4:	29 c2                	sub    edx,eax
c0008ff6:	8d 14 97             	lea    edx,[edi+edx*4]
c0008ff9:	89 f0                	mov    eax,esi
c0008ffb:	e8 9e ff ff ff       	call   c0008f9e <fp_to_double>
c0009000:	89 f0                	mov    eax,esi
c0009002:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009006:	e8 89 ff ff ff       	call   c0008f94 <fp_to_int>
c000900b:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c000900f:	83 c2 04             	add    edx,0x4
c0009012:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009016:	d8 e1                	fsub   st,st(1)
c0009018:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000901c:	de c9                	fmulp  st(1),st
c000901e:	de c1                	faddp  st(1),st
c0009020:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c0009026:	29 de                	sub    esi,ebx
c0009028:	dc 04 24             	fadd   QWORD PTR [esp]
c000902b:	dd 1c 24             	fstp   QWORD PTR [esp]
c000902e:	79 c9                	jns    c0008ff9 <calc_output_single+0x41>
c0009030:	89 d8                	mov    eax,ebx
c0009032:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0009036:	29 c8                	sub    eax,ecx
c0009038:	d9 ee                	fldz   
c000903a:	89 c1                	mov    ecx,eax
c000903c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009040:	29 c8                	sub    eax,ecx
c0009042:	99                   	cdq    
c0009043:	f7 fb                	idiv   ebx
c0009045:	89 da                	mov    edx,ebx
c0009047:	0f af d0             	imul   edx,eax
c000904a:	8d 44 06 01          	lea    eax,[esi+eax*1+0x1]
c000904e:	01 d1                	add    ecx,edx
c0009050:	8d 14 87             	lea    edx,[edi+eax*4]
c0009053:	89 c8                	mov    eax,ecx
c0009055:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009059:	e8 40 ff ff ff       	call   c0008f9e <fp_to_double>
c000905e:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0009062:	89 c8                	mov    eax,ecx
c0009064:	e8 2b ff ff ff       	call   c0008f94 <fp_to_int>
c0009069:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c000906d:	29 d9                	sub    ecx,ebx
c000906f:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009073:	83 ea 04             	sub    edx,0x4
c0009076:	d8 e1                	fsub   st,st(1)
c0009078:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000907c:	de c9                	fmulp  st(1),st
c000907e:	de c1                	faddp  st(1),st
c0009080:	d8 8a 48 08 00 00    	fmul   DWORD PTR [edx+0x848]
c0009086:	85 c9                	test   ecx,ecx
c0009088:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000908c:	de c1                	faddp  st(1),st
c000908e:	7f c3                	jg     c0009053 <calc_output_single+0x9b>
c0009090:	dd 04 24             	fld    QWORD PTR [esp]
c0009093:	83 c4 24             	add    esp,0x24
c0009096:	de c1                	faddp  st(1),st
c0009098:	5b                   	pop    ebx
c0009099:	5e                   	pop    esi
c000909a:	5f                   	pop    edi
c000909b:	5d                   	pop    ebp
c000909c:	c3                   	ret    

c000909d <calc_output_stereo>:
c000909d:	55                   	push   ebp
c000909e:	57                   	push   edi
c000909f:	89 c7                	mov    edi,eax
c00090a1:	56                   	push   esi
c00090a2:	53                   	push   ebx
c00090a3:	89 d3                	mov    ebx,edx
c00090a5:	83 ec 44             	sub    esp,0x44
c00090a8:	89 de                	mov    esi,ebx
c00090aa:	dd 44 24 58          	fld    QWORD PTR [esp+0x58]
c00090ae:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00090b1:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c00090b5:	e8 d6 fe ff ff       	call   c0008f90 <int_to_fp>
c00090ba:	8b 6f 30             	mov    ebp,DWORD PTR [edi+0x30]
c00090bd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00090c1:	d9 ee                	fldz   
c00090c3:	29 c8                	sub    eax,ecx
c00090c5:	dd 14 24             	fst    QWORD PTR [esp]
c00090c8:	99                   	cdq    
c00090c9:	f7 fb                	idiv   ebx
c00090cb:	8b 57 34             	mov    edx,DWORD PTR [edi+0x34]
c00090ce:	0f af f0             	imul   esi,eax
c00090d1:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00090d5:	01 ce                	add    esi,ecx
c00090d7:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c00090da:	0f af c2             	imul   eax,edx
c00090dd:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00090e1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00090e5:	29 c2                	sub    edx,eax
c00090e7:	8d 14 97             	lea    edx,[edi+edx*4]
c00090ea:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c00090ee:	89 f0                	mov    eax,esi
c00090f0:	e8 a9 fe ff ff       	call   c0008f9e <fp_to_double>
c00090f5:	89 f0                	mov    eax,esi
c00090f7:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00090fb:	e8 94 fe ff ff       	call   c0008f94 <fp_to_int>
c0009100:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0009104:	83 c2 08             	add    edx,0x8
c0009107:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c000910b:	d8 e1                	fsub   st,st(1)
c000910d:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0009111:	de c9                	fmulp  st(1),st
c0009113:	de c1                	faddp  st(1),st
c0009115:	d9 c0                	fld    st(0)
c0009117:	d8 8a 3c 08 00 00    	fmul   DWORD PTR [edx+0x83c]
c000911d:	dc 04 24             	fadd   QWORD PTR [esp]
c0009120:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009123:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c0009129:	29 de                	sub    esi,ebx
c000912b:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000912f:	de c1                	faddp  st(1),st
c0009131:	79 b7                	jns    c00090ea <calc_output_stereo+0x4d>
c0009133:	89 d8                	mov    eax,ebx
c0009135:	d9 ee                	fldz   
c0009137:	d9 ee                	fldz   
c0009139:	29 c8                	sub    eax,ecx
c000913b:	89 c1                	mov    ecx,eax
c000913d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009141:	29 c8                	sub    eax,ecx
c0009143:	99                   	cdq    
c0009144:	f7 fb                	idiv   ebx
c0009146:	89 da                	mov    edx,ebx
c0009148:	0f af d0             	imul   edx,eax
c000914b:	40                   	inc    eax
c000914c:	01 d1                	add    ecx,edx
c000914e:	0f af 44 24 10       	imul   eax,DWORD PTR [esp+0x10]
c0009153:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0009157:	8d 14 87             	lea    edx,[edi+eax*4]
c000915a:	eb 04                	jmp    c0009160 <calc_output_stereo+0xc3>
c000915c:	d9 ca                	fxch   st(2)
c000915e:	d9 c9                	fxch   st(1)
c0009160:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0009164:	d9 c9                	fxch   st(1)
c0009166:	89 c8                	mov    eax,ecx
c0009168:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000916c:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009170:	e8 29 fe ff ff       	call   c0008f9e <fp_to_double>
c0009175:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0009179:	89 c8                	mov    eax,ecx
c000917b:	e8 14 fe ff ff       	call   c0008f94 <fp_to_int>
c0009180:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0009184:	29 d9                	sub    ecx,ebx
c0009186:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c000918a:	83 ea 08             	sub    edx,0x8
c000918d:	d8 e1                	fsub   st,st(1)
c000918f:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009193:	de c9                	fmulp  st(1),st
c0009195:	de c1                	faddp  st(1),st
c0009197:	d9 c0                	fld    st(0)
c0009199:	d8 8a 4c 08 00 00    	fmul   DWORD PTR [edx+0x84c]
c000919f:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00091a3:	de c1                	faddp  st(1),st
c00091a5:	d9 c9                	fxch   st(1)
c00091a7:	d8 8a 50 08 00 00    	fmul   DWORD PTR [edx+0x850]
c00091ad:	85 c9                	test   ecx,ecx
c00091af:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00091b3:	de c1                	faddp  st(1),st
c00091b5:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00091b9:	7f a1                	jg     c000915c <calc_output_stereo+0xbf>
c00091bb:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00091bf:	dd 04 24             	fld    QWORD PTR [esp]
c00091c2:	de c3                	faddp  st(3),st
c00091c4:	d9 ca                	fxch   st(2)
c00091c6:	dc 4c 24 20          	fmul   QWORD PTR [esp+0x20]
c00091ca:	d9 18                	fstp   DWORD PTR [eax]
c00091cc:	de c1                	faddp  st(1),st
c00091ce:	dc 4c 24 20          	fmul   QWORD PTR [esp+0x20]
c00091d2:	d9 58 04             	fstp   DWORD PTR [eax+0x4]
c00091d5:	83 c4 44             	add    esp,0x44
c00091d8:	5b                   	pop    ebx
c00091d9:	5e                   	pop    esi
c00091da:	5f                   	pop    edi
c00091db:	5d                   	pop    ebp
c00091dc:	c3                   	ret    

c00091dd <calc_output_quad>:
c00091dd:	55                   	push   ebp
c00091de:	57                   	push   edi
c00091df:	56                   	push   esi
c00091e0:	89 c6                	mov    esi,eax
c00091e2:	53                   	push   ebx
c00091e3:	89 d3                	mov    ebx,edx
c00091e5:	83 ec 5c             	sub    esp,0x5c
c00091e8:	dd 44 24 70          	fld    QWORD PTR [esp+0x70]
c00091ec:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00091ef:	dd 1c 24             	fstp   QWORD PTR [esp]
c00091f2:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c00091f6:	e8 95 fd ff ff       	call   c0008f90 <int_to_fp>
c00091fb:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c00091fe:	d9 ee                	fldz   
c0009200:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009204:	dd 54 24 10          	fst    QWORD PTR [esp+0x10]
c0009208:	29 c8                	sub    eax,ecx
c000920a:	dd 54 24 18          	fst    QWORD PTR [esp+0x18]
c000920e:	99                   	cdq    
c000920f:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c0009213:	f7 fb                	idiv   ebx
c0009215:	89 da                	mov    edx,ebx
c0009217:	0f af d0             	imul   edx,eax
c000921a:	01 ca                	add    edx,ecx
c000921c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009220:	8b 56 34             	mov    edx,DWORD PTR [esi+0x34]
c0009223:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009227:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000922a:	0f af c2             	imul   eax,edx
c000922d:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0009231:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0009235:	29 c2                	sub    edx,eax
c0009237:	8d 14 96             	lea    edx,[esi+edx*4]
c000923a:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c000923e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009242:	e8 57 fd ff ff       	call   c0008f9e <fp_to_double>
c0009247:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000924b:	dd 5c 24 40          	fstp   QWORD PTR [esp+0x40]
c000924f:	e8 40 fd ff ff       	call   c0008f94 <fp_to_int>
c0009254:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0009258:	83 c2 10             	add    edx,0x10
c000925b:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c000925f:	d8 e1                	fsub   st,st(1)
c0009261:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c0009265:	de c9                	fmulp  st(1),st
c0009267:	de c1                	faddp  st(1),st
c0009269:	d9 c0                	fld    st(0)
c000926b:	d8 8a 34 08 00 00    	fmul   DWORD PTR [edx+0x834]
c0009271:	dc 44 24 08          	fadd   QWORD PTR [esp+0x8]
c0009275:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0009279:	d9 c0                	fld    st(0)
c000927b:	d8 8a 38 08 00 00    	fmul   DWORD PTR [edx+0x838]
c0009281:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c0009285:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009289:	d9 c0                	fld    st(0)
c000928b:	d8 8a 3c 08 00 00    	fmul   DWORD PTR [edx+0x83c]
c0009291:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c0009295:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009299:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c000929f:	29 5c 24 20          	sub    DWORD PTR [esp+0x20],ebx
c00092a3:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c00092a7:	de c1                	faddp  st(1),st
c00092a9:	79 8f                	jns    c000923a <calc_output_quad+0x5d>
c00092ab:	89 d8                	mov    eax,ebx
c00092ad:	d9 ee                	fldz   
c00092af:	29 c8                	sub    eax,ecx
c00092b1:	d9 ee                	fldz   
c00092b3:	89 c1                	mov    ecx,eax
c00092b5:	d9 ee                	fldz   
c00092b7:	d9 ee                	fldz   
c00092b9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00092bd:	29 c8                	sub    eax,ecx
c00092bf:	99                   	cdq    
c00092c0:	f7 fb                	idiv   ebx
c00092c2:	89 da                	mov    edx,ebx
c00092c4:	0f af d0             	imul   edx,eax
c00092c7:	40                   	inc    eax
c00092c8:	01 d1                	add    ecx,edx
c00092ca:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c00092cf:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c00092d3:	8d 14 86             	lea    edx,[esi+eax*4]
c00092d6:	eb 0a                	jmp    c00092e2 <calc_output_quad+0x105>
c00092d8:	d9 cc                	fxch   st(4)
c00092da:	d9 ca                	fxch   st(2)
c00092dc:	d9 c9                	fxch   st(1)
c00092de:	d9 cb                	fxch   st(3)
c00092e0:	d9 c9                	fxch   st(1)
c00092e2:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c00092e6:	d9 c9                	fxch   st(1)
c00092e8:	89 c8                	mov    eax,ecx
c00092ea:	dd 5c 24 40          	fstp   QWORD PTR [esp+0x40]
c00092ee:	d9 c9                	fxch   st(1)
c00092f0:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00092f4:	d9 c9                	fxch   st(1)
c00092f6:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c00092fa:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00092fe:	e8 9b fc ff ff       	call   c0008f9e <fp_to_double>
c0009303:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0009307:	89 c8                	mov    eax,ecx
c0009309:	e8 86 fc ff ff       	call   c0008f94 <fp_to_int>
c000930e:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0009312:	29 d9                	sub    ecx,ebx
c0009314:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009318:	83 ea 10             	sub    edx,0x10
c000931b:	d8 e1                	fsub   st,st(1)
c000931d:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0009321:	de c9                	fmulp  st(1),st
c0009323:	de c1                	faddp  st(1),st
c0009325:	d9 c0                	fld    st(0)
c0009327:	d8 8a 54 08 00 00    	fmul   DWORD PTR [edx+0x854]
c000932d:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0009331:	de c1                	faddp  st(1),st
c0009333:	d9 c1                	fld    st(1)
c0009335:	d8 8a 58 08 00 00    	fmul   DWORD PTR [edx+0x858]
c000933b:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c000933f:	de c1                	faddp  st(1),st
c0009341:	d9 c2                	fld    st(2)
c0009343:	d8 8a 5c 08 00 00    	fmul   DWORD PTR [edx+0x85c]
c0009349:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c000934d:	de c1                	faddp  st(1),st
c000934f:	d9 cb                	fxch   st(3)
c0009351:	d8 8a 60 08 00 00    	fmul   DWORD PTR [edx+0x860]
c0009357:	85 c9                	test   ecx,ecx
c0009359:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000935d:	de c1                	faddp  st(1),st
c000935f:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0009363:	0f 8f 6f ff ff ff    	jg     c00092d8 <calc_output_quad+0xfb>
c0009369:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000936d:	de c4                	faddp  st(4),st
c000936f:	d9 cb                	fxch   st(3)
c0009371:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009374:	d9 1f                	fstp   DWORD PTR [edi]
c0009376:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000937a:	de c2                	faddp  st(2),st
c000937c:	d9 c9                	fxch   st(1)
c000937e:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009381:	d9 5f 04             	fstp   DWORD PTR [edi+0x4]
c0009384:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0009388:	de c3                	faddp  st(3),st
c000938a:	d9 ca                	fxch   st(2)
c000938c:	dc 0c 24             	fmul   QWORD PTR [esp]
c000938f:	d9 5f 08             	fstp   DWORD PTR [edi+0x8]
c0009392:	de c1                	faddp  st(1),st
c0009394:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009397:	d9 5f 0c             	fstp   DWORD PTR [edi+0xc]
c000939a:	83 c4 5c             	add    esp,0x5c
c000939d:	5b                   	pop    ebx
c000939e:	5e                   	pop    esi
c000939f:	5f                   	pop    edi
c00093a0:	5d                   	pop    ebp
c00093a1:	c3                   	ret    

c00093a2 <calc_output_hex>:
c00093a2:	55                   	push   ebp
c00093a3:	57                   	push   edi
c00093a4:	89 c7                	mov    edi,eax
c00093a6:	56                   	push   esi
c00093a7:	53                   	push   ebx
c00093a8:	89 d3                	mov    ebx,edx
c00093aa:	83 ec 7c             	sub    esp,0x7c
c00093ad:	dd 84 24 90 00 00 00 	fld    QWORD PTR [esp+0x90]
c00093b4:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00093b7:	dd 1c 24             	fstp   QWORD PTR [esp]
c00093ba:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c00093c1:	e8 ca fb ff ff       	call   c0008f90 <int_to_fp>
c00093c6:	8b 6f 30             	mov    ebp,DWORD PTR [edi+0x30]
c00093c9:	d9 ee                	fldz   
c00093cb:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00093cf:	dd 54 24 10          	fst    QWORD PTR [esp+0x10]
c00093d3:	29 c8                	sub    eax,ecx
c00093d5:	dd 54 24 18          	fst    QWORD PTR [esp+0x18]
c00093d9:	99                   	cdq    
c00093da:	dd 54 24 20          	fst    QWORD PTR [esp+0x20]
c00093de:	f7 fb                	idiv   ebx
c00093e0:	dd 54 24 28          	fst    QWORD PTR [esp+0x28]
c00093e4:	89 da                	mov    edx,ebx
c00093e6:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c00093ea:	0f af d0             	imul   edx,eax
c00093ed:	01 ca                	add    edx,ecx
c00093ef:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c00093f3:	8b 57 34             	mov    edx,DWORD PTR [edi+0x34]
c00093f6:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00093fa:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c00093fd:	0f af c2             	imul   eax,edx
c0009400:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009404:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0009408:	29 c2                	sub    edx,eax
c000940a:	8d 14 97             	lea    edx,[edi+edx*4]
c000940d:	dd 5c 24 58          	fstp   QWORD PTR [esp+0x58]
c0009411:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009415:	e8 84 fb ff ff       	call   c0008f9e <fp_to_double>
c000941a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000941e:	dd 5c 24 50          	fstp   QWORD PTR [esp+0x50]
c0009422:	e8 6d fb ff ff       	call   c0008f94 <fp_to_int>
c0009427:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c000942b:	83 c2 18             	add    edx,0x18
c000942e:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009432:	d8 e1                	fsub   st,st(1)
c0009434:	dd 44 24 50          	fld    QWORD PTR [esp+0x50]
c0009438:	de c9                	fmulp  st(1),st
c000943a:	de c1                	faddp  st(1),st
c000943c:	d9 c0                	fld    st(0)
c000943e:	d8 8a 2c 08 00 00    	fmul   DWORD PTR [edx+0x82c]
c0009444:	dc 44 24 08          	fadd   QWORD PTR [esp+0x8]
c0009448:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000944c:	d9 c0                	fld    st(0)
c000944e:	d8 8a 30 08 00 00    	fmul   DWORD PTR [edx+0x830]
c0009454:	dc 44 24 28          	fadd   QWORD PTR [esp+0x28]
c0009458:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000945c:	d9 c0                	fld    st(0)
c000945e:	d8 8a 34 08 00 00    	fmul   DWORD PTR [edx+0x834]
c0009464:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c0009468:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c000946c:	d9 c0                	fld    st(0)
c000946e:	d8 8a 38 08 00 00    	fmul   DWORD PTR [edx+0x838]
c0009474:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c0009478:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000947c:	d9 c0                	fld    st(0)
c000947e:	d8 8a 3c 08 00 00    	fmul   DWORD PTR [edx+0x83c]
c0009484:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c0009488:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000948c:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c0009492:	29 5c 24 30          	sub    DWORD PTR [esp+0x30],ebx
c0009496:	dd 44 24 58          	fld    QWORD PTR [esp+0x58]
c000949a:	de c1                	faddp  st(1),st
c000949c:	0f 89 6b ff ff ff    	jns    c000940d <calc_output_hex+0x6b>
c00094a2:	d9 ee                	fldz   
c00094a4:	d9 ee                	fldz   
c00094a6:	89 d8                	mov    eax,ebx
c00094a8:	29 c8                	sub    eax,ecx
c00094aa:	dd 54 24 30          	fst    QWORD PTR [esp+0x30]
c00094ae:	89 c1                	mov    ecx,eax
c00094b0:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00094b4:	29 c8                	sub    eax,ecx
c00094b6:	99                   	cdq    
c00094b7:	f7 fb                	idiv   ebx
c00094b9:	89 da                	mov    edx,ebx
c00094bb:	0f af d0             	imul   edx,eax
c00094be:	40                   	inc    eax
c00094bf:	01 d1                	add    ecx,edx
c00094c1:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c00094c6:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c00094ca:	dd 54 24 38          	fst    QWORD PTR [esp+0x38]
c00094ce:	8d 14 87             	lea    edx,[edi+eax*4]
c00094d1:	d9 ee                	fldz   
c00094d3:	d9 ee                	fldz   
c00094d5:	d9 ca                	fxch   st(2)
c00094d7:	eb 08                	jmp    c00094e1 <calc_output_hex+0x13f>
c00094d9:	d9 cc                	fxch   st(4)
c00094db:	d9 cb                	fxch   st(3)
c00094dd:	d9 ca                	fxch   st(2)
c00094df:	d9 c9                	fxch   st(1)
c00094e1:	dd 5c 24 68          	fstp   QWORD PTR [esp+0x68]
c00094e5:	89 c8                	mov    eax,ecx
c00094e7:	dd 5c 24 60          	fstp   QWORD PTR [esp+0x60]
c00094eb:	d9 ca                	fxch   st(2)
c00094ed:	dd 5c 24 58          	fstp   QWORD PTR [esp+0x58]
c00094f1:	dd 5c 24 50          	fstp   QWORD PTR [esp+0x50]
c00094f5:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c00094f9:	e8 a0 fa ff ff       	call   c0008f9e <fp_to_double>
c00094fe:	dd 5c 24 40          	fstp   QWORD PTR [esp+0x40]
c0009502:	89 c8                	mov    eax,ecx
c0009504:	e8 8b fa ff ff       	call   c0008f94 <fp_to_int>
c0009509:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c000950d:	29 d9                	sub    ecx,ebx
c000950f:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009513:	83 ea 18             	sub    edx,0x18
c0009516:	d8 e1                	fsub   st,st(1)
c0009518:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c000951c:	de c9                	fmulp  st(1),st
c000951e:	de c1                	faddp  st(1),st
c0009520:	d9 c0                	fld    st(0)
c0009522:	d8 8a 5c 08 00 00    	fmul   DWORD PTR [edx+0x85c]
c0009528:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c000952c:	de c1                	faddp  st(1),st
c000952e:	d9 c1                	fld    st(1)
c0009530:	d8 8a 60 08 00 00    	fmul   DWORD PTR [edx+0x860]
c0009536:	dd 44 24 60          	fld    QWORD PTR [esp+0x60]
c000953a:	de c1                	faddp  st(1),st
c000953c:	d9 c2                	fld    st(2)
c000953e:	d8 8a 64 08 00 00    	fmul   DWORD PTR [edx+0x864]
c0009544:	dc 44 24 38          	fadd   QWORD PTR [esp+0x38]
c0009548:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000954c:	d9 c2                	fld    st(2)
c000954e:	d8 8a 68 08 00 00    	fmul   DWORD PTR [edx+0x868]
c0009554:	dc 44 24 30          	fadd   QWORD PTR [esp+0x30]
c0009558:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000955c:	d9 c2                	fld    st(2)
c000955e:	d8 8a 6c 08 00 00    	fmul   DWORD PTR [edx+0x86c]
c0009564:	dd 44 24 50          	fld    QWORD PTR [esp+0x50]
c0009568:	de c1                	faddp  st(1),st
c000956a:	d9 cb                	fxch   st(3)
c000956c:	d8 8a 70 08 00 00    	fmul   DWORD PTR [edx+0x870]
c0009572:	85 c9                	test   ecx,ecx
c0009574:	dd 44 24 68          	fld    QWORD PTR [esp+0x68]
c0009578:	de c1                	faddp  st(1),st
c000957a:	dd 44 24 58          	fld    QWORD PTR [esp+0x58]
c000957e:	0f 8f 55 ff ff ff    	jg     c00094d9 <calc_output_hex+0x137>
c0009584:	d9 cb                	fxch   st(3)
c0009586:	dc 44 24 08          	fadd   QWORD PTR [esp+0x8]
c000958a:	dc 0c 24             	fmul   QWORD PTR [esp]
c000958d:	d9 1e                	fstp   DWORD PTR [esi]
c000958f:	d9 c9                	fxch   st(1)
c0009591:	dc 44 24 28          	fadd   QWORD PTR [esp+0x28]
c0009595:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009598:	d9 5e 04             	fstp   DWORD PTR [esi+0x4]
c000959b:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000959f:	dc 44 24 38          	fadd   QWORD PTR [esp+0x38]
c00095a3:	dc 0c 24             	fmul   QWORD PTR [esp]
c00095a6:	d9 5e 08             	fstp   DWORD PTR [esi+0x8]
c00095a9:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00095ad:	dc 44 24 30          	fadd   QWORD PTR [esp+0x30]
c00095b1:	dc 0c 24             	fmul   QWORD PTR [esp]
c00095b4:	d9 5e 0c             	fstp   DWORD PTR [esi+0xc]
c00095b7:	d9 ca                	fxch   st(2)
c00095b9:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c00095bd:	dc 0c 24             	fmul   QWORD PTR [esp]
c00095c0:	d9 5e 10             	fstp   DWORD PTR [esi+0x10]
c00095c3:	de c1                	faddp  st(1),st
c00095c5:	dc 0c 24             	fmul   QWORD PTR [esp]
c00095c8:	d9 5e 14             	fstp   DWORD PTR [esi+0x14]
c00095cb:	83 c4 7c             	add    esp,0x7c
c00095ce:	5b                   	pop    ebx
c00095cf:	5e                   	pop    esi
c00095d0:	5f                   	pop    edi
c00095d1:	5d                   	pop    ebp
c00095d2:	c3                   	ret    

c00095d3 <sinc_reset>:
c00095d3:	56                   	push   esi
c00095d4:	53                   	push   ebx
c00095d5:	51                   	push   ecx
c00095d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00095da:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c00095dd:	85 db                	test   ebx,ebx
c00095df:	74 51                	je     c0009632 <sinc_reset+0x5f>
c00095e1:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c00095e8:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00095ef:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c00095f6:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c00095fc:	d9 ee                	fldz   
c00095fe:	dd 53 28             	fst    QWORD PTR [ebx+0x28]
c0009601:	dd 5b 20             	fstp   QWORD PTR [ebx+0x20]
c0009604:	52                   	push   edx
c0009605:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0009608:	c1 e0 02             	shl    eax,0x2
c000960b:	50                   	push   eax
c000960c:	6a 00                	push   0x0
c000960e:	56                   	push   esi
c000960f:	e8 f4 6f ff ff       	call   c0000608 <memset>
c0009614:	83 c4 0c             	add    esp,0xc
c0009617:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000961a:	c1 e0 02             	shl    eax,0x2
c000961d:	50                   	push   eax
c000961e:	68 aa 00 00 00       	push   0xaa
c0009623:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0009626:	8d 04 86             	lea    eax,[esi+eax*4]
c0009629:	50                   	push   eax
c000962a:	e8 d9 6f ff ff       	call   c0000608 <memset>
c000962f:	83 c4 10             	add    esp,0x10
c0009632:	58                   	pop    eax
c0009633:	5b                   	pop    ebx
c0009634:	5e                   	pop    esi
c0009635:	c3                   	ret    

c0009636 <calc_output_multi>:
c0009636:	55                   	push   ebp
c0009637:	57                   	push   edi
c0009638:	8d 78 44             	lea    edi,[eax+0x44]
c000963b:	56                   	push   esi
c000963c:	89 c6                	mov    esi,eax
c000963e:	53                   	push   ebx
c000963f:	8d 80 44 04 00 00    	lea    eax,[eax+0x444]
c0009645:	83 ec 4c             	sub    esp,0x4c
c0009648:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000964c:	dd 44 24 64          	fld    QWORD PTR [esp+0x64]
c0009650:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009654:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0009658:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000965c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009660:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009663:	e8 28 f9 ff ff       	call   c0008f90 <int_to_fp>
c0009668:	8b 6e 34             	mov    ebp,DWORD PTR [esi+0x34]
c000966b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000966f:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c0009673:	99                   	cdq    
c0009674:	f7 7c 24 10          	idiv   DWORD PTR [esp+0x10]
c0009678:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000967c:	0f af d0             	imul   edx,eax
c000967f:	0f af c3             	imul   eax,ebx
c0009682:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009686:	29 c5                	sub    ebp,eax
c0009688:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000968c:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0009690:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c0009697:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000969b:	52                   	push   edx
c000969c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096a0:	6a 00                	push   0x0
c00096a2:	57                   	push   edi
c00096a3:	e8 60 6f ff ff       	call   c0000608 <memset>
c00096a8:	83 c4 10             	add    esp,0x10
c00096ab:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00096af:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c00096b3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00096b7:	e8 e2 f8 ff ff       	call   c0008f9e <fp_to_double>
c00096bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00096c0:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00096c4:	e8 cb f8 ff ff       	call   c0008f94 <fp_to_int>
c00096c9:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00096cc:	89 d9                	mov    ecx,ebx
c00096ce:	d9 04 82             	fld    DWORD PTR [edx+eax*4]
c00096d1:	d9 44 82 04          	fld    DWORD PTR [edx+eax*4+0x4]
c00096d5:	d8 e1                	fsub   st,st(1)
c00096d7:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00096db:	de c9                	fmulp  st(1),st
c00096dd:	de c1                	faddp  st(1),st
c00096df:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c00096e3:	89 c8                	mov    eax,ecx
c00096e5:	bd 08 00 00 00       	mov    ebp,0x8
c00096ea:	99                   	cdq    
c00096eb:	f7 fd                	idiv   ebp
c00096ed:	4a                   	dec    edx
c00096ee:	83 fa 06             	cmp    edx,0x6
c00096f1:	77 07                	ja     c00096fa <calc_output_multi+0xc4>
c00096f3:	ff 24 95 a0 fd 01 c0 	jmp    DWORD PTR [edx*4-0x3ffe0260]
c00096fa:	49                   	dec    ecx
c00096fb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00096ff:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009702:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009709:	d9 c1                	fld    st(1)
c000970b:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c000970f:	dc 00                	fadd   QWORD PTR [eax]
c0009711:	dd 18                	fstp   QWORD PTR [eax]
c0009713:	49                   	dec    ecx
c0009714:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009718:	8d 04 cf             	lea    eax,[edi+ecx*8]
c000971b:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009722:	d9 c1                	fld    st(1)
c0009724:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009728:	dc 00                	fadd   QWORD PTR [eax]
c000972a:	dd 18                	fstp   QWORD PTR [eax]
c000972c:	49                   	dec    ecx
c000972d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009731:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009734:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000973b:	d9 c1                	fld    st(1)
c000973d:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009741:	dc 00                	fadd   QWORD PTR [eax]
c0009743:	dd 18                	fstp   QWORD PTR [eax]
c0009745:	49                   	dec    ecx
c0009746:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000974a:	8d 04 cf             	lea    eax,[edi+ecx*8]
c000974d:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009754:	d9 c1                	fld    st(1)
c0009756:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c000975a:	dc 00                	fadd   QWORD PTR [eax]
c000975c:	dd 18                	fstp   QWORD PTR [eax]
c000975e:	49                   	dec    ecx
c000975f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009763:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009766:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000976d:	d9 c1                	fld    st(1)
c000976f:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009773:	dc 00                	fadd   QWORD PTR [eax]
c0009775:	dd 18                	fstp   QWORD PTR [eax]
c0009777:	49                   	dec    ecx
c0009778:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000977c:	8d 04 cf             	lea    eax,[edi+ecx*8]
c000977f:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009786:	d9 c1                	fld    st(1)
c0009788:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c000978c:	dc 00                	fadd   QWORD PTR [eax]
c000978e:	dd 18                	fstp   QWORD PTR [eax]
c0009790:	49                   	dec    ecx
c0009791:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009795:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009798:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000979f:	d9 c1                	fld    st(1)
c00097a1:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00097a5:	dc 00                	fadd   QWORD PTR [eax]
c00097a7:	dd 18                	fstp   QWORD PTR [eax]
c00097a9:	49                   	dec    ecx
c00097aa:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00097ae:	8d 04 cf             	lea    eax,[edi+ecx*8]
c00097b1:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00097b8:	d9 c1                	fld    st(1)
c00097ba:	85 c9                	test   ecx,ecx
c00097bc:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00097c0:	dc 00                	fadd   QWORD PTR [eax]
c00097c2:	dd 18                	fstp   QWORD PTR [eax]
c00097c4:	0f 8f 19 ff ff ff    	jg     c00096e3 <calc_output_multi+0xad>
c00097ca:	dd d9                	fstp   st(1)
c00097cc:	01 5c 24 0c          	add    DWORD PTR [esp+0xc],ebx
c00097d0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00097d4:	29 54 24 14          	sub    DWORD PTR [esp+0x14],edx
c00097d8:	0f 89 d1 fe ff ff    	jns    c00096af <calc_output_multi+0x79>
c00097de:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00097e2:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00097e6:	89 d1                	mov    ecx,edx
c00097e8:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00097ec:	29 c8                	sub    eax,ecx
c00097ee:	99                   	cdq    
c00097ef:	f7 7c 24 10          	idiv   DWORD PTR [esp+0x10]
c00097f3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00097f7:	0f af d0             	imul   edx,eax
c00097fa:	40                   	inc    eax
c00097fb:	01 d1                	add    ecx,edx
c00097fd:	0f af c3             	imul   eax,ebx
c0009800:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009804:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c0009807:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000980b:	50                   	push   eax
c000980c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009810:	6a 00                	push   0x0
c0009812:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009816:	e8 ed 6d ff ff       	call   c0000608 <memset>
c000981b:	83 c4 10             	add    esp,0x10
c000981e:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0009822:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0009826:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000982a:	e8 6f f7 ff ff       	call   c0008f9e <fp_to_double>
c000982f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009833:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009837:	e8 58 f7 ff ff       	call   c0008f94 <fp_to_int>
c000983c:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000983f:	89 d9                	mov    ecx,ebx
c0009841:	d9 04 82             	fld    DWORD PTR [edx+eax*4]
c0009844:	d9 44 82 04          	fld    DWORD PTR [edx+eax*4+0x4]
c0009848:	d8 e1                	fsub   st,st(1)
c000984a:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000984e:	de c9                	fmulp  st(1),st
c0009850:	de c1                	faddp  st(1),st
c0009852:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0009856:	89 c8                	mov    eax,ecx
c0009858:	bd 08 00 00 00       	mov    ebp,0x8
c000985d:	99                   	cdq    
c000985e:	f7 fd                	idiv   ebp
c0009860:	4a                   	dec    edx
c0009861:	83 fa 06             	cmp    edx,0x6
c0009864:	77 07                	ja     c000986d <calc_output_multi+0x237>
c0009866:	ff 24 95 bc fd 01 c0 	jmp    DWORD PTR [edx*4-0x3ffe0244]
c000986d:	49                   	dec    ecx
c000986e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009872:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009876:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009879:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009880:	d9 c1                	fld    st(1)
c0009882:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009886:	dc 00                	fadd   QWORD PTR [eax]
c0009888:	dd 18                	fstp   QWORD PTR [eax]
c000988a:	49                   	dec    ecx
c000988b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000988f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009893:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009896:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000989d:	d9 c1                	fld    st(1)
c000989f:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00098a3:	dc 00                	fadd   QWORD PTR [eax]
c00098a5:	dd 18                	fstp   QWORD PTR [eax]
c00098a7:	49                   	dec    ecx
c00098a8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00098ac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00098b0:	8d 04 c8             	lea    eax,[eax+ecx*8]
c00098b3:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00098ba:	d9 c1                	fld    st(1)
c00098bc:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00098c0:	dc 00                	fadd   QWORD PTR [eax]
c00098c2:	dd 18                	fstp   QWORD PTR [eax]
c00098c4:	49                   	dec    ecx
c00098c5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00098c9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00098cd:	8d 04 c8             	lea    eax,[eax+ecx*8]
c00098d0:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00098d7:	d9 c1                	fld    st(1)
c00098d9:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00098dd:	dc 00                	fadd   QWORD PTR [eax]
c00098df:	dd 18                	fstp   QWORD PTR [eax]
c00098e1:	49                   	dec    ecx
c00098e2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00098e6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00098ea:	8d 04 c8             	lea    eax,[eax+ecx*8]
c00098ed:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00098f4:	d9 c1                	fld    st(1)
c00098f6:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00098fa:	dc 00                	fadd   QWORD PTR [eax]
c00098fc:	dd 18                	fstp   QWORD PTR [eax]
c00098fe:	49                   	dec    ecx
c00098ff:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009903:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009907:	8d 04 c8             	lea    eax,[eax+ecx*8]
c000990a:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009911:	d9 c1                	fld    st(1)
c0009913:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009917:	dc 00                	fadd   QWORD PTR [eax]
c0009919:	dd 18                	fstp   QWORD PTR [eax]
c000991b:	49                   	dec    ecx
c000991c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009920:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009924:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009927:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000992e:	d9 c1                	fld    st(1)
c0009930:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009934:	dc 00                	fadd   QWORD PTR [eax]
c0009936:	dd 18                	fstp   QWORD PTR [eax]
c0009938:	49                   	dec    ecx
c0009939:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000993d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009941:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009944:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000994b:	d9 c1                	fld    st(1)
c000994d:	85 c9                	test   ecx,ecx
c000994f:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009953:	dc 00                	fadd   QWORD PTR [eax]
c0009955:	dd 18                	fstp   QWORD PTR [eax]
c0009957:	0f 8f f9 fe ff ff    	jg     c0009856 <calc_output_multi+0x220>
c000995d:	dd d9                	fstp   st(1)
c000995f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009963:	29 5c 24 0c          	sub    DWORD PTR [esp+0xc],ebx
c0009967:	29 54 24 14          	sub    DWORD PTR [esp+0x14],edx
c000996b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0009970:	0f 8f ac fe ff ff    	jg     c0009822 <calc_output_multi+0x1ec>
c0009976:	b9 08 00 00 00       	mov    ecx,0x8
c000997b:	89 d8                	mov    eax,ebx
c000997d:	99                   	cdq    
c000997e:	f7 f9                	idiv   ecx
c0009980:	4a                   	dec    edx
c0009981:	83 fa 06             	cmp    edx,0x6
c0009984:	77 07                	ja     c000998d <calc_output_multi+0x357>
c0009986:	ff 24 95 d8 fd 01 c0 	jmp    DWORD PTR [edx*4-0x3ffe0228]
c000998d:	4b                   	dec    ebx
c000998e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009992:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009995:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009998:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000999c:	d8 c9                	fmul   st,st(1)
c000999e:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c00099a1:	4b                   	dec    ebx
c00099a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00099a6:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c00099a9:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c00099ac:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00099b0:	d8 c9                	fmul   st,st(1)
c00099b2:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c00099b5:	4b                   	dec    ebx
c00099b6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00099ba:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c00099bd:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c00099c0:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00099c4:	d8 c9                	fmul   st,st(1)
c00099c6:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c00099c9:	4b                   	dec    ebx
c00099ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00099ce:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c00099d1:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c00099d4:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00099d8:	d8 c9                	fmul   st,st(1)
c00099da:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c00099dd:	4b                   	dec    ebx
c00099de:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00099e2:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c00099e5:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c00099e8:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00099ec:	d8 c9                	fmul   st,st(1)
c00099ee:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c00099f1:	4b                   	dec    ebx
c00099f2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00099f6:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c00099f9:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c00099fc:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009a00:	d8 c9                	fmul   st,st(1)
c0009a02:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009a05:	4b                   	dec    ebx
c0009a06:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009a0a:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009a0d:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009a10:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009a14:	d8 c9                	fmul   st,st(1)
c0009a16:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009a19:	4b                   	dec    ebx
c0009a1a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009a1e:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009a21:	85 db                	test   ebx,ebx
c0009a23:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009a26:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009a2a:	d8 c9                	fmul   st,st(1)
c0009a2c:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009a2f:	0f 8f 46 ff ff ff    	jg     c000997b <calc_output_multi+0x345>
c0009a35:	dd d8                	fstp   st(0)
c0009a37:	83 c4 4c             	add    esp,0x4c
c0009a3a:	5b                   	pop    ebx
c0009a3b:	5e                   	pop    esi
c0009a3c:	5f                   	pop    edi
c0009a3d:	5d                   	pop    ebp
c0009a3e:	c3                   	ret    

c0009a3f <double_to_fp>:
c0009a3f:	d9 05 2c ff 01 c0    	fld    DWORD PTR ds:0xc001ff2c
c0009a45:	dc 4c 24 04          	fmul   QWORD PTR [esp+0x4]
c0009a49:	dd 5c 24 04          	fstp   QWORD PTR [esp+0x4]
c0009a4d:	e9 ae 4b 01 00       	jmp    c001e600 <lrint>

c0009a52 <fmod_one>:
c0009a52:	83 ec 2c             	sub    esp,0x2c
c0009a55:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009a59:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009a5d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009a61:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009a65:	83 ec 08             	sub    esp,0x8
c0009a68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a6c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a70:	e8 8b 4b 01 00       	call   c001e600 <lrint>
c0009a75:	83 c4 10             	add    esp,0x10
c0009a78:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009a7c:	db 44 24 04          	fild   DWORD PTR [esp+0x4]
c0009a80:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009a84:	de e1                	fsubrp st(1),st
c0009a86:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009a8a:	d9 ee                	fldz   
c0009a8c:	dc 5c 24 18          	fcomp  QWORD PTR [esp+0x18]
c0009a90:	df e0                	fnstsw ax
c0009a92:	f6 c4 45             	test   ah,0x45
c0009a95:	75 0a                	jne    c0009aa1 <fmod_one+0x4f>
c0009a97:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0009a9b:	d9 e8                	fld1   
c0009a9d:	de c1                	faddp  st(1),st
c0009a9f:	eb 04                	jmp    c0009aa5 <fmod_one+0x53>
c0009aa1:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0009aa5:	83 c4 2c             	add    esp,0x2c
c0009aa8:	c3                   	ret    

c0009aa9 <prepare_data>:
c0009aa9:	55                   	push   ebp
c0009aaa:	57                   	push   edi
c0009aab:	56                   	push   esi
c0009aac:	53                   	push   ebx
c0009aad:	83 ec 1c             	sub    esp,0x1c
c0009ab0:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0009ab4:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009ab8:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c0009abc:	0f 89 57 01 00 00    	jns    c0009c19 <prepare_data+0x170>
c0009ac2:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0009ac5:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0009ac8:	85 d2                	test   edx,edx
c0009aca:	75 0d                	jne    c0009ad9 <prepare_data+0x30>
c0009acc:	8d 14 36             	lea    edx,[esi+esi*1]
c0009acf:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0009ad2:	29 d0                	sub    eax,edx
c0009ad4:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c0009ad7:	eb 44                	jmp    c0009b1d <prepare_data+0x74>
c0009ad9:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c0009adc:	8d 0c 37             	lea    ecx,[edi+esi*1]
c0009adf:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c0009ae2:	39 c1                	cmp    ecx,eax
c0009ae4:	7d 04                	jge    c0009aea <prepare_data+0x41>
c0009ae6:	29 d0                	sub    eax,edx
c0009ae8:	eb 2d                	jmp    c0009b17 <prepare_data+0x6e>
c0009aea:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c0009af0:	29 d7                	sub    edi,edx
c0009af2:	01 f7                	add    edi,esi
c0009af4:	51                   	push   ecx
c0009af5:	29 f2                	sub    edx,esi
c0009af7:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c0009afe:	8d 14 90             	lea    edx,[eax+edx*4]
c0009b01:	51                   	push   ecx
c0009b02:	52                   	push   edx
c0009b03:	50                   	push   eax
c0009b04:	e8 91 6a ff ff       	call   c000059a <memmove>
c0009b09:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0009b0c:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c0009b0f:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c0009b12:	29 f0                	sub    eax,esi
c0009b14:	83 c4 10             	add    esp,0x10
c0009b17:	29 f0                	sub    eax,esi
c0009b19:	79 02                	jns    c0009b1d <prepare_data+0x74>
c0009b1b:	31 c0                	xor    eax,eax
c0009b1d:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0009b20:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0009b23:	29 ef                	sub    edi,ebp
c0009b25:	39 c7                	cmp    edi,eax
c0009b27:	7e 02                	jle    c0009b2b <prepare_data+0x82>
c0009b29:	89 c7                	mov    edi,eax
c0009b2b:	89 f8                	mov    eax,edi
c0009b2d:	99                   	cdq    
c0009b2e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009b31:	b8 15 00 00 00       	mov    eax,0x15
c0009b36:	29 d7                	sub    edi,edx
c0009b38:	0f 88 dd 00 00 00    	js     c0009c1b <prepare_data+0x172>
c0009b3e:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0009b41:	8d 14 39             	lea    edx,[ecx+edi*1]
c0009b44:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c0009b47:	0f 8f ce 00 00 00    	jg     c0009c1b <prepare_data+0x172>
c0009b4d:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c0009b53:	50                   	push   eax
c0009b54:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c0009b5b:	50                   	push   eax
c0009b5c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009b60:	8b 00                	mov    eax,DWORD PTR [eax]
c0009b62:	8d 04 a8             	lea    eax,[eax+ebp*4]
c0009b65:	50                   	push   eax
c0009b66:	8d 04 8a             	lea    eax,[edx+ecx*4]
c0009b69:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0009b6d:	50                   	push   eax
c0009b6e:	e8 5f 6a ff ff       	call   c00005d2 <memcpy>
c0009b73:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0009b76:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c0009b79:	01 fd                	add    ebp,edi
c0009b7b:	01 f9                	add    ecx,edi
c0009b7d:	83 c4 10             	add    esp,0x10
c0009b80:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c0009b83:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c0009b86:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c0009b89:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009b8d:	0f 85 86 00 00 00    	jne    c0009c19 <prepare_data+0x170>
c0009b93:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0009b96:	89 e8                	mov    eax,ebp
c0009b98:	8d 3c 36             	lea    edi,[esi+esi*1]
c0009b9b:	29 c8                	sub    eax,ecx
c0009b9d:	39 f8                	cmp    eax,edi
c0009b9f:	7d 78                	jge    c0009c19 <prepare_data+0x170>
c0009ba1:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0009ba5:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c0009ba9:	74 6e                	je     c0009c19 <prepare_data+0x170>
c0009bab:	8d 7e 04             	lea    edi,[esi+0x4]
c0009bae:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0009bb2:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c0009bb5:	29 ef                	sub    edi,ebp
c0009bb7:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0009bbb:	7c 29                	jl     c0009be6 <prepare_data+0x13d>
c0009bbd:	8d 3c 30             	lea    edi,[eax+esi*1]
c0009bc0:	29 f1                	sub    ecx,esi
c0009bc2:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c0009bc9:	55                   	push   ebp
c0009bca:	50                   	push   eax
c0009bcb:	8d 04 8a             	lea    eax,[edx+ecx*4]
c0009bce:	50                   	push   eax
c0009bcf:	52                   	push   edx
c0009bd0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009bd4:	e8 c1 69 ff ff       	call   c000059a <memmove>
c0009bd9:	83 c4 10             	add    esp,0x10
c0009bdc:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c0009bdf:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c0009be2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009be6:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009be9:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009bec:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c0009bef:	83 c6 05             	add    esi,0x5
c0009bf2:	78 07                	js     c0009bfb <prepare_data+0x152>
c0009bf4:	8d 3c 30             	lea    edi,[eax+esi*1]
c0009bf7:	39 cf                	cmp    edi,ecx
c0009bf9:	7e 04                	jle    c0009bff <prepare_data+0x156>
c0009bfb:	89 ce                	mov    esi,ecx
c0009bfd:	29 c6                	sub    esi,eax
c0009bff:	8d 04 82             	lea    eax,[edx+eax*4]
c0009c02:	51                   	push   ecx
c0009c03:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c0009c0a:	51                   	push   ecx
c0009c0b:	6a 00                	push   0x0
c0009c0d:	50                   	push   eax
c0009c0e:	e8 f5 69 ff ff       	call   c0000608 <memset>
c0009c13:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c0009c16:	83 c4 10             	add    esp,0x10
c0009c19:	31 c0                	xor    eax,eax
c0009c1b:	83 c4 1c             	add    esp,0x1c
c0009c1e:	5b                   	pop    ebx
c0009c1f:	5e                   	pop    esi
c0009c20:	5f                   	pop    edi
c0009c21:	5d                   	pop    ebp
c0009c22:	c3                   	ret    

c0009c23 <sinc_multichan_vari_process>:
c0009c23:	55                   	push   ebp
c0009c24:	b8 05 00 00 00       	mov    eax,0x5
c0009c29:	57                   	push   edi
c0009c2a:	56                   	push   esi
c0009c2b:	53                   	push   ebx
c0009c2c:	83 ec 3c             	sub    esp,0x3c
c0009c2f:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0009c33:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0009c37:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c0009c3a:	85 db                	test   ebx,ebx
c0009c3c:	0f 84 5d 02 00 00    	je     c0009e9f <sinc_multichan_vari_process+0x27c>
c0009c42:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0009c45:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009c48:	0f af d0             	imul   edx,eax
c0009c4b:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0009c4e:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c0009c52:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0009c59:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0009c5c:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0009c63:	dd 06                	fld    QWORD PTR [esi]
c0009c65:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c0009c69:	55                   	push   ebp
c0009c6a:	55                   	push   ebp
c0009c6b:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009c6e:	e8 d9 f2 ff ff       	call   c0008f4c <is_bad_src_ratio>
c0009c73:	89 c2                	mov    edx,eax
c0009c75:	58                   	pop    eax
c0009c76:	85 d2                	test   edx,edx
c0009c78:	59                   	pop    ecx
c0009c79:	b8 16 00 00 00       	mov    eax,0x16
c0009c7e:	0f 85 1b 02 00 00    	jne    c0009e9f <sinc_multichan_vari_process+0x27c>
c0009c84:	d9 05 30 ff 01 c0    	fld    DWORD PTR ds:0xc001ff30
c0009c8a:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c0009c8d:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c0009c90:	dd 06                	fld    QWORD PTR [esi]
c0009c92:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c0009c95:	d8 d1                	fcom   st(1)
c0009c97:	df e0                	fnstsw ax
c0009c99:	9e                   	sahf   
c0009c9a:	76 0f                	jbe    c0009cab <sinc_multichan_vari_process+0x88>
c0009c9c:	dd d8                	fstp   st(0)
c0009c9e:	d9 e8                	fld1   
c0009ca0:	d8 d9                	fcomp  st(1)
c0009ca2:	df e0                	fnstsw ax
c0009ca4:	9e                   	sahf   
c0009ca5:	77 0f                	ja     c0009cb6 <sinc_multichan_vari_process+0x93>
c0009ca7:	dd d8                	fstp   st(0)
c0009ca9:	eb 11                	jmp    c0009cbc <sinc_multichan_vari_process+0x99>
c0009cab:	dd d9                	fstp   st(1)
c0009cad:	d9 e8                	fld1   
c0009caf:	d8 d9                	fcomp  st(1)
c0009cb1:	df e0                	fnstsw ax
c0009cb3:	9e                   	sahf   
c0009cb4:	76 04                	jbe    c0009cba <sinc_multichan_vari_process+0x97>
c0009cb6:	de f9                	fdivp  st(1),st
c0009cb8:	eb 02                	jmp    c0009cbc <sinc_multichan_vari_process+0x99>
c0009cba:	dd d8                	fstp   st(0)
c0009cbc:	83 ec 10             	sub    esp,0x10
c0009cbf:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009cc2:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009cc5:	e8 36 49 01 00       	call   c001e600 <lrint>
c0009cca:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c0009ccd:	40                   	inc    eax
c0009cce:	dd 14 24             	fst    QWORD PTR [esp]
c0009cd1:	0f af c5             	imul   eax,ebp
c0009cd4:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009cd8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009cdc:	e8 71 fd ff ff       	call   c0009a52 <fmod_one>
c0009ce1:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0009ce4:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009ce8:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009ceb:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0009cef:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009cf3:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c0009cf7:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009cfa:	e8 01 49 01 00       	call   c001e600 <lrint>
c0009cff:	0f af e8             	imul   ebp,eax
c0009d02:	d9 e8                	fld1   
c0009d04:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009d08:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c0009d0c:	01 e8                	add    eax,ebp
c0009d0e:	dc 05 98 fd 01 c0    	fadd   QWORD PTR ds:0xc001fd98
c0009d14:	99                   	cdq    
c0009d15:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009d19:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c0009d1c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0009d1f:	83 c4 10             	add    esp,0x10
c0009d22:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009d25:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c0009d28:	7d 4b                	jge    c0009d75 <sinc_multichan_vari_process+0x152>
c0009d2a:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009d2d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009d30:	01 c8                	add    eax,ecx
c0009d32:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c0009d35:	99                   	cdq    
c0009d36:	f7 f9                	idiv   ecx
c0009d38:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0009d3c:	7d 09                	jge    c0009d47 <sinc_multichan_vari_process+0x124>
c0009d3e:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0009d41:	85 c0                	test   eax,eax
c0009d43:	79 57                	jns    c0009d9c <sinc_multichan_vari_process+0x179>
c0009d45:	eb 70                	jmp    c0009db7 <sinc_multichan_vari_process+0x194>
c0009d47:	51                   	push   ecx
c0009d48:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009d4c:	57                   	push   edi
c0009d4d:	53                   	push   ebx
c0009d4e:	e8 56 fd ff ff       	call   c0009aa9 <prepare_data>
c0009d53:	83 c4 10             	add    esp,0x10
c0009d56:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0009d59:	85 c0                	test   eax,eax
c0009d5b:	0f 85 3e 01 00 00    	jne    c0009e9f <sinc_multichan_vari_process+0x27c>
c0009d61:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009d64:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009d67:	01 c8                	add    eax,ecx
c0009d69:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c0009d6c:	99                   	cdq    
c0009d6d:	f7 f9                	idiv   ecx
c0009d6f:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0009d73:	7c c9                	jl     c0009d3e <sinc_multichan_vari_process+0x11b>
c0009d75:	dd 04 24             	fld    QWORD PTR [esp]
c0009d78:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c0009d7b:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009d7f:	dd 1e                	fstp   QWORD PTR [esi]
c0009d81:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0009d84:	99                   	cdq    
c0009d85:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009d88:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c0009d8b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009d8e:	99                   	cdq    
c0009d8f:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009d92:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c0009d95:	31 c0                	xor    eax,eax
c0009d97:	e9 03 01 00 00       	jmp    c0009e9f <sinc_multichan_vari_process+0x27c>
c0009d9c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009da0:	dd 04 24             	fld    QWORD PTR [esp]
c0009da3:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c0009da6:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c0009daa:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c0009dae:	d9 c9                	fxch   st(1)
c0009db0:	de d9                	fcompp 
c0009db2:	df e0                	fnstsw ax
c0009db4:	9e                   	sahf   
c0009db5:	73 be                	jae    c0009d75 <sinc_multichan_vari_process+0x152>
c0009db7:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c0009dbb:	7e 31                	jle    c0009dee <sinc_multichan_vari_process+0x1cb>
c0009dbd:	83 ec 10             	sub    esp,0x10
c0009dc0:	dd 06                	fld    QWORD PTR [esi]
c0009dc2:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c0009dc5:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009dc8:	e8 13 48 01 00       	call   c001e5e0 <fabs>
c0009dcd:	83 c4 10             	add    esp,0x10
c0009dd0:	dc 1d 20 ff 01 c0    	fcomp  QWORD PTR ds:0xc001ff20
c0009dd6:	df e0                	fnstsw ax
c0009dd8:	9e                   	sahf   
c0009dd9:	76 13                	jbe    c0009dee <sinc_multichan_vari_process+0x1cb>
c0009ddb:	dd 06                	fld    QWORD PTR [esi]
c0009ddd:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c0009de0:	d8 e1                	fsub   st,st(1)
c0009de2:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c0009de5:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c0009de8:	de c1                	faddp  st(1),st
c0009dea:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0009dee:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c0009df1:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009df5:	d9 e8                	fld1   
c0009df7:	d8 d9                	fcomp  st(1)
c0009df9:	df e0                	fnstsw ax
c0009dfb:	9e                   	sahf   
c0009dfc:	77 04                	ja     c0009e02 <sinc_multichan_vari_process+0x1df>
c0009dfe:	dd d8                	fstp   st(0)
c0009e00:	d9 e8                	fld1   
c0009e02:	de c9                	fmulp  st(1),st
c0009e04:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009e08:	50                   	push   eax
c0009e09:	50                   	push   eax
c0009e0a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e0e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e12:	e8 28 fc ff ff       	call   c0009a3f <double_to_fp>
c0009e17:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0009e1b:	89 c5                	mov    ebp,eax
c0009e1d:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c0009e21:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009e24:	e8 16 fc ff ff       	call   c0009a3f <double_to_fp>
c0009e29:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0009e2c:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c0009e2f:	8d 14 8a             	lea    edx,[edx+ecx*4]
c0009e32:	89 c1                	mov    ecx,eax
c0009e34:	52                   	push   edx
c0009e35:	89 d8                	mov    eax,ebx
c0009e37:	dd 44 24 2c          	fld    QWORD PTR [esp+0x2c]
c0009e3b:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c0009e3e:	52                   	push   edx
c0009e3f:	52                   	push   edx
c0009e40:	89 ea                	mov    edx,ebp
c0009e42:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009e45:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009e48:	e8 e9 f7 ff ff       	call   c0009636 <calc_output_multi>
c0009e4d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0009e50:	d9 e8                	fld1   
c0009e52:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c0009e55:	dc 74 24 28          	fdiv   QWORD PTR [esp+0x28]
c0009e59:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c0009e5d:	83 c4 10             	add    esp,0x10
c0009e60:	dd 14 24             	fst    QWORD PTR [esp]
c0009e63:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0009e67:	e8 e6 fb ff ff       	call   c0009a52 <fmod_one>
c0009e6c:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0009e6f:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009e73:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009e76:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0009e7a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009e7e:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c0009e82:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009e85:	e8 76 47 01 00       	call   c001e600 <lrint>
c0009e8a:	0f af e8             	imul   ebp,eax
c0009e8d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009e91:	01 e8                	add    eax,ebp
c0009e93:	99                   	cdq    
c0009e94:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c0009e97:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0009e9a:	e9 80 fe ff ff       	jmp    c0009d1f <sinc_multichan_vari_process+0xfc>
c0009e9f:	83 c4 3c             	add    esp,0x3c
c0009ea2:	5b                   	pop    ebx
c0009ea3:	5e                   	pop    esi
c0009ea4:	5f                   	pop    edi
c0009ea5:	5d                   	pop    ebp
c0009ea6:	c3                   	ret    

c0009ea7 <sinc_hex_vari_process>:
c0009ea7:	55                   	push   ebp
c0009ea8:	b8 05 00 00 00       	mov    eax,0x5
c0009ead:	57                   	push   edi
c0009eae:	56                   	push   esi
c0009eaf:	53                   	push   ebx
c0009eb0:	83 ec 3c             	sub    esp,0x3c
c0009eb3:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0009eb7:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0009ebb:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c0009ebe:	85 db                	test   ebx,ebx
c0009ec0:	0f 84 58 02 00 00    	je     c000a11e <sinc_hex_vari_process+0x277>
c0009ec6:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0009ec9:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009ecc:	0f af d0             	imul   edx,eax
c0009ecf:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0009ed2:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c0009ed6:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0009edd:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0009ee0:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0009ee7:	dd 06                	fld    QWORD PTR [esi]
c0009ee9:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c0009eed:	55                   	push   ebp
c0009eee:	55                   	push   ebp
c0009eef:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009ef2:	e8 55 f0 ff ff       	call   c0008f4c <is_bad_src_ratio>
c0009ef7:	89 c2                	mov    edx,eax
c0009ef9:	58                   	pop    eax
c0009efa:	85 d2                	test   edx,edx
c0009efc:	59                   	pop    ecx
c0009efd:	b8 16 00 00 00       	mov    eax,0x16
c0009f02:	0f 85 16 02 00 00    	jne    c000a11e <sinc_hex_vari_process+0x277>
c0009f08:	d9 05 30 ff 01 c0    	fld    DWORD PTR ds:0xc001ff30
c0009f0e:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c0009f11:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c0009f14:	dd 06                	fld    QWORD PTR [esi]
c0009f16:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c0009f19:	d8 d1                	fcom   st(1)
c0009f1b:	df e0                	fnstsw ax
c0009f1d:	9e                   	sahf   
c0009f1e:	76 0f                	jbe    c0009f2f <sinc_hex_vari_process+0x88>
c0009f20:	dd d8                	fstp   st(0)
c0009f22:	d9 e8                	fld1   
c0009f24:	d8 d9                	fcomp  st(1)
c0009f26:	df e0                	fnstsw ax
c0009f28:	9e                   	sahf   
c0009f29:	77 0f                	ja     c0009f3a <sinc_hex_vari_process+0x93>
c0009f2b:	dd d8                	fstp   st(0)
c0009f2d:	eb 11                	jmp    c0009f40 <sinc_hex_vari_process+0x99>
c0009f2f:	dd d9                	fstp   st(1)
c0009f31:	d9 e8                	fld1   
c0009f33:	d8 d9                	fcomp  st(1)
c0009f35:	df e0                	fnstsw ax
c0009f37:	9e                   	sahf   
c0009f38:	76 04                	jbe    c0009f3e <sinc_hex_vari_process+0x97>
c0009f3a:	de f9                	fdivp  st(1),st
c0009f3c:	eb 02                	jmp    c0009f40 <sinc_hex_vari_process+0x99>
c0009f3e:	dd d8                	fstp   st(0)
c0009f40:	83 ec 10             	sub    esp,0x10
c0009f43:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009f46:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009f49:	e8 b2 46 01 00       	call   c001e600 <lrint>
c0009f4e:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c0009f51:	40                   	inc    eax
c0009f52:	dd 14 24             	fst    QWORD PTR [esp]
c0009f55:	0f af c5             	imul   eax,ebp
c0009f58:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009f5c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009f60:	e8 ed fa ff ff       	call   c0009a52 <fmod_one>
c0009f65:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0009f68:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009f6c:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009f6f:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0009f73:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009f77:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c0009f7b:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009f7e:	e8 7d 46 01 00       	call   c001e600 <lrint>
c0009f83:	0f af e8             	imul   ebp,eax
c0009f86:	d9 e8                	fld1   
c0009f88:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009f8c:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c0009f90:	01 e8                	add    eax,ebp
c0009f92:	dc 05 98 fd 01 c0    	fadd   QWORD PTR ds:0xc001fd98
c0009f98:	99                   	cdq    
c0009f99:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009f9d:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c0009fa0:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0009fa3:	83 c4 10             	add    esp,0x10
c0009fa6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009fa9:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c0009fac:	7d 4b                	jge    c0009ff9 <sinc_hex_vari_process+0x152>
c0009fae:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009fb1:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009fb4:	01 c8                	add    eax,ecx
c0009fb6:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c0009fb9:	99                   	cdq    
c0009fba:	f7 f9                	idiv   ecx
c0009fbc:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0009fc0:	7d 09                	jge    c0009fcb <sinc_hex_vari_process+0x124>
c0009fc2:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0009fc5:	85 c0                	test   eax,eax
c0009fc7:	79 57                	jns    c000a020 <sinc_hex_vari_process+0x179>
c0009fc9:	eb 70                	jmp    c000a03b <sinc_hex_vari_process+0x194>
c0009fcb:	51                   	push   ecx
c0009fcc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009fd0:	57                   	push   edi
c0009fd1:	53                   	push   ebx
c0009fd2:	e8 d2 fa ff ff       	call   c0009aa9 <prepare_data>
c0009fd7:	83 c4 10             	add    esp,0x10
c0009fda:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0009fdd:	85 c0                	test   eax,eax
c0009fdf:	0f 85 39 01 00 00    	jne    c000a11e <sinc_hex_vari_process+0x277>
c0009fe5:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009fe8:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009feb:	01 c8                	add    eax,ecx
c0009fed:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c0009ff0:	99                   	cdq    
c0009ff1:	f7 f9                	idiv   ecx
c0009ff3:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0009ff7:	7c c9                	jl     c0009fc2 <sinc_hex_vari_process+0x11b>
c0009ff9:	dd 04 24             	fld    QWORD PTR [esp]
c0009ffc:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c0009fff:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a003:	dd 1e                	fstp   QWORD PTR [esi]
c000a005:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a008:	99                   	cdq    
c000a009:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a00c:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a00f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a012:	99                   	cdq    
c000a013:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a016:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a019:	31 c0                	xor    eax,eax
c000a01b:	e9 fe 00 00 00       	jmp    c000a11e <sinc_hex_vari_process+0x277>
c000a020:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a024:	dd 04 24             	fld    QWORD PTR [esp]
c000a027:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a02a:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c000a02e:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000a032:	d9 c9                	fxch   st(1)
c000a034:	de d9                	fcompp 
c000a036:	df e0                	fnstsw ax
c000a038:	9e                   	sahf   
c000a039:	73 be                	jae    c0009ff9 <sinc_hex_vari_process+0x152>
c000a03b:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a03f:	7e 31                	jle    c000a072 <sinc_hex_vari_process+0x1cb>
c000a041:	83 ec 10             	sub    esp,0x10
c000a044:	dd 06                	fld    QWORD PTR [esi]
c000a046:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a049:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a04c:	e8 8f 45 01 00       	call   c001e5e0 <fabs>
c000a051:	83 c4 10             	add    esp,0x10
c000a054:	dc 1d 20 ff 01 c0    	fcomp  QWORD PTR ds:0xc001ff20
c000a05a:	df e0                	fnstsw ax
c000a05c:	9e                   	sahf   
c000a05d:	76 13                	jbe    c000a072 <sinc_hex_vari_process+0x1cb>
c000a05f:	dd 06                	fld    QWORD PTR [esi]
c000a061:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a064:	d8 e1                	fsub   st,st(1)
c000a066:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a069:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a06c:	de c1                	faddp  st(1),st
c000a06e:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a072:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a075:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a079:	d9 e8                	fld1   
c000a07b:	d8 d9                	fcomp  st(1)
c000a07d:	df e0                	fnstsw ax
c000a07f:	9e                   	sahf   
c000a080:	77 04                	ja     c000a086 <sinc_hex_vari_process+0x1df>
c000a082:	dd d8                	fstp   st(0)
c000a084:	d9 e8                	fld1   
c000a086:	de c9                	fmulp  st(1),st
c000a088:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000a08c:	50                   	push   eax
c000a08d:	50                   	push   eax
c000a08e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a092:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a096:	e8 a4 f9 ff ff       	call   c0009a3f <double_to_fp>
c000a09b:	89 c5                	mov    ebp,eax
c000a09d:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a0a1:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000a0a5:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a0a8:	e8 92 f9 ff ff       	call   c0009a3f <double_to_fp>
c000a0ad:	83 c4 0c             	add    esp,0xc
c000a0b0:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a0b3:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000a0b6:	8d 14 8a             	lea    edx,[edx+ecx*4]
c000a0b9:	89 c1                	mov    ecx,eax
c000a0bb:	52                   	push   edx
c000a0bc:	89 d8                	mov    eax,ebx
c000a0be:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a0c2:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a0c5:	52                   	push   edx
c000a0c6:	52                   	push   edx
c000a0c7:	89 ea                	mov    edx,ebp
c000a0c9:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a0cc:	e8 d1 f2 ff ff       	call   c00093a2 <calc_output_hex>
c000a0d1:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000a0d5:	d9 e8                	fld1   
c000a0d7:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a0db:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a0df:	dd 14 24             	fst    QWORD PTR [esp]
c000a0e2:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000a0e6:	e8 67 f9 ff ff       	call   c0009a52 <fmod_one>
c000a0eb:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a0ee:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a0f2:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a0f5:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000a0f9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a0fd:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a101:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a104:	e8 f7 44 01 00       	call   c001e600 <lrint>
c000a109:	0f af e8             	imul   ebp,eax
c000a10c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a110:	01 e8                	add    eax,ebp
c000a112:	99                   	cdq    
c000a113:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a116:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a119:	e9 85 fe ff ff       	jmp    c0009fa3 <sinc_hex_vari_process+0xfc>
c000a11e:	83 c4 3c             	add    esp,0x3c
c000a121:	5b                   	pop    ebx
c000a122:	5e                   	pop    esi
c000a123:	5f                   	pop    edi
c000a124:	5d                   	pop    ebp
c000a125:	c3                   	ret    

c000a126 <sinc_quad_vari_process>:
c000a126:	55                   	push   ebp
c000a127:	b8 05 00 00 00       	mov    eax,0x5
c000a12c:	57                   	push   edi
c000a12d:	56                   	push   esi
c000a12e:	53                   	push   ebx
c000a12f:	83 ec 3c             	sub    esp,0x3c
c000a132:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000a136:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000a13a:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000a13d:	85 db                	test   ebx,ebx
c000a13f:	0f 84 58 02 00 00    	je     c000a39d <sinc_quad_vari_process+0x277>
c000a145:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000a148:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a14b:	0f af d0             	imul   edx,eax
c000a14e:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000a151:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c000a155:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a15c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a15f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000a166:	dd 06                	fld    QWORD PTR [esi]
c000a168:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c000a16c:	55                   	push   ebp
c000a16d:	55                   	push   ebp
c000a16e:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a171:	e8 d6 ed ff ff       	call   c0008f4c <is_bad_src_ratio>
c000a176:	89 c2                	mov    edx,eax
c000a178:	58                   	pop    eax
c000a179:	85 d2                	test   edx,edx
c000a17b:	59                   	pop    ecx
c000a17c:	b8 16 00 00 00       	mov    eax,0x16
c000a181:	0f 85 16 02 00 00    	jne    c000a39d <sinc_quad_vari_process+0x277>
c000a187:	d9 05 30 ff 01 c0    	fld    DWORD PTR ds:0xc001ff30
c000a18d:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c000a190:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a193:	dd 06                	fld    QWORD PTR [esi]
c000a195:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a198:	d8 d1                	fcom   st(1)
c000a19a:	df e0                	fnstsw ax
c000a19c:	9e                   	sahf   
c000a19d:	76 0f                	jbe    c000a1ae <sinc_quad_vari_process+0x88>
c000a19f:	dd d8                	fstp   st(0)
c000a1a1:	d9 e8                	fld1   
c000a1a3:	d8 d9                	fcomp  st(1)
c000a1a5:	df e0                	fnstsw ax
c000a1a7:	9e                   	sahf   
c000a1a8:	77 0f                	ja     c000a1b9 <sinc_quad_vari_process+0x93>
c000a1aa:	dd d8                	fstp   st(0)
c000a1ac:	eb 11                	jmp    c000a1bf <sinc_quad_vari_process+0x99>
c000a1ae:	dd d9                	fstp   st(1)
c000a1b0:	d9 e8                	fld1   
c000a1b2:	d8 d9                	fcomp  st(1)
c000a1b4:	df e0                	fnstsw ax
c000a1b6:	9e                   	sahf   
c000a1b7:	76 04                	jbe    c000a1bd <sinc_quad_vari_process+0x97>
c000a1b9:	de f9                	fdivp  st(1),st
c000a1bb:	eb 02                	jmp    c000a1bf <sinc_quad_vari_process+0x99>
c000a1bd:	dd d8                	fstp   st(0)
c000a1bf:	83 ec 10             	sub    esp,0x10
c000a1c2:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a1c5:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a1c8:	e8 33 44 01 00       	call   c001e600 <lrint>
c000a1cd:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c000a1d0:	40                   	inc    eax
c000a1d1:	dd 14 24             	fst    QWORD PTR [esp]
c000a1d4:	0f af c5             	imul   eax,ebp
c000a1d7:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a1db:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a1df:	e8 6e f8 ff ff       	call   c0009a52 <fmod_one>
c000a1e4:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a1e7:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a1eb:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a1ee:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a1f2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a1f6:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a1fa:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a1fd:	e8 fe 43 01 00       	call   c001e600 <lrint>
c000a202:	0f af e8             	imul   ebp,eax
c000a205:	d9 e8                	fld1   
c000a207:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a20b:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a20f:	01 e8                	add    eax,ebp
c000a211:	dc 05 98 fd 01 c0    	fadd   QWORD PTR ds:0xc001fd98
c000a217:	99                   	cdq    
c000a218:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a21c:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a21f:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a222:	83 c4 10             	add    esp,0x10
c000a225:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a228:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a22b:	7d 4b                	jge    c000a278 <sinc_quad_vari_process+0x152>
c000a22d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a230:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a233:	01 c8                	add    eax,ecx
c000a235:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a238:	99                   	cdq    
c000a239:	f7 f9                	idiv   ecx
c000a23b:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a23f:	7d 09                	jge    c000a24a <sinc_quad_vari_process+0x124>
c000a241:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a244:	85 c0                	test   eax,eax
c000a246:	79 57                	jns    c000a29f <sinc_quad_vari_process+0x179>
c000a248:	eb 70                	jmp    c000a2ba <sinc_quad_vari_process+0x194>
c000a24a:	51                   	push   ecx
c000a24b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a24f:	57                   	push   edi
c000a250:	53                   	push   ebx
c000a251:	e8 53 f8 ff ff       	call   c0009aa9 <prepare_data>
c000a256:	83 c4 10             	add    esp,0x10
c000a259:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a25c:	85 c0                	test   eax,eax
c000a25e:	0f 85 39 01 00 00    	jne    c000a39d <sinc_quad_vari_process+0x277>
c000a264:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a267:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a26a:	01 c8                	add    eax,ecx
c000a26c:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a26f:	99                   	cdq    
c000a270:	f7 f9                	idiv   ecx
c000a272:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a276:	7c c9                	jl     c000a241 <sinc_quad_vari_process+0x11b>
c000a278:	dd 04 24             	fld    QWORD PTR [esp]
c000a27b:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a27e:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a282:	dd 1e                	fstp   QWORD PTR [esi]
c000a284:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a287:	99                   	cdq    
c000a288:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a28b:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a28e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a291:	99                   	cdq    
c000a292:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a295:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a298:	31 c0                	xor    eax,eax
c000a29a:	e9 fe 00 00 00       	jmp    c000a39d <sinc_quad_vari_process+0x277>
c000a29f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a2a3:	dd 04 24             	fld    QWORD PTR [esp]
c000a2a6:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a2a9:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c000a2ad:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000a2b1:	d9 c9                	fxch   st(1)
c000a2b3:	de d9                	fcompp 
c000a2b5:	df e0                	fnstsw ax
c000a2b7:	9e                   	sahf   
c000a2b8:	73 be                	jae    c000a278 <sinc_quad_vari_process+0x152>
c000a2ba:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a2be:	7e 31                	jle    c000a2f1 <sinc_quad_vari_process+0x1cb>
c000a2c0:	83 ec 10             	sub    esp,0x10
c000a2c3:	dd 06                	fld    QWORD PTR [esi]
c000a2c5:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a2c8:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a2cb:	e8 10 43 01 00       	call   c001e5e0 <fabs>
c000a2d0:	83 c4 10             	add    esp,0x10
c000a2d3:	dc 1d 20 ff 01 c0    	fcomp  QWORD PTR ds:0xc001ff20
c000a2d9:	df e0                	fnstsw ax
c000a2db:	9e                   	sahf   
c000a2dc:	76 13                	jbe    c000a2f1 <sinc_quad_vari_process+0x1cb>
c000a2de:	dd 06                	fld    QWORD PTR [esi]
c000a2e0:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a2e3:	d8 e1                	fsub   st,st(1)
c000a2e5:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a2e8:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a2eb:	de c1                	faddp  st(1),st
c000a2ed:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a2f1:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a2f4:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a2f8:	d9 e8                	fld1   
c000a2fa:	d8 d9                	fcomp  st(1)
c000a2fc:	df e0                	fnstsw ax
c000a2fe:	9e                   	sahf   
c000a2ff:	77 04                	ja     c000a305 <sinc_quad_vari_process+0x1df>
c000a301:	dd d8                	fstp   st(0)
c000a303:	d9 e8                	fld1   
c000a305:	de c9                	fmulp  st(1),st
c000a307:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000a30b:	50                   	push   eax
c000a30c:	50                   	push   eax
c000a30d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a311:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a315:	e8 25 f7 ff ff       	call   c0009a3f <double_to_fp>
c000a31a:	89 c5                	mov    ebp,eax
c000a31c:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a320:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000a324:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a327:	e8 13 f7 ff ff       	call   c0009a3f <double_to_fp>
c000a32c:	83 c4 0c             	add    esp,0xc
c000a32f:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a332:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000a335:	8d 14 8a             	lea    edx,[edx+ecx*4]
c000a338:	89 c1                	mov    ecx,eax
c000a33a:	52                   	push   edx
c000a33b:	89 d8                	mov    eax,ebx
c000a33d:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a341:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a344:	52                   	push   edx
c000a345:	52                   	push   edx
c000a346:	89 ea                	mov    edx,ebp
c000a348:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a34b:	e8 8d ee ff ff       	call   c00091dd <calc_output_quad>
c000a350:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000a354:	d9 e8                	fld1   
c000a356:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a35a:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a35e:	dd 14 24             	fst    QWORD PTR [esp]
c000a361:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000a365:	e8 e8 f6 ff ff       	call   c0009a52 <fmod_one>
c000a36a:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a36d:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a371:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a374:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000a378:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a37c:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a380:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a383:	e8 78 42 01 00       	call   c001e600 <lrint>
c000a388:	0f af e8             	imul   ebp,eax
c000a38b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a38f:	01 e8                	add    eax,ebp
c000a391:	99                   	cdq    
c000a392:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a395:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a398:	e9 85 fe ff ff       	jmp    c000a222 <sinc_quad_vari_process+0xfc>
c000a39d:	83 c4 3c             	add    esp,0x3c
c000a3a0:	5b                   	pop    ebx
c000a3a1:	5e                   	pop    esi
c000a3a2:	5f                   	pop    edi
c000a3a3:	5d                   	pop    ebp
c000a3a4:	c3                   	ret    

c000a3a5 <sinc_stereo_vari_process>:
c000a3a5:	55                   	push   ebp
c000a3a6:	b8 05 00 00 00       	mov    eax,0x5
c000a3ab:	57                   	push   edi
c000a3ac:	56                   	push   esi
c000a3ad:	53                   	push   ebx
c000a3ae:	83 ec 3c             	sub    esp,0x3c
c000a3b1:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000a3b5:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000a3b9:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000a3bc:	85 db                	test   ebx,ebx
c000a3be:	0f 84 58 02 00 00    	je     c000a61c <sinc_stereo_vari_process+0x277>
c000a3c4:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000a3c7:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a3ca:	0f af d0             	imul   edx,eax
c000a3cd:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000a3d0:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c000a3d4:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a3db:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a3de:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000a3e5:	dd 06                	fld    QWORD PTR [esi]
c000a3e7:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c000a3eb:	55                   	push   ebp
c000a3ec:	55                   	push   ebp
c000a3ed:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a3f0:	e8 57 eb ff ff       	call   c0008f4c <is_bad_src_ratio>
c000a3f5:	89 c2                	mov    edx,eax
c000a3f7:	58                   	pop    eax
c000a3f8:	85 d2                	test   edx,edx
c000a3fa:	59                   	pop    ecx
c000a3fb:	b8 16 00 00 00       	mov    eax,0x16
c000a400:	0f 85 16 02 00 00    	jne    c000a61c <sinc_stereo_vari_process+0x277>
c000a406:	d9 05 30 ff 01 c0    	fld    DWORD PTR ds:0xc001ff30
c000a40c:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c000a40f:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a412:	dd 06                	fld    QWORD PTR [esi]
c000a414:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a417:	d8 d1                	fcom   st(1)
c000a419:	df e0                	fnstsw ax
c000a41b:	9e                   	sahf   
c000a41c:	76 0f                	jbe    c000a42d <sinc_stereo_vari_process+0x88>
c000a41e:	dd d8                	fstp   st(0)
c000a420:	d9 e8                	fld1   
c000a422:	d8 d9                	fcomp  st(1)
c000a424:	df e0                	fnstsw ax
c000a426:	9e                   	sahf   
c000a427:	77 0f                	ja     c000a438 <sinc_stereo_vari_process+0x93>
c000a429:	dd d8                	fstp   st(0)
c000a42b:	eb 11                	jmp    c000a43e <sinc_stereo_vari_process+0x99>
c000a42d:	dd d9                	fstp   st(1)
c000a42f:	d9 e8                	fld1   
c000a431:	d8 d9                	fcomp  st(1)
c000a433:	df e0                	fnstsw ax
c000a435:	9e                   	sahf   
c000a436:	76 04                	jbe    c000a43c <sinc_stereo_vari_process+0x97>
c000a438:	de f9                	fdivp  st(1),st
c000a43a:	eb 02                	jmp    c000a43e <sinc_stereo_vari_process+0x99>
c000a43c:	dd d8                	fstp   st(0)
c000a43e:	83 ec 10             	sub    esp,0x10
c000a441:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a444:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a447:	e8 b4 41 01 00       	call   c001e600 <lrint>
c000a44c:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c000a44f:	40                   	inc    eax
c000a450:	dd 14 24             	fst    QWORD PTR [esp]
c000a453:	0f af c5             	imul   eax,ebp
c000a456:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a45a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a45e:	e8 ef f5 ff ff       	call   c0009a52 <fmod_one>
c000a463:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a466:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a46a:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a46d:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a471:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a475:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a479:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a47c:	e8 7f 41 01 00       	call   c001e600 <lrint>
c000a481:	0f af e8             	imul   ebp,eax
c000a484:	d9 e8                	fld1   
c000a486:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a48a:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a48e:	01 e8                	add    eax,ebp
c000a490:	dc 05 98 fd 01 c0    	fadd   QWORD PTR ds:0xc001fd98
c000a496:	99                   	cdq    
c000a497:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a49b:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a49e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a4a1:	83 c4 10             	add    esp,0x10
c000a4a4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a4a7:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a4aa:	7d 4b                	jge    c000a4f7 <sinc_stereo_vari_process+0x152>
c000a4ac:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a4af:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a4b2:	01 c8                	add    eax,ecx
c000a4b4:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a4b7:	99                   	cdq    
c000a4b8:	f7 f9                	idiv   ecx
c000a4ba:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a4be:	7d 09                	jge    c000a4c9 <sinc_stereo_vari_process+0x124>
c000a4c0:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a4c3:	85 c0                	test   eax,eax
c000a4c5:	79 57                	jns    c000a51e <sinc_stereo_vari_process+0x179>
c000a4c7:	eb 70                	jmp    c000a539 <sinc_stereo_vari_process+0x194>
c000a4c9:	51                   	push   ecx
c000a4ca:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a4ce:	57                   	push   edi
c000a4cf:	53                   	push   ebx
c000a4d0:	e8 d4 f5 ff ff       	call   c0009aa9 <prepare_data>
c000a4d5:	83 c4 10             	add    esp,0x10
c000a4d8:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a4db:	85 c0                	test   eax,eax
c000a4dd:	0f 85 39 01 00 00    	jne    c000a61c <sinc_stereo_vari_process+0x277>
c000a4e3:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a4e6:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a4e9:	01 c8                	add    eax,ecx
c000a4eb:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a4ee:	99                   	cdq    
c000a4ef:	f7 f9                	idiv   ecx
c000a4f1:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a4f5:	7c c9                	jl     c000a4c0 <sinc_stereo_vari_process+0x11b>
c000a4f7:	dd 04 24             	fld    QWORD PTR [esp]
c000a4fa:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a4fd:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a501:	dd 1e                	fstp   QWORD PTR [esi]
c000a503:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a506:	99                   	cdq    
c000a507:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a50a:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a50d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a510:	99                   	cdq    
c000a511:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a514:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a517:	31 c0                	xor    eax,eax
c000a519:	e9 fe 00 00 00       	jmp    c000a61c <sinc_stereo_vari_process+0x277>
c000a51e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a522:	dd 04 24             	fld    QWORD PTR [esp]
c000a525:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a528:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c000a52c:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000a530:	d9 c9                	fxch   st(1)
c000a532:	de d9                	fcompp 
c000a534:	df e0                	fnstsw ax
c000a536:	9e                   	sahf   
c000a537:	73 be                	jae    c000a4f7 <sinc_stereo_vari_process+0x152>
c000a539:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a53d:	7e 31                	jle    c000a570 <sinc_stereo_vari_process+0x1cb>
c000a53f:	83 ec 10             	sub    esp,0x10
c000a542:	dd 06                	fld    QWORD PTR [esi]
c000a544:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a547:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a54a:	e8 91 40 01 00       	call   c001e5e0 <fabs>
c000a54f:	83 c4 10             	add    esp,0x10
c000a552:	dc 1d 20 ff 01 c0    	fcomp  QWORD PTR ds:0xc001ff20
c000a558:	df e0                	fnstsw ax
c000a55a:	9e                   	sahf   
c000a55b:	76 13                	jbe    c000a570 <sinc_stereo_vari_process+0x1cb>
c000a55d:	dd 06                	fld    QWORD PTR [esi]
c000a55f:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a562:	d8 e1                	fsub   st,st(1)
c000a564:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a567:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a56a:	de c1                	faddp  st(1),st
c000a56c:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a570:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a573:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a577:	d9 e8                	fld1   
c000a579:	d8 d9                	fcomp  st(1)
c000a57b:	df e0                	fnstsw ax
c000a57d:	9e                   	sahf   
c000a57e:	77 04                	ja     c000a584 <sinc_stereo_vari_process+0x1df>
c000a580:	dd d8                	fstp   st(0)
c000a582:	d9 e8                	fld1   
c000a584:	de c9                	fmulp  st(1),st
c000a586:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000a58a:	50                   	push   eax
c000a58b:	50                   	push   eax
c000a58c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a590:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a594:	e8 a6 f4 ff ff       	call   c0009a3f <double_to_fp>
c000a599:	89 c5                	mov    ebp,eax
c000a59b:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a59f:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000a5a3:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a5a6:	e8 94 f4 ff ff       	call   c0009a3f <double_to_fp>
c000a5ab:	83 c4 0c             	add    esp,0xc
c000a5ae:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a5b1:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000a5b4:	8d 14 8a             	lea    edx,[edx+ecx*4]
c000a5b7:	89 c1                	mov    ecx,eax
c000a5b9:	52                   	push   edx
c000a5ba:	89 d8                	mov    eax,ebx
c000a5bc:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a5c0:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a5c3:	52                   	push   edx
c000a5c4:	52                   	push   edx
c000a5c5:	89 ea                	mov    edx,ebp
c000a5c7:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a5ca:	e8 ce ea ff ff       	call   c000909d <calc_output_stereo>
c000a5cf:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000a5d3:	d9 e8                	fld1   
c000a5d5:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a5d9:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a5dd:	dd 14 24             	fst    QWORD PTR [esp]
c000a5e0:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000a5e4:	e8 69 f4 ff ff       	call   c0009a52 <fmod_one>
c000a5e9:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a5ec:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a5f0:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a5f3:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000a5f7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a5fb:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a5ff:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a602:	e8 f9 3f 01 00       	call   c001e600 <lrint>
c000a607:	0f af e8             	imul   ebp,eax
c000a60a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a60e:	01 e8                	add    eax,ebp
c000a610:	99                   	cdq    
c000a611:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a614:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a617:	e9 85 fe ff ff       	jmp    c000a4a1 <sinc_stereo_vari_process+0xfc>
c000a61c:	83 c4 3c             	add    esp,0x3c
c000a61f:	5b                   	pop    ebx
c000a620:	5e                   	pop    esi
c000a621:	5f                   	pop    edi
c000a622:	5d                   	pop    ebp
c000a623:	c3                   	ret    

c000a624 <sinc_mono_vari_process>:
c000a624:	55                   	push   ebp
c000a625:	b8 05 00 00 00       	mov    eax,0x5
c000a62a:	57                   	push   edi
c000a62b:	56                   	push   esi
c000a62c:	53                   	push   ebx
c000a62d:	83 ec 3c             	sub    esp,0x3c
c000a630:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000a634:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000a638:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000a63b:	85 db                	test   ebx,ebx
c000a63d:	0f 84 57 02 00 00    	je     c000a89a <sinc_mono_vari_process+0x276>
c000a643:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000a646:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a649:	0f af d0             	imul   edx,eax
c000a64c:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000a64f:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c000a653:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a65a:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a65d:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000a664:	dd 06                	fld    QWORD PTR [esi]
c000a666:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c000a66a:	51                   	push   ecx
c000a66b:	51                   	push   ecx
c000a66c:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a66f:	e8 d8 e8 ff ff       	call   c0008f4c <is_bad_src_ratio>
c000a674:	5d                   	pop    ebp
c000a675:	89 c2                	mov    edx,eax
c000a677:	58                   	pop    eax
c000a678:	85 d2                	test   edx,edx
c000a67a:	b8 16 00 00 00       	mov    eax,0x16
c000a67f:	0f 85 15 02 00 00    	jne    c000a89a <sinc_mono_vari_process+0x276>
c000a685:	d9 05 30 ff 01 c0    	fld    DWORD PTR ds:0xc001ff30
c000a68b:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c000a68e:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a691:	dd 06                	fld    QWORD PTR [esi]
c000a693:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a696:	d8 d1                	fcom   st(1)
c000a698:	df e0                	fnstsw ax
c000a69a:	9e                   	sahf   
c000a69b:	76 0f                	jbe    c000a6ac <sinc_mono_vari_process+0x88>
c000a69d:	dd d8                	fstp   st(0)
c000a69f:	d9 e8                	fld1   
c000a6a1:	d8 d9                	fcomp  st(1)
c000a6a3:	df e0                	fnstsw ax
c000a6a5:	9e                   	sahf   
c000a6a6:	77 0f                	ja     c000a6b7 <sinc_mono_vari_process+0x93>
c000a6a8:	dd d8                	fstp   st(0)
c000a6aa:	eb 11                	jmp    c000a6bd <sinc_mono_vari_process+0x99>
c000a6ac:	dd d9                	fstp   st(1)
c000a6ae:	d9 e8                	fld1   
c000a6b0:	d8 d9                	fcomp  st(1)
c000a6b2:	df e0                	fnstsw ax
c000a6b4:	9e                   	sahf   
c000a6b5:	76 04                	jbe    c000a6bb <sinc_mono_vari_process+0x97>
c000a6b7:	de f9                	fdivp  st(1),st
c000a6b9:	eb 02                	jmp    c000a6bd <sinc_mono_vari_process+0x99>
c000a6bb:	dd d8                	fstp   st(0)
c000a6bd:	83 ec 10             	sub    esp,0x10
c000a6c0:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a6c3:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a6c6:	e8 35 3f 01 00       	call   c001e600 <lrint>
c000a6cb:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c000a6ce:	40                   	inc    eax
c000a6cf:	dd 14 24             	fst    QWORD PTR [esp]
c000a6d2:	0f af e8             	imul   ebp,eax
c000a6d5:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000a6d9:	e8 74 f3 ff ff       	call   c0009a52 <fmod_one>
c000a6de:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a6e1:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a6e5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a6e9:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c000a6ed:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a6f0:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a6f4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a6f8:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a6fb:	e8 00 3f 01 00       	call   c001e600 <lrint>
c000a700:	0f af 44 24 38       	imul   eax,DWORD PTR [esp+0x38]
c000a705:	d9 e8                	fld1   
c000a707:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a70b:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a70f:	99                   	cdq    
c000a710:	dc 05 98 fd 01 c0    	fadd   QWORD PTR ds:0xc001fd98
c000a716:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a719:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000a71d:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a720:	83 c4 10             	add    esp,0x10
c000a723:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a726:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a729:	7d 44                	jge    c000a76f <sinc_mono_vari_process+0x14b>
c000a72b:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a72e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a731:	01 c8                	add    eax,ecx
c000a733:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a736:	99                   	cdq    
c000a737:	f7 f9                	idiv   ecx
c000a739:	39 d5                	cmp    ebp,edx
c000a73b:	7d 09                	jge    c000a746 <sinc_mono_vari_process+0x122>
c000a73d:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a740:	85 c0                	test   eax,eax
c000a742:	79 52                	jns    c000a796 <sinc_mono_vari_process+0x172>
c000a744:	eb 6b                	jmp    c000a7b1 <sinc_mono_vari_process+0x18d>
c000a746:	52                   	push   edx
c000a747:	55                   	push   ebp
c000a748:	57                   	push   edi
c000a749:	53                   	push   ebx
c000a74a:	e8 5a f3 ff ff       	call   c0009aa9 <prepare_data>
c000a74f:	83 c4 10             	add    esp,0x10
c000a752:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a755:	85 c0                	test   eax,eax
c000a757:	0f 85 3d 01 00 00    	jne    c000a89a <sinc_mono_vari_process+0x276>
c000a75d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a760:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a763:	01 c8                	add    eax,ecx
c000a765:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a768:	99                   	cdq    
c000a769:	f7 f9                	idiv   ecx
c000a76b:	39 d5                	cmp    ebp,edx
c000a76d:	7c ce                	jl     c000a73d <sinc_mono_vari_process+0x119>
c000a76f:	dd 04 24             	fld    QWORD PTR [esp]
c000a772:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a775:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a779:	dd 1e                	fstp   QWORD PTR [esi]
c000a77b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a77e:	99                   	cdq    
c000a77f:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a782:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a785:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a788:	99                   	cdq    
c000a789:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a78c:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a78f:	31 c0                	xor    eax,eax
c000a791:	e9 04 01 00 00       	jmp    c000a89a <sinc_mono_vari_process+0x276>
c000a796:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a79a:	dd 04 24             	fld    QWORD PTR [esp]
c000a79d:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a7a0:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c000a7a4:	db 44 24 10          	fild   DWORD PTR [esp+0x10]
c000a7a8:	d9 c9                	fxch   st(1)
c000a7aa:	de d9                	fcompp 
c000a7ac:	df e0                	fnstsw ax
c000a7ae:	9e                   	sahf   
c000a7af:	77 be                	ja     c000a76f <sinc_mono_vari_process+0x14b>
c000a7b1:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a7b5:	7e 31                	jle    c000a7e8 <sinc_mono_vari_process+0x1c4>
c000a7b7:	83 ec 10             	sub    esp,0x10
c000a7ba:	dd 06                	fld    QWORD PTR [esi]
c000a7bc:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a7bf:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a7c2:	e8 19 3e 01 00       	call   c001e5e0 <fabs>
c000a7c7:	83 c4 10             	add    esp,0x10
c000a7ca:	dc 1d 20 ff 01 c0    	fcomp  QWORD PTR ds:0xc001ff20
c000a7d0:	df e0                	fnstsw ax
c000a7d2:	9e                   	sahf   
c000a7d3:	76 13                	jbe    c000a7e8 <sinc_mono_vari_process+0x1c4>
c000a7d5:	dd 06                	fld    QWORD PTR [esi]
c000a7d7:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a7da:	d8 e1                	fsub   st,st(1)
c000a7dc:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a7df:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a7e2:	de c1                	faddp  st(1),st
c000a7e4:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a7e8:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a7eb:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a7ef:	d9 e8                	fld1   
c000a7f1:	d8 d9                	fcomp  st(1)
c000a7f3:	df e0                	fnstsw ax
c000a7f5:	9e                   	sahf   
c000a7f6:	77 04                	ja     c000a7fc <sinc_mono_vari_process+0x1d8>
c000a7f8:	dd d8                	fstp   st(0)
c000a7fa:	d9 e8                	fld1   
c000a7fc:	de c9                	fmulp  st(1),st
c000a7fe:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a802:	50                   	push   eax
c000a803:	50                   	push   eax
c000a804:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a808:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a80c:	e8 2e f2 ff ff       	call   c0009a3f <double_to_fp>
c000a811:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a815:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a819:	dc 4c 24 20          	fmul   QWORD PTR [esp+0x20]
c000a81d:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a820:	e8 1a f2 ff ff       	call   c0009a3f <double_to_fp>
c000a825:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000a829:	89 c1                	mov    ecx,eax
c000a82b:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a82f:	89 d8                	mov    eax,ebx
c000a831:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a834:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c000a838:	e8 7b e7 ff ff       	call   c0008fb8 <calc_output_single>
c000a83d:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000a840:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000a843:	dc 4c 24 20          	fmul   QWORD PTR [esp+0x20]
c000a847:	d9 1c 90             	fstp   DWORD PTR [eax+edx*4]
c000a84a:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000a84d:	d9 e8                	fld1   
c000a84f:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a853:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a857:	dd 14 24             	fst    QWORD PTR [esp]
c000a85a:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a85e:	e8 ef f1 ff ff       	call   c0009a52 <fmod_one>
c000a863:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a866:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a86a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a86e:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a872:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a875:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a879:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a87d:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a880:	e8 7b 3d 01 00       	call   c001e600 <lrint>
c000a885:	0f af 44 24 38       	imul   eax,DWORD PTR [esp+0x38]
c000a88a:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a88e:	99                   	cdq    
c000a88f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a892:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a895:	e9 86 fe ff ff       	jmp    c000a720 <sinc_mono_vari_process+0xfc>
c000a89a:	83 c4 3c             	add    esp,0x3c
c000a89d:	5b                   	pop    ebx
c000a89e:	5e                   	pop    esi
c000a89f:	5f                   	pop    edi
c000a8a0:	5d                   	pop    ebp
c000a8a1:	c3                   	ret    

c000a8a2 <sinc_get_name>:
c000a8a2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a8a6:	31 c0                	xor    eax,eax
c000a8a8:	83 fa 02             	cmp    edx,0x2
c000a8ab:	77 07                	ja     c000a8b4 <sinc_get_name+0x12>
c000a8ad:	8b 04 95 00 fe 01 c0 	mov    eax,DWORD PTR [edx*4-0x3ffe0200]
c000a8b4:	c3                   	ret    

c000a8b5 <sinc_get_description>:
c000a8b5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a8b9:	31 c0                	xor    eax,eax
c000a8bb:	83 fa 02             	cmp    edx,0x2
c000a8be:	77 07                	ja     c000a8c7 <sinc_get_description+0x12>
c000a8c0:	8b 04 95 f4 fd 01 c0 	mov    eax,DWORD PTR [edx*4-0x3ffe020c]
c000a8c7:	c3                   	ret    

c000a8c8 <sinc_set_converter>:
c000a8c8:	53                   	push   ebx
c000a8c9:	81 ec 58 08 00 00    	sub    esp,0x858
c000a8cf:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000a8d6:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000a8d9:	85 c0                	test   eax,eax
c000a8db:	74 13                	je     c000a8f0 <sinc_set_converter+0x28>
c000a8dd:	83 ec 0c             	sub    esp,0xc
c000a8e0:	50                   	push   eax
c000a8e1:	e8 48 13 00 00       	call   c000bc2e <free>
c000a8e6:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000a8ed:	83 c4 10             	add    esp,0x10
c000a8f0:	50                   	push   eax
c000a8f1:	68 44 08 00 00       	push   0x844
c000a8f6:	6a 00                	push   0x0
c000a8f8:	8d 44 24 18          	lea    eax,[esp+0x18]
c000a8fc:	50                   	push   eax
c000a8fd:	e8 06 5d ff ff       	call   c0000608 <memset>
c000a902:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000a905:	83 c4 10             	add    esp,0x10
c000a908:	b8 0b 00 00 00       	mov    eax,0xb
c000a90d:	81 fa 80 00 00 00    	cmp    edx,0x80
c000a913:	7f 6e                	jg     c000a983 <sinc_set_converter+0xbb>
c000a915:	83 fa 01             	cmp    edx,0x1
c000a918:	75 10                	jne    c000a92a <sinc_set_converter+0x62>
c000a91a:	c7 43 24 24 a6 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000a624
c000a921:	c7 43 20 24 a6 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000a624
c000a928:	eb 4d                	jmp    c000a977 <sinc_set_converter+0xaf>
c000a92a:	83 fa 02             	cmp    edx,0x2
c000a92d:	75 10                	jne    c000a93f <sinc_set_converter+0x77>
c000a92f:	c7 43 24 a5 a3 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000a3a5
c000a936:	c7 43 20 a5 a3 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000a3a5
c000a93d:	eb 38                	jmp    c000a977 <sinc_set_converter+0xaf>
c000a93f:	83 fa 04             	cmp    edx,0x4
c000a942:	75 10                	jne    c000a954 <sinc_set_converter+0x8c>
c000a944:	c7 43 24 26 a1 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000a126
c000a94b:	c7 43 20 26 a1 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000a126
c000a952:	eb 23                	jmp    c000a977 <sinc_set_converter+0xaf>
c000a954:	83 fa 06             	cmp    edx,0x6
c000a957:	75 10                	jne    c000a969 <sinc_set_converter+0xa1>
c000a959:	c7 43 24 a7 9e 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0009ea7
c000a960:	c7 43 20 a7 9e 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0009ea7
c000a967:	eb 0e                	jmp    c000a977 <sinc_set_converter+0xaf>
c000a969:	c7 43 24 23 9c 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0009c23
c000a970:	c7 43 20 23 9c 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0009c23
c000a977:	c7 43 28 d3 95 00 c0 	mov    DWORD PTR [ebx+0x28],0xc00095d3
c000a97e:	b8 0a 00 00 00       	mov    eax,0xa
c000a983:	81 c4 58 08 00 00    	add    esp,0x858
c000a989:	5b                   	pop    ebx
c000a98a:	c3                   	ret    

c000a98b <is_bad_src_ratio>:
c000a98b:	83 ec 0c             	sub    esp,0xc
c000a98e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a992:	89 04 24             	mov    DWORD PTR [esp],eax
c000a995:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a999:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a99d:	dd 04 24             	fld    QWORD PTR [esp]
c000a9a0:	dd 05 20 fd 01 c0    	fld    QWORD PTR ds:0xc001fd20
c000a9a6:	de d9                	fcompp 
c000a9a8:	df e0                	fnstsw ax
c000a9aa:	f6 c4 45             	test   ah,0x45
c000a9ad:	74 10                	je     c000a9bf <is_bad_src_ratio+0x34>
c000a9af:	dd 04 24             	fld    QWORD PTR [esp]
c000a9b2:	dc 1d 28 fd 01 c0    	fcomp  QWORD PTR ds:0xc001fd28
c000a9b8:	df e0                	fnstsw ax
c000a9ba:	f6 c4 45             	test   ah,0x45
c000a9bd:	75 07                	jne    c000a9c6 <is_bad_src_ratio+0x3b>
c000a9bf:	b8 01 00 00 00       	mov    eax,0x1
c000a9c4:	eb 05                	jmp    c000a9cb <is_bad_src_ratio+0x40>
c000a9c6:	b8 00 00 00 00       	mov    eax,0x0
c000a9cb:	83 c4 0c             	add    esp,0xc
c000a9ce:	c3                   	ret    

c000a9cf <fmod_one>:
c000a9cf:	83 ec 2c             	sub    esp,0x2c
c000a9d2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a9d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a9da:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a9de:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a9e2:	83 ec 08             	sub    esp,0x8
c000a9e5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9ed:	e8 0e 3c 01 00       	call   c001e600 <lrint>
c000a9f2:	83 c4 10             	add    esp,0x10
c000a9f5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a9f9:	db 44 24 04          	fild   DWORD PTR [esp+0x4]
c000a9fd:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000aa01:	de e1                	fsubrp st(1),st
c000aa03:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000aa07:	d9 ee                	fldz   
c000aa09:	dc 5c 24 18          	fcomp  QWORD PTR [esp+0x18]
c000aa0d:	df e0                	fnstsw ax
c000aa0f:	f6 c4 45             	test   ah,0x45
c000aa12:	75 0a                	jne    c000aa1e <fmod_one+0x4f>
c000aa14:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000aa18:	d9 e8                	fld1   
c000aa1a:	de c1                	faddp  st(1),st
c000aa1c:	eb 04                	jmp    c000aa22 <fmod_one+0x53>
c000aa1e:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000aa22:	83 c4 2c             	add    esp,0x2c
c000aa25:	c3                   	ret    

c000aa26 <zoh_vari_process>:
c000aa26:	55                   	push   ebp
c000aa27:	57                   	push   edi
c000aa28:	56                   	push   esi
c000aa29:	53                   	push   ebx
c000aa2a:	83 ec 2c             	sub    esp,0x2c
c000aa2d:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c000aa31:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000aa35:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000aa3d:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000aa41:	0f 8e 34 02 00 00    	jle    c000ac7b <zoh_vari_process+0x255>
c000aa47:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000aa4a:	c7 44 24 0c 05 00 00 00 	mov    DWORD PTR [esp+0xc],0x5
c000aa52:	85 db                	test   ebx,ebx
c000aa54:	0f 84 21 02 00 00    	je     c000ac7b <zoh_vari_process+0x255>
c000aa5a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000aa5d:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000aa61:	74 19                	je     c000aa7c <zoh_vari_process+0x56>
c000aa63:	31 d2                	xor    edx,edx
c000aa65:	39 c2                	cmp    edx,eax
c000aa67:	7d 0c                	jge    c000aa75 <zoh_vari_process+0x4f>
c000aa69:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000aa6b:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c000aa6e:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c000aa72:	42                   	inc    edx
c000aa73:	eb f0                	jmp    c000aa65 <zoh_vari_process+0x3f>
c000aa75:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000aa7c:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000aa7f:	0f af d0             	imul   edx,eax
c000aa82:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000aa85:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000aa89:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000aa90:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000aa93:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000aa9a:	dd 07                	fld    QWORD PTR [edi]
c000aa9c:	dd 14 24             	fst    QWORD PTR [esp]
c000aa9f:	50                   	push   eax
c000aaa0:	50                   	push   eax
c000aaa1:	dd 1c 24             	fstp   QWORD PTR [esp]
c000aaa4:	e8 e2 fe ff ff       	call   c000a98b <is_bad_src_ratio>
c000aaa9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000aaad:	5a                   	pop    edx
c000aaae:	59                   	pop    ecx
c000aaaf:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000aab4:	0f 85 b9 01 00 00    	jne    c000ac73 <zoh_vari_process+0x24d>
c000aaba:	dd 47 08             	fld    QWORD PTR [edi+0x8]
c000aabd:	d9 e8                	fld1   
c000aabf:	d8 d1                	fcom   st(1)
c000aac1:	df e0                	fnstsw ax
c000aac3:	9e                   	sahf   
c000aac4:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000aac8:	0f 86 85 00 00 00    	jbe    c000ab53 <zoh_vari_process+0x12d>
c000aace:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000aad1:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000aad4:	7d 7d                	jge    c000ab53 <zoh_vari_process+0x12d>
c000aad6:	d9 c0                	fld    st(0)
c000aad8:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c000aadb:	da 43 10             	fiadd  DWORD PTR [ebx+0x10]
c000aade:	da 5b 0c             	ficomp DWORD PTR [ebx+0xc]
c000aae1:	df e0                	fnstsw ax
c000aae3:	9e                   	sahf   
c000aae4:	73 6d                	jae    c000ab53 <zoh_vari_process+0x12d>
c000aae6:	85 d2                	test   edx,edx
c000aae8:	7e 38                	jle    c000ab22 <zoh_vari_process+0xfc>
c000aaea:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000aaee:	83 ec 10             	sub    esp,0x10
c000aaf1:	dd 07                	fld    QWORD PTR [edi]
c000aaf3:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c000aaf6:	dd 1c 24             	fstp   QWORD PTR [esp]
c000aaf9:	e8 e2 3a 01 00       	call   c001e5e0 <fabs>
c000aafe:	83 c4 10             	add    esp,0x10
c000ab01:	dc 1d 98 fd 01 c0    	fcomp  QWORD PTR ds:0xc001fd98
c000ab07:	df e0                	fnstsw ax
c000ab09:	9e                   	sahf   
c000ab0a:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000ab0e:	76 12                	jbe    c000ab22 <zoh_vari_process+0xfc>
c000ab10:	dd 07                	fld    QWORD PTR [edi]
c000ab12:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c000ab15:	d8 e1                	fsub   st,st(1)
c000ab17:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c000ab1a:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c000ab1d:	de c1                	faddp  st(1),st
c000ab1f:	dd 1c 24             	fstp   QWORD PTR [esp]
c000ab22:	31 c0                	xor    eax,eax
c000ab24:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000ab27:	7e 13                	jle    c000ab3c <zoh_vari_process+0x116>
c000ab29:	d9 44 83 1c          	fld    DWORD PTR [ebx+eax*4+0x1c]
c000ab2d:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000ab30:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000ab33:	40                   	inc    eax
c000ab34:	d9 1c 8a             	fstp   DWORD PTR [edx+ecx*4]
c000ab37:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000ab3a:	eb e8                	jmp    c000ab24 <zoh_vari_process+0xfe>
c000ab3c:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000ab40:	dc 34 24             	fdiv   QWORD PTR [esp]
c000ab43:	de c1                	faddp  st(1),st
c000ab45:	e9 73 ff ff ff       	jmp    c000aabd <zoh_vari_process+0x97>
c000ab4a:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000ab4e:	dc 34 24             	fdiv   QWORD PTR [esp]
c000ab51:	de c1                	faddp  st(1),st
c000ab53:	83 ec 10             	sub    esp,0x10
c000ab56:	dd 14 24             	fst    QWORD PTR [esp]
c000ab59:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000ab5d:	e8 6d fe ff ff       	call   c000a9cf <fmod_one>
c000ab62:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ab65:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c000ab69:	d8 e1                	fsub   st,st(1)
c000ab6b:	d9 c9                	fxch   st(1)
c000ab6d:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000ab71:	dd 1c 24             	fstp   QWORD PTR [esp]
c000ab74:	e8 87 3a 01 00       	call   c001e600 <lrint>
c000ab79:	83 c4 10             	add    esp,0x10
c000ab7c:	0f af e8             	imul   ebp,eax
c000ab7f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000ab82:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000ab85:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000ab89:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000ab8c:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000ab8f:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000ab92:	0f 8d 82 00 00 00    	jge    c000ac1a <zoh_vari_process+0x1f4>
c000ab98:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c000ab9c:	d9 c0                	fld    st(0)
c000ab9e:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c000aba1:	da 44 24 18          	fiadd  DWORD PTR [esp+0x18]
c000aba5:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000aba9:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000abad:	de d9                	fcompp 
c000abaf:	df e0                	fnstsw ax
c000abb1:	9e                   	sahf   
c000abb2:	72 66                	jb     c000ac1a <zoh_vari_process+0x1f4>
c000abb4:	85 d2                	test   edx,edx
c000abb6:	7e 38                	jle    c000abf0 <zoh_vari_process+0x1ca>
c000abb8:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000abbc:	83 ec 10             	sub    esp,0x10
c000abbf:	dd 07                	fld    QWORD PTR [edi]
c000abc1:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c000abc4:	dd 1c 24             	fstp   QWORD PTR [esp]
c000abc7:	e8 14 3a 01 00       	call   c001e5e0 <fabs>
c000abcc:	83 c4 10             	add    esp,0x10
c000abcf:	dc 1d 98 fd 01 c0    	fcomp  QWORD PTR ds:0xc001fd98
c000abd5:	df e0                	fnstsw ax
c000abd7:	9e                   	sahf   
c000abd8:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000abdc:	76 12                	jbe    c000abf0 <zoh_vari_process+0x1ca>
c000abde:	dd 07                	fld    QWORD PTR [edi]
c000abe0:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c000abe3:	d8 e1                	fsub   st,st(1)
c000abe5:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c000abe8:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c000abeb:	de c1                	faddp  st(1),st
c000abed:	dd 1c 24             	fstp   QWORD PTR [esp]
c000abf0:	31 d2                	xor    edx,edx
c000abf2:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000abf5:	39 d0                	cmp    eax,edx
c000abf7:	0f 8e 4d ff ff ff    	jle    c000ab4a <zoh_vari_process+0x124>
c000abfd:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000ac00:	29 c1                	sub    ecx,eax
c000ac02:	89 c8                	mov    eax,ecx
c000ac04:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000ac06:	01 d0                	add    eax,edx
c000ac08:	42                   	inc    edx
c000ac09:	d9 04 81             	fld    DWORD PTR [ecx+eax*4]
c000ac0c:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000ac0f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000ac12:	d9 1c 88             	fstp   DWORD PTR [eax+ecx*4]
c000ac15:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000ac18:	eb d8                	jmp    c000abf2 <zoh_vari_process+0x1cc>
c000ac1a:	39 e9                	cmp    ecx,ebp
c000ac1c:	7d 13                	jge    c000ac31 <zoh_vari_process+0x20b>
c000ac1e:	89 e8                	mov    eax,ebp
c000ac20:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000ac23:	29 c8                	sub    eax,ecx
c000ac25:	99                   	cdq    
c000ac26:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000ac29:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ac2d:	da 44 24 10          	fiadd  DWORD PTR [esp+0x10]
c000ac31:	dd 5f 08             	fstp   QWORD PTR [edi+0x8]
c000ac34:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000ac37:	85 c0                	test   eax,eax
c000ac39:	7f 1b                	jg     c000ac56 <zoh_vari_process+0x230>
c000ac3b:	dd 04 24             	fld    QWORD PTR [esp]
c000ac3e:	dd 1f                	fstp   QWORD PTR [edi]
c000ac40:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000ac43:	99                   	cdq    
c000ac44:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000ac47:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000ac4a:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000ac4d:	99                   	cdq    
c000ac4e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000ac51:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000ac54:	eb 25                	jmp    c000ac7b <zoh_vari_process+0x255>
c000ac56:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ac59:	31 d2                	xor    edx,edx
c000ac5b:	29 e8                	sub    eax,ebp
c000ac5d:	c1 e0 02             	shl    eax,0x2
c000ac60:	39 d5                	cmp    ebp,edx
c000ac62:	7e d7                	jle    c000ac3b <zoh_vari_process+0x215>
c000ac64:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000ac66:	d9 04 01             	fld    DWORD PTR [ecx+eax*1]
c000ac69:	83 c0 04             	add    eax,0x4
c000ac6c:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c000ac70:	42                   	inc    edx
c000ac71:	eb ed                	jmp    c000ac60 <zoh_vari_process+0x23a>
c000ac73:	c7 44 24 0c 16 00 00 00 	mov    DWORD PTR [esp+0xc],0x16
c000ac7b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ac7f:	83 c4 2c             	add    esp,0x2c
c000ac82:	5b                   	pop    ebx
c000ac83:	5e                   	pop    esi
c000ac84:	5f                   	pop    edi
c000ac85:	5d                   	pop    ebp
c000ac86:	c3                   	ret    

c000ac87 <zoh_reset>:
c000ac87:	83 ec 0c             	sub    esp,0xc
c000ac8a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ac8e:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000ac91:	85 c0                	test   eax,eax
c000ac93:	74 20                	je     c000acb5 <zoh_reset+0x2e>
c000ac95:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000ac98:	83 c0 1c             	add    eax,0x1c
c000ac9b:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000ac9e:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000aca5:	c1 e2 02             	shl    edx,0x2
c000aca8:	51                   	push   ecx
c000aca9:	52                   	push   edx
c000acaa:	6a 00                	push   0x0
c000acac:	50                   	push   eax
c000acad:	e8 56 59 ff ff       	call   c0000608 <memset>
c000acb2:	83 c4 10             	add    esp,0x10
c000acb5:	83 c4 0c             	add    esp,0xc
c000acb8:	c3                   	ret    

c000acb9 <zoh_get_name>:
c000acb9:	31 c0                	xor    eax,eax
c000acbb:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000acc0:	75 05                	jne    c000acc7 <zoh_get_name+0xe>
c000acc2:	b8 34 ff 01 c0       	mov    eax,0xc001ff34
c000acc7:	c3                   	ret    

c000acc8 <zoh_get_description>:
c000acc8:	31 c0                	xor    eax,eax
c000acca:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000accf:	75 05                	jne    c000acd6 <zoh_get_description+0xe>
c000acd1:	b8 45 ff 01 c0       	mov    eax,0xc001ff45
c000acd6:	c3                   	ret    

c000acd7 <zoh_set_converter>:
c000acd7:	53                   	push   ebx
c000acd8:	b8 0a 00 00 00       	mov    eax,0xa
c000acdd:	83 ec 08             	sub    esp,0x8
c000ace0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ace4:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000ace9:	75 6e                	jne    c000ad59 <zoh_set_converter+0x82>
c000aceb:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000acee:	85 c0                	test   eax,eax
c000acf0:	74 13                	je     c000ad05 <zoh_set_converter+0x2e>
c000acf2:	83 ec 0c             	sub    esp,0xc
c000acf5:	50                   	push   eax
c000acf6:	e8 33 0f 00 00       	call   c000bc2e <free>
c000acfb:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000ad02:	83 c4 10             	add    esp,0x10
c000ad05:	50                   	push   eax
c000ad06:	50                   	push   eax
c000ad07:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000ad0a:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000ad11:	50                   	push   eax
c000ad12:	6a 01                	push   0x1
c000ad14:	e8 35 0f 00 00       	call   c000bc4e <calloc>
c000ad19:	83 c4 10             	add    esp,0x10
c000ad1c:	89 c2                	mov    edx,eax
c000ad1e:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000ad21:	85 d2                	test   edx,edx
c000ad23:	b8 01 00 00 00       	mov    eax,0x1
c000ad28:	74 2f                	je     c000ad59 <zoh_set_converter+0x82>
c000ad2a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000ad2d:	83 ec 0c             	sub    esp,0xc
c000ad30:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000ad33:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000ad39:	c7 43 24 26 aa 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000aa26
c000ad40:	c7 43 20 26 aa 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000aa26
c000ad47:	c7 43 28 87 ac 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ac87
c000ad4e:	53                   	push   ebx
c000ad4f:	e8 33 ff ff ff       	call   c000ac87 <zoh_reset>
c000ad54:	83 c4 10             	add    esp,0x10
c000ad57:	31 c0                	xor    eax,eax
c000ad59:	83 c4 08             	add    esp,0x8
c000ad5c:	5b                   	pop    ebx
c000ad5d:	c3                   	ret    

c000ad5e <Computer::close(int, int, void*)>:
c000ad5e:	57                   	push   edi
c000ad5f:	56                   	push   esi
c000ad60:	53                   	push   ebx
c000ad61:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ad65:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ad69:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ad6d:	83 ec 0c             	sub    esp,0xc
c000ad70:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000ad76:	e8 61 55 00 00       	call   c00102dc <Device::closeAll()>
c000ad7b:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000ad81:	83 c4 10             	add    esp,0x10
c000ad84:	8b 10                	mov    edx,DWORD PTR [eax]
c000ad86:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000ad8a:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000ad92:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000ad96:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ad9a:	5b                   	pop    ebx
c000ad9b:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000ad9e:	5e                   	pop    esi
c000ad9f:	5f                   	pop    edi
c000ada0:	ff e0                	jmp    eax

c000ada2 <Computer::Computer()>:
c000ada2:	83 ec 0c             	sub    esp,0xc
c000ada5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ada9:	83 ec 08             	sub    esp,0x8
c000adac:	68 7c ff 01 c0       	push   0xc001ff7c
c000adb1:	50                   	push   eax
c000adb2:	e8 9f 55 00 00       	call   c0010356 <Device::Device(char const*)>
c000adb7:	83 c4 10             	add    esp,0x10
c000adba:	ba f8 ff 01 c0       	mov    edx,0xc001fff8
c000adbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000adc3:	89 10                	mov    DWORD PTR [eax],edx
c000adc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000adc9:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000add3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000add7:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000ade1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ade5:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000adeb:	83 ca 04             	or     edx,0x4
c000adee:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000adf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000adf8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000adfe:	0f b6 d0             	movzx  edx,al
c000ae01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae05:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000ae0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae10:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ae16:	0f b6 d0             	movzx  edx,al
c000ae19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae1d:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000ae22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae26:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ae2c:	8d 50 01             	lea    edx,[eax+0x1]
c000ae2f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ae33:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000ae39:	0f b6 d0             	movzx  edx,al
c000ae3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae40:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000ae44:	83 e1 3f             	and    ecx,0x3f
c000ae47:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000ae4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae4f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ae55:	0f b6 d0             	movzx  edx,al
c000ae58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae5c:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000ae63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae67:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ae6d:	0f b6 d0             	movzx  edx,al
c000ae70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae74:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000ae79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae7d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ae83:	8d 50 01             	lea    edx,[eax+0x1]
c000ae86:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ae8a:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000ae90:	0f b6 d0             	movzx  edx,al
c000ae93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae97:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000ae9b:	83 e1 3f             	and    ecx,0x3f
c000ae9e:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000aea2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aea6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000aeac:	0f b6 d0             	movzx  edx,al
c000aeaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aeb3:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000aeba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aebe:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000aec4:	0f b6 d0             	movzx  edx,al
c000aec7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aecb:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000aed0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aed4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000aeda:	8d 50 01             	lea    edx,[eax+0x1]
c000aedd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000aee1:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000aee7:	0f b6 d0             	movzx  edx,al
c000aeea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aeee:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000aef2:	83 e1 3f             	and    ecx,0x3f
c000aef5:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000aef9:	90                   	nop
c000aefa:	83 c4 0c             	add    esp,0xc
c000aefd:	c3                   	ret    

c000aefe <Computer::setBootMessage(char const*)>:
c000aefe:	c3                   	ret    
c000aeff:	90                   	nop

c000af00 <Computer::start()>:
c000af00:	56                   	push   esi
c000af01:	53                   	push   ebx
c000af02:	50                   	push   eax
c000af03:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000af07:	e8 0c cb 00 00       	call   c0017a18 <lockScheduler()>
c000af0c:	e8 3b ce 00 00       	call   c0017d4c <schedule()>
c000af11:	e8 04 cb 00 00       	call   c0017a1a <unlockScheduler()>
c000af16:	fb                   	sti    
c000af17:	83 ec 0c             	sub    esp,0xc
c000af1a:	68 3b 07 00 00       	push   0x73b
c000af1f:	e8 48 3d 00 00       	call   c000ec6c <operator new(unsigned long)>
c000af24:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000af2b:	89 c6                	mov    esi,eax
c000af2d:	ff 35 54 48 02 c0    	push   DWORD PTR ds:0xc0024854
c000af33:	68 85 ff 01 c0       	push   0xc001ff85
c000af38:	6a 01                	push   0x1
c000af3a:	50                   	push   eax
c000af3b:	e8 38 c9 00 00       	call   c0017878 <Process::Process(bool, char const*, Process*, char**)>
c000af40:	83 c4 20             	add    esp,0x20
c000af43:	68 ff 00 00 00       	push   0xff
c000af48:	6a 00                	push   0x0
c000af4a:	68 ab b5 00 c0       	push   0xc000b5ab
c000af4f:	56                   	push   esi
c000af50:	e8 ed cb 00 00       	call   c0017b42 <Process::createThread(void (*)(void*), void*, int)>
c000af55:	6a 7a                	push   0x7a
c000af57:	6a 00                	push   0x0
c000af59:	68 7b 83 01 c0       	push   0xc001837b
c000af5e:	ff 35 54 48 02 c0    	push   DWORD PTR ds:0xc0024854
c000af64:	e8 d9 cb 00 00       	call   c0017b42 <Process::createThread(void (*)(void*), void*, int)>
c000af69:	83 c4 20             	add    esp,0x20
c000af6c:	a3 08 48 02 c0       	mov    ds:0xc0024808,eax
c000af71:	c6 05 0d 34 02 c0 01 	mov    BYTE PTR ds:0xc002340d,0x1
c000af78:	e8 39 41 00 00       	call   c000f0b6 <initVFS()>
c000af7d:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000af83:	8b 10                	mov    edx,DWORD PTR [eax]
c000af85:	6a 00                	push   0x0
c000af87:	6a 00                	push   0x0
c000af89:	6a 00                	push   0x0
c000af8b:	50                   	push   eax
c000af8c:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000af8f:	e8 8a b2 00 00       	call   c001621e <setupSystemCalls()>
c000af94:	e8 1b 4c 00 00       	call   c000fbb4 <loadClockSettings()>
c000af99:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000af9c:	e8 0f 53 00 00       	call   c00102b0 <Device::loadDriversForAll()>
c000afa1:	5a                   	pop    edx
c000afa2:	8b 1d 08 34 02 c0    	mov    ebx,DWORD PTR ds:0xc0023408
c000afa8:	59                   	pop    ecx
c000afa9:	6a 01                	push   0x1
c000afab:	68 92 ff 01 c0       	push   0xc001ff92
c000afb0:	e8 55 c4 00 00       	call   c001740a <Thr::loadDLL(char const*, bool)>
c000afb5:	5e                   	pop    esi
c000afb6:	5a                   	pop    edx
c000afb7:	53                   	push   ebx
c000afb8:	50                   	push   eax
c000afb9:	e8 50 c6 00 00       	call   c001760e <Thr::executeDLL(unsigned long, void*)>
c000afbe:	c7 04 24 1c 10 02 c0 	mov    DWORD PTR [esp],0xc002101c
c000afc5:	e8 91 3d 00 00       	call   c000ed5b <Dbg::kprintf(char const*, ...)>
c000afca:	83 c4 10             	add    esp,0x10
c000afcd:	83 ec 0c             	sub    esp,0xc
c000afd0:	6a 02                	push   0x2
c000afd2:	e8 cf ce 00 00       	call   c0017ea6 <blockTask(TaskState)>
c000afd7:	83 c4 10             	add    esp,0x10
c000afda:	eb f1                	jmp    c000afcd <Computer::start()+0xcd>

c000afdc <firstTask()>:
c000afdc:	83 ec 18             	sub    esp,0x18
c000afdf:	ff 35 08 34 02 c0    	push   DWORD PTR ds:0xc0023408
c000afe5:	e8 16 ff ff ff       	call   c000af00 <Computer::start()>

c000afea <Computer::detectFeatures()>:
c000afea:	55                   	push   ebp
c000afeb:	57                   	push   edi
c000afec:	56                   	push   esi
c000afed:	53                   	push   ebx
c000afee:	83 ec 1c             	sub    esp,0x1c
c000aff1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000aff5:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000afff:	e8 bb 52 ff ff       	call   c00002bf <detectCPUID>
c000b004:	85 c0                	test   eax,eax
c000b006:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b00c:	0f 95 c2             	setne  dl
c000b00f:	83 e0 fd             	and    eax,0xfffffffd
c000b012:	d1 e2                	shl    edx,1
c000b014:	09 d0                	or     eax,edx
c000b016:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b01c:	a8 02                	test   al,0x2
c000b01e:	75 46                	jne    c000b066 <Computer::detectFeatures()+0x7c>
c000b020:	f6 05 21 34 02 c0 04 	test   BYTE PTR ds:0xc0023421,0x4
c000b027:	74 07                	je     c000b030 <Computer::detectFeatures()+0x46>
c000b029:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000b030:	e8 51 30 01 00       	call   c001e086 <x87Detect>
c000b035:	83 e0 01             	and    eax,0x1
c000b038:	c1 e0 04             	shl    eax,0x4
c000b03b:	88 c2                	mov    dl,al
c000b03d:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b043:	83 e0 ef             	and    eax,0xffffffef
c000b046:	09 d0                	or     eax,edx
c000b048:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b04e:	a8 10                	test   al,0x10
c000b050:	0f 85 10 01 00 00    	jne    c000b166 <Computer::detectFeatures()+0x17c>
c000b056:	84 c0                	test   al,al
c000b058:	0f 88 2b 01 00 00    	js     c000b189 <Computer::detectFeatures()+0x19f>
c000b05e:	83 c4 1c             	add    esp,0x1c
c000b061:	5b                   	pop    ebx
c000b062:	5e                   	pop    esi
c000b063:	5f                   	pop    edi
c000b064:	5d                   	pop    ebp
c000b065:	c3                   	ret    
c000b066:	83 ec 0c             	sub    esp,0xc
c000b069:	6a 20                	push   0x20
c000b06b:	e8 c3 8b 00 00       	call   c0013c33 <cpuidCheckEDX(unsigned int)>
c000b070:	83 e0 01             	and    eax,0x1
c000b073:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000b07a:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b080:	83 e0 f7             	and    eax,0xfffffff7
c000b083:	09 d0                	or     eax,edx
c000b085:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b08b:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000b092:	e8 9c 8b 00 00       	call   c0013c33 <cpuidCheckEDX(unsigned int)>
c000b097:	83 e0 01             	and    eax,0x1
c000b09a:	88 c2                	mov    dl,al
c000b09c:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000b0a2:	83 e0 fe             	and    eax,0xfffffffe
c000b0a5:	09 d0                	or     eax,edx
c000b0a7:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000b0ad:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000b0b4:	e8 7a 8b 00 00       	call   c0013c33 <cpuidCheckEDX(unsigned int)>
c000b0b9:	c1 e0 07             	shl    eax,0x7
c000b0bc:	88 c2                	mov    dl,al
c000b0be:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000b0c4:	83 e0 7f             	and    eax,0x7f
c000b0c7:	09 d0                	or     eax,edx
c000b0c9:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000b0cf:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000b0d6:	e8 58 8b 00 00       	call   c0013c33 <cpuidCheckEDX(unsigned int)>
c000b0db:	83 c4 10             	add    esp,0x10
c000b0de:	83 e0 01             	and    eax,0x1
c000b0e1:	c1 e0 05             	shl    eax,0x5
c000b0e4:	88 c2                	mov    dl,al
c000b0e6:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b0ec:	83 e0 df             	and    eax,0xffffffdf
c000b0ef:	09 d0                	or     eax,edx
c000b0f1:	f7 05 20 34 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0023420,0x401
c000b0fb:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b101:	0f 84 a8 00 00 00    	je     c000b1af <Computer::detectFeatures()+0x1c5>
c000b107:	83 ec 0c             	sub    esp,0xc
c000b10a:	80 a3 e8 01 00 00 fe 	and    BYTE PTR [ebx+0x1e8],0xfe
c000b111:	8d 44 24 18          	lea    eax,[esp+0x18]
c000b115:	50                   	push   eax
c000b116:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000b11a:	55                   	push   ebp
c000b11b:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000b11f:	57                   	push   edi
c000b120:	8d 74 24 18          	lea    esi,[esp+0x18]
c000b124:	56                   	push   esi
c000b125:	68 00 00 00 80       	push   0x80000000
c000b12a:	e8 81 8a 00 00       	call   c0013bb0 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000b12f:	83 c4 20             	add    esp,0x20
c000b132:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000b139:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000b13d:	0f 86 dd fe ff ff    	jbe    c000b020 <Computer::detectFeatures()+0x36>
c000b143:	83 ec 0c             	sub    esp,0xc
c000b146:	50                   	push   eax
c000b147:	55                   	push   ebp
c000b148:	57                   	push   edi
c000b149:	56                   	push   esi
c000b14a:	68 01 00 00 80       	push   0x80000001
c000b14f:	e8 5c 8a 00 00       	call   c0013bb0 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000b154:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000b15e:	83 c4 20             	add    esp,0x20
c000b161:	e9 ba fe ff ff       	jmp    c000b020 <Computer::detectFeatures()+0x36>
c000b166:	e8 d5 2e 01 00       	call   c001e040 <sseDetect>
c000b16b:	88 c2                	mov    dl,al
c000b16d:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b173:	c1 e2 07             	shl    edx,0x7
c000b176:	83 e0 7f             	and    eax,0x7f
c000b179:	09 d0                	or     eax,edx
c000b17b:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b181:	84 c0                	test   al,al
c000b183:	0f 89 d5 fe ff ff    	jns    c000b05e <Computer::detectFeatures()+0x74>
c000b189:	e8 a2 2e 01 00       	call   c001e030 <avxDetect>
c000b18e:	83 e0 01             	and    eax,0x1
c000b191:	c1 e0 05             	shl    eax,0x5
c000b194:	88 c2                	mov    dl,al
c000b196:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000b19c:	83 e0 df             	and    eax,0xffffffdf
c000b19f:	09 d0                	or     eax,edx
c000b1a1:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000b1a7:	83 c4 1c             	add    esp,0x1c
c000b1aa:	5b                   	pop    ebx
c000b1ab:	5e                   	pop    esi
c000b1ac:	5f                   	pop    edi
c000b1ad:	5d                   	pop    ebp
c000b1ae:	c3                   	ret    
c000b1af:	83 ec 0c             	sub    esp,0xc
c000b1b2:	68 00 02 00 00       	push   0x200
c000b1b7:	e8 77 8a 00 00       	call   c0013c33 <cpuidCheckEDX(unsigned int)>
c000b1bc:	83 c4 10             	add    esp,0x10
c000b1bf:	e9 43 ff ff ff       	jmp    c000b107 <Computer::detectFeatures()+0x11d>

c000b1c4 <Computer::displayFeatures()>:
c000b1c4:	c3                   	ret    
c000b1c5:	90                   	nop

c000b1c6 <Computer::rdmsr(unsigned int)>:
c000b1c6:	83 ec 0c             	sub    esp,0xc
c000b1c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1cd:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000b1d4:	74 0a                	je     c000b1e0 <Computer::rdmsr(unsigned int)+0x1a>
c000b1d6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b1da:	0f 32                	rdmsr  
c000b1dc:	83 c4 0c             	add    esp,0xc
c000b1df:	c3                   	ret    
c000b1e0:	83 ec 0c             	sub    esp,0xc
c000b1e3:	68 ae ff 01 c0       	push   0xc001ffae
c000b1e8:	e8 03 98 00 00       	call   c00149f0 <Krnl::panic(char const*)>
c000b1ed:	83 c4 10             	add    esp,0x10
c000b1f0:	eb e4                	jmp    c000b1d6 <Computer::rdmsr(unsigned int)+0x10>

c000b1f2 <Computer::wrmsr(unsigned int, unsigned long long)>:
c000b1f2:	57                   	push   edi
c000b1f3:	56                   	push   esi
c000b1f4:	52                   	push   edx
c000b1f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1f9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000b1fd:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000b201:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000b208:	74 0e                	je     c000b218 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000b20a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b20e:	89 f0                	mov    eax,esi
c000b210:	89 fa                	mov    edx,edi
c000b212:	0f 30                	wrmsr  
c000b214:	58                   	pop    eax
c000b215:	5e                   	pop    esi
c000b216:	5f                   	pop    edi
c000b217:	c3                   	ret    
c000b218:	83 ec 0c             	sub    esp,0xc
c000b21b:	68 b4 ff 01 c0       	push   0xc001ffb4
c000b220:	e8 cb 97 00 00       	call   c00149f0 <Krnl::panic(char const*)>
c000b225:	83 c4 10             	add    esp,0x10
c000b228:	eb e0                	jmp    c000b20a <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000b22a <Computer::nmiEnabled()>:
c000b22a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b22e:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000b234:	c3                   	ret    
c000b235:	90                   	nop

c000b236 <Computer::readCMOS(unsigned char)>:
c000b236:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b23a:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000b241:	19 c0                	sbb    eax,eax
c000b243:	83 e0 80             	and    eax,0xffffff80
c000b246:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000b24a:	e6 70                	out    0x70,al
c000b24c:	e4 71                	in     al,0x71
c000b24e:	c3                   	ret    
c000b24f:	90                   	nop

c000b250 <Computer::enableNMI(bool)>:
c000b250:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b254:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b258:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000b25e:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000b266:	eb ce                	jmp    c000b236 <Computer::readCMOS(unsigned char)>

c000b268 <Computer::open(int, int, void*)>:
c000b268:	56                   	push   esi
c000b269:	53                   	push   ebx
c000b26a:	83 ec 10             	sub    esp,0x10
c000b26d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b271:	f6 05 20 34 02 c0 04 	test   BYTE PTR ds:0xc0023420,0x4
c000b278:	68 68 22 00 00       	push   0x2268
c000b27d:	0f 94 05 40 28 02 c0 	sete   BYTE PTR ds:0xc0022840
c000b284:	e8 e3 39 00 00       	call   c000ec6c <operator new(unsigned long)>
c000b289:	89 04 24             	mov    DWORD PTR [esp],eax
c000b28c:	89 c6                	mov    esi,eax
c000b28e:	e8 bd 7f 00 00       	call   c0013250 <ACPI::ACPI()>
c000b293:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000b299:	58                   	pop    eax
c000b29a:	5a                   	pop    edx
c000b29b:	56                   	push   esi
c000b29c:	53                   	push   ebx
c000b29d:	e8 c4 4e 00 00       	call   c0010166 <Device::addChild(Device*)>
c000b2a2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b2a5:	e8 40 fd ff ff       	call   c000afea <Computer::detectFeatures()>
c000b2aa:	59                   	pop    ecx
c000b2ab:	5e                   	pop    esi
c000b2ac:	6a 01                	push   0x1
c000b2ae:	53                   	push   ebx
c000b2af:	e8 9c ff ff ff       	call   c000b250 <Computer::enableNMI(bool)>
c000b2b4:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000b2bb:	e8 ac 39 00 00       	call   c000ec6c <operator new(unsigned long)>
c000b2c0:	89 04 24             	mov    DWORD PTR [esp],eax
c000b2c3:	89 c6                	mov    esi,eax
c000b2c5:	e8 34 8a 00 00       	call   c0013cfe <CPU::CPU()>
c000b2ca:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000b2d0:	58                   	pop    eax
c000b2d1:	5a                   	pop    edx
c000b2d2:	56                   	push   esi
c000b2d3:	53                   	push   ebx
c000b2d4:	e8 8d 4e 00 00       	call   c0010166 <Device::addChild(Device*)>
c000b2d9:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000b2df:	8b 10                	mov    edx,DWORD PTR [eax]
c000b2e1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000b2e5:	6a 00                	push   0x0
c000b2e7:	6a 00                	push   0x0
c000b2e9:	50                   	push   eax
c000b2ea:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000b2ed:	83 c4 20             	add    esp,0x20
c000b2f0:	e8 d9 53 00 00       	call   c00106ce <setupFPU()>
c000b2f5:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000b2fb:	85 c0                	test   eax,eax
c000b2fd:	74 1f                	je     c000b31e <Computer::open(int, int, void*)+0xb6>
c000b2ff:	83 ec 08             	sub    esp,0x8
c000b302:	50                   	push   eax
c000b303:	53                   	push   ebx
c000b304:	e8 5d 4e 00 00       	call   c0010166 <Device::addChild(Device*)>
c000b309:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000b30f:	8b 10                	mov    edx,DWORD PTR [eax]
c000b311:	6a 00                	push   0x0
c000b313:	6a 00                	push   0x0
c000b315:	6a 00                	push   0x0
c000b317:	50                   	push   eax
c000b318:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000b31b:	83 c4 20             	add    esp,0x20
c000b31e:	83 ec 0c             	sub    esp,0xc
c000b321:	68 dc af 00 c0       	push   0xc000afdc
c000b326:	e8 17 c9 00 00       	call   c0017c42 <setupMultitasking(void (*)())>
c000b32b:	83 c4 14             	add    esp,0x14
c000b32e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000b333:	5b                   	pop    ebx
c000b334:	5e                   	pop    esi
c000b335:	c3                   	ret    

c000b336 <Computer::disableNMI()>:
c000b336:	6a 00                	push   0x0
c000b338:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000b33c:	e8 0f ff ff ff       	call   c000b250 <Computer::enableNMI(bool)>
c000b341:	58                   	pop    eax
c000b342:	5a                   	pop    edx
c000b343:	c3                   	ret    

c000b344 <Computer::writeCMOS(unsigned char, unsigned char)>:
c000b344:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b348:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000b34f:	19 c0                	sbb    eax,eax
c000b351:	83 e0 80             	and    eax,0xffffff80
c000b354:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000b358:	e6 70                	out    0x70,al
c000b35a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b35e:	e6 71                	out    0x71,al
c000b360:	c3                   	ret    
c000b361:	90                   	nop

c000b362 <Computer::handleNMI()>:
c000b362:	56                   	push   esi
c000b363:	53                   	push   ebx
c000b364:	83 ec 10             	sub    esp,0x10
c000b367:	e4 92                	in     al,0x92
c000b369:	89 c6                	mov    esi,eax
c000b36b:	e4 61                	in     al,0x61
c000b36d:	68 ba ff 01 c0       	push   0xc001ffba
c000b372:	88 c3                	mov    bl,al
c000b374:	e8 e2 39 00 00       	call   c000ed5b <Dbg::kprintf(char const*, ...)>
c000b379:	83 c4 10             	add    esp,0x10
c000b37c:	83 e6 10             	and    esi,0x10
c000b37f:	75 0d                	jne    c000b38e <Computer::handleNMI()+0x2c>
c000b381:	f6 c3 40             	test   bl,0x40
c000b384:	75 1d                	jne    c000b3a3 <Computer::handleNMI()+0x41>
c000b386:	84 db                	test   bl,bl
c000b388:	78 2d                	js     c000b3b7 <Computer::handleNMI()+0x55>
c000b38a:	58                   	pop    eax
c000b38b:	5b                   	pop    ebx
c000b38c:	5e                   	pop    esi
c000b38d:	c3                   	ret    
c000b38e:	83 ec 0c             	sub    esp,0xc
c000b391:	68 cb ff 01 c0       	push   0xc001ffcb
c000b396:	e8 55 96 00 00       	call   c00149f0 <Krnl::panic(char const*)>
c000b39b:	83 c4 10             	add    esp,0x10
c000b39e:	f6 c3 40             	test   bl,0x40
c000b3a1:	74 e3                	je     c000b386 <Computer::handleNMI()+0x24>
c000b3a3:	83 ec 0c             	sub    esp,0xc
c000b3a6:	68 d8 ff 01 c0       	push   0xc001ffd8
c000b3ab:	e8 40 96 00 00       	call   c00149f0 <Krnl::panic(char const*)>
c000b3b0:	83 c4 10             	add    esp,0x10
c000b3b3:	84 db                	test   bl,bl
c000b3b5:	79 d3                	jns    c000b38a <Computer::handleNMI()+0x28>
c000b3b7:	c7 44 24 10 e2 ff 01 c0 	mov    DWORD PTR [esp+0x10],0xc001ffe2
c000b3bf:	5a                   	pop    edx
c000b3c0:	5b                   	pop    ebx
c000b3c1:	5e                   	pop    esi
c000b3c2:	e9 29 96 00 00       	jmp    c00149f0 <Krnl::panic(char const*)>
c000b3c7:	90                   	nop

c000b3c8 <Computer::setDiskActivityLight(int, bool)>:
c000b3c8:	56                   	push   esi
c000b3c9:	53                   	push   ebx
c000b3ca:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b3ce:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000b3d3:	77 1b                	ja     c000b3f0 <Computer::setDiskActivityLight(int, bool)+0x28>
c000b3d5:	e4 92                	in     al,0x92
c000b3d7:	bb 40 00 00 00       	mov    ebx,0x40
c000b3dc:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000b3e0:	89 da                	mov    edx,ebx
c000b3e2:	d3 e2                	shl    edx,cl
c000b3e4:	89 f1                	mov    ecx,esi
c000b3e6:	f7 d2                	not    edx
c000b3e8:	d3 e3                	shl    ebx,cl
c000b3ea:	21 d0                	and    eax,edx
c000b3ec:	09 d8                	or     eax,ebx
c000b3ee:	e6 92                	out    0x92,al
c000b3f0:	5b                   	pop    ebx
c000b3f1:	5e                   	pop    esi
c000b3f2:	c3                   	ret    
c000b3f3:	90                   	nop

c000b3f4 <GDTEntry::setBase(unsigned int)>:
c000b3f4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b3f8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000b3fc:	89 c1                	mov    ecx,eax
c000b3fe:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000b402:	c1 e9 10             	shr    ecx,0x10
c000b405:	c1 e8 18             	shr    eax,0x18
c000b408:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000b40b:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000b40e:	c3                   	ret    
c000b40f:	90                   	nop

c000b410 <GDTEntry::setLimit(unsigned int)>:
c000b410:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000b414:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b418:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000b41b:	66 89 01             	mov    WORD PTR [ecx],ax
c000b41e:	83 e2 f0             	and    edx,0xfffffff0
c000b421:	c1 e8 10             	shr    eax,0x10
c000b424:	83 e0 0f             	and    eax,0xf
c000b427:	09 d0                	or     eax,edx
c000b429:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000b42c:	c3                   	ret    
c000b42d:	90                   	nop

c000b42e <GDT::GDT()>:
c000b42e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b432:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000b438:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b43c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000b442:	90                   	nop
c000b443:	c3                   	ret    

c000b444 <GDT::addEntry(GDTEntry)>:
c000b444:	53                   	push   ebx
c000b445:	83 ec 0c             	sub    esp,0xc
c000b448:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000b44c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b44e:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000b455:	52                   	push   edx
c000b456:	50                   	push   eax
c000b457:	68 1c 00 02 c0       	push   0xc002001c
c000b45c:	e8 fa 38 00 00       	call   c000ed5b <Dbg::kprintf(char const*, ...)>
c000b461:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b463:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000b467:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000b46b:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000b46f:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000b473:	8d 50 01             	lea    edx,[eax+0x1]
c000b476:	c1 e0 03             	shl    eax,0x3
c000b479:	89 13                	mov    DWORD PTR [ebx],edx
c000b47b:	83 c4 18             	add    esp,0x18
c000b47e:	5b                   	pop    ebx
c000b47f:	c3                   	ret    

c000b480 <GDT::getNumberOfEntries()>:
c000b480:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b484:	8b 00                	mov    eax,DWORD PTR [eax]
c000b486:	c3                   	ret    
c000b487:	90                   	nop

c000b488 <GDT::flush()>:
c000b488:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b48c:	8b 10                	mov    edx,DWORD PTR [eax]
c000b48e:	83 c0 04             	add    eax,0x4
c000b491:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000b498:	a3 12 34 02 c0       	mov    ds:0xc0023412,eax
c000b49d:	66 89 15 10 34 02 c0 	mov    WORD PTR ds:0xc0023410,dx
c000b4a4:	e9 8a 4e ff ff       	jmp    c0000333 <loadGDT>
c000b4a9:	90                   	nop

c000b4aa <GDT::setup()>:
c000b4aa:	55                   	push   ebp
c000b4ab:	57                   	push   edi
c000b4ac:	56                   	push   esi
c000b4ad:	53                   	push   ebx
c000b4ae:	83 ec 3c             	sub    esp,0x3c
c000b4b1:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000b4b5:	6a 00                	push   0x0
c000b4b7:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000b4bb:	53                   	push   ebx
c000b4bc:	e8 33 ff ff ff       	call   c000b3f4 <GDTEntry::setBase(unsigned int)>
c000b4c1:	6a 00                	push   0x0
c000b4c3:	53                   	push   ebx
c000b4c4:	e8 47 ff ff ff       	call   c000b410 <GDTEntry::setLimit(unsigned int)>
c000b4c9:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000b4d1:	6a 00                	push   0x0
c000b4d3:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000b4d7:	53                   	push   ebx
c000b4d8:	e8 17 ff ff ff       	call   c000b3f4 <GDTEntry::setBase(unsigned int)>
c000b4dd:	68 ff ff ff 00       	push   0xffffff
c000b4e2:	53                   	push   ebx
c000b4e3:	e8 28 ff ff ff       	call   c000b410 <GDTEntry::setLimit(unsigned int)>
c000b4e8:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000b4ec:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000b4f1:	0d 00 9a c0 00       	or     eax,0xc09a00
c000b4f6:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000b4fa:	83 c4 20             	add    esp,0x20
c000b4fd:	6a 00                	push   0x0
c000b4ff:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000b503:	53                   	push   ebx
c000b504:	e8 eb fe ff ff       	call   c000b3f4 <GDTEntry::setBase(unsigned int)>
c000b509:	68 ff ff ff 00       	push   0xffffff
c000b50e:	53                   	push   ebx
c000b50f:	e8 fc fe ff ff       	call   c000b410 <GDTEntry::setLimit(unsigned int)>
c000b514:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000b518:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b51c:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000b520:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000b524:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b528:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000b52d:	0d 00 92 c0 00       	or     eax,0xc09200
c000b532:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000b536:	89 d8                	mov    eax,ebx
c000b538:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000b53c:	80 cc 60             	or     ah,0x60
c000b53f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b543:	83 c4 0c             	add    esp,0xc
c000b546:	89 f8                	mov    eax,edi
c000b548:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b54c:	80 cc 60             	or     ah,0x60
c000b54f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b553:	89 c7                	mov    edi,eax
c000b555:	55                   	push   ebp
c000b556:	e8 e9 fe ff ff       	call   c000b444 <GDT::addEntry(GDTEntry)>
c000b55b:	83 c4 0c             	add    esp,0xc
c000b55e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b562:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b566:	55                   	push   ebp
c000b567:	e8 d8 fe ff ff       	call   c000b444 <GDT::addEntry(GDTEntry)>
c000b56c:	83 c4 0c             	add    esp,0xc
c000b56f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b573:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b577:	55                   	push   ebp
c000b578:	e8 c7 fe ff ff       	call   c000b444 <GDT::addEntry(GDTEntry)>
c000b57d:	83 c4 0c             	add    esp,0xc
c000b580:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000b584:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b588:	53                   	push   ebx
c000b589:	51                   	push   ecx
c000b58a:	55                   	push   ebp
c000b58b:	e8 b4 fe ff ff       	call   c000b444 <GDT::addEntry(GDTEntry)>
c000b590:	83 c4 0c             	add    esp,0xc
c000b593:	57                   	push   edi
c000b594:	56                   	push   esi
c000b595:	55                   	push   ebp
c000b596:	e8 a9 fe ff ff       	call   c000b444 <GDT::addEntry(GDTEntry)>
c000b59b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b59e:	e8 e5 fe ff ff       	call   c000b488 <GDT::flush()>
c000b5a3:	83 c4 4c             	add    esp,0x4c
c000b5a6:	5b                   	pop    ebx
c000b5a7:	5e                   	pop    esi
c000b5a8:	5f                   	pop    edi
c000b5a9:	5d                   	pop    ebp
c000b5aa:	c3                   	ret    

c000b5ab <idleFunction(void*)>:
c000b5ab:	53                   	push   ebx
c000b5ac:	83 ec 08             	sub    esp,0x8
c000b5af:	e8 66 c4 00 00       	call   c0017a1a <unlockScheduler()>
c000b5b4:	e8 31 87 00 00       	call   c0013cea <thisCPU()>
c000b5b9:	f6 80 92 11 00 00 04 	test   BYTE PTR [eax+0x1192],0x4
c000b5c0:	74 41                	je     c000b603 <idleFunction(void*)+0x58>
c000b5c2:	a1 08 34 02 c0       	mov    eax,ds:0xc0023408
c000b5c7:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000b5ce:	74 33                	je     c000b603 <idleFunction(void*)+0x58>
c000b5d0:	31 db                	xor    ebx,ebx
c000b5d2:	52                   	push   edx
c000b5d3:	52                   	push   edx
c000b5d4:	68 e1 00 00 00       	push   0xe1
c000b5d9:	50                   	push   eax
c000b5da:	e8 e7 fb ff ff       	call   c000b1c6 <Computer::rdmsr(unsigned int)>
c000b5df:	53                   	push   ebx
c000b5e0:	83 e0 02             	and    eax,0x2
c000b5e3:	50                   	push   eax
c000b5e4:	68 e1 00 00 00       	push   0xe1
c000b5e9:	ff 35 08 34 02 c0    	push   DWORD PTR ds:0xc0023408
c000b5ef:	e8 fe fb ff ff       	call   c000b1f2 <Computer::wrmsr(unsigned int, unsigned long long)>
c000b5f4:	83 c4 20             	add    esp,0x20
c000b5f7:	e8 54 4b ff ff       	call   c0000150 <doTPAUSE>
c000b5fc:	e8 7f 30 01 00       	call   c001e680 <idleCommon()>
c000b601:	eb f4                	jmp    c000b5f7 <idleFunction(void*)+0x4c>
c000b603:	fb                   	sti    
c000b604:	f4                   	hlt    
c000b605:	e8 76 30 01 00       	call   c001e680 <idleCommon()>
c000b60a:	eb f7                	jmp    c000b603 <idleFunction(void*)+0x58>

c000b60c <IDTEntry::IDTEntry(bool)>:
c000b60c:	83 ec 04             	sub    esp,0x4
c000b60f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b613:	88 04 24             	mov    BYTE PTR [esp],al
c000b616:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b61a:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000b620:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b624:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000b628:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b62c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000b62f:	83 e2 f0             	and    edx,0xfffffff0
c000b632:	83 ca 0e             	or     edx,0xe
c000b635:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000b638:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b63c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000b63f:	83 e2 ef             	and    edx,0xffffffef
c000b642:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000b645:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000b649:	74 04                	je     c000b64f <IDTEntry::IDTEntry(bool)+0x43>
c000b64b:	b2 03                	mov    dl,0x3
c000b64d:	eb 02                	jmp    c000b651 <IDTEntry::IDTEntry(bool)+0x45>
c000b64f:	b2 00                	mov    dl,0x0
c000b651:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b655:	83 e2 03             	and    edx,0x3
c000b658:	88 d1                	mov    cl,dl
c000b65a:	c1 e1 05             	shl    ecx,0x5
c000b65d:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000b660:	83 e2 9f             	and    edx,0xffffff9f
c000b663:	09 ca                	or     edx,ecx
c000b665:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000b668:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b66c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000b66f:	83 ca 80             	or     edx,0xffffff80
c000b672:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000b675:	90                   	nop
c000b676:	83 c4 04             	add    esp,0x4
c000b679:	c3                   	ret    

c000b67a <IDTEntry::setOffset(unsigned int)>:
c000b67a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000b67e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b682:	66 89 02             	mov    WORD PTR [edx],ax
c000b685:	c1 e8 10             	shr    eax,0x10
c000b688:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000b68c:	c3                   	ret    
c000b68d:	90                   	nop

c000b68e <IDT::IDT()>:
c000b68e:	90                   	nop
c000b68f:	c3                   	ret    

c000b690 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000b690:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b694:	83 c0 30             	add    eax,0x30
c000b697:	c3                   	ret    

c000b698 <IDT::addEntry(IDTEntry, int)>:
c000b698:	53                   	push   ebx
c000b699:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b69d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b6a1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000b6a5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b6a9:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000b6ac:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000b6b0:	5b                   	pop    ebx
c000b6b1:	c3                   	ret    

c000b6b2 <IDT::addEntry(int, void (*)(), bool)>:
c000b6b2:	53                   	push   ebx
c000b6b3:	83 ec 10             	sub    esp,0x10
c000b6b6:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000b6bb:	50                   	push   eax
c000b6bc:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000b6c0:	53                   	push   ebx
c000b6c1:	e8 46 ff ff ff       	call   c000b60c <IDTEntry::IDTEntry(bool)>
c000b6c6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b6ca:	53                   	push   ebx
c000b6cb:	e8 aa ff ff ff       	call   c000b67a <IDTEntry::setOffset(unsigned int)>
c000b6d0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000b6d4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b6d8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b6dc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b6e0:	e8 b3 ff ff ff       	call   c000b698 <IDT::addEntry(IDTEntry, int)>
c000b6e5:	83 c4 30             	add    esp,0x30
c000b6e8:	5b                   	pop    ebx
c000b6e9:	c3                   	ret    

c000b6ea <IDT::flush()>:
c000b6ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6ee:	66 c7 05 18 34 02 c0 ff 07 	mov    WORD PTR ds:0xc0023418,0x7ff
c000b6f7:	a3 1a 34 02 c0       	mov    ds:0xc002341a,eax
c000b6fc:	0f 01 1d 18 34 02 c0 	lidtd  ds:0xc0023418
c000b703:	c3                   	ret    

c000b704 <IDT::setup()>:
c000b704:	57                   	push   edi
c000b705:	56                   	push   esi
c000b706:	53                   	push   ebx
c000b707:	83 ec 10             	sub    esp,0x10
c000b70a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000b70e:	6a 00                	push   0x0
c000b710:	68 53 03 00 c0       	push   0xc0000353
c000b715:	6a 00                	push   0x0
c000b717:	53                   	push   ebx
c000b718:	e8 95 ff ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b71d:	6a 00                	push   0x0
c000b71f:	68 63 03 00 c0       	push   0xc0000363
c000b724:	6a 01                	push   0x1
c000b726:	53                   	push   ebx
c000b727:	e8 86 ff ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b72c:	83 c4 20             	add    esp,0x20
c000b72f:	6a 00                	push   0x0
c000b731:	68 6d 03 00 c0       	push   0xc000036d
c000b736:	6a 02                	push   0x2
c000b738:	53                   	push   ebx
c000b739:	e8 74 ff ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b73e:	6a 00                	push   0x0
c000b740:	68 77 03 00 c0       	push   0xc0000377
c000b745:	6a 03                	push   0x3
c000b747:	53                   	push   ebx
c000b748:	e8 65 ff ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b74d:	83 c4 20             	add    esp,0x20
c000b750:	6a 00                	push   0x0
c000b752:	68 81 03 00 c0       	push   0xc0000381
c000b757:	6a 04                	push   0x4
c000b759:	53                   	push   ebx
c000b75a:	e8 53 ff ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b75f:	6a 00                	push   0x0
c000b761:	68 8b 03 00 c0       	push   0xc000038b
c000b766:	6a 05                	push   0x5
c000b768:	53                   	push   ebx
c000b769:	e8 44 ff ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b76e:	83 c4 20             	add    esp,0x20
c000b771:	6a 00                	push   0x0
c000b773:	68 95 03 00 c0       	push   0xc0000395
c000b778:	6a 06                	push   0x6
c000b77a:	53                   	push   ebx
c000b77b:	e8 32 ff ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b780:	6a 00                	push   0x0
c000b782:	68 9f 03 00 c0       	push   0xc000039f
c000b787:	6a 07                	push   0x7
c000b789:	53                   	push   ebx
c000b78a:	e8 23 ff ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b78f:	83 c4 20             	add    esp,0x20
c000b792:	6a 00                	push   0x0
c000b794:	68 a9 03 00 c0       	push   0xc00003a9
c000b799:	6a 08                	push   0x8
c000b79b:	53                   	push   ebx
c000b79c:	e8 11 ff ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b7a1:	6a 00                	push   0x0
c000b7a3:	68 b1 03 00 c0       	push   0xc00003b1
c000b7a8:	6a 09                	push   0x9
c000b7aa:	53                   	push   ebx
c000b7ab:	e8 02 ff ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b7b0:	83 c4 20             	add    esp,0x20
c000b7b3:	6a 00                	push   0x0
c000b7b5:	68 bb 03 00 c0       	push   0xc00003bb
c000b7ba:	6a 0a                	push   0xa
c000b7bc:	53                   	push   ebx
c000b7bd:	e8 f0 fe ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b7c2:	6a 00                	push   0x0
c000b7c4:	68 c3 03 00 c0       	push   0xc00003c3
c000b7c9:	6a 0b                	push   0xb
c000b7cb:	53                   	push   ebx
c000b7cc:	e8 e1 fe ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b7d1:	83 c4 20             	add    esp,0x20
c000b7d4:	6a 00                	push   0x0
c000b7d6:	68 cb 03 00 c0       	push   0xc00003cb
c000b7db:	6a 0c                	push   0xc
c000b7dd:	53                   	push   ebx
c000b7de:	e8 cf fe ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b7e3:	6a 00                	push   0x0
c000b7e5:	68 d3 03 00 c0       	push   0xc00003d3
c000b7ea:	6a 0d                	push   0xd
c000b7ec:	53                   	push   ebx
c000b7ed:	e8 c0 fe ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b7f2:	83 c4 20             	add    esp,0x20
c000b7f5:	6a 00                	push   0x0
c000b7f7:	68 db 03 00 c0       	push   0xc00003db
c000b7fc:	6a 0e                	push   0xe
c000b7fe:	53                   	push   ebx
c000b7ff:	e8 ae fe ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b804:	6a 00                	push   0x0
c000b806:	68 e3 03 00 c0       	push   0xc00003e3
c000b80b:	6a 0f                	push   0xf
c000b80d:	53                   	push   ebx
c000b80e:	e8 9f fe ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b813:	83 c4 20             	add    esp,0x20
c000b816:	6a 00                	push   0x0
c000b818:	68 ed 03 00 c0       	push   0xc00003ed
c000b81d:	6a 10                	push   0x10
c000b81f:	53                   	push   ebx
c000b820:	e8 8d fe ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b825:	6a 00                	push   0x0
c000b827:	68 f7 03 00 c0       	push   0xc00003f7
c000b82c:	6a 11                	push   0x11
c000b82e:	53                   	push   ebx
c000b82f:	e8 7e fe ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b834:	83 c4 20             	add    esp,0x20
c000b837:	6a 00                	push   0x0
c000b839:	68 01 04 00 c0       	push   0xc0000401
c000b83e:	6a 12                	push   0x12
c000b840:	53                   	push   ebx
c000b841:	e8 6c fe ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b846:	6a 01                	push   0x1
c000b848:	68 0b 04 00 c0       	push   0xc000040b
c000b84d:	6a 60                	push   0x60
c000b84f:	53                   	push   ebx
c000b850:	e8 5d fe ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b855:	83 c4 20             	add    esp,0x20
c000b858:	6a 00                	push   0x0
c000b85a:	68 15 04 00 c0       	push   0xc0000415
c000b85f:	6a 20                	push   0x20
c000b861:	53                   	push   ebx
c000b862:	e8 4b fe ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b867:	6a 00                	push   0x0
c000b869:	68 1f 04 00 c0       	push   0xc000041f
c000b86e:	6a 21                	push   0x21
c000b870:	53                   	push   ebx
c000b871:	e8 3c fe ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b876:	83 c4 20             	add    esp,0x20
c000b879:	6a 00                	push   0x0
c000b87b:	68 29 04 00 c0       	push   0xc0000429
c000b880:	6a 22                	push   0x22
c000b882:	53                   	push   ebx
c000b883:	e8 2a fe ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b888:	6a 00                	push   0x0
c000b88a:	68 33 04 00 c0       	push   0xc0000433
c000b88f:	6a 23                	push   0x23
c000b891:	53                   	push   ebx
c000b892:	e8 1b fe ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b897:	83 c4 20             	add    esp,0x20
c000b89a:	6a 00                	push   0x0
c000b89c:	68 3d 04 00 c0       	push   0xc000043d
c000b8a1:	6a 24                	push   0x24
c000b8a3:	53                   	push   ebx
c000b8a4:	e8 09 fe ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b8a9:	6a 00                	push   0x0
c000b8ab:	68 47 04 00 c0       	push   0xc0000447
c000b8b0:	6a 25                	push   0x25
c000b8b2:	53                   	push   ebx
c000b8b3:	e8 fa fd ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b8b8:	83 c4 20             	add    esp,0x20
c000b8bb:	6a 00                	push   0x0
c000b8bd:	68 51 04 00 c0       	push   0xc0000451
c000b8c2:	6a 26                	push   0x26
c000b8c4:	53                   	push   ebx
c000b8c5:	e8 e8 fd ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b8ca:	6a 00                	push   0x0
c000b8cc:	68 5b 04 00 c0       	push   0xc000045b
c000b8d1:	6a 27                	push   0x27
c000b8d3:	53                   	push   ebx
c000b8d4:	e8 d9 fd ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b8d9:	83 c4 20             	add    esp,0x20
c000b8dc:	6a 00                	push   0x0
c000b8de:	68 65 04 00 c0       	push   0xc0000465
c000b8e3:	6a 28                	push   0x28
c000b8e5:	53                   	push   ebx
c000b8e6:	e8 c7 fd ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b8eb:	6a 00                	push   0x0
c000b8ed:	68 6f 04 00 c0       	push   0xc000046f
c000b8f2:	6a 29                	push   0x29
c000b8f4:	53                   	push   ebx
c000b8f5:	e8 b8 fd ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b8fa:	83 c4 20             	add    esp,0x20
c000b8fd:	6a 00                	push   0x0
c000b8ff:	68 79 04 00 c0       	push   0xc0000479
c000b904:	6a 2a                	push   0x2a
c000b906:	53                   	push   ebx
c000b907:	e8 a6 fd ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b90c:	6a 00                	push   0x0
c000b90e:	68 83 04 00 c0       	push   0xc0000483
c000b913:	6a 2b                	push   0x2b
c000b915:	53                   	push   ebx
c000b916:	e8 97 fd ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b91b:	83 c4 20             	add    esp,0x20
c000b91e:	6a 00                	push   0x0
c000b920:	68 8d 04 00 c0       	push   0xc000048d
c000b925:	6a 2c                	push   0x2c
c000b927:	53                   	push   ebx
c000b928:	e8 85 fd ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b92d:	6a 00                	push   0x0
c000b92f:	68 97 04 00 c0       	push   0xc0000497
c000b934:	6a 2d                	push   0x2d
c000b936:	53                   	push   ebx
c000b937:	e8 76 fd ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b93c:	83 c4 20             	add    esp,0x20
c000b93f:	6a 00                	push   0x0
c000b941:	68 a1 04 00 c0       	push   0xc00004a1
c000b946:	6a 2e                	push   0x2e
c000b948:	53                   	push   ebx
c000b949:	e8 64 fd ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b94e:	6a 00                	push   0x0
c000b950:	68 ab 04 00 c0       	push   0xc00004ab
c000b955:	6a 2f                	push   0x2f
c000b957:	53                   	push   ebx
c000b958:	e8 55 fd ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b95d:	83 c4 20             	add    esp,0x20
c000b960:	6a 00                	push   0x0
c000b962:	68 b5 04 00 c0       	push   0xc00004b5
c000b967:	6a 30                	push   0x30
c000b969:	53                   	push   ebx
c000b96a:	e8 43 fd ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b96f:	6a 00                	push   0x0
c000b971:	68 bf 04 00 c0       	push   0xc00004bf
c000b976:	6a 31                	push   0x31
c000b978:	53                   	push   ebx
c000b979:	e8 34 fd ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b97e:	83 c4 20             	add    esp,0x20
c000b981:	6a 00                	push   0x0
c000b983:	68 c9 04 00 c0       	push   0xc00004c9
c000b988:	6a 32                	push   0x32
c000b98a:	53                   	push   ebx
c000b98b:	e8 22 fd ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b990:	6a 00                	push   0x0
c000b992:	68 d3 04 00 c0       	push   0xc00004d3
c000b997:	6a 33                	push   0x33
c000b999:	53                   	push   ebx
c000b99a:	e8 13 fd ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b99f:	83 c4 20             	add    esp,0x20
c000b9a2:	6a 00                	push   0x0
c000b9a4:	68 dd 04 00 c0       	push   0xc00004dd
c000b9a9:	6a 34                	push   0x34
c000b9ab:	53                   	push   ebx
c000b9ac:	e8 01 fd ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b9b1:	6a 00                	push   0x0
c000b9b3:	68 e7 04 00 c0       	push   0xc00004e7
c000b9b8:	6a 35                	push   0x35
c000b9ba:	53                   	push   ebx
c000b9bb:	e8 f2 fc ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b9c0:	83 c4 20             	add    esp,0x20
c000b9c3:	6a 00                	push   0x0
c000b9c5:	68 f1 04 00 c0       	push   0xc00004f1
c000b9ca:	6a 36                	push   0x36
c000b9cc:	53                   	push   ebx
c000b9cd:	e8 e0 fc ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b9d2:	6a 00                	push   0x0
c000b9d4:	68 fb 04 00 c0       	push   0xc00004fb
c000b9d9:	6a 37                	push   0x37
c000b9db:	53                   	push   ebx
c000b9dc:	e8 d1 fc ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b9e1:	83 c4 20             	add    esp,0x20
c000b9e4:	e8 a8 25 00 00       	call   c000df91 <Virt::getAKernelVAS()>
c000b9e9:	52                   	push   edx
c000b9ea:	6a 03                	push   0x3
c000b9ec:	6a 02                	push   0x2
c000b9ee:	50                   	push   eax
c000b9ef:	e8 68 2b 00 00       	call   c000e55c <VAS::allocatePages(int, int)>
c000b9f4:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000b9fb:	89 c6                	mov    esi,eax
c000b9fd:	e8 6a 32 00 00       	call   c000ec6c <operator new(unsigned long)>
c000ba02:	81 c6 00 20 00 00    	add    esi,0x2000
c000ba08:	89 04 24             	mov    DWORD PTR [esp],eax
c000ba0b:	89 c7                	mov    edi,eax
c000ba0d:	e8 c0 1c 00 00       	call   c000d6d2 <TSS::TSS()>
c000ba12:	83 c4 0c             	add    esp,0xc
c000ba15:	68 a9 03 00 c0       	push   0xc00003a9
c000ba1a:	56                   	push   esi
c000ba1b:	57                   	push   edi
c000ba1c:	e8 f1 1c 00 00       	call   c000d712 <TSS::setup(unsigned long, unsigned long)>
c000ba21:	59                   	pop    ecx
c000ba22:	89 c6                	mov    esi,eax
c000ba24:	5f                   	pop    edi
c000ba25:	6a 00                	push   0x0
c000ba27:	8d 44 24 14          	lea    eax,[esp+0x14]
c000ba2b:	50                   	push   eax
c000ba2c:	e8 db fb ff ff       	call   c000b60c <IDTEntry::IDTEntry(bool)>
c000ba31:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ba35:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000ba3a:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000ba41:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000ba47:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ba4b:	80 ce 05             	or     dh,0x5
c000ba4e:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000ba51:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ba55:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ba59:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000ba5c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ba5f:	e8 86 fc ff ff       	call   c000b6ea <IDT::flush()>
c000ba64:	83 c4 20             	add    esp,0x20
c000ba67:	5b                   	pop    ebx
c000ba68:	5e                   	pop    esi
c000ba69:	5f                   	pop    edi
c000ba6a:	c3                   	ret    

c000ba6b <sbrk>:
c000ba6b:	55                   	push   ebp
c000ba6c:	57                   	push   edi
c000ba6d:	56                   	push   esi
c000ba6e:	53                   	push   ebx
c000ba6f:	83 ec 1c             	sub    esp,0x1c
c000ba72:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000ba76:	85 db                	test   ebx,ebx
c000ba78:	74 37                	je     c000bab1 <sbrk+0x46>
c000ba7a:	78 3f                	js     c000babb <sbrk+0x50>
c000ba7c:	e8 69 82 00 00       	call   c0013cea <thisCPU()>
c000ba81:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000ba87:	83 e0 01             	and    eax,0x1
c000ba8a:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000ba8e:	a1 24 28 02 c0       	mov    eax,ds:0xc0022824
c000ba93:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ba97:	81 c3 ff 0f 00 00    	add    ebx,0xfff
c000ba9d:	89 d8                	mov    eax,ebx
c000ba9f:	78 35                	js     c000bad6 <sbrk+0x6b>
c000baa1:	c1 f8 0c             	sar    eax,0xc
c000baa4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000baa8:	89 c7                	mov    edi,eax
c000baaa:	be 00 00 00 00       	mov    esi,0x0
c000baaf:	eb 3c                	jmp    c000baed <sbrk+0x82>
c000bab1:	a1 24 28 02 c0       	mov    eax,ds:0xc0022824
c000bab6:	e9 ad 00 00 00       	jmp    c000bb68 <sbrk+0xfd>
c000babb:	83 ec 08             	sub    esp,0x8
c000babe:	53                   	push   ebx
c000babf:	68 38 00 02 c0       	push   0xc0020038
c000bac4:	e8 92 32 00 00       	call   c000ed5b <Dbg::kprintf(char const*, ...)>
c000bac9:	83 c4 10             	add    esp,0x10
c000bacc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000bad1:	e9 92 00 00 00       	jmp    c000bb68 <sbrk+0xfd>
c000bad6:	8d 83 ff 0f 00 00    	lea    eax,[ebx+0xfff]
c000badc:	eb c3                	jmp    c000baa1 <sbrk+0x36>
c000bade:	81 05 24 28 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc0022824,0x1000
c000bae8:	46                   	inc    esi
c000bae9:	39 f7                	cmp    edi,esi
c000baeb:	74 34                	je     c000bb21 <sbrk+0xb6>
c000baed:	e8 9f 24 00 00       	call   c000df91 <Virt::getAKernelVAS()>
c000baf2:	89 c3                	mov    ebx,eax
c000baf4:	8b 2d 24 28 02 c0    	mov    ebp,DWORD PTR ds:0xc0022824
c000bafa:	e8 c9 06 00 00       	call   c000c1c8 <Phys::allocatePage()>
c000baff:	68 01 04 00 00       	push   0x401
c000bb04:	55                   	push   ebp
c000bb05:	50                   	push   eax
c000bb06:	53                   	push   ebx
c000bb07:	e8 50 29 00 00       	call   c000e45c <VAS::mapPage(unsigned long, unsigned long, int)>
c000bb0c:	83 c4 10             	add    esp,0x10
c000bb0f:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000bb14:	74 c8                	je     c000bade <sbrk+0x73>
c000bb16:	8b 1d 24 28 02 c0    	mov    ebx,DWORD PTR ds:0xc0022824
c000bb1c:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000bb1f:	eb bd                	jmp    c000bade <sbrk+0x73>
c000bb21:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000bb26:	74 48                	je     c000bb70 <sbrk+0x105>
c000bb28:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000bb2c:	89 d3                	mov    ebx,edx
c000bb2e:	c1 eb 0a             	shr    ebx,0xa
c000bb31:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000bb37:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000bb3d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bb41:	c1 e0 0c             	shl    eax,0xc
c000bb44:	01 d0                	add    eax,edx
c000bb46:	c1 e8 0a             	shr    eax,0xa
c000bb49:	25 00 f0 ff ff       	and    eax,0xfffff000
c000bb4e:	2d 00 00 40 00       	sub    eax,0x400000
c000bb53:	39 c3                	cmp    ebx,eax
c000bb55:	77 0d                	ja     c000bb64 <sbrk+0xf9>
c000bb57:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000bb5a:	81 c3 00 10 00 00    	add    ebx,0x1000
c000bb60:	39 d8                	cmp    eax,ebx
c000bb62:	73 f3                	jae    c000bb57 <sbrk+0xec>
c000bb64:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bb68:	83 c4 1c             	add    esp,0x1c
c000bb6b:	5b                   	pop    ebx
c000bb6c:	5e                   	pop    esi
c000bb6d:	5f                   	pop    edi
c000bb6e:	5d                   	pop    ebp
c000bb6f:	c3                   	ret    
c000bb70:	e8 20 2b 01 00       	call   c001e695 <CPU::readCR3()>
c000bb75:	83 ec 0c             	sub    esp,0xc
c000bb78:	50                   	push   eax
c000bb79:	e8 29 2b 01 00       	call   c001e6a7 <CPU::writeCR3(unsigned long)>
c000bb7e:	83 c4 10             	add    esp,0x10
c000bb81:	eb e1                	jmp    c000bb64 <sbrk+0xf9>

c000bb83 <mmap>:
c000bb83:	83 ec 18             	sub    esp,0x18
c000bb86:	68 68 00 02 c0       	push   0xc0020068
c000bb8b:	e8 60 8e 00 00       	call   c00149f0 <Krnl::panic(char const*)>
c000bb90:	b8 00 00 00 00       	mov    eax,0x0
c000bb95:	83 c4 1c             	add    esp,0x1c
c000bb98:	c3                   	ret    

c000bb99 <munmap>:
c000bb99:	83 ec 18             	sub    esp,0x18
c000bb9c:	68 6d 00 02 c0       	push   0xc002006d
c000bba1:	e8 4a 8e 00 00       	call   c00149f0 <Krnl::panic(char const*)>
c000bba6:	b8 00 00 00 00       	mov    eax,0x0
c000bbab:	83 c4 1c             	add    esp,0x1c
c000bbae:	c3                   	ret    

c000bbaf <liballoc_lock()>:
c000bbaf:	83 ec 0c             	sub    esp,0xc
c000bbb2:	e8 61 be 00 00       	call   c0017a18 <lockScheduler()>
c000bbb7:	b8 00 00 00 00       	mov    eax,0x0
c000bbbc:	83 c4 0c             	add    esp,0xc
c000bbbf:	c3                   	ret    

c000bbc0 <liballoc_unlock()>:
c000bbc0:	83 ec 0c             	sub    esp,0xc
c000bbc3:	e8 52 be 00 00       	call   c0017a1a <unlockScheduler()>
c000bbc8:	b8 00 00 00 00       	mov    eax,0x0
c000bbcd:	83 c4 0c             	add    esp,0xc
c000bbd0:	c3                   	ret    

c000bbd1 <liballoc_alloc(int)>:
c000bbd1:	83 ec 0c             	sub    esp,0xc
c000bbd4:	e8 b8 23 00 00       	call   c000df91 <Virt::getAKernelVAS()>
c000bbd9:	83 ec 04             	sub    esp,0x4
c000bbdc:	6a 01                	push   0x1
c000bbde:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bbe2:	50                   	push   eax
c000bbe3:	e8 74 29 00 00       	call   c000e55c <VAS::allocatePages(int, int)>
c000bbe8:	83 c4 1c             	add    esp,0x1c
c000bbeb:	c3                   	ret    

c000bbec <liballoc_free(void*, int)>:
c000bbec:	83 ec 0c             	sub    esp,0xc
c000bbef:	e8 9d 23 00 00       	call   c000df91 <Virt::getAKernelVAS()>
c000bbf4:	83 ec 08             	sub    esp,0x8
c000bbf7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bbfb:	50                   	push   eax
c000bbfc:	e8 7d 26 00 00       	call   c000e27e <VAS::freeAllocatedPages(unsigned long)>
c000bc01:	b8 00 00 00 00       	mov    eax,0x0
c000bc06:	83 c4 1c             	add    esp,0x1c
c000bc09:	c3                   	ret    

c000bc0a <realloc>:
c000bc0a:	83 ec 14             	sub    esp,0x14
c000bc0d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc11:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc15:	e8 67 57 ff ff       	call   c0001381 <dlrealloc>
c000bc1a:	83 c4 1c             	add    esp,0x1c
c000bc1d:	c3                   	ret    

c000bc1e <malloc>:
c000bc1e:	83 ec 18             	sub    esp,0x18
c000bc21:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc25:	e8 1a 52 ff ff       	call   c0000e44 <dlmalloc>
c000bc2a:	83 c4 1c             	add    esp,0x1c
c000bc2d:	c3                   	ret    

c000bc2e <free>:
c000bc2e:	83 ec 18             	sub    esp,0x18
c000bc31:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc35:	e8 af 4e ff ff       	call   c0000ae9 <dlfree>
c000bc3a:	83 c4 1c             	add    esp,0x1c
c000bc3d:	c3                   	ret    

c000bc3e <rfree>:
c000bc3e:	83 ec 18             	sub    esp,0x18
c000bc41:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc45:	e8 e4 ff ff ff       	call   c000bc2e <free>
c000bc4a:	83 c4 1c             	add    esp,0x1c
c000bc4d:	c3                   	ret    

c000bc4e <calloc>:
c000bc4e:	56                   	push   esi
c000bc4f:	53                   	push   ebx
c000bc50:	83 ec 10             	sub    esp,0x10
c000bc53:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000bc57:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000bc5c:	53                   	push   ebx
c000bc5d:	e8 bc ff ff ff       	call   c000bc1e <malloc>
c000bc62:	89 c6                	mov    esi,eax
c000bc64:	83 c4 0c             	add    esp,0xc
c000bc67:	53                   	push   ebx
c000bc68:	6a 00                	push   0x0
c000bc6a:	50                   	push   eax
c000bc6b:	e8 98 49 ff ff       	call   c0000608 <memset>
c000bc70:	89 f0                	mov    eax,esi
c000bc72:	83 c4 14             	add    esp,0x14
c000bc75:	5b                   	pop    ebx
c000bc76:	5e                   	pop    esi
c000bc77:	c3                   	ret    

c000bc78 <hwTextMode_loadInData(VgaText*)>:
c000bc78:	57                   	push   edi
c000bc79:	56                   	push   esi
c000bc7a:	53                   	push   ebx
c000bc7b:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000bc7f:	8b 87 ac 0f 00 00    	mov    eax,DWORD PTR [edi+0xfac]
c000bc85:	85 c0                	test   eax,eax
c000bc87:	7e 30                	jle    c000bcb9 <hwTextMode_loadInData(VgaText*)+0x41>
c000bc89:	8d 5f 0c             	lea    ebx,[edi+0xc]
c000bc8c:	31 f6                	xor    esi,esi
c000bc8e:	8d 0c b6             	lea    ecx,[esi+esi*4]
c000bc91:	31 c0                	xor    eax,eax
c000bc93:	c1 e1 05             	shl    ecx,0x5
c000bc96:	81 e9 60 7f f4 3d    	sub    ecx,0x3df47f60
c000bc9c:	66 8b 14 43          	mov    dx,WORD PTR [ebx+eax*2]
c000bca0:	66 89 14 41          	mov    WORD PTR [ecx+eax*2],dx
c000bca4:	40                   	inc    eax
c000bca5:	83 f8 50             	cmp    eax,0x50
c000bca8:	75 f2                	jne    c000bc9c <hwTextMode_loadInData(VgaText*)+0x24>
c000bcaa:	81 c3 a0 00 00 00    	add    ebx,0xa0
c000bcb0:	46                   	inc    esi
c000bcb1:	39 b7 ac 0f 00 00    	cmp    DWORD PTR [edi+0xfac],esi
c000bcb7:	7f d5                	jg     c000bc8e <hwTextMode_loadInData(VgaText*)+0x16>
c000bcb9:	5b                   	pop    ebx
c000bcba:	5e                   	pop    esi
c000bcbb:	5f                   	pop    edi
c000bcbc:	c3                   	ret    

c000bcbd <hwTextMode_loadInTitle(VgaText*, char*)>:
c000bcbd:	56                   	push   esi
c000bcbe:	ba 00 80 0b c2       	mov    edx,0xc20b8000
c000bcc3:	53                   	push   ebx
c000bcc4:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000bcc8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000bccc:	8b 83 d4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfd4]
c000bcd2:	8b b3 d8 0f 00 00    	mov    esi,DWORD PTR [ebx+0xfd8]
c000bcd8:	c1 e0 04             	shl    eax,0x4
c000bcdb:	83 e6 0f             	and    esi,0xf
c000bcde:	0f b6 c0             	movzx  eax,al
c000bce1:	41                   	inc    ecx
c000bce2:	09 f0                	or     eax,esi
c000bce4:	83 c2 02             	add    edx,0x2
c000bce7:	0f b6 71 ff          	movzx  esi,BYTE PTR [ecx-0x1]
c000bceb:	c1 e0 08             	shl    eax,0x8
c000bcee:	09 f0                	or     eax,esi
c000bcf0:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c000bcf4:	81 fa a0 80 0b c2    	cmp    edx,0xc20b80a0
c000bcfa:	75 d0                	jne    c000bccc <hwTextMode_loadInTitle(VgaText*, char*)+0xf>
c000bcfc:	5b                   	pop    ebx
c000bcfd:	5e                   	pop    esi
c000bcfe:	c3                   	ret    

c000bcff <hwTextMode_showCursor(VgaText*, bool)>:
c000bcff:	56                   	push   esi
c000bd00:	53                   	push   ebx
c000bd01:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c000bd06:	74 38                	je     c000bd40 <hwTextMode_showCursor(VgaText*, bool)+0x41>
c000bd08:	bb d4 03 00 00       	mov    ebx,0x3d4
c000bd0d:	b0 0a                	mov    al,0xa
c000bd0f:	89 da                	mov    edx,ebx
c000bd11:	ee                   	out    dx,al
c000bd12:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000bd17:	89 ca                	mov    edx,ecx
c000bd19:	ec                   	in     al,dx
c000bd1a:	b2 0f                	mov    dl,0xf
c000bd1c:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000bd20:	83 e0 c0             	and    eax,0xffffffc0
c000bd23:	2b 96 b8 0f 00 00    	sub    edx,DWORD PTR [esi+0xfb8]
c000bd29:	09 d0                	or     eax,edx
c000bd2b:	89 ca                	mov    edx,ecx
c000bd2d:	ee                   	out    dx,al
c000bd2e:	b0 0b                	mov    al,0xb
c000bd30:	89 da                	mov    edx,ebx
c000bd32:	ee                   	out    dx,al
c000bd33:	89 ca                	mov    edx,ecx
c000bd35:	ec                   	in     al,dx
c000bd36:	83 e0 e0             	and    eax,0xffffffe0
c000bd39:	83 c8 0f             	or     eax,0xf
c000bd3c:	ee                   	out    dx,al
c000bd3d:	5b                   	pop    ebx
c000bd3e:	5e                   	pop    esi
c000bd3f:	c3                   	ret    
c000bd40:	b0 0a                	mov    al,0xa
c000bd42:	ba d4 03 00 00       	mov    edx,0x3d4
c000bd47:	ee                   	out    dx,al
c000bd48:	b0 20                	mov    al,0x20
c000bd4a:	ba d5 03 00 00       	mov    edx,0x3d5
c000bd4f:	ee                   	out    dx,al
c000bd50:	5b                   	pop    ebx
c000bd51:	5e                   	pop    esi
c000bd52:	c3                   	ret    

c000bd53 <hwTextMode_update(VgaText*)>:
c000bd53:	c3                   	ret    

c000bd54 <hwTextMode_updateCursor(VgaText*)>:
c000bd54:	56                   	push   esi
c000bd55:	b9 19 00 00 00       	mov    ecx,0x19
c000bd5a:	53                   	push   ebx
c000bd5b:	be d4 03 00 00       	mov    esi,0x3d4
c000bd60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bd64:	89 f2                	mov    edx,esi
c000bd66:	2b 88 ac 0f 00 00    	sub    ecx,DWORD PTR [eax+0xfac]
c000bd6c:	03 88 b4 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb4]
c000bd72:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000bd75:	c1 e1 04             	shl    ecx,0x4
c000bd78:	03 88 b0 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb0]
c000bd7e:	b0 0f                	mov    al,0xf
c000bd80:	ee                   	out    dx,al
c000bd81:	bb d5 03 00 00       	mov    ebx,0x3d5
c000bd86:	88 c8                	mov    al,cl
c000bd88:	89 da                	mov    edx,ebx
c000bd8a:	ee                   	out    dx,al
c000bd8b:	b0 0e                	mov    al,0xe
c000bd8d:	89 f2                	mov    edx,esi
c000bd8f:	ee                   	out    dx,al
c000bd90:	89 c8                	mov    eax,ecx
c000bd92:	89 da                	mov    edx,ebx
c000bd94:	66 c1 e8 08          	shr    ax,0x8
c000bd98:	ee                   	out    dx,al
c000bd99:	5b                   	pop    ebx
c000bd9a:	5e                   	pop    esi
c000bd9b:	c3                   	ret    

c000bd9c <hwTextMode_disableBlink(VgaText*, bool)>:
c000bd9c:	ba da 03 00 00       	mov    edx,0x3da
c000bda1:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000bda6:	75 18                	jne    c000bdc0 <hwTextMode_disableBlink(VgaText*, bool)+0x24>
c000bda8:	ec                   	in     al,dx
c000bda9:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000bdae:	b0 30                	mov    al,0x30
c000bdb0:	89 ca                	mov    edx,ecx
c000bdb2:	ee                   	out    dx,al
c000bdb3:	ba c1 03 00 00       	mov    edx,0x3c1
c000bdb8:	ec                   	in     al,dx
c000bdb9:	83 c8 08             	or     eax,0x8
c000bdbc:	89 ca                	mov    edx,ecx
c000bdbe:	ee                   	out    dx,al
c000bdbf:	c3                   	ret    
c000bdc0:	ec                   	in     al,dx
c000bdc1:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000bdc6:	b0 30                	mov    al,0x30
c000bdc8:	89 ca                	mov    edx,ecx
c000bdca:	ee                   	out    dx,al
c000bdcb:	ba c1 03 00 00       	mov    edx,0x3c1
c000bdd0:	ec                   	in     al,dx
c000bdd1:	83 e0 f7             	and    eax,0xfffffff7
c000bdd4:	89 ca                	mov    edx,ecx
c000bdd6:	ee                   	out    dx,al
c000bdd7:	c3                   	ret    

c000bdd8 <hwTextMode_scrollScreen(VgaText*)>:
c000bdd8:	55                   	push   ebp
c000bdd9:	bd 02 00 00 00       	mov    ebp,0x2
c000bdde:	57                   	push   edi
c000bddf:	56                   	push   esi
c000bde0:	53                   	push   ebx
c000bde1:	83 ec 1c             	sub    esp,0x1c
c000bde4:	c7 44 24 0c a0 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b80a0
c000bdec:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000bdf0:	31 c0                	xor    eax,eax
c000bdf2:	eb 0b                	jmp    c000bdff <hwTextMode_scrollScreen(VgaText*)+0x27>
c000bdf4:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000bdfa:	74 57                	je     c000be53 <hwTextMode_scrollScreen(VgaText*)+0x7b>
c000bdfc:	43                   	inc    ebx
c000bdfd:	89 f0                	mov    eax,esi
c000bdff:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000be05:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000be0b:	88 13                	mov    BYTE PTR [ebx],dl
c000be0d:	8d 70 01             	lea    esi,[eax+0x1]
c000be10:	83 fd 18             	cmp    ebp,0x18
c000be13:	75 df                	jne    c000bdf4 <hwTextMode_scrollScreen(VgaText*)+0x1c>
c000be15:	a8 01                	test   al,0x1
c000be17:	75 13                	jne    c000be2c <hwTextMode_scrollScreen(VgaText*)+0x54>
c000be19:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000be1c:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000be22:	75 d8                	jne    c000bdfc <hwTextMode_scrollScreen(VgaText*)+0x24>
c000be24:	83 c4 1c             	add    esp,0x1c
c000be27:	5b                   	pop    ebx
c000be28:	5e                   	pop    esi
c000be29:	5f                   	pop    edi
c000be2a:	5d                   	pop    ebp
c000be2b:	c3                   	ret    
c000be2c:	83 ec 08             	sub    esp,0x8
c000be2f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000be33:	0f b6 80 cc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfcc]
c000be3a:	50                   	push   eax
c000be3b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000be3f:	0f b6 80 d0 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfd0]
c000be46:	50                   	push   eax
c000be47:	e8 66 0b 00 00       	call   c000c9b2 <VgaText::combineColours(unsigned char, unsigned char)>
c000be4c:	83 c4 10             	add    esp,0x10
c000be4f:	88 07                	mov    BYTE PTR [edi],al
c000be51:	eb c9                	jmp    c000be1c <hwTextMode_scrollScreen(VgaText*)+0x44>
c000be53:	45                   	inc    ebp
c000be54:	81 44 24 0c a0 00 00 00 	add    DWORD PTR [esp+0xc],0xa0
c000be5c:	eb 8e                	jmp    c000bdec <hwTextMode_scrollScreen(VgaText*)+0x14>

c000be5e <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000be5e:	56                   	push   esi
c000be5f:	53                   	push   ebx
c000be60:	83 ec 0c             	sub    esp,0xc
c000be63:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000be67:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000be6b:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000be70:	50                   	push   eax
c000be71:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000be76:	50                   	push   eax
c000be77:	e8 36 0b 00 00       	call   c000c9b2 <VgaText::combineColours(unsigned char, unsigned char)>
c000be7c:	5a                   	pop    edx
c000be7d:	0f b6 c0             	movzx  eax,al
c000be80:	59                   	pop    ecx
c000be81:	50                   	push   eax
c000be82:	89 f0                	mov    eax,esi
c000be84:	0f be f0             	movsx  esi,al
c000be87:	56                   	push   esi
c000be88:	e8 cb 0b 00 00       	call   c000ca58 <VgaText::combineCharAndColour(char, unsigned char)>
c000be8d:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000be91:	ba 19 00 00 00       	mov    edx,0x19
c000be96:	2b 91 ac 0f 00 00    	sub    edx,DWORD PTR [ecx+0xfac]
c000be9c:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000be9f:	8d 14 92             	lea    edx,[edx+edx*4]
c000bea2:	c1 e1 04             	shl    ecx,0x4
c000bea5:	c1 e2 04             	shl    edx,0x4
c000bea8:	03 4c 24 30          	add    ecx,DWORD PTR [esp+0x30]
c000beac:	01 ca                	add    edx,ecx
c000beae:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c000beb6:	83 c4 14             	add    esp,0x14
c000beb9:	5b                   	pop    ebx
c000beba:	5e                   	pop    esi
c000bebb:	c3                   	ret    

c000bebc <setupTextMode()>:
c000bebc:	c7 05 b8 34 02 c0 9c bd 00 c0 	mov    DWORD PTR ds:0xc00234b8,0xc000bd9c
c000bec6:	c7 05 a4 34 02 c0 78 bc 00 c0 	mov    DWORD PTR ds:0xc00234a4,0xc000bc78
c000bed0:	c7 05 a0 34 02 c0 bd bc 00 c0 	mov    DWORD PTR ds:0xc00234a0,0xc000bcbd
c000beda:	c7 05 ac 34 02 c0 d8 bd 00 c0 	mov    DWORD PTR ds:0xc00234ac,0xc000bdd8
c000bee4:	c7 05 b4 34 02 c0 ff bc 00 c0 	mov    DWORD PTR ds:0xc00234b4,0xc000bcff
c000beee:	c7 05 a8 34 02 c0 53 bd 00 c0 	mov    DWORD PTR ds:0xc00234a8,0xc000bd53
c000bef8:	c7 05 b0 34 02 c0 54 bd 00 c0 	mov    DWORD PTR ds:0xc00234b0,0xc000bd54
c000bf02:	c7 05 bc 34 02 c0 5e be 00 c0 	mov    DWORD PTR ds:0xc00234bc,0xc000be5e
c000bf0c:	c3                   	ret    

c000bf0d <kernel_main>:
c000bf0d:	57                   	push   edi
c000bf0e:	bf f9 03 00 00       	mov    edi,0x3f9
c000bf13:	56                   	push   esi
c000bf14:	31 f6                	xor    esi,esi
c000bf16:	53                   	push   ebx
c000bf17:	83 ec 10             	sub    esp,0x10
c000bf1a:	e8 ed 08 00 00       	call   c000c80c <installVgaTextImplementation()>
c000bf1f:	e8 98 ff ff ff       	call   c000bebc <setupTextMode()>
c000bf24:	89 f0                	mov    eax,esi
c000bf26:	89 fa                	mov    edx,edi
c000bf28:	ee                   	out    dx,al
c000bf29:	bb fb 03 00 00       	mov    ebx,0x3fb
c000bf2e:	b0 80                	mov    al,0x80
c000bf30:	89 da                	mov    edx,ebx
c000bf32:	ee                   	out    dx,al
c000bf33:	b1 03                	mov    cl,0x3
c000bf35:	ba f8 03 00 00       	mov    edx,0x3f8
c000bf3a:	88 c8                	mov    al,cl
c000bf3c:	ee                   	out    dx,al
c000bf3d:	89 f0                	mov    eax,esi
c000bf3f:	89 fa                	mov    edx,edi
c000bf41:	ee                   	out    dx,al
c000bf42:	88 c8                	mov    al,cl
c000bf44:	89 da                	mov    edx,ebx
c000bf46:	ee                   	out    dx,al
c000bf47:	b0 c7                	mov    al,0xc7
c000bf49:	ba fa 03 00 00       	mov    edx,0x3fa
c000bf4e:	ee                   	out    dx,al
c000bf4f:	b0 0b                	mov    al,0xb
c000bf51:	ba fc 03 00 00       	mov    edx,0x3fc
c000bf56:	ee                   	out    dx,al
c000bf57:	a1 24 05 00 00       	mov    eax,ds:0x524
c000bf5c:	83 ec 0c             	sub    esp,0xc
c000bf5f:	05 ff 0f 00 00       	add    eax,0xfff
c000bf64:	25 00 f0 ff ff       	and    eax,0xfffff000
c000bf69:	50                   	push   eax
c000bf6a:	e8 59 03 00 00       	call   c000c2c8 <Phys::physicalMemorySetup(unsigned int)>
c000bf6f:	e8 9e 1f 00 00       	call   c000df12 <Virt::virtualMemorySetup()>
c000bf74:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000bf7a:	83 c4 10             	add    esp,0x10
c000bf7d:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000bf83:	75 0e                	jne    c000bf93 <kernel_main+0x86>
c000bf85:	89 d8                	mov    eax,ebx
c000bf87:	25 48 03 00 00       	and    eax,0x348
c000bf8c:	3d 00 03 00 00       	cmp    eax,0x300
c000bf91:	74 10                	je     c000bfa3 <kernel_main+0x96>
c000bf93:	83 ec 0c             	sub    esp,0xc
c000bf96:	68 5b 14 02 c0       	push   0xc002145b
c000bf9b:	e8 50 8a 00 00       	call   c00149f0 <Krnl::panic(char const*)>
c000bfa0:	83 c4 10             	add    esp,0x10
c000bfa3:	83 ec 0c             	sub    esp,0xc
c000bfa6:	89 1d 20 34 02 c0    	mov    DWORD PTR ds:0xc0023420,ebx
c000bfac:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000bfb0:	53                   	push   ebx
c000bfb1:	e8 06 21 00 00       	call   c000e0bc <VAS::VAS()>
c000bfb6:	89 1d 64 35 02 c0    	mov    DWORD PTR ds:0xc0023564,ebx
c000bfbc:	e8 5f 40 ff ff       	call   c0000020 <callGlobalConstructors>
c000bfc1:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000bfc8:	e8 9f 2c 00 00       	call   c000ec6c <operator new(unsigned long)>
c000bfcd:	89 04 24             	mov    DWORD PTR [esp],eax
c000bfd0:	89 c6                	mov    esi,eax
c000bfd2:	e8 cb ed ff ff       	call   c000ada2 <Computer::Computer()>
c000bfd7:	6a 00                	push   0x0
c000bfd9:	89 35 08 34 02 c0    	mov    DWORD PTR ds:0xc0023408,esi
c000bfdf:	6a 00                	push   0x0
c000bfe1:	6a 00                	push   0x0
c000bfe3:	56                   	push   esi
c000bfe4:	e8 7f f2 ff ff       	call   c000b268 <Computer::open(int, int, void*)>
c000bfe9:	83 c4 14             	add    esp,0x14
c000bfec:	53                   	push   ebx
c000bfed:	e8 fe 22 00 00       	call   c000e2f0 <VAS::~VAS()>
c000bff2:	c7 04 24 74 00 02 c0 	mov    DWORD PTR [esp],0xc0020074
c000bff9:	e8 f2 89 00 00       	call   c00149f0 <Krnl::panic(char const*)>
c000bffe:	83 c4 20             	add    esp,0x20
c000c001:	5b                   	pop    ebx
c000c002:	5e                   	pop    esi
c000c003:	5f                   	pop    edi
c000c004:	c3                   	ret    

c000c005 <Phys::allocateDMA(unsigned long)>:
c000c005:	55                   	push   ebp
c000c006:	31 d2                	xor    edx,edx
c000c008:	57                   	push   edi
c000c009:	31 ed                	xor    ebp,ebp
c000c00b:	56                   	push   esi
c000c00c:	31 c9                	xor    ecx,ecx
c000c00e:	53                   	push   ebx
c000c00f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c013:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000c019:	31 c0                	xor    eax,eax
c000c01b:	c1 ee 0c             	shr    esi,0xc
c000c01e:	eb 17                	jmp    c000c037 <Phys::allocateDMA(unsigned long)+0x32>
c000c020:	85 c9                	test   ecx,ecx
c000c022:	75 04                	jne    c000c028 <Phys::allocateDMA(unsigned long)+0x23>
c000c024:	89 d5                	mov    ebp,edx
c000c026:	89 d0                	mov    eax,edx
c000c028:	8d 59 01             	lea    ebx,[ecx+0x1]
c000c02b:	39 de                	cmp    esi,ebx
c000c02d:	74 20                	je     c000c04f <Phys::allocateDMA(unsigned long)+0x4a>
c000c02f:	42                   	inc    edx
c000c030:	89 d9                	mov    ecx,ebx
c000c032:	83 fa 2f             	cmp    edx,0x2f
c000c035:	7f 11                	jg     c000c048 <Phys::allocateDMA(unsigned long)+0x43>
c000c037:	80 ba 60 34 02 c0 00 	cmp    BYTE PTR [edx-0x3ffdcba0],0x0
c000c03e:	74 e0                	je     c000c020 <Phys::allocateDMA(unsigned long)+0x1b>
c000c040:	31 c9                	xor    ecx,ecx
c000c042:	42                   	inc    edx
c000c043:	83 fa 2f             	cmp    edx,0x2f
c000c046:	7e ef                	jle    c000c037 <Phys::allocateDMA(unsigned long)+0x32>
c000c048:	5b                   	pop    ebx
c000c049:	31 c0                	xor    eax,eax
c000c04b:	5e                   	pop    esi
c000c04c:	5f                   	pop    edi
c000c04d:	5d                   	pop    ebp
c000c04e:	c3                   	ret    
c000c04f:	8d 14 30             	lea    edx,[eax+esi*1]
c000c052:	89 d7                	mov    edi,edx
c000c054:	4f                   	dec    edi
c000c055:	79 03                	jns    c000c05a <Phys::allocateDMA(unsigned long)+0x55>
c000c057:	8d 7a 0e             	lea    edi,[edx+0xe]
c000c05a:	c1 ff 04             	sar    edi,0x4
c000c05d:	89 c2                	mov    edx,eax
c000c05f:	c1 fa 04             	sar    edx,0x4
c000c062:	39 fa                	cmp    edx,edi
c000c064:	75 2f                	jne    c000c095 <Phys::allocateDMA(unsigned long)+0x90>
c000c066:	85 db                	test   ebx,ebx
c000c068:	74 1a                	je     c000c084 <Phys::allocateDMA(unsigned long)+0x7f>
c000c06a:	be 60 34 02 c0       	mov    esi,0xc0023460
c000c06f:	8d 90 60 34 02 c0    	lea    edx,[eax-0x3ffdcba0]
c000c075:	f7 d6                	not    esi
c000c077:	29 c6                	sub    esi,eax
c000c079:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000c07c:	42                   	inc    edx
c000c07d:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000c080:	39 d9                	cmp    ecx,ebx
c000c082:	7f f5                	jg     c000c079 <Phys::allocateDMA(unsigned long)+0x74>
c000c084:	85 ff                	test   edi,edi
c000c086:	74 13                	je     c000c09b <Phys::allocateDMA(unsigned long)+0x96>
c000c088:	5b                   	pop    ebx
c000c089:	05 50 20 0c 00       	add    eax,0xc2050
c000c08e:	5e                   	pop    esi
c000c08f:	c1 e0 0c             	shl    eax,0xc
c000c092:	5f                   	pop    edi
c000c093:	5d                   	pop    ebp
c000c094:	c3                   	ret    
c000c095:	89 ea                	mov    edx,ebp
c000c097:	31 c9                	xor    ecx,ecx
c000c099:	eb a7                	jmp    c000c042 <Phys::allocateDMA(unsigned long)+0x3d>
c000c09b:	5b                   	pop    ebx
c000c09c:	c1 e0 0c             	shl    eax,0xc
c000c09f:	5e                   	pop    esi
c000c0a0:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000c0a5:	5f                   	pop    edi
c000c0a6:	5d                   	pop    ebp
c000c0a7:	c3                   	ret    

c000c0a8 <Phys::freeDMA(unsigned long, unsigned long)>:
c000c0a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c0ac:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c0b0:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000c0b6:	c1 e9 0c             	shr    ecx,0xc
c000c0b9:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000c0be:	76 25                	jbe    c000c0e5 <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000c0c0:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000c0c5:	c1 e8 0c             	shr    eax,0xc
c000c0c8:	8d 50 10             	lea    edx,[eax+0x10]
c000c0cb:	85 c9                	test   ecx,ecx
c000c0cd:	74 15                	je     c000c0e4 <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000c0cf:	8d 82 60 34 02 c0    	lea    eax,[edx-0x3ffdcba0]
c000c0d5:	8d 94 11 60 34 02 c0 	lea    edx,[ecx+edx*1-0x3ffdcba0]
c000c0dc:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000c0df:	40                   	inc    eax
c000c0e0:	39 d0                	cmp    eax,edx
c000c0e2:	75 f8                	jne    c000c0dc <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000c0e4:	c3                   	ret    
c000c0e5:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000c0eb:	c1 ea 0c             	shr    edx,0xc
c000c0ee:	eb db                	jmp    c000c0cb <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000c0f0 <Phys::setPageState(unsigned long, bool)>:
c000c0f0:	56                   	push   esi
c000c0f1:	ba 01 00 00 00       	mov    edx,0x1
c000c0f6:	53                   	push   ebx
c000c0f7:	8b 35 28 28 02 c0    	mov    esi,DWORD PTR ds:0xc0022828
c000c0fd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c101:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c105:	89 c8                	mov    eax,ecx
c000c107:	83 e1 07             	and    ecx,0x7
c000c10a:	c1 e8 03             	shr    eax,0x3
c000c10d:	d3 e3                	shl    ebx,cl
c000c10f:	01 c6                	add    esi,eax
c000c111:	d3 e2                	shl    edx,cl
c000c113:	f7 d2                	not    edx
c000c115:	20 16                	and    BYTE PTR [esi],dl
c000c117:	03 05 28 28 02 c0    	add    eax,DWORD PTR ds:0xc0022828
c000c11d:	08 18                	or     BYTE PTR [eax],bl
c000c11f:	5b                   	pop    ebx
c000c120:	5e                   	pop    esi
c000c121:	c3                   	ret    

c000c122 <Phys::getPageState(unsigned long)>:
c000c122:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000c126:	8b 15 28 28 02 c0    	mov    edx,DWORD PTR ds:0xc0022828
c000c12c:	89 c8                	mov    eax,ecx
c000c12e:	83 e1 07             	and    ecx,0x7
c000c131:	c1 e8 03             	shr    eax,0x3
c000c134:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000c138:	d3 f8                	sar    eax,cl
c000c13a:	83 e0 01             	and    eax,0x1
c000c13d:	c3                   	ret    

c000c13e <Phys::freePage(unsigned long)>:
c000c13e:	53                   	push   ebx
c000c13f:	83 ec 08             	sub    esp,0x8
c000c142:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c146:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000c14c:	76 57                	jbe    c000c1a5 <Phys::freePage(unsigned long)+0x67>
c000c14e:	c1 eb 0c             	shr    ebx,0xc
c000c151:	53                   	push   ebx
c000c152:	e8 cb ff ff ff       	call   c000c122 <Phys::getPageState(unsigned long)>
c000c157:	5a                   	pop    edx
c000c158:	84 c0                	test   al,al
c000c15a:	74 5b                	je     c000c1b7 <Phys::freePage(unsigned long)+0x79>
c000c15c:	a1 4c 34 02 c0       	mov    eax,ds:0xc002344c
c000c161:	48                   	dec    eax
c000c162:	a3 4c 34 02 c0       	mov    ds:0xc002344c,eax
c000c167:	8d 04 80             	lea    eax,[eax+eax*4]
c000c16a:	8d 04 80             	lea    eax,[eax+eax*4]
c000c16d:	c1 e0 02             	shl    eax,0x2
c000c170:	99                   	cdq    
c000c171:	f7 3d 50 34 02 c0    	idiv   DWORD PTR ds:0xc0023450
c000c177:	39 05 48 34 02 c0    	cmp    DWORD PTR ds:0xc0023448,eax
c000c17d:	75 13                	jne    c000c192 <Phys::freePage(unsigned long)+0x54>
c000c17f:	83 ec 08             	sub    esp,0x8
c000c182:	6a 00                	push   0x0
c000c184:	53                   	push   ebx
c000c185:	e8 66 ff ff ff       	call   c000c0f0 <Phys::setPageState(unsigned long, bool)>
c000c18a:	83 c4 10             	add    esp,0x10
c000c18d:	83 c4 08             	add    esp,0x8
c000c190:	5b                   	pop    ebx
c000c191:	c3                   	ret    
c000c192:	83 ec 0c             	sub    esp,0xc
c000c195:	a3 48 34 02 c0       	mov    ds:0xc0023448,eax
c000c19a:	50                   	push   eax
c000c19b:	e8 00 0a 00 00       	call   c000cba0 <VgaText::updateRAMUsageDisplay(int)>
c000c1a0:	83 c4 10             	add    esp,0x10
c000c1a3:	eb da                	jmp    c000c17f <Phys::freePage(unsigned long)+0x41>
c000c1a5:	68 00 10 00 00       	push   0x1000
c000c1aa:	53                   	push   ebx
c000c1ab:	e8 f8 fe ff ff       	call   c000c0a8 <Phys::freeDMA(unsigned long, unsigned long)>
c000c1b0:	59                   	pop    ecx
c000c1b1:	5b                   	pop    ebx
c000c1b2:	83 c4 08             	add    esp,0x8
c000c1b5:	5b                   	pop    ebx
c000c1b6:	c3                   	ret    
c000c1b7:	c7 44 24 10 8f 00 02 c0 	mov    DWORD PTR [esp+0x10],0xc002008f
c000c1bf:	83 c4 08             	add    esp,0x8
c000c1c2:	5b                   	pop    ebx
c000c1c3:	e9 28 88 00 00       	jmp    c00149f0 <Krnl::panic(char const*)>

c000c1c8 <Phys::allocatePage()>:
c000c1c8:	56                   	push   esi
c000c1c9:	53                   	push   ebx
c000c1ca:	51                   	push   ecx
c000c1cb:	8b 35 40 34 02 c0    	mov    esi,DWORD PTR ds:0xc0023440
c000c1d1:	89 f3                	mov    ebx,esi
c000c1d3:	eb 0a                	jmp    c000c1df <Phys::allocatePage()+0x17>
c000c1d5:	89 1d 40 34 02 c0    	mov    DWORD PTR ds:0xc0023440,ebx
c000c1db:	39 de                	cmp    esi,ebx
c000c1dd:	74 24                	je     c000c203 <Phys::allocatePage()+0x3b>
c000c1df:	53                   	push   ebx
c000c1e0:	e8 3d ff ff ff       	call   c000c122 <Phys::getPageState(unsigned long)>
c000c1e5:	5a                   	pop    edx
c000c1e6:	84 c0                	test   al,al
c000c1e8:	74 5a                	je     c000c244 <Phys::allocatePage()+0x7c>
c000c1ea:	43                   	inc    ebx
c000c1eb:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000c1f1:	75 e2                	jne    c000c1d5 <Phys::allocatePage()+0xd>
c000c1f3:	31 db                	xor    ebx,ebx
c000c1f5:	c7 05 40 34 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023440,0x0
c000c1ff:	39 de                	cmp    esi,ebx
c000c201:	75 dc                	jne    c000c1df <Phys::allocatePage()+0x17>
c000c203:	83 ec 0c             	sub    esp,0xc
c000c206:	68 a5 00 02 c0       	push   0xc00200a5
c000c20b:	e8 4b 2b 00 00       	call   c000ed5b <Dbg::kprintf(char const*, ...)>
c000c210:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c000c217:	e8 e9 fd ff ff       	call   c000c005 <Phys::allocateDMA(unsigned long)>
c000c21c:	83 c4 10             	add    esp,0x10
c000c21f:	85 c0                	test   eax,eax
c000c221:	75 56                	jne    c000c279 <Phys::allocatePage()+0xb1>
c000c223:	83 ec 0c             	sub    esp,0xc
c000c226:	68 b6 00 02 c0       	push   0xc00200b6
c000c22b:	e8 c0 87 00 00       	call   c00149f0 <Krnl::panic(char const*)>
c000c230:	83 c4 10             	add    esp,0x10
c000c233:	8b 1d 40 34 02 c0    	mov    ebx,DWORD PTR ds:0xc0023440
c000c239:	53                   	push   ebx
c000c23a:	e8 e3 fe ff ff       	call   c000c122 <Phys::getPageState(unsigned long)>
c000c23f:	5a                   	pop    edx
c000c240:	84 c0                	test   al,al
c000c242:	75 a6                	jne    c000c1ea <Phys::allocatePage()+0x22>
c000c244:	6a 01                	push   0x1
c000c246:	53                   	push   ebx
c000c247:	e8 a4 fe ff ff       	call   c000c0f0 <Phys::setPageState(unsigned long, bool)>
c000c24c:	a1 4c 34 02 c0       	mov    eax,ds:0xc002344c
c000c251:	59                   	pop    ecx
c000c252:	40                   	inc    eax
c000c253:	5b                   	pop    ebx
c000c254:	a3 4c 34 02 c0       	mov    ds:0xc002344c,eax
c000c259:	8d 04 80             	lea    eax,[eax+eax*4]
c000c25c:	8d 04 80             	lea    eax,[eax+eax*4]
c000c25f:	c1 e0 02             	shl    eax,0x2
c000c262:	99                   	cdq    
c000c263:	f7 3d 50 34 02 c0    	idiv   DWORD PTR ds:0xc0023450
c000c269:	39 05 48 34 02 c0    	cmp    DWORD PTR ds:0xc0023448,eax
c000c26f:	75 0c                	jne    c000c27d <Phys::allocatePage()+0xb5>
c000c271:	a1 40 34 02 c0       	mov    eax,ds:0xc0023440
c000c276:	c1 e0 0c             	shl    eax,0xc
c000c279:	5a                   	pop    edx
c000c27a:	5b                   	pop    ebx
c000c27b:	5e                   	pop    esi
c000c27c:	c3                   	ret    
c000c27d:	83 ec 0c             	sub    esp,0xc
c000c280:	a3 48 34 02 c0       	mov    ds:0xc0023448,eax
c000c285:	50                   	push   eax
c000c286:	e8 15 09 00 00       	call   c000cba0 <VgaText::updateRAMUsageDisplay(int)>
c000c28b:	83 c4 10             	add    esp,0x10
c000c28e:	eb e1                	jmp    c000c271 <Phys::allocatePage()+0xa9>

c000c290 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000c290:	56                   	push   esi
c000c291:	53                   	push   ebx
c000c292:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c296:	39 1d 44 34 02 c0    	cmp    DWORD PTR ds:0xc0023444,ebx
c000c29c:	73 06                	jae    c000c2a4 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000c29e:	89 1d 44 34 02 c0    	mov    DWORD PTR ds:0xc0023444,ebx
c000c2a4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c2a8:	c1 eb 0c             	shr    ebx,0xc
c000c2ab:	c1 e8 0c             	shr    eax,0xc
c000c2ae:	39 d8                	cmp    eax,ebx
c000c2b0:	73 13                	jae    c000c2c5 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000c2b2:	6a 00                	push   0x0
c000c2b4:	8d 70 01             	lea    esi,[eax+0x1]
c000c2b7:	50                   	push   eax
c000c2b8:	e8 33 fe ff ff       	call   c000c0f0 <Phys::setPageState(unsigned long, bool)>
c000c2bd:	5a                   	pop    edx
c000c2be:	89 f0                	mov    eax,esi
c000c2c0:	59                   	pop    ecx
c000c2c1:	39 f3                	cmp    ebx,esi
c000c2c3:	75 ed                	jne    c000c2b2 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000c2c5:	5b                   	pop    ebx
c000c2c6:	5e                   	pop    esi
c000c2c7:	c3                   	ret    

c000c2c8 <Phys::physicalMemorySetup(unsigned int)>:
c000c2c8:	55                   	push   ebp
c000c2c9:	57                   	push   edi
c000c2ca:	56                   	push   esi
c000c2cb:	53                   	push   ebx
c000c2cc:	31 db                	xor    ebx,ebx
c000c2ce:	83 ec 40             	sub    esp,0x40
c000c2d1:	6a 30                	push   0x30
c000c2d3:	6a 00                	push   0x0
c000c2d5:	68 60 34 02 c0       	push   0xc0023460
c000c2da:	e8 29 43 ff ff       	call   c0000608 <memset>
c000c2df:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000c2e3:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c2e8:	05 00 10 00 00       	add    eax,0x1000
c000c2ed:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000c2f1:	83 c4 10             	add    esp,0x10
c000c2f4:	83 ec 08             	sub    esp,0x8
c000c2f7:	6a 01                	push   0x1
c000c2f9:	53                   	push   ebx
c000c2fa:	43                   	inc    ebx
c000c2fb:	e8 f0 fd ff ff       	call   c000c0f0 <Phys::setPageState(unsigned long, bool)>
c000c300:	83 c4 10             	add    esp,0x10
c000c303:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000c309:	75 e9                	jne    c000c2f4 <Phys::physicalMemorySetup(unsigned int)+0x2c>
c000c30b:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c000c312:	66 85 c0             	test   ax,ax
c000c315:	0f 84 8e 01 00 00    	je     c000c4a9 <Phys::physicalMemorySetup(unsigned int)+0x1e1>
c000c31b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c31f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000c327:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c32b:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000c330:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c334:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000c33c:	eb 15                	jmp    c000c353 <Phys::physicalMemorySetup(unsigned int)+0x8b>
c000c33e:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000c342:	83 c3 18             	add    ebx,0x18
c000c345:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c349:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000c34d:	0f 84 66 01 00 00    	je     c000c4b9 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c000c353:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c356:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000c359:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000c35c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c360:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c364:	8b 33                	mov    esi,DWORD PTR [ebx]
c000c366:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000c369:	01 f0                	add    eax,esi
c000c36b:	55                   	push   ebp
c000c36c:	11 fa                	adc    edx,edi
c000c36e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c372:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000c376:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c37a:	56                   	push   esi
c000c37b:	68 f0 00 02 c0       	push   0xc00200f0
c000c380:	e8 d6 29 00 00       	call   c000ed5b <Dbg::kprintf(char const*, ...)>
c000c385:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c389:	83 c4 10             	add    esp,0x10
c000c38c:	09 f8                	or     eax,edi
c000c38e:	0f 85 25 01 00 00    	jne    c000c4b9 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c000c394:	4d                   	dec    ebp
c000c395:	75 a7                	jne    c000c33e <Phys::physicalMemorySetup(unsigned int)+0x76>
c000c397:	ba 00 00 08 00       	mov    edx,0x80000
c000c39c:	89 c1                	mov    ecx,eax
c000c39e:	39 f2                	cmp    edx,esi
c000c3a0:	19 f9                	sbb    ecx,edi
c000c3a2:	0f 82 a7 00 00 00    	jb     c000c44f <Phys::physicalMemorySetup(unsigned int)+0x187>
c000c3a8:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000c3ac:	89 c1                	mov    ecx,eax
c000c3ae:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000c3b2:	0f 83 97 00 00 00    	jae    c000c44f <Phys::physicalMemorySetup(unsigned int)+0x187>
c000c3b8:	ba 00 00 0a 00       	mov    edx,0xa0000
c000c3bd:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000c3c1:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000c3c5:	39 fa                	cmp    edx,edi
c000c3c7:	19 e8                	sbb    eax,ebp
c000c3c9:	0f 82 14 01 00 00    	jb     c000c4e3 <Phys::physicalMemorySetup(unsigned int)+0x21b>
c000c3cf:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000c3d3:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000c3d7:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c000c3dd:	ba ff 1f 00 00       	mov    edx,0x1fff
c000c3e2:	83 d5 ff             	adc    ebp,0xffffffff
c000c3e5:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000c3e9:	31 c0                	xor    eax,eax
c000c3eb:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000c3ef:	39 fa                	cmp    edx,edi
c000c3f1:	89 c1                	mov    ecx,eax
c000c3f3:	19 e9                	sbb    ecx,ebp
c000c3f5:	0f 83 43 ff ff ff    	jae    c000c33e <Phys::physicalMemorySetup(unsigned int)+0x76>
c000c3fb:	be 00 00 08 00       	mov    esi,0x80000
c000c400:	50                   	push   eax
c000c401:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000c405:	57                   	push   edi
c000c406:	56                   	push   esi
c000c407:	68 14 01 02 c0       	push   0xc0020114
c000c40c:	e8 4a 29 00 00       	call   c000ed5b <Dbg::kprintf(char const*, ...)>
c000c411:	5a                   	pop    edx
c000c412:	59                   	pop    ecx
c000c413:	57                   	push   edi
c000c414:	56                   	push   esi
c000c415:	e8 76 fe ff ff       	call   c000c290 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000c41a:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000c41e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c422:	83 c4 0c             	add    esp,0xc
c000c425:	0f ac d0 0c          	shrd   eax,edx,0xc
c000c429:	03 05 50 34 02 c0    	add    eax,DWORD PTR ds:0xc0023450
c000c42f:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000c436:	a3 50 34 02 c0       	mov    ds:0xc0023450,eax
c000c43b:	52                   	push   edx
c000c43c:	50                   	push   eax
c000c43d:	68 d2 00 02 c0       	push   0xc00200d2
c000c442:	e8 14 29 00 00       	call   c000ed5b <Dbg::kprintf(char const*, ...)>
c000c447:	83 c4 10             	add    esp,0x10
c000c44a:	e9 ef fe ff ff       	jmp    c000c33e <Phys::physicalMemorySetup(unsigned int)+0x76>
c000c44f:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000c453:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c457:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c45b:	39 ea                	cmp    edx,ebp
c000c45d:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000c461:	0f 82 d7 fe ff ff    	jb     c000c33e <Phys::physicalMemorySetup(unsigned int)+0x76>
c000c467:	ba ff 1f 00 00       	mov    edx,0x1fff
c000c46c:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000c470:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000c474:	0f 83 c4 fe ff ff    	jae    c000c33e <Phys::physicalMemorySetup(unsigned int)+0x76>
c000c47a:	39 ee                	cmp    esi,ebp
c000c47c:	89 f8                	mov    eax,edi
c000c47e:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000c482:	0f 83 78 ff ff ff    	jae    c000c400 <Phys::physicalMemorySetup(unsigned int)+0x138>
c000c488:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c48c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c490:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000c494:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000c498:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c000c49c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c4a0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c4a4:	e9 57 ff ff ff       	jmp    c000c400 <Phys::physicalMemorySetup(unsigned int)+0x138>
c000c4a9:	83 ec 0c             	sub    esp,0xc
c000c4ac:	68 c4 00 02 c0       	push   0xc00200c4
c000c4b1:	e8 3a 85 00 00       	call   c00149f0 <Krnl::panic(char const*)>
c000c4b6:	83 c4 10             	add    esp,0x10
c000c4b9:	bb 40 01 00 00       	mov    ebx,0x140
c000c4be:	83 ec 08             	sub    esp,0x8
c000c4c1:	6a 00                	push   0x0
c000c4c3:	53                   	push   ebx
c000c4c4:	43                   	inc    ebx
c000c4c5:	e8 26 fc ff ff       	call   c000c0f0 <Phys::setPageState(unsigned long, bool)>
c000c4ca:	ff 05 50 34 02 c0    	inc    DWORD PTR ds:0xc0023450
c000c4d0:	83 c4 10             	add    esp,0x10
c000c4d3:	81 fb 80 01 00 00    	cmp    ebx,0x180
c000c4d9:	75 e3                	jne    c000c4be <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c000c4db:	83 c4 3c             	add    esp,0x3c
c000c4de:	5b                   	pop    ebx
c000c4df:	5e                   	pop    esi
c000c4e0:	5f                   	pop    edi
c000c4e1:	5d                   	pop    ebp
c000c4e2:	c3                   	ret    
c000c4e3:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000c4eb:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000c4f3:	e9 d7 fe ff ff       	jmp    c000c3cf <Phys::physicalMemorySetup(unsigned int)+0x107>

c000c4f8 <Pipe::isAtty()>:
c000c4f8:	31 c0                	xor    eax,eax
c000c4fa:	c3                   	ret    
c000c4fb:	90                   	nop

c000c4fc <Pipe::~Pipe()>:
c000c4fc:	83 ec 0c             	sub    esp,0xc
c000c4ff:	ba 80 01 02 c0       	mov    edx,0xc0020180
c000c504:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c508:	89 10                	mov    DWORD PTR [eax],edx
c000c50a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c50e:	83 ec 0c             	sub    esp,0xc
c000c511:	50                   	push   eax
c000c512:	e8 5b 16 00 00       	call   c000db72 <UnixFile::~UnixFile()>
c000c517:	83 c4 10             	add    esp,0x10
c000c51a:	90                   	nop
c000c51b:	83 c4 0c             	add    esp,0xc
c000c51e:	c3                   	ret    
c000c51f:	90                   	nop

c000c520 <Pipe::~Pipe()>:
c000c520:	83 ec 0c             	sub    esp,0xc
c000c523:	83 ec 0c             	sub    esp,0xc
c000c526:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c52a:	e8 cd ff ff ff       	call   c000c4fc <Pipe::~Pipe()>
c000c52f:	83 c4 10             	add    esp,0x10
c000c532:	83 ec 08             	sub    esp,0x8
c000c535:	6a 20                	push   0x20
c000c537:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c53b:	e8 3b 27 00 00       	call   c000ec7b <operator delete(void*, unsigned long)>
c000c540:	83 c4 10             	add    esp,0x10
c000c543:	83 c4 0c             	add    esp,0xc
c000c546:	c3                   	ret    
c000c547:	90                   	nop

c000c548 <Pipe::read(unsigned long long, void*, int*)>:
c000c548:	55                   	push   ebp
c000c549:	57                   	push   edi
c000c54a:	56                   	push   esi
c000c54b:	53                   	push   ebx
c000c54c:	83 ec 1c             	sub    esp,0x1c
c000c54f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000c553:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000c557:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000c55b:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000c55e:	89 c8                	mov    eax,ecx
c000c560:	99                   	cdq    
c000c561:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000c565:	74 19                	je     c000c580 <Pipe::read(unsigned long long, void*, int*)+0x38>
c000c567:	39 f9                	cmp    ecx,edi
c000c569:	89 d1                	mov    ecx,edx
c000c56b:	19 f1                	sbb    ecx,esi
c000c56d:	73 11                	jae    c000c580 <Pipe::read(unsigned long long, void*, int*)+0x38>
c000c56f:	e8 a4 b4 00 00       	call   c0017a18 <lockScheduler()>
c000c574:	e8 d3 b7 00 00       	call   c0017d4c <schedule()>
c000c579:	e8 9c b4 00 00       	call   c0017a1a <unlockScheduler()>
c000c57e:	eb db                	jmp    c000c55b <Pipe::read(unsigned long long, void*, int*)+0x13>
c000c580:	39 f8                	cmp    eax,edi
c000c582:	89 d1                	mov    ecx,edx
c000c584:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000c588:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000c58c:	19 f1                	sbb    ecx,esi
c000c58e:	73 08                	jae    c000c598 <Pipe::read(unsigned long long, void*, int*)+0x50>
c000c590:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c594:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c598:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c59b:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000c59e:	29 c6                	sub    esi,eax
c000c5a0:	89 f1                	mov    ecx,esi
c000c5a2:	c1 f9 1f             	sar    ecx,0x1f
c000c5a5:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c000c5a9:	89 ca                	mov    edx,ecx
c000c5ab:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c5af:	19 d1                	sbb    ecx,edx
c000c5b1:	73 04                	jae    c000c5b7 <Pipe::read(unsigned long long, void*, int*)+0x6f>
c000c5b3:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000c5b7:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000c5bb:	89 fd                	mov    ebp,edi
c000c5bd:	29 f5                	sub    ebp,esi
c000c5bf:	85 f6                	test   esi,esi
c000c5c1:	74 12                	je     c000c5d5 <Pipe::read(unsigned long long, void*, int*)+0x8d>
c000c5c3:	52                   	push   edx
c000c5c4:	56                   	push   esi
c000c5c5:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
c000c5c8:	50                   	push   eax
c000c5c9:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000c5cd:	e8 00 40 ff ff       	call   c00005d2 <memcpy>
c000c5d2:	83 c4 10             	add    esp,0x10
c000c5d5:	85 ed                	test   ebp,ebp
c000c5d7:	74 12                	je     c000c5eb <Pipe::read(unsigned long long, void*, int*)+0xa3>
c000c5d9:	50                   	push   eax
c000c5da:	55                   	push   ebp
c000c5db:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000c5de:	03 74 24 48          	add    esi,DWORD PTR [esp+0x48]
c000c5e2:	56                   	push   esi
c000c5e3:	e8 ea 3f ff ff       	call   c00005d2 <memcpy>
c000c5e8:	83 c4 10             	add    esp,0x10
c000c5eb:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c000c5ee:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c5f1:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000c5f4:	99                   	cdq    
c000c5f5:	89 f7                	mov    edi,esi
c000c5f7:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000c5fb:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000c5ff:	c1 ff 1f             	sar    edi,0x1f
c000c602:	57                   	push   edi
c000c603:	56                   	push   esi
c000c604:	52                   	push   edx
c000c605:	50                   	push   eax
c000c606:	e8 b1 1e 01 00       	call   c001e4bc <__umoddi3>
c000c60b:	83 c4 10             	add    esp,0x10
c000c60e:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c611:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000c616:	75 10                	jne    c000c628 <Pipe::read(unsigned long long, void*, int*)+0xe0>
c000c618:	83 ec 0c             	sub    esp,0xc
c000c61b:	68 3d 01 02 c0       	push   0xc002013d
c000c620:	e8 cb 83 00 00       	call   c00149f0 <Krnl::panic(char const*)>
c000c625:	83 c4 10             	add    esp,0x10
c000c628:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c62c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c630:	89 10                	mov    DWORD PTR [eax],edx
c000c632:	83 c4 1c             	add    esp,0x1c
c000c635:	31 c0                	xor    eax,eax
c000c637:	5b                   	pop    ebx
c000c638:	5e                   	pop    esi
c000c639:	5f                   	pop    edi
c000c63a:	5d                   	pop    ebp
c000c63b:	c3                   	ret    

c000c63c <Pipe::write(unsigned long long, void*, int*)>:
c000c63c:	55                   	push   ebp
c000c63d:	57                   	push   edi
c000c63e:	56                   	push   esi
c000c63f:	53                   	push   ebx
c000c640:	83 ec 1c             	sub    esp,0x1c
c000c643:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c647:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000c64b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000c64f:	89 04 24             	mov    DWORD PTR [esp],eax
c000c652:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c000c655:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c000c658:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000c65c:	89 de                	mov    esi,ebx
c000c65e:	89 df                	mov    edi,ebx
c000c660:	c1 ff 1f             	sar    edi,0x1f
c000c663:	01 c6                	add    esi,eax
c000c665:	89 c8                	mov    eax,ecx
c000c667:	11 d7                	adc    edi,edx
c000c669:	99                   	cdq    
c000c66a:	39 f1                	cmp    ecx,esi
c000c66c:	89 d0                	mov    eax,edx
c000c66e:	19 f8                	sbb    eax,edi
c000c670:	b8 01 00 00 00       	mov    eax,0x1
c000c675:	0f 82 80 00 00 00    	jb     c000c6fb <Pipe::write(unsigned long long, void*, int*)+0xbf>
c000c67b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000c67e:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000c681:	01 d8                	add    eax,ebx
c000c683:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000c687:	99                   	cdq    
c000c688:	f7 f9                	idiv   ecx
c000c68a:	29 d1                	sub    ecx,edx
c000c68c:	89 d7                	mov    edi,edx
c000c68e:	89 c8                	mov    eax,ecx
c000c690:	99                   	cdq    
c000c691:	39 ce                	cmp    esi,ecx
c000c693:	19 d3                	sbb    ebx,edx
c000c695:	bb 00 00 00 00       	mov    ebx,0x0
c000c69a:	72 04                	jb     c000c6a0 <Pipe::write(unsigned long long, void*, int*)+0x64>
c000c69c:	89 f3                	mov    ebx,esi
c000c69e:	29 cb                	sub    ebx,ecx
c000c6a0:	89 f1                	mov    ecx,esi
c000c6a2:	29 d9                	sub    ecx,ebx
c000c6a4:	74 1a                	je     c000c6c0 <Pipe::write(unsigned long long, void*, int*)+0x84>
c000c6a6:	52                   	push   edx
c000c6a7:	51                   	push   ecx
c000c6a8:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000c6ac:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c6b0:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000c6b3:	57                   	push   edi
c000c6b4:	e8 19 3f ff ff       	call   c00005d2 <memcpy>
c000c6b9:	83 c4 10             	add    esp,0x10
c000c6bc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c6c0:	85 db                	test   ebx,ebx
c000c6c2:	74 12                	je     c000c6d6 <Pipe::write(unsigned long long, void*, int*)+0x9a>
c000c6c4:	50                   	push   eax
c000c6c5:	53                   	push   ebx
c000c6c6:	03 4c 24 44          	add    ecx,DWORD PTR [esp+0x44]
c000c6ca:	51                   	push   ecx
c000c6cb:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c000c6ce:	e8 ff 3e ff ff       	call   c00005d2 <memcpy>
c000c6d3:	83 c4 10             	add    esp,0x10
c000c6d6:	01 75 14             	add    DWORD PTR [ebp+0x14],esi
c000c6d9:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000c6de:	75 10                	jne    c000c6f0 <Pipe::write(unsigned long long, void*, int*)+0xb4>
c000c6e0:	83 ec 0c             	sub    esp,0xc
c000c6e3:	68 59 01 02 c0       	push   0xc0020159
c000c6e8:	e8 03 83 00 00       	call   c00149f0 <Krnl::panic(char const*)>
c000c6ed:	83 c4 10             	add    esp,0x10
c000c6f0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c6f4:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000c6f7:	89 38                	mov    DWORD PTR [eax],edi
c000c6f9:	31 c0                	xor    eax,eax
c000c6fb:	83 c4 1c             	add    esp,0x1c
c000c6fe:	5b                   	pop    ebx
c000c6ff:	5e                   	pop    esi
c000c700:	5f                   	pop    edi
c000c701:	5d                   	pop    ebp
c000c702:	c3                   	ret    
c000c703:	90                   	nop

c000c704 <Pipe::Pipe(int)>:
c000c704:	83 ec 0c             	sub    esp,0xc
c000c707:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c70b:	83 ec 08             	sub    esp,0x8
c000c70e:	6a 00                	push   0x0
c000c710:	50                   	push   eax
c000c711:	e8 ba 12 00 00       	call   c000d9d0 <UnixFile::UnixFile(int)>
c000c716:	83 c4 10             	add    esp,0x10
c000c719:	ba 80 01 02 c0       	mov    edx,0xc0020180
c000c71e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c722:	89 10                	mov    DWORD PTR [eax],edx
c000c724:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c728:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c72c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000c72f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c733:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000c73a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c73e:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000c745:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c749:	83 ec 0c             	sub    esp,0xc
c000c74c:	50                   	push   eax
c000c74d:	e8 cc f4 ff ff       	call   c000bc1e <malloc>
c000c752:	83 c4 10             	add    esp,0x10
c000c755:	89 c2                	mov    edx,eax
c000c757:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c75b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000c75e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c762:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000c766:	90                   	nop
c000c767:	83 c4 0c             	add    esp,0xc
c000c76a:	c3                   	ret    
c000c76b:	90                   	nop

c000c76c <VgaText::isAtty()>:
c000c76c:	b0 01                	mov    al,0x1
c000c76e:	c3                   	ret    
c000c76f:	90                   	nop

c000c770 <VgaText::~VgaText()>:
c000c770:	83 ec 0c             	sub    esp,0xc
c000c773:	ba 3c 02 02 c0       	mov    edx,0xc002023c
c000c778:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c77c:	89 10                	mov    DWORD PTR [eax],edx
c000c77e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c782:	83 ec 0c             	sub    esp,0xc
c000c785:	50                   	push   eax
c000c786:	e8 e7 13 00 00       	call   c000db72 <UnixFile::~UnixFile()>
c000c78b:	83 c4 10             	add    esp,0x10
c000c78e:	90                   	nop
c000c78f:	83 c4 0c             	add    esp,0xc
c000c792:	c3                   	ret    
c000c793:	90                   	nop

c000c794 <VgaText::~VgaText()>:
c000c794:	83 ec 0c             	sub    esp,0xc
c000c797:	83 ec 0c             	sub    esp,0xc
c000c79a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c79e:	e8 cd ff ff ff       	call   c000c770 <VgaText::~VgaText()>
c000c7a3:	83 c4 10             	add    esp,0x10
c000c7a6:	83 ec 08             	sub    esp,0x8
c000c7a9:	68 60 12 00 00       	push   0x1260
c000c7ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7b2:	e8 c4 24 00 00       	call   c000ec7b <operator delete(void*, unsigned long)>
c000c7b7:	83 c4 10             	add    esp,0x10
c000c7ba:	83 c4 0c             	add    esp,0xc
c000c7bd:	c3                   	ret    

c000c7be <VgaText::read(unsigned long long, void*, int*)>:
c000c7be:	83 ec 10             	sub    esp,0x10
c000c7c1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c7c5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c7c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7cd:	e8 ca 50 00 00       	call   c001189c <readKeyboard(VgaText*, char*, unsigned long)>
c000c7d2:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000c7d6:	89 02                	mov    DWORD PTR [edx],eax
c000c7d8:	31 c0                	xor    eax,eax
c000c7da:	83 c4 1c             	add    esp,0x1c
c000c7dd:	c3                   	ret    

c000c7de <setTerminalScrollLock(bool)>:
c000c7de:	c3                   	ret    

c000c7df <addToTerminalCycle(VgaText*)>:
c000c7df:	8b 15 c0 34 02 c0    	mov    edx,DWORD PTR ds:0xc00234c0
c000c7e5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c7e9:	85 d2                	test   edx,edx
c000c7eb:	75 0c                	jne    c000c7f9 <addToTerminalCycle(VgaText*)+0x1a>
c000c7ed:	89 80 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],eax
c000c7f3:	a3 c0 34 02 c0       	mov    ds:0xc00234c0,eax
c000c7f8:	c3                   	ret    
c000c7f9:	8b 8a c0 0f 00 00    	mov    ecx,DWORD PTR [edx+0xfc0]
c000c7ff:	89 82 c0 0f 00 00    	mov    DWORD PTR [edx+0xfc0],eax
c000c805:	89 88 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],ecx
c000c80b:	c3                   	ret    

c000c80c <installVgaTextImplementation()>:
c000c80c:	83 ec 10             	sub    esp,0x10
c000c80f:	6a 20                	push   0x20
c000c811:	6a 00                	push   0x0
c000c813:	68 a0 34 02 c0       	push   0xc00234a0
c000c818:	e8 eb 3d ff ff       	call   c0000608 <memset>
c000c81d:	83 c4 1c             	add    esp,0x1c
c000c820:	c3                   	ret    

c000c821 <scrollTerminalScrollLock(int)>:
c000c821:	c3                   	ret    

c000c822 <VgaText::load()>:
c000c822:	53                   	push   ebx
c000c823:	31 c0                	xor    eax,eax
c000c825:	83 ec 58             	sub    esp,0x58
c000c828:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000c82c:	89 e2                	mov    edx,esp
c000c82e:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c000c832:	40                   	inc    eax
c000c833:	83 f8 50             	cmp    eax,0x50
c000c836:	75 f6                	jne    c000c82e <VgaText::load()+0xc>
c000c838:	31 c0                	xor    eax,eax
c000c83a:	8a 8c 03 1e 10 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x101e]
c000c841:	84 c9                	test   cl,cl
c000c843:	74 06                	je     c000c84b <VgaText::load()+0x29>
c000c845:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000c848:	40                   	inc    eax
c000c849:	eb ef                	jmp    c000c83a <VgaText::load()+0x18>
c000c84b:	8b 83 fc 0f 00 00    	mov    eax,DWORD PTR [ebx+0xffc]
c000c851:	85 c0                	test   eax,eax
c000c853:	74 09                	je     c000c85e <VgaText::load()+0x3c>
c000c855:	51                   	push   ecx
c000c856:	51                   	push   ecx
c000c857:	52                   	push   edx
c000c858:	53                   	push   ebx
c000c859:	ff d0                	call   eax
c000c85b:	83 c4 10             	add    esp,0x10
c000c85e:	8b 83 00 10 00 00    	mov    eax,DWORD PTR [ebx+0x1000]
c000c864:	85 c0                	test   eax,eax
c000c866:	74 09                	je     c000c871 <VgaText::load()+0x4f>
c000c868:	83 ec 0c             	sub    esp,0xc
c000c86b:	53                   	push   ebx
c000c86c:	ff d0                	call   eax
c000c86e:	83 c4 10             	add    esp,0x10
c000c871:	83 c4 58             	add    esp,0x58
c000c874:	5b                   	pop    ebx
c000c875:	c3                   	ret    

c000c876 <VgaText::updateCursor()>:
c000c876:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c87a:	39 05 c4 34 02 c0    	cmp    DWORD PTR ds:0xc00234c4,eax
c000c880:	75 0c                	jne    c000c88e <VgaText::updateCursor()+0x18>
c000c882:	8b 80 0c 10 00 00    	mov    eax,DWORD PTR [eax+0x100c]
c000c888:	85 c0                	test   eax,eax
c000c88a:	74 02                	je     c000c88e <VgaText::updateCursor()+0x18>
c000c88c:	ff e0                	jmp    eax
c000c88e:	c3                   	ret    
c000c88f:	90                   	nop

c000c890 <VgaText::showCursor(bool)>:
c000c890:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c894:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c898:	88 90 bc 0f 00 00    	mov    BYTE PTR [eax+0xfbc],dl
c000c89e:	c3                   	ret    
c000c89f:	90                   	nop

c000c8a0 <VgaText::disableBlink(bool)>:
c000c8a0:	56                   	push   esi
c000c8a1:	53                   	push   ebx
c000c8a2:	51                   	push   ecx
c000c8a3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c8a7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c8ab:	39 1d c4 34 02 c0    	cmp    DWORD PTR ds:0xc00234c4,ebx
c000c8b1:	75 18                	jne    c000c8cb <VgaText::disableBlink(bool)+0x2b>
c000c8b3:	8b 83 14 10 00 00    	mov    eax,DWORD PTR [ebx+0x1014]
c000c8b9:	85 c0                	test   eax,eax
c000c8bb:	74 0e                	je     c000c8cb <VgaText::disableBlink(bool)+0x2b>
c000c8bd:	89 f1                	mov    ecx,esi
c000c8bf:	52                   	push   edx
c000c8c0:	52                   	push   edx
c000c8c1:	0f b6 d1             	movzx  edx,cl
c000c8c4:	52                   	push   edx
c000c8c5:	53                   	push   ebx
c000c8c6:	ff d0                	call   eax
c000c8c8:	83 c4 10             	add    esp,0x10
c000c8cb:	89 f0                	mov    eax,esi
c000c8cd:	83 f0 01             	xor    eax,0x1
c000c8d0:	88 83 bd 0f 00 00    	mov    BYTE PTR [ebx+0xfbd],al
c000c8d6:	58                   	pop    eax
c000c8d7:	5b                   	pop    ebx
c000c8d8:	5e                   	pop    esi
c000c8d9:	c3                   	ret    

c000c8da <VgaText::doANSI_SGR(int)>:
c000c8da:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c8de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c8e2:	85 d2                	test   edx,edx
c000c8e4:	75 14                	jne    c000c8fa <VgaText::doANSI_SGR(int)+0x20>
c000c8e6:	8b 90 c8 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc8]
c000c8ec:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000c8f2:	8b 90 c4 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc4]
c000c8f8:	eb 65                	jmp    c000c95f <VgaText::doANSI_SGR(int)+0x85>
c000c8fa:	83 fa 07             	cmp    edx,0x7
c000c8fd:	75 14                	jne    c000c913 <VgaText::doANSI_SGR(int)+0x39>
c000c8ff:	8b 90 d0 0f 00 00    	mov    edx,DWORD PTR [eax+0xfd0]
c000c905:	8b 88 cc 0f 00 00    	mov    ecx,DWORD PTR [eax+0xfcc]
c000c90b:	89 88 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],ecx
c000c911:	eb 4c                	jmp    c000c95f <VgaText::doANSI_SGR(int)+0x85>
c000c913:	83 fa 1b             	cmp    edx,0x1b
c000c916:	74 ce                	je     c000c8e6 <VgaText::doANSI_SGR(int)+0xc>
c000c918:	8d 4a e2             	lea    ecx,[edx-0x1e]
c000c91b:	83 f9 07             	cmp    ecx,0x7
c000c91e:	77 09                	ja     c000c929 <VgaText::doANSI_SGR(int)+0x4f>
c000c920:	8b 14 8d 60 28 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdd7a0]
c000c927:	eb 20                	jmp    c000c949 <VgaText::doANSI_SGR(int)+0x6f>
c000c929:	8d 4a d8             	lea    ecx,[edx-0x28]
c000c92c:	83 f9 07             	cmp    ecx,0x7
c000c92f:	77 09                	ja     c000c93a <VgaText::doANSI_SGR(int)+0x60>
c000c931:	8b 14 8d 60 28 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdd7a0]
c000c938:	eb 25                	jmp    c000c95f <VgaText::doANSI_SGR(int)+0x85>
c000c93a:	8d 4a a6             	lea    ecx,[edx-0x5a]
c000c93d:	83 f9 07             	cmp    ecx,0x7
c000c940:	77 0e                	ja     c000c950 <VgaText::doANSI_SGR(int)+0x76>
c000c942:	8b 14 95 18 27 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd8e8]
c000c949:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000c94f:	c3                   	ret    
c000c950:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000c953:	83 f9 07             	cmp    ecx,0x7
c000c956:	77 0d                	ja     c000c965 <VgaText::doANSI_SGR(int)+0x8b>
c000c958:	8b 14 95 f0 26 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd910]
c000c95f:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c000c965:	c3                   	ret    

c000c966 <VgaText::setDefaultBgColour(VgaColour)>:
c000c966:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c96a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c96e:	89 90 c4 0f 00 00    	mov    DWORD PTR [eax+0xfc4],edx
c000c974:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c000c97a:	c3                   	ret    
c000c97b:	90                   	nop

c000c97c <VgaText::setDefaultFgColour(VgaColour)>:
c000c97c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c980:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c984:	89 90 c8 0f 00 00    	mov    DWORD PTR [eax+0xfc8],edx
c000c98a:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000c990:	c3                   	ret    
c000c991:	90                   	nop

c000c992 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c000c992:	53                   	push   ebx
c000c993:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c997:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c99b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000c99f:	51                   	push   ecx
c000c9a0:	e8 c1 ff ff ff       	call   c000c966 <VgaText::setDefaultBgColour(VgaColour)>
c000c9a5:	58                   	pop    eax
c000c9a6:	5a                   	pop    edx
c000c9a7:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000c9ab:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000c9af:	5b                   	pop    ebx
c000c9b0:	eb ca                	jmp    c000c97c <VgaText::setDefaultFgColour(VgaColour)>

c000c9b2 <VgaText::combineColours(unsigned char, unsigned char)>:
c000c9b2:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000c9b6:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000c9bb:	83 e0 0f             	and    eax,0xf
c000c9be:	c1 e2 04             	shl    edx,0x4
c000c9c1:	09 d0                	or     eax,edx
c000c9c3:	c3                   	ret    

c000c9c4 <VgaText::scrollScreen()>:
c000c9c4:	57                   	push   edi
c000c9c5:	56                   	push   esi
c000c9c6:	be 01 00 00 00       	mov    esi,0x1
c000c9cb:	53                   	push   ebx
c000c9cc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c9d0:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c000c9d6:	31 ff                	xor    edi,edi
c000c9d8:	01 d9                	add    ecx,ebx
c000c9da:	8a 41 0c             	mov    al,BYTE PTR [ecx+0xc]
c000c9dd:	83 fe 17             	cmp    esi,0x17
c000c9e0:	88 81 6c ff ff ff    	mov    BYTE PTR [ecx-0x94],al
c000c9e6:	75 28                	jne    c000ca10 <VgaText::scrollScreen()+0x4c>
c000c9e8:	f7 c7 01 00 00 00    	test   edi,0x1
c000c9ee:	74 1c                	je     c000ca0c <VgaText::scrollScreen()+0x48>
c000c9f0:	0f b6 83 cc 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfcc]
c000c9f7:	50                   	push   eax
c000c9f8:	0f b6 83 d0 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfd0]
c000c9ff:	50                   	push   eax
c000ca00:	e8 ad ff ff ff       	call   c000c9b2 <VgaText::combineColours(unsigned char, unsigned char)>
c000ca05:	5a                   	pop    edx
c000ca06:	5a                   	pop    edx
c000ca07:	88 41 0c             	mov    BYTE PTR [ecx+0xc],al
c000ca0a:	eb 04                	jmp    c000ca10 <VgaText::scrollScreen()+0x4c>
c000ca0c:	c6 41 0c 20          	mov    BYTE PTR [ecx+0xc],0x20
c000ca10:	47                   	inc    edi
c000ca11:	41                   	inc    ecx
c000ca12:	81 ff a0 00 00 00    	cmp    edi,0xa0
c000ca18:	75 c0                	jne    c000c9da <VgaText::scrollScreen()+0x16>
c000ca1a:	46                   	inc    esi
c000ca1b:	83 fe 18             	cmp    esi,0x18
c000ca1e:	75 b0                	jne    c000c9d0 <VgaText::scrollScreen()+0xc>
c000ca20:	39 1d c4 34 02 c0    	cmp    DWORD PTR ds:0xc00234c4,ebx
c000ca26:	75 24                	jne    c000ca4c <VgaText::scrollScreen()+0x88>
c000ca28:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c000ca2f:	74 08                	je     c000ca39 <VgaText::scrollScreen()+0x75>
c000ca31:	ff 8b f8 0f 00 00    	dec    DWORD PTR [ebx+0xff8]
c000ca37:	eb 13                	jmp    c000ca4c <VgaText::scrollScreen()+0x88>
c000ca39:	8b 83 08 10 00 00    	mov    eax,DWORD PTR [ebx+0x1008]
c000ca3f:	85 c0                	test   eax,eax
c000ca41:	74 09                	je     c000ca4c <VgaText::scrollScreen()+0x88>
c000ca43:	83 ec 0c             	sub    esp,0xc
c000ca46:	53                   	push   ebx
c000ca47:	ff d0                	call   eax
c000ca49:	83 c4 10             	add    esp,0x10
c000ca4c:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ca50:	5b                   	pop    ebx
c000ca51:	5e                   	pop    esi
c000ca52:	5f                   	pop    edi
c000ca53:	e9 1e fe ff ff       	jmp    c000c876 <VgaText::updateCursor()>

c000ca58 <VgaText::combineCharAndColour(char, unsigned char)>:
c000ca58:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000ca5d:	c1 e0 08             	shl    eax,0x8
c000ca60:	89 c2                	mov    edx,eax
c000ca62:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000ca67:	09 d0                	or     eax,edx
c000ca69:	c3                   	ret    

c000ca6a <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c000ca6a:	53                   	push   ebx
c000ca6b:	83 ec 08             	sub    esp,0x8
c000ca6e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ca72:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000ca77:	50                   	push   eax
c000ca78:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000ca7d:	50                   	push   eax
c000ca7e:	e8 2f ff ff ff       	call   c000c9b2 <VgaText::combineColours(unsigned char, unsigned char)>
c000ca83:	5a                   	pop    edx
c000ca84:	0f b6 c0             	movzx  eax,al
c000ca87:	5b                   	pop    ebx
c000ca88:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c000ca8d:	50                   	push   eax
c000ca8e:	53                   	push   ebx
c000ca8f:	e8 c4 ff ff ff       	call   c000ca58 <VgaText::combineCharAndColour(char, unsigned char)>
c000ca94:	5a                   	pop    edx
c000ca95:	5a                   	pop    edx
c000ca96:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c000ca9c:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c000caa0:	0f b7 d2             	movzx  edx,dx
c000caa3:	66 89 44 51 0c       	mov    WORD PTR [ecx+edx*2+0xc],ax
c000caa8:	39 0d c4 34 02 c0    	cmp    DWORD PTR ds:0xc00234c4,ecx
c000caae:	75 14                	jne    c000cac4 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c000cab0:	8b 81 18 10 00 00    	mov    eax,DWORD PTR [ecx+0x1018]
c000cab6:	85 c0                	test   eax,eax
c000cab8:	74 0a                	je     c000cac4 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c000caba:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000cabe:	83 c4 08             	add    esp,0x8
c000cac1:	5b                   	pop    ebx
c000cac2:	ff e0                	jmp    eax
c000cac4:	83 c4 08             	add    esp,0x8
c000cac7:	5b                   	pop    ebx
c000cac8:	c3                   	ret    
c000cac9:	90                   	nop

c000caca <VgaText::getCursorX()>:
c000caca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cace:	8b 80 b0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb0]
c000cad4:	c3                   	ret    
c000cad5:	90                   	nop

c000cad6 <VgaText::getCursorY()>:
c000cad6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cada:	8b 80 b4 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb4]
c000cae0:	c3                   	ret    
c000cae1:	90                   	nop

c000cae2 <VgaText::setCursor(int, int)>:
c000cae2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cae6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000caea:	89 90 b0 0f 00 00    	mov    DWORD PTR [eax+0xfb0],edx
c000caf0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000caf4:	89 90 b4 0f 00 00    	mov    DWORD PTR [eax+0xfb4],edx
c000cafa:	e9 77 fd ff ff       	jmp    c000c876 <VgaText::updateCursor()>
c000caff:	90                   	nop

c000cb00 <VgaText::setCursorX(int)>:
c000cb00:	83 ec 10             	sub    esp,0x10
c000cb03:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000cb07:	ff b0 b4 0f 00 00    	push   DWORD PTR [eax+0xfb4]
c000cb0d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cb11:	50                   	push   eax
c000cb12:	e8 cb ff ff ff       	call   c000cae2 <VgaText::setCursor(int, int)>
c000cb17:	83 c4 1c             	add    esp,0x1c
c000cb1a:	c3                   	ret    
c000cb1b:	90                   	nop

c000cb1c <VgaText::setCursorY(int)>:
c000cb1c:	83 ec 10             	sub    esp,0x10
c000cb1f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000cb23:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cb27:	ff b0 b0 0f 00 00    	push   DWORD PTR [eax+0xfb0]
c000cb2d:	50                   	push   eax
c000cb2e:	e8 af ff ff ff       	call   c000cae2 <VgaText::setCursor(int, int)>
c000cb33:	83 c4 1c             	add    esp,0x1c
c000cb36:	c3                   	ret    
c000cb37:	90                   	nop

c000cb38 <VgaText::incrementCursor(bool)>:
c000cb38:	56                   	push   esi
c000cb39:	53                   	push   ebx
c000cb3a:	51                   	push   ecx
c000cb3b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cb3f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000cb43:	8b 83 b0 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb0]
c000cb49:	40                   	inc    eax
c000cb4a:	83 f8 50             	cmp    eax,0x50
c000cb4d:	74 08                	je     c000cb57 <VgaText::incrementCursor(bool)+0x1f>
c000cb4f:	89 83 b0 0f 00 00    	mov    DWORD PTR [ebx+0xfb0],eax
c000cb55:	eb 33                	jmp    c000cb8a <VgaText::incrementCursor(bool)+0x52>
c000cb57:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c000cb5d:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c000cb67:	8d 50 01             	lea    edx,[eax+0x1]
c000cb6a:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c000cb70:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c000cb76:	75 12                	jne    c000cb8a <VgaText::incrementCursor(bool)+0x52>
c000cb78:	83 ec 0c             	sub    esp,0xc
c000cb7b:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c000cb81:	53                   	push   ebx
c000cb82:	e8 3d fe ff ff       	call   c000c9c4 <VgaText::scrollScreen()>
c000cb87:	83 c4 10             	add    esp,0x10
c000cb8a:	89 f0                	mov    eax,esi
c000cb8c:	84 c0                	test   al,al
c000cb8e:	74 0c                	je     c000cb9c <VgaText::incrementCursor(bool)+0x64>
c000cb90:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000cb94:	5a                   	pop    edx
c000cb95:	5b                   	pop    ebx
c000cb96:	5e                   	pop    esi
c000cb97:	e9 da fc ff ff       	jmp    c000c876 <VgaText::updateCursor()>
c000cb9c:	58                   	pop    eax
c000cb9d:	5b                   	pop    ebx
c000cb9e:	5e                   	pop    esi
c000cb9f:	c3                   	ret    

c000cba0 <VgaText::updateRAMUsageDisplay(int)>:
c000cba0:	53                   	push   ebx
c000cba1:	bb 0a 00 00 00       	mov    ebx,0xa
c000cba6:	6a 0f                	push   0xf
c000cba8:	6a 00                	push   0x0
c000cbaa:	e8 03 fe ff ff       	call   c000c9b2 <VgaText::combineColours(unsigned char, unsigned char)>
c000cbaf:	5a                   	pop    edx
c000cbb0:	59                   	pop    ecx
c000cbb1:	0f b6 c8             	movzx  ecx,al
c000cbb4:	51                   	push   ecx
c000cbb5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000cbb9:	99                   	cdq    
c000cbba:	f7 fb                	idiv   ebx
c000cbbc:	89 d3                	mov    ebx,edx
c000cbbe:	83 c0 30             	add    eax,0x30
c000cbc1:	83 c3 30             	add    ebx,0x30
c000cbc4:	0f be c0             	movsx  eax,al
c000cbc7:	0f b6 db             	movzx  ebx,bl
c000cbca:	50                   	push   eax
c000cbcb:	e8 88 fe ff ff       	call   c000ca58 <VgaText::combineCharAndColour(char, unsigned char)>
c000cbd0:	5a                   	pop    edx
c000cbd1:	5a                   	pop    edx
c000cbd2:	66 a3 96 80 0b c2    	mov    ds:0xc20b8096,ax
c000cbd8:	51                   	push   ecx
c000cbd9:	53                   	push   ebx
c000cbda:	e8 79 fe ff ff       	call   c000ca58 <VgaText::combineCharAndColour(char, unsigned char)>
c000cbdf:	5b                   	pop    ebx
c000cbe0:	5a                   	pop    edx
c000cbe1:	66 a3 98 80 0b c2    	mov    ds:0xc20b8098,ax
c000cbe7:	51                   	push   ecx
c000cbe8:	6a 25                	push   0x25
c000cbea:	e8 69 fe ff ff       	call   c000ca58 <VgaText::combineCharAndColour(char, unsigned char)>
c000cbef:	59                   	pop    ecx
c000cbf0:	5b                   	pop    ebx
c000cbf1:	66 a3 9a 80 0b c2    	mov    ds:0xc20b809a,ax
c000cbf7:	5b                   	pop    ebx
c000cbf8:	c3                   	ret    
c000cbf9:	90                   	nop

c000cbfa <VgaText::updateDiskUsage()>:
c000cbfa:	55                   	push   ebp
c000cbfb:	bd 10 27 00 00       	mov    ebp,0x2710
c000cc00:	57                   	push   edi
c000cc01:	56                   	push   esi
c000cc02:	53                   	push   ebx
c000cc03:	6a 0f                	push   0xf
c000cc05:	6a 00                	push   0x0
c000cc07:	e8 a6 fd ff ff       	call   c000c9b2 <VgaText::combineColours(unsigned char, unsigned char)>
c000cc0c:	5a                   	pop    edx
c000cc0d:	0f b6 d8             	movzx  ebx,al
c000cc10:	59                   	pop    ecx
c000cc11:	a1 a4 51 02 c0       	mov    eax,ds:0xc00251a4
c000cc16:	53                   	push   ebx
c000cc17:	b9 0a 00 00 00       	mov    ecx,0xa
c000cc1c:	99                   	cdq    
c000cc1d:	f7 fd                	idiv   ebp
c000cc1f:	99                   	cdq    
c000cc20:	f7 f9                	idiv   ecx
c000cc22:	8d 42 30             	lea    eax,[edx+0x30]
c000cc25:	0f b6 c0             	movzx  eax,al
c000cc28:	50                   	push   eax
c000cc29:	e8 2a fe ff ff       	call   c000ca58 <VgaText::combineCharAndColour(char, unsigned char)>
c000cc2e:	5e                   	pop    esi
c000cc2f:	5f                   	pop    edi
c000cc30:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c000cc36:	bf e8 03 00 00       	mov    edi,0x3e8
c000cc3b:	53                   	push   ebx
c000cc3c:	a1 a4 51 02 c0       	mov    eax,ds:0xc00251a4
c000cc41:	99                   	cdq    
c000cc42:	f7 ff                	idiv   edi
c000cc44:	99                   	cdq    
c000cc45:	f7 f9                	idiv   ecx
c000cc47:	8d 42 30             	lea    eax,[edx+0x30]
c000cc4a:	0f b6 c0             	movzx  eax,al
c000cc4d:	50                   	push   eax
c000cc4e:	e8 05 fe ff ff       	call   c000ca58 <VgaText::combineCharAndColour(char, unsigned char)>
c000cc53:	5a                   	pop    edx
c000cc54:	5e                   	pop    esi
c000cc55:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c000cc5b:	be 64 00 00 00       	mov    esi,0x64
c000cc60:	53                   	push   ebx
c000cc61:	a1 a4 51 02 c0       	mov    eax,ds:0xc00251a4
c000cc66:	99                   	cdq    
c000cc67:	f7 fe                	idiv   esi
c000cc69:	99                   	cdq    
c000cc6a:	f7 f9                	idiv   ecx
c000cc6c:	8d 42 30             	lea    eax,[edx+0x30]
c000cc6f:	0f b6 c0             	movzx  eax,al
c000cc72:	50                   	push   eax
c000cc73:	e8 e0 fd ff ff       	call   c000ca58 <VgaText::combineCharAndColour(char, unsigned char)>
c000cc78:	5a                   	pop    edx
c000cc79:	5a                   	pop    edx
c000cc7a:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c000cc80:	53                   	push   ebx
c000cc81:	a1 a4 51 02 c0       	mov    eax,ds:0xc00251a4
c000cc86:	99                   	cdq    
c000cc87:	f7 f9                	idiv   ecx
c000cc89:	99                   	cdq    
c000cc8a:	f7 f9                	idiv   ecx
c000cc8c:	8d 42 30             	lea    eax,[edx+0x30]
c000cc8f:	0f b6 c0             	movzx  eax,al
c000cc92:	50                   	push   eax
c000cc93:	e8 c0 fd ff ff       	call   c000ca58 <VgaText::combineCharAndColour(char, unsigned char)>
c000cc98:	5a                   	pop    edx
c000cc99:	5a                   	pop    edx
c000cc9a:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c000cca0:	53                   	push   ebx
c000cca1:	a1 a4 51 02 c0       	mov    eax,ds:0xc00251a4
c000cca6:	99                   	cdq    
c000cca7:	f7 f9                	idiv   ecx
c000cca9:	8d 42 30             	lea    eax,[edx+0x30]
c000ccac:	0f b6 c0             	movzx  eax,al
c000ccaf:	50                   	push   eax
c000ccb0:	e8 a3 fd ff ff       	call   c000ca58 <VgaText::combineCharAndColour(char, unsigned char)>
c000ccb5:	5a                   	pop    edx
c000ccb6:	5a                   	pop    edx
c000ccb7:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c000ccbd:	53                   	push   ebx
c000ccbe:	a1 a0 51 02 c0       	mov    eax,ds:0xc00251a0
c000ccc3:	99                   	cdq    
c000ccc4:	f7 fd                	idiv   ebp
c000ccc6:	99                   	cdq    
c000ccc7:	f7 f9                	idiv   ecx
c000ccc9:	8d 42 30             	lea    eax,[edx+0x30]
c000cccc:	0f b6 c0             	movzx  eax,al
c000cccf:	50                   	push   eax
c000ccd0:	e8 83 fd ff ff       	call   c000ca58 <VgaText::combineCharAndColour(char, unsigned char)>
c000ccd5:	5d                   	pop    ebp
c000ccd6:	5a                   	pop    edx
c000ccd7:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c000ccdd:	53                   	push   ebx
c000ccde:	a1 a0 51 02 c0       	mov    eax,ds:0xc00251a0
c000cce3:	99                   	cdq    
c000cce4:	f7 ff                	idiv   edi
c000cce6:	99                   	cdq    
c000cce7:	f7 f9                	idiv   ecx
c000cce9:	8d 42 30             	lea    eax,[edx+0x30]
c000ccec:	0f b6 c0             	movzx  eax,al
c000ccef:	50                   	push   eax
c000ccf0:	e8 63 fd ff ff       	call   c000ca58 <VgaText::combineCharAndColour(char, unsigned char)>
c000ccf5:	5f                   	pop    edi
c000ccf6:	5d                   	pop    ebp
c000ccf7:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c000ccfd:	53                   	push   ebx
c000ccfe:	a1 a0 51 02 c0       	mov    eax,ds:0xc00251a0
c000cd03:	99                   	cdq    
c000cd04:	f7 fe                	idiv   esi
c000cd06:	99                   	cdq    
c000cd07:	f7 f9                	idiv   ecx
c000cd09:	8d 42 30             	lea    eax,[edx+0x30]
c000cd0c:	0f b6 c0             	movzx  eax,al
c000cd0f:	50                   	push   eax
c000cd10:	e8 43 fd ff ff       	call   c000ca58 <VgaText::combineCharAndColour(char, unsigned char)>
c000cd15:	5a                   	pop    edx
c000cd16:	5e                   	pop    esi
c000cd17:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c000cd1d:	53                   	push   ebx
c000cd1e:	a1 a0 51 02 c0       	mov    eax,ds:0xc00251a0
c000cd23:	99                   	cdq    
c000cd24:	f7 f9                	idiv   ecx
c000cd26:	99                   	cdq    
c000cd27:	f7 f9                	idiv   ecx
c000cd29:	8d 42 30             	lea    eax,[edx+0x30]
c000cd2c:	0f b6 c0             	movzx  eax,al
c000cd2f:	50                   	push   eax
c000cd30:	e8 23 fd ff ff       	call   c000ca58 <VgaText::combineCharAndColour(char, unsigned char)>
c000cd35:	5f                   	pop    edi
c000cd36:	5d                   	pop    ebp
c000cd37:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c000cd3d:	53                   	push   ebx
c000cd3e:	a1 a0 51 02 c0       	mov    eax,ds:0xc00251a0
c000cd43:	99                   	cdq    
c000cd44:	f7 f9                	idiv   ecx
c000cd46:	83 c2 30             	add    edx,0x30
c000cd49:	0f b6 d2             	movzx  edx,dl
c000cd4c:	52                   	push   edx
c000cd4d:	e8 06 fd ff ff       	call   c000ca58 <VgaText::combineCharAndColour(char, unsigned char)>
c000cd52:	5a                   	pop    edx
c000cd53:	59                   	pop    ecx
c000cd54:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c000cd5a:	5b                   	pop    ebx
c000cd5b:	5e                   	pop    esi
c000cd5c:	5f                   	pop    edi
c000cd5d:	5d                   	pop    ebp
c000cd5e:	c3                   	ret    
c000cd5f:	90                   	nop

c000cd60 <VgaText::updateTitle()>:
c000cd60:	53                   	push   ebx
c000cd61:	31 c0                	xor    eax,eax
c000cd63:	83 ec 58             	sub    esp,0x58
c000cd66:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000cd6a:	89 e1                	mov    ecx,esp
c000cd6c:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c000cd70:	40                   	inc    eax
c000cd71:	83 f8 50             	cmp    eax,0x50
c000cd74:	75 f6                	jne    c000cd6c <VgaText::updateTitle()+0xc>
c000cd76:	31 c0                	xor    eax,eax
c000cd78:	8a 9c 02 1e 10 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x101e]
c000cd7f:	84 db                	test   bl,bl
c000cd81:	74 06                	je     c000cd89 <VgaText::updateTitle()+0x29>
c000cd83:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c000cd86:	40                   	inc    eax
c000cd87:	eb ef                	jmp    c000cd78 <VgaText::updateTitle()+0x18>
c000cd89:	8b 82 fc 0f 00 00    	mov    eax,DWORD PTR [edx+0xffc]
c000cd8f:	85 c0                	test   eax,eax
c000cd91:	74 09                	je     c000cd9c <VgaText::updateTitle()+0x3c>
c000cd93:	53                   	push   ebx
c000cd94:	53                   	push   ebx
c000cd95:	51                   	push   ecx
c000cd96:	52                   	push   edx
c000cd97:	ff d0                	call   eax
c000cd99:	83 c4 10             	add    esp,0x10
c000cd9c:	e8 59 fe ff ff       	call   c000cbfa <VgaText::updateDiskUsage()>
c000cda1:	83 c4 58             	add    esp,0x58
c000cda4:	5b                   	pop    ebx
c000cda5:	c3                   	ret    

c000cda6 <VgaText::setTitleTextColour(VgaColour)>:
c000cda6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cdaa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cdae:	89 90 d8 0f 00 00    	mov    DWORD PTR [eax+0xfd8],edx
c000cdb4:	eb aa                	jmp    c000cd60 <VgaText::updateTitle()>

c000cdb6 <VgaText::setTitleColour(VgaColour)>:
c000cdb6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cdba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cdbe:	89 90 d4 0f 00 00    	mov    DWORD PTR [eax+0xfd4],edx
c000cdc4:	eb 9a                	jmp    c000cd60 <VgaText::updateTitle()>

c000cdc6 <VgaText::setTitle(char*)>:
c000cdc6:	53                   	push   ebx
c000cdc7:	83 ec 10             	sub    esp,0x10
c000cdca:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000cdce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cdd2:	8d 83 1e 10 00 00    	lea    eax,[ebx+0x101e]
c000cdd8:	50                   	push   eax
c000cdd9:	e8 c9 38 ff ff       	call   c00006a7 <strcpy>
c000cdde:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000cde2:	83 c4 18             	add    esp,0x18
c000cde5:	5b                   	pop    ebx
c000cde6:	e9 75 ff ff ff       	jmp    c000cd60 <VgaText::updateTitle()>
c000cdeb:	90                   	nop

c000cdec <VgaText::decrementCursor(bool)>:
c000cdec:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cdf0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000cdf4:	8b 82 b0 0f 00 00    	mov    eax,DWORD PTR [edx+0xfb0]
c000cdfa:	85 c0                	test   eax,eax
c000cdfc:	74 07                	je     c000ce05 <VgaText::decrementCursor(bool)+0x19>
c000cdfe:	48                   	dec    eax
c000cdff:	89 82 b0 0f 00 00    	mov    DWORD PTR [edx+0xfb0],eax
c000ce05:	84 c9                	test   cl,cl
c000ce07:	74 09                	je     c000ce12 <VgaText::decrementCursor(bool)+0x26>
c000ce09:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ce0d:	e9 64 fa ff ff       	jmp    c000c876 <VgaText::updateCursor()>
c000ce12:	c3                   	ret    
c000ce13:	90                   	nop

c000ce14 <VgaText::putchar(char, VgaColour, VgaColour)>:
c000ce14:	53                   	push   ebx
c000ce15:	83 ec 08             	sub    esp,0x8
c000ce18:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ce1c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ce20:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ce24:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000ce28:	3c 07                	cmp    al,0x7
c000ce2a:	75 2a                	jne    c000ce56 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c000ce2c:	a1 6c 35 02 c0       	mov    eax,ds:0xc002356c
c000ce31:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000ce39:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c000ce41:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c000ce49:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ce4d:	83 c4 08             	add    esp,0x8
c000ce50:	5b                   	pop    ebx
c000ce51:	e9 f0 2c 00 00       	jmp    c000fb46 <Buzzer::beep(int, int, bool)>
c000ce56:	3c 0d                	cmp    al,0xd
c000ce58:	75 0c                	jne    c000ce66 <VgaText::putchar(char, VgaColour, VgaColour)+0x52>
c000ce5a:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c000ce64:	eb 3b                	jmp    c000cea1 <VgaText::putchar(char, VgaColour, VgaColour)+0x8d>
c000ce66:	3c 0a                	cmp    al,0xa
c000ce68:	75 40                	jne    c000ceaa <VgaText::putchar(char, VgaColour, VgaColour)+0x96>
c000ce6a:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c000ce70:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c000ce7a:	8d 50 01             	lea    edx,[eax+0x1]
c000ce7d:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c000ce83:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c000ce89:	75 12                	jne    c000ce9d <VgaText::putchar(char, VgaColour, VgaColour)+0x89>
c000ce8b:	83 ec 0c             	sub    esp,0xc
c000ce8e:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c000ce94:	53                   	push   ebx
c000ce95:	e8 2a fb ff ff       	call   c000c9c4 <VgaText::scrollScreen()>
c000ce9a:	83 c4 10             	add    esp,0x10
c000ce9d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000cea1:	83 c4 08             	add    esp,0x8
c000cea4:	5b                   	pop    ebx
c000cea5:	e9 cc f9 ff ff       	jmp    c000c876 <VgaText::updateCursor()>
c000ceaa:	3c 08                	cmp    al,0x8
c000ceac:	75 31                	jne    c000cedf <VgaText::putchar(char, VgaColour, VgaColour)+0xcb>
c000ceae:	50                   	push   eax
c000ceaf:	50                   	push   eax
c000ceb0:	6a 01                	push   0x1
c000ceb2:	53                   	push   ebx
c000ceb3:	e8 34 ff ff ff       	call   c000cdec <VgaText::decrementCursor(bool)>
c000ceb8:	5a                   	pop    edx
c000ceb9:	59                   	pop    ecx
c000ceba:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c000cec0:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c000cec6:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c000cecc:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c000ced2:	6a 20                	push   0x20
c000ced4:	53                   	push   ebx
c000ced5:	e8 90 fb ff ff       	call   c000ca6a <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000ceda:	83 c4 28             	add    esp,0x28
c000cedd:	5b                   	pop    ebx
c000cede:	c3                   	ret    
c000cedf:	83 ec 08             	sub    esp,0x8
c000cee2:	0f be c0             	movsx  eax,al
c000cee5:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c000ceeb:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c000cef1:	51                   	push   ecx
c000cef2:	52                   	push   edx
c000cef3:	50                   	push   eax
c000cef4:	53                   	push   ebx
c000cef5:	e8 70 fb ff ff       	call   c000ca6a <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000cefa:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c000cefe:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c000cf06:	83 c4 28             	add    esp,0x28
c000cf09:	5b                   	pop    ebx
c000cf0a:	e9 29 fc ff ff       	jmp    c000cb38 <VgaText::incrementCursor(bool)>
c000cf0f:	90                   	nop

c000cf10 <VgaText::isShowingCursor()>:
c000cf10:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cf14:	8a 80 bc 0f 00 00    	mov    al,BYTE PTR [eax+0xfbc]
c000cf1a:	c3                   	ret    
c000cf1b:	90                   	nop

c000cf1c <VgaText::isBlinkDisabled()>:
c000cf1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cf20:	8a 80 bd 0f 00 00    	mov    al,BYTE PTR [eax+0xfbd]
c000cf26:	83 f0 01             	xor    eax,0x1
c000cf29:	c3                   	ret    

c000cf2a <VgaText::setCursorHeight(int)>:
c000cf2a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cf2e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cf32:	89 90 b8 0f 00 00    	mov    DWORD PTR [eax+0xfb8],edx
c000cf38:	0f b6 80 bc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfbc]
c000cf3f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf43:	e9 48 f9 ff ff       	jmp    c000c890 <VgaText::showCursor(bool)>

c000cf48 <VgaText::getCursorHeight()>:
c000cf48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cf4c:	8b 80 b8 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb8]
c000cf52:	c3                   	ret    

c000cf53 <setActiveTerminal(VgaText*)>:
c000cf53:	53                   	push   ebx
c000cf54:	83 ec 08             	sub    esp,0x8
c000cf57:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cf5b:	85 db                	test   ebx,ebx
c000cf5d:	75 11                	jne    c000cf70 <setActiveTerminal(VgaText*)+0x1d>
c000cf5f:	c7 44 24 10 94 01 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020194
c000cf67:	83 c4 08             	add    esp,0x8
c000cf6a:	5b                   	pop    ebx
c000cf6b:	e9 80 7a 00 00       	jmp    c00149f0 <Krnl::panic(char const*)>
c000cf70:	50                   	push   eax
c000cf71:	50                   	push   eax
c000cf72:	53                   	push   ebx
c000cf73:	68 a2 01 02 c0       	push   0xc00201a2
c000cf78:	e8 de 1d 00 00       	call   c000ed5b <Dbg::kprintf(char const*, ...)>
c000cf7d:	a1 c4 34 02 c0       	mov    eax,ds:0xc00234c4
c000cf82:	83 c4 10             	add    esp,0x10
c000cf85:	85 c0                	test   eax,eax
c000cf87:	74 0c                	je     c000cf95 <setActiveTerminal(VgaText*)+0x42>
c000cf89:	83 ec 0c             	sub    esp,0xc
c000cf8c:	50                   	push   eax
c000cf8d:	e8 e4 f8 ff ff       	call   c000c876 <VgaText::updateCursor()>
c000cf92:	83 c4 10             	add    esp,0x10
c000cf95:	89 1d c4 34 02 c0    	mov    DWORD PTR ds:0xc00234c4,ebx
c000cf9b:	51                   	push   ecx
c000cf9c:	51                   	push   ecx
c000cf9d:	53                   	push   ebx
c000cf9e:	68 ba 01 02 c0       	push   0xc00201ba
c000cfa3:	e8 b3 1d 00 00       	call   c000ed5b <Dbg::kprintf(char const*, ...)>
c000cfa8:	83 c4 0c             	add    esp,0xc
c000cfab:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c000cfb1:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c000cfb7:	53                   	push   ebx
c000cfb8:	e8 25 fb ff ff       	call   c000cae2 <VgaText::setCursor(int, int)>
c000cfbd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000cfc0:	e8 57 ff ff ff       	call   c000cf1c <VgaText::isBlinkDisabled()>
c000cfc5:	5a                   	pop    edx
c000cfc6:	0f b6 c0             	movzx  eax,al
c000cfc9:	59                   	pop    ecx
c000cfca:	50                   	push   eax
c000cfcb:	53                   	push   ebx
c000cfcc:	e8 cf f8 ff ff       	call   c000c8a0 <VgaText::disableBlink(bool)>
c000cfd1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000cfd4:	e8 6f ff ff ff       	call   c000cf48 <VgaText::getCursorHeight()>
c000cfd9:	5a                   	pop    edx
c000cfda:	59                   	pop    ecx
c000cfdb:	50                   	push   eax
c000cfdc:	53                   	push   ebx
c000cfdd:	e8 48 ff ff ff       	call   c000cf2a <VgaText::setCursorHeight(int)>
c000cfe2:	83 c4 10             	add    esp,0x10
c000cfe5:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c000cfec:	75 0a                	jne    c000cff8 <setActiveTerminal(VgaText*)+0xa5>
c000cfee:	c7 83 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff8],0x0
c000cff8:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000cffc:	83 c4 08             	add    esp,0x8
c000cfff:	5b                   	pop    ebx
c000d000:	e9 1d f8 ff ff       	jmp    c000c822 <VgaText::load()>

c000d005 <doTerminalCycle()>:
c000d005:	83 ec 18             	sub    esp,0x18
c000d008:	a1 c0 34 02 c0       	mov    eax,ds:0xc00234c0
c000d00d:	8b 80 c0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfc0]
c000d013:	50                   	push   eax
c000d014:	a3 c0 34 02 c0       	mov    ds:0xc00234c0,eax
c000d019:	e8 35 ff ff ff       	call   c000cf53 <setActiveTerminal(VgaText*)>
c000d01e:	83 c4 1c             	add    esp,0x1c
c000d021:	c3                   	ret    

c000d022 <VgaText::doUpdate()>:
c000d022:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d026:	8b 80 04 10 00 00    	mov    eax,DWORD PTR [eax+0x1004]
c000d02c:	85 c0                	test   eax,eax
c000d02e:	74 02                	je     c000d032 <VgaText::doUpdate()+0x10>
c000d030:	ff e0                	jmp    eax
c000d032:	c3                   	ret    
c000d033:	90                   	nop

c000d034 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c000d034:	55                   	push   ebp
c000d035:	57                   	push   edi
c000d036:	56                   	push   esi
c000d037:	53                   	push   ebx
c000d038:	83 ec 1c             	sub    esp,0x1c
c000d03b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000d03f:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000d044:	c6 85 1d 10 00 00 01 	mov    BYTE PTR [ebp+0x101d],0x1
c000d04b:	8d 7d 0c             	lea    edi,[ebp+0xc]
c000d04e:	50                   	push   eax
c000d04f:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000d054:	50                   	push   eax
c000d055:	e8 58 f9 ff ff       	call   c000c9b2 <VgaText::combineColours(unsigned char, unsigned char)>
c000d05a:	59                   	pop    ecx
c000d05b:	0f b6 c0             	movzx  eax,al
c000d05e:	5b                   	pop    ebx
c000d05f:	31 c9                	xor    ecx,ecx
c000d061:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c000d069:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000d06d:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c000d073:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d077:	0f b7 db             	movzx  ebx,bx
c000d07a:	01 db                	add    ebx,ebx
c000d07c:	01 fb                	add    ebx,edi
c000d07e:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000d081:	84 c0                	test   al,al
c000d083:	0f 84 38 01 00 00    	je     c000d1c1 <VgaText::puts(char const*, VgaColour, VgaColour)+0x18d>
c000d089:	3c 0d                	cmp    al,0xd
c000d08b:	75 0f                	jne    c000d09c <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c000d08d:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c000d097:	e9 1f 01 00 00       	jmp    c000d1bb <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c000d09c:	3c 0a                	cmp    al,0xa
c000d09e:	75 5b                	jne    c000d0fb <VgaText::puts(char const*, VgaColour, VgaColour)+0xc7>
c000d0a0:	8b 85 b4 0f 00 00    	mov    eax,DWORD PTR [ebp+0xfb4]
c000d0a6:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c000d0b0:	8d 48 01             	lea    ecx,[eax+0x1]
c000d0b3:	89 8d b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],ecx
c000d0b9:	3b 8d ac 0f 00 00    	cmp    ecx,DWORD PTR [ebp+0xfac]
c000d0bf:	75 12                	jne    c000d0d3 <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c000d0c1:	83 ec 0c             	sub    esp,0xc
c000d0c4:	89 85 b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],eax
c000d0ca:	55                   	push   ebp
c000d0cb:	e8 f4 f8 ff ff       	call   c000c9c4 <VgaText::scrollScreen()>
c000d0d0:	83 c4 10             	add    esp,0x10
c000d0d3:	83 ec 0c             	sub    esp,0xc
c000d0d6:	55                   	push   ebp
c000d0d7:	e8 9a f7 ff ff       	call   c000c876 <VgaText::updateCursor()>
c000d0dc:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c000d0e4:	83 c4 10             	add    esp,0x10
c000d0e7:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c000d0ed:	31 c9                	xor    ecx,ecx
c000d0ef:	0f b7 db             	movzx  ebx,bx
c000d0f2:	01 db                	add    ebx,ebx
c000d0f4:	01 fb                	add    ebx,edi
c000d0f6:	e9 c0 00 00 00       	jmp    c000d1bb <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c000d0fb:	3c 08                	cmp    al,0x8
c000d0fd:	75 4e                	jne    c000d14d <VgaText::puts(char const*, VgaColour, VgaColour)+0x119>
c000d0ff:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000d103:	53                   	push   ebx
c000d104:	53                   	push   ebx
c000d105:	6a 01                	push   0x1
c000d107:	55                   	push   ebp
c000d108:	e8 df fc ff ff       	call   c000cdec <VgaText::decrementCursor(bool)>
c000d10d:	58                   	pop    eax
c000d10e:	5a                   	pop    edx
c000d10f:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c000d115:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c000d11b:	ff b5 cc 0f 00 00    	push   DWORD PTR [ebp+0xfcc]
c000d121:	ff b5 d0 0f 00 00    	push   DWORD PTR [ebp+0xfd0]
c000d127:	6a 20                	push   0x20
c000d129:	55                   	push   ebp
c000d12a:	e8 3b f9 ff ff       	call   c000ca6a <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000d12f:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c000d137:	83 c4 20             	add    esp,0x20
c000d13a:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c000d140:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000d144:	0f b7 db             	movzx  ebx,bx
c000d147:	01 db                	add    ebx,ebx
c000d149:	01 fb                	add    ebx,edi
c000d14b:	eb 6e                	jmp    c000d1bb <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c000d14d:	51                   	push   ecx
c000d14e:	51                   	push   ecx
c000d14f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000d153:	50                   	push   eax
c000d154:	e8 ff f8 ff ff       	call   c000ca58 <VgaText::combineCharAndColour(char, unsigned char)>
c000d159:	83 c4 10             	add    esp,0x10
c000d15c:	66 89 03             	mov    WORD PTR [ebx],ax
c000d15f:	39 2d c4 34 02 c0    	cmp    DWORD PTR ds:0xc00234c4,ebp
c000d165:	75 2a                	jne    c000d191 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c000d167:	8b 85 18 10 00 00    	mov    eax,DWORD PTR [ebp+0x1018]
c000d16d:	85 c0                	test   eax,eax
c000d16f:	74 20                	je     c000d191 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c000d171:	52                   	push   edx
c000d172:	52                   	push   edx
c000d173:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c000d179:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c000d17f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d183:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d187:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c000d18a:	51                   	push   ecx
c000d18b:	55                   	push   ebp
c000d18c:	ff d0                	call   eax
c000d18e:	83 c4 20             	add    esp,0x20
c000d191:	83 c3 02             	add    ebx,0x2
c000d194:	50                   	push   eax
c000d195:	50                   	push   eax
c000d196:	6a 00                	push   0x0
c000d198:	55                   	push   ebp
c000d199:	e8 9a f9 ff ff       	call   c000cb38 <VgaText::incrementCursor(bool)>
c000d19e:	83 c4 10             	add    esp,0x10
c000d1a1:	83 bd b0 0f 00 00 00 	cmp    DWORD PTR [ebp+0xfb0],0x0
c000d1a8:	75 0f                	jne    c000d1b9 <VgaText::puts(char const*, VgaColour, VgaColour)+0x185>
c000d1aa:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c000d1b2:	0f b7 db             	movzx  ebx,bx
c000d1b5:	01 db                	add    ebx,ebx
c000d1b7:	01 fb                	add    ebx,edi
c000d1b9:	b1 01                	mov    cl,0x1
c000d1bb:	46                   	inc    esi
c000d1bc:	e9 bd fe ff ff       	jmp    c000d07e <VgaText::puts(char const*, VgaColour, VgaColour)+0x4a>
c000d1c1:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c000d1c5:	83 ec 0c             	sub    esp,0xc
c000d1c8:	55                   	push   ebp
c000d1c9:	e8 a8 f6 ff ff       	call   c000c876 <VgaText::updateCursor()>
c000d1ce:	83 c4 10             	add    esp,0x10
c000d1d1:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000d1d5:	84 c9                	test   cl,cl
c000d1d7:	74 0c                	je     c000d1e5 <VgaText::puts(char const*, VgaColour, VgaColour)+0x1b1>
c000d1d9:	83 ec 0c             	sub    esp,0xc
c000d1dc:	55                   	push   ebp
c000d1dd:	e8 40 fe ff ff       	call   c000d022 <VgaText::doUpdate()>
c000d1e2:	83 c4 10             	add    esp,0x10
c000d1e5:	c6 85 1d 10 00 00 00 	mov    BYTE PTR [ebp+0x101d],0x0
c000d1ec:	83 c4 1c             	add    esp,0x1c
c000d1ef:	5b                   	pop    ebx
c000d1f0:	5e                   	pop    esi
c000d1f1:	5f                   	pop    edi
c000d1f2:	5d                   	pop    ebp
c000d1f3:	c3                   	ret    

c000d1f4 <VgaText::clearScreen()>:
c000d1f4:	57                   	push   edi
c000d1f5:	56                   	push   esi
c000d1f6:	31 f6                	xor    esi,esi
c000d1f8:	53                   	push   ebx
c000d1f9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d1fd:	52                   	push   edx
c000d1fe:	6a 00                	push   0x0
c000d200:	6a 00                	push   0x0
c000d202:	53                   	push   ebx
c000d203:	e8 da f8 ff ff       	call   c000cae2 <VgaText::setCursor(int, int)>
c000d208:	c6 83 1d 10 00 00 01 	mov    BYTE PTR [ebx+0x101d],0x1
c000d20f:	83 c4 10             	add    esp,0x10
c000d212:	39 b3 ac 0f 00 00    	cmp    DWORD PTR [ebx+0xfac],esi
c000d218:	7e 26                	jle    c000d240 <VgaText::clearScreen()+0x4c>
c000d21a:	31 ff                	xor    edi,edi
c000d21c:	50                   	push   eax
c000d21d:	50                   	push   eax
c000d21e:	56                   	push   esi
c000d21f:	57                   	push   edi
c000d220:	47                   	inc    edi
c000d221:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c000d227:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c000d22d:	6a 20                	push   0x20
c000d22f:	53                   	push   ebx
c000d230:	e8 35 f8 ff ff       	call   c000ca6a <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000d235:	83 c4 20             	add    esp,0x20
c000d238:	83 ff 50             	cmp    edi,0x50
c000d23b:	75 df                	jne    c000d21c <VgaText::clearScreen()+0x28>
c000d23d:	46                   	inc    esi
c000d23e:	eb d2                	jmp    c000d212 <VgaText::clearScreen()+0x1e>
c000d240:	83 ec 0c             	sub    esp,0xc
c000d243:	53                   	push   ebx
c000d244:	e8 d9 fd ff ff       	call   c000d022 <VgaText::doUpdate()>
c000d249:	c6 83 1d 10 00 00 00 	mov    BYTE PTR [ebx+0x101d],0x0
c000d250:	83 c4 10             	add    esp,0x10
c000d253:	5b                   	pop    ebx
c000d254:	5e                   	pop    esi
c000d255:	5f                   	pop    edi
c000d256:	c3                   	ret    
c000d257:	90                   	nop

c000d258 <VgaText::putchar(char)>:
c000d258:	56                   	push   esi
c000d259:	53                   	push   ebx
c000d25a:	83 ec 14             	sub    esp,0x14
c000d25d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d261:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000d265:	3c 5b                	cmp    al,0x5b
c000d267:	75 21                	jne    c000d28a <VgaText::putchar(char)+0x32>
c000d269:	80 bb dc 0f 00 00 00 	cmp    BYTE PTR [ebx+0xfdc],0x0
c000d270:	74 28                	je     c000d29a <VgaText::putchar(char)+0x42>
c000d272:	66 c7 83 dc 0f 00 00 00 01 	mov    WORD PTR [ebx+0xfdc],0x100
c000d27b:	c7 83 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff0],0x0
c000d285:	e9 e2 00 00 00       	jmp    c000d36c <VgaText::putchar(char)+0x114>
c000d28a:	3c 1b                	cmp    al,0x1b
c000d28c:	75 0c                	jne    c000d29a <VgaText::putchar(char)+0x42>
c000d28e:	c6 83 dc 0f 00 00 01 	mov    BYTE PTR [ebx+0xfdc],0x1
c000d295:	e9 d2 00 00 00       	jmp    c000d36c <VgaText::putchar(char)+0x114>
c000d29a:	8a 8b dd 0f 00 00    	mov    cl,BYTE PTR [ebx+0xfdd]
c000d2a0:	84 c9                	test   cl,cl
c000d2a2:	0f 84 ab 00 00 00    	je     c000d353 <VgaText::putchar(char)+0xfb>
c000d2a8:	8d 50 c0             	lea    edx,[eax-0x40]
c000d2ab:	80 fa 3e             	cmp    dl,0x3e
c000d2ae:	0f 87 82 00 00 00    	ja     c000d336 <VgaText::putchar(char)+0xde>
c000d2b4:	3c 6d                	cmp    al,0x6d
c000d2b6:	75 4d                	jne    c000d305 <VgaText::putchar(char)+0xad>
c000d2b8:	31 f6                	xor    esi,esi
c000d2ba:	31 d2                	xor    edx,edx
c000d2bc:	31 c0                	xor    eax,eax
c000d2be:	39 b3 f0 0f 00 00    	cmp    DWORD PTR [ebx+0xff0],esi
c000d2c4:	7e 30                	jle    c000d2f6 <VgaText::putchar(char)+0x9e>
c000d2c6:	0f be 94 33 de 0f 00 00 	movsx  edx,BYTE PTR [ebx+esi*1+0xfde]
c000d2ce:	80 fa 3b             	cmp    dl,0x3b
c000d2d1:	75 17                	jne    c000d2ea <VgaText::putchar(char)+0x92>
c000d2d3:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000d2d7:	50                   	push   eax
c000d2d8:	53                   	push   ebx
c000d2d9:	e8 fc f5 ff ff       	call   c000c8da <VgaText::doANSI_SGR(int)>
c000d2de:	59                   	pop    ecx
c000d2df:	31 d2                	xor    edx,edx
c000d2e1:	58                   	pop    eax
c000d2e2:	31 c0                	xor    eax,eax
c000d2e4:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000d2e8:	eb 09                	jmp    c000d2f3 <VgaText::putchar(char)+0x9b>
c000d2ea:	6b c0 0a             	imul   eax,eax,0xa
c000d2ed:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c000d2f1:	88 ca                	mov    dl,cl
c000d2f3:	46                   	inc    esi
c000d2f4:	eb c8                	jmp    c000d2be <VgaText::putchar(char)+0x66>
c000d2f6:	84 d2                	test   dl,dl
c000d2f8:	74 31                	je     c000d32b <VgaText::putchar(char)+0xd3>
c000d2fa:	50                   	push   eax
c000d2fb:	53                   	push   ebx
c000d2fc:	e8 d9 f5 ff ff       	call   c000c8da <VgaText::doANSI_SGR(int)>
c000d301:	58                   	pop    eax
c000d302:	5a                   	pop    edx
c000d303:	eb 26                	jmp    c000d32b <VgaText::putchar(char)+0xd3>
c000d305:	3c 4a                	cmp    al,0x4a
c000d307:	75 22                	jne    c000d32b <VgaText::putchar(char)+0xd3>
c000d309:	80 bb de 0f 00 00 32 	cmp    BYTE PTR [ebx+0xfde],0x32
c000d310:	75 19                	jne    c000d32b <VgaText::putchar(char)+0xd3>
c000d312:	83 ec 0c             	sub    esp,0xc
c000d315:	53                   	push   ebx
c000d316:	e8 d9 fe ff ff       	call   c000d1f4 <VgaText::clearScreen()>
c000d31b:	83 c4 0c             	add    esp,0xc
c000d31e:	6a 00                	push   0x0
c000d320:	6a 00                	push   0x0
c000d322:	53                   	push   ebx
c000d323:	e8 ba f7 ff ff       	call   c000cae2 <VgaText::setCursor(int, int)>
c000d328:	83 c4 10             	add    esp,0x10
c000d32b:	66 c7 83 dc 0f 00 00 00 00 	mov    WORD PTR [ebx+0xfdc],0x0
c000d334:	eb 36                	jmp    c000d36c <VgaText::putchar(char)+0x114>
c000d336:	8b 93 f0 0f 00 00    	mov    edx,DWORD PTR [ebx+0xff0]
c000d33c:	83 fa 0e             	cmp    edx,0xe
c000d33f:	7f 2b                	jg     c000d36c <VgaText::putchar(char)+0x114>
c000d341:	8d 4a 01             	lea    ecx,[edx+0x1]
c000d344:	89 8b f0 0f 00 00    	mov    DWORD PTR [ebx+0xff0],ecx
c000d34a:	88 84 13 de 0f 00 00 	mov    BYTE PTR [ebx+edx*1+0xfde],al
c000d351:	eb 19                	jmp    c000d36c <VgaText::putchar(char)+0x114>
c000d353:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c000d359:	0f be c0             	movsx  eax,al
c000d35c:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c000d362:	50                   	push   eax
c000d363:	53                   	push   ebx
c000d364:	e8 ab fa ff ff       	call   c000ce14 <VgaText::putchar(char, VgaColour, VgaColour)>
c000d369:	83 c4 10             	add    esp,0x10
c000d36c:	83 c4 14             	add    esp,0x14
c000d36f:	5b                   	pop    ebx
c000d370:	5e                   	pop    esi
c000d371:	c3                   	ret    

c000d372 <VgaText::puts(char const*)>:
c000d372:	53                   	push   ebx
c000d373:	83 ec 08             	sub    esp,0x8
c000d376:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d37a:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000d37d:	84 c0                	test   al,al
c000d37f:	74 12                	je     c000d393 <VgaText::puts(char const*)+0x21>
c000d381:	43                   	inc    ebx
c000d382:	51                   	push   ecx
c000d383:	51                   	push   ecx
c000d384:	50                   	push   eax
c000d385:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d389:	e8 ca fe ff ff       	call   c000d258 <VgaText::putchar(char)>
c000d38e:	83 c4 10             	add    esp,0x10
c000d391:	eb e7                	jmp    c000d37a <VgaText::puts(char const*)+0x8>
c000d393:	83 c4 08             	add    esp,0x8
c000d396:	5b                   	pop    ebx
c000d397:	c3                   	ret    

c000d398 <VgaText::putx(unsigned int)>:
c000d398:	57                   	push   edi
c000d399:	b9 11 00 00 00       	mov    ecx,0x11
c000d39e:	56                   	push   esi
c000d39f:	be d6 01 02 c0       	mov    esi,0xc00201d6
c000d3a4:	53                   	push   ebx
c000d3a5:	83 ec 20             	sub    esp,0x20
c000d3a8:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000d3ac:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c000d3b0:	fc                   	cld    
c000d3b1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d3b3:	be 08 00 00 00       	mov    esi,0x8
c000d3b8:	50                   	push   eax
c000d3b9:	50                   	push   eax
c000d3ba:	89 d8                	mov    eax,ebx
c000d3bc:	c1 e3 04             	shl    ebx,0x4
c000d3bf:	c1 e8 1c             	shr    eax,0x1c
c000d3c2:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c000d3c7:	50                   	push   eax
c000d3c8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d3cc:	e8 87 fe ff ff       	call   c000d258 <VgaText::putchar(char)>
c000d3d1:	83 c4 10             	add    esp,0x10
c000d3d4:	4e                   	dec    esi
c000d3d5:	75 e1                	jne    c000d3b8 <VgaText::putx(unsigned int)+0x20>
c000d3d7:	83 c4 20             	add    esp,0x20
c000d3da:	5b                   	pop    ebx
c000d3db:	5e                   	pop    esi
c000d3dc:	5f                   	pop    edi
c000d3dd:	c3                   	ret    

c000d3de <VgaText::VgaText(char const*)>:
c000d3de:	57                   	push   edi
c000d3df:	56                   	push   esi
c000d3e0:	53                   	push   ebx
c000d3e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d3e5:	83 ec 08             	sub    esp,0x8
c000d3e8:	6a 00                	push   0x0
c000d3ea:	50                   	push   eax
c000d3eb:	e8 e0 05 00 00       	call   c000d9d0 <UnixFile::UnixFile(int)>
c000d3f0:	83 c4 10             	add    esp,0x10
c000d3f3:	ba 3c 02 02 c0       	mov    edx,0xc002023c
c000d3f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d3fc:	89 10                	mov    DWORD PTR [eax],edx
c000d3fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d402:	c7 80 d4 0f 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xfd4],0x1
c000d40c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d410:	c7 80 d8 0f 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0xfd8],0xf
c000d41a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d41e:	c6 80 dc 0f 00 00 00 	mov    BYTE PTR [eax+0xfdc],0x0
c000d425:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d429:	c6 80 dd 0f 00 00 00 	mov    BYTE PTR [eax+0xfdd],0x0
c000d430:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d434:	c7 80 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff0],0x0
c000d43e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d442:	c7 80 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff8],0x0
c000d44c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d450:	c6 80 1c 10 00 00 00 	mov    BYTE PTR [eax+0x101c],0x0
c000d457:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d45b:	c6 80 1d 10 00 00 00 	mov    BYTE PTR [eax+0x101d],0x0
c000d462:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d466:	8d 90 fc 0f 00 00    	lea    edx,[eax+0xffc]
c000d46c:	bb a0 34 02 c0       	mov    ebx,0xc00234a0
c000d471:	b8 08 00 00 00       	mov    eax,0x8
c000d476:	fc                   	cld    
c000d477:	89 d7                	mov    edi,edx
c000d479:	89 de                	mov    esi,ebx
c000d47b:	89 c1                	mov    ecx,eax
c000d47d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000d47f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d483:	05 1e 10 00 00       	add    eax,0x101e
c000d488:	83 ec 08             	sub    esp,0x8
c000d48b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d48f:	50                   	push   eax
c000d490:	e8 12 32 ff ff       	call   c00006a7 <strcpy>
c000d495:	83 c4 10             	add    esp,0x10
c000d498:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d49c:	c7 80 ac 0f 00 00 18 00 00 00 	mov    DWORD PTR [eax+0xfac],0x18
c000d4a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d4aa:	83 c0 0c             	add    eax,0xc
c000d4ad:	83 ec 04             	sub    esp,0x4
c000d4b0:	68 00 0f 00 00       	push   0xf00
c000d4b5:	6a 00                	push   0x0
c000d4b7:	50                   	push   eax
c000d4b8:	e8 4b 31 ff ff       	call   c0000608 <memset>
c000d4bd:	83 c4 10             	add    esp,0x10
c000d4c0:	83 ec 04             	sub    esp,0x4
c000d4c3:	6a 00                	push   0x0
c000d4c5:	6a 07                	push   0x7
c000d4c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4cb:	e8 c2 f4 ff ff       	call   c000c992 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c000d4d0:	83 c4 10             	add    esp,0x10
c000d4d3:	83 ec 08             	sub    esp,0x8
c000d4d6:	6a 02                	push   0x2
c000d4d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4dc:	e8 49 fa ff ff       	call   c000cf2a <VgaText::setCursorHeight(int)>
c000d4e1:	83 c4 10             	add    esp,0x10
c000d4e4:	83 ec 04             	sub    esp,0x4
c000d4e7:	6a 00                	push   0x0
c000d4e9:	6a 00                	push   0x0
c000d4eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4ef:	e8 ee f5 ff ff       	call   c000cae2 <VgaText::setCursor(int, int)>
c000d4f4:	83 c4 10             	add    esp,0x10
c000d4f7:	83 ec 08             	sub    esp,0x8
c000d4fa:	6a 01                	push   0x1
c000d4fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d500:	e8 8b f3 ff ff       	call   c000c890 <VgaText::showCursor(bool)>
c000d505:	83 c4 10             	add    esp,0x10
c000d508:	83 ec 08             	sub    esp,0x8
c000d50b:	6a 01                	push   0x1
c000d50d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d511:	e8 8a f3 ff ff       	call   c000c8a0 <VgaText::disableBlink(bool)>
c000d516:	83 c4 10             	add    esp,0x10
c000d519:	83 ec 0c             	sub    esp,0xc
c000d51c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d520:	e8 cf fc ff ff       	call   c000d1f4 <VgaText::clearScreen()>
c000d525:	83 c4 10             	add    esp,0x10
c000d528:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d52c:	c6 80 f4 0f 00 00 00 	mov    BYTE PTR [eax+0xff4],0x0
c000d533:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d537:	05 9e 10 00 00       	add    eax,0x109e
c000d53c:	83 ec 04             	sub    esp,0x4
c000d53f:	68 96 00 00 00       	push   0x96
c000d544:	6a 00                	push   0x0
c000d546:	50                   	push   eax
c000d547:	e8 bc 30 ff ff       	call   c0000608 <memset>
c000d54c:	83 c4 10             	add    esp,0x10
c000d54f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d553:	05 34 11 00 00       	add    eax,0x1134
c000d558:	83 ec 04             	sub    esp,0x4
c000d55b:	68 2c 01 00 00       	push   0x12c
c000d560:	6a 00                	push   0x0
c000d562:	50                   	push   eax
c000d563:	e8 a0 30 ff ff       	call   c0000608 <memset>
c000d568:	83 c4 10             	add    esp,0x10
c000d56b:	90                   	nop
c000d56c:	5b                   	pop    ebx
c000d56d:	5e                   	pop    esi
c000d56e:	5f                   	pop    edi
c000d56f:	c3                   	ret    

c000d570 <VgaText::receiveKey(unsigned char)>:
c000d570:	55                   	push   ebp
c000d571:	57                   	push   edi
c000d572:	56                   	push   esi
c000d573:	53                   	push   ebx
c000d574:	83 ec 1c             	sub    esp,0x1c
c000d577:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000d57b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d57f:	84 db                	test   bl,bl
c000d581:	0f 84 c9 00 00 00    	je     c000d650 <VgaText::receiveKey(unsigned char)+0xe0>
c000d587:	8d be 9e 10 00 00    	lea    edi,[esi+0x109e]
c000d58d:	80 fb 08             	cmp    bl,0x8
c000d590:	75 2c                	jne    c000d5be <VgaText::receiveKey(unsigned char)+0x4e>
c000d592:	83 ec 0c             	sub    esp,0xc
c000d595:	57                   	push   edi
c000d596:	e8 8a 30 ff ff       	call   c0000625 <strlen>
c000d59b:	83 c4 10             	add    esp,0x10
c000d59e:	85 c0                	test   eax,eax
c000d5a0:	74 41                	je     c000d5e3 <VgaText::receiveKey(unsigned char)+0x73>
c000d5a2:	50                   	push   eax
c000d5a3:	50                   	push   eax
c000d5a4:	6a 08                	push   0x8
c000d5a6:	56                   	push   esi
c000d5a7:	e8 ac fc ff ff       	call   c000d258 <VgaText::putchar(char)>
c000d5ac:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d5af:	e8 71 30 ff ff       	call   c0000625 <strlen>
c000d5b4:	c6 84 06 9d 10 00 00 00 	mov    BYTE PTR [esi+eax*1+0x109d],0x0
c000d5bc:	eb 22                	jmp    c000d5e0 <VgaText::receiveKey(unsigned char)+0x70>
c000d5be:	0f be c3             	movsx  eax,bl
c000d5c1:	52                   	push   edx
c000d5c2:	52                   	push   edx
c000d5c3:	50                   	push   eax
c000d5c4:	56                   	push   esi
c000d5c5:	e8 8e fc ff ff       	call   c000d258 <VgaText::putchar(char)>
c000d5ca:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c000d5ce:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000d5d3:	59                   	pop    ecx
c000d5d4:	5d                   	pop    ebp
c000d5d5:	8d 44 24 16          	lea    eax,[esp+0x16]
c000d5d9:	50                   	push   eax
c000d5da:	57                   	push   edi
c000d5db:	e8 7e 31 ff ff       	call   c000075e <strcat>
c000d5e0:	83 c4 10             	add    esp,0x10
c000d5e3:	80 be 1c 10 00 00 00 	cmp    BYTE PTR [esi+0x101c],0x0
c000d5ea:	75 05                	jne    c000d5f1 <VgaText::receiveKey(unsigned char)+0x81>
c000d5ec:	80 fb 0a             	cmp    bl,0xa
c000d5ef:	75 53                	jne    c000d644 <VgaText::receiveKey(unsigned char)+0xd4>
c000d5f1:	83 ec 0c             	sub    esp,0xc
c000d5f4:	8d 9e 34 11 00 00    	lea    ebx,[esi+0x1134]
c000d5fa:	53                   	push   ebx
c000d5fb:	e8 25 30 ff ff       	call   c0000625 <strlen>
c000d600:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d603:	89 c5                	mov    ebp,eax
c000d605:	e8 1b 30 ff ff       	call   c0000625 <strlen>
c000d60a:	83 c4 10             	add    esp,0x10
c000d60d:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c000d611:	3d 2c 01 00 00       	cmp    eax,0x12c
c000d616:	76 10                	jbe    c000d628 <VgaText::receiveKey(unsigned char)+0xb8>
c000d618:	83 ec 0c             	sub    esp,0xc
c000d61b:	68 e7 01 02 c0       	push   0xc00201e7
c000d620:	e8 cb 73 00 00       	call   c00149f0 <Krnl::panic(char const*)>
c000d625:	83 c4 10             	add    esp,0x10
c000d628:	50                   	push   eax
c000d629:	50                   	push   eax
c000d62a:	57                   	push   edi
c000d62b:	53                   	push   ebx
c000d62c:	e8 2d 31 ff ff       	call   c000075e <strcat>
c000d631:	83 c4 0c             	add    esp,0xc
c000d634:	68 96 00 00 00       	push   0x96
c000d639:	6a 00                	push   0x0
c000d63b:	57                   	push   edi
c000d63c:	e8 c7 2f ff ff       	call   c0000608 <memset>
c000d641:	83 c4 10             	add    esp,0x10
c000d644:	83 ec 0c             	sub    esp,0xc
c000d647:	56                   	push   esi
c000d648:	e8 d5 f9 ff ff       	call   c000d022 <VgaText::doUpdate()>
c000d64d:	83 c4 10             	add    esp,0x10
c000d650:	83 c4 1c             	add    esp,0x1c
c000d653:	5b                   	pop    ebx
c000d654:	5e                   	pop    esi
c000d655:	5f                   	pop    edi
c000d656:	5d                   	pop    ebp
c000d657:	c3                   	ret    

c000d658 <VgaText::write(unsigned long long, void*, int*)>:
c000d658:	55                   	push   ebp
c000d659:	57                   	push   edi
c000d65a:	56                   	push   esi
c000d65b:	53                   	push   ebx
c000d65c:	83 ec 0c             	sub    esp,0xc
c000d65f:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000d663:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000d667:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000d66b:	c6 86 1d 10 00 00 01 	mov    BYTE PTR [esi+0x101d],0x1
c000d672:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c000d675:	39 eb                	cmp    ebx,ebp
c000d677:	74 13                	je     c000d68c <VgaText::write(unsigned long long, void*, int*)+0x34>
c000d679:	43                   	inc    ebx
c000d67a:	50                   	push   eax
c000d67b:	50                   	push   eax
c000d67c:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c000d680:	50                   	push   eax
c000d681:	56                   	push   esi
c000d682:	e8 d1 fb ff ff       	call   c000d258 <VgaText::putchar(char)>
c000d687:	83 c4 10             	add    esp,0x10
c000d68a:	eb e9                	jmp    c000d675 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c000d68c:	83 ec 0c             	sub    esp,0xc
c000d68f:	c6 86 1d 10 00 00 00 	mov    BYTE PTR [esi+0x101d],0x0
c000d696:	56                   	push   esi
c000d697:	e8 86 f9 ff ff       	call   c000d022 <VgaText::doUpdate()>
c000d69c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d6a0:	89 38                	mov    DWORD PTR [eax],edi
c000d6a2:	83 c4 1c             	add    esp,0x1c
c000d6a5:	31 c0                	xor    eax,eax
c000d6a7:	5b                   	pop    ebx
c000d6a8:	5e                   	pop    esi
c000d6a9:	5f                   	pop    edi
c000d6aa:	5d                   	pop    ebp
c000d6ab:	c3                   	ret    

c000d6ac <newTerminal(char*)>:
c000d6ac:	83 ec 28             	sub    esp,0x28
c000d6af:	68 60 12 00 00       	push   0x1260
c000d6b4:	e8 b3 15 00 00       	call   c000ec6c <operator new(unsigned long)>
c000d6b9:	5a                   	pop    edx
c000d6ba:	59                   	pop    ecx
c000d6bb:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d6bf:	50                   	push   eax
c000d6c0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000d6c4:	e8 15 fd ff ff       	call   c000d3de <VgaText::VgaText(char const*)>
c000d6c9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000d6cd:	83 c4 2c             	add    esp,0x2c
c000d6d0:	c3                   	ret    
c000d6d1:	90                   	nop

c000d6d2 <TSS::TSS()>:
c000d6d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d6d6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000d6dd:	90                   	nop
c000d6de:	c3                   	ret    
c000d6df:	90                   	nop

c000d6e0 <TSS::setESP(unsigned long)>:
c000d6e0:	55                   	push   ebp
c000d6e1:	89 e5                	mov    ebp,esp
c000d6e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6e6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d6e9:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d6ec:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000d6ef:	90                   	nop
c000d6f0:	5d                   	pop    ebp
c000d6f1:	c3                   	ret    

c000d6f2 <TSS::flush()>:
c000d6f2:	55                   	push   ebp
c000d6f3:	89 e5                	mov    ebp,esp
c000d6f5:	83 ec 10             	sub    esp,0x10
c000d6f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6fb:	8b 00                	mov    eax,DWORD PTR [eax]
c000d6fd:	83 c8 03             	or     eax,0x3
c000d700:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c000d704:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c000d708:	66 89 d0             	mov    ax,dx
c000d70b:	0f 00 d8             	ltr    ax
c000d70e:	90                   	nop
c000d70f:	c9                   	leave  
c000d710:	c3                   	ret    
c000d711:	90                   	nop

c000d712 <TSS::setup(unsigned long, unsigned long)>:
c000d712:	55                   	push   ebp
c000d713:	89 e5                	mov    ebp,esp
c000d715:	53                   	push   ebx
c000d716:	83 ec 14             	sub    esp,0x14
c000d719:	83 ec 0c             	sub    esp,0xc
c000d71c:	6a 68                	push   0x68
c000d71e:	e8 fb e4 ff ff       	call   c000bc1e <malloc>
c000d723:	83 c4 10             	add    esp,0x10
c000d726:	89 c2                	mov    edx,eax
c000d728:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d72b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000d72e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d731:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d734:	83 ec 04             	sub    esp,0x4
c000d737:	6a 68                	push   0x68
c000d739:	6a 00                	push   0x0
c000d73b:	50                   	push   eax
c000d73c:	e8 c7 2e ff ff       	call   c0000608 <memset>
c000d741:	83 c4 10             	add    esp,0x10
c000d744:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d747:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d74a:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c000d750:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d753:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d756:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c000d75c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d75f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d762:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d765:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000d768:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d76b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d76e:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c000d774:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d777:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d77a:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c000d780:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d783:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d786:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c000d78c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d78f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d792:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c000d798:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d79b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d79e:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000d7a1:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000d7a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d7a7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d7aa:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d7ad:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000d7b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d7b3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d7b6:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c000d7bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d7c0:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
c000d7c3:	e8 cd 0e 01 00       	call   c001e695 <CPU::readCR3()>
c000d7c8:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000d7cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d7ce:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d7d1:	83 ec 08             	sub    esp,0x8
c000d7d4:	50                   	push   eax
c000d7d5:	8d 45 f0             	lea    eax,[ebp-0x10]
c000d7d8:	50                   	push   eax
c000d7d9:	e8 16 dc ff ff       	call   c000b3f4 <GDTEntry::setBase(unsigned int)>
c000d7de:	83 c4 10             	add    esp,0x10
c000d7e1:	83 ec 08             	sub    esp,0x8
c000d7e4:	6a 68                	push   0x68
c000d7e6:	8d 45 f0             	lea    eax,[ebp-0x10]
c000d7e9:	50                   	push   eax
c000d7ea:	e8 21 dc ff ff       	call   c000b410 <GDTEntry::setLimit(unsigned int)>
c000d7ef:	83 c4 10             	add    esp,0x10
c000d7f2:	c6 45 f5 89          	mov    BYTE PTR [ebp-0xb],0x89
c000d7f6:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000d7f9:	83 e0 0f             	and    eax,0xf
c000d7fc:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c000d7ff:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000d802:	83 c8 40             	or     eax,0x40
c000d805:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c000d808:	e8 dd 64 00 00       	call   c0013cea <thisCPU()>
c000d80d:	05 78 01 00 00       	add    eax,0x178
c000d812:	83 ec 04             	sub    esp,0x4
c000d815:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000d818:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000d81b:	50                   	push   eax
c000d81c:	e8 23 dc ff ff       	call   c000b444 <GDT::addEntry(GDTEntry)>
c000d821:	83 c4 10             	add    esp,0x10
c000d824:	89 c2                	mov    edx,eax
c000d826:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d829:	89 10                	mov    DWORD PTR [eax],edx
c000d82b:	e8 ba 64 00 00       	call   c0013cea <thisCPU()>
c000d830:	05 78 01 00 00       	add    eax,0x178
c000d835:	83 ec 0c             	sub    esp,0xc
c000d838:	50                   	push   eax
c000d839:	e8 4a dc ff ff       	call   c000b488 <GDT::flush()>
c000d83e:	83 c4 10             	add    esp,0x10
c000d841:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d844:	8b 00                	mov    eax,DWORD PTR [eax]
c000d846:	83 ec 08             	sub    esp,0x8
c000d849:	50                   	push   eax
c000d84a:	68 50 02 02 c0       	push   0xc0020250
c000d84f:	e8 07 15 00 00       	call   c000ed5b <Dbg::kprintf(char const*, ...)>
c000d854:	83 c4 10             	add    esp,0x10
c000d857:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d85a:	8b 00                	mov    eax,DWORD PTR [eax]
c000d85c:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000d85f:	c9                   	leave  
c000d860:	c3                   	ret    
c000d861:	90                   	nop

c000d862 <ReservedFilename::read(unsigned long long, void*, int*)>:
c000d862:	55                   	push   ebp
c000d863:	57                   	push   edi
c000d864:	56                   	push   esi
c000d865:	53                   	push   ebx
c000d866:	83 ec 0c             	sub    esp,0xc
c000d869:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d86d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000d871:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d874:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000d878:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c000d87c:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000d880:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000d885:	75 08                	jne    c000d88f <ReservedFilename::read(unsigned long long, void*, int*)+0x2d>
c000d887:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000d88d:	eb 5e                	jmp    c000d8ed <ReservedFilename::read(unsigned long long, void*, int*)+0x8b>
c000d88f:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000d894:	75 3d                	jne    c000d8d3 <ReservedFilename::read(unsigned long long, void*, int*)+0x71>
c000d896:	83 ec 0c             	sub    esp,0xc
c000d899:	68 6e 02 02 c0       	push   0xc002026e
c000d89e:	e8 b8 14 00 00       	call   c000ed5b <Dbg::kprintf(char const*, ...)>
c000d8a3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000d8a8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000d8ab:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000d8b1:	8b 10                	mov    edx,DWORD PTR [eax]
c000d8b3:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c000d8b7:	89 6c 24 3c          	mov    DWORD PTR [esp+0x3c],ebp
c000d8bb:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c000d8bf:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c000d8c3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d8c7:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000d8ca:	83 c4 1c             	add    esp,0x1c
c000d8cd:	5b                   	pop    ebx
c000d8ce:	5e                   	pop    esi
c000d8cf:	5f                   	pop    edi
c000d8d0:	5d                   	pop    ebp
c000d8d1:	ff e0                	jmp    eax
c000d8d3:	89 c2                	mov    edx,eax
c000d8d5:	83 e2 fd             	and    edx,0xfffffffd
c000d8d8:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c000d8de:	74 a7                	je     c000d887 <ReservedFilename::read(unsigned long long, void*, int*)+0x25>
c000d8e0:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000d8e5:	83 e0 ef             	and    eax,0xffffffef
c000d8e8:	83 f8 08             	cmp    eax,0x8
c000d8eb:	76 9a                	jbe    c000d887 <ReservedFilename::read(unsigned long long, void*, int*)+0x25>
c000d8ed:	83 c4 0c             	add    esp,0xc
c000d8f0:	31 c0                	xor    eax,eax
c000d8f2:	5b                   	pop    ebx
c000d8f3:	5e                   	pop    esi
c000d8f4:	5f                   	pop    edi
c000d8f5:	5d                   	pop    ebp
c000d8f6:	c3                   	ret    
c000d8f7:	90                   	nop

c000d8f8 <ReservedFilename::isAtty()>:
c000d8f8:	83 ec 18             	sub    esp,0x18
c000d8fb:	68 7b 02 02 c0       	push   0xc002027b
c000d900:	e8 56 14 00 00       	call   c000ed5b <Dbg::kprintf(char const*, ...)>
c000d905:	83 c4 10             	add    esp,0x10
c000d908:	31 c0                	xor    eax,eax
c000d90a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d90e:	81 7a 04 01 ff ff 0f 	cmp    DWORD PTR [edx+0x4],0xfffff01
c000d915:	75 12                	jne    c000d929 <ReservedFilename::isAtty()+0x31>
c000d917:	83 ec 0c             	sub    esp,0xc
c000d91a:	68 91 02 02 c0       	push   0xc0020291
c000d91f:	e8 37 14 00 00       	call   c000ed5b <Dbg::kprintf(char const*, ...)>
c000d924:	83 c4 10             	add    esp,0x10
c000d927:	b0 01                	mov    al,0x1
c000d929:	83 c4 0c             	add    esp,0xc
c000d92c:	c3                   	ret    
c000d92d:	90                   	nop

c000d92e <ReservedFilename::write(unsigned long long, void*, int*)>:
c000d92e:	55                   	push   ebp
c000d92f:	57                   	push   edi
c000d930:	56                   	push   esi
c000d931:	53                   	push   ebx
c000d932:	83 ec 0c             	sub    esp,0xc
c000d935:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d939:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000d93d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d940:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000d944:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c000d948:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000d94c:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000d951:	75 08                	jne    c000d95b <ReservedFilename::write(unsigned long long, void*, int*)+0x2d>
c000d953:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000d959:	eb 63                	jmp    c000d9be <ReservedFilename::write(unsigned long long, void*, int*)+0x90>
c000d95b:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000d960:	75 3d                	jne    c000d99f <ReservedFilename::write(unsigned long long, void*, int*)+0x71>
c000d962:	83 ec 0c             	sub    esp,0xc
c000d965:	68 a4 02 02 c0       	push   0xc00202a4
c000d96a:	e8 ec 13 00 00       	call   c000ed5b <Dbg::kprintf(char const*, ...)>
c000d96f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000d974:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000d977:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000d97d:	8b 10                	mov    edx,DWORD PTR [eax]
c000d97f:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c000d983:	89 6c 24 3c          	mov    DWORD PTR [esp+0x3c],ebp
c000d987:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c000d98b:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c000d98f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d993:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c000d996:	83 c4 1c             	add    esp,0x1c
c000d999:	5b                   	pop    ebx
c000d99a:	5e                   	pop    esi
c000d99b:	5f                   	pop    edi
c000d99c:	5d                   	pop    ebp
c000d99d:	ff e0                	jmp    eax
c000d99f:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c000d9a4:	75 04                	jne    c000d9aa <ReservedFilename::write(unsigned long long, void*, int*)+0x7c>
c000d9a6:	89 33                	mov    DWORD PTR [ebx],esi
c000d9a8:	eb 14                	jmp    c000d9be <ReservedFilename::write(unsigned long long, void*, int*)+0x90>
c000d9aa:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c000d9af:	74 a2                	je     c000d953 <ReservedFilename::write(unsigned long long, void*, int*)+0x25>
c000d9b1:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000d9b6:	83 e0 ef             	and    eax,0xffffffef
c000d9b9:	83 f8 08             	cmp    eax,0x8
c000d9bc:	76 95                	jbe    c000d953 <ReservedFilename::write(unsigned long long, void*, int*)+0x25>
c000d9be:	83 c4 0c             	add    esp,0xc
c000d9c1:	31 c0                	xor    eax,eax
c000d9c3:	5b                   	pop    ebx
c000d9c4:	5e                   	pop    esi
c000d9c5:	5f                   	pop    edi
c000d9c6:	5d                   	pop    ebp
c000d9c7:	c3                   	ret    

c000d9c8 <UnixFile::getFileDescriptor()>:
c000d9c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d9cc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d9cf:	c3                   	ret    

c000d9d0 <UnixFile::UnixFile(int)>:
c000d9d0:	53                   	push   ebx
c000d9d1:	83 ec 18             	sub    esp,0x18
c000d9d4:	ba c0 03 02 c0       	mov    edx,0xc00203c0
c000d9d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9dd:	89 10                	mov    DWORD PTR [eax],edx
c000d9df:	81 7c 24 24 ff fe ff 0f 	cmp    DWORD PTR [esp+0x24],0xffffeff
c000d9e7:	0f 8f 4d 01 00 00    	jg     c000db3a <UnixFile::UnixFile(int)+0x16a>
c000d9ed:	a1 a0 28 02 c0       	mov    eax,ds:0xc00228a0
c000d9f2:	8d 50 01             	lea    edx,[eax+0x1]
c000d9f5:	89 15 a0 28 02 c0    	mov    DWORD PTR ds:0xc00228a0,edx
c000d9fb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000d9ff:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000da02:	83 ec 08             	sub    esp,0x8
c000da05:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000da09:	68 58 35 02 c0       	push   0xc0023558
c000da0e:	e8 f7 0c 01 00       	call   c001e70a <LinkedList<UnixFile>::addElement(UnixFile*)>
c000da13:	83 c4 10             	add    esp,0x10
c000da16:	a0 54 35 02 c0       	mov    al,ds:0xc0023554
c000da1b:	83 f0 01             	xor    eax,0x1
c000da1e:	84 c0                	test   al,al
c000da20:	0f 84 15 01 00 00    	je     c000db3b <UnixFile::UnixFile(int)+0x16b>
c000da26:	c6 05 54 35 02 c0 01 	mov    BYTE PTR ds:0xc0023554,0x1
c000da2d:	83 ec 0c             	sub    esp,0xc
c000da30:	6a 0c                	push   0xc
c000da32:	e8 35 12 00 00       	call   c000ec6c <operator new(unsigned long)>
c000da37:	83 c4 10             	add    esp,0x10
c000da3a:	89 c3                	mov    ebx,eax
c000da3c:	83 ec 08             	sub    esp,0x8
c000da3f:	68 03 ff ff 0f       	push   0xfffff03
c000da44:	53                   	push   ebx
c000da45:	e8 f6 00 00 00       	call   c000db40 <ReservedFilename::ReservedFilename(int)>
c000da4a:	83 c4 10             	add    esp,0x10
c000da4d:	89 1d 4c 35 02 c0    	mov    DWORD PTR ds:0xc002354c,ebx
c000da53:	83 ec 0c             	sub    esp,0xc
c000da56:	6a 0c                	push   0xc
c000da58:	e8 0f 12 00 00       	call   c000ec6c <operator new(unsigned long)>
c000da5d:	83 c4 10             	add    esp,0x10
c000da60:	89 c3                	mov    ebx,eax
c000da62:	83 ec 08             	sub    esp,0x8
c000da65:	68 01 ff ff 0f       	push   0xfffff01
c000da6a:	53                   	push   ebx
c000da6b:	e8 d0 00 00 00       	call   c000db40 <ReservedFilename::ReservedFilename(int)>
c000da70:	83 c4 10             	add    esp,0x10
c000da73:	89 1d 50 35 02 c0    	mov    DWORD PTR ds:0xc0023550,ebx
c000da79:	83 ec 0c             	sub    esp,0xc
c000da7c:	6a 0c                	push   0xc
c000da7e:	e8 e9 11 00 00       	call   c000ec6c <operator new(unsigned long)>
c000da83:	83 c4 10             	add    esp,0x10
c000da86:	89 c3                	mov    ebx,eax
c000da88:	83 ec 08             	sub    esp,0x8
c000da8b:	68 00 ff ff 0f       	push   0xfffff00
c000da90:	53                   	push   ebx
c000da91:	e8 aa 00 00 00       	call   c000db40 <ReservedFilename::ReservedFilename(int)>
c000da96:	83 c4 10             	add    esp,0x10
c000da99:	89 1d 44 35 02 c0    	mov    DWORD PTR ds:0xc0023544,ebx
c000da9f:	83 ec 0c             	sub    esp,0xc
c000daa2:	6a 0c                	push   0xc
c000daa4:	e8 c3 11 00 00       	call   c000ec6c <operator new(unsigned long)>
c000daa9:	83 c4 10             	add    esp,0x10
c000daac:	89 c3                	mov    ebx,eax
c000daae:	83 ec 08             	sub    esp,0x8
c000dab1:	68 02 ff ff 0f       	push   0xfffff02
c000dab6:	53                   	push   ebx
c000dab7:	e8 84 00 00 00       	call   c000db40 <ReservedFilename::ReservedFilename(int)>
c000dabc:	83 c4 10             	add    esp,0x10
c000dabf:	89 1d 48 35 02 c0    	mov    DWORD PTR ds:0xc0023548,ebx
c000dac5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000dacd:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000dad2:	7f 67                	jg     c000db3b <UnixFile::UnixFile(int)+0x16b>
c000dad4:	83 ec 0c             	sub    esp,0xc
c000dad7:	6a 0c                	push   0xc
c000dad9:	e8 8e 11 00 00       	call   c000ec6c <operator new(unsigned long)>
c000dade:	83 c4 10             	add    esp,0x10
c000dae1:	89 c3                	mov    ebx,eax
c000dae3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dae7:	05 10 ff ff 0f       	add    eax,0xfffff10
c000daec:	83 ec 08             	sub    esp,0x8
c000daef:	50                   	push   eax
c000daf0:	53                   	push   ebx
c000daf1:	e8 4a 00 00 00       	call   c000db40 <ReservedFilename::ReservedFilename(int)>
c000daf6:	83 c4 10             	add    esp,0x10
c000daf9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dafd:	89 1c 85 20 35 02 c0 	mov    DWORD PTR [eax*4-0x3ffdcae0],ebx
c000db04:	83 ec 0c             	sub    esp,0xc
c000db07:	6a 0c                	push   0xc
c000db09:	e8 5e 11 00 00       	call   c000ec6c <operator new(unsigned long)>
c000db0e:	83 c4 10             	add    esp,0x10
c000db11:	89 c3                	mov    ebx,eax
c000db13:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000db17:	05 20 ff ff 0f       	add    eax,0xfffff20
c000db1c:	83 ec 08             	sub    esp,0x8
c000db1f:	50                   	push   eax
c000db20:	53                   	push   ebx
c000db21:	e8 1a 00 00 00       	call   c000db40 <ReservedFilename::ReservedFilename(int)>
c000db26:	83 c4 10             	add    esp,0x10
c000db29:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000db2d:	89 1c 85 e0 34 02 c0 	mov    DWORD PTR [eax*4-0x3ffdcb20],ebx
c000db34:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000db38:	eb 93                	jmp    c000dacd <UnixFile::UnixFile(int)+0xfd>
c000db3a:	90                   	nop
c000db3b:	83 c4 18             	add    esp,0x18
c000db3e:	5b                   	pop    ebx
c000db3f:	c3                   	ret    

c000db40 <ReservedFilename::ReservedFilename(int)>:
c000db40:	83 ec 0c             	sub    esp,0xc
c000db43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db47:	83 ec 08             	sub    esp,0x8
c000db4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db4e:	50                   	push   eax
c000db4f:	e8 7c fe ff ff       	call   c000d9d0 <UnixFile::UnixFile(int)>
c000db54:	83 c4 10             	add    esp,0x10
c000db57:	ba dc 03 02 c0       	mov    edx,0xc00203dc
c000db5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db60:	89 10                	mov    DWORD PTR [eax],edx
c000db62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db66:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000db6a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000db6d:	90                   	nop
c000db6e:	83 c4 0c             	add    esp,0xc
c000db71:	c3                   	ret    

c000db72 <UnixFile::~UnixFile()>:
c000db72:	83 ec 1c             	sub    esp,0x1c
c000db75:	ba c0 03 02 c0       	mov    edx,0xc00203c0
c000db7a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db7e:	89 10                	mov    DWORD PTR [eax],edx
c000db80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db84:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db87:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c000db8c:	7f 73                	jg     c000dc01 <UnixFile::~UnixFile()+0x8f>
c000db8e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000db96:	83 ec 0c             	sub    esp,0xc
c000db99:	68 58 35 02 c0       	push   0xc0023558
c000db9e:	e8 3b 0c 01 00       	call   c001e7de <LinkedList<UnixFile>::getFirstElement()>
c000dba3:	83 c4 10             	add    esp,0x10
c000dba6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dbaa:	83 ec 0c             	sub    esp,0xc
c000dbad:	68 58 35 02 c0       	push   0xc0023558
c000dbb2:	e8 2f 0c 01 00       	call   c001e7e6 <LinkedList<UnixFile>::removeFirst()>
c000dbb7:	83 c4 10             	add    esp,0x10
c000dbba:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000dbbe:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000dbc2:	74 40                	je     c000dc04 <UnixFile::~UnixFile()+0x92>
c000dbc4:	83 ec 08             	sub    esp,0x8
c000dbc7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000dbcb:	68 58 35 02 c0       	push   0xc0023558
c000dbd0:	e8 35 0b 01 00       	call   c001e70a <LinkedList<UnixFile>::addElement(UnixFile*)>
c000dbd5:	83 c4 10             	add    esp,0x10
c000dbd8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dbdc:	8d 50 01             	lea    edx,[eax+0x1]
c000dbdf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dbe3:	3d 88 13 00 00       	cmp    eax,0x1388
c000dbe8:	0f 94 c0             	sete   al
c000dbeb:	84 c0                	test   al,al
c000dbed:	74 a7                	je     c000db96 <UnixFile::~UnixFile()+0x24>
c000dbef:	83 ec 0c             	sub    esp,0xc
c000dbf2:	68 98 03 02 c0       	push   0xc0020398
c000dbf7:	e8 f4 6d 00 00       	call   c00149f0 <Krnl::panic(char const*)>
c000dbfc:	83 c4 10             	add    esp,0x10
c000dbff:	eb 95                	jmp    c000db96 <UnixFile::~UnixFile()+0x24>
c000dc01:	90                   	nop
c000dc02:	eb 01                	jmp    c000dc05 <UnixFile::~UnixFile()+0x93>
c000dc04:	90                   	nop
c000dc05:	90                   	nop
c000dc06:	83 c4 1c             	add    esp,0x1c
c000dc09:	c3                   	ret    

c000dc0a <UnixFile::~UnixFile()>:
c000dc0a:	83 ec 0c             	sub    esp,0xc
c000dc0d:	83 ec 0c             	sub    esp,0xc
c000dc10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc14:	e8 59 ff ff ff       	call   c000db72 <UnixFile::~UnixFile()>
c000dc19:	83 c4 10             	add    esp,0x10
c000dc1c:	83 ec 08             	sub    esp,0x8
c000dc1f:	6a 0c                	push   0xc
c000dc21:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc25:	e8 51 10 00 00       	call   c000ec7b <operator delete(void*, unsigned long)>
c000dc2a:	83 c4 10             	add    esp,0x10
c000dc2d:	83 c4 0c             	add    esp,0xc
c000dc30:	c3                   	ret    
c000dc31:	90                   	nop

c000dc32 <ReservedFilename::~ReservedFilename()>:
c000dc32:	83 ec 0c             	sub    esp,0xc
c000dc35:	ba dc 03 02 c0       	mov    edx,0xc00203dc
c000dc3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc3e:	89 10                	mov    DWORD PTR [eax],edx
c000dc40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc44:	83 ec 0c             	sub    esp,0xc
c000dc47:	50                   	push   eax
c000dc48:	e8 25 ff ff ff       	call   c000db72 <UnixFile::~UnixFile()>
c000dc4d:	83 c4 10             	add    esp,0x10
c000dc50:	90                   	nop
c000dc51:	83 c4 0c             	add    esp,0xc
c000dc54:	c3                   	ret    
c000dc55:	90                   	nop

c000dc56 <ReservedFilename::~ReservedFilename()>:
c000dc56:	83 ec 0c             	sub    esp,0xc
c000dc59:	83 ec 0c             	sub    esp,0xc
c000dc5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc60:	e8 cd ff ff ff       	call   c000dc32 <ReservedFilename::~ReservedFilename()>
c000dc65:	83 c4 10             	add    esp,0x10
c000dc68:	83 ec 08             	sub    esp,0x8
c000dc6b:	6a 0c                	push   0xc
c000dc6d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc71:	e8 05 10 00 00       	call   c000ec7b <operator delete(void*, unsigned long)>
c000dc76:	83 c4 10             	add    esp,0x10
c000dc79:	83 c4 0c             	add    esp,0xc
c000dc7c:	c3                   	ret    

c000dc7d <getFromFileDescriptor(int)>:
c000dc7d:	53                   	push   ebx
c000dc7e:	83 ec 08             	sub    esp,0x8
c000dc81:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000dc85:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c000dc8b:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c000dc91:	7f 33                	jg     c000dcc6 <getFromFileDescriptor(int)+0x49>
c000dc93:	83 ec 0c             	sub    esp,0xc
c000dc96:	68 58 35 02 c0       	push   0xc0023558
c000dc9b:	e8 3e 0b 01 00       	call   c001e7de <LinkedList<UnixFile>::getFirstElement()>
c000dca0:	83 c4 10             	add    esp,0x10
c000dca3:	85 c0                	test   eax,eax
c000dca5:	75 07                	jne    c000dcae <getFromFileDescriptor(int)+0x31>
c000dca7:	31 c0                	xor    eax,eax
c000dca9:	e9 98 00 00 00       	jmp    c000dd46 <getFromFileDescriptor(int)+0xc9>
c000dcae:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c000dcb1:	0f 84 8f 00 00 00    	je     c000dd46 <getFromFileDescriptor(int)+0xc9>
c000dcb7:	52                   	push   edx
c000dcb8:	52                   	push   edx
c000dcb9:	50                   	push   eax
c000dcba:	68 58 35 02 c0       	push   0xc0023558
c000dcbf:	e8 c4 0b 01 00       	call   c001e888 <LinkedList<UnixFile>::getNext(UnixFile*)>
c000dcc4:	eb da                	jmp    c000dca0 <getFromFileDescriptor(int)+0x23>
c000dcc6:	83 ec 0c             	sub    esp,0xc
c000dcc9:	68 b1 02 02 c0       	push   0xc00202b1
c000dcce:	e8 88 10 00 00       	call   c000ed5b <Dbg::kprintf(char const*, ...)>
c000dcd3:	83 c4 10             	add    esp,0x10
c000dcd6:	a1 4c 35 02 c0       	mov    eax,ds:0xc002354c
c000dcdb:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c000dce1:	74 63                	je     c000dd46 <getFromFileDescriptor(int)+0xc9>
c000dce3:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c000dce9:	75 17                	jne    c000dd02 <getFromFileDescriptor(int)+0x85>
c000dceb:	83 ec 0c             	sub    esp,0xc
c000dcee:	68 d8 02 02 c0       	push   0xc00202d8
c000dcf3:	e8 63 10 00 00       	call   c000ed5b <Dbg::kprintf(char const*, ...)>
c000dcf8:	a1 50 35 02 c0       	mov    eax,ds:0xc0023550
c000dcfd:	83 c4 10             	add    esp,0x10
c000dd00:	eb 44                	jmp    c000dd46 <getFromFileDescriptor(int)+0xc9>
c000dd02:	a1 48 35 02 c0       	mov    eax,ds:0xc0023548
c000dd07:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c000dd0d:	74 37                	je     c000dd46 <getFromFileDescriptor(int)+0xc9>
c000dd0f:	a1 44 35 02 c0       	mov    eax,ds:0xc0023544
c000dd14:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c000dd1a:	74 2a                	je     c000dd46 <getFromFileDescriptor(int)+0xc9>
c000dd1c:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c000dd22:	83 f8 08             	cmp    eax,0x8
c000dd25:	77 09                	ja     c000dd30 <getFromFileDescriptor(int)+0xb3>
c000dd27:	8b 04 85 20 35 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcae0]
c000dd2e:	eb 16                	jmp    c000dd46 <getFromFileDescriptor(int)+0xc9>
c000dd30:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c000dd36:	83 fb 08             	cmp    ebx,0x8
c000dd39:	0f 87 68 ff ff ff    	ja     c000dca7 <getFromFileDescriptor(int)+0x2a>
c000dd3f:	8b 04 9d e0 34 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdcb20]
c000dd46:	83 c4 08             	add    esp,0x8
c000dd49:	5b                   	pop    ebx
c000dd4a:	c3                   	ret    

c000dd4b <__static_initialization_and_destruction_0(int, int)>:
c000dd4b:	83 ec 0c             	sub    esp,0xc
c000dd4e:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000dd53:	75 34                	jne    c000dd89 <__static_initialization_and_destruction_0(int, int)+0x3e>
c000dd55:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000dd5d:	75 2a                	jne    c000dd89 <__static_initialization_and_destruction_0(int, int)+0x3e>
c000dd5f:	83 ec 0c             	sub    esp,0xc
c000dd62:	68 58 35 02 c0       	push   0xc0023558
c000dd67:	e8 46 09 01 00       	call   c001e6b2 <LinkedList<UnixFile>::LinkedList()>
c000dd6c:	83 c4 10             	add    esp,0x10
c000dd6f:	83 ec 04             	sub    esp,0x4
c000dd72:	68 20 28 02 c0       	push   0xc0022820
c000dd77:	68 58 35 02 c0       	push   0xc0023558
c000dd7c:	68 b0 e6 01 c0       	push   0xc001e6b0
c000dd81:	e8 71 0e 00 00       	call   c000ebf7 <__cxa_atexit>
c000dd86:	83 c4 10             	add    esp,0x10
c000dd89:	90                   	nop
c000dd8a:	83 c4 0c             	add    esp,0xc
c000dd8d:	c3                   	ret    

c000dd8e <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c000dd8e:	83 ec 0c             	sub    esp,0xc
c000dd91:	83 ec 08             	sub    esp,0x8
c000dd94:	68 ff ff 00 00       	push   0xffff
c000dd99:	6a 01                	push   0x1
c000dd9b:	e8 ab ff ff ff       	call   c000dd4b <__static_initialization_and_destruction_0(int, int)>
c000dda0:	83 c4 10             	add    esp,0x10
c000dda3:	83 c4 0c             	add    esp,0xc
c000dda6:	c3                   	ret    
c000dda7:	90                   	nop

c000dda8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c000dda8:	53                   	push   ebx
c000dda9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ddad:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ddb1:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c000ddb7:	89 c8                	mov    eax,ecx
c000ddb9:	d1 e8                	shr    eax,1
c000ddbb:	03 05 a8 28 02 c0    	add    eax,DWORD PTR ds:0xc00228a8
c000ddc1:	83 e1 01             	and    ecx,0x1
c000ddc4:	8a 10                	mov    dl,BYTE PTR [eax]
c000ddc6:	75 09                	jne    c000ddd1 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c000ddc8:	83 e2 f0             	and    edx,0xfffffff0
c000ddcb:	09 da                	or     edx,ebx
c000ddcd:	88 10                	mov    BYTE PTR [eax],dl
c000ddcf:	5b                   	pop    ebx
c000ddd0:	c3                   	ret    
c000ddd1:	c1 e3 04             	shl    ebx,0x4
c000ddd4:	83 e2 0f             	and    edx,0xf
c000ddd7:	09 da                	or     edx,ebx
c000ddd9:	88 10                	mov    BYTE PTR [eax],dl
c000dddb:	5b                   	pop    ebx
c000dddc:	c3                   	ret    

c000dddd <Virt::getPageState(unsigned long)>:
c000dddd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dde1:	8b 0d a8 28 02 c0    	mov    ecx,DWORD PTR ds:0xc00228a8
c000dde7:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c000dded:	89 d0                	mov    eax,edx
c000ddef:	d1 e8                	shr    eax,1
c000ddf1:	83 e2 01             	and    edx,0x1
c000ddf4:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c000ddf7:	75 04                	jne    c000ddfd <Virt::getPageState(unsigned long)+0x20>
c000ddf9:	83 e0 0f             	and    eax,0xf
c000ddfc:	c3                   	ret    
c000ddfd:	c0 e8 04             	shr    al,0x4
c000de00:	c3                   	ret    

c000de01 <Virt::allocateKernelVirtualPages(int)>:
c000de01:	55                   	push   ebp
c000de02:	31 ed                	xor    ebp,ebp
c000de04:	57                   	push   edi
c000de05:	56                   	push   esi
c000de06:	53                   	push   ebx
c000de07:	31 db                	xor    ebx,ebx
c000de09:	83 ec 1c             	sub    esp,0x1c
c000de0c:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000de10:	8b 3d a4 28 02 c0    	mov    edi,DWORD PTR ds:0xc00228a4
c000de16:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000de1b:	57                   	push   edi
c000de1c:	e8 bc ff ff ff       	call   c000dddd <Virt::getPageState(unsigned long)>
c000de21:	5a                   	pop    edx
c000de22:	84 c0                	test   al,al
c000de24:	75 3a                	jne    c000de60 <Virt::allocateKernelVirtualPages(int)+0x5f>
c000de26:	85 db                	test   ebx,ebx
c000de28:	75 02                	jne    c000de2c <Virt::allocateKernelVirtualPages(int)+0x2b>
c000de2a:	89 fd                	mov    ebp,edi
c000de2c:	43                   	inc    ebx
c000de2d:	39 f3                	cmp    ebx,esi
c000de2f:	74 5a                	je     c000de8b <Virt::allocateKernelVirtualPages(int)+0x8a>
c000de31:	47                   	inc    edi
c000de32:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000de38:	76 31                	jbe    c000de6b <Virt::allocateKernelVirtualPages(int)+0x6a>
c000de3a:	c7 05 a4 28 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc00228a4,0xc8000
c000de44:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000de49:	75 28                	jne    c000de73 <Virt::allocateKernelVirtualPages(int)+0x72>
c000de4b:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000de50:	bf 00 80 0c 00       	mov    edi,0xc8000
c000de55:	57                   	push   edi
c000de56:	e8 82 ff ff ff       	call   c000dddd <Virt::getPageState(unsigned long)>
c000de5b:	5a                   	pop    edx
c000de5c:	84 c0                	test   al,al
c000de5e:	74 c6                	je     c000de26 <Virt::allocateKernelVirtualPages(int)+0x25>
c000de60:	31 db                	xor    ebx,ebx
c000de62:	47                   	inc    edi
c000de63:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000de69:	77 cf                	ja     c000de3a <Virt::allocateKernelVirtualPages(int)+0x39>
c000de6b:	89 3d a4 28 02 c0    	mov    DWORD PTR ds:0xc00228a4,edi
c000de71:	eb a8                	jmp    c000de1b <Virt::allocateKernelVirtualPages(int)+0x1a>
c000de73:	83 ec 0c             	sub    esp,0xc
c000de76:	68 f0 03 02 c0       	push   0xc00203f0
c000de7b:	e8 70 6b 00 00       	call   c00149f0 <Krnl::panic(char const*)>
c000de80:	8b 3d a4 28 02 c0    	mov    edi,DWORD PTR ds:0xc00228a4
c000de86:	83 c4 10             	add    esp,0x10
c000de89:	eb 90                	jmp    c000de1b <Virt::allocateKernelVirtualPages(int)+0x1a>
c000de8b:	89 2d a4 28 02 c0    	mov    DWORD PTR ds:0xc00228a4,ebp
c000de91:	4b                   	dec    ebx
c000de92:	74 5f                	je     c000def3 <Virt::allocateKernelVirtualPages(int)+0xf2>
c000de94:	85 f6                	test   esi,esi
c000de96:	74 3d                	je     c000ded5 <Virt::allocateKernelVirtualPages(int)+0xd4>
c000de98:	89 e8                	mov    eax,ebp
c000de9a:	31 db                	xor    ebx,ebx
c000de9c:	8d 7e ff             	lea    edi,[esi-0x1]
c000de9f:	eb 14                	jmp    c000deb5 <Virt::allocateKernelVirtualPages(int)+0xb4>
c000dea1:	6a 01                	push   0x1
c000dea3:	43                   	inc    ebx
c000dea4:	50                   	push   eax
c000dea5:	e8 fe fe ff ff       	call   c000dda8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000deaa:	58                   	pop    eax
c000deab:	39 f3                	cmp    ebx,esi
c000dead:	5a                   	pop    edx
c000deae:	74 25                	je     c000ded5 <Virt::allocateKernelVirtualPages(int)+0xd4>
c000deb0:	a1 a4 28 02 c0       	mov    eax,ds:0xc00228a4
c000deb5:	8d 50 01             	lea    edx,[eax+0x1]
c000deb8:	85 db                	test   ebx,ebx
c000deba:	89 15 a4 28 02 c0    	mov    DWORD PTR ds:0xc00228a4,edx
c000dec0:	74 20                	je     c000dee2 <Virt::allocateKernelVirtualPages(int)+0xe1>
c000dec2:	39 df                	cmp    edi,ebx
c000dec4:	75 db                	jne    c000dea1 <Virt::allocateKernelVirtualPages(int)+0xa0>
c000dec6:	6a 03                	push   0x3
c000dec8:	43                   	inc    ebx
c000dec9:	50                   	push   eax
c000deca:	e8 d9 fe ff ff       	call   c000dda8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000decf:	59                   	pop    ecx
c000ded0:	39 f3                	cmp    ebx,esi
c000ded2:	58                   	pop    eax
c000ded3:	75 db                	jne    c000deb0 <Virt::allocateKernelVirtualPages(int)+0xaf>
c000ded5:	83 c4 1c             	add    esp,0x1c
c000ded8:	89 e8                	mov    eax,ebp
c000deda:	5b                   	pop    ebx
c000dedb:	c1 e0 0c             	shl    eax,0xc
c000dede:	5e                   	pop    esi
c000dedf:	5f                   	pop    edi
c000dee0:	5d                   	pop    ebp
c000dee1:	c3                   	ret    
c000dee2:	6a 02                	push   0x2
c000dee4:	bb 01 00 00 00       	mov    ebx,0x1
c000dee9:	50                   	push   eax
c000deea:	e8 b9 fe ff ff       	call   c000dda8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000deef:	58                   	pop    eax
c000def0:	5a                   	pop    edx
c000def1:	eb bd                	jmp    c000deb0 <Virt::allocateKernelVirtualPages(int)+0xaf>
c000def3:	6a 04                	push   0x4
c000def5:	8d 45 01             	lea    eax,[ebp+0x1]
c000def8:	55                   	push   ebp
c000def9:	a3 a4 28 02 c0       	mov    ds:0xc00228a4,eax
c000defe:	e8 a5 fe ff ff       	call   c000dda8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000df03:	59                   	pop    ecx
c000df04:	89 e8                	mov    eax,ebp
c000df06:	5b                   	pop    ebx
c000df07:	c1 e0 0c             	shl    eax,0xc
c000df0a:	83 c4 1c             	add    esp,0x1c
c000df0d:	5b                   	pop    ebx
c000df0e:	5e                   	pop    esi
c000df0f:	5f                   	pop    edi
c000df10:	5d                   	pop    ebp
c000df11:	c3                   	ret    

c000df12 <Virt::virtualMemorySetup()>:
c000df12:	53                   	push   ebx
c000df13:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000df18:	83 ec 08             	sub    esp,0x8
c000df1b:	6a 0f                	push   0xf
c000df1d:	53                   	push   ebx
c000df1e:	43                   	inc    ebx
c000df1f:	e8 84 fe ff ff       	call   c000dda8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000df24:	59                   	pop    ecx
c000df25:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000df2b:	58                   	pop    eax
c000df2c:	75 ed                	jne    c000df1b <Virt::virtualMemorySetup()+0x9>
c000df2e:	83 ec 08             	sub    esp,0x8
c000df31:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000df36:	68 00 00 00 c8       	push   0xc8000000
c000df3b:	68 77 05 02 c0       	push   0xc0020577
c000df40:	e8 16 0e 00 00       	call   c000ed5b <Dbg::kprintf(char const*, ...)>
c000df45:	58                   	pop    eax
c000df46:	5a                   	pop    edx
c000df47:	68 00 f0 ff ef       	push   0xeffff000
c000df4c:	68 8b 05 02 c0       	push   0xc002058b
c000df51:	e8 05 0e 00 00       	call   c000ed5b <Dbg::kprintf(char const*, ...)>
c000df56:	83 c4 10             	add    esp,0x10
c000df59:	83 ec 08             	sub    esp,0x8
c000df5c:	6a 00                	push   0x0
c000df5e:	53                   	push   ebx
c000df5f:	43                   	inc    ebx
c000df60:	e8 43 fe ff ff       	call   c000dda8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000df65:	83 c4 10             	add    esp,0x10
c000df68:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000df6e:	75 e9                	jne    c000df59 <Virt::virtualMemorySetup()+0x47>
c000df70:	bb 00 00 0d 00       	mov    ebx,0xd0000
c000df75:	83 ec 08             	sub    esp,0x8
c000df78:	6a 0f                	push   0xf
c000df7a:	53                   	push   ebx
c000df7b:	43                   	inc    ebx
c000df7c:	e8 27 fe ff ff       	call   c000dda8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000df81:	83 c4 10             	add    esp,0x10
c000df84:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c000df8a:	75 e9                	jne    c000df75 <Virt::virtualMemorySetup()+0x63>
c000df8c:	83 c4 08             	add    esp,0x8
c000df8f:	5b                   	pop    ebx
c000df90:	c3                   	ret    

c000df91 <Virt::getAKernelVAS()>:
c000df91:	a1 64 35 02 c0       	mov    eax,ds:0xc0023564
c000df96:	c3                   	ret    

c000df97 <Virt::setupPageSwapping(int)>:
c000df97:	57                   	push   edi
c000df98:	56                   	push   esi
c000df99:	53                   	push   ebx
c000df9a:	83 ec 1c             	sub    esp,0x1c
c000df9d:	68 14 01 00 00       	push   0x114
c000dfa2:	e8 c5 0c 00 00       	call   c000ec6c <operator new(unsigned long)>
c000dfa7:	83 c4 0c             	add    esp,0xc
c000dfaa:	89 c6                	mov    esi,eax
c000dfac:	ff 35 54 48 02 c0    	push   DWORD PTR ds:0xc0024854
c000dfb2:	68 9f 05 02 c0       	push   0xc002059f
c000dfb7:	50                   	push   eax
c000dfb8:	e8 cd 12 00 00       	call   c000f28a <File::File(char const*, Process*)>
c000dfbd:	89 34 24             	mov    DWORD PTR [esp],esi
c000dfc0:	e8 a1 14 00 00       	call   c000f466 <File::unlink()>
c000dfc5:	58                   	pop    eax
c000dfc6:	5a                   	pop    edx
c000dfc7:	6a 12                	push   0x12
c000dfc9:	56                   	push   esi
c000dfca:	e8 1f 13 00 00       	call   c000f2ee <File::open(FileOpenMode)>
c000dfcf:	83 c4 10             	add    esp,0x10
c000dfd2:	85 c0                	test   eax,eax
c000dfd4:	0f 85 bf 00 00 00    	jne    c000e099 <Virt::setupPageSwapping(int)+0x102>
c000dfda:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000dfde:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000dfe6:	c1 e3 08             	shl    ebx,0x8
c000dfe9:	83 ec 0c             	sub    esp,0xc
c000dfec:	68 00 00 01 00       	push   0x10000
c000dff1:	e8 28 dc ff ff       	call   c000bc1e <malloc>
c000dff6:	83 c4 0c             	add    esp,0xc
c000dff9:	89 c7                	mov    edi,eax
c000dffb:	68 00 00 01 00       	push   0x10000
c000e000:	6a 00                	push   0x0
c000e002:	50                   	push   eax
c000e003:	e8 00 26 ff ff       	call   c0000608 <memset>
c000e008:	83 c4 10             	add    esp,0x10
c000e00b:	85 db                	test   ebx,ebx
c000e00d:	79 03                	jns    c000e012 <Virt::setupPageSwapping(int)+0x7b>
c000e00f:	83 c3 0f             	add    ebx,0xf
c000e012:	c1 fb 04             	sar    ebx,0x4
c000e015:	4b                   	dec    ebx
c000e016:	83 fb ff             	cmp    ebx,0xffffffff
c000e019:	74 4b                	je     c000e066 <Virt::setupPageSwapping(int)+0xcf>
c000e01b:	83 ec 0c             	sub    esp,0xc
c000e01e:	8b 06                	mov    eax,DWORD PTR [esi]
c000e020:	8d 54 24 18          	lea    edx,[esp+0x18]
c000e024:	52                   	push   edx
c000e025:	57                   	push   edi
c000e026:	6a 00                	push   0x0
c000e028:	68 00 00 01 00       	push   0x10000
c000e02d:	56                   	push   esi
c000e02e:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000e031:	83 c4 20             	add    esp,0x20
c000e034:	85 c0                	test   eax,eax
c000e036:	75 4e                	jne    c000e086 <Virt::setupPageSwapping(int)+0xef>
c000e038:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e03c:	3d 00 00 01 00       	cmp    eax,0x10000
c000e041:	74 d2                	je     c000e015 <Virt::setupPageSwapping(int)+0x7e>
c000e043:	83 ec 08             	sub    esp,0x8
c000e046:	4b                   	dec    ebx
c000e047:	50                   	push   eax
c000e048:	68 f2 05 02 c0       	push   0xc00205f2
c000e04d:	e8 09 0d 00 00       	call   c000ed5b <Dbg::kprintf(char const*, ...)>
c000e052:	c7 04 24 fb 05 02 c0 	mov    DWORD PTR [esp],0xc00205fb
c000e059:	e8 92 69 00 00       	call   c00149f0 <Krnl::panic(char const*)>
c000e05e:	83 c4 10             	add    esp,0x10
c000e061:	83 fb ff             	cmp    ebx,0xffffffff
c000e064:	75 b5                	jne    c000e01b <Virt::setupPageSwapping(int)+0x84>
c000e066:	83 ec 0c             	sub    esp,0xc
c000e069:	56                   	push   esi
c000e06a:	e8 dd 12 00 00       	call   c000f34c <File::close()>
c000e06f:	89 3c 24             	mov    DWORD PTR [esp],edi
c000e072:	e8 c7 db ff ff       	call   c000bc3e <rfree>
c000e077:	89 34 24             	mov    DWORD PTR [esp],esi
c000e07a:	8b 06                	mov    eax,DWORD PTR [esi]
c000e07c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000e07f:	83 c4 20             	add    esp,0x20
c000e082:	5b                   	pop    ebx
c000e083:	5e                   	pop    esi
c000e084:	5f                   	pop    edi
c000e085:	c3                   	ret    
c000e086:	83 ec 08             	sub    esp,0x8
c000e089:	50                   	push   eax
c000e08a:	68 da 05 02 c0       	push   0xc00205da
c000e08f:	e8 c7 0c 00 00       	call   c000ed5b <Dbg::kprintf(char const*, ...)>
c000e094:	83 c4 10             	add    esp,0x10
c000e097:	eb 9f                	jmp    c000e038 <Virt::setupPageSwapping(int)+0xa1>
c000e099:	83 ec 08             	sub    esp,0x8
c000e09c:	50                   	push   eax
c000e09d:	68 b6 05 02 c0       	push   0xc00205b6
c000e0a2:	e8 b4 0c 00 00       	call   c000ed5b <Dbg::kprintf(char const*, ...)>
c000e0a7:	c7 04 24 bf 05 02 c0 	mov    DWORD PTR [esp],0xc00205bf
c000e0ae:	e8 3d 69 00 00       	call   c00149f0 <Krnl::panic(char const*)>
c000e0b3:	83 c4 10             	add    esp,0x10
c000e0b6:	e9 1f ff ff ff       	jmp    c000dfda <Virt::setupPageSwapping(int)+0x43>
c000e0bb:	90                   	nop

c000e0bc <VAS::VAS()>:
c000e0bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e0c0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e0c7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e0cb:	a3 64 35 02 c0       	mov    ds:0xc0023564,eax
c000e0d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e0d4:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c000e0d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e0dc:	c6 00 01             	mov    BYTE PTR [eax],0x1
c000e0df:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e0e3:	c7 40 08 00 10 00 c2 	mov    DWORD PTR [eax+0x8],0xc2001000
c000e0ea:	90                   	nop
c000e0eb:	c3                   	ret    

c000e0ec <VAS::VAS(VAS*)>:
c000e0ec:	83 ec 0c             	sub    esp,0xc
c000e0ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e0f3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e0fa:	83 ec 0c             	sub    esp,0xc
c000e0fd:	68 10 04 02 c0       	push   0xc0020410
c000e102:	e8 e9 68 00 00       	call   c00149f0 <Krnl::panic(char const*)>
c000e107:	83 c4 10             	add    esp,0x10
c000e10a:	90                   	nop
c000e10b:	83 c4 0c             	add    esp,0xc
c000e10e:	c3                   	ret    
c000e10f:	90                   	nop

c000e110 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c000e110:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e114:	89 c2                	mov    edx,eax
c000e116:	c1 e8 0a             	shr    eax,0xa
c000e119:	c1 ea 16             	shr    edx,0x16
c000e11c:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000e121:	19 c9                	sbb    ecx,ecx
c000e123:	c1 e2 0c             	shl    edx,0xc
c000e126:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c000e12c:	25 fc 0f 00 00       	and    eax,0xffc
c000e131:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c000e138:	01 d0                	add    eax,edx
c000e13a:	c3                   	ret    
c000e13b:	90                   	nop

c000e13c <VAS::getPageTableEntry(unsigned long)>:
c000e13c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000e140:	89 ca                	mov    edx,ecx
c000e142:	c1 e9 0a             	shr    ecx,0xa
c000e145:	c1 ea 16             	shr    edx,0x16
c000e148:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c000e14e:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c000e154:	c1 e0 0c             	shl    eax,0xc
c000e157:	8d 04 08             	lea    eax,[eax+ecx*1]
c000e15a:	c3                   	ret    

c000e15b <Virt::freeKernelVirtualPages(unsigned long)>:
c000e15b:	57                   	push   edi
c000e15c:	56                   	push   esi
c000e15d:	be 01 00 00 00       	mov    esi,0x1
c000e162:	53                   	push   ebx
c000e163:	83 ec 10             	sub    esp,0x10
c000e166:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000e16a:	c1 eb 0c             	shr    ebx,0xc
c000e16d:	eb 3f                	jmp    c000e1ae <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c000e16f:	e8 1d fe ff ff       	call   c000df91 <Virt::getAKernelVAS()>
c000e174:	83 ec 08             	sub    esp,0x8
c000e177:	57                   	push   edi
c000e178:	50                   	push   eax
c000e179:	e8 be ff ff ff       	call   c000e13c <VAS::getPageTableEntry(unsigned long)>
c000e17e:	83 c4 10             	add    esp,0x10
c000e181:	8b 00                	mov    eax,DWORD PTR [eax]
c000e183:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000e187:	f6 c4 04             	test   ah,0x4
c000e18a:	75 5f                	jne    c000e1eb <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c000e18c:	80 fa 04             	cmp    dl,0x4
c000e18f:	74 78                	je     c000e209 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c000e191:	80 fa 02             	cmp    dl,0x2
c000e194:	0f 84 88 00 00 00    	je     c000e222 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c000e19a:	80 fa 03             	cmp    dl,0x3
c000e19d:	0f 84 ad 00 00 00    	je     c000e250 <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c000e1a3:	fe ca                	dec    dl
c000e1a5:	0f 84 92 00 00 00    	je     c000e23d <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c000e1ab:	43                   	inc    ebx
c000e1ac:	31 f6                	xor    esi,esi
c000e1ae:	53                   	push   ebx
c000e1af:	e8 29 fc ff ff       	call   c000dddd <Virt::getPageState(unsigned long)>
c000e1b4:	5f                   	pop    edi
c000e1b5:	89 df                	mov    edi,ebx
c000e1b7:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000e1bb:	c1 e7 0c             	shl    edi,0xc
c000e1be:	84 c0                	test   al,al
c000e1c0:	75 ad                	jne    c000e16f <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c000e1c2:	83 ec 0c             	sub    esp,0xc
c000e1c5:	68 01 06 02 c0       	push   0xc0020601
c000e1ca:	e8 21 68 00 00       	call   c00149f0 <Krnl::panic(char const*)>
c000e1cf:	e8 bd fd ff ff       	call   c000df91 <Virt::getAKernelVAS()>
c000e1d4:	5a                   	pop    edx
c000e1d5:	59                   	pop    ecx
c000e1d6:	57                   	push   edi
c000e1d7:	50                   	push   eax
c000e1d8:	e8 5f ff ff ff       	call   c000e13c <VAS::getPageTableEntry(unsigned long)>
c000e1dd:	83 c4 10             	add    esp,0x10
c000e1e0:	8b 00                	mov    eax,DWORD PTR [eax]
c000e1e2:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000e1e6:	f6 c4 04             	test   ah,0x4
c000e1e9:	74 c0                	je     c000e1ab <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000e1eb:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c000e1ef:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e1f4:	83 ec 0c             	sub    esp,0xc
c000e1f7:	50                   	push   eax
c000e1f8:	e8 41 df ff ff       	call   c000c13e <Phys::freePage(unsigned long)>
c000e1fd:	83 c4 10             	add    esp,0x10
c000e200:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000e204:	80 fa 04             	cmp    dl,0x4
c000e207:	75 88                	jne    c000e191 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c000e209:	89 f0                	mov    eax,esi
c000e20b:	84 c0                	test   al,al
c000e20d:	75 47                	jne    c000e256 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c000e20f:	c7 44 24 20 34 04 02 c0 	mov    DWORD PTR [esp+0x20],0xc0020434
c000e217:	83 c4 10             	add    esp,0x10
c000e21a:	5b                   	pop    ebx
c000e21b:	5e                   	pop    esi
c000e21c:	5f                   	pop    edi
c000e21d:	e9 ce 67 00 00       	jmp    c00149f0 <Krnl::panic(char const*)>
c000e222:	89 f0                	mov    eax,esi
c000e224:	84 c0                	test   al,al
c000e226:	75 15                	jne    c000e23d <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c000e228:	83 ec 0c             	sub    esp,0xc
c000e22b:	68 1d 06 02 c0       	push   0xc002061d
c000e230:	e8 bb 67 00 00       	call   c00149f0 <Krnl::panic(char const*)>
c000e235:	83 c4 10             	add    esp,0x10
c000e238:	e9 6e ff ff ff       	jmp    c000e1ab <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000e23d:	83 ec 08             	sub    esp,0x8
c000e240:	6a 00                	push   0x0
c000e242:	53                   	push   ebx
c000e243:	e8 60 fb ff ff       	call   c000dda8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e248:	83 c4 10             	add    esp,0x10
c000e24b:	e9 5b ff ff ff       	jmp    c000e1ab <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000e250:	89 f0                	mov    eax,esi
c000e252:	84 c0                	test   al,al
c000e254:	75 15                	jne    c000e26b <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c000e256:	83 ec 08             	sub    esp,0x8
c000e259:	6a 00                	push   0x0
c000e25b:	53                   	push   ebx
c000e25c:	e8 47 fb ff ff       	call   c000dda8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e261:	83 c4 10             	add    esp,0x10
c000e264:	83 c4 10             	add    esp,0x10
c000e267:	5b                   	pop    ebx
c000e268:	5e                   	pop    esi
c000e269:	5f                   	pop    edi
c000e26a:	c3                   	ret    
c000e26b:	c7 44 24 20 39 06 02 c0 	mov    DWORD PTR [esp+0x20],0xc0020639
c000e273:	83 c4 10             	add    esp,0x10
c000e276:	5b                   	pop    ebx
c000e277:	5e                   	pop    esi
c000e278:	5f                   	pop    edi
c000e279:	e9 72 67 00 00       	jmp    c00149f0 <Krnl::panic(char const*)>

c000e27e <VAS::freeAllocatedPages(unsigned long)>:
c000e27e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e282:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e286:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c000e28a:	74 09                	je     c000e295 <VAS::freeAllocatedPages(unsigned long)+0x17>
c000e28c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e290:	e9 c6 fe ff ff       	jmp    c000e15b <Virt::freeKernelVirtualPages(unsigned long)>
c000e295:	c7 44 24 04 58 04 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020458
c000e29d:	e9 b9 0a 00 00       	jmp    c000ed5b <Dbg::kprintf(char const*, ...)>

c000e2a2 <VAS::virtualToPhysical(unsigned long)>:
c000e2a2:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000e2a6:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000e2aa:	e8 8d fe ff ff       	call   c000e13c <VAS::getPageTableEntry(unsigned long)>
c000e2af:	5a                   	pop    edx
c000e2b0:	8b 00                	mov    eax,DWORD PTR [eax]
c000e2b2:	59                   	pop    ecx
c000e2b3:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e2b8:	c3                   	ret    
c000e2b9:	90                   	nop

c000e2ba <VAS::mapOtherVASIn(bool, VAS*)>:
c000e2ba:	83 ec 0c             	sub    esp,0xc
c000e2bd:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c000e2c2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e2c6:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000e2c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e2cd:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000e2d0:	19 c0                	sbb    eax,eax
c000e2d2:	83 ca 03             	or     edx,0x3
c000e2d5:	83 e0 fc             	and    eax,0xfffffffc
c000e2d8:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c000e2df:	e8 b1 03 01 00       	call   c001e695 <CPU::readCR3()>
c000e2e4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2e8:	83 c4 0c             	add    esp,0xc
c000e2eb:	e9 b7 03 01 00       	jmp    c001e6a7 <CPU::writeCR3(unsigned long)>

c000e2f0 <VAS::~VAS()>:
c000e2f0:	83 ec 2c             	sub    esp,0x2c
c000e2f3:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000e2fb:	e8 18 97 00 00       	call   c0017a18 <lockScheduler()>
c000e300:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000e305:	8b 00                	mov    eax,DWORD PTR [eax]
c000e307:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e30a:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c000e310:	83 ec 04             	sub    esp,0x4
c000e313:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000e317:	6a 01                	push   0x1
c000e319:	50                   	push   eax
c000e31a:	e8 9b ff ff ff       	call   c000e2ba <VAS::mapOtherVASIn(bool, VAS*)>
c000e31f:	83 c4 10             	add    esp,0x10
c000e322:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000e32a:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c000e332:	0f 8f d7 00 00 00    	jg     c000e40f <VAS::~VAS()+0x11f>
c000e338:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e33c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e33f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e343:	c1 e2 02             	shl    edx,0x2
c000e346:	01 d0                	add    eax,edx
c000e348:	8b 00                	mov    eax,DWORD PTR [eax]
c000e34a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e34e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e352:	83 e0 01             	and    eax,0x1
c000e355:	0f 84 ab 00 00 00    	je     c000e406 <VAS::~VAS()+0x116>
c000e35b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000e363:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c000e36b:	7f 75                	jg     c000e3e2 <VAS::~VAS()+0xf2>
c000e36d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e371:	c1 e0 0a             	shl    eax,0xa
c000e374:	89 c2                	mov    edx,eax
c000e376:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e37a:	01 d0                	add    eax,edx
c000e37c:	c1 e0 0c             	shl    eax,0xc
c000e37f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e383:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000e388:	8b 00                	mov    eax,DWORD PTR [eax]
c000e38a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e38d:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c000e393:	83 ec 04             	sub    esp,0x4
c000e396:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e39a:	6a 01                	push   0x1
c000e39c:	50                   	push   eax
c000e39d:	e8 6e fd ff ff       	call   c000e110 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c000e3a2:	83 c4 10             	add    esp,0x10
c000e3a5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e3a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e3ad:	8b 00                	mov    eax,DWORD PTR [eax]
c000e3af:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e3b3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e3b7:	25 01 04 00 00       	and    eax,0x401
c000e3bc:	3d 01 04 00 00       	cmp    eax,0x401
c000e3c1:	75 19                	jne    c000e3dc <VAS::~VAS()+0xec>
c000e3c3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e3c7:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e3cc:	83 ec 0c             	sub    esp,0xc
c000e3cf:	50                   	push   eax
c000e3d0:	e8 69 dd ff ff       	call   c000c13e <Phys::freePage(unsigned long)>
c000e3d5:	83 c4 10             	add    esp,0x10
c000e3d8:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000e3dc:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000e3e0:	eb 81                	jmp    c000e363 <VAS::~VAS()+0x73>
c000e3e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3e6:	25 00 04 00 00       	and    eax,0x400
c000e3eb:	74 19                	je     c000e406 <VAS::~VAS()+0x116>
c000e3ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3f1:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e3f6:	83 ec 0c             	sub    esp,0xc
c000e3f9:	50                   	push   eax
c000e3fa:	e8 3f dd ff ff       	call   c000c13e <Phys::freePage(unsigned long)>
c000e3ff:	83 c4 10             	add    esp,0x10
c000e402:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000e406:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000e40a:	e9 1b ff ff ff       	jmp    c000e32a <VAS::~VAS()+0x3a>
c000e40f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e413:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e416:	83 ec 0c             	sub    esp,0xc
c000e419:	50                   	push   eax
c000e41a:	e8 3c fd ff ff       	call   c000e15b <Virt::freeKernelVirtualPages(unsigned long)>
c000e41f:	83 c4 10             	add    esp,0x10
c000e422:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e426:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e429:	83 ec 0c             	sub    esp,0xc
c000e42c:	50                   	push   eax
c000e42d:	e8 0c dd ff ff       	call   c000c13e <Phys::freePage(unsigned long)>
c000e432:	83 c4 10             	add    esp,0x10
c000e435:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000e439:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e43d:	c1 e0 02             	shl    eax,0x2
c000e440:	83 ec 08             	sub    esp,0x8
c000e443:	50                   	push   eax
c000e444:	68 7c 04 02 c0       	push   0xc002047c
c000e449:	e8 0d 09 00 00       	call   c000ed5b <Dbg::kprintf(char const*, ...)>
c000e44e:	83 c4 10             	add    esp,0x10
c000e451:	e8 c4 95 00 00       	call   c0017a1a <unlockScheduler()>
c000e456:	90                   	nop
c000e457:	83 c4 2c             	add    esp,0x2c
c000e45a:	c3                   	ret    
c000e45b:	90                   	nop

c000e45c <VAS::mapPage(unsigned long, unsigned long, int)>:
c000e45c:	55                   	push   ebp
c000e45d:	57                   	push   edi
c000e45e:	56                   	push   esi
c000e45f:	53                   	push   ebx
c000e460:	83 ec 1c             	sub    esp,0x1c
c000e463:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000e467:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000e46b:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c000e471:	77 08                	ja     c000e47b <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c000e473:	0f 20 d8             	mov    eax,cr3
c000e476:	39 47 0c             	cmp    DWORD PTR [edi+0xc],eax
c000e479:	75 47                	jne    c000e4c2 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c000e47b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e47f:	09 d8                	or     eax,ebx
c000e481:	a9 ff 0f 00 00       	test   eax,0xfff
c000e486:	75 57                	jne    c000e4df <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c000e488:	89 de                	mov    esi,ebx
c000e48a:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e48d:	c1 ee 16             	shr    esi,0x16
c000e490:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c000e497:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c000e49b:	74 54                	je     c000e4f1 <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c000e49d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e4a1:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c000e4a7:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000e4ab:	c1 e6 0c             	shl    esi,0xc
c000e4ae:	c1 eb 0a             	shr    ebx,0xa
c000e4b1:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c000e4b7:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c000e4ba:	83 c4 1c             	add    esp,0x1c
c000e4bd:	5b                   	pop    ebx
c000e4be:	5e                   	pop    esi
c000e4bf:	5f                   	pop    edi
c000e4c0:	5d                   	pop    ebp
c000e4c1:	c3                   	ret    
c000e4c2:	83 ec 0c             	sub    esp,0xc
c000e4c5:	68 9c 04 02 c0       	push   0xc002049c
c000e4ca:	e8 8c 08 00 00       	call   c000ed5b <Dbg::kprintf(char const*, ...)>
c000e4cf:	83 c4 10             	add    esp,0x10
c000e4d2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e4d6:	09 d8                	or     eax,ebx
c000e4d8:	a9 ff 0f 00 00       	test   eax,0xfff
c000e4dd:	74 a9                	je     c000e488 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c000e4df:	83 ec 0c             	sub    esp,0xc
c000e4e2:	68 04 05 02 c0       	push   0xc0020504
c000e4e7:	e8 04 65 00 00       	call   c00149f0 <Krnl::panic(char const*)>
c000e4ec:	83 c4 10             	add    esp,0x10
c000e4ef:	eb 97                	jmp    c000e488 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c000e4f1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e4f5:	e8 ce dc ff ff       	call   c000c1c8 <Phys::allocatePage()>
c000e4fa:	89 c5                	mov    ebp,eax
c000e4fc:	e8 90 fa ff ff       	call   c000df91 <Virt::getAKernelVAS()>
c000e501:	83 ec 0c             	sub    esp,0xc
c000e504:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e508:	6a 01                	push   0x1
c000e50a:	e8 f2 f8 ff ff       	call   c000de01 <Virt::allocateKernelVirtualPages(int)>
c000e50f:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000e516:	6a 01                	push   0x1
c000e518:	50                   	push   eax
c000e519:	55                   	push   ebp
c000e51a:	81 cd 07 04 00 00    	or     ebp,0x407
c000e520:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000e524:	51                   	push   ecx
c000e525:	e8 1e 02 00 00       	call   c000e748 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e52a:	83 c4 1c             	add    esp,0x1c
c000e52d:	68 00 10 00 00       	push   0x1000
c000e532:	6a 00                	push   0x0
c000e534:	50                   	push   eax
c000e535:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e539:	e8 ca 20 ff ff       	call   c0000608 <memset>
c000e53e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000e542:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000e545:	e8 11 fc ff ff       	call   c000e15b <Virt::freeKernelVirtualPages(unsigned long)>
c000e54a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e54e:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e551:	83 c4 10             	add    esp,0x10
c000e554:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c000e557:	e9 41 ff ff ff       	jmp    c000e49d <VAS::mapPage(unsigned long, unsigned long, int)+0x41>

c000e55c <VAS::allocatePages(int, int)>:
c000e55c:	55                   	push   ebp
c000e55d:	57                   	push   edi
c000e55e:	56                   	push   esi
c000e55f:	53                   	push   ebx
c000e560:	83 ec 1c             	sub    esp,0x1c
c000e563:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000e567:	e8 7e 57 00 00       	call   c0013cea <thisCPU()>
c000e56c:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000e572:	83 e0 01             	and    eax,0x1
c000e575:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c000e579:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000e57d:	0f 85 d7 00 00 00    	jne    c000e65a <VAS::allocatePages(int, int)+0xfe>
c000e583:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000e586:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e58a:	85 c0                	test   eax,eax
c000e58c:	0f 84 ac 00 00 00    	je     c000e63e <VAS::allocatePages(int, int)+0xe2>
c000e592:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000e596:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e59a:	c1 e6 0c             	shl    esi,0xc
c000e59d:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c000e5a1:	85 c0                	test   eax,eax
c000e5a3:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000e5a6:	7e 33                	jle    c000e5db <VAS::allocatePages(int, int)+0x7f>
c000e5a8:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000e5ac:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000e5b0:	81 cd 00 04 00 00    	or     ebp,0x400
c000e5b6:	e8 0d dc ff ff       	call   c000c1c8 <Phys::allocatePage()>
c000e5bb:	55                   	push   ebp
c000e5bc:	53                   	push   ebx
c000e5bd:	50                   	push   eax
c000e5be:	57                   	push   edi
c000e5bf:	e8 98 fe ff ff       	call   c000e45c <VAS::mapPage(unsigned long, unsigned long, int)>
c000e5c4:	83 c4 10             	add    esp,0x10
c000e5c7:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000e5cc:	74 03                	je     c000e5d1 <VAS::allocatePages(int, int)+0x75>
c000e5ce:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000e5d1:	81 c3 00 10 00 00    	add    ebx,0x1000
c000e5d7:	39 de                	cmp    esi,ebx
c000e5d9:	75 db                	jne    c000e5b6 <VAS::allocatePages(int, int)+0x5a>
c000e5db:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000e5e0:	74 3f                	je     c000e621 <VAS::allocatePages(int, int)+0xc5>
c000e5e2:	c1 ee 0a             	shr    esi,0xa
c000e5e5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000e5e9:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c000e5ef:	c1 eb 0a             	shr    ebx,0xa
c000e5f2:	81 ee 00 00 40 00    	sub    esi,0x400000
c000e5f8:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000e5fe:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000e604:	39 f3                	cmp    ebx,esi
c000e606:	77 0d                	ja     c000e615 <VAS::allocatePages(int, int)+0xb9>
c000e608:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000e60b:	81 c3 00 10 00 00    	add    ebx,0x1000
c000e611:	39 de                	cmp    esi,ebx
c000e613:	73 f3                	jae    c000e608 <VAS::allocatePages(int, int)+0xac>
c000e615:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e619:	83 c4 1c             	add    esp,0x1c
c000e61c:	5b                   	pop    ebx
c000e61d:	5e                   	pop    esi
c000e61e:	5f                   	pop    edi
c000e61f:	5d                   	pop    ebp
c000e620:	c3                   	ret    
c000e621:	e8 6f 00 01 00       	call   c001e695 <CPU::readCR3()>
c000e626:	83 ec 0c             	sub    esp,0xc
c000e629:	50                   	push   eax
c000e62a:	e8 78 00 01 00       	call   c001e6a7 <CPU::writeCR3(unsigned long)>
c000e62f:	83 c4 10             	add    esp,0x10
c000e632:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e636:	83 c4 1c             	add    esp,0x1c
c000e639:	5b                   	pop    ebx
c000e63a:	5e                   	pop    esi
c000e63b:	5f                   	pop    edi
c000e63c:	5d                   	pop    ebp
c000e63d:	c3                   	ret    
c000e63e:	83 ec 0c             	sub    esp,0xc
c000e641:	68 28 05 02 c0       	push   0xc0020528
c000e646:	e8 a5 63 00 00       	call   c00149f0 <Krnl::panic(char const*)>
c000e64b:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000e64e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e652:	83 c4 10             	add    esp,0x10
c000e655:	e9 38 ff ff ff       	jmp    c000e592 <VAS::allocatePages(int, int)+0x36>
c000e65a:	83 ec 0c             	sub    esp,0xc
c000e65d:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000e661:	e8 9b f7 ff ff       	call   c000de01 <Virt::allocateKernelVirtualPages(int)>
c000e666:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e66a:	83 c4 10             	add    esp,0x10
c000e66d:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c000e672:	0f 87 94 00 00 00    	ja     c000e70c <VAS::allocatePages(int, int)+0x1b0>
c000e678:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000e67c:	85 d2                	test   edx,edx
c000e67e:	7e 3c                	jle    c000e6bc <VAS::allocatePages(int, int)+0x160>
c000e680:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000e684:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000e688:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000e68c:	c1 e5 0c             	shl    ebp,0xc
c000e68f:	81 ce 00 04 00 00    	or     esi,0x400
c000e695:	01 dd                	add    ebp,ebx
c000e697:	e8 2c db ff ff       	call   c000c1c8 <Phys::allocatePage()>
c000e69c:	56                   	push   esi
c000e69d:	53                   	push   ebx
c000e69e:	50                   	push   eax
c000e69f:	57                   	push   edi
c000e6a0:	e8 b7 fd ff ff       	call   c000e45c <VAS::mapPage(unsigned long, unsigned long, int)>
c000e6a5:	83 c4 10             	add    esp,0x10
c000e6a8:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000e6ad:	74 03                	je     c000e6b2 <VAS::allocatePages(int, int)+0x156>
c000e6af:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000e6b2:	81 c3 00 10 00 00    	add    ebx,0x1000
c000e6b8:	39 dd                	cmp    ebp,ebx
c000e6ba:	75 db                	jne    c000e697 <VAS::allocatePages(int, int)+0x13b>
c000e6bc:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000e6c1:	0f 84 5a ff ff ff    	je     c000e621 <VAS::allocatePages(int, int)+0xc5>
c000e6c7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e6cb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e6cf:	89 d3                	mov    ebx,edx
c000e6d1:	c1 e0 0c             	shl    eax,0xc
c000e6d4:	c1 eb 0a             	shr    ebx,0xa
c000e6d7:	01 d0                	add    eax,edx
c000e6d9:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000e6df:	c1 e8 0a             	shr    eax,0xa
c000e6e2:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000e6e8:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e6ed:	2d 00 00 40 00       	sub    eax,0x400000
c000e6f2:	39 c3                	cmp    ebx,eax
c000e6f4:	0f 87 1b ff ff ff    	ja     c000e615 <VAS::allocatePages(int, int)+0xb9>
c000e6fa:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000e6fd:	81 c3 00 10 00 00    	add    ebx,0x1000
c000e703:	39 d8                	cmp    eax,ebx
c000e705:	73 f3                	jae    c000e6fa <VAS::allocatePages(int, int)+0x19e>
c000e707:	e9 09 ff ff ff       	jmp    c000e615 <VAS::allocatePages(int, int)+0xb9>
c000e70c:	e8 d9 55 00 00       	call   c0013cea <thisCPU()>
c000e711:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c000e718:	0f 84 5a ff ff ff    	je     c000e678 <VAS::allocatePages(int, int)+0x11c>
c000e71e:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c000e726:	e9 4d ff ff ff       	jmp    c000e678 <VAS::allocatePages(int, int)+0x11c>
c000e72b:	90                   	nop

c000e72c <VAS::setCPUSpecific(unsigned long)>:
c000e72c:	83 ec 0c             	sub    esp,0xc
c000e72f:	6a 05                	push   0x5
c000e731:	68 00 00 40 c2       	push   0xc2400000
c000e736:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e73a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e73e:	e8 19 fd ff ff       	call   c000e45c <VAS::mapPage(unsigned long, unsigned long, int)>
c000e743:	83 c4 1c             	add    esp,0x1c
c000e746:	c3                   	ret    
c000e747:	90                   	nop

c000e748 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c000e748:	55                   	push   ebp
c000e749:	57                   	push   edi
c000e74a:	56                   	push   esi
c000e74b:	53                   	push   ebx
c000e74c:	83 ec 1c             	sub    esp,0x1c
c000e74f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000e753:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000e757:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c000e75b:	e8 8a 55 00 00       	call   c0013cea <thisCPU()>
c000e760:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000e766:	83 e0 01             	and    eax,0x1
c000e769:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000e76d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e771:	85 c0                	test   eax,eax
c000e773:	7e 39                	jle    c000e7ae <VAS::mapRange(unsigned long, unsigned long, int, int)+0x66>
c000e775:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e779:	89 f3                	mov    ebx,esi
c000e77b:	c1 e0 0c             	shl    eax,0xc
c000e77e:	01 f0                	add    eax,esi
c000e780:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e784:	55                   	push   ebp
c000e785:	53                   	push   ebx
c000e786:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e78a:	29 f0                	sub    eax,esi
c000e78c:	01 d8                	add    eax,ebx
c000e78e:	50                   	push   eax
c000e78f:	57                   	push   edi
c000e790:	e8 c7 fc ff ff       	call   c000e45c <VAS::mapPage(unsigned long, unsigned long, int)>
c000e795:	83 c4 10             	add    esp,0x10
c000e798:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000e79d:	74 03                	je     c000e7a2 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x5a>
c000e79f:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000e7a2:	81 c3 00 10 00 00    	add    ebx,0x1000
c000e7a8:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c000e7ac:	75 d6                	jne    c000e784 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x3c>
c000e7ae:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000e7b3:	74 42                	je     c000e7f7 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xaf>
c000e7b5:	89 f3                	mov    ebx,esi
c000e7b7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e7bb:	c1 eb 0a             	shr    ebx,0xa
c000e7be:	c1 e0 0c             	shl    eax,0xc
c000e7c1:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000e7c7:	01 f0                	add    eax,esi
c000e7c9:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000e7cf:	c1 e8 0a             	shr    eax,0xa
c000e7d2:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e7d7:	2d 00 00 40 00       	sub    eax,0x400000
c000e7dc:	39 c3                	cmp    ebx,eax
c000e7de:	77 0d                	ja     c000e7ed <VAS::mapRange(unsigned long, unsigned long, int, int)+0xa5>
c000e7e0:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000e7e3:	81 c3 00 10 00 00    	add    ebx,0x1000
c000e7e9:	39 d8                	cmp    eax,ebx
c000e7eb:	73 f3                	jae    c000e7e0 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x98>
c000e7ed:	83 c4 1c             	add    esp,0x1c
c000e7f0:	89 f0                	mov    eax,esi
c000e7f2:	5b                   	pop    ebx
c000e7f3:	5e                   	pop    esi
c000e7f4:	5f                   	pop    edi
c000e7f5:	5d                   	pop    ebp
c000e7f6:	c3                   	ret    
c000e7f7:	e8 99 fe 00 00       	call   c001e695 <CPU::readCR3()>
c000e7fc:	83 ec 0c             	sub    esp,0xc
c000e7ff:	50                   	push   eax
c000e800:	e8 a2 fe 00 00       	call   c001e6a7 <CPU::writeCR3(unsigned long)>
c000e805:	89 f0                	mov    eax,esi
c000e807:	83 c4 10             	add    esp,0x10
c000e80a:	83 c4 1c             	add    esp,0x1c
c000e80d:	5b                   	pop    ebx
c000e80e:	5e                   	pop    esi
c000e80f:	5f                   	pop    edi
c000e810:	5d                   	pop    ebp
c000e811:	c3                   	ret    

c000e812 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c000e812:	55                   	push   ebp
c000e813:	57                   	push   edi
c000e814:	56                   	push   esi
c000e815:	53                   	push   ebx
c000e816:	83 ec 1c             	sub    esp,0x1c
c000e819:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e81d:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000e821:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c000e825:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000e829:	a9 ff 0f 00 00       	test   eax,0xfff
c000e82e:	75 4a                	jne    c000e87a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c000e830:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000e834:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e837:	c1 eb 16             	shr    ebx,0x16
c000e83a:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c000e841:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c000e845:	74 4d                	je     c000e894 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c000e847:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e84b:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c000e84f:	c1 e8 0a             	shr    eax,0xa
c000e852:	80 fa 01             	cmp    dl,0x1
c000e855:	19 d2                	sbb    edx,edx
c000e857:	c1 e3 0c             	shl    ebx,0xc
c000e85a:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c000e85e:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c000e864:	25 fc 0f 00 00       	and    eax,0xffc
c000e869:	01 d8                	add    eax,ebx
c000e86b:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c000e872:	83 c4 1c             	add    esp,0x1c
c000e875:	5b                   	pop    ebx
c000e876:	5e                   	pop    esi
c000e877:	5f                   	pop    edi
c000e878:	5d                   	pop    ebp
c000e879:	c3                   	ret    
c000e87a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000e87e:	83 ec 0c             	sub    esp,0xc
c000e881:	68 54 05 02 c0       	push   0xc0020554
c000e886:	e8 65 61 00 00       	call   c00149f0 <Krnl::panic(char const*)>
c000e88b:	83 c4 10             	add    esp,0x10
c000e88e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e892:	eb 9c                	jmp    c000e830 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c000e894:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e898:	e8 2b d9 ff ff       	call   c000c1c8 <Phys::allocatePage()>
c000e89d:	89 c5                	mov    ebp,eax
c000e89f:	e8 ed f6 ff ff       	call   c000df91 <Virt::getAKernelVAS()>
c000e8a4:	83 ec 0c             	sub    esp,0xc
c000e8a7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e8ab:	6a 01                	push   0x1
c000e8ad:	e8 4f f5 ff ff       	call   c000de01 <Virt::allocateKernelVirtualPages(int)>
c000e8b2:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000e8b9:	6a 01                	push   0x1
c000e8bb:	50                   	push   eax
c000e8bc:	55                   	push   ebp
c000e8bd:	81 cd 07 04 00 00    	or     ebp,0x407
c000e8c3:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000e8c7:	51                   	push   ecx
c000e8c8:	e8 7b fe ff ff       	call   c000e748 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e8cd:	83 c4 1c             	add    esp,0x1c
c000e8d0:	68 00 10 00 00       	push   0x1000
c000e8d5:	6a 00                	push   0x0
c000e8d7:	50                   	push   eax
c000e8d8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e8dc:	e8 27 1d ff ff       	call   c0000608 <memset>
c000e8e1:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000e8e5:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000e8e8:	e8 6e f8 ff ff       	call   c000e15b <Virt::freeKernelVirtualPages(unsigned long)>
c000e8ed:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e8f0:	83 c4 10             	add    esp,0x10
c000e8f3:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c000e8f6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e8fa:	e9 48 ff ff ff       	jmp    c000e847 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>
c000e8ff:	90                   	nop

c000e900 <VAS::VAS(bool)>:
c000e900:	53                   	push   ebx
c000e901:	83 ec 28             	sub    esp,0x28
c000e904:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e908:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000e90c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e910:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e917:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e91b:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000e91f:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000e922:	e8 a1 d8 ff ff       	call   c000c1c8 <Phys::allocatePage()>
c000e927:	89 c2                	mov    edx,eax
c000e929:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e92d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e930:	e8 5c f6 ff ff       	call   c000df91 <Virt::getAKernelVAS()>
c000e935:	89 c3                	mov    ebx,eax
c000e937:	83 ec 0c             	sub    esp,0xc
c000e93a:	6a 01                	push   0x1
c000e93c:	e8 c0 f4 ff ff       	call   c000de01 <Virt::allocateKernelVirtualPages(int)>
c000e941:	83 c4 10             	add    esp,0x10
c000e944:	89 c2                	mov    edx,eax
c000e946:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e94a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e94d:	83 ec 0c             	sub    esp,0xc
c000e950:	6a 03                	push   0x3
c000e952:	6a 01                	push   0x1
c000e954:	52                   	push   edx
c000e955:	50                   	push   eax
c000e956:	53                   	push   ebx
c000e957:	e8 ec fd ff ff       	call   c000e748 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e95c:	83 c4 20             	add    esp,0x20
c000e95f:	89 c2                	mov    edx,eax
c000e961:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e965:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000e968:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000e970:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000e978:	7f 1c                	jg     c000e996 <VAS::VAS(bool)+0x96>
c000e97a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e97e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e981:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e985:	c1 e2 02             	shl    edx,0x2
c000e988:	01 d0                	add    eax,edx
c000e98a:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000e990:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000e994:	eb da                	jmp    c000e970 <VAS::VAS(bool)+0x70>
c000e996:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000e99e:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000e9a6:	7f 71                	jg     c000ea19 <VAS::VAS(bool)+0x119>
c000e9a8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e9ac:	2d 00 02 00 00       	sub    eax,0x200
c000e9b1:	c1 e0 0c             	shl    eax,0xc
c000e9b4:	83 c8 03             	or     eax,0x3
c000e9b7:	89 c3                	mov    ebx,eax
c000e9b9:	e8 2c 53 00 00       	call   c0013cea <thisCPU()>
c000e9be:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000e9c4:	83 e0 10             	and    eax,0x10
c000e9c7:	84 c0                	test   al,al
c000e9c9:	74 07                	je     c000e9d2 <VAS::VAS(bool)+0xd2>
c000e9cb:	b8 00 01 00 00       	mov    eax,0x100
c000e9d0:	eb 05                	jmp    c000e9d7 <VAS::VAS(bool)+0xd7>
c000e9d2:	b8 00 00 00 00       	mov    eax,0x0
c000e9d7:	09 d8                	or     eax,ebx
c000e9d9:	89 c1                	mov    ecx,eax
c000e9db:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e9df:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e9e2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e9e6:	c1 e2 02             	shl    edx,0x2
c000e9e9:	01 d0                	add    eax,edx
c000e9eb:	89 ca                	mov    edx,ecx
c000e9ed:	89 10                	mov    DWORD PTR [eax],edx
c000e9ef:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e9f3:	2d 40 03 00 00       	sub    eax,0x340
c000e9f8:	83 f8 7f             	cmp    eax,0x7f
c000e9fb:	77 16                	ja     c000ea13 <VAS::VAS(bool)+0x113>
c000e9fd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ea01:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ea04:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ea08:	c1 e2 02             	shl    edx,0x2
c000ea0b:	01 d0                	add    eax,edx
c000ea0d:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000ea13:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000ea17:	eb 85                	jmp    c000e99e <VAS::VAS(bool)+0x9e>
c000ea19:	e8 cc 52 00 00       	call   c0013cea <thisCPU()>
c000ea1e:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000ea24:	83 e0 10             	and    eax,0x10
c000ea27:	84 c0                	test   al,al
c000ea29:	74 07                	je     c000ea32 <VAS::VAS(bool)+0x132>
c000ea2b:	b8 03 41 00 00       	mov    eax,0x4103
c000ea30:	eb 05                	jmp    c000ea37 <VAS::VAS(bool)+0x137>
c000ea32:	b8 03 40 00 00       	mov    eax,0x4003
c000ea37:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000ea3b:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000ea3e:	81 c2 20 0c 00 00    	add    edx,0xc20
c000ea44:	89 02                	mov    DWORD PTR [edx],eax
c000ea46:	e8 9f 52 00 00       	call   c0013cea <thisCPU()>
c000ea4b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000ea51:	83 ec 08             	sub    esp,0x8
c000ea54:	50                   	push   eax
c000ea55:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ea59:	e8 ce fc ff ff       	call   c000e72c <VAS::setCPUSpecific(unsigned long)>
c000ea5e:	83 c4 10             	add    esp,0x10
c000ea61:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ea65:	8b 58 0c             	mov    ebx,DWORD PTR [eax+0xc]
c000ea68:	e8 7d 52 00 00       	call   c0013cea <thisCPU()>
c000ea6d:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000ea73:	83 e0 10             	and    eax,0x10
c000ea76:	84 c0                	test   al,al
c000ea78:	74 07                	je     c000ea81 <VAS::VAS(bool)+0x181>
c000ea7a:	b8 00 01 00 00       	mov    eax,0x100
c000ea7f:	eb 05                	jmp    c000ea86 <VAS::VAS(bool)+0x186>
c000ea81:	b8 00 00 00 00       	mov    eax,0x0
c000ea86:	09 d8                	or     eax,ebx
c000ea88:	89 c2                	mov    edx,eax
c000ea8a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ea8e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ea91:	05 fc 0f 00 00       	add    eax,0xffc
c000ea96:	83 ca 03             	or     edx,0x3
c000ea99:	89 10                	mov    DWORD PTR [eax],edx
c000ea9b:	e8 4a 52 00 00       	call   c0013cea <thisCPU()>
c000eaa0:	83 ec 0c             	sub    esp,0xc
c000eaa3:	50                   	push   eax
c000eaa4:	e8 9f 19 00 00       	call   c0010448 <Device::getName()>
c000eaa9:	83 c4 10             	add    esp,0x10
c000eaac:	83 ec 08             	sub    esp,0x8
c000eaaf:	68 53 06 02 c0       	push   0xc0020653
c000eab4:	50                   	push   eax
c000eab5:	e8 3e 1c ff ff       	call   c00006f8 <strcmp>
c000eaba:	83 c4 10             	add    esp,0x10
c000eabd:	85 c0                	test   eax,eax
c000eabf:	0f 94 c0             	sete   al
c000eac2:	84 c0                	test   al,al
c000eac4:	74 64                	je     c000eb2a <VAS::VAS(bool)+0x22a>
c000eac6:	e8 30 8f 00 00       	call   c00179fb <disableIRQs()>
c000eacb:	e8 1a 52 00 00       	call   c0013cea <thisCPU()>
c000ead0:	05 7c 09 00 00       	add    eax,0x97c
c000ead5:	83 ec 0c             	sub    esp,0xc
c000ead8:	50                   	push   eax
c000ead9:	e8 b2 cb ff ff       	call   c000b690 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000eade:	83 c4 10             	add    esp,0x10
c000eae1:	25 00 f0 ff ff       	and    eax,0xfffff000
c000eae6:	89 c3                	mov    ebx,eax
c000eae8:	e8 fd 51 00 00       	call   c0013cea <thisCPU()>
c000eaed:	05 7c 09 00 00       	add    eax,0x97c
c000eaf2:	83 ec 0c             	sub    esp,0xc
c000eaf5:	50                   	push   eax
c000eaf6:	e8 95 cb ff ff       	call   c000b690 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000eafb:	83 c4 10             	add    esp,0x10
c000eafe:	83 ec 08             	sub    esp,0x8
c000eb01:	50                   	push   eax
c000eb02:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000eb06:	e8 31 f6 ff ff       	call   c000e13c <VAS::getPageTableEntry(unsigned long)>
c000eb0b:	83 c4 10             	add    esp,0x10
c000eb0e:	8b 00                	mov    eax,DWORD PTR [eax]
c000eb10:	25 00 f0 ff ff       	and    eax,0xfffff000
c000eb15:	6a 11                	push   0x11
c000eb17:	53                   	push   ebx
c000eb18:	50                   	push   eax
c000eb19:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000eb1d:	e8 3a f9 ff ff       	call   c000e45c <VAS::mapPage(unsigned long, unsigned long, int)>
c000eb22:	83 c4 10             	add    esp,0x10
c000eb25:	e8 df 8e 00 00       	call   c0017a09 <enableIRQs()>
c000eb2a:	90                   	nop
c000eb2b:	83 c4 28             	add    esp,0x28
c000eb2e:	5b                   	pop    ebx
c000eb2f:	c3                   	ret    

c000eb30 <mapVASFirstTime>:
c000eb30:	55                   	push   ebp
c000eb31:	57                   	push   edi
c000eb32:	56                   	push   esi
c000eb33:	53                   	push   ebx
c000eb34:	83 ec 0c             	sub    esp,0xc
c000eb37:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000eb3c:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000eb3f:	4a                   	dec    edx
c000eb40:	0f 84 99 00 00 00    	je     c000ebdf <mapVASFirstTime+0xaf>
c000eb46:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c000eb49:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c000eb4c:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000eb51:	c1 e5 15             	shl    ebp,0x15
c000eb54:	be 00 c0 e7 01       	mov    esi,0x1e7c000
c000eb59:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c000eb5f:	29 eb                	sub    ebx,ebp
c000eb61:	29 ee                	sub    esi,ebp
c000eb63:	e8 60 d6 ff ff       	call   c000c1c8 <Phys::allocatePage()>
c000eb68:	83 ec 0c             	sub    esp,0xc
c000eb6b:	68 03 04 00 00       	push   0x403
c000eb70:	6a 01                	push   0x1
c000eb72:	53                   	push   ebx
c000eb73:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000eb79:	50                   	push   eax
c000eb7a:	57                   	push   edi
c000eb7b:	e8 c8 fb ff ff       	call   c000e748 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000eb80:	83 c4 20             	add    esp,0x20
c000eb83:	39 f3                	cmp    ebx,esi
c000eb85:	75 dc                	jne    c000eb63 <mapVASFirstTime+0x33>
c000eb87:	be 00 f0 ff 01       	mov    esi,0x1fff000
c000eb8c:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c000eb91:	29 ee                	sub    esi,ebp
c000eb93:	29 e8                	sub    eax,ebp
c000eb95:	89 c5                	mov    ebp,eax
c000eb97:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c000eb9b:	19 db                	sbb    ebx,ebx
c000eb9d:	e8 26 d6 ff ff       	call   c000c1c8 <Phys::allocatePage()>
c000eba2:	83 e3 04             	and    ebx,0x4
c000eba5:	83 ec 0c             	sub    esp,0xc
c000eba8:	81 c3 03 04 00 00    	add    ebx,0x403
c000ebae:	53                   	push   ebx
c000ebaf:	6a 01                	push   0x1
c000ebb1:	56                   	push   esi
c000ebb2:	81 ee 00 10 00 00    	sub    esi,0x1000
c000ebb8:	50                   	push   eax
c000ebb9:	57                   	push   edi
c000ebba:	e8 89 fb ff ff       	call   c000e748 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ebbf:	83 c4 20             	add    esp,0x20
c000ebc2:	39 f5                	cmp    ebp,esi
c000ebc4:	75 d1                	jne    c000eb97 <mapVASFirstTime+0x67>
c000ebc6:	e8 ca fa 00 00       	call   c001e695 <CPU::readCR3()>
c000ebcb:	83 ec 0c             	sub    esp,0xc
c000ebce:	50                   	push   eax
c000ebcf:	e8 d3 fa 00 00       	call   c001e6a7 <CPU::writeCR3(unsigned long)>
c000ebd4:	83 c4 10             	add    esp,0x10
c000ebd7:	83 c4 0c             	add    esp,0xc
c000ebda:	5b                   	pop    ebx
c000ebdb:	5e                   	pop    esi
c000ebdc:	5f                   	pop    edi
c000ebdd:	5d                   	pop    ebp
c000ebde:	c3                   	ret    
c000ebdf:	83 ec 0c             	sub    esp,0xc
c000ebe2:	68 61 06 02 c0       	push   0xc0020661
c000ebe7:	e8 6f 01 00 00       	call   c000ed5b <Dbg::kprintf(char const*, ...)>
c000ebec:	83 c4 10             	add    esp,0x10
c000ebef:	83 c4 0c             	add    esp,0xc
c000ebf2:	5b                   	pop    ebx
c000ebf3:	5e                   	pop    esi
c000ebf4:	5f                   	pop    edi
c000ebf5:	5d                   	pop    ebp
c000ebf6:	c3                   	ret    

c000ebf7 <__cxa_atexit>:
c000ebf7:	31 c0                	xor    eax,eax
c000ebf9:	c3                   	ret    

c000ebfa <__cxa_finalize>:
c000ebfa:	c3                   	ret    

c000ebfb <__stack_chk_fail>:
c000ebfb:	55                   	push   ebp
c000ebfc:	89 e5                	mov    ebp,esp
c000ebfe:	83 ec 10             	sub    esp,0x10
c000ec01:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ec04:	68 7a 06 02 c0       	push   0xc002067a
c000ec09:	e8 4d 01 00 00       	call   c000ed5b <Dbg::kprintf(char const*, ...)>
c000ec0e:	58                   	pop    eax
c000ec0f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ec12:	5a                   	pop    edx
c000ec13:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000ec16:	68 7a 06 02 c0       	push   0xc002067a
c000ec1b:	e8 3b 01 00 00       	call   c000ed5b <Dbg::kprintf(char const*, ...)>
c000ec20:	59                   	pop    ecx
c000ec21:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ec24:	5a                   	pop    edx
c000ec25:	8b 00                	mov    eax,DWORD PTR [eax]
c000ec27:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000ec2a:	68 7a 06 02 c0       	push   0xc002067a
c000ec2f:	e8 27 01 00 00       	call   c000ed5b <Dbg::kprintf(char const*, ...)>
c000ec34:	59                   	pop    ecx
c000ec35:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ec38:	5a                   	pop    edx
c000ec39:	8b 00                	mov    eax,DWORD PTR [eax]
c000ec3b:	8b 00                	mov    eax,DWORD PTR [eax]
c000ec3d:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000ec40:	68 7a 06 02 c0       	push   0xc002067a
c000ec45:	e8 11 01 00 00       	call   c000ed5b <Dbg::kprintf(char const*, ...)>
c000ec4a:	c7 04 24 82 06 02 c0 	mov    DWORD PTR [esp],0xc0020682
c000ec51:	e8 9a 5d 00 00       	call   c00149f0 <Krnl::panic(char const*)>
c000ec56:	83 c4 10             	add    esp,0x10
c000ec59:	c9                   	leave  
c000ec5a:	c3                   	ret    

c000ec5b <__cxa_pure_virtual>:
c000ec5b:	83 ec 18             	sub    esp,0x18
c000ec5e:	68 9a 06 02 c0       	push   0xc002069a
c000ec63:	e8 88 5d 00 00       	call   c00149f0 <Krnl::panic(char const*)>
c000ec68:	83 c4 1c             	add    esp,0x1c
c000ec6b:	c3                   	ret    

c000ec6c <operator new(unsigned long)>:
c000ec6c:	e9 ad cf ff ff       	jmp    c000bc1e <malloc>

c000ec71 <operator new[](unsigned long)>:
c000ec71:	e9 a8 cf ff ff       	jmp    c000bc1e <malloc>

c000ec76 <operator delete(void*)>:
c000ec76:	e9 c3 cf ff ff       	jmp    c000bc3e <rfree>

c000ec7b <operator delete(void*, unsigned long)>:
c000ec7b:	e9 be cf ff ff       	jmp    c000bc3e <rfree>

c000ec80 <operator delete[](void*)>:
c000ec80:	e9 b9 cf ff ff       	jmp    c000bc3e <rfree>

c000ec85 <operator delete[](void*, unsigned long)>:
c000ec85:	e9 b4 cf ff ff       	jmp    c000bc3e <rfree>

c000ec8a <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000ec8a:	57                   	push   edi
c000ec8b:	b9 3f 00 00 00       	mov    ecx,0x3f
c000ec90:	56                   	push   esi
c000ec91:	be b0 06 02 c0       	mov    esi,0xc00206b0
c000ec96:	53                   	push   ebx
c000ec97:	83 ec 40             	sub    esp,0x40
c000ec9a:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000ec9e:	8d 7c 24 01          	lea    edi,[esp+0x1]
c000eca2:	fc                   	cld    
c000eca3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000eca5:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c000eca9:	83 f9 3e             	cmp    ecx,0x3e
c000ecac:	7e 05                	jle    c000ecb3 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>
c000ecae:	b9 3e 00 00 00       	mov    ecx,0x3e
c000ecb3:	89 df                	mov    edi,ebx
c000ecb5:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000ecb9:	eb 02                	jmp    c000ecbd <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x33>
c000ecbb:	89 c7                	mov    edi,eax
c000ecbd:	31 d2                	xor    edx,edx
c000ecbf:	46                   	inc    esi
c000ecc0:	89 f8                	mov    eax,edi
c000ecc2:	f7 f1                	div    ecx
c000ecc4:	39 cf                	cmp    edi,ecx
c000ecc6:	73 f3                	jae    c000ecbb <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x31>
c000ecc8:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000eccb:	eb 02                	jmp    c000eccf <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x45>
c000eccd:	89 c3                	mov    ebx,eax
c000eccf:	31 d2                	xor    edx,edx
c000ecd1:	4e                   	dec    esi
c000ecd2:	89 d8                	mov    eax,ebx
c000ecd4:	f7 f1                	div    ecx
c000ecd6:	39 cb                	cmp    ebx,ecx
c000ecd8:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c000ecdc:	88 16                	mov    BYTE PTR [esi],dl
c000ecde:	73 ed                	jae    c000eccd <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x43>
c000ece0:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000ece4:	83 c4 40             	add    esp,0x40
c000ece7:	5b                   	pop    ebx
c000ece8:	5e                   	pop    esi
c000ece9:	5f                   	pop    edi
c000ecea:	c3                   	ret    

c000eceb <Dbg::logc(char)>:
c000eceb:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ecef:	ba fd 03 00 00       	mov    edx,0x3fd
c000ecf4:	ec                   	in     al,dx
c000ecf5:	a8 20                	test   al,0x20
c000ecf7:	74 fb                	je     c000ecf4 <Dbg::logc(char)+0x9>
c000ecf9:	ba f8 03 00 00       	mov    edx,0x3f8
c000ecfe:	88 c8                	mov    al,cl
c000ed00:	ee                   	out    dx,al
c000ed01:	c3                   	ret    

c000ed02 <Dbg::logs(char*)>:
c000ed02:	53                   	push   ebx
c000ed03:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000ed07:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000ed0a:	84 c0                	test   al,al
c000ed0c:	74 0f                	je     c000ed1d <Dbg::logs(char*)+0x1b>
c000ed0e:	50                   	push   eax
c000ed0f:	43                   	inc    ebx
c000ed10:	e8 d6 ff ff ff       	call   c000eceb <Dbg::logc(char)>
c000ed15:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000ed18:	5a                   	pop    edx
c000ed19:	84 c0                	test   al,al
c000ed1b:	75 f1                	jne    c000ed0e <Dbg::logs(char*)+0xc>
c000ed1d:	5b                   	pop    ebx
c000ed1e:	c3                   	ret    

c000ed1f <Dbg::logWriteInt(unsigned int)>:
c000ed1f:	83 ec 10             	sub    esp,0x10
c000ed22:	6a 0a                	push   0xa
c000ed24:	8d 44 24 08          	lea    eax,[esp+0x8]
c000ed28:	50                   	push   eax
c000ed29:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ed2d:	e8 58 ff ff ff       	call   c000ec8a <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000ed32:	50                   	push   eax
c000ed33:	e8 ca ff ff ff       	call   c000ed02 <Dbg::logs(char*)>
c000ed38:	83 c4 20             	add    esp,0x20
c000ed3b:	c3                   	ret    

c000ed3c <Dbg::logWriteIntBase(unsigned int, int)>:
c000ed3c:	83 ec 10             	sub    esp,0x10
c000ed3f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ed43:	8d 44 24 08          	lea    eax,[esp+0x8]
c000ed47:	50                   	push   eax
c000ed48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ed4c:	e8 39 ff ff ff       	call   c000ec8a <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000ed51:	50                   	push   eax
c000ed52:	e8 ab ff ff ff       	call   c000ed02 <Dbg::logs(char*)>
c000ed57:	83 c4 20             	add    esp,0x20
c000ed5a:	c3                   	ret    

c000ed5b <Dbg::kprintf(char const*, ...)>:
c000ed5b:	55                   	push   ebp
c000ed5c:	57                   	push   edi
c000ed5d:	56                   	push   esi
c000ed5e:	53                   	push   ebx
c000ed5f:	83 ec 0c             	sub    esp,0xc
c000ed62:	8d 44 24 24          	lea    eax,[esp+0x24]
c000ed66:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000ed6a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ed6e:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000ed71:	84 c0                	test   al,al
c000ed73:	74 4a                	je     c000edbf <Dbg::kprintf(char const*, ...)+0x64>
c000ed75:	31 db                	xor    ebx,ebx
c000ed77:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000ed7a:	3c 25                	cmp    al,0x25
c000ed7c:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c000ed7f:	0f 85 e4 00 00 00    	jne    c000ee69 <Dbg::kprintf(char const*, ...)+0x10e>
c000ed85:	83 c3 02             	add    ebx,0x2
c000ed88:	8a 07                	mov    al,BYTE PTR [edi]
c000ed8a:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c000ed8d:	83 e8 25             	sub    eax,0x25
c000ed90:	3c 53                	cmp    al,0x53
c000ed92:	0f 87 ba 00 00 00    	ja     c000ee52 <Dbg::kprintf(char const*, ...)+0xf7>
c000ed98:	0f b6 c0             	movzx  eax,al
c000ed9b:	ff 24 85 f0 06 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdf910]
c000eda2:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000eda6:	89 c8                	mov    eax,ecx
c000eda8:	83 c1 04             	add    ecx,0x4
c000edab:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000edaf:	ff 30                	push   DWORD PTR [eax]
c000edb1:	e8 4c ff ff ff       	call   c000ed02 <Dbg::logs(char*)>
c000edb6:	58                   	pop    eax
c000edb7:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000edbb:	84 c0                	test   al,al
c000edbd:	75 b8                	jne    c000ed77 <Dbg::kprintf(char const*, ...)+0x1c>
c000edbf:	83 c4 0c             	add    esp,0xc
c000edc2:	5b                   	pop    ebx
c000edc3:	5e                   	pop    esi
c000edc4:	5f                   	pop    edi
c000edc5:	5d                   	pop    ebp
c000edc6:	c3                   	ret    
c000edc7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000edcb:	89 d0                	mov    eax,edx
c000edcd:	83 c2 04             	add    edx,0x4
c000edd0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000edd4:	ff 30                	push   DWORD PTR [eax]
c000edd6:	e8 44 ff ff ff       	call   c000ed1f <Dbg::logWriteInt(unsigned int)>
c000eddb:	58                   	pop    eax
c000eddc:	eb d9                	jmp    c000edb7 <Dbg::kprintf(char const*, ...)+0x5c>
c000edde:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ede2:	89 d0                	mov    eax,edx
c000ede4:	83 c2 04             	add    edx,0x4
c000ede7:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000edea:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000edee:	50                   	push   eax
c000edef:	e8 f7 fe ff ff       	call   c000eceb <Dbg::logc(char)>
c000edf4:	58                   	pop    eax
c000edf5:	eb c0                	jmp    c000edb7 <Dbg::kprintf(char const*, ...)+0x5c>
c000edf7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000edfb:	89 c8                	mov    eax,ecx
c000edfd:	83 c1 04             	add    ecx,0x4
c000ee00:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000ee04:	ff 30                	push   DWORD PTR [eax]
c000ee06:	e8 14 ff ff ff       	call   c000ed1f <Dbg::logWriteInt(unsigned int)>
c000ee0b:	5f                   	pop    edi
c000ee0c:	eb a9                	jmp    c000edb7 <Dbg::kprintf(char const*, ...)+0x5c>
c000ee0e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ee12:	89 c8                	mov    eax,ecx
c000ee14:	83 c1 04             	add    ecx,0x4
c000ee17:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000ee1b:	6a 10                	push   0x10
c000ee1d:	ff 30                	push   DWORD PTR [eax]
c000ee1f:	e8 18 ff ff ff       	call   c000ed3c <Dbg::logWriteIntBase(unsigned int, int)>
c000ee24:	59                   	pop    ecx
c000ee25:	5f                   	pop    edi
c000ee26:	eb 8f                	jmp    c000edb7 <Dbg::kprintf(char const*, ...)+0x5c>
c000ee28:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ee2c:	89 d0                	mov    eax,edx
c000ee2e:	83 c2 08             	add    edx,0x8
c000ee31:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ee35:	6a 10                	push   0x10
c000ee37:	ff 30                	push   DWORD PTR [eax]
c000ee39:	e8 fe fe ff ff       	call   c000ed3c <Dbg::logWriteIntBase(unsigned int, int)>
c000ee3e:	58                   	pop    eax
c000ee3f:	5a                   	pop    edx
c000ee40:	e9 72 ff ff ff       	jmp    c000edb7 <Dbg::kprintf(char const*, ...)+0x5c>
c000ee45:	6a 25                	push   0x25
c000ee47:	e8 9f fe ff ff       	call   c000eceb <Dbg::logc(char)>
c000ee4c:	58                   	pop    eax
c000ee4d:	e9 65 ff ff ff       	jmp    c000edb7 <Dbg::kprintf(char const*, ...)+0x5c>
c000ee52:	6a 25                	push   0x25
c000ee54:	e8 92 fe ff ff       	call   c000eceb <Dbg::logc(char)>
c000ee59:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000ee5c:	50                   	push   eax
c000ee5d:	e8 89 fe ff ff       	call   c000eceb <Dbg::logc(char)>
c000ee62:	5a                   	pop    edx
c000ee63:	59                   	pop    ecx
c000ee64:	e9 4e ff ff ff       	jmp    c000edb7 <Dbg::kprintf(char const*, ...)+0x5c>
c000ee69:	50                   	push   eax
c000ee6a:	89 eb                	mov    ebx,ebp
c000ee6c:	e8 7a fe ff ff       	call   c000eceb <Dbg::logc(char)>
c000ee71:	89 fd                	mov    ebp,edi
c000ee73:	58                   	pop    eax
c000ee74:	e9 3e ff ff ff       	jmp    c000edb7 <Dbg::kprintf(char const*, ...)+0x5c>
c000ee79:	90                   	nop

c000ee7a <File::read(unsigned long long, void*, int*)>:
c000ee7a:	53                   	push   ebx
c000ee7b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ee7f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ee83:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000ee8a:	3c 19                	cmp    al,0x19
c000ee8c:	77 35                	ja     c000eec3 <File::read(unsigned long long, void*, int*)+0x49>
c000ee8e:	8b 04 85 00 3a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc600]
c000ee95:	85 c0                	test   eax,eax
c000ee97:	74 2a                	je     c000eec3 <File::read(unsigned long long, void*, int*)+0x49>
c000ee99:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000ee9f:	85 c0                	test   eax,eax
c000eea1:	74 20                	je     c000eec3 <File::read(unsigned long long, void*, int*)+0x49>
c000eea3:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000eea7:	74 21                	je     c000eeca <File::read(unsigned long long, void*, int*)+0x50>
c000eea9:	8b 08                	mov    ecx,DWORD PTR [eax]
c000eeab:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000eeaf:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000eeb5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000eeb9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000eebd:	5b                   	pop    ebx
c000eebe:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000eec1:	ff e0                	jmp    eax
c000eec3:	b8 0b 00 00 00       	mov    eax,0xb
c000eec8:	eb 05                	jmp    c000eecf <File::read(unsigned long long, void*, int*)+0x55>
c000eeca:	b8 05 00 00 00       	mov    eax,0x5
c000eecf:	5b                   	pop    ebx
c000eed0:	c3                   	ret    
c000eed1:	90                   	nop

c000eed2 <File::write(unsigned long long, void*, int*)>:
c000eed2:	53                   	push   ebx
c000eed3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000eed7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000eedb:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000eee2:	3c 19                	cmp    al,0x19
c000eee4:	77 35                	ja     c000ef1b <File::write(unsigned long long, void*, int*)+0x49>
c000eee6:	8b 04 85 00 3a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc600]
c000eeed:	85 c0                	test   eax,eax
c000eeef:	74 2a                	je     c000ef1b <File::write(unsigned long long, void*, int*)+0x49>
c000eef1:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000eef7:	85 c0                	test   eax,eax
c000eef9:	74 20                	je     c000ef1b <File::write(unsigned long long, void*, int*)+0x49>
c000eefb:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000eeff:	74 21                	je     c000ef22 <File::write(unsigned long long, void*, int*)+0x50>
c000ef01:	8b 08                	mov    ecx,DWORD PTR [eax]
c000ef03:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ef07:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000ef0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ef11:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ef15:	5b                   	pop    ebx
c000ef16:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000ef19:	ff e0                	jmp    eax
c000ef1b:	b8 0b 00 00 00       	mov    eax,0xb
c000ef20:	eb 05                	jmp    c000ef27 <File::write(unsigned long long, void*, int*)+0x55>
c000ef22:	b8 05 00 00 00       	mov    eax,0x5
c000ef27:	5b                   	pop    ebx
c000ef28:	c3                   	ret    
c000ef29:	90                   	nop

c000ef2a <Directory::read(unsigned long long, void*, int*)>:
c000ef2a:	53                   	push   ebx
c000ef2b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ef2f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ef33:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000ef3a:	3c 19                	cmp    al,0x19
c000ef3c:	77 35                	ja     c000ef73 <Directory::read(unsigned long long, void*, int*)+0x49>
c000ef3e:	8b 04 85 00 3a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc600]
c000ef45:	85 c0                	test   eax,eax
c000ef47:	74 2a                	je     c000ef73 <Directory::read(unsigned long long, void*, int*)+0x49>
c000ef49:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000ef4f:	85 c0                	test   eax,eax
c000ef51:	74 20                	je     c000ef73 <Directory::read(unsigned long long, void*, int*)+0x49>
c000ef53:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ef57:	74 21                	je     c000ef7a <Directory::read(unsigned long long, void*, int*)+0x50>
c000ef59:	8b 08                	mov    ecx,DWORD PTR [eax]
c000ef5b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ef5f:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000ef65:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ef69:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ef6d:	5b                   	pop    ebx
c000ef6e:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000ef71:	ff e0                	jmp    eax
c000ef73:	b8 0b 00 00 00       	mov    eax,0xb
c000ef78:	eb 05                	jmp    c000ef7f <Directory::read(unsigned long long, void*, int*)+0x55>
c000ef7a:	b8 05 00 00 00       	mov    eax,0x5
c000ef7f:	5b                   	pop    ebx
c000ef80:	c3                   	ret    
c000ef81:	90                   	nop

c000ef82 <Directory::write(unsigned long long, void*, int*)>:
c000ef82:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ef86:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000ef8d:	b8 0b 00 00 00       	mov    eax,0xb
c000ef92:	80 fa 19             	cmp    dl,0x19
c000ef95:	77 18                	ja     c000efaf <Directory::write(unsigned long long, void*, int*)+0x2d>
c000ef97:	8b 14 95 00 3a 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc600]
c000ef9e:	85 d2                	test   edx,edx
c000efa0:	74 0d                	je     c000efaf <Directory::write(unsigned long long, void*, int*)+0x2d>
c000efa2:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c000efa9:	19 c0                	sbb    eax,eax
c000efab:	83 e0 0a             	and    eax,0xa
c000efae:	40                   	inc    eax
c000efaf:	c3                   	ret    

c000efb0 <File::isAtty()>:
c000efb0:	31 c0                	xor    eax,eax
c000efb2:	c3                   	ret    
c000efb3:	90                   	nop

c000efb4 <Directory::isAtty()>:
c000efb4:	31 c0                	xor    eax,eax
c000efb6:	c3                   	ret    
c000efb7:	90                   	nop

c000efb8 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000efb8:	b8 0a 00 00 00       	mov    eax,0xa
c000efbd:	c3                   	ret    

c000efbe <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000efbe:	b8 0a 00 00 00       	mov    eax,0xa
c000efc3:	c3                   	ret    

c000efc4 <File::~File()>:
c000efc4:	83 ec 0c             	sub    esp,0xc
c000efc7:	ba ac 08 02 c0       	mov    edx,0xc00208ac
c000efcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000efd0:	89 10                	mov    DWORD PTR [eax],edx
c000efd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000efd6:	83 ec 0c             	sub    esp,0xc
c000efd9:	50                   	push   eax
c000efda:	e8 93 eb ff ff       	call   c000db72 <UnixFile::~UnixFile()>
c000efdf:	83 c4 10             	add    esp,0x10
c000efe2:	90                   	nop
c000efe3:	83 c4 0c             	add    esp,0xc
c000efe6:	c3                   	ret    
c000efe7:	90                   	nop

c000efe8 <File::~File()>:
c000efe8:	83 ec 0c             	sub    esp,0xc
c000efeb:	83 ec 0c             	sub    esp,0xc
c000efee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eff2:	e8 cd ff ff ff       	call   c000efc4 <File::~File()>
c000eff7:	83 c4 10             	add    esp,0x10
c000effa:	83 ec 08             	sub    esp,0x8
c000effd:	68 14 01 00 00       	push   0x114
c000f002:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f006:	e8 70 fc ff ff       	call   c000ec7b <operator delete(void*, unsigned long)>
c000f00b:	83 c4 10             	add    esp,0x10
c000f00e:	83 c4 0c             	add    esp,0xc
c000f011:	c3                   	ret    

c000f012 <Directory::~Directory()>:
c000f012:	83 ec 0c             	sub    esp,0xc
c000f015:	ba c8 08 02 c0       	mov    edx,0xc00208c8
c000f01a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f01e:	89 10                	mov    DWORD PTR [eax],edx
c000f020:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f024:	83 ec 0c             	sub    esp,0xc
c000f027:	50                   	push   eax
c000f028:	e8 45 eb ff ff       	call   c000db72 <UnixFile::~UnixFile()>
c000f02d:	83 c4 10             	add    esp,0x10
c000f030:	90                   	nop
c000f031:	83 c4 0c             	add    esp,0xc
c000f034:	c3                   	ret    
c000f035:	90                   	nop

c000f036 <Directory::~Directory()>:
c000f036:	83 ec 0c             	sub    esp,0xc
c000f039:	83 ec 0c             	sub    esp,0xc
c000f03c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f040:	e8 cd ff ff ff       	call   c000f012 <Directory::~Directory()>
c000f045:	83 c4 10             	add    esp,0x10
c000f048:	83 ec 08             	sub    esp,0x8
c000f04b:	68 14 01 00 00       	push   0x114
c000f050:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f054:	e8 22 fc ff ff       	call   c000ec7b <operator delete(void*, unsigned long)>
c000f059:	83 c4 10             	add    esp,0x10
c000f05c:	83 c4 0c             	add    esp,0xc
c000f05f:	c3                   	ret    

c000f060 <Filesystem::Filesystem()>:
c000f060:	ba 48 08 02 c0       	mov    edx,0xc0020848
c000f065:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f069:	89 10                	mov    DWORD PTR [eax],edx
c000f06b:	8b 15 68 35 02 c0    	mov    edx,DWORD PTR ds:0xc0023568
c000f071:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f075:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000f078:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f07c:	a3 68 35 02 c0       	mov    ds:0xc0023568,eax
c000f081:	90                   	nop
c000f082:	c3                   	ret    
c000f083:	90                   	nop

c000f084 <Filesystem::~Filesystem()>:
c000f084:	ba 48 08 02 c0       	mov    edx,0xc0020848
c000f089:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f08d:	89 10                	mov    DWORD PTR [eax],edx
c000f08f:	90                   	nop
c000f090:	c3                   	ret    
c000f091:	90                   	nop

c000f092 <Filesystem::~Filesystem()>:
c000f092:	83 ec 0c             	sub    esp,0xc
c000f095:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000f099:	e8 e6 ff ff ff       	call   c000f084 <Filesystem::~Filesystem()>
c000f09e:	83 c4 04             	add    esp,0x4
c000f0a1:	83 ec 08             	sub    esp,0x8
c000f0a4:	6a 08                	push   0x8
c000f0a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f0aa:	e8 cc fb ff ff       	call   c000ec7b <operator delete(void*, unsigned long)>
c000f0af:	83 c4 10             	add    esp,0x10
c000f0b2:	83 c4 0c             	add    esp,0xc
c000f0b5:	c3                   	ret    

c000f0b6 <initVFS()>:
c000f0b6:	83 ec 18             	sub    esp,0x18
c000f0b9:	6a 08                	push   0x8
c000f0bb:	e8 ac fb ff ff       	call   c000ec6c <operator new(unsigned long)>
c000f0c0:	89 04 24             	mov    DWORD PTR [esp],eax
c000f0c3:	e8 32 a8 00 00       	call   c00198fa <FAT::FAT()>
c000f0c8:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f0cf:	e8 98 fb ff ff       	call   c000ec6c <operator new(unsigned long)>
c000f0d4:	89 04 24             	mov    DWORD PTR [esp],eax
c000f0d7:	e8 94 ba 00 00       	call   c001ab70 <ISO9660::ISO9660()>
c000f0dc:	83 c4 1c             	add    esp,0x1c
c000f0df:	c3                   	ret    

c000f0e0 <standardiseFiles(char*, char const*, char const*)>:
c000f0e0:	55                   	push   ebp
c000f0e1:	57                   	push   edi
c000f0e2:	56                   	push   esi
c000f0e3:	53                   	push   ebx
c000f0e4:	81 ec 10 04 00 00    	sub    esp,0x410
c000f0ea:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000f0f1:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000f0f8:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000f0ff:	68 00 04 00 00       	push   0x400
c000f104:	6a 00                	push   0x0
c000f106:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000f10a:	56                   	push   esi
c000f10b:	e8 f8 14 ff ff       	call   c0000608 <memset>
c000f110:	83 c4 10             	add    esp,0x10
c000f113:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000f117:	75 0b                	jne    c000f124 <standardiseFiles(char*, char const*, char const*)+0x44>
c000f119:	50                   	push   eax
c000f11a:	50                   	push   eax
c000f11b:	57                   	push   edi
c000f11c:	56                   	push   esi
c000f11d:	e8 85 15 ff ff       	call   c00006a7 <strcpy>
c000f122:	eb 41                	jmp    c000f165 <standardiseFiles(char*, char const*, char const*)+0x85>
c000f124:	8a 07                	mov    al,BYTE PTR [edi]
c000f126:	3c 5c                	cmp    al,0x5c
c000f128:	74 04                	je     c000f12e <standardiseFiles(char*, char const*, char const*)+0x4e>
c000f12a:	3c 2f                	cmp    al,0x2f
c000f12c:	75 18                	jne    c000f146 <standardiseFiles(char*, char const*, char const*)+0x66>
c000f12e:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000f131:	3c 60                	cmp    al,0x60
c000f133:	7e 03                	jle    c000f138 <standardiseFiles(char*, char const*, char const*)+0x58>
c000f135:	83 e8 20             	sub    eax,0x20
c000f138:	88 04 24             	mov    BYTE PTR [esp],al
c000f13b:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000f142:	50                   	push   eax
c000f143:	50                   	push   eax
c000f144:	eb 18                	jmp    c000f15e <standardiseFiles(char*, char const*, char const*)+0x7e>
c000f146:	50                   	push   eax
c000f147:	50                   	push   eax
c000f148:	55                   	push   ebp
c000f149:	56                   	push   esi
c000f14a:	e8 58 15 ff ff       	call   c00006a7 <strcpy>
c000f14f:	5a                   	pop    edx
c000f150:	59                   	pop    ecx
c000f151:	68 b9 1a 02 c0       	push   0xc0021ab9
c000f156:	56                   	push   esi
c000f157:	e8 02 16 ff ff       	call   c000075e <strcat>
c000f15c:	5d                   	pop    ebp
c000f15d:	58                   	pop    eax
c000f15e:	57                   	push   edi
c000f15f:	56                   	push   esi
c000f160:	e8 f9 15 ff ff       	call   c000075e <strcat>
c000f165:	83 c4 10             	add    esp,0x10
c000f168:	8a 04 24             	mov    al,BYTE PTR [esp]
c000f16b:	3c 60                	cmp    al,0x60
c000f16d:	7e 03                	jle    c000f172 <standardiseFiles(char*, char const*, char const*)+0x92>
c000f16f:	83 e8 20             	sub    eax,0x20
c000f172:	88 04 24             	mov    BYTE PTR [esp],al
c000f175:	88 03                	mov    BYTE PTR [ebx],al
c000f177:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000f17e:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000f184:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000f188:	bf 03 00 00 00       	mov    edi,0x3
c000f18d:	b8 03 00 00 00       	mov    eax,0x3
c000f192:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c000f195:	84 d2                	test   dl,dl
c000f197:	0f 84 91 00 00 00    	je     c000f22e <standardiseFiles(char*, char const*, char const*)+0x14e>
c000f19d:	8d 4f 01             	lea    ecx,[edi+0x1]
c000f1a0:	80 fa 5c             	cmp    dl,0x5c
c000f1a3:	74 05                	je     c000f1aa <standardiseFiles(char*, char const*, char const*)+0xca>
c000f1a5:	80 fa 2f             	cmp    dl,0x2f
c000f1a8:	75 12                	jne    c000f1bc <standardiseFiles(char*, char const*, char const*)+0xdc>
c000f1aa:	89 c5                	mov    ebp,eax
c000f1ac:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000f1b1:	74 09                	je     c000f1bc <standardiseFiles(char*, char const*, char const*)+0xdc>
c000f1b3:	40                   	inc    eax
c000f1b4:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000f1b8:	89 cf                	mov    edi,ecx
c000f1ba:	eb d6                	jmp    c000f192 <standardiseFiles(char*, char const*, char const*)+0xb2>
c000f1bc:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000f1c1:	75 5b                	jne    c000f21e <standardiseFiles(char*, char const*, char const*)+0x13e>
c000f1c3:	80 fa 2e             	cmp    dl,0x2e
c000f1c6:	75 56                	jne    c000f21e <standardiseFiles(char*, char const*, char const*)+0x13e>
c000f1c8:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000f1cc:	74 19                	je     c000f1e7 <standardiseFiles(char*, char const*, char const*)+0x107>
c000f1ce:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000f1d3:	74 53                	je     c000f228 <standardiseFiles(char*, char const*, char const*)+0x148>
c000f1d5:	89 f9                	mov    ecx,edi
c000f1d7:	41                   	inc    ecx
c000f1d8:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000f1db:	80 fa 2f             	cmp    dl,0x2f
c000f1de:	74 f7                	je     c000f1d7 <standardiseFiles(char*, char const*, char const*)+0xf7>
c000f1e0:	80 fa 5c             	cmp    dl,0x5c
c000f1e3:	74 f2                	je     c000f1d7 <standardiseFiles(char*, char const*, char const*)+0xf7>
c000f1e5:	eb d1                	jmp    c000f1b8 <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f1e7:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000f1ec:	74 3a                	je     c000f228 <standardiseFiles(char*, char const*, char const*)+0x148>
c000f1ee:	83 f8 03             	cmp    eax,0x3
c000f1f1:	74 c5                	je     c000f1b8 <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f1f3:	41                   	inc    ecx
c000f1f4:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000f1f7:	80 fa 2f             	cmp    dl,0x2f
c000f1fa:	74 f7                	je     c000f1f3 <standardiseFiles(char*, char const*, char const*)+0x113>
c000f1fc:	80 fa 5c             	cmp    dl,0x5c
c000f1ff:	74 f2                	je     c000f1f3 <standardiseFiles(char*, char const*, char const*)+0x113>
c000f201:	48                   	dec    eax
c000f202:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000f206:	75 06                	jne    c000f20e <standardiseFiles(char*, char const*, char const*)+0x12e>
c000f208:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000f20c:	eb f3                	jmp    c000f201 <standardiseFiles(char*, char const*, char const*)+0x121>
c000f20e:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000f212:	74 07                	je     c000f21b <standardiseFiles(char*, char const*, char const*)+0x13b>
c000f214:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000f218:	48                   	dec    eax
c000f219:	eb f3                	jmp    c000f20e <standardiseFiles(char*, char const*, char const*)+0x12e>
c000f21b:	40                   	inc    eax
c000f21c:	eb 9a                	jmp    c000f1b8 <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f21e:	80 fa 2f             	cmp    dl,0x2f
c000f221:	74 95                	je     c000f1b8 <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f223:	80 fa 5c             	cmp    dl,0x5c
c000f226:	74 90                	je     c000f1b8 <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f228:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000f22b:	40                   	inc    eax
c000f22c:	eb 8a                	jmp    c000f1b8 <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f22e:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000f232:	83 ec 0c             	sub    esp,0xc
c000f235:	53                   	push   ebx
c000f236:	e8 ea 13 ff ff       	call   c0000625 <strlen>
c000f23b:	83 c4 10             	add    esp,0x10
c000f23e:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000f243:	75 26                	jne    c000f26b <standardiseFiles(char*, char const*, char const*)+0x18b>
c000f245:	83 ec 0c             	sub    esp,0xc
c000f248:	53                   	push   ebx
c000f249:	e8 d7 13 ff ff       	call   c0000625 <strlen>
c000f24e:	83 c4 10             	add    esp,0x10
c000f251:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000f256:	74 26                	je     c000f27e <standardiseFiles(char*, char const*, char const*)+0x19e>
c000f258:	83 ec 0c             	sub    esp,0xc
c000f25b:	53                   	push   ebx
c000f25c:	e8 c4 13 ff ff       	call   c0000625 <strlen>
c000f261:	83 c4 10             	add    esp,0x10
c000f264:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000f269:	eb c7                	jmp    c000f232 <standardiseFiles(char*, char const*, char const*)+0x152>
c000f26b:	83 ec 0c             	sub    esp,0xc
c000f26e:	53                   	push   ebx
c000f26f:	e8 b1 13 ff ff       	call   c0000625 <strlen>
c000f274:	83 c4 10             	add    esp,0x10
c000f277:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000f27c:	74 c7                	je     c000f245 <standardiseFiles(char*, char const*, char const*)+0x165>
c000f27e:	81 c4 0c 04 00 00    	add    esp,0x40c
c000f284:	5b                   	pop    ebx
c000f285:	5e                   	pop    esi
c000f286:	5f                   	pop    edi
c000f287:	5d                   	pop    ebp
c000f288:	c3                   	ret    
c000f289:	90                   	nop

c000f28a <File::File(char const*, Process*)>:
c000f28a:	83 ec 0c             	sub    esp,0xc
c000f28d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f291:	83 ec 08             	sub    esp,0x8
c000f294:	6a 00                	push   0x0
c000f296:	50                   	push   eax
c000f297:	e8 34 e7 ff ff       	call   c000d9d0 <UnixFile::UnixFile(int)>
c000f29c:	83 c4 10             	add    esp,0x10
c000f29f:	ba ac 08 02 c0       	mov    edx,0xc00208ac
c000f2a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f2a8:	89 10                	mov    DWORD PTR [eax],edx
c000f2aa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f2ae:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000f2b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f2b8:	83 c0 0d             	add    eax,0xd
c000f2bb:	83 ec 04             	sub    esp,0x4
c000f2be:	52                   	push   edx
c000f2bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f2c3:	50                   	push   eax
c000f2c4:	e8 17 fe ff ff       	call   c000f0e0 <standardiseFiles(char*, char const*, char const*)>
c000f2c9:	83 c4 10             	add    esp,0x10
c000f2cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f2d0:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000f2d3:	8d 50 bf             	lea    edx,[eax-0x41]
c000f2d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f2da:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000f2e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f2e4:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000f2e8:	90                   	nop
c000f2e9:	83 c4 0c             	add    esp,0xc
c000f2ec:	c3                   	ret    
c000f2ed:	90                   	nop

c000f2ee <File::open(FileOpenMode)>:
c000f2ee:	53                   	push   ebx
c000f2ef:	b8 0b 00 00 00       	mov    eax,0xb
c000f2f4:	83 ec 08             	sub    esp,0x8
c000f2f7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f2fb:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000f302:	80 fa 19             	cmp    dl,0x19
c000f305:	77 40                	ja     c000f347 <File::open(FileOpenMode)+0x59>
c000f307:	8b 14 95 00 3a 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc600]
c000f30e:	85 d2                	test   edx,edx
c000f310:	74 35                	je     c000f347 <File::open(FileOpenMode)+0x59>
c000f312:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000f318:	85 d2                	test   edx,edx
c000f31a:	74 2b                	je     c000f347 <File::open(FileOpenMode)+0x59>
c000f31c:	b8 06 00 00 00       	mov    eax,0x6
c000f321:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000f325:	75 20                	jne    c000f347 <File::open(FileOpenMode)+0x59>
c000f327:	8b 02                	mov    eax,DWORD PTR [edx]
c000f329:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000f32f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f333:	51                   	push   ecx
c000f334:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000f337:	51                   	push   ecx
c000f338:	52                   	push   edx
c000f339:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000f33c:	83 c4 10             	add    esp,0x10
c000f33f:	85 c0                	test   eax,eax
c000f341:	75 04                	jne    c000f347 <File::open(FileOpenMode)+0x59>
c000f343:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000f347:	83 c4 08             	add    esp,0x8
c000f34a:	5b                   	pop    ebx
c000f34b:	c3                   	ret    

c000f34c <File::close()>:
c000f34c:	53                   	push   ebx
c000f34d:	b8 0b 00 00 00       	mov    eax,0xb
c000f352:	83 ec 08             	sub    esp,0x8
c000f355:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000f359:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000f360:	80 fa 19             	cmp    dl,0x19
c000f363:	77 41                	ja     c000f3a6 <File::close()+0x5a>
c000f365:	8b 1c 95 00 3a 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdc600]
c000f36c:	85 db                	test   ebx,ebx
c000f36e:	74 36                	je     c000f3a6 <File::close()+0x5a>
c000f370:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000f377:	74 2d                	je     c000f3a6 <File::close()+0x5a>
c000f379:	b8 05 00 00 00       	mov    eax,0x5
c000f37e:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000f382:	74 22                	je     c000f3a6 <File::close()+0x5a>
c000f384:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000f388:	8b 04 95 00 3a 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdc600]
c000f38f:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000f395:	53                   	push   ebx
c000f396:	53                   	push   ebx
c000f397:	8b 10                	mov    edx,DWORD PTR [eax]
c000f399:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000f39f:	50                   	push   eax
c000f3a0:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c000f3a3:	83 c4 10             	add    esp,0x10
c000f3a6:	83 c4 08             	add    esp,0x8
c000f3a9:	5b                   	pop    ebx
c000f3aa:	c3                   	ret    
c000f3ab:	90                   	nop

c000f3ac <File::seek(unsigned long long)>:
c000f3ac:	56                   	push   esi
c000f3ad:	53                   	push   ebx
c000f3ae:	b8 0b 00 00 00       	mov    eax,0xb
c000f3b3:	51                   	push   ecx
c000f3b4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000f3b8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000f3bc:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000f3c3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000f3c7:	80 fa 19             	cmp    dl,0x19
c000f3ca:	77 31                	ja     c000f3fd <File::seek(unsigned long long)+0x51>
c000f3cc:	8b 14 95 00 3a 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc600]
c000f3d3:	85 d2                	test   edx,edx
c000f3d5:	74 26                	je     c000f3fd <File::seek(unsigned long long)+0x51>
c000f3d7:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000f3dd:	85 d2                	test   edx,edx
c000f3df:	74 1c                	je     c000f3fd <File::seek(unsigned long long)+0x51>
c000f3e1:	b8 05 00 00 00       	mov    eax,0x5
c000f3e6:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000f3ea:	74 11                	je     c000f3fd <File::seek(unsigned long long)+0x51>
c000f3ec:	8b 02                	mov    eax,DWORD PTR [edx]
c000f3ee:	53                   	push   ebx
c000f3ef:	51                   	push   ecx
c000f3f0:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000f3f6:	52                   	push   edx
c000f3f7:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000f3fa:	83 c4 10             	add    esp,0x10
c000f3fd:	5a                   	pop    edx
c000f3fe:	5b                   	pop    ebx
c000f3ff:	5e                   	pop    esi
c000f400:	c3                   	ret    
c000f401:	90                   	nop

c000f402 <File::tell(unsigned long long*)>:
c000f402:	83 ec 0c             	sub    esp,0xc
c000f405:	b8 0b 00 00 00       	mov    eax,0xb
c000f40a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000f40e:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000f415:	80 fa 19             	cmp    dl,0x19
c000f418:	77 34                	ja     c000f44e <File::tell(unsigned long long*)+0x4c>
c000f41a:	8b 14 95 00 3a 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc600]
c000f421:	85 d2                	test   edx,edx
c000f423:	74 29                	je     c000f44e <File::tell(unsigned long long*)+0x4c>
c000f425:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000f42b:	85 d2                	test   edx,edx
c000f42d:	74 1f                	je     c000f44e <File::tell(unsigned long long*)+0x4c>
c000f42f:	b8 05 00 00 00       	mov    eax,0x5
c000f434:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000f438:	74 14                	je     c000f44e <File::tell(unsigned long long*)+0x4c>
c000f43a:	50                   	push   eax
c000f43b:	8b 02                	mov    eax,DWORD PTR [edx]
c000f43d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f441:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000f447:	52                   	push   edx
c000f448:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000f44b:	83 c4 10             	add    esp,0x10
c000f44e:	83 c4 0c             	add    esp,0xc
c000f451:	c3                   	ret    

c000f452 <File::rewind()>:
c000f452:	83 ec 10             	sub    esp,0x10
c000f455:	6a 00                	push   0x0
c000f457:	6a 00                	push   0x0
c000f459:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f45d:	e8 4a ff ff ff       	call   c000f3ac <File::seek(unsigned long long)>
c000f462:	83 c4 1c             	add    esp,0x1c
c000f465:	c3                   	ret    

c000f466 <File::unlink()>:
c000f466:	83 ec 0c             	sub    esp,0xc
c000f469:	b8 0b 00 00 00       	mov    eax,0xb
c000f46e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f472:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f479:	80 f9 19             	cmp    cl,0x19
c000f47c:	77 2f                	ja     c000f4ad <File::unlink()+0x47>
c000f47e:	8b 0c 8d 00 3a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdc600]
c000f485:	85 c9                	test   ecx,ecx
c000f487:	74 24                	je     c000f4ad <File::unlink()+0x47>
c000f489:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f48f:	85 c9                	test   ecx,ecx
c000f491:	74 1a                	je     c000f4ad <File::unlink()+0x47>
c000f493:	b8 06 00 00 00       	mov    eax,0x6
c000f498:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f49c:	75 0f                	jne    c000f4ad <File::unlink()+0x47>
c000f49e:	83 c2 0d             	add    edx,0xd
c000f4a1:	50                   	push   eax
c000f4a2:	50                   	push   eax
c000f4a3:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f4a5:	52                   	push   edx
c000f4a6:	51                   	push   ecx
c000f4a7:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000f4aa:	83 c4 10             	add    esp,0x10
c000f4ad:	83 c4 0c             	add    esp,0xc
c000f4b0:	c3                   	ret    
c000f4b1:	90                   	nop

c000f4b2 <File::rename(char const*)>:
c000f4b2:	83 ec 0c             	sub    esp,0xc
c000f4b5:	b8 0b 00 00 00       	mov    eax,0xb
c000f4ba:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f4be:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f4c5:	80 f9 19             	cmp    cl,0x19
c000f4c8:	77 32                	ja     c000f4fc <File::rename(char const*)+0x4a>
c000f4ca:	8b 0c 8d 00 3a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdc600]
c000f4d1:	85 c9                	test   ecx,ecx
c000f4d3:	74 27                	je     c000f4fc <File::rename(char const*)+0x4a>
c000f4d5:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f4db:	85 c9                	test   ecx,ecx
c000f4dd:	74 1d                	je     c000f4fc <File::rename(char const*)+0x4a>
c000f4df:	b8 06 00 00 00       	mov    eax,0x6
c000f4e4:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f4e8:	75 12                	jne    c000f4fc <File::rename(char const*)+0x4a>
c000f4ea:	83 c2 0d             	add    edx,0xd
c000f4ed:	50                   	push   eax
c000f4ee:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f4f0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f4f4:	52                   	push   edx
c000f4f5:	51                   	push   ecx
c000f4f6:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000f4f9:	83 c4 10             	add    esp,0x10
c000f4fc:	83 c4 0c             	add    esp,0xc
c000f4ff:	c3                   	ret    

c000f500 <File::chfatattr(unsigned char, unsigned char)>:
c000f500:	57                   	push   edi
c000f501:	b8 0b 00 00 00       	mov    eax,0xb
c000f506:	56                   	push   esi
c000f507:	53                   	push   ebx
c000f508:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f50c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f510:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f517:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000f51b:	80 f9 19             	cmp    cl,0x19
c000f51e:	77 37                	ja     c000f557 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000f520:	8b 0c 8d 00 3a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdc600]
c000f527:	85 c9                	test   ecx,ecx
c000f529:	74 2c                	je     c000f557 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000f52b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f531:	85 c9                	test   ecx,ecx
c000f533:	74 22                	je     c000f557 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000f535:	b8 06 00 00 00       	mov    eax,0x6
c000f53a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f53e:	75 17                	jne    c000f557 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000f540:	8b 39                	mov    edi,DWORD PTR [ecx]
c000f542:	89 f0                	mov    eax,esi
c000f544:	83 c2 0d             	add    edx,0xd
c000f547:	0f b6 f0             	movzx  esi,al
c000f54a:	0f b6 db             	movzx  ebx,bl
c000f54d:	56                   	push   esi
c000f54e:	53                   	push   ebx
c000f54f:	52                   	push   edx
c000f550:	51                   	push   ecx
c000f551:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000f554:	83 c4 10             	add    esp,0x10
c000f557:	5b                   	pop    ebx
c000f558:	5e                   	pop    esi
c000f559:	5f                   	pop    edi
c000f55a:	c3                   	ret    
c000f55b:	90                   	nop

c000f55c <File::exists()>:
c000f55c:	83 ec 0c             	sub    esp,0xc
c000f55f:	31 c0                	xor    eax,eax
c000f561:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f565:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f56c:	80 f9 19             	cmp    cl,0x19
c000f56f:	77 24                	ja     c000f595 <File::exists()+0x39>
c000f571:	8b 0c 8d 00 3a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdc600]
c000f578:	85 c9                	test   ecx,ecx
c000f57a:	74 19                	je     c000f595 <File::exists()+0x39>
c000f57c:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f582:	85 c9                	test   ecx,ecx
c000f584:	74 0f                	je     c000f595 <File::exists()+0x39>
c000f586:	83 c2 0d             	add    edx,0xd
c000f589:	50                   	push   eax
c000f58a:	50                   	push   eax
c000f58b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f58d:	52                   	push   edx
c000f58e:	51                   	push   ecx
c000f58f:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000f592:	83 c4 10             	add    esp,0x10
c000f595:	83 c4 0c             	add    esp,0xc
c000f598:	c3                   	ret    
c000f599:	90                   	nop

c000f59a <File::stat(unsigned long long*, bool*)>:
c000f59a:	56                   	push   esi
c000f59b:	53                   	push   ebx
c000f59c:	50                   	push   eax
c000f59d:	b8 0b 00 00 00       	mov    eax,0xb
c000f5a2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f5a6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f5aa:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f5b1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000f5b5:	80 f9 19             	cmp    cl,0x19
c000f5b8:	77 3d                	ja     c000f5f7 <File::stat(unsigned long long*, bool*)+0x5d>
c000f5ba:	8b 0c 8d 00 3a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdc600]
c000f5c1:	85 c9                	test   ecx,ecx
c000f5c3:	74 32                	je     c000f5f7 <File::stat(unsigned long long*, bool*)+0x5d>
c000f5c5:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f5cb:	85 c9                	test   ecx,ecx
c000f5cd:	74 28                	je     c000f5f7 <File::stat(unsigned long long*, bool*)+0x5d>
c000f5cf:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f5d1:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f5d5:	74 13                	je     c000f5ea <File::stat(unsigned long long*, bool*)+0x50>
c000f5d7:	83 ec 04             	sub    esp,0x4
c000f5da:	56                   	push   esi
c000f5db:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000f5e1:	51                   	push   ecx
c000f5e2:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000f5e5:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000f5e8:	eb 0a                	jmp    c000f5f4 <File::stat(unsigned long long*, bool*)+0x5a>
c000f5ea:	53                   	push   ebx
c000f5eb:	83 c2 0d             	add    edx,0xd
c000f5ee:	56                   	push   esi
c000f5ef:	52                   	push   edx
c000f5f0:	51                   	push   ecx
c000f5f1:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000f5f4:	83 c4 10             	add    esp,0x10
c000f5f7:	5a                   	pop    edx
c000f5f8:	5b                   	pop    ebx
c000f5f9:	5e                   	pop    esi
c000f5fa:	c3                   	ret    

c000f5fb <getcwd(Process*, char*, int)>:
c000f5fb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f5ff:	31 c0                	xor    eax,eax
c000f601:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000f604:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000f608:	7d 15                	jge    c000f61f <getcwd(Process*, char*, int)+0x24>
c000f60a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f60e:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000f615:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000f618:	84 c9                	test   cl,cl
c000f61a:	74 06                	je     c000f622 <getcwd(Process*, char*, int)+0x27>
c000f61c:	40                   	inc    eax
c000f61d:	eb e2                	jmp    c000f601 <getcwd(Process*, char*, int)+0x6>
c000f61f:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000f622:	31 c0                	xor    eax,eax
c000f624:	c3                   	ret    

c000f625 <setcwd(Process*, char*)>:
c000f625:	55                   	push   ebp
c000f626:	57                   	push   edi
c000f627:	56                   	push   esi
c000f628:	53                   	push   ebx
c000f629:	81 ec 20 02 00 00    	sub    esp,0x220
c000f62f:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000f636:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000f63c:	57                   	push   edi
c000f63d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000f644:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000f648:	56                   	push   esi
c000f649:	e8 92 fa ff ff       	call   c000f0e0 <standardiseFiles(char*, char const*, char const*)>
c000f64e:	89 34 24             	mov    DWORD PTR [esp],esi
c000f651:	e8 cf 0f ff ff       	call   c0000625 <strlen>
c000f656:	83 c4 10             	add    esp,0x10
c000f659:	83 f8 02             	cmp    eax,0x2
c000f65c:	77 17                	ja     c000f675 <setcwd(Process*, char*)+0x50>
c000f65e:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c000f663:	83 e8 41             	sub    eax,0x41
c000f666:	83 f8 19             	cmp    eax,0x19
c000f669:	76 24                	jbe    c000f68f <setcwd(Process*, char*)+0x6a>
c000f66b:	b8 03 00 00 00       	mov    eax,0x3
c000f670:	e9 cb 00 00 00       	jmp    c000f740 <setcwd(Process*, char*)+0x11b>
c000f675:	83 ec 0c             	sub    esp,0xc
c000f678:	56                   	push   esi
c000f679:	e8 a7 0f ff ff       	call   c0000625 <strlen>
c000f67e:	83 c4 10             	add    esp,0x10
c000f681:	83 f8 03             	cmp    eax,0x3
c000f684:	75 33                	jne    c000f6b9 <setcwd(Process*, char*)+0x94>
c000f686:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000f68b:	75 2c                	jne    c000f6b9 <setcwd(Process*, char*)+0x94>
c000f68d:	eb cf                	jmp    c000f65e <setcwd(Process*, char*)+0x39>
c000f68f:	8b 14 85 00 3a 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdc600]
c000f696:	b8 05 00 00 00       	mov    eax,0x5
c000f69b:	85 d2                	test   edx,edx
c000f69d:	0f 84 9d 00 00 00    	je     c000f740 <setcwd(Process*, char*)+0x11b>
c000f6a3:	b8 06 00 00 00       	mov    eax,0x6
c000f6a8:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000f6af:	0f 84 8b 00 00 00    	je     c000f740 <setcwd(Process*, char*)+0x11b>
c000f6b5:	51                   	push   ecx
c000f6b6:	51                   	push   ecx
c000f6b7:	eb 7b                	jmp    c000f734 <setcwd(Process*, char*)+0x10f>
c000f6b9:	83 ec 0c             	sub    esp,0xc
c000f6bc:	68 14 01 00 00       	push   0x114
c000f6c1:	e8 a6 f5 ff ff       	call   c000ec6c <operator new(unsigned long)>
c000f6c6:	83 c4 0c             	add    esp,0xc
c000f6c9:	89 c3                	mov    ebx,eax
c000f6cb:	55                   	push   ebp
c000f6cc:	56                   	push   esi
c000f6cd:	50                   	push   eax
c000f6ce:	e8 b7 fb ff ff       	call   c000f28a <File::File(char const*, Process*)>
c000f6d3:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000f6d8:	83 c4 0c             	add    esp,0xc
c000f6db:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000f6df:	50                   	push   eax
c000f6e0:	8d 44 24 10          	lea    eax,[esp+0x10]
c000f6e4:	50                   	push   eax
c000f6e5:	53                   	push   ebx
c000f6e6:	e8 af fe ff ff       	call   c000f59a <File::stat(unsigned long long*, bool*)>
c000f6eb:	83 c4 10             	add    esp,0x10
c000f6ee:	8b 13                	mov    edx,DWORD PTR [ebx]
c000f6f0:	83 f8 02             	cmp    eax,0x2
c000f6f3:	75 09                	jne    c000f6fe <setcwd(Process*, char*)+0xd9>
c000f6f5:	83 ec 0c             	sub    esp,0xc
c000f6f8:	53                   	push   ebx
c000f6f9:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000f6fc:	eb 0d                	jmp    c000f70b <setcwd(Process*, char*)+0xe6>
c000f6fe:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000f701:	85 c0                	test   eax,eax
c000f703:	74 10                	je     c000f715 <setcwd(Process*, char*)+0xf0>
c000f705:	83 ec 0c             	sub    esp,0xc
c000f708:	53                   	push   ebx
c000f709:	ff d2                	call   edx
c000f70b:	83 c4 10             	add    esp,0x10
c000f70e:	b8 01 00 00 00       	mov    eax,0x1
c000f713:	eb 2b                	jmp    c000f740 <setcwd(Process*, char*)+0x11b>
c000f715:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f71a:	75 10                	jne    c000f72c <setcwd(Process*, char*)+0x107>
c000f71c:	83 ec 0c             	sub    esp,0xc
c000f71f:	53                   	push   ebx
c000f720:	ff d2                	call   edx
c000f722:	83 c4 10             	add    esp,0x10
c000f725:	b8 02 00 00 00       	mov    eax,0x2
c000f72a:	eb 14                	jmp    c000f740 <setcwd(Process*, char*)+0x11b>
c000f72c:	83 ec 0c             	sub    esp,0xc
c000f72f:	53                   	push   ebx
c000f730:	ff d2                	call   edx
c000f732:	58                   	pop    eax
c000f733:	5a                   	pop    edx
c000f734:	56                   	push   esi
c000f735:	57                   	push   edi
c000f736:	e8 6c 0f ff ff       	call   c00006a7 <strcpy>
c000f73b:	83 c4 10             	add    esp,0x10
c000f73e:	31 c0                	xor    eax,eax
c000f740:	81 c4 1c 02 00 00    	add    esp,0x21c
c000f746:	5b                   	pop    ebx
c000f747:	5e                   	pop    esi
c000f748:	5f                   	pop    edi
c000f749:	5d                   	pop    ebp
c000f74a:	c3                   	ret    
c000f74b:	90                   	nop

c000f74c <Directory::Directory(char const*, Process*)>:
c000f74c:	83 ec 0c             	sub    esp,0xc
c000f74f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f753:	83 ec 08             	sub    esp,0x8
c000f756:	6a 00                	push   0x0
c000f758:	50                   	push   eax
c000f759:	e8 72 e2 ff ff       	call   c000d9d0 <UnixFile::UnixFile(int)>
c000f75e:	83 c4 10             	add    esp,0x10
c000f761:	ba c8 08 02 c0       	mov    edx,0xc00208c8
c000f766:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f76a:	89 10                	mov    DWORD PTR [eax],edx
c000f76c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f770:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000f776:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f77a:	83 c0 0d             	add    eax,0xd
c000f77d:	83 ec 04             	sub    esp,0x4
c000f780:	52                   	push   edx
c000f781:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f785:	50                   	push   eax
c000f786:	e8 55 f9 ff ff       	call   c000f0e0 <standardiseFiles(char*, char const*, char const*)>
c000f78b:	83 c4 10             	add    esp,0x10
c000f78e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f792:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000f795:	8d 50 bf             	lea    edx,[eax-0x41]
c000f798:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f79c:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000f7a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f7a6:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000f7aa:	90                   	nop
c000f7ab:	83 c4 0c             	add    esp,0xc
c000f7ae:	c3                   	ret    
c000f7af:	90                   	nop

c000f7b0 <Directory::open()>:
c000f7b0:	53                   	push   ebx
c000f7b1:	b8 0b 00 00 00       	mov    eax,0xb
c000f7b6:	83 ec 08             	sub    esp,0x8
c000f7b9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f7bd:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000f7c4:	80 fa 19             	cmp    dl,0x19
c000f7c7:	77 3d                	ja     c000f806 <Directory::open()+0x56>
c000f7c9:	8b 14 95 00 3a 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc600]
c000f7d0:	85 d2                	test   edx,edx
c000f7d2:	74 32                	je     c000f806 <Directory::open()+0x56>
c000f7d4:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000f7da:	85 d2                	test   edx,edx
c000f7dc:	74 28                	je     c000f806 <Directory::open()+0x56>
c000f7de:	b8 06 00 00 00       	mov    eax,0x6
c000f7e3:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000f7e7:	75 1d                	jne    c000f806 <Directory::open()+0x56>
c000f7e9:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000f7ef:	50                   	push   eax
c000f7f0:	8b 02                	mov    eax,DWORD PTR [edx]
c000f7f2:	51                   	push   ecx
c000f7f3:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000f7f6:	51                   	push   ecx
c000f7f7:	52                   	push   edx
c000f7f8:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000f7fb:	83 c4 10             	add    esp,0x10
c000f7fe:	85 c0                	test   eax,eax
c000f800:	75 04                	jne    c000f806 <Directory::open()+0x56>
c000f802:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000f806:	83 c4 08             	add    esp,0x8
c000f809:	5b                   	pop    ebx
c000f80a:	c3                   	ret    
c000f80b:	90                   	nop

c000f80c <Directory::close()>:
c000f80c:	53                   	push   ebx
c000f80d:	b8 0b 00 00 00       	mov    eax,0xb
c000f812:	83 ec 08             	sub    esp,0x8
c000f815:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000f819:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000f820:	80 fa 19             	cmp    dl,0x19
c000f823:	77 41                	ja     c000f866 <Directory::close()+0x5a>
c000f825:	8b 1c 95 00 3a 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdc600]
c000f82c:	85 db                	test   ebx,ebx
c000f82e:	74 36                	je     c000f866 <Directory::close()+0x5a>
c000f830:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000f837:	74 2d                	je     c000f866 <Directory::close()+0x5a>
c000f839:	b8 05 00 00 00       	mov    eax,0x5
c000f83e:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000f842:	74 22                	je     c000f866 <Directory::close()+0x5a>
c000f844:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000f848:	8b 04 95 00 3a 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdc600]
c000f84f:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000f855:	53                   	push   ebx
c000f856:	53                   	push   ebx
c000f857:	8b 10                	mov    edx,DWORD PTR [eax]
c000f859:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000f85f:	50                   	push   eax
c000f860:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000f863:	83 c4 10             	add    esp,0x10
c000f866:	83 c4 08             	add    esp,0x8
c000f869:	5b                   	pop    ebx
c000f86a:	c3                   	ret    
c000f86b:	90                   	nop

c000f86c <Directory::unlink()>:
c000f86c:	83 ec 0c             	sub    esp,0xc
c000f86f:	b8 0b 00 00 00       	mov    eax,0xb
c000f874:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f878:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f87f:	80 f9 19             	cmp    cl,0x19
c000f882:	77 2f                	ja     c000f8b3 <Directory::unlink()+0x47>
c000f884:	8b 0c 8d 00 3a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdc600]
c000f88b:	85 c9                	test   ecx,ecx
c000f88d:	74 24                	je     c000f8b3 <Directory::unlink()+0x47>
c000f88f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f895:	85 c9                	test   ecx,ecx
c000f897:	74 1a                	je     c000f8b3 <Directory::unlink()+0x47>
c000f899:	b8 06 00 00 00       	mov    eax,0x6
c000f89e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f8a2:	75 0f                	jne    c000f8b3 <Directory::unlink()+0x47>
c000f8a4:	83 c2 0d             	add    edx,0xd
c000f8a7:	50                   	push   eax
c000f8a8:	50                   	push   eax
c000f8a9:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f8ab:	52                   	push   edx
c000f8ac:	51                   	push   ecx
c000f8ad:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000f8b0:	83 c4 10             	add    esp,0x10
c000f8b3:	83 c4 0c             	add    esp,0xc
c000f8b6:	c3                   	ret    
c000f8b7:	90                   	nop

c000f8b8 <Directory::rename(char const*)>:
c000f8b8:	83 ec 0c             	sub    esp,0xc
c000f8bb:	b8 0b 00 00 00       	mov    eax,0xb
c000f8c0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f8c4:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f8cb:	80 f9 19             	cmp    cl,0x19
c000f8ce:	77 32                	ja     c000f902 <Directory::rename(char const*)+0x4a>
c000f8d0:	8b 0c 8d 00 3a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdc600]
c000f8d7:	85 c9                	test   ecx,ecx
c000f8d9:	74 27                	je     c000f902 <Directory::rename(char const*)+0x4a>
c000f8db:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f8e1:	85 c9                	test   ecx,ecx
c000f8e3:	74 1d                	je     c000f902 <Directory::rename(char const*)+0x4a>
c000f8e5:	b8 06 00 00 00       	mov    eax,0x6
c000f8ea:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f8ee:	75 12                	jne    c000f902 <Directory::rename(char const*)+0x4a>
c000f8f0:	83 c2 0d             	add    edx,0xd
c000f8f3:	50                   	push   eax
c000f8f4:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f8f6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f8fa:	52                   	push   edx
c000f8fb:	51                   	push   ecx
c000f8fc:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000f8ff:	83 c4 10             	add    esp,0x10
c000f902:	83 c4 0c             	add    esp,0xc
c000f905:	c3                   	ret    

c000f906 <Directory::exists()>:
c000f906:	83 ec 0c             	sub    esp,0xc
c000f909:	31 c0                	xor    eax,eax
c000f90b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f90f:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f916:	80 f9 19             	cmp    cl,0x19
c000f919:	77 24                	ja     c000f93f <Directory::exists()+0x39>
c000f91b:	8b 0c 8d 00 3a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdc600]
c000f922:	85 c9                	test   ecx,ecx
c000f924:	74 19                	je     c000f93f <Directory::exists()+0x39>
c000f926:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f92c:	85 c9                	test   ecx,ecx
c000f92e:	74 0f                	je     c000f93f <Directory::exists()+0x39>
c000f930:	83 c2 0d             	add    edx,0xd
c000f933:	50                   	push   eax
c000f934:	50                   	push   eax
c000f935:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f937:	52                   	push   edx
c000f938:	51                   	push   ecx
c000f939:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000f93c:	83 c4 10             	add    esp,0x10
c000f93f:	83 c4 0c             	add    esp,0xc
c000f942:	c3                   	ret    
c000f943:	90                   	nop

c000f944 <Directory::read(dirent*)>:
c000f944:	83 ec 1c             	sub    esp,0x1c
c000f947:	b8 0b 00 00 00       	mov    eax,0xb
c000f94c:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000f950:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000f957:	80 fa 19             	cmp    dl,0x19
c000f95a:	77 30                	ja     c000f98c <Directory::read(dirent*)+0x48>
c000f95c:	8b 14 95 00 3a 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc600]
c000f963:	85 d2                	test   edx,edx
c000f965:	74 25                	je     c000f98c <Directory::read(dirent*)+0x48>
c000f967:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000f96e:	74 1c                	je     c000f98c <Directory::read(dirent*)+0x48>
c000f970:	83 ec 0c             	sub    esp,0xc
c000f973:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f975:	8d 54 24 18          	lea    edx,[esp+0x18]
c000f979:	52                   	push   edx
c000f97a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f97e:	6a 00                	push   0x0
c000f980:	68 10 01 00 00       	push   0x110
c000f985:	51                   	push   ecx
c000f986:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000f989:	83 c4 20             	add    esp,0x20
c000f98c:	83 c4 1c             	add    esp,0x1c
c000f98f:	c3                   	ret    

c000f990 <Directory::create()>:
c000f990:	83 ec 0c             	sub    esp,0xc
c000f993:	b8 0b 00 00 00       	mov    eax,0xb
c000f998:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f99c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f9a3:	80 f9 19             	cmp    cl,0x19
c000f9a6:	77 2f                	ja     c000f9d7 <Directory::create()+0x47>
c000f9a8:	8b 0c 8d 00 3a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdc600]
c000f9af:	85 c9                	test   ecx,ecx
c000f9b1:	74 24                	je     c000f9d7 <Directory::create()+0x47>
c000f9b3:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f9b9:	85 c9                	test   ecx,ecx
c000f9bb:	74 1a                	je     c000f9d7 <Directory::create()+0x47>
c000f9bd:	b8 06 00 00 00       	mov    eax,0x6
c000f9c2:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f9c6:	75 0f                	jne    c000f9d7 <Directory::create()+0x47>
c000f9c8:	83 c2 0d             	add    edx,0xd
c000f9cb:	50                   	push   eax
c000f9cc:	50                   	push   eax
c000f9cd:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f9cf:	52                   	push   edx
c000f9d0:	51                   	push   ecx
c000f9d1:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000f9d4:	83 c4 10             	add    esp,0x10
c000f9d7:	83 c4 0c             	add    esp,0xc
c000f9da:	c3                   	ret    
c000f9db:	90                   	nop

c000f9dc <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000f9dc:	b8 0a 00 00 00       	mov    eax,0xa
c000f9e1:	c3                   	ret    

c000f9e2 <Bus::Bus(char const*)>:
c000f9e2:	83 ec 0c             	sub    esp,0xc
c000f9e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f9e9:	83 ec 08             	sub    esp,0x8
c000f9ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f9f0:	50                   	push   eax
c000f9f1:	e8 60 09 00 00       	call   c0010356 <Device::Device(char const*)>
c000f9f6:	83 c4 10             	add    esp,0x10
c000f9f9:	ba e4 08 02 c0       	mov    edx,0xc00208e4
c000f9fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fa02:	89 10                	mov    DWORD PTR [eax],edx
c000fa04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fa08:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000fa12:	90                   	nop
c000fa13:	83 c4 0c             	add    esp,0xc
c000fa16:	c3                   	ret    
c000fa17:	90                   	nop

c000fa18 <Bus::~Bus()>:
c000fa18:	83 ec 0c             	sub    esp,0xc
c000fa1b:	ba e4 08 02 c0       	mov    edx,0xc00208e4
c000fa20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fa24:	89 10                	mov    DWORD PTR [eax],edx
c000fa26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fa2a:	83 ec 0c             	sub    esp,0xc
c000fa2d:	50                   	push   eax
c000fa2e:	e8 d5 05 00 00       	call   c0010008 <Device::~Device()>
c000fa33:	83 c4 10             	add    esp,0x10
c000fa36:	90                   	nop
c000fa37:	83 c4 0c             	add    esp,0xc
c000fa3a:	c3                   	ret    
c000fa3b:	90                   	nop

c000fa3c <Bus::~Bus()>:
c000fa3c:	83 ec 0c             	sub    esp,0xc
c000fa3f:	83 ec 0c             	sub    esp,0xc
c000fa42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fa46:	e8 cd ff ff ff       	call   c000fa18 <Bus::~Bus()>
c000fa4b:	83 c4 10             	add    esp,0x10
c000fa4e:	83 ec 08             	sub    esp,0x8
c000fa51:	68 58 01 00 00       	push   0x158
c000fa56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fa5a:	e8 1c f2 ff ff       	call   c000ec7b <operator delete(void*, unsigned long)>
c000fa5f:	83 c4 10             	add    esp,0x10
c000fa62:	83 c4 0c             	add    esp,0xc
c000fa65:	c3                   	ret    

c000fa66 <Buzzer::Buzzer(char const*)>:
c000fa66:	83 ec 0c             	sub    esp,0xc
c000fa69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fa6d:	83 ec 08             	sub    esp,0x8
c000fa70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fa74:	50                   	push   eax
c000fa75:	e8 dc 08 00 00       	call   c0010356 <Device::Device(char const*)>
c000fa7a:	83 c4 10             	add    esp,0x10
c000fa7d:	ba 10 09 02 c0       	mov    edx,0xc0020910
c000fa82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fa86:	89 10                	mov    DWORD PTR [eax],edx
c000fa88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fa8c:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000fa96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fa9a:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c000faa4:	90                   	nop
c000faa5:	83 c4 0c             	add    esp,0xc
c000faa8:	c3                   	ret    
c000faa9:	90                   	nop

c000faaa <Buzzer::~Buzzer()>:
c000faaa:	83 ec 0c             	sub    esp,0xc
c000faad:	ba 10 09 02 c0       	mov    edx,0xc0020910
c000fab2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fab6:	89 10                	mov    DWORD PTR [eax],edx
c000fab8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fabc:	83 ec 0c             	sub    esp,0xc
c000fabf:	50                   	push   eax
c000fac0:	e8 43 05 00 00       	call   c0010008 <Device::~Device()>
c000fac5:	83 c4 10             	add    esp,0x10
c000fac8:	90                   	nop
c000fac9:	83 c4 0c             	add    esp,0xc
c000facc:	c3                   	ret    
c000facd:	90                   	nop

c000face <Buzzer::~Buzzer()>:
c000face:	83 ec 0c             	sub    esp,0xc
c000fad1:	83 ec 0c             	sub    esp,0xc
c000fad4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fad8:	e8 cd ff ff ff       	call   c000faaa <Buzzer::~Buzzer()>
c000fadd:	83 c4 10             	add    esp,0x10
c000fae0:	83 ec 08             	sub    esp,0x8
c000fae3:	68 5c 01 00 00       	push   0x15c
c000fae8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000faec:	e8 8a f1 ff ff       	call   c000ec7b <operator delete(void*, unsigned long)>
c000faf1:	83 c4 10             	add    esp,0x10
c000faf4:	83 c4 0c             	add    esp,0xc
c000faf7:	c3                   	ret    

c000faf8 <Buzzer::stop()>:
c000faf8:	83 ec 14             	sub    esp,0x14
c000fafb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000faff:	8b 10                	mov    edx,DWORD PTR [eax]
c000fb01:	6a 00                	push   0x0
c000fb03:	50                   	push   eax
c000fb04:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000fb07:	83 c4 1c             	add    esp,0x1c
c000fb0a:	c3                   	ret    

c000fb0b <beepThread(void*)>:
c000fb0b:	53                   	push   ebx
c000fb0c:	83 ec 08             	sub    esp,0x8
c000fb0f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fb13:	e8 02 7f 00 00       	call   c0017a1a <unlockScheduler()>
c000fb18:	b8 40 42 0f 00       	mov    eax,0xf4240
c000fb1d:	52                   	push   edx
c000fb1e:	52                   	push   edx
c000fb1f:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c000fb25:	52                   	push   edx
c000fb26:	50                   	push   eax
c000fb27:	e8 34 84 00 00       	call   c0017f60 <nanoSleep(unsigned long long)>
c000fb2c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fb2f:	e8 c4 ff ff ff       	call   c000faf8 <Buzzer::stop()>
c000fb34:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000fb3c:	83 c4 18             	add    esp,0x18
c000fb3f:	5b                   	pop    ebx
c000fb40:	e9 61 83 00 00       	jmp    c0017ea6 <blockTask(TaskState)>
c000fb45:	90                   	nop

c000fb46 <Buzzer::beep(int, int, bool)>:
c000fb46:	57                   	push   edi
c000fb47:	56                   	push   esi
c000fb48:	53                   	push   ebx
c000fb49:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fb4d:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000fb51:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000fb55:	52                   	push   edx
c000fb56:	52                   	push   edx
c000fb57:	8b 06                	mov    eax,DWORD PTR [esi]
c000fb59:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fb5d:	56                   	push   esi
c000fb5e:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000fb61:	83 c4 10             	add    esp,0x10
c000fb64:	89 f8                	mov    eax,edi
c000fb66:	84 c0                	test   al,al
c000fb68:	74 1f                	je     c000fb89 <Buzzer::beep(int, int, bool)+0x43>
c000fb6a:	50                   	push   eax
c000fb6b:	50                   	push   eax
c000fb6c:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c000fb72:	99                   	cdq    
c000fb73:	52                   	push   edx
c000fb74:	50                   	push   eax
c000fb75:	e8 e6 83 00 00       	call   c0017f60 <nanoSleep(unsigned long long)>
c000fb7a:	83 c4 10             	add    esp,0x10
c000fb7d:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000fb81:	5b                   	pop    ebx
c000fb82:	5e                   	pop    esi
c000fb83:	5f                   	pop    edi
c000fb84:	e9 6f ff ff ff       	jmp    c000faf8 <Buzzer::stop()>
c000fb89:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c000fb8f:	a1 54 48 02 c0       	mov    eax,ds:0xc0024854
c000fb94:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c000fb9c:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c000fba0:	c7 44 24 14 0b fb 00 c0 	mov    DWORD PTR [esp+0x14],0xc000fb0b
c000fba8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000fbac:	5b                   	pop    ebx
c000fbad:	5e                   	pop    esi
c000fbae:	5f                   	pop    edi
c000fbaf:	e9 8e 7f 00 00       	jmp    c0017b42 <Process::createThread(void (*)(void*), void*, int)>

c000fbb4 <loadClockSettings()>:
c000fbb4:	c7 05 74 35 02 c0 0a 00 00 00 	mov    DWORD PTR ds:0xc0023574,0xa
c000fbbe:	c6 05 71 35 02 c0 00 	mov    BYTE PTR ds:0xc0023571,0x0
c000fbc5:	c6 05 70 35 02 c0 01 	mov    BYTE PTR ds:0xc0023570,0x1
c000fbcc:	c3                   	ret    
c000fbcd:	90                   	nop

c000fbce <Clock::Clock(char const*)>:
c000fbce:	83 ec 0c             	sub    esp,0xc
c000fbd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fbd5:	83 ec 08             	sub    esp,0x8
c000fbd8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fbdc:	50                   	push   eax
c000fbdd:	e8 74 07 00 00       	call   c0010356 <Device::Device(char const*)>
c000fbe2:	83 c4 10             	add    esp,0x10
c000fbe5:	ba 40 09 02 c0       	mov    edx,0xc0020940
c000fbea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fbee:	89 10                	mov    DWORD PTR [eax],edx
c000fbf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fbf4:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000fbfe:	90                   	nop
c000fbff:	83 c4 0c             	add    esp,0xc
c000fc02:	c3                   	ret    
c000fc03:	90                   	nop

c000fc04 <Clock::~Clock()>:
c000fc04:	83 ec 0c             	sub    esp,0xc
c000fc07:	ba 40 09 02 c0       	mov    edx,0xc0020940
c000fc0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc10:	89 10                	mov    DWORD PTR [eax],edx
c000fc12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc16:	83 ec 0c             	sub    esp,0xc
c000fc19:	50                   	push   eax
c000fc1a:	e8 e9 03 00 00       	call   c0010008 <Device::~Device()>
c000fc1f:	83 c4 10             	add    esp,0x10
c000fc22:	90                   	nop
c000fc23:	83 c4 0c             	add    esp,0xc
c000fc26:	c3                   	ret    
c000fc27:	90                   	nop

c000fc28 <Clock::~Clock()>:
c000fc28:	83 ec 0c             	sub    esp,0xc
c000fc2b:	83 ec 0c             	sub    esp,0xc
c000fc2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fc32:	e8 cd ff ff ff       	call   c000fc04 <Clock::~Clock()>
c000fc37:	83 c4 10             	add    esp,0x10
c000fc3a:	83 ec 08             	sub    esp,0x8
c000fc3d:	68 58 01 00 00       	push   0x158
c000fc42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fc46:	e8 30 f0 ff ff       	call   c000ec7b <operator delete(void*, unsigned long)>
c000fc4b:	83 c4 10             	add    esp,0x10
c000fc4e:	83 c4 0c             	add    esp,0xc
c000fc51:	c3                   	ret    

c000fc52 <Clock::timeInSecondsLocal()>:
c000fc52:	53                   	push   ebx
c000fc53:	83 ec 14             	sub    esp,0x14
c000fc56:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000fc5a:	8b 10                	mov    edx,DWORD PTR [eax]
c000fc5c:	50                   	push   eax
c000fc5d:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000fc60:	0f b6 0d 70 35 02 c0 	movzx  ecx,BYTE PTR ds:0xc0023570
c000fc67:	03 0d 74 35 02 c0    	add    ecx,DWORD PTR ds:0xc0023574
c000fc6d:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000fc73:	89 cb                	mov    ebx,ecx
c000fc75:	c1 fb 1f             	sar    ebx,0x1f
c000fc78:	01 c8                	add    eax,ecx
c000fc7a:	11 da                	adc    edx,ebx
c000fc7c:	83 c4 10             	add    esp,0x10
c000fc7f:	31 c9                	xor    ecx,ecx
c000fc81:	80 3d 71 35 02 c0 00 	cmp    BYTE PTR ds:0xc0023571,0x0
c000fc88:	74 05                	je     c000fc8f <Clock::timeInSecondsLocal()+0x3d>
c000fc8a:	b9 08 07 00 00       	mov    ecx,0x708
c000fc8f:	31 db                	xor    ebx,ebx
c000fc91:	01 c8                	add    eax,ecx
c000fc93:	11 da                	adc    edx,ebx
c000fc95:	83 c4 08             	add    esp,0x8
c000fc98:	5b                   	pop    ebx
c000fc99:	c3                   	ret    

c000fc9a <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000fc9a:	57                   	push   edi
c000fc9b:	56                   	push   esi
c000fc9c:	53                   	push   ebx
c000fc9d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000fca1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000fca5:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fca7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000fcab:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000fcae:	0f b6 05 70 35 02 c0 	movzx  eax,BYTE PTR ds:0xc0023570
c000fcb5:	03 05 74 35 02 c0    	add    eax,DWORD PTR ds:0xc0023574
c000fcbb:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000fcc1:	99                   	cdq    
c000fcc2:	29 c6                	sub    esi,eax
c000fcc4:	19 d7                	sbb    edi,edx
c000fcc6:	89 f0                	mov    eax,esi
c000fcc8:	89 fa                	mov    edx,edi
c000fcca:	31 f6                	xor    esi,esi
c000fccc:	80 3d 71 35 02 c0 00 	cmp    BYTE PTR ds:0xc0023571,0x0
c000fcd3:	74 05                	je     c000fcda <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000fcd5:	be 08 07 00 00       	mov    esi,0x708
c000fcda:	31 ff                	xor    edi,edi
c000fcdc:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000fce0:	29 f0                	sub    eax,esi
c000fce2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000fce6:	19 fa                	sbb    edx,edi
c000fce8:	89 d8                	mov    eax,ebx
c000fcea:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000fcee:	5b                   	pop    ebx
c000fcef:	5e                   	pop    esi
c000fcf0:	5f                   	pop    edi
c000fcf1:	ff e0                	jmp    eax

c000fcf3 <datetimeToSeconds(datetime_t)>:
c000fcf3:	55                   	push   ebp
c000fcf4:	57                   	push   edi
c000fcf5:	56                   	push   esi
c000fcf6:	53                   	push   ebx
c000fcf7:	83 ec 14             	sub    esp,0x14
c000fcfa:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000fcfe:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000fd02:	89 d3                	mov    ebx,edx
c000fd04:	0f b6 c6             	movzx  eax,dh
c000fd07:	c1 eb 10             	shr    ebx,0x10
c000fd0a:	48                   	dec    eax
c000fd0b:	66 81 eb 6c 07       	sub    bx,0x76c
c000fd10:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000fd14:	0f b6 f5             	movzx  esi,ch
c000fd17:	89 cf                	mov    edi,ecx
c000fd19:	6b f6 3c             	imul   esi,esi,0x3c
c000fd1c:	c1 ef 10             	shr    edi,0x10
c000fd1f:	0f b6 c9             	movzx  ecx,cl
c000fd22:	89 f8                	mov    eax,edi
c000fd24:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000fd2a:	0f b6 f8             	movzx  edi,al
c000fd2d:	0f b6 d2             	movzx  edx,dl
c000fd30:	01 fe                	add    esi,edi
c000fd32:	01 f1                	add    ecx,esi
c000fd34:	0f b7 f3             	movzx  esi,bx
c000fd37:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000fd3b:	c1 f9 1f             	sar    ecx,0x1f
c000fd3e:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c000fd43:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000fd47:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c000fd4c:	8b 0c 8d 80 09 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdf680]
c000fd53:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000fd57:	76 29                	jbe    c000fd82 <datetimeToSeconds(datetime_t)+0x8f>
c000fd59:	f6 c3 03             	test   bl,0x3
c000fd5c:	75 24                	jne    c000fd82 <datetimeToSeconds(datetime_t)+0x8f>
c000fd5e:	31 d2                	xor    edx,edx
c000fd60:	bf 64 00 00 00       	mov    edi,0x64
c000fd65:	89 d8                	mov    eax,ebx
c000fd67:	66 f7 f7             	div    di
c000fd6a:	66 85 d2             	test   dx,dx
c000fd6d:	75 12                	jne    c000fd81 <datetimeToSeconds(datetime_t)+0x8e>
c000fd6f:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000fd75:	bf 90 01 00 00       	mov    edi,0x190
c000fd7a:	99                   	cdq    
c000fd7b:	f7 ff                	idiv   edi
c000fd7d:	85 d2                	test   edx,edx
c000fd7f:	75 01                	jne    c000fd82 <datetimeToSeconds(datetime_t)+0x8f>
c000fd81:	41                   	inc    ecx
c000fd82:	66 83 fb 46          	cmp    bx,0x46
c000fd86:	76 45                	jbe    c000fdcd <datetimeToSeconds(datetime_t)+0xda>
c000fd88:	bb 46 00 00 00       	mov    ebx,0x46
c000fd8d:	bf 64 00 00 00       	mov    edi,0x64
c000fd92:	bd 90 01 00 00       	mov    ebp,0x190
c000fd97:	b8 6d 01 00 00       	mov    eax,0x16d
c000fd9c:	f6 c3 03             	test   bl,0x3
c000fd9f:	75 23                	jne    c000fdc4 <datetimeToSeconds(datetime_t)+0xd1>
c000fda1:	89 d8                	mov    eax,ebx
c000fda3:	99                   	cdq    
c000fda4:	f7 ff                	idiv   edi
c000fda6:	b8 6e 01 00 00       	mov    eax,0x16e
c000fdab:	85 d2                	test   edx,edx
c000fdad:	75 15                	jne    c000fdc4 <datetimeToSeconds(datetime_t)+0xd1>
c000fdaf:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000fdb5:	99                   	cdq    
c000fdb6:	f7 fd                	idiv   ebp
c000fdb8:	83 fa 01             	cmp    edx,0x1
c000fdbb:	19 c0                	sbb    eax,eax
c000fdbd:	f7 d0                	not    eax
c000fdbf:	05 6e 01 00 00       	add    eax,0x16e
c000fdc4:	01 c1                	add    ecx,eax
c000fdc6:	43                   	inc    ebx
c000fdc7:	39 f3                	cmp    ebx,esi
c000fdc9:	7c cc                	jl     c000fd97 <datetimeToSeconds(datetime_t)+0xa4>
c000fdcb:	eb 35                	jmp    c000fe02 <datetimeToSeconds(datetime_t)+0x10f>
c000fdcd:	74 33                	je     c000fe02 <datetimeToSeconds(datetime_t)+0x10f>
c000fdcf:	b8 45 00 00 00       	mov    eax,0x45
c000fdd4:	89 c2                	mov    edx,eax
c000fdd6:	83 e2 03             	and    edx,0x3
c000fdd9:	39 f0                	cmp    eax,esi
c000fddb:	7e 0f                	jle    c000fdec <datetimeToSeconds(datetime_t)+0xf9>
c000fddd:	83 fa 01             	cmp    edx,0x1
c000fde0:	19 d2                	sbb    edx,edx
c000fde2:	48                   	dec    eax
c000fde3:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c000fdea:	eb e8                	jmp    c000fdd4 <datetimeToSeconds(datetime_t)+0xe1>
c000fdec:	b8 6d 01 00 00       	mov    eax,0x16d
c000fdf1:	85 d2                	test   edx,edx
c000fdf3:	75 0b                	jne    c000fe00 <datetimeToSeconds(datetime_t)+0x10d>
c000fdf5:	66 83 fb 01          	cmp    bx,0x1
c000fdf9:	19 c0                	sbb    eax,eax
c000fdfb:	05 6e 01 00 00       	add    eax,0x16e
c000fe00:	29 c1                	sub    ecx,eax
c000fe02:	b8 80 51 01 00       	mov    eax,0x15180
c000fe07:	f7 e9                	imul   ecx
c000fe09:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000fe0d:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000fe11:	83 c4 14             	add    esp,0x14
c000fe14:	5b                   	pop    ebx
c000fe15:	5e                   	pop    esi
c000fe16:	5f                   	pop    edi
c000fe17:	5d                   	pop    ebp
c000fe18:	c3                   	ret    
c000fe19:	90                   	nop

c000fe1a <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000fe1a:	57                   	push   edi
c000fe1b:	56                   	push   esi
c000fe1c:	53                   	push   ebx
c000fe1d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fe21:	8b 06                	mov    eax,DWORD PTR [esi]
c000fe23:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000fe26:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fe2a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fe2e:	e8 c0 fe ff ff       	call   c000fcf3 <datetimeToSeconds(datetime_t)>
c000fe33:	59                   	pop    ecx
c000fe34:	0f b6 0d 70 35 02 c0 	movzx  ecx,BYTE PTR ds:0xc0023570
c000fe3b:	5b                   	pop    ebx
c000fe3c:	03 0d 74 35 02 c0    	add    ecx,DWORD PTR ds:0xc0023574
c000fe42:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000fe48:	89 cb                	mov    ebx,ecx
c000fe4a:	c1 fb 1f             	sar    ebx,0x1f
c000fe4d:	29 c8                	sub    eax,ecx
c000fe4f:	19 da                	sbb    edx,ebx
c000fe51:	31 c9                	xor    ecx,ecx
c000fe53:	80 3d 71 35 02 c0 00 	cmp    BYTE PTR ds:0xc0023571,0x0
c000fe5a:	74 05                	je     c000fe61 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000fe5c:	b9 08 07 00 00       	mov    ecx,0x708
c000fe61:	31 db                	xor    ebx,ebx
c000fe63:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000fe67:	29 c8                	sub    eax,ecx
c000fe69:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000fe6d:	19 da                	sbb    edx,ebx
c000fe6f:	89 f8                	mov    eax,edi
c000fe71:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000fe75:	5b                   	pop    ebx
c000fe76:	5e                   	pop    esi
c000fe77:	5f                   	pop    edi
c000fe78:	ff e0                	jmp    eax

c000fe7a <secondsToDatetime(unsigned long long)>:
c000fe7a:	55                   	push   ebp
c000fe7b:	57                   	push   edi
c000fe7c:	56                   	push   esi
c000fe7d:	53                   	push   ebx
c000fe7e:	83 ec 1c             	sub    esp,0x1c
c000fe81:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000fe85:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000fe89:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000fe8d:	6a 00                	push   0x0
c000fe8f:	68 80 51 01 00       	push   0x15180
c000fe94:	55                   	push   ebp
c000fe95:	57                   	push   edi
c000fe96:	e8 21 e5 00 00       	call   c001e3bc <__udivdi3>
c000fe9b:	83 c4 10             	add    esp,0x10
c000fe9e:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000fea4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000fea8:	6a 00                	push   0x0
c000feaa:	68 80 51 01 00       	push   0x15180
c000feaf:	55                   	push   ebp
c000feb0:	57                   	push   edi
c000feb1:	bf 10 0e 00 00       	mov    edi,0xe10
c000feb6:	e8 01 e6 00 00       	call   c001e4bc <__umoddi3>
c000febb:	83 c4 10             	add    esp,0x10
c000febe:	99                   	cdq    
c000febf:	f7 ff                	idiv   edi
c000fec1:	bf 3c 00 00 00       	mov    edi,0x3c
c000fec6:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000fec9:	89 d0                	mov    eax,edx
c000fecb:	99                   	cdq    
c000fecc:	f7 ff                	idiv   edi
c000fece:	85 db                	test   ebx,ebx
c000fed0:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000fed3:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000fed6:	79 11                	jns    c000fee9 <secondsToDatetime(unsigned long long)+0x6f>
c000fed8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000fedc:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000fee2:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000fee7:	eb 07                	jmp    c000fef0 <secondsToDatetime(unsigned long long)+0x76>
c000fee9:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000feee:	89 d8                	mov    eax,ebx
c000fef0:	bf b4 05 00 00       	mov    edi,0x5b4
c000fef5:	99                   	cdq    
c000fef6:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000fefb:	f7 f9                	idiv   ecx
c000fefd:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000ff02:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ff06:	31 d2                	xor    edx,edx
c000ff08:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000ff10:	01 c3                	add    ebx,eax
c000ff12:	89 d8                	mov    eax,ebx
c000ff14:	f7 f1                	div    ecx
c000ff16:	31 d2                	xor    edx,edx
c000ff18:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000ff1b:	89 d8                	mov    eax,ebx
c000ff1d:	f7 f7                	div    edi
c000ff1f:	31 d2                	xor    edx,edx
c000ff21:	29 c1                	sub    ecx,eax
c000ff23:	89 d8                	mov    eax,ebx
c000ff25:	f7 f5                	div    ebp
c000ff27:	bd 6d 01 00 00       	mov    ebp,0x16d
c000ff2c:	29 c1                	sub    ecx,eax
c000ff2e:	31 d2                	xor    edx,edx
c000ff30:	89 c8                	mov    eax,ecx
c000ff32:	f7 f5                	div    ebp
c000ff34:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000ff39:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ff3d:	31 d2                	xor    edx,edx
c000ff3f:	89 c8                	mov    eax,ecx
c000ff41:	f7 f5                	div    ebp
c000ff43:	31 d2                	xor    edx,edx
c000ff45:	01 c3                	add    ebx,eax
c000ff47:	89 c8                	mov    eax,ecx
c000ff49:	f7 f7                	div    edi
c000ff4b:	bf 99 00 00 00       	mov    edi,0x99
c000ff50:	29 c3                	sub    ebx,eax
c000ff52:	31 d2                	xor    edx,edx
c000ff54:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000ff5c:	29 c3                	sub    ebx,eax
c000ff5e:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000ff61:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000ff64:	bb 05 00 00 00       	mov    ebx,0x5
c000ff69:	83 c1 02             	add    ecx,0x2
c000ff6c:	89 c8                	mov    eax,ecx
c000ff6e:	f7 f7                	div    edi
c000ff70:	31 d2                	xor    edx,edx
c000ff72:	89 c7                	mov    edi,eax
c000ff74:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000ff7a:	83 c0 02             	add    eax,0x2
c000ff7d:	f7 f3                	div    ebx
c000ff7f:	89 eb                	mov    ebx,ebp
c000ff81:	29 c3                	sub    ebx,eax
c000ff83:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000ff89:	88 1e                	mov    BYTE PTR [esi],bl
c000ff8b:	19 c0                	sbb    eax,eax
c000ff8d:	31 d2                	xor    edx,edx
c000ff8f:	83 e0 0c             	and    eax,0xc
c000ff92:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000ff96:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000ff9e:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000ffa2:	83 f9 01             	cmp    ecx,0x1
c000ffa5:	0f 96 c2             	setbe  dl
c000ffa8:	41                   	inc    ecx
c000ffa9:	01 d0                	add    eax,edx
c000ffab:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000ffae:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000ffb2:	83 c4 1c             	add    esp,0x1c
c000ffb5:	89 f0                	mov    eax,esi
c000ffb7:	5b                   	pop    ebx
c000ffb8:	5e                   	pop    esi
c000ffb9:	5f                   	pop    edi
c000ffba:	5d                   	pop    ebp
c000ffbb:	c2 04 00             	ret    0x4

c000ffbe <Clock::timeInDatetimeLocal()>:
c000ffbe:	53                   	push   ebx
c000ffbf:	83 ec 14             	sub    esp,0x14
c000ffc2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ffc6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ffca:	e8 83 fc ff ff       	call   c000fc52 <Clock::timeInSecondsLocal()>
c000ffcf:	83 c4 0c             	add    esp,0xc
c000ffd2:	52                   	push   edx
c000ffd3:	50                   	push   eax
c000ffd4:	53                   	push   ebx
c000ffd5:	e8 a0 fe ff ff       	call   c000fe7a <secondsToDatetime(unsigned long long)>
c000ffda:	89 d8                	mov    eax,ebx
c000ffdc:	83 c4 14             	add    esp,0x14
c000ffdf:	5b                   	pop    ebx
c000ffe0:	c2 04 00             	ret    0x4
c000ffe3:	90                   	nop

c000ffe4 <Device::hibernate()>:
c000ffe4:	c3                   	ret    
c000ffe5:	90                   	nop

c000ffe6 <Device::wake()>:
c000ffe6:	c3                   	ret    
c000ffe7:	90                   	nop

c000ffe8 <Device::detect()>:
c000ffe8:	c3                   	ret    
c000ffe9:	90                   	nop

c000ffea <Device::disableLegacy()>:
c000ffea:	c3                   	ret    
c000ffeb:	90                   	nop

c000ffec <Device::powerSaving(PowerSavingLevel)>:
c000ffec:	c3                   	ret    
c000ffed:	90                   	nop

c000ffee <DriverlessDevice::close(int, int, void*)>:
c000ffee:	31 c0                	xor    eax,eax
c000fff0:	c3                   	ret    
c000fff1:	90                   	nop

c000fff2 <DriverlessDevice::detect()>:
c000fff2:	c3                   	ret    
c000fff3:	90                   	nop

c000fff4 <DriverlessDevice::open(int, int, void*)>:
c000fff4:	83 ec 18             	sub    esp,0x18
c000fff7:	68 b0 09 02 c0       	push   0xc00209b0
c000fffc:	e8 ef 49 00 00       	call   c00149f0 <Krnl::panic(char const*)>
c0010001:	83 c8 ff             	or     eax,0xffffffff
c0010004:	83 c4 1c             	add    esp,0x1c
c0010007:	c3                   	ret    

c0010008 <Device::~Device()>:
c0010008:	ba d8 09 02 c0       	mov    edx,0xc00209d8
c001000d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010011:	89 10                	mov    DWORD PTR [eax],edx
c0010013:	90                   	nop
c0010014:	c3                   	ret    
c0010015:	90                   	nop

c0010016 <Device::~Device()>:
c0010016:	83 ec 0c             	sub    esp,0xc
c0010019:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001001d:	e8 e6 ff ff ff       	call   c0010008 <Device::~Device()>
c0010022:	83 c4 04             	add    esp,0x4
c0010025:	83 ec 08             	sub    esp,0x8
c0010028:	68 58 01 00 00       	push   0x158
c001002d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010031:	e8 45 ec ff ff       	call   c000ec7b <operator delete(void*, unsigned long)>
c0010036:	83 c4 10             	add    esp,0x10
c0010039:	83 c4 0c             	add    esp,0xc
c001003c:	c3                   	ret    
c001003d:	90                   	nop

c001003e <Device::findAndLoadDriver()>:
c001003e:	c3                   	ret    
c001003f:	90                   	nop

c0010040 <Device::preOpenPCI(PCIDeviceInfo)>:
c0010040:	57                   	push   edi
c0010041:	b9 09 00 00 00       	mov    ecx,0x9
c0010046:	56                   	push   esi
c0010047:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001004b:	8d 74 24 10          	lea    esi,[esp+0x10]
c001004f:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c0010059:	81 c7 18 01 00 00    	add    edi,0x118
c001005f:	fc                   	cld    
c0010060:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010062:	5e                   	pop    esi
c0010063:	5f                   	pop    edi
c0010064:	c3                   	ret    
c0010065:	90                   	nop

c0010066 <Device::preOpenACPI(void*, char*, char*)>:
c0010066:	56                   	push   esi
c0010067:	53                   	push   ebx
c0010068:	83 ec 08             	sub    esp,0x8
c001006b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001006f:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0010073:	c7 83 14 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x114],0x3
c001007d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010081:	89 83 18 01 00 00    	mov    DWORD PTR [ebx+0x118],eax
c0010087:	6a 1e                	push   0x1e
c0010089:	8d 83 1c 01 00 00    	lea    eax,[ebx+0x11c]
c001008f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010093:	81 c3 3a 01 00 00    	add    ebx,0x13a
c0010099:	50                   	push   eax
c001009a:	e8 33 05 ff ff       	call   c00005d2 <memcpy>
c001009f:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c00100a3:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00100a7:	c7 44 24 28 0e 00 00 00 	mov    DWORD PTR [esp+0x28],0xe
c00100af:	83 c4 14             	add    esp,0x14
c00100b2:	5b                   	pop    ebx
c00100b3:	5e                   	pop    esi
c00100b4:	e9 19 05 ff ff       	jmp    c00005d2 <memcpy>
c00100b9:	90                   	nop

c00100ba <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00100ba:	55                   	push   ebp
c00100bb:	57                   	push   edi
c00100bc:	56                   	push   esi
c00100bd:	53                   	push   ebx
c00100be:	83 ec 0c             	sub    esp,0xc
c00100c1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00100c5:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00100c9:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00100cd:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00100d1:	0f b6 5c 24 2c       	movzx  ebx,BYTE PTR [esp+0x2c]
c00100d6:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c00100dd:	75 0b                	jne    c00100ea <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x30>
c00100df:	8b 00                	mov    eax,DWORD PTR [eax]
c00100e1:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c00100e5:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00100e8:	eb 24                	jmp    c001010e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x54>
c00100ea:	e8 fb 3b 00 00       	call   c0013cea <thisCPU()>
c00100ef:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00100f5:	8b 10                	mov    edx,DWORD PTR [eax]
c00100f7:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c00100fb:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c00100ff:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c0010103:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c0010107:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001010b:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c001010e:	83 c4 0c             	add    esp,0xc
c0010111:	5b                   	pop    ebx
c0010112:	5e                   	pop    esi
c0010113:	5f                   	pop    edi
c0010114:	5d                   	pop    ebp
c0010115:	ff e0                	jmp    eax
c0010117:	90                   	nop

c0010118 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c0010118:	57                   	push   edi
c0010119:	56                   	push   esi
c001011a:	53                   	push   ebx
c001011b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001011f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010123:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0010127:	0f b6 5c 24 1c       	movzx  ebx,BYTE PTR [esp+0x1c]
c001012c:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0010133:	75 0b                	jne    c0010140 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x28>
c0010135:	8b 00                	mov    eax,DWORD PTR [eax]
c0010137:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c001013b:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c001013e:	eb 20                	jmp    c0010160 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x48>
c0010140:	e8 a5 3b 00 00       	call   c0013cea <thisCPU()>
c0010145:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c001014b:	8b 10                	mov    edx,DWORD PTR [eax]
c001014d:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c0010151:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0010155:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0010159:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001015d:	8b 42 30             	mov    eax,DWORD PTR [edx+0x30]
c0010160:	5b                   	pop    ebx
c0010161:	5e                   	pop    esi
c0010162:	5f                   	pop    edi
c0010163:	ff e0                	jmp    eax
c0010165:	90                   	nop

c0010166 <Device::addChild(Device*)>:
c0010166:	53                   	push   ebx
c0010167:	83 ec 08             	sub    esp,0x8
c001016a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001016e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010172:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0010178:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c001017e:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010180:	85 d2                	test   edx,edx
c0010182:	74 04                	je     c0010188 <Device::addChild(Device*)+0x22>
c0010184:	89 d3                	mov    ebx,edx
c0010186:	eb f6                	jmp    c001017e <Device::addChild(Device*)+0x18>
c0010188:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001018b:	83 ec 0c             	sub    esp,0xc
c001018e:	6a 08                	push   0x8
c0010190:	e8 d7 ea ff ff       	call   c000ec6c <operator new(unsigned long)>
c0010195:	89 03                	mov    DWORD PTR [ebx],eax
c0010197:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001019d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00101a4:	83 c4 18             	add    esp,0x18
c00101a7:	5b                   	pop    ebx
c00101a8:	c3                   	ret    
c00101a9:	90                   	nop

c00101aa <Device::removeAllChildren()>:
c00101aa:	56                   	push   esi
c00101ab:	53                   	push   ebx
c00101ac:	52                   	push   edx
c00101ad:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00101b1:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c00101b7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00101ba:	74 17                	je     c00101d3 <Device::removeAllChildren()+0x29>
c00101bc:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00101bf:	85 c0                	test   eax,eax
c00101c1:	74 0c                	je     c00101cf <Device::removeAllChildren()+0x25>
c00101c3:	83 ec 0c             	sub    esp,0xc
c00101c6:	8b 10                	mov    edx,DWORD PTR [eax]
c00101c8:	50                   	push   eax
c00101c9:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00101cc:	83 c4 10             	add    esp,0x10
c00101cf:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00101d1:	eb e4                	jmp    c00101b7 <Device::removeAllChildren()+0xd>
c00101d3:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00101d9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00101df:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00101e5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00101ec:	58                   	pop    eax
c00101ed:	5b                   	pop    ebx
c00101ee:	5e                   	pop    esi
c00101ef:	c3                   	ret    

c00101f0 <Device::hibernateAll()>:
c00101f0:	53                   	push   ebx
c00101f1:	83 ec 14             	sub    esp,0x14
c00101f4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00101f8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00101fa:	53                   	push   ebx
c00101fb:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00101fe:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0010204:	83 c4 10             	add    esp,0x10
c0010207:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001020a:	74 0f                	je     c001021b <Device::hibernateAll()+0x2b>
c001020c:	83 ec 0c             	sub    esp,0xc
c001020f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0010212:	e8 d9 ff ff ff       	call   c00101f0 <Device::hibernateAll()>
c0010217:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0010219:	eb e9                	jmp    c0010204 <Device::hibernateAll()+0x14>
c001021b:	83 c4 08             	add    esp,0x8
c001021e:	5b                   	pop    ebx
c001021f:	c3                   	ret    

c0010220 <Device::wakeAll()>:
c0010220:	53                   	push   ebx
c0010221:	83 ec 14             	sub    esp,0x14
c0010224:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0010228:	8b 03                	mov    eax,DWORD PTR [ebx]
c001022a:	53                   	push   ebx
c001022b:	ff 50 14             	call   DWORD PTR [eax+0x14]
c001022e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0010234:	83 c4 10             	add    esp,0x10
c0010237:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001023a:	74 0f                	je     c001024b <Device::wakeAll()+0x2b>
c001023c:	83 ec 0c             	sub    esp,0xc
c001023f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0010242:	e8 d9 ff ff ff       	call   c0010220 <Device::wakeAll()>
c0010247:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0010249:	eb e9                	jmp    c0010234 <Device::wakeAll()+0x14>
c001024b:	83 c4 08             	add    esp,0x8
c001024e:	5b                   	pop    ebx
c001024f:	c3                   	ret    

c0010250 <Device::detectAll()>:
c0010250:	53                   	push   ebx
c0010251:	83 ec 14             	sub    esp,0x14
c0010254:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0010258:	8b 03                	mov    eax,DWORD PTR [ebx]
c001025a:	53                   	push   ebx
c001025b:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001025e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0010264:	83 c4 10             	add    esp,0x10
c0010267:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001026a:	74 0f                	je     c001027b <Device::detectAll()+0x2b>
c001026c:	83 ec 0c             	sub    esp,0xc
c001026f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0010272:	e8 d9 ff ff ff       	call   c0010250 <Device::detectAll()>
c0010277:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0010279:	eb e9                	jmp    c0010264 <Device::detectAll()+0x14>
c001027b:	83 c4 08             	add    esp,0x8
c001027e:	5b                   	pop    ebx
c001027f:	c3                   	ret    

c0010280 <Device::disableLegacyAll()>:
c0010280:	53                   	push   ebx
c0010281:	83 ec 14             	sub    esp,0x14
c0010284:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0010288:	8b 03                	mov    eax,DWORD PTR [ebx]
c001028a:	53                   	push   ebx
c001028b:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c001028e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0010294:	83 c4 10             	add    esp,0x10
c0010297:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001029a:	74 0f                	je     c00102ab <Device::disableLegacyAll()+0x2b>
c001029c:	83 ec 0c             	sub    esp,0xc
c001029f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00102a2:	e8 d9 ff ff ff       	call   c0010280 <Device::disableLegacyAll()>
c00102a7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00102a9:	eb e9                	jmp    c0010294 <Device::disableLegacyAll()+0x14>
c00102ab:	83 c4 08             	add    esp,0x8
c00102ae:	5b                   	pop    ebx
c00102af:	c3                   	ret    

c00102b0 <Device::loadDriversForAll()>:
c00102b0:	53                   	push   ebx
c00102b1:	83 ec 08             	sub    esp,0x8
c00102b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102b8:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00102be:	8b 18                	mov    ebx,DWORD PTR [eax]
c00102c0:	85 db                	test   ebx,ebx
c00102c2:	74 12                	je     c00102d6 <Device::loadDriversForAll()+0x26>
c00102c4:	83 ec 0c             	sub    esp,0xc
c00102c7:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00102ca:	e8 e1 ff ff ff       	call   c00102b0 <Device::loadDriversForAll()>
c00102cf:	83 c4 10             	add    esp,0x10
c00102d2:	89 d8                	mov    eax,ebx
c00102d4:	eb e8                	jmp    c00102be <Device::loadDriversForAll()+0xe>
c00102d6:	83 c4 08             	add    esp,0x8
c00102d9:	5b                   	pop    ebx
c00102da:	c3                   	ret    
c00102db:	90                   	nop

c00102dc <Device::closeAll()>:
c00102dc:	53                   	push   ebx
c00102dd:	83 ec 08             	sub    esp,0x8
c00102e0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00102e4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00102e6:	6a 00                	push   0x0
c00102e8:	6a 00                	push   0x0
c00102ea:	6a 00                	push   0x0
c00102ec:	53                   	push   ebx
c00102ed:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00102f0:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00102f6:	83 c4 10             	add    esp,0x10
c00102f9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00102fc:	74 0f                	je     c001030d <Device::closeAll()+0x31>
c00102fe:	83 ec 0c             	sub    esp,0xc
c0010301:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0010304:	e8 d3 ff ff ff       	call   c00102dc <Device::closeAll()>
c0010309:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001030b:	eb e9                	jmp    c00102f6 <Device::closeAll()+0x1a>
c001030d:	83 c4 08             	add    esp,0x8
c0010310:	5b                   	pop    ebx
c0010311:	c3                   	ret    

c0010312 <Device::powerSavingAll(PowerSavingLevel)>:
c0010312:	56                   	push   esi
c0010313:	53                   	push   ebx
c0010314:	83 ec 0c             	sub    esp,0xc
c0010317:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001031b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001031f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010321:	56                   	push   esi
c0010322:	53                   	push   ebx
c0010323:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0010326:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001032c:	83 c4 10             	add    esp,0x10
c001032f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0010332:	74 0f                	je     c0010343 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0010334:	52                   	push   edx
c0010335:	52                   	push   edx
c0010336:	56                   	push   esi
c0010337:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001033a:	e8 d3 ff ff ff       	call   c0010312 <Device::powerSavingAll(PowerSavingLevel)>
c001033f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0010341:	eb e9                	jmp    c001032c <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0010343:	58                   	pop    eax
c0010344:	5b                   	pop    ebx
c0010345:	5e                   	pop    esi
c0010346:	c3                   	ret    
c0010347:	90                   	nop

c0010348 <Device::setName(char const*)>:
c0010348:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0010350:	e9 52 03 ff ff       	jmp    c00006a7 <strcpy>
c0010355:	90                   	nop

c0010356 <Device::Device(char const*)>:
c0010356:	83 ec 0c             	sub    esp,0xc
c0010359:	ba d8 09 02 c0       	mov    edx,0xc00209d8
c001035e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010362:	89 10                	mov    DWORD PTR [eax],edx
c0010364:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010368:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0010372:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010376:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0010380:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010384:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001038e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010392:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c001039c:	83 ec 08             	sub    esp,0x8
c001039f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00103a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00103a7:	e8 9c ff ff ff       	call   c0010348 <Device::setName(char const*)>
c00103ac:	83 c4 10             	add    esp,0x10
c00103af:	83 ec 0c             	sub    esp,0xc
c00103b2:	6a 08                	push   0x8
c00103b4:	e8 b3 e8 ff ff       	call   c000ec6c <operator new(unsigned long)>
c00103b9:	83 c4 10             	add    esp,0x10
c00103bc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00103c2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00103c9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00103cd:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c00103d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00103d7:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00103dd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00103e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00103e7:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00103ed:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00103f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00103f8:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c00103ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010403:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c001040a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001040e:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0010418:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001041c:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0010426:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001042a:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0010434:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010438:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c0010442:	90                   	nop
c0010443:	83 c4 0c             	add    esp,0xc
c0010446:	c3                   	ret    
c0010447:	90                   	nop

c0010448 <Device::getName()>:
c0010448:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001044c:	05 d0 00 00 00       	add    eax,0xd0
c0010451:	c3                   	ret    

c0010452 <DriverlessDevice::DriverlessDevice(char const*)>:
c0010452:	83 ec 0c             	sub    esp,0xc
c0010455:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010459:	83 ec 08             	sub    esp,0x8
c001045c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010460:	50                   	push   eax
c0010461:	e8 f0 fe ff ff       	call   c0010356 <Device::Device(char const*)>
c0010466:	83 c4 10             	add    esp,0x10
c0010469:	ba 04 0a 02 c0       	mov    edx,0xc0020a04
c001046e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010472:	89 10                	mov    DWORD PTR [eax],edx
c0010474:	90                   	nop
c0010475:	83 c4 0c             	add    esp,0xc
c0010478:	c3                   	ret    
c0010479:	90                   	nop

c001047a <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c001047a:	57                   	push   edi
c001047b:	56                   	push   esi
c001047c:	53                   	push   ebx
c001047d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010481:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0010485:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010489:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c001048f:	75 0c                	jne    c001049d <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0010491:	52                   	push   edx
c0010492:	52                   	push   edx
c0010493:	53                   	push   ebx
c0010494:	56                   	push   esi
c0010495:	e8 3a e4 00 00       	call   c001e8d4 <LinkedList<Device>::addElement(Device*)>
c001049a:	83 c4 10             	add    esp,0x10
c001049d:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00104a3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00104a6:	74 12                	je     c00104ba <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c00104a8:	50                   	push   eax
c00104a9:	57                   	push   edi
c00104aa:	56                   	push   esi
c00104ab:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00104ae:	e8 c7 ff ff ff       	call   c001047a <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c00104b3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00104b5:	83 c4 10             	add    esp,0x10
c00104b8:	eb e9                	jmp    c00104a3 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c00104ba:	5b                   	pop    ebx
c00104bb:	5e                   	pop    esi
c00104bc:	5f                   	pop    edi
c00104bd:	c3                   	ret    

c00104be <getDevicesOfType(DeviceType)>:
c00104be:	53                   	push   ebx
c00104bf:	83 ec 14             	sub    esp,0x14
c00104c2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00104c6:	53                   	push   ebx
c00104c7:	e8 e4 e4 00 00       	call   c001e9b0 <LinkedList<Device>::LinkedList()>
c00104cc:	83 c4 0c             	add    esp,0xc
c00104cf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00104d3:	53                   	push   ebx
c00104d4:	ff 35 08 34 02 c0    	push   DWORD PTR ds:0xc0023408
c00104da:	e8 9b ff ff ff       	call   c001047a <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c00104df:	89 d8                	mov    eax,ebx
c00104e1:	83 c4 18             	add    esp,0x18
c00104e4:	5b                   	pop    ebx
c00104e5:	c2 04 00             	ret    0x4

c00104e8 <HardDiskController::HardDiskController(char const*)>:
c00104e8:	83 ec 0c             	sub    esp,0xc
c00104eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104ef:	83 ec 08             	sub    esp,0x8
c00104f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00104f6:	50                   	push   eax
c00104f7:	e8 5a fe ff ff       	call   c0010356 <Device::Device(char const*)>
c00104fc:	83 c4 10             	add    esp,0x10
c00104ff:	ba 30 0a 02 c0       	mov    edx,0xc0020a30
c0010504:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010508:	89 10                	mov    DWORD PTR [eax],edx
c001050a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001050e:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c0010518:	90                   	nop
c0010519:	83 c4 0c             	add    esp,0xc
c001051c:	c3                   	ret    
c001051d:	90                   	nop

c001051e <HardDiskController::~HardDiskController()>:
c001051e:	83 ec 0c             	sub    esp,0xc
c0010521:	ba 30 0a 02 c0       	mov    edx,0xc0020a30
c0010526:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001052a:	89 10                	mov    DWORD PTR [eax],edx
c001052c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010530:	83 ec 0c             	sub    esp,0xc
c0010533:	50                   	push   eax
c0010534:	e8 cf fa ff ff       	call   c0010008 <Device::~Device()>
c0010539:	83 c4 10             	add    esp,0x10
c001053c:	90                   	nop
c001053d:	83 c4 0c             	add    esp,0xc
c0010540:	c3                   	ret    
c0010541:	90                   	nop

c0010542 <HardDiskController::~HardDiskController()>:
c0010542:	83 ec 0c             	sub    esp,0xc
c0010545:	83 ec 0c             	sub    esp,0xc
c0010548:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001054c:	e8 cd ff ff ff       	call   c001051e <HardDiskController::~HardDiskController()>
c0010551:	83 c4 10             	add    esp,0x10
c0010554:	83 ec 08             	sub    esp,0x8
c0010557:	68 58 01 00 00       	push   0x158
c001055c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010560:	e8 16 e7 ff ff       	call   c000ec7b <operator delete(void*, unsigned long)>
c0010565:	83 c4 10             	add    esp,0x10
c0010568:	83 c4 0c             	add    esp,0xc
c001056b:	c3                   	ret    

c001056c <PhysicalDisk::PhysicalDisk(char const*, int)>:
c001056c:	83 ec 0c             	sub    esp,0xc
c001056f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010573:	83 ec 08             	sub    esp,0x8
c0010576:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001057a:	50                   	push   eax
c001057b:	e8 d6 fd ff ff       	call   c0010356 <Device::Device(char const*)>
c0010580:	83 c4 10             	add    esp,0x10
c0010583:	ba 5c 0a 02 c0       	mov    edx,0xc0020a5c
c0010588:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001058c:	89 10                	mov    DWORD PTR [eax],edx
c001058e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010592:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0010599:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001059d:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c00105a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105a8:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c00105b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105b6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00105ba:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00105c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105c4:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00105ce:	90                   	nop
c00105cf:	83 c4 0c             	add    esp,0xc
c00105d2:	c3                   	ret    
c00105d3:	90                   	nop

c00105d4 <PhysicalDisk::startCache()>:
c00105d4:	56                   	push   esi
c00105d5:	53                   	push   ebx
c00105d6:	83 ec 10             	sub    esp,0x10
c00105d9:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00105dd:	6a 30                	push   0x30
c00105df:	e8 88 e6 ff ff       	call   c000ec6c <operator new(unsigned long)>
c00105e4:	89 c6                	mov    esi,eax
c00105e6:	58                   	pop    eax
c00105e7:	5a                   	pop    edx
c00105e8:	53                   	push   ebx
c00105e9:	56                   	push   esi
c00105ea:	e8 6d 1e 00 00       	call   c001245c <VCache::VCache(PhysicalDisk*)>
c00105ef:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c00105f5:	83 c4 14             	add    esp,0x14
c00105f8:	5b                   	pop    ebx
c00105f9:	5e                   	pop    esi
c00105fa:	c3                   	ret    
c00105fb:	90                   	nop

c00105fc <PhysicalDisk::~PhysicalDisk()>:
c00105fc:	83 ec 0c             	sub    esp,0xc
c00105ff:	ba 5c 0a 02 c0       	mov    edx,0xc0020a5c
c0010604:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010608:	89 10                	mov    DWORD PTR [eax],edx
c001060a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001060e:	83 ec 0c             	sub    esp,0xc
c0010611:	50                   	push   eax
c0010612:	e8 f1 f9 ff ff       	call   c0010008 <Device::~Device()>
c0010617:	83 c4 10             	add    esp,0x10
c001061a:	90                   	nop
c001061b:	83 c4 0c             	add    esp,0xc
c001061e:	c3                   	ret    
c001061f:	90                   	nop

c0010620 <PhysicalDisk::~PhysicalDisk()>:
c0010620:	83 ec 0c             	sub    esp,0xc
c0010623:	83 ec 0c             	sub    esp,0xc
c0010626:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001062a:	e8 cd ff ff ff       	call   c00105fc <PhysicalDisk::~PhysicalDisk()>
c001062f:	83 c4 10             	add    esp,0x10
c0010632:	83 ec 08             	sub    esp,0x8
c0010635:	68 6c 01 00 00       	push   0x16c
c001063a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001063e:	e8 38 e6 ff ff       	call   c000ec7b <operator delete(void*, unsigned long)>
c0010643:	83 c4 10             	add    esp,0x10
c0010646:	83 c4 0c             	add    esp,0xc
c0010649:	c3                   	ret    

c001064a <FPU::FPU(char const*)>:
c001064a:	83 ec 0c             	sub    esp,0xc
c001064d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010651:	83 ec 08             	sub    esp,0x8
c0010654:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010658:	50                   	push   eax
c0010659:	e8 f8 fc ff ff       	call   c0010356 <Device::Device(char const*)>
c001065e:	83 c4 10             	add    esp,0x10
c0010661:	ba 9c 0a 02 c0       	mov    edx,0xc0020a9c
c0010666:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001066a:	89 10                	mov    DWORD PTR [eax],edx
c001066c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010670:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c001067a:	90                   	nop
c001067b:	83 c4 0c             	add    esp,0xc
c001067e:	c3                   	ret    
c001067f:	90                   	nop

c0010680 <FPU::~FPU()>:
c0010680:	83 ec 0c             	sub    esp,0xc
c0010683:	ba 9c 0a 02 c0       	mov    edx,0xc0020a9c
c0010688:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001068c:	89 10                	mov    DWORD PTR [eax],edx
c001068e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010692:	83 ec 0c             	sub    esp,0xc
c0010695:	50                   	push   eax
c0010696:	e8 6d f9 ff ff       	call   c0010008 <Device::~Device()>
c001069b:	83 c4 10             	add    esp,0x10
c001069e:	90                   	nop
c001069f:	83 c4 0c             	add    esp,0xc
c00106a2:	c3                   	ret    
c00106a3:	90                   	nop

c00106a4 <FPU::~FPU()>:
c00106a4:	83 ec 0c             	sub    esp,0xc
c00106a7:	83 ec 0c             	sub    esp,0xc
c00106aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00106ae:	e8 cd ff ff ff       	call   c0010680 <FPU::~FPU()>
c00106b3:	83 c4 10             	add    esp,0x10
c00106b6:	83 ec 08             	sub    esp,0x8
c00106b9:	68 58 01 00 00       	push   0x158
c00106be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00106c2:	e8 b4 e5 ff ff       	call   c000ec7b <operator delete(void*, unsigned long)>
c00106c7:	83 c4 10             	add    esp,0x10
c00106ca:	83 c4 0c             	add    esp,0xc
c00106cd:	c3                   	ret    

c00106ce <setupFPU()>:
c00106ce:	53                   	push   ebx
c00106cf:	83 ec 08             	sub    esp,0x8
c00106d2:	a1 08 34 02 c0       	mov    eax,ds:0xc0023408
c00106d7:	f6 80 e9 01 00 00 20 	test   BYTE PTR [eax+0x1e9],0x20
c00106de:	74 19                	je     c00106f9 <setupFPU()+0x2b>
c00106e0:	83 ec 0c             	sub    esp,0xc
c00106e3:	68 58 01 00 00       	push   0x158
c00106e8:	e8 7f e5 ff ff       	call   c000ec6c <operator new(unsigned long)>
c00106ed:	89 c3                	mov    ebx,eax
c00106ef:	89 04 24             	mov    DWORD PTR [esp],eax
c00106f2:	e8 95 c9 00 00       	call   c001d08c <AVX::AVX()>
c00106f7:	eb 5b                	jmp    c0010754 <setupFPU()+0x86>
c00106f9:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00106ff:	84 c0                	test   al,al
c0010701:	79 19                	jns    c001071c <setupFPU()+0x4e>
c0010703:	83 ec 0c             	sub    esp,0xc
c0010706:	68 58 01 00 00       	push   0x158
c001070b:	e8 5c e5 ff ff       	call   c000ec6c <operator new(unsigned long)>
c0010710:	89 c3                	mov    ebx,eax
c0010712:	89 04 24             	mov    DWORD PTR [esp],eax
c0010715:	e8 98 ca 00 00       	call   c001d1b2 <SSE::SSE()>
c001071a:	eb 38                	jmp    c0010754 <setupFPU()+0x86>
c001071c:	a8 20                	test   al,0x20
c001071e:	74 19                	je     c0010739 <setupFPU()+0x6b>
c0010720:	83 ec 0c             	sub    esp,0xc
c0010723:	68 58 01 00 00       	push   0x158
c0010728:	e8 3f e5 ff ff       	call   c000ec6c <operator new(unsigned long)>
c001072d:	89 c3                	mov    ebx,eax
c001072f:	89 04 24             	mov    DWORD PTR [esp],eax
c0010732:	e8 e5 c9 00 00       	call   c001d11c <MMX::MMX()>
c0010737:	eb 1b                	jmp    c0010754 <setupFPU()+0x86>
c0010739:	a8 10                	test   al,0x10
c001073b:	74 1c                	je     c0010759 <setupFPU()+0x8b>
c001073d:	83 ec 0c             	sub    esp,0xc
c0010740:	68 58 01 00 00       	push   0x158
c0010745:	e8 22 e5 ff ff       	call   c000ec6c <operator new(unsigned long)>
c001074a:	89 c3                	mov    ebx,eax
c001074c:	89 04 24             	mov    DWORD PTR [esp],eax
c001074f:	e8 ec ca 00 00       	call   c001d240 <x87::x87()>
c0010754:	83 c4 10             	add    esp,0x10
c0010757:	eb 2c                	jmp    c0010785 <setupFPU()+0xb7>
c0010759:	83 ec 0c             	sub    esp,0xc
c001075c:	31 db                	xor    ebx,ebx
c001075e:	68 88 0a 02 c0       	push   0xc0020a88
c0010763:	e8 f3 e5 ff ff       	call   c000ed5b <Dbg::kprintf(char const*, ...)>
c0010768:	e8 7d 35 00 00       	call   c0013cea <thisCPU()>
c001076d:	e8 78 35 00 00       	call   c0013cea <thisCPU()>
c0010772:	e8 91 e2 00 00       	call   c001ea08 <CPU::readCR0()>
c0010777:	83 c8 04             	or     eax,0x4
c001077a:	89 04 24             	mov    DWORD PTR [esp],eax
c001077d:	e8 98 e2 00 00       	call   c001ea1a <CPU::writeCR0(unsigned long)>
c0010782:	83 c4 10             	add    esp,0x10
c0010785:	89 d8                	mov    eax,ebx
c0010787:	83 c4 08             	add    esp,0x8
c001078a:	5b                   	pop    ebx
c001078b:	c3                   	ret    

c001078c <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c001078c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010790:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010794:	c1 e0 04             	shl    eax,0x4
c0010797:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001079b:	8d 50 10             	lea    edx,[eax+0x10]
c001079e:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c00107a4:	74 08                	je     c00107ae <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c00107a6:	83 c0 04             	add    eax,0x4
c00107a9:	39 d0                	cmp    eax,edx
c00107ab:	75 f1                	jne    c001079e <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c00107ad:	c3                   	ret    
c00107ae:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00107b8:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c00107c2:	eb e2                	jmp    c00107a6 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c00107c4 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c00107c4:	57                   	push   edi
c00107c5:	31 c0                	xor    eax,eax
c00107c7:	56                   	push   esi
c00107c8:	53                   	push   ebx
c00107c9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00107cd:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00107d1:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00107d5:	89 da                	mov    edx,ebx
c00107d7:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00107db:	c1 e2 04             	shl    edx,0x4
c00107de:	01 ca                	add    edx,ecx
c00107e0:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c00107e8:	74 16                	je     c0010800 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c00107ea:	40                   	inc    eax
c00107eb:	83 f8 04             	cmp    eax,0x4
c00107ee:	75 f0                	jne    c00107e0 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c00107f0:	c7 44 24 10 cc 0a 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020acc
c00107f8:	5b                   	pop    ebx
c00107f9:	5e                   	pop    esi
c00107fa:	5f                   	pop    edi
c00107fb:	e9 f0 41 00 00       	jmp    c00149f0 <Krnl::panic(char const*)>
c0010800:	8d 04 98             	lea    eax,[eax+ebx*4]
c0010803:	8d 04 81             	lea    eax,[ecx+eax*4]
c0010806:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c001080c:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c0010812:	5b                   	pop    ebx
c0010813:	5e                   	pop    esi
c0010814:	5f                   	pop    edi
c0010815:	c3                   	ret    

c0010816 <doubleFault(regs*, void*)>:
c0010816:	c7 44 24 04 fc 0b 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020bfc
c001081e:	e9 cd 41 00 00       	jmp    c00149f0 <Krnl::panic(char const*)>
c0010823:	90                   	nop

c0010824 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0010824:	56                   	push   esi
c0010825:	53                   	push   ebx
c0010826:	50                   	push   eax
c0010827:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001082b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001082f:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0010834:	75 35                	jne    c001086b <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c0010836:	8d 43 20             	lea    eax,[ebx+0x20]
c0010839:	31 d2                	xor    edx,edx
c001083b:	89 c1                	mov    ecx,eax
c001083d:	c1 e1 04             	shl    ecx,0x4
c0010840:	01 f1                	add    ecx,esi
c0010842:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c001084a:	74 3e                	je     c001088a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c001084c:	42                   	inc    edx
c001084d:	83 fa 04             	cmp    edx,0x4
c0010850:	75 f0                	jne    c0010842 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c0010852:	83 ec 0c             	sub    esp,0xc
c0010855:	68 40 0b 02 c0       	push   0xc0020b40
c001085a:	e8 91 41 00 00       	call   c00149f0 <Krnl::panic(char const*)>
c001085f:	83 c4 10             	add    esp,0x10
c0010862:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010867:	5a                   	pop    edx
c0010868:	5b                   	pop    ebx
c0010869:	5e                   	pop    esi
c001086a:	c3                   	ret    
c001086b:	83 ec 0c             	sub    esp,0xc
c001086e:	56                   	push   esi
c001086f:	e8 d4 fb ff ff       	call   c0010448 <Device::getName()>
c0010874:	83 c4 10             	add    esp,0x10
c0010877:	80 38 41             	cmp    BYTE PTR [eax],0x41
c001087a:	75 ba                	jne    c0010836 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c001087c:	83 fb 0f             	cmp    ebx,0xf
c001087f:	7f 29                	jg     c00108aa <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c0010881:	0f b6 9b 60 2b 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffdd4a0]
c0010888:	eb ac                	jmp    c0010836 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c001088a:	8d 04 82             	lea    eax,[edx+eax*4]
c001088d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010891:	8d 04 86             	lea    eax,[esi+eax*4]
c0010894:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001089a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001089e:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c00108a4:	89 d8                	mov    eax,ebx
c00108a6:	5a                   	pop    edx
c00108a7:	5b                   	pop    ebx
c00108a8:	5e                   	pop    esi
c00108a9:	c3                   	ret    
c00108aa:	83 ec 0c             	sub    esp,0xc
c00108ad:	68 08 0b 02 c0       	push   0xc0020b08
c00108b2:	e8 39 41 00 00       	call   c00149f0 <Krnl::panic(char const*)>
c00108b7:	83 c4 10             	add    esp,0x10
c00108ba:	e9 77 ff ff ff       	jmp    c0010836 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c00108bf:	90                   	nop

c00108c0 <InterruptController::clearAllHandlers(int, bool)>:
c00108c0:	56                   	push   esi
c00108c1:	53                   	push   ebx
c00108c2:	52                   	push   edx
c00108c3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00108c7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00108cb:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00108d0:	75 61                	jne    c0010933 <InterruptController::clearAllHandlers(int, bool)+0x73>
c00108d2:	8d 46 20             	lea    eax,[esi+0x20]
c00108d5:	c1 e6 04             	shl    esi,0x4
c00108d8:	c1 e0 04             	shl    eax,0x4
c00108db:	01 de                	add    esi,ebx
c00108dd:	01 d8                	add    eax,ebx
c00108df:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c00108e9:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c00108f3:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c00108fd:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0010907:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c0010911:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c001091b:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c0010925:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c001092f:	58                   	pop    eax
c0010930:	5b                   	pop    ebx
c0010931:	5e                   	pop    esi
c0010932:	c3                   	ret    
c0010933:	83 ec 0c             	sub    esp,0xc
c0010936:	53                   	push   ebx
c0010937:	e8 0c fb ff ff       	call   c0010448 <Device::getName()>
c001093c:	83 c4 10             	add    esp,0x10
c001093f:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0010942:	75 8e                	jne    c00108d2 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0010944:	83 fe 0f             	cmp    esi,0xf
c0010947:	7f 09                	jg     c0010952 <InterruptController::clearAllHandlers(int, bool)+0x92>
c0010949:	0f b6 b6 60 2b 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffdd4a0]
c0010950:	eb 80                	jmp    c00108d2 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0010952:	83 ec 0c             	sub    esp,0xc
c0010955:	68 7c 0b 02 c0       	push   0xc0020b7c
c001095a:	e8 91 40 00 00       	call   c00149f0 <Krnl::panic(char const*)>
c001095f:	83 c4 10             	add    esp,0x10
c0010962:	e9 6b ff ff ff       	jmp    c00108d2 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0010967:	90                   	nop

c0010968 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0010968:	56                   	push   esi
c0010969:	53                   	push   ebx
c001096a:	52                   	push   edx
c001096b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001096f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010973:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0010978:	75 3a                	jne    c00109b4 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c001097a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001097e:	8d 50 20             	lea    edx,[eax+0x20]
c0010981:	c1 e2 04             	shl    edx,0x4
c0010984:	8d 04 16             	lea    eax,[esi+edx*1]
c0010987:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c001098b:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0010991:	74 0b                	je     c001099e <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0010993:	83 c0 04             	add    eax,0x4
c0010996:	39 d0                	cmp    eax,edx
c0010998:	75 f1                	jne    c001098b <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c001099a:	58                   	pop    eax
c001099b:	5b                   	pop    ebx
c001099c:	5e                   	pop    esi
c001099d:	c3                   	ret    
c001099e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00109a8:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c00109b2:	eb df                	jmp    c0010993 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c00109b4:	83 ec 0c             	sub    esp,0xc
c00109b7:	56                   	push   esi
c00109b8:	e8 8b fa ff ff       	call   c0010448 <Device::getName()>
c00109bd:	83 c4 10             	add    esp,0x10
c00109c0:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00109c3:	75 b5                	jne    c001097a <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c00109c5:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c00109ca:	7f 11                	jg     c00109dd <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c00109cc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00109d0:	0f b6 80 60 2b 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdd4a0]
c00109d7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00109db:	eb 9d                	jmp    c001097a <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c00109dd:	83 ec 0c             	sub    esp,0xc
c00109e0:	68 7c 0b 02 c0       	push   0xc0020b7c
c00109e5:	e8 06 40 00 00       	call   c00149f0 <Krnl::panic(char const*)>
c00109ea:	83 c4 10             	add    esp,0x10
c00109ed:	eb 8b                	jmp    c001097a <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c00109ef <nmiHandler(regs*, void*)>:
c00109ef:	a1 08 34 02 c0       	mov    eax,ds:0xc0023408
c00109f4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00109f8:	e9 65 a9 ff ff       	jmp    c000b362 <Computer::handleNMI()>

c00109fd <int_handler>:
c00109fd:	55                   	push   ebp
c00109fe:	57                   	push   edi
c00109ff:	56                   	push   esi
c0010a00:	53                   	push   ebx
c0010a01:	83 ec 0c             	sub    esp,0xc
c0010a04:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0010a08:	80 3d 54 3e 02 c0 00 	cmp    BYTE PTR ds:0xc0023e54,0x0
c0010a0f:	74 0b                	je     c0010a1c <int_handler+0x1f>
c0010a11:	fa                   	cli    
c0010a12:	f4                   	hlt    
c0010a13:	80 3d 54 3e 02 c0 00 	cmp    BYTE PTR ds:0xc0023e54,0x0
c0010a1a:	75 f5                	jne    c0010a11 <int_handler+0x14>
c0010a1c:	e8 c9 32 00 00       	call   c0013cea <thisCPU()>
c0010a21:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0010a24:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0010a2a:	8d 43 e0             	lea    eax,[ebx-0x20]
c0010a2d:	83 f8 17             	cmp    eax,0x17
c0010a30:	77 13                	ja     c0010a45 <int_handler+0x48>
c0010a32:	83 ec 08             	sub    esp,0x8
c0010a35:	8b 17                	mov    edx,DWORD PTR [edi]
c0010a37:	8d 43 e0             	lea    eax,[ebx-0x20]
c0010a3a:	0f b6 c0             	movzx  eax,al
c0010a3d:	50                   	push   eax
c0010a3e:	57                   	push   edi
c0010a3f:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0010a42:	83 c4 10             	add    esp,0x10
c0010a45:	83 c3 15             	add    ebx,0x15
c0010a48:	c1 e3 04             	shl    ebx,0x4
c0010a4b:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0010a4f:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0010a56:	31 db                	xor    ebx,ebx
c0010a58:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0010a5c:	85 c0                	test   eax,eax
c0010a5e:	74 13                	je     c0010a73 <int_handler+0x76>
c0010a60:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0010a63:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0010a67:	74 1c                	je     c0010a85 <int_handler+0x88>
c0010a69:	83 ec 08             	sub    esp,0x8
c0010a6c:	52                   	push   edx
c0010a6d:	56                   	push   esi
c0010a6e:	ff d0                	call   eax
c0010a70:	83 c4 10             	add    esp,0x10
c0010a73:	43                   	inc    ebx
c0010a74:	83 fb 04             	cmp    ebx,0x4
c0010a77:	75 df                	jne    c0010a58 <int_handler+0x5b>
c0010a79:	83 c4 0c             	add    esp,0xc
c0010a7c:	31 c0                	xor    eax,eax
c0010a7e:	5b                   	pop    ebx
c0010a7f:	31 d2                	xor    edx,edx
c0010a81:	5e                   	pop    esi
c0010a82:	5f                   	pop    edi
c0010a83:	5d                   	pop    ebp
c0010a84:	c3                   	ret    
c0010a85:	83 ec 08             	sub    esp,0x8
c0010a88:	52                   	push   edx
c0010a89:	56                   	push   esi
c0010a8a:	ff d0                	call   eax
c0010a8c:	83 c4 10             	add    esp,0x10
c0010a8f:	83 c4 0c             	add    esp,0xc
c0010a92:	5b                   	pop    ebx
c0010a93:	5e                   	pop    esi
c0010a94:	5f                   	pop    edi
c0010a95:	5d                   	pop    ebp
c0010a96:	c3                   	ret    
c0010a97:	90                   	nop

c0010a98 <InterruptController::InterruptController(char const*)>:
c0010a98:	83 ec 1c             	sub    esp,0x1c
c0010a9b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a9f:	83 ec 08             	sub    esp,0x8
c0010aa2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010aa6:	50                   	push   eax
c0010aa7:	e8 aa f8 ff ff       	call   c0010356 <Device::Device(char const*)>
c0010aac:	83 c4 10             	add    esp,0x10
c0010aaf:	ba 98 0d 02 c0       	mov    edx,0xc0020d98
c0010ab4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010ab8:	89 10                	mov    DWORD PTR [eax],edx
c0010aba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010abe:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c0010ac8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010ad0:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0010ad8:	7f 5e                	jg     c0010b38 <InterruptController::InterruptController(char const*)+0xa0>
c0010ada:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0010ae2:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0010ae7:	7f 49                	jg     c0010b32 <InterruptController::InterruptController(char const*)+0x9a>
c0010ae9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010aed:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010af1:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0010af8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010afc:	01 ca                	add    edx,ecx
c0010afe:	83 c2 54             	add    edx,0x54
c0010b01:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0010b09:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010b0d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010b11:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0010b18:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010b1c:	01 ca                	add    edx,ecx
c0010b1e:	81 c2 54 04 00 00    	add    edx,0x454
c0010b24:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0010b2c:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0010b30:	eb b0                	jmp    c0010ae2 <InterruptController::InterruptController(char const*)+0x4a>
c0010b32:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0010b36:	eb 98                	jmp    c0010ad0 <InterruptController::InterruptController(char const*)+0x38>
c0010b38:	90                   	nop
c0010b39:	83 c4 1c             	add    esp,0x1c
c0010b3c:	c3                   	ret    
c0010b3d:	90                   	nop

c0010b3e <InterruptController::~InterruptController()>:
c0010b3e:	83 ec 0c             	sub    esp,0xc
c0010b41:	ba 98 0d 02 c0       	mov    edx,0xc0020d98
c0010b46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b4a:	89 10                	mov    DWORD PTR [eax],edx
c0010b4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b50:	83 ec 0c             	sub    esp,0xc
c0010b53:	50                   	push   eax
c0010b54:	e8 af f4 ff ff       	call   c0010008 <Device::~Device()>
c0010b59:	83 c4 10             	add    esp,0x10
c0010b5c:	90                   	nop
c0010b5d:	83 c4 0c             	add    esp,0xc
c0010b60:	c3                   	ret    
c0010b61:	90                   	nop

c0010b62 <InterruptController::~InterruptController()>:
c0010b62:	83 ec 0c             	sub    esp,0xc
c0010b65:	83 ec 0c             	sub    esp,0xc
c0010b68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b6c:	e8 cd ff ff ff       	call   c0010b3e <InterruptController::~InterruptController()>
c0010b71:	83 c4 10             	add    esp,0x10
c0010b74:	83 ec 08             	sub    esp,0x8
c0010b77:	68 58 21 00 00       	push   0x2158
c0010b7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b80:	e8 f6 e0 ff ff       	call   c000ec7b <operator delete(void*, unsigned long)>
c0010b85:	83 c4 10             	add    esp,0x10
c0010b88:	83 c4 0c             	add    esp,0xc
c0010b8b:	c3                   	ret    

c0010b8c <displayDebugInfo(regs*)>:
c0010b8c:	55                   	push   ebp
c0010b8d:	57                   	push   edi
c0010b8e:	56                   	push   esi
c0010b8f:	53                   	push   ebx
c0010b90:	83 ec 24             	sub    esp,0x24
c0010b93:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0010b97:	0f 20 c2             	mov    edx,cr0
c0010b9a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0010b9e:	0f 20 d7             	mov    edi,cr2
c0010ba1:	0f 20 de             	mov    esi,cr3
c0010ba4:	0f 20 e5             	mov    ebp,cr4
c0010ba7:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0010baa:	68 09 0c 02 c0       	push   0xc0020c09
c0010baf:	e8 a7 e1 ff ff       	call   c000ed5b <Dbg::kprintf(char const*, ...)>
c0010bb4:	58                   	pop    eax
c0010bb5:	5a                   	pop    edx
c0010bb6:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0010bb9:	68 14 0c 02 c0       	push   0xc0020c14
c0010bbe:	e8 98 e1 ff ff       	call   c000ed5b <Dbg::kprintf(char const*, ...)>
c0010bc3:	59                   	pop    ecx
c0010bc4:	58                   	pop    eax
c0010bc5:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0010bc8:	68 1f 0c 02 c0       	push   0xc0020c1f
c0010bcd:	e8 89 e1 ff ff       	call   c000ed5b <Dbg::kprintf(char const*, ...)>
c0010bd2:	58                   	pop    eax
c0010bd3:	5a                   	pop    edx
c0010bd4:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0010bd7:	68 2a 0c 02 c0       	push   0xc0020c2a
c0010bdc:	e8 7a e1 ff ff       	call   c000ed5b <Dbg::kprintf(char const*, ...)>
c0010be1:	59                   	pop    ecx
c0010be2:	58                   	pop    eax
c0010be3:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010be6:	68 35 0c 02 c0       	push   0xc0020c35
c0010beb:	e8 6b e1 ff ff       	call   c000ed5b <Dbg::kprintf(char const*, ...)>
c0010bf0:	58                   	pop    eax
c0010bf1:	5a                   	pop    edx
c0010bf2:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0010bf5:	68 40 0c 02 c0       	push   0xc0020c40
c0010bfa:	e8 5c e1 ff ff       	call   c000ed5b <Dbg::kprintf(char const*, ...)>
c0010bff:	59                   	pop    ecx
c0010c00:	58                   	pop    eax
c0010c01:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0010c04:	68 5a 0c 02 c0       	push   0xc0020c5a
c0010c09:	e8 4d e1 ff ff       	call   c000ed5b <Dbg::kprintf(char const*, ...)>
c0010c0e:	58                   	pop    eax
c0010c0f:	5a                   	pop    edx
c0010c10:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010c13:	68 4b 0c 02 c0       	push   0xc0020c4b
c0010c18:	e8 3e e1 ff ff       	call   c000ed5b <Dbg::kprintf(char const*, ...)>
c0010c1d:	59                   	pop    ecx
c0010c1e:	58                   	pop    eax
c0010c1f:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0010c22:	68 56 0c 02 c0       	push   0xc0020c56
c0010c27:	e8 2f e1 ff ff       	call   c000ed5b <Dbg::kprintf(char const*, ...)>
c0010c2c:	58                   	pop    eax
c0010c2d:	5a                   	pop    edx
c0010c2e:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0010c31:	68 65 0c 02 c0       	push   0xc0020c65
c0010c36:	e8 20 e1 ff ff       	call   c000ed5b <Dbg::kprintf(char const*, ...)>
c0010c3b:	59                   	pop    ecx
c0010c3c:	58                   	pop    eax
c0010c3d:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010c40:	68 70 0c 02 c0       	push   0xc0020c70
c0010c45:	e8 11 e1 ff ff       	call   c000ed5b <Dbg::kprintf(char const*, ...)>
c0010c4a:	58                   	pop    eax
c0010c4b:	5a                   	pop    edx
c0010c4c:	57                   	push   edi
c0010c4d:	68 7b 0c 02 c0       	push   0xc0020c7b
c0010c52:	e8 04 e1 ff ff       	call   c000ed5b <Dbg::kprintf(char const*, ...)>
c0010c57:	59                   	pop    ecx
c0010c58:	58                   	pop    eax
c0010c59:	56                   	push   esi
c0010c5a:	68 86 0c 02 c0       	push   0xc0020c86
c0010c5f:	e8 f7 e0 ff ff       	call   c000ed5b <Dbg::kprintf(char const*, ...)>
c0010c64:	58                   	pop    eax
c0010c65:	a1 54 48 02 c0       	mov    eax,ds:0xc0024854
c0010c6a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010c70:	e8 de c2 ff ff       	call   c000cf53 <setActiveTerminal(VgaText*)>
c0010c75:	58                   	pop    eax
c0010c76:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0010c79:	5a                   	pop    edx
c0010c7a:	c1 e0 05             	shl    eax,0x5
c0010c7d:	05 c0 28 02 c0       	add    eax,0xc00228c0
c0010c82:	50                   	push   eax
c0010c83:	a1 54 48 02 c0       	mov    eax,ds:0xc0024854
c0010c88:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010c8e:	e8 df c6 ff ff       	call   c000d372 <VgaText::puts(char const*)>
c0010c93:	59                   	pop    ecx
c0010c94:	58                   	pop    eax
c0010c95:	a1 54 48 02 c0       	mov    eax,ds:0xc0024854
c0010c9a:	68 91 0c 02 c0       	push   0xc0020c91
c0010c9f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010ca5:	e8 c8 c6 ff ff       	call   c000d372 <VgaText::puts(char const*)>
c0010caa:	58                   	pop    eax
c0010cab:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010cb0:	5a                   	pop    edx
c0010cb1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0010cb4:	83 c0 0c             	add    eax,0xc
c0010cb7:	50                   	push   eax
c0010cb8:	a1 54 48 02 c0       	mov    eax,ds:0xc0024854
c0010cbd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010cc3:	e8 aa c6 ff ff       	call   c000d372 <VgaText::puts(char const*)>
c0010cc8:	59                   	pop    ecx
c0010cc9:	58                   	pop    eax
c0010cca:	a1 54 48 02 c0       	mov    eax,ds:0xc0024854
c0010ccf:	68 9a 0c 02 c0       	push   0xc0020c9a
c0010cd4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010cda:	e8 93 c6 ff ff       	call   c000d372 <VgaText::puts(char const*)>
c0010cdf:	58                   	pop    eax
c0010ce0:	a1 54 48 02 c0       	mov    eax,ds:0xc0024854
c0010ce5:	5a                   	pop    edx
c0010ce6:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0010ce9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010cef:	e8 a4 c6 ff ff       	call   c000d398 <VgaText::putx(unsigned int)>
c0010cf4:	59                   	pop    ecx
c0010cf5:	58                   	pop    eax
c0010cf6:	a1 54 48 02 c0       	mov    eax,ds:0xc0024854
c0010cfb:	68 a2 0c 02 c0       	push   0xc0020ca2
c0010d00:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010d06:	e8 67 c6 ff ff       	call   c000d372 <VgaText::puts(char const*)>
c0010d0b:	58                   	pop    eax
c0010d0c:	a1 54 48 02 c0       	mov    eax,ds:0xc0024854
c0010d11:	5a                   	pop    edx
c0010d12:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0010d15:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010d1b:	e8 78 c6 ff ff       	call   c000d398 <VgaText::putx(unsigned int)>
c0010d20:	59                   	pop    ecx
c0010d21:	58                   	pop    eax
c0010d22:	a1 54 48 02 c0       	mov    eax,ds:0xc0024854
c0010d27:	68 aa 0c 02 c0       	push   0xc0020caa
c0010d2c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010d32:	e8 3b c6 ff ff       	call   c000d372 <VgaText::puts(char const*)>
c0010d37:	58                   	pop    eax
c0010d38:	a1 54 48 02 c0       	mov    eax,ds:0xc0024854
c0010d3d:	5a                   	pop    edx
c0010d3e:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0010d41:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010d47:	e8 4c c6 ff ff       	call   c000d398 <VgaText::putx(unsigned int)>
c0010d4c:	59                   	pop    ecx
c0010d4d:	58                   	pop    eax
c0010d4e:	a1 54 48 02 c0       	mov    eax,ds:0xc0024854
c0010d53:	68 b2 0c 02 c0       	push   0xc0020cb2
c0010d58:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010d5e:	e8 0f c6 ff ff       	call   c000d372 <VgaText::puts(char const*)>
c0010d63:	58                   	pop    eax
c0010d64:	a1 54 48 02 c0       	mov    eax,ds:0xc0024854
c0010d69:	5a                   	pop    edx
c0010d6a:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0010d6d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010d73:	e8 20 c6 ff ff       	call   c000d398 <VgaText::putx(unsigned int)>
c0010d78:	59                   	pop    ecx
c0010d79:	58                   	pop    eax
c0010d7a:	a1 54 48 02 c0       	mov    eax,ds:0xc0024854
c0010d7f:	68 ba 0c 02 c0       	push   0xc0020cba
c0010d84:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010d8a:	e8 e3 c5 ff ff       	call   c000d372 <VgaText::puts(char const*)>
c0010d8f:	58                   	pop    eax
c0010d90:	a1 54 48 02 c0       	mov    eax,ds:0xc0024854
c0010d95:	5a                   	pop    edx
c0010d96:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010d99:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010d9f:	e8 f4 c5 ff ff       	call   c000d398 <VgaText::putx(unsigned int)>
c0010da4:	59                   	pop    ecx
c0010da5:	58                   	pop    eax
c0010da6:	a1 54 48 02 c0       	mov    eax,ds:0xc0024854
c0010dab:	68 c2 0c 02 c0       	push   0xc0020cc2
c0010db0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010db6:	e8 b7 c5 ff ff       	call   c000d372 <VgaText::puts(char const*)>
c0010dbb:	58                   	pop    eax
c0010dbc:	a1 54 48 02 c0       	mov    eax,ds:0xc0024854
c0010dc1:	5a                   	pop    edx
c0010dc2:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c0010dc5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010dcb:	e8 c8 c5 ff ff       	call   c000d398 <VgaText::putx(unsigned int)>
c0010dd0:	59                   	pop    ecx
c0010dd1:	a1 54 48 02 c0       	mov    eax,ds:0xc0024854
c0010dd6:	5b                   	pop    ebx
c0010dd7:	68 ca 0c 02 c0       	push   0xc0020cca
c0010ddc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010de2:	e8 8b c5 ff ff       	call   c000d372 <VgaText::puts(char const*)>
c0010de7:	58                   	pop    eax
c0010de8:	a1 54 48 02 c0       	mov    eax,ds:0xc0024854
c0010ded:	5a                   	pop    edx
c0010dee:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010df2:	52                   	push   edx
c0010df3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010df9:	e8 9a c5 ff ff       	call   c000d398 <VgaText::putx(unsigned int)>
c0010dfe:	59                   	pop    ecx
c0010dff:	a1 54 48 02 c0       	mov    eax,ds:0xc0024854
c0010e04:	5b                   	pop    ebx
c0010e05:	68 d3 0c 02 c0       	push   0xc0020cd3
c0010e0a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010e10:	e8 5d c5 ff ff       	call   c000d372 <VgaText::puts(char const*)>
c0010e15:	58                   	pop    eax
c0010e16:	a1 54 48 02 c0       	mov    eax,ds:0xc0024854
c0010e1b:	5a                   	pop    edx
c0010e1c:	57                   	push   edi
c0010e1d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010e23:	e8 70 c5 ff ff       	call   c000d398 <VgaText::putx(unsigned int)>
c0010e28:	59                   	pop    ecx
c0010e29:	a1 54 48 02 c0       	mov    eax,ds:0xc0024854
c0010e2e:	5b                   	pop    ebx
c0010e2f:	68 db 0c 02 c0       	push   0xc0020cdb
c0010e34:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010e3a:	e8 33 c5 ff ff       	call   c000d372 <VgaText::puts(char const*)>
c0010e3f:	5f                   	pop    edi
c0010e40:	58                   	pop    eax
c0010e41:	a1 54 48 02 c0       	mov    eax,ds:0xc0024854
c0010e46:	56                   	push   esi
c0010e47:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010e4d:	e8 46 c5 ff ff       	call   c000d398 <VgaText::putx(unsigned int)>
c0010e52:	58                   	pop    eax
c0010e53:	a1 54 48 02 c0       	mov    eax,ds:0xc0024854
c0010e58:	5a                   	pop    edx
c0010e59:	68 e3 0c 02 c0       	push   0xc0020ce3
c0010e5e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010e64:	e8 09 c5 ff ff       	call   c000d372 <VgaText::puts(char const*)>
c0010e69:	59                   	pop    ecx
c0010e6a:	a1 54 48 02 c0       	mov    eax,ds:0xc0024854
c0010e6f:	5b                   	pop    ebx
c0010e70:	55                   	push   ebp
c0010e71:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010e77:	e8 1c c5 ff ff       	call   c000d398 <VgaText::putx(unsigned int)>
c0010e7c:	5e                   	pop    esi
c0010e7d:	a1 54 48 02 c0       	mov    eax,ds:0xc0024854
c0010e82:	5f                   	pop    edi
c0010e83:	68 eb 0c 02 c0       	push   0xc0020ceb
c0010e88:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010e8e:	e8 df c4 ff ff       	call   c000d372 <VgaText::puts(char const*)>
c0010e93:	a1 54 48 02 c0       	mov    eax,ds:0xc0024854
c0010e98:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0010e9e:	e8 80 db 00 00       	call   c001ea23 <CPU::readDR0()>
c0010ea3:	5d                   	pop    ebp
c0010ea4:	5a                   	pop    edx
c0010ea5:	50                   	push   eax
c0010ea6:	53                   	push   ebx
c0010ea7:	e8 ec c4 ff ff       	call   c000d398 <VgaText::putx(unsigned int)>
c0010eac:	59                   	pop    ecx
c0010ead:	a1 54 48 02 c0       	mov    eax,ds:0xc0024854
c0010eb2:	5b                   	pop    ebx
c0010eb3:	68 f4 0c 02 c0       	push   0xc0020cf4
c0010eb8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010ebe:	e8 af c4 ff ff       	call   c000d372 <VgaText::puts(char const*)>
c0010ec3:	a1 54 48 02 c0       	mov    eax,ds:0xc0024854
c0010ec8:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0010ece:	e8 62 db 00 00       	call   c001ea35 <CPU::readDR1()>
c0010ed3:	5e                   	pop    esi
c0010ed4:	5f                   	pop    edi
c0010ed5:	50                   	push   eax
c0010ed6:	53                   	push   ebx
c0010ed7:	e8 bc c4 ff ff       	call   c000d398 <VgaText::putx(unsigned int)>
c0010edc:	5d                   	pop    ebp
c0010edd:	58                   	pop    eax
c0010ede:	a1 54 48 02 c0       	mov    eax,ds:0xc0024854
c0010ee3:	68 fc 0c 02 c0       	push   0xc0020cfc
c0010ee8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010eee:	e8 7f c4 ff ff       	call   c000d372 <VgaText::puts(char const*)>
c0010ef3:	a1 54 48 02 c0       	mov    eax,ds:0xc0024854
c0010ef8:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0010efe:	e8 44 db 00 00       	call   c001ea47 <CPU::readDR2()>
c0010f03:	5a                   	pop    edx
c0010f04:	59                   	pop    ecx
c0010f05:	50                   	push   eax
c0010f06:	53                   	push   ebx
c0010f07:	e8 8c c4 ff ff       	call   c000d398 <VgaText::putx(unsigned int)>
c0010f0c:	5b                   	pop    ebx
c0010f0d:	a1 54 48 02 c0       	mov    eax,ds:0xc0024854
c0010f12:	5e                   	pop    esi
c0010f13:	68 04 0d 02 c0       	push   0xc0020d04
c0010f18:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010f1e:	e8 4f c4 ff ff       	call   c000d372 <VgaText::puts(char const*)>
c0010f23:	a1 54 48 02 c0       	mov    eax,ds:0xc0024854
c0010f28:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0010f2e:	e8 26 db 00 00       	call   c001ea59 <CPU::readDR3()>
c0010f33:	5f                   	pop    edi
c0010f34:	5d                   	pop    ebp
c0010f35:	50                   	push   eax
c0010f36:	53                   	push   ebx
c0010f37:	e8 5c c4 ff ff       	call   c000d398 <VgaText::putx(unsigned int)>
c0010f3c:	58                   	pop    eax
c0010f3d:	a1 54 48 02 c0       	mov    eax,ds:0xc0024854
c0010f42:	5a                   	pop    edx
c0010f43:	68 0c 0d 02 c0       	push   0xc0020d0c
c0010f48:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010f4e:	e8 1f c4 ff ff       	call   c000d372 <VgaText::puts(char const*)>
c0010f53:	a1 54 48 02 c0       	mov    eax,ds:0xc0024854
c0010f58:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0010f5e:	e8 08 db 00 00       	call   c001ea6b <CPU::readDR6()>
c0010f63:	59                   	pop    ecx
c0010f64:	5e                   	pop    esi
c0010f65:	50                   	push   eax
c0010f66:	53                   	push   ebx
c0010f67:	e8 2c c4 ff ff       	call   c000d398 <VgaText::putx(unsigned int)>
c0010f6c:	5f                   	pop    edi
c0010f6d:	a1 54 48 02 c0       	mov    eax,ds:0xc0024854
c0010f72:	5d                   	pop    ebp
c0010f73:	68 14 0d 02 c0       	push   0xc0020d14
c0010f78:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010f7e:	e8 ef c3 ff ff       	call   c000d372 <VgaText::puts(char const*)>
c0010f83:	a1 54 48 02 c0       	mov    eax,ds:0xc0024854
c0010f88:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0010f8e:	e8 ea da 00 00       	call   c001ea7d <CPU::readDR7()>
c0010f93:	5a                   	pop    edx
c0010f94:	59                   	pop    ecx
c0010f95:	50                   	push   eax
c0010f96:	53                   	push   ebx
c0010f97:	e8 fc c3 ff ff       	call   c000d398 <VgaText::putx(unsigned int)>
c0010f9c:	fa                   	cli    
c0010f9d:	f4                   	hlt    
c0010f9e:	83 c4 10             	add    esp,0x10
c0010fa1:	eb fe                	jmp    c0010fa1 <displayDebugInfo(regs*)+0x415>

c0010fa3 <x87EmulHandler(regs*, void*)>:
c0010fa3:	53                   	push   ebx
c0010fa4:	83 ec 08             	sub    esp,0x8
c0010fa7:	a1 94 35 02 c0       	mov    eax,ds:0xc0023594
c0010fac:	85 c0                	test   eax,eax
c0010fae:	74 15                	je     c0010fc5 <x87EmulHandler(regs*, void*)+0x22>
c0010fb0:	83 ec 0c             	sub    esp,0xc
c0010fb3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010fb7:	ff d0                	call   eax
c0010fb9:	83 c4 10             	add    esp,0x10
c0010fbc:	84 c0                	test   al,al
c0010fbe:	74 2f                	je     c0010fef <x87EmulHandler(regs*, void*)+0x4c>
c0010fc0:	83 c4 08             	add    esp,0x8
c0010fc3:	5b                   	pop    ebx
c0010fc4:	c3                   	ret    
c0010fc5:	83 ec 08             	sub    esp,0x8
c0010fc8:	8b 1d 08 34 02 c0    	mov    ebx,DWORD PTR ds:0xc0023408
c0010fce:	6a 01                	push   0x1
c0010fd0:	68 1c 0d 02 c0       	push   0xc0020d1c
c0010fd5:	e8 30 64 00 00       	call   c001740a <Thr::loadDLL(char const*, bool)>
c0010fda:	5a                   	pop    edx
c0010fdb:	59                   	pop    ecx
c0010fdc:	53                   	push   ebx
c0010fdd:	50                   	push   eax
c0010fde:	e8 2b 66 00 00       	call   c001760e <Thr::executeDLL(unsigned long, void*)>
c0010fe3:	a1 94 35 02 c0       	mov    eax,ds:0xc0023594
c0010fe8:	83 c4 10             	add    esp,0x10
c0010feb:	85 c0                	test   eax,eax
c0010fed:	75 c1                	jne    c0010fb0 <x87EmulHandler(regs*, void*)+0xd>
c0010fef:	83 ec 0c             	sub    esp,0xc
c0010ff2:	68 39 0d 02 c0       	push   0xc0020d39
c0010ff7:	e8 5f dd ff ff       	call   c000ed5b <Dbg::kprintf(char const*, ...)>
c0010ffc:	58                   	pop    eax
c0010ffd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011001:	e8 86 fb ff ff       	call   c0010b8c <displayDebugInfo(regs*)>

c0011006 <gpFault(regs*, void*)>:
c0011006:	53                   	push   ebx
c0011007:	83 ec 14             	sub    esp,0x14
c001100a:	c7 05 90 35 02 c0 8b 88 01 c0 	mov    DWORD PTR ds:0xc0023590,0xc001888b
c0011014:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0011018:	53                   	push   ebx
c0011019:	e8 6d 78 00 00       	call   c001888b <Vm::faultHandler(regs*)>
c001101e:	83 c4 10             	add    esp,0x10
c0011021:	84 c0                	test   al,al
c0011023:	74 05                	je     c001102a <gpFault(regs*, void*)+0x24>
c0011025:	83 c4 08             	add    esp,0x8
c0011028:	5b                   	pop    ebx
c0011029:	c3                   	ret    
c001102a:	83 ec 0c             	sub    esp,0xc
c001102d:	68 39 0d 02 c0       	push   0xc0020d39
c0011032:	e8 24 dd ff ff       	call   c000ed5b <Dbg::kprintf(char const*, ...)>
c0011037:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001103a:	e8 4d fb ff ff       	call   c0010b8c <displayDebugInfo(regs*)>

c001103f <pgFault(regs*, void*)>:
c001103f:	83 ec 18             	sub    esp,0x18
c0011042:	68 54 0d 02 c0       	push   0xc0020d54
c0011047:	e8 0f dd ff ff       	call   c000ed5b <Dbg::kprintf(char const*, ...)>
c001104c:	58                   	pop    eax
c001104d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011051:	e8 36 fb ff ff       	call   c0010b8c <displayDebugInfo(regs*)>

c0011056 <otherISRHandler(regs*, void*)>:
c0011056:	53                   	push   ebx
c0011057:	83 ec 0c             	sub    esp,0xc
c001105a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001105e:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0011061:	50                   	push   eax
c0011062:	50                   	push   eax
c0011063:	68 61 0d 02 c0       	push   0xc0020d61
c0011068:	e8 ee dc ff ff       	call   c000ed5b <Dbg::kprintf(char const*, ...)>
c001106d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011070:	e8 17 fb ff ff       	call   c0010b8c <displayDebugInfo(regs*)>

c0011075 <opcodeFault(regs*, void*)>:
c0011075:	53                   	push   ebx
c0011076:	83 ec 08             	sub    esp,0x8
c0011079:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001107d:	e8 68 2c 00 00       	call   c0013cea <thisCPU()>
c0011082:	80 b8 94 11 00 00 00 	cmp    BYTE PTR [eax+0x1194],0x0
c0011089:	74 16                	je     c00110a1 <opcodeFault(regs*, void*)+0x2c>
c001108b:	83 ec 0c             	sub    esp,0xc
c001108e:	68 b8 0b 02 c0       	push   0xc0020bb8
c0011093:	e8 c3 dc ff ff       	call   c000ed5b <Dbg::kprintf(char const*, ...)>
c0011098:	83 43 38 19          	add    DWORD PTR [ebx+0x38],0x19
c001109c:	83 c4 18             	add    esp,0x18
c001109f:	5b                   	pop    ebx
c00110a0:	c3                   	ret    
c00110a1:	83 ec 0c             	sub    esp,0xc
c00110a4:	68 7e 0d 02 c0       	push   0xc0020d7e
c00110a9:	e8 ad dc ff ff       	call   c000ed5b <Dbg::kprintf(char const*, ...)>
c00110ae:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00110b1:	c1 e0 04             	shl    eax,0x4
c00110b4:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c00110b7:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c00110bb:	89 14 24             	mov    DWORD PTR [esp],edx
c00110be:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c00110c2:	52                   	push   edx
c00110c3:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c00110c7:	52                   	push   edx
c00110c8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00110cb:	50                   	push   eax
c00110cc:	68 dc 0b 02 c0       	push   0xc0020bdc
c00110d1:	e8 85 dc ff ff       	call   c000ed5b <Dbg::kprintf(char const*, ...)>
c00110d6:	83 c4 14             	add    esp,0x14
c00110d9:	53                   	push   ebx
c00110da:	e8 ad fa ff ff       	call   c0010b8c <displayDebugInfo(regs*)>

c00110df <displayProgramFault(char const*)>:
c00110df:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00110e4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00110e7:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00110ed:	85 c0                	test   eax,eax
c00110ef:	74 15                	je     c0011106 <displayProgramFault(char const*)+0x27>
c00110f1:	83 ec 0c             	sub    esp,0xc
c00110f4:	6a 04                	push   0x4
c00110f6:	6a 0f                	push   0xf
c00110f8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00110fc:	50                   	push   eax
c00110fd:	e8 32 bf ff ff       	call   c000d034 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0011102:	83 c4 1c             	add    esp,0x1c
c0011105:	c3                   	ret    
c0011106:	c3                   	ret    
c0011107:	90                   	nop

c0011108 <InterruptController::convertLegacyIRQNumber(int)>:
c0011108:	53                   	push   ebx
c0011109:	83 ec 14             	sub    esp,0x14
c001110c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011110:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011114:	e8 2f f3 ff ff       	call   c0010448 <Device::getName()>
c0011119:	83 c4 10             	add    esp,0x10
c001111c:	80 38 41             	cmp    BYTE PTR [eax],0x41
c001111f:	74 07                	je     c0011128 <InterruptController::convertLegacyIRQNumber(int)+0x20>
c0011121:	89 d8                	mov    eax,ebx
c0011123:	83 c4 08             	add    esp,0x8
c0011126:	5b                   	pop    ebx
c0011127:	c3                   	ret    
c0011128:	83 fb 0f             	cmp    ebx,0xf
c001112b:	7f 0e                	jg     c001113b <InterruptController::convertLegacyIRQNumber(int)+0x33>
c001112d:	0f b6 9b 60 2b 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffdd4a0]
c0011134:	83 c4 08             	add    esp,0x8
c0011137:	89 d8                	mov    eax,ebx
c0011139:	5b                   	pop    ebx
c001113a:	c3                   	ret    
c001113b:	83 ec 0c             	sub    esp,0xc
c001113e:	68 08 0b 02 c0       	push   0xc0020b08
c0011143:	e8 a8 38 00 00       	call   c00149f0 <Krnl::panic(char const*)>
c0011148:	89 d8                	mov    eax,ebx
c001114a:	83 c4 10             	add    esp,0x10
c001114d:	83 c4 08             	add    esp,0x8
c0011150:	5b                   	pop    ebx
c0011151:	c3                   	ret    

c0011152 <setupInterruptController()>:
c0011152:	56                   	push   esi
c0011153:	53                   	push   ebx
c0011154:	51                   	push   ecx
c0011155:	e8 8d 2b 00 00       	call   c0013ce7 <getCPUNumber()>
c001115a:	85 c0                	test   eax,eax
c001115c:	0f 85 10 02 00 00    	jne    c0011372 <setupInterruptController()+0x220>
c0011162:	83 ec 0c             	sub    esp,0xc
c0011165:	a1 08 34 02 c0       	mov    eax,ds:0xc0023408
c001116a:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011170:	68 58 21 00 00       	push   0x2158
c0011175:	83 e0 01             	and    eax,0x1
c0011178:	89 c6                	mov    esi,eax
c001117a:	e8 ed da ff ff       	call   c000ec6c <operator new(unsigned long)>
c001117f:	89 04 24             	mov    DWORD PTR [esp],eax
c0011182:	89 c3                	mov    ebx,eax
c0011184:	e8 23 c7 00 00       	call   c001d8ac <PIC::PIC()>
c0011189:	6a 00                	push   0x0
c001118b:	6a 00                	push   0x0
c001118d:	6a 00                	push   0x0
c001118f:	53                   	push   ebx
c0011190:	e8 5b ca 00 00       	call   c001dbf0 <PIC::open(int, int, void*)>
c0011195:	83 c4 20             	add    esp,0x20
c0011198:	89 f0                	mov    eax,esi
c001119a:	84 c0                	test   al,al
c001119c:	0f 85 92 01 00 00    	jne    c0011334 <setupInterruptController()+0x1e2>
c00111a2:	83 ec 08             	sub    esp,0x8
c00111a5:	53                   	push   ebx
c00111a6:	ff 35 08 34 02 c0    	push   DWORD PTR ds:0xc0023408
c00111ac:	e8 b5 ef ff ff       	call   c0010166 <Device::addChild(Device*)>
c00111b1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00111b3:	6a 00                	push   0x0
c00111b5:	68 56 10 01 c0       	push   0xc0011056
c00111ba:	6a 00                	push   0x0
c00111bc:	53                   	push   ebx
c00111bd:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00111c0:	83 c4 20             	add    esp,0x20
c00111c3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00111c5:	6a 00                	push   0x0
c00111c7:	68 56 10 01 c0       	push   0xc0011056
c00111cc:	6a 01                	push   0x1
c00111ce:	53                   	push   ebx
c00111cf:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00111d2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00111d4:	6a 00                	push   0x0
c00111d6:	68 ef 09 01 c0       	push   0xc00109ef
c00111db:	6a 02                	push   0x2
c00111dd:	53                   	push   ebx
c00111de:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00111e1:	83 c4 20             	add    esp,0x20
c00111e4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00111e6:	6a 00                	push   0x0
c00111e8:	68 56 10 01 c0       	push   0xc0011056
c00111ed:	6a 03                	push   0x3
c00111ef:	53                   	push   ebx
c00111f0:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00111f3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00111f5:	6a 00                	push   0x0
c00111f7:	68 56 10 01 c0       	push   0xc0011056
c00111fc:	6a 04                	push   0x4
c00111fe:	53                   	push   ebx
c00111ff:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011202:	83 c4 20             	add    esp,0x20
c0011205:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011207:	6a 00                	push   0x0
c0011209:	68 56 10 01 c0       	push   0xc0011056
c001120e:	6a 05                	push   0x5
c0011210:	53                   	push   ebx
c0011211:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011214:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011216:	6a 00                	push   0x0
c0011218:	68 75 10 01 c0       	push   0xc0011075
c001121d:	6a 06                	push   0x6
c001121f:	53                   	push   ebx
c0011220:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011223:	83 c4 20             	add    esp,0x20
c0011226:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011228:	6a 00                	push   0x0
c001122a:	68 a3 0f 01 c0       	push   0xc0010fa3
c001122f:	6a 07                	push   0x7
c0011231:	53                   	push   ebx
c0011232:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011235:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011237:	6a 00                	push   0x0
c0011239:	68 16 08 01 c0       	push   0xc0010816
c001123e:	6a 08                	push   0x8
c0011240:	53                   	push   ebx
c0011241:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011244:	83 c4 20             	add    esp,0x20
c0011247:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011249:	6a 00                	push   0x0
c001124b:	68 56 10 01 c0       	push   0xc0011056
c0011250:	6a 09                	push   0x9
c0011252:	53                   	push   ebx
c0011253:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011256:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011258:	6a 00                	push   0x0
c001125a:	68 56 10 01 c0       	push   0xc0011056
c001125f:	6a 0a                	push   0xa
c0011261:	53                   	push   ebx
c0011262:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011265:	83 c4 20             	add    esp,0x20
c0011268:	8b 03                	mov    eax,DWORD PTR [ebx]
c001126a:	6a 00                	push   0x0
c001126c:	68 56 10 01 c0       	push   0xc0011056
c0011271:	6a 0b                	push   0xb
c0011273:	53                   	push   ebx
c0011274:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011277:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011279:	6a 00                	push   0x0
c001127b:	68 56 10 01 c0       	push   0xc0011056
c0011280:	6a 0c                	push   0xc
c0011282:	53                   	push   ebx
c0011283:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011286:	83 c4 20             	add    esp,0x20
c0011289:	8b 03                	mov    eax,DWORD PTR [ebx]
c001128b:	6a 00                	push   0x0
c001128d:	68 06 10 01 c0       	push   0xc0011006
c0011292:	6a 0d                	push   0xd
c0011294:	53                   	push   ebx
c0011295:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011298:	8b 03                	mov    eax,DWORD PTR [ebx]
c001129a:	6a 00                	push   0x0
c001129c:	68 3f 10 01 c0       	push   0xc001103f
c00112a1:	6a 0e                	push   0xe
c00112a3:	53                   	push   ebx
c00112a4:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00112a7:	83 c4 20             	add    esp,0x20
c00112aa:	8b 03                	mov    eax,DWORD PTR [ebx]
c00112ac:	6a 00                	push   0x0
c00112ae:	68 56 10 01 c0       	push   0xc0011056
c00112b3:	6a 0f                	push   0xf
c00112b5:	53                   	push   ebx
c00112b6:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00112b9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00112bb:	6a 00                	push   0x0
c00112bd:	68 56 10 01 c0       	push   0xc0011056
c00112c2:	6a 10                	push   0x10
c00112c4:	53                   	push   ebx
c00112c5:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00112c8:	83 c4 20             	add    esp,0x20
c00112cb:	8b 03                	mov    eax,DWORD PTR [ebx]
c00112cd:	6a 00                	push   0x0
c00112cf:	68 56 10 01 c0       	push   0xc0011056
c00112d4:	6a 11                	push   0x11
c00112d6:	53                   	push   ebx
c00112d7:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00112da:	8b 03                	mov    eax,DWORD PTR [ebx]
c00112dc:	6a 00                	push   0x0
c00112de:	68 56 10 01 c0       	push   0xc0011056
c00112e3:	6a 12                	push   0x12
c00112e5:	53                   	push   ebx
c00112e6:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00112e9:	83 c4 20             	add    esp,0x20
c00112ec:	8b 03                	mov    eax,DWORD PTR [ebx]
c00112ee:	6a 00                	push   0x0
c00112f0:	68 56 10 01 c0       	push   0xc0011056
c00112f5:	6a 13                	push   0x13
c00112f7:	53                   	push   ebx
c00112f8:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00112fb:	8b 03                	mov    eax,DWORD PTR [ebx]
c00112fd:	6a 00                	push   0x0
c00112ff:	68 56 10 01 c0       	push   0xc0011056
c0011304:	6a 14                	push   0x14
c0011306:	53                   	push   ebx
c0011307:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001130a:	83 c4 20             	add    esp,0x20
c001130d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001130f:	6a 00                	push   0x0
c0011311:	68 56 10 01 c0       	push   0xc0011056
c0011316:	6a 1e                	push   0x1e
c0011318:	53                   	push   ebx
c0011319:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001131c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001131e:	6a 00                	push   0x0
c0011320:	68 d7 63 01 c0       	push   0xc00163d7
c0011325:	6a 60                	push   0x60
c0011327:	53                   	push   ebx
c0011328:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001132b:	83 c4 20             	add    esp,0x20
c001132e:	89 d8                	mov    eax,ebx
c0011330:	5a                   	pop    edx
c0011331:	5b                   	pop    ebx
c0011332:	5e                   	pop    esi
c0011333:	c3                   	ret    
c0011334:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011336:	6a 00                	push   0x0
c0011338:	6a 00                	push   0x0
c001133a:	6a 00                	push   0x0
c001133c:	53                   	push   ebx
c001133d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0011340:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011342:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011345:	ff 50 04             	call   DWORD PTR [eax+0x4]
c0011348:	c7 04 24 58 21 00 00 	mov    DWORD PTR [esp],0x2158
c001134f:	e8 18 d9 ff ff       	call   c000ec6c <operator new(unsigned long)>
c0011354:	89 04 24             	mov    DWORD PTR [esp],eax
c0011357:	89 c3                	mov    ebx,eax
c0011359:	e8 8c c0 00 00       	call   c001d3ea <APIC::APIC()>
c001135e:	6a 00                	push   0x0
c0011360:	6a 00                	push   0x0
c0011362:	6a 00                	push   0x0
c0011364:	53                   	push   ebx
c0011365:	e8 9e bf 00 00       	call   c001d308 <APIC::open(int, int, void*)>
c001136a:	83 c4 20             	add    esp,0x20
c001136d:	e9 30 fe ff ff       	jmp    c00111a2 <setupInterruptController()+0x50>
c0011372:	83 ec 0c             	sub    esp,0xc
c0011375:	68 58 21 00 00       	push   0x2158
c001137a:	e8 ed d8 ff ff       	call   c000ec6c <operator new(unsigned long)>
c001137f:	89 04 24             	mov    DWORD PTR [esp],eax
c0011382:	89 c3                	mov    ebx,eax
c0011384:	e8 61 c0 00 00       	call   c001d3ea <APIC::APIC()>
c0011389:	6a 00                	push   0x0
c001138b:	6a 00                	push   0x0
c001138d:	6a 00                	push   0x0
c001138f:	53                   	push   ebx
c0011390:	e8 73 bf 00 00       	call   c001d308 <APIC::open(int, int, void*)>
c0011395:	83 c4 18             	add    esp,0x18
c0011398:	53                   	push   ebx
c0011399:	ff 35 08 34 02 c0    	push   DWORD PTR ds:0xc0023408
c001139f:	e8 c2 ed ff ff       	call   c0010166 <Device::addChild(Device*)>
c00113a4:	83 c4 10             	add    esp,0x10
c00113a7:	89 d8                	mov    eax,ebx
c00113a9:	5a                   	pop    edx
c00113aa:	5b                   	pop    ebx
c00113ab:	5e                   	pop    esi
c00113ac:	c3                   	ret    
c00113ad:	90                   	nop

c00113ae <startGUI(void*)>:
c00113ae:	55                   	push   ebp
c00113af:	89 e5                	mov    ebp,esp
c00113b1:	53                   	push   ebx
c00113b2:	83 ec 04             	sub    esp,0x4
c00113b5:	e8 60 66 00 00       	call   c0017a1a <unlockScheduler()>
c00113ba:	e8 44 66 00 00       	call   c0017a03 <getIRQNestingLevel()>
c00113bf:	83 ec 08             	sub    esp,0x8
c00113c2:	50                   	push   eax
c00113c3:	68 d8 0d 02 c0       	push   0xc0020dd8
c00113c8:	e8 8e d9 ff ff       	call   c000ed5b <Dbg::kprintf(char const*, ...)>
c00113cd:	83 c4 10             	add    esp,0x10
c00113d0:	8b 1d 08 34 02 c0    	mov    ebx,DWORD PTR ds:0xc0023408
c00113d6:	83 ec 08             	sub    esp,0x8
c00113d9:	6a 01                	push   0x1
c00113db:	68 f2 0d 02 c0       	push   0xc0020df2
c00113e0:	e8 25 60 00 00       	call   c001740a <Thr::loadDLL(char const*, bool)>
c00113e5:	83 c4 10             	add    esp,0x10
c00113e8:	83 ec 08             	sub    esp,0x8
c00113eb:	53                   	push   ebx
c00113ec:	50                   	push   eax
c00113ed:	e8 1c 62 00 00       	call   c001760e <Thr::executeDLL(unsigned long, void*)>
c00113f2:	83 c4 10             	add    esp,0x10
c00113f5:	8b 1d 08 34 02 c0    	mov    ebx,DWORD PTR ds:0xc0023408
c00113fb:	83 ec 08             	sub    esp,0x8
c00113fe:	6a 01                	push   0x1
c0011400:	68 0c 0e 02 c0       	push   0xc0020e0c
c0011405:	e8 00 60 00 00       	call   c001740a <Thr::loadDLL(char const*, bool)>
c001140a:	83 c4 10             	add    esp,0x10
c001140d:	83 ec 08             	sub    esp,0x8
c0011410:	53                   	push   ebx
c0011411:	50                   	push   eax
c0011412:	e8 f7 61 00 00       	call   c001760e <Thr::executeDLL(unsigned long, void*)>
c0011417:	83 c4 10             	add    esp,0x10
c001141a:	90                   	nop
c001141b:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001141e:	c9                   	leave  
c001141f:	c3                   	ret    

c0011420 <sendKeyToTerminal(unsigned char)>:
c0011420:	55                   	push   ebp
c0011421:	89 e5                	mov    ebp,esp
c0011423:	83 ec 28             	sub    esp,0x28
c0011426:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011429:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001142c:	a1 c4 34 02 c0       	mov    eax,ds:0xc00234c4
c0011431:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0011435:	83 ec 08             	sub    esp,0x8
c0011438:	52                   	push   edx
c0011439:	50                   	push   eax
c001143a:	e8 31 c1 ff ff       	call   c000d570 <VgaText::receiveKey(unsigned char)>
c001143f:	83 c4 10             	add    esp,0x10
c0011442:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c0011446:	75 41                	jne    c0011489 <sendKeyToTerminal(unsigned char)+0x69>
c0011448:	e8 f2 65 00 00       	call   c0017a3f <lockStuff()>
c001144d:	a1 a0 35 02 c0       	mov    eax,ds:0xc00235a0
c0011452:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0011455:	c7 05 a0 35 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00235a0,0x0
c001145f:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0011463:	74 1f                	je     c0011484 <sendKeyToTerminal(unsigned char)+0x64>
c0011465:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011468:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001146b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001146e:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011471:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0011474:	83 ec 0c             	sub    esp,0xc
c0011477:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c001147a:	e8 a9 6b 00 00       	call   c0018028 <unblockTask(ThreadControlBlock*)>
c001147f:	83 c4 10             	add    esp,0x10
c0011482:	eb db                	jmp    c001145f <sendKeyToTerminal(unsigned char)+0x3f>
c0011484:	e8 48 69 00 00       	call   c0017dd1 <unlockStuff()>
c0011489:	90                   	nop
c001148a:	c9                   	leave  
c001148b:	c3                   	ret    

c001148c <sendKeyboardToken(KeyboardToken)>:
c001148c:	55                   	push   ebp
c001148d:	89 e5                	mov    ebp,esp
c001148f:	83 ec 18             	sub    esp,0x18
c0011492:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0011495:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011498:	0f b7 c0             	movzx  eax,ax
c001149b:	83 f2 01             	xor    edx,0x1
c001149e:	88 90 c0 35 02 c0    	mov    BYTE PTR [eax-0x3ffdca40],dl
c00114a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114a7:	66 3d 03 02          	cmp    ax,0x203
c00114ab:	75 07                	jne    c00114b4 <sendKeyboardToken(KeyboardToken)+0x28>
c00114ad:	a0 c0 36 02 c0       	mov    al,ds:0xc00236c0
c00114b2:	84 c0                	test   al,al
c00114b4:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c00114b8:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c00114bb:	a0 c8 39 02 c0       	mov    al,ds:0xc00239c8
c00114c0:	38 c2                	cmp    dl,al
c00114c2:	74 1c                	je     c00114e0 <sendKeyboardToken(KeyboardToken)+0x54>
c00114c4:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c00114c7:	a2 c8 39 02 c0       	mov    ds:0xc00239c8,al
c00114cc:	a0 c8 39 02 c0       	mov    al,ds:0xc00239c8
c00114d1:	0f b6 c0             	movzx  eax,al
c00114d4:	83 ec 0c             	sub    esp,0xc
c00114d7:	50                   	push   eax
c00114d8:	e8 01 b3 ff ff       	call   c000c7de <setTerminalScrollLock(bool)>
c00114dd:	83 c4 10             	add    esp,0x10
c00114e0:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c00114e3:	84 c0                	test   al,al
c00114e5:	0f 84 ae 00 00 00    	je     c0011599 <sendKeyboardToken(KeyboardToken)+0x10d>
c00114eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114ee:	66 3d 10 03          	cmp    ax,0x310
c00114f2:	75 06                	jne    c00114fa <sendKeyboardToken(KeyboardToken)+0x6e>
c00114f4:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c00114fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114fd:	66 3d 11 03          	cmp    ax,0x311
c0011501:	75 06                	jne    c0011509 <sendKeyboardToken(KeyboardToken)+0x7d>
c0011503:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0011509:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001150c:	66 3d 12 03          	cmp    ax,0x312
c0011510:	75 06                	jne    c0011518 <sendKeyboardToken(KeyboardToken)+0x8c>
c0011512:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c0011518:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001151b:	66 3d 13 03          	cmp    ax,0x313
c001151f:	75 06                	jne    c0011527 <sendKeyboardToken(KeyboardToken)+0x9b>
c0011521:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c0011527:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001152a:	66 3d 14 03          	cmp    ax,0x314
c001152e:	75 06                	jne    c0011536 <sendKeyboardToken(KeyboardToken)+0xaa>
c0011530:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c0011536:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011539:	66 3d 15 03          	cmp    ax,0x315
c001153d:	75 06                	jne    c0011545 <sendKeyboardToken(KeyboardToken)+0xb9>
c001153f:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0011545:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011548:	66 3d 16 03          	cmp    ax,0x316
c001154c:	75 06                	jne    c0011554 <sendKeyboardToken(KeyboardToken)+0xc8>
c001154e:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c0011554:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011557:	66 3d 17 03          	cmp    ax,0x317
c001155b:	75 06                	jne    c0011563 <sendKeyboardToken(KeyboardToken)+0xd7>
c001155d:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c0011563:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011566:	66 3d 18 03          	cmp    ax,0x318
c001156a:	75 06                	jne    c0011572 <sendKeyboardToken(KeyboardToken)+0xe6>
c001156c:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c0011572:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011575:	66 3d 19 03          	cmp    ax,0x319
c0011579:	75 06                	jne    c0011581 <sendKeyboardToken(KeyboardToken)+0xf5>
c001157b:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c0011581:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011584:	66 3d 1a 03          	cmp    ax,0x31a
c0011588:	0f 85 c9 00 00 00    	jne    c0011657 <sendKeyboardToken(KeyboardToken)+0x1cb>
c001158e:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0011594:	e9 be 00 00 00       	jmp    c0011657 <sendKeyboardToken(KeyboardToken)+0x1cb>
c0011599:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001159c:	66 3d 10 03          	cmp    ax,0x310
c00115a0:	75 0a                	jne    c00115ac <sendKeyboardToken(KeyboardToken)+0x120>
c00115a2:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c00115a8:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00115ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115af:	66 3d 11 03          	cmp    ax,0x311
c00115b3:	75 0a                	jne    c00115bf <sendKeyboardToken(KeyboardToken)+0x133>
c00115b5:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c00115bb:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00115bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115c2:	66 3d 12 03          	cmp    ax,0x312
c00115c6:	75 0a                	jne    c00115d2 <sendKeyboardToken(KeyboardToken)+0x146>
c00115c8:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c00115ce:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00115d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115d5:	66 3d 13 03          	cmp    ax,0x313
c00115d9:	75 0a                	jne    c00115e5 <sendKeyboardToken(KeyboardToken)+0x159>
c00115db:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c00115e1:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00115e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115e8:	66 3d 14 03          	cmp    ax,0x314
c00115ec:	75 0a                	jne    c00115f8 <sendKeyboardToken(KeyboardToken)+0x16c>
c00115ee:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c00115f4:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00115f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115fb:	66 3d 15 03          	cmp    ax,0x315
c00115ff:	75 0a                	jne    c001160b <sendKeyboardToken(KeyboardToken)+0x17f>
c0011601:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0011607:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001160b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001160e:	66 3d 16 03          	cmp    ax,0x316
c0011612:	75 0a                	jne    c001161e <sendKeyboardToken(KeyboardToken)+0x192>
c0011614:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c001161a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001161e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011621:	66 3d 17 03          	cmp    ax,0x317
c0011625:	75 0a                	jne    c0011631 <sendKeyboardToken(KeyboardToken)+0x1a5>
c0011627:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c001162d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0011631:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011634:	66 3d 18 03          	cmp    ax,0x318
c0011638:	75 0a                	jne    c0011644 <sendKeyboardToken(KeyboardToken)+0x1b8>
c001163a:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c0011640:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0011644:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011647:	66 3d 19 03          	cmp    ax,0x319
c001164b:	75 0a                	jne    c0011657 <sendKeyboardToken(KeyboardToken)+0x1cb>
c001164d:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c0011653:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0011657:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001165a:	66 3d 00 02          	cmp    ax,0x200
c001165e:	75 2a                	jne    c001168a <sendKeyboardToken(KeyboardToken)+0x1fe>
c0011660:	a0 c0 39 02 c0       	mov    al,ds:0xc00239c0
c0011665:	83 f0 01             	xor    eax,0x1
c0011668:	84 c0                	test   al,al
c001166a:	74 1e                	je     c001168a <sendKeyboardToken(KeyboardToken)+0x1fe>
c001166c:	a1 54 48 02 c0       	mov    eax,ds:0xc0024854
c0011671:	6a 01                	push   0x1
c0011673:	6a 00                	push   0x0
c0011675:	68 ae 13 01 c0       	push   0xc00113ae
c001167a:	50                   	push   eax
c001167b:	e8 c2 64 00 00       	call   c0017b42 <Process::createThread(void (*)(void*), void*, int)>
c0011680:	83 c4 10             	add    esp,0x10
c0011683:	c6 05 c0 39 02 c0 01 	mov    BYTE PTR ds:0xc00239c0,0x1
c001168a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001168d:	66 3d 1d 03          	cmp    ax,0x31d
c0011691:	75 06                	jne    c0011699 <sendKeyboardToken(KeyboardToken)+0x20d>
c0011693:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c0011699:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001169c:	66 3d 1c 03          	cmp    ax,0x31c
c00116a0:	75 06                	jne    c00116a8 <sendKeyboardToken(KeyboardToken)+0x21c>
c00116a2:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c00116a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00116ab:	66 3d 1b 03          	cmp    ax,0x31b
c00116af:	75 06                	jne    c00116b7 <sendKeyboardToken(KeyboardToken)+0x22b>
c00116b1:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c00116b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00116ba:	66 3d 1e 03          	cmp    ax,0x31e
c00116be:	75 06                	jne    c00116c6 <sendKeyboardToken(KeyboardToken)+0x23a>
c00116c0:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c00116c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00116c9:	66 3d 1f 03          	cmp    ax,0x31f
c00116cd:	75 06                	jne    c00116d5 <sendKeyboardToken(KeyboardToken)+0x249>
c00116cf:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c00116d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00116d8:	66 3d 1a 03          	cmp    ax,0x31a
c00116dc:	75 06                	jne    c00116e4 <sendKeyboardToken(KeyboardToken)+0x258>
c00116de:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c00116e4:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c00116e8:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00116eb:	83 f0 01             	xor    eax,0x1
c00116ee:	84 c0                	test   al,al
c00116f0:	74 77                	je     c0011769 <sendKeyboardToken(KeyboardToken)+0x2dd>
c00116f2:	a0 c1 36 02 c0       	mov    al,ds:0xc00236c1
c00116f7:	84 c0                	test   al,al
c00116f9:	74 41                	je     c001173c <sendKeyboardToken(KeyboardToken)+0x2b0>
c00116fb:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00116ff:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c0011703:	74 2b                	je     c0011730 <sendKeyboardToken(KeyboardToken)+0x2a4>
c0011705:	8b 15 c4 39 02 c0    	mov    edx,DWORD PTR ds:0xc00239c4
c001170b:	89 d0                	mov    eax,edx
c001170d:	c1 e0 02             	shl    eax,0x2
c0011710:	01 d0                	add    eax,edx
c0011712:	01 c0                	add    eax,eax
c0011714:	a3 c4 39 02 c0       	mov    ds:0xc00239c4,eax
c0011719:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001171c:	0f b7 c0             	movzx  eax,ax
c001171f:	8d 50 d0             	lea    edx,[eax-0x30]
c0011722:	a1 c4 39 02 c0       	mov    eax,ds:0xc00239c4
c0011727:	01 d0                	add    eax,edx
c0011729:	a3 c4 39 02 c0       	mov    ds:0xc00239c4,eax
c001172e:	eb 6d                	jmp    c001179d <sendKeyboardToken(KeyboardToken)+0x311>
c0011730:	c7 05 c4 39 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00239c4,0x0
c001173a:	eb 61                	jmp    c001179d <sendKeyboardToken(KeyboardToken)+0x311>
c001173c:	a1 c4 39 02 c0       	mov    eax,ds:0xc00239c4
c0011741:	85 c0                	test   eax,eax
c0011743:	74 18                	je     c001175d <sendKeyboardToken(KeyboardToken)+0x2d1>
c0011745:	a1 c4 39 02 c0       	mov    eax,ds:0xc00239c4
c001174a:	0f b6 c0             	movzx  eax,al
c001174d:	83 ec 0c             	sub    esp,0xc
c0011750:	50                   	push   eax
c0011751:	e8 ca fc ff ff       	call   c0011420 <sendKeyToTerminal(unsigned char)>
c0011756:	83 c4 10             	add    esp,0x10
c0011759:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001175d:	c7 05 c4 39 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00239c4,0x0
c0011767:	eb 34                	jmp    c001179d <sendKeyboardToken(KeyboardToken)+0x311>
c0011769:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001176c:	66 3d 01 01          	cmp    ax,0x101
c0011770:	75 2b                	jne    c001179d <sendKeyboardToken(KeyboardToken)+0x311>
c0011772:	a1 c4 39 02 c0       	mov    eax,ds:0xc00239c4
c0011777:	85 c0                	test   eax,eax
c0011779:	74 18                	je     c0011793 <sendKeyboardToken(KeyboardToken)+0x307>
c001177b:	a1 c4 39 02 c0       	mov    eax,ds:0xc00239c4
c0011780:	0f b6 c0             	movzx  eax,al
c0011783:	83 ec 0c             	sub    esp,0xc
c0011786:	50                   	push   eax
c0011787:	e8 94 fc ff ff       	call   c0011420 <sendKeyToTerminal(unsigned char)>
c001178c:	83 c4 10             	add    esp,0x10
c001178f:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0011793:	c7 05 c4 39 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00239c4,0x0
c001179d:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c00117a0:	83 f0 01             	xor    eax,0x1
c00117a3:	84 c0                	test   al,al
c00117a5:	74 4c                	je     c00117f3 <sendKeyboardToken(KeyboardToken)+0x367>
c00117a7:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00117aa:	83 f0 01             	xor    eax,0x1
c00117ad:	84 c0                	test   al,al
c00117af:	74 42                	je     c00117f3 <sendKeyboardToken(KeyboardToken)+0x367>
c00117b1:	a0 c0 36 02 c0       	mov    al,ds:0xc00236c0
c00117b6:	83 f0 01             	xor    eax,0x1
c00117b9:	84 c0                	test   al,al
c00117bb:	74 36                	je     c00117f3 <sendKeyboardToken(KeyboardToken)+0x367>
c00117bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117c0:	66 83 f8 1f          	cmp    ax,0x1f
c00117c4:	76 09                	jbe    c00117cf <sendKeyboardToken(KeyboardToken)+0x343>
c00117c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117c9:	66 83 f8 7e          	cmp    ax,0x7e
c00117cd:	76 12                	jbe    c00117e1 <sendKeyboardToken(KeyboardToken)+0x355>
c00117cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117d2:	66 83 f8 0a          	cmp    ax,0xa
c00117d6:	74 09                	je     c00117e1 <sendKeyboardToken(KeyboardToken)+0x355>
c00117d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117db:	66 83 f8 08          	cmp    ax,0x8
c00117df:	75 12                	jne    c00117f3 <sendKeyboardToken(KeyboardToken)+0x367>
c00117e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117e4:	0f b6 c0             	movzx  eax,al
c00117e7:	83 ec 0c             	sub    esp,0xc
c00117ea:	50                   	push   eax
c00117eb:	e8 30 fc ff ff       	call   c0011420 <sendKeyToTerminal(unsigned char)>
c00117f0:	83 c4 10             	add    esp,0x10
c00117f3:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c00117f6:	83 f0 01             	xor    eax,0x1
c00117f9:	84 c0                	test   al,al
c00117fb:	74 4f                	je     c001184c <sendKeyboardToken(KeyboardToken)+0x3c0>
c00117fd:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0011800:	83 f0 01             	xor    eax,0x1
c0011803:	84 c0                	test   al,al
c0011805:	74 45                	je     c001184c <sendKeyboardToken(KeyboardToken)+0x3c0>
c0011807:	a0 c0 36 02 c0       	mov    al,ds:0xc00236c0
c001180c:	84 c0                	test   al,al
c001180e:	74 3c                	je     c001184c <sendKeyboardToken(KeyboardToken)+0x3c0>
c0011810:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011813:	66 83 f8 3f          	cmp    ax,0x3f
c0011817:	76 33                	jbe    c001184c <sendKeyboardToken(KeyboardToken)+0x3c0>
c0011819:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001181c:	66 83 f8 7f          	cmp    ax,0x7f
c0011820:	77 2a                	ja     c001184c <sendKeyboardToken(KeyboardToken)+0x3c0>
c0011822:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011825:	88 c2                	mov    dl,al
c0011827:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001182a:	66 83 f8 5f          	cmp    ax,0x5f
c001182e:	76 04                	jbe    c0011834 <sendKeyboardToken(KeyboardToken)+0x3a8>
c0011830:	b0 20                	mov    al,0x20
c0011832:	eb 02                	jmp    c0011836 <sendKeyboardToken(KeyboardToken)+0x3aa>
c0011834:	b0 00                	mov    al,0x0
c0011836:	29 c2                	sub    edx,eax
c0011838:	88 d0                	mov    al,dl
c001183a:	83 e8 40             	sub    eax,0x40
c001183d:	0f b6 c0             	movzx  eax,al
c0011840:	83 ec 0c             	sub    esp,0xc
c0011843:	50                   	push   eax
c0011844:	e8 d7 fb ff ff       	call   c0011420 <sendKeyToTerminal(unsigned char)>
c0011849:	83 c4 10             	add    esp,0x10
c001184c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001184f:	66 3d 00 03          	cmp    ax,0x300
c0011853:	75 0f                	jne    c0011864 <sendKeyboardToken(KeyboardToken)+0x3d8>
c0011855:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0011858:	83 f0 01             	xor    eax,0x1
c001185b:	84 c0                	test   al,al
c001185d:	74 05                	je     c0011864 <sendKeyboardToken(KeyboardToken)+0x3d8>
c001185f:	e8 a1 b7 ff ff       	call   c000d005 <doTerminalCycle()>
c0011864:	90                   	nop
c0011865:	c9                   	leave  
c0011866:	c3                   	ret    

c0011867 <clearInternalKeybuffer(VgaText*)>:
c0011867:	55                   	push   ebp
c0011868:	89 e5                	mov    ebp,esp
c001186a:	83 ec 08             	sub    esp,0x8
c001186d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011870:	05 34 11 00 00       	add    eax,0x1134
c0011875:	83 ec 0c             	sub    esp,0xc
c0011878:	50                   	push   eax
c0011879:	e8 a7 ed fe ff       	call   c0000625 <strlen>
c001187e:	83 c4 10             	add    esp,0x10
c0011881:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0011884:	81 c2 34 11 00 00    	add    edx,0x1134
c001188a:	83 ec 04             	sub    esp,0x4
c001188d:	50                   	push   eax
c001188e:	6a 00                	push   0x0
c0011890:	52                   	push   edx
c0011891:	e8 72 ed fe ff       	call   c0000608 <memset>
c0011896:	83 c4 10             	add    esp,0x10
c0011899:	90                   	nop
c001189a:	c9                   	leave  
c001189b:	c3                   	ret    

c001189c <readKeyboard(VgaText*, char*, unsigned long)>:
c001189c:	55                   	push   ebp
c001189d:	89 e5                	mov    ebp,esp
c001189f:	83 ec 18             	sub    esp,0x18
c00118a2:	fb                   	sti    
c00118a3:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c00118aa:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c00118ae:	74 77                	je     c0011927 <readKeyboard(VgaText*, char*, unsigned long)+0x8b>
c00118b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118b3:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c00118b9:	84 c0                	test   al,al
c00118bb:	75 02                	jne    c00118bf <readKeyboard(VgaText*, char*, unsigned long)+0x23>
c00118bd:	eb f1                	jmp    c00118b0 <readKeyboard(VgaText*, char*, unsigned long)+0x14>
c00118bf:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00118c2:	8d 50 01             	lea    edx,[eax+0x1]
c00118c5:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c00118c8:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00118cb:	8a 92 34 11 00 00    	mov    dl,BYTE PTR [edx+0x1134]
c00118d1:	88 10                	mov    BYTE PTR [eax],dl
c00118d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118d6:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c00118dc:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c00118df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118e2:	05 34 11 00 00       	add    eax,0x1134
c00118e7:	83 ec 0c             	sub    esp,0xc
c00118ea:	50                   	push   eax
c00118eb:	e8 35 ed fe ff       	call   c0000625 <strlen>
c00118f0:	83 c4 10             	add    esp,0x10
c00118f3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00118f6:	81 c2 34 11 00 00    	add    edx,0x1134
c00118fc:	8d 4a 01             	lea    ecx,[edx+0x1]
c00118ff:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0011902:	81 c2 34 11 00 00    	add    edx,0x1134
c0011908:	83 ec 04             	sub    esp,0x4
c001190b:	50                   	push   eax
c001190c:	51                   	push   ecx
c001190d:	52                   	push   edx
c001190e:	e8 87 ec fe ff       	call   c000059a <memmove>
c0011913:	83 c4 10             	add    esp,0x10
c0011916:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0011919:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001191c:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c0011920:	75 88                	jne    c00118aa <readKeyboard(VgaText*, char*, unsigned long)+0xe>
c0011922:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011925:	eb 03                	jmp    c001192a <readKeyboard(VgaText*, char*, unsigned long)+0x8e>
c0011927:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001192a:	c9                   	leave  
c001192b:	c3                   	ret    

c001192c <Keyboard::Keyboard(char const*)>:
c001192c:	83 ec 0c             	sub    esp,0xc
c001192f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011933:	83 ec 08             	sub    esp,0x8
c0011936:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001193a:	50                   	push   eax
c001193b:	e8 16 ea ff ff       	call   c0010356 <Device::Device(char const*)>
c0011940:	83 c4 10             	add    esp,0x10
c0011943:	ba 30 0e 02 c0       	mov    edx,0xc0020e30
c0011948:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001194c:	89 10                	mov    DWORD PTR [eax],edx
c001194e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011952:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c001195c:	c6 05 a4 35 02 c0 01 	mov    BYTE PTR ds:0xc00235a4,0x1
c0011963:	90                   	nop
c0011964:	83 c4 0c             	add    esp,0xc
c0011967:	c3                   	ret    

c0011968 <Keyboard::~Keyboard()>:
c0011968:	83 ec 0c             	sub    esp,0xc
c001196b:	ba 30 0e 02 c0       	mov    edx,0xc0020e30
c0011970:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011974:	89 10                	mov    DWORD PTR [eax],edx
c0011976:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001197a:	83 ec 0c             	sub    esp,0xc
c001197d:	50                   	push   eax
c001197e:	e8 85 e6 ff ff       	call   c0010008 <Device::~Device()>
c0011983:	83 c4 10             	add    esp,0x10
c0011986:	90                   	nop
c0011987:	83 c4 0c             	add    esp,0xc
c001198a:	c3                   	ret    
c001198b:	90                   	nop

c001198c <Keyboard::~Keyboard()>:
c001198c:	83 ec 0c             	sub    esp,0xc
c001198f:	83 ec 0c             	sub    esp,0xc
c0011992:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011996:	e8 cd ff ff ff       	call   c0011968 <Keyboard::~Keyboard()>
c001199b:	83 c4 10             	add    esp,0x10
c001199e:	83 ec 08             	sub    esp,0x8
c00119a1:	68 5c 01 00 00       	push   0x15c
c00119a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00119aa:	e8 cc d2 ff ff       	call   c000ec7b <operator delete(void*, unsigned long)>
c00119af:	83 c4 10             	add    esp,0x10
c00119b2:	83 c4 0c             	add    esp,0xc
c00119b5:	c3                   	ret    

c00119b6 <LogicalDisk::close(int, int, void*)>:
c00119b6:	83 c8 ff             	or     eax,0xffffffff
c00119b9:	c3                   	ret    

c00119ba <LogicalDisk::~LogicalDisk()>:
c00119ba:	83 ec 0c             	sub    esp,0xc
c00119bd:	ba e0 0e 02 c0       	mov    edx,0xc0020ee0
c00119c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00119c6:	89 10                	mov    DWORD PTR [eax],edx
c00119c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00119cc:	83 ec 0c             	sub    esp,0xc
c00119cf:	50                   	push   eax
c00119d0:	e8 33 e6 ff ff       	call   c0010008 <Device::~Device()>
c00119d5:	83 c4 10             	add    esp,0x10
c00119d8:	90                   	nop
c00119d9:	83 c4 0c             	add    esp,0xc
c00119dc:	c3                   	ret    
c00119dd:	90                   	nop

c00119de <LogicalDisk::~LogicalDisk()>:
c00119de:	83 ec 0c             	sub    esp,0xc
c00119e1:	83 ec 0c             	sub    esp,0xc
c00119e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00119e8:	e8 cd ff ff ff       	call   c00119ba <LogicalDisk::~LogicalDisk()>
c00119ed:	83 c4 10             	add    esp,0x10
c00119f0:	83 ec 08             	sub    esp,0x8
c00119f3:	68 74 01 00 00       	push   0x174
c00119f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00119fc:	e8 7a d2 ff ff       	call   c000ec7b <operator delete(void*, unsigned long)>
c0011a01:	83 c4 10             	add    esp,0x10
c0011a04:	83 c4 0c             	add    esp,0xc
c0011a07:	c3                   	ret    

c0011a08 <LogicalDisk::open(int, int, void*)>:
c0011a08:	83 ec 18             	sub    esp,0x18
c0011a0b:	68 5c 0e 02 c0       	push   0xc0020e5c
c0011a10:	e8 db 2f 00 00       	call   c00149f0 <Krnl::panic(char const*)>
c0011a15:	83 c8 ff             	or     eax,0xffffffff
c0011a18:	83 c4 1c             	add    esp,0x1c
c0011a1b:	c3                   	ret    

c0011a1c <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0011a1c:	53                   	push   ebx
c0011a1d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011a21:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011a25:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011a29:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0011a2f:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c0011a35:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0011a3b:	77 10                	ja     c0011a4d <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0011a3d:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0011a43:	89 d3                	mov    ebx,edx
c0011a45:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0011a4b:	72 05                	jb     c0011a52 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0011a4d:	83 c8 ff             	or     eax,0xffffffff
c0011a50:	89 c2                	mov    edx,eax
c0011a52:	5b                   	pop    ebx
c0011a53:	c3                   	ret    

c0011a54 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c0011a54:	56                   	push   esi
c0011a55:	83 c8 ff             	or     eax,0xffffffff
c0011a58:	53                   	push   ebx
c0011a59:	89 c2                	mov    edx,eax
c0011a5b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0011a5f:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0011a63:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0011a67:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0011a6d:	77 27                	ja     c0011a96 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0011a6f:	89 d8                	mov    eax,ebx
c0011a71:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0011a77:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0011a7d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011a82:	89 c2                	mov    edx,eax
c0011a84:	73 10                	jae    c0011a96 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0011a86:	89 c8                	mov    eax,ecx
c0011a88:	89 da                	mov    edx,ebx
c0011a8a:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0011a90:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0011a96:	5b                   	pop    ebx
c0011a97:	5e                   	pop    esi
c0011a98:	c3                   	ret    
c0011a99:	90                   	nop

c0011a9a <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0011a9a:	83 ec 1c             	sub    esp,0x1c
c0011a9d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011aa1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011aa5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011aa9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011aad:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011ab1:	89 04 24             	mov    DWORD PTR [esp],eax
c0011ab4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0011ab8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011abc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011ac0:	83 ec 08             	sub    esp,0x8
c0011ac3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011ac7:	50                   	push   eax
c0011ac8:	e8 89 e8 ff ff       	call   c0010356 <Device::Device(char const*)>
c0011acd:	83 c4 10             	add    esp,0x10
c0011ad0:	ba e0 0e 02 c0       	mov    edx,0xc0020ee0
c0011ad5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011ad9:	89 10                	mov    DWORD PTR [eax],edx
c0011adb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011adf:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0011ae6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011aea:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0011af1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011af5:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0011aff:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0011b03:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011b07:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011b0b:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0011b11:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c0011b17:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0011b1b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0011b1e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0011b22:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c0011b28:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0011b2e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011b32:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011b36:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0011b3c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011b40:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0011b4a:	90                   	nop
c0011b4b:	83 c4 1c             	add    esp,0x1c
c0011b4e:	c3                   	ret    
c0011b4f:	90                   	nop

c0011b50 <LogicalDisk::assignDriveLetter()>:
c0011b50:	55                   	push   ebp
c0011b51:	57                   	push   edi
c0011b52:	56                   	push   esi
c0011b53:	53                   	push   ebx
c0011b54:	83 ec 14             	sub    esp,0x14
c0011b57:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011b5b:	8b 3d e0 39 02 c0    	mov    edi,DWORD PTR ds:0xc00239e0
c0011b61:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c0011b67:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0011b6b:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c0011b71:	8b 3d e4 39 02 c0    	mov    edi,DWORD PTR ds:0xc00239e4
c0011b77:	3c 01                	cmp    al,0x1
c0011b79:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0011b7d:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0011b81:	19 c0                	sbb    eax,eax
c0011b83:	83 e0 02             	and    eax,0x2
c0011b86:	83 c0 41             	add    eax,0x41
c0011b89:	0f be e8             	movsx  ebp,al
c0011b8c:	3c 43                	cmp    al,0x43
c0011b8e:	75 10                	jne    c0011ba0 <LogicalDisk::assignDriveLetter()+0x50>
c0011b90:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0011b97:	75 5d                	jne    c0011bf6 <LogicalDisk::assignDriveLetter()+0xa6>
c0011b99:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0011b9e:	75 56                	jne    c0011bf6 <LogicalDisk::assignDriveLetter()+0xa6>
c0011ba0:	8d 75 bf             	lea    esi,[ebp-0x41]
c0011ba3:	ba 01 00 00 00       	mov    edx,0x1
c0011ba8:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0011bac:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0011bb0:	d3 e2                	shl    edx,cl
c0011bb2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0011bb6:	89 d7                	mov    edi,edx
c0011bb8:	89 d6                	mov    esi,edx
c0011bba:	c1 ff 1f             	sar    edi,0x1f
c0011bbd:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0011bc1:	21 f9                	and    ecx,edi
c0011bc3:	09 d1                	or     ecx,edx
c0011bc5:	75 2f                	jne    c0011bf6 <LogicalDisk::assignDriveLetter()+0xa6>
c0011bc7:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0011bcb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011bcf:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0011bd5:	09 f2                	or     edx,esi
c0011bd7:	89 15 e0 39 02 c0    	mov    DWORD PTR ds:0xc00239e0,edx
c0011bdd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011be1:	09 fa                	or     edx,edi
c0011be3:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0011be7:	89 15 e4 39 02 c0    	mov    DWORD PTR ds:0xc00239e4,edx
c0011bed:	89 1c bd 00 3a 02 c0 	mov    DWORD PTR [edi*4-0x3ffdc600],ebx
c0011bf4:	eb 08                	jmp    c0011bfe <LogicalDisk::assignDriveLetter()+0xae>
c0011bf6:	45                   	inc    ebp
c0011bf7:	40                   	inc    eax
c0011bf8:	3c 5b                	cmp    al,0x5b
c0011bfa:	75 90                	jne    c0011b8c <LogicalDisk::assignDriveLetter()+0x3c>
c0011bfc:	31 c0                	xor    eax,eax
c0011bfe:	83 c4 14             	add    esp,0x14
c0011c01:	5b                   	pop    ebx
c0011c02:	5e                   	pop    esi
c0011c03:	5f                   	pop    edi
c0011c04:	5d                   	pop    ebp
c0011c05:	c3                   	ret    

c0011c06 <LogicalDisk::mount()>:
c0011c06:	56                   	push   esi
c0011c07:	53                   	push   ebx
c0011c08:	51                   	push   ecx
c0011c09:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011c0d:	8b 1d 68 35 02 c0    	mov    ebx,DWORD PTR ds:0xc0023568
c0011c13:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c0011c1d:	85 db                	test   ebx,ebx
c0011c1f:	74 50                	je     c0011c71 <LogicalDisk::mount()+0x6b>
c0011c21:	e8 dd 5d 00 00       	call   c0017a03 <getIRQNestingLevel()>
c0011c26:	52                   	push   edx
c0011c27:	52                   	push   edx
c0011c28:	50                   	push   eax
c0011c29:	68 80 0e 02 c0       	push   0xc0020e80
c0011c2e:	e8 28 d1 ff ff       	call   c000ed5b <Dbg::kprintf(char const*, ...)>
c0011c33:	83 c4 0c             	add    esp,0xc
c0011c36:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c0011c3d:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011c3f:	83 e8 41             	sub    eax,0x41
c0011c42:	50                   	push   eax
c0011c43:	56                   	push   esi
c0011c44:	53                   	push   ebx
c0011c45:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011c48:	83 c4 10             	add    esp,0x10
c0011c4b:	84 c0                	test   al,al
c0011c4d:	74 08                	je     c0011c57 <LogicalDisk::mount()+0x51>
c0011c4f:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c0011c55:	eb 1c                	jmp    c0011c73 <LogicalDisk::mount()+0x6d>
c0011c57:	e8 a7 5d 00 00       	call   c0017a03 <getIRQNestingLevel()>
c0011c5c:	51                   	push   ecx
c0011c5d:	51                   	push   ecx
c0011c5e:	50                   	push   eax
c0011c5f:	68 9b 0e 02 c0       	push   0xc0020e9b
c0011c64:	e8 f2 d0 ff ff       	call   c000ed5b <Dbg::kprintf(char const*, ...)>
c0011c69:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0011c6c:	83 c4 10             	add    esp,0x10
c0011c6f:	eb ac                	jmp    c0011c1d <LogicalDisk::mount()+0x17>
c0011c71:	31 c0                	xor    eax,eax
c0011c73:	5a                   	pop    edx
c0011c74:	5b                   	pop    ebx
c0011c75:	5e                   	pop    esi
c0011c76:	c3                   	ret    
c0011c77:	90                   	nop

c0011c78 <LogicalDisk::unmount()>:
c0011c78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011c7c:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0011c86:	c3                   	ret    
c0011c87:	90                   	nop

c0011c88 <LogicalDisk::unassignDriveLetter()>:
c0011c88:	57                   	push   edi
c0011c89:	56                   	push   esi
c0011c8a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011c8e:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c0011c95:	84 c9                	test   cl,cl
c0011c97:	75 0f                	jne    c0011ca8 <LogicalDisk::unassignDriveLetter()+0x20>
c0011c99:	c7 44 24 0c b6 0e 02 c0 	mov    DWORD PTR [esp+0xc],0xc0020eb6
c0011ca1:	5e                   	pop    esi
c0011ca2:	5f                   	pop    edi
c0011ca3:	e9 48 2d 00 00       	jmp    c00149f0 <Krnl::panic(char const*)>
c0011ca8:	83 e9 41             	sub    ecx,0x41
c0011cab:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c0011cb2:	b8 01 00 00 00       	mov    eax,0x1
c0011cb7:	c7 04 8d 00 3a 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffdc600],0x0
c0011cc2:	d3 e0                	shl    eax,cl
c0011cc4:	89 c7                	mov    edi,eax
c0011cc6:	f7 d0                	not    eax
c0011cc8:	c1 ff 1f             	sar    edi,0x1f
c0011ccb:	21 05 e0 39 02 c0    	and    DWORD PTR ds:0xc00239e0,eax
c0011cd1:	89 fe                	mov    esi,edi
c0011cd3:	f7 d6                	not    esi
c0011cd5:	21 35 e4 39 02 c0    	and    DWORD PTR ds:0xc00239e4,esi
c0011cdb:	5e                   	pop    esi
c0011cdc:	5f                   	pop    edi
c0011cdd:	c3                   	ret    

c0011cde <LogicalDisk::read(unsigned long long, int, void*)>:
c0011cde:	57                   	push   edi
c0011cdf:	56                   	push   esi
c0011ce0:	53                   	push   ebx
c0011ce1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011ce5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011ce9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0011ced:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011cf1:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0011cf7:	77 41                	ja     c0011d3a <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c0011cf9:	99                   	cdq    
c0011cfa:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0011d00:	01 c8                	add    eax,ecx
c0011d02:	11 da                	adc    edx,ebx
c0011d04:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0011d0a:	19 d7                	sbb    edi,edx
c0011d0c:	72 33                	jb     c0011d41 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c0011d0e:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0011d14:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0011d1a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0011d1e:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0011d22:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0011d28:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0011d2e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011d32:	5b                   	pop    ebx
c0011d33:	5e                   	pop    esi
c0011d34:	5f                   	pop    edi
c0011d35:	e9 9a 09 00 00       	jmp    c00126d4 <VCache::read(unsigned long long, int, void*)>
c0011d3a:	b8 05 00 00 00       	mov    eax,0x5
c0011d3f:	eb 05                	jmp    c0011d46 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c0011d41:	b8 07 00 00 00       	mov    eax,0x7
c0011d46:	5b                   	pop    ebx
c0011d47:	5e                   	pop    esi
c0011d48:	5f                   	pop    edi
c0011d49:	c3                   	ret    

c0011d4a <LogicalDisk::write(unsigned long long, int, void*)>:
c0011d4a:	57                   	push   edi
c0011d4b:	56                   	push   esi
c0011d4c:	53                   	push   ebx
c0011d4d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011d51:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011d55:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0011d59:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011d5d:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0011d63:	77 41                	ja     c0011da6 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c0011d65:	99                   	cdq    
c0011d66:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0011d6c:	01 c8                	add    eax,ecx
c0011d6e:	11 da                	adc    edx,ebx
c0011d70:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0011d76:	19 d7                	sbb    edi,edx
c0011d78:	72 33                	jb     c0011dad <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c0011d7a:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0011d80:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0011d86:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0011d8a:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0011d8e:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0011d94:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0011d9a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011d9e:	5b                   	pop    ebx
c0011d9f:	5e                   	pop    esi
c0011da0:	5f                   	pop    edi
c0011da1:	e9 4a 08 00 00       	jmp    c00125f0 <VCache::write(unsigned long long, int, void*)>
c0011da6:	b8 05 00 00 00       	mov    eax,0x5
c0011dab:	eb 05                	jmp    c0011db2 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c0011dad:	b8 07 00 00 00       	mov    eax,0x7
c0011db2:	5b                   	pop    ebx
c0011db3:	5e                   	pop    esi
c0011db4:	5f                   	pop    edi
c0011db5:	c3                   	ret    

c0011db6 <Mouse::Mouse(char const*)>:
c0011db6:	83 ec 0c             	sub    esp,0xc
c0011db9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011dbd:	83 ec 08             	sub    esp,0x8
c0011dc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011dc4:	50                   	push   eax
c0011dc5:	e8 8c e5 ff ff       	call   c0010356 <Device::Device(char const*)>
c0011dca:	83 c4 10             	add    esp,0x10
c0011dcd:	ba 0c 0f 02 c0       	mov    edx,0xc0020f0c
c0011dd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011dd6:	89 10                	mov    DWORD PTR [eax],edx
c0011dd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011ddc:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c0011de6:	90                   	nop
c0011de7:	83 c4 0c             	add    esp,0xc
c0011dea:	c3                   	ret    
c0011deb:	90                   	nop

c0011dec <Mouse::~Mouse()>:
c0011dec:	83 ec 0c             	sub    esp,0xc
c0011def:	ba 0c 0f 02 c0       	mov    edx,0xc0020f0c
c0011df4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011df8:	89 10                	mov    DWORD PTR [eax],edx
c0011dfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011dfe:	83 ec 0c             	sub    esp,0xc
c0011e01:	50                   	push   eax
c0011e02:	e8 01 e2 ff ff       	call   c0010008 <Device::~Device()>
c0011e07:	83 c4 10             	add    esp,0x10
c0011e0a:	90                   	nop
c0011e0b:	83 c4 0c             	add    esp,0xc
c0011e0e:	c3                   	ret    
c0011e0f:	90                   	nop

c0011e10 <Mouse::~Mouse()>:
c0011e10:	83 ec 0c             	sub    esp,0xc
c0011e13:	83 ec 0c             	sub    esp,0xc
c0011e16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011e1a:	e8 cd ff ff ff       	call   c0011dec <Mouse::~Mouse()>
c0011e1f:	83 c4 10             	add    esp,0x10
c0011e22:	83 ec 08             	sub    esp,0x8
c0011e25:	68 58 01 00 00       	push   0x158
c0011e2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011e2e:	e8 48 ce ff ff       	call   c000ec7b <operator delete(void*, unsigned long)>
c0011e33:	83 c4 10             	add    esp,0x10
c0011e36:	83 c4 0c             	add    esp,0xc
c0011e39:	c3                   	ret    

c0011e3a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c0011e3a:	55                   	push   ebp
c0011e3b:	57                   	push   edi
c0011e3c:	56                   	push   esi
c0011e3d:	53                   	push   ebx
c0011e3e:	81 ec 28 01 00 00    	sub    esp,0x128
c0011e44:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0011e4b:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0011e52:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0011e59:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c0011e60:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011e64:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0011e68:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0011e6f:	e8 d4 e5 ff ff       	call   c0010448 <Device::getName()>
c0011e74:	5a                   	pop    edx
c0011e75:	59                   	pop    ecx
c0011e76:	50                   	push   eax
c0011e77:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0011e7b:	55                   	push   ebp
c0011e7c:	e8 26 e8 fe ff       	call   c00006a7 <strcpy>
c0011e81:	5b                   	pop    ebx
c0011e82:	58                   	pop    eax
c0011e83:	68 30 0f 02 c0       	push   0xc0020f30
c0011e88:	55                   	push   ebp
c0011e89:	e8 d0 e8 fe ff       	call   c000075e <strcat>
c0011e8e:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0011e95:	e8 d2 cd ff ff       	call   c000ec6c <operator new(unsigned long)>
c0011e9a:	83 c4 0c             	add    esp,0xc
c0011e9d:	89 c3                	mov    ebx,eax
c0011e9f:	57                   	push   edi
c0011ea0:	56                   	push   esi
c0011ea1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011ea5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011ea9:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0011eb0:	55                   	push   ebp
c0011eb1:	50                   	push   eax
c0011eb2:	e8 e3 fb ff ff       	call   c0011a9a <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0011eb7:	83 c4 14             	add    esp,0x14
c0011eba:	53                   	push   ebx
c0011ebb:	e8 90 fc ff ff       	call   c0011b50 <LogicalDisk::assignDriveLetter()>
c0011ec0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011ec3:	e8 3e fd ff ff       	call   c0011c06 <LogicalDisk::mount()>
c0011ec8:	58                   	pop    eax
c0011ec9:	5a                   	pop    edx
c0011eca:	53                   	push   ebx
c0011ecb:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0011ed2:	e8 8f e2 ff ff       	call   c0010166 <Device::addChild(Device*)>
c0011ed7:	81 c4 2c 01 00 00    	add    esp,0x12c
c0011edd:	5b                   	pop    ebx
c0011ede:	5e                   	pop    esi
c0011edf:	5f                   	pop    edi
c0011ee0:	5d                   	pop    ebp
c0011ee1:	c3                   	ret    

c0011ee2 <createPartitionsForDisk(PhysicalDisk*)>:
c0011ee2:	55                   	push   ebp
c0011ee3:	57                   	push   edi
c0011ee4:	56                   	push   esi
c0011ee5:	53                   	push   ebx
c0011ee6:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0011eec:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0011ef3:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0011ef9:	3d 00 02 00 00       	cmp    eax,0x200
c0011efe:	74 27                	je     c0011f27 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c0011f00:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c0011f06:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c0011f0c:	83 ec 10             	sub    esp,0x10
c0011f0f:	0f a4 f7 0a          	shld   edi,esi,0xa
c0011f13:	99                   	cdq    
c0011f14:	c1 e6 0a             	shl    esi,0xa
c0011f17:	52                   	push   edx
c0011f18:	89 fd                	mov    ebp,edi
c0011f1a:	50                   	push   eax
c0011f1b:	55                   	push   ebp
c0011f1c:	56                   	push   esi
c0011f1d:	e8 9a c4 00 00       	call   c001e3bc <__udivdi3>
c0011f22:	e9 b1 00 00 00       	jmp    c0011fd8 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0011f27:	83 ec 0c             	sub    esp,0xc
c0011f2a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011f2c:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c0011f30:	56                   	push   esi
c0011f31:	6a 01                	push   0x1
c0011f33:	6a 00                	push   0x0
c0011f35:	6a 00                	push   0x0
c0011f37:	53                   	push   ebx
c0011f38:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011f3b:	83 c4 20             	add    esp,0x20
c0011f3e:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c0011f46:	75 0a                	jne    c0011f52 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0011f48:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c0011f50:	74 2c                	je     c0011f7e <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c0011f52:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0011f58:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0011f5e:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0011f64:	83 ec 10             	sub    esp,0x10
c0011f67:	0f a4 c2 0a          	shld   edx,eax,0xa
c0011f6b:	89 f7                	mov    edi,esi
c0011f6d:	c1 e0 0a             	shl    eax,0xa
c0011f70:	c1 ff 1f             	sar    edi,0x1f
c0011f73:	57                   	push   edi
c0011f74:	56                   	push   esi
c0011f75:	52                   	push   edx
c0011f76:	50                   	push   eax
c0011f77:	e8 40 c4 00 00       	call   c001e3bc <__udivdi3>
c0011f7c:	eb 5a                	jmp    c0011fd8 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0011f7e:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0011f85:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0011f8c:	83 e1 7f             	and    ecx,0x7f
c0011f8f:	83 e0 7f             	and    eax,0x7f
c0011f92:	01 c1                	add    ecx,eax
c0011f94:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0011f9b:	83 e0 7f             	and    eax,0x7f
c0011f9e:	01 c1                	add    ecx,eax
c0011fa0:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c0011fa7:	83 e0 7f             	and    eax,0x7f
c0011faa:	00 c1                	add    cl,al
c0011fac:	74 41                	je     c0011fef <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c0011fae:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0011fb4:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0011fba:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0011fc0:	83 ec 10             	sub    esp,0x10
c0011fc3:	0f a4 c2 0a          	shld   edx,eax,0xa
c0011fc7:	89 f7                	mov    edi,esi
c0011fc9:	c1 e0 0a             	shl    eax,0xa
c0011fcc:	c1 ff 1f             	sar    edi,0x1f
c0011fcf:	57                   	push   edi
c0011fd0:	56                   	push   esi
c0011fd1:	52                   	push   edx
c0011fd2:	50                   	push   eax
c0011fd3:	e8 e4 c3 00 00       	call   c001e3bc <__udivdi3>
c0011fd8:	83 c4 14             	add    esp,0x14
c0011fdb:	52                   	push   edx
c0011fdc:	50                   	push   eax
c0011fdd:	6a 00                	push   0x0
c0011fdf:	6a 00                	push   0x0
c0011fe1:	53                   	push   ebx
c0011fe2:	e8 53 fe ff ff       	call   c0011e3a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0011fe7:	83 c4 20             	add    esp,0x20
c0011fea:	e9 79 01 00 00       	jmp    c0012168 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0011fef:	89 f0                	mov    eax,esi
c0011ff1:	31 f6                	xor    esi,esi
c0011ff3:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0011ffa:	75 02                	jne    c0011ffe <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0011ffc:	89 f1                	mov    ecx,esi
c0011ffe:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0012005:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c001200c:	c1 e2 08             	shl    edx,0x8
c001200f:	c1 e7 10             	shl    edi,0x10
c0012012:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c001201a:	09 fa                	or     edx,edi
c001201c:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0012024:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c001202b:	83 c0 10             	add    eax,0x10
c001202e:	09 fa                	or     edx,edi
c0012030:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0012037:	c1 e7 18             	shl    edi,0x18
c001203a:	09 fa                	or     edx,edi
c001203c:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0012043:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0012047:	c1 e7 10             	shl    edi,0x10
c001204a:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0012051:	c1 e2 08             	shl    edx,0x8
c0012054:	09 fa                	or     edx,edi
c0012056:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c001205d:	09 fa                	or     edx,edi
c001205f:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0012066:	c1 e7 18             	shl    edi,0x18
c0012069:	09 fa                	or     edx,edi
c001206b:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c001206f:	46                   	inc    esi
c0012070:	83 fe 04             	cmp    esi,0x4
c0012073:	0f 85 7a ff ff ff    	jne    c0011ff3 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0012079:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001207d:	83 f0 01             	xor    eax,0x1
c0012080:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0012084:	75 57                	jne    c00120dd <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0012086:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001208a:	83 f0 01             	xor    eax,0x1
c001208d:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0012091:	75 4a                	jne    c00120dd <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0012093:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0012097:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001209f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00120a7:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00120ad:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00120b3:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00120b9:	0f a4 c2 0a          	shld   edx,eax,0xa
c00120bd:	89 f7                	mov    edi,esi
c00120bf:	c1 e0 0a             	shl    eax,0xa
c00120c2:	c1 ff 1f             	sar    edi,0x1f
c00120c5:	57                   	push   edi
c00120c6:	56                   	push   esi
c00120c7:	52                   	push   edx
c00120c8:	50                   	push   eax
c00120c9:	e8 ee c2 00 00       	call   c001e3bc <__udivdi3>
c00120ce:	83 c4 10             	add    esp,0x10
c00120d1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00120d5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00120d9:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00120dd:	84 c9                	test   cl,cl
c00120df:	74 53                	je     c0012134 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c00120e1:	0f b6 c9             	movzx  ecx,cl
c00120e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00120e8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00120ec:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00120f0:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00120f4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00120f8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00120fc:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0012100:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0012104:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012108:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001210c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012110:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012114:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0012118:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c001211c:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0012120:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0012124:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0012128:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001212c:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0012130:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0012134:	31 ed                	xor    ebp,ebp
c0012136:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c001213a:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c001213e:	89 f8                	mov    eax,edi
c0012140:	09 f0                	or     eax,esi
c0012142:	74 1e                	je     c0012162 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0012144:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0012148:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c001214c:	89 d1                	mov    ecx,edx
c001214e:	09 c1                	or     ecx,eax
c0012150:	74 10                	je     c0012162 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0012152:	83 ec 0c             	sub    esp,0xc
c0012155:	57                   	push   edi
c0012156:	56                   	push   esi
c0012157:	52                   	push   edx
c0012158:	50                   	push   eax
c0012159:	53                   	push   ebx
c001215a:	e8 db fc ff ff       	call   c0011e3a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c001215f:	83 c4 20             	add    esp,0x20
c0012162:	45                   	inc    ebp
c0012163:	83 fd 04             	cmp    ebp,0x4
c0012166:	75 ce                	jne    c0012136 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0012168:	81 c4 5c 02 00 00    	add    esp,0x25c
c001216e:	5b                   	pop    ebx
c001216f:	5e                   	pop    esi
c0012170:	5f                   	pop    edi
c0012171:	5d                   	pop    ebp
c0012172:	c3                   	ret    
c0012173:	90                   	nop

c0012174 <Timer::Timer(char const*)>:
c0012174:	83 ec 0c             	sub    esp,0xc
c0012177:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001217b:	83 ec 08             	sub    esp,0x8
c001217e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012182:	50                   	push   eax
c0012183:	e8 ce e1 ff ff       	call   c0010356 <Device::Device(char const*)>
c0012188:	83 c4 10             	add    esp,0x10
c001218b:	ba 44 0f 02 c0       	mov    edx,0xc0020f44
c0012190:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012194:	89 10                	mov    DWORD PTR [eax],edx
c0012196:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001219a:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c00121a4:	90                   	nop
c00121a5:	83 c4 0c             	add    esp,0xc
c00121a8:	c3                   	ret    
c00121a9:	90                   	nop

c00121aa <Timer::~Timer()>:
c00121aa:	83 ec 0c             	sub    esp,0xc
c00121ad:	ba 44 0f 02 c0       	mov    edx,0xc0020f44
c00121b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00121b6:	89 10                	mov    DWORD PTR [eax],edx
c00121b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00121bc:	83 ec 0c             	sub    esp,0xc
c00121bf:	50                   	push   eax
c00121c0:	e8 43 de ff ff       	call   c0010008 <Device::~Device()>
c00121c5:	83 c4 10             	add    esp,0x10
c00121c8:	90                   	nop
c00121c9:	83 c4 0c             	add    esp,0xc
c00121cc:	c3                   	ret    
c00121cd:	90                   	nop

c00121ce <Timer::~Timer()>:
c00121ce:	83 ec 0c             	sub    esp,0xc
c00121d1:	83 ec 0c             	sub    esp,0xc
c00121d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00121d8:	e8 cd ff ff ff       	call   c00121aa <Timer::~Timer()>
c00121dd:	83 c4 10             	add    esp,0x10
c00121e0:	83 ec 08             	sub    esp,0x8
c00121e3:	68 5c 01 00 00       	push   0x15c
c00121e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00121ec:	e8 8a ca ff ff       	call   c000ec7b <operator delete(void*, unsigned long)>
c00121f1:	83 c4 10             	add    esp,0x10
c00121f4:	83 c4 0c             	add    esp,0xc
c00121f7:	c3                   	ret    

c00121f8 <Timer::read()>:
c00121f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00121fc:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0012202:	c3                   	ret    

c0012203 <timerHandler(unsigned long long)>:
c0012203:	55                   	push   ebp
c0012204:	57                   	push   edi
c0012205:	56                   	push   esi
c0012206:	53                   	push   ebx
c0012207:	83 ec 0c             	sub    esp,0xc
c001220a:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001220e:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0012212:	01 35 70 3a 02 c0    	add    DWORD PTR ds:0xc0023a70,esi
c0012218:	11 3d 74 3a 02 c0    	adc    DWORD PTR ds:0xc0023a74,edi
c001221e:	80 3d 0d 34 02 c0 00 	cmp    BYTE PTR ds:0xc002340d,0x0
c0012225:	0f 84 07 01 00 00    	je     c0012332 <timerHandler(unsigned long long)+0x12f>
c001222b:	e8 0f 58 00 00       	call   c0017a3f <lockStuff()>
c0012230:	83 ec 0c             	sub    esp,0xc
c0012233:	68 3c 48 02 c0       	push   0xc002483c
c0012238:	e8 53 c8 00 00       	call   c001ea90 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001223d:	c7 04 24 3c 48 02 c0 	mov    DWORD PTR [esp],0xc002483c
c0012244:	89 c3                	mov    ebx,eax
c0012246:	e8 4d c8 00 00       	call   c001ea98 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001224b:	83 c4 10             	add    esp,0x10
c001224e:	84 c0                	test   al,al
c0012250:	74 60                	je     c00122b2 <timerHandler(unsigned long long)+0xaf>
c0012252:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0012258:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c001225b:	85 c0                	test   eax,eax
c001225d:	0f 85 91 00 00 00    	jne    c00122f4 <timerHandler(unsigned long long)+0xf1>
c0012263:	e9 be 00 00 00       	jmp    c0012326 <timerHandler(unsigned long long)+0x123>
c0012268:	83 ec 0c             	sub    esp,0xc
c001226b:	55                   	push   ebp
c001226c:	e8 b7 5d 00 00       	call   c0018028 <unblockTask(ThreadControlBlock*)>
c0012271:	83 c4 10             	add    esp,0x10
c0012274:	39 eb                	cmp    ebx,ebp
c0012276:	75 12                	jne    c001228a <timerHandler(unsigned long long)+0x87>
c0012278:	83 ec 0c             	sub    esp,0xc
c001227b:	68 3c 48 02 c0       	push   0xc002483c
c0012280:	e8 0b c8 00 00       	call   c001ea90 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012285:	89 c3                	mov    ebx,eax
c0012287:	83 c4 10             	add    esp,0x10
c001228a:	83 ec 0c             	sub    esp,0xc
c001228d:	68 3c 48 02 c0       	push   0xc002483c
c0012292:	e8 01 c8 00 00       	call   c001ea98 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0012297:	83 c4 10             	add    esp,0x10
c001229a:	84 c0                	test   al,al
c001229c:	75 b4                	jne    c0012252 <timerHandler(unsigned long long)+0x4f>
c001229e:	83 ec 0c             	sub    esp,0xc
c00122a1:	68 3c 48 02 c0       	push   0xc002483c
c00122a6:	e8 e5 c7 00 00       	call   c001ea90 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00122ab:	83 c4 10             	add    esp,0x10
c00122ae:	39 d8                	cmp    eax,ebx
c00122b0:	74 a0                	je     c0012252 <timerHandler(unsigned long long)+0x4f>
c00122b2:	83 ec 0c             	sub    esp,0xc
c00122b5:	68 3c 48 02 c0       	push   0xc002483c
c00122ba:	e8 d1 c7 00 00       	call   c001ea90 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00122bf:	c7 04 24 3c 48 02 c0 	mov    DWORD PTR [esp],0xc002483c
c00122c6:	89 c5                	mov    ebp,eax
c00122c8:	e8 e7 c7 00 00       	call   c001eab4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00122cd:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c00122d0:	83 c4 10             	add    esp,0x10
c00122d3:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c00122d6:	39 15 70 3a 02 c0    	cmp    DWORD PTR ds:0xc0023a70,edx
c00122dc:	a1 74 3a 02 c0       	mov    eax,ds:0xc0023a74
c00122e1:	19 c8                	sbb    eax,ecx
c00122e3:	73 83                	jae    c0012268 <timerHandler(unsigned long long)+0x65>
c00122e5:	50                   	push   eax
c00122e6:	50                   	push   eax
c00122e7:	55                   	push   ebp
c00122e8:	68 3c 48 02 c0       	push   0xc002483c
c00122ed:	e8 70 c8 00 00       	call   c001eb62 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00122f2:	eb 93                	jmp    c0012287 <timerHandler(unsigned long long)+0x84>
c00122f4:	80 3d 0c 34 02 c0 00 	cmp    BYTE PTR ds:0xc002340c,0x0
c00122fb:	74 29                	je     c0012326 <timerHandler(unsigned long long)+0x123>
c00122fd:	39 c6                	cmp    esi,eax
c00122ff:	bb 00 00 00 00       	mov    ebx,0x0
c0012304:	19 df                	sbb    edi,ebx
c0012306:	72 19                	jb     c0012321 <timerHandler(unsigned long long)+0x11e>
c0012308:	e8 0b 57 00 00       	call   c0017a18 <lockScheduler()>
c001230d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012312:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c0012315:	e8 32 5a 00 00       	call   c0017d4c <schedule()>
c001231a:	e8 fb 56 00 00       	call   c0017a1a <unlockScheduler()>
c001231f:	eb 05                	jmp    c0012326 <timerHandler(unsigned long long)+0x123>
c0012321:	29 f0                	sub    eax,esi
c0012323:	89 42 38             	mov    DWORD PTR [edx+0x38],eax
c0012326:	83 c4 0c             	add    esp,0xc
c0012329:	5b                   	pop    ebx
c001232a:	5e                   	pop    esi
c001232b:	5f                   	pop    edi
c001232c:	5d                   	pop    ebp
c001232d:	e9 9f 5a 00 00       	jmp    c0017dd1 <unlockStuff()>
c0012332:	83 c4 0c             	add    esp,0xc
c0012335:	5b                   	pop    ebx
c0012336:	5e                   	pop    esi
c0012337:	5f                   	pop    edi
c0012338:	5d                   	pop    ebp
c0012339:	c3                   	ret    

c001233a <setupTimer(int)>:
c001233a:	57                   	push   edi
c001233b:	56                   	push   esi
c001233c:	53                   	push   ebx
c001233d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012341:	e8 a1 19 00 00       	call   c0013ce7 <getCPUNumber()>
c0012346:	85 c0                	test   eax,eax
c0012348:	74 32                	je     c001237c <setupTimer(int)+0x42>
c001234a:	83 ec 0c             	sub    esp,0xc
c001234d:	68 60 01 00 00       	push   0x160
c0012352:	e8 15 c9 ff ff       	call   c000ec6c <operator new(unsigned long)>
c0012357:	89 04 24             	mov    DWORD PTR [esp],eax
c001235a:	89 c3                	mov    ebx,eax
c001235c:	e8 f9 ba 00 00       	call   c001de5a <APICTimer::APICTimer()>
c0012361:	6a 00                	push   0x0
c0012363:	6a 00                	push   0x0
c0012365:	56                   	push   esi
c0012366:	53                   	push   ebx
c0012367:	e8 f6 b9 00 00       	call   c001dd62 <APICTimer::open(int, int, void*)>
c001236c:	83 c4 20             	add    esp,0x20
c001236f:	e8 76 19 00 00       	call   c0013cea <thisCPU()>
c0012374:	56                   	push   esi
c0012375:	56                   	push   esi
c0012376:	53                   	push   ebx
c0012377:	e9 96 00 00 00       	jmp    c0012412 <setupTimer(int)+0xd8>
c001237c:	e8 69 19 00 00       	call   c0013cea <thisCPU()>
c0012381:	83 ec 0c             	sub    esp,0xc
c0012384:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c001238a:	e8 b9 e0 ff ff       	call   c0010448 <Device::getName()>
c001238f:	83 c4 10             	add    esp,0x10
c0012392:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0012395:	0f 85 87 00 00 00    	jne    c0012422 <setupTimer(int)+0xe8>
c001239b:	a1 08 34 02 c0       	mov    eax,ds:0xc0023408
c00123a0:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c00123a7:	74 79                	je     c0012422 <setupTimer(int)+0xe8>
c00123a9:	83 ec 0c             	sub    esp,0xc
c00123ac:	68 5c 01 00 00       	push   0x15c
c00123b1:	e8 b6 c8 ff ff       	call   c000ec6c <operator new(unsigned long)>
c00123b6:	89 04 24             	mov    DWORD PTR [esp],eax
c00123b9:	89 c3                	mov    ebx,eax
c00123bb:	e8 ea bb 00 00       	call   c001dfaa <PIT::PIT()>
c00123c0:	59                   	pop    ecx
c00123c1:	5f                   	pop    edi
c00123c2:	53                   	push   ebx
c00123c3:	ff 35 08 34 02 c0    	push   DWORD PTR ds:0xc0023408
c00123c9:	e8 98 dd ff ff       	call   c0010166 <Device::addChild(Device*)>
c00123ce:	8b 03                	mov    eax,DWORD PTR [ebx]
c00123d0:	6a 00                	push   0x0
c00123d2:	6a 00                	push   0x0
c00123d4:	56                   	push   esi
c00123d5:	53                   	push   ebx
c00123d6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00123d9:	83 c4 14             	add    esp,0x14
c00123dc:	68 60 01 00 00       	push   0x160
c00123e1:	e8 86 c8 ff ff       	call   c000ec6c <operator new(unsigned long)>
c00123e6:	89 04 24             	mov    DWORD PTR [esp],eax
c00123e9:	89 c7                	mov    edi,eax
c00123eb:	e8 6a ba 00 00       	call   c001de5a <APICTimer::APICTimer()>
c00123f0:	6a 00                	push   0x0
c00123f2:	6a 00                	push   0x0
c00123f4:	56                   	push   esi
c00123f5:	57                   	push   edi
c00123f6:	e8 67 b9 00 00       	call   c001dd62 <APICTimer::open(int, int, void*)>
c00123fb:	83 c4 20             	add    esp,0x20
c00123fe:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012400:	6a 00                	push   0x0
c0012402:	6a 00                	push   0x0
c0012404:	6a 00                	push   0x0
c0012406:	53                   	push   ebx
c0012407:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001240a:	e8 db 18 00 00       	call   c0013cea <thisCPU()>
c001240f:	5a                   	pop    edx
c0012410:	59                   	pop    ecx
c0012411:	57                   	push   edi
c0012412:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0012418:	e8 49 dd ff ff       	call   c0010166 <Device::addChild(Device*)>
c001241d:	83 c4 10             	add    esp,0x10
c0012420:	eb 33                	jmp    c0012455 <setupTimer(int)+0x11b>
c0012422:	83 ec 0c             	sub    esp,0xc
c0012425:	68 5c 01 00 00       	push   0x15c
c001242a:	e8 3d c8 ff ff       	call   c000ec6c <operator new(unsigned long)>
c001242f:	89 04 24             	mov    DWORD PTR [esp],eax
c0012432:	89 c3                	mov    ebx,eax
c0012434:	e8 71 bb 00 00       	call   c001dfaa <PIT::PIT()>
c0012439:	58                   	pop    eax
c001243a:	5a                   	pop    edx
c001243b:	53                   	push   ebx
c001243c:	ff 35 08 34 02 c0    	push   DWORD PTR ds:0xc0023408
c0012442:	e8 1f dd ff ff       	call   c0010166 <Device::addChild(Device*)>
c0012447:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012449:	6a 00                	push   0x0
c001244b:	6a 00                	push   0x0
c001244d:	56                   	push   esi
c001244e:	53                   	push   ebx
c001244f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012452:	83 c4 20             	add    esp,0x20
c0012455:	89 d8                	mov    eax,ebx
c0012457:	5b                   	pop    ebx
c0012458:	5e                   	pop    esi
c0012459:	5f                   	pop    edi
c001245a:	c3                   	ret    
c001245b:	90                   	nop

c001245c <VCache::VCache(PhysicalDisk*)>:
c001245c:	53                   	push   ebx
c001245d:	83 ec 08             	sub    esp,0x8
c0012460:	ba 74 0f 02 c0       	mov    edx,0xc0020f74
c0012465:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012469:	89 10                	mov    DWORD PTR [eax],edx
c001246b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001246f:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0012476:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001247a:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0012481:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012485:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c001248c:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0012493:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012497:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c001249e:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00124a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00124a9:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c00124b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00124b4:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c00124b8:	83 ec 0c             	sub    esp,0xc
c00124bb:	6a 10                	push   0x10
c00124bd:	e8 aa c7 ff ff       	call   c000ec6c <operator new(unsigned long)>
c00124c2:	83 c4 10             	add    esp,0x10
c00124c5:	89 c3                	mov    ebx,eax
c00124c7:	83 ec 0c             	sub    esp,0xc
c00124ca:	53                   	push   ebx
c00124cb:	e8 60 56 00 00       	call   c0017b30 <Mutex::Mutex()>
c00124d0:	83 c4 10             	add    esp,0x10
c00124d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00124d7:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00124da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00124de:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00124e2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00124e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00124e9:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c00124f0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00124f4:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00124fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00124fe:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0012501:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012505:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c001250b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012511:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012515:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0012518:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c001251b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001251f:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0012523:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012527:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001252d:	c1 e0 06             	shl    eax,0x6
c0012530:	83 ec 0c             	sub    esp,0xc
c0012533:	50                   	push   eax
c0012534:	e8 e5 96 ff ff       	call   c000bc1e <malloc>
c0012539:	83 c4 10             	add    esp,0x10
c001253c:	89 c2                	mov    edx,eax
c001253e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012542:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0012545:	90                   	nop
c0012546:	83 c4 08             	add    esp,0x8
c0012549:	5b                   	pop    ebx
c001254a:	c3                   	ret    
c001254b:	90                   	nop

c001254c <VCache::writeWriteBuffer()>:
c001254c:	53                   	push   ebx
c001254d:	83 ec 14             	sub    esp,0x14
c0012550:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0012554:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0012557:	8b 10                	mov    edx,DWORD PTR [eax]
c0012559:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001255c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001255f:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0012562:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0012565:	50                   	push   eax
c0012566:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0012569:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0012570:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0012577:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c001257b:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0012582:	83 c4 28             	add    esp,0x28
c0012585:	5b                   	pop    ebx
c0012586:	c3                   	ret    
c0012587:	90                   	nop

c0012588 <VCache::~VCache()>:
c0012588:	83 ec 0c             	sub    esp,0xc
c001258b:	ba 74 0f 02 c0       	mov    edx,0xc0020f74
c0012590:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012594:	89 10                	mov    DWORD PTR [eax],edx
c0012596:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001259a:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c001259d:	84 c0                	test   al,al
c001259f:	74 0f                	je     c00125b0 <VCache::~VCache()+0x28>
c00125a1:	83 ec 0c             	sub    esp,0xc
c00125a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00125a8:	e8 9f ff ff ff       	call   c001254c <VCache::writeWriteBuffer()>
c00125ad:	83 c4 10             	add    esp,0x10
c00125b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00125b4:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00125b7:	83 ec 0c             	sub    esp,0xc
c00125ba:	50                   	push   eax
c00125bb:	e8 6e 96 ff ff       	call   c000bc2e <free>
c00125c0:	83 c4 10             	add    esp,0x10
c00125c3:	90                   	nop
c00125c4:	83 c4 0c             	add    esp,0xc
c00125c7:	c3                   	ret    

c00125c8 <VCache::~VCache()>:
c00125c8:	83 ec 0c             	sub    esp,0xc
c00125cb:	83 ec 0c             	sub    esp,0xc
c00125ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00125d2:	e8 b1 ff ff ff       	call   c0012588 <VCache::~VCache()>
c00125d7:	83 c4 10             	add    esp,0x10
c00125da:	83 ec 08             	sub    esp,0x8
c00125dd:	6a 30                	push   0x30
c00125df:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00125e3:	e8 93 c6 ff ff       	call   c000ec7b <operator delete(void*, unsigned long)>
c00125e8:	83 c4 10             	add    esp,0x10
c00125eb:	83 c4 0c             	add    esp,0xc
c00125ee:	c3                   	ret    
c00125ef:	90                   	nop

c00125f0 <VCache::write(unsigned long long, int, void*)>:
c00125f0:	55                   	push   ebp
c00125f1:	57                   	push   edi
c00125f2:	56                   	push   esi
c00125f3:	53                   	push   ebx
c00125f4:	83 ec 28             	sub    esp,0x28
c00125f7:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00125fb:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00125ff:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0012603:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0012607:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001260a:	e8 83 59 00 00       	call   c0017f92 <Semaphore::acquire()>
c001260f:	83 c4 10             	add    esp,0x10
c0012612:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0012616:	74 66                	je     c001267e <VCache::write(unsigned long long, int, void*)+0x8e>
c0012618:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001261b:	99                   	cdq    
c001261c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012620:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c0012623:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c0012626:	89 c1                	mov    ecx,eax
c0012628:	89 d0                	mov    eax,edx
c001262a:	31 f1                	xor    ecx,esi
c001262c:	31 f8                	xor    eax,edi
c001262e:	89 ca                	mov    edx,ecx
c0012630:	09 c2                	or     edx,eax
c0012632:	75 3e                	jne    c0012672 <VCache::write(unsigned long long, int, void*)+0x82>
c0012634:	83 fd 01             	cmp    ebp,0x1
c0012637:	75 39                	jne    c0012672 <VCache::write(unsigned long long, int, void*)+0x82>
c0012639:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001263c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0012642:	51                   	push   ecx
c0012643:	50                   	push   eax
c0012644:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0012648:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001264c:	0f af c8             	imul   ecx,eax
c001264f:	03 4b 28             	add    ecx,DWORD PTR [ebx+0x28]
c0012652:	51                   	push   ecx
c0012653:	e8 7a df fe ff       	call   c00005d2 <memcpy>
c0012658:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001265b:	83 c4 10             	add    esp,0x10
c001265e:	40                   	inc    eax
c001265f:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0012662:	83 f8 40             	cmp    eax,0x40
c0012665:	75 57                	jne    c00126be <VCache::write(unsigned long long, int, void*)+0xce>
c0012667:	83 ec 0c             	sub    esp,0xc
c001266a:	53                   	push   ebx
c001266b:	e8 dc fe ff ff       	call   c001254c <VCache::writeWriteBuffer()>
c0012670:	eb 34                	jmp    c00126a6 <VCache::write(unsigned long long, int, void*)+0xb6>
c0012672:	83 ec 0c             	sub    esp,0xc
c0012675:	53                   	push   ebx
c0012676:	e8 d1 fe ff ff       	call   c001254c <VCache::writeWriteBuffer()>
c001267b:	83 c4 10             	add    esp,0x10
c001267e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0012681:	83 fd 3f             	cmp    ebp,0x3f
c0012684:	7f 25                	jg     c00126ab <VCache::write(unsigned long long, int, void*)+0xbb>
c0012686:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0012689:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c001268c:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c001268f:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0012693:	52                   	push   edx
c0012694:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001269a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001269e:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00126a1:	e8 2c df fe ff       	call   c00005d2 <memcpy>
c00126a6:	83 c4 10             	add    esp,0x10
c00126a9:	eb 13                	jmp    c00126be <VCache::write(unsigned long long, int, void*)+0xce>
c00126ab:	83 ec 0c             	sub    esp,0xc
c00126ae:	8b 10                	mov    edx,DWORD PTR [eax]
c00126b0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00126b4:	55                   	push   ebp
c00126b5:	57                   	push   edi
c00126b6:	56                   	push   esi
c00126b7:	50                   	push   eax
c00126b8:	ff 52 28             	call   DWORD PTR [edx+0x28]
c00126bb:	83 c4 20             	add    esp,0x20
c00126be:	83 ec 0c             	sub    esp,0xc
c00126c1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00126c4:	e8 51 5e 00 00       	call   c001851a <Semaphore::release()>
c00126c9:	83 c4 2c             	add    esp,0x2c
c00126cc:	31 c0                	xor    eax,eax
c00126ce:	5b                   	pop    ebx
c00126cf:	5e                   	pop    esi
c00126d0:	5f                   	pop    edi
c00126d1:	5d                   	pop    ebp
c00126d2:	c3                   	ret    
c00126d3:	90                   	nop

c00126d4 <VCache::read(unsigned long long, int, void*)>:
c00126d4:	57                   	push   edi
c00126d5:	56                   	push   esi
c00126d6:	53                   	push   ebx
c00126d7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00126db:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00126df:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00126e3:	83 ec 0c             	sub    esp,0xc
c00126e6:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00126e9:	e8 a4 58 00 00       	call   c0017f92 <Semaphore::acquire()>
c00126ee:	83 c4 10             	add    esp,0x10
c00126f1:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c00126f5:	74 0c                	je     c0012703 <VCache::read(unsigned long long, int, void*)+0x2f>
c00126f7:	83 ec 0c             	sub    esp,0xc
c00126fa:	53                   	push   ebx
c00126fb:	e8 4c fe ff ff       	call   c001254c <VCache::writeWriteBuffer()>
c0012700:	83 c4 10             	add    esp,0x10
c0012703:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0012706:	83 ec 0c             	sub    esp,0xc
c0012709:	8b 10                	mov    edx,DWORD PTR [eax]
c001270b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001270f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012713:	57                   	push   edi
c0012714:	56                   	push   esi
c0012715:	50                   	push   eax
c0012716:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0012719:	83 c4 14             	add    esp,0x14
c001271c:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001271f:	e8 f6 5d 00 00       	call   c001851a <Semaphore::release()>
c0012724:	83 c4 10             	add    esp,0x10
c0012727:	31 c0                	xor    eax,eax
c0012729:	5b                   	pop    ebx
c001272a:	5e                   	pop    esi
c001272b:	5f                   	pop    edi
c001272c:	c3                   	ret    
c001272d:	90                   	nop

c001272e <Video::putrect(int, int, int, int, unsigned int)>:
c001272e:	55                   	push   ebp
c001272f:	57                   	push   edi
c0012730:	56                   	push   esi
c0012731:	53                   	push   ebx
c0012732:	83 ec 1c             	sub    esp,0x1c
c0012735:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0012739:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001273d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012741:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0012745:	01 e8                	add    eax,ebp
c0012747:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001274b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001274f:	01 df                	add    edi,ebx
c0012751:	39 fb                	cmp    ebx,edi
c0012753:	7d 1b                	jge    c0012770 <Video::putrect(int, int, int, int, unsigned int)+0x42>
c0012755:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0012759:	7d 12                	jge    c001276d <Video::putrect(int, int, int, int, unsigned int)+0x3f>
c001275b:	8b 16                	mov    edx,DWORD PTR [esi]
c001275d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0012761:	53                   	push   ebx
c0012762:	55                   	push   ebp
c0012763:	45                   	inc    ebp
c0012764:	56                   	push   esi
c0012765:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0012768:	83 c4 10             	add    esp,0x10
c001276b:	eb e8                	jmp    c0012755 <Video::putrect(int, int, int, int, unsigned int)+0x27>
c001276d:	43                   	inc    ebx
c001276e:	eb e1                	jmp    c0012751 <Video::putrect(int, int, int, int, unsigned int)+0x23>
c0012770:	83 c4 1c             	add    esp,0x1c
c0012773:	5b                   	pop    ebx
c0012774:	5e                   	pop    esi
c0012775:	5f                   	pop    edi
c0012776:	5d                   	pop    ebp
c0012777:	c3                   	ret    

c0012778 <Video::blit(unsigned int*, int, int, int, int)>:
c0012778:	55                   	push   ebp
c0012779:	57                   	push   edi
c001277a:	56                   	push   esi
c001277b:	53                   	push   ebx
c001277c:	83 ec 1c             	sub    esp,0x1c
c001277f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0012783:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0012787:	85 c0                	test   eax,eax
c0012789:	79 02                	jns    c001278d <Video::blit(unsigned int*, int, int, int, int)+0x15>
c001278b:	31 c0                	xor    eax,eax
c001278d:	c1 e0 02             	shl    eax,0x2
c0012790:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0012794:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012798:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001279c:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c00127a0:	39 d8                	cmp    eax,ebx
c00127a2:	7e 49                	jle    c00127ed <Video::blit(unsigned int*, int, int, int, int)+0x75>
c00127a4:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c00127aa:	7c 41                	jl     c00127ed <Video::blit(unsigned int*, int, int, int, int)+0x75>
c00127ac:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00127b0:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00127b4:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00127b8:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c00127bc:	39 f9                	cmp    ecx,edi
c00127be:	7e 22                	jle    c00127e2 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c00127c0:	83 c5 04             	add    ebp,0x4
c00127c3:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c00127c9:	7c 14                	jl     c00127df <Video::blit(unsigned int*, int, int, int, int)+0x67>
c00127cb:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00127cd:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c00127d0:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00127d4:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00127d8:	56                   	push   esi
c00127d9:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c00127dc:	83 c4 10             	add    esp,0x10
c00127df:	47                   	inc    edi
c00127e0:	eb d2                	jmp    c00127b4 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c00127e2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00127e6:	43                   	inc    ebx
c00127e7:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c00127eb:	eb ab                	jmp    c0012798 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c00127ed:	83 c4 1c             	add    esp,0x1c
c00127f0:	5b                   	pop    ebx
c00127f1:	5e                   	pop    esi
c00127f2:	5f                   	pop    edi
c00127f3:	5d                   	pop    ebp
c00127f4:	c3                   	ret    
c00127f5:	90                   	nop

c00127f6 <Video::clearScreen(unsigned int)>:
c00127f6:	57                   	push   edi
c00127f7:	56                   	push   esi
c00127f8:	53                   	push   ebx
c00127f9:	31 db                	xor    ebx,ebx
c00127fb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00127ff:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0012805:	7e 1f                	jle    c0012826 <Video::clearScreen(unsigned int)+0x30>
c0012807:	31 ff                	xor    edi,edi
c0012809:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c001280f:	7e 12                	jle    c0012823 <Video::clearScreen(unsigned int)+0x2d>
c0012811:	8b 06                	mov    eax,DWORD PTR [esi]
c0012813:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012817:	53                   	push   ebx
c0012818:	57                   	push   edi
c0012819:	47                   	inc    edi
c001281a:	56                   	push   esi
c001281b:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001281e:	83 c4 10             	add    esp,0x10
c0012821:	eb e6                	jmp    c0012809 <Video::clearScreen(unsigned int)+0x13>
c0012823:	43                   	inc    ebx
c0012824:	eb d9                	jmp    c00127ff <Video::clearScreen(unsigned int)+0x9>
c0012826:	5b                   	pop    ebx
c0012827:	5e                   	pop    esi
c0012828:	5f                   	pop    edi
c0012829:	c3                   	ret    

c001282a <Video::putpixel(int, int, unsigned int)>:
c001282a:	c7 44 24 04 7c 0f 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020f7c
c0012832:	e9 24 c5 ff ff       	jmp    c000ed5b <Dbg::kprintf(char const*, ...)>
c0012837:	90                   	nop

c0012838 <Video::Video(char const*)>:
c0012838:	83 ec 0c             	sub    esp,0xc
c001283b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001283f:	83 ec 08             	sub    esp,0x8
c0012842:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012846:	50                   	push   eax
c0012847:	e8 0a db ff ff       	call   c0010356 <Device::Device(char const*)>
c001284c:	83 c4 10             	add    esp,0x10
c001284f:	ba 94 0f 02 c0       	mov    edx,0xc0020f94
c0012854:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012858:	89 10                	mov    DWORD PTR [eax],edx
c001285a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001285e:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c0012868:	90                   	nop
c0012869:	83 c4 0c             	add    esp,0xc
c001286c:	c3                   	ret    
c001286d:	90                   	nop

c001286e <Video::~Video()>:
c001286e:	83 ec 0c             	sub    esp,0xc
c0012871:	ba 94 0f 02 c0       	mov    edx,0xc0020f94
c0012876:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001287a:	89 10                	mov    DWORD PTR [eax],edx
c001287c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012880:	83 ec 0c             	sub    esp,0xc
c0012883:	50                   	push   eax
c0012884:	e8 7f d7 ff ff       	call   c0010008 <Device::~Device()>
c0012889:	83 c4 10             	add    esp,0x10
c001288c:	90                   	nop
c001288d:	83 c4 0c             	add    esp,0xc
c0012890:	c3                   	ret    
c0012891:	90                   	nop

c0012892 <Video::~Video()>:
c0012892:	83 ec 0c             	sub    esp,0xc
c0012895:	83 ec 0c             	sub    esp,0xc
c0012898:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001289c:	e8 cd ff ff ff       	call   c001286e <Video::~Video()>
c00128a1:	83 c4 10             	add    esp,0x10
c00128a4:	83 ec 08             	sub    esp,0x8
c00128a7:	68 64 01 00 00       	push   0x164
c00128ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00128b0:	e8 c6 c3 ff ff       	call   c000ec7b <operator delete(void*, unsigned long)>
c00128b5:	83 c4 10             	add    esp,0x10
c00128b8:	83 c4 0c             	add    esp,0xc
c00128bb:	c3                   	ret    

c00128bc <Video::isMonochrome()>:
c00128bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00128c0:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c00128c6:	c3                   	ret    
c00128c7:	90                   	nop

c00128c8 <Video::getWidth()>:
c00128c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00128cc:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00128d2:	c3                   	ret    
c00128d3:	90                   	nop

c00128d4 <Video::getHeight()>:
c00128d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00128d8:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00128de:	c3                   	ret    
c00128df:	90                   	nop

c00128e0 <Video::drawCursor(int, int, unsigned char*, int)>:
c00128e0:	55                   	push   ebp
c00128e1:	57                   	push   edi
c00128e2:	56                   	push   esi
c00128e3:	53                   	push   ebx
c00128e4:	83 ec 2c             	sub    esp,0x2c
c00128e7:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00128eb:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00128ef:	83 f8 01             	cmp    eax,0x1
c00128f2:	19 c9                	sbb    ecx,ecx
c00128f4:	31 db                	xor    ebx,ebx
c00128f6:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00128fa:	89 cd                	mov    ebp,ecx
c00128fc:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c0012904:	f7 d5                	not    ebp
c0012906:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c001290c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0012910:	01 d8                	add    eax,ebx
c0012912:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012916:	56                   	push   esi
c0012917:	e8 b8 ff ff ff       	call   c00128d4 <Video::getHeight()>
c001291c:	59                   	pop    ecx
c001291d:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0012921:	7e 70                	jle    c0012993 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c0012923:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0012927:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c001292b:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c001292e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012932:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0012936:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c001293d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012941:	89 f8                	mov    eax,edi
c0012943:	83 c0 20             	add    eax,0x20
c0012946:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001294a:	56                   	push   esi
c001294b:	e8 78 ff ff ff       	call   c00128c8 <Video::getWidth()>
c0012950:	5a                   	pop    edx
c0012951:	39 c7                	cmp    edi,eax
c0012953:	7d 34                	jge    c0012989 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c0012955:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c001295a:	74 05                	je     c0012961 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c001295c:	8b 06                	mov    eax,DWORD PTR [esi]
c001295e:	55                   	push   ebp
c001295f:	eb 0d                	jmp    c001296e <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c0012961:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c0012966:	74 12                	je     c001297a <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c0012968:	8b 06                	mov    eax,DWORD PTR [esi]
c001296a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001296e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012972:	57                   	push   edi
c0012973:	56                   	push   esi
c0012974:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0012977:	83 c4 10             	add    esp,0x10
c001297a:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c001297e:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c0012982:	47                   	inc    edi
c0012983:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0012987:	75 c1                	jne    c001294a <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c0012989:	43                   	inc    ebx
c001298a:	83 fb 20             	cmp    ebx,0x20
c001298d:	0f 85 79 ff ff ff    	jne    c001290c <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c0012993:	83 c4 2c             	add    esp,0x2c
c0012996:	5b                   	pop    ebx
c0012997:	5e                   	pop    esi
c0012998:	5f                   	pop    edi
c0012999:	5d                   	pop    ebp
c001299a:	c3                   	ret    
c001299b:	90                   	nop

c001299c <ACPI::close(int, int, void*)>:
c001299c:	83 ec 1c             	sub    esp,0x1c
c001299f:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c00129a7:	74 0a                	je     c00129b3 <ACPI::close(int, int, void*)+0x17>
c00129a9:	b8 00 00 00 00       	mov    eax,0x0
c00129ae:	e9 9a 00 00 00       	jmp    c0012a4d <ACPI::close(int, int, void*)+0xb1>
c00129b3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00129b8:	75 37                	jne    c00129f1 <ACPI::close(int, int, void*)+0x55>
c00129ba:	83 ec 0c             	sub    esp,0xc
c00129bd:	68 cc 0f 02 c0       	push   0xc0020fcc
c00129c2:	e8 94 c3 ff ff       	call   c000ed5b <Dbg::kprintf(char const*, ...)>
c00129c7:	83 c4 10             	add    esp,0x10
c00129ca:	a1 88 3a 02 c0       	mov    eax,ds:0xc0023a88
c00129cf:	85 c0                	test   eax,eax
c00129d1:	74 07                	je     c00129da <ACPI::close(int, int, void*)+0x3e>
c00129d3:	a1 88 3a 02 c0       	mov    eax,ds:0xc0023a88
c00129d8:	ff d0                	call   eax
c00129da:	83 ec 0c             	sub    esp,0xc
c00129dd:	68 a0 10 02 c0       	push   0xc00210a0
c00129e2:	e8 09 20 00 00       	call   c00149f0 <Krnl::panic(char const*)>
c00129e7:	83 c4 10             	add    esp,0x10
c00129ea:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00129ef:	eb 5c                	jmp    c0012a4d <ACPI::close(int, int, void*)+0xb1>
c00129f1:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c00129f6:	75 50                	jne    c0012a48 <ACPI::close(int, int, void*)+0xac>
c00129f8:	a1 84 3a 02 c0       	mov    eax,ds:0xc0023a84
c00129fd:	85 c0                	test   eax,eax
c00129ff:	74 07                	je     c0012a08 <ACPI::close(int, int, void*)+0x6c>
c0012a01:	a1 84 3a 02 c0       	mov    eax,ds:0xc0023a84
c0012a06:	ff d0                	call   eax
c0012a08:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c0012a0d:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0012a12:	83 e0 02             	and    eax,0x2
c0012a15:	74 1c                	je     c0012a33 <ACPI::close(int, int, void*)+0x97>
c0012a17:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c0012a1e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012a22:	89 c2                	mov    edx,eax
c0012a24:	ec                   	in     al,dx
c0012a25:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0012a29:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0012a2d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0012a31:	eb da                	jmp    c0012a0d <ACPI::close(int, int, void*)+0x71>
c0012a33:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c0012a3a:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c0012a3f:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0012a43:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012a47:	ee                   	out    dx,al
c0012a48:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012a4d:	83 c4 1c             	add    esp,0x1c
c0012a50:	c3                   	ret    

c0012a51 <findRSDP()>:
c0012a51:	83 ec 1c             	sub    esp,0x1c
c0012a54:	a1 08 34 02 c0       	mov    eax,ds:0xc0023408
c0012a59:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0012a5f:	83 e0 04             	and    eax,0x4
c0012a62:	84 c0                	test   al,al
c0012a64:	75 07                	jne    c0012a6d <findRSDP()+0x1c>
c0012a66:	b8 00 00 00 00       	mov    eax,0x0
c0012a6b:	eb 6a                	jmp    c0012ad7 <findRSDP()+0x86>
c0012a6d:	a1 50 34 02 c0       	mov    eax,ds:0xc0023450
c0012a72:	3d ff 07 00 00       	cmp    eax,0x7ff
c0012a77:	7f 1b                	jg     c0012a94 <findRSDP()+0x43>
c0012a79:	a1 08 34 02 c0       	mov    eax,ds:0xc0023408
c0012a7e:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0012a84:	83 e2 fb             	and    edx,0xfffffffb
c0012a87:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0012a8d:	b8 00 00 00 00       	mov    eax,0x0
c0012a92:	eb 43                	jmp    c0012ad7 <findRSDP()+0x86>
c0012a94:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0012a9c:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0012aa4:	77 2c                	ja     c0012ad2 <findRSDP()+0x81>
c0012aa6:	83 ec 04             	sub    esp,0x4
c0012aa9:	6a 08                	push   0x8
c0012aab:	68 d9 0f 02 c0       	push   0xc0020fd9
c0012ab0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012ab4:	e8 b6 da fe ff       	call   c000056f <memcmp>
c0012ab9:	83 c4 10             	add    esp,0x10
c0012abc:	85 c0                	test   eax,eax
c0012abe:	0f 94 c0             	sete   al
c0012ac1:	84 c0                	test   al,al
c0012ac3:	74 06                	je     c0012acb <findRSDP()+0x7a>
c0012ac5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012ac9:	eb 0c                	jmp    c0012ad7 <findRSDP()+0x86>
c0012acb:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0012ad0:	eb ca                	jmp    c0012a9c <findRSDP()+0x4b>
c0012ad2:	b8 00 00 00 00       	mov    eax,0x0
c0012ad7:	83 c4 1c             	add    esp,0x1c
c0012ada:	c3                   	ret    

c0012adb <loadACPITables(unsigned char*)>:
c0012adb:	56                   	push   esi
c0012adc:	53                   	push   ebx
c0012add:	83 ec 44             	sub    esp,0x44
c0012ae0:	a1 08 34 02 c0       	mov    eax,ds:0xc0023408
c0012ae5:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0012aeb:	83 e0 04             	and    eax,0x4
c0012aee:	84 c0                	test   al,al
c0012af0:	0f 84 05 02 00 00    	je     c0012cfb <loadACPITables(unsigned char*)+0x220>
c0012af6:	a0 a0 3c 02 c0       	mov    al,ds:0xc0023ca0
c0012afb:	84 c0                	test   al,al
c0012afd:	74 75                	je     c0012b74 <loadACPITables(unsigned char*)+0x99>
c0012aff:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0012b03:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0012b07:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012b0b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012b0e:	83 e8 24             	sub    eax,0x24
c0012b11:	c1 e8 03             	shr    eax,0x3
c0012b14:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0012b18:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0012b20:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012b24:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0012b28:	0f 8d b2 00 00 00    	jge    c0012be0 <loadACPITables(unsigned char*)+0x105>
c0012b2e:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0012b32:	83 c0 24             	add    eax,0x24
c0012b35:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0012b39:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012b3d:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0012b41:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012b45:	c1 e0 03             	shl    eax,0x3
c0012b48:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
c0012b4c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012b50:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0012b53:	8b 00                	mov    eax,DWORD PTR [eax]
c0012b55:	89 c1                	mov    ecx,eax
c0012b57:	a1 8c 3a 02 c0       	mov    eax,ds:0xc0023a8c
c0012b5c:	8d 50 01             	lea    edx,[eax+0x1]
c0012b5f:	89 15 8c 3a 02 c0    	mov    DWORD PTR ds:0xc0023a8c,edx
c0012b65:	89 ca                	mov    edx,ecx
c0012b67:	89 14 c5 a4 3a 02 c0 	mov    DWORD PTR [eax*8-0x3ffdc55c],edx
c0012b6e:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c0012b72:	eb ac                	jmp    c0012b20 <loadACPITables(unsigned char*)+0x45>
c0012b74:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0012b78:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0012b7c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012b80:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012b83:	83 e8 24             	sub    eax,0x24
c0012b86:	c1 e8 02             	shr    eax,0x2
c0012b89:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012b8d:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c0012b95:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0012b99:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c0012b9d:	7d 41                	jge    c0012be0 <loadACPITables(unsigned char*)+0x105>
c0012b9f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0012ba3:	83 c0 24             	add    eax,0x24
c0012ba6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012baa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012bae:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012bb2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0012bb6:	c1 e0 02             	shl    eax,0x2
c0012bb9:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c0012bbd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012bc1:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012bc3:	a1 8c 3a 02 c0       	mov    eax,ds:0xc0023a8c
c0012bc8:	8d 50 01             	lea    edx,[eax+0x1]
c0012bcb:	89 15 8c 3a 02 c0    	mov    DWORD PTR ds:0xc0023a8c,edx
c0012bd1:	89 ca                	mov    edx,ecx
c0012bd3:	89 14 c5 a4 3a 02 c0 	mov    DWORD PTR [eax*8-0x3ffdc55c],edx
c0012bda:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0012bde:	eb b5                	jmp    c0012b95 <loadACPITables(unsigned char*)+0xba>
c0012be0:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c0012be8:	a1 8c 3a 02 c0       	mov    eax,ds:0xc0023a8c
c0012bed:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
c0012bf1:	0f 8d 05 01 00 00    	jge    c0012cfc <loadACPITables(unsigned char*)+0x221>
c0012bf7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012bfb:	8b 04 c5 a4 3a 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdc55c]
c0012c02:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012c06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c0a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012c0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c12:	25 ff 0f 00 00       	and    eax,0xfff
c0012c17:	89 c6                	mov    esi,eax
c0012c19:	e8 73 b3 ff ff       	call   c000df91 <Virt::getAKernelVAS()>
c0012c1e:	89 c3                	mov    ebx,eax
c0012c20:	83 ec 0c             	sub    esp,0xc
c0012c23:	6a 01                	push   0x1
c0012c25:	e8 d7 b1 ff ff       	call   c000de01 <Virt::allocateKernelVirtualPages(int)>
c0012c2a:	83 c4 10             	add    esp,0x10
c0012c2d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012c31:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0012c37:	83 ec 0c             	sub    esp,0xc
c0012c3a:	6a 01                	push   0x1
c0012c3c:	6a 01                	push   0x1
c0012c3e:	50                   	push   eax
c0012c3f:	52                   	push   edx
c0012c40:	53                   	push   ebx
c0012c41:	e8 02 bb ff ff       	call   c000e748 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012c46:	83 c4 20             	add    esp,0x20
c0012c49:	09 f0                	or     eax,esi
c0012c4b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012c4f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012c53:	c1 e0 03             	shl    eax,0x3
c0012c56:	05 a0 3a 02 c0       	add    eax,0xc0023aa0
c0012c5b:	83 ec 04             	sub    esp,0x4
c0012c5e:	6a 04                	push   0x4
c0012c60:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012c64:	50                   	push   eax
c0012c65:	e8 68 d9 fe ff       	call   c00005d2 <memcpy>
c0012c6a:	83 c4 10             	add    esp,0x10
c0012c6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c71:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012c74:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012c78:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012c7c:	05 00 10 00 00       	add    eax,0x1000
c0012c81:	c1 e8 0c             	shr    eax,0xc
c0012c84:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012c88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c8c:	89 04 24             	mov    DWORD PTR [esp],eax
c0012c8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c93:	25 ff 0f 00 00       	and    eax,0xfff
c0012c98:	89 c6                	mov    esi,eax
c0012c9a:	e8 f2 b2 ff ff       	call   c000df91 <Virt::getAKernelVAS()>
c0012c9f:	89 c3                	mov    ebx,eax
c0012ca1:	83 ec 0c             	sub    esp,0xc
c0012ca4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012ca8:	e8 54 b1 ff ff       	call   c000de01 <Virt::allocateKernelVirtualPages(int)>
c0012cad:	83 c4 10             	add    esp,0x10
c0012cb0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012cb4:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0012cba:	83 ec 0c             	sub    esp,0xc
c0012cbd:	6a 01                	push   0x1
c0012cbf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012cc3:	50                   	push   eax
c0012cc4:	52                   	push   edx
c0012cc5:	53                   	push   ebx
c0012cc6:	e8 7d ba ff ff       	call   c000e748 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012ccb:	83 c4 20             	add    esp,0x20
c0012cce:	09 f0                	or     eax,esi
c0012cd0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012cd4:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0012cd7:	83 ec 0c             	sub    esp,0xc
c0012cda:	50                   	push   eax
c0012cdb:	e8 7b b4 ff ff       	call   c000e15b <Virt::freeKernelVirtualPages(unsigned long)>
c0012ce0:	83 c4 10             	add    esp,0x10
c0012ce3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012ce7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012ceb:	89 14 c5 a4 3a 02 c0 	mov    DWORD PTR [eax*8-0x3ffdc55c],edx
c0012cf2:	ff 44 24 34          	inc    DWORD PTR [esp+0x34]
c0012cf6:	e9 ed fe ff ff       	jmp    c0012be8 <loadACPITables(unsigned char*)+0x10d>
c0012cfb:	90                   	nop
c0012cfc:	83 c4 44             	add    esp,0x44
c0012cff:	5b                   	pop    ebx
c0012d00:	5e                   	pop    esi
c0012d01:	c3                   	ret    

c0012d02 <findRSDT(unsigned char*)>:
c0012d02:	56                   	push   esi
c0012d03:	53                   	push   ebx
c0012d04:	83 ec 44             	sub    esp,0x44
c0012d07:	a1 08 34 02 c0       	mov    eax,ds:0xc0023408
c0012d0c:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0012d12:	83 e0 04             	and    eax,0x4
c0012d15:	84 c0                	test   al,al
c0012d17:	75 0a                	jne    c0012d23 <findRSDT(unsigned char*)+0x21>
c0012d19:	b8 00 00 00 00       	mov    eax,0x0
c0012d1e:	e9 f7 00 00 00       	jmp    c0012e1a <findRSDT(unsigned char*)+0x118>
c0012d23:	83 ec 04             	sub    esp,0x4
c0012d26:	6a 24                	push   0x24
c0012d28:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0012d2c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0012d30:	50                   	push   eax
c0012d31:	e8 9c d8 fe ff       	call   c00005d2 <memcpy>
c0012d36:	83 c4 10             	add    esp,0x10
c0012d39:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0012d3d:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0012d41:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0012d49:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012d4d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0012d51:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0012d55:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012d59:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0012d5d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012d61:	25 ff 0f 00 00       	and    eax,0xfff
c0012d66:	89 c6                	mov    esi,eax
c0012d68:	e8 24 b2 ff ff       	call   c000df91 <Virt::getAKernelVAS()>
c0012d6d:	89 c3                	mov    ebx,eax
c0012d6f:	83 ec 0c             	sub    esp,0xc
c0012d72:	6a 02                	push   0x2
c0012d74:	e8 88 b0 ff ff       	call   c000de01 <Virt::allocateKernelVirtualPages(int)>
c0012d79:	83 c4 10             	add    esp,0x10
c0012d7c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0012d80:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0012d86:	83 ec 0c             	sub    esp,0xc
c0012d89:	6a 01                	push   0x1
c0012d8b:	6a 02                	push   0x2
c0012d8d:	50                   	push   eax
c0012d8e:	52                   	push   edx
c0012d8f:	53                   	push   ebx
c0012d90:	e8 b3 b9 ff ff       	call   c000e748 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012d95:	83 c4 20             	add    esp,0x20
c0012d98:	09 f0                	or     eax,esi
c0012d9a:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0012d9e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012da2:	25 ff 0f 00 00       	and    eax,0xfff
c0012da7:	89 c6                	mov    esi,eax
c0012da9:	e8 e3 b1 ff ff       	call   c000df91 <Virt::getAKernelVAS()>
c0012dae:	89 c3                	mov    ebx,eax
c0012db0:	83 ec 0c             	sub    esp,0xc
c0012db3:	6a 02                	push   0x2
c0012db5:	e8 47 b0 ff ff       	call   c000de01 <Virt::allocateKernelVirtualPages(int)>
c0012dba:	83 c4 10             	add    esp,0x10
c0012dbd:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012dc1:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0012dc7:	83 ec 0c             	sub    esp,0xc
c0012dca:	6a 01                	push   0x1
c0012dcc:	6a 02                	push   0x2
c0012dce:	50                   	push   eax
c0012dcf:	52                   	push   edx
c0012dd0:	53                   	push   ebx
c0012dd1:	e8 72 b9 ff ff       	call   c000e748 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012dd6:	83 c4 20             	add    esp,0x20
c0012dd9:	09 f0                	or     eax,esi
c0012ddb:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0012ddf:	80 7c 24 3b 00       	cmp    BYTE PTR [esp+0x3b],0x0
c0012de4:	75 11                	jne    c0012df7 <findRSDT(unsigned char*)+0xf5>
c0012de6:	c6 05 a0 3c 02 c0 00 	mov    BYTE PTR ds:0xc0023ca0,0x0
c0012ded:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012df1:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0012df5:	eb 1f                	jmp    c0012e16 <findRSDT(unsigned char*)+0x114>
c0012df7:	80 7c 24 3b 02       	cmp    BYTE PTR [esp+0x3b],0x2
c0012dfc:	75 11                	jne    c0012e0f <findRSDT(unsigned char*)+0x10d>
c0012dfe:	c6 05 a0 3c 02 c0 01 	mov    BYTE PTR ds:0xc0023ca0,0x1
c0012e05:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012e09:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0012e0d:	eb 07                	jmp    c0012e16 <findRSDT(unsigned char*)+0x114>
c0012e0f:	b8 00 00 00 00       	mov    eax,0x0
c0012e14:	eb 04                	jmp    c0012e1a <findRSDT(unsigned char*)+0x118>
c0012e16:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012e1a:	83 c4 44             	add    esp,0x44
c0012e1d:	5b                   	pop    ebx
c0012e1e:	5e                   	pop    esi
c0012e1f:	c3                   	ret    

c0012e20 <findDataTable(unsigned char*, char*)>:
c0012e20:	83 ec 1c             	sub    esp,0x1c
c0012e23:	a1 08 34 02 c0       	mov    eax,ds:0xc0023408
c0012e28:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0012e2e:	83 e0 04             	and    eax,0x4
c0012e31:	84 c0                	test   al,al
c0012e33:	75 07                	jne    c0012e3c <findDataTable(unsigned char*, char*)+0x1c>
c0012e35:	b8 00 00 00 00       	mov    eax,0x0
c0012e3a:	eb 7c                	jmp    c0012eb8 <findDataTable(unsigned char*, char*)+0x98>
c0012e3c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0012e44:	a1 8c 3a 02 c0       	mov    eax,ds:0xc0023a8c
c0012e49:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0012e4d:	7d 3a                	jge    c0012e89 <findDataTable(unsigned char*, char*)+0x69>
c0012e4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012e53:	c1 e0 03             	shl    eax,0x3
c0012e56:	05 a0 3a 02 c0       	add    eax,0xc0023aa0
c0012e5b:	83 ec 04             	sub    esp,0x4
c0012e5e:	6a 04                	push   0x4
c0012e60:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012e64:	50                   	push   eax
c0012e65:	e8 05 d7 fe ff       	call   c000056f <memcmp>
c0012e6a:	83 c4 10             	add    esp,0x10
c0012e6d:	85 c0                	test   eax,eax
c0012e6f:	0f 94 c0             	sete   al
c0012e72:	84 c0                	test   al,al
c0012e74:	74 0d                	je     c0012e83 <findDataTable(unsigned char*, char*)+0x63>
c0012e76:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012e7a:	8b 04 c5 a4 3a 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdc55c]
c0012e81:	eb 35                	jmp    c0012eb8 <findDataTable(unsigned char*, char*)+0x98>
c0012e83:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0012e87:	eb bb                	jmp    c0012e44 <findDataTable(unsigned char*, char*)+0x24>
c0012e89:	a0 a0 3c 02 c0       	mov    al,ds:0xc0023ca0
c0012e8e:	84 c0                	test   al,al
c0012e90:	74 07                	je     c0012e99 <findDataTable(unsigned char*, char*)+0x79>
c0012e92:	b8 58 00 00 00       	mov    eax,0x58
c0012e97:	eb 05                	jmp    c0012e9e <findDataTable(unsigned char*, char*)+0x7e>
c0012e99:	b8 52 00 00 00       	mov    eax,0x52
c0012e9e:	83 ec 04             	sub    esp,0x4
c0012ea1:	50                   	push   eax
c0012ea2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012ea6:	68 c4 10 02 c0       	push   0xc00210c4
c0012eab:	e8 ab be ff ff       	call   c000ed5b <Dbg::kprintf(char const*, ...)>
c0012eb0:	83 c4 10             	add    esp,0x10
c0012eb3:	b8 00 00 00 00       	mov    eax,0x0
c0012eb8:	83 c4 1c             	add    esp,0x1c
c0012ebb:	c3                   	ret    

c0012ebc <scanMADT()>:
c0012ebc:	83 ec 2c             	sub    esp,0x2c
c0012ebf:	a1 08 34 02 c0       	mov    eax,ds:0xc0023408
c0012ec4:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0012eca:	83 e0 04             	and    eax,0x4
c0012ecd:	84 c0                	test   al,al
c0012ecf:	0f 84 73 03 00 00    	je     c0013248 <scanMADT()+0x38c>
c0012ed5:	e8 77 fb ff ff       	call   c0012a51 <findRSDP()>
c0012eda:	a3 ac 3c 02 c0       	mov    ds:0xc0023cac,eax
c0012edf:	a1 ac 3c 02 c0       	mov    eax,ds:0xc0023cac
c0012ee4:	85 c0                	test   eax,eax
c0012ee6:	75 19                	jne    c0012f01 <scanMADT()+0x45>
c0012ee8:	a1 08 34 02 c0       	mov    eax,ds:0xc0023408
c0012eed:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0012ef3:	83 e2 fb             	and    edx,0xfffffffb
c0012ef6:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0012efc:	e9 4b 03 00 00       	jmp    c001324c <scanMADT()+0x390>
c0012f01:	a1 ac 3c 02 c0       	mov    eax,ds:0xc0023cac
c0012f06:	83 ec 0c             	sub    esp,0xc
c0012f09:	50                   	push   eax
c0012f0a:	e8 f3 fd ff ff       	call   c0012d02 <findRSDT(unsigned char*)>
c0012f0f:	83 c4 10             	add    esp,0x10
c0012f12:	a3 a8 3c 02 c0       	mov    ds:0xc0023ca8,eax
c0012f17:	a1 a8 3c 02 c0       	mov    eax,ds:0xc0023ca8
c0012f1c:	85 c0                	test   eax,eax
c0012f1e:	75 19                	jne    c0012f39 <scanMADT()+0x7d>
c0012f20:	a1 08 34 02 c0       	mov    eax,ds:0xc0023408
c0012f25:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0012f2b:	83 e2 fb             	and    edx,0xfffffffb
c0012f2e:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0012f34:	e9 13 03 00 00       	jmp    c001324c <scanMADT()+0x390>
c0012f39:	a1 a8 3c 02 c0       	mov    eax,ds:0xc0023ca8
c0012f3e:	83 ec 0c             	sub    esp,0xc
c0012f41:	50                   	push   eax
c0012f42:	e8 94 fb ff ff       	call   c0012adb <loadACPITables(unsigned char*)>
c0012f47:	83 c4 10             	add    esp,0x10
c0012f4a:	a1 a8 3c 02 c0       	mov    eax,ds:0xc0023ca8
c0012f4f:	83 ec 08             	sub    esp,0x8
c0012f52:	68 e2 0f 02 c0       	push   0xc0020fe2
c0012f57:	50                   	push   eax
c0012f58:	e8 c3 fe ff ff       	call   c0012e20 <findDataTable(unsigned char*, char*)>
c0012f5d:	83 c4 10             	add    esp,0x10
c0012f60:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012f64:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0012f69:	75 19                	jne    c0012f84 <scanMADT()+0xc8>
c0012f6b:	a1 08 34 02 c0       	mov    eax,ds:0xc0023408
c0012f70:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0012f76:	83 e2 fe             	and    edx,0xfffffffe
c0012f79:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0012f7f:	e9 c8 02 00 00       	jmp    c001324c <scanMADT()+0x390>
c0012f84:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0012f8c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012f90:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012f93:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0012f97:	0f 87 af 02 00 00    	ja     c001324c <scanMADT()+0x390>
c0012f9d:	81 7c 24 1c f3 01 00 00 	cmp    DWORD PTR [esp+0x1c],0x1f3
c0012fa5:	0f 87 a1 02 00 00    	ja     c001324c <scanMADT()+0x390>
c0012fab:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012faf:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012fb3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012fb7:	8d 50 01             	lea    edx,[eax+0x1]
c0012fba:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0012fbe:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012fc2:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0012fc6:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0012fca:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012fce:	8d 50 01             	lea    edx,[eax+0x1]
c0012fd1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0012fd5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012fd9:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0012fdd:	88 44 24 12          	mov    BYTE PTR [esp+0x12],al
c0012fe1:	80 7c 24 12 02       	cmp    BYTE PTR [esp+0x12],0x2
c0012fe6:	0f 86 5f 02 00 00    	jbe    c001324b <scanMADT()+0x38f>
c0012fec:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c0012ff1:	75 57                	jne    c001304a <scanMADT()+0x18e>
c0012ff3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012ff7:	8d 50 01             	lea    edx,[eax+0x1]
c0012ffa:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0012ffe:	8a 15 e0 3d 02 c0    	mov    dl,BYTE PTR ds:0xc0023de0
c0013004:	0f b6 d2             	movzx  edx,dl
c0013007:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001300b:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c001300f:	88 82 20 3e 02 c0    	mov    BYTE PTR [edx-0x3ffdc1e0],al
c0013015:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013019:	8d 50 01             	lea    edx,[eax+0x1]
c001301c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013020:	8a 15 e0 3d 02 c0    	mov    dl,BYTE PTR ds:0xc0023de0
c0013026:	8d 4a 01             	lea    ecx,[edx+0x1]
c0013029:	88 0d e0 3d 02 c0    	mov    BYTE PTR ds:0xc0023de0,cl
c001302f:	0f b6 d2             	movzx  edx,dl
c0013032:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0013036:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c001303a:	88 82 00 3e 02 c0    	mov    BYTE PTR [edx-0x3ffdc200],al
c0013040:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0013045:	e9 ea 01 00 00       	jmp    c0013234 <scanMADT()+0x378>
c001304a:	80 7c 24 13 01       	cmp    BYTE PTR [esp+0x13],0x1
c001304f:	0f 85 14 01 00 00    	jne    c0013169 <scanMADT()+0x2ad>
c0013055:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013059:	8d 50 01             	lea    edx,[eax+0x1]
c001305c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013060:	8a 15 b0 3c 02 c0    	mov    dl,BYTE PTR ds:0xc0023cb0
c0013066:	0f b6 d2             	movzx  edx,dl
c0013069:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001306d:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0013071:	88 82 c0 3c 02 c0    	mov    BYTE PTR [edx-0x3ffdc340],al
c0013077:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c001307b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001307f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013083:	01 d0                	add    eax,edx
c0013085:	83 c0 2c             	add    eax,0x2c
c0013088:	8a 00                	mov    al,BYTE PTR [eax]
c001308a:	0f b6 d0             	movzx  edx,al
c001308d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013091:	8d 48 01             	lea    ecx,[eax+0x1]
c0013094:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013098:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001309c:	0f b6 c0             	movzx  eax,al
c001309f:	c1 e0 08             	shl    eax,0x8
c00130a2:	89 d1                	mov    ecx,edx
c00130a4:	09 c1                	or     ecx,eax
c00130a6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00130aa:	8d 50 02             	lea    edx,[eax+0x2]
c00130ad:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00130b1:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00130b5:	0f b6 c0             	movzx  eax,al
c00130b8:	c1 e0 10             	shl    eax,0x10
c00130bb:	09 c1                	or     ecx,eax
c00130bd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00130c1:	8d 50 03             	lea    edx,[eax+0x3]
c00130c4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00130c8:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00130cc:	0f b6 c0             	movzx  eax,al
c00130cf:	c1 e0 18             	shl    eax,0x18
c00130d2:	09 c1                	or     ecx,eax
c00130d4:	89 ca                	mov    edx,ecx
c00130d6:	a0 b0 3c 02 c0       	mov    al,ds:0xc0023cb0
c00130db:	0f b6 c0             	movzx  eax,al
c00130de:	89 14 85 e0 3c 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc320],edx
c00130e5:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c00130ea:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00130ee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00130f2:	01 d0                	add    eax,edx
c00130f4:	83 c0 2c             	add    eax,0x2c
c00130f7:	8a 00                	mov    al,BYTE PTR [eax]
c00130f9:	0f b6 d0             	movzx  edx,al
c00130fc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013100:	8d 48 01             	lea    ecx,[eax+0x1]
c0013103:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013107:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001310b:	0f b6 c0             	movzx  eax,al
c001310e:	c1 e0 08             	shl    eax,0x8
c0013111:	89 d1                	mov    ecx,edx
c0013113:	09 c1                	or     ecx,eax
c0013115:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013119:	8d 50 02             	lea    edx,[eax+0x2]
c001311c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013120:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0013124:	0f b6 c0             	movzx  eax,al
c0013127:	c1 e0 10             	shl    eax,0x10
c001312a:	09 c1                	or     ecx,eax
c001312c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013130:	8d 50 03             	lea    edx,[eax+0x3]
c0013133:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013137:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001313b:	0f b6 c0             	movzx  eax,al
c001313e:	c1 e0 18             	shl    eax,0x18
c0013141:	09 c1                	or     ecx,eax
c0013143:	89 ca                	mov    edx,ecx
c0013145:	a0 b0 3c 02 c0       	mov    al,ds:0xc0023cb0
c001314a:	0f b6 c0             	movzx  eax,al
c001314d:	89 14 85 60 3d 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc2a0],edx
c0013154:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0013159:	a0 b0 3c 02 c0       	mov    al,ds:0xc0023cb0
c001315e:	40                   	inc    eax
c001315f:	a2 b0 3c 02 c0       	mov    ds:0xc0023cb0,al
c0013164:	e9 cb 00 00 00       	jmp    c0013234 <scanMADT()+0x378>
c0013169:	80 7c 24 13 02       	cmp    BYTE PTR [esp+0x13],0x2
c001316e:	0f 85 a6 00 00 00    	jne    c001321a <scanMADT()+0x35e>
c0013174:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013178:	8d 50 01             	lea    edx,[eax+0x1]
c001317b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001317f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013183:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0013187:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001318b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001318f:	8d 50 01             	lea    edx,[eax+0x1]
c0013192:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013196:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001319a:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001319e:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c00131a2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00131a6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00131aa:	01 d0                	add    eax,edx
c00131ac:	83 c0 2c             	add    eax,0x2c
c00131af:	8a 00                	mov    al,BYTE PTR [eax]
c00131b1:	0f b6 d0             	movzx  edx,al
c00131b4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00131b8:	8d 48 01             	lea    ecx,[eax+0x1]
c00131bb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00131bf:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00131c3:	0f b6 c0             	movzx  eax,al
c00131c6:	c1 e0 08             	shl    eax,0x8
c00131c9:	89 d1                	mov    ecx,edx
c00131cb:	09 c1                	or     ecx,eax
c00131cd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00131d1:	8d 50 02             	lea    edx,[eax+0x2]
c00131d4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00131d8:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00131dc:	0f b6 c0             	movzx  eax,al
c00131df:	c1 e0 10             	shl    eax,0x10
c00131e2:	09 c1                	or     ecx,eax
c00131e4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00131e8:	8d 50 03             	lea    edx,[eax+0x3]
c00131eb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00131ef:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00131f3:	0f b6 c0             	movzx  eax,al
c00131f6:	c1 e0 18             	shl    eax,0x18
c00131f9:	09 c8                	or     eax,ecx
c00131fb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00131ff:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0013204:	83 44 24 1c 02       	add    DWORD PTR [esp+0x1c],0x2
c0013209:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001320e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013212:	88 90 60 2b 02 c0    	mov    BYTE PTR [eax-0x3ffdd4a0],dl
c0013218:	eb 1a                	jmp    c0013234 <scanMADT()+0x378>
c001321a:	80 7c 24 13 04       	cmp    BYTE PTR [esp+0x13],0x4
c001321f:	75 07                	jne    c0013228 <scanMADT()+0x36c>
c0013221:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0013226:	eb 0c                	jmp    c0013234 <scanMADT()+0x378>
c0013228:	80 7c 24 13 05       	cmp    BYTE PTR [esp+0x13],0x5
c001322d:	75 05                	jne    c0013234 <scanMADT()+0x378>
c001322f:	83 44 24 1c 0a       	add    DWORD PTR [esp+0x1c],0xa
c0013234:	0f b6 54 24 12       	movzx  edx,BYTE PTR [esp+0x12]
c0013239:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001323d:	01 d0                	add    eax,edx
c001323f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013243:	e9 44 fd ff ff       	jmp    c0012f8c <scanMADT()+0xd0>
c0013248:	90                   	nop
c0013249:	eb 01                	jmp    c001324c <scanMADT()+0x390>
c001324b:	90                   	nop
c001324c:	83 c4 2c             	add    esp,0x2c
c001324f:	c3                   	ret    

c0013250 <ACPI::ACPI()>:
c0013250:	83 ec 0c             	sub    esp,0xc
c0013253:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013257:	83 ec 08             	sub    esp,0x8
c001325a:	68 e7 0f 02 c0       	push   0xc0020fe7
c001325f:	50                   	push   eax
c0013260:	e8 f1 d0 ff ff       	call   c0010356 <Device::Device(char const*)>
c0013265:	83 c4 10             	add    esp,0x10
c0013268:	ba 90 11 02 c0       	mov    edx,0xc0021190
c001326d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013271:	89 10                	mov    DWORD PTR [eax],edx
c0013273:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013277:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001327e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013282:	c7 80 5c 21 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x215c],0x0
c001328c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013290:	c7 80 60 22 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x2260],0x0
c001329a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001329e:	c6 80 64 22 00 00 00 	mov    BYTE PTR [eax+0x2264],0x0
c00132a5:	e8 12 fc ff ff       	call   c0012ebc <scanMADT()>
c00132aa:	90                   	nop
c00132ab:	83 c4 0c             	add    esp,0xc
c00132ae:	c3                   	ret    
c00132af:	90                   	nop

c00132b0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c00132b0:	83 ec 2c             	sub    esp,0x2c
c00132b3:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00132b7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00132bb:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00132bf:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c00132c3:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00132c8:	88 d0                	mov    al,dl
c00132ca:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00132ce:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00132d3:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00132db:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00132df:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c00132e5:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00132e9:	0f 8d 97 00 00 00    	jge    c0013386 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c00132ef:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00132f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00132f7:	83 c2 2a             	add    edx,0x2a
c00132fa:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c00132fe:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0013303:	75 78                	jne    c001337d <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0013305:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013309:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001330d:	83 c2 2a             	add    edx,0x2a
c0013310:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0013314:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0013318:	75 63                	jne    c001337d <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c001331a:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001331f:	74 3a                	je     c001335b <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c0013321:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013325:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013329:	83 c2 2a             	add    edx,0x2a
c001332c:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0013330:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013334:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013337:	39 c2                	cmp    edx,eax
c0013339:	74 10                	je     c001334b <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c001333b:	83 ec 0c             	sub    esp,0xc
c001333e:	68 f4 10 02 c0       	push   0xc00210f4
c0013343:	e8 a8 16 00 00       	call   c00149f0 <Krnl::panic(char const*)>
c0013348:	83 c4 10             	add    esp,0x10
c001334b:	83 ec 0c             	sub    esp,0xc
c001334e:	68 ec 0f 02 c0       	push   0xc0020fec
c0013353:	e8 98 16 00 00       	call   c00149f0 <Krnl::panic(char const*)>
c0013358:	83 c4 10             	add    esp,0x10
c001335b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001335f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013363:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013367:	83 c2 2a             	add    edx,0x2a
c001336a:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c001336e:	8b 02                	mov    eax,DWORD PTR [edx]
c0013370:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0013373:	89 01                	mov    DWORD PTR [ecx],eax
c0013375:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0013378:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001337d:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0013381:	e9 55 ff ff ff       	jmp    c00132db <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c0013386:	90                   	nop
c0013387:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001338b:	83 c4 2c             	add    esp,0x2c
c001338e:	c2 04 00             	ret    0x4
c0013391:	90                   	nop

c0013392 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0013392:	56                   	push   esi
c0013393:	53                   	push   ebx
c0013394:	83 ec 14             	sub    esp,0x14
c0013397:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001339b:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001339f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00133a3:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00133a8:	88 c8                	mov    al,cl
c00133aa:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00133ae:	88 d0                	mov    al,dl
c00133b0:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00133b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00133b8:	8d b0 5c 01 00 00    	lea    esi,[eax+0x15c]
c00133be:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00133c2:	8b 98 5c 21 00 00    	mov    ebx,DWORD PTR [eax+0x215c]
c00133c8:	0f b6 4c 24 04       	movzx  ecx,BYTE PTR [esp+0x4]
c00133cd:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00133d2:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00133d7:	83 ec 04             	sub    esp,0x4
c00133da:	56                   	push   esi
c00133db:	53                   	push   ebx
c00133dc:	51                   	push   ecx
c00133dd:	52                   	push   edx
c00133de:	50                   	push   eax
c00133df:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00133e3:	68 24 11 02 c0       	push   0xc0021124
c00133e8:	e8 6e b9 ff ff       	call   c000ed5b <Dbg::kprintf(char const*, ...)>
c00133ed:	83 c4 20             	add    esp,0x20
c00133f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00133f4:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c00133fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00133fe:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0013401:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0013405:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0013409:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001340d:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0013413:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013417:	8d 48 2a             	lea    ecx,[eax+0x2a]
c001341a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001341e:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0013423:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013427:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c001342d:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0013431:	8d 48 01             	lea    ecx,[eax+0x1]
c0013434:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013438:	83 c2 2a             	add    edx,0x2a
c001343b:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c001343f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013443:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c0013449:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001344d:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0013450:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0013454:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0013458:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001345c:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0013462:	8d 50 01             	lea    edx,[eax+0x1]
c0013465:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013469:	89 90 5c 21 00 00    	mov    DWORD PTR [eax+0x215c],edx
c001346f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013473:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0013479:	3d 00 08 00 00       	cmp    eax,0x800
c001347e:	75 10                	jne    c0013490 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xfe>
c0013480:	83 ec 0c             	sub    esp,0xc
c0013483:	68 fb 0f 02 c0       	push   0xc0020ffb
c0013488:	e8 63 15 00 00       	call   c00149f0 <Krnl::panic(char const*)>
c001348d:	83 c4 10             	add    esp,0x10
c0013490:	90                   	nop
c0013491:	83 c4 14             	add    esp,0x14
c0013494:	5b                   	pop    ebx
c0013495:	5e                   	pop    esi
c0013496:	c3                   	ret    
c0013497:	90                   	nop

c0013498 <ACPI::setScreenBrightnessLevel(void*, int)>:
c0013498:	b8 00 00 00 00       	mov    eax,0x0
c001349d:	c3                   	ret    

c001349e <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c001349e:	83 ec 1c             	sub    esp,0x1c
c00134a1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00134a5:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c00134a8:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00134ac:	a1 08 34 02 c0       	mov    eax,ds:0xc0023408
c00134b1:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00134b6:	83 ec 08             	sub    esp,0x8
c00134b9:	52                   	push   edx
c00134ba:	50                   	push   eax
c00134bb:	e8 76 7d ff ff       	call   c000b236 <Computer::readCMOS(unsigned char)>
c00134c0:	83 c4 10             	add    esp,0x10
c00134c3:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c00134c7:	a1 08 34 02 c0       	mov    eax,ds:0xc0023408
c00134cc:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00134d1:	83 ec 04             	sub    esp,0x4
c00134d4:	6a 01                	push   0x1
c00134d6:	52                   	push   edx
c00134d7:	50                   	push   eax
c00134d8:	e8 67 7e ff ff       	call   c000b344 <Computer::writeCMOS(unsigned char, unsigned char)>
c00134dd:	83 c4 10             	add    esp,0x10
c00134e0:	90                   	nop
c00134e1:	83 c4 1c             	add    esp,0x1c
c00134e4:	c3                   	ret    
c00134e5:	90                   	nop

c00134e6 <ACPI::open(int, int, void*)>:
c00134e6:	53                   	push   ebx
c00134e7:	83 ec 18             	sub    esp,0x18
c00134ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00134ee:	c6 80 64 22 00 00 01 	mov    BYTE PTR [eax+0x2264],0x1
c00134f5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00134f9:	8a 80 64 22 00 00    	mov    al,BYTE PTR [eax+0x2264]
c00134ff:	84 c0                	test   al,al
c0013501:	74 60                	je     c0013563 <ACPI::open(int, int, void*)+0x7d>
c0013503:	83 ec 0c             	sub    esp,0xc
c0013506:	68 58 01 00 00       	push   0x158
c001350b:	e8 5c b7 ff ff       	call   c000ec6c <operator new(unsigned long)>
c0013510:	83 c4 10             	add    esp,0x10
c0013513:	89 c3                	mov    ebx,eax
c0013515:	83 ec 0c             	sub    esp,0xc
c0013518:	53                   	push   ebx
c0013519:	e8 ea 7b 00 00       	call   c001b108 <PCI::PCI()>
c001351e:	83 c4 10             	add    esp,0x10
c0013521:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0013525:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013529:	83 ec 08             	sub    esp,0x8
c001352c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013530:	50                   	push   eax
c0013531:	e8 30 cc ff ff       	call   c0010166 <Device::addChild(Device*)>
c0013536:	83 c4 10             	add    esp,0x10
c0013539:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001353d:	8b 00                	mov    eax,DWORD PTR [eax]
c001353f:	83 c0 08             	add    eax,0x8
c0013542:	8b 00                	mov    eax,DWORD PTR [eax]
c0013544:	6a 00                	push   0x0
c0013546:	6a 00                	push   0x0
c0013548:	6a 00                	push   0x0
c001354a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001354e:	ff d0                	call   eax
c0013550:	83 c4 10             	add    esp,0x10
c0013553:	83 ec 0c             	sub    esp,0xc
c0013556:	68 18 10 02 c0       	push   0xc0021018
c001355b:	e8 fb b7 ff ff       	call   c000ed5b <Dbg::kprintf(char const*, ...)>
c0013560:	83 c4 10             	add    esp,0x10
c0013563:	83 ec 0c             	sub    esp,0xc
c0013566:	68 23 10 02 c0       	push   0xc0021023
c001356b:	e8 b8 33 00 00       	call   c0016928 <Thr::loadKernelSymbolTable(char const*)>
c0013570:	83 c4 10             	add    esp,0x10
c0013573:	8b 1d 08 34 02 c0    	mov    ebx,DWORD PTR ds:0xc0023408
c0013579:	83 ec 08             	sub    esp,0x8
c001357c:	6a 01                	push   0x1
c001357e:	68 41 10 02 c0       	push   0xc0021041
c0013583:	e8 82 3e 00 00       	call   c001740a <Thr::loadDLL(char const*, bool)>
c0013588:	83 c4 10             	add    esp,0x10
c001358b:	83 ec 08             	sub    esp,0x8
c001358e:	53                   	push   ebx
c001358f:	50                   	push   eax
c0013590:	e8 79 40 00 00       	call   c001760e <Thr::executeDLL(unsigned long, void*)>
c0013595:	83 c4 10             	add    esp,0x10
c0013598:	8b 1d 08 34 02 c0    	mov    ebx,DWORD PTR ds:0xc0023408
c001359e:	83 ec 08             	sub    esp,0x8
c00135a1:	6a 01                	push   0x1
c00135a3:	68 5e 10 02 c0       	push   0xc002105e
c00135a8:	e8 5d 3e 00 00       	call   c001740a <Thr::loadDLL(char const*, bool)>
c00135ad:	83 c4 10             	add    esp,0x10
c00135b0:	83 ec 08             	sub    esp,0x8
c00135b3:	53                   	push   ebx
c00135b4:	50                   	push   eax
c00135b5:	e8 54 40 00 00       	call   c001760e <Thr::executeDLL(unsigned long, void*)>
c00135ba:	83 c4 10             	add    esp,0x10
c00135bd:	a1 08 34 02 c0       	mov    eax,ds:0xc0023408
c00135c2:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00135c8:	83 e0 04             	and    eax,0x4
c00135cb:	84 c0                	test   al,al
c00135cd:	0f 84 cf 00 00 00    	je     c00136a2 <ACPI::open(int, int, void*)+0x1bc>
c00135d3:	83 ec 0c             	sub    esp,0xc
c00135d6:	68 14 01 00 00       	push   0x114
c00135db:	e8 8c b6 ff ff       	call   c000ec6c <operator new(unsigned long)>
c00135e0:	83 c4 10             	add    esp,0x10
c00135e3:	89 c3                	mov    ebx,eax
c00135e5:	a1 54 48 02 c0       	mov    eax,ds:0xc0024854
c00135ea:	83 ec 04             	sub    esp,0x4
c00135ed:	50                   	push   eax
c00135ee:	68 7b 10 02 c0       	push   0xc002107b
c00135f3:	53                   	push   ebx
c00135f4:	e8 91 bc ff ff       	call   c000f28a <File::File(char const*, Process*)>
c00135f9:	83 c4 10             	add    esp,0x10
c00135fc:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0013600:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0013605:	74 17                	je     c001361e <ACPI::open(int, int, void*)+0x138>
c0013607:	83 ec 0c             	sub    esp,0xc
c001360a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001360e:	e8 49 bf ff ff       	call   c000f55c <File::exists()>
c0013613:	83 c4 10             	add    esp,0x10
c0013616:	84 c0                	test   al,al
c0013618:	74 04                	je     c001361e <ACPI::open(int, int, void*)+0x138>
c001361a:	b0 01                	mov    al,0x1
c001361c:	eb 02                	jmp    c0013620 <ACPI::open(int, int, void*)+0x13a>
c001361e:	b0 00                	mov    al,0x0
c0013620:	84 c0                	test   al,al
c0013622:	74 25                	je     c0013649 <ACPI::open(int, int, void*)+0x163>
c0013624:	8b 1d 08 34 02 c0    	mov    ebx,DWORD PTR ds:0xc0023408
c001362a:	83 ec 08             	sub    esp,0x8
c001362d:	6a 01                	push   0x1
c001362f:	68 7b 10 02 c0       	push   0xc002107b
c0013634:	e8 d1 3d 00 00       	call   c001740a <Thr::loadDLL(char const*, bool)>
c0013639:	83 c4 10             	add    esp,0x10
c001363c:	83 ec 08             	sub    esp,0x8
c001363f:	53                   	push   ebx
c0013640:	50                   	push   eax
c0013641:	e8 c8 3f 00 00       	call   c001760e <Thr::executeDLL(unsigned long, void*)>
c0013646:	83 c4 10             	add    esp,0x10
c0013649:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001364e:	74 1e                	je     c001366e <ACPI::open(int, int, void*)+0x188>
c0013650:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0013655:	74 17                	je     c001366e <ACPI::open(int, int, void*)+0x188>
c0013657:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001365b:	8b 00                	mov    eax,DWORD PTR [eax]
c001365d:	83 c0 08             	add    eax,0x8
c0013660:	8b 00                	mov    eax,DWORD PTR [eax]
c0013662:	83 ec 0c             	sub    esp,0xc
c0013665:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013669:	ff d0                	call   eax
c001366b:	83 c4 10             	add    esp,0x10
c001366e:	a1 a8 3c 02 c0       	mov    eax,ds:0xc0023ca8
c0013673:	83 ec 08             	sub    esp,0x8
c0013676:	68 98 10 02 c0       	push   0xc0021098
c001367b:	50                   	push   eax
c001367c:	e8 9f f7 ff ff       	call   c0012e20 <findDataTable(unsigned char*, char*)>
c0013681:	83 c4 10             	add    esp,0x10
c0013684:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013688:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001368d:	74 13                	je     c00136a2 <ACPI::open(int, int, void*)+0x1bc>
c001368f:	83 ec 08             	sub    esp,0x8
c0013692:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0013696:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001369a:	e8 ff fd ff ff       	call   c001349e <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c001369f:	83 c4 10             	add    esp,0x10
c00136a2:	b8 00 00 00 00       	mov    eax,0x0
c00136a7:	83 c4 18             	add    esp,0x18
c00136aa:	5b                   	pop    ebx
c00136ab:	c3                   	ret    

c00136ac <ACPI::sleep()>:
c00136ac:	83 ec 0c             	sub    esp,0xc
c00136af:	a1 80 3a 02 c0       	mov    eax,ds:0xc0023a80
c00136b4:	85 c0                	test   eax,eax
c00136b6:	74 07                	je     c00136bf <ACPI::sleep()+0x13>
c00136b8:	a1 80 3a 02 c0       	mov    eax,ds:0xc0023a80
c00136bd:	ff d0                	call   eax
c00136bf:	90                   	nop
c00136c0:	83 c4 0c             	add    esp,0xc
c00136c3:	c3                   	ret    

c00136c4 <CPU::close(int, int, void*)>:
c00136c4:	31 c0                	xor    eax,eax
c00136c6:	c3                   	ret    

c00136c7 <lookupAMDCPUName(unsigned char, unsigned char)>:
c00136c7:	55                   	push   ebp
c00136c8:	57                   	push   edi
c00136c9:	56                   	push   esi
c00136ca:	53                   	push   ebx
c00136cb:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00136cf:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00136d3:	89 ce                	mov    esi,ecx
c00136d5:	89 d5                	mov    ebp,edx
c00136d7:	80 f9 04             	cmp    cl,0x4
c00136da:	75 28                	jne    c0013704 <lookupAMDCPUName(unsigned char, unsigned char)+0x3d>
c00136dc:	8d 42 f9             	lea    eax,[edx-0x7]
c00136df:	3c 03                	cmp    al,0x3
c00136e1:	0f 86 63 01 00 00    	jbe    c001384a <lookupAMDCPUName(unsigned char, unsigned char)+0x183>
c00136e7:	80 fa 03             	cmp    dl,0x3
c00136ea:	0f 84 5a 01 00 00    	je     c001384a <lookupAMDCPUName(unsigned char, unsigned char)+0x183>
c00136f0:	8d 7a f2             	lea    edi,[edx-0xe]
c00136f3:	b8 30 2d 02 c0       	mov    eax,0xc0022d30
c00136f8:	89 fb                	mov    ebx,edi
c00136fa:	80 fb 01             	cmp    bl,0x1
c00136fd:	77 4e                	ja     c001374d <lookupAMDCPUName(unsigned char, unsigned char)+0x86>
c00136ff:	e9 52 01 00 00       	jmp    c0013856 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013704:	80 f9 05             	cmp    cl,0x5
c0013707:	75 4d                	jne    c0013756 <lookupAMDCPUName(unsigned char, unsigned char)+0x8f>
c0013709:	b8 40 2d 02 c0       	mov    eax,0xc0022d40
c001370e:	80 fa 03             	cmp    dl,0x3
c0013711:	0f 86 3f 01 00 00    	jbe    c0013856 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013717:	8d 7a fa             	lea    edi,[edx-0x6]
c001371a:	b8 50 2d 02 c0       	mov    eax,0xc0022d50
c001371f:	89 fb                	mov    ebx,edi
c0013721:	80 fb 01             	cmp    bl,0x1
c0013724:	0f 86 2c 01 00 00    	jbe    c0013856 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c001372a:	b8 60 2d 02 c0       	mov    eax,0xc0022d60
c001372f:	80 fa 08             	cmp    dl,0x8
c0013732:	0f 84 1e 01 00 00    	je     c0013856 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013738:	89 d7                	mov    edi,edx
c001373a:	b8 70 2d 02 c0       	mov    eax,0xc0022d70
c001373f:	83 e7 fb             	and    edi,0xfffffffb
c0013742:	89 fb                	mov    ebx,edi
c0013744:	80 fb 09             	cmp    bl,0x9
c0013747:	0f 84 09 01 00 00    	je     c0013856 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c001374d:	31 c0                	xor    eax,eax
c001374f:	89 eb                	mov    ebx,ebp
c0013751:	0f b6 fb             	movzx  edi,bl
c0013754:	eb 30                	jmp    c0013786 <lookupAMDCPUName(unsigned char, unsigned char)+0xbf>
c0013756:	31 c0                	xor    eax,eax
c0013758:	80 f9 06             	cmp    cl,0x6
c001375b:	75 f2                	jne    c001374f <lookupAMDCPUName(unsigned char, unsigned char)+0x88>
c001375d:	80 fa 0a             	cmp    dl,0xa
c0013760:	77 ed                	ja     c001374f <lookupAMDCPUName(unsigned char, unsigned char)+0x88>
c0013762:	bf de 05 00 00       	mov    edi,0x5de
c0013767:	0f a3 d7             	bt     edi,edx
c001376a:	73 e3                	jae    c001374f <lookupAMDCPUName(unsigned char, unsigned char)+0x88>
c001376c:	b8 80 2d 02 c0       	mov    eax,0xc0022d80
c0013771:	e9 e0 00 00 00       	jmp    c0013856 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013776:	39 c7                	cmp    edi,eax
c0013778:	0f 84 d3 00 00 00    	je     c0013851 <lookupAMDCPUName(unsigned char, unsigned char)+0x18a>
c001377e:	40                   	inc    eax
c001377f:	3d d0 00 00 00       	cmp    eax,0xd0
c0013784:	74 09                	je     c001378f <lookupAMDCPUName(unsigned char, unsigned char)+0xc8>
c0013786:	89 f3                	mov    ebx,esi
c0013788:	80 fb 0f             	cmp    bl,0xf
c001378b:	75 f1                	jne    c001377e <lookupAMDCPUName(unsigned char, unsigned char)+0xb7>
c001378d:	eb e7                	jmp    c0013776 <lookupAMDCPUName(unsigned char, unsigned char)+0xaf>
c001378f:	80 f9 10             	cmp    cl,0x10
c0013792:	75 14                	jne    c00137a8 <lookupAMDCPUName(unsigned char, unsigned char)+0xe1>
c0013794:	8d 42 fc             	lea    eax,[edx-0x4]
c0013797:	83 e0 fb             	and    eax,0xfffffffb
c001379a:	3c 02                	cmp    al,0x2
c001379c:	76 34                	jbe    c00137d2 <lookupAMDCPUName(unsigned char, unsigned char)+0x10b>
c001379e:	b8 09 13 02 c0       	mov    eax,0xc0021309
c00137a3:	80 fa 02             	cmp    dl,0x2
c00137a6:	eb 24                	jmp    c00137cc <lookupAMDCPUName(unsigned char, unsigned char)+0x105>
c00137a8:	80 f9 11             	cmp    cl,0x11
c00137ab:	75 13                	jne    c00137c0 <lookupAMDCPUName(unsigned char, unsigned char)+0xf9>
c00137ad:	b8 09 13 02 c0       	mov    eax,0xc0021309
c00137b2:	80 fa 03             	cmp    dl,0x3
c00137b5:	0f 85 9b 00 00 00    	jne    c0013856 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00137bb:	e9 91 00 00 00       	jmp    c0013851 <lookupAMDCPUName(unsigned char, unsigned char)+0x18a>
c00137c0:	80 f9 12             	cmp    cl,0x12
c00137c3:	75 14                	jne    c00137d9 <lookupAMDCPUName(unsigned char, unsigned char)+0x112>
c00137c5:	b8 09 13 02 c0       	mov    eax,0xc0021309
c00137ca:	fe ca                	dec    dl
c00137cc:	0f 85 84 00 00 00    	jne    c0013856 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00137d2:	b8 a0 2d 02 c0       	mov    eax,0xc0022da0
c00137d7:	eb 7d                	jmp    c0013856 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00137d9:	80 f9 14             	cmp    cl,0x14
c00137dc:	75 12                	jne    c00137f0 <lookupAMDCPUName(unsigned char, unsigned char)+0x129>
c00137de:	4a                   	dec    edx
c00137df:	b8 09 13 02 c0       	mov    eax,0xc0021309
c00137e4:	80 fa 01             	cmp    dl,0x1
c00137e7:	77 6d                	ja     c0013856 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00137e9:	b8 b0 2d 02 c0       	mov    eax,0xc0022db0
c00137ee:	eb 66                	jmp    c0013856 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00137f0:	80 f9 15             	cmp    cl,0x15
c00137f3:	75 31                	jne    c0013826 <lookupAMDCPUName(unsigned char, unsigned char)+0x15f>
c00137f5:	b8 c0 2d 02 c0       	mov    eax,0xc0022dc0
c00137fa:	80 fa 01             	cmp    dl,0x1
c00137fd:	74 57                	je     c0013856 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00137ff:	b8 09 13 02 c0       	mov    eax,0xc0021309
c0013804:	80 fa 13             	cmp    dl,0x13
c0013807:	76 0c                	jbe    c0013815 <lookupAMDCPUName(unsigned char, unsigned char)+0x14e>
c0013809:	80 fa 30             	cmp    dl,0x30
c001380c:	75 48                	jne    c0013856 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c001380e:	b8 e0 2d 02 c0       	mov    eax,0xc0022de0
c0013813:	eb 41                	jmp    c0013856 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013815:	b9 04 00 09 00       	mov    ecx,0x90004
c001381a:	0f a3 d1             	bt     ecx,edx
c001381d:	73 37                	jae    c0013856 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c001381f:	b8 d0 2d 02 c0       	mov    eax,0xc0022dd0
c0013824:	eb 30                	jmp    c0013856 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013826:	b8 09 13 02 c0       	mov    eax,0xc0021309
c001382b:	80 f9 16             	cmp    cl,0x16
c001382e:	75 26                	jne    c0013856 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013830:	b8 f0 2d 02 c0       	mov    eax,0xc0022df0
c0013835:	84 d2                	test   dl,dl
c0013837:	74 1d                	je     c0013856 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013839:	b8 09 13 02 c0       	mov    eax,0xc0021309
c001383e:	80 fa 30             	cmp    dl,0x30
c0013841:	75 13                	jne    c0013856 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013843:	b8 00 2e 02 c0       	mov    eax,0xc0022e00
c0013848:	eb 0c                	jmp    c0013856 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c001384a:	b8 20 2d 02 c0       	mov    eax,0xc0022d20
c001384f:	eb 05                	jmp    c0013856 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013851:	b8 90 2d 02 c0       	mov    eax,0xc0022d90
c0013856:	5b                   	pop    ebx
c0013857:	5e                   	pop    esi
c0013858:	5f                   	pop    edi
c0013859:	5d                   	pop    ebp
c001385a:	c3                   	ret    

c001385b <lookupIntelCPUName(unsigned char, unsigned char)>:
c001385b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001385f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013863:	80 f9 04             	cmp    cl,0x4
c0013866:	75 6b                	jne    c00138d3 <lookupIntelCPUName(unsigned char, unsigned char)+0x78>
c0013868:	b8 80 2b 02 c0       	mov    eax,0xc0022b80
c001386d:	80 fa 01             	cmp    dl,0x1
c0013870:	0f 86 92 02 00 00    	jbe    c0013b08 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013876:	b8 90 2b 02 c0       	mov    eax,0xc0022b90
c001387b:	80 fa 02             	cmp    dl,0x2
c001387e:	0f 84 84 02 00 00    	je     c0013b08 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013884:	b8 a0 2b 02 c0       	mov    eax,0xc0022ba0
c0013889:	80 fa 03             	cmp    dl,0x3
c001388c:	0f 84 76 02 00 00    	je     c0013b08 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013892:	b8 b0 2b 02 c0       	mov    eax,0xc0022bb0
c0013897:	80 fa 04             	cmp    dl,0x4
c001389a:	0f 84 68 02 00 00    	je     c0013b08 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00138a0:	b8 c0 2b 02 c0       	mov    eax,0xc0022bc0
c00138a5:	80 fa 05             	cmp    dl,0x5
c00138a8:	0f 84 5a 02 00 00    	je     c0013b08 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00138ae:	b8 a0 2b 02 c0       	mov    eax,0xc0022ba0
c00138b3:	80 fa 07             	cmp    dl,0x7
c00138b6:	0f 84 4c 02 00 00    	je     c0013b08 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00138bc:	83 ea 08             	sub    edx,0x8
c00138bf:	b8 09 13 02 c0       	mov    eax,0xc0021309
c00138c4:	80 fa 01             	cmp    dl,0x1
c00138c7:	0f 87 3b 02 00 00    	ja     c0013b08 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00138cd:	b8 d0 2b 02 c0       	mov    eax,0xc0022bd0
c00138d2:	c3                   	ret    
c00138d3:	80 f9 05             	cmp    cl,0x5
c00138d6:	75 45                	jne    c001391d <lookupIntelCPUName(unsigned char, unsigned char)+0xc2>
c00138d8:	8d 4a ff             	lea    ecx,[edx-0x1]
c00138db:	b8 e0 2b 02 c0       	mov    eax,0xc0022be0
c00138e0:	80 f9 02             	cmp    cl,0x2
c00138e3:	0f 86 1f 02 00 00    	jbe    c0013b08 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00138e9:	80 fa 04             	cmp    dl,0x4
c00138ec:	0f 84 f3 01 00 00    	je     c0013ae5 <lookupIntelCPUName(unsigned char, unsigned char)+0x28a>
c00138f2:	80 fa 07             	cmp    dl,0x7
c00138f5:	0f 84 0d 02 00 00    	je     c0013b08 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00138fb:	b8 f0 2b 02 c0       	mov    eax,0xc0022bf0
c0013900:	80 fa 08             	cmp    dl,0x8
c0013903:	0f 84 ff 01 00 00    	je     c0013b08 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013909:	b8 09 13 02 c0       	mov    eax,0xc0021309
c001390e:	80 fa 09             	cmp    dl,0x9
c0013911:	0f 85 f1 01 00 00    	jne    c0013b08 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013917:	b8 00 2c 02 c0       	mov    eax,0xc0022c00
c001391c:	c3                   	ret    
c001391d:	80 f9 06             	cmp    cl,0x6
c0013920:	0f 85 85 01 00 00    	jne    c0013aab <lookupIntelCPUName(unsigned char, unsigned char)+0x250>
c0013926:	b8 10 2c 02 c0       	mov    eax,0xc0022c10
c001392b:	80 fa 01             	cmp    dl,0x1
c001392e:	0f 84 d4 01 00 00    	je     c0013b08 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013934:	8d 42 fb             	lea    eax,[edx-0x5]
c0013937:	3c 01                	cmp    al,0x1
c0013939:	0f 86 ac 01 00 00    	jbe    c0013aeb <lookupIntelCPUName(unsigned char, unsigned char)+0x290>
c001393f:	80 fa 03             	cmp    dl,0x3
c0013942:	0f 84 a3 01 00 00    	je     c0013aeb <lookupIntelCPUName(unsigned char, unsigned char)+0x290>
c0013948:	8d 4a f9             	lea    ecx,[edx-0x7]
c001394b:	b8 30 2c 02 c0       	mov    eax,0xc0022c30
c0013950:	80 f9 01             	cmp    cl,0x1
c0013953:	0f 86 af 01 00 00    	jbe    c0013b08 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013959:	80 fa 09             	cmp    dl,0x9
c001395c:	0f 84 8f 01 00 00    	je     c0013af1 <lookupIntelCPUName(unsigned char, unsigned char)+0x296>
c0013962:	8d 4a f6             	lea    ecx,[edx-0xa]
c0013965:	80 f9 01             	cmp    cl,0x1
c0013968:	0f 86 9a 01 00 00    	jbe    c0013b08 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c001396e:	b8 40 2c 02 c0       	mov    eax,0xc0022c40
c0013973:	80 fa 0d             	cmp    dl,0xd
c0013976:	0f 84 8c 01 00 00    	je     c0013b08 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c001397c:	b8 50 2c 02 c0       	mov    eax,0xc0022c50
c0013981:	80 fa 0e             	cmp    dl,0xe
c0013984:	0f 84 7e 01 00 00    	je     c0013b08 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c001398a:	b8 60 2c 02 c0       	mov    eax,0xc0022c60
c001398f:	80 fa 0f             	cmp    dl,0xf
c0013992:	0f 84 70 01 00 00    	je     c0013b08 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013998:	b8 40 2c 02 c0       	mov    eax,0xc0022c40
c001399d:	80 fa 15             	cmp    dl,0x15
c00139a0:	0f 84 62 01 00 00    	je     c0013b08 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00139a6:	8d 4a ea             	lea    ecx,[edx-0x16]
c00139a9:	b8 60 2c 02 c0       	mov    eax,0xc0022c60
c00139ae:	80 f9 01             	cmp    cl,0x1
c00139b1:	0f 86 51 01 00 00    	jbe    c0013b08 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00139b7:	80 fa 1a             	cmp    dl,0x1a
c00139ba:	0f 84 37 01 00 00    	je     c0013af7 <lookupIntelCPUName(unsigned char, unsigned char)+0x29c>
c00139c0:	80 fa 1c             	cmp    dl,0x1c
c00139c3:	0f 84 34 01 00 00    	je     c0013afd <lookupIntelCPUName(unsigned char, unsigned char)+0x2a2>
c00139c9:	80 fa 1d             	cmp    dl,0x1d
c00139cc:	0f 84 36 01 00 00    	je     c0013b08 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00139d2:	b8 90 2c 02 c0       	mov    eax,0xc0022c90
c00139d7:	80 fa 25             	cmp    dl,0x25
c00139da:	0f 84 28 01 00 00    	je     c0013b08 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00139e0:	8d 4a da             	lea    ecx,[edx-0x26]
c00139e3:	b8 80 2c 02 c0       	mov    eax,0xc0022c80
c00139e8:	80 f9 01             	cmp    cl,0x1
c00139eb:	0f 86 17 01 00 00    	jbe    c0013b08 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00139f1:	b8 a0 2c 02 c0       	mov    eax,0xc0022ca0
c00139f6:	80 fa 2a             	cmp    dl,0x2a
c00139f9:	0f 84 09 01 00 00    	je     c0013b08 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00139ff:	b8 90 2c 02 c0       	mov    eax,0xc0022c90
c0013a04:	80 fa 2c             	cmp    dl,0x2c
c0013a07:	0f 84 fb 00 00 00    	je     c0013b08 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013a0d:	b8 a0 2c 02 c0       	mov    eax,0xc0022ca0
c0013a12:	80 fa 2d             	cmp    dl,0x2d
c0013a15:	0f 84 ed 00 00 00    	je     c0013b08 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013a1b:	b8 70 2c 02 c0       	mov    eax,0xc0022c70
c0013a20:	80 fa 2e             	cmp    dl,0x2e
c0013a23:	0f 84 df 00 00 00    	je     c0013b08 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013a29:	b8 90 2c 02 c0       	mov    eax,0xc0022c90
c0013a2e:	80 fa 2f             	cmp    dl,0x2f
c0013a31:	0f 84 d1 00 00 00    	je     c0013b08 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013a37:	8d 4a cb             	lea    ecx,[edx-0x35]
c0013a3a:	b8 80 2c 02 c0       	mov    eax,0xc0022c80
c0013a3f:	80 f9 01             	cmp    cl,0x1
c0013a42:	0f 86 c0 00 00 00    	jbe    c0013b08 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013a48:	b8 b0 2c 02 c0       	mov    eax,0xc0022cb0
c0013a4d:	80 fa 37             	cmp    dl,0x37
c0013a50:	0f 84 b2 00 00 00    	je     c0013b08 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013a56:	b8 c0 2c 02 c0       	mov    eax,0xc0022cc0
c0013a5b:	80 fa 3a             	cmp    dl,0x3a
c0013a5e:	0f 84 a4 00 00 00    	je     c0013b08 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013a64:	b8 d0 2c 02 c0       	mov    eax,0xc0022cd0
c0013a69:	80 fa 3c             	cmp    dl,0x3c
c0013a6c:	0f 84 96 00 00 00    	je     c0013b08 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013a72:	b8 e0 2c 02 c0       	mov    eax,0xc0022ce0
c0013a77:	80 fa 3d             	cmp    dl,0x3d
c0013a7a:	0f 84 88 00 00 00    	je     c0013b08 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013a80:	b8 c0 2c 02 c0       	mov    eax,0xc0022cc0
c0013a85:	80 fa 3e             	cmp    dl,0x3e
c0013a88:	74 7e                	je     c0013b08 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013a8a:	8d 42 bb             	lea    eax,[edx-0x45]
c0013a8d:	3c 01                	cmp    al,0x1
c0013a8f:	76 72                	jbe    c0013b03 <lookupIntelCPUName(unsigned char, unsigned char)+0x2a8>
c0013a91:	80 fa 3f             	cmp    dl,0x3f
c0013a94:	74 6d                	je     c0013b03 <lookupIntelCPUName(unsigned char, unsigned char)+0x2a8>
c0013a96:	80 fa 4a             	cmp    dl,0x4a
c0013a99:	74 0a                	je     c0013aa5 <lookupIntelCPUName(unsigned char, unsigned char)+0x24a>
c0013a9b:	b8 09 13 02 c0       	mov    eax,0xc0021309
c0013aa0:	80 fa 4d             	cmp    dl,0x4d
c0013aa3:	75 63                	jne    c0013b08 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013aa5:	b8 b0 2c 02 c0       	mov    eax,0xc0022cb0
c0013aaa:	c3                   	ret    
c0013aab:	b8 09 13 02 c0       	mov    eax,0xc0021309
c0013ab0:	80 f9 0b             	cmp    cl,0xb
c0013ab3:	75 0a                	jne    c0013abf <lookupIntelCPUName(unsigned char, unsigned char)+0x264>
c0013ab5:	fe ca                	dec    dl
c0013ab7:	75 4f                	jne    c0013b08 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013ab9:	b8 f0 2c 02 c0       	mov    eax,0xc0022cf0
c0013abe:	c3                   	ret    
c0013abf:	80 f9 0f             	cmp    cl,0xf
c0013ac2:	75 44                	jne    c0013b08 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013ac4:	b8 00 2d 02 c0       	mov    eax,0xc0022d00
c0013ac9:	80 fa 02             	cmp    dl,0x2
c0013acc:	76 3a                	jbe    c0013b08 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013ace:	8d 42 fd             	lea    eax,[edx-0x3]
c0013ad1:	3c 01                	cmp    al,0x1
c0013ad3:	76 0a                	jbe    c0013adf <lookupIntelCPUName(unsigned char, unsigned char)+0x284>
c0013ad5:	b8 09 13 02 c0       	mov    eax,0xc0021309
c0013ada:	80 fa 06             	cmp    dl,0x6
c0013add:	75 29                	jne    c0013b08 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013adf:	b8 10 2d 02 c0       	mov    eax,0xc0022d10
c0013ae4:	c3                   	ret    
c0013ae5:	b8 f0 2b 02 c0       	mov    eax,0xc0022bf0
c0013aea:	c3                   	ret    
c0013aeb:	b8 20 2c 02 c0       	mov    eax,0xc0022c20
c0013af0:	c3                   	ret    
c0013af1:	b8 40 2c 02 c0       	mov    eax,0xc0022c40
c0013af6:	c3                   	ret    
c0013af7:	b8 70 2c 02 c0       	mov    eax,0xc0022c70
c0013afc:	c3                   	ret    
c0013afd:	b8 80 2c 02 c0       	mov    eax,0xc0022c80
c0013b02:	c3                   	ret    
c0013b03:	b8 d0 2c 02 c0       	mov    eax,0xc0022cd0
c0013b08:	c3                   	ret    

c0013b09 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>:
c0013b09:	60                   	pusha  
c0013b0a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0013b0e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013b12:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013b16:	9c                   	pushf  
c0013b17:	fa                   	cli    
c0013b18:	0f 09                	wbinvd 
c0013b1a:	0f 30                	wrmsr  
c0013b1c:	9d                   	popf   
c0013b1d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013b21:	89 02                	mov    DWORD PTR [edx],eax
c0013b23:	61                   	popa   
c0013b24:	c3                   	ret    

c0013b25 <AMD_K6_read_msr(unsigned int, REGS*)>:
c0013b25:	60                   	pusha  
c0013b26:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0013b2a:	9c                   	pushf  
c0013b2b:	fa                   	cli    
c0013b2c:	0f 09                	wbinvd 
c0013b2e:	31 c0                	xor    eax,eax
c0013b30:	31 d2                	xor    edx,edx
c0013b32:	0f 32                	rdmsr  
c0013b34:	9d                   	popf   
c0013b35:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013b39:	89 02                	mov    DWORD PTR [edx],eax
c0013b3b:	61                   	popa   
c0013b3c:	c3                   	ret    

c0013b3d <AMD_K6_writeback(int, int, int)>:
c0013b3d:	56                   	push   esi
c0013b3e:	53                   	push   ebx
c0013b3f:	83 ec 10             	sub    esp,0x10
c0013b42:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013b46:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0013b4b:	75 5d                	jne    c0013baa <AMD_K6_writeback(int, int, int)+0x6d>
c0013b4d:	83 f8 08             	cmp    eax,0x8
c0013b50:	75 09                	jne    c0013b5b <AMD_K6_writeback(int, int, int)+0x1e>
c0013b52:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0013b57:	7e 13                	jle    c0013b6c <AMD_K6_writeback(int, int, int)+0x2f>
c0013b59:	eb 30                	jmp    c0013b8b <AMD_K6_writeback(int, int, int)+0x4e>
c0013b5b:	83 f8 06             	cmp    eax,0x6
c0013b5e:	7c 4a                	jl     c0013baa <AMD_K6_writeback(int, int, int)+0x6d>
c0013b60:	83 f8 07             	cmp    eax,0x7
c0013b63:	7e 07                	jle    c0013b6c <AMD_K6_writeback(int, int, int)+0x2f>
c0013b65:	83 f8 09             	cmp    eax,0x9
c0013b68:	74 21                	je     c0013b8b <AMD_K6_writeback(int, int, int)+0x4e>
c0013b6a:	eb 3e                	jmp    c0013baa <AMD_K6_writeback(int, int, int)+0x6d>
c0013b6c:	89 e6                	mov    esi,esp
c0013b6e:	8b 1d 44 34 02 c0    	mov    ebx,DWORD PTR ds:0xc0023444
c0013b74:	56                   	push   esi
c0013b75:	c1 eb 15             	shr    ebx,0x15
c0013b78:	68 82 00 00 c0       	push   0xc0000082
c0013b7d:	83 e3 7e             	and    ebx,0x7e
c0013b80:	e8 a0 ff ff ff       	call   c0013b25 <AMD_K6_read_msr(unsigned int, REGS*)>
c0013b85:	56                   	push   esi
c0013b86:	6a 00                	push   0x0
c0013b88:	53                   	push   ebx
c0013b89:	eb 12                	jmp    c0013b9d <AMD_K6_writeback(int, int, int)+0x60>
c0013b8b:	89 e3                	mov    ebx,esp
c0013b8d:	53                   	push   ebx
c0013b8e:	68 82 00 00 c0       	push   0xc0000082
c0013b93:	e8 8d ff ff ff       	call   c0013b25 <AMD_K6_read_msr(unsigned int, REGS*)>
c0013b98:	53                   	push   ebx
c0013b99:	6a 00                	push   0x0
c0013b9b:	6a 00                	push   0x0
c0013b9d:	68 82 00 00 c0       	push   0xc0000082
c0013ba2:	e8 62 ff ff ff       	call   c0013b09 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>
c0013ba7:	83 c4 18             	add    esp,0x18
c0013baa:	83 c4 10             	add    esp,0x10
c0013bad:	5b                   	pop    ebx
c0013bae:	5e                   	pop    esi
c0013baf:	c3                   	ret    

c0013bb0 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0013bb0:	55                   	push   ebp
c0013bb1:	57                   	push   edi
c0013bb2:	56                   	push   esi
c0013bb3:	53                   	push   ebx
c0013bb4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013bb8:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0013bbc:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013bc0:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0013bc4:	39 05 20 2e 02 c0    	cmp    DWORD PTR ds:0xc0022e20,eax
c0013bca:	75 23                	jne    c0013bef <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0013bcc:	a1 4c 3e 02 c0       	mov    eax,ds:0xc0023e4c
c0013bd1:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0013bd5:	89 06                	mov    DWORD PTR [esi],eax
c0013bd7:	a1 48 3e 02 c0       	mov    eax,ds:0xc0023e48
c0013bdc:	89 07                	mov    DWORD PTR [edi],eax
c0013bde:	a1 44 3e 02 c0       	mov    eax,ds:0xc0023e44
c0013be3:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0013be6:	a1 40 3e 02 c0       	mov    eax,ds:0xc0023e40
c0013beb:	89 02                	mov    DWORD PTR [edx],eax
c0013bed:	eb 3f                	jmp    c0013c2e <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0013bef:	31 c9                	xor    ecx,ecx
c0013bf1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013bf5:	0f a2                	cpuid  
c0013bf7:	89 06                	mov    DWORD PTR [esi],eax
c0013bf9:	89 1f                	mov    DWORD PTR [edi],ebx
c0013bfb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013bff:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0013c02:	89 10                	mov    DWORD PTR [eax],edx
c0013c04:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013c08:	a3 20 2e 02 c0       	mov    ds:0xc0022e20,eax
c0013c0d:	8b 06                	mov    eax,DWORD PTR [esi]
c0013c0f:	a3 4c 3e 02 c0       	mov    ds:0xc0023e4c,eax
c0013c14:	8b 07                	mov    eax,DWORD PTR [edi]
c0013c16:	a3 48 3e 02 c0       	mov    ds:0xc0023e48,eax
c0013c1b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0013c1e:	a3 44 3e 02 c0       	mov    ds:0xc0023e44,eax
c0013c23:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013c27:	8b 00                	mov    eax,DWORD PTR [eax]
c0013c29:	a3 40 3e 02 c0       	mov    ds:0xc0023e40,eax
c0013c2e:	5b                   	pop    ebx
c0013c2f:	5e                   	pop    esi
c0013c30:	5f                   	pop    edi
c0013c31:	5d                   	pop    ebp
c0013c32:	c3                   	ret    

c0013c33 <cpuidCheckEDX(unsigned int)>:
c0013c33:	83 ec 10             	sub    esp,0x10
c0013c36:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013c3a:	50                   	push   eax
c0013c3b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013c3f:	50                   	push   eax
c0013c40:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013c44:	50                   	push   eax
c0013c45:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013c49:	50                   	push   eax
c0013c4a:	6a 01                	push   0x1
c0013c4c:	e8 5f ff ff ff       	call   c0013bb0 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013c51:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013c55:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0013c59:	0f 95 c0             	setne  al
c0013c5c:	83 c4 24             	add    esp,0x24
c0013c5f:	c3                   	ret    

c0013c60 <cpuidCheckECX(unsigned int)>:
c0013c60:	83 ec 10             	sub    esp,0x10
c0013c63:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013c67:	50                   	push   eax
c0013c68:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013c6c:	50                   	push   eax
c0013c6d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013c71:	50                   	push   eax
c0013c72:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013c76:	50                   	push   eax
c0013c77:	6a 01                	push   0x1
c0013c79:	e8 32 ff ff ff       	call   c0013bb0 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013c7e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013c82:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0013c86:	0f 95 c0             	setne  al
c0013c89:	83 c4 24             	add    esp,0x24
c0013c8c:	c3                   	ret    

c0013c8d <cpuidCheckExtendedEBX(unsigned int)>:
c0013c8d:	83 ec 10             	sub    esp,0x10
c0013c90:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013c94:	50                   	push   eax
c0013c95:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013c99:	50                   	push   eax
c0013c9a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013c9e:	50                   	push   eax
c0013c9f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013ca3:	50                   	push   eax
c0013ca4:	6a 07                	push   0x7
c0013ca6:	e8 05 ff ff ff       	call   c0013bb0 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013cab:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013caf:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0013cb3:	0f 95 c0             	setne  al
c0013cb6:	83 c4 24             	add    esp,0x24
c0013cb9:	c3                   	ret    

c0013cba <cpuidCheckExtendedECX(unsigned int)>:
c0013cba:	83 ec 10             	sub    esp,0x10
c0013cbd:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013cc1:	50                   	push   eax
c0013cc2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013cc6:	50                   	push   eax
c0013cc7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013ccb:	50                   	push   eax
c0013ccc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013cd0:	50                   	push   eax
c0013cd1:	6a 07                	push   0x7
c0013cd3:	e8 d8 fe ff ff       	call   c0013bb0 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013cd8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013cdc:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0013ce0:	0f 95 c0             	setne  al
c0013ce3:	83 c4 24             	add    esp,0x24
c0013ce6:	c3                   	ret    

c0013ce7 <getCPUNumber()>:
c0013ce7:	31 c0                	xor    eax,eax
c0013ce9:	c3                   	ret    

c0013cea <thisCPU()>:
c0013cea:	e8 f8 ff ff ff       	call   c0013ce7 <getCPUNumber()>
c0013cef:	8b 15 08 34 02 c0    	mov    edx,DWORD PTR ds:0xc0023408
c0013cf5:	8b 84 82 60 01 00 00 	mov    eax,DWORD PTR [edx+eax*4+0x160]
c0013cfc:	c3                   	ret    
c0013cfd:	90                   	nop

c0013cfe <CPU::CPU()>:
c0013cfe:	83 ec 0c             	sub    esp,0xc
c0013d01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d05:	83 ec 08             	sub    esp,0x8
c0013d08:	68 09 13 02 c0       	push   0xc0021309
c0013d0d:	50                   	push   eax
c0013d0e:	e8 43 c6 ff ff       	call   c0010356 <Device::Device(char const*)>
c0013d13:	83 c4 10             	add    esp,0x10
c0013d16:	ba e0 13 02 c0       	mov    edx,0xc00213e0
c0013d1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d1f:	89 10                	mov    DWORD PTR [eax],edx
c0013d21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d25:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0013d2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d33:	05 78 01 00 00       	add    eax,0x178
c0013d38:	83 ec 0c             	sub    esp,0xc
c0013d3b:	50                   	push   eax
c0013d3c:	e8 ed 76 ff ff       	call   c000b42e <GDT::GDT()>
c0013d41:	83 c4 10             	add    esp,0x10
c0013d44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d48:	05 7c 09 00 00       	add    eax,0x97c
c0013d4d:	83 ec 0c             	sub    esp,0xc
c0013d50:	50                   	push   eax
c0013d51:	e8 38 79 ff ff       	call   c000b68e <IDT::IDT()>
c0013d56:	83 c4 10             	add    esp,0x10
c0013d59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d5d:	05 7c 11 00 00       	add    eax,0x117c
c0013d62:	83 ec 0c             	sub    esp,0xc
c0013d65:	50                   	push   eax
c0013d66:	e8 67 99 ff ff       	call   c000d6d2 <TSS::TSS()>
c0013d6b:	83 c4 10             	add    esp,0x10
c0013d6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d72:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0013d79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d7d:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0013d87:	90                   	nop
c0013d88:	83 c4 0c             	add    esp,0xc
c0013d8b:	c3                   	ret    

c0013d8c <CPU::displayFeatures()>:
c0013d8c:	c3                   	ret    
c0013d8d:	90                   	nop

c0013d8e <CPU::detectFeatures()>:
c0013d8e:	55                   	push   ebp
c0013d8f:	57                   	push   edi
c0013d90:	56                   	push   esi
c0013d91:	53                   	push   ebx
c0013d92:	83 ec 50             	sub    esp,0x50
c0013d95:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0013d99:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0013da3:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0013daa:	8d bb 5f 01 00 00    	lea    edi,[ebx+0x15f]
c0013db0:	6a 0d                	push   0xd
c0013db2:	6a 00                	push   0x0
c0013db4:	57                   	push   edi
c0013db5:	e8 4e c8 fe ff       	call   c0000608 <memset>
c0013dba:	83 c4 10             	add    esp,0x10
c0013dbd:	a1 08 34 02 c0       	mov    eax,ds:0xc0023408
c0013dc2:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0013dc9:	0f 84 20 09 00 00    	je     c00146ef <CPU::detectFeatures()+0x961>
c0013dcf:	83 ec 0c             	sub    esp,0xc
c0013dd2:	6a 10                	push   0x10
c0013dd4:	e8 5a fe ff ff       	call   c0013c33 <cpuidCheckEDX(unsigned int)>
c0013dd9:	83 e0 01             	and    eax,0x1
c0013ddc:	8d 14 00             	lea    edx,[eax+eax*1]
c0013ddf:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013de5:	83 e0 fd             	and    eax,0xfffffffd
c0013de8:	09 d0                	or     eax,edx
c0013dea:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013df0:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0013df7:	e8 37 fe ff ff       	call   c0013c33 <cpuidCheckEDX(unsigned int)>
c0013dfc:	83 e0 01             	and    eax,0x1
c0013dff:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0013e06:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013e0c:	83 e0 fb             	and    eax,0xfffffffb
c0013e0f:	09 d0                	or     eax,edx
c0013e11:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013e17:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0013e1e:	e8 10 fe ff ff       	call   c0013c33 <cpuidCheckEDX(unsigned int)>
c0013e23:	83 e0 01             	and    eax,0x1
c0013e26:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0013e2d:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013e33:	83 e0 f7             	and    eax,0xfffffff7
c0013e36:	09 d0                	or     eax,edx
c0013e38:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013e3e:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0013e45:	e8 e9 fd ff ff       	call   c0013c33 <cpuidCheckEDX(unsigned int)>
c0013e4a:	83 e0 01             	and    eax,0x1
c0013e4d:	c1 e0 04             	shl    eax,0x4
c0013e50:	88 c2                	mov    dl,al
c0013e52:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013e58:	83 e0 ef             	and    eax,0xffffffef
c0013e5b:	09 d0                	or     eax,edx
c0013e5d:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013e63:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0013e6a:	e8 c4 fd ff ff       	call   c0013c33 <cpuidCheckEDX(unsigned int)>
c0013e6f:	83 e0 01             	and    eax,0x1
c0013e72:	c1 e0 05             	shl    eax,0x5
c0013e75:	88 c2                	mov    dl,al
c0013e77:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013e7d:	83 e0 df             	and    eax,0xffffffdf
c0013e80:	09 d0                	or     eax,edx
c0013e82:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013e88:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0013e8f:	e8 9f fd ff ff       	call   c0013c33 <cpuidCheckEDX(unsigned int)>
c0013e94:	83 e0 01             	and    eax,0x1
c0013e97:	8d 14 00             	lea    edx,[eax+eax*1]
c0013e9a:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0013ea0:	83 e0 fd             	and    eax,0xfffffffd
c0013ea3:	09 d0                	or     eax,edx
c0013ea5:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0013eab:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0013eb2:	e8 7c fd ff ff       	call   c0013c33 <cpuidCheckEDX(unsigned int)>
c0013eb7:	83 e0 01             	and    eax,0x1
c0013eba:	c1 e0 06             	shl    eax,0x6
c0013ebd:	88 c2                	mov    dl,al
c0013ebf:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0013ec5:	83 e0 bf             	and    eax,0xffffffbf
c0013ec8:	09 d0                	or     eax,edx
c0013eca:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0013ed0:	58                   	pop    eax
c0013ed1:	8d 74 24 28          	lea    esi,[esp+0x28]
c0013ed5:	56                   	push   esi
c0013ed6:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0013eda:	55                   	push   ebp
c0013edb:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013edf:	50                   	push   eax
c0013ee0:	8d 54 24 28          	lea    edx,[esp+0x28]
c0013ee4:	52                   	push   edx
c0013ee5:	6a 00                	push   0x0
c0013ee7:	e8 c4 fc ff ff       	call   c0013bb0 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013eec:	83 c4 1c             	add    esp,0x1c
c0013eef:	6a 04                	push   0x4
c0013ef1:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0013ef5:	50                   	push   eax
c0013ef6:	57                   	push   edi
c0013ef7:	e8 d6 c6 fe ff       	call   c00005d2 <memcpy>
c0013efc:	83 c4 0c             	add    esp,0xc
c0013eff:	8d 83 63 01 00 00    	lea    eax,[ebx+0x163]
c0013f05:	6a 04                	push   0x4
c0013f07:	56                   	push   esi
c0013f08:	50                   	push   eax
c0013f09:	e8 c4 c6 fe ff       	call   c00005d2 <memcpy>
c0013f0e:	83 c4 0c             	add    esp,0xc
c0013f11:	8d 83 67 01 00 00    	lea    eax,[ebx+0x167]
c0013f17:	6a 04                	push   0x4
c0013f19:	55                   	push   ebp
c0013f1a:	50                   	push   eax
c0013f1b:	e8 b2 c6 fe ff       	call   c00005d2 <memcpy>
c0013f20:	58                   	pop    eax
c0013f21:	5a                   	pop    edx
c0013f22:	68 b4 11 02 c0       	push   0xc00211b4
c0013f27:	57                   	push   edi
c0013f28:	e8 cb c7 fe ff       	call   c00006f8 <strcmp>
c0013f2d:	83 c4 10             	add    esp,0x10
c0013f30:	85 c0                	test   eax,eax
c0013f32:	75 0f                	jne    c0013f43 <CPU::detectFeatures()+0x1b5>
c0013f34:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0013f3e:	e9 22 02 00 00       	jmp    c0014165 <CPU::detectFeatures()+0x3d7>
c0013f43:	50                   	push   eax
c0013f44:	50                   	push   eax
c0013f45:	68 c1 11 02 c0       	push   0xc00211c1
c0013f4a:	57                   	push   edi
c0013f4b:	e8 a8 c7 fe ff       	call   c00006f8 <strcmp>
c0013f50:	83 c4 10             	add    esp,0x10
c0013f53:	85 c0                	test   eax,eax
c0013f55:	74 dd                	je     c0013f34 <CPU::detectFeatures()+0x1a6>
c0013f57:	51                   	push   ecx
c0013f58:	51                   	push   ecx
c0013f59:	68 ce 11 02 c0       	push   0xc00211ce
c0013f5e:	57                   	push   edi
c0013f5f:	e8 94 c7 fe ff       	call   c00006f8 <strcmp>
c0013f64:	83 c4 10             	add    esp,0x10
c0013f67:	85 c0                	test   eax,eax
c0013f69:	74 2a                	je     c0013f95 <CPU::detectFeatures()+0x207>
c0013f6b:	52                   	push   edx
c0013f6c:	52                   	push   edx
c0013f6d:	68 db 11 02 c0       	push   0xc00211db
c0013f72:	57                   	push   edi
c0013f73:	e8 80 c7 fe ff       	call   c00006f8 <strcmp>
c0013f78:	83 c4 10             	add    esp,0x10
c0013f7b:	85 c0                	test   eax,eax
c0013f7d:	74 16                	je     c0013f95 <CPU::detectFeatures()+0x207>
c0013f7f:	50                   	push   eax
c0013f80:	50                   	push   eax
c0013f81:	68 e8 11 02 c0       	push   0xc00211e8
c0013f86:	57                   	push   edi
c0013f87:	e8 6c c7 fe ff       	call   c00006f8 <strcmp>
c0013f8c:	83 c4 10             	add    esp,0x10
c0013f8f:	85 c0                	test   eax,eax
c0013f91:	74 48                	je     c0013fdb <CPU::detectFeatures()+0x24d>
c0013f93:	eb 0f                	jmp    c0013fa4 <CPU::detectFeatures()+0x216>
c0013f95:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0013f9f:	e9 c1 01 00 00       	jmp    c0014165 <CPU::detectFeatures()+0x3d7>
c0013fa4:	50                   	push   eax
c0013fa5:	50                   	push   eax
c0013fa6:	68 f5 11 02 c0       	push   0xc00211f5
c0013fab:	57                   	push   edi
c0013fac:	e8 47 c7 fe ff       	call   c00006f8 <strcmp>
c0013fb1:	83 c4 10             	add    esp,0x10
c0013fb4:	85 c0                	test   eax,eax
c0013fb6:	74 23                	je     c0013fdb <CPU::detectFeatures()+0x24d>
c0013fb8:	50                   	push   eax
c0013fb9:	50                   	push   eax
c0013fba:	68 02 12 02 c0       	push   0xc0021202
c0013fbf:	57                   	push   edi
c0013fc0:	e8 33 c7 fe ff       	call   c00006f8 <strcmp>
c0013fc5:	83 c4 10             	add    esp,0x10
c0013fc8:	85 c0                	test   eax,eax
c0013fca:	75 1e                	jne    c0013fea <CPU::detectFeatures()+0x25c>
c0013fcc:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0013fd6:	e9 8a 01 00 00       	jmp    c0014165 <CPU::detectFeatures()+0x3d7>
c0013fdb:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0013fe5:	e9 7b 01 00 00       	jmp    c0014165 <CPU::detectFeatures()+0x3d7>
c0013fea:	50                   	push   eax
c0013feb:	50                   	push   eax
c0013fec:	68 0f 12 02 c0       	push   0xc002120f
c0013ff1:	57                   	push   edi
c0013ff2:	e8 01 c7 fe ff       	call   c00006f8 <strcmp>
c0013ff7:	83 c4 10             	add    esp,0x10
c0013ffa:	85 c0                	test   eax,eax
c0013ffc:	75 0f                	jne    c001400d <CPU::detectFeatures()+0x27f>
c0013ffe:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0014008:	e9 58 01 00 00       	jmp    c0014165 <CPU::detectFeatures()+0x3d7>
c001400d:	50                   	push   eax
c001400e:	50                   	push   eax
c001400f:	68 ce 11 02 c0       	push   0xc00211ce
c0014014:	57                   	push   edi
c0014015:	e8 de c6 fe ff       	call   c00006f8 <strcmp>
c001401a:	83 c4 10             	add    esp,0x10
c001401d:	85 c0                	test   eax,eax
c001401f:	75 0f                	jne    c0014030 <CPU::detectFeatures()+0x2a2>
c0014021:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c001402b:	e9 35 01 00 00       	jmp    c0014165 <CPU::detectFeatures()+0x3d7>
c0014030:	50                   	push   eax
c0014031:	50                   	push   eax
c0014032:	68 1c 12 02 c0       	push   0xc002121c
c0014037:	57                   	push   edi
c0014038:	e8 bb c6 fe ff       	call   c00006f8 <strcmp>
c001403d:	83 c4 10             	add    esp,0x10
c0014040:	85 c0                	test   eax,eax
c0014042:	75 0f                	jne    c0014053 <CPU::detectFeatures()+0x2c5>
c0014044:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c001404e:	e9 12 01 00 00       	jmp    c0014165 <CPU::detectFeatures()+0x3d7>
c0014053:	51                   	push   ecx
c0014054:	51                   	push   ecx
c0014055:	68 29 12 02 c0       	push   0xc0021229
c001405a:	57                   	push   edi
c001405b:	e8 98 c6 fe ff       	call   c00006f8 <strcmp>
c0014060:	83 c4 10             	add    esp,0x10
c0014063:	85 c0                	test   eax,eax
c0014065:	75 0f                	jne    c0014076 <CPU::detectFeatures()+0x2e8>
c0014067:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0014071:	e9 ef 00 00 00       	jmp    c0014165 <CPU::detectFeatures()+0x3d7>
c0014076:	52                   	push   edx
c0014077:	52                   	push   edx
c0014078:	68 36 12 02 c0       	push   0xc0021236
c001407d:	57                   	push   edi
c001407e:	e8 75 c6 fe ff       	call   c00006f8 <strcmp>
c0014083:	83 c4 10             	add    esp,0x10
c0014086:	85 c0                	test   eax,eax
c0014088:	75 0f                	jne    c0014099 <CPU::detectFeatures()+0x30b>
c001408a:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0014094:	e9 cc 00 00 00       	jmp    c0014165 <CPU::detectFeatures()+0x3d7>
c0014099:	50                   	push   eax
c001409a:	50                   	push   eax
c001409b:	68 43 12 02 c0       	push   0xc0021243
c00140a0:	57                   	push   edi
c00140a1:	e8 52 c6 fe ff       	call   c00006f8 <strcmp>
c00140a6:	83 c4 10             	add    esp,0x10
c00140a9:	85 c0                	test   eax,eax
c00140ab:	75 0f                	jne    c00140bc <CPU::detectFeatures()+0x32e>
c00140ad:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c00140b7:	e9 a9 00 00 00       	jmp    c0014165 <CPU::detectFeatures()+0x3d7>
c00140bc:	50                   	push   eax
c00140bd:	50                   	push   eax
c00140be:	68 50 12 02 c0       	push   0xc0021250
c00140c3:	57                   	push   edi
c00140c4:	e8 2f c6 fe ff       	call   c00006f8 <strcmp>
c00140c9:	83 c4 10             	add    esp,0x10
c00140cc:	85 c0                	test   eax,eax
c00140ce:	75 0f                	jne    c00140df <CPU::detectFeatures()+0x351>
c00140d0:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c00140da:	e9 86 00 00 00       	jmp    c0014165 <CPU::detectFeatures()+0x3d7>
c00140df:	50                   	push   eax
c00140e0:	50                   	push   eax
c00140e1:	68 5d 12 02 c0       	push   0xc002125d
c00140e6:	57                   	push   edi
c00140e7:	e8 0c c6 fe ff       	call   c00006f8 <strcmp>
c00140ec:	83 c4 10             	add    esp,0x10
c00140ef:	85 c0                	test   eax,eax
c00140f1:	75 0c                	jne    c00140ff <CPU::detectFeatures()+0x371>
c00140f3:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c00140fd:	eb 66                	jmp    c0014165 <CPU::detectFeatures()+0x3d7>
c00140ff:	50                   	push   eax
c0014100:	50                   	push   eax
c0014101:	68 6a 12 02 c0       	push   0xc002126a
c0014106:	57                   	push   edi
c0014107:	e8 ec c5 fe ff       	call   c00006f8 <strcmp>
c001410c:	83 c4 10             	add    esp,0x10
c001410f:	85 c0                	test   eax,eax
c0014111:	75 0c                	jne    c001411f <CPU::detectFeatures()+0x391>
c0014113:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c001411d:	eb 46                	jmp    c0014165 <CPU::detectFeatures()+0x3d7>
c001411f:	50                   	push   eax
c0014120:	50                   	push   eax
c0014121:	68 77 12 02 c0       	push   0xc0021277
c0014126:	57                   	push   edi
c0014127:	e8 cc c5 fe ff       	call   c00006f8 <strcmp>
c001412c:	83 c4 10             	add    esp,0x10
c001412f:	85 c0                	test   eax,eax
c0014131:	74 e0                	je     c0014113 <CPU::detectFeatures()+0x385>
c0014133:	50                   	push   eax
c0014134:	50                   	push   eax
c0014135:	68 84 12 02 c0       	push   0xc0021284
c001413a:	57                   	push   edi
c001413b:	e8 b8 c5 fe ff       	call   c00006f8 <strcmp>
c0014140:	83 c4 10             	add    esp,0x10
c0014143:	85 c0                	test   eax,eax
c0014145:	74 cc                	je     c0014113 <CPU::detectFeatures()+0x385>
c0014147:	51                   	push   ecx
c0014148:	51                   	push   ecx
c0014149:	68 91 12 02 c0       	push   0xc0021291
c001414e:	57                   	push   edi
c001414f:	e8 a4 c5 fe ff       	call   c00006f8 <strcmp>
c0014154:	83 c4 10             	add    esp,0x10
c0014157:	85 c0                	test   eax,eax
c0014159:	74 b8                	je     c0014113 <CPU::detectFeatures()+0x385>
c001415b:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0014165:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c001416a:	0f 86 be 00 00 00    	jbe    c001422e <CPU::detectFeatures()+0x4a0>
c0014170:	83 ec 0c             	sub    esp,0xc
c0014173:	68 80 00 00 00       	push   0x80
c0014178:	e8 10 fb ff ff       	call   c0013c8d <cpuidCheckExtendedEBX(unsigned int)>
c001417d:	83 e0 01             	and    eax,0x1
c0014180:	c1 e0 06             	shl    eax,0x6
c0014183:	88 c2                	mov    dl,al
c0014185:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001418b:	83 e0 bf             	and    eax,0xffffffbf
c001418e:	09 d0                	or     eax,edx
c0014190:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014196:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c001419d:	e8 eb fa ff ff       	call   c0013c8d <cpuidCheckExtendedEBX(unsigned int)>
c00141a2:	83 e0 01             	and    eax,0x1
c00141a5:	c1 e0 04             	shl    eax,0x4
c00141a8:	88 c2                	mov    dl,al
c00141aa:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00141b0:	83 e0 ef             	and    eax,0xffffffef
c00141b3:	09 d0                	or     eax,edx
c00141b5:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00141bb:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c00141c2:	e8 c6 fa ff ff       	call   c0013c8d <cpuidCheckExtendedEBX(unsigned int)>
c00141c7:	c1 e0 07             	shl    eax,0x7
c00141ca:	88 c2                	mov    dl,al
c00141cc:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00141d2:	83 e0 7f             	and    eax,0x7f
c00141d5:	09 d0                	or     eax,edx
c00141d7:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00141dd:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00141e4:	e8 d1 fa ff ff       	call   c0013cba <cpuidCheckExtendedECX(unsigned int)>
c00141e9:	83 e0 01             	and    eax,0x1
c00141ec:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00141f3:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00141f9:	83 e0 f7             	and    eax,0xfffffff7
c00141fc:	09 d0                	or     eax,edx
c00141fe:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0014204:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c001420b:	e8 aa fa ff ff       	call   c0013cba <cpuidCheckExtendedECX(unsigned int)>
c0014210:	83 c4 10             	add    esp,0x10
c0014213:	83 e0 01             	and    eax,0x1
c0014216:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001421d:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0014223:	83 e0 fb             	and    eax,0xfffffffb
c0014226:	09 d0                	or     eax,edx
c0014228:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c001422e:	83 ec 0c             	sub    esp,0xc
c0014231:	56                   	push   esi
c0014232:	55                   	push   ebp
c0014233:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0014237:	57                   	push   edi
c0014238:	8d 44 24 28          	lea    eax,[esp+0x28]
c001423c:	50                   	push   eax
c001423d:	6a 01                	push   0x1
c001423f:	e8 6c f9 ff ff       	call   c0013bb0 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0014244:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0014248:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c001424e:	88 ca                	mov    dl,cl
c0014250:	83 e0 f0             	and    eax,0xfffffff0
c0014253:	83 e2 0f             	and    edx,0xf
c0014256:	09 d0                	or     eax,edx
c0014258:	88 ca                	mov    dl,cl
c001425a:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c0014260:	c0 ea 04             	shr    dl,0x4
c0014263:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c0014267:	0f b6 c2             	movzx  eax,dl
c001426a:	83 c4 20             	add    esp,0x20
c001426d:	c1 e0 06             	shl    eax,0x6
c0014270:	89 c5                	mov    ebp,eax
c0014272:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0014278:	66 25 3f c0          	and    ax,0xc03f
c001427c:	09 e8                	or     eax,ebp
c001427e:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0014285:	89 c8                	mov    eax,ecx
c0014287:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c001428d:	c1 e8 08             	shr    eax,0x8
c0014290:	83 e2 3f             	and    edx,0x3f
c0014293:	83 e0 0f             	and    eax,0xf
c0014296:	89 c5                	mov    ebp,eax
c0014298:	c1 e5 06             	shl    ebp,0x6
c001429b:	09 d5                	or     ebp,edx
c001429d:	89 ea                	mov    edx,ebp
c001429f:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c00142a5:	88 c2                	mov    dl,al
c00142a7:	c0 ea 02             	shr    dl,0x2
c00142aa:	89 d5                	mov    ebp,edx
c00142ac:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c00142b2:	83 e2 c0             	and    edx,0xffffffc0
c00142b5:	09 d5                	or     ebp,edx
c00142b7:	89 ea                	mov    edx,ebp
c00142b9:	89 cd                	mov    ebp,ecx
c00142bb:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c00142c1:	c1 ed 0c             	shr    ebp,0xc
c00142c4:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c00142ca:	83 e5 03             	and    ebp,0x3
c00142cd:	83 e2 cf             	and    edx,0xffffffcf
c00142d0:	c1 e5 04             	shl    ebp,0x4
c00142d3:	09 d5                	or     ebp,edx
c00142d5:	3c 06                	cmp    al,0x6
c00142d7:	89 ea                	mov    edx,ebp
c00142d9:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c00142df:	74 04                	je     c00142e5 <CPU::detectFeatures()+0x557>
c00142e1:	3c 0f                	cmp    al,0xf
c00142e3:	75 5c                	jne    c0014341 <CPU::detectFeatures()+0x5b3>
c00142e5:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00142e9:	89 cd                	mov    ebp,ecx
c00142eb:	c1 ed 10             	shr    ebp,0x10
c00142ee:	c1 e5 04             	shl    ebp,0x4
c00142f1:	09 ea                	or     edx,ebp
c00142f3:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c00142f9:	0f b6 d2             	movzx  edx,dl
c00142fc:	66 81 e5 3f c0       	and    bp,0xc03f
c0014301:	c1 e2 06             	shl    edx,0x6
c0014304:	09 ea                	or     edx,ebp
c0014306:	3c 0f                	cmp    al,0xf
c0014308:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c001430f:	75 30                	jne    c0014341 <CPU::detectFeatures()+0x5b3>
c0014311:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c0014317:	c1 e9 14             	shr    ecx,0x14
c001431a:	83 e0 3f             	and    eax,0x3f
c001431d:	83 c1 0f             	add    ecx,0xf
c0014320:	88 ca                	mov    dl,cl
c0014322:	c0 e9 02             	shr    cl,0x2
c0014325:	c1 e2 06             	shl    edx,0x6
c0014328:	09 d0                	or     eax,edx
c001432a:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c0014330:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c0014336:	83 e0 c0             	and    eax,0xffffffc0
c0014339:	09 c1                	or     ecx,eax
c001433b:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0014341:	83 ec 0c             	sub    esp,0xc
c0014344:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c001434b:	56                   	push   esi
c001434c:	8d 44 24 28          	lea    eax,[esp+0x28]
c0014350:	50                   	push   eax
c0014351:	57                   	push   edi
c0014352:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0014356:	55                   	push   ebp
c0014357:	68 00 00 00 80       	push   0x80000000
c001435c:	e8 4f f8 ff ff       	call   c0013bb0 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0014361:	83 c4 20             	add    esp,0x20
c0014364:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c001436c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0014370:	76 1e                	jbe    c0014390 <CPU::detectFeatures()+0x602>
c0014372:	83 ec 0c             	sub    esp,0xc
c0014375:	56                   	push   esi
c0014376:	50                   	push   eax
c0014377:	57                   	push   edi
c0014378:	55                   	push   ebp
c0014379:	68 01 00 00 80       	push   0x80000001
c001437e:	e8 2d f8 ff ff       	call   c0013bb0 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0014383:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c001438d:	83 c4 20             	add    esp,0x20
c0014390:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0014396:	83 f8 01             	cmp    eax,0x1
c0014399:	75 6f                	jne    c001440a <CPU::detectFeatures()+0x67c>
c001439b:	51                   	push   ecx
c001439c:	51                   	push   ecx
c001439d:	68 9d 12 02 c0       	push   0xc002129d
c00143a2:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00143a6:	56                   	push   esi
c00143a7:	e8 fb c2 fe ff       	call   c00006a7 <strcpy>
c00143ac:	5f                   	pop    edi
c00143ad:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00143b3:	5d                   	pop    ebp
c00143b4:	66 c1 e8 06          	shr    ax,0x6
c00143b8:	0f b6 c0             	movzx  eax,al
c00143bb:	50                   	push   eax
c00143bc:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00143c2:	c1 e8 0e             	shr    eax,0xe
c00143c5:	0f b6 c0             	movzx  eax,al
c00143c8:	50                   	push   eax
c00143c9:	e8 8d f4 ff ff       	call   c001385b <lookupIntelCPUName(unsigned char, unsigned char)>
c00143ce:	5a                   	pop    edx
c00143cf:	59                   	pop    ecx
c00143d0:	50                   	push   eax
c00143d1:	56                   	push   esi
c00143d2:	e8 87 c3 fe ff       	call   c000075e <strcat>
c00143d7:	5f                   	pop    edi
c00143d8:	5d                   	pop    ebp
c00143d9:	56                   	push   esi
c00143da:	53                   	push   ebx
c00143db:	e8 68 bf ff ff       	call   c0010348 <Device::setName(char const*)>
c00143e0:	58                   	pop    eax
c00143e1:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c00143e7:	5a                   	pop    edx
c00143e8:	68 a4 12 02 c0       	push   0xc00212a4
c00143ed:	50                   	push   eax
c00143ee:	e8 05 c3 fe ff       	call   c00006f8 <strcmp>
c00143f3:	83 c4 10             	add    esp,0x10
c00143f6:	85 c0                	test   eax,eax
c00143f8:	0f 85 73 03 00 00    	jne    c0014771 <CPU::detectFeatures()+0x9e3>
c00143fe:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c0014405:	e9 67 03 00 00       	jmp    c0014771 <CPU::detectFeatures()+0x9e3>
c001440a:	83 f8 02             	cmp    eax,0x2
c001440d:	0f 85 b5 00 00 00    	jne    c00144c8 <CPU::detectFeatures()+0x73a>
c0014413:	57                   	push   edi
c0014414:	57                   	push   edi
c0014415:	68 b6 12 02 c0       	push   0xc00212b6
c001441a:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001441e:	56                   	push   esi
c001441f:	e8 83 c2 fe ff       	call   c00006a7 <strcpy>
c0014424:	5d                   	pop    ebp
c0014425:	58                   	pop    eax
c0014426:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001442c:	66 c1 e8 06          	shr    ax,0x6
c0014430:	0f b6 c0             	movzx  eax,al
c0014433:	50                   	push   eax
c0014434:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001443a:	c1 e8 0e             	shr    eax,0xe
c001443d:	0f b6 c0             	movzx  eax,al
c0014440:	50                   	push   eax
c0014441:	e8 81 f2 ff ff       	call   c00136c7 <lookupAMDCPUName(unsigned char, unsigned char)>
c0014446:	5a                   	pop    edx
c0014447:	59                   	pop    ecx
c0014448:	50                   	push   eax
c0014449:	56                   	push   esi
c001444a:	e8 0f c3 fe ff       	call   c000075e <strcat>
c001444f:	5f                   	pop    edi
c0014450:	5d                   	pop    ebp
c0014451:	56                   	push   esi
c0014452:	53                   	push   ebx
c0014453:	e8 f0 be ff ff       	call   c0010348 <Device::setName(char const*)>
c0014458:	58                   	pop    eax
c0014459:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c001445f:	5a                   	pop    edx
c0014460:	68 bb 12 02 c0       	push   0xc00212bb
c0014465:	50                   	push   eax
c0014466:	e8 8d c2 fe ff       	call   c00006f8 <strcmp>
c001446b:	83 c4 10             	add    esp,0x10
c001446e:	85 c0                	test   eax,eax
c0014470:	75 20                	jne    c0014492 <CPU::detectFeatures()+0x704>
c0014472:	8b 15 08 34 02 c0    	mov    edx,DWORD PTR ds:0xc0023408
c0014478:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c001447e:	a8 01                	test   al,0x1
c0014480:	74 10                	je     c0014492 <CPU::detectFeatures()+0x704>
c0014482:	83 e0 fe             	and    eax,0xfffffffe
c0014485:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c001448b:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c0014492:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0014498:	c1 e8 0e             	shr    eax,0xe
c001449b:	3c 05                	cmp    al,0x5
c001449d:	0f 85 ce 02 00 00    	jne    c0014771 <CPU::detectFeatures()+0x9e3>
c00144a3:	56                   	push   esi
c00144a4:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c00144aa:	83 e0 0f             	and    eax,0xf
c00144ad:	50                   	push   eax
c00144ae:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00144b4:	66 c1 e8 06          	shr    ax,0x6
c00144b8:	0f b6 c0             	movzx  eax,al
c00144bb:	50                   	push   eax
c00144bc:	6a 05                	push   0x5
c00144be:	e8 7a f6 ff ff       	call   c0013b3d <AMD_K6_writeback(int, int, int)>
c00144c3:	e9 1f 02 00 00       	jmp    c00146e7 <CPU::detectFeatures()+0x959>
c00144c8:	8d 50 fd             	lea    edx,[eax-0x3]
c00144cb:	83 fa 01             	cmp    edx,0x1
c00144ce:	76 09                	jbe    c00144d9 <CPU::detectFeatures()+0x74b>
c00144d0:	83 f8 06             	cmp    eax,0x6
c00144d3:	0f 85 91 01 00 00    	jne    c001466a <CPU::detectFeatures()+0x8dc>
c00144d9:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00144df:	c1 ea 0e             	shr    edx,0xe
c00144e2:	80 fa 05             	cmp    dl,0x5
c00144e5:	75 7b                	jne    c0014562 <CPU::detectFeatures()+0x7d4>
c00144e7:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00144ed:	66 81 e2 c0 3f       	and    dx,0x3fc0
c00144f2:	66 81 fa 00 01       	cmp    dx,0x100
c00144f7:	75 0c                	jne    c0014505 <CPU::detectFeatures()+0x777>
c00144f9:	51                   	push   ecx
c00144fa:	51                   	push   ecx
c00144fb:	68 c2 12 02 c0       	push   0xc00212c2
c0014500:	e9 dc 01 00 00       	jmp    c00146e1 <CPU::detectFeatures()+0x953>
c0014505:	66 81 fa 00 02       	cmp    dx,0x200
c001450a:	75 0c                	jne    c0014518 <CPU::detectFeatures()+0x78a>
c001450c:	52                   	push   edx
c001450d:	52                   	push   edx
c001450e:	68 d5 12 02 c0       	push   0xc00212d5
c0014513:	e9 c9 01 00 00       	jmp    c00146e1 <CPU::detectFeatures()+0x953>
c0014518:	66 81 fa 40 02       	cmp    dx,0x240
c001451d:	75 0c                	jne    c001452b <CPU::detectFeatures()+0x79d>
c001451f:	50                   	push   eax
c0014520:	50                   	push   eax
c0014521:	68 e7 12 02 c0       	push   0xc00212e7
c0014526:	e9 b6 01 00 00       	jmp    c00146e1 <CPU::detectFeatures()+0x953>
c001452b:	83 f8 06             	cmp    eax,0x6
c001452e:	75 0c                	jne    c001453c <CPU::detectFeatures()+0x7ae>
c0014530:	50                   	push   eax
c0014531:	50                   	push   eax
c0014532:	68 f9 12 02 c0       	push   0xc00212f9
c0014537:	e9 a5 01 00 00       	jmp    c00146e1 <CPU::detectFeatures()+0x953>
c001453c:	83 f8 04             	cmp    eax,0x4
c001453f:	75 0c                	jne    c001454d <CPU::detectFeatures()+0x7bf>
c0014541:	50                   	push   eax
c0014542:	50                   	push   eax
c0014543:	68 05 13 02 c0       	push   0xc0021305
c0014548:	e9 94 01 00 00       	jmp    c00146e1 <CPU::detectFeatures()+0x953>
c001454d:	83 f8 03             	cmp    eax,0x3
c0014550:	0f 85 1b 02 00 00    	jne    c0014771 <CPU::detectFeatures()+0x9e3>
c0014556:	50                   	push   eax
c0014557:	50                   	push   eax
c0014558:	68 0d 13 02 c0       	push   0xc002130d
c001455d:	e9 7f 01 00 00       	jmp    c00146e1 <CPU::detectFeatures()+0x953>
c0014562:	80 fa 06             	cmp    dl,0x6
c0014565:	0f 85 db 00 00 00    	jne    c0014646 <CPU::detectFeatures()+0x8b8>
c001456b:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0014571:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0014576:	66 81 fa 80 01       	cmp    dx,0x180
c001457b:	75 0c                	jne    c0014589 <CPU::detectFeatures()+0x7fb>
c001457d:	50                   	push   eax
c001457e:	50                   	push   eax
c001457f:	68 18 13 02 c0       	push   0xc0021318
c0014584:	e9 58 01 00 00       	jmp    c00146e1 <CPU::detectFeatures()+0x953>
c0014589:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c001458f:	66 f7 c1 80 ff       	test   cx,0xff80
c0014594:	75 0c                	jne    c00145a2 <CPU::detectFeatures()+0x814>
c0014596:	50                   	push   eax
c0014597:	50                   	push   eax
c0014598:	68 28 13 02 c0       	push   0xc0021328
c001459d:	e9 3f 01 00 00       	jmp    c00146e1 <CPU::detectFeatures()+0x953>
c00145a2:	66 81 fa 40 02       	cmp    dx,0x240
c00145a7:	75 0c                	jne    c00145b5 <CPU::detectFeatures()+0x827>
c00145a9:	55                   	push   ebp
c00145aa:	55                   	push   ebp
c00145ab:	68 2f 13 02 c0       	push   0xc002132f
c00145b0:	e9 2c 01 00 00       	jmp    c00146e1 <CPU::detectFeatures()+0x953>
c00145b5:	66 81 fa 80 02       	cmp    dx,0x280
c00145ba:	75 0c                	jne    c00145c8 <CPU::detectFeatures()+0x83a>
c00145bc:	57                   	push   edi
c00145bd:	57                   	push   edi
c00145be:	68 38 13 02 c0       	push   0xc0021338
c00145c3:	e9 19 01 00 00       	jmp    c00146e1 <CPU::detectFeatures()+0x953>
c00145c8:	66 81 fa 40 03       	cmp    dx,0x340
c00145cd:	74 ed                	je     c00145bc <CPU::detectFeatures()+0x82e>
c00145cf:	66 81 fa c0 03       	cmp    dx,0x3c0
c00145d4:	75 0c                	jne    c00145e2 <CPU::detectFeatures()+0x854>
c00145d6:	56                   	push   esi
c00145d7:	56                   	push   esi
c00145d8:	68 3f 13 02 c0       	push   0xc002133f
c00145dd:	e9 ff 00 00 00       	jmp    c00146e1 <CPU::detectFeatures()+0x953>
c00145e2:	83 f8 06             	cmp    eax,0x6
c00145e5:	0f 84 45 ff ff ff    	je     c0014530 <CPU::detectFeatures()+0x7a2>
c00145eb:	83 f8 04             	cmp    eax,0x4
c00145ee:	0f 84 4d ff ff ff    	je     c0014541 <CPU::detectFeatures()+0x7b3>
c00145f4:	83 f8 03             	cmp    eax,0x3
c00145f7:	0f 85 74 01 00 00    	jne    c0014771 <CPU::detectFeatures()+0x9e3>
c00145fd:	51                   	push   ecx
c00145fe:	51                   	push   ecx
c00145ff:	68 48 13 02 c0       	push   0xc0021348
c0014604:	53                   	push   ebx
c0014605:	e8 3e bd ff ff       	call   c0010348 <Device::setName(char const*)>
c001460a:	b1 c1                	mov    cl,0xc1
c001460c:	88 c8                	mov    al,cl
c001460e:	e6 22                	out    0x22,al
c0014610:	e4 23                	in     al,0x23
c0014612:	88 c2                	mov    dl,al
c0014614:	88 c8                	mov    al,cl
c0014616:	e6 22                	out    0x22,al
c0014618:	88 d0                	mov    al,dl
c001461a:	83 c8 10             	or     eax,0x10
c001461d:	e6 23                	out    0x23,al
c001461f:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0014626:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0014629:	89 d0                	mov    eax,edx
c001462b:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c0014631:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c0014635:	40                   	inc    eax
c0014636:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001463c:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0014641:	e9 a1 00 00 00       	jmp    c00146e7 <CPU::detectFeatures()+0x959>
c0014646:	83 f8 06             	cmp    eax,0x6
c0014649:	0f 84 e1 fe ff ff    	je     c0014530 <CPU::detectFeatures()+0x7a2>
c001464f:	83 f8 04             	cmp    eax,0x4
c0014652:	0f 84 e9 fe ff ff    	je     c0014541 <CPU::detectFeatures()+0x7b3>
c0014658:	83 f8 03             	cmp    eax,0x3
c001465b:	0f 85 10 01 00 00    	jne    c0014771 <CPU::detectFeatures()+0x9e3>
c0014661:	52                   	push   edx
c0014662:	52                   	push   edx
c0014663:	68 53 13 02 c0       	push   0xc0021353
c0014668:	eb 77                	jmp    c00146e1 <CPU::detectFeatures()+0x953>
c001466a:	83 f8 07             	cmp    eax,0x7
c001466d:	75 09                	jne    c0014678 <CPU::detectFeatures()+0x8ea>
c001466f:	50                   	push   eax
c0014670:	50                   	push   eax
c0014671:	68 5d 13 02 c0       	push   0xc002135d
c0014676:	eb 69                	jmp    c00146e1 <CPU::detectFeatures()+0x953>
c0014678:	83 f8 0a             	cmp    eax,0xa
c001467b:	75 09                	jne    c0014686 <CPU::detectFeatures()+0x8f8>
c001467d:	50                   	push   eax
c001467e:	50                   	push   eax
c001467f:	68 68 13 02 c0       	push   0xc0021368
c0014684:	eb 5b                	jmp    c00146e1 <CPU::detectFeatures()+0x953>
c0014686:	83 f8 0b             	cmp    eax,0xb
c0014689:	75 09                	jne    c0014694 <CPU::detectFeatures()+0x906>
c001468b:	50                   	push   eax
c001468c:	50                   	push   eax
c001468d:	68 70 13 02 c0       	push   0xc0021370
c0014692:	eb 4d                	jmp    c00146e1 <CPU::detectFeatures()+0x953>
c0014694:	83 f8 08             	cmp    eax,0x8
c0014697:	75 09                	jne    c00146a2 <CPU::detectFeatures()+0x914>
c0014699:	50                   	push   eax
c001469a:	50                   	push   eax
c001469b:	68 79 13 02 c0       	push   0xc0021379
c00146a0:	eb 3f                	jmp    c00146e1 <CPU::detectFeatures()+0x953>
c00146a2:	83 f8 09             	cmp    eax,0x9
c00146a5:	75 09                	jne    c00146b0 <CPU::detectFeatures()+0x922>
c00146a7:	50                   	push   eax
c00146a8:	50                   	push   eax
c00146a9:	68 81 13 02 c0       	push   0xc0021381
c00146ae:	eb 31                	jmp    c00146e1 <CPU::detectFeatures()+0x953>
c00146b0:	83 f8 05             	cmp    eax,0x5
c00146b3:	75 09                	jne    c00146be <CPU::detectFeatures()+0x930>
c00146b5:	50                   	push   eax
c00146b6:	50                   	push   eax
c00146b7:	68 89 13 02 c0       	push   0xc0021389
c00146bc:	eb 23                	jmp    c00146e1 <CPU::detectFeatures()+0x953>
c00146be:	83 f8 0c             	cmp    eax,0xc
c00146c1:	75 09                	jne    c00146cc <CPU::detectFeatures()+0x93e>
c00146c3:	55                   	push   ebp
c00146c4:	55                   	push   ebp
c00146c5:	68 97 13 02 c0       	push   0xc0021397
c00146ca:	eb 15                	jmp    c00146e1 <CPU::detectFeatures()+0x953>
c00146cc:	83 f8 0d             	cmp    eax,0xd
c00146cf:	75 09                	jne    c00146da <CPU::detectFeatures()+0x94c>
c00146d1:	57                   	push   edi
c00146d2:	57                   	push   edi
c00146d3:	68 a2 13 02 c0       	push   0xc00213a2
c00146d8:	eb 07                	jmp    c00146e1 <CPU::detectFeatures()+0x953>
c00146da:	56                   	push   esi
c00146db:	56                   	push   esi
c00146dc:	68 b6 13 02 c0       	push   0xc00213b6
c00146e1:	53                   	push   ebx
c00146e2:	e8 61 bc ff ff       	call   c0010348 <Device::setName(char const*)>
c00146e7:	83 c4 10             	add    esp,0x10
c00146ea:	e9 82 00 00 00       	jmp    c0014771 <CPU::detectFeatures()+0x9e3>
c00146ef:	51                   	push   ecx
c00146f0:	51                   	push   ecx
c00146f1:	68 02 12 02 c0       	push   0xc0021202
c00146f6:	57                   	push   edi
c00146f7:	e8 ab bf fe ff       	call   c00006a7 <strcpy>
c00146fc:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0014706:	e8 74 ba fe ff       	call   c000017f <is486>
c001470b:	83 c4 10             	add    esp,0x10
c001470e:	85 c0                	test   eax,eax
c0014710:	74 2d                	je     c001473f <CPU::detectFeatures()+0x9b1>
c0014712:	52                   	push   edx
c0014713:	52                   	push   edx
c0014714:	68 c2 13 02 c0       	push   0xc00213c2
c0014719:	53                   	push   ebx
c001471a:	e8 29 bc ff ff       	call   c0010348 <Device::setName(char const*)>
c001471f:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0014726:	e8 dd a2 00 00       	call   c001ea08 <CPU::readCR0()>
c001472b:	83 c4 10             	add    esp,0x10
c001472e:	83 e0 14             	and    eax,0x14
c0014731:	83 f8 04             	cmp    eax,0x4
c0014734:	75 1f                	jne    c0014755 <CPU::detectFeatures()+0x9c7>
c0014736:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c001473d:	eb 32                	jmp    c0014771 <CPU::detectFeatures()+0x9e3>
c001473f:	50                   	push   eax
c0014740:	50                   	push   eax
c0014741:	68 cd 13 02 c0       	push   0xc00213cd
c0014746:	53                   	push   ebx
c0014747:	e8 fc bb ff ff       	call   c0010348 <Device::setName(char const*)>
c001474c:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c0014753:	eb d1                	jmp    c0014726 <CPU::detectFeatures()+0x998>
c0014755:	e8 00 ba fe ff       	call   c000015a <hasLegacyFPU>
c001475a:	83 e0 01             	and    eax,0x1
c001475d:	8d 14 00             	lea    edx,[eax+eax*1]
c0014760:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0014766:	83 e0 fd             	and    eax,0xfffffffd
c0014769:	09 d0                	or     eax,edx
c001476b:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0014771:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0014778:	83 c4 4c             	add    esp,0x4c
c001477b:	5b                   	pop    ebx
c001477c:	5e                   	pop    esi
c001477d:	5f                   	pop    edi
c001477e:	5d                   	pop    ebp
c001477f:	c3                   	ret    

c0014780 <CPU::setupSMEP()>:
c0014780:	83 ec 0c             	sub    esp,0xc
c0014783:	e8 4a a5 00 00       	call   c001ecd2 <CPU::readCR4()>
c0014788:	0d 00 00 10 00       	or     eax,0x100000
c001478d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014791:	83 c4 0c             	add    esp,0xc
c0014794:	e9 54 a5 00 00       	jmp    c001eced <CPU::writeCR4(unsigned long)>
c0014799:	90                   	nop

c001479a <CPU::setupUMIP()>:
c001479a:	83 ec 0c             	sub    esp,0xc
c001479d:	e8 30 a5 00 00       	call   c001ecd2 <CPU::readCR4()>
c00147a2:	80 cc 08             	or     ah,0x8
c00147a5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00147a9:	83 c4 0c             	add    esp,0xc
c00147ac:	e9 3c a5 00 00       	jmp    c001eced <CPU::writeCR4(unsigned long)>
c00147b1:	90                   	nop

c00147b2 <CPU::setupTSC()>:
c00147b2:	83 ec 0c             	sub    esp,0xc
c00147b5:	e8 18 a5 00 00       	call   c001ecd2 <CPU::readCR4()>
c00147ba:	83 c8 04             	or     eax,0x4
c00147bd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00147c1:	83 c4 0c             	add    esp,0xc
c00147c4:	e9 24 a5 00 00       	jmp    c001eced <CPU::writeCR4(unsigned long)>
c00147c9:	90                   	nop

c00147ca <CPU::setupLargePages()>:
c00147ca:	83 ec 0c             	sub    esp,0xc
c00147cd:	e8 00 a5 00 00       	call   c001ecd2 <CPU::readCR4()>
c00147d2:	83 c8 10             	or     eax,0x10
c00147d5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00147d9:	83 c4 0c             	add    esp,0xc
c00147dc:	e9 0c a5 00 00       	jmp    c001eced <CPU::writeCR4(unsigned long)>
c00147e1:	90                   	nop

c00147e2 <CPU::setupPAT()>:
c00147e2:	a1 08 34 02 c0       	mov    eax,ds:0xc0023408
c00147e7:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c00147ee:	74 2c                	je     c001481c <CPU::setupPAT()+0x3a>
c00147f0:	53                   	push   ebx
c00147f1:	83 ec 10             	sub    esp,0x10
c00147f4:	68 77 02 00 00       	push   0x277
c00147f9:	50                   	push   eax
c00147fa:	e8 c7 69 ff ff       	call   c000b1c6 <Computer::rdmsr(unsigned int)>
c00147ff:	83 e2 f8             	and    edx,0xfffffff8
c0014802:	83 ca 01             	or     edx,0x1
c0014805:	52                   	push   edx
c0014806:	50                   	push   eax
c0014807:	68 77 02 00 00       	push   0x277
c001480c:	ff 35 08 34 02 c0    	push   DWORD PTR ds:0xc0023408
c0014812:	e8 db 69 ff ff       	call   c000b1f2 <Computer::wrmsr(unsigned int, unsigned long long)>
c0014817:	83 c4 28             	add    esp,0x28
c001481a:	5b                   	pop    ebx
c001481b:	c3                   	ret    
c001481c:	c3                   	ret    
c001481d:	90                   	nop

c001481e <CPU::setupMTRR()>:
c001481e:	c3                   	ret    
c001481f:	90                   	nop

c0014820 <CPU::setupGlobalPages()>:
c0014820:	83 ec 0c             	sub    esp,0xc
c0014823:	e8 aa a4 00 00       	call   c001ecd2 <CPU::readCR4()>
c0014828:	0c 80                	or     al,0x80
c001482a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001482e:	83 c4 0c             	add    esp,0xc
c0014831:	e9 b7 a4 00 00       	jmp    c001eced <CPU::writeCR4(unsigned long)>

c0014836 <CPU::allowUsermodeDataAccess()>:
c0014836:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001483a:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0014841:	74 03                	je     c0014846 <CPU::allowUsermodeDataAccess()+0x10>
c0014843:	0f 01 cb             	stac   
c0014846:	c3                   	ret    
c0014847:	90                   	nop

c0014848 <CPU::prohibitUsermodeDataAccess()>:
c0014848:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001484c:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0014853:	74 03                	je     c0014858 <CPU::prohibitUsermodeDataAccess()+0x10>
c0014855:	0f 01 ca             	clac   
c0014858:	c3                   	ret    
c0014859:	90                   	nop

c001485a <CPU::setupSMAP()>:
c001485a:	53                   	push   ebx
c001485b:	83 ec 08             	sub    esp,0x8
c001485e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014862:	e8 6b a4 00 00       	call   c001ecd2 <CPU::readCR4()>
c0014867:	83 ec 0c             	sub    esp,0xc
c001486a:	0d 00 00 20 00       	or     eax,0x200000
c001486f:	50                   	push   eax
c0014870:	e8 78 a4 00 00       	call   c001eced <CPU::writeCR4(unsigned long)>
c0014875:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0014879:	83 c4 18             	add    esp,0x18
c001487c:	5b                   	pop    ebx
c001487d:	eb c9                	jmp    c0014848 <CPU::prohibitUsermodeDataAccess()>
c001487f:	90                   	nop

c0014880 <CPU::setupFeatures()>:
c0014880:	53                   	push   ebx
c0014881:	83 ec 08             	sub    esp,0x8
c0014884:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014888:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c001488f:	74 0c                	je     c001489d <CPU::setupFeatures()+0x1d>
c0014891:	83 ec 0c             	sub    esp,0xc
c0014894:	53                   	push   ebx
c0014895:	e8 e6 fe ff ff       	call   c0014780 <CPU::setupSMEP()>
c001489a:	83 c4 10             	add    esp,0x10
c001489d:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c00148a4:	74 0c                	je     c00148b2 <CPU::setupFeatures()+0x32>
c00148a6:	83 ec 0c             	sub    esp,0xc
c00148a9:	53                   	push   ebx
c00148aa:	e8 ab ff ff ff       	call   c001485a <CPU::setupSMAP()>
c00148af:	83 c4 10             	add    esp,0x10
c00148b2:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c00148b9:	74 0c                	je     c00148c7 <CPU::setupFeatures()+0x47>
c00148bb:	83 ec 0c             	sub    esp,0xc
c00148be:	53                   	push   ebx
c00148bf:	e8 d6 fe ff ff       	call   c001479a <CPU::setupUMIP()>
c00148c4:	83 c4 10             	add    esp,0x10
c00148c7:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c00148ce:	74 0c                	je     c00148dc <CPU::setupFeatures()+0x5c>
c00148d0:	83 ec 0c             	sub    esp,0xc
c00148d3:	53                   	push   ebx
c00148d4:	e8 d9 fe ff ff       	call   c00147b2 <CPU::setupTSC()>
c00148d9:	83 c4 10             	add    esp,0x10
c00148dc:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c00148e3:	74 0c                	je     c00148f1 <CPU::setupFeatures()+0x71>
c00148e5:	83 ec 0c             	sub    esp,0xc
c00148e8:	53                   	push   ebx
c00148e9:	e8 dc fe ff ff       	call   c00147ca <CPU::setupLargePages()>
c00148ee:	83 c4 10             	add    esp,0x10
c00148f1:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c00148f8:	74 0c                	je     c0014906 <CPU::setupFeatures()+0x86>
c00148fa:	83 ec 0c             	sub    esp,0xc
c00148fd:	53                   	push   ebx
c00148fe:	e8 1d ff ff ff       	call   c0014820 <CPU::setupGlobalPages()>
c0014903:	83 c4 10             	add    esp,0x10
c0014906:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c001490d:	74 0d                	je     c001491c <CPU::setupFeatures()+0x9c>
c001490f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0014913:	83 c4 08             	add    esp,0x8
c0014916:	5b                   	pop    ebx
c0014917:	e9 c6 fe ff ff       	jmp    c00147e2 <CPU::setupPAT()>
c001491c:	83 c4 08             	add    esp,0x8
c001491f:	5b                   	pop    ebx
c0014920:	c3                   	ret    
c0014921:	90                   	nop

c0014922 <CPU::open(int, int, void*)>:
c0014922:	57                   	push   edi
c0014923:	56                   	push   esi
c0014924:	53                   	push   ebx
c0014925:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014929:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001492d:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0014933:	83 ec 0c             	sub    esp,0xc
c0014936:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c001493c:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0014942:	50                   	push   eax
c0014943:	e8 62 6b ff ff       	call   c000b4aa <GDT::setup()>
c0014948:	83 c4 0c             	add    esp,0xc
c001494b:	6a 00                	push   0x0
c001494d:	68 ef be ad de       	push   0xdeadbeef
c0014952:	57                   	push   edi
c0014953:	e8 ba 8d ff ff       	call   c000d712 <TSS::setup(unsigned long, unsigned long)>
c0014958:	89 3c 24             	mov    DWORD PTR [esp],edi
c001495b:	e8 92 8d ff ff       	call   c000d6f2 <TSS::flush()>
c0014960:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0014966:	89 04 24             	mov    DWORD PTR [esp],eax
c0014969:	e8 96 6d ff ff       	call   c000b704 <IDT::setup()>
c001496e:	c7 04 24 00 04 00 00 	mov    DWORD PTR [esp],0x400
c0014975:	e8 6a a3 00 00       	call   c001ece4 <CPU::writeDR7(unsigned long)>
c001497a:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0014984:	e8 3f 78 ff ff       	call   c000c1c8 <Phys::allocatePage()>
c0014989:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001498f:	89 30                	mov    DWORD PTR [eax],esi
c0014991:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0014997:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001499a:	58                   	pop    eax
c001499b:	5a                   	pop    edx
c001499c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00149a2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00149a6:	e8 81 9d ff ff       	call   c000e72c <VAS::setCPUSpecific(unsigned long)>
c00149ab:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00149ae:	e8 db f3 ff ff       	call   c0013d8e <CPU::detectFeatures()>
c00149b3:	e8 9a c7 ff ff       	call   c0011152 <setupInterruptController()>
c00149b8:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c00149be:	a1 20 34 02 c0       	mov    eax,ds:0xc0023420
c00149c3:	83 e0 10             	and    eax,0x10
c00149c6:	83 f8 01             	cmp    eax,0x1
c00149c9:	19 c0                	sbb    eax,eax
c00149cb:	83 e0 46             	and    eax,0x46
c00149ce:	83 c0 1e             	add    eax,0x1e
c00149d1:	89 04 24             	mov    DWORD PTR [esp],eax
c00149d4:	e8 61 d9 ff ff       	call   c001233a <setupTimer(int)>
c00149d9:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c00149df:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00149e2:	e8 99 fe ff ff       	call   c0014880 <CPU::setupFeatures()>
c00149e7:	83 c4 10             	add    esp,0x10
c00149ea:	31 c0                	xor    eax,eax
c00149ec:	5b                   	pop    ebx
c00149ed:	5e                   	pop    esi
c00149ee:	5f                   	pop    edi
c00149ef:	c3                   	ret    

c00149f0 <Krnl::panic(char const*)>:
c00149f0:	55                   	push   ebp
c00149f1:	89 e5                	mov    ebp,esp
c00149f3:	53                   	push   ebx
c00149f4:	83 ec 0c             	sub    esp,0xc
c00149f7:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00149fa:	fa                   	cli    
c00149fb:	c6 05 54 3e 02 c0 01 	mov    BYTE PTR ds:0xc0023e54,0x1
c0014a02:	53                   	push   ebx
c0014a03:	c6 05 40 28 02 c0 00 	mov    BYTE PTR ds:0xc0022840,0x0
c0014a0a:	68 04 14 02 c0       	push   0xc0021404
c0014a0f:	e8 47 a3 ff ff       	call   c000ed5b <Dbg::kprintf(char const*, ...)>
c0014a14:	58                   	pop    eax
c0014a15:	a1 54 48 02 c0       	mov    eax,ds:0xc0024854
c0014a1a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a20:	e8 2e 85 ff ff       	call   c000cf53 <setActiveTerminal(VgaText*)>
c0014a25:	83 c4 0c             	add    esp,0xc
c0014a28:	a1 54 48 02 c0       	mov    eax,ds:0xc0024854
c0014a2d:	6a 01                	push   0x1
c0014a2f:	6a 0f                	push   0xf
c0014a31:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a37:	e8 56 7f ff ff       	call   c000c992 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0014a3c:	58                   	pop    eax
c0014a3d:	a1 54 48 02 c0       	mov    eax,ds:0xc0024854
c0014a42:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a48:	e8 a7 87 ff ff       	call   c000d1f4 <VgaText::clearScreen()>
c0014a4d:	58                   	pop    eax
c0014a4e:	a1 54 48 02 c0       	mov    eax,ds:0xc0024854
c0014a53:	5a                   	pop    edx
c0014a54:	68 1d 14 02 c0       	push   0xc002141d
c0014a59:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a5f:	e8 0e 89 ff ff       	call   c000d372 <VgaText::puts(char const*)>
c0014a64:	59                   	pop    ecx
c0014a65:	58                   	pop    eax
c0014a66:	a1 54 48 02 c0       	mov    eax,ds:0xc0024854
c0014a6b:	68 bc 14 02 c0       	push   0xc00214bc
c0014a70:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a76:	e8 f7 88 ff ff       	call   c000d372 <VgaText::puts(char const*)>
c0014a7b:	58                   	pop    eax
c0014a7c:	a1 54 48 02 c0       	mov    eax,ds:0xc0024854
c0014a81:	5a                   	pop    edx
c0014a82:	68 39 14 02 c0       	push   0xc0021439
c0014a87:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a8d:	e8 e0 88 ff ff       	call   c000d372 <VgaText::puts(char const*)>
c0014a92:	59                   	pop    ecx
c0014a93:	58                   	pop    eax
c0014a94:	a1 54 48 02 c0       	mov    eax,ds:0xc0024854
c0014a99:	53                   	push   ebx
c0014a9a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014aa0:	e8 cd 88 ff ff       	call   c000d372 <VgaText::puts(char const*)>
c0014aa5:	58                   	pop    eax
c0014aa6:	a1 54 48 02 c0       	mov    eax,ds:0xc0024854
c0014aab:	5a                   	pop    edx
c0014aac:	68 59 14 02 c0       	push   0xc0021459
c0014ab1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ab7:	e8 b6 88 ff ff       	call   c000d372 <VgaText::puts(char const*)>
c0014abc:	59                   	pop    ecx
c0014abd:	a1 54 48 02 c0       	mov    eax,ds:0xc0024854
c0014ac2:	5b                   	pop    ebx
c0014ac3:	68 f8 14 02 c0       	push   0xc00214f8
c0014ac8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ace:	e8 9f 88 ff ff       	call   c000d372 <VgaText::puts(char const*)>
c0014ad3:	58                   	pop    eax
c0014ad4:	a1 54 48 02 c0       	mov    eax,ds:0xc0024854
c0014ad9:	5a                   	pop    edx
c0014ada:	68 39 14 02 c0       	push   0xc0021439
c0014adf:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ae5:	e8 88 88 ff ff       	call   c000d372 <VgaText::puts(char const*)>
c0014aea:	59                   	pop    ecx
c0014aeb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014af0:	5b                   	pop    ebx
c0014af1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014af4:	83 c0 0c             	add    eax,0xc
c0014af7:	50                   	push   eax
c0014af8:	a1 54 48 02 c0       	mov    eax,ds:0xc0024854
c0014afd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b03:	e8 6a 88 ff ff       	call   c000d372 <VgaText::puts(char const*)>
c0014b08:	58                   	pop    eax
c0014b09:	a1 54 48 02 c0       	mov    eax,ds:0xc0024854
c0014b0e:	5a                   	pop    edx
c0014b0f:	68 58 14 02 c0       	push   0xc0021458
c0014b14:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b1a:	e8 53 88 ff ff       	call   c000d372 <VgaText::puts(char const*)>
c0014b1f:	59                   	pop    ecx
c0014b20:	a1 54 48 02 c0       	mov    eax,ds:0xc0024854
c0014b25:	5b                   	pop    ebx
c0014b26:	68 24 15 02 c0       	push   0xc0021524
c0014b2b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b31:	e8 3c 88 ff ff       	call   c000d372 <VgaText::puts(char const*)>
c0014b36:	58                   	pop    eax
c0014b37:	a1 54 48 02 c0       	mov    eax,ds:0xc0024854
c0014b3c:	5a                   	pop    edx
c0014b3d:	68 64 15 02 c0       	push   0xc0021564
c0014b42:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b48:	e8 25 88 ff ff       	call   c000d372 <VgaText::puts(char const*)>
c0014b4d:	59                   	pop    ecx
c0014b4e:	a1 54 48 02 c0       	mov    eax,ds:0xc0024854
c0014b53:	5b                   	pop    ebx
c0014b54:	68 44 14 02 c0       	push   0xc0021444
c0014b59:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b5f:	e8 0e 88 ff ff       	call   c000d372 <VgaText::puts(char const*)>
c0014b64:	a1 50 3e 02 c0       	mov    eax,ds:0xc0023e50
c0014b69:	83 c4 10             	add    esp,0x10
c0014b6c:	85 c0                	test   eax,eax
c0014b6e:	74 02                	je     c0014b72 <Krnl::panic(char const*)+0x182>
c0014b70:	ff d0                	call   eax
c0014b72:	83 ec 08             	sub    esp,0x8
c0014b75:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0014b78:	68 5c 14 02 c0       	push   0xc002145c
c0014b7d:	e8 d9 a1 ff ff       	call   c000ed5b <Dbg::kprintf(char const*, ...)>
c0014b82:	58                   	pop    eax
c0014b83:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014b86:	5a                   	pop    edx
c0014b87:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0014b8a:	68 65 14 02 c0       	push   0xc0021465
c0014b8f:	e8 c7 a1 ff ff       	call   c000ed5b <Dbg::kprintf(char const*, ...)>
c0014b94:	59                   	pop    ecx
c0014b95:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014b98:	5b                   	pop    ebx
c0014b99:	8b 00                	mov    eax,DWORD PTR [eax]
c0014b9b:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0014b9e:	68 7d 0c 02 c0       	push   0xc0020c7d
c0014ba3:	e8 b3 a1 ff ff       	call   c000ed5b <Dbg::kprintf(char const*, ...)>
c0014ba8:	58                   	pop    eax
c0014ba9:	a1 54 48 02 c0       	mov    eax,ds:0xc0024854
c0014bae:	5a                   	pop    edx
c0014baf:	68 a8 15 02 c0       	push   0xc00215a8
c0014bb4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014bba:	e8 b3 87 ff ff       	call   c000d372 <VgaText::puts(char const*)>
c0014bbf:	59                   	pop    ecx
c0014bc0:	a1 54 48 02 c0       	mov    eax,ds:0xc0024854
c0014bc5:	5b                   	pop    ebx
c0014bc6:	68 6e 14 02 c0       	push   0xc002146e
c0014bcb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014bd1:	e8 9c 87 ff ff       	call   c000d372 <VgaText::puts(char const*)>
c0014bd6:	a1 54 48 02 c0       	mov    eax,ds:0xc0024854
c0014bdb:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0014be1:	e8 22 9e 00 00       	call   c001ea08 <CPU::readCR0()>
c0014be6:	5a                   	pop    edx
c0014be7:	59                   	pop    ecx
c0014be8:	50                   	push   eax
c0014be9:	53                   	push   ebx
c0014bea:	e8 a9 87 ff ff       	call   c000d398 <VgaText::putx(unsigned int)>
c0014bef:	5b                   	pop    ebx
c0014bf0:	58                   	pop    eax
c0014bf1:	a1 54 48 02 c0       	mov    eax,ds:0xc0024854
c0014bf6:	68 78 14 02 c0       	push   0xc0021478
c0014bfb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014c01:	e8 6c 87 ff ff       	call   c000d372 <VgaText::puts(char const*)>
c0014c06:	a1 54 48 02 c0       	mov    eax,ds:0xc0024854
c0014c0b:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0014c11:	e8 e0 a0 00 00       	call   c001ecf6 <CPU::readCR2()>
c0014c16:	5a                   	pop    edx
c0014c17:	59                   	pop    ecx
c0014c18:	50                   	push   eax
c0014c19:	53                   	push   ebx
c0014c1a:	e8 79 87 ff ff       	call   c000d398 <VgaText::putx(unsigned int)>
c0014c1f:	5b                   	pop    ebx
c0014c20:	58                   	pop    eax
c0014c21:	a1 54 48 02 c0       	mov    eax,ds:0xc0024854
c0014c26:	68 82 14 02 c0       	push   0xc0021482
c0014c2b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014c31:	e8 3c 87 ff ff       	call   c000d372 <VgaText::puts(char const*)>
c0014c36:	a1 54 48 02 c0       	mov    eax,ds:0xc0024854
c0014c3b:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0014c41:	e8 4f 9a 00 00       	call   c001e695 <CPU::readCR3()>
c0014c46:	5a                   	pop    edx
c0014c47:	59                   	pop    ecx
c0014c48:	50                   	push   eax
c0014c49:	53                   	push   ebx
c0014c4a:	e8 49 87 ff ff       	call   c000d398 <VgaText::putx(unsigned int)>
c0014c4f:	5b                   	pop    ebx
c0014c50:	58                   	pop    eax
c0014c51:	a1 54 48 02 c0       	mov    eax,ds:0xc0024854
c0014c56:	68 95 14 02 c0       	push   0xc0021495
c0014c5b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014c61:	e8 0c 87 ff ff       	call   c000d372 <VgaText::puts(char const*)>
c0014c66:	a1 54 48 02 c0       	mov    eax,ds:0xc0024854
c0014c6b:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0014c71:	e8 5c a0 00 00       	call   c001ecd2 <CPU::readCR4()>
c0014c76:	5a                   	pop    edx
c0014c77:	59                   	pop    ecx
c0014c78:	50                   	push   eax
c0014c79:	53                   	push   ebx
c0014c7a:	e8 19 87 ff ff       	call   c000d398 <VgaText::putx(unsigned int)>
c0014c7f:	5b                   	pop    ebx
c0014c80:	58                   	pop    eax
c0014c81:	a1 54 48 02 c0       	mov    eax,ds:0xc0024854
c0014c86:	68 9f 14 02 c0       	push   0xc002149f
c0014c8b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014c91:	e8 dc 86 ff ff       	call   c000d372 <VgaText::puts(char const*)>
c0014c96:	5a                   	pop    edx
c0014c97:	a1 54 48 02 c0       	mov    eax,ds:0xc0024854
c0014c9c:	59                   	pop    ecx
c0014c9d:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0014ca3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0014ca6:	50                   	push   eax
c0014ca7:	e8 ec 86 ff ff       	call   c000d398 <VgaText::putx(unsigned int)>
c0014cac:	5b                   	pop    ebx
c0014cad:	58                   	pop    eax
c0014cae:	a1 54 48 02 c0       	mov    eax,ds:0xc0024854
c0014cb3:	68 b6 14 02 c0       	push   0xc00214b6
c0014cb8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014cbe:	e8 af 86 ff ff       	call   c000d372 <VgaText::puts(char const*)>
c0014cc3:	5a                   	pop    edx
c0014cc4:	a1 54 48 02 c0       	mov    eax,ds:0xc0024854
c0014cc9:	59                   	pop    ecx
c0014cca:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0014cd0:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0014cd3:	ff 72 04             	push   DWORD PTR [edx+0x4]
c0014cd6:	50                   	push   eax
c0014cd7:	e8 bc 86 ff ff       	call   c000d398 <VgaText::putx(unsigned int)>
c0014cdc:	5b                   	pop    ebx
c0014cdd:	58                   	pop    eax
c0014cde:	a1 54 48 02 c0       	mov    eax,ds:0xc0024854
c0014ce3:	68 b6 14 02 c0       	push   0xc00214b6
c0014ce8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014cee:	e8 7f 86 ff ff       	call   c000d372 <VgaText::puts(char const*)>
c0014cf3:	59                   	pop    ecx
c0014cf4:	a1 54 48 02 c0       	mov    eax,ds:0xc0024854
c0014cf9:	5b                   	pop    ebx
c0014cfa:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0014d00:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0014d03:	8b 12                	mov    edx,DWORD PTR [edx]
c0014d05:	ff 72 04             	push   DWORD PTR [edx+0x4]
c0014d08:	50                   	push   eax
c0014d09:	e8 8a 86 ff ff       	call   c000d398 <VgaText::putx(unsigned int)>
c0014d0e:	83 c4 10             	add    esp,0x10
c0014d11:	b2 fe                	mov    dl,0xfe
c0014d13:	e4 60                	in     al,0x60
c0014d15:	3c 1c                	cmp    al,0x1c
c0014d17:	74 04                	je     c0014d1d <Krnl::panic(char const*)+0x32d>
c0014d19:	3c 5a                	cmp    al,0x5a
c0014d1b:	75 f6                	jne    c0014d13 <Krnl::panic(char const*)+0x323>
c0014d1d:	e4 64                	in     al,0x64
c0014d1f:	a8 02                	test   al,0x2
c0014d21:	75 fa                	jne    c0014d1d <Krnl::panic(char const*)+0x32d>
c0014d23:	88 d0                	mov    al,dl
c0014d25:	e6 64                	out    0x64,al
c0014d27:	fa                   	cli    
c0014d28:	f4                   	hlt    
c0014d29:	eb e8                	jmp    c0014d13 <Krnl::panic(char const*)+0x323>

c0014d2b <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0014d2b:	55                   	push   ebp
c0014d2c:	57                   	push   edi
c0014d2d:	56                   	push   esi
c0014d2e:	53                   	push   ebx
c0014d2f:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0014d35:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0014d3c:	8a 1e                	mov    bl,BYTE PTR [esi]
c0014d3e:	8d 6e 01             	lea    ebp,[esi+0x1]
c0014d41:	80 fb 40             	cmp    bl,0x40
c0014d44:	75 1b                	jne    c0014d61 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c0014d46:	8a 16                	mov    dl,BYTE PTR [esi]
c0014d48:	84 d2                	test   dl,dl
c0014d4a:	0f 84 f1 00 00 00    	je     c0014e41 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0014d50:	8d 46 01             	lea    eax,[esi+0x1]
c0014d53:	80 fa 3a             	cmp    dl,0x3a
c0014d56:	74 04                	je     c0014d5c <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c0014d58:	89 c6                	mov    esi,eax
c0014d5a:	eb ea                	jmp    c0014d46 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c0014d5c:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0014d5f:	89 c6                	mov    esi,eax
c0014d61:	50                   	push   eax
c0014d62:	6a 40                	push   0x40
c0014d64:	6a 00                	push   0x0
c0014d66:	8d 44 24 24          	lea    eax,[esp+0x24]
c0014d6a:	50                   	push   eax
c0014d6b:	e8 98 b8 fe ff       	call   c0000608 <memset>
c0014d70:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0014d77:	31 c0                	xor    eax,eax
c0014d79:	83 c4 10             	add    esp,0x10
c0014d7c:	8a 0f                	mov    cl,BYTE PTR [edi]
c0014d7e:	84 c9                	test   cl,cl
c0014d80:	0f 84 bb 00 00 00    	je     c0014e41 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0014d86:	3d c7 00 00 00       	cmp    eax,0xc7
c0014d8b:	0f 8f b0 00 00 00    	jg     c0014e41 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0014d91:	80 f9 0a             	cmp    cl,0xa
c0014d94:	0f 85 98 00 00 00    	jne    c0014e32 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c0014d9a:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0014d9f:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c0014da3:	a8 df                	test   al,0xdf
c0014da5:	0f 94 c1             	sete   cl
c0014da8:	3c 23                	cmp    al,0x23
c0014daa:	0f 94 c2             	sete   dl
c0014dad:	08 d1                	or     cl,dl
c0014daf:	75 4a                	jne    c0014dfb <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0014db1:	8d 50 f7             	lea    edx,[eax-0x9]
c0014db4:	80 fa 01             	cmp    dl,0x1
c0014db7:	76 42                	jbe    c0014dfb <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0014db9:	3c 5b                	cmp    al,0x5b
c0014dbb:	75 42                	jne    c0014dff <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c0014dbd:	80 fb 40             	cmp    bl,0x40
c0014dc0:	75 39                	jne    c0014dfb <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0014dc2:	83 ec 0c             	sub    esp,0xc
c0014dc5:	8d 54 24 65          	lea    edx,[esp+0x65]
c0014dc9:	52                   	push   edx
c0014dca:	e8 56 b8 fe ff       	call   c0000625 <strlen>
c0014dcf:	83 c4 10             	add    esp,0x10
c0014dd2:	83 f8 3f             	cmp    eax,0x3f
c0014dd5:	77 6a                	ja     c0014e41 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0014dd7:	50                   	push   eax
c0014dd8:	50                   	push   eax
c0014dd9:	8d 54 24 61          	lea    edx,[esp+0x61]
c0014ddd:	52                   	push   edx
c0014dde:	8d 54 24 24          	lea    edx,[esp+0x24]
c0014de2:	52                   	push   edx
c0014de3:	e8 bf b8 fe ff       	call   c00006a7 <strcpy>
c0014de8:	58                   	pop    eax
c0014de9:	8d 54 24 24          	lea    edx,[esp+0x24]
c0014ded:	52                   	push   edx
c0014dee:	e8 32 b8 fe ff       	call   c0000625 <strlen>
c0014df3:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0014df8:	83 c4 10             	add    esp,0x10
c0014dfb:	31 d2                	xor    edx,edx
c0014dfd:	eb 3a                	jmp    c0014e39 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c0014dff:	80 fb 40             	cmp    bl,0x40
c0014e02:	74 06                	je     c0014e0a <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c0014e04:	8d 44 24 58          	lea    eax,[esp+0x58]
c0014e08:	eb 20                	jmp    c0014e2a <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c0014e0a:	50                   	push   eax
c0014e0b:	50                   	push   eax
c0014e0c:	55                   	push   ebp
c0014e0d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0014e11:	50                   	push   eax
c0014e12:	e8 e1 b8 fe ff       	call   c00006f8 <strcmp>
c0014e17:	83 c4 10             	add    esp,0x10
c0014e1a:	85 c0                	test   eax,eax
c0014e1c:	75 dd                	jne    c0014dfb <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0014e1e:	eb e4                	jmp    c0014e04 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c0014e20:	8d 50 01             	lea    edx,[eax+0x1]
c0014e23:	80 f9 3d             	cmp    cl,0x3d
c0014e26:	74 1d                	je     c0014e45 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c0014e28:	89 d0                	mov    eax,edx
c0014e2a:	8a 08                	mov    cl,BYTE PTR [eax]
c0014e2c:	84 c9                	test   cl,cl
c0014e2e:	75 f0                	jne    c0014e20 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c0014e30:	eb 0f                	jmp    c0014e41 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0014e32:	8d 50 01             	lea    edx,[eax+0x1]
c0014e35:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0014e39:	47                   	inc    edi
c0014e3a:	89 d0                	mov    eax,edx
c0014e3c:	e9 3b ff ff ff       	jmp    c0014d7c <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c0014e41:	31 c0                	xor    eax,eax
c0014e43:	eb 33                	jmp    c0014e78 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c0014e45:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0014e49:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0014e4c:	50                   	push   eax
c0014e4d:	50                   	push   eax
c0014e4e:	8d 44 24 60          	lea    eax,[esp+0x60]
c0014e52:	50                   	push   eax
c0014e53:	56                   	push   esi
c0014e54:	e8 9f b8 fe ff       	call   c00006f8 <strcmp>
c0014e59:	83 c4 10             	add    esp,0x10
c0014e5c:	85 c0                	test   eax,eax
c0014e5e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014e62:	75 97                	jne    c0014dfb <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0014e64:	51                   	push   ecx
c0014e65:	51                   	push   ecx
c0014e66:	52                   	push   edx
c0014e67:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0014e6e:	e8 34 b8 fe ff       	call   c00006a7 <strcpy>
c0014e73:	83 c4 10             	add    esp,0x10
c0014e76:	b0 01                	mov    al,0x1
c0014e78:	81 c4 2c 01 00 00    	add    esp,0x12c
c0014e7e:	5b                   	pop    ebx
c0014e7f:	5e                   	pop    esi
c0014e80:	5f                   	pop    edi
c0014e81:	5d                   	pop    ebp
c0014e82:	c3                   	ret    

c0014e83 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0014e83:	57                   	push   edi
c0014e84:	56                   	push   esi
c0014e85:	53                   	push   ebx
c0014e86:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0014e8c:	8b b4 24 2c 01 00 00 	mov    esi,DWORD PTR [esp+0x12c]
c0014e93:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0014e9a:	53                   	push   ebx
c0014e9b:	e8 85 b7 fe ff       	call   c0000625 <strlen>
c0014ea0:	89 34 24             	mov    DWORD PTR [esp],esi
c0014ea3:	89 c7                	mov    edi,eax
c0014ea5:	e8 7b b7 fe ff       	call   c0000625 <strlen>
c0014eaa:	83 c4 10             	add    esp,0x10
c0014ead:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0014eb1:	31 ff                	xor    edi,edi
c0014eb3:	3d ff 00 00 00       	cmp    eax,0xff
c0014eb8:	0f 87 18 01 00 00    	ja     c0014fd6 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x153>
c0014ebe:	51                   	push   ecx
c0014ebf:	51                   	push   ecx
c0014ec0:	56                   	push   esi
c0014ec1:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0014ec5:	56                   	push   esi
c0014ec6:	e8 dc b7 fe ff       	call   c00006a7 <strcpy>
c0014ecb:	58                   	pop    eax
c0014ecc:	5a                   	pop    edx
c0014ecd:	68 b9 1a 02 c0       	push   0xc0021ab9
c0014ed2:	56                   	push   esi
c0014ed3:	e8 86 b8 fe ff       	call   c000075e <strcat>
c0014ed8:	59                   	pop    ecx
c0014ed9:	58                   	pop    eax
c0014eda:	53                   	push   ebx
c0014edb:	56                   	push   esi
c0014edc:	e8 7d b8 fe ff       	call   c000075e <strcat>
c0014ee1:	58                   	pop    eax
c0014ee2:	5a                   	pop    edx
c0014ee3:	68 ce 15 02 c0       	push   0xc00215ce
c0014ee8:	56                   	push   esi
c0014ee9:	e8 70 b8 fe ff       	call   c000075e <strcat>
c0014eee:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0014ef5:	e8 72 9d ff ff       	call   c000ec6c <operator new(unsigned long)>
c0014efa:	83 c4 0c             	add    esp,0xc
c0014efd:	89 c3                	mov    ebx,eax
c0014eff:	ff 35 54 48 02 c0    	push   DWORD PTR ds:0xc0024854
c0014f05:	56                   	push   esi
c0014f06:	50                   	push   eax
c0014f07:	e8 7e a3 ff ff       	call   c000f28a <File::File(char const*, Process*)>
c0014f0c:	59                   	pop    ecx
c0014f0d:	5e                   	pop    esi
c0014f0e:	6a 01                	push   0x1
c0014f10:	53                   	push   ebx
c0014f11:	e8 d8 a3 ff ff       	call   c000f2ee <File::open(FileOpenMode)>
c0014f16:	83 c4 10             	add    esp,0x10
c0014f19:	85 c0                	test   eax,eax
c0014f1b:	74 08                	je     c0014f25 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa2>
c0014f1d:	83 ec 0c             	sub    esp,0xc
c0014f20:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014f22:	53                   	push   ebx
c0014f23:	eb 2e                	jmp    c0014f53 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xd0>
c0014f25:	52                   	push   edx
c0014f26:	8d 44 24 07          	lea    eax,[esp+0x7]
c0014f2a:	50                   	push   eax
c0014f2b:	8d 44 24 10          	lea    eax,[esp+0x10]
c0014f2f:	50                   	push   eax
c0014f30:	53                   	push   ebx
c0014f31:	e8 64 a6 ff ff       	call   c000f59a <File::stat(unsigned long long*, bool*)>
c0014f36:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014f3a:	83 c4 10             	add    esp,0x10
c0014f3d:	89 c1                	mov    ecx,eax
c0014f3f:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c0014f43:	75 13                	jne    c0014f58 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xd5>
c0014f45:	83 ec 0c             	sub    esp,0xc
c0014f48:	53                   	push   ebx
c0014f49:	e8 fe a3 ff ff       	call   c000f34c <File::close()>
c0014f4e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014f50:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014f53:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014f56:	eb 7b                	jmp    c0014fd3 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x150>
c0014f58:	83 ec 0c             	sub    esp,0xc
c0014f5b:	50                   	push   eax
c0014f5c:	e8 bd 6c ff ff       	call   c000bc1e <malloc>
c0014f61:	89 c6                	mov    esi,eax
c0014f63:	58                   	pop    eax
c0014f64:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014f66:	8d 54 24 10          	lea    edx,[esp+0x10]
c0014f6a:	52                   	push   edx
c0014f6b:	56                   	push   esi
c0014f6c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014f70:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014f74:	53                   	push   ebx
c0014f75:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014f78:	83 c4 20             	add    esp,0x20
c0014f7b:	85 c0                	test   eax,eax
c0014f7d:	75 0a                	jne    c0014f89 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0014f7f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014f83:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0014f87:	74 18                	je     c0014fa1 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x11e>
c0014f89:	83 ec 0c             	sub    esp,0xc
c0014f8c:	31 ff                	xor    edi,edi
c0014f8e:	53                   	push   ebx
c0014f8f:	e8 b8 a3 ff ff       	call   c000f34c <File::close()>
c0014f94:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014f96:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014f99:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014f9c:	83 c4 10             	add    esp,0x10
c0014f9f:	eb 35                	jmp    c0014fd6 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x153>
c0014fa1:	83 ec 0c             	sub    esp,0xc
c0014fa4:	53                   	push   ebx
c0014fa5:	e8 a2 a3 ff ff       	call   c000f34c <File::close()>
c0014faa:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014fac:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014faf:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014fb2:	83 c4 0c             	add    esp,0xc
c0014fb5:	ff b4 24 30 01 00 00 	push   DWORD PTR [esp+0x130]
c0014fbc:	ff b4 24 30 01 00 00 	push   DWORD PTR [esp+0x130]
c0014fc3:	56                   	push   esi
c0014fc4:	e8 62 fd ff ff       	call   c0014d2b <Reg::findLineFromLoadedData(char*, char*, char*)>
c0014fc9:	89 34 24             	mov    DWORD PTR [esp],esi
c0014fcc:	89 c7                	mov    edi,eax
c0014fce:	e8 5b 6c ff ff       	call   c000bc2e <free>
c0014fd3:	83 c4 10             	add    esp,0x10
c0014fd6:	81 c4 10 01 00 00    	add    esp,0x110
c0014fdc:	89 f8                	mov    eax,edi
c0014fde:	5b                   	pop    ebx
c0014fdf:	5e                   	pop    esi
c0014fe0:	5f                   	pop    edi
c0014fe1:	c3                   	ret    

c0014fe2 <Reg::getLine(char*, char*, char*)>:
c0014fe2:	57                   	push   edi
c0014fe3:	56                   	push   esi
c0014fe4:	53                   	push   ebx
c0014fe5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014fe9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014fed:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0014ff1:	57                   	push   edi
c0014ff2:	56                   	push   esi
c0014ff3:	53                   	push   ebx
c0014ff4:	68 d3 15 02 c0       	push   0xc00215d3
c0014ff9:	e8 85 fe ff ff       	call   c0014e83 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0014ffe:	83 c4 10             	add    esp,0x10
c0015001:	84 c0                	test   al,al
c0015003:	75 10                	jne    c0015015 <Reg::getLine(char*, char*, char*)+0x33>
c0015005:	57                   	push   edi
c0015006:	56                   	push   esi
c0015007:	53                   	push   ebx
c0015008:	68 f8 15 02 c0       	push   0xc00215f8
c001500d:	e8 71 fe ff ff       	call   c0014e83 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0015012:	83 c4 10             	add    esp,0x10
c0015015:	5b                   	pop    ebx
c0015016:	5e                   	pop    esi
c0015017:	5f                   	pop    edi
c0015018:	c3                   	ret    

c0015019 <Reg::readInt(char*, char*, int*)>:
c0015019:	55                   	push   ebp
c001501a:	57                   	push   edi
c001501b:	56                   	push   esi
c001501c:	53                   	push   ebx
c001501d:	81 ec f0 00 00 00    	sub    esp,0xf0
c0015023:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0015027:	57                   	push   edi
c0015028:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001502f:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0015036:	e8 a7 ff ff ff       	call   c0014fe2 <Reg::getLine(char*, char*, char*)>
c001503b:	83 c4 10             	add    esp,0x10
c001503e:	84 c0                	test   al,al
c0015040:	0f 84 b3 00 00 00    	je     c00150f9 <Reg::readInt(char*, char*, int*)+0xe0>
c0015046:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001504a:	80 fa 2b             	cmp    dl,0x2b
c001504d:	74 0c                	je     c001505b <Reg::readInt(char*, char*, int*)+0x42>
c001504f:	80 fa 2d             	cmp    dl,0x2d
c0015052:	75 0e                	jne    c0015062 <Reg::readInt(char*, char*, int*)+0x49>
c0015054:	ba 01 00 00 00       	mov    edx,0x1
c0015059:	eb 0b                	jmp    c0015066 <Reg::readInt(char*, char*, int*)+0x4d>
c001505b:	ba 01 00 00 00       	mov    edx,0x1
c0015060:	eb 02                	jmp    c0015064 <Reg::readInt(char*, char*, int*)+0x4b>
c0015062:	31 d2                	xor    edx,edx
c0015064:	31 c0                	xor    eax,eax
c0015066:	be 0a 00 00 00       	mov    esi,0xa
c001506b:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0015070:	75 20                	jne    c0015092 <Reg::readInt(char*, char*, int*)+0x79>
c0015072:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c0015076:	80 f9 78             	cmp    cl,0x78
c0015079:	75 0a                	jne    c0015085 <Reg::readInt(char*, char*, int*)+0x6c>
c001507b:	83 c2 02             	add    edx,0x2
c001507e:	be 10 00 00 00       	mov    esi,0x10
c0015083:	eb 0d                	jmp    c0015092 <Reg::readInt(char*, char*, int*)+0x79>
c0015085:	80 f9 62             	cmp    cl,0x62
c0015088:	75 08                	jne    c0015092 <Reg::readInt(char*, char*, int*)+0x79>
c001508a:	83 c2 02             	add    edx,0x2
c001508d:	be 02 00 00 00       	mov    esi,0x2
c0015092:	01 d7                	add    edi,edx
c0015094:	31 d2                	xor    edx,edx
c0015096:	8a 1f                	mov    bl,BYTE PTR [edi]
c0015098:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001509c:	80 fb 0d             	cmp    bl,0xd
c001509f:	0f 94 c3             	sete   bl
c00150a2:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00150a7:	0f 94 c1             	sete   cl
c00150aa:	08 cb                	or     bl,cl
c00150ac:	75 3a                	jne    c00150e8 <Reg::readInt(char*, char*, int*)+0xcf>
c00150ae:	0f af d6             	imul   edx,esi
c00150b1:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c00150b6:	83 fe 10             	cmp    esi,0x10
c00150b9:	75 26                	jne    c00150e1 <Reg::readInt(char*, char*, int*)+0xc8>
c00150bb:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00150bf:	8d 69 bf             	lea    ebp,[ecx-0x41]
c00150c2:	89 e9                	mov    ecx,ebp
c00150c4:	80 f9 05             	cmp    cl,0x5
c00150c7:	77 06                	ja     c00150cf <Reg::readInt(char*, char*, int*)+0xb6>
c00150c9:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c00150cd:	eb 16                	jmp    c00150e5 <Reg::readInt(char*, char*, int*)+0xcc>
c00150cf:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00150d3:	83 e9 61             	sub    ecx,0x61
c00150d6:	80 f9 05             	cmp    cl,0x5
c00150d9:	77 06                	ja     c00150e1 <Reg::readInt(char*, char*, int*)+0xc8>
c00150db:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c00150df:	eb 04                	jmp    c00150e5 <Reg::readInt(char*, char*, int*)+0xcc>
c00150e1:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c00150e5:	47                   	inc    edi
c00150e6:	eb ae                	jmp    c0015096 <Reg::readInt(char*, char*, int*)+0x7d>
c00150e8:	84 c0                	test   al,al
c00150ea:	74 02                	je     c00150ee <Reg::readInt(char*, char*, int*)+0xd5>
c00150ec:	f7 da                	neg    edx
c00150ee:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c00150f5:	89 10                	mov    DWORD PTR [eax],edx
c00150f7:	88 d8                	mov    al,bl
c00150f9:	81 c4 ec 00 00 00    	add    esp,0xec
c00150ff:	5b                   	pop    ebx
c0015100:	5e                   	pop    esi
c0015101:	5f                   	pop    edi
c0015102:	5d                   	pop    ebp
c0015103:	c3                   	ret    

c0015104 <Reg::readString(char*, char*, char*, int)>:
c0015104:	57                   	push   edi
c0015105:	56                   	push   esi
c0015106:	53                   	push   ebx
c0015107:	81 ec d4 00 00 00    	sub    esp,0xd4
c001510d:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0015114:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0015118:	57                   	push   edi
c0015119:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0015120:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0015127:	e8 b6 fe ff ff       	call   c0014fe2 <Reg::getLine(char*, char*, char*)>
c001512c:	83 c4 10             	add    esp,0x10
c001512f:	89 c6                	mov    esi,eax
c0015131:	84 c0                	test   al,al
c0015133:	74 44                	je     c0015179 <Reg::readString(char*, char*, char*, int)+0x75>
c0015135:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001513c:	31 c0                	xor    eax,eax
c001513e:	4a                   	dec    edx
c001513f:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0015142:	84 c9                	test   cl,cl
c0015144:	74 0f                	je     c0015155 <Reg::readString(char*, char*, char*, int)+0x51>
c0015146:	39 c2                	cmp    edx,eax
c0015148:	7e 0b                	jle    c0015155 <Reg::readString(char*, char*, char*, int)+0x51>
c001514a:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001514d:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0015152:	40                   	inc    eax
c0015153:	eb ea                	jmp    c001513f <Reg::readString(char*, char*, char*, int)+0x3b>
c0015155:	83 ec 0c             	sub    esp,0xc
c0015158:	53                   	push   ebx
c0015159:	e8 c7 b4 fe ff       	call   c0000625 <strlen>
c001515e:	83 c4 10             	add    esp,0x10
c0015161:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0015166:	75 11                	jne    c0015179 <Reg::readString(char*, char*, char*, int)+0x75>
c0015168:	83 ec 0c             	sub    esp,0xc
c001516b:	53                   	push   ebx
c001516c:	e8 b4 b4 fe ff       	call   c0000625 <strlen>
c0015171:	83 c4 10             	add    esp,0x10
c0015174:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0015179:	81 c4 d0 00 00 00    	add    esp,0xd0
c001517f:	89 f0                	mov    eax,esi
c0015181:	5b                   	pop    ebx
c0015182:	5e                   	pop    esi
c0015183:	5f                   	pop    edi
c0015184:	c3                   	ret    

c0015185 <Reg::readBool(char*, char*, bool*)>:
c0015185:	83 ec 20             	sub    esp,0x20
c0015188:	8d 44 24 10          	lea    eax,[esp+0x10]
c001518c:	50                   	push   eax
c001518d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015191:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015195:	e8 7f fe ff ff       	call   c0015019 <Reg::readInt(char*, char*, int*)>
c001519a:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001519f:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00151a3:	0f 95 02             	setne  BYTE PTR [edx]
c00151a6:	83 c4 2c             	add    esp,0x2c
c00151a9:	c3                   	ret    

c00151aa <Reg::readBoolWithDefault(char*, char*, bool)>:
c00151aa:	53                   	push   ebx
c00151ab:	83 ec 1c             	sub    esp,0x1c
c00151ae:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c00151b2:	8d 44 24 13          	lea    eax,[esp+0x13]
c00151b6:	50                   	push   eax
c00151b7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00151bb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00151bf:	e8 c1 ff ff ff       	call   c0015185 <Reg::readBool(char*, char*, bool*)>
c00151c4:	83 c4 10             	add    esp,0x10
c00151c7:	84 c0                	test   al,al
c00151c9:	74 04                	je     c00151cf <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c00151cb:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c00151cf:	88 d8                	mov    al,bl
c00151d1:	83 c4 18             	add    esp,0x18
c00151d4:	5b                   	pop    ebx
c00151d5:	c3                   	ret    

c00151d6 <Reg::readIntWithDefault(char*, char*, int)>:
c00151d6:	53                   	push   ebx
c00151d7:	83 ec 1c             	sub    esp,0x1c
c00151da:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00151de:	8d 44 24 10          	lea    eax,[esp+0x10]
c00151e2:	50                   	push   eax
c00151e3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00151e7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00151eb:	e8 29 fe ff ff       	call   c0015019 <Reg::readInt(char*, char*, int*)>
c00151f0:	83 c4 10             	add    esp,0x10
c00151f3:	84 c0                	test   al,al
c00151f5:	74 04                	je     c00151fb <Reg::readIntWithDefault(char*, char*, int)+0x25>
c00151f7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00151fb:	89 d8                	mov    eax,ebx
c00151fd:	83 c4 18             	add    esp,0x18
c0015200:	5b                   	pop    ebx
c0015201:	c3                   	ret    

c0015202 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0015202:	56                   	push   esi
c0015203:	53                   	push   ebx
c0015204:	51                   	push   ecx
c0015205:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0015209:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001520d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015211:	56                   	push   esi
c0015212:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015216:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001521a:	e8 e5 fe ff ff       	call   c0015104 <Reg::readString(char*, char*, char*, int)>
c001521f:	83 c4 10             	add    esp,0x10
c0015222:	84 c0                	test   al,al
c0015224:	74 02                	je     c0015228 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x26>
c0015226:	89 f3                	mov    ebx,esi
c0015228:	89 d8                	mov    eax,ebx
c001522a:	5a                   	pop    edx
c001522b:	5b                   	pop    ebx
c001522c:	5e                   	pop    esi
c001522d:	c3                   	ret    

c001522e <Sys::exit(regs*)>:
c001522e:	83 ec 18             	sub    esp,0x18
c0015231:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015235:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0015238:	e8 f1 31 00 00       	call   c001842e <terminateTask(int)>
c001523d:	83 c8 ff             	or     eax,0xffffffff
c0015240:	83 c4 1c             	add    esp,0x1c
c0015243:	89 c2                	mov    edx,eax
c0015245:	c3                   	ret    

c0015246 <Sys::loadDLL(regs*)>:
c0015246:	56                   	push   esi
c0015247:	53                   	push   ebx
c0015248:	31 d2                	xor    edx,edx
c001524a:	51                   	push   ecx
c001524b:	b8 01 00 00 00       	mov    eax,0x1
c0015250:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015254:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0015258:	74 7d                	je     c00152d7 <Sys::loadDLL(regs*)+0x91>
c001525a:	83 ec 0c             	sub    esp,0xc
c001525d:	68 14 01 00 00       	push   0x114
c0015262:	e8 05 9a ff ff       	call   c000ec6c <operator new(unsigned long)>
c0015267:	83 c4 0c             	add    esp,0xc
c001526a:	89 c3                	mov    ebx,eax
c001526c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015271:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0015274:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0015277:	53                   	push   ebx
c0015278:	e8 0d a0 ff ff       	call   c000f28a <File::File(char const*, Process*)>
c001527d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015280:	e8 d7 a2 ff ff       	call   c000f55c <File::exists()>
c0015285:	83 c4 10             	add    esp,0x10
c0015288:	84 c0                	test   al,al
c001528a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001528c:	75 11                	jne    c001529f <Sys::loadDLL(regs*)+0x59>
c001528e:	83 ec 0c             	sub    esp,0xc
c0015291:	53                   	push   ebx
c0015292:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015295:	83 c4 10             	add    esp,0x10
c0015298:	b8 03 00 00 00       	mov    eax,0x3
c001529d:	eb 36                	jmp    c00152d5 <Sys::loadDLL(regs*)+0x8f>
c001529f:	83 ec 0c             	sub    esp,0xc
c00152a2:	53                   	push   ebx
c00152a3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00152a6:	58                   	pop    eax
c00152a7:	5a                   	pop    edx
c00152a8:	6a 00                	push   0x0
c00152aa:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00152ad:	e8 58 21 00 00       	call   c001740a <Thr::loadDLL(char const*, bool)>
c00152b2:	83 c4 10             	add    esp,0x10
c00152b5:	89 c1                	mov    ecx,eax
c00152b7:	31 d2                	xor    edx,edx
c00152b9:	b8 04 00 00 00       	mov    eax,0x4
c00152be:	85 c9                	test   ecx,ecx
c00152c0:	74 15                	je     c00152d7 <Sys::loadDLL(regs*)+0x91>
c00152c2:	53                   	push   ebx
c00152c3:	53                   	push   ebx
c00152c4:	ff 35 08 34 02 c0    	push   DWORD PTR ds:0xc0023408
c00152ca:	51                   	push   ecx
c00152cb:	e8 3e 23 00 00       	call   c001760e <Thr::executeDLL(unsigned long, void*)>
c00152d0:	83 c4 10             	add    esp,0x10
c00152d3:	31 c0                	xor    eax,eax
c00152d5:	31 d2                	xor    edx,edx
c00152d7:	59                   	pop    ecx
c00152d8:	5b                   	pop    ebx
c00152d9:	5e                   	pop    esi
c00152da:	c3                   	ret    

c00152db <Sys::read(regs*)>:
c00152db:	57                   	push   edi
c00152dc:	56                   	push   esi
c00152dd:	53                   	push   ebx
c00152de:	83 ec 10             	sub    esp,0x10
c00152e1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00152e5:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00152e8:	83 f8 02             	cmp    eax,0x2
c00152eb:	77 10                	ja     c00152fd <Sys::read(regs*)+0x22>
c00152ed:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00152f2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00152f5:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c00152fb:	eb 0e                	jmp    c001530b <Sys::read(regs*)+0x30>
c00152fd:	83 ec 0c             	sub    esp,0xc
c0015300:	50                   	push   eax
c0015301:	e8 77 89 ff ff       	call   c000dc7d <getFromFileDescriptor(int)>
c0015306:	83 c4 10             	add    esp,0x10
c0015309:	89 c1                	mov    ecx,eax
c001530b:	83 c8 ff             	or     eax,0xffffffff
c001530e:	85 c9                	test   ecx,ecx
c0015310:	89 c2                	mov    edx,eax
c0015312:	74 28                	je     c001533c <Sys::read(regs*)+0x61>
c0015314:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001531c:	31 ff                	xor    edi,edi
c001531e:	83 ec 0c             	sub    esp,0xc
c0015321:	8b 01                	mov    eax,DWORD PTR [ecx]
c0015323:	8d 54 24 18          	lea    edx,[esp+0x18]
c0015327:	52                   	push   edx
c0015328:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001532b:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001532e:	57                   	push   edi
c001532f:	56                   	push   esi
c0015330:	51                   	push   ecx
c0015331:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015334:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015338:	83 c4 20             	add    esp,0x20
c001533b:	99                   	cdq    
c001533c:	83 c4 10             	add    esp,0x10
c001533f:	5b                   	pop    ebx
c0015340:	5e                   	pop    esi
c0015341:	5f                   	pop    edi
c0015342:	c3                   	ret    

c0015343 <Sys::sbrk(regs*)>:
c0015343:	56                   	push   esi
c0015344:	53                   	push   ebx
c0015345:	83 ec 0c             	sub    esp,0xc
c0015348:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001534c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015351:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015354:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c001535a:	8b 70 04             	mov    esi,DWORD PTR [eax+0x4]
c001535d:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0015360:	68 13 16 02 c0       	push   0xc0021613
c0015365:	e8 f1 99 ff ff       	call   c000ed5b <Dbg::kprintf(char const*, ...)>
c001536a:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001536d:	83 c4 10             	add    esp,0x10
c0015370:	85 c9                	test   ecx,ecx
c0015372:	74 02                	je     c0015376 <Sys::sbrk(regs*)+0x33>
c0015374:	79 06                	jns    c001537c <Sys::sbrk(regs*)+0x39>
c0015376:	89 f0                	mov    eax,esi
c0015378:	31 d2                	xor    edx,edx
c001537a:	eb 37                	jmp    c00153b3 <Sys::sbrk(regs*)+0x70>
c001537c:	83 c8 ff             	or     eax,0xffffffff
c001537f:	81 f9 00 00 00 04    	cmp    ecx,0x4000000
c0015385:	89 c2                	mov    edx,eax
c0015387:	77 2a                	ja     c00153b3 <Sys::sbrk(regs*)+0x70>
c0015389:	8d 91 ff 0f 00 00    	lea    edx,[ecx+0xfff]
c001538f:	c1 ea 0c             	shr    edx,0xc
c0015392:	53                   	push   ebx
c0015393:	68 07 04 00 00       	push   0x407
c0015398:	52                   	push   edx
c0015399:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001539e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00153a1:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c00153a7:	e8 b0 91 ff ff       	call   c000e55c <VAS::allocatePages(int, int)>
c00153ac:	89 f0                	mov    eax,esi
c00153ae:	31 d2                	xor    edx,edx
c00153b0:	83 c4 10             	add    esp,0x10
c00153b3:	59                   	pop    ecx
c00153b4:	5b                   	pop    ebx
c00153b5:	5e                   	pop    esi
c00153b6:	c3                   	ret    

c00153b7 <Sys::write(regs*)>:
c00153b7:	57                   	push   edi
c00153b8:	56                   	push   esi
c00153b9:	53                   	push   ebx
c00153ba:	83 ec 18             	sub    esp,0x18
c00153bd:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00153c1:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00153c4:	68 2f 16 02 c0       	push   0xc002162f
c00153c9:	e8 8d 99 ff ff       	call   c000ed5b <Dbg::kprintf(char const*, ...)>
c00153ce:	83 c4 10             	add    esp,0x10
c00153d1:	83 7b 20 02          	cmp    DWORD PTR [ebx+0x20],0x2
c00153d5:	77 10                	ja     c00153e7 <Sys::write(regs*)+0x30>
c00153d7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00153dc:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00153df:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c00153e5:	eb 1b                	jmp    c0015402 <Sys::write(regs*)+0x4b>
c00153e7:	83 ec 0c             	sub    esp,0xc
c00153ea:	68 4e 16 02 c0       	push   0xc002164e
c00153ef:	e8 67 99 ff ff       	call   c000ed5b <Dbg::kprintf(char const*, ...)>
c00153f4:	58                   	pop    eax
c00153f5:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00153f8:	e8 80 88 ff ff       	call   c000dc7d <getFromFileDescriptor(int)>
c00153fd:	83 c4 10             	add    esp,0x10
c0015400:	89 c1                	mov    ecx,eax
c0015402:	83 c8 ff             	or     eax,0xffffffff
c0015405:	85 c9                	test   ecx,ecx
c0015407:	89 c2                	mov    edx,eax
c0015409:	74 28                	je     c0015433 <Sys::write(regs*)+0x7c>
c001540b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0015413:	31 ff                	xor    edi,edi
c0015415:	83 ec 0c             	sub    esp,0xc
c0015418:	8b 01                	mov    eax,DWORD PTR [ecx]
c001541a:	8d 54 24 18          	lea    edx,[esp+0x18]
c001541e:	52                   	push   edx
c001541f:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015422:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0015425:	57                   	push   edi
c0015426:	56                   	push   esi
c0015427:	51                   	push   ecx
c0015428:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001542b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001542f:	83 c4 20             	add    esp,0x20
c0015432:	99                   	cdq    
c0015433:	83 c4 10             	add    esp,0x10
c0015436:	5b                   	pop    ebx
c0015437:	5e                   	pop    esi
c0015438:	5f                   	pop    edi
c0015439:	c3                   	ret    

c001543a <Sys::yield(regs*)>:
c001543a:	83 ec 0c             	sub    esp,0xc
c001543d:	e8 d6 25 00 00       	call   c0017a18 <lockScheduler()>
c0015442:	e8 05 29 00 00       	call   c0017d4c <schedule()>
c0015447:	e8 ce 25 00 00       	call   c0017a1a <unlockScheduler()>
c001544c:	31 c0                	xor    eax,eax
c001544e:	31 d2                	xor    edx,edx
c0015450:	83 c4 0c             	add    esp,0xc
c0015453:	c3                   	ret    

c0015454 <sysCallGetPID(regs*)>:
c0015454:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015459:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001545c:	8b 00                	mov    eax,DWORD PTR [eax]
c001545e:	99                   	cdq    
c001545f:	c3                   	ret    

c0015460 <sysCallSeekDir(regs*)>:
c0015460:	31 c0                	xor    eax,eax
c0015462:	31 d2                	xor    edx,edx
c0015464:	c3                   	ret    

c0015465 <sysCallTellDir(regs*)>:
c0015465:	31 c0                	xor    eax,eax
c0015467:	31 d2                	xor    edx,edx
c0015469:	c3                   	ret    

c001546a <sysCallVerify(regs*)>:
c001546a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001546e:	31 d2                	xor    edx,edx
c0015470:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015473:	c3                   	ret    

c0015474 <sysCallFork(regs*)>:
c0015474:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015479:	ba ff ff ff ff       	mov    edx,0xffffffff
c001547e:	c3                   	ret    

c001547f <sysCallExecve(regs*)>:
c001547f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015484:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015489:	c3                   	ret    

c001548a <sysFormatDisk(regs*)>:
c001548a:	56                   	push   esi
c001548b:	53                   	push   ebx
c001548c:	53                   	push   ebx
c001548d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015491:	8b 1d 68 35 02 c0    	mov    ebx,DWORD PTR ds:0xc0023568
c0015497:	eb 25                	jmp    c00154be <sysFormatDisk(regs*)+0x34>
c0015499:	83 ec 0c             	sub    esp,0xc
c001549c:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001549f:	8b 13                	mov    edx,DWORD PTR [ebx]
c00154a1:	ff 76 28             	push   DWORD PTR [esi+0x28]
c00154a4:	ff 76 24             	push   DWORD PTR [esi+0x24]
c00154a7:	50                   	push   eax
c00154a8:	ff 34 85 00 3a 02 c0 	push   DWORD PTR [eax*4-0x3ffdc600]
c00154af:	53                   	push   ebx
c00154b0:	ff 52 48             	call   DWORD PTR [edx+0x48]
c00154b3:	83 c4 20             	add    esp,0x20
c00154b6:	83 f8 08             	cmp    eax,0x8
c00154b9:	75 12                	jne    c00154cd <sysFormatDisk(regs*)+0x43>
c00154bb:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c00154be:	85 db                	test   ebx,ebx
c00154c0:	75 d7                	jne    c0015499 <sysFormatDisk(regs*)+0xf>
c00154c2:	59                   	pop    ecx
c00154c3:	b8 03 00 00 00       	mov    eax,0x3
c00154c8:	31 d2                	xor    edx,edx
c00154ca:	5b                   	pop    ebx
c00154cb:	5e                   	pop    esi
c00154cc:	c3                   	ret    
c00154cd:	85 c0                	test   eax,eax
c00154cf:	74 1b                	je     c00154ec <sysFormatDisk(regs*)+0x62>
c00154d1:	83 f8 09             	cmp    eax,0x9
c00154d4:	74 0b                	je     c00154e1 <sysFormatDisk(regs*)+0x57>
c00154d6:	59                   	pop    ecx
c00154d7:	b8 02 00 00 00       	mov    eax,0x2
c00154dc:	31 d2                	xor    edx,edx
c00154de:	5b                   	pop    ebx
c00154df:	5e                   	pop    esi
c00154e0:	c3                   	ret    
c00154e1:	59                   	pop    ecx
c00154e2:	b8 01 00 00 00       	mov    eax,0x1
c00154e7:	31 d2                	xor    edx,edx
c00154e9:	5b                   	pop    ebx
c00154ea:	5e                   	pop    esi
c00154eb:	c3                   	ret    
c00154ec:	59                   	pop    ecx
c00154ed:	31 c0                	xor    eax,eax
c00154ef:	31 d2                	xor    edx,edx
c00154f1:	5b                   	pop    ebx
c00154f2:	5e                   	pop    esi
c00154f3:	c3                   	ret    

c00154f4 <sysSetDiskVolumeLabel(regs*)>:
c00154f4:	56                   	push   esi
c00154f5:	53                   	push   ebx
c00154f6:	53                   	push   ebx
c00154f7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00154fb:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00154fe:	83 f8 19             	cmp    eax,0x19
c0015501:	77 29                	ja     c001552c <sysSetDiskVolumeLabel(regs*)+0x38>
c0015503:	8b 0c 85 00 3a 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdc600]
c001550a:	85 c9                	test   ecx,ecx
c001550c:	74 1e                	je     c001552c <sysSetDiskVolumeLabel(regs*)+0x38>
c001550e:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c0015511:	85 d2                	test   edx,edx
c0015513:	74 17                	je     c001552c <sysSetDiskVolumeLabel(regs*)+0x38>
c0015515:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001551b:	8b 33                	mov    esi,DWORD PTR [ebx]
c001551d:	52                   	push   edx
c001551e:	50                   	push   eax
c001551f:	51                   	push   ecx
c0015520:	53                   	push   ebx
c0015521:	ff 56 58             	call   DWORD PTR [esi+0x58]
c0015524:	83 c4 10             	add    esp,0x10
c0015527:	99                   	cdq    
c0015528:	59                   	pop    ecx
c0015529:	5b                   	pop    ebx
c001552a:	5e                   	pop    esi
c001552b:	c3                   	ret    
c001552c:	59                   	pop    ecx
c001552d:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0015532:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015537:	5b                   	pop    ebx
c0015538:	5e                   	pop    esi
c0015539:	c3                   	ret    

c001553a <sysGetDiskVolumeLabel(regs*)>:
c001553a:	57                   	push   edi
c001553b:	56                   	push   esi
c001553c:	53                   	push   ebx
c001553d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015541:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0015544:	83 fa 19             	cmp    edx,0x19
c0015547:	77 34                	ja     c001557d <sysGetDiskVolumeLabel(regs*)+0x43>
c0015549:	8b 0c 95 00 3a 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffdc600]
c0015550:	85 c9                	test   ecx,ecx
c0015552:	74 29                	je     c001557d <sysGetDiskVolumeLabel(regs*)+0x43>
c0015554:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0015557:	85 db                	test   ebx,ebx
c0015559:	74 22                	je     c001557d <sysGetDiskVolumeLabel(regs*)+0x43>
c001555b:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001555e:	85 c0                	test   eax,eax
c0015560:	74 1b                	je     c001557d <sysGetDiskVolumeLabel(regs*)+0x43>
c0015562:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c0015568:	83 ec 0c             	sub    esp,0xc
c001556b:	8b 3e                	mov    edi,DWORD PTR [esi]
c001556d:	50                   	push   eax
c001556e:	53                   	push   ebx
c001556f:	52                   	push   edx
c0015570:	51                   	push   ecx
c0015571:	56                   	push   esi
c0015572:	ff 57 54             	call   DWORD PTR [edi+0x54]
c0015575:	83 c4 20             	add    esp,0x20
c0015578:	99                   	cdq    
c0015579:	5b                   	pop    ebx
c001557a:	5e                   	pop    esi
c001557b:	5f                   	pop    edi
c001557c:	c3                   	ret    
c001557d:	5b                   	pop    ebx
c001557e:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0015583:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015588:	5e                   	pop    esi
c0015589:	5f                   	pop    edi
c001558a:	c3                   	ret    

c001558b <sysShutdown(regs*)>:
c001558b:	83 ec 0c             	sub    esp,0xc
c001558e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015592:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015595:	85 c0                	test   eax,eax
c0015597:	74 18                	je     c00155b1 <sysShutdown(regs*)+0x26>
c0015599:	83 f8 01             	cmp    eax,0x1
c001559c:	74 38                	je     c00155d6 <sysShutdown(regs*)+0x4b>
c001559e:	83 f8 02             	cmp    eax,0x2
c00155a1:	74 24                	je     c00155c7 <sysShutdown(regs*)+0x3c>
c00155a3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00155a8:	ba ff ff ff ff       	mov    edx,0xffffffff
c00155ad:	83 c4 0c             	add    esp,0xc
c00155b0:	c3                   	ret    
c00155b1:	a1 08 34 02 c0       	mov    eax,ds:0xc0023408
c00155b6:	8b 10                	mov    edx,DWORD PTR [eax]
c00155b8:	6a 00                	push   0x0
c00155ba:	6a 00                	push   0x0
c00155bc:	6a 00                	push   0x0
c00155be:	50                   	push   eax
c00155bf:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00155c2:	83 c4 10             	add    esp,0x10
c00155c5:	eb dc                	jmp    c00155a3 <sysShutdown(regs*)+0x18>
c00155c7:	a1 08 34 02 c0       	mov    eax,ds:0xc0023408
c00155cc:	8b 10                	mov    edx,DWORD PTR [eax]
c00155ce:	6a 00                	push   0x0
c00155d0:	6a 00                	push   0x0
c00155d2:	6a 01                	push   0x1
c00155d4:	eb e8                	jmp    c00155be <sysShutdown(regs*)+0x33>
c00155d6:	a1 80 3a 02 c0       	mov    eax,ds:0xc0023a80
c00155db:	85 c0                	test   eax,eax
c00155dd:	74 02                	je     c00155e1 <sysShutdown(regs*)+0x56>
c00155df:	ff d0                	call   eax
c00155e1:	31 c0                	xor    eax,eax
c00155e3:	31 d2                	xor    edx,edx
c00155e5:	83 c4 0c             	add    esp,0xc
c00155e8:	c3                   	ret    

c00155e9 <sysCallGetCwd(regs*)>:
c00155e9:	83 ec 10             	sub    esp,0x10
c00155ec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00155f0:	ff 70 28             	push   DWORD PTR [eax+0x28]
c00155f3:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00155f6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00155fb:	ff 70 40             	push   DWORD PTR [eax+0x40]
c00155fe:	e8 f8 9f ff ff       	call   c000f5fb <getcwd(Process*, char*, int)>
c0015603:	83 c4 1c             	add    esp,0x1c
c0015606:	99                   	cdq    
c0015607:	c3                   	ret    

c0015608 <sysCallSetCwd(regs*)>:
c0015608:	83 ec 14             	sub    esp,0x14
c001560b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001560f:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0015612:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015617:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001561a:	e8 06 a0 ff ff       	call   c000f625 <setcwd(Process*, char*)>
c001561f:	83 c4 1c             	add    esp,0x1c
c0015622:	99                   	cdq    
c0015623:	c3                   	ret    

c0015624 <sysCallRealpath(regs*)>:
c0015624:	83 ec 0c             	sub    esp,0xc
c0015627:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001562b:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001562e:	85 d2                	test   edx,edx
c0015630:	74 07                	je     c0015639 <sysCallRealpath(regs*)+0x15>
c0015632:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0015635:	85 c0                	test   eax,eax
c0015637:	75 0b                	jne    c0015644 <sysCallRealpath(regs*)+0x20>
c0015639:	b8 01 00 00 00       	mov    eax,0x1
c001563e:	31 d2                	xor    edx,edx
c0015640:	83 c4 0c             	add    esp,0xc
c0015643:	c3                   	ret    
c0015644:	51                   	push   ecx
c0015645:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001564b:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001564e:	81 c1 0c 01 00 00    	add    ecx,0x10c
c0015654:	51                   	push   ecx
c0015655:	52                   	push   edx
c0015656:	50                   	push   eax
c0015657:	e8 84 9a ff ff       	call   c000f0e0 <standardiseFiles(char*, char const*, char const*)>
c001565c:	83 c4 10             	add    esp,0x10
c001565f:	31 c0                	xor    eax,eax
c0015661:	31 d2                	xor    edx,edx
c0015663:	83 c4 0c             	add    esp,0xc
c0015666:	c3                   	ret    

c0015667 <sysCallGetArgc(regs*)>:
c0015667:	83 ec 14             	sub    esp,0x14
c001566a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001566f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015672:	ff b0 36 05 00 00    	push   DWORD PTR [eax+0x536]
c0015678:	68 6d 16 02 c0       	push   0xc002166d
c001567d:	e8 d9 96 ff ff       	call   c000ed5b <Dbg::kprintf(char const*, ...)>
c0015682:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015687:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001568a:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c0015690:	83 c4 1c             	add    esp,0x1c
c0015693:	99                   	cdq    
c0015694:	c3                   	ret    

c0015695 <sysCallReadDir(regs*)>:
c0015695:	53                   	push   ebx
c0015696:	83 ec 18             	sub    esp,0x18
c0015699:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001569d:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00156a0:	83 f8 02             	cmp    eax,0x2
c00156a3:	76 53                	jbe    c00156f8 <sysCallReadDir(regs*)+0x63>
c00156a5:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00156a8:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c00156ae:	77 4f                	ja     c00156ff <sysCallReadDir(regs*)+0x6a>
c00156b0:	83 ec 0c             	sub    esp,0xc
c00156b3:	50                   	push   eax
c00156b4:	e8 c4 85 ff ff       	call   c000dc7d <getFromFileDescriptor(int)>
c00156b9:	83 c4 10             	add    esp,0x10
c00156bc:	85 c0                	test   eax,eax
c00156be:	74 50                	je     c0015710 <sysCallReadDir(regs*)+0x7b>
c00156c0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00156c8:	83 ec 0c             	sub    esp,0xc
c00156cb:	8b 10                	mov    edx,DWORD PTR [eax]
c00156cd:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c00156d1:	51                   	push   ecx
c00156d2:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00156d5:	6a 00                	push   0x0
c00156d7:	68 10 01 00 00       	push   0x110
c00156dc:	50                   	push   eax
c00156dd:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00156e0:	83 c4 20             	add    esp,0x20
c00156e3:	85 c0                	test   eax,eax
c00156e5:	74 38                	je     c001571f <sysCallReadDir(regs*)+0x8a>
c00156e7:	83 f8 07             	cmp    eax,0x7
c00156ea:	74 0c                	je     c00156f8 <sysCallReadDir(regs*)+0x63>
c00156ec:	b8 02 00 00 00       	mov    eax,0x2
c00156f1:	31 d2                	xor    edx,edx
c00156f3:	83 c4 18             	add    esp,0x18
c00156f6:	5b                   	pop    ebx
c00156f7:	c3                   	ret    
c00156f8:	b8 01 00 00 00       	mov    eax,0x1
c00156fd:	eb f2                	jmp    c00156f1 <sysCallReadDir(regs*)+0x5c>
c00156ff:	83 ec 08             	sub    esp,0x8
c0015702:	52                   	push   edx
c0015703:	68 6c 17 02 c0       	push   0xc002176c
c0015708:	e8 4e 96 ff ff       	call   c000ed5b <Dbg::kprintf(char const*, ...)>
c001570d:	83 c4 10             	add    esp,0x10
c0015710:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015715:	ba ff ff ff ff       	mov    edx,0xffffffff
c001571a:	83 c4 18             	add    esp,0x18
c001571d:	5b                   	pop    ebx
c001571e:	c3                   	ret    
c001571f:	31 c0                	xor    eax,eax
c0015721:	eb ce                	jmp    c00156f1 <sysCallReadDir(regs*)+0x5c>

c0015723 <sysCallIsATTY(regs*)>:
c0015723:	83 ec 0c             	sub    esp,0xc
c0015726:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001572a:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001572d:	83 f8 02             	cmp    eax,0x2
c0015730:	76 07                	jbe    c0015739 <sysCallIsATTY(regs*)+0x16>
c0015732:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0015737:	75 26                	jne    c001575f <sysCallIsATTY(regs*)+0x3c>
c0015739:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001573e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015741:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015747:	85 c0                	test   eax,eax
c0015749:	74 24                	je     c001576f <sysCallIsATTY(regs*)+0x4c>
c001574b:	83 ec 0c             	sub    esp,0xc
c001574e:	8b 10                	mov    edx,DWORD PTR [eax]
c0015750:	50                   	push   eax
c0015751:	ff 12                	call   DWORD PTR [edx]
c0015753:	31 d2                	xor    edx,edx
c0015755:	0f b6 c0             	movzx  eax,al
c0015758:	83 c4 10             	add    esp,0x10
c001575b:	83 c4 0c             	add    esp,0xc
c001575e:	c3                   	ret    
c001575f:	83 ec 0c             	sub    esp,0xc
c0015762:	50                   	push   eax
c0015763:	e8 15 85 ff ff       	call   c000dc7d <getFromFileDescriptor(int)>
c0015768:	83 c4 10             	add    esp,0x10
c001576b:	85 c0                	test   eax,eax
c001576d:	75 dc                	jne    c001574b <sysCallIsATTY(regs*)+0x28>
c001576f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015774:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015779:	83 c4 0c             	add    esp,0xc
c001577c:	c3                   	ret    

c001577d <sysCallSeek(regs*)>:
c001577d:	53                   	push   ebx
c001577e:	83 ec 08             	sub    esp,0x8
c0015781:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015785:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015788:	83 f8 02             	cmp    eax,0x2
c001578b:	76 4a                	jbe    c00157d7 <sysCallSeek(regs*)+0x5a>
c001578d:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0015792:	77 32                	ja     c00157c6 <sysCallSeek(regs*)+0x49>
c0015794:	83 ec 0c             	sub    esp,0xc
c0015797:	50                   	push   eax
c0015798:	e8 e0 84 ff ff       	call   c000dc7d <getFromFileDescriptor(int)>
c001579d:	83 c4 0c             	add    esp,0xc
c00157a0:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00157a3:	31 db                	xor    ebx,ebx
c00157a5:	53                   	push   ebx
c00157a6:	51                   	push   ecx
c00157a7:	50                   	push   eax
c00157a8:	e8 ff 9b ff ff       	call   c000f3ac <File::seek(unsigned long long)>
c00157ad:	83 c4 10             	add    esp,0x10
c00157b0:	85 c0                	test   eax,eax
c00157b2:	0f 95 c0             	setne  al
c00157b5:	31 d2                	xor    edx,edx
c00157b7:	0f b6 c0             	movzx  eax,al
c00157ba:	f7 d8                	neg    eax
c00157bc:	83 d2 00             	adc    edx,0x0
c00157bf:	83 c4 08             	add    esp,0x8
c00157c2:	f7 da                	neg    edx
c00157c4:	5b                   	pop    ebx
c00157c5:	c3                   	ret    
c00157c6:	83 ec 08             	sub    esp,0x8
c00157c9:	50                   	push   eax
c00157ca:	68 78 16 02 c0       	push   0xc0021678
c00157cf:	e8 87 95 ff ff       	call   c000ed5b <Dbg::kprintf(char const*, ...)>
c00157d4:	83 c4 10             	add    esp,0x10
c00157d7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00157dc:	ba ff ff ff ff       	mov    edx,0xffffffff
c00157e1:	83 c4 08             	add    esp,0x8
c00157e4:	5b                   	pop    ebx
c00157e5:	c3                   	ret    

c00157e6 <sysCallTell(regs*)>:
c00157e6:	53                   	push   ebx
c00157e7:	83 ec 08             	sub    esp,0x8
c00157ea:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00157ee:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00157f1:	83 f8 02             	cmp    eax,0x2
c00157f4:	76 5e                	jbe    c0015854 <sysCallTell(regs*)+0x6e>
c00157f6:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00157fb:	77 2d                	ja     c001582a <sysCallTell(regs*)+0x44>
c00157fd:	83 ec 0c             	sub    esp,0xc
c0015800:	50                   	push   eax
c0015801:	e8 77 84 ff ff       	call   c000dc7d <getFromFileDescriptor(int)>
c0015806:	5a                   	pop    edx
c0015807:	59                   	pop    ecx
c0015808:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001580b:	50                   	push   eax
c001580c:	e8 f1 9b ff ff       	call   c000f402 <File::tell(unsigned long long*)>
c0015811:	83 c4 10             	add    esp,0x10
c0015814:	85 c0                	test   eax,eax
c0015816:	0f 95 c0             	setne  al
c0015819:	31 d2                	xor    edx,edx
c001581b:	0f b6 c0             	movzx  eax,al
c001581e:	f7 d8                	neg    eax
c0015820:	83 d2 00             	adc    edx,0x0
c0015823:	83 c4 08             	add    esp,0x8
c0015826:	f7 da                	neg    edx
c0015828:	5b                   	pop    ebx
c0015829:	c3                   	ret    
c001582a:	83 ec 08             	sub    esp,0x8
c001582d:	50                   	push   eax
c001582e:	68 92 16 02 c0       	push   0xc0021692
c0015833:	e8 23 95 ff ff       	call   c000ed5b <Dbg::kprintf(char const*, ...)>
c0015838:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001583b:	83 c4 10             	add    esp,0x10
c001583e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0015844:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001584b:	31 d2                	xor    edx,edx
c001584d:	31 c0                	xor    eax,eax
c001584f:	83 c4 08             	add    esp,0x8
c0015852:	5b                   	pop    ebx
c0015853:	c3                   	ret    
c0015854:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015859:	ba ff ff ff ff       	mov    edx,0xffffffff
c001585e:	83 c4 08             	add    esp,0x8
c0015861:	5b                   	pop    ebx
c0015862:	c3                   	ret    

c0015863 <sysCallSizeFromFilename(regs*)>:
c0015863:	57                   	push   edi
c0015864:	56                   	push   esi
c0015865:	53                   	push   ebx
c0015866:	83 ec 10             	sub    esp,0x10
c0015869:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001586d:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c0015870:	83 fb 02             	cmp    ebx,0x2
c0015873:	0f 86 8a 00 00 00    	jbe    c0015903 <sysCallSizeFromFilename(regs*)+0xa0>
c0015879:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001587f:	77 56                	ja     c00158d7 <sysCallSizeFromFilename(regs*)+0x74>
c0015881:	83 ec 0c             	sub    esp,0xc
c0015884:	68 14 01 00 00       	push   0x114
c0015889:	e8 de 93 ff ff       	call   c000ec6c <operator new(unsigned long)>
c001588e:	83 c4 0c             	add    esp,0xc
c0015891:	89 c7                	mov    edi,eax
c0015893:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015898:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001589b:	53                   	push   ebx
c001589c:	57                   	push   edi
c001589d:	e8 e8 99 ff ff       	call   c000f28a <File::File(char const*, Process*)>
c00158a2:	83 c4 0c             	add    esp,0xc
c00158a5:	8d 44 24 13          	lea    eax,[esp+0x13]
c00158a9:	50                   	push   eax
c00158aa:	ff 76 28             	push   DWORD PTR [esi+0x28]
c00158ad:	57                   	push   edi
c00158ae:	e8 e7 9c ff ff       	call   c000f59a <File::stat(unsigned long long*, bool*)>
c00158b3:	89 3c 24             	mov    DWORD PTR [esp],edi
c00158b6:	89 c3                	mov    ebx,eax
c00158b8:	8b 07                	mov    eax,DWORD PTR [edi]
c00158ba:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00158bd:	83 c4 10             	add    esp,0x10
c00158c0:	31 c0                	xor    eax,eax
c00158c2:	85 db                	test   ebx,ebx
c00158c4:	0f 95 c0             	setne  al
c00158c7:	31 d2                	xor    edx,edx
c00158c9:	f7 d8                	neg    eax
c00158cb:	83 d2 00             	adc    edx,0x0
c00158ce:	83 c4 10             	add    esp,0x10
c00158d1:	f7 da                	neg    edx
c00158d3:	5b                   	pop    ebx
c00158d4:	5e                   	pop    esi
c00158d5:	5f                   	pop    edi
c00158d6:	c3                   	ret    
c00158d7:	83 ec 08             	sub    esp,0x8
c00158da:	53                   	push   ebx
c00158db:	68 ac 16 02 c0       	push   0xc00216ac
c00158e0:	e8 76 94 ff ff       	call   c000ed5b <Dbg::kprintf(char const*, ...)>
c00158e5:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00158e8:	83 c4 10             	add    esp,0x10
c00158eb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00158f1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00158f8:	31 d2                	xor    edx,edx
c00158fa:	83 c4 10             	add    esp,0x10
c00158fd:	31 c0                	xor    eax,eax
c00158ff:	5b                   	pop    ebx
c0015900:	5e                   	pop    esi
c0015901:	5f                   	pop    edi
c0015902:	c3                   	ret    
c0015903:	83 c4 10             	add    esp,0x10
c0015906:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001590b:	5b                   	pop    ebx
c001590c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015911:	5e                   	pop    esi
c0015912:	5f                   	pop    edi
c0015913:	c3                   	ret    

c0015914 <sysCallSize(regs*)>:
c0015914:	53                   	push   ebx
c0015915:	83 ec 18             	sub    esp,0x18
c0015918:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001591c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001591f:	83 f8 02             	cmp    eax,0x2
c0015922:	76 64                	jbe    c0015988 <sysCallSize(regs*)+0x74>
c0015924:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0015929:	77 33                	ja     c001595e <sysCallSize(regs*)+0x4a>
c001592b:	83 ec 0c             	sub    esp,0xc
c001592e:	50                   	push   eax
c001592f:	e8 49 83 ff ff       	call   c000dc7d <getFromFileDescriptor(int)>
c0015934:	83 c4 0c             	add    esp,0xc
c0015937:	8d 54 24 13          	lea    edx,[esp+0x13]
c001593b:	52                   	push   edx
c001593c:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001593f:	50                   	push   eax
c0015940:	e8 55 9c ff ff       	call   c000f59a <File::stat(unsigned long long*, bool*)>
c0015945:	83 c4 10             	add    esp,0x10
c0015948:	85 c0                	test   eax,eax
c001594a:	0f 95 c0             	setne  al
c001594d:	31 d2                	xor    edx,edx
c001594f:	0f b6 c0             	movzx  eax,al
c0015952:	f7 d8                	neg    eax
c0015954:	83 d2 00             	adc    edx,0x0
c0015957:	83 c4 18             	add    esp,0x18
c001595a:	f7 da                	neg    edx
c001595c:	5b                   	pop    ebx
c001595d:	c3                   	ret    
c001595e:	83 ec 08             	sub    esp,0x8
c0015961:	50                   	push   eax
c0015962:	68 ac 16 02 c0       	push   0xc00216ac
c0015967:	e8 ef 93 ff ff       	call   c000ed5b <Dbg::kprintf(char const*, ...)>
c001596c:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001596f:	83 c4 10             	add    esp,0x10
c0015972:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0015978:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001597f:	31 d2                	xor    edx,edx
c0015981:	31 c0                	xor    eax,eax
c0015983:	83 c4 18             	add    esp,0x18
c0015986:	5b                   	pop    ebx
c0015987:	c3                   	ret    
c0015988:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001598d:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015992:	83 c4 18             	add    esp,0x18
c0015995:	5b                   	pop    ebx
c0015996:	c3                   	ret    

c0015997 <sysCallClose(regs*)>:
c0015997:	53                   	push   ebx
c0015998:	83 ec 08             	sub    esp,0x8
c001599b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001599f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00159a2:	83 f8 02             	cmp    eax,0x2
c00159a5:	76 50                	jbe    c00159f7 <sysCallClose(regs*)+0x60>
c00159a7:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00159ac:	74 58                	je     c0015a06 <sysCallClose(regs*)+0x6f>
c00159ae:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00159b3:	74 60                	je     c0015a15 <sysCallClose(regs*)+0x7e>
c00159b5:	77 2f                	ja     c00159e6 <sysCallClose(regs*)+0x4f>
c00159b7:	83 ec 0c             	sub    esp,0xc
c00159ba:	50                   	push   eax
c00159bb:	e8 bd 82 ff ff       	call   c000dc7d <getFromFileDescriptor(int)>
c00159c0:	89 c3                	mov    ebx,eax
c00159c2:	89 04 24             	mov    DWORD PTR [esp],eax
c00159c5:	e8 82 99 ff ff       	call   c000f34c <File::close()>
c00159ca:	83 c4 10             	add    esp,0x10
c00159cd:	85 db                	test   ebx,ebx
c00159cf:	74 0c                	je     c00159dd <sysCallClose(regs*)+0x46>
c00159d1:	83 ec 0c             	sub    esp,0xc
c00159d4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00159d6:	53                   	push   ebx
c00159d7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00159da:	83 c4 10             	add    esp,0x10
c00159dd:	31 c0                	xor    eax,eax
c00159df:	31 d2                	xor    edx,edx
c00159e1:	83 c4 08             	add    esp,0x8
c00159e4:	5b                   	pop    ebx
c00159e5:	c3                   	ret    
c00159e6:	83 ec 08             	sub    esp,0x8
c00159e9:	50                   	push   eax
c00159ea:	68 90 17 02 c0       	push   0xc0021790
c00159ef:	e8 67 93 ff ff       	call   c000ed5b <Dbg::kprintf(char const*, ...)>
c00159f4:	83 c4 10             	add    esp,0x10
c00159f7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00159fc:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015a01:	83 c4 08             	add    esp,0x8
c0015a04:	5b                   	pop    ebx
c0015a05:	c3                   	ret    
c0015a06:	83 ec 0c             	sub    esp,0xc
c0015a09:	68 c7 16 02 c0       	push   0xc00216c7
c0015a0e:	e8 48 93 ff ff       	call   c000ed5b <Dbg::kprintf(char const*, ...)>
c0015a13:	eb c5                	jmp    c00159da <sysCallClose(regs*)+0x43>
c0015a15:	83 ec 0c             	sub    esp,0xc
c0015a18:	68 d5 16 02 c0       	push   0xc00216d5
c0015a1d:	eb ef                	jmp    c0015a0e <sysCallClose(regs*)+0x77>

c0015a1f <sysCallOpenDir(regs*)>:
c0015a1f:	56                   	push   esi
c0015a20:	53                   	push   ebx
c0015a21:	53                   	push   ebx
c0015a22:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015a26:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c0015a29:	85 f6                	test   esi,esi
c0015a2b:	74 51                	je     c0015a7e <sysCallOpenDir(regs*)+0x5f>
c0015a2d:	83 ec 0c             	sub    esp,0xc
c0015a30:	68 14 01 00 00       	push   0x114
c0015a35:	e8 32 92 ff ff       	call   c000ec6c <operator new(unsigned long)>
c0015a3a:	83 c4 0c             	add    esp,0xc
c0015a3d:	89 c6                	mov    esi,eax
c0015a3f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015a44:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0015a47:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015a4a:	56                   	push   esi
c0015a4b:	e8 fc 9c ff ff       	call   c000f74c <Directory::Directory(char const*, Process*)>
c0015a50:	89 34 24             	mov    DWORD PTR [esp],esi
c0015a53:	e8 58 9d ff ff       	call   c000f7b0 <Directory::open()>
c0015a58:	83 c4 10             	add    esp,0x10
c0015a5b:	85 c0                	test   eax,eax
c0015a5d:	75 1f                	jne    c0015a7e <sysCallOpenDir(regs*)+0x5f>
c0015a5f:	83 ec 0c             	sub    esp,0xc
c0015a62:	56                   	push   esi
c0015a63:	e8 60 7f ff ff       	call   c000d9c8 <UnixFile::getFileDescriptor()>
c0015a68:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0015a6b:	83 c4 10             	add    esp,0x10
c0015a6e:	89 02                	mov    DWORD PTR [edx],eax
c0015a70:	c1 f8 1f             	sar    eax,0x1f
c0015a73:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0015a76:	31 c0                	xor    eax,eax
c0015a78:	59                   	pop    ecx
c0015a79:	31 d2                	xor    edx,edx
c0015a7b:	5b                   	pop    ebx
c0015a7c:	5e                   	pop    esi
c0015a7d:	c3                   	ret    
c0015a7e:	59                   	pop    ecx
c0015a7f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015a84:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015a89:	5b                   	pop    ebx
c0015a8a:	5e                   	pop    esi
c0015a8b:	c3                   	ret    

c0015a8c <sysCallMakeDir(regs*)>:
c0015a8c:	56                   	push   esi
c0015a8d:	53                   	push   ebx
c0015a8e:	83 ec 10             	sub    esp,0x10
c0015a91:	68 14 01 00 00       	push   0x114
c0015a96:	e8 d1 91 ff ff       	call   c000ec6c <operator new(unsigned long)>
c0015a9b:	83 c4 0c             	add    esp,0xc
c0015a9e:	89 c3                	mov    ebx,eax
c0015aa0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015aa5:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0015aa8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015aac:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0015aaf:	53                   	push   ebx
c0015ab0:	e8 97 9c ff ff       	call   c000f74c <Directory::Directory(char const*, Process*)>
c0015ab5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015ab8:	e8 d3 9e ff ff       	call   c000f990 <Directory::create()>
c0015abd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015ac0:	89 c6                	mov    esi,eax
c0015ac2:	e8 45 9d ff ff       	call   c000f80c <Directory::close()>
c0015ac7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015ac9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015acc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015acf:	31 c0                	xor    eax,eax
c0015ad1:	85 f6                	test   esi,esi
c0015ad3:	0f 95 c0             	setne  al
c0015ad6:	31 d2                	xor    edx,edx
c0015ad8:	f7 d8                	neg    eax
c0015ada:	83 d2 00             	adc    edx,0x0
c0015add:	83 c4 14             	add    esp,0x14
c0015ae0:	f7 da                	neg    edx
c0015ae2:	5b                   	pop    ebx
c0015ae3:	5e                   	pop    esi
c0015ae4:	c3                   	ret    

c0015ae5 <sysCallCloseDir(regs*)>:
c0015ae5:	53                   	push   ebx
c0015ae6:	83 ec 08             	sub    esp,0x8
c0015ae9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015aed:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015af0:	83 f8 02             	cmp    eax,0x2
c0015af3:	76 47                	jbe    c0015b3c <sysCallCloseDir(regs*)+0x57>
c0015af5:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0015afa:	77 2f                	ja     c0015b2b <sysCallCloseDir(regs*)+0x46>
c0015afc:	83 ec 0c             	sub    esp,0xc
c0015aff:	50                   	push   eax
c0015b00:	e8 78 81 ff ff       	call   c000dc7d <getFromFileDescriptor(int)>
c0015b05:	89 c3                	mov    ebx,eax
c0015b07:	89 04 24             	mov    DWORD PTR [esp],eax
c0015b0a:	e8 fd 9c ff ff       	call   c000f80c <Directory::close()>
c0015b0f:	83 c4 10             	add    esp,0x10
c0015b12:	85 db                	test   ebx,ebx
c0015b14:	74 0c                	je     c0015b22 <sysCallCloseDir(regs*)+0x3d>
c0015b16:	83 ec 0c             	sub    esp,0xc
c0015b19:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015b1b:	53                   	push   ebx
c0015b1c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015b1f:	83 c4 10             	add    esp,0x10
c0015b22:	31 c0                	xor    eax,eax
c0015b24:	31 d2                	xor    edx,edx
c0015b26:	83 c4 08             	add    esp,0x8
c0015b29:	5b                   	pop    ebx
c0015b2a:	c3                   	ret    
c0015b2b:	83 ec 08             	sub    esp,0x8
c0015b2e:	50                   	push   eax
c0015b2f:	68 b8 17 02 c0       	push   0xc00217b8
c0015b34:	e8 22 92 ff ff       	call   c000ed5b <Dbg::kprintf(char const*, ...)>
c0015b39:	83 c4 10             	add    esp,0x10
c0015b3c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015b41:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015b46:	83 c4 08             	add    esp,0x8
c0015b49:	5b                   	pop    ebx
c0015b4a:	c3                   	ret    

c0015b4b <sysCallWait(regs*)>:
c0015b4b:	83 ec 10             	sub    esp,0x10
c0015b4e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015b52:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0015b55:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0015b58:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0015b5b:	e8 67 23 00 00       	call   c0017ec7 <waitTask(int, int*, int)>
c0015b60:	83 c4 1c             	add    esp,0x1c
c0015b63:	99                   	cdq    
c0015b64:	c3                   	ret    

c0015b65 <sysCallRmdir(regs*)>:
c0015b65:	56                   	push   esi
c0015b66:	53                   	push   ebx
c0015b67:	83 ec 10             	sub    esp,0x10
c0015b6a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015b6e:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0015b71:	68 14 01 00 00       	push   0x114
c0015b76:	e8 f1 90 ff ff       	call   c000ec6c <operator new(unsigned long)>
c0015b7b:	83 c4 0c             	add    esp,0xc
c0015b7e:	89 c3                	mov    ebx,eax
c0015b80:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015b85:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0015b88:	56                   	push   esi
c0015b89:	53                   	push   ebx
c0015b8a:	e8 fb 96 ff ff       	call   c000f28a <File::File(char const*, Process*)>
c0015b8f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015b92:	e8 cf 98 ff ff       	call   c000f466 <File::unlink()>
c0015b97:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015b9a:	89 c6                	mov    esi,eax
c0015b9c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015b9e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015ba1:	31 c0                	xor    eax,eax
c0015ba3:	85 f6                	test   esi,esi
c0015ba5:	0f 95 c0             	setne  al
c0015ba8:	31 d2                	xor    edx,edx
c0015baa:	f7 d8                	neg    eax
c0015bac:	83 d2 00             	adc    edx,0x0
c0015baf:	83 c4 14             	add    esp,0x14
c0015bb2:	f7 da                	neg    edx
c0015bb4:	5b                   	pop    ebx
c0015bb5:	5e                   	pop    esi
c0015bb6:	c3                   	ret    

c0015bb7 <sysCallUnlink(regs*)>:
c0015bb7:	56                   	push   esi
c0015bb8:	53                   	push   ebx
c0015bb9:	83 ec 10             	sub    esp,0x10
c0015bbc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015bc0:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0015bc3:	68 14 01 00 00       	push   0x114
c0015bc8:	e8 9f 90 ff ff       	call   c000ec6c <operator new(unsigned long)>
c0015bcd:	83 c4 0c             	add    esp,0xc
c0015bd0:	89 c3                	mov    ebx,eax
c0015bd2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015bd7:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0015bda:	56                   	push   esi
c0015bdb:	53                   	push   ebx
c0015bdc:	e8 a9 96 ff ff       	call   c000f28a <File::File(char const*, Process*)>
c0015be1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015be4:	e8 7d 98 ff ff       	call   c000f466 <File::unlink()>
c0015be9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015bec:	89 c6                	mov    esi,eax
c0015bee:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015bf0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015bf3:	31 c0                	xor    eax,eax
c0015bf5:	85 f6                	test   esi,esi
c0015bf7:	0f 95 c0             	setne  al
c0015bfa:	31 d2                	xor    edx,edx
c0015bfc:	f7 d8                	neg    eax
c0015bfe:	83 d2 00             	adc    edx,0x0
c0015c01:	83 c4 14             	add    esp,0x14
c0015c04:	f7 da                	neg    edx
c0015c06:	5b                   	pop    ebx
c0015c07:	5e                   	pop    esi
c0015c08:	c3                   	ret    

c0015c09 <sysCallGetArgv(regs*)>:
c0015c09:	83 ec 0c             	sub    esp,0xc
c0015c0c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015c10:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0015c13:	85 c0                	test   eax,eax
c0015c15:	78 2b                	js     c0015c42 <sysCallGetArgv(regs*)+0x39>
c0015c17:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0015c1d:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c0015c20:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c0015c26:	7d 1a                	jge    c0015c42 <sysCallGetArgv(regs*)+0x39>
c0015c28:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c0015c2f:	85 c0                	test   eax,eax
c0015c31:	74 17                	je     c0015c4a <sysCallGetArgv(regs*)+0x41>
c0015c33:	83 ec 08             	sub    esp,0x8
c0015c36:	50                   	push   eax
c0015c37:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0015c3a:	e8 68 aa fe ff       	call   c00006a7 <strcpy>
c0015c3f:	83 c4 10             	add    esp,0x10
c0015c42:	31 c0                	xor    eax,eax
c0015c44:	31 d2                	xor    edx,edx
c0015c46:	83 c4 0c             	add    esp,0xc
c0015c49:	c3                   	ret    
c0015c4a:	b8 01 00 00 00       	mov    eax,0x1
c0015c4f:	31 d2                	xor    edx,edx
c0015c51:	83 c4 0c             	add    esp,0xc
c0015c54:	c3                   	ret    

c0015c55 <sysCallTTYName(regs*)>:
c0015c55:	56                   	push   esi
c0015c56:	53                   	push   ebx
c0015c57:	53                   	push   ebx
c0015c58:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015c5c:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0015c5f:	85 c0                	test   eax,eax
c0015c61:	74 5f                	je     c0015cc2 <sysCallTTYName(regs*)+0x6d>
c0015c63:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0015c66:	83 f8 02             	cmp    eax,0x2
c0015c69:	77 3e                	ja     c0015ca9 <sysCallTTYName(regs*)+0x54>
c0015c6b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015c70:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015c73:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0015c79:	85 db                	test   ebx,ebx
c0015c7b:	74 45                	je     c0015cc2 <sysCallTTYName(regs*)+0x6d>
c0015c7d:	83 ec 0c             	sub    esp,0xc
c0015c80:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015c82:	53                   	push   ebx
c0015c83:	ff 10                	call   DWORD PTR [eax]
c0015c85:	83 c4 10             	add    esp,0x10
c0015c88:	84 c0                	test   al,al
c0015c8a:	74 41                	je     c0015ccd <sysCallTTYName(regs*)+0x78>
c0015c8c:	83 ec 08             	sub    esp,0x8
c0015c8f:	81 c3 1e 10 00 00    	add    ebx,0x101e
c0015c95:	53                   	push   ebx
c0015c96:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0015c99:	e8 09 aa fe ff       	call   c00006a7 <strcpy>
c0015c9e:	83 c4 10             	add    esp,0x10
c0015ca1:	31 c0                	xor    eax,eax
c0015ca3:	59                   	pop    ecx
c0015ca4:	31 d2                	xor    edx,edx
c0015ca6:	5b                   	pop    ebx
c0015ca7:	5e                   	pop    esi
c0015ca8:	c3                   	ret    
c0015ca9:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0015cae:	74 bb                	je     c0015c6b <sysCallTTYName(regs*)+0x16>
c0015cb0:	83 ec 0c             	sub    esp,0xc
c0015cb3:	50                   	push   eax
c0015cb4:	e8 c4 7f ff ff       	call   c000dc7d <getFromFileDescriptor(int)>
c0015cb9:	83 c4 10             	add    esp,0x10
c0015cbc:	89 c3                	mov    ebx,eax
c0015cbe:	85 db                	test   ebx,ebx
c0015cc0:	75 bb                	jne    c0015c7d <sysCallTTYName(regs*)+0x28>
c0015cc2:	59                   	pop    ecx
c0015cc3:	b8 01 00 00 00       	mov    eax,0x1
c0015cc8:	31 d2                	xor    edx,edx
c0015cca:	5b                   	pop    ebx
c0015ccb:	5e                   	pop    esi
c0015ccc:	c3                   	ret    
c0015ccd:	59                   	pop    ecx
c0015cce:	b8 02 00 00 00       	mov    eax,0x2
c0015cd3:	31 d2                	xor    edx,edx
c0015cd5:	5b                   	pop    ebx
c0015cd6:	5e                   	pop    esi
c0015cd7:	c3                   	ret    

c0015cd8 <sysCallGetEnv(regs*)>:
c0015cd8:	57                   	push   edi
c0015cd9:	56                   	push   esi
c0015cda:	53                   	push   ebx
c0015cdb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015cdf:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0015ce2:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c0015ce5:	57                   	push   edi
c0015ce6:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0015ce9:	56                   	push   esi
c0015cea:	68 dc 17 02 c0       	push   0xc00217dc
c0015cef:	e8 67 90 ff ff       	call   c000ed5b <Dbg::kprintf(char const*, ...)>
c0015cf4:	83 c4 10             	add    esp,0x10
c0015cf7:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0015cfa:	85 c9                	test   ecx,ecx
c0015cfc:	75 0c                	jne    c0015d0a <sysCallGetEnv(regs*)+0x32>
c0015cfe:	85 f6                	test   esi,esi
c0015d00:	74 11                	je     c0015d13 <sysCallGetEnv(regs*)+0x3b>
c0015d02:	5b                   	pop    ebx
c0015d03:	31 c0                	xor    eax,eax
c0015d05:	31 d2                	xor    edx,edx
c0015d07:	5e                   	pop    esi
c0015d08:	5f                   	pop    edi
c0015d09:	c3                   	ret    
c0015d0a:	85 f6                	test   esi,esi
c0015d0c:	74 2b                	je     c0015d39 <sysCallGetEnv(regs*)+0x61>
c0015d0e:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0015d11:	eb ef                	jmp    c0015d02 <sysCallGetEnv(regs*)+0x2a>
c0015d13:	83 ec 0c             	sub    esp,0xc
c0015d16:	68 10 18 02 c0       	push   0xc0021810
c0015d1b:	e8 05 a9 fe ff       	call   c0000625 <strlen>
c0015d20:	89 c3                	mov    ebx,eax
c0015d22:	58                   	pop    eax
c0015d23:	5a                   	pop    edx
c0015d24:	53                   	push   ebx
c0015d25:	68 e3 16 02 c0       	push   0xc00216e3
c0015d2a:	e8 2c 90 ff ff       	call   c000ed5b <Dbg::kprintf(char const*, ...)>
c0015d2f:	89 d8                	mov    eax,ebx
c0015d31:	83 c4 10             	add    esp,0x10
c0015d34:	99                   	cdq    
c0015d35:	5b                   	pop    ebx
c0015d36:	5e                   	pop    esi
c0015d37:	5f                   	pop    edi
c0015d38:	c3                   	ret    
c0015d39:	83 ec 08             	sub    esp,0x8
c0015d3c:	68 10 18 02 c0       	push   0xc0021810
c0015d41:	57                   	push   edi
c0015d42:	e8 60 a9 fe ff       	call   c00006a7 <strcpy>
c0015d47:	83 c4 10             	add    esp,0x10
c0015d4a:	eb b6                	jmp    c0015d02 <sysCallGetEnv(regs*)+0x2a>

c0015d4c <sysCallUSleep(regs*)>:
c0015d4c:	83 ec 14             	sub    esp,0x14
c0015d4f:	b8 e8 03 00 00       	mov    eax,0x3e8
c0015d54:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0015d58:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c0015d5f:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c0015d62:	01 ca                	add    edx,ecx
c0015d64:	52                   	push   edx
c0015d65:	50                   	push   eax
c0015d66:	e8 f5 21 00 00       	call   c0017f60 <nanoSleep(unsigned long long)>
c0015d6b:	31 c0                	xor    eax,eax
c0015d6d:	31 d2                	xor    edx,edx
c0015d6f:	83 c4 1c             	add    esp,0x1c
c0015d72:	c3                   	ret    

c0015d73 <sysCallSpawn(regs*)>:
c0015d73:	56                   	push   esi
c0015d74:	53                   	push   ebx
c0015d75:	53                   	push   ebx
c0015d76:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015d7a:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0015d7d:	85 f6                	test   esi,esi
c0015d7f:	75 08                	jne    c0015d89 <sysCallSpawn(regs*)+0x16>
c0015d81:	59                   	pop    ecx
c0015d82:	31 c0                	xor    eax,eax
c0015d84:	31 d2                	xor    edx,edx
c0015d86:	5b                   	pop    ebx
c0015d87:	5e                   	pop    esi
c0015d88:	c3                   	ret    
c0015d89:	83 ec 0c             	sub    esp,0xc
c0015d8c:	68 3b 07 00 00       	push   0x73b
c0015d91:	e8 d6 8e ff ff       	call   c000ec6c <operator new(unsigned long)>
c0015d96:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0015d99:	89 c6                	mov    esi,eax
c0015d9b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015da0:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0015da3:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015da6:	56                   	push   esi
c0015da7:	e8 14 19 00 00       	call   c00176c0 <Process::Process(char const*, Process*, char**)>
c0015dac:	83 c4 20             	add    esp,0x20
c0015daf:	80 be 3a 07 00 00 00 	cmp    BYTE PTR [esi+0x73a],0x0
c0015db6:	75 c9                	jne    c0015d81 <sysCallSpawn(regs*)+0xe>
c0015db8:	83 ec 0c             	sub    esp,0xc
c0015dbb:	56                   	push   esi
c0015dbc:	e8 65 1e 00 00       	call   c0017c26 <Process::createUserThread()>
c0015dc1:	8b 06                	mov    eax,DWORD PTR [esi]
c0015dc3:	83 c4 10             	add    esp,0x10
c0015dc6:	99                   	cdq    
c0015dc7:	59                   	pop    ecx
c0015dc8:	5b                   	pop    ebx
c0015dc9:	5e                   	pop    esi
c0015dca:	c3                   	ret    

c0015dcb <sysAppSettings(regs*)>:
c0015dcb:	53                   	push   ebx
c0015dcc:	83 ec 08             	sub    esp,0x8
c0015dcf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015dd3:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0015dd6:	8b 83 00 01 00 00    	mov    eax,DWORD PTR [ebx+0x100]
c0015ddc:	25 e0 1f 00 00       	and    eax,0x1fe0
c0015de1:	66 3d c0 09          	cmp    ax,0x9c0
c0015de5:	75 2f                	jne    c0015e16 <sysAppSettings(regs*)+0x4b>
c0015de7:	8a 83 00 01 00 00    	mov    al,BYTE PTR [ebx+0x100]
c0015ded:	83 e0 1f             	and    eax,0x1f
c0015df0:	3c 01                	cmp    al,0x1
c0015df2:	74 2e                	je     c0015e22 <sysAppSettings(regs*)+0x57>
c0015df4:	3c 07                	cmp    al,0x7
c0015df6:	0f 84 bd 00 00 00    	je     c0015eb9 <sysAppSettings(regs*)+0xee>
c0015dfc:	84 c0                	test   al,al
c0015dfe:	0f 84 dc 00 00 00    	je     c0015ee0 <sysAppSettings(regs*)+0x115>
c0015e04:	3c 08                	cmp    al,0x8
c0015e06:	74 6d                	je     c0015e75 <sysAppSettings(regs*)+0xaa>
c0015e08:	0f b6 c0             	movzx  eax,al
c0015e0b:	83 c4 08             	add    esp,0x8
c0015e0e:	05 e8 03 00 00       	add    eax,0x3e8
c0015e13:	5b                   	pop    ebx
c0015e14:	99                   	cdq    
c0015e15:	c3                   	ret    
c0015e16:	b8 01 00 00 00       	mov    eax,0x1
c0015e1b:	31 d2                	xor    edx,edx
c0015e1d:	83 c4 08             	add    esp,0x8
c0015e20:	5b                   	pop    ebx
c0015e21:	c3                   	ret    
c0015e22:	51                   	push   ecx
c0015e23:	68 00 01 00 00       	push   0x100
c0015e28:	6a 00                	push   0x0
c0015e2a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015e2f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015e32:	83 c0 0c             	add    eax,0xc
c0015e35:	50                   	push   eax
c0015e36:	e8 cd a7 fe ff       	call   c0000608 <memset>
c0015e3b:	83 c4 0c             	add    esp,0xc
c0015e3e:	68 ff 00 00 00       	push   0xff
c0015e43:	53                   	push   ebx
c0015e44:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015e49:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015e4c:	83 c0 0c             	add    eax,0xc
c0015e4f:	50                   	push   eax
c0015e50:	e8 7d a7 fe ff       	call   c00005d2 <memcpy>
c0015e55:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015e5a:	5b                   	pop    ebx
c0015e5b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015e5e:	5a                   	pop    edx
c0015e5f:	8d 50 0c             	lea    edx,[eax+0xc]
c0015e62:	52                   	push   edx
c0015e63:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015e69:	e8 58 6f ff ff       	call   c000cdc6 <VgaText::setTitle(char*)>
c0015e6e:	83 c4 10             	add    esp,0x10
c0015e71:	31 c0                	xor    eax,eax
c0015e73:	eb a6                	jmp    c0015e1b <sysAppSettings(regs*)+0x50>
c0015e75:	83 ec 08             	sub    esp,0x8
c0015e78:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c0015e7e:	83 e0 0f             	and    eax,0xf
c0015e81:	50                   	push   eax
c0015e82:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015e87:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015e8a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015e90:	e8 21 6f ff ff       	call   c000cdb6 <VgaText::setTitleColour(VgaColour)>
c0015e95:	58                   	pop    eax
c0015e96:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c0015e9c:	5a                   	pop    edx
c0015e9d:	c1 e8 04             	shr    eax,0x4
c0015ea0:	83 e0 0f             	and    eax,0xf
c0015ea3:	50                   	push   eax
c0015ea4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015ea9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015eac:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015eb2:	e8 ef 6e ff ff       	call   c000cda6 <VgaText::setTitleTextColour(VgaColour)>
c0015eb7:	eb b5                	jmp    c0015e6e <sysAppSettings(regs*)+0xa3>
c0015eb9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015ebe:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015ec1:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c0015ec7:	8a 83 01 01 00 00    	mov    al,BYTE PTR [ebx+0x101]
c0015ecd:	c0 e8 06             	shr    al,0x6
c0015ed0:	83 e0 01             	and    eax,0x1
c0015ed3:	88 82 1c 10 00 00    	mov    BYTE PTR [edx+0x101c],al
c0015ed9:	31 c0                	xor    eax,eax
c0015edb:	e9 3b ff ff ff       	jmp    c0015e1b <sysAppSettings(regs*)+0x50>
c0015ee0:	b8 02 00 00 00       	mov    eax,0x2
c0015ee5:	e9 31 ff ff ff       	jmp    c0015e1b <sysAppSettings(regs*)+0x50>

c0015eea <sysSetFatAttrib(regs*)>:
c0015eea:	57                   	push   edi
c0015eeb:	56                   	push   esi
c0015eec:	53                   	push   ebx
c0015eed:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015ef1:	83 ec 0c             	sub    esp,0xc
c0015ef4:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0015ef7:	68 14 01 00 00       	push   0x114
c0015efc:	e8 6b 8d ff ff       	call   c000ec6c <operator new(unsigned long)>
c0015f01:	83 c4 0c             	add    esp,0xc
c0015f04:	89 c3                	mov    ebx,eax
c0015f06:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015f0b:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0015f0e:	57                   	push   edi
c0015f0f:	53                   	push   ebx
c0015f10:	e8 75 93 ff ff       	call   c000f28a <File::File(char const*, Process*)>
c0015f15:	83 c4 0c             	add    esp,0xc
c0015f18:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0015f1b:	0f b6 d4             	movzx  edx,ah
c0015f1e:	0f b6 c0             	movzx  eax,al
c0015f21:	52                   	push   edx
c0015f22:	50                   	push   eax
c0015f23:	53                   	push   ebx
c0015f24:	e8 d7 95 ff ff       	call   c000f500 <File::chfatattr(unsigned char, unsigned char)>
c0015f29:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015f2c:	89 c6                	mov    esi,eax
c0015f2e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015f30:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015f33:	83 c4 10             	add    esp,0x10
c0015f36:	31 c0                	xor    eax,eax
c0015f38:	5b                   	pop    ebx
c0015f39:	85 f6                	test   esi,esi
c0015f3b:	5e                   	pop    esi
c0015f3c:	0f 95 c0             	setne  al
c0015f3f:	5f                   	pop    edi
c0015f40:	31 d2                	xor    edx,edx
c0015f42:	f7 d8                	neg    eax
c0015f44:	83 d2 00             	adc    edx,0x0
c0015f47:	f7 da                	neg    edx
c0015f49:	c3                   	ret    

c0015f4a <sysPanic(regs*)>:
c0015f4a:	83 ec 18             	sub    esp,0x18
c0015f4d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015f51:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0015f54:	e8 97 ea ff ff       	call   c00149f0 <Krnl::panic(char const*)>
c0015f59:	c7 04 24 f7 16 02 c0 	mov    DWORD PTR [esp],0xc00216f7
c0015f60:	e8 8b ea ff ff       	call   c00149f0 <Krnl::panic(char const*)>
c0015f65:	b8 01 00 00 00       	mov    eax,0x1
c0015f6a:	31 d2                	xor    edx,edx
c0015f6c:	83 c4 1c             	add    esp,0x1c
c0015f6f:	c3                   	ret    

c0015f70 <sysPipe(regs*)>:
c0015f70:	57                   	push   edi
c0015f71:	56                   	push   esi
c0015f72:	53                   	push   ebx
c0015f73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015f77:	83 ec 0c             	sub    esp,0xc
c0015f7a:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0015f7d:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0015f80:	6a 20                	push   0x20
c0015f82:	e8 e5 8c ff ff       	call   c000ec6c <operator new(unsigned long)>
c0015f87:	89 c3                	mov    ebx,eax
c0015f89:	58                   	pop    eax
c0015f8a:	5a                   	pop    edx
c0015f8b:	68 00 50 00 00       	push   0x5000
c0015f90:	53                   	push   ebx
c0015f91:	e8 6e 67 ff ff       	call   c000c704 <Pipe::Pipe(int)>
c0015f96:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015f99:	e8 2a 7a ff ff       	call   c000d9c8 <UnixFile::getFileDescriptor()>
c0015f9e:	89 07                	mov    DWORD PTR [edi],eax
c0015fa0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015fa3:	e8 20 7a ff ff       	call   c000d9c8 <UnixFile::getFileDescriptor()>
c0015fa8:	83 c4 10             	add    esp,0x10
c0015fab:	89 06                	mov    DWORD PTR [esi],eax
c0015fad:	31 d2                	xor    edx,edx
c0015faf:	5b                   	pop    ebx
c0015fb0:	31 c0                	xor    eax,eax
c0015fb2:	5e                   	pop    esi
c0015fb3:	5f                   	pop    edi
c0015fb4:	c3                   	ret    

c0015fb5 <sysGetUnixTime(regs*)>:
c0015fb5:	a1 08 34 02 c0       	mov    eax,ds:0xc0023408
c0015fba:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0015fc0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015fc4:	e9 89 9c ff ff       	jmp    c000fc52 <Clock::timeInSecondsLocal()>

c0015fc9 <string_ends_with(char const*, char const*)>:
c0015fc9:	57                   	push   edi
c0015fca:	56                   	push   esi
c0015fcb:	53                   	push   ebx
c0015fcc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015fd0:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0015fd4:	83 ec 0c             	sub    esp,0xc
c0015fd7:	53                   	push   ebx
c0015fd8:	e8 48 a6 fe ff       	call   c0000625 <strlen>
c0015fdd:	89 3c 24             	mov    DWORD PTR [esp],edi
c0015fe0:	89 c6                	mov    esi,eax
c0015fe2:	e8 3e a6 fe ff       	call   c0000625 <strlen>
c0015fe7:	83 c4 10             	add    esp,0x10
c0015fea:	39 c6                	cmp    esi,eax
c0015fec:	7d 06                	jge    c0015ff4 <string_ends_with(char const*, char const*)+0x2b>
c0015fee:	5b                   	pop    ebx
c0015fef:	31 c0                	xor    eax,eax
c0015ff1:	5e                   	pop    esi
c0015ff2:	5f                   	pop    edi
c0015ff3:	c3                   	ret    
c0015ff4:	83 ec 08             	sub    esp,0x8
c0015ff7:	29 c6                	sub    esi,eax
c0015ff9:	57                   	push   edi
c0015ffa:	01 f3                	add    ebx,esi
c0015ffc:	53                   	push   ebx
c0015ffd:	e8 f6 a6 fe ff       	call   c00006f8 <strcmp>
c0016002:	83 c4 10             	add    esp,0x10
c0016005:	85 c0                	test   eax,eax
c0016007:	5b                   	pop    ebx
c0016008:	0f 94 c0             	sete   al
c001600b:	5e                   	pop    esi
c001600c:	0f b6 c0             	movzx  eax,al
c001600f:	5f                   	pop    edi
c0016010:	c3                   	ret    

c0016011 <sysCallOpen(regs*)>:
c0016011:	56                   	push   esi
c0016012:	53                   	push   ebx
c0016013:	81 ec 04 01 00 00    	sub    esp,0x104
c0016019:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0016020:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0016023:	85 c9                	test   ecx,ecx
c0016025:	0f 84 b3 00 00 00    	je     c00160de <sysCallOpen(regs*)+0xcd>
c001602b:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001602e:	85 c0                	test   eax,eax
c0016030:	0f 84 a8 00 00 00    	je     c00160de <sysCallOpen(regs*)+0xcd>
c0016036:	52                   	push   edx
c0016037:	68 06 17 02 c0       	push   0xc0021706
c001603c:	50                   	push   eax
c001603d:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0016041:	56                   	push   esi
c0016042:	e8 99 90 ff ff       	call   c000f0e0 <standardiseFiles(char*, char const*, char const*)>
c0016047:	89 34 24             	mov    DWORD PTR [esp],esi
c001604a:	e8 d6 a5 fe ff       	call   c0000625 <strlen>
c001604f:	83 c4 10             	add    esp,0x10
c0016052:	48                   	dec    eax
c0016053:	74 1d                	je     c0016072 <sysCallOpen(regs*)+0x61>
c0016055:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c0016058:	eb 0f                	jmp    c0016069 <sysCallOpen(regs*)+0x58>
c001605a:	80 fa 3a             	cmp    dl,0x3a
c001605d:	74 0f                	je     c001606e <sysCallOpen(regs*)+0x5d>
c001605f:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0016063:	48                   	dec    eax
c0016064:	74 0c                	je     c0016072 <sysCallOpen(regs*)+0x61>
c0016066:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0016069:	80 fa 2e             	cmp    dl,0x2e
c001606c:	75 ec                	jne    c001605a <sysCallOpen(regs*)+0x49>
c001606e:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0016072:	83 ec 08             	sub    esp,0x8
c0016075:	68 0a 17 02 c0       	push   0xc002170a
c001607a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001607d:	e8 47 ff ff ff       	call   c0015fc9 <string_ends_with(char const*, char const*)>
c0016082:	83 c4 10             	add    esp,0x10
c0016085:	85 c0                	test   eax,eax
c0016087:	75 17                	jne    c00160a0 <sysCallOpen(regs*)+0x8f>
c0016089:	83 ec 08             	sub    esp,0x8
c001608c:	68 2b 17 02 c0       	push   0xc002172b
c0016091:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016094:	e8 30 ff ff ff       	call   c0015fc9 <string_ends_with(char const*, char const*)>
c0016099:	83 c4 10             	add    esp,0x10
c001609c:	85 c0                	test   eax,eax
c001609e:	74 51                	je     c00160f1 <sysCallOpen(regs*)+0xe0>
c00160a0:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00160a3:	83 ec 08             	sub    esp,0x8
c00160a6:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c00160ac:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00160b3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00160b6:	ff 30                	push   DWORD PTR [eax]
c00160b8:	68 0f 17 02 c0       	push   0xc002170f
c00160bd:	e8 99 8c ff ff       	call   c000ed5b <Dbg::kprintf(char const*, ...)>
c00160c2:	c7 04 24 1e 17 02 c0 	mov    DWORD PTR [esp],0xc002171e
c00160c9:	e8 8d 8c ff ff       	call   c000ed5b <Dbg::kprintf(char const*, ...)>
c00160ce:	83 c4 10             	add    esp,0x10
c00160d1:	81 c4 04 01 00 00    	add    esp,0x104
c00160d7:	31 c0                	xor    eax,eax
c00160d9:	31 d2                	xor    edx,edx
c00160db:	5b                   	pop    ebx
c00160dc:	5e                   	pop    esi
c00160dd:	c3                   	ret    
c00160de:	81 c4 04 01 00 00    	add    esp,0x104
c00160e4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00160e9:	ba ff ff ff ff       	mov    edx,0xffffffff
c00160ee:	5b                   	pop    ebx
c00160ef:	5e                   	pop    esi
c00160f0:	c3                   	ret    
c00160f1:	83 ec 08             	sub    esp,0x8
c00160f4:	68 0b 17 02 c0       	push   0xc002170b
c00160f9:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00160fc:	e8 f7 a5 fe ff       	call   c00006f8 <strcmp>
c0016101:	83 c4 10             	add    esp,0x10
c0016104:	85 c0                	test   eax,eax
c0016106:	74 98                	je     c00160a0 <sysCallOpen(regs*)+0x8f>
c0016108:	83 ec 08             	sub    esp,0x8
c001610b:	68 0a 17 02 c0       	push   0xc002170a
c0016110:	56                   	push   esi
c0016111:	e8 b3 fe ff ff       	call   c0015fc9 <string_ends_with(char const*, char const*)>
c0016116:	83 c4 10             	add    esp,0x10
c0016119:	85 c0                	test   eax,eax
c001611b:	75 83                	jne    c00160a0 <sysCallOpen(regs*)+0x8f>
c001611d:	83 ec 08             	sub    esp,0x8
c0016120:	68 30 17 02 c0       	push   0xc0021730
c0016125:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016128:	e8 9c fe ff ff       	call   c0015fc9 <string_ends_with(char const*, char const*)>
c001612d:	83 c4 10             	add    esp,0x10
c0016130:	85 c0                	test   eax,eax
c0016132:	0f 85 d1 00 00 00    	jne    c0016209 <sysCallOpen(regs*)+0x1f8>
c0016138:	83 ec 08             	sub    esp,0x8
c001613b:	68 35 17 02 c0       	push   0xc0021735
c0016140:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016143:	e8 81 fe ff ff       	call   c0015fc9 <string_ends_with(char const*, char const*)>
c0016148:	83 c4 10             	add    esp,0x10
c001614b:	85 c0                	test   eax,eax
c001614d:	0f 85 b6 00 00 00    	jne    c0016209 <sysCallOpen(regs*)+0x1f8>
c0016153:	83 ec 08             	sub    esp,0x8
c0016156:	68 31 17 02 c0       	push   0xc0021731
c001615b:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001615e:	e8 95 a5 fe ff       	call   c00006f8 <strcmp>
c0016163:	83 c4 10             	add    esp,0x10
c0016166:	85 c0                	test   eax,eax
c0016168:	0f 84 9b 00 00 00    	je     c0016209 <sysCallOpen(regs*)+0x1f8>
c001616e:	83 ec 08             	sub    esp,0x8
c0016171:	68 30 17 02 c0       	push   0xc0021730
c0016176:	56                   	push   esi
c0016177:	e8 4d fe ff ff       	call   c0015fc9 <string_ends_with(char const*, char const*)>
c001617c:	83 c4 10             	add    esp,0x10
c001617f:	85 c0                	test   eax,eax
c0016181:	0f 85 82 00 00 00    	jne    c0016209 <sysCallOpen(regs*)+0x1f8>
c0016187:	83 ec 0c             	sub    esp,0xc
c001618a:	68 14 01 00 00       	push   0x114
c001618f:	e8 d8 8a ff ff       	call   c000ec6c <operator new(unsigned long)>
c0016194:	83 c4 0c             	add    esp,0xc
c0016197:	89 c6                	mov    esi,eax
c0016199:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001619e:	ff 70 40             	push   DWORD PTR [eax+0x40]
c00161a1:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00161a4:	56                   	push   esi
c00161a5:	e8 e0 90 ff ff       	call   c000f28a <File::File(char const*, Process*)>
c00161aa:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00161ad:	83 c4 10             	add    esp,0x10
c00161b0:	0f b6 c2             	movzx  eax,dl
c00161b3:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c00161b6:	89 d0                	mov    eax,edx
c00161b8:	83 e0 01             	and    eax,0x1
c00161bb:	f6 c2 02             	test   dl,0x2
c00161be:	74 03                	je     c00161c3 <sysCallOpen(regs*)+0x1b2>
c00161c0:	83 c8 02             	or     eax,0x2
c00161c3:	f6 c2 04             	test   dl,0x4
c00161c6:	74 03                	je     c00161cb <sysCallOpen(regs*)+0x1ba>
c00161c8:	83 c8 04             	or     eax,0x4
c00161cb:	f6 c2 08             	test   dl,0x8
c00161ce:	74 03                	je     c00161d3 <sysCallOpen(regs*)+0x1c2>
c00161d0:	83 c8 0a             	or     eax,0xa
c00161d3:	83 e2 10             	and    edx,0x10
c00161d6:	74 03                	je     c00161db <sysCallOpen(regs*)+0x1ca>
c00161d8:	83 c8 12             	or     eax,0x12
c00161db:	83 ec 08             	sub    esp,0x8
c00161de:	50                   	push   eax
c00161df:	56                   	push   esi
c00161e0:	e8 09 91 ff ff       	call   c000f2ee <File::open(FileOpenMode)>
c00161e5:	83 c4 10             	add    esp,0x10
c00161e8:	85 c0                	test   eax,eax
c00161ea:	0f 85 ee fe ff ff    	jne    c00160de <sysCallOpen(regs*)+0xcd>
c00161f0:	83 ec 0c             	sub    esp,0xc
c00161f3:	56                   	push   esi
c00161f4:	e8 cf 77 ff ff       	call   c000d9c8 <UnixFile::getFileDescriptor()>
c00161f9:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00161fc:	89 02                	mov    DWORD PTR [edx],eax
c00161fe:	c1 f8 1f             	sar    eax,0x1f
c0016201:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0016204:	e9 c5 fe ff ff       	jmp    c00160ce <sysCallOpen(regs*)+0xbd>
c0016209:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001620c:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0016212:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0016219:	e9 b3 fe ff ff       	jmp    c00160d1 <sysCallOpen(regs*)+0xc0>

c001621e <setupSystemCalls()>:
c001621e:	c7 05 60 3e 02 c0 3a 54 01 c0 	mov    DWORD PTR ds:0xc0023e60,0xc001543a
c0016228:	c7 05 64 3e 02 c0 2e 52 01 c0 	mov    DWORD PTR ds:0xc0023e64,0xc001522e
c0016232:	c7 05 68 3e 02 c0 43 53 01 c0 	mov    DWORD PTR ds:0xc0023e68,0xc0015343
c001623c:	c7 05 6c 3e 02 c0 b7 53 01 c0 	mov    DWORD PTR ds:0xc0023e6c,0xc00153b7
c0016246:	c7 05 70 3e 02 c0 db 52 01 c0 	mov    DWORD PTR ds:0xc0023e70,0xc00152db
c0016250:	c7 05 74 3e 02 c0 54 54 01 c0 	mov    DWORD PTR ds:0xc0023e74,0xc0015454
c001625a:	c7 05 78 3e 02 c0 e9 55 01 c0 	mov    DWORD PTR ds:0xc0023e78,0xc00155e9
c0016264:	c7 05 7c 3e 02 c0 08 56 01 c0 	mov    DWORD PTR ds:0xc0023e7c,0xc0015608
c001626e:	c7 05 84 3e 02 c0 97 59 01 c0 	mov    DWORD PTR ds:0xc0023e84,0xc0015997
c0016278:	c7 05 80 3e 02 c0 11 60 01 c0 	mov    DWORD PTR ds:0xc0023e80,0xc0016011
c0016282:	c7 05 88 3e 02 c0 1f 5a 01 c0 	mov    DWORD PTR ds:0xc0023e88,0xc0015a1f
c001628c:	c7 05 8c 3e 02 c0 95 56 01 c0 	mov    DWORD PTR ds:0xc0023e8c,0xc0015695
c0016296:	c7 05 90 3e 02 c0 60 54 01 c0 	mov    DWORD PTR ds:0xc0023e90,0xc0015460
c00162a0:	c7 05 94 3e 02 c0 65 54 01 c0 	mov    DWORD PTR ds:0xc0023e94,0xc0015465
c00162aa:	c7 05 98 3e 02 c0 8c 5a 01 c0 	mov    DWORD PTR ds:0xc0023e98,0xc0015a8c
c00162b4:	c7 05 9c 3e 02 c0 e5 5a 01 c0 	mov    DWORD PTR ds:0xc0023e9c,0xc0015ae5
c00162be:	c7 05 a0 3e 02 c0 7d 57 01 c0 	mov    DWORD PTR ds:0xc0023ea0,0xc001577d
c00162c8:	c7 05 a4 3e 02 c0 e6 57 01 c0 	mov    DWORD PTR ds:0xc0023ea4,0xc00157e6
c00162d2:	c7 05 a8 3e 02 c0 14 59 01 c0 	mov    DWORD PTR ds:0xc0023ea8,0xc0015914
c00162dc:	c7 05 ac 3e 02 c0 6a 54 01 c0 	mov    DWORD PTR ds:0xc0023eac,0xc001546a
c00162e6:	c7 05 b0 3e 02 c0 4b 5b 01 c0 	mov    DWORD PTR ds:0xc0023eb0,0xc0015b4b
c00162f0:	c7 05 b4 3e 02 c0 74 54 01 c0 	mov    DWORD PTR ds:0xc0023eb4,0xc0015474
c00162fa:	c7 05 b8 3e 02 c0 7f 54 01 c0 	mov    DWORD PTR ds:0xc0023eb8,0xc001547f
c0016304:	c7 05 bc 3e 02 c0 65 5b 01 c0 	mov    DWORD PTR ds:0xc0023ebc,0xc0015b65
c001630e:	c7 05 c0 3e 02 c0 b7 5b 01 c0 	mov    DWORD PTR ds:0xc0023ec0,0xc0015bb7
c0016318:	c7 05 c4 3e 02 c0 67 56 01 c0 	mov    DWORD PTR ds:0xc0023ec4,0xc0015667
c0016322:	c7 05 c8 3e 02 c0 09 5c 01 c0 	mov    DWORD PTR ds:0xc0023ec8,0xc0015c09
c001632c:	c7 05 cc 3e 02 c0 24 56 01 c0 	mov    DWORD PTR ds:0xc0023ecc,0xc0015624
c0016336:	c7 05 d0 3e 02 c0 55 5c 01 c0 	mov    DWORD PTR ds:0xc0023ed0,0xc0015c55
c0016340:	c7 05 d4 3e 02 c0 23 57 01 c0 	mov    DWORD PTR ds:0xc0023ed4,0xc0015723
c001634a:	c7 05 d8 3e 02 c0 4c 5d 01 c0 	mov    DWORD PTR ds:0xc0023ed8,0xc0015d4c
c0016354:	c7 05 dc 3e 02 c0 63 58 01 c0 	mov    DWORD PTR ds:0xc0023edc,0xc0015863
c001635e:	c7 05 e0 3e 02 c0 73 5d 01 c0 	mov    DWORD PTR ds:0xc0023ee0,0xc0015d73
c0016368:	c7 05 e4 3e 02 c0 d8 5c 01 c0 	mov    DWORD PTR ds:0xc0023ee4,0xc0015cd8
c0016372:	c7 05 e8 3e 02 c0 cb 5d 01 c0 	mov    DWORD PTR ds:0xc0023ee8,0xc0015dcb
c001637c:	c7 05 ec 3e 02 c0 8a 54 01 c0 	mov    DWORD PTR ds:0xc0023eec,0xc001548a
c0016386:	c7 05 f0 3e 02 c0 f4 54 01 c0 	mov    DWORD PTR ds:0xc0023ef0,0xc00154f4
c0016390:	c7 05 f4 3e 02 c0 3a 55 01 c0 	mov    DWORD PTR ds:0xc0023ef4,0xc001553a
c001639a:	c7 05 f8 3e 02 c0 ea 5e 01 c0 	mov    DWORD PTR ds:0xc0023ef8,0xc0015eea
c00163a4:	c7 05 fc 3e 02 c0 4a 5f 01 c0 	mov    DWORD PTR ds:0xc0023efc,0xc0015f4a
c00163ae:	c7 05 00 3f 02 c0 8b 55 01 c0 	mov    DWORD PTR ds:0xc0023f00,0xc001558b
c00163b8:	c7 05 04 3f 02 c0 70 5f 01 c0 	mov    DWORD PTR ds:0xc0023f04,0xc0015f70
c00163c2:	c7 05 08 3f 02 c0 b5 5f 01 c0 	mov    DWORD PTR ds:0xc0023f08,0xc0015fb5
c00163cc:	c7 05 0c 3f 02 c0 46 52 01 c0 	mov    DWORD PTR ds:0xc0023f0c,0xc0015246
c00163d6:	c3                   	ret    

c00163d7 <systemCall(regs*, void*)>:
c00163d7:	53                   	push   ebx
c00163d8:	83 ec 08             	sub    esp,0x8
c00163db:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00163df:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00163e2:	83 f8 7f             	cmp    eax,0x7f
c00163e5:	77 30                	ja     c0016417 <systemCall(regs*, void*)+0x40>
c00163e7:	83 3c 85 60 3e 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffdc1a0],0x0
c00163ef:	74 26                	je     c0016417 <systemCall(regs*, void*)+0x40>
c00163f1:	51                   	push   ecx
c00163f2:	51                   	push   ecx
c00163f3:	50                   	push   eax
c00163f4:	68 3a 17 02 c0       	push   0xc002173a
c00163f9:	e8 5d 89 ff ff       	call   c000ed5b <Dbg::kprintf(char const*, ...)>
c00163fe:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0016401:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016404:	ff 14 85 60 3e 02 c0 	call   DWORD PTR [eax*4-0x3ffdc1a0]
c001640b:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001640e:	c7 04 24 48 17 02 c0 	mov    DWORD PTR [esp],0xc0021748
c0016415:	eb 08                	jmp    c001641f <systemCall(regs*, void*)+0x48>
c0016417:	52                   	push   edx
c0016418:	52                   	push   edx
c0016419:	50                   	push   eax
c001641a:	68 57 17 02 c0       	push   0xc0021757
c001641f:	e8 37 89 ff ff       	call   c000ed5b <Dbg::kprintf(char const*, ...)>
c0016424:	83 c4 10             	add    esp,0x10
c0016427:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001642c:	31 d2                	xor    edx,edx
c001642e:	83 c4 08             	add    esp,0x8
c0016431:	5b                   	pop    ebx
c0016432:	c3                   	ret    

c0016433 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0016433:	55                   	push   ebp
c0016434:	89 e5                	mov    ebp,esp
c0016436:	57                   	push   edi
c0016437:	56                   	push   esi
c0016438:	53                   	push   ebx
c0016439:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001643f:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0016442:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0016445:	85 c0                	test   eax,eax
c0016447:	0f 95 c1             	setne  cl
c001644a:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c001644e:	0f 94 c2             	sete   dl
c0016451:	84 d1                	test   cl,dl
c0016453:	74 26                	je     c001647b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c0016455:	f7 45 14 ff 0f 00 00 	test   DWORD PTR [ebp+0x14],0xfff
c001645c:	74 1d                	je     c001647b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c001645e:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0016461:	8d 91 00 10 00 00    	lea    edx,[ecx+0x1000]
c0016467:	89 d6                	mov    esi,edx
c0016469:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001646f:	81 ce 00 f0 ff ff    	or     esi,0xfffff000
c0016475:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0016478:	89 75 10             	mov    DWORD PTR [ebp+0x10],esi
c001647b:	83 ec 0c             	sub    esp,0xc
c001647e:	05 ff 0f 00 00       	add    eax,0xfff
c0016483:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0016486:	6a 01                	push   0x1
c0016488:	8d 99 ff 0f 00 00    	lea    ebx,[ecx+0xfff]
c001648e:	89 85 d4 ef ff ff    	mov    DWORD PTR [ebp-0x102c],eax
c0016494:	e8 68 79 ff ff       	call   c000de01 <Virt::allocateKernelVirtualPages(int)>
c0016499:	83 c4 10             	add    esp,0x10
c001649c:	89 c6                	mov    esi,eax
c001649e:	81 fb ff 0f 00 00    	cmp    ebx,0xfff
c00164a4:	0f 86 21 01 00 00    	jbe    c00165cb <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x198>
c00164aa:	c1 eb 0c             	shr    ebx,0xc
c00164ad:	c7 85 d0 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x1030],0x0
c00164b7:	89 9d cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],ebx
c00164bd:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c00164c0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00164c3:	8b 95 cc ef ff ff    	mov    edx,DWORD PTR [ebp-0x1034]
c00164c9:	03 45 14             	add    eax,DWORD PTR [ebp+0x14]
c00164cc:	29 d8                	sub    eax,ebx
c00164ce:	39 95 d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],edx
c00164d4:	0f 83 f4 00 00 00    	jae    c00165ce <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x19b>
c00164da:	83 ec 0c             	sub    esp,0xc
c00164dd:	8d 95 e4 ef ff ff    	lea    edx,[ebp-0x101c]
c00164e3:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00164e6:	3d 00 10 00 00       	cmp    eax,0x1000
c00164eb:	8b 09                	mov    ecx,DWORD PTR [ecx]
c00164ed:	52                   	push   edx
c00164ee:	8d 95 e8 ef ff ff    	lea    edx,[ebp-0x1018]
c00164f4:	52                   	push   edx
c00164f5:	76 05                	jbe    c00164fc <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc9>
c00164f7:	b8 00 10 00 00       	mov    eax,0x1000
c00164fc:	31 d2                	xor    edx,edx
c00164fe:	52                   	push   edx
c00164ff:	50                   	push   eax
c0016500:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0016503:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016506:	83 c4 20             	add    esp,0x20
c0016509:	85 c0                	test   eax,eax
c001650b:	74 1f                	je     c001652c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf9>
c001650d:	51                   	push   ecx
c001650e:	51                   	push   ecx
c001650f:	50                   	push   eax
c0016510:	68 5c 18 02 c0       	push   0xc002185c
c0016515:	e8 41 88 ff ff       	call   c000ed5b <Dbg::kprintf(char const*, ...)>
c001651a:	89 34 24             	mov    DWORD PTR [esp],esi
c001651d:	e8 39 7c ff ff       	call   c000e15b <Virt::freeKernelVirtualPages(unsigned long)>
c0016522:	83 c4 10             	add    esp,0x10
c0016525:	31 c0                	xor    eax,eax
c0016527:	e9 7c 01 00 00       	jmp    c00166a8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c001652c:	e8 e7 14 00 00       	call   c0017a18 <lockScheduler()>
c0016531:	e8 92 5c ff ff       	call   c000c1c8 <Phys::allocatePage()>
c0016536:	6a 07                	push   0x7
c0016538:	89 85 c8 ef ff ff    	mov    DWORD PTR [ebp-0x1038],eax
c001653e:	56                   	push   esi
c001653f:	50                   	push   eax
c0016540:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016546:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0016549:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c001654f:	e8 08 7f ff ff       	call   c000e45c <VAS::mapPage(unsigned long, unsigned long, int)>
c0016554:	83 c4 0c             	add    esp,0xc
c0016557:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001655d:	6a 00                	push   0x0
c001655f:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016565:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0016568:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c001656e:	e8 47 7d ff ff       	call   c000e2ba <VAS::mapOtherVASIn(bool, VAS*)>
c0016573:	58                   	pop    eax
c0016574:	8b 85 c8 ef ff ff    	mov    eax,DWORD PTR [ebp-0x1038]
c001657a:	5a                   	pop    edx
c001657b:	68 07 04 00 00       	push   0x407
c0016580:	53                   	push   ebx
c0016581:	81 c3 00 10 00 00    	add    ebx,0x1000
c0016587:	50                   	push   eax
c0016588:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001658e:	6a 00                	push   0x0
c0016590:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016595:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016598:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001659e:	e8 6f 82 ff ff       	call   c000e812 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00165a3:	83 c4 1c             	add    esp,0x1c
c00165a6:	8d 85 e8 ef ff ff    	lea    eax,[ebp-0x1018]
c00165ac:	68 00 10 00 00       	push   0x1000
c00165b1:	50                   	push   eax
c00165b2:	56                   	push   esi
c00165b3:	e8 1a a0 fe ff       	call   c00005d2 <memcpy>
c00165b8:	e8 5d 14 00 00       	call   c0017a1a <unlockScheduler()>
c00165bd:	ff 85 d0 ef ff ff    	inc    DWORD PTR [ebp-0x1030]
c00165c3:	83 c4 10             	add    esp,0x10
c00165c6:	e9 f5 fe ff ff       	jmp    c00164c0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x8d>
c00165cb:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c00165ce:	81 bd d4 ef ff ff ff 0f 00 00 	cmp    DWORD PTR [ebp-0x102c],0xfff
c00165d8:	0f 86 bc 00 00 00    	jbe    c001669a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x267>
c00165de:	e8 35 14 00 00       	call   c0017a18 <lockScheduler()>
c00165e3:	51                   	push   ecx
c00165e4:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c00165ea:	6a 00                	push   0x0
c00165ec:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00165f1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00165f4:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c00165fa:	e8 bb 7c ff ff       	call   c000e2ba <VAS::mapOtherVASIn(bool, VAS*)>
c00165ff:	8b 85 d4 ef ff ff    	mov    eax,DWORD PTR [ebp-0x102c]
c0016605:	83 c4 10             	add    esp,0x10
c0016608:	c1 e8 0c             	shr    eax,0xc
c001660b:	c7 85 d4 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x102c],0x0
c0016615:	89 85 d0 ef ff ff    	mov    DWORD PTR [ebp-0x1030],eax
c001661b:	e8 a8 5b ff ff       	call   c000c1c8 <Phys::allocatePage()>
c0016620:	6a 07                	push   0x7
c0016622:	89 85 cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],eax
c0016628:	56                   	push   esi
c0016629:	50                   	push   eax
c001662a:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016630:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c0016633:	ff b1 32 05 00 00    	push   DWORD PTR [ecx+0x532]
c0016639:	e8 1e 7e ff ff       	call   c000e45c <VAS::mapPage(unsigned long, unsigned long, int)>
c001663e:	58                   	pop    eax
c001663f:	8b 85 cc ef ff ff    	mov    eax,DWORD PTR [ebp-0x1034]
c0016645:	5a                   	pop    edx
c0016646:	68 07 04 00 00       	push   0x407
c001664b:	53                   	push   ebx
c001664c:	81 c3 00 10 00 00    	add    ebx,0x1000
c0016652:	50                   	push   eax
c0016653:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c0016659:	6a 00                	push   0x0
c001665b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016660:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016663:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c0016669:	e8 a4 81 ff ff       	call   c000e812 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001666e:	83 c4 1c             	add    esp,0x1c
c0016671:	68 00 10 00 00       	push   0x1000
c0016676:	6a 00                	push   0x0
c0016678:	56                   	push   esi
c0016679:	e8 8a 9f fe ff       	call   c0000608 <memset>
c001667e:	ff 85 d4 ef ff ff    	inc    DWORD PTR [ebp-0x102c]
c0016684:	83 c4 10             	add    esp,0x10
c0016687:	8b 8d d4 ef ff ff    	mov    ecx,DWORD PTR [ebp-0x102c]
c001668d:	39 8d d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],ecx
c0016693:	77 86                	ja     c001661b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1e8>
c0016695:	e8 80 13 00 00       	call   c0017a1a <unlockScheduler()>
c001669a:	83 ec 0c             	sub    esp,0xc
c001669d:	56                   	push   esi
c001669e:	e8 b8 7a ff ff       	call   c000e15b <Virt::freeKernelVirtualPages(unsigned long)>
c00166a3:	83 c4 10             	add    esp,0x10
c00166a6:	b0 01                	mov    al,0x1
c00166a8:	8d 65 f4             	lea    esp,[ebp-0xc]
c00166ab:	5b                   	pop    ebx
c00166ac:	5e                   	pop    esi
c00166ad:	5f                   	pop    edi
c00166ae:	5d                   	pop    ebp
c00166af:	c3                   	ret    

c00166b0 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c00166b0:	55                   	push   ebp
c00166b1:	57                   	push   edi
c00166b2:	56                   	push   esi
c00166b3:	53                   	push   ebx
c00166b4:	83 ec 48             	sub    esp,0x48
c00166b7:	68 14 01 00 00       	push   0x114
c00166bc:	e8 ab 85 ff ff       	call   c000ec6c <operator new(unsigned long)>
c00166c1:	83 c4 0c             	add    esp,0xc
c00166c4:	89 c6                	mov    esi,eax
c00166c6:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00166ca:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00166ce:	50                   	push   eax
c00166cf:	e8 b6 8b ff ff       	call   c000f28a <File::File(char const*, Process*)>
c00166d4:	58                   	pop    eax
c00166d5:	5a                   	pop    edx
c00166d6:	6a 01                	push   0x1
c00166d8:	56                   	push   esi
c00166d9:	e8 10 8c ff ff       	call   c000f2ee <File::open(FileOpenMode)>
c00166de:	83 c4 10             	add    esp,0x10
c00166e1:	85 c0                	test   eax,eax
c00166e3:	0f 85 47 01 00 00    	jne    c0016830 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00166e9:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00166f1:	83 ec 0c             	sub    esp,0xc
c00166f4:	6a 34                	push   0x34
c00166f6:	e8 23 55 ff ff       	call   c000bc1e <malloc>
c00166fb:	89 c3                	mov    ebx,eax
c00166fd:	58                   	pop    eax
c00166fe:	8b 06                	mov    eax,DWORD PTR [esi]
c0016700:	8d 7c 24 38          	lea    edi,[esp+0x38]
c0016704:	57                   	push   edi
c0016705:	53                   	push   ebx
c0016706:	6a 00                	push   0x0
c0016708:	6a 34                	push   0x34
c001670a:	56                   	push   esi
c001670b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001670e:	83 c4 20             	add    esp,0x20
c0016711:	85 c0                	test   eax,eax
c0016713:	0f 85 17 01 00 00    	jne    c0016830 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016719:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001671f:	0f 85 0b 01 00 00    	jne    c0016830 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016725:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016728:	85 c0                	test   eax,eax
c001672a:	0f 84 00 01 00 00    	je     c0016830 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016730:	31 d2                	xor    edx,edx
c0016732:	55                   	push   ebp
c0016733:	52                   	push   edx
c0016734:	50                   	push   eax
c0016735:	56                   	push   esi
c0016736:	e8 71 8c ff ff       	call   c000f3ac <File::seek(unsigned long long)>
c001673b:	83 c4 10             	add    esp,0x10
c001673e:	85 c0                	test   eax,eax
c0016740:	0f 85 ea 00 00 00    	jne    c0016830 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016746:	83 ec 0c             	sub    esp,0xc
c0016749:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001674c:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0016750:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0016754:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0016758:	0f af c2             	imul   eax,edx
c001675b:	50                   	push   eax
c001675c:	e8 bd 54 ff ff       	call   c000bc1e <malloc>
c0016761:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016764:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0016768:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001676a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001676e:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0016772:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0016776:	0f af c2             	imul   eax,edx
c0016779:	99                   	cdq    
c001677a:	52                   	push   edx
c001677b:	50                   	push   eax
c001677c:	56                   	push   esi
c001677d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016780:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0016783:	83 c4 20             	add    esp,0x20
c0016786:	85 c0                	test   eax,eax
c0016788:	0f 84 a2 00 00 00    	je     c0016830 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001678e:	31 d2                	xor    edx,edx
c0016790:	51                   	push   ecx
c0016791:	52                   	push   edx
c0016792:	50                   	push   eax
c0016793:	56                   	push   esi
c0016794:	e8 13 8c ff ff       	call   c000f3ac <File::seek(unsigned long long)>
c0016799:	83 c4 10             	add    esp,0x10
c001679c:	85 c0                	test   eax,eax
c001679e:	0f 85 8c 00 00 00    	jne    c0016830 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00167a4:	83 ec 0c             	sub    esp,0xc
c00167a7:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c00167ab:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00167af:	31 ed                	xor    ebp,ebp
c00167b1:	0f af c2             	imul   eax,edx
c00167b4:	50                   	push   eax
c00167b5:	e8 64 54 ff ff       	call   c000bc1e <malloc>
c00167ba:	89 3c 24             	mov    DWORD PTR [esp],edi
c00167bd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00167c1:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00167c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00167c7:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c00167cb:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00167cf:	0f af c2             	imul   eax,edx
c00167d2:	99                   	cdq    
c00167d3:	52                   	push   edx
c00167d4:	50                   	push   eax
c00167d5:	56                   	push   esi
c00167d6:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00167d9:	83 c4 20             	add    esp,0x20
c00167dc:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00167e4:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c00167e8:	0f 86 80 00 00 00    	jbe    c001686e <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c00167ee:	0f b7 fd             	movzx  edi,bp
c00167f1:	c1 e7 05             	shl    edi,0x5
c00167f4:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c00167f8:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c00167fb:	75 6b                	jne    c0016868 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c00167fd:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0016800:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016804:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0016807:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001680b:	52                   	push   edx
c001680c:	31 d2                	xor    edx,edx
c001680e:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0016811:	52                   	push   edx
c0016812:	50                   	push   eax
c0016813:	56                   	push   esi
c0016814:	e8 93 8b ff ff       	call   c000f3ac <File::seek(unsigned long long)>
c0016819:	83 c4 10             	add    esp,0x10
c001681c:	85 c0                	test   eax,eax
c001681e:	74 17                	je     c0016837 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c0016820:	83 ec 0c             	sub    esp,0xc
c0016823:	68 87 18 02 c0       	push   0xc0021887
c0016828:	e8 2e 85 ff ff       	call   c000ed5b <Dbg::kprintf(char const*, ...)>
c001682d:	83 c4 10             	add    esp,0x10
c0016830:	31 c0                	xor    eax,eax
c0016832:	e9 87 00 00 00       	jmp    c00168be <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c0016837:	83 ec 0c             	sub    esp,0xc
c001683a:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001683d:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0016840:	50                   	push   eax
c0016841:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0016845:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016849:	56                   	push   esi
c001684a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001684e:	e8 e0 fb ff ff       	call   c0016433 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0016853:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016857:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001685b:	83 c4 20             	add    esp,0x20
c001685e:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0016862:	73 04                	jae    c0016868 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0016864:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016868:	45                   	inc    ebp
c0016869:	e9 76 ff ff ff       	jmp    c00167e4 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001686e:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0016872:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016876:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001687a:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c0016880:	83 ec 0c             	sub    esp,0xc
c0016883:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c0016889:	25 00 f0 ff ff       	and    eax,0xfffff000
c001688e:	05 00 10 00 00       	add    eax,0x1000
c0016893:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0016896:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001689a:	e8 8f 53 ff ff       	call   c000bc2e <free>
c001689f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00168a2:	e8 87 53 ff ff       	call   c000bc2e <free>
c00168a7:	58                   	pop    eax
c00168a8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00168ac:	e8 7d 53 ff ff       	call   c000bc2e <free>
c00168b1:	89 34 24             	mov    DWORD PTR [esp],esi
c00168b4:	e8 93 8a ff ff       	call   c000f34c <File::close()>
c00168b9:	83 c4 10             	add    esp,0x10
c00168bc:	b0 01                	mov    al,0x1
c00168be:	83 c4 3c             	add    esp,0x3c
c00168c1:	5b                   	pop    ebx
c00168c2:	5e                   	pop    esi
c00168c3:	5f                   	pop    edi
c00168c4:	5d                   	pop    ebp
c00168c5:	c3                   	ret    

c00168c6 <Thr::runtimeReferenceHelper()>:
c00168c6:	83 ec 18             	sub    esp,0x18
c00168c9:	68 8f 18 02 c0       	push   0xc002188f
c00168ce:	e8 88 84 ff ff       	call   c000ed5b <Dbg::kprintf(char const*, ...)>
c00168d3:	fa                   	cli    
c00168d4:	83 c4 10             	add    esp,0x10
c00168d7:	eb fe                	jmp    c00168d7 <Thr::runtimeReferenceHelper()+0x11>

c00168d9 <Thr::getAddressOfKernelSymbol(char const*)>:
c00168d9:	57                   	push   edi
c00168da:	56                   	push   esi
c00168db:	53                   	push   ebx
c00168dc:	31 db                	xor    ebx,ebx
c00168de:	39 1d 00 48 02 c0    	cmp    DWORD PTR ds:0xc0024800,ebx
c00168e4:	7e 3c                	jle    c0016922 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c00168e6:	8b 34 9d 80 47 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffdb880]
c00168ed:	31 ff                	xor    edi,edi
c00168ef:	39 3c 9d 80 46 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffdb980],edi
c00168f6:	7e 27                	jle    c001691f <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c00168f8:	50                   	push   eax
c00168f9:	50                   	push   eax
c00168fa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00168fe:	8b 06                	mov    eax,DWORD PTR [esi]
c0016900:	03 04 9d 00 47 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffdb900]
c0016907:	50                   	push   eax
c0016908:	e8 eb 9d fe ff       	call   c00006f8 <strcmp>
c001690d:	83 c4 10             	add    esp,0x10
c0016910:	85 c0                	test   eax,eax
c0016912:	75 05                	jne    c0016919 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0016914:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0016917:	eb 0b                	jmp    c0016924 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0016919:	83 c6 10             	add    esi,0x10
c001691c:	47                   	inc    edi
c001691d:	eb d0                	jmp    c00168ef <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001691f:	43                   	inc    ebx
c0016920:	eb bc                	jmp    c00168de <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0016922:	31 c0                	xor    eax,eax
c0016924:	5b                   	pop    ebx
c0016925:	5e                   	pop    esi
c0016926:	5f                   	pop    edi
c0016927:	c3                   	ret    

c0016928 <Thr::loadKernelSymbolTable(char const*)>:
c0016928:	55                   	push   ebp
c0016929:	57                   	push   edi
c001692a:	56                   	push   esi
c001692b:	53                   	push   ebx
c001692c:	83 ec 68             	sub    esp,0x68
c001692f:	8b 35 54 48 02 c0    	mov    esi,DWORD PTR ds:0xc0024854
c0016935:	68 14 01 00 00       	push   0x114
c001693a:	e8 2d 83 ff ff       	call   c000ec6c <operator new(unsigned long)>
c001693f:	83 c4 0c             	add    esp,0xc
c0016942:	89 c3                	mov    ebx,eax
c0016944:	56                   	push   esi
c0016945:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0016949:	50                   	push   eax
c001694a:	e8 3b 89 ff ff       	call   c000f28a <File::File(char const*, Process*)>
c001694f:	5e                   	pop    esi
c0016950:	5f                   	pop    edi
c0016951:	6a 01                	push   0x1
c0016953:	53                   	push   ebx
c0016954:	e8 95 89 ff ff       	call   c000f2ee <File::open(FileOpenMode)>
c0016959:	83 c4 10             	add    esp,0x10
c001695c:	31 d2                	xor    edx,edx
c001695e:	85 c0                	test   eax,eax
c0016960:	0f 85 79 02 00 00    	jne    c0016bdf <Thr::loadKernelSymbolTable(char const*)+0x2b7>
c0016966:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001696e:	83 ec 0c             	sub    esp,0xc
c0016971:	6a 34                	push   0x34
c0016973:	e8 a6 52 ff ff       	call   c000bc1e <malloc>
c0016978:	59                   	pop    ecx
c0016979:	89 c7                	mov    edi,eax
c001697b:	8d 74 24 34          	lea    esi,[esp+0x34]
c001697f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016981:	56                   	push   esi
c0016982:	57                   	push   edi
c0016983:	6a 00                	push   0x0
c0016985:	6a 34                	push   0x34
c0016987:	53                   	push   ebx
c0016988:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001698b:	83 c4 20             	add    esp,0x20
c001698e:	85 c0                	test   eax,eax
c0016990:	74 17                	je     c00169a9 <Thr::loadKernelSymbolTable(char const*)+0x81>
c0016992:	83 ec 0c             	sub    esp,0xc
c0016995:	68 b1 18 02 c0       	push   0xc00218b1
c001699a:	e8 51 e0 ff ff       	call   c00149f0 <Krnl::panic(char const*)>
c001699f:	83 c4 10             	add    esp,0x10
c00169a2:	31 d2                	xor    edx,edx
c00169a4:	e9 36 02 00 00       	jmp    c0016bdf <Thr::loadKernelSymbolTable(char const*)+0x2b7>
c00169a9:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c00169af:	75 e1                	jne    c0016992 <Thr::loadKernelSymbolTable(char const*)+0x6a>
c00169b1:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c00169b4:	85 c0                	test   eax,eax
c00169b6:	74 da                	je     c0016992 <Thr::loadKernelSymbolTable(char const*)+0x6a>
c00169b8:	52                   	push   edx
c00169b9:	31 d2                	xor    edx,edx
c00169bb:	52                   	push   edx
c00169bc:	50                   	push   eax
c00169bd:	53                   	push   ebx
c00169be:	e8 e9 89 ff ff       	call   c000f3ac <File::seek(unsigned long long)>
c00169c3:	83 c4 10             	add    esp,0x10
c00169c6:	85 c0                	test   eax,eax
c00169c8:	75 c8                	jne    c0016992 <Thr::loadKernelSymbolTable(char const*)+0x6a>
c00169ca:	83 ec 0c             	sub    esp,0xc
c00169cd:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00169d1:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00169d5:	31 ed                	xor    ebp,ebp
c00169d7:	0f af c2             	imul   eax,edx
c00169da:	50                   	push   eax
c00169db:	e8 3e 52 ff ff       	call   c000bc1e <malloc>
c00169e0:	89 34 24             	mov    DWORD PTR [esp],esi
c00169e3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00169e7:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00169e9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00169ed:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00169f1:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00169f5:	0f af c2             	imul   eax,edx
c00169f8:	99                   	cdq    
c00169f9:	52                   	push   edx
c00169fa:	50                   	push   eax
c00169fb:	53                   	push   ebx
c00169fc:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00169ff:	83 c4 20             	add    esp,0x20
c0016a02:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0016a0a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0016a12:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0016a1a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0016a22:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c0016a26:	0f 86 aa 00 00 00    	jbe    c0016ad6 <Thr::loadKernelSymbolTable(char const*)+0x1ae>
c0016a2c:	0f b7 f5             	movzx  esi,bp
c0016a2f:	6b f6 28             	imul   esi,esi,0x28
c0016a32:	03 74 24 10          	add    esi,DWORD PTR [esp+0x10]
c0016a36:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0016a39:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016a3d:	50                   	push   eax
c0016a3e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0016a42:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0016a46:	8b 16                	mov    edx,DWORD PTR [esi]
c0016a48:	6b c0 28             	imul   eax,eax,0x28
c0016a4b:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0016a4f:	89 d0                	mov    eax,edx
c0016a51:	31 d2                	xor    edx,edx
c0016a53:	52                   	push   edx
c0016a54:	50                   	push   eax
c0016a55:	53                   	push   ebx
c0016a56:	e8 51 89 ff ff       	call   c000f3ac <File::seek(unsigned long long)>
c0016a5b:	83 c4 0c             	add    esp,0xc
c0016a5e:	6a 20                	push   0x20
c0016a60:	6a 00                	push   0x0
c0016a62:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0016a66:	52                   	push   edx
c0016a67:	e8 9c 9b fe ff       	call   c0000608 <memset>
c0016a6c:	58                   	pop    eax
c0016a6d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016a6f:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0016a73:	51                   	push   ecx
c0016a74:	8d 54 24 40          	lea    edx,[esp+0x40]
c0016a78:	52                   	push   edx
c0016a79:	6a 00                	push   0x0
c0016a7b:	6a 1f                	push   0x1f
c0016a7d:	53                   	push   ebx
c0016a7e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016a81:	83 c4 18             	add    esp,0x18
c0016a84:	68 c8 18 02 c0       	push   0xc00218c8
c0016a89:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0016a8d:	52                   	push   edx
c0016a8e:	e8 65 9c fe ff       	call   c00006f8 <strcmp>
c0016a93:	83 c4 10             	add    esp,0x10
c0016a96:	85 c0                	test   eax,eax
c0016a98:	75 0f                	jne    c0016aa9 <Thr::loadKernelSymbolTable(char const*)+0x181>
c0016a9a:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0016a9d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016aa1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016aa5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016aa9:	50                   	push   eax
c0016aaa:	50                   	push   eax
c0016aab:	68 d0 18 02 c0       	push   0xc00218d0
c0016ab0:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0016ab4:	50                   	push   eax
c0016ab5:	e8 3e 9c fe ff       	call   c00006f8 <strcmp>
c0016aba:	83 c4 10             	add    esp,0x10
c0016abd:	85 c0                	test   eax,eax
c0016abf:	75 0f                	jne    c0016ad0 <Thr::loadKernelSymbolTable(char const*)+0x1a8>
c0016ac1:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0016ac4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016ac8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016acc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016ad0:	45                   	inc    ebp
c0016ad1:	e9 4c ff ff ff       	jmp    c0016a22 <Thr::loadKernelSymbolTable(char const*)+0xfa>
c0016ad6:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0016adb:	75 10                	jne    c0016aed <Thr::loadKernelSymbolTable(char const*)+0x1c5>
c0016add:	83 ec 0c             	sub    esp,0xc
c0016ae0:	68 d8 18 02 c0       	push   0xc00218d8
c0016ae5:	e8 06 df ff ff       	call   c00149f0 <Krnl::panic(char const*)>
c0016aea:	83 c4 10             	add    esp,0x10
c0016aed:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0016af2:	75 10                	jne    c0016b04 <Thr::loadKernelSymbolTable(char const*)+0x1dc>
c0016af4:	83 ec 0c             	sub    esp,0xc
c0016af7:	68 d8 18 02 c0       	push   0xc00218d8
c0016afc:	e8 ef de ff ff       	call   c00149f0 <Krnl::panic(char const*)>
c0016b01:	83 c4 10             	add    esp,0x10
c0016b04:	31 d2                	xor    edx,edx
c0016b06:	50                   	push   eax
c0016b07:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016b0b:	52                   	push   edx
c0016b0c:	50                   	push   eax
c0016b0d:	53                   	push   ebx
c0016b0e:	e8 99 88 ff ff       	call   c000f3ac <File::seek(unsigned long long)>
c0016b13:	5a                   	pop    edx
c0016b14:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016b18:	e8 01 51 ff ff       	call   c000bc1e <malloc>
c0016b1d:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0016b25:	89 c1                	mov    ecx,eax
c0016b27:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016b2b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016b2f:	5e                   	pop    esi
c0016b30:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016b32:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0016b36:	55                   	push   ebp
c0016b37:	51                   	push   ecx
c0016b38:	89 4c 24 30          	mov    DWORD PTR [esp+0x30],ecx
c0016b3c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016b40:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016b44:	53                   	push   ebx
c0016b45:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016b48:	83 c4 14             	add    esp,0x14
c0016b4b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0016b4f:	e8 ca 50 ff ff       	call   c000bc1e <malloc>
c0016b54:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016b57:	89 c6                	mov    esi,eax
c0016b59:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016b5b:	56                   	push   esi
c0016b5c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016b60:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016b64:	53                   	push   ebx
c0016b65:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016b68:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016b6c:	8b 15 00 48 02 c0    	mov    edx,DWORD PTR ds:0xc0024800
c0016b72:	83 c4 1c             	add    esp,0x1c
c0016b75:	c1 e8 04             	shr    eax,0x4
c0016b78:	89 04 95 80 46 02 c0 	mov    DWORD PTR [edx*4-0x3ffdb980],eax
c0016b7f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016b83:	31 d2                	xor    edx,edx
c0016b85:	52                   	push   edx
c0016b86:	50                   	push   eax
c0016b87:	53                   	push   ebx
c0016b88:	e8 1f 88 ff ff       	call   c000f3ac <File::seek(unsigned long long)>
c0016b8d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016b90:	31 d2                	xor    edx,edx
c0016b92:	56                   	push   esi
c0016b93:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016b97:	52                   	push   edx
c0016b98:	50                   	push   eax
c0016b99:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016b9b:	53                   	push   ebx
c0016b9c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016b9f:	83 c4 14             	add    esp,0x14
c0016ba2:	53                   	push   ebx
c0016ba3:	e8 a4 87 ff ff       	call   c000f34c <File::close()>
c0016ba8:	5d                   	pop    ebp
c0016ba9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016bad:	e8 7c 50 ff ff       	call   c000bc2e <free>
c0016bb2:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016bb5:	e8 74 50 ff ff       	call   c000bc2e <free>
c0016bba:	a1 00 48 02 c0       	mov    eax,ds:0xc0024800
c0016bbf:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0016bc3:	8d 50 01             	lea    edx,[eax+0x1]
c0016bc6:	89 0c 85 80 47 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb880],ecx
c0016bcd:	89 15 00 48 02 c0    	mov    DWORD PTR ds:0xc0024800,edx
c0016bd3:	89 34 85 00 47 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb900],esi
c0016bda:	83 c4 10             	add    esp,0x10
c0016bdd:	b2 01                	mov    dl,0x1
c0016bdf:	83 c4 5c             	add    esp,0x5c
c0016be2:	88 d0                	mov    al,dl
c0016be4:	5b                   	pop    ebx
c0016be5:	5e                   	pop    esi
c0016be6:	5f                   	pop    edi
c0016be7:	5d                   	pop    ebp
c0016be8:	c3                   	ret    

c0016be9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0016be9:	55                   	push   ebp
c0016bea:	57                   	push   edi
c0016beb:	56                   	push   esi
c0016bec:	53                   	push   ebx
c0016bed:	81 ec 68 03 00 00    	sub    esp,0x368
c0016bf3:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0016bfa:	8b 1d 54 48 02 c0    	mov    ebx,DWORD PTR ds:0xc0024854
c0016c00:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c0016c04:	68 14 01 00 00       	push   0x114
c0016c09:	e8 5e 80 ff ff       	call   c000ec6c <operator new(unsigned long)>
c0016c0e:	83 c4 0c             	add    esp,0xc
c0016c11:	89 c7                	mov    edi,eax
c0016c13:	53                   	push   ebx
c0016c14:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0016c1b:	50                   	push   eax
c0016c1c:	e8 69 86 ff ff       	call   c000f28a <File::File(char const*, Process*)>
c0016c21:	5e                   	pop    esi
c0016c22:	5d                   	pop    ebp
c0016c23:	6a 01                	push   0x1
c0016c25:	57                   	push   edi
c0016c26:	e8 c3 86 ff ff       	call   c000f2ee <File::open(FileOpenMode)>
c0016c2b:	83 c4 10             	add    esp,0x10
c0016c2e:	85 c0                	test   eax,eax
c0016c30:	0f 85 10 07 00 00    	jne    c0017346 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0016c36:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0016c3e:	83 ec 0c             	sub    esp,0xc
c0016c41:	6a 34                	push   0x34
c0016c43:	e8 d6 4f ff ff       	call   c000bc1e <malloc>
c0016c48:	5b                   	pop    ebx
c0016c49:	89 c5                	mov    ebp,eax
c0016c4b:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0016c4f:	8b 07                	mov    eax,DWORD PTR [edi]
c0016c51:	53                   	push   ebx
c0016c52:	55                   	push   ebp
c0016c53:	6a 00                	push   0x0
c0016c55:	6a 34                	push   0x34
c0016c57:	57                   	push   edi
c0016c58:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016c5b:	83 c4 20             	add    esp,0x20
c0016c5e:	85 c0                	test   eax,eax
c0016c60:	0f 85 e0 06 00 00    	jne    c0017346 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0016c66:	81 7d 00 7f 45 4c 46 	cmp    DWORD PTR [ebp+0x0],0x464c457f
c0016c6d:	0f 85 d3 06 00 00    	jne    c0017346 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0016c73:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0016c76:	85 c0                	test   eax,eax
c0016c78:	0f 84 c8 06 00 00    	je     c0017346 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0016c7e:	31 d2                	xor    edx,edx
c0016c80:	51                   	push   ecx
c0016c81:	52                   	push   edx
c0016c82:	50                   	push   eax
c0016c83:	57                   	push   edi
c0016c84:	e8 23 87 ff ff       	call   c000f3ac <File::seek(unsigned long long)>
c0016c89:	83 c4 10             	add    esp,0x10
c0016c8c:	85 c0                	test   eax,eax
c0016c8e:	0f 85 b2 06 00 00    	jne    c0017346 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0016c94:	83 ec 0c             	sub    esp,0xc
c0016c97:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0016c9a:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c0016c9e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0016ca2:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0016ca6:	0f af c2             	imul   eax,edx
c0016ca9:	50                   	push   eax
c0016caa:	e8 6f 4f ff ff       	call   c000bc1e <malloc>
c0016caf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016cb2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016cb6:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0016cb8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016cbc:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c0016cc0:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0016cc4:	0f af c2             	imul   eax,edx
c0016cc7:	99                   	cdq    
c0016cc8:	52                   	push   edx
c0016cc9:	50                   	push   eax
c0016cca:	57                   	push   edi
c0016ccb:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016cce:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
c0016cd1:	83 c4 20             	add    esp,0x20
c0016cd4:	85 c0                	test   eax,eax
c0016cd6:	0f 84 6a 06 00 00    	je     c0017346 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0016cdc:	52                   	push   edx
c0016cdd:	31 d2                	xor    edx,edx
c0016cdf:	52                   	push   edx
c0016ce0:	50                   	push   eax
c0016ce1:	57                   	push   edi
c0016ce2:	e8 c5 86 ff ff       	call   c000f3ac <File::seek(unsigned long long)>
c0016ce7:	83 c4 10             	add    esp,0x10
c0016cea:	85 c0                	test   eax,eax
c0016cec:	0f 85 54 06 00 00    	jne    c0017346 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0016cf2:	83 ec 0c             	sub    esp,0xc
c0016cf5:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c0016cf9:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0016cfd:	31 f6                	xor    esi,esi
c0016cff:	0f af c2             	imul   eax,edx
c0016d02:	50                   	push   eax
c0016d03:	e8 16 4f ff ff       	call   c000bc1e <malloc>
c0016d08:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016d0b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0016d0f:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0016d11:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016d15:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c0016d19:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0016d1d:	0f af c2             	imul   eax,edx
c0016d20:	99                   	cdq    
c0016d21:	52                   	push   edx
c0016d22:	50                   	push   eax
c0016d23:	57                   	push   edi
c0016d24:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016d27:	83 c4 20             	add    esp,0x20
c0016d2a:	66 39 75 2c          	cmp    WORD PTR [ebp+0x2c],si
c0016d2e:	0f 86 af 00 00 00    	jbe    c0016de3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1fa>
c0016d34:	0f b7 de             	movzx  ebx,si
c0016d37:	c1 e3 05             	shl    ebx,0x5
c0016d3a:	03 5c 24 1c          	add    ebx,DWORD PTR [esp+0x1c]
c0016d3e:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c0016d41:	0f 85 96 00 00 00    	jne    c0016ddd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1f4>
c0016d47:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016d4a:	31 d2                	xor    edx,edx
c0016d4c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016d50:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016d53:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016d57:	50                   	push   eax
c0016d58:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0016d5b:	52                   	push   edx
c0016d5c:	50                   	push   eax
c0016d5d:	57                   	push   edi
c0016d5e:	e8 49 86 ff ff       	call   c000f3ac <File::seek(unsigned long long)>
c0016d63:	83 c4 10             	add    esp,0x10
c0016d66:	85 c0                	test   eax,eax
c0016d68:	0f 85 d8 05 00 00    	jne    c0017346 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0016d6e:	52                   	push   edx
c0016d6f:	52                   	push   edx
c0016d70:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0016d74:	68 f2 18 02 c0       	push   0xc00218f2
c0016d79:	e8 dd 7f ff ff       	call   c000ed5b <Dbg::kprintf(char const*, ...)>
c0016d7e:	8b 84 24 84 03 00 00 	mov    eax,DWORD PTR [esp+0x384]
c0016d85:	31 d2                	xor    edx,edx
c0016d87:	2b 44 24 3c          	sub    eax,DWORD PTR [esp+0x3c]
c0016d8b:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0016d8f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016d93:	59                   	pop    ecx
c0016d94:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0016d96:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0016d9d:	50                   	push   eax
c0016d9e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016da2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016da6:	52                   	push   edx
c0016da7:	50                   	push   eax
c0016da8:	57                   	push   edi
c0016da9:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016dac:	83 c4 18             	add    esp,0x18
c0016daf:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0016db2:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0016db5:	50                   	push   eax
c0016db6:	68 16 19 02 c0       	push   0xc0021916
c0016dbb:	e8 9b 7f ff ff       	call   c000ed5b <Dbg::kprintf(char const*, ...)>
c0016dc0:	83 c4 0c             	add    esp,0xc
c0016dc3:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0016dc6:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0016dc9:	50                   	push   eax
c0016dca:	6a 00                	push   0x0
c0016dcc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016dd0:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0016dd4:	50                   	push   eax
c0016dd5:	e8 2e 98 fe ff       	call   c0000608 <memset>
c0016dda:	83 c4 10             	add    esp,0x10
c0016ddd:	46                   	inc    esi
c0016dde:	e9 47 ff ff ff       	jmp    c0016d2a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x141>
c0016de3:	31 db                	xor    ebx,ebx
c0016de5:	50                   	push   eax
c0016de6:	68 00 01 00 00       	push   0x100
c0016deb:	6a 00                	push   0x0
c0016ded:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0016df1:	50                   	push   eax
c0016df2:	e8 11 98 fe ff       	call   c0000608 <memset>
c0016df7:	83 c4 0c             	add    esp,0xc
c0016dfa:	68 00 01 00 00       	push   0x100
c0016dff:	6a 00                	push   0x0
c0016e01:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0016e08:	50                   	push   eax
c0016e09:	e8 fa 97 fe ff       	call   c0000608 <memset>
c0016e0e:	83 c4 10             	add    esp,0x10
c0016e11:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0016e19:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0016e21:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0016e29:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0016e31:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0016e39:	66 39 5d 30          	cmp    WORD PTR [ebp+0x30],bx
c0016e3d:	0f 86 2f 01 00 00    	jbe    c0016f72 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x389>
c0016e43:	0f b7 f3             	movzx  esi,bx
c0016e46:	6b f6 28             	imul   esi,esi,0x28
c0016e49:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0016e4d:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0016e50:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016e54:	50                   	push   eax
c0016e55:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016e59:	0f b7 55 32          	movzx  edx,WORD PTR [ebp+0x32]
c0016e5d:	8b 06                	mov    eax,DWORD PTR [esi]
c0016e5f:	6b d2 28             	imul   edx,edx,0x28
c0016e62:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0016e66:	31 d2                	xor    edx,edx
c0016e68:	52                   	push   edx
c0016e69:	50                   	push   eax
c0016e6a:	57                   	push   edi
c0016e6b:	e8 3c 85 ff ff       	call   c000f3ac <File::seek(unsigned long long)>
c0016e70:	83 c4 0c             	add    esp,0xc
c0016e73:	6a 20                	push   0x20
c0016e75:	6a 00                	push   0x0
c0016e77:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0016e7e:	51                   	push   ecx
c0016e7f:	e8 84 97 fe ff       	call   c0000608 <memset>
c0016e84:	58                   	pop    eax
c0016e85:	8b 07                	mov    eax,DWORD PTR [edi]
c0016e87:	8d 54 24 58          	lea    edx,[esp+0x58]
c0016e8b:	52                   	push   edx
c0016e8c:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0016e93:	51                   	push   ecx
c0016e94:	6a 00                	push   0x0
c0016e96:	6a 1f                	push   0x1f
c0016e98:	57                   	push   edi
c0016e99:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016e9c:	83 c4 1c             	add    esp,0x1c
c0016e9f:	6a 09                	push   0x9
c0016ea1:	68 33 19 02 c0       	push   0xc0021933
c0016ea6:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0016ead:	51                   	push   ecx
c0016eae:	e8 bc 96 fe ff       	call   c000056f <memcmp>
c0016eb3:	83 c4 10             	add    esp,0x10
c0016eb6:	85 c0                	test   eax,eax
c0016eb8:	75 21                	jne    c0016edb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2f2>
c0016eba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016ebe:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0016ec2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016ec6:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0016eca:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0016ecd:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c0016ed4:	89 c8                	mov    eax,ecx
c0016ed6:	40                   	inc    eax
c0016ed7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016edb:	50                   	push   eax
c0016edc:	6a 09                	push   0x9
c0016ede:	68 3d 19 02 c0       	push   0xc002193d
c0016ee3:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0016eea:	50                   	push   eax
c0016eeb:	e8 7f 96 fe ff       	call   c000056f <memcmp>
c0016ef0:	83 c4 10             	add    esp,0x10
c0016ef3:	85 c0                	test   eax,eax
c0016ef5:	75 21                	jne    c0016f18 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x32f>
c0016ef7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016efb:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0016eff:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016f03:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0016f07:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0016f0a:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c0016f11:	89 c8                	mov    eax,ecx
c0016f13:	40                   	inc    eax
c0016f14:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016f18:	50                   	push   eax
c0016f19:	50                   	push   eax
c0016f1a:	68 c8 18 02 c0       	push   0xc00218c8
c0016f1f:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0016f26:	50                   	push   eax
c0016f27:	e8 cc 97 fe ff       	call   c00006f8 <strcmp>
c0016f2c:	83 c4 10             	add    esp,0x10
c0016f2f:	85 c0                	test   eax,eax
c0016f31:	75 0f                	jne    c0016f42 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x359>
c0016f33:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0016f36:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016f3a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016f3e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016f42:	50                   	push   eax
c0016f43:	50                   	push   eax
c0016f44:	68 d0 18 02 c0       	push   0xc00218d0
c0016f49:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0016f50:	50                   	push   eax
c0016f51:	e8 a2 97 fe ff       	call   c00006f8 <strcmp>
c0016f56:	83 c4 10             	add    esp,0x10
c0016f59:	85 c0                	test   eax,eax
c0016f5b:	75 0f                	jne    c0016f6c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x383>
c0016f5d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0016f60:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016f64:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016f68:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0016f6c:	43                   	inc    ebx
c0016f6d:	e9 c7 fe ff ff       	jmp    c0016e39 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x250>
c0016f72:	31 d2                	xor    edx,edx
c0016f74:	50                   	push   eax
c0016f75:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016f79:	52                   	push   edx
c0016f7a:	50                   	push   eax
c0016f7b:	57                   	push   edi
c0016f7c:	e8 2b 84 ff ff       	call   c000f3ac <File::seek(unsigned long long)>
c0016f81:	5a                   	pop    edx
c0016f82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016f86:	e8 93 4c ff ff       	call   c000bc1e <malloc>
c0016f8b:	31 d2                	xor    edx,edx
c0016f8d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0016f91:	59                   	pop    ecx
c0016f92:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0016f94:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0016f98:	53                   	push   ebx
c0016f99:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016f9d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016fa1:	52                   	push   edx
c0016fa2:	50                   	push   eax
c0016fa3:	57                   	push   edi
c0016fa4:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016fa7:	83 c4 14             	add    esp,0x14
c0016faa:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016fae:	e8 6b 4c ff ff       	call   c000bc1e <malloc>
c0016fb3:	31 d2                	xor    edx,edx
c0016fb5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0016fb9:	83 c4 0c             	add    esp,0xc
c0016fbc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016fc0:	52                   	push   edx
c0016fc1:	50                   	push   eax
c0016fc2:	57                   	push   edi
c0016fc3:	e8 e4 83 ff ff       	call   c000f3ac <File::seek(unsigned long long)>
c0016fc8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016fcb:	31 d2                	xor    edx,edx
c0016fcd:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016fd1:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0016fd3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016fd7:	52                   	push   edx
c0016fd8:	50                   	push   eax
c0016fd9:	57                   	push   edi
c0016fda:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016fdd:	83 c4 20             	add    esp,0x20
c0016fe0:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0016fe8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016fec:	39 54 24 04          	cmp    DWORD PTR [esp+0x4],edx
c0016ff0:	0f 84 54 03 00 00    	je     c001734a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x761>
c0016ff6:	8b 84 94 50 01 00 00 	mov    eax,DWORD PTR [esp+edx*4+0x150]
c0016ffd:	31 d2                	xor    edx,edx
c0016fff:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017003:	c1 e8 03             	shr    eax,0x3
c0017006:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001700a:	50                   	push   eax
c001700b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001700f:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0017013:	52                   	push   edx
c0017014:	50                   	push   eax
c0017015:	57                   	push   edi
c0017016:	e8 91 83 ff ff       	call   c000f3ac <File::seek(unsigned long long)>
c001701b:	58                   	pop    eax
c001701c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017020:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0017027:	e8 f2 4b ff ff       	call   c000bc1e <malloc>
c001702c:	31 d2                	xor    edx,edx
c001702e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017032:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0017034:	58                   	pop    eax
c0017035:	8d 44 24 58          	lea    eax,[esp+0x58]
c0017039:	50                   	push   eax
c001703a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001703e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017042:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0017049:	52                   	push   edx
c001704a:	50                   	push   eax
c001704b:	57                   	push   edi
c001704c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001704f:	83 c4 20             	add    esp,0x20
c0017052:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001705a:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c001705e:	39 4c 24 28          	cmp    DWORD PTR [esp+0x28],ecx
c0017062:	0f 8d c6 02 00 00    	jge    c001732e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x745>
c0017068:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001706c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017070:	31 db                	xor    ebx,ebx
c0017072:	8b 04 d0             	mov    eax,DWORD PTR [eax+edx*8]
c0017075:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017079:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001707d:	8b 44 d0 04          	mov    eax,DWORD PTR [eax+edx*8+0x4]
c0017081:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017085:	c1 e8 08             	shr    eax,0x8
c0017088:	89 c6                	mov    esi,eax
c001708a:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001708e:	c1 e6 04             	shl    esi,0x4
c0017091:	03 74 24 38          	add    esi,DWORD PTR [esp+0x38]
c0017095:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0017098:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001709c:	85 c0                	test   eax,eax
c001709e:	0f 85 17 01 00 00    	jne    c00171bb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d2>
c00170a4:	83 ec 0c             	sub    esp,0xc
c00170a7:	b3 01                	mov    bl,0x1
c00170a9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00170ad:	03 06                	add    eax,DWORD PTR [esi]
c00170af:	50                   	push   eax
c00170b0:	e8 24 f8 ff ff       	call   c00168d9 <Thr::getAddressOfKernelSymbol(char const*)>
c00170b5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00170b9:	83 c4 10             	add    esp,0x10
c00170bc:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00170c1:	0f 85 f4 00 00 00    	jne    c00171bb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d2>
c00170c7:	50                   	push   eax
c00170c8:	50                   	push   eax
c00170c9:	68 47 19 02 c0       	push   0xc0021947
c00170ce:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00170d2:	03 06                	add    eax,DWORD PTR [esi]
c00170d4:	50                   	push   eax
c00170d5:	e8 1e 96 fe ff       	call   c00006f8 <strcmp>
c00170da:	83 c4 10             	add    esp,0x10
c00170dd:	85 c0                	test   eax,eax
c00170df:	75 0a                	jne    c00170eb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x502>
c00170e1:	b8 bc e3 01 c0       	mov    eax,0xc001e3bc
c00170e6:	e9 ca 00 00 00       	jmp    c00171b5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5cc>
c00170eb:	50                   	push   eax
c00170ec:	50                   	push   eax
c00170ed:	68 51 19 02 c0       	push   0xc0021951
c00170f2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00170f6:	03 06                	add    eax,DWORD PTR [esi]
c00170f8:	50                   	push   eax
c00170f9:	e8 fa 95 fe ff       	call   c00006f8 <strcmp>
c00170fe:	83 c4 10             	add    esp,0x10
c0017101:	85 c0                	test   eax,eax
c0017103:	75 0a                	jne    c001710f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x526>
c0017105:	b8 f0 e0 01 c0       	mov    eax,0xc001e0f0
c001710a:	e9 a6 00 00 00       	jmp    c00171b5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5cc>
c001710f:	53                   	push   ebx
c0017110:	53                   	push   ebx
c0017111:	68 5a 19 02 c0       	push   0xc002195a
c0017116:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001711a:	03 06                	add    eax,DWORD PTR [esi]
c001711c:	50                   	push   eax
c001711d:	e8 d6 95 fe ff       	call   c00006f8 <strcmp>
c0017122:	83 c4 10             	add    esp,0x10
c0017125:	85 c0                	test   eax,eax
c0017127:	75 0a                	jne    c0017133 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54a>
c0017129:	b8 bc e4 01 c0       	mov    eax,0xc001e4bc
c001712e:	e9 82 00 00 00       	jmp    c00171b5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5cc>
c0017133:	51                   	push   ecx
c0017134:	51                   	push   ecx
c0017135:	68 64 19 02 c0       	push   0xc0021964
c001713a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001713e:	03 06                	add    eax,DWORD PTR [esi]
c0017140:	50                   	push   eax
c0017141:	e8 b2 95 fe ff       	call   c00006f8 <strcmp>
c0017146:	83 c4 10             	add    esp,0x10
c0017149:	85 c0                	test   eax,eax
c001714b:	74 63                	je     c00171b0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5c7>
c001714d:	50                   	push   eax
c001714e:	50                   	push   eax
c001714f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017153:	03 06                	add    eax,DWORD PTR [esi]
c0017155:	50                   	push   eax
c0017156:	68 6d 19 02 c0       	push   0xc002196d
c001715b:	e8 fb 7b ff ff       	call   c000ed5b <Dbg::kprintf(char const*, ...)>
c0017160:	58                   	pop    eax
c0017161:	5a                   	pop    edx
c0017162:	68 87 19 02 c0       	push   0xc0021987
c0017167:	8d 9c 24 5c 02 00 00 	lea    ebx,[esp+0x25c]
c001716e:	53                   	push   ebx
c001716f:	e8 33 95 fe ff       	call   c00006a7 <strcpy>
c0017174:	59                   	pop    ecx
c0017175:	58                   	pop    eax
c0017176:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001717a:	03 06                	add    eax,DWORD PTR [esi]
c001717c:	50                   	push   eax
c001717d:	53                   	push   ebx
c001717e:	e8 db 95 fe ff       	call   c000075e <strcat>
c0017183:	58                   	pop    eax
c0017184:	5a                   	pop    edx
c0017185:	68 1d 1a 02 c0       	push   0xc0021a1d
c001718a:	53                   	push   ebx
c001718b:	e8 ce 95 fe ff       	call   c000075e <strcat>
c0017190:	83 c4 10             	add    esp,0x10
c0017193:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c0017198:	0f 84 4b 01 00 00    	je     c00172e9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c001719e:	83 ec 0c             	sub    esp,0xc
c00171a1:	53                   	push   ebx
c00171a2:	e8 49 d8 ff ff       	call   c00149f0 <Krnl::panic(char const*)>
c00171a7:	83 c4 10             	add    esp,0x10
c00171aa:	8a 5c 24 27          	mov    bl,BYTE PTR [esp+0x27]
c00171ae:	eb 0b                	jmp    c00171bb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d2>
c00171b0:	b8 3c e2 01 c0       	mov    eax,0xc001e23c
c00171b5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00171b9:	b3 01                	mov    bl,0x1
c00171bb:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c00171c0:	0f 85 80 00 00 00    	jne    c0017246 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x65d>
c00171c6:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c00171cd:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00171d1:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c00171d5:	01 ce                	add    esi,ecx
c00171d7:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c00171df:	8b 06                	mov    eax,DWORD PTR [esi]
c00171e1:	0f 94 c2             	sete   dl
c00171e4:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c00171ec:	0f 94 44 24 18       	sete   BYTE PTR [esp+0x18]
c00171f1:	0b 54 24 18          	or     edx,DWORD PTR [esp+0x18]
c00171f5:	84 db                	test   bl,bl
c00171f7:	74 31                	je     c001722a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x641>
c00171f9:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00171fd:	01 c3                	add    ebx,eax
c00171ff:	84 d2                	test   dl,dl
c0017201:	75 0a                	jne    c001720d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x624>
c0017203:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0017207:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c001720b:	76 32                	jbe    c001723f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x656>
c001720d:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c0017212:	0f 84 d1 00 00 00    	je     c00172e9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0017218:	83 ec 0c             	sub    esp,0xc
c001721b:	68 9e 19 02 c0       	push   0xc002199e
c0017220:	e8 cb d7 ff ff       	call   c00149f0 <Krnl::panic(char const*)>
c0017225:	83 c4 10             	add    esp,0x10
c0017228:	eb 15                	jmp    c001723f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x656>
c001722a:	8d 1c 08             	lea    ebx,[eax+ecx*1]
c001722d:	84 d2                	test   dl,dl
c001722f:	75 0e                	jne    c001723f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x656>
c0017231:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0017235:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c0017239:	77 04                	ja     c001723f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x656>
c001723b:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c001723f:	89 1e                	mov    DWORD PTR [esi],ebx
c0017241:	e9 df 00 00 00       	jmp    c0017325 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73c>
c0017246:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c001724b:	75 6e                	jne    c00172bb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d2>
c001724d:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c0017254:	2b 74 24 2c          	sub    esi,DWORD PTR [esp+0x2c]
c0017258:	03 74 24 30          	add    esi,DWORD PTR [esp+0x30]
c001725c:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c0017264:	74 17                	je     c001727d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x694>
c0017266:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c001726e:	74 0d                	je     c001727d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x694>
c0017270:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0017274:	83 e8 04             	sub    eax,0x4
c0017277:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c001727b:	76 17                	jbe    c0017294 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6ab>
c001727d:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c0017282:	74 65                	je     c00172e9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0017284:	83 ec 0c             	sub    esp,0xc
c0017287:	68 ba 19 02 c0       	push   0xc00219ba
c001728c:	e8 5f d7 ff ff       	call   c00149f0 <Krnl::panic(char const*)>
c0017291:	83 c4 10             	add    esp,0x10
c0017294:	8b 16                	mov    edx,DWORD PTR [esi]
c0017296:	84 db                	test   bl,bl
c0017298:	74 13                	je     c00172ad <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6c4>
c001729a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001729e:	2b 84 24 74 03 00 00 	sub    eax,DWORD PTR [esp+0x374]
c00172a5:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c00172a9:	01 d0                	add    eax,edx
c00172ab:	eb 06                	jmp    c00172b3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6ca>
c00172ad:	89 d0                	mov    eax,edx
c00172af:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c00172b3:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00172b7:	89 06                	mov    DWORD PTR [esi],eax
c00172b9:	eb 6a                	jmp    c0017325 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73c>
c00172bb:	50                   	push   eax
c00172bc:	50                   	push   eax
c00172bd:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c00172c2:	50                   	push   eax
c00172c3:	68 d6 19 02 c0       	push   0xc00219d6
c00172c8:	e8 8e 7a ff ff       	call   c000ed5b <Dbg::kprintf(char const*, ...)>
c00172cd:	83 c4 10             	add    esp,0x10
c00172d0:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c00172d5:	74 12                	je     c00172e9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c00172d7:	83 ec 0c             	sub    esp,0xc
c00172da:	68 e1 19 02 c0       	push   0xc00219e1
c00172df:	e8 0c d7 ff ff       	call   c00149f0 <Krnl::panic(char const*)>
c00172e4:	83 c4 10             	add    esp,0x10
c00172e7:	eb 3c                	jmp    c0017325 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73c>
c00172e9:	83 ec 0c             	sub    esp,0xc
c00172ec:	57                   	push   edi
c00172ed:	e8 5a 80 ff ff       	call   c000f34c <File::close()>
c00172f2:	89 3c 24             	mov    DWORD PTR [esp],edi
c00172f5:	8b 07                	mov    eax,DWORD PTR [edi]
c00172f7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00172fa:	59                   	pop    ecx
c00172fb:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00172ff:	e8 2a 49 ff ff       	call   c000bc2e <free>
c0017304:	5b                   	pop    ebx
c0017305:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017309:	e8 20 49 ff ff       	call   c000bc2e <free>
c001730e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017311:	e8 18 49 ff ff       	call   c000bc2e <free>
c0017316:	5e                   	pop    esi
c0017317:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001731b:	e8 0e 49 ff ff       	call   c000bc2e <free>
c0017320:	83 c4 10             	add    esp,0x10
c0017323:	eb 21                	jmp    c0017346 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017325:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c0017329:	e9 2c fd ff ff       	jmp    c001705a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x471>
c001732e:	83 ec 0c             	sub    esp,0xc
c0017331:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017335:	e8 f4 48 ff ff       	call   c000bc2e <free>
c001733a:	ff 44 24 30          	inc    DWORD PTR [esp+0x30]
c001733e:	83 c4 10             	add    esp,0x10
c0017341:	e9 a2 fc ff ff       	jmp    c0016fe8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3ff>
c0017346:	31 c0                	xor    eax,eax
c0017348:	eb 32                	jmp    c001737c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x793>
c001734a:	83 ec 0c             	sub    esp,0xc
c001734d:	57                   	push   edi
c001734e:	e8 f9 7f ff ff       	call   c000f34c <File::close()>
c0017353:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017356:	8b 07                	mov    eax,DWORD PTR [edi]
c0017358:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001735b:	58                   	pop    eax
c001735c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017360:	e8 c9 48 ff ff       	call   c000bc2e <free>
c0017365:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017368:	e8 c1 48 ff ff       	call   c000bc2e <free>
c001736d:	5a                   	pop    edx
c001736e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0017372:	e8 b7 48 ff ff       	call   c000bc2e <free>
c0017377:	83 c4 10             	add    esp,0x10
c001737a:	b0 01                	mov    al,0x1
c001737c:	81 c4 5c 03 00 00    	add    esp,0x35c
c0017382:	5b                   	pop    ebx
c0017383:	5e                   	pop    esi
c0017384:	5f                   	pop    edi
c0017385:	5d                   	pop    ebp
c0017386:	c3                   	ret    

c0017387 <Thr::getDriverBaseFromAddress(unsigned long)>:
c0017387:	56                   	push   esi
c0017388:	31 d2                	xor    edx,edx
c001738a:	53                   	push   ebx
c001738b:	8b 1d 60 40 02 c0    	mov    ebx,DWORD PTR ds:0xc0024060
c0017391:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017395:	39 d3                	cmp    ebx,edx
c0017397:	7e 1b                	jle    c00173b4 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0017399:	8b 04 95 80 42 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdbd80]
c00173a0:	39 c8                	cmp    eax,ecx
c00173a2:	77 0d                	ja     c00173b1 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c00173a4:	8b 34 95 80 40 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffdbf80]
c00173ab:	01 c6                	add    esi,eax
c00173ad:	39 ce                	cmp    esi,ecx
c00173af:	77 05                	ja     c00173b6 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c00173b1:	42                   	inc    edx
c00173b2:	eb e1                	jmp    c0017395 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c00173b4:	31 c0                	xor    eax,eax
c00173b6:	5b                   	pop    ebx
c00173b7:	5e                   	pop    esi
c00173b8:	c3                   	ret    

c00173b9 <Thr::getDriverNameFromAddress(unsigned long)>:
c00173b9:	53                   	push   ebx
c00173ba:	31 c0                	xor    eax,eax
c00173bc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00173c0:	8b 1d 60 40 02 c0    	mov    ebx,DWORD PTR ds:0xc0024060
c00173c6:	39 c3                	cmp    ebx,eax
c00173c8:	7e 22                	jle    c00173ec <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c00173ca:	8b 14 85 80 42 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbd80]
c00173d1:	39 ca                	cmp    edx,ecx
c00173d3:	77 14                	ja     c00173e9 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00173d5:	03 14 85 80 40 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffdbf80]
c00173dc:	39 ca                	cmp    edx,ecx
c00173de:	76 09                	jbe    c00173e9 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00173e0:	8b 04 85 80 44 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbb80]
c00173e7:	eb 05                	jmp    c00173ee <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c00173e9:	40                   	inc    eax
c00173ea:	eb da                	jmp    c00173c6 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c00173ec:	31 c0                	xor    eax,eax
c00173ee:	5b                   	pop    ebx
c00173ef:	c3                   	ret    

c00173f0 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c00173f0:	53                   	push   ebx
c00173f1:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00173f5:	53                   	push   ebx
c00173f6:	e8 8c ff ff ff       	call   c0017387 <Thr::getDriverBaseFromAddress(unsigned long)>
c00173fb:	5a                   	pop    edx
c00173fc:	31 d2                	xor    edx,edx
c00173fe:	85 c0                	test   eax,eax
c0017400:	74 04                	je     c0017406 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0017402:	89 da                	mov    edx,ebx
c0017404:	29 c2                	sub    edx,eax
c0017406:	89 d0                	mov    eax,edx
c0017408:	5b                   	pop    ebx
c0017409:	c3                   	ret    

c001740a <Thr::loadDLL(char const*, bool)>:
c001740a:	55                   	push   ebp
c001740b:	57                   	push   edi
c001740c:	56                   	push   esi
c001740d:	53                   	push   ebx
c001740e:	81 ec 34 01 00 00    	sub    esp,0x134
c0017414:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001741b:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0017422:	56                   	push   esi
c0017423:	68 f9 19 02 c0       	push   0xc00219f9
c0017428:	e8 2e 79 ff ff       	call   c000ed5b <Dbg::kprintf(char const*, ...)>
c001742d:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0017434:	e8 33 78 ff ff       	call   c000ec6c <operator new(unsigned long)>
c0017439:	83 c4 0c             	add    esp,0xc
c001743c:	89 c3                	mov    ebx,eax
c001743e:	ff 35 54 48 02 c0    	push   DWORD PTR ds:0xc0024854
c0017444:	56                   	push   esi
c0017445:	50                   	push   eax
c0017446:	e8 3f 7e ff ff       	call   c000f28a <File::File(char const*, Process*)>
c001744b:	83 c4 0c             	add    esp,0xc
c001744e:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0017452:	50                   	push   eax
c0017453:	8d 44 24 20          	lea    eax,[esp+0x20]
c0017457:	50                   	push   eax
c0017458:	53                   	push   ebx
c0017459:	e8 3c 81 ff ff       	call   c000f59a <File::stat(unsigned long long*, bool*)>
c001745e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017460:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017463:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017466:	83 c4 10             	add    esp,0x10
c0017469:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001746e:	75 0a                	jne    c001747a <Thr::loadDLL(char const*, bool)+0x70>
c0017470:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017474:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0017478:	75 3c                	jne    c00174b6 <Thr::loadDLL(char const*, bool)+0xac>
c001747a:	89 f8                	mov    eax,edi
c001747c:	84 c0                	test   al,al
c001747e:	0f 84 7b 01 00 00    	je     c00175ff <Thr::loadDLL(char const*, bool)+0x1f5>
c0017484:	51                   	push   ecx
c0017485:	51                   	push   ecx
c0017486:	68 0a 1a 02 c0       	push   0xc0021a0a
c001748b:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001748f:	53                   	push   ebx
c0017490:	e8 12 92 fe ff       	call   c00006a7 <strcpy>
c0017495:	5d                   	pop    ebp
c0017496:	58                   	pop    eax
c0017497:	56                   	push   esi
c0017498:	53                   	push   ebx
c0017499:	e8 c0 92 fe ff       	call   c000075e <strcat>
c001749e:	58                   	pop    eax
c001749f:	5a                   	pop    edx
c00174a0:	68 1d 1a 02 c0       	push   0xc0021a1d
c00174a5:	53                   	push   ebx
c00174a6:	e8 b3 92 fe ff       	call   c000075e <strcat>
c00174ab:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00174ae:	e8 3d d5 ff ff       	call   c00149f0 <Krnl::panic(char const*)>
c00174b3:	83 c4 10             	add    esp,0x10
c00174b6:	e8 d6 6a ff ff       	call   c000df91 <Virt::getAKernelVAS()>
c00174bb:	53                   	push   ebx
c00174bc:	6a 03                	push   0x3
c00174be:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00174c2:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c00174c6:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c00174cc:	83 d3 00             	adc    ebx,0x0
c00174cf:	89 ca                	mov    edx,ecx
c00174d1:	89 d1                	mov    ecx,edx
c00174d3:	0f ac d9 0c          	shrd   ecx,ebx,0xc
c00174d7:	51                   	push   ecx
c00174d8:	50                   	push   eax
c00174d9:	e8 7e 70 ff ff       	call   c000e55c <VAS::allocatePages(int, int)>
c00174de:	89 34 24             	mov    DWORD PTR [esp],esi
c00174e1:	89 c3                	mov    ebx,eax
c00174e3:	e8 3d 91 fe ff       	call   c0000625 <strlen>
c00174e8:	8b 2d 60 40 02 c0    	mov    ebp,DWORD PTR ds:0xc0024060
c00174ee:	40                   	inc    eax
c00174ef:	89 04 24             	mov    DWORD PTR [esp],eax
c00174f2:	e8 27 47 ff ff       	call   c000bc1e <malloc>
c00174f7:	89 04 ad 80 44 02 c0 	mov    DWORD PTR [ebp*4-0x3ffdbb80],eax
c00174fe:	5d                   	pop    ebp
c00174ff:	58                   	pop    eax
c0017500:	a1 60 40 02 c0       	mov    eax,ds:0xc0024060
c0017505:	56                   	push   esi
c0017506:	ff 34 85 80 44 02 c0 	push   DWORD PTR [eax*4-0x3ffdbb80]
c001750d:	e8 95 91 fe ff       	call   c00006a7 <strcpy>
c0017512:	a1 60 40 02 c0       	mov    eax,ds:0xc0024060
c0017517:	8d 50 01             	lea    edx,[eax+0x1]
c001751a:	89 1c 85 80 42 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbd80],ebx
c0017521:	89 15 60 40 02 c0    	mov    DWORD PTR ds:0xc0024060,edx
c0017527:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001752b:	89 14 85 80 40 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbf80],edx
c0017532:	58                   	pop    eax
c0017533:	5a                   	pop    edx
c0017534:	53                   	push   ebx
c0017535:	68 1f 1a 02 c0       	push   0xc0021a1f
c001753a:	e8 1c 78 ff ff       	call   c000ed5b <Dbg::kprintf(char const*, ...)>
c001753f:	83 c4 0c             	add    esp,0xc
c0017542:	6a 01                	push   0x1
c0017544:	53                   	push   ebx
c0017545:	56                   	push   esi
c0017546:	e8 9e f6 ff ff       	call   c0016be9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001754b:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c001754f:	83 c4 10             	add    esp,0x10
c0017552:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c0017557:	74 16                	je     c001756f <Thr::loadDLL(char const*, bool)+0x165>
c0017559:	89 f8                	mov    eax,edi
c001755b:	84 c0                	test   al,al
c001755d:	74 10                	je     c001756f <Thr::loadDLL(char const*, bool)+0x165>
c001755f:	83 ec 0c             	sub    esp,0xc
c0017562:	68 3e 1a 02 c0       	push   0xc0021a3e
c0017567:	e8 84 d4 ff ff       	call   c00149f0 <Krnl::panic(char const*)>
c001756c:	83 c4 10             	add    esp,0x10
c001756f:	31 f6                	xor    esi,esi
c0017571:	31 ed                	xor    ebp,ebp
c0017573:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001757a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001757e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017582:	05 ff 0f 00 00       	add    eax,0xfff
c0017587:	83 d2 00             	adc    edx,0x0
c001758a:	0f ac d0 0c          	shrd   eax,edx,0xc
c001758e:	c1 ea 0c             	shr    edx,0xc
c0017591:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017595:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0017599:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c001759d:	ba 00 00 00 00       	mov    edx,0x0
c00175a2:	89 d0                	mov    eax,edx
c00175a4:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00175a8:	73 4e                	jae    c00175f8 <Thr::loadDLL(char const*, bool)+0x1ee>
c00175aa:	e8 e2 69 ff ff       	call   c000df91 <Virt::getAKernelVAS()>
c00175af:	89 f7                	mov    edi,esi
c00175b1:	c1 e7 0c             	shl    edi,0xc
c00175b4:	51                   	push   ecx
c00175b5:	01 df                	add    edi,ebx
c00175b7:	51                   	push   ecx
c00175b8:	57                   	push   edi
c00175b9:	50                   	push   eax
c00175ba:	e8 7d 6b ff ff       	call   c000e13c <VAS::getPageTableEntry(unsigned long)>
c00175bf:	83 c4 10             	add    esp,0x10
c00175c2:	f6 00 60             	test   BYTE PTR [eax],0x60
c00175c5:	74 15                	je     c00175dc <Thr::loadDLL(char const*, bool)+0x1d2>
c00175c7:	ff 04 24             	inc    DWORD PTR [esp]
c00175ca:	52                   	push   edx
c00175cb:	52                   	push   edx
c00175cc:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00175d0:	68 5d 1a 02 c0       	push   0xc0021a5d
c00175d5:	e8 81 77 ff ff       	call   c000ed5b <Dbg::kprintf(char const*, ...)>
c00175da:	eb 16                	jmp    c00175f2 <Thr::loadDLL(char const*, bool)+0x1e8>
c00175dc:	45                   	inc    ebp
c00175dd:	50                   	push   eax
c00175de:	50                   	push   eax
c00175df:	55                   	push   ebp
c00175e0:	68 73 1a 02 c0       	push   0xc0021a73
c00175e5:	e8 71 77 ff ff       	call   c000ed5b <Dbg::kprintf(char const*, ...)>
c00175ea:	89 3c 24             	mov    DWORD PTR [esp],edi
c00175ed:	e8 4c 4b ff ff       	call   c000c13e <Phys::freePage(unsigned long)>
c00175f2:	83 c4 10             	add    esp,0x10
c00175f5:	46                   	inc    esi
c00175f6:	eb 82                	jmp    c001757a <Thr::loadDLL(char const*, bool)+0x170>
c00175f8:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c00175fd:	75 02                	jne    c0017601 <Thr::loadDLL(char const*, bool)+0x1f7>
c00175ff:	31 db                	xor    ebx,ebx
c0017601:	81 c4 2c 01 00 00    	add    esp,0x12c
c0017607:	89 d8                	mov    eax,ebx
c0017609:	5b                   	pop    ebx
c001760a:	5e                   	pop    esi
c001760b:	5f                   	pop    edi
c001760c:	5d                   	pop    ebp
c001760d:	c3                   	ret    

c001760e <Thr::executeDLL(unsigned long, void*)>:
c001760e:	56                   	push   esi
c001760f:	53                   	push   ebx
c0017610:	51                   	push   ecx
c0017611:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017615:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0017619:	85 db                	test   ebx,ebx
c001761b:	75 10                	jne    c001762d <Thr::executeDLL(unsigned long, void*)+0x1f>
c001761d:	83 ec 0c             	sub    esp,0xc
c0017620:	68 8d 1a 02 c0       	push   0xc0021a8d
c0017625:	e8 c6 d3 ff ff       	call   c00149f0 <Krnl::panic(char const*)>
c001762a:	83 c4 10             	add    esp,0x10
c001762d:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0017631:	89 d8                	mov    eax,ebx
c0017633:	5a                   	pop    edx
c0017634:	5b                   	pop    ebx
c0017635:	5e                   	pop    esi
c0017636:	ff e0                	jmp    eax

c0017638 <changeTSS>:
c0017638:	83 ec 0c             	sub    esp,0xc
c001763b:	e8 aa c6 ff ff       	call   c0013cea <thisCPU()>
c0017640:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0017646:	83 ec 08             	sub    esp,0x8
c0017649:	8b 4a 3c             	mov    ecx,DWORD PTR [edx+0x3c]
c001764c:	05 7c 11 00 00       	add    eax,0x117c
c0017651:	c1 e1 15             	shl    ecx,0x15
c0017654:	ba 00 00 e8 01       	mov    edx,0x1e80000
c0017659:	29 ca                	sub    edx,ecx
c001765b:	52                   	push   edx
c001765c:	50                   	push   eax
c001765d:	e8 7e 60 ff ff       	call   c000d6e0 <TSS::setESP(unsigned long)>
c0017662:	83 c4 1c             	add    esp,0x1c
c0017665:	c3                   	ret    

c0017666 <Process::addArgs(char**)>:
c0017666:	57                   	push   edi
c0017667:	56                   	push   esi
c0017668:	53                   	push   ebx
c0017669:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001766d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0017671:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001767b:	85 ff                	test   edi,edi
c001767d:	74 3d                	je     c00176bc <Process::addArgs(char**)+0x56>
c001767f:	8b 07                	mov    eax,DWORD PTR [edi]
c0017681:	85 c0                	test   eax,eax
c0017683:	74 37                	je     c00176bc <Process::addArgs(char**)+0x56>
c0017685:	31 db                	xor    ebx,ebx
c0017687:	83 ec 0c             	sub    esp,0xc
c001768a:	50                   	push   eax
c001768b:	e8 95 8f fe ff       	call   c0000625 <strlen>
c0017690:	40                   	inc    eax
c0017691:	89 04 24             	mov    DWORD PTR [esp],eax
c0017694:	e8 85 45 ff ff       	call   c000bc1e <malloc>
c0017699:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c00176a0:	5a                   	pop    edx
c00176a1:	59                   	pop    ecx
c00176a2:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c00176a5:	43                   	inc    ebx
c00176a6:	50                   	push   eax
c00176a7:	e8 fb 8f fe ff       	call   c00006a7 <strcpy>
c00176ac:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c00176b2:	83 c4 10             	add    esp,0x10
c00176b5:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c00176b8:	85 c0                	test   eax,eax
c00176ba:	75 cb                	jne    c0017687 <Process::addArgs(char**)+0x21>
c00176bc:	5b                   	pop    ebx
c00176bd:	5e                   	pop    esi
c00176be:	5f                   	pop    edi
c00176bf:	c3                   	ret    

c00176c0 <Process::Process(char const*, Process*, char**)>:
c00176c0:	56                   	push   esi
c00176c1:	53                   	push   ebx
c00176c2:	83 ec 14             	sub    esp,0x14
c00176c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00176c9:	05 0c 02 00 00       	add    eax,0x20c
c00176ce:	bb 07 00 00 00       	mov    ebx,0x7
c00176d3:	89 c6                	mov    esi,eax
c00176d5:	85 db                	test   ebx,ebx
c00176d7:	78 12                	js     c00176eb <Process::Process(char const*, Process*, char**)+0x2b>
c00176d9:	83 ec 0c             	sub    esp,0xc
c00176dc:	56                   	push   esi
c00176dd:	e8 28 76 00 00       	call   c001ed0a <ThreadControlBlock::ThreadControlBlock()>
c00176e2:	83 c4 10             	add    esp,0x10
c00176e5:	83 c6 63             	add    esi,0x63
c00176e8:	4b                   	dec    ebx
c00176e9:	eb ea                	jmp    c00176d5 <Process::Process(char const*, Process*, char**)+0x15>
c00176eb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00176ef:	c6 80 3a 07 00 00 00 	mov    BYTE PTR [eax+0x73a],0x0
c00176f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00176fa:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c0017703:	a1 24 2e 02 c0       	mov    eax,ds:0xc0022e24
c0017708:	8d 50 01             	lea    edx,[eax+0x1]
c001770b:	89 15 24 2e 02 c0    	mov    DWORD PTR ds:0xc0022e24,edx
c0017711:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017715:	89 02                	mov    DWORD PTR [edx],eax
c0017717:	83 ec 0c             	sub    esp,0xc
c001771a:	6a 10                	push   0x10
c001771c:	e8 4b 75 ff ff       	call   c000ec6c <operator new(unsigned long)>
c0017721:	83 c4 10             	add    esp,0x10
c0017724:	89 c3                	mov    ebx,eax
c0017726:	83 ec 08             	sub    esp,0x8
c0017729:	6a 00                	push   0x0
c001772b:	53                   	push   ebx
c001772c:	e8 cf 71 ff ff       	call   c000e900 <VAS::VAS(bool)>
c0017731:	83 c4 10             	add    esp,0x10
c0017734:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017738:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001773e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017742:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001774c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017750:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017754:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001775a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001775e:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c0017764:	85 c0                	test   eax,eax
c0017766:	74 42                	je     c00177aa <Process::Process(char const*, Process*, char**)+0xea>
c0017768:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001776c:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c0017772:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c0017778:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001777c:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c0017782:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017786:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001778c:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0017792:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017796:	05 0c 01 00 00       	add    eax,0x10c
c001779b:	83 ec 08             	sub    esp,0x8
c001779e:	52                   	push   edx
c001779f:	50                   	push   eax
c00177a0:	e8 02 8f fe ff       	call   c00006a7 <strcpy>
c00177a5:	83 c4 10             	add    esp,0x10
c00177a8:	eb 5c                	jmp    c0017806 <Process::Process(char const*, Process*, char**)+0x146>
c00177aa:	83 ec 0c             	sub    esp,0xc
c00177ad:	68 60 12 00 00       	push   0x1260
c00177b2:	e8 b5 74 ff ff       	call   c000ec6c <operator new(unsigned long)>
c00177b7:	83 c4 10             	add    esp,0x10
c00177ba:	89 c3                	mov    ebx,eax
c00177bc:	83 ec 08             	sub    esp,0x8
c00177bf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00177c3:	53                   	push   ebx
c00177c4:	e8 15 5c ff ff       	call   c000d3de <VgaText::VgaText(char const*)>
c00177c9:	83 c4 10             	add    esp,0x10
c00177cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00177d0:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c00177d6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00177da:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00177e0:	83 ec 0c             	sub    esp,0xc
c00177e3:	50                   	push   eax
c00177e4:	e8 f6 4f ff ff       	call   c000c7df <addToTerminalCycle(VgaText*)>
c00177e9:	83 c4 10             	add    esp,0x10
c00177ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00177f0:	05 0c 01 00 00       	add    eax,0x10c
c00177f5:	83 ec 08             	sub    esp,0x8
c00177f8:	68 b7 1a 02 c0       	push   0xc0021ab7
c00177fd:	50                   	push   eax
c00177fe:	e8 a4 8e fe ff       	call   c00006a7 <strcpy>
c0017803:	83 c4 10             	add    esp,0x10
c0017806:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001780a:	83 c0 0c             	add    eax,0xc
c001780d:	83 ec 08             	sub    esp,0x8
c0017810:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017814:	50                   	push   eax
c0017815:	e8 8d 8e fe ff       	call   c00006a7 <strcpy>
c001781a:	83 c4 10             	add    esp,0x10
c001781d:	83 ec 08             	sub    esp,0x8
c0017820:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0017824:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017828:	e8 39 fe ff ff       	call   c0017666 <Process::addArgs(char**)>
c001782d:	83 c4 10             	add    esp,0x10
c0017830:	83 ec 08             	sub    esp,0x8
c0017833:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017837:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001783b:	e8 70 ee ff ff       	call   c00166b0 <Thr::loadProgramIntoMemory(Process*, char const*)>
c0017840:	83 c4 10             	add    esp,0x10
c0017843:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017847:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001784b:	83 f0 01             	xor    eax,0x1
c001784e:	88 c2                	mov    dl,al
c0017850:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017854:	88 90 3a 07 00 00    	mov    BYTE PTR [eax+0x73a],dl
c001785a:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001785f:	83 ec 08             	sub    esp,0x8
c0017862:	50                   	push   eax
c0017863:	68 b4 1b 02 c0       	push   0xc0021bb4
c0017868:	e8 ee 74 ff ff       	call   c000ed5b <Dbg::kprintf(char const*, ...)>
c001786d:	83 c4 10             	add    esp,0x10
c0017870:	90                   	nop
c0017871:	83 c4 14             	add    esp,0x14
c0017874:	5b                   	pop    ebx
c0017875:	5e                   	pop    esi
c0017876:	c3                   	ret    
c0017877:	90                   	nop

c0017878 <Process::Process(bool, char const*, Process*, char**)>:
c0017878:	56                   	push   esi
c0017879:	53                   	push   ebx
c001787a:	83 ec 14             	sub    esp,0x14
c001787d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017881:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0017885:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017889:	05 0c 02 00 00       	add    eax,0x20c
c001788e:	bb 07 00 00 00       	mov    ebx,0x7
c0017893:	89 c6                	mov    esi,eax
c0017895:	85 db                	test   ebx,ebx
c0017897:	78 12                	js     c00178ab <Process::Process(bool, char const*, Process*, char**)+0x33>
c0017899:	83 ec 0c             	sub    esp,0xc
c001789c:	56                   	push   esi
c001789d:	e8 68 74 00 00       	call   c001ed0a <ThreadControlBlock::ThreadControlBlock()>
c00178a2:	83 c4 10             	add    esp,0x10
c00178a5:	83 c6 63             	add    esi,0x63
c00178a8:	4b                   	dec    ebx
c00178a9:	eb ea                	jmp    c0017895 <Process::Process(bool, char const*, Process*, char**)+0x1d>
c00178ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00178af:	c6 80 3a 07 00 00 00 	mov    BYTE PTR [eax+0x73a],0x0
c00178b6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00178ba:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c00178c3:	a1 24 2e 02 c0       	mov    eax,ds:0xc0022e24
c00178c8:	8d 50 01             	lea    edx,[eax+0x1]
c00178cb:	89 15 24 2e 02 c0    	mov    DWORD PTR ds:0xc0022e24,edx
c00178d1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00178d5:	89 02                	mov    DWORD PTR [edx],eax
c00178d7:	83 ec 0c             	sub    esp,0xc
c00178da:	6a 10                	push   0x10
c00178dc:	e8 8b 73 ff ff       	call   c000ec6c <operator new(unsigned long)>
c00178e1:	83 c4 10             	add    esp,0x10
c00178e4:	89 c3                	mov    ebx,eax
c00178e6:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00178eb:	83 ec 08             	sub    esp,0x8
c00178ee:	50                   	push   eax
c00178ef:	53                   	push   ebx
c00178f0:	e8 0b 70 ff ff       	call   c000e900 <VAS::VAS(bool)>
c00178f5:	83 c4 10             	add    esp,0x10
c00178f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00178fc:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c0017902:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017906:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c0017910:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017914:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017918:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001791e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017922:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c0017928:	85 c0                	test   eax,eax
c001792a:	74 42                	je     c001796e <Process::Process(bool, char const*, Process*, char**)+0xf6>
c001792c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017930:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c0017936:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001793c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017940:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c0017946:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001794a:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c0017950:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0017956:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001795a:	05 0c 01 00 00       	add    eax,0x10c
c001795f:	83 ec 08             	sub    esp,0x8
c0017962:	52                   	push   edx
c0017963:	50                   	push   eax
c0017964:	e8 3e 8d fe ff       	call   c00006a7 <strcpy>
c0017969:	83 c4 10             	add    esp,0x10
c001796c:	eb 5c                	jmp    c00179ca <Process::Process(bool, char const*, Process*, char**)+0x152>
c001796e:	83 ec 0c             	sub    esp,0xc
c0017971:	68 60 12 00 00       	push   0x1260
c0017976:	e8 f1 72 ff ff       	call   c000ec6c <operator new(unsigned long)>
c001797b:	83 c4 10             	add    esp,0x10
c001797e:	89 c3                	mov    ebx,eax
c0017980:	83 ec 08             	sub    esp,0x8
c0017983:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017987:	53                   	push   ebx
c0017988:	e8 51 5a ff ff       	call   c000d3de <VgaText::VgaText(char const*)>
c001798d:	83 c4 10             	add    esp,0x10
c0017990:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017994:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001799a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001799e:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00179a4:	83 ec 0c             	sub    esp,0xc
c00179a7:	50                   	push   eax
c00179a8:	e8 32 4e ff ff       	call   c000c7df <addToTerminalCycle(VgaText*)>
c00179ad:	83 c4 10             	add    esp,0x10
c00179b0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179b4:	05 0c 01 00 00       	add    eax,0x10c
c00179b9:	83 ec 08             	sub    esp,0x8
c00179bc:	68 b7 1a 02 c0       	push   0xc0021ab7
c00179c1:	50                   	push   eax
c00179c2:	e8 e0 8c fe ff       	call   c00006a7 <strcpy>
c00179c7:	83 c4 10             	add    esp,0x10
c00179ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179ce:	83 c0 0c             	add    eax,0xc
c00179d1:	83 ec 08             	sub    esp,0x8
c00179d4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00179d8:	50                   	push   eax
c00179d9:	e8 c9 8c fe ff       	call   c00006a7 <strcpy>
c00179de:	83 c4 10             	add    esp,0x10
c00179e1:	83 ec 08             	sub    esp,0x8
c00179e4:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00179e8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00179ec:	e8 75 fc ff ff       	call   c0017666 <Process::addArgs(char**)>
c00179f1:	83 c4 10             	add    esp,0x10
c00179f4:	90                   	nop
c00179f5:	83 c4 14             	add    esp,0x14
c00179f8:	5b                   	pop    ebx
c00179f9:	5e                   	pop    esi
c00179fa:	c3                   	ret    

c00179fb <disableIRQs()>:
c00179fb:	fa                   	cli    
c00179fc:	ff 05 2c 48 02 c0    	inc    DWORD PTR ds:0xc002482c
c0017a02:	c3                   	ret    

c0017a03 <getIRQNestingLevel()>:
c0017a03:	a1 2c 48 02 c0       	mov    eax,ds:0xc002482c
c0017a08:	c3                   	ret    

c0017a09 <enableIRQs()>:
c0017a09:	a1 2c 48 02 c0       	mov    eax,ds:0xc002482c
c0017a0e:	48                   	dec    eax
c0017a0f:	a3 2c 48 02 c0       	mov    ds:0xc002482c,eax
c0017a14:	75 01                	jne    c0017a17 <enableIRQs()+0xe>
c0017a16:	fb                   	sti    
c0017a17:	c3                   	ret    

c0017a18 <lockScheduler()>:
c0017a18:	eb e1                	jmp    c00179fb <disableIRQs()>

c0017a1a <unlockScheduler()>:
c0017a1a:	eb ed                	jmp    c0017a09 <enableIRQs()>

c0017a1c <userModeEntryPoint(void*)>:
c0017a1c:	83 ec 0c             	sub    esp,0xc
c0017a1f:	e8 f6 ff ff ff       	call   c0017a1a <unlockScheduler()>
c0017a24:	fb                   	sti    
c0017a25:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017a2a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0017a2d:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c0017a33:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017a37:	83 c4 0c             	add    esp,0xc
c0017a3a:	e9 a7 87 fe ff       	jmp    c00001e6 <goToUsermode>

c0017a3f <lockStuff()>:
c0017a3f:	e8 b7 ff ff ff       	call   c00179fb <disableIRQs()>
c0017a44:	ff 05 28 48 02 c0    	inc    DWORD PTR ds:0xc0024828
c0017a4a:	c3                   	ret    

c0017a4b <taskStartupFunction>:
c0017a4b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017a50:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0017a53:	c3                   	ret    

c0017a54 <updateTimeUsed()>:
c0017a54:	57                   	push   edi
c0017a55:	56                   	push   esi
c0017a56:	53                   	push   ebx
c0017a57:	e8 8e c2 ff ff       	call   c0013cea <thisCPU()>
c0017a5c:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c0017a63:	74 49                	je     c0017aae <updateTimeUsed()+0x5a>
c0017a65:	0f 31                	rdtsc  
c0017a67:	89 c1                	mov    ecx,eax
c0017a69:	a3 68 48 02 c0       	mov    ds:0xc0024868,eax
c0017a6e:	2b 0d 58 48 02 c0    	sub    ecx,DWORD PTR ds:0xc0024858
c0017a74:	89 d3                	mov    ebx,edx
c0017a76:	89 0d 60 48 02 c0    	mov    DWORD PTR ds:0xc0024860,ecx
c0017a7c:	1b 1d 5c 48 02 c0    	sbb    ebx,DWORD PTR ds:0xc002485c
c0017a82:	a3 58 48 02 c0       	mov    ds:0xc0024858,eax
c0017a87:	89 1d 64 48 02 c0    	mov    DWORD PTR ds:0xc0024864,ebx
c0017a8d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017a92:	89 15 6c 48 02 c0    	mov    DWORD PTR ds:0xc002486c,edx
c0017a98:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c0017a9b:	89 15 5c 48 02 c0    	mov    DWORD PTR ds:0xc002485c,edx
c0017aa1:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0017aa4:	01 f1                	add    ecx,esi
c0017aa6:	11 fb                	adc    ebx,edi
c0017aa8:	89 48 10             	mov    DWORD PTR [eax+0x10],ecx
c0017aab:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c0017aae:	5b                   	pop    ebx
c0017aaf:	5e                   	pop    esi
c0017ab0:	5f                   	pop    edi
c0017ab1:	c3                   	ret    

c0017ab2 <switchToThread(ThreadControlBlock*)>:
c0017ab2:	53                   	push   ebx
c0017ab3:	83 ec 08             	sub    esp,0x8
c0017ab6:	a1 28 48 02 c0       	mov    eax,ds:0xc0024828
c0017abb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017abf:	85 c0                	test   eax,eax
c0017ac1:	75 30                	jne    c0017af3 <switchToThread(ThreadControlBlock*)+0x41>
c0017ac3:	8a 43 44             	mov    al,BYTE PTR [ebx+0x44]
c0017ac6:	3c ff                	cmp    al,0xff
c0017ac8:	74 25                	je     c0017aef <switchToThread(ThreadControlBlock*)+0x3d>
c0017aca:	0f b6 d0             	movzx  edx,al
c0017acd:	b8 84 03 00 00       	mov    eax,0x384
c0017ad2:	29 d0                	sub    eax,edx
c0017ad4:	c1 e0 10             	shl    eax,0x10
c0017ad7:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c0017ada:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0017add:	e8 72 ff ff ff       	call   c0017a54 <updateTimeUsed()>
c0017ae2:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0017ae6:	83 c4 08             	add    esp,0x8
c0017ae9:	5b                   	pop    ebx
c0017aea:	e9 30 87 fe ff       	jmp    c000021f <switchToThreadASM>
c0017aef:	31 c0                	xor    eax,eax
c0017af1:	eb e7                	jmp    c0017ada <switchToThread(ThreadControlBlock*)+0x28>
c0017af3:	c7 05 24 48 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0024824,0x1
c0017afd:	83 c4 08             	add    esp,0x8
c0017b00:	5b                   	pop    ebx
c0017b01:	c3                   	ret    

c0017b02 <Semaphore::Semaphore(int)>:
c0017b02:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017b06:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017b0a:	89 10                	mov    DWORD PTR [eax],edx
c0017b0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017b10:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0017b17:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017b1b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0017b22:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017b26:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0017b2d:	90                   	nop
c0017b2e:	c3                   	ret    
c0017b2f:	90                   	nop

c0017b30 <Mutex::Mutex()>:
c0017b30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017b34:	6a 01                	push   0x1
c0017b36:	50                   	push   eax
c0017b37:	e8 c6 ff ff ff       	call   c0017b02 <Semaphore::Semaphore(int)>
c0017b3c:	83 c4 08             	add    esp,0x8
c0017b3f:	90                   	nop
c0017b40:	c3                   	ret    
c0017b41:	90                   	nop

c0017b42 <Process::createThread(void (*)(void*), void*, int)>:
c0017b42:	55                   	push   ebp
c0017b43:	31 c9                	xor    ecx,ecx
c0017b45:	57                   	push   edi
c0017b46:	56                   	push   esi
c0017b47:	53                   	push   ebx
c0017b48:	83 ec 1c             	sub    esp,0x1c
c0017b4b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0017b4f:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c0017b56:	89 f2                	mov    edx,esi
c0017b58:	0f b7 c2             	movzx  eax,dx
c0017b5b:	83 e2 01             	and    edx,0x1
c0017b5e:	74 14                	je     c0017b74 <Process::createThread(void (*)(void*), void*, int)+0x32>
c0017b60:	d1 f8                	sar    eax,1
c0017b62:	41                   	inc    ecx
c0017b63:	89 c2                	mov    edx,eax
c0017b65:	83 f9 10             	cmp    ecx,0x10
c0017b68:	75 ee                	jne    c0017b58 <Process::createThread(void (*)(void*), void*, int)+0x16>
c0017b6a:	83 c4 1c             	add    esp,0x1c
c0017b6d:	31 c0                	xor    eax,eax
c0017b6f:	5b                   	pop    ebx
c0017b70:	5e                   	pop    esi
c0017b71:	5f                   	pop    edi
c0017b72:	5d                   	pop    ebp
c0017b73:	c3                   	ret    
c0017b74:	83 ec 08             	sub    esp,0x8
c0017b77:	b8 01 00 00 00       	mov    eax,0x1
c0017b7c:	d3 e0                	shl    eax,cl
c0017b7e:	09 c6                	or     esi,eax
c0017b80:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c0017b86:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c0017b8d:	8d 34 09             	lea    esi,[ecx+ecx*1]
c0017b90:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0017b93:	01 ce                	add    esi,ecx
c0017b95:	89 f0                	mov    eax,esi
c0017b97:	c1 e0 05             	shl    eax,0x5
c0017b9a:	01 c6                	add    esi,eax
c0017b9c:	8d 04 33             	lea    eax,[ebx+esi*1]
c0017b9f:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0017ba5:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c0017bab:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0017baf:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c0017bb5:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c0017bbb:	89 ca                	mov    edx,ecx
c0017bbd:	f7 da                	neg    edx
c0017bbf:	c1 e2 15             	shl    edx,0x15
c0017bc2:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0017bc8:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0017bce:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0017bd2:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0017bdc:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c0017be2:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0017be6:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0017bec:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0017bf6:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0017c00:	8d 84 33 0c 02 00 00 	lea    eax,[ebx+esi*1+0x20c]
c0017c07:	50                   	push   eax
c0017c08:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017c0c:	68 48 48 02 c0       	push   0xc0024848
c0017c11:	e8 4c 6f 00 00       	call   c001eb62 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0017c16:	83 c4 10             	add    esp,0x10
c0017c19:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017c1d:	83 c4 1c             	add    esp,0x1c
c0017c20:	5b                   	pop    ebx
c0017c21:	5e                   	pop    esi
c0017c22:	5f                   	pop    edi
c0017c23:	5d                   	pop    ebp
c0017c24:	c3                   	ret    
c0017c25:	90                   	nop

c0017c26 <Process::createUserThread()>:
c0017c26:	83 ec 0c             	sub    esp,0xc
c0017c29:	68 80 00 00 00       	push   0x80
c0017c2e:	6a 00                	push   0x0
c0017c30:	68 1c 7a 01 c0       	push   0xc0017a1c
c0017c35:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017c39:	e8 04 ff ff ff       	call   c0017b42 <Process::createThread(void (*)(void*), void*, int)>
c0017c3e:	83 c4 1c             	add    esp,0x1c
c0017c41:	c3                   	ret    

c0017c42 <setupMultitasking(void (*)())>:
c0017c42:	56                   	push   esi
c0017c43:	53                   	push   ebx
c0017c44:	53                   	push   ebx
c0017c45:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017c49:	eb 10                	jmp    c0017c5b <setupMultitasking(void (*)())+0x19>
c0017c4b:	83 ec 0c             	sub    esp,0xc
c0017c4e:	68 48 48 02 c0       	push   0xc0024848
c0017c53:	e8 5c 6e 00 00       	call   c001eab4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0017c58:	83 c4 10             	add    esp,0x10
c0017c5b:	83 ec 0c             	sub    esp,0xc
c0017c5e:	68 48 48 02 c0       	push   0xc0024848
c0017c63:	e8 30 6e 00 00       	call   c001ea98 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0017c68:	83 c4 10             	add    esp,0x10
c0017c6b:	84 c0                	test   al,al
c0017c6d:	74 dc                	je     c0017c4b <setupMultitasking(void (*)())+0x9>
c0017c6f:	83 ec 0c             	sub    esp,0xc
c0017c72:	68 3b 07 00 00       	push   0x73b
c0017c77:	e8 f0 6f ff ff       	call   c000ec6c <operator new(unsigned long)>
c0017c7c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0017c83:	89 c3                	mov    ebx,eax
c0017c85:	6a 00                	push   0x0
c0017c87:	68 bb 1a 02 c0       	push   0xc0021abb
c0017c8c:	6a 01                	push   0x1
c0017c8e:	50                   	push   eax
c0017c8f:	e8 e4 fb ff ff       	call   c0017878 <Process::Process(bool, char const*, Process*, char**)>
c0017c94:	83 c4 18             	add    esp,0x18
c0017c97:	89 1d 54 48 02 c0    	mov    DWORD PTR ds:0xc0024854,ebx
c0017c9d:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c0017ca3:	68 dc 1b 02 c0       	push   0xc0021bdc
c0017ca8:	e8 ae 70 ff ff       	call   c000ed5b <Dbg::kprintf(char const*, ...)>
c0017cad:	58                   	pop    eax
c0017cae:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c0017cb4:	e8 9a 52 ff ff       	call   c000cf53 <setActiveTerminal(VgaText*)>
c0017cb9:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c0017cc1:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c0017cc7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0017cca:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c0017cd4:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0017cda:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c0017ce0:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0017cea:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c0017cf4:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0017cfe:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0017d04:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0017d0a:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0017d14:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0017d1a:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0017d24:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0017d2a:	5a                   	pop    edx
c0017d2b:	59                   	pop    ecx
c0017d2c:	68 b7 1a 02 c0       	push   0xc0021ab7
c0017d31:	50                   	push   eax
c0017d32:	e8 70 89 fe ff       	call   c00006a7 <strcpy>
c0017d37:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c0017d3e:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0017d42:	83 c4 14             	add    esp,0x14
c0017d45:	5b                   	pop    ebx
c0017d46:	5e                   	pop    esi
c0017d47:	e9 c5 84 fe ff       	jmp    c0000211 <switchToThreadASMFirstTime>

c0017d4c <schedule()>:
c0017d4c:	a1 28 48 02 c0       	mov    eax,ds:0xc0024828
c0017d51:	85 c0                	test   eax,eax
c0017d53:	74 0b                	je     c0017d60 <schedule()+0x14>
c0017d55:	c7 05 24 48 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0024824,0x1
c0017d5f:	c3                   	ret    
c0017d60:	53                   	push   ebx
c0017d61:	83 ec 14             	sub    esp,0x14
c0017d64:	68 48 48 02 c0       	push   0xc0024848
c0017d69:	e8 2a 6d 00 00       	call   c001ea98 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0017d6e:	83 c4 10             	add    esp,0x10
c0017d71:	84 c0                	test   al,al
c0017d73:	75 38                	jne    c0017dad <schedule()+0x61>
c0017d75:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017d7a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0017d7d:	4a                   	dec    edx
c0017d7e:	74 32                	je     c0017db2 <schedule()+0x66>
c0017d80:	83 ec 0c             	sub    esp,0xc
c0017d83:	68 48 48 02 c0       	push   0xc0024848
c0017d88:	e8 03 6d 00 00       	call   c001ea90 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0017d8d:	c7 04 24 48 48 02 c0 	mov    DWORD PTR [esp],0xc0024848
c0017d94:	89 c3                	mov    ebx,eax
c0017d96:	e8 19 6d 00 00       	call   c001eab4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0017d9b:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0017da2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017da5:	e8 08 fd ff ff       	call   c0017ab2 <switchToThread(ThreadControlBlock*)>
c0017daa:	83 c4 10             	add    esp,0x10
c0017dad:	83 c4 08             	add    esp,0x8
c0017db0:	5b                   	pop    ebx
c0017db1:	c3                   	ret    
c0017db2:	83 ec 08             	sub    esp,0x8
c0017db5:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0017dbc:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c0017dc2:	68 48 48 02 c0       	push   0xc0024848
c0017dc7:	e8 96 6d 00 00       	call   c001eb62 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0017dcc:	83 c4 10             	add    esp,0x10
c0017dcf:	eb af                	jmp    c0017d80 <schedule()+0x34>

c0017dd1 <unlockStuff()>:
c0017dd1:	a1 28 48 02 c0       	mov    eax,ds:0xc0024828
c0017dd6:	48                   	dec    eax
c0017dd7:	a3 28 48 02 c0       	mov    ds:0xc0024828,eax
c0017ddc:	75 09                	jne    c0017de7 <unlockStuff()+0x16>
c0017dde:	a1 24 48 02 c0       	mov    eax,ds:0xc0024824
c0017de3:	85 c0                	test   eax,eax
c0017de5:	75 05                	jne    c0017dec <unlockStuff()+0x1b>
c0017de7:	e9 1d fc ff ff       	jmp    c0017a09 <enableIRQs()>
c0017dec:	83 ec 0c             	sub    esp,0xc
c0017def:	c7 05 24 48 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024824,0x0
c0017df9:	e8 4e ff ff ff       	call   c0017d4c <schedule()>
c0017dfe:	83 c4 0c             	add    esp,0xc
c0017e01:	e9 03 fc ff ff       	jmp    c0017a09 <enableIRQs()>

c0017e06 <Semaphore::tryAcquire()>:
c0017e06:	83 ec 0c             	sub    esp,0xc
c0017e09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017e0d:	e8 2d fc ff ff       	call   c0017a3f <lockStuff()>
c0017e12:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0017e15:	3b 10                	cmp    edx,DWORD PTR [eax]
c0017e17:	7c 0b                	jl     c0017e24 <Semaphore::tryAcquire()+0x1e>
c0017e19:	e8 b3 ff ff ff       	call   c0017dd1 <unlockStuff()>
c0017e1e:	31 c0                	xor    eax,eax
c0017e20:	83 c4 0c             	add    esp,0xc
c0017e23:	c3                   	ret    
c0017e24:	42                   	inc    edx
c0017e25:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0017e28:	e8 a4 ff ff ff       	call   c0017dd1 <unlockStuff()>
c0017e2d:	b0 01                	mov    al,0x1
c0017e2f:	83 c4 0c             	add    esp,0xc
c0017e32:	c3                   	ret    
c0017e33:	90                   	nop

c0017e34 <Semaphore::assertLocked(char const*)>:
c0017e34:	83 ec 0c             	sub    esp,0xc
c0017e37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017e3b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017e3f:	e8 fb fb ff ff       	call   c0017a3f <lockStuff()>
c0017e44:	8b 08                	mov    ecx,DWORD PTR [eax]
c0017e46:	39 48 0c             	cmp    DWORD PTR [eax+0xc],ecx
c0017e49:	7c 05                	jl     c0017e50 <Semaphore::assertLocked(char const*)+0x1c>
c0017e4b:	83 c4 0c             	add    esp,0xc
c0017e4e:	eb 81                	jmp    c0017dd1 <unlockStuff()>
c0017e50:	83 ec 0c             	sub    esp,0xc
c0017e53:	52                   	push   edx
c0017e54:	e8 97 cb ff ff       	call   c00149f0 <Krnl::panic(char const*)>
c0017e59:	83 c4 10             	add    esp,0x10
c0017e5c:	83 c4 0c             	add    esp,0xc
c0017e5f:	e9 6d ff ff ff       	jmp    c0017dd1 <unlockStuff()>

c0017e64 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0017e64:	83 ec 0c             	sub    esp,0xc
c0017e67:	e8 97 fb ff ff       	call   c0017a03 <getIRQNestingLevel()>
c0017e6c:	83 ec 08             	sub    esp,0x8
c0017e6f:	50                   	push   eax
c0017e70:	68 10 1c 02 c0       	push   0xc0021c10
c0017e75:	e8 e1 6e ff ff       	call   c000ed5b <Dbg::kprintf(char const*, ...)>
c0017e7a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017e7e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017e83:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0017e86:	e8 c1 fe ff ff       	call   c0017d4c <schedule()>
c0017e8b:	e8 8a fb ff ff       	call   c0017a1a <unlockScheduler()>
c0017e90:	e8 6e fb ff ff       	call   c0017a03 <getIRQNestingLevel()>
c0017e95:	5a                   	pop    edx
c0017e96:	59                   	pop    ecx
c0017e97:	50                   	push   eax
c0017e98:	68 44 1c 02 c0       	push   0xc0021c44
c0017e9d:	e8 b9 6e ff ff       	call   c000ed5b <Dbg::kprintf(char const*, ...)>
c0017ea2:	83 c4 1c             	add    esp,0x1c
c0017ea5:	c3                   	ret    

c0017ea6 <blockTask(TaskState)>:
c0017ea6:	83 ec 0c             	sub    esp,0xc
c0017ea9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017ead:	e8 66 fb ff ff       	call   c0017a18 <lockScheduler()>
c0017eb2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017eb7:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0017eba:	e8 8d fe ff ff       	call   c0017d4c <schedule()>
c0017ebf:	83 c4 0c             	add    esp,0xc
c0017ec2:	e9 53 fb ff ff       	jmp    c0017a1a <unlockScheduler()>

c0017ec7 <waitTask(int, int*, int)>:
c0017ec7:	83 ec 18             	sub    esp,0x18
c0017eca:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017ecf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017ed3:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0017ed6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017eda:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017edf:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c0017ee2:	6a 07                	push   0x7
c0017ee4:	e8 bd ff ff ff       	call   c0017ea6 <blockTask(TaskState)>
c0017ee9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017eee:	83 c4 10             	add    esp,0x10
c0017ef1:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c0017ef4:	85 d2                	test   edx,edx
c0017ef6:	74 0a                	je     c0017f02 <waitTask(int, int*, int)+0x3b>
c0017ef8:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c0017efb:	89 02                	mov    DWORD PTR [edx],eax
c0017efd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017f02:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c0017f05:	83 c4 0c             	add    esp,0xc
c0017f08:	c3                   	ret    

c0017f09 <nanoSleepUntil(unsigned long long)>:
c0017f09:	83 ec 0c             	sub    esp,0xc
c0017f0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017f10:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017f14:	3b 05 70 3a 02 c0    	cmp    eax,DWORD PTR ds:0xc0023a70
c0017f1a:	89 d1                	mov    ecx,edx
c0017f1c:	1b 0d 74 3a 02 c0    	sbb    ecx,DWORD PTR ds:0xc0023a74
c0017f22:	73 04                	jae    c0017f28 <nanoSleepUntil(unsigned long long)+0x1f>
c0017f24:	83 c4 0c             	add    esp,0xc
c0017f27:	c3                   	ret    
c0017f28:	e8 12 fb ff ff       	call   c0017a3f <lockStuff()>
c0017f2d:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0017f33:	83 ec 08             	sub    esp,0x8
c0017f36:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c0017f39:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c0017f3c:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c0017f42:	68 3c 48 02 c0       	push   0xc002483c
c0017f47:	e8 16 6c 00 00       	call   c001eb62 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0017f4c:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0017f53:	e8 4e ff ff ff       	call   c0017ea6 <blockTask(TaskState)>
c0017f58:	83 c4 1c             	add    esp,0x1c
c0017f5b:	e9 71 fe ff ff       	jmp    c0017dd1 <unlockStuff()>

c0017f60 <nanoSleep(unsigned long long)>:
c0017f60:	a1 70 3a 02 c0       	mov    eax,ds:0xc0023a70
c0017f65:	8b 15 74 3a 02 c0    	mov    edx,DWORD PTR ds:0xc0023a74
c0017f6b:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c0017f6f:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c0017f73:	eb 94                	jmp    c0017f09 <nanoSleepUntil(unsigned long long)>

c0017f75 <sleep(unsigned long long)>:
c0017f75:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c0017f7d:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c0017f82:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c0017f86:	01 ca                	add    edx,ecx
c0017f88:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017f8c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0017f90:	eb ce                	jmp    c0017f60 <nanoSleep(unsigned long long)>

c0017f92 <Semaphore::acquire()>:
c0017f92:	83 ec 0c             	sub    esp,0xc
c0017f95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017f99:	e8 a1 fa ff ff       	call   c0017a3f <lockStuff()>
c0017f9e:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0017fa1:	3b 10                	cmp    edx,DWORD PTR [eax]
c0017fa3:	7d 0c                	jge    c0017fb1 <Semaphore::acquire()+0x1f>
c0017fa5:	42                   	inc    edx
c0017fa6:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0017fa9:	83 c4 0c             	add    esp,0xc
c0017fac:	e9 20 fe ff ff       	jmp    c0017dd1 <unlockStuff()>
c0017fb1:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0017fb7:	c7 42 20 00 00 00 00 	mov    DWORD PTR [edx+0x20],0x0
c0017fbe:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0017fc1:	85 d2                	test   edx,edx
c0017fc3:	74 2a                	je     c0017fef <Semaphore::acquire()+0x5d>
c0017fc5:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0017fc8:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0017fce:	89 4a 20             	mov    DWORD PTR [edx+0x20],ecx
c0017fd1:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0017fd7:	83 ec 0c             	sub    esp,0xc
c0017fda:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0017fdd:	6a 05                	push   0x5
c0017fdf:	e8 c2 fe ff ff       	call   c0017ea6 <blockTask(TaskState)>
c0017fe4:	83 c4 10             	add    esp,0x10
c0017fe7:	83 c4 0c             	add    esp,0xc
c0017fea:	e9 e2 fd ff ff       	jmp    c0017dd1 <unlockStuff()>
c0017fef:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0017ff5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0017ff8:	eb d7                	jmp    c0017fd1 <Semaphore::acquire()+0x3f>

c0017ffa <taskReturned>:
c0017ffa:	83 ec 18             	sub    esp,0x18
c0017ffd:	68 78 1c 02 c0       	push   0xc0021c78
c0018002:	e8 e9 c9 ff ff       	call   c00149f0 <Krnl::panic(char const*)>
c0018007:	83 c4 10             	add    esp,0x10
c001800a:	83 ec 0c             	sub    esp,0xc
c001800d:	6a 02                	push   0x2
c001800f:	e8 92 fe ff ff       	call   c0017ea6 <blockTask(TaskState)>
c0018014:	e8 ff f9 ff ff       	call   c0017a18 <lockScheduler()>
c0018019:	e8 2e fd ff ff       	call   c0017d4c <schedule()>
c001801e:	e8 f7 f9 ff ff       	call   c0017a1a <unlockScheduler()>
c0018023:	83 c4 10             	add    esp,0x10
c0018026:	eb e2                	jmp    c001800a <taskReturned+0x10>

c0018028 <unblockTask(ThreadControlBlock*)>:
c0018028:	53                   	push   ebx
c0018029:	83 ec 08             	sub    esp,0x8
c001802c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018030:	e8 e3 f9 ff ff       	call   c0017a18 <lockScheduler()>
c0018035:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0018038:	85 c0                	test   eax,eax
c001803a:	74 5c                	je     c0018098 <unblockTask(ThreadControlBlock*)+0x70>
c001803c:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001803f:	48                   	dec    eax
c0018040:	74 31                	je     c0018073 <unblockTask(ThreadControlBlock*)+0x4b>
c0018042:	83 ec 0c             	sub    esp,0xc
c0018045:	68 48 48 02 c0       	push   0xc0024848
c001804a:	e8 41 6a 00 00       	call   c001ea90 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001804f:	83 c4 10             	add    esp,0x10
c0018052:	85 c0                	test   eax,eax
c0018054:	75 17                	jne    c001806d <unblockTask(ThreadControlBlock*)+0x45>
c0018056:	eb 65                	jmp    c00180bd <unblockTask(ThreadControlBlock*)+0x95>
c0018058:	83 ec 08             	sub    esp,0x8
c001805b:	50                   	push   eax
c001805c:	68 48 48 02 c0       	push   0xc0024848
c0018061:	e8 3a 6d 00 00       	call   c001eda0 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0018066:	83 c4 10             	add    esp,0x10
c0018069:	85 c0                	test   eax,eax
c001806b:	74 50                	je     c00180bd <unblockTask(ThreadControlBlock*)+0x95>
c001806d:	39 c3                	cmp    ebx,eax
c001806f:	75 e7                	jne    c0018058 <unblockTask(ThreadControlBlock*)+0x30>
c0018071:	eb 1c                	jmp    c001808f <unblockTask(ThreadControlBlock*)+0x67>
c0018073:	83 ec 0c             	sub    esp,0xc
c0018076:	68 68 1d 02 c0       	push   0xc0021d68
c001807b:	e8 db 6c ff ff       	call   c000ed5b <Dbg::kprintf(char const*, ...)>
c0018080:	c7 04 24 f4 1c 02 c0 	mov    DWORD PTR [esp],0xc0021cf4
c0018087:	e8 cf 6c ff ff       	call   c000ed5b <Dbg::kprintf(char const*, ...)>
c001808c:	83 c4 10             	add    esp,0x10
c001808f:	83 c4 08             	add    esp,0x8
c0018092:	5b                   	pop    ebx
c0018093:	e9 82 f9 ff ff       	jmp    c0017a1a <unlockScheduler()>
c0018098:	83 ec 0c             	sub    esp,0xc
c001809b:	68 ac 1c 02 c0       	push   0xc0021cac
c00180a0:	e8 b6 6c ff ff       	call   c000ed5b <Dbg::kprintf(char const*, ...)>
c00180a5:	c7 04 24 f4 1c 02 c0 	mov    DWORD PTR [esp],0xc0021cf4
c00180ac:	e8 aa 6c ff ff       	call   c000ed5b <Dbg::kprintf(char const*, ...)>
c00180b1:	83 c4 10             	add    esp,0x10
c00180b4:	83 c4 08             	add    esp,0x8
c00180b7:	5b                   	pop    ebx
c00180b8:	e9 5d f9 ff ff       	jmp    c0017a1a <unlockScheduler()>
c00180bd:	83 ec 08             	sub    esp,0x8
c00180c0:	53                   	push   ebx
c00180c1:	68 48 48 02 c0       	push   0xc0024848
c00180c6:	e8 97 6a 00 00       	call   c001eb62 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00180cb:	83 c4 10             	add    esp,0x10
c00180ce:	83 c4 08             	add    esp,0x8
c00180d1:	5b                   	pop    ebx
c00180d2:	e9 43 f9 ff ff       	jmp    c0017a1a <unlockScheduler()>

c00180d7 <cleanupTerminatedTask(ThreadControlBlock*)>:
c00180d7:	55                   	push   ebp
c00180d8:	57                   	push   edi
c00180d9:	56                   	push   esi
c00180da:	53                   	push   ebx
c00180db:	83 ec 1c             	sub    esp,0x1c
c00180de:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00180e2:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00180e5:	8b 88 36 05 00 00    	mov    ecx,DWORD PTR [eax+0x536]
c00180eb:	85 c9                	test   ecx,ecx
c00180ed:	7e 20                	jle    c001810f <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c00180ef:	31 f6                	xor    esi,esi
c00180f1:	83 ec 0c             	sub    esp,0xc
c00180f4:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c00180fb:	46                   	inc    esi
c00180fc:	e8 2d 3b ff ff       	call   c000bc2e <free>
c0018101:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0018104:	83 c4 10             	add    esp,0x10
c0018107:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001810d:	7f e2                	jg     c00180f1 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001810f:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c0018119:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001811e:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c0018121:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0018124:	d3 c0                	rol    eax,cl
c0018126:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001812d:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0018130:	89 f7                	mov    edi,esi
c0018132:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001813a:	0f 85 4f 01 00 00    	jne    c001828f <cleanupTerminatedTask(ThreadControlBlock*)+0x1b8>
c0018140:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c0018146:	85 c0                	test   eax,eax
c0018148:	0f 84 aa 00 00 00    	je     c00181f8 <cleanupTerminatedTask(ThreadControlBlock*)+0x121>
c001814e:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c0018151:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0018155:	31 c9                	xor    ecx,ecx
c0018157:	eb 10                	jmp    c0018169 <cleanupTerminatedTask(ThreadControlBlock*)+0x92>
c0018159:	41                   	inc    ecx
c001815a:	83 f9 10             	cmp    ecx,0x10
c001815d:	0f 84 95 00 00 00    	je     c00181f8 <cleanupTerminatedTask(ThreadControlBlock*)+0x121>
c0018163:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c0018169:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c0018170:	d3 fa                	sar    edx,cl
c0018172:	83 e2 01             	and    edx,0x1
c0018175:	74 e2                	je     c0018159 <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c0018177:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001817a:	01 ca                	add    edx,ecx
c001817c:	89 d5                	mov    ebp,edx
c001817e:	c1 e5 05             	shl    ebp,0x5
c0018181:	01 ea                	add    edx,ebp
c0018183:	01 d0                	add    eax,edx
c0018185:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001818b:	83 fd 07             	cmp    ebp,0x7
c001818e:	75 c9                	jne    c0018159 <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c0018190:	05 40 02 00 00       	add    eax,0x240
c0018195:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c0018198:	83 fd ff             	cmp    ebp,0xffffffff
c001819b:	0f 8c 08 01 00 00    	jl     c00182a9 <cleanupTerminatedTask(ThreadControlBlock*)+0x1d2>
c00181a1:	0f 84 b9 01 00 00    	je     c0018360 <cleanupTerminatedTask(ThreadControlBlock*)+0x289>
c00181a7:	85 ed                	test   ebp,ebp
c00181a9:	0f 84 a0 01 00 00    	je     c001834f <cleanupTerminatedTask(ThreadControlBlock*)+0x278>
c00181af:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c00181b1:	75 a6                	jne    c0018159 <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c00181b3:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c00181b9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00181bd:	01 d0                	add    eax,edx
c00181bf:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00181c3:	83 ec 0c             	sub    esp,0xc
c00181c6:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c00181cc:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00181cf:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c00181d5:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c00181dc:	50                   	push   eax
c00181dd:	e8 46 fe ff ff       	call   c0018028 <unblockTask(ThreadControlBlock*)>
c00181e2:	83 c4 10             	add    esp,0x10
c00181e5:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c00181e8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00181ec:	89 f7                	mov    edi,esi
c00181ee:	41                   	inc    ecx
c00181ef:	83 f9 10             	cmp    ecx,0x10
c00181f2:	0f 85 6b ff ff ff    	jne    c0018163 <cleanupTerminatedTask(ThreadControlBlock*)+0x8c>
c00181f8:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c00181fe:	85 c0                	test   eax,eax
c0018200:	74 5d                	je     c001825f <cleanupTerminatedTask(ThreadControlBlock*)+0x188>
c0018202:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c0018208:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001820e:	74 4f                	je     c001825f <cleanupTerminatedTask(ThreadControlBlock*)+0x188>
c0018210:	83 ec 0c             	sub    esp,0xc
c0018213:	68 48 48 02 c0       	push   0xc0024848
c0018218:	e8 73 68 00 00       	call   c001ea90 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001821d:	c7 04 24 48 48 02 c0 	mov    DWORD PTR [esp],0xc0024848
c0018224:	89 c7                	mov    edi,eax
c0018226:	e8 6d 68 00 00       	call   c001ea98 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001822b:	83 c4 10             	add    esp,0x10
c001822e:	84 c0                	test   al,al
c0018230:	0f 84 e4 00 00 00    	je     c001831a <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c0018236:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0018239:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001823f:	85 d2                	test   edx,edx
c0018241:	74 0f                	je     c0018252 <cleanupTerminatedTask(ThreadControlBlock*)+0x17b>
c0018243:	83 ec 0c             	sub    esp,0xc
c0018246:	8b 02                	mov    eax,DWORD PTR [edx]
c0018248:	52                   	push   edx
c0018249:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001824c:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001824f:	83 c4 10             	add    esp,0x10
c0018252:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001825c:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001825f:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c0018265:	85 db                	test   ebx,ebx
c0018267:	74 16                	je     c001827f <cleanupTerminatedTask(ThreadControlBlock*)+0x1a8>
c0018269:	83 ec 0c             	sub    esp,0xc
c001826c:	53                   	push   ebx
c001826d:	e8 7e 60 ff ff       	call   c000e2f0 <VAS::~VAS()>
c0018272:	58                   	pop    eax
c0018273:	5a                   	pop    edx
c0018274:	6a 10                	push   0x10
c0018276:	53                   	push   ebx
c0018277:	e8 ff 69 ff ff       	call   c000ec7b <operator delete(void*, unsigned long)>
c001827c:	83 c4 10             	add    esp,0x10
c001827f:	83 ec 0c             	sub    esp,0xc
c0018282:	68 c2 1a 02 c0       	push   0xc0021ac2
c0018287:	e8 cf 6a ff ff       	call   c000ed5b <Dbg::kprintf(char const*, ...)>
c001828c:	83 c4 10             	add    esp,0x10
c001828f:	83 ec 08             	sub    esp,0x8
c0018292:	68 3b 07 00 00       	push   0x73b
c0018297:	68 d0 1a 02 c0       	push   0xc0021ad0
c001829c:	e8 ba 6a ff ff       	call   c000ed5b <Dbg::kprintf(char const*, ...)>
c00182a1:	83 c4 2c             	add    esp,0x2c
c00182a4:	5b                   	pop    ebx
c00182a5:	5e                   	pop    esi
c00182a6:	5f                   	pop    edi
c00182a7:	5d                   	pop    ebp
c00182a8:	c3                   	ret    
c00182a9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00182ad:	83 ec 0c             	sub    esp,0xc
c00182b0:	68 ac 1d 02 c0       	push   0xc0021dac
c00182b5:	e8 36 c7 ff ff       	call   c00149f0 <Krnl::panic(char const*)>
c00182ba:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c00182bd:	83 c4 10             	add    esp,0x10
c00182c0:	89 f7                	mov    edi,esi
c00182c2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00182c6:	e9 8e fe ff ff       	jmp    c0018159 <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c00182cb:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00182d1:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c00182d7:	75 1c                	jne    c00182f5 <cleanupTerminatedTask(ThreadControlBlock*)+0x21e>
c00182d9:	83 ec 0c             	sub    esp,0xc
c00182dc:	68 14 1e 02 c0       	push   0xc0021e14
c00182e1:	e8 75 6a ff ff       	call   c000ed5b <Dbg::kprintf(char const*, ...)>
c00182e6:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00182ed:	e8 b4 fb ff ff       	call   c0017ea6 <blockTask(TaskState)>
c00182f2:	83 c4 10             	add    esp,0x10
c00182f5:	83 ec 08             	sub    esp,0x8
c00182f8:	56                   	push   esi
c00182f9:	68 48 48 02 c0       	push   0xc0024848
c00182fe:	e8 5f 68 00 00       	call   c001eb62 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018303:	c7 04 24 48 48 02 c0 	mov    DWORD PTR [esp],0xc0024848
c001830a:	e8 81 67 00 00       	call   c001ea90 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001830f:	83 c4 10             	add    esp,0x10
c0018312:	39 f8                	cmp    eax,edi
c0018314:	0f 84 1c ff ff ff    	je     c0018236 <cleanupTerminatedTask(ThreadControlBlock*)+0x15f>
c001831a:	83 ec 0c             	sub    esp,0xc
c001831d:	68 48 48 02 c0       	push   0xc0024848
c0018322:	e8 69 67 00 00       	call   c001ea90 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018327:	c7 04 24 48 48 02 c0 	mov    DWORD PTR [esp],0xc0024848
c001832e:	89 c6                	mov    esi,eax
c0018330:	e8 7f 67 00 00       	call   c001eab4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0018335:	83 c4 10             	add    esp,0x10
c0018338:	39 f3                	cmp    ebx,esi
c001833a:	74 b9                	je     c00182f5 <cleanupTerminatedTask(ThreadControlBlock*)+0x21e>
c001833c:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001833f:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0018342:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c0018348:	75 ab                	jne    c00182f5 <cleanupTerminatedTask(ThreadControlBlock*)+0x21e>
c001834a:	e9 7c ff ff ff       	jmp    c00182cb <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c001834f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0018353:	83 ec 0c             	sub    esp,0xc
c0018356:	68 e0 1d 02 c0       	push   0xc0021de0
c001835b:	e9 55 ff ff ff       	jmp    c00182b5 <cleanupTerminatedTask(ThreadControlBlock*)+0x1de>
c0018360:	8b 36                	mov    esi,DWORD PTR [esi]
c0018362:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0018366:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c0018369:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001836c:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c0018372:	01 d7                	add    edi,edx
c0018374:	89 f8                	mov    eax,edi
c0018376:	e9 44 fe ff ff       	jmp    c00181bf <cleanupTerminatedTask(ThreadControlBlock*)+0xe8>

c001837b <cleanerTaskFunction(void*)>:
c001837b:	53                   	push   ebx
c001837c:	83 ec 08             	sub    esp,0x8
c001837f:	e8 96 f6 ff ff       	call   c0017a1a <unlockScheduler()>
c0018384:	e8 8f f6 ff ff       	call   c0017a18 <lockScheduler()>
c0018389:	80 3d 0c 48 02 c0 00 	cmp    BYTE PTR ds:0xc002480c,0x0
c0018390:	0f 85 8e 00 00 00    	jne    c0018424 <cleanerTaskFunction(void*)+0xa9>
c0018396:	83 ec 0c             	sub    esp,0xc
c0018399:	6a 02                	push   0x2
c001839b:	e8 c4 fa ff ff       	call   c0017e64 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00183a0:	83 c4 10             	add    esp,0x10
c00183a3:	c6 05 0c 48 02 c0 00 	mov    BYTE PTR ds:0xc002480c,0x0
c00183aa:	e8 90 f6 ff ff       	call   c0017a3f <lockStuff()>
c00183af:	e8 64 f6 ff ff       	call   c0017a18 <lockScheduler()>
c00183b4:	83 ec 0c             	sub    esp,0xc
c00183b7:	68 30 48 02 c0       	push   0xc0024830
c00183bc:	e8 d7 66 00 00       	call   c001ea98 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00183c1:	83 c4 10             	add    esp,0x10
c00183c4:	84 c0                	test   al,al
c00183c6:	75 40                	jne    c0018408 <cleanerTaskFunction(void*)+0x8d>
c00183c8:	83 ec 0c             	sub    esp,0xc
c00183cb:	68 30 48 02 c0       	push   0xc0024830
c00183d0:	e8 bb 66 00 00       	call   c001ea90 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00183d5:	c7 04 24 30 48 02 c0 	mov    DWORD PTR [esp],0xc0024830
c00183dc:	89 c3                	mov    ebx,eax
c00183de:	e8 d1 66 00 00       	call   c001eab4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00183e3:	c7 04 24 e6 1a 02 c0 	mov    DWORD PTR [esp],0xc0021ae6
c00183ea:	e8 6c 69 ff ff       	call   c000ed5b <Dbg::kprintf(char const*, ...)>
c00183ef:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00183f2:	e8 e0 fc ff ff       	call   c00180d7 <cleanupTerminatedTask(ThreadControlBlock*)>
c00183f7:	c7 04 24 ff 1a 02 c0 	mov    DWORD PTR [esp],0xc0021aff
c00183fe:	e8 58 69 ff ff       	call   c000ed5b <Dbg::kprintf(char const*, ...)>
c0018403:	83 c4 10             	add    esp,0x10
c0018406:	eb ac                	jmp    c00183b4 <cleanerTaskFunction(void*)+0x39>
c0018408:	e8 0d f6 ff ff       	call   c0017a1a <unlockScheduler()>
c001840d:	e8 bf f9 ff ff       	call   c0017dd1 <unlockStuff()>
c0018412:	e8 01 f6 ff ff       	call   c0017a18 <lockScheduler()>
c0018417:	80 3d 0c 48 02 c0 00 	cmp    BYTE PTR ds:0xc002480c,0x0
c001841e:	0f 84 72 ff ff ff    	je     c0018396 <cleanerTaskFunction(void*)+0x1b>
c0018424:	e8 f1 f5 ff ff       	call   c0017a1a <unlockScheduler()>
c0018429:	e9 75 ff ff ff       	jmp    c00183a3 <cleanerTaskFunction(void*)+0x28>

c001842e <terminateTask(int)>:
c001842e:	83 ec 14             	sub    esp,0x14
c0018431:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018436:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0018439:	83 c0 0c             	add    eax,0xc
c001843c:	50                   	push   eax
c001843d:	68 3c 1e 02 c0       	push   0xc0021e3c
c0018442:	e8 14 69 ff ff       	call   c000ed5b <Dbg::kprintf(char const*, ...)>
c0018447:	e8 f3 f5 ff ff       	call   c0017a3f <lockStuff()>
c001844c:	e8 c7 f5 ff ff       	call   c0017a18 <lockScheduler()>
c0018451:	c7 04 24 12 1b 02 c0 	mov    DWORD PTR [esp],0xc0021b12
c0018458:	e8 fe 68 ff ff       	call   c000ed5b <Dbg::kprintf(char const*, ...)>
c001845d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018461:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018466:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c0018469:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001846e:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0018471:	5a                   	pop    edx
c0018472:	59                   	pop    ecx
c0018473:	50                   	push   eax
c0018474:	68 30 48 02 c0       	push   0xc0024830
c0018479:	e8 e4 66 00 00       	call   c001eb62 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001847e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018483:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001848a:	c7 04 24 2c 1b 02 c0 	mov    DWORD PTR [esp],0xc0021b2c
c0018491:	e8 c5 68 ff ff       	call   c000ed5b <Dbg::kprintf(char const*, ...)>
c0018496:	83 c4 10             	add    esp,0x10
c0018499:	a1 08 48 02 c0       	mov    eax,ds:0xc0024808
c001849e:	85 c0                	test   eax,eax
c00184a0:	74 5a                	je     c00184fc <terminateTask(int)+0xce>
c00184a2:	83 ec 0c             	sub    esp,0xc
c00184a5:	68 46 1b 02 c0       	push   0xc0021b46
c00184aa:	e8 ac 68 ff ff       	call   c000ed5b <Dbg::kprintf(char const*, ...)>
c00184af:	58                   	pop    eax
c00184b0:	c6 05 0c 48 02 c0 01 	mov    BYTE PTR ds:0xc002480c,0x1
c00184b7:	ff 35 08 48 02 c0    	push   DWORD PTR ds:0xc0024808
c00184bd:	e8 66 fb ff ff       	call   c0018028 <unblockTask(ThreadControlBlock*)>
c00184c2:	c7 04 24 60 1b 02 c0 	mov    DWORD PTR [esp],0xc0021b60
c00184c9:	e8 8d 68 ff ff       	call   c000ed5b <Dbg::kprintf(char const*, ...)>
c00184ce:	83 c4 10             	add    esp,0x10
c00184d1:	e8 44 f5 ff ff       	call   c0017a1a <unlockScheduler()>
c00184d6:	e8 f6 f8 ff ff       	call   c0017dd1 <unlockStuff()>
c00184db:	83 ec 0c             	sub    esp,0xc
c00184de:	68 98 1b 02 c0       	push   0xc0021b98
c00184e3:	e8 73 68 ff ff       	call   c000ed5b <Dbg::kprintf(char const*, ...)>
c00184e8:	83 c4 10             	add    esp,0x10
c00184eb:	e8 28 f5 ff ff       	call   c0017a18 <lockScheduler()>
c00184f0:	e8 57 f8 ff ff       	call   c0017d4c <schedule()>
c00184f5:	e8 20 f5 ff ff       	call   c0017a1a <unlockScheduler()>
c00184fa:	eb ef                	jmp    c00184eb <terminateTask(int)+0xbd>
c00184fc:	83 ec 0c             	sub    esp,0xc
c00184ff:	68 7a 1b 02 c0       	push   0xc0021b7a
c0018504:	e8 52 68 ff ff       	call   c000ed5b <Dbg::kprintf(char const*, ...)>
c0018509:	83 c4 10             	add    esp,0x10
c001850c:	eb c3                	jmp    c00184d1 <terminateTask(int)+0xa3>

c001850e <Thr::terminateFromIRQ(int)>:
c001850e:	83 ec 18             	sub    esp,0x18
c0018511:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018515:	e8 14 ff ff ff       	call   c001842e <terminateTask(int)>

c001851a <Semaphore::release()>:
c001851a:	83 ec 0c             	sub    esp,0xc
c001851d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018521:	e8 19 f5 ff ff       	call   c0017a3f <lockStuff()>
c0018526:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0018529:	85 d2                	test   edx,edx
c001852b:	74 1a                	je     c0018547 <Semaphore::release()+0x2d>
c001852d:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c0018530:	83 ec 0c             	sub    esp,0xc
c0018533:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0018536:	52                   	push   edx
c0018537:	e8 ec fa ff ff       	call   c0018028 <unblockTask(ThreadControlBlock*)>
c001853c:	83 c4 10             	add    esp,0x10
c001853f:	83 c4 0c             	add    esp,0xc
c0018542:	e9 8a f8 ff ff       	jmp    c0017dd1 <unlockStuff()>
c0018547:	ff 48 0c             	dec    DWORD PTR [eax+0xc]
c001854a:	83 c4 0c             	add    esp,0xc
c001854d:	e9 7f f8 ff ff       	jmp    c0017dd1 <unlockStuff()>

c0018552 <__static_initialization_and_destruction_0(int, int)>:
c0018552:	83 ec 0c             	sub    esp,0xc
c0018555:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001855a:	0f 85 88 00 00 00    	jne    c00185e8 <__static_initialization_and_destruction_0(int, int)+0x96>
c0018560:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0018568:	75 7e                	jne    c00185e8 <__static_initialization_and_destruction_0(int, int)+0x96>
c001856a:	83 ec 0c             	sub    esp,0xc
c001856d:	68 48 48 02 c0       	push   0xc0024848
c0018572:	e8 d1 67 00 00       	call   c001ed48 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0018577:	83 c4 10             	add    esp,0x10
c001857a:	83 ec 04             	sub    esp,0x4
c001857d:	68 20 28 02 c0       	push   0xc0022820
c0018582:	68 48 48 02 c0       	push   0xc0024848
c0018587:	68 08 ed 01 c0       	push   0xc001ed08
c001858c:	e8 66 66 ff ff       	call   c000ebf7 <__cxa_atexit>
c0018591:	83 c4 10             	add    esp,0x10
c0018594:	83 ec 0c             	sub    esp,0xc
c0018597:	68 3c 48 02 c0       	push   0xc002483c
c001859c:	e8 a7 67 00 00       	call   c001ed48 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00185a1:	83 c4 10             	add    esp,0x10
c00185a4:	83 ec 04             	sub    esp,0x4
c00185a7:	68 20 28 02 c0       	push   0xc0022820
c00185ac:	68 3c 48 02 c0       	push   0xc002483c
c00185b1:	68 08 ed 01 c0       	push   0xc001ed08
c00185b6:	e8 3c 66 ff ff       	call   c000ebf7 <__cxa_atexit>
c00185bb:	83 c4 10             	add    esp,0x10
c00185be:	83 ec 0c             	sub    esp,0xc
c00185c1:	68 30 48 02 c0       	push   0xc0024830
c00185c6:	e8 7d 67 00 00       	call   c001ed48 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00185cb:	83 c4 10             	add    esp,0x10
c00185ce:	83 ec 04             	sub    esp,0x4
c00185d1:	68 20 28 02 c0       	push   0xc0022820
c00185d6:	68 30 48 02 c0       	push   0xc0024830
c00185db:	68 08 ed 01 c0       	push   0xc001ed08
c00185e0:	e8 12 66 ff ff       	call   c000ebf7 <__cxa_atexit>
c00185e5:	83 c4 10             	add    esp,0x10
c00185e8:	90                   	nop
c00185e9:	83 c4 0c             	add    esp,0xc
c00185ec:	c3                   	ret    

c00185ed <_GLOBAL__sub_I_kernelProcess>:
c00185ed:	83 ec 0c             	sub    esp,0xc
c00185f0:	83 ec 08             	sub    esp,0x8
c00185f3:	68 ff ff 00 00       	push   0xffff
c00185f8:	6a 01                	push   0x1
c00185fa:	e8 53 ff ff ff       	call   c0018552 <__static_initialization_and_destruction_0(int, int)>
c00185ff:	83 c4 10             	add    esp,0x10
c0018602:	83 c4 0c             	add    esp,0xc
c0018605:	c3                   	ret    

c0018606 <Vm::vm8086EntryPoint(void*)>:
c0018606:	83 ec 0c             	sub    esp,0xc
c0018609:	e8 0c f4 ff ff       	call   c0017a1a <unlockScheduler()>
c001860e:	fb                   	sti    
c001860f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018614:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c0018618:	52                   	push   edx
c0018619:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001861d:	52                   	push   edx
c001861e:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0018622:	52                   	push   edx
c0018623:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c0018627:	50                   	push   eax
c0018628:	e8 88 7b fe ff       	call   c00001b5 <goToVM86>
c001862d:	83 c4 1c             	add    esp,0x1c
c0018630:	c3                   	ret    

c0018631 <Vm::inbv(unsigned short)>:
c0018631:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0018635:	ec                   	in     al,dx
c0018636:	c3                   	ret    

c0018637 <Vm::outbv(unsigned short, unsigned char)>:
c0018637:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001863b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001863f:	ee                   	out    dx,al
c0018640:	c3                   	ret    

c0018641 <Vm::realToLinear(unsigned short, unsigned short)>:
c0018641:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018646:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001864b:	c1 e0 04             	shl    eax,0x4
c001864e:	01 d0                	add    eax,edx
c0018650:	c3                   	ret    

c0018651 <Vm::getSegment(unsigned int)>:
c0018651:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018655:	c1 e8 10             	shr    eax,0x10
c0018658:	c3                   	ret    

c0018659 <Vm::getOffset(unsigned int)>:
c0018659:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001865d:	c3                   	ret    

c001865e <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001865e:	55                   	push   ebp
c001865f:	57                   	push   edi
c0018660:	56                   	push   esi
c0018661:	53                   	push   ebx
c0018662:	83 ec 2c             	sub    esp,0x2c
c0018665:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c0018669:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001866d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0018671:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0018675:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0018679:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001867d:	e8 96 f3 ff ff       	call   c0017a18 <lockScheduler()>
c0018682:	68 80 00 00 00       	push   0x80
c0018687:	6a 00                	push   0x0
c0018689:	68 06 86 01 c0       	push   0xc0018606
c001868e:	55                   	push   ebp
c001868f:	e8 ae f4 ff ff       	call   c0017b42 <Process::createThread(void (*)(void*), void*, int)>
c0018694:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018698:	66 89 58 5f          	mov    WORD PTR [eax+0x5f],bx
c001869c:	66 89 50 5d          	mov    WORD PTR [eax+0x5d],dx
c00186a0:	66 89 78 59          	mov    WORD PTR [eax+0x59],di
c00186a4:	66 89 70 5b          	mov    WORD PTR [eax+0x5b],si
c00186a8:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c00186ac:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00186b3:	e8 b4 65 ff ff       	call   c000ec6c <operator new(unsigned long)>
c00186b8:	83 c4 0c             	add    esp,0xc
c00186bb:	89 c3                	mov    ebx,eax
c00186bd:	55                   	push   ebp
c00186be:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00186c2:	50                   	push   eax
c00186c3:	e8 c2 6b ff ff       	call   c000f28a <File::File(char const*, Process*)>
c00186c8:	83 c4 0c             	add    esp,0xc
c00186cb:	8d 44 24 17          	lea    eax,[esp+0x17]
c00186cf:	50                   	push   eax
c00186d0:	8d 44 24 20          	lea    eax,[esp+0x20]
c00186d4:	50                   	push   eax
c00186d5:	53                   	push   ebx
c00186d6:	e8 bf 6e ff ff       	call   c000f59a <File::stat(unsigned long long*, bool*)>
c00186db:	8a 54 24 23          	mov    dl,BYTE PTR [esp+0x23]
c00186df:	83 c4 10             	add    esp,0x10
c00186e2:	84 d2                	test   dl,dl
c00186e4:	74 1c                	je     c0018702 <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xa4>
c00186e6:	83 ec 0c             	sub    esp,0xc
c00186e9:	68 5b 1e 02 c0       	push   0xc0021e5b
c00186ee:	e8 fd c2 ff ff       	call   c00149f0 <Krnl::panic(char const*)>
c00186f3:	e8 22 f3 ff ff       	call   c0017a1a <unlockScheduler()>
c00186f8:	83 c4 10             	add    esp,0x10
c00186fb:	31 d2                	xor    edx,edx
c00186fd:	e9 81 00 00 00       	jmp    c0018783 <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x125>
c0018702:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0018706:	51                   	push   ecx
c0018707:	51                   	push   ecx
c0018708:	6a 01                	push   0x1
c001870a:	53                   	push   ebx
c001870b:	e8 de 6b ff ff       	call   c000f2ee <File::open(FileOpenMode)>
c0018710:	83 c4 10             	add    esp,0x10
c0018713:	85 c0                	test   eax,eax
c0018715:	74 1b                	je     c0018732 <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd4>
c0018717:	83 ec 0c             	sub    esp,0xc
c001871a:	68 74 1e 02 c0       	push   0xc0021e74
c001871f:	e8 cc c2 ff ff       	call   c00149f0 <Krnl::panic(char const*)>
c0018724:	e8 f1 f2 ff ff       	call   c0017a1a <unlockScheduler()>
c0018729:	83 c4 10             	add    esp,0x10
c001872c:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0018730:	eb 51                	jmp    c0018783 <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x125>
c0018732:	83 ec 0c             	sub    esp,0xc
c0018735:	0f b7 ff             	movzx  edi,di
c0018738:	6a 07                	push   0x7
c001873a:	0f b7 f6             	movzx  esi,si
c001873d:	68 00 01 00 00       	push   0x100
c0018742:	6a 00                	push   0x0
c0018744:	6a 00                	push   0x0
c0018746:	ff b5 32 05 00 00    	push   DWORD PTR [ebp+0x532]
c001874c:	e8 f7 5f ff ff       	call   c000e748 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0018751:	83 c4 18             	add    esp,0x18
c0018754:	57                   	push   edi
c0018755:	56                   	push   esi
c0018756:	e8 e6 fe ff ff       	call   c0018641 <Vm::realToLinear(unsigned short, unsigned short)>
c001875b:	5a                   	pop    edx
c001875c:	8b 13                	mov    edx,DWORD PTR [ebx]
c001875e:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0018762:	51                   	push   ecx
c0018763:	50                   	push   eax
c0018764:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018768:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001876c:	53                   	push   ebx
c001876d:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0018770:	83 c4 14             	add    esp,0x14
c0018773:	53                   	push   ebx
c0018774:	e8 d3 6b ff ff       	call   c000f34c <File::close()>
c0018779:	e8 9c f2 ff ff       	call   c0017a1a <unlockScheduler()>
c001877e:	83 c4 10             	add    esp,0x10
c0018781:	b2 01                	mov    dl,0x1
c0018783:	83 c4 2c             	add    esp,0x2c
c0018786:	88 d0                	mov    al,dl
c0018788:	5b                   	pop    ebx
c0018789:	5e                   	pop    esi
c001878a:	5f                   	pop    edi
c001878b:	5d                   	pop    ebp
c001878c:	c3                   	ret    

c001878d <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001878d:	57                   	push   edi
c001878e:	56                   	push   esi
c001878f:	53                   	push   ebx
c0018790:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018794:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018798:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001879c:	83 e8 06             	sub    eax,0x6
c001879f:	0f b7 c0             	movzx  eax,ax
c00187a2:	50                   	push   eax
c00187a3:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c00187a8:	50                   	push   eax
c00187a9:	e8 93 fe ff ff       	call   c0018641 <Vm::realToLinear(unsigned short, unsigned short)>
c00187ae:	5a                   	pop    edx
c00187af:	5e                   	pop    esi
c00187b0:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c00187b3:	8d 56 fa             	lea    edx,[esi-0x6]
c00187b6:	81 e2 ff ff 00 00    	and    edx,0xffff
c00187bc:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c00187bf:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c00187c2:	83 c2 02             	add    edx,0x2
c00187c5:	66 89 10             	mov    WORD PTR [eax],dx
c00187c8:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c00187cb:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c00187cf:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c00187d2:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c00187d6:	89 d6                	mov    esi,edx
c00187d8:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c00187de:	66 81 e6 ff fd       	and    si,0xfdff
c00187e3:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c00187e7:	74 07                	je     c00187f0 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c00187e9:	89 d6                	mov    esi,edx
c00187eb:	66 81 ce 00 02       	or     si,0x200
c00187f0:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c00187f4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00187f9:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c00187fd:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c0018805:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c0018808:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c0018810:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c0018813:	5b                   	pop    ebx
c0018814:	5e                   	pop    esi
c0018815:	5f                   	pop    edi
c0018816:	c3                   	ret    

c0018817 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0018817:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001881c:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018821:	c1 e0 04             	shl    eax,0x4
c0018824:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0018827:	c3                   	ret    

c0018828 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0018828:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001882d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018832:	c1 e0 04             	shl    eax,0x4
c0018835:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0018839:	c3                   	ret    

c001883a <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001883a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001883f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018844:	c1 e0 04             	shl    eax,0x4
c0018847:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001884a:	c3                   	ret    

c001884b <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001884b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018850:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018855:	c1 e0 04             	shl    eax,0x4
c0018858:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001885c:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001885f:	c3                   	ret    

c0018860 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0018860:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018865:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001886a:	c1 e0 04             	shl    eax,0x4
c001886d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018871:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0018875:	c3                   	ret    

c0018876 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0018876:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001887b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018880:	c1 e0 04             	shl    eax,0x4
c0018883:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018887:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001888a:	c3                   	ret    

c001888b <Vm::faultHandler(regs*)>:
c001888b:	55                   	push   ebp
c001888c:	57                   	push   edi
c001888d:	56                   	push   esi
c001888e:	53                   	push   ebx
c001888f:	83 ec 1c             	sub    esp,0x1c
c0018892:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0018896:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018899:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c001889d:	0f b7 f0             	movzx  esi,ax
c00188a0:	52                   	push   edx
c00188a1:	0f b7 c0             	movzx  eax,ax
c00188a4:	50                   	push   eax
c00188a5:	e8 97 fd ff ff       	call   c0018641 <Vm::realToLinear(unsigned short, unsigned short)>
c00188aa:	5a                   	pop    edx
c00188ab:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c00188ae:	59                   	pop    ecx
c00188af:	89 c7                	mov    edi,eax
c00188b1:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00188b4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00188b8:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00188bd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00188c1:	0f b7 c5             	movzx  eax,bp
c00188c4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00188c8:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00188cc:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00188d0:	e8 6c fd ff ff       	call   c0018641 <Vm::realToLinear(unsigned short, unsigned short)>
c00188d5:	5a                   	pop    edx
c00188d6:	59                   	pop    ecx
c00188d7:	b1 06                	mov    cl,0x6
c00188d9:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c00188de:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c00188e3:	0f b6 17             	movzx  edx,BYTE PTR [edi]
c00188e6:	80 fa 9d             	cmp    dl,0x9d
c00188e9:	0f 84 1d 02 00 00    	je     c0018b0c <Vm::faultHandler(regs*)+0x281>
c00188ef:	0f 87 8e 00 00 00    	ja     c0018983 <Vm::faultHandler(regs*)+0xf8>
c00188f5:	80 fa 66             	cmp    dl,0x66
c00188f8:	0f 84 89 01 00 00    	je     c0018a87 <Vm::faultHandler(regs*)+0x1fc>
c00188fe:	77 44                	ja     c0018944 <Vm::faultHandler(regs*)+0xb9>
c0018900:	80 fa 36             	cmp    dl,0x36
c0018903:	0f 84 74 01 00 00    	je     c0018a7d <Vm::faultHandler(regs*)+0x1f2>
c0018909:	77 1a                	ja     c0018925 <Vm::faultHandler(regs*)+0x9a>
c001890b:	80 fa 26             	cmp    dl,0x26
c001890e:	0f 84 4b 01 00 00    	je     c0018a5f <Vm::faultHandler(regs*)+0x1d4>
c0018914:	80 fa 2e             	cmp    dl,0x2e
c0018917:	0f 85 4a 05 00 00    	jne    c0018e67 <Vm::faultHandler(regs*)+0x5dc>
c001891d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018920:	31 c9                	xor    ecx,ecx
c0018922:	47                   	inc    edi
c0018923:	eb be                	jmp    c00188e3 <Vm::faultHandler(regs*)+0x58>
c0018925:	80 fa 64             	cmp    dl,0x64
c0018928:	0f 84 3b 01 00 00    	je     c0018a69 <Vm::faultHandler(regs*)+0x1de>
c001892e:	0f 87 3f 01 00 00    	ja     c0018a73 <Vm::faultHandler(regs*)+0x1e8>
c0018934:	80 fa 3e             	cmp    dl,0x3e
c0018937:	0f 85 2a 05 00 00    	jne    c0018e67 <Vm::faultHandler(regs*)+0x5dc>
c001893d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018940:	b1 01                	mov    cl,0x1
c0018942:	eb de                	jmp    c0018922 <Vm::faultHandler(regs*)+0x97>
c0018944:	80 fa 6d             	cmp    dl,0x6d
c0018947:	0f 84 bf 02 00 00    	je     c0018c0c <Vm::faultHandler(regs*)+0x381>
c001894d:	77 17                	ja     c0018966 <Vm::faultHandler(regs*)+0xdb>
c001894f:	80 fa 67             	cmp    dl,0x67
c0018952:	0f 84 3c 01 00 00    	je     c0018a94 <Vm::faultHandler(regs*)+0x209>
c0018958:	80 fa 6c             	cmp    dl,0x6c
c001895b:	0f 84 5d 02 00 00    	je     c0018bbe <Vm::faultHandler(regs*)+0x333>
c0018961:	e9 01 05 00 00       	jmp    c0018e67 <Vm::faultHandler(regs*)+0x5dc>
c0018966:	80 fa 6f             	cmp    dl,0x6f
c0018969:	0f 84 8b 03 00 00    	je     c0018cfa <Vm::faultHandler(regs*)+0x46f>
c001896f:	0f 82 0f 03 00 00    	jb     c0018c84 <Vm::faultHandler(regs*)+0x3f9>
c0018975:	80 fa 9c             	cmp    dl,0x9c
c0018978:	0f 84 23 01 00 00    	je     c0018aa1 <Vm::faultHandler(regs*)+0x216>
c001897e:	e9 e4 04 00 00       	jmp    c0018e67 <Vm::faultHandler(regs*)+0x5dc>
c0018983:	80 fa ec             	cmp    dl,0xec
c0018986:	0f 84 7f 04 00 00    	je     c0018e0b <Vm::faultHandler(regs*)+0x580>
c001898c:	77 7b                	ja     c0018a09 <Vm::faultHandler(regs*)+0x17e>
c001898e:	80 fa e4             	cmp    dl,0xe4
c0018991:	0f 84 fe 03 00 00    	je     c0018d95 <Vm::faultHandler(regs*)+0x50a>
c0018997:	77 53                	ja     c00189ec <Vm::faultHandler(regs*)+0x161>
c0018999:	80 fa cd             	cmp    dl,0xcd
c001899c:	0f 84 cd 01 00 00    	je     c0018b6f <Vm::faultHandler(regs*)+0x2e4>
c00189a2:	80 fa cf             	cmp    dl,0xcf
c00189a5:	0f 85 bc 04 00 00    	jne    c0018e67 <Vm::faultHandler(regs*)+0x5dc>
c00189ab:	0f b7 10             	movzx  edx,WORD PTR [eax]
c00189ae:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c00189b1:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c00189b5:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c00189b8:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c00189bc:	81 ca 00 02 02 00    	or     edx,0x20200
c00189c2:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00189c5:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c00189c9:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00189cf:	66 c1 e8 09          	shr    ax,0x9
c00189d3:	83 e0 01             	and    eax,0x1
c00189d6:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c00189d9:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00189dc:	83 c0 06             	add    eax,0x6
c00189df:	25 ff ff 00 00       	and    eax,0xffff
c00189e4:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00189e7:	e9 77 04 00 00       	jmp    c0018e63 <Vm::faultHandler(regs*)+0x5d8>
c00189ec:	80 fa e6             	cmp    dl,0xe6
c00189ef:	0f 84 ea 03 00 00    	je     c0018ddf <Vm::faultHandler(regs*)+0x554>
c00189f5:	0f 82 b6 03 00 00    	jb     c0018db1 <Vm::faultHandler(regs*)+0x526>
c00189fb:	80 fa e7             	cmp    dl,0xe7
c00189fe:	0f 84 f2 03 00 00    	je     c0018df6 <Vm::faultHandler(regs*)+0x56b>
c0018a04:	e9 5e 04 00 00       	jmp    c0018e67 <Vm::faultHandler(regs*)+0x5dc>
c0018a09:	80 fa ef             	cmp    dl,0xef
c0018a0c:	0f 84 3c 04 00 00    	je     c0018e4e <Vm::faultHandler(regs*)+0x5c3>
c0018a12:	77 28                	ja     c0018a3c <Vm::faultHandler(regs*)+0x1b1>
c0018a14:	80 fa ed             	cmp    dl,0xed
c0018a17:	0f 84 0a 04 00 00    	je     c0018e27 <Vm::faultHandler(regs*)+0x59c>
c0018a1d:	80 fa ee             	cmp    dl,0xee
c0018a20:	0f 85 41 04 00 00    	jne    c0018e67 <Vm::faultHandler(regs*)+0x5dc>
c0018a26:	50                   	push   eax
c0018a27:	50                   	push   eax
c0018a28:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0018a2c:	50                   	push   eax
c0018a2d:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0018a31:	50                   	push   eax
c0018a32:	e8 00 fc ff ff       	call   c0018637 <Vm::outbv(unsigned short, unsigned char)>
c0018a37:	e9 0a 04 00 00       	jmp    c0018e46 <Vm::faultHandler(regs*)+0x5bb>
c0018a3c:	80 fa fa             	cmp    dl,0xfa
c0018a3f:	0f 84 5d 01 00 00    	je     c0018ba2 <Vm::faultHandler(regs*)+0x317>
c0018a45:	80 fa fb             	cmp    dl,0xfb
c0018a48:	0f 84 62 01 00 00    	je     c0018bb0 <Vm::faultHandler(regs*)+0x325>
c0018a4e:	80 fa f3             	cmp    dl,0xf3
c0018a51:	0f 85 10 04 00 00    	jne    c0018e67 <Vm::faultHandler(regs*)+0x5dc>
c0018a57:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018a5a:	e9 c3 fe ff ff       	jmp    c0018922 <Vm::faultHandler(regs*)+0x97>
c0018a5f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018a62:	b1 02                	mov    cl,0x2
c0018a64:	e9 b9 fe ff ff       	jmp    c0018922 <Vm::faultHandler(regs*)+0x97>
c0018a69:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018a6c:	b1 03                	mov    cl,0x3
c0018a6e:	e9 af fe ff ff       	jmp    c0018922 <Vm::faultHandler(regs*)+0x97>
c0018a73:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018a76:	b1 04                	mov    cl,0x4
c0018a78:	e9 a5 fe ff ff       	jmp    c0018922 <Vm::faultHandler(regs*)+0x97>
c0018a7d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018a80:	b1 05                	mov    cl,0x5
c0018a82:	e9 9b fe ff ff       	jmp    c0018922 <Vm::faultHandler(regs*)+0x97>
c0018a87:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018a8a:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c0018a8f:	e9 8e fe ff ff       	jmp    c0018922 <Vm::faultHandler(regs*)+0x97>
c0018a94:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018a97:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c0018a9c:	e9 81 fe ff ff       	jmp    c0018922 <Vm::faultHandler(regs*)+0x97>
c0018aa1:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0018aa4:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018aa8:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0018aad:	74 30                	je     c0018adf <Vm::faultHandler(regs*)+0x254>
c0018aaf:	83 e9 04             	sub    ecx,0x4
c0018ab2:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0018ab8:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0018abe:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0018ac1:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0018ac4:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0018aca:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c0018ace:	0f 84 8c 03 00 00    	je     c0018e60 <Vm::faultHandler(regs*)+0x5d5>
c0018ad4:	80 ce 02             	or     dh,0x2
c0018ad7:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0018ada:	e9 81 03 00 00       	jmp    c0018e60 <Vm::faultHandler(regs*)+0x5d5>
c0018adf:	83 e9 02             	sub    ecx,0x2
c0018ae2:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0018ae8:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0018aeb:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0018aef:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0018af5:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c0018af9:	74 05                	je     c0018b00 <Vm::faultHandler(regs*)+0x275>
c0018afb:	80 ce 02             	or     dh,0x2
c0018afe:	eb 03                	jmp    c0018b03 <Vm::faultHandler(regs*)+0x278>
c0018b00:	80 e6 fd             	and    dh,0xfd
c0018b03:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0018b07:	e9 54 03 00 00       	jmp    c0018e60 <Vm::faultHandler(regs*)+0x5d5>
c0018b0c:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0018b11:	74 2a                	je     c0018b3d <Vm::faultHandler(regs*)+0x2b2>
c0018b13:	8b 10                	mov    edx,DWORD PTR [eax]
c0018b15:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0018b1b:	81 ca 00 02 02 00    	or     edx,0x20200
c0018b21:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0018b24:	8b 00                	mov    eax,DWORD PTR [eax]
c0018b26:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0018b2c:	c1 e8 09             	shr    eax,0x9
c0018b2f:	83 e0 01             	and    eax,0x1
c0018b32:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c0018b35:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0018b38:	83 c0 04             	add    eax,0x4
c0018b3b:	eb 25                	jmp    c0018b62 <Vm::faultHandler(regs*)+0x2d7>
c0018b3d:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0018b40:	81 ca 00 02 02 00    	or     edx,0x20200
c0018b46:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0018b49:	66 8b 00             	mov    ax,WORD PTR [eax]
c0018b4c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0018b52:	66 c1 e8 09          	shr    ax,0x9
c0018b56:	83 e0 01             	and    eax,0x1
c0018b59:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c0018b5c:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0018b5f:	83 c0 02             	add    eax,0x2
c0018b62:	25 ff ff 00 00       	and    eax,0xffff
c0018b67:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0018b6a:	e9 f1 02 00 00       	jmp    c0018e60 <Vm::faultHandler(regs*)+0x5d5>
c0018b6f:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0018b73:	3c ff                	cmp    al,0xff
c0018b75:	75 10                	jne    c0018b87 <Vm::faultHandler(regs*)+0x2fc>
c0018b77:	83 ec 0c             	sub    esp,0xc
c0018b7a:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0018b7d:	e8 8c f9 ff ff       	call   c001850e <Thr::terminateFromIRQ(int)>
c0018b82:	e9 c2 02 00 00       	jmp    c0018e49 <Vm::faultHandler(regs*)+0x5be>
c0018b87:	83 ec 0c             	sub    esp,0xc
c0018b8a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0018b8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018b92:	57                   	push   edi
c0018b93:	50                   	push   eax
c0018b94:	53                   	push   ebx
c0018b95:	e8 f3 fb ff ff       	call   c001878d <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0018b9a:	83 c4 20             	add    esp,0x20
c0018b9d:	e9 c1 02 00 00       	jmp    c0018e63 <Vm::faultHandler(regs*)+0x5d8>
c0018ba2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018ba7:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0018bab:	e9 b0 02 00 00       	jmp    c0018e60 <Vm::faultHandler(regs*)+0x5d5>
c0018bb0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018bb5:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c0018bb9:	e9 a2 02 00 00       	jmp    c0018e60 <Vm::faultHandler(regs*)+0x5d5>
c0018bbe:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0018bc3:	74 0d                	je     c0018bd2 <Vm::faultHandler(regs*)+0x347>
c0018bc5:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0018bcc:	0f 87 e9 02 00 00    	ja     c0018ebb <Vm::faultHandler(regs*)+0x630>
c0018bd2:	83 ec 0c             	sub    esp,0xc
c0018bd5:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0018bd8:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0018bdc:	50                   	push   eax
c0018bdd:	e8 4f fa ff ff       	call   c0018631 <Vm::inbv(unsigned short)>
c0018be2:	83 c4 0c             	add    esp,0xc
c0018be5:	0f b6 c0             	movzx  eax,al
c0018be8:	0f b7 c9             	movzx  ecx,cx
c0018beb:	50                   	push   eax
c0018bec:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0018bf0:	50                   	push   eax
c0018bf1:	51                   	push   ecx
c0018bf2:	e8 54 fc ff ff       	call   c001884b <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0018bf7:	83 c4 10             	add    esp,0x10
c0018bfa:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0018bfd:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0018c01:	74 03                	je     c0018c06 <Vm::faultHandler(regs*)+0x37b>
c0018c03:	48                   	dec    eax
c0018c04:	eb 01                	jmp    c0018c07 <Vm::faultHandler(regs*)+0x37c>
c0018c06:	40                   	inc    eax
c0018c07:	0f b7 c0             	movzx  eax,ax
c0018c0a:	eb 70                	jmp    c0018c7c <Vm::faultHandler(regs*)+0x3f1>
c0018c0c:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0018c0f:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0018c12:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0018c17:	74 0c                	je     c0018c25 <Vm::faultHandler(regs*)+0x39a>
c0018c19:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c0018c1f:	0f 87 96 02 00 00    	ja     c0018ebb <Vm::faultHandler(regs*)+0x630>
c0018c25:	0f b7 c9             	movzx  ecx,cx
c0018c28:	0f b7 f6             	movzx  esi,si
c0018c2b:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0018c2e:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0018c33:	74 20                	je     c0018c55 <Vm::faultHandler(regs*)+0x3ca>
c0018c35:	ed                   	in     eax,dx
c0018c36:	55                   	push   ebp
c0018c37:	50                   	push   eax
c0018c38:	51                   	push   ecx
c0018c39:	56                   	push   esi
c0018c3a:	e8 37 fc ff ff       	call   c0018876 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0018c3f:	83 c4 10             	add    esp,0x10
c0018c42:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0018c45:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0018c49:	74 05                	je     c0018c50 <Vm::faultHandler(regs*)+0x3c5>
c0018c4b:	83 e8 04             	sub    eax,0x4
c0018c4e:	eb 27                	jmp    c0018c77 <Vm::faultHandler(regs*)+0x3ec>
c0018c50:	83 c0 04             	add    eax,0x4
c0018c53:	eb 22                	jmp    c0018c77 <Vm::faultHandler(regs*)+0x3ec>
c0018c55:	66 ed                	in     ax,dx
c0018c57:	0f b7 c0             	movzx  eax,ax
c0018c5a:	57                   	push   edi
c0018c5b:	50                   	push   eax
c0018c5c:	51                   	push   ecx
c0018c5d:	56                   	push   esi
c0018c5e:	e8 fd fb ff ff       	call   c0018860 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0018c63:	83 c4 10             	add    esp,0x10
c0018c66:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0018c69:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0018c6d:	74 05                	je     c0018c74 <Vm::faultHandler(regs*)+0x3e9>
c0018c6f:	83 e8 02             	sub    eax,0x2
c0018c72:	eb 03                	jmp    c0018c77 <Vm::faultHandler(regs*)+0x3ec>
c0018c74:	83 c0 02             	add    eax,0x2
c0018c77:	25 ff ff 00 00       	and    eax,0xffff
c0018c7c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0018c7f:	e9 dc 01 00 00       	jmp    c0018e60 <Vm::faultHandler(regs*)+0x5d5>
c0018c84:	49                   	dec    ecx
c0018c85:	80 f9 05             	cmp    cl,0x5
c0018c88:	77 24                	ja     c0018cae <Vm::faultHandler(regs*)+0x423>
c0018c8a:	0f b6 c9             	movzx  ecx,cl
c0018c8d:	ff 24 8d bc 1e 02 c0 	jmp    DWORD PTR [ecx*4-0x3ffde144]
c0018c94:	0f b7 f5             	movzx  esi,bp
c0018c97:	eb 15                	jmp    c0018cae <Vm::faultHandler(regs*)+0x423>
c0018c99:	0f b7 73 0c          	movzx  esi,WORD PTR [ebx+0xc]
c0018c9d:	eb 0f                	jmp    c0018cae <Vm::faultHandler(regs*)+0x423>
c0018c9f:	0f b7 73 08          	movzx  esi,WORD PTR [ebx+0x8]
c0018ca3:	eb 09                	jmp    c0018cae <Vm::faultHandler(regs*)+0x423>
c0018ca5:	0f b7 73 04          	movzx  esi,WORD PTR [ebx+0x4]
c0018ca9:	eb 03                	jmp    c0018cae <Vm::faultHandler(regs*)+0x423>
c0018cab:	0f b7 33             	movzx  esi,WORD PTR [ebx]
c0018cae:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0018cb1:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0018cb6:	74 0b                	je     c0018cc3 <Vm::faultHandler(regs*)+0x438>
c0018cb8:	3d ff ff 00 00       	cmp    eax,0xffff
c0018cbd:	0f 87 f8 01 00 00    	ja     c0018ebb <Vm::faultHandler(regs*)+0x630>
c0018cc3:	0f b7 c0             	movzx  eax,ax
c0018cc6:	52                   	push   edx
c0018cc7:	52                   	push   edx
c0018cc8:	50                   	push   eax
c0018cc9:	56                   	push   esi
c0018cca:	e8 48 fb ff ff       	call   c0018817 <Vm::readByteFromReal(unsigned short, unsigned short)>
c0018ccf:	59                   	pop    ecx
c0018cd0:	0f b6 c0             	movzx  eax,al
c0018cd3:	5e                   	pop    esi
c0018cd4:	50                   	push   eax
c0018cd5:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0018cd9:	50                   	push   eax
c0018cda:	e8 58 f9 ff ff       	call   c0018637 <Vm::outbv(unsigned short, unsigned char)>
c0018cdf:	83 c4 10             	add    esp,0x10
c0018ce2:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0018ce5:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0018ce9:	74 03                	je     c0018cee <Vm::faultHandler(regs*)+0x463>
c0018ceb:	48                   	dec    eax
c0018cec:	eb 01                	jmp    c0018cef <Vm::faultHandler(regs*)+0x464>
c0018cee:	40                   	inc    eax
c0018cef:	0f b7 c0             	movzx  eax,ax
c0018cf2:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0018cf5:	e9 66 01 00 00       	jmp    c0018e60 <Vm::faultHandler(regs*)+0x5d5>
c0018cfa:	49                   	dec    ecx
c0018cfb:	80 f9 05             	cmp    cl,0x5
c0018cfe:	77 1f                	ja     c0018d1f <Vm::faultHandler(regs*)+0x494>
c0018d00:	0f b6 c9             	movzx  ecx,cl
c0018d03:	ff 24 8d d4 1e 02 c0 	jmp    DWORD PTR [ecx*4-0x3ffde12c]
c0018d0a:	89 ee                	mov    esi,ebp
c0018d0c:	eb 11                	jmp    c0018d1f <Vm::faultHandler(regs*)+0x494>
c0018d0e:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0018d11:	eb 0c                	jmp    c0018d1f <Vm::faultHandler(regs*)+0x494>
c0018d13:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0018d16:	eb 07                	jmp    c0018d1f <Vm::faultHandler(regs*)+0x494>
c0018d18:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0018d1b:	eb 02                	jmp    c0018d1f <Vm::faultHandler(regs*)+0x494>
c0018d1d:	8b 33                	mov    esi,DWORD PTR [ebx]
c0018d1f:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0018d22:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0018d27:	74 0c                	je     c0018d35 <Vm::faultHandler(regs*)+0x4aa>
c0018d29:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c0018d2f:	0f 87 86 01 00 00    	ja     c0018ebb <Vm::faultHandler(regs*)+0x630>
c0018d35:	0f b7 d6             	movzx  edx,si
c0018d38:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c0018d3b:	0f b7 c1             	movzx  eax,cx
c0018d3e:	81 e7 00 04 00 00    	and    edi,0x400
c0018d44:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0018d47:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0018d4c:	74 1d                	je     c0018d6b <Vm::faultHandler(regs*)+0x4e0>
c0018d4e:	55                   	push   ebp
c0018d4f:	55                   	push   ebp
c0018d50:	50                   	push   eax
c0018d51:	52                   	push   edx
c0018d52:	e8 e3 fa ff ff       	call   c001883a <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0018d57:	83 c4 10             	add    esp,0x10
c0018d5a:	89 f2                	mov    edx,esi
c0018d5c:	ef                   	out    dx,eax
c0018d5d:	85 ff                	test   edi,edi
c0018d5f:	74 05                	je     c0018d66 <Vm::faultHandler(regs*)+0x4db>
c0018d61:	83 e9 04             	sub    ecx,0x4
c0018d64:	eb 21                	jmp    c0018d87 <Vm::faultHandler(regs*)+0x4fc>
c0018d66:	83 c1 04             	add    ecx,0x4
c0018d69:	eb 1c                	jmp    c0018d87 <Vm::faultHandler(regs*)+0x4fc>
c0018d6b:	55                   	push   ebp
c0018d6c:	55                   	push   ebp
c0018d6d:	50                   	push   eax
c0018d6e:	52                   	push   edx
c0018d6f:	e8 b4 fa ff ff       	call   c0018828 <Vm::readWordFromReal(unsigned short, unsigned short)>
c0018d74:	83 c4 10             	add    esp,0x10
c0018d77:	89 f2                	mov    edx,esi
c0018d79:	66 ef                	out    dx,ax
c0018d7b:	85 ff                	test   edi,edi
c0018d7d:	74 05                	je     c0018d84 <Vm::faultHandler(regs*)+0x4f9>
c0018d7f:	83 e9 02             	sub    ecx,0x2
c0018d82:	eb 03                	jmp    c0018d87 <Vm::faultHandler(regs*)+0x4fc>
c0018d84:	83 c1 02             	add    ecx,0x2
c0018d87:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0018d8d:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c0018d90:	e9 cb 00 00 00       	jmp    c0018e60 <Vm::faultHandler(regs*)+0x5d5>
c0018d95:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0018d9c:	83 ec 0c             	sub    esp,0xc
c0018d9f:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0018da3:	50                   	push   eax
c0018da4:	e8 88 f8 ff ff       	call   c0018631 <Vm::inbv(unsigned short)>
c0018da9:	0f b6 c0             	movzx  eax,al
c0018dac:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0018daf:	eb 3f                	jmp    c0018df0 <Vm::faultHandler(regs*)+0x565>
c0018db1:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0018db6:	74 07                	je     c0018dbf <Vm::faultHandler(regs*)+0x534>
c0018db8:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c0018dbc:	ed                   	in     eax,dx
c0018dbd:	eb 14                	jmp    c0018dd3 <Vm::faultHandler(regs*)+0x548>
c0018dbf:	8b 4b 2c             	mov    ecx,DWORD PTR [ebx+0x2c]
c0018dc2:	66 31 c9             	xor    cx,cx
c0018dc5:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0018dc8:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c0018dcc:	66 ed                	in     ax,dx
c0018dce:	0f b7 c0             	movzx  eax,ax
c0018dd1:	09 c8                	or     eax,ecx
c0018dd3:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0018dd6:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0018dda:	e9 84 00 00 00       	jmp    c0018e63 <Vm::faultHandler(regs*)+0x5d8>
c0018ddf:	52                   	push   edx
c0018de0:	52                   	push   edx
c0018de1:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0018de5:	50                   	push   eax
c0018de6:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0018dea:	50                   	push   eax
c0018deb:	e8 47 f8 ff ff       	call   c0018637 <Vm::outbv(unsigned short, unsigned char)>
c0018df0:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0018df4:	eb 53                	jmp    c0018e49 <Vm::faultHandler(regs*)+0x5be>
c0018df6:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0018df9:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c0018dfd:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0018e02:	74 03                	je     c0018e07 <Vm::faultHandler(regs*)+0x57c>
c0018e04:	ef                   	out    dx,eax
c0018e05:	eb cf                	jmp    c0018dd6 <Vm::faultHandler(regs*)+0x54b>
c0018e07:	66 ef                	out    dx,ax
c0018e09:	eb cb                	jmp    c0018dd6 <Vm::faultHandler(regs*)+0x54b>
c0018e0b:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0018e12:	83 ec 0c             	sub    esp,0xc
c0018e15:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0018e19:	50                   	push   eax
c0018e1a:	e8 12 f8 ff ff       	call   c0018631 <Vm::inbv(unsigned short)>
c0018e1f:	0f b6 c0             	movzx  eax,al
c0018e22:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0018e25:	eb 1f                	jmp    c0018e46 <Vm::faultHandler(regs*)+0x5bb>
c0018e27:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0018e2a:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0018e2f:	74 03                	je     c0018e34 <Vm::faultHandler(regs*)+0x5a9>
c0018e31:	ed                   	in     eax,dx
c0018e32:	eb 0d                	jmp    c0018e41 <Vm::faultHandler(regs*)+0x5b6>
c0018e34:	66 ed                	in     ax,dx
c0018e36:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0018e39:	0f b7 c0             	movzx  eax,ax
c0018e3c:	66 31 d2             	xor    dx,dx
c0018e3f:	09 d0                	or     eax,edx
c0018e41:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0018e44:	eb 1a                	jmp    c0018e60 <Vm::faultHandler(regs*)+0x5d5>
c0018e46:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018e49:	83 c4 10             	add    esp,0x10
c0018e4c:	eb 15                	jmp    c0018e63 <Vm::faultHandler(regs*)+0x5d8>
c0018e4e:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0018e51:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0018e54:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0018e59:	74 03                	je     c0018e5e <Vm::faultHandler(regs*)+0x5d3>
c0018e5b:	ef                   	out    dx,eax
c0018e5c:	eb 02                	jmp    c0018e60 <Vm::faultHandler(regs*)+0x5d5>
c0018e5e:	66 ef                	out    dx,ax
c0018e60:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018e63:	b0 01                	mov    al,0x1
c0018e65:	eb 56                	jmp    c0018ebd <Vm::faultHandler(regs*)+0x632>
c0018e67:	0f b6 47 05          	movzx  eax,BYTE PTR [edi+0x5]
c0018e6b:	50                   	push   eax
c0018e6c:	0f b6 47 04          	movzx  eax,BYTE PTR [edi+0x4]
c0018e70:	50                   	push   eax
c0018e71:	0f b6 47 03          	movzx  eax,BYTE PTR [edi+0x3]
c0018e75:	50                   	push   eax
c0018e76:	0f b6 47 02          	movzx  eax,BYTE PTR [edi+0x2]
c0018e7a:	50                   	push   eax
c0018e7b:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0018e7f:	50                   	push   eax
c0018e80:	52                   	push   edx
c0018e81:	52                   	push   edx
c0018e82:	68 8d 1e 02 c0       	push   0xc0021e8d
c0018e87:	e8 cf 5e ff ff       	call   c000ed5b <Dbg::kprintf(char const*, ...)>
c0018e8c:	83 c4 20             	add    esp,0x20
c0018e8f:	83 ec 0c             	sub    esp,0xc
c0018e92:	6a 60                	push   0x60
c0018e94:	e8 98 f7 ff ff       	call   c0018631 <Vm::inbv(unsigned short)>
c0018e99:	83 c4 10             	add    esp,0x10
c0018e9c:	3c 1c                	cmp    al,0x1c
c0018e9e:	74 04                	je     c0018ea4 <Vm::faultHandler(regs*)+0x619>
c0018ea0:	3c 5a                	cmp    al,0x5a
c0018ea2:	75 eb                	jne    c0018e8f <Vm::faultHandler(regs*)+0x604>
c0018ea4:	3c 5a                	cmp    al,0x5a
c0018ea6:	74 04                	je     c0018eac <Vm::faultHandler(regs*)+0x621>
c0018ea8:	3c 1c                	cmp    al,0x1c
c0018eaa:	75 0f                	jne    c0018ebb <Vm::faultHandler(regs*)+0x630>
c0018eac:	83 ec 0c             	sub    esp,0xc
c0018eaf:	6a 60                	push   0x60
c0018eb1:	e8 7b f7 ff ff       	call   c0018631 <Vm::inbv(unsigned short)>
c0018eb6:	83 c4 10             	add    esp,0x10
c0018eb9:	eb e9                	jmp    c0018ea4 <Vm::faultHandler(regs*)+0x619>
c0018ebb:	31 c0                	xor    eax,eax
c0018ebd:	83 c4 1c             	add    esp,0x1c
c0018ec0:	5b                   	pop    ebx
c0018ec1:	5e                   	pop    esi
c0018ec2:	5f                   	pop    edi
c0018ec3:	5d                   	pop    ebp
c0018ec4:	c3                   	ret    
c0018ec5:	90                   	nop

c0018ec6 <FAT::getName()>:
c0018ec6:	b8 ec 1e 02 c0       	mov    eax,0xc0021eec
c0018ecb:	c3                   	ret    

c0018ecc <FAT::tell(void*, unsigned long long*)>:
c0018ecc:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018ed1:	75 06                	jne    c0018ed9 <FAT::tell(void*, unsigned long long*)+0xd>
c0018ed3:	b8 04 00 00 00       	mov    eax,0x4
c0018ed8:	c3                   	ret    
c0018ed9:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018ede:	75 06                	jne    c0018ee6 <FAT::tell(void*, unsigned long long*)+0x1a>
c0018ee0:	b8 04 00 00 00       	mov    eax,0x4
c0018ee5:	c3                   	ret    
c0018ee6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018eea:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c0018eed:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0018ef0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018ef4:	89 01                	mov    DWORD PTR [ecx],eax
c0018ef6:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018ef9:	b8 00 00 00 00       	mov    eax,0x0
c0018efe:	c3                   	ret    
c0018eff:	90                   	nop

c0018f00 <FAT::stat(void*, unsigned long long*)>:
c0018f00:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018f05:	75 06                	jne    c0018f0d <FAT::stat(void*, unsigned long long*)+0xd>
c0018f07:	b8 04 00 00 00       	mov    eax,0x4
c0018f0c:	c3                   	ret    
c0018f0d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018f12:	75 06                	jne    c0018f1a <FAT::stat(void*, unsigned long long*)+0x1a>
c0018f14:	b8 04 00 00 00       	mov    eax,0x4
c0018f19:	c3                   	ret    
c0018f1a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018f1e:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0018f21:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018f24:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018f28:	89 01                	mov    DWORD PTR [ecx],eax
c0018f2a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018f2d:	b8 00 00 00 00       	mov    eax,0x0
c0018f32:	c3                   	ret    
c0018f33:	90                   	nop

c0018f34 <FAT::~FAT()>:
c0018f34:	83 ec 0c             	sub    esp,0xc
c0018f37:	ba 70 1f 02 c0       	mov    edx,0xc0021f70
c0018f3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018f40:	89 10                	mov    DWORD PTR [eax],edx
c0018f42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018f46:	83 ec 0c             	sub    esp,0xc
c0018f49:	50                   	push   eax
c0018f4a:	e8 35 61 ff ff       	call   c000f084 <Filesystem::~Filesystem()>
c0018f4f:	83 c4 10             	add    esp,0x10
c0018f52:	90                   	nop
c0018f53:	83 c4 0c             	add    esp,0xc
c0018f56:	c3                   	ret    
c0018f57:	90                   	nop

c0018f58 <FAT::~FAT()>:
c0018f58:	83 ec 0c             	sub    esp,0xc
c0018f5b:	83 ec 0c             	sub    esp,0xc
c0018f5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018f62:	e8 cd ff ff ff       	call   c0018f34 <FAT::~FAT()>
c0018f67:	83 c4 10             	add    esp,0x10
c0018f6a:	83 ec 08             	sub    esp,0x8
c0018f6d:	6a 08                	push   0x8
c0018f6f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018f73:	e8 03 5d ff ff       	call   c000ec7b <operator delete(void*, unsigned long)>
c0018f78:	83 c4 10             	add    esp,0x10
c0018f7b:	83 c4 0c             	add    esp,0xc
c0018f7e:	c3                   	ret    
c0018f7f:	90                   	nop

c0018f80 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0018f80:	83 ec 1c             	sub    esp,0x1c
c0018f83:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0018f8a:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0018f8f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018f93:	8b 04 85 a0 48 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb760]
c0018f9a:	83 f8 ff             	cmp    eax,0xffffffff
c0018f9d:	75 34                	jne    c0018fd3 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c0018f9f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018fa3:	88 c2                	mov    dl,al
c0018fa5:	a1 80 48 02 c0       	mov    eax,ds:0xc0024880
c0018faa:	01 d0                	add    eax,edx
c0018fac:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0018fb0:	8b 15 80 48 02 c0    	mov    edx,DWORD PTR ds:0xc0024880
c0018fb6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018fba:	89 14 85 a0 48 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb760],edx
c0018fc1:	a1 80 48 02 c0       	mov    eax,ds:0xc0024880
c0018fc6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018fca:	89 14 85 20 49 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb6e0],edx
c0018fd1:	eb 17                	jmp    c0018fea <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c0018fd3:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018fd7:	88 c2                	mov    dl,al
c0018fd9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018fdd:	8b 04 85 a0 48 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb760]
c0018fe4:	01 d0                	add    eax,edx
c0018fe6:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0018fea:	83 ec 04             	sub    esp,0x4
c0018fed:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018ff1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018ff5:	8d 44 24 15          	lea    eax,[esp+0x15]
c0018ff9:	50                   	push   eax
c0018ffa:	e8 66 da fe ff       	call   c0006a65 <f_getlabel>
c0018fff:	83 c4 10             	add    esp,0x10
c0019002:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019006:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001900b:	75 07                	jne    c0019014 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c001900d:	b8 00 00 00 00       	mov    eax,0x0
c0019012:	eb 05                	jmp    c0019019 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c0019014:	b8 01 00 00 00       	mov    eax,0x1
c0019019:	83 c4 1c             	add    esp,0x1c
c001901c:	c3                   	ret    
c001901d:	90                   	nop

c001901e <FAT::setlabel(LogicalDisk*, int, char*)>:
c001901e:	57                   	push   edi
c001901f:	83 ec 58             	sub    esp,0x58
c0019022:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001902a:	8d 54 24 10          	lea    edx,[esp+0x10]
c001902e:	b9 0f 00 00 00       	mov    ecx,0xf
c0019033:	b8 00 00 00 00       	mov    eax,0x0
c0019038:	fc                   	cld    
c0019039:	89 d7                	mov    edi,edx
c001903b:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001903d:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0019041:	8b 04 85 a0 48 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb760]
c0019048:	83 f8 ff             	cmp    eax,0xffffffff
c001904b:	75 34                	jne    c0019081 <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c001904d:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019051:	88 c2                	mov    dl,al
c0019053:	a1 80 48 02 c0       	mov    eax,ds:0xc0024880
c0019058:	01 d0                	add    eax,edx
c001905a:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001905e:	8b 15 80 48 02 c0    	mov    edx,DWORD PTR ds:0xc0024880
c0019064:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0019068:	89 14 85 a0 48 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb760],edx
c001906f:	a1 80 48 02 c0       	mov    eax,ds:0xc0024880
c0019074:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0019078:	89 14 85 20 49 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb6e0],edx
c001907f:	eb 17                	jmp    c0019098 <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c0019081:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019085:	88 c2                	mov    dl,al
c0019087:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001908b:	8b 04 85 a0 48 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb760]
c0019092:	01 d0                	add    eax,edx
c0019094:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019098:	83 ec 08             	sub    esp,0x8
c001909b:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001909f:	8d 44 24 18          	lea    eax,[esp+0x18]
c00190a3:	50                   	push   eax
c00190a4:	e8 b5 76 fe ff       	call   c000075e <strcat>
c00190a9:	83 c4 10             	add    esp,0x10
c00190ac:	83 ec 0c             	sub    esp,0xc
c00190af:	8d 44 24 18          	lea    eax,[esp+0x18]
c00190b3:	50                   	push   eax
c00190b4:	e8 9a db fe ff       	call   c0006c53 <f_setlabel>
c00190b9:	83 c4 10             	add    esp,0x10
c00190bc:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00190c0:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c00190c5:	75 07                	jne    c00190ce <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c00190c7:	b8 00 00 00 00       	mov    eax,0x0
c00190cc:	eb 05                	jmp    c00190d3 <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c00190ce:	b8 01 00 00 00       	mov    eax,0x1
c00190d3:	83 c4 58             	add    esp,0x58
c00190d6:	5f                   	pop    edi
c00190d7:	c3                   	ret    

c00190d8 <FAT::format(LogicalDisk*, int, char const*, int)>:
c00190d8:	83 ec 2c             	sub    esp,0x2c
c00190db:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00190e3:	83 ec 08             	sub    esp,0x8
c00190e6:	68 10 1f 02 c0       	push   0xc0021f10
c00190eb:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00190ef:	e8 04 76 fe ff       	call   c00006f8 <strcmp>
c00190f4:	83 c4 10             	add    esp,0x10
c00190f7:	85 c0                	test   eax,eax
c00190f9:	0f 94 c0             	sete   al
c00190fc:	84 c0                	test   al,al
c00190fe:	74 0d                	je     c001910d <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c0019100:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0019108:	e9 a6 00 00 00       	jmp    c00191b3 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001910d:	83 ec 08             	sub    esp,0x8
c0019110:	68 02 1f 02 c0       	push   0xc0021f02
c0019115:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019119:	e8 da 75 fe ff       	call   c00006f8 <strcmp>
c001911e:	83 c4 10             	add    esp,0x10
c0019121:	85 c0                	test   eax,eax
c0019123:	0f 94 c0             	sete   al
c0019126:	84 c0                	test   al,al
c0019128:	74 0a                	je     c0019134 <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c001912a:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0019132:	eb 7f                	jmp    c00191b3 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0019134:	83 ec 08             	sub    esp,0x8
c0019137:	68 08 1f 02 c0       	push   0xc0021f08
c001913c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019140:	e8 b3 75 fe ff       	call   c00006f8 <strcmp>
c0019145:	83 c4 10             	add    esp,0x10
c0019148:	85 c0                	test   eax,eax
c001914a:	0f 94 c0             	sete   al
c001914d:	84 c0                	test   al,al
c001914f:	74 0a                	je     c001915b <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c0019151:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0019159:	eb 58                	jmp    c00191b3 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001915b:	83 ec 08             	sub    esp,0x8
c001915e:	68 0c f4 01 c0       	push   0xc001f40c
c0019163:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019167:	e8 8c 75 fe ff       	call   c00006f8 <strcmp>
c001916c:	83 c4 10             	add    esp,0x10
c001916f:	85 c0                	test   eax,eax
c0019171:	0f 94 c0             	sete   al
c0019174:	84 c0                	test   al,al
c0019176:	74 0a                	je     c0019182 <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c0019178:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0019180:	eb 31                	jmp    c00191b3 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0019182:	83 ec 08             	sub    esp,0x8
c0019185:	68 0e 1f 02 c0       	push   0xc0021f0e
c001918a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001918e:	e8 65 75 fe ff       	call   c00006f8 <strcmp>
c0019193:	83 c4 10             	add    esp,0x10
c0019196:	85 c0                	test   eax,eax
c0019198:	0f 94 c0             	sete   al
c001919b:	84 c0                	test   al,al
c001919d:	74 0a                	je     c00191a9 <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c001919f:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c00191a7:	eb 0a                	jmp    c00191b3 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00191a9:	b8 08 00 00 00       	mov    eax,0x8
c00191ae:	e9 04 01 00 00       	jmp    c00192b7 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c00191b3:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c00191ba:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00191bf:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00191c3:	8b 04 85 a0 48 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb760]
c00191ca:	83 f8 ff             	cmp    eax,0xffffffff
c00191cd:	75 34                	jne    c0019203 <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c00191cf:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00191d3:	88 c2                	mov    dl,al
c00191d5:	a1 80 48 02 c0       	mov    eax,ds:0xc0024880
c00191da:	01 d0                	add    eax,edx
c00191dc:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00191e0:	8b 15 80 48 02 c0    	mov    edx,DWORD PTR ds:0xc0024880
c00191e6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00191ea:	89 14 85 a0 48 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb760],edx
c00191f1:	a1 80 48 02 c0       	mov    eax,ds:0xc0024880
c00191f6:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00191fa:	89 14 85 20 49 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb6e0],edx
c0019201:	eb 17                	jmp    c001921a <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c0019203:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0019207:	88 c2                	mov    dl,al
c0019209:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001920d:	8b 04 85 a0 48 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb760]
c0019214:	01 d0                	add    eax,edx
c0019216:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001921a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001921e:	88 04 24             	mov    BYTE PTR [esp],al
c0019221:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0019225:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019229:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0019231:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0019236:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001923e:	83 ec 0c             	sub    esp,0xc
c0019241:	68 00 20 00 00       	push   0x2000
c0019246:	e8 d3 29 ff ff       	call   c000bc1e <malloc>
c001924b:	83 c4 10             	add    esp,0x10
c001924e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019252:	68 00 20 00 00       	push   0x2000
c0019257:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001925b:	8d 44 24 08          	lea    eax,[esp+0x8]
c001925f:	50                   	push   eax
c0019260:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0019264:	50                   	push   eax
c0019265:	e8 34 de fe ff       	call   c000709e <f_mkfs>
c001926a:	83 c4 10             	add    esp,0x10
c001926d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019271:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019276:	75 07                	jne    c001927f <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c0019278:	b8 00 00 00 00       	mov    eax,0x0
c001927d:	eb 38                	jmp    c00192b7 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001927f:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0019284:	75 17                	jne    c001929d <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c0019286:	83 ec 0c             	sub    esp,0xc
c0019289:	68 40 1f 02 c0       	push   0xc0021f40
c001928e:	e8 c8 5a ff ff       	call   c000ed5b <Dbg::kprintf(char const*, ...)>
c0019293:	83 c4 10             	add    esp,0x10
c0019296:	b8 09 00 00 00       	mov    eax,0x9
c001929b:	eb 1a                	jmp    c00192b7 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001929d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00192a1:	83 ec 08             	sub    esp,0x8
c00192a4:	50                   	push   eax
c00192a5:	68 14 1f 02 c0       	push   0xc0021f14
c00192aa:	e8 ac 5a ff ff       	call   c000ed5b <Dbg::kprintf(char const*, ...)>
c00192af:	83 c4 10             	add    esp,0x10
c00192b2:	b8 01 00 00 00       	mov    eax,0x1
c00192b7:	83 c4 2c             	add    esp,0x2c
c00192ba:	c3                   	ret    
c00192bb:	90                   	nop

c00192bc <FAT::tryMount(LogicalDisk*, int)>:
c00192bc:	81 ec 6c 03 00 00    	sub    esp,0x36c
c00192c2:	a1 80 48 02 c0       	mov    eax,ds:0xc0024880
c00192c7:	83 f8 14             	cmp    eax,0x14
c00192ca:	75 17                	jne    c00192e3 <FAT::tryMount(LogicalDisk*, int)+0x27>
c00192cc:	83 ec 0c             	sub    esp,0xc
c00192cf:	68 26 1f 02 c0       	push   0xc0021f26
c00192d4:	e8 17 b7 ff ff       	call   c00149f0 <Krnl::panic(char const*)>
c00192d9:	83 c4 10             	add    esp,0x10
c00192dc:	b0 00                	mov    al,0x0
c00192de:	e9 d7 01 00 00       	jmp    c00194ba <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00192e3:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c00192ea:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00192f0:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00192f6:	3d 00 02 00 00       	cmp    eax,0x200
c00192fb:	74 07                	je     c0019304 <FAT::tryMount(LogicalDisk*, int)+0x48>
c00192fd:	b0 00                	mov    al,0x0
c00192ff:	e9 b6 01 00 00       	jmp    c00194ba <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0019304:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c001930c:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0019313:	8b 04 85 a0 48 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb760]
c001931a:	83 f8 ff             	cmp    eax,0xffffffff
c001931d:	74 07                	je     c0019326 <FAT::tryMount(LogicalDisk*, int)+0x6a>
c001931f:	b0 01                	mov    al,0x1
c0019321:	e9 94 01 00 00       	jmp    c00194ba <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0019326:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c0019330:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c0019338:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c001933f:	88 c2                	mov    dl,al
c0019341:	a1 80 48 02 c0       	mov    eax,ds:0xc0024880
c0019346:	01 d0                	add    eax,edx
c0019348:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c001934f:	8b 15 80 48 02 c0    	mov    edx,DWORD PTR ds:0xc0024880
c0019355:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001935c:	89 14 85 a0 48 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb760],edx
c0019363:	a1 80 48 02 c0       	mov    eax,ds:0xc0024880
c0019368:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c001936f:	89 14 85 20 49 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb6e0],edx
c0019376:	83 ec 0c             	sub    esp,0xc
c0019379:	68 54 02 00 00       	push   0x254
c001937e:	e8 9b 28 ff ff       	call   c000bc1e <malloc>
c0019383:	83 c4 10             	add    esp,0x10
c0019386:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c001938d:	83 ec 04             	sub    esp,0x4
c0019390:	6a 00                	push   0x0
c0019392:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0019399:	50                   	push   eax
c001939a:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c00193a1:	e8 b6 b8 fe ff       	call   c0004c5c <f_mount>
c00193a6:	83 c4 10             	add    esp,0x10
c00193a9:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c00193b0:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c00193b8:	74 19                	je     c00193d3 <FAT::tryMount(LogicalDisk*, int)+0x117>
c00193ba:	83 ec 0c             	sub    esp,0xc
c00193bd:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c00193c4:	e8 75 28 ff ff       	call   c000bc3e <rfree>
c00193c9:	83 c4 10             	add    esp,0x10
c00193cc:	b0 00                	mov    al,0x0
c00193ce:	e9 e7 00 00 00       	jmp    c00194ba <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00193d3:	83 ec 04             	sub    esp,0x4
c00193d6:	68 00 01 00 00       	push   0x100
c00193db:	6a 00                	push   0x0
c00193dd:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c00193e4:	50                   	push   eax
c00193e5:	e8 1e 72 fe ff       	call   c0000608 <memset>
c00193ea:	83 c4 10             	add    esp,0x10
c00193ed:	83 ec 08             	sub    esp,0x8
c00193f0:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c00193f7:	50                   	push   eax
c00193f8:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c00193ff:	50                   	push   eax
c0019400:	e8 59 73 fe ff       	call   c000075e <strcat>
c0019405:	83 c4 10             	add    esp,0x10
c0019408:	83 ec 08             	sub    esp,0x8
c001940b:	68 34 1f 02 c0       	push   0xc0021f34
c0019410:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0019417:	50                   	push   eax
c0019418:	e8 41 73 fe ff       	call   c000075e <strcat>
c001941d:	83 c4 10             	add    esp,0x10
c0019420:	83 ec 04             	sub    esp,0x4
c0019423:	6a 01                	push   0x1
c0019425:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c001942c:	50                   	push   eax
c001942d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019431:	50                   	push   eax
c0019432:	e8 87 b8 fe ff       	call   c0004cbe <f_open>
c0019437:	83 c4 10             	add    esp,0x10
c001943a:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0019441:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0019448:	85 c0                	test   eax,eax
c001944a:	74 0a                	je     c0019456 <FAT::tryMount(LogicalDisk*, int)+0x19a>
c001944c:	78 2d                	js     c001947b <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c001944e:	83 e8 04             	sub    eax,0x4
c0019451:	83 f8 01             	cmp    eax,0x1
c0019454:	77 25                	ja     c001947b <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0019456:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c001945e:	83 ec 0c             	sub    esp,0xc
c0019461:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019465:	50                   	push   eax
c0019466:	e8 a5 c3 fe ff       	call   c0005810 <f_close>
c001946b:	83 c4 10             	add    esp,0x10
c001946e:	90                   	nop
c001946f:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c0019477:	74 3a                	je     c00194b3 <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c0019479:	eb 2d                	jmp    c00194a8 <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c001947b:	83 ec 0c             	sub    esp,0xc
c001947e:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0019485:	e8 b4 27 ff ff       	call   c000bc3e <rfree>
c001948a:	83 c4 10             	add    esp,0x10
c001948d:	83 ec 04             	sub    esp,0x4
c0019490:	6a 00                	push   0x0
c0019492:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0019499:	50                   	push   eax
c001949a:	6a 00                	push   0x0
c001949c:	e8 bb b7 fe ff       	call   c0004c5c <f_mount>
c00194a1:	83 c4 10             	add    esp,0x10
c00194a4:	b0 00                	mov    al,0x0
c00194a6:	eb 12                	jmp    c00194ba <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00194a8:	a1 80 48 02 c0       	mov    eax,ds:0xc0024880
c00194ad:	40                   	inc    eax
c00194ae:	a3 80 48 02 c0       	mov    ds:0xc0024880,eax
c00194b3:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c00194ba:	81 c4 6c 03 00 00    	add    esp,0x36c
c00194c0:	c3                   	ret    
c00194c1:	90                   	nop

c00194c2 <FAT::readDir(void*, unsigned long, void*, int*)>:
c00194c2:	81 ec 3c 02 00 00    	sub    esp,0x23c
c00194c8:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c00194d0:	74 0a                	je     c00194dc <FAT::readDir(void*, unsigned long, void*, int*)+0x1a>
c00194d2:	83 bc 24 50 02 00 00 00 	cmp    DWORD PTR [esp+0x250],0x0
c00194da:	75 0a                	jne    c00194e6 <FAT::readDir(void*, unsigned long, void*, int*)+0x24>
c00194dc:	b8 04 00 00 00       	mov    eax,0x4
c00194e1:	e9 db 00 00 00       	jmp    c00195c1 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c00194e6:	83 ec 08             	sub    esp,0x8
c00194e9:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00194f0:	50                   	push   eax
c00194f1:	ff b4 24 50 02 00 00 	push   DWORD PTR [esp+0x250]
c00194f8:	e8 1d c9 fe ff       	call   c0005e1a <f_readdir>
c00194fd:	83 c4 10             	add    esp,0x10
c0019500:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c0019507:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001950d:	83 ec 0c             	sub    esp,0xc
c0019510:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0019517:	83 c0 1a             	add    eax,0x1a
c001951a:	50                   	push   eax
c001951b:	e8 05 71 fe ff       	call   c0000625 <strlen>
c0019520:	83 c4 10             	add    esp,0x10
c0019523:	ba 00 00 00 00       	mov    edx,0x0
c0019528:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001952c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0019530:	8a 84 24 1c 01 00 00 	mov    al,BYTE PTR [esp+0x11c]
c0019537:	0f b6 c0             	movzx  eax,al
c001953a:	83 e0 10             	and    eax,0x10
c001953d:	74 07                	je     c0019546 <FAT::readDir(void*, unsigned long, void*, int*)+0x84>
c001953f:	b8 02 00 00 00       	mov    eax,0x2
c0019544:	eb 05                	jmp    c001954b <FAT::readDir(void*, unsigned long, void*, int*)+0x89>
c0019546:	b8 01 00 00 00       	mov    eax,0x1
c001954b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001954f:	83 ec 08             	sub    esp,0x8
c0019552:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0019559:	83 c0 1a             	add    eax,0x1a
c001955c:	50                   	push   eax
c001955d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019561:	83 c0 10             	add    eax,0x10
c0019564:	50                   	push   eax
c0019565:	e8 3d 71 fe ff       	call   c00006a7 <strcpy>
c001956a:	83 c4 10             	add    esp,0x10
c001956d:	83 ec 04             	sub    esp,0x4
c0019570:	ff b4 24 4c 02 00 00 	push   DWORD PTR [esp+0x24c]
c0019577:	8d 44 24 08          	lea    eax,[esp+0x8]
c001957b:	50                   	push   eax
c001957c:	ff b4 24 58 02 00 00 	push   DWORD PTR [esp+0x258]
c0019583:	e8 4a 70 fe ff       	call   c00005d2 <memcpy>
c0019588:	83 c4 10             	add    esp,0x10
c001958b:	8b 84 24 50 02 00 00 	mov    eax,DWORD PTR [esp+0x250]
c0019592:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0019598:	8a 84 24 2a 01 00 00 	mov    al,BYTE PTR [esp+0x12a]
c001959f:	84 c0                	test   al,al
c00195a1:	75 07                	jne    c00195aa <FAT::readDir(void*, unsigned long, void*, int*)+0xe8>
c00195a3:	b8 07 00 00 00       	mov    eax,0x7
c00195a8:	eb 17                	jmp    c00195c1 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c00195aa:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c00195b1:	85 c0                	test   eax,eax
c00195b3:	75 07                	jne    c00195bc <FAT::readDir(void*, unsigned long, void*, int*)+0xfa>
c00195b5:	b8 00 00 00 00       	mov    eax,0x0
c00195ba:	eb 05                	jmp    c00195c1 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c00195bc:	b8 01 00 00 00       	mov    eax,0x1
c00195c1:	81 c4 3c 02 00 00    	add    esp,0x23c
c00195c7:	c3                   	ret    

c00195c8 <FAT::read(void*, unsigned long, void*, int*)>:
c00195c8:	83 ec 1c             	sub    esp,0x1c
c00195cb:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00195d0:	74 07                	je     c00195d9 <FAT::read(void*, unsigned long, void*, int*)+0x11>
c00195d2:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00195d7:	75 07                	jne    c00195e0 <FAT::read(void*, unsigned long, void*, int*)+0x18>
c00195d9:	b8 04 00 00 00       	mov    eax,0x4
c00195de:	eb 3d                	jmp    c001961d <FAT::read(void*, unsigned long, void*, int*)+0x55>
c00195e0:	8d 44 24 08          	lea    eax,[esp+0x8]
c00195e4:	50                   	push   eax
c00195e5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00195e9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00195ed:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00195f1:	e8 04 bb fe ff       	call   c00050fa <f_read>
c00195f6:	83 c4 10             	add    esp,0x10
c00195f9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00195fd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019601:	89 c2                	mov    edx,eax
c0019603:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019607:	89 10                	mov    DWORD PTR [eax],edx
c0019609:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001960d:	85 c0                	test   eax,eax
c001960f:	75 07                	jne    c0019618 <FAT::read(void*, unsigned long, void*, int*)+0x50>
c0019611:	b8 00 00 00 00       	mov    eax,0x0
c0019616:	eb 05                	jmp    c001961d <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0019618:	b8 01 00 00 00       	mov    eax,0x1
c001961d:	83 c4 1c             	add    esp,0x1c
c0019620:	c3                   	ret    
c0019621:	90                   	nop

c0019622 <FAT::write(void*, unsigned long, void*, int*)>:
c0019622:	83 ec 1c             	sub    esp,0x1c
c0019625:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001962a:	74 07                	je     c0019633 <FAT::write(void*, unsigned long, void*, int*)+0x11>
c001962c:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0019631:	75 07                	jne    c001963a <FAT::write(void*, unsigned long, void*, int*)+0x18>
c0019633:	b8 04 00 00 00       	mov    eax,0x4
c0019638:	eb 3d                	jmp    c0019677 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c001963a:	8d 44 24 08          	lea    eax,[esp+0x8]
c001963e:	50                   	push   eax
c001963f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019643:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0019647:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001964b:	e8 2a bd fe ff       	call   c000537a <f_write>
c0019650:	83 c4 10             	add    esp,0x10
c0019653:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019657:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001965b:	89 c2                	mov    edx,eax
c001965d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019661:	89 10                	mov    DWORD PTR [eax],edx
c0019663:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019667:	85 c0                	test   eax,eax
c0019669:	75 07                	jne    c0019672 <FAT::write(void*, unsigned long, void*, int*)+0x50>
c001966b:	b8 00 00 00 00       	mov    eax,0x0
c0019670:	eb 05                	jmp    c0019677 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0019672:	b8 01 00 00 00       	mov    eax,0x1
c0019677:	83 c4 1c             	add    esp,0x1c
c001967a:	c3                   	ret    
c001967b:	90                   	nop

c001967c <FAT::close(void*)>:
c001967c:	83 ec 1c             	sub    esp,0x1c
c001967f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019684:	75 07                	jne    c001968d <FAT::close(void*)+0x11>
c0019686:	b8 04 00 00 00       	mov    eax,0x4
c001968b:	eb 36                	jmp    c00196c3 <FAT::close(void*)+0x47>
c001968d:	83 ec 0c             	sub    esp,0xc
c0019690:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019694:	e8 77 c1 fe ff       	call   c0005810 <f_close>
c0019699:	83 c4 10             	add    esp,0x10
c001969c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00196a0:	83 ec 0c             	sub    esp,0xc
c00196a3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00196a7:	e8 82 25 ff ff       	call   c000bc2e <free>
c00196ac:	83 c4 10             	add    esp,0x10
c00196af:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00196b3:	85 c0                	test   eax,eax
c00196b5:	75 07                	jne    c00196be <FAT::close(void*)+0x42>
c00196b7:	b8 00 00 00 00       	mov    eax,0x0
c00196bc:	eb 05                	jmp    c00196c3 <FAT::close(void*)+0x47>
c00196be:	b8 01 00 00 00       	mov    eax,0x1
c00196c3:	83 c4 1c             	add    esp,0x1c
c00196c6:	c3                   	ret    
c00196c7:	90                   	nop

c00196c8 <FAT::closeDir(void*)>:
c00196c8:	83 ec 1c             	sub    esp,0x1c
c00196cb:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00196d0:	75 07                	jne    c00196d9 <FAT::closeDir(void*)+0x11>
c00196d2:	b8 04 00 00 00       	mov    eax,0x4
c00196d7:	eb 36                	jmp    c001970f <FAT::closeDir(void*)+0x47>
c00196d9:	83 ec 0c             	sub    esp,0xc
c00196dc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00196e0:	e8 13 c7 fe ff       	call   c0005df8 <f_closedir>
c00196e5:	83 c4 10             	add    esp,0x10
c00196e8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00196ec:	83 ec 0c             	sub    esp,0xc
c00196ef:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00196f3:	e8 36 25 ff ff       	call   c000bc2e <free>
c00196f8:	83 c4 10             	add    esp,0x10
c00196fb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00196ff:	85 c0                	test   eax,eax
c0019701:	75 07                	jne    c001970a <FAT::closeDir(void*)+0x42>
c0019703:	b8 00 00 00 00       	mov    eax,0x0
c0019708:	eb 05                	jmp    c001970f <FAT::closeDir(void*)+0x47>
c001970a:	b8 01 00 00 00       	mov    eax,0x1
c001970f:	83 c4 1c             	add    esp,0x1c
c0019712:	c3                   	ret    
c0019713:	90                   	nop

c0019714 <FAT::seek(void*, unsigned long long)>:
c0019714:	83 ec 2c             	sub    esp,0x2c
c0019717:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001971b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001971f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019723:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019727:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001972c:	75 07                	jne    c0019735 <FAT::seek(void*, unsigned long long)+0x21>
c001972e:	b8 04 00 00 00       	mov    eax,0x4
c0019733:	eb 2f                	jmp    c0019764 <FAT::seek(void*, unsigned long long)+0x50>
c0019735:	83 ec 04             	sub    esp,0x4
c0019738:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001973c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0019740:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0019744:	e8 f6 c0 fe ff       	call   c000583f <f_lseek>
c0019749:	83 c4 10             	add    esp,0x10
c001974c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019750:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019754:	85 c0                	test   eax,eax
c0019756:	75 07                	jne    c001975f <FAT::seek(void*, unsigned long long)+0x4b>
c0019758:	b8 00 00 00 00       	mov    eax,0x0
c001975d:	eb 05                	jmp    c0019764 <FAT::seek(void*, unsigned long long)+0x50>
c001975f:	b8 01 00 00 00       	mov    eax,0x1
c0019764:	83 c4 2c             	add    esp,0x2c
c0019767:	c3                   	ret    

c0019768 <fatWrapperReadDisk>:
c0019768:	83 ec 1c             	sub    esp,0x1c
c001976b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001976f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019773:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019777:	89 04 24             	mov    DWORD PTR [esp],eax
c001977a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001977e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019782:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019787:	8b 04 85 00 3a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc600]
c001978e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0019792:	83 ec 0c             	sub    esp,0xc
c0019795:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019799:	52                   	push   edx
c001979a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001979e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00197a2:	50                   	push   eax
c00197a3:	e8 36 85 ff ff       	call   c0011cde <LogicalDisk::read(unsigned long long, int, void*)>
c00197a8:	83 c4 20             	add    esp,0x20
c00197ab:	83 c4 1c             	add    esp,0x1c
c00197ae:	c3                   	ret    

c00197af <fatWrapperWriteDisk>:
c00197af:	83 ec 1c             	sub    esp,0x1c
c00197b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00197b6:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00197ba:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00197be:	89 04 24             	mov    DWORD PTR [esp],eax
c00197c1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00197c5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00197c9:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00197ce:	8b 04 85 00 3a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc600]
c00197d5:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00197d9:	83 ec 0c             	sub    esp,0xc
c00197dc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00197e0:	52                   	push   edx
c00197e1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00197e5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00197e9:	50                   	push   eax
c00197ea:	e8 5b 85 ff ff       	call   c0011d4a <LogicalDisk::write(unsigned long long, int, void*)>
c00197ef:	83 c4 20             	add    esp,0x20
c00197f2:	83 c4 1c             	add    esp,0x1c
c00197f5:	c3                   	ret    

c00197f6 <fatWrapperIoctl>:
c00197f6:	53                   	push   ebx
c00197f7:	83 ec 28             	sub    esp,0x28
c00197fa:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00197fe:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019802:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0019806:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001980a:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c001980f:	75 31                	jne    c0019842 <fatWrapperIoctl+0x4c>
c0019811:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019815:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019819:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001981e:	8b 04 85 00 3a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc600]
c0019825:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001982b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0019831:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019835:	66 89 02             	mov    WORD PTR [edx],ax
c0019838:	b8 00 00 00 00       	mov    eax,0x0
c001983d:	e9 b2 00 00 00       	jmp    c00198f4 <fatWrapperIoctl+0xfe>
c0019842:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0019847:	75 6a                	jne    c00198b3 <fatWrapperIoctl+0xbd>
c0019849:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001984d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019851:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019856:	8b 04 85 00 3a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc600]
c001985d:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019863:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0019869:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001986f:	89 c8                	mov    eax,ecx
c0019871:	89 da                	mov    edx,ebx
c0019873:	0f a4 c2 0a          	shld   edx,eax,0xa
c0019877:	c1 e0 0a             	shl    eax,0xa
c001987a:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001987f:	8b 0c 8d 00 3a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdc600]
c0019886:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001988c:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0019892:	89 cb                	mov    ebx,ecx
c0019894:	c1 fb 1f             	sar    ebx,0x1f
c0019897:	53                   	push   ebx
c0019898:	51                   	push   ecx
c0019899:	52                   	push   edx
c001989a:	50                   	push   eax
c001989b:	e8 1c 4b 00 00       	call   c001e3bc <__udivdi3>
c00198a0:	83 c4 10             	add    esp,0x10
c00198a3:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00198a7:	89 01                	mov    DWORD PTR [ecx],eax
c00198a9:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00198ac:	b8 00 00 00 00       	mov    eax,0x0
c00198b1:	eb 41                	jmp    c00198f4 <fatWrapperIoctl+0xfe>
c00198b3:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00198b8:	75 07                	jne    c00198c1 <fatWrapperIoctl+0xcb>
c00198ba:	b8 00 00 00 00       	mov    eax,0x0
c00198bf:	eb 33                	jmp    c00198f4 <fatWrapperIoctl+0xfe>
c00198c1:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c00198c6:	75 19                	jne    c00198e1 <fatWrapperIoctl+0xeb>
c00198c8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00198cc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00198d0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00198d4:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c00198da:	b8 00 00 00 00       	mov    eax,0x0
c00198df:	eb 13                	jmp    c00198f4 <fatWrapperIoctl+0xfe>
c00198e1:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c00198e6:	75 07                	jne    c00198ef <fatWrapperIoctl+0xf9>
c00198e8:	b8 00 00 00 00       	mov    eax,0x0
c00198ed:	eb 05                	jmp    c00198f4 <fatWrapperIoctl+0xfe>
c00198ef:	b8 04 00 00 00       	mov    eax,0x4
c00198f4:	83 c4 28             	add    esp,0x28
c00198f7:	5b                   	pop    ebx
c00198f8:	c3                   	ret    
c00198f9:	90                   	nop

c00198fa <FAT::FAT()>:
c00198fa:	83 ec 1c             	sub    esp,0x1c
c00198fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019901:	83 ec 0c             	sub    esp,0xc
c0019904:	50                   	push   eax
c0019905:	e8 56 57 ff ff       	call   c000f060 <Filesystem::Filesystem()>
c001990a:	83 c4 10             	add    esp,0x10
c001990d:	ba 70 1f 02 c0       	mov    edx,0xc0021f70
c0019912:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019916:	89 10                	mov    DWORD PTR [eax],edx
c0019918:	c7 05 80 48 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024880,0x0
c0019922:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001992a:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001992f:	7f 15                	jg     c0019946 <FAT::FAT()+0x4c>
c0019931:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019935:	c7 04 85 a0 48 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffdb760],0xffffffff
c0019940:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0019944:	eb e4                	jmp    c001992a <FAT::FAT()+0x30>
c0019946:	90                   	nop
c0019947:	83 c4 1c             	add    esp,0x1c
c001994a:	c3                   	ret    
c001994b:	90                   	nop

c001994c <FAT::fixFilepath(char*)>:
c001994c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019950:	8a 00                	mov    al,BYTE PTR [eax]
c0019952:	3c 40                	cmp    al,0x40
c0019954:	7e 2c                	jle    c0019982 <FAT::fixFilepath(char*)+0x36>
c0019956:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001995a:	8a 00                	mov    al,BYTE PTR [eax]
c001995c:	83 e8 41             	sub    eax,0x41
c001995f:	88 c2                	mov    dl,al
c0019961:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019965:	88 10                	mov    BYTE PTR [eax],dl
c0019967:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001996b:	8a 00                	mov    al,BYTE PTR [eax]
c001996d:	0f be c0             	movsx  eax,al
c0019970:	8b 04 85 a0 48 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb760]
c0019977:	83 c0 30             	add    eax,0x30
c001997a:	88 c2                	mov    dl,al
c001997c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019980:	88 10                	mov    BYTE PTR [eax],dl
c0019982:	90                   	nop
c0019983:	c3                   	ret    

c0019984 <FAT::open(char const*, void**, FileOpenMode)>:
c0019984:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001998a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019992:	74 0a                	je     c001999e <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c0019994:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001999c:	75 0a                	jne    c00199a8 <FAT::open(char const*, void**, FileOpenMode)+0x24>
c001999e:	b8 04 00 00 00       	mov    eax,0x4
c00199a3:	e9 fd 00 00 00       	jmp    c0019aa5 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c00199a8:	83 ec 08             	sub    esp,0x8
c00199ab:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00199b2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00199b6:	50                   	push   eax
c00199b7:	e8 eb 6c fe ff       	call   c00006a7 <strcpy>
c00199bc:	83 c4 10             	add    esp,0x10
c00199bf:	83 ec 08             	sub    esp,0x8
c00199c2:	8d 44 24 10          	lea    eax,[esp+0x10]
c00199c6:	50                   	push   eax
c00199c7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00199ce:	e8 79 ff ff ff       	call   c001994c <FAT::fixFilepath(char*)>
c00199d3:	83 c4 10             	add    esp,0x10
c00199d6:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c00199de:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00199e5:	83 e0 01             	and    eax,0x1
c00199e8:	74 08                	je     c00199f2 <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c00199ea:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c00199f2:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00199f9:	83 e0 04             	and    eax,0x4
c00199fc:	74 10                	je     c0019a0e <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c00199fe:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c0019a06:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0019a0e:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019a15:	83 e0 02             	and    eax,0x2
c0019a18:	74 08                	je     c0019a22 <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c0019a1a:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0019a22:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019a29:	83 e0 08             	and    eax,0x8
c0019a2c:	74 08                	je     c0019a36 <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c0019a2e:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c0019a36:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019a3d:	83 e0 10             	and    eax,0x10
c0019a40:	74 08                	je     c0019a4a <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c0019a42:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c0019a4a:	83 ec 0c             	sub    esp,0xc
c0019a4d:	68 50 02 00 00       	push   0x250
c0019a52:	e8 c7 21 ff ff       	call   c000bc1e <malloc>
c0019a57:	83 c4 10             	add    esp,0x10
c0019a5a:	89 c2                	mov    edx,eax
c0019a5c:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019a63:	89 10                	mov    DWORD PTR [eax],edx
c0019a65:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0019a6d:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019a74:	8b 00                	mov    eax,DWORD PTR [eax]
c0019a76:	83 ec 04             	sub    esp,0x4
c0019a79:	52                   	push   edx
c0019a7a:	8d 54 24 10          	lea    edx,[esp+0x10]
c0019a7e:	52                   	push   edx
c0019a7f:	50                   	push   eax
c0019a80:	e8 39 b2 fe ff       	call   c0004cbe <f_open>
c0019a85:	83 c4 10             	add    esp,0x10
c0019a88:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0019a8f:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0019a97:	74 07                	je     c0019aa0 <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c0019a99:	b8 01 00 00 00       	mov    eax,0x1
c0019a9e:	eb 05                	jmp    c0019aa5 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0019aa0:	b8 00 00 00 00       	mov    eax,0x0
c0019aa5:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019aab:	c3                   	ret    

c0019aac <FAT::openDir(char const*, void**)>:
c0019aac:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019ab2:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019aba:	74 0a                	je     c0019ac6 <FAT::openDir(char const*, void**)+0x1a>
c0019abc:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0019ac4:	75 07                	jne    c0019acd <FAT::openDir(char const*, void**)+0x21>
c0019ac6:	b8 04 00 00 00       	mov    eax,0x4
c0019acb:	eb 7d                	jmp    c0019b4a <FAT::openDir(char const*, void**)+0x9e>
c0019acd:	83 ec 08             	sub    esp,0x8
c0019ad0:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019ad7:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019adb:	50                   	push   eax
c0019adc:	e8 c6 6b fe ff       	call   c00006a7 <strcpy>
c0019ae1:	83 c4 10             	add    esp,0x10
c0019ae4:	83 ec 08             	sub    esp,0x8
c0019ae7:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019aeb:	50                   	push   eax
c0019aec:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019af3:	e8 54 fe ff ff       	call   c001994c <FAT::fixFilepath(char*)>
c0019af8:	83 c4 10             	add    esp,0x10
c0019afb:	83 ec 0c             	sub    esp,0xc
c0019afe:	6a 4c                	push   0x4c
c0019b00:	e8 19 21 ff ff       	call   c000bc1e <malloc>
c0019b05:	83 c4 10             	add    esp,0x10
c0019b08:	89 c2                	mov    edx,eax
c0019b0a:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019b11:	89 10                	mov    DWORD PTR [eax],edx
c0019b13:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019b1a:	8b 00                	mov    eax,DWORD PTR [eax]
c0019b1c:	83 ec 08             	sub    esp,0x8
c0019b1f:	8d 54 24 14          	lea    edx,[esp+0x14]
c0019b23:	52                   	push   edx
c0019b24:	50                   	push   eax
c0019b25:	e8 cc c1 fe ff       	call   c0005cf6 <f_opendir>
c0019b2a:	83 c4 10             	add    esp,0x10
c0019b2d:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019b34:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0019b3c:	74 07                	je     c0019b45 <FAT::openDir(char const*, void**)+0x99>
c0019b3e:	b8 01 00 00 00       	mov    eax,0x1
c0019b43:	eb 05                	jmp    c0019b4a <FAT::openDir(char const*, void**)+0x9e>
c0019b45:	b8 00 00 00 00       	mov    eax,0x0
c0019b4a:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019b50:	c3                   	ret    
c0019b51:	90                   	nop

c0019b52 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0019b52:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0019b58:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0019b60:	75 0a                	jne    c0019b6c <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c0019b62:	b8 04 00 00 00       	mov    eax,0x4
c0019b67:	e9 c9 00 00 00       	jmp    c0019c35 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0019b6c:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0019b74:	75 0a                	jne    c0019b80 <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c0019b76:	b8 04 00 00 00       	mov    eax,0x4
c0019b7b:	e9 b5 00 00 00       	jmp    c0019c35 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0019b80:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0019b88:	75 0a                	jne    c0019b94 <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c0019b8a:	b8 04 00 00 00       	mov    eax,0x4
c0019b8f:	e9 a1 00 00 00       	jmp    c0019c35 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0019b94:	83 ec 08             	sub    esp,0x8
c0019b97:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019b9e:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0019ba5:	50                   	push   eax
c0019ba6:	e8 fc 6a fe ff       	call   c00006a7 <strcpy>
c0019bab:	83 c4 10             	add    esp,0x10
c0019bae:	83 ec 08             	sub    esp,0x8
c0019bb1:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0019bb8:	50                   	push   eax
c0019bb9:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019bc0:	e8 87 fd ff ff       	call   c001994c <FAT::fixFilepath(char*)>
c0019bc5:	83 c4 10             	add    esp,0x10
c0019bc8:	83 ec 08             	sub    esp,0x8
c0019bcb:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019bcf:	50                   	push   eax
c0019bd0:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0019bd7:	50                   	push   eax
c0019bd8:	e8 d8 c2 fe ff       	call   c0005eb5 <f_stat>
c0019bdd:	83 c4 10             	add    esp,0x10
c0019be0:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0019be7:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0019bee:	85 c0                	test   eax,eax
c0019bf0:	74 07                	je     c0019bf9 <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c0019bf2:	83 f8 04             	cmp    eax,0x4
c0019bf5:	74 32                	je     c0019c29 <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c0019bf7:	eb 37                	jmp    c0019c30 <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c0019bf9:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019bfd:	0f b6 c0             	movzx  eax,al
c0019c00:	83 e0 10             	and    eax,0x10
c0019c03:	0f 95 c2             	setne  dl
c0019c06:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0019c0d:	88 10                	mov    BYTE PTR [eax],dl
c0019c0f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0019c12:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019c16:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0019c1d:	89 01                	mov    DWORD PTR [ecx],eax
c0019c1f:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019c22:	b8 00 00 00 00       	mov    eax,0x0
c0019c27:	eb 0c                	jmp    c0019c35 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0019c29:	b8 02 00 00 00       	mov    eax,0x2
c0019c2e:	eb 05                	jmp    c0019c35 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0019c30:	b8 01 00 00 00       	mov    eax,0x1
c0019c35:	81 c4 2c 02 00 00    	add    esp,0x22c
c0019c3b:	c3                   	ret    

c0019c3c <FAT::unlink(char const*)>:
c0019c3c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019c42:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019c4a:	75 07                	jne    c0019c53 <FAT::unlink(char const*)+0x17>
c0019c4c:	b8 04 00 00 00       	mov    eax,0x4
c0019c51:	eb 5c                	jmp    c0019caf <FAT::unlink(char const*)+0x73>
c0019c53:	83 ec 08             	sub    esp,0x8
c0019c56:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019c5d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019c61:	50                   	push   eax
c0019c62:	e8 40 6a fe ff       	call   c00006a7 <strcpy>
c0019c67:	83 c4 10             	add    esp,0x10
c0019c6a:	83 ec 08             	sub    esp,0x8
c0019c6d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019c71:	50                   	push   eax
c0019c72:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019c79:	e8 ce fc ff ff       	call   c001994c <FAT::fixFilepath(char*)>
c0019c7e:	83 c4 10             	add    esp,0x10
c0019c81:	83 ec 0c             	sub    esp,0xc
c0019c84:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019c88:	50                   	push   eax
c0019c89:	e8 79 c5 fe ff       	call   c0006207 <f_unlink>
c0019c8e:	83 c4 10             	add    esp,0x10
c0019c91:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019c98:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0019c9f:	85 c0                	test   eax,eax
c0019ca1:	75 07                	jne    c0019caa <FAT::unlink(char const*)+0x6e>
c0019ca3:	b8 00 00 00 00       	mov    eax,0x0
c0019ca8:	eb 05                	jmp    c0019caf <FAT::unlink(char const*)+0x73>
c0019caa:	b8 01 00 00 00       	mov    eax,0x1
c0019caf:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019cb5:	c3                   	ret    

c0019cb6 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0019cb6:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0019cbc:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0019cc3:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0019cca:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0019cce:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0019cd2:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0019cda:	75 0a                	jne    c0019ce6 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0019cdc:	b8 04 00 00 00       	mov    eax,0x4
c0019ce1:	e9 1c 01 00 00       	jmp    c0019e02 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0019ce6:	83 ec 08             	sub    esp,0x8
c0019ce9:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0019cf0:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019cf4:	50                   	push   eax
c0019cf5:	e8 ad 69 fe ff       	call   c00006a7 <strcpy>
c0019cfa:	83 c4 10             	add    esp,0x10
c0019cfd:	83 ec 08             	sub    esp,0x8
c0019d00:	8d 44 24 20          	lea    eax,[esp+0x20]
c0019d04:	50                   	push   eax
c0019d05:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0019d0c:	e8 3b fc ff ff       	call   c001994c <FAT::fixFilepath(char*)>
c0019d11:	83 c4 10             	add    esp,0x10
c0019d14:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0019d1c:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0019d24:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019d29:	83 e0 01             	and    eax,0x1
c0019d2c:	74 08                	je     c0019d36 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c0019d2e:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c0019d36:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019d3b:	83 e0 02             	and    eax,0x2
c0019d3e:	74 08                	je     c0019d48 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c0019d40:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c0019d48:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019d4d:	83 e0 04             	and    eax,0x4
c0019d50:	74 08                	je     c0019d5a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c0019d52:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c0019d5a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019d5f:	83 e0 08             	and    eax,0x8
c0019d62:	74 08                	je     c0019d6c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c0019d64:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c0019d6c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019d71:	83 e0 01             	and    eax,0x1
c0019d74:	74 08                	je     c0019d7e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c0019d76:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c0019d7e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019d83:	83 e0 02             	and    eax,0x2
c0019d86:	74 08                	je     c0019d90 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c0019d88:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c0019d90:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019d95:	83 e0 04             	and    eax,0x4
c0019d98:	74 08                	je     c0019da2 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c0019d9a:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c0019da2:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019da7:	83 e0 08             	and    eax,0x8
c0019daa:	74 08                	je     c0019db4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c0019dac:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c0019db4:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019dbb:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c0019dc2:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c0019dca:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0019dd2:	83 ec 04             	sub    esp,0x4
c0019dd5:	52                   	push   edx
c0019dd6:	50                   	push   eax
c0019dd7:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019ddb:	50                   	push   eax
c0019ddc:	e8 c8 ca fe ff       	call   c00068a9 <f_chmod>
c0019de1:	83 c4 10             	add    esp,0x10
c0019de4:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0019deb:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0019df2:	85 c0                	test   eax,eax
c0019df4:	75 07                	jne    c0019dfd <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c0019df6:	b8 00 00 00 00       	mov    eax,0x0
c0019dfb:	eb 05                	jmp    c0019e02 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0019dfd:	b8 01 00 00 00       	mov    eax,0x1
c0019e02:	81 c4 2c 01 00 00    	add    esp,0x12c
c0019e08:	c3                   	ret    
c0019e09:	90                   	nop

c0019e0a <FAT::rename(char const*, char const*)>:
c0019e0a:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0019e10:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0019e18:	74 0a                	je     c0019e24 <FAT::rename(char const*, char const*)+0x1a>
c0019e1a:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0019e22:	75 0a                	jne    c0019e2e <FAT::rename(char const*, char const*)+0x24>
c0019e24:	b8 04 00 00 00       	mov    eax,0x4
c0019e29:	e9 98 00 00 00       	jmp    c0019ec6 <FAT::rename(char const*, char const*)+0xbc>
c0019e2e:	83 ec 08             	sub    esp,0x8
c0019e31:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019e38:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0019e3f:	50                   	push   eax
c0019e40:	e8 62 68 fe ff       	call   c00006a7 <strcpy>
c0019e45:	83 c4 10             	add    esp,0x10
c0019e48:	83 ec 08             	sub    esp,0x8
c0019e4b:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0019e52:	50                   	push   eax
c0019e53:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019e5a:	e8 ed fa ff ff       	call   c001994c <FAT::fixFilepath(char*)>
c0019e5f:	83 c4 10             	add    esp,0x10
c0019e62:	83 ec 08             	sub    esp,0x8
c0019e65:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0019e6c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019e70:	50                   	push   eax
c0019e71:	e8 31 68 fe ff       	call   c00006a7 <strcpy>
c0019e76:	83 c4 10             	add    esp,0x10
c0019e79:	83 ec 08             	sub    esp,0x8
c0019e7c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019e80:	50                   	push   eax
c0019e81:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019e88:	e8 bf fa ff ff       	call   c001994c <FAT::fixFilepath(char*)>
c0019e8d:	83 c4 10             	add    esp,0x10
c0019e90:	83 ec 08             	sub    esp,0x8
c0019e93:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019e97:	50                   	push   eax
c0019e98:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0019e9f:	50                   	push   eax
c0019ea0:	e8 11 c7 fe ff       	call   c00065b6 <f_rename>
c0019ea5:	83 c4 10             	add    esp,0x10
c0019ea8:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0019eaf:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0019eb6:	85 c0                	test   eax,eax
c0019eb8:	75 07                	jne    c0019ec1 <FAT::rename(char const*, char const*)+0xb7>
c0019eba:	b8 00 00 00 00       	mov    eax,0x0
c0019ebf:	eb 05                	jmp    c0019ec6 <FAT::rename(char const*, char const*)+0xbc>
c0019ec1:	b8 01 00 00 00       	mov    eax,0x1
c0019ec6:	81 c4 1c 02 00 00    	add    esp,0x21c
c0019ecc:	c3                   	ret    
c0019ecd:	90                   	nop

c0019ece <FAT::mkdir(char const*)>:
c0019ece:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019ed4:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019edc:	75 07                	jne    c0019ee5 <FAT::mkdir(char const*)+0x17>
c0019ede:	b8 04 00 00 00       	mov    eax,0x4
c0019ee3:	eb 5c                	jmp    c0019f41 <FAT::mkdir(char const*)+0x73>
c0019ee5:	83 ec 08             	sub    esp,0x8
c0019ee8:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019eef:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019ef3:	50                   	push   eax
c0019ef4:	e8 ae 67 fe ff       	call   c00006a7 <strcpy>
c0019ef9:	83 c4 10             	add    esp,0x10
c0019efc:	83 ec 08             	sub    esp,0x8
c0019eff:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019f03:	50                   	push   eax
c0019f04:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019f0b:	e8 3c fa ff ff       	call   c001994c <FAT::fixFilepath(char*)>
c0019f10:	83 c4 10             	add    esp,0x10
c0019f13:	83 ec 0c             	sub    esp,0xc
c0019f16:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019f1a:	50                   	push   eax
c0019f1b:	e8 6a c4 fe ff       	call   c000638a <f_mkdir>
c0019f20:	83 c4 10             	add    esp,0x10
c0019f23:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019f2a:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0019f31:	85 c0                	test   eax,eax
c0019f33:	75 07                	jne    c0019f3c <FAT::mkdir(char const*)+0x6e>
c0019f35:	b8 00 00 00 00       	mov    eax,0x0
c0019f3a:	eb 05                	jmp    c0019f41 <FAT::mkdir(char const*)+0x73>
c0019f3c:	b8 01 00 00 00       	mov    eax,0x1
c0019f41:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019f47:	c3                   	ret    

c0019f48 <FAT::exists(char const*)>:
c0019f48:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0019f4e:	83 ec 08             	sub    esp,0x8
c0019f51:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019f58:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019f5c:	50                   	push   eax
c0019f5d:	e8 45 67 fe ff       	call   c00006a7 <strcpy>
c0019f62:	83 c4 10             	add    esp,0x10
c0019f65:	83 ec 08             	sub    esp,0x8
c0019f68:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019f6c:	50                   	push   eax
c0019f6d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019f74:	e8 d3 f9 ff ff       	call   c001994c <FAT::fixFilepath(char*)>
c0019f79:	83 c4 10             	add    esp,0x10
c0019f7c:	83 ec 08             	sub    esp,0x8
c0019f7f:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c0019f86:	50                   	push   eax
c0019f87:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019f8b:	50                   	push   eax
c0019f8c:	e8 24 bf fe ff       	call   c0005eb5 <f_stat>
c0019f91:	83 c4 10             	add    esp,0x10
c0019f94:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0019f9b:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0019fa2:	85 c0                	test   eax,eax
c0019fa4:	75 04                	jne    c0019faa <FAT::exists(char const*)+0x62>
c0019fa6:	b0 01                	mov    al,0x1
c0019fa8:	eb 02                	jmp    c0019fac <FAT::exists(char const*)+0x64>
c0019faa:	b0 00                	mov    al,0x0
c0019fac:	81 c4 2c 02 00 00    	add    esp,0x22c
c0019fb2:	c3                   	ret    
c0019fb3:	90                   	nop

c0019fb4 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0019fb4:	b8 08 00 00 00       	mov    eax,0x8
c0019fb9:	c3                   	ret    

c0019fba <ISO9660::seek(void*, unsigned long long)>:
c0019fba:	53                   	push   ebx
c0019fbb:	b8 04 00 00 00       	mov    eax,0x4
c0019fc0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019fc4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019fc8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0019fcc:	85 d2                	test   edx,edx
c0019fce:	74 17                	je     c0019fe7 <ISO9660::seek(void*, unsigned long long)+0x2d>
c0019fd0:	89 c8                	mov    eax,ecx
c0019fd2:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c0019fd5:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c0019fd8:	b8 01 00 00 00       	mov    eax,0x1
c0019fdd:	73 08                	jae    c0019fe7 <ISO9660::seek(void*, unsigned long long)+0x2d>
c0019fdf:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c0019fe2:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c0019fe5:	31 c0                	xor    eax,eax
c0019fe7:	5b                   	pop    ebx
c0019fe8:	c3                   	ret    
c0019fe9:	90                   	nop

c0019fea <ISO9660::tell(void*, unsigned long long*)>:
c0019fea:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019fee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019ff2:	85 d2                	test   edx,edx
c0019ff4:	74 12                	je     c001a008 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0019ff6:	85 c0                	test   eax,eax
c0019ff8:	74 0e                	je     c001a008 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0019ffa:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0019ffd:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c001a000:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001a003:	89 10                	mov    DWORD PTR [eax],edx
c001a005:	31 c0                	xor    eax,eax
c001a007:	c3                   	ret    
c001a008:	b8 04 00 00 00       	mov    eax,0x4
c001a00d:	c3                   	ret    

c001a00e <ISO9660::getName()>:
c001a00e:	b8 cc 1f 02 c0       	mov    eax,0xc0021fcc
c001a013:	c3                   	ret    

c001a014 <ISO9660::stat(void*, unsigned long long*)>:
c001a014:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a018:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a01c:	85 d2                	test   edx,edx
c001a01e:	74 12                	je     c001a032 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001a020:	85 c0                	test   eax,eax
c001a022:	74 0e                	je     c001a032 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001a024:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001a027:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c001a02a:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001a02d:	89 10                	mov    DWORD PTR [eax],edx
c001a02f:	31 c0                	xor    eax,eax
c001a031:	c3                   	ret    
c001a032:	b8 04 00 00 00       	mov    eax,0x4
c001a037:	c3                   	ret    

c001a038 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001a038:	b8 01 00 00 00       	mov    eax,0x1
c001a03d:	c3                   	ret    

c001a03e <ISO9660::unlink(char const*)>:
c001a03e:	b8 01 00 00 00       	mov    eax,0x1
c001a043:	c3                   	ret    

c001a044 <ISO9660::write(void*, unsigned long, void*, int*)>:
c001a044:	b8 01 00 00 00       	mov    eax,0x1
c001a049:	c3                   	ret    

c001a04a <ISO9660::rename(char const*, char const*)>:
c001a04a:	b8 01 00 00 00       	mov    eax,0x1
c001a04f:	c3                   	ret    

c001a050 <ISO9660::mkdir(char const*)>:
c001a050:	b8 01 00 00 00       	mov    eax,0x1
c001a055:	c3                   	ret    

c001a056 <ISO9660::close(void*)>:
c001a056:	83 ec 0c             	sub    esp,0xc
c001a059:	b8 04 00 00 00       	mov    eax,0x4
c001a05e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a062:	85 d2                	test   edx,edx
c001a064:	74 0e                	je     c001a074 <ISO9660::close(void*)+0x1e>
c001a066:	83 ec 0c             	sub    esp,0xc
c001a069:	52                   	push   edx
c001a06a:	e8 bf 1b ff ff       	call   c000bc2e <free>
c001a06f:	83 c4 10             	add    esp,0x10
c001a072:	31 c0                	xor    eax,eax
c001a074:	83 c4 0c             	add    esp,0xc
c001a077:	c3                   	ret    

c001a078 <ISO9660::closeDir(void*)>:
c001a078:	83 ec 0c             	sub    esp,0xc
c001a07b:	b8 04 00 00 00       	mov    eax,0x4
c001a080:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a084:	85 d2                	test   edx,edx
c001a086:	74 0e                	je     c001a096 <ISO9660::closeDir(void*)+0x1e>
c001a088:	83 ec 0c             	sub    esp,0xc
c001a08b:	52                   	push   edx
c001a08c:	e8 9d 1b ff ff       	call   c000bc2e <free>
c001a091:	83 c4 10             	add    esp,0x10
c001a094:	31 c0                	xor    eax,eax
c001a096:	83 c4 0c             	add    esp,0xc
c001a099:	c3                   	ret    

c001a09a <ISO9660::~ISO9660()>:
c001a09a:	83 ec 0c             	sub    esp,0xc
c001a09d:	ba 20 20 02 c0       	mov    edx,0xc0022020
c001a0a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a0a6:	89 10                	mov    DWORD PTR [eax],edx
c001a0a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a0ac:	83 ec 0c             	sub    esp,0xc
c001a0af:	50                   	push   eax
c001a0b0:	e8 cf 4f ff ff       	call   c000f084 <Filesystem::~Filesystem()>
c001a0b5:	83 c4 10             	add    esp,0x10
c001a0b8:	90                   	nop
c001a0b9:	83 c4 0c             	add    esp,0xc
c001a0bc:	c3                   	ret    
c001a0bd:	90                   	nop

c001a0be <ISO9660::~ISO9660()>:
c001a0be:	83 ec 0c             	sub    esp,0xc
c001a0c1:	83 ec 0c             	sub    esp,0xc
c001a0c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a0c8:	e8 cd ff ff ff       	call   c001a09a <ISO9660::~ISO9660()>
c001a0cd:	83 c4 10             	add    esp,0x10
c001a0d0:	83 ec 08             	sub    esp,0x8
c001a0d3:	6a 08                	push   0x8
c001a0d5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a0d9:	e8 9d 4b ff ff       	call   c000ec7b <operator delete(void*, unsigned long)>
c001a0de:	83 c4 10             	add    esp,0x10
c001a0e1:	83 c4 0c             	add    esp,0xc
c001a0e4:	c3                   	ret    

c001a0e5 <__memmem(unsigned char*, int, unsigned char*, int)>:
c001a0e5:	55                   	push   ebp
c001a0e6:	31 c9                	xor    ecx,ecx
c001a0e8:	57                   	push   edi
c001a0e9:	56                   	push   esi
c001a0ea:	53                   	push   ebx
c001a0eb:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001a0ef:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a0f3:	89 eb                	mov    ebx,ebp
c001a0f5:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c001a0f9:	39 ce                	cmp    esi,ecx
c001a0fb:	7e 17                	jle    c001a114 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c001a0fd:	31 d2                	xor    edx,edx
c001a0ff:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c001a103:	7d 13                	jge    c001a118 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c001a105:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001a109:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001a10c:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c001a10f:	75 0d                	jne    c001a11e <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c001a111:	42                   	inc    edx
c001a112:	eb eb                	jmp    c001a0ff <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c001a114:	31 c0                	xor    eax,eax
c001a116:	eb 0a                	jmp    c001a122 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001a118:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c001a11c:	eb 04                	jmp    c001a122 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001a11e:	41                   	inc    ecx
c001a11f:	43                   	inc    ebx
c001a120:	eb d7                	jmp    c001a0f9 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c001a122:	5b                   	pop    ebx
c001a123:	5e                   	pop    esi
c001a124:	5f                   	pop    edi
c001a125:	5d                   	pop    ebp
c001a126:	c3                   	ret    

c001a127 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001a127:	56                   	push   esi
c001a128:	53                   	push   ebx
c001a129:	52                   	push   edx
c001a12a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a12e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001a132:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a136:	39 0d 80 49 02 c0    	cmp    DWORD PTR ds:0xc0024980,ecx
c001a13c:	75 08                	jne    c001a146 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c001a13e:	38 05 28 2e 02 c0    	cmp    BYTE PTR ds:0xc0022e28,al
c001a144:	74 2b                	je     c001a171 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x4a>
c001a146:	83 ec 0c             	sub    esp,0xc
c001a149:	a2 28 2e 02 c0       	mov    ds:0xc0022e28,al
c001a14e:	68 a0 49 02 c0       	push   0xc00249a0
c001a153:	0f be c0             	movsx  eax,al
c001a156:	6a 01                	push   0x1
c001a158:	89 0d 80 49 02 c0    	mov    DWORD PTR ds:0xc0024980,ecx
c001a15e:	31 db                	xor    ebx,ebx
c001a160:	53                   	push   ebx
c001a161:	51                   	push   ecx
c001a162:	ff 34 85 fc 38 02 c0 	push   DWORD PTR [eax*4-0x3ffdc704]
c001a169:	e8 70 7b ff ff       	call   c0011cde <LogicalDisk::read(unsigned long long, int, void*)>
c001a16e:	83 c4 20             	add    esp,0x20
c001a171:	c7 44 24 18 00 08 00 00 	mov    DWORD PTR [esp+0x18],0x800
c001a179:	c7 44 24 14 a0 49 02 c0 	mov    DWORD PTR [esp+0x14],0xc00249a0
c001a181:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001a185:	58                   	pop    eax
c001a186:	5b                   	pop    ebx
c001a187:	5e                   	pop    esi
c001a188:	e9 45 64 fe ff       	jmp    c00005d2 <memcpy>
c001a18d:	90                   	nop

c001a18e <ISO9660::tryMount(LogicalDisk*, int)>:
c001a18e:	81 ec 10 08 00 00    	sub    esp,0x810
c001a194:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c001a19b:	83 c0 41             	add    eax,0x41
c001a19e:	0f be c0             	movsx  eax,al
c001a1a1:	50                   	push   eax
c001a1a2:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a1a6:	50                   	push   eax
c001a1a7:	6a 10                	push   0x10
c001a1a9:	e8 79 ff ff ff       	call   c001a127 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a1ae:	83 c4 10             	add    esp,0x10
c001a1b1:	31 c0                	xor    eax,eax
c001a1b3:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001a1b8:	75 1d                	jne    c001a1d7 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001a1ba:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001a1bf:	75 16                	jne    c001a1d7 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001a1c1:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001a1c6:	75 0f                	jne    c001a1d7 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001a1c8:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001a1cd:	75 08                	jne    c001a1d7 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001a1cf:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001a1d4:	0f 94 c0             	sete   al
c001a1d7:	81 c4 0c 08 00 00    	add    esp,0x80c
c001a1dd:	c3                   	ret    

c001a1de <ISO9660::read(void*, unsigned long, void*, int*)>:
c001a1de:	55                   	push   ebp
c001a1df:	57                   	push   edi
c001a1e0:	56                   	push   esi
c001a1e1:	53                   	push   ebx
c001a1e2:	81 ec 34 08 00 00    	sub    esp,0x834
c001a1e8:	8b ac 24 50 08 00 00 	mov    ebp,DWORD PTR [esp+0x850]
c001a1ef:	55                   	push   ebp
c001a1f0:	68 e7 1f 02 c0       	push   0xc0021fe7
c001a1f5:	e8 61 4b ff ff       	call   c000ed5b <Dbg::kprintf(char const*, ...)>
c001a1fa:	83 c4 10             	add    esp,0x10
c001a1fd:	83 bc 24 44 08 00 00 00 	cmp    DWORD PTR [esp+0x844],0x0
c001a205:	0f 84 06 02 00 00    	je     c001a411 <ISO9660::read(void*, unsigned long, void*, int*)+0x233>
c001a20b:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c001a213:	0f 84 f8 01 00 00    	je     c001a411 <ISO9660::read(void*, unsigned long, void*, int*)+0x233>
c001a219:	8b bc 24 44 08 00 00 	mov    edi,DWORD PTR [esp+0x844]
c001a220:	b8 01 00 00 00       	mov    eax,0x1
c001a225:	80 7f 18 00          	cmp    BYTE PTR [edi+0x18],0x0
c001a229:	0f 85 e7 01 00 00    	jne    c001a416 <ISO9660::read(void*, unsigned long, void*, int*)+0x238>
c001a22f:	8b 77 10             	mov    esi,DWORD PTR [edi+0x10]
c001a232:	31 d2                	xor    edx,edx
c001a234:	8b 7f 14             	mov    edi,DWORD PTR [edi+0x14]
c001a237:	89 e9                	mov    ecx,ebp
c001a239:	89 d3                	mov    ebx,edx
c001a23b:	01 f1                	add    ecx,esi
c001a23d:	11 fb                	adc    ebx,edi
c001a23f:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001a243:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001a247:	8b 9c 24 44 08 00 00 	mov    ebx,DWORD PTR [esp+0x844]
c001a24e:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c001a251:	8b 5b 0c             	mov    ebx,DWORD PTR [ebx+0xc]
c001a254:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001a258:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001a25c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001a260:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001a264:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001a268:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c001a26c:	72 19                	jb     c001a287 <ISO9660::read(void*, unsigned long, void*, int*)+0xa9>
c001a26e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001a272:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a276:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a27a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a27d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a281:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a285:	eb 13                	jmp    c001a29a <ISO9660::read(void*, unsigned long, void*, int*)+0xbc>
c001a287:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a28b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a28f:	29 f0                	sub    eax,esi
c001a291:	19 fa                	sbb    edx,edi
c001a293:	89 04 24             	mov    DWORD PTR [esp],eax
c001a296:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001a29a:	8b 84 24 44 08 00 00 	mov    eax,DWORD PTR [esp+0x844]
c001a2a1:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001a2a4:	8b 00                	mov    eax,DWORD PTR [eax]
c001a2a6:	53                   	push   ebx
c001a2a7:	0f a4 c2 0b          	shld   edx,eax,0xb
c001a2ab:	c1 e0 0b             	shl    eax,0xb
c001a2ae:	01 c6                	add    esi,eax
c001a2b0:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001a2b7:	11 d7                	adc    edi,edx
c001a2b9:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001a2bd:	89 fa                	mov    edx,edi
c001a2bf:	50                   	push   eax
c001a2c0:	8d 44 24 28          	lea    eax,[esp+0x28]
c001a2c4:	50                   	push   eax
c001a2c5:	89 f0                	mov    eax,esi
c001a2c7:	0f ac d0 0b          	shrd   eax,edx,0xb
c001a2cb:	50                   	push   eax
c001a2cc:	e8 56 fe ff ff       	call   c001a127 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a2d1:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001a2d8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a2dc:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001a2df:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c001a2e3:	81 e2 ff 07 00 00    	and    edx,0x7ff
c001a2e9:	83 c4 10             	add    esp,0x10
c001a2ec:	b8 00 08 00 00       	mov    eax,0x800
c001a2f1:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c001a2f5:	29 d0                	sub    eax,edx
c001a2f7:	39 c1                	cmp    ecx,eax
c001a2f9:	83 db 00             	sbb    ebx,0x0
c001a2fc:	7d 19                	jge    c001a317 <ISO9660::read(void*, unsigned long, void*, int*)+0x139>
c001a2fe:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001a303:	75 16                	jne    c001a31b <ISO9660::read(void*, unsigned long, void*, int*)+0x13d>
c001a305:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001a30c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001a312:	e9 f6 00 00 00       	jmp    c001a40d <ISO9660::read(void*, unsigned long, void*, int*)+0x22f>
c001a317:	89 c5                	mov    ebp,eax
c001a319:	eb 03                	jmp    c001a31e <ISO9660::read(void*, unsigned long, void*, int*)+0x140>
c001a31b:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c001a31e:	51                   	push   ecx
c001a31f:	55                   	push   ebp
c001a320:	8d 44 14 28          	lea    eax,[esp+edx*1+0x28]
c001a324:	50                   	push   eax
c001a325:	ff b4 24 58 08 00 00 	push   DWORD PTR [esp+0x858]
c001a32c:	e8 a1 62 fe ff       	call   c00005d2 <memcpy>
c001a331:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a335:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a339:	8b 84 24 5c 08 00 00 	mov    eax,DWORD PTR [esp+0x85c]
c001a340:	01 e8                	add    eax,ebp
c001a342:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a346:	89 e8                	mov    eax,ebp
c001a348:	99                   	cdq    
c001a349:	01 ee                	add    esi,ebp
c001a34b:	11 d7                	adc    edi,edx
c001a34d:	29 e9                	sub    ecx,ebp
c001a34f:	19 d3                	sbb    ebx,edx
c001a351:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001a355:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001a359:	83 c4 10             	add    esp,0x10
c001a35c:	b8 ff 07 00 00       	mov    eax,0x7ff
c001a361:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c001a364:	b8 00 00 00 00       	mov    eax,0x0
c001a369:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001a36d:	7d 3f                	jge    c001a3ae <ISO9660::read(void*, unsigned long, void*, int*)+0x1d0>
c001a36f:	52                   	push   edx
c001a370:	89 fa                	mov    edx,edi
c001a372:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001a379:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001a37d:	50                   	push   eax
c001a37e:	89 f0                	mov    eax,esi
c001a380:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a384:	0f ac d0 0b          	shrd   eax,edx,0xb
c001a388:	50                   	push   eax
c001a389:	e8 99 fd ff ff       	call   c001a127 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a38e:	81 c6 00 08 00 00    	add    esi,0x800
c001a394:	83 d7 00             	adc    edi,0x0
c001a397:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c001a39f:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c001a3a7:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c001a3ac:	eb ab                	jmp    c001a359 <ISO9660::read(void*, unsigned long, void*, int*)+0x17b>
c001a3ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a3b2:	0b 04 24             	or     eax,DWORD PTR [esp]
c001a3b5:	74 34                	je     c001a3eb <ISO9660::read(void*, unsigned long, void*, int*)+0x20d>
c001a3b7:	89 fa                	mov    edx,edi
c001a3b9:	50                   	push   eax
c001a3ba:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001a3c1:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001a3c5:	50                   	push   eax
c001a3c6:	89 f0                	mov    eax,esi
c001a3c8:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001a3cc:	0f ac d0 0b          	shrd   eax,edx,0xb
c001a3d0:	55                   	push   ebp
c001a3d1:	50                   	push   eax
c001a3d2:	e8 50 fd ff ff       	call   c001a127 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a3d7:	83 c4 0c             	add    esp,0xc
c001a3da:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c001a3de:	55                   	push   ebp
c001a3df:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a3e3:	e8 ea 61 fe ff       	call   c00005d2 <memcpy>
c001a3e8:	83 c4 10             	add    esp,0x10
c001a3eb:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001a3f2:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001a3f6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a3fa:	89 38                	mov    DWORD PTR [eax],edi
c001a3fc:	8b bc 24 44 08 00 00 	mov    edi,DWORD PTR [esp+0x844]
c001a403:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a407:	89 57 14             	mov    DWORD PTR [edi+0x14],edx
c001a40a:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001a40d:	31 c0                	xor    eax,eax
c001a40f:	eb 05                	jmp    c001a416 <ISO9660::read(void*, unsigned long, void*, int*)+0x238>
c001a411:	b8 04 00 00 00       	mov    eax,0x4
c001a416:	81 c4 2c 08 00 00    	add    esp,0x82c
c001a41c:	5b                   	pop    ebx
c001a41d:	5e                   	pop    esi
c001a41e:	5f                   	pop    edi
c001a41f:	5d                   	pop    ebp
c001a420:	c3                   	ret    
c001a421:	90                   	nop

c001a422 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001a422:	55                   	push   ebp
c001a423:	57                   	push   edi
c001a424:	56                   	push   esi
c001a425:	53                   	push   ebx
c001a426:	81 ec 5c 09 00 00    	sub    esp,0x95c
c001a42c:	8b b4 24 74 09 00 00 	mov    esi,DWORD PTR [esp+0x974]
c001a433:	85 f6                	test   esi,esi
c001a435:	0f 84 64 02 00 00    	je     c001a69f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c001a43b:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c001a443:	0f 84 56 02 00 00    	je     c001a69f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c001a449:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c001a44c:	0b 46 08             	or     eax,DWORD PTR [esi+0x8]
c001a44f:	75 0a                	jne    c001a45b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c001a451:	b8 07 00 00 00       	mov    eax,0x7
c001a456:	e9 49 02 00 00       	jmp    c001a6a4 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c001a45b:	50                   	push   eax
c001a45c:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c001a460:	50                   	push   eax
c001a461:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001a468:	53                   	push   ebx
c001a469:	8b 06                	mov    eax,DWORD PTR [esi]
c001a46b:	c1 e0 0b             	shl    eax,0xb
c001a46e:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c001a471:	c1 e8 0b             	shr    eax,0xb
c001a474:	50                   	push   eax
c001a475:	e8 ad fc ff ff       	call   c001a127 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a47a:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001a47d:	83 c4 10             	add    esp,0x10
c001a480:	89 c1                	mov    ecx,eax
c001a482:	8b 56 14             	mov    edx,DWORD PTR [esi+0x14]
c001a485:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001a48b:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c001a48e:	84 db                	test   bl,bl
c001a490:	0f 85 90 00 00 00    	jne    c001a526 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x104>
c001a496:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c001a49c:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001a4a2:	29 c7                	sub    edi,eax
c001a4a4:	89 fb                	mov    ebx,edi
c001a4a6:	c1 fb 1f             	sar    ebx,0x1f
c001a4a9:	01 f8                	add    eax,edi
c001a4ab:	11 da                	adc    edx,ebx
c001a4ad:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a4b1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a4b5:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c001a4b8:	89 56 14             	mov    DWORD PTR [esi+0x14],edx
c001a4bb:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c001a4be:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001a4c1:	89 04 24             	mov    DWORD PTR [esp],eax
c001a4c4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001a4c8:	89 d8                	mov    eax,ebx
c001a4ca:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001a4cd:	ba 00 00 00 00       	mov    edx,0x0
c001a4d2:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001a4d6:	b8 00 00 00 00       	mov    eax,0x0
c001a4db:	73 0b                	jae    c001a4e8 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c001a4dd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001a4e0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a4e4:	29 f8                	sub    eax,edi
c001a4e6:	19 da                	sbb    edx,ebx
c001a4e8:	89 d3                	mov    ebx,edx
c001a4ea:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c001a4ed:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c001a4f0:	09 c3                	or     ebx,eax
c001a4f2:	0f 84 59 ff ff ff    	je     c001a451 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c001a4f8:	55                   	push   ebp
c001a4f9:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c001a4fd:	50                   	push   eax
c001a4fe:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001a505:	53                   	push   ebx
c001a506:	8b 06                	mov    eax,DWORD PTR [esi]
c001a508:	c1 e0 0b             	shl    eax,0xb
c001a50b:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c001a50f:	c1 e8 0b             	shr    eax,0xb
c001a512:	50                   	push   eax
c001a513:	e8 0f fc ff ff       	call   c001a127 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a518:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001a51b:	83 c4 10             	add    esp,0x10
c001a51e:	25 ff 07 00 00       	and    eax,0x7ff
c001a523:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c001a526:	57                   	push   edi
c001a527:	6a 28                	push   0x28
c001a529:	6a 00                	push   0x0
c001a52b:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a52f:	50                   	push   eax
c001a530:	e8 d3 60 fe ff       	call   c0000608 <memset>
c001a535:	31 d2                	xor    edx,edx
c001a537:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c001a53a:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001a540:	89 f8                	mov    eax,edi
c001a542:	83 c0 21             	add    eax,0x21
c001a545:	83 d2 00             	adc    edx,0x0
c001a548:	89 c7                	mov    edi,eax
c001a54a:	89 d5                	mov    ebp,edx
c001a54c:	83 c4 10             	add    esp,0x10
c001a54f:	31 c9                	xor    ecx,ecx
c001a551:	8a 84 3c 50 01 00 00 	mov    al,BYTE PTR [esp+edi*1+0x150]
c001a558:	83 f9 28             	cmp    ecx,0x28
c001a55b:	88 04 24             	mov    BYTE PTR [esp],al
c001a55e:	0f 94 c2             	sete   dl
c001a561:	88 d0                	mov    al,dl
c001a563:	ba ff 07 00 00       	mov    edx,0x7ff
c001a568:	39 fa                	cmp    edx,edi
c001a56a:	ba 00 00 00 00       	mov    edx,0x0
c001a56f:	19 ea                	sbb    edx,ebp
c001a571:	0f 92 c2             	setb   dl
c001a574:	09 c2                	or     edx,eax
c001a576:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001a57a:	0f 94 c0             	sete   al
c001a57d:	08 d0                	or     al,dl
c001a57f:	75 16                	jne    c001a597 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c001a581:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c001a585:	74 10                	je     c001a597 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c001a587:	8a 04 24             	mov    al,BYTE PTR [esp]
c001a58a:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c001a58e:	41                   	inc    ecx
c001a58f:	83 c7 01             	add    edi,0x1
c001a592:	83 d5 00             	adc    ebp,0x0
c001a595:	eb ba                	jmp    c001a551 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x12f>
c001a597:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c001a59e:	83 ec 0c             	sub    esp,0xc
c001a5a1:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001a5a5:	57                   	push   edi
c001a5a6:	e8 7a 60 fe ff       	call   c0000625 <strlen>
c001a5ab:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c001a5b3:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001a5b7:	8d 8c 24 60 09 00 00 	lea    ecx,[esp+0x960]
c001a5be:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001a5c1:	5a                   	pop    edx
c001a5c2:	25 ff 07 00 00       	and    eax,0x7ff
c001a5c7:	01 c8                	add    eax,ecx
c001a5c9:	59                   	pop    ecx
c001a5ca:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c001a5d0:	83 e0 02             	and    eax,0x2
c001a5d3:	3c 01                	cmp    al,0x1
c001a5d5:	19 c0                	sbb    eax,eax
c001a5d7:	83 c0 02             	add    eax,0x2
c001a5da:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001a5de:	57                   	push   edi
c001a5df:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001a5e3:	50                   	push   eax
c001a5e4:	e8 be 60 fe ff       	call   c00006a7 <strcpy>
c001a5e9:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c001a5ed:	83 c4 10             	add    esp,0x10
c001a5f0:	84 c0                	test   al,al
c001a5f2:	75 21                	jne    c001a615 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1f3>
c001a5f4:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c001a5fc:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001a604:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001a60c:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c001a613:	eb 28                	jmp    c001a63d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c001a615:	fe c8                	dec    al
c001a617:	75 24                	jne    c001a63d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c001a619:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c001a621:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001a629:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001a631:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c001a638:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c001a63d:	0f b6 fb             	movzx  edi,bl
c001a640:	31 db                	xor    ebx,ebx
c001a642:	50                   	push   eax
c001a643:	ff b4 24 7c 09 00 00 	push   DWORD PTR [esp+0x97c]
c001a64a:	8d 44 24 48          	lea    eax,[esp+0x48]
c001a64e:	50                   	push   eax
c001a64f:	ff b4 24 88 09 00 00 	push   DWORD PTR [esp+0x988]
c001a656:	e8 77 5f fe ff       	call   c00005d2 <memcpy>
c001a65b:	8b 84 24 90 09 00 00 	mov    eax,DWORD PTR [esp+0x990]
c001a662:	89 f9                	mov    ecx,edi
c001a664:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001a66a:	01 7e 10             	add    DWORD PTR [esi+0x10],edi
c001a66d:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c001a670:	11 5e 14             	adc    DWORD PTR [esi+0x14],ebx
c001a673:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001a676:	83 c4 10             	add    esp,0x10
c001a679:	39 c7                	cmp    edi,eax
c001a67b:	89 df                	mov    edi,ebx
c001a67d:	19 d7                	sbb    edi,edx
c001a67f:	72 10                	jb     c001a691 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c001a681:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c001a688:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c001a68f:	eb 0a                	jmp    c001a69b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x279>
c001a691:	29 c8                	sub    eax,ecx
c001a693:	19 da                	sbb    edx,ebx
c001a695:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c001a698:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c001a69b:	31 c0                	xor    eax,eax
c001a69d:	eb 05                	jmp    c001a6a4 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c001a69f:	b8 04 00 00 00       	mov    eax,0x4
c001a6a4:	81 c4 5c 09 00 00    	add    esp,0x95c
c001a6aa:	5b                   	pop    ebx
c001a6ab:	5e                   	pop    esi
c001a6ac:	5f                   	pop    edi
c001a6ad:	5d                   	pop    ebp
c001a6ae:	c3                   	ret    

c001a6af <readRoot(unsigned int*, unsigned int*, char)>:
c001a6af:	81 ec 40 08 00 00    	sub    esp,0x840
c001a6b5:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c001a6bd:	50                   	push   eax
c001a6be:	8d 44 24 38          	lea    eax,[esp+0x38]
c001a6c2:	50                   	push   eax
c001a6c3:	6a 10                	push   0x10
c001a6c5:	e8 5d fa ff ff       	call   c001a127 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a6ca:	83 c4 0c             	add    esp,0xc
c001a6cd:	6a 22                	push   0x22
c001a6cf:	8d 84 24 d4 00 00 00 	lea    eax,[esp+0xd4]
c001a6d6:	50                   	push   eax
c001a6d7:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001a6db:	50                   	push   eax
c001a6dc:	e8 f1 5e fe ff       	call   c00005d2 <memcpy>
c001a6e1:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001a6e8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001a6ec:	89 10                	mov    DWORD PTR [eax],edx
c001a6ee:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001a6f5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001a6f9:	89 10                	mov    DWORD PTR [eax],edx
c001a6fb:	b0 01                	mov    al,0x1
c001a6fd:	81 c4 4c 08 00 00    	add    esp,0x84c
c001a703:	c3                   	ret    

c001a704 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c001a704:	55                   	push   ebp
c001a705:	57                   	push   edi
c001a706:	56                   	push   esi
c001a707:	53                   	push   ebx
c001a708:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a70e:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001a715:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c001a71c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a720:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c001a724:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001a728:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a72c:	75 03                	jne    c001a731 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001a72e:	83 c3 02             	add    ebx,0x2
c001a731:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c001a734:	75 03                	jne    c001a739 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c001a736:	43                   	inc    ebx
c001a737:	eb f8                	jmp    c001a731 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001a739:	51                   	push   ecx
c001a73a:	68 00 01 00 00       	push   0x100
c001a73f:	6a 00                	push   0x0
c001a741:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a745:	50                   	push   eax
c001a746:	e8 bd 5e fe ff       	call   c0000608 <memset>
c001a74b:	83 c4 10             	add    esp,0x10
c001a74e:	31 d2                	xor    edx,edx
c001a750:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001a753:	84 c0                	test   al,al
c001a755:	74 21                	je     c001a778 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c001a757:	3c 2f                	cmp    al,0x2f
c001a759:	75 0b                	jne    c001a766 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c001a75b:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c001a75f:	bd 01 00 00 00       	mov    ebp,0x1
c001a764:	eb 14                	jmp    c001a77a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c001a766:	8d 48 9f             	lea    ecx,[eax-0x61]
c001a769:	80 f9 19             	cmp    cl,0x19
c001a76c:	77 03                	ja     c001a771 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c001a76e:	83 e8 20             	sub    eax,0x20
c001a771:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c001a775:	42                   	inc    edx
c001a776:	eb d8                	jmp    c001a750 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c001a778:	31 ed                	xor    ebp,ebp
c001a77a:	83 ec 0c             	sub    esp,0xc
c001a77d:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001a784:	e8 95 14 ff ff       	call   c000bc1e <malloc>
c001a789:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001a790:	89 c6                	mov    esi,eax
c001a792:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c001a798:	c1 ef 0b             	shr    edi,0xb
c001a79b:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c001a7a2:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c001a7a6:	83 c4 10             	add    esp,0x10
c001a7a9:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c001a7ae:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001a7b2:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c001a7b9:	74 28                	je     c001a7e3 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c001a7bb:	52                   	push   edx
c001a7bc:	57                   	push   edi
c001a7bd:	50                   	push   eax
c001a7be:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a7c2:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001a7c9:	e8 59 f9 ff ff       	call   c001a127 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a7ce:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a7d2:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c001a7d9:	05 00 08 00 00       	add    eax,0x800
c001a7de:	83 c4 10             	add    esp,0x10
c001a7e1:	eb cb                	jmp    c001a7ae <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c001a7e3:	83 ec 0c             	sub    esp,0xc
c001a7e6:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001a7ea:	57                   	push   edi
c001a7eb:	e8 35 5e fe ff       	call   c0000625 <strlen>
c001a7f0:	50                   	push   eax
c001a7f1:	57                   	push   edi
c001a7f2:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c001a7f9:	56                   	push   esi
c001a7fa:	e8 e6 f8 ff ff       	call   c001a0e5 <__memmem(unsigned char*, int, unsigned char*, int)>
c001a7ff:	83 c4 20             	add    esp,0x20
c001a802:	85 c0                	test   eax,eax
c001a804:	75 13                	jne    c001a819 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c001a806:	83 ec 0c             	sub    esp,0xc
c001a809:	56                   	push   esi
c001a80a:	e8 1f 14 ff ff       	call   c000bc2e <free>
c001a80f:	83 c4 10             	add    esp,0x10
c001a812:	31 c0                	xor    eax,eax
c001a814:	e9 b3 00 00 00       	jmp    c001a8cc <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001a819:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c001a81d:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c001a821:	c1 e7 08             	shl    edi,0x8
c001a824:	c1 e2 10             	shl    edx,0x10
c001a827:	09 d7                	or     edi,edx
c001a829:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c001a82d:	09 d7                	or     edi,edx
c001a82f:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c001a833:	c1 e2 18             	shl    edx,0x18
c001a836:	09 d7                	or     edi,edx
c001a838:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c001a83c:	89 d1                	mov    ecx,edx
c001a83e:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c001a842:	c1 e1 08             	shl    ecx,0x8
c001a845:	c1 e2 10             	shl    edx,0x10
c001a848:	09 ca                	or     edx,ecx
c001a84a:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c001a84e:	09 ca                	or     edx,ecx
c001a850:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c001a854:	c1 e1 18             	shl    ecx,0x18
c001a857:	09 ca                	or     edx,ecx
c001a859:	89 e9                	mov    ecx,ebp
c001a85b:	84 c9                	test   cl,cl
c001a85d:	74 3c                	je     c001a89b <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c001a85f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001a863:	83 ec 0c             	sub    esp,0xc
c001a866:	56                   	push   esi
c001a867:	e8 c2 13 ff ff       	call   c000bc2e <free>
c001a86c:	83 c4 0c             	add    esp,0xc
c001a86f:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001a876:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001a87b:	50                   	push   eax
c001a87c:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001a883:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001a88a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a88e:	52                   	push   edx
c001a88f:	57                   	push   edi
c001a890:	53                   	push   ebx
c001a891:	e8 6e fe ff ff       	call   c001a704 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001a896:	83 c4 20             	add    esp,0x20
c001a899:	eb 31                	jmp    c001a8cc <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001a89b:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c001a89e:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c001a8a5:	d0 e8                	shr    al,1
c001a8a7:	89 3b                	mov    DWORD PTR [ebx],edi
c001a8a9:	83 e0 01             	and    eax,0x1
c001a8ac:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001a8b3:	83 ec 0c             	sub    esp,0xc
c001a8b6:	89 13                	mov    DWORD PTR [ebx],edx
c001a8b8:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c001a8bf:	89 03                	mov    DWORD PTR [ebx],eax
c001a8c1:	56                   	push   esi
c001a8c2:	e8 67 13 ff ff       	call   c000bc2e <free>
c001a8c7:	83 c4 10             	add    esp,0x10
c001a8ca:	b0 01                	mov    al,0x1
c001a8cc:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a8d2:	5b                   	pop    ebx
c001a8d3:	5e                   	pop    esi
c001a8d4:	5f                   	pop    edi
c001a8d5:	5d                   	pop    ebp
c001a8d6:	c3                   	ret    

c001a8d7 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c001a8d7:	55                   	push   ebp
c001a8d8:	57                   	push   edi
c001a8d9:	56                   	push   esi
c001a8da:	53                   	push   ebx
c001a8db:	83 ec 20             	sub    esp,0x20
c001a8de:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001a8e2:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001a8e6:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001a8ea:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a8f2:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001a8fa:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c001a8ff:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c001a905:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c001a90b:	57                   	push   edi
c001a90c:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a910:	50                   	push   eax
c001a911:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a915:	50                   	push   eax
c001a916:	e8 94 fd ff ff       	call   c001a6af <readRoot(unsigned int*, unsigned int*, char)>
c001a91b:	5a                   	pop    edx
c001a91c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a920:	e8 00 5d fe ff       	call   c0000625 <strlen>
c001a925:	83 c4 10             	add    esp,0x10
c001a928:	83 f8 03             	cmp    eax,0x3
c001a92b:	77 17                	ja     c001a944 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c001a92d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a931:	89 03                	mov    DWORD PTR [ebx],eax
c001a933:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a937:	89 06                	mov    DWORD PTR [esi],eax
c001a939:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c001a940:	b0 01                	mov    al,0x1
c001a942:	eb 19                	jmp    c001a95d <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c001a944:	50                   	push   eax
c001a945:	55                   	push   ebp
c001a946:	57                   	push   edi
c001a947:	56                   	push   esi
c001a948:	53                   	push   ebx
c001a949:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a94d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a951:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001a955:	e8 aa fd ff ff       	call   c001a704 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001a95a:	83 c4 20             	add    esp,0x20
c001a95d:	83 c4 1c             	add    esp,0x1c
c001a960:	5b                   	pop    ebx
c001a961:	5e                   	pop    esi
c001a962:	5f                   	pop    edi
c001a963:	5d                   	pop    ebp
c001a964:	c3                   	ret    
c001a965:	90                   	nop

c001a966 <ISO9660::open(char const*, void**, FileOpenMode)>:
c001a966:	57                   	push   edi
c001a967:	56                   	push   esi
c001a968:	53                   	push   ebx
c001a969:	83 ec 10             	sub    esp,0x10
c001a96c:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001a970:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001a974:	85 ff                	test   edi,edi
c001a976:	74 7b                	je     c001a9f3 <ISO9660::open(char const*, void**, FileOpenMode)+0x8d>
c001a978:	85 f6                	test   esi,esi
c001a97a:	74 77                	je     c001a9f3 <ISO9660::open(char const*, void**, FileOpenMode)+0x8d>
c001a97c:	83 ec 0c             	sub    esp,0xc
c001a97f:	6a 1c                	push   0x1c
c001a981:	e8 98 12 ff ff       	call   c000bc1e <malloc>
c001a986:	89 07                	mov    DWORD PTR [edi],eax
c001a988:	89 c3                	mov    ebx,eax
c001a98a:	58                   	pop    eax
c001a98b:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a98f:	50                   	push   eax
c001a990:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001a993:	50                   	push   eax
c001a994:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a998:	50                   	push   eax
c001a999:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a99d:	50                   	push   eax
c001a99e:	56                   	push   esi
c001a99f:	e8 33 ff ff ff       	call   c001a8d7 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001a9a4:	83 c4 20             	add    esp,0x20
c001a9a7:	84 c0                	test   al,al
c001a9a9:	74 07                	je     c001a9b2 <ISO9660::open(char const*, void**, FileOpenMode)+0x4c>
c001a9ab:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001a9b0:	74 0b                	je     c001a9bd <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001a9b2:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001a9b6:	b8 01 00 00 00       	mov    eax,0x1
c001a9bb:	eb 3b                	jmp    c001a9f8 <ISO9660::open(char const*, void**, FileOpenMode)+0x92>
c001a9bd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a9c1:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001a9c5:	89 03                	mov    DWORD PTR [ebx],eax
c001a9c7:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001a9ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a9d2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001a9d9:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001a9e0:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001a9e3:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001a9ea:	8a 06                	mov    al,BYTE PTR [esi]
c001a9ec:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001a9ef:	31 c0                	xor    eax,eax
c001a9f1:	eb 05                	jmp    c001a9f8 <ISO9660::open(char const*, void**, FileOpenMode)+0x92>
c001a9f3:	b8 04 00 00 00       	mov    eax,0x4
c001a9f8:	83 c4 10             	add    esp,0x10
c001a9fb:	5b                   	pop    ebx
c001a9fc:	5e                   	pop    esi
c001a9fd:	5f                   	pop    edi
c001a9fe:	c3                   	ret    
c001a9ff:	90                   	nop

c001aa00 <ISO9660::exists(char const*)>:
c001aa00:	83 ec 28             	sub    esp,0x28
c001aa03:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001aa07:	8d 54 24 18          	lea    edx,[esp+0x18]
c001aa0b:	52                   	push   edx
c001aa0c:	0f be 10             	movsx  edx,BYTE PTR [eax]
c001aa0f:	52                   	push   edx
c001aa10:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001aa14:	52                   	push   edx
c001aa15:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001aa19:	52                   	push   edx
c001aa1a:	50                   	push   eax
c001aa1b:	e8 b7 fe ff ff       	call   c001a8d7 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001aa20:	83 c4 3c             	add    esp,0x3c
c001aa23:	c3                   	ret    

c001aa24 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001aa24:	56                   	push   esi
c001aa25:	53                   	push   ebx
c001aa26:	83 ec 14             	sub    esp,0x14
c001aa29:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001aa2d:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001aa31:	85 db                	test   ebx,ebx
c001aa33:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001aa37:	0f 94 c2             	sete   dl
c001aa3a:	85 f6                	test   esi,esi
c001aa3c:	0f 94 c0             	sete   al
c001aa3f:	08 c2                	or     dl,al
c001aa41:	75 68                	jne    c001aaab <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001aa43:	85 c9                	test   ecx,ecx
c001aa45:	74 64                	je     c001aaab <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001aa47:	83 ec 0c             	sub    esp,0xc
c001aa4a:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001aa4d:	8d 44 24 18          	lea    eax,[esp+0x18]
c001aa51:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001aa57:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001aa5e:	50                   	push   eax
c001aa5f:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c001aa62:	50                   	push   eax
c001aa63:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001aa67:	50                   	push   eax
c001aa68:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001aa6c:	50                   	push   eax
c001aa6d:	51                   	push   ecx
c001aa6e:	e8 64 fe ff ff       	call   c001a8d7 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001aa73:	83 c4 20             	add    esp,0x20
c001aa76:	ba 01 00 00 00       	mov    edx,0x1
c001aa7b:	84 c0                	test   al,al
c001aa7d:	74 31                	je     c001aab0 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001aa7f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001aa83:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001aa8a:	89 03                	mov    DWORD PTR [ebx],eax
c001aa8c:	ba 00 00 00 00       	mov    edx,0x0
c001aa91:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001aa95:	85 c0                	test   eax,eax
c001aa97:	0f 95 06             	setne  BYTE PTR [esi]
c001aa9a:	74 14                	je     c001aab0 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001aa9c:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001aaa2:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001aaa9:	eb 05                	jmp    c001aab0 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001aaab:	ba 04 00 00 00       	mov    edx,0x4
c001aab0:	83 c4 14             	add    esp,0x14
c001aab3:	89 d0                	mov    eax,edx
c001aab5:	5b                   	pop    ebx
c001aab6:	5e                   	pop    esi
c001aab7:	c3                   	ret    

c001aab8 <ISO9660::openDir(char const*, void**)>:
c001aab8:	57                   	push   edi
c001aab9:	56                   	push   esi
c001aaba:	53                   	push   ebx
c001aabb:	83 ec 10             	sub    esp,0x10
c001aabe:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001aac2:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001aac6:	85 ff                	test   edi,edi
c001aac8:	0f 84 95 00 00 00    	je     c001ab63 <ISO9660::openDir(char const*, void**)+0xab>
c001aace:	85 f6                	test   esi,esi
c001aad0:	0f 84 8d 00 00 00    	je     c001ab63 <ISO9660::openDir(char const*, void**)+0xab>
c001aad6:	83 ec 0c             	sub    esp,0xc
c001aad9:	6a 1c                	push   0x1c
c001aadb:	e8 3e 11 ff ff       	call   c000bc1e <malloc>
c001aae0:	89 07                	mov    DWORD PTR [edi],eax
c001aae2:	89 c3                	mov    ebx,eax
c001aae4:	59                   	pop    ecx
c001aae5:	8d 44 24 18          	lea    eax,[esp+0x18]
c001aae9:	50                   	push   eax
c001aaea:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001aaed:	50                   	push   eax
c001aaee:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001aaf2:	50                   	push   eax
c001aaf3:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001aaf7:	50                   	push   eax
c001aaf8:	56                   	push   esi
c001aaf9:	e8 d9 fd ff ff       	call   c001a8d7 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001aafe:	83 c4 20             	add    esp,0x20
c001ab01:	84 c0                	test   al,al
c001ab03:	74 07                	je     c001ab0c <ISO9660::openDir(char const*, void**)+0x54>
c001ab05:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001ab0a:	75 21                	jne    c001ab2d <ISO9660::openDir(char const*, void**)+0x75>
c001ab0c:	0f b6 c0             	movzx  eax,al
c001ab0f:	52                   	push   edx
c001ab10:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001ab14:	50                   	push   eax
c001ab15:	68 fa 1f 02 c0       	push   0xc0021ffa
c001ab1a:	e8 3c 42 ff ff       	call   c000ed5b <Dbg::kprintf(char const*, ...)>
c001ab1f:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001ab23:	83 c4 10             	add    esp,0x10
c001ab26:	b8 01 00 00 00       	mov    eax,0x1
c001ab2b:	eb 3b                	jmp    c001ab68 <ISO9660::openDir(char const*, void**)+0xb0>
c001ab2d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ab31:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001ab35:	89 03                	mov    DWORD PTR [ebx],eax
c001ab37:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001ab3e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ab42:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001ab49:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001ab50:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001ab53:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001ab5a:	8a 06                	mov    al,BYTE PTR [esi]
c001ab5c:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001ab5f:	31 c0                	xor    eax,eax
c001ab61:	eb 05                	jmp    c001ab68 <ISO9660::openDir(char const*, void**)+0xb0>
c001ab63:	b8 04 00 00 00       	mov    eax,0x4
c001ab68:	83 c4 10             	add    esp,0x10
c001ab6b:	5b                   	pop    ebx
c001ab6c:	5e                   	pop    esi
c001ab6d:	5f                   	pop    edi
c001ab6e:	c3                   	ret    
c001ab6f:	90                   	nop

c001ab70 <ISO9660::ISO9660()>:
c001ab70:	83 ec 0c             	sub    esp,0xc
c001ab73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab77:	83 ec 0c             	sub    esp,0xc
c001ab7a:	50                   	push   eax
c001ab7b:	e8 e0 44 ff ff       	call   c000f060 <Filesystem::Filesystem()>
c001ab80:	83 c4 10             	add    esp,0x10
c001ab83:	ba 20 20 02 c0       	mov    edx,0xc0022020
c001ab88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab8c:	89 10                	mov    DWORD PTR [eax],edx
c001ab8e:	90                   	nop
c001ab8f:	83 c4 0c             	add    esp,0xc
c001ab92:	c3                   	ret    
c001ab93:	90                   	nop

c001ab94 <SoundChannel::~SoundChannel()>:
c001ab94:	83 ec 0c             	sub    esp,0xc
c001ab97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab9b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001ab9e:	83 ec 0c             	sub    esp,0xc
c001aba1:	50                   	push   eax
c001aba2:	e8 87 10 ff ff       	call   c000bc2e <free>
c001aba7:	83 c4 10             	add    esp,0x10
c001abaa:	90                   	nop
c001abab:	83 c4 0c             	add    esp,0xc
c001abae:	c3                   	ret    
c001abaf:	90                   	nop

c001abb0 <SoundChannel::setSpeed(float)>:
c001abb0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001abb4:	d9 44 24 08          	fld    DWORD PTR [esp+0x8]
c001abb8:	d9 58 28             	fstp   DWORD PTR [eax+0x28]
c001abbb:	c3                   	ret    

c001abbc <SoundChannel::getSpeed()>:
c001abbc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001abc0:	d9 40 28             	fld    DWORD PTR [eax+0x28]
c001abc3:	c3                   	ret    

c001abc4 <SoundChannel::setVolume(int)>:
c001abc4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001abc8:	83 f8 64             	cmp    eax,0x64
c001abcb:	7e 05                	jle    c001abd2 <SoundChannel::setVolume(int)+0xe>
c001abcd:	b8 64 00 00 00       	mov    eax,0x64
c001abd2:	85 c0                	test   eax,eax
c001abd4:	79 02                	jns    c001abd8 <SoundChannel::setVolume(int)+0x14>
c001abd6:	31 c0                	xor    eax,eax
c001abd8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001abdc:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c001abdf:	c3                   	ret    

c001abe0 <SoundChannel::getVolume()>:
c001abe0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001abe4:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001abe7:	c3                   	ret    

c001abe8 <SoundChannel::pause()>:
c001abe8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001abec:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c001abf0:	c3                   	ret    
c001abf1:	90                   	nop

c001abf2 <SoundChannel::SoundChannel(int, int, int, int)>:
c001abf2:	83 ec 1c             	sub    esp,0x1c
c001abf5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001abf9:	e8 ea ff ff ff       	call   c001abe8 <SoundChannel::pause()>
c001abfe:	83 c4 04             	add    esp,0x4
c001ac01:	6a 50                	push   0x50
c001ac03:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001ac07:	e8 b8 ff ff ff       	call   c001abc4 <SoundChannel::setVolume(int)>
c001ac0c:	83 c4 08             	add    esp,0x8
c001ac0f:	d9 e8                	fld1   
c001ac11:	8d 64 24 fc          	lea    esp,[esp-0x4]
c001ac15:	d9 1c 24             	fstp   DWORD PTR [esp]
c001ac18:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001ac1c:	e8 8f ff ff ff       	call   c001abb0 <SoundChannel::setSpeed(float)>
c001ac21:	83 c4 08             	add    esp,0x8
c001ac24:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ac28:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001ac2c:	89 10                	mov    DWORD PTR [eax],edx
c001ac2e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ac32:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001ac36:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ac39:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ac3d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001ac41:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ac44:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c001ac49:	75 23                	jne    c001ac6e <SoundChannel::SoundChannel(int, int, int, int)+0x7c>
c001ac4b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ac4f:	8b 10                	mov    edx,DWORD PTR [eax]
c001ac51:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ac55:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ac58:	0f af c2             	imul   eax,edx
c001ac5b:	85 c0                	test   eax,eax
c001ac5d:	79 03                	jns    c001ac62 <SoundChannel::SoundChannel(int, int, int, int)+0x70>
c001ac5f:	83 c0 03             	add    eax,0x3
c001ac62:	c1 f8 02             	sar    eax,0x2
c001ac65:	05 a0 0f 00 00       	add    eax,0xfa0
c001ac6a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001ac6e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ac72:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001ac76:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c001ac79:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ac7d:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001ac84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ac88:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c001ac8f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ac93:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001ac96:	c1 e0 02             	shl    eax,0x2
c001ac99:	83 ec 0c             	sub    esp,0xc
c001ac9c:	50                   	push   eax
c001ac9d:	e8 7c 0f ff ff       	call   c000bc1e <malloc>
c001aca2:	83 c4 10             	add    esp,0x10
c001aca5:	89 c2                	mov    edx,eax
c001aca7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001acab:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001acae:	83 ec 04             	sub    esp,0x4
c001acb1:	8d 44 24 10          	lea    eax,[esp+0x10]
c001acb5:	50                   	push   eax
c001acb6:	6a 01                	push   0x1
c001acb8:	6a 04                	push   0x4
c001acba:	e8 8c db fe ff       	call   c000884b <src_new>
c001acbf:	83 c4 10             	add    esp,0x10
c001acc2:	89 c2                	mov    edx,eax
c001acc4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001acc8:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001accb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001accf:	85 c0                	test   eax,eax
c001acd1:	74 10                	je     c001ace3 <SoundChannel::SoundChannel(int, int, int, int)+0xf1>
c001acd3:	83 ec 0c             	sub    esp,0xc
c001acd6:	68 7c 20 02 c0       	push   0xc002207c
c001acdb:	e8 10 9d ff ff       	call   c00149f0 <Krnl::panic(char const*)>
c001ace0:	83 c4 10             	add    esp,0x10
c001ace3:	90                   	nop
c001ace4:	83 c4 1c             	add    esp,0x1c
c001ace7:	c3                   	ret    

c001ace8 <SoundChannel::play()>:
c001ace8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001acec:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c001acf0:	c3                   	ret    
c001acf1:	90                   	nop

c001acf2 <SoundChannel::paused()>:
c001acf2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001acf6:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c001acf9:	c3                   	ret    

c001acfa <SoundChannel::getSampleRate()>:
c001acfa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001acfe:	8b 00                	mov    eax,DWORD PTR [eax]
c001ad00:	c3                   	ret    
c001ad01:	90                   	nop

c001ad02 <SoundChannel::getBits()>:
c001ad02:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ad06:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ad09:	c3                   	ret    

c001ad0a <SoundChannel::getBufferUsed()>:
c001ad0a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ad0e:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001ad11:	c3                   	ret    

c001ad12 <SoundChannel::getBufferSize()>:
c001ad12:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ad16:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001ad19:	c3                   	ret    

c001ad1a <SoundChannel::unbuffer(float*, int, int)>:
c001ad1a:	53                   	push   ebx
c001ad1b:	83 ec 40             	sub    esp,0x40
c001ad1e:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
c001ad22:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001ad2a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001ad2d:	db 03                	fild   DWORD PTR [ebx]
c001ad2f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ad33:	da 7c 24 50          	fidivr DWORD PTR [esp+0x50]
c001ad37:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001ad3a:	d8 73 28             	fdiv   DWORD PTR [ebx+0x28]
c001ad3d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ad41:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c001ad45:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001ad49:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ad4d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001ad51:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ad55:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ad59:	50                   	push   eax
c001ad5a:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c001ad5d:	e8 a3 d7 fe ff       	call   c0008505 <src_process>
c001ad62:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001ad66:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c001ad69:	83 c4 0c             	add    esp,0xc
c001ad6c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001ad6f:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c001ad72:	29 d0                	sub    eax,edx
c001ad74:	c1 e0 02             	shl    eax,0x2
c001ad77:	50                   	push   eax
c001ad78:	8d 04 91             	lea    eax,[ecx+edx*4]
c001ad7b:	50                   	push   eax
c001ad7c:	51                   	push   ecx
c001ad7d:	e8 18 58 fe ff       	call   c000059a <memmove>
c001ad82:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ad86:	83 c4 48             	add    esp,0x48
c001ad89:	5b                   	pop    ebx
c001ad8a:	c3                   	ret    
c001ad8b:	90                   	nop

c001ad8c <SoundChannel::buffer8(unsigned char*, int)>:
c001ad8c:	53                   	push   ebx
c001ad8d:	31 c0                	xor    eax,eax
c001ad8f:	83 ec 08             	sub    esp,0x8
c001ad92:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ad96:	8b 5a 14             	mov    ebx,DWORD PTR [edx+0x14]
c001ad99:	39 5a 1c             	cmp    DWORD PTR [edx+0x1c],ebx
c001ad9c:	74 35                	je     c001add3 <SoundChannel::buffer8(unsigned char*, int)+0x47>
c001ad9e:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001ada2:	7d 2f                	jge    c001add3 <SoundChannel::buffer8(unsigned char*, int)+0x47>
c001ada4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ada8:	d9 05 98 20 02 c0    	fld    DWORD PTR ds:0xc0022098
c001adae:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c001adb2:	40                   	inc    eax
c001adb3:	66 89 4c 24 02       	mov    WORD PTR [esp+0x2],cx
c001adb8:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c001adbb:	de 4c 24 02          	fimul  WORD PTR [esp+0x2]
c001adbf:	8d 59 01             	lea    ebx,[ecx+0x1]
c001adc2:	89 5a 1c             	mov    DWORD PTR [edx+0x1c],ebx
c001adc5:	8b 5a 10             	mov    ebx,DWORD PTR [edx+0x10]
c001adc8:	d9 1c 8b             	fstp   DWORD PTR [ebx+ecx*4]
c001adcb:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001adce:	39 4a 1c             	cmp    DWORD PTR [edx+0x1c],ecx
c001add1:	eb c9                	jmp    c001ad9c <SoundChannel::buffer8(unsigned char*, int)+0x10>
c001add3:	83 c4 08             	add    esp,0x8
c001add6:	5b                   	pop    ebx
c001add7:	c3                   	ret    

c001add8 <SoundDevice::SoundDevice(char const*)>:
c001add8:	83 ec 1c             	sub    esp,0x1c
c001addb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001addf:	83 ec 08             	sub    esp,0x8
c001ade2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ade6:	50                   	push   eax
c001ade7:	e8 6a 55 ff ff       	call   c0010356 <Device::Device(char const*)>
c001adec:	83 c4 10             	add    esp,0x10
c001adef:	ba a4 20 02 c0       	mov    edx,0xc00220a4
c001adf4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001adf8:	89 10                	mov    DWORD PTR [eax],edx
c001adfa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001adfe:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001ae08:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ae0c:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001ae16:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ae1e:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001ae23:	7f 19                	jg     c001ae3e <SoundDevice::SoundDevice(char const*)+0x66>
c001ae25:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ae29:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ae2d:	83 c2 54             	add    edx,0x54
c001ae30:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c001ae38:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001ae3c:	eb e0                	jmp    c001ae1e <SoundDevice::SoundDevice(char const*)+0x46>
c001ae3e:	90                   	nop
c001ae3f:	83 c4 1c             	add    esp,0x1c
c001ae42:	c3                   	ret    
c001ae43:	90                   	nop

c001ae44 <SoundDevice::~SoundDevice()>:
c001ae44:	53                   	push   ebx
c001ae45:	83 ec 18             	sub    esp,0x18
c001ae48:	ba a4 20 02 c0       	mov    edx,0xc00220a4
c001ae4d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ae51:	89 10                	mov    DWORD PTR [eax],edx
c001ae53:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ae5b:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001ae60:	7f 46                	jg     c001aea8 <SoundDevice::~SoundDevice()+0x64>
c001ae62:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ae66:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ae6a:	83 c2 54             	add    edx,0x54
c001ae6d:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c001ae71:	85 c0                	test   eax,eax
c001ae73:	74 2d                	je     c001aea2 <SoundDevice::~SoundDevice()+0x5e>
c001ae75:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ae79:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ae7d:	83 c2 54             	add    edx,0x54
c001ae80:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c001ae84:	85 db                	test   ebx,ebx
c001ae86:	74 1a                	je     c001aea2 <SoundDevice::~SoundDevice()+0x5e>
c001ae88:	83 ec 0c             	sub    esp,0xc
c001ae8b:	53                   	push   ebx
c001ae8c:	e8 03 fd ff ff       	call   c001ab94 <SoundChannel::~SoundChannel()>
c001ae91:	83 c4 10             	add    esp,0x10
c001ae94:	83 ec 08             	sub    esp,0x8
c001ae97:	6a 2c                	push   0x2c
c001ae99:	53                   	push   ebx
c001ae9a:	e8 dc 3d ff ff       	call   c000ec7b <operator delete(void*, unsigned long)>
c001ae9f:	83 c4 10             	add    esp,0x10
c001aea2:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001aea6:	eb b3                	jmp    c001ae5b <SoundDevice::~SoundDevice()+0x17>
c001aea8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aeac:	83 ec 0c             	sub    esp,0xc
c001aeaf:	50                   	push   eax
c001aeb0:	e8 53 51 ff ff       	call   c0010008 <Device::~Device()>
c001aeb5:	83 c4 10             	add    esp,0x10
c001aeb8:	90                   	nop
c001aeb9:	83 c4 18             	add    esp,0x18
c001aebc:	5b                   	pop    ebx
c001aebd:	c3                   	ret    

c001aebe <SoundDevice::~SoundDevice()>:
c001aebe:	83 ec 0c             	sub    esp,0xc
c001aec1:	83 ec 0c             	sub    esp,0xc
c001aec4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001aec8:	e8 77 ff ff ff       	call   c001ae44 <SoundDevice::~SoundDevice()>
c001aecd:	83 c4 10             	add    esp,0x10
c001aed0:	83 ec 08             	sub    esp,0x8
c001aed3:	68 e4 01 00 00       	push   0x1e4
c001aed8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001aedc:	e8 9a 3d ff ff       	call   c000ec7b <operator delete(void*, unsigned long)>
c001aee1:	83 c4 10             	add    esp,0x10
c001aee4:	83 c4 0c             	add    esp,0xc
c001aee7:	c3                   	ret    

c001aee8 <SoundDevice::getFreeChannelNum()>:
c001aee8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001aeec:	31 c0                	xor    eax,eax
c001aeee:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c001aef6:	74 09                	je     c001af01 <SoundDevice::getFreeChannelNum()+0x19>
c001aef8:	40                   	inc    eax
c001aef9:	83 f8 20             	cmp    eax,0x20
c001aefc:	75 f0                	jne    c001aeee <SoundDevice::getFreeChannelNum()+0x6>
c001aefe:	83 c8 ff             	or     eax,0xffffffff
c001af01:	c3                   	ret    

c001af02 <SoundDevice::addChannel(SoundChannel*)>:
c001af02:	56                   	push   esi
c001af03:	53                   	push   ebx
c001af04:	51                   	push   ecx
c001af05:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001af09:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001af0d:	53                   	push   ebx
c001af0e:	e8 d5 ff ff ff       	call   c001aee8 <SoundDevice::getFreeChannelNum()>
c001af13:	5a                   	pop    edx
c001af14:	83 f8 ff             	cmp    eax,0xffffffff
c001af17:	74 51                	je     c001af6a <SoundDevice::addChannel(SoundChannel*)+0x68>
c001af19:	85 f6                	test   esi,esi
c001af1b:	74 4d                	je     c001af6a <SoundDevice::addChannel(SoundChannel*)+0x68>
c001af1d:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c001af24:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c001af2b:	75 30                	jne    c001af5d <SoundDevice::addChannel(SoundChannel*)+0x5b>
c001af2d:	83 ec 0c             	sub    esp,0xc
c001af30:	56                   	push   esi
c001af31:	e8 c4 fd ff ff       	call   c001acfa <SoundChannel::getSampleRate()>
c001af36:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c001af3c:	89 34 24             	mov    DWORD PTR [esp],esi
c001af3f:	e8 be fd ff ff       	call   c001ad02 <SoundChannel::getBits()>
c001af44:	83 c4 0c             	add    esp,0xc
c001af47:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c001af4d:	8b 13                	mov    edx,DWORD PTR [ebx]
c001af4f:	50                   	push   eax
c001af50:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c001af56:	53                   	push   ebx
c001af57:	ff 52 28             	call   DWORD PTR [edx+0x28]
c001af5a:	83 c4 10             	add    esp,0x10
c001af5d:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c001af63:	b8 01 00 00 00       	mov    eax,0x1
c001af68:	eb 03                	jmp    c001af6d <SoundDevice::addChannel(SoundChannel*)+0x6b>
c001af6a:	83 c8 ff             	or     eax,0xffffffff
c001af6d:	5a                   	pop    edx
c001af6e:	5b                   	pop    ebx
c001af6f:	5e                   	pop    esi
c001af70:	c3                   	ret    
c001af71:	90                   	nop

c001af72 <SoundDevice::removeChannel(int)>:
c001af72:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001af76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001af7a:	83 fa 1f             	cmp    edx,0x1f
c001af7d:	77 23                	ja     c001afa2 <SoundDevice::removeChannel(int)+0x30>
c001af7f:	8d 14 90             	lea    edx,[eax+edx*4]
c001af82:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c001af89:	74 17                	je     c001afa2 <SoundDevice::removeChannel(int)+0x30>
c001af8b:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c001af95:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c001af9b:	75 05                	jne    c001afa2 <SoundDevice::removeChannel(int)+0x30>
c001af9d:	8b 00                	mov    eax,DWORD PTR [eax]
c001af9f:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c001afa2:	c3                   	ret    
c001afa3:	90                   	nop

c001afa4 <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c001afa4:	56                   	push   esi
c001afa5:	53                   	push   ebx
c001afa6:	31 db                	xor    ebx,ebx
c001afa8:	83 ec 14             	sub    esp,0x14
c001afab:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001afaf:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c001afb3:	7d 55                	jge    c001b00a <SoundDevice::floatTo8(float*, unsigned char*, int)+0x66>
c001afb5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001afb9:	d9 e8                	fld1   
c001afbb:	d8 04 98             	fadd   DWORD PTR [eax+ebx*4]
c001afbe:	d8 0d d4 20 02 c0    	fmul   DWORD PTR ds:0xc00220d4
c001afc4:	d8 0d d8 20 02 c0    	fmul   DWORD PTR ds:0xc00220d8
c001afca:	d9 5c 24 0c          	fstp   DWORD PTR [esp+0xc]
c001afce:	d9 44 24 0c          	fld    DWORD PTR [esp+0xc]
c001afd2:	d8 15 dc 20 02 c0    	fcom   DWORD PTR ds:0xc00220dc
c001afd8:	df e0                	fnstsw ax
c001afda:	9e                   	sahf   
c001afdb:	72 08                	jb     c001afe5 <SoundDevice::floatTo8(float*, unsigned char*, int)+0x41>
c001afdd:	dd d8                	fstp   st(0)
c001afdf:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c001afe3:	eb 22                	jmp    c001b007 <SoundDevice::floatTo8(float*, unsigned char*, int)+0x63>
c001afe5:	d9 ee                	fldz   
c001afe7:	d8 d9                	fcomp  st(1)
c001afe9:	df e0                	fnstsw ax
c001afeb:	9e                   	sahf   
c001afec:	72 08                	jb     c001aff6 <SoundDevice::floatTo8(float*, unsigned char*, int)+0x52>
c001afee:	dd d8                	fstp   st(0)
c001aff0:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c001aff4:	eb 11                	jmp    c001b007 <SoundDevice::floatTo8(float*, unsigned char*, int)+0x63>
c001aff6:	83 ec 10             	sub    esp,0x10
c001aff9:	d9 1c 24             	fstp   DWORD PTR [esp]
c001affc:	e8 0b 36 00 00       	call   c001e60c <lrintf>
c001b001:	83 c4 10             	add    esp,0x10
c001b004:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c001b007:	43                   	inc    ebx
c001b008:	eb a5                	jmp    c001afaf <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb>
c001b00a:	83 c4 14             	add    esp,0x14
c001b00d:	5b                   	pop    ebx
c001b00e:	5e                   	pop    esi
c001b00f:	c3                   	ret    

c001b010 <SoundDevice::getAudio(int, float*, float*)>:
c001b010:	55                   	push   ebp
c001b011:	57                   	push   edi
c001b012:	56                   	push   esi
c001b013:	53                   	push   ebx
c001b014:	31 db                	xor    ebx,ebx
c001b016:	83 ec 20             	sub    esp,0x20
c001b019:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b01d:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001b021:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001b025:	c1 e0 02             	shl    eax,0x2
c001b028:	50                   	push   eax
c001b029:	6a 00                	push   0x0
c001b02b:	55                   	push   ebp
c001b02c:	e8 d7 55 fe ff       	call   c0000608 <memset>
c001b031:	83 c4 10             	add    esp,0x10
c001b034:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001b038:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c001b03f:	85 c0                	test   eax,eax
c001b041:	0f 84 94 00 00 00    	je     c001b0db <SoundDevice::getAudio(int, float*, float*)+0xcb>
c001b047:	83 ec 0c             	sub    esp,0xc
c001b04a:	50                   	push   eax
c001b04b:	e8 a2 fc ff ff       	call   c001acf2 <SoundChannel::paused()>
c001b050:	83 c4 10             	add    esp,0x10
c001b053:	84 c0                	test   al,al
c001b055:	0f 85 80 00 00 00    	jne    c001b0db <SoundDevice::getAudio(int, float*, float*)+0xcb>
c001b05b:	83 ec 0c             	sub    esp,0xc
c001b05e:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c001b065:	e8 76 fb ff ff       	call   c001abe0 <SoundChannel::getVolume()>
c001b06a:	83 c4 10             	add    esp,0x10
c001b06d:	85 c0                	test   eax,eax
c001b06f:	74 6a                	je     c001b0db <SoundDevice::getAudio(int, float*, float*)+0xcb>
c001b071:	83 ec 0c             	sub    esp,0xc
c001b074:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c001b07b:	e8 60 fb ff ff       	call   c001abe0 <SoundChannel::getVolume()>
c001b080:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001b084:	d9 05 e0 20 02 c0    	fld    DWORD PTR ds:0xc00220e0
c001b08a:	da 7c 24 1c          	fidivr DWORD PTR [esp+0x1c]
c001b08e:	d9 5c 24 1c          	fstp   DWORD PTR [esp+0x1c]
c001b092:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001b096:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c001b09c:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c001b0a0:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c001b0a7:	e8 6e fc ff ff       	call   c001ad1a <SoundChannel::unbuffer(float*, int, int)>
c001b0ac:	83 c4 20             	add    esp,0x20
c001b0af:	31 d2                	xor    edx,edx
c001b0b1:	d9 44 24 0c          	fld    DWORD PTR [esp+0xc]
c001b0b5:	39 c2                	cmp    edx,eax
c001b0b7:	7d 1a                	jge    c001b0d3 <SoundDevice::getAudio(int, float*, float*)+0xc3>
c001b0b9:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001b0bd:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c001b0c0:	d8 c9                	fmul   st,st(1)
c001b0c2:	da b6 58 01 00 00    	fidiv  DWORD PTR [esi+0x158]
c001b0c8:	d8 44 95 00          	fadd   DWORD PTR [ebp+edx*4+0x0]
c001b0cc:	d9 5c 95 00          	fstp   DWORD PTR [ebp+edx*4+0x0]
c001b0d0:	42                   	inc    edx
c001b0d1:	eb e2                	jmp    c001b0b5 <SoundDevice::getAudio(int, float*, float*)+0xa5>
c001b0d3:	dd d8                	fstp   st(0)
c001b0d5:	39 c7                	cmp    edi,eax
c001b0d7:	7e 02                	jle    c001b0db <SoundDevice::getAudio(int, float*, float*)+0xcb>
c001b0d9:	89 c7                	mov    edi,eax
c001b0db:	43                   	inc    ebx
c001b0dc:	83 fb 20             	cmp    ebx,0x20
c001b0df:	0f 85 53 ff ff ff    	jne    c001b038 <SoundDevice::getAudio(int, float*, float*)+0x28>
c001b0e5:	83 c4 1c             	add    esp,0x1c
c001b0e8:	89 f8                	mov    eax,edi
c001b0ea:	5b                   	pop    ebx
c001b0eb:	5e                   	pop    esi
c001b0ec:	5f                   	pop    edi
c001b0ed:	5d                   	pop    ebp
c001b0ee:	c3                   	ret    
c001b0ef:	90                   	nop

c001b0f0 <PCI::open(int, int, void*)>:
c001b0f0:	83 ec 18             	sub    esp,0x18
c001b0f3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b0f7:	8b 10                	mov    edx,DWORD PTR [eax]
c001b0f9:	50                   	push   eax
c001b0fa:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001b0fd:	31 c0                	xor    eax,eax
c001b0ff:	83 c4 1c             	add    esp,0x1c
c001b102:	c3                   	ret    
c001b103:	90                   	nop

c001b104 <PCI::close(int, int, void*)>:
c001b104:	31 c0                	xor    eax,eax
c001b106:	c3                   	ret    
c001b107:	90                   	nop

c001b108 <PCI::PCI()>:
c001b108:	83 ec 0c             	sub    esp,0xc
c001b10b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b10f:	83 ec 08             	sub    esp,0x8
c001b112:	68 e4 20 02 c0       	push   0xc00220e4
c001b117:	50                   	push   eax
c001b118:	e8 c5 48 ff ff       	call   c000f9e2 <Bus::Bus(char const*)>
c001b11d:	83 c4 10             	add    esp,0x10
c001b120:	ba 90 21 02 c0       	mov    edx,0xc0022190
c001b125:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b129:	89 10                	mov    DWORD PTR [eax],edx
c001b12b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b12f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b135:	0f b6 d0             	movzx  edx,al
c001b138:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b13c:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001b143:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b147:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b14d:	0f b6 d0             	movzx  edx,al
c001b150:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b154:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001b159:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b15d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b163:	8d 50 01             	lea    edx,[eax+0x1]
c001b166:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b16a:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001b170:	0f b6 d0             	movzx  edx,al
c001b173:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b177:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001b17b:	83 c9 c0             	or     ecx,0xffffffc0
c001b17e:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001b182:	90                   	nop
c001b183:	83 c4 0c             	add    esp,0xc
c001b186:	c3                   	ret    
c001b187:	90                   	nop

c001b188 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001b188:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001b18c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b191:	89 ca                	mov    edx,ecx
c001b193:	c1 e0 10             	shl    eax,0x10
c001b196:	81 e2 fc 00 00 00    	and    edx,0xfc
c001b19c:	09 d0                	or     eax,edx
c001b19e:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c001b1a3:	c1 e2 08             	shl    edx,0x8
c001b1a6:	09 d0                	or     eax,edx
c001b1a8:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c001b1ad:	c1 e2 0b             	shl    edx,0xb
c001b1b0:	09 d0                	or     eax,edx
c001b1b2:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b1b7:	0d 00 00 00 80       	or     eax,0x80000000
c001b1bc:	ef                   	out    dx,eax
c001b1bd:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b1c2:	ed                   	in     eax,dx
c001b1c3:	83 e1 02             	and    ecx,0x2
c001b1c6:	0f b6 c9             	movzx  ecx,cl
c001b1c9:	c1 e1 03             	shl    ecx,0x3
c001b1cc:	d3 e8                	shr    eax,cl
c001b1ce:	c3                   	ret    
c001b1cf:	90                   	nop

c001b1d0 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001b1d0:	6a 00                	push   0x0
c001b1d2:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b1d7:	50                   	push   eax
c001b1d8:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b1dd:	50                   	push   eax
c001b1de:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b1e3:	50                   	push   eax
c001b1e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001b1e8:	e8 9b ff ff ff       	call   c001b188 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b1ed:	83 c4 14             	add    esp,0x14
c001b1f0:	c3                   	ret    
c001b1f1:	90                   	nop

c001b1f2 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001b1f2:	6a 0e                	push   0xe
c001b1f4:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b1f9:	50                   	push   eax
c001b1fa:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b1ff:	50                   	push   eax
c001b200:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b205:	50                   	push   eax
c001b206:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001b20a:	e8 79 ff ff ff       	call   c001b188 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b20f:	83 c4 14             	add    esp,0x14
c001b212:	0f b6 c0             	movzx  eax,al
c001b215:	c3                   	ret    

c001b216 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001b216:	55                   	push   ebp
c001b217:	57                   	push   edi
c001b218:	56                   	push   esi
c001b219:	53                   	push   ebx
c001b21a:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001b21f:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c001b224:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c001b229:	6a 0a                	push   0xa
c001b22b:	56                   	push   esi
c001b22c:	55                   	push   ebp
c001b22d:	57                   	push   edi
c001b22e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001b232:	e8 51 ff ff ff       	call   c001b188 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b237:	6a 0a                	push   0xa
c001b239:	89 c3                	mov    ebx,eax
c001b23b:	56                   	push   esi
c001b23c:	0f b6 db             	movzx  ebx,bl
c001b23f:	55                   	push   ebp
c001b240:	57                   	push   edi
c001b241:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001b245:	e8 3e ff ff ff       	call   c001b188 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b24a:	83 c4 28             	add    esp,0x28
c001b24d:	25 00 ff 00 00       	and    eax,0xff00
c001b252:	09 d8                	or     eax,ebx
c001b254:	5b                   	pop    ebx
c001b255:	5e                   	pop    esi
c001b256:	5f                   	pop    edi
c001b257:	5d                   	pop    ebp
c001b258:	c3                   	ret    
c001b259:	90                   	nop

c001b25a <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001b25a:	6a 08                	push   0x8
c001b25c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b261:	50                   	push   eax
c001b262:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b267:	50                   	push   eax
c001b268:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b26d:	50                   	push   eax
c001b26e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001b272:	e8 11 ff ff ff       	call   c001b188 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b277:	83 c4 14             	add    esp,0x14
c001b27a:	0f b6 c4             	movzx  eax,ah
c001b27d:	c3                   	ret    

c001b27e <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001b27e:	6a 08                	push   0x8
c001b280:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b285:	50                   	push   eax
c001b286:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b28b:	50                   	push   eax
c001b28c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b291:	50                   	push   eax
c001b292:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001b296:	e8 ed fe ff ff       	call   c001b188 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b29b:	83 c4 14             	add    esp,0x14
c001b29e:	c3                   	ret    
c001b29f:	90                   	nop

c001b2a0 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001b2a0:	6a 3c                	push   0x3c
c001b2a2:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b2a7:	50                   	push   eax
c001b2a8:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b2ad:	50                   	push   eax
c001b2ae:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b2b3:	50                   	push   eax
c001b2b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001b2b8:	e8 cb fe ff ff       	call   c001b188 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b2bd:	83 c4 14             	add    esp,0x14
c001b2c0:	c3                   	ret    
c001b2c1:	90                   	nop

c001b2c2 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001b2c2:	6a 18                	push   0x18
c001b2c4:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b2c9:	50                   	push   eax
c001b2ca:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b2cf:	50                   	push   eax
c001b2d0:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b2d5:	50                   	push   eax
c001b2d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001b2da:	e8 a9 fe ff ff       	call   c001b188 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b2df:	83 c4 14             	add    esp,0x14
c001b2e2:	0f b6 c4             	movzx  eax,ah
c001b2e5:	c3                   	ret    

c001b2e6 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001b2e6:	55                   	push   ebp
c001b2e7:	57                   	push   edi
c001b2e8:	56                   	push   esi
c001b2e9:	53                   	push   ebx
c001b2ea:	50                   	push   eax
c001b2eb:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c001b2ef:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c001b2f4:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001b2f9:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c001b2fe:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001b305:	8d 43 12             	lea    eax,[ebx+0x12]
c001b308:	83 c3 10             	add    ebx,0x10
c001b30b:	0f b6 c0             	movzx  eax,al
c001b30e:	0f b6 db             	movzx  ebx,bl
c001b311:	50                   	push   eax
c001b312:	51                   	push   ecx
c001b313:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001b317:	57                   	push   edi
c001b318:	55                   	push   ebp
c001b319:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001b31d:	e8 66 fe ff ff       	call   c001b188 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b322:	53                   	push   ebx
c001b323:	89 c6                	mov    esi,eax
c001b325:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001b329:	c1 e6 10             	shl    esi,0x10
c001b32c:	51                   	push   ecx
c001b32d:	57                   	push   edi
c001b32e:	55                   	push   ebp
c001b32f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b333:	e8 50 fe ff ff       	call   c001b188 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b338:	83 c4 2c             	add    esp,0x2c
c001b33b:	0f b7 c0             	movzx  eax,ax
c001b33e:	5b                   	pop    ebx
c001b33f:	09 f0                	or     eax,esi
c001b341:	5e                   	pop    esi
c001b342:	5f                   	pop    edi
c001b343:	5d                   	pop    ebp
c001b344:	c3                   	ret    
c001b345:	90                   	nop

c001b346 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001b346:	53                   	push   ebx
c001b347:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b34c:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001b351:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b355:	c1 e1 10             	shl    ecx,0x10
c001b358:	25 fc 00 00 00       	and    eax,0xfc
c001b35d:	09 c1                	or     ecx,eax
c001b35f:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b364:	c1 e0 08             	shl    eax,0x8
c001b367:	09 c1                	or     ecx,eax
c001b369:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001b36e:	c1 e0 0b             	shl    eax,0xb
c001b371:	09 c1                	or     ecx,eax
c001b373:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001b379:	89 c8                	mov    eax,ecx
c001b37b:	ef                   	out    dx,eax
c001b37c:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b381:	ed                   	in     eax,dx
c001b382:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c001b387:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c001b38c:	74 0a                	je     c001b398 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c001b38e:	0f b7 d8             	movzx  ebx,ax
c001b391:	89 d0                	mov    eax,edx
c001b393:	c1 e0 10             	shl    eax,0x10
c001b396:	eb 05                	jmp    c001b39d <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c001b398:	66 31 c0             	xor    ax,ax
c001b39b:	89 d3                	mov    ebx,edx
c001b39d:	09 c3                	or     ebx,eax
c001b39f:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b3a4:	89 c8                	mov    eax,ecx
c001b3a6:	ef                   	out    dx,eax
c001b3a7:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b3ac:	89 d8                	mov    eax,ebx
c001b3ae:	ef                   	out    dx,eax
c001b3af:	5b                   	pop    ebx
c001b3b0:	c3                   	ret    
c001b3b1:	90                   	nop

c001b3b2 <PCI::checkBus(unsigned char)>:
c001b3b2:	56                   	push   esi
c001b3b3:	53                   	push   ebx
c001b3b4:	31 db                	xor    ebx,ebx
c001b3b6:	51                   	push   ecx
c001b3b7:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001b3bc:	52                   	push   edx
c001b3bd:	53                   	push   ebx
c001b3be:	43                   	inc    ebx
c001b3bf:	56                   	push   esi
c001b3c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b3c4:	e8 4d 03 00 00       	call   c001b716 <PCI::checkDevice(unsigned char, unsigned char)>
c001b3c9:	83 c4 10             	add    esp,0x10
c001b3cc:	83 fb 20             	cmp    ebx,0x20
c001b3cf:	75 eb                	jne    c001b3bc <PCI::checkBus(unsigned char)+0xa>
c001b3d1:	58                   	pop    eax
c001b3d2:	5b                   	pop    ebx
c001b3d3:	5e                   	pop    esi
c001b3d4:	c3                   	ret    
c001b3d5:	90                   	nop

c001b3d6 <PCI::foundDevice(PCIDeviceInfo)>:
c001b3d6:	55                   	push   ebp
c001b3d7:	57                   	push   edi
c001b3d8:	56                   	push   esi
c001b3d9:	53                   	push   ebx
c001b3da:	83 ec 1c             	sub    esp,0x1c
c001b3dd:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b3e1:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c001b3e7:	0f 84 51 01 00 00    	je     c001b53e <PCI::foundDevice(PCIDeviceInfo)+0x168>
c001b3ed:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001b3f1:	66 81 f9 06 04       	cmp    cx,0x406
c001b3f6:	75 2c                	jne    c001b424 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c001b3f8:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001b3fd:	50                   	push   eax
c001b3fe:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001b403:	50                   	push   eax
c001b404:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001b409:	50                   	push   eax
c001b40a:	56                   	push   esi
c001b40b:	e8 b2 fe ff ff       	call   c001b2c2 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001b410:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001b414:	0f b6 c0             	movzx  eax,al
c001b417:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001b41b:	83 c4 2c             	add    esp,0x2c
c001b41e:	5b                   	pop    ebx
c001b41f:	5e                   	pop    esi
c001b420:	5f                   	pop    edi
c001b421:	5d                   	pop    ebp
c001b422:	eb 8e                	jmp    c001b3b2 <PCI::checkBus(unsigned char)>
c001b424:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001b428:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001b42e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b432:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001b436:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c001b43a:	88 d3                	mov    bl,dl
c001b43c:	85 c0                	test   eax,eax
c001b43e:	74 33                	je     c001b473 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001b440:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001b443:	85 d2                	test   edx,edx
c001b445:	74 28                	je     c001b46f <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001b447:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c001b44d:	31 ef                	xor    edi,ebp
c001b44f:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c001b455:	75 18                	jne    c001b46f <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001b457:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001b45b:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c001b461:	75 0c                	jne    c001b46f <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001b463:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c001b469:	0f 84 cf 00 00 00    	je     c001b53e <PCI::foundDevice(PCIDeviceInfo)+0x168>
c001b46f:	8b 00                	mov    eax,DWORD PTR [eax]
c001b471:	eb c9                	jmp    c001b43c <PCI::foundDevice(PCIDeviceInfo)+0x66>
c001b473:	66 81 f9 01 06       	cmp    cx,0x601
c001b478:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c001b47c:	75 18                	jne    c001b496 <PCI::foundDevice(PCIDeviceInfo)+0xc0>
c001b47e:	83 ec 0c             	sub    esp,0xc
c001b481:	68 58 01 00 00       	push   0x158
c001b486:	e8 e1 37 ff ff       	call   c000ec6c <operator new(unsigned long)>
c001b48b:	59                   	pop    ecx
c001b48c:	89 c5                	mov    ebp,eax
c001b48e:	5f                   	pop    edi
c001b48f:	68 ec 20 02 c0       	push   0xc00220ec
c001b494:	eb 7d                	jmp    c001b513 <PCI::foundDevice(PCIDeviceInfo)+0x13d>
c001b496:	66 81 f9 01 01       	cmp    cx,0x101
c001b49b:	75 60                	jne    c001b4fd <PCI::foundDevice(PCIDeviceInfo)+0x127>
c001b49d:	83 ec 0c             	sub    esp,0xc
c001b4a0:	68 70 02 00 00       	push   0x270
c001b4a5:	e8 c2 37 ff ff       	call   c000ec6c <operator new(unsigned long)>
c001b4aa:	89 04 24             	mov    DWORD PTR [esp],eax
c001b4ad:	89 c5                	mov    ebp,eax
c001b4af:	e8 26 03 00 00       	call   c001b7da <IDE::IDE()>
c001b4b4:	58                   	pop    eax
c001b4b5:	5a                   	pop    edx
c001b4b6:	55                   	push   ebp
c001b4b7:	56                   	push   esi
c001b4b8:	e8 a9 4c ff ff       	call   c0010166 <Device::addChild(Device*)>
c001b4bd:	83 ec 1c             	sub    esp,0x1c
c001b4c0:	b9 09 00 00 00       	mov    ecx,0x9
c001b4c5:	fc                   	cld    
c001b4c6:	89 e7                	mov    edi,esp
c001b4c8:	89 de                	mov    esi,ebx
c001b4ca:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b4cc:	55                   	push   ebp
c001b4cd:	e8 6e 4b ff ff       	call   c0010040 <Device::preOpenPCI(PCIDeviceInfo)>
c001b4d2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001b4d5:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001b4d9:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001b4e1:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001b4e9:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001b4f1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001b4f4:	83 c4 4c             	add    esp,0x4c
c001b4f7:	5b                   	pop    ebx
c001b4f8:	5e                   	pop    esi
c001b4f9:	5f                   	pop    edi
c001b4fa:	5d                   	pop    ebp
c001b4fb:	ff e0                	jmp    eax
c001b4fd:	83 ec 0c             	sub    esp,0xc
c001b500:	68 58 01 00 00       	push   0x158
c001b505:	e8 62 37 ff ff       	call   c000ec6c <operator new(unsigned long)>
c001b50a:	59                   	pop    ecx
c001b50b:	89 c5                	mov    ebp,eax
c001b50d:	5f                   	pop    edi
c001b50e:	68 0b 21 02 c0       	push   0xc002210b
c001b513:	55                   	push   ebp
c001b514:	e8 39 4f ff ff       	call   c0010452 <DriverlessDevice::DriverlessDevice(char const*)>
c001b519:	58                   	pop    eax
c001b51a:	5a                   	pop    edx
c001b51b:	55                   	push   ebp
c001b51c:	56                   	push   esi
c001b51d:	e8 44 4c ff ff       	call   c0010166 <Device::addChild(Device*)>
c001b522:	b9 09 00 00 00       	mov    ecx,0x9
c001b527:	fc                   	cld    
c001b528:	89 df                	mov    edi,ebx
c001b52a:	89 de                	mov    esi,ebx
c001b52c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b52e:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c001b532:	83 c4 2c             	add    esp,0x2c
c001b535:	5b                   	pop    ebx
c001b536:	5e                   	pop    esi
c001b537:	5f                   	pop    edi
c001b538:	5d                   	pop    ebp
c001b539:	e9 02 4b ff ff       	jmp    c0010040 <Device::preOpenPCI(PCIDeviceInfo)>
c001b53e:	83 c4 1c             	add    esp,0x1c
c001b541:	5b                   	pop    ebx
c001b542:	5e                   	pop    esi
c001b543:	5f                   	pop    edi
c001b544:	5d                   	pop    ebp
c001b545:	c3                   	ret    

c001b546 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001b546:	55                   	push   ebp
c001b547:	57                   	push   edi
c001b548:	56                   	push   esi
c001b549:	53                   	push   ebx
c001b54a:	83 ec 5c             	sub    esp,0x5c
c001b54d:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001b551:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001b555:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c001b559:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c001b55e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b562:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c001b566:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c001b56b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b56f:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c001b574:	6a 0c                	push   0xc
c001b576:	55                   	push   ebp
c001b577:	53                   	push   ebx
c001b578:	57                   	push   edi
c001b579:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c001b580:	e8 03 fc ff ff       	call   c001b188 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b585:	83 c4 0c             	add    esp,0xc
c001b588:	6a 00                	push   0x0
c001b58a:	68 25 21 02 c0       	push   0xc0022125
c001b58f:	e8 c7 37 ff ff       	call   c000ed5b <Dbg::kprintf(char const*, ...)>
c001b594:	55                   	push   ebp
c001b595:	53                   	push   ebx
c001b596:	57                   	push   edi
c001b597:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001b59e:	e8 73 fc ff ff       	call   c001b216 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001b5a3:	66 89 44 24 3e       	mov    WORD PTR [esp+0x3e],ax
c001b5a8:	83 c4 20             	add    esp,0x20
c001b5ab:	55                   	push   ebp
c001b5ac:	53                   	push   ebx
c001b5ad:	57                   	push   edi
c001b5ae:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c001b5b2:	e8 e9 fc ff ff       	call   c001b2a0 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001b5b7:	c7 04 24 3c 00 00 00 	mov    DWORD PTR [esp],0x3c
c001b5be:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001b5c2:	55                   	push   ebp
c001b5c3:	53                   	push   ebx
c001b5c4:	57                   	push   edi
c001b5c5:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001b5cc:	e8 b7 fb ff ff       	call   c001b188 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b5d1:	0f b6 c4             	movzx  eax,ah
c001b5d4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001b5d8:	83 c4 18             	add    esp,0x18
c001b5db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001b5df:	68 39 21 02 c0       	push   0xc0022139
c001b5e4:	e8 72 37 ff ff       	call   c000ed5b <Dbg::kprintf(char const*, ...)>
c001b5e9:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c001b5ed:	88 44 24 5d          	mov    BYTE PTR [esp+0x5d],al
c001b5f1:	a1 08 34 02 c0       	mov    eax,ds:0xc0023408
c001b5f6:	83 c4 10             	add    esp,0x10
c001b5f9:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001b5ff:	83 b8 5c 21 00 00 00 	cmp    DWORD PTR [eax+0x215c],0x0
c001b606:	74 6c                	je     c001b674 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x12e>
c001b608:	31 f6                	xor    esi,esi
c001b60a:	8b 15 08 34 02 c0    	mov    edx,DWORD PTR ds:0xc0023408
c001b610:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c001b616:	39 b2 5c 21 00 00    	cmp    DWORD PTR [edx+0x215c],esi
c001b61c:	7e 56                	jle    c001b674 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x12e>
c001b61e:	8d 14 f2             	lea    edx,[edx+esi*8]
c001b621:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c001b628:	39 cb                	cmp    ebx,ecx
c001b62a:	75 45                	jne    c001b671 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x12b>
c001b62c:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c001b633:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c001b637:	75 38                	jne    c001b671 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x12b>
c001b639:	83 ec 0c             	sub    esp,0xc
c001b63c:	68 48 21 02 c0       	push   0xc0022148
c001b641:	e8 15 37 ff ff       	call   c000ed5b <Dbg::kprintf(char const*, ...)>
c001b646:	8b 15 08 34 02 c0    	mov    edx,DWORD PTR ds:0xc0023408
c001b64c:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c001b652:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c001b65a:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c001b65e:	52                   	push   edx
c001b65f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b663:	53                   	push   ebx
c001b664:	68 6d 21 02 c0       	push   0xc002216d
c001b669:	e8 ed 36 ff ff       	call   c000ed5b <Dbg::kprintf(char const*, ...)>
c001b66e:	83 c4 20             	add    esp,0x20
c001b671:	46                   	inc    esi
c001b672:	eb 96                	jmp    c001b60a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xc4>
c001b674:	31 d2                	xor    edx,edx
c001b676:	83 ec 0c             	sub    esp,0xc
c001b679:	55                   	push   ebp
c001b67a:	53                   	push   ebx
c001b67b:	57                   	push   edi
c001b67c:	52                   	push   edx
c001b67d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001b681:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001b688:	e8 59 fc ff ff       	call   c001b2e6 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b68d:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c001b691:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001b695:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001b699:	42                   	inc    edx
c001b69a:	83 c4 20             	add    esp,0x20
c001b69d:	83 fa 06             	cmp    edx,0x6
c001b6a0:	75 d4                	jne    c001b676 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x130>
c001b6a2:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001b6a6:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c001b6aa:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c001b6ae:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c001b6b2:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001b6b6:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c001b6ba:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001b6bf:	86 e0                	xchg   al,ah
c001b6c1:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c001b6c6:	55                   	push   ebp
c001b6c7:	53                   	push   ebx
c001b6c8:	57                   	push   edi
c001b6c9:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c001b6cd:	e8 88 fb ff ff       	call   c001b25a <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001b6d2:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001b6d6:	55                   	push   ebp
c001b6d7:	53                   	push   ebx
c001b6d8:	57                   	push   edi
c001b6d9:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001b6e0:	e8 eb fa ff ff       	call   c001b1d0 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b6e5:	83 ec 0c             	sub    esp,0xc
c001b6e8:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c001b6ed:	b9 09 00 00 00       	mov    ecx,0x9
c001b6f2:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c001b6f6:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c001b6fa:	fc                   	cld    
c001b6fb:	89 e7                	mov    edi,esp
c001b6fd:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b6ff:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c001b706:	e8 cb fc ff ff       	call   c001b3d6 <PCI::foundDevice(PCIDeviceInfo)>
c001b70b:	81 c4 8c 00 00 00    	add    esp,0x8c
c001b711:	5b                   	pop    ebx
c001b712:	5e                   	pop    esi
c001b713:	5f                   	pop    edi
c001b714:	5d                   	pop    ebp
c001b715:	c3                   	ret    

c001b716 <PCI::checkDevice(unsigned char, unsigned char)>:
c001b716:	55                   	push   ebp
c001b717:	57                   	push   edi
c001b718:	56                   	push   esi
c001b719:	53                   	push   ebx
c001b71a:	83 ec 0c             	sub    esp,0xc
c001b71d:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001b721:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001b726:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001b72b:	6a 00                	push   0x0
c001b72d:	56                   	push   esi
c001b72e:	57                   	push   edi
c001b72f:	55                   	push   ebp
c001b730:	e8 9b fa ff ff       	call   c001b1d0 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b735:	6a 00                	push   0x0
c001b737:	56                   	push   esi
c001b738:	57                   	push   edi
c001b739:	55                   	push   ebp
c001b73a:	e8 07 fe ff ff       	call   c001b546 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001b73f:	83 c4 20             	add    esp,0x20
c001b742:	6a 00                	push   0x0
c001b744:	56                   	push   esi
c001b745:	57                   	push   edi
c001b746:	55                   	push   ebp
c001b747:	e8 a6 fa ff ff       	call   c001b1f2 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001b74c:	83 c4 10             	add    esp,0x10
c001b74f:	84 c0                	test   al,al
c001b751:	79 27                	jns    c001b77a <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001b753:	bb 01 00 00 00       	mov    ebx,0x1
c001b758:	53                   	push   ebx
c001b759:	56                   	push   esi
c001b75a:	57                   	push   edi
c001b75b:	55                   	push   ebp
c001b75c:	e8 6f fa ff ff       	call   c001b1d0 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b761:	83 c4 10             	add    esp,0x10
c001b764:	66 40                	inc    ax
c001b766:	74 0c                	je     c001b774 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c001b768:	53                   	push   ebx
c001b769:	56                   	push   esi
c001b76a:	57                   	push   edi
c001b76b:	55                   	push   ebp
c001b76c:	e8 d5 fd ff ff       	call   c001b546 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001b771:	83 c4 10             	add    esp,0x10
c001b774:	43                   	inc    ebx
c001b775:	83 fb 08             	cmp    ebx,0x8
c001b778:	75 de                	jne    c001b758 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001b77a:	83 c4 0c             	add    esp,0xc
c001b77d:	5b                   	pop    ebx
c001b77e:	5e                   	pop    esi
c001b77f:	5f                   	pop    edi
c001b780:	5d                   	pop    ebp
c001b781:	c3                   	ret    

c001b782 <PCI::detect()>:
c001b782:	56                   	push   esi
c001b783:	53                   	push   ebx
c001b784:	53                   	push   ebx
c001b785:	31 db                	xor    ebx,ebx
c001b787:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b78b:	6a 00                	push   0x0
c001b78d:	6a 00                	push   0x0
c001b78f:	6a 00                	push   0x0
c001b791:	56                   	push   esi
c001b792:	e8 5b fa ff ff       	call   c001b1f2 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001b797:	83 c4 10             	add    esp,0x10
c001b79a:	a8 80                	test   al,0x80
c001b79c:	75 21                	jne    c001b7bf <PCI::detect()+0x3d>
c001b79e:	51                   	push   ecx
c001b79f:	51                   	push   ecx
c001b7a0:	6a 00                	push   0x0
c001b7a2:	56                   	push   esi
c001b7a3:	e8 0a fc ff ff       	call   c001b3b2 <PCI::checkBus(unsigned char)>
c001b7a8:	83 c4 10             	add    esp,0x10
c001b7ab:	eb 24                	jmp    c001b7d1 <PCI::detect()+0x4f>
c001b7ad:	52                   	push   edx
c001b7ae:	52                   	push   edx
c001b7af:	53                   	push   ebx
c001b7b0:	43                   	inc    ebx
c001b7b1:	56                   	push   esi
c001b7b2:	e8 fb fb ff ff       	call   c001b3b2 <PCI::checkBus(unsigned char)>
c001b7b7:	83 c4 10             	add    esp,0x10
c001b7ba:	83 fb 08             	cmp    ebx,0x8
c001b7bd:	74 12                	je     c001b7d1 <PCI::detect()+0x4f>
c001b7bf:	53                   	push   ebx
c001b7c0:	6a 00                	push   0x0
c001b7c2:	6a 00                	push   0x0
c001b7c4:	56                   	push   esi
c001b7c5:	e8 06 fa ff ff       	call   c001b1d0 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b7ca:	83 c4 10             	add    esp,0x10
c001b7cd:	66 40                	inc    ax
c001b7cf:	74 dc                	je     c001b7ad <PCI::detect()+0x2b>
c001b7d1:	58                   	pop    eax
c001b7d2:	5b                   	pop    ebx
c001b7d3:	5e                   	pop    esi
c001b7d4:	c3                   	ret    
c001b7d5:	90                   	nop

c001b7d6 <IDE::close(int, int, void*)>:
c001b7d6:	83 c8 ff             	or     eax,0xffffffff
c001b7d9:	c3                   	ret    

c001b7da <IDE::IDE()>:
c001b7da:	83 ec 0c             	sub    esp,0xc
c001b7dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b7e1:	83 ec 08             	sub    esp,0x8
c001b7e4:	68 b4 21 02 c0       	push   0xc00221b4
c001b7e9:	50                   	push   eax
c001b7ea:	e8 f9 4c ff ff       	call   c00104e8 <HardDiskController::HardDiskController(char const*)>
c001b7ef:	83 c4 10             	add    esp,0x10
c001b7f2:	ba f4 23 02 c0       	mov    edx,0xc00223f4
c001b7f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b7fb:	89 10                	mov    DWORD PTR [eax],edx
c001b7fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b801:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001b808:	90                   	nop
c001b809:	83 c4 0c             	add    esp,0xc
c001b80c:	c3                   	ret    
c001b80d:	90                   	nop

c001b80e <IDE::prepareInterrupt(unsigned char)>:
c001b80e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b813:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001b817:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001b81f:	c3                   	ret    

c001b820 <selectDrive(unsigned char, unsigned char)>:
c001b820:	c3                   	ret    
c001b821:	90                   	nop

c001b822 <IDE::getBase(unsigned char)>:
c001b822:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001b827:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b82b:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001b833:	c3                   	ret    

c001b834 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001b834:	55                   	push   ebp
c001b835:	57                   	push   edi
c001b836:	56                   	push   esi
c001b837:	53                   	push   ebx
c001b838:	83 ec 1c             	sub    esp,0x1c
c001b83b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001b83f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001b843:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001b846:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001b84a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001b84e:	80 f9 03             	cmp    cl,0x3
c001b851:	77 51                	ja     c001b8a4 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c001b853:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b857:	0f b6 f2             	movzx  esi,dl
c001b85a:	0f b6 db             	movzx  ebx,bl
c001b85d:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001b860:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c001b864:	83 ca 80             	or     edx,0xffffff80
c001b867:	0f b6 d2             	movzx  edx,dl
c001b86a:	52                   	push   edx
c001b86b:	6a 0c                	push   0xc
c001b86d:	56                   	push   esi
c001b86e:	57                   	push   edi
c001b86f:	e8 c0 ff ff ff       	call   c001b834 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b874:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001b879:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b87d:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001b881:	ee                   	out    dx,al
c001b882:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001b887:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001b88b:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001b88f:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001b893:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001b89b:	83 c4 2c             	add    esp,0x2c
c001b89e:	5b                   	pop    ebx
c001b89f:	5e                   	pop    esi
c001b8a0:	5f                   	pop    edi
c001b8a1:	5d                   	pop    ebp
c001b8a2:	eb 90                	jmp    c001b834 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b8a4:	80 fb 07             	cmp    bl,0x7
c001b8a7:	77 12                	ja     c001b8bb <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c001b8a9:	0f b6 d2             	movzx  edx,dl
c001b8ac:	0f b6 db             	movzx  ebx,bl
c001b8af:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c001b8b7:	89 da                	mov    edx,ebx
c001b8b9:	eb 2f                	jmp    c001b8ea <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001b8bb:	80 fb 0d             	cmp    bl,0xd
c001b8be:	77 13                	ja     c001b8d3 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c001b8c0:	0f b6 d2             	movzx  edx,dl
c001b8c3:	0f b6 db             	movzx  ebx,bl
c001b8c6:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001b8cd:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001b8d1:	eb 17                	jmp    c001b8ea <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001b8d3:	80 fb 15             	cmp    bl,0x15
c001b8d6:	77 13                	ja     c001b8eb <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001b8d8:	0f b6 d2             	movzx  edx,dl
c001b8db:	0f b6 db             	movzx  ebx,bl
c001b8de:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001b8e6:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001b8ea:	ee                   	out    dx,al
c001b8eb:	83 c4 1c             	add    esp,0x1c
c001b8ee:	5b                   	pop    ebx
c001b8ef:	5e                   	pop    esi
c001b8f0:	5f                   	pop    edi
c001b8f1:	5d                   	pop    ebp
c001b8f2:	c3                   	ret    
c001b8f3:	90                   	nop

c001b8f4 <IDE::read(unsigned char, unsigned char)>:
c001b8f4:	55                   	push   ebp
c001b8f5:	57                   	push   edi
c001b8f6:	56                   	push   esi
c001b8f7:	53                   	push   ebx
c001b8f8:	83 ec 1c             	sub    esp,0x1c
c001b8fb:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001b8ff:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001b903:	8d 43 f8             	lea    eax,[ebx-0x8]
c001b906:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001b90a:	3c 03                	cmp    al,0x3
c001b90c:	77 43                	ja     c001b951 <IDE::read(unsigned char, unsigned char)+0x5d>
c001b90e:	0f b6 f2             	movzx  esi,dl
c001b911:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001b914:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c001b918:	83 c8 80             	or     eax,0xffffff80
c001b91b:	0f b6 c0             	movzx  eax,al
c001b91e:	50                   	push   eax
c001b91f:	6a 0c                	push   0xc
c001b921:	56                   	push   esi
c001b922:	57                   	push   edi
c001b923:	e8 0c ff ff ff       	call   c001b834 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b928:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c001b92d:	0f b6 c3             	movzx  eax,bl
c001b930:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c001b934:	ec                   	in     al,dx
c001b935:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001b939:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001b93e:	52                   	push   edx
c001b93f:	6a 0c                	push   0xc
c001b941:	56                   	push   esi
c001b942:	57                   	push   edi
c001b943:	e8 ec fe ff ff       	call   c001b834 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b948:	83 c4 20             	add    esp,0x20
c001b94b:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001b94f:	eb 49                	jmp    c001b99a <IDE::read(unsigned char, unsigned char)+0xa6>
c001b951:	80 fb 07             	cmp    bl,0x7
c001b954:	77 12                	ja     c001b968 <IDE::read(unsigned char, unsigned char)+0x74>
c001b956:	0f b6 d2             	movzx  edx,dl
c001b959:	0f b6 c3             	movzx  eax,bl
c001b95c:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c001b964:	89 c2                	mov    edx,eax
c001b966:	eb 31                	jmp    c001b999 <IDE::read(unsigned char, unsigned char)+0xa5>
c001b968:	80 fb 0d             	cmp    bl,0xd
c001b96b:	77 13                	ja     c001b980 <IDE::read(unsigned char, unsigned char)+0x8c>
c001b96d:	0f b6 d2             	movzx  edx,dl
c001b970:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c001b977:	0f b6 d3             	movzx  edx,bl
c001b97a:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001b97e:	eb 19                	jmp    c001b999 <IDE::read(unsigned char, unsigned char)+0xa5>
c001b980:	31 c0                	xor    eax,eax
c001b982:	80 fb 15             	cmp    bl,0x15
c001b985:	77 13                	ja     c001b99a <IDE::read(unsigned char, unsigned char)+0xa6>
c001b987:	0f b6 d2             	movzx  edx,dl
c001b98a:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c001b992:	0f b6 d3             	movzx  edx,bl
c001b995:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001b999:	ec                   	in     al,dx
c001b99a:	83 c4 1c             	add    esp,0x1c
c001b99d:	5b                   	pop    ebx
c001b99e:	5e                   	pop    esi
c001b99f:	5f                   	pop    edi
c001b9a0:	5d                   	pop    ebp
c001b9a1:	c3                   	ret    

c001b9a2 <IDE::waitInterrupt(unsigned char)>:
c001b9a2:	55                   	push   ebp
c001b9a3:	57                   	push   edi
c001b9a4:	56                   	push   esi
c001b9a5:	53                   	push   ebx
c001b9a6:	31 db                	xor    ebx,ebx
c001b9a8:	83 ec 0c             	sub    esp,0xc
c001b9ab:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b9af:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001b9b4:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001b9bc:	89 e8                	mov    eax,ebp
c001b9be:	84 c0                	test   al,al
c001b9c0:	75 34                	jne    c001b9f6 <IDE::waitInterrupt(unsigned char)+0x54>
c001b9c2:	52                   	push   edx
c001b9c3:	6a 0c                	push   0xc
c001b9c5:	56                   	push   esi
c001b9c6:	57                   	push   edi
c001b9c7:	e8 28 ff ff ff       	call   c001b8f4 <IDE::read(unsigned char, unsigned char)>
c001b9cc:	83 c4 10             	add    esp,0x10
c001b9cf:	a8 01                	test   al,0x1
c001b9d1:	75 2b                	jne    c001b9fe <IDE::waitInterrupt(unsigned char)+0x5c>
c001b9d3:	f6 c3 04             	test   bl,0x4
c001b9d6:	75 16                	jne    c001b9ee <IDE::waitInterrupt(unsigned char)+0x4c>
c001b9d8:	83 fb 32             	cmp    ebx,0x32
c001b9db:	7e 11                	jle    c001b9ee <IDE::waitInterrupt(unsigned char)+0x4c>
c001b9dd:	50                   	push   eax
c001b9de:	50                   	push   eax
c001b9df:	6a 00                	push   0x0
c001b9e1:	68 80 96 98 00       	push   0x989680
c001b9e6:	e8 75 c5 ff ff       	call   c0017f60 <nanoSleep(unsigned long long)>
c001b9eb:	83 c4 10             	add    esp,0x10
c001b9ee:	83 fb 3c             	cmp    ebx,0x3c
c001b9f1:	74 0b                	je     c001b9fe <IDE::waitInterrupt(unsigned char)+0x5c>
c001b9f3:	43                   	inc    ebx
c001b9f4:	eb be                	jmp    c001b9b4 <IDE::waitInterrupt(unsigned char)+0x12>
c001b9f6:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001b9fe:	83 c4 0c             	add    esp,0xc
c001ba01:	89 e8                	mov    eax,ebp
c001ba03:	5b                   	pop    ebx
c001ba04:	5e                   	pop    esi
c001ba05:	5f                   	pop    edi
c001ba06:	5d                   	pop    ebp
c001ba07:	c3                   	ret    

c001ba08 <ideChannel0IRQHandler(regs*, void*)>:
c001ba08:	83 ec 10             	sub    esp,0x10
c001ba0b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ba0f:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001ba16:	6a 07                	push   0x7
c001ba18:	6a 00                	push   0x0
c001ba1a:	50                   	push   eax
c001ba1b:	e8 d4 fe ff ff       	call   c001b8f4 <IDE::read(unsigned char, unsigned char)>
c001ba20:	83 c4 1c             	add    esp,0x1c
c001ba23:	c3                   	ret    

c001ba24 <ideChannel1IRQHandler(regs*, void*)>:
c001ba24:	83 ec 10             	sub    esp,0x10
c001ba27:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ba2b:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001ba32:	6a 07                	push   0x7
c001ba34:	6a 01                	push   0x1
c001ba36:	50                   	push   eax
c001ba37:	e8 b8 fe ff ff       	call   c001b8f4 <IDE::read(unsigned char, unsigned char)>
c001ba3c:	83 c4 1c             	add    esp,0x1c
c001ba3f:	c3                   	ret    

c001ba40 <IDE::enableIRQs(unsigned char, bool)>:
c001ba40:	57                   	push   edi
c001ba41:	56                   	push   esi
c001ba42:	be 04 00 00 00       	mov    esi,0x4
c001ba47:	53                   	push   ebx
c001ba48:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001ba4d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ba51:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c001ba56:	0f 94 c0             	sete   al
c001ba59:	d1 e0                	shl    eax,1
c001ba5b:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c001ba62:	0f b6 c0             	movzx  eax,al
c001ba65:	50                   	push   eax
c001ba66:	6a 0c                	push   0xc
c001ba68:	57                   	push   edi
c001ba69:	53                   	push   ebx
c001ba6a:	e8 c5 fd ff ff       	call   c001b834 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ba6f:	83 c4 10             	add    esp,0x10
c001ba72:	50                   	push   eax
c001ba73:	6a 0c                	push   0xc
c001ba75:	57                   	push   edi
c001ba76:	53                   	push   ebx
c001ba77:	e8 78 fe ff ff       	call   c001b8f4 <IDE::read(unsigned char, unsigned char)>
c001ba7c:	83 c4 10             	add    esp,0x10
c001ba7f:	4e                   	dec    esi
c001ba80:	75 f0                	jne    c001ba72 <IDE::enableIRQs(unsigned char, bool)+0x32>
c001ba82:	5b                   	pop    ebx
c001ba83:	5e                   	pop    esi
c001ba84:	5f                   	pop    edi
c001ba85:	c3                   	ret    

c001ba86 <IDE::open(int, int, void*)>:
c001ba86:	55                   	push   ebp
c001ba87:	57                   	push   edi
c001ba88:	56                   	push   esi
c001ba89:	53                   	push   ebx
c001ba8a:	83 ec 1c             	sub    esp,0x1c
c001ba8d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001ba91:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001ba9a:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001baa3:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001baaa:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001bab1:	0f 85 b0 02 00 00    	jne    c001bd67 <IDE::open(int, int, void*)+0x2e1>
c001bab7:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001babd:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c001bac1:	83 e0 7f             	and    eax,0x7f
c001bac4:	3c 05                	cmp    al,0x5
c001bac6:	74 04                	je     c001bacc <IDE::open(int, int, void*)+0x46>
c001bac8:	3c 0f                	cmp    al,0xf
c001baca:	75 32                	jne    c001bafe <IDE::open(int, int, void*)+0x78>
c001bacc:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001bad2:	83 e0 fc             	and    eax,0xfffffffc
c001bad5:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001badc:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001bae2:	83 e0 fc             	and    eax,0xfffffffc
c001bae5:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001baec:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001baf2:	83 e0 fc             	and    eax,0xfffffffc
c001baf5:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001bafc:	eb 14                	jmp    c001bb12 <IDE::open(int, int, void*)+0x8c>
c001bafe:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001bb08:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001bb12:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001bb19:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001bb20:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001bb24:	89 c6                	mov    esi,eax
c001bb26:	bf f8 0c 00 00       	mov    edi,0xcf8
c001bb2b:	c1 e6 10             	shl    esi,0x10
c001bb2e:	89 e8                	mov    eax,ebp
c001bb30:	89 fa                	mov    edx,edi
c001bb32:	c1 e0 0b             	shl    eax,0xb
c001bb35:	09 f0                	or     eax,esi
c001bb37:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c001bb3e:	c1 e6 08             	shl    esi,0x8
c001bb41:	09 c6                	or     esi,eax
c001bb43:	89 f0                	mov    eax,esi
c001bb45:	0d 08 00 00 80       	or     eax,0x80000008
c001bb4a:	ef                   	out    dx,eax
c001bb4b:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001bb50:	89 ca                	mov    edx,ecx
c001bb52:	ed                   	in     eax,dx
c001bb53:	c1 e8 10             	shr    eax,0x10
c001bb56:	3d ff ff 00 00       	cmp    eax,0xffff
c001bb5b:	0f 84 f5 00 00 00    	je     c001bc56 <IDE::open(int, int, void*)+0x1d0>
c001bb61:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001bb67:	89 fa                	mov    edx,edi
c001bb69:	89 f0                	mov    eax,esi
c001bb6b:	ef                   	out    dx,eax
c001bb6c:	b0 fe                	mov    al,0xfe
c001bb6e:	89 ca                	mov    edx,ecx
c001bb70:	ee                   	out    dx,al
c001bb71:	89 f0                	mov    eax,esi
c001bb73:	89 fa                	mov    edx,edi
c001bb75:	ef                   	out    dx,eax
c001bb76:	89 ca                	mov    edx,ecx
c001bb78:	ed                   	in     eax,dx
c001bb79:	3c fe                	cmp    al,0xfe
c001bb7b:	0f 85 a9 00 00 00    	jne    c001bc2a <IDE::open(int, int, void*)+0x1a4>
c001bb81:	8b 15 08 34 02 c0    	mov    edx,DWORD PTR ds:0xc0023408
c001bb87:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c001bb8e:	74 33                	je     c001bbc3 <IDE::open(int, int, void*)+0x13d>
c001bb90:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001bb96:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001bb9a:	40                   	inc    eax
c001bb9b:	83 ec 0c             	sub    esp,0xc
c001bb9e:	0f b6 c0             	movzx  eax,al
c001bba1:	50                   	push   eax
c001bba2:	55                   	push   ebp
c001bba3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001bba7:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c001bbad:	51                   	push   ecx
c001bbae:	e8 fd 76 ff ff       	call   c00132b0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001bbb3:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001bbb8:	83 c4 1c             	add    esp,0x1c
c001bbbb:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001bbc1:	eb 0a                	jmp    c001bbcd <IDE::open(int, int, void*)+0x147>
c001bbc3:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001bbcd:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001bbd4:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001bbdb:	c1 e1 10             	shl    ecx,0x10
c001bbde:	c1 e0 08             	shl    eax,0x8
c001bbe1:	bf f8 0c 00 00       	mov    edi,0xcf8
c001bbe6:	09 c1                	or     ecx,eax
c001bbe8:	89 fa                	mov    edx,edi
c001bbea:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001bbf1:	c1 e0 0b             	shl    eax,0xb
c001bbf4:	09 c1                	or     ecx,eax
c001bbf6:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001bbfc:	89 c8                	mov    eax,ecx
c001bbfe:	ef                   	out    dx,eax
c001bbff:	be fc 0c 00 00       	mov    esi,0xcfc
c001bc04:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001bc0a:	89 f2                	mov    edx,esi
c001bc0c:	ee                   	out    dx,al
c001bc0d:	89 c8                	mov    eax,ecx
c001bc0f:	89 fa                	mov    edx,edi
c001bc11:	ef                   	out    dx,eax
c001bc12:	89 f2                	mov    edx,esi
c001bc14:	ed                   	in     eax,dx
c001bc15:	0f b6 c0             	movzx  eax,al
c001bc18:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001bc1e:	74 46                	je     c001bc66 <IDE::open(int, int, void*)+0x1e0>
c001bc20:	83 ec 0c             	sub    esp,0xc
c001bc23:	68 cc 21 02 c0       	push   0xc00221cc
c001bc28:	eb 34                	jmp    c001bc5e <IDE::open(int, int, void*)+0x1d8>
c001bc2a:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001bc33:	75 17                	jne    c001bc4c <IDE::open(int, int, void*)+0x1c6>
c001bc35:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c001bc3a:	74 07                	je     c001bc43 <IDE::open(int, int, void*)+0x1bd>
c001bc3c:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c001bc41:	75 09                	jne    c001bc4c <IDE::open(int, int, void*)+0x1c6>
c001bc43:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001bc4a:	eb 1a                	jmp    c001bc66 <IDE::open(int, int, void*)+0x1e0>
c001bc4c:	83 ec 0c             	sub    esp,0xc
c001bc4f:	68 d4 21 02 c0       	push   0xc00221d4
c001bc54:	eb 08                	jmp    c001bc5e <IDE::open(int, int, void*)+0x1d8>
c001bc56:	83 ec 0c             	sub    esp,0xc
c001bc59:	68 05 22 02 c0       	push   0xc0022205
c001bc5e:	e8 8d 8d ff ff       	call   c00149f0 <Krnl::panic(char const*)>
c001bc63:	83 c4 10             	add    esp,0x10
c001bc66:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c001bc6d:	79 1a                	jns    c001bc89 <IDE::open(int, int, void*)+0x203>
c001bc6f:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001bc75:	83 e0 fc             	and    eax,0xfffffffc
c001bc78:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001bc7f:	83 c0 08             	add    eax,0x8
c001bc82:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001bc89:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001bc8f:	89 c2                	mov    edx,eax
c001bc91:	83 e2 0f             	and    edx,0xf
c001bc94:	66 83 fa 08          	cmp    dx,0x8
c001bc98:	75 0a                	jne    c001bca4 <IDE::open(int, int, void*)+0x21e>
c001bc9a:	83 e8 02             	sub    eax,0x2
c001bc9d:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001bca4:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001bcaa:	89 c2                	mov    edx,eax
c001bcac:	83 e2 0f             	and    edx,0xf
c001bcaf:	66 83 fa 08          	cmp    dx,0x8
c001bcb3:	75 0a                	jne    c001bcbf <IDE::open(int, int, void*)+0x239>
c001bcb5:	83 e8 02             	sub    eax,0x2
c001bcb8:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001bcbf:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001bcc6:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001bccd:	89 d0                	mov    eax,edx
c001bccf:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001bcd2:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001bcd6:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001bcda:	8d 4a 01             	lea    ecx,[edx+0x1]
c001bcdd:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001bce2:	0f b6 c9             	movzx  ecx,cl
c001bce5:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001bcec:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001bcef:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001bcf3:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001bcf7:	8d 50 02             	lea    edx,[eax+0x2]
c001bcfa:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001bcff:	0f b6 d2             	movzx  edx,dl
c001bd02:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001bd08:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001bd0b:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001bd0f:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001bd13:	8d 48 03             	lea    ecx,[eax+0x3]
c001bd16:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001bd1b:	0f b6 c9             	movzx  ecx,cl
c001bd1e:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001bd24:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001bd27:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001bd2b:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001bd2f:	8d 50 04             	lea    edx,[eax+0x4]
c001bd32:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001bd38:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001bd3d:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001bd44:	66 85 f6             	test   si,si
c001bd47:	74 3e                	je     c001bd87 <IDE::open(int, int, void*)+0x301>
c001bd49:	0f b6 d2             	movzx  edx,dl
c001bd4c:	83 c0 05             	add    eax,0x5
c001bd4f:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001bd52:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001bd56:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001bd5a:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001bd60:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001bd65:	eb 20                	jmp    c001bd87 <IDE::open(int, int, void*)+0x301>
c001bd67:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001bd71:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001bd7b:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001bd82:	e9 02 ff ff ff       	jmp    c001bc89 <IDE::open(int, int, void*)+0x203>
c001bd87:	52                   	push   edx
c001bd88:	52                   	push   edx
c001bd89:	6a 00                	push   0x0
c001bd8b:	53                   	push   ebx
c001bd8c:	e8 7d fa ff ff       	call   c001b80e <IDE::prepareInterrupt(unsigned char)>
c001bd91:	59                   	pop    ecx
c001bd92:	5e                   	pop    esi
c001bd93:	6a 01                	push   0x1
c001bd95:	53                   	push   ebx
c001bd96:	e8 73 fa ff ff       	call   c001b80e <IDE::prepareInterrupt(unsigned char)>
c001bd9b:	83 c4 0c             	add    esp,0xc
c001bd9e:	6a 00                	push   0x0
c001bda0:	6a 00                	push   0x0
c001bda2:	53                   	push   ebx
c001bda3:	e8 98 fc ff ff       	call   c001ba40 <IDE::enableIRQs(unsigned char, bool)>
c001bda8:	83 c4 0c             	add    esp,0xc
c001bdab:	6a 00                	push   0x0
c001bdad:	6a 01                	push   0x1
c001bdaf:	53                   	push   ebx
c001bdb0:	e8 8b fc ff ff       	call   c001ba40 <IDE::enableIRQs(unsigned char, bool)>
c001bdb5:	83 c4 10             	add    esp,0x10
c001bdb8:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001bdbf:	74 40                	je     c001be01 <IDE::open(int, int, void*)+0x37b>
c001bdc1:	83 ec 0c             	sub    esp,0xc
c001bdc4:	68 2f 22 02 c0       	push   0xc002222f
c001bdc9:	e8 8d 2f ff ff       	call   c000ed5b <Dbg::kprintf(char const*, ...)>
c001bdce:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bdd1:	6a 01                	push   0x1
c001bdd3:	68 08 ba 01 c0       	push   0xc001ba08
c001bdd8:	6a 0e                	push   0xe
c001bdda:	53                   	push   ebx
c001bddb:	e8 da 42 ff ff       	call   c00100ba <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001bde0:	83 c4 14             	add    esp,0x14
c001bde3:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001bde9:	53                   	push   ebx
c001bdea:	6a 01                	push   0x1
c001bdec:	68 24 ba 01 c0       	push   0xc001ba24
c001bdf1:	6a 0f                	push   0xf
c001bdf3:	53                   	push   ebx
c001bdf4:	e8 c1 42 ff ff       	call   c00100ba <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001bdf9:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001bdff:	eb 4a                	jmp    c001be4b <IDE::open(int, int, void*)+0x3c5>
c001be01:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001be0b:	50                   	push   eax
c001be0c:	6a 0f                	push   0xf
c001be0e:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001be14:	68 4b 22 02 c0       	push   0xc002224b
c001be19:	e8 3d 2f ff ff       	call   c000ed5b <Dbg::kprintf(char const*, ...)>
c001be1e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001be21:	6a 00                	push   0x0
c001be23:	68 08 ba 01 c0       	push   0xc001ba08
c001be28:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001be2e:	53                   	push   ebx
c001be2f:	e8 86 42 ff ff       	call   c00100ba <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001be34:	83 c4 14             	add    esp,0x14
c001be37:	53                   	push   ebx
c001be38:	6a 00                	push   0x0
c001be3a:	68 24 ba 01 c0       	push   0xc001ba24
c001be3f:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001be45:	53                   	push   ebx
c001be46:	e8 6f 42 ff ff       	call   c00100ba <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001be4b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001be4d:	83 c4 20             	add    esp,0x20
c001be50:	83 ec 0c             	sub    esp,0xc
c001be53:	53                   	push   ebx
c001be54:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001be57:	83 c4 0c             	add    esp,0xc
c001be5a:	6a 07                	push   0x7
c001be5c:	6a 00                	push   0x0
c001be5e:	53                   	push   ebx
c001be5f:	e8 90 fa ff ff       	call   c001b8f4 <IDE::read(unsigned char, unsigned char)>
c001be64:	83 c4 0c             	add    esp,0xc
c001be67:	6a 07                	push   0x7
c001be69:	6a 01                	push   0x1
c001be6b:	53                   	push   ebx
c001be6c:	e8 83 fa ff ff       	call   c001b8f4 <IDE::read(unsigned char, unsigned char)>
c001be71:	83 c4 0c             	add    esp,0xc
c001be74:	6a 01                	push   0x1
c001be76:	6a 00                	push   0x0
c001be78:	53                   	push   ebx
c001be79:	e8 c2 fb ff ff       	call   c001ba40 <IDE::enableIRQs(unsigned char, bool)>
c001be7e:	83 c4 0c             	add    esp,0xc
c001be81:	6a 01                	push   0x1
c001be83:	6a 01                	push   0x1
c001be85:	53                   	push   ebx
c001be86:	e8 b5 fb ff ff       	call   c001ba40 <IDE::enableIRQs(unsigned char, bool)>
c001be8b:	83 c4 2c             	add    esp,0x2c
c001be8e:	31 c0                	xor    eax,eax
c001be90:	5b                   	pop    ebx
c001be91:	5e                   	pop    esi
c001be92:	5f                   	pop    edi
c001be93:	5d                   	pop    ebp
c001be94:	c3                   	ret    
c001be95:	90                   	nop

c001be96 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001be96:	55                   	push   ebp
c001be97:	57                   	push   edi
c001be98:	56                   	push   esi
c001be99:	53                   	push   ebx
c001be9a:	83 ec 1c             	sub    esp,0x1c
c001be9d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001bea1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001bea5:	8d 50 f8             	lea    edx,[eax-0x8]
c001bea8:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001beac:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001beb0:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001beb4:	80 fa 03             	cmp    dl,0x3
c001beb7:	77 5d                	ja     c001bf16 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c001beb9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001bebd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001bec1:	0f b6 db             	movzx  ebx,bl
c001bec4:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001bec7:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c001becb:	83 ca 80             	or     edx,0xffffff80
c001bece:	0f b6 d2             	movzx  edx,dl
c001bed1:	52                   	push   edx
c001bed2:	6a 0c                	push   0xc
c001bed4:	53                   	push   ebx
c001bed5:	56                   	push   esi
c001bed6:	e8 59 f9 ff ff       	call   c001b834 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bedb:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001bee0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bee4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001bee8:	0f b6 c0             	movzx  eax,al
c001beeb:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c001beef:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001bef1:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001bef6:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001befa:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001befe:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001bf02:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001bf0a:	83 c4 2c             	add    esp,0x2c
c001bf0d:	5b                   	pop    ebx
c001bf0e:	5e                   	pop    esi
c001bf0f:	5f                   	pop    edi
c001bf10:	5d                   	pop    ebp
c001bf11:	e9 1e f9 ff ff       	jmp    c001b834 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bf16:	3c 07                	cmp    al,0x7
c001bf18:	77 10                	ja     c001bf2a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c001bf1a:	0f b6 db             	movzx  ebx,bl
c001bf1d:	0f b6 d0             	movzx  edx,al
c001bf20:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c001bf28:	eb 2d                	jmp    c001bf57 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001bf2a:	3c 0d                	cmp    al,0xd
c001bf2c:	77 13                	ja     c001bf41 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c001bf2e:	0f b6 db             	movzx  ebx,bl
c001bf31:	0f b6 c0             	movzx  eax,al
c001bf34:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c001bf3b:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c001bf3f:	eb 16                	jmp    c001bf57 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001bf41:	3c 15                	cmp    al,0x15
c001bf43:	77 14                	ja     c001bf59 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c001bf45:	0f b6 db             	movzx  ebx,bl
c001bf48:	0f b6 c0             	movzx  eax,al
c001bf4b:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c001bf53:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c001bf57:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001bf59:	83 c4 1c             	add    esp,0x1c
c001bf5c:	5b                   	pop    ebx
c001bf5d:	5e                   	pop    esi
c001bf5e:	5f                   	pop    edi
c001bf5f:	5d                   	pop    ebp
c001bf60:	c3                   	ret    
c001bf61:	90                   	nop

c001bf62 <IDE::detect()>:
c001bf62:	55                   	push   ebp
c001bf63:	57                   	push   edi
c001bf64:	56                   	push   esi
c001bf65:	53                   	push   ebx
c001bf66:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001bf6c:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001bf73:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001bf7a:	0f 85 be 02 00 00    	jne    c001c23e <IDE::detect()+0x2dc>
c001bf80:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001bf87:	31 f6                	xor    esi,esi
c001bf89:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001bf91:	31 ed                	xor    ebp,ebp
c001bf93:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bf97:	c1 e0 06             	shl    eax,0x6
c001bf9a:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001bfa2:	89 e8                	mov    eax,ebp
c001bfa4:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001bfa8:	c1 e0 04             	shl    eax,0x4
c001bfab:	83 c8 a0             	or     eax,0xffffffa0
c001bfae:	0f b6 c0             	movzx  eax,al
c001bfb1:	50                   	push   eax
c001bfb2:	6a 06                	push   0x6
c001bfb4:	56                   	push   esi
c001bfb5:	53                   	push   ebx
c001bfb6:	e8 79 f8 ff ff       	call   c001b834 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bfbb:	83 c4 0c             	add    esp,0xc
c001bfbe:	6a 0c                	push   0xc
c001bfc0:	56                   	push   esi
c001bfc1:	53                   	push   ebx
c001bfc2:	e8 2d f9 ff ff       	call   c001b8f4 <IDE::read(unsigned char, unsigned char)>
c001bfc7:	83 c4 0c             	add    esp,0xc
c001bfca:	6a 0c                	push   0xc
c001bfcc:	56                   	push   esi
c001bfcd:	53                   	push   ebx
c001bfce:	e8 21 f9 ff ff       	call   c001b8f4 <IDE::read(unsigned char, unsigned char)>
c001bfd3:	83 c4 0c             	add    esp,0xc
c001bfd6:	6a 0c                	push   0xc
c001bfd8:	56                   	push   esi
c001bfd9:	53                   	push   ebx
c001bfda:	e8 15 f9 ff ff       	call   c001b8f4 <IDE::read(unsigned char, unsigned char)>
c001bfdf:	83 c4 0c             	add    esp,0xc
c001bfe2:	6a 0c                	push   0xc
c001bfe4:	56                   	push   esi
c001bfe5:	53                   	push   ebx
c001bfe6:	e8 09 f9 ff ff       	call   c001b8f4 <IDE::read(unsigned char, unsigned char)>
c001bfeb:	68 ec 00 00 00       	push   0xec
c001bff0:	6a 07                	push   0x7
c001bff2:	56                   	push   esi
c001bff3:	53                   	push   ebx
c001bff4:	e8 3b f8 ff ff       	call   c001b834 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bff9:	83 c4 1c             	add    esp,0x1c
c001bffc:	6a 0c                	push   0xc
c001bffe:	56                   	push   esi
c001bfff:	53                   	push   ebx
c001c000:	e8 ef f8 ff ff       	call   c001b8f4 <IDE::read(unsigned char, unsigned char)>
c001c005:	83 c4 0c             	add    esp,0xc
c001c008:	6a 0c                	push   0xc
c001c00a:	56                   	push   esi
c001c00b:	53                   	push   ebx
c001c00c:	e8 e3 f8 ff ff       	call   c001b8f4 <IDE::read(unsigned char, unsigned char)>
c001c011:	83 c4 0c             	add    esp,0xc
c001c014:	6a 0c                	push   0xc
c001c016:	56                   	push   esi
c001c017:	53                   	push   ebx
c001c018:	e8 d7 f8 ff ff       	call   c001b8f4 <IDE::read(unsigned char, unsigned char)>
c001c01d:	83 c4 0c             	add    esp,0xc
c001c020:	6a 0c                	push   0xc
c001c022:	56                   	push   esi
c001c023:	53                   	push   ebx
c001c024:	e8 cb f8 ff ff       	call   c001b8f4 <IDE::read(unsigned char, unsigned char)>
c001c029:	83 c4 0c             	add    esp,0xc
c001c02c:	6a 0c                	push   0xc
c001c02e:	56                   	push   esi
c001c02f:	53                   	push   ebx
c001c030:	e8 bf f8 ff ff       	call   c001b8f4 <IDE::read(unsigned char, unsigned char)>
c001c035:	83 c4 10             	add    esp,0x10
c001c038:	84 c0                	test   al,al
c001c03a:	0f 84 8b 01 00 00    	je     c001c1cb <IDE::detect()+0x269>
c001c040:	31 ff                	xor    edi,edi
c001c042:	50                   	push   eax
c001c043:	6a 0c                	push   0xc
c001c045:	56                   	push   esi
c001c046:	53                   	push   ebx
c001c047:	e8 a8 f8 ff ff       	call   c001b8f4 <IDE::read(unsigned char, unsigned char)>
c001c04c:	83 c4 10             	add    esp,0x10
c001c04f:	a8 01                	test   al,0x1
c001c051:	0f 85 8e 01 00 00    	jne    c001c1e5 <IDE::detect()+0x283>
c001c057:	84 c0                	test   al,al
c001c059:	78 04                	js     c001c05f <IDE::detect()+0xfd>
c001c05b:	a8 08                	test   al,0x8
c001c05d:	75 27                	jne    c001c086 <IDE::detect()+0x124>
c001c05f:	47                   	inc    edi
c001c060:	81 ff 17 01 00 00    	cmp    edi,0x117
c001c066:	7e da                	jle    c001c042 <IDE::detect()+0xe0>
c001c068:	50                   	push   eax
c001c069:	50                   	push   eax
c001c06a:	6a 00                	push   0x0
c001c06c:	68 40 4b 4c 00       	push   0x4c4b40
c001c071:	e8 ea be ff ff       	call   c0017f60 <nanoSleep(unsigned long long)>
c001c076:	83 c4 10             	add    esp,0x10
c001c079:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001c07f:	75 c1                	jne    c001c042 <IDE::detect()+0xe0>
c001c081:	e9 5f 01 00 00       	jmp    c001c1e5 <IDE::detect()+0x283>
c001c086:	31 c9                	xor    ecx,ecx
c001c088:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001c08c:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001c090:	83 ec 0c             	sub    esp,0xc
c001c093:	68 80 00 00 00       	push   0x80
c001c098:	57                   	push   edi
c001c099:	6a 00                	push   0x0
c001c09b:	56                   	push   esi
c001c09c:	53                   	push   ebx
c001c09d:	e8 f4 fd ff ff       	call   c001be96 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001c0a2:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001c0a7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c0ab:	89 d1                	mov    ecx,edx
c001c0ad:	c1 e0 06             	shl    eax,0x6
c001c0b0:	01 d8                	add    eax,ebx
c001c0b2:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001c0b9:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001c0c0:	89 f2                	mov    edx,esi
c001c0c2:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001c0c8:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001c0cc:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001c0d2:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c0d6:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001c0dd:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001c0e5:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001c0ec:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001c0f4:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001c0fa:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001c101:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001c107:	8d 54 24 58          	lea    edx,[esp+0x58]
c001c10b:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001c10f:	83 c4 20             	add    esp,0x20
c001c112:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001c115:	83 c0 02             	add    eax,0x2
c001c118:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001c11e:	83 c7 02             	add    edi,0x2
c001c121:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001c124:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001c12a:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c001c12e:	75 e2                	jne    c001c112 <IDE::detect()+0x1b0>
c001c130:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c134:	c1 e0 06             	shl    eax,0x6
c001c137:	01 d8                	add    eax,ebx
c001c139:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c001c13f:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001c146:	66 c1 ea 09          	shr    dx,0x9
c001c14a:	83 e2 01             	and    edx,0x1
c001c14d:	84 c9                	test   cl,cl
c001c14f:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001c155:	75 2f                	jne    c001c186 <IDE::detect()+0x224>
c001c157:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c001c15d:	85 c0                	test   eax,eax
c001c15f:	74 66                	je     c001c1c7 <IDE::detect()+0x265>
c001c161:	50                   	push   eax
c001c162:	55                   	push   ebp
c001c163:	56                   	push   esi
c001c164:	68 67 22 02 c0       	push   0xc0022267
c001c169:	e8 ed 2b ff ff       	call   c000ed5b <Dbg::kprintf(char const*, ...)>
c001c16e:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001c175:	e8 f2 2a ff ff       	call   c000ec6c <operator new(unsigned long)>
c001c17a:	89 c7                	mov    edi,eax
c001c17c:	89 04 24             	mov    DWORD PTR [esp],eax
c001c17f:	e8 e8 02 00 00       	call   c001c46c <ATA::ATA()>
c001c184:	eb 28                	jmp    c001c1ae <IDE::detect()+0x24c>
c001c186:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c001c18c:	55                   	push   ebp
c001c18d:	56                   	push   esi
c001c18e:	68 96 22 02 c0       	push   0xc0022296
c001c193:	e8 c3 2b ff ff       	call   c000ed5b <Dbg::kprintf(char const*, ...)>
c001c198:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c001c19f:	e8 c8 2a ff ff       	call   c000ec6c <operator new(unsigned long)>
c001c1a4:	89 c7                	mov    edi,eax
c001c1a6:	89 04 24             	mov    DWORD PTR [esp],eax
c001c1a9:	e8 ee 08 00 00       	call   c001ca9c <ATAPI::ATAPI()>
c001c1ae:	5a                   	pop    edx
c001c1af:	59                   	pop    ecx
c001c1b0:	57                   	push   edi
c001c1b1:	53                   	push   ebx
c001c1b2:	e8 af 3f ff ff       	call   c0010166 <Device::addChild(Device*)>
c001c1b7:	8b 07                	mov    eax,DWORD PTR [edi]
c001c1b9:	53                   	push   ebx
c001c1ba:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c1be:	6a 00                	push   0x0
c001c1c0:	57                   	push   edi
c001c1c1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c1c4:	83 c4 20             	add    esp,0x20
c001c1c7:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c001c1cb:	4d                   	dec    ebp
c001c1cc:	74 0a                	je     c001c1d8 <IDE::detect()+0x276>
c001c1ce:	bd 01 00 00 00       	mov    ebp,0x1
c001c1d3:	e9 bb fd ff ff       	jmp    c001bf93 <IDE::detect()+0x31>
c001c1d8:	4e                   	dec    esi
c001c1d9:	74 63                	je     c001c23e <IDE::detect()+0x2dc>
c001c1db:	be 01 00 00 00       	mov    esi,0x1
c001c1e0:	e9 ac fd ff ff       	jmp    c001bf91 <IDE::detect()+0x2f>
c001c1e5:	50                   	push   eax
c001c1e6:	6a 04                	push   0x4
c001c1e8:	56                   	push   esi
c001c1e9:	53                   	push   ebx
c001c1ea:	e8 05 f7 ff ff       	call   c001b8f4 <IDE::read(unsigned char, unsigned char)>
c001c1ef:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001c1f3:	83 c4 0c             	add    esp,0xc
c001c1f6:	6a 05                	push   0x5
c001c1f8:	56                   	push   esi
c001c1f9:	53                   	push   ebx
c001c1fa:	e8 f5 f6 ff ff       	call   c001b8f4 <IDE::read(unsigned char, unsigned char)>
c001c1ff:	83 c4 10             	add    esp,0x10
c001c202:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001c206:	80 fa 14             	cmp    dl,0x14
c001c209:	75 04                	jne    c001c20f <IDE::detect()+0x2ad>
c001c20b:	3c eb                	cmp    al,0xeb
c001c20d:	eb 07                	jmp    c001c216 <IDE::detect()+0x2b4>
c001c20f:	3c 96                	cmp    al,0x96
c001c211:	75 b8                	jne    c001c1cb <IDE::detect()+0x269>
c001c213:	80 fa 69             	cmp    dl,0x69
c001c216:	75 b3                	jne    c001c1cb <IDE::detect()+0x269>
c001c218:	68 a1 00 00 00       	push   0xa1
c001c21d:	6a 07                	push   0x7
c001c21f:	56                   	push   esi
c001c220:	53                   	push   ebx
c001c221:	e8 0e f6 ff ff       	call   c001b834 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c226:	5f                   	pop    edi
c001c227:	58                   	pop    eax
c001c228:	6a 00                	push   0x0
c001c22a:	68 40 42 0f 00       	push   0xf4240
c001c22f:	e8 2c bd ff ff       	call   c0017f60 <nanoSleep(unsigned long long)>
c001c234:	83 c4 10             	add    esp,0x10
c001c237:	b1 01                	mov    cl,0x1
c001c239:	e9 4a fe ff ff       	jmp    c001c088 <IDE::detect()+0x126>
c001c23e:	81 c4 1c 02 00 00    	add    esp,0x21c
c001c244:	5b                   	pop    ebx
c001c245:	5e                   	pop    esi
c001c246:	5f                   	pop    edi
c001c247:	5d                   	pop    ebp
c001c248:	c3                   	ret    
c001c249:	90                   	nop

c001c24a <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001c24a:	55                   	push   ebp
c001c24b:	57                   	push   edi
c001c24c:	56                   	push   esi
c001c24d:	53                   	push   ebx
c001c24e:	83 ec 1c             	sub    esp,0x1c
c001c251:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c255:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001c259:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001c25d:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001c261:	88 c3                	mov    bl,al
c001c263:	84 c0                	test   al,al
c001c265:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c269:	0f 84 67 01 00 00    	je     c001c3d6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c001c26f:	83 ec 0c             	sub    esp,0xc
c001c272:	68 c7 22 02 c0       	push   0xc00222c7
c001c277:	e8 df 2a ff ff       	call   c000ed5b <Dbg::kprintf(char const*, ...)>
c001c27c:	83 c4 10             	add    esp,0x10
c001c27f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c283:	3c 01                	cmp    al,0x1
c001c285:	75 17                	jne    c001c29e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c001c287:	83 ec 0c             	sub    esp,0xc
c001c28a:	b3 13                	mov    bl,0x13
c001c28c:	68 d3 22 02 c0       	push   0xc00222d3
c001c291:	e8 c5 2a ff ff       	call   c000ed5b <Dbg::kprintf(char const*, ...)>
c001c296:	83 c4 10             	add    esp,0x10
c001c299:	e9 25 01 00 00       	jmp    c001c3c3 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001c29e:	3c 02                	cmp    al,0x2
c001c2a0:	0f 85 ef 00 00 00    	jne    c001c395 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c001c2a6:	d1 e6                	shl    esi,1
c001c2a8:	09 ee                	or     esi,ebp
c001c2aa:	52                   	push   edx
c001c2ab:	89 f0                	mov    eax,esi
c001c2ad:	6a 01                	push   0x1
c001c2af:	0f b6 f0             	movzx  esi,al
c001c2b2:	c1 e6 06             	shl    esi,0x6
c001c2b5:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c001c2bd:	50                   	push   eax
c001c2be:	57                   	push   edi
c001c2bf:	e8 30 f6 ff ff       	call   c001b8f4 <IDE::read(unsigned char, unsigned char)>
c001c2c4:	83 c4 10             	add    esp,0x10
c001c2c7:	89 c6                	mov    esi,eax
c001c2c9:	a8 01                	test   al,0x1
c001c2cb:	74 12                	je     c001c2df <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c001c2cd:	83 ec 0c             	sub    esp,0xc
c001c2d0:	b3 07                	mov    bl,0x7
c001c2d2:	68 e8 22 02 c0       	push   0xc00222e8
c001c2d7:	e8 7f 2a ff ff       	call   c000ed5b <Dbg::kprintf(char const*, ...)>
c001c2dc:	83 c4 10             	add    esp,0x10
c001c2df:	f7 c6 02 00 00 00    	test   esi,0x2
c001c2e5:	74 12                	je     c001c2f9 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c001c2e7:	83 ec 0c             	sub    esp,0xc
c001c2ea:	b3 03                	mov    bl,0x3
c001c2ec:	68 06 23 02 c0       	push   0xc0022306
c001c2f1:	e8 65 2a ff ff       	call   c000ed5b <Dbg::kprintf(char const*, ...)>
c001c2f6:	83 c4 10             	add    esp,0x10
c001c2f9:	f7 c6 04 00 00 00    	test   esi,0x4
c001c2ff:	74 12                	je     c001c313 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c001c301:	83 ec 0c             	sub    esp,0xc
c001c304:	b3 14                	mov    bl,0x14
c001c306:	68 26 23 02 c0       	push   0xc0022326
c001c30b:	e8 4b 2a ff ff       	call   c000ed5b <Dbg::kprintf(char const*, ...)>
c001c310:	83 c4 10             	add    esp,0x10
c001c313:	f7 c6 08 00 00 00    	test   esi,0x8
c001c319:	74 12                	je     c001c32d <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c001c31b:	83 ec 0c             	sub    esp,0xc
c001c31e:	b3 03                	mov    bl,0x3
c001c320:	68 06 23 02 c0       	push   0xc0022306
c001c325:	e8 31 2a ff ff       	call   c000ed5b <Dbg::kprintf(char const*, ...)>
c001c32a:	83 c4 10             	add    esp,0x10
c001c32d:	f7 c6 10 00 00 00    	test   esi,0x10
c001c333:	74 12                	je     c001c347 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c001c335:	83 ec 0c             	sub    esp,0xc
c001c338:	b3 15                	mov    bl,0x15
c001c33a:	68 3e 23 02 c0       	push   0xc002233e
c001c33f:	e8 17 2a ff ff       	call   c000ed5b <Dbg::kprintf(char const*, ...)>
c001c344:	83 c4 10             	add    esp,0x10
c001c347:	f7 c6 20 00 00 00    	test   esi,0x20
c001c34d:	74 12                	je     c001c361 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c001c34f:	83 ec 0c             	sub    esp,0xc
c001c352:	b3 03                	mov    bl,0x3
c001c354:	68 06 23 02 c0       	push   0xc0022306
c001c359:	e8 fd 29 ff ff       	call   c000ed5b <Dbg::kprintf(char const*, ...)>
c001c35e:	83 c4 10             	add    esp,0x10
c001c361:	f7 c6 40 00 00 00    	test   esi,0x40
c001c367:	74 12                	je     c001c37b <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c001c369:	83 ec 0c             	sub    esp,0xc
c001c36c:	b3 16                	mov    bl,0x16
c001c36e:	68 58 23 02 c0       	push   0xc0022358
c001c373:	e8 e3 29 ff ff       	call   c000ed5b <Dbg::kprintf(char const*, ...)>
c001c378:	83 c4 10             	add    esp,0x10
c001c37b:	89 f0                	mov    eax,esi
c001c37d:	84 c0                	test   al,al
c001c37f:	79 42                	jns    c001c3c3 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001c381:	83 ec 0c             	sub    esp,0xc
c001c384:	b3 0d                	mov    bl,0xd
c001c386:	68 79 23 02 c0       	push   0xc0022379
c001c38b:	e8 cb 29 ff ff       	call   c000ed5b <Dbg::kprintf(char const*, ...)>
c001c390:	83 c4 10             	add    esp,0x10
c001c393:	eb 2e                	jmp    c001c3c3 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001c395:	3c 03                	cmp    al,0x3
c001c397:	75 14                	jne    c001c3ad <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c001c399:	83 ec 0c             	sub    esp,0xc
c001c39c:	b3 17                	mov    bl,0x17
c001c39e:	68 8d 23 02 c0       	push   0xc002238d
c001c3a3:	e8 b3 29 ff ff       	call   c000ed5b <Dbg::kprintf(char const*, ...)>
c001c3a8:	83 c4 10             	add    esp,0x10
c001c3ab:	eb 16                	jmp    c001c3c3 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001c3ad:	3c 04                	cmp    al,0x4
c001c3af:	75 12                	jne    c001c3c3 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001c3b1:	83 ec 0c             	sub    esp,0xc
c001c3b4:	b3 08                	mov    bl,0x8
c001c3b6:	68 a3 23 02 c0       	push   0xc00223a3
c001c3bb:	e8 9b 29 ff ff       	call   c000ed5b <Dbg::kprintf(char const*, ...)>
c001c3c0:	83 c4 10             	add    esp,0x10
c001c3c3:	50                   	push   eax
c001c3c4:	50                   	push   eax
c001c3c5:	0f b6 c3             	movzx  eax,bl
c001c3c8:	50                   	push   eax
c001c3c9:	68 bb 23 02 c0       	push   0xc00223bb
c001c3ce:	e8 88 29 ff ff       	call   c000ed5b <Dbg::kprintf(char const*, ...)>
c001c3d3:	83 c4 10             	add    esp,0x10
c001c3d6:	83 c4 1c             	add    esp,0x1c
c001c3d9:	88 d8                	mov    al,bl
c001c3db:	5b                   	pop    ebx
c001c3dc:	5e                   	pop    esi
c001c3dd:	5f                   	pop    edi
c001c3de:	5d                   	pop    ebp
c001c3df:	c3                   	ret    

c001c3e0 <IDE::polling(unsigned char, unsigned int)>:
c001c3e0:	57                   	push   edi
c001c3e1:	56                   	push   esi
c001c3e2:	53                   	push   ebx
c001c3e3:	bb 04 00 00 00       	mov    ebx,0x4
c001c3e8:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001c3ec:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001c3f1:	52                   	push   edx
c001c3f2:	6a 0c                	push   0xc
c001c3f4:	56                   	push   esi
c001c3f5:	57                   	push   edi
c001c3f6:	e8 f9 f4 ff ff       	call   c001b8f4 <IDE::read(unsigned char, unsigned char)>
c001c3fb:	83 c4 10             	add    esp,0x10
c001c3fe:	4b                   	dec    ebx
c001c3ff:	75 f0                	jne    c001c3f1 <IDE::polling(unsigned char, unsigned int)+0x11>
c001c401:	bb a0 86 01 00       	mov    ebx,0x186a0
c001c406:	50                   	push   eax
c001c407:	6a 0c                	push   0xc
c001c409:	56                   	push   esi
c001c40a:	57                   	push   edi
c001c40b:	e8 e4 f4 ff ff       	call   c001b8f4 <IDE::read(unsigned char, unsigned char)>
c001c410:	83 c4 10             	add    esp,0x10
c001c413:	a8 01                	test   al,0x1
c001c415:	74 12                	je     c001c429 <IDE::polling(unsigned char, unsigned int)+0x49>
c001c417:	83 ec 0c             	sub    esp,0xc
c001c41a:	68 d5 23 02 c0       	push   0xc00223d5
c001c41f:	e8 37 29 ff ff       	call   c000ed5b <Dbg::kprintf(char const*, ...)>
c001c424:	83 c4 10             	add    esp,0x10
c001c427:	eb 17                	jmp    c001c440 <IDE::polling(unsigned char, unsigned int)+0x60>
c001c429:	a8 20                	test   al,0x20
c001c42b:	75 0f                	jne    c001c43c <IDE::polling(unsigned char, unsigned int)+0x5c>
c001c42d:	4b                   	dec    ebx
c001c42e:	74 10                	je     c001c440 <IDE::polling(unsigned char, unsigned int)+0x60>
c001c430:	84 c0                	test   al,al
c001c432:	78 d2                	js     c001c406 <IDE::polling(unsigned char, unsigned int)+0x26>
c001c434:	a8 08                	test   al,0x8
c001c436:	74 ce                	je     c001c406 <IDE::polling(unsigned char, unsigned int)+0x26>
c001c438:	31 c0                	xor    eax,eax
c001c43a:	eb 06                	jmp    c001c442 <IDE::polling(unsigned char, unsigned int)+0x62>
c001c43c:	b0 01                	mov    al,0x1
c001c43e:	eb 02                	jmp    c001c442 <IDE::polling(unsigned char, unsigned int)+0x62>
c001c440:	b0 02                	mov    al,0x2
c001c442:	5b                   	pop    ebx
c001c443:	5e                   	pop    esi
c001c444:	5f                   	pop    edi
c001c445:	c3                   	ret    

c001c446 <ATA::close(int, int, void*)>:
c001c446:	83 ec 0c             	sub    esp,0xc
c001c449:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c44d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001c453:	85 c0                	test   eax,eax
c001c455:	74 0c                	je     c001c463 <ATA::close(int, int, void*)+0x1d>
c001c457:	83 ec 0c             	sub    esp,0xc
c001c45a:	8b 10                	mov    edx,DWORD PTR [eax]
c001c45c:	50                   	push   eax
c001c45d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001c460:	83 c4 10             	add    esp,0x10
c001c463:	31 c0                	xor    eax,eax
c001c465:	83 c4 0c             	add    esp,0xc
c001c468:	c3                   	ret    
c001c469:	90                   	nop

c001c46a <ATA::powerSaving(PowerSavingLevel)>:
c001c46a:	c3                   	ret    
c001c46b:	90                   	nop

c001c46c <ATA::ATA()>:
c001c46c:	83 ec 0c             	sub    esp,0xc
c001c46f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c473:	83 ec 04             	sub    esp,0x4
c001c476:	68 00 02 00 00       	push   0x200
c001c47b:	68 18 24 02 c0       	push   0xc0022418
c001c480:	50                   	push   eax
c001c481:	e8 e6 40 ff ff       	call   c001056c <PhysicalDisk::PhysicalDisk(char const*, int)>
c001c486:	83 c4 10             	add    esp,0x10
c001c489:	ba 44 24 02 c0       	mov    edx,0xc0022444
c001c48e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c492:	89 10                	mov    DWORD PTR [eax],edx
c001c494:	90                   	nop
c001c495:	83 c4 0c             	add    esp,0xc
c001c498:	c3                   	ret    
c001c499:	90                   	nop

c001c49a <ATA::flush(bool)>:
c001c49a:	53                   	push   ebx
c001c49b:	83 ec 08             	sub    esp,0x8
c001c49e:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c001c4a3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c4a7:	19 c0                	sbb    eax,eax
c001c4a9:	83 e0 fd             	and    eax,0xfffffffd
c001c4ac:	05 ea 00 00 00       	add    eax,0xea
c001c4b1:	50                   	push   eax
c001c4b2:	6a 07                	push   0x7
c001c4b4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c4bb:	50                   	push   eax
c001c4bc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c4c2:	e8 6d f3 ff ff       	call   c001b834 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c4c7:	83 c4 0c             	add    esp,0xc
c001c4ca:	6a 00                	push   0x0
c001c4cc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c4d3:	50                   	push   eax
c001c4d4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c4da:	e8 01 ff ff ff       	call   c001c3e0 <IDE::polling(unsigned char, unsigned int)>
c001c4df:	83 c4 18             	add    esp,0x18
c001c4e2:	5b                   	pop    ebx
c001c4e3:	c3                   	ret    

c001c4e4 <ATA::readyForCommand()>:
c001c4e4:	56                   	push   esi
c001c4e5:	53                   	push   ebx
c001c4e6:	31 db                	xor    ebx,ebx
c001c4e8:	50                   	push   eax
c001c4e9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c4ed:	50                   	push   eax
c001c4ee:	6a 0c                	push   0xc
c001c4f0:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001c4f7:	50                   	push   eax
c001c4f8:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001c4fe:	e8 f1 f3 ff ff       	call   c001b8f4 <IDE::read(unsigned char, unsigned char)>
c001c503:	83 c4 10             	add    esp,0x10
c001c506:	a8 88                	test   al,0x88
c001c508:	74 23                	je     c001c52d <ATA::readyForCommand()+0x49>
c001c50a:	43                   	inc    ebx
c001c50b:	83 fb 63             	cmp    ebx,0x63
c001c50e:	7e dd                	jle    c001c4ed <ATA::readyForCommand()+0x9>
c001c510:	51                   	push   ecx
c001c511:	51                   	push   ecx
c001c512:	6a 00                	push   0x0
c001c514:	68 40 42 0f 00       	push   0xf4240
c001c519:	e8 42 ba ff ff       	call   c0017f60 <nanoSleep(unsigned long long)>
c001c51e:	83 c4 10             	add    esp,0x10
c001c521:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001c527:	75 c4                	jne    c001c4ed <ATA::readyForCommand()+0x9>
c001c529:	31 c0                	xor    eax,eax
c001c52b:	eb 02                	jmp    c001c52f <ATA::readyForCommand()+0x4b>
c001c52d:	b0 01                	mov    al,0x1
c001c52f:	5a                   	pop    edx
c001c530:	5b                   	pop    ebx
c001c531:	5e                   	pop    esi
c001c532:	c3                   	ret    
c001c533:	90                   	nop

c001c534 <ATA::access(unsigned long long, int, void*, bool)>:
c001c534:	55                   	push   ebp
c001c535:	57                   	push   edi
c001c536:	56                   	push   esi
c001c537:	53                   	push   ebx
c001c538:	83 ec 2c             	sub    esp,0x2c
c001c53b:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001c53f:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001c543:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001c547:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c54b:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001c54f:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001c553:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001c557:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001c55d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c561:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001c567:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c56b:	c1 e0 06             	shl    eax,0x6
c001c56e:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001c576:	74 5d                	je     c001c5d5 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c001c578:	89 fa                	mov    edx,edi
c001c57a:	89 f0                	mov    eax,esi
c001c57c:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001c580:	c1 ea 1c             	shr    edx,0x1c
c001c583:	89 d1                	mov    ecx,edx
c001c585:	09 c1                	or     ecx,eax
c001c587:	74 25                	je     c001c5ae <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001c589:	31 ed                	xor    ebp,ebp
c001c58b:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001c592:	89 fa                	mov    edx,edi
c001c594:	89 f0                	mov    eax,esi
c001c596:	0f ad d0             	shrd   eax,edx,cl
c001c599:	d3 ea                	shr    edx,cl
c001c59b:	f6 c1 20             	test   cl,0x20
c001c59e:	74 02                	je     c001c5a2 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001c5a0:	89 d0                	mov    eax,edx
c001c5a2:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001c5a6:	45                   	inc    ebp
c001c5a7:	83 fd 06             	cmp    ebp,0x6
c001c5aa:	75 df                	jne    c001c58b <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001c5ac:	eb 76                	jmp    c001c624 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c001c5ae:	89 f0                	mov    eax,esi
c001c5b0:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001c5b5:	89 fa                	mov    edx,edi
c001c5b7:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001c5be:	0f ac d0 10          	shrd   eax,edx,0x10
c001c5c2:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001c5c7:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001c5cb:	c1 ee 18             	shr    esi,0x18
c001c5ce:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001c5d3:	eb 56                	jmp    c001c62b <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001c5d5:	6a 00                	push   0x0
c001c5d7:	6a 3f                	push   0x3f
c001c5d9:	57                   	push   edi
c001c5da:	56                   	push   esi
c001c5db:	e8 dc 1e 00 00       	call   c001e4bc <__umoddi3>
c001c5e0:	83 c4 10             	add    esp,0x10
c001c5e3:	40                   	inc    eax
c001c5e4:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001c5e8:	6a 00                	push   0x0
c001c5ea:	68 f0 03 00 00       	push   0x3f0
c001c5ef:	57                   	push   edi
c001c5f0:	56                   	push   esi
c001c5f1:	e8 c6 1d 00 00       	call   c001e3bc <__udivdi3>
c001c5f6:	83 c4 10             	add    esp,0x10
c001c5f9:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001c5fe:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001c605:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001c60a:	6a 00                	push   0x0
c001c60c:	6a 3f                	push   0x3f
c001c60e:	57                   	push   edi
c001c60f:	56                   	push   esi
c001c610:	e8 a7 1d 00 00       	call   c001e3bc <__udivdi3>
c001c615:	83 c4 10             	add    esp,0x10
c001c618:	89 c6                	mov    esi,eax
c001c61a:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001c61f:	83 e6 0f             	and    esi,0xf
c001c622:	eb 07                	jmp    c001c62b <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001c624:	31 f6                	xor    esi,esi
c001c626:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001c62b:	bf 01 00 00 00       	mov    edi,0x1
c001c630:	50                   	push   eax
c001c631:	6a 00                	push   0x0
c001c633:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c63a:	50                   	push   eax
c001c63b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c63f:	e8 fc f3 ff ff       	call   c001ba40 <IDE::enableIRQs(unsigned char, bool)>
c001c644:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c647:	e8 98 fe ff ff       	call   c001c4e4 <ATA::readyForCommand()>
c001c64c:	83 c4 10             	add    esp,0x10
c001c64f:	84 c0                	test   al,al
c001c651:	0f 84 50 02 00 00    	je     c001c8a7 <ATA::access(unsigned long long, int, void*, bool)+0x373>
c001c657:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001c65d:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001c663:	c1 e0 04             	shl    eax,0x4
c001c666:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001c66d:	09 c6                	or     esi,eax
c001c66f:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001c674:	75 05                	jne    c001c67b <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001c676:	83 ce a0             	or     esi,0xffffffa0
c001c679:	eb 03                	jmp    c001c67e <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c001c67b:	83 ce e0             	or     esi,0xffffffe0
c001c67e:	89 f0                	mov    eax,esi
c001c680:	0f b6 f0             	movzx  esi,al
c001c683:	56                   	push   esi
c001c684:	6a 06                	push   0x6
c001c686:	51                   	push   ecx
c001c687:	52                   	push   edx
c001c688:	e8 a7 f1 ff ff       	call   c001b834 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c68d:	83 c4 10             	add    esp,0x10
c001c690:	6a 00                	push   0x0
c001c692:	6a 01                	push   0x1
c001c694:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c69b:	50                   	push   eax
c001c69c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c6a2:	e8 8d f1 ff ff       	call   c001b834 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c6a7:	83 c4 10             	add    esp,0x10
c001c6aa:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001c6af:	75 6e                	jne    c001c71f <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c001c6b1:	6a 00                	push   0x0
c001c6b3:	6a 08                	push   0x8
c001c6b5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c6bc:	50                   	push   eax
c001c6bd:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c6c3:	e8 6c f1 ff ff       	call   c001b834 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c6c8:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001c6cd:	50                   	push   eax
c001c6ce:	6a 09                	push   0x9
c001c6d0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c6d7:	50                   	push   eax
c001c6d8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c6de:	e8 51 f1 ff ff       	call   c001b834 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c6e3:	83 c4 20             	add    esp,0x20
c001c6e6:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001c6eb:	50                   	push   eax
c001c6ec:	6a 0a                	push   0xa
c001c6ee:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c6f5:	50                   	push   eax
c001c6f6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c6fc:	e8 33 f1 ff ff       	call   c001b834 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c701:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001c706:	50                   	push   eax
c001c707:	6a 0b                	push   0xb
c001c709:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c710:	50                   	push   eax
c001c711:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c717:	e8 18 f1 ff ff       	call   c001b834 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c71c:	83 c4 20             	add    esp,0x20
c001c71f:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001c724:	50                   	push   eax
c001c725:	6a 02                	push   0x2
c001c727:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c72e:	50                   	push   eax
c001c72f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c735:	e8 fa f0 ff ff       	call   c001b834 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c73a:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001c73f:	50                   	push   eax
c001c740:	6a 03                	push   0x3
c001c742:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c749:	50                   	push   eax
c001c74a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c750:	e8 df f0 ff ff       	call   c001b834 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c755:	83 c4 20             	add    esp,0x20
c001c758:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001c75d:	50                   	push   eax
c001c75e:	6a 04                	push   0x4
c001c760:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c767:	50                   	push   eax
c001c768:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c76e:	e8 c1 f0 ff ff       	call   c001b834 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c773:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001c778:	50                   	push   eax
c001c779:	6a 05                	push   0x5
c001c77b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c782:	50                   	push   eax
c001c783:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c789:	e8 a6 f0 ff ff       	call   c001b834 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c78e:	83 c4 20             	add    esp,0x20
c001c791:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001c796:	0f 94 c0             	sete   al
c001c799:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001c79e:	74 09                	je     c001c7a9 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c001c7a0:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c001c7a7:	eb 07                	jmp    c001c7b0 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c001c7a9:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c001c7b0:	0f b6 c0             	movzx  eax,al
c001c7b3:	50                   	push   eax
c001c7b4:	6a 07                	push   0x7
c001c7b6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c7bd:	50                   	push   eax
c001c7be:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c7c4:	e8 6b f0 ff ff       	call   c001b834 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c7c9:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001c7cd:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001c7d1:	83 c4 10             	add    esp,0x10
c001c7d4:	85 f6                	test   esi,esi
c001c7d6:	0f 84 ac 00 00 00    	je     c001c888 <ATA::access(unsigned long long, int, void*, bool)+0x354>
c001c7dc:	50                   	push   eax
c001c7dd:	6a 01                	push   0x1
c001c7df:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c7e6:	50                   	push   eax
c001c7e7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c7ed:	e8 ee fb ff ff       	call   c001c3e0 <IDE::polling(unsigned char, unsigned int)>
c001c7f2:	83 c4 10             	add    esp,0x10
c001c7f5:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001c7fb:	84 c0                	test   al,al
c001c7fd:	74 20                	je     c001c81f <ATA::access(unsigned long long, int, void*, bool)+0x2eb>
c001c7ff:	0f b6 f8             	movzx  edi,al
c001c802:	0f b6 d2             	movzx  edx,dl
c001c805:	57                   	push   edi
c001c806:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001c80d:	50                   	push   eax
c001c80e:	52                   	push   edx
c001c80f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c815:	e8 30 fa ff ff       	call   c001c24a <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001c81a:	e9 85 00 00 00       	jmp    c001c8a4 <ATA::access(unsigned long long, int, void*, bool)+0x370>
c001c81f:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001c824:	74 41                	je     c001c867 <ATA::access(unsigned long long, int, void*, bool)+0x333>
c001c826:	31 c9                	xor    ecx,ecx
c001c828:	66 8b 2c 4f          	mov    bp,WORD PTR [edi+ecx*2]
c001c82c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001c830:	50                   	push   eax
c001c831:	50                   	push   eax
c001c832:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c839:	50                   	push   eax
c001c83a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c840:	e8 dd ef ff ff       	call   c001b822 <IDE::getBase(unsigned char)>
c001c845:	89 c2                	mov    edx,eax
c001c847:	89 e8                	mov    eax,ebp
c001c849:	66 ef                	out    dx,ax
c001c84b:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001c84f:	83 c4 10             	add    esp,0x10
c001c852:	41                   	inc    ecx
c001c853:	81 f9 00 01 00 00    	cmp    ecx,0x100
c001c859:	75 cd                	jne    c001c828 <ATA::access(unsigned long long, int, void*, bool)+0x2f4>
c001c85b:	4e                   	dec    esi
c001c85c:	81 c7 00 02 00 00    	add    edi,0x200
c001c862:	e9 6d ff ff ff       	jmp    c001c7d4 <ATA::access(unsigned long long, int, void*, bool)+0x2a0>
c001c867:	0f b6 d2             	movzx  edx,dl
c001c86a:	51                   	push   ecx
c001c86b:	51                   	push   ecx
c001c86c:	52                   	push   edx
c001c86d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c873:	e8 aa ef ff ff       	call   c001b822 <IDE::getBase(unsigned char)>
c001c878:	b9 00 01 00 00       	mov    ecx,0x100
c001c87d:	89 c2                	mov    edx,eax
c001c87f:	fc                   	cld    
c001c880:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001c883:	83 c4 10             	add    esp,0x10
c001c886:	eb d3                	jmp    c001c85b <ATA::access(unsigned long long, int, void*, bool)+0x327>
c001c888:	31 ff                	xor    edi,edi
c001c88a:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001c88f:	74 16                	je     c001c8a7 <ATA::access(unsigned long long, int, void*, bool)+0x373>
c001c891:	50                   	push   eax
c001c892:	50                   	push   eax
c001c893:	31 c0                	xor    eax,eax
c001c895:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c001c89a:	0f 94 c0             	sete   al
c001c89d:	50                   	push   eax
c001c89e:	53                   	push   ebx
c001c89f:	e8 f6 fb ff ff       	call   c001c49a <ATA::flush(bool)>
c001c8a4:	83 c4 10             	add    esp,0x10
c001c8a7:	83 c4 2c             	add    esp,0x2c
c001c8aa:	89 f8                	mov    eax,edi
c001c8ac:	5b                   	pop    ebx
c001c8ad:	5e                   	pop    esi
c001c8ae:	5f                   	pop    edi
c001c8af:	5d                   	pop    ebp
c001c8b0:	c3                   	ret    
c001c8b1:	90                   	nop

c001c8b2 <ATA::read(unsigned long long, int, void*)>:
c001c8b2:	57                   	push   edi
c001c8b3:	b8 04 00 00 00       	mov    eax,0x4
c001c8b8:	56                   	push   esi
c001c8b9:	53                   	push   ebx
c001c8ba:	83 ec 10             	sub    esp,0x10
c001c8bd:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001c8c1:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001c8c5:	8d 4b ff             	lea    ecx,[ebx-0x1]
c001c8c8:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001c8cc:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c8d0:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c001c8d6:	77 3b                	ja     c001c913 <ATA::read(unsigned long long, int, void*)+0x61>
c001c8d8:	b8 06 00 00 00       	mov    eax,0x6
c001c8dd:	85 d2                	test   edx,edx
c001c8df:	74 32                	je     c001c913 <ATA::read(unsigned long long, int, void*)+0x61>
c001c8e1:	50                   	push   eax
c001c8e2:	50                   	push   eax
c001c8e3:	6a 00                	push   0x0
c001c8e5:	52                   	push   edx
c001c8e6:	53                   	push   ebx
c001c8e7:	57                   	push   edi
c001c8e8:	56                   	push   esi
c001c8e9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001c8ed:	e8 42 fc ff ff       	call   c001c534 <ATA::access(unsigned long long, int, void*, bool)>
c001c8f2:	83 c4 20             	add    esp,0x20
c001c8f5:	85 c0                	test   eax,eax
c001c8f7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c8fb:	75 11                	jne    c001c90e <ATA::read(unsigned long long, int, void*)+0x5c>
c001c8fd:	01 1d a4 51 02 c0    	add    DWORD PTR ds:0xc00251a4,ebx
c001c903:	e8 f2 02 ff ff       	call   c000cbfa <VgaText::updateDiskUsage()>
c001c908:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c90c:	eb 05                	jmp    c001c913 <ATA::read(unsigned long long, int, void*)+0x61>
c001c90e:	b8 01 00 00 00       	mov    eax,0x1
c001c913:	83 c4 10             	add    esp,0x10
c001c916:	5b                   	pop    ebx
c001c917:	5e                   	pop    esi
c001c918:	5f                   	pop    edi
c001c919:	c3                   	ret    

c001c91a <ATA::write(unsigned long long, int, void*)>:
c001c91a:	57                   	push   edi
c001c91b:	b8 04 00 00 00       	mov    eax,0x4
c001c920:	56                   	push   esi
c001c921:	53                   	push   ebx
c001c922:	83 ec 10             	sub    esp,0x10
c001c925:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001c929:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001c92d:	8d 4b ff             	lea    ecx,[ebx-0x1]
c001c930:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001c934:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c938:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c001c93e:	77 3b                	ja     c001c97b <ATA::write(unsigned long long, int, void*)+0x61>
c001c940:	b8 06 00 00 00       	mov    eax,0x6
c001c945:	85 d2                	test   edx,edx
c001c947:	74 32                	je     c001c97b <ATA::write(unsigned long long, int, void*)+0x61>
c001c949:	50                   	push   eax
c001c94a:	50                   	push   eax
c001c94b:	6a 01                	push   0x1
c001c94d:	52                   	push   edx
c001c94e:	53                   	push   ebx
c001c94f:	57                   	push   edi
c001c950:	56                   	push   esi
c001c951:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001c955:	e8 da fb ff ff       	call   c001c534 <ATA::access(unsigned long long, int, void*, bool)>
c001c95a:	83 c4 20             	add    esp,0x20
c001c95d:	85 c0                	test   eax,eax
c001c95f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c963:	75 11                	jne    c001c976 <ATA::write(unsigned long long, int, void*)+0x5c>
c001c965:	01 1d a0 51 02 c0    	add    DWORD PTR ds:0xc00251a0,ebx
c001c96b:	e8 8a 02 ff ff       	call   c000cbfa <VgaText::updateDiskUsage()>
c001c970:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c974:	eb 05                	jmp    c001c97b <ATA::write(unsigned long long, int, void*)+0x61>
c001c976:	b8 01 00 00 00       	mov    eax,0x1
c001c97b:	83 c4 10             	add    esp,0x10
c001c97e:	5b                   	pop    ebx
c001c97f:	5e                   	pop    esi
c001c980:	5f                   	pop    edi
c001c981:	c3                   	ret    

c001c982 <ATA::detectCHS()>:
c001c982:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c986:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001c98c:	c1 e0 06             	shl    eax,0x6
c001c98f:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001c995:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001c99f:	c7 44 24 04 27 24 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022427
c001c9a7:	e9 44 80 ff ff       	jmp    c00149f0 <Krnl::panic(char const*)>

c001c9ac <ATA::open(int, int, void*)>:
c001c9ac:	53                   	push   ebx
c001c9ad:	83 ec 08             	sub    esp,0x8
c001c9b0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c9b4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c9b8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c9bc:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001c9c2:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001c9c8:	c1 e0 06             	shl    eax,0x6
c001c9cb:	01 d0                	add    eax,edx
c001c9cd:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001c9d4:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001c9da:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001c9e1:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001c9eb:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001c9f1:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001c9f8:	75 0c                	jne    c001ca06 <ATA::open(int, int, void*)+0x5a>
c001c9fa:	83 ec 0c             	sub    esp,0xc
c001c9fd:	53                   	push   ebx
c001c9fe:	e8 7f ff ff ff       	call   c001c982 <ATA::detectCHS()>
c001ca03:	83 c4 10             	add    esp,0x10
c001ca06:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001ca0c:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001ca12:	c1 e0 06             	shl    eax,0x6
c001ca15:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001ca1c:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001ca26:	d1 e8                	shr    eax,1
c001ca28:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001ca2e:	6a 04                	push   0x4
c001ca30:	6a 0c                	push   0xc
c001ca32:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ca39:	50                   	push   eax
c001ca3a:	52                   	push   edx
c001ca3b:	e8 f4 ed ff ff       	call   c001b834 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ca40:	90                   	nop
c001ca41:	90                   	nop
c001ca42:	6a 00                	push   0x0
c001ca44:	6a 0c                	push   0xc
c001ca46:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ca4d:	50                   	push   eax
c001ca4e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ca54:	e8 db ed ff ff       	call   c001b834 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ca59:	83 c4 14             	add    esp,0x14
c001ca5c:	53                   	push   ebx
c001ca5d:	e8 72 3b ff ff       	call   c00105d4 <PhysicalDisk::startCache()>
c001ca62:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ca65:	e8 78 54 ff ff       	call   c0011ee2 <createPartitionsForDisk(PhysicalDisk*)>
c001ca6a:	31 c0                	xor    eax,eax
c001ca6c:	83 c4 18             	add    esp,0x18
c001ca6f:	5b                   	pop    ebx
c001ca70:	c3                   	ret    
c001ca71:	90                   	nop

c001ca72 <ATAPI::write(unsigned long long, int, void*)>:
c001ca72:	b8 03 00 00 00       	mov    eax,0x3
c001ca77:	c3                   	ret    

c001ca78 <ATAPI::close(int, int, void*)>:
c001ca78:	83 ec 0c             	sub    esp,0xc
c001ca7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca7f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001ca85:	85 c0                	test   eax,eax
c001ca87:	74 0c                	je     c001ca95 <ATAPI::close(int, int, void*)+0x1d>
c001ca89:	83 ec 0c             	sub    esp,0xc
c001ca8c:	8b 10                	mov    edx,DWORD PTR [eax]
c001ca8e:	50                   	push   eax
c001ca8f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001ca92:	83 c4 10             	add    esp,0x10
c001ca95:	31 c0                	xor    eax,eax
c001ca97:	83 c4 0c             	add    esp,0xc
c001ca9a:	c3                   	ret    
c001ca9b:	90                   	nop

c001ca9c <ATAPI::ATAPI()>:
c001ca9c:	83 ec 0c             	sub    esp,0xc
c001ca9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001caa3:	83 ec 04             	sub    esp,0x4
c001caa6:	68 00 08 00 00       	push   0x800
c001caab:	68 70 24 02 c0       	push   0xc0022470
c001cab0:	50                   	push   eax
c001cab1:	e8 b6 3a ff ff       	call   c001056c <PhysicalDisk::PhysicalDisk(char const*, int)>
c001cab6:	83 c4 10             	add    esp,0x10
c001cab9:	ba b0 24 02 c0       	mov    edx,0xc00224b0
c001cabe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cac2:	89 10                	mov    DWORD PTR [eax],edx
c001cac4:	90                   	nop
c001cac5:	83 c4 0c             	add    esp,0xc
c001cac8:	c3                   	ret    
c001cac9:	90                   	nop

c001caca <ATAPI::readyForCommand()>:
c001caca:	56                   	push   esi
c001cacb:	53                   	push   ebx
c001cacc:	31 db                	xor    ebx,ebx
c001cace:	50                   	push   eax
c001cacf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001cad3:	50                   	push   eax
c001cad4:	6a 0c                	push   0xc
c001cad6:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001cadd:	50                   	push   eax
c001cade:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001cae4:	e8 0b ee ff ff       	call   c001b8f4 <IDE::read(unsigned char, unsigned char)>
c001cae9:	83 c4 10             	add    esp,0x10
c001caec:	a8 88                	test   al,0x88
c001caee:	74 23                	je     c001cb13 <ATAPI::readyForCommand()+0x49>
c001caf0:	43                   	inc    ebx
c001caf1:	83 fb 63             	cmp    ebx,0x63
c001caf4:	7e dd                	jle    c001cad3 <ATAPI::readyForCommand()+0x9>
c001caf6:	51                   	push   ecx
c001caf7:	51                   	push   ecx
c001caf8:	6a 00                	push   0x0
c001cafa:	68 40 42 0f 00       	push   0xf4240
c001caff:	e8 5c b4 ff ff       	call   c0017f60 <nanoSleep(unsigned long long)>
c001cb04:	83 c4 10             	add    esp,0x10
c001cb07:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001cb0d:	75 c4                	jne    c001cad3 <ATAPI::readyForCommand()+0x9>
c001cb0f:	31 c0                	xor    eax,eax
c001cb11:	eb 02                	jmp    c001cb15 <ATAPI::readyForCommand()+0x4b>
c001cb13:	b0 01                	mov    al,0x1
c001cb15:	5a                   	pop    edx
c001cb16:	5b                   	pop    ebx
c001cb17:	5e                   	pop    esi
c001cb18:	c3                   	ret    
c001cb19:	90                   	nop

c001cb1a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001cb1a:	55                   	push   ebp
c001cb1b:	57                   	push   edi
c001cb1c:	56                   	push   esi
c001cb1d:	53                   	push   ebx
c001cb1e:	83 ec 20             	sub    esp,0x20
c001cb21:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001cb25:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001cb29:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001cb2d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001cb31:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001cb35:	6a 01                	push   0x1
c001cb37:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cb3e:	50                   	push   eax
c001cb3f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cb45:	e8 f6 ee ff ff       	call   c001ba40 <IDE::enableIRQs(unsigned char, bool)>
c001cb4a:	5e                   	pop    esi
c001cb4b:	58                   	pop    eax
c001cb4c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cb53:	50                   	push   eax
c001cb54:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cb5a:	e8 af ec ff ff       	call   c001b80e <IDE::prepareInterrupt(unsigned char)>
c001cb5f:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cb62:	e8 63 ff ff ff       	call   c001caca <ATAPI::readyForCommand()>
c001cb67:	83 c4 10             	add    esp,0x10
c001cb6a:	84 c0                	test   al,al
c001cb6c:	75 0a                	jne    c001cb78 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001cb6e:	bb 01 00 00 00       	mov    ebx,0x1
c001cb73:	e9 57 02 00 00       	jmp    c001cdcf <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001cb78:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c001cb7e:	c1 e0 04             	shl    eax,0x4
c001cb81:	0f b6 c0             	movzx  eax,al
c001cb84:	50                   	push   eax
c001cb85:	6a 06                	push   0x6
c001cb87:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cb8e:	50                   	push   eax
c001cb8f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cb95:	e8 9a ec ff ff       	call   c001b834 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cb9a:	6a 00                	push   0x0
c001cb9c:	6a 01                	push   0x1
c001cb9e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cba5:	50                   	push   eax
c001cba6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cbac:	e8 83 ec ff ff       	call   c001b834 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cbb1:	83 c4 20             	add    esp,0x20
c001cbb4:	0f b6 c3             	movzx  eax,bl
c001cbb7:	0f b6 df             	movzx  ebx,bh
c001cbba:	50                   	push   eax
c001cbbb:	6a 04                	push   0x4
c001cbbd:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cbc4:	50                   	push   eax
c001cbc5:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cbcb:	e8 64 ec ff ff       	call   c001b834 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cbd0:	53                   	push   ebx
c001cbd1:	6a 05                	push   0x5
c001cbd3:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cbda:	50                   	push   eax
c001cbdb:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cbe1:	e8 4e ec ff ff       	call   c001b834 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cbe6:	83 c4 20             	add    esp,0x20
c001cbe9:	68 a0 00 00 00       	push   0xa0
c001cbee:	6a 07                	push   0x7
c001cbf0:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cbf7:	50                   	push   eax
c001cbf8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cbfe:	e8 31 ec ff ff       	call   c001b834 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cc03:	83 c4 0c             	add    esp,0xc
c001cc06:	6a 01                	push   0x1
c001cc08:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cc0f:	50                   	push   eax
c001cc10:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cc16:	e8 c5 f7 ff ff       	call   c001c3e0 <IDE::polling(unsigned char, unsigned int)>
c001cc1b:	83 c4 10             	add    esp,0x10
c001cc1e:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c001cc24:	84 c0                	test   al,al
c001cc26:	74 23                	je     c001cc4b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001cc28:	0f b6 d8             	movzx  ebx,al
c001cc2b:	0f b6 d2             	movzx  edx,dl
c001cc2e:	53                   	push   ebx
c001cc2f:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c001cc36:	50                   	push   eax
c001cc37:	52                   	push   edx
c001cc38:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cc3e:	e8 07 f6 ff ff       	call   c001c24a <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001cc43:	83 c4 10             	add    esp,0x10
c001cc46:	e9 84 01 00 00       	jmp    c001cdcf <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001cc4b:	0f b6 d2             	movzx  edx,dl
c001cc4e:	53                   	push   ebx
c001cc4f:	53                   	push   ebx
c001cc50:	52                   	push   edx
c001cc51:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cc57:	e8 c6 eb ff ff       	call   c001b822 <IDE::getBase(unsigned char)>
c001cc5c:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001cc60:	b9 06 00 00 00       	mov    ecx,0x6
c001cc65:	89 c2                	mov    edx,eax
c001cc67:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001cc6a:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001cc6e:	83 c4 10             	add    esp,0x10
c001cc71:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001cc77:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001cc7e:	85 db                	test   ebx,ebx
c001cc80:	0f 84 ec 00 00 00    	je     c001cd72 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001cc86:	51                   	push   ecx
c001cc87:	51                   	push   ecx
c001cc88:	52                   	push   edx
c001cc89:	50                   	push   eax
c001cc8a:	e8 13 ed ff ff       	call   c001b9a2 <IDE::waitInterrupt(unsigned char)>
c001cc8f:	83 c4 10             	add    esp,0x10
c001cc92:	84 c0                	test   al,al
c001cc94:	0f 84 d4 fe ff ff    	je     c001cb6e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001cc9a:	56                   	push   esi
c001cc9b:	56                   	push   esi
c001cc9c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cca3:	50                   	push   eax
c001cca4:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ccaa:	e8 5f eb ff ff       	call   c001b80e <IDE::prepareInterrupt(unsigned char)>
c001ccaf:	83 c4 0c             	add    esp,0xc
c001ccb2:	6a 04                	push   0x4
c001ccb4:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ccbb:	50                   	push   eax
c001ccbc:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ccc2:	e8 2d ec ff ff       	call   c001b8f4 <IDE::read(unsigned char, unsigned char)>
c001ccc7:	83 c4 0c             	add    esp,0xc
c001ccca:	89 c6                	mov    esi,eax
c001cccc:	6a 05                	push   0x5
c001ccce:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ccd5:	50                   	push   eax
c001ccd6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ccdc:	e8 13 ec ff ff       	call   c001b8f4 <IDE::read(unsigned char, unsigned char)>
c001cce1:	89 f1                	mov    ecx,esi
c001cce3:	0f b6 c0             	movzx  eax,al
c001cce6:	0f b6 f1             	movzx  esi,cl
c001cce9:	c1 e0 08             	shl    eax,0x8
c001ccec:	09 c6                	or     esi,eax
c001ccee:	d1 fe                	sar    esi,1
c001ccf0:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001ccf4:	83 c4 10             	add    esp,0x10
c001ccf7:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001ccfc:	74 41                	je     c001cd3f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c001ccfe:	31 c9                	xor    ecx,ecx
c001cd00:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001cd06:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001cd0d:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001cd11:	75 0a                	jne    c001cd1d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c001cd13:	01 c9                	add    ecx,ecx
c001cd15:	01 cd                	add    ebp,ecx
c001cd17:	4b                   	dec    ebx
c001cd18:	e9 54 ff ff ff       	jmp    c001cc71 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c001cd1d:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001cd22:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001cd26:	51                   	push   ecx
c001cd27:	51                   	push   ecx
c001cd28:	52                   	push   edx
c001cd29:	50                   	push   eax
c001cd2a:	e8 f3 ea ff ff       	call   c001b822 <IDE::getBase(unsigned char)>
c001cd2f:	89 c2                	mov    edx,eax
c001cd31:	89 f0                	mov    eax,esi
c001cd33:	66 ef                	out    dx,ax
c001cd35:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001cd39:	83 c4 10             	add    esp,0x10
c001cd3c:	41                   	inc    ecx
c001cd3d:	eb c1                	jmp    c001cd00 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c001cd3f:	31 f6                	xor    esi,esi
c001cd41:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001cd47:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001cd4e:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001cd52:	75 06                	jne    c001cd5a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c001cd54:	01 f6                	add    esi,esi
c001cd56:	01 f5                	add    ebp,esi
c001cd58:	eb bd                	jmp    c001cd17 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c001cd5a:	51                   	push   ecx
c001cd5b:	51                   	push   ecx
c001cd5c:	52                   	push   edx
c001cd5d:	50                   	push   eax
c001cd5e:	e8 bf ea ff ff       	call   c001b822 <IDE::getBase(unsigned char)>
c001cd63:	89 c2                	mov    edx,eax
c001cd65:	66 ed                	in     ax,dx
c001cd67:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001cd6c:	83 c4 10             	add    esp,0x10
c001cd6f:	46                   	inc    esi
c001cd70:	eb cf                	jmp    c001cd41 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c001cd72:	51                   	push   ecx
c001cd73:	51                   	push   ecx
c001cd74:	52                   	push   edx
c001cd75:	50                   	push   eax
c001cd76:	e8 27 ec ff ff       	call   c001b9a2 <IDE::waitInterrupt(unsigned char)>
c001cd7b:	83 c4 10             	add    esp,0x10
c001cd7e:	84 c0                	test   al,al
c001cd80:	0f 84 e8 fd ff ff    	je     c001cb6e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001cd86:	bb a0 86 01 00       	mov    ebx,0x186a0
c001cd8b:	52                   	push   edx
c001cd8c:	52                   	push   edx
c001cd8d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cd94:	50                   	push   eax
c001cd95:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cd9b:	e8 6e ea ff ff       	call   c001b80e <IDE::prepareInterrupt(unsigned char)>
c001cda0:	83 c4 10             	add    esp,0x10
c001cda3:	50                   	push   eax
c001cda4:	50                   	push   eax
c001cda5:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cdac:	50                   	push   eax
c001cdad:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cdb3:	e8 6a ea ff ff       	call   c001b822 <IDE::getBase(unsigned char)>
c001cdb8:	8d 50 07             	lea    edx,[eax+0x7]
c001cdbb:	ec                   	in     al,dx
c001cdbc:	83 c4 10             	add    esp,0x10
c001cdbf:	a8 88                	test   al,0x88
c001cdc1:	74 0a                	je     c001cdcd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001cdc3:	4b                   	dec    ebx
c001cdc4:	75 dd                	jne    c001cda3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001cdc6:	bb 02 00 00 00       	mov    ebx,0x2
c001cdcb:	eb 02                	jmp    c001cdcf <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001cdcd:	31 db                	xor    ebx,ebx
c001cdcf:	83 c4 1c             	add    esp,0x1c
c001cdd2:	89 d8                	mov    eax,ebx
c001cdd4:	5b                   	pop    ebx
c001cdd5:	5e                   	pop    esi
c001cdd6:	5f                   	pop    edi
c001cdd7:	5d                   	pop    ebp
c001cdd8:	c3                   	ret    
c001cdd9:	90                   	nop

c001cdda <ATAPI::diskRemoved()>:
c001cdda:	83 ec 18             	sub    esp,0x18
c001cddd:	68 7b 24 02 c0       	push   0xc002247b
c001cde2:	e8 74 1f ff ff       	call   c000ed5b <Dbg::kprintf(char const*, ...)>
c001cde7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cdeb:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c001cdf2:	83 c4 1c             	add    esp,0x1c
c001cdf5:	c3                   	ret    

c001cdf6 <ATAPI::eject()>:
c001cdf6:	57                   	push   edi
c001cdf7:	b9 03 00 00 00       	mov    ecx,0x3
c001cdfc:	53                   	push   ebx
c001cdfd:	83 ec 14             	sub    esp,0x14
c001ce00:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ce04:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001ce08:	fc                   	cld    
c001ce09:	31 c0                	xor    eax,eax
c001ce0b:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001ce0d:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001ce12:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001ce17:	50                   	push   eax
c001ce18:	50                   	push   eax
c001ce19:	6a 00                	push   0x0
c001ce1b:	6a 00                	push   0x0
c001ce1d:	6a 00                	push   0x0
c001ce1f:	6a 02                	push   0x2
c001ce21:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ce25:	50                   	push   eax
c001ce26:	53                   	push   ebx
c001ce27:	e8 ee fc ff ff       	call   c001cb1a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001ce2c:	83 c4 14             	add    esp,0x14
c001ce2f:	53                   	push   ebx
c001ce30:	e8 a5 ff ff ff       	call   c001cdda <ATAPI::diskRemoved()>
c001ce35:	83 c4 24             	add    esp,0x24
c001ce38:	5b                   	pop    ebx
c001ce39:	5f                   	pop    edi
c001ce3a:	c3                   	ret    
c001ce3b:	90                   	nop

c001ce3c <ATAPI::diskInserted()>:
c001ce3c:	53                   	push   ebx
c001ce3d:	83 ec 14             	sub    esp,0x14
c001ce40:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001ce44:	68 91 24 02 c0       	push   0xc0022491
c001ce49:	e8 0d 1f ff ff       	call   c000ed5b <Dbg::kprintf(char const*, ...)>
c001ce4e:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c001ce55:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ce58:	e8 77 37 ff ff       	call   c00105d4 <PhysicalDisk::startCache()>
c001ce5d:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001ce61:	83 c4 18             	add    esp,0x18
c001ce64:	5b                   	pop    ebx
c001ce65:	e9 78 50 ff ff       	jmp    c0011ee2 <createPartitionsForDisk(PhysicalDisk*)>

c001ce6a <ATAPI::detectMedia()>:
c001ce6a:	56                   	push   esi
c001ce6b:	53                   	push   ebx
c001ce6c:	83 ec 28             	sub    esp,0x28
c001ce6f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001ce73:	6a 0c                	push   0xc
c001ce75:	6a 00                	push   0x0
c001ce77:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001ce7b:	56                   	push   esi
c001ce7c:	e8 87 37 fe ff       	call   c0000608 <memset>
c001ce81:	58                   	pop    eax
c001ce82:	5a                   	pop    edx
c001ce83:	6a 00                	push   0x0
c001ce85:	6a 00                	push   0x0
c001ce87:	6a 00                	push   0x0
c001ce89:	6a 00                	push   0x0
c001ce8b:	56                   	push   esi
c001ce8c:	53                   	push   ebx
c001ce8d:	e8 88 fc ff ff       	call   c001cb1a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001ce92:	83 c4 1c             	add    esp,0x1c
c001ce95:	6a 0c                	push   0xc
c001ce97:	6a 00                	push   0x0
c001ce99:	56                   	push   esi
c001ce9a:	e8 69 37 fe ff       	call   c0000608 <memset>
c001ce9f:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001cea4:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001cea9:	59                   	pop    ecx
c001ceaa:	58                   	pop    eax
c001ceab:	6a 01                	push   0x1
c001cead:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001ceb1:	50                   	push   eax
c001ceb2:	6a 00                	push   0x0
c001ceb4:	6a 12                	push   0x12
c001ceb6:	56                   	push   esi
c001ceb7:	53                   	push   ebx
c001ceb8:	e8 5d fc ff ff       	call   c001cb1a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001cebd:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001cec1:	83 c4 20             	add    esp,0x20
c001cec4:	83 e0 7f             	and    eax,0x7f
c001cec7:	3c 70                	cmp    al,0x70
c001cec9:	74 15                	je     c001cee0 <ATAPI::detectMedia()+0x76>
c001cecb:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001ced2:	75 0c                	jne    c001cee0 <ATAPI::detectMedia()+0x76>
c001ced4:	83 ec 0c             	sub    esp,0xc
c001ced7:	53                   	push   ebx
c001ced8:	e8 5f ff ff ff       	call   c001ce3c <ATAPI::diskInserted()>
c001cedd:	83 c4 10             	add    esp,0x10
c001cee0:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001cee4:	83 e0 0f             	and    eax,0xf
c001cee7:	3c 02                	cmp    al,0x2
c001cee9:	75 1b                	jne    c001cf06 <ATAPI::detectMedia()+0x9c>
c001ceeb:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001cef0:	75 2d                	jne    c001cf1f <ATAPI::detectMedia()+0xb5>
c001cef2:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001cef9:	74 24                	je     c001cf1f <ATAPI::detectMedia()+0xb5>
c001cefb:	83 ec 0c             	sub    esp,0xc
c001cefe:	53                   	push   ebx
c001ceff:	e8 d6 fe ff ff       	call   c001cdda <ATAPI::diskRemoved()>
c001cf04:	eb 16                	jmp    c001cf1c <ATAPI::detectMedia()+0xb2>
c001cf06:	84 c0                	test   al,al
c001cf08:	75 15                	jne    c001cf1f <ATAPI::detectMedia()+0xb5>
c001cf0a:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001cf11:	75 0c                	jne    c001cf1f <ATAPI::detectMedia()+0xb5>
c001cf13:	83 ec 0c             	sub    esp,0xc
c001cf16:	53                   	push   ebx
c001cf17:	e8 20 ff ff ff       	call   c001ce3c <ATAPI::diskInserted()>
c001cf1c:	83 c4 10             	add    esp,0x10
c001cf1f:	83 c4 24             	add    esp,0x24
c001cf22:	5b                   	pop    ebx
c001cf23:	5e                   	pop    esi
c001cf24:	c3                   	ret    
c001cf25:	90                   	nop

c001cf26 <ATAPI::open(int, int, void*)>:
c001cf26:	53                   	push   ebx
c001cf27:	83 ec 08             	sub    esp,0x8
c001cf2a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001cf2e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cf32:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cf36:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001cf3c:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001cf42:	c1 e0 06             	shl    eax,0x6
c001cf45:	01 d0                	add    eax,edx
c001cf47:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001cf4e:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001cf54:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001cf5b:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001cf65:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001cf6b:	6a 04                	push   0x4
c001cf6d:	6a 0c                	push   0xc
c001cf6f:	51                   	push   ecx
c001cf70:	52                   	push   edx
c001cf71:	e8 be e8 ff ff       	call   c001b834 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf76:	90                   	nop
c001cf77:	90                   	nop
c001cf78:	6a 00                	push   0x0
c001cf7a:	6a 0c                	push   0xc
c001cf7c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cf83:	50                   	push   eax
c001cf84:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cf8a:	e8 a5 e8 ff ff       	call   c001b834 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf8f:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001cf96:	83 c4 14             	add    esp,0x14
c001cf99:	53                   	push   ebx
c001cf9a:	e8 cb fe ff ff       	call   c001ce6a <ATAPI::detectMedia()>
c001cf9f:	31 c0                	xor    eax,eax
c001cfa1:	83 c4 18             	add    esp,0x18
c001cfa4:	5b                   	pop    ebx
c001cfa5:	c3                   	ret    

c001cfa6 <ATAPI::read(unsigned long long, int, void*)>:
c001cfa6:	55                   	push   ebp
c001cfa7:	57                   	push   edi
c001cfa8:	56                   	push   esi
c001cfa9:	53                   	push   ebx
c001cfaa:	83 ec 1c             	sub    esp,0x1c
c001cfad:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001cfb1:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001cfb5:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001cfb9:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c001cfc0:	74 41                	je     c001d003 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c001cfc2:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001cfc6:	b9 03 00 00 00       	mov    ecx,0x3
c001cfcb:	fc                   	cld    
c001cfcc:	31 c0                	xor    eax,eax
c001cfce:	86 fb                	xchg   bl,bh
c001cfd0:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001cfd2:	c1 c3 10             	rol    ebx,0x10
c001cfd5:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001cfda:	89 e8                	mov    eax,ebp
c001cfdc:	86 fb                	xchg   bl,bh
c001cfde:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001cfe2:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c001cfe6:	50                   	push   eax
c001cfe7:	50                   	push   eax
c001cfe8:	55                   	push   ebp
c001cfe9:	c1 e5 0b             	shl    ebp,0xb
c001cfec:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001cff0:	6a 00                	push   0x0
c001cff2:	55                   	push   ebp
c001cff3:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001cff7:	50                   	push   eax
c001cff8:	56                   	push   esi
c001cff9:	e8 1c fb ff ff       	call   c001cb1a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001cffe:	83 c4 20             	add    esp,0x20
c001d001:	eb 1a                	jmp    c001d01d <ATAPI::read(unsigned long long, int, void*)+0x77>
c001d003:	83 ec 0c             	sub    esp,0xc
c001d006:	56                   	push   esi
c001d007:	e8 5e fe ff ff       	call   c001ce6a <ATAPI::detectMedia()>
c001d00c:	83 c4 10             	add    esp,0x10
c001d00f:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c001d016:	75 aa                	jne    c001cfc2 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001d018:	b8 02 00 00 00       	mov    eax,0x2
c001d01d:	83 c4 1c             	add    esp,0x1c
c001d020:	5b                   	pop    ebx
c001d021:	5e                   	pop    esi
c001d022:	5f                   	pop    edi
c001d023:	5d                   	pop    ebp
c001d024:	c3                   	ret    
c001d025:	90                   	nop

c001d026 <AVX::open(int, int, void*)>:
c001d026:	83 ec 0c             	sub    esp,0xc
c001d029:	e8 0a 10 00 00       	call   c001e038 <avxInit>
c001d02e:	b8 00 00 00 00       	mov    eax,0x0
c001d033:	83 c4 0c             	add    esp,0xc
c001d036:	c3                   	ret    
c001d037:	90                   	nop

c001d038 <AVX::close(int, int, void*)>:
c001d038:	83 ec 0c             	sub    esp,0xc
c001d03b:	e8 f9 0f 00 00       	call   c001e039 <avxClose>
c001d040:	b8 00 00 00 00       	mov    eax,0x0
c001d045:	83 c4 0c             	add    esp,0xc
c001d048:	c3                   	ret    
c001d049:	90                   	nop

c001d04a <AVX::available()>:
c001d04a:	83 ec 0c             	sub    esp,0xc
c001d04d:	e8 de 0f 00 00       	call   c001e030 <avxDetect>
c001d052:	85 c0                	test   eax,eax
c001d054:	0f 95 c0             	setne  al
c001d057:	83 c4 0c             	add    esp,0xc
c001d05a:	c3                   	ret    
c001d05b:	90                   	nop

c001d05c <AVX::save(void*)>:
c001d05c:	83 ec 0c             	sub    esp,0xc
c001d05f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d063:	83 ec 0c             	sub    esp,0xc
c001d066:	50                   	push   eax
c001d067:	e8 ca 0f 00 00       	call   c001e036 <avxSave>
c001d06c:	83 c4 10             	add    esp,0x10
c001d06f:	90                   	nop
c001d070:	83 c4 0c             	add    esp,0xc
c001d073:	c3                   	ret    

c001d074 <AVX::load(void*)>:
c001d074:	83 ec 0c             	sub    esp,0xc
c001d077:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d07b:	83 ec 0c             	sub    esp,0xc
c001d07e:	50                   	push   eax
c001d07f:	e8 b3 0f 00 00       	call   c001e037 <avxLoad>
c001d084:	83 c4 10             	add    esp,0x10
c001d087:	90                   	nop
c001d088:	83 c4 0c             	add    esp,0xc
c001d08b:	c3                   	ret    

c001d08c <AVX::AVX()>:
c001d08c:	83 ec 0c             	sub    esp,0xc
c001d08f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d093:	83 ec 08             	sub    esp,0x8
c001d096:	68 dc 24 02 c0       	push   0xc00224dc
c001d09b:	50                   	push   eax
c001d09c:	e8 a9 35 ff ff       	call   c001064a <FPU::FPU(char const*)>
c001d0a1:	83 c4 10             	add    esp,0x10
c001d0a4:	ba ec 24 02 c0       	mov    edx,0xc00224ec
c001d0a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d0ad:	89 10                	mov    DWORD PTR [eax],edx
c001d0af:	90                   	nop
c001d0b0:	83 c4 0c             	add    esp,0xc
c001d0b3:	c3                   	ret    

c001d0b4 <MMX::available()>:
c001d0b4:	a1 08 34 02 c0       	mov    eax,ds:0xc0023408
c001d0b9:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001d0bf:	83 e0 20             	and    eax,0x20
c001d0c2:	84 c0                	test   al,al
c001d0c4:	0f 95 c0             	setne  al
c001d0c7:	c3                   	ret    

c001d0c8 <MMX::open(int, int, void*)>:
c001d0c8:	83 ec 0c             	sub    esp,0xc
c001d0cb:	e8 dc 0f 00 00       	call   c001e0ac <x87Init>
c001d0d0:	b8 00 00 00 00       	mov    eax,0x0
c001d0d5:	83 c4 0c             	add    esp,0xc
c001d0d8:	c3                   	ret    
c001d0d9:	90                   	nop

c001d0da <MMX::close(int, int, void*)>:
c001d0da:	83 ec 0c             	sub    esp,0xc
c001d0dd:	e8 e4 0f 00 00       	call   c001e0c6 <x87Close>
c001d0e2:	b8 00 00 00 00       	mov    eax,0x0
c001d0e7:	83 c4 0c             	add    esp,0xc
c001d0ea:	c3                   	ret    
c001d0eb:	90                   	nop

c001d0ec <MMX::save(void*)>:
c001d0ec:	83 ec 0c             	sub    esp,0xc
c001d0ef:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d0f3:	83 ec 0c             	sub    esp,0xc
c001d0f6:	50                   	push   eax
c001d0f7:	e8 a5 0f 00 00       	call   c001e0a1 <x87Save>
c001d0fc:	83 c4 10             	add    esp,0x10
c001d0ff:	90                   	nop
c001d100:	83 c4 0c             	add    esp,0xc
c001d103:	c3                   	ret    

c001d104 <MMX::load(void*)>:
c001d104:	83 ec 0c             	sub    esp,0xc
c001d107:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d10b:	83 ec 0c             	sub    esp,0xc
c001d10e:	50                   	push   eax
c001d10f:	e8 93 0f 00 00       	call   c001e0a7 <x87Load>
c001d114:	83 c4 10             	add    esp,0x10
c001d117:	90                   	nop
c001d118:	83 c4 0c             	add    esp,0xc
c001d11b:	c3                   	ret    

c001d11c <MMX::MMX()>:
c001d11c:	83 ec 0c             	sub    esp,0xc
c001d11f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d123:	83 ec 08             	sub    esp,0x8
c001d126:	68 1c 25 02 c0       	push   0xc002251c
c001d12b:	50                   	push   eax
c001d12c:	e8 19 35 ff ff       	call   c001064a <FPU::FPU(char const*)>
c001d131:	83 c4 10             	add    esp,0x10
c001d134:	ba 2c 25 02 c0       	mov    edx,0xc002252c
c001d139:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d13d:	89 10                	mov    DWORD PTR [eax],edx
c001d13f:	90                   	nop
c001d140:	83 c4 0c             	add    esp,0xc
c001d143:	c3                   	ret    

c001d144 <SSE::open(int, int, void*)>:
c001d144:	83 ec 0c             	sub    esp,0xc
c001d147:	e8 1b 0f 00 00       	call   c001e067 <sseInit>
c001d14c:	b8 00 00 00 00       	mov    eax,0x0
c001d151:	83 c4 0c             	add    esp,0xc
c001d154:	c3                   	ret    
c001d155:	90                   	nop

c001d156 <SSE::close(int, int, void*)>:
c001d156:	83 ec 0c             	sub    esp,0xc
c001d159:	e8 19 0f 00 00       	call   c001e077 <sseClose>
c001d15e:	b8 00 00 00 00       	mov    eax,0x0
c001d163:	83 c4 0c             	add    esp,0xc
c001d166:	c3                   	ret    
c001d167:	90                   	nop

c001d168 <SSE::available()>:
c001d168:	83 ec 1c             	sub    esp,0x1c
c001d16b:	e8 d0 0e 00 00       	call   c001e040 <sseDetect>
c001d170:	85 c0                	test   eax,eax
c001d172:	0f 95 c0             	setne  al
c001d175:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001d179:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001d17d:	83 c4 1c             	add    esp,0x1c
c001d180:	c3                   	ret    
c001d181:	90                   	nop

c001d182 <SSE::save(void*)>:
c001d182:	83 ec 0c             	sub    esp,0xc
c001d185:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d189:	83 ec 0c             	sub    esp,0xc
c001d18c:	50                   	push   eax
c001d18d:	e8 c9 0e 00 00       	call   c001e05b <sseSave>
c001d192:	83 c4 10             	add    esp,0x10
c001d195:	90                   	nop
c001d196:	83 c4 0c             	add    esp,0xc
c001d199:	c3                   	ret    

c001d19a <SSE::load(void*)>:
c001d19a:	83 ec 0c             	sub    esp,0xc
c001d19d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d1a1:	83 ec 0c             	sub    esp,0xc
c001d1a4:	50                   	push   eax
c001d1a5:	e8 b7 0e 00 00       	call   c001e061 <sseLoad>
c001d1aa:	83 c4 10             	add    esp,0x10
c001d1ad:	90                   	nop
c001d1ae:	83 c4 0c             	add    esp,0xc
c001d1b1:	c3                   	ret    

c001d1b2 <SSE::SSE()>:
c001d1b2:	83 ec 0c             	sub    esp,0xc
c001d1b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d1b9:	83 ec 08             	sub    esp,0x8
c001d1bc:	68 5c 25 02 c0       	push   0xc002255c
c001d1c1:	50                   	push   eax
c001d1c2:	e8 83 34 ff ff       	call   c001064a <FPU::FPU(char const*)>
c001d1c7:	83 c4 10             	add    esp,0x10
c001d1ca:	ba 6c 25 02 c0       	mov    edx,0xc002256c
c001d1cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d1d3:	89 10                	mov    DWORD PTR [eax],edx
c001d1d5:	90                   	nop
c001d1d6:	83 c4 0c             	add    esp,0xc
c001d1d9:	c3                   	ret    

c001d1da <x87::open(int, int, void*)>:
c001d1da:	83 ec 0c             	sub    esp,0xc
c001d1dd:	e8 ca 0e 00 00       	call   c001e0ac <x87Init>
c001d1e2:	b8 00 00 00 00       	mov    eax,0x0
c001d1e7:	83 c4 0c             	add    esp,0xc
c001d1ea:	c3                   	ret    
c001d1eb:	90                   	nop

c001d1ec <x87::close(int, int, void*)>:
c001d1ec:	83 ec 0c             	sub    esp,0xc
c001d1ef:	e8 d2 0e 00 00       	call   c001e0c6 <x87Close>
c001d1f4:	b8 00 00 00 00       	mov    eax,0x0
c001d1f9:	83 c4 0c             	add    esp,0xc
c001d1fc:	c3                   	ret    
c001d1fd:	90                   	nop

c001d1fe <x87::available()>:
c001d1fe:	83 ec 0c             	sub    esp,0xc
c001d201:	e8 80 0e 00 00       	call   c001e086 <x87Detect>
c001d206:	85 c0                	test   eax,eax
c001d208:	0f 95 c0             	setne  al
c001d20b:	83 c4 0c             	add    esp,0xc
c001d20e:	c3                   	ret    
c001d20f:	90                   	nop

c001d210 <x87::save(void*)>:
c001d210:	83 ec 0c             	sub    esp,0xc
c001d213:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d217:	83 ec 0c             	sub    esp,0xc
c001d21a:	50                   	push   eax
c001d21b:	e8 81 0e 00 00       	call   c001e0a1 <x87Save>
c001d220:	83 c4 10             	add    esp,0x10
c001d223:	90                   	nop
c001d224:	83 c4 0c             	add    esp,0xc
c001d227:	c3                   	ret    

c001d228 <x87::load(void*)>:
c001d228:	83 ec 0c             	sub    esp,0xc
c001d22b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d22f:	83 ec 0c             	sub    esp,0xc
c001d232:	50                   	push   eax
c001d233:	e8 6f 0e 00 00       	call   c001e0a7 <x87Load>
c001d238:	83 c4 10             	add    esp,0x10
c001d23b:	90                   	nop
c001d23c:	83 c4 0c             	add    esp,0xc
c001d23f:	c3                   	ret    

c001d240 <x87::x87()>:
c001d240:	83 ec 0c             	sub    esp,0xc
c001d243:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d247:	83 ec 08             	sub    esp,0x8
c001d24a:	68 9c 25 02 c0       	push   0xc002259c
c001d24f:	50                   	push   eax
c001d250:	e8 f5 33 ff ff       	call   c001064a <FPU::FPU(char const*)>
c001d255:	83 c4 10             	add    esp,0x10
c001d258:	ba ac 25 02 c0       	mov    edx,0xc00225ac
c001d25d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d261:	89 10                	mov    DWORD PTR [eax],edx
c001d263:	90                   	nop
c001d264:	83 c4 0c             	add    esp,0xc
c001d267:	c3                   	ret    

c001d268 <APIC::disable()>:
c001d268:	90                   	nop
c001d269:	c3                   	ret    

c001d26a <APIC::close(int, int, void*)>:
c001d26a:	55                   	push   ebp
c001d26b:	89 e5                	mov    ebp,esp
c001d26d:	83 ec 08             	sub    esp,0x8
c001d270:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d273:	8b 00                	mov    eax,DWORD PTR [eax]
c001d275:	83 c0 3c             	add    eax,0x3c
c001d278:	8b 00                	mov    eax,DWORD PTR [eax]
c001d27a:	83 ec 0c             	sub    esp,0xc
c001d27d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d280:	ff d0                	call   eax
c001d282:	83 c4 10             	add    esp,0x10
c001d285:	b8 00 00 00 00       	mov    eax,0x0
c001d28a:	c9                   	leave  
c001d28b:	c3                   	ret    

c001d28c <IOAPIC::close(int, int, void*)>:
c001d28c:	b8 00 00 00 00       	mov    eax,0x0
c001d291:	c3                   	ret    

c001d292 <APIC::io_wait()>:
c001d292:	eb 00                	jmp    c001d294 <APIC::io_wait()+0x2>
c001d294:	eb 00                	jmp    c001d296 <APIC::io_wait()+0x4>
c001d296:	90                   	nop
c001d297:	c3                   	ret    

c001d298 <APIC::getBase()>:
c001d298:	55                   	push   ebp
c001d299:	89 e5                	mov    ebp,esp
c001d29b:	83 ec 18             	sub    esp,0x18
c001d29e:	a1 08 34 02 c0       	mov    eax,ds:0xc0023408
c001d2a3:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001d2a9:	83 e0 08             	and    eax,0x8
c001d2ac:	84 c0                	test   al,al
c001d2ae:	75 07                	jne    c001d2b7 <APIC::getBase()+0x1f>
c001d2b0:	b8 00 00 00 00       	mov    eax,0x0
c001d2b5:	eb 21                	jmp    c001d2d8 <APIC::getBase()+0x40>
c001d2b7:	a1 08 34 02 c0       	mov    eax,ds:0xc0023408
c001d2bc:	83 ec 08             	sub    esp,0x8
c001d2bf:	6a 1b                	push   0x1b
c001d2c1:	50                   	push   eax
c001d2c2:	e8 ff de fe ff       	call   c000b1c6 <Computer::rdmsr(unsigned int)>
c001d2c7:	83 c4 10             	add    esp,0x10
c001d2ca:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001d2cd:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001d2d0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d2d3:	25 00 f0 ff ff       	and    eax,0xfffff000
c001d2d8:	c9                   	leave  
c001d2d9:	c3                   	ret    

c001d2da <APIC::eoi(unsigned char)>:
c001d2da:	55                   	push   ebp
c001d2db:	89 e5                	mov    ebp,esp
c001d2dd:	83 ec 28             	sub    esp,0x28
c001d2e0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d2e3:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001d2e6:	83 ec 0c             	sub    esp,0xc
c001d2e9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d2ec:	e8 a7 ff ff ff       	call   c001d298 <APIC::getBase()>
c001d2f1:	83 c4 10             	add    esp,0x10
c001d2f4:	05 b0 00 00 00       	add    eax,0xb0
c001d2f9:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001d2fc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001d2ff:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001d305:	90                   	nop
c001d306:	c9                   	leave  
c001d307:	c3                   	ret    

c001d308 <APIC::open(int, int, void*)>:
c001d308:	55                   	push   ebp
c001d309:	89 e5                	mov    ebp,esp
c001d30b:	57                   	push   edi
c001d30c:	56                   	push   esi
c001d30d:	53                   	push   ebx
c001d30e:	83 ec 1c             	sub    esp,0x1c
c001d311:	83 ec 0c             	sub    esp,0xc
c001d314:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d317:	e8 7c ff ff ff       	call   c001d298 <APIC::getBase()>
c001d31c:	83 c4 10             	add    esp,0x10
c001d31f:	05 f0 00 00 00       	add    eax,0xf0
c001d324:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001d327:	83 ec 0c             	sub    esp,0xc
c001d32a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d32d:	e8 66 ff ff ff       	call   c001d298 <APIC::getBase()>
c001d332:	83 c4 10             	add    esp,0x10
c001d335:	89 c2                	mov    edx,eax
c001d337:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d33a:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001d340:	0f b6 f8             	movzx  edi,al
c001d343:	89 d0                	mov    eax,edx
c001d345:	ba 00 00 00 00       	mov    edx,0x0
c001d34a:	89 c1                	mov    ecx,eax
c001d34c:	80 e5 ff             	and    ch,0xff
c001d34f:	89 cb                	mov    ebx,ecx
c001d351:	0f b6 f2             	movzx  esi,dl
c001d354:	89 d8                	mov    eax,ebx
c001d356:	89 f2                	mov    edx,esi
c001d358:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001d35b:	8d 5f 08             	lea    ebx,[edi+0x8]
c001d35e:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001d362:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001d366:	83 e0 00             	and    eax,0x0
c001d369:	09 d0                	or     eax,edx
c001d36b:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001d36f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d372:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001d378:	8d 50 01             	lea    edx,[eax+0x1]
c001d37b:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001d37e:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001d384:	0f b6 d0             	movzx  edx,al
c001d387:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d38a:	83 c2 08             	add    edx,0x8
c001d38d:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001d391:	0f b6 c9             	movzx  ecx,cl
c001d394:	81 c9 00 00 01 00    	or     ecx,0x10000
c001d39a:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001d39e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001d3a1:	8b 00                	mov    eax,DWORD PTR [eax]
c001d3a3:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001d3a6:	81 4d e0 00 01 00 00 	or     DWORD PTR [ebp-0x20],0x100
c001d3ad:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001d3b0:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c001d3b3:	89 10                	mov    DWORD PTR [eax],edx
c001d3b5:	b8 00 00 00 00       	mov    eax,0x0
c001d3ba:	8d 65 f4             	lea    esp,[ebp-0xc]
c001d3bd:	5b                   	pop    ebx
c001d3be:	5e                   	pop    esi
c001d3bf:	5f                   	pop    edi
c001d3c0:	5d                   	pop    ebp
c001d3c1:	c3                   	ret    

c001d3c2 <IOAPIC::IOAPIC()>:
c001d3c2:	83 ec 0c             	sub    esp,0xc
c001d3c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d3c9:	83 ec 08             	sub    esp,0x8
c001d3cc:	68 dc 25 02 c0       	push   0xc00225dc
c001d3d1:	50                   	push   eax
c001d3d2:	e8 7f 2f ff ff       	call   c0010356 <Device::Device(char const*)>
c001d3d7:	83 c4 10             	add    esp,0x10
c001d3da:	ba 04 27 02 c0       	mov    edx,0xc0022704
c001d3df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d3e3:	89 10                	mov    DWORD PTR [eax],edx
c001d3e5:	90                   	nop
c001d3e6:	83 c4 0c             	add    esp,0xc
c001d3e9:	c3                   	ret    

c001d3ea <APIC::APIC()>:
c001d3ea:	53                   	push   ebx
c001d3eb:	83 ec 18             	sub    esp,0x18
c001d3ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d3f2:	83 ec 08             	sub    esp,0x8
c001d3f5:	68 e4 25 02 c0       	push   0xc00225e4
c001d3fa:	50                   	push   eax
c001d3fb:	e8 98 36 ff ff       	call   c0010a98 <InterruptController::InterruptController(char const*)>
c001d400:	83 c4 10             	add    esp,0x10
c001d403:	ba bc 26 02 c0       	mov    edx,0xc00226bc
c001d408:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d40c:	89 10                	mov    DWORD PTR [eax],edx
c001d40e:	a0 00 52 02 c0       	mov    al,ds:0xc0025200
c001d413:	83 f0 01             	xor    eax,0x1
c001d416:	84 c0                	test   al,al
c001d418:	0f 84 96 00 00 00    	je     c001d4b4 <APIC::APIC()+0xca>
c001d41e:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001d423:	a0 b0 3c 02 c0       	mov    al,ds:0xc0023cb0
c001d428:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c001d42c:	73 7f                	jae    c001d4ad <APIC::APIC()+0xc3>
c001d42e:	83 ec 0c             	sub    esp,0xc
c001d431:	68 68 01 00 00       	push   0x168
c001d436:	e8 31 18 ff ff       	call   c000ec6c <operator new(unsigned long)>
c001d43b:	83 c4 10             	add    esp,0x10
c001d43e:	89 c3                	mov    ebx,eax
c001d440:	83 ec 0c             	sub    esp,0xc
c001d443:	53                   	push   ebx
c001d444:	e8 79 ff ff ff       	call   c001d3c2 <IOAPIC::IOAPIC()>
c001d449:	83 c4 10             	add    esp,0x10
c001d44c:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001d450:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001d455:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d459:	89 14 85 e0 51 02 c0 	mov    DWORD PTR [eax*4-0x3ffdae20],edx
c001d460:	a1 c0 51 02 c0       	mov    eax,ds:0xc00251c0
c001d465:	40                   	inc    eax
c001d466:	a3 c0 51 02 c0       	mov    ds:0xc00251c0,eax
c001d46b:	a1 08 34 02 c0       	mov    eax,ds:0xc0023408
c001d470:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001d476:	83 ec 08             	sub    esp,0x8
c001d479:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001d47d:	50                   	push   eax
c001d47e:	e8 e3 2c ff ff       	call   c0010166 <Device::addChild(Device*)>
c001d483:	83 c4 10             	add    esp,0x10
c001d486:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d48a:	8b 00                	mov    eax,DWORD PTR [eax]
c001d48c:	83 c0 08             	add    eax,0x8
c001d48f:	8b 00                	mov    eax,DWORD PTR [eax]
c001d491:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001d496:	6a 00                	push   0x0
c001d498:	6a 00                	push   0x0
c001d49a:	52                   	push   edx
c001d49b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d49f:	ff d0                	call   eax
c001d4a1:	83 c4 10             	add    esp,0x10
c001d4a4:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c001d4a8:	e9 76 ff ff ff       	jmp    c001d423 <APIC::APIC()+0x39>
c001d4ad:	c6 05 00 52 02 c0 01 	mov    BYTE PTR ds:0xc0025200,0x1
c001d4b4:	90                   	nop
c001d4b5:	83 c4 18             	add    esp,0x18
c001d4b8:	5b                   	pop    ebx
c001d4b9:	c3                   	ret    

c001d4ba <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001d4ba:	55                   	push   ebp
c001d4bb:	89 e5                	mov    ebp,esp
c001d4bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d4c0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d4c6:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001d4c9:	72 1d                	jb     c001d4e8 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001d4cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d4ce:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001d4d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d4d7:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001d4dd:	01 d0                	add    eax,edx
c001d4df:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001d4e2:	73 04                	jae    c001d4e8 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001d4e4:	b0 01                	mov    al,0x1
c001d4e6:	eb 02                	jmp    c001d4ea <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001d4e8:	b0 00                	mov    al,0x0
c001d4ea:	5d                   	pop    ebp
c001d4eb:	c3                   	ret    

c001d4ec <IOAPIC::read(int)>:
c001d4ec:	55                   	push   ebp
c001d4ed:	89 e5                	mov    ebp,esp
c001d4ef:	83 ec 10             	sub    esp,0x10
c001d4f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d4f5:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001d4fb:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001d4fe:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d501:	0f b6 d0             	movzx  edx,al
c001d504:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d507:	89 10                	mov    DWORD PTR [eax],edx
c001d509:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d50c:	83 c0 10             	add    eax,0x10
c001d50f:	8b 00                	mov    eax,DWORD PTR [eax]
c001d511:	c9                   	leave  
c001d512:	c3                   	ret    
c001d513:	90                   	nop

c001d514 <IOAPIC::open(int, int, void*)>:
c001d514:	55                   	push   ebp
c001d515:	89 e5                	mov    ebp,esp
c001d517:	57                   	push   edi
c001d518:	56                   	push   esi
c001d519:	53                   	push   ebx
c001d51a:	83 ec 0c             	sub    esp,0xc
c001d51d:	83 ec 0c             	sub    esp,0xc
c001d520:	68 0f 26 02 c0       	push   0xc002260f
c001d525:	e8 31 18 ff ff       	call   c000ed5b <Dbg::kprintf(char const*, ...)>
c001d52a:	83 c4 10             	add    esp,0x10
c001d52d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d530:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001d533:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001d539:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d53c:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d542:	8b 14 85 e0 3c 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdc320]
c001d549:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d54c:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001d552:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d555:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d55b:	8b 14 85 60 3d 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdc2a0]
c001d562:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d565:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001d56b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d56e:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001d574:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d577:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001d57d:	0f b6 f8             	movzx  edi,al
c001d580:	89 d0                	mov    eax,edx
c001d582:	ba 00 00 00 00       	mov    edx,0x0
c001d587:	89 c1                	mov    ecx,eax
c001d589:	80 e5 ff             	and    ch,0xff
c001d58c:	89 cb                	mov    ebx,ecx
c001d58e:	0f b6 f2             	movzx  esi,dl
c001d591:	89 d8                	mov    eax,ebx
c001d593:	89 f2                	mov    edx,esi
c001d595:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001d598:	8d 5f 08             	lea    ebx,[edi+0x8]
c001d59b:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001d59f:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001d5a3:	83 e0 00             	and    eax,0x0
c001d5a6:	09 d0                	or     eax,edx
c001d5a8:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001d5ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d5af:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001d5b5:	8d 50 01             	lea    edx,[eax+0x1]
c001d5b8:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001d5bb:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001d5c1:	0f b6 d0             	movzx  edx,al
c001d5c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d5c7:	83 c2 08             	add    edx,0x8
c001d5ca:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001d5ce:	0f b6 c9             	movzx  ecx,cl
c001d5d1:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001d5d7:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001d5db:	83 ec 08             	sub    esp,0x8
c001d5de:	6a 01                	push   0x1
c001d5e0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d5e3:	e8 04 ff ff ff       	call   c001d4ec <IOAPIC::read(int)>
c001d5e8:	83 c4 10             	add    esp,0x10
c001d5eb:	c1 f8 10             	sar    eax,0x10
c001d5ee:	0f b6 c0             	movzx  eax,al
c001d5f1:	8d 50 01             	lea    edx,[eax+0x1]
c001d5f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d5f7:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001d5fd:	b8 00 00 00 00       	mov    eax,0x0
c001d602:	8d 65 f4             	lea    esp,[ebp-0xc]
c001d605:	5b                   	pop    ebx
c001d606:	5e                   	pop    esi
c001d607:	5f                   	pop    edi
c001d608:	5d                   	pop    ebp
c001d609:	c3                   	ret    

c001d60a <IOAPIC::write(int, int)>:
c001d60a:	55                   	push   ebp
c001d60b:	89 e5                	mov    ebp,esp
c001d60d:	83 ec 10             	sub    esp,0x10
c001d610:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d613:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001d619:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001d61c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d61f:	0f b6 d0             	movzx  edx,al
c001d622:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d625:	89 10                	mov    DWORD PTR [eax],edx
c001d627:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d62a:	8d 50 10             	lea    edx,[eax+0x10]
c001d62d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001d630:	89 02                	mov    DWORD PTR [edx],eax
c001d632:	90                   	nop
c001d633:	c9                   	leave  
c001d634:	c3                   	ret    
c001d635:	90                   	nop

c001d636 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char)>:
c001d636:	55                   	push   ebp
c001d637:	89 e5                	mov    ebp,esp
c001d639:	83 ec 20             	sub    esp,0x20
c001d63c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d63f:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001d642:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c001d645:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001d648:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001d64b:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001d64e:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001d651:	88 d0                	mov    al,dl
c001d653:	88 45 e8             	mov    BYTE PTR [ebp-0x18],al
c001d656:	0f b6 45 ec          	movzx  eax,BYTE PTR [ebp-0x14]
c001d65a:	83 c0 08             	add    eax,0x8
c001d65d:	01 c0                	add    eax,eax
c001d65f:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001d662:	0f b6 45 ec          	movzx  eax,BYTE PTR [ebp-0x14]
c001d666:	83 c0 08             	add    eax,0x8
c001d669:	01 c0                	add    eax,eax
c001d66b:	40                   	inc    eax
c001d66c:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
c001d66f:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c001d672:	50                   	push   eax
c001d673:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d676:	e8 71 fe ff ff       	call   c001d4ec <IOAPIC::read(int)>
c001d67b:	83 c4 08             	add    esp,0x8
c001d67e:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001d681:	81 65 f4 ff ff ff 00 	and    DWORD PTR [ebp-0xc],0xffffff
c001d688:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c001d68b:	c1 e0 18             	shl    eax,0x18
c001d68e:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001d691:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001d694:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c001d697:	52                   	push   edx
c001d698:	50                   	push   eax
c001d699:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d69c:	e8 69 ff ff ff       	call   c001d60a <IOAPIC::write(int, int)>
c001d6a1:	83 c4 0c             	add    esp,0xc
c001d6a4:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d6a7:	50                   	push   eax
c001d6a8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d6ab:	e8 3c fe ff ff       	call   c001d4ec <IOAPIC::read(int)>
c001d6b0:	83 c4 08             	add    esp,0x8
c001d6b3:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001d6b6:	81 65 f0 ff ff fe ff 	and    DWORD PTR [ebp-0x10],0xfffeffff
c001d6bd:	81 65 f0 ff f7 ff ff 	and    DWORD PTR [ebp-0x10],0xfffff7ff
c001d6c4:	81 65 f0 ff f8 ff ff 	and    DWORD PTR [ebp-0x10],0xfffff8ff
c001d6cb:	81 65 f0 00 ff ff ff 	and    DWORD PTR [ebp-0x10],0xffffff00
c001d6d2:	0f b6 45 e8          	movzx  eax,BYTE PTR [ebp-0x18]
c001d6d6:	09 45 f0             	or     DWORD PTR [ebp-0x10],eax
c001d6d9:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c001d6dc:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d6df:	52                   	push   edx
c001d6e0:	50                   	push   eax
c001d6e1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d6e4:	e8 21 ff ff ff       	call   c001d60a <IOAPIC::write(int, int)>
c001d6e9:	83 c4 0c             	add    esp,0xc
c001d6ec:	90                   	nop
c001d6ed:	c9                   	leave  
c001d6ee:	c3                   	ret    
c001d6ef:	90                   	nop

c001d6f0 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001d6f0:	55                   	push   ebp
c001d6f1:	89 e5                	mov    ebp,esp
c001d6f3:	56                   	push   esi
c001d6f4:	53                   	push   ebx
c001d6f5:	83 ec 20             	sub    esp,0x20
c001d6f8:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001d6fb:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001d6fe:	80 7d e4 00          	cmp    BYTE PTR [ebp-0x1c],0x0
c001d702:	74 28                	je     c001d72c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3c>
c001d704:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c001d708:	7f 12                	jg     c001d71c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x2c>
c001d70a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d70d:	05 60 2b 02 c0       	add    eax,0xc0022b60
c001d712:	8a 00                	mov    al,BYTE PTR [eax]
c001d714:	0f b6 c0             	movzx  eax,al
c001d717:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c001d71a:	eb 10                	jmp    c001d72c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3c>
c001d71c:	83 ec 0c             	sub    esp,0xc
c001d71f:	68 20 26 02 c0       	push   0xc0022620
c001d724:	e8 c7 72 ff ff       	call   c00149f0 <Krnl::panic(char const*)>
c001d729:	83 c4 10             	add    esp,0x10
c001d72c:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001d730:	a1 c0 51 02 c0       	mov    eax,ds:0xc00251c0
c001d735:	83 ec 08             	sub    esp,0x8
c001d738:	50                   	push   eax
c001d739:	68 58 26 02 c0       	push   0xc0022658
c001d73e:	e8 18 16 ff ff       	call   c000ed5b <Dbg::kprintf(char const*, ...)>
c001d743:	83 c4 10             	add    esp,0x10
c001d746:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001d74d:	a1 c0 51 02 c0       	mov    eax,ds:0xc00251c0
c001d752:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001d755:	7d 58                	jge    c001d7af <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xbf>
c001d757:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d75a:	8b 04 85 e0 51 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdae20]
c001d761:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001d764:	83 ec 08             	sub    esp,0x8
c001d767:	52                   	push   edx
c001d768:	50                   	push   eax
c001d769:	e8 4c fd ff ff       	call   c001d4ba <IOAPIC::handlesGSIWithNumber(unsigned int)>
c001d76e:	83 c4 10             	add    esp,0x10
c001d771:	84 c0                	test   al,al
c001d773:	74 35                	je     c001d7aa <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xba>
c001d775:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d778:	8b 1c 85 e0 51 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffdae20]
c001d77f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d782:	83 c0 20             	add    eax,0x20
c001d785:	0f b6 f0             	movzx  esi,al
c001d788:	e8 5a 65 ff ff       	call   c0013ce7 <getCPUNumber()>
c001d78d:	99                   	cdq    
c001d78e:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c001d791:	0f b6 c9             	movzx  ecx,cl
c001d794:	83 ec 0c             	sub    esp,0xc
c001d797:	56                   	push   esi
c001d798:	52                   	push   edx
c001d799:	50                   	push   eax
c001d79a:	51                   	push   ecx
c001d79b:	53                   	push   ebx
c001d79c:	e8 95 fe ff ff       	call   c001d636 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char)>
c001d7a1:	83 c4 20             	add    esp,0x20
c001d7a4:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001d7a8:	eb 05                	jmp    c001d7af <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xbf>
c001d7aa:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
c001d7ad:	eb 9e                	jmp    c001d74d <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x5d>
c001d7af:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001d7b2:	83 f0 01             	xor    eax,0x1
c001d7b5:	84 c0                	test   al,al
c001d7b7:	74 10                	je     c001d7c9 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xd9>
c001d7b9:	83 ec 0c             	sub    esp,0xc
c001d7bc:	68 6f 26 02 c0       	push   0xc002266f
c001d7c1:	e8 2a 72 ff ff       	call   c00149f0 <Krnl::panic(char const*)>
c001d7c6:	83 c4 10             	add    esp,0x10
c001d7c9:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c001d7cd:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001d7d4:	83 7d ec 03          	cmp    DWORD PTR [ebp-0x14],0x3
c001d7d8:	7f 65                	jg     c001d83f <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x14f>
c001d7da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d7dd:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001d7e0:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001d7e7:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001d7ea:	01 ca                	add    edx,ecx
c001d7ec:	83 c2 54             	add    edx,0x54
c001d7ef:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c001d7f3:	85 c0                	test   eax,eax
c001d7f5:	75 43                	jne    c001d83a <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x14a>
c001d7f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d7fa:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001d7fd:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001d804:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001d807:	01 ca                	add    edx,ecx
c001d809:	8d 4a 54             	lea    ecx,[edx+0x54]
c001d80c:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c001d80f:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c001d813:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d816:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001d819:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001d820:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001d823:	01 ca                	add    edx,ecx
c001d825:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c001d82b:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001d82e:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c001d832:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d835:	83 e8 20             	sub    eax,0x20
c001d838:	eb 1a                	jmp    c001d854 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x164>
c001d83a:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c001d83d:	eb 95                	jmp    c001d7d4 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xe4>
c001d83f:	83 ec 0c             	sub    esp,0xc
c001d842:	68 7c 26 02 c0       	push   0xc002267c
c001d847:	e8 a4 71 ff ff       	call   c00149f0 <Krnl::panic(char const*)>
c001d84c:	83 c4 10             	add    esp,0x10
c001d84f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001d854:	8d 65 f8             	lea    esp,[ebp-0x8]
c001d857:	5b                   	pop    ebx
c001d858:	5e                   	pop    esi
c001d859:	5d                   	pop    ebp
c001d85a:	c3                   	ret    
c001d85b:	90                   	nop

c001d85c <PIC::disable()>:
c001d85c:	55                   	push   ebp
c001d85d:	89 e5                	mov    ebp,esp
c001d85f:	83 ec 10             	sub    esp,0x10
c001d862:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c001d868:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c001d86c:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c001d86f:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c001d873:	ee                   	out    dx,al
c001d874:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c001d87a:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c001d87e:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c001d881:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c001d885:	ee                   	out    dx,al
c001d886:	90                   	nop
c001d887:	c9                   	leave  
c001d888:	c3                   	ret    
c001d889:	90                   	nop

c001d88a <PIC::close(int, int, void*)>:
c001d88a:	55                   	push   ebp
c001d88b:	89 e5                	mov    ebp,esp
c001d88d:	83 ec 08             	sub    esp,0x8
c001d890:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d893:	8b 00                	mov    eax,DWORD PTR [eax]
c001d895:	83 c0 3c             	add    eax,0x3c
c001d898:	8b 00                	mov    eax,DWORD PTR [eax]
c001d89a:	83 ec 0c             	sub    esp,0xc
c001d89d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d8a0:	ff d0                	call   eax
c001d8a2:	83 c4 10             	add    esp,0x10
c001d8a5:	b8 00 00 00 00       	mov    eax,0x0
c001d8aa:	c9                   	leave  
c001d8ab:	c3                   	ret    

c001d8ac <PIC::PIC()>:
c001d8ac:	83 ec 0c             	sub    esp,0xc
c001d8af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d8b3:	83 ec 08             	sub    esp,0x8
c001d8b6:	68 28 27 02 c0       	push   0xc0022728
c001d8bb:	50                   	push   eax
c001d8bc:	e8 d7 31 ff ff       	call   c0010a98 <InterruptController::InterruptController(char const*)>
c001d8c1:	83 c4 10             	add    esp,0x10
c001d8c4:	ba 54 27 02 c0       	mov    edx,0xc0022754
c001d8c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d8cd:	89 10                	mov    DWORD PTR [eax],edx
c001d8cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d8d3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d8d9:	0f b6 d0             	movzx  edx,al
c001d8dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d8e0:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c001d8e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d8eb:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d8f1:	0f b6 d0             	movzx  edx,al
c001d8f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d8f8:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c001d8fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d901:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d907:	8d 50 01             	lea    edx,[eax+0x1]
c001d90a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d90e:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001d914:	0f b6 d0             	movzx  edx,al
c001d917:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d91b:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001d91f:	83 e1 3f             	and    ecx,0x3f
c001d922:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001d926:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d92a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d930:	0f b6 d0             	movzx  edx,al
c001d933:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d937:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c001d93e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d942:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d948:	0f b6 d0             	movzx  edx,al
c001d94b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d94f:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c001d954:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d958:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d95e:	8d 50 01             	lea    edx,[eax+0x1]
c001d961:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d965:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001d96b:	0f b6 d0             	movzx  edx,al
c001d96e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d972:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001d976:	83 e1 3f             	and    ecx,0x3f
c001d979:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001d97d:	90                   	nop
c001d97e:	83 c4 0c             	add    esp,0xc
c001d981:	c3                   	ret    

c001d982 <PIC::ioWait()>:
c001d982:	eb 00                	jmp    c001d984 <PIC::ioWait()+0x2>
c001d984:	eb 00                	jmp    c001d986 <PIC::ioWait()+0x4>
c001d986:	90                   	nop
c001d987:	c3                   	ret    

c001d988 <PIC::getIRQReg(int)>:
c001d988:	55                   	push   ebp
c001d989:	89 e5                	mov    ebp,esp
c001d98b:	83 ec 10             	sub    esp,0x10
c001d98e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d991:	0f b6 c0             	movzx  eax,al
c001d994:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c001d99a:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c001d99d:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c001d9a0:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c001d9a4:	ee                   	out    dx,al
c001d9a5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d9a8:	0f b6 c0             	movzx  eax,al
c001d9ab:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c001d9b1:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c001d9b4:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c001d9b7:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c001d9bb:	ee                   	out    dx,al
c001d9bc:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c001d9c2:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c001d9c6:	89 c2                	mov    edx,eax
c001d9c8:	ec                   	in     al,dx
c001d9c9:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c001d9cc:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c001d9cf:	0f b6 c0             	movzx  eax,al
c001d9d2:	c1 e0 08             	shl    eax,0x8
c001d9d5:	89 c1                	mov    ecx,eax
c001d9d7:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c001d9dd:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c001d9e1:	89 c2                	mov    edx,eax
c001d9e3:	ec                   	in     al,dx
c001d9e4:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c001d9e7:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c001d9ea:	0f b6 c0             	movzx  eax,al
c001d9ed:	09 c8                	or     eax,ecx
c001d9ef:	c9                   	leave  
c001d9f0:	c3                   	ret    
c001d9f1:	90                   	nop

c001d9f2 <PIC::eoi(unsigned char)>:
c001d9f2:	55                   	push   ebp
c001d9f3:	89 e5                	mov    ebp,esp
c001d9f5:	83 ec 14             	sub    esp,0x14
c001d9f8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d9fb:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c001d9fe:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c001da02:	75 1e                	jne    c001da22 <PIC::eoi(unsigned char)+0x30>
c001da04:	6a 0b                	push   0xb
c001da06:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001da09:	e8 7a ff ff ff       	call   c001d988 <PIC::getIRQReg(int)>
c001da0e:	83 c4 08             	add    esp,0x8
c001da11:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c001da15:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c001da19:	25 80 00 00 00       	and    eax,0x80
c001da1e:	85 c0                	test   eax,eax
c001da20:	74 5f                	je     c001da81 <PIC::eoi(unsigned char)+0x8f>
c001da22:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c001da26:	75 2d                	jne    c001da55 <PIC::eoi(unsigned char)+0x63>
c001da28:	6a 0b                	push   0xb
c001da2a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001da2d:	e8 56 ff ff ff       	call   c001d988 <PIC::getIRQReg(int)>
c001da32:	83 c4 08             	add    esp,0x8
c001da35:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c001da39:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001da3c:	66 85 c0             	test   ax,ax
c001da3f:	78 14                	js     c001da55 <PIC::eoi(unsigned char)+0x63>
c001da41:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c001da47:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c001da4b:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c001da4e:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c001da52:	ee                   	out    dx,al
c001da53:	eb 2d                	jmp    c001da82 <PIC::eoi(unsigned char)+0x90>
c001da55:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c001da59:	76 12                	jbe    c001da6d <PIC::eoi(unsigned char)+0x7b>
c001da5b:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c001da61:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c001da65:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c001da68:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c001da6c:	ee                   	out    dx,al
c001da6d:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c001da73:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c001da77:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c001da7a:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c001da7e:	ee                   	out    dx,al
c001da7f:	eb 01                	jmp    c001da82 <PIC::eoi(unsigned char)+0x90>
c001da81:	90                   	nop
c001da82:	c9                   	leave  
c001da83:	c3                   	ret    

c001da84 <PIC::remap()>:
c001da84:	55                   	push   ebp
c001da85:	89 e5                	mov    ebp,esp
c001da87:	83 ec 48             	sub    esp,0x48
c001da8a:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c001da91:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c001da98:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c001da9e:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c001daa1:	89 c2                	mov    edx,eax
c001daa3:	ec                   	in     al,dx
c001daa4:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c001daa7:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c001daaa:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c001daad:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c001dab3:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c001dab6:	89 c2                	mov    edx,eax
c001dab8:	ec                   	in     al,dx
c001dab9:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c001dabc:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c001dabf:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c001dac2:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c001dac8:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c001dacc:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c001dacf:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c001dad2:	ee                   	out    dx,al
c001dad3:	83 ec 0c             	sub    esp,0xc
c001dad6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001dad9:	e8 a4 fe ff ff       	call   c001d982 <PIC::ioWait()>
c001dade:	83 c4 10             	add    esp,0x10
c001dae1:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c001dae7:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c001daeb:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c001daee:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c001daf1:	ee                   	out    dx,al
c001daf2:	83 ec 0c             	sub    esp,0xc
c001daf5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001daf8:	e8 85 fe ff ff       	call   c001d982 <PIC::ioWait()>
c001dafd:	83 c4 10             	add    esp,0x10
c001db00:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001db03:	0f b6 c0             	movzx  eax,al
c001db06:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c001db0c:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c001db0f:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c001db12:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c001db15:	ee                   	out    dx,al
c001db16:	83 ec 0c             	sub    esp,0xc
c001db19:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001db1c:	e8 61 fe ff ff       	call   c001d982 <PIC::ioWait()>
c001db21:	83 c4 10             	add    esp,0x10
c001db24:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001db27:	0f b6 c0             	movzx  eax,al
c001db2a:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c001db30:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c001db33:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c001db36:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001db39:	ee                   	out    dx,al
c001db3a:	83 ec 0c             	sub    esp,0xc
c001db3d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001db40:	e8 3d fe ff ff       	call   c001d982 <PIC::ioWait()>
c001db45:	83 c4 10             	add    esp,0x10
c001db48:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c001db4e:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c001db52:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c001db55:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c001db58:	ee                   	out    dx,al
c001db59:	83 ec 0c             	sub    esp,0xc
c001db5c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001db5f:	e8 1e fe ff ff       	call   c001d982 <PIC::ioWait()>
c001db64:	83 c4 10             	add    esp,0x10
c001db67:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c001db6d:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c001db71:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c001db74:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c001db77:	ee                   	out    dx,al
c001db78:	83 ec 0c             	sub    esp,0xc
c001db7b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001db7e:	e8 ff fd ff ff       	call   c001d982 <PIC::ioWait()>
c001db83:	83 c4 10             	add    esp,0x10
c001db86:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c001db8c:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c001db90:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c001db93:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c001db96:	ee                   	out    dx,al
c001db97:	83 ec 0c             	sub    esp,0xc
c001db9a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001db9d:	e8 e0 fd ff ff       	call   c001d982 <PIC::ioWait()>
c001dba2:	83 c4 10             	add    esp,0x10
c001dba5:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c001dbab:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c001dbaf:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c001dbb2:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001dbb5:	ee                   	out    dx,al
c001dbb6:	83 ec 0c             	sub    esp,0xc
c001dbb9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001dbbc:	e8 c1 fd ff ff       	call   c001d982 <PIC::ioWait()>
c001dbc1:	83 c4 10             	add    esp,0x10
c001dbc4:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c001dbc8:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c001dbce:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c001dbd1:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c001dbd4:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001dbd7:	ee                   	out    dx,al
c001dbd8:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c001dbdc:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c001dbe2:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c001dbe5:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c001dbe8:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001dbeb:	ee                   	out    dx,al
c001dbec:	90                   	nop
c001dbed:	c9                   	leave  
c001dbee:	c3                   	ret    
c001dbef:	90                   	nop

c001dbf0 <PIC::open(int, int, void*)>:
c001dbf0:	55                   	push   ebp
c001dbf1:	89 e5                	mov    ebp,esp
c001dbf3:	83 ec 18             	sub    esp,0x18
c001dbf6:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c001dbfc:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c001dc00:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c001dc03:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c001dc07:	ee                   	out    dx,al
c001dc08:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c001dc0e:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c001dc12:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c001dc15:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c001dc19:	ee                   	out    dx,al
c001dc1a:	83 ec 0c             	sub    esp,0xc
c001dc1d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001dc20:	e8 5f fe ff ff       	call   c001da84 <PIC::remap()>
c001dc25:	83 c4 10             	add    esp,0x10
c001dc28:	b8 00 00 00 00       	mov    eax,0x0
c001dc2d:	c9                   	leave  
c001dc2e:	c3                   	ret    
c001dc2f:	90                   	nop

c001dc30 <APICTimer::close(int, int, void*)>:
c001dc30:	b8 00 00 00 00       	mov    eax,0x0
c001dc35:	c3                   	ret    

c001dc36 <apicTimerHandler(regs*, void*)>:
c001dc36:	83 ec 0c             	sub    esp,0xc
c001dc39:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001dc3d:	8b 00                	mov    eax,DWORD PTR [eax]
c001dc3f:	99                   	cdq    
c001dc40:	52                   	push   edx
c001dc41:	50                   	push   eax
c001dc42:	6a 00                	push   0x0
c001dc44:	68 00 ca 9a 3b       	push   0x3b9aca00
c001dc49:	e8 6e 07 00 00       	call   c001e3bc <__udivdi3>
c001dc4e:	83 c4 10             	add    esp,0x10
c001dc51:	83 ec 08             	sub    esp,0x8
c001dc54:	52                   	push   edx
c001dc55:	50                   	push   eax
c001dc56:	e8 a8 45 ff ff       	call   c0012203 <timerHandler(unsigned long long)>
c001dc5b:	83 c4 10             	add    esp,0x10
c001dc5e:	90                   	nop
c001dc5f:	83 c4 0c             	add    esp,0xc
c001dc62:	c3                   	ret    
c001dc63:	90                   	nop

c001dc64 <APICTimer::write(int)>:
c001dc64:	53                   	push   ebx
c001dc65:	83 ec 28             	sub    esp,0x28
c001dc68:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc6c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001dc70:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001dc76:	e8 6f 60 ff ff       	call   c0013cea <thisCPU()>
c001dc7b:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c001dc81:	83 ec 0c             	sub    esp,0xc
c001dc84:	50                   	push   eax
c001dc85:	e8 0e f6 ff ff       	call   c001d298 <APIC::getBase()>
c001dc8a:	83 c4 10             	add    esp,0x10
c001dc8d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001dc91:	a1 70 3a 02 c0       	mov    eax,ds:0xc0023a70
c001dc96:	8b 15 74 3a 02 c0    	mov    edx,DWORD PTR ds:0xc0023a74
c001dc9c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001dca0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001dca4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001dca8:	05 e0 03 00 00       	add    eax,0x3e0
c001dcad:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c001dcb3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001dcb7:	05 80 03 00 00       	add    eax,0x380
c001dcbc:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c001dcc2:	fb                   	sti    
c001dcc3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dcc7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001dccb:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c001dcd0:	83 d2 00             	adc    edx,0x0
c001dcd3:	89 c1                	mov    ecx,eax
c001dcd5:	89 d3                	mov    ebx,edx
c001dcd7:	a1 70 3a 02 c0       	mov    eax,ds:0xc0023a70
c001dcdc:	8b 15 74 3a 02 c0    	mov    edx,DWORD PTR ds:0xc0023a74
c001dce2:	39 c8                	cmp    eax,ecx
c001dce4:	89 d0                	mov    eax,edx
c001dce6:	19 d8                	sbb    eax,ebx
c001dce8:	73 02                	jae    c001dcec <APICTimer::write(int)+0x88>
c001dcea:	eb d7                	jmp    c001dcc3 <APICTimer::write(int)+0x5f>
c001dcec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001dcf0:	05 20 03 00 00       	add    eax,0x320
c001dcf5:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c001dcfb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001dcff:	05 90 03 00 00       	add    eax,0x390
c001dd04:	8b 00                	mov    eax,DWORD PTR [eax]
c001dd06:	f7 d0                	not    eax
c001dd08:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001dd0c:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001dd10:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dd14:	ba 00 00 00 00       	mov    edx,0x0
c001dd19:	f7 f3                	div    ebx
c001dd1b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001dd1f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd23:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001dd29:	0d 00 00 02 00       	or     eax,0x20000
c001dd2e:	89 c2                	mov    edx,eax
c001dd30:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001dd34:	05 20 03 00 00       	add    eax,0x320
c001dd39:	89 10                	mov    DWORD PTR [eax],edx
c001dd3b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001dd3f:	05 e0 03 00 00       	add    eax,0x3e0
c001dd44:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c001dd4a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001dd4e:	05 80 03 00 00       	add    eax,0x380
c001dd53:	89 c2                	mov    edx,eax
c001dd55:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001dd59:	89 02                	mov    DWORD PTR [edx],eax
c001dd5b:	90                   	nop
c001dd5c:	83 c4 28             	add    esp,0x28
c001dd5f:	5b                   	pop    ebx
c001dd60:	c3                   	ret    
c001dd61:	90                   	nop

c001dd62 <APICTimer::open(int, int, void*)>:
c001dd62:	57                   	push   edi
c001dd63:	56                   	push   esi
c001dd64:	53                   	push   ebx
c001dd65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd69:	8b 00                	mov    eax,DWORD PTR [eax]
c001dd6b:	83 c0 24             	add    eax,0x24
c001dd6e:	8b 00                	mov    eax,DWORD PTR [eax]
c001dd70:	83 ec 08             	sub    esp,0x8
c001dd73:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dd77:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dd7b:	ff d0                	call   eax
c001dd7d:	83 c4 10             	add    esp,0x10
c001dd80:	e8 65 5f ff ff       	call   c0013cea <thisCPU()>
c001dd85:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c001dd8b:	83 ec 0c             	sub    esp,0xc
c001dd8e:	50                   	push   eax
c001dd8f:	e8 04 f5 ff ff       	call   c001d298 <APIC::getBase()>
c001dd94:	83 c4 10             	add    esp,0x10
c001dd97:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c001dd9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dda1:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001dda7:	0f b6 f8             	movzx  edi,al
c001ddaa:	89 d0                	mov    eax,edx
c001ddac:	ba 00 00 00 00       	mov    edx,0x0
c001ddb1:	89 c1                	mov    ecx,eax
c001ddb3:	80 e5 ff             	and    ch,0xff
c001ddb6:	89 cb                	mov    ebx,ecx
c001ddb8:	0f b6 f2             	movzx  esi,dl
c001ddbb:	89 d8                	mov    eax,ebx
c001ddbd:	89 f2                	mov    edx,esi
c001ddbf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ddc3:	8d 5f 08             	lea    ebx,[edi+0x8]
c001ddc6:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001ddca:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001ddce:	83 e0 00             	and    eax,0x0
c001ddd1:	09 d0                	or     eax,edx
c001ddd3:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001ddd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dddb:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001dde1:	8d 50 01             	lea    edx,[eax+0x1]
c001dde4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001dde8:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001ddee:	0f b6 d0             	movzx  edx,al
c001ddf1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ddf5:	83 c2 08             	add    edx,0x8
c001ddf8:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001ddfc:	0f b6 c9             	movzx  ecx,cl
c001ddff:	81 c9 00 00 01 00    	or     ecx,0x10000
c001de05:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001de09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de0d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001de11:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001de17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de1b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001de1f:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001de25:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001de29:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001de2f:	83 ec 0c             	sub    esp,0xc
c001de32:	51                   	push   ecx
c001de33:	6a 01                	push   0x1
c001de35:	68 36 dc 01 c0       	push   0xc001dc36
c001de3a:	52                   	push   edx
c001de3b:	50                   	push   eax
c001de3c:	e8 79 22 ff ff       	call   c00100ba <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001de41:	83 c4 20             	add    esp,0x20
c001de44:	89 c2                	mov    edx,eax
c001de46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de4a:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001de50:	b8 00 00 00 00       	mov    eax,0x0
c001de55:	5b                   	pop    ebx
c001de56:	5e                   	pop    esi
c001de57:	5f                   	pop    edi
c001de58:	c3                   	ret    
c001de59:	90                   	nop

c001de5a <APICTimer::APICTimer()>:
c001de5a:	83 ec 0c             	sub    esp,0xc
c001de5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de61:	83 ec 08             	sub    esp,0x8
c001de64:	68 94 27 02 c0       	push   0xc0022794
c001de69:	50                   	push   eax
c001de6a:	e8 05 43 ff ff       	call   c0012174 <Timer::Timer(char const*)>
c001de6f:	83 c4 10             	add    esp,0x10
c001de72:	ba a8 27 02 c0       	mov    edx,0xc00227a8
c001de77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de7b:	89 10                	mov    DWORD PTR [eax],edx
c001de7d:	90                   	nop
c001de7e:	83 c4 0c             	add    esp,0xc
c001de81:	c3                   	ret    

c001de82 <PIT::write(int)>:
c001de82:	83 ec 10             	sub    esp,0x10
c001de85:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001de89:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001de8d:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001de93:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001de97:	a3 04 52 02 c0       	mov    ds:0xc0025204,eax
c001de9c:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001dea1:	99                   	cdq    
c001dea2:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001dea6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001deaa:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001deb1:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001deb6:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001deba:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001debf:	ee                   	out    dx,al
c001dec0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dec4:	0f b6 c0             	movzx  eax,al
c001dec7:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001dece:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001ded2:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001ded6:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001dedb:	ee                   	out    dx,al
c001dedc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dee0:	c1 f8 08             	sar    eax,0x8
c001dee3:	0f b6 c0             	movzx  eax,al
c001dee6:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001deed:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001def1:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001def5:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001defa:	ee                   	out    dx,al
c001defb:	90                   	nop
c001defc:	83 c4 10             	add    esp,0x10
c001deff:	c3                   	ret    

c001df00 <pitHandler(regs*, void*)>:
c001df00:	83 ec 0c             	sub    esp,0xc
c001df03:	a1 04 52 02 c0       	mov    eax,ds:0xc0025204
c001df08:	99                   	cdq    
c001df09:	52                   	push   edx
c001df0a:	50                   	push   eax
c001df0b:	6a 00                	push   0x0
c001df0d:	68 00 ca 9a 3b       	push   0x3b9aca00
c001df12:	e8 a5 04 00 00       	call   c001e3bc <__udivdi3>
c001df17:	83 c4 10             	add    esp,0x10
c001df1a:	83 ec 08             	sub    esp,0x8
c001df1d:	52                   	push   edx
c001df1e:	50                   	push   eax
c001df1f:	e8 df 42 ff ff       	call   c0012203 <timerHandler(unsigned long long)>
c001df24:	83 c4 10             	add    esp,0x10
c001df27:	90                   	nop
c001df28:	83 c4 0c             	add    esp,0xc
c001df2b:	c3                   	ret    

c001df2c <PIT::open(int, int, void*)>:
c001df2c:	83 ec 0c             	sub    esp,0xc
c001df2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001df33:	8b 00                	mov    eax,DWORD PTR [eax]
c001df35:	83 c0 24             	add    eax,0x24
c001df38:	8b 00                	mov    eax,DWORD PTR [eax]
c001df3a:	83 ec 08             	sub    esp,0x8
c001df3d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001df41:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001df45:	ff d0                	call   eax
c001df47:	83 c4 10             	add    esp,0x10
c001df4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001df4e:	83 ec 0c             	sub    esp,0xc
c001df51:	6a 00                	push   0x0
c001df53:	6a 01                	push   0x1
c001df55:	68 00 df 01 c0       	push   0xc001df00
c001df5a:	6a 00                	push   0x0
c001df5c:	50                   	push   eax
c001df5d:	e8 58 21 ff ff       	call   c00100ba <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001df62:	83 c4 20             	add    esp,0x20
c001df65:	89 c2                	mov    edx,eax
c001df67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001df6b:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001df71:	b8 00 00 00 00       	mov    eax,0x0
c001df76:	83 c4 0c             	add    esp,0xc
c001df79:	c3                   	ret    

c001df7a <PIT::close(int, int, void*)>:
c001df7a:	83 ec 0c             	sub    esp,0xc
c001df7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001df81:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001df8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001df8f:	6a 01                	push   0x1
c001df91:	68 00 df 01 c0       	push   0xc001df00
c001df96:	6a 00                	push   0x0
c001df98:	50                   	push   eax
c001df99:	e8 7a 21 ff ff       	call   c0010118 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001df9e:	83 c4 10             	add    esp,0x10
c001dfa1:	b8 00 00 00 00       	mov    eax,0x0
c001dfa6:	83 c4 0c             	add    esp,0xc
c001dfa9:	c3                   	ret    

c001dfaa <PIT::PIT()>:
c001dfaa:	83 ec 0c             	sub    esp,0xc
c001dfad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dfb1:	83 ec 08             	sub    esp,0x8
c001dfb4:	68 d0 27 02 c0       	push   0xc00227d0
c001dfb9:	50                   	push   eax
c001dfba:	e8 b5 41 ff ff       	call   c0012174 <Timer::Timer(char const*)>
c001dfbf:	83 c4 10             	add    esp,0x10
c001dfc2:	ba f8 27 02 c0       	mov    edx,0xc00227f8
c001dfc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dfcb:	89 10                	mov    DWORD PTR [eax],edx
c001dfcd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dfd1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001dfd7:	0f b6 d0             	movzx  edx,al
c001dfda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dfde:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001dfe5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dfe9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001dfef:	0f b6 d0             	movzx  edx,al
c001dff2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dff6:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001dffb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dfff:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e005:	8d 50 01             	lea    edx,[eax+0x1]
c001e008:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e00c:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001e012:	0f b6 d0             	movzx  edx,al
c001e015:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e019:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001e01d:	83 e1 3f             	and    ecx,0x3f
c001e020:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001e024:	90                   	nop
c001e025:	83 c4 0c             	add    esp,0xc
c001e028:	c3                   	ret    
c001e029:	66 90                	xchg   ax,ax
c001e02b:	66 90                	xchg   ax,ax
c001e02d:	66 90                	xchg   ax,ax
c001e02f:	90                   	nop

c001e030 <avxDetect>:
c001e030:	b8 00 00 00 00       	mov    eax,0x0
c001e035:	c3                   	ret    

c001e036 <avxSave>:
c001e036:	c3                   	ret    

c001e037 <avxLoad>:
c001e037:	c3                   	ret    

c001e038 <avxInit>:
c001e038:	c3                   	ret    

c001e039 <avxClose>:
c001e039:	c3                   	ret    
c001e03a:	66 90                	xchg   ax,ax
c001e03c:	66 90                	xchg   ax,ax
c001e03e:	66 90                	xchg   ax,ax

c001e040 <sseDetect>:
c001e040:	b8 01 00 00 00       	mov    eax,0x1
c001e045:	0f a2                	cpuid  
c001e047:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001e04d:	74 06                	je     c001e055 <sseDetect.noSSE>
c001e04f:	b8 01 00 00 00       	mov    eax,0x1
c001e054:	c3                   	ret    

c001e055 <sseDetect.noSSE>:
c001e055:	b8 00 00 00 00       	mov    eax,0x0
c001e05a:	c3                   	ret    

c001e05b <sseSave>:
c001e05b:	0f ae 44 24 08       	fxsave [esp+0x8]
c001e060:	c3                   	ret    

c001e061 <sseLoad>:
c001e061:	0f ae 4c 24 08       	fxrstor [esp+0x8]
c001e066:	c3                   	ret    

c001e067 <sseInit>:
c001e067:	e8 40 00 00 00       	call   c001e0ac <x87Init>
c001e06c:	0f 20 e0             	mov    eax,cr4
c001e06f:	66 0d 00 06          	or     ax,0x600
c001e073:	0f 22 e0             	mov    cr4,eax
c001e076:	c3                   	ret    

c001e077 <sseClose>:
c001e077:	c3                   	ret    
c001e078:	66 90                	xchg   ax,ax
c001e07a:	66 90                	xchg   ax,ax
c001e07c:	66 90                	xchg   ax,ax
c001e07e:	66 90                	xchg   ax,ax

c001e080 <value_37F>:
c001e080:	7f 03                	jg     c001e085 <value_37A+0x1>

c001e082 <value_37E>:
c001e082:	7e 03                	jle    c001e087 <x87Detect+0x1>

c001e084 <value_37A>:
c001e084:	7a 03                	jp     c001e089 <x87Detect+0x3>

c001e086 <x87Detect>:
c001e086:	b8 01 00 00 00       	mov    eax,0x1
c001e08b:	0f a2                	cpuid  
c001e08d:	f7 c2 01 00 00 00    	test   edx,0x1
c001e093:	74 06                	je     c001e09b <x87Detect.nox87>
c001e095:	b8 01 00 00 00       	mov    eax,0x1
c001e09a:	c3                   	ret    

c001e09b <x87Detect.nox87>:
c001e09b:	b8 00 00 00 00       	mov    eax,0x0
c001e0a0:	c3                   	ret    

c001e0a1 <x87Save>:
c001e0a1:	9b dd 74 24 08       	fsave  [esp+0x8]
c001e0a6:	c3                   	ret    

c001e0a7 <x87Load>:
c001e0a7:	dd 64 24 08          	frstor [esp+0x8]
c001e0ab:	c3                   	ret    

c001e0ac <x87Init>:
c001e0ac:	9b db e3             	finit  
c001e0af:	0f 20 c0             	mov    eax,cr0
c001e0b2:	66 25 fb ff          	and    ax,0xfffb
c001e0b6:	66 0d 22 00          	or     ax,0x22
c001e0ba:	0f 22 c0             	mov    cr0,eax
c001e0bd:	0f 06                	clts   
c001e0bf:	d9 2d 84 e0 01 c0    	fldcw  WORD PTR ds:0xc001e084
c001e0c5:	c3                   	ret    

c001e0c6 <x87Close>:
c001e0c6:	c3                   	ret    
c001e0c7:	90                   	nop

c001e0c8 <__do_global_ctors_aux>:
c001e0c8:	a1 a8 f1 01 c0       	mov    eax,ds:0xc001f1a8
c001e0cd:	83 f8 ff             	cmp    eax,0xffffffff
c001e0d0:	74 1a                	je     c001e0ec <__do_global_ctors_aux+0x24>
c001e0d2:	55                   	push   ebp
c001e0d3:	89 e5                	mov    ebp,esp
c001e0d5:	53                   	push   ebx
c001e0d6:	52                   	push   edx
c001e0d7:	bb a8 f1 01 c0       	mov    ebx,0xc001f1a8
c001e0dc:	ff d0                	call   eax
c001e0de:	83 eb 04             	sub    ebx,0x4
c001e0e1:	8b 03                	mov    eax,DWORD PTR [ebx]
c001e0e3:	83 f8 ff             	cmp    eax,0xffffffff
c001e0e6:	75 f4                	jne    c001e0dc <__do_global_ctors_aux+0x14>
c001e0e8:	58                   	pop    eax
c001e0e9:	5b                   	pop    ebx
c001e0ea:	5d                   	pop    ebp
c001e0eb:	c3                   	ret    
c001e0ec:	c3                   	ret    
c001e0ed:	66 90                	xchg   ax,ax
c001e0ef:	90                   	nop

c001e0f0 <__divdi3>:
c001e0f0:	55                   	push   ebp
c001e0f1:	57                   	push   edi
c001e0f2:	56                   	push   esi
c001e0f3:	53                   	push   ebx
c001e0f4:	83 ec 1c             	sub    esp,0x1c
c001e0f7:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001e0fb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e0ff:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001e102:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001e106:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e10a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001e10e:	85 db                	test   ebx,ebx
c001e110:	0f 88 8e 00 00 00    	js     c001e1a4 <__divdi3+0xb4>
c001e116:	89 dd                	mov    ebp,ebx
c001e118:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001e120:	89 d3                	mov    ebx,edx
c001e122:	85 d2                	test   edx,edx
c001e124:	79 0d                	jns    c001e133 <__divdi3+0x43>
c001e126:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001e12a:	f7 d8                	neg    eax
c001e12c:	83 d2 00             	adc    edx,0x0
c001e12f:	f7 da                	neg    edx
c001e131:	89 d3                	mov    ebx,edx
c001e133:	89 c7                	mov    edi,eax
c001e135:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001e138:	85 db                	test   ebx,ebx
c001e13a:	75 48                	jne    c001e184 <__divdi3+0x94>
c001e13c:	39 ef                	cmp    edi,ebp
c001e13e:	76 24                	jbe    c001e164 <__divdi3+0x74>
c001e140:	89 ea                	mov    edx,ebp
c001e142:	f7 f7                	div    edi
c001e144:	89 c1                	mov    ecx,eax
c001e146:	31 f6                	xor    esi,esi
c001e148:	89 c8                	mov    eax,ecx
c001e14a:	89 f2                	mov    edx,esi
c001e14c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e150:	85 c9                	test   ecx,ecx
c001e152:	74 07                	je     c001e15b <__divdi3+0x6b>
c001e154:	f7 d8                	neg    eax
c001e156:	83 d2 00             	adc    edx,0x0
c001e159:	f7 da                	neg    edx
c001e15b:	83 c4 1c             	add    esp,0x1c
c001e15e:	5b                   	pop    ebx
c001e15f:	5e                   	pop    esi
c001e160:	5f                   	pop    edi
c001e161:	5d                   	pop    ebp
c001e162:	c3                   	ret    
c001e163:	90                   	nop
c001e164:	85 ff                	test   edi,edi
c001e166:	75 0b                	jne    c001e173 <__divdi3+0x83>
c001e168:	b8 01 00 00 00       	mov    eax,0x1
c001e16d:	31 d2                	xor    edx,edx
c001e16f:	f7 f3                	div    ebx
c001e171:	89 c7                	mov    edi,eax
c001e173:	31 d2                	xor    edx,edx
c001e175:	89 e8                	mov    eax,ebp
c001e177:	f7 f7                	div    edi
c001e179:	89 c6                	mov    esi,eax
c001e17b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001e17e:	f7 f7                	div    edi
c001e180:	89 c1                	mov    ecx,eax
c001e182:	eb c4                	jmp    c001e148 <__divdi3+0x58>
c001e184:	39 eb                	cmp    ebx,ebp
c001e186:	77 3c                	ja     c001e1c4 <__divdi3+0xd4>
c001e188:	0f bd f3             	bsr    esi,ebx
c001e18b:	83 f6 1f             	xor    esi,0x1f
c001e18e:	75 40                	jne    c001e1d0 <__divdi3+0xe0>
c001e190:	39 eb                	cmp    ebx,ebp
c001e192:	72 09                	jb     c001e19d <__divdi3+0xad>
c001e194:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001e197:	0f 87 97 00 00 00    	ja     c001e234 <__divdi3+0x144>
c001e19d:	b9 01 00 00 00       	mov    ecx,0x1
c001e1a2:	eb a4                	jmp    c001e148 <__divdi3+0x58>
c001e1a4:	f7 d9                	neg    ecx
c001e1a6:	83 d3 00             	adc    ebx,0x0
c001e1a9:	f7 db                	neg    ebx
c001e1ab:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001e1ae:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001e1b2:	89 dd                	mov    ebp,ebx
c001e1b4:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001e1bc:	e9 5f ff ff ff       	jmp    c001e120 <__divdi3+0x30>
c001e1c1:	8d 76 00             	lea    esi,[esi+0x0]
c001e1c4:	31 f6                	xor    esi,esi
c001e1c6:	31 c9                	xor    ecx,ecx
c001e1c8:	e9 7b ff ff ff       	jmp    c001e148 <__divdi3+0x58>
c001e1cd:	8d 76 00             	lea    esi,[esi+0x0]
c001e1d0:	b8 20 00 00 00       	mov    eax,0x20
c001e1d5:	29 f0                	sub    eax,esi
c001e1d7:	89 f1                	mov    ecx,esi
c001e1d9:	d3 e3                	shl    ebx,cl
c001e1db:	89 fa                	mov    edx,edi
c001e1dd:	88 c1                	mov    cl,al
c001e1df:	d3 ea                	shr    edx,cl
c001e1e1:	09 da                	or     edx,ebx
c001e1e3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e1e7:	89 f1                	mov    ecx,esi
c001e1e9:	d3 e7                	shl    edi,cl
c001e1eb:	89 eb                	mov    ebx,ebp
c001e1ed:	88 c1                	mov    cl,al
c001e1ef:	d3 eb                	shr    ebx,cl
c001e1f1:	89 f1                	mov    ecx,esi
c001e1f3:	d3 e5                	shl    ebp,cl
c001e1f5:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001e1f8:	88 c1                	mov    cl,al
c001e1fa:	d3 ea                	shr    edx,cl
c001e1fc:	09 d5                	or     ebp,edx
c001e1fe:	89 e8                	mov    eax,ebp
c001e200:	89 da                	mov    edx,ebx
c001e202:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001e206:	89 d3                	mov    ebx,edx
c001e208:	89 c5                	mov    ebp,eax
c001e20a:	f7 e7                	mul    edi
c001e20c:	39 d3                	cmp    ebx,edx
c001e20e:	72 18                	jb     c001e228 <__divdi3+0x138>
c001e210:	74 0a                	je     c001e21c <__divdi3+0x12c>
c001e212:	89 e9                	mov    ecx,ebp
c001e214:	31 f6                	xor    esi,esi
c001e216:	e9 2d ff ff ff       	jmp    c001e148 <__divdi3+0x58>
c001e21b:	90                   	nop
c001e21c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001e21f:	89 f1                	mov    ecx,esi
c001e221:	d3 e7                	shl    edi,cl
c001e223:	39 c7                	cmp    edi,eax
c001e225:	73 eb                	jae    c001e212 <__divdi3+0x122>
c001e227:	90                   	nop
c001e228:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001e22b:	31 f6                	xor    esi,esi
c001e22d:	e9 16 ff ff ff       	jmp    c001e148 <__divdi3+0x58>
c001e232:	66 90                	xchg   ax,ax
c001e234:	31 c9                	xor    ecx,ecx
c001e236:	e9 0d ff ff ff       	jmp    c001e148 <__divdi3+0x58>
c001e23b:	90                   	nop

c001e23c <__moddi3>:
c001e23c:	55                   	push   ebp
c001e23d:	57                   	push   edi
c001e23e:	56                   	push   esi
c001e23f:	53                   	push   ebx
c001e240:	83 ec 2c             	sub    esp,0x2c
c001e243:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001e247:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001e24b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001e24f:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001e253:	85 db                	test   ebx,ebx
c001e255:	0f 88 85 00 00 00    	js     c001e2e0 <__moddi3+0xa4>
c001e25b:	89 de                	mov    esi,ebx
c001e25d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001e265:	89 d7                	mov    edi,edx
c001e267:	85 d2                	test   edx,edx
c001e269:	79 09                	jns    c001e274 <__moddi3+0x38>
c001e26b:	f7 d8                	neg    eax
c001e26d:	83 d2 00             	adc    edx,0x0
c001e270:	f7 da                	neg    edx
c001e272:	89 d7                	mov    edi,edx
c001e274:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e278:	89 cd                	mov    ebp,ecx
c001e27a:	85 ff                	test   edi,edi
c001e27c:	75 52                	jne    c001e2d0 <__moddi3+0x94>
c001e27e:	89 c3                	mov    ebx,eax
c001e280:	39 f0                	cmp    eax,esi
c001e282:	76 24                	jbe    c001e2a8 <__moddi3+0x6c>
c001e284:	89 c8                	mov    eax,ecx
c001e286:	89 f2                	mov    edx,esi
c001e288:	f7 f3                	div    ebx
c001e28a:	89 d6                	mov    esi,edx
c001e28c:	89 f0                	mov    eax,esi
c001e28e:	31 d2                	xor    edx,edx
c001e290:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e294:	85 c9                	test   ecx,ecx
c001e296:	74 07                	je     c001e29f <__moddi3+0x63>
c001e298:	f7 d8                	neg    eax
c001e29a:	83 d2 00             	adc    edx,0x0
c001e29d:	f7 da                	neg    edx
c001e29f:	83 c4 2c             	add    esp,0x2c
c001e2a2:	5b                   	pop    ebx
c001e2a3:	5e                   	pop    esi
c001e2a4:	5f                   	pop    edi
c001e2a5:	5d                   	pop    ebp
c001e2a6:	c3                   	ret    
c001e2a7:	90                   	nop
c001e2a8:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001e2ac:	85 db                	test   ebx,ebx
c001e2ae:	75 0d                	jne    c001e2bd <__moddi3+0x81>
c001e2b0:	b8 01 00 00 00       	mov    eax,0x1
c001e2b5:	31 d2                	xor    edx,edx
c001e2b7:	f7 f7                	div    edi
c001e2b9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e2bd:	89 f0                	mov    eax,esi
c001e2bf:	31 d2                	xor    edx,edx
c001e2c1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e2c5:	f7 f7                	div    edi
c001e2c7:	89 e8                	mov    eax,ebp
c001e2c9:	f7 f7                	div    edi
c001e2cb:	89 d6                	mov    esi,edx
c001e2cd:	eb bd                	jmp    c001e28c <__moddi3+0x50>
c001e2cf:	90                   	nop
c001e2d0:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001e2d4:	39 f7                	cmp    edi,esi
c001e2d6:	76 20                	jbe    c001e2f8 <__moddi3+0xbc>
c001e2d8:	89 c8                	mov    eax,ecx
c001e2da:	89 f2                	mov    edx,esi
c001e2dc:	eb b2                	jmp    c001e290 <__moddi3+0x54>
c001e2de:	66 90                	xchg   ax,ax
c001e2e0:	f7 d9                	neg    ecx
c001e2e2:	83 d3 00             	adc    ebx,0x0
c001e2e5:	f7 db                	neg    ebx
c001e2e7:	89 de                	mov    esi,ebx
c001e2e9:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001e2f1:	e9 6f ff ff ff       	jmp    c001e265 <__moddi3+0x29>
c001e2f6:	66 90                	xchg   ax,ax
c001e2f8:	0f bd c7             	bsr    eax,edi
c001e2fb:	83 f0 1f             	xor    eax,0x1f
c001e2fe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e302:	75 24                	jne    c001e328 <__moddi3+0xec>
c001e304:	39 f7                	cmp    edi,esi
c001e306:	72 06                	jb     c001e30e <__moddi3+0xd2>
c001e308:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001e30c:	77 0c                	ja     c001e31a <__moddi3+0xde>
c001e30e:	89 e9                	mov    ecx,ebp
c001e310:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001e314:	19 fe                	sbb    esi,edi
c001e316:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001e31a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e31e:	89 f2                	mov    edx,esi
c001e320:	e9 6b ff ff ff       	jmp    c001e290 <__moddi3+0x54>
c001e325:	8d 76 00             	lea    esi,[esi+0x0]
c001e328:	b8 20 00 00 00       	mov    eax,0x20
c001e32d:	89 c2                	mov    edx,eax
c001e32f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001e333:	29 da                	sub    edx,ebx
c001e335:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001e339:	88 d9                	mov    cl,bl
c001e33b:	d3 e7                	shl    edi,cl
c001e33d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e341:	88 d1                	mov    cl,dl
c001e343:	d3 e8                	shr    eax,cl
c001e345:	09 c7                	or     edi,eax
c001e347:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001e34b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e34f:	89 d8                	mov    eax,ebx
c001e351:	88 d9                	mov    cl,bl
c001e353:	d3 e7                	shl    edi,cl
c001e355:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001e359:	89 f3                	mov    ebx,esi
c001e35b:	88 d1                	mov    cl,dl
c001e35d:	d3 eb                	shr    ebx,cl
c001e35f:	89 c7                	mov    edi,eax
c001e361:	88 c1                	mov    cl,al
c001e363:	d3 e6                	shl    esi,cl
c001e365:	89 e8                	mov    eax,ebp
c001e367:	88 d1                	mov    cl,dl
c001e369:	d3 e8                	shr    eax,cl
c001e36b:	09 f0                	or     eax,esi
c001e36d:	89 f9                	mov    ecx,edi
c001e36f:	d3 e5                	shl    ebp,cl
c001e371:	89 da                	mov    edx,ebx
c001e373:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001e377:	89 d3                	mov    ebx,edx
c001e379:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001e37d:	89 c6                	mov    esi,eax
c001e37f:	89 d1                	mov    ecx,edx
c001e381:	39 d3                	cmp    ebx,edx
c001e383:	72 27                	jb     c001e3ac <__moddi3+0x170>
c001e385:	74 21                	je     c001e3a8 <__moddi3+0x16c>
c001e387:	29 f5                	sub    ebp,esi
c001e389:	19 cb                	sbb    ebx,ecx
c001e38b:	89 de                	mov    esi,ebx
c001e38d:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001e391:	d3 e6                	shl    esi,cl
c001e393:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001e397:	89 f9                	mov    ecx,edi
c001e399:	d3 ed                	shr    ebp,cl
c001e39b:	09 ee                	or     esi,ebp
c001e39d:	89 f0                	mov    eax,esi
c001e39f:	d3 eb                	shr    ebx,cl
c001e3a1:	89 da                	mov    edx,ebx
c001e3a3:	e9 e8 fe ff ff       	jmp    c001e290 <__moddi3+0x54>
c001e3a8:	39 c5                	cmp    ebp,eax
c001e3aa:	73 db                	jae    c001e387 <__moddi3+0x14b>
c001e3ac:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001e3b0:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001e3b4:	89 d1                	mov    ecx,edx
c001e3b6:	89 c6                	mov    esi,eax
c001e3b8:	eb cd                	jmp    c001e387 <__moddi3+0x14b>
c001e3ba:	66 90                	xchg   ax,ax

c001e3bc <__udivdi3>:
c001e3bc:	55                   	push   ebp
c001e3bd:	57                   	push   edi
c001e3be:	56                   	push   esi
c001e3bf:	53                   	push   ebx
c001e3c0:	83 ec 1c             	sub    esp,0x1c
c001e3c3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001e3c7:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001e3cb:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001e3cf:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001e3d3:	85 d2                	test   edx,edx
c001e3d5:	75 41                	jne    c001e418 <__udivdi3+0x5c>
c001e3d7:	39 f7                	cmp    edi,esi
c001e3d9:	76 15                	jbe    c001e3f0 <__udivdi3+0x34>
c001e3db:	89 e8                	mov    eax,ebp
c001e3dd:	89 f2                	mov    edx,esi
c001e3df:	f7 f7                	div    edi
c001e3e1:	31 db                	xor    ebx,ebx
c001e3e3:	89 da                	mov    edx,ebx
c001e3e5:	83 c4 1c             	add    esp,0x1c
c001e3e8:	5b                   	pop    ebx
c001e3e9:	5e                   	pop    esi
c001e3ea:	5f                   	pop    edi
c001e3eb:	5d                   	pop    ebp
c001e3ec:	c3                   	ret    
c001e3ed:	8d 76 00             	lea    esi,[esi+0x0]
c001e3f0:	89 f9                	mov    ecx,edi
c001e3f2:	85 ff                	test   edi,edi
c001e3f4:	75 0b                	jne    c001e401 <__udivdi3+0x45>
c001e3f6:	b8 01 00 00 00       	mov    eax,0x1
c001e3fb:	31 d2                	xor    edx,edx
c001e3fd:	f7 f7                	div    edi
c001e3ff:	89 c1                	mov    ecx,eax
c001e401:	31 d2                	xor    edx,edx
c001e403:	89 f0                	mov    eax,esi
c001e405:	f7 f1                	div    ecx
c001e407:	89 c3                	mov    ebx,eax
c001e409:	89 e8                	mov    eax,ebp
c001e40b:	f7 f1                	div    ecx
c001e40d:	89 da                	mov    edx,ebx
c001e40f:	83 c4 1c             	add    esp,0x1c
c001e412:	5b                   	pop    ebx
c001e413:	5e                   	pop    esi
c001e414:	5f                   	pop    edi
c001e415:	5d                   	pop    ebp
c001e416:	c3                   	ret    
c001e417:	90                   	nop
c001e418:	39 f2                	cmp    edx,esi
c001e41a:	77 1c                	ja     c001e438 <__udivdi3+0x7c>
c001e41c:	0f bd da             	bsr    ebx,edx
c001e41f:	83 f3 1f             	xor    ebx,0x1f
c001e422:	75 24                	jne    c001e448 <__udivdi3+0x8c>
c001e424:	39 f2                	cmp    edx,esi
c001e426:	72 08                	jb     c001e430 <__udivdi3+0x74>
c001e428:	39 ef                	cmp    edi,ebp
c001e42a:	0f 87 84 00 00 00    	ja     c001e4b4 <__udivdi3+0xf8>
c001e430:	b8 01 00 00 00       	mov    eax,0x1
c001e435:	eb ac                	jmp    c001e3e3 <__udivdi3+0x27>
c001e437:	90                   	nop
c001e438:	31 db                	xor    ebx,ebx
c001e43a:	31 c0                	xor    eax,eax
c001e43c:	89 da                	mov    edx,ebx
c001e43e:	83 c4 1c             	add    esp,0x1c
c001e441:	5b                   	pop    ebx
c001e442:	5e                   	pop    esi
c001e443:	5f                   	pop    edi
c001e444:	5d                   	pop    ebp
c001e445:	c3                   	ret    
c001e446:	66 90                	xchg   ax,ax
c001e448:	b8 20 00 00 00       	mov    eax,0x20
c001e44d:	29 d8                	sub    eax,ebx
c001e44f:	88 d9                	mov    cl,bl
c001e451:	d3 e2                	shl    edx,cl
c001e453:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e457:	89 fa                	mov    edx,edi
c001e459:	88 c1                	mov    cl,al
c001e45b:	d3 ea                	shr    edx,cl
c001e45d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e461:	09 d1                	or     ecx,edx
c001e463:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e467:	88 d9                	mov    cl,bl
c001e469:	d3 e7                	shl    edi,cl
c001e46b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001e46f:	89 f7                	mov    edi,esi
c001e471:	88 c1                	mov    cl,al
c001e473:	d3 ef                	shr    edi,cl
c001e475:	88 d9                	mov    cl,bl
c001e477:	d3 e6                	shl    esi,cl
c001e479:	89 ea                	mov    edx,ebp
c001e47b:	88 c1                	mov    cl,al
c001e47d:	d3 ea                	shr    edx,cl
c001e47f:	09 d6                	or     esi,edx
c001e481:	89 f0                	mov    eax,esi
c001e483:	89 fa                	mov    edx,edi
c001e485:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001e489:	89 d7                	mov    edi,edx
c001e48b:	89 c6                	mov    esi,eax
c001e48d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001e491:	39 d7                	cmp    edi,edx
c001e493:	72 13                	jb     c001e4a8 <__udivdi3+0xec>
c001e495:	74 09                	je     c001e4a0 <__udivdi3+0xe4>
c001e497:	89 f0                	mov    eax,esi
c001e499:	31 db                	xor    ebx,ebx
c001e49b:	e9 43 ff ff ff       	jmp    c001e3e3 <__udivdi3+0x27>
c001e4a0:	88 d9                	mov    cl,bl
c001e4a2:	d3 e5                	shl    ebp,cl
c001e4a4:	39 c5                	cmp    ebp,eax
c001e4a6:	73 ef                	jae    c001e497 <__udivdi3+0xdb>
c001e4a8:	8d 46 ff             	lea    eax,[esi-0x1]
c001e4ab:	31 db                	xor    ebx,ebx
c001e4ad:	e9 31 ff ff ff       	jmp    c001e3e3 <__udivdi3+0x27>
c001e4b2:	66 90                	xchg   ax,ax
c001e4b4:	31 c0                	xor    eax,eax
c001e4b6:	e9 28 ff ff ff       	jmp    c001e3e3 <__udivdi3+0x27>
c001e4bb:	90                   	nop

c001e4bc <__umoddi3>:
c001e4bc:	55                   	push   ebp
c001e4bd:	57                   	push   edi
c001e4be:	56                   	push   esi
c001e4bf:	53                   	push   ebx
c001e4c0:	83 ec 1c             	sub    esp,0x1c
c001e4c3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001e4c7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e4cb:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001e4cf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001e4d3:	89 da                	mov    edx,ebx
c001e4d5:	85 c0                	test   eax,eax
c001e4d7:	75 37                	jne    c001e510 <__umoddi3+0x54>
c001e4d9:	39 df                	cmp    edi,ebx
c001e4db:	76 13                	jbe    c001e4f0 <__umoddi3+0x34>
c001e4dd:	89 f0                	mov    eax,esi
c001e4df:	f7 f7                	div    edi
c001e4e1:	89 d0                	mov    eax,edx
c001e4e3:	31 d2                	xor    edx,edx
c001e4e5:	83 c4 1c             	add    esp,0x1c
c001e4e8:	5b                   	pop    ebx
c001e4e9:	5e                   	pop    esi
c001e4ea:	5f                   	pop    edi
c001e4eb:	5d                   	pop    ebp
c001e4ec:	c3                   	ret    
c001e4ed:	8d 76 00             	lea    esi,[esi+0x0]
c001e4f0:	89 fd                	mov    ebp,edi
c001e4f2:	85 ff                	test   edi,edi
c001e4f4:	75 0b                	jne    c001e501 <__umoddi3+0x45>
c001e4f6:	b8 01 00 00 00       	mov    eax,0x1
c001e4fb:	31 d2                	xor    edx,edx
c001e4fd:	f7 f7                	div    edi
c001e4ff:	89 c5                	mov    ebp,eax
c001e501:	89 d8                	mov    eax,ebx
c001e503:	31 d2                	xor    edx,edx
c001e505:	f7 f5                	div    ebp
c001e507:	89 f0                	mov    eax,esi
c001e509:	f7 f5                	div    ebp
c001e50b:	89 d0                	mov    eax,edx
c001e50d:	eb d4                	jmp    c001e4e3 <__umoddi3+0x27>
c001e50f:	90                   	nop
c001e510:	89 f1                	mov    ecx,esi
c001e512:	39 d8                	cmp    eax,ebx
c001e514:	76 0a                	jbe    c001e520 <__umoddi3+0x64>
c001e516:	89 f0                	mov    eax,esi
c001e518:	83 c4 1c             	add    esp,0x1c
c001e51b:	5b                   	pop    ebx
c001e51c:	5e                   	pop    esi
c001e51d:	5f                   	pop    edi
c001e51e:	5d                   	pop    ebp
c001e51f:	c3                   	ret    
c001e520:	0f bd e8             	bsr    ebp,eax
c001e523:	83 f5 1f             	xor    ebp,0x1f
c001e526:	75 1c                	jne    c001e544 <__umoddi3+0x88>
c001e528:	39 d8                	cmp    eax,ebx
c001e52a:	72 04                	jb     c001e530 <__umoddi3+0x74>
c001e52c:	39 f7                	cmp    edi,esi
c001e52e:	77 08                	ja     c001e538 <__umoddi3+0x7c>
c001e530:	89 da                	mov    edx,ebx
c001e532:	29 fe                	sub    esi,edi
c001e534:	19 c2                	sbb    edx,eax
c001e536:	89 f1                	mov    ecx,esi
c001e538:	89 c8                	mov    eax,ecx
c001e53a:	83 c4 1c             	add    esp,0x1c
c001e53d:	5b                   	pop    ebx
c001e53e:	5e                   	pop    esi
c001e53f:	5f                   	pop    edi
c001e540:	5d                   	pop    ebp
c001e541:	c3                   	ret    
c001e542:	66 90                	xchg   ax,ax
c001e544:	ba 20 00 00 00       	mov    edx,0x20
c001e549:	29 ea                	sub    edx,ebp
c001e54b:	89 e9                	mov    ecx,ebp
c001e54d:	d3 e0                	shl    eax,cl
c001e54f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e553:	89 f8                	mov    eax,edi
c001e555:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001e559:	88 d1                	mov    cl,dl
c001e55b:	d3 e8                	shr    eax,cl
c001e55d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e561:	09 c1                	or     ecx,eax
c001e563:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e567:	89 e9                	mov    ecx,ebp
c001e569:	d3 e7                	shl    edi,cl
c001e56b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001e56f:	89 d8                	mov    eax,ebx
c001e571:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e575:	88 d1                	mov    cl,dl
c001e577:	d3 e8                	shr    eax,cl
c001e579:	89 c7                	mov    edi,eax
c001e57b:	89 e9                	mov    ecx,ebp
c001e57d:	d3 e3                	shl    ebx,cl
c001e57f:	89 f0                	mov    eax,esi
c001e581:	88 d1                	mov    cl,dl
c001e583:	d3 e8                	shr    eax,cl
c001e585:	09 d8                	or     eax,ebx
c001e587:	89 e9                	mov    ecx,ebp
c001e589:	d3 e6                	shl    esi,cl
c001e58b:	89 f3                	mov    ebx,esi
c001e58d:	89 fa                	mov    edx,edi
c001e58f:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001e593:	89 d1                	mov    ecx,edx
c001e595:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001e599:	89 c6                	mov    esi,eax
c001e59b:	89 d7                	mov    edi,edx
c001e59d:	39 d1                	cmp    ecx,edx
c001e59f:	72 27                	jb     c001e5c8 <__umoddi3+0x10c>
c001e5a1:	74 21                	je     c001e5c4 <__umoddi3+0x108>
c001e5a3:	89 ca                	mov    edx,ecx
c001e5a5:	29 f3                	sub    ebx,esi
c001e5a7:	19 fa                	sbb    edx,edi
c001e5a9:	89 d0                	mov    eax,edx
c001e5ab:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001e5af:	d3 e0                	shl    eax,cl
c001e5b1:	89 e9                	mov    ecx,ebp
c001e5b3:	d3 eb                	shr    ebx,cl
c001e5b5:	09 d8                	or     eax,ebx
c001e5b7:	d3 ea                	shr    edx,cl
c001e5b9:	83 c4 1c             	add    esp,0x1c
c001e5bc:	5b                   	pop    ebx
c001e5bd:	5e                   	pop    esi
c001e5be:	5f                   	pop    edi
c001e5bf:	5d                   	pop    ebp
c001e5c0:	c3                   	ret    
c001e5c1:	8d 76 00             	lea    esi,[esi+0x0]
c001e5c4:	39 c3                	cmp    ebx,eax
c001e5c6:	73 db                	jae    c001e5a3 <__umoddi3+0xe7>
c001e5c8:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001e5cc:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001e5d0:	89 d7                	mov    edi,edx
c001e5d2:	89 c6                	mov    esi,eax
c001e5d4:	eb cd                	jmp    c001e5a3 <__umoddi3+0xe7>
c001e5d6:	66 90                	xchg   ax,ax
c001e5d8:	66 90                	xchg   ax,ax
c001e5da:	66 90                	xchg   ax,ax
c001e5dc:	66 90                	xchg   ax,ax
c001e5de:	66 90                	xchg   ax,ax

c001e5e0 <fabs>:
c001e5e0:	83 ec 0c             	sub    esp,0xc
c001e5e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e5e7:	89 04 24             	mov    DWORD PTR [esp],eax
c001e5ea:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e5ee:	25 ff ff ff 7f       	and    eax,0x7fffffff
c001e5f3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e5f7:	dd 04 24             	fld    QWORD PTR [esp]
c001e5fa:	83 c4 0c             	add    esp,0xc
c001e5fd:	c3                   	ret    
c001e5fe:	66 90                	xchg   ax,ax

c001e600 <lrint>:
c001e600:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c001e604:	83 ec 04             	sub    esp,0x4
c001e607:	db 1c 24             	fistp  DWORD PTR [esp]
c001e60a:	58                   	pop    eax
c001e60b:	c3                   	ret    

c001e60c <lrintf>:
c001e60c:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c001e610:	83 ec 04             	sub    esp,0x4
c001e613:	db 1c 24             	fistp  DWORD PTR [esp]
c001e616:	58                   	pop    eax
c001e617:	c3                   	ret    

Disassembly of section .init:

c001e618 <_init>:
c001e618:	55                   	push   ebp
c001e619:	89 e5                	mov    ebp,esp
c001e61b:	e8 f8 1a fe ff       	call   c0000118 <frame_dummy>
c001e620:	e8 a3 fa ff ff       	call   c001e0c8 <__do_global_ctors_aux>
c001e625:	5d                   	pop    ebp
c001e626:	c3                   	ret    

Disassembly of section .fini:

c001e627 <_fini>:
c001e627:	55                   	push   ebp
c001e628:	89 e5                	mov    ebp,esp
c001e62a:	e8 79 1a fe ff       	call   c00000a8 <__do_global_dtors_aux>
c001e62f:	5d                   	pop    ebp
c001e630:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001e632 <Computer::~Computer()>:
c001e632:	83 ec 0c             	sub    esp,0xc
c001e635:	ba f8 ff 01 c0       	mov    edx,0xc001fff8
c001e63a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e63e:	89 10                	mov    DWORD PTR [eax],edx
c001e640:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e644:	83 ec 0c             	sub    esp,0xc
c001e647:	50                   	push   eax
c001e648:	e8 bb 19 ff ff       	call   c0010008 <Device::~Device()>
c001e64d:	83 c4 10             	add    esp,0x10
c001e650:	90                   	nop
c001e651:	83 c4 0c             	add    esp,0xc
c001e654:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001e656 <Computer::~Computer()>:
c001e656:	83 ec 0c             	sub    esp,0xc
c001e659:	83 ec 0c             	sub    esp,0xc
c001e65c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e660:	e8 cd ff ff ff       	call   c001e632 <Computer::~Computer()>
c001e665:	83 c4 10             	add    esp,0x10
c001e668:	83 ec 08             	sub    esp,0x8
c001e66b:	68 ec 01 00 00       	push   0x1ec
c001e670:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e674:	e8 02 06 ff ff       	call   c000ec7b <operator delete(void*, unsigned long)>
c001e679:	83 c4 10             	add    esp,0x10
c001e67c:	83 c4 0c             	add    esp,0xc
c001e67f:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001e680 <idleCommon()>:
c001e680:	83 ec 0c             	sub    esp,0xc
c001e683:	e8 90 93 ff ff       	call   c0017a18 <lockScheduler()>
c001e688:	e8 bf 96 ff ff       	call   c0017d4c <schedule()>
c001e68d:	83 c4 0c             	add    esp,0xc
c001e690:	e9 85 93 ff ff       	jmp    c0017a1a <unlockScheduler()>

Disassembly of section .text._ZN3CPU7readCR3Ev:

c001e695 <CPU::readCR3()>:
c001e695:	83 ec 10             	sub    esp,0x10
c001e698:	0f 20 d8             	mov    eax,cr3
c001e69b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e69f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e6a3:	83 c4 10             	add    esp,0x10
c001e6a6:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeCR3Em:

c001e6a7 <CPU::writeCR3(unsigned long)>:
c001e6a7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e6ab:	0f 22 d8             	mov    cr3,eax
c001e6ae:	90                   	nop
c001e6af:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001e6b0 <LinkedList<UnixFile>::~LinkedList()>:
c001e6b0:	90                   	nop
c001e6b1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001e6b2 <LinkedList<UnixFile>::LinkedList()>:
c001e6b2:	83 ec 0c             	sub    esp,0xc
c001e6b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e6b9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e6bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e6c3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e6ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e6ce:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e6d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e6d9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e6df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e6e3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e6ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e6ee:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e6f5:	83 ec 0c             	sub    esp,0xc
c001e6f8:	68 f1 02 02 c0       	push   0xc00202f1
c001e6fd:	e8 59 06 ff ff       	call   c000ed5b <Dbg::kprintf(char const*, ...)>
c001e702:	83 c4 10             	add    esp,0x10
c001e705:	90                   	nop
c001e706:	83 c4 0c             	add    esp,0xc
c001e709:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001e70a <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001e70a:	83 ec 0c             	sub    esp,0xc
c001e70d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001e712:	75 10                	jne    c001e724 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001e714:	83 ec 0c             	sub    esp,0xc
c001e717:	68 0c 03 02 c0       	push   0xc002030c
c001e71c:	e8 cf 62 ff ff       	call   c00149f0 <Krnl::panic(char const*)>
c001e721:	83 c4 10             	add    esp,0x10
c001e724:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e728:	8b 00                	mov    eax,DWORD PTR [eax]
c001e72a:	85 c0                	test   eax,eax
c001e72c:	74 34                	je     c001e762 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001e72e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e732:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e735:	85 c0                	test   eax,eax
c001e737:	74 29                	je     c001e762 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001e739:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e73d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e740:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e744:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e747:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e74b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e74f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e752:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e756:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e759:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e760:	eb 65                	jmp    c001e7c7 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001e762:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e766:	8b 00                	mov    eax,DWORD PTR [eax]
c001e768:	85 c0                	test   eax,eax
c001e76a:	75 4b                	jne    c001e7b7 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001e76c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e770:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e773:	85 c0                	test   eax,eax
c001e775:	75 40                	jne    c001e7b7 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001e777:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e77b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e77f:	89 10                	mov    DWORD PTR [eax],edx
c001e781:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e785:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e789:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e78c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e790:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e793:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e79a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e79e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e7a1:	85 c0                	test   eax,eax
c001e7a3:	74 22                	je     c001e7c7 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001e7a5:	83 ec 0c             	sub    esp,0xc
c001e7a8:	68 2e 03 02 c0       	push   0xc002032e
c001e7ad:	e8 3e 62 ff ff       	call   c00149f0 <Krnl::panic(char const*)>
c001e7b2:	83 c4 10             	add    esp,0x10
c001e7b5:	eb 10                	jmp    c001e7c7 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001e7b7:	83 ec 0c             	sub    esp,0xc
c001e7ba:	68 38 03 02 c0       	push   0xc0020338
c001e7bf:	e8 2c 62 ff ff       	call   c00149f0 <Krnl::panic(char const*)>
c001e7c4:	83 c4 10             	add    esp,0x10
c001e7c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e7cb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e7ce:	8d 50 01             	lea    edx,[eax+0x1]
c001e7d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e7d5:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e7d8:	90                   	nop
c001e7d9:	83 c4 0c             	add    esp,0xc
c001e7dc:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001e7de <LinkedList<UnixFile>::getFirstElement()>:
c001e7de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e7e2:	8b 00                	mov    eax,DWORD PTR [eax]
c001e7e4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001e7e6 <LinkedList<UnixFile>::removeFirst()>:
c001e7e6:	83 ec 0c             	sub    esp,0xc
c001e7e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e7ed:	8b 00                	mov    eax,DWORD PTR [eax]
c001e7ef:	85 c0                	test   eax,eax
c001e7f1:	75 12                	jne    c001e805 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001e7f3:	83 ec 0c             	sub    esp,0xc
c001e7f6:	68 44 03 02 c0       	push   0xc0020344
c001e7fb:	e8 f0 61 ff ff       	call   c00149f0 <Krnl::panic(char const*)>
c001e800:	83 c4 10             	add    esp,0x10
c001e803:	eb 7e                	jmp    c001e883 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001e805:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e809:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e80c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e80f:	85 c0                	test   eax,eax
c001e811:	74 10                	je     c001e823 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001e813:	83 ec 0c             	sub    esp,0xc
c001e816:	68 8f 03 02 c0       	push   0xc002038f
c001e81b:	e8 d0 61 ff ff       	call   c00149f0 <Krnl::panic(char const*)>
c001e820:	83 c4 10             	add    esp,0x10
c001e823:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e827:	8b 00                	mov    eax,DWORD PTR [eax]
c001e829:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e82c:	85 c0                	test   eax,eax
c001e82e:	75 33                	jne    c001e863 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001e830:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e834:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e83a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e83e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e845:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e849:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e84c:	83 f8 01             	cmp    eax,0x1
c001e84f:	74 21                	je     c001e872 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001e851:	83 ec 0c             	sub    esp,0xc
c001e854:	68 68 03 02 c0       	push   0xc0020368
c001e859:	e8 92 61 ff ff       	call   c00149f0 <Krnl::panic(char const*)>
c001e85e:	83 c4 10             	add    esp,0x10
c001e861:	eb 0f                	jmp    c001e872 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001e863:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e867:	8b 00                	mov    eax,DWORD PTR [eax]
c001e869:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001e86c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e870:	89 10                	mov    DWORD PTR [eax],edx
c001e872:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e876:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e879:	8d 50 ff             	lea    edx,[eax-0x1]
c001e87c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e880:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e883:	83 c4 0c             	add    esp,0xc
c001e886:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001e888 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001e888:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e88c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e88f:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001e890 <DriverlessDevice::~DriverlessDevice()>:
c001e890:	ba 04 0a 02 c0       	mov    edx,0xc0020a04
c001e895:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e899:	89 10                	mov    DWORD PTR [eax],edx
c001e89b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e89f:	50                   	push   eax
c001e8a0:	e8 63 17 ff ff       	call   c0010008 <Device::~Device()>
c001e8a5:	83 c4 04             	add    esp,0x4
c001e8a8:	90                   	nop
c001e8a9:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001e8aa <DriverlessDevice::~DriverlessDevice()>:
c001e8aa:	83 ec 0c             	sub    esp,0xc
c001e8ad:	83 ec 0c             	sub    esp,0xc
c001e8b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e8b4:	e8 d7 ff ff ff       	call   c001e890 <DriverlessDevice::~DriverlessDevice()>
c001e8b9:	83 c4 10             	add    esp,0x10
c001e8bc:	83 ec 08             	sub    esp,0x8
c001e8bf:	68 58 01 00 00       	push   0x158
c001e8c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e8c8:	e8 ae 03 ff ff       	call   c000ec7b <operator delete(void*, unsigned long)>
c001e8cd:	83 c4 10             	add    esp,0x10
c001e8d0:	83 c4 0c             	add    esp,0xc
c001e8d3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001e8d4 <LinkedList<Device>::addElement(Device*)>:
c001e8d4:	83 ec 0c             	sub    esp,0xc
c001e8d7:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001e8dc:	75 10                	jne    c001e8ee <LinkedList<Device>::addElement(Device*)+0x1a>
c001e8de:	83 ec 0c             	sub    esp,0xc
c001e8e1:	68 0c 03 02 c0       	push   0xc002030c
c001e8e6:	e8 05 61 ff ff       	call   c00149f0 <Krnl::panic(char const*)>
c001e8eb:	83 c4 10             	add    esp,0x10
c001e8ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8f2:	8b 00                	mov    eax,DWORD PTR [eax]
c001e8f4:	85 c0                	test   eax,eax
c001e8f6:	74 3a                	je     c001e932 <LinkedList<Device>::addElement(Device*)+0x5e>
c001e8f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8fc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e8ff:	85 c0                	test   eax,eax
c001e901:	74 2f                	je     c001e932 <LinkedList<Device>::addElement(Device*)+0x5e>
c001e903:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e907:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e90a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e90e:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001e914:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e918:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e91c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e91f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e923:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e926:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001e930:	eb 68                	jmp    c001e99a <LinkedList<Device>::addElement(Device*)+0xc6>
c001e932:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e936:	8b 00                	mov    eax,DWORD PTR [eax]
c001e938:	85 c0                	test   eax,eax
c001e93a:	75 4e                	jne    c001e98a <LinkedList<Device>::addElement(Device*)+0xb6>
c001e93c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e940:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e943:	85 c0                	test   eax,eax
c001e945:	75 43                	jne    c001e98a <LinkedList<Device>::addElement(Device*)+0xb6>
c001e947:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e94b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e94f:	89 10                	mov    DWORD PTR [eax],edx
c001e951:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e955:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e959:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e95c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e960:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e963:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001e96d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e971:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e974:	85 c0                	test   eax,eax
c001e976:	74 22                	je     c001e99a <LinkedList<Device>::addElement(Device*)+0xc6>
c001e978:	83 ec 0c             	sub    esp,0xc
c001e97b:	68 2e 03 02 c0       	push   0xc002032e
c001e980:	e8 6b 60 ff ff       	call   c00149f0 <Krnl::panic(char const*)>
c001e985:	83 c4 10             	add    esp,0x10
c001e988:	eb 10                	jmp    c001e99a <LinkedList<Device>::addElement(Device*)+0xc6>
c001e98a:	83 ec 0c             	sub    esp,0xc
c001e98d:	68 38 03 02 c0       	push   0xc0020338
c001e992:	e8 59 60 ff ff       	call   c00149f0 <Krnl::panic(char const*)>
c001e997:	83 c4 10             	add    esp,0x10
c001e99a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e99e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e9a1:	8d 50 01             	lea    edx,[eax+0x1]
c001e9a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9a8:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e9ab:	90                   	nop
c001e9ac:	83 c4 0c             	add    esp,0xc
c001e9af:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001e9b0 <LinkedList<Device>::LinkedList()>:
c001e9b0:	83 ec 0c             	sub    esp,0xc
c001e9b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9b7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e9bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9c1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e9c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9cc:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e9d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9d7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e9dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9e1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e9e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9ec:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e9f3:	83 ec 0c             	sub    esp,0xc
c001e9f6:	68 f1 02 02 c0       	push   0xc00202f1
c001e9fb:	e8 5b 03 ff ff       	call   c000ed5b <Dbg::kprintf(char const*, ...)>
c001ea00:	83 c4 10             	add    esp,0x10
c001ea03:	90                   	nop
c001ea04:	83 c4 0c             	add    esp,0xc
c001ea07:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR0Ev:

c001ea08 <CPU::readCR0()>:
c001ea08:	83 ec 10             	sub    esp,0x10
c001ea0b:	0f 20 c0             	mov    eax,cr0
c001ea0e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ea12:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ea16:	83 c4 10             	add    esp,0x10
c001ea19:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeCR0Em:

c001ea1a <CPU::writeCR0(unsigned long)>:
c001ea1a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ea1e:	0f 22 c0             	mov    cr0,eax
c001ea21:	90                   	nop
c001ea22:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR0Ev:

c001ea23 <CPU::readDR0()>:
c001ea23:	83 ec 10             	sub    esp,0x10
c001ea26:	0f 21 c0             	mov    eax,db0
c001ea29:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ea2d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ea31:	83 c4 10             	add    esp,0x10
c001ea34:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR1Ev:

c001ea35 <CPU::readDR1()>:
c001ea35:	83 ec 10             	sub    esp,0x10
c001ea38:	0f 21 c8             	mov    eax,db1
c001ea3b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ea3f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ea43:	83 c4 10             	add    esp,0x10
c001ea46:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR2Ev:

c001ea47 <CPU::readDR2()>:
c001ea47:	83 ec 10             	sub    esp,0x10
c001ea4a:	0f 21 d0             	mov    eax,db2
c001ea4d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ea51:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ea55:	83 c4 10             	add    esp,0x10
c001ea58:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR3Ev:

c001ea59 <CPU::readDR3()>:
c001ea59:	83 ec 10             	sub    esp,0x10
c001ea5c:	0f 21 d8             	mov    eax,db3
c001ea5f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ea63:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ea67:	83 c4 10             	add    esp,0x10
c001ea6a:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR6Ev:

c001ea6b <CPU::readDR6()>:
c001ea6b:	83 ec 10             	sub    esp,0x10
c001ea6e:	0f 21 f0             	mov    eax,db6
c001ea71:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ea75:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ea79:	83 c4 10             	add    esp,0x10
c001ea7c:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR7Ev:

c001ea7d <CPU::readDR7()>:
c001ea7d:	83 ec 10             	sub    esp,0x10
c001ea80:	0f 21 f8             	mov    eax,db7
c001ea83:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ea87:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ea8b:	83 c4 10             	add    esp,0x10
c001ea8e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001ea90 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001ea90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ea94:	8b 00                	mov    eax,DWORD PTR [eax]
c001ea96:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001ea98 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001ea98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ea9c:	8b 00                	mov    eax,DWORD PTR [eax]
c001ea9e:	85 c0                	test   eax,eax
c001eaa0:	75 0e                	jne    c001eab0 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001eaa2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eaa6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eaa9:	85 c0                	test   eax,eax
c001eaab:	75 03                	jne    c001eab0 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001eaad:	b0 01                	mov    al,0x1
c001eaaf:	c3                   	ret    
c001eab0:	b0 00                	mov    al,0x0
c001eab2:	90                   	nop
c001eab3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001eab4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001eab4:	83 ec 0c             	sub    esp,0xc
c001eab7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eabb:	8b 00                	mov    eax,DWORD PTR [eax]
c001eabd:	85 c0                	test   eax,eax
c001eabf:	75 15                	jne    c001ead6 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c001eac1:	83 ec 0c             	sub    esp,0xc
c001eac4:	68 44 03 02 c0       	push   0xc0020344
c001eac9:	e8 22 5f ff ff       	call   c00149f0 <Krnl::panic(char const*)>
c001eace:	83 c4 10             	add    esp,0x10
c001ead1:	e9 88 00 00 00       	jmp    c001eb5e <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c001ead6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eada:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eadd:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001eae0:	85 c0                	test   eax,eax
c001eae2:	0f 95 c0             	setne  al
c001eae5:	84 c0                	test   al,al
c001eae7:	74 10                	je     c001eaf9 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c001eae9:	83 ec 0c             	sub    esp,0xc
c001eaec:	68 8f 03 02 c0       	push   0xc002038f
c001eaf1:	e8 fa 5e ff ff       	call   c00149f0 <Krnl::panic(char const*)>
c001eaf6:	83 c4 10             	add    esp,0x10
c001eaf9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eafd:	8b 00                	mov    eax,DWORD PTR [eax]
c001eaff:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001eb02:	85 c0                	test   eax,eax
c001eb04:	0f 94 c0             	sete   al
c001eb07:	84 c0                	test   al,al
c001eb09:	74 33                	je     c001eb3e <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c001eb0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb0f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001eb15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb19:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001eb20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb24:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001eb27:	83 f8 01             	cmp    eax,0x1
c001eb2a:	74 21                	je     c001eb4d <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c001eb2c:	83 ec 0c             	sub    esp,0xc
c001eb2f:	68 68 03 02 c0       	push   0xc0020368
c001eb34:	e8 b7 5e ff ff       	call   c00149f0 <Krnl::panic(char const*)>
c001eb39:	83 c4 10             	add    esp,0x10
c001eb3c:	eb 0f                	jmp    c001eb4d <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c001eb3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb42:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb44:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001eb47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb4b:	89 10                	mov    DWORD PTR [eax],edx
c001eb4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb51:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001eb54:	8d 50 ff             	lea    edx,[eax-0x1]
c001eb57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb5b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001eb5e:	83 c4 0c             	add    esp,0xc
c001eb61:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001eb62 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001eb62:	83 ec 0c             	sub    esp,0xc
c001eb65:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001eb6a:	75 10                	jne    c001eb7c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c001eb6c:	83 ec 0c             	sub    esp,0xc
c001eb6f:	68 0c 03 02 c0       	push   0xc002030c
c001eb74:	e8 77 5e ff ff       	call   c00149f0 <Krnl::panic(char const*)>
c001eb79:	83 c4 10             	add    esp,0x10
c001eb7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb80:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb82:	85 c0                	test   eax,eax
c001eb84:	74 34                	je     c001ebba <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c001eb86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb8a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eb8d:	85 c0                	test   eax,eax
c001eb8f:	74 29                	je     c001ebba <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c001eb91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb95:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eb98:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eb9c:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001eb9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eba3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eba7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ebaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ebb1:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001ebb8:	eb 65                	jmp    c001ec1f <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c001ebba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebbe:	8b 00                	mov    eax,DWORD PTR [eax]
c001ebc0:	85 c0                	test   eax,eax
c001ebc2:	75 4b                	jne    c001ec0f <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c001ebc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebc8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ebcb:	85 c0                	test   eax,eax
c001ebcd:	75 40                	jne    c001ec0f <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c001ebcf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebd3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ebd7:	89 10                	mov    DWORD PTR [eax],edx
c001ebd9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebdd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ebe1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ebe4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebe8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ebeb:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001ebf2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebf6:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ebf9:	85 c0                	test   eax,eax
c001ebfb:	74 22                	je     c001ec1f <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c001ebfd:	83 ec 0c             	sub    esp,0xc
c001ec00:	68 2e 03 02 c0       	push   0xc002032e
c001ec05:	e8 e6 5d ff ff       	call   c00149f0 <Krnl::panic(char const*)>
c001ec0a:	83 c4 10             	add    esp,0x10
c001ec0d:	eb 10                	jmp    c001ec1f <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c001ec0f:	83 ec 0c             	sub    esp,0xc
c001ec12:	68 38 03 02 c0       	push   0xc0020338
c001ec17:	e8 d4 5d ff ff       	call   c00149f0 <Krnl::panic(char const*)>
c001ec1c:	83 c4 10             	add    esp,0x10
c001ec1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec23:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ec26:	8d 50 01             	lea    edx,[eax+0x1]
c001ec29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec2d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ec30:	90                   	nop
c001ec31:	83 c4 0c             	add    esp,0xc
c001ec34:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001ec36 <ACPI::~ACPI()>:
c001ec36:	83 ec 0c             	sub    esp,0xc
c001ec39:	ba 90 11 02 c0       	mov    edx,0xc0021190
c001ec3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec42:	89 10                	mov    DWORD PTR [eax],edx
c001ec44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec48:	83 ec 0c             	sub    esp,0xc
c001ec4b:	50                   	push   eax
c001ec4c:	e8 b7 13 ff ff       	call   c0010008 <Device::~Device()>
c001ec51:	83 c4 10             	add    esp,0x10
c001ec54:	90                   	nop
c001ec55:	83 c4 0c             	add    esp,0xc
c001ec58:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001ec5a <ACPI::~ACPI()>:
c001ec5a:	83 ec 0c             	sub    esp,0xc
c001ec5d:	83 ec 0c             	sub    esp,0xc
c001ec60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ec64:	e8 cd ff ff ff       	call   c001ec36 <ACPI::~ACPI()>
c001ec69:	83 c4 10             	add    esp,0x10
c001ec6c:	83 ec 08             	sub    esp,0x8
c001ec6f:	68 68 22 00 00       	push   0x2268
c001ec74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ec78:	e8 fe ff fe ff       	call   c000ec7b <operator delete(void*, unsigned long)>
c001ec7d:	83 c4 10             	add    esp,0x10
c001ec80:	83 c4 0c             	add    esp,0xc
c001ec83:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001ec84 <CPU::~CPU()>:
c001ec84:	83 ec 0c             	sub    esp,0xc
c001ec87:	ba e0 13 02 c0       	mov    edx,0xc00213e0
c001ec8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec90:	89 10                	mov    DWORD PTR [eax],edx
c001ec92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec96:	83 ec 0c             	sub    esp,0xc
c001ec99:	50                   	push   eax
c001ec9a:	e8 69 13 ff ff       	call   c0010008 <Device::~Device()>
c001ec9f:	83 c4 10             	add    esp,0x10
c001eca2:	90                   	nop
c001eca3:	83 c4 0c             	add    esp,0xc
c001eca6:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001eca8 <CPU::~CPU()>:
c001eca8:	83 ec 0c             	sub    esp,0xc
c001ecab:	83 ec 0c             	sub    esp,0xc
c001ecae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ecb2:	e8 cd ff ff ff       	call   c001ec84 <CPU::~CPU()>
c001ecb7:	83 c4 10             	add    esp,0x10
c001ecba:	83 ec 08             	sub    esp,0x8
c001ecbd:	68 98 11 00 00       	push   0x1198
c001ecc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ecc6:	e8 b0 ff fe ff       	call   c000ec7b <operator delete(void*, unsigned long)>
c001eccb:	83 c4 10             	add    esp,0x10
c001ecce:	83 c4 0c             	add    esp,0xc
c001ecd1:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR4Ev:

c001ecd2 <CPU::readCR4()>:
c001ecd2:	83 ec 10             	sub    esp,0x10
c001ecd5:	0f 20 e0             	mov    eax,cr4
c001ecd8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ecdc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ece0:	83 c4 10             	add    esp,0x10
c001ece3:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeDR7Em:

c001ece4 <CPU::writeDR7(unsigned long)>:
c001ece4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ece8:	0f 23 f8             	mov    db7,eax
c001eceb:	90                   	nop
c001ecec:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeCR4Em:

c001eced <CPU::writeCR4(unsigned long)>:
c001eced:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ecf1:	0f 22 e0             	mov    cr4,eax
c001ecf4:	90                   	nop
c001ecf5:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR2Ev:

c001ecf6 <CPU::readCR2()>:
c001ecf6:	83 ec 10             	sub    esp,0x10
c001ecf9:	0f 20 d0             	mov    eax,cr2
c001ecfc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ed00:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ed04:	83 c4 10             	add    esp,0x10
c001ed07:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001ed08 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001ed08:	90                   	nop
c001ed09:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001ed0a <ThreadControlBlock::ThreadControlBlock()>:
c001ed0a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ed0e:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001ed15:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ed19:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001ed20:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ed24:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001ed2b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ed2f:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c001ed36:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ed3a:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001ed3e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ed42:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c001ed46:	90                   	nop
c001ed47:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001ed48 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001ed48:	83 ec 0c             	sub    esp,0xc
c001ed4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed4f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ed55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed59:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ed60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed64:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ed6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed6f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ed75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed79:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ed80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed84:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ed8b:	83 ec 0c             	sub    esp,0xc
c001ed8e:	68 f1 02 02 c0       	push   0xc00202f1
c001ed93:	e8 c3 ff fe ff       	call   c000ed5b <Dbg::kprintf(char const*, ...)>
c001ed98:	83 c4 10             	add    esp,0x10
c001ed9b:	90                   	nop
c001ed9c:	83 c4 0c             	add    esp,0xc
c001ed9f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001eda0 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001eda0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001eda4:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001eda7:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001eda8 <PCI::~PCI()>:
c001eda8:	83 ec 0c             	sub    esp,0xc
c001edab:	ba 90 21 02 c0       	mov    edx,0xc0022190
c001edb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edb4:	89 10                	mov    DWORD PTR [eax],edx
c001edb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edba:	83 ec 0c             	sub    esp,0xc
c001edbd:	50                   	push   eax
c001edbe:	e8 55 0c ff ff       	call   c000fa18 <Bus::~Bus()>
c001edc3:	83 c4 10             	add    esp,0x10
c001edc6:	90                   	nop
c001edc7:	83 c4 0c             	add    esp,0xc
c001edca:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001edcc <PCI::~PCI()>:
c001edcc:	83 ec 0c             	sub    esp,0xc
c001edcf:	83 ec 0c             	sub    esp,0xc
c001edd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001edd6:	e8 cd ff ff ff       	call   c001eda8 <PCI::~PCI()>
c001eddb:	83 c4 10             	add    esp,0x10
c001edde:	83 ec 08             	sub    esp,0x8
c001ede1:	68 58 01 00 00       	push   0x158
c001ede6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001edea:	e8 8c fe fe ff       	call   c000ec7b <operator delete(void*, unsigned long)>
c001edef:	83 c4 10             	add    esp,0x10
c001edf2:	83 c4 0c             	add    esp,0xc
c001edf5:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001edf6 <IDE::~IDE()>:
c001edf6:	83 ec 0c             	sub    esp,0xc
c001edf9:	ba f4 23 02 c0       	mov    edx,0xc00223f4
c001edfe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee02:	89 10                	mov    DWORD PTR [eax],edx
c001ee04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee08:	83 ec 0c             	sub    esp,0xc
c001ee0b:	50                   	push   eax
c001ee0c:	e8 0d 17 ff ff       	call   c001051e <HardDiskController::~HardDiskController()>
c001ee11:	83 c4 10             	add    esp,0x10
c001ee14:	90                   	nop
c001ee15:	83 c4 0c             	add    esp,0xc
c001ee18:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001ee1a <IDE::~IDE()>:
c001ee1a:	83 ec 0c             	sub    esp,0xc
c001ee1d:	83 ec 0c             	sub    esp,0xc
c001ee20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ee24:	e8 cd ff ff ff       	call   c001edf6 <IDE::~IDE()>
c001ee29:	83 c4 10             	add    esp,0x10
c001ee2c:	83 ec 08             	sub    esp,0x8
c001ee2f:	68 70 02 00 00       	push   0x270
c001ee34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ee38:	e8 3e fe fe ff       	call   c000ec7b <operator delete(void*, unsigned long)>
c001ee3d:	83 c4 10             	add    esp,0x10
c001ee40:	83 c4 0c             	add    esp,0xc
c001ee43:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001ee44 <ATA::~ATA()>:
c001ee44:	83 ec 0c             	sub    esp,0xc
c001ee47:	ba 44 24 02 c0       	mov    edx,0xc0022444
c001ee4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee50:	89 10                	mov    DWORD PTR [eax],edx
c001ee52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee56:	83 ec 0c             	sub    esp,0xc
c001ee59:	50                   	push   eax
c001ee5a:	e8 9d 17 ff ff       	call   c00105fc <PhysicalDisk::~PhysicalDisk()>
c001ee5f:	83 c4 10             	add    esp,0x10
c001ee62:	90                   	nop
c001ee63:	83 c4 0c             	add    esp,0xc
c001ee66:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001ee68 <ATA::~ATA()>:
c001ee68:	83 ec 0c             	sub    esp,0xc
c001ee6b:	83 ec 0c             	sub    esp,0xc
c001ee6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ee72:	e8 cd ff ff ff       	call   c001ee44 <ATA::~ATA()>
c001ee77:	83 c4 10             	add    esp,0x10
c001ee7a:	83 ec 08             	sub    esp,0x8
c001ee7d:	68 7c 01 00 00       	push   0x17c
c001ee82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ee86:	e8 f0 fd fe ff       	call   c000ec7b <operator delete(void*, unsigned long)>
c001ee8b:	83 c4 10             	add    esp,0x10
c001ee8e:	83 c4 0c             	add    esp,0xc
c001ee91:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001ee92 <ATAPI::~ATAPI()>:
c001ee92:	83 ec 0c             	sub    esp,0xc
c001ee95:	ba b0 24 02 c0       	mov    edx,0xc00224b0
c001ee9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee9e:	89 10                	mov    DWORD PTR [eax],edx
c001eea0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eea4:	83 ec 0c             	sub    esp,0xc
c001eea7:	50                   	push   eax
c001eea8:	e8 4f 17 ff ff       	call   c00105fc <PhysicalDisk::~PhysicalDisk()>
c001eead:	83 c4 10             	add    esp,0x10
c001eeb0:	90                   	nop
c001eeb1:	83 c4 0c             	add    esp,0xc
c001eeb4:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001eeb6 <ATAPI::~ATAPI()>:
c001eeb6:	83 ec 0c             	sub    esp,0xc
c001eeb9:	83 ec 0c             	sub    esp,0xc
c001eebc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eec0:	e8 cd ff ff ff       	call   c001ee92 <ATAPI::~ATAPI()>
c001eec5:	83 c4 10             	add    esp,0x10
c001eec8:	83 ec 08             	sub    esp,0x8
c001eecb:	68 80 01 00 00       	push   0x180
c001eed0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eed4:	e8 a2 fd fe ff       	call   c000ec7b <operator delete(void*, unsigned long)>
c001eed9:	83 c4 10             	add    esp,0x10
c001eedc:	83 c4 0c             	add    esp,0xc
c001eedf:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c001eee0 <AVX::~AVX()>:
c001eee0:	83 ec 0c             	sub    esp,0xc
c001eee3:	ba ec 24 02 c0       	mov    edx,0xc00224ec
c001eee8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eeec:	89 10                	mov    DWORD PTR [eax],edx
c001eeee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eef2:	83 ec 0c             	sub    esp,0xc
c001eef5:	50                   	push   eax
c001eef6:	e8 85 17 ff ff       	call   c0010680 <FPU::~FPU()>
c001eefb:	83 c4 10             	add    esp,0x10
c001eefe:	90                   	nop
c001eeff:	83 c4 0c             	add    esp,0xc
c001ef02:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c001ef04 <AVX::~AVX()>:
c001ef04:	83 ec 0c             	sub    esp,0xc
c001ef07:	83 ec 0c             	sub    esp,0xc
c001ef0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ef0e:	e8 cd ff ff ff       	call   c001eee0 <AVX::~AVX()>
c001ef13:	83 c4 10             	add    esp,0x10
c001ef16:	83 ec 08             	sub    esp,0x8
c001ef19:	68 58 01 00 00       	push   0x158
c001ef1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ef22:	e8 54 fd fe ff       	call   c000ec7b <operator delete(void*, unsigned long)>
c001ef27:	83 c4 10             	add    esp,0x10
c001ef2a:	83 c4 0c             	add    esp,0xc
c001ef2d:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c001ef2e <MMX::~MMX()>:
c001ef2e:	83 ec 0c             	sub    esp,0xc
c001ef31:	ba 2c 25 02 c0       	mov    edx,0xc002252c
c001ef36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef3a:	89 10                	mov    DWORD PTR [eax],edx
c001ef3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef40:	83 ec 0c             	sub    esp,0xc
c001ef43:	50                   	push   eax
c001ef44:	e8 37 17 ff ff       	call   c0010680 <FPU::~FPU()>
c001ef49:	83 c4 10             	add    esp,0x10
c001ef4c:	90                   	nop
c001ef4d:	83 c4 0c             	add    esp,0xc
c001ef50:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c001ef52 <MMX::~MMX()>:
c001ef52:	83 ec 0c             	sub    esp,0xc
c001ef55:	83 ec 0c             	sub    esp,0xc
c001ef58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ef5c:	e8 cd ff ff ff       	call   c001ef2e <MMX::~MMX()>
c001ef61:	83 c4 10             	add    esp,0x10
c001ef64:	83 ec 08             	sub    esp,0x8
c001ef67:	68 58 01 00 00       	push   0x158
c001ef6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ef70:	e8 06 fd fe ff       	call   c000ec7b <operator delete(void*, unsigned long)>
c001ef75:	83 c4 10             	add    esp,0x10
c001ef78:	83 c4 0c             	add    esp,0xc
c001ef7b:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c001ef7c <SSE::~SSE()>:
c001ef7c:	83 ec 0c             	sub    esp,0xc
c001ef7f:	ba 6c 25 02 c0       	mov    edx,0xc002256c
c001ef84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef88:	89 10                	mov    DWORD PTR [eax],edx
c001ef8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef8e:	83 ec 0c             	sub    esp,0xc
c001ef91:	50                   	push   eax
c001ef92:	e8 e9 16 ff ff       	call   c0010680 <FPU::~FPU()>
c001ef97:	83 c4 10             	add    esp,0x10
c001ef9a:	90                   	nop
c001ef9b:	83 c4 0c             	add    esp,0xc
c001ef9e:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c001efa0 <SSE::~SSE()>:
c001efa0:	83 ec 0c             	sub    esp,0xc
c001efa3:	83 ec 0c             	sub    esp,0xc
c001efa6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001efaa:	e8 cd ff ff ff       	call   c001ef7c <SSE::~SSE()>
c001efaf:	83 c4 10             	add    esp,0x10
c001efb2:	83 ec 08             	sub    esp,0x8
c001efb5:	68 58 01 00 00       	push   0x158
c001efba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001efbe:	e8 b8 fc fe ff       	call   c000ec7b <operator delete(void*, unsigned long)>
c001efc3:	83 c4 10             	add    esp,0x10
c001efc6:	83 c4 0c             	add    esp,0xc
c001efc9:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c001efca <x87::~x87()>:
c001efca:	83 ec 0c             	sub    esp,0xc
c001efcd:	ba ac 25 02 c0       	mov    edx,0xc00225ac
c001efd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efd6:	89 10                	mov    DWORD PTR [eax],edx
c001efd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efdc:	83 ec 0c             	sub    esp,0xc
c001efdf:	50                   	push   eax
c001efe0:	e8 9b 16 ff ff       	call   c0010680 <FPU::~FPU()>
c001efe5:	83 c4 10             	add    esp,0x10
c001efe8:	90                   	nop
c001efe9:	83 c4 0c             	add    esp,0xc
c001efec:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c001efee <x87::~x87()>:
c001efee:	83 ec 0c             	sub    esp,0xc
c001eff1:	83 ec 0c             	sub    esp,0xc
c001eff4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eff8:	e8 cd ff ff ff       	call   c001efca <x87::~x87()>
c001effd:	83 c4 10             	add    esp,0x10
c001f000:	83 ec 08             	sub    esp,0x8
c001f003:	68 58 01 00 00       	push   0x158
c001f008:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f00c:	e8 6a fc fe ff       	call   c000ec7b <operator delete(void*, unsigned long)>
c001f011:	83 c4 10             	add    esp,0x10
c001f014:	83 c4 0c             	add    esp,0xc
c001f017:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001f018 <IOAPIC::~IOAPIC()>:
c001f018:	83 ec 0c             	sub    esp,0xc
c001f01b:	ba 04 27 02 c0       	mov    edx,0xc0022704
c001f020:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f024:	89 10                	mov    DWORD PTR [eax],edx
c001f026:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f02a:	83 ec 0c             	sub    esp,0xc
c001f02d:	50                   	push   eax
c001f02e:	e8 d5 0f ff ff       	call   c0010008 <Device::~Device()>
c001f033:	83 c4 10             	add    esp,0x10
c001f036:	90                   	nop
c001f037:	83 c4 0c             	add    esp,0xc
c001f03a:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c001f03c <IOAPIC::~IOAPIC()>:
c001f03c:	83 ec 0c             	sub    esp,0xc
c001f03f:	83 ec 0c             	sub    esp,0xc
c001f042:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f046:	e8 cd ff ff ff       	call   c001f018 <IOAPIC::~IOAPIC()>
c001f04b:	83 c4 10             	add    esp,0x10
c001f04e:	83 ec 08             	sub    esp,0x8
c001f051:	68 68 01 00 00       	push   0x168
c001f056:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f05a:	e8 1c fc fe ff       	call   c000ec7b <operator delete(void*, unsigned long)>
c001f05f:	83 c4 10             	add    esp,0x10
c001f062:	83 c4 0c             	add    esp,0xc
c001f065:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c001f066 <APIC::~APIC()>:
c001f066:	83 ec 0c             	sub    esp,0xc
c001f069:	ba bc 26 02 c0       	mov    edx,0xc00226bc
c001f06e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f072:	89 10                	mov    DWORD PTR [eax],edx
c001f074:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f078:	83 ec 0c             	sub    esp,0xc
c001f07b:	50                   	push   eax
c001f07c:	e8 bd 1a ff ff       	call   c0010b3e <InterruptController::~InterruptController()>
c001f081:	83 c4 10             	add    esp,0x10
c001f084:	90                   	nop
c001f085:	83 c4 0c             	add    esp,0xc
c001f088:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c001f08a <APIC::~APIC()>:
c001f08a:	83 ec 0c             	sub    esp,0xc
c001f08d:	83 ec 0c             	sub    esp,0xc
c001f090:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f094:	e8 cd ff ff ff       	call   c001f066 <APIC::~APIC()>
c001f099:	83 c4 10             	add    esp,0x10
c001f09c:	83 ec 08             	sub    esp,0x8
c001f09f:	68 58 21 00 00       	push   0x2158
c001f0a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f0a8:	e8 ce fb fe ff       	call   c000ec7b <operator delete(void*, unsigned long)>
c001f0ad:	83 c4 10             	add    esp,0x10
c001f0b0:	83 c4 0c             	add    esp,0xc
c001f0b3:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c001f0b4 <PIC::~PIC()>:
c001f0b4:	83 ec 0c             	sub    esp,0xc
c001f0b7:	ba 54 27 02 c0       	mov    edx,0xc0022754
c001f0bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0c0:	89 10                	mov    DWORD PTR [eax],edx
c001f0c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0c6:	83 ec 0c             	sub    esp,0xc
c001f0c9:	50                   	push   eax
c001f0ca:	e8 6f 1a ff ff       	call   c0010b3e <InterruptController::~InterruptController()>
c001f0cf:	83 c4 10             	add    esp,0x10
c001f0d2:	90                   	nop
c001f0d3:	83 c4 0c             	add    esp,0xc
c001f0d6:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c001f0d8 <PIC::~PIC()>:
c001f0d8:	83 ec 0c             	sub    esp,0xc
c001f0db:	83 ec 0c             	sub    esp,0xc
c001f0de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f0e2:	e8 cd ff ff ff       	call   c001f0b4 <PIC::~PIC()>
c001f0e7:	83 c4 10             	add    esp,0x10
c001f0ea:	83 ec 08             	sub    esp,0x8
c001f0ed:	68 58 21 00 00       	push   0x2158
c001f0f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f0f6:	e8 80 fb fe ff       	call   c000ec7b <operator delete(void*, unsigned long)>
c001f0fb:	83 c4 10             	add    esp,0x10
c001f0fe:	83 c4 0c             	add    esp,0xc
c001f101:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c001f102 <APICTimer::~APICTimer()>:
c001f102:	83 ec 0c             	sub    esp,0xc
c001f105:	ba a8 27 02 c0       	mov    edx,0xc00227a8
c001f10a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f10e:	89 10                	mov    DWORD PTR [eax],edx
c001f110:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f114:	83 ec 0c             	sub    esp,0xc
c001f117:	50                   	push   eax
c001f118:	e8 8d 30 ff ff       	call   c00121aa <Timer::~Timer()>
c001f11d:	83 c4 10             	add    esp,0x10
c001f120:	90                   	nop
c001f121:	83 c4 0c             	add    esp,0xc
c001f124:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c001f126 <APICTimer::~APICTimer()>:
c001f126:	83 ec 0c             	sub    esp,0xc
c001f129:	83 ec 0c             	sub    esp,0xc
c001f12c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f130:	e8 cd ff ff ff       	call   c001f102 <APICTimer::~APICTimer()>
c001f135:	83 c4 10             	add    esp,0x10
c001f138:	83 ec 08             	sub    esp,0x8
c001f13b:	68 60 01 00 00       	push   0x160
c001f140:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f144:	e8 32 fb fe ff       	call   c000ec7b <operator delete(void*, unsigned long)>
c001f149:	83 c4 10             	add    esp,0x10
c001f14c:	83 c4 0c             	add    esp,0xc
c001f14f:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c001f150 <PIT::~PIT()>:
c001f150:	83 ec 0c             	sub    esp,0xc
c001f153:	ba f8 27 02 c0       	mov    edx,0xc00227f8
c001f158:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f15c:	89 10                	mov    DWORD PTR [eax],edx
c001f15e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f162:	83 ec 0c             	sub    esp,0xc
c001f165:	50                   	push   eax
c001f166:	e8 3f 30 ff ff       	call   c00121aa <Timer::~Timer()>
c001f16b:	83 c4 10             	add    esp,0x10
c001f16e:	90                   	nop
c001f16f:	83 c4 0c             	add    esp,0xc
c001f172:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c001f174 <PIT::~PIT()>:
c001f174:	83 ec 0c             	sub    esp,0xc
c001f177:	83 ec 0c             	sub    esp,0xc
c001f17a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f17e:	e8 cd ff ff ff       	call   c001f150 <PIT::~PIT()>
c001f183:	83 c4 10             	add    esp,0x10
c001f186:	83 ec 08             	sub    esp,0x8
c001f189:	68 5c 01 00 00       	push   0x15c
c001f18e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f192:	e8 e4 fa fe ff       	call   c000ec7b <operator delete(void*, unsigned long)>
c001f197:	83 c4 10             	add    esp,0x10
c001f19a:	83 c4 0c             	add    esp,0xc
c001f19d:	c3                   	ret    
